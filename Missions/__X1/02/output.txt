// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11922 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4753 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 34256 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 34256 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2271
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2271
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2269
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2180
// begin SetTag ( Gladstone , 1 ) ;
2094: LD_EXP 19
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 109
// if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2106: LD_EXP 19
2110: PPUSH
2111: CALL_OW 302
2115: PUSH
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 310
2125: AND
2126: IFFALSE 2137
// ComExitBuilding ( Gladstone ) ;
2128: LD_EXP 19
2132: PPUSH
2133: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2137: LD_EXP 19
2141: PPUSH
2142: LD_VAR 0 1
2146: PPUSH
2147: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2151: LD_EXP 19
2155: PPUSH
2156: LD_INT 3
2158: PPUSH
2159: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2163: LD_VAR 0 1
2167: PPUSH
2168: LD_INT 37
2170: PPUSH
2171: LD_INT 23
2173: PPUSH
2174: CALL_OW 111
// end else
2178: GO 2267
// if GetLives ( i ) = 1000 then
2180: LD_VAR 0 1
2184: PPUSH
2185: CALL_OW 256
2189: PUSH
2190: LD_INT 1000
2192: EQUAL
2193: IFFALSE 2267
// begin if SideShoot ( i ) = 2 then
2195: LD_VAR 0 1
2199: PPUSH
2200: CALL_OW 503
2204: PUSH
2205: LD_INT 2
2207: EQUAL
2208: IFFALSE 2255
// begin if not usAlert then
2210: LD_EXP 10
2214: NOT
2215: IFFALSE 2225
// usAlert := true ;
2217: LD_ADDR_EXP 10
2221: PUSH
2222: LD_INT 1
2224: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2225: LD_VAR 0 1
2229: PPUSH
2230: LD_INT 3
2232: PPUSH
2233: CALL_OW 180
// usSci := usSci diff i ;
2237: LD_ADDR_EXP 22
2241: PUSH
2242: LD_EXP 22
2246: PUSH
2247: LD_VAR 0 1
2251: DIFF
2252: ST_TO_ADDR
// end else
2253: GO 2267
// ComMoveToArea ( i , tameArea ) ;
2255: LD_VAR 0 1
2259: PPUSH
2260: LD_INT 5
2262: PPUSH
2263: CALL_OW 113
// end ; end ;
2267: GO 1823
2269: POP
2270: POP
// end ;
2271: PPOPN 5
2273: END
// every 0 0$1 trigger GetTag ( Gladstone ) = 1 and not IsInUnit ( Gladstone ) and not usAlert do
2274: LD_EXP 19
2278: PPUSH
2279: CALL_OW 110
2283: PUSH
2284: LD_INT 1
2286: EQUAL
2287: PUSH
2288: LD_EXP 19
2292: PPUSH
2293: CALL_OW 310
2297: NOT
2298: AND
2299: PUSH
2300: LD_EXP 10
2304: NOT
2305: AND
2306: IFFALSE 2323
2308: GO 2310
2310: DISABLE
// ComEnterUnit ( Gladstone , usLab ) ;
2311: LD_EXP 19
2315: PPUSH
2316: LD_INT 3
2318: PPUSH
2319: CALL_OW 120
2323: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2324: LD_EXP 10
2328: NOT
2329: PUSH
2330: LD_INT 22
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: LD_INT 21
2342: PUSH
2343: LD_INT 3
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 3
2352: PUSH
2353: LD_INT 57
2355: PUSH
2356: EMPTY
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PUSH
2363: LD_INT 3
2365: PUSH
2366: LD_INT 24
2368: PUSH
2369: LD_INT 999
2371: PUSH
2372: EMPTY
2373: LIST
2374: LIST
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: EMPTY
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: PPUSH
2386: CALL_OW 69
2390: PUSH
2391: LD_INT 7
2393: PPUSH
2394: LD_INT 22
2396: PUSH
2397: LD_INT 2
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PPUSH
2404: CALL_OW 70
2408: OR
2409: AND
2410: IFFALSE 2423
2412: GO 2414
2414: DISABLE
// usAlert := true ;
2415: LD_ADDR_EXP 10
2419: PUSH
2420: LD_INT 1
2422: ST_TO_ADDR
2423: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2424: LD_EXP 10
2428: IFFALSE 2775
2430: GO 2432
2432: DISABLE
2433: LD_INT 0
2435: PPUSH
2436: PPUSH
2437: PPUSH
// begin usActiveDefend := true ;
2438: LD_ADDR_EXP 11
2442: PUSH
2443: LD_INT 1
2445: ST_TO_ADDR
// if not usForces then
2446: LD_EXP 21
2450: NOT
2451: IFFALSE 2455
// exit ;
2453: GO 2775
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2455: LD_ADDR_VAR 0 3
2459: PUSH
2460: LD_INT 22
2462: PUSH
2463: LD_INT 1
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PUSH
2470: LD_INT 30
2472: PUSH
2473: LD_INT 4
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PPUSH
2484: CALL_OW 69
2488: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2489: LD_ADDR_VAR 0 2
2493: PUSH
2494: LD_INT 22
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: EMPTY
2501: LIST
2502: LIST
2503: PUSH
2504: LD_INT 30
2506: PUSH
2507: LD_INT 31
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: EMPTY
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 69
2522: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2523: LD_EXP 20
2527: PPUSH
2528: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2532: LD_EXP 20
2536: PPUSH
2537: LD_VAR 0 3
2541: PUSH
2542: LD_INT 1
2544: ARRAY
2545: PPUSH
2546: CALL_OW 180
// if IsOk ( Gladstone ) then
2550: LD_EXP 19
2554: PPUSH
2555: CALL_OW 302
2559: IFFALSE 2600
// begin ComExitBuilding ( Gladstone ) ;
2561: LD_EXP 19
2565: PPUSH
2566: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2570: LD_EXP 19
2574: PPUSH
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2588: LD_EXP 19
2592: PPUSH
2593: LD_INT 1
2595: PPUSH
2596: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2600: LD_EXP 21
2604: PUSH
2605: LD_INT 1
2607: ARRAY
2608: PPUSH
2609: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 1
2620: ARRAY
2621: PPUSH
2622: LD_VAR 0 2
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PPUSH
2631: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2635: LD_EXP 21
2639: PUSH
2640: LD_INT 2
2642: ARRAY
2643: PPUSH
2644: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2648: LD_EXP 21
2652: PUSH
2653: LD_INT 2
2655: ARRAY
2656: PPUSH
2657: LD_INT 22
2659: PUSH
2660: LD_INT 1
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: PUSH
2667: LD_INT 30
2669: PUSH
2670: LD_INT 32
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: EMPTY
2678: LIST
2679: LIST
2680: PPUSH
2681: CALL_OW 69
2685: PUSH
2686: LD_INT 1
2688: ARRAY
2689: PPUSH
2690: CALL_OW 180
// if b > 1 and usForces > 2 then
2694: LD_VAR 0 2
2698: PUSH
2699: LD_INT 1
2701: GREATER
2702: PUSH
2703: LD_EXP 21
2707: PUSH
2708: LD_INT 2
2710: GREATER
2711: AND
2712: IFFALSE 2775
// begin repeat wait ( 0 0$1 ) ;
2714: LD_INT 35
2716: PPUSH
2717: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2721: LD_VAR 0 2
2725: PUSH
2726: LD_INT 2
2728: ARRAY
2729: PPUSH
2730: CALL_OW 461
2734: PUSH
2735: LD_INT 1
2737: NONEQUAL
2738: IFFALSE 2714
// ComExitBuilding ( usForces [ 3 ] ) ;
2740: LD_EXP 21
2744: PUSH
2745: LD_INT 3
2747: ARRAY
2748: PPUSH
2749: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2753: LD_EXP 21
2757: PUSH
2758: LD_INT 3
2760: ARRAY
2761: PPUSH
2762: LD_VAR 0 2
2766: PUSH
2767: LD_INT 2
2769: ARRAY
2770: PPUSH
2771: CALL_OW 180
// end ; end ;
2775: PPOPN 3
2777: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2778: LD_INT 3
2780: PPUSH
2781: CALL_OW 256
2785: PUSH
2786: LD_INT 999
2788: LESS
2789: PUSH
2790: LD_EXP 10
2794: AND
2795: PUSH
2796: LD_EXP 21
2800: AND
2801: IFFALSE 2972
2803: GO 2805
2805: DISABLE
2806: LD_INT 0
2808: PPUSH
// begin for i in usForces do
2809: LD_ADDR_VAR 0 1
2813: PUSH
2814: LD_EXP 21
2818: PUSH
2819: FOR_IN
2820: IFFALSE 2859
// begin if IsInUnit ( i ) then
2822: LD_VAR 0 1
2826: PPUSH
2827: CALL_OW 310
2831: IFFALSE 2842
// ComExitBuilding ( i ) ;
2833: LD_VAR 0 1
2837: PPUSH
2838: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2842: LD_VAR 0 1
2846: PPUSH
2847: LD_INT 31
2849: PPUSH
2850: LD_INT 8
2852: PPUSH
2853: CALL_OW 174
// end ;
2857: GO 2819
2859: POP
2860: POP
// wait ( 0 0$8 ) ;
2861: LD_INT 280
2863: PPUSH
2864: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2868: LD_INT 22
2870: PUSH
2871: LD_INT 2
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PUSH
2878: LD_INT 91
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 14
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: PUSH
2892: EMPTY
2893: LIST
2894: LIST
2895: PPUSH
2896: CALL_OW 69
2900: IFFALSE 2950
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2902: LD_EXP 21
2906: PPUSH
2907: LD_INT 22
2909: PUSH
2910: LD_INT 2
2912: PUSH
2913: EMPTY
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 91
2919: PUSH
2920: LD_INT 3
2922: PUSH
2923: LD_INT 14
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PPUSH
2935: CALL_OW 69
2939: PUSH
2940: LD_INT 1
2942: ARRAY
2943: PPUSH
2944: CALL_OW 115
2948: GO 2972
// begin wait ( 0 0$20 ) ;
2950: LD_INT 700
2952: PPUSH
2953: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2957: LD_EXP 21
2961: PPUSH
2962: LD_INT 39
2964: PPUSH
2965: LD_INT 19
2967: PPUSH
2968: CALL_OW 171
// end ; end ;
2972: PPOPN 1
2974: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2975: LD_EXP 23
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 296
2987: PUSH
2988: LD_INT 10
2990: LESS
2991: PUSH
2992: LD_INT 3
2994: PPUSH
2995: CALL_OW 256
2999: PUSH
3000: LD_INT 999
3002: LESS
3003: OR
3004: PUSH
3005: LD_INT 22
3007: PUSH
3008: LD_INT 1
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: PUSH
3015: LD_INT 25
3017: PUSH
3018: LD_INT 2
3020: PUSH
3021: EMPTY
3022: LIST
3023: LIST
3024: PUSH
3025: EMPTY
3026: LIST
3027: LIST
3028: PPUSH
3029: CALL_OW 69
3033: AND
3034: IFFALSE 3148
3036: GO 3038
3038: DISABLE
3039: LD_INT 0
3041: PPUSH
3042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
3043: LD_ADDR_VAR 0 1
3047: PUSH
3048: LD_INT 22
3050: PUSH
3051: LD_INT 1
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: LD_INT 25
3060: PUSH
3061: LD_INT 2
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: PPUSH
3072: CALL_OW 69
3076: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: LD_INT 22
3084: PUSH
3085: LD_INT 1
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 21
3094: PUSH
3095: LD_INT 2
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 58
3104: PUSH
3105: EMPTY
3106: LIST
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: LIST
3112: PPUSH
3113: CALL_OW 69
3117: ST_TO_ADDR
// if not tmp then
3118: LD_VAR 0 1
3122: NOT
3123: IFFALSE 3127
// exit ;
3125: GO 3148
// ComExitBuilding ( tmp ) ;
3127: LD_VAR 0 1
3131: PPUSH
3132: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3136: LD_VAR 0 1
3140: PPUSH
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 227
// end ;
3148: PPOPN 2
3150: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3151: LD_EXP 10
3155: PUSH
3156: LD_INT 7
3158: PPUSH
3159: LD_INT 22
3161: PUSH
3162: LD_INT 1
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 21
3171: PUSH
3172: LD_INT 1
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 3
3181: PUSH
3182: LD_INT 24
3184: PUSH
3185: LD_INT 600
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: PPUSH
3201: CALL_OW 70
3205: AND
3206: IFFALSE 3334
3208: GO 3210
3210: DISABLE
3211: LD_INT 0
3213: PPUSH
3214: PPUSH
// begin enable ;
3215: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: LD_INT 7
3223: PPUSH
3224: LD_INT 22
3226: PUSH
3227: LD_INT 1
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 21
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: LD_INT 3
3246: PUSH
3247: LD_INT 24
3249: PUSH
3250: LD_INT 600
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: EMPTY
3258: LIST
3259: LIST
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: LIST
3265: PPUSH
3266: CALL_OW 70
3270: ST_TO_ADDR
// if not tmp then
3271: LD_VAR 0 2
3275: NOT
3276: IFFALSE 3280
// exit ;
3278: GO 3334
// for i in tmp do
3280: LD_ADDR_VAR 0 1
3284: PUSH
3285: LD_VAR 0 2
3289: PUSH
3290: FOR_IN
3291: IFFALSE 3332
// if IsInUnit ( i ) then
3293: LD_VAR 0 1
3297: PPUSH
3298: CALL_OW 310
3302: IFFALSE 3315
// ComExitBuilding ( i ) else
3304: LD_VAR 0 1
3308: PPUSH
3309: CALL_OW 122
3313: GO 3330
// ComMoveXY ( i , 48 , 74 ) ;
3315: LD_VAR 0 1
3319: PPUSH
3320: LD_INT 48
3322: PPUSH
3323: LD_INT 74
3325: PPUSH
3326: CALL_OW 111
3330: GO 3290
3332: POP
3333: POP
// end ;
3334: PPOPN 2
3336: END
// every 12 12$00 do var i , un , tmp ;
3337: GO 3339
3339: DISABLE
3340: LD_INT 0
3342: PPUSH
3343: PPUSH
3344: PPUSH
// begin tmp := [ ] ;
3345: LD_ADDR_VAR 0 3
3349: PUSH
3350: EMPTY
3351: ST_TO_ADDR
// uc_side := 1 ;
3352: LD_ADDR_OWVAR 20
3356: PUSH
3357: LD_INT 1
3359: ST_TO_ADDR
// uc_nation := 1 ;
3360: LD_ADDR_OWVAR 21
3364: PUSH
3365: LD_INT 1
3367: ST_TO_ADDR
// case Difficulty of 1 :
3368: LD_OWVAR 67
3372: PUSH
3373: LD_INT 1
3375: DOUBLE
3376: EQUAL
3377: IFTRUE 3381
3379: GO 3484
3381: POP
// begin wait ( 1 1$00 ) ;
3382: LD_INT 2100
3384: PPUSH
3385: CALL_OW 67
// for i := 1 to 2 do
3389: LD_ADDR_VAR 0 1
3393: PUSH
3394: DOUBLE
3395: LD_INT 1
3397: DEC
3398: ST_TO_ADDR
3399: LD_INT 2
3401: PUSH
3402: FOR_TO
3403: IFFALSE 3480
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3405: LD_INT 0
3407: PPUSH
3408: LD_INT 1
3410: PUSH
3411: LD_INT 4
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: LD_VAR 0 1
3422: PUSH
3423: LD_INT 2
3425: MOD
3426: PUSH
3427: LD_INT 1
3429: PLUS
3430: ARRAY
3431: PPUSH
3432: LD_INT 1
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3402
3480: POP
3481: POP
// end ; 2 :
3482: GO 3884
3484: LD_INT 2
3486: DOUBLE
3487: EQUAL
3488: IFTRUE 3492
3490: GO 3626
3492: POP
// begin wait ( 0 0$30 ) ;
3493: LD_INT 1050
3495: PPUSH
3496: CALL_OW 67
// for i := 1 to 2 do
3500: LD_ADDR_VAR 0 1
3504: PUSH
3505: DOUBLE
3506: LD_INT 1
3508: DEC
3509: ST_TO_ADDR
3510: LD_INT 2
3512: PUSH
3513: FOR_TO
3514: IFFALSE 3570
// begin PrepareHuman ( false , 1 , 2 ) ;
3516: LD_INT 0
3518: PPUSH
3519: LD_INT 1
3521: PPUSH
3522: LD_INT 2
3524: PPUSH
3525: CALL_OW 380
// un := CreateHuman ;
3529: LD_ADDR_VAR 0 2
3533: PUSH
3534: CALL_OW 44
3538: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3539: LD_ADDR_VAR 0 3
3543: PUSH
3544: LD_VAR 0 3
3548: PPUSH
3549: LD_VAR 0 3
3553: PUSH
3554: LD_INT 1
3556: PLUS
3557: PPUSH
3558: LD_VAR 0 2
3562: PPUSH
3563: CALL_OW 1
3567: ST_TO_ADDR
// end ;
3568: GO 3513
3570: POP
3571: POP
// PrepareHuman ( false , 4 , 2 ) ;
3572: LD_INT 0
3574: PPUSH
3575: LD_INT 4
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: CALL_OW 380
// un := CreateHuman ;
3585: LD_ADDR_VAR 0 2
3589: PUSH
3590: CALL_OW 44
3594: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3595: LD_ADDR_VAR 0 3
3599: PUSH
3600: LD_VAR 0 3
3604: PPUSH
3605: LD_VAR 0 3
3609: PUSH
3610: LD_INT 1
3612: PLUS
3613: PPUSH
3614: LD_VAR 0 2
3618: PPUSH
3619: CALL_OW 1
3623: ST_TO_ADDR
// end ; 3 .. 4 :
3624: GO 3884
3626: LD_INT 3
3628: DOUBLE
3629: GREATEREQUAL
3630: IFFALSE 3638
3632: LD_INT 4
3634: DOUBLE
3635: LESSEQUAL
3636: IFTRUE 3640
3638: GO 3883
3640: POP
// begin for i := 1 to 2 do
3641: LD_ADDR_VAR 0 1
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 2
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3711
// begin PrepareHuman ( false , 1 , 2 ) ;
3657: LD_INT 0
3659: PPUSH
3660: LD_INT 1
3662: PPUSH
3663: LD_INT 2
3665: PPUSH
3666: CALL_OW 380
// un := CreateHuman ;
3670: LD_ADDR_VAR 0 2
3674: PUSH
3675: CALL_OW 44
3679: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3680: LD_ADDR_VAR 0 3
3684: PUSH
3685: LD_VAR 0 3
3689: PPUSH
3690: LD_VAR 0 3
3694: PUSH
3695: LD_INT 1
3697: PLUS
3698: PPUSH
3699: LD_VAR 0 2
3703: PPUSH
3704: CALL_OW 1
3708: ST_TO_ADDR
// end ;
3709: GO 3654
3711: POP
3712: POP
// PrepareHuman ( false , 4 , 2 ) ;
3713: LD_INT 0
3715: PPUSH
3716: LD_INT 4
3718: PPUSH
3719: LD_INT 2
3721: PPUSH
3722: CALL_OW 380
// un := CreateHuman ;
3726: LD_ADDR_VAR 0 2
3730: PUSH
3731: CALL_OW 44
3735: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3736: LD_ADDR_VAR 0 3
3740: PUSH
3741: LD_VAR 0 3
3745: PPUSH
3746: LD_VAR 0 3
3750: PUSH
3751: LD_INT 1
3753: PLUS
3754: PPUSH
3755: LD_VAR 0 2
3759: PPUSH
3760: CALL_OW 1
3764: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3765: LD_INT 1
3767: PPUSH
3768: LD_INT 1
3770: PPUSH
3771: LD_INT 2
3773: PPUSH
3774: LD_INT 2
3776: PPUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: LD_INT 90
3785: PPUSH
3786: CALL 241 0 7
// un := CreateVehicle ;
3790: LD_ADDR_VAR 0 2
3794: PUSH
3795: CALL_OW 45
3799: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: LD_VAR 0 3
3809: PPUSH
3810: LD_VAR 0 3
3814: PUSH
3815: LD_INT 1
3817: PLUS
3818: PPUSH
3819: LD_VAR 0 2
3823: PPUSH
3824: CALL_OW 1
3828: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3829: LD_INT 0
3831: PPUSH
3832: LD_INT 1
3834: PPUSH
3835: LD_INT 2
3837: PPUSH
3838: CALL_OW 380
// un := CreateHuman ;
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: CALL_OW 44
3851: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: LD_VAR 0 3
3861: PPUSH
3862: LD_VAR 0 3
3866: PUSH
3867: LD_INT 1
3869: PLUS
3870: PPUSH
3871: LD_VAR 0 2
3875: PPUSH
3876: CALL_OW 1
3880: ST_TO_ADDR
// end ; end ;
3881: GO 3884
3883: POP
// for i := 1 to tmp do
3884: LD_ADDR_VAR 0 1
3888: PUSH
3889: DOUBLE
3890: LD_INT 1
3892: DEC
3893: ST_TO_ADDR
3894: LD_VAR 0 3
3898: PUSH
3899: FOR_TO
3900: IFFALSE 4065
// begin SetDir ( tmp [ i ] , 1 ) ;
3902: LD_VAR 0 3
3906: PUSH
3907: LD_VAR 0 1
3911: ARRAY
3912: PPUSH
3913: LD_INT 1
3915: PPUSH
3916: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: ARRAY
3930: PPUSH
3931: CALL_OW 247
3935: PUSH
3936: LD_INT 1
3938: EQUAL
3939: IFFALSE 3967
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3941: LD_VAR 0 3
3945: PUSH
3946: LD_VAR 0 1
3950: ARRAY
3951: PPUSH
3952: LD_INT 28
3954: PPUSH
3955: LD_INT 52
3957: PPUSH
3958: LD_INT 0
3960: PPUSH
3961: CALL_OW 48
3965: GO 4035
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3967: LD_VAR 0 3
3971: PUSH
3972: LD_VAR 0 1
3976: ARRAY
3977: PPUSH
3978: LD_INT 28
3980: PPUSH
3981: LD_INT 52
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 48
// i := i + 1 ;
3991: LD_ADDR_VAR 0 1
3995: PUSH
3996: LD_VAR 0 1
4000: PUSH
4001: LD_INT 1
4003: PLUS
4004: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
4005: LD_VAR 0 3
4009: PUSH
4010: LD_VAR 0 1
4014: ARRAY
4015: PPUSH
4016: LD_VAR 0 3
4020: PUSH
4021: LD_VAR 0 1
4025: PUSH
4026: LD_INT 1
4028: MINUS
4029: ARRAY
4030: PPUSH
4031: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
4035: LD_VAR 0 3
4039: PUSH
4040: LD_VAR 0 1
4044: ARRAY
4045: PPUSH
4046: LD_INT 43
4048: PPUSH
4049: LD_INT 56
4051: PPUSH
4052: CALL_OW 111
// wait ( 0 0$2 ) ;
4056: LD_INT 70
4058: PPUSH
4059: CALL_OW 67
// end ;
4063: GO 3899
4065: POP
4066: POP
// wait ( 0 0$2 ) ;
4067: LD_INT 70
4069: PPUSH
4070: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4074: LD_INT 7
4076: PPUSH
4077: LD_INT 22
4079: PUSH
4080: LD_INT 2
4082: PUSH
4083: EMPTY
4084: LIST
4085: LIST
4086: PPUSH
4087: CALL_OW 70
4091: NOT
4092: IFFALSE 4290
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4094: LD_VAR 0 3
4098: PPUSH
4099: LD_INT 35
4101: PPUSH
4102: LD_INT 24
4104: PPUSH
4105: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4109: LD_ADDR_EXP 21
4113: PUSH
4114: LD_EXP 21
4118: PUSH
4119: LD_VAR 0 3
4123: PPUSH
4124: LD_INT 25
4126: PUSH
4127: LD_INT 1
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 72
4138: UNION
4139: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4140: LD_INT 22
4142: PUSH
4143: LD_INT 1
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 30
4152: PUSH
4153: LD_INT 4
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 69
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PPUSH
4173: CALL_OW 313
4177: PUSH
4178: LD_INT 6
4180: LESS
4181: IFFALSE 4240
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4183: LD_VAR 0 3
4187: PPUSH
4188: LD_INT 25
4190: PUSH
4191: LD_INT 1
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 72
4202: PPUSH
4203: LD_INT 22
4205: PUSH
4206: LD_INT 1
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: LD_INT 30
4215: PUSH
4216: LD_INT 4
4218: PUSH
4219: EMPTY
4220: LIST
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 69
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: PPUSH
4236: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_INT 25
4247: PUSH
4248: LD_INT 4
4250: PUSH
4251: EMPTY
4252: LIST
4253: LIST
4254: PPUSH
4255: CALL_OW 72
4259: IFFALSE 4288
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4261: LD_VAR 0 3
4265: PPUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 4
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PPUSH
4276: CALL_OW 72
4280: PPUSH
4281: LD_INT 3
4283: PPUSH
4284: CALL_OW 180
// end else
4288: GO 4565
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4290: LD_ADDR_VAR 0 3
4294: PUSH
4295: LD_VAR 0 3
4299: PUSH
4300: LD_INT 6
4302: PPUSH
4303: LD_INT 22
4305: PUSH
4306: LD_INT 1
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 70
4317: UNION
4318: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4319: LD_VAR 0 3
4323: PPUSH
4324: LD_INT 45
4326: PPUSH
4327: LD_INT 54
4329: PPUSH
4330: CALL_OW 111
// wait ( 0 0$3 ) ;
4334: LD_INT 105
4336: PPUSH
4337: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4341: LD_VAR 0 3
4345: PUSH
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_INT 25
4353: PUSH
4354: LD_INT 4
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PPUSH
4361: CALL_OW 72
4365: DIFF
4366: PPUSH
4367: LD_INT 35
4369: PPUSH
4370: LD_INT 24
4372: PPUSH
4373: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4377: LD_VAR 0 3
4381: PPUSH
4382: LD_INT 25
4384: PUSH
4385: LD_INT 4
4387: PUSH
4388: EMPTY
4389: LIST
4390: LIST
4391: PPUSH
4392: CALL_OW 72
4396: PPUSH
4397: LD_INT 42
4399: PPUSH
4400: LD_INT 49
4402: PPUSH
4403: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4407: LD_INT 35
4409: PPUSH
4410: CALL_OW 67
// for i in tmp do
4414: LD_ADDR_VAR 0 1
4418: PUSH
4419: LD_VAR 0 3
4423: PUSH
4424: FOR_IN
4425: IFFALSE 4556
// if IsDead ( i ) then
4427: LD_VAR 0 1
4431: PPUSH
4432: CALL_OW 301
4436: IFFALSE 4456
// tmp := tmp diff i else
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: LD_VAR 0 3
4447: PUSH
4448: LD_VAR 0 1
4452: DIFF
4453: ST_TO_ADDR
4454: GO 4554
// if GetClass ( i ) = 1 then
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 257
4465: PUSH
4466: LD_INT 1
4468: EQUAL
4469: IFFALSE 4554
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4471: LD_VAR 0 1
4475: PPUSH
4476: CALL_OW 256
4480: PUSH
4481: LD_INT 600
4483: LESS
4484: PUSH
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 42
4492: PPUSH
4493: LD_INT 49
4495: PPUSH
4496: CALL_OW 297
4500: PUSH
4501: LD_INT 6
4503: GREATER
4504: AND
4505: IFFALSE 4524
// ComMoveXY ( i , 42 , 49 ) else
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_INT 42
4514: PPUSH
4515: LD_INT 49
4517: PPUSH
4518: CALL_OW 111
4522: GO 4554
// if GetLives ( i ) = 1000 then
4524: LD_VAR 0 1
4528: PPUSH
4529: CALL_OW 256
4533: PUSH
4534: LD_INT 1000
4536: EQUAL
4537: IFFALSE 4554
// ComAgressiveMove ( i , 36 , 25 ) ;
4539: LD_VAR 0 1
4543: PPUSH
4544: LD_INT 36
4546: PPUSH
4547: LD_INT 25
4549: PPUSH
4550: CALL_OW 114
// end ;
4554: GO 4424
4556: POP
4557: POP
// until not tmp ;
4558: LD_VAR 0 3
4562: NOT
4563: IFFALSE 4407
// end ; end ;
4565: PPOPN 3
4567: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4568: LD_INT 7
4570: PPUSH
4571: LD_INT 22
4573: PUSH
4574: LD_INT 2
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 70
4585: PUSH
4586: LD_EXP 14
4590: NOT
4591: AND
4592: IFFALSE 4750
4594: GO 4596
4596: DISABLE
4597: LD_INT 0
4599: PPUSH
4600: PPUSH
4601: PPUSH
// begin for i := 1 to 2 do
4602: LD_ADDR_VAR 0 1
4606: PUSH
4607: DOUBLE
4608: LD_INT 1
4610: DEC
4611: ST_TO_ADDR
4612: LD_INT 2
4614: PUSH
4615: FOR_TO
4616: IFFALSE 4748
// begin wait ( 0 0$3 ) ;
4618: LD_INT 105
4620: PPUSH
4621: CALL_OW 67
// uc_side := 1 ;
4625: LD_ADDR_OWVAR 20
4629: PUSH
4630: LD_INT 1
4632: ST_TO_ADDR
// uc_nation := 1 ;
4633: LD_ADDR_OWVAR 21
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4641: LD_INT 1
4643: PPUSH
4644: LD_INT 1
4646: PPUSH
4647: LD_INT 2
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: LD_INT 90
4661: PPUSH
4662: CALL 241 0 7
// veh := CreateVehicle ;
4666: LD_ADDR_VAR 0 3
4670: PUSH
4671: CALL_OW 45
4675: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4676: LD_VAR 0 3
4680: PPUSH
4681: LD_INT 29
4683: PPUSH
4684: LD_INT 52
4686: PPUSH
4687: LD_INT 0
4689: PPUSH
4690: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4694: LD_INT 0
4696: PPUSH
4697: LD_INT 3
4699: PPUSH
4700: LD_INT 3
4702: PPUSH
4703: CALL_OW 380
// un := CreateHuman ;
4707: LD_ADDR_VAR 0 2
4711: PUSH
4712: CALL_OW 44
4716: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4717: LD_VAR 0 2
4721: PPUSH
4722: LD_VAR 0 3
4726: PPUSH
4727: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 36
4738: PPUSH
4739: LD_INT 25
4741: PPUSH
4742: CALL_OW 114
// end ;
4746: GO 4615
4748: POP
4749: POP
// end ; end_of_file
4750: PPOPN 3
4752: END
// export function Action ; var i , tmp ; begin
4753: LD_INT 0
4755: PPUSH
4756: PPUSH
4757: PPUSH
// InGameOn ;
4758: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4762: LD_INT 2
4764: PPUSH
4765: LD_INT 3
4767: PPUSH
4768: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4772: LD_EXP 23
4776: PPUSH
4777: LD_INT 78
4779: PPUSH
4780: LD_INT 61
4782: PPUSH
4783: CALL_OW 111
// if Mike then
4787: LD_EXP 25
4791: IFFALSE 4808
// ComMoveXY ( Mike , 80 , 66 ) ;
4793: LD_EXP 25
4797: PPUSH
4798: LD_INT 80
4800: PPUSH
4801: LD_INT 66
4803: PPUSH
4804: CALL_OW 111
// if Givi then
4808: LD_EXP 24
4812: IFFALSE 4829
// ComMoveXY ( Givi , 82 , 66 ) ;
4814: LD_EXP 24
4818: PPUSH
4819: LD_INT 82
4821: PPUSH
4822: LD_INT 66
4824: PPUSH
4825: CALL_OW 111
// if Kamil then
4829: LD_EXP 26
4833: IFFALSE 4850
// ComMoveXY ( Kamil , 82 , 67 ) ;
4835: LD_EXP 26
4839: PPUSH
4840: LD_INT 82
4842: PPUSH
4843: LD_INT 67
4845: PPUSH
4846: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4850: LD_EXP 23
4854: PPUSH
4855: CALL_OW 87
// wait ( 0 0$2 ) ;
4859: LD_INT 70
4861: PPUSH
4862: CALL_OW 67
// if Givi and Mike then
4866: LD_EXP 24
4870: PUSH
4871: LD_EXP 25
4875: AND
4876: IFFALSE 5410
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4878: LD_EXP 24
4882: PUSH
4883: LD_EXP 25
4887: PUSH
4888: LD_EXP 26
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: LIST
4897: PPUSH
4898: LD_EXP 23
4902: PPUSH
4903: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4907: LD_EXP 23
4911: PPUSH
4912: LD_EXP 24
4916: PPUSH
4917: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4921: LD_EXP 24
4925: PPUSH
4926: LD_STRING DG-1-start
4928: PPUSH
4929: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4933: LD_EXP 23
4937: PPUSH
4938: LD_STRING DH-1-start
4940: PPUSH
4941: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4945: LD_EXP 25
4949: PPUSH
4950: LD_EXP 23
4954: PPUSH
4955: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4959: LD_EXP 23
4963: PPUSH
4964: LD_EXP 25
4968: PPUSH
4969: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4973: LD_EXP 25
4977: PPUSH
4978: LD_STRING DM-1-start
4980: PPUSH
4981: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4985: LD_EXP 23
4989: PPUSH
4990: LD_STRING DH-2-start
4992: PPUSH
4993: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4997: LD_EXP 25
5001: PPUSH
5002: LD_STRING DM-2-start
5004: PPUSH
5005: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
5009: LD_EXP 24
5013: PPUSH
5014: LD_STRING DG-2-start
5016: PPUSH
5017: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
5021: LD_EXP 25
5025: PPUSH
5026: LD_EXP 24
5030: PPUSH
5031: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
5035: LD_EXP 23
5039: PPUSH
5040: LD_EXP 25
5044: PPUSH
5045: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
5049: LD_EXP 25
5053: PPUSH
5054: LD_STRING DM-3-start
5056: PPUSH
5057: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
5061: LD_EXP 23
5065: PPUSH
5066: LD_STRING DH-3-start
5068: PPUSH
5069: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5073: LD_EXP 23
5077: PUSH
5078: LD_EXP 25
5082: PUSH
5083: LD_EXP 24
5087: PUSH
5088: LD_EXP 26
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: PPUSH
5099: LD_INT 84
5101: PPUSH
5102: LD_INT 51
5104: PPUSH
5105: CALL_OW 111
// wait ( 0 0$2 ) ;
5109: LD_INT 70
5111: PPUSH
5112: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5116: LD_EXP 24
5120: PPUSH
5121: LD_STRING DG-3-start
5123: PPUSH
5124: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5128: LD_EXP 23
5132: PUSH
5133: LD_EXP 25
5137: PUSH
5138: LD_EXP 24
5142: PUSH
5143: LD_EXP 26
5147: PUSH
5148: EMPTY
5149: LIST
5150: LIST
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5158: LD_EXP 23
5162: PPUSH
5163: LD_EXP 24
5167: PPUSH
5168: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5172: LD_EXP 24
5176: PUSH
5177: LD_EXP 25
5181: PUSH
5182: LD_EXP 26
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: LIST
5191: PPUSH
5192: LD_EXP 23
5196: PPUSH
5197: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5201: LD_EXP 23
5205: PPUSH
5206: LD_STRING DH-4-start
5208: PPUSH
5209: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5213: LD_EXP 24
5217: PPUSH
5218: LD_STRING DG-4-start
5220: PPUSH
5221: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5225: LD_EXP 23
5229: PPUSH
5230: LD_STRING DH-5-start
5232: PPUSH
5233: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5237: LD_EXP 24
5241: PPUSH
5242: LD_STRING DG-5-start
5244: PPUSH
5245: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5249: LD_EXP 23
5253: PPUSH
5254: LD_STRING DH-6-start
5256: PPUSH
5257: CALL_OW 88
// if not Kamil then
5261: LD_EXP 26
5265: NOT
5266: IFFALSE 5317
// begin Say ( Mike , DM-6-start ) ;
5268: LD_EXP 25
5272: PPUSH
5273: LD_STRING DM-6-start
5275: PPUSH
5276: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5280: LD_EXP 23
5284: PUSH
5285: LD_EXP 24
5289: PUSH
5290: EMPTY
5291: LIST
5292: LIST
5293: PPUSH
5294: LD_EXP 25
5298: PPUSH
5299: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5303: LD_EXP 24
5307: PPUSH
5308: LD_STRING DG-6-start
5310: PPUSH
5311: CALL_OW 88
// end else
5315: GO 5396
// begin Say ( Mike , DM-6-start-a ) ;
5317: LD_EXP 25
5321: PPUSH
5322: LD_STRING DM-6-start-a
5324: PPUSH
5325: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5329: LD_EXP 23
5333: PUSH
5334: LD_EXP 24
5338: PUSH
5339: LD_EXP 25
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PPUSH
5349: LD_EXP 26
5353: PPUSH
5354: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5358: LD_EXP 26
5362: PPUSH
5363: LD_EXP 25
5367: PPUSH
5368: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5372: LD_EXP 26
5376: PPUSH
5377: LD_STRING DKam-7-start-a
5379: PPUSH
5380: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5384: LD_EXP 24
5388: PPUSH
5389: LD_STRING DG-6-start-a
5391: PPUSH
5392: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5396: LD_EXP 23
5400: PPUSH
5401: LD_STRING DH-7-start
5403: PPUSH
5404: CALL_OW 88
// end else
5408: GO 6132
// if not Mike and Givi then
5410: LD_EXP 25
5414: NOT
5415: PUSH
5416: LD_EXP 24
5420: AND
5421: IFFALSE 5766
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5423: LD_EXP 24
5427: PUSH
5428: LD_EXP 26
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: PPUSH
5437: LD_EXP 23
5441: PPUSH
5442: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5446: LD_EXP 23
5450: PPUSH
5451: LD_EXP 24
5455: PPUSH
5456: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5460: LD_EXP 24
5464: PPUSH
5465: LD_STRING DG-1-start-c
5467: PPUSH
5468: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5472: LD_EXP 23
5476: PPUSH
5477: LD_STRING DH-1-start-c
5479: PPUSH
5480: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5484: LD_EXP 24
5488: PPUSH
5489: LD_STRING DG-2-start-c
5491: PPUSH
5492: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5496: LD_EXP 23
5500: PPUSH
5501: LD_STRING DH-2-start-c
5503: PPUSH
5504: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5508: LD_EXP 24
5512: PPUSH
5513: LD_STRING DG-3-start-c
5515: PPUSH
5516: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5520: LD_EXP 23
5524: PPUSH
5525: LD_INT 83
5527: PPUSH
5528: LD_INT 56
5530: PPUSH
5531: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5535: LD_EXP 24
5539: PPUSH
5540: LD_INT 83
5542: PPUSH
5543: LD_INT 59
5545: PPUSH
5546: CALL_OW 111
// if Kamil then
5550: LD_EXP 26
5554: IFFALSE 5571
// ComMoveXY ( Kamil , 80 , 58 ) ;
5556: LD_EXP 26
5560: PPUSH
5561: LD_INT 80
5563: PPUSH
5564: LD_INT 58
5566: PPUSH
5567: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5571: LD_EXP 23
5575: PPUSH
5576: LD_EXP 24
5580: PPUSH
5581: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5585: LD_EXP 24
5589: PUSH
5590: LD_EXP 26
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PPUSH
5599: LD_EXP 23
5603: PPUSH
5604: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5608: LD_EXP 23
5612: PPUSH
5613: LD_STRING DH-3-start-c
5615: PPUSH
5616: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5620: LD_EXP 24
5624: PPUSH
5625: LD_STRING DG-4-start-c
5627: PPUSH
5628: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5632: LD_EXP 23
5636: PPUSH
5637: LD_STRING DH-5-start-c
5639: PPUSH
5640: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-5-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-6-start-c
5663: PPUSH
5664: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5668: LD_EXP 24
5672: PPUSH
5673: LD_STRING DG-6-start-c
5675: PPUSH
5676: CALL_OW 88
// if Kamil then
5680: LD_EXP 26
5684: IFFALSE 5740
// begin ComTurnUnit ( Kamil , Heike ) ;
5686: LD_EXP 26
5690: PPUSH
5691: LD_EXP 23
5695: PPUSH
5696: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5700: LD_EXP 26
5704: PPUSH
5705: LD_STRING DKam-1-start-c
5707: PPUSH
5708: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5712: LD_EXP 24
5716: PPUSH
5717: LD_EXP 26
5721: PPUSH
5722: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5726: LD_EXP 24
5730: PPUSH
5731: LD_STRING DG-7-start-c
5733: PPUSH
5734: CALL_OW 88
// end else
5738: GO 5764
// begin Say ( Givi , DG-8-start-c ) ;
5740: LD_EXP 24
5744: PPUSH
5745: LD_STRING DG-8-start-c
5747: PPUSH
5748: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5752: LD_EXP 23
5756: PPUSH
5757: LD_STRING DH-7-start-c
5759: PPUSH
5760: CALL_OW 88
// end ; end else
5764: GO 6132
// if not Givi and Mike then
5766: LD_EXP 24
5770: NOT
5771: PUSH
5772: LD_EXP 25
5776: AND
5777: IFFALSE 6036
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5779: LD_EXP 25
5783: PUSH
5784: LD_EXP 26
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PPUSH
5793: LD_EXP 23
5797: PPUSH
5798: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5802: LD_EXP 23
5806: PPUSH
5807: LD_EXP 25
5811: PPUSH
5812: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_STRING DM-1-start-b
5823: PPUSH
5824: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5828: LD_EXP 23
5832: PPUSH
5833: LD_STRING DH-1-start-b
5835: PPUSH
5836: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5840: LD_EXP 25
5844: PPUSH
5845: LD_STRING DM-2-start-b
5847: PPUSH
5848: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5852: LD_EXP 23
5856: PPUSH
5857: LD_STRING DH-2-start-b
5859: PPUSH
5860: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5864: LD_EXP 25
5868: PPUSH
5869: LD_STRING DM-3-start-b
5871: PPUSH
5872: CALL_OW 88
// if Kamil then
5876: LD_EXP 26
5880: IFFALSE 5897
// ComMoveXY ( Kamil , 80 , 58 ) ;
5882: LD_EXP 26
5886: PPUSH
5887: LD_INT 80
5889: PPUSH
5890: LD_INT 58
5892: PPUSH
5893: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5897: LD_EXP 23
5901: PPUSH
5902: LD_INT 83
5904: PPUSH
5905: LD_INT 56
5907: PPUSH
5908: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5912: LD_EXP 25
5916: PPUSH
5917: LD_INT 83
5919: PPUSH
5920: LD_INT 59
5922: PPUSH
5923: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5927: LD_EXP 23
5931: PPUSH
5932: LD_EXP 25
5936: PPUSH
5937: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5941: LD_EXP 26
5945: PUSH
5946: LD_EXP 25
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: PPUSH
5955: LD_EXP 23
5959: PPUSH
5960: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5964: LD_EXP 23
5968: PPUSH
5969: LD_STRING DH-3-start-b
5971: PPUSH
5972: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5976: LD_EXP 25
5980: PPUSH
5981: LD_STRING DM-4-start-b
5983: PPUSH
5984: CALL_OW 88
// if Kamil then
5988: LD_EXP 26
5992: IFFALSE 6022
// begin ComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
6008: LD_EXP 26
6012: PPUSH
6013: LD_STRING DKam-1-start-c
6015: PPUSH
6016: CALL_OW 88
// end else
6020: GO 6034
// begin Say ( Mike , DM-5-start-b ) ;
6022: LD_EXP 25
6026: PPUSH
6027: LD_STRING DM-5-start-b
6029: PPUSH
6030: CALL_OW 88
// end ; end else
6034: GO 6132
// if Kamil then
6036: LD_EXP 26
6040: IFFALSE 6120
// begin AddComTurnUnit ( Heike , Kamil ) ;
6042: LD_EXP 23
6046: PPUSH
6047: LD_EXP 26
6051: PPUSH
6052: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
6056: LD_EXP 26
6060: PPUSH
6061: LD_EXP 23
6065: PPUSH
6066: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6070: LD_EXP 23
6074: PPUSH
6075: LD_STRING DH-1-start-f
6077: PPUSH
6078: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6082: LD_EXP 26
6086: PPUSH
6087: LD_STRING DKam-1-start-f
6089: PPUSH
6090: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6094: LD_EXP 23
6098: PPUSH
6099: LD_STRING DH-2-start-f
6101: PPUSH
6102: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6106: LD_EXP 26
6110: PPUSH
6111: LD_STRING DKam-2-start-f
6113: PPUSH
6114: CALL_OW 88
// end else
6118: GO 6132
// begin Say ( Heike , DH-1-start-d ) ;
6120: LD_EXP 23
6124: PPUSH
6125: LD_STRING DH-1-start-d
6127: PPUSH
6128: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6132: LD_EXP 23
6136: PUSH
6137: LD_EXP 24
6141: PUSH
6142: LD_EXP 25
6146: PUSH
6147: LD_EXP 26
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 139
// InGameOff ;
6162: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6166: LD_STRING OEast
6168: PPUSH
6169: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6173: LD_INT 10
6175: PPUSH
6176: LD_INT 1
6178: PPUSH
6179: CALL_OW 424
// SaveForQuickRestart ;
6183: CALL_OW 22
// wait ( 0 0$20 ) ;
6187: LD_INT 700
6189: PPUSH
6190: CALL_OW 67
// SendSciToForest ;
6194: CALL 1524 0 0
// if Difficulty = 1 then
6198: LD_OWVAR 67
6202: PUSH
6203: LD_INT 1
6205: EQUAL
6206: IFFALSE 6210
// exit ;
6208: GO 6331
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6210: LD_INT 10500
6212: PUSH
6213: LD_INT 5250
6215: PUSH
6216: LD_INT 4200
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: PUSH
6224: LD_OWVAR 67
6228: PUSH
6229: LD_INT 1
6231: MINUS
6232: ARRAY
6233: PPUSH
6234: CALL_OW 67
// if usAlert then
6238: LD_EXP 10
6242: IFFALSE 6246
// exit ;
6244: GO 6331
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6246: LD_ADDR_VAR 0 3
6250: PUSH
6251: LD_INT 22
6253: PUSH
6254: LD_INT 1
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 2
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: PPUSH
6275: CALL_OW 69
6279: ST_TO_ADDR
// if not tmp then
6280: LD_VAR 0 3
6284: NOT
6285: IFFALSE 6289
// exit ;
6287: GO 6331
// ComExitBuilding ( tmp ) ;
6289: LD_VAR 0 3
6293: PPUSH
6294: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6298: LD_VAR 0 3
6302: PPUSH
6303: LD_INT 31
6305: PPUSH
6306: LD_INT 40
6308: PPUSH
6309: LD_INT 13
6311: PPUSH
6312: LD_INT 3
6314: PPUSH
6315: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6319: LD_VAR 0 3
6323: PPUSH
6324: LD_INT 1
6326: PPUSH
6327: CALL_OW 180
// end ;
6331: LD_VAR 0 1
6335: RET
// every 3 3$00 do
6336: GO 6338
6338: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6339: LD_INT 1
6341: PPUSH
6342: LD_INT 570
6344: PPUSH
6345: LD_INT 350
6347: PPUSH
6348: CALL_OW 550
// wait ( 2 2$40 ) ;
6352: LD_INT 5600
6354: PPUSH
6355: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6359: LD_INT 0
6361: PPUSH
6362: LD_INT 570
6364: PPUSH
6365: LD_INT 350
6367: PPUSH
6368: CALL_OW 550
// end ;
6372: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6373: LD_EXP 4
6377: NOT
6378: PUSH
6379: LD_INT 2
6381: PPUSH
6382: LD_EXP 27
6386: PPUSH
6387: CALL_OW 292
6391: AND
6392: IFFALSE 7317
6394: GO 6396
6396: DISABLE
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6401: LD_INT 10
6403: PPUSH
6404: LD_INT 0
6406: PPUSH
6407: CALL_OW 424
// aviradzeSpotted := true ;
6411: LD_ADDR_EXP 4
6415: PUSH
6416: LD_INT 1
6418: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6419: LD_ADDR_VAR 0 2
6423: PUSH
6424: LD_INT 22
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 21
6436: PUSH
6437: LD_INT 1
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PPUSH
6448: CALL_OW 69
6452: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6453: LD_EXP 23
6457: PPUSH
6458: LD_EXP 27
6462: PPUSH
6463: CALL_OW 250
6467: PPUSH
6468: LD_EXP 27
6472: PPUSH
6473: CALL_OW 251
6477: PPUSH
6478: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6489: LD_EXP 23
6493: PPUSH
6494: LD_EXP 27
6498: PPUSH
6499: CALL_OW 296
6503: PUSH
6504: LD_INT 16
6506: LESS
6507: IFFALSE 6482
// InGameOn ;
6509: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6513: LD_INT 5
6515: PPUSH
6516: LD_INT 2
6518: PPUSH
6519: CALL_OW 343
// if pepAmount > 2 then
6523: LD_VAR 0 2
6527: PUSH
6528: LD_INT 2
6530: GREATER
6531: IFFALSE 6547
// Say ( Heike , DH-1-spot ) else
6533: LD_EXP 23
6537: PPUSH
6538: LD_STRING DH-1-spot
6540: PPUSH
6541: CALL_OW 88
6545: GO 6559
// Say ( Heike , DH-1-spot-d ) ;
6547: LD_EXP 23
6551: PPUSH
6552: LD_STRING DH-1-spot-d
6554: PPUSH
6555: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6559: LD_EXP 23
6563: PPUSH
6564: LD_EXP 27
6568: PPUSH
6569: CALL_OW 250
6573: PPUSH
6574: LD_EXP 27
6578: PPUSH
6579: CALL_OW 251
6583: PPUSH
6584: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6588: LD_ADDR_VAR 0 1
6592: PUSH
6593: LD_EXP 26
6597: PUSH
6598: LD_EXP 25
6602: PUSH
6603: LD_EXP 24
6607: PUSH
6608: EMPTY
6609: LIST
6610: LIST
6611: LIST
6612: PUSH
6613: FOR_IN
6614: IFFALSE 6653
// if GetDistUnits ( i , Aviradze ) > 7 then
6616: LD_VAR 0 1
6620: PPUSH
6621: LD_EXP 27
6625: PPUSH
6626: CALL_OW 296
6630: PUSH
6631: LD_INT 7
6633: GREATER
6634: IFFALSE 6651
// ComMoveXY ( i , 102 , 40 ) ;
6636: LD_VAR 0 1
6640: PPUSH
6641: LD_INT 102
6643: PPUSH
6644: LD_INT 40
6646: PPUSH
6647: CALL_OW 111
6651: GO 6613
6653: POP
6654: POP
// repeat wait ( 0 0$1 ) ;
6655: LD_INT 35
6657: PPUSH
6658: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6662: LD_EXP 23
6666: PPUSH
6667: LD_EXP 27
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 6
6679: LESS
6680: IFFALSE 6655
// ComTurnUnit ( Heike , Aviradze ) ;
6682: LD_EXP 23
6686: PPUSH
6687: LD_EXP 27
6691: PPUSH
6692: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6696: LD_EXP 27
6700: PUSH
6701: LD_EXP 29
6705: PUSH
6706: LD_EXP 28
6710: PUSH
6711: EMPTY
6712: LIST
6713: LIST
6714: LIST
6715: PPUSH
6716: LD_EXP 23
6720: PPUSH
6721: CALL_OW 119
// if pepAmount > 1 then
6725: LD_VAR 0 2
6729: PUSH
6730: LD_INT 1
6732: GREATER
6733: IFFALSE 6785
// begin wait ( 0 0$2 ) ;
6735: LD_INT 70
6737: PPUSH
6738: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6742: LD_EXP 26
6746: PUSH
6747: LD_EXP 25
6751: PUSH
6752: LD_EXP 24
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: PPUSH
6762: LD_EXP 27
6766: PPUSH
6767: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6771: LD_EXP 23
6775: PPUSH
6776: LD_STRING DH-2-spot
6778: PPUSH
6779: CALL_OW 88
// end else
6783: GO 6797
// Say ( Heike , DH-2-spot-d ) ;
6785: LD_EXP 23
6789: PPUSH
6790: LD_STRING DH-2-spot-d
6792: PPUSH
6793: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6797: LD_EXP 27
6801: PPUSH
6802: LD_STRING DA-2-spot
6804: PPUSH
6805: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6809: LD_EXP 23
6813: PPUSH
6814: LD_STRING DH-3-spot
6816: PPUSH
6817: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6821: LD_EXP 28
6825: PPUSH
6826: LD_EXP 23
6830: PPUSH
6831: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6835: LD_EXP 23
6839: PPUSH
6840: LD_EXP 28
6844: PPUSH
6845: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6849: LD_INT 10
6851: PPUSH
6852: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6856: LD_EXP 28
6860: PPUSH
6861: LD_STRING DK-3-spot
6863: PPUSH
6864: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6868: LD_EXP 28
6872: PPUSH
6873: LD_EXP 23
6877: PPUSH
6878: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6882: LD_EXP 23
6886: PPUSH
6887: LD_STRING DH-4-spot
6889: PPUSH
6890: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6894: LD_INT 10
6896: PPUSH
6897: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_EXP 27
6910: PPUSH
6911: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6915: LD_EXP 27
6919: PPUSH
6920: LD_STRING DA-4-spot
6922: PPUSH
6923: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6927: LD_EXP 28
6931: PPUSH
6932: LD_EXP 27
6936: PPUSH
6937: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6941: LD_EXP 28
6945: PPUSH
6946: LD_STRING DK-4-spot
6948: PPUSH
6949: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6953: LD_EXP 27
6957: PPUSH
6958: LD_EXP 28
6962: PPUSH
6963: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6967: LD_EXP 27
6971: PPUSH
6972: LD_STRING DA-5-spot
6974: PPUSH
6975: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6979: LD_EXP 28
6983: PPUSH
6984: LD_STRING DK-5-spot
6986: PPUSH
6987: CALL_OW 88
// if pepAmount = 1 then
6991: LD_VAR 0 2
6995: PUSH
6996: LD_INT 1
6998: EQUAL
6999: IFFALSE 7013
// Say ( Heike , DH-5-spot-f ) ;
7001: LD_EXP 23
7005: PPUSH
7006: LD_STRING DH-5-spot-f
7008: PPUSH
7009: CALL_OW 88
// if pepAmount < 3 then
7013: LD_VAR 0 2
7017: PUSH
7018: LD_INT 3
7020: LESS
7021: IFFALSE 7037
// Say ( Aviradze , DA-6-spot-f ) else
7023: LD_EXP 27
7027: PPUSH
7028: LD_STRING DA-6-spot-f
7030: PPUSH
7031: CALL_OW 88
7035: GO 7073
// if pepAmount < 4 then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_INT 4
7044: LESS
7045: IFFALSE 7061
// Say ( Aviradze , DA-6-spot-c ) else
7047: LD_EXP 27
7051: PPUSH
7052: LD_STRING DA-6-spot-c
7054: PPUSH
7055: CALL_OW 88
7059: GO 7073
// Say ( Aviradze , DA-6-spot ) ;
7061: LD_EXP 27
7065: PPUSH
7066: LD_STRING DA-6-spot
7068: PPUSH
7069: CALL_OW 88
// if Kamil then
7073: LD_EXP 26
7077: IFFALSE 7091
// Say ( Kamil , DKam-6-spot ) ;
7079: LD_EXP 26
7083: PPUSH
7084: LD_STRING DKam-6-spot
7086: PPUSH
7087: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7091: LD_EXP 28
7095: PPUSH
7096: LD_STRING DK-6-spot
7098: PPUSH
7099: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7103: LD_EXP 27
7107: PPUSH
7108: LD_EXP 23
7112: PPUSH
7113: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7117: LD_EXP 27
7121: PPUSH
7122: LD_STRING DA-7-spot
7124: PPUSH
7125: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7129: LD_EXP 23
7133: PPUSH
7134: LD_STRING DH-7-spot
7136: PPUSH
7137: CALL_OW 88
// if sciCounterKill >= 3 then
7141: LD_EXP 9
7145: PUSH
7146: LD_INT 3
7148: GREATEREQUAL
7149: IFFALSE 7175
// begin Say ( Heike , DH-7-spot-a ) ;
7151: LD_EXP 23
7155: PPUSH
7156: LD_STRING DH-7-spot-a
7158: PPUSH
7159: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7163: LD_EXP 27
7167: PPUSH
7168: LD_STRING DA-8-spot-a
7170: PPUSH
7171: CALL_OW 88
// end ; InGameOff ;
7175: CALL_OW 9
// if sciCounterKill < 3 then
7179: LD_EXP 9
7183: PUSH
7184: LD_INT 3
7186: LESS
7187: IFFALSE 7255
// begin SetSide ( Kaia , 2 ) ;
7189: LD_EXP 28
7193: PPUSH
7194: LD_INT 2
7196: PPUSH
7197: CALL_OW 235
// ComFree ( Kaia ) ;
7201: LD_EXP 28
7205: PPUSH
7206: CALL_OW 139
// if Kamil then
7210: LD_EXP 26
7214: IFFALSE 7237
// begin ComHold ( Kamil ) ;
7216: LD_EXP 26
7220: PPUSH
7221: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7225: LD_EXP 26
7229: PPUSH
7230: LD_INT 5
7232: PPUSH
7233: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7237: LD_STRING OSci
7239: PPUSH
7240: CALL_OW 337
// ComFree ( Aviradze ) ;
7244: LD_EXP 27
7248: PPUSH
7249: CALL_OW 139
// end else
7253: GO 7317
// begin for i in FilterAllUnits ( [ f_side , 5 ] ) do
7255: LD_ADDR_VAR 0 1
7259: PUSH
7260: LD_INT 22
7262: PUSH
7263: LD_INT 5
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PUSH
7275: FOR_IN
7276: IFFALSE 7292
// SetSide ( i , 2 ) ;
7278: LD_VAR 0 1
7282: PPUSH
7283: LD_INT 2
7285: PPUSH
7286: CALL_OW 235
7290: GO 7275
7292: POP
7293: POP
// aviradzeQuestDone := true ;
7294: LD_ADDR_EXP 8
7298: PUSH
7299: LD_INT 1
7301: ST_TO_ADDR
// attackDeltaAllowed := true ;
7302: LD_ADDR_EXP 14
7306: PUSH
7307: LD_INT 1
7309: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7310: LD_STRING ODelta2
7312: PPUSH
7313: CALL_OW 337
// end ; end ;
7317: PPOPN 2
7319: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7320: LD_EXP 27
7324: PPUSH
7325: LD_INT 106
7327: PPUSH
7328: LD_INT 38
7330: PPUSH
7331: CALL_OW 297
7335: PUSH
7336: LD_INT 8
7338: GREATER
7339: PUSH
7340: LD_EXP 27
7344: PPUSH
7345: CALL_OW 255
7349: PUSH
7350: LD_INT 5
7352: EQUAL
7353: AND
7354: IFFALSE 7375
7356: GO 7358
7358: DISABLE
// begin enable ;
7359: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7360: LD_EXP 27
7364: PPUSH
7365: LD_INT 106
7367: PPUSH
7368: LD_INT 38
7370: PPUSH
7371: CALL_OW 111
// end ;
7375: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7376: LD_EXP 10
7380: PUSH
7381: LD_EXP 8
7385: NOT
7386: AND
7387: IFFALSE 7404
7389: GO 7391
7391: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7392: LD_EXP 20
7396: PPUSH
7397: LD_STRING DDelta-Alarm-1
7399: PPUSH
7400: CALL 76057 0 2
7404: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7405: LD_EXP 7
7409: NOT
7410: PUSH
7411: LD_EXP 22
7415: PPUSH
7416: LD_EXP 23
7420: PPUSH
7421: CALL_OW 74
7425: PPUSH
7426: LD_EXP 23
7430: PPUSH
7431: CALL_OW 296
7435: PUSH
7436: LD_INT 8
7438: LESS
7439: AND
7440: PUSH
7441: LD_INT 2
7443: PPUSH
7444: LD_EXP 22
7448: PPUSH
7449: LD_EXP 23
7453: PPUSH
7454: CALL_OW 74
7458: PPUSH
7459: CALL_OW 292
7463: AND
7464: PUSH
7465: LD_INT 22
7467: PUSH
7468: LD_INT 2
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 21
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PPUSH
7489: CALL_OW 69
7493: PUSH
7494: LD_INT 1
7496: GREATER
7497: AND
7498: PUSH
7499: LD_EXP 4
7503: NOT
7504: AND
7505: IFFALSE 7549
7507: GO 7509
7509: DISABLE
// begin sciSpotted := true ;
7510: LD_ADDR_EXP 7
7514: PUSH
7515: LD_INT 1
7517: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7518: LD_EXP 22
7522: PPUSH
7523: LD_EXP 23
7527: PPUSH
7528: CALL_OW 74
7532: PPUSH
7533: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7537: LD_EXP 23
7541: PPUSH
7542: LD_STRING DH-1-sci
7544: PPUSH
7545: CALL_OW 88
// end ;
7549: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7550: LD_EXP 4
7554: PUSH
7555: LD_EXP 7
7559: NOT
7560: AND
7561: PUSH
7562: LD_INT 2
7564: PPUSH
7565: LD_EXP 22
7569: PPUSH
7570: LD_EXP 23
7574: PPUSH
7575: CALL_OW 74
7579: PPUSH
7580: CALL_OW 292
7584: AND
7585: PUSH
7586: LD_INT 22
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: LD_INT 21
7598: PUSH
7599: LD_INT 1
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PUSH
7615: LD_INT 1
7617: GREATER
7618: AND
7619: PUSH
7620: LD_EXP 4
7624: AND
7625: PUSH
7626: LD_EXP 8
7630: NOT
7631: AND
7632: IFFALSE 7773
7634: GO 7636
7636: DISABLE
7637: LD_INT 0
7639: PPUSH
// begin sciSpotted := true ;
7640: LD_ADDR_EXP 7
7644: PUSH
7645: LD_INT 1
7647: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7648: LD_ADDR_VAR 0 1
7652: PUSH
7653: LD_EXP 22
7657: PPUSH
7658: LD_EXP 23
7662: PPUSH
7663: CALL_OW 74
7667: ST_TO_ADDR
// DialogueOn ;
7668: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 250
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 251
7691: PPUSH
7692: LD_INT 2
7694: PPUSH
7695: LD_INT 3
7697: NEG
7698: PPUSH
7699: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7703: LD_VAR 0 1
7707: PPUSH
7708: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7712: LD_EXP 23
7716: PPUSH
7717: LD_STRING DH-1-sci-a
7719: PPUSH
7720: CALL_OW 88
// if Mike then
7724: LD_EXP 25
7728: IFFALSE 7742
// Say ( Mike , DM-1-sci-a ) ;
7730: LD_EXP 25
7734: PPUSH
7735: LD_STRING DM-1-sci-a
7737: PPUSH
7738: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 250
7751: PPUSH
7752: LD_VAR 0 1
7756: PPUSH
7757: CALL_OW 251
7761: PPUSH
7762: LD_INT 2
7764: PPUSH
7765: CALL_OW 331
// DialogueOff ;
7769: CALL_OW 7
// end ;
7773: PPOPN 1
7775: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7776: LD_EXP 10
7780: PUSH
7781: LD_EXP 19
7785: PPUSH
7786: CALL_OW 256
7790: PUSH
7791: LD_INT 1000
7793: LESS
7794: PUSH
7795: LD_INT 3
7797: PPUSH
7798: CALL_OW 256
7802: PUSH
7803: LD_INT 999
7805: LESS
7806: OR
7807: AND
7808: IFFALSE 8064
7810: GO 7812
7812: DISABLE
7813: LD_INT 0
7815: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7816: LD_ADDR_VAR 0 1
7820: PUSH
7821: LD_INT 22
7823: PUSH
7824: LD_INT 1
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: PUSH
7831: LD_INT 21
7833: PUSH
7834: LD_INT 2
7836: PUSH
7837: EMPTY
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 58
7843: PUSH
7844: EMPTY
7845: LIST
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 69
7856: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7857: LD_VAR 0 1
7861: PUSH
7862: LD_EXP 19
7866: PPUSH
7867: CALL_OW 302
7871: AND
7872: IFFALSE 7914
// begin if IsInUnit ( Gladstone ) then
7874: LD_EXP 19
7878: PPUSH
7879: CALL_OW 310
7883: IFFALSE 7894
// ComExitBuilding ( Gladstone ) ;
7885: LD_EXP 19
7889: PPUSH
7890: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7894: LD_EXP 19
7898: PPUSH
7899: LD_VAR 0 1
7903: PUSH
7904: LD_INT 1
7906: ARRAY
7907: PPUSH
7908: CALL_OW 180
// end else
7912: GO 7934
// if IsInUnit ( Gladstone ) then
7914: LD_EXP 19
7918: PPUSH
7919: CALL_OW 310
7923: IFFALSE 7934
// ComExitBuilding ( Gladstone ) ;
7925: LD_EXP 19
7929: PPUSH
7930: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7934: LD_EXP 19
7938: PPUSH
7939: LD_INT 27
7941: PPUSH
7942: LD_INT 51
7944: PPUSH
7945: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7949: LD_EXP 19
7953: PPUSH
7954: LD_STRING D8-Glad-2
7956: PPUSH
7957: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7961: LD_INT 35
7963: PPUSH
7964: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7968: LD_EXP 19
7972: PPUSH
7973: LD_INT 27
7975: PPUSH
7976: LD_INT 51
7978: PPUSH
7979: CALL_OW 307
7983: PUSH
7984: LD_EXP 19
7988: PPUSH
7989: CALL_OW 310
7993: PPUSH
7994: LD_INT 27
7996: PPUSH
7997: LD_INT 51
7999: PPUSH
8000: CALL_OW 307
8004: OR
8005: PUSH
8006: LD_EXP 19
8010: PPUSH
8011: CALL_OW 301
8015: OR
8016: IFFALSE 7961
// if IsDead ( Gladstone ) then
8018: LD_EXP 19
8022: PPUSH
8023: CALL_OW 301
8027: IFFALSE 8031
// exit ;
8029: GO 8064
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
8031: LD_INT 27
8033: PPUSH
8034: LD_INT 51
8036: PPUSH
8037: CALL_OW 428
8041: PPUSH
8042: CALL_OW 64
// gladstoneEscaped := true ;
8046: LD_ADDR_EXP 12
8050: PUSH
8051: LD_INT 1
8053: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
8054: LD_INT 1
8056: PPUSH
8057: LD_STRING 02_GladstoneEscaped
8059: PPUSH
8060: CALL_OW 39
// end ;
8064: PPOPN 1
8066: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone and GetSide ( Aviradze ) = 5 do
8067: LD_EXP 4
8071: PUSH
8072: LD_EXP 9
8076: PUSH
8077: LD_INT 3
8079: GREATEREQUAL
8080: PUSH
8081: LD_EXP 22
8085: NOT
8086: OR
8087: AND
8088: PUSH
8089: LD_EXP 8
8093: NOT
8094: AND
8095: PUSH
8096: LD_EXP 27
8100: PPUSH
8101: CALL_OW 255
8105: PUSH
8106: LD_INT 5
8108: EQUAL
8109: AND
8110: IFFALSE 8161
8112: GO 8114
8114: DISABLE
// begin DialogueOn ;
8115: CALL_OW 6
// Say ( Heike , DH-1-quest-done ) ;
8119: LD_EXP 23
8123: PPUSH
8124: LD_STRING DH-1-quest-done
8126: PPUSH
8127: CALL_OW 88
// if Givi then
8131: LD_EXP 24
8135: IFFALSE 8149
// Say ( Givi , DG-1-quest-done ) ;
8137: LD_EXP 24
8141: PPUSH
8142: LD_STRING DG-1-quest-done
8144: PPUSH
8145: CALL_OW 88
// DialogueOff ;
8149: CALL_OW 7
// aviradzeQuestDone := true ;
8153: LD_ADDR_EXP 8
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// end ;
8161: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8162: LD_INT 11
8164: PPUSH
8165: LD_INT 22
8167: PUSH
8168: LD_INT 2
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PPUSH
8175: CALL_OW 70
8179: PUSH
8180: LD_INT 1
8182: GREATER
8183: PUSH
8184: LD_EXP 8
8188: NOT
8189: AND
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: CALL_OW 255
8198: PUSH
8199: LD_INT 2
8201: NONEQUAL
8202: AND
8203: PUSH
8204: LD_EXP 25
8208: PPUSH
8209: CALL_OW 302
8213: AND
8214: PUSH
8215: LD_EXP 23
8219: PPUSH
8220: CALL_OW 302
8224: AND
8225: IFFALSE 8370
8227: GO 8229
8229: DISABLE
// begin DialogueOn ;
8230: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8234: LD_INT 47
8236: PPUSH
8237: LD_INT 19
8239: PPUSH
8240: LD_INT 2
8242: PPUSH
8243: LD_INT 6
8245: NEG
8246: PPUSH
8247: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8251: LD_INT 47
8253: PPUSH
8254: LD_INT 19
8256: PPUSH
8257: LD_INT 2
8259: PPUSH
8260: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8264: LD_INT 34
8266: PPUSH
8267: LD_INT 32
8269: PPUSH
8270: LD_INT 2
8272: PPUSH
8273: LD_INT 6
8275: NEG
8276: PPUSH
8277: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8281: LD_INT 34
8283: PPUSH
8284: LD_INT 32
8286: PPUSH
8287: LD_INT 2
8289: PPUSH
8290: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8294: LD_EXP 25
8298: PPUSH
8299: LD_STRING DM-Prem-1
8301: PPUSH
8302: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8306: LD_EXP 23
8310: PPUSH
8311: LD_STRING DH-Prem-2
8313: PPUSH
8314: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8318: LD_EXP 23
8322: PPUSH
8323: LD_STRING DH-Prem-3
8325: PPUSH
8326: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8330: LD_EXP 25
8334: PPUSH
8335: LD_STRING DM-Prem-4
8337: PPUSH
8338: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8342: LD_EXP 25
8346: PPUSH
8347: LD_STRING DM-Prem-5
8349: PPUSH
8350: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8354: LD_EXP 24
8358: PPUSH
8359: LD_STRING DG-Prem-6
8361: PPUSH
8362: CALL_OW 88
// DialogueOff ;
8366: CALL_OW 7
// end ;
8370: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8371: LD_INT 5
8373: PPUSH
8374: LD_EXP 23
8378: PPUSH
8379: CALL_OW 292
8383: PUSH
8384: LD_EXP 23
8388: PPUSH
8389: LD_EXP 27
8393: PPUSH
8394: CALL_OW 296
8398: PUSH
8399: LD_INT 6
8401: LESS
8402: AND
8403: PUSH
8404: LD_EXP 8
8408: AND
8409: PUSH
8410: LD_EXP 14
8414: NOT
8415: AND
8416: IFFALSE 8554
8418: GO 8420
8420: DISABLE
8421: LD_INT 0
8423: PPUSH
// begin attackDeltaAllowed := true ;
8424: LD_ADDR_EXP 14
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// InGameOn ;
8432: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8436: LD_EXP 23
8440: PPUSH
8441: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8445: LD_INT 10
8447: PPUSH
8448: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8452: LD_EXP 27
8456: PPUSH
8457: LD_EXP 23
8461: PPUSH
8462: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8466: LD_EXP 23
8470: PPUSH
8471: LD_EXP 27
8475: PPUSH
8476: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8480: LD_EXP 23
8484: PPUSH
8485: LD_STRING DH-1-return
8487: PPUSH
8488: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8492: LD_EXP 27
8496: PPUSH
8497: LD_STRING DA-1-return
8499: PPUSH
8500: CALL_OW 88
// InGameOff ;
8504: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8508: LD_STRING ODelta
8510: PPUSH
8511: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8515: LD_ADDR_VAR 0 1
8519: PUSH
8520: LD_INT 22
8522: PUSH
8523: LD_INT 5
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PPUSH
8530: CALL_OW 69
8534: PUSH
8535: FOR_IN
8536: IFFALSE 8552
// SetSide ( i , 2 ) ;
8538: LD_VAR 0 1
8542: PPUSH
8543: LD_INT 2
8545: PPUSH
8546: CALL_OW 235
8550: GO 8535
8552: POP
8553: POP
// end ;
8554: PPOPN 1
8556: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8557: LD_EXP 10
8561: PUSH
8562: LD_EXP 14
8566: NOT
8567: AND
8568: IFFALSE 8581
8570: GO 8572
8572: DISABLE
// spottedBeforeRadio := true ;
8573: LD_ADDR_EXP 6
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
8581: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8582: LD_EXP 14
8586: PUSH
8587: LD_EXP 30
8591: PPUSH
8592: CALL_OW 302
8596: AND
8597: PUSH
8598: LD_INT 1
8600: PPUSH
8601: CALL_OW 255
8605: PUSH
8606: LD_INT 1
8608: EQUAL
8609: AND
8610: PUSH
8611: LD_EXP 20
8615: PPUSH
8616: CALL_OW 302
8620: AND
8621: PUSH
8622: LD_EXP 10
8626: NOT
8627: AND
8628: IFFALSE 9856
8630: GO 8632
8632: DISABLE
8633: LD_INT 0
8635: PPUSH
8636: PPUSH
8637: PPUSH
// begin trap := 0 ;
8638: LD_ADDR_EXP 17
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8646: LD_INT 420
8648: PPUSH
8649: CALL_OW 67
// DialogueOn ;
8653: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8657: LD_EXP 30
8661: PPUSH
8662: LD_STRING DMar-1-radio
8664: PPUSH
8665: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8669: LD_EXP 23
8673: PPUSH
8674: LD_STRING DH-1-radio
8676: PPUSH
8677: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8681: LD_EXP 30
8685: PPUSH
8686: LD_STRING DMar-2-radio
8688: PPUSH
8689: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8693: LD_EXP 23
8697: PPUSH
8698: LD_STRING DH-2-radio
8700: PPUSH
8701: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8705: LD_EXP 26
8709: PPUSH
8710: CALL_OW 302
8714: PUSH
8715: LD_EXP 29
8719: PPUSH
8720: CALL_OW 302
8724: OR
8725: IFFALSE 9856
// begin case Query ( Q1Trap ) of 1 :
8727: LD_STRING Q1Trap
8729: PPUSH
8730: CALL_OW 97
8734: PUSH
8735: LD_INT 1
8737: DOUBLE
8738: EQUAL
8739: IFTRUE 8743
8741: GO 8949
8743: POP
// begin if IsOk ( Kamil ) then
8744: LD_EXP 26
8748: PPUSH
8749: CALL_OW 302
8753: IFFALSE 8832
// begin Say ( Kamil , DKam-2-radio ) ;
8755: LD_EXP 26
8759: PPUSH
8760: LD_STRING DKam-2-radio
8762: PPUSH
8763: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8767: LD_EXP 26
8771: PPUSH
8772: LD_STRING DKam-3-radio
8774: PPUSH
8775: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8779: LD_EXP 20
8783: PPUSH
8784: LD_STRING DDelta-3-radio
8786: PPUSH
8787: CALL 76057 0 2
// dwait ( 0 0$01 ) ;
8791: LD_INT 35
8793: PPUSH
8794: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8798: LD_EXP 23
8802: PPUSH
8803: LD_STRING DH-3-radio
8805: PPUSH
8806: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8810: LD_EXP 26
8814: PPUSH
8815: LD_STRING DKam-4-radio
8817: PPUSH
8818: CALL_OW 88
// trap := 1 ;
8822: LD_ADDR_EXP 17
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// end else
8830: GO 8943
// begin Say ( Sophia , DS-1-radio ) ;
8832: LD_EXP 29
8836: PPUSH
8837: LD_STRING DS-1-radio
8839: PPUSH
8840: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8844: LD_EXP 29
8848: PPUSH
8849: LD_STRING DS-2-radio
8851: PPUSH
8852: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8856: LD_EXP 20
8860: PPUSH
8861: LD_STRING DDelta-2-radio-s
8863: PPUSH
8864: CALL 76057 0 2
// Say ( Sophia , DS-3-radio ) ;
8868: LD_EXP 29
8872: PPUSH
8873: LD_STRING DS-3-radio
8875: PPUSH
8876: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8880: LD_EXP 20
8884: PPUSH
8885: LD_STRING DDelta-3-radio-s
8887: PPUSH
8888: CALL 76057 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8892: LD_EXP 29
8896: PPUSH
8897: LD_STRING DS-4-radio-s
8899: PPUSH
8900: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8904: LD_EXP 20
8908: PPUSH
8909: LD_STRING DDelta-4-radio-s
8911: PPUSH
8912: CALL 76057 0 2
// dwait ( 0 0$01 ) ;
8916: LD_INT 35
8918: PPUSH
8919: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8923: LD_EXP 23
8927: PPUSH
8928: LD_STRING DH-1-trap
8930: PPUSH
8931: CALL_OW 88
// trap := 0 ;
8935: LD_ADDR_EXP 17
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// end ; DialogueOff ;
8943: CALL_OW 7
// end ; 2 :
8947: GO 8967
8949: LD_INT 2
8951: DOUBLE
8952: EQUAL
8953: IFTRUE 8957
8955: GO 8966
8957: POP
// begin DialogueOff ;
8958: CALL_OW 7
// exit ;
8962: GO 9856
// end ; end ;
8964: GO 8967
8966: POP
// if trap = 1 then
8967: LD_EXP 17
8971: PUSH
8972: LD_INT 1
8974: EQUAL
8975: IFFALSE 9427
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8977: LD_INT 64
8979: PPUSH
8980: LD_INT 32
8982: PPUSH
8983: LD_INT 2
8985: PPUSH
8986: LD_INT 8
8988: PPUSH
8989: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8993: LD_INT 64
8995: PPUSH
8996: LD_INT 32
8998: PPUSH
8999: CALL_OW 84
// tmp := [ ] ;
9003: LD_ADDR_VAR 0 3
9007: PUSH
9008: EMPTY
9009: ST_TO_ADDR
// k := 3 ;
9010: LD_ADDR_VAR 0 2
9014: PUSH
9015: LD_INT 3
9017: ST_TO_ADDR
// if usForces < 3 then
9018: LD_EXP 21
9022: PUSH
9023: LD_INT 3
9025: LESS
9026: IFFALSE 9038
// k := usForces ;
9028: LD_ADDR_VAR 0 2
9032: PUSH
9033: LD_EXP 21
9037: ST_TO_ADDR
// for i := 1 to k do
9038: LD_ADDR_VAR 0 1
9042: PUSH
9043: DOUBLE
9044: LD_INT 1
9046: DEC
9047: ST_TO_ADDR
9048: LD_VAR 0 2
9052: PUSH
9053: FOR_TO
9054: IFFALSE 9109
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9056: LD_ADDR_VAR 0 3
9060: PUSH
9061: LD_VAR 0 3
9065: PPUSH
9066: LD_VAR 0 3
9070: PUSH
9071: LD_INT 1
9073: PLUS
9074: PPUSH
9075: LD_EXP 21
9079: PUSH
9080: LD_INT 1
9082: ARRAY
9083: PPUSH
9084: CALL_OW 1
9088: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9089: LD_ADDR_EXP 21
9093: PUSH
9094: LD_EXP 21
9098: PPUSH
9099: LD_INT 1
9101: PPUSH
9102: CALL_OW 3
9106: ST_TO_ADDR
// end ;
9107: GO 9053
9109: POP
9110: POP
// usPatrol := tmp ;
9111: LD_ADDR_EXP 16
9115: PUSH
9116: LD_VAR 0 3
9120: ST_TO_ADDR
// for i in tmp do
9121: LD_ADDR_VAR 0 1
9125: PUSH
9126: LD_VAR 0 3
9130: PUSH
9131: FOR_IN
9132: IFFALSE 9262
// begin if IsInUnit ( i ) then
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 310
9143: IFFALSE 9154
// ComExitBuilding ( i ) ;
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9154: LD_VAR 0 1
9158: PPUSH
9159: LD_INT 63
9161: PPUSH
9162: LD_INT 31
9164: PPUSH
9165: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9169: LD_VAR 0 1
9173: PPUSH
9174: LD_INT 70
9176: PPUSH
9177: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9181: LD_VAR 0 1
9185: PPUSH
9186: LD_INT 103
9188: PPUSH
9189: LD_INT 43
9191: PPUSH
9192: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_INT 105
9203: PPUSH
9204: CALL_OW 202
// if Difficulty > 1 then
9208: LD_OWVAR 67
9212: PUSH
9213: LD_INT 1
9215: GREATER
9216: IFFALSE 9233
// AddComAgressiveMove ( i , 114 , 69 ) ;
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 114
9225: PPUSH
9226: LD_INT 69
9228: PPUSH
9229: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9233: LD_VAR 0 1
9237: PPUSH
9238: LD_INT 105
9240: PPUSH
9241: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9245: LD_VAR 0 1
9249: PPUSH
9250: LD_INT 42
9252: PPUSH
9253: LD_INT 20
9255: PPUSH
9256: CALL_OW 174
// end ;
9260: GO 9131
9262: POP
9263: POP
// wait ( 0 0$8 ) ;
9264: LD_INT 280
9266: PPUSH
9267: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9271: LD_INT 64
9273: PPUSH
9274: LD_INT 32
9276: PPUSH
9277: LD_INT 2
9279: PPUSH
9280: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9284: LD_INT 35
9286: PPUSH
9287: CALL_OW 67
// for i in tmp do
9291: LD_ADDR_VAR 0 1
9295: PUSH
9296: LD_VAR 0 3
9300: PUSH
9301: FOR_IN
9302: IFFALSE 9333
// if IsDead ( i ) then
9304: LD_VAR 0 1
9308: PPUSH
9309: CALL_OW 301
9313: IFFALSE 9331
// tmp := tmp diff i ;
9315: LD_ADDR_VAR 0 3
9319: PUSH
9320: LD_VAR 0 3
9324: PUSH
9325: LD_VAR 0 1
9329: DIFF
9330: ST_TO_ADDR
9331: GO 9301
9333: POP
9334: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9335: LD_VAR 0 3
9339: NOT
9340: PUSH
9341: LD_VAR 0 3
9345: PPUSH
9346: LD_INT 95
9348: PUSH
9349: LD_INT 7
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: LD_INT 60
9361: PUSH
9362: EMPTY
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: PPUSH
9373: CALL_OW 72
9377: PUSH
9378: LD_VAR 0 3
9382: EQUAL
9383: OR
9384: IFFALSE 9284
// if tmp then
9386: LD_VAR 0 3
9390: IFFALSE 9417
// begin usPatrol := [ ] ;
9392: LD_ADDR_EXP 16
9396: PUSH
9397: EMPTY
9398: ST_TO_ADDR
// usForces := usForces union tmp ;
9399: LD_ADDR_EXP 21
9403: PUSH
9404: LD_EXP 21
9408: PUSH
9409: LD_VAR 0 3
9413: UNION
9414: ST_TO_ADDR
// end else
9415: GO 9425
// trickyMove := true ;
9417: LD_ADDR_EXP 15
9421: PUSH
9422: LD_INT 1
9424: ST_TO_ADDR
// end else
9425: GO 9856
// begin tmp := [ ] ;
9427: LD_ADDR_VAR 0 3
9431: PUSH
9432: EMPTY
9433: ST_TO_ADDR
// k := 4 ;
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: LD_INT 4
9441: ST_TO_ADDR
// if usForces < 4 then
9442: LD_EXP 21
9446: PUSH
9447: LD_INT 4
9449: LESS
9450: IFFALSE 9462
// k := usForces ;
9452: LD_ADDR_VAR 0 2
9456: PUSH
9457: LD_EXP 21
9461: ST_TO_ADDR
// for i := 1 to k do
9462: LD_ADDR_VAR 0 1
9466: PUSH
9467: DOUBLE
9468: LD_INT 1
9470: DEC
9471: ST_TO_ADDR
9472: LD_VAR 0 2
9476: PUSH
9477: FOR_TO
9478: IFFALSE 9533
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9480: LD_ADDR_VAR 0 3
9484: PUSH
9485: LD_VAR 0 3
9489: PPUSH
9490: LD_VAR 0 3
9494: PUSH
9495: LD_INT 1
9497: PLUS
9498: PPUSH
9499: LD_EXP 21
9503: PUSH
9504: LD_INT 1
9506: ARRAY
9507: PPUSH
9508: CALL_OW 1
9512: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9513: LD_ADDR_EXP 21
9517: PUSH
9518: LD_EXP 21
9522: PPUSH
9523: LD_INT 1
9525: PPUSH
9526: CALL_OW 3
9530: ST_TO_ADDR
// end ;
9531: GO 9477
9533: POP
9534: POP
// if Lynch then
9535: LD_EXP 20
9539: IFFALSE 9557
// tmp := tmp ^ Lynch ;
9541: LD_ADDR_VAR 0 3
9545: PUSH
9546: LD_VAR 0 3
9550: PUSH
9551: LD_EXP 20
9555: ADD
9556: ST_TO_ADDR
// usPatrol := tmp ;
9557: LD_ADDR_EXP 16
9561: PUSH
9562: LD_VAR 0 3
9566: ST_TO_ADDR
// for i in tmp do
9567: LD_ADDR_VAR 0 1
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: FOR_IN
9578: IFFALSE 9671
// begin if IsInUnit ( i ) then
9580: LD_VAR 0 1
9584: PPUSH
9585: CALL_OW 310
9589: IFFALSE 9600
// ComExitBuilding ( i ) ;
9591: LD_VAR 0 1
9595: PPUSH
9596: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9600: LD_VAR 0 1
9604: PPUSH
9605: LD_INT 69
9607: PPUSH
9608: LD_INT 15
9610: PPUSH
9611: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9615: LD_VAR 0 1
9619: PPUSH
9620: LD_INT 700
9622: PPUSH
9623: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9627: LD_VAR 0 1
9631: PPUSH
9632: LD_INT 55
9634: PPUSH
9635: LD_INT 43
9637: PPUSH
9638: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9642: LD_VAR 0 1
9646: PPUSH
9647: LD_INT 700
9649: PPUSH
9650: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9654: LD_VAR 0 1
9658: PPUSH
9659: LD_INT 42
9661: PPUSH
9662: LD_INT 20
9664: PPUSH
9665: CALL_OW 174
// end ;
9669: GO 9577
9671: POP
9672: POP
// repeat wait ( 0 0$1 ) ;
9673: LD_INT 35
9675: PPUSH
9676: CALL_OW 67
// for i in tmp do
9680: LD_ADDR_VAR 0 1
9684: PUSH
9685: LD_VAR 0 3
9689: PUSH
9690: FOR_IN
9691: IFFALSE 9722
// if IsDead ( i ) then
9693: LD_VAR 0 1
9697: PPUSH
9698: CALL_OW 301
9702: IFFALSE 9720
// tmp := tmp diff i ;
9704: LD_ADDR_VAR 0 3
9708: PUSH
9709: LD_VAR 0 3
9713: PUSH
9714: LD_VAR 0 1
9718: DIFF
9719: ST_TO_ADDR
9720: GO 9690
9722: POP
9723: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9724: LD_VAR 0 3
9728: NOT
9729: PUSH
9730: LD_VAR 0 3
9734: PPUSH
9735: LD_INT 95
9737: PUSH
9738: LD_INT 7
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 3
9747: PUSH
9748: LD_INT 60
9750: PUSH
9751: EMPTY
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: PPUSH
9762: CALL_OW 72
9766: PUSH
9767: LD_VAR 0 3
9771: EQUAL
9772: OR
9773: IFFALSE 9673
// if not tmp then
9775: LD_VAR 0 3
9779: NOT
9780: IFFALSE 9792
// trickyMove := true else
9782: LD_ADDR_EXP 15
9786: PUSH
9787: LD_INT 1
9789: ST_TO_ADDR
9790: GO 9799
// usPatrol := [ ] ;
9792: LD_ADDR_EXP 16
9796: PUSH
9797: EMPTY
9798: ST_TO_ADDR
// if tmp diff Lynch then
9799: LD_VAR 0 3
9803: PUSH
9804: LD_EXP 20
9808: DIFF
9809: IFFALSE 9833
// usForces := usForces union ( tmp diff Lynch ) ;
9811: LD_ADDR_EXP 21
9815: PUSH
9816: LD_EXP 21
9820: PUSH
9821: LD_VAR 0 3
9825: PUSH
9826: LD_EXP 20
9830: DIFF
9831: UNION
9832: ST_TO_ADDR
// if IsOk ( Lynch ) then
9833: LD_EXP 20
9837: PPUSH
9838: CALL_OW 302
9842: IFFALSE 9856
// ComEnterUnit ( Lynch , Delta ) ;
9844: LD_EXP 20
9848: PPUSH
9849: LD_INT 1
9851: PPUSH
9852: CALL_OW 120
// end ; end ; end ;
9856: PPOPN 3
9858: END
// every 0 0$1 trigger trickyMove do
9859: LD_EXP 15
9863: IFFALSE 9875
9865: GO 9867
9867: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9868: LD_STRING ACH_TRAP
9870: PPUSH
9871: CALL_OW 543
9875: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9876: LD_INT 22
9878: PUSH
9879: LD_INT 2
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 23
9888: PUSH
9889: LD_INT 1
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: LD_INT 21
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: PPUSH
9911: CALL_OW 69
9915: IFFALSE 9927
9917: GO 9919
9919: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9920: LD_STRING ACH_SCRAP
9922: PPUSH
9923: CALL_OW 543
9927: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9928: LD_EXP 16
9932: PPUSH
9933: LD_INT 101
9935: PUSH
9936: LD_INT 2
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: CALL_OW 72
9947: PUSH
9948: LD_INT 1
9950: PPUSH
9951: LD_EXP 23
9955: PPUSH
9956: CALL_OW 292
9960: AND
9961: IFFALSE 10094
9963: GO 9965
9965: DISABLE
// begin if not trap then
9966: LD_EXP 17
9970: NOT
9971: IFFALSE 9999
// begin Say ( Heike , DH-2-trap ) ;
9973: LD_EXP 23
9977: PPUSH
9978: LD_STRING DH-2-trap
9980: PPUSH
9981: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9985: LD_EXP 25
9989: PPUSH
9990: LD_STRING DM-2-trap
9992: PPUSH
9993: CALL_OW 88
// end else
9997: GO 10011
// begin Say ( Heike , DH-1-trap-a ) ;
9999: LD_EXP 23
10003: PPUSH
10004: LD_STRING DH-1-trap-a
10006: PPUSH
10007: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10011: LD_INT 35
10013: PPUSH
10014: CALL_OW 67
// until trickyMove ;
10018: LD_EXP 15
10022: IFFALSE 10011
// Say ( Heike , DH-3-trap ) ;
10024: LD_EXP 23
10028: PPUSH
10029: LD_STRING DH-3-trap
10031: PPUSH
10032: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
10036: LD_EXP 24
10040: PPUSH
10041: CALL_OW 302
10045: PUSH
10046: LD_EXP 28
10050: PPUSH
10051: CALL_OW 302
10055: AND
10056: IFFALSE 10094
// begin Say ( Givi , DG-3-trap ) ;
10058: LD_EXP 24
10062: PPUSH
10063: LD_STRING DG-3-trap
10065: PPUSH
10066: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
10070: LD_EXP 28
10074: PPUSH
10075: LD_STRING DK-3-trap
10077: PPUSH
10078: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
10082: LD_EXP 24
10086: PPUSH
10087: LD_STRING DG-4-trap
10089: PPUSH
10090: CALL_OW 88
// end ; end ;
10094: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10095: LD_INT 1
10097: PPUSH
10098: CALL_OW 255
10102: PUSH
10103: LD_INT 2
10105: EQUAL
10106: PUSH
10107: LD_EXP 14
10111: AND
10112: IFFALSE 10271
10114: GO 10116
10116: DISABLE
10117: LD_INT 0
10119: PPUSH
10120: PPUSH
// begin if not IsOk ( Kaia ) then
10121: LD_EXP 28
10125: PPUSH
10126: CALL_OW 302
10130: NOT
10131: IFFALSE 10135
// exit ;
10133: GO 10271
// if tick < 5 5$00 then
10135: LD_OWVAR 1
10139: PUSH
10140: LD_INT 10500
10142: LESS
10143: IFFALSE 10152
// SetAchievement ( ACH_DELTA ) ;
10145: LD_STRING ACH_DELTA
10147: PPUSH
10148: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10152: LD_EXP 28
10156: PPUSH
10157: LD_STRING DK-1-capture
10159: PPUSH
10160: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10164: LD_EXP 23
10168: PPUSH
10169: LD_STRING DH-1-capture
10171: PPUSH
10172: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10176: LD_ADDR_VAR 0 2
10180: PUSH
10181: LD_INT 22
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: LD_INT 25
10193: PUSH
10194: LD_INT 1
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 69
10209: ST_TO_ADDR
// if not tmp then
10210: LD_VAR 0 2
10214: NOT
10215: IFFALSE 10219
// exit ;
10217: GO 10271
// for i in tmp do
10219: LD_ADDR_VAR 0 1
10223: PUSH
10224: LD_VAR 0 2
10228: PUSH
10229: FOR_IN
10230: IFFALSE 10269
// begin if IsInUnit ( i ) then
10232: LD_VAR 0 1
10236: PPUSH
10237: CALL_OW 310
10241: IFFALSE 10252
// ComExitBuilding ( i ) ;
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10252: LD_VAR 0 1
10256: PPUSH
10257: LD_INT 38
10259: PPUSH
10260: LD_INT 23
10262: PPUSH
10263: CALL_OW 174
// end ;
10267: GO 10229
10269: POP
10270: POP
// end ;
10271: PPOPN 2
10273: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10274: LD_INT 3
10276: PPUSH
10277: CALL_OW 255
10281: PUSH
10282: LD_INT 2
10284: EQUAL
10285: PUSH
10286: LD_EXP 14
10290: AND
10291: IFFALSE 10336
10293: GO 10295
10295: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10296: LD_INT 1
10298: PPUSH
10299: LD_INT 2
10301: PPUSH
10302: LD_INT 1
10304: PPUSH
10305: CALL_OW 322
// DialogueOn ;
10309: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10313: LD_EXP 27
10317: PPUSH
10318: LD_STRING DA-1-capture
10320: PPUSH
10321: CALL_OW 88
// DialogueOff ;
10325: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10329: LD_STRING OTame
10331: PPUSH
10332: CALL_OW 337
// end ;
10336: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10337: LD_INT 1
10339: PPUSH
10340: LD_INT 2
10342: PPUSH
10343: CALL_OW 321
10347: PUSH
10348: LD_INT 2
10350: EQUAL
10351: PUSH
10352: LD_EXP 14
10356: AND
10357: IFFALSE 10508
10359: GO 10361
10361: DISABLE
// begin DialogueOn ;
10362: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10366: LD_EXP 27
10370: PPUSH
10371: LD_STRING DA-1-ape
10373: PPUSH
10374: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10378: LD_EXP 23
10382: PPUSH
10383: LD_STRING DH-1-ape
10385: PPUSH
10386: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10390: LD_EXP 27
10394: PPUSH
10395: LD_STRING DA-2-ape
10397: PPUSH
10398: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10402: LD_EXP 27
10406: PPUSH
10407: LD_STRING DA-3-ape
10409: PPUSH
10410: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10414: LD_EXP 23
10418: PPUSH
10419: LD_STRING DH-3-ape
10421: PPUSH
10422: CALL_OW 88
// DialogueOff ;
10426: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10430: LD_INT 22
10432: PUSH
10433: LD_INT 0
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: PUSH
10440: LD_INT 25
10442: PUSH
10443: LD_INT 12
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PPUSH
10454: CALL_OW 69
10458: PUSH
10459: LD_INT 0
10461: EQUAL
10462: IFFALSE 10474
// SpawnApeman ( forest , 2 ) ;
10464: LD_INT 1
10466: PPUSH
10467: LD_INT 2
10469: PPUSH
10470: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10474: LD_INT 35
10476: PPUSH
10477: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10481: LD_INT 25
10483: PUSH
10484: LD_INT 12
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PPUSH
10491: CALL_OW 69
10495: PUSH
10496: LD_INT 0
10498: EQUAL
10499: IFFALSE 10474
// YouLost ( Ape ) ;
10501: LD_STRING Ape
10503: PPUSH
10504: CALL_OW 104
// end ;
10508: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10509: LD_EXP 18
10513: PUSH
10514: LD_INT 3
10516: PUSH
10517: LD_INT 2
10519: PUSH
10520: LD_INT 2
10522: PUSH
10523: LD_INT 2
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_OWVAR 67
10536: ARRAY
10537: GREATEREQUAL
10538: IFFALSE 10589
10540: GO 10542
10542: DISABLE
// begin wait ( 0 0$5 ) ;
10543: LD_INT 175
10545: PPUSH
10546: CALL_OW 67
// DialogueOn ;
10550: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10554: LD_EXP 27
10558: PPUSH
10559: LD_STRING DA-1-failure
10561: PPUSH
10562: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10566: LD_EXP 27
10570: PPUSH
10571: LD_STRING DA-2-failure
10573: PPUSH
10574: CALL_OW 88
// YouLost ( Failure ) ;
10578: LD_STRING Failure
10580: PPUSH
10581: CALL_OW 104
// DialogueOff ;
10585: CALL_OW 7
// end ;
10589: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10590: LD_EXP 28
10594: PPUSH
10595: CALL_OW 256
10599: PUSH
10600: LD_INT 3
10602: LESS
10603: IFFALSE 10736
10605: GO 10607
10607: DISABLE
// begin DialogueOn ;
10608: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10612: LD_EXP 28
10616: PPUSH
10617: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10621: LD_EXP 28
10625: PPUSH
10626: LD_STRING DK-Kaiaout-1
10628: PPUSH
10629: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10633: LD_EXP 23
10637: PPUSH
10638: LD_STRING DH-Kaiaout-2
10640: PPUSH
10641: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10645: LD_EXP 24
10649: PPUSH
10650: LD_STRING DG-Kaiaout-3
10652: PPUSH
10653: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10657: LD_EXP 23
10661: PPUSH
10662: LD_STRING DH-Kaiaout-4
10664: PPUSH
10665: CALL_OW 88
// if Givi then
10669: LD_EXP 24
10673: IFFALSE 10723
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10675: LD_EXP 24
10679: PPUSH
10680: LD_STRING DG-Kaiaout-5
10682: PPUSH
10683: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10687: LD_EXP 23
10691: PPUSH
10692: LD_STRING DH-Kaiaout-6
10694: PPUSH
10695: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10699: LD_EXP 24
10703: PPUSH
10704: LD_STRING DG-Kaiaout-7
10706: PPUSH
10707: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10711: LD_EXP 23
10715: PPUSH
10716: LD_STRING DH-Kaiaout-8
10718: PPUSH
10719: CALL_OW 88
// end ; DialogueOff ;
10723: CALL_OW 7
// KillUnit ( Kaia ) ;
10727: LD_EXP 28
10731: PPUSH
10732: CALL_OW 66
// end ;
10736: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var i , tmp ;
10737: LD_INT 22
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 23
10749: PUSH
10750: LD_INT 0
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PPUSH
10761: CALL_OW 69
10765: PUSH
10766: LD_EXP 27
10770: PPUSH
10771: CALL_OW 302
10775: AND
10776: PUSH
10777: LD_EXP 27
10781: PPUSH
10782: CALL_OW 255
10786: PUSH
10787: LD_INT 2
10789: EQUAL
10790: AND
10791: IFFALSE 11862
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10800: LD_INT 22
10802: PUSH
10803: LD_INT 1
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 2
10812: PUSH
10813: LD_INT 25
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 34
10825: PUSH
10826: LD_INT 4
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PPUSH
10842: CALL_OW 69
10846: IFFALSE 11025
// begin Query ( QEnemyInSight ) ;
10848: LD_STRING QEnemyInSight
10850: PPUSH
10851: CALL_OW 97
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) ;
10855: LD_ADDR_VAR 0 2
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 1
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 2
10872: PUSH
10873: LD_INT 25
10875: PUSH
10876: LD_INT 1
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 34
10885: PUSH
10886: LD_INT 4
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PPUSH
10902: CALL_OW 69
10906: ST_TO_ADDR
// for i in tmp do
10907: LD_ADDR_VAR 0 1
10911: PUSH
10912: LD_VAR 0 2
10916: PUSH
10917: FOR_IN
10918: IFFALSE 10937
// ComAgressiveMove ( i , 36 , 22 ) ;
10920: LD_VAR 0 1
10924: PPUSH
10925: LD_INT 36
10927: PPUSH
10928: LD_INT 22
10930: PPUSH
10931: CALL_OW 114
10935: GO 10917
10937: POP
10938: POP
// repeat wait ( 0 0$1 ) ;
10939: LD_INT 35
10941: PPUSH
10942: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10946: LD_INT 22
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 2
10958: PUSH
10959: LD_INT 25
10961: PUSH
10962: LD_INT 1
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 34
10971: PUSH
10972: LD_INT 4
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: NOT
10993: PUSH
10994: LD_INT 22
10996: PUSH
10997: LD_INT 2
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_INT 23
11006: PUSH
11007: LD_INT 0
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PPUSH
11018: CALL_OW 69
11022: AND
11023: IFFALSE 10939
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
11025: LD_ADDR_VAR 0 2
11029: PUSH
11030: LD_INT 22
11032: PUSH
11033: LD_INT 2
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 23
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PPUSH
11054: CALL_OW 69
11058: ST_TO_ADDR
// InGameOn ;
11059: CALL_OW 8
// if tick <= 10 10$00 then
11063: LD_OWVAR 1
11067: PUSH
11068: LD_INT 21000
11070: LESSEQUAL
11071: IFFALSE 11080
// SetAchievement ( ACH_HSPEED_2 ) ;
11073: LD_STRING ACH_HSPEED_2
11075: PPUSH
11076: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
11080: LD_VAR 0 2
11084: PPUSH
11085: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
11089: LD_VAR 0 2
11093: PPUSH
11094: LD_EXP 27
11098: PPUSH
11099: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
11103: LD_EXP 27
11107: PPUSH
11108: LD_VAR 0 2
11112: PPUSH
11113: CALL_OW 119
// wait ( 0 0$1 ) ;
11117: LD_INT 35
11119: PPUSH
11120: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
11124: LD_EXP 27
11128: PPUSH
11129: LD_STRING DA-1-tame-a
11131: PPUSH
11132: CALL_OW 88
// if IsOk ( Mike ) then
11136: LD_EXP 25
11140: PPUSH
11141: CALL_OW 302
11145: IFFALSE 11183
// begin Say ( Mike , DM-1-tame-a ) ;
11147: LD_EXP 25
11151: PPUSH
11152: LD_STRING DM-1-tame-a
11154: PPUSH
11155: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
11159: LD_EXP 29
11163: PPUSH
11164: LD_STRING DS-1-tame-a
11166: PPUSH
11167: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
11171: LD_EXP 25
11175: PPUSH
11176: LD_STRING DM-2-tame-a
11178: PPUSH
11179: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11183: LD_INT 105
11185: PPUSH
11186: CALL_OW 67
// PrepareFarmer ;
11190: CALL 12541 0 0
// CenterOnUnits ( Farmer ) ;
11194: LD_EXP 31
11198: PPUSH
11199: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11203: LD_EXP 31
11207: PPUSH
11208: LD_INT 105
11210: PPUSH
11211: LD_INT 59
11213: PPUSH
11214: CALL_OW 111
// AddComHold ( Farmer ) ;
11218: LD_EXP 31
11222: PPUSH
11223: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11227: LD_EXP 31
11231: PPUSH
11232: LD_STRING DF-1-end
11234: PPUSH
11235: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11239: LD_EXP 27
11243: PPUSH
11244: LD_STRING DA-1-end
11246: PPUSH
11247: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11251: LD_EXP 31
11255: PPUSH
11256: LD_STRING DF-2-end
11258: PPUSH
11259: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11263: LD_EXP 27
11267: PPUSH
11268: LD_STRING DA-2-end
11270: PPUSH
11271: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11275: LD_EXP 31
11279: PPUSH
11280: LD_STRING DF-3-end
11282: PPUSH
11283: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11287: LD_EXP 23
11291: PPUSH
11292: LD_STRING DH-3-end
11294: PPUSH
11295: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11299: LD_EXP 31
11303: PPUSH
11304: LD_STRING DF-4-end
11306: PPUSH
11307: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11311: LD_OWVAR 1
11315: PUSH
11316: LD_INT 52500
11318: PUSH
11319: LD_INT 47250
11321: PUSH
11322: LD_INT 42000
11324: PUSH
11325: LD_INT 31500
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: PUSH
11334: LD_OWVAR 67
11338: ARRAY
11339: LESSEQUAL
11340: IFFALSE 11354
// AddMedal ( med1 , 1 ) else
11342: LD_STRING med1
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 101
11352: GO 11365
// AddMedal ( med1 , - 1 ) ;
11354: LD_STRING med1
11356: PPUSH
11357: LD_INT 1
11359: NEG
11360: PPUSH
11361: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11365: LD_INT 22
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 25
11377: PUSH
11378: LD_INT 4
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PPUSH
11389: CALL_OW 69
11393: PUSH
11394: LD_INT 0
11396: EQUAL
11397: PUSH
11398: LD_EXP 12
11402: NOT
11403: AND
11404: IFFALSE 11418
// AddMedal ( med2 , 1 ) else
11406: LD_STRING med2
11408: PPUSH
11409: LD_INT 1
11411: PPUSH
11412: CALL_OW 101
11416: GO 11429
// AddMedal ( med2 , - 1 ) ;
11418: LD_STRING med2
11420: PPUSH
11421: LD_INT 1
11423: NEG
11424: PPUSH
11425: CALL_OW 101
// if trickyMove then
11429: LD_EXP 15
11433: IFFALSE 11447
// AddMedal ( med3 , 1 ) else
11435: LD_STRING med3
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 101
11445: GO 11477
// if spottedBeforeRadio then
11447: LD_EXP 6
11451: IFFALSE 11466
// AddMedal ( med3 , - 2 ) else
11453: LD_STRING med3
11455: PPUSH
11456: LD_INT 2
11458: NEG
11459: PPUSH
11460: CALL_OW 101
11464: GO 11477
// AddMedal ( med3 , - 1 ) ;
11466: LD_STRING med3
11468: PPUSH
11469: LD_INT 1
11471: NEG
11472: PPUSH
11473: CALL_OW 101
// GiveMedals ( MAIN ) ;
11477: LD_STRING MAIN
11479: PPUSH
11480: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11484: LD_INT 22
11486: PUSH
11487: LD_INT 2
11489: PUSH
11490: EMPTY
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 23
11496: PUSH
11497: LD_INT 0
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: PPUSH
11508: CALL_OW 69
11512: PPUSH
11513: LD_STRING 02_ape
11515: PPUSH
11516: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: PUSH
11535: LD_INT 23
11537: PUSH
11538: LD_INT 2
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 21
11547: PUSH
11548: LD_INT 1
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: PPUSH
11560: CALL_OW 69
11564: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11565: LD_VAR 0 2
11569: PPUSH
11570: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11574: LD_EXP 23
11578: PPUSH
11579: LD_STRING 02_Heike
11581: PPUSH
11582: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11586: LD_EXP 27
11590: PPUSH
11591: LD_STRING 02_Aviradze
11593: PPUSH
11594: CALL_OW 38
// if Givi then
11598: LD_EXP 24
11602: IFFALSE 11616
// SaveCharacters ( Givi , 02_Givi ) ;
11604: LD_EXP 24
11608: PPUSH
11609: LD_STRING 02_Givi
11611: PPUSH
11612: CALL_OW 38
// if Mike then
11616: LD_EXP 25
11620: IFFALSE 11634
// SaveCharacters ( Mike , 02_Mike ) ;
11622: LD_EXP 25
11626: PPUSH
11627: LD_STRING 02_Mike
11629: PPUSH
11630: CALL_OW 38
// if Kamil then
11634: LD_EXP 26
11638: IFFALSE 11652
// SaveCharacters ( Kamil , 02_Kamil ) ;
11640: LD_EXP 26
11644: PPUSH
11645: LD_STRING 02_Kamil
11647: PPUSH
11648: CALL_OW 38
// if Kaia then
11652: LD_EXP 28
11656: IFFALSE 11670
// SaveCharacters ( Kaia , 02_Kaia ) ;
11658: LD_EXP 28
11662: PPUSH
11663: LD_STRING 02_Kaia
11665: PPUSH
11666: CALL_OW 38
// if Sophia then
11670: LD_EXP 29
11674: IFFALSE 11688
// SaveCharacters ( Sophia , 02_Sophia ) ;
11676: LD_EXP 29
11680: PPUSH
11681: LD_STRING 02_Sophia
11683: PPUSH
11684: CALL_OW 38
// if Markov then
11688: LD_EXP 30
11692: IFFALSE 11706
// SaveCharacters ( Markov , 02_Markov ) ;
11694: LD_EXP 30
11698: PPUSH
11699: LD_STRING 02_Markov
11701: PPUSH
11702: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11706: LD_VAR 0 2
11710: PUSH
11711: LD_EXP 23
11715: PUSH
11716: LD_EXP 27
11720: PUSH
11721: LD_EXP 24
11725: PUSH
11726: LD_EXP 25
11730: PUSH
11731: LD_EXP 26
11735: PUSH
11736: LD_EXP 29
11740: PUSH
11741: LD_EXP 28
11745: PUSH
11746: LD_EXP 30
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: DIFF
11761: IFFALSE 11826
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11763: LD_VAR 0 2
11767: PUSH
11768: LD_EXP 23
11772: PUSH
11773: LD_EXP 27
11777: PUSH
11778: LD_EXP 24
11782: PUSH
11783: LD_EXP 25
11787: PUSH
11788: LD_EXP 26
11792: PUSH
11793: LD_EXP 29
11797: PUSH
11798: LD_EXP 28
11802: PUSH
11803: LD_EXP 30
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: DIFF
11818: PPUSH
11819: LD_STRING 02_others
11821: PPUSH
11822: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11826: LD_STRING enableBioCharacter(BIO_KRAY)
11828: PPUSH
11829: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11833: LD_STRING enableBioCharacter(BIO_AVIR)
11835: PPUSH
11836: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11840: LD_STRING enableBioCharacter(BIO_SOPH)
11842: PPUSH
11843: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11847: LD_STRING enableBioCharacter(BIO_KAMI)
11849: PPUSH
11850: CALL_OW 559
// YouWin ;
11854: CALL_OW 103
// InGameOff ;
11858: CALL_OW 9
// end ;
11862: PPOPN 2
11864: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11865: LD_OWVAR 1
11869: PUSH
11870: LD_EXP 13
11874: GREATER
11875: PUSH
11876: LD_EXP 4
11880: AND
11881: IFFALSE 11921
11883: GO 11885
11885: DISABLE
// begin InGameOn ;
11886: CALL_OW 8
// PrepareFarmer ;
11890: CALL 12541 0 0
// CenterNowOnUnits ( Farmer ) ;
11894: LD_EXP 31
11898: PPUSH
11899: CALL_OW 87
// wait ( 0 0$2 ) ;
11903: LD_INT 70
11905: PPUSH
11906: CALL_OW 67
// YouLost ( Farmer ) ;
11910: LD_STRING Farmer
11912: PPUSH
11913: CALL_OW 104
// InGameOff ;
11917: CALL_OW 9
// end ; end_of_file
11921: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11922: LD_INT 0
11924: PPUSH
11925: PPUSH
11926: PPUSH
// uc_side := 2 ;
11927: LD_ADDR_OWVAR 20
11931: PUSH
11932: LD_INT 2
11934: ST_TO_ADDR
// uc_nation := 2 ;
11935: LD_ADDR_OWVAR 21
11939: PUSH
11940: LD_INT 2
11942: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11943: LD_ADDR_EXP 23
11947: PUSH
11948: LD_STRING Heike
11950: PPUSH
11951: LD_EXP 1
11955: NOT
11956: PPUSH
11957: LD_EXP 2
11961: PPUSH
11962: CALL 34256 0 3
11966: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11967: LD_EXP 23
11971: PPUSH
11972: LD_INT 83
11974: PPUSH
11975: LD_INT 72
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11985: LD_ADDR_EXP 24
11989: PUSH
11990: LD_STRING Givi
11992: PPUSH
11993: LD_EXP 1
11997: NOT
11998: PPUSH
11999: LD_EXP 2
12003: PPUSH
12004: CALL 34256 0 3
12008: ST_TO_ADDR
// if Givi then
12009: LD_EXP 24
12013: IFFALSE 12033
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
12015: LD_EXP 24
12019: PPUSH
12020: LD_INT 87
12022: PPUSH
12023: LD_INT 76
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
12033: LD_ADDR_EXP 25
12037: PUSH
12038: LD_STRING Mike
12040: PPUSH
12041: LD_EXP 1
12045: NOT
12046: PPUSH
12047: LD_EXP 2
12051: PPUSH
12052: CALL 34256 0 3
12056: ST_TO_ADDR
// if Mike then
12057: LD_EXP 25
12061: IFFALSE 12081
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
12063: LD_EXP 25
12067: PPUSH
12068: LD_INT 84
12070: PPUSH
12071: LD_INT 76
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
12081: LD_ADDR_EXP 26
12085: PUSH
12086: LD_STRING Kamil
12088: PPUSH
12089: LD_EXP 1
12093: NOT
12094: PPUSH
12095: LD_EXP 2
12099: PPUSH
12100: CALL 34256 0 3
12104: ST_TO_ADDR
// if Kamil then
12105: LD_EXP 26
12109: IFFALSE 12129
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
12111: LD_EXP 26
12115: PPUSH
12116: LD_INT 85
12118: PPUSH
12119: LD_INT 78
12121: PPUSH
12122: LD_INT 0
12124: PPUSH
12125: CALL_OW 48
// uc_side := 5 ;
12129: LD_ADDR_OWVAR 20
12133: PUSH
12134: LD_INT 5
12136: ST_TO_ADDR
// uc_nation := 2 ;
12137: LD_ADDR_OWVAR 21
12141: PUSH
12142: LD_INT 2
12144: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
12145: LD_ADDR_EXP 27
12149: PUSH
12150: LD_STRING Aviradze
12152: PPUSH
12153: LD_INT 0
12155: PPUSH
12156: LD_STRING 
12158: PPUSH
12159: CALL 34256 0 3
12163: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
12164: LD_EXP 27
12168: PPUSH
12169: LD_INT 106
12171: PPUSH
12172: LD_INT 38
12174: PPUSH
12175: LD_INT 0
12177: PPUSH
12178: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12182: LD_EXP 27
12186: PPUSH
12187: LD_INT 103
12189: PPUSH
12190: LD_INT 38
12192: PPUSH
12193: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12197: LD_ADDR_EXP 28
12201: PUSH
12202: LD_STRING Kaia
12204: PPUSH
12205: LD_INT 0
12207: PPUSH
12208: LD_STRING 
12210: PPUSH
12211: CALL 34256 0 3
12215: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12216: LD_EXP 28
12220: PPUSH
12221: LD_INT 100
12223: PPUSH
12224: LD_INT 34
12226: PPUSH
12227: LD_INT 0
12229: PPUSH
12230: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12234: LD_EXP 28
12238: PPUSH
12239: LD_INT 100
12241: PPUSH
12242: LD_INT 39
12244: PPUSH
12245: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12249: LD_ADDR_EXP 29
12253: PUSH
12254: LD_STRING Sophia
12256: PPUSH
12257: LD_INT 0
12259: PPUSH
12260: LD_STRING 
12262: PPUSH
12263: CALL 34256 0 3
12267: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12268: LD_EXP 29
12272: PPUSH
12273: LD_INT 109
12275: PPUSH
12276: LD_INT 50
12278: PPUSH
12279: LD_INT 0
12281: PPUSH
12282: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12286: LD_EXP 29
12290: PPUSH
12291: LD_INT 100
12293: PPUSH
12294: LD_INT 39
12296: PPUSH
12297: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12301: LD_ADDR_EXP 30
12305: PUSH
12306: LD_STRING Markov
12308: PPUSH
12309: LD_INT 0
12311: PPUSH
12312: LD_STRING 
12314: PPUSH
12315: CALL 34256 0 3
12319: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12320: LD_INT 5
12322: PPUSH
12323: LD_INT 3
12325: PPUSH
12326: LD_INT 21
12328: PPUSH
12329: LD_INT 1
12331: PPUSH
12332: LD_INT 1
12334: PPUSH
12335: LD_INT 42
12337: PPUSH
12338: LD_INT 90
12340: PUSH
12341: LD_INT 70
12343: PUSH
12344: LD_INT 60
12346: PUSH
12347: LD_INT 50
12349: PUSH
12350: EMPTY
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_OWVAR 67
12360: ARRAY
12361: PPUSH
12362: CALL 241 0 7
// veh := CreateVehicle ;
12366: LD_ADDR_VAR 0 3
12370: PUSH
12371: CALL_OW 45
12375: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12376: LD_VAR 0 3
12380: PPUSH
12381: LD_INT 4
12383: PPUSH
12384: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12388: LD_VAR 0 3
12392: PPUSH
12393: LD_INT 109
12395: PPUSH
12396: LD_INT 38
12398: PPUSH
12399: LD_INT 0
12401: PPUSH
12402: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12406: LD_EXP 30
12410: PPUSH
12411: LD_VAR 0 3
12415: PPUSH
12416: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12420: LD_EXP 28
12424: PPUSH
12425: LD_EXP 27
12429: PPUSH
12430: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12434: LD_EXP 27
12438: PPUSH
12439: LD_EXP 28
12443: PPUSH
12444: CALL_OW 119
// if not Givi or not Mike then
12448: LD_EXP 24
12452: NOT
12453: PUSH
12454: LD_EXP 25
12458: NOT
12459: OR
12460: IFFALSE 12536
// begin uc_nation := 2 ;
12462: LD_ADDR_OWVAR 21
12466: PUSH
12467: LD_INT 2
12469: ST_TO_ADDR
// uc_side := 5 ;
12470: LD_ADDR_OWVAR 20
12474: PUSH
12475: LD_INT 5
12477: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12478: LD_INT 1
12480: PPUSH
12481: LD_INT 1
12483: PPUSH
12484: LD_INT 1
12486: PPUSH
12487: CALL_OW 380
// un := CreateHuman ;
12491: LD_ADDR_VAR 0 2
12495: PUSH
12496: CALL_OW 44
12500: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12501: LD_VAR 0 2
12505: PPUSH
12506: LD_INT 112
12508: PPUSH
12509: LD_INT 40
12511: PPUSH
12512: LD_INT 3
12514: PPUSH
12515: LD_INT 0
12517: PPUSH
12518: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12522: LD_VAR 0 2
12526: PPUSH
12527: LD_EXP 27
12531: PPUSH
12532: CALL_OW 119
// end ; end ;
12536: LD_VAR 0 1
12540: RET
// export function PrepareFarmer ; var i ; begin
12541: LD_INT 0
12543: PPUSH
12544: PPUSH
// uc_side := 5 ;
12545: LD_ADDR_OWVAR 20
12549: PUSH
12550: LD_INT 5
12552: ST_TO_ADDR
// uc_nation := 2 ;
12553: LD_ADDR_OWVAR 21
12557: PUSH
12558: LD_INT 2
12560: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12561: LD_ADDR_EXP 31
12565: PUSH
12566: LD_STRING Farmer
12568: PPUSH
12569: LD_INT 0
12571: PPUSH
12572: LD_STRING 
12574: PPUSH
12575: CALL 34256 0 3
12579: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12580: LD_EXP 31
12584: PPUSH
12585: LD_INT 106
12587: PPUSH
12588: LD_INT 62
12590: PPUSH
12591: LD_INT 0
12593: PPUSH
12594: CALL_OW 48
// for i := 1 to 5 do
12598: LD_ADDR_VAR 0 2
12602: PUSH
12603: DOUBLE
12604: LD_INT 1
12606: DEC
12607: ST_TO_ADDR
12608: LD_INT 5
12610: PUSH
12611: FOR_TO
12612: IFFALSE 12650
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12614: LD_INT 1
12616: PPUSH
12617: LD_INT 1
12619: PPUSH
12620: LD_INT 1
12622: PPUSH
12623: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12627: CALL_OW 44
12631: PPUSH
12632: LD_INT 105
12634: PPUSH
12635: LD_INT 64
12637: PPUSH
12638: LD_INT 3
12640: PPUSH
12641: LD_INT 0
12643: PPUSH
12644: CALL_OW 50
// end ;
12648: GO 12611
12650: POP
12651: POP
// end ; end_of_file
12652: LD_VAR 0 1
12656: RET
// every 2 2$20 + 0 0$10 do
12657: GO 12659
12659: DISABLE
// begin enable ;
12660: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12661: LD_INT 1
12663: PPUSH
12664: LD_INT 5
12666: PPUSH
12667: CALL_OW 12
12671: PPUSH
12672: LD_INT 1
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 55
// if tick > 6 6$00 then
12682: LD_OWVAR 1
12686: PUSH
12687: LD_INT 12600
12689: GREATER
12690: IFFALSE 12693
// disable ;
12692: DISABLE
// end ; end_of_file
12693: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12694: LD_VAR 0 1
12698: PUSH
12699: LD_EXP 23
12703: EQUAL
12704: IFFALSE 12713
// YouLost ( Heike ) ;
12706: LD_STRING Heike
12708: PPUSH
12709: CALL_OW 104
// if un = Aviradze then
12713: LD_VAR 0 1
12717: PUSH
12718: LD_EXP 27
12722: EQUAL
12723: IFFALSE 12732
// YouLost ( Aviradze ) ;
12725: LD_STRING Aviradze
12727: PPUSH
12728: CALL_OW 104
// if un = usLab then
12732: LD_VAR 0 1
12736: PUSH
12737: LD_INT 3
12739: EQUAL
12740: IFFALSE 12749
// YouLost ( Lab ) ;
12742: LD_STRING Lab
12744: PPUSH
12745: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 22
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 21
12766: PUSH
12767: LD_INT 1
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 23
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: LIST
12788: PPUSH
12789: CALL_OW 69
12793: PUSH
12794: LD_EXP 23
12798: PUSH
12799: LD_EXP 27
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: DIFF
12808: IN
12809: PUSH
12810: LD_EXP 4
12814: AND
12815: IFFALSE 12831
// lostCounter := lostCounter + 1 ;
12817: LD_ADDR_EXP 18
12821: PUSH
12822: LD_EXP 18
12826: PUSH
12827: LD_INT 1
12829: PLUS
12830: ST_TO_ADDR
// end ;
12831: PPOPN 1
12833: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12834: LD_INT 23
12836: PUSH
12837: LD_INT 2
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 25
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PPUSH
12858: CALL_OW 69
12862: PUSH
12863: LD_INT 0
12865: EQUAL
12866: PUSH
12867: LD_INT 22
12869: PUSH
12870: LD_INT 2
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 21
12879: PUSH
12880: LD_INT 3
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PPUSH
12891: CALL_OW 69
12895: PUSH
12896: LD_INT 0
12898: EQUAL
12899: AND
12900: IFFALSE 12912
12902: GO 12904
12904: DISABLE
// YouLost ( Eng ) ;
12905: LD_STRING Eng
12907: PPUSH
12908: CALL_OW 104
12912: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12913: LD_VAR 0 1
12917: PUSH
12918: LD_EXP 22
12922: IN
12923: PUSH
12924: LD_VAR 0 2
12928: PUSH
12929: LD_INT 2
12931: EQUAL
12932: AND
12933: IFFALSE 12965
// begin usSci := usSci diff un ;
12935: LD_ADDR_EXP 22
12939: PUSH
12940: LD_EXP 22
12944: PUSH
12945: LD_VAR 0 1
12949: DIFF
12950: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12951: LD_ADDR_EXP 9
12955: PUSH
12956: LD_EXP 9
12960: PUSH
12961: LD_INT 1
12963: PLUS
12964: ST_TO_ADDR
// end ; end ;
12965: PPOPN 3
12967: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12968: LD_VAR 0 1
12972: PUSH
12973: LD_INT 2
12975: EQUAL
12976: PUSH
12977: LD_VAR 0 2
12981: PUSH
12982: LD_INT 5
12984: EQUAL
12985: AND
12986: IFFALSE 12995
// YouLost ( FriendlyFire ) ;
12988: LD_STRING FriendlyFire
12990: PPUSH
12991: CALL_OW 104
// end ;
12995: PPOPN 2
12997: END
// on EnterBuilding ( b , un ) do begin if un = Gladstone then
12998: LD_VAR 0 2
13002: PUSH
13003: LD_EXP 19
13007: EQUAL
13008: IFFALSE 13022
// SetTag ( Gladstone , 0 ) ;
13010: LD_EXP 19
13014: PPUSH
13015: LD_INT 0
13017: PPUSH
13018: CALL_OW 109
// end ; end_of_file end_of_file
13022: PPOPN 2
13024: END
// export globalGameSaveCounter ; every 0 0$1 do
13025: GO 13027
13027: DISABLE
// begin enable ;
13028: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13029: LD_STRING updateTimer(
13031: PUSH
13032: LD_OWVAR 1
13036: STR
13037: PUSH
13038: LD_STRING );
13040: STR
13041: PPUSH
13042: CALL_OW 559
// end ;
13046: END
// every 0 0$1 do
13047: GO 13049
13049: DISABLE
// begin globalGameSaveCounter := 0 ;
13050: LD_ADDR_EXP 32
13054: PUSH
13055: LD_INT 0
13057: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13058: LD_STRING setGameSaveCounter(0)
13060: PPUSH
13061: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13065: LD_STRING initStreamRollete();
13067: PPUSH
13068: CALL_OW 559
// InitStreamMode ;
13072: CALL 14415 0 0
// DefineStreamItems ( false ) ;
13076: LD_INT 0
13078: PPUSH
13079: CALL 14879 0 1
// end ;
13083: END
// export function SOS_MapStart ( ) ; begin
13084: LD_INT 0
13086: PPUSH
// if streamModeActive then
13087: LD_EXP 33
13091: IFFALSE 13100
// DefineStreamItems ( true ) ;
13093: LD_INT 1
13095: PPUSH
13096: CALL 14879 0 1
// UpdateLuaVariables ( ) ;
13100: CALL 13117 0 0
// UpdateFactoryWaypoints ( ) ;
13104: CALL 27881 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13108: CALL 28133 0 0
// end ;
13112: LD_VAR 0 1
13116: RET
// function UpdateLuaVariables ( ) ; begin
13117: LD_INT 0
13119: PPUSH
// if globalGameSaveCounter then
13120: LD_EXP 32
13124: IFFALSE 13158
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13126: LD_ADDR_EXP 32
13130: PUSH
13131: LD_EXP 32
13135: PPUSH
13136: CALL 73349 0 1
13140: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13141: LD_STRING setGameSaveCounter(
13143: PUSH
13144: LD_EXP 32
13148: STR
13149: PUSH
13150: LD_STRING )
13152: STR
13153: PPUSH
13154: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13158: LD_STRING setGameDifficulty(
13160: PUSH
13161: LD_OWVAR 67
13165: STR
13166: PUSH
13167: LD_STRING )
13169: STR
13170: PPUSH
13171: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
13175: LD_STRING displayDifficulty(
13177: PUSH
13178: LD_OWVAR 67
13182: STR
13183: PUSH
13184: LD_STRING )
13186: STR
13187: PPUSH
13188: CALL_OW 559
// end ;
13192: LD_VAR 0 1
13196: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13197: LD_INT 0
13199: PPUSH
// if p2 = stream_mode then
13200: LD_VAR 0 2
13204: PUSH
13205: LD_INT 100
13207: EQUAL
13208: IFFALSE 14211
// begin if not StreamModeActive then
13210: LD_EXP 33
13214: NOT
13215: IFFALSE 13225
// StreamModeActive := true ;
13217: LD_ADDR_EXP 33
13221: PUSH
13222: LD_INT 1
13224: ST_TO_ADDR
// if p3 = 0 then
13225: LD_VAR 0 3
13229: PUSH
13230: LD_INT 0
13232: EQUAL
13233: IFFALSE 13239
// InitStreamMode ;
13235: CALL 14415 0 0
// if p3 = 1 then
13239: LD_VAR 0 3
13243: PUSH
13244: LD_INT 1
13246: EQUAL
13247: IFFALSE 13257
// sRocket := true ;
13249: LD_ADDR_EXP 38
13253: PUSH
13254: LD_INT 1
13256: ST_TO_ADDR
// if p3 = 2 then
13257: LD_VAR 0 3
13261: PUSH
13262: LD_INT 2
13264: EQUAL
13265: IFFALSE 13275
// sSpeed := true ;
13267: LD_ADDR_EXP 37
13271: PUSH
13272: LD_INT 1
13274: ST_TO_ADDR
// if p3 = 3 then
13275: LD_VAR 0 3
13279: PUSH
13280: LD_INT 3
13282: EQUAL
13283: IFFALSE 13293
// sEngine := true ;
13285: LD_ADDR_EXP 39
13289: PUSH
13290: LD_INT 1
13292: ST_TO_ADDR
// if p3 = 4 then
13293: LD_VAR 0 3
13297: PUSH
13298: LD_INT 4
13300: EQUAL
13301: IFFALSE 13311
// sSpec := true ;
13303: LD_ADDR_EXP 36
13307: PUSH
13308: LD_INT 1
13310: ST_TO_ADDR
// if p3 = 5 then
13311: LD_VAR 0 3
13315: PUSH
13316: LD_INT 5
13318: EQUAL
13319: IFFALSE 13329
// sLevel := true ;
13321: LD_ADDR_EXP 40
13325: PUSH
13326: LD_INT 1
13328: ST_TO_ADDR
// if p3 = 6 then
13329: LD_VAR 0 3
13333: PUSH
13334: LD_INT 6
13336: EQUAL
13337: IFFALSE 13347
// sArmoury := true ;
13339: LD_ADDR_EXP 41
13343: PUSH
13344: LD_INT 1
13346: ST_TO_ADDR
// if p3 = 7 then
13347: LD_VAR 0 3
13351: PUSH
13352: LD_INT 7
13354: EQUAL
13355: IFFALSE 13365
// sRadar := true ;
13357: LD_ADDR_EXP 42
13361: PUSH
13362: LD_INT 1
13364: ST_TO_ADDR
// if p3 = 8 then
13365: LD_VAR 0 3
13369: PUSH
13370: LD_INT 8
13372: EQUAL
13373: IFFALSE 13383
// sBunker := true ;
13375: LD_ADDR_EXP 43
13379: PUSH
13380: LD_INT 1
13382: ST_TO_ADDR
// if p3 = 9 then
13383: LD_VAR 0 3
13387: PUSH
13388: LD_INT 9
13390: EQUAL
13391: IFFALSE 13401
// sHack := true ;
13393: LD_ADDR_EXP 44
13397: PUSH
13398: LD_INT 1
13400: ST_TO_ADDR
// if p3 = 10 then
13401: LD_VAR 0 3
13405: PUSH
13406: LD_INT 10
13408: EQUAL
13409: IFFALSE 13419
// sFire := true ;
13411: LD_ADDR_EXP 45
13415: PUSH
13416: LD_INT 1
13418: ST_TO_ADDR
// if p3 = 11 then
13419: LD_VAR 0 3
13423: PUSH
13424: LD_INT 11
13426: EQUAL
13427: IFFALSE 13437
// sRefresh := true ;
13429: LD_ADDR_EXP 46
13433: PUSH
13434: LD_INT 1
13436: ST_TO_ADDR
// if p3 = 12 then
13437: LD_VAR 0 3
13441: PUSH
13442: LD_INT 12
13444: EQUAL
13445: IFFALSE 13455
// sExp := true ;
13447: LD_ADDR_EXP 47
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// if p3 = 13 then
13455: LD_VAR 0 3
13459: PUSH
13460: LD_INT 13
13462: EQUAL
13463: IFFALSE 13473
// sDepot := true ;
13465: LD_ADDR_EXP 48
13469: PUSH
13470: LD_INT 1
13472: ST_TO_ADDR
// if p3 = 14 then
13473: LD_VAR 0 3
13477: PUSH
13478: LD_INT 14
13480: EQUAL
13481: IFFALSE 13491
// sFlag := true ;
13483: LD_ADDR_EXP 49
13487: PUSH
13488: LD_INT 1
13490: ST_TO_ADDR
// if p3 = 15 then
13491: LD_VAR 0 3
13495: PUSH
13496: LD_INT 15
13498: EQUAL
13499: IFFALSE 13509
// sKamikadze := true ;
13501: LD_ADDR_EXP 57
13505: PUSH
13506: LD_INT 1
13508: ST_TO_ADDR
// if p3 = 16 then
13509: LD_VAR 0 3
13513: PUSH
13514: LD_INT 16
13516: EQUAL
13517: IFFALSE 13527
// sTroll := true ;
13519: LD_ADDR_EXP 58
13523: PUSH
13524: LD_INT 1
13526: ST_TO_ADDR
// if p3 = 17 then
13527: LD_VAR 0 3
13531: PUSH
13532: LD_INT 17
13534: EQUAL
13535: IFFALSE 13545
// sSlow := true ;
13537: LD_ADDR_EXP 59
13541: PUSH
13542: LD_INT 1
13544: ST_TO_ADDR
// if p3 = 18 then
13545: LD_VAR 0 3
13549: PUSH
13550: LD_INT 18
13552: EQUAL
13553: IFFALSE 13563
// sLack := true ;
13555: LD_ADDR_EXP 60
13559: PUSH
13560: LD_INT 1
13562: ST_TO_ADDR
// if p3 = 19 then
13563: LD_VAR 0 3
13567: PUSH
13568: LD_INT 19
13570: EQUAL
13571: IFFALSE 13581
// sTank := true ;
13573: LD_ADDR_EXP 62
13577: PUSH
13578: LD_INT 1
13580: ST_TO_ADDR
// if p3 = 20 then
13581: LD_VAR 0 3
13585: PUSH
13586: LD_INT 20
13588: EQUAL
13589: IFFALSE 13599
// sRemote := true ;
13591: LD_ADDR_EXP 63
13595: PUSH
13596: LD_INT 1
13598: ST_TO_ADDR
// if p3 = 21 then
13599: LD_VAR 0 3
13603: PUSH
13604: LD_INT 21
13606: EQUAL
13607: IFFALSE 13617
// sPowell := true ;
13609: LD_ADDR_EXP 64
13613: PUSH
13614: LD_INT 1
13616: ST_TO_ADDR
// if p3 = 22 then
13617: LD_VAR 0 3
13621: PUSH
13622: LD_INT 22
13624: EQUAL
13625: IFFALSE 13635
// sTeleport := true ;
13627: LD_ADDR_EXP 67
13631: PUSH
13632: LD_INT 1
13634: ST_TO_ADDR
// if p3 = 23 then
13635: LD_VAR 0 3
13639: PUSH
13640: LD_INT 23
13642: EQUAL
13643: IFFALSE 13653
// sOilTower := true ;
13645: LD_ADDR_EXP 69
13649: PUSH
13650: LD_INT 1
13652: ST_TO_ADDR
// if p3 = 24 then
13653: LD_VAR 0 3
13657: PUSH
13658: LD_INT 24
13660: EQUAL
13661: IFFALSE 13671
// sShovel := true ;
13663: LD_ADDR_EXP 70
13667: PUSH
13668: LD_INT 1
13670: ST_TO_ADDR
// if p3 = 25 then
13671: LD_VAR 0 3
13675: PUSH
13676: LD_INT 25
13678: EQUAL
13679: IFFALSE 13689
// sSheik := true ;
13681: LD_ADDR_EXP 71
13685: PUSH
13686: LD_INT 1
13688: ST_TO_ADDR
// if p3 = 26 then
13689: LD_VAR 0 3
13693: PUSH
13694: LD_INT 26
13696: EQUAL
13697: IFFALSE 13707
// sEarthquake := true ;
13699: LD_ADDR_EXP 73
13703: PUSH
13704: LD_INT 1
13706: ST_TO_ADDR
// if p3 = 27 then
13707: LD_VAR 0 3
13711: PUSH
13712: LD_INT 27
13714: EQUAL
13715: IFFALSE 13725
// sAI := true ;
13717: LD_ADDR_EXP 74
13721: PUSH
13722: LD_INT 1
13724: ST_TO_ADDR
// if p3 = 28 then
13725: LD_VAR 0 3
13729: PUSH
13730: LD_INT 28
13732: EQUAL
13733: IFFALSE 13743
// sCargo := true ;
13735: LD_ADDR_EXP 77
13739: PUSH
13740: LD_INT 1
13742: ST_TO_ADDR
// if p3 = 29 then
13743: LD_VAR 0 3
13747: PUSH
13748: LD_INT 29
13750: EQUAL
13751: IFFALSE 13761
// sDLaser := true ;
13753: LD_ADDR_EXP 78
13757: PUSH
13758: LD_INT 1
13760: ST_TO_ADDR
// if p3 = 30 then
13761: LD_VAR 0 3
13765: PUSH
13766: LD_INT 30
13768: EQUAL
13769: IFFALSE 13779
// sExchange := true ;
13771: LD_ADDR_EXP 79
13775: PUSH
13776: LD_INT 1
13778: ST_TO_ADDR
// if p3 = 31 then
13779: LD_VAR 0 3
13783: PUSH
13784: LD_INT 31
13786: EQUAL
13787: IFFALSE 13797
// sFac := true ;
13789: LD_ADDR_EXP 80
13793: PUSH
13794: LD_INT 1
13796: ST_TO_ADDR
// if p3 = 32 then
13797: LD_VAR 0 3
13801: PUSH
13802: LD_INT 32
13804: EQUAL
13805: IFFALSE 13815
// sPower := true ;
13807: LD_ADDR_EXP 81
13811: PUSH
13812: LD_INT 1
13814: ST_TO_ADDR
// if p3 = 33 then
13815: LD_VAR 0 3
13819: PUSH
13820: LD_INT 33
13822: EQUAL
13823: IFFALSE 13833
// sRandom := true ;
13825: LD_ADDR_EXP 82
13829: PUSH
13830: LD_INT 1
13832: ST_TO_ADDR
// if p3 = 34 then
13833: LD_VAR 0 3
13837: PUSH
13838: LD_INT 34
13840: EQUAL
13841: IFFALSE 13851
// sShield := true ;
13843: LD_ADDR_EXP 83
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// if p3 = 35 then
13851: LD_VAR 0 3
13855: PUSH
13856: LD_INT 35
13858: EQUAL
13859: IFFALSE 13869
// sTime := true ;
13861: LD_ADDR_EXP 84
13865: PUSH
13866: LD_INT 1
13868: ST_TO_ADDR
// if p3 = 36 then
13869: LD_VAR 0 3
13873: PUSH
13874: LD_INT 36
13876: EQUAL
13877: IFFALSE 13887
// sTools := true ;
13879: LD_ADDR_EXP 85
13883: PUSH
13884: LD_INT 1
13886: ST_TO_ADDR
// if p3 = 101 then
13887: LD_VAR 0 3
13891: PUSH
13892: LD_INT 101
13894: EQUAL
13895: IFFALSE 13905
// sSold := true ;
13897: LD_ADDR_EXP 50
13901: PUSH
13902: LD_INT 1
13904: ST_TO_ADDR
// if p3 = 102 then
13905: LD_VAR 0 3
13909: PUSH
13910: LD_INT 102
13912: EQUAL
13913: IFFALSE 13923
// sDiff := true ;
13915: LD_ADDR_EXP 51
13919: PUSH
13920: LD_INT 1
13922: ST_TO_ADDR
// if p3 = 103 then
13923: LD_VAR 0 3
13927: PUSH
13928: LD_INT 103
13930: EQUAL
13931: IFFALSE 13941
// sFog := true ;
13933: LD_ADDR_EXP 54
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// if p3 = 104 then
13941: LD_VAR 0 3
13945: PUSH
13946: LD_INT 104
13948: EQUAL
13949: IFFALSE 13959
// sReset := true ;
13951: LD_ADDR_EXP 55
13955: PUSH
13956: LD_INT 1
13958: ST_TO_ADDR
// if p3 = 105 then
13959: LD_VAR 0 3
13963: PUSH
13964: LD_INT 105
13966: EQUAL
13967: IFFALSE 13977
// sSun := true ;
13969: LD_ADDR_EXP 56
13973: PUSH
13974: LD_INT 1
13976: ST_TO_ADDR
// if p3 = 106 then
13977: LD_VAR 0 3
13981: PUSH
13982: LD_INT 106
13984: EQUAL
13985: IFFALSE 13995
// sTiger := true ;
13987: LD_ADDR_EXP 52
13991: PUSH
13992: LD_INT 1
13994: ST_TO_ADDR
// if p3 = 107 then
13995: LD_VAR 0 3
13999: PUSH
14000: LD_INT 107
14002: EQUAL
14003: IFFALSE 14013
// sBomb := true ;
14005: LD_ADDR_EXP 53
14009: PUSH
14010: LD_INT 1
14012: ST_TO_ADDR
// if p3 = 108 then
14013: LD_VAR 0 3
14017: PUSH
14018: LD_INT 108
14020: EQUAL
14021: IFFALSE 14031
// sWound := true ;
14023: LD_ADDR_EXP 61
14027: PUSH
14028: LD_INT 1
14030: ST_TO_ADDR
// if p3 = 109 then
14031: LD_VAR 0 3
14035: PUSH
14036: LD_INT 109
14038: EQUAL
14039: IFFALSE 14049
// sBetray := true ;
14041: LD_ADDR_EXP 65
14045: PUSH
14046: LD_INT 1
14048: ST_TO_ADDR
// if p3 = 110 then
14049: LD_VAR 0 3
14053: PUSH
14054: LD_INT 110
14056: EQUAL
14057: IFFALSE 14067
// sContamin := true ;
14059: LD_ADDR_EXP 66
14063: PUSH
14064: LD_INT 1
14066: ST_TO_ADDR
// if p3 = 111 then
14067: LD_VAR 0 3
14071: PUSH
14072: LD_INT 111
14074: EQUAL
14075: IFFALSE 14085
// sOil := true ;
14077: LD_ADDR_EXP 68
14081: PUSH
14082: LD_INT 1
14084: ST_TO_ADDR
// if p3 = 112 then
14085: LD_VAR 0 3
14089: PUSH
14090: LD_INT 112
14092: EQUAL
14093: IFFALSE 14103
// sStu := true ;
14095: LD_ADDR_EXP 72
14099: PUSH
14100: LD_INT 1
14102: ST_TO_ADDR
// if p3 = 113 then
14103: LD_VAR 0 3
14107: PUSH
14108: LD_INT 113
14110: EQUAL
14111: IFFALSE 14121
// sBazooka := true ;
14113: LD_ADDR_EXP 75
14117: PUSH
14118: LD_INT 1
14120: ST_TO_ADDR
// if p3 = 114 then
14121: LD_VAR 0 3
14125: PUSH
14126: LD_INT 114
14128: EQUAL
14129: IFFALSE 14139
// sMortar := true ;
14131: LD_ADDR_EXP 76
14135: PUSH
14136: LD_INT 1
14138: ST_TO_ADDR
// if p3 = 115 then
14139: LD_VAR 0 3
14143: PUSH
14144: LD_INT 115
14146: EQUAL
14147: IFFALSE 14157
// sRanger := true ;
14149: LD_ADDR_EXP 86
14153: PUSH
14154: LD_INT 1
14156: ST_TO_ADDR
// if p3 = 116 then
14157: LD_VAR 0 3
14161: PUSH
14162: LD_INT 116
14164: EQUAL
14165: IFFALSE 14175
// sComputer := true ;
14167: LD_ADDR_EXP 87
14171: PUSH
14172: LD_INT 1
14174: ST_TO_ADDR
// if p3 = 117 then
14175: LD_VAR 0 3
14179: PUSH
14180: LD_INT 117
14182: EQUAL
14183: IFFALSE 14193
// s30 := true ;
14185: LD_ADDR_EXP 88
14189: PUSH
14190: LD_INT 1
14192: ST_TO_ADDR
// if p3 = 118 then
14193: LD_VAR 0 3
14197: PUSH
14198: LD_INT 118
14200: EQUAL
14201: IFFALSE 14211
// s60 := true ;
14203: LD_ADDR_EXP 89
14207: PUSH
14208: LD_INT 1
14210: ST_TO_ADDR
// end ; if p2 = hack_mode then
14211: LD_VAR 0 2
14215: PUSH
14216: LD_INT 101
14218: EQUAL
14219: IFFALSE 14347
// begin case p3 of 1 :
14221: LD_VAR 0 3
14225: PUSH
14226: LD_INT 1
14228: DOUBLE
14229: EQUAL
14230: IFTRUE 14234
14232: GO 14241
14234: POP
// hHackUnlimitedResources ; 2 :
14235: CALL 26494 0 0
14239: GO 14347
14241: LD_INT 2
14243: DOUBLE
14244: EQUAL
14245: IFTRUE 14249
14247: GO 14256
14249: POP
// hHackSetLevel10 ; 3 :
14250: CALL 26627 0 0
14254: GO 14347
14256: LD_INT 3
14258: DOUBLE
14259: EQUAL
14260: IFTRUE 14264
14262: GO 14271
14264: POP
// hHackSetLevel10YourUnits ; 4 :
14265: CALL 26712 0 0
14269: GO 14347
14271: LD_INT 4
14273: DOUBLE
14274: EQUAL
14275: IFTRUE 14279
14277: GO 14286
14279: POP
// hHackInvincible ; 5 :
14280: CALL 27160 0 0
14284: GO 14347
14286: LD_INT 5
14288: DOUBLE
14289: EQUAL
14290: IFTRUE 14294
14292: GO 14301
14294: POP
// hHackInvisible ; 6 :
14295: CALL 27271 0 0
14299: GO 14347
14301: LD_INT 6
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14316
14309: POP
// hHackChangeYourSide ; 7 :
14310: CALL 27328 0 0
14314: GO 14347
14316: LD_INT 7
14318: DOUBLE
14319: EQUAL
14320: IFTRUE 14324
14322: GO 14331
14324: POP
// hHackChangeUnitSide ; 8 :
14325: CALL 27370 0 0
14329: GO 14347
14331: LD_INT 8
14333: DOUBLE
14334: EQUAL
14335: IFTRUE 14339
14337: GO 14346
14339: POP
// hHackFog ; end ;
14340: CALL 27471 0 0
14344: GO 14347
14346: POP
// end ; if p2 = game_save_mode then
14347: LD_VAR 0 2
14351: PUSH
14352: LD_INT 102
14354: EQUAL
14355: IFFALSE 14410
// begin if p3 = 1 then
14357: LD_VAR 0 3
14361: PUSH
14362: LD_INT 1
14364: EQUAL
14365: IFFALSE 14377
// globalGameSaveCounter := p4 ;
14367: LD_ADDR_EXP 32
14371: PUSH
14372: LD_VAR 0 4
14376: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14377: LD_VAR 0 3
14381: PUSH
14382: LD_INT 2
14384: EQUAL
14385: PUSH
14386: LD_EXP 32
14390: AND
14391: IFFALSE 14410
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14393: LD_STRING setGameSaveCounter(
14395: PUSH
14396: LD_EXP 32
14400: STR
14401: PUSH
14402: LD_STRING )
14404: STR
14405: PPUSH
14406: CALL_OW 559
// end ; end ;
14410: LD_VAR 0 7
14414: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14415: LD_INT 0
14417: PPUSH
// streamModeActive := false ;
14418: LD_ADDR_EXP 33
14422: PUSH
14423: LD_INT 0
14425: ST_TO_ADDR
// normalCounter := 36 ;
14426: LD_ADDR_EXP 34
14430: PUSH
14431: LD_INT 36
14433: ST_TO_ADDR
// hardcoreCounter := 18 ;
14434: LD_ADDR_EXP 35
14438: PUSH
14439: LD_INT 18
14441: ST_TO_ADDR
// sRocket := false ;
14442: LD_ADDR_EXP 38
14446: PUSH
14447: LD_INT 0
14449: ST_TO_ADDR
// sSpeed := false ;
14450: LD_ADDR_EXP 37
14454: PUSH
14455: LD_INT 0
14457: ST_TO_ADDR
// sEngine := false ;
14458: LD_ADDR_EXP 39
14462: PUSH
14463: LD_INT 0
14465: ST_TO_ADDR
// sSpec := false ;
14466: LD_ADDR_EXP 36
14470: PUSH
14471: LD_INT 0
14473: ST_TO_ADDR
// sLevel := false ;
14474: LD_ADDR_EXP 40
14478: PUSH
14479: LD_INT 0
14481: ST_TO_ADDR
// sArmoury := false ;
14482: LD_ADDR_EXP 41
14486: PUSH
14487: LD_INT 0
14489: ST_TO_ADDR
// sRadar := false ;
14490: LD_ADDR_EXP 42
14494: PUSH
14495: LD_INT 0
14497: ST_TO_ADDR
// sBunker := false ;
14498: LD_ADDR_EXP 43
14502: PUSH
14503: LD_INT 0
14505: ST_TO_ADDR
// sHack := false ;
14506: LD_ADDR_EXP 44
14510: PUSH
14511: LD_INT 0
14513: ST_TO_ADDR
// sFire := false ;
14514: LD_ADDR_EXP 45
14518: PUSH
14519: LD_INT 0
14521: ST_TO_ADDR
// sRefresh := false ;
14522: LD_ADDR_EXP 46
14526: PUSH
14527: LD_INT 0
14529: ST_TO_ADDR
// sExp := false ;
14530: LD_ADDR_EXP 47
14534: PUSH
14535: LD_INT 0
14537: ST_TO_ADDR
// sDepot := false ;
14538: LD_ADDR_EXP 48
14542: PUSH
14543: LD_INT 0
14545: ST_TO_ADDR
// sFlag := false ;
14546: LD_ADDR_EXP 49
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// sKamikadze := false ;
14554: LD_ADDR_EXP 57
14558: PUSH
14559: LD_INT 0
14561: ST_TO_ADDR
// sTroll := false ;
14562: LD_ADDR_EXP 58
14566: PUSH
14567: LD_INT 0
14569: ST_TO_ADDR
// sSlow := false ;
14570: LD_ADDR_EXP 59
14574: PUSH
14575: LD_INT 0
14577: ST_TO_ADDR
// sLack := false ;
14578: LD_ADDR_EXP 60
14582: PUSH
14583: LD_INT 0
14585: ST_TO_ADDR
// sTank := false ;
14586: LD_ADDR_EXP 62
14590: PUSH
14591: LD_INT 0
14593: ST_TO_ADDR
// sRemote := false ;
14594: LD_ADDR_EXP 63
14598: PUSH
14599: LD_INT 0
14601: ST_TO_ADDR
// sPowell := false ;
14602: LD_ADDR_EXP 64
14606: PUSH
14607: LD_INT 0
14609: ST_TO_ADDR
// sTeleport := false ;
14610: LD_ADDR_EXP 67
14614: PUSH
14615: LD_INT 0
14617: ST_TO_ADDR
// sOilTower := false ;
14618: LD_ADDR_EXP 69
14622: PUSH
14623: LD_INT 0
14625: ST_TO_ADDR
// sShovel := false ;
14626: LD_ADDR_EXP 70
14630: PUSH
14631: LD_INT 0
14633: ST_TO_ADDR
// sSheik := false ;
14634: LD_ADDR_EXP 71
14638: PUSH
14639: LD_INT 0
14641: ST_TO_ADDR
// sEarthquake := false ;
14642: LD_ADDR_EXP 73
14646: PUSH
14647: LD_INT 0
14649: ST_TO_ADDR
// sAI := false ;
14650: LD_ADDR_EXP 74
14654: PUSH
14655: LD_INT 0
14657: ST_TO_ADDR
// sCargo := false ;
14658: LD_ADDR_EXP 77
14662: PUSH
14663: LD_INT 0
14665: ST_TO_ADDR
// sDLaser := false ;
14666: LD_ADDR_EXP 78
14670: PUSH
14671: LD_INT 0
14673: ST_TO_ADDR
// sExchange := false ;
14674: LD_ADDR_EXP 79
14678: PUSH
14679: LD_INT 0
14681: ST_TO_ADDR
// sFac := false ;
14682: LD_ADDR_EXP 80
14686: PUSH
14687: LD_INT 0
14689: ST_TO_ADDR
// sPower := false ;
14690: LD_ADDR_EXP 81
14694: PUSH
14695: LD_INT 0
14697: ST_TO_ADDR
// sRandom := false ;
14698: LD_ADDR_EXP 82
14702: PUSH
14703: LD_INT 0
14705: ST_TO_ADDR
// sShield := false ;
14706: LD_ADDR_EXP 83
14710: PUSH
14711: LD_INT 0
14713: ST_TO_ADDR
// sTime := false ;
14714: LD_ADDR_EXP 84
14718: PUSH
14719: LD_INT 0
14721: ST_TO_ADDR
// sTools := false ;
14722: LD_ADDR_EXP 85
14726: PUSH
14727: LD_INT 0
14729: ST_TO_ADDR
// sSold := false ;
14730: LD_ADDR_EXP 50
14734: PUSH
14735: LD_INT 0
14737: ST_TO_ADDR
// sDiff := false ;
14738: LD_ADDR_EXP 51
14742: PUSH
14743: LD_INT 0
14745: ST_TO_ADDR
// sFog := false ;
14746: LD_ADDR_EXP 54
14750: PUSH
14751: LD_INT 0
14753: ST_TO_ADDR
// sReset := false ;
14754: LD_ADDR_EXP 55
14758: PUSH
14759: LD_INT 0
14761: ST_TO_ADDR
// sSun := false ;
14762: LD_ADDR_EXP 56
14766: PUSH
14767: LD_INT 0
14769: ST_TO_ADDR
// sTiger := false ;
14770: LD_ADDR_EXP 52
14774: PUSH
14775: LD_INT 0
14777: ST_TO_ADDR
// sBomb := false ;
14778: LD_ADDR_EXP 53
14782: PUSH
14783: LD_INT 0
14785: ST_TO_ADDR
// sWound := false ;
14786: LD_ADDR_EXP 61
14790: PUSH
14791: LD_INT 0
14793: ST_TO_ADDR
// sBetray := false ;
14794: LD_ADDR_EXP 65
14798: PUSH
14799: LD_INT 0
14801: ST_TO_ADDR
// sContamin := false ;
14802: LD_ADDR_EXP 66
14806: PUSH
14807: LD_INT 0
14809: ST_TO_ADDR
// sOil := false ;
14810: LD_ADDR_EXP 68
14814: PUSH
14815: LD_INT 0
14817: ST_TO_ADDR
// sStu := false ;
14818: LD_ADDR_EXP 72
14822: PUSH
14823: LD_INT 0
14825: ST_TO_ADDR
// sBazooka := false ;
14826: LD_ADDR_EXP 75
14830: PUSH
14831: LD_INT 0
14833: ST_TO_ADDR
// sMortar := false ;
14834: LD_ADDR_EXP 76
14838: PUSH
14839: LD_INT 0
14841: ST_TO_ADDR
// sRanger := false ;
14842: LD_ADDR_EXP 86
14846: PUSH
14847: LD_INT 0
14849: ST_TO_ADDR
// sComputer := false ;
14850: LD_ADDR_EXP 87
14854: PUSH
14855: LD_INT 0
14857: ST_TO_ADDR
// s30 := false ;
14858: LD_ADDR_EXP 88
14862: PUSH
14863: LD_INT 0
14865: ST_TO_ADDR
// s60 := false ;
14866: LD_ADDR_EXP 89
14870: PUSH
14871: LD_INT 0
14873: ST_TO_ADDR
// end ;
14874: LD_VAR 0 1
14878: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14879: LD_INT 0
14881: PPUSH
14882: PPUSH
14883: PPUSH
14884: PPUSH
14885: PPUSH
14886: PPUSH
14887: PPUSH
// result := [ ] ;
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: EMPTY
14894: ST_TO_ADDR
// if campaign_id = 1 then
14895: LD_OWVAR 69
14899: PUSH
14900: LD_INT 1
14902: EQUAL
14903: IFFALSE 18069
// begin case mission_number of 1 :
14905: LD_OWVAR 70
14909: PUSH
14910: LD_INT 1
14912: DOUBLE
14913: EQUAL
14914: IFTRUE 14918
14916: GO 14994
14918: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: LD_INT 4
14929: PUSH
14930: LD_INT 11
14932: PUSH
14933: LD_INT 12
14935: PUSH
14936: LD_INT 15
14938: PUSH
14939: LD_INT 16
14941: PUSH
14942: LD_INT 22
14944: PUSH
14945: LD_INT 23
14947: PUSH
14948: LD_INT 26
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: PUSH
14962: LD_INT 101
14964: PUSH
14965: LD_INT 102
14967: PUSH
14968: LD_INT 106
14970: PUSH
14971: LD_INT 116
14973: PUSH
14974: LD_INT 117
14976: PUSH
14977: LD_INT 118
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: PUSH
14988: EMPTY
14989: LIST
14990: LIST
14991: ST_TO_ADDR
14992: GO 18067
14994: LD_INT 2
14996: DOUBLE
14997: EQUAL
14998: IFTRUE 15002
15000: GO 15086
15002: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_INT 2
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 11
15016: PUSH
15017: LD_INT 12
15019: PUSH
15020: LD_INT 15
15022: PUSH
15023: LD_INT 16
15025: PUSH
15026: LD_INT 22
15028: PUSH
15029: LD_INT 23
15031: PUSH
15032: LD_INT 26
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: PUSH
15046: LD_INT 101
15048: PUSH
15049: LD_INT 102
15051: PUSH
15052: LD_INT 105
15054: PUSH
15055: LD_INT 106
15057: PUSH
15058: LD_INT 108
15060: PUSH
15061: LD_INT 116
15063: PUSH
15064: LD_INT 117
15066: PUSH
15067: LD_INT 118
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: ST_TO_ADDR
15084: GO 18067
15086: LD_INT 3
15088: DOUBLE
15089: EQUAL
15090: IFTRUE 15094
15092: GO 15182
15094: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15095: LD_ADDR_VAR 0 2
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: LD_INT 4
15105: PUSH
15106: LD_INT 5
15108: PUSH
15109: LD_INT 11
15111: PUSH
15112: LD_INT 12
15114: PUSH
15115: LD_INT 15
15117: PUSH
15118: LD_INT 16
15120: PUSH
15121: LD_INT 22
15123: PUSH
15124: LD_INT 26
15126: PUSH
15127: LD_INT 36
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 101
15144: PUSH
15145: LD_INT 102
15147: PUSH
15148: LD_INT 105
15150: PUSH
15151: LD_INT 106
15153: PUSH
15154: LD_INT 108
15156: PUSH
15157: LD_INT 116
15159: PUSH
15160: LD_INT 117
15162: PUSH
15163: LD_INT 118
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 18067
15182: LD_INT 4
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15286
15190: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15191: LD_ADDR_VAR 0 2
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: LD_INT 5
15204: PUSH
15205: LD_INT 8
15207: PUSH
15208: LD_INT 11
15210: PUSH
15211: LD_INT 12
15213: PUSH
15214: LD_INT 15
15216: PUSH
15217: LD_INT 16
15219: PUSH
15220: LD_INT 22
15222: PUSH
15223: LD_INT 23
15225: PUSH
15226: LD_INT 26
15228: PUSH
15229: LD_INT 36
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 101
15248: PUSH
15249: LD_INT 102
15251: PUSH
15252: LD_INT 105
15254: PUSH
15255: LD_INT 106
15257: PUSH
15258: LD_INT 108
15260: PUSH
15261: LD_INT 116
15263: PUSH
15264: LD_INT 117
15266: PUSH
15267: LD_INT 118
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: ST_TO_ADDR
15284: GO 18067
15286: LD_INT 5
15288: DOUBLE
15289: EQUAL
15290: IFTRUE 15294
15292: GO 15406
15294: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15295: LD_ADDR_VAR 0 2
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: LD_INT 4
15305: PUSH
15306: LD_INT 5
15308: PUSH
15309: LD_INT 6
15311: PUSH
15312: LD_INT 8
15314: PUSH
15315: LD_INT 11
15317: PUSH
15318: LD_INT 12
15320: PUSH
15321: LD_INT 15
15323: PUSH
15324: LD_INT 16
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 23
15332: PUSH
15333: LD_INT 25
15335: PUSH
15336: LD_INT 26
15338: PUSH
15339: LD_INT 36
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 101
15360: PUSH
15361: LD_INT 102
15363: PUSH
15364: LD_INT 105
15366: PUSH
15367: LD_INT 106
15369: PUSH
15370: LD_INT 108
15372: PUSH
15373: LD_INT 109
15375: PUSH
15376: LD_INT 112
15378: PUSH
15379: LD_INT 116
15381: PUSH
15382: LD_INT 117
15384: PUSH
15385: LD_INT 118
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: ST_TO_ADDR
15404: GO 18067
15406: LD_INT 6
15408: DOUBLE
15409: EQUAL
15410: IFTRUE 15414
15412: GO 15546
15414: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15415: LD_ADDR_VAR 0 2
15419: PUSH
15420: LD_INT 2
15422: PUSH
15423: LD_INT 4
15425: PUSH
15426: LD_INT 5
15428: PUSH
15429: LD_INT 6
15431: PUSH
15432: LD_INT 8
15434: PUSH
15435: LD_INT 11
15437: PUSH
15438: LD_INT 12
15440: PUSH
15441: LD_INT 15
15443: PUSH
15444: LD_INT 16
15446: PUSH
15447: LD_INT 20
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_INT 23
15458: PUSH
15459: LD_INT 25
15461: PUSH
15462: LD_INT 26
15464: PUSH
15465: LD_INT 30
15467: PUSH
15468: LD_INT 31
15470: PUSH
15471: LD_INT 32
15473: PUSH
15474: LD_INT 36
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 101
15500: PUSH
15501: LD_INT 102
15503: PUSH
15504: LD_INT 105
15506: PUSH
15507: LD_INT 106
15509: PUSH
15510: LD_INT 108
15512: PUSH
15513: LD_INT 109
15515: PUSH
15516: LD_INT 112
15518: PUSH
15519: LD_INT 116
15521: PUSH
15522: LD_INT 117
15524: PUSH
15525: LD_INT 118
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: ST_TO_ADDR
15544: GO 18067
15546: LD_INT 7
15548: DOUBLE
15549: EQUAL
15550: IFTRUE 15554
15552: GO 15666
15554: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15555: LD_ADDR_VAR 0 2
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: LD_INT 4
15565: PUSH
15566: LD_INT 5
15568: PUSH
15569: LD_INT 7
15571: PUSH
15572: LD_INT 11
15574: PUSH
15575: LD_INT 12
15577: PUSH
15578: LD_INT 15
15580: PUSH
15581: LD_INT 16
15583: PUSH
15584: LD_INT 20
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 22
15592: PUSH
15593: LD_INT 23
15595: PUSH
15596: LD_INT 25
15598: PUSH
15599: LD_INT 26
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 101
15620: PUSH
15621: LD_INT 102
15623: PUSH
15624: LD_INT 103
15626: PUSH
15627: LD_INT 105
15629: PUSH
15630: LD_INT 106
15632: PUSH
15633: LD_INT 108
15635: PUSH
15636: LD_INT 112
15638: PUSH
15639: LD_INT 116
15641: PUSH
15642: LD_INT 117
15644: PUSH
15645: LD_INT 118
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: ST_TO_ADDR
15664: GO 18067
15666: LD_INT 8
15668: DOUBLE
15669: EQUAL
15670: IFTRUE 15674
15672: GO 15814
15674: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15675: LD_ADDR_VAR 0 2
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: LD_INT 4
15685: PUSH
15686: LD_INT 5
15688: PUSH
15689: LD_INT 6
15691: PUSH
15692: LD_INT 7
15694: PUSH
15695: LD_INT 8
15697: PUSH
15698: LD_INT 11
15700: PUSH
15701: LD_INT 12
15703: PUSH
15704: LD_INT 15
15706: PUSH
15707: LD_INT 16
15709: PUSH
15710: LD_INT 20
15712: PUSH
15713: LD_INT 21
15715: PUSH
15716: LD_INT 22
15718: PUSH
15719: LD_INT 23
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 26
15727: PUSH
15728: LD_INT 30
15730: PUSH
15731: LD_INT 31
15733: PUSH
15734: LD_INT 32
15736: PUSH
15737: LD_INT 36
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 101
15764: PUSH
15765: LD_INT 102
15767: PUSH
15768: LD_INT 103
15770: PUSH
15771: LD_INT 105
15773: PUSH
15774: LD_INT 106
15776: PUSH
15777: LD_INT 108
15779: PUSH
15780: LD_INT 109
15782: PUSH
15783: LD_INT 112
15785: PUSH
15786: LD_INT 116
15788: PUSH
15789: LD_INT 117
15791: PUSH
15792: LD_INT 118
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: ST_TO_ADDR
15812: GO 18067
15814: LD_INT 9
15816: DOUBLE
15817: EQUAL
15818: IFTRUE 15822
15820: GO 15970
15822: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15823: LD_ADDR_VAR 0 2
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 4
15833: PUSH
15834: LD_INT 5
15836: PUSH
15837: LD_INT 6
15839: PUSH
15840: LD_INT 7
15842: PUSH
15843: LD_INT 8
15845: PUSH
15846: LD_INT 11
15848: PUSH
15849: LD_INT 12
15851: PUSH
15852: LD_INT 15
15854: PUSH
15855: LD_INT 16
15857: PUSH
15858: LD_INT 20
15860: PUSH
15861: LD_INT 21
15863: PUSH
15864: LD_INT 22
15866: PUSH
15867: LD_INT 23
15869: PUSH
15870: LD_INT 25
15872: PUSH
15873: LD_INT 26
15875: PUSH
15876: LD_INT 28
15878: PUSH
15879: LD_INT 30
15881: PUSH
15882: LD_INT 31
15884: PUSH
15885: LD_INT 32
15887: PUSH
15888: LD_INT 36
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 101
15916: PUSH
15917: LD_INT 102
15919: PUSH
15920: LD_INT 103
15922: PUSH
15923: LD_INT 105
15925: PUSH
15926: LD_INT 106
15928: PUSH
15929: LD_INT 108
15931: PUSH
15932: LD_INT 109
15934: PUSH
15935: LD_INT 112
15937: PUSH
15938: LD_INT 114
15940: PUSH
15941: LD_INT 116
15943: PUSH
15944: LD_INT 117
15946: PUSH
15947: LD_INT 118
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: ST_TO_ADDR
15968: GO 18067
15970: LD_INT 10
15972: DOUBLE
15973: EQUAL
15974: IFTRUE 15978
15976: GO 16174
15978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: LD_INT 2
15986: PUSH
15987: LD_INT 4
15989: PUSH
15990: LD_INT 5
15992: PUSH
15993: LD_INT 6
15995: PUSH
15996: LD_INT 7
15998: PUSH
15999: LD_INT 8
16001: PUSH
16002: LD_INT 9
16004: PUSH
16005: LD_INT 10
16007: PUSH
16008: LD_INT 11
16010: PUSH
16011: LD_INT 12
16013: PUSH
16014: LD_INT 13
16016: PUSH
16017: LD_INT 14
16019: PUSH
16020: LD_INT 15
16022: PUSH
16023: LD_INT 16
16025: PUSH
16026: LD_INT 17
16028: PUSH
16029: LD_INT 18
16031: PUSH
16032: LD_INT 19
16034: PUSH
16035: LD_INT 20
16037: PUSH
16038: LD_INT 21
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_INT 23
16046: PUSH
16047: LD_INT 24
16049: PUSH
16050: LD_INT 25
16052: PUSH
16053: LD_INT 26
16055: PUSH
16056: LD_INT 28
16058: PUSH
16059: LD_INT 30
16061: PUSH
16062: LD_INT 31
16064: PUSH
16065: LD_INT 32
16067: PUSH
16068: LD_INT 36
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 101
16104: PUSH
16105: LD_INT 102
16107: PUSH
16108: LD_INT 103
16110: PUSH
16111: LD_INT 104
16113: PUSH
16114: LD_INT 105
16116: PUSH
16117: LD_INT 106
16119: PUSH
16120: LD_INT 107
16122: PUSH
16123: LD_INT 108
16125: PUSH
16126: LD_INT 109
16128: PUSH
16129: LD_INT 110
16131: PUSH
16132: LD_INT 111
16134: PUSH
16135: LD_INT 112
16137: PUSH
16138: LD_INT 114
16140: PUSH
16141: LD_INT 116
16143: PUSH
16144: LD_INT 117
16146: PUSH
16147: LD_INT 118
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: ST_TO_ADDR
16172: GO 18067
16174: LD_INT 11
16176: DOUBLE
16177: EQUAL
16178: IFTRUE 16182
16180: GO 16386
16182: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16183: LD_ADDR_VAR 0 2
16187: PUSH
16188: LD_INT 2
16190: PUSH
16191: LD_INT 3
16193: PUSH
16194: LD_INT 4
16196: PUSH
16197: LD_INT 5
16199: PUSH
16200: LD_INT 6
16202: PUSH
16203: LD_INT 7
16205: PUSH
16206: LD_INT 8
16208: PUSH
16209: LD_INT 9
16211: PUSH
16212: LD_INT 10
16214: PUSH
16215: LD_INT 11
16217: PUSH
16218: LD_INT 12
16220: PUSH
16221: LD_INT 13
16223: PUSH
16224: LD_INT 14
16226: PUSH
16227: LD_INT 15
16229: PUSH
16230: LD_INT 16
16232: PUSH
16233: LD_INT 17
16235: PUSH
16236: LD_INT 18
16238: PUSH
16239: LD_INT 19
16241: PUSH
16242: LD_INT 20
16244: PUSH
16245: LD_INT 21
16247: PUSH
16248: LD_INT 22
16250: PUSH
16251: LD_INT 23
16253: PUSH
16254: LD_INT 24
16256: PUSH
16257: LD_INT 25
16259: PUSH
16260: LD_INT 26
16262: PUSH
16263: LD_INT 28
16265: PUSH
16266: LD_INT 30
16268: PUSH
16269: LD_INT 31
16271: PUSH
16272: LD_INT 32
16274: PUSH
16275: LD_INT 34
16277: PUSH
16278: LD_INT 36
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: PUSH
16314: LD_INT 101
16316: PUSH
16317: LD_INT 102
16319: PUSH
16320: LD_INT 103
16322: PUSH
16323: LD_INT 104
16325: PUSH
16326: LD_INT 105
16328: PUSH
16329: LD_INT 106
16331: PUSH
16332: LD_INT 107
16334: PUSH
16335: LD_INT 108
16337: PUSH
16338: LD_INT 109
16340: PUSH
16341: LD_INT 110
16343: PUSH
16344: LD_INT 111
16346: PUSH
16347: LD_INT 112
16349: PUSH
16350: LD_INT 114
16352: PUSH
16353: LD_INT 116
16355: PUSH
16356: LD_INT 117
16358: PUSH
16359: LD_INT 118
16361: PUSH
16362: EMPTY
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: ST_TO_ADDR
16384: GO 18067
16386: LD_INT 12
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16614
16394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16395: LD_ADDR_VAR 0 2
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 3
16408: PUSH
16409: LD_INT 4
16411: PUSH
16412: LD_INT 5
16414: PUSH
16415: LD_INT 6
16417: PUSH
16418: LD_INT 7
16420: PUSH
16421: LD_INT 8
16423: PUSH
16424: LD_INT 9
16426: PUSH
16427: LD_INT 10
16429: PUSH
16430: LD_INT 11
16432: PUSH
16433: LD_INT 12
16435: PUSH
16436: LD_INT 13
16438: PUSH
16439: LD_INT 14
16441: PUSH
16442: LD_INT 15
16444: PUSH
16445: LD_INT 16
16447: PUSH
16448: LD_INT 17
16450: PUSH
16451: LD_INT 18
16453: PUSH
16454: LD_INT 19
16456: PUSH
16457: LD_INT 20
16459: PUSH
16460: LD_INT 21
16462: PUSH
16463: LD_INT 22
16465: PUSH
16466: LD_INT 23
16468: PUSH
16469: LD_INT 24
16471: PUSH
16472: LD_INT 25
16474: PUSH
16475: LD_INT 26
16477: PUSH
16478: LD_INT 27
16480: PUSH
16481: LD_INT 28
16483: PUSH
16484: LD_INT 30
16486: PUSH
16487: LD_INT 31
16489: PUSH
16490: LD_INT 32
16492: PUSH
16493: LD_INT 33
16495: PUSH
16496: LD_INT 34
16498: PUSH
16499: LD_INT 36
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 101
16540: PUSH
16541: LD_INT 102
16543: PUSH
16544: LD_INT 103
16546: PUSH
16547: LD_INT 104
16549: PUSH
16550: LD_INT 105
16552: PUSH
16553: LD_INT 106
16555: PUSH
16556: LD_INT 107
16558: PUSH
16559: LD_INT 108
16561: PUSH
16562: LD_INT 109
16564: PUSH
16565: LD_INT 110
16567: PUSH
16568: LD_INT 111
16570: PUSH
16571: LD_INT 112
16573: PUSH
16574: LD_INT 113
16576: PUSH
16577: LD_INT 114
16579: PUSH
16580: LD_INT 116
16582: PUSH
16583: LD_INT 117
16585: PUSH
16586: LD_INT 118
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: ST_TO_ADDR
16612: GO 18067
16614: LD_INT 13
16616: DOUBLE
16617: EQUAL
16618: IFTRUE 16622
16620: GO 16830
16622: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16623: LD_ADDR_VAR 0 2
16627: PUSH
16628: LD_INT 1
16630: PUSH
16631: LD_INT 2
16633: PUSH
16634: LD_INT 3
16636: PUSH
16637: LD_INT 4
16639: PUSH
16640: LD_INT 5
16642: PUSH
16643: LD_INT 8
16645: PUSH
16646: LD_INT 9
16648: PUSH
16649: LD_INT 10
16651: PUSH
16652: LD_INT 11
16654: PUSH
16655: LD_INT 12
16657: PUSH
16658: LD_INT 14
16660: PUSH
16661: LD_INT 15
16663: PUSH
16664: LD_INT 16
16666: PUSH
16667: LD_INT 17
16669: PUSH
16670: LD_INT 18
16672: PUSH
16673: LD_INT 19
16675: PUSH
16676: LD_INT 20
16678: PUSH
16679: LD_INT 21
16681: PUSH
16682: LD_INT 22
16684: PUSH
16685: LD_INT 23
16687: PUSH
16688: LD_INT 24
16690: PUSH
16691: LD_INT 25
16693: PUSH
16694: LD_INT 26
16696: PUSH
16697: LD_INT 27
16699: PUSH
16700: LD_INT 28
16702: PUSH
16703: LD_INT 30
16705: PUSH
16706: LD_INT 31
16708: PUSH
16709: LD_INT 32
16711: PUSH
16712: LD_INT 33
16714: PUSH
16715: LD_INT 34
16717: PUSH
16718: LD_INT 36
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 101
16756: PUSH
16757: LD_INT 102
16759: PUSH
16760: LD_INT 103
16762: PUSH
16763: LD_INT 104
16765: PUSH
16766: LD_INT 105
16768: PUSH
16769: LD_INT 106
16771: PUSH
16772: LD_INT 107
16774: PUSH
16775: LD_INT 108
16777: PUSH
16778: LD_INT 109
16780: PUSH
16781: LD_INT 110
16783: PUSH
16784: LD_INT 111
16786: PUSH
16787: LD_INT 112
16789: PUSH
16790: LD_INT 113
16792: PUSH
16793: LD_INT 114
16795: PUSH
16796: LD_INT 116
16798: PUSH
16799: LD_INT 117
16801: PUSH
16802: LD_INT 118
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: ST_TO_ADDR
16828: GO 18067
16830: LD_INT 14
16832: DOUBLE
16833: EQUAL
16834: IFTRUE 16838
16836: GO 17062
16838: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16839: LD_ADDR_VAR 0 2
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: LD_INT 2
16849: PUSH
16850: LD_INT 3
16852: PUSH
16853: LD_INT 4
16855: PUSH
16856: LD_INT 5
16858: PUSH
16859: LD_INT 6
16861: PUSH
16862: LD_INT 7
16864: PUSH
16865: LD_INT 8
16867: PUSH
16868: LD_INT 9
16870: PUSH
16871: LD_INT 10
16873: PUSH
16874: LD_INT 11
16876: PUSH
16877: LD_INT 12
16879: PUSH
16880: LD_INT 13
16882: PUSH
16883: LD_INT 14
16885: PUSH
16886: LD_INT 15
16888: PUSH
16889: LD_INT 16
16891: PUSH
16892: LD_INT 17
16894: PUSH
16895: LD_INT 18
16897: PUSH
16898: LD_INT 19
16900: PUSH
16901: LD_INT 20
16903: PUSH
16904: LD_INT 21
16906: PUSH
16907: LD_INT 22
16909: PUSH
16910: LD_INT 23
16912: PUSH
16913: LD_INT 24
16915: PUSH
16916: LD_INT 25
16918: PUSH
16919: LD_INT 26
16921: PUSH
16922: LD_INT 27
16924: PUSH
16925: LD_INT 28
16927: PUSH
16928: LD_INT 29
16930: PUSH
16931: LD_INT 30
16933: PUSH
16934: LD_INT 31
16936: PUSH
16937: LD_INT 32
16939: PUSH
16940: LD_INT 33
16942: PUSH
16943: LD_INT 34
16945: PUSH
16946: LD_INT 36
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: PUSH
16986: LD_INT 101
16988: PUSH
16989: LD_INT 102
16991: PUSH
16992: LD_INT 103
16994: PUSH
16995: LD_INT 104
16997: PUSH
16998: LD_INT 105
17000: PUSH
17001: LD_INT 106
17003: PUSH
17004: LD_INT 107
17006: PUSH
17007: LD_INT 108
17009: PUSH
17010: LD_INT 109
17012: PUSH
17013: LD_INT 110
17015: PUSH
17016: LD_INT 111
17018: PUSH
17019: LD_INT 112
17021: PUSH
17022: LD_INT 113
17024: PUSH
17025: LD_INT 114
17027: PUSH
17028: LD_INT 116
17030: PUSH
17031: LD_INT 117
17033: PUSH
17034: LD_INT 118
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: ST_TO_ADDR
17060: GO 18067
17062: LD_INT 15
17064: DOUBLE
17065: EQUAL
17066: IFTRUE 17070
17068: GO 17294
17070: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17071: LD_ADDR_VAR 0 2
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: LD_INT 3
17084: PUSH
17085: LD_INT 4
17087: PUSH
17088: LD_INT 5
17090: PUSH
17091: LD_INT 6
17093: PUSH
17094: LD_INT 7
17096: PUSH
17097: LD_INT 8
17099: PUSH
17100: LD_INT 9
17102: PUSH
17103: LD_INT 10
17105: PUSH
17106: LD_INT 11
17108: PUSH
17109: LD_INT 12
17111: PUSH
17112: LD_INT 13
17114: PUSH
17115: LD_INT 14
17117: PUSH
17118: LD_INT 15
17120: PUSH
17121: LD_INT 16
17123: PUSH
17124: LD_INT 17
17126: PUSH
17127: LD_INT 18
17129: PUSH
17130: LD_INT 19
17132: PUSH
17133: LD_INT 20
17135: PUSH
17136: LD_INT 21
17138: PUSH
17139: LD_INT 22
17141: PUSH
17142: LD_INT 23
17144: PUSH
17145: LD_INT 24
17147: PUSH
17148: LD_INT 25
17150: PUSH
17151: LD_INT 26
17153: PUSH
17154: LD_INT 27
17156: PUSH
17157: LD_INT 28
17159: PUSH
17160: LD_INT 29
17162: PUSH
17163: LD_INT 30
17165: PUSH
17166: LD_INT 31
17168: PUSH
17169: LD_INT 32
17171: PUSH
17172: LD_INT 33
17174: PUSH
17175: LD_INT 34
17177: PUSH
17178: LD_INT 36
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 101
17220: PUSH
17221: LD_INT 102
17223: PUSH
17224: LD_INT 103
17226: PUSH
17227: LD_INT 104
17229: PUSH
17230: LD_INT 105
17232: PUSH
17233: LD_INT 106
17235: PUSH
17236: LD_INT 107
17238: PUSH
17239: LD_INT 108
17241: PUSH
17242: LD_INT 109
17244: PUSH
17245: LD_INT 110
17247: PUSH
17248: LD_INT 111
17250: PUSH
17251: LD_INT 112
17253: PUSH
17254: LD_INT 113
17256: PUSH
17257: LD_INT 114
17259: PUSH
17260: LD_INT 116
17262: PUSH
17263: LD_INT 117
17265: PUSH
17266: LD_INT 118
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: ST_TO_ADDR
17292: GO 18067
17294: LD_INT 16
17296: DOUBLE
17297: EQUAL
17298: IFTRUE 17302
17300: GO 17438
17302: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17303: LD_ADDR_VAR 0 2
17307: PUSH
17308: LD_INT 2
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 7
17319: PUSH
17320: LD_INT 11
17322: PUSH
17323: LD_INT 12
17325: PUSH
17326: LD_INT 15
17328: PUSH
17329: LD_INT 16
17331: PUSH
17332: LD_INT 20
17334: PUSH
17335: LD_INT 21
17337: PUSH
17338: LD_INT 22
17340: PUSH
17341: LD_INT 23
17343: PUSH
17344: LD_INT 25
17346: PUSH
17347: LD_INT 26
17349: PUSH
17350: LD_INT 30
17352: PUSH
17353: LD_INT 31
17355: PUSH
17356: LD_INT 32
17358: PUSH
17359: LD_INT 33
17361: PUSH
17362: LD_INT 34
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 101
17388: PUSH
17389: LD_INT 102
17391: PUSH
17392: LD_INT 103
17394: PUSH
17395: LD_INT 106
17397: PUSH
17398: LD_INT 108
17400: PUSH
17401: LD_INT 112
17403: PUSH
17404: LD_INT 113
17406: PUSH
17407: LD_INT 114
17409: PUSH
17410: LD_INT 116
17412: PUSH
17413: LD_INT 117
17415: PUSH
17416: LD_INT 118
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: ST_TO_ADDR
17436: GO 18067
17438: LD_INT 17
17440: DOUBLE
17441: EQUAL
17442: IFTRUE 17446
17444: GO 17670
17446: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17447: LD_ADDR_VAR 0 2
17451: PUSH
17452: LD_INT 1
17454: PUSH
17455: LD_INT 2
17457: PUSH
17458: LD_INT 3
17460: PUSH
17461: LD_INT 4
17463: PUSH
17464: LD_INT 5
17466: PUSH
17467: LD_INT 6
17469: PUSH
17470: LD_INT 7
17472: PUSH
17473: LD_INT 8
17475: PUSH
17476: LD_INT 9
17478: PUSH
17479: LD_INT 10
17481: PUSH
17482: LD_INT 11
17484: PUSH
17485: LD_INT 12
17487: PUSH
17488: LD_INT 13
17490: PUSH
17491: LD_INT 14
17493: PUSH
17494: LD_INT 15
17496: PUSH
17497: LD_INT 16
17499: PUSH
17500: LD_INT 17
17502: PUSH
17503: LD_INT 18
17505: PUSH
17506: LD_INT 19
17508: PUSH
17509: LD_INT 20
17511: PUSH
17512: LD_INT 21
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_INT 23
17520: PUSH
17521: LD_INT 24
17523: PUSH
17524: LD_INT 25
17526: PUSH
17527: LD_INT 26
17529: PUSH
17530: LD_INT 27
17532: PUSH
17533: LD_INT 28
17535: PUSH
17536: LD_INT 29
17538: PUSH
17539: LD_INT 30
17541: PUSH
17542: LD_INT 31
17544: PUSH
17545: LD_INT 32
17547: PUSH
17548: LD_INT 33
17550: PUSH
17551: LD_INT 34
17553: PUSH
17554: LD_INT 36
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 101
17596: PUSH
17597: LD_INT 102
17599: PUSH
17600: LD_INT 103
17602: PUSH
17603: LD_INT 104
17605: PUSH
17606: LD_INT 105
17608: PUSH
17609: LD_INT 106
17611: PUSH
17612: LD_INT 107
17614: PUSH
17615: LD_INT 108
17617: PUSH
17618: LD_INT 109
17620: PUSH
17621: LD_INT 110
17623: PUSH
17624: LD_INT 111
17626: PUSH
17627: LD_INT 112
17629: PUSH
17630: LD_INT 113
17632: PUSH
17633: LD_INT 114
17635: PUSH
17636: LD_INT 116
17638: PUSH
17639: LD_INT 117
17641: PUSH
17642: LD_INT 118
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: ST_TO_ADDR
17668: GO 18067
17670: LD_INT 18
17672: DOUBLE
17673: EQUAL
17674: IFTRUE 17678
17676: GO 17826
17678: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17679: LD_ADDR_VAR 0 2
17683: PUSH
17684: LD_INT 2
17686: PUSH
17687: LD_INT 4
17689: PUSH
17690: LD_INT 5
17692: PUSH
17693: LD_INT 7
17695: PUSH
17696: LD_INT 11
17698: PUSH
17699: LD_INT 12
17701: PUSH
17702: LD_INT 15
17704: PUSH
17705: LD_INT 16
17707: PUSH
17708: LD_INT 20
17710: PUSH
17711: LD_INT 21
17713: PUSH
17714: LD_INT 22
17716: PUSH
17717: LD_INT 23
17719: PUSH
17720: LD_INT 25
17722: PUSH
17723: LD_INT 26
17725: PUSH
17726: LD_INT 30
17728: PUSH
17729: LD_INT 31
17731: PUSH
17732: LD_INT 32
17734: PUSH
17735: LD_INT 33
17737: PUSH
17738: LD_INT 34
17740: PUSH
17741: LD_INT 35
17743: PUSH
17744: LD_INT 36
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 101
17772: PUSH
17773: LD_INT 102
17775: PUSH
17776: LD_INT 103
17778: PUSH
17779: LD_INT 106
17781: PUSH
17782: LD_INT 108
17784: PUSH
17785: LD_INT 112
17787: PUSH
17788: LD_INT 113
17790: PUSH
17791: LD_INT 114
17793: PUSH
17794: LD_INT 115
17796: PUSH
17797: LD_INT 116
17799: PUSH
17800: LD_INT 117
17802: PUSH
17803: LD_INT 118
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: ST_TO_ADDR
17824: GO 18067
17826: LD_INT 19
17828: DOUBLE
17829: EQUAL
17830: IFTRUE 17834
17832: GO 18066
17834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17835: LD_ADDR_VAR 0 2
17839: PUSH
17840: LD_INT 1
17842: PUSH
17843: LD_INT 2
17845: PUSH
17846: LD_INT 3
17848: PUSH
17849: LD_INT 4
17851: PUSH
17852: LD_INT 5
17854: PUSH
17855: LD_INT 6
17857: PUSH
17858: LD_INT 7
17860: PUSH
17861: LD_INT 8
17863: PUSH
17864: LD_INT 9
17866: PUSH
17867: LD_INT 10
17869: PUSH
17870: LD_INT 11
17872: PUSH
17873: LD_INT 12
17875: PUSH
17876: LD_INT 13
17878: PUSH
17879: LD_INT 14
17881: PUSH
17882: LD_INT 15
17884: PUSH
17885: LD_INT 16
17887: PUSH
17888: LD_INT 17
17890: PUSH
17891: LD_INT 18
17893: PUSH
17894: LD_INT 19
17896: PUSH
17897: LD_INT 20
17899: PUSH
17900: LD_INT 21
17902: PUSH
17903: LD_INT 22
17905: PUSH
17906: LD_INT 23
17908: PUSH
17909: LD_INT 24
17911: PUSH
17912: LD_INT 25
17914: PUSH
17915: LD_INT 26
17917: PUSH
17918: LD_INT 27
17920: PUSH
17921: LD_INT 28
17923: PUSH
17924: LD_INT 29
17926: PUSH
17927: LD_INT 30
17929: PUSH
17930: LD_INT 31
17932: PUSH
17933: LD_INT 32
17935: PUSH
17936: LD_INT 33
17938: PUSH
17939: LD_INT 34
17941: PUSH
17942: LD_INT 35
17944: PUSH
17945: LD_INT 36
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 101
17988: PUSH
17989: LD_INT 102
17991: PUSH
17992: LD_INT 103
17994: PUSH
17995: LD_INT 104
17997: PUSH
17998: LD_INT 105
18000: PUSH
18001: LD_INT 106
18003: PUSH
18004: LD_INT 107
18006: PUSH
18007: LD_INT 108
18009: PUSH
18010: LD_INT 109
18012: PUSH
18013: LD_INT 110
18015: PUSH
18016: LD_INT 111
18018: PUSH
18019: LD_INT 112
18021: PUSH
18022: LD_INT 113
18024: PUSH
18025: LD_INT 114
18027: PUSH
18028: LD_INT 115
18030: PUSH
18031: LD_INT 116
18033: PUSH
18034: LD_INT 117
18036: PUSH
18037: LD_INT 118
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: ST_TO_ADDR
18064: GO 18067
18066: POP
// end else
18067: GO 18298
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: LD_INT 1
18076: PUSH
18077: LD_INT 2
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: LD_INT 4
18085: PUSH
18086: LD_INT 5
18088: PUSH
18089: LD_INT 6
18091: PUSH
18092: LD_INT 7
18094: PUSH
18095: LD_INT 8
18097: PUSH
18098: LD_INT 9
18100: PUSH
18101: LD_INT 10
18103: PUSH
18104: LD_INT 11
18106: PUSH
18107: LD_INT 12
18109: PUSH
18110: LD_INT 13
18112: PUSH
18113: LD_INT 14
18115: PUSH
18116: LD_INT 15
18118: PUSH
18119: LD_INT 16
18121: PUSH
18122: LD_INT 17
18124: PUSH
18125: LD_INT 18
18127: PUSH
18128: LD_INT 19
18130: PUSH
18131: LD_INT 20
18133: PUSH
18134: LD_INT 21
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_INT 23
18142: PUSH
18143: LD_INT 24
18145: PUSH
18146: LD_INT 25
18148: PUSH
18149: LD_INT 26
18151: PUSH
18152: LD_INT 27
18154: PUSH
18155: LD_INT 28
18157: PUSH
18158: LD_INT 29
18160: PUSH
18161: LD_INT 30
18163: PUSH
18164: LD_INT 31
18166: PUSH
18167: LD_INT 32
18169: PUSH
18170: LD_INT 33
18172: PUSH
18173: LD_INT 34
18175: PUSH
18176: LD_INT 35
18178: PUSH
18179: LD_INT 36
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 101
18222: PUSH
18223: LD_INT 102
18225: PUSH
18226: LD_INT 103
18228: PUSH
18229: LD_INT 104
18231: PUSH
18232: LD_INT 105
18234: PUSH
18235: LD_INT 106
18237: PUSH
18238: LD_INT 107
18240: PUSH
18241: LD_INT 108
18243: PUSH
18244: LD_INT 109
18246: PUSH
18247: LD_INT 110
18249: PUSH
18250: LD_INT 111
18252: PUSH
18253: LD_INT 112
18255: PUSH
18256: LD_INT 113
18258: PUSH
18259: LD_INT 114
18261: PUSH
18262: LD_INT 115
18264: PUSH
18265: LD_INT 116
18267: PUSH
18268: LD_INT 117
18270: PUSH
18271: LD_INT 118
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: ST_TO_ADDR
// if result then
18298: LD_VAR 0 2
18302: IFFALSE 19088
// begin normal :=  ;
18304: LD_ADDR_VAR 0 5
18308: PUSH
18309: LD_STRING 
18311: ST_TO_ADDR
// hardcore :=  ;
18312: LD_ADDR_VAR 0 6
18316: PUSH
18317: LD_STRING 
18319: ST_TO_ADDR
// active :=  ;
18320: LD_ADDR_VAR 0 7
18324: PUSH
18325: LD_STRING 
18327: ST_TO_ADDR
// for i = 1 to normalCounter do
18328: LD_ADDR_VAR 0 8
18332: PUSH
18333: DOUBLE
18334: LD_INT 1
18336: DEC
18337: ST_TO_ADDR
18338: LD_EXP 34
18342: PUSH
18343: FOR_TO
18344: IFFALSE 18445
// begin tmp := 0 ;
18346: LD_ADDR_VAR 0 3
18350: PUSH
18351: LD_STRING 0
18353: ST_TO_ADDR
// if result [ 1 ] then
18354: LD_VAR 0 2
18358: PUSH
18359: LD_INT 1
18361: ARRAY
18362: IFFALSE 18427
// if result [ 1 ] [ 1 ] = i then
18364: LD_VAR 0 2
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PUSH
18373: LD_INT 1
18375: ARRAY
18376: PUSH
18377: LD_VAR 0 8
18381: EQUAL
18382: IFFALSE 18427
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18384: LD_ADDR_VAR 0 2
18388: PUSH
18389: LD_VAR 0 2
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: LD_VAR 0 2
18401: PUSH
18402: LD_INT 1
18404: ARRAY
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL_OW 3
18413: PPUSH
18414: CALL_OW 1
18418: ST_TO_ADDR
// tmp := 1 ;
18419: LD_ADDR_VAR 0 3
18423: PUSH
18424: LD_STRING 1
18426: ST_TO_ADDR
// end ; normal := normal & tmp ;
18427: LD_ADDR_VAR 0 5
18431: PUSH
18432: LD_VAR 0 5
18436: PUSH
18437: LD_VAR 0 3
18441: STR
18442: ST_TO_ADDR
// end ;
18443: GO 18343
18445: POP
18446: POP
// for i = 1 to hardcoreCounter do
18447: LD_ADDR_VAR 0 8
18451: PUSH
18452: DOUBLE
18453: LD_INT 1
18455: DEC
18456: ST_TO_ADDR
18457: LD_EXP 35
18461: PUSH
18462: FOR_TO
18463: IFFALSE 18568
// begin tmp := 0 ;
18465: LD_ADDR_VAR 0 3
18469: PUSH
18470: LD_STRING 0
18472: ST_TO_ADDR
// if result [ 2 ] then
18473: LD_VAR 0 2
18477: PUSH
18478: LD_INT 2
18480: ARRAY
18481: IFFALSE 18550
// if result [ 2 ] [ 1 ] = 100 + i then
18483: LD_VAR 0 2
18487: PUSH
18488: LD_INT 2
18490: ARRAY
18491: PUSH
18492: LD_INT 1
18494: ARRAY
18495: PUSH
18496: LD_INT 100
18498: PUSH
18499: LD_VAR 0 8
18503: PLUS
18504: EQUAL
18505: IFFALSE 18550
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18507: LD_ADDR_VAR 0 2
18511: PUSH
18512: LD_VAR 0 2
18516: PPUSH
18517: LD_INT 2
18519: PPUSH
18520: LD_VAR 0 2
18524: PUSH
18525: LD_INT 2
18527: ARRAY
18528: PPUSH
18529: LD_INT 1
18531: PPUSH
18532: CALL_OW 3
18536: PPUSH
18537: CALL_OW 1
18541: ST_TO_ADDR
// tmp := 1 ;
18542: LD_ADDR_VAR 0 3
18546: PUSH
18547: LD_STRING 1
18549: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18550: LD_ADDR_VAR 0 6
18554: PUSH
18555: LD_VAR 0 6
18559: PUSH
18560: LD_VAR 0 3
18564: STR
18565: ST_TO_ADDR
// end ;
18566: GO 18462
18568: POP
18569: POP
// if isGameLoad then
18570: LD_VAR 0 1
18574: IFFALSE 19049
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18576: LD_ADDR_VAR 0 4
18580: PUSH
18581: LD_EXP 38
18585: PUSH
18586: LD_EXP 37
18590: PUSH
18591: LD_EXP 39
18595: PUSH
18596: LD_EXP 36
18600: PUSH
18601: LD_EXP 40
18605: PUSH
18606: LD_EXP 41
18610: PUSH
18611: LD_EXP 42
18615: PUSH
18616: LD_EXP 43
18620: PUSH
18621: LD_EXP 44
18625: PUSH
18626: LD_EXP 45
18630: PUSH
18631: LD_EXP 46
18635: PUSH
18636: LD_EXP 47
18640: PUSH
18641: LD_EXP 48
18645: PUSH
18646: LD_EXP 49
18650: PUSH
18651: LD_EXP 57
18655: PUSH
18656: LD_EXP 58
18660: PUSH
18661: LD_EXP 59
18665: PUSH
18666: LD_EXP 60
18670: PUSH
18671: LD_EXP 62
18675: PUSH
18676: LD_EXP 63
18680: PUSH
18681: LD_EXP 64
18685: PUSH
18686: LD_EXP 67
18690: PUSH
18691: LD_EXP 69
18695: PUSH
18696: LD_EXP 70
18700: PUSH
18701: LD_EXP 71
18705: PUSH
18706: LD_EXP 73
18710: PUSH
18711: LD_EXP 74
18715: PUSH
18716: LD_EXP 77
18720: PUSH
18721: LD_EXP 78
18725: PUSH
18726: LD_EXP 79
18730: PUSH
18731: LD_EXP 80
18735: PUSH
18736: LD_EXP 81
18740: PUSH
18741: LD_EXP 82
18745: PUSH
18746: LD_EXP 83
18750: PUSH
18751: LD_EXP 84
18755: PUSH
18756: LD_EXP 85
18760: PUSH
18761: LD_EXP 50
18765: PUSH
18766: LD_EXP 51
18770: PUSH
18771: LD_EXP 54
18775: PUSH
18776: LD_EXP 55
18780: PUSH
18781: LD_EXP 56
18785: PUSH
18786: LD_EXP 52
18790: PUSH
18791: LD_EXP 53
18795: PUSH
18796: LD_EXP 61
18800: PUSH
18801: LD_EXP 65
18805: PUSH
18806: LD_EXP 66
18810: PUSH
18811: LD_EXP 68
18815: PUSH
18816: LD_EXP 72
18820: PUSH
18821: LD_EXP 75
18825: PUSH
18826: LD_EXP 76
18830: PUSH
18831: LD_EXP 86
18835: PUSH
18836: LD_EXP 87
18840: PUSH
18841: LD_EXP 88
18845: PUSH
18846: LD_EXP 89
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: ST_TO_ADDR
// tmp :=  ;
18907: LD_ADDR_VAR 0 3
18911: PUSH
18912: LD_STRING 
18914: ST_TO_ADDR
// for i = 1 to normalCounter do
18915: LD_ADDR_VAR 0 8
18919: PUSH
18920: DOUBLE
18921: LD_INT 1
18923: DEC
18924: ST_TO_ADDR
18925: LD_EXP 34
18929: PUSH
18930: FOR_TO
18931: IFFALSE 18967
// begin if flags [ i ] then
18933: LD_VAR 0 4
18937: PUSH
18938: LD_VAR 0 8
18942: ARRAY
18943: IFFALSE 18965
// tmp := tmp & i & ; ;
18945: LD_ADDR_VAR 0 3
18949: PUSH
18950: LD_VAR 0 3
18954: PUSH
18955: LD_VAR 0 8
18959: STR
18960: PUSH
18961: LD_STRING ;
18963: STR
18964: ST_TO_ADDR
// end ;
18965: GO 18930
18967: POP
18968: POP
// for i = 1 to hardcoreCounter do
18969: LD_ADDR_VAR 0 8
18973: PUSH
18974: DOUBLE
18975: LD_INT 1
18977: DEC
18978: ST_TO_ADDR
18979: LD_EXP 35
18983: PUSH
18984: FOR_TO
18985: IFFALSE 19031
// begin if flags [ normalCounter + i ] then
18987: LD_VAR 0 4
18991: PUSH
18992: LD_EXP 34
18996: PUSH
18997: LD_VAR 0 8
19001: PLUS
19002: ARRAY
19003: IFFALSE 19029
// tmp := tmp & ( 100 + i ) & ; ;
19005: LD_ADDR_VAR 0 3
19009: PUSH
19010: LD_VAR 0 3
19014: PUSH
19015: LD_INT 100
19017: PUSH
19018: LD_VAR 0 8
19022: PLUS
19023: STR
19024: PUSH
19025: LD_STRING ;
19027: STR
19028: ST_TO_ADDR
// end ;
19029: GO 18984
19031: POP
19032: POP
// if tmp then
19033: LD_VAR 0 3
19037: IFFALSE 19049
// active := tmp ;
19039: LD_ADDR_VAR 0 7
19043: PUSH
19044: LD_VAR 0 3
19048: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19049: LD_STRING getStreamItemsFromMission("
19051: PUSH
19052: LD_VAR 0 5
19056: STR
19057: PUSH
19058: LD_STRING ","
19060: STR
19061: PUSH
19062: LD_VAR 0 6
19066: STR
19067: PUSH
19068: LD_STRING ","
19070: STR
19071: PUSH
19072: LD_VAR 0 7
19076: STR
19077: PUSH
19078: LD_STRING ")
19080: STR
19081: PPUSH
19082: CALL_OW 559
// end else
19086: GO 19095
// ToLua ( getStreamItemsFromMission("","","") ) ;
19088: LD_STRING getStreamItemsFromMission("","","")
19090: PPUSH
19091: CALL_OW 559
// end ;
19095: LD_VAR 0 2
19099: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19100: LD_EXP 33
19104: PUSH
19105: LD_EXP 38
19109: AND
19110: IFFALSE 19234
19112: GO 19114
19114: DISABLE
19115: LD_INT 0
19117: PPUSH
19118: PPUSH
// begin enable ;
19119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19120: LD_ADDR_VAR 0 2
19124: PUSH
19125: LD_INT 22
19127: PUSH
19128: LD_OWVAR 2
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 2
19139: PUSH
19140: LD_INT 34
19142: PUSH
19143: LD_INT 7
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 34
19152: PUSH
19153: LD_INT 45
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 34
19162: PUSH
19163: LD_INT 28
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 34
19172: PUSH
19173: LD_INT 47
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PPUSH
19191: CALL_OW 69
19195: ST_TO_ADDR
// if not tmp then
19196: LD_VAR 0 2
19200: NOT
19201: IFFALSE 19205
// exit ;
19203: GO 19234
// for i in tmp do
19205: LD_ADDR_VAR 0 1
19209: PUSH
19210: LD_VAR 0 2
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19232
// begin SetLives ( i , 0 ) ;
19218: LD_VAR 0 1
19222: PPUSH
19223: LD_INT 0
19225: PPUSH
19226: CALL_OW 234
// end ;
19230: GO 19215
19232: POP
19233: POP
// end ;
19234: PPOPN 2
19236: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19237: LD_EXP 33
19241: PUSH
19242: LD_EXP 39
19246: AND
19247: IFFALSE 19331
19249: GO 19251
19251: DISABLE
19252: LD_INT 0
19254: PPUSH
19255: PPUSH
// begin enable ;
19256: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19257: LD_ADDR_VAR 0 2
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_OWVAR 2
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 32
19276: PUSH
19277: LD_INT 3
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PPUSH
19288: CALL_OW 69
19292: ST_TO_ADDR
// if not tmp then
19293: LD_VAR 0 2
19297: NOT
19298: IFFALSE 19302
// exit ;
19300: GO 19331
// for i in tmp do
19302: LD_ADDR_VAR 0 1
19306: PUSH
19307: LD_VAR 0 2
19311: PUSH
19312: FOR_IN
19313: IFFALSE 19329
// begin SetLives ( i , 0 ) ;
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_INT 0
19322: PPUSH
19323: CALL_OW 234
// end ;
19327: GO 19312
19329: POP
19330: POP
// end ;
19331: PPOPN 2
19333: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19334: LD_EXP 33
19338: PUSH
19339: LD_EXP 36
19343: AND
19344: IFFALSE 19437
19346: GO 19348
19348: DISABLE
19349: LD_INT 0
19351: PPUSH
// begin enable ;
19352: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_OWVAR 2
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 25
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: LD_INT 25
19385: PUSH
19386: LD_INT 9
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 25
19395: PUSH
19396: LD_INT 8
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PPUSH
19413: CALL_OW 69
19417: PUSH
19418: FOR_IN
19419: IFFALSE 19435
// begin SetClass ( i , 1 ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL_OW 336
// end ;
19433: GO 19418
19435: POP
19436: POP
// end ;
19437: PPOPN 1
19439: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19440: LD_EXP 33
19444: PUSH
19445: LD_EXP 37
19449: AND
19450: PUSH
19451: LD_OWVAR 65
19455: PUSH
19456: LD_INT 7
19458: LESS
19459: AND
19460: IFFALSE 19474
19462: GO 19464
19464: DISABLE
// begin enable ;
19465: ENABLE
// game_speed := 7 ;
19466: LD_ADDR_OWVAR 65
19470: PUSH
19471: LD_INT 7
19473: ST_TO_ADDR
// end ;
19474: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19475: LD_EXP 33
19479: PUSH
19480: LD_EXP 40
19484: AND
19485: IFFALSE 19687
19487: GO 19489
19489: DISABLE
19490: LD_INT 0
19492: PPUSH
19493: PPUSH
19494: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19495: LD_ADDR_VAR 0 3
19499: PUSH
19500: LD_INT 81
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 1
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PPUSH
19526: CALL_OW 69
19530: ST_TO_ADDR
// if not tmp then
19531: LD_VAR 0 3
19535: NOT
19536: IFFALSE 19540
// exit ;
19538: GO 19687
// if tmp > 5 then
19540: LD_VAR 0 3
19544: PUSH
19545: LD_INT 5
19547: GREATER
19548: IFFALSE 19560
// k := 5 else
19550: LD_ADDR_VAR 0 2
19554: PUSH
19555: LD_INT 5
19557: ST_TO_ADDR
19558: GO 19570
// k := tmp ;
19560: LD_ADDR_VAR 0 2
19564: PUSH
19565: LD_VAR 0 3
19569: ST_TO_ADDR
// for i := 1 to k do
19570: LD_ADDR_VAR 0 1
19574: PUSH
19575: DOUBLE
19576: LD_INT 1
19578: DEC
19579: ST_TO_ADDR
19580: LD_VAR 0 2
19584: PUSH
19585: FOR_TO
19586: IFFALSE 19685
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19588: LD_VAR 0 3
19592: PUSH
19593: LD_VAR 0 1
19597: ARRAY
19598: PPUSH
19599: LD_VAR 0 1
19603: PUSH
19604: LD_INT 4
19606: MOD
19607: PUSH
19608: LD_INT 1
19610: PLUS
19611: PPUSH
19612: CALL_OW 259
19616: PUSH
19617: LD_INT 10
19619: LESS
19620: IFFALSE 19683
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19622: LD_VAR 0 3
19626: PUSH
19627: LD_VAR 0 1
19631: ARRAY
19632: PPUSH
19633: LD_VAR 0 1
19637: PUSH
19638: LD_INT 4
19640: MOD
19641: PUSH
19642: LD_INT 1
19644: PLUS
19645: PPUSH
19646: LD_VAR 0 3
19650: PUSH
19651: LD_VAR 0 1
19655: ARRAY
19656: PPUSH
19657: LD_VAR 0 1
19661: PUSH
19662: LD_INT 4
19664: MOD
19665: PUSH
19666: LD_INT 1
19668: PLUS
19669: PPUSH
19670: CALL_OW 259
19674: PUSH
19675: LD_INT 1
19677: PLUS
19678: PPUSH
19679: CALL_OW 237
19683: GO 19585
19685: POP
19686: POP
// end ;
19687: PPOPN 3
19689: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19690: LD_EXP 33
19694: PUSH
19695: LD_EXP 41
19699: AND
19700: IFFALSE 19720
19702: GO 19704
19704: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19705: LD_INT 4
19707: PPUSH
19708: LD_OWVAR 2
19712: PPUSH
19713: LD_INT 0
19715: PPUSH
19716: CALL_OW 324
19720: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19721: LD_EXP 33
19725: PUSH
19726: LD_EXP 70
19730: AND
19731: IFFALSE 19751
19733: GO 19735
19735: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19736: LD_INT 19
19738: PPUSH
19739: LD_OWVAR 2
19743: PPUSH
19744: LD_INT 0
19746: PPUSH
19747: CALL_OW 324
19751: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19752: LD_EXP 33
19756: PUSH
19757: LD_EXP 42
19761: AND
19762: IFFALSE 19864
19764: GO 19766
19766: DISABLE
19767: LD_INT 0
19769: PPUSH
19770: PPUSH
// begin enable ;
19771: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19772: LD_ADDR_VAR 0 2
19776: PUSH
19777: LD_INT 22
19779: PUSH
19780: LD_OWVAR 2
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 2
19791: PUSH
19792: LD_INT 34
19794: PUSH
19795: LD_INT 11
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 34
19804: PUSH
19805: LD_INT 30
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PPUSH
19821: CALL_OW 69
19825: ST_TO_ADDR
// if not tmp then
19826: LD_VAR 0 2
19830: NOT
19831: IFFALSE 19835
// exit ;
19833: GO 19864
// for i in tmp do
19835: LD_ADDR_VAR 0 1
19839: PUSH
19840: LD_VAR 0 2
19844: PUSH
19845: FOR_IN
19846: IFFALSE 19862
// begin SetLives ( i , 0 ) ;
19848: LD_VAR 0 1
19852: PPUSH
19853: LD_INT 0
19855: PPUSH
19856: CALL_OW 234
// end ;
19860: GO 19845
19862: POP
19863: POP
// end ;
19864: PPOPN 2
19866: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19867: LD_EXP 33
19871: PUSH
19872: LD_EXP 43
19876: AND
19877: IFFALSE 19897
19879: GO 19881
19881: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19882: LD_INT 32
19884: PPUSH
19885: LD_OWVAR 2
19889: PPUSH
19890: LD_INT 0
19892: PPUSH
19893: CALL_OW 324
19897: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19898: LD_EXP 33
19902: PUSH
19903: LD_EXP 44
19907: AND
19908: IFFALSE 20089
19910: GO 19912
19912: DISABLE
19913: LD_INT 0
19915: PPUSH
19916: PPUSH
19917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19918: LD_ADDR_VAR 0 2
19922: PUSH
19923: LD_INT 22
19925: PUSH
19926: LD_OWVAR 2
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 33
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PPUSH
19949: CALL_OW 69
19953: ST_TO_ADDR
// if not tmp then
19954: LD_VAR 0 2
19958: NOT
19959: IFFALSE 19963
// exit ;
19961: GO 20089
// side := 0 ;
19963: LD_ADDR_VAR 0 3
19967: PUSH
19968: LD_INT 0
19970: ST_TO_ADDR
// for i := 1 to 8 do
19971: LD_ADDR_VAR 0 1
19975: PUSH
19976: DOUBLE
19977: LD_INT 1
19979: DEC
19980: ST_TO_ADDR
19981: LD_INT 8
19983: PUSH
19984: FOR_TO
19985: IFFALSE 20033
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19987: LD_OWVAR 2
19991: PUSH
19992: LD_VAR 0 1
19996: NONEQUAL
19997: PUSH
19998: LD_OWVAR 2
20002: PPUSH
20003: LD_VAR 0 1
20007: PPUSH
20008: CALL_OW 81
20012: PUSH
20013: LD_INT 2
20015: EQUAL
20016: AND
20017: IFFALSE 20031
// begin side := i ;
20019: LD_ADDR_VAR 0 3
20023: PUSH
20024: LD_VAR 0 1
20028: ST_TO_ADDR
// break ;
20029: GO 20033
// end ;
20031: GO 19984
20033: POP
20034: POP
// if not side then
20035: LD_VAR 0 3
20039: NOT
20040: IFFALSE 20044
// exit ;
20042: GO 20089
// for i := 1 to tmp do
20044: LD_ADDR_VAR 0 1
20048: PUSH
20049: DOUBLE
20050: LD_INT 1
20052: DEC
20053: ST_TO_ADDR
20054: LD_VAR 0 2
20058: PUSH
20059: FOR_TO
20060: IFFALSE 20087
// if Prob ( 60 ) then
20062: LD_INT 60
20064: PPUSH
20065: CALL_OW 13
20069: IFFALSE 20085
// SetSide ( i , side ) ;
20071: LD_VAR 0 1
20075: PPUSH
20076: LD_VAR 0 3
20080: PPUSH
20081: CALL_OW 235
20085: GO 20059
20087: POP
20088: POP
// end ;
20089: PPOPN 3
20091: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20092: LD_EXP 33
20096: PUSH
20097: LD_EXP 46
20101: AND
20102: IFFALSE 20221
20104: GO 20106
20106: DISABLE
20107: LD_INT 0
20109: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20110: LD_ADDR_VAR 0 1
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_OWVAR 2
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 21
20129: PUSH
20130: LD_INT 1
20132: PUSH
20133: EMPTY
20134: LIST
20135: LIST
20136: PUSH
20137: LD_INT 3
20139: PUSH
20140: LD_INT 23
20142: PUSH
20143: LD_INT 0
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: LIST
20158: PPUSH
20159: CALL_OW 69
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20219
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 257
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: LD_INT 2
20182: PUSH
20183: LD_INT 3
20185: PUSH
20186: LD_INT 4
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: IN
20195: IFFALSE 20217
// SetClass ( un , rand ( 1 , 4 ) ) ;
20197: LD_VAR 0 1
20201: PPUSH
20202: LD_INT 1
20204: PPUSH
20205: LD_INT 4
20207: PPUSH
20208: CALL_OW 12
20212: PPUSH
20213: CALL_OW 336
20217: GO 20164
20219: POP
20220: POP
// end ;
20221: PPOPN 1
20223: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20224: LD_EXP 33
20228: PUSH
20229: LD_EXP 45
20233: AND
20234: IFFALSE 20313
20236: GO 20238
20238: DISABLE
20239: LD_INT 0
20241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20242: LD_ADDR_VAR 0 1
20246: PUSH
20247: LD_INT 22
20249: PUSH
20250: LD_OWVAR 2
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: LD_INT 21
20261: PUSH
20262: LD_INT 3
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PPUSH
20273: CALL_OW 69
20277: ST_TO_ADDR
// if not tmp then
20278: LD_VAR 0 1
20282: NOT
20283: IFFALSE 20287
// exit ;
20285: GO 20313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20287: LD_VAR 0 1
20291: PUSH
20292: LD_INT 1
20294: PPUSH
20295: LD_VAR 0 1
20299: PPUSH
20300: CALL_OW 12
20304: ARRAY
20305: PPUSH
20306: LD_INT 100
20308: PPUSH
20309: CALL_OW 234
// end ;
20313: PPOPN 1
20315: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20316: LD_EXP 33
20320: PUSH
20321: LD_EXP 47
20325: AND
20326: IFFALSE 20424
20328: GO 20330
20330: DISABLE
20331: LD_INT 0
20333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20334: LD_ADDR_VAR 0 1
20338: PUSH
20339: LD_INT 22
20341: PUSH
20342: LD_OWVAR 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PPUSH
20365: CALL_OW 69
20369: ST_TO_ADDR
// if not tmp then
20370: LD_VAR 0 1
20374: NOT
20375: IFFALSE 20379
// exit ;
20377: GO 20424
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20379: LD_VAR 0 1
20383: PUSH
20384: LD_INT 1
20386: PPUSH
20387: LD_VAR 0 1
20391: PPUSH
20392: CALL_OW 12
20396: ARRAY
20397: PPUSH
20398: LD_INT 1
20400: PPUSH
20401: LD_INT 4
20403: PPUSH
20404: CALL_OW 12
20408: PPUSH
20409: LD_INT 3000
20411: PPUSH
20412: LD_INT 9000
20414: PPUSH
20415: CALL_OW 12
20419: PPUSH
20420: CALL_OW 492
// end ;
20424: PPOPN 1
20426: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20427: LD_EXP 33
20431: PUSH
20432: LD_EXP 48
20436: AND
20437: IFFALSE 20457
20439: GO 20441
20441: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20442: LD_INT 1
20444: PPUSH
20445: LD_OWVAR 2
20449: PPUSH
20450: LD_INT 0
20452: PPUSH
20453: CALL_OW 324
20457: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20458: LD_EXP 33
20462: PUSH
20463: LD_EXP 49
20467: AND
20468: IFFALSE 20551
20470: GO 20472
20472: DISABLE
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20477: LD_ADDR_VAR 0 2
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_OWVAR 2
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 21
20496: PUSH
20497: LD_INT 3
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PPUSH
20508: CALL_OW 69
20512: ST_TO_ADDR
// if not tmp then
20513: LD_VAR 0 2
20517: NOT
20518: IFFALSE 20522
// exit ;
20520: GO 20551
// for i in tmp do
20522: LD_ADDR_VAR 0 1
20526: PUSH
20527: LD_VAR 0 2
20531: PUSH
20532: FOR_IN
20533: IFFALSE 20549
// SetBLevel ( i , 10 ) ;
20535: LD_VAR 0 1
20539: PPUSH
20540: LD_INT 10
20542: PPUSH
20543: CALL_OW 241
20547: GO 20532
20549: POP
20550: POP
// end ;
20551: PPOPN 2
20553: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20554: LD_EXP 33
20558: PUSH
20559: LD_EXP 50
20563: AND
20564: IFFALSE 20675
20566: GO 20568
20568: DISABLE
20569: LD_INT 0
20571: PPUSH
20572: PPUSH
20573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20574: LD_ADDR_VAR 0 3
20578: PUSH
20579: LD_INT 22
20581: PUSH
20582: LD_OWVAR 2
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 25
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PPUSH
20605: CALL_OW 69
20609: ST_TO_ADDR
// if not tmp then
20610: LD_VAR 0 3
20614: NOT
20615: IFFALSE 20619
// exit ;
20617: GO 20675
// un := tmp [ rand ( 1 , tmp ) ] ;
20619: LD_ADDR_VAR 0 2
20623: PUSH
20624: LD_VAR 0 3
20628: PUSH
20629: LD_INT 1
20631: PPUSH
20632: LD_VAR 0 3
20636: PPUSH
20637: CALL_OW 12
20641: ARRAY
20642: ST_TO_ADDR
// if Crawls ( un ) then
20643: LD_VAR 0 2
20647: PPUSH
20648: CALL_OW 318
20652: IFFALSE 20663
// ComWalk ( un ) ;
20654: LD_VAR 0 2
20658: PPUSH
20659: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20663: LD_VAR 0 2
20667: PPUSH
20668: LD_INT 5
20670: PPUSH
20671: CALL_OW 336
// end ;
20675: PPOPN 3
20677: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20678: LD_EXP 33
20682: PUSH
20683: LD_EXP 51
20687: AND
20688: PUSH
20689: LD_OWVAR 67
20693: PUSH
20694: LD_INT 4
20696: LESS
20697: AND
20698: IFFALSE 20717
20700: GO 20702
20702: DISABLE
// begin Difficulty := Difficulty + 1 ;
20703: LD_ADDR_OWVAR 67
20707: PUSH
20708: LD_OWVAR 67
20712: PUSH
20713: LD_INT 1
20715: PLUS
20716: ST_TO_ADDR
// end ;
20717: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20718: LD_EXP 33
20722: PUSH
20723: LD_EXP 52
20727: AND
20728: IFFALSE 20831
20730: GO 20732
20732: DISABLE
20733: LD_INT 0
20735: PPUSH
// begin for i := 1 to 5 do
20736: LD_ADDR_VAR 0 1
20740: PUSH
20741: DOUBLE
20742: LD_INT 1
20744: DEC
20745: ST_TO_ADDR
20746: LD_INT 5
20748: PUSH
20749: FOR_TO
20750: IFFALSE 20829
// begin uc_nation := nation_nature ;
20752: LD_ADDR_OWVAR 21
20756: PUSH
20757: LD_INT 0
20759: ST_TO_ADDR
// uc_side := 0 ;
20760: LD_ADDR_OWVAR 20
20764: PUSH
20765: LD_INT 0
20767: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20768: LD_ADDR_OWVAR 29
20772: PUSH
20773: LD_INT 12
20775: PUSH
20776: LD_INT 12
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: ST_TO_ADDR
// hc_agressivity := 20 ;
20783: LD_ADDR_OWVAR 35
20787: PUSH
20788: LD_INT 20
20790: ST_TO_ADDR
// hc_class := class_tiger ;
20791: LD_ADDR_OWVAR 28
20795: PUSH
20796: LD_INT 14
20798: ST_TO_ADDR
// hc_gallery :=  ;
20799: LD_ADDR_OWVAR 33
20803: PUSH
20804: LD_STRING 
20806: ST_TO_ADDR
// hc_name :=  ;
20807: LD_ADDR_OWVAR 26
20811: PUSH
20812: LD_STRING 
20814: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20815: CALL_OW 44
20819: PPUSH
20820: LD_INT 0
20822: PPUSH
20823: CALL_OW 51
// end ;
20827: GO 20749
20829: POP
20830: POP
// end ;
20831: PPOPN 1
20833: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20834: LD_EXP 33
20838: PUSH
20839: LD_EXP 53
20843: AND
20844: IFFALSE 20853
20846: GO 20848
20848: DISABLE
// StreamSibBomb ;
20849: CALL 20854 0 0
20853: END
// export function StreamSibBomb ; var i , x , y ; begin
20854: LD_INT 0
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
// result := false ;
20860: LD_ADDR_VAR 0 1
20864: PUSH
20865: LD_INT 0
20867: ST_TO_ADDR
// for i := 1 to 16 do
20868: LD_ADDR_VAR 0 2
20872: PUSH
20873: DOUBLE
20874: LD_INT 1
20876: DEC
20877: ST_TO_ADDR
20878: LD_INT 16
20880: PUSH
20881: FOR_TO
20882: IFFALSE 21081
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20884: LD_ADDR_VAR 0 3
20888: PUSH
20889: LD_INT 10
20891: PUSH
20892: LD_INT 20
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 40
20900: PUSH
20901: LD_INT 50
20903: PUSH
20904: LD_INT 60
20906: PUSH
20907: LD_INT 70
20909: PUSH
20910: LD_INT 80
20912: PUSH
20913: LD_INT 90
20915: PUSH
20916: LD_INT 100
20918: PUSH
20919: LD_INT 110
20921: PUSH
20922: LD_INT 120
20924: PUSH
20925: LD_INT 130
20927: PUSH
20928: LD_INT 140
20930: PUSH
20931: LD_INT 150
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 1
20953: PPUSH
20954: LD_INT 15
20956: PPUSH
20957: CALL_OW 12
20961: ARRAY
20962: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20963: LD_ADDR_VAR 0 4
20967: PUSH
20968: LD_INT 10
20970: PUSH
20971: LD_INT 20
20973: PUSH
20974: LD_INT 30
20976: PUSH
20977: LD_INT 40
20979: PUSH
20980: LD_INT 50
20982: PUSH
20983: LD_INT 60
20985: PUSH
20986: LD_INT 70
20988: PUSH
20989: LD_INT 80
20991: PUSH
20992: LD_INT 90
20994: PUSH
20995: LD_INT 100
20997: PUSH
20998: LD_INT 110
21000: PUSH
21001: LD_INT 120
21003: PUSH
21004: LD_INT 130
21006: PUSH
21007: LD_INT 140
21009: PUSH
21010: LD_INT 150
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: PPUSH
21033: LD_INT 15
21035: PPUSH
21036: CALL_OW 12
21040: ARRAY
21041: ST_TO_ADDR
// if ValidHex ( x , y ) then
21042: LD_VAR 0 3
21046: PPUSH
21047: LD_VAR 0 4
21051: PPUSH
21052: CALL_OW 488
21056: IFFALSE 21079
// begin result := [ x , y ] ;
21058: LD_ADDR_VAR 0 1
21062: PUSH
21063: LD_VAR 0 3
21067: PUSH
21068: LD_VAR 0 4
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: ST_TO_ADDR
// break ;
21077: GO 21081
// end ; end ;
21079: GO 20881
21081: POP
21082: POP
// if result then
21083: LD_VAR 0 1
21087: IFFALSE 21147
// begin ToLua ( playSibBomb() ) ;
21089: LD_STRING playSibBomb()
21091: PPUSH
21092: CALL_OW 559
// wait ( 0 0$14 ) ;
21096: LD_INT 490
21098: PPUSH
21099: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21103: LD_VAR 0 1
21107: PUSH
21108: LD_INT 1
21110: ARRAY
21111: PPUSH
21112: LD_VAR 0 1
21116: PUSH
21117: LD_INT 2
21119: ARRAY
21120: PPUSH
21121: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 1
21132: ARRAY
21133: PPUSH
21134: LD_VAR 0 1
21138: PUSH
21139: LD_INT 2
21141: ARRAY
21142: PPUSH
21143: CALL_OW 429
// end ; end ;
21147: LD_VAR 0 1
21151: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21152: LD_EXP 33
21156: PUSH
21157: LD_EXP 55
21161: AND
21162: IFFALSE 21174
21164: GO 21166
21166: DISABLE
// YouLost (  ) ;
21167: LD_STRING 
21169: PPUSH
21170: CALL_OW 104
21174: END
// every 0 0$1 trigger StreamModeActive and sFog do
21175: LD_EXP 33
21179: PUSH
21180: LD_EXP 54
21184: AND
21185: IFFALSE 21199
21187: GO 21189
21189: DISABLE
// FogOff ( your_side ) ;
21190: LD_OWVAR 2
21194: PPUSH
21195: CALL_OW 344
21199: END
// every 0 0$1 trigger StreamModeActive and sSun do
21200: LD_EXP 33
21204: PUSH
21205: LD_EXP 56
21209: AND
21210: IFFALSE 21238
21212: GO 21214
21214: DISABLE
// begin solar_recharge_percent := 0 ;
21215: LD_ADDR_OWVAR 79
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21223: LD_INT 10500
21225: PPUSH
21226: CALL_OW 67
// solar_recharge_percent := 100 ;
21230: LD_ADDR_OWVAR 79
21234: PUSH
21235: LD_INT 100
21237: ST_TO_ADDR
// end ;
21238: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21239: LD_EXP 33
21243: PUSH
21244: LD_EXP 57
21248: AND
21249: IFFALSE 21488
21251: GO 21253
21253: DISABLE
21254: LD_INT 0
21256: PPUSH
21257: PPUSH
21258: PPUSH
// begin tmp := [ ] ;
21259: LD_ADDR_VAR 0 3
21263: PUSH
21264: EMPTY
21265: ST_TO_ADDR
// for i := 1 to 6 do
21266: LD_ADDR_VAR 0 1
21270: PUSH
21271: DOUBLE
21272: LD_INT 1
21274: DEC
21275: ST_TO_ADDR
21276: LD_INT 6
21278: PUSH
21279: FOR_TO
21280: IFFALSE 21385
// begin uc_nation := nation_nature ;
21282: LD_ADDR_OWVAR 21
21286: PUSH
21287: LD_INT 0
21289: ST_TO_ADDR
// uc_side := 0 ;
21290: LD_ADDR_OWVAR 20
21294: PUSH
21295: LD_INT 0
21297: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21298: LD_ADDR_OWVAR 29
21302: PUSH
21303: LD_INT 12
21305: PUSH
21306: LD_INT 12
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// hc_agressivity := 20 ;
21313: LD_ADDR_OWVAR 35
21317: PUSH
21318: LD_INT 20
21320: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21321: LD_ADDR_OWVAR 28
21325: PUSH
21326: LD_INT 17
21328: ST_TO_ADDR
// hc_gallery :=  ;
21329: LD_ADDR_OWVAR 33
21333: PUSH
21334: LD_STRING 
21336: ST_TO_ADDR
// hc_name :=  ;
21337: LD_ADDR_OWVAR 26
21341: PUSH
21342: LD_STRING 
21344: ST_TO_ADDR
// un := CreateHuman ;
21345: LD_ADDR_VAR 0 2
21349: PUSH
21350: CALL_OW 44
21354: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21355: LD_VAR 0 2
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 51
// tmp := tmp ^ un ;
21367: LD_ADDR_VAR 0 3
21371: PUSH
21372: LD_VAR 0 3
21376: PUSH
21377: LD_VAR 0 2
21381: ADD
21382: ST_TO_ADDR
// end ;
21383: GO 21279
21385: POP
21386: POP
// repeat wait ( 0 0$1 ) ;
21387: LD_INT 35
21389: PPUSH
21390: CALL_OW 67
// for un in tmp do
21394: LD_ADDR_VAR 0 2
21398: PUSH
21399: LD_VAR 0 3
21403: PUSH
21404: FOR_IN
21405: IFFALSE 21479
// begin if IsDead ( un ) then
21407: LD_VAR 0 2
21411: PPUSH
21412: CALL_OW 301
21416: IFFALSE 21436
// begin tmp := tmp diff un ;
21418: LD_ADDR_VAR 0 3
21422: PUSH
21423: LD_VAR 0 3
21427: PUSH
21428: LD_VAR 0 2
21432: DIFF
21433: ST_TO_ADDR
// continue ;
21434: GO 21404
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21436: LD_VAR 0 2
21440: PPUSH
21441: LD_INT 3
21443: PUSH
21444: LD_INT 22
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: PPUSH
21463: LD_VAR 0 2
21467: PPUSH
21468: CALL_OW 74
21472: PPUSH
21473: CALL_OW 115
// end ;
21477: GO 21404
21479: POP
21480: POP
// until not tmp ;
21481: LD_VAR 0 3
21485: NOT
21486: IFFALSE 21387
// end ;
21488: PPOPN 3
21490: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21491: LD_EXP 33
21495: PUSH
21496: LD_EXP 58
21500: AND
21501: IFFALSE 21555
21503: GO 21505
21505: DISABLE
// begin ToLua ( displayTroll(); ) ;
21506: LD_STRING displayTroll();
21508: PPUSH
21509: CALL_OW 559
// wait ( 3 3$00 ) ;
21513: LD_INT 6300
21515: PPUSH
21516: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21520: LD_STRING hideTroll();
21522: PPUSH
21523: CALL_OW 559
// wait ( 1 1$00 ) ;
21527: LD_INT 2100
21529: PPUSH
21530: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21534: LD_STRING displayTroll();
21536: PPUSH
21537: CALL_OW 559
// wait ( 1 1$00 ) ;
21541: LD_INT 2100
21543: PPUSH
21544: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21548: LD_STRING hideTroll();
21550: PPUSH
21551: CALL_OW 559
// end ;
21555: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21556: LD_EXP 33
21560: PUSH
21561: LD_EXP 59
21565: AND
21566: IFFALSE 21629
21568: GO 21570
21570: DISABLE
21571: LD_INT 0
21573: PPUSH
// begin p := 0 ;
21574: LD_ADDR_VAR 0 1
21578: PUSH
21579: LD_INT 0
21581: ST_TO_ADDR
// repeat game_speed := 1 ;
21582: LD_ADDR_OWVAR 65
21586: PUSH
21587: LD_INT 1
21589: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21590: LD_INT 35
21592: PPUSH
21593: CALL_OW 67
// p := p + 1 ;
21597: LD_ADDR_VAR 0 1
21601: PUSH
21602: LD_VAR 0 1
21606: PUSH
21607: LD_INT 1
21609: PLUS
21610: ST_TO_ADDR
// until p >= 60 ;
21611: LD_VAR 0 1
21615: PUSH
21616: LD_INT 60
21618: GREATEREQUAL
21619: IFFALSE 21582
// game_speed := 4 ;
21621: LD_ADDR_OWVAR 65
21625: PUSH
21626: LD_INT 4
21628: ST_TO_ADDR
// end ;
21629: PPOPN 1
21631: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21632: LD_EXP 33
21636: PUSH
21637: LD_EXP 60
21641: AND
21642: IFFALSE 21788
21644: GO 21646
21646: DISABLE
21647: LD_INT 0
21649: PPUSH
21650: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21651: LD_ADDR_VAR 0 1
21655: PUSH
21656: LD_INT 22
21658: PUSH
21659: LD_OWVAR 2
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: LD_INT 2
21670: PUSH
21671: LD_INT 30
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 30
21683: PUSH
21684: LD_INT 1
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: LIST
21695: PUSH
21696: EMPTY
21697: LIST
21698: LIST
21699: PPUSH
21700: CALL_OW 69
21704: ST_TO_ADDR
// if not depot then
21705: LD_VAR 0 1
21709: NOT
21710: IFFALSE 21714
// exit ;
21712: GO 21788
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21714: LD_ADDR_VAR 0 2
21718: PUSH
21719: LD_VAR 0 1
21723: PUSH
21724: LD_INT 1
21726: PPUSH
21727: LD_VAR 0 1
21731: PPUSH
21732: CALL_OW 12
21736: ARRAY
21737: PPUSH
21738: CALL_OW 274
21742: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21743: LD_VAR 0 2
21747: PPUSH
21748: LD_INT 1
21750: PPUSH
21751: LD_INT 0
21753: PPUSH
21754: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21758: LD_VAR 0 2
21762: PPUSH
21763: LD_INT 2
21765: PPUSH
21766: LD_INT 0
21768: PPUSH
21769: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21773: LD_VAR 0 2
21777: PPUSH
21778: LD_INT 3
21780: PPUSH
21781: LD_INT 0
21783: PPUSH
21784: CALL_OW 277
// end ;
21788: PPOPN 2
21790: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21791: LD_EXP 33
21795: PUSH
21796: LD_EXP 61
21800: AND
21801: IFFALSE 21898
21803: GO 21805
21805: DISABLE
21806: LD_INT 0
21808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21809: LD_ADDR_VAR 0 1
21813: PUSH
21814: LD_INT 22
21816: PUSH
21817: LD_OWVAR 2
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 21
21828: PUSH
21829: LD_INT 1
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 3
21838: PUSH
21839: LD_INT 23
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: PPUSH
21858: CALL_OW 69
21862: ST_TO_ADDR
// if not tmp then
21863: LD_VAR 0 1
21867: NOT
21868: IFFALSE 21872
// exit ;
21870: GO 21898
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21872: LD_VAR 0 1
21876: PUSH
21877: LD_INT 1
21879: PPUSH
21880: LD_VAR 0 1
21884: PPUSH
21885: CALL_OW 12
21889: ARRAY
21890: PPUSH
21891: LD_INT 200
21893: PPUSH
21894: CALL_OW 234
// end ;
21898: PPOPN 1
21900: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21901: LD_EXP 33
21905: PUSH
21906: LD_EXP 62
21910: AND
21911: IFFALSE 21990
21913: GO 21915
21915: DISABLE
21916: LD_INT 0
21918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21919: LD_ADDR_VAR 0 1
21923: PUSH
21924: LD_INT 22
21926: PUSH
21927: LD_OWVAR 2
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 21
21938: PUSH
21939: LD_INT 2
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PPUSH
21950: CALL_OW 69
21954: ST_TO_ADDR
// if not tmp then
21955: LD_VAR 0 1
21959: NOT
21960: IFFALSE 21964
// exit ;
21962: GO 21990
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21964: LD_VAR 0 1
21968: PUSH
21969: LD_INT 1
21971: PPUSH
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 12
21981: ARRAY
21982: PPUSH
21983: LD_INT 60
21985: PPUSH
21986: CALL_OW 234
// end ;
21990: PPOPN 1
21992: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21993: LD_EXP 33
21997: PUSH
21998: LD_EXP 63
22002: AND
22003: IFFALSE 22102
22005: GO 22007
22007: DISABLE
22008: LD_INT 0
22010: PPUSH
22011: PPUSH
// begin enable ;
22012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22013: LD_ADDR_VAR 0 1
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 61
22032: PUSH
22033: EMPTY
22034: LIST
22035: PUSH
22036: LD_INT 33
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: EMPTY
22043: LIST
22044: LIST
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: LIST
22050: PPUSH
22051: CALL_OW 69
22055: ST_TO_ADDR
// if not tmp then
22056: LD_VAR 0 1
22060: NOT
22061: IFFALSE 22065
// exit ;
22063: GO 22102
// for i in tmp do
22065: LD_ADDR_VAR 0 2
22069: PUSH
22070: LD_VAR 0 1
22074: PUSH
22075: FOR_IN
22076: IFFALSE 22100
// if IsControledBy ( i ) then
22078: LD_VAR 0 2
22082: PPUSH
22083: CALL_OW 312
22087: IFFALSE 22098
// ComUnlink ( i ) ;
22089: LD_VAR 0 2
22093: PPUSH
22094: CALL_OW 136
22098: GO 22075
22100: POP
22101: POP
// end ;
22102: PPOPN 2
22104: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22105: LD_EXP 33
22109: PUSH
22110: LD_EXP 64
22114: AND
22115: IFFALSE 22255
22117: GO 22119
22119: DISABLE
22120: LD_INT 0
22122: PPUSH
22123: PPUSH
// begin ToLua ( displayPowell(); ) ;
22124: LD_STRING displayPowell();
22126: PPUSH
22127: CALL_OW 559
// uc_side := 0 ;
22131: LD_ADDR_OWVAR 20
22135: PUSH
22136: LD_INT 0
22138: ST_TO_ADDR
// uc_nation := 2 ;
22139: LD_ADDR_OWVAR 21
22143: PUSH
22144: LD_INT 2
22146: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22147: LD_ADDR_OWVAR 37
22151: PUSH
22152: LD_INT 14
22154: ST_TO_ADDR
// vc_engine := engine_siberite ;
22155: LD_ADDR_OWVAR 39
22159: PUSH
22160: LD_INT 3
22162: ST_TO_ADDR
// vc_control := control_apeman ;
22163: LD_ADDR_OWVAR 38
22167: PUSH
22168: LD_INT 5
22170: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22171: LD_ADDR_OWVAR 40
22175: PUSH
22176: LD_INT 29
22178: ST_TO_ADDR
// un := CreateVehicle ;
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: CALL_OW 45
22188: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22189: LD_VAR 0 2
22193: PPUSH
22194: LD_INT 1
22196: PPUSH
22197: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22201: LD_INT 35
22203: PPUSH
22204: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22208: LD_VAR 0 2
22212: PPUSH
22213: LD_INT 22
22215: PUSH
22216: LD_OWVAR 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PPUSH
22225: CALL_OW 69
22229: PPUSH
22230: LD_VAR 0 2
22234: PPUSH
22235: CALL_OW 74
22239: PPUSH
22240: CALL_OW 115
// until IsDead ( un ) ;
22244: LD_VAR 0 2
22248: PPUSH
22249: CALL_OW 301
22253: IFFALSE 22201
// end ;
22255: PPOPN 2
22257: END
// every 0 0$1 trigger StreamModeActive and sStu do
22258: LD_EXP 33
22262: PUSH
22263: LD_EXP 72
22267: AND
22268: IFFALSE 22284
22270: GO 22272
22272: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22273: LD_STRING displayStucuk();
22275: PPUSH
22276: CALL_OW 559
// ResetFog ;
22280: CALL_OW 335
// end ;
22284: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22285: LD_EXP 33
22289: PUSH
22290: LD_EXP 65
22294: AND
22295: IFFALSE 22436
22297: GO 22299
22299: DISABLE
22300: LD_INT 0
22302: PPUSH
22303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22304: LD_ADDR_VAR 0 2
22308: PUSH
22309: LD_INT 22
22311: PUSH
22312: LD_OWVAR 2
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 21
22323: PUSH
22324: LD_INT 1
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: ST_TO_ADDR
// if not tmp then
22340: LD_VAR 0 2
22344: NOT
22345: IFFALSE 22349
// exit ;
22347: GO 22436
// un := tmp [ rand ( 1 , tmp ) ] ;
22349: LD_ADDR_VAR 0 1
22353: PUSH
22354: LD_VAR 0 2
22358: PUSH
22359: LD_INT 1
22361: PPUSH
22362: LD_VAR 0 2
22366: PPUSH
22367: CALL_OW 12
22371: ARRAY
22372: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22373: LD_VAR 0 1
22377: PPUSH
22378: LD_INT 0
22380: PPUSH
22381: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22385: LD_VAR 0 1
22389: PPUSH
22390: LD_OWVAR 3
22394: PUSH
22395: LD_VAR 0 1
22399: DIFF
22400: PPUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 74
22410: PPUSH
22411: CALL_OW 115
// wait ( 0 0$20 ) ;
22415: LD_INT 700
22417: PPUSH
22418: CALL_OW 67
// SetSide ( un , your_side ) ;
22422: LD_VAR 0 1
22426: PPUSH
22427: LD_OWVAR 2
22431: PPUSH
22432: CALL_OW 235
// end ;
22436: PPOPN 2
22438: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22439: LD_EXP 33
22443: PUSH
22444: LD_EXP 66
22448: AND
22449: IFFALSE 22555
22451: GO 22453
22453: DISABLE
22454: LD_INT 0
22456: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22457: LD_ADDR_VAR 0 1
22461: PUSH
22462: LD_INT 22
22464: PUSH
22465: LD_OWVAR 2
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 30
22479: PUSH
22480: LD_INT 0
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 30
22489: PUSH
22490: LD_INT 1
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: EMPTY
22498: LIST
22499: LIST
22500: LIST
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PPUSH
22506: CALL_OW 69
22510: ST_TO_ADDR
// if not depot then
22511: LD_VAR 0 1
22515: NOT
22516: IFFALSE 22520
// exit ;
22518: GO 22555
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22520: LD_VAR 0 1
22524: PUSH
22525: LD_INT 1
22527: ARRAY
22528: PPUSH
22529: CALL_OW 250
22533: PPUSH
22534: LD_VAR 0 1
22538: PUSH
22539: LD_INT 1
22541: ARRAY
22542: PPUSH
22543: CALL_OW 251
22547: PPUSH
22548: LD_INT 70
22550: PPUSH
22551: CALL_OW 495
// end ;
22555: PPOPN 1
22557: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22558: LD_EXP 33
22562: PUSH
22563: LD_EXP 67
22567: AND
22568: IFFALSE 22779
22570: GO 22572
22572: DISABLE
22573: LD_INT 0
22575: PPUSH
22576: PPUSH
22577: PPUSH
22578: PPUSH
22579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22580: LD_ADDR_VAR 0 5
22584: PUSH
22585: LD_INT 22
22587: PUSH
22588: LD_OWVAR 2
22592: PUSH
22593: EMPTY
22594: LIST
22595: LIST
22596: PUSH
22597: LD_INT 21
22599: PUSH
22600: LD_INT 1
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PPUSH
22611: CALL_OW 69
22615: ST_TO_ADDR
// if not tmp then
22616: LD_VAR 0 5
22620: NOT
22621: IFFALSE 22625
// exit ;
22623: GO 22779
// for i in tmp do
22625: LD_ADDR_VAR 0 1
22629: PUSH
22630: LD_VAR 0 5
22634: PUSH
22635: FOR_IN
22636: IFFALSE 22777
// begin d := rand ( 0 , 5 ) ;
22638: LD_ADDR_VAR 0 4
22642: PUSH
22643: LD_INT 0
22645: PPUSH
22646: LD_INT 5
22648: PPUSH
22649: CALL_OW 12
22653: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_VAR 0 1
22663: PPUSH
22664: CALL_OW 250
22668: PPUSH
22669: LD_VAR 0 4
22673: PPUSH
22674: LD_INT 3
22676: PPUSH
22677: LD_INT 12
22679: PPUSH
22680: CALL_OW 12
22684: PPUSH
22685: CALL_OW 272
22689: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22690: LD_ADDR_VAR 0 3
22694: PUSH
22695: LD_VAR 0 1
22699: PPUSH
22700: CALL_OW 251
22704: PPUSH
22705: LD_VAR 0 4
22709: PPUSH
22710: LD_INT 3
22712: PPUSH
22713: LD_INT 12
22715: PPUSH
22716: CALL_OW 12
22720: PPUSH
22721: CALL_OW 273
22725: ST_TO_ADDR
// if ValidHex ( x , y ) then
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_VAR 0 3
22735: PPUSH
22736: CALL_OW 488
22740: IFFALSE 22775
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_VAR 0 2
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: LD_INT 3
22759: PPUSH
22760: LD_INT 6
22762: PPUSH
22763: CALL_OW 12
22767: PPUSH
22768: LD_INT 1
22770: PPUSH
22771: CALL_OW 483
// end ;
22775: GO 22635
22777: POP
22778: POP
// end ;
22779: PPOPN 5
22781: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22782: LD_EXP 33
22786: PUSH
22787: LD_EXP 68
22791: AND
22792: IFFALSE 22886
22794: GO 22796
22796: DISABLE
22797: LD_INT 0
22799: PPUSH
22800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22801: LD_ADDR_VAR 0 2
22805: PUSH
22806: LD_INT 22
22808: PUSH
22809: LD_OWVAR 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 32
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 21
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: ST_TO_ADDR
// if not tmp then
22848: LD_VAR 0 2
22852: NOT
22853: IFFALSE 22857
// exit ;
22855: GO 22886
// for i in tmp do
22857: LD_ADDR_VAR 0 1
22861: PUSH
22862: LD_VAR 0 2
22866: PUSH
22867: FOR_IN
22868: IFFALSE 22884
// SetFuel ( i , 0 ) ;
22870: LD_VAR 0 1
22874: PPUSH
22875: LD_INT 0
22877: PPUSH
22878: CALL_OW 240
22882: GO 22867
22884: POP
22885: POP
// end ;
22886: PPOPN 2
22888: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22889: LD_EXP 33
22893: PUSH
22894: LD_EXP 69
22898: AND
22899: IFFALSE 22965
22901: GO 22903
22903: DISABLE
22904: LD_INT 0
22906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: LD_INT 22
22914: PUSH
22915: LD_OWVAR 2
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 30
22926: PUSH
22927: LD_INT 29
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PPUSH
22938: CALL_OW 69
22942: ST_TO_ADDR
// if not tmp then
22943: LD_VAR 0 1
22947: NOT
22948: IFFALSE 22952
// exit ;
22950: GO 22965
// DestroyUnit ( tmp [ 1 ] ) ;
22952: LD_VAR 0 1
22956: PUSH
22957: LD_INT 1
22959: ARRAY
22960: PPUSH
22961: CALL_OW 65
// end ;
22965: PPOPN 1
22967: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22968: LD_EXP 33
22972: PUSH
22973: LD_EXP 71
22977: AND
22978: IFFALSE 23107
22980: GO 22982
22982: DISABLE
22983: LD_INT 0
22985: PPUSH
// begin uc_side := 0 ;
22986: LD_ADDR_OWVAR 20
22990: PUSH
22991: LD_INT 0
22993: ST_TO_ADDR
// uc_nation := nation_arabian ;
22994: LD_ADDR_OWVAR 21
22998: PUSH
22999: LD_INT 2
23001: ST_TO_ADDR
// hc_gallery :=  ;
23002: LD_ADDR_OWVAR 33
23006: PUSH
23007: LD_STRING 
23009: ST_TO_ADDR
// hc_name :=  ;
23010: LD_ADDR_OWVAR 26
23014: PUSH
23015: LD_STRING 
23017: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23018: LD_INT 1
23020: PPUSH
23021: LD_INT 11
23023: PPUSH
23024: LD_INT 10
23026: PPUSH
23027: CALL_OW 380
// un := CreateHuman ;
23031: LD_ADDR_VAR 0 1
23035: PUSH
23036: CALL_OW 44
23040: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23041: LD_VAR 0 1
23045: PPUSH
23046: LD_INT 1
23048: PPUSH
23049: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23053: LD_INT 35
23055: PPUSH
23056: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23060: LD_VAR 0 1
23064: PPUSH
23065: LD_INT 22
23067: PUSH
23068: LD_OWVAR 2
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: PPUSH
23082: LD_VAR 0 1
23086: PPUSH
23087: CALL_OW 74
23091: PPUSH
23092: CALL_OW 115
// until IsDead ( un ) ;
23096: LD_VAR 0 1
23100: PPUSH
23101: CALL_OW 301
23105: IFFALSE 23053
// end ;
23107: PPOPN 1
23109: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23110: LD_EXP 33
23114: PUSH
23115: LD_EXP 73
23119: AND
23120: IFFALSE 23132
23122: GO 23124
23124: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23125: LD_STRING earthquake(getX(game), 0, 32)
23127: PPUSH
23128: CALL_OW 559
23132: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23133: LD_EXP 33
23137: PUSH
23138: LD_EXP 74
23142: AND
23143: IFFALSE 23234
23145: GO 23147
23147: DISABLE
23148: LD_INT 0
23150: PPUSH
// begin enable ;
23151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23152: LD_ADDR_VAR 0 1
23156: PUSH
23157: LD_INT 22
23159: PUSH
23160: LD_OWVAR 2
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 21
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 33
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 69
23198: ST_TO_ADDR
// if not tmp then
23199: LD_VAR 0 1
23203: NOT
23204: IFFALSE 23208
// exit ;
23206: GO 23234
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23208: LD_VAR 0 1
23212: PUSH
23213: LD_INT 1
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 12
23225: ARRAY
23226: PPUSH
23227: LD_INT 1
23229: PPUSH
23230: CALL_OW 234
// end ;
23234: PPOPN 1
23236: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23237: LD_EXP 33
23241: PUSH
23242: LD_EXP 75
23246: AND
23247: IFFALSE 23388
23249: GO 23251
23251: DISABLE
23252: LD_INT 0
23254: PPUSH
23255: PPUSH
23256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23257: LD_ADDR_VAR 0 3
23261: PUSH
23262: LD_INT 22
23264: PUSH
23265: LD_OWVAR 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 25
23276: PUSH
23277: LD_INT 1
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: CALL_OW 69
23292: ST_TO_ADDR
// if not tmp then
23293: LD_VAR 0 3
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23388
// un := tmp [ rand ( 1 , tmp ) ] ;
23302: LD_ADDR_VAR 0 2
23306: PUSH
23307: LD_VAR 0 3
23311: PUSH
23312: LD_INT 1
23314: PPUSH
23315: LD_VAR 0 3
23319: PPUSH
23320: CALL_OW 12
23324: ARRAY
23325: ST_TO_ADDR
// if Crawls ( un ) then
23326: LD_VAR 0 2
23330: PPUSH
23331: CALL_OW 318
23335: IFFALSE 23346
// ComWalk ( un ) ;
23337: LD_VAR 0 2
23341: PPUSH
23342: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_INT 9
23353: PPUSH
23354: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23358: LD_INT 28
23360: PPUSH
23361: LD_OWVAR 2
23365: PPUSH
23366: LD_INT 2
23368: PPUSH
23369: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23373: LD_INT 29
23375: PPUSH
23376: LD_OWVAR 2
23380: PPUSH
23381: LD_INT 2
23383: PPUSH
23384: CALL_OW 322
// end ;
23388: PPOPN 3
23390: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23391: LD_EXP 33
23395: PUSH
23396: LD_EXP 76
23400: AND
23401: IFFALSE 23512
23403: GO 23405
23405: DISABLE
23406: LD_INT 0
23408: PPUSH
23409: PPUSH
23410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23411: LD_ADDR_VAR 0 3
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_OWVAR 2
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: LD_INT 25
23430: PUSH
23431: LD_INT 1
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PPUSH
23442: CALL_OW 69
23446: ST_TO_ADDR
// if not tmp then
23447: LD_VAR 0 3
23451: NOT
23452: IFFALSE 23456
// exit ;
23454: GO 23512
// un := tmp [ rand ( 1 , tmp ) ] ;
23456: LD_ADDR_VAR 0 2
23460: PUSH
23461: LD_VAR 0 3
23465: PUSH
23466: LD_INT 1
23468: PPUSH
23469: LD_VAR 0 3
23473: PPUSH
23474: CALL_OW 12
23478: ARRAY
23479: ST_TO_ADDR
// if Crawls ( un ) then
23480: LD_VAR 0 2
23484: PPUSH
23485: CALL_OW 318
23489: IFFALSE 23500
// ComWalk ( un ) ;
23491: LD_VAR 0 2
23495: PPUSH
23496: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23500: LD_VAR 0 2
23504: PPUSH
23505: LD_INT 8
23507: PPUSH
23508: CALL_OW 336
// end ;
23512: PPOPN 3
23514: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23515: LD_EXP 33
23519: PUSH
23520: LD_EXP 77
23524: AND
23525: IFFALSE 23669
23527: GO 23529
23529: DISABLE
23530: LD_INT 0
23532: PPUSH
23533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23534: LD_ADDR_VAR 0 2
23538: PUSH
23539: LD_INT 22
23541: PUSH
23542: LD_OWVAR 2
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 21
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 2
23563: PUSH
23564: LD_INT 34
23566: PUSH
23567: LD_INT 12
23569: PUSH
23570: EMPTY
23571: LIST
23572: LIST
23573: PUSH
23574: LD_INT 34
23576: PUSH
23577: LD_INT 51
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 34
23586: PUSH
23587: LD_INT 32
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 69
23609: ST_TO_ADDR
// if not tmp then
23610: LD_VAR 0 2
23614: NOT
23615: IFFALSE 23619
// exit ;
23617: GO 23669
// for i in tmp do
23619: LD_ADDR_VAR 0 1
23623: PUSH
23624: LD_VAR 0 2
23628: PUSH
23629: FOR_IN
23630: IFFALSE 23667
// if GetCargo ( i , mat_artifact ) = 0 then
23632: LD_VAR 0 1
23636: PPUSH
23637: LD_INT 4
23639: PPUSH
23640: CALL_OW 289
23644: PUSH
23645: LD_INT 0
23647: EQUAL
23648: IFFALSE 23665
// SetCargo ( i , mat_siberit , 100 ) ;
23650: LD_VAR 0 1
23654: PPUSH
23655: LD_INT 3
23657: PPUSH
23658: LD_INT 100
23660: PPUSH
23661: CALL_OW 290
23665: GO 23629
23667: POP
23668: POP
// end ;
23669: PPOPN 2
23671: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23672: LD_EXP 33
23676: PUSH
23677: LD_EXP 78
23681: AND
23682: IFFALSE 23865
23684: GO 23686
23686: DISABLE
23687: LD_INT 0
23689: PPUSH
23690: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23691: LD_ADDR_VAR 0 2
23695: PUSH
23696: LD_INT 22
23698: PUSH
23699: LD_OWVAR 2
23703: PUSH
23704: EMPTY
23705: LIST
23706: LIST
23707: PPUSH
23708: CALL_OW 69
23712: ST_TO_ADDR
// if not tmp then
23713: LD_VAR 0 2
23717: NOT
23718: IFFALSE 23722
// exit ;
23720: GO 23865
// for i := 1 to 2 do
23722: LD_ADDR_VAR 0 1
23726: PUSH
23727: DOUBLE
23728: LD_INT 1
23730: DEC
23731: ST_TO_ADDR
23732: LD_INT 2
23734: PUSH
23735: FOR_TO
23736: IFFALSE 23863
// begin uc_side := your_side ;
23738: LD_ADDR_OWVAR 20
23742: PUSH
23743: LD_OWVAR 2
23747: ST_TO_ADDR
// uc_nation := nation_american ;
23748: LD_ADDR_OWVAR 21
23752: PUSH
23753: LD_INT 1
23755: ST_TO_ADDR
// vc_chassis := us_morphling ;
23756: LD_ADDR_OWVAR 37
23760: PUSH
23761: LD_INT 5
23763: ST_TO_ADDR
// vc_engine := engine_siberite ;
23764: LD_ADDR_OWVAR 39
23768: PUSH
23769: LD_INT 3
23771: ST_TO_ADDR
// vc_control := control_computer ;
23772: LD_ADDR_OWVAR 38
23776: PUSH
23777: LD_INT 3
23779: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23780: LD_ADDR_OWVAR 40
23784: PUSH
23785: LD_INT 10
23787: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23788: LD_VAR 0 2
23792: PUSH
23793: LD_INT 1
23795: ARRAY
23796: PPUSH
23797: CALL_OW 310
23801: NOT
23802: IFFALSE 23849
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23804: CALL_OW 45
23808: PPUSH
23809: LD_VAR 0 2
23813: PUSH
23814: LD_INT 1
23816: ARRAY
23817: PPUSH
23818: CALL_OW 250
23822: PPUSH
23823: LD_VAR 0 2
23827: PUSH
23828: LD_INT 1
23830: ARRAY
23831: PPUSH
23832: CALL_OW 251
23836: PPUSH
23837: LD_INT 12
23839: PPUSH
23840: LD_INT 1
23842: PPUSH
23843: CALL_OW 50
23847: GO 23861
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23849: CALL_OW 45
23853: PPUSH
23854: LD_INT 1
23856: PPUSH
23857: CALL_OW 51
// end ;
23861: GO 23735
23863: POP
23864: POP
// end ;
23865: PPOPN 2
23867: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23868: LD_EXP 33
23872: PUSH
23873: LD_EXP 79
23877: AND
23878: IFFALSE 24100
23880: GO 23882
23882: DISABLE
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
23887: PPUSH
23888: PPUSH
23889: PPUSH
23890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23891: LD_ADDR_VAR 0 6
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_OWVAR 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 21
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 3
23920: PUSH
23921: LD_INT 23
23923: PUSH
23924: LD_INT 0
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PPUSH
23940: CALL_OW 69
23944: ST_TO_ADDR
// if not tmp then
23945: LD_VAR 0 6
23949: NOT
23950: IFFALSE 23954
// exit ;
23952: GO 24100
// s1 := rand ( 1 , 4 ) ;
23954: LD_ADDR_VAR 0 2
23958: PUSH
23959: LD_INT 1
23961: PPUSH
23962: LD_INT 4
23964: PPUSH
23965: CALL_OW 12
23969: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23970: LD_ADDR_VAR 0 4
23974: PUSH
23975: LD_VAR 0 6
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: LD_VAR 0 2
23988: PPUSH
23989: CALL_OW 259
23993: ST_TO_ADDR
// if s1 = 1 then
23994: LD_VAR 0 2
23998: PUSH
23999: LD_INT 1
24001: EQUAL
24002: IFFALSE 24022
// s2 := rand ( 2 , 4 ) else
24004: LD_ADDR_VAR 0 3
24008: PUSH
24009: LD_INT 2
24011: PPUSH
24012: LD_INT 4
24014: PPUSH
24015: CALL_OW 12
24019: ST_TO_ADDR
24020: GO 24030
// s2 := 1 ;
24022: LD_ADDR_VAR 0 3
24026: PUSH
24027: LD_INT 1
24029: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 6
24039: PUSH
24040: LD_INT 1
24042: ARRAY
24043: PPUSH
24044: LD_VAR 0 3
24048: PPUSH
24049: CALL_OW 259
24053: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24054: LD_VAR 0 6
24058: PUSH
24059: LD_INT 1
24061: ARRAY
24062: PPUSH
24063: LD_VAR 0 2
24067: PPUSH
24068: LD_VAR 0 5
24072: PPUSH
24073: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24077: LD_VAR 0 6
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PPUSH
24086: LD_VAR 0 3
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: CALL_OW 237
// end ;
24100: PPOPN 6
24102: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24103: LD_EXP 33
24107: PUSH
24108: LD_EXP 80
24112: AND
24113: IFFALSE 24192
24115: GO 24117
24117: DISABLE
24118: LD_INT 0
24120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24121: LD_ADDR_VAR 0 1
24125: PUSH
24126: LD_INT 22
24128: PUSH
24129: LD_OWVAR 2
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: PUSH
24138: LD_INT 30
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PPUSH
24152: CALL_OW 69
24156: ST_TO_ADDR
// if not tmp then
24157: LD_VAR 0 1
24161: NOT
24162: IFFALSE 24166
// exit ;
24164: GO 24192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24166: LD_VAR 0 1
24170: PUSH
24171: LD_INT 1
24173: PPUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 12
24183: ARRAY
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 234
// end ;
24192: PPOPN 1
24194: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24195: LD_EXP 33
24199: PUSH
24200: LD_EXP 81
24204: AND
24205: IFFALSE 24317
24207: GO 24209
24209: DISABLE
24210: LD_INT 0
24212: PPUSH
24213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24214: LD_ADDR_VAR 0 2
24218: PUSH
24219: LD_INT 22
24221: PUSH
24222: LD_OWVAR 2
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: LD_INT 30
24236: PUSH
24237: LD_INT 27
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 30
24246: PUSH
24247: LD_INT 26
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 30
24256: PUSH
24257: LD_INT 28
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: LIST
24268: LIST
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PPUSH
24274: CALL_OW 69
24278: ST_TO_ADDR
// if not tmp then
24279: LD_VAR 0 2
24283: NOT
24284: IFFALSE 24288
// exit ;
24286: GO 24317
// for i in tmp do
24288: LD_ADDR_VAR 0 1
24292: PUSH
24293: LD_VAR 0 2
24297: PUSH
24298: FOR_IN
24299: IFFALSE 24315
// SetLives ( i , 1 ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 1
24308: PPUSH
24309: CALL_OW 234
24313: GO 24298
24315: POP
24316: POP
// end ;
24317: PPOPN 2
24319: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24320: LD_EXP 33
24324: PUSH
24325: LD_EXP 82
24329: AND
24330: IFFALSE 24617
24332: GO 24334
24334: DISABLE
24335: LD_INT 0
24337: PPUSH
24338: PPUSH
24339: PPUSH
// begin i := rand ( 1 , 7 ) ;
24340: LD_ADDR_VAR 0 1
24344: PUSH
24345: LD_INT 1
24347: PPUSH
24348: LD_INT 7
24350: PPUSH
24351: CALL_OW 12
24355: ST_TO_ADDR
// case i of 1 :
24356: LD_VAR 0 1
24360: PUSH
24361: LD_INT 1
24363: DOUBLE
24364: EQUAL
24365: IFTRUE 24369
24367: GO 24379
24369: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24370: LD_STRING earthquake(getX(game), 0, 32)
24372: PPUSH
24373: CALL_OW 559
24377: GO 24617
24379: LD_INT 2
24381: DOUBLE
24382: EQUAL
24383: IFTRUE 24387
24385: GO 24401
24387: POP
// begin ToLua ( displayStucuk(); ) ;
24388: LD_STRING displayStucuk();
24390: PPUSH
24391: CALL_OW 559
// ResetFog ;
24395: CALL_OW 335
// end ; 3 :
24399: GO 24617
24401: LD_INT 3
24403: DOUBLE
24404: EQUAL
24405: IFTRUE 24409
24407: GO 24513
24409: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_INT 22
24417: PUSH
24418: LD_OWVAR 2
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 25
24429: PUSH
24430: LD_INT 1
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: EMPTY
24438: LIST
24439: LIST
24440: PPUSH
24441: CALL_OW 69
24445: ST_TO_ADDR
// if not tmp then
24446: LD_VAR 0 2
24450: NOT
24451: IFFALSE 24455
// exit ;
24453: GO 24617
// un := tmp [ rand ( 1 , tmp ) ] ;
24455: LD_ADDR_VAR 0 3
24459: PUSH
24460: LD_VAR 0 2
24464: PUSH
24465: LD_INT 1
24467: PPUSH
24468: LD_VAR 0 2
24472: PPUSH
24473: CALL_OW 12
24477: ARRAY
24478: ST_TO_ADDR
// if Crawls ( un ) then
24479: LD_VAR 0 3
24483: PPUSH
24484: CALL_OW 318
24488: IFFALSE 24499
// ComWalk ( un ) ;
24490: LD_VAR 0 3
24494: PPUSH
24495: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24499: LD_VAR 0 3
24503: PPUSH
24504: LD_INT 8
24506: PPUSH
24507: CALL_OW 336
// end ; 4 :
24511: GO 24617
24513: LD_INT 4
24515: DOUBLE
24516: EQUAL
24517: IFTRUE 24521
24519: GO 24595
24521: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24522: LD_ADDR_VAR 0 2
24526: PUSH
24527: LD_INT 22
24529: PUSH
24530: LD_OWVAR 2
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 30
24541: PUSH
24542: LD_INT 29
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PPUSH
24553: CALL_OW 69
24557: ST_TO_ADDR
// if not tmp then
24558: LD_VAR 0 2
24562: NOT
24563: IFFALSE 24567
// exit ;
24565: GO 24617
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24567: LD_VAR 0 2
24571: PUSH
24572: LD_INT 1
24574: ARRAY
24575: PPUSH
24576: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24580: LD_VAR 0 2
24584: PUSH
24585: LD_INT 1
24587: ARRAY
24588: PPUSH
24589: CALL_OW 65
// end ; 5 .. 7 :
24593: GO 24617
24595: LD_INT 5
24597: DOUBLE
24598: GREATEREQUAL
24599: IFFALSE 24607
24601: LD_INT 7
24603: DOUBLE
24604: LESSEQUAL
24605: IFTRUE 24609
24607: GO 24616
24609: POP
// StreamSibBomb ; end ;
24610: CALL 20854 0 0
24614: GO 24617
24616: POP
// end ;
24617: PPOPN 3
24619: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24620: LD_EXP 33
24624: PUSH
24625: LD_EXP 83
24629: AND
24630: IFFALSE 24786
24632: GO 24634
24634: DISABLE
24635: LD_INT 0
24637: PPUSH
24638: PPUSH
24639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24640: LD_ADDR_VAR 0 2
24644: PUSH
24645: LD_INT 81
24647: PUSH
24648: LD_OWVAR 2
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: LD_INT 21
24662: PUSH
24663: LD_INT 1
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 21
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PPUSH
24689: CALL_OW 69
24693: ST_TO_ADDR
// if not tmp then
24694: LD_VAR 0 2
24698: NOT
24699: IFFALSE 24703
// exit ;
24701: GO 24786
// p := 0 ;
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: LD_INT 0
24710: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24711: LD_INT 35
24713: PPUSH
24714: CALL_OW 67
// p := p + 1 ;
24718: LD_ADDR_VAR 0 3
24722: PUSH
24723: LD_VAR 0 3
24727: PUSH
24728: LD_INT 1
24730: PLUS
24731: ST_TO_ADDR
// for i in tmp do
24732: LD_ADDR_VAR 0 1
24736: PUSH
24737: LD_VAR 0 2
24741: PUSH
24742: FOR_IN
24743: IFFALSE 24774
// if GetLives ( i ) < 1000 then
24745: LD_VAR 0 1
24749: PPUSH
24750: CALL_OW 256
24754: PUSH
24755: LD_INT 1000
24757: LESS
24758: IFFALSE 24772
// SetLives ( i , 1000 ) ;
24760: LD_VAR 0 1
24764: PPUSH
24765: LD_INT 1000
24767: PPUSH
24768: CALL_OW 234
24772: GO 24742
24774: POP
24775: POP
// until p > 20 ;
24776: LD_VAR 0 3
24780: PUSH
24781: LD_INT 20
24783: GREATER
24784: IFFALSE 24711
// end ;
24786: PPOPN 3
24788: END
// every 0 0$1 trigger StreamModeActive and sTime do
24789: LD_EXP 33
24793: PUSH
24794: LD_EXP 84
24798: AND
24799: IFFALSE 24834
24801: GO 24803
24803: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24804: LD_INT 28
24806: PPUSH
24807: LD_OWVAR 2
24811: PPUSH
24812: LD_INT 2
24814: PPUSH
24815: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24819: LD_INT 30
24821: PPUSH
24822: LD_OWVAR 2
24826: PPUSH
24827: LD_INT 2
24829: PPUSH
24830: CALL_OW 322
// end ;
24834: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24835: LD_EXP 33
24839: PUSH
24840: LD_EXP 85
24844: AND
24845: IFFALSE 24966
24847: GO 24849
24849: DISABLE
24850: LD_INT 0
24852: PPUSH
24853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24854: LD_ADDR_VAR 0 2
24858: PUSH
24859: LD_INT 22
24861: PUSH
24862: LD_OWVAR 2
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 21
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 3
24883: PUSH
24884: LD_INT 23
24886: PUSH
24887: LD_INT 0
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: ST_TO_ADDR
// if not tmp then
24908: LD_VAR 0 2
24912: NOT
24913: IFFALSE 24917
// exit ;
24915: GO 24966
// for i in tmp do
24917: LD_ADDR_VAR 0 1
24921: PUSH
24922: LD_VAR 0 2
24926: PUSH
24927: FOR_IN
24928: IFFALSE 24964
// begin if Crawls ( i ) then
24930: LD_VAR 0 1
24934: PPUSH
24935: CALL_OW 318
24939: IFFALSE 24950
// ComWalk ( i ) ;
24941: LD_VAR 0 1
24945: PPUSH
24946: CALL_OW 138
// SetClass ( i , 2 ) ;
24950: LD_VAR 0 1
24954: PPUSH
24955: LD_INT 2
24957: PPUSH
24958: CALL_OW 336
// end ;
24962: GO 24927
24964: POP
24965: POP
// end ;
24966: PPOPN 2
24968: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24969: LD_EXP 33
24973: PUSH
24974: LD_EXP 86
24978: AND
24979: IFFALSE 25267
24981: GO 24983
24983: DISABLE
24984: LD_INT 0
24986: PPUSH
24987: PPUSH
24988: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24989: LD_OWVAR 2
24993: PPUSH
24994: LD_INT 9
24996: PPUSH
24997: LD_INT 1
24999: PPUSH
25000: LD_INT 1
25002: PPUSH
25003: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25007: LD_INT 9
25009: PPUSH
25010: LD_OWVAR 2
25014: PPUSH
25015: CALL_OW 343
// uc_side := 9 ;
25019: LD_ADDR_OWVAR 20
25023: PUSH
25024: LD_INT 9
25026: ST_TO_ADDR
// uc_nation := 2 ;
25027: LD_ADDR_OWVAR 21
25031: PUSH
25032: LD_INT 2
25034: ST_TO_ADDR
// hc_name := Dark Warrior ;
25035: LD_ADDR_OWVAR 26
25039: PUSH
25040: LD_STRING Dark Warrior
25042: ST_TO_ADDR
// hc_gallery :=  ;
25043: LD_ADDR_OWVAR 33
25047: PUSH
25048: LD_STRING 
25050: ST_TO_ADDR
// hc_noskilllimit := true ;
25051: LD_ADDR_OWVAR 76
25055: PUSH
25056: LD_INT 1
25058: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25059: LD_ADDR_OWVAR 31
25063: PUSH
25064: LD_INT 30
25066: PUSH
25067: LD_INT 30
25069: PUSH
25070: LD_INT 30
25072: PUSH
25073: LD_INT 30
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: ST_TO_ADDR
// un := CreateHuman ;
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: CALL_OW 44
25091: ST_TO_ADDR
// hc_noskilllimit := false ;
25092: LD_ADDR_OWVAR 76
25096: PUSH
25097: LD_INT 0
25099: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25100: LD_VAR 0 3
25104: PPUSH
25105: LD_INT 1
25107: PPUSH
25108: CALL_OW 51
// ToLua ( playRanger() ) ;
25112: LD_STRING playRanger()
25114: PPUSH
25115: CALL_OW 559
// p := 0 ;
25119: LD_ADDR_VAR 0 2
25123: PUSH
25124: LD_INT 0
25126: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25127: LD_INT 35
25129: PPUSH
25130: CALL_OW 67
// p := p + 1 ;
25134: LD_ADDR_VAR 0 2
25138: PUSH
25139: LD_VAR 0 2
25143: PUSH
25144: LD_INT 1
25146: PLUS
25147: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25148: LD_VAR 0 3
25152: PPUSH
25153: CALL_OW 256
25157: PUSH
25158: LD_INT 1000
25160: LESS
25161: IFFALSE 25175
// SetLives ( un , 1000 ) ;
25163: LD_VAR 0 3
25167: PPUSH
25168: LD_INT 1000
25170: PPUSH
25171: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25175: LD_VAR 0 3
25179: PPUSH
25180: LD_INT 81
25182: PUSH
25183: LD_OWVAR 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 91
25194: PUSH
25195: LD_VAR 0 3
25199: PUSH
25200: LD_INT 30
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PUSH
25208: EMPTY
25209: LIST
25210: LIST
25211: PPUSH
25212: CALL_OW 69
25216: PPUSH
25217: LD_VAR 0 3
25221: PPUSH
25222: CALL_OW 74
25226: PPUSH
25227: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25231: LD_VAR 0 2
25235: PUSH
25236: LD_INT 80
25238: GREATER
25239: PUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: CALL_OW 301
25249: OR
25250: IFFALSE 25127
// if un then
25252: LD_VAR 0 3
25256: IFFALSE 25267
// RemoveUnit ( un ) ;
25258: LD_VAR 0 3
25262: PPUSH
25263: CALL_OW 64
// end ;
25267: PPOPN 3
25269: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25270: LD_EXP 87
25274: IFFALSE 25390
25276: GO 25278
25278: DISABLE
25279: LD_INT 0
25281: PPUSH
25282: PPUSH
25283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25284: LD_ADDR_VAR 0 2
25288: PUSH
25289: LD_INT 81
25291: PUSH
25292: LD_OWVAR 2
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 21
25303: PUSH
25304: LD_INT 1
25306: PUSH
25307: EMPTY
25308: LIST
25309: LIST
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PPUSH
25315: CALL_OW 69
25319: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25320: LD_STRING playComputer()
25322: PPUSH
25323: CALL_OW 559
// if not tmp then
25327: LD_VAR 0 2
25331: NOT
25332: IFFALSE 25336
// exit ;
25334: GO 25390
// for i in tmp do
25336: LD_ADDR_VAR 0 1
25340: PUSH
25341: LD_VAR 0 2
25345: PUSH
25346: FOR_IN
25347: IFFALSE 25388
// for j := 1 to 4 do
25349: LD_ADDR_VAR 0 3
25353: PUSH
25354: DOUBLE
25355: LD_INT 1
25357: DEC
25358: ST_TO_ADDR
25359: LD_INT 4
25361: PUSH
25362: FOR_TO
25363: IFFALSE 25384
// SetSkill ( i , j , 10 ) ;
25365: LD_VAR 0 1
25369: PPUSH
25370: LD_VAR 0 3
25374: PPUSH
25375: LD_INT 10
25377: PPUSH
25378: CALL_OW 237
25382: GO 25362
25384: POP
25385: POP
25386: GO 25346
25388: POP
25389: POP
// end ;
25390: PPOPN 3
25392: END
// every 0 0$1 trigger s30 do var i , tmp ;
25393: LD_EXP 88
25397: IFFALSE 25466
25399: GO 25401
25401: DISABLE
25402: LD_INT 0
25404: PPUSH
25405: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25406: LD_ADDR_VAR 0 2
25410: PUSH
25411: LD_INT 22
25413: PUSH
25414: LD_OWVAR 2
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PPUSH
25423: CALL_OW 69
25427: ST_TO_ADDR
// if not tmp then
25428: LD_VAR 0 2
25432: NOT
25433: IFFALSE 25437
// exit ;
25435: GO 25466
// for i in tmp do
25437: LD_ADDR_VAR 0 1
25441: PUSH
25442: LD_VAR 0 2
25446: PUSH
25447: FOR_IN
25448: IFFALSE 25464
// SetLives ( i , 300 ) ;
25450: LD_VAR 0 1
25454: PPUSH
25455: LD_INT 300
25457: PPUSH
25458: CALL_OW 234
25462: GO 25447
25464: POP
25465: POP
// end ;
25466: PPOPN 2
25468: END
// every 0 0$1 trigger s60 do var i , tmp ;
25469: LD_EXP 89
25473: IFFALSE 25542
25475: GO 25477
25477: DISABLE
25478: LD_INT 0
25480: PPUSH
25481: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25482: LD_ADDR_VAR 0 2
25486: PUSH
25487: LD_INT 22
25489: PUSH
25490: LD_OWVAR 2
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PPUSH
25499: CALL_OW 69
25503: ST_TO_ADDR
// if not tmp then
25504: LD_VAR 0 2
25508: NOT
25509: IFFALSE 25513
// exit ;
25511: GO 25542
// for i in tmp do
25513: LD_ADDR_VAR 0 1
25517: PUSH
25518: LD_VAR 0 2
25522: PUSH
25523: FOR_IN
25524: IFFALSE 25540
// SetLives ( i , 600 ) ;
25526: LD_VAR 0 1
25530: PPUSH
25531: LD_INT 600
25533: PPUSH
25534: CALL_OW 234
25538: GO 25523
25540: POP
25541: POP
// end ;
25542: PPOPN 2
25544: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25545: LD_INT 0
25547: PPUSH
// case cmd of 301 :
25548: LD_VAR 0 1
25552: PUSH
25553: LD_INT 301
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25593
25561: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25562: LD_VAR 0 6
25566: PPUSH
25567: LD_VAR 0 7
25571: PPUSH
25572: LD_VAR 0 8
25576: PPUSH
25577: LD_VAR 0 4
25581: PPUSH
25582: LD_VAR 0 5
25586: PPUSH
25587: CALL 26802 0 5
25591: GO 25714
25593: LD_INT 302
25595: DOUBLE
25596: EQUAL
25597: IFTRUE 25601
25599: GO 25638
25601: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25602: LD_VAR 0 6
25606: PPUSH
25607: LD_VAR 0 7
25611: PPUSH
25612: LD_VAR 0 8
25616: PPUSH
25617: LD_VAR 0 9
25621: PPUSH
25622: LD_VAR 0 4
25626: PPUSH
25627: LD_VAR 0 5
25631: PPUSH
25632: CALL 26893 0 6
25636: GO 25714
25638: LD_INT 303
25640: DOUBLE
25641: EQUAL
25642: IFTRUE 25646
25644: GO 25683
25646: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25647: LD_VAR 0 6
25651: PPUSH
25652: LD_VAR 0 7
25656: PPUSH
25657: LD_VAR 0 8
25661: PPUSH
25662: LD_VAR 0 9
25666: PPUSH
25667: LD_VAR 0 4
25671: PPUSH
25672: LD_VAR 0 5
25676: PPUSH
25677: CALL 25719 0 6
25681: GO 25714
25683: LD_INT 304
25685: DOUBLE
25686: EQUAL
25687: IFTRUE 25691
25689: GO 25713
25691: POP
// hHackTeleport ( unit , x , y ) ; end ;
25692: LD_VAR 0 2
25696: PPUSH
25697: LD_VAR 0 4
25701: PPUSH
25702: LD_VAR 0 5
25706: PPUSH
25707: CALL 27486 0 3
25711: GO 25714
25713: POP
// end ;
25714: LD_VAR 0 12
25718: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25719: LD_INT 0
25721: PPUSH
25722: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25723: LD_VAR 0 1
25727: PUSH
25728: LD_INT 1
25730: LESS
25731: PUSH
25732: LD_VAR 0 1
25736: PUSH
25737: LD_INT 3
25739: GREATER
25740: OR
25741: PUSH
25742: LD_VAR 0 5
25746: PPUSH
25747: LD_VAR 0 6
25751: PPUSH
25752: CALL_OW 428
25756: OR
25757: IFFALSE 25761
// exit ;
25759: GO 26489
// uc_side := your_side ;
25761: LD_ADDR_OWVAR 20
25765: PUSH
25766: LD_OWVAR 2
25770: ST_TO_ADDR
// uc_nation := nation ;
25771: LD_ADDR_OWVAR 21
25775: PUSH
25776: LD_VAR 0 1
25780: ST_TO_ADDR
// bc_level = 1 ;
25781: LD_ADDR_OWVAR 43
25785: PUSH
25786: LD_INT 1
25788: ST_TO_ADDR
// case btype of 1 :
25789: LD_VAR 0 2
25793: PUSH
25794: LD_INT 1
25796: DOUBLE
25797: EQUAL
25798: IFTRUE 25802
25800: GO 25813
25802: POP
// bc_type := b_depot ; 2 :
25803: LD_ADDR_OWVAR 42
25807: PUSH
25808: LD_INT 0
25810: ST_TO_ADDR
25811: GO 26433
25813: LD_INT 2
25815: DOUBLE
25816: EQUAL
25817: IFTRUE 25821
25819: GO 25832
25821: POP
// bc_type := b_warehouse ; 3 :
25822: LD_ADDR_OWVAR 42
25826: PUSH
25827: LD_INT 1
25829: ST_TO_ADDR
25830: GO 26433
25832: LD_INT 3
25834: DOUBLE
25835: EQUAL
25836: IFTRUE 25840
25838: GO 25851
25840: POP
// bc_type := b_lab ; 4 .. 9 :
25841: LD_ADDR_OWVAR 42
25845: PUSH
25846: LD_INT 6
25848: ST_TO_ADDR
25849: GO 26433
25851: LD_INT 4
25853: DOUBLE
25854: GREATEREQUAL
25855: IFFALSE 25863
25857: LD_INT 9
25859: DOUBLE
25860: LESSEQUAL
25861: IFTRUE 25865
25863: GO 25925
25865: POP
// begin bc_type := b_lab_half ;
25866: LD_ADDR_OWVAR 42
25870: PUSH
25871: LD_INT 7
25873: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25874: LD_ADDR_OWVAR 44
25878: PUSH
25879: LD_INT 10
25881: PUSH
25882: LD_INT 11
25884: PUSH
25885: LD_INT 12
25887: PUSH
25888: LD_INT 15
25890: PUSH
25891: LD_INT 14
25893: PUSH
25894: LD_INT 13
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: PUSH
25905: LD_VAR 0 2
25909: PUSH
25910: LD_INT 3
25912: MINUS
25913: ARRAY
25914: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25915: LD_ADDR_OWVAR 45
25919: PUSH
25920: LD_INT 9
25922: ST_TO_ADDR
// end ; 10 .. 13 :
25923: GO 26433
25925: LD_INT 10
25927: DOUBLE
25928: GREATEREQUAL
25929: IFFALSE 25937
25931: LD_INT 13
25933: DOUBLE
25934: LESSEQUAL
25935: IFTRUE 25939
25937: GO 26016
25939: POP
// begin bc_type := b_lab_full ;
25940: LD_ADDR_OWVAR 42
25944: PUSH
25945: LD_INT 8
25947: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25948: LD_ADDR_OWVAR 44
25952: PUSH
25953: LD_INT 10
25955: PUSH
25956: LD_INT 12
25958: PUSH
25959: LD_INT 14
25961: PUSH
25962: LD_INT 13
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: PUSH
25971: LD_VAR 0 2
25975: PUSH
25976: LD_INT 9
25978: MINUS
25979: ARRAY
25980: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25981: LD_ADDR_OWVAR 45
25985: PUSH
25986: LD_INT 11
25988: PUSH
25989: LD_INT 15
25991: PUSH
25992: LD_INT 12
25994: PUSH
25995: LD_INT 15
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: PUSH
26004: LD_VAR 0 2
26008: PUSH
26009: LD_INT 9
26011: MINUS
26012: ARRAY
26013: ST_TO_ADDR
// end ; 14 :
26014: GO 26433
26016: LD_INT 14
26018: DOUBLE
26019: EQUAL
26020: IFTRUE 26024
26022: GO 26035
26024: POP
// bc_type := b_workshop ; 15 :
26025: LD_ADDR_OWVAR 42
26029: PUSH
26030: LD_INT 2
26032: ST_TO_ADDR
26033: GO 26433
26035: LD_INT 15
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26054
26043: POP
// bc_type := b_factory ; 16 :
26044: LD_ADDR_OWVAR 42
26048: PUSH
26049: LD_INT 3
26051: ST_TO_ADDR
26052: GO 26433
26054: LD_INT 16
26056: DOUBLE
26057: EQUAL
26058: IFTRUE 26062
26060: GO 26073
26062: POP
// bc_type := b_ext_gun ; 17 :
26063: LD_ADDR_OWVAR 42
26067: PUSH
26068: LD_INT 17
26070: ST_TO_ADDR
26071: GO 26433
26073: LD_INT 17
26075: DOUBLE
26076: EQUAL
26077: IFTRUE 26081
26079: GO 26109
26081: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26082: LD_ADDR_OWVAR 42
26086: PUSH
26087: LD_INT 19
26089: PUSH
26090: LD_INT 23
26092: PUSH
26093: LD_INT 19
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: PUSH
26101: LD_VAR 0 1
26105: ARRAY
26106: ST_TO_ADDR
26107: GO 26433
26109: LD_INT 18
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26128
26117: POP
// bc_type := b_ext_radar ; 19 :
26118: LD_ADDR_OWVAR 42
26122: PUSH
26123: LD_INT 20
26125: ST_TO_ADDR
26126: GO 26433
26128: LD_INT 19
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26147
26136: POP
// bc_type := b_ext_radio ; 20 :
26137: LD_ADDR_OWVAR 42
26141: PUSH
26142: LD_INT 22
26144: ST_TO_ADDR
26145: GO 26433
26147: LD_INT 20
26149: DOUBLE
26150: EQUAL
26151: IFTRUE 26155
26153: GO 26166
26155: POP
// bc_type := b_ext_siberium ; 21 :
26156: LD_ADDR_OWVAR 42
26160: PUSH
26161: LD_INT 21
26163: ST_TO_ADDR
26164: GO 26433
26166: LD_INT 21
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26185
26174: POP
// bc_type := b_ext_computer ; 22 :
26175: LD_ADDR_OWVAR 42
26179: PUSH
26180: LD_INT 24
26182: ST_TO_ADDR
26183: GO 26433
26185: LD_INT 22
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26204
26193: POP
// bc_type := b_ext_track ; 23 :
26194: LD_ADDR_OWVAR 42
26198: PUSH
26199: LD_INT 16
26201: ST_TO_ADDR
26202: GO 26433
26204: LD_INT 23
26206: DOUBLE
26207: EQUAL
26208: IFTRUE 26212
26210: GO 26223
26212: POP
// bc_type := b_ext_laser ; 24 :
26213: LD_ADDR_OWVAR 42
26217: PUSH
26218: LD_INT 25
26220: ST_TO_ADDR
26221: GO 26433
26223: LD_INT 24
26225: DOUBLE
26226: EQUAL
26227: IFTRUE 26231
26229: GO 26242
26231: POP
// bc_type := b_control_tower ; 25 :
26232: LD_ADDR_OWVAR 42
26236: PUSH
26237: LD_INT 36
26239: ST_TO_ADDR
26240: GO 26433
26242: LD_INT 25
26244: DOUBLE
26245: EQUAL
26246: IFTRUE 26250
26248: GO 26261
26250: POP
// bc_type := b_breastwork ; 26 :
26251: LD_ADDR_OWVAR 42
26255: PUSH
26256: LD_INT 31
26258: ST_TO_ADDR
26259: GO 26433
26261: LD_INT 26
26263: DOUBLE
26264: EQUAL
26265: IFTRUE 26269
26267: GO 26280
26269: POP
// bc_type := b_bunker ; 27 :
26270: LD_ADDR_OWVAR 42
26274: PUSH
26275: LD_INT 32
26277: ST_TO_ADDR
26278: GO 26433
26280: LD_INT 27
26282: DOUBLE
26283: EQUAL
26284: IFTRUE 26288
26286: GO 26299
26288: POP
// bc_type := b_turret ; 28 :
26289: LD_ADDR_OWVAR 42
26293: PUSH
26294: LD_INT 33
26296: ST_TO_ADDR
26297: GO 26433
26299: LD_INT 28
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26318
26307: POP
// bc_type := b_armoury ; 29 :
26308: LD_ADDR_OWVAR 42
26312: PUSH
26313: LD_INT 4
26315: ST_TO_ADDR
26316: GO 26433
26318: LD_INT 29
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26337
26326: POP
// bc_type := b_barracks ; 30 :
26327: LD_ADDR_OWVAR 42
26331: PUSH
26332: LD_INT 5
26334: ST_TO_ADDR
26335: GO 26433
26337: LD_INT 30
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26356
26345: POP
// bc_type := b_solar_power ; 31 :
26346: LD_ADDR_OWVAR 42
26350: PUSH
26351: LD_INT 27
26353: ST_TO_ADDR
26354: GO 26433
26356: LD_INT 31
26358: DOUBLE
26359: EQUAL
26360: IFTRUE 26364
26362: GO 26375
26364: POP
// bc_type := b_oil_power ; 32 :
26365: LD_ADDR_OWVAR 42
26369: PUSH
26370: LD_INT 26
26372: ST_TO_ADDR
26373: GO 26433
26375: LD_INT 32
26377: DOUBLE
26378: EQUAL
26379: IFTRUE 26383
26381: GO 26394
26383: POP
// bc_type := b_siberite_power ; 33 :
26384: LD_ADDR_OWVAR 42
26388: PUSH
26389: LD_INT 28
26391: ST_TO_ADDR
26392: GO 26433
26394: LD_INT 33
26396: DOUBLE
26397: EQUAL
26398: IFTRUE 26402
26400: GO 26413
26402: POP
// bc_type := b_oil_mine ; 34 :
26403: LD_ADDR_OWVAR 42
26407: PUSH
26408: LD_INT 29
26410: ST_TO_ADDR
26411: GO 26433
26413: LD_INT 34
26415: DOUBLE
26416: EQUAL
26417: IFTRUE 26421
26419: GO 26432
26421: POP
// bc_type := b_siberite_mine ; end ;
26422: LD_ADDR_OWVAR 42
26426: PUSH
26427: LD_INT 30
26429: ST_TO_ADDR
26430: GO 26433
26432: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26433: LD_ADDR_VAR 0 8
26437: PUSH
26438: LD_VAR 0 5
26442: PPUSH
26443: LD_VAR 0 6
26447: PPUSH
26448: LD_VAR 0 3
26452: PPUSH
26453: CALL_OW 47
26457: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26458: LD_OWVAR 42
26462: PUSH
26463: LD_INT 32
26465: PUSH
26466: LD_INT 33
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: IN
26473: IFFALSE 26489
// PlaceWeaponTurret ( b , weapon ) ;
26475: LD_VAR 0 8
26479: PPUSH
26480: LD_VAR 0 4
26484: PPUSH
26485: CALL_OW 431
// end ;
26489: LD_VAR 0 7
26493: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26494: LD_INT 0
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26500: LD_ADDR_VAR 0 4
26504: PUSH
26505: LD_INT 22
26507: PUSH
26508: LD_OWVAR 2
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: PUSH
26520: LD_INT 30
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 30
26532: PUSH
26533: LD_INT 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PPUSH
26549: CALL_OW 69
26553: ST_TO_ADDR
// if not tmp then
26554: LD_VAR 0 4
26558: NOT
26559: IFFALSE 26563
// exit ;
26561: GO 26622
// for i in tmp do
26563: LD_ADDR_VAR 0 2
26567: PUSH
26568: LD_VAR 0 4
26572: PUSH
26573: FOR_IN
26574: IFFALSE 26620
// for j = 1 to 3 do
26576: LD_ADDR_VAR 0 3
26580: PUSH
26581: DOUBLE
26582: LD_INT 1
26584: DEC
26585: ST_TO_ADDR
26586: LD_INT 3
26588: PUSH
26589: FOR_TO
26590: IFFALSE 26616
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26592: LD_VAR 0 2
26596: PPUSH
26597: CALL_OW 274
26601: PPUSH
26602: LD_VAR 0 3
26606: PPUSH
26607: LD_INT 99999
26609: PPUSH
26610: CALL_OW 277
26614: GO 26589
26616: POP
26617: POP
26618: GO 26573
26620: POP
26621: POP
// end ;
26622: LD_VAR 0 1
26626: RET
// export function hHackSetLevel10 ; var i , j ; begin
26627: LD_INT 0
26629: PPUSH
26630: PPUSH
26631: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26632: LD_ADDR_VAR 0 2
26636: PUSH
26637: LD_INT 21
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 69
26651: PUSH
26652: FOR_IN
26653: IFFALSE 26705
// if IsSelected ( i ) then
26655: LD_VAR 0 2
26659: PPUSH
26660: CALL_OW 306
26664: IFFALSE 26703
// begin for j := 1 to 4 do
26666: LD_ADDR_VAR 0 3
26670: PUSH
26671: DOUBLE
26672: LD_INT 1
26674: DEC
26675: ST_TO_ADDR
26676: LD_INT 4
26678: PUSH
26679: FOR_TO
26680: IFFALSE 26701
// SetSkill ( i , j , 10 ) ;
26682: LD_VAR 0 2
26686: PPUSH
26687: LD_VAR 0 3
26691: PPUSH
26692: LD_INT 10
26694: PPUSH
26695: CALL_OW 237
26699: GO 26679
26701: POP
26702: POP
// end ;
26703: GO 26652
26705: POP
26706: POP
// end ;
26707: LD_VAR 0 1
26711: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26712: LD_INT 0
26714: PPUSH
26715: PPUSH
26716: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26717: LD_ADDR_VAR 0 2
26721: PUSH
26722: LD_INT 22
26724: PUSH
26725: LD_OWVAR 2
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: PUSH
26734: LD_INT 21
26736: PUSH
26737: LD_INT 1
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PPUSH
26748: CALL_OW 69
26752: PUSH
26753: FOR_IN
26754: IFFALSE 26795
// begin for j := 1 to 4 do
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: DOUBLE
26762: LD_INT 1
26764: DEC
26765: ST_TO_ADDR
26766: LD_INT 4
26768: PUSH
26769: FOR_TO
26770: IFFALSE 26791
// SetSkill ( i , j , 10 ) ;
26772: LD_VAR 0 2
26776: PPUSH
26777: LD_VAR 0 3
26781: PPUSH
26782: LD_INT 10
26784: PPUSH
26785: CALL_OW 237
26789: GO 26769
26791: POP
26792: POP
// end ;
26793: GO 26753
26795: POP
26796: POP
// end ;
26797: LD_VAR 0 1
26801: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26802: LD_INT 0
26804: PPUSH
// uc_side := your_side ;
26805: LD_ADDR_OWVAR 20
26809: PUSH
26810: LD_OWVAR 2
26814: ST_TO_ADDR
// uc_nation := nation ;
26815: LD_ADDR_OWVAR 21
26819: PUSH
26820: LD_VAR 0 1
26824: ST_TO_ADDR
// InitHc ;
26825: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26829: LD_INT 0
26831: PPUSH
26832: LD_VAR 0 2
26836: PPUSH
26837: LD_VAR 0 3
26841: PPUSH
26842: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26846: LD_VAR 0 4
26850: PPUSH
26851: LD_VAR 0 5
26855: PPUSH
26856: CALL_OW 428
26860: PUSH
26861: LD_INT 0
26863: EQUAL
26864: IFFALSE 26888
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26866: CALL_OW 44
26870: PPUSH
26871: LD_VAR 0 4
26875: PPUSH
26876: LD_VAR 0 5
26880: PPUSH
26881: LD_INT 1
26883: PPUSH
26884: CALL_OW 48
// end ;
26888: LD_VAR 0 6
26892: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26893: LD_INT 0
26895: PPUSH
26896: PPUSH
// uc_side := your_side ;
26897: LD_ADDR_OWVAR 20
26901: PUSH
26902: LD_OWVAR 2
26906: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26907: LD_VAR 0 1
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: LD_INT 3
26920: PUSH
26921: LD_INT 4
26923: PUSH
26924: LD_INT 5
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: IN
26934: IFFALSE 26946
// uc_nation := nation_american else
26936: LD_ADDR_OWVAR 21
26940: PUSH
26941: LD_INT 1
26943: ST_TO_ADDR
26944: GO 26989
// if chassis in [ 11 , 12 , 13 , 14 ] then
26946: LD_VAR 0 1
26950: PUSH
26951: LD_INT 11
26953: PUSH
26954: LD_INT 12
26956: PUSH
26957: LD_INT 13
26959: PUSH
26960: LD_INT 14
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: IN
26969: IFFALSE 26981
// uc_nation := nation_arabian else
26971: LD_ADDR_OWVAR 21
26975: PUSH
26976: LD_INT 2
26978: ST_TO_ADDR
26979: GO 26989
// uc_nation := nation_russian ;
26981: LD_ADDR_OWVAR 21
26985: PUSH
26986: LD_INT 3
26988: ST_TO_ADDR
// vc_chassis := chassis ;
26989: LD_ADDR_OWVAR 37
26993: PUSH
26994: LD_VAR 0 1
26998: ST_TO_ADDR
// vc_engine := engine ;
26999: LD_ADDR_OWVAR 39
27003: PUSH
27004: LD_VAR 0 2
27008: ST_TO_ADDR
// vc_control := control ;
27009: LD_ADDR_OWVAR 38
27013: PUSH
27014: LD_VAR 0 3
27018: ST_TO_ADDR
// vc_weapon := weapon ;
27019: LD_ADDR_OWVAR 40
27023: PUSH
27024: LD_VAR 0 4
27028: ST_TO_ADDR
// un := CreateVehicle ;
27029: LD_ADDR_VAR 0 8
27033: PUSH
27034: CALL_OW 45
27038: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27039: LD_VAR 0 8
27043: PPUSH
27044: LD_INT 0
27046: PPUSH
27047: LD_INT 5
27049: PPUSH
27050: CALL_OW 12
27054: PPUSH
27055: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27059: LD_VAR 0 8
27063: PPUSH
27064: LD_VAR 0 5
27068: PPUSH
27069: LD_VAR 0 6
27073: PPUSH
27074: LD_INT 1
27076: PPUSH
27077: CALL_OW 48
// end ;
27081: LD_VAR 0 7
27085: RET
// export hInvincible ; every 1 do
27086: GO 27088
27088: DISABLE
// hInvincible := [ ] ;
27089: LD_ADDR_EXP 90
27093: PUSH
27094: EMPTY
27095: ST_TO_ADDR
27096: END
// every 10 do var i ;
27097: GO 27099
27099: DISABLE
27100: LD_INT 0
27102: PPUSH
// begin enable ;
27103: ENABLE
// if not hInvincible then
27104: LD_EXP 90
27108: NOT
27109: IFFALSE 27113
// exit ;
27111: GO 27157
// for i in hInvincible do
27113: LD_ADDR_VAR 0 1
27117: PUSH
27118: LD_EXP 90
27122: PUSH
27123: FOR_IN
27124: IFFALSE 27155
// if GetLives ( i ) < 1000 then
27126: LD_VAR 0 1
27130: PPUSH
27131: CALL_OW 256
27135: PUSH
27136: LD_INT 1000
27138: LESS
27139: IFFALSE 27153
// SetLives ( i , 1000 ) ;
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 1000
27148: PPUSH
27149: CALL_OW 234
27153: GO 27123
27155: POP
27156: POP
// end ;
27157: PPOPN 1
27159: END
// export function hHackInvincible ; var i ; begin
27160: LD_INT 0
27162: PPUSH
27163: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27164: LD_ADDR_VAR 0 2
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 21
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: LD_INT 21
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: PPUSH
27197: CALL_OW 69
27201: PUSH
27202: FOR_IN
27203: IFFALSE 27264
// if IsSelected ( i ) then
27205: LD_VAR 0 2
27209: PPUSH
27210: CALL_OW 306
27214: IFFALSE 27262
// begin if i in hInvincible then
27216: LD_VAR 0 2
27220: PUSH
27221: LD_EXP 90
27225: IN
27226: IFFALSE 27246
// hInvincible := hInvincible diff i else
27228: LD_ADDR_EXP 90
27232: PUSH
27233: LD_EXP 90
27237: PUSH
27238: LD_VAR 0 2
27242: DIFF
27243: ST_TO_ADDR
27244: GO 27262
// hInvincible := hInvincible union i ;
27246: LD_ADDR_EXP 90
27250: PUSH
27251: LD_EXP 90
27255: PUSH
27256: LD_VAR 0 2
27260: UNION
27261: ST_TO_ADDR
// end ;
27262: GO 27202
27264: POP
27265: POP
// end ;
27266: LD_VAR 0 1
27270: RET
// export function hHackInvisible ; var i , j ; begin
27271: LD_INT 0
27273: PPUSH
27274: PPUSH
27275: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_INT 21
27283: PUSH
27284: LD_INT 1
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PPUSH
27291: CALL_OW 69
27295: PUSH
27296: FOR_IN
27297: IFFALSE 27321
// if IsSelected ( i ) then
27299: LD_VAR 0 2
27303: PPUSH
27304: CALL_OW 306
27308: IFFALSE 27319
// ComForceInvisible ( i ) ;
27310: LD_VAR 0 2
27314: PPUSH
27315: CALL_OW 496
27319: GO 27296
27321: POP
27322: POP
// end ;
27323: LD_VAR 0 1
27327: RET
// export function hHackChangeYourSide ; begin
27328: LD_INT 0
27330: PPUSH
// if your_side = 8 then
27331: LD_OWVAR 2
27335: PUSH
27336: LD_INT 8
27338: EQUAL
27339: IFFALSE 27351
// your_side := 0 else
27341: LD_ADDR_OWVAR 2
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
27349: GO 27365
// your_side := your_side + 1 ;
27351: LD_ADDR_OWVAR 2
27355: PUSH
27356: LD_OWVAR 2
27360: PUSH
27361: LD_INT 1
27363: PLUS
27364: ST_TO_ADDR
// end ;
27365: LD_VAR 0 1
27369: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27370: LD_INT 0
27372: PPUSH
27373: PPUSH
27374: PPUSH
// for i in all_units do
27375: LD_ADDR_VAR 0 2
27379: PUSH
27380: LD_OWVAR 3
27384: PUSH
27385: FOR_IN
27386: IFFALSE 27464
// if IsSelected ( i ) then
27388: LD_VAR 0 2
27392: PPUSH
27393: CALL_OW 306
27397: IFFALSE 27462
// begin j := GetSide ( i ) ;
27399: LD_ADDR_VAR 0 3
27403: PUSH
27404: LD_VAR 0 2
27408: PPUSH
27409: CALL_OW 255
27413: ST_TO_ADDR
// if j = 8 then
27414: LD_VAR 0 3
27418: PUSH
27419: LD_INT 8
27421: EQUAL
27422: IFFALSE 27434
// j := 0 else
27424: LD_ADDR_VAR 0 3
27428: PUSH
27429: LD_INT 0
27431: ST_TO_ADDR
27432: GO 27448
// j := j + 1 ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_VAR 0 3
27443: PUSH
27444: LD_INT 1
27446: PLUS
27447: ST_TO_ADDR
// SetSide ( i , j ) ;
27448: LD_VAR 0 2
27452: PPUSH
27453: LD_VAR 0 3
27457: PPUSH
27458: CALL_OW 235
// end ;
27462: GO 27385
27464: POP
27465: POP
// end ;
27466: LD_VAR 0 1
27470: RET
// export function hHackFog ; begin
27471: LD_INT 0
27473: PPUSH
// FogOff ( true ) ;
27474: LD_INT 1
27476: PPUSH
27477: CALL_OW 344
// end ;
27481: LD_VAR 0 1
27485: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27486: LD_INT 0
27488: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27489: LD_VAR 0 1
27493: PPUSH
27494: LD_VAR 0 2
27498: PPUSH
27499: LD_VAR 0 3
27503: PPUSH
27504: LD_INT 1
27506: PPUSH
27507: LD_INT 1
27509: PPUSH
27510: CALL_OW 483
// CenterOnXY ( x , y ) ;
27514: LD_VAR 0 2
27518: PPUSH
27519: LD_VAR 0 3
27523: PPUSH
27524: CALL_OW 84
// end ;
27528: LD_VAR 0 4
27532: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27537: LD_VAR 0 1
27541: NOT
27542: PUSH
27543: LD_VAR 0 2
27547: PPUSH
27548: LD_VAR 0 3
27552: PPUSH
27553: CALL_OW 488
27557: NOT
27558: OR
27559: PUSH
27560: LD_VAR 0 1
27564: PPUSH
27565: CALL_OW 266
27569: PUSH
27570: LD_INT 3
27572: NONEQUAL
27573: PUSH
27574: LD_VAR 0 1
27578: PPUSH
27579: CALL_OW 247
27583: PUSH
27584: LD_INT 1
27586: EQUAL
27587: NOT
27588: AND
27589: OR
27590: IFFALSE 27594
// exit ;
27592: GO 27876
// if GetType ( factory ) = unit_human then
27594: LD_VAR 0 1
27598: PPUSH
27599: CALL_OW 247
27603: PUSH
27604: LD_INT 1
27606: EQUAL
27607: IFFALSE 27624
// factory := IsInUnit ( factory ) ;
27609: LD_ADDR_VAR 0 1
27613: PUSH
27614: LD_VAR 0 1
27618: PPUSH
27619: CALL_OW 310
27623: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27624: LD_VAR 0 1
27628: PPUSH
27629: CALL_OW 266
27633: PUSH
27634: LD_INT 3
27636: NONEQUAL
27637: IFFALSE 27641
// exit ;
27639: GO 27876
// for i := 1 to Count ( factoryWaypoints ) do
27641: LD_ADDR_VAR 0 5
27645: PUSH
27646: DOUBLE
27647: LD_INT 1
27649: DEC
27650: ST_TO_ADDR
27651: LD_EXP 91
27655: PPUSH
27656: CALL 36379 0 1
27660: PUSH
27661: FOR_TO
27662: IFFALSE 27824
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
27664: LD_VAR 0 2
27668: PPUSH
27669: LD_VAR 0 3
27673: PPUSH
27674: CALL_OW 428
27678: PUSH
27679: LD_EXP 91
27683: PUSH
27684: LD_VAR 0 5
27688: ARRAY
27689: PUSH
27690: LD_INT 2
27692: ARRAY
27693: EQUAL
27694: IFFALSE 27726
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27696: LD_ADDR_EXP 91
27700: PUSH
27701: LD_EXP 91
27705: PPUSH
27706: LD_VAR 0 5
27710: PPUSH
27711: CALL_OW 3
27715: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27716: CALL 27881 0 0
// exit ;
27720: POP
27721: POP
27722: GO 27876
// end else
27724: GO 27822
// if factory = factoryWaypoints [ i ] [ 2 ] then
27726: LD_VAR 0 1
27730: PUSH
27731: LD_EXP 91
27735: PUSH
27736: LD_VAR 0 5
27740: ARRAY
27741: PUSH
27742: LD_INT 2
27744: ARRAY
27745: EQUAL
27746: IFFALSE 27822
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27748: LD_ADDR_EXP 91
27752: PUSH
27753: LD_EXP 91
27757: PPUSH
27758: LD_VAR 0 5
27762: PPUSH
27763: CALL_OW 3
27767: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27768: LD_ADDR_EXP 91
27772: PUSH
27773: LD_EXP 91
27777: PPUSH
27778: LD_VAR 0 1
27782: PPUSH
27783: CALL_OW 255
27787: PUSH
27788: LD_VAR 0 1
27792: PUSH
27793: LD_VAR 0 2
27797: PUSH
27798: LD_VAR 0 3
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: LIST
27807: LIST
27808: PPUSH
27809: CALL 71988 0 2
27813: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27814: CALL 27881 0 0
// exit ;
27818: POP
27819: POP
27820: GO 27876
// end ; end ;
27822: GO 27661
27824: POP
27825: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27826: LD_ADDR_EXP 91
27830: PUSH
27831: LD_EXP 91
27835: PPUSH
27836: LD_VAR 0 1
27840: PPUSH
27841: CALL_OW 255
27845: PUSH
27846: LD_VAR 0 1
27850: PUSH
27851: LD_VAR 0 2
27855: PUSH
27856: LD_VAR 0 3
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: PPUSH
27867: CALL 71988 0 2
27871: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27872: CALL 27881 0 0
// end ;
27876: LD_VAR 0 4
27880: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27881: LD_INT 0
27883: PPUSH
27884: PPUSH
27885: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27886: LD_STRING resetFactoryWaypoint();
27888: PPUSH
27889: CALL_OW 559
// if factoryWaypoints then
27893: LD_EXP 91
27897: IFFALSE 28018
// begin list := factoryWaypoints ;
27899: LD_ADDR_VAR 0 3
27903: PUSH
27904: LD_EXP 91
27908: ST_TO_ADDR
// for i := 1 to list do
27909: LD_ADDR_VAR 0 2
27913: PUSH
27914: DOUBLE
27915: LD_INT 1
27917: DEC
27918: ST_TO_ADDR
27919: LD_VAR 0 3
27923: PUSH
27924: FOR_TO
27925: IFFALSE 28016
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27927: LD_STRING setFactoryWaypointXY(
27929: PUSH
27930: LD_VAR 0 3
27934: PUSH
27935: LD_VAR 0 2
27939: ARRAY
27940: PUSH
27941: LD_INT 1
27943: ARRAY
27944: STR
27945: PUSH
27946: LD_STRING ,
27948: STR
27949: PUSH
27950: LD_VAR 0 3
27954: PUSH
27955: LD_VAR 0 2
27959: ARRAY
27960: PUSH
27961: LD_INT 2
27963: ARRAY
27964: STR
27965: PUSH
27966: LD_STRING ,
27968: STR
27969: PUSH
27970: LD_VAR 0 3
27974: PUSH
27975: LD_VAR 0 2
27979: ARRAY
27980: PUSH
27981: LD_INT 3
27983: ARRAY
27984: STR
27985: PUSH
27986: LD_STRING ,
27988: STR
27989: PUSH
27990: LD_VAR 0 3
27994: PUSH
27995: LD_VAR 0 2
27999: ARRAY
28000: PUSH
28001: LD_INT 4
28003: ARRAY
28004: STR
28005: PUSH
28006: LD_STRING )
28008: STR
28009: PPUSH
28010: CALL_OW 559
28014: GO 27924
28016: POP
28017: POP
// end ; end ;
28018: LD_VAR 0 1
28022: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
28023: LD_INT 0
28025: PPUSH
// if HexInfo ( x , y ) = warehouse then
28026: LD_VAR 0 2
28030: PPUSH
28031: LD_VAR 0 3
28035: PPUSH
28036: CALL_OW 428
28040: PUSH
28041: LD_VAR 0 1
28045: EQUAL
28046: IFFALSE 28073
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
28048: LD_ADDR_EXP 92
28052: PUSH
28053: LD_EXP 92
28057: PPUSH
28058: LD_VAR 0 1
28062: PPUSH
28063: LD_INT 0
28065: PPUSH
28066: CALL_OW 1
28070: ST_TO_ADDR
28071: GO 28124
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
28073: LD_ADDR_EXP 92
28077: PUSH
28078: LD_EXP 92
28082: PPUSH
28083: LD_VAR 0 1
28087: PPUSH
28088: LD_VAR 0 1
28092: PPUSH
28093: CALL_OW 255
28097: PUSH
28098: LD_VAR 0 1
28102: PUSH
28103: LD_VAR 0 2
28107: PUSH
28108: LD_VAR 0 3
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 1
28123: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
28124: CALL 28133 0 0
// end ;
28128: LD_VAR 0 4
28132: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
28133: LD_INT 0
28135: PPUSH
28136: PPUSH
28137: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
28138: LD_STRING resetWarehouseGatheringPoints();
28140: PPUSH
28141: CALL_OW 559
// if warehouseGatheringPoints then
28145: LD_EXP 92
28149: IFFALSE 28275
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: LD_EXP 92
28160: PPUSH
28161: CALL 75750 0 1
28165: ST_TO_ADDR
// for i := 1 to list do
28166: LD_ADDR_VAR 0 2
28170: PUSH
28171: DOUBLE
28172: LD_INT 1
28174: DEC
28175: ST_TO_ADDR
28176: LD_VAR 0 3
28180: PUSH
28181: FOR_TO
28182: IFFALSE 28273
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28184: LD_STRING setWarehouseGatheringPointXY(
28186: PUSH
28187: LD_VAR 0 3
28191: PUSH
28192: LD_VAR 0 2
28196: ARRAY
28197: PUSH
28198: LD_INT 1
28200: ARRAY
28201: STR
28202: PUSH
28203: LD_STRING ,
28205: STR
28206: PUSH
28207: LD_VAR 0 3
28211: PUSH
28212: LD_VAR 0 2
28216: ARRAY
28217: PUSH
28218: LD_INT 2
28220: ARRAY
28221: STR
28222: PUSH
28223: LD_STRING ,
28225: STR
28226: PUSH
28227: LD_VAR 0 3
28231: PUSH
28232: LD_VAR 0 2
28236: ARRAY
28237: PUSH
28238: LD_INT 3
28240: ARRAY
28241: STR
28242: PUSH
28243: LD_STRING ,
28245: STR
28246: PUSH
28247: LD_VAR 0 3
28251: PUSH
28252: LD_VAR 0 2
28256: ARRAY
28257: PUSH
28258: LD_INT 4
28260: ARRAY
28261: STR
28262: PUSH
28263: LD_STRING )
28265: STR
28266: PPUSH
28267: CALL_OW 559
28271: GO 28181
28273: POP
28274: POP
// end ; end ;
28275: LD_VAR 0 1
28279: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28280: LD_EXP 92
28284: IFFALSE 28969
28286: GO 28288
28288: DISABLE
28289: LD_INT 0
28291: PPUSH
28292: PPUSH
28293: PPUSH
28294: PPUSH
28295: PPUSH
28296: PPUSH
28297: PPUSH
28298: PPUSH
28299: PPUSH
// begin enable ;
28300: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: LD_EXP 92
28310: PPUSH
28311: CALL 75750 0 1
28315: ST_TO_ADDR
// if not list then
28316: LD_VAR 0 3
28320: NOT
28321: IFFALSE 28325
// exit ;
28323: GO 28969
// for i := 1 to list do
28325: LD_ADDR_VAR 0 1
28329: PUSH
28330: DOUBLE
28331: LD_INT 1
28333: DEC
28334: ST_TO_ADDR
28335: LD_VAR 0 3
28339: PUSH
28340: FOR_TO
28341: IFFALSE 28967
// begin depot := list [ i ] [ 2 ] ;
28343: LD_ADDR_VAR 0 8
28347: PUSH
28348: LD_VAR 0 3
28352: PUSH
28353: LD_VAR 0 1
28357: ARRAY
28358: PUSH
28359: LD_INT 2
28361: ARRAY
28362: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28363: LD_ADDR_VAR 0 5
28367: PUSH
28368: LD_VAR 0 3
28372: PUSH
28373: LD_VAR 0 1
28377: ARRAY
28378: PUSH
28379: LD_INT 1
28381: ARRAY
28382: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28383: LD_VAR 0 8
28387: PPUSH
28388: CALL_OW 301
28392: PUSH
28393: LD_VAR 0 5
28397: PUSH
28398: LD_VAR 0 8
28402: PPUSH
28403: CALL_OW 255
28407: NONEQUAL
28408: OR
28409: IFFALSE 28438
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28411: LD_ADDR_EXP 92
28415: PUSH
28416: LD_EXP 92
28420: PPUSH
28421: LD_VAR 0 8
28425: PPUSH
28426: LD_INT 0
28428: PPUSH
28429: CALL_OW 1
28433: ST_TO_ADDR
// exit ;
28434: POP
28435: POP
28436: GO 28969
// end ; x := list [ i ] [ 3 ] ;
28438: LD_ADDR_VAR 0 6
28442: PUSH
28443: LD_VAR 0 3
28447: PUSH
28448: LD_VAR 0 1
28452: ARRAY
28453: PUSH
28454: LD_INT 3
28456: ARRAY
28457: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28458: LD_ADDR_VAR 0 7
28462: PUSH
28463: LD_VAR 0 3
28467: PUSH
28468: LD_VAR 0 1
28472: ARRAY
28473: PUSH
28474: LD_INT 4
28476: ARRAY
28477: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28478: LD_ADDR_VAR 0 9
28482: PUSH
28483: LD_VAR 0 6
28487: PPUSH
28488: LD_VAR 0 7
28492: PPUSH
28493: LD_INT 16
28495: PPUSH
28496: CALL 74334 0 3
28500: ST_TO_ADDR
// if not cratesNearbyPoint then
28501: LD_VAR 0 9
28505: NOT
28506: IFFALSE 28512
// exit ;
28508: POP
28509: POP
28510: GO 28969
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28512: LD_ADDR_VAR 0 4
28516: PUSH
28517: LD_INT 22
28519: PUSH
28520: LD_VAR 0 5
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 3
28531: PUSH
28532: LD_INT 60
28534: PUSH
28535: EMPTY
28536: LIST
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 91
28544: PUSH
28545: LD_VAR 0 8
28549: PUSH
28550: LD_INT 6
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: LD_INT 25
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 25
28573: PUSH
28574: LD_INT 16
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL_OW 69
28596: PUSH
28597: LD_VAR 0 8
28601: PPUSH
28602: CALL_OW 313
28606: PPUSH
28607: LD_INT 3
28609: PUSH
28610: LD_INT 60
28612: PUSH
28613: EMPTY
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 2
28622: PUSH
28623: LD_INT 25
28625: PUSH
28626: LD_INT 2
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 25
28635: PUSH
28636: LD_INT 16
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 72
28656: UNION
28657: ST_TO_ADDR
// if tmp then
28658: LD_VAR 0 4
28662: IFFALSE 28742
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28664: LD_ADDR_VAR 0 4
28668: PUSH
28669: LD_VAR 0 4
28673: PPUSH
28674: LD_INT 3
28676: PPUSH
28677: CALL 72303 0 2
28681: ST_TO_ADDR
// for j in tmp do
28682: LD_ADDR_VAR 0 2
28686: PUSH
28687: LD_VAR 0 4
28691: PUSH
28692: FOR_IN
28693: IFFALSE 28736
// begin if IsInUnit ( j ) then
28695: LD_VAR 0 2
28699: PPUSH
28700: CALL_OW 310
28704: IFFALSE 28715
// ComExit ( j ) ;
28706: LD_VAR 0 2
28710: PPUSH
28711: CALL 72386 0 1
// AddComCollect ( j , x , y ) ;
28715: LD_VAR 0 2
28719: PPUSH
28720: LD_VAR 0 6
28724: PPUSH
28725: LD_VAR 0 7
28729: PPUSH
28730: CALL_OW 177
// end ;
28734: GO 28692
28736: POP
28737: POP
// exit ;
28738: POP
28739: POP
28740: GO 28969
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28742: LD_ADDR_VAR 0 4
28746: PUSH
28747: LD_INT 22
28749: PUSH
28750: LD_VAR 0 5
28754: PUSH
28755: EMPTY
28756: LIST
28757: LIST
28758: PUSH
28759: LD_INT 91
28761: PUSH
28762: LD_VAR 0 8
28766: PUSH
28767: LD_INT 8
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 2
28777: PUSH
28778: LD_INT 34
28780: PUSH
28781: LD_INT 12
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 34
28790: PUSH
28791: LD_INT 51
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 34
28800: PUSH
28801: LD_INT 32
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 34
28810: PUSH
28811: LD_INT 89
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: LIST
28823: LIST
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: PPUSH
28830: CALL_OW 69
28834: ST_TO_ADDR
// if tmp then
28835: LD_VAR 0 4
28839: IFFALSE 28965
// begin for j in tmp do
28841: LD_ADDR_VAR 0 2
28845: PUSH
28846: LD_VAR 0 4
28850: PUSH
28851: FOR_IN
28852: IFFALSE 28963
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28854: LD_VAR 0 2
28858: PPUSH
28859: CALL_OW 262
28863: PUSH
28864: LD_INT 3
28866: EQUAL
28867: PUSH
28868: LD_VAR 0 2
28872: PPUSH
28873: CALL_OW 261
28877: PUSH
28878: LD_INT 20
28880: GREATER
28881: OR
28882: PUSH
28883: LD_VAR 0 2
28887: PPUSH
28888: CALL_OW 314
28892: NOT
28893: AND
28894: PUSH
28895: LD_VAR 0 2
28899: PPUSH
28900: CALL_OW 263
28904: PUSH
28905: LD_INT 1
28907: NONEQUAL
28908: PUSH
28909: LD_VAR 0 2
28913: PPUSH
28914: CALL_OW 311
28918: OR
28919: AND
28920: IFFALSE 28961
// begin ComCollect ( j , x , y ) ;
28922: LD_VAR 0 2
28926: PPUSH
28927: LD_VAR 0 6
28931: PPUSH
28932: LD_VAR 0 7
28936: PPUSH
28937: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28941: LD_VAR 0 2
28945: PPUSH
28946: LD_VAR 0 8
28950: PPUSH
28951: CALL_OW 172
// exit ;
28955: POP
28956: POP
28957: POP
28958: POP
28959: GO 28969
// end ;
28961: GO 28851
28963: POP
28964: POP
// end ; end ;
28965: GO 28340
28967: POP
28968: POP
// end ; end_of_file
28969: PPOPN 9
28971: END
// export function SOS_UnitDestroyed ( un ) ; begin
28972: LD_INT 0
28974: PPUSH
// ComRadiation ( un ) ;
28975: LD_VAR 0 1
28979: PPUSH
28980: CALL 29961 0 1
// end ;
28984: LD_VAR 0 2
28988: RET
// export function SOS_UnitKamikazed ( un ) ; begin
28989: LD_INT 0
28991: PPUSH
// ComRadiation ( un ) ;
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL 29961 0 1
// end ;
29001: LD_VAR 0 2
29005: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29006: LD_INT 0
29008: PPUSH
// end ;
29009: LD_VAR 0 4
29013: RET
// export function SOS_Command ( cmd ) ; begin
29014: LD_INT 0
29016: PPUSH
// end ;
29017: LD_VAR 0 2
29021: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29022: LD_INT 0
29024: PPUSH
// end ;
29025: LD_VAR 0 6
29029: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
29030: LD_INT 0
29032: PPUSH
29033: PPUSH
29034: PPUSH
29035: PPUSH
29036: PPUSH
// if not vehicle or not factory then
29037: LD_VAR 0 1
29041: NOT
29042: PUSH
29043: LD_VAR 0 2
29047: NOT
29048: OR
29049: IFFALSE 29053
// exit ;
29051: GO 29552
// if not factoryWaypoints then
29053: LD_EXP 91
29057: NOT
29058: IFFALSE 29062
// exit ;
29060: GO 29552
// for i := 1 to Count ( factoryWaypoints ) do
29062: LD_ADDR_VAR 0 4
29066: PUSH
29067: DOUBLE
29068: LD_INT 1
29070: DEC
29071: ST_TO_ADDR
29072: LD_EXP 91
29076: PPUSH
29077: CALL 36379 0 1
29081: PUSH
29082: FOR_TO
29083: IFFALSE 29550
// if factoryWaypoints [ i ] [ 2 ] = factory then
29085: LD_EXP 91
29089: PUSH
29090: LD_VAR 0 4
29094: ARRAY
29095: PUSH
29096: LD_INT 2
29098: ARRAY
29099: PUSH
29100: LD_VAR 0 2
29104: EQUAL
29105: IFFALSE 29548
// begin if GetControl ( vehicle ) = control_manual then
29107: LD_VAR 0 1
29111: PPUSH
29112: CALL_OW 263
29116: PUSH
29117: LD_INT 1
29119: EQUAL
29120: IFFALSE 29431
// begin driver := IsDrivenBy ( vehicle ) ;
29122: LD_ADDR_VAR 0 6
29126: PUSH
29127: LD_VAR 0 1
29131: PPUSH
29132: CALL_OW 311
29136: ST_TO_ADDR
// tag := GetTag ( driver ) ;
29137: LD_ADDR_VAR 0 5
29141: PUSH
29142: LD_VAR 0 6
29146: PPUSH
29147: CALL_OW 110
29151: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
29152: LD_VAR 0 5
29156: PUSH
29157: LD_INT 501
29159: EQUAL
29160: PUSH
29161: LD_VAR 0 1
29165: PPUSH
29166: CALL_OW 110
29170: PUSH
29171: LD_INT 501
29173: EQUAL
29174: OR
29175: IFFALSE 29181
// exit ;
29177: POP
29178: POP
29179: GO 29552
// if not HasTask ( driver ) then
29181: LD_VAR 0 6
29185: PPUSH
29186: CALL_OW 314
29190: NOT
29191: IFFALSE 29429
// begin SetTag ( driver , tDriver ) ;
29193: LD_VAR 0 6
29197: PPUSH
29198: LD_INT 501
29200: PPUSH
29201: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
29205: LD_VAR 0 1
29209: PPUSH
29210: LD_INT 501
29212: PPUSH
29213: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29217: LD_ADDR_VAR 0 7
29221: PUSH
29222: LD_EXP 91
29226: PUSH
29227: LD_VAR 0 4
29231: ARRAY
29232: PUSH
29233: LD_INT 3
29235: ARRAY
29236: PPUSH
29237: LD_EXP 91
29241: PUSH
29242: LD_VAR 0 4
29246: ARRAY
29247: PUSH
29248: LD_INT 4
29250: ARRAY
29251: PPUSH
29252: CALL_OW 428
29256: ST_TO_ADDR
// if hex then
29257: LD_VAR 0 7
29261: IFFALSE 29279
// ComMoveUnit ( driver , hex ) else
29263: LD_VAR 0 6
29267: PPUSH
29268: LD_VAR 0 7
29272: PPUSH
29273: CALL_OW 112
29277: GO 29318
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29279: LD_VAR 0 6
29283: PPUSH
29284: LD_EXP 91
29288: PUSH
29289: LD_VAR 0 4
29293: ARRAY
29294: PUSH
29295: LD_INT 3
29297: ARRAY
29298: PPUSH
29299: LD_EXP 91
29303: PUSH
29304: LD_VAR 0 4
29308: ARRAY
29309: PUSH
29310: LD_INT 4
29312: ARRAY
29313: PPUSH
29314: CALL_OW 111
// AddComExitVehicle ( driver ) ;
29318: LD_VAR 0 6
29322: PPUSH
29323: CALL_OW 181
// if Multiplayer then
29327: LD_OWVAR 4
29331: IFFALSE 29380
// begin repeat wait ( 10 ) ;
29333: LD_INT 10
29335: PPUSH
29336: CALL_OW 67
// until not IsInUnit ( driver ) ;
29340: LD_VAR 0 6
29344: PPUSH
29345: CALL_OW 310
29349: NOT
29350: IFFALSE 29333
// if not HasTask ( driver ) then
29352: LD_VAR 0 6
29356: PPUSH
29357: CALL_OW 314
29361: NOT
29362: IFFALSE 29378
// ComEnterUnit ( driver , factory ) ;
29364: LD_VAR 0 6
29368: PPUSH
29369: LD_VAR 0 2
29373: PPUSH
29374: CALL_OW 120
// end else
29378: GO 29394
// AddComEnterUnit ( driver , factory ) ;
29380: LD_VAR 0 6
29384: PPUSH
29385: LD_VAR 0 2
29389: PPUSH
29390: CALL_OW 180
// wait ( 0 0$1 ) ;
29394: LD_INT 35
29396: PPUSH
29397: CALL_OW 67
// SetTag ( driver , tag ) ;
29401: LD_VAR 0 6
29405: PPUSH
29406: LD_VAR 0 5
29410: PPUSH
29411: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
29415: LD_VAR 0 1
29419: PPUSH
29420: LD_INT 0
29422: PPUSH
29423: CALL_OW 109
// break ;
29427: GO 29550
// end ; end else
29429: GO 29548
// if GetControl ( vehicle ) = control_remote then
29431: LD_VAR 0 1
29435: PPUSH
29436: CALL_OW 263
29440: PUSH
29441: LD_INT 2
29443: EQUAL
29444: IFFALSE 29507
// begin wait ( 0 0$2 ) ;
29446: LD_INT 70
29448: PPUSH
29449: CALL_OW 67
// if Connect ( vehicle ) then
29453: LD_VAR 0 1
29457: PPUSH
29458: CALL 42585 0 1
29462: IFFALSE 29503
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29464: LD_VAR 0 1
29468: PPUSH
29469: LD_EXP 91
29473: PUSH
29474: LD_VAR 0 4
29478: ARRAY
29479: PUSH
29480: LD_INT 3
29482: ARRAY
29483: PPUSH
29484: LD_EXP 91
29488: PUSH
29489: LD_VAR 0 4
29493: ARRAY
29494: PUSH
29495: LD_INT 4
29497: ARRAY
29498: PPUSH
29499: CALL_OW 171
// break ;
29503: GO 29550
// end else
29505: GO 29548
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29507: LD_VAR 0 1
29511: PPUSH
29512: LD_EXP 91
29516: PUSH
29517: LD_VAR 0 4
29521: ARRAY
29522: PUSH
29523: LD_INT 3
29525: ARRAY
29526: PPUSH
29527: LD_EXP 91
29531: PUSH
29532: LD_VAR 0 4
29536: ARRAY
29537: PUSH
29538: LD_INT 4
29540: ARRAY
29541: PPUSH
29542: CALL_OW 171
// break ;
29546: GO 29550
// end ; end ;
29548: GO 29082
29550: POP
29551: POP
// end ;
29552: LD_VAR 0 3
29556: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29557: LD_INT 0
29559: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29560: LD_VAR 0 1
29564: PUSH
29565: LD_INT 250
29567: EQUAL
29568: PUSH
29569: LD_VAR 0 2
29573: PPUSH
29574: CALL_OW 264
29578: PUSH
29579: LD_INT 81
29581: EQUAL
29582: AND
29583: IFFALSE 29604
// MinerPlaceMine ( unit , x , y ) ;
29585: LD_VAR 0 2
29589: PPUSH
29590: LD_VAR 0 4
29594: PPUSH
29595: LD_VAR 0 5
29599: PPUSH
29600: CALL 32696 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29604: LD_VAR 0 1
29608: PUSH
29609: LD_INT 251
29611: EQUAL
29612: PUSH
29613: LD_VAR 0 2
29617: PPUSH
29618: CALL_OW 264
29622: PUSH
29623: LD_INT 81
29625: EQUAL
29626: AND
29627: IFFALSE 29648
// MinerDetonateMine ( unit , x , y ) ;
29629: LD_VAR 0 2
29633: PPUSH
29634: LD_VAR 0 4
29638: PPUSH
29639: LD_VAR 0 5
29643: PPUSH
29644: CALL 32971 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29648: LD_VAR 0 1
29652: PUSH
29653: LD_INT 252
29655: EQUAL
29656: PUSH
29657: LD_VAR 0 2
29661: PPUSH
29662: CALL_OW 264
29666: PUSH
29667: LD_INT 81
29669: EQUAL
29670: AND
29671: IFFALSE 29692
// MinerCreateMinefield ( unit , x , y ) ;
29673: LD_VAR 0 2
29677: PPUSH
29678: LD_VAR 0 4
29682: PPUSH
29683: LD_VAR 0 5
29687: PPUSH
29688: CALL 33388 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29692: LD_VAR 0 1
29696: PUSH
29697: LD_INT 253
29699: EQUAL
29700: PUSH
29701: LD_VAR 0 2
29705: PPUSH
29706: CALL_OW 257
29710: PUSH
29711: LD_INT 5
29713: EQUAL
29714: AND
29715: IFFALSE 29736
// ComBinocular ( unit , x , y ) ;
29717: LD_VAR 0 2
29721: PPUSH
29722: LD_VAR 0 4
29726: PPUSH
29727: LD_VAR 0 5
29731: PPUSH
29732: CALL 33757 0 3
// if selectedUnit then
29736: LD_VAR 0 3
29740: IFFALSE 29796
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29742: LD_VAR 0 1
29746: PUSH
29747: LD_INT 254
29749: EQUAL
29750: PUSH
29751: LD_VAR 0 2
29755: PPUSH
29756: CALL_OW 264
29760: PUSH
29761: LD_INT 99
29763: EQUAL
29764: AND
29765: PUSH
29766: LD_VAR 0 3
29770: PPUSH
29771: CALL_OW 263
29775: PUSH
29776: LD_INT 3
29778: EQUAL
29779: AND
29780: IFFALSE 29796
// HackDestroyVehicle ( unit , selectedUnit ) ;
29782: LD_VAR 0 2
29786: PPUSH
29787: LD_VAR 0 3
29791: PPUSH
29792: CALL 32060 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29796: LD_VAR 0 1
29800: PUSH
29801: LD_INT 255
29803: EQUAL
29804: PUSH
29805: LD_VAR 0 2
29809: PPUSH
29810: CALL_OW 264
29814: PUSH
29815: LD_INT 14
29817: PUSH
29818: LD_INT 53
29820: PUSH
29821: EMPTY
29822: LIST
29823: LIST
29824: IN
29825: AND
29826: PUSH
29827: LD_VAR 0 4
29831: PPUSH
29832: LD_VAR 0 5
29836: PPUSH
29837: CALL_OW 488
29841: AND
29842: IFFALSE 29866
// CutTreeXYR ( unit , x , y , 12 ) ;
29844: LD_VAR 0 2
29848: PPUSH
29849: LD_VAR 0 4
29853: PPUSH
29854: LD_VAR 0 5
29858: PPUSH
29859: LD_INT 12
29861: PPUSH
29862: CALL 30057 0 4
// if cmd = 256 then
29866: LD_VAR 0 1
29870: PUSH
29871: LD_INT 256
29873: EQUAL
29874: IFFALSE 29895
// SetFactoryWaypoint ( unit , x , y ) ;
29876: LD_VAR 0 2
29880: PPUSH
29881: LD_VAR 0 4
29885: PPUSH
29886: LD_VAR 0 5
29890: PPUSH
29891: CALL 27533 0 3
// if cmd = 257 then
29895: LD_VAR 0 1
29899: PUSH
29900: LD_INT 257
29902: EQUAL
29903: IFFALSE 29924
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29905: LD_VAR 0 2
29909: PPUSH
29910: LD_VAR 0 4
29914: PPUSH
29915: LD_VAR 0 5
29919: PPUSH
29920: CALL 28023 0 3
// if cmd = 258 then
29924: LD_VAR 0 1
29928: PUSH
29929: LD_INT 258
29931: EQUAL
29932: IFFALSE 29956
// BurnTreeXYR ( unit , x , y , 8 ) ;
29934: LD_VAR 0 2
29938: PPUSH
29939: LD_VAR 0 4
29943: PPUSH
29944: LD_VAR 0 5
29948: PPUSH
29949: LD_INT 8
29951: PPUSH
29952: CALL 30451 0 4
// end ;
29956: LD_VAR 0 6
29960: RET
// export function ComRadiation ( un ) ; var eff ; begin
29961: LD_INT 0
29963: PPUSH
29964: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
29965: LD_VAR 0 1
29969: PPUSH
29970: CALL_OW 264
29974: PUSH
29975: LD_INT 91
29977: NONEQUAL
29978: IFFALSE 29982
// exit ;
29980: GO 30052
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29982: LD_INT 68
29984: PPUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL_OW 255
29994: PPUSH
29995: CALL_OW 321
29999: PUSH
30000: LD_INT 2
30002: EQUAL
30003: IFFALSE 30015
// eff := 70 else
30005: LD_ADDR_VAR 0 3
30009: PUSH
30010: LD_INT 70
30012: ST_TO_ADDR
30013: GO 30023
// eff := 30 ;
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_INT 30
30022: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30023: LD_VAR 0 1
30027: PPUSH
30028: CALL_OW 250
30032: PPUSH
30033: LD_VAR 0 1
30037: PPUSH
30038: CALL_OW 251
30042: PPUSH
30043: LD_VAR 0 3
30047: PPUSH
30048: CALL_OW 495
// end ;
30052: LD_VAR 0 2
30056: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30057: LD_INT 0
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
30064: PPUSH
30065: PPUSH
30066: PPUSH
30067: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
30068: LD_VAR 0 1
30072: PPUSH
30073: CALL_OW 302
30077: NOT
30078: PUSH
30079: LD_VAR 0 2
30083: PPUSH
30084: LD_VAR 0 3
30088: PPUSH
30089: CALL_OW 488
30093: NOT
30094: OR
30095: PUSH
30096: LD_VAR 0 4
30100: NOT
30101: OR
30102: IFFALSE 30106
// exit ;
30104: GO 30446
// list := [ ] ;
30106: LD_ADDR_VAR 0 13
30110: PUSH
30111: EMPTY
30112: ST_TO_ADDR
// if x - r < 0 then
30113: LD_VAR 0 2
30117: PUSH
30118: LD_VAR 0 4
30122: MINUS
30123: PUSH
30124: LD_INT 0
30126: LESS
30127: IFFALSE 30139
// min_x := 0 else
30129: LD_ADDR_VAR 0 7
30133: PUSH
30134: LD_INT 0
30136: ST_TO_ADDR
30137: GO 30155
// min_x := x - r ;
30139: LD_ADDR_VAR 0 7
30143: PUSH
30144: LD_VAR 0 2
30148: PUSH
30149: LD_VAR 0 4
30153: MINUS
30154: ST_TO_ADDR
// if y - r < 0 then
30155: LD_VAR 0 3
30159: PUSH
30160: LD_VAR 0 4
30164: MINUS
30165: PUSH
30166: LD_INT 0
30168: LESS
30169: IFFALSE 30181
// min_y := 0 else
30171: LD_ADDR_VAR 0 8
30175: PUSH
30176: LD_INT 0
30178: ST_TO_ADDR
30179: GO 30197
// min_y := y - r ;
30181: LD_ADDR_VAR 0 8
30185: PUSH
30186: LD_VAR 0 3
30190: PUSH
30191: LD_VAR 0 4
30195: MINUS
30196: ST_TO_ADDR
// max_x := x + r ;
30197: LD_ADDR_VAR 0 9
30201: PUSH
30202: LD_VAR 0 2
30206: PUSH
30207: LD_VAR 0 4
30211: PLUS
30212: ST_TO_ADDR
// max_y := y + r ;
30213: LD_ADDR_VAR 0 10
30217: PUSH
30218: LD_VAR 0 3
30222: PUSH
30223: LD_VAR 0 4
30227: PLUS
30228: ST_TO_ADDR
// for _x = min_x to max_x do
30229: LD_ADDR_VAR 0 11
30233: PUSH
30234: DOUBLE
30235: LD_VAR 0 7
30239: DEC
30240: ST_TO_ADDR
30241: LD_VAR 0 9
30245: PUSH
30246: FOR_TO
30247: IFFALSE 30364
// for _y = min_y to max_y do
30249: LD_ADDR_VAR 0 12
30253: PUSH
30254: DOUBLE
30255: LD_VAR 0 8
30259: DEC
30260: ST_TO_ADDR
30261: LD_VAR 0 10
30265: PUSH
30266: FOR_TO
30267: IFFALSE 30360
// begin if not ValidHex ( _x , _y ) then
30269: LD_VAR 0 11
30273: PPUSH
30274: LD_VAR 0 12
30278: PPUSH
30279: CALL_OW 488
30283: NOT
30284: IFFALSE 30288
// continue ;
30286: GO 30266
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30288: LD_VAR 0 11
30292: PPUSH
30293: LD_VAR 0 12
30297: PPUSH
30298: CALL_OW 351
30302: PUSH
30303: LD_VAR 0 11
30307: PPUSH
30308: LD_VAR 0 12
30312: PPUSH
30313: CALL_OW 554
30317: AND
30318: IFFALSE 30358
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30320: LD_ADDR_VAR 0 13
30324: PUSH
30325: LD_VAR 0 13
30329: PPUSH
30330: LD_VAR 0 13
30334: PUSH
30335: LD_INT 1
30337: PLUS
30338: PPUSH
30339: LD_VAR 0 11
30343: PUSH
30344: LD_VAR 0 12
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PPUSH
30353: CALL_OW 2
30357: ST_TO_ADDR
// end ;
30358: GO 30266
30360: POP
30361: POP
30362: GO 30246
30364: POP
30365: POP
// if not list then
30366: LD_VAR 0 13
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 30446
// for i in list do
30375: LD_ADDR_VAR 0 6
30379: PUSH
30380: LD_VAR 0 13
30384: PUSH
30385: FOR_IN
30386: IFFALSE 30444
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30388: LD_VAR 0 1
30392: PPUSH
30393: LD_STRING M
30395: PUSH
30396: LD_VAR 0 6
30400: PUSH
30401: LD_INT 1
30403: ARRAY
30404: PUSH
30405: LD_VAR 0 6
30409: PUSH
30410: LD_INT 2
30412: ARRAY
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: LD_INT 0
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: LD_INT 0
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: PUSH
30435: EMPTY
30436: LIST
30437: PPUSH
30438: CALL_OW 447
30442: GO 30385
30444: POP
30445: POP
// end ;
30446: LD_VAR 0 5
30450: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
30451: LD_INT 0
30453: PPUSH
30454: PPUSH
30455: PPUSH
30456: PPUSH
30457: PPUSH
30458: PPUSH
30459: PPUSH
30460: PPUSH
30461: PPUSH
30462: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
30463: LD_VAR 0 1
30467: PPUSH
30468: CALL_OW 302
30472: NOT
30473: PUSH
30474: LD_VAR 0 2
30478: PPUSH
30479: LD_VAR 0 3
30483: PPUSH
30484: CALL_OW 488
30488: NOT
30489: OR
30490: PUSH
30491: LD_VAR 0 4
30495: NOT
30496: OR
30497: IFFALSE 30501
// exit ;
30499: GO 31014
// list := [ ] ;
30501: LD_ADDR_VAR 0 13
30505: PUSH
30506: EMPTY
30507: ST_TO_ADDR
// if x - r < 0 then
30508: LD_VAR 0 2
30512: PUSH
30513: LD_VAR 0 4
30517: MINUS
30518: PUSH
30519: LD_INT 0
30521: LESS
30522: IFFALSE 30534
// min_x := 0 else
30524: LD_ADDR_VAR 0 7
30528: PUSH
30529: LD_INT 0
30531: ST_TO_ADDR
30532: GO 30550
// min_x := x - r ;
30534: LD_ADDR_VAR 0 7
30538: PUSH
30539: LD_VAR 0 2
30543: PUSH
30544: LD_VAR 0 4
30548: MINUS
30549: ST_TO_ADDR
// if y - r < 0 then
30550: LD_VAR 0 3
30554: PUSH
30555: LD_VAR 0 4
30559: MINUS
30560: PUSH
30561: LD_INT 0
30563: LESS
30564: IFFALSE 30576
// min_y := 0 else
30566: LD_ADDR_VAR 0 8
30570: PUSH
30571: LD_INT 0
30573: ST_TO_ADDR
30574: GO 30592
// min_y := y - r ;
30576: LD_ADDR_VAR 0 8
30580: PUSH
30581: LD_VAR 0 3
30585: PUSH
30586: LD_VAR 0 4
30590: MINUS
30591: ST_TO_ADDR
// max_x := x + r ;
30592: LD_ADDR_VAR 0 9
30596: PUSH
30597: LD_VAR 0 2
30601: PUSH
30602: LD_VAR 0 4
30606: PLUS
30607: ST_TO_ADDR
// max_y := y + r ;
30608: LD_ADDR_VAR 0 10
30612: PUSH
30613: LD_VAR 0 3
30617: PUSH
30618: LD_VAR 0 4
30622: PLUS
30623: ST_TO_ADDR
// for _x = min_x to max_x do
30624: LD_ADDR_VAR 0 11
30628: PUSH
30629: DOUBLE
30630: LD_VAR 0 7
30634: DEC
30635: ST_TO_ADDR
30636: LD_VAR 0 9
30640: PUSH
30641: FOR_TO
30642: IFFALSE 30759
// for _y = min_y to max_y do
30644: LD_ADDR_VAR 0 12
30648: PUSH
30649: DOUBLE
30650: LD_VAR 0 8
30654: DEC
30655: ST_TO_ADDR
30656: LD_VAR 0 10
30660: PUSH
30661: FOR_TO
30662: IFFALSE 30755
// begin if not ValidHex ( _x , _y ) then
30664: LD_VAR 0 11
30668: PPUSH
30669: LD_VAR 0 12
30673: PPUSH
30674: CALL_OW 488
30678: NOT
30679: IFFALSE 30683
// continue ;
30681: GO 30661
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30683: LD_VAR 0 11
30687: PPUSH
30688: LD_VAR 0 12
30692: PPUSH
30693: CALL_OW 351
30697: PUSH
30698: LD_VAR 0 11
30702: PPUSH
30703: LD_VAR 0 12
30707: PPUSH
30708: CALL_OW 554
30712: AND
30713: IFFALSE 30753
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30715: LD_ADDR_VAR 0 13
30719: PUSH
30720: LD_VAR 0 13
30724: PPUSH
30725: LD_VAR 0 13
30729: PUSH
30730: LD_INT 1
30732: PLUS
30733: PPUSH
30734: LD_VAR 0 11
30738: PUSH
30739: LD_VAR 0 12
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: PPUSH
30748: CALL_OW 2
30752: ST_TO_ADDR
// end ;
30753: GO 30661
30755: POP
30756: POP
30757: GO 30641
30759: POP
30760: POP
// if not list then
30761: LD_VAR 0 13
30765: NOT
30766: IFFALSE 30770
// exit ;
30768: GO 31014
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30770: LD_ADDR_VAR 0 13
30774: PUSH
30775: LD_VAR 0 1
30779: PPUSH
30780: LD_VAR 0 13
30784: PPUSH
30785: LD_INT 1
30787: PPUSH
30788: LD_INT 1
30790: PPUSH
30791: CALL 39727 0 4
30795: ST_TO_ADDR
// ComStop ( flame ) ;
30796: LD_VAR 0 1
30800: PPUSH
30801: CALL_OW 141
// for i in list do
30805: LD_ADDR_VAR 0 6
30809: PUSH
30810: LD_VAR 0 13
30814: PUSH
30815: FOR_IN
30816: IFFALSE 30847
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30818: LD_VAR 0 1
30822: PPUSH
30823: LD_VAR 0 6
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PPUSH
30832: LD_VAR 0 6
30836: PUSH
30837: LD_INT 2
30839: ARRAY
30840: PPUSH
30841: CALL_OW 176
30845: GO 30815
30847: POP
30848: POP
// repeat wait ( 0 0$1 ) ;
30849: LD_INT 35
30851: PPUSH
30852: CALL_OW 67
// task := GetTaskList ( flame ) ;
30856: LD_ADDR_VAR 0 14
30860: PUSH
30861: LD_VAR 0 1
30865: PPUSH
30866: CALL_OW 437
30870: ST_TO_ADDR
// if not task then
30871: LD_VAR 0 14
30875: NOT
30876: IFFALSE 30880
// exit ;
30878: GO 31014
// if task [ 1 ] [ 1 ] <> | then
30880: LD_VAR 0 14
30884: PUSH
30885: LD_INT 1
30887: ARRAY
30888: PUSH
30889: LD_INT 1
30891: ARRAY
30892: PUSH
30893: LD_STRING |
30895: NONEQUAL
30896: IFFALSE 30900
// exit ;
30898: GO 31014
// _x := task [ 1 ] [ 2 ] ;
30900: LD_ADDR_VAR 0 11
30904: PUSH
30905: LD_VAR 0 14
30909: PUSH
30910: LD_INT 1
30912: ARRAY
30913: PUSH
30914: LD_INT 2
30916: ARRAY
30917: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30918: LD_ADDR_VAR 0 12
30922: PUSH
30923: LD_VAR 0 14
30927: PUSH
30928: LD_INT 1
30930: ARRAY
30931: PUSH
30932: LD_INT 3
30934: ARRAY
30935: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30936: LD_VAR 0 11
30940: PPUSH
30941: LD_VAR 0 12
30945: PPUSH
30946: CALL_OW 351
30950: NOT
30951: PUSH
30952: LD_VAR 0 11
30956: PPUSH
30957: LD_VAR 0 12
30961: PPUSH
30962: CALL_OW 554
30966: NOT
30967: OR
30968: IFFALSE 31002
// begin task := Delete ( task , 1 ) ;
30970: LD_ADDR_VAR 0 14
30974: PUSH
30975: LD_VAR 0 14
30979: PPUSH
30980: LD_INT 1
30982: PPUSH
30983: CALL_OW 3
30987: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30988: LD_VAR 0 1
30992: PPUSH
30993: LD_VAR 0 14
30997: PPUSH
30998: CALL_OW 446
// end ; until not HasTask ( flame ) ;
31002: LD_VAR 0 1
31006: PPUSH
31007: CALL_OW 314
31011: NOT
31012: IFFALSE 30849
// end ;
31014: LD_VAR 0 5
31018: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31019: LD_EXP 94
31023: NOT
31024: IFFALSE 31074
31026: GO 31028
31028: DISABLE
// begin initHack := true ;
31029: LD_ADDR_EXP 94
31033: PUSH
31034: LD_INT 1
31036: ST_TO_ADDR
// hackTanks := [ ] ;
31037: LD_ADDR_EXP 95
31041: PUSH
31042: EMPTY
31043: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31044: LD_ADDR_EXP 96
31048: PUSH
31049: EMPTY
31050: ST_TO_ADDR
// hackLimit := 3 ;
31051: LD_ADDR_EXP 97
31055: PUSH
31056: LD_INT 3
31058: ST_TO_ADDR
// hackDist := 12 ;
31059: LD_ADDR_EXP 98
31063: PUSH
31064: LD_INT 12
31066: ST_TO_ADDR
// hackCounter := [ ] ;
31067: LD_ADDR_EXP 99
31071: PUSH
31072: EMPTY
31073: ST_TO_ADDR
// end ;
31074: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31075: LD_EXP 94
31079: PUSH
31080: LD_INT 34
31082: PUSH
31083: LD_INT 99
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 69
31094: AND
31095: IFFALSE 31348
31097: GO 31099
31099: DISABLE
31100: LD_INT 0
31102: PPUSH
31103: PPUSH
// begin enable ;
31104: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31105: LD_ADDR_VAR 0 1
31109: PUSH
31110: LD_INT 34
31112: PUSH
31113: LD_INT 99
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PPUSH
31120: CALL_OW 69
31124: PUSH
31125: FOR_IN
31126: IFFALSE 31346
// begin if not i in hackTanks then
31128: LD_VAR 0 1
31132: PUSH
31133: LD_EXP 95
31137: IN
31138: NOT
31139: IFFALSE 31222
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31141: LD_ADDR_EXP 95
31145: PUSH
31146: LD_EXP 95
31150: PPUSH
31151: LD_EXP 95
31155: PUSH
31156: LD_INT 1
31158: PLUS
31159: PPUSH
31160: LD_VAR 0 1
31164: PPUSH
31165: CALL_OW 1
31169: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31170: LD_ADDR_EXP 96
31174: PUSH
31175: LD_EXP 96
31179: PPUSH
31180: LD_EXP 96
31184: PUSH
31185: LD_INT 1
31187: PLUS
31188: PPUSH
31189: EMPTY
31190: PPUSH
31191: CALL_OW 1
31195: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31196: LD_ADDR_EXP 99
31200: PUSH
31201: LD_EXP 99
31205: PPUSH
31206: LD_EXP 99
31210: PUSH
31211: LD_INT 1
31213: PLUS
31214: PPUSH
31215: EMPTY
31216: PPUSH
31217: CALL_OW 1
31221: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31222: LD_VAR 0 1
31226: PPUSH
31227: CALL_OW 302
31231: NOT
31232: IFFALSE 31245
// begin HackUnlinkAll ( i ) ;
31234: LD_VAR 0 1
31238: PPUSH
31239: CALL 31351 0 1
// continue ;
31243: GO 31125
// end ; HackCheckCapturedStatus ( i ) ;
31245: LD_VAR 0 1
31249: PPUSH
31250: CALL 31794 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31254: LD_ADDR_VAR 0 2
31258: PUSH
31259: LD_INT 81
31261: PUSH
31262: LD_VAR 0 1
31266: PPUSH
31267: CALL_OW 255
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 33
31278: PUSH
31279: LD_INT 3
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PUSH
31286: LD_INT 91
31288: PUSH
31289: LD_VAR 0 1
31293: PUSH
31294: LD_EXP 98
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PUSH
31304: LD_INT 50
31306: PUSH
31307: EMPTY
31308: LIST
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: PPUSH
31316: CALL_OW 69
31320: ST_TO_ADDR
// if not tmp then
31321: LD_VAR 0 2
31325: NOT
31326: IFFALSE 31330
// continue ;
31328: GO 31125
// HackLink ( i , tmp ) ;
31330: LD_VAR 0 1
31334: PPUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: CALL 31487 0 2
// end ;
31344: GO 31125
31346: POP
31347: POP
// end ;
31348: PPOPN 2
31350: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31351: LD_INT 0
31353: PPUSH
31354: PPUSH
31355: PPUSH
// if not hack in hackTanks then
31356: LD_VAR 0 1
31360: PUSH
31361: LD_EXP 95
31365: IN
31366: NOT
31367: IFFALSE 31371
// exit ;
31369: GO 31482
// index := GetElementIndex ( hackTanks , hack ) ;
31371: LD_ADDR_VAR 0 4
31375: PUSH
31376: LD_EXP 95
31380: PPUSH
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL 39024 0 2
31390: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31391: LD_EXP 96
31395: PUSH
31396: LD_VAR 0 4
31400: ARRAY
31401: IFFALSE 31482
// begin for i in hackTanksCaptured [ index ] do
31403: LD_ADDR_VAR 0 3
31407: PUSH
31408: LD_EXP 96
31412: PUSH
31413: LD_VAR 0 4
31417: ARRAY
31418: PUSH
31419: FOR_IN
31420: IFFALSE 31446
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31422: LD_VAR 0 3
31426: PUSH
31427: LD_INT 1
31429: ARRAY
31430: PPUSH
31431: LD_VAR 0 3
31435: PUSH
31436: LD_INT 2
31438: ARRAY
31439: PPUSH
31440: CALL_OW 235
31444: GO 31419
31446: POP
31447: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31448: LD_ADDR_EXP 96
31452: PUSH
31453: LD_EXP 96
31457: PPUSH
31458: LD_VAR 0 4
31462: PPUSH
31463: EMPTY
31464: PPUSH
31465: CALL_OW 1
31469: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31470: LD_VAR 0 1
31474: PPUSH
31475: LD_INT 0
31477: PPUSH
31478: CALL_OW 505
// end ; end ;
31482: LD_VAR 0 2
31486: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
31491: PPUSH
// if not hack in hackTanks or not vehicles then
31492: LD_VAR 0 1
31496: PUSH
31497: LD_EXP 95
31501: IN
31502: NOT
31503: PUSH
31504: LD_VAR 0 2
31508: NOT
31509: OR
31510: IFFALSE 31514
// exit ;
31512: GO 31789
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31514: LD_ADDR_VAR 0 2
31518: PUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: LD_VAR 0 2
31528: PPUSH
31529: LD_INT 1
31531: PPUSH
31532: LD_INT 1
31534: PPUSH
31535: CALL 39674 0 4
31539: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31540: LD_ADDR_VAR 0 5
31544: PUSH
31545: LD_EXP 95
31549: PPUSH
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL 39024 0 2
31559: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31560: LD_EXP 96
31564: PUSH
31565: LD_VAR 0 5
31569: ARRAY
31570: PUSH
31571: LD_EXP 97
31575: LESS
31576: IFFALSE 31765
// begin for i := 1 to vehicles do
31578: LD_ADDR_VAR 0 4
31582: PUSH
31583: DOUBLE
31584: LD_INT 1
31586: DEC
31587: ST_TO_ADDR
31588: LD_VAR 0 2
31592: PUSH
31593: FOR_TO
31594: IFFALSE 31763
// begin if hackTanksCaptured [ index ] = hackLimit then
31596: LD_EXP 96
31600: PUSH
31601: LD_VAR 0 5
31605: ARRAY
31606: PUSH
31607: LD_EXP 97
31611: EQUAL
31612: IFFALSE 31616
// break ;
31614: GO 31763
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31616: LD_ADDR_EXP 99
31620: PUSH
31621: LD_EXP 99
31625: PPUSH
31626: LD_VAR 0 5
31630: PPUSH
31631: LD_EXP 99
31635: PUSH
31636: LD_VAR 0 5
31640: ARRAY
31641: PUSH
31642: LD_INT 1
31644: PLUS
31645: PPUSH
31646: CALL_OW 1
31650: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31651: LD_ADDR_EXP 96
31655: PUSH
31656: LD_EXP 96
31660: PPUSH
31661: LD_VAR 0 5
31665: PUSH
31666: LD_EXP 96
31670: PUSH
31671: LD_VAR 0 5
31675: ARRAY
31676: PUSH
31677: LD_INT 1
31679: PLUS
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PPUSH
31685: LD_VAR 0 2
31689: PUSH
31690: LD_VAR 0 4
31694: ARRAY
31695: PUSH
31696: LD_VAR 0 2
31700: PUSH
31701: LD_VAR 0 4
31705: ARRAY
31706: PPUSH
31707: CALL_OW 255
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL 39239 0 3
31720: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31721: LD_VAR 0 2
31725: PUSH
31726: LD_VAR 0 4
31730: ARRAY
31731: PPUSH
31732: LD_VAR 0 1
31736: PPUSH
31737: CALL_OW 255
31741: PPUSH
31742: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31746: LD_VAR 0 2
31750: PUSH
31751: LD_VAR 0 4
31755: ARRAY
31756: PPUSH
31757: CALL_OW 141
// end ;
31761: GO 31593
31763: POP
31764: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31765: LD_VAR 0 1
31769: PPUSH
31770: LD_EXP 96
31774: PUSH
31775: LD_VAR 0 5
31779: ARRAY
31780: PUSH
31781: LD_INT 0
31783: PLUS
31784: PPUSH
31785: CALL_OW 505
// end ;
31789: LD_VAR 0 3
31793: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31794: LD_INT 0
31796: PPUSH
31797: PPUSH
31798: PPUSH
31799: PPUSH
// if not hack in hackTanks then
31800: LD_VAR 0 1
31804: PUSH
31805: LD_EXP 95
31809: IN
31810: NOT
31811: IFFALSE 31815
// exit ;
31813: GO 32055
// index := GetElementIndex ( hackTanks , hack ) ;
31815: LD_ADDR_VAR 0 4
31819: PUSH
31820: LD_EXP 95
31824: PPUSH
31825: LD_VAR 0 1
31829: PPUSH
31830: CALL 39024 0 2
31834: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31835: LD_ADDR_VAR 0 3
31839: PUSH
31840: DOUBLE
31841: LD_EXP 96
31845: PUSH
31846: LD_VAR 0 4
31850: ARRAY
31851: INC
31852: ST_TO_ADDR
31853: LD_INT 1
31855: PUSH
31856: FOR_DOWNTO
31857: IFFALSE 32029
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31859: LD_ADDR_VAR 0 5
31863: PUSH
31864: LD_EXP 96
31868: PUSH
31869: LD_VAR 0 4
31873: ARRAY
31874: PUSH
31875: LD_VAR 0 3
31879: ARRAY
31880: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31881: LD_VAR 0 5
31885: PUSH
31886: LD_INT 1
31888: ARRAY
31889: PPUSH
31890: CALL_OW 302
31894: NOT
31895: PUSH
31896: LD_VAR 0 5
31900: PUSH
31901: LD_INT 1
31903: ARRAY
31904: PPUSH
31905: CALL_OW 255
31909: PUSH
31910: LD_VAR 0 1
31914: PPUSH
31915: CALL_OW 255
31919: NONEQUAL
31920: OR
31921: IFFALSE 32027
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31923: LD_VAR 0 5
31927: PUSH
31928: LD_INT 1
31930: ARRAY
31931: PPUSH
31932: CALL_OW 305
31936: PUSH
31937: LD_VAR 0 5
31941: PUSH
31942: LD_INT 1
31944: ARRAY
31945: PPUSH
31946: CALL_OW 255
31950: PUSH
31951: LD_VAR 0 1
31955: PPUSH
31956: CALL_OW 255
31960: EQUAL
31961: AND
31962: IFFALSE 31986
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31964: LD_VAR 0 5
31968: PUSH
31969: LD_INT 1
31971: ARRAY
31972: PPUSH
31973: LD_VAR 0 5
31977: PUSH
31978: LD_INT 2
31980: ARRAY
31981: PPUSH
31982: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31986: LD_ADDR_EXP 96
31990: PUSH
31991: LD_EXP 96
31995: PPUSH
31996: LD_VAR 0 4
32000: PPUSH
32001: LD_EXP 96
32005: PUSH
32006: LD_VAR 0 4
32010: ARRAY
32011: PPUSH
32012: LD_VAR 0 3
32016: PPUSH
32017: CALL_OW 3
32021: PPUSH
32022: CALL_OW 1
32026: ST_TO_ADDR
// end ; end ;
32027: GO 31856
32029: POP
32030: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32031: LD_VAR 0 1
32035: PPUSH
32036: LD_EXP 96
32040: PUSH
32041: LD_VAR 0 4
32045: ARRAY
32046: PUSH
32047: LD_INT 0
32049: PLUS
32050: PPUSH
32051: CALL_OW 505
// end ;
32055: LD_VAR 0 2
32059: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32060: LD_INT 0
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
// if not hack in hackTanks then
32066: LD_VAR 0 1
32070: PUSH
32071: LD_EXP 95
32075: IN
32076: NOT
32077: IFFALSE 32081
// exit ;
32079: GO 32166
// index := GetElementIndex ( hackTanks , hack ) ;
32081: LD_ADDR_VAR 0 5
32085: PUSH
32086: LD_EXP 95
32090: PPUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: CALL 39024 0 2
32100: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32101: LD_ADDR_VAR 0 4
32105: PUSH
32106: DOUBLE
32107: LD_INT 1
32109: DEC
32110: ST_TO_ADDR
32111: LD_EXP 96
32115: PUSH
32116: LD_VAR 0 5
32120: ARRAY
32121: PUSH
32122: FOR_TO
32123: IFFALSE 32164
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32125: LD_EXP 96
32129: PUSH
32130: LD_VAR 0 5
32134: ARRAY
32135: PUSH
32136: LD_VAR 0 4
32140: ARRAY
32141: PUSH
32142: LD_INT 1
32144: ARRAY
32145: PUSH
32146: LD_VAR 0 2
32150: EQUAL
32151: IFFALSE 32162
// KillUnit ( vehicle ) ;
32153: LD_VAR 0 2
32157: PPUSH
32158: CALL_OW 66
32162: GO 32122
32164: POP
32165: POP
// end ;
32166: LD_VAR 0 3
32170: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32171: LD_EXP 100
32175: NOT
32176: IFFALSE 32211
32178: GO 32180
32180: DISABLE
// begin initMiner := true ;
32181: LD_ADDR_EXP 100
32185: PUSH
32186: LD_INT 1
32188: ST_TO_ADDR
// minersList := [ ] ;
32189: LD_ADDR_EXP 101
32193: PUSH
32194: EMPTY
32195: ST_TO_ADDR
// minerMinesList := [ ] ;
32196: LD_ADDR_EXP 102
32200: PUSH
32201: EMPTY
32202: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32203: LD_ADDR_EXP 103
32207: PUSH
32208: LD_INT 5
32210: ST_TO_ADDR
// end ;
32211: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32212: LD_EXP 100
32216: PUSH
32217: LD_INT 34
32219: PUSH
32220: LD_INT 81
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PPUSH
32227: CALL_OW 69
32231: AND
32232: IFFALSE 32693
32234: GO 32236
32236: DISABLE
32237: LD_INT 0
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
// begin enable ;
32243: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32244: LD_ADDR_VAR 0 1
32248: PUSH
32249: LD_INT 34
32251: PUSH
32252: LD_INT 81
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PPUSH
32259: CALL_OW 69
32263: PUSH
32264: FOR_IN
32265: IFFALSE 32337
// begin if not i in minersList then
32267: LD_VAR 0 1
32271: PUSH
32272: LD_EXP 101
32276: IN
32277: NOT
32278: IFFALSE 32335
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32280: LD_ADDR_EXP 101
32284: PUSH
32285: LD_EXP 101
32289: PPUSH
32290: LD_EXP 101
32294: PUSH
32295: LD_INT 1
32297: PLUS
32298: PPUSH
32299: LD_VAR 0 1
32303: PPUSH
32304: CALL_OW 1
32308: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32309: LD_ADDR_EXP 102
32313: PUSH
32314: LD_EXP 102
32318: PPUSH
32319: LD_EXP 102
32323: PUSH
32324: LD_INT 1
32326: PLUS
32327: PPUSH
32328: EMPTY
32329: PPUSH
32330: CALL_OW 1
32334: ST_TO_ADDR
// end end ;
32335: GO 32264
32337: POP
32338: POP
// for i := minerMinesList downto 1 do
32339: LD_ADDR_VAR 0 1
32343: PUSH
32344: DOUBLE
32345: LD_EXP 102
32349: INC
32350: ST_TO_ADDR
32351: LD_INT 1
32353: PUSH
32354: FOR_DOWNTO
32355: IFFALSE 32691
// begin if IsLive ( minersList [ i ] ) then
32357: LD_EXP 101
32361: PUSH
32362: LD_VAR 0 1
32366: ARRAY
32367: PPUSH
32368: CALL_OW 300
32372: IFFALSE 32400
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32374: LD_EXP 101
32378: PUSH
32379: LD_VAR 0 1
32383: ARRAY
32384: PPUSH
32385: LD_EXP 102
32389: PUSH
32390: LD_VAR 0 1
32394: ARRAY
32395: PPUSH
32396: CALL_OW 505
// if not minerMinesList [ i ] then
32400: LD_EXP 102
32404: PUSH
32405: LD_VAR 0 1
32409: ARRAY
32410: NOT
32411: IFFALSE 32415
// continue ;
32413: GO 32354
// for j := minerMinesList [ i ] downto 1 do
32415: LD_ADDR_VAR 0 2
32419: PUSH
32420: DOUBLE
32421: LD_EXP 102
32425: PUSH
32426: LD_VAR 0 1
32430: ARRAY
32431: INC
32432: ST_TO_ADDR
32433: LD_INT 1
32435: PUSH
32436: FOR_DOWNTO
32437: IFFALSE 32687
// begin side := GetSide ( minersList [ i ] ) ;
32439: LD_ADDR_VAR 0 3
32443: PUSH
32444: LD_EXP 101
32448: PUSH
32449: LD_VAR 0 1
32453: ARRAY
32454: PPUSH
32455: CALL_OW 255
32459: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32460: LD_ADDR_VAR 0 4
32464: PUSH
32465: LD_EXP 102
32469: PUSH
32470: LD_VAR 0 1
32474: ARRAY
32475: PUSH
32476: LD_VAR 0 2
32480: ARRAY
32481: PUSH
32482: LD_INT 1
32484: ARRAY
32485: PPUSH
32486: LD_EXP 102
32490: PUSH
32491: LD_VAR 0 1
32495: ARRAY
32496: PUSH
32497: LD_VAR 0 2
32501: ARRAY
32502: PUSH
32503: LD_INT 2
32505: ARRAY
32506: PPUSH
32507: CALL_OW 428
32511: ST_TO_ADDR
// if not tmp then
32512: LD_VAR 0 4
32516: NOT
32517: IFFALSE 32521
// continue ;
32519: GO 32436
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32521: LD_VAR 0 4
32525: PUSH
32526: LD_INT 81
32528: PUSH
32529: LD_VAR 0 3
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PPUSH
32538: CALL_OW 69
32542: IN
32543: PUSH
32544: LD_EXP 102
32548: PUSH
32549: LD_VAR 0 1
32553: ARRAY
32554: PUSH
32555: LD_VAR 0 2
32559: ARRAY
32560: PUSH
32561: LD_INT 1
32563: ARRAY
32564: PPUSH
32565: LD_EXP 102
32569: PUSH
32570: LD_VAR 0 1
32574: ARRAY
32575: PUSH
32576: LD_VAR 0 2
32580: ARRAY
32581: PUSH
32582: LD_INT 2
32584: ARRAY
32585: PPUSH
32586: CALL_OW 458
32590: AND
32591: IFFALSE 32685
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32593: LD_EXP 102
32597: PUSH
32598: LD_VAR 0 1
32602: ARRAY
32603: PUSH
32604: LD_VAR 0 2
32608: ARRAY
32609: PUSH
32610: LD_INT 1
32612: ARRAY
32613: PPUSH
32614: LD_EXP 102
32618: PUSH
32619: LD_VAR 0 1
32623: ARRAY
32624: PUSH
32625: LD_VAR 0 2
32629: ARRAY
32630: PUSH
32631: LD_INT 2
32633: ARRAY
32634: PPUSH
32635: LD_VAR 0 3
32639: PPUSH
32640: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32644: LD_ADDR_EXP 102
32648: PUSH
32649: LD_EXP 102
32653: PPUSH
32654: LD_VAR 0 1
32658: PPUSH
32659: LD_EXP 102
32663: PUSH
32664: LD_VAR 0 1
32668: ARRAY
32669: PPUSH
32670: LD_VAR 0 2
32674: PPUSH
32675: CALL_OW 3
32679: PPUSH
32680: CALL_OW 1
32684: ST_TO_ADDR
// end ; end ;
32685: GO 32436
32687: POP
32688: POP
// end ;
32689: GO 32354
32691: POP
32692: POP
// end ;
32693: PPOPN 4
32695: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32696: LD_INT 0
32698: PPUSH
32699: PPUSH
// result := false ;
32700: LD_ADDR_VAR 0 4
32704: PUSH
32705: LD_INT 0
32707: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32708: LD_VAR 0 1
32712: PPUSH
32713: CALL_OW 264
32717: PUSH
32718: LD_INT 81
32720: EQUAL
32721: NOT
32722: IFFALSE 32726
// exit ;
32724: GO 32966
// index := GetElementIndex ( minersList , unit ) ;
32726: LD_ADDR_VAR 0 5
32730: PUSH
32731: LD_EXP 101
32735: PPUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL 39024 0 2
32745: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32746: LD_EXP 102
32750: PUSH
32751: LD_VAR 0 5
32755: ARRAY
32756: PUSH
32757: LD_EXP 103
32761: GREATEREQUAL
32762: IFFALSE 32766
// exit ;
32764: GO 32966
// ComMoveXY ( unit , x , y ) ;
32766: LD_VAR 0 1
32770: PPUSH
32771: LD_VAR 0 2
32775: PPUSH
32776: LD_VAR 0 3
32780: PPUSH
32781: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32785: LD_INT 35
32787: PPUSH
32788: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32792: LD_VAR 0 1
32796: PPUSH
32797: LD_VAR 0 2
32801: PPUSH
32802: LD_VAR 0 3
32806: PPUSH
32807: CALL 70785 0 3
32811: NOT
32812: PUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 314
32822: AND
32823: IFFALSE 32827
// exit ;
32825: GO 32966
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32827: LD_VAR 0 2
32831: PPUSH
32832: LD_VAR 0 3
32836: PPUSH
32837: CALL_OW 428
32841: PUSH
32842: LD_VAR 0 1
32846: EQUAL
32847: PUSH
32848: LD_VAR 0 1
32852: PPUSH
32853: CALL_OW 314
32857: NOT
32858: AND
32859: IFFALSE 32785
// PlaySoundXY ( x , y , PlantMine ) ;
32861: LD_VAR 0 2
32865: PPUSH
32866: LD_VAR 0 3
32870: PPUSH
32871: LD_STRING PlantMine
32873: PPUSH
32874: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32878: LD_VAR 0 2
32882: PPUSH
32883: LD_VAR 0 3
32887: PPUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 255
32897: PPUSH
32898: LD_INT 0
32900: PPUSH
32901: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32905: LD_ADDR_EXP 102
32909: PUSH
32910: LD_EXP 102
32914: PPUSH
32915: LD_VAR 0 5
32919: PUSH
32920: LD_EXP 102
32924: PUSH
32925: LD_VAR 0 5
32929: ARRAY
32930: PUSH
32931: LD_INT 1
32933: PLUS
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PPUSH
32939: LD_VAR 0 2
32943: PUSH
32944: LD_VAR 0 3
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PPUSH
32953: CALL 39239 0 3
32957: ST_TO_ADDR
// result := true ;
32958: LD_ADDR_VAR 0 4
32962: PUSH
32963: LD_INT 1
32965: ST_TO_ADDR
// end ;
32966: LD_VAR 0 4
32970: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32971: LD_INT 0
32973: PPUSH
32974: PPUSH
32975: PPUSH
// if not unit in minersList then
32976: LD_VAR 0 1
32980: PUSH
32981: LD_EXP 101
32985: IN
32986: NOT
32987: IFFALSE 32991
// exit ;
32989: GO 33383
// index := GetElementIndex ( minersList , unit ) ;
32991: LD_ADDR_VAR 0 6
32995: PUSH
32996: LD_EXP 101
33000: PPUSH
33001: LD_VAR 0 1
33005: PPUSH
33006: CALL 39024 0 2
33010: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33011: LD_ADDR_VAR 0 5
33015: PUSH
33016: DOUBLE
33017: LD_EXP 102
33021: PUSH
33022: LD_VAR 0 6
33026: ARRAY
33027: INC
33028: ST_TO_ADDR
33029: LD_INT 1
33031: PUSH
33032: FOR_DOWNTO
33033: IFFALSE 33194
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33035: LD_EXP 102
33039: PUSH
33040: LD_VAR 0 6
33044: ARRAY
33045: PUSH
33046: LD_VAR 0 5
33050: ARRAY
33051: PUSH
33052: LD_INT 1
33054: ARRAY
33055: PUSH
33056: LD_VAR 0 2
33060: EQUAL
33061: PUSH
33062: LD_EXP 102
33066: PUSH
33067: LD_VAR 0 6
33071: ARRAY
33072: PUSH
33073: LD_VAR 0 5
33077: ARRAY
33078: PUSH
33079: LD_INT 2
33081: ARRAY
33082: PUSH
33083: LD_VAR 0 3
33087: EQUAL
33088: AND
33089: IFFALSE 33192
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33091: LD_EXP 102
33095: PUSH
33096: LD_VAR 0 6
33100: ARRAY
33101: PUSH
33102: LD_VAR 0 5
33106: ARRAY
33107: PUSH
33108: LD_INT 1
33110: ARRAY
33111: PPUSH
33112: LD_EXP 102
33116: PUSH
33117: LD_VAR 0 6
33121: ARRAY
33122: PUSH
33123: LD_VAR 0 5
33127: ARRAY
33128: PUSH
33129: LD_INT 2
33131: ARRAY
33132: PPUSH
33133: LD_VAR 0 1
33137: PPUSH
33138: CALL_OW 255
33142: PPUSH
33143: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33147: LD_ADDR_EXP 102
33151: PUSH
33152: LD_EXP 102
33156: PPUSH
33157: LD_VAR 0 6
33161: PPUSH
33162: LD_EXP 102
33166: PUSH
33167: LD_VAR 0 6
33171: ARRAY
33172: PPUSH
33173: LD_VAR 0 5
33177: PPUSH
33178: CALL_OW 3
33182: PPUSH
33183: CALL_OW 1
33187: ST_TO_ADDR
// exit ;
33188: POP
33189: POP
33190: GO 33383
// end ; end ;
33192: GO 33032
33194: POP
33195: POP
// for i := minerMinesList [ index ] downto 1 do
33196: LD_ADDR_VAR 0 5
33200: PUSH
33201: DOUBLE
33202: LD_EXP 102
33206: PUSH
33207: LD_VAR 0 6
33211: ARRAY
33212: INC
33213: ST_TO_ADDR
33214: LD_INT 1
33216: PUSH
33217: FOR_DOWNTO
33218: IFFALSE 33381
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33220: LD_EXP 102
33224: PUSH
33225: LD_VAR 0 6
33229: ARRAY
33230: PUSH
33231: LD_VAR 0 5
33235: ARRAY
33236: PUSH
33237: LD_INT 1
33239: ARRAY
33240: PPUSH
33241: LD_EXP 102
33245: PUSH
33246: LD_VAR 0 6
33250: ARRAY
33251: PUSH
33252: LD_VAR 0 5
33256: ARRAY
33257: PUSH
33258: LD_INT 2
33260: ARRAY
33261: PPUSH
33262: LD_VAR 0 2
33266: PPUSH
33267: LD_VAR 0 3
33271: PPUSH
33272: CALL_OW 298
33276: PUSH
33277: LD_INT 6
33279: LESS
33280: IFFALSE 33379
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33282: LD_EXP 102
33286: PUSH
33287: LD_VAR 0 6
33291: ARRAY
33292: PUSH
33293: LD_VAR 0 5
33297: ARRAY
33298: PUSH
33299: LD_INT 1
33301: ARRAY
33302: PPUSH
33303: LD_EXP 102
33307: PUSH
33308: LD_VAR 0 6
33312: ARRAY
33313: PUSH
33314: LD_VAR 0 5
33318: ARRAY
33319: PUSH
33320: LD_INT 2
33322: ARRAY
33323: PPUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: CALL_OW 255
33333: PPUSH
33334: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33338: LD_ADDR_EXP 102
33342: PUSH
33343: LD_EXP 102
33347: PPUSH
33348: LD_VAR 0 6
33352: PPUSH
33353: LD_EXP 102
33357: PUSH
33358: LD_VAR 0 6
33362: ARRAY
33363: PPUSH
33364: LD_VAR 0 5
33368: PPUSH
33369: CALL_OW 3
33373: PPUSH
33374: CALL_OW 1
33378: ST_TO_ADDR
// end ; end ;
33379: GO 33217
33381: POP
33382: POP
// end ;
33383: LD_VAR 0 4
33387: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL_OW 264
33408: PUSH
33409: LD_INT 81
33411: EQUAL
33412: NOT
33413: PUSH
33414: LD_VAR 0 1
33418: PUSH
33419: LD_EXP 101
33423: IN
33424: NOT
33425: OR
33426: IFFALSE 33430
// exit ;
33428: GO 33752
// index := GetElementIndex ( minersList , unit ) ;
33430: LD_ADDR_VAR 0 6
33434: PUSH
33435: LD_EXP 101
33439: PPUSH
33440: LD_VAR 0 1
33444: PPUSH
33445: CALL 39024 0 2
33449: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33450: LD_ADDR_VAR 0 8
33454: PUSH
33455: LD_EXP 103
33459: PUSH
33460: LD_EXP 102
33464: PUSH
33465: LD_VAR 0 6
33469: ARRAY
33470: MINUS
33471: ST_TO_ADDR
// if not minesFreeAmount then
33472: LD_VAR 0 8
33476: NOT
33477: IFFALSE 33481
// exit ;
33479: GO 33752
// tmp := [ ] ;
33481: LD_ADDR_VAR 0 7
33485: PUSH
33486: EMPTY
33487: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33488: LD_ADDR_VAR 0 5
33492: PUSH
33493: DOUBLE
33494: LD_INT 1
33496: DEC
33497: ST_TO_ADDR
33498: LD_VAR 0 8
33502: PUSH
33503: FOR_TO
33504: IFFALSE 33699
// begin _d := rand ( 0 , 5 ) ;
33506: LD_ADDR_VAR 0 11
33510: PUSH
33511: LD_INT 0
33513: PPUSH
33514: LD_INT 5
33516: PPUSH
33517: CALL_OW 12
33521: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33522: LD_ADDR_VAR 0 12
33526: PUSH
33527: LD_INT 2
33529: PPUSH
33530: LD_INT 6
33532: PPUSH
33533: CALL_OW 12
33537: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33538: LD_ADDR_VAR 0 9
33542: PUSH
33543: LD_VAR 0 2
33547: PPUSH
33548: LD_VAR 0 11
33552: PPUSH
33553: LD_VAR 0 12
33557: PPUSH
33558: CALL_OW 272
33562: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33563: LD_ADDR_VAR 0 10
33567: PUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: LD_VAR 0 11
33577: PPUSH
33578: LD_VAR 0 12
33582: PPUSH
33583: CALL_OW 273
33587: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33588: LD_VAR 0 9
33592: PPUSH
33593: LD_VAR 0 10
33597: PPUSH
33598: CALL_OW 488
33602: PUSH
33603: LD_VAR 0 9
33607: PUSH
33608: LD_VAR 0 10
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_VAR 0 7
33621: IN
33622: NOT
33623: AND
33624: PUSH
33625: LD_VAR 0 9
33629: PPUSH
33630: LD_VAR 0 10
33634: PPUSH
33635: CALL_OW 458
33639: NOT
33640: AND
33641: IFFALSE 33683
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33643: LD_ADDR_VAR 0 7
33647: PUSH
33648: LD_VAR 0 7
33652: PPUSH
33653: LD_VAR 0 7
33657: PUSH
33658: LD_INT 1
33660: PLUS
33661: PPUSH
33662: LD_VAR 0 9
33666: PUSH
33667: LD_VAR 0 10
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PPUSH
33676: CALL_OW 1
33680: ST_TO_ADDR
33681: GO 33697
// i := i - 1 ;
33683: LD_ADDR_VAR 0 5
33687: PUSH
33688: LD_VAR 0 5
33692: PUSH
33693: LD_INT 1
33695: MINUS
33696: ST_TO_ADDR
// end ;
33697: GO 33503
33699: POP
33700: POP
// for i in tmp do
33701: LD_ADDR_VAR 0 5
33705: PUSH
33706: LD_VAR 0 7
33710: PUSH
33711: FOR_IN
33712: IFFALSE 33750
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33714: LD_VAR 0 1
33718: PPUSH
33719: LD_VAR 0 5
33723: PUSH
33724: LD_INT 1
33726: ARRAY
33727: PPUSH
33728: LD_VAR 0 5
33732: PUSH
33733: LD_INT 2
33735: ARRAY
33736: PPUSH
33737: CALL 32696 0 3
33741: NOT
33742: IFFALSE 33748
// exit ;
33744: POP
33745: POP
33746: GO 33752
33748: GO 33711
33750: POP
33751: POP
// end ;
33752: LD_VAR 0 4
33756: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
33757: LD_INT 0
33759: PPUSH
33760: PPUSH
33761: PPUSH
33762: PPUSH
33763: PPUSH
33764: PPUSH
33765: PPUSH
33766: PPUSH
33767: PPUSH
// if GetClass ( unit ) <> class_sniper then
33768: LD_VAR 0 1
33772: PPUSH
33773: CALL_OW 257
33777: PUSH
33778: LD_INT 5
33780: NONEQUAL
33781: IFFALSE 33785
// exit ;
33783: GO 34251
// dist := 8 ;
33785: LD_ADDR_VAR 0 5
33789: PUSH
33790: LD_INT 8
33792: ST_TO_ADDR
// viewRange := 12 ;
33793: LD_ADDR_VAR 0 8
33797: PUSH
33798: LD_INT 12
33800: ST_TO_ADDR
// side := GetSide ( unit ) ;
33801: LD_ADDR_VAR 0 6
33805: PUSH
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 255
33815: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33816: LD_INT 61
33818: PPUSH
33819: LD_VAR 0 6
33823: PPUSH
33824: CALL_OW 321
33828: PUSH
33829: LD_INT 2
33831: EQUAL
33832: IFFALSE 33842
// viewRange := 16 ;
33834: LD_ADDR_VAR 0 8
33838: PUSH
33839: LD_INT 16
33841: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33842: LD_VAR 0 1
33846: PPUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: LD_VAR 0 3
33856: PPUSH
33857: CALL_OW 297
33861: PUSH
33862: LD_VAR 0 5
33866: GREATER
33867: IFFALSE 33946
// begin ComMoveXY ( unit , x , y ) ;
33869: LD_VAR 0 1
33873: PPUSH
33874: LD_VAR 0 2
33878: PPUSH
33879: LD_VAR 0 3
33883: PPUSH
33884: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33888: LD_INT 35
33890: PPUSH
33891: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33895: LD_VAR 0 1
33899: PPUSH
33900: LD_VAR 0 2
33904: PPUSH
33905: LD_VAR 0 3
33909: PPUSH
33910: CALL 70785 0 3
33914: NOT
33915: IFFALSE 33919
// exit ;
33917: GO 34251
// until GetDistUnitXY ( unit , x , y ) < dist ;
33919: LD_VAR 0 1
33923: PPUSH
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_VAR 0 3
33933: PPUSH
33934: CALL_OW 297
33938: PUSH
33939: LD_VAR 0 5
33943: LESS
33944: IFFALSE 33888
// end ; ComTurnXY ( unit , x , y ) ;
33946: LD_VAR 0 1
33950: PPUSH
33951: LD_VAR 0 2
33955: PPUSH
33956: LD_VAR 0 3
33960: PPUSH
33961: CALL_OW 118
// repeat if Multiplayer then
33965: LD_OWVAR 4
33969: IFFALSE 33980
// wait ( 35 ) else
33971: LD_INT 35
33973: PPUSH
33974: CALL_OW 67
33978: GO 33987
// wait ( 5 ) ;
33980: LD_INT 5
33982: PPUSH
33983: CALL_OW 67
// _d := GetDir ( unit ) ;
33987: LD_ADDR_VAR 0 11
33991: PUSH
33992: LD_VAR 0 1
33996: PPUSH
33997: CALL_OW 254
34001: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
34002: LD_ADDR_VAR 0 7
34006: PUSH
34007: LD_VAR 0 1
34011: PPUSH
34012: CALL_OW 250
34016: PPUSH
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 251
34026: PPUSH
34027: LD_VAR 0 2
34031: PPUSH
34032: LD_VAR 0 3
34036: PPUSH
34037: CALL 73393 0 4
34041: ST_TO_ADDR
// until dir = _d ;
34042: LD_VAR 0 7
34046: PUSH
34047: LD_VAR 0 11
34051: EQUAL
34052: IFFALSE 33965
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
34054: LD_ADDR_VAR 0 9
34058: PUSH
34059: LD_VAR 0 1
34063: PPUSH
34064: CALL_OW 250
34068: PPUSH
34069: LD_VAR 0 7
34073: PPUSH
34074: LD_VAR 0 5
34078: PPUSH
34079: CALL_OW 272
34083: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
34084: LD_ADDR_VAR 0 10
34088: PUSH
34089: LD_VAR 0 1
34093: PPUSH
34094: CALL_OW 251
34098: PPUSH
34099: LD_VAR 0 7
34103: PPUSH
34104: LD_VAR 0 5
34108: PPUSH
34109: CALL_OW 273
34113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34114: LD_VAR 0 9
34118: PPUSH
34119: LD_VAR 0 10
34123: PPUSH
34124: CALL_OW 488
34128: NOT
34129: IFFALSE 34133
// exit ;
34131: GO 34251
// ComAnimCustom ( unit , 1 ) ;
34133: LD_VAR 0 1
34137: PPUSH
34138: LD_INT 1
34140: PPUSH
34141: CALL_OW 592
// p := 0 ;
34145: LD_ADDR_VAR 0 12
34149: PUSH
34150: LD_INT 0
34152: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34153: LD_VAR 0 9
34157: PPUSH
34158: LD_VAR 0 10
34162: PPUSH
34163: LD_VAR 0 6
34167: PPUSH
34168: LD_VAR 0 8
34172: PPUSH
34173: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
34177: LD_INT 35
34179: PPUSH
34180: CALL_OW 67
// p := Inc ( p ) ;
34184: LD_ADDR_VAR 0 12
34188: PUSH
34189: LD_VAR 0 12
34193: PPUSH
34194: CALL 73349 0 1
34198: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
34199: LD_VAR 0 12
34203: PUSH
34204: LD_INT 3
34206: EQUAL
34207: PUSH
34208: LD_VAR 0 1
34212: PPUSH
34213: CALL_OW 302
34217: NOT
34218: OR
34219: PUSH
34220: LD_VAR 0 1
34224: PPUSH
34225: CALL_OW 301
34229: OR
34230: IFFALSE 34177
// RemoveSeeing ( _x , _y , side ) ;
34232: LD_VAR 0 9
34236: PPUSH
34237: LD_VAR 0 10
34241: PPUSH
34242: LD_VAR 0 6
34246: PPUSH
34247: CALL_OW 331
// end ; end_of_file
34251: LD_VAR 0 4
34255: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34256: LD_INT 0
34258: PPUSH
34259: PPUSH
// if exist_mode then
34260: LD_VAR 0 2
34264: IFFALSE 34310
// begin unit := CreateCharacter ( prefix & ident ) ;
34266: LD_ADDR_VAR 0 5
34270: PUSH
34271: LD_VAR 0 3
34275: PUSH
34276: LD_VAR 0 1
34280: STR
34281: PPUSH
34282: CALL_OW 34
34286: ST_TO_ADDR
// if unit then
34287: LD_VAR 0 5
34291: IFFALSE 34308
// DeleteCharacters ( prefix & ident ) ;
34293: LD_VAR 0 3
34297: PUSH
34298: LD_VAR 0 1
34302: STR
34303: PPUSH
34304: CALL_OW 40
// end else
34308: GO 34325
// unit := NewCharacter ( ident ) ;
34310: LD_ADDR_VAR 0 5
34314: PUSH
34315: LD_VAR 0 1
34319: PPUSH
34320: CALL_OW 25
34324: ST_TO_ADDR
// result := unit ;
34325: LD_ADDR_VAR 0 4
34329: PUSH
34330: LD_VAR 0 5
34334: ST_TO_ADDR
// end ;
34335: LD_VAR 0 4
34339: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34340: LD_INT 0
34342: PPUSH
34343: PPUSH
// if not side or not nation then
34344: LD_VAR 0 1
34348: NOT
34349: PUSH
34350: LD_VAR 0 2
34354: NOT
34355: OR
34356: IFFALSE 34360
// exit ;
34358: GO 35128
// case nation of nation_american :
34360: LD_VAR 0 2
34364: PUSH
34365: LD_INT 1
34367: DOUBLE
34368: EQUAL
34369: IFTRUE 34373
34371: GO 34587
34373: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34374: LD_ADDR_VAR 0 4
34378: PUSH
34379: LD_INT 35
34381: PUSH
34382: LD_INT 45
34384: PUSH
34385: LD_INT 46
34387: PUSH
34388: LD_INT 47
34390: PUSH
34391: LD_INT 82
34393: PUSH
34394: LD_INT 83
34396: PUSH
34397: LD_INT 84
34399: PUSH
34400: LD_INT 85
34402: PUSH
34403: LD_INT 86
34405: PUSH
34406: LD_INT 1
34408: PUSH
34409: LD_INT 2
34411: PUSH
34412: LD_INT 6
34414: PUSH
34415: LD_INT 15
34417: PUSH
34418: LD_INT 16
34420: PUSH
34421: LD_INT 7
34423: PUSH
34424: LD_INT 12
34426: PUSH
34427: LD_INT 13
34429: PUSH
34430: LD_INT 10
34432: PUSH
34433: LD_INT 14
34435: PUSH
34436: LD_INT 20
34438: PUSH
34439: LD_INT 21
34441: PUSH
34442: LD_INT 22
34444: PUSH
34445: LD_INT 25
34447: PUSH
34448: LD_INT 32
34450: PUSH
34451: LD_INT 27
34453: PUSH
34454: LD_INT 36
34456: PUSH
34457: LD_INT 69
34459: PUSH
34460: LD_INT 39
34462: PUSH
34463: LD_INT 34
34465: PUSH
34466: LD_INT 40
34468: PUSH
34469: LD_INT 48
34471: PUSH
34472: LD_INT 49
34474: PUSH
34475: LD_INT 50
34477: PUSH
34478: LD_INT 51
34480: PUSH
34481: LD_INT 52
34483: PUSH
34484: LD_INT 53
34486: PUSH
34487: LD_INT 54
34489: PUSH
34490: LD_INT 55
34492: PUSH
34493: LD_INT 56
34495: PUSH
34496: LD_INT 57
34498: PUSH
34499: LD_INT 58
34501: PUSH
34502: LD_INT 59
34504: PUSH
34505: LD_INT 60
34507: PUSH
34508: LD_INT 61
34510: PUSH
34511: LD_INT 62
34513: PUSH
34514: LD_INT 80
34516: PUSH
34517: LD_INT 82
34519: PUSH
34520: LD_INT 83
34522: PUSH
34523: LD_INT 84
34525: PUSH
34526: LD_INT 85
34528: PUSH
34529: LD_INT 86
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
34585: GO 35052
34587: LD_INT 2
34589: DOUBLE
34590: EQUAL
34591: IFTRUE 34595
34593: GO 34821
34595: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34596: LD_ADDR_VAR 0 4
34600: PUSH
34601: LD_INT 35
34603: PUSH
34604: LD_INT 45
34606: PUSH
34607: LD_INT 46
34609: PUSH
34610: LD_INT 47
34612: PUSH
34613: LD_INT 82
34615: PUSH
34616: LD_INT 83
34618: PUSH
34619: LD_INT 84
34621: PUSH
34622: LD_INT 85
34624: PUSH
34625: LD_INT 87
34627: PUSH
34628: LD_INT 70
34630: PUSH
34631: LD_INT 1
34633: PUSH
34634: LD_INT 11
34636: PUSH
34637: LD_INT 3
34639: PUSH
34640: LD_INT 4
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: LD_INT 6
34648: PUSH
34649: LD_INT 15
34651: PUSH
34652: LD_INT 18
34654: PUSH
34655: LD_INT 7
34657: PUSH
34658: LD_INT 17
34660: PUSH
34661: LD_INT 8
34663: PUSH
34664: LD_INT 20
34666: PUSH
34667: LD_INT 21
34669: PUSH
34670: LD_INT 22
34672: PUSH
34673: LD_INT 72
34675: PUSH
34676: LD_INT 26
34678: PUSH
34679: LD_INT 69
34681: PUSH
34682: LD_INT 39
34684: PUSH
34685: LD_INT 40
34687: PUSH
34688: LD_INT 41
34690: PUSH
34691: LD_INT 42
34693: PUSH
34694: LD_INT 43
34696: PUSH
34697: LD_INT 48
34699: PUSH
34700: LD_INT 49
34702: PUSH
34703: LD_INT 50
34705: PUSH
34706: LD_INT 51
34708: PUSH
34709: LD_INT 52
34711: PUSH
34712: LD_INT 53
34714: PUSH
34715: LD_INT 54
34717: PUSH
34718: LD_INT 55
34720: PUSH
34721: LD_INT 56
34723: PUSH
34724: LD_INT 60
34726: PUSH
34727: LD_INT 61
34729: PUSH
34730: LD_INT 62
34732: PUSH
34733: LD_INT 66
34735: PUSH
34736: LD_INT 67
34738: PUSH
34739: LD_INT 68
34741: PUSH
34742: LD_INT 81
34744: PUSH
34745: LD_INT 82
34747: PUSH
34748: LD_INT 83
34750: PUSH
34751: LD_INT 84
34753: PUSH
34754: LD_INT 85
34756: PUSH
34757: LD_INT 87
34759: PUSH
34760: LD_INT 88
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: LIST
34810: LIST
34811: LIST
34812: LIST
34813: LIST
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 35052
34821: LD_INT 3
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 35051
34829: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34830: LD_ADDR_VAR 0 4
34834: PUSH
34835: LD_INT 46
34837: PUSH
34838: LD_INT 47
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 82
34849: PUSH
34850: LD_INT 83
34852: PUSH
34853: LD_INT 84
34855: PUSH
34856: LD_INT 85
34858: PUSH
34859: LD_INT 86
34861: PUSH
34862: LD_INT 11
34864: PUSH
34865: LD_INT 9
34867: PUSH
34868: LD_INT 20
34870: PUSH
34871: LD_INT 19
34873: PUSH
34874: LD_INT 21
34876: PUSH
34877: LD_INT 24
34879: PUSH
34880: LD_INT 22
34882: PUSH
34883: LD_INT 25
34885: PUSH
34886: LD_INT 28
34888: PUSH
34889: LD_INT 29
34891: PUSH
34892: LD_INT 30
34894: PUSH
34895: LD_INT 31
34897: PUSH
34898: LD_INT 37
34900: PUSH
34901: LD_INT 38
34903: PUSH
34904: LD_INT 32
34906: PUSH
34907: LD_INT 27
34909: PUSH
34910: LD_INT 33
34912: PUSH
34913: LD_INT 69
34915: PUSH
34916: LD_INT 39
34918: PUSH
34919: LD_INT 34
34921: PUSH
34922: LD_INT 40
34924: PUSH
34925: LD_INT 71
34927: PUSH
34928: LD_INT 23
34930: PUSH
34931: LD_INT 44
34933: PUSH
34934: LD_INT 48
34936: PUSH
34937: LD_INT 49
34939: PUSH
34940: LD_INT 50
34942: PUSH
34943: LD_INT 51
34945: PUSH
34946: LD_INT 52
34948: PUSH
34949: LD_INT 53
34951: PUSH
34952: LD_INT 54
34954: PUSH
34955: LD_INT 55
34957: PUSH
34958: LD_INT 56
34960: PUSH
34961: LD_INT 57
34963: PUSH
34964: LD_INT 58
34966: PUSH
34967: LD_INT 59
34969: PUSH
34970: LD_INT 63
34972: PUSH
34973: LD_INT 64
34975: PUSH
34976: LD_INT 65
34978: PUSH
34979: LD_INT 82
34981: PUSH
34982: LD_INT 83
34984: PUSH
34985: LD_INT 84
34987: PUSH
34988: LD_INT 85
34990: PUSH
34991: LD_INT 86
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: LIST
35048: ST_TO_ADDR
35049: GO 35052
35051: POP
// if state > - 1 and state < 3 then
35052: LD_VAR 0 3
35056: PUSH
35057: LD_INT 1
35059: NEG
35060: GREATER
35061: PUSH
35062: LD_VAR 0 3
35066: PUSH
35067: LD_INT 3
35069: LESS
35070: AND
35071: IFFALSE 35128
// for i in result do
35073: LD_ADDR_VAR 0 5
35077: PUSH
35078: LD_VAR 0 4
35082: PUSH
35083: FOR_IN
35084: IFFALSE 35126
// if GetTech ( i , side ) <> state then
35086: LD_VAR 0 5
35090: PPUSH
35091: LD_VAR 0 1
35095: PPUSH
35096: CALL_OW 321
35100: PUSH
35101: LD_VAR 0 3
35105: NONEQUAL
35106: IFFALSE 35124
// result := result diff i ;
35108: LD_ADDR_VAR 0 4
35112: PUSH
35113: LD_VAR 0 4
35117: PUSH
35118: LD_VAR 0 5
35122: DIFF
35123: ST_TO_ADDR
35124: GO 35083
35126: POP
35127: POP
// end ;
35128: LD_VAR 0 4
35132: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35133: LD_INT 0
35135: PPUSH
35136: PPUSH
35137: PPUSH
// result := true ;
35138: LD_ADDR_VAR 0 3
35142: PUSH
35143: LD_INT 1
35145: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35146: LD_ADDR_VAR 0 5
35150: PUSH
35151: LD_VAR 0 2
35155: PPUSH
35156: CALL_OW 480
35160: ST_TO_ADDR
// if not tmp then
35161: LD_VAR 0 5
35165: NOT
35166: IFFALSE 35170
// exit ;
35168: GO 35219
// for i in tmp do
35170: LD_ADDR_VAR 0 4
35174: PUSH
35175: LD_VAR 0 5
35179: PUSH
35180: FOR_IN
35181: IFFALSE 35217
// if GetTech ( i , side ) <> state_researched then
35183: LD_VAR 0 4
35187: PPUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 321
35197: PUSH
35198: LD_INT 2
35200: NONEQUAL
35201: IFFALSE 35215
// begin result := false ;
35203: LD_ADDR_VAR 0 3
35207: PUSH
35208: LD_INT 0
35210: ST_TO_ADDR
// exit ;
35211: POP
35212: POP
35213: GO 35219
// end ;
35215: GO 35180
35217: POP
35218: POP
// end ;
35219: LD_VAR 0 3
35223: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35224: LD_INT 0
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35239: LD_VAR 0 1
35243: NOT
35244: PUSH
35245: LD_VAR 0 1
35249: PPUSH
35250: CALL_OW 257
35254: PUSH
35255: LD_INT 9
35257: NONEQUAL
35258: OR
35259: IFFALSE 35263
// exit ;
35261: GO 35836
// side := GetSide ( unit ) ;
35263: LD_ADDR_VAR 0 9
35267: PUSH
35268: LD_VAR 0 1
35272: PPUSH
35273: CALL_OW 255
35277: ST_TO_ADDR
// tech_space := tech_spacanom ;
35278: LD_ADDR_VAR 0 12
35282: PUSH
35283: LD_INT 29
35285: ST_TO_ADDR
// tech_time := tech_taurad ;
35286: LD_ADDR_VAR 0 13
35290: PUSH
35291: LD_INT 28
35293: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35294: LD_ADDR_VAR 0 11
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 310
35308: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35309: LD_VAR 0 11
35313: PPUSH
35314: CALL_OW 247
35318: PUSH
35319: LD_INT 2
35321: EQUAL
35322: IFFALSE 35326
// exit ;
35324: GO 35836
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35326: LD_ADDR_VAR 0 8
35330: PUSH
35331: LD_INT 81
35333: PUSH
35334: LD_VAR 0 9
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: LD_INT 21
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PPUSH
35364: CALL_OW 69
35368: ST_TO_ADDR
// if not tmp then
35369: LD_VAR 0 8
35373: NOT
35374: IFFALSE 35378
// exit ;
35376: GO 35836
// if in_unit then
35378: LD_VAR 0 11
35382: IFFALSE 35406
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35384: LD_ADDR_VAR 0 10
35388: PUSH
35389: LD_VAR 0 8
35393: PPUSH
35394: LD_VAR 0 11
35398: PPUSH
35399: CALL_OW 74
35403: ST_TO_ADDR
35404: GO 35426
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35406: LD_ADDR_VAR 0 10
35410: PUSH
35411: LD_VAR 0 8
35415: PPUSH
35416: LD_VAR 0 1
35420: PPUSH
35421: CALL_OW 74
35425: ST_TO_ADDR
// if not enemy then
35426: LD_VAR 0 10
35430: NOT
35431: IFFALSE 35435
// exit ;
35433: GO 35836
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35435: LD_VAR 0 11
35439: PUSH
35440: LD_VAR 0 11
35444: PPUSH
35445: LD_VAR 0 10
35449: PPUSH
35450: CALL_OW 296
35454: PUSH
35455: LD_INT 13
35457: GREATER
35458: AND
35459: PUSH
35460: LD_VAR 0 1
35464: PPUSH
35465: LD_VAR 0 10
35469: PPUSH
35470: CALL_OW 296
35474: PUSH
35475: LD_INT 12
35477: GREATER
35478: OR
35479: IFFALSE 35483
// exit ;
35481: GO 35836
// missile := [ 1 ] ;
35483: LD_ADDR_VAR 0 14
35487: PUSH
35488: LD_INT 1
35490: PUSH
35491: EMPTY
35492: LIST
35493: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35494: LD_VAR 0 9
35498: PPUSH
35499: LD_VAR 0 12
35503: PPUSH
35504: CALL_OW 325
35508: IFFALSE 35537
// missile := Replace ( missile , missile + 1 , 2 ) ;
35510: LD_ADDR_VAR 0 14
35514: PUSH
35515: LD_VAR 0 14
35519: PPUSH
35520: LD_VAR 0 14
35524: PUSH
35525: LD_INT 1
35527: PLUS
35528: PPUSH
35529: LD_INT 2
35531: PPUSH
35532: CALL_OW 1
35536: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35537: LD_VAR 0 9
35541: PPUSH
35542: LD_VAR 0 13
35546: PPUSH
35547: CALL_OW 325
35551: PUSH
35552: LD_VAR 0 10
35556: PPUSH
35557: CALL_OW 255
35561: PPUSH
35562: LD_VAR 0 13
35566: PPUSH
35567: CALL_OW 325
35571: NOT
35572: AND
35573: IFFALSE 35602
// missile := Replace ( missile , missile + 1 , 3 ) ;
35575: LD_ADDR_VAR 0 14
35579: PUSH
35580: LD_VAR 0 14
35584: PPUSH
35585: LD_VAR 0 14
35589: PUSH
35590: LD_INT 1
35592: PLUS
35593: PPUSH
35594: LD_INT 3
35596: PPUSH
35597: CALL_OW 1
35601: ST_TO_ADDR
// if missile < 2 then
35602: LD_VAR 0 14
35606: PUSH
35607: LD_INT 2
35609: LESS
35610: IFFALSE 35614
// exit ;
35612: GO 35836
// x := GetX ( enemy ) ;
35614: LD_ADDR_VAR 0 4
35618: PUSH
35619: LD_VAR 0 10
35623: PPUSH
35624: CALL_OW 250
35628: ST_TO_ADDR
// y := GetY ( enemy ) ;
35629: LD_ADDR_VAR 0 5
35633: PUSH
35634: LD_VAR 0 10
35638: PPUSH
35639: CALL_OW 251
35643: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35644: LD_ADDR_VAR 0 6
35648: PUSH
35649: LD_VAR 0 4
35653: PUSH
35654: LD_INT 1
35656: NEG
35657: PPUSH
35658: LD_INT 1
35660: PPUSH
35661: CALL_OW 12
35665: PLUS
35666: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35667: LD_ADDR_VAR 0 7
35671: PUSH
35672: LD_VAR 0 5
35676: PUSH
35677: LD_INT 1
35679: NEG
35680: PPUSH
35681: LD_INT 1
35683: PPUSH
35684: CALL_OW 12
35688: PLUS
35689: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35690: LD_VAR 0 6
35694: PPUSH
35695: LD_VAR 0 7
35699: PPUSH
35700: CALL_OW 488
35704: NOT
35705: IFFALSE 35727
// begin _x := x ;
35707: LD_ADDR_VAR 0 6
35711: PUSH
35712: LD_VAR 0 4
35716: ST_TO_ADDR
// _y := y ;
35717: LD_ADDR_VAR 0 7
35721: PUSH
35722: LD_VAR 0 5
35726: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35727: LD_ADDR_VAR 0 3
35731: PUSH
35732: LD_INT 1
35734: PPUSH
35735: LD_VAR 0 14
35739: PPUSH
35740: CALL_OW 12
35744: ST_TO_ADDR
// case i of 1 :
35745: LD_VAR 0 3
35749: PUSH
35750: LD_INT 1
35752: DOUBLE
35753: EQUAL
35754: IFTRUE 35758
35756: GO 35775
35758: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35759: LD_VAR 0 1
35763: PPUSH
35764: LD_VAR 0 10
35768: PPUSH
35769: CALL_OW 115
35773: GO 35836
35775: LD_INT 2
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35783
35781: GO 35805
35783: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35784: LD_VAR 0 1
35788: PPUSH
35789: LD_VAR 0 6
35793: PPUSH
35794: LD_VAR 0 7
35798: PPUSH
35799: CALL_OW 153
35803: GO 35836
35805: LD_INT 3
35807: DOUBLE
35808: EQUAL
35809: IFTRUE 35813
35811: GO 35835
35813: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35814: LD_VAR 0 1
35818: PPUSH
35819: LD_VAR 0 6
35823: PPUSH
35824: LD_VAR 0 7
35828: PPUSH
35829: CALL_OW 154
35833: GO 35836
35835: POP
// end ;
35836: LD_VAR 0 2
35840: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35841: LD_INT 0
35843: PPUSH
35844: PPUSH
35845: PPUSH
35846: PPUSH
35847: PPUSH
35848: PPUSH
// if not unit or not building then
35849: LD_VAR 0 1
35853: NOT
35854: PUSH
35855: LD_VAR 0 2
35859: NOT
35860: OR
35861: IFFALSE 35865
// exit ;
35863: GO 36023
// x := GetX ( building ) ;
35865: LD_ADDR_VAR 0 5
35869: PUSH
35870: LD_VAR 0 2
35874: PPUSH
35875: CALL_OW 250
35879: ST_TO_ADDR
// y := GetY ( building ) ;
35880: LD_ADDR_VAR 0 6
35884: PUSH
35885: LD_VAR 0 2
35889: PPUSH
35890: CALL_OW 251
35894: ST_TO_ADDR
// for i = 0 to 5 do
35895: LD_ADDR_VAR 0 4
35899: PUSH
35900: DOUBLE
35901: LD_INT 0
35903: DEC
35904: ST_TO_ADDR
35905: LD_INT 5
35907: PUSH
35908: FOR_TO
35909: IFFALSE 36021
// begin _x := ShiftX ( x , i , 3 ) ;
35911: LD_ADDR_VAR 0 7
35915: PUSH
35916: LD_VAR 0 5
35920: PPUSH
35921: LD_VAR 0 4
35925: PPUSH
35926: LD_INT 3
35928: PPUSH
35929: CALL_OW 272
35933: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35934: LD_ADDR_VAR 0 8
35938: PUSH
35939: LD_VAR 0 6
35943: PPUSH
35944: LD_VAR 0 4
35948: PPUSH
35949: LD_INT 3
35951: PPUSH
35952: CALL_OW 273
35956: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35957: LD_VAR 0 7
35961: PPUSH
35962: LD_VAR 0 8
35966: PPUSH
35967: CALL_OW 488
35971: NOT
35972: IFFALSE 35976
// continue ;
35974: GO 35908
// if HexInfo ( _x , _y ) = 0 then
35976: LD_VAR 0 7
35980: PPUSH
35981: LD_VAR 0 8
35985: PPUSH
35986: CALL_OW 428
35990: PUSH
35991: LD_INT 0
35993: EQUAL
35994: IFFALSE 36019
// begin ComMoveXY ( unit , _x , _y ) ;
35996: LD_VAR 0 1
36000: PPUSH
36001: LD_VAR 0 7
36005: PPUSH
36006: LD_VAR 0 8
36010: PPUSH
36011: CALL_OW 111
// exit ;
36015: POP
36016: POP
36017: GO 36023
// end ; end ;
36019: GO 35908
36021: POP
36022: POP
// end ;
36023: LD_VAR 0 3
36027: RET
// export function ScanBase ( side , base_area ) ; begin
36028: LD_INT 0
36030: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36031: LD_ADDR_VAR 0 3
36035: PUSH
36036: LD_VAR 0 2
36040: PPUSH
36041: LD_INT 81
36043: PUSH
36044: LD_VAR 0 1
36048: PUSH
36049: EMPTY
36050: LIST
36051: LIST
36052: PPUSH
36053: CALL_OW 70
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 3
36062: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
// result := false ;
36069: LD_ADDR_VAR 0 2
36073: PUSH
36074: LD_INT 0
36076: ST_TO_ADDR
// side := GetSide ( unit ) ;
36077: LD_ADDR_VAR 0 3
36081: PUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 255
36091: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36092: LD_ADDR_VAR 0 4
36096: PUSH
36097: LD_VAR 0 1
36101: PPUSH
36102: CALL_OW 248
36106: ST_TO_ADDR
// case nat of 1 :
36107: LD_VAR 0 4
36111: PUSH
36112: LD_INT 1
36114: DOUBLE
36115: EQUAL
36116: IFTRUE 36120
36118: GO 36131
36120: POP
// tech := tech_lassight ; 2 :
36121: LD_ADDR_VAR 0 5
36125: PUSH
36126: LD_INT 12
36128: ST_TO_ADDR
36129: GO 36170
36131: LD_INT 2
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36150
36139: POP
// tech := tech_mortar ; 3 :
36140: LD_ADDR_VAR 0 5
36144: PUSH
36145: LD_INT 41
36147: ST_TO_ADDR
36148: GO 36170
36150: LD_INT 3
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36169
36158: POP
// tech := tech_bazooka ; end ;
36159: LD_ADDR_VAR 0 5
36163: PUSH
36164: LD_INT 44
36166: ST_TO_ADDR
36167: GO 36170
36169: POP
// if Researched ( side , tech ) then
36170: LD_VAR 0 3
36174: PPUSH
36175: LD_VAR 0 5
36179: PPUSH
36180: CALL_OW 325
36184: IFFALSE 36211
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36186: LD_ADDR_VAR 0 2
36190: PUSH
36191: LD_INT 5
36193: PUSH
36194: LD_INT 8
36196: PUSH
36197: LD_INT 9
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: PUSH
36205: LD_VAR 0 4
36209: ARRAY
36210: ST_TO_ADDR
// end ;
36211: LD_VAR 0 2
36215: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36216: LD_INT 0
36218: PPUSH
36219: PPUSH
36220: PPUSH
// if not mines then
36221: LD_VAR 0 2
36225: NOT
36226: IFFALSE 36230
// exit ;
36228: GO 36374
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36230: LD_ADDR_VAR 0 5
36234: PUSH
36235: LD_INT 81
36237: PUSH
36238: LD_VAR 0 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 3
36249: PUSH
36250: LD_INT 21
36252: PUSH
36253: LD_INT 3
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PPUSH
36268: CALL_OW 69
36272: ST_TO_ADDR
// for i in mines do
36273: LD_ADDR_VAR 0 4
36277: PUSH
36278: LD_VAR 0 2
36282: PUSH
36283: FOR_IN
36284: IFFALSE 36372
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36286: LD_VAR 0 4
36290: PUSH
36291: LD_INT 1
36293: ARRAY
36294: PPUSH
36295: LD_VAR 0 4
36299: PUSH
36300: LD_INT 2
36302: ARRAY
36303: PPUSH
36304: CALL_OW 458
36308: NOT
36309: IFFALSE 36313
// continue ;
36311: GO 36283
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36313: LD_VAR 0 4
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: LD_VAR 0 4
36326: PUSH
36327: LD_INT 2
36329: ARRAY
36330: PPUSH
36331: CALL_OW 428
36335: PUSH
36336: LD_VAR 0 5
36340: IN
36341: IFFALSE 36370
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36343: LD_VAR 0 4
36347: PUSH
36348: LD_INT 1
36350: ARRAY
36351: PPUSH
36352: LD_VAR 0 4
36356: PUSH
36357: LD_INT 2
36359: ARRAY
36360: PPUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 456
// end ;
36370: GO 36283
36372: POP
36373: POP
// end ;
36374: LD_VAR 0 3
36378: RET
// export function Count ( array ) ; begin
36379: LD_INT 0
36381: PPUSH
// result := array + 0 ;
36382: LD_ADDR_VAR 0 2
36386: PUSH
36387: LD_VAR 0 1
36391: PUSH
36392: LD_INT 0
36394: PLUS
36395: ST_TO_ADDR
// end ;
36396: LD_VAR 0 2
36400: RET
// export function IsEmpty ( building ) ; begin
36401: LD_INT 0
36403: PPUSH
// if not building then
36404: LD_VAR 0 1
36408: NOT
36409: IFFALSE 36413
// exit ;
36411: GO 36456
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36413: LD_ADDR_VAR 0 2
36417: PUSH
36418: LD_VAR 0 1
36422: PUSH
36423: LD_INT 22
36425: PUSH
36426: LD_VAR 0 1
36430: PPUSH
36431: CALL_OW 255
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 58
36442: PUSH
36443: EMPTY
36444: LIST
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PPUSH
36450: CALL_OW 69
36454: IN
36455: ST_TO_ADDR
// end ;
36456: LD_VAR 0 2
36460: RET
// export function IsNotFull ( building ) ; var places ; begin
36461: LD_INT 0
36463: PPUSH
36464: PPUSH
// if not building then
36465: LD_VAR 0 1
36469: NOT
36470: IFFALSE 36474
// exit ;
36472: GO 36502
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
36474: LD_ADDR_VAR 0 2
36478: PUSH
36479: LD_VAR 0 1
36483: PPUSH
36484: LD_INT 3
36486: PUSH
36487: LD_INT 62
36489: PUSH
36490: EMPTY
36491: LIST
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PPUSH
36497: CALL_OW 72
36501: ST_TO_ADDR
// end ;
36502: LD_VAR 0 2
36506: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36507: LD_INT 0
36509: PPUSH
36510: PPUSH
36511: PPUSH
36512: PPUSH
// tmp := [ ] ;
36513: LD_ADDR_VAR 0 3
36517: PUSH
36518: EMPTY
36519: ST_TO_ADDR
// list := [ ] ;
36520: LD_ADDR_VAR 0 5
36524: PUSH
36525: EMPTY
36526: ST_TO_ADDR
// for i = 16 to 25 do
36527: LD_ADDR_VAR 0 4
36531: PUSH
36532: DOUBLE
36533: LD_INT 16
36535: DEC
36536: ST_TO_ADDR
36537: LD_INT 25
36539: PUSH
36540: FOR_TO
36541: IFFALSE 36614
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36543: LD_ADDR_VAR 0 3
36547: PUSH
36548: LD_VAR 0 3
36552: PUSH
36553: LD_INT 22
36555: PUSH
36556: LD_VAR 0 1
36560: PPUSH
36561: CALL_OW 255
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 91
36572: PUSH
36573: LD_VAR 0 1
36577: PUSH
36578: LD_INT 6
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: LIST
36585: PUSH
36586: LD_INT 30
36588: PUSH
36589: LD_VAR 0 4
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: LIST
36602: PUSH
36603: EMPTY
36604: LIST
36605: PPUSH
36606: CALL_OW 69
36610: ADD
36611: ST_TO_ADDR
36612: GO 36540
36614: POP
36615: POP
// for i = 1 to tmp do
36616: LD_ADDR_VAR 0 4
36620: PUSH
36621: DOUBLE
36622: LD_INT 1
36624: DEC
36625: ST_TO_ADDR
36626: LD_VAR 0 3
36630: PUSH
36631: FOR_TO
36632: IFFALSE 36720
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36634: LD_ADDR_VAR 0 5
36638: PUSH
36639: LD_VAR 0 5
36643: PUSH
36644: LD_VAR 0 3
36648: PUSH
36649: LD_VAR 0 4
36653: ARRAY
36654: PPUSH
36655: CALL_OW 266
36659: PUSH
36660: LD_VAR 0 3
36664: PUSH
36665: LD_VAR 0 4
36669: ARRAY
36670: PPUSH
36671: CALL_OW 250
36675: PUSH
36676: LD_VAR 0 3
36680: PUSH
36681: LD_VAR 0 4
36685: ARRAY
36686: PPUSH
36687: CALL_OW 251
36691: PUSH
36692: LD_VAR 0 3
36696: PUSH
36697: LD_VAR 0 4
36701: ARRAY
36702: PPUSH
36703: CALL_OW 254
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: PUSH
36714: EMPTY
36715: LIST
36716: ADD
36717: ST_TO_ADDR
36718: GO 36631
36720: POP
36721: POP
// result := list ;
36722: LD_ADDR_VAR 0 2
36726: PUSH
36727: LD_VAR 0 5
36731: ST_TO_ADDR
// end ;
36732: LD_VAR 0 2
36736: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36737: LD_INT 0
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
36743: PPUSH
36744: PPUSH
36745: PPUSH
// if not factory then
36746: LD_VAR 0 1
36750: NOT
36751: IFFALSE 36755
// exit ;
36753: GO 37348
// if control = control_apeman then
36755: LD_VAR 0 4
36759: PUSH
36760: LD_INT 5
36762: EQUAL
36763: IFFALSE 36872
// begin tmp := UnitsInside ( factory ) ;
36765: LD_ADDR_VAR 0 8
36769: PUSH
36770: LD_VAR 0 1
36774: PPUSH
36775: CALL_OW 313
36779: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36780: LD_VAR 0 8
36784: PPUSH
36785: LD_INT 25
36787: PUSH
36788: LD_INT 12
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PPUSH
36795: CALL_OW 72
36799: NOT
36800: IFFALSE 36810
// control := control_manual ;
36802: LD_ADDR_VAR 0 4
36806: PUSH
36807: LD_INT 1
36809: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36810: LD_ADDR_VAR 0 8
36814: PUSH
36815: LD_VAR 0 1
36819: PPUSH
36820: CALL 36507 0 1
36824: ST_TO_ADDR
// if tmp then
36825: LD_VAR 0 8
36829: IFFALSE 36872
// begin for i in tmp do
36831: LD_ADDR_VAR 0 7
36835: PUSH
36836: LD_VAR 0 8
36840: PUSH
36841: FOR_IN
36842: IFFALSE 36870
// if i [ 1 ] = b_ext_radio then
36844: LD_VAR 0 7
36848: PUSH
36849: LD_INT 1
36851: ARRAY
36852: PUSH
36853: LD_INT 22
36855: EQUAL
36856: IFFALSE 36868
// begin control := control_remote ;
36858: LD_ADDR_VAR 0 4
36862: PUSH
36863: LD_INT 2
36865: ST_TO_ADDR
// break ;
36866: GO 36870
// end ;
36868: GO 36841
36870: POP
36871: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36872: LD_VAR 0 1
36876: PPUSH
36877: LD_VAR 0 2
36881: PPUSH
36882: LD_VAR 0 3
36886: PPUSH
36887: LD_VAR 0 4
36891: PPUSH
36892: LD_VAR 0 5
36896: PPUSH
36897: CALL_OW 448
36901: IFFALSE 36936
// begin result := [ chassis , engine , control , weapon ] ;
36903: LD_ADDR_VAR 0 6
36907: PUSH
36908: LD_VAR 0 2
36912: PUSH
36913: LD_VAR 0 3
36917: PUSH
36918: LD_VAR 0 4
36922: PUSH
36923: LD_VAR 0 5
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: ST_TO_ADDR
// exit ;
36934: GO 37348
// end ; _chassis := AvailableChassisList ( factory ) ;
36936: LD_ADDR_VAR 0 9
36940: PUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: CALL_OW 475
36950: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36951: LD_ADDR_VAR 0 11
36955: PUSH
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 476
36965: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36966: LD_ADDR_VAR 0 12
36970: PUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 477
36980: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36981: LD_ADDR_VAR 0 10
36985: PUSH
36986: LD_VAR 0 1
36990: PPUSH
36991: CALL_OW 478
36995: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36996: LD_VAR 0 9
37000: NOT
37001: PUSH
37002: LD_VAR 0 11
37006: NOT
37007: OR
37008: PUSH
37009: LD_VAR 0 12
37013: NOT
37014: OR
37015: PUSH
37016: LD_VAR 0 10
37020: NOT
37021: OR
37022: IFFALSE 37057
// begin result := [ chassis , engine , control , weapon ] ;
37024: LD_ADDR_VAR 0 6
37028: PUSH
37029: LD_VAR 0 2
37033: PUSH
37034: LD_VAR 0 3
37038: PUSH
37039: LD_VAR 0 4
37043: PUSH
37044: LD_VAR 0 5
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: ST_TO_ADDR
// exit ;
37055: GO 37348
// end ; if not chassis in _chassis then
37057: LD_VAR 0 2
37061: PUSH
37062: LD_VAR 0 9
37066: IN
37067: NOT
37068: IFFALSE 37094
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37070: LD_ADDR_VAR 0 2
37074: PUSH
37075: LD_VAR 0 9
37079: PUSH
37080: LD_INT 1
37082: PPUSH
37083: LD_VAR 0 9
37087: PPUSH
37088: CALL_OW 12
37092: ARRAY
37093: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37094: LD_VAR 0 2
37098: PPUSH
37099: LD_VAR 0 3
37103: PPUSH
37104: CALL 37353 0 2
37108: NOT
37109: IFFALSE 37168
// repeat engine := _engine [ 1 ] ;
37111: LD_ADDR_VAR 0 3
37115: PUSH
37116: LD_VAR 0 11
37120: PUSH
37121: LD_INT 1
37123: ARRAY
37124: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37125: LD_ADDR_VAR 0 11
37129: PUSH
37130: LD_VAR 0 11
37134: PPUSH
37135: LD_INT 1
37137: PPUSH
37138: CALL_OW 3
37142: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37143: LD_VAR 0 2
37147: PPUSH
37148: LD_VAR 0 3
37152: PPUSH
37153: CALL 37353 0 2
37157: PUSH
37158: LD_VAR 0 11
37162: PUSH
37163: EMPTY
37164: EQUAL
37165: OR
37166: IFFALSE 37111
// if not control in _control then
37168: LD_VAR 0 4
37172: PUSH
37173: LD_VAR 0 12
37177: IN
37178: NOT
37179: IFFALSE 37205
// control := _control [ rand ( 1 , _control ) ] ;
37181: LD_ADDR_VAR 0 4
37185: PUSH
37186: LD_VAR 0 12
37190: PUSH
37191: LD_INT 1
37193: PPUSH
37194: LD_VAR 0 12
37198: PPUSH
37199: CALL_OW 12
37203: ARRAY
37204: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37205: LD_VAR 0 2
37209: PPUSH
37210: LD_VAR 0 5
37214: PPUSH
37215: CALL 37573 0 2
37219: NOT
37220: IFFALSE 37279
// repeat weapon := _weapon [ 1 ] ;
37222: LD_ADDR_VAR 0 5
37226: PUSH
37227: LD_VAR 0 10
37231: PUSH
37232: LD_INT 1
37234: ARRAY
37235: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37236: LD_ADDR_VAR 0 10
37240: PUSH
37241: LD_VAR 0 10
37245: PPUSH
37246: LD_INT 1
37248: PPUSH
37249: CALL_OW 3
37253: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37254: LD_VAR 0 2
37258: PPUSH
37259: LD_VAR 0 5
37263: PPUSH
37264: CALL 37573 0 2
37268: PUSH
37269: LD_VAR 0 10
37273: PUSH
37274: EMPTY
37275: EQUAL
37276: OR
37277: IFFALSE 37222
// result := [ ] ;
37279: LD_ADDR_VAR 0 6
37283: PUSH
37284: EMPTY
37285: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37286: LD_VAR 0 1
37290: PPUSH
37291: LD_VAR 0 2
37295: PPUSH
37296: LD_VAR 0 3
37300: PPUSH
37301: LD_VAR 0 4
37305: PPUSH
37306: LD_VAR 0 5
37310: PPUSH
37311: CALL_OW 448
37315: IFFALSE 37348
// result := [ chassis , engine , control , weapon ] ;
37317: LD_ADDR_VAR 0 6
37321: PUSH
37322: LD_VAR 0 2
37326: PUSH
37327: LD_VAR 0 3
37331: PUSH
37332: LD_VAR 0 4
37336: PUSH
37337: LD_VAR 0 5
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: ST_TO_ADDR
// end ;
37348: LD_VAR 0 6
37352: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37353: LD_INT 0
37355: PPUSH
// if not chassis or not engine then
37356: LD_VAR 0 1
37360: NOT
37361: PUSH
37362: LD_VAR 0 2
37366: NOT
37367: OR
37368: IFFALSE 37372
// exit ;
37370: GO 37568
// case engine of engine_solar :
37372: LD_VAR 0 2
37376: PUSH
37377: LD_INT 2
37379: DOUBLE
37380: EQUAL
37381: IFTRUE 37385
37383: GO 37423
37385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37386: LD_ADDR_VAR 0 3
37390: PUSH
37391: LD_INT 11
37393: PUSH
37394: LD_INT 12
37396: PUSH
37397: LD_INT 13
37399: PUSH
37400: LD_INT 14
37402: PUSH
37403: LD_INT 1
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: LD_INT 3
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: LIST
37416: LIST
37417: LIST
37418: LIST
37419: LIST
37420: ST_TO_ADDR
37421: GO 37552
37423: LD_INT 1
37425: DOUBLE
37426: EQUAL
37427: IFTRUE 37431
37429: GO 37493
37431: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37432: LD_ADDR_VAR 0 3
37436: PUSH
37437: LD_INT 11
37439: PUSH
37440: LD_INT 12
37442: PUSH
37443: LD_INT 13
37445: PUSH
37446: LD_INT 14
37448: PUSH
37449: LD_INT 1
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: LD_INT 3
37457: PUSH
37458: LD_INT 4
37460: PUSH
37461: LD_INT 5
37463: PUSH
37464: LD_INT 21
37466: PUSH
37467: LD_INT 23
37469: PUSH
37470: LD_INT 22
37472: PUSH
37473: LD_INT 24
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
37491: GO 37552
37493: LD_INT 3
37495: DOUBLE
37496: EQUAL
37497: IFTRUE 37501
37499: GO 37551
37501: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37502: LD_ADDR_VAR 0 3
37506: PUSH
37507: LD_INT 13
37509: PUSH
37510: LD_INT 14
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 3
37518: PUSH
37519: LD_INT 4
37521: PUSH
37522: LD_INT 5
37524: PUSH
37525: LD_INT 21
37527: PUSH
37528: LD_INT 22
37530: PUSH
37531: LD_INT 23
37533: PUSH
37534: LD_INT 24
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: ST_TO_ADDR
37549: GO 37552
37551: POP
// result := ( chassis in result ) ;
37552: LD_ADDR_VAR 0 3
37556: PUSH
37557: LD_VAR 0 1
37561: PUSH
37562: LD_VAR 0 3
37566: IN
37567: ST_TO_ADDR
// end ;
37568: LD_VAR 0 3
37572: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37573: LD_INT 0
37575: PPUSH
// if not chassis or not weapon then
37576: LD_VAR 0 1
37580: NOT
37581: PUSH
37582: LD_VAR 0 2
37586: NOT
37587: OR
37588: IFFALSE 37592
// exit ;
37590: GO 38652
// case weapon of us_machine_gun :
37592: LD_VAR 0 2
37596: PUSH
37597: LD_INT 2
37599: DOUBLE
37600: EQUAL
37601: IFTRUE 37605
37603: GO 37635
37605: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37606: LD_ADDR_VAR 0 3
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 3
37619: PUSH
37620: LD_INT 4
37622: PUSH
37623: LD_INT 5
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: ST_TO_ADDR
37633: GO 38636
37635: LD_INT 3
37637: DOUBLE
37638: EQUAL
37639: IFTRUE 37643
37641: GO 37673
37643: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37644: LD_ADDR_VAR 0 3
37648: PUSH
37649: LD_INT 1
37651: PUSH
37652: LD_INT 2
37654: PUSH
37655: LD_INT 3
37657: PUSH
37658: LD_INT 4
37660: PUSH
37661: LD_INT 5
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: ST_TO_ADDR
37671: GO 38636
37673: LD_INT 11
37675: DOUBLE
37676: EQUAL
37677: IFTRUE 37681
37679: GO 37711
37681: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37682: LD_ADDR_VAR 0 3
37686: PUSH
37687: LD_INT 1
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 4
37698: PUSH
37699: LD_INT 5
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: ST_TO_ADDR
37709: GO 38636
37711: LD_INT 4
37713: DOUBLE
37714: EQUAL
37715: IFTRUE 37719
37717: GO 37745
37719: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37720: LD_ADDR_VAR 0 3
37724: PUSH
37725: LD_INT 2
37727: PUSH
37728: LD_INT 3
37730: PUSH
37731: LD_INT 4
37733: PUSH
37734: LD_INT 5
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: ST_TO_ADDR
37743: GO 38636
37745: LD_INT 5
37747: DOUBLE
37748: EQUAL
37749: IFTRUE 37753
37751: GO 37779
37753: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37754: LD_ADDR_VAR 0 3
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: LD_INT 3
37764: PUSH
37765: LD_INT 4
37767: PUSH
37768: LD_INT 5
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
37777: GO 38636
37779: LD_INT 9
37781: DOUBLE
37782: EQUAL
37783: IFTRUE 37787
37785: GO 37813
37787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37788: LD_ADDR_VAR 0 3
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: LD_INT 3
37798: PUSH
37799: LD_INT 4
37801: PUSH
37802: LD_INT 5
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
37811: GO 38636
37813: LD_INT 7
37815: DOUBLE
37816: EQUAL
37817: IFTRUE 37821
37819: GO 37847
37821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37822: LD_ADDR_VAR 0 3
37826: PUSH
37827: LD_INT 2
37829: PUSH
37830: LD_INT 3
37832: PUSH
37833: LD_INT 4
37835: PUSH
37836: LD_INT 5
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
37845: GO 38636
37847: LD_INT 12
37849: DOUBLE
37850: EQUAL
37851: IFTRUE 37855
37853: GO 37881
37855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37856: LD_ADDR_VAR 0 3
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 3
37866: PUSH
37867: LD_INT 4
37869: PUSH
37870: LD_INT 5
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: ST_TO_ADDR
37879: GO 38636
37881: LD_INT 13
37883: DOUBLE
37884: EQUAL
37885: IFTRUE 37889
37887: GO 37915
37889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37890: LD_ADDR_VAR 0 3
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: LD_INT 4
37903: PUSH
37904: LD_INT 5
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
37913: GO 38636
37915: LD_INT 14
37917: DOUBLE
37918: EQUAL
37919: IFTRUE 37923
37921: GO 37941
37923: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_INT 4
37931: PUSH
37932: LD_INT 5
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: ST_TO_ADDR
37939: GO 38636
37941: LD_INT 6
37943: DOUBLE
37944: EQUAL
37945: IFTRUE 37949
37947: GO 37967
37949: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37950: LD_ADDR_VAR 0 3
37954: PUSH
37955: LD_INT 4
37957: PUSH
37958: LD_INT 5
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: ST_TO_ADDR
37965: GO 38636
37967: LD_INT 10
37969: DOUBLE
37970: EQUAL
37971: IFTRUE 37975
37973: GO 37993
37975: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37976: LD_ADDR_VAR 0 3
37980: PUSH
37981: LD_INT 4
37983: PUSH
37984: LD_INT 5
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: ST_TO_ADDR
37991: GO 38636
37993: LD_INT 22
37995: DOUBLE
37996: EQUAL
37997: IFTRUE 38001
37999: GO 38027
38001: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38002: LD_ADDR_VAR 0 3
38006: PUSH
38007: LD_INT 11
38009: PUSH
38010: LD_INT 12
38012: PUSH
38013: LD_INT 13
38015: PUSH
38016: LD_INT 14
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: ST_TO_ADDR
38025: GO 38636
38027: LD_INT 23
38029: DOUBLE
38030: EQUAL
38031: IFTRUE 38035
38033: GO 38061
38035: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38036: LD_ADDR_VAR 0 3
38040: PUSH
38041: LD_INT 11
38043: PUSH
38044: LD_INT 12
38046: PUSH
38047: LD_INT 13
38049: PUSH
38050: LD_INT 14
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: ST_TO_ADDR
38059: GO 38636
38061: LD_INT 24
38063: DOUBLE
38064: EQUAL
38065: IFTRUE 38069
38067: GO 38095
38069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38070: LD_ADDR_VAR 0 3
38074: PUSH
38075: LD_INT 11
38077: PUSH
38078: LD_INT 12
38080: PUSH
38081: LD_INT 13
38083: PUSH
38084: LD_INT 14
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: ST_TO_ADDR
38093: GO 38636
38095: LD_INT 30
38097: DOUBLE
38098: EQUAL
38099: IFTRUE 38103
38101: GO 38129
38103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38104: LD_ADDR_VAR 0 3
38108: PUSH
38109: LD_INT 11
38111: PUSH
38112: LD_INT 12
38114: PUSH
38115: LD_INT 13
38117: PUSH
38118: LD_INT 14
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: ST_TO_ADDR
38127: GO 38636
38129: LD_INT 25
38131: DOUBLE
38132: EQUAL
38133: IFTRUE 38137
38135: GO 38155
38137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: LD_INT 13
38145: PUSH
38146: LD_INT 14
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: ST_TO_ADDR
38153: GO 38636
38155: LD_INT 27
38157: DOUBLE
38158: EQUAL
38159: IFTRUE 38163
38161: GO 38181
38163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38164: LD_ADDR_VAR 0 3
38168: PUSH
38169: LD_INT 13
38171: PUSH
38172: LD_INT 14
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: ST_TO_ADDR
38179: GO 38636
38181: LD_INT 92
38183: DOUBLE
38184: EQUAL
38185: IFTRUE 38189
38187: GO 38215
38189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38190: LD_ADDR_VAR 0 3
38194: PUSH
38195: LD_INT 11
38197: PUSH
38198: LD_INT 12
38200: PUSH
38201: LD_INT 13
38203: PUSH
38204: LD_INT 14
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: ST_TO_ADDR
38213: GO 38636
38215: LD_INT 28
38217: DOUBLE
38218: EQUAL
38219: IFTRUE 38223
38221: GO 38241
38223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38224: LD_ADDR_VAR 0 3
38228: PUSH
38229: LD_INT 13
38231: PUSH
38232: LD_INT 14
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: ST_TO_ADDR
38239: GO 38636
38241: LD_INT 29
38243: DOUBLE
38244: EQUAL
38245: IFTRUE 38249
38247: GO 38267
38249: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: LD_INT 13
38257: PUSH
38258: LD_INT 14
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: ST_TO_ADDR
38265: GO 38636
38267: LD_INT 31
38269: DOUBLE
38270: EQUAL
38271: IFTRUE 38275
38273: GO 38293
38275: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38276: LD_ADDR_VAR 0 3
38280: PUSH
38281: LD_INT 13
38283: PUSH
38284: LD_INT 14
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: ST_TO_ADDR
38291: GO 38636
38293: LD_INT 26
38295: DOUBLE
38296: EQUAL
38297: IFTRUE 38301
38299: GO 38319
38301: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38302: LD_ADDR_VAR 0 3
38306: PUSH
38307: LD_INT 13
38309: PUSH
38310: LD_INT 14
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: ST_TO_ADDR
38317: GO 38636
38319: LD_INT 42
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38327
38325: GO 38353
38327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38328: LD_ADDR_VAR 0 3
38332: PUSH
38333: LD_INT 21
38335: PUSH
38336: LD_INT 22
38338: PUSH
38339: LD_INT 23
38341: PUSH
38342: LD_INT 24
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: ST_TO_ADDR
38351: GO 38636
38353: LD_INT 43
38355: DOUBLE
38356: EQUAL
38357: IFTRUE 38361
38359: GO 38387
38361: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38362: LD_ADDR_VAR 0 3
38366: PUSH
38367: LD_INT 21
38369: PUSH
38370: LD_INT 22
38372: PUSH
38373: LD_INT 23
38375: PUSH
38376: LD_INT 24
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: ST_TO_ADDR
38385: GO 38636
38387: LD_INT 44
38389: DOUBLE
38390: EQUAL
38391: IFTRUE 38395
38393: GO 38421
38395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38396: LD_ADDR_VAR 0 3
38400: PUSH
38401: LD_INT 21
38403: PUSH
38404: LD_INT 22
38406: PUSH
38407: LD_INT 23
38409: PUSH
38410: LD_INT 24
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: ST_TO_ADDR
38419: GO 38636
38421: LD_INT 45
38423: DOUBLE
38424: EQUAL
38425: IFTRUE 38429
38427: GO 38455
38429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38430: LD_ADDR_VAR 0 3
38434: PUSH
38435: LD_INT 21
38437: PUSH
38438: LD_INT 22
38440: PUSH
38441: LD_INT 23
38443: PUSH
38444: LD_INT 24
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: ST_TO_ADDR
38453: GO 38636
38455: LD_INT 49
38457: DOUBLE
38458: EQUAL
38459: IFTRUE 38463
38461: GO 38489
38463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38464: LD_ADDR_VAR 0 3
38468: PUSH
38469: LD_INT 21
38471: PUSH
38472: LD_INT 22
38474: PUSH
38475: LD_INT 23
38477: PUSH
38478: LD_INT 24
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: ST_TO_ADDR
38487: GO 38636
38489: LD_INT 51
38491: DOUBLE
38492: EQUAL
38493: IFTRUE 38497
38495: GO 38523
38497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38498: LD_ADDR_VAR 0 3
38502: PUSH
38503: LD_INT 21
38505: PUSH
38506: LD_INT 22
38508: PUSH
38509: LD_INT 23
38511: PUSH
38512: LD_INT 24
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: ST_TO_ADDR
38521: GO 38636
38523: LD_INT 52
38525: DOUBLE
38526: EQUAL
38527: IFTRUE 38531
38529: GO 38557
38531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38532: LD_ADDR_VAR 0 3
38536: PUSH
38537: LD_INT 21
38539: PUSH
38540: LD_INT 22
38542: PUSH
38543: LD_INT 23
38545: PUSH
38546: LD_INT 24
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: ST_TO_ADDR
38555: GO 38636
38557: LD_INT 53
38559: DOUBLE
38560: EQUAL
38561: IFTRUE 38565
38563: GO 38583
38565: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38566: LD_ADDR_VAR 0 3
38570: PUSH
38571: LD_INT 23
38573: PUSH
38574: LD_INT 24
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: ST_TO_ADDR
38581: GO 38636
38583: LD_INT 46
38585: DOUBLE
38586: EQUAL
38587: IFTRUE 38591
38589: GO 38609
38591: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38592: LD_ADDR_VAR 0 3
38596: PUSH
38597: LD_INT 23
38599: PUSH
38600: LD_INT 24
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: ST_TO_ADDR
38607: GO 38636
38609: LD_INT 47
38611: DOUBLE
38612: EQUAL
38613: IFTRUE 38617
38615: GO 38635
38617: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38618: LD_ADDR_VAR 0 3
38622: PUSH
38623: LD_INT 23
38625: PUSH
38626: LD_INT 24
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: ST_TO_ADDR
38633: GO 38636
38635: POP
// result := ( chassis in result ) ;
38636: LD_ADDR_VAR 0 3
38640: PUSH
38641: LD_VAR 0 1
38645: PUSH
38646: LD_VAR 0 3
38650: IN
38651: ST_TO_ADDR
// end ;
38652: LD_VAR 0 3
38656: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38657: LD_INT 0
38659: PPUSH
38660: PPUSH
38661: PPUSH
38662: PPUSH
38663: PPUSH
38664: PPUSH
38665: PPUSH
// result := array ;
38666: LD_ADDR_VAR 0 5
38670: PUSH
38671: LD_VAR 0 1
38675: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38676: LD_VAR 0 1
38680: NOT
38681: PUSH
38682: LD_VAR 0 2
38686: NOT
38687: OR
38688: PUSH
38689: LD_VAR 0 3
38693: NOT
38694: OR
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_VAR 0 1
38705: GREATER
38706: OR
38707: PUSH
38708: LD_VAR 0 3
38712: PUSH
38713: LD_VAR 0 1
38717: GREATER
38718: OR
38719: IFFALSE 38723
// exit ;
38721: GO 39019
// if direction then
38723: LD_VAR 0 4
38727: IFFALSE 38791
// begin d := 1 ;
38729: LD_ADDR_VAR 0 9
38733: PUSH
38734: LD_INT 1
38736: ST_TO_ADDR
// if i_from > i_to then
38737: LD_VAR 0 2
38741: PUSH
38742: LD_VAR 0 3
38746: GREATER
38747: IFFALSE 38773
// length := ( array - i_from ) + i_to else
38749: LD_ADDR_VAR 0 11
38753: PUSH
38754: LD_VAR 0 1
38758: PUSH
38759: LD_VAR 0 2
38763: MINUS
38764: PUSH
38765: LD_VAR 0 3
38769: PLUS
38770: ST_TO_ADDR
38771: GO 38789
// length := i_to - i_from ;
38773: LD_ADDR_VAR 0 11
38777: PUSH
38778: LD_VAR 0 3
38782: PUSH
38783: LD_VAR 0 2
38787: MINUS
38788: ST_TO_ADDR
// end else
38789: GO 38852
// begin d := - 1 ;
38791: LD_ADDR_VAR 0 9
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: ST_TO_ADDR
// if i_from > i_to then
38800: LD_VAR 0 2
38804: PUSH
38805: LD_VAR 0 3
38809: GREATER
38810: IFFALSE 38830
// length := i_from - i_to else
38812: LD_ADDR_VAR 0 11
38816: PUSH
38817: LD_VAR 0 2
38821: PUSH
38822: LD_VAR 0 3
38826: MINUS
38827: ST_TO_ADDR
38828: GO 38852
// length := ( array - i_to ) + i_from ;
38830: LD_ADDR_VAR 0 11
38834: PUSH
38835: LD_VAR 0 1
38839: PUSH
38840: LD_VAR 0 3
38844: MINUS
38845: PUSH
38846: LD_VAR 0 2
38850: PLUS
38851: ST_TO_ADDR
// end ; if not length then
38852: LD_VAR 0 11
38856: NOT
38857: IFFALSE 38861
// exit ;
38859: GO 39019
// tmp := array ;
38861: LD_ADDR_VAR 0 10
38865: PUSH
38866: LD_VAR 0 1
38870: ST_TO_ADDR
// for i = 1 to length do
38871: LD_ADDR_VAR 0 6
38875: PUSH
38876: DOUBLE
38877: LD_INT 1
38879: DEC
38880: ST_TO_ADDR
38881: LD_VAR 0 11
38885: PUSH
38886: FOR_TO
38887: IFFALSE 39007
// begin for j = 1 to array do
38889: LD_ADDR_VAR 0 7
38893: PUSH
38894: DOUBLE
38895: LD_INT 1
38897: DEC
38898: ST_TO_ADDR
38899: LD_VAR 0 1
38903: PUSH
38904: FOR_TO
38905: IFFALSE 38993
// begin k := j + d ;
38907: LD_ADDR_VAR 0 8
38911: PUSH
38912: LD_VAR 0 7
38916: PUSH
38917: LD_VAR 0 9
38921: PLUS
38922: ST_TO_ADDR
// if k > array then
38923: LD_VAR 0 8
38927: PUSH
38928: LD_VAR 0 1
38932: GREATER
38933: IFFALSE 38943
// k := 1 ;
38935: LD_ADDR_VAR 0 8
38939: PUSH
38940: LD_INT 1
38942: ST_TO_ADDR
// if not k then
38943: LD_VAR 0 8
38947: NOT
38948: IFFALSE 38960
// k := array ;
38950: LD_ADDR_VAR 0 8
38954: PUSH
38955: LD_VAR 0 1
38959: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38960: LD_ADDR_VAR 0 10
38964: PUSH
38965: LD_VAR 0 10
38969: PPUSH
38970: LD_VAR 0 8
38974: PPUSH
38975: LD_VAR 0 1
38979: PUSH
38980: LD_VAR 0 7
38984: ARRAY
38985: PPUSH
38986: CALL_OW 1
38990: ST_TO_ADDR
// end ;
38991: GO 38904
38993: POP
38994: POP
// array := tmp ;
38995: LD_ADDR_VAR 0 1
38999: PUSH
39000: LD_VAR 0 10
39004: ST_TO_ADDR
// end ;
39005: GO 38886
39007: POP
39008: POP
// result := array ;
39009: LD_ADDR_VAR 0 5
39013: PUSH
39014: LD_VAR 0 1
39018: ST_TO_ADDR
// end ;
39019: LD_VAR 0 5
39023: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39024: LD_INT 0
39026: PPUSH
39027: PPUSH
// result := 0 ;
39028: LD_ADDR_VAR 0 3
39032: PUSH
39033: LD_INT 0
39035: ST_TO_ADDR
// if not array or not value in array then
39036: LD_VAR 0 1
39040: NOT
39041: PUSH
39042: LD_VAR 0 2
39046: PUSH
39047: LD_VAR 0 1
39051: IN
39052: NOT
39053: OR
39054: IFFALSE 39058
// exit ;
39056: GO 39112
// for i = 1 to array do
39058: LD_ADDR_VAR 0 4
39062: PUSH
39063: DOUBLE
39064: LD_INT 1
39066: DEC
39067: ST_TO_ADDR
39068: LD_VAR 0 1
39072: PUSH
39073: FOR_TO
39074: IFFALSE 39110
// if value = array [ i ] then
39076: LD_VAR 0 2
39080: PUSH
39081: LD_VAR 0 1
39085: PUSH
39086: LD_VAR 0 4
39090: ARRAY
39091: EQUAL
39092: IFFALSE 39108
// begin result := i ;
39094: LD_ADDR_VAR 0 3
39098: PUSH
39099: LD_VAR 0 4
39103: ST_TO_ADDR
// exit ;
39104: POP
39105: POP
39106: GO 39112
// end ;
39108: GO 39073
39110: POP
39111: POP
// end ;
39112: LD_VAR 0 3
39116: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39117: LD_INT 0
39119: PPUSH
// vc_chassis := chassis ;
39120: LD_ADDR_OWVAR 37
39124: PUSH
39125: LD_VAR 0 1
39129: ST_TO_ADDR
// vc_engine := engine ;
39130: LD_ADDR_OWVAR 39
39134: PUSH
39135: LD_VAR 0 2
39139: ST_TO_ADDR
// vc_control := control ;
39140: LD_ADDR_OWVAR 38
39144: PUSH
39145: LD_VAR 0 3
39149: ST_TO_ADDR
// vc_weapon := weapon ;
39150: LD_ADDR_OWVAR 40
39154: PUSH
39155: LD_VAR 0 4
39159: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39160: LD_ADDR_OWVAR 41
39164: PUSH
39165: LD_VAR 0 5
39169: ST_TO_ADDR
// end ;
39170: LD_VAR 0 6
39174: RET
// export function WantPlant ( unit ) ; var task ; begin
39175: LD_INT 0
39177: PPUSH
39178: PPUSH
// result := false ;
39179: LD_ADDR_VAR 0 2
39183: PUSH
39184: LD_INT 0
39186: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39187: LD_ADDR_VAR 0 3
39191: PUSH
39192: LD_VAR 0 1
39196: PPUSH
39197: CALL_OW 437
39201: ST_TO_ADDR
// if task then
39202: LD_VAR 0 3
39206: IFFALSE 39234
// if task [ 1 ] [ 1 ] = p then
39208: LD_VAR 0 3
39212: PUSH
39213: LD_INT 1
39215: ARRAY
39216: PUSH
39217: LD_INT 1
39219: ARRAY
39220: PUSH
39221: LD_STRING p
39223: EQUAL
39224: IFFALSE 39234
// result := true ;
39226: LD_ADDR_VAR 0 2
39230: PUSH
39231: LD_INT 1
39233: ST_TO_ADDR
// end ;
39234: LD_VAR 0 2
39238: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39239: LD_INT 0
39241: PPUSH
39242: PPUSH
39243: PPUSH
39244: PPUSH
// if pos < 1 then
39245: LD_VAR 0 2
39249: PUSH
39250: LD_INT 1
39252: LESS
39253: IFFALSE 39257
// exit ;
39255: GO 39560
// if pos = 1 then
39257: LD_VAR 0 2
39261: PUSH
39262: LD_INT 1
39264: EQUAL
39265: IFFALSE 39298
// result := Replace ( arr , pos [ 1 ] , value ) else
39267: LD_ADDR_VAR 0 4
39271: PUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: LD_VAR 0 2
39281: PUSH
39282: LD_INT 1
39284: ARRAY
39285: PPUSH
39286: LD_VAR 0 3
39290: PPUSH
39291: CALL_OW 1
39295: ST_TO_ADDR
39296: GO 39560
// begin tmp := arr ;
39298: LD_ADDR_VAR 0 6
39302: PUSH
39303: LD_VAR 0 1
39307: ST_TO_ADDR
// s_arr := [ tmp ] ;
39308: LD_ADDR_VAR 0 7
39312: PUSH
39313: LD_VAR 0 6
39317: PUSH
39318: EMPTY
39319: LIST
39320: ST_TO_ADDR
// for i = 1 to pos - 1 do
39321: LD_ADDR_VAR 0 5
39325: PUSH
39326: DOUBLE
39327: LD_INT 1
39329: DEC
39330: ST_TO_ADDR
39331: LD_VAR 0 2
39335: PUSH
39336: LD_INT 1
39338: MINUS
39339: PUSH
39340: FOR_TO
39341: IFFALSE 39386
// begin tmp := tmp [ pos [ i ] ] ;
39343: LD_ADDR_VAR 0 6
39347: PUSH
39348: LD_VAR 0 6
39352: PUSH
39353: LD_VAR 0 2
39357: PUSH
39358: LD_VAR 0 5
39362: ARRAY
39363: ARRAY
39364: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39365: LD_ADDR_VAR 0 7
39369: PUSH
39370: LD_VAR 0 7
39374: PUSH
39375: LD_VAR 0 6
39379: PUSH
39380: EMPTY
39381: LIST
39382: ADD
39383: ST_TO_ADDR
// end ;
39384: GO 39340
39386: POP
39387: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39388: LD_ADDR_VAR 0 6
39392: PUSH
39393: LD_VAR 0 6
39397: PPUSH
39398: LD_VAR 0 2
39402: PUSH
39403: LD_VAR 0 2
39407: ARRAY
39408: PPUSH
39409: LD_VAR 0 3
39413: PPUSH
39414: CALL_OW 1
39418: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39419: LD_ADDR_VAR 0 7
39423: PUSH
39424: LD_VAR 0 7
39428: PPUSH
39429: LD_VAR 0 7
39433: PPUSH
39434: LD_VAR 0 6
39438: PPUSH
39439: CALL_OW 1
39443: ST_TO_ADDR
// for i = s_arr downto 2 do
39444: LD_ADDR_VAR 0 5
39448: PUSH
39449: DOUBLE
39450: LD_VAR 0 7
39454: INC
39455: ST_TO_ADDR
39456: LD_INT 2
39458: PUSH
39459: FOR_DOWNTO
39460: IFFALSE 39544
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39462: LD_ADDR_VAR 0 6
39466: PUSH
39467: LD_VAR 0 7
39471: PUSH
39472: LD_VAR 0 5
39476: PUSH
39477: LD_INT 1
39479: MINUS
39480: ARRAY
39481: PPUSH
39482: LD_VAR 0 2
39486: PUSH
39487: LD_VAR 0 5
39491: PUSH
39492: LD_INT 1
39494: MINUS
39495: ARRAY
39496: PPUSH
39497: LD_VAR 0 7
39501: PUSH
39502: LD_VAR 0 5
39506: ARRAY
39507: PPUSH
39508: CALL_OW 1
39512: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39513: LD_ADDR_VAR 0 7
39517: PUSH
39518: LD_VAR 0 7
39522: PPUSH
39523: LD_VAR 0 5
39527: PUSH
39528: LD_INT 1
39530: MINUS
39531: PPUSH
39532: LD_VAR 0 6
39536: PPUSH
39537: CALL_OW 1
39541: ST_TO_ADDR
// end ;
39542: GO 39459
39544: POP
39545: POP
// result := s_arr [ 1 ] ;
39546: LD_ADDR_VAR 0 4
39550: PUSH
39551: LD_VAR 0 7
39555: PUSH
39556: LD_INT 1
39558: ARRAY
39559: ST_TO_ADDR
// end ; end ;
39560: LD_VAR 0 4
39564: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39565: LD_INT 0
39567: PPUSH
39568: PPUSH
// if not list then
39569: LD_VAR 0 1
39573: NOT
39574: IFFALSE 39578
// exit ;
39576: GO 39669
// i := list [ pos1 ] ;
39578: LD_ADDR_VAR 0 5
39582: PUSH
39583: LD_VAR 0 1
39587: PUSH
39588: LD_VAR 0 2
39592: ARRAY
39593: ST_TO_ADDR
// if not i then
39594: LD_VAR 0 5
39598: NOT
39599: IFFALSE 39603
// exit ;
39601: GO 39669
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39603: LD_ADDR_VAR 0 1
39607: PUSH
39608: LD_VAR 0 1
39612: PPUSH
39613: LD_VAR 0 2
39617: PPUSH
39618: LD_VAR 0 1
39622: PUSH
39623: LD_VAR 0 3
39627: ARRAY
39628: PPUSH
39629: CALL_OW 1
39633: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39634: LD_ADDR_VAR 0 1
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: LD_VAR 0 3
39648: PPUSH
39649: LD_VAR 0 5
39653: PPUSH
39654: CALL_OW 1
39658: ST_TO_ADDR
// result := list ;
39659: LD_ADDR_VAR 0 4
39663: PUSH
39664: LD_VAR 0 1
39668: ST_TO_ADDR
// end ;
39669: LD_VAR 0 4
39673: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39674: LD_INT 0
39676: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39677: LD_ADDR_VAR 0 5
39681: PUSH
39682: LD_VAR 0 1
39686: PPUSH
39687: CALL_OW 250
39691: PPUSH
39692: LD_VAR 0 1
39696: PPUSH
39697: CALL_OW 251
39701: PPUSH
39702: LD_VAR 0 2
39706: PPUSH
39707: LD_VAR 0 3
39711: PPUSH
39712: LD_VAR 0 4
39716: PPUSH
39717: CALL 40095 0 5
39721: ST_TO_ADDR
// end ;
39722: LD_VAR 0 5
39726: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39727: LD_INT 0
39729: PPUSH
39730: PPUSH
39731: PPUSH
39732: PPUSH
// if not list or not unit then
39733: LD_VAR 0 2
39737: NOT
39738: PUSH
39739: LD_VAR 0 1
39743: NOT
39744: OR
39745: IFFALSE 39749
// exit ;
39747: GO 40090
// result := [ ] ;
39749: LD_ADDR_VAR 0 5
39753: PUSH
39754: EMPTY
39755: ST_TO_ADDR
// for i in list do
39756: LD_ADDR_VAR 0 6
39760: PUSH
39761: LD_VAR 0 2
39765: PUSH
39766: FOR_IN
39767: IFFALSE 39985
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39769: LD_ADDR_VAR 0 8
39773: PUSH
39774: LD_VAR 0 1
39778: PPUSH
39779: LD_VAR 0 6
39783: PUSH
39784: LD_INT 1
39786: ARRAY
39787: PPUSH
39788: LD_VAR 0 6
39792: PUSH
39793: LD_INT 2
39795: ARRAY
39796: PPUSH
39797: CALL_OW 297
39801: ST_TO_ADDR
// if not Count ( result ) then
39802: LD_VAR 0 5
39806: PPUSH
39807: CALL 36379 0 1
39811: NOT
39812: IFFALSE 39845
// begin result := Join ( result , [ i , tmp ] ) ;
39814: LD_ADDR_VAR 0 5
39818: PUSH
39819: LD_VAR 0 5
39823: PPUSH
39824: LD_VAR 0 6
39828: PUSH
39829: LD_VAR 0 8
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PPUSH
39838: CALL 71988 0 2
39842: ST_TO_ADDR
// continue ;
39843: GO 39766
// end ; if result [ result ] [ 2 ] <= tmp then
39845: LD_VAR 0 5
39849: PUSH
39850: LD_VAR 0 5
39854: ARRAY
39855: PUSH
39856: LD_INT 2
39858: ARRAY
39859: PUSH
39860: LD_VAR 0 8
39864: LESSEQUAL
39865: IFFALSE 39898
// result := Join ( result , [ i , tmp ] ) else
39867: LD_ADDR_VAR 0 5
39871: PUSH
39872: LD_VAR 0 5
39876: PPUSH
39877: LD_VAR 0 6
39881: PUSH
39882: LD_VAR 0 8
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PPUSH
39891: CALL 71988 0 2
39895: ST_TO_ADDR
39896: GO 39983
// begin for j := 1 to Count ( result ) do
39898: LD_ADDR_VAR 0 7
39902: PUSH
39903: DOUBLE
39904: LD_INT 1
39906: DEC
39907: ST_TO_ADDR
39908: LD_VAR 0 5
39912: PPUSH
39913: CALL 36379 0 1
39917: PUSH
39918: FOR_TO
39919: IFFALSE 39981
// begin if tmp < result [ j ] [ 2 ] then
39921: LD_VAR 0 8
39925: PUSH
39926: LD_VAR 0 5
39930: PUSH
39931: LD_VAR 0 7
39935: ARRAY
39936: PUSH
39937: LD_INT 2
39939: ARRAY
39940: LESS
39941: IFFALSE 39979
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39943: LD_ADDR_VAR 0 5
39947: PUSH
39948: LD_VAR 0 5
39952: PPUSH
39953: LD_VAR 0 7
39957: PPUSH
39958: LD_VAR 0 6
39962: PUSH
39963: LD_VAR 0 8
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PPUSH
39972: CALL_OW 2
39976: ST_TO_ADDR
// break ;
39977: GO 39981
// end ; end ;
39979: GO 39918
39981: POP
39982: POP
// end ; end ;
39983: GO 39766
39985: POP
39986: POP
// if result and not asc then
39987: LD_VAR 0 5
39991: PUSH
39992: LD_VAR 0 3
39996: NOT
39997: AND
39998: IFFALSE 40015
// result := ReverseArray ( result ) ;
40000: LD_ADDR_VAR 0 5
40004: PUSH
40005: LD_VAR 0 5
40009: PPUSH
40010: CALL 67255 0 1
40014: ST_TO_ADDR
// tmp := [ ] ;
40015: LD_ADDR_VAR 0 8
40019: PUSH
40020: EMPTY
40021: ST_TO_ADDR
// if mode then
40022: LD_VAR 0 4
40026: IFFALSE 40090
// begin for i := 1 to result do
40028: LD_ADDR_VAR 0 6
40032: PUSH
40033: DOUBLE
40034: LD_INT 1
40036: DEC
40037: ST_TO_ADDR
40038: LD_VAR 0 5
40042: PUSH
40043: FOR_TO
40044: IFFALSE 40078
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
40046: LD_ADDR_VAR 0 8
40050: PUSH
40051: LD_VAR 0 8
40055: PPUSH
40056: LD_VAR 0 5
40060: PUSH
40061: LD_VAR 0 6
40065: ARRAY
40066: PUSH
40067: LD_INT 1
40069: ARRAY
40070: PPUSH
40071: CALL 71988 0 2
40075: ST_TO_ADDR
40076: GO 40043
40078: POP
40079: POP
// result := tmp ;
40080: LD_ADDR_VAR 0 5
40084: PUSH
40085: LD_VAR 0 8
40089: ST_TO_ADDR
// end ; end ;
40090: LD_VAR 0 5
40094: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40095: LD_INT 0
40097: PPUSH
40098: PPUSH
40099: PPUSH
40100: PPUSH
// if not list then
40101: LD_VAR 0 3
40105: NOT
40106: IFFALSE 40110
// exit ;
40108: GO 40498
// result := [ ] ;
40110: LD_ADDR_VAR 0 6
40114: PUSH
40115: EMPTY
40116: ST_TO_ADDR
// for i in list do
40117: LD_ADDR_VAR 0 7
40121: PUSH
40122: LD_VAR 0 3
40126: PUSH
40127: FOR_IN
40128: IFFALSE 40330
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40130: LD_ADDR_VAR 0 9
40134: PUSH
40135: LD_VAR 0 7
40139: PPUSH
40140: LD_VAR 0 1
40144: PPUSH
40145: LD_VAR 0 2
40149: PPUSH
40150: CALL_OW 297
40154: ST_TO_ADDR
// if not result then
40155: LD_VAR 0 6
40159: NOT
40160: IFFALSE 40186
// result := [ [ i , tmp ] ] else
40162: LD_ADDR_VAR 0 6
40166: PUSH
40167: LD_VAR 0 7
40171: PUSH
40172: LD_VAR 0 9
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: EMPTY
40182: LIST
40183: ST_TO_ADDR
40184: GO 40328
// begin if result [ result ] [ 2 ] <= tmp then
40186: LD_VAR 0 6
40190: PUSH
40191: LD_VAR 0 6
40195: ARRAY
40196: PUSH
40197: LD_INT 2
40199: ARRAY
40200: PUSH
40201: LD_VAR 0 9
40205: LESSEQUAL
40206: IFFALSE 40248
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40208: LD_ADDR_VAR 0 6
40212: PUSH
40213: LD_VAR 0 6
40217: PPUSH
40218: LD_VAR 0 6
40222: PUSH
40223: LD_INT 1
40225: PLUS
40226: PPUSH
40227: LD_VAR 0 7
40231: PUSH
40232: LD_VAR 0 9
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PPUSH
40241: CALL_OW 2
40245: ST_TO_ADDR
40246: GO 40328
// for j := 1 to result do
40248: LD_ADDR_VAR 0 8
40252: PUSH
40253: DOUBLE
40254: LD_INT 1
40256: DEC
40257: ST_TO_ADDR
40258: LD_VAR 0 6
40262: PUSH
40263: FOR_TO
40264: IFFALSE 40326
// begin if tmp < result [ j ] [ 2 ] then
40266: LD_VAR 0 9
40270: PUSH
40271: LD_VAR 0 6
40275: PUSH
40276: LD_VAR 0 8
40280: ARRAY
40281: PUSH
40282: LD_INT 2
40284: ARRAY
40285: LESS
40286: IFFALSE 40324
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40288: LD_ADDR_VAR 0 6
40292: PUSH
40293: LD_VAR 0 6
40297: PPUSH
40298: LD_VAR 0 8
40302: PPUSH
40303: LD_VAR 0 7
40307: PUSH
40308: LD_VAR 0 9
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PPUSH
40317: CALL_OW 2
40321: ST_TO_ADDR
// break ;
40322: GO 40326
// end ; end ;
40324: GO 40263
40326: POP
40327: POP
// end ; end ;
40328: GO 40127
40330: POP
40331: POP
// if result and not asc then
40332: LD_VAR 0 6
40336: PUSH
40337: LD_VAR 0 4
40341: NOT
40342: AND
40343: IFFALSE 40418
// begin tmp := result ;
40345: LD_ADDR_VAR 0 9
40349: PUSH
40350: LD_VAR 0 6
40354: ST_TO_ADDR
// for i = tmp downto 1 do
40355: LD_ADDR_VAR 0 7
40359: PUSH
40360: DOUBLE
40361: LD_VAR 0 9
40365: INC
40366: ST_TO_ADDR
40367: LD_INT 1
40369: PUSH
40370: FOR_DOWNTO
40371: IFFALSE 40416
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40373: LD_ADDR_VAR 0 6
40377: PUSH
40378: LD_VAR 0 6
40382: PPUSH
40383: LD_VAR 0 9
40387: PUSH
40388: LD_VAR 0 7
40392: MINUS
40393: PUSH
40394: LD_INT 1
40396: PLUS
40397: PPUSH
40398: LD_VAR 0 9
40402: PUSH
40403: LD_VAR 0 7
40407: ARRAY
40408: PPUSH
40409: CALL_OW 1
40413: ST_TO_ADDR
40414: GO 40370
40416: POP
40417: POP
// end ; tmp := [ ] ;
40418: LD_ADDR_VAR 0 9
40422: PUSH
40423: EMPTY
40424: ST_TO_ADDR
// if mode then
40425: LD_VAR 0 5
40429: IFFALSE 40498
// begin for i = 1 to result do
40431: LD_ADDR_VAR 0 7
40435: PUSH
40436: DOUBLE
40437: LD_INT 1
40439: DEC
40440: ST_TO_ADDR
40441: LD_VAR 0 6
40445: PUSH
40446: FOR_TO
40447: IFFALSE 40486
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40449: LD_ADDR_VAR 0 9
40453: PUSH
40454: LD_VAR 0 9
40458: PPUSH
40459: LD_VAR 0 7
40463: PPUSH
40464: LD_VAR 0 6
40468: PUSH
40469: LD_VAR 0 7
40473: ARRAY
40474: PUSH
40475: LD_INT 1
40477: ARRAY
40478: PPUSH
40479: CALL_OW 1
40483: ST_TO_ADDR
40484: GO 40446
40486: POP
40487: POP
// result := tmp ;
40488: LD_ADDR_VAR 0 6
40492: PUSH
40493: LD_VAR 0 9
40497: ST_TO_ADDR
// end ; end ;
40498: LD_VAR 0 6
40502: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40503: LD_INT 0
40505: PPUSH
40506: PPUSH
40507: PPUSH
40508: PPUSH
40509: PPUSH
40510: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40511: LD_ADDR_VAR 0 5
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: EMPTY
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: ST_TO_ADDR
// if not x or not y then
40533: LD_VAR 0 2
40537: NOT
40538: PUSH
40539: LD_VAR 0 3
40543: NOT
40544: OR
40545: IFFALSE 40549
// exit ;
40547: GO 42199
// if not range then
40549: LD_VAR 0 4
40553: NOT
40554: IFFALSE 40564
// range := 10 ;
40556: LD_ADDR_VAR 0 4
40560: PUSH
40561: LD_INT 10
40563: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40564: LD_ADDR_VAR 0 8
40568: PUSH
40569: LD_INT 81
40571: PUSH
40572: LD_VAR 0 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 92
40583: PUSH
40584: LD_VAR 0 2
40588: PUSH
40589: LD_VAR 0 3
40593: PUSH
40594: LD_VAR 0 4
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 3
40607: PUSH
40608: LD_INT 21
40610: PUSH
40611: LD_INT 3
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: LIST
40626: PPUSH
40627: CALL_OW 69
40631: ST_TO_ADDR
// if not tmp then
40632: LD_VAR 0 8
40636: NOT
40637: IFFALSE 40641
// exit ;
40639: GO 42199
// for i in tmp do
40641: LD_ADDR_VAR 0 6
40645: PUSH
40646: LD_VAR 0 8
40650: PUSH
40651: FOR_IN
40652: IFFALSE 42174
// begin points := [ 0 , 0 , 0 ] ;
40654: LD_ADDR_VAR 0 9
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: LIST
40672: ST_TO_ADDR
// bpoints := 1 ;
40673: LD_ADDR_VAR 0 10
40677: PUSH
40678: LD_INT 1
40680: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40681: LD_VAR 0 6
40685: PPUSH
40686: CALL_OW 247
40690: PUSH
40691: LD_INT 1
40693: DOUBLE
40694: EQUAL
40695: IFTRUE 40699
40697: GO 41277
40699: POP
// begin if GetClass ( i ) = 1 then
40700: LD_VAR 0 6
40704: PPUSH
40705: CALL_OW 257
40709: PUSH
40710: LD_INT 1
40712: EQUAL
40713: IFFALSE 40734
// points := [ 10 , 5 , 3 ] ;
40715: LD_ADDR_VAR 0 9
40719: PUSH
40720: LD_INT 10
40722: PUSH
40723: LD_INT 5
40725: PUSH
40726: LD_INT 3
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: LIST
40733: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40734: LD_VAR 0 6
40738: PPUSH
40739: CALL_OW 257
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: LD_INT 3
40749: PUSH
40750: LD_INT 4
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: LIST
40757: IN
40758: IFFALSE 40779
// points := [ 3 , 2 , 1 ] ;
40760: LD_ADDR_VAR 0 9
40764: PUSH
40765: LD_INT 3
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40779: LD_VAR 0 6
40783: PPUSH
40784: CALL_OW 257
40788: PUSH
40789: LD_INT 5
40791: EQUAL
40792: IFFALSE 40813
// points := [ 130 , 5 , 2 ] ;
40794: LD_ADDR_VAR 0 9
40798: PUSH
40799: LD_INT 130
40801: PUSH
40802: LD_INT 5
40804: PUSH
40805: LD_INT 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: LIST
40812: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40813: LD_VAR 0 6
40817: PPUSH
40818: CALL_OW 257
40822: PUSH
40823: LD_INT 8
40825: EQUAL
40826: IFFALSE 40847
// points := [ 35 , 35 , 30 ] ;
40828: LD_ADDR_VAR 0 9
40832: PUSH
40833: LD_INT 35
40835: PUSH
40836: LD_INT 35
40838: PUSH
40839: LD_INT 30
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40847: LD_VAR 0 6
40851: PPUSH
40852: CALL_OW 257
40856: PUSH
40857: LD_INT 9
40859: EQUAL
40860: IFFALSE 40881
// points := [ 20 , 55 , 40 ] ;
40862: LD_ADDR_VAR 0 9
40866: PUSH
40867: LD_INT 20
40869: PUSH
40870: LD_INT 55
40872: PUSH
40873: LD_INT 40
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40881: LD_VAR 0 6
40885: PPUSH
40886: CALL_OW 257
40890: PUSH
40891: LD_INT 12
40893: PUSH
40894: LD_INT 16
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: IN
40901: IFFALSE 40922
// points := [ 5 , 3 , 2 ] ;
40903: LD_ADDR_VAR 0 9
40907: PUSH
40908: LD_INT 5
40910: PUSH
40911: LD_INT 3
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40922: LD_VAR 0 6
40926: PPUSH
40927: CALL_OW 257
40931: PUSH
40932: LD_INT 17
40934: EQUAL
40935: IFFALSE 40956
// points := [ 100 , 50 , 75 ] ;
40937: LD_ADDR_VAR 0 9
40941: PUSH
40942: LD_INT 100
40944: PUSH
40945: LD_INT 50
40947: PUSH
40948: LD_INT 75
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40956: LD_VAR 0 6
40960: PPUSH
40961: CALL_OW 257
40965: PUSH
40966: LD_INT 15
40968: EQUAL
40969: IFFALSE 40990
// points := [ 10 , 5 , 3 ] ;
40971: LD_ADDR_VAR 0 9
40975: PUSH
40976: LD_INT 10
40978: PUSH
40979: LD_INT 5
40981: PUSH
40982: LD_INT 3
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: LIST
40989: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40990: LD_VAR 0 6
40994: PPUSH
40995: CALL_OW 257
40999: PUSH
41000: LD_INT 14
41002: EQUAL
41003: IFFALSE 41024
// points := [ 10 , 0 , 0 ] ;
41005: LD_ADDR_VAR 0 9
41009: PUSH
41010: LD_INT 10
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: LIST
41023: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41024: LD_VAR 0 6
41028: PPUSH
41029: CALL_OW 257
41033: PUSH
41034: LD_INT 11
41036: EQUAL
41037: IFFALSE 41058
// points := [ 30 , 10 , 5 ] ;
41039: LD_ADDR_VAR 0 9
41043: PUSH
41044: LD_INT 30
41046: PUSH
41047: LD_INT 10
41049: PUSH
41050: LD_INT 5
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41058: LD_VAR 0 1
41062: PPUSH
41063: LD_INT 5
41065: PPUSH
41066: CALL_OW 321
41070: PUSH
41071: LD_INT 2
41073: EQUAL
41074: IFFALSE 41091
// bpoints := bpoints * 1.8 ;
41076: LD_ADDR_VAR 0 10
41080: PUSH
41081: LD_VAR 0 10
41085: PUSH
41086: LD_REAL  1.80000000000000E+0000
41089: MUL
41090: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41091: LD_VAR 0 6
41095: PPUSH
41096: CALL_OW 257
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: LD_INT 3
41109: PUSH
41110: LD_INT 4
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: IN
41119: PUSH
41120: LD_VAR 0 1
41124: PPUSH
41125: LD_INT 51
41127: PPUSH
41128: CALL_OW 321
41132: PUSH
41133: LD_INT 2
41135: EQUAL
41136: AND
41137: IFFALSE 41154
// bpoints := bpoints * 1.2 ;
41139: LD_ADDR_VAR 0 10
41143: PUSH
41144: LD_VAR 0 10
41148: PUSH
41149: LD_REAL  1.20000000000000E+0000
41152: MUL
41153: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41154: LD_VAR 0 6
41158: PPUSH
41159: CALL_OW 257
41163: PUSH
41164: LD_INT 5
41166: PUSH
41167: LD_INT 7
41169: PUSH
41170: LD_INT 9
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: IN
41178: PUSH
41179: LD_VAR 0 1
41183: PPUSH
41184: LD_INT 52
41186: PPUSH
41187: CALL_OW 321
41191: PUSH
41192: LD_INT 2
41194: EQUAL
41195: AND
41196: IFFALSE 41213
// bpoints := bpoints * 1.5 ;
41198: LD_ADDR_VAR 0 10
41202: PUSH
41203: LD_VAR 0 10
41207: PUSH
41208: LD_REAL  1.50000000000000E+0000
41211: MUL
41212: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41213: LD_VAR 0 1
41217: PPUSH
41218: LD_INT 66
41220: PPUSH
41221: CALL_OW 321
41225: PUSH
41226: LD_INT 2
41228: EQUAL
41229: IFFALSE 41246
// bpoints := bpoints * 1.1 ;
41231: LD_ADDR_VAR 0 10
41235: PUSH
41236: LD_VAR 0 10
41240: PUSH
41241: LD_REAL  1.10000000000000E+0000
41244: MUL
41245: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41246: LD_ADDR_VAR 0 10
41250: PUSH
41251: LD_VAR 0 10
41255: PUSH
41256: LD_VAR 0 6
41260: PPUSH
41261: LD_INT 1
41263: PPUSH
41264: CALL_OW 259
41268: PUSH
41269: LD_REAL  1.15000000000000E+0000
41272: MUL
41273: MUL
41274: ST_TO_ADDR
// end ; unit_vehicle :
41275: GO 42103
41277: LD_INT 2
41279: DOUBLE
41280: EQUAL
41281: IFTRUE 41285
41283: GO 42091
41285: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41286: LD_VAR 0 6
41290: PPUSH
41291: CALL_OW 264
41295: PUSH
41296: LD_INT 2
41298: PUSH
41299: LD_INT 42
41301: PUSH
41302: LD_INT 24
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: LIST
41309: IN
41310: IFFALSE 41331
// points := [ 25 , 5 , 3 ] ;
41312: LD_ADDR_VAR 0 9
41316: PUSH
41317: LD_INT 25
41319: PUSH
41320: LD_INT 5
41322: PUSH
41323: LD_INT 3
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: LIST
41330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41331: LD_VAR 0 6
41335: PPUSH
41336: CALL_OW 264
41340: PUSH
41341: LD_INT 4
41343: PUSH
41344: LD_INT 43
41346: PUSH
41347: LD_INT 25
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: IN
41355: IFFALSE 41376
// points := [ 40 , 15 , 5 ] ;
41357: LD_ADDR_VAR 0 9
41361: PUSH
41362: LD_INT 40
41364: PUSH
41365: LD_INT 15
41367: PUSH
41368: LD_INT 5
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: LIST
41375: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41376: LD_VAR 0 6
41380: PPUSH
41381: CALL_OW 264
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: LD_INT 23
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: IN
41396: IFFALSE 41417
// points := [ 7 , 25 , 8 ] ;
41398: LD_ADDR_VAR 0 9
41402: PUSH
41403: LD_INT 7
41405: PUSH
41406: LD_INT 25
41408: PUSH
41409: LD_INT 8
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: LIST
41416: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41417: LD_VAR 0 6
41421: PPUSH
41422: CALL_OW 264
41426: PUSH
41427: LD_INT 5
41429: PUSH
41430: LD_INT 27
41432: PUSH
41433: LD_INT 44
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: IN
41441: IFFALSE 41462
// points := [ 14 , 50 , 16 ] ;
41443: LD_ADDR_VAR 0 9
41447: PUSH
41448: LD_INT 14
41450: PUSH
41451: LD_INT 50
41453: PUSH
41454: LD_INT 16
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: LIST
41461: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41462: LD_VAR 0 6
41466: PPUSH
41467: CALL_OW 264
41471: PUSH
41472: LD_INT 6
41474: PUSH
41475: LD_INT 46
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: IN
41482: IFFALSE 41503
// points := [ 32 , 120 , 70 ] ;
41484: LD_ADDR_VAR 0 9
41488: PUSH
41489: LD_INT 32
41491: PUSH
41492: LD_INT 120
41494: PUSH
41495: LD_INT 70
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41503: LD_VAR 0 6
41507: PPUSH
41508: CALL_OW 264
41512: PUSH
41513: LD_INT 7
41515: PUSH
41516: LD_INT 28
41518: PUSH
41519: LD_INT 45
41521: PUSH
41522: LD_INT 92
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: IN
41531: IFFALSE 41552
// points := [ 35 , 20 , 45 ] ;
41533: LD_ADDR_VAR 0 9
41537: PUSH
41538: LD_INT 35
41540: PUSH
41541: LD_INT 20
41543: PUSH
41544: LD_INT 45
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41552: LD_VAR 0 6
41556: PPUSH
41557: CALL_OW 264
41561: PUSH
41562: LD_INT 47
41564: PUSH
41565: EMPTY
41566: LIST
41567: IN
41568: IFFALSE 41589
// points := [ 67 , 45 , 75 ] ;
41570: LD_ADDR_VAR 0 9
41574: PUSH
41575: LD_INT 67
41577: PUSH
41578: LD_INT 45
41580: PUSH
41581: LD_INT 75
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: LIST
41588: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41589: LD_VAR 0 6
41593: PPUSH
41594: CALL_OW 264
41598: PUSH
41599: LD_INT 26
41601: PUSH
41602: EMPTY
41603: LIST
41604: IN
41605: IFFALSE 41626
// points := [ 120 , 30 , 80 ] ;
41607: LD_ADDR_VAR 0 9
41611: PUSH
41612: LD_INT 120
41614: PUSH
41615: LD_INT 30
41617: PUSH
41618: LD_INT 80
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: LIST
41625: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41626: LD_VAR 0 6
41630: PPUSH
41631: CALL_OW 264
41635: PUSH
41636: LD_INT 22
41638: PUSH
41639: EMPTY
41640: LIST
41641: IN
41642: IFFALSE 41663
// points := [ 40 , 1 , 1 ] ;
41644: LD_ADDR_VAR 0 9
41648: PUSH
41649: LD_INT 40
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 1
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: LIST
41662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41663: LD_VAR 0 6
41667: PPUSH
41668: CALL_OW 264
41672: PUSH
41673: LD_INT 29
41675: PUSH
41676: EMPTY
41677: LIST
41678: IN
41679: IFFALSE 41700
// points := [ 70 , 200 , 400 ] ;
41681: LD_ADDR_VAR 0 9
41685: PUSH
41686: LD_INT 70
41688: PUSH
41689: LD_INT 200
41691: PUSH
41692: LD_INT 400
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: LIST
41699: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41700: LD_VAR 0 6
41704: PPUSH
41705: CALL_OW 264
41709: PUSH
41710: LD_INT 14
41712: PUSH
41713: LD_INT 53
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: IN
41720: IFFALSE 41741
// points := [ 40 , 10 , 20 ] ;
41722: LD_ADDR_VAR 0 9
41726: PUSH
41727: LD_INT 40
41729: PUSH
41730: LD_INT 10
41732: PUSH
41733: LD_INT 20
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41741: LD_VAR 0 6
41745: PPUSH
41746: CALL_OW 264
41750: PUSH
41751: LD_INT 9
41753: PUSH
41754: EMPTY
41755: LIST
41756: IN
41757: IFFALSE 41778
// points := [ 5 , 70 , 20 ] ;
41759: LD_ADDR_VAR 0 9
41763: PUSH
41764: LD_INT 5
41766: PUSH
41767: LD_INT 70
41769: PUSH
41770: LD_INT 20
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41778: LD_VAR 0 6
41782: PPUSH
41783: CALL_OW 264
41787: PUSH
41788: LD_INT 10
41790: PUSH
41791: EMPTY
41792: LIST
41793: IN
41794: IFFALSE 41815
// points := [ 35 , 110 , 70 ] ;
41796: LD_ADDR_VAR 0 9
41800: PUSH
41801: LD_INT 35
41803: PUSH
41804: LD_INT 110
41806: PUSH
41807: LD_INT 70
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: LIST
41814: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41815: LD_VAR 0 6
41819: PPUSH
41820: CALL_OW 265
41824: PUSH
41825: LD_INT 25
41827: EQUAL
41828: IFFALSE 41849
// points := [ 80 , 65 , 100 ] ;
41830: LD_ADDR_VAR 0 9
41834: PUSH
41835: LD_INT 80
41837: PUSH
41838: LD_INT 65
41840: PUSH
41841: LD_INT 100
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: LIST
41848: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41849: LD_VAR 0 6
41853: PPUSH
41854: CALL_OW 263
41858: PUSH
41859: LD_INT 1
41861: EQUAL
41862: IFFALSE 41897
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41864: LD_ADDR_VAR 0 10
41868: PUSH
41869: LD_VAR 0 10
41873: PUSH
41874: LD_VAR 0 6
41878: PPUSH
41879: CALL_OW 311
41883: PPUSH
41884: LD_INT 3
41886: PPUSH
41887: CALL_OW 259
41891: PUSH
41892: LD_INT 4
41894: MUL
41895: MUL
41896: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41897: LD_VAR 0 6
41901: PPUSH
41902: CALL_OW 263
41906: PUSH
41907: LD_INT 2
41909: EQUAL
41910: IFFALSE 41961
// begin j := IsControledBy ( i ) ;
41912: LD_ADDR_VAR 0 7
41916: PUSH
41917: LD_VAR 0 6
41921: PPUSH
41922: CALL_OW 312
41926: ST_TO_ADDR
// if j then
41927: LD_VAR 0 7
41931: IFFALSE 41961
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41933: LD_ADDR_VAR 0 10
41937: PUSH
41938: LD_VAR 0 10
41942: PUSH
41943: LD_VAR 0 7
41947: PPUSH
41948: LD_INT 3
41950: PPUSH
41951: CALL_OW 259
41955: PUSH
41956: LD_INT 3
41958: MUL
41959: MUL
41960: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41961: LD_VAR 0 6
41965: PPUSH
41966: CALL_OW 264
41970: PUSH
41971: LD_INT 5
41973: PUSH
41974: LD_INT 6
41976: PUSH
41977: LD_INT 46
41979: PUSH
41980: LD_INT 44
41982: PUSH
41983: LD_INT 47
41985: PUSH
41986: LD_INT 45
41988: PUSH
41989: LD_INT 28
41991: PUSH
41992: LD_INT 7
41994: PUSH
41995: LD_INT 27
41997: PUSH
41998: LD_INT 29
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: IN
42013: PUSH
42014: LD_VAR 0 1
42018: PPUSH
42019: LD_INT 52
42021: PPUSH
42022: CALL_OW 321
42026: PUSH
42027: LD_INT 2
42029: EQUAL
42030: AND
42031: IFFALSE 42048
// bpoints := bpoints * 1.2 ;
42033: LD_ADDR_VAR 0 10
42037: PUSH
42038: LD_VAR 0 10
42042: PUSH
42043: LD_REAL  1.20000000000000E+0000
42046: MUL
42047: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42048: LD_VAR 0 6
42052: PPUSH
42053: CALL_OW 264
42057: PUSH
42058: LD_INT 6
42060: PUSH
42061: LD_INT 46
42063: PUSH
42064: LD_INT 47
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: LIST
42071: IN
42072: IFFALSE 42089
// bpoints := bpoints * 1.2 ;
42074: LD_ADDR_VAR 0 10
42078: PUSH
42079: LD_VAR 0 10
42083: PUSH
42084: LD_REAL  1.20000000000000E+0000
42087: MUL
42088: ST_TO_ADDR
// end ; unit_building :
42089: GO 42103
42091: LD_INT 3
42093: DOUBLE
42094: EQUAL
42095: IFTRUE 42099
42097: GO 42102
42099: POP
// ; end ;
42100: GO 42103
42102: POP
// for j = 1 to 3 do
42103: LD_ADDR_VAR 0 7
42107: PUSH
42108: DOUBLE
42109: LD_INT 1
42111: DEC
42112: ST_TO_ADDR
42113: LD_INT 3
42115: PUSH
42116: FOR_TO
42117: IFFALSE 42170
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42119: LD_ADDR_VAR 0 5
42123: PUSH
42124: LD_VAR 0 5
42128: PPUSH
42129: LD_VAR 0 7
42133: PPUSH
42134: LD_VAR 0 5
42138: PUSH
42139: LD_VAR 0 7
42143: ARRAY
42144: PUSH
42145: LD_VAR 0 9
42149: PUSH
42150: LD_VAR 0 7
42154: ARRAY
42155: PUSH
42156: LD_VAR 0 10
42160: MUL
42161: PLUS
42162: PPUSH
42163: CALL_OW 1
42167: ST_TO_ADDR
42168: GO 42116
42170: POP
42171: POP
// end ;
42172: GO 40651
42174: POP
42175: POP
// result := Replace ( result , 4 , tmp ) ;
42176: LD_ADDR_VAR 0 5
42180: PUSH
42181: LD_VAR 0 5
42185: PPUSH
42186: LD_INT 4
42188: PPUSH
42189: LD_VAR 0 8
42193: PPUSH
42194: CALL_OW 1
42198: ST_TO_ADDR
// end ;
42199: LD_VAR 0 5
42203: RET
// export function DangerAtRange ( unit , range ) ; begin
42204: LD_INT 0
42206: PPUSH
// if not unit then
42207: LD_VAR 0 1
42211: NOT
42212: IFFALSE 42216
// exit ;
42214: GO 42261
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42216: LD_ADDR_VAR 0 3
42220: PUSH
42221: LD_VAR 0 1
42225: PPUSH
42226: CALL_OW 255
42230: PPUSH
42231: LD_VAR 0 1
42235: PPUSH
42236: CALL_OW 250
42240: PPUSH
42241: LD_VAR 0 1
42245: PPUSH
42246: CALL_OW 251
42250: PPUSH
42251: LD_VAR 0 2
42255: PPUSH
42256: CALL 40503 0 4
42260: ST_TO_ADDR
// end ;
42261: LD_VAR 0 3
42265: RET
// export function DangerInArea ( side , area ) ; begin
42266: LD_INT 0
42268: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42269: LD_ADDR_VAR 0 3
42273: PUSH
42274: LD_VAR 0 2
42278: PPUSH
42279: LD_INT 81
42281: PUSH
42282: LD_VAR 0 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PPUSH
42291: CALL_OW 70
42295: ST_TO_ADDR
// end ;
42296: LD_VAR 0 3
42300: RET
// export function IsExtension ( b ) ; begin
42301: LD_INT 0
42303: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42304: LD_ADDR_VAR 0 2
42308: PUSH
42309: LD_VAR 0 1
42313: PUSH
42314: LD_INT 23
42316: PUSH
42317: LD_INT 20
42319: PUSH
42320: LD_INT 22
42322: PUSH
42323: LD_INT 17
42325: PUSH
42326: LD_INT 24
42328: PUSH
42329: LD_INT 21
42331: PUSH
42332: LD_INT 19
42334: PUSH
42335: LD_INT 16
42337: PUSH
42338: LD_INT 25
42340: PUSH
42341: LD_INT 18
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: LIST
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: IN
42356: ST_TO_ADDR
// end ;
42357: LD_VAR 0 2
42361: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42362: LD_INT 0
42364: PPUSH
42365: PPUSH
42366: PPUSH
// result := [ ] ;
42367: LD_ADDR_VAR 0 4
42371: PUSH
42372: EMPTY
42373: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42374: LD_ADDR_VAR 0 5
42378: PUSH
42379: LD_VAR 0 2
42383: PPUSH
42384: LD_INT 21
42386: PUSH
42387: LD_INT 3
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PPUSH
42394: CALL_OW 70
42398: ST_TO_ADDR
// if not tmp then
42399: LD_VAR 0 5
42403: NOT
42404: IFFALSE 42408
// exit ;
42406: GO 42472
// if checkLink then
42408: LD_VAR 0 3
42412: IFFALSE 42462
// begin for i in tmp do
42414: LD_ADDR_VAR 0 6
42418: PUSH
42419: LD_VAR 0 5
42423: PUSH
42424: FOR_IN
42425: IFFALSE 42460
// if GetBase ( i ) <> base then
42427: LD_VAR 0 6
42431: PPUSH
42432: CALL_OW 274
42436: PUSH
42437: LD_VAR 0 1
42441: NONEQUAL
42442: IFFALSE 42458
// ComLinkToBase ( base , i ) ;
42444: LD_VAR 0 1
42448: PPUSH
42449: LD_VAR 0 6
42453: PPUSH
42454: CALL_OW 169
42458: GO 42424
42460: POP
42461: POP
// end ; result := tmp ;
42462: LD_ADDR_VAR 0 4
42466: PUSH
42467: LD_VAR 0 5
42471: ST_TO_ADDR
// end ;
42472: LD_VAR 0 4
42476: RET
// export function ComComplete ( units , b ) ; var i ; begin
42477: LD_INT 0
42479: PPUSH
42480: PPUSH
// if not units then
42481: LD_VAR 0 1
42485: NOT
42486: IFFALSE 42490
// exit ;
42488: GO 42580
// for i in units do
42490: LD_ADDR_VAR 0 4
42494: PUSH
42495: LD_VAR 0 1
42499: PUSH
42500: FOR_IN
42501: IFFALSE 42578
// if BuildingStatus ( b ) = bs_build then
42503: LD_VAR 0 2
42507: PPUSH
42508: CALL_OW 461
42512: PUSH
42513: LD_INT 1
42515: EQUAL
42516: IFFALSE 42576
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42518: LD_VAR 0 4
42522: PPUSH
42523: LD_STRING h
42525: PUSH
42526: LD_VAR 0 2
42530: PPUSH
42531: CALL_OW 250
42535: PUSH
42536: LD_VAR 0 2
42540: PPUSH
42541: CALL_OW 251
42545: PUSH
42546: LD_VAR 0 2
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: PPUSH
42572: CALL_OW 446
42576: GO 42500
42578: POP
42579: POP
// end ;
42580: LD_VAR 0 3
42584: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42585: LD_INT 0
42587: PPUSH
42588: PPUSH
42589: PPUSH
42590: PPUSH
42591: PPUSH
42592: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42593: LD_VAR 0 1
42597: NOT
42598: PUSH
42599: LD_VAR 0 1
42603: PPUSH
42604: CALL_OW 263
42608: PUSH
42609: LD_INT 2
42611: NONEQUAL
42612: OR
42613: IFFALSE 42617
// exit ;
42615: GO 42933
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42617: LD_ADDR_VAR 0 6
42621: PUSH
42622: LD_INT 22
42624: PUSH
42625: LD_VAR 0 1
42629: PPUSH
42630: CALL_OW 255
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: LD_INT 30
42644: PUSH
42645: LD_INT 36
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 34
42654: PUSH
42655: LD_INT 31
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PPUSH
42671: CALL_OW 69
42675: ST_TO_ADDR
// if not tmp then
42676: LD_VAR 0 6
42680: NOT
42681: IFFALSE 42685
// exit ;
42683: GO 42933
// result := [ ] ;
42685: LD_ADDR_VAR 0 2
42689: PUSH
42690: EMPTY
42691: ST_TO_ADDR
// for i in tmp do
42692: LD_ADDR_VAR 0 3
42696: PUSH
42697: LD_VAR 0 6
42701: PUSH
42702: FOR_IN
42703: IFFALSE 42774
// begin t := UnitsInside ( i ) ;
42705: LD_ADDR_VAR 0 4
42709: PUSH
42710: LD_VAR 0 3
42714: PPUSH
42715: CALL_OW 313
42719: ST_TO_ADDR
// if t then
42720: LD_VAR 0 4
42724: IFFALSE 42772
// for j in t do
42726: LD_ADDR_VAR 0 7
42730: PUSH
42731: LD_VAR 0 4
42735: PUSH
42736: FOR_IN
42737: IFFALSE 42770
// result := Replace ( result , result + 1 , j ) ;
42739: LD_ADDR_VAR 0 2
42743: PUSH
42744: LD_VAR 0 2
42748: PPUSH
42749: LD_VAR 0 2
42753: PUSH
42754: LD_INT 1
42756: PLUS
42757: PPUSH
42758: LD_VAR 0 7
42762: PPUSH
42763: CALL_OW 1
42767: ST_TO_ADDR
42768: GO 42736
42770: POP
42771: POP
// end ;
42772: GO 42702
42774: POP
42775: POP
// if not result then
42776: LD_VAR 0 2
42780: NOT
42781: IFFALSE 42785
// exit ;
42783: GO 42933
// mech := result [ 1 ] ;
42785: LD_ADDR_VAR 0 5
42789: PUSH
42790: LD_VAR 0 2
42794: PUSH
42795: LD_INT 1
42797: ARRAY
42798: ST_TO_ADDR
// if result > 1 then
42799: LD_VAR 0 2
42803: PUSH
42804: LD_INT 1
42806: GREATER
42807: IFFALSE 42919
// begin for i = 2 to result do
42809: LD_ADDR_VAR 0 3
42813: PUSH
42814: DOUBLE
42815: LD_INT 2
42817: DEC
42818: ST_TO_ADDR
42819: LD_VAR 0 2
42823: PUSH
42824: FOR_TO
42825: IFFALSE 42917
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42827: LD_ADDR_VAR 0 4
42831: PUSH
42832: LD_VAR 0 2
42836: PUSH
42837: LD_VAR 0 3
42841: ARRAY
42842: PPUSH
42843: LD_INT 3
42845: PPUSH
42846: CALL_OW 259
42850: PUSH
42851: LD_VAR 0 2
42855: PUSH
42856: LD_VAR 0 3
42860: ARRAY
42861: PPUSH
42862: CALL_OW 432
42866: MINUS
42867: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42868: LD_VAR 0 4
42872: PUSH
42873: LD_VAR 0 5
42877: PPUSH
42878: LD_INT 3
42880: PPUSH
42881: CALL_OW 259
42885: PUSH
42886: LD_VAR 0 5
42890: PPUSH
42891: CALL_OW 432
42895: MINUS
42896: GREATEREQUAL
42897: IFFALSE 42915
// mech := result [ i ] ;
42899: LD_ADDR_VAR 0 5
42903: PUSH
42904: LD_VAR 0 2
42908: PUSH
42909: LD_VAR 0 3
42913: ARRAY
42914: ST_TO_ADDR
// end ;
42915: GO 42824
42917: POP
42918: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42919: LD_VAR 0 1
42923: PPUSH
42924: LD_VAR 0 5
42928: PPUSH
42929: CALL_OW 135
// end ;
42933: LD_VAR 0 2
42937: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42938: LD_INT 0
42940: PPUSH
42941: PPUSH
42942: PPUSH
42943: PPUSH
42944: PPUSH
42945: PPUSH
42946: PPUSH
42947: PPUSH
42948: PPUSH
42949: PPUSH
42950: PPUSH
42951: PPUSH
42952: PPUSH
// result := [ ] ;
42953: LD_ADDR_VAR 0 7
42957: PUSH
42958: EMPTY
42959: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42960: LD_VAR 0 1
42964: PPUSH
42965: CALL_OW 266
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: IN
42980: NOT
42981: IFFALSE 42985
// exit ;
42983: GO 44619
// if name then
42985: LD_VAR 0 3
42989: IFFALSE 43005
// SetBName ( base_dep , name ) ;
42991: LD_VAR 0 1
42995: PPUSH
42996: LD_VAR 0 3
43000: PPUSH
43001: CALL_OW 500
// base := GetBase ( base_dep ) ;
43005: LD_ADDR_VAR 0 15
43009: PUSH
43010: LD_VAR 0 1
43014: PPUSH
43015: CALL_OW 274
43019: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43020: LD_ADDR_VAR 0 16
43024: PUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 255
43034: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43035: LD_ADDR_VAR 0 17
43039: PUSH
43040: LD_VAR 0 1
43044: PPUSH
43045: CALL_OW 248
43049: ST_TO_ADDR
// if sources then
43050: LD_VAR 0 5
43054: IFFALSE 43101
// for i = 1 to 3 do
43056: LD_ADDR_VAR 0 8
43060: PUSH
43061: DOUBLE
43062: LD_INT 1
43064: DEC
43065: ST_TO_ADDR
43066: LD_INT 3
43068: PUSH
43069: FOR_TO
43070: IFFALSE 43099
// AddResourceType ( base , i , sources [ i ] ) ;
43072: LD_VAR 0 15
43076: PPUSH
43077: LD_VAR 0 8
43081: PPUSH
43082: LD_VAR 0 5
43086: PUSH
43087: LD_VAR 0 8
43091: ARRAY
43092: PPUSH
43093: CALL_OW 276
43097: GO 43069
43099: POP
43100: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43101: LD_ADDR_VAR 0 18
43105: PUSH
43106: LD_VAR 0 15
43110: PPUSH
43111: LD_VAR 0 2
43115: PPUSH
43116: LD_INT 1
43118: PPUSH
43119: CALL 42362 0 3
43123: ST_TO_ADDR
// InitHc ;
43124: CALL_OW 19
// InitUc ;
43128: CALL_OW 18
// uc_side := side ;
43132: LD_ADDR_OWVAR 20
43136: PUSH
43137: LD_VAR 0 16
43141: ST_TO_ADDR
// uc_nation := nation ;
43142: LD_ADDR_OWVAR 21
43146: PUSH
43147: LD_VAR 0 17
43151: ST_TO_ADDR
// if buildings then
43152: LD_VAR 0 18
43156: IFFALSE 44478
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43158: LD_ADDR_VAR 0 19
43162: PUSH
43163: LD_VAR 0 18
43167: PPUSH
43168: LD_INT 2
43170: PUSH
43171: LD_INT 30
43173: PUSH
43174: LD_INT 29
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 30
43183: PUSH
43184: LD_INT 30
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: PPUSH
43196: CALL_OW 72
43200: ST_TO_ADDR
// if tmp then
43201: LD_VAR 0 19
43205: IFFALSE 43253
// for i in tmp do
43207: LD_ADDR_VAR 0 8
43211: PUSH
43212: LD_VAR 0 19
43216: PUSH
43217: FOR_IN
43218: IFFALSE 43251
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43220: LD_VAR 0 8
43224: PPUSH
43225: CALL_OW 250
43229: PPUSH
43230: LD_VAR 0 8
43234: PPUSH
43235: CALL_OW 251
43239: PPUSH
43240: LD_VAR 0 16
43244: PPUSH
43245: CALL_OW 441
43249: GO 43217
43251: POP
43252: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43253: LD_VAR 0 18
43257: PPUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 30
43263: PUSH
43264: LD_INT 32
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 30
43273: PUSH
43274: LD_INT 33
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: LIST
43285: PPUSH
43286: CALL_OW 72
43290: IFFALSE 43378
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43292: LD_ADDR_VAR 0 8
43296: PUSH
43297: LD_VAR 0 18
43301: PPUSH
43302: LD_INT 2
43304: PUSH
43305: LD_INT 30
43307: PUSH
43308: LD_INT 32
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 30
43317: PUSH
43318: LD_INT 33
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: LIST
43329: PPUSH
43330: CALL_OW 72
43334: PUSH
43335: FOR_IN
43336: IFFALSE 43376
// begin if not GetBWeapon ( i ) then
43338: LD_VAR 0 8
43342: PPUSH
43343: CALL_OW 269
43347: NOT
43348: IFFALSE 43374
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43350: LD_VAR 0 8
43354: PPUSH
43355: LD_VAR 0 8
43359: PPUSH
43360: LD_VAR 0 2
43364: PPUSH
43365: CALL 44624 0 2
43369: PPUSH
43370: CALL_OW 431
// end ;
43374: GO 43335
43376: POP
43377: POP
// end ; for i = 1 to personel do
43378: LD_ADDR_VAR 0 8
43382: PUSH
43383: DOUBLE
43384: LD_INT 1
43386: DEC
43387: ST_TO_ADDR
43388: LD_VAR 0 6
43392: PUSH
43393: FOR_TO
43394: IFFALSE 44458
// begin if i > 4 then
43396: LD_VAR 0 8
43400: PUSH
43401: LD_INT 4
43403: GREATER
43404: IFFALSE 43408
// break ;
43406: GO 44458
// case i of 1 :
43408: LD_VAR 0 8
43412: PUSH
43413: LD_INT 1
43415: DOUBLE
43416: EQUAL
43417: IFTRUE 43421
43419: GO 43501
43421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43422: LD_ADDR_VAR 0 12
43426: PUSH
43427: LD_VAR 0 18
43431: PPUSH
43432: LD_INT 22
43434: PUSH
43435: LD_VAR 0 16
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 58
43446: PUSH
43447: EMPTY
43448: LIST
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: LD_INT 30
43455: PUSH
43456: LD_INT 32
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 30
43465: PUSH
43466: LD_INT 4
43468: PUSH
43469: EMPTY
43470: LIST
43471: LIST
43472: PUSH
43473: LD_INT 30
43475: PUSH
43476: LD_INT 5
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: PPUSH
43494: CALL_OW 72
43498: ST_TO_ADDR
43499: GO 43723
43501: LD_INT 2
43503: DOUBLE
43504: EQUAL
43505: IFTRUE 43509
43507: GO 43571
43509: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43510: LD_ADDR_VAR 0 12
43514: PUSH
43515: LD_VAR 0 18
43519: PPUSH
43520: LD_INT 22
43522: PUSH
43523: LD_VAR 0 16
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 2
43534: PUSH
43535: LD_INT 30
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 30
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: LIST
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PPUSH
43564: CALL_OW 72
43568: ST_TO_ADDR
43569: GO 43723
43571: LD_INT 3
43573: DOUBLE
43574: EQUAL
43575: IFTRUE 43579
43577: GO 43641
43579: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43580: LD_ADDR_VAR 0 12
43584: PUSH
43585: LD_VAR 0 18
43589: PPUSH
43590: LD_INT 22
43592: PUSH
43593: LD_VAR 0 16
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 30
43607: PUSH
43608: LD_INT 2
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 30
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PPUSH
43634: CALL_OW 72
43638: ST_TO_ADDR
43639: GO 43723
43641: LD_INT 4
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43649
43647: GO 43722
43649: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43650: LD_ADDR_VAR 0 12
43654: PUSH
43655: LD_VAR 0 18
43659: PPUSH
43660: LD_INT 22
43662: PUSH
43663: LD_VAR 0 16
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 2
43674: PUSH
43675: LD_INT 30
43677: PUSH
43678: LD_INT 6
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 30
43687: PUSH
43688: LD_INT 7
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 30
43697: PUSH
43698: LD_INT 8
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PPUSH
43715: CALL_OW 72
43719: ST_TO_ADDR
43720: GO 43723
43722: POP
// if i = 1 then
43723: LD_VAR 0 8
43727: PUSH
43728: LD_INT 1
43730: EQUAL
43731: IFFALSE 43842
// begin tmp := [ ] ;
43733: LD_ADDR_VAR 0 19
43737: PUSH
43738: EMPTY
43739: ST_TO_ADDR
// for j in f do
43740: LD_ADDR_VAR 0 9
43744: PUSH
43745: LD_VAR 0 12
43749: PUSH
43750: FOR_IN
43751: IFFALSE 43824
// if GetBType ( j ) = b_bunker then
43753: LD_VAR 0 9
43757: PPUSH
43758: CALL_OW 266
43762: PUSH
43763: LD_INT 32
43765: EQUAL
43766: IFFALSE 43793
// tmp := Insert ( tmp , 1 , j ) else
43768: LD_ADDR_VAR 0 19
43772: PUSH
43773: LD_VAR 0 19
43777: PPUSH
43778: LD_INT 1
43780: PPUSH
43781: LD_VAR 0 9
43785: PPUSH
43786: CALL_OW 2
43790: ST_TO_ADDR
43791: GO 43822
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43793: LD_ADDR_VAR 0 19
43797: PUSH
43798: LD_VAR 0 19
43802: PPUSH
43803: LD_VAR 0 19
43807: PUSH
43808: LD_INT 1
43810: PLUS
43811: PPUSH
43812: LD_VAR 0 9
43816: PPUSH
43817: CALL_OW 2
43821: ST_TO_ADDR
43822: GO 43750
43824: POP
43825: POP
// if tmp then
43826: LD_VAR 0 19
43830: IFFALSE 43842
// f := tmp ;
43832: LD_ADDR_VAR 0 12
43836: PUSH
43837: LD_VAR 0 19
43841: ST_TO_ADDR
// end ; x := personel [ i ] ;
43842: LD_ADDR_VAR 0 13
43846: PUSH
43847: LD_VAR 0 6
43851: PUSH
43852: LD_VAR 0 8
43856: ARRAY
43857: ST_TO_ADDR
// if x = - 1 then
43858: LD_VAR 0 13
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: EQUAL
43867: IFFALSE 44076
// begin for j in f do
43869: LD_ADDR_VAR 0 9
43873: PUSH
43874: LD_VAR 0 12
43878: PUSH
43879: FOR_IN
43880: IFFALSE 44072
// repeat InitHc ;
43882: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43886: LD_VAR 0 9
43890: PPUSH
43891: CALL_OW 266
43895: PUSH
43896: LD_INT 5
43898: EQUAL
43899: IFFALSE 43969
// begin if UnitsInside ( j ) < 3 then
43901: LD_VAR 0 9
43905: PPUSH
43906: CALL_OW 313
43910: PUSH
43911: LD_INT 3
43913: LESS
43914: IFFALSE 43950
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43916: LD_INT 0
43918: PPUSH
43919: LD_INT 5
43921: PUSH
43922: LD_INT 8
43924: PUSH
43925: LD_INT 9
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: LIST
43932: PUSH
43933: LD_VAR 0 17
43937: ARRAY
43938: PPUSH
43939: LD_VAR 0 4
43943: PPUSH
43944: CALL_OW 380
43948: GO 43967
// PrepareHuman ( false , i , skill ) ;
43950: LD_INT 0
43952: PPUSH
43953: LD_VAR 0 8
43957: PPUSH
43958: LD_VAR 0 4
43962: PPUSH
43963: CALL_OW 380
// end else
43967: GO 43986
// PrepareHuman ( false , i , skill ) ;
43969: LD_INT 0
43971: PPUSH
43972: LD_VAR 0 8
43976: PPUSH
43977: LD_VAR 0 4
43981: PPUSH
43982: CALL_OW 380
// un := CreateHuman ;
43986: LD_ADDR_VAR 0 14
43990: PUSH
43991: CALL_OW 44
43995: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43996: LD_ADDR_VAR 0 7
44000: PUSH
44001: LD_VAR 0 7
44005: PPUSH
44006: LD_INT 1
44008: PPUSH
44009: LD_VAR 0 14
44013: PPUSH
44014: CALL_OW 2
44018: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44019: LD_VAR 0 14
44023: PPUSH
44024: LD_VAR 0 9
44028: PPUSH
44029: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44033: LD_VAR 0 9
44037: PPUSH
44038: CALL_OW 313
44042: PUSH
44043: LD_INT 6
44045: EQUAL
44046: PUSH
44047: LD_VAR 0 9
44051: PPUSH
44052: CALL_OW 266
44056: PUSH
44057: LD_INT 32
44059: PUSH
44060: LD_INT 31
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: IN
44067: OR
44068: IFFALSE 43882
44070: GO 43879
44072: POP
44073: POP
// end else
44074: GO 44456
// for j = 1 to x do
44076: LD_ADDR_VAR 0 9
44080: PUSH
44081: DOUBLE
44082: LD_INT 1
44084: DEC
44085: ST_TO_ADDR
44086: LD_VAR 0 13
44090: PUSH
44091: FOR_TO
44092: IFFALSE 44454
// begin InitHc ;
44094: CALL_OW 19
// if not f then
44098: LD_VAR 0 12
44102: NOT
44103: IFFALSE 44192
// begin PrepareHuman ( false , i , skill ) ;
44105: LD_INT 0
44107: PPUSH
44108: LD_VAR 0 8
44112: PPUSH
44113: LD_VAR 0 4
44117: PPUSH
44118: CALL_OW 380
// un := CreateHuman ;
44122: LD_ADDR_VAR 0 14
44126: PUSH
44127: CALL_OW 44
44131: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44132: LD_ADDR_VAR 0 7
44136: PUSH
44137: LD_VAR 0 7
44141: PPUSH
44142: LD_INT 1
44144: PPUSH
44145: LD_VAR 0 14
44149: PPUSH
44150: CALL_OW 2
44154: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44155: LD_VAR 0 14
44159: PPUSH
44160: LD_VAR 0 1
44164: PPUSH
44165: CALL_OW 250
44169: PPUSH
44170: LD_VAR 0 1
44174: PPUSH
44175: CALL_OW 251
44179: PPUSH
44180: LD_INT 10
44182: PPUSH
44183: LD_INT 0
44185: PPUSH
44186: CALL_OW 50
// continue ;
44190: GO 44091
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44192: LD_VAR 0 12
44196: PUSH
44197: LD_INT 1
44199: ARRAY
44200: PPUSH
44201: CALL_OW 313
44205: PUSH
44206: LD_VAR 0 12
44210: PUSH
44211: LD_INT 1
44213: ARRAY
44214: PPUSH
44215: CALL_OW 266
44219: PUSH
44220: LD_INT 32
44222: PUSH
44223: LD_INT 31
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: IN
44230: AND
44231: PUSH
44232: LD_VAR 0 12
44236: PUSH
44237: LD_INT 1
44239: ARRAY
44240: PPUSH
44241: CALL_OW 313
44245: PUSH
44246: LD_INT 6
44248: EQUAL
44249: OR
44250: IFFALSE 44270
// f := Delete ( f , 1 ) ;
44252: LD_ADDR_VAR 0 12
44256: PUSH
44257: LD_VAR 0 12
44261: PPUSH
44262: LD_INT 1
44264: PPUSH
44265: CALL_OW 3
44269: ST_TO_ADDR
// if not f then
44270: LD_VAR 0 12
44274: NOT
44275: IFFALSE 44293
// begin x := x + 2 ;
44277: LD_ADDR_VAR 0 13
44281: PUSH
44282: LD_VAR 0 13
44286: PUSH
44287: LD_INT 2
44289: PLUS
44290: ST_TO_ADDR
// continue ;
44291: GO 44091
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44293: LD_VAR 0 12
44297: PUSH
44298: LD_INT 1
44300: ARRAY
44301: PPUSH
44302: CALL_OW 266
44306: PUSH
44307: LD_INT 5
44309: EQUAL
44310: IFFALSE 44384
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44312: LD_VAR 0 12
44316: PUSH
44317: LD_INT 1
44319: ARRAY
44320: PPUSH
44321: CALL_OW 313
44325: PUSH
44326: LD_INT 3
44328: LESS
44329: IFFALSE 44365
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44331: LD_INT 0
44333: PPUSH
44334: LD_INT 5
44336: PUSH
44337: LD_INT 8
44339: PUSH
44340: LD_INT 9
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: PUSH
44348: LD_VAR 0 17
44352: ARRAY
44353: PPUSH
44354: LD_VAR 0 4
44358: PPUSH
44359: CALL_OW 380
44363: GO 44382
// PrepareHuman ( false , i , skill ) ;
44365: LD_INT 0
44367: PPUSH
44368: LD_VAR 0 8
44372: PPUSH
44373: LD_VAR 0 4
44377: PPUSH
44378: CALL_OW 380
// end else
44382: GO 44401
// PrepareHuman ( false , i , skill ) ;
44384: LD_INT 0
44386: PPUSH
44387: LD_VAR 0 8
44391: PPUSH
44392: LD_VAR 0 4
44396: PPUSH
44397: CALL_OW 380
// un := CreateHuman ;
44401: LD_ADDR_VAR 0 14
44405: PUSH
44406: CALL_OW 44
44410: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44411: LD_ADDR_VAR 0 7
44415: PUSH
44416: LD_VAR 0 7
44420: PPUSH
44421: LD_INT 1
44423: PPUSH
44424: LD_VAR 0 14
44428: PPUSH
44429: CALL_OW 2
44433: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44434: LD_VAR 0 14
44438: PPUSH
44439: LD_VAR 0 12
44443: PUSH
44444: LD_INT 1
44446: ARRAY
44447: PPUSH
44448: CALL_OW 52
// end ;
44452: GO 44091
44454: POP
44455: POP
// end ;
44456: GO 43393
44458: POP
44459: POP
// result := result ^ buildings ;
44460: LD_ADDR_VAR 0 7
44464: PUSH
44465: LD_VAR 0 7
44469: PUSH
44470: LD_VAR 0 18
44474: ADD
44475: ST_TO_ADDR
// end else
44476: GO 44619
// begin for i = 1 to personel do
44478: LD_ADDR_VAR 0 8
44482: PUSH
44483: DOUBLE
44484: LD_INT 1
44486: DEC
44487: ST_TO_ADDR
44488: LD_VAR 0 6
44492: PUSH
44493: FOR_TO
44494: IFFALSE 44617
// begin if i > 4 then
44496: LD_VAR 0 8
44500: PUSH
44501: LD_INT 4
44503: GREATER
44504: IFFALSE 44508
// break ;
44506: GO 44617
// x := personel [ i ] ;
44508: LD_ADDR_VAR 0 13
44512: PUSH
44513: LD_VAR 0 6
44517: PUSH
44518: LD_VAR 0 8
44522: ARRAY
44523: ST_TO_ADDR
// if x = - 1 then
44524: LD_VAR 0 13
44528: PUSH
44529: LD_INT 1
44531: NEG
44532: EQUAL
44533: IFFALSE 44537
// continue ;
44535: GO 44493
// PrepareHuman ( false , i , skill ) ;
44537: LD_INT 0
44539: PPUSH
44540: LD_VAR 0 8
44544: PPUSH
44545: LD_VAR 0 4
44549: PPUSH
44550: CALL_OW 380
// un := CreateHuman ;
44554: LD_ADDR_VAR 0 14
44558: PUSH
44559: CALL_OW 44
44563: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44564: LD_VAR 0 14
44568: PPUSH
44569: LD_VAR 0 1
44573: PPUSH
44574: CALL_OW 250
44578: PPUSH
44579: LD_VAR 0 1
44583: PPUSH
44584: CALL_OW 251
44588: PPUSH
44589: LD_INT 10
44591: PPUSH
44592: LD_INT 0
44594: PPUSH
44595: CALL_OW 50
// result := result ^ un ;
44599: LD_ADDR_VAR 0 7
44603: PUSH
44604: LD_VAR 0 7
44608: PUSH
44609: LD_VAR 0 14
44613: ADD
44614: ST_TO_ADDR
// end ;
44615: GO 44493
44617: POP
44618: POP
// end ; end ;
44619: LD_VAR 0 7
44623: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44624: LD_INT 0
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
44633: PPUSH
44634: PPUSH
44635: PPUSH
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
44640: PPUSH
44641: PPUSH
// result := false ;
44642: LD_ADDR_VAR 0 3
44646: PUSH
44647: LD_INT 0
44649: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44650: LD_VAR 0 1
44654: NOT
44655: PUSH
44656: LD_VAR 0 1
44660: PPUSH
44661: CALL_OW 266
44665: PUSH
44666: LD_INT 32
44668: PUSH
44669: LD_INT 33
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: IN
44676: NOT
44677: OR
44678: IFFALSE 44682
// exit ;
44680: GO 45791
// nat := GetNation ( tower ) ;
44682: LD_ADDR_VAR 0 12
44686: PUSH
44687: LD_VAR 0 1
44691: PPUSH
44692: CALL_OW 248
44696: ST_TO_ADDR
// side := GetSide ( tower ) ;
44697: LD_ADDR_VAR 0 16
44701: PUSH
44702: LD_VAR 0 1
44706: PPUSH
44707: CALL_OW 255
44711: ST_TO_ADDR
// x := GetX ( tower ) ;
44712: LD_ADDR_VAR 0 10
44716: PUSH
44717: LD_VAR 0 1
44721: PPUSH
44722: CALL_OW 250
44726: ST_TO_ADDR
// y := GetY ( tower ) ;
44727: LD_ADDR_VAR 0 11
44731: PUSH
44732: LD_VAR 0 1
44736: PPUSH
44737: CALL_OW 251
44741: ST_TO_ADDR
// if not x or not y then
44742: LD_VAR 0 10
44746: NOT
44747: PUSH
44748: LD_VAR 0 11
44752: NOT
44753: OR
44754: IFFALSE 44758
// exit ;
44756: GO 45791
// weapon := 0 ;
44758: LD_ADDR_VAR 0 18
44762: PUSH
44763: LD_INT 0
44765: ST_TO_ADDR
// fac_list := [ ] ;
44766: LD_ADDR_VAR 0 17
44770: PUSH
44771: EMPTY
44772: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44773: LD_ADDR_VAR 0 6
44777: PUSH
44778: LD_VAR 0 1
44782: PPUSH
44783: CALL_OW 274
44787: PPUSH
44788: LD_VAR 0 2
44792: PPUSH
44793: LD_INT 0
44795: PPUSH
44796: CALL 42362 0 3
44800: PPUSH
44801: LD_INT 30
44803: PUSH
44804: LD_INT 3
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PPUSH
44811: CALL_OW 72
44815: ST_TO_ADDR
// if not factories then
44816: LD_VAR 0 6
44820: NOT
44821: IFFALSE 44825
// exit ;
44823: GO 45791
// for i in factories do
44825: LD_ADDR_VAR 0 8
44829: PUSH
44830: LD_VAR 0 6
44834: PUSH
44835: FOR_IN
44836: IFFALSE 44861
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44838: LD_ADDR_VAR 0 17
44842: PUSH
44843: LD_VAR 0 17
44847: PUSH
44848: LD_VAR 0 8
44852: PPUSH
44853: CALL_OW 478
44857: UNION
44858: ST_TO_ADDR
44859: GO 44835
44861: POP
44862: POP
// if not fac_list then
44863: LD_VAR 0 17
44867: NOT
44868: IFFALSE 44872
// exit ;
44870: GO 45791
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44872: LD_ADDR_VAR 0 5
44876: PUSH
44877: LD_INT 4
44879: PUSH
44880: LD_INT 5
44882: PUSH
44883: LD_INT 9
44885: PUSH
44886: LD_INT 10
44888: PUSH
44889: LD_INT 6
44891: PUSH
44892: LD_INT 7
44894: PUSH
44895: LD_INT 11
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 27
44909: PUSH
44910: LD_INT 28
44912: PUSH
44913: LD_INT 26
44915: PUSH
44916: LD_INT 30
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 43
44927: PUSH
44928: LD_INT 44
44930: PUSH
44931: LD_INT 46
44933: PUSH
44934: LD_INT 45
44936: PUSH
44937: LD_INT 47
44939: PUSH
44940: LD_INT 49
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: PUSH
44956: LD_VAR 0 12
44960: ARRAY
44961: ST_TO_ADDR
// list := list isect fac_list ;
44962: LD_ADDR_VAR 0 5
44966: PUSH
44967: LD_VAR 0 5
44971: PUSH
44972: LD_VAR 0 17
44976: ISECT
44977: ST_TO_ADDR
// if not list then
44978: LD_VAR 0 5
44982: NOT
44983: IFFALSE 44987
// exit ;
44985: GO 45791
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44987: LD_VAR 0 12
44991: PUSH
44992: LD_INT 3
44994: EQUAL
44995: PUSH
44996: LD_INT 49
44998: PUSH
44999: LD_VAR 0 5
45003: IN
45004: AND
45005: PUSH
45006: LD_INT 31
45008: PPUSH
45009: LD_VAR 0 16
45013: PPUSH
45014: CALL_OW 321
45018: PUSH
45019: LD_INT 2
45021: EQUAL
45022: AND
45023: IFFALSE 45083
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45025: LD_INT 22
45027: PUSH
45028: LD_VAR 0 16
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 35
45039: PUSH
45040: LD_INT 49
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 91
45049: PUSH
45050: LD_VAR 0 1
45054: PUSH
45055: LD_INT 10
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: PPUSH
45068: CALL_OW 69
45072: NOT
45073: IFFALSE 45083
// weapon := ru_time_lapser ;
45075: LD_ADDR_VAR 0 18
45079: PUSH
45080: LD_INT 49
45082: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45083: LD_VAR 0 12
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: IN
45098: PUSH
45099: LD_INT 11
45101: PUSH
45102: LD_VAR 0 5
45106: IN
45107: PUSH
45108: LD_INT 30
45110: PUSH
45111: LD_VAR 0 5
45115: IN
45116: OR
45117: AND
45118: PUSH
45119: LD_INT 6
45121: PPUSH
45122: LD_VAR 0 16
45126: PPUSH
45127: CALL_OW 321
45131: PUSH
45132: LD_INT 2
45134: EQUAL
45135: AND
45136: IFFALSE 45301
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45138: LD_INT 22
45140: PUSH
45141: LD_VAR 0 16
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: PUSH
45153: LD_INT 35
45155: PUSH
45156: LD_INT 11
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 35
45165: PUSH
45166: LD_INT 30
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 91
45180: PUSH
45181: LD_VAR 0 1
45185: PUSH
45186: LD_INT 18
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: LIST
45198: PPUSH
45199: CALL_OW 69
45203: NOT
45204: PUSH
45205: LD_INT 22
45207: PUSH
45208: LD_VAR 0 16
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 30
45222: PUSH
45223: LD_INT 32
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 30
45232: PUSH
45233: LD_INT 33
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 91
45247: PUSH
45248: LD_VAR 0 1
45252: PUSH
45253: LD_INT 12
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: LIST
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: LIST
45265: PUSH
45266: EMPTY
45267: LIST
45268: PPUSH
45269: CALL_OW 69
45273: PUSH
45274: LD_INT 2
45276: GREATER
45277: AND
45278: IFFALSE 45301
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45280: LD_ADDR_VAR 0 18
45284: PUSH
45285: LD_INT 11
45287: PUSH
45288: LD_INT 30
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_VAR 0 12
45299: ARRAY
45300: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45301: LD_VAR 0 18
45305: NOT
45306: PUSH
45307: LD_INT 40
45309: PPUSH
45310: LD_VAR 0 16
45314: PPUSH
45315: CALL_OW 321
45319: PUSH
45320: LD_INT 2
45322: EQUAL
45323: AND
45324: PUSH
45325: LD_INT 7
45327: PUSH
45328: LD_VAR 0 5
45332: IN
45333: PUSH
45334: LD_INT 28
45336: PUSH
45337: LD_VAR 0 5
45341: IN
45342: OR
45343: PUSH
45344: LD_INT 45
45346: PUSH
45347: LD_VAR 0 5
45351: IN
45352: OR
45353: AND
45354: IFFALSE 45608
// begin hex := GetHexInfo ( x , y ) ;
45356: LD_ADDR_VAR 0 4
45360: PUSH
45361: LD_VAR 0 10
45365: PPUSH
45366: LD_VAR 0 11
45370: PPUSH
45371: CALL_OW 546
45375: ST_TO_ADDR
// if hex [ 1 ] then
45376: LD_VAR 0 4
45380: PUSH
45381: LD_INT 1
45383: ARRAY
45384: IFFALSE 45388
// exit ;
45386: GO 45791
// height := hex [ 2 ] ;
45388: LD_ADDR_VAR 0 15
45392: PUSH
45393: LD_VAR 0 4
45397: PUSH
45398: LD_INT 2
45400: ARRAY
45401: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45402: LD_ADDR_VAR 0 14
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: LD_INT 5
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// for i in tmp do
45425: LD_ADDR_VAR 0 8
45429: PUSH
45430: LD_VAR 0 14
45434: PUSH
45435: FOR_IN
45436: IFFALSE 45606
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45438: LD_ADDR_VAR 0 9
45442: PUSH
45443: LD_VAR 0 10
45447: PPUSH
45448: LD_VAR 0 8
45452: PPUSH
45453: LD_INT 5
45455: PPUSH
45456: CALL_OW 272
45460: PUSH
45461: LD_VAR 0 11
45465: PPUSH
45466: LD_VAR 0 8
45470: PPUSH
45471: LD_INT 5
45473: PPUSH
45474: CALL_OW 273
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45483: LD_VAR 0 9
45487: PUSH
45488: LD_INT 1
45490: ARRAY
45491: PPUSH
45492: LD_VAR 0 9
45496: PUSH
45497: LD_INT 2
45499: ARRAY
45500: PPUSH
45501: CALL_OW 488
45505: IFFALSE 45604
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45507: LD_ADDR_VAR 0 4
45511: PUSH
45512: LD_VAR 0 9
45516: PUSH
45517: LD_INT 1
45519: ARRAY
45520: PPUSH
45521: LD_VAR 0 9
45525: PUSH
45526: LD_INT 2
45528: ARRAY
45529: PPUSH
45530: CALL_OW 546
45534: ST_TO_ADDR
// if hex [ 1 ] then
45535: LD_VAR 0 4
45539: PUSH
45540: LD_INT 1
45542: ARRAY
45543: IFFALSE 45547
// continue ;
45545: GO 45435
// h := hex [ 2 ] ;
45547: LD_ADDR_VAR 0 13
45551: PUSH
45552: LD_VAR 0 4
45556: PUSH
45557: LD_INT 2
45559: ARRAY
45560: ST_TO_ADDR
// if h + 7 < height then
45561: LD_VAR 0 13
45565: PUSH
45566: LD_INT 7
45568: PLUS
45569: PUSH
45570: LD_VAR 0 15
45574: LESS
45575: IFFALSE 45604
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45577: LD_ADDR_VAR 0 18
45581: PUSH
45582: LD_INT 7
45584: PUSH
45585: LD_INT 28
45587: PUSH
45588: LD_INT 45
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: LIST
45595: PUSH
45596: LD_VAR 0 12
45600: ARRAY
45601: ST_TO_ADDR
// break ;
45602: GO 45606
// end ; end ; end ;
45604: GO 45435
45606: POP
45607: POP
// end ; if not weapon then
45608: LD_VAR 0 18
45612: NOT
45613: IFFALSE 45673
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45615: LD_ADDR_VAR 0 5
45619: PUSH
45620: LD_VAR 0 5
45624: PUSH
45625: LD_INT 11
45627: PUSH
45628: LD_INT 30
45630: PUSH
45631: LD_INT 49
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: DIFF
45639: ST_TO_ADDR
// if not list then
45640: LD_VAR 0 5
45644: NOT
45645: IFFALSE 45649
// exit ;
45647: GO 45791
// weapon := list [ rand ( 1 , list ) ] ;
45649: LD_ADDR_VAR 0 18
45653: PUSH
45654: LD_VAR 0 5
45658: PUSH
45659: LD_INT 1
45661: PPUSH
45662: LD_VAR 0 5
45666: PPUSH
45667: CALL_OW 12
45671: ARRAY
45672: ST_TO_ADDR
// end ; if weapon then
45673: LD_VAR 0 18
45677: IFFALSE 45791
// begin tmp := CostOfWeapon ( weapon ) ;
45679: LD_ADDR_VAR 0 14
45683: PUSH
45684: LD_VAR 0 18
45688: PPUSH
45689: CALL_OW 451
45693: ST_TO_ADDR
// j := GetBase ( tower ) ;
45694: LD_ADDR_VAR 0 9
45698: PUSH
45699: LD_VAR 0 1
45703: PPUSH
45704: CALL_OW 274
45708: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45709: LD_VAR 0 9
45713: PPUSH
45714: LD_INT 1
45716: PPUSH
45717: CALL_OW 275
45721: PUSH
45722: LD_VAR 0 14
45726: PUSH
45727: LD_INT 1
45729: ARRAY
45730: GREATEREQUAL
45731: PUSH
45732: LD_VAR 0 9
45736: PPUSH
45737: LD_INT 2
45739: PPUSH
45740: CALL_OW 275
45744: PUSH
45745: LD_VAR 0 14
45749: PUSH
45750: LD_INT 2
45752: ARRAY
45753: GREATEREQUAL
45754: AND
45755: PUSH
45756: LD_VAR 0 9
45760: PPUSH
45761: LD_INT 3
45763: PPUSH
45764: CALL_OW 275
45768: PUSH
45769: LD_VAR 0 14
45773: PUSH
45774: LD_INT 3
45776: ARRAY
45777: GREATEREQUAL
45778: AND
45779: IFFALSE 45791
// result := weapon ;
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_VAR 0 18
45790: ST_TO_ADDR
// end ; end ;
45791: LD_VAR 0 3
45795: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45796: LD_INT 0
45798: PPUSH
45799: PPUSH
// result := true ;
45800: LD_ADDR_VAR 0 3
45804: PUSH
45805: LD_INT 1
45807: ST_TO_ADDR
// if array1 = array2 then
45808: LD_VAR 0 1
45812: PUSH
45813: LD_VAR 0 2
45817: EQUAL
45818: IFFALSE 45878
// begin for i = 1 to array1 do
45820: LD_ADDR_VAR 0 4
45824: PUSH
45825: DOUBLE
45826: LD_INT 1
45828: DEC
45829: ST_TO_ADDR
45830: LD_VAR 0 1
45834: PUSH
45835: FOR_TO
45836: IFFALSE 45874
// if array1 [ i ] <> array2 [ i ] then
45838: LD_VAR 0 1
45842: PUSH
45843: LD_VAR 0 4
45847: ARRAY
45848: PUSH
45849: LD_VAR 0 2
45853: PUSH
45854: LD_VAR 0 4
45858: ARRAY
45859: NONEQUAL
45860: IFFALSE 45872
// begin result := false ;
45862: LD_ADDR_VAR 0 3
45866: PUSH
45867: LD_INT 0
45869: ST_TO_ADDR
// break ;
45870: GO 45874
// end ;
45872: GO 45835
45874: POP
45875: POP
// end else
45876: GO 45886
// result := false ;
45878: LD_ADDR_VAR 0 3
45882: PUSH
45883: LD_INT 0
45885: ST_TO_ADDR
// end ;
45886: LD_VAR 0 3
45890: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45891: LD_INT 0
45893: PPUSH
45894: PPUSH
// if not array1 or not array2 then
45895: LD_VAR 0 1
45899: NOT
45900: PUSH
45901: LD_VAR 0 2
45905: NOT
45906: OR
45907: IFFALSE 45911
// exit ;
45909: GO 45975
// result := true ;
45911: LD_ADDR_VAR 0 3
45915: PUSH
45916: LD_INT 1
45918: ST_TO_ADDR
// for i = 1 to array1 do
45919: LD_ADDR_VAR 0 4
45923: PUSH
45924: DOUBLE
45925: LD_INT 1
45927: DEC
45928: ST_TO_ADDR
45929: LD_VAR 0 1
45933: PUSH
45934: FOR_TO
45935: IFFALSE 45973
// if array1 [ i ] <> array2 [ i ] then
45937: LD_VAR 0 1
45941: PUSH
45942: LD_VAR 0 4
45946: ARRAY
45947: PUSH
45948: LD_VAR 0 2
45952: PUSH
45953: LD_VAR 0 4
45957: ARRAY
45958: NONEQUAL
45959: IFFALSE 45971
// begin result := false ;
45961: LD_ADDR_VAR 0 3
45965: PUSH
45966: LD_INT 0
45968: ST_TO_ADDR
// break ;
45969: GO 45973
// end ;
45971: GO 45934
45973: POP
45974: POP
// end ;
45975: LD_VAR 0 3
45979: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45980: LD_INT 0
45982: PPUSH
45983: PPUSH
45984: PPUSH
// pom := GetBase ( fac ) ;
45985: LD_ADDR_VAR 0 5
45989: PUSH
45990: LD_VAR 0 1
45994: PPUSH
45995: CALL_OW 274
45999: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46000: LD_ADDR_VAR 0 4
46004: PUSH
46005: LD_VAR 0 2
46009: PUSH
46010: LD_INT 1
46012: ARRAY
46013: PPUSH
46014: LD_VAR 0 2
46018: PUSH
46019: LD_INT 2
46021: ARRAY
46022: PPUSH
46023: LD_VAR 0 2
46027: PUSH
46028: LD_INT 3
46030: ARRAY
46031: PPUSH
46032: LD_VAR 0 2
46036: PUSH
46037: LD_INT 4
46039: ARRAY
46040: PPUSH
46041: CALL_OW 449
46045: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46046: LD_ADDR_VAR 0 3
46050: PUSH
46051: LD_VAR 0 5
46055: PPUSH
46056: LD_INT 1
46058: PPUSH
46059: CALL_OW 275
46063: PUSH
46064: LD_VAR 0 4
46068: PUSH
46069: LD_INT 1
46071: ARRAY
46072: GREATEREQUAL
46073: PUSH
46074: LD_VAR 0 5
46078: PPUSH
46079: LD_INT 2
46081: PPUSH
46082: CALL_OW 275
46086: PUSH
46087: LD_VAR 0 4
46091: PUSH
46092: LD_INT 2
46094: ARRAY
46095: GREATEREQUAL
46096: AND
46097: PUSH
46098: LD_VAR 0 5
46102: PPUSH
46103: LD_INT 3
46105: PPUSH
46106: CALL_OW 275
46110: PUSH
46111: LD_VAR 0 4
46115: PUSH
46116: LD_INT 3
46118: ARRAY
46119: GREATEREQUAL
46120: AND
46121: ST_TO_ADDR
// end ;
46122: LD_VAR 0 3
46126: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46127: LD_INT 0
46129: PPUSH
46130: PPUSH
46131: PPUSH
46132: PPUSH
// pom := GetBase ( building ) ;
46133: LD_ADDR_VAR 0 3
46137: PUSH
46138: LD_VAR 0 1
46142: PPUSH
46143: CALL_OW 274
46147: ST_TO_ADDR
// if not pom then
46148: LD_VAR 0 3
46152: NOT
46153: IFFALSE 46157
// exit ;
46155: GO 46327
// btype := GetBType ( building ) ;
46157: LD_ADDR_VAR 0 5
46161: PUSH
46162: LD_VAR 0 1
46166: PPUSH
46167: CALL_OW 266
46171: ST_TO_ADDR
// if btype = b_armoury then
46172: LD_VAR 0 5
46176: PUSH
46177: LD_INT 4
46179: EQUAL
46180: IFFALSE 46190
// btype := b_barracks ;
46182: LD_ADDR_VAR 0 5
46186: PUSH
46187: LD_INT 5
46189: ST_TO_ADDR
// if btype = b_depot then
46190: LD_VAR 0 5
46194: PUSH
46195: LD_INT 0
46197: EQUAL
46198: IFFALSE 46208
// btype := b_warehouse ;
46200: LD_ADDR_VAR 0 5
46204: PUSH
46205: LD_INT 1
46207: ST_TO_ADDR
// if btype = b_workshop then
46208: LD_VAR 0 5
46212: PUSH
46213: LD_INT 2
46215: EQUAL
46216: IFFALSE 46226
// btype := b_factory ;
46218: LD_ADDR_VAR 0 5
46222: PUSH
46223: LD_INT 3
46225: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46226: LD_ADDR_VAR 0 4
46230: PUSH
46231: LD_VAR 0 5
46235: PPUSH
46236: LD_VAR 0 1
46240: PPUSH
46241: CALL_OW 248
46245: PPUSH
46246: CALL_OW 450
46250: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46251: LD_ADDR_VAR 0 2
46255: PUSH
46256: LD_VAR 0 3
46260: PPUSH
46261: LD_INT 1
46263: PPUSH
46264: CALL_OW 275
46268: PUSH
46269: LD_VAR 0 4
46273: PUSH
46274: LD_INT 1
46276: ARRAY
46277: GREATEREQUAL
46278: PUSH
46279: LD_VAR 0 3
46283: PPUSH
46284: LD_INT 2
46286: PPUSH
46287: CALL_OW 275
46291: PUSH
46292: LD_VAR 0 4
46296: PUSH
46297: LD_INT 2
46299: ARRAY
46300: GREATEREQUAL
46301: AND
46302: PUSH
46303: LD_VAR 0 3
46307: PPUSH
46308: LD_INT 3
46310: PPUSH
46311: CALL_OW 275
46315: PUSH
46316: LD_VAR 0 4
46320: PUSH
46321: LD_INT 3
46323: ARRAY
46324: GREATEREQUAL
46325: AND
46326: ST_TO_ADDR
// end ;
46327: LD_VAR 0 2
46331: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46332: LD_INT 0
46334: PPUSH
46335: PPUSH
46336: PPUSH
// pom := GetBase ( building ) ;
46337: LD_ADDR_VAR 0 4
46341: PUSH
46342: LD_VAR 0 1
46346: PPUSH
46347: CALL_OW 274
46351: ST_TO_ADDR
// if not pom then
46352: LD_VAR 0 4
46356: NOT
46357: IFFALSE 46361
// exit ;
46359: GO 46462
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46361: LD_ADDR_VAR 0 5
46365: PUSH
46366: LD_VAR 0 2
46370: PPUSH
46371: LD_VAR 0 1
46375: PPUSH
46376: CALL_OW 248
46380: PPUSH
46381: CALL_OW 450
46385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46386: LD_ADDR_VAR 0 3
46390: PUSH
46391: LD_VAR 0 4
46395: PPUSH
46396: LD_INT 1
46398: PPUSH
46399: CALL_OW 275
46403: PUSH
46404: LD_VAR 0 5
46408: PUSH
46409: LD_INT 1
46411: ARRAY
46412: GREATEREQUAL
46413: PUSH
46414: LD_VAR 0 4
46418: PPUSH
46419: LD_INT 2
46421: PPUSH
46422: CALL_OW 275
46426: PUSH
46427: LD_VAR 0 5
46431: PUSH
46432: LD_INT 2
46434: ARRAY
46435: GREATEREQUAL
46436: AND
46437: PUSH
46438: LD_VAR 0 4
46442: PPUSH
46443: LD_INT 3
46445: PPUSH
46446: CALL_OW 275
46450: PUSH
46451: LD_VAR 0 5
46455: PUSH
46456: LD_INT 3
46458: ARRAY
46459: GREATEREQUAL
46460: AND
46461: ST_TO_ADDR
// end ;
46462: LD_VAR 0 3
46466: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46467: LD_INT 0
46469: PPUSH
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
46476: PPUSH
46477: PPUSH
46478: PPUSH
46479: PPUSH
// result := false ;
46480: LD_ADDR_VAR 0 8
46484: PUSH
46485: LD_INT 0
46487: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46488: LD_VAR 0 5
46492: NOT
46493: PUSH
46494: LD_VAR 0 1
46498: NOT
46499: OR
46500: PUSH
46501: LD_VAR 0 2
46505: NOT
46506: OR
46507: PUSH
46508: LD_VAR 0 3
46512: NOT
46513: OR
46514: IFFALSE 46518
// exit ;
46516: GO 47332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46518: LD_ADDR_VAR 0 14
46522: PUSH
46523: LD_VAR 0 1
46527: PPUSH
46528: LD_VAR 0 2
46532: PPUSH
46533: LD_VAR 0 3
46537: PPUSH
46538: LD_VAR 0 4
46542: PPUSH
46543: LD_VAR 0 5
46547: PUSH
46548: LD_INT 1
46550: ARRAY
46551: PPUSH
46552: CALL_OW 248
46556: PPUSH
46557: LD_INT 0
46559: PPUSH
46560: CALL 48585 0 6
46564: ST_TO_ADDR
// if not hexes then
46565: LD_VAR 0 14
46569: NOT
46570: IFFALSE 46574
// exit ;
46572: GO 47332
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46574: LD_ADDR_VAR 0 17
46578: PUSH
46579: LD_VAR 0 5
46583: PPUSH
46584: LD_INT 22
46586: PUSH
46587: LD_VAR 0 13
46591: PPUSH
46592: CALL_OW 255
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: LD_INT 30
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 30
46616: PUSH
46617: LD_INT 1
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: LIST
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PPUSH
46633: CALL_OW 72
46637: ST_TO_ADDR
// for i = 1 to hexes do
46638: LD_ADDR_VAR 0 9
46642: PUSH
46643: DOUBLE
46644: LD_INT 1
46646: DEC
46647: ST_TO_ADDR
46648: LD_VAR 0 14
46652: PUSH
46653: FOR_TO
46654: IFFALSE 47330
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46656: LD_ADDR_VAR 0 13
46660: PUSH
46661: LD_VAR 0 14
46665: PUSH
46666: LD_VAR 0 9
46670: ARRAY
46671: PUSH
46672: LD_INT 1
46674: ARRAY
46675: PPUSH
46676: LD_VAR 0 14
46680: PUSH
46681: LD_VAR 0 9
46685: ARRAY
46686: PUSH
46687: LD_INT 2
46689: ARRAY
46690: PPUSH
46691: CALL_OW 428
46695: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46696: LD_VAR 0 14
46700: PUSH
46701: LD_VAR 0 9
46705: ARRAY
46706: PUSH
46707: LD_INT 1
46709: ARRAY
46710: PPUSH
46711: LD_VAR 0 14
46715: PUSH
46716: LD_VAR 0 9
46720: ARRAY
46721: PUSH
46722: LD_INT 2
46724: ARRAY
46725: PPUSH
46726: CALL_OW 351
46730: PUSH
46731: LD_VAR 0 14
46735: PUSH
46736: LD_VAR 0 9
46740: ARRAY
46741: PUSH
46742: LD_INT 1
46744: ARRAY
46745: PPUSH
46746: LD_VAR 0 14
46750: PUSH
46751: LD_VAR 0 9
46755: ARRAY
46756: PUSH
46757: LD_INT 2
46759: ARRAY
46760: PPUSH
46761: CALL_OW 488
46765: NOT
46766: OR
46767: PUSH
46768: LD_VAR 0 13
46772: PPUSH
46773: CALL_OW 247
46777: PUSH
46778: LD_INT 3
46780: EQUAL
46781: OR
46782: IFFALSE 46788
// exit ;
46784: POP
46785: POP
46786: GO 47332
// if not tmp then
46788: LD_VAR 0 13
46792: NOT
46793: IFFALSE 46797
// continue ;
46795: GO 46653
// result := true ;
46797: LD_ADDR_VAR 0 8
46801: PUSH
46802: LD_INT 1
46804: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46805: LD_VAR 0 6
46809: PUSH
46810: LD_VAR 0 13
46814: PPUSH
46815: CALL_OW 247
46819: PUSH
46820: LD_INT 2
46822: EQUAL
46823: AND
46824: PUSH
46825: LD_VAR 0 13
46829: PPUSH
46830: CALL_OW 263
46834: PUSH
46835: LD_INT 1
46837: EQUAL
46838: AND
46839: IFFALSE 47003
// begin if IsDrivenBy ( tmp ) then
46841: LD_VAR 0 13
46845: PPUSH
46846: CALL_OW 311
46850: IFFALSE 46854
// continue ;
46852: GO 46653
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46854: LD_VAR 0 6
46858: PPUSH
46859: LD_INT 3
46861: PUSH
46862: LD_INT 60
46864: PUSH
46865: EMPTY
46866: LIST
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 3
46874: PUSH
46875: LD_INT 55
46877: PUSH
46878: EMPTY
46879: LIST
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PPUSH
46889: CALL_OW 72
46893: IFFALSE 47001
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46895: LD_ADDR_VAR 0 18
46899: PUSH
46900: LD_VAR 0 6
46904: PPUSH
46905: LD_INT 3
46907: PUSH
46908: LD_INT 60
46910: PUSH
46911: EMPTY
46912: LIST
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: LD_INT 55
46923: PUSH
46924: EMPTY
46925: LIST
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PPUSH
46935: CALL_OW 72
46939: PUSH
46940: LD_INT 1
46942: ARRAY
46943: ST_TO_ADDR
// if IsInUnit ( driver ) then
46944: LD_VAR 0 18
46948: PPUSH
46949: CALL_OW 310
46953: IFFALSE 46964
// ComExit ( driver ) ;
46955: LD_VAR 0 18
46959: PPUSH
46960: CALL 72386 0 1
// AddComEnterUnit ( driver , tmp ) ;
46964: LD_VAR 0 18
46968: PPUSH
46969: LD_VAR 0 13
46973: PPUSH
46974: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46978: LD_VAR 0 18
46982: PPUSH
46983: LD_VAR 0 7
46987: PPUSH
46988: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46992: LD_VAR 0 18
46996: PPUSH
46997: CALL_OW 181
// end ; continue ;
47001: GO 46653
// end ; if not cleaners or not tmp in cleaners then
47003: LD_VAR 0 6
47007: NOT
47008: PUSH
47009: LD_VAR 0 13
47013: PUSH
47014: LD_VAR 0 6
47018: IN
47019: NOT
47020: OR
47021: IFFALSE 47328
// begin if dep then
47023: LD_VAR 0 17
47027: IFFALSE 47163
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47029: LD_ADDR_VAR 0 16
47033: PUSH
47034: LD_VAR 0 17
47038: PUSH
47039: LD_INT 1
47041: ARRAY
47042: PPUSH
47043: CALL_OW 250
47047: PPUSH
47048: LD_VAR 0 17
47052: PUSH
47053: LD_INT 1
47055: ARRAY
47056: PPUSH
47057: CALL_OW 254
47061: PPUSH
47062: LD_INT 5
47064: PPUSH
47065: CALL_OW 272
47069: PUSH
47070: LD_VAR 0 17
47074: PUSH
47075: LD_INT 1
47077: ARRAY
47078: PPUSH
47079: CALL_OW 251
47083: PPUSH
47084: LD_VAR 0 17
47088: PUSH
47089: LD_INT 1
47091: ARRAY
47092: PPUSH
47093: CALL_OW 254
47097: PPUSH
47098: LD_INT 5
47100: PPUSH
47101: CALL_OW 273
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47110: LD_VAR 0 16
47114: PUSH
47115: LD_INT 1
47117: ARRAY
47118: PPUSH
47119: LD_VAR 0 16
47123: PUSH
47124: LD_INT 2
47126: ARRAY
47127: PPUSH
47128: CALL_OW 488
47132: IFFALSE 47163
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47134: LD_VAR 0 13
47138: PPUSH
47139: LD_VAR 0 16
47143: PUSH
47144: LD_INT 1
47146: ARRAY
47147: PPUSH
47148: LD_VAR 0 16
47152: PUSH
47153: LD_INT 2
47155: ARRAY
47156: PPUSH
47157: CALL_OW 111
// continue ;
47161: GO 46653
// end ; end ; r := GetDir ( tmp ) ;
47163: LD_ADDR_VAR 0 15
47167: PUSH
47168: LD_VAR 0 13
47172: PPUSH
47173: CALL_OW 254
47177: ST_TO_ADDR
// if r = 5 then
47178: LD_VAR 0 15
47182: PUSH
47183: LD_INT 5
47185: EQUAL
47186: IFFALSE 47196
// r := 0 ;
47188: LD_ADDR_VAR 0 15
47192: PUSH
47193: LD_INT 0
47195: ST_TO_ADDR
// for j = r to 5 do
47196: LD_ADDR_VAR 0 10
47200: PUSH
47201: DOUBLE
47202: LD_VAR 0 15
47206: DEC
47207: ST_TO_ADDR
47208: LD_INT 5
47210: PUSH
47211: FOR_TO
47212: IFFALSE 47326
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47214: LD_ADDR_VAR 0 11
47218: PUSH
47219: LD_VAR 0 13
47223: PPUSH
47224: CALL_OW 250
47228: PPUSH
47229: LD_VAR 0 10
47233: PPUSH
47234: LD_INT 2
47236: PPUSH
47237: CALL_OW 272
47241: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47242: LD_ADDR_VAR 0 12
47246: PUSH
47247: LD_VAR 0 13
47251: PPUSH
47252: CALL_OW 251
47256: PPUSH
47257: LD_VAR 0 10
47261: PPUSH
47262: LD_INT 2
47264: PPUSH
47265: CALL_OW 273
47269: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47270: LD_VAR 0 11
47274: PPUSH
47275: LD_VAR 0 12
47279: PPUSH
47280: CALL_OW 488
47284: PUSH
47285: LD_VAR 0 11
47289: PPUSH
47290: LD_VAR 0 12
47294: PPUSH
47295: CALL_OW 428
47299: NOT
47300: AND
47301: IFFALSE 47324
// begin ComMoveXY ( tmp , _x , _y ) ;
47303: LD_VAR 0 13
47307: PPUSH
47308: LD_VAR 0 11
47312: PPUSH
47313: LD_VAR 0 12
47317: PPUSH
47318: CALL_OW 111
// break ;
47322: GO 47326
// end ; end ;
47324: GO 47211
47326: POP
47327: POP
// end ; end ;
47328: GO 46653
47330: POP
47331: POP
// end ;
47332: LD_VAR 0 8
47336: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47337: LD_INT 0
47339: PPUSH
// result := true ;
47340: LD_ADDR_VAR 0 3
47344: PUSH
47345: LD_INT 1
47347: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47348: LD_VAR 0 2
47352: PUSH
47353: LD_INT 24
47355: DOUBLE
47356: EQUAL
47357: IFTRUE 47367
47359: LD_INT 33
47361: DOUBLE
47362: EQUAL
47363: IFTRUE 47367
47365: GO 47392
47367: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47368: LD_ADDR_VAR 0 3
47372: PUSH
47373: LD_INT 32
47375: PPUSH
47376: LD_VAR 0 1
47380: PPUSH
47381: CALL_OW 321
47385: PUSH
47386: LD_INT 2
47388: EQUAL
47389: ST_TO_ADDR
47390: GO 47708
47392: LD_INT 20
47394: DOUBLE
47395: EQUAL
47396: IFTRUE 47400
47398: GO 47425
47400: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47401: LD_ADDR_VAR 0 3
47405: PUSH
47406: LD_INT 6
47408: PPUSH
47409: LD_VAR 0 1
47413: PPUSH
47414: CALL_OW 321
47418: PUSH
47419: LD_INT 2
47421: EQUAL
47422: ST_TO_ADDR
47423: GO 47708
47425: LD_INT 22
47427: DOUBLE
47428: EQUAL
47429: IFTRUE 47439
47431: LD_INT 36
47433: DOUBLE
47434: EQUAL
47435: IFTRUE 47439
47437: GO 47464
47439: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47440: LD_ADDR_VAR 0 3
47444: PUSH
47445: LD_INT 15
47447: PPUSH
47448: LD_VAR 0 1
47452: PPUSH
47453: CALL_OW 321
47457: PUSH
47458: LD_INT 2
47460: EQUAL
47461: ST_TO_ADDR
47462: GO 47708
47464: LD_INT 30
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47472
47470: GO 47497
47472: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47473: LD_ADDR_VAR 0 3
47477: PUSH
47478: LD_INT 20
47480: PPUSH
47481: LD_VAR 0 1
47485: PPUSH
47486: CALL_OW 321
47490: PUSH
47491: LD_INT 2
47493: EQUAL
47494: ST_TO_ADDR
47495: GO 47708
47497: LD_INT 28
47499: DOUBLE
47500: EQUAL
47501: IFTRUE 47511
47503: LD_INT 21
47505: DOUBLE
47506: EQUAL
47507: IFTRUE 47511
47509: GO 47536
47511: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47512: LD_ADDR_VAR 0 3
47516: PUSH
47517: LD_INT 21
47519: PPUSH
47520: LD_VAR 0 1
47524: PPUSH
47525: CALL_OW 321
47529: PUSH
47530: LD_INT 2
47532: EQUAL
47533: ST_TO_ADDR
47534: GO 47708
47536: LD_INT 16
47538: DOUBLE
47539: EQUAL
47540: IFTRUE 47544
47542: GO 47569
47544: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47545: LD_ADDR_VAR 0 3
47549: PUSH
47550: LD_INT 84
47552: PPUSH
47553: LD_VAR 0 1
47557: PPUSH
47558: CALL_OW 321
47562: PUSH
47563: LD_INT 2
47565: EQUAL
47566: ST_TO_ADDR
47567: GO 47708
47569: LD_INT 19
47571: DOUBLE
47572: EQUAL
47573: IFTRUE 47583
47575: LD_INT 23
47577: DOUBLE
47578: EQUAL
47579: IFTRUE 47583
47581: GO 47608
47583: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47584: LD_ADDR_VAR 0 3
47588: PUSH
47589: LD_INT 83
47591: PPUSH
47592: LD_VAR 0 1
47596: PPUSH
47597: CALL_OW 321
47601: PUSH
47602: LD_INT 2
47604: EQUAL
47605: ST_TO_ADDR
47606: GO 47708
47608: LD_INT 17
47610: DOUBLE
47611: EQUAL
47612: IFTRUE 47616
47614: GO 47641
47616: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47617: LD_ADDR_VAR 0 3
47621: PUSH
47622: LD_INT 39
47624: PPUSH
47625: LD_VAR 0 1
47629: PPUSH
47630: CALL_OW 321
47634: PUSH
47635: LD_INT 2
47637: EQUAL
47638: ST_TO_ADDR
47639: GO 47708
47641: LD_INT 18
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47649
47647: GO 47674
47649: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47650: LD_ADDR_VAR 0 3
47654: PUSH
47655: LD_INT 40
47657: PPUSH
47658: LD_VAR 0 1
47662: PPUSH
47663: CALL_OW 321
47667: PUSH
47668: LD_INT 2
47670: EQUAL
47671: ST_TO_ADDR
47672: GO 47708
47674: LD_INT 27
47676: DOUBLE
47677: EQUAL
47678: IFTRUE 47682
47680: GO 47707
47682: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47683: LD_ADDR_VAR 0 3
47687: PUSH
47688: LD_INT 35
47690: PPUSH
47691: LD_VAR 0 1
47695: PPUSH
47696: CALL_OW 321
47700: PUSH
47701: LD_INT 2
47703: EQUAL
47704: ST_TO_ADDR
47705: GO 47708
47707: POP
// end ;
47708: LD_VAR 0 3
47712: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47713: LD_INT 0
47715: PPUSH
47716: PPUSH
47717: PPUSH
47718: PPUSH
47719: PPUSH
47720: PPUSH
47721: PPUSH
47722: PPUSH
47723: PPUSH
47724: PPUSH
47725: PPUSH
// result := false ;
47726: LD_ADDR_VAR 0 6
47730: PUSH
47731: LD_INT 0
47733: ST_TO_ADDR
// if btype = b_depot then
47734: LD_VAR 0 2
47738: PUSH
47739: LD_INT 0
47741: EQUAL
47742: IFFALSE 47754
// begin result := true ;
47744: LD_ADDR_VAR 0 6
47748: PUSH
47749: LD_INT 1
47751: ST_TO_ADDR
// exit ;
47752: GO 48580
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47754: LD_VAR 0 1
47758: NOT
47759: PUSH
47760: LD_VAR 0 1
47764: PPUSH
47765: CALL_OW 266
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: IN
47780: NOT
47781: OR
47782: PUSH
47783: LD_VAR 0 2
47787: NOT
47788: OR
47789: PUSH
47790: LD_VAR 0 5
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: LD_INT 4
47809: PUSH
47810: LD_INT 5
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: IN
47821: NOT
47822: OR
47823: PUSH
47824: LD_VAR 0 3
47828: PPUSH
47829: LD_VAR 0 4
47833: PPUSH
47834: CALL_OW 488
47838: NOT
47839: OR
47840: IFFALSE 47844
// exit ;
47842: GO 48580
// side := GetSide ( depot ) ;
47844: LD_ADDR_VAR 0 9
47848: PUSH
47849: LD_VAR 0 1
47853: PPUSH
47854: CALL_OW 255
47858: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47859: LD_VAR 0 9
47863: PPUSH
47864: LD_VAR 0 2
47868: PPUSH
47869: CALL 47337 0 2
47873: NOT
47874: IFFALSE 47878
// exit ;
47876: GO 48580
// pom := GetBase ( depot ) ;
47878: LD_ADDR_VAR 0 10
47882: PUSH
47883: LD_VAR 0 1
47887: PPUSH
47888: CALL_OW 274
47892: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47893: LD_ADDR_VAR 0 11
47897: PUSH
47898: LD_VAR 0 2
47902: PPUSH
47903: LD_VAR 0 1
47907: PPUSH
47908: CALL_OW 248
47912: PPUSH
47913: CALL_OW 450
47917: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47918: LD_VAR 0 10
47922: PPUSH
47923: LD_INT 1
47925: PPUSH
47926: CALL_OW 275
47930: PUSH
47931: LD_VAR 0 11
47935: PUSH
47936: LD_INT 1
47938: ARRAY
47939: GREATEREQUAL
47940: PUSH
47941: LD_VAR 0 10
47945: PPUSH
47946: LD_INT 2
47948: PPUSH
47949: CALL_OW 275
47953: PUSH
47954: LD_VAR 0 11
47958: PUSH
47959: LD_INT 2
47961: ARRAY
47962: GREATEREQUAL
47963: AND
47964: PUSH
47965: LD_VAR 0 10
47969: PPUSH
47970: LD_INT 3
47972: PPUSH
47973: CALL_OW 275
47977: PUSH
47978: LD_VAR 0 11
47982: PUSH
47983: LD_INT 3
47985: ARRAY
47986: GREATEREQUAL
47987: AND
47988: NOT
47989: IFFALSE 47993
// exit ;
47991: GO 48580
// if GetBType ( depot ) = b_depot then
47993: LD_VAR 0 1
47997: PPUSH
47998: CALL_OW 266
48002: PUSH
48003: LD_INT 0
48005: EQUAL
48006: IFFALSE 48018
// dist := 28 else
48008: LD_ADDR_VAR 0 14
48012: PUSH
48013: LD_INT 28
48015: ST_TO_ADDR
48016: GO 48026
// dist := 36 ;
48018: LD_ADDR_VAR 0 14
48022: PUSH
48023: LD_INT 36
48025: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48026: LD_VAR 0 1
48030: PPUSH
48031: LD_VAR 0 3
48035: PPUSH
48036: LD_VAR 0 4
48040: PPUSH
48041: CALL_OW 297
48045: PUSH
48046: LD_VAR 0 14
48050: GREATER
48051: IFFALSE 48055
// exit ;
48053: GO 48580
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48055: LD_ADDR_VAR 0 12
48059: PUSH
48060: LD_VAR 0 2
48064: PPUSH
48065: LD_VAR 0 3
48069: PPUSH
48070: LD_VAR 0 4
48074: PPUSH
48075: LD_VAR 0 5
48079: PPUSH
48080: LD_VAR 0 1
48084: PPUSH
48085: CALL_OW 248
48089: PPUSH
48090: LD_INT 0
48092: PPUSH
48093: CALL 48585 0 6
48097: ST_TO_ADDR
// if not hexes then
48098: LD_VAR 0 12
48102: NOT
48103: IFFALSE 48107
// exit ;
48105: GO 48580
// hex := GetHexInfo ( x , y ) ;
48107: LD_ADDR_VAR 0 15
48111: PUSH
48112: LD_VAR 0 3
48116: PPUSH
48117: LD_VAR 0 4
48121: PPUSH
48122: CALL_OW 546
48126: ST_TO_ADDR
// if hex [ 1 ] then
48127: LD_VAR 0 15
48131: PUSH
48132: LD_INT 1
48134: ARRAY
48135: IFFALSE 48139
// exit ;
48137: GO 48580
// height := hex [ 2 ] ;
48139: LD_ADDR_VAR 0 13
48143: PUSH
48144: LD_VAR 0 15
48148: PUSH
48149: LD_INT 2
48151: ARRAY
48152: ST_TO_ADDR
// for i = 1 to hexes do
48153: LD_ADDR_VAR 0 7
48157: PUSH
48158: DOUBLE
48159: LD_INT 1
48161: DEC
48162: ST_TO_ADDR
48163: LD_VAR 0 12
48167: PUSH
48168: FOR_TO
48169: IFFALSE 48499
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48171: LD_VAR 0 12
48175: PUSH
48176: LD_VAR 0 7
48180: ARRAY
48181: PUSH
48182: LD_INT 1
48184: ARRAY
48185: PPUSH
48186: LD_VAR 0 12
48190: PUSH
48191: LD_VAR 0 7
48195: ARRAY
48196: PUSH
48197: LD_INT 2
48199: ARRAY
48200: PPUSH
48201: CALL_OW 488
48205: NOT
48206: PUSH
48207: LD_VAR 0 12
48211: PUSH
48212: LD_VAR 0 7
48216: ARRAY
48217: PUSH
48218: LD_INT 1
48220: ARRAY
48221: PPUSH
48222: LD_VAR 0 12
48226: PUSH
48227: LD_VAR 0 7
48231: ARRAY
48232: PUSH
48233: LD_INT 2
48235: ARRAY
48236: PPUSH
48237: CALL_OW 428
48241: PUSH
48242: LD_INT 0
48244: GREATER
48245: OR
48246: PUSH
48247: LD_VAR 0 12
48251: PUSH
48252: LD_VAR 0 7
48256: ARRAY
48257: PUSH
48258: LD_INT 1
48260: ARRAY
48261: PPUSH
48262: LD_VAR 0 12
48266: PUSH
48267: LD_VAR 0 7
48271: ARRAY
48272: PUSH
48273: LD_INT 2
48275: ARRAY
48276: PPUSH
48277: CALL_OW 351
48281: OR
48282: IFFALSE 48288
// exit ;
48284: POP
48285: POP
48286: GO 48580
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48288: LD_ADDR_VAR 0 8
48292: PUSH
48293: LD_VAR 0 12
48297: PUSH
48298: LD_VAR 0 7
48302: ARRAY
48303: PUSH
48304: LD_INT 1
48306: ARRAY
48307: PPUSH
48308: LD_VAR 0 12
48312: PUSH
48313: LD_VAR 0 7
48317: ARRAY
48318: PUSH
48319: LD_INT 2
48321: ARRAY
48322: PPUSH
48323: CALL_OW 546
48327: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48328: LD_VAR 0 8
48332: PUSH
48333: LD_INT 1
48335: ARRAY
48336: PUSH
48337: LD_VAR 0 8
48341: PUSH
48342: LD_INT 2
48344: ARRAY
48345: PUSH
48346: LD_VAR 0 13
48350: PUSH
48351: LD_INT 2
48353: PLUS
48354: GREATER
48355: OR
48356: PUSH
48357: LD_VAR 0 8
48361: PUSH
48362: LD_INT 2
48364: ARRAY
48365: PUSH
48366: LD_VAR 0 13
48370: PUSH
48371: LD_INT 2
48373: MINUS
48374: LESS
48375: OR
48376: PUSH
48377: LD_VAR 0 8
48381: PUSH
48382: LD_INT 3
48384: ARRAY
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 8
48391: PUSH
48392: LD_INT 9
48394: PUSH
48395: LD_INT 10
48397: PUSH
48398: LD_INT 11
48400: PUSH
48401: LD_INT 12
48403: PUSH
48404: LD_INT 13
48406: PUSH
48407: LD_INT 16
48409: PUSH
48410: LD_INT 17
48412: PUSH
48413: LD_INT 18
48415: PUSH
48416: LD_INT 19
48418: PUSH
48419: LD_INT 20
48421: PUSH
48422: LD_INT 21
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: IN
48440: NOT
48441: OR
48442: PUSH
48443: LD_VAR 0 8
48447: PUSH
48448: LD_INT 5
48450: ARRAY
48451: NOT
48452: OR
48453: PUSH
48454: LD_VAR 0 8
48458: PUSH
48459: LD_INT 6
48461: ARRAY
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 7
48471: PUSH
48472: LD_INT 9
48474: PUSH
48475: LD_INT 10
48477: PUSH
48478: LD_INT 11
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: IN
48489: NOT
48490: OR
48491: IFFALSE 48497
// exit ;
48493: POP
48494: POP
48495: GO 48580
// end ;
48497: GO 48168
48499: POP
48500: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48501: LD_VAR 0 9
48505: PPUSH
48506: LD_VAR 0 3
48510: PPUSH
48511: LD_VAR 0 4
48515: PPUSH
48516: LD_INT 20
48518: PPUSH
48519: CALL 40503 0 4
48523: PUSH
48524: LD_INT 4
48526: ARRAY
48527: IFFALSE 48531
// exit ;
48529: GO 48580
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48531: LD_VAR 0 2
48535: PUSH
48536: LD_INT 29
48538: PUSH
48539: LD_INT 30
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: IN
48546: PUSH
48547: LD_VAR 0 3
48551: PPUSH
48552: LD_VAR 0 4
48556: PPUSH
48557: LD_VAR 0 9
48561: PPUSH
48562: CALL_OW 440
48566: NOT
48567: AND
48568: IFFALSE 48572
// exit ;
48570: GO 48580
// result := true ;
48572: LD_ADDR_VAR 0 6
48576: PUSH
48577: LD_INT 1
48579: ST_TO_ADDR
// end ;
48580: LD_VAR 0 6
48584: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48585: LD_INT 0
48587: PPUSH
48588: PPUSH
48589: PPUSH
48590: PPUSH
48591: PPUSH
48592: PPUSH
48593: PPUSH
48594: PPUSH
48595: PPUSH
48596: PPUSH
48597: PPUSH
48598: PPUSH
48599: PPUSH
48600: PPUSH
48601: PPUSH
48602: PPUSH
48603: PPUSH
48604: PPUSH
48605: PPUSH
48606: PPUSH
48607: PPUSH
48608: PPUSH
48609: PPUSH
48610: PPUSH
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
48616: PPUSH
48617: PPUSH
48618: PPUSH
48619: PPUSH
48620: PPUSH
48621: PPUSH
48622: PPUSH
48623: PPUSH
48624: PPUSH
48625: PPUSH
48626: PPUSH
48627: PPUSH
48628: PPUSH
48629: PPUSH
48630: PPUSH
48631: PPUSH
48632: PPUSH
48633: PPUSH
48634: PPUSH
48635: PPUSH
48636: PPUSH
48637: PPUSH
48638: PPUSH
48639: PPUSH
48640: PPUSH
48641: PPUSH
48642: PPUSH
48643: PPUSH
48644: PPUSH
// result = [ ] ;
48645: LD_ADDR_VAR 0 7
48649: PUSH
48650: EMPTY
48651: ST_TO_ADDR
// temp_list = [ ] ;
48652: LD_ADDR_VAR 0 9
48656: PUSH
48657: EMPTY
48658: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48659: LD_VAR 0 4
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 3
48675: PUSH
48676: LD_INT 4
48678: PUSH
48679: LD_INT 5
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: IN
48690: NOT
48691: PUSH
48692: LD_VAR 0 1
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: IN
48707: PUSH
48708: LD_VAR 0 5
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 2
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: LIST
48726: IN
48727: NOT
48728: AND
48729: OR
48730: IFFALSE 48734
// exit ;
48732: GO 67125
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48734: LD_VAR 0 1
48738: PUSH
48739: LD_INT 6
48741: PUSH
48742: LD_INT 7
48744: PUSH
48745: LD_INT 8
48747: PUSH
48748: LD_INT 13
48750: PUSH
48751: LD_INT 12
48753: PUSH
48754: LD_INT 15
48756: PUSH
48757: LD_INT 11
48759: PUSH
48760: LD_INT 14
48762: PUSH
48763: LD_INT 10
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: IN
48777: IFFALSE 48787
// btype = b_lab ;
48779: LD_ADDR_VAR 0 1
48783: PUSH
48784: LD_INT 6
48786: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48787: LD_VAR 0 6
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: LIST
48805: IN
48806: NOT
48807: PUSH
48808: LD_VAR 0 1
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 1
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: LD_INT 6
48827: PUSH
48828: LD_INT 36
48830: PUSH
48831: LD_INT 4
48833: PUSH
48834: LD_INT 5
48836: PUSH
48837: LD_INT 31
48839: PUSH
48840: LD_INT 32
48842: PUSH
48843: LD_INT 33
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: IN
48859: NOT
48860: PUSH
48861: LD_VAR 0 6
48865: PUSH
48866: LD_INT 1
48868: EQUAL
48869: AND
48870: OR
48871: PUSH
48872: LD_VAR 0 1
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: IN
48887: NOT
48888: PUSH
48889: LD_VAR 0 6
48893: PUSH
48894: LD_INT 2
48896: EQUAL
48897: AND
48898: OR
48899: IFFALSE 48909
// mode = 0 ;
48901: LD_ADDR_VAR 0 6
48905: PUSH
48906: LD_INT 0
48908: ST_TO_ADDR
// case mode of 0 :
48909: LD_VAR 0 6
48913: PUSH
48914: LD_INT 0
48916: DOUBLE
48917: EQUAL
48918: IFTRUE 48922
48920: GO 60375
48922: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48923: LD_ADDR_VAR 0 11
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: LD_INT 3
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 3
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49116: LD_ADDR_VAR 0 12
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 2
49239: NEG
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 2
49262: NEG
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 3
49273: NEG
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 3
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: NEG
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49312: LD_ADDR_VAR 0 13
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 2
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: LD_INT 2
49451: NEG
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 3
49463: NEG
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: LD_INT 2
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49511: LD_ADDR_VAR 0 14
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: LD_INT 0
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 0
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 2
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 3
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: LD_INT 3
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49707: LD_ADDR_VAR 0 15
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: NEG
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 3
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49900: LD_ADDR_VAR 0 16
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 0
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 2
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 2
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 2
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 1
50027: NEG
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: LD_INT 2
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: PUSH
50048: LD_INT 2
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 3
50057: PUSH
50058: LD_INT 3
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 3
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50093: LD_ADDR_VAR 0 17
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 0
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 1
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 1
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 0
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 1
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 2
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: LD_INT 2
50296: NEG
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50323: LD_ADDR_VAR 0 18
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: LD_INT 2
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: NEG
50511: PUSH
50512: LD_INT 1
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50553: LD_ADDR_VAR 0 19
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 1
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: NEG
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: PUSH
50689: LD_INT 2
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 2
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: LD_INT 2
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50783: LD_ADDR_VAR 0 20
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: LD_INT 1
50803: NEG
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 2
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51013: LD_ADDR_VAR 0 21
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 0
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: LD_INT 1
51033: NEG
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 0
51106: PUSH
51107: LD_INT 2
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: LD_INT 2
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 2
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 1
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 2
51212: NEG
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51243: LD_ADDR_VAR 0 22
51247: PUSH
51248: LD_INT 0
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 0
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 2
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: PUSH
51379: LD_INT 2
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: LD_INT 2
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 0
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 2
51442: NEG
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51473: LD_ADDR_VAR 0 23
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 2
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 2
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 0
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: LD_INT 3
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 3
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 2
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51753: LD_ADDR_VAR 0 24
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 1
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 2
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 1
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 2
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 2
51929: NEG
51930: PUSH
51931: LD_INT 0
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 1
51964: PUSH
51965: LD_INT 2
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52029: LD_ADDR_VAR 0 25
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 1
52057: PUSH
52058: LD_INT 0
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 0
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: NEG
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 2
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 2
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: LD_INT 2
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: LD_INT 2
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: LD_INT 3
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52303: LD_ADDR_VAR 0 26
52307: PUSH
52308: LD_INT 0
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 1
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 2
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: NEG
52491: PUSH
52492: LD_INT 1
52494: NEG
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 2
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52579: LD_ADDR_VAR 0 27
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 0
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 1
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 2
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 2
52801: NEG
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 3
52824: NEG
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52859: LD_ADDR_VAR 0 28
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 2
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 2
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 2
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 2
53070: NEG
53071: PUSH
53072: LD_INT 3
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 3
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 3
53094: NEG
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 3
53106: NEG
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53141: LD_ADDR_VAR 0 29
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 1
53210: NEG
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 1
53222: NEG
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 1
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: LD_INT 1
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: LD_INT 1
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 2
53319: NEG
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 1
53346: NEG
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 3
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 1
53364: PUSH
53365: LD_INT 3
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 3
53385: NEG
53386: PUSH
53387: LD_INT 2
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53420: LD_ADDR_VAR 0 30
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 2
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 2
53516: NEG
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: LD_INT 2
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 2
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 3
53663: NEG
53664: PUSH
53665: LD_INT 1
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53698: LD_ADDR_VAR 0 31
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: EMPTY
53710: LIST
53711: LIST
53712: PUSH
53713: LD_INT 0
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 2
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 0
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: LD_INT 3
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 3
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: LD_INT 3
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: LD_INT 2
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53976: LD_ADDR_VAR 0 32
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 0
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 2
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: NEG
54132: PUSH
54133: LD_INT 1
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 3
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 2
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 3
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54254: LD_ADDR_VAR 0 33
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 1
54335: NEG
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 2
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 3
54467: PUSH
54468: LD_INT 1
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 1
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54533: LD_ADDR_VAR 0 34
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 2
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 2
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 1
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 2
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: LD_INT 3
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: LD_INT 1
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54813: LD_ADDR_VAR 0 35
54817: PUSH
54818: LD_INT 0
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 1
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 1
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: LD_INT 1
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 1
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54925: LD_ADDR_VAR 0 36
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55037: LD_ADDR_VAR 0 37
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 1
55129: NEG
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55149: LD_ADDR_VAR 0 38
55153: PUSH
55154: LD_INT 0
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: PUSH
55231: LD_INT 1
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55261: LD_ADDR_VAR 0 39
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55373: LD_ADDR_VAR 0 40
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55485: LD_ADDR_VAR 0 41
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 1
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 2
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 2
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 2
55640: NEG
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 2
55675: NEG
55676: PUSH
55677: LD_INT 3
55679: NEG
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 3
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 3
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 3
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: NEG
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: NEG
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 3
55794: NEG
55795: PUSH
55796: LD_INT 3
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55835: LD_ADDR_VAR 0 42
55839: PUSH
55840: LD_INT 0
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 1
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 2
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 2
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: LD_INT 2
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 2
56001: NEG
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 2
56013: NEG
56014: PUSH
56015: LD_INT 2
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: LD_INT 3
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 3
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 3
56071: PUSH
56072: LD_INT 2
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: LD_INT 3
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: LD_INT 3
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: PUSH
56102: LD_INT 3
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 3
56144: NEG
56145: PUSH
56146: LD_INT 3
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56185: LD_ADDR_VAR 0 43
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 1
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 2
56351: NEG
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: NEG
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: LD_INT 3
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 3
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 3
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 0
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 3
56492: NEG
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56533: LD_ADDR_VAR 0 44
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 1
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: LD_INT 1
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 0
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 2
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 1
56677: NEG
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: NEG
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: NEG
56712: PUSH
56713: LD_INT 2
56715: NEG
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: LD_INT 3
56727: NEG
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 2
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 0
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 3
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 3
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: NEG
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 3
56807: NEG
56808: PUSH
56809: LD_INT 0
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 3
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 3
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56883: LD_ADDR_VAR 0 45
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 0
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 1
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 1
56941: NEG
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 1
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 2
57008: PUSH
57009: LD_INT 2
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: PUSH
57019: LD_INT 2
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 2
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: LD_INT 3
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: LD_INT 3
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 3
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: LD_INT 3
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57233: LD_ADDR_VAR 0 46
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 1
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 1
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: NEG
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 1
57314: NEG
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: LD_INT 3
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 3
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 1
57445: PUSH
57446: LD_INT 2
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 3
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 3
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 3
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 3
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 3
57529: NEG
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 3
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57581: LD_ADDR_VAR 0 47
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 1
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 2
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 2
57708: NEG
57709: PUSH
57710: LD_INT 2
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57732: LD_ADDR_VAR 0 48
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: NEG
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: PUSH
57837: LD_INT 1
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57879: LD_ADDR_VAR 0 49
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 1
57907: PUSH
57908: LD_INT 0
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 0
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: NEG
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: LD_INT 1
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: LD_INT 1
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58023: LD_ADDR_VAR 0 50
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 1
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: LD_INT 2
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58167: LD_ADDR_VAR 0 51
58171: PUSH
58172: LD_INT 0
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 2
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 2
58279: NEG
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 2
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58314: LD_ADDR_VAR 0 52
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 1
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 1
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 1
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 2
58418: NEG
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 2
58441: NEG
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58465: LD_ADDR_VAR 0 53
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 2
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 2
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: LD_INT 1
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: LD_INT 2
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58695: LD_ADDR_VAR 0 54
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: LD_INT 0
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: LD_INT 1
58715: NEG
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: LD_INT 0
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 1
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 2
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 2
58820: PUSH
58821: LD_INT 1
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 2
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: LD_INT 2
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: NEG
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 2
58894: NEG
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58925: LD_ADDR_VAR 0 55
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 1
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 1
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: NEG
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 2
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 2
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 0
59080: PUSH
59081: LD_INT 2
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: NEG
59102: PUSH
59103: LD_INT 0
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: LD_INT 2
59128: NEG
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59155: LD_ADDR_VAR 0 56
59159: PUSH
59160: LD_INT 0
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 2
59270: PUSH
59271: LD_INT 0
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: NEG
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: LD_INT 2
59358: NEG
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59385: LD_ADDR_VAR 0 57
59389: PUSH
59390: LD_INT 0
59392: PUSH
59393: LD_INT 0
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 1
59405: NEG
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 1
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: NEG
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 1
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 1
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: PUSH
59521: LD_INT 2
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 1
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 0
59540: PUSH
59541: LD_INT 2
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: LD_INT 2
59588: NEG
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59615: LD_ADDR_VAR 0 58
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 1
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 2
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 2
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: LD_INT 2
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59845: LD_ADDR_VAR 0 59
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 1
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59933: LD_ADDR_VAR 0 60
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 0
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 1
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 1
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: NEG
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: NEG
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60021: LD_ADDR_VAR 0 61
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: LD_INT 1
60041: NEG
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 1
60049: PUSH
60050: LD_INT 0
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 1
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 1
60090: NEG
60091: PUSH
60092: LD_INT 1
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60109: LD_ADDR_VAR 0 62
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: LD_INT 1
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: LD_INT 0
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: NEG
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60197: LD_ADDR_VAR 0 63
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 0
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 1
60235: PUSH
60236: LD_INT 1
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: LD_INT 1
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: NEG
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60285: LD_ADDR_VAR 0 64
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 0
60302: PUSH
60303: LD_INT 1
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 1
60313: PUSH
60314: LD_INT 0
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 1
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: NEG
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: LD_INT 1
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: ST_TO_ADDR
// end ; 1 :
60373: GO 66270
60375: LD_INT 1
60377: DOUBLE
60378: EQUAL
60379: IFTRUE 60383
60381: GO 63006
60383: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60384: LD_ADDR_VAR 0 11
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: LD_INT 3
60395: NEG
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 0
60403: PUSH
60404: LD_INT 3
60406: NEG
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 1
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60428: LD_ADDR_VAR 0 12
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: LD_INT 0
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 3
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60469: LD_ADDR_VAR 0 13
60473: PUSH
60474: LD_INT 3
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 3
60486: PUSH
60487: LD_INT 3
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: LD_INT 2
60496: PUSH
60497: LD_INT 3
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60509: LD_ADDR_VAR 0 14
60513: PUSH
60514: LD_INT 1
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 3
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: LIST
60549: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60550: LD_ADDR_VAR 0 15
60554: PUSH
60555: LD_INT 2
60557: NEG
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 1
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60594: LD_ADDR_VAR 0 16
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 3
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 3
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 3
60625: NEG
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: LIST
60639: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60640: LD_ADDR_VAR 0 17
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: LD_INT 3
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 0
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60684: LD_ADDR_VAR 0 18
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 3
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60725: LD_ADDR_VAR 0 19
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 3
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: LD_INT 3
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60765: LD_ADDR_VAR 0 20
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: LD_INT 3
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 0
60782: PUSH
60783: LD_INT 3
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 1
60792: NEG
60793: PUSH
60794: LD_INT 2
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: LIST
60805: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60806: LD_ADDR_VAR 0 21
60810: PUSH
60811: LD_INT 2
60813: NEG
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: NEG
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: LIST
60849: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60850: LD_ADDR_VAR 0 22
60854: PUSH
60855: LD_INT 2
60857: NEG
60858: PUSH
60859: LD_INT 3
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: LD_INT 2
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: LD_INT 3
60885: NEG
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: LIST
60895: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60896: LD_ADDR_VAR 0 23
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: LD_INT 3
60906: NEG
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 4
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: LD_INT 3
60929: NEG
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60940: LD_ADDR_VAR 0 24
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 4
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: LIST
60980: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60981: LD_ADDR_VAR 0 25
60985: PUSH
60986: LD_INT 3
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 4
60998: PUSH
60999: LD_INT 3
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61021: LD_ADDR_VAR 0 26
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 3
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 1
61038: PUSH
61039: LD_INT 4
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: NEG
61049: PUSH
61050: LD_INT 3
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61062: LD_ADDR_VAR 0 27
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: LIST
61105: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61106: LD_ADDR_VAR 0 28
61110: PUSH
61111: LD_INT 3
61113: NEG
61114: PUSH
61115: LD_INT 3
61117: NEG
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 4
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 4
61137: NEG
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61152: LD_ADDR_VAR 0 29
61156: PUSH
61157: LD_INT 1
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 2
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 1
61193: NEG
61194: PUSH
61195: LD_INT 4
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 0
61205: PUSH
61206: LD_INT 4
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: LD_INT 5
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 5
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 1
61250: PUSH
61251: LD_INT 4
61253: NEG
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: LD_INT 6
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 6
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 5
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61307: LD_ADDR_VAR 0 30
61311: PUSH
61312: LD_INT 2
61314: PUSH
61315: LD_INT 1
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 3
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 3
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 3
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 4
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: LD_INT 1
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 4
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 5
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 5
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 5
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 6
61418: PUSH
61419: LD_INT 0
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 6
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61450: LD_ADDR_VAR 0 31
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: LD_INT 2
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 4
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 4
61497: PUSH
61498: LD_INT 4
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 3
61507: PUSH
61508: LD_INT 4
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 5
61517: PUSH
61518: LD_INT 4
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 5
61527: PUSH
61528: LD_INT 5
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: PUSH
61538: LD_INT 5
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 6
61547: PUSH
61548: LD_INT 5
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 6
61557: PUSH
61558: LD_INT 6
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 5
61567: PUSH
61568: LD_INT 6
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61589: LD_ADDR_VAR 0 32
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 3
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 0
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 1
61627: PUSH
61628: LD_INT 4
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: LD_INT 4
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 1
61647: NEG
61648: PUSH
61649: LD_INT 3
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: PUSH
61659: LD_INT 5
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: LD_INT 5
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: NEG
61679: PUSH
61680: LD_INT 4
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: PUSH
61690: LD_INT 6
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 6
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 5
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61732: LD_ADDR_VAR 0 33
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: LD_INT 1
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: NEG
61751: PUSH
61752: LD_INT 0
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 4
61784: NEG
61785: PUSH
61786: LD_INT 0
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 4
61795: NEG
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 4
61807: NEG
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 5
61818: NEG
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 5
61829: NEG
61830: PUSH
61831: LD_INT 1
61833: NEG
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 5
61841: NEG
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 6
61852: NEG
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 6
61863: NEG
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61887: LD_ADDR_VAR 0 34
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 3
61906: NEG
61907: PUSH
61908: LD_INT 2
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 3
61918: NEG
61919: PUSH
61920: LD_INT 3
61922: NEG
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: NEG
61931: PUSH
61932: LD_INT 4
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: LD_INT 3
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 4
61954: NEG
61955: PUSH
61956: LD_INT 4
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: NEG
61967: PUSH
61968: LD_INT 5
61970: NEG
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 5
61978: NEG
61979: PUSH
61980: LD_INT 4
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 5
61990: NEG
61991: PUSH
61992: LD_INT 5
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 5
62002: NEG
62003: PUSH
62004: LD_INT 6
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 6
62014: NEG
62015: PUSH
62016: LD_INT 5
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 6
62026: NEG
62027: PUSH
62028: LD_INT 6
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62050: LD_ADDR_VAR 0 41
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: LD_INT 2
62060: NEG
62061: PUSH
62062: EMPTY
62063: LIST
62064: LIST
62065: PUSH
62066: LD_INT 1
62068: NEG
62069: PUSH
62070: LD_INT 3
62072: NEG
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: LD_INT 2
62083: NEG
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: LIST
62093: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62094: LD_ADDR_VAR 0 42
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: LD_INT 0
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 2
62111: PUSH
62112: LD_INT 1
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: LD_INT 1
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: EMPTY
62131: LIST
62132: LIST
62133: LIST
62134: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62135: LD_ADDR_VAR 0 43
62139: PUSH
62140: LD_INT 2
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 3
62152: PUSH
62153: LD_INT 2
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 3
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: EMPTY
62171: LIST
62172: LIST
62173: LIST
62174: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62175: LD_ADDR_VAR 0 44
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 1
62192: PUSH
62193: LD_INT 3
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 2
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: LIST
62215: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62216: LD_ADDR_VAR 0 45
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: LD_INT 0
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: LD_INT 1
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 3
62245: NEG
62246: PUSH
62247: LD_INT 1
62249: NEG
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62260: LD_ADDR_VAR 0 46
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: LD_INT 2
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: NEG
62280: PUSH
62281: LD_INT 3
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: NEG
62292: PUSH
62293: LD_INT 2
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62306: LD_ADDR_VAR 0 47
62310: PUSH
62311: LD_INT 2
62313: NEG
62314: PUSH
62315: LD_INT 3
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: LD_INT 3
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62339: LD_ADDR_VAR 0 48
62343: PUSH
62344: LD_INT 1
62346: PUSH
62347: LD_INT 2
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62370: LD_ADDR_VAR 0 49
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: LD_INT 1
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 3
62387: PUSH
62388: LD_INT 2
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62399: LD_ADDR_VAR 0 50
62403: PUSH
62404: LD_INT 2
62406: PUSH
62407: LD_INT 3
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: LD_INT 3
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62428: LD_ADDR_VAR 0 51
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 2
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62459: LD_ADDR_VAR 0 52
62463: PUSH
62464: LD_INT 3
62466: NEG
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 3
62478: NEG
62479: PUSH
62480: LD_INT 2
62482: NEG
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62492: LD_ADDR_VAR 0 53
62496: PUSH
62497: LD_INT 1
62499: NEG
62500: PUSH
62501: LD_INT 3
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 1
62522: PUSH
62523: LD_INT 2
62525: NEG
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62536: LD_ADDR_VAR 0 54
62540: PUSH
62541: LD_INT 2
62543: PUSH
62544: LD_INT 1
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: LD_INT 1
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62577: LD_ADDR_VAR 0 55
62581: PUSH
62582: LD_INT 3
62584: PUSH
62585: LD_INT 2
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: LD_INT 3
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62617: LD_ADDR_VAR 0 56
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 0
62634: PUSH
62635: LD_INT 3
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: NEG
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: LIST
62657: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62658: LD_ADDR_VAR 0 57
62662: PUSH
62663: LD_INT 2
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 3
62687: NEG
62688: PUSH
62689: LD_INT 1
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: LIST
62701: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62702: LD_ADDR_VAR 0 58
62706: PUSH
62707: LD_INT 2
62709: NEG
62710: PUSH
62711: LD_INT 3
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 3
62721: NEG
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 3
62733: NEG
62734: PUSH
62735: LD_INT 3
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: LIST
62747: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62748: LD_ADDR_VAR 0 59
62752: PUSH
62753: LD_INT 1
62755: NEG
62756: PUSH
62757: LD_INT 2
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 1
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62792: LD_ADDR_VAR 0 60
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: LD_INT 1
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: LIST
62832: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62833: LD_ADDR_VAR 0 61
62837: PUSH
62838: LD_INT 2
62840: PUSH
62841: LD_INT 1
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: LD_INT 2
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62873: LD_ADDR_VAR 0 62
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: LIST
62913: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62914: LD_ADDR_VAR 0 63
62918: PUSH
62919: LD_INT 1
62921: NEG
62922: PUSH
62923: LD_INT 1
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 2
62932: NEG
62933: PUSH
62934: LD_INT 0
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 2
62943: NEG
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: LIST
62957: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62958: LD_ADDR_VAR 0 64
62962: PUSH
62963: LD_INT 1
62965: NEG
62966: PUSH
62967: LD_INT 2
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: LD_INT 2
62993: NEG
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: ST_TO_ADDR
// end ; 2 :
63004: GO 66270
63006: LD_INT 2
63008: DOUBLE
63009: EQUAL
63010: IFTRUE 63014
63012: GO 66269
63014: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63015: LD_ADDR_VAR 0 29
63019: PUSH
63020: LD_INT 4
63022: PUSH
63023: LD_INT 0
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 4
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 5
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 5
63053: PUSH
63054: LD_INT 1
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 4
63063: PUSH
63064: LD_INT 1
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 3
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 3
63083: PUSH
63084: LD_INT 1
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 3
63094: PUSH
63095: LD_INT 2
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 5
63105: PUSH
63106: LD_INT 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 3
63125: PUSH
63126: LD_INT 2
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 4
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 4
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: LD_INT 4
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 2
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 2
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 4
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 2
63195: PUSH
63196: LD_INT 4
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 4
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 3
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: LD_INT 4
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: LD_INT 5
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 0
63245: PUSH
63246: LD_INT 5
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: LD_INT 4
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 1
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 2
63277: PUSH
63278: LD_INT 5
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 3
63298: NEG
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 3
63309: NEG
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: NEG
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 3
63343: NEG
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 4
63354: NEG
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 4
63365: NEG
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 4
63377: NEG
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: LD_INT 2
63389: NEG
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 4
63400: NEG
63401: PUSH
63402: LD_INT 4
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 4
63412: NEG
63413: PUSH
63414: LD_INT 5
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 3
63424: NEG
63425: PUSH
63426: LD_INT 4
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 3
63436: NEG
63437: PUSH
63438: LD_INT 3
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 4
63448: NEG
63449: PUSH
63450: LD_INT 3
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 5
63460: NEG
63461: PUSH
63462: LD_INT 4
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 5
63472: NEG
63473: PUSH
63474: LD_INT 5
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 3
63484: NEG
63485: PUSH
63486: LD_INT 5
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 5
63496: NEG
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63553: LD_ADDR_VAR 0 30
63557: PUSH
63558: LD_INT 4
63560: PUSH
63561: LD_INT 4
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 4
63570: PUSH
63571: LD_INT 3
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 5
63580: PUSH
63581: LD_INT 4
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 5
63590: PUSH
63591: LD_INT 5
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 4
63600: PUSH
63601: LD_INT 5
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 3
63620: PUSH
63621: LD_INT 3
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 5
63630: PUSH
63631: LD_INT 3
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 3
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 3
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 2
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: LD_INT 4
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 4
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 1
63700: NEG
63701: PUSH
63702: LD_INT 3
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 1
63711: NEG
63712: PUSH
63713: LD_INT 2
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: PUSH
63720: LD_INT 2
63722: PUSH
63723: LD_INT 4
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 4
63743: NEG
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 4
63754: NEG
63755: PUSH
63756: LD_INT 1
63758: NEG
63759: PUSH
63760: EMPTY
63761: LIST
63762: LIST
63763: PUSH
63764: LD_INT 3
63766: NEG
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 3
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 4
63788: NEG
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 5
63799: NEG
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 5
63810: NEG
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 5
63822: NEG
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 3
63834: NEG
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 3
63845: NEG
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 3
63857: NEG
63858: PUSH
63859: LD_INT 4
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: LD_INT 3
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: NEG
63882: PUSH
63883: LD_INT 2
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 3
63893: NEG
63894: PUSH
63895: LD_INT 2
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 4
63905: NEG
63906: PUSH
63907: LD_INT 3
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 4
63917: NEG
63918: PUSH
63919: LD_INT 4
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 2
63929: NEG
63930: PUSH
63931: LD_INT 4
63933: NEG
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: PUSH
63939: LD_INT 4
63941: NEG
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 4
63956: NEG
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: LD_INT 0
63964: PUSH
63965: LD_INT 5
63967: NEG
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 1
63975: PUSH
63976: LD_INT 4
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: LD_INT 3
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: LD_INT 3
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: LD_INT 4
64012: NEG
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: LD_INT 5
64024: NEG
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: LD_INT 3
64035: NEG
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: PUSH
64041: LD_INT 2
64043: NEG
64044: PUSH
64045: LD_INT 5
64047: NEG
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64100: LD_ADDR_VAR 0 31
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 4
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 0
64117: PUSH
64118: LD_INT 3
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: LD_INT 4
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 5
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: LD_INT 5
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: LD_INT 4
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 3
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: LD_INT 5
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 3
64200: NEG
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 3
64211: NEG
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 2
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 2
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 3
64245: NEG
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 4
64256: NEG
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 4
64267: NEG
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 4
64279: NEG
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 2
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 4
64302: NEG
64303: PUSH
64304: LD_INT 4
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 4
64314: NEG
64315: PUSH
64316: LD_INT 5
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 3
64326: NEG
64327: PUSH
64328: LD_INT 4
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 3
64338: NEG
64339: PUSH
64340: LD_INT 3
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 4
64350: NEG
64351: PUSH
64352: LD_INT 3
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 5
64362: NEG
64363: PUSH
64364: LD_INT 4
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 5
64374: NEG
64375: PUSH
64376: LD_INT 5
64378: NEG
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: LD_INT 5
64390: NEG
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 5
64398: NEG
64399: PUSH
64400: LD_INT 3
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: LD_INT 3
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 0
64421: PUSH
64422: LD_INT 4
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 3
64435: NEG
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 1
64443: PUSH
64444: LD_INT 2
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: LD_INT 2
64457: NEG
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 1
64465: NEG
64466: PUSH
64467: LD_INT 3
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: LD_INT 4
64481: NEG
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: LD_INT 2
64492: NEG
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 2
64500: NEG
64501: PUSH
64502: LD_INT 4
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 4
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 4
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 5
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 5
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 4
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 3
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: PUSH
64574: LD_INT 1
64576: NEG
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 3
64584: PUSH
64585: LD_INT 2
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 5
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: LIST
64631: LIST
64632: LIST
64633: LIST
64634: LIST
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64650: LD_ADDR_VAR 0 32
64654: PUSH
64655: LD_INT 4
64657: NEG
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 4
64668: NEG
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 3
64680: NEG
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 3
64691: NEG
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 4
64702: NEG
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 5
64713: NEG
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 5
64724: NEG
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 5
64736: NEG
64737: PUSH
64738: LD_INT 2
64740: NEG
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: PUSH
64746: LD_INT 3
64748: NEG
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: LD_INT 4
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 2
64783: NEG
64784: PUSH
64785: LD_INT 3
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 2
64795: NEG
64796: PUSH
64797: LD_INT 2
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 3
64807: NEG
64808: PUSH
64809: LD_INT 2
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 4
64819: NEG
64820: PUSH
64821: LD_INT 3
64823: NEG
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 4
64831: NEG
64832: PUSH
64833: LD_INT 4
64835: NEG
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: LD_INT 4
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: LD_INT 4
64855: NEG
64856: PUSH
64857: LD_INT 2
64859: NEG
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: PUSH
64865: LD_INT 0
64867: PUSH
64868: LD_INT 4
64870: NEG
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 5
64881: NEG
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 4
64892: NEG
64893: PUSH
64894: EMPTY
64895: LIST
64896: LIST
64897: PUSH
64898: LD_INT 1
64900: PUSH
64901: LD_INT 3
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 0
64911: PUSH
64912: LD_INT 3
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: LD_INT 4
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 1
64934: NEG
64935: PUSH
64936: LD_INT 5
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: LD_INT 3
64949: NEG
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 2
64957: NEG
64958: PUSH
64959: LD_INT 5
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 3
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 3
64979: PUSH
64980: LD_INT 1
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 4
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 4
65000: PUSH
65001: LD_INT 1
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 2
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: EMPTY
65025: LIST
65026: LIST
65027: PUSH
65028: LD_INT 2
65030: PUSH
65031: LD_INT 1
65033: NEG
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 2
65044: NEG
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 4
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 4
65062: PUSH
65063: LD_INT 4
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: LD_INT 3
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 5
65082: PUSH
65083: LD_INT 4
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 5
65092: PUSH
65093: LD_INT 5
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 4
65102: PUSH
65103: LD_INT 5
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 3
65112: PUSH
65113: LD_INT 4
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 3
65122: PUSH
65123: LD_INT 3
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 5
65132: PUSH
65133: LD_INT 3
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: LD_INT 5
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: LIST
65165: LIST
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65197: LD_ADDR_VAR 0 33
65201: PUSH
65202: LD_INT 4
65204: NEG
65205: PUSH
65206: LD_INT 4
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 4
65216: NEG
65217: PUSH
65218: LD_INT 5
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: LD_INT 3
65228: NEG
65229: PUSH
65230: LD_INT 4
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 3
65240: NEG
65241: PUSH
65242: LD_INT 3
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 4
65252: NEG
65253: PUSH
65254: LD_INT 3
65256: NEG
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 5
65264: NEG
65265: PUSH
65266: LD_INT 4
65268: NEG
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 5
65276: NEG
65277: PUSH
65278: LD_INT 5
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 3
65288: NEG
65289: PUSH
65290: LD_INT 5
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 5
65300: NEG
65301: PUSH
65302: LD_INT 3
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: LD_INT 3
65315: NEG
65316: PUSH
65317: EMPTY
65318: LIST
65319: LIST
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: LD_INT 4
65326: NEG
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 1
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 1
65345: PUSH
65346: LD_INT 2
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: LD_INT 2
65359: NEG
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 1
65367: NEG
65368: PUSH
65369: LD_INT 3
65371: NEG
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: LD_INT 4
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 2
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: NEG
65403: PUSH
65404: LD_INT 4
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 4
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 5
65435: PUSH
65436: LD_INT 0
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 5
65445: PUSH
65446: LD_INT 1
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: LD_INT 1
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 3
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 3
65475: PUSH
65476: LD_INT 1
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 3
65486: PUSH
65487: LD_INT 2
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 5
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 3
65507: PUSH
65508: LD_INT 3
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 3
65517: PUSH
65518: LD_INT 2
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 4
65527: PUSH
65528: LD_INT 3
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 4
65537: PUSH
65538: LD_INT 4
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 3
65547: PUSH
65548: LD_INT 4
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 2
65567: PUSH
65568: LD_INT 2
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: PUSH
65575: LD_INT 4
65577: PUSH
65578: LD_INT 2
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: LD_INT 4
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 4
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 3
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: LD_INT 4
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 5
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 0
65637: PUSH
65638: LD_INT 5
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: NEG
65648: PUSH
65649: LD_INT 4
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 3
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: PUSH
65670: LD_INT 5
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 2
65679: NEG
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65735: LD_ADDR_VAR 0 34
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: LD_INT 4
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 5
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: LD_INT 1
65764: PUSH
65765: LD_INT 4
65767: NEG
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: LD_INT 1
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 1
65797: NEG
65798: PUSH
65799: LD_INT 4
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 1
65809: NEG
65810: PUSH
65811: LD_INT 5
65813: NEG
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: LD_INT 3
65824: NEG
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: NEG
65833: PUSH
65834: LD_INT 5
65836: NEG
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 3
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 3
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 4
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 4
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 3
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 2
65916: PUSH
65917: LD_INT 2
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 4
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 4
65937: PUSH
65938: LD_INT 4
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: LD_INT 4
65947: PUSH
65948: LD_INT 3
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 5
65957: PUSH
65958: LD_INT 4
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 5
65967: PUSH
65968: LD_INT 5
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 4
65977: PUSH
65978: LD_INT 5
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 3
65987: PUSH
65988: LD_INT 4
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 3
65997: PUSH
65998: LD_INT 3
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 5
66007: PUSH
66008: LD_INT 3
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: LD_INT 5
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 0
66027: PUSH
66028: LD_INT 3
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 3
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: LD_INT 4
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_INT 4
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 1
66077: NEG
66078: PUSH
66079: LD_INT 3
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: LD_INT 2
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 4
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 4
66120: NEG
66121: PUSH
66122: LD_INT 0
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 4
66131: NEG
66132: PUSH
66133: LD_INT 1
66135: NEG
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 3
66143: NEG
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 3
66154: NEG
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 4
66165: NEG
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 5
66176: NEG
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 5
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 5
66199: NEG
66200: PUSH
66201: LD_INT 2
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: NEG
66212: PUSH
66213: LD_INT 2
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: LIST
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: ST_TO_ADDR
// end ; end ;
66267: GO 66270
66269: POP
// case btype of b_depot , b_warehouse :
66270: LD_VAR 0 1
66274: PUSH
66275: LD_INT 0
66277: DOUBLE
66278: EQUAL
66279: IFTRUE 66289
66281: LD_INT 1
66283: DOUBLE
66284: EQUAL
66285: IFTRUE 66289
66287: GO 66490
66289: POP
// case nation of nation_american :
66290: LD_VAR 0 5
66294: PUSH
66295: LD_INT 1
66297: DOUBLE
66298: EQUAL
66299: IFTRUE 66303
66301: GO 66359
66303: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66304: LD_ADDR_VAR 0 9
66308: PUSH
66309: LD_VAR 0 11
66313: PUSH
66314: LD_VAR 0 12
66318: PUSH
66319: LD_VAR 0 13
66323: PUSH
66324: LD_VAR 0 14
66328: PUSH
66329: LD_VAR 0 15
66333: PUSH
66334: LD_VAR 0 16
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: PUSH
66347: LD_VAR 0 4
66351: PUSH
66352: LD_INT 1
66354: PLUS
66355: ARRAY
66356: ST_TO_ADDR
66357: GO 66488
66359: LD_INT 2
66361: DOUBLE
66362: EQUAL
66363: IFTRUE 66367
66365: GO 66423
66367: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66368: LD_ADDR_VAR 0 9
66372: PUSH
66373: LD_VAR 0 17
66377: PUSH
66378: LD_VAR 0 18
66382: PUSH
66383: LD_VAR 0 19
66387: PUSH
66388: LD_VAR 0 20
66392: PUSH
66393: LD_VAR 0 21
66397: PUSH
66398: LD_VAR 0 22
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 4
66415: PUSH
66416: LD_INT 1
66418: PLUS
66419: ARRAY
66420: ST_TO_ADDR
66421: GO 66488
66423: LD_INT 3
66425: DOUBLE
66426: EQUAL
66427: IFTRUE 66431
66429: GO 66487
66431: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66432: LD_ADDR_VAR 0 9
66436: PUSH
66437: LD_VAR 0 23
66441: PUSH
66442: LD_VAR 0 24
66446: PUSH
66447: LD_VAR 0 25
66451: PUSH
66452: LD_VAR 0 26
66456: PUSH
66457: LD_VAR 0 27
66461: PUSH
66462: LD_VAR 0 28
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: PUSH
66475: LD_VAR 0 4
66479: PUSH
66480: LD_INT 1
66482: PLUS
66483: ARRAY
66484: ST_TO_ADDR
66485: GO 66488
66487: POP
66488: GO 67043
66490: LD_INT 2
66492: DOUBLE
66493: EQUAL
66494: IFTRUE 66504
66496: LD_INT 3
66498: DOUBLE
66499: EQUAL
66500: IFTRUE 66504
66502: GO 66560
66504: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66505: LD_ADDR_VAR 0 9
66509: PUSH
66510: LD_VAR 0 29
66514: PUSH
66515: LD_VAR 0 30
66519: PUSH
66520: LD_VAR 0 31
66524: PUSH
66525: LD_VAR 0 32
66529: PUSH
66530: LD_VAR 0 33
66534: PUSH
66535: LD_VAR 0 34
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: LIST
66544: LIST
66545: LIST
66546: LIST
66547: PUSH
66548: LD_VAR 0 4
66552: PUSH
66553: LD_INT 1
66555: PLUS
66556: ARRAY
66557: ST_TO_ADDR
66558: GO 67043
66560: LD_INT 16
66562: DOUBLE
66563: EQUAL
66564: IFTRUE 66622
66566: LD_INT 17
66568: DOUBLE
66569: EQUAL
66570: IFTRUE 66622
66572: LD_INT 18
66574: DOUBLE
66575: EQUAL
66576: IFTRUE 66622
66578: LD_INT 19
66580: DOUBLE
66581: EQUAL
66582: IFTRUE 66622
66584: LD_INT 22
66586: DOUBLE
66587: EQUAL
66588: IFTRUE 66622
66590: LD_INT 20
66592: DOUBLE
66593: EQUAL
66594: IFTRUE 66622
66596: LD_INT 21
66598: DOUBLE
66599: EQUAL
66600: IFTRUE 66622
66602: LD_INT 23
66604: DOUBLE
66605: EQUAL
66606: IFTRUE 66622
66608: LD_INT 24
66610: DOUBLE
66611: EQUAL
66612: IFTRUE 66622
66614: LD_INT 25
66616: DOUBLE
66617: EQUAL
66618: IFTRUE 66622
66620: GO 66678
66622: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66623: LD_ADDR_VAR 0 9
66627: PUSH
66628: LD_VAR 0 35
66632: PUSH
66633: LD_VAR 0 36
66637: PUSH
66638: LD_VAR 0 37
66642: PUSH
66643: LD_VAR 0 38
66647: PUSH
66648: LD_VAR 0 39
66652: PUSH
66653: LD_VAR 0 40
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: PUSH
66666: LD_VAR 0 4
66670: PUSH
66671: LD_INT 1
66673: PLUS
66674: ARRAY
66675: ST_TO_ADDR
66676: GO 67043
66678: LD_INT 6
66680: DOUBLE
66681: EQUAL
66682: IFTRUE 66734
66684: LD_INT 7
66686: DOUBLE
66687: EQUAL
66688: IFTRUE 66734
66690: LD_INT 8
66692: DOUBLE
66693: EQUAL
66694: IFTRUE 66734
66696: LD_INT 13
66698: DOUBLE
66699: EQUAL
66700: IFTRUE 66734
66702: LD_INT 12
66704: DOUBLE
66705: EQUAL
66706: IFTRUE 66734
66708: LD_INT 15
66710: DOUBLE
66711: EQUAL
66712: IFTRUE 66734
66714: LD_INT 11
66716: DOUBLE
66717: EQUAL
66718: IFTRUE 66734
66720: LD_INT 14
66722: DOUBLE
66723: EQUAL
66724: IFTRUE 66734
66726: LD_INT 10
66728: DOUBLE
66729: EQUAL
66730: IFTRUE 66734
66732: GO 66790
66734: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66735: LD_ADDR_VAR 0 9
66739: PUSH
66740: LD_VAR 0 41
66744: PUSH
66745: LD_VAR 0 42
66749: PUSH
66750: LD_VAR 0 43
66754: PUSH
66755: LD_VAR 0 44
66759: PUSH
66760: LD_VAR 0 45
66764: PUSH
66765: LD_VAR 0 46
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: PUSH
66778: LD_VAR 0 4
66782: PUSH
66783: LD_INT 1
66785: PLUS
66786: ARRAY
66787: ST_TO_ADDR
66788: GO 67043
66790: LD_INT 36
66792: DOUBLE
66793: EQUAL
66794: IFTRUE 66798
66796: GO 66854
66798: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66799: LD_ADDR_VAR 0 9
66803: PUSH
66804: LD_VAR 0 47
66808: PUSH
66809: LD_VAR 0 48
66813: PUSH
66814: LD_VAR 0 49
66818: PUSH
66819: LD_VAR 0 50
66823: PUSH
66824: LD_VAR 0 51
66828: PUSH
66829: LD_VAR 0 52
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: PUSH
66842: LD_VAR 0 4
66846: PUSH
66847: LD_INT 1
66849: PLUS
66850: ARRAY
66851: ST_TO_ADDR
66852: GO 67043
66854: LD_INT 4
66856: DOUBLE
66857: EQUAL
66858: IFTRUE 66880
66860: LD_INT 5
66862: DOUBLE
66863: EQUAL
66864: IFTRUE 66880
66866: LD_INT 34
66868: DOUBLE
66869: EQUAL
66870: IFTRUE 66880
66872: LD_INT 37
66874: DOUBLE
66875: EQUAL
66876: IFTRUE 66880
66878: GO 66936
66880: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66881: LD_ADDR_VAR 0 9
66885: PUSH
66886: LD_VAR 0 53
66890: PUSH
66891: LD_VAR 0 54
66895: PUSH
66896: LD_VAR 0 55
66900: PUSH
66901: LD_VAR 0 56
66905: PUSH
66906: LD_VAR 0 57
66910: PUSH
66911: LD_VAR 0 58
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: PUSH
66924: LD_VAR 0 4
66928: PUSH
66929: LD_INT 1
66931: PLUS
66932: ARRAY
66933: ST_TO_ADDR
66934: GO 67043
66936: LD_INT 31
66938: DOUBLE
66939: EQUAL
66940: IFTRUE 66986
66942: LD_INT 32
66944: DOUBLE
66945: EQUAL
66946: IFTRUE 66986
66948: LD_INT 33
66950: DOUBLE
66951: EQUAL
66952: IFTRUE 66986
66954: LD_INT 27
66956: DOUBLE
66957: EQUAL
66958: IFTRUE 66986
66960: LD_INT 26
66962: DOUBLE
66963: EQUAL
66964: IFTRUE 66986
66966: LD_INT 28
66968: DOUBLE
66969: EQUAL
66970: IFTRUE 66986
66972: LD_INT 29
66974: DOUBLE
66975: EQUAL
66976: IFTRUE 66986
66978: LD_INT 30
66980: DOUBLE
66981: EQUAL
66982: IFTRUE 66986
66984: GO 67042
66986: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66987: LD_ADDR_VAR 0 9
66991: PUSH
66992: LD_VAR 0 59
66996: PUSH
66997: LD_VAR 0 60
67001: PUSH
67002: LD_VAR 0 61
67006: PUSH
67007: LD_VAR 0 62
67011: PUSH
67012: LD_VAR 0 63
67016: PUSH
67017: LD_VAR 0 64
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: PUSH
67030: LD_VAR 0 4
67034: PUSH
67035: LD_INT 1
67037: PLUS
67038: ARRAY
67039: ST_TO_ADDR
67040: GO 67043
67042: POP
// temp_list2 = [ ] ;
67043: LD_ADDR_VAR 0 10
67047: PUSH
67048: EMPTY
67049: ST_TO_ADDR
// for i in temp_list do
67050: LD_ADDR_VAR 0 8
67054: PUSH
67055: LD_VAR 0 9
67059: PUSH
67060: FOR_IN
67061: IFFALSE 67113
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67063: LD_ADDR_VAR 0 10
67067: PUSH
67068: LD_VAR 0 10
67072: PUSH
67073: LD_VAR 0 8
67077: PUSH
67078: LD_INT 1
67080: ARRAY
67081: PUSH
67082: LD_VAR 0 2
67086: PLUS
67087: PUSH
67088: LD_VAR 0 8
67092: PUSH
67093: LD_INT 2
67095: ARRAY
67096: PUSH
67097: LD_VAR 0 3
67101: PLUS
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: EMPTY
67108: LIST
67109: ADD
67110: ST_TO_ADDR
67111: GO 67060
67113: POP
67114: POP
// result = temp_list2 ;
67115: LD_ADDR_VAR 0 7
67119: PUSH
67120: LD_VAR 0 10
67124: ST_TO_ADDR
// end ;
67125: LD_VAR 0 7
67129: RET
// export function EnemyInRange ( unit , dist ) ; begin
67130: LD_INT 0
67132: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67133: LD_ADDR_VAR 0 3
67137: PUSH
67138: LD_VAR 0 1
67142: PPUSH
67143: CALL_OW 255
67147: PPUSH
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 250
67157: PPUSH
67158: LD_VAR 0 1
67162: PPUSH
67163: CALL_OW 251
67167: PPUSH
67168: LD_VAR 0 2
67172: PPUSH
67173: CALL 40503 0 4
67177: PUSH
67178: LD_INT 4
67180: ARRAY
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 3
67186: RET
// export function PlayerSeeMe ( unit ) ; begin
67187: LD_INT 0
67189: PPUSH
// result := See ( your_side , unit ) ;
67190: LD_ADDR_VAR 0 2
67194: PUSH
67195: LD_OWVAR 2
67199: PPUSH
67200: LD_VAR 0 1
67204: PPUSH
67205: CALL_OW 292
67209: ST_TO_ADDR
// end ;
67210: LD_VAR 0 2
67214: RET
// export function ReverseDir ( unit ) ; begin
67215: LD_INT 0
67217: PPUSH
// if not unit then
67218: LD_VAR 0 1
67222: NOT
67223: IFFALSE 67227
// exit ;
67225: GO 67250
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67227: LD_ADDR_VAR 0 2
67231: PUSH
67232: LD_VAR 0 1
67236: PPUSH
67237: CALL_OW 254
67241: PUSH
67242: LD_INT 3
67244: PLUS
67245: PUSH
67246: LD_INT 6
67248: MOD
67249: ST_TO_ADDR
// end ;
67250: LD_VAR 0 2
67254: RET
// export function ReverseArray ( array ) ; var i ; begin
67255: LD_INT 0
67257: PPUSH
67258: PPUSH
// if not array then
67259: LD_VAR 0 1
67263: NOT
67264: IFFALSE 67268
// exit ;
67266: GO 67323
// result := [ ] ;
67268: LD_ADDR_VAR 0 2
67272: PUSH
67273: EMPTY
67274: ST_TO_ADDR
// for i := array downto 1 do
67275: LD_ADDR_VAR 0 3
67279: PUSH
67280: DOUBLE
67281: LD_VAR 0 1
67285: INC
67286: ST_TO_ADDR
67287: LD_INT 1
67289: PUSH
67290: FOR_DOWNTO
67291: IFFALSE 67321
// result := Join ( result , array [ i ] ) ;
67293: LD_ADDR_VAR 0 2
67297: PUSH
67298: LD_VAR 0 2
67302: PPUSH
67303: LD_VAR 0 1
67307: PUSH
67308: LD_VAR 0 3
67312: ARRAY
67313: PPUSH
67314: CALL 71988 0 2
67318: ST_TO_ADDR
67319: GO 67290
67321: POP
67322: POP
// end ;
67323: LD_VAR 0 2
67327: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67328: LD_INT 0
67330: PPUSH
67331: PPUSH
67332: PPUSH
67333: PPUSH
67334: PPUSH
67335: PPUSH
// if not unit or not hexes then
67336: LD_VAR 0 1
67340: NOT
67341: PUSH
67342: LD_VAR 0 2
67346: NOT
67347: OR
67348: IFFALSE 67352
// exit ;
67350: GO 67475
// dist := 9999 ;
67352: LD_ADDR_VAR 0 5
67356: PUSH
67357: LD_INT 9999
67359: ST_TO_ADDR
// for i = 1 to hexes do
67360: LD_ADDR_VAR 0 4
67364: PUSH
67365: DOUBLE
67366: LD_INT 1
67368: DEC
67369: ST_TO_ADDR
67370: LD_VAR 0 2
67374: PUSH
67375: FOR_TO
67376: IFFALSE 67463
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67378: LD_ADDR_VAR 0 6
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: LD_VAR 0 2
67392: PUSH
67393: LD_VAR 0 4
67397: ARRAY
67398: PUSH
67399: LD_INT 1
67401: ARRAY
67402: PPUSH
67403: LD_VAR 0 2
67407: PUSH
67408: LD_VAR 0 4
67412: ARRAY
67413: PUSH
67414: LD_INT 2
67416: ARRAY
67417: PPUSH
67418: CALL_OW 297
67422: ST_TO_ADDR
// if tdist < dist then
67423: LD_VAR 0 6
67427: PUSH
67428: LD_VAR 0 5
67432: LESS
67433: IFFALSE 67461
// begin hex := hexes [ i ] ;
67435: LD_ADDR_VAR 0 8
67439: PUSH
67440: LD_VAR 0 2
67444: PUSH
67445: LD_VAR 0 4
67449: ARRAY
67450: ST_TO_ADDR
// dist := tdist ;
67451: LD_ADDR_VAR 0 5
67455: PUSH
67456: LD_VAR 0 6
67460: ST_TO_ADDR
// end ; end ;
67461: GO 67375
67463: POP
67464: POP
// result := hex ;
67465: LD_ADDR_VAR 0 3
67469: PUSH
67470: LD_VAR 0 8
67474: ST_TO_ADDR
// end ;
67475: LD_VAR 0 3
67479: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67480: LD_INT 0
67482: PPUSH
67483: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67484: LD_VAR 0 1
67488: NOT
67489: PUSH
67490: LD_VAR 0 1
67494: PUSH
67495: LD_INT 21
67497: PUSH
67498: LD_INT 2
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 23
67507: PUSH
67508: LD_INT 2
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PPUSH
67519: CALL_OW 69
67523: IN
67524: NOT
67525: OR
67526: IFFALSE 67530
// exit ;
67528: GO 67577
// for i = 1 to 3 do
67530: LD_ADDR_VAR 0 3
67534: PUSH
67535: DOUBLE
67536: LD_INT 1
67538: DEC
67539: ST_TO_ADDR
67540: LD_INT 3
67542: PUSH
67543: FOR_TO
67544: IFFALSE 67575
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67546: LD_VAR 0 1
67550: PPUSH
67551: CALL_OW 250
67555: PPUSH
67556: LD_VAR 0 1
67560: PPUSH
67561: CALL_OW 251
67565: PPUSH
67566: LD_INT 1
67568: PPUSH
67569: CALL_OW 453
67573: GO 67543
67575: POP
67576: POP
// end ;
67577: LD_VAR 0 2
67581: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67582: LD_INT 0
67584: PPUSH
67585: PPUSH
67586: PPUSH
67587: PPUSH
67588: PPUSH
67589: PPUSH
// if not unit or not enemy_unit then
67590: LD_VAR 0 1
67594: NOT
67595: PUSH
67596: LD_VAR 0 2
67600: NOT
67601: OR
67602: IFFALSE 67606
// exit ;
67604: GO 68073
// if GetLives ( i ) < 250 then
67606: LD_VAR 0 4
67610: PPUSH
67611: CALL_OW 256
67615: PUSH
67616: LD_INT 250
67618: LESS
67619: IFFALSE 67632
// begin ComAutodestruct ( i ) ;
67621: LD_VAR 0 4
67625: PPUSH
67626: CALL 67480 0 1
// exit ;
67630: GO 68073
// end ; x := GetX ( enemy_unit ) ;
67632: LD_ADDR_VAR 0 7
67636: PUSH
67637: LD_VAR 0 2
67641: PPUSH
67642: CALL_OW 250
67646: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67647: LD_ADDR_VAR 0 8
67651: PUSH
67652: LD_VAR 0 2
67656: PPUSH
67657: CALL_OW 251
67661: ST_TO_ADDR
// if not x or not y then
67662: LD_VAR 0 7
67666: NOT
67667: PUSH
67668: LD_VAR 0 8
67672: NOT
67673: OR
67674: IFFALSE 67678
// exit ;
67676: GO 68073
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67678: LD_ADDR_VAR 0 6
67682: PUSH
67683: LD_VAR 0 7
67687: PPUSH
67688: LD_INT 0
67690: PPUSH
67691: LD_INT 4
67693: PPUSH
67694: CALL_OW 272
67698: PUSH
67699: LD_VAR 0 8
67703: PPUSH
67704: LD_INT 0
67706: PPUSH
67707: LD_INT 4
67709: PPUSH
67710: CALL_OW 273
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: LD_VAR 0 7
67723: PPUSH
67724: LD_INT 1
67726: PPUSH
67727: LD_INT 4
67729: PPUSH
67730: CALL_OW 272
67734: PUSH
67735: LD_VAR 0 8
67739: PPUSH
67740: LD_INT 1
67742: PPUSH
67743: LD_INT 4
67745: PPUSH
67746: CALL_OW 273
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_VAR 0 7
67759: PPUSH
67760: LD_INT 2
67762: PPUSH
67763: LD_INT 4
67765: PPUSH
67766: CALL_OW 272
67770: PUSH
67771: LD_VAR 0 8
67775: PPUSH
67776: LD_INT 2
67778: PPUSH
67779: LD_INT 4
67781: PPUSH
67782: CALL_OW 273
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_VAR 0 7
67795: PPUSH
67796: LD_INT 3
67798: PPUSH
67799: LD_INT 4
67801: PPUSH
67802: CALL_OW 272
67806: PUSH
67807: LD_VAR 0 8
67811: PPUSH
67812: LD_INT 3
67814: PPUSH
67815: LD_INT 4
67817: PPUSH
67818: CALL_OW 273
67822: PUSH
67823: EMPTY
67824: LIST
67825: LIST
67826: PUSH
67827: LD_VAR 0 7
67831: PPUSH
67832: LD_INT 4
67834: PPUSH
67835: LD_INT 4
67837: PPUSH
67838: CALL_OW 272
67842: PUSH
67843: LD_VAR 0 8
67847: PPUSH
67848: LD_INT 4
67850: PPUSH
67851: LD_INT 4
67853: PPUSH
67854: CALL_OW 273
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_VAR 0 7
67867: PPUSH
67868: LD_INT 5
67870: PPUSH
67871: LD_INT 4
67873: PPUSH
67874: CALL_OW 272
67878: PUSH
67879: LD_VAR 0 8
67883: PPUSH
67884: LD_INT 5
67886: PPUSH
67887: LD_INT 4
67889: PPUSH
67890: CALL_OW 273
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: ST_TO_ADDR
// for i = tmp downto 1 do
67907: LD_ADDR_VAR 0 4
67911: PUSH
67912: DOUBLE
67913: LD_VAR 0 6
67917: INC
67918: ST_TO_ADDR
67919: LD_INT 1
67921: PUSH
67922: FOR_DOWNTO
67923: IFFALSE 68024
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67925: LD_VAR 0 6
67929: PUSH
67930: LD_VAR 0 4
67934: ARRAY
67935: PUSH
67936: LD_INT 1
67938: ARRAY
67939: PPUSH
67940: LD_VAR 0 6
67944: PUSH
67945: LD_VAR 0 4
67949: ARRAY
67950: PUSH
67951: LD_INT 2
67953: ARRAY
67954: PPUSH
67955: CALL_OW 488
67959: NOT
67960: PUSH
67961: LD_VAR 0 6
67965: PUSH
67966: LD_VAR 0 4
67970: ARRAY
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: PPUSH
67976: LD_VAR 0 6
67980: PUSH
67981: LD_VAR 0 4
67985: ARRAY
67986: PUSH
67987: LD_INT 2
67989: ARRAY
67990: PPUSH
67991: CALL_OW 428
67995: PUSH
67996: LD_INT 0
67998: NONEQUAL
67999: OR
68000: IFFALSE 68022
// tmp := Delete ( tmp , i ) ;
68002: LD_ADDR_VAR 0 6
68006: PUSH
68007: LD_VAR 0 6
68011: PPUSH
68012: LD_VAR 0 4
68016: PPUSH
68017: CALL_OW 3
68021: ST_TO_ADDR
68022: GO 67922
68024: POP
68025: POP
// j := GetClosestHex ( unit , tmp ) ;
68026: LD_ADDR_VAR 0 5
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: LD_VAR 0 6
68040: PPUSH
68041: CALL 67328 0 2
68045: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68046: LD_VAR 0 1
68050: PPUSH
68051: LD_VAR 0 5
68055: PUSH
68056: LD_INT 1
68058: ARRAY
68059: PPUSH
68060: LD_VAR 0 5
68064: PUSH
68065: LD_INT 2
68067: ARRAY
68068: PPUSH
68069: CALL_OW 111
// end ;
68073: LD_VAR 0 3
68077: RET
// export function PrepareApemanSoldier ( ) ; begin
68078: LD_INT 0
68080: PPUSH
// uc_nation := 0 ;
68081: LD_ADDR_OWVAR 21
68085: PUSH
68086: LD_INT 0
68088: ST_TO_ADDR
// hc_sex := sex_male ;
68089: LD_ADDR_OWVAR 27
68093: PUSH
68094: LD_INT 1
68096: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68097: LD_ADDR_OWVAR 28
68101: PUSH
68102: LD_INT 15
68104: ST_TO_ADDR
// hc_gallery :=  ;
68105: LD_ADDR_OWVAR 33
68109: PUSH
68110: LD_STRING 
68112: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68113: LD_ADDR_OWVAR 31
68117: PUSH
68118: LD_INT 0
68120: PPUSH
68121: LD_INT 3
68123: PPUSH
68124: CALL_OW 12
68128: PUSH
68129: LD_INT 0
68131: PPUSH
68132: LD_INT 3
68134: PPUSH
68135: CALL_OW 12
68139: PUSH
68140: LD_INT 0
68142: PUSH
68143: LD_INT 0
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: ST_TO_ADDR
// end ;
68152: LD_VAR 0 1
68156: RET
// export function PrepareApemanEngineer ( ) ; begin
68157: LD_INT 0
68159: PPUSH
// uc_nation := 0 ;
68160: LD_ADDR_OWVAR 21
68164: PUSH
68165: LD_INT 0
68167: ST_TO_ADDR
// hc_sex := sex_male ;
68168: LD_ADDR_OWVAR 27
68172: PUSH
68173: LD_INT 1
68175: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68176: LD_ADDR_OWVAR 28
68180: PUSH
68181: LD_INT 16
68183: ST_TO_ADDR
// hc_gallery :=  ;
68184: LD_ADDR_OWVAR 33
68188: PUSH
68189: LD_STRING 
68191: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68192: LD_ADDR_OWVAR 31
68196: PUSH
68197: LD_INT 0
68199: PPUSH
68200: LD_INT 3
68202: PPUSH
68203: CALL_OW 12
68207: PUSH
68208: LD_INT 0
68210: PPUSH
68211: LD_INT 3
68213: PPUSH
68214: CALL_OW 12
68218: PUSH
68219: LD_INT 0
68221: PUSH
68222: LD_INT 0
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: ST_TO_ADDR
// end ;
68231: LD_VAR 0 1
68235: RET
// export function PrepareApeman ( agressivity ) ; begin
68236: LD_INT 0
68238: PPUSH
// uc_side := 0 ;
68239: LD_ADDR_OWVAR 20
68243: PUSH
68244: LD_INT 0
68246: ST_TO_ADDR
// uc_nation := 0 ;
68247: LD_ADDR_OWVAR 21
68251: PUSH
68252: LD_INT 0
68254: ST_TO_ADDR
// hc_sex := sex_male ;
68255: LD_ADDR_OWVAR 27
68259: PUSH
68260: LD_INT 1
68262: ST_TO_ADDR
// hc_class := class_apeman ;
68263: LD_ADDR_OWVAR 28
68267: PUSH
68268: LD_INT 12
68270: ST_TO_ADDR
// hc_gallery :=  ;
68271: LD_ADDR_OWVAR 33
68275: PUSH
68276: LD_STRING 
68278: ST_TO_ADDR
// if agressivity = 0 then
68279: LD_VAR 0 1
68283: PUSH
68284: LD_INT 0
68286: EQUAL
68287: IFFALSE 68299
// hc_agressivity := 0 else
68289: LD_ADDR_OWVAR 35
68293: PUSH
68294: LD_INT 0
68296: ST_TO_ADDR
68297: GO 68320
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68299: LD_ADDR_OWVAR 35
68303: PUSH
68304: LD_VAR 0 1
68308: NEG
68309: PPUSH
68310: LD_VAR 0 1
68314: PPUSH
68315: CALL_OW 12
68319: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68320: LD_ADDR_OWVAR 31
68324: PUSH
68325: LD_INT 0
68327: PPUSH
68328: LD_INT 3
68330: PPUSH
68331: CALL_OW 12
68335: PUSH
68336: LD_INT 0
68338: PPUSH
68339: LD_INT 3
68341: PPUSH
68342: CALL_OW 12
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: LD_INT 0
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: ST_TO_ADDR
// end ;
68359: LD_VAR 0 2
68363: RET
// export function PrepareTiger ( agressivity ) ; begin
68364: LD_INT 0
68366: PPUSH
// uc_side := 0 ;
68367: LD_ADDR_OWVAR 20
68371: PUSH
68372: LD_INT 0
68374: ST_TO_ADDR
// uc_nation := 0 ;
68375: LD_ADDR_OWVAR 21
68379: PUSH
68380: LD_INT 0
68382: ST_TO_ADDR
// hc_class := class_tiger ;
68383: LD_ADDR_OWVAR 28
68387: PUSH
68388: LD_INT 14
68390: ST_TO_ADDR
// hc_gallery :=  ;
68391: LD_ADDR_OWVAR 33
68395: PUSH
68396: LD_STRING 
68398: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68399: LD_ADDR_OWVAR 35
68403: PUSH
68404: LD_VAR 0 1
68408: NEG
68409: PPUSH
68410: LD_VAR 0 1
68414: PPUSH
68415: CALL_OW 12
68419: ST_TO_ADDR
// end ;
68420: LD_VAR 0 2
68424: RET
// export function PrepareEnchidna ( ) ; begin
68425: LD_INT 0
68427: PPUSH
// uc_side := 0 ;
68428: LD_ADDR_OWVAR 20
68432: PUSH
68433: LD_INT 0
68435: ST_TO_ADDR
// uc_nation := 0 ;
68436: LD_ADDR_OWVAR 21
68440: PUSH
68441: LD_INT 0
68443: ST_TO_ADDR
// hc_class := class_baggie ;
68444: LD_ADDR_OWVAR 28
68448: PUSH
68449: LD_INT 13
68451: ST_TO_ADDR
// hc_gallery :=  ;
68452: LD_ADDR_OWVAR 33
68456: PUSH
68457: LD_STRING 
68459: ST_TO_ADDR
// end ;
68460: LD_VAR 0 1
68464: RET
// export function PrepareFrog ( ) ; begin
68465: LD_INT 0
68467: PPUSH
// uc_side := 0 ;
68468: LD_ADDR_OWVAR 20
68472: PUSH
68473: LD_INT 0
68475: ST_TO_ADDR
// uc_nation := 0 ;
68476: LD_ADDR_OWVAR 21
68480: PUSH
68481: LD_INT 0
68483: ST_TO_ADDR
// hc_class := class_frog ;
68484: LD_ADDR_OWVAR 28
68488: PUSH
68489: LD_INT 19
68491: ST_TO_ADDR
// hc_gallery :=  ;
68492: LD_ADDR_OWVAR 33
68496: PUSH
68497: LD_STRING 
68499: ST_TO_ADDR
// end ;
68500: LD_VAR 0 1
68504: RET
// export function PrepareFish ( ) ; begin
68505: LD_INT 0
68507: PPUSH
// uc_side := 0 ;
68508: LD_ADDR_OWVAR 20
68512: PUSH
68513: LD_INT 0
68515: ST_TO_ADDR
// uc_nation := 0 ;
68516: LD_ADDR_OWVAR 21
68520: PUSH
68521: LD_INT 0
68523: ST_TO_ADDR
// hc_class := class_fish ;
68524: LD_ADDR_OWVAR 28
68528: PUSH
68529: LD_INT 20
68531: ST_TO_ADDR
// hc_gallery :=  ;
68532: LD_ADDR_OWVAR 33
68536: PUSH
68537: LD_STRING 
68539: ST_TO_ADDR
// end ;
68540: LD_VAR 0 1
68544: RET
// export function PrepareBird ( ) ; begin
68545: LD_INT 0
68547: PPUSH
// uc_side := 0 ;
68548: LD_ADDR_OWVAR 20
68552: PUSH
68553: LD_INT 0
68555: ST_TO_ADDR
// uc_nation := 0 ;
68556: LD_ADDR_OWVAR 21
68560: PUSH
68561: LD_INT 0
68563: ST_TO_ADDR
// hc_class := class_phororhacos ;
68564: LD_ADDR_OWVAR 28
68568: PUSH
68569: LD_INT 18
68571: ST_TO_ADDR
// hc_gallery :=  ;
68572: LD_ADDR_OWVAR 33
68576: PUSH
68577: LD_STRING 
68579: ST_TO_ADDR
// end ;
68580: LD_VAR 0 1
68584: RET
// export function PrepareHorse ( ) ; begin
68585: LD_INT 0
68587: PPUSH
// uc_side := 0 ;
68588: LD_ADDR_OWVAR 20
68592: PUSH
68593: LD_INT 0
68595: ST_TO_ADDR
// uc_nation := 0 ;
68596: LD_ADDR_OWVAR 21
68600: PUSH
68601: LD_INT 0
68603: ST_TO_ADDR
// hc_class := class_horse ;
68604: LD_ADDR_OWVAR 28
68608: PUSH
68609: LD_INT 21
68611: ST_TO_ADDR
// hc_gallery :=  ;
68612: LD_ADDR_OWVAR 33
68616: PUSH
68617: LD_STRING 
68619: ST_TO_ADDR
// end ;
68620: LD_VAR 0 1
68624: RET
// export function PrepareMastodont ( ) ; begin
68625: LD_INT 0
68627: PPUSH
// uc_side := 0 ;
68628: LD_ADDR_OWVAR 20
68632: PUSH
68633: LD_INT 0
68635: ST_TO_ADDR
// uc_nation := 0 ;
68636: LD_ADDR_OWVAR 21
68640: PUSH
68641: LD_INT 0
68643: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68644: LD_ADDR_OWVAR 37
68648: PUSH
68649: LD_INT 31
68651: ST_TO_ADDR
// vc_control := control_rider ;
68652: LD_ADDR_OWVAR 38
68656: PUSH
68657: LD_INT 4
68659: ST_TO_ADDR
// end ;
68660: LD_VAR 0 1
68664: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68665: LD_INT 0
68667: PPUSH
68668: PPUSH
68669: PPUSH
// uc_side = 0 ;
68670: LD_ADDR_OWVAR 20
68674: PUSH
68675: LD_INT 0
68677: ST_TO_ADDR
// uc_nation = 0 ;
68678: LD_ADDR_OWVAR 21
68682: PUSH
68683: LD_INT 0
68685: ST_TO_ADDR
// InitHc_All ( ) ;
68686: CALL_OW 584
// InitVc ;
68690: CALL_OW 20
// if mastodonts then
68694: LD_VAR 0 6
68698: IFFALSE 68765
// for i = 1 to mastodonts do
68700: LD_ADDR_VAR 0 11
68704: PUSH
68705: DOUBLE
68706: LD_INT 1
68708: DEC
68709: ST_TO_ADDR
68710: LD_VAR 0 6
68714: PUSH
68715: FOR_TO
68716: IFFALSE 68763
// begin vc_chassis := 31 ;
68718: LD_ADDR_OWVAR 37
68722: PUSH
68723: LD_INT 31
68725: ST_TO_ADDR
// vc_control := control_rider ;
68726: LD_ADDR_OWVAR 38
68730: PUSH
68731: LD_INT 4
68733: ST_TO_ADDR
// animal := CreateVehicle ;
68734: LD_ADDR_VAR 0 12
68738: PUSH
68739: CALL_OW 45
68743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68744: LD_VAR 0 12
68748: PPUSH
68749: LD_VAR 0 8
68753: PPUSH
68754: LD_INT 0
68756: PPUSH
68757: CALL 70893 0 3
// end ;
68761: GO 68715
68763: POP
68764: POP
// if horses then
68765: LD_VAR 0 5
68769: IFFALSE 68836
// for i = 1 to horses do
68771: LD_ADDR_VAR 0 11
68775: PUSH
68776: DOUBLE
68777: LD_INT 1
68779: DEC
68780: ST_TO_ADDR
68781: LD_VAR 0 5
68785: PUSH
68786: FOR_TO
68787: IFFALSE 68834
// begin hc_class := 21 ;
68789: LD_ADDR_OWVAR 28
68793: PUSH
68794: LD_INT 21
68796: ST_TO_ADDR
// hc_gallery :=  ;
68797: LD_ADDR_OWVAR 33
68801: PUSH
68802: LD_STRING 
68804: ST_TO_ADDR
// animal := CreateHuman ;
68805: LD_ADDR_VAR 0 12
68809: PUSH
68810: CALL_OW 44
68814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68815: LD_VAR 0 12
68819: PPUSH
68820: LD_VAR 0 8
68824: PPUSH
68825: LD_INT 0
68827: PPUSH
68828: CALL 70893 0 3
// end ;
68832: GO 68786
68834: POP
68835: POP
// if birds then
68836: LD_VAR 0 1
68840: IFFALSE 68907
// for i = 1 to birds do
68842: LD_ADDR_VAR 0 11
68846: PUSH
68847: DOUBLE
68848: LD_INT 1
68850: DEC
68851: ST_TO_ADDR
68852: LD_VAR 0 1
68856: PUSH
68857: FOR_TO
68858: IFFALSE 68905
// begin hc_class := 18 ;
68860: LD_ADDR_OWVAR 28
68864: PUSH
68865: LD_INT 18
68867: ST_TO_ADDR
// hc_gallery =  ;
68868: LD_ADDR_OWVAR 33
68872: PUSH
68873: LD_STRING 
68875: ST_TO_ADDR
// animal := CreateHuman ;
68876: LD_ADDR_VAR 0 12
68880: PUSH
68881: CALL_OW 44
68885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68886: LD_VAR 0 12
68890: PPUSH
68891: LD_VAR 0 8
68895: PPUSH
68896: LD_INT 0
68898: PPUSH
68899: CALL 70893 0 3
// end ;
68903: GO 68857
68905: POP
68906: POP
// if tigers then
68907: LD_VAR 0 2
68911: IFFALSE 68995
// for i = 1 to tigers do
68913: LD_ADDR_VAR 0 11
68917: PUSH
68918: DOUBLE
68919: LD_INT 1
68921: DEC
68922: ST_TO_ADDR
68923: LD_VAR 0 2
68927: PUSH
68928: FOR_TO
68929: IFFALSE 68993
// begin hc_class = class_tiger ;
68931: LD_ADDR_OWVAR 28
68935: PUSH
68936: LD_INT 14
68938: ST_TO_ADDR
// hc_gallery =  ;
68939: LD_ADDR_OWVAR 33
68943: PUSH
68944: LD_STRING 
68946: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68947: LD_ADDR_OWVAR 35
68951: PUSH
68952: LD_INT 7
68954: NEG
68955: PPUSH
68956: LD_INT 7
68958: PPUSH
68959: CALL_OW 12
68963: ST_TO_ADDR
// animal := CreateHuman ;
68964: LD_ADDR_VAR 0 12
68968: PUSH
68969: CALL_OW 44
68973: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68974: LD_VAR 0 12
68978: PPUSH
68979: LD_VAR 0 8
68983: PPUSH
68984: LD_INT 0
68986: PPUSH
68987: CALL 70893 0 3
// end ;
68991: GO 68928
68993: POP
68994: POP
// if apemans then
68995: LD_VAR 0 3
68999: IFFALSE 69122
// for i = 1 to apemans do
69001: LD_ADDR_VAR 0 11
69005: PUSH
69006: DOUBLE
69007: LD_INT 1
69009: DEC
69010: ST_TO_ADDR
69011: LD_VAR 0 3
69015: PUSH
69016: FOR_TO
69017: IFFALSE 69120
// begin hc_class = class_apeman ;
69019: LD_ADDR_OWVAR 28
69023: PUSH
69024: LD_INT 12
69026: ST_TO_ADDR
// hc_gallery =  ;
69027: LD_ADDR_OWVAR 33
69031: PUSH
69032: LD_STRING 
69034: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69035: LD_ADDR_OWVAR 35
69039: PUSH
69040: LD_INT 2
69042: NEG
69043: PPUSH
69044: LD_INT 2
69046: PPUSH
69047: CALL_OW 12
69051: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69052: LD_ADDR_OWVAR 31
69056: PUSH
69057: LD_INT 1
69059: PPUSH
69060: LD_INT 3
69062: PPUSH
69063: CALL_OW 12
69067: PUSH
69068: LD_INT 1
69070: PPUSH
69071: LD_INT 3
69073: PPUSH
69074: CALL_OW 12
69078: PUSH
69079: LD_INT 0
69081: PUSH
69082: LD_INT 0
69084: PUSH
69085: EMPTY
69086: LIST
69087: LIST
69088: LIST
69089: LIST
69090: ST_TO_ADDR
// animal := CreateHuman ;
69091: LD_ADDR_VAR 0 12
69095: PUSH
69096: CALL_OW 44
69100: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69101: LD_VAR 0 12
69105: PPUSH
69106: LD_VAR 0 8
69110: PPUSH
69111: LD_INT 0
69113: PPUSH
69114: CALL 70893 0 3
// end ;
69118: GO 69016
69120: POP
69121: POP
// if enchidnas then
69122: LD_VAR 0 4
69126: IFFALSE 69193
// for i = 1 to enchidnas do
69128: LD_ADDR_VAR 0 11
69132: PUSH
69133: DOUBLE
69134: LD_INT 1
69136: DEC
69137: ST_TO_ADDR
69138: LD_VAR 0 4
69142: PUSH
69143: FOR_TO
69144: IFFALSE 69191
// begin hc_class = 13 ;
69146: LD_ADDR_OWVAR 28
69150: PUSH
69151: LD_INT 13
69153: ST_TO_ADDR
// hc_gallery =  ;
69154: LD_ADDR_OWVAR 33
69158: PUSH
69159: LD_STRING 
69161: ST_TO_ADDR
// animal := CreateHuman ;
69162: LD_ADDR_VAR 0 12
69166: PUSH
69167: CALL_OW 44
69171: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69172: LD_VAR 0 12
69176: PPUSH
69177: LD_VAR 0 8
69181: PPUSH
69182: LD_INT 0
69184: PPUSH
69185: CALL 70893 0 3
// end ;
69189: GO 69143
69191: POP
69192: POP
// if fishes then
69193: LD_VAR 0 7
69197: IFFALSE 69264
// for i = 1 to fishes do
69199: LD_ADDR_VAR 0 11
69203: PUSH
69204: DOUBLE
69205: LD_INT 1
69207: DEC
69208: ST_TO_ADDR
69209: LD_VAR 0 7
69213: PUSH
69214: FOR_TO
69215: IFFALSE 69262
// begin hc_class = 20 ;
69217: LD_ADDR_OWVAR 28
69221: PUSH
69222: LD_INT 20
69224: ST_TO_ADDR
// hc_gallery =  ;
69225: LD_ADDR_OWVAR 33
69229: PUSH
69230: LD_STRING 
69232: ST_TO_ADDR
// animal := CreateHuman ;
69233: LD_ADDR_VAR 0 12
69237: PUSH
69238: CALL_OW 44
69242: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69243: LD_VAR 0 12
69247: PPUSH
69248: LD_VAR 0 9
69252: PPUSH
69253: LD_INT 0
69255: PPUSH
69256: CALL 70893 0 3
// end ;
69260: GO 69214
69262: POP
69263: POP
// end ;
69264: LD_VAR 0 10
69268: RET
// export function WantHeal ( sci , unit ) ; begin
69269: LD_INT 0
69271: PPUSH
// if GetTaskList ( sci ) > 0 then
69272: LD_VAR 0 1
69276: PPUSH
69277: CALL_OW 437
69281: PUSH
69282: LD_INT 0
69284: GREATER
69285: IFFALSE 69355
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69287: LD_VAR 0 1
69291: PPUSH
69292: CALL_OW 437
69296: PUSH
69297: LD_INT 1
69299: ARRAY
69300: PUSH
69301: LD_INT 1
69303: ARRAY
69304: PUSH
69305: LD_STRING l
69307: EQUAL
69308: PUSH
69309: LD_VAR 0 1
69313: PPUSH
69314: CALL_OW 437
69318: PUSH
69319: LD_INT 1
69321: ARRAY
69322: PUSH
69323: LD_INT 4
69325: ARRAY
69326: PUSH
69327: LD_VAR 0 2
69331: EQUAL
69332: AND
69333: IFFALSE 69345
// result := true else
69335: LD_ADDR_VAR 0 3
69339: PUSH
69340: LD_INT 1
69342: ST_TO_ADDR
69343: GO 69353
// result := false ;
69345: LD_ADDR_VAR 0 3
69349: PUSH
69350: LD_INT 0
69352: ST_TO_ADDR
// end else
69353: GO 69363
// result := false ;
69355: LD_ADDR_VAR 0 3
69359: PUSH
69360: LD_INT 0
69362: ST_TO_ADDR
// end ;
69363: LD_VAR 0 3
69367: RET
// export function HealTarget ( sci ) ; begin
69368: LD_INT 0
69370: PPUSH
// if not sci then
69371: LD_VAR 0 1
69375: NOT
69376: IFFALSE 69380
// exit ;
69378: GO 69445
// result := 0 ;
69380: LD_ADDR_VAR 0 2
69384: PUSH
69385: LD_INT 0
69387: ST_TO_ADDR
// if GetTaskList ( sci ) then
69388: LD_VAR 0 1
69392: PPUSH
69393: CALL_OW 437
69397: IFFALSE 69445
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69399: LD_VAR 0 1
69403: PPUSH
69404: CALL_OW 437
69408: PUSH
69409: LD_INT 1
69411: ARRAY
69412: PUSH
69413: LD_INT 1
69415: ARRAY
69416: PUSH
69417: LD_STRING l
69419: EQUAL
69420: IFFALSE 69445
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69422: LD_ADDR_VAR 0 2
69426: PUSH
69427: LD_VAR 0 1
69431: PPUSH
69432: CALL_OW 437
69436: PUSH
69437: LD_INT 1
69439: ARRAY
69440: PUSH
69441: LD_INT 4
69443: ARRAY
69444: ST_TO_ADDR
// end ;
69445: LD_VAR 0 2
69449: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69450: LD_INT 0
69452: PPUSH
69453: PPUSH
69454: PPUSH
69455: PPUSH
// if not base_units then
69456: LD_VAR 0 1
69460: NOT
69461: IFFALSE 69465
// exit ;
69463: GO 69552
// result := false ;
69465: LD_ADDR_VAR 0 2
69469: PUSH
69470: LD_INT 0
69472: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69473: LD_ADDR_VAR 0 5
69477: PUSH
69478: LD_VAR 0 1
69482: PPUSH
69483: LD_INT 21
69485: PUSH
69486: LD_INT 3
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PPUSH
69493: CALL_OW 72
69497: ST_TO_ADDR
// if not tmp then
69498: LD_VAR 0 5
69502: NOT
69503: IFFALSE 69507
// exit ;
69505: GO 69552
// for i in tmp do
69507: LD_ADDR_VAR 0 3
69511: PUSH
69512: LD_VAR 0 5
69516: PUSH
69517: FOR_IN
69518: IFFALSE 69550
// begin result := EnemyInRange ( i , 22 ) ;
69520: LD_ADDR_VAR 0 2
69524: PUSH
69525: LD_VAR 0 3
69529: PPUSH
69530: LD_INT 22
69532: PPUSH
69533: CALL 67130 0 2
69537: ST_TO_ADDR
// if result then
69538: LD_VAR 0 2
69542: IFFALSE 69548
// exit ;
69544: POP
69545: POP
69546: GO 69552
// end ;
69548: GO 69517
69550: POP
69551: POP
// end ;
69552: LD_VAR 0 2
69556: RET
// export function FilterByTag ( units , tag ) ; begin
69557: LD_INT 0
69559: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69560: LD_ADDR_VAR 0 3
69564: PUSH
69565: LD_VAR 0 1
69569: PPUSH
69570: LD_INT 120
69572: PUSH
69573: LD_VAR 0 2
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PPUSH
69582: CALL_OW 72
69586: ST_TO_ADDR
// end ;
69587: LD_VAR 0 3
69591: RET
// export function IsDriver ( un ) ; begin
69592: LD_INT 0
69594: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69595: LD_ADDR_VAR 0 2
69599: PUSH
69600: LD_VAR 0 1
69604: PUSH
69605: LD_INT 55
69607: PUSH
69608: EMPTY
69609: LIST
69610: PPUSH
69611: CALL_OW 69
69615: IN
69616: ST_TO_ADDR
// end ;
69617: LD_VAR 0 2
69621: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69622: LD_INT 0
69624: PPUSH
69625: PPUSH
// list := [ ] ;
69626: LD_ADDR_VAR 0 5
69630: PUSH
69631: EMPTY
69632: ST_TO_ADDR
// case d of 0 :
69633: LD_VAR 0 3
69637: PUSH
69638: LD_INT 0
69640: DOUBLE
69641: EQUAL
69642: IFTRUE 69646
69644: GO 69779
69646: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69647: LD_ADDR_VAR 0 5
69651: PUSH
69652: LD_VAR 0 1
69656: PUSH
69657: LD_INT 4
69659: MINUS
69660: PUSH
69661: LD_VAR 0 2
69665: PUSH
69666: LD_INT 4
69668: MINUS
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: LIST
69677: PUSH
69678: LD_VAR 0 1
69682: PUSH
69683: LD_INT 3
69685: MINUS
69686: PUSH
69687: LD_VAR 0 2
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: LIST
69699: PUSH
69700: LD_VAR 0 1
69704: PUSH
69705: LD_INT 4
69707: PLUS
69708: PUSH
69709: LD_VAR 0 2
69713: PUSH
69714: LD_INT 4
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: LIST
69721: PUSH
69722: LD_VAR 0 1
69726: PUSH
69727: LD_INT 3
69729: PLUS
69730: PUSH
69731: LD_VAR 0 2
69735: PUSH
69736: LD_INT 3
69738: PLUS
69739: PUSH
69740: LD_INT 5
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: LIST
69747: PUSH
69748: LD_VAR 0 1
69752: PUSH
69753: LD_VAR 0 2
69757: PUSH
69758: LD_INT 4
69760: PLUS
69761: PUSH
69762: LD_INT 0
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: LIST
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: ST_TO_ADDR
// end ; 1 :
69777: GO 70477
69779: LD_INT 1
69781: DOUBLE
69782: EQUAL
69783: IFTRUE 69787
69785: GO 69920
69787: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69788: LD_ADDR_VAR 0 5
69792: PUSH
69793: LD_VAR 0 1
69797: PUSH
69798: LD_VAR 0 2
69802: PUSH
69803: LD_INT 4
69805: MINUS
69806: PUSH
69807: LD_INT 3
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: LIST
69814: PUSH
69815: LD_VAR 0 1
69819: PUSH
69820: LD_INT 3
69822: MINUS
69823: PUSH
69824: LD_VAR 0 2
69828: PUSH
69829: LD_INT 3
69831: MINUS
69832: PUSH
69833: LD_INT 2
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: LIST
69840: PUSH
69841: LD_VAR 0 1
69845: PUSH
69846: LD_INT 4
69848: MINUS
69849: PUSH
69850: LD_VAR 0 2
69854: PUSH
69855: LD_INT 1
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: LIST
69862: PUSH
69863: LD_VAR 0 1
69867: PUSH
69868: LD_VAR 0 2
69872: PUSH
69873: LD_INT 3
69875: PLUS
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: LIST
69884: PUSH
69885: LD_VAR 0 1
69889: PUSH
69890: LD_INT 4
69892: PLUS
69893: PUSH
69894: LD_VAR 0 2
69898: PUSH
69899: LD_INT 4
69901: PLUS
69902: PUSH
69903: LD_INT 5
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: LIST
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: ST_TO_ADDR
// end ; 2 :
69918: GO 70477
69920: LD_INT 2
69922: DOUBLE
69923: EQUAL
69924: IFTRUE 69928
69926: GO 70057
69928: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69929: LD_ADDR_VAR 0 5
69933: PUSH
69934: LD_VAR 0 1
69938: PUSH
69939: LD_VAR 0 2
69943: PUSH
69944: LD_INT 3
69946: MINUS
69947: PUSH
69948: LD_INT 3
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: PUSH
69956: LD_VAR 0 1
69960: PUSH
69961: LD_INT 4
69963: PLUS
69964: PUSH
69965: LD_VAR 0 2
69969: PUSH
69970: LD_INT 4
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: LIST
69977: PUSH
69978: LD_VAR 0 1
69982: PUSH
69983: LD_VAR 0 2
69987: PUSH
69988: LD_INT 4
69990: PLUS
69991: PUSH
69992: LD_INT 0
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: LIST
69999: PUSH
70000: LD_VAR 0 1
70004: PUSH
70005: LD_INT 3
70007: MINUS
70008: PUSH
70009: LD_VAR 0 2
70013: PUSH
70014: LD_INT 1
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: LIST
70021: PUSH
70022: LD_VAR 0 1
70026: PUSH
70027: LD_INT 4
70029: MINUS
70030: PUSH
70031: LD_VAR 0 2
70035: PUSH
70036: LD_INT 4
70038: MINUS
70039: PUSH
70040: LD_INT 2
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: LIST
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: ST_TO_ADDR
// end ; 3 :
70055: GO 70477
70057: LD_INT 3
70059: DOUBLE
70060: EQUAL
70061: IFTRUE 70065
70063: GO 70198
70065: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70066: LD_ADDR_VAR 0 5
70070: PUSH
70071: LD_VAR 0 1
70075: PUSH
70076: LD_INT 3
70078: PLUS
70079: PUSH
70080: LD_VAR 0 2
70084: PUSH
70085: LD_INT 4
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: LIST
70092: PUSH
70093: LD_VAR 0 1
70097: PUSH
70098: LD_INT 4
70100: PLUS
70101: PUSH
70102: LD_VAR 0 2
70106: PUSH
70107: LD_INT 4
70109: PLUS
70110: PUSH
70111: LD_INT 5
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: LIST
70118: PUSH
70119: LD_VAR 0 1
70123: PUSH
70124: LD_INT 4
70126: MINUS
70127: PUSH
70128: LD_VAR 0 2
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: LIST
70140: PUSH
70141: LD_VAR 0 1
70145: PUSH
70146: LD_VAR 0 2
70150: PUSH
70151: LD_INT 4
70153: MINUS
70154: PUSH
70155: LD_INT 3
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: LIST
70162: PUSH
70163: LD_VAR 0 1
70167: PUSH
70168: LD_INT 3
70170: MINUS
70171: PUSH
70172: LD_VAR 0 2
70176: PUSH
70177: LD_INT 3
70179: MINUS
70180: PUSH
70181: LD_INT 2
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: LIST
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: ST_TO_ADDR
// end ; 4 :
70196: GO 70477
70198: LD_INT 4
70200: DOUBLE
70201: EQUAL
70202: IFTRUE 70206
70204: GO 70339
70206: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70207: LD_ADDR_VAR 0 5
70211: PUSH
70212: LD_VAR 0 1
70216: PUSH
70217: LD_VAR 0 2
70221: PUSH
70222: LD_INT 4
70224: PLUS
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: LIST
70233: PUSH
70234: LD_VAR 0 1
70238: PUSH
70239: LD_INT 3
70241: PLUS
70242: PUSH
70243: LD_VAR 0 2
70247: PUSH
70248: LD_INT 3
70250: PLUS
70251: PUSH
70252: LD_INT 5
70254: PUSH
70255: EMPTY
70256: LIST
70257: LIST
70258: LIST
70259: PUSH
70260: LD_VAR 0 1
70264: PUSH
70265: LD_INT 4
70267: PLUS
70268: PUSH
70269: LD_VAR 0 2
70273: PUSH
70274: LD_INT 4
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: LIST
70281: PUSH
70282: LD_VAR 0 1
70286: PUSH
70287: LD_VAR 0 2
70291: PUSH
70292: LD_INT 3
70294: MINUS
70295: PUSH
70296: LD_INT 3
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: LIST
70303: PUSH
70304: LD_VAR 0 1
70308: PUSH
70309: LD_INT 4
70311: MINUS
70312: PUSH
70313: LD_VAR 0 2
70317: PUSH
70318: LD_INT 4
70320: MINUS
70321: PUSH
70322: LD_INT 2
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: LIST
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: ST_TO_ADDR
// end ; 5 :
70337: GO 70477
70339: LD_INT 5
70341: DOUBLE
70342: EQUAL
70343: IFTRUE 70347
70345: GO 70476
70347: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70348: LD_ADDR_VAR 0 5
70352: PUSH
70353: LD_VAR 0 1
70357: PUSH
70358: LD_INT 4
70360: MINUS
70361: PUSH
70362: LD_VAR 0 2
70366: PUSH
70367: LD_INT 1
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: LIST
70374: PUSH
70375: LD_VAR 0 1
70379: PUSH
70380: LD_VAR 0 2
70384: PUSH
70385: LD_INT 4
70387: MINUS
70388: PUSH
70389: LD_INT 3
70391: PUSH
70392: EMPTY
70393: LIST
70394: LIST
70395: LIST
70396: PUSH
70397: LD_VAR 0 1
70401: PUSH
70402: LD_INT 4
70404: PLUS
70405: PUSH
70406: LD_VAR 0 2
70410: PUSH
70411: LD_INT 4
70413: PLUS
70414: PUSH
70415: LD_INT 5
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: LIST
70422: PUSH
70423: LD_VAR 0 1
70427: PUSH
70428: LD_INT 3
70430: PLUS
70431: PUSH
70432: LD_VAR 0 2
70436: PUSH
70437: LD_INT 4
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: LIST
70444: PUSH
70445: LD_VAR 0 1
70449: PUSH
70450: LD_VAR 0 2
70454: PUSH
70455: LD_INT 3
70457: PLUS
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: LIST
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: ST_TO_ADDR
// end ; end ;
70474: GO 70477
70476: POP
// result := list ;
70477: LD_ADDR_VAR 0 4
70481: PUSH
70482: LD_VAR 0 5
70486: ST_TO_ADDR
// end ;
70487: LD_VAR 0 4
70491: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70492: LD_INT 0
70494: PPUSH
70495: PPUSH
70496: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70497: LD_VAR 0 1
70501: NOT
70502: PUSH
70503: LD_VAR 0 2
70507: PUSH
70508: LD_INT 1
70510: PUSH
70511: LD_INT 2
70513: PUSH
70514: LD_INT 3
70516: PUSH
70517: LD_INT 4
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: IN
70526: NOT
70527: OR
70528: IFFALSE 70532
// exit ;
70530: GO 70615
// tmp := [ ] ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: EMPTY
70538: ST_TO_ADDR
// for i in units do
70539: LD_ADDR_VAR 0 4
70543: PUSH
70544: LD_VAR 0 1
70548: PUSH
70549: FOR_IN
70550: IFFALSE 70584
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
70552: LD_ADDR_VAR 0 5
70556: PUSH
70557: LD_VAR 0 5
70561: PPUSH
70562: LD_VAR 0 4
70566: PPUSH
70567: LD_VAR 0 2
70571: PPUSH
70572: CALL_OW 259
70576: PPUSH
70577: CALL 71988 0 2
70581: ST_TO_ADDR
70582: GO 70549
70584: POP
70585: POP
// if not tmp then
70586: LD_VAR 0 5
70590: NOT
70591: IFFALSE 70595
// exit ;
70593: GO 70615
// result := SortListByListDesc ( units , tmp ) ;
70595: LD_ADDR_VAR 0 3
70599: PUSH
70600: LD_VAR 0 1
70604: PPUSH
70605: LD_VAR 0 5
70609: PPUSH
70610: CALL_OW 77
70614: ST_TO_ADDR
// end ;
70615: LD_VAR 0 3
70619: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70620: LD_INT 0
70622: PPUSH
70623: PPUSH
70624: PPUSH
// result := false ;
70625: LD_ADDR_VAR 0 3
70629: PUSH
70630: LD_INT 0
70632: ST_TO_ADDR
// if not building then
70633: LD_VAR 0 2
70637: NOT
70638: IFFALSE 70642
// exit ;
70640: GO 70780
// x := GetX ( building ) ;
70642: LD_ADDR_VAR 0 4
70646: PUSH
70647: LD_VAR 0 2
70651: PPUSH
70652: CALL_OW 250
70656: ST_TO_ADDR
// y := GetY ( building ) ;
70657: LD_ADDR_VAR 0 5
70661: PUSH
70662: LD_VAR 0 2
70666: PPUSH
70667: CALL_OW 251
70671: ST_TO_ADDR
// if not x or not y then
70672: LD_VAR 0 4
70676: NOT
70677: PUSH
70678: LD_VAR 0 5
70682: NOT
70683: OR
70684: IFFALSE 70688
// exit ;
70686: GO 70780
// if GetTaskList ( unit ) then
70688: LD_VAR 0 1
70692: PPUSH
70693: CALL_OW 437
70697: IFFALSE 70780
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70699: LD_STRING e
70701: PUSH
70702: LD_VAR 0 1
70706: PPUSH
70707: CALL_OW 437
70711: PUSH
70712: LD_INT 1
70714: ARRAY
70715: PUSH
70716: LD_INT 1
70718: ARRAY
70719: EQUAL
70720: PUSH
70721: LD_VAR 0 4
70725: PUSH
70726: LD_VAR 0 1
70730: PPUSH
70731: CALL_OW 437
70735: PUSH
70736: LD_INT 1
70738: ARRAY
70739: PUSH
70740: LD_INT 2
70742: ARRAY
70743: EQUAL
70744: AND
70745: PUSH
70746: LD_VAR 0 5
70750: PUSH
70751: LD_VAR 0 1
70755: PPUSH
70756: CALL_OW 437
70760: PUSH
70761: LD_INT 1
70763: ARRAY
70764: PUSH
70765: LD_INT 3
70767: ARRAY
70768: EQUAL
70769: AND
70770: IFFALSE 70780
// result := true end ;
70772: LD_ADDR_VAR 0 3
70776: PUSH
70777: LD_INT 1
70779: ST_TO_ADDR
// end ;
70780: LD_VAR 0 3
70784: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70785: LD_INT 0
70787: PPUSH
// result := false ;
70788: LD_ADDR_VAR 0 4
70792: PUSH
70793: LD_INT 0
70795: ST_TO_ADDR
// if GetTaskList ( unit ) then
70796: LD_VAR 0 1
70800: PPUSH
70801: CALL_OW 437
70805: IFFALSE 70888
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70807: LD_STRING M
70809: PUSH
70810: LD_VAR 0 1
70814: PPUSH
70815: CALL_OW 437
70819: PUSH
70820: LD_INT 1
70822: ARRAY
70823: PUSH
70824: LD_INT 1
70826: ARRAY
70827: EQUAL
70828: PUSH
70829: LD_VAR 0 2
70833: PUSH
70834: LD_VAR 0 1
70838: PPUSH
70839: CALL_OW 437
70843: PUSH
70844: LD_INT 1
70846: ARRAY
70847: PUSH
70848: LD_INT 2
70850: ARRAY
70851: EQUAL
70852: AND
70853: PUSH
70854: LD_VAR 0 3
70858: PUSH
70859: LD_VAR 0 1
70863: PPUSH
70864: CALL_OW 437
70868: PUSH
70869: LD_INT 1
70871: ARRAY
70872: PUSH
70873: LD_INT 3
70875: ARRAY
70876: EQUAL
70877: AND
70878: IFFALSE 70888
// result := true ;
70880: LD_ADDR_VAR 0 4
70884: PUSH
70885: LD_INT 1
70887: ST_TO_ADDR
// end ; end ;
70888: LD_VAR 0 4
70892: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70893: LD_INT 0
70895: PPUSH
70896: PPUSH
70897: PPUSH
70898: PPUSH
// if not unit or not area then
70899: LD_VAR 0 1
70903: NOT
70904: PUSH
70905: LD_VAR 0 2
70909: NOT
70910: OR
70911: IFFALSE 70915
// exit ;
70913: GO 71091
// tmp := AreaToList ( area , i ) ;
70915: LD_ADDR_VAR 0 6
70919: PUSH
70920: LD_VAR 0 2
70924: PPUSH
70925: LD_VAR 0 5
70929: PPUSH
70930: CALL_OW 517
70934: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70935: LD_ADDR_VAR 0 5
70939: PUSH
70940: DOUBLE
70941: LD_INT 1
70943: DEC
70944: ST_TO_ADDR
70945: LD_VAR 0 6
70949: PUSH
70950: LD_INT 1
70952: ARRAY
70953: PUSH
70954: FOR_TO
70955: IFFALSE 71089
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70957: LD_ADDR_VAR 0 7
70961: PUSH
70962: LD_VAR 0 6
70966: PUSH
70967: LD_INT 1
70969: ARRAY
70970: PUSH
70971: LD_VAR 0 5
70975: ARRAY
70976: PUSH
70977: LD_VAR 0 6
70981: PUSH
70982: LD_INT 2
70984: ARRAY
70985: PUSH
70986: LD_VAR 0 5
70990: ARRAY
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70996: LD_INT 92
70998: PUSH
70999: LD_VAR 0 7
71003: PUSH
71004: LD_INT 1
71006: ARRAY
71007: PUSH
71008: LD_VAR 0 7
71012: PUSH
71013: LD_INT 2
71015: ARRAY
71016: PUSH
71017: LD_INT 2
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: PPUSH
71026: CALL_OW 69
71030: PUSH
71031: LD_INT 0
71033: EQUAL
71034: IFFALSE 71087
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71036: LD_VAR 0 1
71040: PPUSH
71041: LD_VAR 0 7
71045: PUSH
71046: LD_INT 1
71048: ARRAY
71049: PPUSH
71050: LD_VAR 0 7
71054: PUSH
71055: LD_INT 2
71057: ARRAY
71058: PPUSH
71059: LD_VAR 0 3
71063: PPUSH
71064: CALL_OW 48
// result := IsPlaced ( unit ) ;
71068: LD_ADDR_VAR 0 4
71072: PUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 305
71082: ST_TO_ADDR
// exit ;
71083: POP
71084: POP
71085: GO 71091
// end ; end ;
71087: GO 70954
71089: POP
71090: POP
// end ;
71091: LD_VAR 0 4
71095: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71096: LD_INT 0
71098: PPUSH
71099: PPUSH
71100: PPUSH
// if not side or side > 8 then
71101: LD_VAR 0 1
71105: NOT
71106: PUSH
71107: LD_VAR 0 1
71111: PUSH
71112: LD_INT 8
71114: GREATER
71115: OR
71116: IFFALSE 71120
// exit ;
71118: GO 71307
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71120: LD_ADDR_VAR 0 4
71124: PUSH
71125: LD_INT 22
71127: PUSH
71128: LD_VAR 0 1
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 21
71139: PUSH
71140: LD_INT 3
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PPUSH
71151: CALL_OW 69
71155: ST_TO_ADDR
// if not tmp then
71156: LD_VAR 0 4
71160: NOT
71161: IFFALSE 71165
// exit ;
71163: GO 71307
// enable_addtolog := true ;
71165: LD_ADDR_OWVAR 81
71169: PUSH
71170: LD_INT 1
71172: ST_TO_ADDR
// AddToLog ( [ ) ;
71173: LD_STRING [
71175: PPUSH
71176: CALL_OW 561
// for i in tmp do
71180: LD_ADDR_VAR 0 3
71184: PUSH
71185: LD_VAR 0 4
71189: PUSH
71190: FOR_IN
71191: IFFALSE 71298
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71193: LD_STRING [
71195: PUSH
71196: LD_VAR 0 3
71200: PPUSH
71201: CALL_OW 266
71205: STR
71206: PUSH
71207: LD_STRING , 
71209: STR
71210: PUSH
71211: LD_VAR 0 3
71215: PPUSH
71216: CALL_OW 250
71220: STR
71221: PUSH
71222: LD_STRING , 
71224: STR
71225: PUSH
71226: LD_VAR 0 3
71230: PPUSH
71231: CALL_OW 251
71235: STR
71236: PUSH
71237: LD_STRING , 
71239: STR
71240: PUSH
71241: LD_VAR 0 3
71245: PPUSH
71246: CALL_OW 254
71250: STR
71251: PUSH
71252: LD_STRING , 
71254: STR
71255: PUSH
71256: LD_VAR 0 3
71260: PPUSH
71261: LD_INT 1
71263: PPUSH
71264: CALL_OW 268
71268: STR
71269: PUSH
71270: LD_STRING , 
71272: STR
71273: PUSH
71274: LD_VAR 0 3
71278: PPUSH
71279: LD_INT 2
71281: PPUSH
71282: CALL_OW 268
71286: STR
71287: PUSH
71288: LD_STRING ],
71290: STR
71291: PPUSH
71292: CALL_OW 561
// end ;
71296: GO 71190
71298: POP
71299: POP
// AddToLog ( ]; ) ;
71300: LD_STRING ];
71302: PPUSH
71303: CALL_OW 561
// end ;
71307: LD_VAR 0 2
71311: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71312: LD_INT 0
71314: PPUSH
71315: PPUSH
71316: PPUSH
71317: PPUSH
71318: PPUSH
// if not area or not rate or not max then
71319: LD_VAR 0 1
71323: NOT
71324: PUSH
71325: LD_VAR 0 2
71329: NOT
71330: OR
71331: PUSH
71332: LD_VAR 0 4
71336: NOT
71337: OR
71338: IFFALSE 71342
// exit ;
71340: GO 71531
// while 1 do
71342: LD_INT 1
71344: IFFALSE 71531
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71346: LD_ADDR_VAR 0 9
71350: PUSH
71351: LD_VAR 0 1
71355: PPUSH
71356: LD_INT 1
71358: PPUSH
71359: CALL_OW 287
71363: PUSH
71364: LD_INT 10
71366: MUL
71367: ST_TO_ADDR
// r := rate / 10 ;
71368: LD_ADDR_VAR 0 7
71372: PUSH
71373: LD_VAR 0 2
71377: PUSH
71378: LD_INT 10
71380: DIVREAL
71381: ST_TO_ADDR
// time := 1 1$00 ;
71382: LD_ADDR_VAR 0 8
71386: PUSH
71387: LD_INT 2100
71389: ST_TO_ADDR
// if amount < min then
71390: LD_VAR 0 9
71394: PUSH
71395: LD_VAR 0 3
71399: LESS
71400: IFFALSE 71418
// r := r * 2 else
71402: LD_ADDR_VAR 0 7
71406: PUSH
71407: LD_VAR 0 7
71411: PUSH
71412: LD_INT 2
71414: MUL
71415: ST_TO_ADDR
71416: GO 71444
// if amount > max then
71418: LD_VAR 0 9
71422: PUSH
71423: LD_VAR 0 4
71427: GREATER
71428: IFFALSE 71444
// r := r / 2 ;
71430: LD_ADDR_VAR 0 7
71434: PUSH
71435: LD_VAR 0 7
71439: PUSH
71440: LD_INT 2
71442: DIVREAL
71443: ST_TO_ADDR
// time := time / r ;
71444: LD_ADDR_VAR 0 8
71448: PUSH
71449: LD_VAR 0 8
71453: PUSH
71454: LD_VAR 0 7
71458: DIVREAL
71459: ST_TO_ADDR
// if time < 0 then
71460: LD_VAR 0 8
71464: PUSH
71465: LD_INT 0
71467: LESS
71468: IFFALSE 71485
// time := time * - 1 ;
71470: LD_ADDR_VAR 0 8
71474: PUSH
71475: LD_VAR 0 8
71479: PUSH
71480: LD_INT 1
71482: NEG
71483: MUL
71484: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71485: LD_VAR 0 8
71489: PUSH
71490: LD_INT 35
71492: PPUSH
71493: LD_INT 875
71495: PPUSH
71496: CALL_OW 12
71500: PLUS
71501: PPUSH
71502: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71506: LD_INT 1
71508: PPUSH
71509: LD_INT 5
71511: PPUSH
71512: CALL_OW 12
71516: PPUSH
71517: LD_VAR 0 1
71521: PPUSH
71522: LD_INT 1
71524: PPUSH
71525: CALL_OW 55
// end ;
71529: GO 71342
// end ;
71531: LD_VAR 0 5
71535: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71536: LD_INT 0
71538: PPUSH
71539: PPUSH
71540: PPUSH
71541: PPUSH
71542: PPUSH
71543: PPUSH
71544: PPUSH
71545: PPUSH
// if not turrets or not factories then
71546: LD_VAR 0 1
71550: NOT
71551: PUSH
71552: LD_VAR 0 2
71556: NOT
71557: OR
71558: IFFALSE 71562
// exit ;
71560: GO 71869
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71562: LD_ADDR_VAR 0 10
71566: PUSH
71567: LD_INT 5
71569: PUSH
71570: LD_INT 6
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 2
71579: PUSH
71580: LD_INT 4
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 3
71589: PUSH
71590: LD_INT 5
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 24
71604: PUSH
71605: LD_INT 25
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 23
71614: PUSH
71615: LD_INT 27
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 42
71628: PUSH
71629: LD_INT 43
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 44
71638: PUSH
71639: LD_INT 46
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 45
71648: PUSH
71649: LD_INT 47
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: LIST
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: ST_TO_ADDR
// result := [ ] ;
71666: LD_ADDR_VAR 0 3
71670: PUSH
71671: EMPTY
71672: ST_TO_ADDR
// for i in turrets do
71673: LD_ADDR_VAR 0 4
71677: PUSH
71678: LD_VAR 0 1
71682: PUSH
71683: FOR_IN
71684: IFFALSE 71867
// begin nat := GetNation ( i ) ;
71686: LD_ADDR_VAR 0 7
71690: PUSH
71691: LD_VAR 0 4
71695: PPUSH
71696: CALL_OW 248
71700: ST_TO_ADDR
// weapon := 0 ;
71701: LD_ADDR_VAR 0 8
71705: PUSH
71706: LD_INT 0
71708: ST_TO_ADDR
// if not nat then
71709: LD_VAR 0 7
71713: NOT
71714: IFFALSE 71718
// continue ;
71716: GO 71683
// for j in list [ nat ] do
71718: LD_ADDR_VAR 0 5
71722: PUSH
71723: LD_VAR 0 10
71727: PUSH
71728: LD_VAR 0 7
71732: ARRAY
71733: PUSH
71734: FOR_IN
71735: IFFALSE 71776
// if GetBWeapon ( i ) = j [ 1 ] then
71737: LD_VAR 0 4
71741: PPUSH
71742: CALL_OW 269
71746: PUSH
71747: LD_VAR 0 5
71751: PUSH
71752: LD_INT 1
71754: ARRAY
71755: EQUAL
71756: IFFALSE 71774
// begin weapon := j [ 2 ] ;
71758: LD_ADDR_VAR 0 8
71762: PUSH
71763: LD_VAR 0 5
71767: PUSH
71768: LD_INT 2
71770: ARRAY
71771: ST_TO_ADDR
// break ;
71772: GO 71776
// end ;
71774: GO 71734
71776: POP
71777: POP
// if not weapon then
71778: LD_VAR 0 8
71782: NOT
71783: IFFALSE 71787
// continue ;
71785: GO 71683
// for k in factories do
71787: LD_ADDR_VAR 0 6
71791: PUSH
71792: LD_VAR 0 2
71796: PUSH
71797: FOR_IN
71798: IFFALSE 71863
// begin weapons := AvailableWeaponList ( k ) ;
71800: LD_ADDR_VAR 0 9
71804: PUSH
71805: LD_VAR 0 6
71809: PPUSH
71810: CALL_OW 478
71814: ST_TO_ADDR
// if not weapons then
71815: LD_VAR 0 9
71819: NOT
71820: IFFALSE 71824
// continue ;
71822: GO 71797
// if weapon in weapons then
71824: LD_VAR 0 8
71828: PUSH
71829: LD_VAR 0 9
71833: IN
71834: IFFALSE 71861
// begin result := [ i , weapon ] ;
71836: LD_ADDR_VAR 0 3
71840: PUSH
71841: LD_VAR 0 4
71845: PUSH
71846: LD_VAR 0 8
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: ST_TO_ADDR
// exit ;
71855: POP
71856: POP
71857: POP
71858: POP
71859: GO 71869
// end ; end ;
71861: GO 71797
71863: POP
71864: POP
// end ;
71865: GO 71683
71867: POP
71868: POP
// end ;
71869: LD_VAR 0 3
71873: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71874: LD_INT 0
71876: PPUSH
// if not side or side > 8 then
71877: LD_VAR 0 3
71881: NOT
71882: PUSH
71883: LD_VAR 0 3
71887: PUSH
71888: LD_INT 8
71890: GREATER
71891: OR
71892: IFFALSE 71896
// exit ;
71894: GO 71955
// if not range then
71896: LD_VAR 0 4
71900: NOT
71901: IFFALSE 71912
// range := - 12 ;
71903: LD_ADDR_VAR 0 4
71907: PUSH
71908: LD_INT 12
71910: NEG
71911: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71912: LD_VAR 0 1
71916: PPUSH
71917: LD_VAR 0 2
71921: PPUSH
71922: LD_VAR 0 3
71926: PPUSH
71927: LD_VAR 0 4
71931: PPUSH
71932: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71936: LD_VAR 0 1
71940: PPUSH
71941: LD_VAR 0 2
71945: PPUSH
71946: LD_VAR 0 3
71950: PPUSH
71951: CALL_OW 331
// end ;
71955: LD_VAR 0 5
71959: RET
// export function Video ( mode ) ; begin
71960: LD_INT 0
71962: PPUSH
// ingame_video = mode ;
71963: LD_ADDR_OWVAR 52
71967: PUSH
71968: LD_VAR 0 1
71972: ST_TO_ADDR
// interface_hidden = mode ;
71973: LD_ADDR_OWVAR 54
71977: PUSH
71978: LD_VAR 0 1
71982: ST_TO_ADDR
// end ;
71983: LD_VAR 0 2
71987: RET
// export function Join ( array , element ) ; begin
71988: LD_INT 0
71990: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71991: LD_ADDR_VAR 0 3
71995: PUSH
71996: LD_VAR 0 1
72000: PPUSH
72001: LD_VAR 0 1
72005: PUSH
72006: LD_INT 1
72008: PLUS
72009: PPUSH
72010: LD_VAR 0 2
72014: PPUSH
72015: CALL_OW 1
72019: ST_TO_ADDR
// end ;
72020: LD_VAR 0 3
72024: RET
// export function JoinUnion ( array , element ) ; begin
72025: LD_INT 0
72027: PPUSH
// result := array union element ;
72028: LD_ADDR_VAR 0 3
72032: PUSH
72033: LD_VAR 0 1
72037: PUSH
72038: LD_VAR 0 2
72042: UNION
72043: ST_TO_ADDR
// end ;
72044: LD_VAR 0 3
72048: RET
// export function GetBehemoths ( side ) ; begin
72049: LD_INT 0
72051: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72052: LD_ADDR_VAR 0 2
72056: PUSH
72057: LD_INT 22
72059: PUSH
72060: LD_VAR 0 1
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 31
72071: PUSH
72072: LD_INT 25
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PPUSH
72083: CALL_OW 69
72087: ST_TO_ADDR
// end ;
72088: LD_VAR 0 2
72092: RET
// export function Shuffle ( array ) ; var i , index ; begin
72093: LD_INT 0
72095: PPUSH
72096: PPUSH
72097: PPUSH
// result := [ ] ;
72098: LD_ADDR_VAR 0 2
72102: PUSH
72103: EMPTY
72104: ST_TO_ADDR
// if not array then
72105: LD_VAR 0 1
72109: NOT
72110: IFFALSE 72114
// exit ;
72112: GO 72213
// Randomize ;
72114: CALL_OW 10
// for i = array downto 1 do
72118: LD_ADDR_VAR 0 3
72122: PUSH
72123: DOUBLE
72124: LD_VAR 0 1
72128: INC
72129: ST_TO_ADDR
72130: LD_INT 1
72132: PUSH
72133: FOR_DOWNTO
72134: IFFALSE 72211
// begin index := rand ( 1 , array ) ;
72136: LD_ADDR_VAR 0 4
72140: PUSH
72141: LD_INT 1
72143: PPUSH
72144: LD_VAR 0 1
72148: PPUSH
72149: CALL_OW 12
72153: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72154: LD_ADDR_VAR 0 2
72158: PUSH
72159: LD_VAR 0 2
72163: PPUSH
72164: LD_VAR 0 2
72168: PUSH
72169: LD_INT 1
72171: PLUS
72172: PPUSH
72173: LD_VAR 0 1
72177: PUSH
72178: LD_VAR 0 4
72182: ARRAY
72183: PPUSH
72184: CALL_OW 2
72188: ST_TO_ADDR
// array := Delete ( array , index ) ;
72189: LD_ADDR_VAR 0 1
72193: PUSH
72194: LD_VAR 0 1
72198: PPUSH
72199: LD_VAR 0 4
72203: PPUSH
72204: CALL_OW 3
72208: ST_TO_ADDR
// end ;
72209: GO 72133
72211: POP
72212: POP
// end ;
72213: LD_VAR 0 2
72217: RET
// export function GetBaseMaterials ( base ) ; begin
72218: LD_INT 0
72220: PPUSH
// result := [ 0 , 0 , 0 ] ;
72221: LD_ADDR_VAR 0 2
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: LD_INT 0
72231: PUSH
72232: LD_INT 0
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: LIST
72239: ST_TO_ADDR
// if not base then
72240: LD_VAR 0 1
72244: NOT
72245: IFFALSE 72249
// exit ;
72247: GO 72298
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72249: LD_ADDR_VAR 0 2
72253: PUSH
72254: LD_VAR 0 1
72258: PPUSH
72259: LD_INT 1
72261: PPUSH
72262: CALL_OW 275
72266: PUSH
72267: LD_VAR 0 1
72271: PPUSH
72272: LD_INT 2
72274: PPUSH
72275: CALL_OW 275
72279: PUSH
72280: LD_VAR 0 1
72284: PPUSH
72285: LD_INT 3
72287: PPUSH
72288: CALL_OW 275
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: LIST
72297: ST_TO_ADDR
// end ;
72298: LD_VAR 0 2
72302: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72303: LD_INT 0
72305: PPUSH
72306: PPUSH
// result := array ;
72307: LD_ADDR_VAR 0 3
72311: PUSH
72312: LD_VAR 0 1
72316: ST_TO_ADDR
// if size >= result then
72317: LD_VAR 0 2
72321: PUSH
72322: LD_VAR 0 3
72326: GREATEREQUAL
72327: IFFALSE 72331
// exit ;
72329: GO 72381
// if size then
72331: LD_VAR 0 2
72335: IFFALSE 72381
// for i := array downto size do
72337: LD_ADDR_VAR 0 4
72341: PUSH
72342: DOUBLE
72343: LD_VAR 0 1
72347: INC
72348: ST_TO_ADDR
72349: LD_VAR 0 2
72353: PUSH
72354: FOR_DOWNTO
72355: IFFALSE 72379
// result := Delete ( result , result ) ;
72357: LD_ADDR_VAR 0 3
72361: PUSH
72362: LD_VAR 0 3
72366: PPUSH
72367: LD_VAR 0 3
72371: PPUSH
72372: CALL_OW 3
72376: ST_TO_ADDR
72377: GO 72354
72379: POP
72380: POP
// end ;
72381: LD_VAR 0 3
72385: RET
// export function ComExit ( unit ) ; var tmp ; begin
72386: LD_INT 0
72388: PPUSH
72389: PPUSH
// if not IsInUnit ( unit ) then
72390: LD_VAR 0 1
72394: PPUSH
72395: CALL_OW 310
72399: NOT
72400: IFFALSE 72404
// exit ;
72402: GO 72464
// tmp := IsInUnit ( unit ) ;
72404: LD_ADDR_VAR 0 3
72408: PUSH
72409: LD_VAR 0 1
72413: PPUSH
72414: CALL_OW 310
72418: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72419: LD_VAR 0 3
72423: PPUSH
72424: CALL_OW 247
72428: PUSH
72429: LD_INT 2
72431: EQUAL
72432: IFFALSE 72445
// ComExitVehicle ( unit ) else
72434: LD_VAR 0 1
72438: PPUSH
72439: CALL_OW 121
72443: GO 72454
// ComExitBuilding ( unit ) ;
72445: LD_VAR 0 1
72449: PPUSH
72450: CALL_OW 122
// result := tmp ;
72454: LD_ADDR_VAR 0 2
72458: PUSH
72459: LD_VAR 0 3
72463: ST_TO_ADDR
// end ;
72464: LD_VAR 0 2
72468: RET
// export function ComExitAll ( units ) ; var i ; begin
72469: LD_INT 0
72471: PPUSH
72472: PPUSH
// if not units then
72473: LD_VAR 0 1
72477: NOT
72478: IFFALSE 72482
// exit ;
72480: GO 72508
// for i in units do
72482: LD_ADDR_VAR 0 3
72486: PUSH
72487: LD_VAR 0 1
72491: PUSH
72492: FOR_IN
72493: IFFALSE 72506
// ComExit ( i ) ;
72495: LD_VAR 0 3
72499: PPUSH
72500: CALL 72386 0 1
72504: GO 72492
72506: POP
72507: POP
// end ;
72508: LD_VAR 0 2
72512: RET
// export function ResetHc ; begin
72513: LD_INT 0
72515: PPUSH
// InitHc ;
72516: CALL_OW 19
// hc_importance := 0 ;
72520: LD_ADDR_OWVAR 32
72524: PUSH
72525: LD_INT 0
72527: ST_TO_ADDR
// end ;
72528: LD_VAR 0 1
72532: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72533: LD_INT 0
72535: PPUSH
72536: PPUSH
72537: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72538: LD_ADDR_VAR 0 6
72542: PUSH
72543: LD_VAR 0 1
72547: PUSH
72548: LD_VAR 0 3
72552: PLUS
72553: PUSH
72554: LD_INT 2
72556: DIV
72557: ST_TO_ADDR
// if _x < 0 then
72558: LD_VAR 0 6
72562: PUSH
72563: LD_INT 0
72565: LESS
72566: IFFALSE 72583
// _x := _x * - 1 ;
72568: LD_ADDR_VAR 0 6
72572: PUSH
72573: LD_VAR 0 6
72577: PUSH
72578: LD_INT 1
72580: NEG
72581: MUL
72582: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72583: LD_ADDR_VAR 0 7
72587: PUSH
72588: LD_VAR 0 2
72592: PUSH
72593: LD_VAR 0 4
72597: PLUS
72598: PUSH
72599: LD_INT 2
72601: DIV
72602: ST_TO_ADDR
// if _y < 0 then
72603: LD_VAR 0 7
72607: PUSH
72608: LD_INT 0
72610: LESS
72611: IFFALSE 72628
// _y := _y * - 1 ;
72613: LD_ADDR_VAR 0 7
72617: PUSH
72618: LD_VAR 0 7
72622: PUSH
72623: LD_INT 1
72625: NEG
72626: MUL
72627: ST_TO_ADDR
// result := [ _x , _y ] ;
72628: LD_ADDR_VAR 0 5
72632: PUSH
72633: LD_VAR 0 6
72637: PUSH
72638: LD_VAR 0 7
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: ST_TO_ADDR
// end ;
72647: LD_VAR 0 5
72651: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72652: LD_INT 0
72654: PPUSH
72655: PPUSH
72656: PPUSH
72657: PPUSH
// task := GetTaskList ( unit ) ;
72658: LD_ADDR_VAR 0 7
72662: PUSH
72663: LD_VAR 0 1
72667: PPUSH
72668: CALL_OW 437
72672: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72673: LD_VAR 0 7
72677: NOT
72678: PUSH
72679: LD_VAR 0 1
72683: PPUSH
72684: LD_VAR 0 2
72688: PPUSH
72689: CALL_OW 308
72693: NOT
72694: AND
72695: IFFALSE 72699
// exit ;
72697: GO 72817
// if IsInArea ( unit , area ) then
72699: LD_VAR 0 1
72703: PPUSH
72704: LD_VAR 0 2
72708: PPUSH
72709: CALL_OW 308
72713: IFFALSE 72731
// begin ComMoveToArea ( unit , goAway ) ;
72715: LD_VAR 0 1
72719: PPUSH
72720: LD_VAR 0 3
72724: PPUSH
72725: CALL_OW 113
// exit ;
72729: GO 72817
// end ; if task [ 1 ] [ 1 ] <> M then
72731: LD_VAR 0 7
72735: PUSH
72736: LD_INT 1
72738: ARRAY
72739: PUSH
72740: LD_INT 1
72742: ARRAY
72743: PUSH
72744: LD_STRING M
72746: NONEQUAL
72747: IFFALSE 72751
// exit ;
72749: GO 72817
// x := task [ 1 ] [ 2 ] ;
72751: LD_ADDR_VAR 0 5
72755: PUSH
72756: LD_VAR 0 7
72760: PUSH
72761: LD_INT 1
72763: ARRAY
72764: PUSH
72765: LD_INT 2
72767: ARRAY
72768: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72769: LD_ADDR_VAR 0 6
72773: PUSH
72774: LD_VAR 0 7
72778: PUSH
72779: LD_INT 1
72781: ARRAY
72782: PUSH
72783: LD_INT 3
72785: ARRAY
72786: ST_TO_ADDR
// if InArea ( x , y , area ) then
72787: LD_VAR 0 5
72791: PPUSH
72792: LD_VAR 0 6
72796: PPUSH
72797: LD_VAR 0 2
72801: PPUSH
72802: CALL_OW 309
72806: IFFALSE 72817
// ComStop ( unit ) ;
72808: LD_VAR 0 1
72812: PPUSH
72813: CALL_OW 141
// end ;
72817: LD_VAR 0 4
72821: RET
// export function Abs ( value ) ; begin
72822: LD_INT 0
72824: PPUSH
// result := value ;
72825: LD_ADDR_VAR 0 2
72829: PUSH
72830: LD_VAR 0 1
72834: ST_TO_ADDR
// if value < 0 then
72835: LD_VAR 0 1
72839: PUSH
72840: LD_INT 0
72842: LESS
72843: IFFALSE 72860
// result := value * - 1 ;
72845: LD_ADDR_VAR 0 2
72849: PUSH
72850: LD_VAR 0 1
72854: PUSH
72855: LD_INT 1
72857: NEG
72858: MUL
72859: ST_TO_ADDR
// end ;
72860: LD_VAR 0 2
72864: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72865: LD_INT 0
72867: PPUSH
72868: PPUSH
72869: PPUSH
72870: PPUSH
72871: PPUSH
72872: PPUSH
72873: PPUSH
72874: PPUSH
// if not unit or not building then
72875: LD_VAR 0 1
72879: NOT
72880: PUSH
72881: LD_VAR 0 2
72885: NOT
72886: OR
72887: IFFALSE 72891
// exit ;
72889: GO 73117
// x := GetX ( building ) ;
72891: LD_ADDR_VAR 0 4
72895: PUSH
72896: LD_VAR 0 2
72900: PPUSH
72901: CALL_OW 250
72905: ST_TO_ADDR
// y := GetY ( building ) ;
72906: LD_ADDR_VAR 0 6
72910: PUSH
72911: LD_VAR 0 2
72915: PPUSH
72916: CALL_OW 251
72920: ST_TO_ADDR
// d := GetDir ( building ) ;
72921: LD_ADDR_VAR 0 8
72925: PUSH
72926: LD_VAR 0 2
72930: PPUSH
72931: CALL_OW 254
72935: ST_TO_ADDR
// r := 4 ;
72936: LD_ADDR_VAR 0 9
72940: PUSH
72941: LD_INT 4
72943: ST_TO_ADDR
// for i := 1 to 5 do
72944: LD_ADDR_VAR 0 10
72948: PUSH
72949: DOUBLE
72950: LD_INT 1
72952: DEC
72953: ST_TO_ADDR
72954: LD_INT 5
72956: PUSH
72957: FOR_TO
72958: IFFALSE 73115
// begin _x := ShiftX ( x , d , r + i ) ;
72960: LD_ADDR_VAR 0 5
72964: PUSH
72965: LD_VAR 0 4
72969: PPUSH
72970: LD_VAR 0 8
72974: PPUSH
72975: LD_VAR 0 9
72979: PUSH
72980: LD_VAR 0 10
72984: PLUS
72985: PPUSH
72986: CALL_OW 272
72990: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72991: LD_ADDR_VAR 0 7
72995: PUSH
72996: LD_VAR 0 6
73000: PPUSH
73001: LD_VAR 0 8
73005: PPUSH
73006: LD_VAR 0 9
73010: PUSH
73011: LD_VAR 0 10
73015: PLUS
73016: PPUSH
73017: CALL_OW 273
73021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73022: LD_VAR 0 5
73026: PPUSH
73027: LD_VAR 0 7
73031: PPUSH
73032: CALL_OW 488
73036: PUSH
73037: LD_VAR 0 5
73041: PPUSH
73042: LD_VAR 0 7
73046: PPUSH
73047: CALL_OW 428
73051: PPUSH
73052: CALL_OW 247
73056: PUSH
73057: LD_INT 3
73059: PUSH
73060: LD_INT 2
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: IN
73067: NOT
73068: AND
73069: IFFALSE 73113
// begin ComMoveXY ( unit , _x , _y ) ;
73071: LD_VAR 0 1
73075: PPUSH
73076: LD_VAR 0 5
73080: PPUSH
73081: LD_VAR 0 7
73085: PPUSH
73086: CALL_OW 111
// result := [ _x , _y ] ;
73090: LD_ADDR_VAR 0 3
73094: PUSH
73095: LD_VAR 0 5
73099: PUSH
73100: LD_VAR 0 7
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: ST_TO_ADDR
// exit ;
73109: POP
73110: POP
73111: GO 73117
// end ; end ;
73113: GO 72957
73115: POP
73116: POP
// end ;
73117: LD_VAR 0 3
73121: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73122: LD_INT 0
73124: PPUSH
73125: PPUSH
73126: PPUSH
// result := 0 ;
73127: LD_ADDR_VAR 0 3
73131: PUSH
73132: LD_INT 0
73134: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73135: LD_VAR 0 1
73139: PUSH
73140: LD_INT 0
73142: LESS
73143: PUSH
73144: LD_VAR 0 1
73148: PUSH
73149: LD_INT 8
73151: GREATER
73152: OR
73153: PUSH
73154: LD_VAR 0 2
73158: PUSH
73159: LD_INT 0
73161: LESS
73162: OR
73163: PUSH
73164: LD_VAR 0 2
73168: PUSH
73169: LD_INT 8
73171: GREATER
73172: OR
73173: IFFALSE 73177
// exit ;
73175: GO 73252
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73177: LD_ADDR_VAR 0 4
73181: PUSH
73182: LD_INT 22
73184: PUSH
73185: LD_VAR 0 2
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: PPUSH
73194: CALL_OW 69
73198: PUSH
73199: FOR_IN
73200: IFFALSE 73250
// begin un := UnitShoot ( i ) ;
73202: LD_ADDR_VAR 0 5
73206: PUSH
73207: LD_VAR 0 4
73211: PPUSH
73212: CALL_OW 504
73216: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73217: LD_VAR 0 5
73221: PPUSH
73222: CALL_OW 255
73226: PUSH
73227: LD_VAR 0 1
73231: EQUAL
73232: IFFALSE 73248
// begin result := un ;
73234: LD_ADDR_VAR 0 3
73238: PUSH
73239: LD_VAR 0 5
73243: ST_TO_ADDR
// exit ;
73244: POP
73245: POP
73246: GO 73252
// end ; end ;
73248: GO 73199
73250: POP
73251: POP
// end ;
73252: LD_VAR 0 3
73256: RET
// export function GetCargoBay ( units ) ; begin
73257: LD_INT 0
73259: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73260: LD_ADDR_VAR 0 2
73264: PUSH
73265: LD_VAR 0 1
73269: PPUSH
73270: LD_INT 2
73272: PUSH
73273: LD_INT 34
73275: PUSH
73276: LD_INT 12
73278: PUSH
73279: EMPTY
73280: LIST
73281: LIST
73282: PUSH
73283: LD_INT 34
73285: PUSH
73286: LD_INT 51
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 34
73295: PUSH
73296: LD_INT 32
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 34
73305: PUSH
73306: LD_INT 89
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: PPUSH
73320: CALL_OW 72
73324: ST_TO_ADDR
// end ;
73325: LD_VAR 0 2
73329: RET
// export function Negate ( value ) ; begin
73330: LD_INT 0
73332: PPUSH
// result := not value ;
73333: LD_ADDR_VAR 0 2
73337: PUSH
73338: LD_VAR 0 1
73342: NOT
73343: ST_TO_ADDR
// end ;
73344: LD_VAR 0 2
73348: RET
// export function Inc ( value ) ; begin
73349: LD_INT 0
73351: PPUSH
// result := value + 1 ;
73352: LD_ADDR_VAR 0 2
73356: PUSH
73357: LD_VAR 0 1
73361: PUSH
73362: LD_INT 1
73364: PLUS
73365: ST_TO_ADDR
// end ;
73366: LD_VAR 0 2
73370: RET
// export function Dec ( value ) ; begin
73371: LD_INT 0
73373: PPUSH
// result := value - 1 ;
73374: LD_ADDR_VAR 0 2
73378: PUSH
73379: LD_VAR 0 1
73383: PUSH
73384: LD_INT 1
73386: MINUS
73387: ST_TO_ADDR
// end ;
73388: LD_VAR 0 2
73392: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73393: LD_INT 0
73395: PPUSH
73396: PPUSH
73397: PPUSH
73398: PPUSH
73399: PPUSH
73400: PPUSH
73401: PPUSH
73402: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73403: LD_VAR 0 1
73407: PPUSH
73408: LD_VAR 0 2
73412: PPUSH
73413: CALL_OW 488
73417: NOT
73418: PUSH
73419: LD_VAR 0 3
73423: PPUSH
73424: LD_VAR 0 4
73428: PPUSH
73429: CALL_OW 488
73433: NOT
73434: OR
73435: IFFALSE 73448
// begin result := - 1 ;
73437: LD_ADDR_VAR 0 5
73441: PUSH
73442: LD_INT 1
73444: NEG
73445: ST_TO_ADDR
// exit ;
73446: GO 73683
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73448: LD_ADDR_VAR 0 12
73452: PUSH
73453: LD_VAR 0 1
73457: PPUSH
73458: LD_VAR 0 2
73462: PPUSH
73463: LD_VAR 0 3
73467: PPUSH
73468: LD_VAR 0 4
73472: PPUSH
73473: CALL 72533 0 4
73477: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73478: LD_ADDR_VAR 0 11
73482: PUSH
73483: LD_VAR 0 1
73487: PPUSH
73488: LD_VAR 0 2
73492: PPUSH
73493: LD_VAR 0 12
73497: PUSH
73498: LD_INT 1
73500: ARRAY
73501: PPUSH
73502: LD_VAR 0 12
73506: PUSH
73507: LD_INT 2
73509: ARRAY
73510: PPUSH
73511: CALL_OW 298
73515: ST_TO_ADDR
// distance := 9999 ;
73516: LD_ADDR_VAR 0 10
73520: PUSH
73521: LD_INT 9999
73523: ST_TO_ADDR
// for i := 0 to 5 do
73524: LD_ADDR_VAR 0 6
73528: PUSH
73529: DOUBLE
73530: LD_INT 0
73532: DEC
73533: ST_TO_ADDR
73534: LD_INT 5
73536: PUSH
73537: FOR_TO
73538: IFFALSE 73681
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73540: LD_ADDR_VAR 0 7
73544: PUSH
73545: LD_VAR 0 1
73549: PPUSH
73550: LD_VAR 0 6
73554: PPUSH
73555: LD_VAR 0 11
73559: PPUSH
73560: CALL_OW 272
73564: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73565: LD_ADDR_VAR 0 8
73569: PUSH
73570: LD_VAR 0 2
73574: PPUSH
73575: LD_VAR 0 6
73579: PPUSH
73580: LD_VAR 0 11
73584: PPUSH
73585: CALL_OW 273
73589: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73590: LD_VAR 0 7
73594: PPUSH
73595: LD_VAR 0 8
73599: PPUSH
73600: CALL_OW 488
73604: NOT
73605: IFFALSE 73609
// continue ;
73607: GO 73537
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73609: LD_ADDR_VAR 0 9
73613: PUSH
73614: LD_VAR 0 12
73618: PUSH
73619: LD_INT 1
73621: ARRAY
73622: PPUSH
73623: LD_VAR 0 12
73627: PUSH
73628: LD_INT 2
73630: ARRAY
73631: PPUSH
73632: LD_VAR 0 7
73636: PPUSH
73637: LD_VAR 0 8
73641: PPUSH
73642: CALL_OW 298
73646: ST_TO_ADDR
// if tmp < distance then
73647: LD_VAR 0 9
73651: PUSH
73652: LD_VAR 0 10
73656: LESS
73657: IFFALSE 73679
// begin result := i ;
73659: LD_ADDR_VAR 0 5
73663: PUSH
73664: LD_VAR 0 6
73668: ST_TO_ADDR
// distance := tmp ;
73669: LD_ADDR_VAR 0 10
73673: PUSH
73674: LD_VAR 0 9
73678: ST_TO_ADDR
// end ; end ;
73679: GO 73537
73681: POP
73682: POP
// end ;
73683: LD_VAR 0 5
73687: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73688: LD_INT 0
73690: PPUSH
73691: PPUSH
// if not driver or not IsInUnit ( driver ) then
73692: LD_VAR 0 1
73696: NOT
73697: PUSH
73698: LD_VAR 0 1
73702: PPUSH
73703: CALL_OW 310
73707: NOT
73708: OR
73709: IFFALSE 73713
// exit ;
73711: GO 73803
// vehicle := IsInUnit ( driver ) ;
73713: LD_ADDR_VAR 0 3
73717: PUSH
73718: LD_VAR 0 1
73722: PPUSH
73723: CALL_OW 310
73727: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73728: LD_VAR 0 1
73732: PPUSH
73733: LD_STRING \
73735: PUSH
73736: LD_INT 0
73738: PUSH
73739: LD_INT 0
73741: PUSH
73742: LD_INT 0
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: LD_INT 0
73750: PUSH
73751: LD_INT 0
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: PUSH
73763: LD_STRING E
73765: PUSH
73766: LD_INT 0
73768: PUSH
73769: LD_INT 0
73771: PUSH
73772: LD_VAR 0 3
73776: PUSH
73777: LD_INT 0
73779: PUSH
73780: LD_INT 0
73782: PUSH
73783: LD_INT 0
73785: PUSH
73786: EMPTY
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PPUSH
73799: CALL_OW 446
// end ;
73803: LD_VAR 0 2
73807: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73808: LD_INT 0
73810: PPUSH
73811: PPUSH
// if not driver or not IsInUnit ( driver ) then
73812: LD_VAR 0 1
73816: NOT
73817: PUSH
73818: LD_VAR 0 1
73822: PPUSH
73823: CALL_OW 310
73827: NOT
73828: OR
73829: IFFALSE 73833
// exit ;
73831: GO 73923
// vehicle := IsInUnit ( driver ) ;
73833: LD_ADDR_VAR 0 3
73837: PUSH
73838: LD_VAR 0 1
73842: PPUSH
73843: CALL_OW 310
73847: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73848: LD_VAR 0 1
73852: PPUSH
73853: LD_STRING \
73855: PUSH
73856: LD_INT 0
73858: PUSH
73859: LD_INT 0
73861: PUSH
73862: LD_INT 0
73864: PUSH
73865: LD_INT 0
73867: PUSH
73868: LD_INT 0
73870: PUSH
73871: LD_INT 0
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: LIST
73878: LIST
73879: LIST
73880: LIST
73881: LIST
73882: PUSH
73883: LD_STRING E
73885: PUSH
73886: LD_INT 0
73888: PUSH
73889: LD_INT 0
73891: PUSH
73892: LD_VAR 0 3
73896: PUSH
73897: LD_INT 0
73899: PUSH
73900: LD_INT 0
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: PUSH
73915: EMPTY
73916: LIST
73917: LIST
73918: PPUSH
73919: CALL_OW 447
// end ;
73923: LD_VAR 0 2
73927: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73928: LD_INT 0
73930: PPUSH
73931: PPUSH
73932: PPUSH
// tmp := [ ] ;
73933: LD_ADDR_VAR 0 5
73937: PUSH
73938: EMPTY
73939: ST_TO_ADDR
// for i in units do
73940: LD_ADDR_VAR 0 4
73944: PUSH
73945: LD_VAR 0 1
73949: PUSH
73950: FOR_IN
73951: IFFALSE 73989
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73953: LD_ADDR_VAR 0 5
73957: PUSH
73958: LD_VAR 0 5
73962: PPUSH
73963: LD_VAR 0 5
73967: PUSH
73968: LD_INT 1
73970: PLUS
73971: PPUSH
73972: LD_VAR 0 4
73976: PPUSH
73977: CALL_OW 256
73981: PPUSH
73982: CALL_OW 2
73986: ST_TO_ADDR
73987: GO 73950
73989: POP
73990: POP
// if not tmp then
73991: LD_VAR 0 5
73995: NOT
73996: IFFALSE 74000
// exit ;
73998: GO 74048
// if asc then
74000: LD_VAR 0 2
74004: IFFALSE 74028
// result := SortListByListAsc ( units , tmp ) else
74006: LD_ADDR_VAR 0 3
74010: PUSH
74011: LD_VAR 0 1
74015: PPUSH
74016: LD_VAR 0 5
74020: PPUSH
74021: CALL_OW 76
74025: ST_TO_ADDR
74026: GO 74048
// result := SortListByListDesc ( units , tmp ) ;
74028: LD_ADDR_VAR 0 3
74032: PUSH
74033: LD_VAR 0 1
74037: PPUSH
74038: LD_VAR 0 5
74042: PPUSH
74043: CALL_OW 77
74047: ST_TO_ADDR
// end ;
74048: LD_VAR 0 3
74052: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74053: LD_INT 0
74055: PPUSH
74056: PPUSH
// task := GetTaskList ( mech ) ;
74057: LD_ADDR_VAR 0 4
74061: PUSH
74062: LD_VAR 0 1
74066: PPUSH
74067: CALL_OW 437
74071: ST_TO_ADDR
// if not task then
74072: LD_VAR 0 4
74076: NOT
74077: IFFALSE 74081
// exit ;
74079: GO 74123
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74081: LD_ADDR_VAR 0 3
74085: PUSH
74086: LD_VAR 0 4
74090: PUSH
74091: LD_INT 1
74093: ARRAY
74094: PUSH
74095: LD_INT 1
74097: ARRAY
74098: PUSH
74099: LD_STRING r
74101: EQUAL
74102: PUSH
74103: LD_VAR 0 4
74107: PUSH
74108: LD_INT 1
74110: ARRAY
74111: PUSH
74112: LD_INT 4
74114: ARRAY
74115: PUSH
74116: LD_VAR 0 2
74120: EQUAL
74121: AND
74122: ST_TO_ADDR
// end ;
74123: LD_VAR 0 3
74127: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74128: LD_INT 0
74130: PPUSH
// SetDir ( unit , d ) ;
74131: LD_VAR 0 1
74135: PPUSH
74136: LD_VAR 0 4
74140: PPUSH
74141: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74145: LD_VAR 0 1
74149: PPUSH
74150: LD_VAR 0 2
74154: PPUSH
74155: LD_VAR 0 3
74159: PPUSH
74160: LD_VAR 0 5
74164: PPUSH
74165: CALL_OW 48
// end ;
74169: LD_VAR 0 6
74173: RET
// export function ToNaturalNumber ( number ) ; begin
74174: LD_INT 0
74176: PPUSH
// result := number div 1 ;
74177: LD_ADDR_VAR 0 2
74181: PUSH
74182: LD_VAR 0 1
74186: PUSH
74187: LD_INT 1
74189: DIV
74190: ST_TO_ADDR
// if number < 0 then
74191: LD_VAR 0 1
74195: PUSH
74196: LD_INT 0
74198: LESS
74199: IFFALSE 74209
// result := 0 ;
74201: LD_ADDR_VAR 0 2
74205: PUSH
74206: LD_INT 0
74208: ST_TO_ADDR
// end ;
74209: LD_VAR 0 2
74213: RET
// export function SortByClass ( units , class ) ; var un ; begin
74214: LD_INT 0
74216: PPUSH
74217: PPUSH
// if not units or not class then
74218: LD_VAR 0 1
74222: NOT
74223: PUSH
74224: LD_VAR 0 2
74228: NOT
74229: OR
74230: IFFALSE 74234
// exit ;
74232: GO 74329
// result := [ ] ;
74234: LD_ADDR_VAR 0 3
74238: PUSH
74239: EMPTY
74240: ST_TO_ADDR
// for un in units do
74241: LD_ADDR_VAR 0 4
74245: PUSH
74246: LD_VAR 0 1
74250: PUSH
74251: FOR_IN
74252: IFFALSE 74327
// if GetClass ( un ) = class then
74254: LD_VAR 0 4
74258: PPUSH
74259: CALL_OW 257
74263: PUSH
74264: LD_VAR 0 2
74268: EQUAL
74269: IFFALSE 74296
// result := Insert ( result , 1 , un ) else
74271: LD_ADDR_VAR 0 3
74275: PUSH
74276: LD_VAR 0 3
74280: PPUSH
74281: LD_INT 1
74283: PPUSH
74284: LD_VAR 0 4
74288: PPUSH
74289: CALL_OW 2
74293: ST_TO_ADDR
74294: GO 74325
// result := Replace ( result , result + 1 , un ) ;
74296: LD_ADDR_VAR 0 3
74300: PUSH
74301: LD_VAR 0 3
74305: PPUSH
74306: LD_VAR 0 3
74310: PUSH
74311: LD_INT 1
74313: PLUS
74314: PPUSH
74315: LD_VAR 0 4
74319: PPUSH
74320: CALL_OW 1
74324: ST_TO_ADDR
74325: GO 74251
74327: POP
74328: POP
// end ;
74329: LD_VAR 0 3
74333: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74334: LD_INT 0
74336: PPUSH
74337: PPUSH
74338: PPUSH
74339: PPUSH
74340: PPUSH
74341: PPUSH
74342: PPUSH
// result := [ ] ;
74343: LD_ADDR_VAR 0 4
74347: PUSH
74348: EMPTY
74349: ST_TO_ADDR
// if x - r < 0 then
74350: LD_VAR 0 1
74354: PUSH
74355: LD_VAR 0 3
74359: MINUS
74360: PUSH
74361: LD_INT 0
74363: LESS
74364: IFFALSE 74376
// min_x := 0 else
74366: LD_ADDR_VAR 0 8
74370: PUSH
74371: LD_INT 0
74373: ST_TO_ADDR
74374: GO 74392
// min_x := x - r ;
74376: LD_ADDR_VAR 0 8
74380: PUSH
74381: LD_VAR 0 1
74385: PUSH
74386: LD_VAR 0 3
74390: MINUS
74391: ST_TO_ADDR
// if y - r < 0 then
74392: LD_VAR 0 2
74396: PUSH
74397: LD_VAR 0 3
74401: MINUS
74402: PUSH
74403: LD_INT 0
74405: LESS
74406: IFFALSE 74418
// min_y := 0 else
74408: LD_ADDR_VAR 0 7
74412: PUSH
74413: LD_INT 0
74415: ST_TO_ADDR
74416: GO 74434
// min_y := y - r ;
74418: LD_ADDR_VAR 0 7
74422: PUSH
74423: LD_VAR 0 2
74427: PUSH
74428: LD_VAR 0 3
74432: MINUS
74433: ST_TO_ADDR
// max_x := x + r ;
74434: LD_ADDR_VAR 0 9
74438: PUSH
74439: LD_VAR 0 1
74443: PUSH
74444: LD_VAR 0 3
74448: PLUS
74449: ST_TO_ADDR
// max_y := y + r ;
74450: LD_ADDR_VAR 0 10
74454: PUSH
74455: LD_VAR 0 2
74459: PUSH
74460: LD_VAR 0 3
74464: PLUS
74465: ST_TO_ADDR
// for _x = min_x to max_x do
74466: LD_ADDR_VAR 0 5
74470: PUSH
74471: DOUBLE
74472: LD_VAR 0 8
74476: DEC
74477: ST_TO_ADDR
74478: LD_VAR 0 9
74482: PUSH
74483: FOR_TO
74484: IFFALSE 74585
// for _y = min_y to max_y do
74486: LD_ADDR_VAR 0 6
74490: PUSH
74491: DOUBLE
74492: LD_VAR 0 7
74496: DEC
74497: ST_TO_ADDR
74498: LD_VAR 0 10
74502: PUSH
74503: FOR_TO
74504: IFFALSE 74581
// begin if not ValidHex ( _x , _y ) then
74506: LD_VAR 0 5
74510: PPUSH
74511: LD_VAR 0 6
74515: PPUSH
74516: CALL_OW 488
74520: NOT
74521: IFFALSE 74525
// continue ;
74523: GO 74503
// if GetResourceTypeXY ( _x , _y ) then
74525: LD_VAR 0 5
74529: PPUSH
74530: LD_VAR 0 6
74534: PPUSH
74535: CALL_OW 283
74539: IFFALSE 74579
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74541: LD_ADDR_VAR 0 4
74545: PUSH
74546: LD_VAR 0 4
74550: PPUSH
74551: LD_VAR 0 4
74555: PUSH
74556: LD_INT 1
74558: PLUS
74559: PPUSH
74560: LD_VAR 0 5
74564: PUSH
74565: LD_VAR 0 6
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PPUSH
74574: CALL_OW 1
74578: ST_TO_ADDR
// end ;
74579: GO 74503
74581: POP
74582: POP
74583: GO 74483
74585: POP
74586: POP
// end ;
74587: LD_VAR 0 4
74591: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74592: LD_INT 0
74594: PPUSH
74595: PPUSH
74596: PPUSH
74597: PPUSH
74598: PPUSH
74599: PPUSH
74600: PPUSH
74601: PPUSH
// if not units then
74602: LD_VAR 0 1
74606: NOT
74607: IFFALSE 74611
// exit ;
74609: GO 75139
// result := UnitFilter ( units , [ f_ok ] ) ;
74611: LD_ADDR_VAR 0 3
74615: PUSH
74616: LD_VAR 0 1
74620: PPUSH
74621: LD_INT 50
74623: PUSH
74624: EMPTY
74625: LIST
74626: PPUSH
74627: CALL_OW 72
74631: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74632: LD_ADDR_VAR 0 8
74636: PUSH
74637: LD_VAR 0 1
74641: PUSH
74642: LD_INT 1
74644: ARRAY
74645: PPUSH
74646: CALL_OW 255
74650: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74651: LD_ADDR_VAR 0 10
74655: PUSH
74656: LD_INT 29
74658: PUSH
74659: LD_INT 91
74661: PUSH
74662: LD_INT 49
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: LIST
74669: ST_TO_ADDR
// if not result then
74670: LD_VAR 0 3
74674: NOT
74675: IFFALSE 74679
// exit ;
74677: GO 75139
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74679: LD_ADDR_VAR 0 5
74683: PUSH
74684: LD_INT 81
74686: PUSH
74687: LD_VAR 0 8
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PPUSH
74696: CALL_OW 69
74700: ST_TO_ADDR
// for i in result do
74701: LD_ADDR_VAR 0 4
74705: PUSH
74706: LD_VAR 0 3
74710: PUSH
74711: FOR_IN
74712: IFFALSE 75137
// begin tag := GetTag ( i ) + 1 ;
74714: LD_ADDR_VAR 0 9
74718: PUSH
74719: LD_VAR 0 4
74723: PPUSH
74724: CALL_OW 110
74728: PUSH
74729: LD_INT 1
74731: PLUS
74732: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74733: LD_ADDR_VAR 0 7
74737: PUSH
74738: LD_VAR 0 4
74742: PPUSH
74743: CALL_OW 250
74747: PPUSH
74748: LD_VAR 0 4
74752: PPUSH
74753: CALL_OW 251
74757: PPUSH
74758: LD_INT 4
74760: PPUSH
74761: CALL 74334 0 3
74765: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74766: LD_VAR 0 4
74770: PPUSH
74771: CALL_OW 247
74775: PUSH
74776: LD_INT 2
74778: EQUAL
74779: PUSH
74780: LD_VAR 0 7
74784: PUSH
74785: LD_INT 2
74787: GREATER
74788: AND
74789: PUSH
74790: LD_VAR 0 4
74794: PPUSH
74795: CALL_OW 264
74799: PUSH
74800: LD_VAR 0 10
74804: IN
74805: NOT
74806: AND
74807: IFFALSE 74846
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74809: LD_VAR 0 4
74813: PPUSH
74814: LD_VAR 0 7
74818: PUSH
74819: LD_INT 1
74821: ARRAY
74822: PUSH
74823: LD_INT 1
74825: ARRAY
74826: PPUSH
74827: LD_VAR 0 7
74831: PUSH
74832: LD_INT 1
74834: ARRAY
74835: PUSH
74836: LD_INT 2
74838: ARRAY
74839: PPUSH
74840: CALL_OW 116
74844: GO 75135
// if path > tag then
74846: LD_VAR 0 2
74850: PUSH
74851: LD_VAR 0 9
74855: GREATER
74856: IFFALSE 75064
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74858: LD_ADDR_VAR 0 6
74862: PUSH
74863: LD_VAR 0 5
74867: PPUSH
74868: LD_INT 91
74870: PUSH
74871: LD_VAR 0 4
74875: PUSH
74876: LD_INT 8
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: LIST
74883: PPUSH
74884: CALL_OW 72
74888: ST_TO_ADDR
// if nearEnemy then
74889: LD_VAR 0 6
74893: IFFALSE 74962
// begin if GetWeapon ( i ) = ru_time_lapser then
74895: LD_VAR 0 4
74899: PPUSH
74900: CALL_OW 264
74904: PUSH
74905: LD_INT 49
74907: EQUAL
74908: IFFALSE 74936
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74910: LD_VAR 0 4
74914: PPUSH
74915: LD_VAR 0 6
74919: PPUSH
74920: LD_VAR 0 4
74924: PPUSH
74925: CALL_OW 74
74929: PPUSH
74930: CALL_OW 112
74934: GO 74960
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74936: LD_VAR 0 4
74940: PPUSH
74941: LD_VAR 0 6
74945: PPUSH
74946: LD_VAR 0 4
74950: PPUSH
74951: CALL_OW 74
74955: PPUSH
74956: CALL 76210 0 2
// end else
74960: GO 75062
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74962: LD_VAR 0 4
74966: PPUSH
74967: LD_VAR 0 2
74971: PUSH
74972: LD_VAR 0 9
74976: ARRAY
74977: PUSH
74978: LD_INT 1
74980: ARRAY
74981: PPUSH
74982: LD_VAR 0 2
74986: PUSH
74987: LD_VAR 0 9
74991: ARRAY
74992: PUSH
74993: LD_INT 2
74995: ARRAY
74996: PPUSH
74997: CALL_OW 297
75001: PUSH
75002: LD_INT 6
75004: GREATER
75005: IFFALSE 75048
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75007: LD_VAR 0 4
75011: PPUSH
75012: LD_VAR 0 2
75016: PUSH
75017: LD_VAR 0 9
75021: ARRAY
75022: PUSH
75023: LD_INT 1
75025: ARRAY
75026: PPUSH
75027: LD_VAR 0 2
75031: PUSH
75032: LD_VAR 0 9
75036: ARRAY
75037: PUSH
75038: LD_INT 2
75040: ARRAY
75041: PPUSH
75042: CALL_OW 114
75046: GO 75062
// SetTag ( i , tag ) ;
75048: LD_VAR 0 4
75052: PPUSH
75053: LD_VAR 0 9
75057: PPUSH
75058: CALL_OW 109
// end else
75062: GO 75135
// if enemy then
75064: LD_VAR 0 5
75068: IFFALSE 75135
// begin if GetWeapon ( i ) = ru_time_lapser then
75070: LD_VAR 0 4
75074: PPUSH
75075: CALL_OW 264
75079: PUSH
75080: LD_INT 49
75082: EQUAL
75083: IFFALSE 75111
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75085: LD_VAR 0 4
75089: PPUSH
75090: LD_VAR 0 5
75094: PPUSH
75095: LD_VAR 0 4
75099: PPUSH
75100: CALL_OW 74
75104: PPUSH
75105: CALL_OW 112
75109: GO 75135
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75111: LD_VAR 0 4
75115: PPUSH
75116: LD_VAR 0 5
75120: PPUSH
75121: LD_VAR 0 4
75125: PPUSH
75126: CALL_OW 74
75130: PPUSH
75131: CALL 76210 0 2
// end ; end ;
75135: GO 74711
75137: POP
75138: POP
// end ;
75139: LD_VAR 0 3
75143: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75144: LD_INT 0
75146: PPUSH
75147: PPUSH
75148: PPUSH
// if not unit or IsInUnit ( unit ) then
75149: LD_VAR 0 1
75153: NOT
75154: PUSH
75155: LD_VAR 0 1
75159: PPUSH
75160: CALL_OW 310
75164: OR
75165: IFFALSE 75169
// exit ;
75167: GO 75260
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75169: LD_ADDR_VAR 0 4
75173: PUSH
75174: LD_VAR 0 1
75178: PPUSH
75179: CALL_OW 250
75183: PPUSH
75184: LD_VAR 0 2
75188: PPUSH
75189: LD_INT 1
75191: PPUSH
75192: CALL_OW 272
75196: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75197: LD_ADDR_VAR 0 5
75201: PUSH
75202: LD_VAR 0 1
75206: PPUSH
75207: CALL_OW 251
75211: PPUSH
75212: LD_VAR 0 2
75216: PPUSH
75217: LD_INT 1
75219: PPUSH
75220: CALL_OW 273
75224: ST_TO_ADDR
// if ValidHex ( x , y ) then
75225: LD_VAR 0 4
75229: PPUSH
75230: LD_VAR 0 5
75234: PPUSH
75235: CALL_OW 488
75239: IFFALSE 75260
// ComTurnXY ( unit , x , y ) ;
75241: LD_VAR 0 1
75245: PPUSH
75246: LD_VAR 0 4
75250: PPUSH
75251: LD_VAR 0 5
75255: PPUSH
75256: CALL_OW 118
// end ;
75260: LD_VAR 0 3
75264: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75265: LD_INT 0
75267: PPUSH
75268: PPUSH
// result := false ;
75269: LD_ADDR_VAR 0 3
75273: PUSH
75274: LD_INT 0
75276: ST_TO_ADDR
// if not units then
75277: LD_VAR 0 2
75281: NOT
75282: IFFALSE 75286
// exit ;
75284: GO 75331
// for i in units do
75286: LD_ADDR_VAR 0 4
75290: PUSH
75291: LD_VAR 0 2
75295: PUSH
75296: FOR_IN
75297: IFFALSE 75329
// if See ( side , i ) then
75299: LD_VAR 0 1
75303: PPUSH
75304: LD_VAR 0 4
75308: PPUSH
75309: CALL_OW 292
75313: IFFALSE 75327
// begin result := true ;
75315: LD_ADDR_VAR 0 3
75319: PUSH
75320: LD_INT 1
75322: ST_TO_ADDR
// exit ;
75323: POP
75324: POP
75325: GO 75331
// end ;
75327: GO 75296
75329: POP
75330: POP
// end ;
75331: LD_VAR 0 3
75335: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75336: LD_INT 0
75338: PPUSH
75339: PPUSH
75340: PPUSH
75341: PPUSH
// if not unit or not points then
75342: LD_VAR 0 1
75346: NOT
75347: PUSH
75348: LD_VAR 0 2
75352: NOT
75353: OR
75354: IFFALSE 75358
// exit ;
75356: GO 75448
// dist := 99999 ;
75358: LD_ADDR_VAR 0 5
75362: PUSH
75363: LD_INT 99999
75365: ST_TO_ADDR
// for i in points do
75366: LD_ADDR_VAR 0 4
75370: PUSH
75371: LD_VAR 0 2
75375: PUSH
75376: FOR_IN
75377: IFFALSE 75446
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75379: LD_ADDR_VAR 0 6
75383: PUSH
75384: LD_VAR 0 1
75388: PPUSH
75389: LD_VAR 0 4
75393: PUSH
75394: LD_INT 1
75396: ARRAY
75397: PPUSH
75398: LD_VAR 0 4
75402: PUSH
75403: LD_INT 2
75405: ARRAY
75406: PPUSH
75407: CALL_OW 297
75411: ST_TO_ADDR
// if tmpDist < dist then
75412: LD_VAR 0 6
75416: PUSH
75417: LD_VAR 0 5
75421: LESS
75422: IFFALSE 75444
// begin result := i ;
75424: LD_ADDR_VAR 0 3
75428: PUSH
75429: LD_VAR 0 4
75433: ST_TO_ADDR
// dist := tmpDist ;
75434: LD_ADDR_VAR 0 5
75438: PUSH
75439: LD_VAR 0 6
75443: ST_TO_ADDR
// end ; end ;
75444: GO 75376
75446: POP
75447: POP
// end ;
75448: LD_VAR 0 3
75452: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75453: LD_INT 0
75455: PPUSH
// uc_side := side ;
75456: LD_ADDR_OWVAR 20
75460: PUSH
75461: LD_VAR 0 1
75465: ST_TO_ADDR
// uc_nation := 3 ;
75466: LD_ADDR_OWVAR 21
75470: PUSH
75471: LD_INT 3
75473: ST_TO_ADDR
// vc_chassis := 25 ;
75474: LD_ADDR_OWVAR 37
75478: PUSH
75479: LD_INT 25
75481: ST_TO_ADDR
// vc_engine := engine_siberite ;
75482: LD_ADDR_OWVAR 39
75486: PUSH
75487: LD_INT 3
75489: ST_TO_ADDR
// vc_control := control_computer ;
75490: LD_ADDR_OWVAR 38
75494: PUSH
75495: LD_INT 3
75497: ST_TO_ADDR
// vc_weapon := 59 ;
75498: LD_ADDR_OWVAR 40
75502: PUSH
75503: LD_INT 59
75505: ST_TO_ADDR
// result := CreateVehicle ;
75506: LD_ADDR_VAR 0 5
75510: PUSH
75511: CALL_OW 45
75515: ST_TO_ADDR
// SetDir ( result , d ) ;
75516: LD_VAR 0 5
75520: PPUSH
75521: LD_VAR 0 4
75525: PPUSH
75526: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75530: LD_VAR 0 5
75534: PPUSH
75535: LD_VAR 0 2
75539: PPUSH
75540: LD_VAR 0 3
75544: PPUSH
75545: LD_INT 0
75547: PPUSH
75548: CALL_OW 48
// end ;
75552: LD_VAR 0 5
75556: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75557: LD_INT 0
75559: PPUSH
75560: PPUSH
75561: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75562: LD_ADDR_VAR 0 2
75566: PUSH
75567: LD_INT 0
75569: PUSH
75570: LD_INT 0
75572: PUSH
75573: LD_INT 0
75575: PUSH
75576: LD_INT 0
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: LIST
75583: LIST
75584: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75585: LD_VAR 0 1
75589: NOT
75590: PUSH
75591: LD_VAR 0 1
75595: PPUSH
75596: CALL_OW 264
75600: PUSH
75601: LD_INT 12
75603: PUSH
75604: LD_INT 51
75606: PUSH
75607: LD_INT 32
75609: PUSH
75610: LD_INT 89
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: IN
75619: NOT
75620: OR
75621: IFFALSE 75625
// exit ;
75623: GO 75723
// for i := 1 to 3 do
75625: LD_ADDR_VAR 0 3
75629: PUSH
75630: DOUBLE
75631: LD_INT 1
75633: DEC
75634: ST_TO_ADDR
75635: LD_INT 3
75637: PUSH
75638: FOR_TO
75639: IFFALSE 75721
// begin tmp := GetCargo ( cargo , i ) ;
75641: LD_ADDR_VAR 0 4
75645: PUSH
75646: LD_VAR 0 1
75650: PPUSH
75651: LD_VAR 0 3
75655: PPUSH
75656: CALL_OW 289
75660: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75661: LD_ADDR_VAR 0 2
75665: PUSH
75666: LD_VAR 0 2
75670: PPUSH
75671: LD_VAR 0 3
75675: PPUSH
75676: LD_VAR 0 4
75680: PPUSH
75681: CALL_OW 1
75685: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75686: LD_ADDR_VAR 0 2
75690: PUSH
75691: LD_VAR 0 2
75695: PPUSH
75696: LD_INT 4
75698: PPUSH
75699: LD_VAR 0 2
75703: PUSH
75704: LD_INT 4
75706: ARRAY
75707: PUSH
75708: LD_VAR 0 4
75712: PLUS
75713: PPUSH
75714: CALL_OW 1
75718: ST_TO_ADDR
// end ;
75719: GO 75638
75721: POP
75722: POP
// end ;
75723: LD_VAR 0 2
75727: RET
// export function Length ( array ) ; begin
75728: LD_INT 0
75730: PPUSH
// result := array + 0 ;
75731: LD_ADDR_VAR 0 2
75735: PUSH
75736: LD_VAR 0 1
75740: PUSH
75741: LD_INT 0
75743: PLUS
75744: ST_TO_ADDR
// end ;
75745: LD_VAR 0 2
75749: RET
// export function PrepareArray ( array ) ; begin
75750: LD_INT 0
75752: PPUSH
// result := array diff 0 ;
75753: LD_ADDR_VAR 0 2
75757: PUSH
75758: LD_VAR 0 1
75762: PUSH
75763: LD_INT 0
75765: DIFF
75766: ST_TO_ADDR
// if not result [ 1 ] then
75767: LD_VAR 0 2
75771: PUSH
75772: LD_INT 1
75774: ARRAY
75775: NOT
75776: IFFALSE 75796
// result := Delete ( result , 1 ) ;
75778: LD_ADDR_VAR 0 2
75782: PUSH
75783: LD_VAR 0 2
75787: PPUSH
75788: LD_INT 1
75790: PPUSH
75791: CALL_OW 3
75795: ST_TO_ADDR
// end ;
75796: LD_VAR 0 2
75800: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75801: LD_INT 0
75803: PPUSH
75804: PPUSH
75805: PPUSH
75806: PPUSH
// sibRocketRange := 25 ;
75807: LD_ADDR_VAR 0 6
75811: PUSH
75812: LD_INT 25
75814: ST_TO_ADDR
// result := false ;
75815: LD_ADDR_VAR 0 4
75819: PUSH
75820: LD_INT 0
75822: ST_TO_ADDR
// for i := 0 to 5 do
75823: LD_ADDR_VAR 0 5
75827: PUSH
75828: DOUBLE
75829: LD_INT 0
75831: DEC
75832: ST_TO_ADDR
75833: LD_INT 5
75835: PUSH
75836: FOR_TO
75837: IFFALSE 75904
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75839: LD_VAR 0 1
75843: PPUSH
75844: LD_VAR 0 5
75848: PPUSH
75849: LD_VAR 0 6
75853: PPUSH
75854: CALL_OW 272
75858: PPUSH
75859: LD_VAR 0 2
75863: PPUSH
75864: LD_VAR 0 5
75868: PPUSH
75869: LD_VAR 0 6
75873: PPUSH
75874: CALL_OW 273
75878: PPUSH
75879: LD_VAR 0 3
75883: PPUSH
75884: CALL_OW 309
75888: IFFALSE 75902
// begin result := true ;
75890: LD_ADDR_VAR 0 4
75894: PUSH
75895: LD_INT 1
75897: ST_TO_ADDR
// exit ;
75898: POP
75899: POP
75900: GO 75906
// end ;
75902: GO 75836
75904: POP
75905: POP
// end ;
75906: LD_VAR 0 4
75910: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75911: LD_INT 0
75913: PPUSH
75914: PPUSH
75915: PPUSH
// if btype = b_depot then
75916: LD_VAR 0 2
75920: PUSH
75921: LD_INT 0
75923: EQUAL
75924: IFFALSE 75936
// begin result := true ;
75926: LD_ADDR_VAR 0 3
75930: PUSH
75931: LD_INT 1
75933: ST_TO_ADDR
// exit ;
75934: GO 76052
// end ; pom := GetBase ( depot ) ;
75936: LD_ADDR_VAR 0 4
75940: PUSH
75941: LD_VAR 0 1
75945: PPUSH
75946: CALL_OW 274
75950: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75951: LD_ADDR_VAR 0 5
75955: PUSH
75956: LD_VAR 0 2
75960: PPUSH
75961: LD_VAR 0 1
75965: PPUSH
75966: CALL_OW 248
75970: PPUSH
75971: CALL_OW 450
75975: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75976: LD_ADDR_VAR 0 3
75980: PUSH
75981: LD_VAR 0 4
75985: PPUSH
75986: LD_INT 1
75988: PPUSH
75989: CALL_OW 275
75993: PUSH
75994: LD_VAR 0 5
75998: PUSH
75999: LD_INT 1
76001: ARRAY
76002: GREATEREQUAL
76003: PUSH
76004: LD_VAR 0 4
76008: PPUSH
76009: LD_INT 2
76011: PPUSH
76012: CALL_OW 275
76016: PUSH
76017: LD_VAR 0 5
76021: PUSH
76022: LD_INT 2
76024: ARRAY
76025: GREATEREQUAL
76026: AND
76027: PUSH
76028: LD_VAR 0 4
76032: PPUSH
76033: LD_INT 3
76035: PPUSH
76036: CALL_OW 275
76040: PUSH
76041: LD_VAR 0 5
76045: PUSH
76046: LD_INT 3
76048: ARRAY
76049: GREATEREQUAL
76050: AND
76051: ST_TO_ADDR
// end ;
76052: LD_VAR 0 3
76056: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76057: LD_INT 0
76059: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76060: LD_VAR 0 1
76064: PPUSH
76065: LD_VAR 0 2
76069: PPUSH
76070: LD_INT 0
76072: PPUSH
76073: LD_INT 0
76075: PPUSH
76076: LD_INT 1
76078: PPUSH
76079: LD_INT 0
76081: PPUSH
76082: CALL_OW 587
// end ;
76086: LD_VAR 0 3
76090: RET
// export function CenterOnNow ( unit ) ; begin
76091: LD_INT 0
76093: PPUSH
// result := IsInUnit ( unit ) ;
76094: LD_ADDR_VAR 0 2
76098: PUSH
76099: LD_VAR 0 1
76103: PPUSH
76104: CALL_OW 310
76108: ST_TO_ADDR
// if not result then
76109: LD_VAR 0 2
76113: NOT
76114: IFFALSE 76126
// result := unit ;
76116: LD_ADDR_VAR 0 2
76120: PUSH
76121: LD_VAR 0 1
76125: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
76126: LD_VAR 0 1
76130: PPUSH
76131: CALL_OW 87
// end ;
76135: LD_VAR 0 2
76139: RET
// export function ComMoveHex ( unit , hex ) ; begin
76140: LD_INT 0
76142: PPUSH
// if not hex then
76143: LD_VAR 0 2
76147: NOT
76148: IFFALSE 76152
// exit ;
76150: GO 76205
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
76152: LD_VAR 0 2
76156: PUSH
76157: LD_INT 1
76159: ARRAY
76160: PPUSH
76161: LD_VAR 0 2
76165: PUSH
76166: LD_INT 2
76168: ARRAY
76169: PPUSH
76170: CALL_OW 428
76174: IFFALSE 76178
// exit ;
76176: GO 76205
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
76178: LD_VAR 0 1
76182: PPUSH
76183: LD_VAR 0 2
76187: PUSH
76188: LD_INT 1
76190: ARRAY
76191: PPUSH
76192: LD_VAR 0 2
76196: PUSH
76197: LD_INT 2
76199: ARRAY
76200: PPUSH
76201: CALL_OW 111
// end ;
76205: LD_VAR 0 3
76209: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
76210: LD_INT 0
76212: PPUSH
76213: PPUSH
76214: PPUSH
// if not unit or not enemy then
76215: LD_VAR 0 1
76219: NOT
76220: PUSH
76221: LD_VAR 0 2
76225: NOT
76226: OR
76227: IFFALSE 76231
// exit ;
76229: GO 76355
// x := GetX ( enemy ) ;
76231: LD_ADDR_VAR 0 4
76235: PUSH
76236: LD_VAR 0 2
76240: PPUSH
76241: CALL_OW 250
76245: ST_TO_ADDR
// y := GetY ( enemy ) ;
76246: LD_ADDR_VAR 0 5
76250: PUSH
76251: LD_VAR 0 2
76255: PPUSH
76256: CALL_OW 251
76260: ST_TO_ADDR
// if ValidHex ( x , y ) then
76261: LD_VAR 0 4
76265: PPUSH
76266: LD_VAR 0 5
76270: PPUSH
76271: CALL_OW 488
76275: IFFALSE 76355
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
76277: LD_VAR 0 2
76281: PPUSH
76282: CALL_OW 247
76286: PUSH
76287: LD_INT 3
76289: PUSH
76290: LD_INT 2
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: IN
76297: PUSH
76298: LD_VAR 0 1
76302: PPUSH
76303: CALL_OW 255
76307: PPUSH
76308: LD_VAR 0 2
76312: PPUSH
76313: CALL_OW 292
76317: OR
76318: IFFALSE 76336
// ComAttackUnit ( unit , enemy ) else
76320: LD_VAR 0 1
76324: PPUSH
76325: LD_VAR 0 2
76329: PPUSH
76330: CALL_OW 115
76334: GO 76355
// ComAgressiveMove ( unit , x , y ) ;
76336: LD_VAR 0 1
76340: PPUSH
76341: LD_VAR 0 4
76345: PPUSH
76346: LD_VAR 0 5
76350: PPUSH
76351: CALL_OW 114
// end ;
76355: LD_VAR 0 3
76359: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
76360: LD_INT 0
76362: PPUSH
76363: PPUSH
76364: PPUSH
// list := AreaToList ( area , 0 ) ;
76365: LD_ADDR_VAR 0 5
76369: PUSH
76370: LD_VAR 0 1
76374: PPUSH
76375: LD_INT 0
76377: PPUSH
76378: CALL_OW 517
76382: ST_TO_ADDR
// if not list then
76383: LD_VAR 0 5
76387: NOT
76388: IFFALSE 76392
// exit ;
76390: GO 76522
// if all then
76392: LD_VAR 0 2
76396: IFFALSE 76484
// begin for i := 1 to list [ 1 ] do
76398: LD_ADDR_VAR 0 4
76402: PUSH
76403: DOUBLE
76404: LD_INT 1
76406: DEC
76407: ST_TO_ADDR
76408: LD_VAR 0 5
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PUSH
76417: FOR_TO
76418: IFFALSE 76480
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
76420: LD_ADDR_VAR 0 3
76424: PUSH
76425: LD_VAR 0 3
76429: PPUSH
76430: LD_VAR 0 3
76434: PUSH
76435: LD_INT 1
76437: PLUS
76438: PPUSH
76439: LD_VAR 0 5
76443: PUSH
76444: LD_INT 1
76446: ARRAY
76447: PUSH
76448: LD_VAR 0 4
76452: ARRAY
76453: PUSH
76454: LD_VAR 0 5
76458: PUSH
76459: LD_INT 2
76461: ARRAY
76462: PUSH
76463: LD_VAR 0 4
76467: ARRAY
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: PPUSH
76473: CALL_OW 1
76477: ST_TO_ADDR
76478: GO 76417
76480: POP
76481: POP
// exit ;
76482: GO 76522
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
76484: LD_ADDR_VAR 0 3
76488: PUSH
76489: LD_VAR 0 5
76493: PUSH
76494: LD_INT 1
76496: ARRAY
76497: PUSH
76498: LD_INT 1
76500: ARRAY
76501: PUSH
76502: LD_VAR 0 5
76506: PUSH
76507: LD_INT 2
76509: ARRAY
76510: PUSH
76511: LD_INT 1
76513: ARRAY
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: EMPTY
76520: LIST
76521: ST_TO_ADDR
// end ;
76522: LD_VAR 0 3
76526: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
76527: LD_INT 0
76529: PPUSH
76530: PPUSH
// list := AreaToList ( area , 0 ) ;
76531: LD_ADDR_VAR 0 4
76535: PUSH
76536: LD_VAR 0 1
76540: PPUSH
76541: LD_INT 0
76543: PPUSH
76544: CALL_OW 517
76548: ST_TO_ADDR
// if not list then
76549: LD_VAR 0 4
76553: NOT
76554: IFFALSE 76558
// exit ;
76556: GO 76599
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
76558: LD_ADDR_VAR 0 3
76562: PUSH
76563: LD_VAR 0 4
76567: PUSH
76568: LD_INT 1
76570: ARRAY
76571: PUSH
76572: LD_INT 1
76574: ARRAY
76575: PUSH
76576: LD_VAR 0 4
76580: PUSH
76581: LD_INT 2
76583: ARRAY
76584: PUSH
76585: LD_INT 1
76587: ARRAY
76588: PUSH
76589: LD_VAR 0 2
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: LIST
76598: ST_TO_ADDR
// end ;
76599: LD_VAR 0 3
76603: RET
// export function First ( array ) ; begin
76604: LD_INT 0
76606: PPUSH
// if not array then
76607: LD_VAR 0 1
76611: NOT
76612: IFFALSE 76616
// exit ;
76614: GO 76630
// result := array [ 1 ] ;
76616: LD_ADDR_VAR 0 2
76620: PUSH
76621: LD_VAR 0 1
76625: PUSH
76626: LD_INT 1
76628: ARRAY
76629: ST_TO_ADDR
// end ;
76630: LD_VAR 0 2
76634: RET
// export function Last ( array ) ; begin
76635: LD_INT 0
76637: PPUSH
// if not array then
76638: LD_VAR 0 1
76642: NOT
76643: IFFALSE 76647
// exit ;
76645: GO 76663
// result := array [ array ] ;
76647: LD_ADDR_VAR 0 2
76651: PUSH
76652: LD_VAR 0 1
76656: PUSH
76657: LD_VAR 0 1
76661: ARRAY
76662: ST_TO_ADDR
// end ;
76663: LD_VAR 0 2
76667: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76668: LD_INT 0
76670: PPUSH
76671: PPUSH
// result := [ ] ;
76672: LD_ADDR_VAR 0 5
76676: PUSH
76677: EMPTY
76678: ST_TO_ADDR
// if not array then
76679: LD_VAR 0 1
76683: NOT
76684: IFFALSE 76688
// exit ;
76686: GO 76800
// for i := 1 to array do
76688: LD_ADDR_VAR 0 6
76692: PUSH
76693: DOUBLE
76694: LD_INT 1
76696: DEC
76697: ST_TO_ADDR
76698: LD_VAR 0 1
76702: PUSH
76703: FOR_TO
76704: IFFALSE 76798
// if array [ i ] [ index ] = value then
76706: LD_VAR 0 1
76710: PUSH
76711: LD_VAR 0 6
76715: ARRAY
76716: PUSH
76717: LD_VAR 0 2
76721: ARRAY
76722: PUSH
76723: LD_VAR 0 3
76727: EQUAL
76728: IFFALSE 76796
// begin if indexColumn then
76730: LD_VAR 0 4
76734: IFFALSE 76770
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76736: LD_ADDR_VAR 0 5
76740: PUSH
76741: LD_VAR 0 5
76745: PPUSH
76746: LD_VAR 0 1
76750: PUSH
76751: LD_VAR 0 6
76755: ARRAY
76756: PUSH
76757: LD_VAR 0 4
76761: ARRAY
76762: PPUSH
76763: CALL 71988 0 2
76767: ST_TO_ADDR
76768: GO 76796
// result := Join ( result , array [ i ] ) ;
76770: LD_ADDR_VAR 0 5
76774: PUSH
76775: LD_VAR 0 5
76779: PPUSH
76780: LD_VAR 0 1
76784: PUSH
76785: LD_VAR 0 6
76789: ARRAY
76790: PPUSH
76791: CALL 71988 0 2
76795: ST_TO_ADDR
// end ;
76796: GO 76703
76798: POP
76799: POP
// end ;
76800: LD_VAR 0 5
76804: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76805: LD_INT 0
76807: PPUSH
// if not vehicles or not parkingPoint then
76808: LD_VAR 0 1
76812: NOT
76813: PUSH
76814: LD_VAR 0 2
76818: NOT
76819: OR
76820: IFFALSE 76824
// exit ;
76822: GO 76922
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76824: LD_ADDR_VAR 0 1
76828: PUSH
76829: LD_VAR 0 1
76833: PPUSH
76834: LD_INT 50
76836: PUSH
76837: EMPTY
76838: LIST
76839: PUSH
76840: LD_INT 3
76842: PUSH
76843: LD_INT 92
76845: PUSH
76846: LD_VAR 0 2
76850: PUSH
76851: LD_INT 1
76853: ARRAY
76854: PUSH
76855: LD_VAR 0 2
76859: PUSH
76860: LD_INT 2
76862: ARRAY
76863: PUSH
76864: LD_INT 8
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PPUSH
76881: CALL_OW 72
76885: ST_TO_ADDR
// if not vehicles then
76886: LD_VAR 0 1
76890: NOT
76891: IFFALSE 76895
// exit ;
76893: GO 76922
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76895: LD_VAR 0 1
76899: PPUSH
76900: LD_VAR 0 2
76904: PUSH
76905: LD_INT 1
76907: ARRAY
76908: PPUSH
76909: LD_VAR 0 2
76913: PUSH
76914: LD_INT 2
76916: ARRAY
76917: PPUSH
76918: CALL_OW 111
// end ;
76922: LD_VAR 0 3
76926: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76927: LD_INT 0
76929: PPUSH
76930: PPUSH
76931: PPUSH
// if not side or not area then
76932: LD_VAR 0 1
76936: NOT
76937: PUSH
76938: LD_VAR 0 2
76942: NOT
76943: OR
76944: IFFALSE 76948
// exit ;
76946: GO 77067
// tmp := AreaToList ( area , 0 ) ;
76948: LD_ADDR_VAR 0 5
76952: PUSH
76953: LD_VAR 0 2
76957: PPUSH
76958: LD_INT 0
76960: PPUSH
76961: CALL_OW 517
76965: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76966: LD_ADDR_VAR 0 4
76970: PUSH
76971: DOUBLE
76972: LD_INT 1
76974: DEC
76975: ST_TO_ADDR
76976: LD_VAR 0 5
76980: PUSH
76981: LD_INT 1
76983: ARRAY
76984: PUSH
76985: FOR_TO
76986: IFFALSE 77065
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76988: LD_VAR 0 5
76992: PUSH
76993: LD_INT 1
76995: ARRAY
76996: PUSH
76997: LD_VAR 0 4
77001: ARRAY
77002: PPUSH
77003: LD_VAR 0 5
77007: PUSH
77008: LD_INT 2
77010: ARRAY
77011: PUSH
77012: LD_VAR 0 4
77016: ARRAY
77017: PPUSH
77018: CALL_OW 351
77022: IFFALSE 77063
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
77024: LD_VAR 0 5
77028: PUSH
77029: LD_INT 1
77031: ARRAY
77032: PUSH
77033: LD_VAR 0 4
77037: ARRAY
77038: PPUSH
77039: LD_VAR 0 5
77043: PUSH
77044: LD_INT 2
77046: ARRAY
77047: PUSH
77048: LD_VAR 0 4
77052: ARRAY
77053: PPUSH
77054: LD_VAR 0 1
77058: PPUSH
77059: CALL_OW 244
// end ;
77063: GO 76985
77065: POP
77066: POP
// end ; end_of_file
77067: LD_VAR 0 3
77071: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77072: LD_VAR 0 1
77076: PUSH
77077: LD_INT 200
77079: DOUBLE
77080: GREATEREQUAL
77081: IFFALSE 77089
77083: LD_INT 299
77085: DOUBLE
77086: LESSEQUAL
77087: IFTRUE 77091
77089: GO 77123
77091: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77092: LD_VAR 0 1
77096: PPUSH
77097: LD_VAR 0 2
77101: PPUSH
77102: LD_VAR 0 3
77106: PPUSH
77107: LD_VAR 0 4
77111: PPUSH
77112: LD_VAR 0 5
77116: PPUSH
77117: CALL 29557 0 5
77121: GO 77200
77123: LD_INT 300
77125: DOUBLE
77126: GREATEREQUAL
77127: IFFALSE 77135
77129: LD_INT 399
77131: DOUBLE
77132: LESSEQUAL
77133: IFTRUE 77137
77135: GO 77199
77137: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77138: LD_VAR 0 1
77142: PPUSH
77143: LD_VAR 0 2
77147: PPUSH
77148: LD_VAR 0 3
77152: PPUSH
77153: LD_VAR 0 4
77157: PPUSH
77158: LD_VAR 0 5
77162: PPUSH
77163: LD_VAR 0 6
77167: PPUSH
77168: LD_VAR 0 7
77172: PPUSH
77173: LD_VAR 0 8
77177: PPUSH
77178: LD_VAR 0 9
77182: PPUSH
77183: LD_VAR 0 10
77187: PPUSH
77188: LD_VAR 0 11
77192: PPUSH
77193: CALL 25545 0 11
77197: GO 77200
77199: POP
// end ;
77200: PPOPN 11
77202: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77203: LD_VAR 0 1
77207: PPUSH
77208: LD_VAR 0 2
77212: PPUSH
77213: LD_VAR 0 3
77217: PPUSH
77218: LD_VAR 0 4
77222: PPUSH
77223: LD_VAR 0 5
77227: PPUSH
77228: CALL 29022 0 5
// end ; end_of_file
77232: PPOPN 5
77234: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77235: LD_VAR 0 1
77239: PPUSH
77240: LD_VAR 0 2
77244: PPUSH
77245: LD_VAR 0 3
77249: PPUSH
77250: LD_VAR 0 4
77254: PPUSH
77255: LD_VAR 0 5
77259: PPUSH
77260: LD_VAR 0 6
77264: PPUSH
77265: CALL 13197 0 6
// end ;
77269: PPOPN 6
77271: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77272: LD_INT 0
77274: PPUSH
// begin if not units then
77275: LD_VAR 0 1
77279: NOT
77280: IFFALSE 77284
// exit ;
77282: GO 77284
// end ;
77284: PPOPN 7
77286: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77287: CALL 13084 0 0
// end ;
77291: PPOPN 1
77293: END
