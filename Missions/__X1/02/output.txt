// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11619 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 30050 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 30050 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7246
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7184
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// end else
7182: GO 7246
// begin aviradzeQuestDone := true ;
7184: LD_ADDR_EXP 8
7188: PUSH
7189: LD_INT 1
7191: ST_TO_ADDR
// attackDeltaAllowed := true ;
7192: LD_ADDR_EXP 14
7196: PUSH
7197: LD_INT 1
7199: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7200: LD_STRING ODelta2
7202: PPUSH
7203: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7207: LD_ADDR_VAR 0 1
7211: PUSH
7212: LD_INT 22
7214: PUSH
7215: LD_INT 5
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PPUSH
7222: CALL_OW 69
7226: PUSH
7227: FOR_IN
7228: IFFALSE 7244
// SetSide ( i , 2 ) ;
7230: LD_VAR 0 1
7234: PPUSH
7235: LD_INT 2
7237: PPUSH
7238: CALL_OW 235
7242: GO 7227
7244: POP
7245: POP
// end ; end ;
7246: PPOPN 2
7248: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7249: LD_EXP 10
7253: PUSH
7254: LD_EXP 8
7258: NOT
7259: AND
7260: IFFALSE 7277
7262: GO 7264
7264: DISABLE
// SayRadio ( Lynch , DDelta-Alarm-1 ) ;
7265: LD_EXP 20
7269: PPUSH
7270: LD_STRING DDelta-Alarm-1
7272: PPUSH
7273: CALL_OW 94
7277: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7278: LD_EXP 7
7282: NOT
7283: PUSH
7284: LD_EXP 22
7288: PPUSH
7289: LD_EXP 23
7293: PPUSH
7294: CALL_OW 74
7298: PPUSH
7299: LD_EXP 23
7303: PPUSH
7304: CALL_OW 296
7308: PUSH
7309: LD_INT 8
7311: LESS
7312: AND
7313: PUSH
7314: LD_INT 2
7316: PPUSH
7317: LD_EXP 22
7321: PPUSH
7322: LD_EXP 23
7326: PPUSH
7327: CALL_OW 74
7331: PPUSH
7332: CALL_OW 292
7336: AND
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 21
7350: PUSH
7351: LD_INT 1
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: PUSH
7367: LD_INT 1
7369: GREATER
7370: AND
7371: PUSH
7372: LD_EXP 4
7376: NOT
7377: AND
7378: IFFALSE 7422
7380: GO 7382
7382: DISABLE
// begin sciSpotted := true ;
7383: LD_ADDR_EXP 7
7387: PUSH
7388: LD_INT 1
7390: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7391: LD_EXP 22
7395: PPUSH
7396: LD_EXP 23
7400: PPUSH
7401: CALL_OW 74
7405: PPUSH
7406: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7410: LD_EXP 23
7414: PPUSH
7415: LD_STRING DH-1-sci
7417: PPUSH
7418: CALL_OW 88
// end ;
7422: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7423: LD_EXP 4
7427: PUSH
7428: LD_EXP 7
7432: NOT
7433: AND
7434: PUSH
7435: LD_INT 2
7437: PPUSH
7438: LD_EXP 22
7442: PPUSH
7443: LD_EXP 23
7447: PPUSH
7448: CALL_OW 74
7452: PPUSH
7453: CALL_OW 292
7457: AND
7458: PUSH
7459: LD_INT 22
7461: PUSH
7462: LD_INT 2
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 21
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PPUSH
7483: CALL_OW 69
7487: PUSH
7488: LD_INT 1
7490: GREATER
7491: AND
7492: PUSH
7493: LD_EXP 4
7497: AND
7498: PUSH
7499: LD_EXP 8
7503: NOT
7504: AND
7505: IFFALSE 7646
7507: GO 7509
7509: DISABLE
7510: LD_INT 0
7512: PPUSH
// begin sciSpotted := true ;
7513: LD_ADDR_EXP 7
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7521: LD_ADDR_VAR 0 1
7525: PUSH
7526: LD_EXP 22
7530: PPUSH
7531: LD_EXP 23
7535: PPUSH
7536: CALL_OW 74
7540: ST_TO_ADDR
// DialogueOn ;
7541: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7545: LD_VAR 0 1
7549: PPUSH
7550: CALL_OW 250
7554: PPUSH
7555: LD_VAR 0 1
7559: PPUSH
7560: CALL_OW 251
7564: PPUSH
7565: LD_INT 2
7567: PPUSH
7568: LD_INT 3
7570: NEG
7571: PPUSH
7572: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7576: LD_VAR 0 1
7580: PPUSH
7581: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7585: LD_EXP 23
7589: PPUSH
7590: LD_STRING DH-1-sci-a
7592: PPUSH
7593: CALL_OW 88
// if Mike then
7597: LD_EXP 25
7601: IFFALSE 7615
// Say ( Mike , DM-1-sci-a ) ;
7603: LD_EXP 25
7607: PPUSH
7608: LD_STRING DM-1-sci-a
7610: PPUSH
7611: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 250
7624: PPUSH
7625: LD_VAR 0 1
7629: PPUSH
7630: CALL_OW 251
7634: PPUSH
7635: LD_INT 2
7637: PPUSH
7638: CALL_OW 331
// DialogueOff ;
7642: CALL_OW 7
// end ;
7646: PPOPN 1
7648: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7649: LD_EXP 10
7653: PUSH
7654: LD_EXP 19
7658: PPUSH
7659: CALL_OW 256
7663: PUSH
7664: LD_INT 1000
7666: LESS
7667: PUSH
7668: LD_INT 3
7670: PPUSH
7671: CALL_OW 256
7675: PUSH
7676: LD_INT 999
7678: LESS
7679: OR
7680: AND
7681: IFFALSE 7937
7683: GO 7685
7685: DISABLE
7686: LD_INT 0
7688: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7689: LD_ADDR_VAR 0 1
7693: PUSH
7694: LD_INT 22
7696: PUSH
7697: LD_INT 1
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PUSH
7704: LD_INT 21
7706: PUSH
7707: LD_INT 2
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: PUSH
7714: LD_INT 58
7716: PUSH
7717: EMPTY
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: LIST
7724: PPUSH
7725: CALL_OW 69
7729: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7730: LD_VAR 0 1
7734: PUSH
7735: LD_EXP 19
7739: PPUSH
7740: CALL_OW 302
7744: AND
7745: IFFALSE 7787
// begin if IsInUnit ( Gladstone ) then
7747: LD_EXP 19
7751: PPUSH
7752: CALL_OW 310
7756: IFFALSE 7767
// ComExitBuilding ( Gladstone ) ;
7758: LD_EXP 19
7762: PPUSH
7763: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7767: LD_EXP 19
7771: PPUSH
7772: LD_VAR 0 1
7776: PUSH
7777: LD_INT 1
7779: ARRAY
7780: PPUSH
7781: CALL_OW 180
// end else
7785: GO 7807
// if IsInUnit ( Gladstone ) then
7787: LD_EXP 19
7791: PPUSH
7792: CALL_OW 310
7796: IFFALSE 7807
// ComExitBuilding ( Gladstone ) ;
7798: LD_EXP 19
7802: PPUSH
7803: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7807: LD_EXP 19
7811: PPUSH
7812: LD_INT 27
7814: PPUSH
7815: LD_INT 51
7817: PPUSH
7818: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7822: LD_EXP 19
7826: PPUSH
7827: LD_STRING D8-Glad-2
7829: PPUSH
7830: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7834: LD_INT 35
7836: PPUSH
7837: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7841: LD_EXP 19
7845: PPUSH
7846: LD_INT 27
7848: PPUSH
7849: LD_INT 51
7851: PPUSH
7852: CALL_OW 307
7856: PUSH
7857: LD_EXP 19
7861: PPUSH
7862: CALL_OW 310
7866: PPUSH
7867: LD_INT 27
7869: PPUSH
7870: LD_INT 51
7872: PPUSH
7873: CALL_OW 307
7877: OR
7878: PUSH
7879: LD_EXP 19
7883: PPUSH
7884: CALL_OW 301
7888: OR
7889: IFFALSE 7834
// if IsDead ( Gladstone ) then
7891: LD_EXP 19
7895: PPUSH
7896: CALL_OW 301
7900: IFFALSE 7904
// exit ;
7902: GO 7937
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7904: LD_INT 27
7906: PPUSH
7907: LD_INT 51
7909: PPUSH
7910: CALL_OW 428
7914: PPUSH
7915: CALL_OW 64
// gladstoneEscaped := true ;
7919: LD_ADDR_EXP 12
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7927: LD_INT 1
7929: PPUSH
7930: LD_STRING 02_GladstoneEscaped
7932: PPUSH
7933: CALL_OW 39
// end ;
7937: PPOPN 1
7939: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7940: LD_EXP 4
7944: PUSH
7945: LD_EXP 9
7949: PUSH
7950: LD_INT 3
7952: GREATEREQUAL
7953: PUSH
7954: LD_EXP 22
7958: NOT
7959: OR
7960: AND
7961: PUSH
7962: LD_EXP 8
7966: NOT
7967: AND
7968: IFFALSE 8011
7970: GO 7972
7972: DISABLE
// begin aviradzeQuestDone := true ;
7973: LD_ADDR_EXP 8
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7981: LD_EXP 23
7985: PPUSH
7986: LD_STRING DH-1-quest-done
7988: PPUSH
7989: CALL_OW 88
// if Givi then
7993: LD_EXP 24
7997: IFFALSE 8011
// Say ( Givi , DG-1-quest-done ) ;
7999: LD_EXP 24
8003: PPUSH
8004: LD_STRING DG-1-quest-done
8006: PPUSH
8007: CALL_OW 88
// end ;
8011: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8012: LD_INT 11
8014: PPUSH
8015: LD_INT 22
8017: PUSH
8018: LD_INT 2
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PPUSH
8025: CALL_OW 70
8029: PUSH
8030: LD_INT 1
8032: GREATER
8033: PUSH
8034: LD_INT 1
8036: PPUSH
8037: CALL_OW 255
8041: PUSH
8042: LD_INT 2
8044: EQUAL
8045: AND
8046: PUSH
8047: LD_EXP 25
8051: PPUSH
8052: CALL_OW 302
8056: AND
8057: PUSH
8058: LD_EXP 23
8062: PPUSH
8063: CALL_OW 302
8067: AND
8068: IFFALSE 8213
8070: GO 8072
8072: DISABLE
// begin DialogueOn ;
8073: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8077: LD_INT 47
8079: PPUSH
8080: LD_INT 19
8082: PPUSH
8083: LD_INT 2
8085: PPUSH
8086: LD_INT 6
8088: NEG
8089: PPUSH
8090: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8094: LD_INT 47
8096: PPUSH
8097: LD_INT 19
8099: PPUSH
8100: LD_INT 2
8102: PPUSH
8103: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8107: LD_INT 34
8109: PPUSH
8110: LD_INT 32
8112: PPUSH
8113: LD_INT 2
8115: PPUSH
8116: LD_INT 6
8118: NEG
8119: PPUSH
8120: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8124: LD_INT 34
8126: PPUSH
8127: LD_INT 32
8129: PPUSH
8130: LD_INT 2
8132: PPUSH
8133: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8137: LD_EXP 25
8141: PPUSH
8142: LD_STRING DM-Prem-1
8144: PPUSH
8145: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8149: LD_EXP 23
8153: PPUSH
8154: LD_STRING DH-Prem-2
8156: PPUSH
8157: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8161: LD_EXP 23
8165: PPUSH
8166: LD_STRING DH-Prem-3
8168: PPUSH
8169: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8173: LD_EXP 25
8177: PPUSH
8178: LD_STRING DM-Prem-4
8180: PPUSH
8181: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8185: LD_EXP 25
8189: PPUSH
8190: LD_STRING DM-Prem-5
8192: PPUSH
8193: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8197: LD_EXP 24
8201: PPUSH
8202: LD_STRING DG-Prem-6
8204: PPUSH
8205: CALL_OW 88
// DialogueOff ;
8209: CALL_OW 7
// end ;
8213: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8214: LD_INT 5
8216: PPUSH
8217: LD_EXP 23
8221: PPUSH
8222: CALL_OW 292
8226: PUSH
8227: LD_EXP 23
8231: PPUSH
8232: LD_EXP 27
8236: PPUSH
8237: CALL_OW 296
8241: PUSH
8242: LD_INT 6
8244: LESS
8245: AND
8246: PUSH
8247: LD_EXP 8
8251: AND
8252: PUSH
8253: LD_EXP 14
8257: NOT
8258: AND
8259: IFFALSE 8397
8261: GO 8263
8263: DISABLE
8264: LD_INT 0
8266: PPUSH
// begin attackDeltaAllowed := true ;
8267: LD_ADDR_EXP 14
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// InGameOn ;
8275: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8279: LD_EXP 23
8283: PPUSH
8284: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8288: LD_INT 10
8290: PPUSH
8291: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8295: LD_EXP 27
8299: PPUSH
8300: LD_EXP 23
8304: PPUSH
8305: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8309: LD_EXP 23
8313: PPUSH
8314: LD_EXP 27
8318: PPUSH
8319: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8323: LD_EXP 23
8327: PPUSH
8328: LD_STRING DH-1-return
8330: PPUSH
8331: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8335: LD_EXP 27
8339: PPUSH
8340: LD_STRING DA-1-return
8342: PPUSH
8343: CALL_OW 88
// InGameOff ;
8347: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8351: LD_STRING ODelta
8353: PPUSH
8354: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8358: LD_ADDR_VAR 0 1
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 5
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PPUSH
8373: CALL_OW 69
8377: PUSH
8378: FOR_IN
8379: IFFALSE 8395
// SetSide ( i , 2 ) ;
8381: LD_VAR 0 1
8385: PPUSH
8386: LD_INT 2
8388: PPUSH
8389: CALL_OW 235
8393: GO 8378
8395: POP
8396: POP
// end ;
8397: PPOPN 1
8399: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8400: LD_EXP 10
8404: PUSH
8405: LD_EXP 14
8409: NOT
8410: AND
8411: IFFALSE 8424
8413: GO 8415
8415: DISABLE
// spottedBeforeRadio := true ;
8416: LD_ADDR_EXP 6
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
8424: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8425: LD_EXP 14
8429: PUSH
8430: LD_EXP 30
8434: PPUSH
8435: CALL_OW 302
8439: AND
8440: PUSH
8441: LD_INT 1
8443: PPUSH
8444: CALL_OW 255
8448: PUSH
8449: LD_INT 1
8451: EQUAL
8452: AND
8453: PUSH
8454: LD_EXP 20
8458: PPUSH
8459: CALL_OW 302
8463: AND
8464: PUSH
8465: LD_EXP 10
8469: NOT
8470: AND
8471: IFFALSE 9699
8473: GO 8475
8475: DISABLE
8476: LD_INT 0
8478: PPUSH
8479: PPUSH
8480: PPUSH
// begin trap := 0 ;
8481: LD_ADDR_EXP 17
8485: PUSH
8486: LD_INT 0
8488: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8489: LD_INT 420
8491: PPUSH
8492: CALL_OW 67
// DialogueOn ;
8496: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8500: LD_EXP 30
8504: PPUSH
8505: LD_STRING DMar-1-radio
8507: PPUSH
8508: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8512: LD_EXP 23
8516: PPUSH
8517: LD_STRING DH-1-radio
8519: PPUSH
8520: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8524: LD_EXP 30
8528: PPUSH
8529: LD_STRING DMar-2-radio
8531: PPUSH
8532: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8536: LD_EXP 23
8540: PPUSH
8541: LD_STRING DH-2-radio
8543: PPUSH
8544: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8548: LD_EXP 26
8552: PPUSH
8553: CALL_OW 302
8557: PUSH
8558: LD_EXP 29
8562: PPUSH
8563: CALL_OW 302
8567: OR
8568: IFFALSE 9699
// begin case Query ( Q1Trap ) of 1 :
8570: LD_STRING Q1Trap
8572: PPUSH
8573: CALL_OW 97
8577: PUSH
8578: LD_INT 1
8580: DOUBLE
8581: EQUAL
8582: IFTRUE 8586
8584: GO 8792
8586: POP
// begin if IsOk ( Kamil ) then
8587: LD_EXP 26
8591: PPUSH
8592: CALL_OW 302
8596: IFFALSE 8675
// begin Say ( Kamil , DKam-2-radio ) ;
8598: LD_EXP 26
8602: PPUSH
8603: LD_STRING DKam-2-radio
8605: PPUSH
8606: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8610: LD_EXP 26
8614: PPUSH
8615: LD_STRING DKam-3-radio
8617: PPUSH
8618: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8622: LD_EXP 20
8626: PPUSH
8627: LD_STRING DDelta-3-radio
8629: PPUSH
8630: CALL_OW 94
// dwait ( 0 0$01 ) ;
8634: LD_INT 35
8636: PPUSH
8637: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8641: LD_EXP 23
8645: PPUSH
8646: LD_STRING DH-3-radio
8648: PPUSH
8649: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8653: LD_EXP 26
8657: PPUSH
8658: LD_STRING DKam-4-radio
8660: PPUSH
8661: CALL_OW 88
// trap := 1 ;
8665: LD_ADDR_EXP 17
8669: PUSH
8670: LD_INT 1
8672: ST_TO_ADDR
// end else
8673: GO 8786
// begin Say ( Sophia , DS-1-radio ) ;
8675: LD_EXP 29
8679: PPUSH
8680: LD_STRING DS-1-radio
8682: PPUSH
8683: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8687: LD_EXP 29
8691: PPUSH
8692: LD_STRING DS-2-radio
8694: PPUSH
8695: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8699: LD_EXP 20
8703: PPUSH
8704: LD_STRING DDelta-2-radio-s
8706: PPUSH
8707: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8711: LD_EXP 29
8715: PPUSH
8716: LD_STRING DS-3-radio
8718: PPUSH
8719: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8723: LD_EXP 20
8727: PPUSH
8728: LD_STRING DDelta-3-radio-s
8730: PPUSH
8731: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8735: LD_EXP 29
8739: PPUSH
8740: LD_STRING DS-4-radio-s
8742: PPUSH
8743: CALL_OW 88
// SayRadio ( Lynch , DDelta-4-radio-s ) ;
8747: LD_EXP 20
8751: PPUSH
8752: LD_STRING DDelta-4-radio-s
8754: PPUSH
8755: CALL_OW 94
// dwait ( 0 0$01 ) ;
8759: LD_INT 35
8761: PPUSH
8762: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8766: LD_EXP 23
8770: PPUSH
8771: LD_STRING DH-1-trap
8773: PPUSH
8774: CALL_OW 88
// trap := 0 ;
8778: LD_ADDR_EXP 17
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// end ; DialogueOff ;
8786: CALL_OW 7
// end ; 2 :
8790: GO 8810
8792: LD_INT 2
8794: DOUBLE
8795: EQUAL
8796: IFTRUE 8800
8798: GO 8809
8800: POP
// begin DialogueOff ;
8801: CALL_OW 7
// exit ;
8805: GO 9699
// end ; end ;
8807: GO 8810
8809: POP
// if trap = 1 then
8810: LD_EXP 17
8814: PUSH
8815: LD_INT 1
8817: EQUAL
8818: IFFALSE 9270
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8820: LD_INT 64
8822: PPUSH
8823: LD_INT 32
8825: PPUSH
8826: LD_INT 2
8828: PPUSH
8829: LD_INT 8
8831: PPUSH
8832: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8836: LD_INT 64
8838: PPUSH
8839: LD_INT 32
8841: PPUSH
8842: CALL_OW 84
// tmp := [ ] ;
8846: LD_ADDR_VAR 0 3
8850: PUSH
8851: EMPTY
8852: ST_TO_ADDR
// k := 3 ;
8853: LD_ADDR_VAR 0 2
8857: PUSH
8858: LD_INT 3
8860: ST_TO_ADDR
// if usForces < 3 then
8861: LD_EXP 21
8865: PUSH
8866: LD_INT 3
8868: LESS
8869: IFFALSE 8881
// k := usForces ;
8871: LD_ADDR_VAR 0 2
8875: PUSH
8876: LD_EXP 21
8880: ST_TO_ADDR
// for i := 1 to k do
8881: LD_ADDR_VAR 0 1
8885: PUSH
8886: DOUBLE
8887: LD_INT 1
8889: DEC
8890: ST_TO_ADDR
8891: LD_VAR 0 2
8895: PUSH
8896: FOR_TO
8897: IFFALSE 8952
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8899: LD_ADDR_VAR 0 3
8903: PUSH
8904: LD_VAR 0 3
8908: PPUSH
8909: LD_VAR 0 3
8913: PUSH
8914: LD_INT 1
8916: PLUS
8917: PPUSH
8918: LD_EXP 21
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PPUSH
8927: CALL_OW 1
8931: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8932: LD_ADDR_EXP 21
8936: PUSH
8937: LD_EXP 21
8941: PPUSH
8942: LD_INT 1
8944: PPUSH
8945: CALL_OW 3
8949: ST_TO_ADDR
// end ;
8950: GO 8896
8952: POP
8953: POP
// usPatrol := tmp ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: LD_VAR 0 3
8963: ST_TO_ADDR
// for i in tmp do
8964: LD_ADDR_VAR 0 1
8968: PUSH
8969: LD_VAR 0 3
8973: PUSH
8974: FOR_IN
8975: IFFALSE 9105
// begin if IsInUnit ( i ) then
8977: LD_VAR 0 1
8981: PPUSH
8982: CALL_OW 310
8986: IFFALSE 8997
// ComExitBuilding ( i ) ;
8988: LD_VAR 0 1
8992: PPUSH
8993: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8997: LD_VAR 0 1
9001: PPUSH
9002: LD_INT 63
9004: PPUSH
9005: LD_INT 31
9007: PPUSH
9008: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_INT 70
9019: PPUSH
9020: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9024: LD_VAR 0 1
9028: PPUSH
9029: LD_INT 103
9031: PPUSH
9032: LD_INT 43
9034: PPUSH
9035: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9039: LD_VAR 0 1
9043: PPUSH
9044: LD_INT 105
9046: PPUSH
9047: CALL_OW 202
// if Difficulty > 1 then
9051: LD_OWVAR 67
9055: PUSH
9056: LD_INT 1
9058: GREATER
9059: IFFALSE 9076
// AddComAgressiveMove ( i , 114 , 69 ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: LD_INT 114
9068: PPUSH
9069: LD_INT 69
9071: PPUSH
9072: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9076: LD_VAR 0 1
9080: PPUSH
9081: LD_INT 105
9083: PPUSH
9084: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9088: LD_VAR 0 1
9092: PPUSH
9093: LD_INT 42
9095: PPUSH
9096: LD_INT 20
9098: PPUSH
9099: CALL_OW 174
// end ;
9103: GO 8974
9105: POP
9106: POP
// wait ( 0 0$8 ) ;
9107: LD_INT 280
9109: PPUSH
9110: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9114: LD_INT 64
9116: PPUSH
9117: LD_INT 32
9119: PPUSH
9120: LD_INT 2
9122: PPUSH
9123: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9127: LD_INT 35
9129: PPUSH
9130: CALL_OW 67
// for i in tmp do
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_VAR 0 3
9143: PUSH
9144: FOR_IN
9145: IFFALSE 9176
// if IsDead ( i ) then
9147: LD_VAR 0 1
9151: PPUSH
9152: CALL_OW 301
9156: IFFALSE 9174
// tmp := tmp diff i ;
9158: LD_ADDR_VAR 0 3
9162: PUSH
9163: LD_VAR 0 3
9167: PUSH
9168: LD_VAR 0 1
9172: DIFF
9173: ST_TO_ADDR
9174: GO 9144
9176: POP
9177: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9178: LD_VAR 0 3
9182: NOT
9183: PUSH
9184: LD_VAR 0 3
9188: PPUSH
9189: LD_INT 95
9191: PUSH
9192: LD_INT 7
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 3
9201: PUSH
9202: LD_INT 60
9204: PUSH
9205: EMPTY
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: PPUSH
9216: CALL_OW 72
9220: PUSH
9221: LD_VAR 0 3
9225: EQUAL
9226: OR
9227: IFFALSE 9127
// if tmp then
9229: LD_VAR 0 3
9233: IFFALSE 9260
// begin usPatrol := [ ] ;
9235: LD_ADDR_EXP 16
9239: PUSH
9240: EMPTY
9241: ST_TO_ADDR
// usForces := usForces union tmp ;
9242: LD_ADDR_EXP 21
9246: PUSH
9247: LD_EXP 21
9251: PUSH
9252: LD_VAR 0 3
9256: UNION
9257: ST_TO_ADDR
// end else
9258: GO 9268
// trickyMove := true ;
9260: LD_ADDR_EXP 15
9264: PUSH
9265: LD_INT 1
9267: ST_TO_ADDR
// end else
9268: GO 9699
// begin tmp := [ ] ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: EMPTY
9276: ST_TO_ADDR
// k := 4 ;
9277: LD_ADDR_VAR 0 2
9281: PUSH
9282: LD_INT 4
9284: ST_TO_ADDR
// if usForces < 4 then
9285: LD_EXP 21
9289: PUSH
9290: LD_INT 4
9292: LESS
9293: IFFALSE 9305
// k := usForces ;
9295: LD_ADDR_VAR 0 2
9299: PUSH
9300: LD_EXP 21
9304: ST_TO_ADDR
// for i := 1 to k do
9305: LD_ADDR_VAR 0 1
9309: PUSH
9310: DOUBLE
9311: LD_INT 1
9313: DEC
9314: ST_TO_ADDR
9315: LD_VAR 0 2
9319: PUSH
9320: FOR_TO
9321: IFFALSE 9376
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9323: LD_ADDR_VAR 0 3
9327: PUSH
9328: LD_VAR 0 3
9332: PPUSH
9333: LD_VAR 0 3
9337: PUSH
9338: LD_INT 1
9340: PLUS
9341: PPUSH
9342: LD_EXP 21
9346: PUSH
9347: LD_INT 1
9349: ARRAY
9350: PPUSH
9351: CALL_OW 1
9355: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9356: LD_ADDR_EXP 21
9360: PUSH
9361: LD_EXP 21
9365: PPUSH
9366: LD_INT 1
9368: PPUSH
9369: CALL_OW 3
9373: ST_TO_ADDR
// end ;
9374: GO 9320
9376: POP
9377: POP
// if Lynch then
9378: LD_EXP 20
9382: IFFALSE 9400
// tmp := tmp ^ Lynch ;
9384: LD_ADDR_VAR 0 3
9388: PUSH
9389: LD_VAR 0 3
9393: PUSH
9394: LD_EXP 20
9398: ADD
9399: ST_TO_ADDR
// usPatrol := tmp ;
9400: LD_ADDR_EXP 16
9404: PUSH
9405: LD_VAR 0 3
9409: ST_TO_ADDR
// for i in tmp do
9410: LD_ADDR_VAR 0 1
9414: PUSH
9415: LD_VAR 0 3
9419: PUSH
9420: FOR_IN
9421: IFFALSE 9514
// begin if IsInUnit ( i ) then
9423: LD_VAR 0 1
9427: PPUSH
9428: CALL_OW 310
9432: IFFALSE 9443
// ComExitBuilding ( i ) ;
9434: LD_VAR 0 1
9438: PPUSH
9439: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9443: LD_VAR 0 1
9447: PPUSH
9448: LD_INT 69
9450: PPUSH
9451: LD_INT 15
9453: PPUSH
9454: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9458: LD_VAR 0 1
9462: PPUSH
9463: LD_INT 700
9465: PPUSH
9466: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9470: LD_VAR 0 1
9474: PPUSH
9475: LD_INT 55
9477: PPUSH
9478: LD_INT 43
9480: PPUSH
9481: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9485: LD_VAR 0 1
9489: PPUSH
9490: LD_INT 700
9492: PPUSH
9493: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9497: LD_VAR 0 1
9501: PPUSH
9502: LD_INT 42
9504: PPUSH
9505: LD_INT 20
9507: PPUSH
9508: CALL_OW 174
// end ;
9512: GO 9420
9514: POP
9515: POP
// repeat wait ( 0 0$1 ) ;
9516: LD_INT 35
9518: PPUSH
9519: CALL_OW 67
// for i in tmp do
9523: LD_ADDR_VAR 0 1
9527: PUSH
9528: LD_VAR 0 3
9532: PUSH
9533: FOR_IN
9534: IFFALSE 9565
// if IsDead ( i ) then
9536: LD_VAR 0 1
9540: PPUSH
9541: CALL_OW 301
9545: IFFALSE 9563
// tmp := tmp diff i ;
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: LD_VAR 0 3
9556: PUSH
9557: LD_VAR 0 1
9561: DIFF
9562: ST_TO_ADDR
9563: GO 9533
9565: POP
9566: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9567: LD_VAR 0 3
9571: NOT
9572: PUSH
9573: LD_VAR 0 3
9577: PPUSH
9578: LD_INT 95
9580: PUSH
9581: LD_INT 7
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: LD_INT 60
9593: PUSH
9594: EMPTY
9595: LIST
9596: PUSH
9597: EMPTY
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PPUSH
9605: CALL_OW 72
9609: PUSH
9610: LD_VAR 0 3
9614: EQUAL
9615: OR
9616: IFFALSE 9516
// if not tmp then
9618: LD_VAR 0 3
9622: NOT
9623: IFFALSE 9635
// trickyMove := true else
9625: LD_ADDR_EXP 15
9629: PUSH
9630: LD_INT 1
9632: ST_TO_ADDR
9633: GO 9642
// usPatrol := [ ] ;
9635: LD_ADDR_EXP 16
9639: PUSH
9640: EMPTY
9641: ST_TO_ADDR
// if tmp diff Lynch then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_EXP 20
9651: DIFF
9652: IFFALSE 9676
// usForces := usForces union ( tmp diff Lynch ) ;
9654: LD_ADDR_EXP 21
9658: PUSH
9659: LD_EXP 21
9663: PUSH
9664: LD_VAR 0 3
9668: PUSH
9669: LD_EXP 20
9673: DIFF
9674: UNION
9675: ST_TO_ADDR
// if IsOk ( Lynch ) then
9676: LD_EXP 20
9680: PPUSH
9681: CALL_OW 302
9685: IFFALSE 9699
// ComEnterUnit ( Lynch , Delta ) ;
9687: LD_EXP 20
9691: PPUSH
9692: LD_INT 1
9694: PPUSH
9695: CALL_OW 120
// end ; end ; end ;
9699: PPOPN 3
9701: END
// every 0 0$1 trigger trickyMove do
9702: LD_EXP 15
9706: IFFALSE 9718
9708: GO 9710
9710: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9711: LD_STRING ACH_TRAP
9713: PPUSH
9714: CALL_OW 543
9718: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9719: LD_INT 22
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 23
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: PPUSH
9754: CALL_OW 69
9758: IFFALSE 9770
9760: GO 9762
9762: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9763: LD_STRING ACH_SCRAP
9765: PPUSH
9766: CALL_OW 543
9770: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9771: LD_EXP 16
9775: PPUSH
9776: LD_INT 101
9778: PUSH
9779: LD_INT 2
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PPUSH
9786: CALL_OW 72
9790: PUSH
9791: LD_INT 1
9793: PPUSH
9794: LD_EXP 23
9798: PPUSH
9799: CALL_OW 292
9803: AND
9804: IFFALSE 9937
9806: GO 9808
9808: DISABLE
// begin if not trap then
9809: LD_EXP 17
9813: NOT
9814: IFFALSE 9842
// begin Say ( Heike , DH-2-trap ) ;
9816: LD_EXP 23
9820: PPUSH
9821: LD_STRING DH-2-trap
9823: PPUSH
9824: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9828: LD_EXP 25
9832: PPUSH
9833: LD_STRING DM-2-trap
9835: PPUSH
9836: CALL_OW 88
// end else
9840: GO 9854
// begin Say ( Heike , DH-1-trap-a ) ;
9842: LD_EXP 23
9846: PPUSH
9847: LD_STRING DH-1-trap-a
9849: PPUSH
9850: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9854: LD_INT 35
9856: PPUSH
9857: CALL_OW 67
// until trickyMove ;
9861: LD_EXP 15
9865: IFFALSE 9854
// Say ( Heike , DH-3-trap ) ;
9867: LD_EXP 23
9871: PPUSH
9872: LD_STRING DH-3-trap
9874: PPUSH
9875: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9879: LD_EXP 24
9883: PPUSH
9884: CALL_OW 302
9888: PUSH
9889: LD_EXP 28
9893: PPUSH
9894: CALL_OW 302
9898: AND
9899: IFFALSE 9937
// begin Say ( Givi , DG-3-trap ) ;
9901: LD_EXP 24
9905: PPUSH
9906: LD_STRING DG-3-trap
9908: PPUSH
9909: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9913: LD_EXP 28
9917: PPUSH
9918: LD_STRING DK-3-trap
9920: PPUSH
9921: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9925: LD_EXP 24
9929: PPUSH
9930: LD_STRING DG-4-trap
9932: PPUSH
9933: CALL_OW 88
// end ; end ;
9937: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9938: LD_INT 1
9940: PPUSH
9941: CALL_OW 255
9945: PUSH
9946: LD_INT 2
9948: EQUAL
9949: PUSH
9950: LD_EXP 14
9954: AND
9955: IFFALSE 10114
9957: GO 9959
9959: DISABLE
9960: LD_INT 0
9962: PPUSH
9963: PPUSH
// begin if not IsOk ( Kaia ) then
9964: LD_EXP 28
9968: PPUSH
9969: CALL_OW 302
9973: NOT
9974: IFFALSE 9978
// exit ;
9976: GO 10114
// if tick < 5 5$00 then
9978: LD_OWVAR 1
9982: PUSH
9983: LD_INT 10500
9985: LESS
9986: IFFALSE 9995
// SetAchievement ( ACH_DELTA ) ;
9988: LD_STRING ACH_DELTA
9990: PPUSH
9991: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9995: LD_EXP 28
9999: PPUSH
10000: LD_STRING DK-1-capture
10002: PPUSH
10003: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10007: LD_EXP 23
10011: PPUSH
10012: LD_STRING DH-1-capture
10014: PPUSH
10015: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10019: LD_ADDR_VAR 0 2
10023: PUSH
10024: LD_INT 22
10026: PUSH
10027: LD_INT 1
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 25
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if not tmp then
10053: LD_VAR 0 2
10057: NOT
10058: IFFALSE 10062
// exit ;
10060: GO 10114
// for i in tmp do
10062: LD_ADDR_VAR 0 1
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: FOR_IN
10073: IFFALSE 10112
// begin if IsInUnit ( i ) then
10075: LD_VAR 0 1
10079: PPUSH
10080: CALL_OW 310
10084: IFFALSE 10095
// ComExitBuilding ( i ) ;
10086: LD_VAR 0 1
10090: PPUSH
10091: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10095: LD_VAR 0 1
10099: PPUSH
10100: LD_INT 38
10102: PPUSH
10103: LD_INT 23
10105: PPUSH
10106: CALL_OW 174
// end ;
10110: GO 10072
10112: POP
10113: POP
// end ;
10114: PPOPN 2
10116: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10117: LD_INT 3
10119: PPUSH
10120: CALL_OW 255
10124: PUSH
10125: LD_INT 2
10127: EQUAL
10128: PUSH
10129: LD_EXP 14
10133: AND
10134: IFFALSE 10166
10136: GO 10138
10138: DISABLE
// begin DialogueOn ;
10139: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10143: LD_EXP 27
10147: PPUSH
10148: LD_STRING DA-1-capture
10150: PPUSH
10151: CALL_OW 88
// DialogueOff ;
10155: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10159: LD_STRING OTame
10161: PPUSH
10162: CALL_OW 337
// end ;
10166: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10167: LD_INT 1
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 321
10177: PUSH
10178: LD_INT 2
10180: EQUAL
10181: PUSH
10182: LD_EXP 14
10186: AND
10187: IFFALSE 10338
10189: GO 10191
10191: DISABLE
// begin DialogueOn ;
10192: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10196: LD_EXP 27
10200: PPUSH
10201: LD_STRING DA-1-ape
10203: PPUSH
10204: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10208: LD_EXP 23
10212: PPUSH
10213: LD_STRING DH-1-ape
10215: PPUSH
10216: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10220: LD_EXP 27
10224: PPUSH
10225: LD_STRING DA-2-ape
10227: PPUSH
10228: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10232: LD_EXP 27
10236: PPUSH
10237: LD_STRING DA-3-ape
10239: PPUSH
10240: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10244: LD_EXP 23
10248: PPUSH
10249: LD_STRING DH-3-ape
10251: PPUSH
10252: CALL_OW 88
// DialogueOff ;
10256: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10260: LD_INT 22
10262: PUSH
10263: LD_INT 0
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 12
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: PPUSH
10284: CALL_OW 69
10288: PUSH
10289: LD_INT 0
10291: EQUAL
10292: IFFALSE 10304
// SpawnApeman ( forest , 2 ) ;
10294: LD_INT 1
10296: PPUSH
10297: LD_INT 2
10299: PPUSH
10300: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10304: LD_INT 35
10306: PPUSH
10307: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10311: LD_INT 25
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: PUSH
10326: LD_INT 0
10328: EQUAL
10329: IFFALSE 10304
// YouLost ( Ape ) ;
10331: LD_STRING Ape
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10339: LD_EXP 18
10343: PUSH
10344: LD_INT 3
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: LD_INT 2
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: LD_OWVAR 67
10366: ARRAY
10367: GREATEREQUAL
10368: IFFALSE 10412
10370: GO 10372
10372: DISABLE
// begin DialogueOn ;
10373: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10377: LD_EXP 27
10381: PPUSH
10382: LD_STRING DA-1-failure
10384: PPUSH
10385: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10389: LD_EXP 27
10393: PPUSH
10394: LD_STRING DA-2-failure
10396: PPUSH
10397: CALL_OW 88
// YouLost ( Failure ) ;
10401: LD_STRING Failure
10403: PPUSH
10404: CALL_OW 104
// DialogueOff ;
10408: CALL_OW 7
// end ;
10412: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10413: LD_EXP 28
10417: PPUSH
10418: CALL_OW 256
10422: PUSH
10423: LD_INT 3
10425: LESS
10426: IFFALSE 10559
10428: GO 10430
10430: DISABLE
// begin DialogueOn ;
10431: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10435: LD_EXP 28
10439: PPUSH
10440: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10444: LD_EXP 28
10448: PPUSH
10449: LD_STRING DK-Kaiaout-1
10451: PPUSH
10452: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10456: LD_EXP 23
10460: PPUSH
10461: LD_STRING DH-Kaiaout-2
10463: PPUSH
10464: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10468: LD_EXP 24
10472: PPUSH
10473: LD_STRING DG-Kaiaout-3
10475: PPUSH
10476: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10480: LD_EXP 23
10484: PPUSH
10485: LD_STRING DH-Kaiaout-4
10487: PPUSH
10488: CALL_OW 88
// if Givi then
10492: LD_EXP 24
10496: IFFALSE 10546
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10498: LD_EXP 24
10502: PPUSH
10503: LD_STRING DG-Kaiaout-5
10505: PPUSH
10506: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10510: LD_EXP 23
10514: PPUSH
10515: LD_STRING DH-Kaiaout-6
10517: PPUSH
10518: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10522: LD_EXP 24
10526: PPUSH
10527: LD_STRING DG-Kaiaout-7
10529: PPUSH
10530: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10534: LD_EXP 23
10538: PPUSH
10539: LD_STRING DH-Kaiaout-8
10541: PPUSH
10542: CALL_OW 88
// end ; DialogueOff ;
10546: CALL_OW 7
// KillUnit ( Kaia ) ;
10550: LD_EXP 28
10554: PPUSH
10555: CALL_OW 66
// end ;
10559: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10560: LD_INT 22
10562: PUSH
10563: LD_INT 2
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PUSH
10570: LD_INT 23
10572: PUSH
10573: LD_INT 0
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PPUSH
10584: CALL_OW 69
10588: PUSH
10589: LD_EXP 27
10593: PPUSH
10594: CALL_OW 302
10598: AND
10599: PUSH
10600: LD_EXP 27
10604: PPUSH
10605: CALL_OW 255
10609: PUSH
10610: LD_INT 2
10612: EQUAL
10613: AND
10614: IFFALSE 11559
10616: GO 10618
10618: DISABLE
10619: LD_INT 0
10621: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10622: LD_INT 22
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: LD_INT 2
10634: PUSH
10635: LD_INT 25
10637: PUSH
10638: LD_INT 1
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 34
10647: PUSH
10648: LD_INT 4
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: PPUSH
10664: CALL_OW 69
10668: IFFALSE 10763
// begin Query ( QEnemyInSight ) ;
10670: LD_STRING QEnemyInSight
10672: PPUSH
10673: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10677: LD_INT 35
10679: PPUSH
10680: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10684: LD_INT 22
10686: PUSH
10687: LD_INT 1
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 2
10696: PUSH
10697: LD_INT 25
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 34
10709: PUSH
10710: LD_INT 4
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: PPUSH
10726: CALL_OW 69
10730: NOT
10731: PUSH
10732: LD_INT 22
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 23
10744: PUSH
10745: LD_INT 0
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: AND
10761: IFFALSE 10677
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_INT 22
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 23
10780: PUSH
10781: LD_INT 0
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 69
10796: ST_TO_ADDR
// InGameOn ;
10797: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10801: LD_VAR 0 1
10805: PPUSH
10806: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_EXP 27
10819: PPUSH
10820: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10824: LD_EXP 27
10828: PPUSH
10829: LD_VAR 0 1
10833: PPUSH
10834: CALL_OW 119
// wait ( 0 0$1 ) ;
10838: LD_INT 35
10840: PPUSH
10841: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10845: LD_EXP 27
10849: PPUSH
10850: LD_STRING DA-1-tame-a
10852: PPUSH
10853: CALL_OW 88
// if IsOk ( Mike ) then
10857: LD_EXP 25
10861: PPUSH
10862: CALL_OW 302
10866: IFFALSE 10904
// begin Say ( Mike , DM-1-tame-a ) ;
10868: LD_EXP 25
10872: PPUSH
10873: LD_STRING DM-1-tame-a
10875: PPUSH
10876: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10880: LD_EXP 29
10884: PPUSH
10885: LD_STRING DS-1-tame-a
10887: PPUSH
10888: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10892: LD_EXP 25
10896: PPUSH
10897: LD_STRING DM-2-tame-a
10899: PPUSH
10900: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10904: LD_INT 105
10906: PPUSH
10907: CALL_OW 67
// PrepareFarmer ;
10911: CALL 12238 0 0
// CenterOnUnits ( Farmer ) ;
10915: LD_EXP 31
10919: PPUSH
10920: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10924: LD_EXP 31
10928: PPUSH
10929: LD_INT 105
10931: PPUSH
10932: LD_INT 59
10934: PPUSH
10935: CALL_OW 111
// AddComHold ( Farmer ) ;
10939: LD_EXP 31
10943: PPUSH
10944: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10948: LD_EXP 31
10952: PPUSH
10953: LD_STRING DF-1-end
10955: PPUSH
10956: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10960: LD_EXP 27
10964: PPUSH
10965: LD_STRING DA-1-end
10967: PPUSH
10968: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10972: LD_EXP 31
10976: PPUSH
10977: LD_STRING DF-2-end
10979: PPUSH
10980: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10984: LD_EXP 27
10988: PPUSH
10989: LD_STRING DA-2-end
10991: PPUSH
10992: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10996: LD_EXP 31
11000: PPUSH
11001: LD_STRING DF-3-end
11003: PPUSH
11004: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11008: LD_EXP 23
11012: PPUSH
11013: LD_STRING DH-3-end
11015: PPUSH
11016: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11020: LD_EXP 31
11024: PPUSH
11025: LD_STRING DF-4-end
11027: PPUSH
11028: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11032: LD_OWVAR 1
11036: PUSH
11037: LD_INT 52500
11039: PUSH
11040: LD_INT 47250
11042: PUSH
11043: LD_INT 42000
11045: PUSH
11046: LD_INT 31500
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: PUSH
11055: LD_OWVAR 67
11059: ARRAY
11060: LESSEQUAL
11061: IFFALSE 11075
// AddMedal ( med1 , 1 ) else
11063: LD_STRING med1
11065: PPUSH
11066: LD_INT 1
11068: PPUSH
11069: CALL_OW 101
11073: GO 11086
// AddMedal ( med1 , - 1 ) ;
11075: LD_STRING med1
11077: PPUSH
11078: LD_INT 1
11080: NEG
11081: PPUSH
11082: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11086: LD_INT 22
11088: PUSH
11089: LD_INT 1
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PPUSH
11110: CALL_OW 69
11114: PUSH
11115: LD_INT 0
11117: EQUAL
11118: PUSH
11119: LD_EXP 12
11123: NOT
11124: AND
11125: IFFALSE 11139
// AddMedal ( med2 , 1 ) else
11127: LD_STRING med2
11129: PPUSH
11130: LD_INT 1
11132: PPUSH
11133: CALL_OW 101
11137: GO 11150
// AddMedal ( med2 , - 1 ) ;
11139: LD_STRING med2
11141: PPUSH
11142: LD_INT 1
11144: NEG
11145: PPUSH
11146: CALL_OW 101
// if trickyMove then
11150: LD_EXP 15
11154: IFFALSE 11168
// AddMedal ( med3 , 1 ) else
11156: LD_STRING med3
11158: PPUSH
11159: LD_INT 1
11161: PPUSH
11162: CALL_OW 101
11166: GO 11198
// if spottedBeforeRadio then
11168: LD_EXP 6
11172: IFFALSE 11187
// AddMedal ( med3 , - 2 ) else
11174: LD_STRING med3
11176: PPUSH
11177: LD_INT 2
11179: NEG
11180: PPUSH
11181: CALL_OW 101
11185: GO 11198
// AddMedal ( med3 , - 1 ) ;
11187: LD_STRING med3
11189: PPUSH
11190: LD_INT 1
11192: NEG
11193: PPUSH
11194: CALL_OW 101
// GiveMedals ( MAIN ) ;
11198: LD_STRING MAIN
11200: PPUSH
11201: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11205: LD_VAR 0 1
11209: PPUSH
11210: LD_STRING 02_ape
11212: PPUSH
11213: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11217: LD_ADDR_VAR 0 1
11221: PUSH
11222: LD_INT 22
11224: PUSH
11225: LD_INT 2
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PUSH
11232: LD_INT 23
11234: PUSH
11235: LD_INT 2
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: PUSH
11242: LD_INT 21
11244: PUSH
11245: LD_INT 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: PPUSH
11257: CALL_OW 69
11261: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11262: LD_VAR 0 1
11266: PPUSH
11267: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11271: LD_EXP 23
11275: PPUSH
11276: LD_STRING 02_Heike
11278: PPUSH
11279: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11283: LD_EXP 27
11287: PPUSH
11288: LD_STRING 02_Aviradze
11290: PPUSH
11291: CALL_OW 38
// if Givi then
11295: LD_EXP 24
11299: IFFALSE 11313
// SaveCharacters ( Givi , 02_Givi ) ;
11301: LD_EXP 24
11305: PPUSH
11306: LD_STRING 02_Givi
11308: PPUSH
11309: CALL_OW 38
// if Mike then
11313: LD_EXP 25
11317: IFFALSE 11331
// SaveCharacters ( Mike , 02_Mike ) ;
11319: LD_EXP 25
11323: PPUSH
11324: LD_STRING 02_Mike
11326: PPUSH
11327: CALL_OW 38
// if Kamil then
11331: LD_EXP 26
11335: IFFALSE 11349
// SaveCharacters ( Kamil , 02_Kamil ) ;
11337: LD_EXP 26
11341: PPUSH
11342: LD_STRING 02_Kamil
11344: PPUSH
11345: CALL_OW 38
// if Kaia then
11349: LD_EXP 28
11353: IFFALSE 11367
// SaveCharacters ( Kaia , 02_Kaia ) ;
11355: LD_EXP 28
11359: PPUSH
11360: LD_STRING 02_Kaia
11362: PPUSH
11363: CALL_OW 38
// if Sophia then
11367: LD_EXP 29
11371: IFFALSE 11385
// SaveCharacters ( Sophia , 02_Sophia ) ;
11373: LD_EXP 29
11377: PPUSH
11378: LD_STRING 02_Sophia
11380: PPUSH
11381: CALL_OW 38
// if Markov then
11385: LD_EXP 30
11389: IFFALSE 11403
// SaveCharacters ( Markov , 02_Markov ) ;
11391: LD_EXP 30
11395: PPUSH
11396: LD_STRING 02_Markov
11398: PPUSH
11399: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11403: LD_VAR 0 1
11407: PUSH
11408: LD_EXP 23
11412: PUSH
11413: LD_EXP 27
11417: PUSH
11418: LD_EXP 24
11422: PUSH
11423: LD_EXP 25
11427: PUSH
11428: LD_EXP 26
11432: PUSH
11433: LD_EXP 29
11437: PUSH
11438: LD_EXP 28
11442: PUSH
11443: LD_EXP 30
11447: PUSH
11448: EMPTY
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: DIFF
11458: IFFALSE 11523
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 23
11469: PUSH
11470: LD_EXP 27
11474: PUSH
11475: LD_EXP 24
11479: PUSH
11480: LD_EXP 25
11484: PUSH
11485: LD_EXP 26
11489: PUSH
11490: LD_EXP 29
11494: PUSH
11495: LD_EXP 28
11499: PUSH
11500: LD_EXP 30
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: DIFF
11515: PPUSH
11516: LD_STRING 02_others
11518: PPUSH
11519: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11523: LD_STRING enableBioCharacter(BIO_KRAY)
11525: PPUSH
11526: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11530: LD_STRING enableBioCharacter(BIO_AVIR)
11532: PPUSH
11533: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11537: LD_STRING enableBioCharacter(BIO_SOPH)
11539: PPUSH
11540: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11544: LD_STRING enableBioCharacter(BIO_KAMI)
11546: PPUSH
11547: CALL_OW 559
// YouWin ;
11551: CALL_OW 103
// InGameOff ;
11555: CALL_OW 9
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11562: LD_OWVAR 1
11566: PUSH
11567: LD_EXP 13
11571: GREATER
11572: PUSH
11573: LD_EXP 4
11577: AND
11578: IFFALSE 11618
11580: GO 11582
11582: DISABLE
// begin InGameOn ;
11583: CALL_OW 8
// PrepareFarmer ;
11587: CALL 12238 0 0
// CenterNowOnUnits ( Farmer ) ;
11591: LD_EXP 31
11595: PPUSH
11596: CALL_OW 87
// wait ( 0 0$2 ) ;
11600: LD_INT 70
11602: PPUSH
11603: CALL_OW 67
// YouLost ( Farmer ) ;
11607: LD_STRING Farmer
11609: PPUSH
11610: CALL_OW 104
// InGameOff ;
11614: CALL_OW 9
// end ; end_of_file
11618: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11619: LD_INT 0
11621: PPUSH
11622: PPUSH
11623: PPUSH
// uc_side := 2 ;
11624: LD_ADDR_OWVAR 20
11628: PUSH
11629: LD_INT 2
11631: ST_TO_ADDR
// uc_nation := 2 ;
11632: LD_ADDR_OWVAR 21
11636: PUSH
11637: LD_INT 2
11639: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11640: LD_ADDR_EXP 23
11644: PUSH
11645: LD_STRING Heike
11647: PPUSH
11648: LD_EXP 1
11652: NOT
11653: PPUSH
11654: LD_EXP 2
11658: PPUSH
11659: CALL 30050 0 3
11663: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11664: LD_EXP 23
11668: PPUSH
11669: LD_INT 83
11671: PPUSH
11672: LD_INT 72
11674: PPUSH
11675: LD_INT 0
11677: PPUSH
11678: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11682: LD_ADDR_EXP 24
11686: PUSH
11687: LD_STRING Givi
11689: PPUSH
11690: LD_EXP 1
11694: NOT
11695: PPUSH
11696: LD_EXP 2
11700: PPUSH
11701: CALL 30050 0 3
11705: ST_TO_ADDR
// if Givi then
11706: LD_EXP 24
11710: IFFALSE 11730
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11712: LD_EXP 24
11716: PPUSH
11717: LD_INT 87
11719: PPUSH
11720: LD_INT 76
11722: PPUSH
11723: LD_INT 0
11725: PPUSH
11726: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11730: LD_ADDR_EXP 25
11734: PUSH
11735: LD_STRING Mike
11737: PPUSH
11738: LD_EXP 1
11742: NOT
11743: PPUSH
11744: LD_EXP 2
11748: PPUSH
11749: CALL 30050 0 3
11753: ST_TO_ADDR
// if Mike then
11754: LD_EXP 25
11758: IFFALSE 11778
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11760: LD_EXP 25
11764: PPUSH
11765: LD_INT 84
11767: PPUSH
11768: LD_INT 76
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11778: LD_ADDR_EXP 26
11782: PUSH
11783: LD_STRING Kamil
11785: PPUSH
11786: LD_EXP 1
11790: NOT
11791: PPUSH
11792: LD_EXP 2
11796: PPUSH
11797: CALL 30050 0 3
11801: ST_TO_ADDR
// if Kamil then
11802: LD_EXP 26
11806: IFFALSE 11826
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11808: LD_EXP 26
11812: PPUSH
11813: LD_INT 85
11815: PPUSH
11816: LD_INT 78
11818: PPUSH
11819: LD_INT 0
11821: PPUSH
11822: CALL_OW 48
// uc_side := 5 ;
11826: LD_ADDR_OWVAR 20
11830: PUSH
11831: LD_INT 5
11833: ST_TO_ADDR
// uc_nation := 2 ;
11834: LD_ADDR_OWVAR 21
11838: PUSH
11839: LD_INT 2
11841: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11842: LD_ADDR_EXP 27
11846: PUSH
11847: LD_STRING Aviradze
11849: PPUSH
11850: LD_INT 0
11852: PPUSH
11853: LD_STRING 
11855: PPUSH
11856: CALL 30050 0 3
11860: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11861: LD_EXP 27
11865: PPUSH
11866: LD_INT 106
11868: PPUSH
11869: LD_INT 38
11871: PPUSH
11872: LD_INT 0
11874: PPUSH
11875: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11879: LD_EXP 27
11883: PPUSH
11884: LD_INT 103
11886: PPUSH
11887: LD_INT 38
11889: PPUSH
11890: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11894: LD_ADDR_EXP 28
11898: PUSH
11899: LD_STRING Kaia
11901: PPUSH
11902: LD_INT 0
11904: PPUSH
11905: LD_STRING 
11907: PPUSH
11908: CALL 30050 0 3
11912: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11913: LD_EXP 28
11917: PPUSH
11918: LD_INT 100
11920: PPUSH
11921: LD_INT 34
11923: PPUSH
11924: LD_INT 0
11926: PPUSH
11927: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11931: LD_EXP 28
11935: PPUSH
11936: LD_INT 100
11938: PPUSH
11939: LD_INT 39
11941: PPUSH
11942: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11946: LD_ADDR_EXP 29
11950: PUSH
11951: LD_STRING Sophia
11953: PPUSH
11954: LD_INT 0
11956: PPUSH
11957: LD_STRING 
11959: PPUSH
11960: CALL 30050 0 3
11964: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11965: LD_EXP 29
11969: PPUSH
11970: LD_INT 109
11972: PPUSH
11973: LD_INT 50
11975: PPUSH
11976: LD_INT 0
11978: PPUSH
11979: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11983: LD_EXP 29
11987: PPUSH
11988: LD_INT 100
11990: PPUSH
11991: LD_INT 39
11993: PPUSH
11994: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11998: LD_ADDR_EXP 30
12002: PUSH
12003: LD_STRING Markov
12005: PPUSH
12006: LD_INT 0
12008: PPUSH
12009: LD_STRING 
12011: PPUSH
12012: CALL 30050 0 3
12016: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12017: LD_INT 5
12019: PPUSH
12020: LD_INT 3
12022: PPUSH
12023: LD_INT 21
12025: PPUSH
12026: LD_INT 1
12028: PPUSH
12029: LD_INT 1
12031: PPUSH
12032: LD_INT 42
12034: PPUSH
12035: LD_INT 90
12037: PUSH
12038: LD_INT 70
12040: PUSH
12041: LD_INT 60
12043: PUSH
12044: LD_INT 50
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_OWVAR 67
12057: ARRAY
12058: PPUSH
12059: CALL 241 0 7
// veh := CreateVehicle ;
12063: LD_ADDR_VAR 0 3
12067: PUSH
12068: CALL_OW 45
12072: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12073: LD_VAR 0 3
12077: PPUSH
12078: LD_INT 4
12080: PPUSH
12081: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12085: LD_VAR 0 3
12089: PPUSH
12090: LD_INT 109
12092: PPUSH
12093: LD_INT 38
12095: PPUSH
12096: LD_INT 0
12098: PPUSH
12099: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12103: LD_EXP 30
12107: PPUSH
12108: LD_VAR 0 3
12112: PPUSH
12113: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12117: LD_EXP 28
12121: PPUSH
12122: LD_EXP 27
12126: PPUSH
12127: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12131: LD_EXP 27
12135: PPUSH
12136: LD_EXP 28
12140: PPUSH
12141: CALL_OW 119
// if not Givi or not Mike then
12145: LD_EXP 24
12149: NOT
12150: PUSH
12151: LD_EXP 25
12155: NOT
12156: OR
12157: IFFALSE 12233
// begin uc_nation := 2 ;
12159: LD_ADDR_OWVAR 21
12163: PUSH
12164: LD_INT 2
12166: ST_TO_ADDR
// uc_side := 5 ;
12167: LD_ADDR_OWVAR 20
12171: PUSH
12172: LD_INT 5
12174: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12175: LD_INT 1
12177: PPUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_INT 1
12183: PPUSH
12184: CALL_OW 380
// un := CreateHuman ;
12188: LD_ADDR_VAR 0 2
12192: PUSH
12193: CALL_OW 44
12197: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12198: LD_VAR 0 2
12202: PPUSH
12203: LD_INT 112
12205: PPUSH
12206: LD_INT 40
12208: PPUSH
12209: LD_INT 3
12211: PPUSH
12212: LD_INT 0
12214: PPUSH
12215: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12219: LD_VAR 0 2
12223: PPUSH
12224: LD_EXP 27
12228: PPUSH
12229: CALL_OW 119
// end ; end ;
12233: LD_VAR 0 1
12237: RET
// export function PrepareFarmer ; var i ; begin
12238: LD_INT 0
12240: PPUSH
12241: PPUSH
// uc_side := 5 ;
12242: LD_ADDR_OWVAR 20
12246: PUSH
12247: LD_INT 5
12249: ST_TO_ADDR
// uc_nation := 2 ;
12250: LD_ADDR_OWVAR 21
12254: PUSH
12255: LD_INT 2
12257: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12258: LD_ADDR_EXP 31
12262: PUSH
12263: LD_STRING Farmer
12265: PPUSH
12266: LD_INT 0
12268: PPUSH
12269: LD_STRING 
12271: PPUSH
12272: CALL 30050 0 3
12276: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12277: LD_EXP 31
12281: PPUSH
12282: LD_INT 106
12284: PPUSH
12285: LD_INT 62
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL_OW 48
// for i := 1 to 5 do
12295: LD_ADDR_VAR 0 2
12299: PUSH
12300: DOUBLE
12301: LD_INT 1
12303: DEC
12304: ST_TO_ADDR
12305: LD_INT 5
12307: PUSH
12308: FOR_TO
12309: IFFALSE 12347
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12311: LD_INT 1
12313: PPUSH
12314: LD_INT 1
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12324: CALL_OW 44
12328: PPUSH
12329: LD_INT 105
12331: PPUSH
12332: LD_INT 64
12334: PPUSH
12335: LD_INT 3
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 50
// end ;
12345: GO 12308
12347: POP
12348: POP
// end ; end_of_file
12349: LD_VAR 0 1
12353: RET
// every 2 2$20 + 0 0$10 do
12354: GO 12356
12356: DISABLE
// begin enable ;
12357: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12358: LD_INT 1
12360: PPUSH
12361: LD_INT 5
12363: PPUSH
12364: CALL_OW 12
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: LD_INT 1
12374: PPUSH
12375: CALL_OW 55
// if tick > 6 6$00 then
12379: LD_OWVAR 1
12383: PUSH
12384: LD_INT 12600
12386: GREATER
12387: IFFALSE 12390
// disable ;
12389: DISABLE
// end ; end_of_file
12390: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12391: LD_VAR 0 1
12395: PUSH
12396: LD_EXP 23
12400: EQUAL
12401: IFFALSE 12410
// YouLost ( Heike ) ;
12403: LD_STRING Heike
12405: PPUSH
12406: CALL_OW 104
// if un = Aviradze then
12410: LD_VAR 0 1
12414: PUSH
12415: LD_EXP 27
12419: EQUAL
12420: IFFALSE 12429
// YouLost ( Aviradze ) ;
12422: LD_STRING Aviradze
12424: PPUSH
12425: CALL_OW 104
// if un = usLab then
12429: LD_VAR 0 1
12433: PUSH
12434: LD_INT 3
12436: EQUAL
12437: IFFALSE 12446
// YouLost ( Lab ) ;
12439: LD_STRING Lab
12441: PPUSH
12442: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12446: LD_VAR 0 1
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: LD_INT 21
12463: PUSH
12464: LD_INT 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 23
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: PUSH
12491: LD_EXP 23
12495: PUSH
12496: LD_EXP 27
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: DIFF
12505: IN
12506: PUSH
12507: LD_EXP 4
12511: AND
12512: IFFALSE 12528
// lostCounter := lostCounter + 1 ;
12514: LD_ADDR_EXP 18
12518: PUSH
12519: LD_EXP 18
12523: PUSH
12524: LD_INT 1
12526: PLUS
12527: ST_TO_ADDR
// end ;
12528: PPOPN 1
12530: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12531: LD_INT 23
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 25
12543: PUSH
12544: LD_INT 2
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 69
12559: PUSH
12560: LD_INT 0
12562: EQUAL
12563: PUSH
12564: LD_INT 22
12566: PUSH
12567: LD_INT 2
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: PUSH
12574: LD_INT 21
12576: PUSH
12577: LD_INT 3
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: PUSH
12593: LD_INT 0
12595: EQUAL
12596: AND
12597: IFFALSE 12609
12599: GO 12601
12601: DISABLE
// YouLost ( Eng ) ;
12602: LD_STRING Eng
12604: PPUSH
12605: CALL_OW 104
12609: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12610: LD_VAR 0 1
12614: PUSH
12615: LD_EXP 22
12619: IN
12620: PUSH
12621: LD_VAR 0 2
12625: PUSH
12626: LD_INT 2
12628: EQUAL
12629: AND
12630: IFFALSE 12662
// begin usSci := usSci diff un ;
12632: LD_ADDR_EXP 22
12636: PUSH
12637: LD_EXP 22
12641: PUSH
12642: LD_VAR 0 1
12646: DIFF
12647: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12648: LD_ADDR_EXP 9
12652: PUSH
12653: LD_EXP 9
12657: PUSH
12658: LD_INT 1
12660: PLUS
12661: ST_TO_ADDR
// end ; end ;
12662: PPOPN 3
12664: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12665: LD_VAR 0 1
12669: PUSH
12670: LD_INT 2
12672: EQUAL
12673: PUSH
12674: LD_VAR 0 2
12678: PUSH
12679: LD_INT 5
12681: EQUAL
12682: AND
12683: IFFALSE 12692
// YouLost ( FriendlyFire ) ;
12685: LD_STRING FriendlyFire
12687: PPUSH
12688: CALL_OW 104
// end ; end_of_file
12692: PPOPN 2
12694: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12695: LD_INT 0
12697: PPUSH
// ar_miner := 81 ;
12698: LD_ADDR_EXP 39
12702: PUSH
12703: LD_INT 81
12705: ST_TO_ADDR
// ar_crane := 88 ;
12706: LD_ADDR_EXP 38
12710: PUSH
12711: LD_INT 88
12713: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12714: LD_ADDR_EXP 33
12718: PUSH
12719: LD_INT 89
12721: ST_TO_ADDR
// us_hack := 99 ;
12722: LD_ADDR_EXP 34
12726: PUSH
12727: LD_INT 99
12729: ST_TO_ADDR
// us_artillery := 97 ;
12730: LD_ADDR_EXP 35
12734: PUSH
12735: LD_INT 97
12737: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12738: LD_ADDR_EXP 36
12742: PUSH
12743: LD_INT 91
12745: ST_TO_ADDR
// ar_mortar := 92 ;
12746: LD_ADDR_EXP 37
12750: PUSH
12751: LD_INT 92
12753: ST_TO_ADDR
// ru_radar := 98 ;
12754: LD_ADDR_EXP 32
12758: PUSH
12759: LD_INT 98
12761: ST_TO_ADDR
// tech_Artillery := 80 ;
12762: LD_ADDR_EXP 40
12766: PUSH
12767: LD_INT 80
12769: ST_TO_ADDR
// tech_RadMat := 81 ;
12770: LD_ADDR_EXP 41
12774: PUSH
12775: LD_INT 81
12777: ST_TO_ADDR
// tech_BasicTools := 82 ;
12778: LD_ADDR_EXP 42
12782: PUSH
12783: LD_INT 82
12785: ST_TO_ADDR
// tech_Cargo := 83 ;
12786: LD_ADDR_EXP 43
12790: PUSH
12791: LD_INT 83
12793: ST_TO_ADDR
// tech_Track := 84 ;
12794: LD_ADDR_EXP 44
12798: PUSH
12799: LD_INT 84
12801: ST_TO_ADDR
// tech_Crane := 85 ;
12802: LD_ADDR_EXP 45
12806: PUSH
12807: LD_INT 85
12809: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12810: LD_ADDR_EXP 46
12814: PUSH
12815: LD_INT 86
12817: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12818: LD_ADDR_EXP 47
12822: PUSH
12823: LD_INT 87
12825: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12826: LD_ADDR_EXP 48
12830: PUSH
12831: LD_INT 88
12833: ST_TO_ADDR
// class_mastodont := 31 ;
12834: LD_ADDR_EXP 49
12838: PUSH
12839: LD_INT 31
12841: ST_TO_ADDR
// class_horse := 21 ;
12842: LD_ADDR_EXP 50
12846: PUSH
12847: LD_INT 21
12849: ST_TO_ADDR
// end ;
12850: LD_VAR 0 1
12854: RET
// every 1 do
12855: GO 12857
12857: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12858: CALL 12695 0 0
12862: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12863: LD_INT 0
12865: PPUSH
// if p2 = 100 then
12866: LD_VAR 0 2
12870: PUSH
12871: LD_INT 100
12873: EQUAL
12874: IFFALSE 13823
// begin if not StreamModeActive then
12876: LD_EXP 51
12880: NOT
12881: IFFALSE 12891
// StreamModeActive := true ;
12883: LD_ADDR_EXP 51
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// if p3 = 0 then
12891: LD_VAR 0 3
12895: PUSH
12896: LD_INT 0
12898: EQUAL
12899: IFFALSE 12905
// InitStreamMode ;
12901: CALL 13983 0 0
// if p3 = 1 then
12905: LD_VAR 0 3
12909: PUSH
12910: LD_INT 1
12912: EQUAL
12913: IFFALSE 12923
// sRocket := true ;
12915: LD_ADDR_EXP 56
12919: PUSH
12920: LD_INT 1
12922: ST_TO_ADDR
// if p3 = 2 then
12923: LD_VAR 0 3
12927: PUSH
12928: LD_INT 2
12930: EQUAL
12931: IFFALSE 12941
// sSpeed := true ;
12933: LD_ADDR_EXP 55
12937: PUSH
12938: LD_INT 1
12940: ST_TO_ADDR
// if p3 = 3 then
12941: LD_VAR 0 3
12945: PUSH
12946: LD_INT 3
12948: EQUAL
12949: IFFALSE 12959
// sEngine := true ;
12951: LD_ADDR_EXP 57
12955: PUSH
12956: LD_INT 1
12958: ST_TO_ADDR
// if p3 = 4 then
12959: LD_VAR 0 3
12963: PUSH
12964: LD_INT 4
12966: EQUAL
12967: IFFALSE 12977
// sSpec := true ;
12969: LD_ADDR_EXP 54
12973: PUSH
12974: LD_INT 1
12976: ST_TO_ADDR
// if p3 = 5 then
12977: LD_VAR 0 3
12981: PUSH
12982: LD_INT 5
12984: EQUAL
12985: IFFALSE 12995
// sLevel := true ;
12987: LD_ADDR_EXP 58
12991: PUSH
12992: LD_INT 1
12994: ST_TO_ADDR
// if p3 = 6 then
12995: LD_VAR 0 3
12999: PUSH
13000: LD_INT 6
13002: EQUAL
13003: IFFALSE 13013
// sArmoury := true ;
13005: LD_ADDR_EXP 59
13009: PUSH
13010: LD_INT 1
13012: ST_TO_ADDR
// if p3 = 7 then
13013: LD_VAR 0 3
13017: PUSH
13018: LD_INT 7
13020: EQUAL
13021: IFFALSE 13031
// sRadar := true ;
13023: LD_ADDR_EXP 60
13027: PUSH
13028: LD_INT 1
13030: ST_TO_ADDR
// if p3 = 8 then
13031: LD_VAR 0 3
13035: PUSH
13036: LD_INT 8
13038: EQUAL
13039: IFFALSE 13049
// sBunker := true ;
13041: LD_ADDR_EXP 61
13045: PUSH
13046: LD_INT 1
13048: ST_TO_ADDR
// if p3 = 9 then
13049: LD_VAR 0 3
13053: PUSH
13054: LD_INT 9
13056: EQUAL
13057: IFFALSE 13067
// sHack := true ;
13059: LD_ADDR_EXP 62
13063: PUSH
13064: LD_INT 1
13066: ST_TO_ADDR
// if p3 = 10 then
13067: LD_VAR 0 3
13071: PUSH
13072: LD_INT 10
13074: EQUAL
13075: IFFALSE 13085
// sFire := true ;
13077: LD_ADDR_EXP 63
13081: PUSH
13082: LD_INT 1
13084: ST_TO_ADDR
// if p3 = 11 then
13085: LD_VAR 0 3
13089: PUSH
13090: LD_INT 11
13092: EQUAL
13093: IFFALSE 13103
// sRefresh := true ;
13095: LD_ADDR_EXP 64
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// if p3 = 12 then
13103: LD_VAR 0 3
13107: PUSH
13108: LD_INT 12
13110: EQUAL
13111: IFFALSE 13121
// sExp := true ;
13113: LD_ADDR_EXP 65
13117: PUSH
13118: LD_INT 1
13120: ST_TO_ADDR
// if p3 = 13 then
13121: LD_VAR 0 3
13125: PUSH
13126: LD_INT 13
13128: EQUAL
13129: IFFALSE 13139
// sDepot := true ;
13131: LD_ADDR_EXP 66
13135: PUSH
13136: LD_INT 1
13138: ST_TO_ADDR
// if p3 = 14 then
13139: LD_VAR 0 3
13143: PUSH
13144: LD_INT 14
13146: EQUAL
13147: IFFALSE 13157
// sFlag := true ;
13149: LD_ADDR_EXP 67
13153: PUSH
13154: LD_INT 1
13156: ST_TO_ADDR
// if p3 = 15 then
13157: LD_VAR 0 3
13161: PUSH
13162: LD_INT 15
13164: EQUAL
13165: IFFALSE 13175
// sKamikadze := true ;
13167: LD_ADDR_EXP 75
13171: PUSH
13172: LD_INT 1
13174: ST_TO_ADDR
// if p3 = 16 then
13175: LD_VAR 0 3
13179: PUSH
13180: LD_INT 16
13182: EQUAL
13183: IFFALSE 13193
// sTroll := true ;
13185: LD_ADDR_EXP 76
13189: PUSH
13190: LD_INT 1
13192: ST_TO_ADDR
// if p3 = 17 then
13193: LD_VAR 0 3
13197: PUSH
13198: LD_INT 17
13200: EQUAL
13201: IFFALSE 13211
// sSlow := true ;
13203: LD_ADDR_EXP 77
13207: PUSH
13208: LD_INT 1
13210: ST_TO_ADDR
// if p3 = 18 then
13211: LD_VAR 0 3
13215: PUSH
13216: LD_INT 18
13218: EQUAL
13219: IFFALSE 13229
// sLack := true ;
13221: LD_ADDR_EXP 78
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
// if p3 = 19 then
13229: LD_VAR 0 3
13233: PUSH
13234: LD_INT 19
13236: EQUAL
13237: IFFALSE 13247
// sTank := true ;
13239: LD_ADDR_EXP 80
13243: PUSH
13244: LD_INT 1
13246: ST_TO_ADDR
// if p3 = 20 then
13247: LD_VAR 0 3
13251: PUSH
13252: LD_INT 20
13254: EQUAL
13255: IFFALSE 13265
// sRemote := true ;
13257: LD_ADDR_EXP 81
13261: PUSH
13262: LD_INT 1
13264: ST_TO_ADDR
// if p3 = 21 then
13265: LD_VAR 0 3
13269: PUSH
13270: LD_INT 21
13272: EQUAL
13273: IFFALSE 13283
// sPowell := true ;
13275: LD_ADDR_EXP 82
13279: PUSH
13280: LD_INT 1
13282: ST_TO_ADDR
// if p3 = 22 then
13283: LD_VAR 0 3
13287: PUSH
13288: LD_INT 22
13290: EQUAL
13291: IFFALSE 13301
// sTeleport := true ;
13293: LD_ADDR_EXP 85
13297: PUSH
13298: LD_INT 1
13300: ST_TO_ADDR
// if p3 = 23 then
13301: LD_VAR 0 3
13305: PUSH
13306: LD_INT 23
13308: EQUAL
13309: IFFALSE 13319
// sOilTower := true ;
13311: LD_ADDR_EXP 87
13315: PUSH
13316: LD_INT 1
13318: ST_TO_ADDR
// if p3 = 24 then
13319: LD_VAR 0 3
13323: PUSH
13324: LD_INT 24
13326: EQUAL
13327: IFFALSE 13337
// sShovel := true ;
13329: LD_ADDR_EXP 88
13333: PUSH
13334: LD_INT 1
13336: ST_TO_ADDR
// if p3 = 25 then
13337: LD_VAR 0 3
13341: PUSH
13342: LD_INT 25
13344: EQUAL
13345: IFFALSE 13355
// sSheik := true ;
13347: LD_ADDR_EXP 89
13351: PUSH
13352: LD_INT 1
13354: ST_TO_ADDR
// if p3 = 26 then
13355: LD_VAR 0 3
13359: PUSH
13360: LD_INT 26
13362: EQUAL
13363: IFFALSE 13373
// sEarthquake := true ;
13365: LD_ADDR_EXP 91
13369: PUSH
13370: LD_INT 1
13372: ST_TO_ADDR
// if p3 = 27 then
13373: LD_VAR 0 3
13377: PUSH
13378: LD_INT 27
13380: EQUAL
13381: IFFALSE 13391
// sAI := true ;
13383: LD_ADDR_EXP 92
13387: PUSH
13388: LD_INT 1
13390: ST_TO_ADDR
// if p3 = 28 then
13391: LD_VAR 0 3
13395: PUSH
13396: LD_INT 28
13398: EQUAL
13399: IFFALSE 13409
// sCargo := true ;
13401: LD_ADDR_EXP 95
13405: PUSH
13406: LD_INT 1
13408: ST_TO_ADDR
// if p3 = 29 then
13409: LD_VAR 0 3
13413: PUSH
13414: LD_INT 29
13416: EQUAL
13417: IFFALSE 13427
// sDLaser := true ;
13419: LD_ADDR_EXP 96
13423: PUSH
13424: LD_INT 1
13426: ST_TO_ADDR
// if p3 = 30 then
13427: LD_VAR 0 3
13431: PUSH
13432: LD_INT 30
13434: EQUAL
13435: IFFALSE 13445
// sExchange := true ;
13437: LD_ADDR_EXP 97
13441: PUSH
13442: LD_INT 1
13444: ST_TO_ADDR
// if p3 = 31 then
13445: LD_VAR 0 3
13449: PUSH
13450: LD_INT 31
13452: EQUAL
13453: IFFALSE 13463
// sFac := true ;
13455: LD_ADDR_EXP 98
13459: PUSH
13460: LD_INT 1
13462: ST_TO_ADDR
// if p3 = 32 then
13463: LD_VAR 0 3
13467: PUSH
13468: LD_INT 32
13470: EQUAL
13471: IFFALSE 13481
// sPower := true ;
13473: LD_ADDR_EXP 99
13477: PUSH
13478: LD_INT 1
13480: ST_TO_ADDR
// if p3 = 33 then
13481: LD_VAR 0 3
13485: PUSH
13486: LD_INT 33
13488: EQUAL
13489: IFFALSE 13499
// sRandom := true ;
13491: LD_ADDR_EXP 100
13495: PUSH
13496: LD_INT 1
13498: ST_TO_ADDR
// if p3 = 34 then
13499: LD_VAR 0 3
13503: PUSH
13504: LD_INT 34
13506: EQUAL
13507: IFFALSE 13517
// sShield := true ;
13509: LD_ADDR_EXP 101
13513: PUSH
13514: LD_INT 1
13516: ST_TO_ADDR
// if p3 = 35 then
13517: LD_VAR 0 3
13521: PUSH
13522: LD_INT 35
13524: EQUAL
13525: IFFALSE 13535
// sTime := true ;
13527: LD_ADDR_EXP 102
13531: PUSH
13532: LD_INT 1
13534: ST_TO_ADDR
// if p3 = 36 then
13535: LD_VAR 0 3
13539: PUSH
13540: LD_INT 36
13542: EQUAL
13543: IFFALSE 13553
// sTools := true ;
13545: LD_ADDR_EXP 103
13549: PUSH
13550: LD_INT 1
13552: ST_TO_ADDR
// if p3 = 101 then
13553: LD_VAR 0 3
13557: PUSH
13558: LD_INT 101
13560: EQUAL
13561: IFFALSE 13571
// sSold := true ;
13563: LD_ADDR_EXP 68
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// if p3 = 102 then
13571: LD_VAR 0 3
13575: PUSH
13576: LD_INT 102
13578: EQUAL
13579: IFFALSE 13589
// sDiff := true ;
13581: LD_ADDR_EXP 69
13585: PUSH
13586: LD_INT 1
13588: ST_TO_ADDR
// if p3 = 103 then
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 103
13596: EQUAL
13597: IFFALSE 13607
// sFog := true ;
13599: LD_ADDR_EXP 72
13603: PUSH
13604: LD_INT 1
13606: ST_TO_ADDR
// if p3 = 104 then
13607: LD_VAR 0 3
13611: PUSH
13612: LD_INT 104
13614: EQUAL
13615: IFFALSE 13625
// sReset := true ;
13617: LD_ADDR_EXP 73
13621: PUSH
13622: LD_INT 1
13624: ST_TO_ADDR
// if p3 = 105 then
13625: LD_VAR 0 3
13629: PUSH
13630: LD_INT 105
13632: EQUAL
13633: IFFALSE 13643
// sSun := true ;
13635: LD_ADDR_EXP 74
13639: PUSH
13640: LD_INT 1
13642: ST_TO_ADDR
// if p3 = 106 then
13643: LD_VAR 0 3
13647: PUSH
13648: LD_INT 106
13650: EQUAL
13651: IFFALSE 13661
// sTiger := true ;
13653: LD_ADDR_EXP 70
13657: PUSH
13658: LD_INT 1
13660: ST_TO_ADDR
// if p3 = 107 then
13661: LD_VAR 0 3
13665: PUSH
13666: LD_INT 107
13668: EQUAL
13669: IFFALSE 13679
// sBomb := true ;
13671: LD_ADDR_EXP 71
13675: PUSH
13676: LD_INT 1
13678: ST_TO_ADDR
// if p3 = 108 then
13679: LD_VAR 0 3
13683: PUSH
13684: LD_INT 108
13686: EQUAL
13687: IFFALSE 13697
// sWound := true ;
13689: LD_ADDR_EXP 79
13693: PUSH
13694: LD_INT 1
13696: ST_TO_ADDR
// if p3 = 109 then
13697: LD_VAR 0 3
13701: PUSH
13702: LD_INT 109
13704: EQUAL
13705: IFFALSE 13715
// sBetray := true ;
13707: LD_ADDR_EXP 83
13711: PUSH
13712: LD_INT 1
13714: ST_TO_ADDR
// if p3 = 110 then
13715: LD_VAR 0 3
13719: PUSH
13720: LD_INT 110
13722: EQUAL
13723: IFFALSE 13733
// sContamin := true ;
13725: LD_ADDR_EXP 84
13729: PUSH
13730: LD_INT 1
13732: ST_TO_ADDR
// if p3 = 111 then
13733: LD_VAR 0 3
13737: PUSH
13738: LD_INT 111
13740: EQUAL
13741: IFFALSE 13751
// sOil := true ;
13743: LD_ADDR_EXP 86
13747: PUSH
13748: LD_INT 1
13750: ST_TO_ADDR
// if p3 = 112 then
13751: LD_VAR 0 3
13755: PUSH
13756: LD_INT 112
13758: EQUAL
13759: IFFALSE 13769
// sStu := true ;
13761: LD_ADDR_EXP 90
13765: PUSH
13766: LD_INT 1
13768: ST_TO_ADDR
// if p3 = 113 then
13769: LD_VAR 0 3
13773: PUSH
13774: LD_INT 113
13776: EQUAL
13777: IFFALSE 13787
// sBazooka := true ;
13779: LD_ADDR_EXP 93
13783: PUSH
13784: LD_INT 1
13786: ST_TO_ADDR
// if p3 = 114 then
13787: LD_VAR 0 3
13791: PUSH
13792: LD_INT 114
13794: EQUAL
13795: IFFALSE 13805
// sMortar := true ;
13797: LD_ADDR_EXP 94
13801: PUSH
13802: LD_INT 1
13804: ST_TO_ADDR
// if p3 = 115 then
13805: LD_VAR 0 3
13809: PUSH
13810: LD_INT 115
13812: EQUAL
13813: IFFALSE 13823
// sRanger := true ;
13815: LD_ADDR_EXP 104
13819: PUSH
13820: LD_INT 1
13822: ST_TO_ADDR
// end ; if p2 = 101 then
13823: LD_VAR 0 2
13827: PUSH
13828: LD_INT 101
13830: EQUAL
13831: IFFALSE 13959
// begin case p3 of 1 :
13833: LD_VAR 0 3
13837: PUSH
13838: LD_INT 1
13840: DOUBLE
13841: EQUAL
13842: IFTRUE 13846
13844: GO 13853
13846: POP
// hHackUnlimitedResources ; 2 :
13847: CALL 24996 0 0
13851: GO 13959
13853: LD_INT 2
13855: DOUBLE
13856: EQUAL
13857: IFTRUE 13861
13859: GO 13868
13861: POP
// hHackSetLevel10 ; 3 :
13862: CALL 25129 0 0
13866: GO 13959
13868: LD_INT 3
13870: DOUBLE
13871: EQUAL
13872: IFTRUE 13876
13874: GO 13883
13876: POP
// hHackSetLevel10YourUnits ; 4 :
13877: CALL 25214 0 0
13881: GO 13959
13883: LD_INT 4
13885: DOUBLE
13886: EQUAL
13887: IFTRUE 13891
13889: GO 13898
13891: POP
// hHackInvincible ; 5 :
13892: CALL 25662 0 0
13896: GO 13959
13898: LD_INT 5
13900: DOUBLE
13901: EQUAL
13902: IFTRUE 13906
13904: GO 13913
13906: POP
// hHackInvisible ; 6 :
13907: CALL 25773 0 0
13911: GO 13959
13913: LD_INT 6
13915: DOUBLE
13916: EQUAL
13917: IFTRUE 13921
13919: GO 13928
13921: POP
// hHackChangeYourSide ; 7 :
13922: CALL 25830 0 0
13926: GO 13959
13928: LD_INT 7
13930: DOUBLE
13931: EQUAL
13932: IFTRUE 13936
13934: GO 13943
13936: POP
// hHackChangeUnitSide ; 8 :
13937: CALL 25872 0 0
13941: GO 13959
13943: LD_INT 8
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 13958
13951: POP
// hHackFog ; end ;
13952: CALL 25973 0 0
13956: GO 13959
13958: POP
// end ; end ;
13959: LD_VAR 0 7
13963: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13964: GO 13966
13966: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13967: LD_STRING initStreamRollete();
13969: PPUSH
13970: CALL_OW 559
// InitStreamMode ;
13974: CALL 13983 0 0
// DefineStreamItems ( ) ;
13978: CALL 14423 0 0
// end ;
13982: END
// function InitStreamMode ; begin
13983: LD_INT 0
13985: PPUSH
// streamModeActive := false ;
13986: LD_ADDR_EXP 51
13990: PUSH
13991: LD_INT 0
13993: ST_TO_ADDR
// normalCounter := 36 ;
13994: LD_ADDR_EXP 52
13998: PUSH
13999: LD_INT 36
14001: ST_TO_ADDR
// hardcoreCounter := 16 ;
14002: LD_ADDR_EXP 53
14006: PUSH
14007: LD_INT 16
14009: ST_TO_ADDR
// sRocket := false ;
14010: LD_ADDR_EXP 56
14014: PUSH
14015: LD_INT 0
14017: ST_TO_ADDR
// sSpeed := false ;
14018: LD_ADDR_EXP 55
14022: PUSH
14023: LD_INT 0
14025: ST_TO_ADDR
// sEngine := false ;
14026: LD_ADDR_EXP 57
14030: PUSH
14031: LD_INT 0
14033: ST_TO_ADDR
// sSpec := false ;
14034: LD_ADDR_EXP 54
14038: PUSH
14039: LD_INT 0
14041: ST_TO_ADDR
// sLevel := false ;
14042: LD_ADDR_EXP 58
14046: PUSH
14047: LD_INT 0
14049: ST_TO_ADDR
// sArmoury := false ;
14050: LD_ADDR_EXP 59
14054: PUSH
14055: LD_INT 0
14057: ST_TO_ADDR
// sRadar := false ;
14058: LD_ADDR_EXP 60
14062: PUSH
14063: LD_INT 0
14065: ST_TO_ADDR
// sBunker := false ;
14066: LD_ADDR_EXP 61
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// sHack := false ;
14074: LD_ADDR_EXP 62
14078: PUSH
14079: LD_INT 0
14081: ST_TO_ADDR
// sFire := false ;
14082: LD_ADDR_EXP 63
14086: PUSH
14087: LD_INT 0
14089: ST_TO_ADDR
// sRefresh := false ;
14090: LD_ADDR_EXP 64
14094: PUSH
14095: LD_INT 0
14097: ST_TO_ADDR
// sExp := false ;
14098: LD_ADDR_EXP 65
14102: PUSH
14103: LD_INT 0
14105: ST_TO_ADDR
// sDepot := false ;
14106: LD_ADDR_EXP 66
14110: PUSH
14111: LD_INT 0
14113: ST_TO_ADDR
// sFlag := false ;
14114: LD_ADDR_EXP 67
14118: PUSH
14119: LD_INT 0
14121: ST_TO_ADDR
// sKamikadze := false ;
14122: LD_ADDR_EXP 75
14126: PUSH
14127: LD_INT 0
14129: ST_TO_ADDR
// sTroll := false ;
14130: LD_ADDR_EXP 76
14134: PUSH
14135: LD_INT 0
14137: ST_TO_ADDR
// sSlow := false ;
14138: LD_ADDR_EXP 77
14142: PUSH
14143: LD_INT 0
14145: ST_TO_ADDR
// sLack := false ;
14146: LD_ADDR_EXP 78
14150: PUSH
14151: LD_INT 0
14153: ST_TO_ADDR
// sTank := false ;
14154: LD_ADDR_EXP 80
14158: PUSH
14159: LD_INT 0
14161: ST_TO_ADDR
// sRemote := false ;
14162: LD_ADDR_EXP 81
14166: PUSH
14167: LD_INT 0
14169: ST_TO_ADDR
// sPowell := false ;
14170: LD_ADDR_EXP 82
14174: PUSH
14175: LD_INT 0
14177: ST_TO_ADDR
// sTeleport := false ;
14178: LD_ADDR_EXP 85
14182: PUSH
14183: LD_INT 0
14185: ST_TO_ADDR
// sOilTower := false ;
14186: LD_ADDR_EXP 87
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// sShovel := false ;
14194: LD_ADDR_EXP 88
14198: PUSH
14199: LD_INT 0
14201: ST_TO_ADDR
// sSheik := false ;
14202: LD_ADDR_EXP 89
14206: PUSH
14207: LD_INT 0
14209: ST_TO_ADDR
// sEarthquake := false ;
14210: LD_ADDR_EXP 91
14214: PUSH
14215: LD_INT 0
14217: ST_TO_ADDR
// sAI := false ;
14218: LD_ADDR_EXP 92
14222: PUSH
14223: LD_INT 0
14225: ST_TO_ADDR
// sCargo := false ;
14226: LD_ADDR_EXP 95
14230: PUSH
14231: LD_INT 0
14233: ST_TO_ADDR
// sDLaser := false ;
14234: LD_ADDR_EXP 96
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// sExchange := false ;
14242: LD_ADDR_EXP 97
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// sFac := false ;
14250: LD_ADDR_EXP 98
14254: PUSH
14255: LD_INT 0
14257: ST_TO_ADDR
// sPower := false ;
14258: LD_ADDR_EXP 99
14262: PUSH
14263: LD_INT 0
14265: ST_TO_ADDR
// sRandom := false ;
14266: LD_ADDR_EXP 100
14270: PUSH
14271: LD_INT 0
14273: ST_TO_ADDR
// sShield := false ;
14274: LD_ADDR_EXP 101
14278: PUSH
14279: LD_INT 0
14281: ST_TO_ADDR
// sTime := false ;
14282: LD_ADDR_EXP 102
14286: PUSH
14287: LD_INT 0
14289: ST_TO_ADDR
// sTools := false ;
14290: LD_ADDR_EXP 103
14294: PUSH
14295: LD_INT 0
14297: ST_TO_ADDR
// sSold := false ;
14298: LD_ADDR_EXP 68
14302: PUSH
14303: LD_INT 0
14305: ST_TO_ADDR
// sDiff := false ;
14306: LD_ADDR_EXP 69
14310: PUSH
14311: LD_INT 0
14313: ST_TO_ADDR
// sFog := false ;
14314: LD_ADDR_EXP 72
14318: PUSH
14319: LD_INT 0
14321: ST_TO_ADDR
// sReset := false ;
14322: LD_ADDR_EXP 73
14326: PUSH
14327: LD_INT 0
14329: ST_TO_ADDR
// sSun := false ;
14330: LD_ADDR_EXP 74
14334: PUSH
14335: LD_INT 0
14337: ST_TO_ADDR
// sTiger := false ;
14338: LD_ADDR_EXP 70
14342: PUSH
14343: LD_INT 0
14345: ST_TO_ADDR
// sBomb := false ;
14346: LD_ADDR_EXP 71
14350: PUSH
14351: LD_INT 0
14353: ST_TO_ADDR
// sWound := false ;
14354: LD_ADDR_EXP 79
14358: PUSH
14359: LD_INT 0
14361: ST_TO_ADDR
// sBetray := false ;
14362: LD_ADDR_EXP 83
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// sContamin := false ;
14370: LD_ADDR_EXP 84
14374: PUSH
14375: LD_INT 0
14377: ST_TO_ADDR
// sOil := false ;
14378: LD_ADDR_EXP 86
14382: PUSH
14383: LD_INT 0
14385: ST_TO_ADDR
// sStu := false ;
14386: LD_ADDR_EXP 90
14390: PUSH
14391: LD_INT 0
14393: ST_TO_ADDR
// sBazooka := false ;
14394: LD_ADDR_EXP 93
14398: PUSH
14399: LD_INT 0
14401: ST_TO_ADDR
// sMortar := false ;
14402: LD_ADDR_EXP 94
14406: PUSH
14407: LD_INT 0
14409: ST_TO_ADDR
// sRanger := false ;
14410: LD_ADDR_EXP 104
14414: PUSH
14415: LD_INT 0
14417: ST_TO_ADDR
// end ;
14418: LD_VAR 0 1
14422: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14423: LD_INT 0
14425: PPUSH
14426: PPUSH
14427: PPUSH
14428: PPUSH
14429: PPUSH
// result := [ ] ;
14430: LD_ADDR_VAR 0 1
14434: PUSH
14435: EMPTY
14436: ST_TO_ADDR
// if campaign_id = 1 then
14437: LD_OWVAR 69
14441: PUSH
14442: LD_INT 1
14444: EQUAL
14445: IFFALSE 17383
// begin case mission_number of 1 :
14447: LD_OWVAR 70
14451: PUSH
14452: LD_INT 1
14454: DOUBLE
14455: EQUAL
14456: IFTRUE 14460
14458: GO 14524
14460: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14461: LD_ADDR_VAR 0 1
14465: PUSH
14466: LD_INT 2
14468: PUSH
14469: LD_INT 4
14471: PUSH
14472: LD_INT 11
14474: PUSH
14475: LD_INT 12
14477: PUSH
14478: LD_INT 15
14480: PUSH
14481: LD_INT 16
14483: PUSH
14484: LD_INT 22
14486: PUSH
14487: LD_INT 23
14489: PUSH
14490: LD_INT 26
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 101
14506: PUSH
14507: LD_INT 102
14509: PUSH
14510: LD_INT 106
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: ST_TO_ADDR
14522: GO 17381
14524: LD_INT 2
14526: DOUBLE
14527: EQUAL
14528: IFTRUE 14532
14530: GO 14604
14532: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14533: LD_ADDR_VAR 0 1
14537: PUSH
14538: LD_INT 2
14540: PUSH
14541: LD_INT 4
14543: PUSH
14544: LD_INT 11
14546: PUSH
14547: LD_INT 12
14549: PUSH
14550: LD_INT 15
14552: PUSH
14553: LD_INT 16
14555: PUSH
14556: LD_INT 22
14558: PUSH
14559: LD_INT 23
14561: PUSH
14562: LD_INT 26
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 101
14578: PUSH
14579: LD_INT 102
14581: PUSH
14582: LD_INT 105
14584: PUSH
14585: LD_INT 106
14587: PUSH
14588: LD_INT 108
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: ST_TO_ADDR
14602: GO 17381
14604: LD_INT 3
14606: DOUBLE
14607: EQUAL
14608: IFTRUE 14612
14610: GO 14688
14612: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14613: LD_ADDR_VAR 0 1
14617: PUSH
14618: LD_INT 2
14620: PUSH
14621: LD_INT 4
14623: PUSH
14624: LD_INT 5
14626: PUSH
14627: LD_INT 11
14629: PUSH
14630: LD_INT 12
14632: PUSH
14633: LD_INT 15
14635: PUSH
14636: LD_INT 16
14638: PUSH
14639: LD_INT 22
14641: PUSH
14642: LD_INT 26
14644: PUSH
14645: LD_INT 36
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 101
14662: PUSH
14663: LD_INT 102
14665: PUSH
14666: LD_INT 105
14668: PUSH
14669: LD_INT 106
14671: PUSH
14672: LD_INT 108
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: ST_TO_ADDR
14686: GO 17381
14688: LD_INT 4
14690: DOUBLE
14691: EQUAL
14692: IFTRUE 14696
14694: GO 14780
14696: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14697: LD_ADDR_VAR 0 1
14701: PUSH
14702: LD_INT 2
14704: PUSH
14705: LD_INT 4
14707: PUSH
14708: LD_INT 5
14710: PUSH
14711: LD_INT 8
14713: PUSH
14714: LD_INT 11
14716: PUSH
14717: LD_INT 12
14719: PUSH
14720: LD_INT 15
14722: PUSH
14723: LD_INT 16
14725: PUSH
14726: LD_INT 22
14728: PUSH
14729: LD_INT 23
14731: PUSH
14732: LD_INT 26
14734: PUSH
14735: LD_INT 36
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 101
14754: PUSH
14755: LD_INT 102
14757: PUSH
14758: LD_INT 105
14760: PUSH
14761: LD_INT 106
14763: PUSH
14764: LD_INT 108
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: ST_TO_ADDR
14778: GO 17381
14780: LD_INT 5
14782: DOUBLE
14783: EQUAL
14784: IFTRUE 14788
14786: GO 14888
14788: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14789: LD_ADDR_VAR 0 1
14793: PUSH
14794: LD_INT 2
14796: PUSH
14797: LD_INT 4
14799: PUSH
14800: LD_INT 5
14802: PUSH
14803: LD_INT 6
14805: PUSH
14806: LD_INT 8
14808: PUSH
14809: LD_INT 11
14811: PUSH
14812: LD_INT 12
14814: PUSH
14815: LD_INT 15
14817: PUSH
14818: LD_INT 16
14820: PUSH
14821: LD_INT 22
14823: PUSH
14824: LD_INT 23
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 26
14832: PUSH
14833: LD_INT 36
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 101
14854: PUSH
14855: LD_INT 102
14857: PUSH
14858: LD_INT 105
14860: PUSH
14861: LD_INT 106
14863: PUSH
14864: LD_INT 108
14866: PUSH
14867: LD_INT 109
14869: PUSH
14870: LD_INT 112
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: LIST
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: ST_TO_ADDR
14886: GO 17381
14888: LD_INT 6
14890: DOUBLE
14891: EQUAL
14892: IFTRUE 14896
14894: GO 15016
14896: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14897: LD_ADDR_VAR 0 1
14901: PUSH
14902: LD_INT 2
14904: PUSH
14905: LD_INT 4
14907: PUSH
14908: LD_INT 5
14910: PUSH
14911: LD_INT 6
14913: PUSH
14914: LD_INT 8
14916: PUSH
14917: LD_INT 11
14919: PUSH
14920: LD_INT 12
14922: PUSH
14923: LD_INT 15
14925: PUSH
14926: LD_INT 16
14928: PUSH
14929: LD_INT 20
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: LD_INT 22
14937: PUSH
14938: LD_INT 23
14940: PUSH
14941: LD_INT 25
14943: PUSH
14944: LD_INT 26
14946: PUSH
14947: LD_INT 30
14949: PUSH
14950: LD_INT 31
14952: PUSH
14953: LD_INT 32
14955: PUSH
14956: LD_INT 36
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: PUSH
14980: LD_INT 101
14982: PUSH
14983: LD_INT 102
14985: PUSH
14986: LD_INT 105
14988: PUSH
14989: LD_INT 106
14991: PUSH
14992: LD_INT 108
14994: PUSH
14995: LD_INT 109
14997: PUSH
14998: LD_INT 112
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: ST_TO_ADDR
15014: GO 17381
15016: LD_INT 7
15018: DOUBLE
15019: EQUAL
15020: IFTRUE 15024
15022: GO 15124
15024: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
15025: LD_ADDR_VAR 0 1
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 4
15035: PUSH
15036: LD_INT 5
15038: PUSH
15039: LD_INT 7
15041: PUSH
15042: LD_INT 11
15044: PUSH
15045: LD_INT 12
15047: PUSH
15048: LD_INT 15
15050: PUSH
15051: LD_INT 16
15053: PUSH
15054: LD_INT 20
15056: PUSH
15057: LD_INT 21
15059: PUSH
15060: LD_INT 22
15062: PUSH
15063: LD_INT 23
15065: PUSH
15066: LD_INT 25
15068: PUSH
15069: LD_INT 26
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 101
15090: PUSH
15091: LD_INT 102
15093: PUSH
15094: LD_INT 103
15096: PUSH
15097: LD_INT 105
15099: PUSH
15100: LD_INT 106
15102: PUSH
15103: LD_INT 108
15105: PUSH
15106: LD_INT 112
15108: PUSH
15109: EMPTY
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: ST_TO_ADDR
15122: GO 17381
15124: LD_INT 8
15126: DOUBLE
15127: EQUAL
15128: IFTRUE 15132
15130: GO 15260
15132: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15133: LD_ADDR_VAR 0 1
15137: PUSH
15138: LD_INT 2
15140: PUSH
15141: LD_INT 4
15143: PUSH
15144: LD_INT 5
15146: PUSH
15147: LD_INT 6
15149: PUSH
15150: LD_INT 7
15152: PUSH
15153: LD_INT 8
15155: PUSH
15156: LD_INT 11
15158: PUSH
15159: LD_INT 12
15161: PUSH
15162: LD_INT 15
15164: PUSH
15165: LD_INT 16
15167: PUSH
15168: LD_INT 20
15170: PUSH
15171: LD_INT 21
15173: PUSH
15174: LD_INT 22
15176: PUSH
15177: LD_INT 23
15179: PUSH
15180: LD_INT 25
15182: PUSH
15183: LD_INT 26
15185: PUSH
15186: LD_INT 30
15188: PUSH
15189: LD_INT 31
15191: PUSH
15192: LD_INT 32
15194: PUSH
15195: LD_INT 36
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 101
15222: PUSH
15223: LD_INT 102
15225: PUSH
15226: LD_INT 103
15228: PUSH
15229: LD_INT 105
15231: PUSH
15232: LD_INT 106
15234: PUSH
15235: LD_INT 108
15237: PUSH
15238: LD_INT 109
15240: PUSH
15241: LD_INT 112
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: ST_TO_ADDR
15258: GO 17381
15260: LD_INT 9
15262: DOUBLE
15263: EQUAL
15264: IFTRUE 15268
15266: GO 15404
15268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15269: LD_ADDR_VAR 0 1
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 4
15279: PUSH
15280: LD_INT 5
15282: PUSH
15283: LD_INT 6
15285: PUSH
15286: LD_INT 7
15288: PUSH
15289: LD_INT 8
15291: PUSH
15292: LD_INT 11
15294: PUSH
15295: LD_INT 12
15297: PUSH
15298: LD_INT 15
15300: PUSH
15301: LD_INT 16
15303: PUSH
15304: LD_INT 20
15306: PUSH
15307: LD_INT 21
15309: PUSH
15310: LD_INT 22
15312: PUSH
15313: LD_INT 23
15315: PUSH
15316: LD_INT 25
15318: PUSH
15319: LD_INT 26
15321: PUSH
15322: LD_INT 28
15324: PUSH
15325: LD_INT 30
15327: PUSH
15328: LD_INT 31
15330: PUSH
15331: LD_INT 32
15333: PUSH
15334: LD_INT 36
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 101
15362: PUSH
15363: LD_INT 102
15365: PUSH
15366: LD_INT 103
15368: PUSH
15369: LD_INT 105
15371: PUSH
15372: LD_INT 106
15374: PUSH
15375: LD_INT 108
15377: PUSH
15378: LD_INT 109
15380: PUSH
15381: LD_INT 112
15383: PUSH
15384: LD_INT 114
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: ST_TO_ADDR
15402: GO 17381
15404: LD_INT 10
15406: DOUBLE
15407: EQUAL
15408: IFTRUE 15412
15410: GO 15596
15412: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15413: LD_ADDR_VAR 0 1
15417: PUSH
15418: LD_INT 2
15420: PUSH
15421: LD_INT 4
15423: PUSH
15424: LD_INT 5
15426: PUSH
15427: LD_INT 6
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 8
15435: PUSH
15436: LD_INT 9
15438: PUSH
15439: LD_INT 10
15441: PUSH
15442: LD_INT 11
15444: PUSH
15445: LD_INT 12
15447: PUSH
15448: LD_INT 13
15450: PUSH
15451: LD_INT 14
15453: PUSH
15454: LD_INT 15
15456: PUSH
15457: LD_INT 16
15459: PUSH
15460: LD_INT 17
15462: PUSH
15463: LD_INT 18
15465: PUSH
15466: LD_INT 19
15468: PUSH
15469: LD_INT 20
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 24
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: LD_INT 28
15492: PUSH
15493: LD_INT 30
15495: PUSH
15496: LD_INT 31
15498: PUSH
15499: LD_INT 32
15501: PUSH
15502: LD_INT 36
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 101
15538: PUSH
15539: LD_INT 102
15541: PUSH
15542: LD_INT 103
15544: PUSH
15545: LD_INT 104
15547: PUSH
15548: LD_INT 105
15550: PUSH
15551: LD_INT 106
15553: PUSH
15554: LD_INT 107
15556: PUSH
15557: LD_INT 108
15559: PUSH
15560: LD_INT 109
15562: PUSH
15563: LD_INT 110
15565: PUSH
15566: LD_INT 111
15568: PUSH
15569: LD_INT 112
15571: PUSH
15572: LD_INT 114
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: PUSH
15590: EMPTY
15591: LIST
15592: LIST
15593: ST_TO_ADDR
15594: GO 17381
15596: LD_INT 11
15598: DOUBLE
15599: EQUAL
15600: IFTRUE 15604
15602: GO 15796
15604: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15605: LD_ADDR_VAR 0 1
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 3
15615: PUSH
15616: LD_INT 4
15618: PUSH
15619: LD_INT 5
15621: PUSH
15622: LD_INT 6
15624: PUSH
15625: LD_INT 7
15627: PUSH
15628: LD_INT 8
15630: PUSH
15631: LD_INT 9
15633: PUSH
15634: LD_INT 10
15636: PUSH
15637: LD_INT 11
15639: PUSH
15640: LD_INT 12
15642: PUSH
15643: LD_INT 13
15645: PUSH
15646: LD_INT 14
15648: PUSH
15649: LD_INT 15
15651: PUSH
15652: LD_INT 16
15654: PUSH
15655: LD_INT 17
15657: PUSH
15658: LD_INT 18
15660: PUSH
15661: LD_INT 19
15663: PUSH
15664: LD_INT 20
15666: PUSH
15667: LD_INT 21
15669: PUSH
15670: LD_INT 22
15672: PUSH
15673: LD_INT 23
15675: PUSH
15676: LD_INT 24
15678: PUSH
15679: LD_INT 25
15681: PUSH
15682: LD_INT 26
15684: PUSH
15685: LD_INT 28
15687: PUSH
15688: LD_INT 30
15690: PUSH
15691: LD_INT 31
15693: PUSH
15694: LD_INT 32
15696: PUSH
15697: LD_INT 34
15699: PUSH
15700: LD_INT 36
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: LIST
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 101
15738: PUSH
15739: LD_INT 102
15741: PUSH
15742: LD_INT 103
15744: PUSH
15745: LD_INT 104
15747: PUSH
15748: LD_INT 105
15750: PUSH
15751: LD_INT 106
15753: PUSH
15754: LD_INT 107
15756: PUSH
15757: LD_INT 108
15759: PUSH
15760: LD_INT 109
15762: PUSH
15763: LD_INT 110
15765: PUSH
15766: LD_INT 111
15768: PUSH
15769: LD_INT 112
15771: PUSH
15772: LD_INT 114
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: ST_TO_ADDR
15794: GO 17381
15796: LD_INT 12
15798: DOUBLE
15799: EQUAL
15800: IFTRUE 15804
15802: GO 16012
15804: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15805: LD_ADDR_VAR 0 1
15809: PUSH
15810: LD_INT 1
15812: PUSH
15813: LD_INT 2
15815: PUSH
15816: LD_INT 3
15818: PUSH
15819: LD_INT 4
15821: PUSH
15822: LD_INT 5
15824: PUSH
15825: LD_INT 6
15827: PUSH
15828: LD_INT 7
15830: PUSH
15831: LD_INT 8
15833: PUSH
15834: LD_INT 9
15836: PUSH
15837: LD_INT 10
15839: PUSH
15840: LD_INT 11
15842: PUSH
15843: LD_INT 12
15845: PUSH
15846: LD_INT 13
15848: PUSH
15849: LD_INT 14
15851: PUSH
15852: LD_INT 15
15854: PUSH
15855: LD_INT 16
15857: PUSH
15858: LD_INT 17
15860: PUSH
15861: LD_INT 18
15863: PUSH
15864: LD_INT 19
15866: PUSH
15867: LD_INT 20
15869: PUSH
15870: LD_INT 21
15872: PUSH
15873: LD_INT 22
15875: PUSH
15876: LD_INT 23
15878: PUSH
15879: LD_INT 24
15881: PUSH
15882: LD_INT 25
15884: PUSH
15885: LD_INT 26
15887: PUSH
15888: LD_INT 27
15890: PUSH
15891: LD_INT 28
15893: PUSH
15894: LD_INT 30
15896: PUSH
15897: LD_INT 31
15899: PUSH
15900: LD_INT 32
15902: PUSH
15903: LD_INT 33
15905: PUSH
15906: LD_INT 34
15908: PUSH
15909: LD_INT 36
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: PUSH
15948: LD_INT 101
15950: PUSH
15951: LD_INT 102
15953: PUSH
15954: LD_INT 103
15956: PUSH
15957: LD_INT 104
15959: PUSH
15960: LD_INT 105
15962: PUSH
15963: LD_INT 106
15965: PUSH
15966: LD_INT 107
15968: PUSH
15969: LD_INT 108
15971: PUSH
15972: LD_INT 109
15974: PUSH
15975: LD_INT 110
15977: PUSH
15978: LD_INT 111
15980: PUSH
15981: LD_INT 112
15983: PUSH
15984: LD_INT 113
15986: PUSH
15987: LD_INT 114
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: ST_TO_ADDR
16010: GO 17381
16012: LD_INT 13
16014: DOUBLE
16015: EQUAL
16016: IFTRUE 16020
16018: GO 16216
16020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
16021: LD_ADDR_VAR 0 1
16025: PUSH
16026: LD_INT 1
16028: PUSH
16029: LD_INT 2
16031: PUSH
16032: LD_INT 3
16034: PUSH
16035: LD_INT 4
16037: PUSH
16038: LD_INT 5
16040: PUSH
16041: LD_INT 8
16043: PUSH
16044: LD_INT 9
16046: PUSH
16047: LD_INT 10
16049: PUSH
16050: LD_INT 11
16052: PUSH
16053: LD_INT 12
16055: PUSH
16056: LD_INT 14
16058: PUSH
16059: LD_INT 15
16061: PUSH
16062: LD_INT 16
16064: PUSH
16065: LD_INT 17
16067: PUSH
16068: LD_INT 18
16070: PUSH
16071: LD_INT 19
16073: PUSH
16074: LD_INT 20
16076: PUSH
16077: LD_INT 21
16079: PUSH
16080: LD_INT 22
16082: PUSH
16083: LD_INT 23
16085: PUSH
16086: LD_INT 24
16088: PUSH
16089: LD_INT 25
16091: PUSH
16092: LD_INT 26
16094: PUSH
16095: LD_INT 27
16097: PUSH
16098: LD_INT 28
16100: PUSH
16101: LD_INT 30
16103: PUSH
16104: LD_INT 31
16106: PUSH
16107: LD_INT 32
16109: PUSH
16110: LD_INT 33
16112: PUSH
16113: LD_INT 34
16115: PUSH
16116: LD_INT 36
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 101
16154: PUSH
16155: LD_INT 102
16157: PUSH
16158: LD_INT 103
16160: PUSH
16161: LD_INT 104
16163: PUSH
16164: LD_INT 105
16166: PUSH
16167: LD_INT 106
16169: PUSH
16170: LD_INT 107
16172: PUSH
16173: LD_INT 108
16175: PUSH
16176: LD_INT 109
16178: PUSH
16179: LD_INT 110
16181: PUSH
16182: LD_INT 111
16184: PUSH
16185: LD_INT 112
16187: PUSH
16188: LD_INT 113
16190: PUSH
16191: LD_INT 114
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: ST_TO_ADDR
16214: GO 17381
16216: LD_INT 14
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16436
16224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16225: LD_ADDR_VAR 0 1
16229: PUSH
16230: LD_INT 1
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: LD_INT 3
16238: PUSH
16239: LD_INT 4
16241: PUSH
16242: LD_INT 5
16244: PUSH
16245: LD_INT 6
16247: PUSH
16248: LD_INT 7
16250: PUSH
16251: LD_INT 8
16253: PUSH
16254: LD_INT 9
16256: PUSH
16257: LD_INT 10
16259: PUSH
16260: LD_INT 11
16262: PUSH
16263: LD_INT 12
16265: PUSH
16266: LD_INT 13
16268: PUSH
16269: LD_INT 14
16271: PUSH
16272: LD_INT 15
16274: PUSH
16275: LD_INT 16
16277: PUSH
16278: LD_INT 17
16280: PUSH
16281: LD_INT 18
16283: PUSH
16284: LD_INT 19
16286: PUSH
16287: LD_INT 20
16289: PUSH
16290: LD_INT 21
16292: PUSH
16293: LD_INT 22
16295: PUSH
16296: LD_INT 23
16298: PUSH
16299: LD_INT 24
16301: PUSH
16302: LD_INT 25
16304: PUSH
16305: LD_INT 26
16307: PUSH
16308: LD_INT 27
16310: PUSH
16311: LD_INT 28
16313: PUSH
16314: LD_INT 29
16316: PUSH
16317: LD_INT 30
16319: PUSH
16320: LD_INT 31
16322: PUSH
16323: LD_INT 32
16325: PUSH
16326: LD_INT 33
16328: PUSH
16329: LD_INT 34
16331: PUSH
16332: LD_INT 36
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 101
16374: PUSH
16375: LD_INT 102
16377: PUSH
16378: LD_INT 103
16380: PUSH
16381: LD_INT 104
16383: PUSH
16384: LD_INT 105
16386: PUSH
16387: LD_INT 106
16389: PUSH
16390: LD_INT 107
16392: PUSH
16393: LD_INT 108
16395: PUSH
16396: LD_INT 109
16398: PUSH
16399: LD_INT 110
16401: PUSH
16402: LD_INT 111
16404: PUSH
16405: LD_INT 112
16407: PUSH
16408: LD_INT 113
16410: PUSH
16411: LD_INT 114
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: ST_TO_ADDR
16434: GO 17381
16436: LD_INT 15
16438: DOUBLE
16439: EQUAL
16440: IFTRUE 16444
16442: GO 16656
16444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16445: LD_ADDR_VAR 0 1
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: LD_INT 3
16458: PUSH
16459: LD_INT 4
16461: PUSH
16462: LD_INT 5
16464: PUSH
16465: LD_INT 6
16467: PUSH
16468: LD_INT 7
16470: PUSH
16471: LD_INT 8
16473: PUSH
16474: LD_INT 9
16476: PUSH
16477: LD_INT 10
16479: PUSH
16480: LD_INT 11
16482: PUSH
16483: LD_INT 12
16485: PUSH
16486: LD_INT 13
16488: PUSH
16489: LD_INT 14
16491: PUSH
16492: LD_INT 15
16494: PUSH
16495: LD_INT 16
16497: PUSH
16498: LD_INT 17
16500: PUSH
16501: LD_INT 18
16503: PUSH
16504: LD_INT 19
16506: PUSH
16507: LD_INT 20
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 22
16515: PUSH
16516: LD_INT 23
16518: PUSH
16519: LD_INT 24
16521: PUSH
16522: LD_INT 25
16524: PUSH
16525: LD_INT 26
16527: PUSH
16528: LD_INT 27
16530: PUSH
16531: LD_INT 28
16533: PUSH
16534: LD_INT 29
16536: PUSH
16537: LD_INT 30
16539: PUSH
16540: LD_INT 31
16542: PUSH
16543: LD_INT 32
16545: PUSH
16546: LD_INT 33
16548: PUSH
16549: LD_INT 34
16551: PUSH
16552: LD_INT 36
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 101
16594: PUSH
16595: LD_INT 102
16597: PUSH
16598: LD_INT 103
16600: PUSH
16601: LD_INT 104
16603: PUSH
16604: LD_INT 105
16606: PUSH
16607: LD_INT 106
16609: PUSH
16610: LD_INT 107
16612: PUSH
16613: LD_INT 108
16615: PUSH
16616: LD_INT 109
16618: PUSH
16619: LD_INT 110
16621: PUSH
16622: LD_INT 111
16624: PUSH
16625: LD_INT 112
16627: PUSH
16628: LD_INT 113
16630: PUSH
16631: LD_INT 114
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: ST_TO_ADDR
16654: GO 17381
16656: LD_INT 16
16658: DOUBLE
16659: EQUAL
16660: IFTRUE 16664
16662: GO 16788
16664: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16665: LD_ADDR_VAR 0 1
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: LD_INT 7
16681: PUSH
16682: LD_INT 11
16684: PUSH
16685: LD_INT 12
16687: PUSH
16688: LD_INT 15
16690: PUSH
16691: LD_INT 16
16693: PUSH
16694: LD_INT 20
16696: PUSH
16697: LD_INT 21
16699: PUSH
16700: LD_INT 22
16702: PUSH
16703: LD_INT 23
16705: PUSH
16706: LD_INT 25
16708: PUSH
16709: LD_INT 26
16711: PUSH
16712: LD_INT 30
16714: PUSH
16715: LD_INT 31
16717: PUSH
16718: LD_INT 32
16720: PUSH
16721: LD_INT 33
16723: PUSH
16724: LD_INT 34
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: PUSH
16748: LD_INT 101
16750: PUSH
16751: LD_INT 102
16753: PUSH
16754: LD_INT 103
16756: PUSH
16757: LD_INT 106
16759: PUSH
16760: LD_INT 108
16762: PUSH
16763: LD_INT 112
16765: PUSH
16766: LD_INT 113
16768: PUSH
16769: LD_INT 114
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: PUSH
16782: EMPTY
16783: LIST
16784: LIST
16785: ST_TO_ADDR
16786: GO 17381
16788: LD_INT 17
16790: DOUBLE
16791: EQUAL
16792: IFTRUE 16796
16794: GO 17008
16796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16797: LD_ADDR_VAR 0 1
16801: PUSH
16802: LD_INT 1
16804: PUSH
16805: LD_INT 2
16807: PUSH
16808: LD_INT 3
16810: PUSH
16811: LD_INT 4
16813: PUSH
16814: LD_INT 5
16816: PUSH
16817: LD_INT 6
16819: PUSH
16820: LD_INT 7
16822: PUSH
16823: LD_INT 8
16825: PUSH
16826: LD_INT 9
16828: PUSH
16829: LD_INT 10
16831: PUSH
16832: LD_INT 11
16834: PUSH
16835: LD_INT 12
16837: PUSH
16838: LD_INT 13
16840: PUSH
16841: LD_INT 14
16843: PUSH
16844: LD_INT 15
16846: PUSH
16847: LD_INT 16
16849: PUSH
16850: LD_INT 17
16852: PUSH
16853: LD_INT 18
16855: PUSH
16856: LD_INT 19
16858: PUSH
16859: LD_INT 20
16861: PUSH
16862: LD_INT 21
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_INT 23
16870: PUSH
16871: LD_INT 24
16873: PUSH
16874: LD_INT 25
16876: PUSH
16877: LD_INT 26
16879: PUSH
16880: LD_INT 27
16882: PUSH
16883: LD_INT 28
16885: PUSH
16886: LD_INT 29
16888: PUSH
16889: LD_INT 30
16891: PUSH
16892: LD_INT 31
16894: PUSH
16895: LD_INT 32
16897: PUSH
16898: LD_INT 33
16900: PUSH
16901: LD_INT 34
16903: PUSH
16904: LD_INT 36
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 101
16946: PUSH
16947: LD_INT 102
16949: PUSH
16950: LD_INT 103
16952: PUSH
16953: LD_INT 104
16955: PUSH
16956: LD_INT 105
16958: PUSH
16959: LD_INT 106
16961: PUSH
16962: LD_INT 107
16964: PUSH
16965: LD_INT 108
16967: PUSH
16968: LD_INT 109
16970: PUSH
16971: LD_INT 110
16973: PUSH
16974: LD_INT 111
16976: PUSH
16977: LD_INT 112
16979: PUSH
16980: LD_INT 113
16982: PUSH
16983: LD_INT 114
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: ST_TO_ADDR
17006: GO 17381
17008: LD_INT 18
17010: DOUBLE
17011: EQUAL
17012: IFTRUE 17016
17014: GO 17152
17016: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
17017: LD_ADDR_VAR 0 1
17021: PUSH
17022: LD_INT 2
17024: PUSH
17025: LD_INT 4
17027: PUSH
17028: LD_INT 5
17030: PUSH
17031: LD_INT 7
17033: PUSH
17034: LD_INT 11
17036: PUSH
17037: LD_INT 12
17039: PUSH
17040: LD_INT 15
17042: PUSH
17043: LD_INT 16
17045: PUSH
17046: LD_INT 20
17048: PUSH
17049: LD_INT 21
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 23
17057: PUSH
17058: LD_INT 25
17060: PUSH
17061: LD_INT 26
17063: PUSH
17064: LD_INT 30
17066: PUSH
17067: LD_INT 31
17069: PUSH
17070: LD_INT 32
17072: PUSH
17073: LD_INT 33
17075: PUSH
17076: LD_INT 34
17078: PUSH
17079: LD_INT 35
17081: PUSH
17082: LD_INT 36
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 101
17110: PUSH
17111: LD_INT 102
17113: PUSH
17114: LD_INT 103
17116: PUSH
17117: LD_INT 106
17119: PUSH
17120: LD_INT 108
17122: PUSH
17123: LD_INT 112
17125: PUSH
17126: LD_INT 113
17128: PUSH
17129: LD_INT 114
17131: PUSH
17132: LD_INT 115
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: ST_TO_ADDR
17150: GO 17381
17152: LD_INT 19
17154: DOUBLE
17155: EQUAL
17156: IFTRUE 17160
17158: GO 17380
17160: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17161: LD_ADDR_VAR 0 1
17165: PUSH
17166: LD_INT 1
17168: PUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 3
17174: PUSH
17175: LD_INT 4
17177: PUSH
17178: LD_INT 5
17180: PUSH
17181: LD_INT 6
17183: PUSH
17184: LD_INT 7
17186: PUSH
17187: LD_INT 8
17189: PUSH
17190: LD_INT 9
17192: PUSH
17193: LD_INT 10
17195: PUSH
17196: LD_INT 11
17198: PUSH
17199: LD_INT 12
17201: PUSH
17202: LD_INT 13
17204: PUSH
17205: LD_INT 14
17207: PUSH
17208: LD_INT 15
17210: PUSH
17211: LD_INT 16
17213: PUSH
17214: LD_INT 17
17216: PUSH
17217: LD_INT 18
17219: PUSH
17220: LD_INT 19
17222: PUSH
17223: LD_INT 20
17225: PUSH
17226: LD_INT 21
17228: PUSH
17229: LD_INT 22
17231: PUSH
17232: LD_INT 23
17234: PUSH
17235: LD_INT 24
17237: PUSH
17238: LD_INT 25
17240: PUSH
17241: LD_INT 26
17243: PUSH
17244: LD_INT 27
17246: PUSH
17247: LD_INT 28
17249: PUSH
17250: LD_INT 29
17252: PUSH
17253: LD_INT 30
17255: PUSH
17256: LD_INT 31
17258: PUSH
17259: LD_INT 32
17261: PUSH
17262: LD_INT 33
17264: PUSH
17265: LD_INT 34
17267: PUSH
17268: LD_INT 35
17270: PUSH
17271: LD_INT 36
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 101
17314: PUSH
17315: LD_INT 102
17317: PUSH
17318: LD_INT 103
17320: PUSH
17321: LD_INT 104
17323: PUSH
17324: LD_INT 105
17326: PUSH
17327: LD_INT 106
17329: PUSH
17330: LD_INT 107
17332: PUSH
17333: LD_INT 108
17335: PUSH
17336: LD_INT 109
17338: PUSH
17339: LD_INT 110
17341: PUSH
17342: LD_INT 111
17344: PUSH
17345: LD_INT 112
17347: PUSH
17348: LD_INT 113
17350: PUSH
17351: LD_INT 114
17353: PUSH
17354: LD_INT 115
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: ST_TO_ADDR
17378: GO 17381
17380: POP
// end else
17381: GO 17600
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 3
17396: PUSH
17397: LD_INT 4
17399: PUSH
17400: LD_INT 5
17402: PUSH
17403: LD_INT 6
17405: PUSH
17406: LD_INT 7
17408: PUSH
17409: LD_INT 8
17411: PUSH
17412: LD_INT 9
17414: PUSH
17415: LD_INT 10
17417: PUSH
17418: LD_INT 11
17420: PUSH
17421: LD_INT 12
17423: PUSH
17424: LD_INT 13
17426: PUSH
17427: LD_INT 14
17429: PUSH
17430: LD_INT 15
17432: PUSH
17433: LD_INT 16
17435: PUSH
17436: LD_INT 17
17438: PUSH
17439: LD_INT 18
17441: PUSH
17442: LD_INT 19
17444: PUSH
17445: LD_INT 20
17447: PUSH
17448: LD_INT 21
17450: PUSH
17451: LD_INT 22
17453: PUSH
17454: LD_INT 23
17456: PUSH
17457: LD_INT 24
17459: PUSH
17460: LD_INT 25
17462: PUSH
17463: LD_INT 26
17465: PUSH
17466: LD_INT 27
17468: PUSH
17469: LD_INT 28
17471: PUSH
17472: LD_INT 29
17474: PUSH
17475: LD_INT 30
17477: PUSH
17478: LD_INT 31
17480: PUSH
17481: LD_INT 32
17483: PUSH
17484: LD_INT 33
17486: PUSH
17487: LD_INT 34
17489: PUSH
17490: LD_INT 35
17492: PUSH
17493: LD_INT 36
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 101
17536: PUSH
17537: LD_INT 102
17539: PUSH
17540: LD_INT 103
17542: PUSH
17543: LD_INT 104
17545: PUSH
17546: LD_INT 105
17548: PUSH
17549: LD_INT 106
17551: PUSH
17552: LD_INT 107
17554: PUSH
17555: LD_INT 108
17557: PUSH
17558: LD_INT 109
17560: PUSH
17561: LD_INT 110
17563: PUSH
17564: LD_INT 111
17566: PUSH
17567: LD_INT 112
17569: PUSH
17570: LD_INT 113
17572: PUSH
17573: LD_INT 114
17575: PUSH
17576: LD_INT 115
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: ST_TO_ADDR
// if result then
17600: LD_VAR 0 1
17604: IFFALSE 17893
// begin normal :=  ;
17606: LD_ADDR_VAR 0 3
17610: PUSH
17611: LD_STRING 
17613: ST_TO_ADDR
// hardcore :=  ;
17614: LD_ADDR_VAR 0 4
17618: PUSH
17619: LD_STRING 
17621: ST_TO_ADDR
// for i = 1 to normalCounter do
17622: LD_ADDR_VAR 0 5
17626: PUSH
17627: DOUBLE
17628: LD_INT 1
17630: DEC
17631: ST_TO_ADDR
17632: LD_EXP 52
17636: PUSH
17637: FOR_TO
17638: IFFALSE 17739
// begin tmp := 0 ;
17640: LD_ADDR_VAR 0 2
17644: PUSH
17645: LD_STRING 0
17647: ST_TO_ADDR
// if result [ 1 ] then
17648: LD_VAR 0 1
17652: PUSH
17653: LD_INT 1
17655: ARRAY
17656: IFFALSE 17721
// if result [ 1 ] [ 1 ] = i then
17658: LD_VAR 0 1
17662: PUSH
17663: LD_INT 1
17665: ARRAY
17666: PUSH
17667: LD_INT 1
17669: ARRAY
17670: PUSH
17671: LD_VAR 0 5
17675: EQUAL
17676: IFFALSE 17721
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17678: LD_ADDR_VAR 0 1
17682: PUSH
17683: LD_VAR 0 1
17687: PPUSH
17688: LD_INT 1
17690: PPUSH
17691: LD_VAR 0 1
17695: PUSH
17696: LD_INT 1
17698: ARRAY
17699: PPUSH
17700: LD_INT 1
17702: PPUSH
17703: CALL_OW 3
17707: PPUSH
17708: CALL_OW 1
17712: ST_TO_ADDR
// tmp := 1 ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_STRING 1
17720: ST_TO_ADDR
// end ; normal := normal & tmp ;
17721: LD_ADDR_VAR 0 3
17725: PUSH
17726: LD_VAR 0 3
17730: PUSH
17731: LD_VAR 0 2
17735: STR
17736: ST_TO_ADDR
// end ;
17737: GO 17637
17739: POP
17740: POP
// for i = 1 to hardcoreCounter do
17741: LD_ADDR_VAR 0 5
17745: PUSH
17746: DOUBLE
17747: LD_INT 1
17749: DEC
17750: ST_TO_ADDR
17751: LD_EXP 53
17755: PUSH
17756: FOR_TO
17757: IFFALSE 17862
// begin tmp := 0 ;
17759: LD_ADDR_VAR 0 2
17763: PUSH
17764: LD_STRING 0
17766: ST_TO_ADDR
// if result [ 2 ] then
17767: LD_VAR 0 1
17771: PUSH
17772: LD_INT 2
17774: ARRAY
17775: IFFALSE 17844
// if result [ 2 ] [ 1 ] = 100 + i then
17777: LD_VAR 0 1
17781: PUSH
17782: LD_INT 2
17784: ARRAY
17785: PUSH
17786: LD_INT 1
17788: ARRAY
17789: PUSH
17790: LD_INT 100
17792: PUSH
17793: LD_VAR 0 5
17797: PLUS
17798: EQUAL
17799: IFFALSE 17844
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17801: LD_ADDR_VAR 0 1
17805: PUSH
17806: LD_VAR 0 1
17810: PPUSH
17811: LD_INT 2
17813: PPUSH
17814: LD_VAR 0 1
17818: PUSH
17819: LD_INT 2
17821: ARRAY
17822: PPUSH
17823: LD_INT 1
17825: PPUSH
17826: CALL_OW 3
17830: PPUSH
17831: CALL_OW 1
17835: ST_TO_ADDR
// tmp := 1 ;
17836: LD_ADDR_VAR 0 2
17840: PUSH
17841: LD_STRING 1
17843: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17844: LD_ADDR_VAR 0 4
17848: PUSH
17849: LD_VAR 0 4
17853: PUSH
17854: LD_VAR 0 2
17858: STR
17859: ST_TO_ADDR
// end ;
17860: GO 17756
17862: POP
17863: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17864: LD_STRING getStreamItemsFromMission("
17866: PUSH
17867: LD_VAR 0 3
17871: STR
17872: PUSH
17873: LD_STRING ","
17875: STR
17876: PUSH
17877: LD_VAR 0 4
17881: STR
17882: PUSH
17883: LD_STRING ")
17885: STR
17886: PPUSH
17887: CALL_OW 559
// end else
17891: GO 17900
// ToLua ( getStreamItemsFromMission("","") ) ;
17893: LD_STRING getStreamItemsFromMission("","")
17895: PPUSH
17896: CALL_OW 559
// end ;
17900: LD_VAR 0 1
17904: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17905: LD_EXP 51
17909: PUSH
17910: LD_EXP 56
17914: AND
17915: IFFALSE 18039
17917: GO 17919
17919: DISABLE
17920: LD_INT 0
17922: PPUSH
17923: PPUSH
// begin enable ;
17924: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17925: LD_ADDR_VAR 0 2
17929: PUSH
17930: LD_INT 22
17932: PUSH
17933: LD_OWVAR 2
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PUSH
17942: LD_INT 2
17944: PUSH
17945: LD_INT 34
17947: PUSH
17948: LD_INT 7
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 34
17957: PUSH
17958: LD_INT 45
17960: PUSH
17961: EMPTY
17962: LIST
17963: LIST
17964: PUSH
17965: LD_INT 34
17967: PUSH
17968: LD_INT 28
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 34
17977: PUSH
17978: LD_INT 47
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 69
18000: ST_TO_ADDR
// if not tmp then
18001: LD_VAR 0 2
18005: NOT
18006: IFFALSE 18010
// exit ;
18008: GO 18039
// for i in tmp do
18010: LD_ADDR_VAR 0 1
18014: PUSH
18015: LD_VAR 0 2
18019: PUSH
18020: FOR_IN
18021: IFFALSE 18037
// begin SetLives ( i , 0 ) ;
18023: LD_VAR 0 1
18027: PPUSH
18028: LD_INT 0
18030: PPUSH
18031: CALL_OW 234
// end ;
18035: GO 18020
18037: POP
18038: POP
// end ;
18039: PPOPN 2
18041: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18042: LD_EXP 51
18046: PUSH
18047: LD_EXP 57
18051: AND
18052: IFFALSE 18136
18054: GO 18056
18056: DISABLE
18057: LD_INT 0
18059: PPUSH
18060: PPUSH
// begin enable ;
18061: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18062: LD_ADDR_VAR 0 2
18066: PUSH
18067: LD_INT 22
18069: PUSH
18070: LD_OWVAR 2
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 32
18081: PUSH
18082: LD_INT 3
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: ST_TO_ADDR
// if not tmp then
18098: LD_VAR 0 2
18102: NOT
18103: IFFALSE 18107
// exit ;
18105: GO 18136
// for i in tmp do
18107: LD_ADDR_VAR 0 1
18111: PUSH
18112: LD_VAR 0 2
18116: PUSH
18117: FOR_IN
18118: IFFALSE 18134
// begin SetLives ( i , 0 ) ;
18120: LD_VAR 0 1
18124: PPUSH
18125: LD_INT 0
18127: PPUSH
18128: CALL_OW 234
// end ;
18132: GO 18117
18134: POP
18135: POP
// end ;
18136: PPOPN 2
18138: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18139: LD_EXP 51
18143: PUSH
18144: LD_EXP 54
18148: AND
18149: IFFALSE 18242
18151: GO 18153
18153: DISABLE
18154: LD_INT 0
18156: PPUSH
// begin enable ;
18157: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18158: LD_ADDR_VAR 0 1
18162: PUSH
18163: LD_INT 22
18165: PUSH
18166: LD_OWVAR 2
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: LD_INT 25
18180: PUSH
18181: LD_INT 5
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 25
18190: PUSH
18191: LD_INT 9
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 25
18200: PUSH
18201: LD_INT 8
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 69
18222: PUSH
18223: FOR_IN
18224: IFFALSE 18240
// begin SetClass ( i , 1 ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: LD_INT 1
18233: PPUSH
18234: CALL_OW 336
// end ;
18238: GO 18223
18240: POP
18241: POP
// end ;
18242: PPOPN 1
18244: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18245: LD_EXP 51
18249: PUSH
18250: LD_EXP 55
18254: AND
18255: PUSH
18256: LD_OWVAR 65
18260: PUSH
18261: LD_INT 7
18263: LESS
18264: AND
18265: IFFALSE 18279
18267: GO 18269
18269: DISABLE
// begin enable ;
18270: ENABLE
// game_speed := 7 ;
18271: LD_ADDR_OWVAR 65
18275: PUSH
18276: LD_INT 7
18278: ST_TO_ADDR
// end ;
18279: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18280: LD_EXP 51
18284: PUSH
18285: LD_EXP 58
18289: AND
18290: IFFALSE 18492
18292: GO 18294
18294: DISABLE
18295: LD_INT 0
18297: PPUSH
18298: PPUSH
18299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18300: LD_ADDR_VAR 0 3
18304: PUSH
18305: LD_INT 81
18307: PUSH
18308: LD_OWVAR 2
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 21
18319: PUSH
18320: LD_INT 1
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PPUSH
18331: CALL_OW 69
18335: ST_TO_ADDR
// if not tmp then
18336: LD_VAR 0 3
18340: NOT
18341: IFFALSE 18345
// exit ;
18343: GO 18492
// if tmp > 5 then
18345: LD_VAR 0 3
18349: PUSH
18350: LD_INT 5
18352: GREATER
18353: IFFALSE 18365
// k := 5 else
18355: LD_ADDR_VAR 0 2
18359: PUSH
18360: LD_INT 5
18362: ST_TO_ADDR
18363: GO 18375
// k := tmp ;
18365: LD_ADDR_VAR 0 2
18369: PUSH
18370: LD_VAR 0 3
18374: ST_TO_ADDR
// for i := 1 to k do
18375: LD_ADDR_VAR 0 1
18379: PUSH
18380: DOUBLE
18381: LD_INT 1
18383: DEC
18384: ST_TO_ADDR
18385: LD_VAR 0 2
18389: PUSH
18390: FOR_TO
18391: IFFALSE 18490
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18393: LD_VAR 0 3
18397: PUSH
18398: LD_VAR 0 1
18402: ARRAY
18403: PPUSH
18404: LD_VAR 0 1
18408: PUSH
18409: LD_INT 4
18411: MOD
18412: PUSH
18413: LD_INT 1
18415: PLUS
18416: PPUSH
18417: CALL_OW 259
18421: PUSH
18422: LD_INT 10
18424: LESS
18425: IFFALSE 18488
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18427: LD_VAR 0 3
18431: PUSH
18432: LD_VAR 0 1
18436: ARRAY
18437: PPUSH
18438: LD_VAR 0 1
18442: PUSH
18443: LD_INT 4
18445: MOD
18446: PUSH
18447: LD_INT 1
18449: PLUS
18450: PPUSH
18451: LD_VAR 0 3
18455: PUSH
18456: LD_VAR 0 1
18460: ARRAY
18461: PPUSH
18462: LD_VAR 0 1
18466: PUSH
18467: LD_INT 4
18469: MOD
18470: PUSH
18471: LD_INT 1
18473: PLUS
18474: PPUSH
18475: CALL_OW 259
18479: PUSH
18480: LD_INT 1
18482: PLUS
18483: PPUSH
18484: CALL_OW 237
18488: GO 18390
18490: POP
18491: POP
// end ;
18492: PPOPN 3
18494: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18495: LD_EXP 51
18499: PUSH
18500: LD_EXP 59
18504: AND
18505: IFFALSE 18525
18507: GO 18509
18509: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18510: LD_INT 4
18512: PPUSH
18513: LD_OWVAR 2
18517: PPUSH
18518: LD_INT 0
18520: PPUSH
18521: CALL_OW 324
18525: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18526: LD_EXP 51
18530: PUSH
18531: LD_EXP 88
18535: AND
18536: IFFALSE 18556
18538: GO 18540
18540: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18541: LD_INT 19
18543: PPUSH
18544: LD_OWVAR 2
18548: PPUSH
18549: LD_INT 0
18551: PPUSH
18552: CALL_OW 324
18556: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18557: LD_EXP 51
18561: PUSH
18562: LD_EXP 60
18566: AND
18567: IFFALSE 18669
18569: GO 18571
18571: DISABLE
18572: LD_INT 0
18574: PPUSH
18575: PPUSH
// begin enable ;
18576: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18577: LD_ADDR_VAR 0 2
18581: PUSH
18582: LD_INT 22
18584: PUSH
18585: LD_OWVAR 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 2
18596: PUSH
18597: LD_INT 34
18599: PUSH
18600: LD_INT 11
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 34
18609: PUSH
18610: LD_INT 30
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: ST_TO_ADDR
// if not tmp then
18631: LD_VAR 0 2
18635: NOT
18636: IFFALSE 18640
// exit ;
18638: GO 18669
// for i in tmp do
18640: LD_ADDR_VAR 0 1
18644: PUSH
18645: LD_VAR 0 2
18649: PUSH
18650: FOR_IN
18651: IFFALSE 18667
// begin SetLives ( i , 0 ) ;
18653: LD_VAR 0 1
18657: PPUSH
18658: LD_INT 0
18660: PPUSH
18661: CALL_OW 234
// end ;
18665: GO 18650
18667: POP
18668: POP
// end ;
18669: PPOPN 2
18671: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18672: LD_EXP 51
18676: PUSH
18677: LD_EXP 61
18681: AND
18682: IFFALSE 18702
18684: GO 18686
18686: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18687: LD_INT 32
18689: PPUSH
18690: LD_OWVAR 2
18694: PPUSH
18695: LD_INT 0
18697: PPUSH
18698: CALL_OW 324
18702: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18703: LD_EXP 51
18707: PUSH
18708: LD_EXP 62
18712: AND
18713: IFFALSE 18894
18715: GO 18717
18717: DISABLE
18718: LD_INT 0
18720: PPUSH
18721: PPUSH
18722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_INT 22
18730: PUSH
18731: LD_OWVAR 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 33
18742: PUSH
18743: LD_INT 3
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: ST_TO_ADDR
// if not tmp then
18759: LD_VAR 0 2
18763: NOT
18764: IFFALSE 18768
// exit ;
18766: GO 18894
// side := 0 ;
18768: LD_ADDR_VAR 0 3
18772: PUSH
18773: LD_INT 0
18775: ST_TO_ADDR
// for i := 1 to 8 do
18776: LD_ADDR_VAR 0 1
18780: PUSH
18781: DOUBLE
18782: LD_INT 1
18784: DEC
18785: ST_TO_ADDR
18786: LD_INT 8
18788: PUSH
18789: FOR_TO
18790: IFFALSE 18838
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18792: LD_OWVAR 2
18796: PUSH
18797: LD_VAR 0 1
18801: NONEQUAL
18802: PUSH
18803: LD_OWVAR 2
18807: PPUSH
18808: LD_VAR 0 1
18812: PPUSH
18813: CALL_OW 81
18817: PUSH
18818: LD_INT 2
18820: EQUAL
18821: AND
18822: IFFALSE 18836
// begin side := i ;
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: LD_VAR 0 1
18833: ST_TO_ADDR
// break ;
18834: GO 18838
// end ;
18836: GO 18789
18838: POP
18839: POP
// if not side then
18840: LD_VAR 0 3
18844: NOT
18845: IFFALSE 18849
// exit ;
18847: GO 18894
// for i := 1 to tmp do
18849: LD_ADDR_VAR 0 1
18853: PUSH
18854: DOUBLE
18855: LD_INT 1
18857: DEC
18858: ST_TO_ADDR
18859: LD_VAR 0 2
18863: PUSH
18864: FOR_TO
18865: IFFALSE 18892
// if Prob ( 60 ) then
18867: LD_INT 60
18869: PPUSH
18870: CALL_OW 13
18874: IFFALSE 18890
// SetSide ( i , side ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: LD_VAR 0 3
18885: PPUSH
18886: CALL_OW 235
18890: GO 18864
18892: POP
18893: POP
// end ;
18894: PPOPN 3
18896: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18897: LD_EXP 51
18901: PUSH
18902: LD_EXP 64
18906: AND
18907: IFFALSE 19026
18909: GO 18911
18911: DISABLE
18912: LD_INT 0
18914: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18915: LD_ADDR_VAR 0 1
18919: PUSH
18920: LD_INT 22
18922: PUSH
18923: LD_OWVAR 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 3
18944: PUSH
18945: LD_INT 23
18947: PUSH
18948: LD_INT 0
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: EMPTY
18956: LIST
18957: LIST
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: LIST
18963: PPUSH
18964: CALL_OW 69
18968: PUSH
18969: FOR_IN
18970: IFFALSE 19024
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18972: LD_VAR 0 1
18976: PPUSH
18977: CALL_OW 257
18981: PUSH
18982: LD_INT 1
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: LD_INT 3
18990: PUSH
18991: LD_INT 4
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: IN
19000: IFFALSE 19022
// SetClass ( un , rand ( 1 , 4 ) ) ;
19002: LD_VAR 0 1
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: LD_INT 4
19012: PPUSH
19013: CALL_OW 12
19017: PPUSH
19018: CALL_OW 336
19022: GO 18969
19024: POP
19025: POP
// end ;
19026: PPOPN 1
19028: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19029: LD_EXP 51
19033: PUSH
19034: LD_EXP 63
19038: AND
19039: IFFALSE 19118
19041: GO 19043
19043: DISABLE
19044: LD_INT 0
19046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_INT 22
19054: PUSH
19055: LD_OWVAR 2
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: PUSH
19064: LD_INT 21
19066: PUSH
19067: LD_INT 3
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PPUSH
19078: CALL_OW 69
19082: ST_TO_ADDR
// if not tmp then
19083: LD_VAR 0 1
19087: NOT
19088: IFFALSE 19092
// exit ;
19090: GO 19118
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19092: LD_VAR 0 1
19096: PUSH
19097: LD_INT 1
19099: PPUSH
19100: LD_VAR 0 1
19104: PPUSH
19105: CALL_OW 12
19109: ARRAY
19110: PPUSH
19111: LD_INT 100
19113: PPUSH
19114: CALL_OW 234
// end ;
19118: PPOPN 1
19120: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19121: LD_EXP 51
19125: PUSH
19126: LD_EXP 65
19130: AND
19131: IFFALSE 19229
19133: GO 19135
19135: DISABLE
19136: LD_INT 0
19138: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_INT 22
19146: PUSH
19147: LD_OWVAR 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 21
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: ST_TO_ADDR
// if not tmp then
19175: LD_VAR 0 1
19179: NOT
19180: IFFALSE 19184
// exit ;
19182: GO 19229
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19184: LD_VAR 0 1
19188: PUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_VAR 0 1
19196: PPUSH
19197: CALL_OW 12
19201: ARRAY
19202: PPUSH
19203: LD_INT 1
19205: PPUSH
19206: LD_INT 4
19208: PPUSH
19209: CALL_OW 12
19213: PPUSH
19214: LD_INT 3000
19216: PPUSH
19217: LD_INT 9000
19219: PPUSH
19220: CALL_OW 12
19224: PPUSH
19225: CALL_OW 492
// end ;
19229: PPOPN 1
19231: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19232: LD_EXP 51
19236: PUSH
19237: LD_EXP 66
19241: AND
19242: IFFALSE 19262
19244: GO 19246
19246: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19247: LD_INT 1
19249: PPUSH
19250: LD_OWVAR 2
19254: PPUSH
19255: LD_INT 0
19257: PPUSH
19258: CALL_OW 324
19262: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19263: LD_EXP 51
19267: PUSH
19268: LD_EXP 67
19272: AND
19273: IFFALSE 19356
19275: GO 19277
19277: DISABLE
19278: LD_INT 0
19280: PPUSH
19281: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19282: LD_ADDR_VAR 0 2
19286: PUSH
19287: LD_INT 22
19289: PUSH
19290: LD_OWVAR 2
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: LD_INT 21
19301: PUSH
19302: LD_INT 3
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PPUSH
19313: CALL_OW 69
19317: ST_TO_ADDR
// if not tmp then
19318: LD_VAR 0 2
19322: NOT
19323: IFFALSE 19327
// exit ;
19325: GO 19356
// for i in tmp do
19327: LD_ADDR_VAR 0 1
19331: PUSH
19332: LD_VAR 0 2
19336: PUSH
19337: FOR_IN
19338: IFFALSE 19354
// SetBLevel ( i , 10 ) ;
19340: LD_VAR 0 1
19344: PPUSH
19345: LD_INT 10
19347: PPUSH
19348: CALL_OW 241
19352: GO 19337
19354: POP
19355: POP
// end ;
19356: PPOPN 2
19358: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19359: LD_EXP 51
19363: PUSH
19364: LD_EXP 68
19368: AND
19369: IFFALSE 19480
19371: GO 19373
19373: DISABLE
19374: LD_INT 0
19376: PPUSH
19377: PPUSH
19378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19379: LD_ADDR_VAR 0 3
19383: PUSH
19384: LD_INT 22
19386: PUSH
19387: LD_OWVAR 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 25
19398: PUSH
19399: LD_INT 1
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PPUSH
19410: CALL_OW 69
19414: ST_TO_ADDR
// if not tmp then
19415: LD_VAR 0 3
19419: NOT
19420: IFFALSE 19424
// exit ;
19422: GO 19480
// un := tmp [ rand ( 1 , tmp ) ] ;
19424: LD_ADDR_VAR 0 2
19428: PUSH
19429: LD_VAR 0 3
19433: PUSH
19434: LD_INT 1
19436: PPUSH
19437: LD_VAR 0 3
19441: PPUSH
19442: CALL_OW 12
19446: ARRAY
19447: ST_TO_ADDR
// if Crawls ( un ) then
19448: LD_VAR 0 2
19452: PPUSH
19453: CALL_OW 318
19457: IFFALSE 19468
// ComWalk ( un ) ;
19459: LD_VAR 0 2
19463: PPUSH
19464: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19468: LD_VAR 0 2
19472: PPUSH
19473: LD_INT 5
19475: PPUSH
19476: CALL_OW 336
// end ;
19480: PPOPN 3
19482: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19483: LD_EXP 51
19487: PUSH
19488: LD_EXP 69
19492: AND
19493: PUSH
19494: LD_OWVAR 67
19498: PUSH
19499: LD_INT 3
19501: LESS
19502: AND
19503: IFFALSE 19522
19505: GO 19507
19507: DISABLE
// Difficulty := Difficulty + 1 ;
19508: LD_ADDR_OWVAR 67
19512: PUSH
19513: LD_OWVAR 67
19517: PUSH
19518: LD_INT 1
19520: PLUS
19521: ST_TO_ADDR
19522: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19523: LD_EXP 51
19527: PUSH
19528: LD_EXP 70
19532: AND
19533: IFFALSE 19636
19535: GO 19537
19537: DISABLE
19538: LD_INT 0
19540: PPUSH
// begin for i := 1 to 5 do
19541: LD_ADDR_VAR 0 1
19545: PUSH
19546: DOUBLE
19547: LD_INT 1
19549: DEC
19550: ST_TO_ADDR
19551: LD_INT 5
19553: PUSH
19554: FOR_TO
19555: IFFALSE 19634
// begin uc_nation := nation_nature ;
19557: LD_ADDR_OWVAR 21
19561: PUSH
19562: LD_INT 0
19564: ST_TO_ADDR
// uc_side := 0 ;
19565: LD_ADDR_OWVAR 20
19569: PUSH
19570: LD_INT 0
19572: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19573: LD_ADDR_OWVAR 29
19577: PUSH
19578: LD_INT 12
19580: PUSH
19581: LD_INT 12
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: ST_TO_ADDR
// hc_agressivity := 20 ;
19588: LD_ADDR_OWVAR 35
19592: PUSH
19593: LD_INT 20
19595: ST_TO_ADDR
// hc_class := class_tiger ;
19596: LD_ADDR_OWVAR 28
19600: PUSH
19601: LD_INT 14
19603: ST_TO_ADDR
// hc_gallery :=  ;
19604: LD_ADDR_OWVAR 33
19608: PUSH
19609: LD_STRING 
19611: ST_TO_ADDR
// hc_name :=  ;
19612: LD_ADDR_OWVAR 26
19616: PUSH
19617: LD_STRING 
19619: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19620: CALL_OW 44
19624: PPUSH
19625: LD_INT 0
19627: PPUSH
19628: CALL_OW 51
// end ;
19632: GO 19554
19634: POP
19635: POP
// end ;
19636: PPOPN 1
19638: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19639: LD_EXP 51
19643: PUSH
19644: LD_EXP 71
19648: AND
19649: IFFALSE 19658
19651: GO 19653
19653: DISABLE
// StreamSibBomb ;
19654: CALL 19659 0 0
19658: END
// export function StreamSibBomb ; var i , x , y ; begin
19659: LD_INT 0
19661: PPUSH
19662: PPUSH
19663: PPUSH
19664: PPUSH
// result := false ;
19665: LD_ADDR_VAR 0 1
19669: PUSH
19670: LD_INT 0
19672: ST_TO_ADDR
// for i := 1 to 16 do
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: DOUBLE
19679: LD_INT 1
19681: DEC
19682: ST_TO_ADDR
19683: LD_INT 16
19685: PUSH
19686: FOR_TO
19687: IFFALSE 19886
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19689: LD_ADDR_VAR 0 3
19693: PUSH
19694: LD_INT 10
19696: PUSH
19697: LD_INT 20
19699: PUSH
19700: LD_INT 30
19702: PUSH
19703: LD_INT 40
19705: PUSH
19706: LD_INT 50
19708: PUSH
19709: LD_INT 60
19711: PUSH
19712: LD_INT 70
19714: PUSH
19715: LD_INT 80
19717: PUSH
19718: LD_INT 90
19720: PUSH
19721: LD_INT 100
19723: PUSH
19724: LD_INT 110
19726: PUSH
19727: LD_INT 120
19729: PUSH
19730: LD_INT 130
19732: PUSH
19733: LD_INT 140
19735: PUSH
19736: LD_INT 150
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 1
19758: PPUSH
19759: LD_INT 15
19761: PPUSH
19762: CALL_OW 12
19766: ARRAY
19767: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19768: LD_ADDR_VAR 0 4
19772: PUSH
19773: LD_INT 10
19775: PUSH
19776: LD_INT 20
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: LD_INT 40
19784: PUSH
19785: LD_INT 50
19787: PUSH
19788: LD_INT 60
19790: PUSH
19791: LD_INT 70
19793: PUSH
19794: LD_INT 80
19796: PUSH
19797: LD_INT 90
19799: PUSH
19800: LD_INT 100
19802: PUSH
19803: LD_INT 110
19805: PUSH
19806: LD_INT 120
19808: PUSH
19809: LD_INT 130
19811: PUSH
19812: LD_INT 140
19814: PUSH
19815: LD_INT 150
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: PUSH
19835: LD_INT 1
19837: PPUSH
19838: LD_INT 15
19840: PPUSH
19841: CALL_OW 12
19845: ARRAY
19846: ST_TO_ADDR
// if ValidHex ( x , y ) then
19847: LD_VAR 0 3
19851: PPUSH
19852: LD_VAR 0 4
19856: PPUSH
19857: CALL_OW 488
19861: IFFALSE 19884
// begin result := [ x , y ] ;
19863: LD_ADDR_VAR 0 1
19867: PUSH
19868: LD_VAR 0 3
19872: PUSH
19873: LD_VAR 0 4
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: ST_TO_ADDR
// break ;
19882: GO 19886
// end ; end ;
19884: GO 19686
19886: POP
19887: POP
// if result then
19888: LD_VAR 0 1
19892: IFFALSE 19952
// begin ToLua ( playSibBomb() ) ;
19894: LD_STRING playSibBomb()
19896: PPUSH
19897: CALL_OW 559
// wait ( 0 0$14 ) ;
19901: LD_INT 490
19903: PPUSH
19904: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19908: LD_VAR 0 1
19912: PUSH
19913: LD_INT 1
19915: ARRAY
19916: PPUSH
19917: LD_VAR 0 1
19921: PUSH
19922: LD_INT 2
19924: ARRAY
19925: PPUSH
19926: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19930: LD_VAR 0 1
19934: PUSH
19935: LD_INT 1
19937: ARRAY
19938: PPUSH
19939: LD_VAR 0 1
19943: PUSH
19944: LD_INT 2
19946: ARRAY
19947: PPUSH
19948: CALL_OW 429
// end ; end ;
19952: LD_VAR 0 1
19956: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19957: LD_EXP 51
19961: PUSH
19962: LD_EXP 73
19966: AND
19967: IFFALSE 19979
19969: GO 19971
19971: DISABLE
// YouLost (  ) ;
19972: LD_STRING 
19974: PPUSH
19975: CALL_OW 104
19979: END
// every 0 0$1 trigger StreamModeActive and sFog do
19980: LD_EXP 51
19984: PUSH
19985: LD_EXP 72
19989: AND
19990: IFFALSE 20004
19992: GO 19994
19994: DISABLE
// FogOff ( your_side ) ;
19995: LD_OWVAR 2
19999: PPUSH
20000: CALL_OW 344
20004: END
// every 0 0$1 trigger StreamModeActive and sSun do
20005: LD_EXP 51
20009: PUSH
20010: LD_EXP 74
20014: AND
20015: IFFALSE 20043
20017: GO 20019
20019: DISABLE
// begin solar_recharge_percent := 0 ;
20020: LD_ADDR_OWVAR 79
20024: PUSH
20025: LD_INT 0
20027: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20028: LD_INT 10500
20030: PPUSH
20031: CALL_OW 67
// solar_recharge_percent := 100 ;
20035: LD_ADDR_OWVAR 79
20039: PUSH
20040: LD_INT 100
20042: ST_TO_ADDR
// end ;
20043: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20044: LD_EXP 51
20048: PUSH
20049: LD_EXP 75
20053: AND
20054: IFFALSE 20293
20056: GO 20058
20058: DISABLE
20059: LD_INT 0
20061: PPUSH
20062: PPUSH
20063: PPUSH
// begin tmp := [ ] ;
20064: LD_ADDR_VAR 0 3
20068: PUSH
20069: EMPTY
20070: ST_TO_ADDR
// for i := 1 to 6 do
20071: LD_ADDR_VAR 0 1
20075: PUSH
20076: DOUBLE
20077: LD_INT 1
20079: DEC
20080: ST_TO_ADDR
20081: LD_INT 6
20083: PUSH
20084: FOR_TO
20085: IFFALSE 20190
// begin uc_nation := nation_nature ;
20087: LD_ADDR_OWVAR 21
20091: PUSH
20092: LD_INT 0
20094: ST_TO_ADDR
// uc_side := 0 ;
20095: LD_ADDR_OWVAR 20
20099: PUSH
20100: LD_INT 0
20102: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20103: LD_ADDR_OWVAR 29
20107: PUSH
20108: LD_INT 12
20110: PUSH
20111: LD_INT 12
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: ST_TO_ADDR
// hc_agressivity := 20 ;
20118: LD_ADDR_OWVAR 35
20122: PUSH
20123: LD_INT 20
20125: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20126: LD_ADDR_OWVAR 28
20130: PUSH
20131: LD_INT 17
20133: ST_TO_ADDR
// hc_gallery :=  ;
20134: LD_ADDR_OWVAR 33
20138: PUSH
20139: LD_STRING 
20141: ST_TO_ADDR
// hc_name :=  ;
20142: LD_ADDR_OWVAR 26
20146: PUSH
20147: LD_STRING 
20149: ST_TO_ADDR
// un := CreateHuman ;
20150: LD_ADDR_VAR 0 2
20154: PUSH
20155: CALL_OW 44
20159: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20160: LD_VAR 0 2
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 51
// tmp := tmp ^ un ;
20172: LD_ADDR_VAR 0 3
20176: PUSH
20177: LD_VAR 0 3
20181: PUSH
20182: LD_VAR 0 2
20186: ADD
20187: ST_TO_ADDR
// end ;
20188: GO 20084
20190: POP
20191: POP
// repeat wait ( 0 0$1 ) ;
20192: LD_INT 35
20194: PPUSH
20195: CALL_OW 67
// for un in tmp do
20199: LD_ADDR_VAR 0 2
20203: PUSH
20204: LD_VAR 0 3
20208: PUSH
20209: FOR_IN
20210: IFFALSE 20284
// begin if IsDead ( un ) then
20212: LD_VAR 0 2
20216: PPUSH
20217: CALL_OW 301
20221: IFFALSE 20241
// begin tmp := tmp diff un ;
20223: LD_ADDR_VAR 0 3
20227: PUSH
20228: LD_VAR 0 3
20232: PUSH
20233: LD_VAR 0 2
20237: DIFF
20238: ST_TO_ADDR
// continue ;
20239: GO 20209
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20241: LD_VAR 0 2
20245: PPUSH
20246: LD_INT 3
20248: PUSH
20249: LD_INT 22
20251: PUSH
20252: LD_INT 0
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: PPUSH
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 74
20277: PPUSH
20278: CALL_OW 115
// end ;
20282: GO 20209
20284: POP
20285: POP
// until not tmp ;
20286: LD_VAR 0 3
20290: NOT
20291: IFFALSE 20192
// end ;
20293: PPOPN 3
20295: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20296: LD_EXP 51
20300: PUSH
20301: LD_EXP 76
20305: AND
20306: IFFALSE 20360
20308: GO 20310
20310: DISABLE
// begin ToLua ( displayTroll(); ) ;
20311: LD_STRING displayTroll();
20313: PPUSH
20314: CALL_OW 559
// wait ( 3 3$00 ) ;
20318: LD_INT 6300
20320: PPUSH
20321: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20325: LD_STRING hideTroll();
20327: PPUSH
20328: CALL_OW 559
// wait ( 1 1$00 ) ;
20332: LD_INT 2100
20334: PPUSH
20335: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20339: LD_STRING displayTroll();
20341: PPUSH
20342: CALL_OW 559
// wait ( 1 1$00 ) ;
20346: LD_INT 2100
20348: PPUSH
20349: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20353: LD_STRING hideTroll();
20355: PPUSH
20356: CALL_OW 559
// end ;
20360: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20361: LD_EXP 51
20365: PUSH
20366: LD_EXP 77
20370: AND
20371: IFFALSE 20434
20373: GO 20375
20375: DISABLE
20376: LD_INT 0
20378: PPUSH
// begin p := 0 ;
20379: LD_ADDR_VAR 0 1
20383: PUSH
20384: LD_INT 0
20386: ST_TO_ADDR
// repeat game_speed := 1 ;
20387: LD_ADDR_OWVAR 65
20391: PUSH
20392: LD_INT 1
20394: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20395: LD_INT 35
20397: PPUSH
20398: CALL_OW 67
// p := p + 1 ;
20402: LD_ADDR_VAR 0 1
20406: PUSH
20407: LD_VAR 0 1
20411: PUSH
20412: LD_INT 1
20414: PLUS
20415: ST_TO_ADDR
// until p >= 60 ;
20416: LD_VAR 0 1
20420: PUSH
20421: LD_INT 60
20423: GREATEREQUAL
20424: IFFALSE 20387
// game_speed := 4 ;
20426: LD_ADDR_OWVAR 65
20430: PUSH
20431: LD_INT 4
20433: ST_TO_ADDR
// end ;
20434: PPOPN 1
20436: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20437: LD_EXP 51
20441: PUSH
20442: LD_EXP 78
20446: AND
20447: IFFALSE 20593
20449: GO 20451
20451: DISABLE
20452: LD_INT 0
20454: PPUSH
20455: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20456: LD_ADDR_VAR 0 1
20460: PUSH
20461: LD_INT 22
20463: PUSH
20464: LD_OWVAR 2
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: LD_INT 2
20475: PUSH
20476: LD_INT 30
20478: PUSH
20479: LD_INT 0
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: LD_INT 30
20488: PUSH
20489: LD_INT 1
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: LIST
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PPUSH
20505: CALL_OW 69
20509: ST_TO_ADDR
// if not depot then
20510: LD_VAR 0 1
20514: NOT
20515: IFFALSE 20519
// exit ;
20517: GO 20593
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20519: LD_ADDR_VAR 0 2
20523: PUSH
20524: LD_VAR 0 1
20528: PUSH
20529: LD_INT 1
20531: PPUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 12
20541: ARRAY
20542: PPUSH
20543: CALL_OW 274
20547: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20548: LD_VAR 0 2
20552: PPUSH
20553: LD_INT 1
20555: PPUSH
20556: LD_INT 0
20558: PPUSH
20559: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20563: LD_VAR 0 2
20567: PPUSH
20568: LD_INT 2
20570: PPUSH
20571: LD_INT 0
20573: PPUSH
20574: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20578: LD_VAR 0 2
20582: PPUSH
20583: LD_INT 3
20585: PPUSH
20586: LD_INT 0
20588: PPUSH
20589: CALL_OW 277
// end ;
20593: PPOPN 2
20595: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20596: LD_EXP 51
20600: PUSH
20601: LD_EXP 79
20605: AND
20606: IFFALSE 20703
20608: GO 20610
20610: DISABLE
20611: LD_INT 0
20613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20614: LD_ADDR_VAR 0 1
20618: PUSH
20619: LD_INT 22
20621: PUSH
20622: LD_OWVAR 2
20626: PUSH
20627: EMPTY
20628: LIST
20629: LIST
20630: PUSH
20631: LD_INT 21
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: PUSH
20641: LD_INT 3
20643: PUSH
20644: LD_INT 23
20646: PUSH
20647: LD_INT 0
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: PUSH
20654: EMPTY
20655: LIST
20656: LIST
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: LIST
20662: PPUSH
20663: CALL_OW 69
20667: ST_TO_ADDR
// if not tmp then
20668: LD_VAR 0 1
20672: NOT
20673: IFFALSE 20677
// exit ;
20675: GO 20703
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20677: LD_VAR 0 1
20681: PUSH
20682: LD_INT 1
20684: PPUSH
20685: LD_VAR 0 1
20689: PPUSH
20690: CALL_OW 12
20694: ARRAY
20695: PPUSH
20696: LD_INT 200
20698: PPUSH
20699: CALL_OW 234
// end ;
20703: PPOPN 1
20705: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20706: LD_EXP 51
20710: PUSH
20711: LD_EXP 80
20715: AND
20716: IFFALSE 20795
20718: GO 20720
20720: DISABLE
20721: LD_INT 0
20723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20724: LD_ADDR_VAR 0 1
20728: PUSH
20729: LD_INT 22
20731: PUSH
20732: LD_OWVAR 2
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 21
20743: PUSH
20744: LD_INT 2
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: EMPTY
20752: LIST
20753: LIST
20754: PPUSH
20755: CALL_OW 69
20759: ST_TO_ADDR
// if not tmp then
20760: LD_VAR 0 1
20764: NOT
20765: IFFALSE 20769
// exit ;
20767: GO 20795
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20769: LD_VAR 0 1
20773: PUSH
20774: LD_INT 1
20776: PPUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 12
20786: ARRAY
20787: PPUSH
20788: LD_INT 60
20790: PPUSH
20791: CALL_OW 234
// end ;
20795: PPOPN 1
20797: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20798: LD_EXP 51
20802: PUSH
20803: LD_EXP 81
20807: AND
20808: IFFALSE 20907
20810: GO 20812
20812: DISABLE
20813: LD_INT 0
20815: PPUSH
20816: PPUSH
// begin enable ;
20817: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20818: LD_ADDR_VAR 0 1
20822: PUSH
20823: LD_INT 22
20825: PUSH
20826: LD_OWVAR 2
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 61
20837: PUSH
20838: EMPTY
20839: LIST
20840: PUSH
20841: LD_INT 33
20843: PUSH
20844: LD_INT 2
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: PPUSH
20856: CALL_OW 69
20860: ST_TO_ADDR
// if not tmp then
20861: LD_VAR 0 1
20865: NOT
20866: IFFALSE 20870
// exit ;
20868: GO 20907
// for i in tmp do
20870: LD_ADDR_VAR 0 2
20874: PUSH
20875: LD_VAR 0 1
20879: PUSH
20880: FOR_IN
20881: IFFALSE 20905
// if IsControledBy ( i ) then
20883: LD_VAR 0 2
20887: PPUSH
20888: CALL_OW 312
20892: IFFALSE 20903
// ComUnlink ( i ) ;
20894: LD_VAR 0 2
20898: PPUSH
20899: CALL_OW 136
20903: GO 20880
20905: POP
20906: POP
// end ;
20907: PPOPN 2
20909: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20910: LD_EXP 51
20914: PUSH
20915: LD_EXP 82
20919: AND
20920: IFFALSE 21060
20922: GO 20924
20924: DISABLE
20925: LD_INT 0
20927: PPUSH
20928: PPUSH
// begin ToLua ( displayPowell(); ) ;
20929: LD_STRING displayPowell();
20931: PPUSH
20932: CALL_OW 559
// uc_side := 0 ;
20936: LD_ADDR_OWVAR 20
20940: PUSH
20941: LD_INT 0
20943: ST_TO_ADDR
// uc_nation := 2 ;
20944: LD_ADDR_OWVAR 21
20948: PUSH
20949: LD_INT 2
20951: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20952: LD_ADDR_OWVAR 37
20956: PUSH
20957: LD_INT 14
20959: ST_TO_ADDR
// vc_engine := engine_siberite ;
20960: LD_ADDR_OWVAR 39
20964: PUSH
20965: LD_INT 3
20967: ST_TO_ADDR
// vc_control := control_apeman ;
20968: LD_ADDR_OWVAR 38
20972: PUSH
20973: LD_INT 5
20975: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20976: LD_ADDR_OWVAR 40
20980: PUSH
20981: LD_INT 29
20983: ST_TO_ADDR
// un := CreateVehicle ;
20984: LD_ADDR_VAR 0 2
20988: PUSH
20989: CALL_OW 45
20993: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20994: LD_VAR 0 2
20998: PPUSH
20999: LD_INT 1
21001: PPUSH
21002: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21006: LD_INT 35
21008: PPUSH
21009: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21013: LD_VAR 0 2
21017: PPUSH
21018: LD_INT 22
21020: PUSH
21021: LD_OWVAR 2
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PPUSH
21030: CALL_OW 69
21034: PPUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: CALL_OW 74
21044: PPUSH
21045: CALL_OW 115
// until IsDead ( un ) ;
21049: LD_VAR 0 2
21053: PPUSH
21054: CALL_OW 301
21058: IFFALSE 21006
// end ;
21060: PPOPN 2
21062: END
// every 0 0$1 trigger StreamModeActive and sStu do
21063: LD_EXP 51
21067: PUSH
21068: LD_EXP 90
21072: AND
21073: IFFALSE 21089
21075: GO 21077
21077: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21078: LD_STRING displayStucuk();
21080: PPUSH
21081: CALL_OW 559
// ResetFog ;
21085: CALL_OW 335
// end ;
21089: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21090: LD_EXP 51
21094: PUSH
21095: LD_EXP 83
21099: AND
21100: IFFALSE 21241
21102: GO 21104
21104: DISABLE
21105: LD_INT 0
21107: PPUSH
21108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21109: LD_ADDR_VAR 0 2
21113: PUSH
21114: LD_INT 22
21116: PUSH
21117: LD_OWVAR 2
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 21
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PPUSH
21140: CALL_OW 69
21144: ST_TO_ADDR
// if not tmp then
21145: LD_VAR 0 2
21149: NOT
21150: IFFALSE 21154
// exit ;
21152: GO 21241
// un := tmp [ rand ( 1 , tmp ) ] ;
21154: LD_ADDR_VAR 0 1
21158: PUSH
21159: LD_VAR 0 2
21163: PUSH
21164: LD_INT 1
21166: PPUSH
21167: LD_VAR 0 2
21171: PPUSH
21172: CALL_OW 12
21176: ARRAY
21177: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21178: LD_VAR 0 1
21182: PPUSH
21183: LD_INT 0
21185: PPUSH
21186: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21190: LD_VAR 0 1
21194: PPUSH
21195: LD_OWVAR 3
21199: PUSH
21200: LD_VAR 0 1
21204: DIFF
21205: PPUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL_OW 74
21215: PPUSH
21216: CALL_OW 115
// wait ( 0 0$20 ) ;
21220: LD_INT 700
21222: PPUSH
21223: CALL_OW 67
// SetSide ( un , your_side ) ;
21227: LD_VAR 0 1
21231: PPUSH
21232: LD_OWVAR 2
21236: PPUSH
21237: CALL_OW 235
// end ;
21241: PPOPN 2
21243: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21244: LD_EXP 51
21248: PUSH
21249: LD_EXP 84
21253: AND
21254: IFFALSE 21360
21256: GO 21258
21258: DISABLE
21259: LD_INT 0
21261: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21262: LD_ADDR_VAR 0 1
21266: PUSH
21267: LD_INT 22
21269: PUSH
21270: LD_OWVAR 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 2
21281: PUSH
21282: LD_INT 30
21284: PUSH
21285: LD_INT 0
21287: PUSH
21288: EMPTY
21289: LIST
21290: LIST
21291: PUSH
21292: LD_INT 30
21294: PUSH
21295: LD_INT 1
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: LIST
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PPUSH
21311: CALL_OW 69
21315: ST_TO_ADDR
// if not depot then
21316: LD_VAR 0 1
21320: NOT
21321: IFFALSE 21325
// exit ;
21323: GO 21360
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21325: LD_VAR 0 1
21329: PUSH
21330: LD_INT 1
21332: ARRAY
21333: PPUSH
21334: CALL_OW 250
21338: PPUSH
21339: LD_VAR 0 1
21343: PUSH
21344: LD_INT 1
21346: ARRAY
21347: PPUSH
21348: CALL_OW 251
21352: PPUSH
21353: LD_INT 70
21355: PPUSH
21356: CALL_OW 495
// end ;
21360: PPOPN 1
21362: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21363: LD_EXP 51
21367: PUSH
21368: LD_EXP 85
21372: AND
21373: IFFALSE 21584
21375: GO 21377
21377: DISABLE
21378: LD_INT 0
21380: PPUSH
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21385: LD_ADDR_VAR 0 5
21389: PUSH
21390: LD_INT 22
21392: PUSH
21393: LD_OWVAR 2
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 21
21404: PUSH
21405: LD_INT 1
21407: PUSH
21408: EMPTY
21409: LIST
21410: LIST
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PPUSH
21416: CALL_OW 69
21420: ST_TO_ADDR
// if not tmp then
21421: LD_VAR 0 5
21425: NOT
21426: IFFALSE 21430
// exit ;
21428: GO 21584
// for i in tmp do
21430: LD_ADDR_VAR 0 1
21434: PUSH
21435: LD_VAR 0 5
21439: PUSH
21440: FOR_IN
21441: IFFALSE 21582
// begin d := rand ( 0 , 5 ) ;
21443: LD_ADDR_VAR 0 4
21447: PUSH
21448: LD_INT 0
21450: PPUSH
21451: LD_INT 5
21453: PPUSH
21454: CALL_OW 12
21458: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21459: LD_ADDR_VAR 0 2
21463: PUSH
21464: LD_VAR 0 1
21468: PPUSH
21469: CALL_OW 250
21473: PPUSH
21474: LD_VAR 0 4
21478: PPUSH
21479: LD_INT 3
21481: PPUSH
21482: LD_INT 12
21484: PPUSH
21485: CALL_OW 12
21489: PPUSH
21490: CALL_OW 272
21494: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21495: LD_ADDR_VAR 0 3
21499: PUSH
21500: LD_VAR 0 1
21504: PPUSH
21505: CALL_OW 251
21509: PPUSH
21510: LD_VAR 0 4
21514: PPUSH
21515: LD_INT 3
21517: PPUSH
21518: LD_INT 12
21520: PPUSH
21521: CALL_OW 12
21525: PPUSH
21526: CALL_OW 273
21530: ST_TO_ADDR
// if ValidHex ( x , y ) then
21531: LD_VAR 0 2
21535: PPUSH
21536: LD_VAR 0 3
21540: PPUSH
21541: CALL_OW 488
21545: IFFALSE 21580
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21547: LD_VAR 0 1
21551: PPUSH
21552: LD_VAR 0 2
21556: PPUSH
21557: LD_VAR 0 3
21561: PPUSH
21562: LD_INT 3
21564: PPUSH
21565: LD_INT 6
21567: PPUSH
21568: CALL_OW 12
21572: PPUSH
21573: LD_INT 1
21575: PPUSH
21576: CALL_OW 483
// end ;
21580: GO 21440
21582: POP
21583: POP
// end ;
21584: PPOPN 5
21586: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21587: LD_EXP 51
21591: PUSH
21592: LD_EXP 86
21596: AND
21597: IFFALSE 21691
21599: GO 21601
21601: DISABLE
21602: LD_INT 0
21604: PPUSH
21605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21606: LD_ADDR_VAR 0 2
21610: PUSH
21611: LD_INT 22
21613: PUSH
21614: LD_OWVAR 2
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 32
21625: PUSH
21626: LD_INT 1
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_INT 21
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: LIST
21647: PPUSH
21648: CALL_OW 69
21652: ST_TO_ADDR
// if not tmp then
21653: LD_VAR 0 2
21657: NOT
21658: IFFALSE 21662
// exit ;
21660: GO 21691
// for i in tmp do
21662: LD_ADDR_VAR 0 1
21666: PUSH
21667: LD_VAR 0 2
21671: PUSH
21672: FOR_IN
21673: IFFALSE 21689
// SetFuel ( i , 0 ) ;
21675: LD_VAR 0 1
21679: PPUSH
21680: LD_INT 0
21682: PPUSH
21683: CALL_OW 240
21687: GO 21672
21689: POP
21690: POP
// end ;
21691: PPOPN 2
21693: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21694: LD_EXP 51
21698: PUSH
21699: LD_EXP 87
21703: AND
21704: IFFALSE 21770
21706: GO 21708
21708: DISABLE
21709: LD_INT 0
21711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21712: LD_ADDR_VAR 0 1
21716: PUSH
21717: LD_INT 22
21719: PUSH
21720: LD_OWVAR 2
21724: PUSH
21725: EMPTY
21726: LIST
21727: LIST
21728: PUSH
21729: LD_INT 30
21731: PUSH
21732: LD_INT 29
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PPUSH
21743: CALL_OW 69
21747: ST_TO_ADDR
// if not tmp then
21748: LD_VAR 0 1
21752: NOT
21753: IFFALSE 21757
// exit ;
21755: GO 21770
// DestroyUnit ( tmp [ 1 ] ) ;
21757: LD_VAR 0 1
21761: PUSH
21762: LD_INT 1
21764: ARRAY
21765: PPUSH
21766: CALL_OW 65
// end ;
21770: PPOPN 1
21772: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21773: LD_EXP 51
21777: PUSH
21778: LD_EXP 89
21782: AND
21783: IFFALSE 21912
21785: GO 21787
21787: DISABLE
21788: LD_INT 0
21790: PPUSH
// begin uc_side := 0 ;
21791: LD_ADDR_OWVAR 20
21795: PUSH
21796: LD_INT 0
21798: ST_TO_ADDR
// uc_nation := nation_arabian ;
21799: LD_ADDR_OWVAR 21
21803: PUSH
21804: LD_INT 2
21806: ST_TO_ADDR
// hc_gallery :=  ;
21807: LD_ADDR_OWVAR 33
21811: PUSH
21812: LD_STRING 
21814: ST_TO_ADDR
// hc_name :=  ;
21815: LD_ADDR_OWVAR 26
21819: PUSH
21820: LD_STRING 
21822: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21823: LD_INT 1
21825: PPUSH
21826: LD_INT 11
21828: PPUSH
21829: LD_INT 10
21831: PPUSH
21832: CALL_OW 380
// un := CreateHuman ;
21836: LD_ADDR_VAR 0 1
21840: PUSH
21841: CALL_OW 44
21845: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21846: LD_VAR 0 1
21850: PPUSH
21851: LD_INT 1
21853: PPUSH
21854: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21858: LD_INT 35
21860: PPUSH
21861: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21865: LD_VAR 0 1
21869: PPUSH
21870: LD_INT 22
21872: PUSH
21873: LD_OWVAR 2
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PPUSH
21882: CALL_OW 69
21886: PPUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL_OW 74
21896: PPUSH
21897: CALL_OW 115
// until IsDead ( un ) ;
21901: LD_VAR 0 1
21905: PPUSH
21906: CALL_OW 301
21910: IFFALSE 21858
// end ;
21912: PPOPN 1
21914: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21915: LD_EXP 51
21919: PUSH
21920: LD_EXP 91
21924: AND
21925: IFFALSE 21937
21927: GO 21929
21929: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21930: LD_STRING earthquake(getX(game), 0, 32)
21932: PPUSH
21933: CALL_OW 559
21937: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21938: LD_EXP 51
21942: PUSH
21943: LD_EXP 92
21947: AND
21948: IFFALSE 22039
21950: GO 21952
21952: DISABLE
21953: LD_INT 0
21955: PPUSH
// begin enable ;
21956: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21957: LD_ADDR_VAR 0 1
21961: PUSH
21962: LD_INT 22
21964: PUSH
21965: LD_OWVAR 2
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 21
21976: PUSH
21977: LD_INT 2
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PUSH
21984: LD_INT 33
21986: PUSH
21987: LD_INT 3
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL_OW 69
22003: ST_TO_ADDR
// if not tmp then
22004: LD_VAR 0 1
22008: NOT
22009: IFFALSE 22013
// exit ;
22011: GO 22039
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22013: LD_VAR 0 1
22017: PUSH
22018: LD_INT 1
22020: PPUSH
22021: LD_VAR 0 1
22025: PPUSH
22026: CALL_OW 12
22030: ARRAY
22031: PPUSH
22032: LD_INT 1
22034: PPUSH
22035: CALL_OW 234
// end ;
22039: PPOPN 1
22041: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22042: LD_EXP 51
22046: PUSH
22047: LD_EXP 93
22051: AND
22052: IFFALSE 22193
22054: GO 22056
22056: DISABLE
22057: LD_INT 0
22059: PPUSH
22060: PPUSH
22061: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22062: LD_ADDR_VAR 0 3
22066: PUSH
22067: LD_INT 22
22069: PUSH
22070: LD_OWVAR 2
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: LD_INT 25
22081: PUSH
22082: LD_INT 1
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PPUSH
22093: CALL_OW 69
22097: ST_TO_ADDR
// if not tmp then
22098: LD_VAR 0 3
22102: NOT
22103: IFFALSE 22107
// exit ;
22105: GO 22193
// un := tmp [ rand ( 1 , tmp ) ] ;
22107: LD_ADDR_VAR 0 2
22111: PUSH
22112: LD_VAR 0 3
22116: PUSH
22117: LD_INT 1
22119: PPUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: CALL_OW 12
22129: ARRAY
22130: ST_TO_ADDR
// if Crawls ( un ) then
22131: LD_VAR 0 2
22135: PPUSH
22136: CALL_OW 318
22140: IFFALSE 22151
// ComWalk ( un ) ;
22142: LD_VAR 0 2
22146: PPUSH
22147: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22151: LD_VAR 0 2
22155: PPUSH
22156: LD_INT 9
22158: PPUSH
22159: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22163: LD_INT 28
22165: PPUSH
22166: LD_OWVAR 2
22170: PPUSH
22171: LD_INT 2
22173: PPUSH
22174: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22178: LD_INT 29
22180: PPUSH
22181: LD_OWVAR 2
22185: PPUSH
22186: LD_INT 2
22188: PPUSH
22189: CALL_OW 322
// end ;
22193: PPOPN 3
22195: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22196: LD_EXP 51
22200: PUSH
22201: LD_EXP 94
22205: AND
22206: IFFALSE 22317
22208: GO 22210
22210: DISABLE
22211: LD_INT 0
22213: PPUSH
22214: PPUSH
22215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22216: LD_ADDR_VAR 0 3
22220: PUSH
22221: LD_INT 22
22223: PUSH
22224: LD_OWVAR 2
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: LD_INT 1
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PPUSH
22247: CALL_OW 69
22251: ST_TO_ADDR
// if not tmp then
22252: LD_VAR 0 3
22256: NOT
22257: IFFALSE 22261
// exit ;
22259: GO 22317
// un := tmp [ rand ( 1 , tmp ) ] ;
22261: LD_ADDR_VAR 0 2
22265: PUSH
22266: LD_VAR 0 3
22270: PUSH
22271: LD_INT 1
22273: PPUSH
22274: LD_VAR 0 3
22278: PPUSH
22279: CALL_OW 12
22283: ARRAY
22284: ST_TO_ADDR
// if Crawls ( un ) then
22285: LD_VAR 0 2
22289: PPUSH
22290: CALL_OW 318
22294: IFFALSE 22305
// ComWalk ( un ) ;
22296: LD_VAR 0 2
22300: PPUSH
22301: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22305: LD_VAR 0 2
22309: PPUSH
22310: LD_INT 8
22312: PPUSH
22313: CALL_OW 336
// end ;
22317: PPOPN 3
22319: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22320: LD_EXP 51
22324: PUSH
22325: LD_EXP 95
22329: AND
22330: IFFALSE 22474
22332: GO 22334
22334: DISABLE
22335: LD_INT 0
22337: PPUSH
22338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22339: LD_ADDR_VAR 0 2
22343: PUSH
22344: LD_INT 22
22346: PUSH
22347: LD_OWVAR 2
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 21
22358: PUSH
22359: LD_INT 2
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 2
22368: PUSH
22369: LD_INT 34
22371: PUSH
22372: LD_INT 12
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 34
22381: PUSH
22382: LD_INT 51
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: LD_INT 34
22391: PUSH
22392: LD_INT 32
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: LIST
22403: LIST
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: LIST
22409: PPUSH
22410: CALL_OW 69
22414: ST_TO_ADDR
// if not tmp then
22415: LD_VAR 0 2
22419: NOT
22420: IFFALSE 22424
// exit ;
22422: GO 22474
// for i in tmp do
22424: LD_ADDR_VAR 0 1
22428: PUSH
22429: LD_VAR 0 2
22433: PUSH
22434: FOR_IN
22435: IFFALSE 22472
// if GetCargo ( i , mat_artifact ) = 0 then
22437: LD_VAR 0 1
22441: PPUSH
22442: LD_INT 4
22444: PPUSH
22445: CALL_OW 289
22449: PUSH
22450: LD_INT 0
22452: EQUAL
22453: IFFALSE 22470
// SetCargo ( i , mat_siberit , 100 ) ;
22455: LD_VAR 0 1
22459: PPUSH
22460: LD_INT 3
22462: PPUSH
22463: LD_INT 100
22465: PPUSH
22466: CALL_OW 290
22470: GO 22434
22472: POP
22473: POP
// end ;
22474: PPOPN 2
22476: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22477: LD_EXP 51
22481: PUSH
22482: LD_EXP 96
22486: AND
22487: IFFALSE 22670
22489: GO 22491
22491: DISABLE
22492: LD_INT 0
22494: PPUSH
22495: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22496: LD_ADDR_VAR 0 2
22500: PUSH
22501: LD_INT 22
22503: PUSH
22504: LD_OWVAR 2
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PPUSH
22513: CALL_OW 69
22517: ST_TO_ADDR
// if not tmp then
22518: LD_VAR 0 2
22522: NOT
22523: IFFALSE 22527
// exit ;
22525: GO 22670
// for i := 1 to 2 do
22527: LD_ADDR_VAR 0 1
22531: PUSH
22532: DOUBLE
22533: LD_INT 1
22535: DEC
22536: ST_TO_ADDR
22537: LD_INT 2
22539: PUSH
22540: FOR_TO
22541: IFFALSE 22668
// begin uc_side := your_side ;
22543: LD_ADDR_OWVAR 20
22547: PUSH
22548: LD_OWVAR 2
22552: ST_TO_ADDR
// uc_nation := nation_american ;
22553: LD_ADDR_OWVAR 21
22557: PUSH
22558: LD_INT 1
22560: ST_TO_ADDR
// vc_chassis := us_morphling ;
22561: LD_ADDR_OWVAR 37
22565: PUSH
22566: LD_INT 5
22568: ST_TO_ADDR
// vc_engine := engine_siberite ;
22569: LD_ADDR_OWVAR 39
22573: PUSH
22574: LD_INT 3
22576: ST_TO_ADDR
// vc_control := control_computer ;
22577: LD_ADDR_OWVAR 38
22581: PUSH
22582: LD_INT 3
22584: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22585: LD_ADDR_OWVAR 40
22589: PUSH
22590: LD_INT 10
22592: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22593: LD_VAR 0 2
22597: PUSH
22598: LD_INT 1
22600: ARRAY
22601: PPUSH
22602: CALL_OW 310
22606: NOT
22607: IFFALSE 22654
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22609: CALL_OW 45
22613: PPUSH
22614: LD_VAR 0 2
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: CALL_OW 250
22627: PPUSH
22628: LD_VAR 0 2
22632: PUSH
22633: LD_INT 1
22635: ARRAY
22636: PPUSH
22637: CALL_OW 251
22641: PPUSH
22642: LD_INT 12
22644: PPUSH
22645: LD_INT 1
22647: PPUSH
22648: CALL_OW 50
22652: GO 22666
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22654: CALL_OW 45
22658: PPUSH
22659: LD_INT 1
22661: PPUSH
22662: CALL_OW 51
// end ;
22666: GO 22540
22668: POP
22669: POP
// end ;
22670: PPOPN 2
22672: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22673: LD_EXP 51
22677: PUSH
22678: LD_EXP 97
22682: AND
22683: IFFALSE 22905
22685: GO 22687
22687: DISABLE
22688: LD_INT 0
22690: PPUSH
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22696: LD_ADDR_VAR 0 6
22700: PUSH
22701: LD_INT 22
22703: PUSH
22704: LD_OWVAR 2
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 21
22715: PUSH
22716: LD_INT 1
22718: PUSH
22719: EMPTY
22720: LIST
22721: LIST
22722: PUSH
22723: LD_INT 3
22725: PUSH
22726: LD_INT 23
22728: PUSH
22729: LD_INT 0
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: LIST
22744: PPUSH
22745: CALL_OW 69
22749: ST_TO_ADDR
// if not tmp then
22750: LD_VAR 0 6
22754: NOT
22755: IFFALSE 22759
// exit ;
22757: GO 22905
// s1 := rand ( 1 , 4 ) ;
22759: LD_ADDR_VAR 0 2
22763: PUSH
22764: LD_INT 1
22766: PPUSH
22767: LD_INT 4
22769: PPUSH
22770: CALL_OW 12
22774: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22775: LD_ADDR_VAR 0 4
22779: PUSH
22780: LD_VAR 0 6
22784: PUSH
22785: LD_INT 1
22787: ARRAY
22788: PPUSH
22789: LD_VAR 0 2
22793: PPUSH
22794: CALL_OW 259
22798: ST_TO_ADDR
// if s1 = 1 then
22799: LD_VAR 0 2
22803: PUSH
22804: LD_INT 1
22806: EQUAL
22807: IFFALSE 22827
// s2 := rand ( 2 , 4 ) else
22809: LD_ADDR_VAR 0 3
22813: PUSH
22814: LD_INT 2
22816: PPUSH
22817: LD_INT 4
22819: PPUSH
22820: CALL_OW 12
22824: ST_TO_ADDR
22825: GO 22835
// s2 := 1 ;
22827: LD_ADDR_VAR 0 3
22831: PUSH
22832: LD_INT 1
22834: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22835: LD_ADDR_VAR 0 5
22839: PUSH
22840: LD_VAR 0 6
22844: PUSH
22845: LD_INT 1
22847: ARRAY
22848: PPUSH
22849: LD_VAR 0 3
22853: PPUSH
22854: CALL_OW 259
22858: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22859: LD_VAR 0 6
22863: PUSH
22864: LD_INT 1
22866: ARRAY
22867: PPUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_VAR 0 5
22877: PPUSH
22878: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22882: LD_VAR 0 6
22886: PUSH
22887: LD_INT 1
22889: ARRAY
22890: PPUSH
22891: LD_VAR 0 3
22895: PPUSH
22896: LD_VAR 0 4
22900: PPUSH
22901: CALL_OW 237
// end ;
22905: PPOPN 6
22907: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22908: LD_EXP 51
22912: PUSH
22913: LD_EXP 98
22917: AND
22918: IFFALSE 22997
22920: GO 22922
22922: DISABLE
22923: LD_INT 0
22925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22926: LD_ADDR_VAR 0 1
22930: PUSH
22931: LD_INT 22
22933: PUSH
22934: LD_OWVAR 2
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 30
22945: PUSH
22946: LD_INT 3
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PPUSH
22957: CALL_OW 69
22961: ST_TO_ADDR
// if not tmp then
22962: LD_VAR 0 1
22966: NOT
22967: IFFALSE 22971
// exit ;
22969: GO 22997
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22971: LD_VAR 0 1
22975: PUSH
22976: LD_INT 1
22978: PPUSH
22979: LD_VAR 0 1
22983: PPUSH
22984: CALL_OW 12
22988: ARRAY
22989: PPUSH
22990: LD_INT 1
22992: PPUSH
22993: CALL_OW 234
// end ;
22997: PPOPN 1
22999: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23000: LD_EXP 51
23004: PUSH
23005: LD_EXP 99
23009: AND
23010: IFFALSE 23122
23012: GO 23014
23014: DISABLE
23015: LD_INT 0
23017: PPUSH
23018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23019: LD_ADDR_VAR 0 2
23023: PUSH
23024: LD_INT 22
23026: PUSH
23027: LD_OWVAR 2
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 2
23038: PUSH
23039: LD_INT 30
23041: PUSH
23042: LD_INT 27
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 30
23051: PUSH
23052: LD_INT 26
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 30
23061: PUSH
23062: LD_INT 28
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: PUSH
23075: EMPTY
23076: LIST
23077: LIST
23078: PPUSH
23079: CALL_OW 69
23083: ST_TO_ADDR
// if not tmp then
23084: LD_VAR 0 2
23088: NOT
23089: IFFALSE 23093
// exit ;
23091: GO 23122
// for i in tmp do
23093: LD_ADDR_VAR 0 1
23097: PUSH
23098: LD_VAR 0 2
23102: PUSH
23103: FOR_IN
23104: IFFALSE 23120
// SetLives ( i , 1 ) ;
23106: LD_VAR 0 1
23110: PPUSH
23111: LD_INT 1
23113: PPUSH
23114: CALL_OW 234
23118: GO 23103
23120: POP
23121: POP
// end ;
23122: PPOPN 2
23124: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23125: LD_EXP 51
23129: PUSH
23130: LD_EXP 100
23134: AND
23135: IFFALSE 23409
23137: GO 23139
23139: DISABLE
23140: LD_INT 0
23142: PPUSH
23143: PPUSH
23144: PPUSH
// begin i := rand ( 1 , 7 ) ;
23145: LD_ADDR_VAR 0 1
23149: PUSH
23150: LD_INT 1
23152: PPUSH
23153: LD_INT 7
23155: PPUSH
23156: CALL_OW 12
23160: ST_TO_ADDR
// case i of 1 :
23161: LD_VAR 0 1
23165: PUSH
23166: LD_INT 1
23168: DOUBLE
23169: EQUAL
23170: IFTRUE 23174
23172: GO 23184
23174: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23175: LD_STRING earthquake(getX(game), 0, 32)
23177: PPUSH
23178: CALL_OW 559
23182: GO 23409
23184: LD_INT 2
23186: DOUBLE
23187: EQUAL
23188: IFTRUE 23192
23190: GO 23206
23192: POP
// begin ToLua ( displayStucuk(); ) ;
23193: LD_STRING displayStucuk();
23195: PPUSH
23196: CALL_OW 559
// ResetFog ;
23200: CALL_OW 335
// end ; 3 :
23204: GO 23409
23206: LD_INT 3
23208: DOUBLE
23209: EQUAL
23210: IFTRUE 23214
23212: GO 23318
23214: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23215: LD_ADDR_VAR 0 2
23219: PUSH
23220: LD_INT 22
23222: PUSH
23223: LD_OWVAR 2
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 25
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PPUSH
23246: CALL_OW 69
23250: ST_TO_ADDR
// if not tmp then
23251: LD_VAR 0 2
23255: NOT
23256: IFFALSE 23260
// exit ;
23258: GO 23409
// un := tmp [ rand ( 1 , tmp ) ] ;
23260: LD_ADDR_VAR 0 3
23264: PUSH
23265: LD_VAR 0 2
23269: PUSH
23270: LD_INT 1
23272: PPUSH
23273: LD_VAR 0 2
23277: PPUSH
23278: CALL_OW 12
23282: ARRAY
23283: ST_TO_ADDR
// if Crawls ( un ) then
23284: LD_VAR 0 3
23288: PPUSH
23289: CALL_OW 318
23293: IFFALSE 23304
// ComWalk ( un ) ;
23295: LD_VAR 0 3
23299: PPUSH
23300: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23304: LD_VAR 0 3
23308: PPUSH
23309: LD_INT 8
23311: PPUSH
23312: CALL_OW 336
// end ; 4 :
23316: GO 23409
23318: LD_INT 4
23320: DOUBLE
23321: EQUAL
23322: IFTRUE 23326
23324: GO 23387
23326: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23327: LD_ADDR_VAR 0 2
23331: PUSH
23332: LD_INT 22
23334: PUSH
23335: LD_OWVAR 2
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: LD_INT 30
23346: PUSH
23347: LD_INT 29
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PPUSH
23358: CALL_OW 69
23362: ST_TO_ADDR
// if not tmp then
23363: LD_VAR 0 2
23367: NOT
23368: IFFALSE 23372
// exit ;
23370: GO 23409
// DestroyUnit ( tmp [ 1 ] ) ;
23372: LD_VAR 0 2
23376: PUSH
23377: LD_INT 1
23379: ARRAY
23380: PPUSH
23381: CALL_OW 65
// end ; 5 .. 7 :
23385: GO 23409
23387: LD_INT 5
23389: DOUBLE
23390: GREATEREQUAL
23391: IFFALSE 23399
23393: LD_INT 7
23395: DOUBLE
23396: LESSEQUAL
23397: IFTRUE 23401
23399: GO 23408
23401: POP
// StreamSibBomb ; end ;
23402: CALL 19659 0 0
23406: GO 23409
23408: POP
// end ;
23409: PPOPN 3
23411: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23412: LD_EXP 51
23416: PUSH
23417: LD_EXP 101
23421: AND
23422: IFFALSE 23578
23424: GO 23426
23426: DISABLE
23427: LD_INT 0
23429: PPUSH
23430: PPUSH
23431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23432: LD_ADDR_VAR 0 2
23436: PUSH
23437: LD_INT 81
23439: PUSH
23440: LD_OWVAR 2
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 2
23451: PUSH
23452: LD_INT 21
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 21
23464: PUSH
23465: LD_INT 2
23467: PUSH
23468: EMPTY
23469: LIST
23470: LIST
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PPUSH
23481: CALL_OW 69
23485: ST_TO_ADDR
// if not tmp then
23486: LD_VAR 0 2
23490: NOT
23491: IFFALSE 23495
// exit ;
23493: GO 23578
// p := 0 ;
23495: LD_ADDR_VAR 0 3
23499: PUSH
23500: LD_INT 0
23502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23503: LD_INT 35
23505: PPUSH
23506: CALL_OW 67
// p := p + 1 ;
23510: LD_ADDR_VAR 0 3
23514: PUSH
23515: LD_VAR 0 3
23519: PUSH
23520: LD_INT 1
23522: PLUS
23523: ST_TO_ADDR
// for i in tmp do
23524: LD_ADDR_VAR 0 1
23528: PUSH
23529: LD_VAR 0 2
23533: PUSH
23534: FOR_IN
23535: IFFALSE 23566
// if GetLives ( i ) < 1000 then
23537: LD_VAR 0 1
23541: PPUSH
23542: CALL_OW 256
23546: PUSH
23547: LD_INT 1000
23549: LESS
23550: IFFALSE 23564
// SetLives ( i , 1000 ) ;
23552: LD_VAR 0 1
23556: PPUSH
23557: LD_INT 1000
23559: PPUSH
23560: CALL_OW 234
23564: GO 23534
23566: POP
23567: POP
// until p > 20 ;
23568: LD_VAR 0 3
23572: PUSH
23573: LD_INT 20
23575: GREATER
23576: IFFALSE 23503
// end ;
23578: PPOPN 3
23580: END
// every 0 0$1 trigger StreamModeActive and sTime do
23581: LD_EXP 51
23585: PUSH
23586: LD_EXP 102
23590: AND
23591: IFFALSE 23626
23593: GO 23595
23595: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23596: LD_INT 28
23598: PPUSH
23599: LD_OWVAR 2
23603: PPUSH
23604: LD_INT 2
23606: PPUSH
23607: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23611: LD_INT 30
23613: PPUSH
23614: LD_OWVAR 2
23618: PPUSH
23619: LD_INT 2
23621: PPUSH
23622: CALL_OW 322
// end ;
23626: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23627: LD_EXP 51
23631: PUSH
23632: LD_EXP 103
23636: AND
23637: IFFALSE 23758
23639: GO 23641
23641: DISABLE
23642: LD_INT 0
23644: PPUSH
23645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23646: LD_ADDR_VAR 0 2
23650: PUSH
23651: LD_INT 22
23653: PUSH
23654: LD_OWVAR 2
23658: PUSH
23659: EMPTY
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 21
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 3
23675: PUSH
23676: LD_INT 23
23678: PUSH
23679: LD_INT 0
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: LIST
23694: PPUSH
23695: CALL_OW 69
23699: ST_TO_ADDR
// if not tmp then
23700: LD_VAR 0 2
23704: NOT
23705: IFFALSE 23709
// exit ;
23707: GO 23758
// for i in tmp do
23709: LD_ADDR_VAR 0 1
23713: PUSH
23714: LD_VAR 0 2
23718: PUSH
23719: FOR_IN
23720: IFFALSE 23756
// begin if Crawls ( i ) then
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 318
23731: IFFALSE 23742
// ComWalk ( i ) ;
23733: LD_VAR 0 1
23737: PPUSH
23738: CALL_OW 138
// SetClass ( i , 2 ) ;
23742: LD_VAR 0 1
23746: PPUSH
23747: LD_INT 2
23749: PPUSH
23750: CALL_OW 336
// end ;
23754: GO 23719
23756: POP
23757: POP
// end ;
23758: PPOPN 2
23760: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23761: LD_EXP 51
23765: PUSH
23766: LD_EXP 104
23770: AND
23771: IFFALSE 24052
23773: GO 23775
23775: DISABLE
23776: LD_INT 0
23778: PPUSH
23779: PPUSH
23780: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23781: LD_OWVAR 2
23785: PPUSH
23786: LD_INT 9
23788: PPUSH
23789: LD_INT 1
23791: PPUSH
23792: LD_INT 1
23794: PPUSH
23795: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23799: LD_INT 9
23801: PPUSH
23802: LD_OWVAR 2
23806: PPUSH
23807: CALL_OW 343
// uc_side := 9 ;
23811: LD_ADDR_OWVAR 20
23815: PUSH
23816: LD_INT 9
23818: ST_TO_ADDR
// uc_nation := 2 ;
23819: LD_ADDR_OWVAR 21
23823: PUSH
23824: LD_INT 2
23826: ST_TO_ADDR
// hc_name := Dark Warrior ;
23827: LD_ADDR_OWVAR 26
23831: PUSH
23832: LD_STRING Dark Warrior
23834: ST_TO_ADDR
// hc_gallery :=  ;
23835: LD_ADDR_OWVAR 33
23839: PUSH
23840: LD_STRING 
23842: ST_TO_ADDR
// hc_noskilllimit := true ;
23843: LD_ADDR_OWVAR 76
23847: PUSH
23848: LD_INT 1
23850: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23851: LD_ADDR_OWVAR 31
23855: PUSH
23856: LD_INT 30
23858: PUSH
23859: LD_INT 30
23861: PUSH
23862: LD_INT 30
23864: PUSH
23865: LD_INT 30
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: ST_TO_ADDR
// un := CreateHuman ;
23874: LD_ADDR_VAR 0 3
23878: PUSH
23879: CALL_OW 44
23883: ST_TO_ADDR
// hc_noskilllimit := false ;
23884: LD_ADDR_OWVAR 76
23888: PUSH
23889: LD_INT 0
23891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23892: LD_VAR 0 3
23896: PPUSH
23897: LD_INT 1
23899: PPUSH
23900: CALL_OW 51
// p := 0 ;
23904: LD_ADDR_VAR 0 2
23908: PUSH
23909: LD_INT 0
23911: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23912: LD_INT 35
23914: PPUSH
23915: CALL_OW 67
// p := p + 1 ;
23919: LD_ADDR_VAR 0 2
23923: PUSH
23924: LD_VAR 0 2
23928: PUSH
23929: LD_INT 1
23931: PLUS
23932: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23933: LD_VAR 0 3
23937: PPUSH
23938: CALL_OW 256
23942: PUSH
23943: LD_INT 1000
23945: LESS
23946: IFFALSE 23960
// SetLives ( un , 1000 ) ;
23948: LD_VAR 0 3
23952: PPUSH
23953: LD_INT 1000
23955: PPUSH
23956: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23960: LD_VAR 0 3
23964: PPUSH
23965: LD_INT 81
23967: PUSH
23968: LD_OWVAR 2
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 91
23979: PUSH
23980: LD_VAR 0 3
23984: PUSH
23985: LD_INT 30
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL_OW 69
24001: PPUSH
24002: LD_VAR 0 3
24006: PPUSH
24007: CALL_OW 74
24011: PPUSH
24012: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
24016: LD_VAR 0 2
24020: PUSH
24021: LD_INT 60
24023: GREATER
24024: PUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: CALL_OW 301
24034: OR
24035: IFFALSE 23912
// if un then
24037: LD_VAR 0 3
24041: IFFALSE 24052
// RemoveUnit ( un ) ;
24043: LD_VAR 0 3
24047: PPUSH
24048: CALL_OW 64
// end ;
24052: PPOPN 3
24054: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24055: LD_INT 0
24057: PPUSH
// case cmd of 301 :
24058: LD_VAR 0 1
24062: PUSH
24063: LD_INT 301
24065: DOUBLE
24066: EQUAL
24067: IFTRUE 24071
24069: GO 24103
24071: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24072: LD_VAR 0 6
24076: PPUSH
24077: LD_VAR 0 7
24081: PPUSH
24082: LD_VAR 0 8
24086: PPUSH
24087: LD_VAR 0 4
24091: PPUSH
24092: LD_VAR 0 5
24096: PPUSH
24097: CALL 25304 0 5
24101: GO 24224
24103: LD_INT 302
24105: DOUBLE
24106: EQUAL
24107: IFTRUE 24111
24109: GO 24148
24111: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24112: LD_VAR 0 6
24116: PPUSH
24117: LD_VAR 0 7
24121: PPUSH
24122: LD_VAR 0 8
24126: PPUSH
24127: LD_VAR 0 9
24131: PPUSH
24132: LD_VAR 0 4
24136: PPUSH
24137: LD_VAR 0 5
24141: PPUSH
24142: CALL 25395 0 6
24146: GO 24224
24148: LD_INT 303
24150: DOUBLE
24151: EQUAL
24152: IFTRUE 24156
24154: GO 24193
24156: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24157: LD_VAR 0 6
24161: PPUSH
24162: LD_VAR 0 7
24166: PPUSH
24167: LD_VAR 0 8
24171: PPUSH
24172: LD_VAR 0 9
24176: PPUSH
24177: LD_VAR 0 4
24181: PPUSH
24182: LD_VAR 0 5
24186: PPUSH
24187: CALL 24229 0 6
24191: GO 24224
24193: LD_INT 304
24195: DOUBLE
24196: EQUAL
24197: IFTRUE 24201
24199: GO 24223
24201: POP
// hHackTeleport ( unit , x , y ) ; end ;
24202: LD_VAR 0 2
24206: PPUSH
24207: LD_VAR 0 4
24211: PPUSH
24212: LD_VAR 0 5
24216: PPUSH
24217: CALL 25988 0 3
24221: GO 24224
24223: POP
// end ;
24224: LD_VAR 0 12
24228: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24229: LD_INT 0
24231: PPUSH
24232: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24233: LD_VAR 0 1
24237: PUSH
24238: LD_INT 1
24240: LESS
24241: PUSH
24242: LD_VAR 0 1
24246: PUSH
24247: LD_INT 3
24249: GREATER
24250: OR
24251: PUSH
24252: LD_VAR 0 5
24256: PPUSH
24257: LD_VAR 0 6
24261: PPUSH
24262: CALL_OW 428
24266: OR
24267: IFFALSE 24271
// exit ;
24269: GO 24991
// uc_side := your_side ;
24271: LD_ADDR_OWVAR 20
24275: PUSH
24276: LD_OWVAR 2
24280: ST_TO_ADDR
// uc_nation := nation ;
24281: LD_ADDR_OWVAR 21
24285: PUSH
24286: LD_VAR 0 1
24290: ST_TO_ADDR
// bc_level = 1 ;
24291: LD_ADDR_OWVAR 43
24295: PUSH
24296: LD_INT 1
24298: ST_TO_ADDR
// case btype of 1 :
24299: LD_VAR 0 2
24303: PUSH
24304: LD_INT 1
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24323
24312: POP
// bc_type := b_depot ; 2 :
24313: LD_ADDR_OWVAR 42
24317: PUSH
24318: LD_INT 0
24320: ST_TO_ADDR
24321: GO 24935
24323: LD_INT 2
24325: DOUBLE
24326: EQUAL
24327: IFTRUE 24331
24329: GO 24342
24331: POP
// bc_type := b_warehouse ; 3 :
24332: LD_ADDR_OWVAR 42
24336: PUSH
24337: LD_INT 1
24339: ST_TO_ADDR
24340: GO 24935
24342: LD_INT 3
24344: DOUBLE
24345: EQUAL
24346: IFTRUE 24350
24348: GO 24361
24350: POP
// bc_type := b_lab ; 4 .. 9 :
24351: LD_ADDR_OWVAR 42
24355: PUSH
24356: LD_INT 6
24358: ST_TO_ADDR
24359: GO 24935
24361: LD_INT 4
24363: DOUBLE
24364: GREATEREQUAL
24365: IFFALSE 24373
24367: LD_INT 9
24369: DOUBLE
24370: LESSEQUAL
24371: IFTRUE 24375
24373: GO 24427
24375: POP
// begin bc_type := b_lab_half ;
24376: LD_ADDR_OWVAR 42
24380: PUSH
24381: LD_INT 7
24383: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24384: LD_ADDR_OWVAR 44
24388: PUSH
24389: LD_INT 10
24391: PUSH
24392: LD_INT 11
24394: PUSH
24395: LD_INT 12
24397: PUSH
24398: LD_INT 15
24400: PUSH
24401: LD_INT 14
24403: PUSH
24404: LD_INT 13
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_INT 3
24422: MINUS
24423: ARRAY
24424: ST_TO_ADDR
// end ; 10 .. 13 :
24425: GO 24935
24427: LD_INT 10
24429: DOUBLE
24430: GREATEREQUAL
24431: IFFALSE 24439
24433: LD_INT 13
24435: DOUBLE
24436: LESSEQUAL
24437: IFTRUE 24441
24439: GO 24518
24441: POP
// begin bc_type := b_lab_full ;
24442: LD_ADDR_OWVAR 42
24446: PUSH
24447: LD_INT 8
24449: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24450: LD_ADDR_OWVAR 44
24454: PUSH
24455: LD_INT 10
24457: PUSH
24458: LD_INT 12
24460: PUSH
24461: LD_INT 14
24463: PUSH
24464: LD_INT 13
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: PUSH
24473: LD_VAR 0 2
24477: PUSH
24478: LD_INT 9
24480: MINUS
24481: ARRAY
24482: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24483: LD_ADDR_OWVAR 45
24487: PUSH
24488: LD_INT 11
24490: PUSH
24491: LD_INT 15
24493: PUSH
24494: LD_INT 12
24496: PUSH
24497: LD_INT 15
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: PUSH
24506: LD_VAR 0 2
24510: PUSH
24511: LD_INT 9
24513: MINUS
24514: ARRAY
24515: ST_TO_ADDR
// end ; 14 :
24516: GO 24935
24518: LD_INT 14
24520: DOUBLE
24521: EQUAL
24522: IFTRUE 24526
24524: GO 24537
24526: POP
// bc_type := b_workshop ; 15 :
24527: LD_ADDR_OWVAR 42
24531: PUSH
24532: LD_INT 2
24534: ST_TO_ADDR
24535: GO 24935
24537: LD_INT 15
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24556
24545: POP
// bc_type := b_factory ; 16 :
24546: LD_ADDR_OWVAR 42
24550: PUSH
24551: LD_INT 3
24553: ST_TO_ADDR
24554: GO 24935
24556: LD_INT 16
24558: DOUBLE
24559: EQUAL
24560: IFTRUE 24564
24562: GO 24575
24564: POP
// bc_type := b_ext_gun ; 17 :
24565: LD_ADDR_OWVAR 42
24569: PUSH
24570: LD_INT 17
24572: ST_TO_ADDR
24573: GO 24935
24575: LD_INT 17
24577: DOUBLE
24578: EQUAL
24579: IFTRUE 24583
24581: GO 24611
24583: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24584: LD_ADDR_OWVAR 42
24588: PUSH
24589: LD_INT 19
24591: PUSH
24592: LD_INT 23
24594: PUSH
24595: LD_INT 19
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: LD_VAR 0 1
24607: ARRAY
24608: ST_TO_ADDR
24609: GO 24935
24611: LD_INT 18
24613: DOUBLE
24614: EQUAL
24615: IFTRUE 24619
24617: GO 24630
24619: POP
// bc_type := b_ext_radar ; 19 :
24620: LD_ADDR_OWVAR 42
24624: PUSH
24625: LD_INT 20
24627: ST_TO_ADDR
24628: GO 24935
24630: LD_INT 19
24632: DOUBLE
24633: EQUAL
24634: IFTRUE 24638
24636: GO 24649
24638: POP
// bc_type := b_ext_radio ; 20 :
24639: LD_ADDR_OWVAR 42
24643: PUSH
24644: LD_INT 22
24646: ST_TO_ADDR
24647: GO 24935
24649: LD_INT 20
24651: DOUBLE
24652: EQUAL
24653: IFTRUE 24657
24655: GO 24668
24657: POP
// bc_type := b_ext_siberium ; 21 :
24658: LD_ADDR_OWVAR 42
24662: PUSH
24663: LD_INT 21
24665: ST_TO_ADDR
24666: GO 24935
24668: LD_INT 21
24670: DOUBLE
24671: EQUAL
24672: IFTRUE 24676
24674: GO 24687
24676: POP
// bc_type := b_ext_computer ; 22 :
24677: LD_ADDR_OWVAR 42
24681: PUSH
24682: LD_INT 24
24684: ST_TO_ADDR
24685: GO 24935
24687: LD_INT 22
24689: DOUBLE
24690: EQUAL
24691: IFTRUE 24695
24693: GO 24706
24695: POP
// bc_type := b_ext_track ; 23 :
24696: LD_ADDR_OWVAR 42
24700: PUSH
24701: LD_INT 16
24703: ST_TO_ADDR
24704: GO 24935
24706: LD_INT 23
24708: DOUBLE
24709: EQUAL
24710: IFTRUE 24714
24712: GO 24725
24714: POP
// bc_type := b_ext_laser ; 24 :
24715: LD_ADDR_OWVAR 42
24719: PUSH
24720: LD_INT 25
24722: ST_TO_ADDR
24723: GO 24935
24725: LD_INT 24
24727: DOUBLE
24728: EQUAL
24729: IFTRUE 24733
24731: GO 24744
24733: POP
// bc_type := b_control_tower ; 25 :
24734: LD_ADDR_OWVAR 42
24738: PUSH
24739: LD_INT 36
24741: ST_TO_ADDR
24742: GO 24935
24744: LD_INT 25
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24763
24752: POP
// bc_type := b_breastwork ; 26 :
24753: LD_ADDR_OWVAR 42
24757: PUSH
24758: LD_INT 31
24760: ST_TO_ADDR
24761: GO 24935
24763: LD_INT 26
24765: DOUBLE
24766: EQUAL
24767: IFTRUE 24771
24769: GO 24782
24771: POP
// bc_type := b_bunker ; 27 :
24772: LD_ADDR_OWVAR 42
24776: PUSH
24777: LD_INT 32
24779: ST_TO_ADDR
24780: GO 24935
24782: LD_INT 27
24784: DOUBLE
24785: EQUAL
24786: IFTRUE 24790
24788: GO 24801
24790: POP
// bc_type := b_turret ; 28 :
24791: LD_ADDR_OWVAR 42
24795: PUSH
24796: LD_INT 33
24798: ST_TO_ADDR
24799: GO 24935
24801: LD_INT 28
24803: DOUBLE
24804: EQUAL
24805: IFTRUE 24809
24807: GO 24820
24809: POP
// bc_type := b_armoury ; 29 :
24810: LD_ADDR_OWVAR 42
24814: PUSH
24815: LD_INT 4
24817: ST_TO_ADDR
24818: GO 24935
24820: LD_INT 29
24822: DOUBLE
24823: EQUAL
24824: IFTRUE 24828
24826: GO 24839
24828: POP
// bc_type := b_barracks ; 30 :
24829: LD_ADDR_OWVAR 42
24833: PUSH
24834: LD_INT 5
24836: ST_TO_ADDR
24837: GO 24935
24839: LD_INT 30
24841: DOUBLE
24842: EQUAL
24843: IFTRUE 24847
24845: GO 24858
24847: POP
// bc_type := b_solar_power ; 31 :
24848: LD_ADDR_OWVAR 42
24852: PUSH
24853: LD_INT 27
24855: ST_TO_ADDR
24856: GO 24935
24858: LD_INT 31
24860: DOUBLE
24861: EQUAL
24862: IFTRUE 24866
24864: GO 24877
24866: POP
// bc_type := b_oil_power ; 32 :
24867: LD_ADDR_OWVAR 42
24871: PUSH
24872: LD_INT 26
24874: ST_TO_ADDR
24875: GO 24935
24877: LD_INT 32
24879: DOUBLE
24880: EQUAL
24881: IFTRUE 24885
24883: GO 24896
24885: POP
// bc_type := b_siberite_power ; 33 :
24886: LD_ADDR_OWVAR 42
24890: PUSH
24891: LD_INT 28
24893: ST_TO_ADDR
24894: GO 24935
24896: LD_INT 33
24898: DOUBLE
24899: EQUAL
24900: IFTRUE 24904
24902: GO 24915
24904: POP
// bc_type := b_oil_mine ; 34 :
24905: LD_ADDR_OWVAR 42
24909: PUSH
24910: LD_INT 29
24912: ST_TO_ADDR
24913: GO 24935
24915: LD_INT 34
24917: DOUBLE
24918: EQUAL
24919: IFTRUE 24923
24921: GO 24934
24923: POP
// bc_type := b_siberite_mine ; end ;
24924: LD_ADDR_OWVAR 42
24928: PUSH
24929: LD_INT 30
24931: ST_TO_ADDR
24932: GO 24935
24934: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24935: LD_ADDR_VAR 0 8
24939: PUSH
24940: LD_VAR 0 5
24944: PPUSH
24945: LD_VAR 0 6
24949: PPUSH
24950: LD_VAR 0 3
24954: PPUSH
24955: CALL_OW 47
24959: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24960: LD_OWVAR 42
24964: PUSH
24965: LD_INT 32
24967: PUSH
24968: LD_INT 33
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: IN
24975: IFFALSE 24991
// PlaceWeaponTurret ( b , weapon ) ;
24977: LD_VAR 0 8
24981: PPUSH
24982: LD_VAR 0 4
24986: PPUSH
24987: CALL_OW 431
// end ;
24991: LD_VAR 0 7
24995: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24996: LD_INT 0
24998: PPUSH
24999: PPUSH
25000: PPUSH
25001: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25002: LD_ADDR_VAR 0 4
25006: PUSH
25007: LD_INT 22
25009: PUSH
25010: LD_OWVAR 2
25014: PUSH
25015: EMPTY
25016: LIST
25017: LIST
25018: PUSH
25019: LD_INT 2
25021: PUSH
25022: LD_INT 30
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 30
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: LIST
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PPUSH
25051: CALL_OW 69
25055: ST_TO_ADDR
// if not tmp then
25056: LD_VAR 0 4
25060: NOT
25061: IFFALSE 25065
// exit ;
25063: GO 25124
// for i in tmp do
25065: LD_ADDR_VAR 0 2
25069: PUSH
25070: LD_VAR 0 4
25074: PUSH
25075: FOR_IN
25076: IFFALSE 25122
// for j = 1 to 3 do
25078: LD_ADDR_VAR 0 3
25082: PUSH
25083: DOUBLE
25084: LD_INT 1
25086: DEC
25087: ST_TO_ADDR
25088: LD_INT 3
25090: PUSH
25091: FOR_TO
25092: IFFALSE 25118
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25094: LD_VAR 0 2
25098: PPUSH
25099: CALL_OW 274
25103: PPUSH
25104: LD_VAR 0 3
25108: PPUSH
25109: LD_INT 99999
25111: PPUSH
25112: CALL_OW 277
25116: GO 25091
25118: POP
25119: POP
25120: GO 25075
25122: POP
25123: POP
// end ;
25124: LD_VAR 0 1
25128: RET
// export function hHackSetLevel10 ; var i , j ; begin
25129: LD_INT 0
25131: PPUSH
25132: PPUSH
25133: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25134: LD_ADDR_VAR 0 2
25138: PUSH
25139: LD_INT 21
25141: PUSH
25142: LD_INT 1
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: PPUSH
25149: CALL_OW 69
25153: PUSH
25154: FOR_IN
25155: IFFALSE 25207
// if IsSelected ( i ) then
25157: LD_VAR 0 2
25161: PPUSH
25162: CALL_OW 306
25166: IFFALSE 25205
// begin for j := 1 to 4 do
25168: LD_ADDR_VAR 0 3
25172: PUSH
25173: DOUBLE
25174: LD_INT 1
25176: DEC
25177: ST_TO_ADDR
25178: LD_INT 4
25180: PUSH
25181: FOR_TO
25182: IFFALSE 25203
// SetSkill ( i , j , 10 ) ;
25184: LD_VAR 0 2
25188: PPUSH
25189: LD_VAR 0 3
25193: PPUSH
25194: LD_INT 10
25196: PPUSH
25197: CALL_OW 237
25201: GO 25181
25203: POP
25204: POP
// end ;
25205: GO 25154
25207: POP
25208: POP
// end ;
25209: LD_VAR 0 1
25213: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25214: LD_INT 0
25216: PPUSH
25217: PPUSH
25218: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25219: LD_ADDR_VAR 0 2
25223: PUSH
25224: LD_INT 22
25226: PUSH
25227: LD_OWVAR 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 21
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PPUSH
25250: CALL_OW 69
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25297
// begin for j := 1 to 4 do
25258: LD_ADDR_VAR 0 3
25262: PUSH
25263: DOUBLE
25264: LD_INT 1
25266: DEC
25267: ST_TO_ADDR
25268: LD_INT 4
25270: PUSH
25271: FOR_TO
25272: IFFALSE 25293
// SetSkill ( i , j , 10 ) ;
25274: LD_VAR 0 2
25278: PPUSH
25279: LD_VAR 0 3
25283: PPUSH
25284: LD_INT 10
25286: PPUSH
25287: CALL_OW 237
25291: GO 25271
25293: POP
25294: POP
// end ;
25295: GO 25255
25297: POP
25298: POP
// end ;
25299: LD_VAR 0 1
25303: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25304: LD_INT 0
25306: PPUSH
// uc_side := your_side ;
25307: LD_ADDR_OWVAR 20
25311: PUSH
25312: LD_OWVAR 2
25316: ST_TO_ADDR
// uc_nation := nation ;
25317: LD_ADDR_OWVAR 21
25321: PUSH
25322: LD_VAR 0 1
25326: ST_TO_ADDR
// InitHc ;
25327: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25331: LD_INT 0
25333: PPUSH
25334: LD_VAR 0 2
25338: PPUSH
25339: LD_VAR 0 3
25343: PPUSH
25344: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25348: LD_VAR 0 4
25352: PPUSH
25353: LD_VAR 0 5
25357: PPUSH
25358: CALL_OW 428
25362: PUSH
25363: LD_INT 0
25365: EQUAL
25366: IFFALSE 25390
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25368: CALL_OW 44
25372: PPUSH
25373: LD_VAR 0 4
25377: PPUSH
25378: LD_VAR 0 5
25382: PPUSH
25383: LD_INT 1
25385: PPUSH
25386: CALL_OW 48
// end ;
25390: LD_VAR 0 6
25394: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25395: LD_INT 0
25397: PPUSH
25398: PPUSH
// uc_side := your_side ;
25399: LD_ADDR_OWVAR 20
25403: PUSH
25404: LD_OWVAR 2
25408: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25409: LD_VAR 0 1
25413: PUSH
25414: LD_INT 1
25416: PUSH
25417: LD_INT 2
25419: PUSH
25420: LD_INT 3
25422: PUSH
25423: LD_INT 4
25425: PUSH
25426: LD_INT 5
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: IN
25436: IFFALSE 25448
// uc_nation := nation_american else
25438: LD_ADDR_OWVAR 21
25442: PUSH
25443: LD_INT 1
25445: ST_TO_ADDR
25446: GO 25491
// if chassis in [ 11 , 12 , 13 , 14 ] then
25448: LD_VAR 0 1
25452: PUSH
25453: LD_INT 11
25455: PUSH
25456: LD_INT 12
25458: PUSH
25459: LD_INT 13
25461: PUSH
25462: LD_INT 14
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: IN
25471: IFFALSE 25483
// uc_nation := nation_arabian else
25473: LD_ADDR_OWVAR 21
25477: PUSH
25478: LD_INT 2
25480: ST_TO_ADDR
25481: GO 25491
// uc_nation := nation_russian ;
25483: LD_ADDR_OWVAR 21
25487: PUSH
25488: LD_INT 3
25490: ST_TO_ADDR
// vc_chassis := chassis ;
25491: LD_ADDR_OWVAR 37
25495: PUSH
25496: LD_VAR 0 1
25500: ST_TO_ADDR
// vc_engine := engine ;
25501: LD_ADDR_OWVAR 39
25505: PUSH
25506: LD_VAR 0 2
25510: ST_TO_ADDR
// vc_control := control ;
25511: LD_ADDR_OWVAR 38
25515: PUSH
25516: LD_VAR 0 3
25520: ST_TO_ADDR
// vc_weapon := weapon ;
25521: LD_ADDR_OWVAR 40
25525: PUSH
25526: LD_VAR 0 4
25530: ST_TO_ADDR
// un := CreateVehicle ;
25531: LD_ADDR_VAR 0 8
25535: PUSH
25536: CALL_OW 45
25540: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25541: LD_VAR 0 8
25545: PPUSH
25546: LD_INT 0
25548: PPUSH
25549: LD_INT 5
25551: PPUSH
25552: CALL_OW 12
25556: PPUSH
25557: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25561: LD_VAR 0 8
25565: PPUSH
25566: LD_VAR 0 5
25570: PPUSH
25571: LD_VAR 0 6
25575: PPUSH
25576: LD_INT 1
25578: PPUSH
25579: CALL_OW 48
// end ;
25583: LD_VAR 0 7
25587: RET
// export hInvincible ; every 1 do
25588: GO 25590
25590: DISABLE
// hInvincible := [ ] ;
25591: LD_ADDR_EXP 105
25595: PUSH
25596: EMPTY
25597: ST_TO_ADDR
25598: END
// every 10 do var i ;
25599: GO 25601
25601: DISABLE
25602: LD_INT 0
25604: PPUSH
// begin enable ;
25605: ENABLE
// if not hInvincible then
25606: LD_EXP 105
25610: NOT
25611: IFFALSE 25615
// exit ;
25613: GO 25659
// for i in hInvincible do
25615: LD_ADDR_VAR 0 1
25619: PUSH
25620: LD_EXP 105
25624: PUSH
25625: FOR_IN
25626: IFFALSE 25657
// if GetLives ( i ) < 1000 then
25628: LD_VAR 0 1
25632: PPUSH
25633: CALL_OW 256
25637: PUSH
25638: LD_INT 1000
25640: LESS
25641: IFFALSE 25655
// SetLives ( i , 1000 ) ;
25643: LD_VAR 0 1
25647: PPUSH
25648: LD_INT 1000
25650: PPUSH
25651: CALL_OW 234
25655: GO 25625
25657: POP
25658: POP
// end ;
25659: PPOPN 1
25661: END
// export function hHackInvincible ; var i ; begin
25662: LD_INT 0
25664: PPUSH
25665: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25666: LD_ADDR_VAR 0 2
25670: PUSH
25671: LD_INT 2
25673: PUSH
25674: LD_INT 21
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 21
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: LIST
25698: PPUSH
25699: CALL_OW 69
25703: PUSH
25704: FOR_IN
25705: IFFALSE 25766
// if IsSelected ( i ) then
25707: LD_VAR 0 2
25711: PPUSH
25712: CALL_OW 306
25716: IFFALSE 25764
// begin if i in hInvincible then
25718: LD_VAR 0 2
25722: PUSH
25723: LD_EXP 105
25727: IN
25728: IFFALSE 25748
// hInvincible := hInvincible diff i else
25730: LD_ADDR_EXP 105
25734: PUSH
25735: LD_EXP 105
25739: PUSH
25740: LD_VAR 0 2
25744: DIFF
25745: ST_TO_ADDR
25746: GO 25764
// hInvincible := hInvincible union i ;
25748: LD_ADDR_EXP 105
25752: PUSH
25753: LD_EXP 105
25757: PUSH
25758: LD_VAR 0 2
25762: UNION
25763: ST_TO_ADDR
// end ;
25764: GO 25704
25766: POP
25767: POP
// end ;
25768: LD_VAR 0 1
25772: RET
// export function hHackInvisible ; var i , j ; begin
25773: LD_INT 0
25775: PPUSH
25776: PPUSH
25777: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25778: LD_ADDR_VAR 0 2
25782: PUSH
25783: LD_INT 21
25785: PUSH
25786: LD_INT 1
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PPUSH
25793: CALL_OW 69
25797: PUSH
25798: FOR_IN
25799: IFFALSE 25823
// if IsSelected ( i ) then
25801: LD_VAR 0 2
25805: PPUSH
25806: CALL_OW 306
25810: IFFALSE 25821
// ComForceInvisible ( i ) ;
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL_OW 496
25821: GO 25798
25823: POP
25824: POP
// end ;
25825: LD_VAR 0 1
25829: RET
// export function hHackChangeYourSide ; begin
25830: LD_INT 0
25832: PPUSH
// if your_side = 8 then
25833: LD_OWVAR 2
25837: PUSH
25838: LD_INT 8
25840: EQUAL
25841: IFFALSE 25853
// your_side := 0 else
25843: LD_ADDR_OWVAR 2
25847: PUSH
25848: LD_INT 0
25850: ST_TO_ADDR
25851: GO 25867
// your_side := your_side + 1 ;
25853: LD_ADDR_OWVAR 2
25857: PUSH
25858: LD_OWVAR 2
25862: PUSH
25863: LD_INT 1
25865: PLUS
25866: ST_TO_ADDR
// end ;
25867: LD_VAR 0 1
25871: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25872: LD_INT 0
25874: PPUSH
25875: PPUSH
25876: PPUSH
// for i in all_units do
25877: LD_ADDR_VAR 0 2
25881: PUSH
25882: LD_OWVAR 3
25886: PUSH
25887: FOR_IN
25888: IFFALSE 25966
// if IsSelected ( i ) then
25890: LD_VAR 0 2
25894: PPUSH
25895: CALL_OW 306
25899: IFFALSE 25964
// begin j := GetSide ( i ) ;
25901: LD_ADDR_VAR 0 3
25905: PUSH
25906: LD_VAR 0 2
25910: PPUSH
25911: CALL_OW 255
25915: ST_TO_ADDR
// if j = 8 then
25916: LD_VAR 0 3
25920: PUSH
25921: LD_INT 8
25923: EQUAL
25924: IFFALSE 25936
// j := 0 else
25926: LD_ADDR_VAR 0 3
25930: PUSH
25931: LD_INT 0
25933: ST_TO_ADDR
25934: GO 25950
// j := j + 1 ;
25936: LD_ADDR_VAR 0 3
25940: PUSH
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 1
25948: PLUS
25949: ST_TO_ADDR
// SetSide ( i , j ) ;
25950: LD_VAR 0 2
25954: PPUSH
25955: LD_VAR 0 3
25959: PPUSH
25960: CALL_OW 235
// end ;
25964: GO 25887
25966: POP
25967: POP
// end ;
25968: LD_VAR 0 1
25972: RET
// export function hHackFog ; begin
25973: LD_INT 0
25975: PPUSH
// FogOff ( true ) ;
25976: LD_INT 1
25978: PPUSH
25979: CALL_OW 344
// end ;
25983: LD_VAR 0 1
25987: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25988: LD_INT 0
25990: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25991: LD_VAR 0 1
25995: PPUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: LD_VAR 0 3
26005: PPUSH
26006: LD_INT 1
26008: PPUSH
26009: LD_INT 1
26011: PPUSH
26012: CALL_OW 483
// CenterOnXY ( x , y ) ;
26016: LD_VAR 0 2
26020: PPUSH
26021: LD_VAR 0 3
26025: PPUSH
26026: CALL_OW 84
// end ; end_of_file
26030: LD_VAR 0 4
26034: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26035: LD_INT 0
26037: PPUSH
26038: PPUSH
26039: PPUSH
26040: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 264
26050: PUSH
26051: LD_EXP 36
26055: EQUAL
26056: IFFALSE 26128
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26058: LD_INT 68
26060: PPUSH
26061: LD_VAR 0 1
26065: PPUSH
26066: CALL_OW 255
26070: PPUSH
26071: CALL_OW 321
26075: PUSH
26076: LD_INT 2
26078: EQUAL
26079: IFFALSE 26091
// eff := 70 else
26081: LD_ADDR_VAR 0 4
26085: PUSH
26086: LD_INT 70
26088: ST_TO_ADDR
26089: GO 26099
// eff := 30 ;
26091: LD_ADDR_VAR 0 4
26095: PUSH
26096: LD_INT 30
26098: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26099: LD_VAR 0 1
26103: PPUSH
26104: CALL_OW 250
26108: PPUSH
26109: LD_VAR 0 1
26113: PPUSH
26114: CALL_OW 251
26118: PPUSH
26119: LD_VAR 0 4
26123: PPUSH
26124: CALL_OW 495
// end ; end ;
26128: LD_VAR 0 2
26132: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26133: LD_INT 0
26135: PPUSH
// end ;
26136: LD_VAR 0 4
26140: RET
// export function SOS_Command ( cmd ) ; begin
26141: LD_INT 0
26143: PPUSH
// end ;
26144: LD_VAR 0 2
26148: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26149: LD_INT 0
26151: PPUSH
// if cmd = 121 then
26152: LD_VAR 0 1
26156: PUSH
26157: LD_INT 121
26159: EQUAL
26160: IFFALSE 26162
// end ;
26162: LD_VAR 0 6
26166: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26167: LD_INT 0
26169: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26170: LD_VAR 0 1
26174: PUSH
26175: LD_INT 250
26177: EQUAL
26178: PUSH
26179: LD_VAR 0 2
26183: PPUSH
26184: CALL_OW 264
26188: PUSH
26189: LD_EXP 39
26193: EQUAL
26194: AND
26195: IFFALSE 26216
// MinerPlaceMine ( unit , x , y ) ;
26197: LD_VAR 0 2
26201: PPUSH
26202: LD_VAR 0 4
26206: PPUSH
26207: LD_VAR 0 5
26211: PPUSH
26212: CALL 28565 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26216: LD_VAR 0 1
26220: PUSH
26221: LD_INT 251
26223: EQUAL
26224: PUSH
26225: LD_VAR 0 2
26229: PPUSH
26230: CALL_OW 264
26234: PUSH
26235: LD_EXP 39
26239: EQUAL
26240: AND
26241: IFFALSE 26262
// MinerDetonateMine ( unit , x , y ) ;
26243: LD_VAR 0 2
26247: PPUSH
26248: LD_VAR 0 4
26252: PPUSH
26253: LD_VAR 0 5
26257: PPUSH
26258: CALL 28842 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26262: LD_VAR 0 1
26266: PUSH
26267: LD_INT 252
26269: EQUAL
26270: PUSH
26271: LD_VAR 0 2
26275: PPUSH
26276: CALL_OW 264
26280: PUSH
26281: LD_EXP 39
26285: EQUAL
26286: AND
26287: IFFALSE 26308
// MinerCreateMinefield ( unit , x , y ) ;
26289: LD_VAR 0 2
26293: PPUSH
26294: LD_VAR 0 4
26298: PPUSH
26299: LD_VAR 0 5
26303: PPUSH
26304: CALL 29259 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26308: LD_VAR 0 1
26312: PUSH
26313: LD_INT 253
26315: EQUAL
26316: PUSH
26317: LD_VAR 0 2
26321: PPUSH
26322: CALL_OW 257
26326: PUSH
26327: LD_INT 5
26329: EQUAL
26330: AND
26331: IFFALSE 26352
// ComBinocular ( unit , x , y ) ;
26333: LD_VAR 0 2
26337: PPUSH
26338: LD_VAR 0 4
26342: PPUSH
26343: LD_VAR 0 5
26347: PPUSH
26348: CALL 29630 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26352: LD_VAR 0 1
26356: PUSH
26357: LD_INT 254
26359: EQUAL
26360: PUSH
26361: LD_VAR 0 2
26365: PPUSH
26366: CALL_OW 264
26370: PUSH
26371: LD_EXP 34
26375: EQUAL
26376: AND
26377: PUSH
26378: LD_VAR 0 3
26382: PPUSH
26383: CALL_OW 263
26387: PUSH
26388: LD_INT 3
26390: EQUAL
26391: AND
26392: IFFALSE 26408
// HackDestroyVehicle ( unit , selectedUnit ) ;
26394: LD_VAR 0 2
26398: PPUSH
26399: LD_VAR 0 3
26403: PPUSH
26404: CALL 27925 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26408: LD_VAR 0 1
26412: PUSH
26413: LD_INT 255
26415: EQUAL
26416: PUSH
26417: LD_VAR 0 2
26421: PPUSH
26422: CALL_OW 264
26426: PUSH
26427: LD_INT 14
26429: PUSH
26430: LD_INT 53
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: IN
26437: AND
26438: PUSH
26439: LD_VAR 0 4
26443: PPUSH
26444: LD_VAR 0 5
26448: PPUSH
26449: CALL_OW 488
26453: AND
26454: IFFALSE 26478
// CutTreeXYR ( unit , x , y , 12 ) ;
26456: LD_VAR 0 2
26460: PPUSH
26461: LD_VAR 0 4
26465: PPUSH
26466: LD_VAR 0 5
26470: PPUSH
26471: LD_INT 12
26473: PPUSH
26474: CALL 26491 0 4
// end ;
26478: LD_VAR 0 6
26482: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26483: LD_INT 0
26485: PPUSH
// end ;
26486: LD_VAR 0 4
26490: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26491: LD_INT 0
26493: PPUSH
26494: PPUSH
26495: PPUSH
26496: PPUSH
26497: PPUSH
26498: PPUSH
26499: PPUSH
26500: PPUSH
26501: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26502: LD_VAR 0 1
26506: NOT
26507: PUSH
26508: LD_VAR 0 2
26512: PPUSH
26513: LD_VAR 0 3
26517: PPUSH
26518: CALL_OW 488
26522: NOT
26523: OR
26524: PUSH
26525: LD_VAR 0 4
26529: NOT
26530: OR
26531: IFFALSE 26535
// exit ;
26533: GO 26875
// list := [ ] ;
26535: LD_ADDR_VAR 0 13
26539: PUSH
26540: EMPTY
26541: ST_TO_ADDR
// if x - r < 0 then
26542: LD_VAR 0 2
26546: PUSH
26547: LD_VAR 0 4
26551: MINUS
26552: PUSH
26553: LD_INT 0
26555: LESS
26556: IFFALSE 26568
// min_x := 0 else
26558: LD_ADDR_VAR 0 7
26562: PUSH
26563: LD_INT 0
26565: ST_TO_ADDR
26566: GO 26584
// min_x := x - r ;
26568: LD_ADDR_VAR 0 7
26572: PUSH
26573: LD_VAR 0 2
26577: PUSH
26578: LD_VAR 0 4
26582: MINUS
26583: ST_TO_ADDR
// if y - r < 0 then
26584: LD_VAR 0 3
26588: PUSH
26589: LD_VAR 0 4
26593: MINUS
26594: PUSH
26595: LD_INT 0
26597: LESS
26598: IFFALSE 26610
// min_y := 0 else
26600: LD_ADDR_VAR 0 8
26604: PUSH
26605: LD_INT 0
26607: ST_TO_ADDR
26608: GO 26626
// min_y := y - r ;
26610: LD_ADDR_VAR 0 8
26614: PUSH
26615: LD_VAR 0 3
26619: PUSH
26620: LD_VAR 0 4
26624: MINUS
26625: ST_TO_ADDR
// max_x := x + r ;
26626: LD_ADDR_VAR 0 9
26630: PUSH
26631: LD_VAR 0 2
26635: PUSH
26636: LD_VAR 0 4
26640: PLUS
26641: ST_TO_ADDR
// max_y := y + r ;
26642: LD_ADDR_VAR 0 10
26646: PUSH
26647: LD_VAR 0 3
26651: PUSH
26652: LD_VAR 0 4
26656: PLUS
26657: ST_TO_ADDR
// for _x = min_x to max_x do
26658: LD_ADDR_VAR 0 11
26662: PUSH
26663: DOUBLE
26664: LD_VAR 0 7
26668: DEC
26669: ST_TO_ADDR
26670: LD_VAR 0 9
26674: PUSH
26675: FOR_TO
26676: IFFALSE 26793
// for _y = min_y to max_y do
26678: LD_ADDR_VAR 0 12
26682: PUSH
26683: DOUBLE
26684: LD_VAR 0 8
26688: DEC
26689: ST_TO_ADDR
26690: LD_VAR 0 10
26694: PUSH
26695: FOR_TO
26696: IFFALSE 26789
// begin if not ValidHex ( _x , _y ) then
26698: LD_VAR 0 11
26702: PPUSH
26703: LD_VAR 0 12
26707: PPUSH
26708: CALL_OW 488
26712: NOT
26713: IFFALSE 26717
// continue ;
26715: GO 26695
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26717: LD_VAR 0 11
26721: PPUSH
26722: LD_VAR 0 12
26726: PPUSH
26727: CALL_OW 351
26731: PUSH
26732: LD_VAR 0 11
26736: PPUSH
26737: LD_VAR 0 12
26741: PPUSH
26742: CALL_OW 554
26746: AND
26747: IFFALSE 26787
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26749: LD_ADDR_VAR 0 13
26753: PUSH
26754: LD_VAR 0 13
26758: PPUSH
26759: LD_VAR 0 13
26763: PUSH
26764: LD_INT 1
26766: PLUS
26767: PPUSH
26768: LD_VAR 0 11
26772: PUSH
26773: LD_VAR 0 12
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PPUSH
26782: CALL_OW 2
26786: ST_TO_ADDR
// end ;
26787: GO 26695
26789: POP
26790: POP
26791: GO 26675
26793: POP
26794: POP
// if not list then
26795: LD_VAR 0 13
26799: NOT
26800: IFFALSE 26804
// exit ;
26802: GO 26875
// for i in list do
26804: LD_ADDR_VAR 0 6
26808: PUSH
26809: LD_VAR 0 13
26813: PUSH
26814: FOR_IN
26815: IFFALSE 26873
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: LD_STRING M
26824: PUSH
26825: LD_VAR 0 6
26829: PUSH
26830: LD_INT 1
26832: ARRAY
26833: PUSH
26834: LD_VAR 0 6
26838: PUSH
26839: LD_INT 2
26841: ARRAY
26842: PUSH
26843: LD_INT 0
26845: PUSH
26846: LD_INT 0
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: LD_INT 0
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: PUSH
26864: EMPTY
26865: LIST
26866: PPUSH
26867: CALL_OW 447
26871: GO 26814
26873: POP
26874: POP
// end ;
26875: LD_VAR 0 5
26879: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26880: LD_EXP 108
26884: NOT
26885: IFFALSE 26935
26887: GO 26889
26889: DISABLE
// begin initHack := true ;
26890: LD_ADDR_EXP 108
26894: PUSH
26895: LD_INT 1
26897: ST_TO_ADDR
// hackTanks := [ ] ;
26898: LD_ADDR_EXP 109
26902: PUSH
26903: EMPTY
26904: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26905: LD_ADDR_EXP 110
26909: PUSH
26910: EMPTY
26911: ST_TO_ADDR
// hackLimit := 3 ;
26912: LD_ADDR_EXP 111
26916: PUSH
26917: LD_INT 3
26919: ST_TO_ADDR
// hackDist := 12 ;
26920: LD_ADDR_EXP 112
26924: PUSH
26925: LD_INT 12
26927: ST_TO_ADDR
// hackCounter := [ ] ;
26928: LD_ADDR_EXP 113
26932: PUSH
26933: EMPTY
26934: ST_TO_ADDR
// end ;
26935: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26936: LD_EXP 108
26940: PUSH
26941: LD_INT 34
26943: PUSH
26944: LD_EXP 34
26948: PUSH
26949: EMPTY
26950: LIST
26951: LIST
26952: PPUSH
26953: CALL_OW 69
26957: AND
26958: IFFALSE 27213
26960: GO 26962
26962: DISABLE
26963: LD_INT 0
26965: PPUSH
26966: PPUSH
// begin enable ;
26967: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26968: LD_ADDR_VAR 0 1
26972: PUSH
26973: LD_INT 34
26975: PUSH
26976: LD_EXP 34
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: PPUSH
26985: CALL_OW 69
26989: PUSH
26990: FOR_IN
26991: IFFALSE 27211
// begin if not i in hackTanks then
26993: LD_VAR 0 1
26997: PUSH
26998: LD_EXP 109
27002: IN
27003: NOT
27004: IFFALSE 27087
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27006: LD_ADDR_EXP 109
27010: PUSH
27011: LD_EXP 109
27015: PPUSH
27016: LD_EXP 109
27020: PUSH
27021: LD_INT 1
27023: PLUS
27024: PPUSH
27025: LD_VAR 0 1
27029: PPUSH
27030: CALL_OW 1
27034: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27035: LD_ADDR_EXP 110
27039: PUSH
27040: LD_EXP 110
27044: PPUSH
27045: LD_EXP 110
27049: PUSH
27050: LD_INT 1
27052: PLUS
27053: PPUSH
27054: EMPTY
27055: PPUSH
27056: CALL_OW 1
27060: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27061: LD_ADDR_EXP 113
27065: PUSH
27066: LD_EXP 113
27070: PPUSH
27071: LD_EXP 113
27075: PUSH
27076: LD_INT 1
27078: PLUS
27079: PPUSH
27080: EMPTY
27081: PPUSH
27082: CALL_OW 1
27086: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27087: LD_VAR 0 1
27091: PPUSH
27092: CALL_OW 302
27096: NOT
27097: IFFALSE 27110
// begin HackUnlinkAll ( i ) ;
27099: LD_VAR 0 1
27103: PPUSH
27104: CALL 27216 0 1
// continue ;
27108: GO 26990
// end ; HackCheckCapturedStatus ( i ) ;
27110: LD_VAR 0 1
27114: PPUSH
27115: CALL 27659 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27119: LD_ADDR_VAR 0 2
27123: PUSH
27124: LD_INT 81
27126: PUSH
27127: LD_VAR 0 1
27131: PPUSH
27132: CALL_OW 255
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 33
27143: PUSH
27144: LD_INT 3
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 91
27153: PUSH
27154: LD_VAR 0 1
27158: PUSH
27159: LD_EXP 112
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 50
27171: PUSH
27172: EMPTY
27173: LIST
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: PPUSH
27181: CALL_OW 69
27185: ST_TO_ADDR
// if not tmp then
27186: LD_VAR 0 2
27190: NOT
27191: IFFALSE 27195
// continue ;
27193: GO 26990
// HackLink ( i , tmp ) ;
27195: LD_VAR 0 1
27199: PPUSH
27200: LD_VAR 0 2
27204: PPUSH
27205: CALL 27352 0 2
// end ;
27209: GO 26990
27211: POP
27212: POP
// end ;
27213: PPOPN 2
27215: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27216: LD_INT 0
27218: PPUSH
27219: PPUSH
27220: PPUSH
// if not hack in hackTanks then
27221: LD_VAR 0 1
27225: PUSH
27226: LD_EXP 109
27230: IN
27231: NOT
27232: IFFALSE 27236
// exit ;
27234: GO 27347
// index := GetElementIndex ( hackTanks , hack ) ;
27236: LD_ADDR_VAR 0 4
27240: PUSH
27241: LD_EXP 109
27245: PPUSH
27246: LD_VAR 0 1
27250: PPUSH
27251: CALL 34821 0 2
27255: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27256: LD_EXP 110
27260: PUSH
27261: LD_VAR 0 4
27265: ARRAY
27266: IFFALSE 27347
// begin for i in hackTanksCaptured [ index ] do
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: LD_EXP 110
27277: PUSH
27278: LD_VAR 0 4
27282: ARRAY
27283: PUSH
27284: FOR_IN
27285: IFFALSE 27311
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27287: LD_VAR 0 3
27291: PUSH
27292: LD_INT 1
27294: ARRAY
27295: PPUSH
27296: LD_VAR 0 3
27300: PUSH
27301: LD_INT 2
27303: ARRAY
27304: PPUSH
27305: CALL_OW 235
27309: GO 27284
27311: POP
27312: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27313: LD_ADDR_EXP 110
27317: PUSH
27318: LD_EXP 110
27322: PPUSH
27323: LD_VAR 0 4
27327: PPUSH
27328: EMPTY
27329: PPUSH
27330: CALL_OW 1
27334: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27335: LD_VAR 0 1
27339: PPUSH
27340: LD_INT 0
27342: PPUSH
27343: CALL_OW 505
// end ; end ;
27347: LD_VAR 0 2
27351: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27352: LD_INT 0
27354: PPUSH
27355: PPUSH
27356: PPUSH
// if not hack in hackTanks or not vehicles then
27357: LD_VAR 0 1
27361: PUSH
27362: LD_EXP 109
27366: IN
27367: NOT
27368: PUSH
27369: LD_VAR 0 2
27373: NOT
27374: OR
27375: IFFALSE 27379
// exit ;
27377: GO 27654
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27379: LD_ADDR_VAR 0 2
27383: PUSH
27384: LD_VAR 0 1
27388: PPUSH
27389: LD_VAR 0 2
27393: PPUSH
27394: LD_INT 1
27396: PPUSH
27397: LD_INT 1
27399: PPUSH
27400: CALL 35471 0 4
27404: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27405: LD_ADDR_VAR 0 5
27409: PUSH
27410: LD_EXP 109
27414: PPUSH
27415: LD_VAR 0 1
27419: PPUSH
27420: CALL 34821 0 2
27424: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27425: LD_EXP 110
27429: PUSH
27430: LD_VAR 0 5
27434: ARRAY
27435: PUSH
27436: LD_EXP 111
27440: LESS
27441: IFFALSE 27630
// begin for i := 1 to vehicles do
27443: LD_ADDR_VAR 0 4
27447: PUSH
27448: DOUBLE
27449: LD_INT 1
27451: DEC
27452: ST_TO_ADDR
27453: LD_VAR 0 2
27457: PUSH
27458: FOR_TO
27459: IFFALSE 27628
// begin if hackTanksCaptured [ index ] = hackLimit then
27461: LD_EXP 110
27465: PUSH
27466: LD_VAR 0 5
27470: ARRAY
27471: PUSH
27472: LD_EXP 111
27476: EQUAL
27477: IFFALSE 27481
// break ;
27479: GO 27628
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27481: LD_ADDR_EXP 113
27485: PUSH
27486: LD_EXP 113
27490: PPUSH
27491: LD_VAR 0 5
27495: PPUSH
27496: LD_EXP 113
27500: PUSH
27501: LD_VAR 0 5
27505: ARRAY
27506: PUSH
27507: LD_INT 1
27509: PLUS
27510: PPUSH
27511: CALL_OW 1
27515: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27516: LD_ADDR_EXP 110
27520: PUSH
27521: LD_EXP 110
27525: PPUSH
27526: LD_VAR 0 5
27530: PUSH
27531: LD_EXP 110
27535: PUSH
27536: LD_VAR 0 5
27540: ARRAY
27541: PUSH
27542: LD_INT 1
27544: PLUS
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PPUSH
27550: LD_VAR 0 2
27554: PUSH
27555: LD_VAR 0 4
27559: ARRAY
27560: PUSH
27561: LD_VAR 0 2
27565: PUSH
27566: LD_VAR 0 4
27570: ARRAY
27571: PPUSH
27572: CALL_OW 255
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PPUSH
27581: CALL 35036 0 3
27585: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27586: LD_VAR 0 2
27590: PUSH
27591: LD_VAR 0 4
27595: ARRAY
27596: PPUSH
27597: LD_VAR 0 1
27601: PPUSH
27602: CALL_OW 255
27606: PPUSH
27607: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27611: LD_VAR 0 2
27615: PUSH
27616: LD_VAR 0 4
27620: ARRAY
27621: PPUSH
27622: CALL_OW 141
// end ;
27626: GO 27458
27628: POP
27629: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27630: LD_VAR 0 1
27634: PPUSH
27635: LD_EXP 110
27639: PUSH
27640: LD_VAR 0 5
27644: ARRAY
27645: PUSH
27646: LD_INT 0
27648: PLUS
27649: PPUSH
27650: CALL_OW 505
// end ;
27654: LD_VAR 0 3
27658: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27659: LD_INT 0
27661: PPUSH
27662: PPUSH
27663: PPUSH
27664: PPUSH
// if not hack in hackTanks then
27665: LD_VAR 0 1
27669: PUSH
27670: LD_EXP 109
27674: IN
27675: NOT
27676: IFFALSE 27680
// exit ;
27678: GO 27920
// index := GetElementIndex ( hackTanks , hack ) ;
27680: LD_ADDR_VAR 0 4
27684: PUSH
27685: LD_EXP 109
27689: PPUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL 34821 0 2
27699: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27700: LD_ADDR_VAR 0 3
27704: PUSH
27705: DOUBLE
27706: LD_EXP 110
27710: PUSH
27711: LD_VAR 0 4
27715: ARRAY
27716: INC
27717: ST_TO_ADDR
27718: LD_INT 1
27720: PUSH
27721: FOR_DOWNTO
27722: IFFALSE 27894
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27724: LD_ADDR_VAR 0 5
27728: PUSH
27729: LD_EXP 110
27733: PUSH
27734: LD_VAR 0 4
27738: ARRAY
27739: PUSH
27740: LD_VAR 0 3
27744: ARRAY
27745: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27746: LD_VAR 0 5
27750: PUSH
27751: LD_INT 1
27753: ARRAY
27754: PPUSH
27755: CALL_OW 302
27759: NOT
27760: PUSH
27761: LD_VAR 0 5
27765: PUSH
27766: LD_INT 1
27768: ARRAY
27769: PPUSH
27770: CALL_OW 255
27774: PUSH
27775: LD_VAR 0 1
27779: PPUSH
27780: CALL_OW 255
27784: NONEQUAL
27785: OR
27786: IFFALSE 27892
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27788: LD_VAR 0 5
27792: PUSH
27793: LD_INT 1
27795: ARRAY
27796: PPUSH
27797: CALL_OW 305
27801: PUSH
27802: LD_VAR 0 5
27806: PUSH
27807: LD_INT 1
27809: ARRAY
27810: PPUSH
27811: CALL_OW 255
27815: PUSH
27816: LD_VAR 0 1
27820: PPUSH
27821: CALL_OW 255
27825: EQUAL
27826: AND
27827: IFFALSE 27851
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27829: LD_VAR 0 5
27833: PUSH
27834: LD_INT 1
27836: ARRAY
27837: PPUSH
27838: LD_VAR 0 5
27842: PUSH
27843: LD_INT 2
27845: ARRAY
27846: PPUSH
27847: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27851: LD_ADDR_EXP 110
27855: PUSH
27856: LD_EXP 110
27860: PPUSH
27861: LD_VAR 0 4
27865: PPUSH
27866: LD_EXP 110
27870: PUSH
27871: LD_VAR 0 4
27875: ARRAY
27876: PPUSH
27877: LD_VAR 0 3
27881: PPUSH
27882: CALL_OW 3
27886: PPUSH
27887: CALL_OW 1
27891: ST_TO_ADDR
// end ; end ;
27892: GO 27721
27894: POP
27895: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27896: LD_VAR 0 1
27900: PPUSH
27901: LD_EXP 110
27905: PUSH
27906: LD_VAR 0 4
27910: ARRAY
27911: PUSH
27912: LD_INT 0
27914: PLUS
27915: PPUSH
27916: CALL_OW 505
// end ;
27920: LD_VAR 0 2
27924: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
27929: PPUSH
27930: PPUSH
// if not hack in hackTanks then
27931: LD_VAR 0 1
27935: PUSH
27936: LD_EXP 109
27940: IN
27941: NOT
27942: IFFALSE 27946
// exit ;
27944: GO 28031
// index := GetElementIndex ( hackTanks , hack ) ;
27946: LD_ADDR_VAR 0 5
27950: PUSH
27951: LD_EXP 109
27955: PPUSH
27956: LD_VAR 0 1
27960: PPUSH
27961: CALL 34821 0 2
27965: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27966: LD_ADDR_VAR 0 4
27970: PUSH
27971: DOUBLE
27972: LD_INT 1
27974: DEC
27975: ST_TO_ADDR
27976: LD_EXP 110
27980: PUSH
27981: LD_VAR 0 5
27985: ARRAY
27986: PUSH
27987: FOR_TO
27988: IFFALSE 28029
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27990: LD_EXP 110
27994: PUSH
27995: LD_VAR 0 5
27999: ARRAY
28000: PUSH
28001: LD_VAR 0 4
28005: ARRAY
28006: PUSH
28007: LD_INT 1
28009: ARRAY
28010: PUSH
28011: LD_VAR 0 2
28015: EQUAL
28016: IFFALSE 28027
// KillUnit ( vehicle ) ;
28018: LD_VAR 0 2
28022: PPUSH
28023: CALL_OW 66
28027: GO 27987
28029: POP
28030: POP
// end ;
28031: LD_VAR 0 3
28035: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28036: LD_EXP 114
28040: NOT
28041: IFFALSE 28076
28043: GO 28045
28045: DISABLE
// begin initMiner := true ;
28046: LD_ADDR_EXP 114
28050: PUSH
28051: LD_INT 1
28053: ST_TO_ADDR
// minersList := [ ] ;
28054: LD_ADDR_EXP 115
28058: PUSH
28059: EMPTY
28060: ST_TO_ADDR
// minerMinesList := [ ] ;
28061: LD_ADDR_EXP 116
28065: PUSH
28066: EMPTY
28067: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28068: LD_ADDR_EXP 117
28072: PUSH
28073: LD_INT 5
28075: ST_TO_ADDR
// end ;
28076: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28077: LD_EXP 114
28081: PUSH
28082: LD_INT 34
28084: PUSH
28085: LD_EXP 39
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PPUSH
28094: CALL_OW 69
28098: AND
28099: IFFALSE 28562
28101: GO 28103
28103: DISABLE
28104: LD_INT 0
28106: PPUSH
28107: PPUSH
28108: PPUSH
28109: PPUSH
// begin enable ;
28110: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28111: LD_ADDR_VAR 0 1
28115: PUSH
28116: LD_INT 34
28118: PUSH
28119: LD_EXP 39
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PPUSH
28128: CALL_OW 69
28132: PUSH
28133: FOR_IN
28134: IFFALSE 28206
// begin if not i in minersList then
28136: LD_VAR 0 1
28140: PUSH
28141: LD_EXP 115
28145: IN
28146: NOT
28147: IFFALSE 28204
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28149: LD_ADDR_EXP 115
28153: PUSH
28154: LD_EXP 115
28158: PPUSH
28159: LD_EXP 115
28163: PUSH
28164: LD_INT 1
28166: PLUS
28167: PPUSH
28168: LD_VAR 0 1
28172: PPUSH
28173: CALL_OW 1
28177: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28178: LD_ADDR_EXP 116
28182: PUSH
28183: LD_EXP 116
28187: PPUSH
28188: LD_EXP 116
28192: PUSH
28193: LD_INT 1
28195: PLUS
28196: PPUSH
28197: EMPTY
28198: PPUSH
28199: CALL_OW 1
28203: ST_TO_ADDR
// end end ;
28204: GO 28133
28206: POP
28207: POP
// for i := minerMinesList downto 1 do
28208: LD_ADDR_VAR 0 1
28212: PUSH
28213: DOUBLE
28214: LD_EXP 116
28218: INC
28219: ST_TO_ADDR
28220: LD_INT 1
28222: PUSH
28223: FOR_DOWNTO
28224: IFFALSE 28560
// begin if IsLive ( minersList [ i ] ) then
28226: LD_EXP 115
28230: PUSH
28231: LD_VAR 0 1
28235: ARRAY
28236: PPUSH
28237: CALL_OW 300
28241: IFFALSE 28269
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28243: LD_EXP 115
28247: PUSH
28248: LD_VAR 0 1
28252: ARRAY
28253: PPUSH
28254: LD_EXP 116
28258: PUSH
28259: LD_VAR 0 1
28263: ARRAY
28264: PPUSH
28265: CALL_OW 505
// if not minerMinesList [ i ] then
28269: LD_EXP 116
28273: PUSH
28274: LD_VAR 0 1
28278: ARRAY
28279: NOT
28280: IFFALSE 28284
// continue ;
28282: GO 28223
// for j := minerMinesList [ i ] downto 1 do
28284: LD_ADDR_VAR 0 2
28288: PUSH
28289: DOUBLE
28290: LD_EXP 116
28294: PUSH
28295: LD_VAR 0 1
28299: ARRAY
28300: INC
28301: ST_TO_ADDR
28302: LD_INT 1
28304: PUSH
28305: FOR_DOWNTO
28306: IFFALSE 28556
// begin side := GetSide ( minersList [ i ] ) ;
28308: LD_ADDR_VAR 0 3
28312: PUSH
28313: LD_EXP 115
28317: PUSH
28318: LD_VAR 0 1
28322: ARRAY
28323: PPUSH
28324: CALL_OW 255
28328: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28329: LD_ADDR_VAR 0 4
28333: PUSH
28334: LD_EXP 116
28338: PUSH
28339: LD_VAR 0 1
28343: ARRAY
28344: PUSH
28345: LD_VAR 0 2
28349: ARRAY
28350: PUSH
28351: LD_INT 1
28353: ARRAY
28354: PPUSH
28355: LD_EXP 116
28359: PUSH
28360: LD_VAR 0 1
28364: ARRAY
28365: PUSH
28366: LD_VAR 0 2
28370: ARRAY
28371: PUSH
28372: LD_INT 2
28374: ARRAY
28375: PPUSH
28376: CALL_OW 428
28380: ST_TO_ADDR
// if not tmp then
28381: LD_VAR 0 4
28385: NOT
28386: IFFALSE 28390
// continue ;
28388: GO 28305
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28390: LD_VAR 0 4
28394: PUSH
28395: LD_INT 81
28397: PUSH
28398: LD_VAR 0 3
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PPUSH
28407: CALL_OW 69
28411: IN
28412: PUSH
28413: LD_EXP 116
28417: PUSH
28418: LD_VAR 0 1
28422: ARRAY
28423: PUSH
28424: LD_VAR 0 2
28428: ARRAY
28429: PUSH
28430: LD_INT 1
28432: ARRAY
28433: PPUSH
28434: LD_EXP 116
28438: PUSH
28439: LD_VAR 0 1
28443: ARRAY
28444: PUSH
28445: LD_VAR 0 2
28449: ARRAY
28450: PUSH
28451: LD_INT 2
28453: ARRAY
28454: PPUSH
28455: CALL_OW 458
28459: AND
28460: IFFALSE 28554
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28462: LD_EXP 116
28466: PUSH
28467: LD_VAR 0 1
28471: ARRAY
28472: PUSH
28473: LD_VAR 0 2
28477: ARRAY
28478: PUSH
28479: LD_INT 1
28481: ARRAY
28482: PPUSH
28483: LD_EXP 116
28487: PUSH
28488: LD_VAR 0 1
28492: ARRAY
28493: PUSH
28494: LD_VAR 0 2
28498: ARRAY
28499: PUSH
28500: LD_INT 2
28502: ARRAY
28503: PPUSH
28504: LD_VAR 0 3
28508: PPUSH
28509: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28513: LD_ADDR_EXP 116
28517: PUSH
28518: LD_EXP 116
28522: PPUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: LD_EXP 116
28532: PUSH
28533: LD_VAR 0 1
28537: ARRAY
28538: PPUSH
28539: LD_VAR 0 2
28543: PPUSH
28544: CALL_OW 3
28548: PPUSH
28549: CALL_OW 1
28553: ST_TO_ADDR
// end ; end ;
28554: GO 28305
28556: POP
28557: POP
// end ;
28558: GO 28223
28560: POP
28561: POP
// end ;
28562: PPOPN 4
28564: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28565: LD_INT 0
28567: PPUSH
28568: PPUSH
// result := false ;
28569: LD_ADDR_VAR 0 4
28573: PUSH
28574: LD_INT 0
28576: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28577: LD_VAR 0 1
28581: PPUSH
28582: CALL_OW 264
28586: PUSH
28587: LD_EXP 39
28591: EQUAL
28592: NOT
28593: IFFALSE 28597
// exit ;
28595: GO 28837
// index := GetElementIndex ( minersList , unit ) ;
28597: LD_ADDR_VAR 0 5
28601: PUSH
28602: LD_EXP 115
28606: PPUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: CALL 34821 0 2
28616: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28617: LD_EXP 116
28621: PUSH
28622: LD_VAR 0 5
28626: ARRAY
28627: PUSH
28628: LD_EXP 117
28632: GREATEREQUAL
28633: IFFALSE 28637
// exit ;
28635: GO 28837
// ComMoveXY ( unit , x , y ) ;
28637: LD_VAR 0 1
28641: PPUSH
28642: LD_VAR 0 2
28646: PPUSH
28647: LD_VAR 0 3
28651: PPUSH
28652: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28656: LD_INT 35
28658: PPUSH
28659: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28663: LD_VAR 0 1
28667: PPUSH
28668: LD_VAR 0 2
28672: PPUSH
28673: LD_VAR 0 3
28677: PPUSH
28678: CALL 65593 0 3
28682: NOT
28683: PUSH
28684: LD_VAR 0 1
28688: PPUSH
28689: CALL_OW 314
28693: AND
28694: IFFALSE 28698
// exit ;
28696: GO 28837
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28698: LD_VAR 0 2
28702: PPUSH
28703: LD_VAR 0 3
28707: PPUSH
28708: CALL_OW 428
28712: PUSH
28713: LD_VAR 0 1
28717: EQUAL
28718: PUSH
28719: LD_VAR 0 1
28723: PPUSH
28724: CALL_OW 314
28728: NOT
28729: AND
28730: IFFALSE 28656
// PlaySoundXY ( x , y , PlantMine ) ;
28732: LD_VAR 0 2
28736: PPUSH
28737: LD_VAR 0 3
28741: PPUSH
28742: LD_STRING PlantMine
28744: PPUSH
28745: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28749: LD_VAR 0 2
28753: PPUSH
28754: LD_VAR 0 3
28758: PPUSH
28759: LD_VAR 0 1
28763: PPUSH
28764: CALL_OW 255
28768: PPUSH
28769: LD_INT 0
28771: PPUSH
28772: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28776: LD_ADDR_EXP 116
28780: PUSH
28781: LD_EXP 116
28785: PPUSH
28786: LD_VAR 0 5
28790: PUSH
28791: LD_EXP 116
28795: PUSH
28796: LD_VAR 0 5
28800: ARRAY
28801: PUSH
28802: LD_INT 1
28804: PLUS
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PPUSH
28810: LD_VAR 0 2
28814: PUSH
28815: LD_VAR 0 3
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PPUSH
28824: CALL 35036 0 3
28828: ST_TO_ADDR
// result := true ;
28829: LD_ADDR_VAR 0 4
28833: PUSH
28834: LD_INT 1
28836: ST_TO_ADDR
// end ;
28837: LD_VAR 0 4
28841: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28842: LD_INT 0
28844: PPUSH
28845: PPUSH
28846: PPUSH
// if not unit in minersList then
28847: LD_VAR 0 1
28851: PUSH
28852: LD_EXP 115
28856: IN
28857: NOT
28858: IFFALSE 28862
// exit ;
28860: GO 29254
// index := GetElementIndex ( minersList , unit ) ;
28862: LD_ADDR_VAR 0 6
28866: PUSH
28867: LD_EXP 115
28871: PPUSH
28872: LD_VAR 0 1
28876: PPUSH
28877: CALL 34821 0 2
28881: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28882: LD_ADDR_VAR 0 5
28886: PUSH
28887: DOUBLE
28888: LD_EXP 116
28892: PUSH
28893: LD_VAR 0 6
28897: ARRAY
28898: INC
28899: ST_TO_ADDR
28900: LD_INT 1
28902: PUSH
28903: FOR_DOWNTO
28904: IFFALSE 29065
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28906: LD_EXP 116
28910: PUSH
28911: LD_VAR 0 6
28915: ARRAY
28916: PUSH
28917: LD_VAR 0 5
28921: ARRAY
28922: PUSH
28923: LD_INT 1
28925: ARRAY
28926: PUSH
28927: LD_VAR 0 2
28931: EQUAL
28932: PUSH
28933: LD_EXP 116
28937: PUSH
28938: LD_VAR 0 6
28942: ARRAY
28943: PUSH
28944: LD_VAR 0 5
28948: ARRAY
28949: PUSH
28950: LD_INT 2
28952: ARRAY
28953: PUSH
28954: LD_VAR 0 3
28958: EQUAL
28959: AND
28960: IFFALSE 29063
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28962: LD_EXP 116
28966: PUSH
28967: LD_VAR 0 6
28971: ARRAY
28972: PUSH
28973: LD_VAR 0 5
28977: ARRAY
28978: PUSH
28979: LD_INT 1
28981: ARRAY
28982: PPUSH
28983: LD_EXP 116
28987: PUSH
28988: LD_VAR 0 6
28992: ARRAY
28993: PUSH
28994: LD_VAR 0 5
28998: ARRAY
28999: PUSH
29000: LD_INT 2
29002: ARRAY
29003: PPUSH
29004: LD_VAR 0 1
29008: PPUSH
29009: CALL_OW 255
29013: PPUSH
29014: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29018: LD_ADDR_EXP 116
29022: PUSH
29023: LD_EXP 116
29027: PPUSH
29028: LD_VAR 0 6
29032: PPUSH
29033: LD_EXP 116
29037: PUSH
29038: LD_VAR 0 6
29042: ARRAY
29043: PPUSH
29044: LD_VAR 0 5
29048: PPUSH
29049: CALL_OW 3
29053: PPUSH
29054: CALL_OW 1
29058: ST_TO_ADDR
// exit ;
29059: POP
29060: POP
29061: GO 29254
// end ; end ;
29063: GO 28903
29065: POP
29066: POP
// for i := minerMinesList [ index ] downto 1 do
29067: LD_ADDR_VAR 0 5
29071: PUSH
29072: DOUBLE
29073: LD_EXP 116
29077: PUSH
29078: LD_VAR 0 6
29082: ARRAY
29083: INC
29084: ST_TO_ADDR
29085: LD_INT 1
29087: PUSH
29088: FOR_DOWNTO
29089: IFFALSE 29252
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29091: LD_EXP 116
29095: PUSH
29096: LD_VAR 0 6
29100: ARRAY
29101: PUSH
29102: LD_VAR 0 5
29106: ARRAY
29107: PUSH
29108: LD_INT 1
29110: ARRAY
29111: PPUSH
29112: LD_EXP 116
29116: PUSH
29117: LD_VAR 0 6
29121: ARRAY
29122: PUSH
29123: LD_VAR 0 5
29127: ARRAY
29128: PUSH
29129: LD_INT 2
29131: ARRAY
29132: PPUSH
29133: LD_VAR 0 2
29137: PPUSH
29138: LD_VAR 0 3
29142: PPUSH
29143: CALL_OW 298
29147: PUSH
29148: LD_INT 6
29150: LESS
29151: IFFALSE 29250
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29153: LD_EXP 116
29157: PUSH
29158: LD_VAR 0 6
29162: ARRAY
29163: PUSH
29164: LD_VAR 0 5
29168: ARRAY
29169: PUSH
29170: LD_INT 1
29172: ARRAY
29173: PPUSH
29174: LD_EXP 116
29178: PUSH
29179: LD_VAR 0 6
29183: ARRAY
29184: PUSH
29185: LD_VAR 0 5
29189: ARRAY
29190: PUSH
29191: LD_INT 2
29193: ARRAY
29194: PPUSH
29195: LD_VAR 0 1
29199: PPUSH
29200: CALL_OW 255
29204: PPUSH
29205: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29209: LD_ADDR_EXP 116
29213: PUSH
29214: LD_EXP 116
29218: PPUSH
29219: LD_VAR 0 6
29223: PPUSH
29224: LD_EXP 116
29228: PUSH
29229: LD_VAR 0 6
29233: ARRAY
29234: PPUSH
29235: LD_VAR 0 5
29239: PPUSH
29240: CALL_OW 3
29244: PPUSH
29245: CALL_OW 1
29249: ST_TO_ADDR
// end ; end ;
29250: GO 29088
29252: POP
29253: POP
// end ;
29254: LD_VAR 0 4
29258: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29259: LD_INT 0
29261: PPUSH
29262: PPUSH
29263: PPUSH
29264: PPUSH
29265: PPUSH
29266: PPUSH
29267: PPUSH
29268: PPUSH
29269: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL_OW 264
29279: PUSH
29280: LD_EXP 39
29284: EQUAL
29285: NOT
29286: PUSH
29287: LD_VAR 0 1
29291: PUSH
29292: LD_EXP 115
29296: IN
29297: NOT
29298: OR
29299: IFFALSE 29303
// exit ;
29301: GO 29625
// index := GetElementIndex ( minersList , unit ) ;
29303: LD_ADDR_VAR 0 6
29307: PUSH
29308: LD_EXP 115
29312: PPUSH
29313: LD_VAR 0 1
29317: PPUSH
29318: CALL 34821 0 2
29322: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29323: LD_ADDR_VAR 0 8
29327: PUSH
29328: LD_EXP 117
29332: PUSH
29333: LD_EXP 116
29337: PUSH
29338: LD_VAR 0 6
29342: ARRAY
29343: MINUS
29344: ST_TO_ADDR
// if not minesFreeAmount then
29345: LD_VAR 0 8
29349: NOT
29350: IFFALSE 29354
// exit ;
29352: GO 29625
// tmp := [ ] ;
29354: LD_ADDR_VAR 0 7
29358: PUSH
29359: EMPTY
29360: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29361: LD_ADDR_VAR 0 5
29365: PUSH
29366: DOUBLE
29367: LD_INT 1
29369: DEC
29370: ST_TO_ADDR
29371: LD_VAR 0 8
29375: PUSH
29376: FOR_TO
29377: IFFALSE 29572
// begin _d := rand ( 0 , 5 ) ;
29379: LD_ADDR_VAR 0 11
29383: PUSH
29384: LD_INT 0
29386: PPUSH
29387: LD_INT 5
29389: PPUSH
29390: CALL_OW 12
29394: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29395: LD_ADDR_VAR 0 12
29399: PUSH
29400: LD_INT 2
29402: PPUSH
29403: LD_INT 6
29405: PPUSH
29406: CALL_OW 12
29410: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29411: LD_ADDR_VAR 0 9
29415: PUSH
29416: LD_VAR 0 2
29420: PPUSH
29421: LD_VAR 0 11
29425: PPUSH
29426: LD_VAR 0 12
29430: PPUSH
29431: CALL_OW 272
29435: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29436: LD_ADDR_VAR 0 10
29440: PUSH
29441: LD_VAR 0 3
29445: PPUSH
29446: LD_VAR 0 11
29450: PPUSH
29451: LD_VAR 0 12
29455: PPUSH
29456: CALL_OW 273
29460: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29461: LD_VAR 0 9
29465: PPUSH
29466: LD_VAR 0 10
29470: PPUSH
29471: CALL_OW 488
29475: PUSH
29476: LD_VAR 0 9
29480: PUSH
29481: LD_VAR 0 10
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_VAR 0 7
29494: IN
29495: NOT
29496: AND
29497: PUSH
29498: LD_VAR 0 9
29502: PPUSH
29503: LD_VAR 0 10
29507: PPUSH
29508: CALL_OW 458
29512: NOT
29513: AND
29514: IFFALSE 29556
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29516: LD_ADDR_VAR 0 7
29520: PUSH
29521: LD_VAR 0 7
29525: PPUSH
29526: LD_VAR 0 7
29530: PUSH
29531: LD_INT 1
29533: PLUS
29534: PPUSH
29535: LD_VAR 0 9
29539: PUSH
29540: LD_VAR 0 10
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 1
29553: ST_TO_ADDR
29554: GO 29570
// i := i - 1 ;
29556: LD_ADDR_VAR 0 5
29560: PUSH
29561: LD_VAR 0 5
29565: PUSH
29566: LD_INT 1
29568: MINUS
29569: ST_TO_ADDR
// end ;
29570: GO 29376
29572: POP
29573: POP
// for i in tmp do
29574: LD_ADDR_VAR 0 5
29578: PUSH
29579: LD_VAR 0 7
29583: PUSH
29584: FOR_IN
29585: IFFALSE 29623
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29587: LD_VAR 0 1
29591: PPUSH
29592: LD_VAR 0 5
29596: PUSH
29597: LD_INT 1
29599: ARRAY
29600: PPUSH
29601: LD_VAR 0 5
29605: PUSH
29606: LD_INT 2
29608: ARRAY
29609: PPUSH
29610: CALL 28565 0 3
29614: NOT
29615: IFFALSE 29621
// exit ;
29617: POP
29618: POP
29619: GO 29625
29621: GO 29584
29623: POP
29624: POP
// end ;
29625: LD_VAR 0 4
29629: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29630: LD_INT 0
29632: PPUSH
29633: PPUSH
29634: PPUSH
29635: PPUSH
29636: PPUSH
29637: PPUSH
29638: PPUSH
// if not GetClass ( unit ) = class_sniper then
29639: LD_VAR 0 1
29643: PPUSH
29644: CALL_OW 257
29648: PUSH
29649: LD_INT 5
29651: EQUAL
29652: NOT
29653: IFFALSE 29657
// exit ;
29655: GO 30045
// dist := 8 ;
29657: LD_ADDR_VAR 0 5
29661: PUSH
29662: LD_INT 8
29664: ST_TO_ADDR
// viewRange := 12 ;
29665: LD_ADDR_VAR 0 7
29669: PUSH
29670: LD_INT 12
29672: ST_TO_ADDR
// side := GetSide ( unit ) ;
29673: LD_ADDR_VAR 0 6
29677: PUSH
29678: LD_VAR 0 1
29682: PPUSH
29683: CALL_OW 255
29687: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29688: LD_INT 61
29690: PPUSH
29691: LD_VAR 0 6
29695: PPUSH
29696: CALL_OW 321
29700: PUSH
29701: LD_INT 2
29703: EQUAL
29704: IFFALSE 29714
// viewRange := 16 ;
29706: LD_ADDR_VAR 0 7
29710: PUSH
29711: LD_INT 16
29713: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29714: LD_VAR 0 1
29718: PPUSH
29719: LD_VAR 0 2
29723: PPUSH
29724: LD_VAR 0 3
29728: PPUSH
29729: CALL_OW 297
29733: PUSH
29734: LD_VAR 0 5
29738: GREATER
29739: IFFALSE 29818
// begin ComMoveXY ( unit , x , y ) ;
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_VAR 0 2
29750: PPUSH
29751: LD_VAR 0 3
29755: PPUSH
29756: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29760: LD_INT 35
29762: PPUSH
29763: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29767: LD_VAR 0 1
29771: PPUSH
29772: LD_VAR 0 2
29776: PPUSH
29777: LD_VAR 0 3
29781: PPUSH
29782: CALL 65593 0 3
29786: NOT
29787: IFFALSE 29791
// exit ;
29789: GO 30045
// until GetDistUnitXY ( unit , x , y ) < dist ;
29791: LD_VAR 0 1
29795: PPUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 3
29805: PPUSH
29806: CALL_OW 297
29810: PUSH
29811: LD_VAR 0 5
29815: LESS
29816: IFFALSE 29760
// end ; ComTurnXY ( unit , x , y ) ;
29818: LD_VAR 0 1
29822: PPUSH
29823: LD_VAR 0 2
29827: PPUSH
29828: LD_VAR 0 3
29832: PPUSH
29833: CALL_OW 118
// wait ( 5 ) ;
29837: LD_INT 5
29839: PPUSH
29840: CALL_OW 67
// _d := GetDir ( unit ) ;
29844: LD_ADDR_VAR 0 10
29848: PUSH
29849: LD_VAR 0 1
29853: PPUSH
29854: CALL_OW 254
29858: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29859: LD_ADDR_VAR 0 8
29863: PUSH
29864: LD_VAR 0 1
29868: PPUSH
29869: CALL_OW 250
29873: PPUSH
29874: LD_VAR 0 10
29878: PPUSH
29879: LD_VAR 0 5
29883: PPUSH
29884: CALL_OW 272
29888: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29889: LD_ADDR_VAR 0 9
29893: PUSH
29894: LD_VAR 0 1
29898: PPUSH
29899: CALL_OW 251
29903: PPUSH
29904: LD_VAR 0 10
29908: PPUSH
29909: LD_VAR 0 5
29913: PPUSH
29914: CALL_OW 273
29918: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29919: LD_VAR 0 8
29923: PPUSH
29924: LD_VAR 0 9
29928: PPUSH
29929: CALL_OW 488
29933: NOT
29934: IFFALSE 29938
// exit ;
29936: GO 30045
// ComAnimCustom ( unit , 1 ) ;
29938: LD_VAR 0 1
29942: PPUSH
29943: LD_INT 1
29945: PPUSH
29946: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29950: LD_VAR 0 8
29954: PPUSH
29955: LD_VAR 0 9
29959: PPUSH
29960: LD_VAR 0 6
29964: PPUSH
29965: LD_VAR 0 7
29969: PPUSH
29970: CALL_OW 330
// repeat wait ( 1 ) ;
29974: LD_INT 1
29976: PPUSH
29977: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29981: LD_VAR 0 1
29985: PPUSH
29986: CALL_OW 316
29990: PUSH
29991: LD_VAR 0 1
29995: PPUSH
29996: CALL_OW 314
30000: OR
30001: PUSH
30002: LD_VAR 0 1
30006: PPUSH
30007: CALL_OW 302
30011: NOT
30012: OR
30013: PUSH
30014: LD_VAR 0 1
30018: PPUSH
30019: CALL_OW 301
30023: OR
30024: IFFALSE 29974
// RemoveSeeing ( _x , _y , side ) ;
30026: LD_VAR 0 8
30030: PPUSH
30031: LD_VAR 0 9
30035: PPUSH
30036: LD_VAR 0 6
30040: PPUSH
30041: CALL_OW 331
// end ; end_of_file
30045: LD_VAR 0 4
30049: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30050: LD_INT 0
30052: PPUSH
30053: PPUSH
// if exist_mode then
30054: LD_VAR 0 2
30058: IFFALSE 30083
// unit := CreateCharacter ( prefix & ident ) else
30060: LD_ADDR_VAR 0 5
30064: PUSH
30065: LD_VAR 0 3
30069: PUSH
30070: LD_VAR 0 1
30074: STR
30075: PPUSH
30076: CALL_OW 34
30080: ST_TO_ADDR
30081: GO 30098
// unit := NewCharacter ( ident ) ;
30083: LD_ADDR_VAR 0 5
30087: PUSH
30088: LD_VAR 0 1
30092: PPUSH
30093: CALL_OW 25
30097: ST_TO_ADDR
// result := unit ;
30098: LD_ADDR_VAR 0 4
30102: PUSH
30103: LD_VAR 0 5
30107: ST_TO_ADDR
// end ;
30108: LD_VAR 0 4
30112: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30113: LD_INT 0
30115: PPUSH
30116: PPUSH
// if not side or not nation then
30117: LD_VAR 0 1
30121: NOT
30122: PUSH
30123: LD_VAR 0 2
30127: NOT
30128: OR
30129: IFFALSE 30133
// exit ;
30131: GO 30901
// case nation of nation_american :
30133: LD_VAR 0 2
30137: PUSH
30138: LD_INT 1
30140: DOUBLE
30141: EQUAL
30142: IFTRUE 30146
30144: GO 30360
30146: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30147: LD_ADDR_VAR 0 4
30151: PUSH
30152: LD_INT 35
30154: PUSH
30155: LD_INT 45
30157: PUSH
30158: LD_INT 46
30160: PUSH
30161: LD_INT 47
30163: PUSH
30164: LD_INT 82
30166: PUSH
30167: LD_INT 83
30169: PUSH
30170: LD_INT 84
30172: PUSH
30173: LD_INT 85
30175: PUSH
30176: LD_INT 86
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 2
30184: PUSH
30185: LD_INT 6
30187: PUSH
30188: LD_INT 15
30190: PUSH
30191: LD_INT 16
30193: PUSH
30194: LD_INT 7
30196: PUSH
30197: LD_INT 12
30199: PUSH
30200: LD_INT 13
30202: PUSH
30203: LD_INT 10
30205: PUSH
30206: LD_INT 14
30208: PUSH
30209: LD_INT 20
30211: PUSH
30212: LD_INT 21
30214: PUSH
30215: LD_INT 22
30217: PUSH
30218: LD_INT 25
30220: PUSH
30221: LD_INT 32
30223: PUSH
30224: LD_INT 27
30226: PUSH
30227: LD_INT 36
30229: PUSH
30230: LD_INT 69
30232: PUSH
30233: LD_INT 39
30235: PUSH
30236: LD_INT 34
30238: PUSH
30239: LD_INT 40
30241: PUSH
30242: LD_INT 48
30244: PUSH
30245: LD_INT 49
30247: PUSH
30248: LD_INT 50
30250: PUSH
30251: LD_INT 51
30253: PUSH
30254: LD_INT 52
30256: PUSH
30257: LD_INT 53
30259: PUSH
30260: LD_INT 54
30262: PUSH
30263: LD_INT 55
30265: PUSH
30266: LD_INT 56
30268: PUSH
30269: LD_INT 57
30271: PUSH
30272: LD_INT 58
30274: PUSH
30275: LD_INT 59
30277: PUSH
30278: LD_INT 60
30280: PUSH
30281: LD_INT 61
30283: PUSH
30284: LD_INT 62
30286: PUSH
30287: LD_INT 80
30289: PUSH
30290: LD_INT 82
30292: PUSH
30293: LD_INT 83
30295: PUSH
30296: LD_INT 84
30298: PUSH
30299: LD_INT 85
30301: PUSH
30302: LD_INT 86
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: LIST
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: ST_TO_ADDR
30358: GO 30825
30360: LD_INT 2
30362: DOUBLE
30363: EQUAL
30364: IFTRUE 30368
30366: GO 30594
30368: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30369: LD_ADDR_VAR 0 4
30373: PUSH
30374: LD_INT 35
30376: PUSH
30377: LD_INT 45
30379: PUSH
30380: LD_INT 46
30382: PUSH
30383: LD_INT 47
30385: PUSH
30386: LD_INT 82
30388: PUSH
30389: LD_INT 83
30391: PUSH
30392: LD_INT 84
30394: PUSH
30395: LD_INT 85
30397: PUSH
30398: LD_INT 87
30400: PUSH
30401: LD_INT 70
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: LD_INT 11
30409: PUSH
30410: LD_INT 3
30412: PUSH
30413: LD_INT 4
30415: PUSH
30416: LD_INT 5
30418: PUSH
30419: LD_INT 6
30421: PUSH
30422: LD_INT 15
30424: PUSH
30425: LD_INT 18
30427: PUSH
30428: LD_INT 7
30430: PUSH
30431: LD_INT 17
30433: PUSH
30434: LD_INT 8
30436: PUSH
30437: LD_INT 20
30439: PUSH
30440: LD_INT 21
30442: PUSH
30443: LD_INT 22
30445: PUSH
30446: LD_INT 72
30448: PUSH
30449: LD_INT 26
30451: PUSH
30452: LD_INT 69
30454: PUSH
30455: LD_INT 39
30457: PUSH
30458: LD_INT 40
30460: PUSH
30461: LD_INT 41
30463: PUSH
30464: LD_INT 42
30466: PUSH
30467: LD_INT 43
30469: PUSH
30470: LD_INT 48
30472: PUSH
30473: LD_INT 49
30475: PUSH
30476: LD_INT 50
30478: PUSH
30479: LD_INT 51
30481: PUSH
30482: LD_INT 52
30484: PUSH
30485: LD_INT 53
30487: PUSH
30488: LD_INT 54
30490: PUSH
30491: LD_INT 55
30493: PUSH
30494: LD_INT 56
30496: PUSH
30497: LD_INT 60
30499: PUSH
30500: LD_INT 61
30502: PUSH
30503: LD_INT 62
30505: PUSH
30506: LD_INT 66
30508: PUSH
30509: LD_INT 67
30511: PUSH
30512: LD_INT 68
30514: PUSH
30515: LD_INT 81
30517: PUSH
30518: LD_INT 82
30520: PUSH
30521: LD_INT 83
30523: PUSH
30524: LD_INT 84
30526: PUSH
30527: LD_INT 85
30529: PUSH
30530: LD_INT 87
30532: PUSH
30533: LD_INT 88
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: ST_TO_ADDR
30592: GO 30825
30594: LD_INT 3
30596: DOUBLE
30597: EQUAL
30598: IFTRUE 30602
30600: GO 30824
30602: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30603: LD_ADDR_VAR 0 4
30607: PUSH
30608: LD_INT 46
30610: PUSH
30611: LD_INT 47
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 2
30619: PUSH
30620: LD_INT 82
30622: PUSH
30623: LD_INT 83
30625: PUSH
30626: LD_INT 84
30628: PUSH
30629: LD_INT 85
30631: PUSH
30632: LD_INT 86
30634: PUSH
30635: LD_INT 11
30637: PUSH
30638: LD_INT 9
30640: PUSH
30641: LD_INT 20
30643: PUSH
30644: LD_INT 19
30646: PUSH
30647: LD_INT 21
30649: PUSH
30650: LD_INT 24
30652: PUSH
30653: LD_INT 22
30655: PUSH
30656: LD_INT 25
30658: PUSH
30659: LD_INT 28
30661: PUSH
30662: LD_INT 29
30664: PUSH
30665: LD_INT 30
30667: PUSH
30668: LD_INT 31
30670: PUSH
30671: LD_INT 37
30673: PUSH
30674: LD_INT 38
30676: PUSH
30677: LD_INT 32
30679: PUSH
30680: LD_INT 27
30682: PUSH
30683: LD_INT 33
30685: PUSH
30686: LD_INT 69
30688: PUSH
30689: LD_INT 39
30691: PUSH
30692: LD_INT 34
30694: PUSH
30695: LD_INT 40
30697: PUSH
30698: LD_INT 71
30700: PUSH
30701: LD_INT 23
30703: PUSH
30704: LD_INT 44
30706: PUSH
30707: LD_INT 48
30709: PUSH
30710: LD_INT 49
30712: PUSH
30713: LD_INT 50
30715: PUSH
30716: LD_INT 51
30718: PUSH
30719: LD_INT 52
30721: PUSH
30722: LD_INT 53
30724: PUSH
30725: LD_INT 54
30727: PUSH
30728: LD_INT 55
30730: PUSH
30731: LD_INT 56
30733: PUSH
30734: LD_INT 57
30736: PUSH
30737: LD_INT 58
30739: PUSH
30740: LD_INT 59
30742: PUSH
30743: LD_INT 63
30745: PUSH
30746: LD_INT 64
30748: PUSH
30749: LD_INT 65
30751: PUSH
30752: LD_INT 82
30754: PUSH
30755: LD_INT 83
30757: PUSH
30758: LD_INT 84
30760: PUSH
30761: LD_INT 85
30763: PUSH
30764: LD_INT 86
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: ST_TO_ADDR
30822: GO 30825
30824: POP
// if state > - 1 and state < 3 then
30825: LD_VAR 0 3
30829: PUSH
30830: LD_INT 1
30832: NEG
30833: GREATER
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_INT 3
30842: LESS
30843: AND
30844: IFFALSE 30901
// for i in result do
30846: LD_ADDR_VAR 0 5
30850: PUSH
30851: LD_VAR 0 4
30855: PUSH
30856: FOR_IN
30857: IFFALSE 30899
// if GetTech ( i , side ) <> state then
30859: LD_VAR 0 5
30863: PPUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 321
30873: PUSH
30874: LD_VAR 0 3
30878: NONEQUAL
30879: IFFALSE 30897
// result := result diff i ;
30881: LD_ADDR_VAR 0 4
30885: PUSH
30886: LD_VAR 0 4
30890: PUSH
30891: LD_VAR 0 5
30895: DIFF
30896: ST_TO_ADDR
30897: GO 30856
30899: POP
30900: POP
// end ;
30901: LD_VAR 0 4
30905: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30906: LD_INT 0
30908: PPUSH
30909: PPUSH
30910: PPUSH
// result := true ;
30911: LD_ADDR_VAR 0 3
30915: PUSH
30916: LD_INT 1
30918: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30919: LD_ADDR_VAR 0 5
30923: PUSH
30924: LD_VAR 0 2
30928: PPUSH
30929: CALL_OW 480
30933: ST_TO_ADDR
// if not tmp then
30934: LD_VAR 0 5
30938: NOT
30939: IFFALSE 30943
// exit ;
30941: GO 30992
// for i in tmp do
30943: LD_ADDR_VAR 0 4
30947: PUSH
30948: LD_VAR 0 5
30952: PUSH
30953: FOR_IN
30954: IFFALSE 30990
// if GetTech ( i , side ) <> state_researched then
30956: LD_VAR 0 4
30960: PPUSH
30961: LD_VAR 0 1
30965: PPUSH
30966: CALL_OW 321
30970: PUSH
30971: LD_INT 2
30973: NONEQUAL
30974: IFFALSE 30988
// begin result := false ;
30976: LD_ADDR_VAR 0 3
30980: PUSH
30981: LD_INT 0
30983: ST_TO_ADDR
// exit ;
30984: POP
30985: POP
30986: GO 30992
// end ;
30988: GO 30953
30990: POP
30991: POP
// end ;
30992: LD_VAR 0 3
30996: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30997: LD_INT 0
30999: PPUSH
31000: PPUSH
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
31007: PPUSH
31008: PPUSH
31009: PPUSH
31010: PPUSH
31011: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31012: LD_VAR 0 1
31016: NOT
31017: PUSH
31018: LD_VAR 0 1
31022: PPUSH
31023: CALL_OW 257
31027: PUSH
31028: LD_INT 9
31030: NONEQUAL
31031: OR
31032: IFFALSE 31036
// exit ;
31034: GO 31609
// side := GetSide ( unit ) ;
31036: LD_ADDR_VAR 0 9
31040: PUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 255
31050: ST_TO_ADDR
// tech_space := tech_spacanom ;
31051: LD_ADDR_VAR 0 12
31055: PUSH
31056: LD_INT 29
31058: ST_TO_ADDR
// tech_time := tech_taurad ;
31059: LD_ADDR_VAR 0 13
31063: PUSH
31064: LD_INT 28
31066: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31067: LD_ADDR_VAR 0 11
31071: PUSH
31072: LD_VAR 0 1
31076: PPUSH
31077: CALL_OW 310
31081: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31082: LD_VAR 0 11
31086: PPUSH
31087: CALL_OW 247
31091: PUSH
31092: LD_INT 2
31094: EQUAL
31095: IFFALSE 31099
// exit ;
31097: GO 31609
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31099: LD_ADDR_VAR 0 8
31103: PUSH
31104: LD_INT 81
31106: PUSH
31107: LD_VAR 0 9
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 3
31118: PUSH
31119: LD_INT 21
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PPUSH
31137: CALL_OW 69
31141: ST_TO_ADDR
// if not tmp then
31142: LD_VAR 0 8
31146: NOT
31147: IFFALSE 31151
// exit ;
31149: GO 31609
// if in_unit then
31151: LD_VAR 0 11
31155: IFFALSE 31179
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31157: LD_ADDR_VAR 0 10
31161: PUSH
31162: LD_VAR 0 8
31166: PPUSH
31167: LD_VAR 0 11
31171: PPUSH
31172: CALL_OW 74
31176: ST_TO_ADDR
31177: GO 31199
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31179: LD_ADDR_VAR 0 10
31183: PUSH
31184: LD_VAR 0 8
31188: PPUSH
31189: LD_VAR 0 1
31193: PPUSH
31194: CALL_OW 74
31198: ST_TO_ADDR
// if not enemy then
31199: LD_VAR 0 10
31203: NOT
31204: IFFALSE 31208
// exit ;
31206: GO 31609
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31208: LD_VAR 0 11
31212: PUSH
31213: LD_VAR 0 11
31217: PPUSH
31218: LD_VAR 0 10
31222: PPUSH
31223: CALL_OW 296
31227: PUSH
31228: LD_INT 13
31230: GREATER
31231: AND
31232: PUSH
31233: LD_VAR 0 1
31237: PPUSH
31238: LD_VAR 0 10
31242: PPUSH
31243: CALL_OW 296
31247: PUSH
31248: LD_INT 12
31250: GREATER
31251: OR
31252: IFFALSE 31256
// exit ;
31254: GO 31609
// missile := [ 1 ] ;
31256: LD_ADDR_VAR 0 14
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31267: LD_VAR 0 9
31271: PPUSH
31272: LD_VAR 0 12
31276: PPUSH
31277: CALL_OW 325
31281: IFFALSE 31310
// missile := Insert ( missile , missile + 1 , 2 ) ;
31283: LD_ADDR_VAR 0 14
31287: PUSH
31288: LD_VAR 0 14
31292: PPUSH
31293: LD_VAR 0 14
31297: PUSH
31298: LD_INT 1
31300: PLUS
31301: PPUSH
31302: LD_INT 2
31304: PPUSH
31305: CALL_OW 2
31309: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31310: LD_VAR 0 9
31314: PPUSH
31315: LD_VAR 0 13
31319: PPUSH
31320: CALL_OW 325
31324: PUSH
31325: LD_VAR 0 10
31329: PPUSH
31330: CALL_OW 255
31334: PPUSH
31335: LD_VAR 0 13
31339: PPUSH
31340: CALL_OW 325
31344: NOT
31345: AND
31346: IFFALSE 31375
// missile := Insert ( missile , missile + 1 , 3 ) ;
31348: LD_ADDR_VAR 0 14
31352: PUSH
31353: LD_VAR 0 14
31357: PPUSH
31358: LD_VAR 0 14
31362: PUSH
31363: LD_INT 1
31365: PLUS
31366: PPUSH
31367: LD_INT 3
31369: PPUSH
31370: CALL_OW 2
31374: ST_TO_ADDR
// if missile < 2 then
31375: LD_VAR 0 14
31379: PUSH
31380: LD_INT 2
31382: LESS
31383: IFFALSE 31387
// exit ;
31385: GO 31609
// x := GetX ( enemy ) ;
31387: LD_ADDR_VAR 0 4
31391: PUSH
31392: LD_VAR 0 10
31396: PPUSH
31397: CALL_OW 250
31401: ST_TO_ADDR
// y := GetY ( enemy ) ;
31402: LD_ADDR_VAR 0 5
31406: PUSH
31407: LD_VAR 0 10
31411: PPUSH
31412: CALL_OW 251
31416: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31417: LD_ADDR_VAR 0 6
31421: PUSH
31422: LD_VAR 0 4
31426: PUSH
31427: LD_INT 1
31429: NEG
31430: PPUSH
31431: LD_INT 1
31433: PPUSH
31434: CALL_OW 12
31438: PLUS
31439: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31440: LD_ADDR_VAR 0 7
31444: PUSH
31445: LD_VAR 0 5
31449: PUSH
31450: LD_INT 1
31452: NEG
31453: PPUSH
31454: LD_INT 1
31456: PPUSH
31457: CALL_OW 12
31461: PLUS
31462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31463: LD_VAR 0 6
31467: PPUSH
31468: LD_VAR 0 7
31472: PPUSH
31473: CALL_OW 488
31477: NOT
31478: IFFALSE 31500
// begin _x := x ;
31480: LD_ADDR_VAR 0 6
31484: PUSH
31485: LD_VAR 0 4
31489: ST_TO_ADDR
// _y := y ;
31490: LD_ADDR_VAR 0 7
31494: PUSH
31495: LD_VAR 0 5
31499: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31500: LD_ADDR_VAR 0 3
31504: PUSH
31505: LD_INT 1
31507: PPUSH
31508: LD_VAR 0 14
31512: PPUSH
31513: CALL_OW 12
31517: ST_TO_ADDR
// case i of 1 :
31518: LD_VAR 0 3
31522: PUSH
31523: LD_INT 1
31525: DOUBLE
31526: EQUAL
31527: IFTRUE 31531
31529: GO 31548
31531: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31532: LD_VAR 0 1
31536: PPUSH
31537: LD_VAR 0 10
31541: PPUSH
31542: CALL_OW 115
31546: GO 31609
31548: LD_INT 2
31550: DOUBLE
31551: EQUAL
31552: IFTRUE 31556
31554: GO 31578
31556: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31557: LD_VAR 0 1
31561: PPUSH
31562: LD_VAR 0 6
31566: PPUSH
31567: LD_VAR 0 7
31571: PPUSH
31572: CALL_OW 153
31576: GO 31609
31578: LD_INT 3
31580: DOUBLE
31581: EQUAL
31582: IFTRUE 31586
31584: GO 31608
31586: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31587: LD_VAR 0 1
31591: PPUSH
31592: LD_VAR 0 6
31596: PPUSH
31597: LD_VAR 0 7
31601: PPUSH
31602: CALL_OW 154
31606: GO 31609
31608: POP
// end ;
31609: LD_VAR 0 2
31613: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
31620: PPUSH
31621: PPUSH
// if not unit or not building then
31622: LD_VAR 0 1
31626: NOT
31627: PUSH
31628: LD_VAR 0 2
31632: NOT
31633: OR
31634: IFFALSE 31638
// exit ;
31636: GO 31796
// x := GetX ( building ) ;
31638: LD_ADDR_VAR 0 5
31642: PUSH
31643: LD_VAR 0 2
31647: PPUSH
31648: CALL_OW 250
31652: ST_TO_ADDR
// y := GetY ( building ) ;
31653: LD_ADDR_VAR 0 6
31657: PUSH
31658: LD_VAR 0 2
31662: PPUSH
31663: CALL_OW 251
31667: ST_TO_ADDR
// for i = 0 to 5 do
31668: LD_ADDR_VAR 0 4
31672: PUSH
31673: DOUBLE
31674: LD_INT 0
31676: DEC
31677: ST_TO_ADDR
31678: LD_INT 5
31680: PUSH
31681: FOR_TO
31682: IFFALSE 31794
// begin _x := ShiftX ( x , i , 3 ) ;
31684: LD_ADDR_VAR 0 7
31688: PUSH
31689: LD_VAR 0 5
31693: PPUSH
31694: LD_VAR 0 4
31698: PPUSH
31699: LD_INT 3
31701: PPUSH
31702: CALL_OW 272
31706: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31707: LD_ADDR_VAR 0 8
31711: PUSH
31712: LD_VAR 0 6
31716: PPUSH
31717: LD_VAR 0 4
31721: PPUSH
31722: LD_INT 3
31724: PPUSH
31725: CALL_OW 273
31729: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31730: LD_VAR 0 7
31734: PPUSH
31735: LD_VAR 0 8
31739: PPUSH
31740: CALL_OW 488
31744: NOT
31745: IFFALSE 31749
// continue ;
31747: GO 31681
// if HexInfo ( _x , _y ) = 0 then
31749: LD_VAR 0 7
31753: PPUSH
31754: LD_VAR 0 8
31758: PPUSH
31759: CALL_OW 428
31763: PUSH
31764: LD_INT 0
31766: EQUAL
31767: IFFALSE 31792
// begin ComMoveXY ( unit , _x , _y ) ;
31769: LD_VAR 0 1
31773: PPUSH
31774: LD_VAR 0 7
31778: PPUSH
31779: LD_VAR 0 8
31783: PPUSH
31784: CALL_OW 111
// exit ;
31788: POP
31789: POP
31790: GO 31796
// end ; end ;
31792: GO 31681
31794: POP
31795: POP
// end ;
31796: LD_VAR 0 3
31800: RET
// export function ScanBase ( side , base_area ) ; begin
31801: LD_INT 0
31803: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31804: LD_ADDR_VAR 0 3
31808: PUSH
31809: LD_VAR 0 2
31813: PPUSH
31814: LD_INT 81
31816: PUSH
31817: LD_VAR 0 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: PPUSH
31826: CALL_OW 70
31830: ST_TO_ADDR
// end ;
31831: LD_VAR 0 3
31835: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31836: LD_INT 0
31838: PPUSH
31839: PPUSH
31840: PPUSH
31841: PPUSH
// result := false ;
31842: LD_ADDR_VAR 0 2
31846: PUSH
31847: LD_INT 0
31849: ST_TO_ADDR
// side := GetSide ( unit ) ;
31850: LD_ADDR_VAR 0 3
31854: PUSH
31855: LD_VAR 0 1
31859: PPUSH
31860: CALL_OW 255
31864: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31865: LD_ADDR_VAR 0 4
31869: PUSH
31870: LD_VAR 0 1
31874: PPUSH
31875: CALL_OW 248
31879: ST_TO_ADDR
// case nat of 1 :
31880: LD_VAR 0 4
31884: PUSH
31885: LD_INT 1
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31904
31893: POP
// tech := tech_lassight ; 2 :
31894: LD_ADDR_VAR 0 5
31898: PUSH
31899: LD_INT 12
31901: ST_TO_ADDR
31902: GO 31943
31904: LD_INT 2
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31923
31912: POP
// tech := tech_mortar ; 3 :
31913: LD_ADDR_VAR 0 5
31917: PUSH
31918: LD_INT 41
31920: ST_TO_ADDR
31921: GO 31943
31923: LD_INT 3
31925: DOUBLE
31926: EQUAL
31927: IFTRUE 31931
31929: GO 31942
31931: POP
// tech := tech_bazooka ; end ;
31932: LD_ADDR_VAR 0 5
31936: PUSH
31937: LD_INT 44
31939: ST_TO_ADDR
31940: GO 31943
31942: POP
// if Researched ( side , tech ) then
31943: LD_VAR 0 3
31947: PPUSH
31948: LD_VAR 0 5
31952: PPUSH
31953: CALL_OW 325
31957: IFFALSE 31984
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31959: LD_ADDR_VAR 0 2
31963: PUSH
31964: LD_INT 5
31966: PUSH
31967: LD_INT 8
31969: PUSH
31970: LD_INT 9
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: PUSH
31978: LD_VAR 0 4
31982: ARRAY
31983: ST_TO_ADDR
// end ;
31984: LD_VAR 0 2
31988: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31989: LD_INT 0
31991: PPUSH
31992: PPUSH
31993: PPUSH
// if not mines then
31994: LD_VAR 0 2
31998: NOT
31999: IFFALSE 32003
// exit ;
32001: GO 32147
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32003: LD_ADDR_VAR 0 5
32007: PUSH
32008: LD_INT 81
32010: PUSH
32011: LD_VAR 0 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 3
32022: PUSH
32023: LD_INT 21
32025: PUSH
32026: LD_INT 3
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PPUSH
32041: CALL_OW 69
32045: ST_TO_ADDR
// for i in mines do
32046: LD_ADDR_VAR 0 4
32050: PUSH
32051: LD_VAR 0 2
32055: PUSH
32056: FOR_IN
32057: IFFALSE 32145
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32059: LD_VAR 0 4
32063: PUSH
32064: LD_INT 1
32066: ARRAY
32067: PPUSH
32068: LD_VAR 0 4
32072: PUSH
32073: LD_INT 2
32075: ARRAY
32076: PPUSH
32077: CALL_OW 458
32081: NOT
32082: IFFALSE 32086
// continue ;
32084: GO 32056
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32086: LD_VAR 0 4
32090: PUSH
32091: LD_INT 1
32093: ARRAY
32094: PPUSH
32095: LD_VAR 0 4
32099: PUSH
32100: LD_INT 2
32102: ARRAY
32103: PPUSH
32104: CALL_OW 428
32108: PUSH
32109: LD_VAR 0 5
32113: IN
32114: IFFALSE 32143
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32116: LD_VAR 0 4
32120: PUSH
32121: LD_INT 1
32123: ARRAY
32124: PPUSH
32125: LD_VAR 0 4
32129: PUSH
32130: LD_INT 2
32132: ARRAY
32133: PPUSH
32134: LD_VAR 0 1
32138: PPUSH
32139: CALL_OW 456
// end ;
32143: GO 32056
32145: POP
32146: POP
// end ;
32147: LD_VAR 0 3
32151: RET
// export function Count ( array ) ; var i ; begin
32152: LD_INT 0
32154: PPUSH
32155: PPUSH
// result := 0 ;
32156: LD_ADDR_VAR 0 2
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
// for i in array do
32164: LD_ADDR_VAR 0 3
32168: PUSH
32169: LD_VAR 0 1
32173: PUSH
32174: FOR_IN
32175: IFFALSE 32199
// if i then
32177: LD_VAR 0 3
32181: IFFALSE 32197
// result := result + 1 ;
32183: LD_ADDR_VAR 0 2
32187: PUSH
32188: LD_VAR 0 2
32192: PUSH
32193: LD_INT 1
32195: PLUS
32196: ST_TO_ADDR
32197: GO 32174
32199: POP
32200: POP
// end ;
32201: LD_VAR 0 2
32205: RET
// export function IsEmpty ( building ) ; begin
32206: LD_INT 0
32208: PPUSH
// if not building then
32209: LD_VAR 0 1
32213: NOT
32214: IFFALSE 32218
// exit ;
32216: GO 32261
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32218: LD_ADDR_VAR 0 2
32222: PUSH
32223: LD_VAR 0 1
32227: PUSH
32228: LD_INT 22
32230: PUSH
32231: LD_VAR 0 1
32235: PPUSH
32236: CALL_OW 255
32240: PUSH
32241: EMPTY
32242: LIST
32243: LIST
32244: PUSH
32245: LD_INT 58
32247: PUSH
32248: EMPTY
32249: LIST
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PPUSH
32255: CALL_OW 69
32259: IN
32260: ST_TO_ADDR
// end ;
32261: LD_VAR 0 2
32265: RET
// export function IsNotFull ( building ) ; begin
32266: LD_INT 0
32268: PPUSH
// if not building then
32269: LD_VAR 0 1
32273: NOT
32274: IFFALSE 32278
// exit ;
32276: GO 32297
// result := UnitsInside ( building ) < 6 ;
32278: LD_ADDR_VAR 0 2
32282: PUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 313
32292: PUSH
32293: LD_INT 6
32295: LESS
32296: ST_TO_ADDR
// end ;
32297: LD_VAR 0 2
32301: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32302: LD_INT 0
32304: PPUSH
32305: PPUSH
32306: PPUSH
32307: PPUSH
// tmp := [ ] ;
32308: LD_ADDR_VAR 0 3
32312: PUSH
32313: EMPTY
32314: ST_TO_ADDR
// list := [ ] ;
32315: LD_ADDR_VAR 0 5
32319: PUSH
32320: EMPTY
32321: ST_TO_ADDR
// for i = 16 to 25 do
32322: LD_ADDR_VAR 0 4
32326: PUSH
32327: DOUBLE
32328: LD_INT 16
32330: DEC
32331: ST_TO_ADDR
32332: LD_INT 25
32334: PUSH
32335: FOR_TO
32336: IFFALSE 32409
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32338: LD_ADDR_VAR 0 3
32342: PUSH
32343: LD_VAR 0 3
32347: PUSH
32348: LD_INT 22
32350: PUSH
32351: LD_VAR 0 1
32355: PPUSH
32356: CALL_OW 255
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 91
32367: PUSH
32368: LD_VAR 0 1
32372: PUSH
32373: LD_INT 6
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 30
32383: PUSH
32384: LD_VAR 0 4
32388: PUSH
32389: EMPTY
32390: LIST
32391: LIST
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: LIST
32397: PUSH
32398: EMPTY
32399: LIST
32400: PPUSH
32401: CALL_OW 69
32405: ADD
32406: ST_TO_ADDR
32407: GO 32335
32409: POP
32410: POP
// for i = 1 to tmp do
32411: LD_ADDR_VAR 0 4
32415: PUSH
32416: DOUBLE
32417: LD_INT 1
32419: DEC
32420: ST_TO_ADDR
32421: LD_VAR 0 3
32425: PUSH
32426: FOR_TO
32427: IFFALSE 32515
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32429: LD_ADDR_VAR 0 5
32433: PUSH
32434: LD_VAR 0 5
32438: PUSH
32439: LD_VAR 0 3
32443: PUSH
32444: LD_VAR 0 4
32448: ARRAY
32449: PPUSH
32450: CALL_OW 266
32454: PUSH
32455: LD_VAR 0 3
32459: PUSH
32460: LD_VAR 0 4
32464: ARRAY
32465: PPUSH
32466: CALL_OW 250
32470: PUSH
32471: LD_VAR 0 3
32475: PUSH
32476: LD_VAR 0 4
32480: ARRAY
32481: PPUSH
32482: CALL_OW 251
32486: PUSH
32487: LD_VAR 0 3
32491: PUSH
32492: LD_VAR 0 4
32496: ARRAY
32497: PPUSH
32498: CALL_OW 254
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: PUSH
32509: EMPTY
32510: LIST
32511: ADD
32512: ST_TO_ADDR
32513: GO 32426
32515: POP
32516: POP
// result := list ;
32517: LD_ADDR_VAR 0 2
32521: PUSH
32522: LD_VAR 0 5
32526: ST_TO_ADDR
// end ;
32527: LD_VAR 0 2
32531: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32532: LD_INT 0
32534: PPUSH
32535: PPUSH
32536: PPUSH
32537: PPUSH
32538: PPUSH
32539: PPUSH
32540: PPUSH
// if not factory then
32541: LD_VAR 0 1
32545: NOT
32546: IFFALSE 32550
// exit ;
32548: GO 33143
// if control = control_apeman then
32550: LD_VAR 0 4
32554: PUSH
32555: LD_INT 5
32557: EQUAL
32558: IFFALSE 32667
// begin tmp := UnitsInside ( factory ) ;
32560: LD_ADDR_VAR 0 8
32564: PUSH
32565: LD_VAR 0 1
32569: PPUSH
32570: CALL_OW 313
32574: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32575: LD_VAR 0 8
32579: PPUSH
32580: LD_INT 25
32582: PUSH
32583: LD_INT 12
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: PPUSH
32590: CALL_OW 72
32594: NOT
32595: IFFALSE 32605
// control := control_manual ;
32597: LD_ADDR_VAR 0 4
32601: PUSH
32602: LD_INT 1
32604: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32605: LD_ADDR_VAR 0 8
32609: PUSH
32610: LD_VAR 0 1
32614: PPUSH
32615: CALL 32302 0 1
32619: ST_TO_ADDR
// if tmp then
32620: LD_VAR 0 8
32624: IFFALSE 32667
// begin for i in tmp do
32626: LD_ADDR_VAR 0 7
32630: PUSH
32631: LD_VAR 0 8
32635: PUSH
32636: FOR_IN
32637: IFFALSE 32665
// if i [ 1 ] = b_ext_radio then
32639: LD_VAR 0 7
32643: PUSH
32644: LD_INT 1
32646: ARRAY
32647: PUSH
32648: LD_INT 22
32650: EQUAL
32651: IFFALSE 32663
// begin control := control_remote ;
32653: LD_ADDR_VAR 0 4
32657: PUSH
32658: LD_INT 2
32660: ST_TO_ADDR
// break ;
32661: GO 32665
// end ;
32663: GO 32636
32665: POP
32666: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32667: LD_VAR 0 1
32671: PPUSH
32672: LD_VAR 0 2
32676: PPUSH
32677: LD_VAR 0 3
32681: PPUSH
32682: LD_VAR 0 4
32686: PPUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: CALL_OW 448
32696: IFFALSE 32731
// begin result := [ chassis , engine , control , weapon ] ;
32698: LD_ADDR_VAR 0 6
32702: PUSH
32703: LD_VAR 0 2
32707: PUSH
32708: LD_VAR 0 3
32712: PUSH
32713: LD_VAR 0 4
32717: PUSH
32718: LD_VAR 0 5
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: ST_TO_ADDR
// exit ;
32729: GO 33143
// end ; _chassis := AvailableChassisList ( factory ) ;
32731: LD_ADDR_VAR 0 9
32735: PUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 475
32745: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32746: LD_ADDR_VAR 0 11
32750: PUSH
32751: LD_VAR 0 1
32755: PPUSH
32756: CALL_OW 476
32760: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32761: LD_ADDR_VAR 0 12
32765: PUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL_OW 477
32775: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32776: LD_ADDR_VAR 0 10
32780: PUSH
32781: LD_VAR 0 1
32785: PPUSH
32786: CALL_OW 478
32790: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32791: LD_VAR 0 9
32795: NOT
32796: PUSH
32797: LD_VAR 0 11
32801: NOT
32802: OR
32803: PUSH
32804: LD_VAR 0 12
32808: NOT
32809: OR
32810: PUSH
32811: LD_VAR 0 10
32815: NOT
32816: OR
32817: IFFALSE 32852
// begin result := [ chassis , engine , control , weapon ] ;
32819: LD_ADDR_VAR 0 6
32823: PUSH
32824: LD_VAR 0 2
32828: PUSH
32829: LD_VAR 0 3
32833: PUSH
32834: LD_VAR 0 4
32838: PUSH
32839: LD_VAR 0 5
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: ST_TO_ADDR
// exit ;
32850: GO 33143
// end ; if not chassis in _chassis then
32852: LD_VAR 0 2
32856: PUSH
32857: LD_VAR 0 9
32861: IN
32862: NOT
32863: IFFALSE 32889
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32865: LD_ADDR_VAR 0 2
32869: PUSH
32870: LD_VAR 0 9
32874: PUSH
32875: LD_INT 1
32877: PPUSH
32878: LD_VAR 0 9
32882: PPUSH
32883: CALL_OW 12
32887: ARRAY
32888: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32889: LD_VAR 0 2
32893: PPUSH
32894: LD_VAR 0 3
32898: PPUSH
32899: CALL 33148 0 2
32903: NOT
32904: IFFALSE 32963
// repeat engine := _engine [ 1 ] ;
32906: LD_ADDR_VAR 0 3
32910: PUSH
32911: LD_VAR 0 11
32915: PUSH
32916: LD_INT 1
32918: ARRAY
32919: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32920: LD_ADDR_VAR 0 11
32924: PUSH
32925: LD_VAR 0 11
32929: PPUSH
32930: LD_INT 1
32932: PPUSH
32933: CALL_OW 3
32937: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32938: LD_VAR 0 2
32942: PPUSH
32943: LD_VAR 0 3
32947: PPUSH
32948: CALL 33148 0 2
32952: PUSH
32953: LD_VAR 0 11
32957: PUSH
32958: EMPTY
32959: EQUAL
32960: OR
32961: IFFALSE 32906
// if not control in _control then
32963: LD_VAR 0 4
32967: PUSH
32968: LD_VAR 0 12
32972: IN
32973: NOT
32974: IFFALSE 33000
// control := _control [ rand ( 1 , _control ) ] ;
32976: LD_ADDR_VAR 0 4
32980: PUSH
32981: LD_VAR 0 12
32985: PUSH
32986: LD_INT 1
32988: PPUSH
32989: LD_VAR 0 12
32993: PPUSH
32994: CALL_OW 12
32998: ARRAY
32999: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33000: LD_VAR 0 2
33004: PPUSH
33005: LD_VAR 0 5
33009: PPUSH
33010: CALL 33368 0 2
33014: NOT
33015: IFFALSE 33074
// repeat weapon := _weapon [ 1 ] ;
33017: LD_ADDR_VAR 0 5
33021: PUSH
33022: LD_VAR 0 10
33026: PUSH
33027: LD_INT 1
33029: ARRAY
33030: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33031: LD_ADDR_VAR 0 10
33035: PUSH
33036: LD_VAR 0 10
33040: PPUSH
33041: LD_INT 1
33043: PPUSH
33044: CALL_OW 3
33048: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33049: LD_VAR 0 2
33053: PPUSH
33054: LD_VAR 0 5
33058: PPUSH
33059: CALL 33368 0 2
33063: PUSH
33064: LD_VAR 0 10
33068: PUSH
33069: EMPTY
33070: EQUAL
33071: OR
33072: IFFALSE 33017
// result := [ ] ;
33074: LD_ADDR_VAR 0 6
33078: PUSH
33079: EMPTY
33080: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33081: LD_VAR 0 1
33085: PPUSH
33086: LD_VAR 0 2
33090: PPUSH
33091: LD_VAR 0 3
33095: PPUSH
33096: LD_VAR 0 4
33100: PPUSH
33101: LD_VAR 0 5
33105: PPUSH
33106: CALL_OW 448
33110: IFFALSE 33143
// result := [ chassis , engine , control , weapon ] ;
33112: LD_ADDR_VAR 0 6
33116: PUSH
33117: LD_VAR 0 2
33121: PUSH
33122: LD_VAR 0 3
33126: PUSH
33127: LD_VAR 0 4
33131: PUSH
33132: LD_VAR 0 5
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: ST_TO_ADDR
// end ;
33143: LD_VAR 0 6
33147: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33148: LD_INT 0
33150: PPUSH
// if not chassis or not engine then
33151: LD_VAR 0 1
33155: NOT
33156: PUSH
33157: LD_VAR 0 2
33161: NOT
33162: OR
33163: IFFALSE 33167
// exit ;
33165: GO 33363
// case engine of engine_solar :
33167: LD_VAR 0 2
33171: PUSH
33172: LD_INT 2
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33218
33180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33181: LD_ADDR_VAR 0 3
33185: PUSH
33186: LD_INT 11
33188: PUSH
33189: LD_INT 12
33191: PUSH
33192: LD_INT 13
33194: PUSH
33195: LD_INT 14
33197: PUSH
33198: LD_INT 1
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: ST_TO_ADDR
33216: GO 33347
33218: LD_INT 1
33220: DOUBLE
33221: EQUAL
33222: IFTRUE 33226
33224: GO 33288
33226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33227: LD_ADDR_VAR 0 3
33231: PUSH
33232: LD_INT 11
33234: PUSH
33235: LD_INT 12
33237: PUSH
33238: LD_INT 13
33240: PUSH
33241: LD_INT 14
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: LD_INT 4
33255: PUSH
33256: LD_INT 5
33258: PUSH
33259: LD_INT 21
33261: PUSH
33262: LD_INT 23
33264: PUSH
33265: LD_INT 22
33267: PUSH
33268: LD_INT 24
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: ST_TO_ADDR
33286: GO 33347
33288: LD_INT 3
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33346
33296: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_INT 13
33304: PUSH
33305: LD_INT 14
33307: PUSH
33308: LD_INT 2
33310: PUSH
33311: LD_INT 3
33313: PUSH
33314: LD_INT 4
33316: PUSH
33317: LD_INT 5
33319: PUSH
33320: LD_INT 21
33322: PUSH
33323: LD_INT 22
33325: PUSH
33326: LD_INT 23
33328: PUSH
33329: LD_INT 24
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: ST_TO_ADDR
33344: GO 33347
33346: POP
// result := ( chassis in result ) ;
33347: LD_ADDR_VAR 0 3
33351: PUSH
33352: LD_VAR 0 1
33356: PUSH
33357: LD_VAR 0 3
33361: IN
33362: ST_TO_ADDR
// end ;
33363: LD_VAR 0 3
33367: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33368: LD_INT 0
33370: PPUSH
// if not chassis or not weapon then
33371: LD_VAR 0 1
33375: NOT
33376: PUSH
33377: LD_VAR 0 2
33381: NOT
33382: OR
33383: IFFALSE 33387
// exit ;
33385: GO 34449
// case weapon of us_machine_gun :
33387: LD_VAR 0 2
33391: PUSH
33392: LD_INT 2
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33430
33400: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33401: LD_ADDR_VAR 0 3
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 3
33414: PUSH
33415: LD_INT 4
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: ST_TO_ADDR
33428: GO 34433
33430: LD_INT 3
33432: DOUBLE
33433: EQUAL
33434: IFTRUE 33438
33436: GO 33468
33438: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33439: LD_ADDR_VAR 0 3
33443: PUSH
33444: LD_INT 1
33446: PUSH
33447: LD_INT 2
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 4
33455: PUSH
33456: LD_INT 5
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: ST_TO_ADDR
33466: GO 34433
33468: LD_INT 11
33470: DOUBLE
33471: EQUAL
33472: IFTRUE 33476
33474: GO 33506
33476: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33477: LD_ADDR_VAR 0 3
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: LD_INT 2
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: LD_INT 4
33493: PUSH
33494: LD_INT 5
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: ST_TO_ADDR
33504: GO 34433
33506: LD_INT 4
33508: DOUBLE
33509: EQUAL
33510: IFTRUE 33514
33512: GO 33540
33514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33515: LD_ADDR_VAR 0 3
33519: PUSH
33520: LD_INT 2
33522: PUSH
33523: LD_INT 3
33525: PUSH
33526: LD_INT 4
33528: PUSH
33529: LD_INT 5
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: ST_TO_ADDR
33538: GO 34433
33540: LD_INT 5
33542: DOUBLE
33543: EQUAL
33544: IFTRUE 33548
33546: GO 33574
33548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33549: LD_ADDR_VAR 0 3
33553: PUSH
33554: LD_INT 2
33556: PUSH
33557: LD_INT 3
33559: PUSH
33560: LD_INT 4
33562: PUSH
33563: LD_INT 5
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: ST_TO_ADDR
33572: GO 34433
33574: LD_INT 9
33576: DOUBLE
33577: EQUAL
33578: IFTRUE 33582
33580: GO 33608
33582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33583: LD_ADDR_VAR 0 3
33587: PUSH
33588: LD_INT 2
33590: PUSH
33591: LD_INT 3
33593: PUSH
33594: LD_INT 4
33596: PUSH
33597: LD_INT 5
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: ST_TO_ADDR
33606: GO 34433
33608: LD_INT 7
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33642
33616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33617: LD_ADDR_VAR 0 3
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 3
33627: PUSH
33628: LD_INT 4
33630: PUSH
33631: LD_INT 5
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: ST_TO_ADDR
33640: GO 34433
33642: LD_INT 12
33644: DOUBLE
33645: EQUAL
33646: IFTRUE 33650
33648: GO 33676
33650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33651: LD_ADDR_VAR 0 3
33655: PUSH
33656: LD_INT 2
33658: PUSH
33659: LD_INT 3
33661: PUSH
33662: LD_INT 4
33664: PUSH
33665: LD_INT 5
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: ST_TO_ADDR
33674: GO 34433
33676: LD_INT 13
33678: DOUBLE
33679: EQUAL
33680: IFTRUE 33684
33682: GO 33710
33684: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33685: LD_ADDR_VAR 0 3
33689: PUSH
33690: LD_INT 2
33692: PUSH
33693: LD_INT 3
33695: PUSH
33696: LD_INT 4
33698: PUSH
33699: LD_INT 5
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: ST_TO_ADDR
33708: GO 34433
33710: LD_INT 14
33712: DOUBLE
33713: EQUAL
33714: IFTRUE 33718
33716: GO 33736
33718: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33719: LD_ADDR_VAR 0 3
33723: PUSH
33724: LD_INT 4
33726: PUSH
33727: LD_INT 5
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: ST_TO_ADDR
33734: GO 34433
33736: LD_INT 6
33738: DOUBLE
33739: EQUAL
33740: IFTRUE 33744
33742: GO 33762
33744: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33745: LD_ADDR_VAR 0 3
33749: PUSH
33750: LD_INT 4
33752: PUSH
33753: LD_INT 5
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: ST_TO_ADDR
33760: GO 34433
33762: LD_INT 10
33764: DOUBLE
33765: EQUAL
33766: IFTRUE 33770
33768: GO 33788
33770: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33771: LD_ADDR_VAR 0 3
33775: PUSH
33776: LD_INT 4
33778: PUSH
33779: LD_INT 5
33781: PUSH
33782: EMPTY
33783: LIST
33784: LIST
33785: ST_TO_ADDR
33786: GO 34433
33788: LD_INT 22
33790: DOUBLE
33791: EQUAL
33792: IFTRUE 33796
33794: GO 33822
33796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33797: LD_ADDR_VAR 0 3
33801: PUSH
33802: LD_INT 11
33804: PUSH
33805: LD_INT 12
33807: PUSH
33808: LD_INT 13
33810: PUSH
33811: LD_INT 14
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: ST_TO_ADDR
33820: GO 34433
33822: LD_INT 23
33824: DOUBLE
33825: EQUAL
33826: IFTRUE 33830
33828: GO 33856
33830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33831: LD_ADDR_VAR 0 3
33835: PUSH
33836: LD_INT 11
33838: PUSH
33839: LD_INT 12
33841: PUSH
33842: LD_INT 13
33844: PUSH
33845: LD_INT 14
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: ST_TO_ADDR
33854: GO 34433
33856: LD_INT 24
33858: DOUBLE
33859: EQUAL
33860: IFTRUE 33864
33862: GO 33890
33864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33865: LD_ADDR_VAR 0 3
33869: PUSH
33870: LD_INT 11
33872: PUSH
33873: LD_INT 12
33875: PUSH
33876: LD_INT 13
33878: PUSH
33879: LD_INT 14
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: ST_TO_ADDR
33888: GO 34433
33890: LD_INT 30
33892: DOUBLE
33893: EQUAL
33894: IFTRUE 33898
33896: GO 33924
33898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33899: LD_ADDR_VAR 0 3
33903: PUSH
33904: LD_INT 11
33906: PUSH
33907: LD_INT 12
33909: PUSH
33910: LD_INT 13
33912: PUSH
33913: LD_INT 14
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: ST_TO_ADDR
33922: GO 34433
33924: LD_INT 25
33926: DOUBLE
33927: EQUAL
33928: IFTRUE 33932
33930: GO 33950
33932: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33933: LD_ADDR_VAR 0 3
33937: PUSH
33938: LD_INT 13
33940: PUSH
33941: LD_INT 14
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: ST_TO_ADDR
33948: GO 34433
33950: LD_INT 27
33952: DOUBLE
33953: EQUAL
33954: IFTRUE 33958
33956: GO 33976
33958: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33959: LD_ADDR_VAR 0 3
33963: PUSH
33964: LD_INT 13
33966: PUSH
33967: LD_INT 14
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: ST_TO_ADDR
33974: GO 34433
33976: LD_EXP 37
33980: DOUBLE
33981: EQUAL
33982: IFTRUE 33986
33984: GO 34012
33986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33987: LD_ADDR_VAR 0 3
33991: PUSH
33992: LD_INT 11
33994: PUSH
33995: LD_INT 12
33997: PUSH
33998: LD_INT 13
34000: PUSH
34001: LD_INT 14
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: ST_TO_ADDR
34010: GO 34433
34012: LD_INT 28
34014: DOUBLE
34015: EQUAL
34016: IFTRUE 34020
34018: GO 34038
34020: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_INT 13
34028: PUSH
34029: LD_INT 14
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: ST_TO_ADDR
34036: GO 34433
34038: LD_INT 29
34040: DOUBLE
34041: EQUAL
34042: IFTRUE 34046
34044: GO 34064
34046: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34047: LD_ADDR_VAR 0 3
34051: PUSH
34052: LD_INT 13
34054: PUSH
34055: LD_INT 14
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: ST_TO_ADDR
34062: GO 34433
34064: LD_INT 31
34066: DOUBLE
34067: EQUAL
34068: IFTRUE 34072
34070: GO 34090
34072: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34073: LD_ADDR_VAR 0 3
34077: PUSH
34078: LD_INT 13
34080: PUSH
34081: LD_INT 14
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: ST_TO_ADDR
34088: GO 34433
34090: LD_INT 26
34092: DOUBLE
34093: EQUAL
34094: IFTRUE 34098
34096: GO 34116
34098: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34099: LD_ADDR_VAR 0 3
34103: PUSH
34104: LD_INT 13
34106: PUSH
34107: LD_INT 14
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: ST_TO_ADDR
34114: GO 34433
34116: LD_INT 42
34118: DOUBLE
34119: EQUAL
34120: IFTRUE 34124
34122: GO 34150
34124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34125: LD_ADDR_VAR 0 3
34129: PUSH
34130: LD_INT 21
34132: PUSH
34133: LD_INT 22
34135: PUSH
34136: LD_INT 23
34138: PUSH
34139: LD_INT 24
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: ST_TO_ADDR
34148: GO 34433
34150: LD_INT 43
34152: DOUBLE
34153: EQUAL
34154: IFTRUE 34158
34156: GO 34184
34158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34159: LD_ADDR_VAR 0 3
34163: PUSH
34164: LD_INT 21
34166: PUSH
34167: LD_INT 22
34169: PUSH
34170: LD_INT 23
34172: PUSH
34173: LD_INT 24
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: ST_TO_ADDR
34182: GO 34433
34184: LD_INT 44
34186: DOUBLE
34187: EQUAL
34188: IFTRUE 34192
34190: GO 34218
34192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34193: LD_ADDR_VAR 0 3
34197: PUSH
34198: LD_INT 21
34200: PUSH
34201: LD_INT 22
34203: PUSH
34204: LD_INT 23
34206: PUSH
34207: LD_INT 24
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: ST_TO_ADDR
34216: GO 34433
34218: LD_INT 45
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34252
34226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34227: LD_ADDR_VAR 0 3
34231: PUSH
34232: LD_INT 21
34234: PUSH
34235: LD_INT 22
34237: PUSH
34238: LD_INT 23
34240: PUSH
34241: LD_INT 24
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: ST_TO_ADDR
34250: GO 34433
34252: LD_INT 49
34254: DOUBLE
34255: EQUAL
34256: IFTRUE 34260
34258: GO 34286
34260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34261: LD_ADDR_VAR 0 3
34265: PUSH
34266: LD_INT 21
34268: PUSH
34269: LD_INT 22
34271: PUSH
34272: LD_INT 23
34274: PUSH
34275: LD_INT 24
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: ST_TO_ADDR
34284: GO 34433
34286: LD_INT 51
34288: DOUBLE
34289: EQUAL
34290: IFTRUE 34294
34292: GO 34320
34294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34295: LD_ADDR_VAR 0 3
34299: PUSH
34300: LD_INT 21
34302: PUSH
34303: LD_INT 22
34305: PUSH
34306: LD_INT 23
34308: PUSH
34309: LD_INT 24
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: ST_TO_ADDR
34318: GO 34433
34320: LD_INT 52
34322: DOUBLE
34323: EQUAL
34324: IFTRUE 34328
34326: GO 34354
34328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34329: LD_ADDR_VAR 0 3
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 22
34339: PUSH
34340: LD_INT 23
34342: PUSH
34343: LD_INT 24
34345: PUSH
34346: EMPTY
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
34352: GO 34433
34354: LD_INT 53
34356: DOUBLE
34357: EQUAL
34358: IFTRUE 34362
34360: GO 34380
34362: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34363: LD_ADDR_VAR 0 3
34367: PUSH
34368: LD_INT 23
34370: PUSH
34371: LD_INT 24
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: ST_TO_ADDR
34378: GO 34433
34380: LD_INT 46
34382: DOUBLE
34383: EQUAL
34384: IFTRUE 34388
34386: GO 34406
34388: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34389: LD_ADDR_VAR 0 3
34393: PUSH
34394: LD_INT 23
34396: PUSH
34397: LD_INT 24
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: ST_TO_ADDR
34404: GO 34433
34406: LD_INT 47
34408: DOUBLE
34409: EQUAL
34410: IFTRUE 34414
34412: GO 34432
34414: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34415: LD_ADDR_VAR 0 3
34419: PUSH
34420: LD_INT 23
34422: PUSH
34423: LD_INT 24
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: ST_TO_ADDR
34430: GO 34433
34432: POP
// result := ( chassis in result ) ;
34433: LD_ADDR_VAR 0 3
34437: PUSH
34438: LD_VAR 0 1
34442: PUSH
34443: LD_VAR 0 3
34447: IN
34448: ST_TO_ADDR
// end ;
34449: LD_VAR 0 3
34453: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34454: LD_INT 0
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
34460: PPUSH
34461: PPUSH
34462: PPUSH
// result := array ;
34463: LD_ADDR_VAR 0 5
34467: PUSH
34468: LD_VAR 0 1
34472: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34473: LD_VAR 0 1
34477: NOT
34478: PUSH
34479: LD_VAR 0 2
34483: NOT
34484: OR
34485: PUSH
34486: LD_VAR 0 3
34490: NOT
34491: OR
34492: PUSH
34493: LD_VAR 0 2
34497: PUSH
34498: LD_VAR 0 1
34502: GREATER
34503: OR
34504: PUSH
34505: LD_VAR 0 3
34509: PUSH
34510: LD_VAR 0 1
34514: GREATER
34515: OR
34516: IFFALSE 34520
// exit ;
34518: GO 34816
// if direction then
34520: LD_VAR 0 4
34524: IFFALSE 34588
// begin d := 1 ;
34526: LD_ADDR_VAR 0 9
34530: PUSH
34531: LD_INT 1
34533: ST_TO_ADDR
// if i_from > i_to then
34534: LD_VAR 0 2
34538: PUSH
34539: LD_VAR 0 3
34543: GREATER
34544: IFFALSE 34570
// length := ( array - i_from ) + i_to else
34546: LD_ADDR_VAR 0 11
34550: PUSH
34551: LD_VAR 0 1
34555: PUSH
34556: LD_VAR 0 2
34560: MINUS
34561: PUSH
34562: LD_VAR 0 3
34566: PLUS
34567: ST_TO_ADDR
34568: GO 34586
// length := i_to - i_from ;
34570: LD_ADDR_VAR 0 11
34574: PUSH
34575: LD_VAR 0 3
34579: PUSH
34580: LD_VAR 0 2
34584: MINUS
34585: ST_TO_ADDR
// end else
34586: GO 34649
// begin d := - 1 ;
34588: LD_ADDR_VAR 0 9
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: ST_TO_ADDR
// if i_from > i_to then
34597: LD_VAR 0 2
34601: PUSH
34602: LD_VAR 0 3
34606: GREATER
34607: IFFALSE 34627
// length := i_from - i_to else
34609: LD_ADDR_VAR 0 11
34613: PUSH
34614: LD_VAR 0 2
34618: PUSH
34619: LD_VAR 0 3
34623: MINUS
34624: ST_TO_ADDR
34625: GO 34649
// length := ( array - i_to ) + i_from ;
34627: LD_ADDR_VAR 0 11
34631: PUSH
34632: LD_VAR 0 1
34636: PUSH
34637: LD_VAR 0 3
34641: MINUS
34642: PUSH
34643: LD_VAR 0 2
34647: PLUS
34648: ST_TO_ADDR
// end ; if not length then
34649: LD_VAR 0 11
34653: NOT
34654: IFFALSE 34658
// exit ;
34656: GO 34816
// tmp := array ;
34658: LD_ADDR_VAR 0 10
34662: PUSH
34663: LD_VAR 0 1
34667: ST_TO_ADDR
// for i = 1 to length do
34668: LD_ADDR_VAR 0 6
34672: PUSH
34673: DOUBLE
34674: LD_INT 1
34676: DEC
34677: ST_TO_ADDR
34678: LD_VAR 0 11
34682: PUSH
34683: FOR_TO
34684: IFFALSE 34804
// begin for j = 1 to array do
34686: LD_ADDR_VAR 0 7
34690: PUSH
34691: DOUBLE
34692: LD_INT 1
34694: DEC
34695: ST_TO_ADDR
34696: LD_VAR 0 1
34700: PUSH
34701: FOR_TO
34702: IFFALSE 34790
// begin k := j + d ;
34704: LD_ADDR_VAR 0 8
34708: PUSH
34709: LD_VAR 0 7
34713: PUSH
34714: LD_VAR 0 9
34718: PLUS
34719: ST_TO_ADDR
// if k > array then
34720: LD_VAR 0 8
34724: PUSH
34725: LD_VAR 0 1
34729: GREATER
34730: IFFALSE 34740
// k := 1 ;
34732: LD_ADDR_VAR 0 8
34736: PUSH
34737: LD_INT 1
34739: ST_TO_ADDR
// if not k then
34740: LD_VAR 0 8
34744: NOT
34745: IFFALSE 34757
// k := array ;
34747: LD_ADDR_VAR 0 8
34751: PUSH
34752: LD_VAR 0 1
34756: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34757: LD_ADDR_VAR 0 10
34761: PUSH
34762: LD_VAR 0 10
34766: PPUSH
34767: LD_VAR 0 8
34771: PPUSH
34772: LD_VAR 0 1
34776: PUSH
34777: LD_VAR 0 7
34781: ARRAY
34782: PPUSH
34783: CALL_OW 1
34787: ST_TO_ADDR
// end ;
34788: GO 34701
34790: POP
34791: POP
// array := tmp ;
34792: LD_ADDR_VAR 0 1
34796: PUSH
34797: LD_VAR 0 10
34801: ST_TO_ADDR
// end ;
34802: GO 34683
34804: POP
34805: POP
// result := array ;
34806: LD_ADDR_VAR 0 5
34810: PUSH
34811: LD_VAR 0 1
34815: ST_TO_ADDR
// end ;
34816: LD_VAR 0 5
34820: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34821: LD_INT 0
34823: PPUSH
34824: PPUSH
// result := 0 ;
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_INT 0
34832: ST_TO_ADDR
// if not array or not value in array then
34833: LD_VAR 0 1
34837: NOT
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_VAR 0 1
34848: IN
34849: NOT
34850: OR
34851: IFFALSE 34855
// exit ;
34853: GO 34909
// for i = 1 to array do
34855: LD_ADDR_VAR 0 4
34859: PUSH
34860: DOUBLE
34861: LD_INT 1
34863: DEC
34864: ST_TO_ADDR
34865: LD_VAR 0 1
34869: PUSH
34870: FOR_TO
34871: IFFALSE 34907
// if value = array [ i ] then
34873: LD_VAR 0 2
34877: PUSH
34878: LD_VAR 0 1
34882: PUSH
34883: LD_VAR 0 4
34887: ARRAY
34888: EQUAL
34889: IFFALSE 34905
// begin result := i ;
34891: LD_ADDR_VAR 0 3
34895: PUSH
34896: LD_VAR 0 4
34900: ST_TO_ADDR
// exit ;
34901: POP
34902: POP
34903: GO 34909
// end ;
34905: GO 34870
34907: POP
34908: POP
// end ;
34909: LD_VAR 0 3
34913: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34914: LD_INT 0
34916: PPUSH
// vc_chassis := chassis ;
34917: LD_ADDR_OWVAR 37
34921: PUSH
34922: LD_VAR 0 1
34926: ST_TO_ADDR
// vc_engine := engine ;
34927: LD_ADDR_OWVAR 39
34931: PUSH
34932: LD_VAR 0 2
34936: ST_TO_ADDR
// vc_control := control ;
34937: LD_ADDR_OWVAR 38
34941: PUSH
34942: LD_VAR 0 3
34946: ST_TO_ADDR
// vc_weapon := weapon ;
34947: LD_ADDR_OWVAR 40
34951: PUSH
34952: LD_VAR 0 4
34956: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34957: LD_ADDR_OWVAR 41
34961: PUSH
34962: LD_VAR 0 5
34966: ST_TO_ADDR
// end ;
34967: LD_VAR 0 6
34971: RET
// export function WantPlant ( unit ) ; var task ; begin
34972: LD_INT 0
34974: PPUSH
34975: PPUSH
// result := false ;
34976: LD_ADDR_VAR 0 2
34980: PUSH
34981: LD_INT 0
34983: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34984: LD_ADDR_VAR 0 3
34988: PUSH
34989: LD_VAR 0 1
34993: PPUSH
34994: CALL_OW 437
34998: ST_TO_ADDR
// if task then
34999: LD_VAR 0 3
35003: IFFALSE 35031
// if task [ 1 ] [ 1 ] = p then
35005: LD_VAR 0 3
35009: PUSH
35010: LD_INT 1
35012: ARRAY
35013: PUSH
35014: LD_INT 1
35016: ARRAY
35017: PUSH
35018: LD_STRING p
35020: EQUAL
35021: IFFALSE 35031
// result := true ;
35023: LD_ADDR_VAR 0 2
35027: PUSH
35028: LD_INT 1
35030: ST_TO_ADDR
// end ;
35031: LD_VAR 0 2
35035: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35036: LD_INT 0
35038: PPUSH
35039: PPUSH
35040: PPUSH
35041: PPUSH
// if pos < 1 then
35042: LD_VAR 0 2
35046: PUSH
35047: LD_INT 1
35049: LESS
35050: IFFALSE 35054
// exit ;
35052: GO 35357
// if pos = 1 then
35054: LD_VAR 0 2
35058: PUSH
35059: LD_INT 1
35061: EQUAL
35062: IFFALSE 35095
// result := Replace ( arr , pos [ 1 ] , value ) else
35064: LD_ADDR_VAR 0 4
35068: PUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: LD_VAR 0 2
35078: PUSH
35079: LD_INT 1
35081: ARRAY
35082: PPUSH
35083: LD_VAR 0 3
35087: PPUSH
35088: CALL_OW 1
35092: ST_TO_ADDR
35093: GO 35357
// begin tmp := arr ;
35095: LD_ADDR_VAR 0 6
35099: PUSH
35100: LD_VAR 0 1
35104: ST_TO_ADDR
// s_arr := [ tmp ] ;
35105: LD_ADDR_VAR 0 7
35109: PUSH
35110: LD_VAR 0 6
35114: PUSH
35115: EMPTY
35116: LIST
35117: ST_TO_ADDR
// for i = 1 to pos - 1 do
35118: LD_ADDR_VAR 0 5
35122: PUSH
35123: DOUBLE
35124: LD_INT 1
35126: DEC
35127: ST_TO_ADDR
35128: LD_VAR 0 2
35132: PUSH
35133: LD_INT 1
35135: MINUS
35136: PUSH
35137: FOR_TO
35138: IFFALSE 35183
// begin tmp := tmp [ pos [ i ] ] ;
35140: LD_ADDR_VAR 0 6
35144: PUSH
35145: LD_VAR 0 6
35149: PUSH
35150: LD_VAR 0 2
35154: PUSH
35155: LD_VAR 0 5
35159: ARRAY
35160: ARRAY
35161: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35162: LD_ADDR_VAR 0 7
35166: PUSH
35167: LD_VAR 0 7
35171: PUSH
35172: LD_VAR 0 6
35176: PUSH
35177: EMPTY
35178: LIST
35179: ADD
35180: ST_TO_ADDR
// end ;
35181: GO 35137
35183: POP
35184: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35185: LD_ADDR_VAR 0 6
35189: PUSH
35190: LD_VAR 0 6
35194: PPUSH
35195: LD_VAR 0 2
35199: PUSH
35200: LD_VAR 0 2
35204: ARRAY
35205: PPUSH
35206: LD_VAR 0 3
35210: PPUSH
35211: CALL_OW 1
35215: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35216: LD_ADDR_VAR 0 7
35220: PUSH
35221: LD_VAR 0 7
35225: PPUSH
35226: LD_VAR 0 7
35230: PPUSH
35231: LD_VAR 0 6
35235: PPUSH
35236: CALL_OW 1
35240: ST_TO_ADDR
// for i = s_arr downto 2 do
35241: LD_ADDR_VAR 0 5
35245: PUSH
35246: DOUBLE
35247: LD_VAR 0 7
35251: INC
35252: ST_TO_ADDR
35253: LD_INT 2
35255: PUSH
35256: FOR_DOWNTO
35257: IFFALSE 35341
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35259: LD_ADDR_VAR 0 6
35263: PUSH
35264: LD_VAR 0 7
35268: PUSH
35269: LD_VAR 0 5
35273: PUSH
35274: LD_INT 1
35276: MINUS
35277: ARRAY
35278: PPUSH
35279: LD_VAR 0 2
35283: PUSH
35284: LD_VAR 0 5
35288: PUSH
35289: LD_INT 1
35291: MINUS
35292: ARRAY
35293: PPUSH
35294: LD_VAR 0 7
35298: PUSH
35299: LD_VAR 0 5
35303: ARRAY
35304: PPUSH
35305: CALL_OW 1
35309: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35310: LD_ADDR_VAR 0 7
35314: PUSH
35315: LD_VAR 0 7
35319: PPUSH
35320: LD_VAR 0 5
35324: PUSH
35325: LD_INT 1
35327: MINUS
35328: PPUSH
35329: LD_VAR 0 6
35333: PPUSH
35334: CALL_OW 1
35338: ST_TO_ADDR
// end ;
35339: GO 35256
35341: POP
35342: POP
// result := s_arr [ 1 ] ;
35343: LD_ADDR_VAR 0 4
35347: PUSH
35348: LD_VAR 0 7
35352: PUSH
35353: LD_INT 1
35355: ARRAY
35356: ST_TO_ADDR
// end ; end ;
35357: LD_VAR 0 4
35361: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35362: LD_INT 0
35364: PPUSH
35365: PPUSH
// if not list then
35366: LD_VAR 0 1
35370: NOT
35371: IFFALSE 35375
// exit ;
35373: GO 35466
// i := list [ pos1 ] ;
35375: LD_ADDR_VAR 0 5
35379: PUSH
35380: LD_VAR 0 1
35384: PUSH
35385: LD_VAR 0 2
35389: ARRAY
35390: ST_TO_ADDR
// if not i then
35391: LD_VAR 0 5
35395: NOT
35396: IFFALSE 35400
// exit ;
35398: GO 35466
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35400: LD_ADDR_VAR 0 1
35404: PUSH
35405: LD_VAR 0 1
35409: PPUSH
35410: LD_VAR 0 2
35414: PPUSH
35415: LD_VAR 0 1
35419: PUSH
35420: LD_VAR 0 3
35424: ARRAY
35425: PPUSH
35426: CALL_OW 1
35430: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35431: LD_ADDR_VAR 0 1
35435: PUSH
35436: LD_VAR 0 1
35440: PPUSH
35441: LD_VAR 0 3
35445: PPUSH
35446: LD_VAR 0 5
35450: PPUSH
35451: CALL_OW 1
35455: ST_TO_ADDR
// result := list ;
35456: LD_ADDR_VAR 0 4
35460: PUSH
35461: LD_VAR 0 1
35465: ST_TO_ADDR
// end ;
35466: LD_VAR 0 4
35470: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35471: LD_INT 0
35473: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35474: LD_ADDR_VAR 0 5
35478: PUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: CALL_OW 250
35488: PPUSH
35489: LD_VAR 0 1
35493: PPUSH
35494: CALL_OW 251
35498: PPUSH
35499: LD_VAR 0 2
35503: PPUSH
35504: LD_VAR 0 3
35508: PPUSH
35509: LD_VAR 0 4
35513: PPUSH
35514: CALL 35524 0 5
35518: ST_TO_ADDR
// end ;
35519: LD_VAR 0 5
35523: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35524: LD_INT 0
35526: PPUSH
35527: PPUSH
35528: PPUSH
35529: PPUSH
// if not list then
35530: LD_VAR 0 3
35534: NOT
35535: IFFALSE 35539
// exit ;
35537: GO 35927
// result := [ ] ;
35539: LD_ADDR_VAR 0 6
35543: PUSH
35544: EMPTY
35545: ST_TO_ADDR
// for i in list do
35546: LD_ADDR_VAR 0 7
35550: PUSH
35551: LD_VAR 0 3
35555: PUSH
35556: FOR_IN
35557: IFFALSE 35759
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35559: LD_ADDR_VAR 0 9
35563: PUSH
35564: LD_VAR 0 7
35568: PPUSH
35569: LD_VAR 0 1
35573: PPUSH
35574: LD_VAR 0 2
35578: PPUSH
35579: CALL_OW 297
35583: ST_TO_ADDR
// if not result then
35584: LD_VAR 0 6
35588: NOT
35589: IFFALSE 35615
// result := [ [ i , tmp ] ] else
35591: LD_ADDR_VAR 0 6
35595: PUSH
35596: LD_VAR 0 7
35600: PUSH
35601: LD_VAR 0 9
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: EMPTY
35611: LIST
35612: ST_TO_ADDR
35613: GO 35757
// begin if result [ result ] [ 2 ] < tmp then
35615: LD_VAR 0 6
35619: PUSH
35620: LD_VAR 0 6
35624: ARRAY
35625: PUSH
35626: LD_INT 2
35628: ARRAY
35629: PUSH
35630: LD_VAR 0 9
35634: LESS
35635: IFFALSE 35677
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35637: LD_ADDR_VAR 0 6
35641: PUSH
35642: LD_VAR 0 6
35646: PPUSH
35647: LD_VAR 0 6
35651: PUSH
35652: LD_INT 1
35654: PLUS
35655: PPUSH
35656: LD_VAR 0 7
35660: PUSH
35661: LD_VAR 0 9
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PPUSH
35670: CALL_OW 2
35674: ST_TO_ADDR
35675: GO 35757
// for j = 1 to result do
35677: LD_ADDR_VAR 0 8
35681: PUSH
35682: DOUBLE
35683: LD_INT 1
35685: DEC
35686: ST_TO_ADDR
35687: LD_VAR 0 6
35691: PUSH
35692: FOR_TO
35693: IFFALSE 35755
// begin if tmp < result [ j ] [ 2 ] then
35695: LD_VAR 0 9
35699: PUSH
35700: LD_VAR 0 6
35704: PUSH
35705: LD_VAR 0 8
35709: ARRAY
35710: PUSH
35711: LD_INT 2
35713: ARRAY
35714: LESS
35715: IFFALSE 35753
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35717: LD_ADDR_VAR 0 6
35721: PUSH
35722: LD_VAR 0 6
35726: PPUSH
35727: LD_VAR 0 8
35731: PPUSH
35732: LD_VAR 0 7
35736: PUSH
35737: LD_VAR 0 9
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PPUSH
35746: CALL_OW 2
35750: ST_TO_ADDR
// break ;
35751: GO 35755
// end ; end ;
35753: GO 35692
35755: POP
35756: POP
// end ; end ;
35757: GO 35556
35759: POP
35760: POP
// if result and not asc then
35761: LD_VAR 0 6
35765: PUSH
35766: LD_VAR 0 4
35770: NOT
35771: AND
35772: IFFALSE 35847
// begin tmp := result ;
35774: LD_ADDR_VAR 0 9
35778: PUSH
35779: LD_VAR 0 6
35783: ST_TO_ADDR
// for i = tmp downto 1 do
35784: LD_ADDR_VAR 0 7
35788: PUSH
35789: DOUBLE
35790: LD_VAR 0 9
35794: INC
35795: ST_TO_ADDR
35796: LD_INT 1
35798: PUSH
35799: FOR_DOWNTO
35800: IFFALSE 35845
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35802: LD_ADDR_VAR 0 6
35806: PUSH
35807: LD_VAR 0 6
35811: PPUSH
35812: LD_VAR 0 9
35816: PUSH
35817: LD_VAR 0 7
35821: MINUS
35822: PUSH
35823: LD_INT 1
35825: PLUS
35826: PPUSH
35827: LD_VAR 0 9
35831: PUSH
35832: LD_VAR 0 7
35836: ARRAY
35837: PPUSH
35838: CALL_OW 1
35842: ST_TO_ADDR
35843: GO 35799
35845: POP
35846: POP
// end ; tmp := [ ] ;
35847: LD_ADDR_VAR 0 9
35851: PUSH
35852: EMPTY
35853: ST_TO_ADDR
// if mode then
35854: LD_VAR 0 5
35858: IFFALSE 35927
// begin for i = 1 to result do
35860: LD_ADDR_VAR 0 7
35864: PUSH
35865: DOUBLE
35866: LD_INT 1
35868: DEC
35869: ST_TO_ADDR
35870: LD_VAR 0 6
35874: PUSH
35875: FOR_TO
35876: IFFALSE 35915
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35878: LD_ADDR_VAR 0 9
35882: PUSH
35883: LD_VAR 0 9
35887: PPUSH
35888: LD_VAR 0 7
35892: PPUSH
35893: LD_VAR 0 6
35897: PUSH
35898: LD_VAR 0 7
35902: ARRAY
35903: PUSH
35904: LD_INT 1
35906: ARRAY
35907: PPUSH
35908: CALL_OW 1
35912: ST_TO_ADDR
35913: GO 35875
35915: POP
35916: POP
// result := tmp ;
35917: LD_ADDR_VAR 0 6
35921: PUSH
35922: LD_VAR 0 9
35926: ST_TO_ADDR
// end ; end ;
35927: LD_VAR 0 6
35931: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35932: LD_INT 0
35934: PPUSH
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
35939: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35940: LD_ADDR_VAR 0 5
35944: PUSH
35945: LD_INT 0
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: ST_TO_ADDR
// if not x or not y then
35962: LD_VAR 0 2
35966: NOT
35967: PUSH
35968: LD_VAR 0 3
35972: NOT
35973: OR
35974: IFFALSE 35978
// exit ;
35976: GO 37630
// if not range then
35978: LD_VAR 0 4
35982: NOT
35983: IFFALSE 35993
// range := 10 ;
35985: LD_ADDR_VAR 0 4
35989: PUSH
35990: LD_INT 10
35992: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35993: LD_ADDR_VAR 0 8
35997: PUSH
35998: LD_INT 81
36000: PUSH
36001: LD_VAR 0 1
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 92
36012: PUSH
36013: LD_VAR 0 2
36017: PUSH
36018: LD_VAR 0 3
36022: PUSH
36023: LD_VAR 0 4
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: LD_INT 21
36039: PUSH
36040: LD_INT 3
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: LIST
36055: PPUSH
36056: CALL_OW 69
36060: ST_TO_ADDR
// if not tmp then
36061: LD_VAR 0 8
36065: NOT
36066: IFFALSE 36070
// exit ;
36068: GO 37630
// for i in tmp do
36070: LD_ADDR_VAR 0 6
36074: PUSH
36075: LD_VAR 0 8
36079: PUSH
36080: FOR_IN
36081: IFFALSE 37605
// begin points := [ 0 , 0 , 0 ] ;
36083: LD_ADDR_VAR 0 9
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 0
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
// bpoints := 1 ;
36102: LD_ADDR_VAR 0 10
36106: PUSH
36107: LD_INT 1
36109: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36110: LD_VAR 0 6
36114: PPUSH
36115: CALL_OW 247
36119: PUSH
36120: LD_INT 1
36122: DOUBLE
36123: EQUAL
36124: IFTRUE 36128
36126: GO 36706
36128: POP
// begin if GetClass ( i ) = 1 then
36129: LD_VAR 0 6
36133: PPUSH
36134: CALL_OW 257
36138: PUSH
36139: LD_INT 1
36141: EQUAL
36142: IFFALSE 36163
// points := [ 10 , 5 , 3 ] ;
36144: LD_ADDR_VAR 0 9
36148: PUSH
36149: LD_INT 10
36151: PUSH
36152: LD_INT 5
36154: PUSH
36155: LD_INT 3
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36163: LD_VAR 0 6
36167: PPUSH
36168: CALL_OW 257
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: LD_INT 3
36178: PUSH
36179: LD_INT 4
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: LIST
36186: IN
36187: IFFALSE 36208
// points := [ 3 , 2 , 1 ] ;
36189: LD_ADDR_VAR 0 9
36193: PUSH
36194: LD_INT 3
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36208: LD_VAR 0 6
36212: PPUSH
36213: CALL_OW 257
36217: PUSH
36218: LD_INT 5
36220: EQUAL
36221: IFFALSE 36242
// points := [ 130 , 5 , 2 ] ;
36223: LD_ADDR_VAR 0 9
36227: PUSH
36228: LD_INT 130
36230: PUSH
36231: LD_INT 5
36233: PUSH
36234: LD_INT 2
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: LIST
36241: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36242: LD_VAR 0 6
36246: PPUSH
36247: CALL_OW 257
36251: PUSH
36252: LD_INT 8
36254: EQUAL
36255: IFFALSE 36276
// points := [ 35 , 35 , 30 ] ;
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: LD_INT 35
36264: PUSH
36265: LD_INT 35
36267: PUSH
36268: LD_INT 30
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36276: LD_VAR 0 6
36280: PPUSH
36281: CALL_OW 257
36285: PUSH
36286: LD_INT 9
36288: EQUAL
36289: IFFALSE 36310
// points := [ 20 , 55 , 40 ] ;
36291: LD_ADDR_VAR 0 9
36295: PUSH
36296: LD_INT 20
36298: PUSH
36299: LD_INT 55
36301: PUSH
36302: LD_INT 40
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: LIST
36309: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36310: LD_VAR 0 6
36314: PPUSH
36315: CALL_OW 257
36319: PUSH
36320: LD_INT 12
36322: PUSH
36323: LD_INT 16
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: IN
36330: IFFALSE 36351
// points := [ 5 , 3 , 2 ] ;
36332: LD_ADDR_VAR 0 9
36336: PUSH
36337: LD_INT 5
36339: PUSH
36340: LD_INT 3
36342: PUSH
36343: LD_INT 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36351: LD_VAR 0 6
36355: PPUSH
36356: CALL_OW 257
36360: PUSH
36361: LD_INT 17
36363: EQUAL
36364: IFFALSE 36385
// points := [ 100 , 50 , 75 ] ;
36366: LD_ADDR_VAR 0 9
36370: PUSH
36371: LD_INT 100
36373: PUSH
36374: LD_INT 50
36376: PUSH
36377: LD_INT 75
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36385: LD_VAR 0 6
36389: PPUSH
36390: CALL_OW 257
36394: PUSH
36395: LD_INT 15
36397: EQUAL
36398: IFFALSE 36419
// points := [ 10 , 5 , 3 ] ;
36400: LD_ADDR_VAR 0 9
36404: PUSH
36405: LD_INT 10
36407: PUSH
36408: LD_INT 5
36410: PUSH
36411: LD_INT 3
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36419: LD_VAR 0 6
36423: PPUSH
36424: CALL_OW 257
36428: PUSH
36429: LD_INT 14
36431: EQUAL
36432: IFFALSE 36453
// points := [ 10 , 0 , 0 ] ;
36434: LD_ADDR_VAR 0 9
36438: PUSH
36439: LD_INT 10
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 0
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36453: LD_VAR 0 6
36457: PPUSH
36458: CALL_OW 257
36462: PUSH
36463: LD_INT 11
36465: EQUAL
36466: IFFALSE 36487
// points := [ 30 , 10 , 5 ] ;
36468: LD_ADDR_VAR 0 9
36472: PUSH
36473: LD_INT 30
36475: PUSH
36476: LD_INT 10
36478: PUSH
36479: LD_INT 5
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36487: LD_VAR 0 1
36491: PPUSH
36492: LD_INT 5
36494: PPUSH
36495: CALL_OW 321
36499: PUSH
36500: LD_INT 2
36502: EQUAL
36503: IFFALSE 36520
// bpoints := bpoints * 1.8 ;
36505: LD_ADDR_VAR 0 10
36509: PUSH
36510: LD_VAR 0 10
36514: PUSH
36515: LD_REAL  1.80000000000000E+0000
36518: MUL
36519: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36520: LD_VAR 0 6
36524: PPUSH
36525: CALL_OW 257
36529: PUSH
36530: LD_INT 1
36532: PUSH
36533: LD_INT 2
36535: PUSH
36536: LD_INT 3
36538: PUSH
36539: LD_INT 4
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: IN
36548: PUSH
36549: LD_VAR 0 1
36553: PPUSH
36554: LD_INT 51
36556: PPUSH
36557: CALL_OW 321
36561: PUSH
36562: LD_INT 2
36564: EQUAL
36565: AND
36566: IFFALSE 36583
// bpoints := bpoints * 1.2 ;
36568: LD_ADDR_VAR 0 10
36572: PUSH
36573: LD_VAR 0 10
36577: PUSH
36578: LD_REAL  1.20000000000000E+0000
36581: MUL
36582: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36583: LD_VAR 0 6
36587: PPUSH
36588: CALL_OW 257
36592: PUSH
36593: LD_INT 5
36595: PUSH
36596: LD_INT 7
36598: PUSH
36599: LD_INT 9
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: LIST
36606: IN
36607: PUSH
36608: LD_VAR 0 1
36612: PPUSH
36613: LD_INT 52
36615: PPUSH
36616: CALL_OW 321
36620: PUSH
36621: LD_INT 2
36623: EQUAL
36624: AND
36625: IFFALSE 36642
// bpoints := bpoints * 1.5 ;
36627: LD_ADDR_VAR 0 10
36631: PUSH
36632: LD_VAR 0 10
36636: PUSH
36637: LD_REAL  1.50000000000000E+0000
36640: MUL
36641: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36642: LD_VAR 0 1
36646: PPUSH
36647: LD_INT 66
36649: PPUSH
36650: CALL_OW 321
36654: PUSH
36655: LD_INT 2
36657: EQUAL
36658: IFFALSE 36675
// bpoints := bpoints * 1.1 ;
36660: LD_ADDR_VAR 0 10
36664: PUSH
36665: LD_VAR 0 10
36669: PUSH
36670: LD_REAL  1.10000000000000E+0000
36673: MUL
36674: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36675: LD_ADDR_VAR 0 10
36679: PUSH
36680: LD_VAR 0 10
36684: PUSH
36685: LD_VAR 0 6
36689: PPUSH
36690: LD_INT 1
36692: PPUSH
36693: CALL_OW 259
36697: PUSH
36698: LD_REAL  1.15000000000000E+0000
36701: MUL
36702: MUL
36703: ST_TO_ADDR
// end ; unit_vehicle :
36704: GO 37534
36706: LD_INT 2
36708: DOUBLE
36709: EQUAL
36710: IFTRUE 36714
36712: GO 37522
36714: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36715: LD_VAR 0 6
36719: PPUSH
36720: CALL_OW 264
36724: PUSH
36725: LD_INT 2
36727: PUSH
36728: LD_INT 42
36730: PUSH
36731: LD_INT 24
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: LIST
36738: IN
36739: IFFALSE 36760
// points := [ 25 , 5 , 3 ] ;
36741: LD_ADDR_VAR 0 9
36745: PUSH
36746: LD_INT 25
36748: PUSH
36749: LD_INT 5
36751: PUSH
36752: LD_INT 3
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36760: LD_VAR 0 6
36764: PPUSH
36765: CALL_OW 264
36769: PUSH
36770: LD_INT 4
36772: PUSH
36773: LD_INT 43
36775: PUSH
36776: LD_INT 25
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: IN
36784: IFFALSE 36805
// points := [ 40 , 15 , 5 ] ;
36786: LD_ADDR_VAR 0 9
36790: PUSH
36791: LD_INT 40
36793: PUSH
36794: LD_INT 15
36796: PUSH
36797: LD_INT 5
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36805: LD_VAR 0 6
36809: PPUSH
36810: CALL_OW 264
36814: PUSH
36815: LD_INT 3
36817: PUSH
36818: LD_INT 23
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: IN
36825: IFFALSE 36846
// points := [ 7 , 25 , 8 ] ;
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: LD_INT 7
36834: PUSH
36835: LD_INT 25
36837: PUSH
36838: LD_INT 8
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36846: LD_VAR 0 6
36850: PPUSH
36851: CALL_OW 264
36855: PUSH
36856: LD_INT 5
36858: PUSH
36859: LD_INT 27
36861: PUSH
36862: LD_INT 44
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: LIST
36869: IN
36870: IFFALSE 36891
// points := [ 14 , 50 , 16 ] ;
36872: LD_ADDR_VAR 0 9
36876: PUSH
36877: LD_INT 14
36879: PUSH
36880: LD_INT 50
36882: PUSH
36883: LD_INT 16
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 264
36900: PUSH
36901: LD_INT 6
36903: PUSH
36904: LD_INT 46
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: IN
36911: IFFALSE 36932
// points := [ 32 , 120 , 70 ] ;
36913: LD_ADDR_VAR 0 9
36917: PUSH
36918: LD_INT 32
36920: PUSH
36921: LD_INT 120
36923: PUSH
36924: LD_INT 70
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: LIST
36931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36932: LD_VAR 0 6
36936: PPUSH
36937: CALL_OW 264
36941: PUSH
36942: LD_INT 7
36944: PUSH
36945: LD_INT 28
36947: PUSH
36948: LD_INT 45
36950: PUSH
36951: LD_EXP 37
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: IN
36962: IFFALSE 36983
// points := [ 35 , 20 , 45 ] ;
36964: LD_ADDR_VAR 0 9
36968: PUSH
36969: LD_INT 35
36971: PUSH
36972: LD_INT 20
36974: PUSH
36975: LD_INT 45
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36983: LD_VAR 0 6
36987: PPUSH
36988: CALL_OW 264
36992: PUSH
36993: LD_INT 47
36995: PUSH
36996: EMPTY
36997: LIST
36998: IN
36999: IFFALSE 37020
// points := [ 67 , 45 , 75 ] ;
37001: LD_ADDR_VAR 0 9
37005: PUSH
37006: LD_INT 67
37008: PUSH
37009: LD_INT 45
37011: PUSH
37012: LD_INT 75
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: LIST
37019: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37020: LD_VAR 0 6
37024: PPUSH
37025: CALL_OW 264
37029: PUSH
37030: LD_INT 26
37032: PUSH
37033: EMPTY
37034: LIST
37035: IN
37036: IFFALSE 37057
// points := [ 120 , 30 , 80 ] ;
37038: LD_ADDR_VAR 0 9
37042: PUSH
37043: LD_INT 120
37045: PUSH
37046: LD_INT 30
37048: PUSH
37049: LD_INT 80
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37057: LD_VAR 0 6
37061: PPUSH
37062: CALL_OW 264
37066: PUSH
37067: LD_INT 22
37069: PUSH
37070: EMPTY
37071: LIST
37072: IN
37073: IFFALSE 37094
// points := [ 40 , 1 , 1 ] ;
37075: LD_ADDR_VAR 0 9
37079: PUSH
37080: LD_INT 40
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37094: LD_VAR 0 6
37098: PPUSH
37099: CALL_OW 264
37103: PUSH
37104: LD_INT 29
37106: PUSH
37107: EMPTY
37108: LIST
37109: IN
37110: IFFALSE 37131
// points := [ 70 , 200 , 400 ] ;
37112: LD_ADDR_VAR 0 9
37116: PUSH
37117: LD_INT 70
37119: PUSH
37120: LD_INT 200
37122: PUSH
37123: LD_INT 400
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37131: LD_VAR 0 6
37135: PPUSH
37136: CALL_OW 264
37140: PUSH
37141: LD_INT 14
37143: PUSH
37144: LD_INT 53
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: IN
37151: IFFALSE 37172
// points := [ 40 , 10 , 20 ] ;
37153: LD_ADDR_VAR 0 9
37157: PUSH
37158: LD_INT 40
37160: PUSH
37161: LD_INT 10
37163: PUSH
37164: LD_INT 20
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: LIST
37171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37172: LD_VAR 0 6
37176: PPUSH
37177: CALL_OW 264
37181: PUSH
37182: LD_INT 9
37184: PUSH
37185: EMPTY
37186: LIST
37187: IN
37188: IFFALSE 37209
// points := [ 5 , 70 , 20 ] ;
37190: LD_ADDR_VAR 0 9
37194: PUSH
37195: LD_INT 5
37197: PUSH
37198: LD_INT 70
37200: PUSH
37201: LD_INT 20
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: LIST
37208: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37209: LD_VAR 0 6
37213: PPUSH
37214: CALL_OW 264
37218: PUSH
37219: LD_INT 10
37221: PUSH
37222: EMPTY
37223: LIST
37224: IN
37225: IFFALSE 37246
// points := [ 35 , 110 , 70 ] ;
37227: LD_ADDR_VAR 0 9
37231: PUSH
37232: LD_INT 35
37234: PUSH
37235: LD_INT 110
37237: PUSH
37238: LD_INT 70
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: LIST
37245: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37246: LD_VAR 0 6
37250: PPUSH
37251: CALL_OW 265
37255: PUSH
37256: LD_INT 25
37258: EQUAL
37259: IFFALSE 37280
// points := [ 80 , 65 , 100 ] ;
37261: LD_ADDR_VAR 0 9
37265: PUSH
37266: LD_INT 80
37268: PUSH
37269: LD_INT 65
37271: PUSH
37272: LD_INT 100
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: LIST
37279: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37280: LD_VAR 0 6
37284: PPUSH
37285: CALL_OW 263
37289: PUSH
37290: LD_INT 1
37292: EQUAL
37293: IFFALSE 37328
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37295: LD_ADDR_VAR 0 10
37299: PUSH
37300: LD_VAR 0 10
37304: PUSH
37305: LD_VAR 0 6
37309: PPUSH
37310: CALL_OW 311
37314: PPUSH
37315: LD_INT 3
37317: PPUSH
37318: CALL_OW 259
37322: PUSH
37323: LD_INT 4
37325: MUL
37326: MUL
37327: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37328: LD_VAR 0 6
37332: PPUSH
37333: CALL_OW 263
37337: PUSH
37338: LD_INT 2
37340: EQUAL
37341: IFFALSE 37392
// begin j := IsControledBy ( i ) ;
37343: LD_ADDR_VAR 0 7
37347: PUSH
37348: LD_VAR 0 6
37352: PPUSH
37353: CALL_OW 312
37357: ST_TO_ADDR
// if j then
37358: LD_VAR 0 7
37362: IFFALSE 37392
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37364: LD_ADDR_VAR 0 10
37368: PUSH
37369: LD_VAR 0 10
37373: PUSH
37374: LD_VAR 0 7
37378: PPUSH
37379: LD_INT 3
37381: PPUSH
37382: CALL_OW 259
37386: PUSH
37387: LD_INT 3
37389: MUL
37390: MUL
37391: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37392: LD_VAR 0 6
37396: PPUSH
37397: CALL_OW 264
37401: PUSH
37402: LD_INT 5
37404: PUSH
37405: LD_INT 6
37407: PUSH
37408: LD_INT 46
37410: PUSH
37411: LD_INT 44
37413: PUSH
37414: LD_INT 47
37416: PUSH
37417: LD_INT 45
37419: PUSH
37420: LD_INT 28
37422: PUSH
37423: LD_INT 7
37425: PUSH
37426: LD_INT 27
37428: PUSH
37429: LD_INT 29
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: LIST
37436: LIST
37437: LIST
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: IN
37444: PUSH
37445: LD_VAR 0 1
37449: PPUSH
37450: LD_INT 52
37452: PPUSH
37453: CALL_OW 321
37457: PUSH
37458: LD_INT 2
37460: EQUAL
37461: AND
37462: IFFALSE 37479
// bpoints := bpoints * 1.2 ;
37464: LD_ADDR_VAR 0 10
37468: PUSH
37469: LD_VAR 0 10
37473: PUSH
37474: LD_REAL  1.20000000000000E+0000
37477: MUL
37478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37479: LD_VAR 0 6
37483: PPUSH
37484: CALL_OW 264
37488: PUSH
37489: LD_INT 6
37491: PUSH
37492: LD_INT 46
37494: PUSH
37495: LD_INT 47
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: IN
37503: IFFALSE 37520
// bpoints := bpoints * 1.2 ;
37505: LD_ADDR_VAR 0 10
37509: PUSH
37510: LD_VAR 0 10
37514: PUSH
37515: LD_REAL  1.20000000000000E+0000
37518: MUL
37519: ST_TO_ADDR
// end ; unit_building :
37520: GO 37534
37522: LD_INT 3
37524: DOUBLE
37525: EQUAL
37526: IFTRUE 37530
37528: GO 37533
37530: POP
// ; end ;
37531: GO 37534
37533: POP
// for j = 1 to 3 do
37534: LD_ADDR_VAR 0 7
37538: PUSH
37539: DOUBLE
37540: LD_INT 1
37542: DEC
37543: ST_TO_ADDR
37544: LD_INT 3
37546: PUSH
37547: FOR_TO
37548: IFFALSE 37601
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37550: LD_ADDR_VAR 0 5
37554: PUSH
37555: LD_VAR 0 5
37559: PPUSH
37560: LD_VAR 0 7
37564: PPUSH
37565: LD_VAR 0 5
37569: PUSH
37570: LD_VAR 0 7
37574: ARRAY
37575: PUSH
37576: LD_VAR 0 9
37580: PUSH
37581: LD_VAR 0 7
37585: ARRAY
37586: PUSH
37587: LD_VAR 0 10
37591: MUL
37592: PLUS
37593: PPUSH
37594: CALL_OW 1
37598: ST_TO_ADDR
37599: GO 37547
37601: POP
37602: POP
// end ;
37603: GO 36080
37605: POP
37606: POP
// result := Replace ( result , 4 , tmp ) ;
37607: LD_ADDR_VAR 0 5
37611: PUSH
37612: LD_VAR 0 5
37616: PPUSH
37617: LD_INT 4
37619: PPUSH
37620: LD_VAR 0 8
37624: PPUSH
37625: CALL_OW 1
37629: ST_TO_ADDR
// end ;
37630: LD_VAR 0 5
37634: RET
// export function DangerAtRange ( unit , range ) ; begin
37635: LD_INT 0
37637: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_VAR 0 1
37647: PPUSH
37648: CALL_OW 255
37652: PPUSH
37653: LD_VAR 0 1
37657: PPUSH
37658: CALL_OW 250
37662: PPUSH
37663: LD_VAR 0 1
37667: PPUSH
37668: CALL_OW 251
37672: PPUSH
37673: LD_VAR 0 2
37677: PPUSH
37678: CALL 35932 0 4
37682: ST_TO_ADDR
// end ;
37683: LD_VAR 0 3
37687: RET
// export function DangerInArea ( side , area ) ; begin
37688: LD_INT 0
37690: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37691: LD_ADDR_VAR 0 3
37695: PUSH
37696: LD_VAR 0 2
37700: PPUSH
37701: LD_INT 81
37703: PUSH
37704: LD_VAR 0 1
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PPUSH
37713: CALL_OW 70
37717: ST_TO_ADDR
// end ;
37718: LD_VAR 0 3
37722: RET
// export function IsExtension ( b ) ; begin
37723: LD_INT 0
37725: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37726: LD_ADDR_VAR 0 2
37730: PUSH
37731: LD_VAR 0 1
37735: PUSH
37736: LD_INT 23
37738: PUSH
37739: LD_INT 20
37741: PUSH
37742: LD_INT 22
37744: PUSH
37745: LD_INT 17
37747: PUSH
37748: LD_INT 24
37750: PUSH
37751: LD_INT 21
37753: PUSH
37754: LD_INT 19
37756: PUSH
37757: LD_INT 16
37759: PUSH
37760: LD_INT 25
37762: PUSH
37763: LD_INT 18
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: IN
37778: ST_TO_ADDR
// end ;
37779: LD_VAR 0 2
37783: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37784: LD_INT 0
37786: PPUSH
37787: PPUSH
37788: PPUSH
// result := [ ] ;
37789: LD_ADDR_VAR 0 4
37793: PUSH
37794: EMPTY
37795: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37796: LD_ADDR_VAR 0 5
37800: PUSH
37801: LD_VAR 0 2
37805: PPUSH
37806: LD_INT 21
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PPUSH
37816: CALL_OW 70
37820: ST_TO_ADDR
// if not tmp then
37821: LD_VAR 0 5
37825: NOT
37826: IFFALSE 37830
// exit ;
37828: GO 37894
// if checkLink then
37830: LD_VAR 0 3
37834: IFFALSE 37884
// begin for i in tmp do
37836: LD_ADDR_VAR 0 6
37840: PUSH
37841: LD_VAR 0 5
37845: PUSH
37846: FOR_IN
37847: IFFALSE 37882
// if GetBase ( i ) <> base then
37849: LD_VAR 0 6
37853: PPUSH
37854: CALL_OW 274
37858: PUSH
37859: LD_VAR 0 1
37863: NONEQUAL
37864: IFFALSE 37880
// ComLinkToBase ( base , i ) ;
37866: LD_VAR 0 1
37870: PPUSH
37871: LD_VAR 0 6
37875: PPUSH
37876: CALL_OW 169
37880: GO 37846
37882: POP
37883: POP
// end ; result := tmp ;
37884: LD_ADDR_VAR 0 4
37888: PUSH
37889: LD_VAR 0 5
37893: ST_TO_ADDR
// end ;
37894: LD_VAR 0 4
37898: RET
// export function ComComplete ( units , b ) ; var i ; begin
37899: LD_INT 0
37901: PPUSH
37902: PPUSH
// if not units then
37903: LD_VAR 0 1
37907: NOT
37908: IFFALSE 37912
// exit ;
37910: GO 38002
// for i in units do
37912: LD_ADDR_VAR 0 4
37916: PUSH
37917: LD_VAR 0 1
37921: PUSH
37922: FOR_IN
37923: IFFALSE 38000
// if BuildingStatus ( b ) = bs_build then
37925: LD_VAR 0 2
37929: PPUSH
37930: CALL_OW 461
37934: PUSH
37935: LD_INT 1
37937: EQUAL
37938: IFFALSE 37998
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37940: LD_VAR 0 4
37944: PPUSH
37945: LD_STRING h
37947: PUSH
37948: LD_VAR 0 2
37952: PPUSH
37953: CALL_OW 250
37957: PUSH
37958: LD_VAR 0 2
37962: PPUSH
37963: CALL_OW 251
37967: PUSH
37968: LD_VAR 0 2
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: LD_INT 0
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: PPUSH
37994: CALL_OW 446
37998: GO 37922
38000: POP
38001: POP
// end ;
38002: LD_VAR 0 3
38006: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38007: LD_INT 0
38009: PPUSH
38010: PPUSH
38011: PPUSH
38012: PPUSH
38013: PPUSH
38014: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38015: LD_VAR 0 1
38019: NOT
38020: PUSH
38021: LD_VAR 0 1
38025: PPUSH
38026: CALL_OW 263
38030: PUSH
38031: LD_INT 2
38033: NONEQUAL
38034: OR
38035: IFFALSE 38039
// exit ;
38037: GO 38355
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38039: LD_ADDR_VAR 0 6
38043: PUSH
38044: LD_INT 22
38046: PUSH
38047: LD_VAR 0 1
38051: PPUSH
38052: CALL_OW 255
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: LD_INT 30
38066: PUSH
38067: LD_INT 36
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 34
38076: PUSH
38077: LD_INT 31
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PPUSH
38093: CALL_OW 69
38097: ST_TO_ADDR
// if not tmp then
38098: LD_VAR 0 6
38102: NOT
38103: IFFALSE 38107
// exit ;
38105: GO 38355
// result := [ ] ;
38107: LD_ADDR_VAR 0 2
38111: PUSH
38112: EMPTY
38113: ST_TO_ADDR
// for i in tmp do
38114: LD_ADDR_VAR 0 3
38118: PUSH
38119: LD_VAR 0 6
38123: PUSH
38124: FOR_IN
38125: IFFALSE 38196
// begin t := UnitsInside ( i ) ;
38127: LD_ADDR_VAR 0 4
38131: PUSH
38132: LD_VAR 0 3
38136: PPUSH
38137: CALL_OW 313
38141: ST_TO_ADDR
// if t then
38142: LD_VAR 0 4
38146: IFFALSE 38194
// for j in t do
38148: LD_ADDR_VAR 0 7
38152: PUSH
38153: LD_VAR 0 4
38157: PUSH
38158: FOR_IN
38159: IFFALSE 38192
// result := Replace ( result , result + 1 , j ) ;
38161: LD_ADDR_VAR 0 2
38165: PUSH
38166: LD_VAR 0 2
38170: PPUSH
38171: LD_VAR 0 2
38175: PUSH
38176: LD_INT 1
38178: PLUS
38179: PPUSH
38180: LD_VAR 0 7
38184: PPUSH
38185: CALL_OW 1
38189: ST_TO_ADDR
38190: GO 38158
38192: POP
38193: POP
// end ;
38194: GO 38124
38196: POP
38197: POP
// if not result then
38198: LD_VAR 0 2
38202: NOT
38203: IFFALSE 38207
// exit ;
38205: GO 38355
// mech := result [ 1 ] ;
38207: LD_ADDR_VAR 0 5
38211: PUSH
38212: LD_VAR 0 2
38216: PUSH
38217: LD_INT 1
38219: ARRAY
38220: ST_TO_ADDR
// if result > 1 then
38221: LD_VAR 0 2
38225: PUSH
38226: LD_INT 1
38228: GREATER
38229: IFFALSE 38341
// begin for i = 2 to result do
38231: LD_ADDR_VAR 0 3
38235: PUSH
38236: DOUBLE
38237: LD_INT 2
38239: DEC
38240: ST_TO_ADDR
38241: LD_VAR 0 2
38245: PUSH
38246: FOR_TO
38247: IFFALSE 38339
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38249: LD_ADDR_VAR 0 4
38253: PUSH
38254: LD_VAR 0 2
38258: PUSH
38259: LD_VAR 0 3
38263: ARRAY
38264: PPUSH
38265: LD_INT 3
38267: PPUSH
38268: CALL_OW 259
38272: PUSH
38273: LD_VAR 0 2
38277: PUSH
38278: LD_VAR 0 3
38282: ARRAY
38283: PPUSH
38284: CALL_OW 432
38288: MINUS
38289: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38290: LD_VAR 0 4
38294: PUSH
38295: LD_VAR 0 5
38299: PPUSH
38300: LD_INT 3
38302: PPUSH
38303: CALL_OW 259
38307: PUSH
38308: LD_VAR 0 5
38312: PPUSH
38313: CALL_OW 432
38317: MINUS
38318: GREATEREQUAL
38319: IFFALSE 38337
// mech := result [ i ] ;
38321: LD_ADDR_VAR 0 5
38325: PUSH
38326: LD_VAR 0 2
38330: PUSH
38331: LD_VAR 0 3
38335: ARRAY
38336: ST_TO_ADDR
// end ;
38337: GO 38246
38339: POP
38340: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38341: LD_VAR 0 1
38345: PPUSH
38346: LD_VAR 0 5
38350: PPUSH
38351: CALL_OW 135
// end ;
38355: LD_VAR 0 2
38359: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38360: LD_INT 0
38362: PPUSH
38363: PPUSH
38364: PPUSH
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
38371: PPUSH
38372: PPUSH
38373: PPUSH
38374: PPUSH
// result := [ ] ;
38375: LD_ADDR_VAR 0 7
38379: PUSH
38380: EMPTY
38381: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38382: LD_VAR 0 1
38386: PPUSH
38387: CALL_OW 266
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: IN
38402: NOT
38403: IFFALSE 38407
// exit ;
38405: GO 40041
// if name then
38407: LD_VAR 0 3
38411: IFFALSE 38427
// SetBName ( base_dep , name ) ;
38413: LD_VAR 0 1
38417: PPUSH
38418: LD_VAR 0 3
38422: PPUSH
38423: CALL_OW 500
// base := GetBase ( base_dep ) ;
38427: LD_ADDR_VAR 0 15
38431: PUSH
38432: LD_VAR 0 1
38436: PPUSH
38437: CALL_OW 274
38441: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38442: LD_ADDR_VAR 0 16
38446: PUSH
38447: LD_VAR 0 1
38451: PPUSH
38452: CALL_OW 255
38456: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38457: LD_ADDR_VAR 0 17
38461: PUSH
38462: LD_VAR 0 1
38466: PPUSH
38467: CALL_OW 248
38471: ST_TO_ADDR
// if sources then
38472: LD_VAR 0 5
38476: IFFALSE 38523
// for i = 1 to 3 do
38478: LD_ADDR_VAR 0 8
38482: PUSH
38483: DOUBLE
38484: LD_INT 1
38486: DEC
38487: ST_TO_ADDR
38488: LD_INT 3
38490: PUSH
38491: FOR_TO
38492: IFFALSE 38521
// AddResourceType ( base , i , sources [ i ] ) ;
38494: LD_VAR 0 15
38498: PPUSH
38499: LD_VAR 0 8
38503: PPUSH
38504: LD_VAR 0 5
38508: PUSH
38509: LD_VAR 0 8
38513: ARRAY
38514: PPUSH
38515: CALL_OW 276
38519: GO 38491
38521: POP
38522: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38523: LD_ADDR_VAR 0 18
38527: PUSH
38528: LD_VAR 0 15
38532: PPUSH
38533: LD_VAR 0 2
38537: PPUSH
38538: LD_INT 1
38540: PPUSH
38541: CALL 37784 0 3
38545: ST_TO_ADDR
// InitHc ;
38546: CALL_OW 19
// InitUc ;
38550: CALL_OW 18
// uc_side := side ;
38554: LD_ADDR_OWVAR 20
38558: PUSH
38559: LD_VAR 0 16
38563: ST_TO_ADDR
// uc_nation := nation ;
38564: LD_ADDR_OWVAR 21
38568: PUSH
38569: LD_VAR 0 17
38573: ST_TO_ADDR
// if buildings then
38574: LD_VAR 0 18
38578: IFFALSE 39900
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38580: LD_ADDR_VAR 0 19
38584: PUSH
38585: LD_VAR 0 18
38589: PPUSH
38590: LD_INT 2
38592: PUSH
38593: LD_INT 30
38595: PUSH
38596: LD_INT 29
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 30
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: PPUSH
38618: CALL_OW 72
38622: ST_TO_ADDR
// if tmp then
38623: LD_VAR 0 19
38627: IFFALSE 38675
// for i in tmp do
38629: LD_ADDR_VAR 0 8
38633: PUSH
38634: LD_VAR 0 19
38638: PUSH
38639: FOR_IN
38640: IFFALSE 38673
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38642: LD_VAR 0 8
38646: PPUSH
38647: CALL_OW 250
38651: PPUSH
38652: LD_VAR 0 8
38656: PPUSH
38657: CALL_OW 251
38661: PPUSH
38662: LD_VAR 0 16
38666: PPUSH
38667: CALL_OW 441
38671: GO 38639
38673: POP
38674: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38675: LD_VAR 0 18
38679: PPUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 30
38685: PUSH
38686: LD_INT 32
38688: PUSH
38689: EMPTY
38690: LIST
38691: LIST
38692: PUSH
38693: LD_INT 30
38695: PUSH
38696: LD_INT 33
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: PPUSH
38708: CALL_OW 72
38712: IFFALSE 38800
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38714: LD_ADDR_VAR 0 8
38718: PUSH
38719: LD_VAR 0 18
38723: PPUSH
38724: LD_INT 2
38726: PUSH
38727: LD_INT 30
38729: PUSH
38730: LD_INT 32
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 30
38739: PUSH
38740: LD_INT 33
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: PPUSH
38752: CALL_OW 72
38756: PUSH
38757: FOR_IN
38758: IFFALSE 38798
// begin if not GetBWeapon ( i ) then
38760: LD_VAR 0 8
38764: PPUSH
38765: CALL_OW 269
38769: NOT
38770: IFFALSE 38796
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38772: LD_VAR 0 8
38776: PPUSH
38777: LD_VAR 0 8
38781: PPUSH
38782: LD_VAR 0 2
38786: PPUSH
38787: CALL 40046 0 2
38791: PPUSH
38792: CALL_OW 431
// end ;
38796: GO 38757
38798: POP
38799: POP
// end ; for i = 1 to personel do
38800: LD_ADDR_VAR 0 8
38804: PUSH
38805: DOUBLE
38806: LD_INT 1
38808: DEC
38809: ST_TO_ADDR
38810: LD_VAR 0 6
38814: PUSH
38815: FOR_TO
38816: IFFALSE 39880
// begin if i > 4 then
38818: LD_VAR 0 8
38822: PUSH
38823: LD_INT 4
38825: GREATER
38826: IFFALSE 38830
// break ;
38828: GO 39880
// case i of 1 :
38830: LD_VAR 0 8
38834: PUSH
38835: LD_INT 1
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38923
38843: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38844: LD_ADDR_VAR 0 12
38848: PUSH
38849: LD_VAR 0 18
38853: PPUSH
38854: LD_INT 22
38856: PUSH
38857: LD_VAR 0 16
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 58
38868: PUSH
38869: EMPTY
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 30
38877: PUSH
38878: LD_INT 32
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 30
38887: PUSH
38888: LD_INT 4
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 30
38897: PUSH
38898: LD_INT 5
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: LIST
38915: PPUSH
38916: CALL_OW 72
38920: ST_TO_ADDR
38921: GO 39145
38923: LD_INT 2
38925: DOUBLE
38926: EQUAL
38927: IFTRUE 38931
38929: GO 38993
38931: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38932: LD_ADDR_VAR 0 12
38936: PUSH
38937: LD_VAR 0 18
38941: PPUSH
38942: LD_INT 22
38944: PUSH
38945: LD_VAR 0 16
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 30
38959: PUSH
38960: LD_INT 0
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: PUSH
38967: LD_INT 30
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PPUSH
38986: CALL_OW 72
38990: ST_TO_ADDR
38991: GO 39145
38993: LD_INT 3
38995: DOUBLE
38996: EQUAL
38997: IFTRUE 39001
38999: GO 39063
39001: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39002: LD_ADDR_VAR 0 12
39006: PUSH
39007: LD_VAR 0 18
39011: PPUSH
39012: LD_INT 22
39014: PUSH
39015: LD_VAR 0 16
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 30
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 30
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PPUSH
39056: CALL_OW 72
39060: ST_TO_ADDR
39061: GO 39145
39063: LD_INT 4
39065: DOUBLE
39066: EQUAL
39067: IFTRUE 39071
39069: GO 39144
39071: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39072: LD_ADDR_VAR 0 12
39076: PUSH
39077: LD_VAR 0 18
39081: PPUSH
39082: LD_INT 22
39084: PUSH
39085: LD_VAR 0 16
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 2
39096: PUSH
39097: LD_INT 30
39099: PUSH
39100: LD_INT 6
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 30
39109: PUSH
39110: LD_INT 7
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 30
39119: PUSH
39120: LD_INT 8
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PPUSH
39137: CALL_OW 72
39141: ST_TO_ADDR
39142: GO 39145
39144: POP
// if i = 1 then
39145: LD_VAR 0 8
39149: PUSH
39150: LD_INT 1
39152: EQUAL
39153: IFFALSE 39264
// begin tmp := [ ] ;
39155: LD_ADDR_VAR 0 19
39159: PUSH
39160: EMPTY
39161: ST_TO_ADDR
// for j in f do
39162: LD_ADDR_VAR 0 9
39166: PUSH
39167: LD_VAR 0 12
39171: PUSH
39172: FOR_IN
39173: IFFALSE 39246
// if GetBType ( j ) = b_bunker then
39175: LD_VAR 0 9
39179: PPUSH
39180: CALL_OW 266
39184: PUSH
39185: LD_INT 32
39187: EQUAL
39188: IFFALSE 39215
// tmp := Insert ( tmp , 1 , j ) else
39190: LD_ADDR_VAR 0 19
39194: PUSH
39195: LD_VAR 0 19
39199: PPUSH
39200: LD_INT 1
39202: PPUSH
39203: LD_VAR 0 9
39207: PPUSH
39208: CALL_OW 2
39212: ST_TO_ADDR
39213: GO 39244
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39215: LD_ADDR_VAR 0 19
39219: PUSH
39220: LD_VAR 0 19
39224: PPUSH
39225: LD_VAR 0 19
39229: PUSH
39230: LD_INT 1
39232: PLUS
39233: PPUSH
39234: LD_VAR 0 9
39238: PPUSH
39239: CALL_OW 2
39243: ST_TO_ADDR
39244: GO 39172
39246: POP
39247: POP
// if tmp then
39248: LD_VAR 0 19
39252: IFFALSE 39264
// f := tmp ;
39254: LD_ADDR_VAR 0 12
39258: PUSH
39259: LD_VAR 0 19
39263: ST_TO_ADDR
// end ; x := personel [ i ] ;
39264: LD_ADDR_VAR 0 13
39268: PUSH
39269: LD_VAR 0 6
39273: PUSH
39274: LD_VAR 0 8
39278: ARRAY
39279: ST_TO_ADDR
// if x = - 1 then
39280: LD_VAR 0 13
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: EQUAL
39289: IFFALSE 39498
// begin for j in f do
39291: LD_ADDR_VAR 0 9
39295: PUSH
39296: LD_VAR 0 12
39300: PUSH
39301: FOR_IN
39302: IFFALSE 39494
// repeat InitHc ;
39304: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39308: LD_VAR 0 9
39312: PPUSH
39313: CALL_OW 266
39317: PUSH
39318: LD_INT 5
39320: EQUAL
39321: IFFALSE 39391
// begin if UnitsInside ( j ) < 3 then
39323: LD_VAR 0 9
39327: PPUSH
39328: CALL_OW 313
39332: PUSH
39333: LD_INT 3
39335: LESS
39336: IFFALSE 39372
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39338: LD_INT 0
39340: PPUSH
39341: LD_INT 5
39343: PUSH
39344: LD_INT 8
39346: PUSH
39347: LD_INT 9
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: PUSH
39355: LD_VAR 0 17
39359: ARRAY
39360: PPUSH
39361: LD_VAR 0 4
39365: PPUSH
39366: CALL_OW 380
39370: GO 39389
// PrepareHuman ( false , i , skill ) ;
39372: LD_INT 0
39374: PPUSH
39375: LD_VAR 0 8
39379: PPUSH
39380: LD_VAR 0 4
39384: PPUSH
39385: CALL_OW 380
// end else
39389: GO 39408
// PrepareHuman ( false , i , skill ) ;
39391: LD_INT 0
39393: PPUSH
39394: LD_VAR 0 8
39398: PPUSH
39399: LD_VAR 0 4
39403: PPUSH
39404: CALL_OW 380
// un := CreateHuman ;
39408: LD_ADDR_VAR 0 14
39412: PUSH
39413: CALL_OW 44
39417: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39418: LD_ADDR_VAR 0 7
39422: PUSH
39423: LD_VAR 0 7
39427: PPUSH
39428: LD_INT 1
39430: PPUSH
39431: LD_VAR 0 14
39435: PPUSH
39436: CALL_OW 2
39440: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39441: LD_VAR 0 14
39445: PPUSH
39446: LD_VAR 0 9
39450: PPUSH
39451: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39455: LD_VAR 0 9
39459: PPUSH
39460: CALL_OW 313
39464: PUSH
39465: LD_INT 6
39467: EQUAL
39468: PUSH
39469: LD_VAR 0 9
39473: PPUSH
39474: CALL_OW 266
39478: PUSH
39479: LD_INT 32
39481: PUSH
39482: LD_INT 31
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: IN
39489: OR
39490: IFFALSE 39304
39492: GO 39301
39494: POP
39495: POP
// end else
39496: GO 39878
// for j = 1 to x do
39498: LD_ADDR_VAR 0 9
39502: PUSH
39503: DOUBLE
39504: LD_INT 1
39506: DEC
39507: ST_TO_ADDR
39508: LD_VAR 0 13
39512: PUSH
39513: FOR_TO
39514: IFFALSE 39876
// begin InitHc ;
39516: CALL_OW 19
// if not f then
39520: LD_VAR 0 12
39524: NOT
39525: IFFALSE 39614
// begin PrepareHuman ( false , i , skill ) ;
39527: LD_INT 0
39529: PPUSH
39530: LD_VAR 0 8
39534: PPUSH
39535: LD_VAR 0 4
39539: PPUSH
39540: CALL_OW 380
// un := CreateHuman ;
39544: LD_ADDR_VAR 0 14
39548: PUSH
39549: CALL_OW 44
39553: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39554: LD_ADDR_VAR 0 7
39558: PUSH
39559: LD_VAR 0 7
39563: PPUSH
39564: LD_INT 1
39566: PPUSH
39567: LD_VAR 0 14
39571: PPUSH
39572: CALL_OW 2
39576: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39577: LD_VAR 0 14
39581: PPUSH
39582: LD_VAR 0 1
39586: PPUSH
39587: CALL_OW 250
39591: PPUSH
39592: LD_VAR 0 1
39596: PPUSH
39597: CALL_OW 251
39601: PPUSH
39602: LD_INT 10
39604: PPUSH
39605: LD_INT 0
39607: PPUSH
39608: CALL_OW 50
// continue ;
39612: GO 39513
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39614: LD_VAR 0 12
39618: PUSH
39619: LD_INT 1
39621: ARRAY
39622: PPUSH
39623: CALL_OW 313
39627: PUSH
39628: LD_VAR 0 12
39632: PUSH
39633: LD_INT 1
39635: ARRAY
39636: PPUSH
39637: CALL_OW 266
39641: PUSH
39642: LD_INT 32
39644: PUSH
39645: LD_INT 31
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: IN
39652: AND
39653: PUSH
39654: LD_VAR 0 12
39658: PUSH
39659: LD_INT 1
39661: ARRAY
39662: PPUSH
39663: CALL_OW 313
39667: PUSH
39668: LD_INT 6
39670: EQUAL
39671: OR
39672: IFFALSE 39692
// f := Delete ( f , 1 ) ;
39674: LD_ADDR_VAR 0 12
39678: PUSH
39679: LD_VAR 0 12
39683: PPUSH
39684: LD_INT 1
39686: PPUSH
39687: CALL_OW 3
39691: ST_TO_ADDR
// if not f then
39692: LD_VAR 0 12
39696: NOT
39697: IFFALSE 39715
// begin x := x + 2 ;
39699: LD_ADDR_VAR 0 13
39703: PUSH
39704: LD_VAR 0 13
39708: PUSH
39709: LD_INT 2
39711: PLUS
39712: ST_TO_ADDR
// continue ;
39713: GO 39513
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39715: LD_VAR 0 12
39719: PUSH
39720: LD_INT 1
39722: ARRAY
39723: PPUSH
39724: CALL_OW 266
39728: PUSH
39729: LD_INT 5
39731: EQUAL
39732: IFFALSE 39806
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39734: LD_VAR 0 12
39738: PUSH
39739: LD_INT 1
39741: ARRAY
39742: PPUSH
39743: CALL_OW 313
39747: PUSH
39748: LD_INT 3
39750: LESS
39751: IFFALSE 39787
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39753: LD_INT 0
39755: PPUSH
39756: LD_INT 5
39758: PUSH
39759: LD_INT 8
39761: PUSH
39762: LD_INT 9
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: LIST
39769: PUSH
39770: LD_VAR 0 17
39774: ARRAY
39775: PPUSH
39776: LD_VAR 0 4
39780: PPUSH
39781: CALL_OW 380
39785: GO 39804
// PrepareHuman ( false , i , skill ) ;
39787: LD_INT 0
39789: PPUSH
39790: LD_VAR 0 8
39794: PPUSH
39795: LD_VAR 0 4
39799: PPUSH
39800: CALL_OW 380
// end else
39804: GO 39823
// PrepareHuman ( false , i , skill ) ;
39806: LD_INT 0
39808: PPUSH
39809: LD_VAR 0 8
39813: PPUSH
39814: LD_VAR 0 4
39818: PPUSH
39819: CALL_OW 380
// un := CreateHuman ;
39823: LD_ADDR_VAR 0 14
39827: PUSH
39828: CALL_OW 44
39832: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39833: LD_ADDR_VAR 0 7
39837: PUSH
39838: LD_VAR 0 7
39842: PPUSH
39843: LD_INT 1
39845: PPUSH
39846: LD_VAR 0 14
39850: PPUSH
39851: CALL_OW 2
39855: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39856: LD_VAR 0 14
39860: PPUSH
39861: LD_VAR 0 12
39865: PUSH
39866: LD_INT 1
39868: ARRAY
39869: PPUSH
39870: CALL_OW 52
// end ;
39874: GO 39513
39876: POP
39877: POP
// end ;
39878: GO 38815
39880: POP
39881: POP
// result := result ^ buildings ;
39882: LD_ADDR_VAR 0 7
39886: PUSH
39887: LD_VAR 0 7
39891: PUSH
39892: LD_VAR 0 18
39896: ADD
39897: ST_TO_ADDR
// end else
39898: GO 40041
// begin for i = 1 to personel do
39900: LD_ADDR_VAR 0 8
39904: PUSH
39905: DOUBLE
39906: LD_INT 1
39908: DEC
39909: ST_TO_ADDR
39910: LD_VAR 0 6
39914: PUSH
39915: FOR_TO
39916: IFFALSE 40039
// begin if i > 4 then
39918: LD_VAR 0 8
39922: PUSH
39923: LD_INT 4
39925: GREATER
39926: IFFALSE 39930
// break ;
39928: GO 40039
// x := personel [ i ] ;
39930: LD_ADDR_VAR 0 13
39934: PUSH
39935: LD_VAR 0 6
39939: PUSH
39940: LD_VAR 0 8
39944: ARRAY
39945: ST_TO_ADDR
// if x = - 1 then
39946: LD_VAR 0 13
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: EQUAL
39955: IFFALSE 39959
// continue ;
39957: GO 39915
// PrepareHuman ( false , i , skill ) ;
39959: LD_INT 0
39961: PPUSH
39962: LD_VAR 0 8
39966: PPUSH
39967: LD_VAR 0 4
39971: PPUSH
39972: CALL_OW 380
// un := CreateHuman ;
39976: LD_ADDR_VAR 0 14
39980: PUSH
39981: CALL_OW 44
39985: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39986: LD_VAR 0 14
39990: PPUSH
39991: LD_VAR 0 1
39995: PPUSH
39996: CALL_OW 250
40000: PPUSH
40001: LD_VAR 0 1
40005: PPUSH
40006: CALL_OW 251
40010: PPUSH
40011: LD_INT 10
40013: PPUSH
40014: LD_INT 0
40016: PPUSH
40017: CALL_OW 50
// result := result ^ un ;
40021: LD_ADDR_VAR 0 7
40025: PUSH
40026: LD_VAR 0 7
40030: PUSH
40031: LD_VAR 0 14
40035: ADD
40036: ST_TO_ADDR
// end ;
40037: GO 39915
40039: POP
40040: POP
// end ; end ;
40041: LD_VAR 0 7
40045: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40046: LD_INT 0
40048: PPUSH
40049: PPUSH
40050: PPUSH
40051: PPUSH
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
40058: PPUSH
40059: PPUSH
40060: PPUSH
40061: PPUSH
40062: PPUSH
40063: PPUSH
// result := false ;
40064: LD_ADDR_VAR 0 3
40068: PUSH
40069: LD_INT 0
40071: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40072: LD_VAR 0 1
40076: NOT
40077: PUSH
40078: LD_VAR 0 1
40082: PPUSH
40083: CALL_OW 266
40087: PUSH
40088: LD_INT 32
40090: PUSH
40091: LD_INT 33
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: IN
40098: NOT
40099: OR
40100: IFFALSE 40104
// exit ;
40102: GO 41213
// nat := GetNation ( tower ) ;
40104: LD_ADDR_VAR 0 12
40108: PUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: CALL_OW 248
40118: ST_TO_ADDR
// side := GetSide ( tower ) ;
40119: LD_ADDR_VAR 0 16
40123: PUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: CALL_OW 255
40133: ST_TO_ADDR
// x := GetX ( tower ) ;
40134: LD_ADDR_VAR 0 10
40138: PUSH
40139: LD_VAR 0 1
40143: PPUSH
40144: CALL_OW 250
40148: ST_TO_ADDR
// y := GetY ( tower ) ;
40149: LD_ADDR_VAR 0 11
40153: PUSH
40154: LD_VAR 0 1
40158: PPUSH
40159: CALL_OW 251
40163: ST_TO_ADDR
// if not x or not y then
40164: LD_VAR 0 10
40168: NOT
40169: PUSH
40170: LD_VAR 0 11
40174: NOT
40175: OR
40176: IFFALSE 40180
// exit ;
40178: GO 41213
// weapon := 0 ;
40180: LD_ADDR_VAR 0 18
40184: PUSH
40185: LD_INT 0
40187: ST_TO_ADDR
// fac_list := [ ] ;
40188: LD_ADDR_VAR 0 17
40192: PUSH
40193: EMPTY
40194: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40195: LD_ADDR_VAR 0 6
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 274
40209: PPUSH
40210: LD_VAR 0 2
40214: PPUSH
40215: LD_INT 0
40217: PPUSH
40218: CALL 37784 0 3
40222: PPUSH
40223: LD_INT 30
40225: PUSH
40226: LD_INT 3
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PPUSH
40233: CALL_OW 72
40237: ST_TO_ADDR
// if not factories then
40238: LD_VAR 0 6
40242: NOT
40243: IFFALSE 40247
// exit ;
40245: GO 41213
// for i in factories do
40247: LD_ADDR_VAR 0 8
40251: PUSH
40252: LD_VAR 0 6
40256: PUSH
40257: FOR_IN
40258: IFFALSE 40283
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40260: LD_ADDR_VAR 0 17
40264: PUSH
40265: LD_VAR 0 17
40269: PUSH
40270: LD_VAR 0 8
40274: PPUSH
40275: CALL_OW 478
40279: UNION
40280: ST_TO_ADDR
40281: GO 40257
40283: POP
40284: POP
// if not fac_list then
40285: LD_VAR 0 17
40289: NOT
40290: IFFALSE 40294
// exit ;
40292: GO 41213
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40294: LD_ADDR_VAR 0 5
40298: PUSH
40299: LD_INT 4
40301: PUSH
40302: LD_INT 5
40304: PUSH
40305: LD_INT 9
40307: PUSH
40308: LD_INT 10
40310: PUSH
40311: LD_INT 6
40313: PUSH
40314: LD_INT 7
40316: PUSH
40317: LD_INT 11
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 27
40331: PUSH
40332: LD_INT 28
40334: PUSH
40335: LD_INT 26
40337: PUSH
40338: LD_INT 30
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 43
40349: PUSH
40350: LD_INT 44
40352: PUSH
40353: LD_INT 46
40355: PUSH
40356: LD_INT 45
40358: PUSH
40359: LD_INT 47
40361: PUSH
40362: LD_INT 49
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: PUSH
40378: LD_VAR 0 12
40382: ARRAY
40383: ST_TO_ADDR
// list := list isect fac_list ;
40384: LD_ADDR_VAR 0 5
40388: PUSH
40389: LD_VAR 0 5
40393: PUSH
40394: LD_VAR 0 17
40398: ISECT
40399: ST_TO_ADDR
// if not list then
40400: LD_VAR 0 5
40404: NOT
40405: IFFALSE 40409
// exit ;
40407: GO 41213
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40409: LD_VAR 0 12
40413: PUSH
40414: LD_INT 3
40416: EQUAL
40417: PUSH
40418: LD_INT 49
40420: PUSH
40421: LD_VAR 0 5
40425: IN
40426: AND
40427: PUSH
40428: LD_INT 31
40430: PPUSH
40431: LD_VAR 0 16
40435: PPUSH
40436: CALL_OW 321
40440: PUSH
40441: LD_INT 2
40443: EQUAL
40444: AND
40445: IFFALSE 40505
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40447: LD_INT 22
40449: PUSH
40450: LD_VAR 0 16
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 35
40461: PUSH
40462: LD_INT 49
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 91
40471: PUSH
40472: LD_VAR 0 1
40476: PUSH
40477: LD_INT 10
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: LIST
40489: PPUSH
40490: CALL_OW 69
40494: NOT
40495: IFFALSE 40505
// weapon := ru_time_lapser ;
40497: LD_ADDR_VAR 0 18
40501: PUSH
40502: LD_INT 49
40504: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40505: LD_VAR 0 12
40509: PUSH
40510: LD_INT 1
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: IN
40520: PUSH
40521: LD_INT 11
40523: PUSH
40524: LD_VAR 0 5
40528: IN
40529: PUSH
40530: LD_INT 30
40532: PUSH
40533: LD_VAR 0 5
40537: IN
40538: OR
40539: AND
40540: PUSH
40541: LD_INT 6
40543: PPUSH
40544: LD_VAR 0 16
40548: PPUSH
40549: CALL_OW 321
40553: PUSH
40554: LD_INT 2
40556: EQUAL
40557: AND
40558: IFFALSE 40723
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40560: LD_INT 22
40562: PUSH
40563: LD_VAR 0 16
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: LD_INT 35
40577: PUSH
40578: LD_INT 11
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 35
40587: PUSH
40588: LD_INT 30
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 91
40602: PUSH
40603: LD_VAR 0 1
40607: PUSH
40608: LD_INT 18
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: LIST
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: LIST
40620: PPUSH
40621: CALL_OW 69
40625: NOT
40626: PUSH
40627: LD_INT 22
40629: PUSH
40630: LD_VAR 0 16
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: LD_INT 2
40641: PUSH
40642: LD_INT 30
40644: PUSH
40645: LD_INT 32
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 30
40654: PUSH
40655: LD_INT 33
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 91
40669: PUSH
40670: LD_VAR 0 1
40674: PUSH
40675: LD_INT 12
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: LIST
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: PPUSH
40691: CALL_OW 69
40695: PUSH
40696: LD_INT 2
40698: GREATER
40699: AND
40700: IFFALSE 40723
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40702: LD_ADDR_VAR 0 18
40706: PUSH
40707: LD_INT 11
40709: PUSH
40710: LD_INT 30
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_VAR 0 12
40721: ARRAY
40722: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40723: LD_VAR 0 18
40727: NOT
40728: PUSH
40729: LD_INT 40
40731: PPUSH
40732: LD_VAR 0 16
40736: PPUSH
40737: CALL_OW 321
40741: PUSH
40742: LD_INT 2
40744: EQUAL
40745: AND
40746: PUSH
40747: LD_INT 7
40749: PUSH
40750: LD_VAR 0 5
40754: IN
40755: PUSH
40756: LD_INT 28
40758: PUSH
40759: LD_VAR 0 5
40763: IN
40764: OR
40765: PUSH
40766: LD_INT 45
40768: PUSH
40769: LD_VAR 0 5
40773: IN
40774: OR
40775: AND
40776: IFFALSE 41030
// begin hex := GetHexInfo ( x , y ) ;
40778: LD_ADDR_VAR 0 4
40782: PUSH
40783: LD_VAR 0 10
40787: PPUSH
40788: LD_VAR 0 11
40792: PPUSH
40793: CALL_OW 546
40797: ST_TO_ADDR
// if hex [ 1 ] then
40798: LD_VAR 0 4
40802: PUSH
40803: LD_INT 1
40805: ARRAY
40806: IFFALSE 40810
// exit ;
40808: GO 41213
// height := hex [ 2 ] ;
40810: LD_ADDR_VAR 0 15
40814: PUSH
40815: LD_VAR 0 4
40819: PUSH
40820: LD_INT 2
40822: ARRAY
40823: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40824: LD_ADDR_VAR 0 14
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: LD_INT 3
40837: PUSH
40838: LD_INT 5
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: ST_TO_ADDR
// for i in tmp do
40847: LD_ADDR_VAR 0 8
40851: PUSH
40852: LD_VAR 0 14
40856: PUSH
40857: FOR_IN
40858: IFFALSE 41028
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40860: LD_ADDR_VAR 0 9
40864: PUSH
40865: LD_VAR 0 10
40869: PPUSH
40870: LD_VAR 0 8
40874: PPUSH
40875: LD_INT 5
40877: PPUSH
40878: CALL_OW 272
40882: PUSH
40883: LD_VAR 0 11
40887: PPUSH
40888: LD_VAR 0 8
40892: PPUSH
40893: LD_INT 5
40895: PPUSH
40896: CALL_OW 273
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40905: LD_VAR 0 9
40909: PUSH
40910: LD_INT 1
40912: ARRAY
40913: PPUSH
40914: LD_VAR 0 9
40918: PUSH
40919: LD_INT 2
40921: ARRAY
40922: PPUSH
40923: CALL_OW 488
40927: IFFALSE 41026
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40929: LD_ADDR_VAR 0 4
40933: PUSH
40934: LD_VAR 0 9
40938: PUSH
40939: LD_INT 1
40941: ARRAY
40942: PPUSH
40943: LD_VAR 0 9
40947: PUSH
40948: LD_INT 2
40950: ARRAY
40951: PPUSH
40952: CALL_OW 546
40956: ST_TO_ADDR
// if hex [ 1 ] then
40957: LD_VAR 0 4
40961: PUSH
40962: LD_INT 1
40964: ARRAY
40965: IFFALSE 40969
// continue ;
40967: GO 40857
// h := hex [ 2 ] ;
40969: LD_ADDR_VAR 0 13
40973: PUSH
40974: LD_VAR 0 4
40978: PUSH
40979: LD_INT 2
40981: ARRAY
40982: ST_TO_ADDR
// if h + 7 < height then
40983: LD_VAR 0 13
40987: PUSH
40988: LD_INT 7
40990: PLUS
40991: PUSH
40992: LD_VAR 0 15
40996: LESS
40997: IFFALSE 41026
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40999: LD_ADDR_VAR 0 18
41003: PUSH
41004: LD_INT 7
41006: PUSH
41007: LD_INT 28
41009: PUSH
41010: LD_INT 45
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: PUSH
41018: LD_VAR 0 12
41022: ARRAY
41023: ST_TO_ADDR
// break ;
41024: GO 41028
// end ; end ; end ;
41026: GO 40857
41028: POP
41029: POP
// end ; if not weapon then
41030: LD_VAR 0 18
41034: NOT
41035: IFFALSE 41095
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41037: LD_ADDR_VAR 0 5
41041: PUSH
41042: LD_VAR 0 5
41046: PUSH
41047: LD_INT 11
41049: PUSH
41050: LD_INT 30
41052: PUSH
41053: LD_INT 49
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: DIFF
41061: ST_TO_ADDR
// if not list then
41062: LD_VAR 0 5
41066: NOT
41067: IFFALSE 41071
// exit ;
41069: GO 41213
// weapon := list [ rand ( 1 , list ) ] ;
41071: LD_ADDR_VAR 0 18
41075: PUSH
41076: LD_VAR 0 5
41080: PUSH
41081: LD_INT 1
41083: PPUSH
41084: LD_VAR 0 5
41088: PPUSH
41089: CALL_OW 12
41093: ARRAY
41094: ST_TO_ADDR
// end ; if weapon then
41095: LD_VAR 0 18
41099: IFFALSE 41213
// begin tmp := CostOfWeapon ( weapon ) ;
41101: LD_ADDR_VAR 0 14
41105: PUSH
41106: LD_VAR 0 18
41110: PPUSH
41111: CALL_OW 451
41115: ST_TO_ADDR
// j := GetBase ( tower ) ;
41116: LD_ADDR_VAR 0 9
41120: PUSH
41121: LD_VAR 0 1
41125: PPUSH
41126: CALL_OW 274
41130: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41131: LD_VAR 0 9
41135: PPUSH
41136: LD_INT 1
41138: PPUSH
41139: CALL_OW 275
41143: PUSH
41144: LD_VAR 0 14
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: GREATEREQUAL
41153: PUSH
41154: LD_VAR 0 9
41158: PPUSH
41159: LD_INT 2
41161: PPUSH
41162: CALL_OW 275
41166: PUSH
41167: LD_VAR 0 14
41171: PUSH
41172: LD_INT 2
41174: ARRAY
41175: GREATEREQUAL
41176: AND
41177: PUSH
41178: LD_VAR 0 9
41182: PPUSH
41183: LD_INT 3
41185: PPUSH
41186: CALL_OW 275
41190: PUSH
41191: LD_VAR 0 14
41195: PUSH
41196: LD_INT 3
41198: ARRAY
41199: GREATEREQUAL
41200: AND
41201: IFFALSE 41213
// result := weapon ;
41203: LD_ADDR_VAR 0 3
41207: PUSH
41208: LD_VAR 0 18
41212: ST_TO_ADDR
// end ; end ;
41213: LD_VAR 0 3
41217: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41218: LD_INT 0
41220: PPUSH
41221: PPUSH
// result := true ;
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 1
41229: ST_TO_ADDR
// if array1 = array2 then
41230: LD_VAR 0 1
41234: PUSH
41235: LD_VAR 0 2
41239: EQUAL
41240: IFFALSE 41300
// begin for i = 1 to array1 do
41242: LD_ADDR_VAR 0 4
41246: PUSH
41247: DOUBLE
41248: LD_INT 1
41250: DEC
41251: ST_TO_ADDR
41252: LD_VAR 0 1
41256: PUSH
41257: FOR_TO
41258: IFFALSE 41296
// if array1 [ i ] <> array2 [ i ] then
41260: LD_VAR 0 1
41264: PUSH
41265: LD_VAR 0 4
41269: ARRAY
41270: PUSH
41271: LD_VAR 0 2
41275: PUSH
41276: LD_VAR 0 4
41280: ARRAY
41281: NONEQUAL
41282: IFFALSE 41294
// begin result := false ;
41284: LD_ADDR_VAR 0 3
41288: PUSH
41289: LD_INT 0
41291: ST_TO_ADDR
// break ;
41292: GO 41296
// end ;
41294: GO 41257
41296: POP
41297: POP
// end else
41298: GO 41308
// result := false ;
41300: LD_ADDR_VAR 0 3
41304: PUSH
41305: LD_INT 0
41307: ST_TO_ADDR
// end ;
41308: LD_VAR 0 3
41312: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41313: LD_INT 0
41315: PPUSH
41316: PPUSH
// if not array1 or not array2 then
41317: LD_VAR 0 1
41321: NOT
41322: PUSH
41323: LD_VAR 0 2
41327: NOT
41328: OR
41329: IFFALSE 41333
// exit ;
41331: GO 41397
// result := true ;
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 1
41340: ST_TO_ADDR
// for i = 1 to array1 do
41341: LD_ADDR_VAR 0 4
41345: PUSH
41346: DOUBLE
41347: LD_INT 1
41349: DEC
41350: ST_TO_ADDR
41351: LD_VAR 0 1
41355: PUSH
41356: FOR_TO
41357: IFFALSE 41395
// if array1 [ i ] <> array2 [ i ] then
41359: LD_VAR 0 1
41363: PUSH
41364: LD_VAR 0 4
41368: ARRAY
41369: PUSH
41370: LD_VAR 0 2
41374: PUSH
41375: LD_VAR 0 4
41379: ARRAY
41380: NONEQUAL
41381: IFFALSE 41393
// begin result := false ;
41383: LD_ADDR_VAR 0 3
41387: PUSH
41388: LD_INT 0
41390: ST_TO_ADDR
// break ;
41391: GO 41395
// end ;
41393: GO 41356
41395: POP
41396: POP
// end ;
41397: LD_VAR 0 3
41401: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41402: LD_INT 0
41404: PPUSH
41405: PPUSH
41406: PPUSH
// pom := GetBase ( fac ) ;
41407: LD_ADDR_VAR 0 5
41411: PUSH
41412: LD_VAR 0 1
41416: PPUSH
41417: CALL_OW 274
41421: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41422: LD_ADDR_VAR 0 4
41426: PUSH
41427: LD_VAR 0 2
41431: PUSH
41432: LD_INT 1
41434: ARRAY
41435: PPUSH
41436: LD_VAR 0 2
41440: PUSH
41441: LD_INT 2
41443: ARRAY
41444: PPUSH
41445: LD_VAR 0 2
41449: PUSH
41450: LD_INT 3
41452: ARRAY
41453: PPUSH
41454: LD_VAR 0 2
41458: PUSH
41459: LD_INT 4
41461: ARRAY
41462: PPUSH
41463: CALL_OW 449
41467: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41468: LD_ADDR_VAR 0 3
41472: PUSH
41473: LD_VAR 0 5
41477: PPUSH
41478: LD_INT 1
41480: PPUSH
41481: CALL_OW 275
41485: PUSH
41486: LD_VAR 0 4
41490: PUSH
41491: LD_INT 1
41493: ARRAY
41494: GREATEREQUAL
41495: PUSH
41496: LD_VAR 0 5
41500: PPUSH
41501: LD_INT 2
41503: PPUSH
41504: CALL_OW 275
41508: PUSH
41509: LD_VAR 0 4
41513: PUSH
41514: LD_INT 2
41516: ARRAY
41517: GREATEREQUAL
41518: AND
41519: PUSH
41520: LD_VAR 0 5
41524: PPUSH
41525: LD_INT 3
41527: PPUSH
41528: CALL_OW 275
41532: PUSH
41533: LD_VAR 0 4
41537: PUSH
41538: LD_INT 3
41540: ARRAY
41541: GREATEREQUAL
41542: AND
41543: ST_TO_ADDR
// end ;
41544: LD_VAR 0 3
41548: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41549: LD_INT 0
41551: PPUSH
41552: PPUSH
41553: PPUSH
41554: PPUSH
// pom := GetBase ( building ) ;
41555: LD_ADDR_VAR 0 3
41559: PUSH
41560: LD_VAR 0 1
41564: PPUSH
41565: CALL_OW 274
41569: ST_TO_ADDR
// if not pom then
41570: LD_VAR 0 3
41574: NOT
41575: IFFALSE 41579
// exit ;
41577: GO 41749
// btype := GetBType ( building ) ;
41579: LD_ADDR_VAR 0 5
41583: PUSH
41584: LD_VAR 0 1
41588: PPUSH
41589: CALL_OW 266
41593: ST_TO_ADDR
// if btype = b_armoury then
41594: LD_VAR 0 5
41598: PUSH
41599: LD_INT 4
41601: EQUAL
41602: IFFALSE 41612
// btype := b_barracks ;
41604: LD_ADDR_VAR 0 5
41608: PUSH
41609: LD_INT 5
41611: ST_TO_ADDR
// if btype = b_depot then
41612: LD_VAR 0 5
41616: PUSH
41617: LD_INT 0
41619: EQUAL
41620: IFFALSE 41630
// btype := b_warehouse ;
41622: LD_ADDR_VAR 0 5
41626: PUSH
41627: LD_INT 1
41629: ST_TO_ADDR
// if btype = b_workshop then
41630: LD_VAR 0 5
41634: PUSH
41635: LD_INT 2
41637: EQUAL
41638: IFFALSE 41648
// btype := b_factory ;
41640: LD_ADDR_VAR 0 5
41644: PUSH
41645: LD_INT 3
41647: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41648: LD_ADDR_VAR 0 4
41652: PUSH
41653: LD_VAR 0 5
41657: PPUSH
41658: LD_VAR 0 1
41662: PPUSH
41663: CALL_OW 248
41667: PPUSH
41668: CALL_OW 450
41672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41673: LD_ADDR_VAR 0 2
41677: PUSH
41678: LD_VAR 0 3
41682: PPUSH
41683: LD_INT 1
41685: PPUSH
41686: CALL_OW 275
41690: PUSH
41691: LD_VAR 0 4
41695: PUSH
41696: LD_INT 1
41698: ARRAY
41699: GREATEREQUAL
41700: PUSH
41701: LD_VAR 0 3
41705: PPUSH
41706: LD_INT 2
41708: PPUSH
41709: CALL_OW 275
41713: PUSH
41714: LD_VAR 0 4
41718: PUSH
41719: LD_INT 2
41721: ARRAY
41722: GREATEREQUAL
41723: AND
41724: PUSH
41725: LD_VAR 0 3
41729: PPUSH
41730: LD_INT 3
41732: PPUSH
41733: CALL_OW 275
41737: PUSH
41738: LD_VAR 0 4
41742: PUSH
41743: LD_INT 3
41745: ARRAY
41746: GREATEREQUAL
41747: AND
41748: ST_TO_ADDR
// end ;
41749: LD_VAR 0 2
41753: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41754: LD_INT 0
41756: PPUSH
41757: PPUSH
41758: PPUSH
// pom := GetBase ( building ) ;
41759: LD_ADDR_VAR 0 4
41763: PUSH
41764: LD_VAR 0 1
41768: PPUSH
41769: CALL_OW 274
41773: ST_TO_ADDR
// if not pom then
41774: LD_VAR 0 4
41778: NOT
41779: IFFALSE 41783
// exit ;
41781: GO 41884
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41783: LD_ADDR_VAR 0 5
41787: PUSH
41788: LD_VAR 0 2
41792: PPUSH
41793: LD_VAR 0 1
41797: PPUSH
41798: CALL_OW 248
41802: PPUSH
41803: CALL_OW 450
41807: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41808: LD_ADDR_VAR 0 3
41812: PUSH
41813: LD_VAR 0 4
41817: PPUSH
41818: LD_INT 1
41820: PPUSH
41821: CALL_OW 275
41825: PUSH
41826: LD_VAR 0 5
41830: PUSH
41831: LD_INT 1
41833: ARRAY
41834: GREATEREQUAL
41835: PUSH
41836: LD_VAR 0 4
41840: PPUSH
41841: LD_INT 2
41843: PPUSH
41844: CALL_OW 275
41848: PUSH
41849: LD_VAR 0 5
41853: PUSH
41854: LD_INT 2
41856: ARRAY
41857: GREATEREQUAL
41858: AND
41859: PUSH
41860: LD_VAR 0 4
41864: PPUSH
41865: LD_INT 3
41867: PPUSH
41868: CALL_OW 275
41872: PUSH
41873: LD_VAR 0 5
41877: PUSH
41878: LD_INT 3
41880: ARRAY
41881: GREATEREQUAL
41882: AND
41883: ST_TO_ADDR
// end ;
41884: LD_VAR 0 3
41888: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41889: LD_INT 0
41891: PPUSH
41892: PPUSH
41893: PPUSH
41894: PPUSH
41895: PPUSH
41896: PPUSH
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
41901: PPUSH
// result := false ;
41902: LD_ADDR_VAR 0 8
41906: PUSH
41907: LD_INT 0
41909: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41910: LD_VAR 0 5
41914: NOT
41915: PUSH
41916: LD_VAR 0 1
41920: NOT
41921: OR
41922: PUSH
41923: LD_VAR 0 2
41927: NOT
41928: OR
41929: PUSH
41930: LD_VAR 0 3
41934: NOT
41935: OR
41936: IFFALSE 41940
// exit ;
41938: GO 42754
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41940: LD_ADDR_VAR 0 14
41944: PUSH
41945: LD_VAR 0 1
41949: PPUSH
41950: LD_VAR 0 2
41954: PPUSH
41955: LD_VAR 0 3
41959: PPUSH
41960: LD_VAR 0 4
41964: PPUSH
41965: LD_VAR 0 5
41969: PUSH
41970: LD_INT 1
41972: ARRAY
41973: PPUSH
41974: CALL_OW 248
41978: PPUSH
41979: LD_INT 0
41981: PPUSH
41982: CALL 43991 0 6
41986: ST_TO_ADDR
// if not hexes then
41987: LD_VAR 0 14
41991: NOT
41992: IFFALSE 41996
// exit ;
41994: GO 42754
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41996: LD_ADDR_VAR 0 17
42000: PUSH
42001: LD_VAR 0 5
42005: PPUSH
42006: LD_INT 22
42008: PUSH
42009: LD_VAR 0 13
42013: PPUSH
42014: CALL_OW 255
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: LD_INT 30
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 30
42038: PUSH
42039: LD_INT 1
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PPUSH
42055: CALL_OW 72
42059: ST_TO_ADDR
// for i = 1 to hexes do
42060: LD_ADDR_VAR 0 9
42064: PUSH
42065: DOUBLE
42066: LD_INT 1
42068: DEC
42069: ST_TO_ADDR
42070: LD_VAR 0 14
42074: PUSH
42075: FOR_TO
42076: IFFALSE 42752
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42078: LD_ADDR_VAR 0 13
42082: PUSH
42083: LD_VAR 0 14
42087: PUSH
42088: LD_VAR 0 9
42092: ARRAY
42093: PUSH
42094: LD_INT 1
42096: ARRAY
42097: PPUSH
42098: LD_VAR 0 14
42102: PUSH
42103: LD_VAR 0 9
42107: ARRAY
42108: PUSH
42109: LD_INT 2
42111: ARRAY
42112: PPUSH
42113: CALL_OW 428
42117: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42118: LD_VAR 0 14
42122: PUSH
42123: LD_VAR 0 9
42127: ARRAY
42128: PUSH
42129: LD_INT 1
42131: ARRAY
42132: PPUSH
42133: LD_VAR 0 14
42137: PUSH
42138: LD_VAR 0 9
42142: ARRAY
42143: PUSH
42144: LD_INT 2
42146: ARRAY
42147: PPUSH
42148: CALL_OW 351
42152: PUSH
42153: LD_VAR 0 14
42157: PUSH
42158: LD_VAR 0 9
42162: ARRAY
42163: PUSH
42164: LD_INT 1
42166: ARRAY
42167: PPUSH
42168: LD_VAR 0 14
42172: PUSH
42173: LD_VAR 0 9
42177: ARRAY
42178: PUSH
42179: LD_INT 2
42181: ARRAY
42182: PPUSH
42183: CALL_OW 488
42187: NOT
42188: OR
42189: PUSH
42190: LD_VAR 0 13
42194: PPUSH
42195: CALL_OW 247
42199: PUSH
42200: LD_INT 3
42202: EQUAL
42203: OR
42204: IFFALSE 42210
// exit ;
42206: POP
42207: POP
42208: GO 42754
// if not tmp then
42210: LD_VAR 0 13
42214: NOT
42215: IFFALSE 42219
// continue ;
42217: GO 42075
// result := true ;
42219: LD_ADDR_VAR 0 8
42223: PUSH
42224: LD_INT 1
42226: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42227: LD_VAR 0 6
42231: PUSH
42232: LD_VAR 0 13
42236: PPUSH
42237: CALL_OW 247
42241: PUSH
42242: LD_INT 2
42244: EQUAL
42245: AND
42246: PUSH
42247: LD_VAR 0 13
42251: PPUSH
42252: CALL_OW 263
42256: PUSH
42257: LD_INT 1
42259: EQUAL
42260: AND
42261: IFFALSE 42425
// begin if IsDrivenBy ( tmp ) then
42263: LD_VAR 0 13
42267: PPUSH
42268: CALL_OW 311
42272: IFFALSE 42276
// continue ;
42274: GO 42075
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42276: LD_VAR 0 6
42280: PPUSH
42281: LD_INT 3
42283: PUSH
42284: LD_INT 60
42286: PUSH
42287: EMPTY
42288: LIST
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 3
42296: PUSH
42297: LD_INT 55
42299: PUSH
42300: EMPTY
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PPUSH
42311: CALL_OW 72
42315: IFFALSE 42423
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42317: LD_ADDR_VAR 0 18
42321: PUSH
42322: LD_VAR 0 6
42326: PPUSH
42327: LD_INT 3
42329: PUSH
42330: LD_INT 60
42332: PUSH
42333: EMPTY
42334: LIST
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 3
42342: PUSH
42343: LD_INT 55
42345: PUSH
42346: EMPTY
42347: LIST
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PPUSH
42357: CALL_OW 72
42361: PUSH
42362: LD_INT 1
42364: ARRAY
42365: ST_TO_ADDR
// if IsInUnit ( driver ) then
42366: LD_VAR 0 18
42370: PPUSH
42371: CALL_OW 310
42375: IFFALSE 42386
// ComExit ( driver ) ;
42377: LD_VAR 0 18
42381: PPUSH
42382: CALL 67175 0 1
// AddComEnterUnit ( driver , tmp ) ;
42386: LD_VAR 0 18
42390: PPUSH
42391: LD_VAR 0 13
42395: PPUSH
42396: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42400: LD_VAR 0 18
42404: PPUSH
42405: LD_VAR 0 7
42409: PPUSH
42410: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42414: LD_VAR 0 18
42418: PPUSH
42419: CALL_OW 181
// end ; continue ;
42423: GO 42075
// end ; if not cleaners or not tmp in cleaners then
42425: LD_VAR 0 6
42429: NOT
42430: PUSH
42431: LD_VAR 0 13
42435: PUSH
42436: LD_VAR 0 6
42440: IN
42441: NOT
42442: OR
42443: IFFALSE 42750
// begin if dep then
42445: LD_VAR 0 17
42449: IFFALSE 42585
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42451: LD_ADDR_VAR 0 16
42455: PUSH
42456: LD_VAR 0 17
42460: PUSH
42461: LD_INT 1
42463: ARRAY
42464: PPUSH
42465: CALL_OW 250
42469: PPUSH
42470: LD_VAR 0 17
42474: PUSH
42475: LD_INT 1
42477: ARRAY
42478: PPUSH
42479: CALL_OW 254
42483: PPUSH
42484: LD_INT 5
42486: PPUSH
42487: CALL_OW 272
42491: PUSH
42492: LD_VAR 0 17
42496: PUSH
42497: LD_INT 1
42499: ARRAY
42500: PPUSH
42501: CALL_OW 251
42505: PPUSH
42506: LD_VAR 0 17
42510: PUSH
42511: LD_INT 1
42513: ARRAY
42514: PPUSH
42515: CALL_OW 254
42519: PPUSH
42520: LD_INT 5
42522: PPUSH
42523: CALL_OW 273
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42532: LD_VAR 0 16
42536: PUSH
42537: LD_INT 1
42539: ARRAY
42540: PPUSH
42541: LD_VAR 0 16
42545: PUSH
42546: LD_INT 2
42548: ARRAY
42549: PPUSH
42550: CALL_OW 488
42554: IFFALSE 42585
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42556: LD_VAR 0 13
42560: PPUSH
42561: LD_VAR 0 16
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: PPUSH
42570: LD_VAR 0 16
42574: PUSH
42575: LD_INT 2
42577: ARRAY
42578: PPUSH
42579: CALL_OW 111
// continue ;
42583: GO 42075
// end ; end ; r := GetDir ( tmp ) ;
42585: LD_ADDR_VAR 0 15
42589: PUSH
42590: LD_VAR 0 13
42594: PPUSH
42595: CALL_OW 254
42599: ST_TO_ADDR
// if r = 5 then
42600: LD_VAR 0 15
42604: PUSH
42605: LD_INT 5
42607: EQUAL
42608: IFFALSE 42618
// r := 0 ;
42610: LD_ADDR_VAR 0 15
42614: PUSH
42615: LD_INT 0
42617: ST_TO_ADDR
// for j = r to 5 do
42618: LD_ADDR_VAR 0 10
42622: PUSH
42623: DOUBLE
42624: LD_VAR 0 15
42628: DEC
42629: ST_TO_ADDR
42630: LD_INT 5
42632: PUSH
42633: FOR_TO
42634: IFFALSE 42748
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42636: LD_ADDR_VAR 0 11
42640: PUSH
42641: LD_VAR 0 13
42645: PPUSH
42646: CALL_OW 250
42650: PPUSH
42651: LD_VAR 0 10
42655: PPUSH
42656: LD_INT 2
42658: PPUSH
42659: CALL_OW 272
42663: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42664: LD_ADDR_VAR 0 12
42668: PUSH
42669: LD_VAR 0 13
42673: PPUSH
42674: CALL_OW 251
42678: PPUSH
42679: LD_VAR 0 10
42683: PPUSH
42684: LD_INT 2
42686: PPUSH
42687: CALL_OW 273
42691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42692: LD_VAR 0 11
42696: PPUSH
42697: LD_VAR 0 12
42701: PPUSH
42702: CALL_OW 488
42706: PUSH
42707: LD_VAR 0 11
42711: PPUSH
42712: LD_VAR 0 12
42716: PPUSH
42717: CALL_OW 428
42721: NOT
42722: AND
42723: IFFALSE 42746
// begin ComMoveXY ( tmp , _x , _y ) ;
42725: LD_VAR 0 13
42729: PPUSH
42730: LD_VAR 0 11
42734: PPUSH
42735: LD_VAR 0 12
42739: PPUSH
42740: CALL_OW 111
// break ;
42744: GO 42748
// end ; end ;
42746: GO 42633
42748: POP
42749: POP
// end ; end ;
42750: GO 42075
42752: POP
42753: POP
// end ;
42754: LD_VAR 0 8
42758: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42759: LD_INT 0
42761: PPUSH
// result := true ;
42762: LD_ADDR_VAR 0 3
42766: PUSH
42767: LD_INT 1
42769: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42770: LD_VAR 0 2
42774: PUSH
42775: LD_INT 24
42777: DOUBLE
42778: EQUAL
42779: IFTRUE 42789
42781: LD_INT 33
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 42814
42789: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42790: LD_ADDR_VAR 0 3
42794: PUSH
42795: LD_INT 32
42797: PPUSH
42798: LD_VAR 0 1
42802: PPUSH
42803: CALL_OW 321
42807: PUSH
42808: LD_INT 2
42810: EQUAL
42811: ST_TO_ADDR
42812: GO 43134
42814: LD_INT 20
42816: DOUBLE
42817: EQUAL
42818: IFTRUE 42822
42820: GO 42847
42822: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42823: LD_ADDR_VAR 0 3
42827: PUSH
42828: LD_INT 6
42830: PPUSH
42831: LD_VAR 0 1
42835: PPUSH
42836: CALL_OW 321
42840: PUSH
42841: LD_INT 2
42843: EQUAL
42844: ST_TO_ADDR
42845: GO 43134
42847: LD_INT 22
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42861
42853: LD_INT 36
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42861
42859: GO 42886
42861: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42862: LD_ADDR_VAR 0 3
42866: PUSH
42867: LD_INT 15
42869: PPUSH
42870: LD_VAR 0 1
42874: PPUSH
42875: CALL_OW 321
42879: PUSH
42880: LD_INT 2
42882: EQUAL
42883: ST_TO_ADDR
42884: GO 43134
42886: LD_INT 30
42888: DOUBLE
42889: EQUAL
42890: IFTRUE 42894
42892: GO 42919
42894: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_INT 20
42902: PPUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 321
42912: PUSH
42913: LD_INT 2
42915: EQUAL
42916: ST_TO_ADDR
42917: GO 43134
42919: LD_INT 28
42921: DOUBLE
42922: EQUAL
42923: IFTRUE 42933
42925: LD_INT 21
42927: DOUBLE
42928: EQUAL
42929: IFTRUE 42933
42931: GO 42958
42933: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42934: LD_ADDR_VAR 0 3
42938: PUSH
42939: LD_INT 21
42941: PPUSH
42942: LD_VAR 0 1
42946: PPUSH
42947: CALL_OW 321
42951: PUSH
42952: LD_INT 2
42954: EQUAL
42955: ST_TO_ADDR
42956: GO 43134
42958: LD_INT 16
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42993
42966: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42967: LD_ADDR_VAR 0 3
42971: PUSH
42972: LD_EXP 44
42976: PPUSH
42977: LD_VAR 0 1
42981: PPUSH
42982: CALL_OW 321
42986: PUSH
42987: LD_INT 2
42989: EQUAL
42990: ST_TO_ADDR
42991: GO 43134
42993: LD_INT 19
42995: DOUBLE
42996: EQUAL
42997: IFTRUE 43007
42999: LD_INT 23
43001: DOUBLE
43002: EQUAL
43003: IFTRUE 43007
43005: GO 43034
43007: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43008: LD_ADDR_VAR 0 3
43012: PUSH
43013: LD_EXP 43
43017: PPUSH
43018: LD_VAR 0 1
43022: PPUSH
43023: CALL_OW 321
43027: PUSH
43028: LD_INT 2
43030: EQUAL
43031: ST_TO_ADDR
43032: GO 43134
43034: LD_INT 17
43036: DOUBLE
43037: EQUAL
43038: IFTRUE 43042
43040: GO 43067
43042: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: LD_INT 39
43050: PPUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 321
43060: PUSH
43061: LD_INT 2
43063: EQUAL
43064: ST_TO_ADDR
43065: GO 43134
43067: LD_INT 18
43069: DOUBLE
43070: EQUAL
43071: IFTRUE 43075
43073: GO 43100
43075: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43076: LD_ADDR_VAR 0 3
43080: PUSH
43081: LD_INT 40
43083: PPUSH
43084: LD_VAR 0 1
43088: PPUSH
43089: CALL_OW 321
43093: PUSH
43094: LD_INT 2
43096: EQUAL
43097: ST_TO_ADDR
43098: GO 43134
43100: LD_INT 27
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43133
43108: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43109: LD_ADDR_VAR 0 3
43113: PUSH
43114: LD_INT 35
43116: PPUSH
43117: LD_VAR 0 1
43121: PPUSH
43122: CALL_OW 321
43126: PUSH
43127: LD_INT 2
43129: EQUAL
43130: ST_TO_ADDR
43131: GO 43134
43133: POP
// end ;
43134: LD_VAR 0 3
43138: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43139: LD_INT 0
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
// result := false ;
43152: LD_ADDR_VAR 0 6
43156: PUSH
43157: LD_INT 0
43159: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43160: LD_VAR 0 1
43164: NOT
43165: PUSH
43166: LD_VAR 0 1
43170: PPUSH
43171: CALL_OW 266
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: IN
43186: NOT
43187: OR
43188: PUSH
43189: LD_VAR 0 2
43193: NOT
43194: OR
43195: PUSH
43196: LD_VAR 0 5
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 2
43209: PUSH
43210: LD_INT 3
43212: PUSH
43213: LD_INT 4
43215: PUSH
43216: LD_INT 5
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: IN
43227: NOT
43228: OR
43229: PUSH
43230: LD_VAR 0 3
43234: PPUSH
43235: LD_VAR 0 4
43239: PPUSH
43240: CALL_OW 488
43244: NOT
43245: OR
43246: IFFALSE 43250
// exit ;
43248: GO 43986
// side := GetSide ( depot ) ;
43250: LD_ADDR_VAR 0 9
43254: PUSH
43255: LD_VAR 0 1
43259: PPUSH
43260: CALL_OW 255
43264: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43265: LD_VAR 0 9
43269: PPUSH
43270: LD_VAR 0 2
43274: PPUSH
43275: CALL 42759 0 2
43279: NOT
43280: IFFALSE 43284
// exit ;
43282: GO 43986
// pom := GetBase ( depot ) ;
43284: LD_ADDR_VAR 0 10
43288: PUSH
43289: LD_VAR 0 1
43293: PPUSH
43294: CALL_OW 274
43298: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43299: LD_ADDR_VAR 0 11
43303: PUSH
43304: LD_VAR 0 2
43308: PPUSH
43309: LD_VAR 0 1
43313: PPUSH
43314: CALL_OW 248
43318: PPUSH
43319: CALL_OW 450
43323: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43324: LD_VAR 0 10
43328: PPUSH
43329: LD_INT 1
43331: PPUSH
43332: CALL_OW 275
43336: PUSH
43337: LD_VAR 0 11
43341: PUSH
43342: LD_INT 1
43344: ARRAY
43345: GREATEREQUAL
43346: PUSH
43347: LD_VAR 0 10
43351: PPUSH
43352: LD_INT 2
43354: PPUSH
43355: CALL_OW 275
43359: PUSH
43360: LD_VAR 0 11
43364: PUSH
43365: LD_INT 2
43367: ARRAY
43368: GREATEREQUAL
43369: AND
43370: PUSH
43371: LD_VAR 0 10
43375: PPUSH
43376: LD_INT 3
43378: PPUSH
43379: CALL_OW 275
43383: PUSH
43384: LD_VAR 0 11
43388: PUSH
43389: LD_INT 3
43391: ARRAY
43392: GREATEREQUAL
43393: AND
43394: NOT
43395: IFFALSE 43399
// exit ;
43397: GO 43986
// if GetBType ( depot ) = b_depot then
43399: LD_VAR 0 1
43403: PPUSH
43404: CALL_OW 266
43408: PUSH
43409: LD_INT 0
43411: EQUAL
43412: IFFALSE 43424
// dist := 28 else
43414: LD_ADDR_VAR 0 14
43418: PUSH
43419: LD_INT 28
43421: ST_TO_ADDR
43422: GO 43432
// dist := 36 ;
43424: LD_ADDR_VAR 0 14
43428: PUSH
43429: LD_INT 36
43431: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43432: LD_VAR 0 1
43436: PPUSH
43437: LD_VAR 0 3
43441: PPUSH
43442: LD_VAR 0 4
43446: PPUSH
43447: CALL_OW 297
43451: PUSH
43452: LD_VAR 0 14
43456: GREATER
43457: IFFALSE 43461
// exit ;
43459: GO 43986
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43461: LD_ADDR_VAR 0 12
43465: PUSH
43466: LD_VAR 0 2
43470: PPUSH
43471: LD_VAR 0 3
43475: PPUSH
43476: LD_VAR 0 4
43480: PPUSH
43481: LD_VAR 0 5
43485: PPUSH
43486: LD_VAR 0 1
43490: PPUSH
43491: CALL_OW 248
43495: PPUSH
43496: LD_INT 0
43498: PPUSH
43499: CALL 43991 0 6
43503: ST_TO_ADDR
// if not hexes then
43504: LD_VAR 0 12
43508: NOT
43509: IFFALSE 43513
// exit ;
43511: GO 43986
// hex := GetHexInfo ( x , y ) ;
43513: LD_ADDR_VAR 0 15
43517: PUSH
43518: LD_VAR 0 3
43522: PPUSH
43523: LD_VAR 0 4
43527: PPUSH
43528: CALL_OW 546
43532: ST_TO_ADDR
// if hex [ 1 ] then
43533: LD_VAR 0 15
43537: PUSH
43538: LD_INT 1
43540: ARRAY
43541: IFFALSE 43545
// exit ;
43543: GO 43986
// height := hex [ 2 ] ;
43545: LD_ADDR_VAR 0 13
43549: PUSH
43550: LD_VAR 0 15
43554: PUSH
43555: LD_INT 2
43557: ARRAY
43558: ST_TO_ADDR
// for i = 1 to hexes do
43559: LD_ADDR_VAR 0 7
43563: PUSH
43564: DOUBLE
43565: LD_INT 1
43567: DEC
43568: ST_TO_ADDR
43569: LD_VAR 0 12
43573: PUSH
43574: FOR_TO
43575: IFFALSE 43905
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43577: LD_VAR 0 12
43581: PUSH
43582: LD_VAR 0 7
43586: ARRAY
43587: PUSH
43588: LD_INT 1
43590: ARRAY
43591: PPUSH
43592: LD_VAR 0 12
43596: PUSH
43597: LD_VAR 0 7
43601: ARRAY
43602: PUSH
43603: LD_INT 2
43605: ARRAY
43606: PPUSH
43607: CALL_OW 488
43611: NOT
43612: PUSH
43613: LD_VAR 0 12
43617: PUSH
43618: LD_VAR 0 7
43622: ARRAY
43623: PUSH
43624: LD_INT 1
43626: ARRAY
43627: PPUSH
43628: LD_VAR 0 12
43632: PUSH
43633: LD_VAR 0 7
43637: ARRAY
43638: PUSH
43639: LD_INT 2
43641: ARRAY
43642: PPUSH
43643: CALL_OW 428
43647: PUSH
43648: LD_INT 0
43650: GREATER
43651: OR
43652: PUSH
43653: LD_VAR 0 12
43657: PUSH
43658: LD_VAR 0 7
43662: ARRAY
43663: PUSH
43664: LD_INT 1
43666: ARRAY
43667: PPUSH
43668: LD_VAR 0 12
43672: PUSH
43673: LD_VAR 0 7
43677: ARRAY
43678: PUSH
43679: LD_INT 2
43681: ARRAY
43682: PPUSH
43683: CALL_OW 351
43687: OR
43688: IFFALSE 43694
// exit ;
43690: POP
43691: POP
43692: GO 43986
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43694: LD_ADDR_VAR 0 8
43698: PUSH
43699: LD_VAR 0 12
43703: PUSH
43704: LD_VAR 0 7
43708: ARRAY
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: PPUSH
43714: LD_VAR 0 12
43718: PUSH
43719: LD_VAR 0 7
43723: ARRAY
43724: PUSH
43725: LD_INT 2
43727: ARRAY
43728: PPUSH
43729: CALL_OW 546
43733: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43734: LD_VAR 0 8
43738: PUSH
43739: LD_INT 1
43741: ARRAY
43742: PUSH
43743: LD_VAR 0 8
43747: PUSH
43748: LD_INT 2
43750: ARRAY
43751: PUSH
43752: LD_VAR 0 13
43756: PUSH
43757: LD_INT 2
43759: PLUS
43760: GREATER
43761: OR
43762: PUSH
43763: LD_VAR 0 8
43767: PUSH
43768: LD_INT 2
43770: ARRAY
43771: PUSH
43772: LD_VAR 0 13
43776: PUSH
43777: LD_INT 2
43779: MINUS
43780: LESS
43781: OR
43782: PUSH
43783: LD_VAR 0 8
43787: PUSH
43788: LD_INT 3
43790: ARRAY
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: LD_INT 8
43797: PUSH
43798: LD_INT 9
43800: PUSH
43801: LD_INT 10
43803: PUSH
43804: LD_INT 11
43806: PUSH
43807: LD_INT 12
43809: PUSH
43810: LD_INT 13
43812: PUSH
43813: LD_INT 16
43815: PUSH
43816: LD_INT 17
43818: PUSH
43819: LD_INT 18
43821: PUSH
43822: LD_INT 19
43824: PUSH
43825: LD_INT 20
43827: PUSH
43828: LD_INT 21
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: IN
43846: NOT
43847: OR
43848: PUSH
43849: LD_VAR 0 8
43853: PUSH
43854: LD_INT 5
43856: ARRAY
43857: NOT
43858: OR
43859: PUSH
43860: LD_VAR 0 8
43864: PUSH
43865: LD_INT 6
43867: ARRAY
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: LD_INT 7
43877: PUSH
43878: LD_INT 9
43880: PUSH
43881: LD_INT 10
43883: PUSH
43884: LD_INT 11
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: IN
43895: NOT
43896: OR
43897: IFFALSE 43903
// exit ;
43899: POP
43900: POP
43901: GO 43986
// end ;
43903: GO 43574
43905: POP
43906: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43907: LD_VAR 0 9
43911: PPUSH
43912: LD_VAR 0 3
43916: PPUSH
43917: LD_VAR 0 4
43921: PPUSH
43922: LD_INT 20
43924: PPUSH
43925: CALL 35932 0 4
43929: PUSH
43930: LD_INT 4
43932: ARRAY
43933: IFFALSE 43937
// exit ;
43935: GO 43986
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43937: LD_VAR 0 2
43941: PUSH
43942: LD_INT 29
43944: PUSH
43945: LD_INT 30
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: IN
43952: PUSH
43953: LD_VAR 0 3
43957: PPUSH
43958: LD_VAR 0 4
43962: PPUSH
43963: LD_VAR 0 9
43967: PPUSH
43968: CALL_OW 440
43972: NOT
43973: AND
43974: IFFALSE 43978
// exit ;
43976: GO 43986
// result := true ;
43978: LD_ADDR_VAR 0 6
43982: PUSH
43983: LD_INT 1
43985: ST_TO_ADDR
// end ;
43986: LD_VAR 0 6
43990: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43991: LD_INT 0
43993: PPUSH
43994: PPUSH
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
44004: PPUSH
44005: PPUSH
44006: PPUSH
44007: PPUSH
44008: PPUSH
44009: PPUSH
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
44016: PPUSH
44017: PPUSH
44018: PPUSH
44019: PPUSH
44020: PPUSH
44021: PPUSH
44022: PPUSH
44023: PPUSH
44024: PPUSH
44025: PPUSH
44026: PPUSH
44027: PPUSH
44028: PPUSH
44029: PPUSH
44030: PPUSH
44031: PPUSH
44032: PPUSH
44033: PPUSH
44034: PPUSH
44035: PPUSH
44036: PPUSH
44037: PPUSH
44038: PPUSH
44039: PPUSH
44040: PPUSH
44041: PPUSH
44042: PPUSH
44043: PPUSH
44044: PPUSH
44045: PPUSH
44046: PPUSH
44047: PPUSH
44048: PPUSH
44049: PPUSH
44050: PPUSH
// result = [ ] ;
44051: LD_ADDR_VAR 0 7
44055: PUSH
44056: EMPTY
44057: ST_TO_ADDR
// temp_list = [ ] ;
44058: LD_ADDR_VAR 0 9
44062: PUSH
44063: EMPTY
44064: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44065: LD_VAR 0 4
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 3
44081: PUSH
44082: LD_INT 4
44084: PUSH
44085: LD_INT 5
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: IN
44096: NOT
44097: PUSH
44098: LD_VAR 0 1
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: IN
44113: PUSH
44114: LD_VAR 0 5
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 3
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: IN
44133: NOT
44134: AND
44135: OR
44136: IFFALSE 44140
// exit ;
44138: GO 62531
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44140: LD_VAR 0 1
44144: PUSH
44145: LD_INT 6
44147: PUSH
44148: LD_INT 7
44150: PUSH
44151: LD_INT 8
44153: PUSH
44154: LD_INT 13
44156: PUSH
44157: LD_INT 12
44159: PUSH
44160: LD_INT 15
44162: PUSH
44163: LD_INT 11
44165: PUSH
44166: LD_INT 14
44168: PUSH
44169: LD_INT 10
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: IN
44183: IFFALSE 44193
// btype = b_lab ;
44185: LD_ADDR_VAR 0 1
44189: PUSH
44190: LD_INT 6
44192: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44193: LD_VAR 0 6
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: IN
44212: NOT
44213: PUSH
44214: LD_VAR 0 1
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: LD_INT 3
44230: PUSH
44231: LD_INT 6
44233: PUSH
44234: LD_INT 36
44236: PUSH
44237: LD_INT 4
44239: PUSH
44240: LD_INT 5
44242: PUSH
44243: LD_INT 31
44245: PUSH
44246: LD_INT 32
44248: PUSH
44249: LD_INT 33
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: IN
44265: NOT
44266: PUSH
44267: LD_VAR 0 6
44271: PUSH
44272: LD_INT 1
44274: EQUAL
44275: AND
44276: OR
44277: PUSH
44278: LD_VAR 0 1
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: LD_INT 3
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: IN
44293: NOT
44294: PUSH
44295: LD_VAR 0 6
44299: PUSH
44300: LD_INT 2
44302: EQUAL
44303: AND
44304: OR
44305: IFFALSE 44315
// mode = 0 ;
44307: LD_ADDR_VAR 0 6
44311: PUSH
44312: LD_INT 0
44314: ST_TO_ADDR
// case mode of 0 :
44315: LD_VAR 0 6
44319: PUSH
44320: LD_INT 0
44322: DOUBLE
44323: EQUAL
44324: IFTRUE 44328
44326: GO 55781
44328: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44329: LD_ADDR_VAR 0 11
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: LD_INT 1
44402: NEG
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 0
44422: PUSH
44423: LD_INT 2
44425: NEG
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 1
44433: PUSH
44434: LD_INT 1
44436: NEG
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 1
44444: PUSH
44445: LD_INT 2
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 0
44485: PUSH
44486: LD_INT 3
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 1
44495: NEG
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44522: LD_ADDR_VAR 0 12
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 1
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: NEG
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: LD_INT 1
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: PUSH
44615: LD_INT 0
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 2
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: LD_INT 1
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: LD_INT 0
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 2
44668: NEG
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 3
44679: NEG
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 3
44690: NEG
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: LIST
44715: LIST
44716: LIST
44717: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44718: LD_ADDR_VAR 0 13
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 1
44738: NEG
44739: PUSH
44740: EMPTY
44741: LIST
44742: LIST
44743: PUSH
44744: LD_INT 1
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 0
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 1
44776: NEG
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: NEG
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 2
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: LD_INT 3
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 3
44889: NEG
44890: PUSH
44891: LD_INT 3
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44917: LD_ADDR_VAR 0 14
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: LD_INT 2
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: LD_INT 2
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 2
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: NEG
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 3
45067: NEG
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 3
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45113: LD_ADDR_VAR 0 15
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: NEG
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: NEG
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45306: LD_ADDR_VAR 0 16
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 2
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: NEG
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 2
45441: NEG
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 3
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 3
45463: PUSH
45464: LD_INT 3
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: LD_INT 3
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45499: LD_ADDR_VAR 0 17
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 2
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 2
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 0
45654: PUSH
45655: LD_INT 2
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: LIST
45719: LIST
45720: LIST
45721: LIST
45722: LIST
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45729: LD_ADDR_VAR 0 18
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 1
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 2
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 2
45864: PUSH
45865: LD_INT 2
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 2
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: LD_INT 2
45932: NEG
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45959: LD_ADDR_VAR 0 19
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 2
46135: NEG
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 2
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46189: LD_ADDR_VAR 0 20
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 1
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 0
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: LD_INT 0
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: LD_INT 2
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: LD_INT 0
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: NEG
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: LD_INT 2
46392: NEG
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46419: LD_ADDR_VAR 0 21
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 1
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: NEG
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 1
46488: NEG
46489: PUSH
46490: LD_INT 1
46492: NEG
46493: PUSH
46494: EMPTY
46495: LIST
46496: LIST
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: LD_INT 2
46504: NEG
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: LD_INT 1
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: LD_INT 0
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 2
46544: PUSH
46545: LD_INT 1
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: PUSH
46555: LD_INT 2
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: LD_INT 2
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: PUSH
46593: LD_INT 2
46595: NEG
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: LD_INT 2
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46649: LD_ADDR_VAR 0 22
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 0
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 1
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 2
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 2
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 2
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: NEG
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 2
46836: NEG
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 2
46848: NEG
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46879: LD_ADDR_VAR 0 23
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 1
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 1
46960: NEG
46961: PUSH
46962: LD_INT 2
46964: NEG
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 2
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 2
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 2
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 2
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 2
47055: NEG
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 2
47090: NEG
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 2
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47159: LD_ADDR_VAR 0 24
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: NEG
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 3
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: LD_INT 2
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47435: LD_ADDR_VAR 0 25
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 1
47473: PUSH
47474: LD_INT 1
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: NEG
47517: PUSH
47518: LD_INT 2
47520: NEG
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 1
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 2
47570: PUSH
47571: LD_INT 2
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: LD_INT 2
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 3
47656: PUSH
47657: LD_INT 2
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 3
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47709: LD_ADDR_VAR 0 26
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: LD_INT 0
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 1
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 1
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: NEG
47791: PUSH
47792: LD_INT 2
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: LD_INT 2
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 1
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: LD_INT 3
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: LD_INT 3
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47985: LD_ADDR_VAR 0 27
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 0
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 1
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 1
48066: NEG
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 2
48161: NEG
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 2
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: NEG
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 3
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: NEG
48231: PUSH
48232: LD_INT 2
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48265: LD_ADDR_VAR 0 28
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 0
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 1
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 1
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 0
48313: PUSH
48314: LD_INT 1
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: LD_INT 0
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: NEG
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: LD_INT 2
48390: PUSH
48391: LD_INT 1
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 2
48400: PUSH
48401: LD_INT 2
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 2
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 2
48464: NEG
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 3
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48547: LD_ADDR_VAR 0 29
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 1
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: NEG
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 2
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: LD_INT 2
48643: NEG
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 2
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: NEG
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: LD_INT 2
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: NEG
48738: PUSH
48739: LD_INT 3
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: LD_INT 1
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: LD_INT 1
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: LD_INT 3
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 3
48791: NEG
48792: PUSH
48793: LD_INT 2
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48826: LD_ADDR_VAR 0 30
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: NEG
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 2
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 2
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 2
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 3
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 3
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49104: LD_ADDR_VAR 0 31
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: LD_INT 0
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: LD_INT 2
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: PUSH
49306: LD_INT 1
49308: NEG
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 3
49316: PUSH
49317: LD_INT 1
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: LD_INT 1
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 2
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 3
49347: NEG
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49382: LD_ADDR_VAR 0 32
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 3
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 3
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49660: LD_ADDR_VAR 0 33
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 2
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: LD_INT 2
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 0
49794: PUSH
49795: LD_INT 2
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: LD_INT 1
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 2
49826: NEG
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 2
49838: NEG
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: NEG
49851: PUSH
49852: LD_INT 3
49854: NEG
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 3
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 3
49904: NEG
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49939: LD_ADDR_VAR 0 34
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 2
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 2
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: NEG
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: NEG
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 3
50153: PUSH
50154: LD_INT 2
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 3
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 3
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50219: LD_ADDR_VAR 0 35
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 2
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50331: LD_ADDR_VAR 0 36
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: LD_INT 0
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: NEG
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 2
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50443: LD_ADDR_VAR 0 37
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 0
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 1
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50555: LD_ADDR_VAR 0 38
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 1
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: NEG
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: NEG
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50667: LD_ADDR_VAR 0 39
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 0
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 1
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 2
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: LD_INT 2
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50779: LD_ADDR_VAR 0 40
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50891: LD_ADDR_VAR 0 41
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: LD_INT 1
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: NEG
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 3
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 3
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: NEG
51201: PUSH
51202: LD_INT 3
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51241: LD_ADDR_VAR 0 42
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 1
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: LD_INT 2
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 2
51337: NEG
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 2
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 0
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 2
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: LD_INT 2
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 3
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51591: LD_ADDR_VAR 0 43
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 0
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 0
51639: PUSH
51640: LD_INT 1
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: LD_INT 0
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 1
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: NEG
51673: PUSH
51674: LD_INT 2
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 2
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: NEG
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: LD_INT 1
51817: NEG
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 3
51825: PUSH
51826: LD_INT 0
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 3
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 3
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 2
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 3
51887: NEG
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 3
51898: NEG
51899: PUSH
51900: LD_INT 1
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51939: LD_ADDR_VAR 0 44
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 0
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 0
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 2
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 1
52073: PUSH
52074: LD_INT 2
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: NEG
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 2
52129: NEG
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 3
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 3
52172: PUSH
52173: LD_INT 2
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 3
52236: NEG
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: NEG
52249: PUSH
52250: LD_INT 3
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52289: LD_ADDR_VAR 0 45
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 1
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 1
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: NEG
52371: PUSH
52372: LD_INT 2
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: LD_INT 2
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: NEG
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 2
52455: NEG
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: NEG
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: LD_INT 3
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 3
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 2
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 3
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 3
52535: PUSH
52536: LD_INT 3
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 3
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 3
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: LD_INT 2
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: LD_INT 2
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52639: LD_ADDR_VAR 0 46
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 0
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 1
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 1
52697: NEG
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 1
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 2
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 3
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: LD_INT 3
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 3
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: PUSH
52894: LD_INT 3
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: LD_INT 2
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: NEG
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 3
52935: NEG
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: NEG
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52987: LD_ADDR_VAR 0 47
52991: PUSH
52992: LD_INT 0
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 0
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: LD_INT 1
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: NEG
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: NEG
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53138: LD_ADDR_VAR 0 48
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: LD_INT 0
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 1
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: LD_INT 2
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: LD_INT 0
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53285: LD_ADDR_VAR 0 49
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: LD_INT 0
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 1
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: PUSH
53324: LD_INT 1
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 1
53358: NEG
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: LD_INT 2
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53429: LD_ADDR_VAR 0 50
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 1
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: LD_INT 0
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: NEG
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: LD_INT 2
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53573: LD_ADDR_VAR 0 51
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 0
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 1
53611: PUSH
53612: LD_INT 1
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: NEG
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: LD_INT 2
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: LD_INT 0
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53720: LD_ADDR_VAR 0 52
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 1
53813: NEG
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 1
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53871: LD_ADDR_VAR 0 53
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: LD_INT 0
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 1
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: NEG
54059: PUSH
54060: LD_INT 1
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: LD_INT 2
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54101: LD_ADDR_VAR 0 54
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 1
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 2
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 2
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 1
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 2
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 1
54266: NEG
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 2
54277: NEG
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: NEG
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: NEG
54301: PUSH
54302: LD_INT 2
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54331: LD_ADDR_VAR 0 55
54335: PUSH
54336: LD_INT 0
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 1
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 1
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 0
54379: PUSH
54380: LD_INT 1
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: NEG
54390: PUSH
54391: LD_INT 0
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 2
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: PUSH
54477: LD_INT 2
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54561: LD_ADDR_VAR 0 56
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 2
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 2
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 2
54748: NEG
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54791: LD_ADDR_VAR 0 57
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 1
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 0
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 1
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 2
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: PUSH
54907: LD_INT 0
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: LD_INT 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 2
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 2
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55021: LD_ADDR_VAR 0 58
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 1
55166: PUSH
55167: LD_INT 2
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: LD_INT 1
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 2
55220: NEG
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55251: LD_ADDR_VAR 0 59
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 1
55271: NEG
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 0
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 1
55320: NEG
55321: PUSH
55322: LD_INT 1
55324: NEG
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55339: LD_ADDR_VAR 0 60
55343: PUSH
55344: LD_INT 0
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 1
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 1
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 1
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55427: LD_ADDR_VAR 0 61
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55515: LD_ADDR_VAR 0 62
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 0
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 1
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55603: LD_ADDR_VAR 0 63
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55691: LD_ADDR_VAR 0 64
55695: PUSH
55696: LD_INT 0
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 1
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 1
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: ST_TO_ADDR
// end ; 1 :
55779: GO 61676
55781: LD_INT 1
55783: DOUBLE
55784: EQUAL
55785: IFTRUE 55789
55787: GO 58412
55789: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55790: LD_ADDR_VAR 0 11
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: LIST
55833: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55834: LD_ADDR_VAR 0 12
55838: PUSH
55839: LD_INT 2
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 3
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 3
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55875: LD_ADDR_VAR 0 13
55879: PUSH
55880: LD_INT 3
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: LD_INT 3
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 2
55902: PUSH
55903: LD_INT 3
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55915: LD_ADDR_VAR 0 14
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 3
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 3
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: LIST
55955: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55956: LD_ADDR_VAR 0 15
55960: PUSH
55961: LD_INT 2
55963: NEG
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: NEG
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56000: LD_ADDR_VAR 0 16
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: LD_INT 2
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 3
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: LIST
56045: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56046: LD_ADDR_VAR 0 17
56050: PUSH
56051: LD_INT 1
56053: NEG
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56090: LD_ADDR_VAR 0 18
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 3
56108: PUSH
56109: LD_INT 0
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56131: LD_ADDR_VAR 0 19
56135: PUSH
56136: LD_INT 3
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 3
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56171: LD_ADDR_VAR 0 20
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: LIST
56211: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56212: LD_ADDR_VAR 0 21
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56256: LD_ADDR_VAR 0 22
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 3
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 3
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: LIST
56301: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56302: LD_ADDR_VAR 0 23
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 3
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 3
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56346: LD_ADDR_VAR 0 24
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 3
56363: PUSH
56364: LD_INT 1
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 4
56374: PUSH
56375: LD_INT 1
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56387: LD_ADDR_VAR 0 25
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: LD_INT 3
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 4
56404: PUSH
56405: LD_INT 3
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: LD_INT 4
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56427: LD_ADDR_VAR 0 26
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 4
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 1
56454: NEG
56455: PUSH
56456: LD_INT 3
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56468: LD_ADDR_VAR 0 27
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 4
56497: NEG
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56512: LD_ADDR_VAR 0 28
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: LD_INT 4
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: LD_INT 3
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: LIST
56557: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56558: LD_ADDR_VAR 0 29
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: LD_INT 3
56569: NEG
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 4
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 4
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 3
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: LD_INT 5
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 0
56645: PUSH
56646: LD_INT 5
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: LD_INT 4
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: LD_INT 6
56671: NEG
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: LD_INT 6
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 5
56693: NEG
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56713: LD_ADDR_VAR 0 30
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: LD_INT 1
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 3
56731: PUSH
56732: LD_INT 0
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 1
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 4
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 4
56772: PUSH
56773: LD_INT 1
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 4
56782: PUSH
56783: LD_INT 1
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 5
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 5
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 5
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 6
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 6
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56856: LD_ADDR_VAR 0 31
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: LD_INT 3
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 2
56883: PUSH
56884: LD_INT 3
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 4
56893: PUSH
56894: LD_INT 3
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 4
56903: PUSH
56904: LD_INT 4
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: LD_INT 4
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 5
56923: PUSH
56924: LD_INT 4
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 5
56933: PUSH
56934: LD_INT 5
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 4
56943: PUSH
56944: LD_INT 5
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 6
56953: PUSH
56954: LD_INT 5
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 6
56963: PUSH
56964: LD_INT 6
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 5
56973: PUSH
56974: LD_INT 6
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56995: LD_ADDR_VAR 0 32
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: LD_INT 3
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: LD_INT 3
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 4
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 4
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 3
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: LD_INT 5
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: LD_INT 5
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: NEG
57085: PUSH
57086: LD_INT 4
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 6
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: LD_INT 6
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 5
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57138: LD_ADDR_VAR 0 33
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 4
57190: NEG
57191: PUSH
57192: LD_INT 0
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 4
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 4
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 5
57224: NEG
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 5
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 5
57247: NEG
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 6
57258: NEG
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 6
57269: NEG
57270: PUSH
57271: LD_INT 1
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57293: LD_ADDR_VAR 0 34
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: NEG
57313: PUSH
57314: LD_INT 2
57316: NEG
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: LD_INT 3
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: NEG
57337: PUSH
57338: LD_INT 4
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 4
57348: NEG
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 4
57360: NEG
57361: PUSH
57362: LD_INT 4
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: NEG
57373: PUSH
57374: LD_INT 5
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 5
57384: NEG
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 5
57396: NEG
57397: PUSH
57398: LD_INT 5
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 5
57408: NEG
57409: PUSH
57410: LD_INT 6
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 6
57420: NEG
57421: PUSH
57422: LD_INT 5
57424: NEG
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 6
57432: NEG
57433: PUSH
57434: LD_INT 6
57436: NEG
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57456: LD_ADDR_VAR 0 41
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: NEG
57475: PUSH
57476: LD_INT 3
57478: NEG
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57500: LD_ADDR_VAR 0 42
57504: PUSH
57505: LD_INT 2
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: LIST
57540: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57541: LD_ADDR_VAR 0 43
57545: PUSH
57546: LD_INT 2
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: LIST
57580: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57581: LD_ADDR_VAR 0 44
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 2
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57622: LD_ADDR_VAR 0 45
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 3
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: LIST
57665: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57666: LD_ADDR_VAR 0 46
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 3
57697: NEG
57698: PUSH
57699: LD_INT 2
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: LIST
57711: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57712: LD_ADDR_VAR 0 47
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: LD_INT 3
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 3
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57745: LD_ADDR_VAR 0 48
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57776: LD_ADDR_VAR 0 49
57780: PUSH
57781: LD_INT 3
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57805: LD_ADDR_VAR 0 50
57809: PUSH
57810: LD_INT 2
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57834: LD_ADDR_VAR 0 51
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: NEG
57853: PUSH
57854: LD_INT 1
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57865: LD_ADDR_VAR 0 52
57869: PUSH
57870: LD_INT 3
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 3
57884: NEG
57885: PUSH
57886: LD_INT 2
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57898: LD_ADDR_VAR 0 53
57902: PUSH
57903: LD_INT 1
57905: NEG
57906: PUSH
57907: LD_INT 3
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: LD_INT 3
57920: NEG
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: LD_INT 2
57931: NEG
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: LIST
57941: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57942: LD_ADDR_VAR 0 54
57946: PUSH
57947: LD_INT 2
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 3
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57983: LD_ADDR_VAR 0 55
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 3
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: LIST
58022: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58023: LD_ADDR_VAR 0 56
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: LD_INT 3
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: LIST
58063: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58064: LD_ADDR_VAR 0 57
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 3
58082: NEG
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58108: LD_ADDR_VAR 0 58
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: LD_INT 3
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: LD_INT 2
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 3
58139: NEG
58140: PUSH
58141: LD_INT 3
58143: NEG
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: LIST
58153: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58154: LD_ADDR_VAR 0 59
58158: PUSH
58159: LD_INT 1
58161: NEG
58162: PUSH
58163: LD_INT 2
58165: NEG
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 0
58173: PUSH
58174: LD_INT 2
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: LD_INT 1
58187: NEG
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: LIST
58197: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58198: LD_ADDR_VAR 0 60
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: LIST
58238: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58239: LD_ADDR_VAR 0 61
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58279: LD_ADDR_VAR 0 62
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 2
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58320: LD_ADDR_VAR 0 63
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 2
58338: NEG
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58364: LD_ADDR_VAR 0 64
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: LD_INT 2
58399: NEG
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: LIST
58409: ST_TO_ADDR
// end ; 2 :
58410: GO 61676
58412: LD_INT 2
58414: DOUBLE
58415: EQUAL
58416: IFTRUE 58420
58418: GO 61675
58420: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58421: LD_ADDR_VAR 0 29
58425: PUSH
58426: LD_INT 4
58428: PUSH
58429: LD_INT 0
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 4
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 5
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 5
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 3
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 3
58500: PUSH
58501: LD_INT 2
58503: NEG
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 5
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 3
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 4
58541: PUSH
58542: LD_INT 3
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 4
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 4
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: LD_INT 4
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 3
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 4
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 5
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 5
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 4
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 3
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: PUSH
58684: LD_INT 5
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: LD_INT 3
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 3
58704: NEG
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 4
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 4
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: LD_INT 4
58783: NEG
58784: PUSH
58785: LD_INT 2
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 2
58795: NEG
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 4
58806: NEG
58807: PUSH
58808: LD_INT 4
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: LD_INT 4
58818: NEG
58819: PUSH
58820: LD_INT 5
58822: NEG
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 3
58830: NEG
58831: PUSH
58832: LD_INT 4
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: NEG
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: NEG
58855: PUSH
58856: LD_INT 3
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 5
58866: NEG
58867: PUSH
58868: LD_INT 4
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 5
58878: NEG
58879: PUSH
58880: LD_INT 5
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 3
58890: NEG
58891: PUSH
58892: LD_INT 5
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 5
58902: NEG
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58959: LD_ADDR_VAR 0 30
58963: PUSH
58964: LD_INT 4
58966: PUSH
58967: LD_INT 4
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 4
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 5
58986: PUSH
58987: LD_INT 4
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 5
58996: PUSH
58997: LD_INT 5
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 4
59006: PUSH
59007: LD_INT 5
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 3
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 5
59036: PUSH
59037: LD_INT 3
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 3
59046: PUSH
59047: LD_INT 5
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: LD_INT 3
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: LD_INT 4
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 4
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 3
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: LD_INT 4
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 4
59149: NEG
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 4
59160: NEG
59161: PUSH
59162: LD_INT 1
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 3
59172: NEG
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: LD_INT 1
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 4
59194: NEG
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 5
59205: NEG
59206: PUSH
59207: LD_INT 0
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 5
59216: NEG
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 5
59228: NEG
59229: PUSH
59230: LD_INT 2
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 3
59240: NEG
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 3
59251: NEG
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: NEG
59264: PUSH
59265: LD_INT 4
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: NEG
59280: PUSH
59281: EMPTY
59282: LIST
59283: LIST
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: LD_INT 2
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 4
59311: NEG
59312: PUSH
59313: LD_INT 3
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 4
59323: NEG
59324: PUSH
59325: LD_INT 4
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: LD_INT 4
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 4
59347: NEG
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 4
59362: NEG
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 5
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 4
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 3
59395: NEG
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_INT 0
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: LD_INT 5
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 5
59453: NEG
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59506: LD_ADDR_VAR 0 31
59510: PUSH
59511: LD_INT 0
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 3
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 1
59533: PUSH
59534: LD_INT 4
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: LD_INT 5
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: LD_INT 5
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: NEG
59564: PUSH
59565: LD_INT 4
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 2
59585: PUSH
59586: LD_INT 5
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 2
59595: NEG
59596: PUSH
59597: LD_INT 3
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 2
59629: NEG
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 2
59640: NEG
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 4
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 4
59685: NEG
59686: PUSH
59687: LD_INT 2
59689: NEG
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 2
59697: NEG
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 4
59708: NEG
59709: PUSH
59710: LD_INT 4
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 4
59720: NEG
59721: PUSH
59722: LD_INT 5
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 3
59732: NEG
59733: PUSH
59734: LD_INT 4
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 3
59744: NEG
59745: PUSH
59746: LD_INT 3
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 5
59768: NEG
59769: PUSH
59770: LD_INT 4
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 5
59780: NEG
59781: PUSH
59782: LD_INT 5
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 3
59792: NEG
59793: PUSH
59794: LD_INT 5
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: LD_INT 3
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 0
59816: PUSH
59817: LD_INT 3
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: LD_INT 4
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 3
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: LD_INT 3
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: NEG
59884: PUSH
59885: LD_INT 4
59887: NEG
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 2
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 4
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 4
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 4
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 5
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 5
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 4
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 3
59969: PUSH
59970: LD_INT 0
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 3
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 3
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 5
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60056: LD_ADDR_VAR 0 32
60060: PUSH
60061: LD_INT 4
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 4
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: NEG
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 3
60097: NEG
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 4
60108: NEG
60109: PUSH
60110: LD_INT 1
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 5
60119: NEG
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 5
60130: NEG
60131: PUSH
60132: LD_INT 1
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 5
60142: NEG
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: NEG
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 3
60165: NEG
60166: PUSH
60167: LD_INT 3
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: LD_INT 4
60181: NEG
60182: PUSH
60183: EMPTY
60184: LIST
60185: LIST
60186: PUSH
60187: LD_INT 2
60189: NEG
60190: PUSH
60191: LD_INT 3
60193: NEG
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 3
60213: NEG
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 4
60225: NEG
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 4
60237: NEG
60238: PUSH
60239: LD_INT 4
60241: NEG
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: LD_INT 4
60253: NEG
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 4
60261: NEG
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: LD_INT 4
60276: NEG
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: LD_INT 5
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: PUSH
60296: LD_INT 4
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 3
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: NEG
60329: PUSH
60330: LD_INT 4
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 5
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 2
60363: NEG
60364: PUSH
60365: LD_INT 5
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 3
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 4
60396: PUSH
60397: LD_INT 0
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 4
60468: PUSH
60469: LD_INT 4
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 4
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 5
60488: PUSH
60489: LD_INT 4
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 5
60498: PUSH
60499: LD_INT 5
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 4
60508: PUSH
60509: LD_INT 5
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 3
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 5
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 3
60548: PUSH
60549: LD_INT 5
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60603: LD_ADDR_VAR 0 33
60607: PUSH
60608: LD_INT 4
60610: NEG
60611: PUSH
60612: LD_INT 4
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 4
60622: NEG
60623: PUSH
60624: LD_INT 5
60626: NEG
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 3
60634: NEG
60635: PUSH
60636: LD_INT 4
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: LD_INT 3
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 4
60658: NEG
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 5
60670: NEG
60671: PUSH
60672: LD_INT 4
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 5
60682: NEG
60683: PUSH
60684: LD_INT 5
60686: NEG
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: LD_INT 5
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 5
60706: NEG
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: LD_INT 3
60721: NEG
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: LD_INT 4
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: LD_INT 3
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 3
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 1
60785: NEG
60786: PUSH
60787: LD_INT 4
60789: NEG
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 2
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 4
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 4
60830: PUSH
60831: LD_INT 1
60833: NEG
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 5
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 5
60851: PUSH
60852: LD_INT 1
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 3
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 2
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 5
60903: PUSH
60904: LD_INT 2
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 3
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 4
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 3
60953: PUSH
60954: LD_INT 4
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 2
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 4
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: LD_INT 4
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 4
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: LD_INT 3
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 4
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 1
61033: PUSH
61034: LD_INT 5
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 5
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: LD_INT 4
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 1
61064: NEG
61065: PUSH
61066: LD_INT 3
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: LD_INT 5
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 2
61085: NEG
61086: PUSH
61087: LD_INT 3
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61141: LD_ADDR_VAR 0 34
61145: PUSH
61146: LD_INT 0
61148: PUSH
61149: LD_INT 4
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: LD_INT 5
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: LD_INT 4
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 0
61192: PUSH
61193: LD_INT 3
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 1
61203: NEG
61204: PUSH
61205: LD_INT 4
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 1
61215: NEG
61216: PUSH
61217: LD_INT 5
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: PUSH
61228: LD_INT 3
61230: NEG
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 2
61238: NEG
61239: PUSH
61240: LD_INT 5
61242: NEG
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: LD_INT 1
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 4
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 4
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 2
61322: PUSH
61323: LD_INT 2
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 4
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 4
61343: PUSH
61344: LD_INT 4
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 4
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 5
61363: PUSH
61364: LD_INT 4
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 5
61373: PUSH
61374: LD_INT 5
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 4
61383: PUSH
61384: LD_INT 5
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 3
61393: PUSH
61394: LD_INT 4
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 3
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 5
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: PUSH
61424: LD_INT 5
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 1
61463: PUSH
61464: LD_INT 4
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 0
61473: PUSH
61474: LD_INT 4
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 1
61483: NEG
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 2
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: LD_INT 4
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 2
61515: NEG
61516: PUSH
61517: LD_INT 2
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 4
61526: NEG
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 4
61537: NEG
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 3
61560: NEG
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 4
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 5
61582: NEG
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 5
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 5
61605: NEG
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: NEG
61618: PUSH
61619: LD_INT 2
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: ST_TO_ADDR
// end ; end ;
61673: GO 61676
61675: POP
// case btype of b_depot , b_warehouse :
61676: LD_VAR 0 1
61680: PUSH
61681: LD_INT 0
61683: DOUBLE
61684: EQUAL
61685: IFTRUE 61695
61687: LD_INT 1
61689: DOUBLE
61690: EQUAL
61691: IFTRUE 61695
61693: GO 61896
61695: POP
// case nation of nation_american :
61696: LD_VAR 0 5
61700: PUSH
61701: LD_INT 1
61703: DOUBLE
61704: EQUAL
61705: IFTRUE 61709
61707: GO 61765
61709: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61710: LD_ADDR_VAR 0 9
61714: PUSH
61715: LD_VAR 0 11
61719: PUSH
61720: LD_VAR 0 12
61724: PUSH
61725: LD_VAR 0 13
61729: PUSH
61730: LD_VAR 0 14
61734: PUSH
61735: LD_VAR 0 15
61739: PUSH
61740: LD_VAR 0 16
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: PUSH
61753: LD_VAR 0 4
61757: PUSH
61758: LD_INT 1
61760: PLUS
61761: ARRAY
61762: ST_TO_ADDR
61763: GO 61894
61765: LD_INT 2
61767: DOUBLE
61768: EQUAL
61769: IFTRUE 61773
61771: GO 61829
61773: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61774: LD_ADDR_VAR 0 9
61778: PUSH
61779: LD_VAR 0 17
61783: PUSH
61784: LD_VAR 0 18
61788: PUSH
61789: LD_VAR 0 19
61793: PUSH
61794: LD_VAR 0 20
61798: PUSH
61799: LD_VAR 0 21
61803: PUSH
61804: LD_VAR 0 22
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: PUSH
61817: LD_VAR 0 4
61821: PUSH
61822: LD_INT 1
61824: PLUS
61825: ARRAY
61826: ST_TO_ADDR
61827: GO 61894
61829: LD_INT 3
61831: DOUBLE
61832: EQUAL
61833: IFTRUE 61837
61835: GO 61893
61837: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61838: LD_ADDR_VAR 0 9
61842: PUSH
61843: LD_VAR 0 23
61847: PUSH
61848: LD_VAR 0 24
61852: PUSH
61853: LD_VAR 0 25
61857: PUSH
61858: LD_VAR 0 26
61862: PUSH
61863: LD_VAR 0 27
61867: PUSH
61868: LD_VAR 0 28
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: PUSH
61881: LD_VAR 0 4
61885: PUSH
61886: LD_INT 1
61888: PLUS
61889: ARRAY
61890: ST_TO_ADDR
61891: GO 61894
61893: POP
61894: GO 62449
61896: LD_INT 2
61898: DOUBLE
61899: EQUAL
61900: IFTRUE 61910
61902: LD_INT 3
61904: DOUBLE
61905: EQUAL
61906: IFTRUE 61910
61908: GO 61966
61910: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61911: LD_ADDR_VAR 0 9
61915: PUSH
61916: LD_VAR 0 29
61920: PUSH
61921: LD_VAR 0 30
61925: PUSH
61926: LD_VAR 0 31
61930: PUSH
61931: LD_VAR 0 32
61935: PUSH
61936: LD_VAR 0 33
61940: PUSH
61941: LD_VAR 0 34
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: PUSH
61954: LD_VAR 0 4
61958: PUSH
61959: LD_INT 1
61961: PLUS
61962: ARRAY
61963: ST_TO_ADDR
61964: GO 62449
61966: LD_INT 16
61968: DOUBLE
61969: EQUAL
61970: IFTRUE 62028
61972: LD_INT 17
61974: DOUBLE
61975: EQUAL
61976: IFTRUE 62028
61978: LD_INT 18
61980: DOUBLE
61981: EQUAL
61982: IFTRUE 62028
61984: LD_INT 19
61986: DOUBLE
61987: EQUAL
61988: IFTRUE 62028
61990: LD_INT 22
61992: DOUBLE
61993: EQUAL
61994: IFTRUE 62028
61996: LD_INT 20
61998: DOUBLE
61999: EQUAL
62000: IFTRUE 62028
62002: LD_INT 21
62004: DOUBLE
62005: EQUAL
62006: IFTRUE 62028
62008: LD_INT 23
62010: DOUBLE
62011: EQUAL
62012: IFTRUE 62028
62014: LD_INT 24
62016: DOUBLE
62017: EQUAL
62018: IFTRUE 62028
62020: LD_INT 25
62022: DOUBLE
62023: EQUAL
62024: IFTRUE 62028
62026: GO 62084
62028: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62029: LD_ADDR_VAR 0 9
62033: PUSH
62034: LD_VAR 0 35
62038: PUSH
62039: LD_VAR 0 36
62043: PUSH
62044: LD_VAR 0 37
62048: PUSH
62049: LD_VAR 0 38
62053: PUSH
62054: LD_VAR 0 39
62058: PUSH
62059: LD_VAR 0 40
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: PUSH
62072: LD_VAR 0 4
62076: PUSH
62077: LD_INT 1
62079: PLUS
62080: ARRAY
62081: ST_TO_ADDR
62082: GO 62449
62084: LD_INT 6
62086: DOUBLE
62087: EQUAL
62088: IFTRUE 62140
62090: LD_INT 7
62092: DOUBLE
62093: EQUAL
62094: IFTRUE 62140
62096: LD_INT 8
62098: DOUBLE
62099: EQUAL
62100: IFTRUE 62140
62102: LD_INT 13
62104: DOUBLE
62105: EQUAL
62106: IFTRUE 62140
62108: LD_INT 12
62110: DOUBLE
62111: EQUAL
62112: IFTRUE 62140
62114: LD_INT 15
62116: DOUBLE
62117: EQUAL
62118: IFTRUE 62140
62120: LD_INT 11
62122: DOUBLE
62123: EQUAL
62124: IFTRUE 62140
62126: LD_INT 14
62128: DOUBLE
62129: EQUAL
62130: IFTRUE 62140
62132: LD_INT 10
62134: DOUBLE
62135: EQUAL
62136: IFTRUE 62140
62138: GO 62196
62140: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62141: LD_ADDR_VAR 0 9
62145: PUSH
62146: LD_VAR 0 41
62150: PUSH
62151: LD_VAR 0 42
62155: PUSH
62156: LD_VAR 0 43
62160: PUSH
62161: LD_VAR 0 44
62165: PUSH
62166: LD_VAR 0 45
62170: PUSH
62171: LD_VAR 0 46
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: PUSH
62184: LD_VAR 0 4
62188: PUSH
62189: LD_INT 1
62191: PLUS
62192: ARRAY
62193: ST_TO_ADDR
62194: GO 62449
62196: LD_INT 36
62198: DOUBLE
62199: EQUAL
62200: IFTRUE 62204
62202: GO 62260
62204: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62205: LD_ADDR_VAR 0 9
62209: PUSH
62210: LD_VAR 0 47
62214: PUSH
62215: LD_VAR 0 48
62219: PUSH
62220: LD_VAR 0 49
62224: PUSH
62225: LD_VAR 0 50
62229: PUSH
62230: LD_VAR 0 51
62234: PUSH
62235: LD_VAR 0 52
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: PUSH
62248: LD_VAR 0 4
62252: PUSH
62253: LD_INT 1
62255: PLUS
62256: ARRAY
62257: ST_TO_ADDR
62258: GO 62449
62260: LD_INT 4
62262: DOUBLE
62263: EQUAL
62264: IFTRUE 62286
62266: LD_INT 5
62268: DOUBLE
62269: EQUAL
62270: IFTRUE 62286
62272: LD_INT 34
62274: DOUBLE
62275: EQUAL
62276: IFTRUE 62286
62278: LD_INT 37
62280: DOUBLE
62281: EQUAL
62282: IFTRUE 62286
62284: GO 62342
62286: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62287: LD_ADDR_VAR 0 9
62291: PUSH
62292: LD_VAR 0 53
62296: PUSH
62297: LD_VAR 0 54
62301: PUSH
62302: LD_VAR 0 55
62306: PUSH
62307: LD_VAR 0 56
62311: PUSH
62312: LD_VAR 0 57
62316: PUSH
62317: LD_VAR 0 58
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: PUSH
62330: LD_VAR 0 4
62334: PUSH
62335: LD_INT 1
62337: PLUS
62338: ARRAY
62339: ST_TO_ADDR
62340: GO 62449
62342: LD_INT 31
62344: DOUBLE
62345: EQUAL
62346: IFTRUE 62392
62348: LD_INT 32
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62392
62354: LD_INT 33
62356: DOUBLE
62357: EQUAL
62358: IFTRUE 62392
62360: LD_INT 27
62362: DOUBLE
62363: EQUAL
62364: IFTRUE 62392
62366: LD_INT 26
62368: DOUBLE
62369: EQUAL
62370: IFTRUE 62392
62372: LD_INT 28
62374: DOUBLE
62375: EQUAL
62376: IFTRUE 62392
62378: LD_INT 29
62380: DOUBLE
62381: EQUAL
62382: IFTRUE 62392
62384: LD_INT 30
62386: DOUBLE
62387: EQUAL
62388: IFTRUE 62392
62390: GO 62448
62392: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62393: LD_ADDR_VAR 0 9
62397: PUSH
62398: LD_VAR 0 59
62402: PUSH
62403: LD_VAR 0 60
62407: PUSH
62408: LD_VAR 0 61
62412: PUSH
62413: LD_VAR 0 62
62417: PUSH
62418: LD_VAR 0 63
62422: PUSH
62423: LD_VAR 0 64
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: PUSH
62436: LD_VAR 0 4
62440: PUSH
62441: LD_INT 1
62443: PLUS
62444: ARRAY
62445: ST_TO_ADDR
62446: GO 62449
62448: POP
// temp_list2 = [ ] ;
62449: LD_ADDR_VAR 0 10
62453: PUSH
62454: EMPTY
62455: ST_TO_ADDR
// for i in temp_list do
62456: LD_ADDR_VAR 0 8
62460: PUSH
62461: LD_VAR 0 9
62465: PUSH
62466: FOR_IN
62467: IFFALSE 62519
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62469: LD_ADDR_VAR 0 10
62473: PUSH
62474: LD_VAR 0 10
62478: PUSH
62479: LD_VAR 0 8
62483: PUSH
62484: LD_INT 1
62486: ARRAY
62487: PUSH
62488: LD_VAR 0 2
62492: PLUS
62493: PUSH
62494: LD_VAR 0 8
62498: PUSH
62499: LD_INT 2
62501: ARRAY
62502: PUSH
62503: LD_VAR 0 3
62507: PLUS
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: EMPTY
62514: LIST
62515: ADD
62516: ST_TO_ADDR
62517: GO 62466
62519: POP
62520: POP
// result = temp_list2 ;
62521: LD_ADDR_VAR 0 7
62525: PUSH
62526: LD_VAR 0 10
62530: ST_TO_ADDR
// end ;
62531: LD_VAR 0 7
62535: RET
// export function EnemyInRange ( unit , dist ) ; begin
62536: LD_INT 0
62538: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62539: LD_ADDR_VAR 0 3
62543: PUSH
62544: LD_VAR 0 1
62548: PPUSH
62549: CALL_OW 255
62553: PPUSH
62554: LD_VAR 0 1
62558: PPUSH
62559: CALL_OW 250
62563: PPUSH
62564: LD_VAR 0 1
62568: PPUSH
62569: CALL_OW 251
62573: PPUSH
62574: LD_VAR 0 2
62578: PPUSH
62579: CALL 35932 0 4
62583: PUSH
62584: LD_INT 4
62586: ARRAY
62587: ST_TO_ADDR
// end ;
62588: LD_VAR 0 3
62592: RET
// export function PlayerSeeMe ( unit ) ; begin
62593: LD_INT 0
62595: PPUSH
// result := See ( your_side , unit ) ;
62596: LD_ADDR_VAR 0 2
62600: PUSH
62601: LD_OWVAR 2
62605: PPUSH
62606: LD_VAR 0 1
62610: PPUSH
62611: CALL_OW 292
62615: ST_TO_ADDR
// end ;
62616: LD_VAR 0 2
62620: RET
// export function ReverseDir ( unit ) ; begin
62621: LD_INT 0
62623: PPUSH
// if not unit then
62624: LD_VAR 0 1
62628: NOT
62629: IFFALSE 62633
// exit ;
62631: GO 62656
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62633: LD_ADDR_VAR 0 2
62637: PUSH
62638: LD_VAR 0 1
62642: PPUSH
62643: CALL_OW 254
62647: PUSH
62648: LD_INT 3
62650: PLUS
62651: PUSH
62652: LD_INT 6
62654: MOD
62655: ST_TO_ADDR
// end ;
62656: LD_VAR 0 2
62660: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62661: LD_INT 0
62663: PPUSH
62664: PPUSH
62665: PPUSH
62666: PPUSH
62667: PPUSH
// if not hexes then
62668: LD_VAR 0 2
62672: NOT
62673: IFFALSE 62677
// exit ;
62675: GO 62825
// dist := 9999 ;
62677: LD_ADDR_VAR 0 5
62681: PUSH
62682: LD_INT 9999
62684: ST_TO_ADDR
// for i = 1 to hexes do
62685: LD_ADDR_VAR 0 4
62689: PUSH
62690: DOUBLE
62691: LD_INT 1
62693: DEC
62694: ST_TO_ADDR
62695: LD_VAR 0 2
62699: PUSH
62700: FOR_TO
62701: IFFALSE 62813
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62703: LD_VAR 0 1
62707: PPUSH
62708: LD_VAR 0 2
62712: PUSH
62713: LD_VAR 0 4
62717: ARRAY
62718: PUSH
62719: LD_INT 1
62721: ARRAY
62722: PPUSH
62723: LD_VAR 0 2
62727: PUSH
62728: LD_VAR 0 4
62732: ARRAY
62733: PUSH
62734: LD_INT 2
62736: ARRAY
62737: PPUSH
62738: CALL_OW 297
62742: PUSH
62743: LD_VAR 0 5
62747: LESS
62748: IFFALSE 62811
// begin hex := hexes [ i ] ;
62750: LD_ADDR_VAR 0 7
62754: PUSH
62755: LD_VAR 0 2
62759: PUSH
62760: LD_VAR 0 4
62764: ARRAY
62765: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62766: LD_ADDR_VAR 0 5
62770: PUSH
62771: LD_VAR 0 1
62775: PPUSH
62776: LD_VAR 0 2
62780: PUSH
62781: LD_VAR 0 4
62785: ARRAY
62786: PUSH
62787: LD_INT 1
62789: ARRAY
62790: PPUSH
62791: LD_VAR 0 2
62795: PUSH
62796: LD_VAR 0 4
62800: ARRAY
62801: PUSH
62802: LD_INT 2
62804: ARRAY
62805: PPUSH
62806: CALL_OW 297
62810: ST_TO_ADDR
// end ; end ;
62811: GO 62700
62813: POP
62814: POP
// result := hex ;
62815: LD_ADDR_VAR 0 3
62819: PUSH
62820: LD_VAR 0 7
62824: ST_TO_ADDR
// end ;
62825: LD_VAR 0 3
62829: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62830: LD_INT 0
62832: PPUSH
62833: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62834: LD_VAR 0 1
62838: NOT
62839: PUSH
62840: LD_VAR 0 1
62844: PUSH
62845: LD_INT 21
62847: PUSH
62848: LD_INT 2
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 23
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PPUSH
62869: CALL_OW 69
62873: IN
62874: NOT
62875: OR
62876: IFFALSE 62880
// exit ;
62878: GO 62927
// for i = 1 to 3 do
62880: LD_ADDR_VAR 0 3
62884: PUSH
62885: DOUBLE
62886: LD_INT 1
62888: DEC
62889: ST_TO_ADDR
62890: LD_INT 3
62892: PUSH
62893: FOR_TO
62894: IFFALSE 62925
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62896: LD_VAR 0 1
62900: PPUSH
62901: CALL_OW 250
62905: PPUSH
62906: LD_VAR 0 1
62910: PPUSH
62911: CALL_OW 251
62915: PPUSH
62916: LD_INT 1
62918: PPUSH
62919: CALL_OW 453
62923: GO 62893
62925: POP
62926: POP
// end ;
62927: LD_VAR 0 2
62931: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62932: LD_INT 0
62934: PPUSH
62935: PPUSH
62936: PPUSH
62937: PPUSH
62938: PPUSH
62939: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62940: LD_VAR 0 1
62944: NOT
62945: PUSH
62946: LD_VAR 0 2
62950: NOT
62951: OR
62952: PUSH
62953: LD_VAR 0 1
62957: PPUSH
62958: CALL_OW 314
62962: OR
62963: IFFALSE 62967
// exit ;
62965: GO 63408
// x := GetX ( enemy_unit ) ;
62967: LD_ADDR_VAR 0 7
62971: PUSH
62972: LD_VAR 0 2
62976: PPUSH
62977: CALL_OW 250
62981: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62982: LD_ADDR_VAR 0 8
62986: PUSH
62987: LD_VAR 0 2
62991: PPUSH
62992: CALL_OW 251
62996: ST_TO_ADDR
// if not x or not y then
62997: LD_VAR 0 7
63001: NOT
63002: PUSH
63003: LD_VAR 0 8
63007: NOT
63008: OR
63009: IFFALSE 63013
// exit ;
63011: GO 63408
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63013: LD_ADDR_VAR 0 6
63017: PUSH
63018: LD_VAR 0 7
63022: PPUSH
63023: LD_INT 0
63025: PPUSH
63026: LD_INT 4
63028: PPUSH
63029: CALL_OW 272
63033: PUSH
63034: LD_VAR 0 8
63038: PPUSH
63039: LD_INT 0
63041: PPUSH
63042: LD_INT 4
63044: PPUSH
63045: CALL_OW 273
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_VAR 0 7
63058: PPUSH
63059: LD_INT 1
63061: PPUSH
63062: LD_INT 4
63064: PPUSH
63065: CALL_OW 272
63069: PUSH
63070: LD_VAR 0 8
63074: PPUSH
63075: LD_INT 1
63077: PPUSH
63078: LD_INT 4
63080: PPUSH
63081: CALL_OW 273
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_VAR 0 7
63094: PPUSH
63095: LD_INT 2
63097: PPUSH
63098: LD_INT 4
63100: PPUSH
63101: CALL_OW 272
63105: PUSH
63106: LD_VAR 0 8
63110: PPUSH
63111: LD_INT 2
63113: PPUSH
63114: LD_INT 4
63116: PPUSH
63117: CALL_OW 273
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_VAR 0 7
63130: PPUSH
63131: LD_INT 3
63133: PPUSH
63134: LD_INT 4
63136: PPUSH
63137: CALL_OW 272
63141: PUSH
63142: LD_VAR 0 8
63146: PPUSH
63147: LD_INT 3
63149: PPUSH
63150: LD_INT 4
63152: PPUSH
63153: CALL_OW 273
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_VAR 0 7
63166: PPUSH
63167: LD_INT 4
63169: PPUSH
63170: LD_INT 4
63172: PPUSH
63173: CALL_OW 272
63177: PUSH
63178: LD_VAR 0 8
63182: PPUSH
63183: LD_INT 4
63185: PPUSH
63186: LD_INT 4
63188: PPUSH
63189: CALL_OW 273
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_VAR 0 7
63202: PPUSH
63203: LD_INT 5
63205: PPUSH
63206: LD_INT 4
63208: PPUSH
63209: CALL_OW 272
63213: PUSH
63214: LD_VAR 0 8
63218: PPUSH
63219: LD_INT 5
63221: PPUSH
63222: LD_INT 4
63224: PPUSH
63225: CALL_OW 273
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: ST_TO_ADDR
// for i = tmp downto 1 do
63242: LD_ADDR_VAR 0 4
63246: PUSH
63247: DOUBLE
63248: LD_VAR 0 6
63252: INC
63253: ST_TO_ADDR
63254: LD_INT 1
63256: PUSH
63257: FOR_DOWNTO
63258: IFFALSE 63359
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63260: LD_VAR 0 6
63264: PUSH
63265: LD_VAR 0 4
63269: ARRAY
63270: PUSH
63271: LD_INT 1
63273: ARRAY
63274: PPUSH
63275: LD_VAR 0 6
63279: PUSH
63280: LD_VAR 0 4
63284: ARRAY
63285: PUSH
63286: LD_INT 2
63288: ARRAY
63289: PPUSH
63290: CALL_OW 488
63294: NOT
63295: PUSH
63296: LD_VAR 0 6
63300: PUSH
63301: LD_VAR 0 4
63305: ARRAY
63306: PUSH
63307: LD_INT 1
63309: ARRAY
63310: PPUSH
63311: LD_VAR 0 6
63315: PUSH
63316: LD_VAR 0 4
63320: ARRAY
63321: PUSH
63322: LD_INT 2
63324: ARRAY
63325: PPUSH
63326: CALL_OW 428
63330: PUSH
63331: LD_INT 0
63333: NONEQUAL
63334: OR
63335: IFFALSE 63357
// tmp := Delete ( tmp , i ) ;
63337: LD_ADDR_VAR 0 6
63341: PUSH
63342: LD_VAR 0 6
63346: PPUSH
63347: LD_VAR 0 4
63351: PPUSH
63352: CALL_OW 3
63356: ST_TO_ADDR
63357: GO 63257
63359: POP
63360: POP
// j := GetClosestHex ( unit , tmp ) ;
63361: LD_ADDR_VAR 0 5
63365: PUSH
63366: LD_VAR 0 1
63370: PPUSH
63371: LD_VAR 0 6
63375: PPUSH
63376: CALL 62661 0 2
63380: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63381: LD_VAR 0 1
63385: PPUSH
63386: LD_VAR 0 5
63390: PUSH
63391: LD_INT 1
63393: ARRAY
63394: PPUSH
63395: LD_VAR 0 5
63399: PUSH
63400: LD_INT 2
63402: ARRAY
63403: PPUSH
63404: CALL_OW 111
// end ;
63408: LD_VAR 0 3
63412: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63413: LD_INT 0
63415: PPUSH
63416: PPUSH
63417: PPUSH
// uc_side = 0 ;
63418: LD_ADDR_OWVAR 20
63422: PUSH
63423: LD_INT 0
63425: ST_TO_ADDR
// uc_nation = 0 ;
63426: LD_ADDR_OWVAR 21
63430: PUSH
63431: LD_INT 0
63433: ST_TO_ADDR
// InitHc_All ( ) ;
63434: CALL_OW 584
// InitVc ;
63438: CALL_OW 20
// if mastodonts then
63442: LD_VAR 0 6
63446: IFFALSE 63513
// for i = 1 to mastodonts do
63448: LD_ADDR_VAR 0 11
63452: PUSH
63453: DOUBLE
63454: LD_INT 1
63456: DEC
63457: ST_TO_ADDR
63458: LD_VAR 0 6
63462: PUSH
63463: FOR_TO
63464: IFFALSE 63511
// begin vc_chassis := 31 ;
63466: LD_ADDR_OWVAR 37
63470: PUSH
63471: LD_INT 31
63473: ST_TO_ADDR
// vc_control := control_rider ;
63474: LD_ADDR_OWVAR 38
63478: PUSH
63479: LD_INT 4
63481: ST_TO_ADDR
// animal := CreateVehicle ;
63482: LD_ADDR_VAR 0 12
63486: PUSH
63487: CALL_OW 45
63491: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63492: LD_VAR 0 12
63496: PPUSH
63497: LD_VAR 0 8
63501: PPUSH
63502: LD_INT 0
63504: PPUSH
63505: CALL 65701 0 3
// end ;
63509: GO 63463
63511: POP
63512: POP
// if horses then
63513: LD_VAR 0 5
63517: IFFALSE 63584
// for i = 1 to horses do
63519: LD_ADDR_VAR 0 11
63523: PUSH
63524: DOUBLE
63525: LD_INT 1
63527: DEC
63528: ST_TO_ADDR
63529: LD_VAR 0 5
63533: PUSH
63534: FOR_TO
63535: IFFALSE 63582
// begin hc_class := 21 ;
63537: LD_ADDR_OWVAR 28
63541: PUSH
63542: LD_INT 21
63544: ST_TO_ADDR
// hc_gallery :=  ;
63545: LD_ADDR_OWVAR 33
63549: PUSH
63550: LD_STRING 
63552: ST_TO_ADDR
// animal := CreateHuman ;
63553: LD_ADDR_VAR 0 12
63557: PUSH
63558: CALL_OW 44
63562: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63563: LD_VAR 0 12
63567: PPUSH
63568: LD_VAR 0 8
63572: PPUSH
63573: LD_INT 0
63575: PPUSH
63576: CALL 65701 0 3
// end ;
63580: GO 63534
63582: POP
63583: POP
// if birds then
63584: LD_VAR 0 1
63588: IFFALSE 63655
// for i = 1 to birds do
63590: LD_ADDR_VAR 0 11
63594: PUSH
63595: DOUBLE
63596: LD_INT 1
63598: DEC
63599: ST_TO_ADDR
63600: LD_VAR 0 1
63604: PUSH
63605: FOR_TO
63606: IFFALSE 63653
// begin hc_class = 18 ;
63608: LD_ADDR_OWVAR 28
63612: PUSH
63613: LD_INT 18
63615: ST_TO_ADDR
// hc_gallery =  ;
63616: LD_ADDR_OWVAR 33
63620: PUSH
63621: LD_STRING 
63623: ST_TO_ADDR
// animal := CreateHuman ;
63624: LD_ADDR_VAR 0 12
63628: PUSH
63629: CALL_OW 44
63633: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63634: LD_VAR 0 12
63638: PPUSH
63639: LD_VAR 0 8
63643: PPUSH
63644: LD_INT 0
63646: PPUSH
63647: CALL 65701 0 3
// end ;
63651: GO 63605
63653: POP
63654: POP
// if tigers then
63655: LD_VAR 0 2
63659: IFFALSE 63743
// for i = 1 to tigers do
63661: LD_ADDR_VAR 0 11
63665: PUSH
63666: DOUBLE
63667: LD_INT 1
63669: DEC
63670: ST_TO_ADDR
63671: LD_VAR 0 2
63675: PUSH
63676: FOR_TO
63677: IFFALSE 63741
// begin hc_class = class_tiger ;
63679: LD_ADDR_OWVAR 28
63683: PUSH
63684: LD_INT 14
63686: ST_TO_ADDR
// hc_gallery =  ;
63687: LD_ADDR_OWVAR 33
63691: PUSH
63692: LD_STRING 
63694: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63695: LD_ADDR_OWVAR 35
63699: PUSH
63700: LD_INT 7
63702: NEG
63703: PPUSH
63704: LD_INT 7
63706: PPUSH
63707: CALL_OW 12
63711: ST_TO_ADDR
// animal := CreateHuman ;
63712: LD_ADDR_VAR 0 12
63716: PUSH
63717: CALL_OW 44
63721: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63722: LD_VAR 0 12
63726: PPUSH
63727: LD_VAR 0 8
63731: PPUSH
63732: LD_INT 0
63734: PPUSH
63735: CALL 65701 0 3
// end ;
63739: GO 63676
63741: POP
63742: POP
// if apemans then
63743: LD_VAR 0 3
63747: IFFALSE 63870
// for i = 1 to apemans do
63749: LD_ADDR_VAR 0 11
63753: PUSH
63754: DOUBLE
63755: LD_INT 1
63757: DEC
63758: ST_TO_ADDR
63759: LD_VAR 0 3
63763: PUSH
63764: FOR_TO
63765: IFFALSE 63868
// begin hc_class = class_apeman ;
63767: LD_ADDR_OWVAR 28
63771: PUSH
63772: LD_INT 12
63774: ST_TO_ADDR
// hc_gallery =  ;
63775: LD_ADDR_OWVAR 33
63779: PUSH
63780: LD_STRING 
63782: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63783: LD_ADDR_OWVAR 35
63787: PUSH
63788: LD_INT 2
63790: NEG
63791: PPUSH
63792: LD_INT 2
63794: PPUSH
63795: CALL_OW 12
63799: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63800: LD_ADDR_OWVAR 31
63804: PUSH
63805: LD_INT 1
63807: PPUSH
63808: LD_INT 3
63810: PPUSH
63811: CALL_OW 12
63815: PUSH
63816: LD_INT 1
63818: PPUSH
63819: LD_INT 3
63821: PPUSH
63822: CALL_OW 12
63826: PUSH
63827: LD_INT 0
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: LIST
63838: ST_TO_ADDR
// animal := CreateHuman ;
63839: LD_ADDR_VAR 0 12
63843: PUSH
63844: CALL_OW 44
63848: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63849: LD_VAR 0 12
63853: PPUSH
63854: LD_VAR 0 8
63858: PPUSH
63859: LD_INT 0
63861: PPUSH
63862: CALL 65701 0 3
// end ;
63866: GO 63764
63868: POP
63869: POP
// if enchidnas then
63870: LD_VAR 0 4
63874: IFFALSE 63941
// for i = 1 to enchidnas do
63876: LD_ADDR_VAR 0 11
63880: PUSH
63881: DOUBLE
63882: LD_INT 1
63884: DEC
63885: ST_TO_ADDR
63886: LD_VAR 0 4
63890: PUSH
63891: FOR_TO
63892: IFFALSE 63939
// begin hc_class = 13 ;
63894: LD_ADDR_OWVAR 28
63898: PUSH
63899: LD_INT 13
63901: ST_TO_ADDR
// hc_gallery =  ;
63902: LD_ADDR_OWVAR 33
63906: PUSH
63907: LD_STRING 
63909: ST_TO_ADDR
// animal := CreateHuman ;
63910: LD_ADDR_VAR 0 12
63914: PUSH
63915: CALL_OW 44
63919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63920: LD_VAR 0 12
63924: PPUSH
63925: LD_VAR 0 8
63929: PPUSH
63930: LD_INT 0
63932: PPUSH
63933: CALL 65701 0 3
// end ;
63937: GO 63891
63939: POP
63940: POP
// if fishes then
63941: LD_VAR 0 7
63945: IFFALSE 64012
// for i = 1 to fishes do
63947: LD_ADDR_VAR 0 11
63951: PUSH
63952: DOUBLE
63953: LD_INT 1
63955: DEC
63956: ST_TO_ADDR
63957: LD_VAR 0 7
63961: PUSH
63962: FOR_TO
63963: IFFALSE 64010
// begin hc_class = 20 ;
63965: LD_ADDR_OWVAR 28
63969: PUSH
63970: LD_INT 20
63972: ST_TO_ADDR
// hc_gallery =  ;
63973: LD_ADDR_OWVAR 33
63977: PUSH
63978: LD_STRING 
63980: ST_TO_ADDR
// animal := CreateHuman ;
63981: LD_ADDR_VAR 0 12
63985: PUSH
63986: CALL_OW 44
63990: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63991: LD_VAR 0 12
63995: PPUSH
63996: LD_VAR 0 9
64000: PPUSH
64001: LD_INT 0
64003: PPUSH
64004: CALL 65701 0 3
// end ;
64008: GO 63962
64010: POP
64011: POP
// end ;
64012: LD_VAR 0 10
64016: RET
// export function WantHeal ( sci , unit ) ; begin
64017: LD_INT 0
64019: PPUSH
// if GetTaskList ( sci ) > 0 then
64020: LD_VAR 0 1
64024: PPUSH
64025: CALL_OW 437
64029: PUSH
64030: LD_INT 0
64032: GREATER
64033: IFFALSE 64103
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64035: LD_VAR 0 1
64039: PPUSH
64040: CALL_OW 437
64044: PUSH
64045: LD_INT 1
64047: ARRAY
64048: PUSH
64049: LD_INT 1
64051: ARRAY
64052: PUSH
64053: LD_STRING l
64055: EQUAL
64056: PUSH
64057: LD_VAR 0 1
64061: PPUSH
64062: CALL_OW 437
64066: PUSH
64067: LD_INT 1
64069: ARRAY
64070: PUSH
64071: LD_INT 4
64073: ARRAY
64074: PUSH
64075: LD_VAR 0 2
64079: EQUAL
64080: AND
64081: IFFALSE 64093
// result := true else
64083: LD_ADDR_VAR 0 3
64087: PUSH
64088: LD_INT 1
64090: ST_TO_ADDR
64091: GO 64101
// result := false ;
64093: LD_ADDR_VAR 0 3
64097: PUSH
64098: LD_INT 0
64100: ST_TO_ADDR
// end else
64101: GO 64111
// result := false ;
64103: LD_ADDR_VAR 0 3
64107: PUSH
64108: LD_INT 0
64110: ST_TO_ADDR
// end ;
64111: LD_VAR 0 3
64115: RET
// export function HealTarget ( sci ) ; begin
64116: LD_INT 0
64118: PPUSH
// if not sci then
64119: LD_VAR 0 1
64123: NOT
64124: IFFALSE 64128
// exit ;
64126: GO 64193
// result := 0 ;
64128: LD_ADDR_VAR 0 2
64132: PUSH
64133: LD_INT 0
64135: ST_TO_ADDR
// if GetTaskList ( sci ) then
64136: LD_VAR 0 1
64140: PPUSH
64141: CALL_OW 437
64145: IFFALSE 64193
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64147: LD_VAR 0 1
64151: PPUSH
64152: CALL_OW 437
64156: PUSH
64157: LD_INT 1
64159: ARRAY
64160: PUSH
64161: LD_INT 1
64163: ARRAY
64164: PUSH
64165: LD_STRING l
64167: EQUAL
64168: IFFALSE 64193
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64170: LD_ADDR_VAR 0 2
64174: PUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: CALL_OW 437
64184: PUSH
64185: LD_INT 1
64187: ARRAY
64188: PUSH
64189: LD_INT 4
64191: ARRAY
64192: ST_TO_ADDR
// end ;
64193: LD_VAR 0 2
64197: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64198: LD_INT 0
64200: PPUSH
64201: PPUSH
64202: PPUSH
64203: PPUSH
// if not base_units then
64204: LD_VAR 0 1
64208: NOT
64209: IFFALSE 64213
// exit ;
64211: GO 64300
// result := false ;
64213: LD_ADDR_VAR 0 2
64217: PUSH
64218: LD_INT 0
64220: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64221: LD_ADDR_VAR 0 5
64225: PUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_INT 21
64233: PUSH
64234: LD_INT 3
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PPUSH
64241: CALL_OW 72
64245: ST_TO_ADDR
// if not tmp then
64246: LD_VAR 0 5
64250: NOT
64251: IFFALSE 64255
// exit ;
64253: GO 64300
// for i in tmp do
64255: LD_ADDR_VAR 0 3
64259: PUSH
64260: LD_VAR 0 5
64264: PUSH
64265: FOR_IN
64266: IFFALSE 64298
// begin result := EnemyInRange ( i , 22 ) ;
64268: LD_ADDR_VAR 0 2
64272: PUSH
64273: LD_VAR 0 3
64277: PPUSH
64278: LD_INT 22
64280: PPUSH
64281: CALL 62536 0 2
64285: ST_TO_ADDR
// if result then
64286: LD_VAR 0 2
64290: IFFALSE 64296
// exit ;
64292: POP
64293: POP
64294: GO 64300
// end ;
64296: GO 64265
64298: POP
64299: POP
// end ;
64300: LD_VAR 0 2
64304: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64305: LD_INT 0
64307: PPUSH
64308: PPUSH
// if not units then
64309: LD_VAR 0 1
64313: NOT
64314: IFFALSE 64318
// exit ;
64316: GO 64388
// result := [ ] ;
64318: LD_ADDR_VAR 0 3
64322: PUSH
64323: EMPTY
64324: ST_TO_ADDR
// for i in units do
64325: LD_ADDR_VAR 0 4
64329: PUSH
64330: LD_VAR 0 1
64334: PUSH
64335: FOR_IN
64336: IFFALSE 64386
// if GetTag ( i ) = tag then
64338: LD_VAR 0 4
64342: PPUSH
64343: CALL_OW 110
64347: PUSH
64348: LD_VAR 0 2
64352: EQUAL
64353: IFFALSE 64384
// result := Replace ( result , result + 1 , i ) ;
64355: LD_ADDR_VAR 0 3
64359: PUSH
64360: LD_VAR 0 3
64364: PPUSH
64365: LD_VAR 0 3
64369: PUSH
64370: LD_INT 1
64372: PLUS
64373: PPUSH
64374: LD_VAR 0 4
64378: PPUSH
64379: CALL_OW 1
64383: ST_TO_ADDR
64384: GO 64335
64386: POP
64387: POP
// end ;
64388: LD_VAR 0 3
64392: RET
// export function IsDriver ( un ) ; begin
64393: LD_INT 0
64395: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64396: LD_ADDR_VAR 0 2
64400: PUSH
64401: LD_VAR 0 1
64405: PUSH
64406: LD_INT 55
64408: PUSH
64409: EMPTY
64410: LIST
64411: PPUSH
64412: CALL_OW 69
64416: IN
64417: ST_TO_ADDR
// end ;
64418: LD_VAR 0 2
64422: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64423: LD_INT 0
64425: PPUSH
64426: PPUSH
// list := [ ] ;
64427: LD_ADDR_VAR 0 5
64431: PUSH
64432: EMPTY
64433: ST_TO_ADDR
// case d of 0 :
64434: LD_VAR 0 3
64438: PUSH
64439: LD_INT 0
64441: DOUBLE
64442: EQUAL
64443: IFTRUE 64447
64445: GO 64580
64447: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64448: LD_ADDR_VAR 0 5
64452: PUSH
64453: LD_VAR 0 1
64457: PUSH
64458: LD_INT 4
64460: MINUS
64461: PUSH
64462: LD_VAR 0 2
64466: PUSH
64467: LD_INT 4
64469: MINUS
64470: PUSH
64471: LD_INT 2
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: LIST
64478: PUSH
64479: LD_VAR 0 1
64483: PUSH
64484: LD_INT 3
64486: MINUS
64487: PUSH
64488: LD_VAR 0 2
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: PUSH
64501: LD_VAR 0 1
64505: PUSH
64506: LD_INT 4
64508: PLUS
64509: PUSH
64510: LD_VAR 0 2
64514: PUSH
64515: LD_INT 4
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: PUSH
64523: LD_VAR 0 1
64527: PUSH
64528: LD_INT 3
64530: PLUS
64531: PUSH
64532: LD_VAR 0 2
64536: PUSH
64537: LD_INT 3
64539: PLUS
64540: PUSH
64541: LD_INT 5
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: PUSH
64549: LD_VAR 0 1
64553: PUSH
64554: LD_VAR 0 2
64558: PUSH
64559: LD_INT 4
64561: PLUS
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: ST_TO_ADDR
// end ; 1 :
64578: GO 65278
64580: LD_INT 1
64582: DOUBLE
64583: EQUAL
64584: IFTRUE 64588
64586: GO 64721
64588: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64589: LD_ADDR_VAR 0 5
64593: PUSH
64594: LD_VAR 0 1
64598: PUSH
64599: LD_VAR 0 2
64603: PUSH
64604: LD_INT 4
64606: MINUS
64607: PUSH
64608: LD_INT 3
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: LIST
64615: PUSH
64616: LD_VAR 0 1
64620: PUSH
64621: LD_INT 3
64623: MINUS
64624: PUSH
64625: LD_VAR 0 2
64629: PUSH
64630: LD_INT 3
64632: MINUS
64633: PUSH
64634: LD_INT 2
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: PUSH
64642: LD_VAR 0 1
64646: PUSH
64647: LD_INT 4
64649: MINUS
64650: PUSH
64651: LD_VAR 0 2
64655: PUSH
64656: LD_INT 1
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: LD_VAR 0 1
64668: PUSH
64669: LD_VAR 0 2
64673: PUSH
64674: LD_INT 3
64676: PLUS
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: PUSH
64686: LD_VAR 0 1
64690: PUSH
64691: LD_INT 4
64693: PLUS
64694: PUSH
64695: LD_VAR 0 2
64699: PUSH
64700: LD_INT 4
64702: PLUS
64703: PUSH
64704: LD_INT 5
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: LIST
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: ST_TO_ADDR
// end ; 2 :
64719: GO 65278
64721: LD_INT 2
64723: DOUBLE
64724: EQUAL
64725: IFTRUE 64729
64727: GO 64858
64729: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64730: LD_ADDR_VAR 0 5
64734: PUSH
64735: LD_VAR 0 1
64739: PUSH
64740: LD_VAR 0 2
64744: PUSH
64745: LD_INT 3
64747: MINUS
64748: PUSH
64749: LD_INT 3
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: LD_INT 4
64764: PLUS
64765: PUSH
64766: LD_VAR 0 2
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: PUSH
64779: LD_VAR 0 1
64783: PUSH
64784: LD_VAR 0 2
64788: PUSH
64789: LD_INT 4
64791: PLUS
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: PUSH
64801: LD_VAR 0 1
64805: PUSH
64806: LD_INT 3
64808: MINUS
64809: PUSH
64810: LD_VAR 0 2
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: PUSH
64823: LD_VAR 0 1
64827: PUSH
64828: LD_INT 4
64830: MINUS
64831: PUSH
64832: LD_VAR 0 2
64836: PUSH
64837: LD_INT 4
64839: MINUS
64840: PUSH
64841: LD_INT 2
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: ST_TO_ADDR
// end ; 3 :
64856: GO 65278
64858: LD_INT 3
64860: DOUBLE
64861: EQUAL
64862: IFTRUE 64866
64864: GO 64999
64866: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64867: LD_ADDR_VAR 0 5
64871: PUSH
64872: LD_VAR 0 1
64876: PUSH
64877: LD_INT 3
64879: PLUS
64880: PUSH
64881: LD_VAR 0 2
64885: PUSH
64886: LD_INT 4
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: PUSH
64894: LD_VAR 0 1
64898: PUSH
64899: LD_INT 4
64901: PLUS
64902: PUSH
64903: LD_VAR 0 2
64907: PUSH
64908: LD_INT 4
64910: PLUS
64911: PUSH
64912: LD_INT 5
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: LD_INT 4
64927: MINUS
64928: PUSH
64929: LD_VAR 0 2
64933: PUSH
64934: LD_INT 1
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: LIST
64941: PUSH
64942: LD_VAR 0 1
64946: PUSH
64947: LD_VAR 0 2
64951: PUSH
64952: LD_INT 4
64954: MINUS
64955: PUSH
64956: LD_INT 3
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: LIST
64963: PUSH
64964: LD_VAR 0 1
64968: PUSH
64969: LD_INT 3
64971: MINUS
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: LD_INT 3
64980: MINUS
64981: PUSH
64982: LD_INT 2
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// end ; 4 :
64997: GO 65278
64999: LD_INT 4
65001: DOUBLE
65002: EQUAL
65003: IFTRUE 65007
65005: GO 65140
65007: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65008: LD_ADDR_VAR 0 5
65012: PUSH
65013: LD_VAR 0 1
65017: PUSH
65018: LD_VAR 0 2
65022: PUSH
65023: LD_INT 4
65025: PLUS
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: LIST
65034: PUSH
65035: LD_VAR 0 1
65039: PUSH
65040: LD_INT 3
65042: PLUS
65043: PUSH
65044: LD_VAR 0 2
65048: PUSH
65049: LD_INT 3
65051: PLUS
65052: PUSH
65053: LD_INT 5
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: PUSH
65061: LD_VAR 0 1
65065: PUSH
65066: LD_INT 4
65068: PLUS
65069: PUSH
65070: LD_VAR 0 2
65074: PUSH
65075: LD_INT 4
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: PUSH
65083: LD_VAR 0 1
65087: PUSH
65088: LD_VAR 0 2
65092: PUSH
65093: LD_INT 3
65095: MINUS
65096: PUSH
65097: LD_INT 3
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: PUSH
65105: LD_VAR 0 1
65109: PUSH
65110: LD_INT 4
65112: MINUS
65113: PUSH
65114: LD_VAR 0 2
65118: PUSH
65119: LD_INT 4
65121: MINUS
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: EMPTY
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: ST_TO_ADDR
// end ; 5 :
65138: GO 65278
65140: LD_INT 5
65142: DOUBLE
65143: EQUAL
65144: IFTRUE 65148
65146: GO 65277
65148: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65149: LD_ADDR_VAR 0 5
65153: PUSH
65154: LD_VAR 0 1
65158: PUSH
65159: LD_INT 4
65161: MINUS
65162: PUSH
65163: LD_VAR 0 2
65167: PUSH
65168: LD_INT 1
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: PUSH
65176: LD_VAR 0 1
65180: PUSH
65181: LD_VAR 0 2
65185: PUSH
65186: LD_INT 4
65188: MINUS
65189: PUSH
65190: LD_INT 3
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: PUSH
65198: LD_VAR 0 1
65202: PUSH
65203: LD_INT 4
65205: PLUS
65206: PUSH
65207: LD_VAR 0 2
65211: PUSH
65212: LD_INT 4
65214: PLUS
65215: PUSH
65216: LD_INT 5
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: LIST
65223: PUSH
65224: LD_VAR 0 1
65228: PUSH
65229: LD_INT 3
65231: PLUS
65232: PUSH
65233: LD_VAR 0 2
65237: PUSH
65238: LD_INT 4
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: PUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_VAR 0 2
65255: PUSH
65256: LD_INT 3
65258: PLUS
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: PUSH
65268: EMPTY
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: ST_TO_ADDR
// end ; end ;
65275: GO 65278
65277: POP
// result := list ;
65278: LD_ADDR_VAR 0 4
65282: PUSH
65283: LD_VAR 0 5
65287: ST_TO_ADDR
// end ;
65288: LD_VAR 0 4
65292: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65293: LD_INT 0
65295: PPUSH
65296: PPUSH
65297: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65298: LD_VAR 0 1
65302: NOT
65303: PUSH
65304: LD_VAR 0 2
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 2
65314: PUSH
65315: LD_INT 3
65317: PUSH
65318: LD_INT 4
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: IN
65327: NOT
65328: OR
65329: IFFALSE 65333
// exit ;
65331: GO 65425
// tmp := [ ] ;
65333: LD_ADDR_VAR 0 5
65337: PUSH
65338: EMPTY
65339: ST_TO_ADDR
// for i in units do
65340: LD_ADDR_VAR 0 4
65344: PUSH
65345: LD_VAR 0 1
65349: PUSH
65350: FOR_IN
65351: IFFALSE 65394
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65353: LD_ADDR_VAR 0 5
65357: PUSH
65358: LD_VAR 0 5
65362: PPUSH
65363: LD_VAR 0 5
65367: PUSH
65368: LD_INT 1
65370: PLUS
65371: PPUSH
65372: LD_VAR 0 4
65376: PPUSH
65377: LD_VAR 0 2
65381: PPUSH
65382: CALL_OW 259
65386: PPUSH
65387: CALL_OW 2
65391: ST_TO_ADDR
65392: GO 65350
65394: POP
65395: POP
// if not tmp then
65396: LD_VAR 0 5
65400: NOT
65401: IFFALSE 65405
// exit ;
65403: GO 65425
// result := SortListByListDesc ( units , tmp ) ;
65405: LD_ADDR_VAR 0 3
65409: PUSH
65410: LD_VAR 0 1
65414: PPUSH
65415: LD_VAR 0 5
65419: PPUSH
65420: CALL_OW 77
65424: ST_TO_ADDR
// end ;
65425: LD_VAR 0 3
65429: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65430: LD_INT 0
65432: PPUSH
65433: PPUSH
65434: PPUSH
// result := false ;
65435: LD_ADDR_VAR 0 3
65439: PUSH
65440: LD_INT 0
65442: ST_TO_ADDR
// x := GetX ( building ) ;
65443: LD_ADDR_VAR 0 4
65447: PUSH
65448: LD_VAR 0 2
65452: PPUSH
65453: CALL_OW 250
65457: ST_TO_ADDR
// y := GetY ( building ) ;
65458: LD_ADDR_VAR 0 5
65462: PUSH
65463: LD_VAR 0 2
65467: PPUSH
65468: CALL_OW 251
65472: ST_TO_ADDR
// if not building or not x or not y then
65473: LD_VAR 0 2
65477: NOT
65478: PUSH
65479: LD_VAR 0 4
65483: NOT
65484: OR
65485: PUSH
65486: LD_VAR 0 5
65490: NOT
65491: OR
65492: IFFALSE 65496
// exit ;
65494: GO 65588
// if GetTaskList ( unit ) then
65496: LD_VAR 0 1
65500: PPUSH
65501: CALL_OW 437
65505: IFFALSE 65588
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65507: LD_STRING e
65509: PUSH
65510: LD_VAR 0 1
65514: PPUSH
65515: CALL_OW 437
65519: PUSH
65520: LD_INT 1
65522: ARRAY
65523: PUSH
65524: LD_INT 1
65526: ARRAY
65527: EQUAL
65528: PUSH
65529: LD_VAR 0 4
65533: PUSH
65534: LD_VAR 0 1
65538: PPUSH
65539: CALL_OW 437
65543: PUSH
65544: LD_INT 1
65546: ARRAY
65547: PUSH
65548: LD_INT 2
65550: ARRAY
65551: EQUAL
65552: AND
65553: PUSH
65554: LD_VAR 0 5
65558: PUSH
65559: LD_VAR 0 1
65563: PPUSH
65564: CALL_OW 437
65568: PUSH
65569: LD_INT 1
65571: ARRAY
65572: PUSH
65573: LD_INT 3
65575: ARRAY
65576: EQUAL
65577: AND
65578: IFFALSE 65588
// result := true end ;
65580: LD_ADDR_VAR 0 3
65584: PUSH
65585: LD_INT 1
65587: ST_TO_ADDR
// end ;
65588: LD_VAR 0 3
65592: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65593: LD_INT 0
65595: PPUSH
// result := false ;
65596: LD_ADDR_VAR 0 4
65600: PUSH
65601: LD_INT 0
65603: ST_TO_ADDR
// if GetTaskList ( unit ) then
65604: LD_VAR 0 1
65608: PPUSH
65609: CALL_OW 437
65613: IFFALSE 65696
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65615: LD_STRING M
65617: PUSH
65618: LD_VAR 0 1
65622: PPUSH
65623: CALL_OW 437
65627: PUSH
65628: LD_INT 1
65630: ARRAY
65631: PUSH
65632: LD_INT 1
65634: ARRAY
65635: EQUAL
65636: PUSH
65637: LD_VAR 0 2
65641: PUSH
65642: LD_VAR 0 1
65646: PPUSH
65647: CALL_OW 437
65651: PUSH
65652: LD_INT 1
65654: ARRAY
65655: PUSH
65656: LD_INT 2
65658: ARRAY
65659: EQUAL
65660: AND
65661: PUSH
65662: LD_VAR 0 3
65666: PUSH
65667: LD_VAR 0 1
65671: PPUSH
65672: CALL_OW 437
65676: PUSH
65677: LD_INT 1
65679: ARRAY
65680: PUSH
65681: LD_INT 3
65683: ARRAY
65684: EQUAL
65685: AND
65686: IFFALSE 65696
// result := true ;
65688: LD_ADDR_VAR 0 4
65692: PUSH
65693: LD_INT 1
65695: ST_TO_ADDR
// end ; end ;
65696: LD_VAR 0 4
65700: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65701: LD_INT 0
65703: PPUSH
65704: PPUSH
65705: PPUSH
65706: PPUSH
// if not unit or not area then
65707: LD_VAR 0 1
65711: NOT
65712: PUSH
65713: LD_VAR 0 2
65717: NOT
65718: OR
65719: IFFALSE 65723
// exit ;
65721: GO 65887
// tmp := AreaToList ( area , i ) ;
65723: LD_ADDR_VAR 0 6
65727: PUSH
65728: LD_VAR 0 2
65732: PPUSH
65733: LD_VAR 0 5
65737: PPUSH
65738: CALL_OW 517
65742: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65743: LD_ADDR_VAR 0 5
65747: PUSH
65748: DOUBLE
65749: LD_INT 1
65751: DEC
65752: ST_TO_ADDR
65753: LD_VAR 0 6
65757: PUSH
65758: LD_INT 1
65760: ARRAY
65761: PUSH
65762: FOR_TO
65763: IFFALSE 65885
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65765: LD_ADDR_VAR 0 7
65769: PUSH
65770: LD_VAR 0 6
65774: PUSH
65775: LD_INT 1
65777: ARRAY
65778: PUSH
65779: LD_VAR 0 5
65783: ARRAY
65784: PUSH
65785: LD_VAR 0 6
65789: PUSH
65790: LD_INT 2
65792: ARRAY
65793: PUSH
65794: LD_VAR 0 5
65798: ARRAY
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65804: LD_VAR 0 7
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: PPUSH
65813: LD_VAR 0 7
65817: PUSH
65818: LD_INT 2
65820: ARRAY
65821: PPUSH
65822: CALL_OW 428
65826: PUSH
65827: LD_INT 0
65829: EQUAL
65830: IFFALSE 65883
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65832: LD_VAR 0 1
65836: PPUSH
65837: LD_VAR 0 7
65841: PUSH
65842: LD_INT 1
65844: ARRAY
65845: PPUSH
65846: LD_VAR 0 7
65850: PUSH
65851: LD_INT 2
65853: ARRAY
65854: PPUSH
65855: LD_VAR 0 3
65859: PPUSH
65860: CALL_OW 48
// result := IsPlaced ( unit ) ;
65864: LD_ADDR_VAR 0 4
65868: PUSH
65869: LD_VAR 0 1
65873: PPUSH
65874: CALL_OW 305
65878: ST_TO_ADDR
// exit ;
65879: POP
65880: POP
65881: GO 65887
// end ; end ;
65883: GO 65762
65885: POP
65886: POP
// end ;
65887: LD_VAR 0 4
65891: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65892: LD_INT 0
65894: PPUSH
65895: PPUSH
65896: PPUSH
// if not side or side > 8 then
65897: LD_VAR 0 1
65901: NOT
65902: PUSH
65903: LD_VAR 0 1
65907: PUSH
65908: LD_INT 8
65910: GREATER
65911: OR
65912: IFFALSE 65916
// exit ;
65914: GO 66103
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65916: LD_ADDR_VAR 0 4
65920: PUSH
65921: LD_INT 22
65923: PUSH
65924: LD_VAR 0 1
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 21
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PPUSH
65947: CALL_OW 69
65951: ST_TO_ADDR
// if not tmp then
65952: LD_VAR 0 4
65956: NOT
65957: IFFALSE 65961
// exit ;
65959: GO 66103
// enable_addtolog := true ;
65961: LD_ADDR_OWVAR 81
65965: PUSH
65966: LD_INT 1
65968: ST_TO_ADDR
// AddToLog ( [ ) ;
65969: LD_STRING [
65971: PPUSH
65972: CALL_OW 561
// for i in tmp do
65976: LD_ADDR_VAR 0 3
65980: PUSH
65981: LD_VAR 0 4
65985: PUSH
65986: FOR_IN
65987: IFFALSE 66094
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65989: LD_STRING [
65991: PUSH
65992: LD_VAR 0 3
65996: PPUSH
65997: CALL_OW 266
66001: STR
66002: PUSH
66003: LD_STRING , 
66005: STR
66006: PUSH
66007: LD_VAR 0 3
66011: PPUSH
66012: CALL_OW 250
66016: STR
66017: PUSH
66018: LD_STRING , 
66020: STR
66021: PUSH
66022: LD_VAR 0 3
66026: PPUSH
66027: CALL_OW 251
66031: STR
66032: PUSH
66033: LD_STRING , 
66035: STR
66036: PUSH
66037: LD_VAR 0 3
66041: PPUSH
66042: CALL_OW 254
66046: STR
66047: PUSH
66048: LD_STRING , 
66050: STR
66051: PUSH
66052: LD_VAR 0 3
66056: PPUSH
66057: LD_INT 1
66059: PPUSH
66060: CALL_OW 268
66064: STR
66065: PUSH
66066: LD_STRING , 
66068: STR
66069: PUSH
66070: LD_VAR 0 3
66074: PPUSH
66075: LD_INT 2
66077: PPUSH
66078: CALL_OW 268
66082: STR
66083: PUSH
66084: LD_STRING ],
66086: STR
66087: PPUSH
66088: CALL_OW 561
// end ;
66092: GO 65986
66094: POP
66095: POP
// AddToLog ( ]; ) ;
66096: LD_STRING ];
66098: PPUSH
66099: CALL_OW 561
// end ;
66103: LD_VAR 0 2
66107: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66108: LD_INT 0
66110: PPUSH
66111: PPUSH
66112: PPUSH
66113: PPUSH
66114: PPUSH
// if not area or not rate or not max then
66115: LD_VAR 0 1
66119: NOT
66120: PUSH
66121: LD_VAR 0 2
66125: NOT
66126: OR
66127: PUSH
66128: LD_VAR 0 4
66132: NOT
66133: OR
66134: IFFALSE 66138
// exit ;
66136: GO 66330
// while 1 do
66138: LD_INT 1
66140: IFFALSE 66330
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66142: LD_ADDR_VAR 0 9
66146: PUSH
66147: LD_VAR 0 1
66151: PPUSH
66152: LD_INT 1
66154: PPUSH
66155: CALL_OW 287
66159: PUSH
66160: LD_INT 10
66162: MUL
66163: ST_TO_ADDR
// r := rate / 10 ;
66164: LD_ADDR_VAR 0 7
66168: PUSH
66169: LD_VAR 0 2
66173: PUSH
66174: LD_INT 10
66176: DIVREAL
66177: ST_TO_ADDR
// time := 1 1$00 ;
66178: LD_ADDR_VAR 0 8
66182: PUSH
66183: LD_INT 2100
66185: ST_TO_ADDR
// if amount < min then
66186: LD_VAR 0 9
66190: PUSH
66191: LD_VAR 0 3
66195: LESS
66196: IFFALSE 66214
// r := r * 2 else
66198: LD_ADDR_VAR 0 7
66202: PUSH
66203: LD_VAR 0 7
66207: PUSH
66208: LD_INT 2
66210: MUL
66211: ST_TO_ADDR
66212: GO 66240
// if amount > max then
66214: LD_VAR 0 9
66218: PUSH
66219: LD_VAR 0 4
66223: GREATER
66224: IFFALSE 66240
// r := r / 2 ;
66226: LD_ADDR_VAR 0 7
66230: PUSH
66231: LD_VAR 0 7
66235: PUSH
66236: LD_INT 2
66238: DIVREAL
66239: ST_TO_ADDR
// time := time / r ;
66240: LD_ADDR_VAR 0 8
66244: PUSH
66245: LD_VAR 0 8
66249: PUSH
66250: LD_VAR 0 7
66254: DIVREAL
66255: ST_TO_ADDR
// if time < 0 then
66256: LD_VAR 0 8
66260: PUSH
66261: LD_INT 0
66263: LESS
66264: IFFALSE 66281
// time := time * - 1 ;
66266: LD_ADDR_VAR 0 8
66270: PUSH
66271: LD_VAR 0 8
66275: PUSH
66276: LD_INT 1
66278: NEG
66279: MUL
66280: ST_TO_ADDR
// wait ( time ) ;
66281: LD_VAR 0 8
66285: PPUSH
66286: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66290: LD_INT 35
66292: PPUSH
66293: LD_INT 875
66295: PPUSH
66296: CALL_OW 12
66300: PPUSH
66301: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66305: LD_INT 1
66307: PPUSH
66308: LD_INT 5
66310: PPUSH
66311: CALL_OW 12
66315: PPUSH
66316: LD_VAR 0 1
66320: PPUSH
66321: LD_INT 1
66323: PPUSH
66324: CALL_OW 55
// end ;
66328: GO 66138
// end ;
66330: LD_VAR 0 5
66334: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66335: LD_INT 0
66337: PPUSH
66338: PPUSH
66339: PPUSH
66340: PPUSH
66341: PPUSH
66342: PPUSH
66343: PPUSH
66344: PPUSH
// if not turrets or not factories then
66345: LD_VAR 0 1
66349: NOT
66350: PUSH
66351: LD_VAR 0 2
66355: NOT
66356: OR
66357: IFFALSE 66361
// exit ;
66359: GO 66668
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66361: LD_ADDR_VAR 0 10
66365: PUSH
66366: LD_INT 5
66368: PUSH
66369: LD_INT 6
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: LD_INT 4
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 3
66388: PUSH
66389: LD_INT 5
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: LIST
66400: PUSH
66401: LD_INT 24
66403: PUSH
66404: LD_INT 25
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 23
66413: PUSH
66414: LD_INT 27
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 42
66427: PUSH
66428: LD_INT 43
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 44
66437: PUSH
66438: LD_INT 46
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 45
66447: PUSH
66448: LD_INT 47
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: LIST
66464: ST_TO_ADDR
// result := [ ] ;
66465: LD_ADDR_VAR 0 3
66469: PUSH
66470: EMPTY
66471: ST_TO_ADDR
// for i in turrets do
66472: LD_ADDR_VAR 0 4
66476: PUSH
66477: LD_VAR 0 1
66481: PUSH
66482: FOR_IN
66483: IFFALSE 66666
// begin nat := GetNation ( i ) ;
66485: LD_ADDR_VAR 0 7
66489: PUSH
66490: LD_VAR 0 4
66494: PPUSH
66495: CALL_OW 248
66499: ST_TO_ADDR
// weapon := 0 ;
66500: LD_ADDR_VAR 0 8
66504: PUSH
66505: LD_INT 0
66507: ST_TO_ADDR
// if not nat then
66508: LD_VAR 0 7
66512: NOT
66513: IFFALSE 66517
// continue ;
66515: GO 66482
// for j in list [ nat ] do
66517: LD_ADDR_VAR 0 5
66521: PUSH
66522: LD_VAR 0 10
66526: PUSH
66527: LD_VAR 0 7
66531: ARRAY
66532: PUSH
66533: FOR_IN
66534: IFFALSE 66575
// if GetBWeapon ( i ) = j [ 1 ] then
66536: LD_VAR 0 4
66540: PPUSH
66541: CALL_OW 269
66545: PUSH
66546: LD_VAR 0 5
66550: PUSH
66551: LD_INT 1
66553: ARRAY
66554: EQUAL
66555: IFFALSE 66573
// begin weapon := j [ 2 ] ;
66557: LD_ADDR_VAR 0 8
66561: PUSH
66562: LD_VAR 0 5
66566: PUSH
66567: LD_INT 2
66569: ARRAY
66570: ST_TO_ADDR
// break ;
66571: GO 66575
// end ;
66573: GO 66533
66575: POP
66576: POP
// if not weapon then
66577: LD_VAR 0 8
66581: NOT
66582: IFFALSE 66586
// continue ;
66584: GO 66482
// for k in factories do
66586: LD_ADDR_VAR 0 6
66590: PUSH
66591: LD_VAR 0 2
66595: PUSH
66596: FOR_IN
66597: IFFALSE 66662
// begin weapons := AvailableWeaponList ( k ) ;
66599: LD_ADDR_VAR 0 9
66603: PUSH
66604: LD_VAR 0 6
66608: PPUSH
66609: CALL_OW 478
66613: ST_TO_ADDR
// if not weapons then
66614: LD_VAR 0 9
66618: NOT
66619: IFFALSE 66623
// continue ;
66621: GO 66596
// if weapon in weapons then
66623: LD_VAR 0 8
66627: PUSH
66628: LD_VAR 0 9
66632: IN
66633: IFFALSE 66660
// begin result := [ i , weapon ] ;
66635: LD_ADDR_VAR 0 3
66639: PUSH
66640: LD_VAR 0 4
66644: PUSH
66645: LD_VAR 0 8
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: ST_TO_ADDR
// exit ;
66654: POP
66655: POP
66656: POP
66657: POP
66658: GO 66668
// end ; end ;
66660: GO 66596
66662: POP
66663: POP
// end ;
66664: GO 66482
66666: POP
66667: POP
// end ;
66668: LD_VAR 0 3
66672: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66673: LD_INT 0
66675: PPUSH
// if not side or side > 8 then
66676: LD_VAR 0 3
66680: NOT
66681: PUSH
66682: LD_VAR 0 3
66686: PUSH
66687: LD_INT 8
66689: GREATER
66690: OR
66691: IFFALSE 66695
// exit ;
66693: GO 66754
// if not range then
66695: LD_VAR 0 4
66699: NOT
66700: IFFALSE 66711
// range := - 12 ;
66702: LD_ADDR_VAR 0 4
66706: PUSH
66707: LD_INT 12
66709: NEG
66710: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66711: LD_VAR 0 1
66715: PPUSH
66716: LD_VAR 0 2
66720: PPUSH
66721: LD_VAR 0 3
66725: PPUSH
66726: LD_VAR 0 4
66730: PPUSH
66731: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66735: LD_VAR 0 1
66739: PPUSH
66740: LD_VAR 0 2
66744: PPUSH
66745: LD_VAR 0 3
66749: PPUSH
66750: CALL_OW 331
// end ;
66754: LD_VAR 0 5
66758: RET
// export function Video ( mode ) ; begin
66759: LD_INT 0
66761: PPUSH
// ingame_video = mode ;
66762: LD_ADDR_OWVAR 52
66766: PUSH
66767: LD_VAR 0 1
66771: ST_TO_ADDR
// interface_hidden = mode ;
66772: LD_ADDR_OWVAR 54
66776: PUSH
66777: LD_VAR 0 1
66781: ST_TO_ADDR
// end ;
66782: LD_VAR 0 2
66786: RET
// export function Join ( array , element ) ; begin
66787: LD_INT 0
66789: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66790: LD_ADDR_VAR 0 3
66794: PUSH
66795: LD_VAR 0 1
66799: PPUSH
66800: LD_VAR 0 1
66804: PUSH
66805: LD_INT 1
66807: PLUS
66808: PPUSH
66809: LD_VAR 0 2
66813: PPUSH
66814: CALL_OW 1
66818: ST_TO_ADDR
// end ;
66819: LD_VAR 0 3
66823: RET
// export function JoinUnion ( array , element ) ; begin
66824: LD_INT 0
66826: PPUSH
// result := array union element ;
66827: LD_ADDR_VAR 0 3
66831: PUSH
66832: LD_VAR 0 1
66836: PUSH
66837: LD_VAR 0 2
66841: UNION
66842: ST_TO_ADDR
// end ;
66843: LD_VAR 0 3
66847: RET
// export function GetBehemoths ( side ) ; begin
66848: LD_INT 0
66850: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66851: LD_ADDR_VAR 0 2
66855: PUSH
66856: LD_INT 22
66858: PUSH
66859: LD_VAR 0 1
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 31
66870: PUSH
66871: LD_INT 25
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PPUSH
66882: CALL_OW 69
66886: ST_TO_ADDR
// end ;
66887: LD_VAR 0 2
66891: RET
// export function Shuffle ( array ) ; var i , index ; begin
66892: LD_INT 0
66894: PPUSH
66895: PPUSH
66896: PPUSH
// result := [ ] ;
66897: LD_ADDR_VAR 0 2
66901: PUSH
66902: EMPTY
66903: ST_TO_ADDR
// if not array then
66904: LD_VAR 0 1
66908: NOT
66909: IFFALSE 66913
// exit ;
66911: GO 67012
// Randomize ;
66913: CALL_OW 10
// for i = array downto 1 do
66917: LD_ADDR_VAR 0 3
66921: PUSH
66922: DOUBLE
66923: LD_VAR 0 1
66927: INC
66928: ST_TO_ADDR
66929: LD_INT 1
66931: PUSH
66932: FOR_DOWNTO
66933: IFFALSE 67010
// begin index := rand ( 1 , array ) ;
66935: LD_ADDR_VAR 0 4
66939: PUSH
66940: LD_INT 1
66942: PPUSH
66943: LD_VAR 0 1
66947: PPUSH
66948: CALL_OW 12
66952: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66953: LD_ADDR_VAR 0 2
66957: PUSH
66958: LD_VAR 0 2
66962: PPUSH
66963: LD_VAR 0 2
66967: PUSH
66968: LD_INT 1
66970: PLUS
66971: PPUSH
66972: LD_VAR 0 1
66976: PUSH
66977: LD_VAR 0 4
66981: ARRAY
66982: PPUSH
66983: CALL_OW 2
66987: ST_TO_ADDR
// array := Delete ( array , index ) ;
66988: LD_ADDR_VAR 0 1
66992: PUSH
66993: LD_VAR 0 1
66997: PPUSH
66998: LD_VAR 0 4
67002: PPUSH
67003: CALL_OW 3
67007: ST_TO_ADDR
// end ;
67008: GO 66932
67010: POP
67011: POP
// end ;
67012: LD_VAR 0 2
67016: RET
// export function GetBaseMaterials ( base ) ; begin
67017: LD_INT 0
67019: PPUSH
// result := [ 0 , 0 , 0 ] ;
67020: LD_ADDR_VAR 0 2
67024: PUSH
67025: LD_INT 0
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: LIST
67038: ST_TO_ADDR
// if not base then
67039: LD_VAR 0 1
67043: NOT
67044: IFFALSE 67048
// exit ;
67046: GO 67097
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67048: LD_ADDR_VAR 0 2
67052: PUSH
67053: LD_VAR 0 1
67057: PPUSH
67058: LD_INT 1
67060: PPUSH
67061: CALL_OW 275
67065: PUSH
67066: LD_VAR 0 1
67070: PPUSH
67071: LD_INT 2
67073: PPUSH
67074: CALL_OW 275
67078: PUSH
67079: LD_VAR 0 1
67083: PPUSH
67084: LD_INT 3
67086: PPUSH
67087: CALL_OW 275
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: LIST
67096: ST_TO_ADDR
// end ;
67097: LD_VAR 0 2
67101: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67102: LD_INT 0
67104: PPUSH
67105: PPUSH
// result := array ;
67106: LD_ADDR_VAR 0 3
67110: PUSH
67111: LD_VAR 0 1
67115: ST_TO_ADDR
// if size > 0 then
67116: LD_VAR 0 2
67120: PUSH
67121: LD_INT 0
67123: GREATER
67124: IFFALSE 67170
// for i := array downto size do
67126: LD_ADDR_VAR 0 4
67130: PUSH
67131: DOUBLE
67132: LD_VAR 0 1
67136: INC
67137: ST_TO_ADDR
67138: LD_VAR 0 2
67142: PUSH
67143: FOR_DOWNTO
67144: IFFALSE 67168
// result := Delete ( result , result ) ;
67146: LD_ADDR_VAR 0 3
67150: PUSH
67151: LD_VAR 0 3
67155: PPUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: CALL_OW 3
67165: ST_TO_ADDR
67166: GO 67143
67168: POP
67169: POP
// end ;
67170: LD_VAR 0 3
67174: RET
// export function ComExit ( unit ) ; var tmp ; begin
67175: LD_INT 0
67177: PPUSH
67178: PPUSH
// if not IsInUnit ( unit ) then
67179: LD_VAR 0 1
67183: PPUSH
67184: CALL_OW 310
67188: NOT
67189: IFFALSE 67193
// exit ;
67191: GO 67253
// tmp := IsInUnit ( unit ) ;
67193: LD_ADDR_VAR 0 3
67197: PUSH
67198: LD_VAR 0 1
67202: PPUSH
67203: CALL_OW 310
67207: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67208: LD_VAR 0 3
67212: PPUSH
67213: CALL_OW 247
67217: PUSH
67218: LD_INT 2
67220: EQUAL
67221: IFFALSE 67234
// ComExitVehicle ( unit ) else
67223: LD_VAR 0 1
67227: PPUSH
67228: CALL_OW 121
67232: GO 67243
// ComExitBuilding ( unit ) ;
67234: LD_VAR 0 1
67238: PPUSH
67239: CALL_OW 122
// result := tmp ;
67243: LD_ADDR_VAR 0 2
67247: PUSH
67248: LD_VAR 0 3
67252: ST_TO_ADDR
// end ;
67253: LD_VAR 0 2
67257: RET
// export function ComExitAll ( units ) ; var i ; begin
67258: LD_INT 0
67260: PPUSH
67261: PPUSH
// if not units then
67262: LD_VAR 0 1
67266: NOT
67267: IFFALSE 67271
// exit ;
67269: GO 67297
// for i in units do
67271: LD_ADDR_VAR 0 3
67275: PUSH
67276: LD_VAR 0 1
67280: PUSH
67281: FOR_IN
67282: IFFALSE 67295
// ComExit ( i ) ;
67284: LD_VAR 0 3
67288: PPUSH
67289: CALL 67175 0 1
67293: GO 67281
67295: POP
67296: POP
// end ;
67297: LD_VAR 0 2
67301: RET
// export function ResetHc ; begin
67302: LD_INT 0
67304: PPUSH
// InitHc ;
67305: CALL_OW 19
// hc_importance := 0 ;
67309: LD_ADDR_OWVAR 32
67313: PUSH
67314: LD_INT 0
67316: ST_TO_ADDR
// end ;
67317: LD_VAR 0 1
67321: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67322: LD_INT 0
67324: PPUSH
67325: PPUSH
67326: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67327: LD_ADDR_VAR 0 6
67331: PUSH
67332: LD_VAR 0 1
67336: PUSH
67337: LD_VAR 0 3
67341: PLUS
67342: PUSH
67343: LD_INT 2
67345: DIV
67346: ST_TO_ADDR
// if _x < 0 then
67347: LD_VAR 0 6
67351: PUSH
67352: LD_INT 0
67354: LESS
67355: IFFALSE 67372
// _x := _x * - 1 ;
67357: LD_ADDR_VAR 0 6
67361: PUSH
67362: LD_VAR 0 6
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: MUL
67371: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67372: LD_ADDR_VAR 0 7
67376: PUSH
67377: LD_VAR 0 2
67381: PUSH
67382: LD_VAR 0 4
67386: PLUS
67387: PUSH
67388: LD_INT 2
67390: DIV
67391: ST_TO_ADDR
// if _y < 0 then
67392: LD_VAR 0 7
67396: PUSH
67397: LD_INT 0
67399: LESS
67400: IFFALSE 67417
// _y := _y * - 1 ;
67402: LD_ADDR_VAR 0 7
67406: PUSH
67407: LD_VAR 0 7
67411: PUSH
67412: LD_INT 1
67414: NEG
67415: MUL
67416: ST_TO_ADDR
// result := [ _x , _y ] ;
67417: LD_ADDR_VAR 0 5
67421: PUSH
67422: LD_VAR 0 6
67426: PUSH
67427: LD_VAR 0 7
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: ST_TO_ADDR
// end ;
67436: LD_VAR 0 5
67440: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67441: LD_INT 0
67443: PPUSH
67444: PPUSH
67445: PPUSH
67446: PPUSH
// task := GetTaskList ( unit ) ;
67447: LD_ADDR_VAR 0 7
67451: PUSH
67452: LD_VAR 0 1
67456: PPUSH
67457: CALL_OW 437
67461: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67462: LD_VAR 0 7
67466: NOT
67467: PUSH
67468: LD_VAR 0 1
67472: PPUSH
67473: LD_VAR 0 2
67477: PPUSH
67478: CALL_OW 308
67482: NOT
67483: AND
67484: IFFALSE 67488
// exit ;
67486: GO 67606
// if IsInArea ( unit , area ) then
67488: LD_VAR 0 1
67492: PPUSH
67493: LD_VAR 0 2
67497: PPUSH
67498: CALL_OW 308
67502: IFFALSE 67520
// begin ComMoveToArea ( unit , goAway ) ;
67504: LD_VAR 0 1
67508: PPUSH
67509: LD_VAR 0 3
67513: PPUSH
67514: CALL_OW 113
// exit ;
67518: GO 67606
// end ; if task [ 1 ] [ 1 ] <> M then
67520: LD_VAR 0 7
67524: PUSH
67525: LD_INT 1
67527: ARRAY
67528: PUSH
67529: LD_INT 1
67531: ARRAY
67532: PUSH
67533: LD_STRING M
67535: NONEQUAL
67536: IFFALSE 67540
// exit ;
67538: GO 67606
// x := task [ 1 ] [ 2 ] ;
67540: LD_ADDR_VAR 0 5
67544: PUSH
67545: LD_VAR 0 7
67549: PUSH
67550: LD_INT 1
67552: ARRAY
67553: PUSH
67554: LD_INT 2
67556: ARRAY
67557: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67558: LD_ADDR_VAR 0 6
67562: PUSH
67563: LD_VAR 0 7
67567: PUSH
67568: LD_INT 1
67570: ARRAY
67571: PUSH
67572: LD_INT 3
67574: ARRAY
67575: ST_TO_ADDR
// if InArea ( x , y , area ) then
67576: LD_VAR 0 5
67580: PPUSH
67581: LD_VAR 0 6
67585: PPUSH
67586: LD_VAR 0 2
67590: PPUSH
67591: CALL_OW 309
67595: IFFALSE 67606
// ComStop ( unit ) ;
67597: LD_VAR 0 1
67601: PPUSH
67602: CALL_OW 141
// end ;
67606: LD_VAR 0 4
67610: RET
// export function Abs ( value ) ; begin
67611: LD_INT 0
67613: PPUSH
// result := value ;
67614: LD_ADDR_VAR 0 2
67618: PUSH
67619: LD_VAR 0 1
67623: ST_TO_ADDR
// if value < 0 then
67624: LD_VAR 0 1
67628: PUSH
67629: LD_INT 0
67631: LESS
67632: IFFALSE 67649
// result := value * - 1 ;
67634: LD_ADDR_VAR 0 2
67638: PUSH
67639: LD_VAR 0 1
67643: PUSH
67644: LD_INT 1
67646: NEG
67647: MUL
67648: ST_TO_ADDR
// end ;
67649: LD_VAR 0 2
67653: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67654: LD_INT 0
67656: PPUSH
67657: PPUSH
67658: PPUSH
67659: PPUSH
67660: PPUSH
67661: PPUSH
67662: PPUSH
67663: PPUSH
// if not unit or not building then
67664: LD_VAR 0 1
67668: NOT
67669: PUSH
67670: LD_VAR 0 2
67674: NOT
67675: OR
67676: IFFALSE 67680
// exit ;
67678: GO 67906
// x := GetX ( building ) ;
67680: LD_ADDR_VAR 0 4
67684: PUSH
67685: LD_VAR 0 2
67689: PPUSH
67690: CALL_OW 250
67694: ST_TO_ADDR
// y := GetY ( building ) ;
67695: LD_ADDR_VAR 0 6
67699: PUSH
67700: LD_VAR 0 2
67704: PPUSH
67705: CALL_OW 251
67709: ST_TO_ADDR
// d := GetDir ( building ) ;
67710: LD_ADDR_VAR 0 8
67714: PUSH
67715: LD_VAR 0 2
67719: PPUSH
67720: CALL_OW 254
67724: ST_TO_ADDR
// r := 4 ;
67725: LD_ADDR_VAR 0 9
67729: PUSH
67730: LD_INT 4
67732: ST_TO_ADDR
// for i := 1 to 5 do
67733: LD_ADDR_VAR 0 10
67737: PUSH
67738: DOUBLE
67739: LD_INT 1
67741: DEC
67742: ST_TO_ADDR
67743: LD_INT 5
67745: PUSH
67746: FOR_TO
67747: IFFALSE 67904
// begin _x := ShiftX ( x , d , r + i ) ;
67749: LD_ADDR_VAR 0 5
67753: PUSH
67754: LD_VAR 0 4
67758: PPUSH
67759: LD_VAR 0 8
67763: PPUSH
67764: LD_VAR 0 9
67768: PUSH
67769: LD_VAR 0 10
67773: PLUS
67774: PPUSH
67775: CALL_OW 272
67779: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67780: LD_ADDR_VAR 0 7
67784: PUSH
67785: LD_VAR 0 6
67789: PPUSH
67790: LD_VAR 0 8
67794: PPUSH
67795: LD_VAR 0 9
67799: PUSH
67800: LD_VAR 0 10
67804: PLUS
67805: PPUSH
67806: CALL_OW 273
67810: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67811: LD_VAR 0 5
67815: PPUSH
67816: LD_VAR 0 7
67820: PPUSH
67821: CALL_OW 488
67825: PUSH
67826: LD_VAR 0 5
67830: PPUSH
67831: LD_VAR 0 7
67835: PPUSH
67836: CALL_OW 428
67840: PPUSH
67841: CALL_OW 247
67845: PUSH
67846: LD_INT 3
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: IN
67856: NOT
67857: AND
67858: IFFALSE 67902
// begin ComMoveXY ( unit , _x , _y ) ;
67860: LD_VAR 0 1
67864: PPUSH
67865: LD_VAR 0 5
67869: PPUSH
67870: LD_VAR 0 7
67874: PPUSH
67875: CALL_OW 111
// result := [ _x , _y ] ;
67879: LD_ADDR_VAR 0 3
67883: PUSH
67884: LD_VAR 0 5
67888: PUSH
67889: LD_VAR 0 7
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: ST_TO_ADDR
// exit ;
67898: POP
67899: POP
67900: GO 67906
// end ; end ;
67902: GO 67746
67904: POP
67905: POP
// end ;
67906: LD_VAR 0 3
67910: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67911: LD_INT 0
67913: PPUSH
67914: PPUSH
67915: PPUSH
// result := 0 ;
67916: LD_ADDR_VAR 0 3
67920: PUSH
67921: LD_INT 0
67923: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67924: LD_VAR 0 1
67928: PUSH
67929: LD_INT 0
67931: LESS
67932: PUSH
67933: LD_VAR 0 1
67937: PUSH
67938: LD_INT 8
67940: GREATER
67941: OR
67942: PUSH
67943: LD_VAR 0 2
67947: PUSH
67948: LD_INT 0
67950: LESS
67951: OR
67952: PUSH
67953: LD_VAR 0 2
67957: PUSH
67958: LD_INT 8
67960: GREATER
67961: OR
67962: IFFALSE 67966
// exit ;
67964: GO 68041
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67966: LD_ADDR_VAR 0 4
67970: PUSH
67971: LD_INT 22
67973: PUSH
67974: LD_VAR 0 2
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PPUSH
67983: CALL_OW 69
67987: PUSH
67988: FOR_IN
67989: IFFALSE 68039
// begin un := UnitShoot ( i ) ;
67991: LD_ADDR_VAR 0 5
67995: PUSH
67996: LD_VAR 0 4
68000: PPUSH
68001: CALL_OW 504
68005: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68006: LD_VAR 0 5
68010: PPUSH
68011: CALL_OW 255
68015: PUSH
68016: LD_VAR 0 1
68020: EQUAL
68021: IFFALSE 68037
// begin result := un ;
68023: LD_ADDR_VAR 0 3
68027: PUSH
68028: LD_VAR 0 5
68032: ST_TO_ADDR
// exit ;
68033: POP
68034: POP
68035: GO 68041
// end ; end ;
68037: GO 67988
68039: POP
68040: POP
// end ;
68041: LD_VAR 0 3
68045: RET
// export function GetCargoBay ( units ) ; begin
68046: LD_INT 0
68048: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68049: LD_ADDR_VAR 0 2
68053: PUSH
68054: LD_VAR 0 1
68058: PPUSH
68059: LD_INT 2
68061: PUSH
68062: LD_INT 34
68064: PUSH
68065: LD_INT 12
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 34
68074: PUSH
68075: LD_INT 51
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 34
68084: PUSH
68085: LD_INT 32
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 34
68094: PUSH
68095: LD_EXP 33
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: PPUSH
68111: CALL_OW 72
68115: ST_TO_ADDR
// end ;
68116: LD_VAR 0 2
68120: RET
// export function Negate ( value ) ; begin
68121: LD_INT 0
68123: PPUSH
// result := not value ;
68124: LD_ADDR_VAR 0 2
68128: PUSH
68129: LD_VAR 0 1
68133: NOT
68134: ST_TO_ADDR
// end ;
68135: LD_VAR 0 2
68139: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
68140: LD_INT 0
68142: PPUSH
// if x1 = x2 then
68143: LD_VAR 0 1
68147: PUSH
68148: LD_VAR 0 3
68152: EQUAL
68153: IFFALSE 68187
// begin if y1 > y2 then
68155: LD_VAR 0 2
68159: PUSH
68160: LD_VAR 0 4
68164: GREATER
68165: IFFALSE 68177
// result := 0 else
68167: LD_ADDR_VAR 0 5
68171: PUSH
68172: LD_INT 0
68174: ST_TO_ADDR
68175: GO 68185
// result := 3 ;
68177: LD_ADDR_VAR 0 5
68181: PUSH
68182: LD_INT 3
68184: ST_TO_ADDR
// exit ;
68185: GO 68273
// end ; if y1 = y2 then
68187: LD_VAR 0 2
68191: PUSH
68192: LD_VAR 0 4
68196: EQUAL
68197: IFFALSE 68231
// begin if x1 > x2 then
68199: LD_VAR 0 1
68203: PUSH
68204: LD_VAR 0 3
68208: GREATER
68209: IFFALSE 68221
// result := 1 else
68211: LD_ADDR_VAR 0 5
68215: PUSH
68216: LD_INT 1
68218: ST_TO_ADDR
68219: GO 68229
// result := 4 ;
68221: LD_ADDR_VAR 0 5
68225: PUSH
68226: LD_INT 4
68228: ST_TO_ADDR
// exit ;
68229: GO 68273
// end ; if x1 > x2 and y1 > y2 then
68231: LD_VAR 0 1
68235: PUSH
68236: LD_VAR 0 3
68240: GREATER
68241: PUSH
68242: LD_VAR 0 2
68246: PUSH
68247: LD_VAR 0 4
68251: GREATER
68252: AND
68253: IFFALSE 68265
// result := 2 else
68255: LD_ADDR_VAR 0 5
68259: PUSH
68260: LD_INT 2
68262: ST_TO_ADDR
68263: GO 68273
// result := 5 ;
68265: LD_ADDR_VAR 0 5
68269: PUSH
68270: LD_INT 5
68272: ST_TO_ADDR
// end ;
68273: LD_VAR 0 5
68277: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68278: LD_INT 0
68280: PPUSH
68281: PPUSH
// if not driver or not IsInUnit ( driver ) then
68282: LD_VAR 0 1
68286: NOT
68287: PUSH
68288: LD_VAR 0 1
68292: PPUSH
68293: CALL_OW 310
68297: NOT
68298: OR
68299: IFFALSE 68303
// exit ;
68301: GO 68393
// vehicle := IsInUnit ( driver ) ;
68303: LD_ADDR_VAR 0 3
68307: PUSH
68308: LD_VAR 0 1
68312: PPUSH
68313: CALL_OW 310
68317: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68318: LD_VAR 0 1
68322: PPUSH
68323: LD_STRING \
68325: PUSH
68326: LD_INT 0
68328: PUSH
68329: LD_INT 0
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: PUSH
68353: LD_STRING E
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: LD_VAR 0 3
68366: PUSH
68367: LD_INT 0
68369: PUSH
68370: LD_INT 0
68372: PUSH
68373: LD_INT 0
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: LIST
68380: LIST
68381: LIST
68382: LIST
68383: LIST
68384: PUSH
68385: EMPTY
68386: LIST
68387: LIST
68388: PPUSH
68389: CALL_OW 446
// end ;
68393: LD_VAR 0 2
68397: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68398: LD_INT 0
68400: PPUSH
68401: PPUSH
// if not driver or not IsInUnit ( driver ) then
68402: LD_VAR 0 1
68406: NOT
68407: PUSH
68408: LD_VAR 0 1
68412: PPUSH
68413: CALL_OW 310
68417: NOT
68418: OR
68419: IFFALSE 68423
// exit ;
68421: GO 68513
// vehicle := IsInUnit ( driver ) ;
68423: LD_ADDR_VAR 0 3
68427: PUSH
68428: LD_VAR 0 1
68432: PPUSH
68433: CALL_OW 310
68437: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_STRING \
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: LD_INT 0
68451: PUSH
68452: LD_INT 0
68454: PUSH
68455: LD_INT 0
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: LD_INT 0
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: PUSH
68473: LD_STRING E
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: LD_VAR 0 3
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: LIST
68500: LIST
68501: LIST
68502: LIST
68503: LIST
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PPUSH
68509: CALL_OW 447
// end ;
68513: LD_VAR 0 2
68517: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68518: LD_INT 0
68520: PPUSH
68521: PPUSH
68522: PPUSH
// tmp := [ ] ;
68523: LD_ADDR_VAR 0 5
68527: PUSH
68528: EMPTY
68529: ST_TO_ADDR
// for i in units do
68530: LD_ADDR_VAR 0 4
68534: PUSH
68535: LD_VAR 0 1
68539: PUSH
68540: FOR_IN
68541: IFFALSE 68579
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68543: LD_ADDR_VAR 0 5
68547: PUSH
68548: LD_VAR 0 5
68552: PPUSH
68553: LD_VAR 0 5
68557: PUSH
68558: LD_INT 1
68560: PLUS
68561: PPUSH
68562: LD_VAR 0 4
68566: PPUSH
68567: CALL_OW 256
68571: PPUSH
68572: CALL_OW 2
68576: ST_TO_ADDR
68577: GO 68540
68579: POP
68580: POP
// if not tmp then
68581: LD_VAR 0 5
68585: NOT
68586: IFFALSE 68590
// exit ;
68588: GO 68638
// if asc then
68590: LD_VAR 0 2
68594: IFFALSE 68618
// result := SortListByListAsc ( units , tmp ) else
68596: LD_ADDR_VAR 0 3
68600: PUSH
68601: LD_VAR 0 1
68605: PPUSH
68606: LD_VAR 0 5
68610: PPUSH
68611: CALL_OW 76
68615: ST_TO_ADDR
68616: GO 68638
// result := SortListByListDesc ( units , tmp ) ;
68618: LD_ADDR_VAR 0 3
68622: PUSH
68623: LD_VAR 0 1
68627: PPUSH
68628: LD_VAR 0 5
68632: PPUSH
68633: CALL_OW 77
68637: ST_TO_ADDR
// end ;
68638: LD_VAR 0 3
68642: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68643: LD_INT 0
68645: PPUSH
68646: PPUSH
// task := GetTaskList ( mech ) ;
68647: LD_ADDR_VAR 0 4
68651: PUSH
68652: LD_VAR 0 1
68656: PPUSH
68657: CALL_OW 437
68661: ST_TO_ADDR
// if not task then
68662: LD_VAR 0 4
68666: NOT
68667: IFFALSE 68671
// exit ;
68669: GO 68713
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68671: LD_ADDR_VAR 0 3
68675: PUSH
68676: LD_VAR 0 4
68680: PUSH
68681: LD_INT 1
68683: ARRAY
68684: PUSH
68685: LD_INT 1
68687: ARRAY
68688: PUSH
68689: LD_STRING r
68691: EQUAL
68692: PUSH
68693: LD_VAR 0 4
68697: PUSH
68698: LD_INT 1
68700: ARRAY
68701: PUSH
68702: LD_INT 4
68704: ARRAY
68705: PUSH
68706: LD_VAR 0 2
68710: EQUAL
68711: AND
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 3
68717: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68718: LD_INT 0
68720: PPUSH
// SetDir ( unit , d ) ;
68721: LD_VAR 0 1
68725: PPUSH
68726: LD_VAR 0 4
68730: PPUSH
68731: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68735: LD_VAR 0 1
68739: PPUSH
68740: LD_VAR 0 2
68744: PPUSH
68745: LD_VAR 0 3
68749: PPUSH
68750: LD_VAR 0 5
68754: PPUSH
68755: CALL_OW 48
// end ;
68759: LD_VAR 0 6
68763: RET
// export function ToNaturalNumber ( number ) ; begin
68764: LD_INT 0
68766: PPUSH
// result := number div 1 ;
68767: LD_ADDR_VAR 0 2
68771: PUSH
68772: LD_VAR 0 1
68776: PUSH
68777: LD_INT 1
68779: DIV
68780: ST_TO_ADDR
// if number < 0 then
68781: LD_VAR 0 1
68785: PUSH
68786: LD_INT 0
68788: LESS
68789: IFFALSE 68799
// result := 0 ;
68791: LD_ADDR_VAR 0 2
68795: PUSH
68796: LD_INT 0
68798: ST_TO_ADDR
// end ;
68799: LD_VAR 0 2
68803: RET
// export function SortByClass ( units , class ) ; var un ; begin
68804: LD_INT 0
68806: PPUSH
68807: PPUSH
// if not units or not class then
68808: LD_VAR 0 1
68812: NOT
68813: PUSH
68814: LD_VAR 0 2
68818: NOT
68819: OR
68820: IFFALSE 68824
// exit ;
68822: GO 68919
// result := [ ] ;
68824: LD_ADDR_VAR 0 3
68828: PUSH
68829: EMPTY
68830: ST_TO_ADDR
// for un in units do
68831: LD_ADDR_VAR 0 4
68835: PUSH
68836: LD_VAR 0 1
68840: PUSH
68841: FOR_IN
68842: IFFALSE 68917
// if GetClass ( un ) = class then
68844: LD_VAR 0 4
68848: PPUSH
68849: CALL_OW 257
68853: PUSH
68854: LD_VAR 0 2
68858: EQUAL
68859: IFFALSE 68886
// result := Insert ( result , 1 , un ) else
68861: LD_ADDR_VAR 0 3
68865: PUSH
68866: LD_VAR 0 3
68870: PPUSH
68871: LD_INT 1
68873: PPUSH
68874: LD_VAR 0 4
68878: PPUSH
68879: CALL_OW 2
68883: ST_TO_ADDR
68884: GO 68915
// result := Replace ( result , result + 1 , un ) ;
68886: LD_ADDR_VAR 0 3
68890: PUSH
68891: LD_VAR 0 3
68895: PPUSH
68896: LD_VAR 0 3
68900: PUSH
68901: LD_INT 1
68903: PLUS
68904: PPUSH
68905: LD_VAR 0 4
68909: PPUSH
68910: CALL_OW 1
68914: ST_TO_ADDR
68915: GO 68841
68917: POP
68918: POP
// end ;
68919: LD_VAR 0 3
68923: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68924: LD_INT 0
68926: PPUSH
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
68932: PPUSH
// result := [ ] ;
68933: LD_ADDR_VAR 0 4
68937: PUSH
68938: EMPTY
68939: ST_TO_ADDR
// if x - r < 0 then
68940: LD_VAR 0 1
68944: PUSH
68945: LD_VAR 0 3
68949: MINUS
68950: PUSH
68951: LD_INT 0
68953: LESS
68954: IFFALSE 68966
// min_x := 0 else
68956: LD_ADDR_VAR 0 8
68960: PUSH
68961: LD_INT 0
68963: ST_TO_ADDR
68964: GO 68982
// min_x := x - r ;
68966: LD_ADDR_VAR 0 8
68970: PUSH
68971: LD_VAR 0 1
68975: PUSH
68976: LD_VAR 0 3
68980: MINUS
68981: ST_TO_ADDR
// if y - r < 0 then
68982: LD_VAR 0 2
68986: PUSH
68987: LD_VAR 0 3
68991: MINUS
68992: PUSH
68993: LD_INT 0
68995: LESS
68996: IFFALSE 69008
// min_y := 0 else
68998: LD_ADDR_VAR 0 7
69002: PUSH
69003: LD_INT 0
69005: ST_TO_ADDR
69006: GO 69024
// min_y := y - r ;
69008: LD_ADDR_VAR 0 7
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_VAR 0 3
69022: MINUS
69023: ST_TO_ADDR
// max_x := x + r ;
69024: LD_ADDR_VAR 0 9
69028: PUSH
69029: LD_VAR 0 1
69033: PUSH
69034: LD_VAR 0 3
69038: PLUS
69039: ST_TO_ADDR
// max_y := y + r ;
69040: LD_ADDR_VAR 0 10
69044: PUSH
69045: LD_VAR 0 2
69049: PUSH
69050: LD_VAR 0 3
69054: PLUS
69055: ST_TO_ADDR
// for _x = min_x to max_x do
69056: LD_ADDR_VAR 0 5
69060: PUSH
69061: DOUBLE
69062: LD_VAR 0 8
69066: DEC
69067: ST_TO_ADDR
69068: LD_VAR 0 9
69072: PUSH
69073: FOR_TO
69074: IFFALSE 69175
// for _y = min_y to max_y do
69076: LD_ADDR_VAR 0 6
69080: PUSH
69081: DOUBLE
69082: LD_VAR 0 7
69086: DEC
69087: ST_TO_ADDR
69088: LD_VAR 0 10
69092: PUSH
69093: FOR_TO
69094: IFFALSE 69171
// begin if not ValidHex ( _x , _y ) then
69096: LD_VAR 0 5
69100: PPUSH
69101: LD_VAR 0 6
69105: PPUSH
69106: CALL_OW 488
69110: NOT
69111: IFFALSE 69115
// continue ;
69113: GO 69093
// if GetResourceTypeXY ( _x , _y ) then
69115: LD_VAR 0 5
69119: PPUSH
69120: LD_VAR 0 6
69124: PPUSH
69125: CALL_OW 283
69129: IFFALSE 69169
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69131: LD_ADDR_VAR 0 4
69135: PUSH
69136: LD_VAR 0 4
69140: PPUSH
69141: LD_VAR 0 4
69145: PUSH
69146: LD_INT 1
69148: PLUS
69149: PPUSH
69150: LD_VAR 0 5
69154: PUSH
69155: LD_VAR 0 6
69159: PUSH
69160: EMPTY
69161: LIST
69162: LIST
69163: PPUSH
69164: CALL_OW 1
69168: ST_TO_ADDR
// end ;
69169: GO 69093
69171: POP
69172: POP
69173: GO 69073
69175: POP
69176: POP
// end ;
69177: LD_VAR 0 4
69181: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
69182: LD_INT 0
69184: PPUSH
69185: PPUSH
69186: PPUSH
69187: PPUSH
69188: PPUSH
69189: PPUSH
// if not units then
69190: LD_VAR 0 1
69194: NOT
69195: IFFALSE 69199
// exit ;
69197: GO 69600
// result := UnitFilter ( units , [ f_ok ] ) ;
69199: LD_ADDR_VAR 0 3
69203: PUSH
69204: LD_VAR 0 1
69208: PPUSH
69209: LD_INT 50
69211: PUSH
69212: EMPTY
69213: LIST
69214: PPUSH
69215: CALL_OW 72
69219: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69220: LD_ADDR_VAR 0 7
69224: PUSH
69225: LD_VAR 0 1
69229: PUSH
69230: LD_INT 1
69232: ARRAY
69233: PPUSH
69234: CALL_OW 255
69238: ST_TO_ADDR
// if not result then
69239: LD_VAR 0 3
69243: NOT
69244: IFFALSE 69248
// exit ;
69246: GO 69600
// for i in result do
69248: LD_ADDR_VAR 0 4
69252: PUSH
69253: LD_VAR 0 3
69257: PUSH
69258: FOR_IN
69259: IFFALSE 69598
// begin tag := GetTag ( i ) + 1 ;
69261: LD_ADDR_VAR 0 8
69265: PUSH
69266: LD_VAR 0 4
69270: PPUSH
69271: CALL_OW 110
69275: PUSH
69276: LD_INT 1
69278: PLUS
69279: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69280: LD_ADDR_VAR 0 6
69284: PUSH
69285: LD_VAR 0 4
69289: PPUSH
69290: CALL_OW 250
69294: PPUSH
69295: LD_VAR 0 4
69299: PPUSH
69300: CALL_OW 251
69304: PPUSH
69305: LD_INT 6
69307: PPUSH
69308: CALL 68924 0 3
69312: ST_TO_ADDR
// if cr then
69313: LD_VAR 0 6
69317: IFFALSE 69356
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69319: LD_VAR 0 4
69323: PPUSH
69324: LD_VAR 0 6
69328: PUSH
69329: LD_INT 1
69331: ARRAY
69332: PUSH
69333: LD_INT 1
69335: ARRAY
69336: PPUSH
69337: LD_VAR 0 6
69341: PUSH
69342: LD_INT 1
69344: ARRAY
69345: PUSH
69346: LD_INT 2
69348: ARRAY
69349: PPUSH
69350: CALL_OW 116
69354: GO 69596
// if path > tag then
69356: LD_VAR 0 2
69360: PUSH
69361: LD_VAR 0 8
69365: GREATER
69366: IFFALSE 69544
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
69368: LD_ADDR_VAR 0 5
69372: PUSH
69373: LD_INT 81
69375: PUSH
69376: LD_VAR 0 7
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 91
69387: PUSH
69388: LD_VAR 0 4
69392: PUSH
69393: LD_INT 12
69395: PUSH
69396: EMPTY
69397: LIST
69398: LIST
69399: LIST
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PPUSH
69405: CALL_OW 69
69409: ST_TO_ADDR
// if enemy then
69410: LD_VAR 0 5
69414: IFFALSE 69442
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69416: LD_VAR 0 4
69420: PPUSH
69421: LD_VAR 0 5
69425: PPUSH
69426: LD_VAR 0 4
69430: PPUSH
69431: CALL_OW 74
69435: PPUSH
69436: CALL_OW 115
69440: GO 69542
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69442: LD_VAR 0 4
69446: PPUSH
69447: LD_VAR 0 2
69451: PUSH
69452: LD_VAR 0 8
69456: ARRAY
69457: PUSH
69458: LD_INT 1
69460: ARRAY
69461: PPUSH
69462: LD_VAR 0 2
69466: PUSH
69467: LD_VAR 0 8
69471: ARRAY
69472: PUSH
69473: LD_INT 2
69475: ARRAY
69476: PPUSH
69477: CALL_OW 297
69481: PUSH
69482: LD_INT 6
69484: GREATER
69485: IFFALSE 69528
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69487: LD_VAR 0 4
69491: PPUSH
69492: LD_VAR 0 2
69496: PUSH
69497: LD_VAR 0 8
69501: ARRAY
69502: PUSH
69503: LD_INT 1
69505: ARRAY
69506: PPUSH
69507: LD_VAR 0 2
69511: PUSH
69512: LD_VAR 0 8
69516: ARRAY
69517: PUSH
69518: LD_INT 2
69520: ARRAY
69521: PPUSH
69522: CALL_OW 114
69526: GO 69542
// SetTag ( i , tag ) ;
69528: LD_VAR 0 4
69532: PPUSH
69533: LD_VAR 0 8
69537: PPUSH
69538: CALL_OW 109
// end else
69542: GO 69596
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69544: LD_ADDR_VAR 0 5
69548: PUSH
69549: LD_INT 81
69551: PUSH
69552: LD_VAR 0 7
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: PPUSH
69561: CALL_OW 69
69565: ST_TO_ADDR
// if enemy then
69566: LD_VAR 0 5
69570: IFFALSE 69596
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69572: LD_VAR 0 4
69576: PPUSH
69577: LD_VAR 0 5
69581: PPUSH
69582: LD_VAR 0 4
69586: PPUSH
69587: CALL_OW 74
69591: PPUSH
69592: CALL_OW 115
// end ; end ;
69596: GO 69258
69598: POP
69599: POP
// end ; end_of_file
69600: LD_VAR 0 3
69604: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69605: LD_VAR 0 1
69609: PUSH
69610: LD_INT 200
69612: DOUBLE
69613: GREATEREQUAL
69614: IFFALSE 69622
69616: LD_INT 299
69618: DOUBLE
69619: LESSEQUAL
69620: IFTRUE 69624
69622: GO 69656
69624: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69625: LD_VAR 0 1
69629: PPUSH
69630: LD_VAR 0 2
69634: PPUSH
69635: LD_VAR 0 3
69639: PPUSH
69640: LD_VAR 0 4
69644: PPUSH
69645: LD_VAR 0 5
69649: PPUSH
69650: CALL 26167 0 5
69654: GO 69733
69656: LD_INT 300
69658: DOUBLE
69659: GREATEREQUAL
69660: IFFALSE 69668
69662: LD_INT 399
69664: DOUBLE
69665: LESSEQUAL
69666: IFTRUE 69670
69668: GO 69732
69670: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69671: LD_VAR 0 1
69675: PPUSH
69676: LD_VAR 0 2
69680: PPUSH
69681: LD_VAR 0 3
69685: PPUSH
69686: LD_VAR 0 4
69690: PPUSH
69691: LD_VAR 0 5
69695: PPUSH
69696: LD_VAR 0 6
69700: PPUSH
69701: LD_VAR 0 7
69705: PPUSH
69706: LD_VAR 0 8
69710: PPUSH
69711: LD_VAR 0 9
69715: PPUSH
69716: LD_VAR 0 10
69720: PPUSH
69721: LD_VAR 0 11
69725: PPUSH
69726: CALL 24055 0 11
69730: GO 69733
69732: POP
// end ;
69733: PPOPN 11
69735: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69736: LD_VAR 0 1
69740: PPUSH
69741: LD_VAR 0 2
69745: PPUSH
69746: LD_VAR 0 3
69750: PPUSH
69751: LD_VAR 0 4
69755: PPUSH
69756: LD_VAR 0 5
69760: PPUSH
69761: CALL 26149 0 5
// end ; end_of_file
69765: PPOPN 5
69767: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69768: LD_VAR 0 1
69772: PPUSH
69773: LD_VAR 0 2
69777: PPUSH
69778: LD_VAR 0 3
69782: PPUSH
69783: LD_VAR 0 4
69787: PPUSH
69788: LD_VAR 0 5
69792: PPUSH
69793: LD_VAR 0 6
69797: PPUSH
69798: CALL 12863 0 6
// end ;
69802: PPOPN 6
69804: END
