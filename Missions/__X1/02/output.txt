// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11573 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 30000 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 30000 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6077: LD_INT 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 424
// SaveForQuickRestart ;
6087: CALL_OW 22
// wait ( 0 0$20 ) ;
6091: LD_INT 700
6093: PPUSH
6094: CALL_OW 67
// SendSciToForest ;
6098: CALL 1496 0 0
// if Difficulty = 1 then
6102: LD_OWVAR 67
6106: PUSH
6107: LD_INT 1
6109: EQUAL
6110: IFFALSE 6114
// exit ;
6112: GO 6231
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6114: LD_INT 10500
6116: PUSH
6117: LD_INT 5250
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 1
6131: MINUS
6132: ARRAY
6133: PPUSH
6134: CALL_OW 67
// if usAlert then
6138: LD_EXP 10
6142: IFFALSE 6146
// exit ;
6144: GO 6231
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if not tmp then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6231
// ComExitBuilding ( tmp ) ;
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 31
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: LD_INT 13
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 180
// end ;
6231: LD_VAR 0 1
6235: RET
// every 3 3$00 do
6236: GO 6238
6238: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 570
6244: PPUSH
6245: LD_INT 350
6247: PPUSH
6248: CALL_OW 550
// wait ( 2 2$40 ) ;
6252: LD_INT 5600
6254: PPUSH
6255: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 570
6264: PPUSH
6265: LD_INT 350
6267: PPUSH
6268: CALL_OW 550
// end ;
6272: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6273: LD_EXP 4
6277: NOT
6278: PUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_EXP 27
6286: PPUSH
6287: CALL_OW 292
6291: AND
6292: IFFALSE 7208
6294: GO 6296
6296: DISABLE
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6301: LD_INT 10
6303: PPUSH
6304: LD_INT 0
6306: PPUSH
6307: CALL_OW 424
// aviradzeSpotted := true ;
6311: LD_ADDR_EXP 4
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_INT 22
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6353: LD_EXP 23
6357: PPUSH
6358: LD_EXP 27
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_EXP 27
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6382: LD_INT 35
6384: PPUSH
6385: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6389: LD_EXP 23
6393: PPUSH
6394: LD_EXP 27
6398: PPUSH
6399: CALL_OW 296
6403: PUSH
6404: LD_INT 16
6406: LESS
6407: IFFALSE 6382
// InGameOn ;
6409: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6413: LD_INT 5
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: CALL_OW 343
// if pepAmount > 2 then
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 2
6430: GREATER
6431: IFFALSE 6447
// Say ( Heike , DH-1-spot ) else
6433: LD_EXP 23
6437: PPUSH
6438: LD_STRING DH-1-spot
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( Heike , DH-1-spot-d ) ;
6447: LD_EXP 23
6451: PPUSH
6452: LD_STRING DH-1-spot-d
6454: PPUSH
6455: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6459: LD_EXP 23
6463: PPUSH
6464: LD_EXP 27
6468: PPUSH
6469: CALL_OW 250
6473: PPUSH
6474: LD_EXP 27
6478: PPUSH
6479: CALL_OW 251
6483: PPUSH
6484: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_EXP 26
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 24
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6553
// if GetDistUnits ( i , Aviradze ) > 7 then
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_EXP 27
6525: PPUSH
6526: CALL_OW 296
6530: PUSH
6531: LD_INT 7
6533: GREATER
6534: IFFALSE 6551
// ComMoveXY ( i , 102 , 40 ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 102
6543: PPUSH
6544: LD_INT 40
6546: PPUSH
6547: CALL_OW 111
6551: GO 6513
6553: POP
6554: POP
// repeat wait ( 0 0$1 ) ;
6555: LD_INT 35
6557: PPUSH
6558: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 296
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: IFFALSE 6555
// ComTurnUnit ( Heike , Aviradze ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_EXP 27
6591: PPUSH
6592: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6596: LD_EXP 27
6600: PUSH
6601: LD_EXP 29
6605: PUSH
6606: LD_EXP 28
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PPUSH
6616: LD_EXP 23
6620: PPUSH
6621: CALL_OW 119
// if pepAmount > 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: GREATER
6633: IFFALSE 6685
// begin wait ( 0 0$2 ) ;
6635: LD_INT 70
6637: PPUSH
6638: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6642: LD_EXP 26
6646: PUSH
6647: LD_EXP 25
6651: PUSH
6652: LD_EXP 24
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: LD_EXP 27
6666: PPUSH
6667: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6671: LD_EXP 23
6675: PPUSH
6676: LD_STRING DH-2-spot
6678: PPUSH
6679: CALL_OW 88
// end else
6683: GO 6697
// Say ( Heike , DH-2-spot-d ) ;
6685: LD_EXP 23
6689: PPUSH
6690: LD_STRING DH-2-spot-d
6692: PPUSH
6693: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6697: LD_EXP 27
6701: PPUSH
6702: LD_STRING DA-2-spot
6704: PPUSH
6705: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-3-spot
6716: PPUSH
6717: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6721: LD_EXP 28
6725: PPUSH
6726: LD_EXP 23
6730: PPUSH
6731: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6735: LD_EXP 23
6739: PPUSH
6740: LD_EXP 28
6744: PPUSH
6745: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6749: LD_INT 10
6751: PPUSH
6752: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6756: LD_EXP 28
6760: PPUSH
6761: LD_STRING DK-3-spot
6763: PPUSH
6764: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6768: LD_EXP 28
6772: PPUSH
6773: LD_EXP 23
6777: PPUSH
6778: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6782: LD_EXP 23
6786: PPUSH
6787: LD_STRING DH-4-spot
6789: PPUSH
6790: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6794: LD_INT 10
6796: PPUSH
6797: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6801: LD_EXP 23
6805: PPUSH
6806: LD_EXP 27
6810: PPUSH
6811: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6815: LD_EXP 27
6819: PPUSH
6820: LD_STRING DA-4-spot
6822: PPUSH
6823: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6827: LD_EXP 28
6831: PPUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6841: LD_EXP 28
6845: PPUSH
6846: LD_STRING DK-4-spot
6848: PPUSH
6849: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_EXP 28
6862: PPUSH
6863: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6867: LD_EXP 27
6871: PPUSH
6872: LD_STRING DA-5-spot
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-5-spot
6886: PPUSH
6887: CALL_OW 88
// if pepAmount = 1 then
6891: LD_VAR 0 2
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: IFFALSE 6913
// Say ( Heike , DH-5-spot-f ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_STRING DH-5-spot-f
6908: PPUSH
6909: CALL_OW 88
// if pepAmount < 3 then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 3
6920: LESS
6921: IFFALSE 6937
// Say ( Aviradze , DA-6-spot-f ) else
6923: LD_EXP 27
6927: PPUSH
6928: LD_STRING DA-6-spot-f
6930: PPUSH
6931: CALL_OW 88
6935: GO 6973
// if pepAmount < 4 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 4
6944: LESS
6945: IFFALSE 6961
// Say ( Aviradze , DA-6-spot-c ) else
6947: LD_EXP 27
6951: PPUSH
6952: LD_STRING DA-6-spot-c
6954: PPUSH
6955: CALL_OW 88
6959: GO 6973
// Say ( Aviradze , DA-6-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot
6968: PPUSH
6969: CALL_OW 88
// if Kamil then
6973: LD_EXP 26
6977: IFFALSE 6991
// Say ( Kamil , DKam-6-spot ) ;
6979: LD_EXP 26
6983: PPUSH
6984: LD_STRING DKam-6-spot
6986: PPUSH
6987: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6991: LD_EXP 28
6995: PPUSH
6996: LD_STRING DK-6-spot
6998: PPUSH
6999: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7003: LD_EXP 27
7007: PPUSH
7008: LD_EXP 23
7012: PPUSH
7013: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7017: LD_EXP 27
7021: PPUSH
7022: LD_STRING DA-7-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-7-spot
7036: PPUSH
7037: CALL_OW 88
// if sciCounterKill >= 3 then
7041: LD_EXP 9
7045: PUSH
7046: LD_INT 3
7048: GREATEREQUAL
7049: IFFALSE 7075
// begin Say ( Heike , DH-7-spot-a ) ;
7051: LD_EXP 23
7055: PPUSH
7056: LD_STRING DH-7-spot-a
7058: PPUSH
7059: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7063: LD_EXP 27
7067: PPUSH
7068: LD_STRING DA-8-spot-a
7070: PPUSH
7071: CALL_OW 88
// end ; InGameOff ;
7075: CALL_OW 9
// if sciCounterKill < 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: LESS
7087: IFFALSE 7146
// begin SetSide ( Kaia , 2 ) ;
7089: LD_EXP 28
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 235
// ComFree ( Kaia ) ;
7101: LD_EXP 28
7105: PPUSH
7106: CALL_OW 139
// if Kamil then
7110: LD_EXP 26
7114: IFFALSE 7137
// begin ComHold ( Kamil ) ;
7116: LD_EXP 26
7120: PPUSH
7121: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_INT 5
7132: PPUSH
7133: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7137: LD_STRING OSci
7139: PPUSH
7140: CALL_OW 337
// end else
7144: GO 7208
// begin aviradzeQuestDone := true ;
7146: LD_ADDR_EXP 8
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// attackDeltaAllowed := true ;
7154: LD_ADDR_EXP 14
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7162: LD_STRING ODelta2
7164: PPUSH
7165: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: FOR_IN
7190: IFFALSE 7206
// SetSide ( i , 2 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: CALL_OW 235
7204: GO 7189
7206: POP
7207: POP
// end ; end ;
7208: PPOPN 2
7210: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7211: LD_EXP 10
7215: PUSH
7216: LD_EXP 8
7220: NOT
7221: AND
7222: IFFALSE 7239
7224: GO 7226
7226: DISABLE
// SayRadio ( Lynch , DDelta-02-Alarm-1 ) ;
7227: LD_EXP 20
7231: PPUSH
7232: LD_STRING DDelta-02-Alarm-1
7234: PPUSH
7235: CALL_OW 94
7239: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7240: LD_EXP 7
7244: NOT
7245: PUSH
7246: LD_EXP 22
7250: PPUSH
7251: LD_EXP 23
7255: PPUSH
7256: CALL_OW 74
7260: PPUSH
7261: LD_EXP 23
7265: PPUSH
7266: CALL_OW 296
7270: PUSH
7271: LD_INT 8
7273: LESS
7274: AND
7275: PUSH
7276: LD_INT 2
7278: PPUSH
7279: LD_EXP 22
7283: PPUSH
7284: LD_EXP 23
7288: PPUSH
7289: CALL_OW 74
7293: PPUSH
7294: CALL_OW 292
7298: AND
7299: PUSH
7300: LD_INT 22
7302: PUSH
7303: LD_INT 2
7305: PUSH
7306: EMPTY
7307: LIST
7308: LIST
7309: PUSH
7310: LD_INT 21
7312: PUSH
7313: LD_INT 1
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PPUSH
7324: CALL_OW 69
7328: PUSH
7329: LD_INT 1
7331: GREATER
7332: AND
7333: PUSH
7334: LD_EXP 4
7338: NOT
7339: AND
7340: IFFALSE 7384
7342: GO 7344
7344: DISABLE
// begin sciSpotted := true ;
7345: LD_ADDR_EXP 7
7349: PUSH
7350: LD_INT 1
7352: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7353: LD_EXP 22
7357: PPUSH
7358: LD_EXP 23
7362: PPUSH
7363: CALL_OW 74
7367: PPUSH
7368: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7372: LD_EXP 23
7376: PPUSH
7377: LD_STRING DH-1-sci
7379: PPUSH
7380: CALL_OW 88
// end ;
7384: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7385: LD_EXP 4
7389: PUSH
7390: LD_EXP 7
7394: NOT
7395: AND
7396: PUSH
7397: LD_INT 2
7399: PPUSH
7400: LD_EXP 22
7404: PPUSH
7405: LD_EXP 23
7409: PPUSH
7410: CALL_OW 74
7414: PPUSH
7415: CALL_OW 292
7419: AND
7420: PUSH
7421: LD_INT 22
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 21
7433: PUSH
7434: LD_INT 1
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PPUSH
7445: CALL_OW 69
7449: PUSH
7450: LD_INT 1
7452: GREATER
7453: AND
7454: PUSH
7455: LD_EXP 4
7459: AND
7460: PUSH
7461: LD_EXP 8
7465: NOT
7466: AND
7467: IFFALSE 7608
7469: GO 7471
7471: DISABLE
7472: LD_INT 0
7474: PPUSH
// begin sciSpotted := true ;
7475: LD_ADDR_EXP 7
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7483: LD_ADDR_VAR 0 1
7487: PUSH
7488: LD_EXP 22
7492: PPUSH
7493: LD_EXP 23
7497: PPUSH
7498: CALL_OW 74
7502: ST_TO_ADDR
// DialogueOn ;
7503: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 250
7516: PPUSH
7517: LD_VAR 0 1
7521: PPUSH
7522: CALL_OW 251
7526: PPUSH
7527: LD_INT 2
7529: PPUSH
7530: LD_INT 3
7532: NEG
7533: PPUSH
7534: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7538: LD_VAR 0 1
7542: PPUSH
7543: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7547: LD_EXP 23
7551: PPUSH
7552: LD_STRING DH-1-sci-a
7554: PPUSH
7555: CALL_OW 88
// if Mike then
7559: LD_EXP 25
7563: IFFALSE 7577
// Say ( Mike , DM-1-sci-a ) ;
7565: LD_EXP 25
7569: PPUSH
7570: LD_STRING DM-1-sci-a
7572: PPUSH
7573: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7577: LD_VAR 0 1
7581: PPUSH
7582: CALL_OW 250
7586: PPUSH
7587: LD_VAR 0 1
7591: PPUSH
7592: CALL_OW 251
7596: PPUSH
7597: LD_INT 2
7599: PPUSH
7600: CALL_OW 331
// DialogueOff ;
7604: CALL_OW 7
// end ;
7608: PPOPN 1
7610: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7611: LD_EXP 10
7615: PUSH
7616: LD_EXP 19
7620: PPUSH
7621: CALL_OW 256
7625: PUSH
7626: LD_INT 1000
7628: LESS
7629: PUSH
7630: LD_INT 3
7632: PPUSH
7633: CALL_OW 256
7637: PUSH
7638: LD_INT 999
7640: LESS
7641: OR
7642: AND
7643: IFFALSE 7899
7645: GO 7647
7647: DISABLE
7648: LD_INT 0
7650: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7651: LD_ADDR_VAR 0 1
7655: PUSH
7656: LD_INT 22
7658: PUSH
7659: LD_INT 1
7661: PUSH
7662: EMPTY
7663: LIST
7664: LIST
7665: PUSH
7666: LD_INT 21
7668: PUSH
7669: LD_INT 2
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: PUSH
7676: LD_INT 58
7678: PUSH
7679: EMPTY
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: PPUSH
7687: CALL_OW 69
7691: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7692: LD_VAR 0 1
7696: PUSH
7697: LD_EXP 19
7701: PPUSH
7702: CALL_OW 302
7706: AND
7707: IFFALSE 7749
// begin if IsInUnit ( Gladstone ) then
7709: LD_EXP 19
7713: PPUSH
7714: CALL_OW 310
7718: IFFALSE 7729
// ComExitBuilding ( Gladstone ) ;
7720: LD_EXP 19
7724: PPUSH
7725: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7729: LD_EXP 19
7733: PPUSH
7734: LD_VAR 0 1
7738: PUSH
7739: LD_INT 1
7741: ARRAY
7742: PPUSH
7743: CALL_OW 180
// end else
7747: GO 7769
// if IsInUnit ( Gladstone ) then
7749: LD_EXP 19
7753: PPUSH
7754: CALL_OW 310
7758: IFFALSE 7769
// ComExitBuilding ( Gladstone ) ;
7760: LD_EXP 19
7764: PPUSH
7765: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7769: LD_EXP 19
7773: PPUSH
7774: LD_INT 27
7776: PPUSH
7777: LD_INT 51
7779: PPUSH
7780: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7784: LD_EXP 19
7788: PPUSH
7789: LD_STRING D8-Glad-2
7791: PPUSH
7792: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7796: LD_INT 35
7798: PPUSH
7799: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7803: LD_EXP 19
7807: PPUSH
7808: LD_INT 27
7810: PPUSH
7811: LD_INT 51
7813: PPUSH
7814: CALL_OW 307
7818: PUSH
7819: LD_EXP 19
7823: PPUSH
7824: CALL_OW 310
7828: PPUSH
7829: LD_INT 27
7831: PPUSH
7832: LD_INT 51
7834: PPUSH
7835: CALL_OW 307
7839: OR
7840: PUSH
7841: LD_EXP 19
7845: PPUSH
7846: CALL_OW 301
7850: OR
7851: IFFALSE 7796
// if IsDead ( Gladstone ) then
7853: LD_EXP 19
7857: PPUSH
7858: CALL_OW 301
7862: IFFALSE 7866
// exit ;
7864: GO 7899
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7866: LD_INT 27
7868: PPUSH
7869: LD_INT 51
7871: PPUSH
7872: CALL_OW 428
7876: PPUSH
7877: CALL_OW 64
// gladstoneEscaped := true ;
7881: LD_ADDR_EXP 12
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7889: LD_INT 1
7891: PPUSH
7892: LD_STRING 02_GladstoneEscaped
7894: PPUSH
7895: CALL_OW 39
// end ;
7899: PPOPN 1
7901: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7902: LD_EXP 4
7906: PUSH
7907: LD_EXP 9
7911: PUSH
7912: LD_INT 3
7914: GREATEREQUAL
7915: PUSH
7916: LD_EXP 22
7920: NOT
7921: OR
7922: AND
7923: PUSH
7924: LD_EXP 8
7928: NOT
7929: AND
7930: IFFALSE 7973
7932: GO 7934
7934: DISABLE
// begin aviradzeQuestDone := true ;
7935: LD_ADDR_EXP 8
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7943: LD_EXP 23
7947: PPUSH
7948: LD_STRING DH-1-quest-done
7950: PPUSH
7951: CALL_OW 88
// if Givi then
7955: LD_EXP 24
7959: IFFALSE 7973
// Say ( Givi , DG-1-quest-done ) ;
7961: LD_EXP 24
7965: PPUSH
7966: LD_STRING DG-1-quest-done
7968: PPUSH
7969: CALL_OW 88
// end ;
7973: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
7974: LD_INT 11
7976: PPUSH
7977: LD_INT 22
7979: PUSH
7980: LD_INT 2
7982: PUSH
7983: EMPTY
7984: LIST
7985: LIST
7986: PPUSH
7987: CALL_OW 70
7991: PUSH
7992: LD_INT 1
7994: GREATER
7995: PUSH
7996: LD_INT 1
7998: PPUSH
7999: CALL_OW 255
8003: PUSH
8004: LD_INT 2
8006: EQUAL
8007: AND
8008: PUSH
8009: LD_EXP 25
8013: PPUSH
8014: CALL_OW 302
8018: AND
8019: PUSH
8020: LD_EXP 23
8024: PPUSH
8025: CALL_OW 302
8029: AND
8030: IFFALSE 8175
8032: GO 8034
8034: DISABLE
// begin DialogueOn ;
8035: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8039: LD_INT 47
8041: PPUSH
8042: LD_INT 19
8044: PPUSH
8045: LD_INT 2
8047: PPUSH
8048: LD_INT 6
8050: NEG
8051: PPUSH
8052: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8056: LD_INT 47
8058: PPUSH
8059: LD_INT 19
8061: PPUSH
8062: LD_INT 2
8064: PPUSH
8065: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8069: LD_INT 34
8071: PPUSH
8072: LD_INT 32
8074: PPUSH
8075: LD_INT 2
8077: PPUSH
8078: LD_INT 6
8080: NEG
8081: PPUSH
8082: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8086: LD_INT 34
8088: PPUSH
8089: LD_INT 32
8091: PPUSH
8092: LD_INT 2
8094: PPUSH
8095: CALL_OW 331
// Say ( Mike , DM-02-Prem-1 ) ;
8099: LD_EXP 25
8103: PPUSH
8104: LD_STRING DM-02-Prem-1
8106: PPUSH
8107: CALL_OW 88
// Say ( Heike , DH-02-Prem-2 ) ;
8111: LD_EXP 23
8115: PPUSH
8116: LD_STRING DH-02-Prem-2
8118: PPUSH
8119: CALL_OW 88
// Say ( Heike , DH-02-Prem-3 ) ;
8123: LD_EXP 23
8127: PPUSH
8128: LD_STRING DH-02-Prem-3
8130: PPUSH
8131: CALL_OW 88
// Say ( Mike , DM-02-Prem-4 ) ;
8135: LD_EXP 25
8139: PPUSH
8140: LD_STRING DM-02-Prem-4
8142: PPUSH
8143: CALL_OW 88
// Say ( Mike , DM-02-Prem-5 ) ;
8147: LD_EXP 25
8151: PPUSH
8152: LD_STRING DM-02-Prem-5
8154: PPUSH
8155: CALL_OW 88
// Say ( Givi , DG-02-Prem-6 ) ;
8159: LD_EXP 24
8163: PPUSH
8164: LD_STRING DG-02-Prem-6
8166: PPUSH
8167: CALL_OW 88
// DialogueOff ;
8171: CALL_OW 7
// end ;
8175: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8176: LD_INT 5
8178: PPUSH
8179: LD_EXP 23
8183: PPUSH
8184: CALL_OW 292
8188: PUSH
8189: LD_EXP 23
8193: PPUSH
8194: LD_EXP 27
8198: PPUSH
8199: CALL_OW 296
8203: PUSH
8204: LD_INT 6
8206: LESS
8207: AND
8208: PUSH
8209: LD_EXP 8
8213: AND
8214: PUSH
8215: LD_EXP 14
8219: NOT
8220: AND
8221: IFFALSE 8359
8223: GO 8225
8225: DISABLE
8226: LD_INT 0
8228: PPUSH
// begin attackDeltaAllowed := true ;
8229: LD_ADDR_EXP 14
8233: PUSH
8234: LD_INT 1
8236: ST_TO_ADDR
// InGameOn ;
8237: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8241: LD_EXP 23
8245: PPUSH
8246: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8250: LD_INT 10
8252: PPUSH
8253: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8257: LD_EXP 27
8261: PPUSH
8262: LD_EXP 23
8266: PPUSH
8267: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8271: LD_EXP 23
8275: PPUSH
8276: LD_EXP 27
8280: PPUSH
8281: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8285: LD_EXP 23
8289: PPUSH
8290: LD_STRING DH-1-return
8292: PPUSH
8293: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8297: LD_EXP 27
8301: PPUSH
8302: LD_STRING DA-1-return
8304: PPUSH
8305: CALL_OW 88
// InGameOff ;
8309: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8313: LD_STRING ODelta
8315: PPUSH
8316: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8320: LD_ADDR_VAR 0 1
8324: PUSH
8325: LD_INT 22
8327: PUSH
8328: LD_INT 5
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PPUSH
8335: CALL_OW 69
8339: PUSH
8340: FOR_IN
8341: IFFALSE 8357
// SetSide ( i , 2 ) ;
8343: LD_VAR 0 1
8347: PPUSH
8348: LD_INT 2
8350: PPUSH
8351: CALL_OW 235
8355: GO 8340
8357: POP
8358: POP
// end ;
8359: PPOPN 1
8361: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8362: LD_EXP 10
8366: PUSH
8367: LD_EXP 14
8371: NOT
8372: AND
8373: IFFALSE 8386
8375: GO 8377
8377: DISABLE
// spottedBeforeRadio := true ;
8378: LD_ADDR_EXP 6
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
8386: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8387: LD_EXP 14
8391: PUSH
8392: LD_EXP 30
8396: PPUSH
8397: CALL_OW 302
8401: AND
8402: PUSH
8403: LD_INT 1
8405: PPUSH
8406: CALL_OW 255
8410: PUSH
8411: LD_INT 1
8413: EQUAL
8414: AND
8415: PUSH
8416: LD_EXP 20
8420: PPUSH
8421: CALL_OW 302
8425: AND
8426: PUSH
8427: LD_EXP 10
8431: NOT
8432: AND
8433: IFFALSE 9661
8435: GO 8437
8437: DISABLE
8438: LD_INT 0
8440: PPUSH
8441: PPUSH
8442: PPUSH
// begin trap := 0 ;
8443: LD_ADDR_EXP 17
8447: PUSH
8448: LD_INT 0
8450: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8451: LD_INT 420
8453: PPUSH
8454: CALL_OW 67
// DialogueOn ;
8458: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8462: LD_EXP 30
8466: PPUSH
8467: LD_STRING DMar-1-radio
8469: PPUSH
8470: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8474: LD_EXP 23
8478: PPUSH
8479: LD_STRING DH-1-radio
8481: PPUSH
8482: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8486: LD_EXP 30
8490: PPUSH
8491: LD_STRING DMar-2-radio
8493: PPUSH
8494: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8498: LD_EXP 23
8502: PPUSH
8503: LD_STRING DH-2-radio
8505: PPUSH
8506: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8510: LD_EXP 26
8514: PPUSH
8515: CALL_OW 302
8519: PUSH
8520: LD_EXP 29
8524: PPUSH
8525: CALL_OW 302
8529: OR
8530: IFFALSE 9661
// begin case Query ( Q1Trap ) of 1 :
8532: LD_STRING Q1Trap
8534: PPUSH
8535: CALL_OW 97
8539: PUSH
8540: LD_INT 1
8542: DOUBLE
8543: EQUAL
8544: IFTRUE 8548
8546: GO 8754
8548: POP
// begin if IsOk ( Kamil ) then
8549: LD_EXP 26
8553: PPUSH
8554: CALL_OW 302
8558: IFFALSE 8637
// begin Say ( Kamil , DKam-2-radio ) ;
8560: LD_EXP 26
8564: PPUSH
8565: LD_STRING DKam-2-radio
8567: PPUSH
8568: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8572: LD_EXP 26
8576: PPUSH
8577: LD_STRING DKam-3-radio
8579: PPUSH
8580: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8584: LD_EXP 20
8588: PPUSH
8589: LD_STRING DDelta-3-radio
8591: PPUSH
8592: CALL_OW 94
// dwait ( 0 0$01 ) ;
8596: LD_INT 35
8598: PPUSH
8599: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8603: LD_EXP 23
8607: PPUSH
8608: LD_STRING DH-3-radio
8610: PPUSH
8611: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8615: LD_EXP 26
8619: PPUSH
8620: LD_STRING DKam-4-radio
8622: PPUSH
8623: CALL_OW 88
// trap := 1 ;
8627: LD_ADDR_EXP 17
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// end else
8635: GO 8748
// begin Say ( Sophia , DS-1-radio ) ;
8637: LD_EXP 29
8641: PPUSH
8642: LD_STRING DS-1-radio
8644: PPUSH
8645: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8649: LD_EXP 29
8653: PPUSH
8654: LD_STRING DS-2-radio
8656: PPUSH
8657: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8661: LD_EXP 20
8665: PPUSH
8666: LD_STRING DDelta-2-radio-s
8668: PPUSH
8669: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8673: LD_EXP 29
8677: PPUSH
8678: LD_STRING DS-3-radio
8680: PPUSH
8681: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8685: LD_EXP 20
8689: PPUSH
8690: LD_STRING DDelta-3-radio-s
8692: PPUSH
8693: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8697: LD_EXP 29
8701: PPUSH
8702: LD_STRING DS-4-radio-s
8704: PPUSH
8705: CALL_OW 88
// SayRadio ( Lynch , DDelta-4-radio-s ) ;
8709: LD_EXP 20
8713: PPUSH
8714: LD_STRING DDelta-4-radio-s
8716: PPUSH
8717: CALL_OW 94
// dwait ( 0 0$01 ) ;
8721: LD_INT 35
8723: PPUSH
8724: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8728: LD_EXP 23
8732: PPUSH
8733: LD_STRING DH-1-trap
8735: PPUSH
8736: CALL_OW 88
// trap := 0 ;
8740: LD_ADDR_EXP 17
8744: PUSH
8745: LD_INT 0
8747: ST_TO_ADDR
// end ; DialogueOff ;
8748: CALL_OW 7
// end ; 2 :
8752: GO 8772
8754: LD_INT 2
8756: DOUBLE
8757: EQUAL
8758: IFTRUE 8762
8760: GO 8771
8762: POP
// begin DialogueOff ;
8763: CALL_OW 7
// exit ;
8767: GO 9661
// end ; end ;
8769: GO 8772
8771: POP
// if trap = 1 then
8772: LD_EXP 17
8776: PUSH
8777: LD_INT 1
8779: EQUAL
8780: IFFALSE 9232
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8782: LD_INT 64
8784: PPUSH
8785: LD_INT 32
8787: PPUSH
8788: LD_INT 2
8790: PPUSH
8791: LD_INT 8
8793: PPUSH
8794: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8798: LD_INT 64
8800: PPUSH
8801: LD_INT 32
8803: PPUSH
8804: CALL_OW 84
// tmp := [ ] ;
8808: LD_ADDR_VAR 0 3
8812: PUSH
8813: EMPTY
8814: ST_TO_ADDR
// k := 3 ;
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 3
8822: ST_TO_ADDR
// if usForces < 3 then
8823: LD_EXP 21
8827: PUSH
8828: LD_INT 3
8830: LESS
8831: IFFALSE 8843
// k := usForces ;
8833: LD_ADDR_VAR 0 2
8837: PUSH
8838: LD_EXP 21
8842: ST_TO_ADDR
// for i := 1 to k do
8843: LD_ADDR_VAR 0 1
8847: PUSH
8848: DOUBLE
8849: LD_INT 1
8851: DEC
8852: ST_TO_ADDR
8853: LD_VAR 0 2
8857: PUSH
8858: FOR_TO
8859: IFFALSE 8914
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8861: LD_ADDR_VAR 0 3
8865: PUSH
8866: LD_VAR 0 3
8870: PPUSH
8871: LD_VAR 0 3
8875: PUSH
8876: LD_INT 1
8878: PLUS
8879: PPUSH
8880: LD_EXP 21
8884: PUSH
8885: LD_INT 1
8887: ARRAY
8888: PPUSH
8889: CALL_OW 1
8893: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8894: LD_ADDR_EXP 21
8898: PUSH
8899: LD_EXP 21
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: CALL_OW 3
8911: ST_TO_ADDR
// end ;
8912: GO 8858
8914: POP
8915: POP
// usPatrol := tmp ;
8916: LD_ADDR_EXP 16
8920: PUSH
8921: LD_VAR 0 3
8925: ST_TO_ADDR
// for i in tmp do
8926: LD_ADDR_VAR 0 1
8930: PUSH
8931: LD_VAR 0 3
8935: PUSH
8936: FOR_IN
8937: IFFALSE 9067
// begin if IsInUnit ( i ) then
8939: LD_VAR 0 1
8943: PPUSH
8944: CALL_OW 310
8948: IFFALSE 8959
// ComExitBuilding ( i ) ;
8950: LD_VAR 0 1
8954: PPUSH
8955: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8959: LD_VAR 0 1
8963: PPUSH
8964: LD_INT 63
8966: PPUSH
8967: LD_INT 31
8969: PPUSH
8970: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8974: LD_VAR 0 1
8978: PPUSH
8979: LD_INT 70
8981: PPUSH
8982: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8986: LD_VAR 0 1
8990: PPUSH
8991: LD_INT 103
8993: PPUSH
8994: LD_INT 43
8996: PPUSH
8997: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9001: LD_VAR 0 1
9005: PPUSH
9006: LD_INT 105
9008: PPUSH
9009: CALL_OW 202
// if Difficulty > 1 then
9013: LD_OWVAR 67
9017: PUSH
9018: LD_INT 1
9020: GREATER
9021: IFFALSE 9038
// AddComAgressiveMove ( i , 114 , 69 ) ;
9023: LD_VAR 0 1
9027: PPUSH
9028: LD_INT 114
9030: PPUSH
9031: LD_INT 69
9033: PPUSH
9034: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9038: LD_VAR 0 1
9042: PPUSH
9043: LD_INT 105
9045: PPUSH
9046: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9050: LD_VAR 0 1
9054: PPUSH
9055: LD_INT 42
9057: PPUSH
9058: LD_INT 20
9060: PPUSH
9061: CALL_OW 174
// end ;
9065: GO 8936
9067: POP
9068: POP
// wait ( 0 0$8 ) ;
9069: LD_INT 280
9071: PPUSH
9072: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9076: LD_INT 64
9078: PPUSH
9079: LD_INT 32
9081: PPUSH
9082: LD_INT 2
9084: PPUSH
9085: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9089: LD_INT 35
9091: PPUSH
9092: CALL_OW 67
// for i in tmp do
9096: LD_ADDR_VAR 0 1
9100: PUSH
9101: LD_VAR 0 3
9105: PUSH
9106: FOR_IN
9107: IFFALSE 9138
// if IsDead ( i ) then
9109: LD_VAR 0 1
9113: PPUSH
9114: CALL_OW 301
9118: IFFALSE 9136
// tmp := tmp diff i ;
9120: LD_ADDR_VAR 0 3
9124: PUSH
9125: LD_VAR 0 3
9129: PUSH
9130: LD_VAR 0 1
9134: DIFF
9135: ST_TO_ADDR
9136: GO 9106
9138: POP
9139: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9140: LD_VAR 0 3
9144: NOT
9145: PUSH
9146: LD_VAR 0 3
9150: PPUSH
9151: LD_INT 95
9153: PUSH
9154: LD_INT 7
9156: PUSH
9157: EMPTY
9158: LIST
9159: LIST
9160: PUSH
9161: LD_INT 3
9163: PUSH
9164: LD_INT 60
9166: PUSH
9167: EMPTY
9168: LIST
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: PPUSH
9178: CALL_OW 72
9182: PUSH
9183: LD_VAR 0 3
9187: EQUAL
9188: OR
9189: IFFALSE 9089
// if tmp then
9191: LD_VAR 0 3
9195: IFFALSE 9222
// begin usPatrol := [ ] ;
9197: LD_ADDR_EXP 16
9201: PUSH
9202: EMPTY
9203: ST_TO_ADDR
// usForces := usForces union tmp ;
9204: LD_ADDR_EXP 21
9208: PUSH
9209: LD_EXP 21
9213: PUSH
9214: LD_VAR 0 3
9218: UNION
9219: ST_TO_ADDR
// end else
9220: GO 9230
// trickyMove := true ;
9222: LD_ADDR_EXP 15
9226: PUSH
9227: LD_INT 1
9229: ST_TO_ADDR
// end else
9230: GO 9661
// begin tmp := [ ] ;
9232: LD_ADDR_VAR 0 3
9236: PUSH
9237: EMPTY
9238: ST_TO_ADDR
// k := 4 ;
9239: LD_ADDR_VAR 0 2
9243: PUSH
9244: LD_INT 4
9246: ST_TO_ADDR
// if usForces < 4 then
9247: LD_EXP 21
9251: PUSH
9252: LD_INT 4
9254: LESS
9255: IFFALSE 9267
// k := usForces ;
9257: LD_ADDR_VAR 0 2
9261: PUSH
9262: LD_EXP 21
9266: ST_TO_ADDR
// for i := 1 to k do
9267: LD_ADDR_VAR 0 1
9271: PUSH
9272: DOUBLE
9273: LD_INT 1
9275: DEC
9276: ST_TO_ADDR
9277: LD_VAR 0 2
9281: PUSH
9282: FOR_TO
9283: IFFALSE 9338
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9285: LD_ADDR_VAR 0 3
9289: PUSH
9290: LD_VAR 0 3
9294: PPUSH
9295: LD_VAR 0 3
9299: PUSH
9300: LD_INT 1
9302: PLUS
9303: PPUSH
9304: LD_EXP 21
9308: PUSH
9309: LD_INT 1
9311: ARRAY
9312: PPUSH
9313: CALL_OW 1
9317: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9318: LD_ADDR_EXP 21
9322: PUSH
9323: LD_EXP 21
9327: PPUSH
9328: LD_INT 1
9330: PPUSH
9331: CALL_OW 3
9335: ST_TO_ADDR
// end ;
9336: GO 9282
9338: POP
9339: POP
// if Lynch then
9340: LD_EXP 20
9344: IFFALSE 9362
// tmp := tmp ^ Lynch ;
9346: LD_ADDR_VAR 0 3
9350: PUSH
9351: LD_VAR 0 3
9355: PUSH
9356: LD_EXP 20
9360: ADD
9361: ST_TO_ADDR
// usPatrol := tmp ;
9362: LD_ADDR_EXP 16
9366: PUSH
9367: LD_VAR 0 3
9371: ST_TO_ADDR
// for i in tmp do
9372: LD_ADDR_VAR 0 1
9376: PUSH
9377: LD_VAR 0 3
9381: PUSH
9382: FOR_IN
9383: IFFALSE 9476
// begin if IsInUnit ( i ) then
9385: LD_VAR 0 1
9389: PPUSH
9390: CALL_OW 310
9394: IFFALSE 9405
// ComExitBuilding ( i ) ;
9396: LD_VAR 0 1
9400: PPUSH
9401: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9405: LD_VAR 0 1
9409: PPUSH
9410: LD_INT 69
9412: PPUSH
9413: LD_INT 15
9415: PPUSH
9416: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9420: LD_VAR 0 1
9424: PPUSH
9425: LD_INT 700
9427: PPUSH
9428: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9432: LD_VAR 0 1
9436: PPUSH
9437: LD_INT 55
9439: PPUSH
9440: LD_INT 43
9442: PPUSH
9443: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9447: LD_VAR 0 1
9451: PPUSH
9452: LD_INT 700
9454: PPUSH
9455: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9459: LD_VAR 0 1
9463: PPUSH
9464: LD_INT 42
9466: PPUSH
9467: LD_INT 20
9469: PPUSH
9470: CALL_OW 174
// end ;
9474: GO 9382
9476: POP
9477: POP
// repeat wait ( 0 0$1 ) ;
9478: LD_INT 35
9480: PPUSH
9481: CALL_OW 67
// for i in tmp do
9485: LD_ADDR_VAR 0 1
9489: PUSH
9490: LD_VAR 0 3
9494: PUSH
9495: FOR_IN
9496: IFFALSE 9527
// if IsDead ( i ) then
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 301
9507: IFFALSE 9525
// tmp := tmp diff i ;
9509: LD_ADDR_VAR 0 3
9513: PUSH
9514: LD_VAR 0 3
9518: PUSH
9519: LD_VAR 0 1
9523: DIFF
9524: ST_TO_ADDR
9525: GO 9495
9527: POP
9528: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9529: LD_VAR 0 3
9533: NOT
9534: PUSH
9535: LD_VAR 0 3
9539: PPUSH
9540: LD_INT 95
9542: PUSH
9543: LD_INT 7
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: PUSH
9550: LD_INT 3
9552: PUSH
9553: LD_INT 60
9555: PUSH
9556: EMPTY
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: PPUSH
9567: CALL_OW 72
9571: PUSH
9572: LD_VAR 0 3
9576: EQUAL
9577: OR
9578: IFFALSE 9478
// if not tmp then
9580: LD_VAR 0 3
9584: NOT
9585: IFFALSE 9597
// trickyMove := true else
9587: LD_ADDR_EXP 15
9591: PUSH
9592: LD_INT 1
9594: ST_TO_ADDR
9595: GO 9604
// usPatrol := [ ] ;
9597: LD_ADDR_EXP 16
9601: PUSH
9602: EMPTY
9603: ST_TO_ADDR
// if tmp diff Lynch then
9604: LD_VAR 0 3
9608: PUSH
9609: LD_EXP 20
9613: DIFF
9614: IFFALSE 9638
// usForces := usForces union ( tmp diff Lynch ) ;
9616: LD_ADDR_EXP 21
9620: PUSH
9621: LD_EXP 21
9625: PUSH
9626: LD_VAR 0 3
9630: PUSH
9631: LD_EXP 20
9635: DIFF
9636: UNION
9637: ST_TO_ADDR
// if IsOk ( Lynch ) then
9638: LD_EXP 20
9642: PPUSH
9643: CALL_OW 302
9647: IFFALSE 9661
// ComEnterUnit ( Lynch , Delta ) ;
9649: LD_EXP 20
9653: PPUSH
9654: LD_INT 1
9656: PPUSH
9657: CALL_OW 120
// end ; end ; end ;
9661: PPOPN 3
9663: END
// every 0 0$1 trigger trickyMove do
9664: LD_EXP 15
9668: IFFALSE 9680
9670: GO 9672
9672: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9673: LD_STRING ACH_TRAP
9675: PPUSH
9676: CALL_OW 543
9680: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9681: LD_INT 22
9683: PUSH
9684: LD_INT 2
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 23
9693: PUSH
9694: LD_INT 1
9696: PUSH
9697: EMPTY
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 21
9703: PUSH
9704: LD_INT 2
9706: PUSH
9707: EMPTY
9708: LIST
9709: LIST
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: PPUSH
9716: CALL_OW 69
9720: IFFALSE 9732
9722: GO 9724
9724: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9725: LD_STRING ACH_SCRAP
9727: PPUSH
9728: CALL_OW 543
9732: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9733: LD_EXP 16
9737: PPUSH
9738: LD_INT 101
9740: PUSH
9741: LD_INT 2
9743: PUSH
9744: EMPTY
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 72
9752: PUSH
9753: LD_INT 1
9755: PPUSH
9756: LD_EXP 23
9760: PPUSH
9761: CALL_OW 292
9765: AND
9766: IFFALSE 9899
9768: GO 9770
9770: DISABLE
// begin if not trap then
9771: LD_EXP 17
9775: NOT
9776: IFFALSE 9804
// begin Say ( Heike , DH-2-trap ) ;
9778: LD_EXP 23
9782: PPUSH
9783: LD_STRING DH-2-trap
9785: PPUSH
9786: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9790: LD_EXP 25
9794: PPUSH
9795: LD_STRING DM-2-trap
9797: PPUSH
9798: CALL_OW 88
// end else
9802: GO 9816
// begin Say ( Heike , DH-1-trap-a ) ;
9804: LD_EXP 23
9808: PPUSH
9809: LD_STRING DH-1-trap-a
9811: PPUSH
9812: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9816: LD_INT 35
9818: PPUSH
9819: CALL_OW 67
// until trickyMove ;
9823: LD_EXP 15
9827: IFFALSE 9816
// Say ( Heike , DH-3-trap ) ;
9829: LD_EXP 23
9833: PPUSH
9834: LD_STRING DH-3-trap
9836: PPUSH
9837: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9841: LD_EXP 24
9845: PPUSH
9846: CALL_OW 302
9850: PUSH
9851: LD_EXP 28
9855: PPUSH
9856: CALL_OW 302
9860: AND
9861: IFFALSE 9899
// begin Say ( Givi , DG-3-trap ) ;
9863: LD_EXP 24
9867: PPUSH
9868: LD_STRING DG-3-trap
9870: PPUSH
9871: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9875: LD_EXP 28
9879: PPUSH
9880: LD_STRING DK-3-trap
9882: PPUSH
9883: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9887: LD_EXP 24
9891: PPUSH
9892: LD_STRING DG-4-trap
9894: PPUSH
9895: CALL_OW 88
// end ; end ;
9899: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9900: LD_INT 1
9902: PPUSH
9903: CALL_OW 255
9907: PUSH
9908: LD_INT 2
9910: EQUAL
9911: PUSH
9912: LD_EXP 14
9916: AND
9917: IFFALSE 10076
9919: GO 9921
9921: DISABLE
9922: LD_INT 0
9924: PPUSH
9925: PPUSH
// begin if not IsOk ( Kaia ) then
9926: LD_EXP 28
9930: PPUSH
9931: CALL_OW 302
9935: NOT
9936: IFFALSE 9940
// exit ;
9938: GO 10076
// if tick < 5 5$00 then
9940: LD_OWVAR 1
9944: PUSH
9945: LD_INT 10500
9947: LESS
9948: IFFALSE 9957
// SetAchievement ( ACH_DELTA ) ;
9950: LD_STRING ACH_DELTA
9952: PPUSH
9953: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9957: LD_EXP 28
9961: PPUSH
9962: LD_STRING DK-1-capture
9964: PPUSH
9965: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9969: LD_EXP 23
9973: PPUSH
9974: LD_STRING DH-1-capture
9976: PPUSH
9977: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9981: LD_ADDR_VAR 0 2
9985: PUSH
9986: LD_INT 22
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PUSH
9996: LD_INT 25
9998: PUSH
9999: LD_INT 1
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PPUSH
10010: CALL_OW 69
10014: ST_TO_ADDR
// if not tmp then
10015: LD_VAR 0 2
10019: NOT
10020: IFFALSE 10024
// exit ;
10022: GO 10076
// for i in tmp do
10024: LD_ADDR_VAR 0 1
10028: PUSH
10029: LD_VAR 0 2
10033: PUSH
10034: FOR_IN
10035: IFFALSE 10074
// begin if IsInUnit ( i ) then
10037: LD_VAR 0 1
10041: PPUSH
10042: CALL_OW 310
10046: IFFALSE 10057
// ComExitBuilding ( i ) ;
10048: LD_VAR 0 1
10052: PPUSH
10053: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10057: LD_VAR 0 1
10061: PPUSH
10062: LD_INT 38
10064: PPUSH
10065: LD_INT 23
10067: PPUSH
10068: CALL_OW 174
// end ;
10072: GO 10034
10074: POP
10075: POP
// end ;
10076: PPOPN 2
10078: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10079: LD_INT 3
10081: PPUSH
10082: CALL_OW 255
10086: PUSH
10087: LD_INT 2
10089: EQUAL
10090: PUSH
10091: LD_EXP 14
10095: AND
10096: IFFALSE 10128
10098: GO 10100
10100: DISABLE
// begin DialogueOn ;
10101: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10105: LD_EXP 27
10109: PPUSH
10110: LD_STRING DA-1-capture
10112: PPUSH
10113: CALL_OW 88
// DialogueOff ;
10117: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10121: LD_STRING OTame
10123: PPUSH
10124: CALL_OW 337
// end ;
10128: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10129: LD_INT 1
10131: PPUSH
10132: LD_INT 2
10134: PPUSH
10135: CALL_OW 321
10139: PUSH
10140: LD_INT 2
10142: EQUAL
10143: PUSH
10144: LD_EXP 14
10148: AND
10149: IFFALSE 10300
10151: GO 10153
10153: DISABLE
// begin DialogueOn ;
10154: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10158: LD_EXP 27
10162: PPUSH
10163: LD_STRING DA-1-ape
10165: PPUSH
10166: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10170: LD_EXP 23
10174: PPUSH
10175: LD_STRING DH-1-ape
10177: PPUSH
10178: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10182: LD_EXP 27
10186: PPUSH
10187: LD_STRING DA-2-ape
10189: PPUSH
10190: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10194: LD_EXP 27
10198: PPUSH
10199: LD_STRING DA-3-ape
10201: PPUSH
10202: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10206: LD_EXP 23
10210: PPUSH
10211: LD_STRING DH-3-ape
10213: PPUSH
10214: CALL_OW 88
// DialogueOff ;
10218: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10222: LD_INT 22
10224: PUSH
10225: LD_INT 0
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 25
10234: PUSH
10235: LD_INT 12
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PPUSH
10246: CALL_OW 69
10250: PUSH
10251: LD_INT 0
10253: EQUAL
10254: IFFALSE 10266
// SpawnApeman ( forest , 2 ) ;
10256: LD_INT 1
10258: PPUSH
10259: LD_INT 2
10261: PPUSH
10262: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10266: LD_INT 35
10268: PPUSH
10269: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10273: LD_INT 25
10275: PUSH
10276: LD_INT 12
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PPUSH
10283: CALL_OW 69
10287: PUSH
10288: LD_INT 0
10290: EQUAL
10291: IFFALSE 10266
// YouLost ( Ape ) ;
10293: LD_STRING Ape
10295: PPUSH
10296: CALL_OW 104
// end ;
10300: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10301: LD_EXP 18
10305: PUSH
10306: LD_INT 3
10308: PUSH
10309: LD_INT 2
10311: PUSH
10312: LD_INT 2
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: LIST
10319: PUSH
10320: LD_OWVAR 67
10324: ARRAY
10325: GREATEREQUAL
10326: IFFALSE 10370
10328: GO 10330
10330: DISABLE
// begin DialogueOn ;
10331: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10335: LD_EXP 27
10339: PPUSH
10340: LD_STRING DA-1-failure
10342: PPUSH
10343: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10347: LD_EXP 27
10351: PPUSH
10352: LD_STRING DA-2-failure
10354: PPUSH
10355: CALL_OW 88
// YouLost ( Failure ) ;
10359: LD_STRING Failure
10361: PPUSH
10362: CALL_OW 104
// DialogueOff ;
10366: CALL_OW 7
// end ;
10370: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10371: LD_EXP 28
10375: PPUSH
10376: CALL_OW 256
10380: PUSH
10381: LD_INT 3
10383: LESS
10384: IFFALSE 10517
10386: GO 10388
10388: DISABLE
// begin DialogueOn ;
10389: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10393: LD_EXP 28
10397: PPUSH
10398: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10402: LD_EXP 28
10406: PPUSH
10407: LD_STRING DK-Kaiaout-1
10409: PPUSH
10410: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10414: LD_EXP 23
10418: PPUSH
10419: LD_STRING DH-Kaiaout-2
10421: PPUSH
10422: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10426: LD_EXP 24
10430: PPUSH
10431: LD_STRING DG-Kaiaout-3
10433: PPUSH
10434: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10438: LD_EXP 23
10442: PPUSH
10443: LD_STRING DH-Kaiaout-4
10445: PPUSH
10446: CALL_OW 88
// if Givi then
10450: LD_EXP 24
10454: IFFALSE 10504
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10456: LD_EXP 24
10460: PPUSH
10461: LD_STRING DG-Kaiaout-5
10463: PPUSH
10464: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10468: LD_EXP 23
10472: PPUSH
10473: LD_STRING DH-Kaiaout-6
10475: PPUSH
10476: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10480: LD_EXP 24
10484: PPUSH
10485: LD_STRING DG-Kaiaout-7
10487: PPUSH
10488: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10492: LD_EXP 23
10496: PPUSH
10497: LD_STRING DH-Kaiaout-8
10499: PPUSH
10500: CALL_OW 88
// end ; DialogueOff ;
10504: CALL_OW 7
// KillUnit ( Kaia ) ;
10508: LD_EXP 28
10512: PPUSH
10513: CALL_OW 66
// end ;
10517: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10518: LD_INT 22
10520: PUSH
10521: LD_INT 2
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 23
10530: PUSH
10531: LD_INT 0
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PPUSH
10542: CALL_OW 69
10546: PUSH
10547: LD_EXP 27
10551: PPUSH
10552: CALL_OW 302
10556: AND
10557: PUSH
10558: LD_EXP 27
10562: PPUSH
10563: CALL_OW 255
10567: PUSH
10568: LD_INT 2
10570: EQUAL
10571: AND
10572: IFFALSE 11513
10574: GO 10576
10576: DISABLE
10577: LD_INT 0
10579: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10580: LD_INT 22
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 25
10595: PUSH
10596: LD_INT 1
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 34
10605: PUSH
10606: LD_INT 4
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PPUSH
10622: CALL_OW 69
10626: IFFALSE 10721
// begin Query ( QEnemyInSight ) ;
10628: LD_STRING QEnemyInSight
10630: PPUSH
10631: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10635: LD_INT 35
10637: PPUSH
10638: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10642: LD_INT 22
10644: PUSH
10645: LD_INT 1
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 2
10654: PUSH
10655: LD_INT 25
10657: PUSH
10658: LD_INT 1
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 34
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL_OW 69
10688: NOT
10689: PUSH
10690: LD_INT 22
10692: PUSH
10693: LD_INT 2
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 23
10702: PUSH
10703: LD_INT 0
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PPUSH
10714: CALL_OW 69
10718: AND
10719: IFFALSE 10635
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10721: LD_ADDR_VAR 0 1
10725: PUSH
10726: LD_INT 22
10728: PUSH
10729: LD_INT 2
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 23
10738: PUSH
10739: LD_INT 0
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PPUSH
10750: CALL_OW 69
10754: ST_TO_ADDR
// InGameOn ;
10755: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10759: LD_VAR 0 1
10763: PPUSH
10764: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10768: LD_VAR 0 1
10772: PPUSH
10773: LD_EXP 27
10777: PPUSH
10778: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10782: LD_EXP 27
10786: PPUSH
10787: LD_VAR 0 1
10791: PPUSH
10792: CALL_OW 119
// wait ( 0 0$1 ) ;
10796: LD_INT 35
10798: PPUSH
10799: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10803: LD_EXP 27
10807: PPUSH
10808: LD_STRING DA-1-tame-a
10810: PPUSH
10811: CALL_OW 88
// if IsOk ( Mike ) then
10815: LD_EXP 25
10819: PPUSH
10820: CALL_OW 302
10824: IFFALSE 10862
// begin Say ( Mike , DM-1-tame-a ) ;
10826: LD_EXP 25
10830: PPUSH
10831: LD_STRING DM-1-tame-a
10833: PPUSH
10834: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10838: LD_EXP 29
10842: PPUSH
10843: LD_STRING DS-1-tame-a
10845: PPUSH
10846: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10850: LD_EXP 25
10854: PPUSH
10855: LD_STRING DM-2-tame-a
10857: PPUSH
10858: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10862: LD_INT 105
10864: PPUSH
10865: CALL_OW 67
// PrepareFarmer ;
10869: CALL 12188 0 0
// CenterOnUnits ( Farmer ) ;
10873: LD_EXP 31
10877: PPUSH
10878: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10882: LD_EXP 31
10886: PPUSH
10887: LD_INT 105
10889: PPUSH
10890: LD_INT 59
10892: PPUSH
10893: CALL_OW 111
// AddComHold ( Farmer ) ;
10897: LD_EXP 31
10901: PPUSH
10902: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10906: LD_EXP 31
10910: PPUSH
10911: LD_STRING DF-1-end
10913: PPUSH
10914: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10918: LD_EXP 27
10922: PPUSH
10923: LD_STRING DA-1-end
10925: PPUSH
10926: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10930: LD_EXP 31
10934: PPUSH
10935: LD_STRING DF-2-end
10937: PPUSH
10938: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10942: LD_EXP 27
10946: PPUSH
10947: LD_STRING DA-2-end
10949: PPUSH
10950: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10954: LD_EXP 31
10958: PPUSH
10959: LD_STRING DF-3-end
10961: PPUSH
10962: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10966: LD_EXP 23
10970: PPUSH
10971: LD_STRING DH-3-end
10973: PPUSH
10974: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10978: LD_EXP 31
10982: PPUSH
10983: LD_STRING DF-4-end
10985: PPUSH
10986: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10990: LD_OWVAR 1
10994: PUSH
10995: LD_INT 52500
10997: PUSH
10998: LD_INT 47250
11000: PUSH
11001: LD_INT 42000
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_OWVAR 67
11013: ARRAY
11014: LESSEQUAL
11015: IFFALSE 11029
// AddMedal ( med1 , 1 ) else
11017: LD_STRING med1
11019: PPUSH
11020: LD_INT 1
11022: PPUSH
11023: CALL_OW 101
11027: GO 11040
// AddMedal ( med1 , - 1 ) ;
11029: LD_STRING med1
11031: PPUSH
11032: LD_INT 1
11034: NEG
11035: PPUSH
11036: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11040: LD_INT 22
11042: PUSH
11043: LD_INT 1
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 25
11052: PUSH
11053: LD_INT 4
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PPUSH
11064: CALL_OW 69
11068: PUSH
11069: LD_INT 0
11071: EQUAL
11072: PUSH
11073: LD_EXP 12
11077: NOT
11078: AND
11079: IFFALSE 11093
// AddMedal ( med2 , 1 ) else
11081: LD_STRING med2
11083: PPUSH
11084: LD_INT 1
11086: PPUSH
11087: CALL_OW 101
11091: GO 11104
// AddMedal ( med2 , - 1 ) ;
11093: LD_STRING med2
11095: PPUSH
11096: LD_INT 1
11098: NEG
11099: PPUSH
11100: CALL_OW 101
// if trickyMove then
11104: LD_EXP 15
11108: IFFALSE 11122
// AddMedal ( med3 , 1 ) else
11110: LD_STRING med3
11112: PPUSH
11113: LD_INT 1
11115: PPUSH
11116: CALL_OW 101
11120: GO 11152
// if spottedBeforeRadio then
11122: LD_EXP 6
11126: IFFALSE 11141
// AddMedal ( med3 , - 2 ) else
11128: LD_STRING med3
11130: PPUSH
11131: LD_INT 2
11133: NEG
11134: PPUSH
11135: CALL_OW 101
11139: GO 11152
// AddMedal ( med3 , - 1 ) ;
11141: LD_STRING med3
11143: PPUSH
11144: LD_INT 1
11146: NEG
11147: PPUSH
11148: CALL_OW 101
// GiveMedals ( MAIN ) ;
11152: LD_STRING MAIN
11154: PPUSH
11155: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11159: LD_VAR 0 1
11163: PPUSH
11164: LD_STRING 02_ape
11166: PPUSH
11167: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11171: LD_ADDR_VAR 0 1
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 2
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 23
11188: PUSH
11189: LD_INT 2
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 21
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: EMPTY
11207: LIST
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 69
11215: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11216: LD_VAR 0 1
11220: PPUSH
11221: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11225: LD_EXP 23
11229: PPUSH
11230: LD_STRING 02_Heike
11232: PPUSH
11233: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11237: LD_EXP 27
11241: PPUSH
11242: LD_STRING 02_Aviradze
11244: PPUSH
11245: CALL_OW 38
// if Givi then
11249: LD_EXP 24
11253: IFFALSE 11267
// SaveCharacters ( Givi , 02_Givi ) ;
11255: LD_EXP 24
11259: PPUSH
11260: LD_STRING 02_Givi
11262: PPUSH
11263: CALL_OW 38
// if Mike then
11267: LD_EXP 25
11271: IFFALSE 11285
// SaveCharacters ( Mike , 02_Mike ) ;
11273: LD_EXP 25
11277: PPUSH
11278: LD_STRING 02_Mike
11280: PPUSH
11281: CALL_OW 38
// if Kamil then
11285: LD_EXP 26
11289: IFFALSE 11303
// SaveCharacters ( Kamil , 02_Kamil ) ;
11291: LD_EXP 26
11295: PPUSH
11296: LD_STRING 02_Kamil
11298: PPUSH
11299: CALL_OW 38
// if Kaia then
11303: LD_EXP 28
11307: IFFALSE 11321
// SaveCharacters ( Kaia , 02_Kaia ) ;
11309: LD_EXP 28
11313: PPUSH
11314: LD_STRING 02_Kaia
11316: PPUSH
11317: CALL_OW 38
// if Sophia then
11321: LD_EXP 29
11325: IFFALSE 11339
// SaveCharacters ( Sophia , 02_Sophia ) ;
11327: LD_EXP 29
11331: PPUSH
11332: LD_STRING 02_Sophia
11334: PPUSH
11335: CALL_OW 38
// if Markov then
11339: LD_EXP 30
11343: IFFALSE 11357
// SaveCharacters ( Markov , 02_Markov ) ;
11345: LD_EXP 30
11349: PPUSH
11350: LD_STRING 02_Markov
11352: PPUSH
11353: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11357: LD_VAR 0 1
11361: PUSH
11362: LD_EXP 23
11366: PUSH
11367: LD_EXP 27
11371: PUSH
11372: LD_EXP 24
11376: PUSH
11377: LD_EXP 25
11381: PUSH
11382: LD_EXP 26
11386: PUSH
11387: LD_EXP 29
11391: PUSH
11392: LD_EXP 28
11396: PUSH
11397: LD_EXP 30
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: DIFF
11412: IFFALSE 11477
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11414: LD_VAR 0 1
11418: PUSH
11419: LD_EXP 23
11423: PUSH
11424: LD_EXP 27
11428: PUSH
11429: LD_EXP 24
11433: PUSH
11434: LD_EXP 25
11438: PUSH
11439: LD_EXP 26
11443: PUSH
11444: LD_EXP 29
11448: PUSH
11449: LD_EXP 28
11453: PUSH
11454: LD_EXP 30
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: DIFF
11469: PPUSH
11470: LD_STRING 02_others
11472: PPUSH
11473: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11477: LD_STRING enableBioCharacter(BIO_KRAY)
11479: PPUSH
11480: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11484: LD_STRING enableBioCharacter(BIO_AVIR)
11486: PPUSH
11487: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11491: LD_STRING enableBioCharacter(BIO_SOPH)
11493: PPUSH
11494: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11498: LD_STRING enableBioCharacter(BIO_KAMI)
11500: PPUSH
11501: CALL_OW 559
// YouWin ;
11505: CALL_OW 103
// InGameOff ;
11509: CALL_OW 9
// end ;
11513: PPOPN 1
11515: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11516: LD_OWVAR 1
11520: PUSH
11521: LD_EXP 13
11525: GREATER
11526: PUSH
11527: LD_EXP 4
11531: AND
11532: IFFALSE 11572
11534: GO 11536
11536: DISABLE
// begin InGameOn ;
11537: CALL_OW 8
// PrepareFarmer ;
11541: CALL 12188 0 0
// CenterNowOnUnits ( Farmer ) ;
11545: LD_EXP 31
11549: PPUSH
11550: CALL_OW 87
// wait ( 0 0$2 ) ;
11554: LD_INT 70
11556: PPUSH
11557: CALL_OW 67
// YouLost ( Farmer ) ;
11561: LD_STRING Farmer
11563: PPUSH
11564: CALL_OW 104
// InGameOff ;
11568: CALL_OW 9
// end ; end_of_file
11572: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11573: LD_INT 0
11575: PPUSH
11576: PPUSH
11577: PPUSH
// uc_side := 2 ;
11578: LD_ADDR_OWVAR 20
11582: PUSH
11583: LD_INT 2
11585: ST_TO_ADDR
// uc_nation := 2 ;
11586: LD_ADDR_OWVAR 21
11590: PUSH
11591: LD_INT 2
11593: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11594: LD_ADDR_EXP 23
11598: PUSH
11599: LD_STRING Heike
11601: PPUSH
11602: LD_EXP 1
11606: NOT
11607: PPUSH
11608: LD_EXP 2
11612: PPUSH
11613: CALL 30000 0 3
11617: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11618: LD_EXP 23
11622: PPUSH
11623: LD_INT 83
11625: PPUSH
11626: LD_INT 72
11628: PPUSH
11629: LD_INT 0
11631: PPUSH
11632: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11636: LD_ADDR_EXP 24
11640: PUSH
11641: LD_STRING Givi
11643: PPUSH
11644: LD_EXP 1
11648: NOT
11649: PPUSH
11650: LD_EXP 2
11654: PPUSH
11655: CALL 30000 0 3
11659: ST_TO_ADDR
// if Givi then
11660: LD_EXP 24
11664: IFFALSE 11684
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11666: LD_EXP 24
11670: PPUSH
11671: LD_INT 87
11673: PPUSH
11674: LD_INT 76
11676: PPUSH
11677: LD_INT 0
11679: PPUSH
11680: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11684: LD_ADDR_EXP 25
11688: PUSH
11689: LD_STRING Mike
11691: PPUSH
11692: LD_EXP 1
11696: NOT
11697: PPUSH
11698: LD_EXP 2
11702: PPUSH
11703: CALL 30000 0 3
11707: ST_TO_ADDR
// if Mike then
11708: LD_EXP 25
11712: IFFALSE 11732
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11714: LD_EXP 25
11718: PPUSH
11719: LD_INT 84
11721: PPUSH
11722: LD_INT 76
11724: PPUSH
11725: LD_INT 0
11727: PPUSH
11728: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11732: LD_ADDR_EXP 26
11736: PUSH
11737: LD_STRING Kamil
11739: PPUSH
11740: LD_EXP 1
11744: NOT
11745: PPUSH
11746: LD_EXP 2
11750: PPUSH
11751: CALL 30000 0 3
11755: ST_TO_ADDR
// if Kamil then
11756: LD_EXP 26
11760: IFFALSE 11780
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11762: LD_EXP 26
11766: PPUSH
11767: LD_INT 85
11769: PPUSH
11770: LD_INT 78
11772: PPUSH
11773: LD_INT 0
11775: PPUSH
11776: CALL_OW 48
// uc_side := 5 ;
11780: LD_ADDR_OWVAR 20
11784: PUSH
11785: LD_INT 5
11787: ST_TO_ADDR
// uc_nation := 2 ;
11788: LD_ADDR_OWVAR 21
11792: PUSH
11793: LD_INT 2
11795: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11796: LD_ADDR_EXP 27
11800: PUSH
11801: LD_STRING Aviradze
11803: PPUSH
11804: LD_INT 0
11806: PPUSH
11807: LD_STRING 
11809: PPUSH
11810: CALL 30000 0 3
11814: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11815: LD_EXP 27
11819: PPUSH
11820: LD_INT 106
11822: PPUSH
11823: LD_INT 38
11825: PPUSH
11826: LD_INT 0
11828: PPUSH
11829: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11833: LD_EXP 27
11837: PPUSH
11838: LD_INT 103
11840: PPUSH
11841: LD_INT 38
11843: PPUSH
11844: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11848: LD_ADDR_EXP 28
11852: PUSH
11853: LD_STRING Kaia
11855: PPUSH
11856: LD_INT 0
11858: PPUSH
11859: LD_STRING 
11861: PPUSH
11862: CALL 30000 0 3
11866: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11867: LD_EXP 28
11871: PPUSH
11872: LD_INT 100
11874: PPUSH
11875: LD_INT 34
11877: PPUSH
11878: LD_INT 0
11880: PPUSH
11881: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11885: LD_EXP 28
11889: PPUSH
11890: LD_INT 100
11892: PPUSH
11893: LD_INT 39
11895: PPUSH
11896: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11900: LD_ADDR_EXP 29
11904: PUSH
11905: LD_STRING Sophia
11907: PPUSH
11908: LD_INT 0
11910: PPUSH
11911: LD_STRING 
11913: PPUSH
11914: CALL 30000 0 3
11918: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11919: LD_EXP 29
11923: PPUSH
11924: LD_INT 109
11926: PPUSH
11927: LD_INT 50
11929: PPUSH
11930: LD_INT 0
11932: PPUSH
11933: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11937: LD_EXP 29
11941: PPUSH
11942: LD_INT 100
11944: PPUSH
11945: LD_INT 39
11947: PPUSH
11948: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11952: LD_ADDR_EXP 30
11956: PUSH
11957: LD_STRING Markov
11959: PPUSH
11960: LD_INT 0
11962: PPUSH
11963: LD_STRING 
11965: PPUSH
11966: CALL 30000 0 3
11970: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11971: LD_INT 5
11973: PPUSH
11974: LD_INT 3
11976: PPUSH
11977: LD_INT 21
11979: PPUSH
11980: LD_INT 1
11982: PPUSH
11983: LD_INT 1
11985: PPUSH
11986: LD_INT 42
11988: PPUSH
11989: LD_INT 90
11991: PUSH
11992: LD_INT 70
11994: PUSH
11995: LD_INT 60
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: PUSH
12003: LD_OWVAR 67
12007: ARRAY
12008: PPUSH
12009: CALL 237 0 7
// veh := CreateVehicle ;
12013: LD_ADDR_VAR 0 3
12017: PUSH
12018: CALL_OW 45
12022: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12023: LD_VAR 0 3
12027: PPUSH
12028: LD_INT 4
12030: PPUSH
12031: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12035: LD_VAR 0 3
12039: PPUSH
12040: LD_INT 109
12042: PPUSH
12043: LD_INT 38
12045: PPUSH
12046: LD_INT 0
12048: PPUSH
12049: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12053: LD_EXP 30
12057: PPUSH
12058: LD_VAR 0 3
12062: PPUSH
12063: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12067: LD_EXP 28
12071: PPUSH
12072: LD_EXP 27
12076: PPUSH
12077: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12081: LD_EXP 27
12085: PPUSH
12086: LD_EXP 28
12090: PPUSH
12091: CALL_OW 119
// if not Givi or not Mike then
12095: LD_EXP 24
12099: NOT
12100: PUSH
12101: LD_EXP 25
12105: NOT
12106: OR
12107: IFFALSE 12183
// begin uc_nation := 2 ;
12109: LD_ADDR_OWVAR 21
12113: PUSH
12114: LD_INT 2
12116: ST_TO_ADDR
// uc_side := 5 ;
12117: LD_ADDR_OWVAR 20
12121: PUSH
12122: LD_INT 5
12124: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12125: LD_INT 1
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: LD_INT 1
12133: PPUSH
12134: CALL_OW 380
// un := CreateHuman ;
12138: LD_ADDR_VAR 0 2
12142: PUSH
12143: CALL_OW 44
12147: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12148: LD_VAR 0 2
12152: PPUSH
12153: LD_INT 112
12155: PPUSH
12156: LD_INT 40
12158: PPUSH
12159: LD_INT 3
12161: PPUSH
12162: LD_INT 0
12164: PPUSH
12165: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_EXP 27
12178: PPUSH
12179: CALL_OW 119
// end ; end ;
12183: LD_VAR 0 1
12187: RET
// export function PrepareFarmer ; var i ; begin
12188: LD_INT 0
12190: PPUSH
12191: PPUSH
// uc_side := 5 ;
12192: LD_ADDR_OWVAR 20
12196: PUSH
12197: LD_INT 5
12199: ST_TO_ADDR
// uc_nation := 2 ;
12200: LD_ADDR_OWVAR 21
12204: PUSH
12205: LD_INT 2
12207: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12208: LD_ADDR_EXP 31
12212: PUSH
12213: LD_STRING Farmer
12215: PPUSH
12216: LD_INT 0
12218: PPUSH
12219: LD_STRING 
12221: PPUSH
12222: CALL 30000 0 3
12226: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12227: LD_EXP 31
12231: PPUSH
12232: LD_INT 106
12234: PPUSH
12235: LD_INT 62
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL_OW 48
// for i := 1 to 5 do
12245: LD_ADDR_VAR 0 2
12249: PUSH
12250: DOUBLE
12251: LD_INT 1
12253: DEC
12254: ST_TO_ADDR
12255: LD_INT 5
12257: PUSH
12258: FOR_TO
12259: IFFALSE 12297
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12261: LD_INT 1
12263: PPUSH
12264: LD_INT 1
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12274: CALL_OW 44
12278: PPUSH
12279: LD_INT 105
12281: PPUSH
12282: LD_INT 64
12284: PPUSH
12285: LD_INT 3
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL_OW 50
// end ;
12295: GO 12258
12297: POP
12298: POP
// end ; end_of_file
12299: LD_VAR 0 1
12303: RET
// every 2 2$20 + 0 0$10 do
12304: GO 12306
12306: DISABLE
// begin enable ;
12307: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12308: LD_INT 1
12310: PPUSH
12311: LD_INT 5
12313: PPUSH
12314: CALL_OW 12
12318: PPUSH
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 1
12324: PPUSH
12325: CALL_OW 55
// if tick > 6 6$00 then
12329: LD_OWVAR 1
12333: PUSH
12334: LD_INT 12600
12336: GREATER
12337: IFFALSE 12340
// disable ;
12339: DISABLE
// end ; end_of_file
12340: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12341: LD_VAR 0 1
12345: PUSH
12346: LD_EXP 23
12350: EQUAL
12351: IFFALSE 12360
// YouLost ( Heike ) ;
12353: LD_STRING Heike
12355: PPUSH
12356: CALL_OW 104
// if un = Aviradze then
12360: LD_VAR 0 1
12364: PUSH
12365: LD_EXP 27
12369: EQUAL
12370: IFFALSE 12379
// YouLost ( Aviradze ) ;
12372: LD_STRING Aviradze
12374: PPUSH
12375: CALL_OW 104
// if un = usLab then
12379: LD_VAR 0 1
12383: PUSH
12384: LD_INT 3
12386: EQUAL
12387: IFFALSE 12396
// YouLost ( Lab ) ;
12389: LD_STRING Lab
12391: PPUSH
12392: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12396: LD_VAR 0 1
12400: PUSH
12401: LD_INT 22
12403: PUSH
12404: LD_INT 2
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 21
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 23
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: PPUSH
12436: CALL_OW 69
12440: PUSH
12441: LD_EXP 23
12445: PUSH
12446: LD_EXP 27
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: DIFF
12455: IN
12456: PUSH
12457: LD_EXP 4
12461: AND
12462: IFFALSE 12478
// lostCounter := lostCounter + 1 ;
12464: LD_ADDR_EXP 18
12468: PUSH
12469: LD_EXP 18
12473: PUSH
12474: LD_INT 1
12476: PLUS
12477: ST_TO_ADDR
// end ;
12478: PPOPN 1
12480: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12481: LD_INT 23
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 25
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 69
12509: PUSH
12510: LD_INT 0
12512: EQUAL
12513: PUSH
12514: LD_INT 22
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PPUSH
12538: CALL_OW 69
12542: PUSH
12543: LD_INT 0
12545: EQUAL
12546: AND
12547: IFFALSE 12559
12549: GO 12551
12551: DISABLE
// YouLost ( Eng ) ;
12552: LD_STRING Eng
12554: PPUSH
12555: CALL_OW 104
12559: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12560: LD_VAR 0 1
12564: PUSH
12565: LD_EXP 22
12569: IN
12570: PUSH
12571: LD_VAR 0 2
12575: PUSH
12576: LD_INT 2
12578: EQUAL
12579: AND
12580: IFFALSE 12612
// begin usSci := usSci diff un ;
12582: LD_ADDR_EXP 22
12586: PUSH
12587: LD_EXP 22
12591: PUSH
12592: LD_VAR 0 1
12596: DIFF
12597: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12598: LD_ADDR_EXP 9
12602: PUSH
12603: LD_EXP 9
12607: PUSH
12608: LD_INT 1
12610: PLUS
12611: ST_TO_ADDR
// end ; end ;
12612: PPOPN 3
12614: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12615: LD_VAR 0 1
12619: PUSH
12620: LD_INT 2
12622: EQUAL
12623: PUSH
12624: LD_VAR 0 2
12628: PUSH
12629: LD_INT 5
12631: EQUAL
12632: AND
12633: IFFALSE 12642
// YouLost ( FriendlyFire ) ;
12635: LD_STRING FriendlyFire
12637: PPUSH
12638: CALL_OW 104
// end ; end_of_file
12642: PPOPN 2
12644: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12645: LD_INT 0
12647: PPUSH
// ar_miner := 81 ;
12648: LD_ADDR_EXP 39
12652: PUSH
12653: LD_INT 81
12655: ST_TO_ADDR
// ar_crane := 88 ;
12656: LD_ADDR_EXP 38
12660: PUSH
12661: LD_INT 88
12663: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12664: LD_ADDR_EXP 33
12668: PUSH
12669: LD_INT 89
12671: ST_TO_ADDR
// us_hack := 99 ;
12672: LD_ADDR_EXP 34
12676: PUSH
12677: LD_INT 99
12679: ST_TO_ADDR
// us_artillery := 97 ;
12680: LD_ADDR_EXP 35
12684: PUSH
12685: LD_INT 97
12687: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12688: LD_ADDR_EXP 36
12692: PUSH
12693: LD_INT 91
12695: ST_TO_ADDR
// ar_mortar := 92 ;
12696: LD_ADDR_EXP 37
12700: PUSH
12701: LD_INT 92
12703: ST_TO_ADDR
// ru_radar := 98 ;
12704: LD_ADDR_EXP 32
12708: PUSH
12709: LD_INT 98
12711: ST_TO_ADDR
// tech_Artillery := 80 ;
12712: LD_ADDR_EXP 40
12716: PUSH
12717: LD_INT 80
12719: ST_TO_ADDR
// tech_RadMat := 81 ;
12720: LD_ADDR_EXP 41
12724: PUSH
12725: LD_INT 81
12727: ST_TO_ADDR
// tech_BasicTools := 82 ;
12728: LD_ADDR_EXP 42
12732: PUSH
12733: LD_INT 82
12735: ST_TO_ADDR
// tech_Cargo := 83 ;
12736: LD_ADDR_EXP 43
12740: PUSH
12741: LD_INT 83
12743: ST_TO_ADDR
// tech_Track := 84 ;
12744: LD_ADDR_EXP 44
12748: PUSH
12749: LD_INT 84
12751: ST_TO_ADDR
// tech_Crane := 85 ;
12752: LD_ADDR_EXP 45
12756: PUSH
12757: LD_INT 85
12759: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12760: LD_ADDR_EXP 46
12764: PUSH
12765: LD_INT 86
12767: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12768: LD_ADDR_EXP 47
12772: PUSH
12773: LD_INT 87
12775: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12776: LD_ADDR_EXP 48
12780: PUSH
12781: LD_INT 88
12783: ST_TO_ADDR
// class_mastodont := 31 ;
12784: LD_ADDR_EXP 49
12788: PUSH
12789: LD_INT 31
12791: ST_TO_ADDR
// class_horse := 21 ;
12792: LD_ADDR_EXP 50
12796: PUSH
12797: LD_INT 21
12799: ST_TO_ADDR
// end ;
12800: LD_VAR 0 1
12804: RET
// every 1 do
12805: GO 12807
12807: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12808: CALL 12645 0 0
12812: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12813: LD_INT 0
12815: PPUSH
// if p2 = 100 then
12816: LD_VAR 0 2
12820: PUSH
12821: LD_INT 100
12823: EQUAL
12824: IFFALSE 13773
// begin if not StreamModeActive then
12826: LD_EXP 51
12830: NOT
12831: IFFALSE 12841
// StreamModeActive := true ;
12833: LD_ADDR_EXP 51
12837: PUSH
12838: LD_INT 1
12840: ST_TO_ADDR
// if p3 = 0 then
12841: LD_VAR 0 3
12845: PUSH
12846: LD_INT 0
12848: EQUAL
12849: IFFALSE 12855
// InitStreamMode ;
12851: CALL 13933 0 0
// if p3 = 1 then
12855: LD_VAR 0 3
12859: PUSH
12860: LD_INT 1
12862: EQUAL
12863: IFFALSE 12873
// sRocket := true ;
12865: LD_ADDR_EXP 56
12869: PUSH
12870: LD_INT 1
12872: ST_TO_ADDR
// if p3 = 2 then
12873: LD_VAR 0 3
12877: PUSH
12878: LD_INT 2
12880: EQUAL
12881: IFFALSE 12891
// sSpeed := true ;
12883: LD_ADDR_EXP 55
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// if p3 = 3 then
12891: LD_VAR 0 3
12895: PUSH
12896: LD_INT 3
12898: EQUAL
12899: IFFALSE 12909
// sEngine := true ;
12901: LD_ADDR_EXP 57
12905: PUSH
12906: LD_INT 1
12908: ST_TO_ADDR
// if p3 = 4 then
12909: LD_VAR 0 3
12913: PUSH
12914: LD_INT 4
12916: EQUAL
12917: IFFALSE 12927
// sSpec := true ;
12919: LD_ADDR_EXP 54
12923: PUSH
12924: LD_INT 1
12926: ST_TO_ADDR
// if p3 = 5 then
12927: LD_VAR 0 3
12931: PUSH
12932: LD_INT 5
12934: EQUAL
12935: IFFALSE 12945
// sLevel := true ;
12937: LD_ADDR_EXP 58
12941: PUSH
12942: LD_INT 1
12944: ST_TO_ADDR
// if p3 = 6 then
12945: LD_VAR 0 3
12949: PUSH
12950: LD_INT 6
12952: EQUAL
12953: IFFALSE 12963
// sArmoury := true ;
12955: LD_ADDR_EXP 59
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// if p3 = 7 then
12963: LD_VAR 0 3
12967: PUSH
12968: LD_INT 7
12970: EQUAL
12971: IFFALSE 12981
// sRadar := true ;
12973: LD_ADDR_EXP 60
12977: PUSH
12978: LD_INT 1
12980: ST_TO_ADDR
// if p3 = 8 then
12981: LD_VAR 0 3
12985: PUSH
12986: LD_INT 8
12988: EQUAL
12989: IFFALSE 12999
// sBunker := true ;
12991: LD_ADDR_EXP 61
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// if p3 = 9 then
12999: LD_VAR 0 3
13003: PUSH
13004: LD_INT 9
13006: EQUAL
13007: IFFALSE 13017
// sHack := true ;
13009: LD_ADDR_EXP 62
13013: PUSH
13014: LD_INT 1
13016: ST_TO_ADDR
// if p3 = 10 then
13017: LD_VAR 0 3
13021: PUSH
13022: LD_INT 10
13024: EQUAL
13025: IFFALSE 13035
// sFire := true ;
13027: LD_ADDR_EXP 63
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
// if p3 = 11 then
13035: LD_VAR 0 3
13039: PUSH
13040: LD_INT 11
13042: EQUAL
13043: IFFALSE 13053
// sRefresh := true ;
13045: LD_ADDR_EXP 64
13049: PUSH
13050: LD_INT 1
13052: ST_TO_ADDR
// if p3 = 12 then
13053: LD_VAR 0 3
13057: PUSH
13058: LD_INT 12
13060: EQUAL
13061: IFFALSE 13071
// sExp := true ;
13063: LD_ADDR_EXP 65
13067: PUSH
13068: LD_INT 1
13070: ST_TO_ADDR
// if p3 = 13 then
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 13
13078: EQUAL
13079: IFFALSE 13089
// sDepot := true ;
13081: LD_ADDR_EXP 66
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if p3 = 14 then
13089: LD_VAR 0 3
13093: PUSH
13094: LD_INT 14
13096: EQUAL
13097: IFFALSE 13107
// sFlag := true ;
13099: LD_ADDR_EXP 67
13103: PUSH
13104: LD_INT 1
13106: ST_TO_ADDR
// if p3 = 15 then
13107: LD_VAR 0 3
13111: PUSH
13112: LD_INT 15
13114: EQUAL
13115: IFFALSE 13125
// sKamikadze := true ;
13117: LD_ADDR_EXP 75
13121: PUSH
13122: LD_INT 1
13124: ST_TO_ADDR
// if p3 = 16 then
13125: LD_VAR 0 3
13129: PUSH
13130: LD_INT 16
13132: EQUAL
13133: IFFALSE 13143
// sTroll := true ;
13135: LD_ADDR_EXP 76
13139: PUSH
13140: LD_INT 1
13142: ST_TO_ADDR
// if p3 = 17 then
13143: LD_VAR 0 3
13147: PUSH
13148: LD_INT 17
13150: EQUAL
13151: IFFALSE 13161
// sSlow := true ;
13153: LD_ADDR_EXP 77
13157: PUSH
13158: LD_INT 1
13160: ST_TO_ADDR
// if p3 = 18 then
13161: LD_VAR 0 3
13165: PUSH
13166: LD_INT 18
13168: EQUAL
13169: IFFALSE 13179
// sLack := true ;
13171: LD_ADDR_EXP 78
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// if p3 = 19 then
13179: LD_VAR 0 3
13183: PUSH
13184: LD_INT 19
13186: EQUAL
13187: IFFALSE 13197
// sTank := true ;
13189: LD_ADDR_EXP 80
13193: PUSH
13194: LD_INT 1
13196: ST_TO_ADDR
// if p3 = 20 then
13197: LD_VAR 0 3
13201: PUSH
13202: LD_INT 20
13204: EQUAL
13205: IFFALSE 13215
// sRemote := true ;
13207: LD_ADDR_EXP 81
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// if p3 = 21 then
13215: LD_VAR 0 3
13219: PUSH
13220: LD_INT 21
13222: EQUAL
13223: IFFALSE 13233
// sPowell := true ;
13225: LD_ADDR_EXP 82
13229: PUSH
13230: LD_INT 1
13232: ST_TO_ADDR
// if p3 = 22 then
13233: LD_VAR 0 3
13237: PUSH
13238: LD_INT 22
13240: EQUAL
13241: IFFALSE 13251
// sTeleport := true ;
13243: LD_ADDR_EXP 85
13247: PUSH
13248: LD_INT 1
13250: ST_TO_ADDR
// if p3 = 23 then
13251: LD_VAR 0 3
13255: PUSH
13256: LD_INT 23
13258: EQUAL
13259: IFFALSE 13269
// sOilTower := true ;
13261: LD_ADDR_EXP 87
13265: PUSH
13266: LD_INT 1
13268: ST_TO_ADDR
// if p3 = 24 then
13269: LD_VAR 0 3
13273: PUSH
13274: LD_INT 24
13276: EQUAL
13277: IFFALSE 13287
// sShovel := true ;
13279: LD_ADDR_EXP 88
13283: PUSH
13284: LD_INT 1
13286: ST_TO_ADDR
// if p3 = 25 then
13287: LD_VAR 0 3
13291: PUSH
13292: LD_INT 25
13294: EQUAL
13295: IFFALSE 13305
// sSheik := true ;
13297: LD_ADDR_EXP 89
13301: PUSH
13302: LD_INT 1
13304: ST_TO_ADDR
// if p3 = 26 then
13305: LD_VAR 0 3
13309: PUSH
13310: LD_INT 26
13312: EQUAL
13313: IFFALSE 13323
// sEarthquake := true ;
13315: LD_ADDR_EXP 91
13319: PUSH
13320: LD_INT 1
13322: ST_TO_ADDR
// if p3 = 27 then
13323: LD_VAR 0 3
13327: PUSH
13328: LD_INT 27
13330: EQUAL
13331: IFFALSE 13341
// sAI := true ;
13333: LD_ADDR_EXP 92
13337: PUSH
13338: LD_INT 1
13340: ST_TO_ADDR
// if p3 = 28 then
13341: LD_VAR 0 3
13345: PUSH
13346: LD_INT 28
13348: EQUAL
13349: IFFALSE 13359
// sCargo := true ;
13351: LD_ADDR_EXP 95
13355: PUSH
13356: LD_INT 1
13358: ST_TO_ADDR
// if p3 = 29 then
13359: LD_VAR 0 3
13363: PUSH
13364: LD_INT 29
13366: EQUAL
13367: IFFALSE 13377
// sDLaser := true ;
13369: LD_ADDR_EXP 96
13373: PUSH
13374: LD_INT 1
13376: ST_TO_ADDR
// if p3 = 30 then
13377: LD_VAR 0 3
13381: PUSH
13382: LD_INT 30
13384: EQUAL
13385: IFFALSE 13395
// sExchange := true ;
13387: LD_ADDR_EXP 97
13391: PUSH
13392: LD_INT 1
13394: ST_TO_ADDR
// if p3 = 31 then
13395: LD_VAR 0 3
13399: PUSH
13400: LD_INT 31
13402: EQUAL
13403: IFFALSE 13413
// sFac := true ;
13405: LD_ADDR_EXP 98
13409: PUSH
13410: LD_INT 1
13412: ST_TO_ADDR
// if p3 = 32 then
13413: LD_VAR 0 3
13417: PUSH
13418: LD_INT 32
13420: EQUAL
13421: IFFALSE 13431
// sPower := true ;
13423: LD_ADDR_EXP 99
13427: PUSH
13428: LD_INT 1
13430: ST_TO_ADDR
// if p3 = 33 then
13431: LD_VAR 0 3
13435: PUSH
13436: LD_INT 33
13438: EQUAL
13439: IFFALSE 13449
// sRandom := true ;
13441: LD_ADDR_EXP 100
13445: PUSH
13446: LD_INT 1
13448: ST_TO_ADDR
// if p3 = 34 then
13449: LD_VAR 0 3
13453: PUSH
13454: LD_INT 34
13456: EQUAL
13457: IFFALSE 13467
// sShield := true ;
13459: LD_ADDR_EXP 101
13463: PUSH
13464: LD_INT 1
13466: ST_TO_ADDR
// if p3 = 35 then
13467: LD_VAR 0 3
13471: PUSH
13472: LD_INT 35
13474: EQUAL
13475: IFFALSE 13485
// sTime := true ;
13477: LD_ADDR_EXP 102
13481: PUSH
13482: LD_INT 1
13484: ST_TO_ADDR
// if p3 = 36 then
13485: LD_VAR 0 3
13489: PUSH
13490: LD_INT 36
13492: EQUAL
13493: IFFALSE 13503
// sTools := true ;
13495: LD_ADDR_EXP 103
13499: PUSH
13500: LD_INT 1
13502: ST_TO_ADDR
// if p3 = 101 then
13503: LD_VAR 0 3
13507: PUSH
13508: LD_INT 101
13510: EQUAL
13511: IFFALSE 13521
// sSold := true ;
13513: LD_ADDR_EXP 68
13517: PUSH
13518: LD_INT 1
13520: ST_TO_ADDR
// if p3 = 102 then
13521: LD_VAR 0 3
13525: PUSH
13526: LD_INT 102
13528: EQUAL
13529: IFFALSE 13539
// sDiff := true ;
13531: LD_ADDR_EXP 69
13535: PUSH
13536: LD_INT 1
13538: ST_TO_ADDR
// if p3 = 103 then
13539: LD_VAR 0 3
13543: PUSH
13544: LD_INT 103
13546: EQUAL
13547: IFFALSE 13557
// sFog := true ;
13549: LD_ADDR_EXP 72
13553: PUSH
13554: LD_INT 1
13556: ST_TO_ADDR
// if p3 = 104 then
13557: LD_VAR 0 3
13561: PUSH
13562: LD_INT 104
13564: EQUAL
13565: IFFALSE 13575
// sReset := true ;
13567: LD_ADDR_EXP 73
13571: PUSH
13572: LD_INT 1
13574: ST_TO_ADDR
// if p3 = 105 then
13575: LD_VAR 0 3
13579: PUSH
13580: LD_INT 105
13582: EQUAL
13583: IFFALSE 13593
// sSun := true ;
13585: LD_ADDR_EXP 74
13589: PUSH
13590: LD_INT 1
13592: ST_TO_ADDR
// if p3 = 106 then
13593: LD_VAR 0 3
13597: PUSH
13598: LD_INT 106
13600: EQUAL
13601: IFFALSE 13611
// sTiger := true ;
13603: LD_ADDR_EXP 70
13607: PUSH
13608: LD_INT 1
13610: ST_TO_ADDR
// if p3 = 107 then
13611: LD_VAR 0 3
13615: PUSH
13616: LD_INT 107
13618: EQUAL
13619: IFFALSE 13629
// sBomb := true ;
13621: LD_ADDR_EXP 71
13625: PUSH
13626: LD_INT 1
13628: ST_TO_ADDR
// if p3 = 108 then
13629: LD_VAR 0 3
13633: PUSH
13634: LD_INT 108
13636: EQUAL
13637: IFFALSE 13647
// sWound := true ;
13639: LD_ADDR_EXP 79
13643: PUSH
13644: LD_INT 1
13646: ST_TO_ADDR
// if p3 = 109 then
13647: LD_VAR 0 3
13651: PUSH
13652: LD_INT 109
13654: EQUAL
13655: IFFALSE 13665
// sBetray := true ;
13657: LD_ADDR_EXP 83
13661: PUSH
13662: LD_INT 1
13664: ST_TO_ADDR
// if p3 = 110 then
13665: LD_VAR 0 3
13669: PUSH
13670: LD_INT 110
13672: EQUAL
13673: IFFALSE 13683
// sContamin := true ;
13675: LD_ADDR_EXP 84
13679: PUSH
13680: LD_INT 1
13682: ST_TO_ADDR
// if p3 = 111 then
13683: LD_VAR 0 3
13687: PUSH
13688: LD_INT 111
13690: EQUAL
13691: IFFALSE 13701
// sOil := true ;
13693: LD_ADDR_EXP 86
13697: PUSH
13698: LD_INT 1
13700: ST_TO_ADDR
// if p3 = 112 then
13701: LD_VAR 0 3
13705: PUSH
13706: LD_INT 112
13708: EQUAL
13709: IFFALSE 13719
// sStu := true ;
13711: LD_ADDR_EXP 90
13715: PUSH
13716: LD_INT 1
13718: ST_TO_ADDR
// if p3 = 113 then
13719: LD_VAR 0 3
13723: PUSH
13724: LD_INT 113
13726: EQUAL
13727: IFFALSE 13737
// sBazooka := true ;
13729: LD_ADDR_EXP 93
13733: PUSH
13734: LD_INT 1
13736: ST_TO_ADDR
// if p3 = 114 then
13737: LD_VAR 0 3
13741: PUSH
13742: LD_INT 114
13744: EQUAL
13745: IFFALSE 13755
// sMortar := true ;
13747: LD_ADDR_EXP 94
13751: PUSH
13752: LD_INT 1
13754: ST_TO_ADDR
// if p3 = 115 then
13755: LD_VAR 0 3
13759: PUSH
13760: LD_INT 115
13762: EQUAL
13763: IFFALSE 13773
// sRanger := true ;
13765: LD_ADDR_EXP 104
13769: PUSH
13770: LD_INT 1
13772: ST_TO_ADDR
// end ; if p2 = 101 then
13773: LD_VAR 0 2
13777: PUSH
13778: LD_INT 101
13780: EQUAL
13781: IFFALSE 13909
// begin case p3 of 1 :
13783: LD_VAR 0 3
13787: PUSH
13788: LD_INT 1
13790: DOUBLE
13791: EQUAL
13792: IFTRUE 13796
13794: GO 13803
13796: POP
// hHackUnlimitedResources ; 2 :
13797: CALL 24946 0 0
13801: GO 13909
13803: LD_INT 2
13805: DOUBLE
13806: EQUAL
13807: IFTRUE 13811
13809: GO 13818
13811: POP
// hHackSetLevel10 ; 3 :
13812: CALL 25079 0 0
13816: GO 13909
13818: LD_INT 3
13820: DOUBLE
13821: EQUAL
13822: IFTRUE 13826
13824: GO 13833
13826: POP
// hHackSetLevel10YourUnits ; 4 :
13827: CALL 25164 0 0
13831: GO 13909
13833: LD_INT 4
13835: DOUBLE
13836: EQUAL
13837: IFTRUE 13841
13839: GO 13848
13841: POP
// hHackInvincible ; 5 :
13842: CALL 25612 0 0
13846: GO 13909
13848: LD_INT 5
13850: DOUBLE
13851: EQUAL
13852: IFTRUE 13856
13854: GO 13863
13856: POP
// hHackInvisible ; 6 :
13857: CALL 25723 0 0
13861: GO 13909
13863: LD_INT 6
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13878
13871: POP
// hHackChangeYourSide ; 7 :
13872: CALL 25780 0 0
13876: GO 13909
13878: LD_INT 7
13880: DOUBLE
13881: EQUAL
13882: IFTRUE 13886
13884: GO 13893
13886: POP
// hHackChangeUnitSide ; 8 :
13887: CALL 25822 0 0
13891: GO 13909
13893: LD_INT 8
13895: DOUBLE
13896: EQUAL
13897: IFTRUE 13901
13899: GO 13908
13901: POP
// hHackFog ; end ;
13902: CALL 25923 0 0
13906: GO 13909
13908: POP
// end ; end ;
13909: LD_VAR 0 7
13913: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13914: GO 13916
13916: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13917: LD_STRING initStreamRollete();
13919: PPUSH
13920: CALL_OW 559
// InitStreamMode ;
13924: CALL 13933 0 0
// DefineStreamItems ( ) ;
13928: CALL 14373 0 0
// end ;
13932: END
// function InitStreamMode ; begin
13933: LD_INT 0
13935: PPUSH
// streamModeActive := false ;
13936: LD_ADDR_EXP 51
13940: PUSH
13941: LD_INT 0
13943: ST_TO_ADDR
// normalCounter := 36 ;
13944: LD_ADDR_EXP 52
13948: PUSH
13949: LD_INT 36
13951: ST_TO_ADDR
// hardcoreCounter := 16 ;
13952: LD_ADDR_EXP 53
13956: PUSH
13957: LD_INT 16
13959: ST_TO_ADDR
// sRocket := false ;
13960: LD_ADDR_EXP 56
13964: PUSH
13965: LD_INT 0
13967: ST_TO_ADDR
// sSpeed := false ;
13968: LD_ADDR_EXP 55
13972: PUSH
13973: LD_INT 0
13975: ST_TO_ADDR
// sEngine := false ;
13976: LD_ADDR_EXP 57
13980: PUSH
13981: LD_INT 0
13983: ST_TO_ADDR
// sSpec := false ;
13984: LD_ADDR_EXP 54
13988: PUSH
13989: LD_INT 0
13991: ST_TO_ADDR
// sLevel := false ;
13992: LD_ADDR_EXP 58
13996: PUSH
13997: LD_INT 0
13999: ST_TO_ADDR
// sArmoury := false ;
14000: LD_ADDR_EXP 59
14004: PUSH
14005: LD_INT 0
14007: ST_TO_ADDR
// sRadar := false ;
14008: LD_ADDR_EXP 60
14012: PUSH
14013: LD_INT 0
14015: ST_TO_ADDR
// sBunker := false ;
14016: LD_ADDR_EXP 61
14020: PUSH
14021: LD_INT 0
14023: ST_TO_ADDR
// sHack := false ;
14024: LD_ADDR_EXP 62
14028: PUSH
14029: LD_INT 0
14031: ST_TO_ADDR
// sFire := false ;
14032: LD_ADDR_EXP 63
14036: PUSH
14037: LD_INT 0
14039: ST_TO_ADDR
// sRefresh := false ;
14040: LD_ADDR_EXP 64
14044: PUSH
14045: LD_INT 0
14047: ST_TO_ADDR
// sExp := false ;
14048: LD_ADDR_EXP 65
14052: PUSH
14053: LD_INT 0
14055: ST_TO_ADDR
// sDepot := false ;
14056: LD_ADDR_EXP 66
14060: PUSH
14061: LD_INT 0
14063: ST_TO_ADDR
// sFlag := false ;
14064: LD_ADDR_EXP 67
14068: PUSH
14069: LD_INT 0
14071: ST_TO_ADDR
// sKamikadze := false ;
14072: LD_ADDR_EXP 75
14076: PUSH
14077: LD_INT 0
14079: ST_TO_ADDR
// sTroll := false ;
14080: LD_ADDR_EXP 76
14084: PUSH
14085: LD_INT 0
14087: ST_TO_ADDR
// sSlow := false ;
14088: LD_ADDR_EXP 77
14092: PUSH
14093: LD_INT 0
14095: ST_TO_ADDR
// sLack := false ;
14096: LD_ADDR_EXP 78
14100: PUSH
14101: LD_INT 0
14103: ST_TO_ADDR
// sTank := false ;
14104: LD_ADDR_EXP 80
14108: PUSH
14109: LD_INT 0
14111: ST_TO_ADDR
// sRemote := false ;
14112: LD_ADDR_EXP 81
14116: PUSH
14117: LD_INT 0
14119: ST_TO_ADDR
// sPowell := false ;
14120: LD_ADDR_EXP 82
14124: PUSH
14125: LD_INT 0
14127: ST_TO_ADDR
// sTeleport := false ;
14128: LD_ADDR_EXP 85
14132: PUSH
14133: LD_INT 0
14135: ST_TO_ADDR
// sOilTower := false ;
14136: LD_ADDR_EXP 87
14140: PUSH
14141: LD_INT 0
14143: ST_TO_ADDR
// sShovel := false ;
14144: LD_ADDR_EXP 88
14148: PUSH
14149: LD_INT 0
14151: ST_TO_ADDR
// sSheik := false ;
14152: LD_ADDR_EXP 89
14156: PUSH
14157: LD_INT 0
14159: ST_TO_ADDR
// sEarthquake := false ;
14160: LD_ADDR_EXP 91
14164: PUSH
14165: LD_INT 0
14167: ST_TO_ADDR
// sAI := false ;
14168: LD_ADDR_EXP 92
14172: PUSH
14173: LD_INT 0
14175: ST_TO_ADDR
// sCargo := false ;
14176: LD_ADDR_EXP 95
14180: PUSH
14181: LD_INT 0
14183: ST_TO_ADDR
// sDLaser := false ;
14184: LD_ADDR_EXP 96
14188: PUSH
14189: LD_INT 0
14191: ST_TO_ADDR
// sExchange := false ;
14192: LD_ADDR_EXP 97
14196: PUSH
14197: LD_INT 0
14199: ST_TO_ADDR
// sFac := false ;
14200: LD_ADDR_EXP 98
14204: PUSH
14205: LD_INT 0
14207: ST_TO_ADDR
// sPower := false ;
14208: LD_ADDR_EXP 99
14212: PUSH
14213: LD_INT 0
14215: ST_TO_ADDR
// sRandom := false ;
14216: LD_ADDR_EXP 100
14220: PUSH
14221: LD_INT 0
14223: ST_TO_ADDR
// sShield := false ;
14224: LD_ADDR_EXP 101
14228: PUSH
14229: LD_INT 0
14231: ST_TO_ADDR
// sTime := false ;
14232: LD_ADDR_EXP 102
14236: PUSH
14237: LD_INT 0
14239: ST_TO_ADDR
// sTools := false ;
14240: LD_ADDR_EXP 103
14244: PUSH
14245: LD_INT 0
14247: ST_TO_ADDR
// sSold := false ;
14248: LD_ADDR_EXP 68
14252: PUSH
14253: LD_INT 0
14255: ST_TO_ADDR
// sDiff := false ;
14256: LD_ADDR_EXP 69
14260: PUSH
14261: LD_INT 0
14263: ST_TO_ADDR
// sFog := false ;
14264: LD_ADDR_EXP 72
14268: PUSH
14269: LD_INT 0
14271: ST_TO_ADDR
// sReset := false ;
14272: LD_ADDR_EXP 73
14276: PUSH
14277: LD_INT 0
14279: ST_TO_ADDR
// sSun := false ;
14280: LD_ADDR_EXP 74
14284: PUSH
14285: LD_INT 0
14287: ST_TO_ADDR
// sTiger := false ;
14288: LD_ADDR_EXP 70
14292: PUSH
14293: LD_INT 0
14295: ST_TO_ADDR
// sBomb := false ;
14296: LD_ADDR_EXP 71
14300: PUSH
14301: LD_INT 0
14303: ST_TO_ADDR
// sWound := false ;
14304: LD_ADDR_EXP 79
14308: PUSH
14309: LD_INT 0
14311: ST_TO_ADDR
// sBetray := false ;
14312: LD_ADDR_EXP 83
14316: PUSH
14317: LD_INT 0
14319: ST_TO_ADDR
// sContamin := false ;
14320: LD_ADDR_EXP 84
14324: PUSH
14325: LD_INT 0
14327: ST_TO_ADDR
// sOil := false ;
14328: LD_ADDR_EXP 86
14332: PUSH
14333: LD_INT 0
14335: ST_TO_ADDR
// sStu := false ;
14336: LD_ADDR_EXP 90
14340: PUSH
14341: LD_INT 0
14343: ST_TO_ADDR
// sBazooka := false ;
14344: LD_ADDR_EXP 93
14348: PUSH
14349: LD_INT 0
14351: ST_TO_ADDR
// sMortar := false ;
14352: LD_ADDR_EXP 94
14356: PUSH
14357: LD_INT 0
14359: ST_TO_ADDR
// sRanger := false ;
14360: LD_ADDR_EXP 104
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// end ;
14368: LD_VAR 0 1
14372: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14373: LD_INT 0
14375: PPUSH
14376: PPUSH
14377: PPUSH
14378: PPUSH
14379: PPUSH
// result := [ ] ;
14380: LD_ADDR_VAR 0 1
14384: PUSH
14385: EMPTY
14386: ST_TO_ADDR
// if campaign_id = 1 then
14387: LD_OWVAR 69
14391: PUSH
14392: LD_INT 1
14394: EQUAL
14395: IFFALSE 17333
// begin case mission_number of 1 :
14397: LD_OWVAR 70
14401: PUSH
14402: LD_INT 1
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14474
14410: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14411: LD_ADDR_VAR 0 1
14415: PUSH
14416: LD_INT 2
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: LD_INT 11
14424: PUSH
14425: LD_INT 12
14427: PUSH
14428: LD_INT 15
14430: PUSH
14431: LD_INT 16
14433: PUSH
14434: LD_INT 22
14436: PUSH
14437: LD_INT 23
14439: PUSH
14440: LD_INT 26
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: PUSH
14454: LD_INT 101
14456: PUSH
14457: LD_INT 102
14459: PUSH
14460: LD_INT 106
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: ST_TO_ADDR
14472: GO 17331
14474: LD_INT 2
14476: DOUBLE
14477: EQUAL
14478: IFTRUE 14482
14480: GO 14554
14482: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14483: LD_ADDR_VAR 0 1
14487: PUSH
14488: LD_INT 2
14490: PUSH
14491: LD_INT 4
14493: PUSH
14494: LD_INT 11
14496: PUSH
14497: LD_INT 12
14499: PUSH
14500: LD_INT 15
14502: PUSH
14503: LD_INT 16
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_INT 23
14511: PUSH
14512: LD_INT 26
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 101
14528: PUSH
14529: LD_INT 102
14531: PUSH
14532: LD_INT 105
14534: PUSH
14535: LD_INT 106
14537: PUSH
14538: LD_INT 108
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: ST_TO_ADDR
14552: GO 17331
14554: LD_INT 3
14556: DOUBLE
14557: EQUAL
14558: IFTRUE 14562
14560: GO 14638
14562: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14563: LD_ADDR_VAR 0 1
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: LD_INT 5
14576: PUSH
14577: LD_INT 11
14579: PUSH
14580: LD_INT 12
14582: PUSH
14583: LD_INT 15
14585: PUSH
14586: LD_INT 16
14588: PUSH
14589: LD_INT 22
14591: PUSH
14592: LD_INT 26
14594: PUSH
14595: LD_INT 36
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 101
14612: PUSH
14613: LD_INT 102
14615: PUSH
14616: LD_INT 105
14618: PUSH
14619: LD_INT 106
14621: PUSH
14622: LD_INT 108
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: ST_TO_ADDR
14636: GO 17331
14638: LD_INT 4
14640: DOUBLE
14641: EQUAL
14642: IFTRUE 14646
14644: GO 14730
14646: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14647: LD_ADDR_VAR 0 1
14651: PUSH
14652: LD_INT 2
14654: PUSH
14655: LD_INT 4
14657: PUSH
14658: LD_INT 5
14660: PUSH
14661: LD_INT 8
14663: PUSH
14664: LD_INT 11
14666: PUSH
14667: LD_INT 12
14669: PUSH
14670: LD_INT 15
14672: PUSH
14673: LD_INT 16
14675: PUSH
14676: LD_INT 22
14678: PUSH
14679: LD_INT 23
14681: PUSH
14682: LD_INT 26
14684: PUSH
14685: LD_INT 36
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 101
14704: PUSH
14705: LD_INT 102
14707: PUSH
14708: LD_INT 105
14710: PUSH
14711: LD_INT 106
14713: PUSH
14714: LD_INT 108
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: ST_TO_ADDR
14728: GO 17331
14730: LD_INT 5
14732: DOUBLE
14733: EQUAL
14734: IFTRUE 14738
14736: GO 14838
14738: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14739: LD_ADDR_VAR 0 1
14743: PUSH
14744: LD_INT 2
14746: PUSH
14747: LD_INT 4
14749: PUSH
14750: LD_INT 5
14752: PUSH
14753: LD_INT 6
14755: PUSH
14756: LD_INT 8
14758: PUSH
14759: LD_INT 11
14761: PUSH
14762: LD_INT 12
14764: PUSH
14765: LD_INT 15
14767: PUSH
14768: LD_INT 16
14770: PUSH
14771: LD_INT 22
14773: PUSH
14774: LD_INT 23
14776: PUSH
14777: LD_INT 25
14779: PUSH
14780: LD_INT 26
14782: PUSH
14783: LD_INT 36
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 101
14804: PUSH
14805: LD_INT 102
14807: PUSH
14808: LD_INT 105
14810: PUSH
14811: LD_INT 106
14813: PUSH
14814: LD_INT 108
14816: PUSH
14817: LD_INT 109
14819: PUSH
14820: LD_INT 112
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: ST_TO_ADDR
14836: GO 17331
14838: LD_INT 6
14840: DOUBLE
14841: EQUAL
14842: IFTRUE 14846
14844: GO 14966
14846: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14847: LD_ADDR_VAR 0 1
14851: PUSH
14852: LD_INT 2
14854: PUSH
14855: LD_INT 4
14857: PUSH
14858: LD_INT 5
14860: PUSH
14861: LD_INT 6
14863: PUSH
14864: LD_INT 8
14866: PUSH
14867: LD_INT 11
14869: PUSH
14870: LD_INT 12
14872: PUSH
14873: LD_INT 15
14875: PUSH
14876: LD_INT 16
14878: PUSH
14879: LD_INT 20
14881: PUSH
14882: LD_INT 21
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_INT 23
14890: PUSH
14891: LD_INT 25
14893: PUSH
14894: LD_INT 26
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 31
14902: PUSH
14903: LD_INT 32
14905: PUSH
14906: LD_INT 36
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 101
14932: PUSH
14933: LD_INT 102
14935: PUSH
14936: LD_INT 105
14938: PUSH
14939: LD_INT 106
14941: PUSH
14942: LD_INT 108
14944: PUSH
14945: LD_INT 109
14947: PUSH
14948: LD_INT 112
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: ST_TO_ADDR
14964: GO 17331
14966: LD_INT 7
14968: DOUBLE
14969: EQUAL
14970: IFTRUE 14974
14972: GO 15074
14974: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14975: LD_ADDR_VAR 0 1
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: LD_INT 4
14985: PUSH
14986: LD_INT 5
14988: PUSH
14989: LD_INT 7
14991: PUSH
14992: LD_INT 11
14994: PUSH
14995: LD_INT 12
14997: PUSH
14998: LD_INT 15
15000: PUSH
15001: LD_INT 16
15003: PUSH
15004: LD_INT 20
15006: PUSH
15007: LD_INT 21
15009: PUSH
15010: LD_INT 22
15012: PUSH
15013: LD_INT 23
15015: PUSH
15016: LD_INT 25
15018: PUSH
15019: LD_INT 26
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 101
15040: PUSH
15041: LD_INT 102
15043: PUSH
15044: LD_INT 103
15046: PUSH
15047: LD_INT 105
15049: PUSH
15050: LD_INT 106
15052: PUSH
15053: LD_INT 108
15055: PUSH
15056: LD_INT 112
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: ST_TO_ADDR
15072: GO 17331
15074: LD_INT 8
15076: DOUBLE
15077: EQUAL
15078: IFTRUE 15082
15080: GO 15210
15082: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
15083: LD_ADDR_VAR 0 1
15087: PUSH
15088: LD_INT 2
15090: PUSH
15091: LD_INT 4
15093: PUSH
15094: LD_INT 5
15096: PUSH
15097: LD_INT 6
15099: PUSH
15100: LD_INT 7
15102: PUSH
15103: LD_INT 8
15105: PUSH
15106: LD_INT 11
15108: PUSH
15109: LD_INT 12
15111: PUSH
15112: LD_INT 15
15114: PUSH
15115: LD_INT 16
15117: PUSH
15118: LD_INT 20
15120: PUSH
15121: LD_INT 21
15123: PUSH
15124: LD_INT 22
15126: PUSH
15127: LD_INT 23
15129: PUSH
15130: LD_INT 25
15132: PUSH
15133: LD_INT 26
15135: PUSH
15136: LD_INT 30
15138: PUSH
15139: LD_INT 31
15141: PUSH
15142: LD_INT 32
15144: PUSH
15145: LD_INT 36
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 101
15172: PUSH
15173: LD_INT 102
15175: PUSH
15176: LD_INT 103
15178: PUSH
15179: LD_INT 105
15181: PUSH
15182: LD_INT 106
15184: PUSH
15185: LD_INT 108
15187: PUSH
15188: LD_INT 109
15190: PUSH
15191: LD_INT 112
15193: PUSH
15194: EMPTY
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: ST_TO_ADDR
15208: GO 17331
15210: LD_INT 9
15212: DOUBLE
15213: EQUAL
15214: IFTRUE 15218
15216: GO 15354
15218: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
15219: LD_ADDR_VAR 0 1
15223: PUSH
15224: LD_INT 2
15226: PUSH
15227: LD_INT 4
15229: PUSH
15230: LD_INT 5
15232: PUSH
15233: LD_INT 6
15235: PUSH
15236: LD_INT 7
15238: PUSH
15239: LD_INT 8
15241: PUSH
15242: LD_INT 11
15244: PUSH
15245: LD_INT 12
15247: PUSH
15248: LD_INT 15
15250: PUSH
15251: LD_INT 16
15253: PUSH
15254: LD_INT 20
15256: PUSH
15257: LD_INT 21
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_INT 23
15265: PUSH
15266: LD_INT 25
15268: PUSH
15269: LD_INT 26
15271: PUSH
15272: LD_INT 28
15274: PUSH
15275: LD_INT 30
15277: PUSH
15278: LD_INT 31
15280: PUSH
15281: LD_INT 32
15283: PUSH
15284: LD_INT 36
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 101
15312: PUSH
15313: LD_INT 102
15315: PUSH
15316: LD_INT 103
15318: PUSH
15319: LD_INT 105
15321: PUSH
15322: LD_INT 106
15324: PUSH
15325: LD_INT 108
15327: PUSH
15328: LD_INT 109
15330: PUSH
15331: LD_INT 112
15333: PUSH
15334: LD_INT 114
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: ST_TO_ADDR
15352: GO 17331
15354: LD_INT 10
15356: DOUBLE
15357: EQUAL
15358: IFTRUE 15362
15360: GO 15546
15362: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15363: LD_ADDR_VAR 0 1
15367: PUSH
15368: LD_INT 2
15370: PUSH
15371: LD_INT 4
15373: PUSH
15374: LD_INT 5
15376: PUSH
15377: LD_INT 6
15379: PUSH
15380: LD_INT 7
15382: PUSH
15383: LD_INT 8
15385: PUSH
15386: LD_INT 9
15388: PUSH
15389: LD_INT 10
15391: PUSH
15392: LD_INT 11
15394: PUSH
15395: LD_INT 12
15397: PUSH
15398: LD_INT 13
15400: PUSH
15401: LD_INT 14
15403: PUSH
15404: LD_INT 15
15406: PUSH
15407: LD_INT 16
15409: PUSH
15410: LD_INT 17
15412: PUSH
15413: LD_INT 18
15415: PUSH
15416: LD_INT 19
15418: PUSH
15419: LD_INT 20
15421: PUSH
15422: LD_INT 21
15424: PUSH
15425: LD_INT 22
15427: PUSH
15428: LD_INT 23
15430: PUSH
15431: LD_INT 24
15433: PUSH
15434: LD_INT 25
15436: PUSH
15437: LD_INT 26
15439: PUSH
15440: LD_INT 28
15442: PUSH
15443: LD_INT 30
15445: PUSH
15446: LD_INT 31
15448: PUSH
15449: LD_INT 32
15451: PUSH
15452: LD_INT 36
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: PUSH
15486: LD_INT 101
15488: PUSH
15489: LD_INT 102
15491: PUSH
15492: LD_INT 103
15494: PUSH
15495: LD_INT 104
15497: PUSH
15498: LD_INT 105
15500: PUSH
15501: LD_INT 106
15503: PUSH
15504: LD_INT 107
15506: PUSH
15507: LD_INT 108
15509: PUSH
15510: LD_INT 109
15512: PUSH
15513: LD_INT 110
15515: PUSH
15516: LD_INT 111
15518: PUSH
15519: LD_INT 112
15521: PUSH
15522: LD_INT 114
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: ST_TO_ADDR
15544: GO 17331
15546: LD_INT 11
15548: DOUBLE
15549: EQUAL
15550: IFTRUE 15554
15552: GO 15746
15554: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15555: LD_ADDR_VAR 0 1
15559: PUSH
15560: LD_INT 2
15562: PUSH
15563: LD_INT 3
15565: PUSH
15566: LD_INT 4
15568: PUSH
15569: LD_INT 5
15571: PUSH
15572: LD_INT 6
15574: PUSH
15575: LD_INT 7
15577: PUSH
15578: LD_INT 8
15580: PUSH
15581: LD_INT 9
15583: PUSH
15584: LD_INT 10
15586: PUSH
15587: LD_INT 11
15589: PUSH
15590: LD_INT 12
15592: PUSH
15593: LD_INT 13
15595: PUSH
15596: LD_INT 14
15598: PUSH
15599: LD_INT 15
15601: PUSH
15602: LD_INT 16
15604: PUSH
15605: LD_INT 17
15607: PUSH
15608: LD_INT 18
15610: PUSH
15611: LD_INT 19
15613: PUSH
15614: LD_INT 20
15616: PUSH
15617: LD_INT 21
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: LD_INT 23
15625: PUSH
15626: LD_INT 24
15628: PUSH
15629: LD_INT 25
15631: PUSH
15632: LD_INT 26
15634: PUSH
15635: LD_INT 28
15637: PUSH
15638: LD_INT 30
15640: PUSH
15641: LD_INT 31
15643: PUSH
15644: LD_INT 32
15646: PUSH
15647: LD_INT 34
15649: PUSH
15650: LD_INT 36
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: LIST
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: LIST
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 101
15688: PUSH
15689: LD_INT 102
15691: PUSH
15692: LD_INT 103
15694: PUSH
15695: LD_INT 104
15697: PUSH
15698: LD_INT 105
15700: PUSH
15701: LD_INT 106
15703: PUSH
15704: LD_INT 107
15706: PUSH
15707: LD_INT 108
15709: PUSH
15710: LD_INT 109
15712: PUSH
15713: LD_INT 110
15715: PUSH
15716: LD_INT 111
15718: PUSH
15719: LD_INT 112
15721: PUSH
15722: LD_INT 114
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: ST_TO_ADDR
15744: GO 17331
15746: LD_INT 12
15748: DOUBLE
15749: EQUAL
15750: IFTRUE 15754
15752: GO 15962
15754: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15755: LD_ADDR_VAR 0 1
15759: PUSH
15760: LD_INT 1
15762: PUSH
15763: LD_INT 2
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: LD_INT 4
15771: PUSH
15772: LD_INT 5
15774: PUSH
15775: LD_INT 6
15777: PUSH
15778: LD_INT 7
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: LD_INT 9
15786: PUSH
15787: LD_INT 10
15789: PUSH
15790: LD_INT 11
15792: PUSH
15793: LD_INT 12
15795: PUSH
15796: LD_INT 13
15798: PUSH
15799: LD_INT 14
15801: PUSH
15802: LD_INT 15
15804: PUSH
15805: LD_INT 16
15807: PUSH
15808: LD_INT 17
15810: PUSH
15811: LD_INT 18
15813: PUSH
15814: LD_INT 19
15816: PUSH
15817: LD_INT 20
15819: PUSH
15820: LD_INT 21
15822: PUSH
15823: LD_INT 22
15825: PUSH
15826: LD_INT 23
15828: PUSH
15829: LD_INT 24
15831: PUSH
15832: LD_INT 25
15834: PUSH
15835: LD_INT 26
15837: PUSH
15838: LD_INT 27
15840: PUSH
15841: LD_INT 28
15843: PUSH
15844: LD_INT 30
15846: PUSH
15847: LD_INT 31
15849: PUSH
15850: LD_INT 32
15852: PUSH
15853: LD_INT 33
15855: PUSH
15856: LD_INT 34
15858: PUSH
15859: LD_INT 36
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 101
15900: PUSH
15901: LD_INT 102
15903: PUSH
15904: LD_INT 103
15906: PUSH
15907: LD_INT 104
15909: PUSH
15910: LD_INT 105
15912: PUSH
15913: LD_INT 106
15915: PUSH
15916: LD_INT 107
15918: PUSH
15919: LD_INT 108
15921: PUSH
15922: LD_INT 109
15924: PUSH
15925: LD_INT 110
15927: PUSH
15928: LD_INT 111
15930: PUSH
15931: LD_INT 112
15933: PUSH
15934: LD_INT 113
15936: PUSH
15937: LD_INT 114
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: ST_TO_ADDR
15960: GO 17331
15962: LD_INT 13
15964: DOUBLE
15965: EQUAL
15966: IFTRUE 15970
15968: GO 16166
15970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15971: LD_ADDR_VAR 0 1
15975: PUSH
15976: LD_INT 1
15978: PUSH
15979: LD_INT 2
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: LD_INT 4
15987: PUSH
15988: LD_INT 5
15990: PUSH
15991: LD_INT 8
15993: PUSH
15994: LD_INT 9
15996: PUSH
15997: LD_INT 10
15999: PUSH
16000: LD_INT 11
16002: PUSH
16003: LD_INT 12
16005: PUSH
16006: LD_INT 14
16008: PUSH
16009: LD_INT 15
16011: PUSH
16012: LD_INT 16
16014: PUSH
16015: LD_INT 17
16017: PUSH
16018: LD_INT 18
16020: PUSH
16021: LD_INT 19
16023: PUSH
16024: LD_INT 20
16026: PUSH
16027: LD_INT 21
16029: PUSH
16030: LD_INT 22
16032: PUSH
16033: LD_INT 23
16035: PUSH
16036: LD_INT 24
16038: PUSH
16039: LD_INT 25
16041: PUSH
16042: LD_INT 26
16044: PUSH
16045: LD_INT 27
16047: PUSH
16048: LD_INT 28
16050: PUSH
16051: LD_INT 30
16053: PUSH
16054: LD_INT 31
16056: PUSH
16057: LD_INT 32
16059: PUSH
16060: LD_INT 33
16062: PUSH
16063: LD_INT 34
16065: PUSH
16066: LD_INT 36
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 101
16104: PUSH
16105: LD_INT 102
16107: PUSH
16108: LD_INT 103
16110: PUSH
16111: LD_INT 104
16113: PUSH
16114: LD_INT 105
16116: PUSH
16117: LD_INT 106
16119: PUSH
16120: LD_INT 107
16122: PUSH
16123: LD_INT 108
16125: PUSH
16126: LD_INT 109
16128: PUSH
16129: LD_INT 110
16131: PUSH
16132: LD_INT 111
16134: PUSH
16135: LD_INT 112
16137: PUSH
16138: LD_INT 113
16140: PUSH
16141: LD_INT 114
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: ST_TO_ADDR
16164: GO 17331
16166: LD_INT 14
16168: DOUBLE
16169: EQUAL
16170: IFTRUE 16174
16172: GO 16386
16174: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
16175: LD_ADDR_VAR 0 1
16179: PUSH
16180: LD_INT 1
16182: PUSH
16183: LD_INT 2
16185: PUSH
16186: LD_INT 3
16188: PUSH
16189: LD_INT 4
16191: PUSH
16192: LD_INT 5
16194: PUSH
16195: LD_INT 6
16197: PUSH
16198: LD_INT 7
16200: PUSH
16201: LD_INT 8
16203: PUSH
16204: LD_INT 9
16206: PUSH
16207: LD_INT 10
16209: PUSH
16210: LD_INT 11
16212: PUSH
16213: LD_INT 12
16215: PUSH
16216: LD_INT 13
16218: PUSH
16219: LD_INT 14
16221: PUSH
16222: LD_INT 15
16224: PUSH
16225: LD_INT 16
16227: PUSH
16228: LD_INT 17
16230: PUSH
16231: LD_INT 18
16233: PUSH
16234: LD_INT 19
16236: PUSH
16237: LD_INT 20
16239: PUSH
16240: LD_INT 21
16242: PUSH
16243: LD_INT 22
16245: PUSH
16246: LD_INT 23
16248: PUSH
16249: LD_INT 24
16251: PUSH
16252: LD_INT 25
16254: PUSH
16255: LD_INT 26
16257: PUSH
16258: LD_INT 27
16260: PUSH
16261: LD_INT 28
16263: PUSH
16264: LD_INT 29
16266: PUSH
16267: LD_INT 30
16269: PUSH
16270: LD_INT 31
16272: PUSH
16273: LD_INT 32
16275: PUSH
16276: LD_INT 33
16278: PUSH
16279: LD_INT 34
16281: PUSH
16282: LD_INT 36
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 101
16324: PUSH
16325: LD_INT 102
16327: PUSH
16328: LD_INT 103
16330: PUSH
16331: LD_INT 104
16333: PUSH
16334: LD_INT 105
16336: PUSH
16337: LD_INT 106
16339: PUSH
16340: LD_INT 107
16342: PUSH
16343: LD_INT 108
16345: PUSH
16346: LD_INT 109
16348: PUSH
16349: LD_INT 110
16351: PUSH
16352: LD_INT 111
16354: PUSH
16355: LD_INT 112
16357: PUSH
16358: LD_INT 113
16360: PUSH
16361: LD_INT 114
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: ST_TO_ADDR
16384: GO 17331
16386: LD_INT 15
16388: DOUBLE
16389: EQUAL
16390: IFTRUE 16394
16392: GO 16606
16394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16395: LD_ADDR_VAR 0 1
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 3
16408: PUSH
16409: LD_INT 4
16411: PUSH
16412: LD_INT 5
16414: PUSH
16415: LD_INT 6
16417: PUSH
16418: LD_INT 7
16420: PUSH
16421: LD_INT 8
16423: PUSH
16424: LD_INT 9
16426: PUSH
16427: LD_INT 10
16429: PUSH
16430: LD_INT 11
16432: PUSH
16433: LD_INT 12
16435: PUSH
16436: LD_INT 13
16438: PUSH
16439: LD_INT 14
16441: PUSH
16442: LD_INT 15
16444: PUSH
16445: LD_INT 16
16447: PUSH
16448: LD_INT 17
16450: PUSH
16451: LD_INT 18
16453: PUSH
16454: LD_INT 19
16456: PUSH
16457: LD_INT 20
16459: PUSH
16460: LD_INT 21
16462: PUSH
16463: LD_INT 22
16465: PUSH
16466: LD_INT 23
16468: PUSH
16469: LD_INT 24
16471: PUSH
16472: LD_INT 25
16474: PUSH
16475: LD_INT 26
16477: PUSH
16478: LD_INT 27
16480: PUSH
16481: LD_INT 28
16483: PUSH
16484: LD_INT 29
16486: PUSH
16487: LD_INT 30
16489: PUSH
16490: LD_INT 31
16492: PUSH
16493: LD_INT 32
16495: PUSH
16496: LD_INT 33
16498: PUSH
16499: LD_INT 34
16501: PUSH
16502: LD_INT 36
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 101
16544: PUSH
16545: LD_INT 102
16547: PUSH
16548: LD_INT 103
16550: PUSH
16551: LD_INT 104
16553: PUSH
16554: LD_INT 105
16556: PUSH
16557: LD_INT 106
16559: PUSH
16560: LD_INT 107
16562: PUSH
16563: LD_INT 108
16565: PUSH
16566: LD_INT 109
16568: PUSH
16569: LD_INT 110
16571: PUSH
16572: LD_INT 111
16574: PUSH
16575: LD_INT 112
16577: PUSH
16578: LD_INT 113
16580: PUSH
16581: LD_INT 114
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: ST_TO_ADDR
16604: GO 17331
16606: LD_INT 16
16608: DOUBLE
16609: EQUAL
16610: IFTRUE 16614
16612: GO 16738
16614: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16615: LD_ADDR_VAR 0 1
16619: PUSH
16620: LD_INT 2
16622: PUSH
16623: LD_INT 4
16625: PUSH
16626: LD_INT 5
16628: PUSH
16629: LD_INT 7
16631: PUSH
16632: LD_INT 11
16634: PUSH
16635: LD_INT 12
16637: PUSH
16638: LD_INT 15
16640: PUSH
16641: LD_INT 16
16643: PUSH
16644: LD_INT 20
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 22
16652: PUSH
16653: LD_INT 23
16655: PUSH
16656: LD_INT 25
16658: PUSH
16659: LD_INT 26
16661: PUSH
16662: LD_INT 30
16664: PUSH
16665: LD_INT 31
16667: PUSH
16668: LD_INT 32
16670: PUSH
16671: LD_INT 33
16673: PUSH
16674: LD_INT 34
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 101
16700: PUSH
16701: LD_INT 102
16703: PUSH
16704: LD_INT 103
16706: PUSH
16707: LD_INT 106
16709: PUSH
16710: LD_INT 108
16712: PUSH
16713: LD_INT 112
16715: PUSH
16716: LD_INT 113
16718: PUSH
16719: LD_INT 114
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: ST_TO_ADDR
16736: GO 17331
16738: LD_INT 17
16740: DOUBLE
16741: EQUAL
16742: IFTRUE 16746
16744: GO 16958
16746: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16747: LD_ADDR_VAR 0 1
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: LD_INT 2
16757: PUSH
16758: LD_INT 3
16760: PUSH
16761: LD_INT 4
16763: PUSH
16764: LD_INT 5
16766: PUSH
16767: LD_INT 6
16769: PUSH
16770: LD_INT 7
16772: PUSH
16773: LD_INT 8
16775: PUSH
16776: LD_INT 9
16778: PUSH
16779: LD_INT 10
16781: PUSH
16782: LD_INT 11
16784: PUSH
16785: LD_INT 12
16787: PUSH
16788: LD_INT 13
16790: PUSH
16791: LD_INT 14
16793: PUSH
16794: LD_INT 15
16796: PUSH
16797: LD_INT 16
16799: PUSH
16800: LD_INT 17
16802: PUSH
16803: LD_INT 18
16805: PUSH
16806: LD_INT 19
16808: PUSH
16809: LD_INT 20
16811: PUSH
16812: LD_INT 21
16814: PUSH
16815: LD_INT 22
16817: PUSH
16818: LD_INT 23
16820: PUSH
16821: LD_INT 24
16823: PUSH
16824: LD_INT 25
16826: PUSH
16827: LD_INT 26
16829: PUSH
16830: LD_INT 27
16832: PUSH
16833: LD_INT 28
16835: PUSH
16836: LD_INT 29
16838: PUSH
16839: LD_INT 30
16841: PUSH
16842: LD_INT 31
16844: PUSH
16845: LD_INT 32
16847: PUSH
16848: LD_INT 33
16850: PUSH
16851: LD_INT 34
16853: PUSH
16854: LD_INT 36
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: PUSH
16894: LD_INT 101
16896: PUSH
16897: LD_INT 102
16899: PUSH
16900: LD_INT 103
16902: PUSH
16903: LD_INT 104
16905: PUSH
16906: LD_INT 105
16908: PUSH
16909: LD_INT 106
16911: PUSH
16912: LD_INT 107
16914: PUSH
16915: LD_INT 108
16917: PUSH
16918: LD_INT 109
16920: PUSH
16921: LD_INT 110
16923: PUSH
16924: LD_INT 111
16926: PUSH
16927: LD_INT 112
16929: PUSH
16930: LD_INT 113
16932: PUSH
16933: LD_INT 114
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: ST_TO_ADDR
16956: GO 17331
16958: LD_INT 18
16960: DOUBLE
16961: EQUAL
16962: IFTRUE 16966
16964: GO 17102
16966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16967: LD_ADDR_VAR 0 1
16971: PUSH
16972: LD_INT 2
16974: PUSH
16975: LD_INT 4
16977: PUSH
16978: LD_INT 5
16980: PUSH
16981: LD_INT 7
16983: PUSH
16984: LD_INT 11
16986: PUSH
16987: LD_INT 12
16989: PUSH
16990: LD_INT 15
16992: PUSH
16993: LD_INT 16
16995: PUSH
16996: LD_INT 20
16998: PUSH
16999: LD_INT 21
17001: PUSH
17002: LD_INT 22
17004: PUSH
17005: LD_INT 23
17007: PUSH
17008: LD_INT 25
17010: PUSH
17011: LD_INT 26
17013: PUSH
17014: LD_INT 30
17016: PUSH
17017: LD_INT 31
17019: PUSH
17020: LD_INT 32
17022: PUSH
17023: LD_INT 33
17025: PUSH
17026: LD_INT 34
17028: PUSH
17029: LD_INT 35
17031: PUSH
17032: LD_INT 36
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 101
17060: PUSH
17061: LD_INT 102
17063: PUSH
17064: LD_INT 103
17066: PUSH
17067: LD_INT 106
17069: PUSH
17070: LD_INT 108
17072: PUSH
17073: LD_INT 112
17075: PUSH
17076: LD_INT 113
17078: PUSH
17079: LD_INT 114
17081: PUSH
17082: LD_INT 115
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: ST_TO_ADDR
17100: GO 17331
17102: LD_INT 19
17104: DOUBLE
17105: EQUAL
17106: IFTRUE 17110
17108: GO 17330
17110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
17111: LD_ADDR_VAR 0 1
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 3
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: LD_INT 5
17130: PUSH
17131: LD_INT 6
17133: PUSH
17134: LD_INT 7
17136: PUSH
17137: LD_INT 8
17139: PUSH
17140: LD_INT 9
17142: PUSH
17143: LD_INT 10
17145: PUSH
17146: LD_INT 11
17148: PUSH
17149: LD_INT 12
17151: PUSH
17152: LD_INT 13
17154: PUSH
17155: LD_INT 14
17157: PUSH
17158: LD_INT 15
17160: PUSH
17161: LD_INT 16
17163: PUSH
17164: LD_INT 17
17166: PUSH
17167: LD_INT 18
17169: PUSH
17170: LD_INT 19
17172: PUSH
17173: LD_INT 20
17175: PUSH
17176: LD_INT 21
17178: PUSH
17179: LD_INT 22
17181: PUSH
17182: LD_INT 23
17184: PUSH
17185: LD_INT 24
17187: PUSH
17188: LD_INT 25
17190: PUSH
17191: LD_INT 26
17193: PUSH
17194: LD_INT 27
17196: PUSH
17197: LD_INT 28
17199: PUSH
17200: LD_INT 29
17202: PUSH
17203: LD_INT 30
17205: PUSH
17206: LD_INT 31
17208: PUSH
17209: LD_INT 32
17211: PUSH
17212: LD_INT 33
17214: PUSH
17215: LD_INT 34
17217: PUSH
17218: LD_INT 35
17220: PUSH
17221: LD_INT 36
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 101
17264: PUSH
17265: LD_INT 102
17267: PUSH
17268: LD_INT 103
17270: PUSH
17271: LD_INT 104
17273: PUSH
17274: LD_INT 105
17276: PUSH
17277: LD_INT 106
17279: PUSH
17280: LD_INT 107
17282: PUSH
17283: LD_INT 108
17285: PUSH
17286: LD_INT 109
17288: PUSH
17289: LD_INT 110
17291: PUSH
17292: LD_INT 111
17294: PUSH
17295: LD_INT 112
17297: PUSH
17298: LD_INT 113
17300: PUSH
17301: LD_INT 114
17303: PUSH
17304: LD_INT 115
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: ST_TO_ADDR
17328: GO 17331
17330: POP
// end else
17331: GO 17550
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17333: LD_ADDR_VAR 0 1
17337: PUSH
17338: LD_INT 1
17340: PUSH
17341: LD_INT 2
17343: PUSH
17344: LD_INT 3
17346: PUSH
17347: LD_INT 4
17349: PUSH
17350: LD_INT 5
17352: PUSH
17353: LD_INT 6
17355: PUSH
17356: LD_INT 7
17358: PUSH
17359: LD_INT 8
17361: PUSH
17362: LD_INT 9
17364: PUSH
17365: LD_INT 10
17367: PUSH
17368: LD_INT 11
17370: PUSH
17371: LD_INT 12
17373: PUSH
17374: LD_INT 13
17376: PUSH
17377: LD_INT 14
17379: PUSH
17380: LD_INT 15
17382: PUSH
17383: LD_INT 16
17385: PUSH
17386: LD_INT 17
17388: PUSH
17389: LD_INT 18
17391: PUSH
17392: LD_INT 19
17394: PUSH
17395: LD_INT 20
17397: PUSH
17398: LD_INT 21
17400: PUSH
17401: LD_INT 22
17403: PUSH
17404: LD_INT 23
17406: PUSH
17407: LD_INT 24
17409: PUSH
17410: LD_INT 25
17412: PUSH
17413: LD_INT 26
17415: PUSH
17416: LD_INT 27
17418: PUSH
17419: LD_INT 28
17421: PUSH
17422: LD_INT 29
17424: PUSH
17425: LD_INT 30
17427: PUSH
17428: LD_INT 31
17430: PUSH
17431: LD_INT 32
17433: PUSH
17434: LD_INT 33
17436: PUSH
17437: LD_INT 34
17439: PUSH
17440: LD_INT 35
17442: PUSH
17443: LD_INT 36
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: PUSH
17484: LD_INT 101
17486: PUSH
17487: LD_INT 102
17489: PUSH
17490: LD_INT 103
17492: PUSH
17493: LD_INT 104
17495: PUSH
17496: LD_INT 105
17498: PUSH
17499: LD_INT 106
17501: PUSH
17502: LD_INT 107
17504: PUSH
17505: LD_INT 108
17507: PUSH
17508: LD_INT 109
17510: PUSH
17511: LD_INT 110
17513: PUSH
17514: LD_INT 111
17516: PUSH
17517: LD_INT 112
17519: PUSH
17520: LD_INT 113
17522: PUSH
17523: LD_INT 114
17525: PUSH
17526: LD_INT 115
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: ST_TO_ADDR
// if result then
17550: LD_VAR 0 1
17554: IFFALSE 17843
// begin normal :=  ;
17556: LD_ADDR_VAR 0 3
17560: PUSH
17561: LD_STRING 
17563: ST_TO_ADDR
// hardcore :=  ;
17564: LD_ADDR_VAR 0 4
17568: PUSH
17569: LD_STRING 
17571: ST_TO_ADDR
// for i = 1 to normalCounter do
17572: LD_ADDR_VAR 0 5
17576: PUSH
17577: DOUBLE
17578: LD_INT 1
17580: DEC
17581: ST_TO_ADDR
17582: LD_EXP 52
17586: PUSH
17587: FOR_TO
17588: IFFALSE 17689
// begin tmp := 0 ;
17590: LD_ADDR_VAR 0 2
17594: PUSH
17595: LD_STRING 0
17597: ST_TO_ADDR
// if result [ 1 ] then
17598: LD_VAR 0 1
17602: PUSH
17603: LD_INT 1
17605: ARRAY
17606: IFFALSE 17671
// if result [ 1 ] [ 1 ] = i then
17608: LD_VAR 0 1
17612: PUSH
17613: LD_INT 1
17615: ARRAY
17616: PUSH
17617: LD_INT 1
17619: ARRAY
17620: PUSH
17621: LD_VAR 0 5
17625: EQUAL
17626: IFFALSE 17671
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17628: LD_ADDR_VAR 0 1
17632: PUSH
17633: LD_VAR 0 1
17637: PPUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_VAR 0 1
17645: PUSH
17646: LD_INT 1
17648: ARRAY
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL_OW 3
17657: PPUSH
17658: CALL_OW 1
17662: ST_TO_ADDR
// tmp := 1 ;
17663: LD_ADDR_VAR 0 2
17667: PUSH
17668: LD_STRING 1
17670: ST_TO_ADDR
// end ; normal := normal & tmp ;
17671: LD_ADDR_VAR 0 3
17675: PUSH
17676: LD_VAR 0 3
17680: PUSH
17681: LD_VAR 0 2
17685: STR
17686: ST_TO_ADDR
// end ;
17687: GO 17587
17689: POP
17690: POP
// for i = 1 to hardcoreCounter do
17691: LD_ADDR_VAR 0 5
17695: PUSH
17696: DOUBLE
17697: LD_INT 1
17699: DEC
17700: ST_TO_ADDR
17701: LD_EXP 53
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17812
// begin tmp := 0 ;
17709: LD_ADDR_VAR 0 2
17713: PUSH
17714: LD_STRING 0
17716: ST_TO_ADDR
// if result [ 2 ] then
17717: LD_VAR 0 1
17721: PUSH
17722: LD_INT 2
17724: ARRAY
17725: IFFALSE 17794
// if result [ 2 ] [ 1 ] = 100 + i then
17727: LD_VAR 0 1
17731: PUSH
17732: LD_INT 2
17734: ARRAY
17735: PUSH
17736: LD_INT 1
17738: ARRAY
17739: PUSH
17740: LD_INT 100
17742: PUSH
17743: LD_VAR 0 5
17747: PLUS
17748: EQUAL
17749: IFFALSE 17794
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17751: LD_ADDR_VAR 0 1
17755: PUSH
17756: LD_VAR 0 1
17760: PPUSH
17761: LD_INT 2
17763: PPUSH
17764: LD_VAR 0 1
17768: PUSH
17769: LD_INT 2
17771: ARRAY
17772: PPUSH
17773: LD_INT 1
17775: PPUSH
17776: CALL_OW 3
17780: PPUSH
17781: CALL_OW 1
17785: ST_TO_ADDR
// tmp := 1 ;
17786: LD_ADDR_VAR 0 2
17790: PUSH
17791: LD_STRING 1
17793: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17794: LD_ADDR_VAR 0 4
17798: PUSH
17799: LD_VAR 0 4
17803: PUSH
17804: LD_VAR 0 2
17808: STR
17809: ST_TO_ADDR
// end ;
17810: GO 17706
17812: POP
17813: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17814: LD_STRING getStreamItemsFromMission("
17816: PUSH
17817: LD_VAR 0 3
17821: STR
17822: PUSH
17823: LD_STRING ","
17825: STR
17826: PUSH
17827: LD_VAR 0 4
17831: STR
17832: PUSH
17833: LD_STRING ")
17835: STR
17836: PPUSH
17837: CALL_OW 559
// end else
17841: GO 17850
// ToLua ( getStreamItemsFromMission("","") ) ;
17843: LD_STRING getStreamItemsFromMission("","")
17845: PPUSH
17846: CALL_OW 559
// end ;
17850: LD_VAR 0 1
17854: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17855: LD_EXP 51
17859: PUSH
17860: LD_EXP 56
17864: AND
17865: IFFALSE 17989
17867: GO 17869
17869: DISABLE
17870: LD_INT 0
17872: PPUSH
17873: PPUSH
// begin enable ;
17874: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17875: LD_ADDR_VAR 0 2
17879: PUSH
17880: LD_INT 22
17882: PUSH
17883: LD_OWVAR 2
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: LD_INT 34
17897: PUSH
17898: LD_INT 7
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 34
17907: PUSH
17908: LD_INT 45
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 34
17917: PUSH
17918: LD_INT 28
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 34
17927: PUSH
17928: LD_INT 47
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PPUSH
17946: CALL_OW 69
17950: ST_TO_ADDR
// if not tmp then
17951: LD_VAR 0 2
17955: NOT
17956: IFFALSE 17960
// exit ;
17958: GO 17989
// for i in tmp do
17960: LD_ADDR_VAR 0 1
17964: PUSH
17965: LD_VAR 0 2
17969: PUSH
17970: FOR_IN
17971: IFFALSE 17987
// begin SetLives ( i , 0 ) ;
17973: LD_VAR 0 1
17977: PPUSH
17978: LD_INT 0
17980: PPUSH
17981: CALL_OW 234
// end ;
17985: GO 17970
17987: POP
17988: POP
// end ;
17989: PPOPN 2
17991: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17992: LD_EXP 51
17996: PUSH
17997: LD_EXP 57
18001: AND
18002: IFFALSE 18086
18004: GO 18006
18006: DISABLE
18007: LD_INT 0
18009: PPUSH
18010: PPUSH
// begin enable ;
18011: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18012: LD_ADDR_VAR 0 2
18016: PUSH
18017: LD_INT 22
18019: PUSH
18020: LD_OWVAR 2
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 32
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PPUSH
18043: CALL_OW 69
18047: ST_TO_ADDR
// if not tmp then
18048: LD_VAR 0 2
18052: NOT
18053: IFFALSE 18057
// exit ;
18055: GO 18086
// for i in tmp do
18057: LD_ADDR_VAR 0 1
18061: PUSH
18062: LD_VAR 0 2
18066: PUSH
18067: FOR_IN
18068: IFFALSE 18084
// begin SetLives ( i , 0 ) ;
18070: LD_VAR 0 1
18074: PPUSH
18075: LD_INT 0
18077: PPUSH
18078: CALL_OW 234
// end ;
18082: GO 18067
18084: POP
18085: POP
// end ;
18086: PPOPN 2
18088: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18089: LD_EXP 51
18093: PUSH
18094: LD_EXP 54
18098: AND
18099: IFFALSE 18192
18101: GO 18103
18103: DISABLE
18104: LD_INT 0
18106: PPUSH
// begin enable ;
18107: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18108: LD_ADDR_VAR 0 1
18112: PUSH
18113: LD_INT 22
18115: PUSH
18116: LD_OWVAR 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 2
18127: PUSH
18128: LD_INT 25
18130: PUSH
18131: LD_INT 5
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 25
18140: PUSH
18141: LD_INT 9
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: LD_INT 25
18150: PUSH
18151: LD_INT 8
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: PUSH
18173: FOR_IN
18174: IFFALSE 18190
// begin SetClass ( i , 1 ) ;
18176: LD_VAR 0 1
18180: PPUSH
18181: LD_INT 1
18183: PPUSH
18184: CALL_OW 336
// end ;
18188: GO 18173
18190: POP
18191: POP
// end ;
18192: PPOPN 1
18194: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18195: LD_EXP 51
18199: PUSH
18200: LD_EXP 55
18204: AND
18205: PUSH
18206: LD_OWVAR 65
18210: PUSH
18211: LD_INT 7
18213: LESS
18214: AND
18215: IFFALSE 18229
18217: GO 18219
18219: DISABLE
// begin enable ;
18220: ENABLE
// game_speed := 7 ;
18221: LD_ADDR_OWVAR 65
18225: PUSH
18226: LD_INT 7
18228: ST_TO_ADDR
// end ;
18229: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18230: LD_EXP 51
18234: PUSH
18235: LD_EXP 58
18239: AND
18240: IFFALSE 18442
18242: GO 18244
18244: DISABLE
18245: LD_INT 0
18247: PPUSH
18248: PPUSH
18249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18250: LD_ADDR_VAR 0 3
18254: PUSH
18255: LD_INT 81
18257: PUSH
18258: LD_OWVAR 2
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: PUSH
18267: LD_INT 21
18269: PUSH
18270: LD_INT 1
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PPUSH
18281: CALL_OW 69
18285: ST_TO_ADDR
// if not tmp then
18286: LD_VAR 0 3
18290: NOT
18291: IFFALSE 18295
// exit ;
18293: GO 18442
// if tmp > 5 then
18295: LD_VAR 0 3
18299: PUSH
18300: LD_INT 5
18302: GREATER
18303: IFFALSE 18315
// k := 5 else
18305: LD_ADDR_VAR 0 2
18309: PUSH
18310: LD_INT 5
18312: ST_TO_ADDR
18313: GO 18325
// k := tmp ;
18315: LD_ADDR_VAR 0 2
18319: PUSH
18320: LD_VAR 0 3
18324: ST_TO_ADDR
// for i := 1 to k do
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: DOUBLE
18331: LD_INT 1
18333: DEC
18334: ST_TO_ADDR
18335: LD_VAR 0 2
18339: PUSH
18340: FOR_TO
18341: IFFALSE 18440
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18343: LD_VAR 0 3
18347: PUSH
18348: LD_VAR 0 1
18352: ARRAY
18353: PPUSH
18354: LD_VAR 0 1
18358: PUSH
18359: LD_INT 4
18361: MOD
18362: PUSH
18363: LD_INT 1
18365: PLUS
18366: PPUSH
18367: CALL_OW 259
18371: PUSH
18372: LD_INT 10
18374: LESS
18375: IFFALSE 18438
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18377: LD_VAR 0 3
18381: PUSH
18382: LD_VAR 0 1
18386: ARRAY
18387: PPUSH
18388: LD_VAR 0 1
18392: PUSH
18393: LD_INT 4
18395: MOD
18396: PUSH
18397: LD_INT 1
18399: PLUS
18400: PPUSH
18401: LD_VAR 0 3
18405: PUSH
18406: LD_VAR 0 1
18410: ARRAY
18411: PPUSH
18412: LD_VAR 0 1
18416: PUSH
18417: LD_INT 4
18419: MOD
18420: PUSH
18421: LD_INT 1
18423: PLUS
18424: PPUSH
18425: CALL_OW 259
18429: PUSH
18430: LD_INT 1
18432: PLUS
18433: PPUSH
18434: CALL_OW 237
18438: GO 18340
18440: POP
18441: POP
// end ;
18442: PPOPN 3
18444: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18445: LD_EXP 51
18449: PUSH
18450: LD_EXP 59
18454: AND
18455: IFFALSE 18475
18457: GO 18459
18459: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18460: LD_INT 4
18462: PPUSH
18463: LD_OWVAR 2
18467: PPUSH
18468: LD_INT 0
18470: PPUSH
18471: CALL_OW 324
18475: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18476: LD_EXP 51
18480: PUSH
18481: LD_EXP 88
18485: AND
18486: IFFALSE 18506
18488: GO 18490
18490: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18491: LD_INT 19
18493: PPUSH
18494: LD_OWVAR 2
18498: PPUSH
18499: LD_INT 0
18501: PPUSH
18502: CALL_OW 324
18506: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18507: LD_EXP 51
18511: PUSH
18512: LD_EXP 60
18516: AND
18517: IFFALSE 18619
18519: GO 18521
18521: DISABLE
18522: LD_INT 0
18524: PPUSH
18525: PPUSH
// begin enable ;
18526: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18527: LD_ADDR_VAR 0 2
18531: PUSH
18532: LD_INT 22
18534: PUSH
18535: LD_OWVAR 2
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 2
18546: PUSH
18547: LD_INT 34
18549: PUSH
18550: LD_INT 11
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 34
18559: PUSH
18560: LD_INT 30
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: ST_TO_ADDR
// if not tmp then
18581: LD_VAR 0 2
18585: NOT
18586: IFFALSE 18590
// exit ;
18588: GO 18619
// for i in tmp do
18590: LD_ADDR_VAR 0 1
18594: PUSH
18595: LD_VAR 0 2
18599: PUSH
18600: FOR_IN
18601: IFFALSE 18617
// begin SetLives ( i , 0 ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: LD_INT 0
18610: PPUSH
18611: CALL_OW 234
// end ;
18615: GO 18600
18617: POP
18618: POP
// end ;
18619: PPOPN 2
18621: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18622: LD_EXP 51
18626: PUSH
18627: LD_EXP 61
18631: AND
18632: IFFALSE 18652
18634: GO 18636
18636: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18637: LD_INT 32
18639: PPUSH
18640: LD_OWVAR 2
18644: PPUSH
18645: LD_INT 0
18647: PPUSH
18648: CALL_OW 324
18652: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18653: LD_EXP 51
18657: PUSH
18658: LD_EXP 62
18662: AND
18663: IFFALSE 18844
18665: GO 18667
18667: DISABLE
18668: LD_INT 0
18670: PPUSH
18671: PPUSH
18672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18673: LD_ADDR_VAR 0 2
18677: PUSH
18678: LD_INT 22
18680: PUSH
18681: LD_OWVAR 2
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 33
18692: PUSH
18693: LD_INT 3
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PPUSH
18704: CALL_OW 69
18708: ST_TO_ADDR
// if not tmp then
18709: LD_VAR 0 2
18713: NOT
18714: IFFALSE 18718
// exit ;
18716: GO 18844
// side := 0 ;
18718: LD_ADDR_VAR 0 3
18722: PUSH
18723: LD_INT 0
18725: ST_TO_ADDR
// for i := 1 to 8 do
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: DOUBLE
18732: LD_INT 1
18734: DEC
18735: ST_TO_ADDR
18736: LD_INT 8
18738: PUSH
18739: FOR_TO
18740: IFFALSE 18788
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18742: LD_OWVAR 2
18746: PUSH
18747: LD_VAR 0 1
18751: NONEQUAL
18752: PUSH
18753: LD_OWVAR 2
18757: PPUSH
18758: LD_VAR 0 1
18762: PPUSH
18763: CALL_OW 81
18767: PUSH
18768: LD_INT 2
18770: EQUAL
18771: AND
18772: IFFALSE 18786
// begin side := i ;
18774: LD_ADDR_VAR 0 3
18778: PUSH
18779: LD_VAR 0 1
18783: ST_TO_ADDR
// break ;
18784: GO 18788
// end ;
18786: GO 18739
18788: POP
18789: POP
// if not side then
18790: LD_VAR 0 3
18794: NOT
18795: IFFALSE 18799
// exit ;
18797: GO 18844
// for i := 1 to tmp do
18799: LD_ADDR_VAR 0 1
18803: PUSH
18804: DOUBLE
18805: LD_INT 1
18807: DEC
18808: ST_TO_ADDR
18809: LD_VAR 0 2
18813: PUSH
18814: FOR_TO
18815: IFFALSE 18842
// if Prob ( 60 ) then
18817: LD_INT 60
18819: PPUSH
18820: CALL_OW 13
18824: IFFALSE 18840
// SetSide ( i , side ) ;
18826: LD_VAR 0 1
18830: PPUSH
18831: LD_VAR 0 3
18835: PPUSH
18836: CALL_OW 235
18840: GO 18814
18842: POP
18843: POP
// end ;
18844: PPOPN 3
18846: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18847: LD_EXP 51
18851: PUSH
18852: LD_EXP 64
18856: AND
18857: IFFALSE 18976
18859: GO 18861
18861: DISABLE
18862: LD_INT 0
18864: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18865: LD_ADDR_VAR 0 1
18869: PUSH
18870: LD_INT 22
18872: PUSH
18873: LD_OWVAR 2
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PUSH
18882: LD_INT 21
18884: PUSH
18885: LD_INT 1
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 3
18894: PUSH
18895: LD_INT 23
18897: PUSH
18898: LD_INT 0
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: PPUSH
18914: CALL_OW 69
18918: PUSH
18919: FOR_IN
18920: IFFALSE 18974
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18922: LD_VAR 0 1
18926: PPUSH
18927: CALL_OW 257
18931: PUSH
18932: LD_INT 1
18934: PUSH
18935: LD_INT 2
18937: PUSH
18938: LD_INT 3
18940: PUSH
18941: LD_INT 4
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: IN
18950: IFFALSE 18972
// SetClass ( un , rand ( 1 , 4 ) ) ;
18952: LD_VAR 0 1
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: LD_INT 4
18962: PPUSH
18963: CALL_OW 12
18967: PPUSH
18968: CALL_OW 336
18972: GO 18919
18974: POP
18975: POP
// end ;
18976: PPOPN 1
18978: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18979: LD_EXP 51
18983: PUSH
18984: LD_EXP 63
18988: AND
18989: IFFALSE 19068
18991: GO 18993
18993: DISABLE
18994: LD_INT 0
18996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_OWVAR 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 3
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PPUSH
19028: CALL_OW 69
19032: ST_TO_ADDR
// if not tmp then
19033: LD_VAR 0 1
19037: NOT
19038: IFFALSE 19042
// exit ;
19040: GO 19068
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19042: LD_VAR 0 1
19046: PUSH
19047: LD_INT 1
19049: PPUSH
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 12
19059: ARRAY
19060: PPUSH
19061: LD_INT 100
19063: PPUSH
19064: CALL_OW 234
// end ;
19068: PPOPN 1
19070: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19071: LD_EXP 51
19075: PUSH
19076: LD_EXP 65
19080: AND
19081: IFFALSE 19179
19083: GO 19085
19085: DISABLE
19086: LD_INT 0
19088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19089: LD_ADDR_VAR 0 1
19093: PUSH
19094: LD_INT 22
19096: PUSH
19097: LD_OWVAR 2
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 21
19108: PUSH
19109: LD_INT 1
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PPUSH
19120: CALL_OW 69
19124: ST_TO_ADDR
// if not tmp then
19125: LD_VAR 0 1
19129: NOT
19130: IFFALSE 19134
// exit ;
19132: GO 19179
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19134: LD_VAR 0 1
19138: PUSH
19139: LD_INT 1
19141: PPUSH
19142: LD_VAR 0 1
19146: PPUSH
19147: CALL_OW 12
19151: ARRAY
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: LD_INT 4
19158: PPUSH
19159: CALL_OW 12
19163: PPUSH
19164: LD_INT 3000
19166: PPUSH
19167: LD_INT 9000
19169: PPUSH
19170: CALL_OW 12
19174: PPUSH
19175: CALL_OW 492
// end ;
19179: PPOPN 1
19181: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19182: LD_EXP 51
19186: PUSH
19187: LD_EXP 66
19191: AND
19192: IFFALSE 19212
19194: GO 19196
19196: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19197: LD_INT 1
19199: PPUSH
19200: LD_OWVAR 2
19204: PPUSH
19205: LD_INT 0
19207: PPUSH
19208: CALL_OW 324
19212: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19213: LD_EXP 51
19217: PUSH
19218: LD_EXP 67
19222: AND
19223: IFFALSE 19306
19225: GO 19227
19227: DISABLE
19228: LD_INT 0
19230: PPUSH
19231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19232: LD_ADDR_VAR 0 2
19236: PUSH
19237: LD_INT 22
19239: PUSH
19240: LD_OWVAR 2
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 21
19251: PUSH
19252: LD_INT 3
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PPUSH
19263: CALL_OW 69
19267: ST_TO_ADDR
// if not tmp then
19268: LD_VAR 0 2
19272: NOT
19273: IFFALSE 19277
// exit ;
19275: GO 19306
// for i in tmp do
19277: LD_ADDR_VAR 0 1
19281: PUSH
19282: LD_VAR 0 2
19286: PUSH
19287: FOR_IN
19288: IFFALSE 19304
// SetBLevel ( i , 10 ) ;
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 10
19297: PPUSH
19298: CALL_OW 241
19302: GO 19287
19304: POP
19305: POP
// end ;
19306: PPOPN 2
19308: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19309: LD_EXP 51
19313: PUSH
19314: LD_EXP 68
19318: AND
19319: IFFALSE 19430
19321: GO 19323
19323: DISABLE
19324: LD_INT 0
19326: PPUSH
19327: PPUSH
19328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_OWVAR 2
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 25
19348: PUSH
19349: LD_INT 1
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PPUSH
19360: CALL_OW 69
19364: ST_TO_ADDR
// if not tmp then
19365: LD_VAR 0 3
19369: NOT
19370: IFFALSE 19374
// exit ;
19372: GO 19430
// un := tmp [ rand ( 1 , tmp ) ] ;
19374: LD_ADDR_VAR 0 2
19378: PUSH
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 1
19386: PPUSH
19387: LD_VAR 0 3
19391: PPUSH
19392: CALL_OW 12
19396: ARRAY
19397: ST_TO_ADDR
// if Crawls ( un ) then
19398: LD_VAR 0 2
19402: PPUSH
19403: CALL_OW 318
19407: IFFALSE 19418
// ComWalk ( un ) ;
19409: LD_VAR 0 2
19413: PPUSH
19414: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19418: LD_VAR 0 2
19422: PPUSH
19423: LD_INT 5
19425: PPUSH
19426: CALL_OW 336
// end ;
19430: PPOPN 3
19432: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19433: LD_EXP 51
19437: PUSH
19438: LD_EXP 69
19442: AND
19443: PUSH
19444: LD_OWVAR 67
19448: PUSH
19449: LD_INT 3
19451: LESS
19452: AND
19453: IFFALSE 19472
19455: GO 19457
19457: DISABLE
// Difficulty := Difficulty + 1 ;
19458: LD_ADDR_OWVAR 67
19462: PUSH
19463: LD_OWVAR 67
19467: PUSH
19468: LD_INT 1
19470: PLUS
19471: ST_TO_ADDR
19472: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19473: LD_EXP 51
19477: PUSH
19478: LD_EXP 70
19482: AND
19483: IFFALSE 19586
19485: GO 19487
19487: DISABLE
19488: LD_INT 0
19490: PPUSH
// begin for i := 1 to 5 do
19491: LD_ADDR_VAR 0 1
19495: PUSH
19496: DOUBLE
19497: LD_INT 1
19499: DEC
19500: ST_TO_ADDR
19501: LD_INT 5
19503: PUSH
19504: FOR_TO
19505: IFFALSE 19584
// begin uc_nation := nation_nature ;
19507: LD_ADDR_OWVAR 21
19511: PUSH
19512: LD_INT 0
19514: ST_TO_ADDR
// uc_side := 0 ;
19515: LD_ADDR_OWVAR 20
19519: PUSH
19520: LD_INT 0
19522: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19523: LD_ADDR_OWVAR 29
19527: PUSH
19528: LD_INT 12
19530: PUSH
19531: LD_INT 12
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: ST_TO_ADDR
// hc_agressivity := 20 ;
19538: LD_ADDR_OWVAR 35
19542: PUSH
19543: LD_INT 20
19545: ST_TO_ADDR
// hc_class := class_tiger ;
19546: LD_ADDR_OWVAR 28
19550: PUSH
19551: LD_INT 14
19553: ST_TO_ADDR
// hc_gallery :=  ;
19554: LD_ADDR_OWVAR 33
19558: PUSH
19559: LD_STRING 
19561: ST_TO_ADDR
// hc_name :=  ;
19562: LD_ADDR_OWVAR 26
19566: PUSH
19567: LD_STRING 
19569: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19570: CALL_OW 44
19574: PPUSH
19575: LD_INT 0
19577: PPUSH
19578: CALL_OW 51
// end ;
19582: GO 19504
19584: POP
19585: POP
// end ;
19586: PPOPN 1
19588: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19589: LD_EXP 51
19593: PUSH
19594: LD_EXP 71
19598: AND
19599: IFFALSE 19608
19601: GO 19603
19603: DISABLE
// StreamSibBomb ;
19604: CALL 19609 0 0
19608: END
// export function StreamSibBomb ; var i , x , y ; begin
19609: LD_INT 0
19611: PPUSH
19612: PPUSH
19613: PPUSH
19614: PPUSH
// result := false ;
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// for i := 1 to 16 do
19623: LD_ADDR_VAR 0 2
19627: PUSH
19628: DOUBLE
19629: LD_INT 1
19631: DEC
19632: ST_TO_ADDR
19633: LD_INT 16
19635: PUSH
19636: FOR_TO
19637: IFFALSE 19836
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19639: LD_ADDR_VAR 0 3
19643: PUSH
19644: LD_INT 10
19646: PUSH
19647: LD_INT 20
19649: PUSH
19650: LD_INT 30
19652: PUSH
19653: LD_INT 40
19655: PUSH
19656: LD_INT 50
19658: PUSH
19659: LD_INT 60
19661: PUSH
19662: LD_INT 70
19664: PUSH
19665: LD_INT 80
19667: PUSH
19668: LD_INT 90
19670: PUSH
19671: LD_INT 100
19673: PUSH
19674: LD_INT 110
19676: PUSH
19677: LD_INT 120
19679: PUSH
19680: LD_INT 130
19682: PUSH
19683: LD_INT 140
19685: PUSH
19686: LD_INT 150
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 1
19708: PPUSH
19709: LD_INT 15
19711: PPUSH
19712: CALL_OW 12
19716: ARRAY
19717: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19718: LD_ADDR_VAR 0 4
19722: PUSH
19723: LD_INT 10
19725: PUSH
19726: LD_INT 20
19728: PUSH
19729: LD_INT 30
19731: PUSH
19732: LD_INT 40
19734: PUSH
19735: LD_INT 50
19737: PUSH
19738: LD_INT 60
19740: PUSH
19741: LD_INT 70
19743: PUSH
19744: LD_INT 80
19746: PUSH
19747: LD_INT 90
19749: PUSH
19750: LD_INT 100
19752: PUSH
19753: LD_INT 110
19755: PUSH
19756: LD_INT 120
19758: PUSH
19759: LD_INT 130
19761: PUSH
19762: LD_INT 140
19764: PUSH
19765: LD_INT 150
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 1
19787: PPUSH
19788: LD_INT 15
19790: PPUSH
19791: CALL_OW 12
19795: ARRAY
19796: ST_TO_ADDR
// if ValidHex ( x , y ) then
19797: LD_VAR 0 3
19801: PPUSH
19802: LD_VAR 0 4
19806: PPUSH
19807: CALL_OW 488
19811: IFFALSE 19834
// begin result := [ x , y ] ;
19813: LD_ADDR_VAR 0 1
19817: PUSH
19818: LD_VAR 0 3
19822: PUSH
19823: LD_VAR 0 4
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: ST_TO_ADDR
// break ;
19832: GO 19836
// end ; end ;
19834: GO 19636
19836: POP
19837: POP
// if result then
19838: LD_VAR 0 1
19842: IFFALSE 19902
// begin ToLua ( playSibBomb() ) ;
19844: LD_STRING playSibBomb()
19846: PPUSH
19847: CALL_OW 559
// wait ( 0 0$14 ) ;
19851: LD_INT 490
19853: PPUSH
19854: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19858: LD_VAR 0 1
19862: PUSH
19863: LD_INT 1
19865: ARRAY
19866: PPUSH
19867: LD_VAR 0 1
19871: PUSH
19872: LD_INT 2
19874: ARRAY
19875: PPUSH
19876: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19880: LD_VAR 0 1
19884: PUSH
19885: LD_INT 1
19887: ARRAY
19888: PPUSH
19889: LD_VAR 0 1
19893: PUSH
19894: LD_INT 2
19896: ARRAY
19897: PPUSH
19898: CALL_OW 429
// end ; end ;
19902: LD_VAR 0 1
19906: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19907: LD_EXP 51
19911: PUSH
19912: LD_EXP 73
19916: AND
19917: IFFALSE 19929
19919: GO 19921
19921: DISABLE
// YouLost (  ) ;
19922: LD_STRING 
19924: PPUSH
19925: CALL_OW 104
19929: END
// every 0 0$1 trigger StreamModeActive and sFog do
19930: LD_EXP 51
19934: PUSH
19935: LD_EXP 72
19939: AND
19940: IFFALSE 19954
19942: GO 19944
19944: DISABLE
// FogOff ( your_side ) ;
19945: LD_OWVAR 2
19949: PPUSH
19950: CALL_OW 344
19954: END
// every 0 0$1 trigger StreamModeActive and sSun do
19955: LD_EXP 51
19959: PUSH
19960: LD_EXP 74
19964: AND
19965: IFFALSE 19993
19967: GO 19969
19969: DISABLE
// begin solar_recharge_percent := 0 ;
19970: LD_ADDR_OWVAR 79
19974: PUSH
19975: LD_INT 0
19977: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19978: LD_INT 10500
19980: PPUSH
19981: CALL_OW 67
// solar_recharge_percent := 100 ;
19985: LD_ADDR_OWVAR 79
19989: PUSH
19990: LD_INT 100
19992: ST_TO_ADDR
// end ;
19993: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19994: LD_EXP 51
19998: PUSH
19999: LD_EXP 75
20003: AND
20004: IFFALSE 20243
20006: GO 20008
20008: DISABLE
20009: LD_INT 0
20011: PPUSH
20012: PPUSH
20013: PPUSH
// begin tmp := [ ] ;
20014: LD_ADDR_VAR 0 3
20018: PUSH
20019: EMPTY
20020: ST_TO_ADDR
// for i := 1 to 6 do
20021: LD_ADDR_VAR 0 1
20025: PUSH
20026: DOUBLE
20027: LD_INT 1
20029: DEC
20030: ST_TO_ADDR
20031: LD_INT 6
20033: PUSH
20034: FOR_TO
20035: IFFALSE 20140
// begin uc_nation := nation_nature ;
20037: LD_ADDR_OWVAR 21
20041: PUSH
20042: LD_INT 0
20044: ST_TO_ADDR
// uc_side := 0 ;
20045: LD_ADDR_OWVAR 20
20049: PUSH
20050: LD_INT 0
20052: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20053: LD_ADDR_OWVAR 29
20057: PUSH
20058: LD_INT 12
20060: PUSH
20061: LD_INT 12
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: ST_TO_ADDR
// hc_agressivity := 20 ;
20068: LD_ADDR_OWVAR 35
20072: PUSH
20073: LD_INT 20
20075: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20076: LD_ADDR_OWVAR 28
20080: PUSH
20081: LD_INT 17
20083: ST_TO_ADDR
// hc_gallery :=  ;
20084: LD_ADDR_OWVAR 33
20088: PUSH
20089: LD_STRING 
20091: ST_TO_ADDR
// hc_name :=  ;
20092: LD_ADDR_OWVAR 26
20096: PUSH
20097: LD_STRING 
20099: ST_TO_ADDR
// un := CreateHuman ;
20100: LD_ADDR_VAR 0 2
20104: PUSH
20105: CALL_OW 44
20109: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20110: LD_VAR 0 2
20114: PPUSH
20115: LD_INT 1
20117: PPUSH
20118: CALL_OW 51
// tmp := tmp ^ un ;
20122: LD_ADDR_VAR 0 3
20126: PUSH
20127: LD_VAR 0 3
20131: PUSH
20132: LD_VAR 0 2
20136: ADD
20137: ST_TO_ADDR
// end ;
20138: GO 20034
20140: POP
20141: POP
// repeat wait ( 0 0$1 ) ;
20142: LD_INT 35
20144: PPUSH
20145: CALL_OW 67
// for un in tmp do
20149: LD_ADDR_VAR 0 2
20153: PUSH
20154: LD_VAR 0 3
20158: PUSH
20159: FOR_IN
20160: IFFALSE 20234
// begin if IsDead ( un ) then
20162: LD_VAR 0 2
20166: PPUSH
20167: CALL_OW 301
20171: IFFALSE 20191
// begin tmp := tmp diff un ;
20173: LD_ADDR_VAR 0 3
20177: PUSH
20178: LD_VAR 0 3
20182: PUSH
20183: LD_VAR 0 2
20187: DIFF
20188: ST_TO_ADDR
// continue ;
20189: GO 20159
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20191: LD_VAR 0 2
20195: PPUSH
20196: LD_INT 3
20198: PUSH
20199: LD_INT 22
20201: PUSH
20202: LD_INT 0
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PPUSH
20213: CALL_OW 69
20217: PPUSH
20218: LD_VAR 0 2
20222: PPUSH
20223: CALL_OW 74
20227: PPUSH
20228: CALL_OW 115
// end ;
20232: GO 20159
20234: POP
20235: POP
// until not tmp ;
20236: LD_VAR 0 3
20240: NOT
20241: IFFALSE 20142
// end ;
20243: PPOPN 3
20245: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20246: LD_EXP 51
20250: PUSH
20251: LD_EXP 76
20255: AND
20256: IFFALSE 20310
20258: GO 20260
20260: DISABLE
// begin ToLua ( displayTroll(); ) ;
20261: LD_STRING displayTroll();
20263: PPUSH
20264: CALL_OW 559
// wait ( 3 3$00 ) ;
20268: LD_INT 6300
20270: PPUSH
20271: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20275: LD_STRING hideTroll();
20277: PPUSH
20278: CALL_OW 559
// wait ( 1 1$00 ) ;
20282: LD_INT 2100
20284: PPUSH
20285: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20289: LD_STRING displayTroll();
20291: PPUSH
20292: CALL_OW 559
// wait ( 1 1$00 ) ;
20296: LD_INT 2100
20298: PPUSH
20299: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20303: LD_STRING hideTroll();
20305: PPUSH
20306: CALL_OW 559
// end ;
20310: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20311: LD_EXP 51
20315: PUSH
20316: LD_EXP 77
20320: AND
20321: IFFALSE 20384
20323: GO 20325
20325: DISABLE
20326: LD_INT 0
20328: PPUSH
// begin p := 0 ;
20329: LD_ADDR_VAR 0 1
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// repeat game_speed := 1 ;
20337: LD_ADDR_OWVAR 65
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20345: LD_INT 35
20347: PPUSH
20348: CALL_OW 67
// p := p + 1 ;
20352: LD_ADDR_VAR 0 1
20356: PUSH
20357: LD_VAR 0 1
20361: PUSH
20362: LD_INT 1
20364: PLUS
20365: ST_TO_ADDR
// until p >= 60 ;
20366: LD_VAR 0 1
20370: PUSH
20371: LD_INT 60
20373: GREATEREQUAL
20374: IFFALSE 20337
// game_speed := 4 ;
20376: LD_ADDR_OWVAR 65
20380: PUSH
20381: LD_INT 4
20383: ST_TO_ADDR
// end ;
20384: PPOPN 1
20386: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20387: LD_EXP 51
20391: PUSH
20392: LD_EXP 78
20396: AND
20397: IFFALSE 20543
20399: GO 20401
20401: DISABLE
20402: LD_INT 0
20404: PPUSH
20405: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20406: LD_ADDR_VAR 0 1
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: LD_OWVAR 2
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 30
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 69
20459: ST_TO_ADDR
// if not depot then
20460: LD_VAR 0 1
20464: NOT
20465: IFFALSE 20469
// exit ;
20467: GO 20543
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20469: LD_ADDR_VAR 0 2
20473: PUSH
20474: LD_VAR 0 1
20478: PUSH
20479: LD_INT 1
20481: PPUSH
20482: LD_VAR 0 1
20486: PPUSH
20487: CALL_OW 12
20491: ARRAY
20492: PPUSH
20493: CALL_OW 274
20497: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20498: LD_VAR 0 2
20502: PPUSH
20503: LD_INT 1
20505: PPUSH
20506: LD_INT 0
20508: PPUSH
20509: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_INT 2
20520: PPUSH
20521: LD_INT 0
20523: PPUSH
20524: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20528: LD_VAR 0 2
20532: PPUSH
20533: LD_INT 3
20535: PPUSH
20536: LD_INT 0
20538: PPUSH
20539: CALL_OW 277
// end ;
20543: PPOPN 2
20545: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20546: LD_EXP 51
20550: PUSH
20551: LD_EXP 79
20555: AND
20556: IFFALSE 20653
20558: GO 20560
20560: DISABLE
20561: LD_INT 0
20563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20564: LD_ADDR_VAR 0 1
20568: PUSH
20569: LD_INT 22
20571: PUSH
20572: LD_OWVAR 2
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: PUSH
20581: LD_INT 21
20583: PUSH
20584: LD_INT 1
20586: PUSH
20587: EMPTY
20588: LIST
20589: LIST
20590: PUSH
20591: LD_INT 3
20593: PUSH
20594: LD_INT 23
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: LIST
20612: PPUSH
20613: CALL_OW 69
20617: ST_TO_ADDR
// if not tmp then
20618: LD_VAR 0 1
20622: NOT
20623: IFFALSE 20627
// exit ;
20625: GO 20653
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20627: LD_VAR 0 1
20631: PUSH
20632: LD_INT 1
20634: PPUSH
20635: LD_VAR 0 1
20639: PPUSH
20640: CALL_OW 12
20644: ARRAY
20645: PPUSH
20646: LD_INT 200
20648: PPUSH
20649: CALL_OW 234
// end ;
20653: PPOPN 1
20655: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20656: LD_EXP 51
20660: PUSH
20661: LD_EXP 80
20665: AND
20666: IFFALSE 20745
20668: GO 20670
20670: DISABLE
20671: LD_INT 0
20673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20674: LD_ADDR_VAR 0 1
20678: PUSH
20679: LD_INT 22
20681: PUSH
20682: LD_OWVAR 2
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 21
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: EMPTY
20702: LIST
20703: LIST
20704: PPUSH
20705: CALL_OW 69
20709: ST_TO_ADDR
// if not tmp then
20710: LD_VAR 0 1
20714: NOT
20715: IFFALSE 20719
// exit ;
20717: GO 20745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20719: LD_VAR 0 1
20723: PUSH
20724: LD_INT 1
20726: PPUSH
20727: LD_VAR 0 1
20731: PPUSH
20732: CALL_OW 12
20736: ARRAY
20737: PPUSH
20738: LD_INT 60
20740: PPUSH
20741: CALL_OW 234
// end ;
20745: PPOPN 1
20747: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20748: LD_EXP 51
20752: PUSH
20753: LD_EXP 81
20757: AND
20758: IFFALSE 20857
20760: GO 20762
20762: DISABLE
20763: LD_INT 0
20765: PPUSH
20766: PPUSH
// begin enable ;
20767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20768: LD_ADDR_VAR 0 1
20772: PUSH
20773: LD_INT 22
20775: PUSH
20776: LD_OWVAR 2
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 61
20787: PUSH
20788: EMPTY
20789: LIST
20790: PUSH
20791: LD_INT 33
20793: PUSH
20794: LD_INT 2
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: LIST
20805: PPUSH
20806: CALL_OW 69
20810: ST_TO_ADDR
// if not tmp then
20811: LD_VAR 0 1
20815: NOT
20816: IFFALSE 20820
// exit ;
20818: GO 20857
// for i in tmp do
20820: LD_ADDR_VAR 0 2
20824: PUSH
20825: LD_VAR 0 1
20829: PUSH
20830: FOR_IN
20831: IFFALSE 20855
// if IsControledBy ( i ) then
20833: LD_VAR 0 2
20837: PPUSH
20838: CALL_OW 312
20842: IFFALSE 20853
// ComUnlink ( i ) ;
20844: LD_VAR 0 2
20848: PPUSH
20849: CALL_OW 136
20853: GO 20830
20855: POP
20856: POP
// end ;
20857: PPOPN 2
20859: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20860: LD_EXP 51
20864: PUSH
20865: LD_EXP 82
20869: AND
20870: IFFALSE 21010
20872: GO 20874
20874: DISABLE
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
// begin ToLua ( displayPowell(); ) ;
20879: LD_STRING displayPowell();
20881: PPUSH
20882: CALL_OW 559
// uc_side := 0 ;
20886: LD_ADDR_OWVAR 20
20890: PUSH
20891: LD_INT 0
20893: ST_TO_ADDR
// uc_nation := 2 ;
20894: LD_ADDR_OWVAR 21
20898: PUSH
20899: LD_INT 2
20901: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20902: LD_ADDR_OWVAR 37
20906: PUSH
20907: LD_INT 14
20909: ST_TO_ADDR
// vc_engine := engine_siberite ;
20910: LD_ADDR_OWVAR 39
20914: PUSH
20915: LD_INT 3
20917: ST_TO_ADDR
// vc_control := control_apeman ;
20918: LD_ADDR_OWVAR 38
20922: PUSH
20923: LD_INT 5
20925: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20926: LD_ADDR_OWVAR 40
20930: PUSH
20931: LD_INT 29
20933: ST_TO_ADDR
// un := CreateVehicle ;
20934: LD_ADDR_VAR 0 2
20938: PUSH
20939: CALL_OW 45
20943: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20944: LD_VAR 0 2
20948: PPUSH
20949: LD_INT 1
20951: PPUSH
20952: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20956: LD_INT 35
20958: PPUSH
20959: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20963: LD_VAR 0 2
20967: PPUSH
20968: LD_INT 22
20970: PUSH
20971: LD_OWVAR 2
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: PPUSH
20980: CALL_OW 69
20984: PPUSH
20985: LD_VAR 0 2
20989: PPUSH
20990: CALL_OW 74
20994: PPUSH
20995: CALL_OW 115
// until IsDead ( un ) ;
20999: LD_VAR 0 2
21003: PPUSH
21004: CALL_OW 301
21008: IFFALSE 20956
// end ;
21010: PPOPN 2
21012: END
// every 0 0$1 trigger StreamModeActive and sStu do
21013: LD_EXP 51
21017: PUSH
21018: LD_EXP 90
21022: AND
21023: IFFALSE 21039
21025: GO 21027
21027: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21028: LD_STRING displayStucuk();
21030: PPUSH
21031: CALL_OW 559
// ResetFog ;
21035: CALL_OW 335
// end ;
21039: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21040: LD_EXP 51
21044: PUSH
21045: LD_EXP 83
21049: AND
21050: IFFALSE 21191
21052: GO 21054
21054: DISABLE
21055: LD_INT 0
21057: PPUSH
21058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21059: LD_ADDR_VAR 0 2
21063: PUSH
21064: LD_INT 22
21066: PUSH
21067: LD_OWVAR 2
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 21
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PPUSH
21090: CALL_OW 69
21094: ST_TO_ADDR
// if not tmp then
21095: LD_VAR 0 2
21099: NOT
21100: IFFALSE 21104
// exit ;
21102: GO 21191
// un := tmp [ rand ( 1 , tmp ) ] ;
21104: LD_ADDR_VAR 0 1
21108: PUSH
21109: LD_VAR 0 2
21113: PUSH
21114: LD_INT 1
21116: PPUSH
21117: LD_VAR 0 2
21121: PPUSH
21122: CALL_OW 12
21126: ARRAY
21127: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21128: LD_VAR 0 1
21132: PPUSH
21133: LD_INT 0
21135: PPUSH
21136: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: LD_OWVAR 3
21149: PUSH
21150: LD_VAR 0 1
21154: DIFF
21155: PPUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 74
21165: PPUSH
21166: CALL_OW 115
// wait ( 0 0$20 ) ;
21170: LD_INT 700
21172: PPUSH
21173: CALL_OW 67
// SetSide ( un , your_side ) ;
21177: LD_VAR 0 1
21181: PPUSH
21182: LD_OWVAR 2
21186: PPUSH
21187: CALL_OW 235
// end ;
21191: PPOPN 2
21193: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21194: LD_EXP 51
21198: PUSH
21199: LD_EXP 84
21203: AND
21204: IFFALSE 21310
21206: GO 21208
21208: DISABLE
21209: LD_INT 0
21211: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21212: LD_ADDR_VAR 0 1
21216: PUSH
21217: LD_INT 22
21219: PUSH
21220: LD_OWVAR 2
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: PUSH
21232: LD_INT 30
21234: PUSH
21235: LD_INT 0
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 30
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: PPUSH
21261: CALL_OW 69
21265: ST_TO_ADDR
// if not depot then
21266: LD_VAR 0 1
21270: NOT
21271: IFFALSE 21275
// exit ;
21273: GO 21310
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21275: LD_VAR 0 1
21279: PUSH
21280: LD_INT 1
21282: ARRAY
21283: PPUSH
21284: CALL_OW 250
21288: PPUSH
21289: LD_VAR 0 1
21293: PUSH
21294: LD_INT 1
21296: ARRAY
21297: PPUSH
21298: CALL_OW 251
21302: PPUSH
21303: LD_INT 70
21305: PPUSH
21306: CALL_OW 495
// end ;
21310: PPOPN 1
21312: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21313: LD_EXP 51
21317: PUSH
21318: LD_EXP 85
21322: AND
21323: IFFALSE 21534
21325: GO 21327
21327: DISABLE
21328: LD_INT 0
21330: PPUSH
21331: PPUSH
21332: PPUSH
21333: PPUSH
21334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21335: LD_ADDR_VAR 0 5
21339: PUSH
21340: LD_INT 22
21342: PUSH
21343: LD_OWVAR 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 21
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL_OW 69
21370: ST_TO_ADDR
// if not tmp then
21371: LD_VAR 0 5
21375: NOT
21376: IFFALSE 21380
// exit ;
21378: GO 21534
// for i in tmp do
21380: LD_ADDR_VAR 0 1
21384: PUSH
21385: LD_VAR 0 5
21389: PUSH
21390: FOR_IN
21391: IFFALSE 21532
// begin d := rand ( 0 , 5 ) ;
21393: LD_ADDR_VAR 0 4
21397: PUSH
21398: LD_INT 0
21400: PPUSH
21401: LD_INT 5
21403: PPUSH
21404: CALL_OW 12
21408: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21409: LD_ADDR_VAR 0 2
21413: PUSH
21414: LD_VAR 0 1
21418: PPUSH
21419: CALL_OW 250
21423: PPUSH
21424: LD_VAR 0 4
21428: PPUSH
21429: LD_INT 3
21431: PPUSH
21432: LD_INT 12
21434: PPUSH
21435: CALL_OW 12
21439: PPUSH
21440: CALL_OW 272
21444: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21445: LD_ADDR_VAR 0 3
21449: PUSH
21450: LD_VAR 0 1
21454: PPUSH
21455: CALL_OW 251
21459: PPUSH
21460: LD_VAR 0 4
21464: PPUSH
21465: LD_INT 3
21467: PPUSH
21468: LD_INT 12
21470: PPUSH
21471: CALL_OW 12
21475: PPUSH
21476: CALL_OW 273
21480: ST_TO_ADDR
// if ValidHex ( x , y ) then
21481: LD_VAR 0 2
21485: PPUSH
21486: LD_VAR 0 3
21490: PPUSH
21491: CALL_OW 488
21495: IFFALSE 21530
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21497: LD_VAR 0 1
21501: PPUSH
21502: LD_VAR 0 2
21506: PPUSH
21507: LD_VAR 0 3
21511: PPUSH
21512: LD_INT 3
21514: PPUSH
21515: LD_INT 6
21517: PPUSH
21518: CALL_OW 12
21522: PPUSH
21523: LD_INT 1
21525: PPUSH
21526: CALL_OW 483
// end ;
21530: GO 21390
21532: POP
21533: POP
// end ;
21534: PPOPN 5
21536: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21537: LD_EXP 51
21541: PUSH
21542: LD_EXP 86
21546: AND
21547: IFFALSE 21641
21549: GO 21551
21551: DISABLE
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21556: LD_ADDR_VAR 0 2
21560: PUSH
21561: LD_INT 22
21563: PUSH
21564: LD_OWVAR 2
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 32
21575: PUSH
21576: LD_INT 1
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 2
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: PPUSH
21598: CALL_OW 69
21602: ST_TO_ADDR
// if not tmp then
21603: LD_VAR 0 2
21607: NOT
21608: IFFALSE 21612
// exit ;
21610: GO 21641
// for i in tmp do
21612: LD_ADDR_VAR 0 1
21616: PUSH
21617: LD_VAR 0 2
21621: PUSH
21622: FOR_IN
21623: IFFALSE 21639
// SetFuel ( i , 0 ) ;
21625: LD_VAR 0 1
21629: PPUSH
21630: LD_INT 0
21632: PPUSH
21633: CALL_OW 240
21637: GO 21622
21639: POP
21640: POP
// end ;
21641: PPOPN 2
21643: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21644: LD_EXP 51
21648: PUSH
21649: LD_EXP 87
21653: AND
21654: IFFALSE 21720
21656: GO 21658
21658: DISABLE
21659: LD_INT 0
21661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21662: LD_ADDR_VAR 0 1
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 30
21681: PUSH
21682: LD_INT 29
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: ST_TO_ADDR
// if not tmp then
21698: LD_VAR 0 1
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21720
// DestroyUnit ( tmp [ 1 ] ) ;
21707: LD_VAR 0 1
21711: PUSH
21712: LD_INT 1
21714: ARRAY
21715: PPUSH
21716: CALL_OW 65
// end ;
21720: PPOPN 1
21722: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21723: LD_EXP 51
21727: PUSH
21728: LD_EXP 89
21732: AND
21733: IFFALSE 21862
21735: GO 21737
21737: DISABLE
21738: LD_INT 0
21740: PPUSH
// begin uc_side := 0 ;
21741: LD_ADDR_OWVAR 20
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// uc_nation := nation_arabian ;
21749: LD_ADDR_OWVAR 21
21753: PUSH
21754: LD_INT 2
21756: ST_TO_ADDR
// hc_gallery :=  ;
21757: LD_ADDR_OWVAR 33
21761: PUSH
21762: LD_STRING 
21764: ST_TO_ADDR
// hc_name :=  ;
21765: LD_ADDR_OWVAR 26
21769: PUSH
21770: LD_STRING 
21772: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21773: LD_INT 1
21775: PPUSH
21776: LD_INT 11
21778: PPUSH
21779: LD_INT 10
21781: PPUSH
21782: CALL_OW 380
// un := CreateHuman ;
21786: LD_ADDR_VAR 0 1
21790: PUSH
21791: CALL_OW 44
21795: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21796: LD_VAR 0 1
21800: PPUSH
21801: LD_INT 1
21803: PPUSH
21804: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21808: LD_INT 35
21810: PPUSH
21811: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21815: LD_VAR 0 1
21819: PPUSH
21820: LD_INT 22
21822: PUSH
21823: LD_OWVAR 2
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PPUSH
21832: CALL_OW 69
21836: PPUSH
21837: LD_VAR 0 1
21841: PPUSH
21842: CALL_OW 74
21846: PPUSH
21847: CALL_OW 115
// until IsDead ( un ) ;
21851: LD_VAR 0 1
21855: PPUSH
21856: CALL_OW 301
21860: IFFALSE 21808
// end ;
21862: PPOPN 1
21864: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21865: LD_EXP 51
21869: PUSH
21870: LD_EXP 91
21874: AND
21875: IFFALSE 21887
21877: GO 21879
21879: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21880: LD_STRING earthquake(getX(game), 0, 32)
21882: PPUSH
21883: CALL_OW 559
21887: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21888: LD_EXP 51
21892: PUSH
21893: LD_EXP 92
21897: AND
21898: IFFALSE 21989
21900: GO 21902
21902: DISABLE
21903: LD_INT 0
21905: PPUSH
// begin enable ;
21906: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21907: LD_ADDR_VAR 0 1
21911: PUSH
21912: LD_INT 22
21914: PUSH
21915: LD_OWVAR 2
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 21
21926: PUSH
21927: LD_INT 2
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 33
21936: PUSH
21937: LD_INT 3
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 69
21953: ST_TO_ADDR
// if not tmp then
21954: LD_VAR 0 1
21958: NOT
21959: IFFALSE 21963
// exit ;
21961: GO 21989
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21963: LD_VAR 0 1
21967: PUSH
21968: LD_INT 1
21970: PPUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 12
21980: ARRAY
21981: PPUSH
21982: LD_INT 1
21984: PPUSH
21985: CALL_OW 234
// end ;
21989: PPOPN 1
21991: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21992: LD_EXP 51
21996: PUSH
21997: LD_EXP 93
22001: AND
22002: IFFALSE 22143
22004: GO 22006
22006: DISABLE
22007: LD_INT 0
22009: PPUSH
22010: PPUSH
22011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_INT 22
22019: PUSH
22020: LD_OWVAR 2
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: LD_INT 25
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PPUSH
22043: CALL_OW 69
22047: ST_TO_ADDR
// if not tmp then
22048: LD_VAR 0 3
22052: NOT
22053: IFFALSE 22057
// exit ;
22055: GO 22143
// un := tmp [ rand ( 1 , tmp ) ] ;
22057: LD_ADDR_VAR 0 2
22061: PUSH
22062: LD_VAR 0 3
22066: PUSH
22067: LD_INT 1
22069: PPUSH
22070: LD_VAR 0 3
22074: PPUSH
22075: CALL_OW 12
22079: ARRAY
22080: ST_TO_ADDR
// if Crawls ( un ) then
22081: LD_VAR 0 2
22085: PPUSH
22086: CALL_OW 318
22090: IFFALSE 22101
// ComWalk ( un ) ;
22092: LD_VAR 0 2
22096: PPUSH
22097: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22101: LD_VAR 0 2
22105: PPUSH
22106: LD_INT 9
22108: PPUSH
22109: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22113: LD_INT 28
22115: PPUSH
22116: LD_OWVAR 2
22120: PPUSH
22121: LD_INT 2
22123: PPUSH
22124: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22128: LD_INT 29
22130: PPUSH
22131: LD_OWVAR 2
22135: PPUSH
22136: LD_INT 2
22138: PPUSH
22139: CALL_OW 322
// end ;
22143: PPOPN 3
22145: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22146: LD_EXP 51
22150: PUSH
22151: LD_EXP 94
22155: AND
22156: IFFALSE 22267
22158: GO 22160
22160: DISABLE
22161: LD_INT 0
22163: PPUSH
22164: PPUSH
22165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22166: LD_ADDR_VAR 0 3
22170: PUSH
22171: LD_INT 22
22173: PUSH
22174: LD_OWVAR 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 25
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PPUSH
22197: CALL_OW 69
22201: ST_TO_ADDR
// if not tmp then
22202: LD_VAR 0 3
22206: NOT
22207: IFFALSE 22211
// exit ;
22209: GO 22267
// un := tmp [ rand ( 1 , tmp ) ] ;
22211: LD_ADDR_VAR 0 2
22215: PUSH
22216: LD_VAR 0 3
22220: PUSH
22221: LD_INT 1
22223: PPUSH
22224: LD_VAR 0 3
22228: PPUSH
22229: CALL_OW 12
22233: ARRAY
22234: ST_TO_ADDR
// if Crawls ( un ) then
22235: LD_VAR 0 2
22239: PPUSH
22240: CALL_OW 318
22244: IFFALSE 22255
// ComWalk ( un ) ;
22246: LD_VAR 0 2
22250: PPUSH
22251: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22255: LD_VAR 0 2
22259: PPUSH
22260: LD_INT 8
22262: PPUSH
22263: CALL_OW 336
// end ;
22267: PPOPN 3
22269: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22270: LD_EXP 51
22274: PUSH
22275: LD_EXP 95
22279: AND
22280: IFFALSE 22424
22282: GO 22284
22284: DISABLE
22285: LD_INT 0
22287: PPUSH
22288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22289: LD_ADDR_VAR 0 2
22293: PUSH
22294: LD_INT 22
22296: PUSH
22297: LD_OWVAR 2
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: LD_INT 21
22308: PUSH
22309: LD_INT 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 2
22318: PUSH
22319: LD_INT 34
22321: PUSH
22322: LD_INT 12
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 34
22331: PUSH
22332: LD_INT 51
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 34
22341: PUSH
22342: LD_INT 32
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: LIST
22359: PPUSH
22360: CALL_OW 69
22364: ST_TO_ADDR
// if not tmp then
22365: LD_VAR 0 2
22369: NOT
22370: IFFALSE 22374
// exit ;
22372: GO 22424
// for i in tmp do
22374: LD_ADDR_VAR 0 1
22378: PUSH
22379: LD_VAR 0 2
22383: PUSH
22384: FOR_IN
22385: IFFALSE 22422
// if GetCargo ( i , mat_artifact ) = 0 then
22387: LD_VAR 0 1
22391: PPUSH
22392: LD_INT 4
22394: PPUSH
22395: CALL_OW 289
22399: PUSH
22400: LD_INT 0
22402: EQUAL
22403: IFFALSE 22420
// SetCargo ( i , mat_siberit , 100 ) ;
22405: LD_VAR 0 1
22409: PPUSH
22410: LD_INT 3
22412: PPUSH
22413: LD_INT 100
22415: PPUSH
22416: CALL_OW 290
22420: GO 22384
22422: POP
22423: POP
// end ;
22424: PPOPN 2
22426: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22427: LD_EXP 51
22431: PUSH
22432: LD_EXP 96
22436: AND
22437: IFFALSE 22620
22439: GO 22441
22441: DISABLE
22442: LD_INT 0
22444: PPUSH
22445: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22446: LD_ADDR_VAR 0 2
22450: PUSH
22451: LD_INT 22
22453: PUSH
22454: LD_OWVAR 2
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PPUSH
22463: CALL_OW 69
22467: ST_TO_ADDR
// if not tmp then
22468: LD_VAR 0 2
22472: NOT
22473: IFFALSE 22477
// exit ;
22475: GO 22620
// for i := 1 to 2 do
22477: LD_ADDR_VAR 0 1
22481: PUSH
22482: DOUBLE
22483: LD_INT 1
22485: DEC
22486: ST_TO_ADDR
22487: LD_INT 2
22489: PUSH
22490: FOR_TO
22491: IFFALSE 22618
// begin uc_side := your_side ;
22493: LD_ADDR_OWVAR 20
22497: PUSH
22498: LD_OWVAR 2
22502: ST_TO_ADDR
// uc_nation := nation_american ;
22503: LD_ADDR_OWVAR 21
22507: PUSH
22508: LD_INT 1
22510: ST_TO_ADDR
// vc_chassis := us_morphling ;
22511: LD_ADDR_OWVAR 37
22515: PUSH
22516: LD_INT 5
22518: ST_TO_ADDR
// vc_engine := engine_siberite ;
22519: LD_ADDR_OWVAR 39
22523: PUSH
22524: LD_INT 3
22526: ST_TO_ADDR
// vc_control := control_computer ;
22527: LD_ADDR_OWVAR 38
22531: PUSH
22532: LD_INT 3
22534: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22535: LD_ADDR_OWVAR 40
22539: PUSH
22540: LD_INT 10
22542: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22543: LD_VAR 0 2
22547: PUSH
22548: LD_INT 1
22550: ARRAY
22551: PPUSH
22552: CALL_OW 310
22556: NOT
22557: IFFALSE 22604
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22559: CALL_OW 45
22563: PPUSH
22564: LD_VAR 0 2
22568: PUSH
22569: LD_INT 1
22571: ARRAY
22572: PPUSH
22573: CALL_OW 250
22577: PPUSH
22578: LD_VAR 0 2
22582: PUSH
22583: LD_INT 1
22585: ARRAY
22586: PPUSH
22587: CALL_OW 251
22591: PPUSH
22592: LD_INT 12
22594: PPUSH
22595: LD_INT 1
22597: PPUSH
22598: CALL_OW 50
22602: GO 22616
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22604: CALL_OW 45
22608: PPUSH
22609: LD_INT 1
22611: PPUSH
22612: CALL_OW 51
// end ;
22616: GO 22490
22618: POP
22619: POP
// end ;
22620: PPOPN 2
22622: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22623: LD_EXP 51
22627: PUSH
22628: LD_EXP 97
22632: AND
22633: IFFALSE 22855
22635: GO 22637
22637: DISABLE
22638: LD_INT 0
22640: PPUSH
22641: PPUSH
22642: PPUSH
22643: PPUSH
22644: PPUSH
22645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22646: LD_ADDR_VAR 0 6
22650: PUSH
22651: LD_INT 22
22653: PUSH
22654: LD_OWVAR 2
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: LD_INT 21
22665: PUSH
22666: LD_INT 1
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 3
22675: PUSH
22676: LD_INT 23
22678: PUSH
22679: LD_INT 0
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: LIST
22694: PPUSH
22695: CALL_OW 69
22699: ST_TO_ADDR
// if not tmp then
22700: LD_VAR 0 6
22704: NOT
22705: IFFALSE 22709
// exit ;
22707: GO 22855
// s1 := rand ( 1 , 4 ) ;
22709: LD_ADDR_VAR 0 2
22713: PUSH
22714: LD_INT 1
22716: PPUSH
22717: LD_INT 4
22719: PPUSH
22720: CALL_OW 12
22724: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22725: LD_ADDR_VAR 0 4
22729: PUSH
22730: LD_VAR 0 6
22734: PUSH
22735: LD_INT 1
22737: ARRAY
22738: PPUSH
22739: LD_VAR 0 2
22743: PPUSH
22744: CALL_OW 259
22748: ST_TO_ADDR
// if s1 = 1 then
22749: LD_VAR 0 2
22753: PUSH
22754: LD_INT 1
22756: EQUAL
22757: IFFALSE 22777
// s2 := rand ( 2 , 4 ) else
22759: LD_ADDR_VAR 0 3
22763: PUSH
22764: LD_INT 2
22766: PPUSH
22767: LD_INT 4
22769: PPUSH
22770: CALL_OW 12
22774: ST_TO_ADDR
22775: GO 22785
// s2 := 1 ;
22777: LD_ADDR_VAR 0 3
22781: PUSH
22782: LD_INT 1
22784: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22785: LD_ADDR_VAR 0 5
22789: PUSH
22790: LD_VAR 0 6
22794: PUSH
22795: LD_INT 1
22797: ARRAY
22798: PPUSH
22799: LD_VAR 0 3
22803: PPUSH
22804: CALL_OW 259
22808: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22809: LD_VAR 0 6
22813: PUSH
22814: LD_INT 1
22816: ARRAY
22817: PPUSH
22818: LD_VAR 0 2
22822: PPUSH
22823: LD_VAR 0 5
22827: PPUSH
22828: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22832: LD_VAR 0 6
22836: PUSH
22837: LD_INT 1
22839: ARRAY
22840: PPUSH
22841: LD_VAR 0 3
22845: PPUSH
22846: LD_VAR 0 4
22850: PPUSH
22851: CALL_OW 237
// end ;
22855: PPOPN 6
22857: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22858: LD_EXP 51
22862: PUSH
22863: LD_EXP 98
22867: AND
22868: IFFALSE 22947
22870: GO 22872
22872: DISABLE
22873: LD_INT 0
22875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_INT 22
22883: PUSH
22884: LD_OWVAR 2
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 30
22895: PUSH
22896: LD_INT 3
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 69
22911: ST_TO_ADDR
// if not tmp then
22912: LD_VAR 0 1
22916: NOT
22917: IFFALSE 22921
// exit ;
22919: GO 22947
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22921: LD_VAR 0 1
22925: PUSH
22926: LD_INT 1
22928: PPUSH
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL_OW 12
22938: ARRAY
22939: PPUSH
22940: LD_INT 1
22942: PPUSH
22943: CALL_OW 234
// end ;
22947: PPOPN 1
22949: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22950: LD_EXP 51
22954: PUSH
22955: LD_EXP 99
22959: AND
22960: IFFALSE 23072
22962: GO 22964
22964: DISABLE
22965: LD_INT 0
22967: PPUSH
22968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22969: LD_ADDR_VAR 0 2
22973: PUSH
22974: LD_INT 22
22976: PUSH
22977: LD_OWVAR 2
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 2
22988: PUSH
22989: LD_INT 30
22991: PUSH
22992: LD_INT 27
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 30
23001: PUSH
23002: LD_INT 26
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 30
23011: PUSH
23012: LD_INT 28
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PPUSH
23029: CALL_OW 69
23033: ST_TO_ADDR
// if not tmp then
23034: LD_VAR 0 2
23038: NOT
23039: IFFALSE 23043
// exit ;
23041: GO 23072
// for i in tmp do
23043: LD_ADDR_VAR 0 1
23047: PUSH
23048: LD_VAR 0 2
23052: PUSH
23053: FOR_IN
23054: IFFALSE 23070
// SetLives ( i , 1 ) ;
23056: LD_VAR 0 1
23060: PPUSH
23061: LD_INT 1
23063: PPUSH
23064: CALL_OW 234
23068: GO 23053
23070: POP
23071: POP
// end ;
23072: PPOPN 2
23074: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23075: LD_EXP 51
23079: PUSH
23080: LD_EXP 100
23084: AND
23085: IFFALSE 23359
23087: GO 23089
23089: DISABLE
23090: LD_INT 0
23092: PPUSH
23093: PPUSH
23094: PPUSH
// begin i := rand ( 1 , 7 ) ;
23095: LD_ADDR_VAR 0 1
23099: PUSH
23100: LD_INT 1
23102: PPUSH
23103: LD_INT 7
23105: PPUSH
23106: CALL_OW 12
23110: ST_TO_ADDR
// case i of 1 :
23111: LD_VAR 0 1
23115: PUSH
23116: LD_INT 1
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23134
23124: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23125: LD_STRING earthquake(getX(game), 0, 32)
23127: PPUSH
23128: CALL_OW 559
23132: GO 23359
23134: LD_INT 2
23136: DOUBLE
23137: EQUAL
23138: IFTRUE 23142
23140: GO 23156
23142: POP
// begin ToLua ( displayStucuk(); ) ;
23143: LD_STRING displayStucuk();
23145: PPUSH
23146: CALL_OW 559
// ResetFog ;
23150: CALL_OW 335
// end ; 3 :
23154: GO 23359
23156: LD_INT 3
23158: DOUBLE
23159: EQUAL
23160: IFTRUE 23164
23162: GO 23268
23164: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23165: LD_ADDR_VAR 0 2
23169: PUSH
23170: LD_INT 22
23172: PUSH
23173: LD_OWVAR 2
23177: PUSH
23178: EMPTY
23179: LIST
23180: LIST
23181: PUSH
23182: LD_INT 25
23184: PUSH
23185: LD_INT 1
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PPUSH
23196: CALL_OW 69
23200: ST_TO_ADDR
// if not tmp then
23201: LD_VAR 0 2
23205: NOT
23206: IFFALSE 23210
// exit ;
23208: GO 23359
// un := tmp [ rand ( 1 , tmp ) ] ;
23210: LD_ADDR_VAR 0 3
23214: PUSH
23215: LD_VAR 0 2
23219: PUSH
23220: LD_INT 1
23222: PPUSH
23223: LD_VAR 0 2
23227: PPUSH
23228: CALL_OW 12
23232: ARRAY
23233: ST_TO_ADDR
// if Crawls ( un ) then
23234: LD_VAR 0 3
23238: PPUSH
23239: CALL_OW 318
23243: IFFALSE 23254
// ComWalk ( un ) ;
23245: LD_VAR 0 3
23249: PPUSH
23250: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23254: LD_VAR 0 3
23258: PPUSH
23259: LD_INT 8
23261: PPUSH
23262: CALL_OW 336
// end ; 4 :
23266: GO 23359
23268: LD_INT 4
23270: DOUBLE
23271: EQUAL
23272: IFTRUE 23276
23274: GO 23337
23276: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23277: LD_ADDR_VAR 0 2
23281: PUSH
23282: LD_INT 22
23284: PUSH
23285: LD_OWVAR 2
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 30
23296: PUSH
23297: LD_INT 29
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: ST_TO_ADDR
// if not tmp then
23313: LD_VAR 0 2
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23359
// DestroyUnit ( tmp [ 1 ] ) ;
23322: LD_VAR 0 2
23326: PUSH
23327: LD_INT 1
23329: ARRAY
23330: PPUSH
23331: CALL_OW 65
// end ; 5 .. 7 :
23335: GO 23359
23337: LD_INT 5
23339: DOUBLE
23340: GREATEREQUAL
23341: IFFALSE 23349
23343: LD_INT 7
23345: DOUBLE
23346: LESSEQUAL
23347: IFTRUE 23351
23349: GO 23358
23351: POP
// StreamSibBomb ; end ;
23352: CALL 19609 0 0
23356: GO 23359
23358: POP
// end ;
23359: PPOPN 3
23361: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23362: LD_EXP 51
23366: PUSH
23367: LD_EXP 101
23371: AND
23372: IFFALSE 23528
23374: GO 23376
23376: DISABLE
23377: LD_INT 0
23379: PPUSH
23380: PPUSH
23381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23382: LD_ADDR_VAR 0 2
23386: PUSH
23387: LD_INT 81
23389: PUSH
23390: LD_OWVAR 2
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: PUSH
23402: LD_INT 21
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: PUSH
23412: LD_INT 21
23414: PUSH
23415: LD_INT 2
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PPUSH
23431: CALL_OW 69
23435: ST_TO_ADDR
// if not tmp then
23436: LD_VAR 0 2
23440: NOT
23441: IFFALSE 23445
// exit ;
23443: GO 23528
// p := 0 ;
23445: LD_ADDR_VAR 0 3
23449: PUSH
23450: LD_INT 0
23452: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23453: LD_INT 35
23455: PPUSH
23456: CALL_OW 67
// p := p + 1 ;
23460: LD_ADDR_VAR 0 3
23464: PUSH
23465: LD_VAR 0 3
23469: PUSH
23470: LD_INT 1
23472: PLUS
23473: ST_TO_ADDR
// for i in tmp do
23474: LD_ADDR_VAR 0 1
23478: PUSH
23479: LD_VAR 0 2
23483: PUSH
23484: FOR_IN
23485: IFFALSE 23516
// if GetLives ( i ) < 1000 then
23487: LD_VAR 0 1
23491: PPUSH
23492: CALL_OW 256
23496: PUSH
23497: LD_INT 1000
23499: LESS
23500: IFFALSE 23514
// SetLives ( i , 1000 ) ;
23502: LD_VAR 0 1
23506: PPUSH
23507: LD_INT 1000
23509: PPUSH
23510: CALL_OW 234
23514: GO 23484
23516: POP
23517: POP
// until p > 20 ;
23518: LD_VAR 0 3
23522: PUSH
23523: LD_INT 20
23525: GREATER
23526: IFFALSE 23453
// end ;
23528: PPOPN 3
23530: END
// every 0 0$1 trigger StreamModeActive and sTime do
23531: LD_EXP 51
23535: PUSH
23536: LD_EXP 102
23540: AND
23541: IFFALSE 23576
23543: GO 23545
23545: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23546: LD_INT 28
23548: PPUSH
23549: LD_OWVAR 2
23553: PPUSH
23554: LD_INT 2
23556: PPUSH
23557: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23561: LD_INT 30
23563: PPUSH
23564: LD_OWVAR 2
23568: PPUSH
23569: LD_INT 2
23571: PPUSH
23572: CALL_OW 322
// end ;
23576: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23577: LD_EXP 51
23581: PUSH
23582: LD_EXP 103
23586: AND
23587: IFFALSE 23708
23589: GO 23591
23591: DISABLE
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23596: LD_ADDR_VAR 0 2
23600: PUSH
23601: LD_INT 22
23603: PUSH
23604: LD_OWVAR 2
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 21
23615: PUSH
23616: LD_INT 1
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: PUSH
23623: LD_INT 3
23625: PUSH
23626: LD_INT 23
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: LIST
23644: PPUSH
23645: CALL_OW 69
23649: ST_TO_ADDR
// if not tmp then
23650: LD_VAR 0 2
23654: NOT
23655: IFFALSE 23659
// exit ;
23657: GO 23708
// for i in tmp do
23659: LD_ADDR_VAR 0 1
23663: PUSH
23664: LD_VAR 0 2
23668: PUSH
23669: FOR_IN
23670: IFFALSE 23706
// begin if Crawls ( i ) then
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL_OW 318
23681: IFFALSE 23692
// ComWalk ( i ) ;
23683: LD_VAR 0 1
23687: PPUSH
23688: CALL_OW 138
// SetClass ( i , 2 ) ;
23692: LD_VAR 0 1
23696: PPUSH
23697: LD_INT 2
23699: PPUSH
23700: CALL_OW 336
// end ;
23704: GO 23669
23706: POP
23707: POP
// end ;
23708: PPOPN 2
23710: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23711: LD_EXP 51
23715: PUSH
23716: LD_EXP 104
23720: AND
23721: IFFALSE 24002
23723: GO 23725
23725: DISABLE
23726: LD_INT 0
23728: PPUSH
23729: PPUSH
23730: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23731: LD_OWVAR 2
23735: PPUSH
23736: LD_INT 9
23738: PPUSH
23739: LD_INT 1
23741: PPUSH
23742: LD_INT 1
23744: PPUSH
23745: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23749: LD_INT 9
23751: PPUSH
23752: LD_OWVAR 2
23756: PPUSH
23757: CALL_OW 343
// uc_side := 9 ;
23761: LD_ADDR_OWVAR 20
23765: PUSH
23766: LD_INT 9
23768: ST_TO_ADDR
// uc_nation := 2 ;
23769: LD_ADDR_OWVAR 21
23773: PUSH
23774: LD_INT 2
23776: ST_TO_ADDR
// hc_name := Dark Warrior ;
23777: LD_ADDR_OWVAR 26
23781: PUSH
23782: LD_STRING Dark Warrior
23784: ST_TO_ADDR
// hc_gallery :=  ;
23785: LD_ADDR_OWVAR 33
23789: PUSH
23790: LD_STRING 
23792: ST_TO_ADDR
// hc_noskilllimit := true ;
23793: LD_ADDR_OWVAR 76
23797: PUSH
23798: LD_INT 1
23800: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23801: LD_ADDR_OWVAR 31
23805: PUSH
23806: LD_INT 30
23808: PUSH
23809: LD_INT 30
23811: PUSH
23812: LD_INT 30
23814: PUSH
23815: LD_INT 30
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: ST_TO_ADDR
// un := CreateHuman ;
23824: LD_ADDR_VAR 0 3
23828: PUSH
23829: CALL_OW 44
23833: ST_TO_ADDR
// hc_noskilllimit := false ;
23834: LD_ADDR_OWVAR 76
23838: PUSH
23839: LD_INT 0
23841: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23842: LD_VAR 0 3
23846: PPUSH
23847: LD_INT 1
23849: PPUSH
23850: CALL_OW 51
// p := 0 ;
23854: LD_ADDR_VAR 0 2
23858: PUSH
23859: LD_INT 0
23861: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23862: LD_INT 35
23864: PPUSH
23865: CALL_OW 67
// p := p + 1 ;
23869: LD_ADDR_VAR 0 2
23873: PUSH
23874: LD_VAR 0 2
23878: PUSH
23879: LD_INT 1
23881: PLUS
23882: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23883: LD_VAR 0 3
23887: PPUSH
23888: CALL_OW 256
23892: PUSH
23893: LD_INT 1000
23895: LESS
23896: IFFALSE 23910
// SetLives ( un , 1000 ) ;
23898: LD_VAR 0 3
23902: PPUSH
23903: LD_INT 1000
23905: PPUSH
23906: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23910: LD_VAR 0 3
23914: PPUSH
23915: LD_INT 81
23917: PUSH
23918: LD_OWVAR 2
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 91
23929: PUSH
23930: LD_VAR 0 3
23934: PUSH
23935: LD_INT 30
23937: PUSH
23938: EMPTY
23939: LIST
23940: LIST
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PPUSH
23947: CALL_OW 69
23951: PPUSH
23952: LD_VAR 0 3
23956: PPUSH
23957: CALL_OW 74
23961: PPUSH
23962: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23966: LD_VAR 0 2
23970: PUSH
23971: LD_INT 60
23973: GREATER
23974: PUSH
23975: LD_VAR 0 3
23979: PPUSH
23980: CALL_OW 301
23984: OR
23985: IFFALSE 23862
// if un then
23987: LD_VAR 0 3
23991: IFFALSE 24002
// RemoveUnit ( un ) ;
23993: LD_VAR 0 3
23997: PPUSH
23998: CALL_OW 64
// end ;
24002: PPOPN 3
24004: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24005: LD_INT 0
24007: PPUSH
// case cmd of 301 :
24008: LD_VAR 0 1
24012: PUSH
24013: LD_INT 301
24015: DOUBLE
24016: EQUAL
24017: IFTRUE 24021
24019: GO 24053
24021: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24022: LD_VAR 0 6
24026: PPUSH
24027: LD_VAR 0 7
24031: PPUSH
24032: LD_VAR 0 8
24036: PPUSH
24037: LD_VAR 0 4
24041: PPUSH
24042: LD_VAR 0 5
24046: PPUSH
24047: CALL 25254 0 5
24051: GO 24174
24053: LD_INT 302
24055: DOUBLE
24056: EQUAL
24057: IFTRUE 24061
24059: GO 24098
24061: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24062: LD_VAR 0 6
24066: PPUSH
24067: LD_VAR 0 7
24071: PPUSH
24072: LD_VAR 0 8
24076: PPUSH
24077: LD_VAR 0 9
24081: PPUSH
24082: LD_VAR 0 4
24086: PPUSH
24087: LD_VAR 0 5
24091: PPUSH
24092: CALL 25345 0 6
24096: GO 24174
24098: LD_INT 303
24100: DOUBLE
24101: EQUAL
24102: IFTRUE 24106
24104: GO 24143
24106: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24107: LD_VAR 0 6
24111: PPUSH
24112: LD_VAR 0 7
24116: PPUSH
24117: LD_VAR 0 8
24121: PPUSH
24122: LD_VAR 0 9
24126: PPUSH
24127: LD_VAR 0 4
24131: PPUSH
24132: LD_VAR 0 5
24136: PPUSH
24137: CALL 24179 0 6
24141: GO 24174
24143: LD_INT 304
24145: DOUBLE
24146: EQUAL
24147: IFTRUE 24151
24149: GO 24173
24151: POP
// hHackTeleport ( unit , x , y ) ; end ;
24152: LD_VAR 0 2
24156: PPUSH
24157: LD_VAR 0 4
24161: PPUSH
24162: LD_VAR 0 5
24166: PPUSH
24167: CALL 25938 0 3
24171: GO 24174
24173: POP
// end ;
24174: LD_VAR 0 12
24178: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24179: LD_INT 0
24181: PPUSH
24182: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24183: LD_VAR 0 1
24187: PUSH
24188: LD_INT 1
24190: LESS
24191: PUSH
24192: LD_VAR 0 1
24196: PUSH
24197: LD_INT 3
24199: GREATER
24200: OR
24201: PUSH
24202: LD_VAR 0 5
24206: PPUSH
24207: LD_VAR 0 6
24211: PPUSH
24212: CALL_OW 428
24216: OR
24217: IFFALSE 24221
// exit ;
24219: GO 24941
// uc_side := your_side ;
24221: LD_ADDR_OWVAR 20
24225: PUSH
24226: LD_OWVAR 2
24230: ST_TO_ADDR
// uc_nation := nation ;
24231: LD_ADDR_OWVAR 21
24235: PUSH
24236: LD_VAR 0 1
24240: ST_TO_ADDR
// bc_level = 1 ;
24241: LD_ADDR_OWVAR 43
24245: PUSH
24246: LD_INT 1
24248: ST_TO_ADDR
// case btype of 1 :
24249: LD_VAR 0 2
24253: PUSH
24254: LD_INT 1
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24273
24262: POP
// bc_type := b_depot ; 2 :
24263: LD_ADDR_OWVAR 42
24267: PUSH
24268: LD_INT 0
24270: ST_TO_ADDR
24271: GO 24885
24273: LD_INT 2
24275: DOUBLE
24276: EQUAL
24277: IFTRUE 24281
24279: GO 24292
24281: POP
// bc_type := b_warehouse ; 3 :
24282: LD_ADDR_OWVAR 42
24286: PUSH
24287: LD_INT 1
24289: ST_TO_ADDR
24290: GO 24885
24292: LD_INT 3
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24311
24300: POP
// bc_type := b_lab ; 4 .. 9 :
24301: LD_ADDR_OWVAR 42
24305: PUSH
24306: LD_INT 6
24308: ST_TO_ADDR
24309: GO 24885
24311: LD_INT 4
24313: DOUBLE
24314: GREATEREQUAL
24315: IFFALSE 24323
24317: LD_INT 9
24319: DOUBLE
24320: LESSEQUAL
24321: IFTRUE 24325
24323: GO 24377
24325: POP
// begin bc_type := b_lab_half ;
24326: LD_ADDR_OWVAR 42
24330: PUSH
24331: LD_INT 7
24333: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24334: LD_ADDR_OWVAR 44
24338: PUSH
24339: LD_INT 10
24341: PUSH
24342: LD_INT 11
24344: PUSH
24345: LD_INT 12
24347: PUSH
24348: LD_INT 15
24350: PUSH
24351: LD_INT 14
24353: PUSH
24354: LD_INT 13
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: PUSH
24365: LD_VAR 0 2
24369: PUSH
24370: LD_INT 3
24372: MINUS
24373: ARRAY
24374: ST_TO_ADDR
// end ; 10 .. 13 :
24375: GO 24885
24377: LD_INT 10
24379: DOUBLE
24380: GREATEREQUAL
24381: IFFALSE 24389
24383: LD_INT 13
24385: DOUBLE
24386: LESSEQUAL
24387: IFTRUE 24391
24389: GO 24468
24391: POP
// begin bc_type := b_lab_full ;
24392: LD_ADDR_OWVAR 42
24396: PUSH
24397: LD_INT 8
24399: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24400: LD_ADDR_OWVAR 44
24404: PUSH
24405: LD_INT 10
24407: PUSH
24408: LD_INT 12
24410: PUSH
24411: LD_INT 14
24413: PUSH
24414: LD_INT 13
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: LD_VAR 0 2
24427: PUSH
24428: LD_INT 9
24430: MINUS
24431: ARRAY
24432: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24433: LD_ADDR_OWVAR 45
24437: PUSH
24438: LD_INT 11
24440: PUSH
24441: LD_INT 15
24443: PUSH
24444: LD_INT 12
24446: PUSH
24447: LD_INT 15
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: PUSH
24456: LD_VAR 0 2
24460: PUSH
24461: LD_INT 9
24463: MINUS
24464: ARRAY
24465: ST_TO_ADDR
// end ; 14 :
24466: GO 24885
24468: LD_INT 14
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24476
24474: GO 24487
24476: POP
// bc_type := b_workshop ; 15 :
24477: LD_ADDR_OWVAR 42
24481: PUSH
24482: LD_INT 2
24484: ST_TO_ADDR
24485: GO 24885
24487: LD_INT 15
24489: DOUBLE
24490: EQUAL
24491: IFTRUE 24495
24493: GO 24506
24495: POP
// bc_type := b_factory ; 16 :
24496: LD_ADDR_OWVAR 42
24500: PUSH
24501: LD_INT 3
24503: ST_TO_ADDR
24504: GO 24885
24506: LD_INT 16
24508: DOUBLE
24509: EQUAL
24510: IFTRUE 24514
24512: GO 24525
24514: POP
// bc_type := b_ext_gun ; 17 :
24515: LD_ADDR_OWVAR 42
24519: PUSH
24520: LD_INT 17
24522: ST_TO_ADDR
24523: GO 24885
24525: LD_INT 17
24527: DOUBLE
24528: EQUAL
24529: IFTRUE 24533
24531: GO 24561
24533: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24534: LD_ADDR_OWVAR 42
24538: PUSH
24539: LD_INT 19
24541: PUSH
24542: LD_INT 23
24544: PUSH
24545: LD_INT 19
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: LIST
24552: PUSH
24553: LD_VAR 0 1
24557: ARRAY
24558: ST_TO_ADDR
24559: GO 24885
24561: LD_INT 18
24563: DOUBLE
24564: EQUAL
24565: IFTRUE 24569
24567: GO 24580
24569: POP
// bc_type := b_ext_radar ; 19 :
24570: LD_ADDR_OWVAR 42
24574: PUSH
24575: LD_INT 20
24577: ST_TO_ADDR
24578: GO 24885
24580: LD_INT 19
24582: DOUBLE
24583: EQUAL
24584: IFTRUE 24588
24586: GO 24599
24588: POP
// bc_type := b_ext_radio ; 20 :
24589: LD_ADDR_OWVAR 42
24593: PUSH
24594: LD_INT 22
24596: ST_TO_ADDR
24597: GO 24885
24599: LD_INT 20
24601: DOUBLE
24602: EQUAL
24603: IFTRUE 24607
24605: GO 24618
24607: POP
// bc_type := b_ext_siberium ; 21 :
24608: LD_ADDR_OWVAR 42
24612: PUSH
24613: LD_INT 21
24615: ST_TO_ADDR
24616: GO 24885
24618: LD_INT 21
24620: DOUBLE
24621: EQUAL
24622: IFTRUE 24626
24624: GO 24637
24626: POP
// bc_type := b_ext_computer ; 22 :
24627: LD_ADDR_OWVAR 42
24631: PUSH
24632: LD_INT 24
24634: ST_TO_ADDR
24635: GO 24885
24637: LD_INT 22
24639: DOUBLE
24640: EQUAL
24641: IFTRUE 24645
24643: GO 24656
24645: POP
// bc_type := b_ext_track ; 23 :
24646: LD_ADDR_OWVAR 42
24650: PUSH
24651: LD_INT 16
24653: ST_TO_ADDR
24654: GO 24885
24656: LD_INT 23
24658: DOUBLE
24659: EQUAL
24660: IFTRUE 24664
24662: GO 24675
24664: POP
// bc_type := b_ext_laser ; 24 :
24665: LD_ADDR_OWVAR 42
24669: PUSH
24670: LD_INT 25
24672: ST_TO_ADDR
24673: GO 24885
24675: LD_INT 24
24677: DOUBLE
24678: EQUAL
24679: IFTRUE 24683
24681: GO 24694
24683: POP
// bc_type := b_control_tower ; 25 :
24684: LD_ADDR_OWVAR 42
24688: PUSH
24689: LD_INT 36
24691: ST_TO_ADDR
24692: GO 24885
24694: LD_INT 25
24696: DOUBLE
24697: EQUAL
24698: IFTRUE 24702
24700: GO 24713
24702: POP
// bc_type := b_breastwork ; 26 :
24703: LD_ADDR_OWVAR 42
24707: PUSH
24708: LD_INT 31
24710: ST_TO_ADDR
24711: GO 24885
24713: LD_INT 26
24715: DOUBLE
24716: EQUAL
24717: IFTRUE 24721
24719: GO 24732
24721: POP
// bc_type := b_bunker ; 27 :
24722: LD_ADDR_OWVAR 42
24726: PUSH
24727: LD_INT 32
24729: ST_TO_ADDR
24730: GO 24885
24732: LD_INT 27
24734: DOUBLE
24735: EQUAL
24736: IFTRUE 24740
24738: GO 24751
24740: POP
// bc_type := b_turret ; 28 :
24741: LD_ADDR_OWVAR 42
24745: PUSH
24746: LD_INT 33
24748: ST_TO_ADDR
24749: GO 24885
24751: LD_INT 28
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24770
24759: POP
// bc_type := b_armoury ; 29 :
24760: LD_ADDR_OWVAR 42
24764: PUSH
24765: LD_INT 4
24767: ST_TO_ADDR
24768: GO 24885
24770: LD_INT 29
24772: DOUBLE
24773: EQUAL
24774: IFTRUE 24778
24776: GO 24789
24778: POP
// bc_type := b_barracks ; 30 :
24779: LD_ADDR_OWVAR 42
24783: PUSH
24784: LD_INT 5
24786: ST_TO_ADDR
24787: GO 24885
24789: LD_INT 30
24791: DOUBLE
24792: EQUAL
24793: IFTRUE 24797
24795: GO 24808
24797: POP
// bc_type := b_solar_power ; 31 :
24798: LD_ADDR_OWVAR 42
24802: PUSH
24803: LD_INT 27
24805: ST_TO_ADDR
24806: GO 24885
24808: LD_INT 31
24810: DOUBLE
24811: EQUAL
24812: IFTRUE 24816
24814: GO 24827
24816: POP
// bc_type := b_oil_power ; 32 :
24817: LD_ADDR_OWVAR 42
24821: PUSH
24822: LD_INT 26
24824: ST_TO_ADDR
24825: GO 24885
24827: LD_INT 32
24829: DOUBLE
24830: EQUAL
24831: IFTRUE 24835
24833: GO 24846
24835: POP
// bc_type := b_siberite_power ; 33 :
24836: LD_ADDR_OWVAR 42
24840: PUSH
24841: LD_INT 28
24843: ST_TO_ADDR
24844: GO 24885
24846: LD_INT 33
24848: DOUBLE
24849: EQUAL
24850: IFTRUE 24854
24852: GO 24865
24854: POP
// bc_type := b_oil_mine ; 34 :
24855: LD_ADDR_OWVAR 42
24859: PUSH
24860: LD_INT 29
24862: ST_TO_ADDR
24863: GO 24885
24865: LD_INT 34
24867: DOUBLE
24868: EQUAL
24869: IFTRUE 24873
24871: GO 24884
24873: POP
// bc_type := b_siberite_mine ; end ;
24874: LD_ADDR_OWVAR 42
24878: PUSH
24879: LD_INT 30
24881: ST_TO_ADDR
24882: GO 24885
24884: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24885: LD_ADDR_VAR 0 8
24889: PUSH
24890: LD_VAR 0 5
24894: PPUSH
24895: LD_VAR 0 6
24899: PPUSH
24900: LD_VAR 0 3
24904: PPUSH
24905: CALL_OW 47
24909: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24910: LD_OWVAR 42
24914: PUSH
24915: LD_INT 32
24917: PUSH
24918: LD_INT 33
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: IN
24925: IFFALSE 24941
// PlaceWeaponTurret ( b , weapon ) ;
24927: LD_VAR 0 8
24931: PPUSH
24932: LD_VAR 0 4
24936: PPUSH
24937: CALL_OW 431
// end ;
24941: LD_VAR 0 7
24945: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24946: LD_INT 0
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24952: LD_ADDR_VAR 0 4
24956: PUSH
24957: LD_INT 22
24959: PUSH
24960: LD_OWVAR 2
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 2
24971: PUSH
24972: LD_INT 30
24974: PUSH
24975: LD_INT 0
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: LD_INT 30
24984: PUSH
24985: LD_INT 1
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: LIST
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PPUSH
25001: CALL_OW 69
25005: ST_TO_ADDR
// if not tmp then
25006: LD_VAR 0 4
25010: NOT
25011: IFFALSE 25015
// exit ;
25013: GO 25074
// for i in tmp do
25015: LD_ADDR_VAR 0 2
25019: PUSH
25020: LD_VAR 0 4
25024: PUSH
25025: FOR_IN
25026: IFFALSE 25072
// for j = 1 to 3 do
25028: LD_ADDR_VAR 0 3
25032: PUSH
25033: DOUBLE
25034: LD_INT 1
25036: DEC
25037: ST_TO_ADDR
25038: LD_INT 3
25040: PUSH
25041: FOR_TO
25042: IFFALSE 25068
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25044: LD_VAR 0 2
25048: PPUSH
25049: CALL_OW 274
25053: PPUSH
25054: LD_VAR 0 3
25058: PPUSH
25059: LD_INT 99999
25061: PPUSH
25062: CALL_OW 277
25066: GO 25041
25068: POP
25069: POP
25070: GO 25025
25072: POP
25073: POP
// end ;
25074: LD_VAR 0 1
25078: RET
// export function hHackSetLevel10 ; var i , j ; begin
25079: LD_INT 0
25081: PPUSH
25082: PPUSH
25083: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25084: LD_ADDR_VAR 0 2
25088: PUSH
25089: LD_INT 21
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PPUSH
25099: CALL_OW 69
25103: PUSH
25104: FOR_IN
25105: IFFALSE 25157
// if IsSelected ( i ) then
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 306
25116: IFFALSE 25155
// begin for j := 1 to 4 do
25118: LD_ADDR_VAR 0 3
25122: PUSH
25123: DOUBLE
25124: LD_INT 1
25126: DEC
25127: ST_TO_ADDR
25128: LD_INT 4
25130: PUSH
25131: FOR_TO
25132: IFFALSE 25153
// SetSkill ( i , j , 10 ) ;
25134: LD_VAR 0 2
25138: PPUSH
25139: LD_VAR 0 3
25143: PPUSH
25144: LD_INT 10
25146: PPUSH
25147: CALL_OW 237
25151: GO 25131
25153: POP
25154: POP
// end ;
25155: GO 25104
25157: POP
25158: POP
// end ;
25159: LD_VAR 0 1
25163: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25164: LD_INT 0
25166: PPUSH
25167: PPUSH
25168: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25169: LD_ADDR_VAR 0 2
25173: PUSH
25174: LD_INT 22
25176: PUSH
25177: LD_OWVAR 2
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 21
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PPUSH
25200: CALL_OW 69
25204: PUSH
25205: FOR_IN
25206: IFFALSE 25247
// begin for j := 1 to 4 do
25208: LD_ADDR_VAR 0 3
25212: PUSH
25213: DOUBLE
25214: LD_INT 1
25216: DEC
25217: ST_TO_ADDR
25218: LD_INT 4
25220: PUSH
25221: FOR_TO
25222: IFFALSE 25243
// SetSkill ( i , j , 10 ) ;
25224: LD_VAR 0 2
25228: PPUSH
25229: LD_VAR 0 3
25233: PPUSH
25234: LD_INT 10
25236: PPUSH
25237: CALL_OW 237
25241: GO 25221
25243: POP
25244: POP
// end ;
25245: GO 25205
25247: POP
25248: POP
// end ;
25249: LD_VAR 0 1
25253: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25254: LD_INT 0
25256: PPUSH
// uc_side := your_side ;
25257: LD_ADDR_OWVAR 20
25261: PUSH
25262: LD_OWVAR 2
25266: ST_TO_ADDR
// uc_nation := nation ;
25267: LD_ADDR_OWVAR 21
25271: PUSH
25272: LD_VAR 0 1
25276: ST_TO_ADDR
// InitHc ;
25277: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25281: LD_INT 0
25283: PPUSH
25284: LD_VAR 0 2
25288: PPUSH
25289: LD_VAR 0 3
25293: PPUSH
25294: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25298: LD_VAR 0 4
25302: PPUSH
25303: LD_VAR 0 5
25307: PPUSH
25308: CALL_OW 428
25312: PUSH
25313: LD_INT 0
25315: EQUAL
25316: IFFALSE 25340
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25318: CALL_OW 44
25322: PPUSH
25323: LD_VAR 0 4
25327: PPUSH
25328: LD_VAR 0 5
25332: PPUSH
25333: LD_INT 1
25335: PPUSH
25336: CALL_OW 48
// end ;
25340: LD_VAR 0 6
25344: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25345: LD_INT 0
25347: PPUSH
25348: PPUSH
// uc_side := your_side ;
25349: LD_ADDR_OWVAR 20
25353: PUSH
25354: LD_OWVAR 2
25358: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25359: LD_VAR 0 1
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 2
25369: PUSH
25370: LD_INT 3
25372: PUSH
25373: LD_INT 4
25375: PUSH
25376: LD_INT 5
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: IN
25386: IFFALSE 25398
// uc_nation := nation_american else
25388: LD_ADDR_OWVAR 21
25392: PUSH
25393: LD_INT 1
25395: ST_TO_ADDR
25396: GO 25441
// if chassis in [ 11 , 12 , 13 , 14 ] then
25398: LD_VAR 0 1
25402: PUSH
25403: LD_INT 11
25405: PUSH
25406: LD_INT 12
25408: PUSH
25409: LD_INT 13
25411: PUSH
25412: LD_INT 14
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: IN
25421: IFFALSE 25433
// uc_nation := nation_arabian else
25423: LD_ADDR_OWVAR 21
25427: PUSH
25428: LD_INT 2
25430: ST_TO_ADDR
25431: GO 25441
// uc_nation := nation_russian ;
25433: LD_ADDR_OWVAR 21
25437: PUSH
25438: LD_INT 3
25440: ST_TO_ADDR
// vc_chassis := chassis ;
25441: LD_ADDR_OWVAR 37
25445: PUSH
25446: LD_VAR 0 1
25450: ST_TO_ADDR
// vc_engine := engine ;
25451: LD_ADDR_OWVAR 39
25455: PUSH
25456: LD_VAR 0 2
25460: ST_TO_ADDR
// vc_control := control ;
25461: LD_ADDR_OWVAR 38
25465: PUSH
25466: LD_VAR 0 3
25470: ST_TO_ADDR
// vc_weapon := weapon ;
25471: LD_ADDR_OWVAR 40
25475: PUSH
25476: LD_VAR 0 4
25480: ST_TO_ADDR
// un := CreateVehicle ;
25481: LD_ADDR_VAR 0 8
25485: PUSH
25486: CALL_OW 45
25490: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25491: LD_VAR 0 8
25495: PPUSH
25496: LD_INT 0
25498: PPUSH
25499: LD_INT 5
25501: PPUSH
25502: CALL_OW 12
25506: PPUSH
25507: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25511: LD_VAR 0 8
25515: PPUSH
25516: LD_VAR 0 5
25520: PPUSH
25521: LD_VAR 0 6
25525: PPUSH
25526: LD_INT 1
25528: PPUSH
25529: CALL_OW 48
// end ;
25533: LD_VAR 0 7
25537: RET
// export hInvincible ; every 1 do
25538: GO 25540
25540: DISABLE
// hInvincible := [ ] ;
25541: LD_ADDR_EXP 105
25545: PUSH
25546: EMPTY
25547: ST_TO_ADDR
25548: END
// every 10 do var i ;
25549: GO 25551
25551: DISABLE
25552: LD_INT 0
25554: PPUSH
// begin enable ;
25555: ENABLE
// if not hInvincible then
25556: LD_EXP 105
25560: NOT
25561: IFFALSE 25565
// exit ;
25563: GO 25609
// for i in hInvincible do
25565: LD_ADDR_VAR 0 1
25569: PUSH
25570: LD_EXP 105
25574: PUSH
25575: FOR_IN
25576: IFFALSE 25607
// if GetLives ( i ) < 1000 then
25578: LD_VAR 0 1
25582: PPUSH
25583: CALL_OW 256
25587: PUSH
25588: LD_INT 1000
25590: LESS
25591: IFFALSE 25605
// SetLives ( i , 1000 ) ;
25593: LD_VAR 0 1
25597: PPUSH
25598: LD_INT 1000
25600: PPUSH
25601: CALL_OW 234
25605: GO 25575
25607: POP
25608: POP
// end ;
25609: PPOPN 1
25611: END
// export function hHackInvincible ; var i ; begin
25612: LD_INT 0
25614: PPUSH
25615: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25616: LD_ADDR_VAR 0 2
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 21
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 21
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: LIST
25648: PPUSH
25649: CALL_OW 69
25653: PUSH
25654: FOR_IN
25655: IFFALSE 25716
// if IsSelected ( i ) then
25657: LD_VAR 0 2
25661: PPUSH
25662: CALL_OW 306
25666: IFFALSE 25714
// begin if i in hInvincible then
25668: LD_VAR 0 2
25672: PUSH
25673: LD_EXP 105
25677: IN
25678: IFFALSE 25698
// hInvincible := hInvincible diff i else
25680: LD_ADDR_EXP 105
25684: PUSH
25685: LD_EXP 105
25689: PUSH
25690: LD_VAR 0 2
25694: DIFF
25695: ST_TO_ADDR
25696: GO 25714
// hInvincible := hInvincible union i ;
25698: LD_ADDR_EXP 105
25702: PUSH
25703: LD_EXP 105
25707: PUSH
25708: LD_VAR 0 2
25712: UNION
25713: ST_TO_ADDR
// end ;
25714: GO 25654
25716: POP
25717: POP
// end ;
25718: LD_VAR 0 1
25722: RET
// export function hHackInvisible ; var i , j ; begin
25723: LD_INT 0
25725: PPUSH
25726: PPUSH
25727: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25728: LD_ADDR_VAR 0 2
25732: PUSH
25733: LD_INT 21
25735: PUSH
25736: LD_INT 1
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PPUSH
25743: CALL_OW 69
25747: PUSH
25748: FOR_IN
25749: IFFALSE 25773
// if IsSelected ( i ) then
25751: LD_VAR 0 2
25755: PPUSH
25756: CALL_OW 306
25760: IFFALSE 25771
// ComForceInvisible ( i ) ;
25762: LD_VAR 0 2
25766: PPUSH
25767: CALL_OW 496
25771: GO 25748
25773: POP
25774: POP
// end ;
25775: LD_VAR 0 1
25779: RET
// export function hHackChangeYourSide ; begin
25780: LD_INT 0
25782: PPUSH
// if your_side = 8 then
25783: LD_OWVAR 2
25787: PUSH
25788: LD_INT 8
25790: EQUAL
25791: IFFALSE 25803
// your_side := 0 else
25793: LD_ADDR_OWVAR 2
25797: PUSH
25798: LD_INT 0
25800: ST_TO_ADDR
25801: GO 25817
// your_side := your_side + 1 ;
25803: LD_ADDR_OWVAR 2
25807: PUSH
25808: LD_OWVAR 2
25812: PUSH
25813: LD_INT 1
25815: PLUS
25816: ST_TO_ADDR
// end ;
25817: LD_VAR 0 1
25821: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25822: LD_INT 0
25824: PPUSH
25825: PPUSH
25826: PPUSH
// for i in all_units do
25827: LD_ADDR_VAR 0 2
25831: PUSH
25832: LD_OWVAR 3
25836: PUSH
25837: FOR_IN
25838: IFFALSE 25916
// if IsSelected ( i ) then
25840: LD_VAR 0 2
25844: PPUSH
25845: CALL_OW 306
25849: IFFALSE 25914
// begin j := GetSide ( i ) ;
25851: LD_ADDR_VAR 0 3
25855: PUSH
25856: LD_VAR 0 2
25860: PPUSH
25861: CALL_OW 255
25865: ST_TO_ADDR
// if j = 8 then
25866: LD_VAR 0 3
25870: PUSH
25871: LD_INT 8
25873: EQUAL
25874: IFFALSE 25886
// j := 0 else
25876: LD_ADDR_VAR 0 3
25880: PUSH
25881: LD_INT 0
25883: ST_TO_ADDR
25884: GO 25900
// j := j + 1 ;
25886: LD_ADDR_VAR 0 3
25890: PUSH
25891: LD_VAR 0 3
25895: PUSH
25896: LD_INT 1
25898: PLUS
25899: ST_TO_ADDR
// SetSide ( i , j ) ;
25900: LD_VAR 0 2
25904: PPUSH
25905: LD_VAR 0 3
25909: PPUSH
25910: CALL_OW 235
// end ;
25914: GO 25837
25916: POP
25917: POP
// end ;
25918: LD_VAR 0 1
25922: RET
// export function hHackFog ; begin
25923: LD_INT 0
25925: PPUSH
// FogOff ( true ) ;
25926: LD_INT 1
25928: PPUSH
25929: CALL_OW 344
// end ;
25933: LD_VAR 0 1
25937: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25938: LD_INT 0
25940: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25941: LD_VAR 0 1
25945: PPUSH
25946: LD_VAR 0 2
25950: PPUSH
25951: LD_VAR 0 3
25955: PPUSH
25956: LD_INT 1
25958: PPUSH
25959: LD_INT 1
25961: PPUSH
25962: CALL_OW 483
// CenterOnXY ( x , y ) ;
25966: LD_VAR 0 2
25970: PPUSH
25971: LD_VAR 0 3
25975: PPUSH
25976: CALL_OW 84
// end ; end_of_file
25980: LD_VAR 0 4
25984: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25985: LD_INT 0
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 264
26000: PUSH
26001: LD_EXP 36
26005: EQUAL
26006: IFFALSE 26078
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26008: LD_INT 68
26010: PPUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 255
26020: PPUSH
26021: CALL_OW 321
26025: PUSH
26026: LD_INT 2
26028: EQUAL
26029: IFFALSE 26041
// eff := 70 else
26031: LD_ADDR_VAR 0 4
26035: PUSH
26036: LD_INT 70
26038: ST_TO_ADDR
26039: GO 26049
// eff := 30 ;
26041: LD_ADDR_VAR 0 4
26045: PUSH
26046: LD_INT 30
26048: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26049: LD_VAR 0 1
26053: PPUSH
26054: CALL_OW 250
26058: PPUSH
26059: LD_VAR 0 1
26063: PPUSH
26064: CALL_OW 251
26068: PPUSH
26069: LD_VAR 0 4
26073: PPUSH
26074: CALL_OW 495
// end ; end ;
26078: LD_VAR 0 2
26082: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26083: LD_INT 0
26085: PPUSH
// end ;
26086: LD_VAR 0 4
26090: RET
// export function SOS_Command ( cmd ) ; begin
26091: LD_INT 0
26093: PPUSH
// end ;
26094: LD_VAR 0 2
26098: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26099: LD_INT 0
26101: PPUSH
// if cmd = 121 then
26102: LD_VAR 0 1
26106: PUSH
26107: LD_INT 121
26109: EQUAL
26110: IFFALSE 26112
// end ;
26112: LD_VAR 0 6
26116: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26117: LD_INT 0
26119: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26120: LD_VAR 0 1
26124: PUSH
26125: LD_INT 250
26127: EQUAL
26128: PUSH
26129: LD_VAR 0 2
26133: PPUSH
26134: CALL_OW 264
26138: PUSH
26139: LD_EXP 39
26143: EQUAL
26144: AND
26145: IFFALSE 26166
// MinerPlaceMine ( unit , x , y ) ;
26147: LD_VAR 0 2
26151: PPUSH
26152: LD_VAR 0 4
26156: PPUSH
26157: LD_VAR 0 5
26161: PPUSH
26162: CALL 28515 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26166: LD_VAR 0 1
26170: PUSH
26171: LD_INT 251
26173: EQUAL
26174: PUSH
26175: LD_VAR 0 2
26179: PPUSH
26180: CALL_OW 264
26184: PUSH
26185: LD_EXP 39
26189: EQUAL
26190: AND
26191: IFFALSE 26212
// MinerDetonateMine ( unit , x , y ) ;
26193: LD_VAR 0 2
26197: PPUSH
26198: LD_VAR 0 4
26202: PPUSH
26203: LD_VAR 0 5
26207: PPUSH
26208: CALL 28792 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26212: LD_VAR 0 1
26216: PUSH
26217: LD_INT 252
26219: EQUAL
26220: PUSH
26221: LD_VAR 0 2
26225: PPUSH
26226: CALL_OW 264
26230: PUSH
26231: LD_EXP 39
26235: EQUAL
26236: AND
26237: IFFALSE 26258
// MinerCreateMinefield ( unit , x , y ) ;
26239: LD_VAR 0 2
26243: PPUSH
26244: LD_VAR 0 4
26248: PPUSH
26249: LD_VAR 0 5
26253: PPUSH
26254: CALL 29209 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26258: LD_VAR 0 1
26262: PUSH
26263: LD_INT 253
26265: EQUAL
26266: PUSH
26267: LD_VAR 0 2
26271: PPUSH
26272: CALL_OW 257
26276: PUSH
26277: LD_INT 5
26279: EQUAL
26280: AND
26281: IFFALSE 26302
// ComBinocular ( unit , x , y ) ;
26283: LD_VAR 0 2
26287: PPUSH
26288: LD_VAR 0 4
26292: PPUSH
26293: LD_VAR 0 5
26297: PPUSH
26298: CALL 29580 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26302: LD_VAR 0 1
26306: PUSH
26307: LD_INT 254
26309: EQUAL
26310: PUSH
26311: LD_VAR 0 2
26315: PPUSH
26316: CALL_OW 264
26320: PUSH
26321: LD_EXP 34
26325: EQUAL
26326: AND
26327: PUSH
26328: LD_VAR 0 3
26332: PPUSH
26333: CALL_OW 263
26337: PUSH
26338: LD_INT 3
26340: EQUAL
26341: AND
26342: IFFALSE 26358
// HackDestroyVehicle ( unit , selectedUnit ) ;
26344: LD_VAR 0 2
26348: PPUSH
26349: LD_VAR 0 3
26353: PPUSH
26354: CALL 27875 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26358: LD_VAR 0 1
26362: PUSH
26363: LD_INT 255
26365: EQUAL
26366: PUSH
26367: LD_VAR 0 2
26371: PPUSH
26372: CALL_OW 264
26376: PUSH
26377: LD_INT 14
26379: PUSH
26380: LD_INT 53
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: IN
26387: AND
26388: PUSH
26389: LD_VAR 0 4
26393: PPUSH
26394: LD_VAR 0 5
26398: PPUSH
26399: CALL_OW 488
26403: AND
26404: IFFALSE 26428
// CutTreeXYR ( unit , x , y , 12 ) ;
26406: LD_VAR 0 2
26410: PPUSH
26411: LD_VAR 0 4
26415: PPUSH
26416: LD_VAR 0 5
26420: PPUSH
26421: LD_INT 12
26423: PPUSH
26424: CALL 26441 0 4
// end ;
26428: LD_VAR 0 6
26432: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26433: LD_INT 0
26435: PPUSH
// end ;
26436: LD_VAR 0 4
26440: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26441: LD_INT 0
26443: PPUSH
26444: PPUSH
26445: PPUSH
26446: PPUSH
26447: PPUSH
26448: PPUSH
26449: PPUSH
26450: PPUSH
26451: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26452: LD_VAR 0 1
26456: NOT
26457: PUSH
26458: LD_VAR 0 2
26462: PPUSH
26463: LD_VAR 0 3
26467: PPUSH
26468: CALL_OW 488
26472: NOT
26473: OR
26474: PUSH
26475: LD_VAR 0 4
26479: NOT
26480: OR
26481: IFFALSE 26485
// exit ;
26483: GO 26825
// list := [ ] ;
26485: LD_ADDR_VAR 0 13
26489: PUSH
26490: EMPTY
26491: ST_TO_ADDR
// if x - r < 0 then
26492: LD_VAR 0 2
26496: PUSH
26497: LD_VAR 0 4
26501: MINUS
26502: PUSH
26503: LD_INT 0
26505: LESS
26506: IFFALSE 26518
// min_x := 0 else
26508: LD_ADDR_VAR 0 7
26512: PUSH
26513: LD_INT 0
26515: ST_TO_ADDR
26516: GO 26534
// min_x := x - r ;
26518: LD_ADDR_VAR 0 7
26522: PUSH
26523: LD_VAR 0 2
26527: PUSH
26528: LD_VAR 0 4
26532: MINUS
26533: ST_TO_ADDR
// if y - r < 0 then
26534: LD_VAR 0 3
26538: PUSH
26539: LD_VAR 0 4
26543: MINUS
26544: PUSH
26545: LD_INT 0
26547: LESS
26548: IFFALSE 26560
// min_y := 0 else
26550: LD_ADDR_VAR 0 8
26554: PUSH
26555: LD_INT 0
26557: ST_TO_ADDR
26558: GO 26576
// min_y := y - r ;
26560: LD_ADDR_VAR 0 8
26564: PUSH
26565: LD_VAR 0 3
26569: PUSH
26570: LD_VAR 0 4
26574: MINUS
26575: ST_TO_ADDR
// max_x := x + r ;
26576: LD_ADDR_VAR 0 9
26580: PUSH
26581: LD_VAR 0 2
26585: PUSH
26586: LD_VAR 0 4
26590: PLUS
26591: ST_TO_ADDR
// max_y := y + r ;
26592: LD_ADDR_VAR 0 10
26596: PUSH
26597: LD_VAR 0 3
26601: PUSH
26602: LD_VAR 0 4
26606: PLUS
26607: ST_TO_ADDR
// for _x = min_x to max_x do
26608: LD_ADDR_VAR 0 11
26612: PUSH
26613: DOUBLE
26614: LD_VAR 0 7
26618: DEC
26619: ST_TO_ADDR
26620: LD_VAR 0 9
26624: PUSH
26625: FOR_TO
26626: IFFALSE 26743
// for _y = min_y to max_y do
26628: LD_ADDR_VAR 0 12
26632: PUSH
26633: DOUBLE
26634: LD_VAR 0 8
26638: DEC
26639: ST_TO_ADDR
26640: LD_VAR 0 10
26644: PUSH
26645: FOR_TO
26646: IFFALSE 26739
// begin if not ValidHex ( _x , _y ) then
26648: LD_VAR 0 11
26652: PPUSH
26653: LD_VAR 0 12
26657: PPUSH
26658: CALL_OW 488
26662: NOT
26663: IFFALSE 26667
// continue ;
26665: GO 26645
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26667: LD_VAR 0 11
26671: PPUSH
26672: LD_VAR 0 12
26676: PPUSH
26677: CALL_OW 351
26681: PUSH
26682: LD_VAR 0 11
26686: PPUSH
26687: LD_VAR 0 12
26691: PPUSH
26692: CALL_OW 554
26696: AND
26697: IFFALSE 26737
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26699: LD_ADDR_VAR 0 13
26703: PUSH
26704: LD_VAR 0 13
26708: PPUSH
26709: LD_VAR 0 13
26713: PUSH
26714: LD_INT 1
26716: PLUS
26717: PPUSH
26718: LD_VAR 0 11
26722: PUSH
26723: LD_VAR 0 12
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PPUSH
26732: CALL_OW 2
26736: ST_TO_ADDR
// end ;
26737: GO 26645
26739: POP
26740: POP
26741: GO 26625
26743: POP
26744: POP
// if not list then
26745: LD_VAR 0 13
26749: NOT
26750: IFFALSE 26754
// exit ;
26752: GO 26825
// for i in list do
26754: LD_ADDR_VAR 0 6
26758: PUSH
26759: LD_VAR 0 13
26763: PUSH
26764: FOR_IN
26765: IFFALSE 26823
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: LD_STRING M
26774: PUSH
26775: LD_VAR 0 6
26779: PUSH
26780: LD_INT 1
26782: ARRAY
26783: PUSH
26784: LD_VAR 0 6
26788: PUSH
26789: LD_INT 2
26791: ARRAY
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 0
26798: PUSH
26799: LD_INT 0
26801: PUSH
26802: LD_INT 0
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: PUSH
26814: EMPTY
26815: LIST
26816: PPUSH
26817: CALL_OW 447
26821: GO 26764
26823: POP
26824: POP
// end ;
26825: LD_VAR 0 5
26829: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26830: LD_EXP 108
26834: NOT
26835: IFFALSE 26885
26837: GO 26839
26839: DISABLE
// begin initHack := true ;
26840: LD_ADDR_EXP 108
26844: PUSH
26845: LD_INT 1
26847: ST_TO_ADDR
// hackTanks := [ ] ;
26848: LD_ADDR_EXP 109
26852: PUSH
26853: EMPTY
26854: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26855: LD_ADDR_EXP 110
26859: PUSH
26860: EMPTY
26861: ST_TO_ADDR
// hackLimit := 3 ;
26862: LD_ADDR_EXP 111
26866: PUSH
26867: LD_INT 3
26869: ST_TO_ADDR
// hackDist := 12 ;
26870: LD_ADDR_EXP 112
26874: PUSH
26875: LD_INT 12
26877: ST_TO_ADDR
// hackCounter := [ ] ;
26878: LD_ADDR_EXP 113
26882: PUSH
26883: EMPTY
26884: ST_TO_ADDR
// end ;
26885: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26886: LD_EXP 108
26890: PUSH
26891: LD_INT 34
26893: PUSH
26894: LD_EXP 34
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PPUSH
26903: CALL_OW 69
26907: AND
26908: IFFALSE 27163
26910: GO 26912
26912: DISABLE
26913: LD_INT 0
26915: PPUSH
26916: PPUSH
// begin enable ;
26917: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26918: LD_ADDR_VAR 0 1
26922: PUSH
26923: LD_INT 34
26925: PUSH
26926: LD_EXP 34
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: PPUSH
26935: CALL_OW 69
26939: PUSH
26940: FOR_IN
26941: IFFALSE 27161
// begin if not i in hackTanks then
26943: LD_VAR 0 1
26947: PUSH
26948: LD_EXP 109
26952: IN
26953: NOT
26954: IFFALSE 27037
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26956: LD_ADDR_EXP 109
26960: PUSH
26961: LD_EXP 109
26965: PPUSH
26966: LD_EXP 109
26970: PUSH
26971: LD_INT 1
26973: PLUS
26974: PPUSH
26975: LD_VAR 0 1
26979: PPUSH
26980: CALL_OW 1
26984: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26985: LD_ADDR_EXP 110
26989: PUSH
26990: LD_EXP 110
26994: PPUSH
26995: LD_EXP 110
26999: PUSH
27000: LD_INT 1
27002: PLUS
27003: PPUSH
27004: EMPTY
27005: PPUSH
27006: CALL_OW 1
27010: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27011: LD_ADDR_EXP 113
27015: PUSH
27016: LD_EXP 113
27020: PPUSH
27021: LD_EXP 113
27025: PUSH
27026: LD_INT 1
27028: PLUS
27029: PPUSH
27030: EMPTY
27031: PPUSH
27032: CALL_OW 1
27036: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27037: LD_VAR 0 1
27041: PPUSH
27042: CALL_OW 302
27046: NOT
27047: IFFALSE 27060
// begin HackUnlinkAll ( i ) ;
27049: LD_VAR 0 1
27053: PPUSH
27054: CALL 27166 0 1
// continue ;
27058: GO 26940
// end ; HackCheckCapturedStatus ( i ) ;
27060: LD_VAR 0 1
27064: PPUSH
27065: CALL 27609 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27069: LD_ADDR_VAR 0 2
27073: PUSH
27074: LD_INT 81
27076: PUSH
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 255
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 33
27093: PUSH
27094: LD_INT 3
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 91
27103: PUSH
27104: LD_VAR 0 1
27108: PUSH
27109: LD_EXP 112
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 50
27121: PUSH
27122: EMPTY
27123: LIST
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: PPUSH
27131: CALL_OW 69
27135: ST_TO_ADDR
// if not tmp then
27136: LD_VAR 0 2
27140: NOT
27141: IFFALSE 27145
// continue ;
27143: GO 26940
// HackLink ( i , tmp ) ;
27145: LD_VAR 0 1
27149: PPUSH
27150: LD_VAR 0 2
27154: PPUSH
27155: CALL 27302 0 2
// end ;
27159: GO 26940
27161: POP
27162: POP
// end ;
27163: PPOPN 2
27165: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27166: LD_INT 0
27168: PPUSH
27169: PPUSH
27170: PPUSH
// if not hack in hackTanks then
27171: LD_VAR 0 1
27175: PUSH
27176: LD_EXP 109
27180: IN
27181: NOT
27182: IFFALSE 27186
// exit ;
27184: GO 27297
// index := GetElementIndex ( hackTanks , hack ) ;
27186: LD_ADDR_VAR 0 4
27190: PUSH
27191: LD_EXP 109
27195: PPUSH
27196: LD_VAR 0 1
27200: PPUSH
27201: CALL 34771 0 2
27205: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27206: LD_EXP 110
27210: PUSH
27211: LD_VAR 0 4
27215: ARRAY
27216: IFFALSE 27297
// begin for i in hackTanksCaptured [ index ] do
27218: LD_ADDR_VAR 0 3
27222: PUSH
27223: LD_EXP 110
27227: PUSH
27228: LD_VAR 0 4
27232: ARRAY
27233: PUSH
27234: FOR_IN
27235: IFFALSE 27261
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27237: LD_VAR 0 3
27241: PUSH
27242: LD_INT 1
27244: ARRAY
27245: PPUSH
27246: LD_VAR 0 3
27250: PUSH
27251: LD_INT 2
27253: ARRAY
27254: PPUSH
27255: CALL_OW 235
27259: GO 27234
27261: POP
27262: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27263: LD_ADDR_EXP 110
27267: PUSH
27268: LD_EXP 110
27272: PPUSH
27273: LD_VAR 0 4
27277: PPUSH
27278: EMPTY
27279: PPUSH
27280: CALL_OW 1
27284: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27285: LD_VAR 0 1
27289: PPUSH
27290: LD_INT 0
27292: PPUSH
27293: CALL_OW 505
// end ; end ;
27297: LD_VAR 0 2
27301: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27302: LD_INT 0
27304: PPUSH
27305: PPUSH
27306: PPUSH
// if not hack in hackTanks or not vehicles then
27307: LD_VAR 0 1
27311: PUSH
27312: LD_EXP 109
27316: IN
27317: NOT
27318: PUSH
27319: LD_VAR 0 2
27323: NOT
27324: OR
27325: IFFALSE 27329
// exit ;
27327: GO 27604
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27329: LD_ADDR_VAR 0 2
27333: PUSH
27334: LD_VAR 0 1
27338: PPUSH
27339: LD_VAR 0 2
27343: PPUSH
27344: LD_INT 1
27346: PPUSH
27347: LD_INT 1
27349: PPUSH
27350: CALL 35421 0 4
27354: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27355: LD_ADDR_VAR 0 5
27359: PUSH
27360: LD_EXP 109
27364: PPUSH
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL 34771 0 2
27374: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27375: LD_EXP 110
27379: PUSH
27380: LD_VAR 0 5
27384: ARRAY
27385: PUSH
27386: LD_EXP 111
27390: LESS
27391: IFFALSE 27580
// begin for i := 1 to vehicles do
27393: LD_ADDR_VAR 0 4
27397: PUSH
27398: DOUBLE
27399: LD_INT 1
27401: DEC
27402: ST_TO_ADDR
27403: LD_VAR 0 2
27407: PUSH
27408: FOR_TO
27409: IFFALSE 27578
// begin if hackTanksCaptured [ index ] = hackLimit then
27411: LD_EXP 110
27415: PUSH
27416: LD_VAR 0 5
27420: ARRAY
27421: PUSH
27422: LD_EXP 111
27426: EQUAL
27427: IFFALSE 27431
// break ;
27429: GO 27578
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27431: LD_ADDR_EXP 113
27435: PUSH
27436: LD_EXP 113
27440: PPUSH
27441: LD_VAR 0 5
27445: PPUSH
27446: LD_EXP 113
27450: PUSH
27451: LD_VAR 0 5
27455: ARRAY
27456: PUSH
27457: LD_INT 1
27459: PLUS
27460: PPUSH
27461: CALL_OW 1
27465: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27466: LD_ADDR_EXP 110
27470: PUSH
27471: LD_EXP 110
27475: PPUSH
27476: LD_VAR 0 5
27480: PUSH
27481: LD_EXP 110
27485: PUSH
27486: LD_VAR 0 5
27490: ARRAY
27491: PUSH
27492: LD_INT 1
27494: PLUS
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PPUSH
27500: LD_VAR 0 2
27504: PUSH
27505: LD_VAR 0 4
27509: ARRAY
27510: PUSH
27511: LD_VAR 0 2
27515: PUSH
27516: LD_VAR 0 4
27520: ARRAY
27521: PPUSH
27522: CALL_OW 255
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PPUSH
27531: CALL 34986 0 3
27535: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27536: LD_VAR 0 2
27540: PUSH
27541: LD_VAR 0 4
27545: ARRAY
27546: PPUSH
27547: LD_VAR 0 1
27551: PPUSH
27552: CALL_OW 255
27556: PPUSH
27557: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27561: LD_VAR 0 2
27565: PUSH
27566: LD_VAR 0 4
27570: ARRAY
27571: PPUSH
27572: CALL_OW 141
// end ;
27576: GO 27408
27578: POP
27579: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27580: LD_VAR 0 1
27584: PPUSH
27585: LD_EXP 110
27589: PUSH
27590: LD_VAR 0 5
27594: ARRAY
27595: PUSH
27596: LD_INT 0
27598: PLUS
27599: PPUSH
27600: CALL_OW 505
// end ;
27604: LD_VAR 0 3
27608: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27609: LD_INT 0
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
// if not hack in hackTanks then
27615: LD_VAR 0 1
27619: PUSH
27620: LD_EXP 109
27624: IN
27625: NOT
27626: IFFALSE 27630
// exit ;
27628: GO 27870
// index := GetElementIndex ( hackTanks , hack ) ;
27630: LD_ADDR_VAR 0 4
27634: PUSH
27635: LD_EXP 109
27639: PPUSH
27640: LD_VAR 0 1
27644: PPUSH
27645: CALL 34771 0 2
27649: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27650: LD_ADDR_VAR 0 3
27654: PUSH
27655: DOUBLE
27656: LD_EXP 110
27660: PUSH
27661: LD_VAR 0 4
27665: ARRAY
27666: INC
27667: ST_TO_ADDR
27668: LD_INT 1
27670: PUSH
27671: FOR_DOWNTO
27672: IFFALSE 27844
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27674: LD_ADDR_VAR 0 5
27678: PUSH
27679: LD_EXP 110
27683: PUSH
27684: LD_VAR 0 4
27688: ARRAY
27689: PUSH
27690: LD_VAR 0 3
27694: ARRAY
27695: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27696: LD_VAR 0 5
27700: PUSH
27701: LD_INT 1
27703: ARRAY
27704: PPUSH
27705: CALL_OW 302
27709: NOT
27710: PUSH
27711: LD_VAR 0 5
27715: PUSH
27716: LD_INT 1
27718: ARRAY
27719: PPUSH
27720: CALL_OW 255
27724: PUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 255
27734: NONEQUAL
27735: OR
27736: IFFALSE 27842
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27738: LD_VAR 0 5
27742: PUSH
27743: LD_INT 1
27745: ARRAY
27746: PPUSH
27747: CALL_OW 305
27751: PUSH
27752: LD_VAR 0 5
27756: PUSH
27757: LD_INT 1
27759: ARRAY
27760: PPUSH
27761: CALL_OW 255
27765: PUSH
27766: LD_VAR 0 1
27770: PPUSH
27771: CALL_OW 255
27775: EQUAL
27776: AND
27777: IFFALSE 27801
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27779: LD_VAR 0 5
27783: PUSH
27784: LD_INT 1
27786: ARRAY
27787: PPUSH
27788: LD_VAR 0 5
27792: PUSH
27793: LD_INT 2
27795: ARRAY
27796: PPUSH
27797: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27801: LD_ADDR_EXP 110
27805: PUSH
27806: LD_EXP 110
27810: PPUSH
27811: LD_VAR 0 4
27815: PPUSH
27816: LD_EXP 110
27820: PUSH
27821: LD_VAR 0 4
27825: ARRAY
27826: PPUSH
27827: LD_VAR 0 3
27831: PPUSH
27832: CALL_OW 3
27836: PPUSH
27837: CALL_OW 1
27841: ST_TO_ADDR
// end ; end ;
27842: GO 27671
27844: POP
27845: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27846: LD_VAR 0 1
27850: PPUSH
27851: LD_EXP 110
27855: PUSH
27856: LD_VAR 0 4
27860: ARRAY
27861: PUSH
27862: LD_INT 0
27864: PLUS
27865: PPUSH
27866: CALL_OW 505
// end ;
27870: LD_VAR 0 2
27874: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27875: LD_INT 0
27877: PPUSH
27878: PPUSH
27879: PPUSH
27880: PPUSH
// if not hack in hackTanks then
27881: LD_VAR 0 1
27885: PUSH
27886: LD_EXP 109
27890: IN
27891: NOT
27892: IFFALSE 27896
// exit ;
27894: GO 27981
// index := GetElementIndex ( hackTanks , hack ) ;
27896: LD_ADDR_VAR 0 5
27900: PUSH
27901: LD_EXP 109
27905: PPUSH
27906: LD_VAR 0 1
27910: PPUSH
27911: CALL 34771 0 2
27915: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27916: LD_ADDR_VAR 0 4
27920: PUSH
27921: DOUBLE
27922: LD_INT 1
27924: DEC
27925: ST_TO_ADDR
27926: LD_EXP 110
27930: PUSH
27931: LD_VAR 0 5
27935: ARRAY
27936: PUSH
27937: FOR_TO
27938: IFFALSE 27979
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27940: LD_EXP 110
27944: PUSH
27945: LD_VAR 0 5
27949: ARRAY
27950: PUSH
27951: LD_VAR 0 4
27955: ARRAY
27956: PUSH
27957: LD_INT 1
27959: ARRAY
27960: PUSH
27961: LD_VAR 0 2
27965: EQUAL
27966: IFFALSE 27977
// KillUnit ( vehicle ) ;
27968: LD_VAR 0 2
27972: PPUSH
27973: CALL_OW 66
27977: GO 27937
27979: POP
27980: POP
// end ;
27981: LD_VAR 0 3
27985: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27986: LD_EXP 114
27990: NOT
27991: IFFALSE 28026
27993: GO 27995
27995: DISABLE
// begin initMiner := true ;
27996: LD_ADDR_EXP 114
28000: PUSH
28001: LD_INT 1
28003: ST_TO_ADDR
// minersList := [ ] ;
28004: LD_ADDR_EXP 115
28008: PUSH
28009: EMPTY
28010: ST_TO_ADDR
// minerMinesList := [ ] ;
28011: LD_ADDR_EXP 116
28015: PUSH
28016: EMPTY
28017: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28018: LD_ADDR_EXP 117
28022: PUSH
28023: LD_INT 5
28025: ST_TO_ADDR
// end ;
28026: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28027: LD_EXP 114
28031: PUSH
28032: LD_INT 34
28034: PUSH
28035: LD_EXP 39
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: PPUSH
28044: CALL_OW 69
28048: AND
28049: IFFALSE 28512
28051: GO 28053
28053: DISABLE
28054: LD_INT 0
28056: PPUSH
28057: PPUSH
28058: PPUSH
28059: PPUSH
// begin enable ;
28060: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28061: LD_ADDR_VAR 0 1
28065: PUSH
28066: LD_INT 34
28068: PUSH
28069: LD_EXP 39
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: PPUSH
28078: CALL_OW 69
28082: PUSH
28083: FOR_IN
28084: IFFALSE 28156
// begin if not i in minersList then
28086: LD_VAR 0 1
28090: PUSH
28091: LD_EXP 115
28095: IN
28096: NOT
28097: IFFALSE 28154
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28099: LD_ADDR_EXP 115
28103: PUSH
28104: LD_EXP 115
28108: PPUSH
28109: LD_EXP 115
28113: PUSH
28114: LD_INT 1
28116: PLUS
28117: PPUSH
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 1
28127: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28128: LD_ADDR_EXP 116
28132: PUSH
28133: LD_EXP 116
28137: PPUSH
28138: LD_EXP 116
28142: PUSH
28143: LD_INT 1
28145: PLUS
28146: PPUSH
28147: EMPTY
28148: PPUSH
28149: CALL_OW 1
28153: ST_TO_ADDR
// end end ;
28154: GO 28083
28156: POP
28157: POP
// for i := minerMinesList downto 1 do
28158: LD_ADDR_VAR 0 1
28162: PUSH
28163: DOUBLE
28164: LD_EXP 116
28168: INC
28169: ST_TO_ADDR
28170: LD_INT 1
28172: PUSH
28173: FOR_DOWNTO
28174: IFFALSE 28510
// begin if IsLive ( minersList [ i ] ) then
28176: LD_EXP 115
28180: PUSH
28181: LD_VAR 0 1
28185: ARRAY
28186: PPUSH
28187: CALL_OW 300
28191: IFFALSE 28219
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28193: LD_EXP 115
28197: PUSH
28198: LD_VAR 0 1
28202: ARRAY
28203: PPUSH
28204: LD_EXP 116
28208: PUSH
28209: LD_VAR 0 1
28213: ARRAY
28214: PPUSH
28215: CALL_OW 505
// if not minerMinesList [ i ] then
28219: LD_EXP 116
28223: PUSH
28224: LD_VAR 0 1
28228: ARRAY
28229: NOT
28230: IFFALSE 28234
// continue ;
28232: GO 28173
// for j := minerMinesList [ i ] downto 1 do
28234: LD_ADDR_VAR 0 2
28238: PUSH
28239: DOUBLE
28240: LD_EXP 116
28244: PUSH
28245: LD_VAR 0 1
28249: ARRAY
28250: INC
28251: ST_TO_ADDR
28252: LD_INT 1
28254: PUSH
28255: FOR_DOWNTO
28256: IFFALSE 28506
// begin side := GetSide ( minersList [ i ] ) ;
28258: LD_ADDR_VAR 0 3
28262: PUSH
28263: LD_EXP 115
28267: PUSH
28268: LD_VAR 0 1
28272: ARRAY
28273: PPUSH
28274: CALL_OW 255
28278: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28279: LD_ADDR_VAR 0 4
28283: PUSH
28284: LD_EXP 116
28288: PUSH
28289: LD_VAR 0 1
28293: ARRAY
28294: PUSH
28295: LD_VAR 0 2
28299: ARRAY
28300: PUSH
28301: LD_INT 1
28303: ARRAY
28304: PPUSH
28305: LD_EXP 116
28309: PUSH
28310: LD_VAR 0 1
28314: ARRAY
28315: PUSH
28316: LD_VAR 0 2
28320: ARRAY
28321: PUSH
28322: LD_INT 2
28324: ARRAY
28325: PPUSH
28326: CALL_OW 428
28330: ST_TO_ADDR
// if not tmp then
28331: LD_VAR 0 4
28335: NOT
28336: IFFALSE 28340
// continue ;
28338: GO 28255
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28340: LD_VAR 0 4
28344: PUSH
28345: LD_INT 81
28347: PUSH
28348: LD_VAR 0 3
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PPUSH
28357: CALL_OW 69
28361: IN
28362: PUSH
28363: LD_EXP 116
28367: PUSH
28368: LD_VAR 0 1
28372: ARRAY
28373: PUSH
28374: LD_VAR 0 2
28378: ARRAY
28379: PUSH
28380: LD_INT 1
28382: ARRAY
28383: PPUSH
28384: LD_EXP 116
28388: PUSH
28389: LD_VAR 0 1
28393: ARRAY
28394: PUSH
28395: LD_VAR 0 2
28399: ARRAY
28400: PUSH
28401: LD_INT 2
28403: ARRAY
28404: PPUSH
28405: CALL_OW 458
28409: AND
28410: IFFALSE 28504
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28412: LD_EXP 116
28416: PUSH
28417: LD_VAR 0 1
28421: ARRAY
28422: PUSH
28423: LD_VAR 0 2
28427: ARRAY
28428: PUSH
28429: LD_INT 1
28431: ARRAY
28432: PPUSH
28433: LD_EXP 116
28437: PUSH
28438: LD_VAR 0 1
28442: ARRAY
28443: PUSH
28444: LD_VAR 0 2
28448: ARRAY
28449: PUSH
28450: LD_INT 2
28452: ARRAY
28453: PPUSH
28454: LD_VAR 0 3
28458: PPUSH
28459: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28463: LD_ADDR_EXP 116
28467: PUSH
28468: LD_EXP 116
28472: PPUSH
28473: LD_VAR 0 1
28477: PPUSH
28478: LD_EXP 116
28482: PUSH
28483: LD_VAR 0 1
28487: ARRAY
28488: PPUSH
28489: LD_VAR 0 2
28493: PPUSH
28494: CALL_OW 3
28498: PPUSH
28499: CALL_OW 1
28503: ST_TO_ADDR
// end ; end ;
28504: GO 28255
28506: POP
28507: POP
// end ;
28508: GO 28173
28510: POP
28511: POP
// end ;
28512: PPOPN 4
28514: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28515: LD_INT 0
28517: PPUSH
28518: PPUSH
// result := false ;
28519: LD_ADDR_VAR 0 4
28523: PUSH
28524: LD_INT 0
28526: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28527: LD_VAR 0 1
28531: PPUSH
28532: CALL_OW 264
28536: PUSH
28537: LD_EXP 39
28541: EQUAL
28542: NOT
28543: IFFALSE 28547
// exit ;
28545: GO 28787
// index := GetElementIndex ( minersList , unit ) ;
28547: LD_ADDR_VAR 0 5
28551: PUSH
28552: LD_EXP 115
28556: PPUSH
28557: LD_VAR 0 1
28561: PPUSH
28562: CALL 34771 0 2
28566: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28567: LD_EXP 116
28571: PUSH
28572: LD_VAR 0 5
28576: ARRAY
28577: PUSH
28578: LD_EXP 117
28582: GREATEREQUAL
28583: IFFALSE 28587
// exit ;
28585: GO 28787
// ComMoveXY ( unit , x , y ) ;
28587: LD_VAR 0 1
28591: PPUSH
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 3
28601: PPUSH
28602: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28606: LD_INT 35
28608: PPUSH
28609: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28613: LD_VAR 0 1
28617: PPUSH
28618: LD_VAR 0 2
28622: PPUSH
28623: LD_VAR 0 3
28627: PPUSH
28628: CALL 65543 0 3
28632: NOT
28633: PUSH
28634: LD_VAR 0 1
28638: PPUSH
28639: CALL_OW 314
28643: AND
28644: IFFALSE 28648
// exit ;
28646: GO 28787
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28648: LD_VAR 0 2
28652: PPUSH
28653: LD_VAR 0 3
28657: PPUSH
28658: CALL_OW 428
28662: PUSH
28663: LD_VAR 0 1
28667: EQUAL
28668: PUSH
28669: LD_VAR 0 1
28673: PPUSH
28674: CALL_OW 314
28678: NOT
28679: AND
28680: IFFALSE 28606
// PlaySoundXY ( x , y , PlantMine ) ;
28682: LD_VAR 0 2
28686: PPUSH
28687: LD_VAR 0 3
28691: PPUSH
28692: LD_STRING PlantMine
28694: PPUSH
28695: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28699: LD_VAR 0 2
28703: PPUSH
28704: LD_VAR 0 3
28708: PPUSH
28709: LD_VAR 0 1
28713: PPUSH
28714: CALL_OW 255
28718: PPUSH
28719: LD_INT 0
28721: PPUSH
28722: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28726: LD_ADDR_EXP 116
28730: PUSH
28731: LD_EXP 116
28735: PPUSH
28736: LD_VAR 0 5
28740: PUSH
28741: LD_EXP 116
28745: PUSH
28746: LD_VAR 0 5
28750: ARRAY
28751: PUSH
28752: LD_INT 1
28754: PLUS
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PPUSH
28760: LD_VAR 0 2
28764: PUSH
28765: LD_VAR 0 3
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL 34986 0 3
28778: ST_TO_ADDR
// result := true ;
28779: LD_ADDR_VAR 0 4
28783: PUSH
28784: LD_INT 1
28786: ST_TO_ADDR
// end ;
28787: LD_VAR 0 4
28791: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28792: LD_INT 0
28794: PPUSH
28795: PPUSH
28796: PPUSH
// if not unit in minersList then
28797: LD_VAR 0 1
28801: PUSH
28802: LD_EXP 115
28806: IN
28807: NOT
28808: IFFALSE 28812
// exit ;
28810: GO 29204
// index := GetElementIndex ( minersList , unit ) ;
28812: LD_ADDR_VAR 0 6
28816: PUSH
28817: LD_EXP 115
28821: PPUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: CALL 34771 0 2
28831: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28832: LD_ADDR_VAR 0 5
28836: PUSH
28837: DOUBLE
28838: LD_EXP 116
28842: PUSH
28843: LD_VAR 0 6
28847: ARRAY
28848: INC
28849: ST_TO_ADDR
28850: LD_INT 1
28852: PUSH
28853: FOR_DOWNTO
28854: IFFALSE 29015
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28856: LD_EXP 116
28860: PUSH
28861: LD_VAR 0 6
28865: ARRAY
28866: PUSH
28867: LD_VAR 0 5
28871: ARRAY
28872: PUSH
28873: LD_INT 1
28875: ARRAY
28876: PUSH
28877: LD_VAR 0 2
28881: EQUAL
28882: PUSH
28883: LD_EXP 116
28887: PUSH
28888: LD_VAR 0 6
28892: ARRAY
28893: PUSH
28894: LD_VAR 0 5
28898: ARRAY
28899: PUSH
28900: LD_INT 2
28902: ARRAY
28903: PUSH
28904: LD_VAR 0 3
28908: EQUAL
28909: AND
28910: IFFALSE 29013
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28912: LD_EXP 116
28916: PUSH
28917: LD_VAR 0 6
28921: ARRAY
28922: PUSH
28923: LD_VAR 0 5
28927: ARRAY
28928: PUSH
28929: LD_INT 1
28931: ARRAY
28932: PPUSH
28933: LD_EXP 116
28937: PUSH
28938: LD_VAR 0 6
28942: ARRAY
28943: PUSH
28944: LD_VAR 0 5
28948: ARRAY
28949: PUSH
28950: LD_INT 2
28952: ARRAY
28953: PPUSH
28954: LD_VAR 0 1
28958: PPUSH
28959: CALL_OW 255
28963: PPUSH
28964: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28968: LD_ADDR_EXP 116
28972: PUSH
28973: LD_EXP 116
28977: PPUSH
28978: LD_VAR 0 6
28982: PPUSH
28983: LD_EXP 116
28987: PUSH
28988: LD_VAR 0 6
28992: ARRAY
28993: PPUSH
28994: LD_VAR 0 5
28998: PPUSH
28999: CALL_OW 3
29003: PPUSH
29004: CALL_OW 1
29008: ST_TO_ADDR
// exit ;
29009: POP
29010: POP
29011: GO 29204
// end ; end ;
29013: GO 28853
29015: POP
29016: POP
// for i := minerMinesList [ index ] downto 1 do
29017: LD_ADDR_VAR 0 5
29021: PUSH
29022: DOUBLE
29023: LD_EXP 116
29027: PUSH
29028: LD_VAR 0 6
29032: ARRAY
29033: INC
29034: ST_TO_ADDR
29035: LD_INT 1
29037: PUSH
29038: FOR_DOWNTO
29039: IFFALSE 29202
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29041: LD_EXP 116
29045: PUSH
29046: LD_VAR 0 6
29050: ARRAY
29051: PUSH
29052: LD_VAR 0 5
29056: ARRAY
29057: PUSH
29058: LD_INT 1
29060: ARRAY
29061: PPUSH
29062: LD_EXP 116
29066: PUSH
29067: LD_VAR 0 6
29071: ARRAY
29072: PUSH
29073: LD_VAR 0 5
29077: ARRAY
29078: PUSH
29079: LD_INT 2
29081: ARRAY
29082: PPUSH
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_VAR 0 3
29092: PPUSH
29093: CALL_OW 298
29097: PUSH
29098: LD_INT 6
29100: LESS
29101: IFFALSE 29200
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29103: LD_EXP 116
29107: PUSH
29108: LD_VAR 0 6
29112: ARRAY
29113: PUSH
29114: LD_VAR 0 5
29118: ARRAY
29119: PUSH
29120: LD_INT 1
29122: ARRAY
29123: PPUSH
29124: LD_EXP 116
29128: PUSH
29129: LD_VAR 0 6
29133: ARRAY
29134: PUSH
29135: LD_VAR 0 5
29139: ARRAY
29140: PUSH
29141: LD_INT 2
29143: ARRAY
29144: PPUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL_OW 255
29154: PPUSH
29155: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29159: LD_ADDR_EXP 116
29163: PUSH
29164: LD_EXP 116
29168: PPUSH
29169: LD_VAR 0 6
29173: PPUSH
29174: LD_EXP 116
29178: PUSH
29179: LD_VAR 0 6
29183: ARRAY
29184: PPUSH
29185: LD_VAR 0 5
29189: PPUSH
29190: CALL_OW 3
29194: PPUSH
29195: CALL_OW 1
29199: ST_TO_ADDR
// end ; end ;
29200: GO 29038
29202: POP
29203: POP
// end ;
29204: LD_VAR 0 4
29208: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29209: LD_INT 0
29211: PPUSH
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29220: LD_VAR 0 1
29224: PPUSH
29225: CALL_OW 264
29229: PUSH
29230: LD_EXP 39
29234: EQUAL
29235: NOT
29236: PUSH
29237: LD_VAR 0 1
29241: PUSH
29242: LD_EXP 115
29246: IN
29247: NOT
29248: OR
29249: IFFALSE 29253
// exit ;
29251: GO 29575
// index := GetElementIndex ( minersList , unit ) ;
29253: LD_ADDR_VAR 0 6
29257: PUSH
29258: LD_EXP 115
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL 34771 0 2
29272: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29273: LD_ADDR_VAR 0 8
29277: PUSH
29278: LD_EXP 117
29282: PUSH
29283: LD_EXP 116
29287: PUSH
29288: LD_VAR 0 6
29292: ARRAY
29293: MINUS
29294: ST_TO_ADDR
// if not minesFreeAmount then
29295: LD_VAR 0 8
29299: NOT
29300: IFFALSE 29304
// exit ;
29302: GO 29575
// tmp := [ ] ;
29304: LD_ADDR_VAR 0 7
29308: PUSH
29309: EMPTY
29310: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29311: LD_ADDR_VAR 0 5
29315: PUSH
29316: DOUBLE
29317: LD_INT 1
29319: DEC
29320: ST_TO_ADDR
29321: LD_VAR 0 8
29325: PUSH
29326: FOR_TO
29327: IFFALSE 29522
// begin _d := rand ( 0 , 5 ) ;
29329: LD_ADDR_VAR 0 11
29333: PUSH
29334: LD_INT 0
29336: PPUSH
29337: LD_INT 5
29339: PPUSH
29340: CALL_OW 12
29344: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29345: LD_ADDR_VAR 0 12
29349: PUSH
29350: LD_INT 2
29352: PPUSH
29353: LD_INT 6
29355: PPUSH
29356: CALL_OW 12
29360: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29361: LD_ADDR_VAR 0 9
29365: PUSH
29366: LD_VAR 0 2
29370: PPUSH
29371: LD_VAR 0 11
29375: PPUSH
29376: LD_VAR 0 12
29380: PPUSH
29381: CALL_OW 272
29385: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29386: LD_ADDR_VAR 0 10
29390: PUSH
29391: LD_VAR 0 3
29395: PPUSH
29396: LD_VAR 0 11
29400: PPUSH
29401: LD_VAR 0 12
29405: PPUSH
29406: CALL_OW 273
29410: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29411: LD_VAR 0 9
29415: PPUSH
29416: LD_VAR 0 10
29420: PPUSH
29421: CALL_OW 488
29425: PUSH
29426: LD_VAR 0 9
29430: PUSH
29431: LD_VAR 0 10
29435: PUSH
29436: EMPTY
29437: LIST
29438: LIST
29439: PUSH
29440: LD_VAR 0 7
29444: IN
29445: NOT
29446: AND
29447: PUSH
29448: LD_VAR 0 9
29452: PPUSH
29453: LD_VAR 0 10
29457: PPUSH
29458: CALL_OW 458
29462: NOT
29463: AND
29464: IFFALSE 29506
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29466: LD_ADDR_VAR 0 7
29470: PUSH
29471: LD_VAR 0 7
29475: PPUSH
29476: LD_VAR 0 7
29480: PUSH
29481: LD_INT 1
29483: PLUS
29484: PPUSH
29485: LD_VAR 0 9
29489: PUSH
29490: LD_VAR 0 10
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PPUSH
29499: CALL_OW 1
29503: ST_TO_ADDR
29504: GO 29520
// i := i - 1 ;
29506: LD_ADDR_VAR 0 5
29510: PUSH
29511: LD_VAR 0 5
29515: PUSH
29516: LD_INT 1
29518: MINUS
29519: ST_TO_ADDR
// end ;
29520: GO 29326
29522: POP
29523: POP
// for i in tmp do
29524: LD_ADDR_VAR 0 5
29528: PUSH
29529: LD_VAR 0 7
29533: PUSH
29534: FOR_IN
29535: IFFALSE 29573
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29537: LD_VAR 0 1
29541: PPUSH
29542: LD_VAR 0 5
29546: PUSH
29547: LD_INT 1
29549: ARRAY
29550: PPUSH
29551: LD_VAR 0 5
29555: PUSH
29556: LD_INT 2
29558: ARRAY
29559: PPUSH
29560: CALL 28515 0 3
29564: NOT
29565: IFFALSE 29571
// exit ;
29567: POP
29568: POP
29569: GO 29575
29571: GO 29534
29573: POP
29574: POP
// end ;
29575: LD_VAR 0 4
29579: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29580: LD_INT 0
29582: PPUSH
29583: PPUSH
29584: PPUSH
29585: PPUSH
29586: PPUSH
29587: PPUSH
29588: PPUSH
// if not GetClass ( unit ) = class_sniper then
29589: LD_VAR 0 1
29593: PPUSH
29594: CALL_OW 257
29598: PUSH
29599: LD_INT 5
29601: EQUAL
29602: NOT
29603: IFFALSE 29607
// exit ;
29605: GO 29995
// dist := 8 ;
29607: LD_ADDR_VAR 0 5
29611: PUSH
29612: LD_INT 8
29614: ST_TO_ADDR
// viewRange := 12 ;
29615: LD_ADDR_VAR 0 7
29619: PUSH
29620: LD_INT 12
29622: ST_TO_ADDR
// side := GetSide ( unit ) ;
29623: LD_ADDR_VAR 0 6
29627: PUSH
29628: LD_VAR 0 1
29632: PPUSH
29633: CALL_OW 255
29637: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29638: LD_INT 61
29640: PPUSH
29641: LD_VAR 0 6
29645: PPUSH
29646: CALL_OW 321
29650: PUSH
29651: LD_INT 2
29653: EQUAL
29654: IFFALSE 29664
// viewRange := 16 ;
29656: LD_ADDR_VAR 0 7
29660: PUSH
29661: LD_INT 16
29663: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29664: LD_VAR 0 1
29668: PPUSH
29669: LD_VAR 0 2
29673: PPUSH
29674: LD_VAR 0 3
29678: PPUSH
29679: CALL_OW 297
29683: PUSH
29684: LD_VAR 0 5
29688: GREATER
29689: IFFALSE 29768
// begin ComMoveXY ( unit , x , y ) ;
29691: LD_VAR 0 1
29695: PPUSH
29696: LD_VAR 0 2
29700: PPUSH
29701: LD_VAR 0 3
29705: PPUSH
29706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29710: LD_INT 35
29712: PPUSH
29713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_VAR 0 2
29726: PPUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: CALL 65543 0 3
29736: NOT
29737: IFFALSE 29741
// exit ;
29739: GO 29995
// until GetDistUnitXY ( unit , x , y ) < dist ;
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_VAR 0 2
29750: PPUSH
29751: LD_VAR 0 3
29755: PPUSH
29756: CALL_OW 297
29760: PUSH
29761: LD_VAR 0 5
29765: LESS
29766: IFFALSE 29710
// end ; ComTurnXY ( unit , x , y ) ;
29768: LD_VAR 0 1
29772: PPUSH
29773: LD_VAR 0 2
29777: PPUSH
29778: LD_VAR 0 3
29782: PPUSH
29783: CALL_OW 118
// wait ( 5 ) ;
29787: LD_INT 5
29789: PPUSH
29790: CALL_OW 67
// _d := GetDir ( unit ) ;
29794: LD_ADDR_VAR 0 10
29798: PUSH
29799: LD_VAR 0 1
29803: PPUSH
29804: CALL_OW 254
29808: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29809: LD_ADDR_VAR 0 8
29813: PUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: CALL_OW 250
29823: PPUSH
29824: LD_VAR 0 10
29828: PPUSH
29829: LD_VAR 0 5
29833: PPUSH
29834: CALL_OW 272
29838: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29839: LD_ADDR_VAR 0 9
29843: PUSH
29844: LD_VAR 0 1
29848: PPUSH
29849: CALL_OW 251
29853: PPUSH
29854: LD_VAR 0 10
29858: PPUSH
29859: LD_VAR 0 5
29863: PPUSH
29864: CALL_OW 273
29868: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29869: LD_VAR 0 8
29873: PPUSH
29874: LD_VAR 0 9
29878: PPUSH
29879: CALL_OW 488
29883: NOT
29884: IFFALSE 29888
// exit ;
29886: GO 29995
// ComAnimCustom ( unit , 1 ) ;
29888: LD_VAR 0 1
29892: PPUSH
29893: LD_INT 1
29895: PPUSH
29896: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29900: LD_VAR 0 8
29904: PPUSH
29905: LD_VAR 0 9
29909: PPUSH
29910: LD_VAR 0 6
29914: PPUSH
29915: LD_VAR 0 7
29919: PPUSH
29920: CALL_OW 330
// repeat wait ( 1 ) ;
29924: LD_INT 1
29926: PPUSH
29927: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29931: LD_VAR 0 1
29935: PPUSH
29936: CALL_OW 316
29940: PUSH
29941: LD_VAR 0 1
29945: PPUSH
29946: CALL_OW 314
29950: OR
29951: PUSH
29952: LD_VAR 0 1
29956: PPUSH
29957: CALL_OW 302
29961: NOT
29962: OR
29963: PUSH
29964: LD_VAR 0 1
29968: PPUSH
29969: CALL_OW 301
29973: OR
29974: IFFALSE 29924
// RemoveSeeing ( _x , _y , side ) ;
29976: LD_VAR 0 8
29980: PPUSH
29981: LD_VAR 0 9
29985: PPUSH
29986: LD_VAR 0 6
29990: PPUSH
29991: CALL_OW 331
// end ; end_of_file
29995: LD_VAR 0 4
29999: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30000: LD_INT 0
30002: PPUSH
30003: PPUSH
// if exist_mode then
30004: LD_VAR 0 2
30008: IFFALSE 30033
// unit := CreateCharacter ( prefix & ident ) else
30010: LD_ADDR_VAR 0 5
30014: PUSH
30015: LD_VAR 0 3
30019: PUSH
30020: LD_VAR 0 1
30024: STR
30025: PPUSH
30026: CALL_OW 34
30030: ST_TO_ADDR
30031: GO 30048
// unit := NewCharacter ( ident ) ;
30033: LD_ADDR_VAR 0 5
30037: PUSH
30038: LD_VAR 0 1
30042: PPUSH
30043: CALL_OW 25
30047: ST_TO_ADDR
// result := unit ;
30048: LD_ADDR_VAR 0 4
30052: PUSH
30053: LD_VAR 0 5
30057: ST_TO_ADDR
// end ;
30058: LD_VAR 0 4
30062: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30063: LD_INT 0
30065: PPUSH
30066: PPUSH
// if not side or not nation then
30067: LD_VAR 0 1
30071: NOT
30072: PUSH
30073: LD_VAR 0 2
30077: NOT
30078: OR
30079: IFFALSE 30083
// exit ;
30081: GO 30851
// case nation of nation_american :
30083: LD_VAR 0 2
30087: PUSH
30088: LD_INT 1
30090: DOUBLE
30091: EQUAL
30092: IFTRUE 30096
30094: GO 30310
30096: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30097: LD_ADDR_VAR 0 4
30101: PUSH
30102: LD_INT 35
30104: PUSH
30105: LD_INT 45
30107: PUSH
30108: LD_INT 46
30110: PUSH
30111: LD_INT 47
30113: PUSH
30114: LD_INT 82
30116: PUSH
30117: LD_INT 83
30119: PUSH
30120: LD_INT 84
30122: PUSH
30123: LD_INT 85
30125: PUSH
30126: LD_INT 86
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: LD_INT 2
30134: PUSH
30135: LD_INT 6
30137: PUSH
30138: LD_INT 15
30140: PUSH
30141: LD_INT 16
30143: PUSH
30144: LD_INT 7
30146: PUSH
30147: LD_INT 12
30149: PUSH
30150: LD_INT 13
30152: PUSH
30153: LD_INT 10
30155: PUSH
30156: LD_INT 14
30158: PUSH
30159: LD_INT 20
30161: PUSH
30162: LD_INT 21
30164: PUSH
30165: LD_INT 22
30167: PUSH
30168: LD_INT 25
30170: PUSH
30171: LD_INT 32
30173: PUSH
30174: LD_INT 27
30176: PUSH
30177: LD_INT 36
30179: PUSH
30180: LD_INT 69
30182: PUSH
30183: LD_INT 39
30185: PUSH
30186: LD_INT 34
30188: PUSH
30189: LD_INT 40
30191: PUSH
30192: LD_INT 48
30194: PUSH
30195: LD_INT 49
30197: PUSH
30198: LD_INT 50
30200: PUSH
30201: LD_INT 51
30203: PUSH
30204: LD_INT 52
30206: PUSH
30207: LD_INT 53
30209: PUSH
30210: LD_INT 54
30212: PUSH
30213: LD_INT 55
30215: PUSH
30216: LD_INT 56
30218: PUSH
30219: LD_INT 57
30221: PUSH
30222: LD_INT 58
30224: PUSH
30225: LD_INT 59
30227: PUSH
30228: LD_INT 60
30230: PUSH
30231: LD_INT 61
30233: PUSH
30234: LD_INT 62
30236: PUSH
30237: LD_INT 80
30239: PUSH
30240: LD_INT 82
30242: PUSH
30243: LD_INT 83
30245: PUSH
30246: LD_INT 84
30248: PUSH
30249: LD_INT 85
30251: PUSH
30252: LD_INT 86
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: ST_TO_ADDR
30308: GO 30775
30310: LD_INT 2
30312: DOUBLE
30313: EQUAL
30314: IFTRUE 30318
30316: GO 30544
30318: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30319: LD_ADDR_VAR 0 4
30323: PUSH
30324: LD_INT 35
30326: PUSH
30327: LD_INT 45
30329: PUSH
30330: LD_INT 46
30332: PUSH
30333: LD_INT 47
30335: PUSH
30336: LD_INT 82
30338: PUSH
30339: LD_INT 83
30341: PUSH
30342: LD_INT 84
30344: PUSH
30345: LD_INT 85
30347: PUSH
30348: LD_INT 87
30350: PUSH
30351: LD_INT 70
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: LD_INT 11
30359: PUSH
30360: LD_INT 3
30362: PUSH
30363: LD_INT 4
30365: PUSH
30366: LD_INT 5
30368: PUSH
30369: LD_INT 6
30371: PUSH
30372: LD_INT 15
30374: PUSH
30375: LD_INT 18
30377: PUSH
30378: LD_INT 7
30380: PUSH
30381: LD_INT 17
30383: PUSH
30384: LD_INT 8
30386: PUSH
30387: LD_INT 20
30389: PUSH
30390: LD_INT 21
30392: PUSH
30393: LD_INT 22
30395: PUSH
30396: LD_INT 72
30398: PUSH
30399: LD_INT 26
30401: PUSH
30402: LD_INT 69
30404: PUSH
30405: LD_INT 39
30407: PUSH
30408: LD_INT 40
30410: PUSH
30411: LD_INT 41
30413: PUSH
30414: LD_INT 42
30416: PUSH
30417: LD_INT 43
30419: PUSH
30420: LD_INT 48
30422: PUSH
30423: LD_INT 49
30425: PUSH
30426: LD_INT 50
30428: PUSH
30429: LD_INT 51
30431: PUSH
30432: LD_INT 52
30434: PUSH
30435: LD_INT 53
30437: PUSH
30438: LD_INT 54
30440: PUSH
30441: LD_INT 55
30443: PUSH
30444: LD_INT 56
30446: PUSH
30447: LD_INT 60
30449: PUSH
30450: LD_INT 61
30452: PUSH
30453: LD_INT 62
30455: PUSH
30456: LD_INT 66
30458: PUSH
30459: LD_INT 67
30461: PUSH
30462: LD_INT 68
30464: PUSH
30465: LD_INT 81
30467: PUSH
30468: LD_INT 82
30470: PUSH
30471: LD_INT 83
30473: PUSH
30474: LD_INT 84
30476: PUSH
30477: LD_INT 85
30479: PUSH
30480: LD_INT 87
30482: PUSH
30483: LD_INT 88
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: ST_TO_ADDR
30542: GO 30775
30544: LD_INT 3
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30774
30552: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30553: LD_ADDR_VAR 0 4
30557: PUSH
30558: LD_INT 46
30560: PUSH
30561: LD_INT 47
30563: PUSH
30564: LD_INT 1
30566: PUSH
30567: LD_INT 2
30569: PUSH
30570: LD_INT 82
30572: PUSH
30573: LD_INT 83
30575: PUSH
30576: LD_INT 84
30578: PUSH
30579: LD_INT 85
30581: PUSH
30582: LD_INT 86
30584: PUSH
30585: LD_INT 11
30587: PUSH
30588: LD_INT 9
30590: PUSH
30591: LD_INT 20
30593: PUSH
30594: LD_INT 19
30596: PUSH
30597: LD_INT 21
30599: PUSH
30600: LD_INT 24
30602: PUSH
30603: LD_INT 22
30605: PUSH
30606: LD_INT 25
30608: PUSH
30609: LD_INT 28
30611: PUSH
30612: LD_INT 29
30614: PUSH
30615: LD_INT 30
30617: PUSH
30618: LD_INT 31
30620: PUSH
30621: LD_INT 37
30623: PUSH
30624: LD_INT 38
30626: PUSH
30627: LD_INT 32
30629: PUSH
30630: LD_INT 27
30632: PUSH
30633: LD_INT 33
30635: PUSH
30636: LD_INT 69
30638: PUSH
30639: LD_INT 39
30641: PUSH
30642: LD_INT 34
30644: PUSH
30645: LD_INT 40
30647: PUSH
30648: LD_INT 71
30650: PUSH
30651: LD_INT 23
30653: PUSH
30654: LD_INT 44
30656: PUSH
30657: LD_INT 48
30659: PUSH
30660: LD_INT 49
30662: PUSH
30663: LD_INT 50
30665: PUSH
30666: LD_INT 51
30668: PUSH
30669: LD_INT 52
30671: PUSH
30672: LD_INT 53
30674: PUSH
30675: LD_INT 54
30677: PUSH
30678: LD_INT 55
30680: PUSH
30681: LD_INT 56
30683: PUSH
30684: LD_INT 57
30686: PUSH
30687: LD_INT 58
30689: PUSH
30690: LD_INT 59
30692: PUSH
30693: LD_INT 63
30695: PUSH
30696: LD_INT 64
30698: PUSH
30699: LD_INT 65
30701: PUSH
30702: LD_INT 82
30704: PUSH
30705: LD_INT 83
30707: PUSH
30708: LD_INT 84
30710: PUSH
30711: LD_INT 85
30713: PUSH
30714: LD_INT 86
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: LIST
30726: LIST
30727: LIST
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: ST_TO_ADDR
30772: GO 30775
30774: POP
// if state > - 1 and state < 3 then
30775: LD_VAR 0 3
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: GREATER
30784: PUSH
30785: LD_VAR 0 3
30789: PUSH
30790: LD_INT 3
30792: LESS
30793: AND
30794: IFFALSE 30851
// for i in result do
30796: LD_ADDR_VAR 0 5
30800: PUSH
30801: LD_VAR 0 4
30805: PUSH
30806: FOR_IN
30807: IFFALSE 30849
// if GetTech ( i , side ) <> state then
30809: LD_VAR 0 5
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 321
30823: PUSH
30824: LD_VAR 0 3
30828: NONEQUAL
30829: IFFALSE 30847
// result := result diff i ;
30831: LD_ADDR_VAR 0 4
30835: PUSH
30836: LD_VAR 0 4
30840: PUSH
30841: LD_VAR 0 5
30845: DIFF
30846: ST_TO_ADDR
30847: GO 30806
30849: POP
30850: POP
// end ;
30851: LD_VAR 0 4
30855: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
30860: PPUSH
// result := true ;
30861: LD_ADDR_VAR 0 3
30865: PUSH
30866: LD_INT 1
30868: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30869: LD_ADDR_VAR 0 5
30873: PUSH
30874: LD_VAR 0 2
30878: PPUSH
30879: CALL_OW 480
30883: ST_TO_ADDR
// if not tmp then
30884: LD_VAR 0 5
30888: NOT
30889: IFFALSE 30893
// exit ;
30891: GO 30942
// for i in tmp do
30893: LD_ADDR_VAR 0 4
30897: PUSH
30898: LD_VAR 0 5
30902: PUSH
30903: FOR_IN
30904: IFFALSE 30940
// if GetTech ( i , side ) <> state_researched then
30906: LD_VAR 0 4
30910: PPUSH
30911: LD_VAR 0 1
30915: PPUSH
30916: CALL_OW 321
30920: PUSH
30921: LD_INT 2
30923: NONEQUAL
30924: IFFALSE 30938
// begin result := false ;
30926: LD_ADDR_VAR 0 3
30930: PUSH
30931: LD_INT 0
30933: ST_TO_ADDR
// exit ;
30934: POP
30935: POP
30936: GO 30942
// end ;
30938: GO 30903
30940: POP
30941: POP
// end ;
30942: LD_VAR 0 3
30946: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30947: LD_INT 0
30949: PPUSH
30950: PPUSH
30951: PPUSH
30952: PPUSH
30953: PPUSH
30954: PPUSH
30955: PPUSH
30956: PPUSH
30957: PPUSH
30958: PPUSH
30959: PPUSH
30960: PPUSH
30961: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30962: LD_VAR 0 1
30966: NOT
30967: PUSH
30968: LD_VAR 0 1
30972: PPUSH
30973: CALL_OW 257
30977: PUSH
30978: LD_INT 9
30980: NONEQUAL
30981: OR
30982: IFFALSE 30986
// exit ;
30984: GO 31559
// side := GetSide ( unit ) ;
30986: LD_ADDR_VAR 0 9
30990: PUSH
30991: LD_VAR 0 1
30995: PPUSH
30996: CALL_OW 255
31000: ST_TO_ADDR
// tech_space := tech_spacanom ;
31001: LD_ADDR_VAR 0 12
31005: PUSH
31006: LD_INT 29
31008: ST_TO_ADDR
// tech_time := tech_taurad ;
31009: LD_ADDR_VAR 0 13
31013: PUSH
31014: LD_INT 28
31016: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31017: LD_ADDR_VAR 0 11
31021: PUSH
31022: LD_VAR 0 1
31026: PPUSH
31027: CALL_OW 310
31031: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31032: LD_VAR 0 11
31036: PPUSH
31037: CALL_OW 247
31041: PUSH
31042: LD_INT 2
31044: EQUAL
31045: IFFALSE 31049
// exit ;
31047: GO 31559
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31049: LD_ADDR_VAR 0 8
31053: PUSH
31054: LD_INT 81
31056: PUSH
31057: LD_VAR 0 9
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 3
31068: PUSH
31069: LD_INT 21
31071: PUSH
31072: LD_INT 3
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 69
31091: ST_TO_ADDR
// if not tmp then
31092: LD_VAR 0 8
31096: NOT
31097: IFFALSE 31101
// exit ;
31099: GO 31559
// if in_unit then
31101: LD_VAR 0 11
31105: IFFALSE 31129
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31107: LD_ADDR_VAR 0 10
31111: PUSH
31112: LD_VAR 0 8
31116: PPUSH
31117: LD_VAR 0 11
31121: PPUSH
31122: CALL_OW 74
31126: ST_TO_ADDR
31127: GO 31149
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31129: LD_ADDR_VAR 0 10
31133: PUSH
31134: LD_VAR 0 8
31138: PPUSH
31139: LD_VAR 0 1
31143: PPUSH
31144: CALL_OW 74
31148: ST_TO_ADDR
// if not enemy then
31149: LD_VAR 0 10
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 31559
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31158: LD_VAR 0 11
31162: PUSH
31163: LD_VAR 0 11
31167: PPUSH
31168: LD_VAR 0 10
31172: PPUSH
31173: CALL_OW 296
31177: PUSH
31178: LD_INT 13
31180: GREATER
31181: AND
31182: PUSH
31183: LD_VAR 0 1
31187: PPUSH
31188: LD_VAR 0 10
31192: PPUSH
31193: CALL_OW 296
31197: PUSH
31198: LD_INT 12
31200: GREATER
31201: OR
31202: IFFALSE 31206
// exit ;
31204: GO 31559
// missile := [ 1 ] ;
31206: LD_ADDR_VAR 0 14
31210: PUSH
31211: LD_INT 1
31213: PUSH
31214: EMPTY
31215: LIST
31216: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31217: LD_VAR 0 9
31221: PPUSH
31222: LD_VAR 0 12
31226: PPUSH
31227: CALL_OW 325
31231: IFFALSE 31260
// missile := Insert ( missile , missile + 1 , 2 ) ;
31233: LD_ADDR_VAR 0 14
31237: PUSH
31238: LD_VAR 0 14
31242: PPUSH
31243: LD_VAR 0 14
31247: PUSH
31248: LD_INT 1
31250: PLUS
31251: PPUSH
31252: LD_INT 2
31254: PPUSH
31255: CALL_OW 2
31259: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31260: LD_VAR 0 9
31264: PPUSH
31265: LD_VAR 0 13
31269: PPUSH
31270: CALL_OW 325
31274: PUSH
31275: LD_VAR 0 10
31279: PPUSH
31280: CALL_OW 255
31284: PPUSH
31285: LD_VAR 0 13
31289: PPUSH
31290: CALL_OW 325
31294: NOT
31295: AND
31296: IFFALSE 31325
// missile := Insert ( missile , missile + 1 , 3 ) ;
31298: LD_ADDR_VAR 0 14
31302: PUSH
31303: LD_VAR 0 14
31307: PPUSH
31308: LD_VAR 0 14
31312: PUSH
31313: LD_INT 1
31315: PLUS
31316: PPUSH
31317: LD_INT 3
31319: PPUSH
31320: CALL_OW 2
31324: ST_TO_ADDR
// if missile < 2 then
31325: LD_VAR 0 14
31329: PUSH
31330: LD_INT 2
31332: LESS
31333: IFFALSE 31337
// exit ;
31335: GO 31559
// x := GetX ( enemy ) ;
31337: LD_ADDR_VAR 0 4
31341: PUSH
31342: LD_VAR 0 10
31346: PPUSH
31347: CALL_OW 250
31351: ST_TO_ADDR
// y := GetY ( enemy ) ;
31352: LD_ADDR_VAR 0 5
31356: PUSH
31357: LD_VAR 0 10
31361: PPUSH
31362: CALL_OW 251
31366: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31367: LD_ADDR_VAR 0 6
31371: PUSH
31372: LD_VAR 0 4
31376: PUSH
31377: LD_INT 1
31379: NEG
31380: PPUSH
31381: LD_INT 1
31383: PPUSH
31384: CALL_OW 12
31388: PLUS
31389: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31390: LD_ADDR_VAR 0 7
31394: PUSH
31395: LD_VAR 0 5
31399: PUSH
31400: LD_INT 1
31402: NEG
31403: PPUSH
31404: LD_INT 1
31406: PPUSH
31407: CALL_OW 12
31411: PLUS
31412: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31413: LD_VAR 0 6
31417: PPUSH
31418: LD_VAR 0 7
31422: PPUSH
31423: CALL_OW 488
31427: NOT
31428: IFFALSE 31450
// begin _x := x ;
31430: LD_ADDR_VAR 0 6
31434: PUSH
31435: LD_VAR 0 4
31439: ST_TO_ADDR
// _y := y ;
31440: LD_ADDR_VAR 0 7
31444: PUSH
31445: LD_VAR 0 5
31449: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31450: LD_ADDR_VAR 0 3
31454: PUSH
31455: LD_INT 1
31457: PPUSH
31458: LD_VAR 0 14
31462: PPUSH
31463: CALL_OW 12
31467: ST_TO_ADDR
// case i of 1 :
31468: LD_VAR 0 3
31472: PUSH
31473: LD_INT 1
31475: DOUBLE
31476: EQUAL
31477: IFTRUE 31481
31479: GO 31498
31481: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31482: LD_VAR 0 1
31486: PPUSH
31487: LD_VAR 0 10
31491: PPUSH
31492: CALL_OW 115
31496: GO 31559
31498: LD_INT 2
31500: DOUBLE
31501: EQUAL
31502: IFTRUE 31506
31504: GO 31528
31506: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31507: LD_VAR 0 1
31511: PPUSH
31512: LD_VAR 0 6
31516: PPUSH
31517: LD_VAR 0 7
31521: PPUSH
31522: CALL_OW 153
31526: GO 31559
31528: LD_INT 3
31530: DOUBLE
31531: EQUAL
31532: IFTRUE 31536
31534: GO 31558
31536: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31537: LD_VAR 0 1
31541: PPUSH
31542: LD_VAR 0 6
31546: PPUSH
31547: LD_VAR 0 7
31551: PPUSH
31552: CALL_OW 154
31556: GO 31559
31558: POP
// end ;
31559: LD_VAR 0 2
31563: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31564: LD_INT 0
31566: PPUSH
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
31571: PPUSH
// if not unit or not building then
31572: LD_VAR 0 1
31576: NOT
31577: PUSH
31578: LD_VAR 0 2
31582: NOT
31583: OR
31584: IFFALSE 31588
// exit ;
31586: GO 31746
// x := GetX ( building ) ;
31588: LD_ADDR_VAR 0 5
31592: PUSH
31593: LD_VAR 0 2
31597: PPUSH
31598: CALL_OW 250
31602: ST_TO_ADDR
// y := GetY ( building ) ;
31603: LD_ADDR_VAR 0 6
31607: PUSH
31608: LD_VAR 0 2
31612: PPUSH
31613: CALL_OW 251
31617: ST_TO_ADDR
// for i = 0 to 5 do
31618: LD_ADDR_VAR 0 4
31622: PUSH
31623: DOUBLE
31624: LD_INT 0
31626: DEC
31627: ST_TO_ADDR
31628: LD_INT 5
31630: PUSH
31631: FOR_TO
31632: IFFALSE 31744
// begin _x := ShiftX ( x , i , 3 ) ;
31634: LD_ADDR_VAR 0 7
31638: PUSH
31639: LD_VAR 0 5
31643: PPUSH
31644: LD_VAR 0 4
31648: PPUSH
31649: LD_INT 3
31651: PPUSH
31652: CALL_OW 272
31656: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31657: LD_ADDR_VAR 0 8
31661: PUSH
31662: LD_VAR 0 6
31666: PPUSH
31667: LD_VAR 0 4
31671: PPUSH
31672: LD_INT 3
31674: PPUSH
31675: CALL_OW 273
31679: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31680: LD_VAR 0 7
31684: PPUSH
31685: LD_VAR 0 8
31689: PPUSH
31690: CALL_OW 488
31694: NOT
31695: IFFALSE 31699
// continue ;
31697: GO 31631
// if HexInfo ( _x , _y ) = 0 then
31699: LD_VAR 0 7
31703: PPUSH
31704: LD_VAR 0 8
31708: PPUSH
31709: CALL_OW 428
31713: PUSH
31714: LD_INT 0
31716: EQUAL
31717: IFFALSE 31742
// begin ComMoveXY ( unit , _x , _y ) ;
31719: LD_VAR 0 1
31723: PPUSH
31724: LD_VAR 0 7
31728: PPUSH
31729: LD_VAR 0 8
31733: PPUSH
31734: CALL_OW 111
// exit ;
31738: POP
31739: POP
31740: GO 31746
// end ; end ;
31742: GO 31631
31744: POP
31745: POP
// end ;
31746: LD_VAR 0 3
31750: RET
// export function ScanBase ( side , base_area ) ; begin
31751: LD_INT 0
31753: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31754: LD_ADDR_VAR 0 3
31758: PUSH
31759: LD_VAR 0 2
31763: PPUSH
31764: LD_INT 81
31766: PUSH
31767: LD_VAR 0 1
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PPUSH
31776: CALL_OW 70
31780: ST_TO_ADDR
// end ;
31781: LD_VAR 0 3
31785: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31786: LD_INT 0
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
// result := false ;
31792: LD_ADDR_VAR 0 2
31796: PUSH
31797: LD_INT 0
31799: ST_TO_ADDR
// side := GetSide ( unit ) ;
31800: LD_ADDR_VAR 0 3
31804: PUSH
31805: LD_VAR 0 1
31809: PPUSH
31810: CALL_OW 255
31814: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31815: LD_ADDR_VAR 0 4
31819: PUSH
31820: LD_VAR 0 1
31824: PPUSH
31825: CALL_OW 248
31829: ST_TO_ADDR
// case nat of 1 :
31830: LD_VAR 0 4
31834: PUSH
31835: LD_INT 1
31837: DOUBLE
31838: EQUAL
31839: IFTRUE 31843
31841: GO 31854
31843: POP
// tech := tech_lassight ; 2 :
31844: LD_ADDR_VAR 0 5
31848: PUSH
31849: LD_INT 12
31851: ST_TO_ADDR
31852: GO 31893
31854: LD_INT 2
31856: DOUBLE
31857: EQUAL
31858: IFTRUE 31862
31860: GO 31873
31862: POP
// tech := tech_mortar ; 3 :
31863: LD_ADDR_VAR 0 5
31867: PUSH
31868: LD_INT 41
31870: ST_TO_ADDR
31871: GO 31893
31873: LD_INT 3
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 31892
31881: POP
// tech := tech_bazooka ; end ;
31882: LD_ADDR_VAR 0 5
31886: PUSH
31887: LD_INT 44
31889: ST_TO_ADDR
31890: GO 31893
31892: POP
// if Researched ( side , tech ) then
31893: LD_VAR 0 3
31897: PPUSH
31898: LD_VAR 0 5
31902: PPUSH
31903: CALL_OW 325
31907: IFFALSE 31934
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31909: LD_ADDR_VAR 0 2
31913: PUSH
31914: LD_INT 5
31916: PUSH
31917: LD_INT 8
31919: PUSH
31920: LD_INT 9
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: PUSH
31928: LD_VAR 0 4
31932: ARRAY
31933: ST_TO_ADDR
// end ;
31934: LD_VAR 0 2
31938: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31939: LD_INT 0
31941: PPUSH
31942: PPUSH
31943: PPUSH
// if not mines then
31944: LD_VAR 0 2
31948: NOT
31949: IFFALSE 31953
// exit ;
31951: GO 32097
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31953: LD_ADDR_VAR 0 5
31957: PUSH
31958: LD_INT 81
31960: PUSH
31961: LD_VAR 0 1
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 3
31972: PUSH
31973: LD_INT 21
31975: PUSH
31976: LD_INT 3
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: PUSH
31983: EMPTY
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: PPUSH
31991: CALL_OW 69
31995: ST_TO_ADDR
// for i in mines do
31996: LD_ADDR_VAR 0 4
32000: PUSH
32001: LD_VAR 0 2
32005: PUSH
32006: FOR_IN
32007: IFFALSE 32095
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32009: LD_VAR 0 4
32013: PUSH
32014: LD_INT 1
32016: ARRAY
32017: PPUSH
32018: LD_VAR 0 4
32022: PUSH
32023: LD_INT 2
32025: ARRAY
32026: PPUSH
32027: CALL_OW 458
32031: NOT
32032: IFFALSE 32036
// continue ;
32034: GO 32006
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32036: LD_VAR 0 4
32040: PUSH
32041: LD_INT 1
32043: ARRAY
32044: PPUSH
32045: LD_VAR 0 4
32049: PUSH
32050: LD_INT 2
32052: ARRAY
32053: PPUSH
32054: CALL_OW 428
32058: PUSH
32059: LD_VAR 0 5
32063: IN
32064: IFFALSE 32093
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32066: LD_VAR 0 4
32070: PUSH
32071: LD_INT 1
32073: ARRAY
32074: PPUSH
32075: LD_VAR 0 4
32079: PUSH
32080: LD_INT 2
32082: ARRAY
32083: PPUSH
32084: LD_VAR 0 1
32088: PPUSH
32089: CALL_OW 456
// end ;
32093: GO 32006
32095: POP
32096: POP
// end ;
32097: LD_VAR 0 3
32101: RET
// export function Count ( array ) ; var i ; begin
32102: LD_INT 0
32104: PPUSH
32105: PPUSH
// result := 0 ;
32106: LD_ADDR_VAR 0 2
32110: PUSH
32111: LD_INT 0
32113: ST_TO_ADDR
// for i in array do
32114: LD_ADDR_VAR 0 3
32118: PUSH
32119: LD_VAR 0 1
32123: PUSH
32124: FOR_IN
32125: IFFALSE 32149
// if i then
32127: LD_VAR 0 3
32131: IFFALSE 32147
// result := result + 1 ;
32133: LD_ADDR_VAR 0 2
32137: PUSH
32138: LD_VAR 0 2
32142: PUSH
32143: LD_INT 1
32145: PLUS
32146: ST_TO_ADDR
32147: GO 32124
32149: POP
32150: POP
// end ;
32151: LD_VAR 0 2
32155: RET
// export function IsEmpty ( building ) ; begin
32156: LD_INT 0
32158: PPUSH
// if not building then
32159: LD_VAR 0 1
32163: NOT
32164: IFFALSE 32168
// exit ;
32166: GO 32211
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32168: LD_ADDR_VAR 0 2
32172: PUSH
32173: LD_VAR 0 1
32177: PUSH
32178: LD_INT 22
32180: PUSH
32181: LD_VAR 0 1
32185: PPUSH
32186: CALL_OW 255
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 58
32197: PUSH
32198: EMPTY
32199: LIST
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PPUSH
32205: CALL_OW 69
32209: IN
32210: ST_TO_ADDR
// end ;
32211: LD_VAR 0 2
32215: RET
// export function IsNotFull ( building ) ; begin
32216: LD_INT 0
32218: PPUSH
// if not building then
32219: LD_VAR 0 1
32223: NOT
32224: IFFALSE 32228
// exit ;
32226: GO 32247
// result := UnitsInside ( building ) < 6 ;
32228: LD_ADDR_VAR 0 2
32232: PUSH
32233: LD_VAR 0 1
32237: PPUSH
32238: CALL_OW 313
32242: PUSH
32243: LD_INT 6
32245: LESS
32246: ST_TO_ADDR
// end ;
32247: LD_VAR 0 2
32251: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32252: LD_INT 0
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
// tmp := [ ] ;
32258: LD_ADDR_VAR 0 3
32262: PUSH
32263: EMPTY
32264: ST_TO_ADDR
// list := [ ] ;
32265: LD_ADDR_VAR 0 5
32269: PUSH
32270: EMPTY
32271: ST_TO_ADDR
// for i = 16 to 25 do
32272: LD_ADDR_VAR 0 4
32276: PUSH
32277: DOUBLE
32278: LD_INT 16
32280: DEC
32281: ST_TO_ADDR
32282: LD_INT 25
32284: PUSH
32285: FOR_TO
32286: IFFALSE 32359
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32288: LD_ADDR_VAR 0 3
32292: PUSH
32293: LD_VAR 0 3
32297: PUSH
32298: LD_INT 22
32300: PUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 255
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 91
32317: PUSH
32318: LD_VAR 0 1
32322: PUSH
32323: LD_INT 6
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 30
32333: PUSH
32334: LD_VAR 0 4
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: PPUSH
32351: CALL_OW 69
32355: ADD
32356: ST_TO_ADDR
32357: GO 32285
32359: POP
32360: POP
// for i = 1 to tmp do
32361: LD_ADDR_VAR 0 4
32365: PUSH
32366: DOUBLE
32367: LD_INT 1
32369: DEC
32370: ST_TO_ADDR
32371: LD_VAR 0 3
32375: PUSH
32376: FOR_TO
32377: IFFALSE 32465
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32379: LD_ADDR_VAR 0 5
32383: PUSH
32384: LD_VAR 0 5
32388: PUSH
32389: LD_VAR 0 3
32393: PUSH
32394: LD_VAR 0 4
32398: ARRAY
32399: PPUSH
32400: CALL_OW 266
32404: PUSH
32405: LD_VAR 0 3
32409: PUSH
32410: LD_VAR 0 4
32414: ARRAY
32415: PPUSH
32416: CALL_OW 250
32420: PUSH
32421: LD_VAR 0 3
32425: PUSH
32426: LD_VAR 0 4
32430: ARRAY
32431: PPUSH
32432: CALL_OW 251
32436: PUSH
32437: LD_VAR 0 3
32441: PUSH
32442: LD_VAR 0 4
32446: ARRAY
32447: PPUSH
32448: CALL_OW 254
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: PUSH
32459: EMPTY
32460: LIST
32461: ADD
32462: ST_TO_ADDR
32463: GO 32376
32465: POP
32466: POP
// result := list ;
32467: LD_ADDR_VAR 0 2
32471: PUSH
32472: LD_VAR 0 5
32476: ST_TO_ADDR
// end ;
32477: LD_VAR 0 2
32481: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32482: LD_INT 0
32484: PPUSH
32485: PPUSH
32486: PPUSH
32487: PPUSH
32488: PPUSH
32489: PPUSH
32490: PPUSH
// if not factory then
32491: LD_VAR 0 1
32495: NOT
32496: IFFALSE 32500
// exit ;
32498: GO 33093
// if control = control_apeman then
32500: LD_VAR 0 4
32504: PUSH
32505: LD_INT 5
32507: EQUAL
32508: IFFALSE 32617
// begin tmp := UnitsInside ( factory ) ;
32510: LD_ADDR_VAR 0 8
32514: PUSH
32515: LD_VAR 0 1
32519: PPUSH
32520: CALL_OW 313
32524: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32525: LD_VAR 0 8
32529: PPUSH
32530: LD_INT 25
32532: PUSH
32533: LD_INT 12
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PPUSH
32540: CALL_OW 72
32544: NOT
32545: IFFALSE 32555
// control := control_manual ;
32547: LD_ADDR_VAR 0 4
32551: PUSH
32552: LD_INT 1
32554: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32555: LD_ADDR_VAR 0 8
32559: PUSH
32560: LD_VAR 0 1
32564: PPUSH
32565: CALL 32252 0 1
32569: ST_TO_ADDR
// if tmp then
32570: LD_VAR 0 8
32574: IFFALSE 32617
// begin for i in tmp do
32576: LD_ADDR_VAR 0 7
32580: PUSH
32581: LD_VAR 0 8
32585: PUSH
32586: FOR_IN
32587: IFFALSE 32615
// if i [ 1 ] = b_ext_radio then
32589: LD_VAR 0 7
32593: PUSH
32594: LD_INT 1
32596: ARRAY
32597: PUSH
32598: LD_INT 22
32600: EQUAL
32601: IFFALSE 32613
// begin control := control_remote ;
32603: LD_ADDR_VAR 0 4
32607: PUSH
32608: LD_INT 2
32610: ST_TO_ADDR
// break ;
32611: GO 32615
// end ;
32613: GO 32586
32615: POP
32616: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32617: LD_VAR 0 1
32621: PPUSH
32622: LD_VAR 0 2
32626: PPUSH
32627: LD_VAR 0 3
32631: PPUSH
32632: LD_VAR 0 4
32636: PPUSH
32637: LD_VAR 0 5
32641: PPUSH
32642: CALL_OW 448
32646: IFFALSE 32681
// begin result := [ chassis , engine , control , weapon ] ;
32648: LD_ADDR_VAR 0 6
32652: PUSH
32653: LD_VAR 0 2
32657: PUSH
32658: LD_VAR 0 3
32662: PUSH
32663: LD_VAR 0 4
32667: PUSH
32668: LD_VAR 0 5
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: ST_TO_ADDR
// exit ;
32679: GO 33093
// end ; _chassis := AvailableChassisList ( factory ) ;
32681: LD_ADDR_VAR 0 9
32685: PUSH
32686: LD_VAR 0 1
32690: PPUSH
32691: CALL_OW 475
32695: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32696: LD_ADDR_VAR 0 11
32700: PUSH
32701: LD_VAR 0 1
32705: PPUSH
32706: CALL_OW 476
32710: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32711: LD_ADDR_VAR 0 12
32715: PUSH
32716: LD_VAR 0 1
32720: PPUSH
32721: CALL_OW 477
32725: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32726: LD_ADDR_VAR 0 10
32730: PUSH
32731: LD_VAR 0 1
32735: PPUSH
32736: CALL_OW 478
32740: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32741: LD_VAR 0 9
32745: NOT
32746: PUSH
32747: LD_VAR 0 11
32751: NOT
32752: OR
32753: PUSH
32754: LD_VAR 0 12
32758: NOT
32759: OR
32760: PUSH
32761: LD_VAR 0 10
32765: NOT
32766: OR
32767: IFFALSE 32802
// begin result := [ chassis , engine , control , weapon ] ;
32769: LD_ADDR_VAR 0 6
32773: PUSH
32774: LD_VAR 0 2
32778: PUSH
32779: LD_VAR 0 3
32783: PUSH
32784: LD_VAR 0 4
32788: PUSH
32789: LD_VAR 0 5
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: ST_TO_ADDR
// exit ;
32800: GO 33093
// end ; if not chassis in _chassis then
32802: LD_VAR 0 2
32806: PUSH
32807: LD_VAR 0 9
32811: IN
32812: NOT
32813: IFFALSE 32839
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32815: LD_ADDR_VAR 0 2
32819: PUSH
32820: LD_VAR 0 9
32824: PUSH
32825: LD_INT 1
32827: PPUSH
32828: LD_VAR 0 9
32832: PPUSH
32833: CALL_OW 12
32837: ARRAY
32838: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32839: LD_VAR 0 2
32843: PPUSH
32844: LD_VAR 0 3
32848: PPUSH
32849: CALL 33098 0 2
32853: NOT
32854: IFFALSE 32913
// repeat engine := _engine [ 1 ] ;
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_VAR 0 11
32865: PUSH
32866: LD_INT 1
32868: ARRAY
32869: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32870: LD_ADDR_VAR 0 11
32874: PUSH
32875: LD_VAR 0 11
32879: PPUSH
32880: LD_INT 1
32882: PPUSH
32883: CALL_OW 3
32887: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32888: LD_VAR 0 2
32892: PPUSH
32893: LD_VAR 0 3
32897: PPUSH
32898: CALL 33098 0 2
32902: PUSH
32903: LD_VAR 0 11
32907: PUSH
32908: EMPTY
32909: EQUAL
32910: OR
32911: IFFALSE 32856
// if not control in _control then
32913: LD_VAR 0 4
32917: PUSH
32918: LD_VAR 0 12
32922: IN
32923: NOT
32924: IFFALSE 32950
// control := _control [ rand ( 1 , _control ) ] ;
32926: LD_ADDR_VAR 0 4
32930: PUSH
32931: LD_VAR 0 12
32935: PUSH
32936: LD_INT 1
32938: PPUSH
32939: LD_VAR 0 12
32943: PPUSH
32944: CALL_OW 12
32948: ARRAY
32949: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32950: LD_VAR 0 2
32954: PPUSH
32955: LD_VAR 0 5
32959: PPUSH
32960: CALL 33318 0 2
32964: NOT
32965: IFFALSE 33024
// repeat weapon := _weapon [ 1 ] ;
32967: LD_ADDR_VAR 0 5
32971: PUSH
32972: LD_VAR 0 10
32976: PUSH
32977: LD_INT 1
32979: ARRAY
32980: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32981: LD_ADDR_VAR 0 10
32985: PUSH
32986: LD_VAR 0 10
32990: PPUSH
32991: LD_INT 1
32993: PPUSH
32994: CALL_OW 3
32998: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32999: LD_VAR 0 2
33003: PPUSH
33004: LD_VAR 0 5
33008: PPUSH
33009: CALL 33318 0 2
33013: PUSH
33014: LD_VAR 0 10
33018: PUSH
33019: EMPTY
33020: EQUAL
33021: OR
33022: IFFALSE 32967
// result := [ ] ;
33024: LD_ADDR_VAR 0 6
33028: PUSH
33029: EMPTY
33030: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33031: LD_VAR 0 1
33035: PPUSH
33036: LD_VAR 0 2
33040: PPUSH
33041: LD_VAR 0 3
33045: PPUSH
33046: LD_VAR 0 4
33050: PPUSH
33051: LD_VAR 0 5
33055: PPUSH
33056: CALL_OW 448
33060: IFFALSE 33093
// result := [ chassis , engine , control , weapon ] ;
33062: LD_ADDR_VAR 0 6
33066: PUSH
33067: LD_VAR 0 2
33071: PUSH
33072: LD_VAR 0 3
33076: PUSH
33077: LD_VAR 0 4
33081: PUSH
33082: LD_VAR 0 5
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: ST_TO_ADDR
// end ;
33093: LD_VAR 0 6
33097: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33098: LD_INT 0
33100: PPUSH
// if not chassis or not engine then
33101: LD_VAR 0 1
33105: NOT
33106: PUSH
33107: LD_VAR 0 2
33111: NOT
33112: OR
33113: IFFALSE 33117
// exit ;
33115: GO 33313
// case engine of engine_solar :
33117: LD_VAR 0 2
33121: PUSH
33122: LD_INT 2
33124: DOUBLE
33125: EQUAL
33126: IFTRUE 33130
33128: GO 33168
33130: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33131: LD_ADDR_VAR 0 3
33135: PUSH
33136: LD_INT 11
33138: PUSH
33139: LD_INT 12
33141: PUSH
33142: LD_INT 13
33144: PUSH
33145: LD_INT 14
33147: PUSH
33148: LD_INT 1
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: ST_TO_ADDR
33166: GO 33297
33168: LD_INT 1
33170: DOUBLE
33171: EQUAL
33172: IFTRUE 33176
33174: GO 33238
33176: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33177: LD_ADDR_VAR 0 3
33181: PUSH
33182: LD_INT 11
33184: PUSH
33185: LD_INT 12
33187: PUSH
33188: LD_INT 13
33190: PUSH
33191: LD_INT 14
33193: PUSH
33194: LD_INT 1
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: LD_INT 3
33202: PUSH
33203: LD_INT 4
33205: PUSH
33206: LD_INT 5
33208: PUSH
33209: LD_INT 21
33211: PUSH
33212: LD_INT 23
33214: PUSH
33215: LD_INT 22
33217: PUSH
33218: LD_INT 24
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: ST_TO_ADDR
33236: GO 33297
33238: LD_INT 3
33240: DOUBLE
33241: EQUAL
33242: IFTRUE 33246
33244: GO 33296
33246: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33247: LD_ADDR_VAR 0 3
33251: PUSH
33252: LD_INT 13
33254: PUSH
33255: LD_INT 14
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: LD_INT 3
33263: PUSH
33264: LD_INT 4
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: LD_INT 21
33272: PUSH
33273: LD_INT 22
33275: PUSH
33276: LD_INT 23
33278: PUSH
33279: LD_INT 24
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: ST_TO_ADDR
33294: GO 33297
33296: POP
// result := ( chassis in result ) ;
33297: LD_ADDR_VAR 0 3
33301: PUSH
33302: LD_VAR 0 1
33306: PUSH
33307: LD_VAR 0 3
33311: IN
33312: ST_TO_ADDR
// end ;
33313: LD_VAR 0 3
33317: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33318: LD_INT 0
33320: PPUSH
// if not chassis or not weapon then
33321: LD_VAR 0 1
33325: NOT
33326: PUSH
33327: LD_VAR 0 2
33331: NOT
33332: OR
33333: IFFALSE 33337
// exit ;
33335: GO 34399
// case weapon of us_machine_gun :
33337: LD_VAR 0 2
33341: PUSH
33342: LD_INT 2
33344: DOUBLE
33345: EQUAL
33346: IFTRUE 33350
33348: GO 33380
33350: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33351: LD_ADDR_VAR 0 3
33355: PUSH
33356: LD_INT 1
33358: PUSH
33359: LD_INT 2
33361: PUSH
33362: LD_INT 3
33364: PUSH
33365: LD_INT 4
33367: PUSH
33368: LD_INT 5
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: ST_TO_ADDR
33378: GO 34383
33380: LD_INT 3
33382: DOUBLE
33383: EQUAL
33384: IFTRUE 33388
33386: GO 33418
33388: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33389: LD_ADDR_VAR 0 3
33393: PUSH
33394: LD_INT 1
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: LD_INT 3
33402: PUSH
33403: LD_INT 4
33405: PUSH
33406: LD_INT 5
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: ST_TO_ADDR
33416: GO 34383
33418: LD_INT 11
33420: DOUBLE
33421: EQUAL
33422: IFTRUE 33426
33424: GO 33456
33426: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33427: LD_ADDR_VAR 0 3
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 3
33440: PUSH
33441: LD_INT 4
33443: PUSH
33444: LD_INT 5
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: ST_TO_ADDR
33454: GO 34383
33456: LD_INT 4
33458: DOUBLE
33459: EQUAL
33460: IFTRUE 33464
33462: GO 33490
33464: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33465: LD_ADDR_VAR 0 3
33469: PUSH
33470: LD_INT 2
33472: PUSH
33473: LD_INT 3
33475: PUSH
33476: LD_INT 4
33478: PUSH
33479: LD_INT 5
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: ST_TO_ADDR
33488: GO 34383
33490: LD_INT 5
33492: DOUBLE
33493: EQUAL
33494: IFTRUE 33498
33496: GO 33524
33498: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33499: LD_ADDR_VAR 0 3
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: LD_INT 4
33512: PUSH
33513: LD_INT 5
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: ST_TO_ADDR
33522: GO 34383
33524: LD_INT 9
33526: DOUBLE
33527: EQUAL
33528: IFTRUE 33532
33530: GO 33558
33532: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33533: LD_ADDR_VAR 0 3
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 3
33543: PUSH
33544: LD_INT 4
33546: PUSH
33547: LD_INT 5
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
33556: GO 34383
33558: LD_INT 7
33560: DOUBLE
33561: EQUAL
33562: IFTRUE 33566
33564: GO 33592
33566: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33567: LD_ADDR_VAR 0 3
33571: PUSH
33572: LD_INT 2
33574: PUSH
33575: LD_INT 3
33577: PUSH
33578: LD_INT 4
33580: PUSH
33581: LD_INT 5
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
33590: GO 34383
33592: LD_INT 12
33594: DOUBLE
33595: EQUAL
33596: IFTRUE 33600
33598: GO 33626
33600: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33601: LD_ADDR_VAR 0 3
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: LD_INT 3
33611: PUSH
33612: LD_INT 4
33614: PUSH
33615: LD_INT 5
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: ST_TO_ADDR
33624: GO 34383
33626: LD_INT 13
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33634
33632: GO 33660
33634: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33635: LD_ADDR_VAR 0 3
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 3
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: ST_TO_ADDR
33658: GO 34383
33660: LD_INT 14
33662: DOUBLE
33663: EQUAL
33664: IFTRUE 33668
33666: GO 33686
33668: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33669: LD_ADDR_VAR 0 3
33673: PUSH
33674: LD_INT 4
33676: PUSH
33677: LD_INT 5
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: ST_TO_ADDR
33684: GO 34383
33686: LD_INT 6
33688: DOUBLE
33689: EQUAL
33690: IFTRUE 33694
33692: GO 33712
33694: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33695: LD_ADDR_VAR 0 3
33699: PUSH
33700: LD_INT 4
33702: PUSH
33703: LD_INT 5
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: ST_TO_ADDR
33710: GO 34383
33712: LD_INT 10
33714: DOUBLE
33715: EQUAL
33716: IFTRUE 33720
33718: GO 33738
33720: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33721: LD_ADDR_VAR 0 3
33725: PUSH
33726: LD_INT 4
33728: PUSH
33729: LD_INT 5
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: ST_TO_ADDR
33736: GO 34383
33738: LD_INT 22
33740: DOUBLE
33741: EQUAL
33742: IFTRUE 33746
33744: GO 33772
33746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33747: LD_ADDR_VAR 0 3
33751: PUSH
33752: LD_INT 11
33754: PUSH
33755: LD_INT 12
33757: PUSH
33758: LD_INT 13
33760: PUSH
33761: LD_INT 14
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: ST_TO_ADDR
33770: GO 34383
33772: LD_INT 23
33774: DOUBLE
33775: EQUAL
33776: IFTRUE 33780
33778: GO 33806
33780: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33781: LD_ADDR_VAR 0 3
33785: PUSH
33786: LD_INT 11
33788: PUSH
33789: LD_INT 12
33791: PUSH
33792: LD_INT 13
33794: PUSH
33795: LD_INT 14
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: ST_TO_ADDR
33804: GO 34383
33806: LD_INT 24
33808: DOUBLE
33809: EQUAL
33810: IFTRUE 33814
33812: GO 33840
33814: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33815: LD_ADDR_VAR 0 3
33819: PUSH
33820: LD_INT 11
33822: PUSH
33823: LD_INT 12
33825: PUSH
33826: LD_INT 13
33828: PUSH
33829: LD_INT 14
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: ST_TO_ADDR
33838: GO 34383
33840: LD_INT 30
33842: DOUBLE
33843: EQUAL
33844: IFTRUE 33848
33846: GO 33874
33848: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33849: LD_ADDR_VAR 0 3
33853: PUSH
33854: LD_INT 11
33856: PUSH
33857: LD_INT 12
33859: PUSH
33860: LD_INT 13
33862: PUSH
33863: LD_INT 14
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: ST_TO_ADDR
33872: GO 34383
33874: LD_INT 25
33876: DOUBLE
33877: EQUAL
33878: IFTRUE 33882
33880: GO 33900
33882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33883: LD_ADDR_VAR 0 3
33887: PUSH
33888: LD_INT 13
33890: PUSH
33891: LD_INT 14
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: ST_TO_ADDR
33898: GO 34383
33900: LD_INT 27
33902: DOUBLE
33903: EQUAL
33904: IFTRUE 33908
33906: GO 33926
33908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33909: LD_ADDR_VAR 0 3
33913: PUSH
33914: LD_INT 13
33916: PUSH
33917: LD_INT 14
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: ST_TO_ADDR
33924: GO 34383
33926: LD_EXP 37
33930: DOUBLE
33931: EQUAL
33932: IFTRUE 33936
33934: GO 33962
33936: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_INT 11
33944: PUSH
33945: LD_INT 12
33947: PUSH
33948: LD_INT 13
33950: PUSH
33951: LD_INT 14
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: ST_TO_ADDR
33960: GO 34383
33962: LD_INT 28
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 33988
33970: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_INT 13
33978: PUSH
33979: LD_INT 14
33981: PUSH
33982: EMPTY
33983: LIST
33984: LIST
33985: ST_TO_ADDR
33986: GO 34383
33988: LD_INT 29
33990: DOUBLE
33991: EQUAL
33992: IFTRUE 33996
33994: GO 34014
33996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33997: LD_ADDR_VAR 0 3
34001: PUSH
34002: LD_INT 13
34004: PUSH
34005: LD_INT 14
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: ST_TO_ADDR
34012: GO 34383
34014: LD_INT 31
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34022
34020: GO 34040
34022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34023: LD_ADDR_VAR 0 3
34027: PUSH
34028: LD_INT 13
34030: PUSH
34031: LD_INT 14
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: ST_TO_ADDR
34038: GO 34383
34040: LD_INT 26
34042: DOUBLE
34043: EQUAL
34044: IFTRUE 34048
34046: GO 34066
34048: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34049: LD_ADDR_VAR 0 3
34053: PUSH
34054: LD_INT 13
34056: PUSH
34057: LD_INT 14
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: ST_TO_ADDR
34064: GO 34383
34066: LD_INT 42
34068: DOUBLE
34069: EQUAL
34070: IFTRUE 34074
34072: GO 34100
34074: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34075: LD_ADDR_VAR 0 3
34079: PUSH
34080: LD_INT 21
34082: PUSH
34083: LD_INT 22
34085: PUSH
34086: LD_INT 23
34088: PUSH
34089: LD_INT 24
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: ST_TO_ADDR
34098: GO 34383
34100: LD_INT 43
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34108
34106: GO 34134
34108: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34109: LD_ADDR_VAR 0 3
34113: PUSH
34114: LD_INT 21
34116: PUSH
34117: LD_INT 22
34119: PUSH
34120: LD_INT 23
34122: PUSH
34123: LD_INT 24
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: ST_TO_ADDR
34132: GO 34383
34134: LD_INT 44
34136: DOUBLE
34137: EQUAL
34138: IFTRUE 34142
34140: GO 34168
34142: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34143: LD_ADDR_VAR 0 3
34147: PUSH
34148: LD_INT 21
34150: PUSH
34151: LD_INT 22
34153: PUSH
34154: LD_INT 23
34156: PUSH
34157: LD_INT 24
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: ST_TO_ADDR
34166: GO 34383
34168: LD_INT 45
34170: DOUBLE
34171: EQUAL
34172: IFTRUE 34176
34174: GO 34202
34176: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34177: LD_ADDR_VAR 0 3
34181: PUSH
34182: LD_INT 21
34184: PUSH
34185: LD_INT 22
34187: PUSH
34188: LD_INT 23
34190: PUSH
34191: LD_INT 24
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: ST_TO_ADDR
34200: GO 34383
34202: LD_INT 49
34204: DOUBLE
34205: EQUAL
34206: IFTRUE 34210
34208: GO 34236
34210: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34211: LD_ADDR_VAR 0 3
34215: PUSH
34216: LD_INT 21
34218: PUSH
34219: LD_INT 22
34221: PUSH
34222: LD_INT 23
34224: PUSH
34225: LD_INT 24
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: ST_TO_ADDR
34234: GO 34383
34236: LD_INT 51
34238: DOUBLE
34239: EQUAL
34240: IFTRUE 34244
34242: GO 34270
34244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34245: LD_ADDR_VAR 0 3
34249: PUSH
34250: LD_INT 21
34252: PUSH
34253: LD_INT 22
34255: PUSH
34256: LD_INT 23
34258: PUSH
34259: LD_INT 24
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
34268: GO 34383
34270: LD_INT 52
34272: DOUBLE
34273: EQUAL
34274: IFTRUE 34278
34276: GO 34304
34278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34279: LD_ADDR_VAR 0 3
34283: PUSH
34284: LD_INT 21
34286: PUSH
34287: LD_INT 22
34289: PUSH
34290: LD_INT 23
34292: PUSH
34293: LD_INT 24
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: ST_TO_ADDR
34302: GO 34383
34304: LD_INT 53
34306: DOUBLE
34307: EQUAL
34308: IFTRUE 34312
34310: GO 34330
34312: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34313: LD_ADDR_VAR 0 3
34317: PUSH
34318: LD_INT 23
34320: PUSH
34321: LD_INT 24
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: ST_TO_ADDR
34328: GO 34383
34330: LD_INT 46
34332: DOUBLE
34333: EQUAL
34334: IFTRUE 34338
34336: GO 34356
34338: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34339: LD_ADDR_VAR 0 3
34343: PUSH
34344: LD_INT 23
34346: PUSH
34347: LD_INT 24
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: ST_TO_ADDR
34354: GO 34383
34356: LD_INT 47
34358: DOUBLE
34359: EQUAL
34360: IFTRUE 34364
34362: GO 34382
34364: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34365: LD_ADDR_VAR 0 3
34369: PUSH
34370: LD_INT 23
34372: PUSH
34373: LD_INT 24
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: ST_TO_ADDR
34380: GO 34383
34382: POP
// result := ( chassis in result ) ;
34383: LD_ADDR_VAR 0 3
34387: PUSH
34388: LD_VAR 0 1
34392: PUSH
34393: LD_VAR 0 3
34397: IN
34398: ST_TO_ADDR
// end ;
34399: LD_VAR 0 3
34403: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34404: LD_INT 0
34406: PPUSH
34407: PPUSH
34408: PPUSH
34409: PPUSH
34410: PPUSH
34411: PPUSH
34412: PPUSH
// result := array ;
34413: LD_ADDR_VAR 0 5
34417: PUSH
34418: LD_VAR 0 1
34422: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34423: LD_VAR 0 1
34427: NOT
34428: PUSH
34429: LD_VAR 0 2
34433: NOT
34434: OR
34435: PUSH
34436: LD_VAR 0 3
34440: NOT
34441: OR
34442: PUSH
34443: LD_VAR 0 2
34447: PUSH
34448: LD_VAR 0 1
34452: GREATER
34453: OR
34454: PUSH
34455: LD_VAR 0 3
34459: PUSH
34460: LD_VAR 0 1
34464: GREATER
34465: OR
34466: IFFALSE 34470
// exit ;
34468: GO 34766
// if direction then
34470: LD_VAR 0 4
34474: IFFALSE 34538
// begin d := 1 ;
34476: LD_ADDR_VAR 0 9
34480: PUSH
34481: LD_INT 1
34483: ST_TO_ADDR
// if i_from > i_to then
34484: LD_VAR 0 2
34488: PUSH
34489: LD_VAR 0 3
34493: GREATER
34494: IFFALSE 34520
// length := ( array - i_from ) + i_to else
34496: LD_ADDR_VAR 0 11
34500: PUSH
34501: LD_VAR 0 1
34505: PUSH
34506: LD_VAR 0 2
34510: MINUS
34511: PUSH
34512: LD_VAR 0 3
34516: PLUS
34517: ST_TO_ADDR
34518: GO 34536
// length := i_to - i_from ;
34520: LD_ADDR_VAR 0 11
34524: PUSH
34525: LD_VAR 0 3
34529: PUSH
34530: LD_VAR 0 2
34534: MINUS
34535: ST_TO_ADDR
// end else
34536: GO 34599
// begin d := - 1 ;
34538: LD_ADDR_VAR 0 9
34542: PUSH
34543: LD_INT 1
34545: NEG
34546: ST_TO_ADDR
// if i_from > i_to then
34547: LD_VAR 0 2
34551: PUSH
34552: LD_VAR 0 3
34556: GREATER
34557: IFFALSE 34577
// length := i_from - i_to else
34559: LD_ADDR_VAR 0 11
34563: PUSH
34564: LD_VAR 0 2
34568: PUSH
34569: LD_VAR 0 3
34573: MINUS
34574: ST_TO_ADDR
34575: GO 34599
// length := ( array - i_to ) + i_from ;
34577: LD_ADDR_VAR 0 11
34581: PUSH
34582: LD_VAR 0 1
34586: PUSH
34587: LD_VAR 0 3
34591: MINUS
34592: PUSH
34593: LD_VAR 0 2
34597: PLUS
34598: ST_TO_ADDR
// end ; if not length then
34599: LD_VAR 0 11
34603: NOT
34604: IFFALSE 34608
// exit ;
34606: GO 34766
// tmp := array ;
34608: LD_ADDR_VAR 0 10
34612: PUSH
34613: LD_VAR 0 1
34617: ST_TO_ADDR
// for i = 1 to length do
34618: LD_ADDR_VAR 0 6
34622: PUSH
34623: DOUBLE
34624: LD_INT 1
34626: DEC
34627: ST_TO_ADDR
34628: LD_VAR 0 11
34632: PUSH
34633: FOR_TO
34634: IFFALSE 34754
// begin for j = 1 to array do
34636: LD_ADDR_VAR 0 7
34640: PUSH
34641: DOUBLE
34642: LD_INT 1
34644: DEC
34645: ST_TO_ADDR
34646: LD_VAR 0 1
34650: PUSH
34651: FOR_TO
34652: IFFALSE 34740
// begin k := j + d ;
34654: LD_ADDR_VAR 0 8
34658: PUSH
34659: LD_VAR 0 7
34663: PUSH
34664: LD_VAR 0 9
34668: PLUS
34669: ST_TO_ADDR
// if k > array then
34670: LD_VAR 0 8
34674: PUSH
34675: LD_VAR 0 1
34679: GREATER
34680: IFFALSE 34690
// k := 1 ;
34682: LD_ADDR_VAR 0 8
34686: PUSH
34687: LD_INT 1
34689: ST_TO_ADDR
// if not k then
34690: LD_VAR 0 8
34694: NOT
34695: IFFALSE 34707
// k := array ;
34697: LD_ADDR_VAR 0 8
34701: PUSH
34702: LD_VAR 0 1
34706: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34707: LD_ADDR_VAR 0 10
34711: PUSH
34712: LD_VAR 0 10
34716: PPUSH
34717: LD_VAR 0 8
34721: PPUSH
34722: LD_VAR 0 1
34726: PUSH
34727: LD_VAR 0 7
34731: ARRAY
34732: PPUSH
34733: CALL_OW 1
34737: ST_TO_ADDR
// end ;
34738: GO 34651
34740: POP
34741: POP
// array := tmp ;
34742: LD_ADDR_VAR 0 1
34746: PUSH
34747: LD_VAR 0 10
34751: ST_TO_ADDR
// end ;
34752: GO 34633
34754: POP
34755: POP
// result := array ;
34756: LD_ADDR_VAR 0 5
34760: PUSH
34761: LD_VAR 0 1
34765: ST_TO_ADDR
// end ;
34766: LD_VAR 0 5
34770: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34771: LD_INT 0
34773: PPUSH
34774: PPUSH
// result := 0 ;
34775: LD_ADDR_VAR 0 3
34779: PUSH
34780: LD_INT 0
34782: ST_TO_ADDR
// if not array or not value in array then
34783: LD_VAR 0 1
34787: NOT
34788: PUSH
34789: LD_VAR 0 2
34793: PUSH
34794: LD_VAR 0 1
34798: IN
34799: NOT
34800: OR
34801: IFFALSE 34805
// exit ;
34803: GO 34859
// for i = 1 to array do
34805: LD_ADDR_VAR 0 4
34809: PUSH
34810: DOUBLE
34811: LD_INT 1
34813: DEC
34814: ST_TO_ADDR
34815: LD_VAR 0 1
34819: PUSH
34820: FOR_TO
34821: IFFALSE 34857
// if value = array [ i ] then
34823: LD_VAR 0 2
34827: PUSH
34828: LD_VAR 0 1
34832: PUSH
34833: LD_VAR 0 4
34837: ARRAY
34838: EQUAL
34839: IFFALSE 34855
// begin result := i ;
34841: LD_ADDR_VAR 0 3
34845: PUSH
34846: LD_VAR 0 4
34850: ST_TO_ADDR
// exit ;
34851: POP
34852: POP
34853: GO 34859
// end ;
34855: GO 34820
34857: POP
34858: POP
// end ;
34859: LD_VAR 0 3
34863: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34864: LD_INT 0
34866: PPUSH
// vc_chassis := chassis ;
34867: LD_ADDR_OWVAR 37
34871: PUSH
34872: LD_VAR 0 1
34876: ST_TO_ADDR
// vc_engine := engine ;
34877: LD_ADDR_OWVAR 39
34881: PUSH
34882: LD_VAR 0 2
34886: ST_TO_ADDR
// vc_control := control ;
34887: LD_ADDR_OWVAR 38
34891: PUSH
34892: LD_VAR 0 3
34896: ST_TO_ADDR
// vc_weapon := weapon ;
34897: LD_ADDR_OWVAR 40
34901: PUSH
34902: LD_VAR 0 4
34906: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34907: LD_ADDR_OWVAR 41
34911: PUSH
34912: LD_VAR 0 5
34916: ST_TO_ADDR
// end ;
34917: LD_VAR 0 6
34921: RET
// export function WantPlant ( unit ) ; var task ; begin
34922: LD_INT 0
34924: PPUSH
34925: PPUSH
// result := false ;
34926: LD_ADDR_VAR 0 2
34930: PUSH
34931: LD_INT 0
34933: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34934: LD_ADDR_VAR 0 3
34938: PUSH
34939: LD_VAR 0 1
34943: PPUSH
34944: CALL_OW 437
34948: ST_TO_ADDR
// if task then
34949: LD_VAR 0 3
34953: IFFALSE 34981
// if task [ 1 ] [ 1 ] = p then
34955: LD_VAR 0 3
34959: PUSH
34960: LD_INT 1
34962: ARRAY
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: PUSH
34968: LD_STRING p
34970: EQUAL
34971: IFFALSE 34981
// result := true ;
34973: LD_ADDR_VAR 0 2
34977: PUSH
34978: LD_INT 1
34980: ST_TO_ADDR
// end ;
34981: LD_VAR 0 2
34985: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34986: LD_INT 0
34988: PPUSH
34989: PPUSH
34990: PPUSH
34991: PPUSH
// if pos < 1 then
34992: LD_VAR 0 2
34996: PUSH
34997: LD_INT 1
34999: LESS
35000: IFFALSE 35004
// exit ;
35002: GO 35307
// if pos = 1 then
35004: LD_VAR 0 2
35008: PUSH
35009: LD_INT 1
35011: EQUAL
35012: IFFALSE 35045
// result := Replace ( arr , pos [ 1 ] , value ) else
35014: LD_ADDR_VAR 0 4
35018: PUSH
35019: LD_VAR 0 1
35023: PPUSH
35024: LD_VAR 0 2
35028: PUSH
35029: LD_INT 1
35031: ARRAY
35032: PPUSH
35033: LD_VAR 0 3
35037: PPUSH
35038: CALL_OW 1
35042: ST_TO_ADDR
35043: GO 35307
// begin tmp := arr ;
35045: LD_ADDR_VAR 0 6
35049: PUSH
35050: LD_VAR 0 1
35054: ST_TO_ADDR
// s_arr := [ tmp ] ;
35055: LD_ADDR_VAR 0 7
35059: PUSH
35060: LD_VAR 0 6
35064: PUSH
35065: EMPTY
35066: LIST
35067: ST_TO_ADDR
// for i = 1 to pos - 1 do
35068: LD_ADDR_VAR 0 5
35072: PUSH
35073: DOUBLE
35074: LD_INT 1
35076: DEC
35077: ST_TO_ADDR
35078: LD_VAR 0 2
35082: PUSH
35083: LD_INT 1
35085: MINUS
35086: PUSH
35087: FOR_TO
35088: IFFALSE 35133
// begin tmp := tmp [ pos [ i ] ] ;
35090: LD_ADDR_VAR 0 6
35094: PUSH
35095: LD_VAR 0 6
35099: PUSH
35100: LD_VAR 0 2
35104: PUSH
35105: LD_VAR 0 5
35109: ARRAY
35110: ARRAY
35111: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35112: LD_ADDR_VAR 0 7
35116: PUSH
35117: LD_VAR 0 7
35121: PUSH
35122: LD_VAR 0 6
35126: PUSH
35127: EMPTY
35128: LIST
35129: ADD
35130: ST_TO_ADDR
// end ;
35131: GO 35087
35133: POP
35134: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35135: LD_ADDR_VAR 0 6
35139: PUSH
35140: LD_VAR 0 6
35144: PPUSH
35145: LD_VAR 0 2
35149: PUSH
35150: LD_VAR 0 2
35154: ARRAY
35155: PPUSH
35156: LD_VAR 0 3
35160: PPUSH
35161: CALL_OW 1
35165: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35166: LD_ADDR_VAR 0 7
35170: PUSH
35171: LD_VAR 0 7
35175: PPUSH
35176: LD_VAR 0 7
35180: PPUSH
35181: LD_VAR 0 6
35185: PPUSH
35186: CALL_OW 1
35190: ST_TO_ADDR
// for i = s_arr downto 2 do
35191: LD_ADDR_VAR 0 5
35195: PUSH
35196: DOUBLE
35197: LD_VAR 0 7
35201: INC
35202: ST_TO_ADDR
35203: LD_INT 2
35205: PUSH
35206: FOR_DOWNTO
35207: IFFALSE 35291
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35209: LD_ADDR_VAR 0 6
35213: PUSH
35214: LD_VAR 0 7
35218: PUSH
35219: LD_VAR 0 5
35223: PUSH
35224: LD_INT 1
35226: MINUS
35227: ARRAY
35228: PPUSH
35229: LD_VAR 0 2
35233: PUSH
35234: LD_VAR 0 5
35238: PUSH
35239: LD_INT 1
35241: MINUS
35242: ARRAY
35243: PPUSH
35244: LD_VAR 0 7
35248: PUSH
35249: LD_VAR 0 5
35253: ARRAY
35254: PPUSH
35255: CALL_OW 1
35259: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35260: LD_ADDR_VAR 0 7
35264: PUSH
35265: LD_VAR 0 7
35269: PPUSH
35270: LD_VAR 0 5
35274: PUSH
35275: LD_INT 1
35277: MINUS
35278: PPUSH
35279: LD_VAR 0 6
35283: PPUSH
35284: CALL_OW 1
35288: ST_TO_ADDR
// end ;
35289: GO 35206
35291: POP
35292: POP
// result := s_arr [ 1 ] ;
35293: LD_ADDR_VAR 0 4
35297: PUSH
35298: LD_VAR 0 7
35302: PUSH
35303: LD_INT 1
35305: ARRAY
35306: ST_TO_ADDR
// end ; end ;
35307: LD_VAR 0 4
35311: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35312: LD_INT 0
35314: PPUSH
35315: PPUSH
// if not list then
35316: LD_VAR 0 1
35320: NOT
35321: IFFALSE 35325
// exit ;
35323: GO 35416
// i := list [ pos1 ] ;
35325: LD_ADDR_VAR 0 5
35329: PUSH
35330: LD_VAR 0 1
35334: PUSH
35335: LD_VAR 0 2
35339: ARRAY
35340: ST_TO_ADDR
// if not i then
35341: LD_VAR 0 5
35345: NOT
35346: IFFALSE 35350
// exit ;
35348: GO 35416
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35350: LD_ADDR_VAR 0 1
35354: PUSH
35355: LD_VAR 0 1
35359: PPUSH
35360: LD_VAR 0 2
35364: PPUSH
35365: LD_VAR 0 1
35369: PUSH
35370: LD_VAR 0 3
35374: ARRAY
35375: PPUSH
35376: CALL_OW 1
35380: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35381: LD_ADDR_VAR 0 1
35385: PUSH
35386: LD_VAR 0 1
35390: PPUSH
35391: LD_VAR 0 3
35395: PPUSH
35396: LD_VAR 0 5
35400: PPUSH
35401: CALL_OW 1
35405: ST_TO_ADDR
// result := list ;
35406: LD_ADDR_VAR 0 4
35410: PUSH
35411: LD_VAR 0 1
35415: ST_TO_ADDR
// end ;
35416: LD_VAR 0 4
35420: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35421: LD_INT 0
35423: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35424: LD_ADDR_VAR 0 5
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 250
35438: PPUSH
35439: LD_VAR 0 1
35443: PPUSH
35444: CALL_OW 251
35448: PPUSH
35449: LD_VAR 0 2
35453: PPUSH
35454: LD_VAR 0 3
35458: PPUSH
35459: LD_VAR 0 4
35463: PPUSH
35464: CALL 35474 0 5
35468: ST_TO_ADDR
// end ;
35469: LD_VAR 0 5
35473: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35474: LD_INT 0
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
// if not list then
35480: LD_VAR 0 3
35484: NOT
35485: IFFALSE 35489
// exit ;
35487: GO 35877
// result := [ ] ;
35489: LD_ADDR_VAR 0 6
35493: PUSH
35494: EMPTY
35495: ST_TO_ADDR
// for i in list do
35496: LD_ADDR_VAR 0 7
35500: PUSH
35501: LD_VAR 0 3
35505: PUSH
35506: FOR_IN
35507: IFFALSE 35709
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35509: LD_ADDR_VAR 0 9
35513: PUSH
35514: LD_VAR 0 7
35518: PPUSH
35519: LD_VAR 0 1
35523: PPUSH
35524: LD_VAR 0 2
35528: PPUSH
35529: CALL_OW 297
35533: ST_TO_ADDR
// if not result then
35534: LD_VAR 0 6
35538: NOT
35539: IFFALSE 35565
// result := [ [ i , tmp ] ] else
35541: LD_ADDR_VAR 0 6
35545: PUSH
35546: LD_VAR 0 7
35550: PUSH
35551: LD_VAR 0 9
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: EMPTY
35561: LIST
35562: ST_TO_ADDR
35563: GO 35707
// begin if result [ result ] [ 2 ] < tmp then
35565: LD_VAR 0 6
35569: PUSH
35570: LD_VAR 0 6
35574: ARRAY
35575: PUSH
35576: LD_INT 2
35578: ARRAY
35579: PUSH
35580: LD_VAR 0 9
35584: LESS
35585: IFFALSE 35627
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35587: LD_ADDR_VAR 0 6
35591: PUSH
35592: LD_VAR 0 6
35596: PPUSH
35597: LD_VAR 0 6
35601: PUSH
35602: LD_INT 1
35604: PLUS
35605: PPUSH
35606: LD_VAR 0 7
35610: PUSH
35611: LD_VAR 0 9
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PPUSH
35620: CALL_OW 2
35624: ST_TO_ADDR
35625: GO 35707
// for j = 1 to result do
35627: LD_ADDR_VAR 0 8
35631: PUSH
35632: DOUBLE
35633: LD_INT 1
35635: DEC
35636: ST_TO_ADDR
35637: LD_VAR 0 6
35641: PUSH
35642: FOR_TO
35643: IFFALSE 35705
// begin if tmp < result [ j ] [ 2 ] then
35645: LD_VAR 0 9
35649: PUSH
35650: LD_VAR 0 6
35654: PUSH
35655: LD_VAR 0 8
35659: ARRAY
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: LESS
35665: IFFALSE 35703
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35667: LD_ADDR_VAR 0 6
35671: PUSH
35672: LD_VAR 0 6
35676: PPUSH
35677: LD_VAR 0 8
35681: PPUSH
35682: LD_VAR 0 7
35686: PUSH
35687: LD_VAR 0 9
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PPUSH
35696: CALL_OW 2
35700: ST_TO_ADDR
// break ;
35701: GO 35705
// end ; end ;
35703: GO 35642
35705: POP
35706: POP
// end ; end ;
35707: GO 35506
35709: POP
35710: POP
// if result and not asc then
35711: LD_VAR 0 6
35715: PUSH
35716: LD_VAR 0 4
35720: NOT
35721: AND
35722: IFFALSE 35797
// begin tmp := result ;
35724: LD_ADDR_VAR 0 9
35728: PUSH
35729: LD_VAR 0 6
35733: ST_TO_ADDR
// for i = tmp downto 1 do
35734: LD_ADDR_VAR 0 7
35738: PUSH
35739: DOUBLE
35740: LD_VAR 0 9
35744: INC
35745: ST_TO_ADDR
35746: LD_INT 1
35748: PUSH
35749: FOR_DOWNTO
35750: IFFALSE 35795
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35752: LD_ADDR_VAR 0 6
35756: PUSH
35757: LD_VAR 0 6
35761: PPUSH
35762: LD_VAR 0 9
35766: PUSH
35767: LD_VAR 0 7
35771: MINUS
35772: PUSH
35773: LD_INT 1
35775: PLUS
35776: PPUSH
35777: LD_VAR 0 9
35781: PUSH
35782: LD_VAR 0 7
35786: ARRAY
35787: PPUSH
35788: CALL_OW 1
35792: ST_TO_ADDR
35793: GO 35749
35795: POP
35796: POP
// end ; tmp := [ ] ;
35797: LD_ADDR_VAR 0 9
35801: PUSH
35802: EMPTY
35803: ST_TO_ADDR
// if mode then
35804: LD_VAR 0 5
35808: IFFALSE 35877
// begin for i = 1 to result do
35810: LD_ADDR_VAR 0 7
35814: PUSH
35815: DOUBLE
35816: LD_INT 1
35818: DEC
35819: ST_TO_ADDR
35820: LD_VAR 0 6
35824: PUSH
35825: FOR_TO
35826: IFFALSE 35865
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35828: LD_ADDR_VAR 0 9
35832: PUSH
35833: LD_VAR 0 9
35837: PPUSH
35838: LD_VAR 0 7
35842: PPUSH
35843: LD_VAR 0 6
35847: PUSH
35848: LD_VAR 0 7
35852: ARRAY
35853: PUSH
35854: LD_INT 1
35856: ARRAY
35857: PPUSH
35858: CALL_OW 1
35862: ST_TO_ADDR
35863: GO 35825
35865: POP
35866: POP
// result := tmp ;
35867: LD_ADDR_VAR 0 6
35871: PUSH
35872: LD_VAR 0 9
35876: ST_TO_ADDR
// end ; end ;
35877: LD_VAR 0 6
35881: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35882: LD_INT 0
35884: PPUSH
35885: PPUSH
35886: PPUSH
35887: PPUSH
35888: PPUSH
35889: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35890: LD_ADDR_VAR 0 5
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: ST_TO_ADDR
// if not x or not y then
35912: LD_VAR 0 2
35916: NOT
35917: PUSH
35918: LD_VAR 0 3
35922: NOT
35923: OR
35924: IFFALSE 35928
// exit ;
35926: GO 37580
// if not range then
35928: LD_VAR 0 4
35932: NOT
35933: IFFALSE 35943
// range := 10 ;
35935: LD_ADDR_VAR 0 4
35939: PUSH
35940: LD_INT 10
35942: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35943: LD_ADDR_VAR 0 8
35947: PUSH
35948: LD_INT 81
35950: PUSH
35951: LD_VAR 0 1
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 92
35962: PUSH
35963: LD_VAR 0 2
35967: PUSH
35968: LD_VAR 0 3
35972: PUSH
35973: LD_VAR 0 4
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 3
35986: PUSH
35987: LD_INT 21
35989: PUSH
35990: LD_INT 3
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: LIST
36005: PPUSH
36006: CALL_OW 69
36010: ST_TO_ADDR
// if not tmp then
36011: LD_VAR 0 8
36015: NOT
36016: IFFALSE 36020
// exit ;
36018: GO 37580
// for i in tmp do
36020: LD_ADDR_VAR 0 6
36024: PUSH
36025: LD_VAR 0 8
36029: PUSH
36030: FOR_IN
36031: IFFALSE 37555
// begin points := [ 0 , 0 , 0 ] ;
36033: LD_ADDR_VAR 0 9
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// bpoints := 1 ;
36052: LD_ADDR_VAR 0 10
36056: PUSH
36057: LD_INT 1
36059: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36060: LD_VAR 0 6
36064: PPUSH
36065: CALL_OW 247
36069: PUSH
36070: LD_INT 1
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36656
36078: POP
// begin if GetClass ( i ) = 1 then
36079: LD_VAR 0 6
36083: PPUSH
36084: CALL_OW 257
36088: PUSH
36089: LD_INT 1
36091: EQUAL
36092: IFFALSE 36113
// points := [ 10 , 5 , 3 ] ;
36094: LD_ADDR_VAR 0 9
36098: PUSH
36099: LD_INT 10
36101: PUSH
36102: LD_INT 5
36104: PUSH
36105: LD_INT 3
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: LIST
36112: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36113: LD_VAR 0 6
36117: PPUSH
36118: CALL_OW 257
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: LD_INT 4
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: LIST
36136: IN
36137: IFFALSE 36158
// points := [ 3 , 2 , 1 ] ;
36139: LD_ADDR_VAR 0 9
36143: PUSH
36144: LD_INT 3
36146: PUSH
36147: LD_INT 2
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36158: LD_VAR 0 6
36162: PPUSH
36163: CALL_OW 257
36167: PUSH
36168: LD_INT 5
36170: EQUAL
36171: IFFALSE 36192
// points := [ 130 , 5 , 2 ] ;
36173: LD_ADDR_VAR 0 9
36177: PUSH
36178: LD_INT 130
36180: PUSH
36181: LD_INT 5
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: LIST
36191: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36192: LD_VAR 0 6
36196: PPUSH
36197: CALL_OW 257
36201: PUSH
36202: LD_INT 8
36204: EQUAL
36205: IFFALSE 36226
// points := [ 35 , 35 , 30 ] ;
36207: LD_ADDR_VAR 0 9
36211: PUSH
36212: LD_INT 35
36214: PUSH
36215: LD_INT 35
36217: PUSH
36218: LD_INT 30
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: LIST
36225: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36226: LD_VAR 0 6
36230: PPUSH
36231: CALL_OW 257
36235: PUSH
36236: LD_INT 9
36238: EQUAL
36239: IFFALSE 36260
// points := [ 20 , 55 , 40 ] ;
36241: LD_ADDR_VAR 0 9
36245: PUSH
36246: LD_INT 20
36248: PUSH
36249: LD_INT 55
36251: PUSH
36252: LD_INT 40
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36260: LD_VAR 0 6
36264: PPUSH
36265: CALL_OW 257
36269: PUSH
36270: LD_INT 12
36272: PUSH
36273: LD_INT 16
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: IN
36280: IFFALSE 36301
// points := [ 5 , 3 , 2 ] ;
36282: LD_ADDR_VAR 0 9
36286: PUSH
36287: LD_INT 5
36289: PUSH
36290: LD_INT 3
36292: PUSH
36293: LD_INT 2
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: LIST
36300: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36301: LD_VAR 0 6
36305: PPUSH
36306: CALL_OW 257
36310: PUSH
36311: LD_INT 17
36313: EQUAL
36314: IFFALSE 36335
// points := [ 100 , 50 , 75 ] ;
36316: LD_ADDR_VAR 0 9
36320: PUSH
36321: LD_INT 100
36323: PUSH
36324: LD_INT 50
36326: PUSH
36327: LD_INT 75
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36335: LD_VAR 0 6
36339: PPUSH
36340: CALL_OW 257
36344: PUSH
36345: LD_INT 15
36347: EQUAL
36348: IFFALSE 36369
// points := [ 10 , 5 , 3 ] ;
36350: LD_ADDR_VAR 0 9
36354: PUSH
36355: LD_INT 10
36357: PUSH
36358: LD_INT 5
36360: PUSH
36361: LD_INT 3
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: LIST
36368: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36369: LD_VAR 0 6
36373: PPUSH
36374: CALL_OW 257
36378: PUSH
36379: LD_INT 14
36381: EQUAL
36382: IFFALSE 36403
// points := [ 10 , 0 , 0 ] ;
36384: LD_ADDR_VAR 0 9
36388: PUSH
36389: LD_INT 10
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: LIST
36402: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36403: LD_VAR 0 6
36407: PPUSH
36408: CALL_OW 257
36412: PUSH
36413: LD_INT 11
36415: EQUAL
36416: IFFALSE 36437
// points := [ 30 , 10 , 5 ] ;
36418: LD_ADDR_VAR 0 9
36422: PUSH
36423: LD_INT 30
36425: PUSH
36426: LD_INT 10
36428: PUSH
36429: LD_INT 5
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36437: LD_VAR 0 1
36441: PPUSH
36442: LD_INT 5
36444: PPUSH
36445: CALL_OW 321
36449: PUSH
36450: LD_INT 2
36452: EQUAL
36453: IFFALSE 36470
// bpoints := bpoints * 1.8 ;
36455: LD_ADDR_VAR 0 10
36459: PUSH
36460: LD_VAR 0 10
36464: PUSH
36465: LD_REAL  1.80000000000000E+0000
36468: MUL
36469: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36470: LD_VAR 0 6
36474: PPUSH
36475: CALL_OW 257
36479: PUSH
36480: LD_INT 1
36482: PUSH
36483: LD_INT 2
36485: PUSH
36486: LD_INT 3
36488: PUSH
36489: LD_INT 4
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: IN
36498: PUSH
36499: LD_VAR 0 1
36503: PPUSH
36504: LD_INT 51
36506: PPUSH
36507: CALL_OW 321
36511: PUSH
36512: LD_INT 2
36514: EQUAL
36515: AND
36516: IFFALSE 36533
// bpoints := bpoints * 1.2 ;
36518: LD_ADDR_VAR 0 10
36522: PUSH
36523: LD_VAR 0 10
36527: PUSH
36528: LD_REAL  1.20000000000000E+0000
36531: MUL
36532: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36533: LD_VAR 0 6
36537: PPUSH
36538: CALL_OW 257
36542: PUSH
36543: LD_INT 5
36545: PUSH
36546: LD_INT 7
36548: PUSH
36549: LD_INT 9
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: IN
36557: PUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: LD_INT 52
36565: PPUSH
36566: CALL_OW 321
36570: PUSH
36571: LD_INT 2
36573: EQUAL
36574: AND
36575: IFFALSE 36592
// bpoints := bpoints * 1.5 ;
36577: LD_ADDR_VAR 0 10
36581: PUSH
36582: LD_VAR 0 10
36586: PUSH
36587: LD_REAL  1.50000000000000E+0000
36590: MUL
36591: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36592: LD_VAR 0 1
36596: PPUSH
36597: LD_INT 66
36599: PPUSH
36600: CALL_OW 321
36604: PUSH
36605: LD_INT 2
36607: EQUAL
36608: IFFALSE 36625
// bpoints := bpoints * 1.1 ;
36610: LD_ADDR_VAR 0 10
36614: PUSH
36615: LD_VAR 0 10
36619: PUSH
36620: LD_REAL  1.10000000000000E+0000
36623: MUL
36624: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36625: LD_ADDR_VAR 0 10
36629: PUSH
36630: LD_VAR 0 10
36634: PUSH
36635: LD_VAR 0 6
36639: PPUSH
36640: LD_INT 1
36642: PPUSH
36643: CALL_OW 259
36647: PUSH
36648: LD_REAL  1.15000000000000E+0000
36651: MUL
36652: MUL
36653: ST_TO_ADDR
// end ; unit_vehicle :
36654: GO 37484
36656: LD_INT 2
36658: DOUBLE
36659: EQUAL
36660: IFTRUE 36664
36662: GO 37472
36664: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36665: LD_VAR 0 6
36669: PPUSH
36670: CALL_OW 264
36674: PUSH
36675: LD_INT 2
36677: PUSH
36678: LD_INT 42
36680: PUSH
36681: LD_INT 24
36683: PUSH
36684: EMPTY
36685: LIST
36686: LIST
36687: LIST
36688: IN
36689: IFFALSE 36710
// points := [ 25 , 5 , 3 ] ;
36691: LD_ADDR_VAR 0 9
36695: PUSH
36696: LD_INT 25
36698: PUSH
36699: LD_INT 5
36701: PUSH
36702: LD_INT 3
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36710: LD_VAR 0 6
36714: PPUSH
36715: CALL_OW 264
36719: PUSH
36720: LD_INT 4
36722: PUSH
36723: LD_INT 43
36725: PUSH
36726: LD_INT 25
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: LIST
36733: IN
36734: IFFALSE 36755
// points := [ 40 , 15 , 5 ] ;
36736: LD_ADDR_VAR 0 9
36740: PUSH
36741: LD_INT 40
36743: PUSH
36744: LD_INT 15
36746: PUSH
36747: LD_INT 5
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36755: LD_VAR 0 6
36759: PPUSH
36760: CALL_OW 264
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 23
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: IN
36775: IFFALSE 36796
// points := [ 7 , 25 , 8 ] ;
36777: LD_ADDR_VAR 0 9
36781: PUSH
36782: LD_INT 7
36784: PUSH
36785: LD_INT 25
36787: PUSH
36788: LD_INT 8
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36796: LD_VAR 0 6
36800: PPUSH
36801: CALL_OW 264
36805: PUSH
36806: LD_INT 5
36808: PUSH
36809: LD_INT 27
36811: PUSH
36812: LD_INT 44
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: IN
36820: IFFALSE 36841
// points := [ 14 , 50 , 16 ] ;
36822: LD_ADDR_VAR 0 9
36826: PUSH
36827: LD_INT 14
36829: PUSH
36830: LD_INT 50
36832: PUSH
36833: LD_INT 16
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: LIST
36840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36841: LD_VAR 0 6
36845: PPUSH
36846: CALL_OW 264
36850: PUSH
36851: LD_INT 6
36853: PUSH
36854: LD_INT 46
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: IN
36861: IFFALSE 36882
// points := [ 32 , 120 , 70 ] ;
36863: LD_ADDR_VAR 0 9
36867: PUSH
36868: LD_INT 32
36870: PUSH
36871: LD_INT 120
36873: PUSH
36874: LD_INT 70
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: LIST
36881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36882: LD_VAR 0 6
36886: PPUSH
36887: CALL_OW 264
36891: PUSH
36892: LD_INT 7
36894: PUSH
36895: LD_INT 28
36897: PUSH
36898: LD_INT 45
36900: PUSH
36901: LD_EXP 37
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: IN
36912: IFFALSE 36933
// points := [ 35 , 20 , 45 ] ;
36914: LD_ADDR_VAR 0 9
36918: PUSH
36919: LD_INT 35
36921: PUSH
36922: LD_INT 20
36924: PUSH
36925: LD_INT 45
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: LIST
36932: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36933: LD_VAR 0 6
36937: PPUSH
36938: CALL_OW 264
36942: PUSH
36943: LD_INT 47
36945: PUSH
36946: EMPTY
36947: LIST
36948: IN
36949: IFFALSE 36970
// points := [ 67 , 45 , 75 ] ;
36951: LD_ADDR_VAR 0 9
36955: PUSH
36956: LD_INT 67
36958: PUSH
36959: LD_INT 45
36961: PUSH
36962: LD_INT 75
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36970: LD_VAR 0 6
36974: PPUSH
36975: CALL_OW 264
36979: PUSH
36980: LD_INT 26
36982: PUSH
36983: EMPTY
36984: LIST
36985: IN
36986: IFFALSE 37007
// points := [ 120 , 30 , 80 ] ;
36988: LD_ADDR_VAR 0 9
36992: PUSH
36993: LD_INT 120
36995: PUSH
36996: LD_INT 30
36998: PUSH
36999: LD_INT 80
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: LIST
37006: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37007: LD_VAR 0 6
37011: PPUSH
37012: CALL_OW 264
37016: PUSH
37017: LD_INT 22
37019: PUSH
37020: EMPTY
37021: LIST
37022: IN
37023: IFFALSE 37044
// points := [ 40 , 1 , 1 ] ;
37025: LD_ADDR_VAR 0 9
37029: PUSH
37030: LD_INT 40
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: LD_INT 1
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: LIST
37043: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37044: LD_VAR 0 6
37048: PPUSH
37049: CALL_OW 264
37053: PUSH
37054: LD_INT 29
37056: PUSH
37057: EMPTY
37058: LIST
37059: IN
37060: IFFALSE 37081
// points := [ 70 , 200 , 400 ] ;
37062: LD_ADDR_VAR 0 9
37066: PUSH
37067: LD_INT 70
37069: PUSH
37070: LD_INT 200
37072: PUSH
37073: LD_INT 400
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: LIST
37080: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37081: LD_VAR 0 6
37085: PPUSH
37086: CALL_OW 264
37090: PUSH
37091: LD_INT 14
37093: PUSH
37094: LD_INT 53
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: IN
37101: IFFALSE 37122
// points := [ 40 , 10 , 20 ] ;
37103: LD_ADDR_VAR 0 9
37107: PUSH
37108: LD_INT 40
37110: PUSH
37111: LD_INT 10
37113: PUSH
37114: LD_INT 20
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37122: LD_VAR 0 6
37126: PPUSH
37127: CALL_OW 264
37131: PUSH
37132: LD_INT 9
37134: PUSH
37135: EMPTY
37136: LIST
37137: IN
37138: IFFALSE 37159
// points := [ 5 , 70 , 20 ] ;
37140: LD_ADDR_VAR 0 9
37144: PUSH
37145: LD_INT 5
37147: PUSH
37148: LD_INT 70
37150: PUSH
37151: LD_INT 20
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: LIST
37158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37159: LD_VAR 0 6
37163: PPUSH
37164: CALL_OW 264
37168: PUSH
37169: LD_INT 10
37171: PUSH
37172: EMPTY
37173: LIST
37174: IN
37175: IFFALSE 37196
// points := [ 35 , 110 , 70 ] ;
37177: LD_ADDR_VAR 0 9
37181: PUSH
37182: LD_INT 35
37184: PUSH
37185: LD_INT 110
37187: PUSH
37188: LD_INT 70
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37196: LD_VAR 0 6
37200: PPUSH
37201: CALL_OW 265
37205: PUSH
37206: LD_INT 25
37208: EQUAL
37209: IFFALSE 37230
// points := [ 80 , 65 , 100 ] ;
37211: LD_ADDR_VAR 0 9
37215: PUSH
37216: LD_INT 80
37218: PUSH
37219: LD_INT 65
37221: PUSH
37222: LD_INT 100
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37230: LD_VAR 0 6
37234: PPUSH
37235: CALL_OW 263
37239: PUSH
37240: LD_INT 1
37242: EQUAL
37243: IFFALSE 37278
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37245: LD_ADDR_VAR 0 10
37249: PUSH
37250: LD_VAR 0 10
37254: PUSH
37255: LD_VAR 0 6
37259: PPUSH
37260: CALL_OW 311
37264: PPUSH
37265: LD_INT 3
37267: PPUSH
37268: CALL_OW 259
37272: PUSH
37273: LD_INT 4
37275: MUL
37276: MUL
37277: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37278: LD_VAR 0 6
37282: PPUSH
37283: CALL_OW 263
37287: PUSH
37288: LD_INT 2
37290: EQUAL
37291: IFFALSE 37342
// begin j := IsControledBy ( i ) ;
37293: LD_ADDR_VAR 0 7
37297: PUSH
37298: LD_VAR 0 6
37302: PPUSH
37303: CALL_OW 312
37307: ST_TO_ADDR
// if j then
37308: LD_VAR 0 7
37312: IFFALSE 37342
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37314: LD_ADDR_VAR 0 10
37318: PUSH
37319: LD_VAR 0 10
37323: PUSH
37324: LD_VAR 0 7
37328: PPUSH
37329: LD_INT 3
37331: PPUSH
37332: CALL_OW 259
37336: PUSH
37337: LD_INT 3
37339: MUL
37340: MUL
37341: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37342: LD_VAR 0 6
37346: PPUSH
37347: CALL_OW 264
37351: PUSH
37352: LD_INT 5
37354: PUSH
37355: LD_INT 6
37357: PUSH
37358: LD_INT 46
37360: PUSH
37361: LD_INT 44
37363: PUSH
37364: LD_INT 47
37366: PUSH
37367: LD_INT 45
37369: PUSH
37370: LD_INT 28
37372: PUSH
37373: LD_INT 7
37375: PUSH
37376: LD_INT 27
37378: PUSH
37379: LD_INT 29
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: IN
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: LD_INT 52
37402: PPUSH
37403: CALL_OW 321
37407: PUSH
37408: LD_INT 2
37410: EQUAL
37411: AND
37412: IFFALSE 37429
// bpoints := bpoints * 1.2 ;
37414: LD_ADDR_VAR 0 10
37418: PUSH
37419: LD_VAR 0 10
37423: PUSH
37424: LD_REAL  1.20000000000000E+0000
37427: MUL
37428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37429: LD_VAR 0 6
37433: PPUSH
37434: CALL_OW 264
37438: PUSH
37439: LD_INT 6
37441: PUSH
37442: LD_INT 46
37444: PUSH
37445: LD_INT 47
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: LIST
37452: IN
37453: IFFALSE 37470
// bpoints := bpoints * 1.2 ;
37455: LD_ADDR_VAR 0 10
37459: PUSH
37460: LD_VAR 0 10
37464: PUSH
37465: LD_REAL  1.20000000000000E+0000
37468: MUL
37469: ST_TO_ADDR
// end ; unit_building :
37470: GO 37484
37472: LD_INT 3
37474: DOUBLE
37475: EQUAL
37476: IFTRUE 37480
37478: GO 37483
37480: POP
// ; end ;
37481: GO 37484
37483: POP
// for j = 1 to 3 do
37484: LD_ADDR_VAR 0 7
37488: PUSH
37489: DOUBLE
37490: LD_INT 1
37492: DEC
37493: ST_TO_ADDR
37494: LD_INT 3
37496: PUSH
37497: FOR_TO
37498: IFFALSE 37551
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37500: LD_ADDR_VAR 0 5
37504: PUSH
37505: LD_VAR 0 5
37509: PPUSH
37510: LD_VAR 0 7
37514: PPUSH
37515: LD_VAR 0 5
37519: PUSH
37520: LD_VAR 0 7
37524: ARRAY
37525: PUSH
37526: LD_VAR 0 9
37530: PUSH
37531: LD_VAR 0 7
37535: ARRAY
37536: PUSH
37537: LD_VAR 0 10
37541: MUL
37542: PLUS
37543: PPUSH
37544: CALL_OW 1
37548: ST_TO_ADDR
37549: GO 37497
37551: POP
37552: POP
// end ;
37553: GO 36030
37555: POP
37556: POP
// result := Replace ( result , 4 , tmp ) ;
37557: LD_ADDR_VAR 0 5
37561: PUSH
37562: LD_VAR 0 5
37566: PPUSH
37567: LD_INT 4
37569: PPUSH
37570: LD_VAR 0 8
37574: PPUSH
37575: CALL_OW 1
37579: ST_TO_ADDR
// end ;
37580: LD_VAR 0 5
37584: RET
// export function DangerAtRange ( unit , range ) ; begin
37585: LD_INT 0
37587: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37588: LD_ADDR_VAR 0 3
37592: PUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 255
37602: PPUSH
37603: LD_VAR 0 1
37607: PPUSH
37608: CALL_OW 250
37612: PPUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: CALL_OW 251
37622: PPUSH
37623: LD_VAR 0 2
37627: PPUSH
37628: CALL 35882 0 4
37632: ST_TO_ADDR
// end ;
37633: LD_VAR 0 3
37637: RET
// export function DangerInArea ( side , area ) ; begin
37638: LD_INT 0
37640: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37641: LD_ADDR_VAR 0 3
37645: PUSH
37646: LD_VAR 0 2
37650: PPUSH
37651: LD_INT 81
37653: PUSH
37654: LD_VAR 0 1
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PPUSH
37663: CALL_OW 70
37667: ST_TO_ADDR
// end ;
37668: LD_VAR 0 3
37672: RET
// export function IsExtension ( b ) ; begin
37673: LD_INT 0
37675: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37676: LD_ADDR_VAR 0 2
37680: PUSH
37681: LD_VAR 0 1
37685: PUSH
37686: LD_INT 23
37688: PUSH
37689: LD_INT 20
37691: PUSH
37692: LD_INT 22
37694: PUSH
37695: LD_INT 17
37697: PUSH
37698: LD_INT 24
37700: PUSH
37701: LD_INT 21
37703: PUSH
37704: LD_INT 19
37706: PUSH
37707: LD_INT 16
37709: PUSH
37710: LD_INT 25
37712: PUSH
37713: LD_INT 18
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: IN
37728: ST_TO_ADDR
// end ;
37729: LD_VAR 0 2
37733: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37734: LD_INT 0
37736: PPUSH
37737: PPUSH
37738: PPUSH
// result := [ ] ;
37739: LD_ADDR_VAR 0 4
37743: PUSH
37744: EMPTY
37745: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37746: LD_ADDR_VAR 0 5
37750: PUSH
37751: LD_VAR 0 2
37755: PPUSH
37756: LD_INT 21
37758: PUSH
37759: LD_INT 3
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PPUSH
37766: CALL_OW 70
37770: ST_TO_ADDR
// if not tmp then
37771: LD_VAR 0 5
37775: NOT
37776: IFFALSE 37780
// exit ;
37778: GO 37844
// if checkLink then
37780: LD_VAR 0 3
37784: IFFALSE 37834
// begin for i in tmp do
37786: LD_ADDR_VAR 0 6
37790: PUSH
37791: LD_VAR 0 5
37795: PUSH
37796: FOR_IN
37797: IFFALSE 37832
// if GetBase ( i ) <> base then
37799: LD_VAR 0 6
37803: PPUSH
37804: CALL_OW 274
37808: PUSH
37809: LD_VAR 0 1
37813: NONEQUAL
37814: IFFALSE 37830
// ComLinkToBase ( base , i ) ;
37816: LD_VAR 0 1
37820: PPUSH
37821: LD_VAR 0 6
37825: PPUSH
37826: CALL_OW 169
37830: GO 37796
37832: POP
37833: POP
// end ; result := tmp ;
37834: LD_ADDR_VAR 0 4
37838: PUSH
37839: LD_VAR 0 5
37843: ST_TO_ADDR
// end ;
37844: LD_VAR 0 4
37848: RET
// export function ComComplete ( units , b ) ; var i ; begin
37849: LD_INT 0
37851: PPUSH
37852: PPUSH
// if not units then
37853: LD_VAR 0 1
37857: NOT
37858: IFFALSE 37862
// exit ;
37860: GO 37952
// for i in units do
37862: LD_ADDR_VAR 0 4
37866: PUSH
37867: LD_VAR 0 1
37871: PUSH
37872: FOR_IN
37873: IFFALSE 37950
// if BuildingStatus ( b ) = bs_build then
37875: LD_VAR 0 2
37879: PPUSH
37880: CALL_OW 461
37884: PUSH
37885: LD_INT 1
37887: EQUAL
37888: IFFALSE 37948
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37890: LD_VAR 0 4
37894: PPUSH
37895: LD_STRING h
37897: PUSH
37898: LD_VAR 0 2
37902: PPUSH
37903: CALL_OW 250
37907: PUSH
37908: LD_VAR 0 2
37912: PPUSH
37913: CALL_OW 251
37917: PUSH
37918: LD_VAR 0 2
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 0
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: PUSH
37941: EMPTY
37942: LIST
37943: PPUSH
37944: CALL_OW 446
37948: GO 37872
37950: POP
37951: POP
// end ;
37952: LD_VAR 0 3
37956: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37957: LD_INT 0
37959: PPUSH
37960: PPUSH
37961: PPUSH
37962: PPUSH
37963: PPUSH
37964: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37965: LD_VAR 0 1
37969: NOT
37970: PUSH
37971: LD_VAR 0 1
37975: PPUSH
37976: CALL_OW 263
37980: PUSH
37981: LD_INT 2
37983: NONEQUAL
37984: OR
37985: IFFALSE 37989
// exit ;
37987: GO 38305
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37989: LD_ADDR_VAR 0 6
37993: PUSH
37994: LD_INT 22
37996: PUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: CALL_OW 255
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 2
38013: PUSH
38014: LD_INT 30
38016: PUSH
38017: LD_INT 36
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 34
38026: PUSH
38027: LD_INT 31
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: EMPTY
38035: LIST
38036: LIST
38037: LIST
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PPUSH
38043: CALL_OW 69
38047: ST_TO_ADDR
// if not tmp then
38048: LD_VAR 0 6
38052: NOT
38053: IFFALSE 38057
// exit ;
38055: GO 38305
// result := [ ] ;
38057: LD_ADDR_VAR 0 2
38061: PUSH
38062: EMPTY
38063: ST_TO_ADDR
// for i in tmp do
38064: LD_ADDR_VAR 0 3
38068: PUSH
38069: LD_VAR 0 6
38073: PUSH
38074: FOR_IN
38075: IFFALSE 38146
// begin t := UnitsInside ( i ) ;
38077: LD_ADDR_VAR 0 4
38081: PUSH
38082: LD_VAR 0 3
38086: PPUSH
38087: CALL_OW 313
38091: ST_TO_ADDR
// if t then
38092: LD_VAR 0 4
38096: IFFALSE 38144
// for j in t do
38098: LD_ADDR_VAR 0 7
38102: PUSH
38103: LD_VAR 0 4
38107: PUSH
38108: FOR_IN
38109: IFFALSE 38142
// result := Replace ( result , result + 1 , j ) ;
38111: LD_ADDR_VAR 0 2
38115: PUSH
38116: LD_VAR 0 2
38120: PPUSH
38121: LD_VAR 0 2
38125: PUSH
38126: LD_INT 1
38128: PLUS
38129: PPUSH
38130: LD_VAR 0 7
38134: PPUSH
38135: CALL_OW 1
38139: ST_TO_ADDR
38140: GO 38108
38142: POP
38143: POP
// end ;
38144: GO 38074
38146: POP
38147: POP
// if not result then
38148: LD_VAR 0 2
38152: NOT
38153: IFFALSE 38157
// exit ;
38155: GO 38305
// mech := result [ 1 ] ;
38157: LD_ADDR_VAR 0 5
38161: PUSH
38162: LD_VAR 0 2
38166: PUSH
38167: LD_INT 1
38169: ARRAY
38170: ST_TO_ADDR
// if result > 1 then
38171: LD_VAR 0 2
38175: PUSH
38176: LD_INT 1
38178: GREATER
38179: IFFALSE 38291
// begin for i = 2 to result do
38181: LD_ADDR_VAR 0 3
38185: PUSH
38186: DOUBLE
38187: LD_INT 2
38189: DEC
38190: ST_TO_ADDR
38191: LD_VAR 0 2
38195: PUSH
38196: FOR_TO
38197: IFFALSE 38289
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38199: LD_ADDR_VAR 0 4
38203: PUSH
38204: LD_VAR 0 2
38208: PUSH
38209: LD_VAR 0 3
38213: ARRAY
38214: PPUSH
38215: LD_INT 3
38217: PPUSH
38218: CALL_OW 259
38222: PUSH
38223: LD_VAR 0 2
38227: PUSH
38228: LD_VAR 0 3
38232: ARRAY
38233: PPUSH
38234: CALL_OW 432
38238: MINUS
38239: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38240: LD_VAR 0 4
38244: PUSH
38245: LD_VAR 0 5
38249: PPUSH
38250: LD_INT 3
38252: PPUSH
38253: CALL_OW 259
38257: PUSH
38258: LD_VAR 0 5
38262: PPUSH
38263: CALL_OW 432
38267: MINUS
38268: GREATEREQUAL
38269: IFFALSE 38287
// mech := result [ i ] ;
38271: LD_ADDR_VAR 0 5
38275: PUSH
38276: LD_VAR 0 2
38280: PUSH
38281: LD_VAR 0 3
38285: ARRAY
38286: ST_TO_ADDR
// end ;
38287: GO 38196
38289: POP
38290: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38291: LD_VAR 0 1
38295: PPUSH
38296: LD_VAR 0 5
38300: PPUSH
38301: CALL_OW 135
// end ;
38305: LD_VAR 0 2
38309: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38310: LD_INT 0
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
// result := [ ] ;
38325: LD_ADDR_VAR 0 7
38329: PUSH
38330: EMPTY
38331: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 266
38341: PUSH
38342: LD_INT 0
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: IN
38352: NOT
38353: IFFALSE 38357
// exit ;
38355: GO 39991
// if name then
38357: LD_VAR 0 3
38361: IFFALSE 38377
// SetBName ( base_dep , name ) ;
38363: LD_VAR 0 1
38367: PPUSH
38368: LD_VAR 0 3
38372: PPUSH
38373: CALL_OW 500
// base := GetBase ( base_dep ) ;
38377: LD_ADDR_VAR 0 15
38381: PUSH
38382: LD_VAR 0 1
38386: PPUSH
38387: CALL_OW 274
38391: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38392: LD_ADDR_VAR 0 16
38396: PUSH
38397: LD_VAR 0 1
38401: PPUSH
38402: CALL_OW 255
38406: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38407: LD_ADDR_VAR 0 17
38411: PUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 248
38421: ST_TO_ADDR
// if sources then
38422: LD_VAR 0 5
38426: IFFALSE 38473
// for i = 1 to 3 do
38428: LD_ADDR_VAR 0 8
38432: PUSH
38433: DOUBLE
38434: LD_INT 1
38436: DEC
38437: ST_TO_ADDR
38438: LD_INT 3
38440: PUSH
38441: FOR_TO
38442: IFFALSE 38471
// AddResourceType ( base , i , sources [ i ] ) ;
38444: LD_VAR 0 15
38448: PPUSH
38449: LD_VAR 0 8
38453: PPUSH
38454: LD_VAR 0 5
38458: PUSH
38459: LD_VAR 0 8
38463: ARRAY
38464: PPUSH
38465: CALL_OW 276
38469: GO 38441
38471: POP
38472: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38473: LD_ADDR_VAR 0 18
38477: PUSH
38478: LD_VAR 0 15
38482: PPUSH
38483: LD_VAR 0 2
38487: PPUSH
38488: LD_INT 1
38490: PPUSH
38491: CALL 37734 0 3
38495: ST_TO_ADDR
// InitHc ;
38496: CALL_OW 19
// InitUc ;
38500: CALL_OW 18
// uc_side := side ;
38504: LD_ADDR_OWVAR 20
38508: PUSH
38509: LD_VAR 0 16
38513: ST_TO_ADDR
// uc_nation := nation ;
38514: LD_ADDR_OWVAR 21
38518: PUSH
38519: LD_VAR 0 17
38523: ST_TO_ADDR
// if buildings then
38524: LD_VAR 0 18
38528: IFFALSE 39850
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38530: LD_ADDR_VAR 0 19
38534: PUSH
38535: LD_VAR 0 18
38539: PPUSH
38540: LD_INT 2
38542: PUSH
38543: LD_INT 30
38545: PUSH
38546: LD_INT 29
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 30
38555: PUSH
38556: LD_INT 30
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: PPUSH
38568: CALL_OW 72
38572: ST_TO_ADDR
// if tmp then
38573: LD_VAR 0 19
38577: IFFALSE 38625
// for i in tmp do
38579: LD_ADDR_VAR 0 8
38583: PUSH
38584: LD_VAR 0 19
38588: PUSH
38589: FOR_IN
38590: IFFALSE 38623
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38592: LD_VAR 0 8
38596: PPUSH
38597: CALL_OW 250
38601: PPUSH
38602: LD_VAR 0 8
38606: PPUSH
38607: CALL_OW 251
38611: PPUSH
38612: LD_VAR 0 16
38616: PPUSH
38617: CALL_OW 441
38621: GO 38589
38623: POP
38624: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38625: LD_VAR 0 18
38629: PPUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 30
38635: PUSH
38636: LD_INT 32
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 30
38645: PUSH
38646: LD_INT 33
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: PPUSH
38658: CALL_OW 72
38662: IFFALSE 38750
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38664: LD_ADDR_VAR 0 8
38668: PUSH
38669: LD_VAR 0 18
38673: PPUSH
38674: LD_INT 2
38676: PUSH
38677: LD_INT 30
38679: PUSH
38680: LD_INT 32
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 30
38689: PUSH
38690: LD_INT 33
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: LIST
38701: PPUSH
38702: CALL_OW 72
38706: PUSH
38707: FOR_IN
38708: IFFALSE 38748
// begin if not GetBWeapon ( i ) then
38710: LD_VAR 0 8
38714: PPUSH
38715: CALL_OW 269
38719: NOT
38720: IFFALSE 38746
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38722: LD_VAR 0 8
38726: PPUSH
38727: LD_VAR 0 8
38731: PPUSH
38732: LD_VAR 0 2
38736: PPUSH
38737: CALL 39996 0 2
38741: PPUSH
38742: CALL_OW 431
// end ;
38746: GO 38707
38748: POP
38749: POP
// end ; for i = 1 to personel do
38750: LD_ADDR_VAR 0 8
38754: PUSH
38755: DOUBLE
38756: LD_INT 1
38758: DEC
38759: ST_TO_ADDR
38760: LD_VAR 0 6
38764: PUSH
38765: FOR_TO
38766: IFFALSE 39830
// begin if i > 4 then
38768: LD_VAR 0 8
38772: PUSH
38773: LD_INT 4
38775: GREATER
38776: IFFALSE 38780
// break ;
38778: GO 39830
// case i of 1 :
38780: LD_VAR 0 8
38784: PUSH
38785: LD_INT 1
38787: DOUBLE
38788: EQUAL
38789: IFTRUE 38793
38791: GO 38873
38793: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38794: LD_ADDR_VAR 0 12
38798: PUSH
38799: LD_VAR 0 18
38803: PPUSH
38804: LD_INT 22
38806: PUSH
38807: LD_VAR 0 16
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 58
38818: PUSH
38819: EMPTY
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: PUSH
38825: LD_INT 30
38827: PUSH
38828: LD_INT 32
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 30
38837: PUSH
38838: LD_INT 4
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 30
38847: PUSH
38848: LD_INT 5
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: PPUSH
38866: CALL_OW 72
38870: ST_TO_ADDR
38871: GO 39095
38873: LD_INT 2
38875: DOUBLE
38876: EQUAL
38877: IFTRUE 38881
38879: GO 38943
38881: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38882: LD_ADDR_VAR 0 12
38886: PUSH
38887: LD_VAR 0 18
38891: PPUSH
38892: LD_INT 22
38894: PUSH
38895: LD_VAR 0 16
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 30
38909: PUSH
38910: LD_INT 0
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 30
38919: PUSH
38920: LD_INT 1
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PPUSH
38936: CALL_OW 72
38940: ST_TO_ADDR
38941: GO 39095
38943: LD_INT 3
38945: DOUBLE
38946: EQUAL
38947: IFTRUE 38951
38949: GO 39013
38951: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38952: LD_ADDR_VAR 0 12
38956: PUSH
38957: LD_VAR 0 18
38961: PPUSH
38962: LD_INT 22
38964: PUSH
38965: LD_VAR 0 16
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 2
38976: PUSH
38977: LD_INT 30
38979: PUSH
38980: LD_INT 2
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 30
38989: PUSH
38990: LD_INT 3
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PPUSH
39006: CALL_OW 72
39010: ST_TO_ADDR
39011: GO 39095
39013: LD_INT 4
39015: DOUBLE
39016: EQUAL
39017: IFTRUE 39021
39019: GO 39094
39021: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39022: LD_ADDR_VAR 0 12
39026: PUSH
39027: LD_VAR 0 18
39031: PPUSH
39032: LD_INT 22
39034: PUSH
39035: LD_VAR 0 16
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 2
39046: PUSH
39047: LD_INT 30
39049: PUSH
39050: LD_INT 6
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 30
39059: PUSH
39060: LD_INT 7
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 30
39069: PUSH
39070: LD_INT 8
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PPUSH
39087: CALL_OW 72
39091: ST_TO_ADDR
39092: GO 39095
39094: POP
// if i = 1 then
39095: LD_VAR 0 8
39099: PUSH
39100: LD_INT 1
39102: EQUAL
39103: IFFALSE 39214
// begin tmp := [ ] ;
39105: LD_ADDR_VAR 0 19
39109: PUSH
39110: EMPTY
39111: ST_TO_ADDR
// for j in f do
39112: LD_ADDR_VAR 0 9
39116: PUSH
39117: LD_VAR 0 12
39121: PUSH
39122: FOR_IN
39123: IFFALSE 39196
// if GetBType ( j ) = b_bunker then
39125: LD_VAR 0 9
39129: PPUSH
39130: CALL_OW 266
39134: PUSH
39135: LD_INT 32
39137: EQUAL
39138: IFFALSE 39165
// tmp := Insert ( tmp , 1 , j ) else
39140: LD_ADDR_VAR 0 19
39144: PUSH
39145: LD_VAR 0 19
39149: PPUSH
39150: LD_INT 1
39152: PPUSH
39153: LD_VAR 0 9
39157: PPUSH
39158: CALL_OW 2
39162: ST_TO_ADDR
39163: GO 39194
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39165: LD_ADDR_VAR 0 19
39169: PUSH
39170: LD_VAR 0 19
39174: PPUSH
39175: LD_VAR 0 19
39179: PUSH
39180: LD_INT 1
39182: PLUS
39183: PPUSH
39184: LD_VAR 0 9
39188: PPUSH
39189: CALL_OW 2
39193: ST_TO_ADDR
39194: GO 39122
39196: POP
39197: POP
// if tmp then
39198: LD_VAR 0 19
39202: IFFALSE 39214
// f := tmp ;
39204: LD_ADDR_VAR 0 12
39208: PUSH
39209: LD_VAR 0 19
39213: ST_TO_ADDR
// end ; x := personel [ i ] ;
39214: LD_ADDR_VAR 0 13
39218: PUSH
39219: LD_VAR 0 6
39223: PUSH
39224: LD_VAR 0 8
39228: ARRAY
39229: ST_TO_ADDR
// if x = - 1 then
39230: LD_VAR 0 13
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: EQUAL
39239: IFFALSE 39448
// begin for j in f do
39241: LD_ADDR_VAR 0 9
39245: PUSH
39246: LD_VAR 0 12
39250: PUSH
39251: FOR_IN
39252: IFFALSE 39444
// repeat InitHc ;
39254: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39258: LD_VAR 0 9
39262: PPUSH
39263: CALL_OW 266
39267: PUSH
39268: LD_INT 5
39270: EQUAL
39271: IFFALSE 39341
// begin if UnitsInside ( j ) < 3 then
39273: LD_VAR 0 9
39277: PPUSH
39278: CALL_OW 313
39282: PUSH
39283: LD_INT 3
39285: LESS
39286: IFFALSE 39322
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39288: LD_INT 0
39290: PPUSH
39291: LD_INT 5
39293: PUSH
39294: LD_INT 8
39296: PUSH
39297: LD_INT 9
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: LIST
39304: PUSH
39305: LD_VAR 0 17
39309: ARRAY
39310: PPUSH
39311: LD_VAR 0 4
39315: PPUSH
39316: CALL_OW 380
39320: GO 39339
// PrepareHuman ( false , i , skill ) ;
39322: LD_INT 0
39324: PPUSH
39325: LD_VAR 0 8
39329: PPUSH
39330: LD_VAR 0 4
39334: PPUSH
39335: CALL_OW 380
// end else
39339: GO 39358
// PrepareHuman ( false , i , skill ) ;
39341: LD_INT 0
39343: PPUSH
39344: LD_VAR 0 8
39348: PPUSH
39349: LD_VAR 0 4
39353: PPUSH
39354: CALL_OW 380
// un := CreateHuman ;
39358: LD_ADDR_VAR 0 14
39362: PUSH
39363: CALL_OW 44
39367: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39368: LD_ADDR_VAR 0 7
39372: PUSH
39373: LD_VAR 0 7
39377: PPUSH
39378: LD_INT 1
39380: PPUSH
39381: LD_VAR 0 14
39385: PPUSH
39386: CALL_OW 2
39390: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39391: LD_VAR 0 14
39395: PPUSH
39396: LD_VAR 0 9
39400: PPUSH
39401: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39405: LD_VAR 0 9
39409: PPUSH
39410: CALL_OW 313
39414: PUSH
39415: LD_INT 6
39417: EQUAL
39418: PUSH
39419: LD_VAR 0 9
39423: PPUSH
39424: CALL_OW 266
39428: PUSH
39429: LD_INT 32
39431: PUSH
39432: LD_INT 31
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: IN
39439: OR
39440: IFFALSE 39254
39442: GO 39251
39444: POP
39445: POP
// end else
39446: GO 39828
// for j = 1 to x do
39448: LD_ADDR_VAR 0 9
39452: PUSH
39453: DOUBLE
39454: LD_INT 1
39456: DEC
39457: ST_TO_ADDR
39458: LD_VAR 0 13
39462: PUSH
39463: FOR_TO
39464: IFFALSE 39826
// begin InitHc ;
39466: CALL_OW 19
// if not f then
39470: LD_VAR 0 12
39474: NOT
39475: IFFALSE 39564
// begin PrepareHuman ( false , i , skill ) ;
39477: LD_INT 0
39479: PPUSH
39480: LD_VAR 0 8
39484: PPUSH
39485: LD_VAR 0 4
39489: PPUSH
39490: CALL_OW 380
// un := CreateHuman ;
39494: LD_ADDR_VAR 0 14
39498: PUSH
39499: CALL_OW 44
39503: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39504: LD_ADDR_VAR 0 7
39508: PUSH
39509: LD_VAR 0 7
39513: PPUSH
39514: LD_INT 1
39516: PPUSH
39517: LD_VAR 0 14
39521: PPUSH
39522: CALL_OW 2
39526: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39527: LD_VAR 0 14
39531: PPUSH
39532: LD_VAR 0 1
39536: PPUSH
39537: CALL_OW 250
39541: PPUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 251
39551: PPUSH
39552: LD_INT 10
39554: PPUSH
39555: LD_INT 0
39557: PPUSH
39558: CALL_OW 50
// continue ;
39562: GO 39463
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39564: LD_VAR 0 12
39568: PUSH
39569: LD_INT 1
39571: ARRAY
39572: PPUSH
39573: CALL_OW 313
39577: PUSH
39578: LD_VAR 0 12
39582: PUSH
39583: LD_INT 1
39585: ARRAY
39586: PPUSH
39587: CALL_OW 266
39591: PUSH
39592: LD_INT 32
39594: PUSH
39595: LD_INT 31
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: IN
39602: AND
39603: PUSH
39604: LD_VAR 0 12
39608: PUSH
39609: LD_INT 1
39611: ARRAY
39612: PPUSH
39613: CALL_OW 313
39617: PUSH
39618: LD_INT 6
39620: EQUAL
39621: OR
39622: IFFALSE 39642
// f := Delete ( f , 1 ) ;
39624: LD_ADDR_VAR 0 12
39628: PUSH
39629: LD_VAR 0 12
39633: PPUSH
39634: LD_INT 1
39636: PPUSH
39637: CALL_OW 3
39641: ST_TO_ADDR
// if not f then
39642: LD_VAR 0 12
39646: NOT
39647: IFFALSE 39665
// begin x := x + 2 ;
39649: LD_ADDR_VAR 0 13
39653: PUSH
39654: LD_VAR 0 13
39658: PUSH
39659: LD_INT 2
39661: PLUS
39662: ST_TO_ADDR
// continue ;
39663: GO 39463
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39665: LD_VAR 0 12
39669: PUSH
39670: LD_INT 1
39672: ARRAY
39673: PPUSH
39674: CALL_OW 266
39678: PUSH
39679: LD_INT 5
39681: EQUAL
39682: IFFALSE 39756
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39684: LD_VAR 0 12
39688: PUSH
39689: LD_INT 1
39691: ARRAY
39692: PPUSH
39693: CALL_OW 313
39697: PUSH
39698: LD_INT 3
39700: LESS
39701: IFFALSE 39737
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39703: LD_INT 0
39705: PPUSH
39706: LD_INT 5
39708: PUSH
39709: LD_INT 8
39711: PUSH
39712: LD_INT 9
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: PUSH
39720: LD_VAR 0 17
39724: ARRAY
39725: PPUSH
39726: LD_VAR 0 4
39730: PPUSH
39731: CALL_OW 380
39735: GO 39754
// PrepareHuman ( false , i , skill ) ;
39737: LD_INT 0
39739: PPUSH
39740: LD_VAR 0 8
39744: PPUSH
39745: LD_VAR 0 4
39749: PPUSH
39750: CALL_OW 380
// end else
39754: GO 39773
// PrepareHuman ( false , i , skill ) ;
39756: LD_INT 0
39758: PPUSH
39759: LD_VAR 0 8
39763: PPUSH
39764: LD_VAR 0 4
39768: PPUSH
39769: CALL_OW 380
// un := CreateHuman ;
39773: LD_ADDR_VAR 0 14
39777: PUSH
39778: CALL_OW 44
39782: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39783: LD_ADDR_VAR 0 7
39787: PUSH
39788: LD_VAR 0 7
39792: PPUSH
39793: LD_INT 1
39795: PPUSH
39796: LD_VAR 0 14
39800: PPUSH
39801: CALL_OW 2
39805: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39806: LD_VAR 0 14
39810: PPUSH
39811: LD_VAR 0 12
39815: PUSH
39816: LD_INT 1
39818: ARRAY
39819: PPUSH
39820: CALL_OW 52
// end ;
39824: GO 39463
39826: POP
39827: POP
// end ;
39828: GO 38765
39830: POP
39831: POP
// result := result ^ buildings ;
39832: LD_ADDR_VAR 0 7
39836: PUSH
39837: LD_VAR 0 7
39841: PUSH
39842: LD_VAR 0 18
39846: ADD
39847: ST_TO_ADDR
// end else
39848: GO 39991
// begin for i = 1 to personel do
39850: LD_ADDR_VAR 0 8
39854: PUSH
39855: DOUBLE
39856: LD_INT 1
39858: DEC
39859: ST_TO_ADDR
39860: LD_VAR 0 6
39864: PUSH
39865: FOR_TO
39866: IFFALSE 39989
// begin if i > 4 then
39868: LD_VAR 0 8
39872: PUSH
39873: LD_INT 4
39875: GREATER
39876: IFFALSE 39880
// break ;
39878: GO 39989
// x := personel [ i ] ;
39880: LD_ADDR_VAR 0 13
39884: PUSH
39885: LD_VAR 0 6
39889: PUSH
39890: LD_VAR 0 8
39894: ARRAY
39895: ST_TO_ADDR
// if x = - 1 then
39896: LD_VAR 0 13
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: EQUAL
39905: IFFALSE 39909
// continue ;
39907: GO 39865
// PrepareHuman ( false , i , skill ) ;
39909: LD_INT 0
39911: PPUSH
39912: LD_VAR 0 8
39916: PPUSH
39917: LD_VAR 0 4
39921: PPUSH
39922: CALL_OW 380
// un := CreateHuman ;
39926: LD_ADDR_VAR 0 14
39930: PUSH
39931: CALL_OW 44
39935: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39936: LD_VAR 0 14
39940: PPUSH
39941: LD_VAR 0 1
39945: PPUSH
39946: CALL_OW 250
39950: PPUSH
39951: LD_VAR 0 1
39955: PPUSH
39956: CALL_OW 251
39960: PPUSH
39961: LD_INT 10
39963: PPUSH
39964: LD_INT 0
39966: PPUSH
39967: CALL_OW 50
// result := result ^ un ;
39971: LD_ADDR_VAR 0 7
39975: PUSH
39976: LD_VAR 0 7
39980: PUSH
39981: LD_VAR 0 14
39985: ADD
39986: ST_TO_ADDR
// end ;
39987: GO 39865
39989: POP
39990: POP
// end ; end ;
39991: LD_VAR 0 7
39995: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39996: LD_INT 0
39998: PPUSH
39999: PPUSH
40000: PPUSH
40001: PPUSH
40002: PPUSH
40003: PPUSH
40004: PPUSH
40005: PPUSH
40006: PPUSH
40007: PPUSH
40008: PPUSH
40009: PPUSH
40010: PPUSH
40011: PPUSH
40012: PPUSH
40013: PPUSH
// result := false ;
40014: LD_ADDR_VAR 0 3
40018: PUSH
40019: LD_INT 0
40021: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40022: LD_VAR 0 1
40026: NOT
40027: PUSH
40028: LD_VAR 0 1
40032: PPUSH
40033: CALL_OW 266
40037: PUSH
40038: LD_INT 32
40040: PUSH
40041: LD_INT 33
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: IN
40048: NOT
40049: OR
40050: IFFALSE 40054
// exit ;
40052: GO 41163
// nat := GetNation ( tower ) ;
40054: LD_ADDR_VAR 0 12
40058: PUSH
40059: LD_VAR 0 1
40063: PPUSH
40064: CALL_OW 248
40068: ST_TO_ADDR
// side := GetSide ( tower ) ;
40069: LD_ADDR_VAR 0 16
40073: PUSH
40074: LD_VAR 0 1
40078: PPUSH
40079: CALL_OW 255
40083: ST_TO_ADDR
// x := GetX ( tower ) ;
40084: LD_ADDR_VAR 0 10
40088: PUSH
40089: LD_VAR 0 1
40093: PPUSH
40094: CALL_OW 250
40098: ST_TO_ADDR
// y := GetY ( tower ) ;
40099: LD_ADDR_VAR 0 11
40103: PUSH
40104: LD_VAR 0 1
40108: PPUSH
40109: CALL_OW 251
40113: ST_TO_ADDR
// if not x or not y then
40114: LD_VAR 0 10
40118: NOT
40119: PUSH
40120: LD_VAR 0 11
40124: NOT
40125: OR
40126: IFFALSE 40130
// exit ;
40128: GO 41163
// weapon := 0 ;
40130: LD_ADDR_VAR 0 18
40134: PUSH
40135: LD_INT 0
40137: ST_TO_ADDR
// fac_list := [ ] ;
40138: LD_ADDR_VAR 0 17
40142: PUSH
40143: EMPTY
40144: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40145: LD_ADDR_VAR 0 6
40149: PUSH
40150: LD_VAR 0 1
40154: PPUSH
40155: CALL_OW 274
40159: PPUSH
40160: LD_VAR 0 2
40164: PPUSH
40165: LD_INT 0
40167: PPUSH
40168: CALL 37734 0 3
40172: PPUSH
40173: LD_INT 30
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: PPUSH
40183: CALL_OW 72
40187: ST_TO_ADDR
// if not factories then
40188: LD_VAR 0 6
40192: NOT
40193: IFFALSE 40197
// exit ;
40195: GO 41163
// for i in factories do
40197: LD_ADDR_VAR 0 8
40201: PUSH
40202: LD_VAR 0 6
40206: PUSH
40207: FOR_IN
40208: IFFALSE 40233
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40210: LD_ADDR_VAR 0 17
40214: PUSH
40215: LD_VAR 0 17
40219: PUSH
40220: LD_VAR 0 8
40224: PPUSH
40225: CALL_OW 478
40229: UNION
40230: ST_TO_ADDR
40231: GO 40207
40233: POP
40234: POP
// if not fac_list then
40235: LD_VAR 0 17
40239: NOT
40240: IFFALSE 40244
// exit ;
40242: GO 41163
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40244: LD_ADDR_VAR 0 5
40248: PUSH
40249: LD_INT 4
40251: PUSH
40252: LD_INT 5
40254: PUSH
40255: LD_INT 9
40257: PUSH
40258: LD_INT 10
40260: PUSH
40261: LD_INT 6
40263: PUSH
40264: LD_INT 7
40266: PUSH
40267: LD_INT 11
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 27
40281: PUSH
40282: LD_INT 28
40284: PUSH
40285: LD_INT 26
40287: PUSH
40288: LD_INT 30
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 43
40299: PUSH
40300: LD_INT 44
40302: PUSH
40303: LD_INT 46
40305: PUSH
40306: LD_INT 45
40308: PUSH
40309: LD_INT 47
40311: PUSH
40312: LD_INT 49
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: LIST
40327: PUSH
40328: LD_VAR 0 12
40332: ARRAY
40333: ST_TO_ADDR
// list := list isect fac_list ;
40334: LD_ADDR_VAR 0 5
40338: PUSH
40339: LD_VAR 0 5
40343: PUSH
40344: LD_VAR 0 17
40348: ISECT
40349: ST_TO_ADDR
// if not list then
40350: LD_VAR 0 5
40354: NOT
40355: IFFALSE 40359
// exit ;
40357: GO 41163
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40359: LD_VAR 0 12
40363: PUSH
40364: LD_INT 3
40366: EQUAL
40367: PUSH
40368: LD_INT 49
40370: PUSH
40371: LD_VAR 0 5
40375: IN
40376: AND
40377: PUSH
40378: LD_INT 31
40380: PPUSH
40381: LD_VAR 0 16
40385: PPUSH
40386: CALL_OW 321
40390: PUSH
40391: LD_INT 2
40393: EQUAL
40394: AND
40395: IFFALSE 40455
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40397: LD_INT 22
40399: PUSH
40400: LD_VAR 0 16
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 35
40411: PUSH
40412: LD_INT 49
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 91
40421: PUSH
40422: LD_VAR 0 1
40426: PUSH
40427: LD_INT 10
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: LIST
40439: PPUSH
40440: CALL_OW 69
40444: NOT
40445: IFFALSE 40455
// weapon := ru_time_lapser ;
40447: LD_ADDR_VAR 0 18
40451: PUSH
40452: LD_INT 49
40454: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40455: LD_VAR 0 12
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: LD_INT 2
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: IN
40470: PUSH
40471: LD_INT 11
40473: PUSH
40474: LD_VAR 0 5
40478: IN
40479: PUSH
40480: LD_INT 30
40482: PUSH
40483: LD_VAR 0 5
40487: IN
40488: OR
40489: AND
40490: PUSH
40491: LD_INT 6
40493: PPUSH
40494: LD_VAR 0 16
40498: PPUSH
40499: CALL_OW 321
40503: PUSH
40504: LD_INT 2
40506: EQUAL
40507: AND
40508: IFFALSE 40673
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40510: LD_INT 22
40512: PUSH
40513: LD_VAR 0 16
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 35
40527: PUSH
40528: LD_INT 11
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 35
40537: PUSH
40538: LD_INT 30
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 91
40552: PUSH
40553: LD_VAR 0 1
40557: PUSH
40558: LD_INT 18
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: LIST
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: LIST
40570: PPUSH
40571: CALL_OW 69
40575: NOT
40576: PUSH
40577: LD_INT 22
40579: PUSH
40580: LD_VAR 0 16
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 2
40591: PUSH
40592: LD_INT 30
40594: PUSH
40595: LD_INT 32
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 30
40604: PUSH
40605: LD_INT 33
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: LIST
40616: PUSH
40617: LD_INT 91
40619: PUSH
40620: LD_VAR 0 1
40624: PUSH
40625: LD_INT 12
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: LIST
40637: PUSH
40638: EMPTY
40639: LIST
40640: PPUSH
40641: CALL_OW 69
40645: PUSH
40646: LD_INT 2
40648: GREATER
40649: AND
40650: IFFALSE 40673
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40652: LD_ADDR_VAR 0 18
40656: PUSH
40657: LD_INT 11
40659: PUSH
40660: LD_INT 30
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_VAR 0 12
40671: ARRAY
40672: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40673: LD_VAR 0 18
40677: NOT
40678: PUSH
40679: LD_INT 40
40681: PPUSH
40682: LD_VAR 0 16
40686: PPUSH
40687: CALL_OW 321
40691: PUSH
40692: LD_INT 2
40694: EQUAL
40695: AND
40696: PUSH
40697: LD_INT 7
40699: PUSH
40700: LD_VAR 0 5
40704: IN
40705: PUSH
40706: LD_INT 28
40708: PUSH
40709: LD_VAR 0 5
40713: IN
40714: OR
40715: PUSH
40716: LD_INT 45
40718: PUSH
40719: LD_VAR 0 5
40723: IN
40724: OR
40725: AND
40726: IFFALSE 40980
// begin hex := GetHexInfo ( x , y ) ;
40728: LD_ADDR_VAR 0 4
40732: PUSH
40733: LD_VAR 0 10
40737: PPUSH
40738: LD_VAR 0 11
40742: PPUSH
40743: CALL_OW 546
40747: ST_TO_ADDR
// if hex [ 1 ] then
40748: LD_VAR 0 4
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: IFFALSE 40760
// exit ;
40758: GO 41163
// height := hex [ 2 ] ;
40760: LD_ADDR_VAR 0 15
40764: PUSH
40765: LD_VAR 0 4
40769: PUSH
40770: LD_INT 2
40772: ARRAY
40773: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40774: LD_ADDR_VAR 0 14
40778: PUSH
40779: LD_INT 0
40781: PUSH
40782: LD_INT 2
40784: PUSH
40785: LD_INT 3
40787: PUSH
40788: LD_INT 5
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: ST_TO_ADDR
// for i in tmp do
40797: LD_ADDR_VAR 0 8
40801: PUSH
40802: LD_VAR 0 14
40806: PUSH
40807: FOR_IN
40808: IFFALSE 40978
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40810: LD_ADDR_VAR 0 9
40814: PUSH
40815: LD_VAR 0 10
40819: PPUSH
40820: LD_VAR 0 8
40824: PPUSH
40825: LD_INT 5
40827: PPUSH
40828: CALL_OW 272
40832: PUSH
40833: LD_VAR 0 11
40837: PPUSH
40838: LD_VAR 0 8
40842: PPUSH
40843: LD_INT 5
40845: PPUSH
40846: CALL_OW 273
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40855: LD_VAR 0 9
40859: PUSH
40860: LD_INT 1
40862: ARRAY
40863: PPUSH
40864: LD_VAR 0 9
40868: PUSH
40869: LD_INT 2
40871: ARRAY
40872: PPUSH
40873: CALL_OW 488
40877: IFFALSE 40976
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40879: LD_ADDR_VAR 0 4
40883: PUSH
40884: LD_VAR 0 9
40888: PUSH
40889: LD_INT 1
40891: ARRAY
40892: PPUSH
40893: LD_VAR 0 9
40897: PUSH
40898: LD_INT 2
40900: ARRAY
40901: PPUSH
40902: CALL_OW 546
40906: ST_TO_ADDR
// if hex [ 1 ] then
40907: LD_VAR 0 4
40911: PUSH
40912: LD_INT 1
40914: ARRAY
40915: IFFALSE 40919
// continue ;
40917: GO 40807
// h := hex [ 2 ] ;
40919: LD_ADDR_VAR 0 13
40923: PUSH
40924: LD_VAR 0 4
40928: PUSH
40929: LD_INT 2
40931: ARRAY
40932: ST_TO_ADDR
// if h + 7 < height then
40933: LD_VAR 0 13
40937: PUSH
40938: LD_INT 7
40940: PLUS
40941: PUSH
40942: LD_VAR 0 15
40946: LESS
40947: IFFALSE 40976
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40949: LD_ADDR_VAR 0 18
40953: PUSH
40954: LD_INT 7
40956: PUSH
40957: LD_INT 28
40959: PUSH
40960: LD_INT 45
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: PUSH
40968: LD_VAR 0 12
40972: ARRAY
40973: ST_TO_ADDR
// break ;
40974: GO 40978
// end ; end ; end ;
40976: GO 40807
40978: POP
40979: POP
// end ; if not weapon then
40980: LD_VAR 0 18
40984: NOT
40985: IFFALSE 41045
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40987: LD_ADDR_VAR 0 5
40991: PUSH
40992: LD_VAR 0 5
40996: PUSH
40997: LD_INT 11
40999: PUSH
41000: LD_INT 30
41002: PUSH
41003: LD_INT 49
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: LIST
41010: DIFF
41011: ST_TO_ADDR
// if not list then
41012: LD_VAR 0 5
41016: NOT
41017: IFFALSE 41021
// exit ;
41019: GO 41163
// weapon := list [ rand ( 1 , list ) ] ;
41021: LD_ADDR_VAR 0 18
41025: PUSH
41026: LD_VAR 0 5
41030: PUSH
41031: LD_INT 1
41033: PPUSH
41034: LD_VAR 0 5
41038: PPUSH
41039: CALL_OW 12
41043: ARRAY
41044: ST_TO_ADDR
// end ; if weapon then
41045: LD_VAR 0 18
41049: IFFALSE 41163
// begin tmp := CostOfWeapon ( weapon ) ;
41051: LD_ADDR_VAR 0 14
41055: PUSH
41056: LD_VAR 0 18
41060: PPUSH
41061: CALL_OW 451
41065: ST_TO_ADDR
// j := GetBase ( tower ) ;
41066: LD_ADDR_VAR 0 9
41070: PUSH
41071: LD_VAR 0 1
41075: PPUSH
41076: CALL_OW 274
41080: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41081: LD_VAR 0 9
41085: PPUSH
41086: LD_INT 1
41088: PPUSH
41089: CALL_OW 275
41093: PUSH
41094: LD_VAR 0 14
41098: PUSH
41099: LD_INT 1
41101: ARRAY
41102: GREATEREQUAL
41103: PUSH
41104: LD_VAR 0 9
41108: PPUSH
41109: LD_INT 2
41111: PPUSH
41112: CALL_OW 275
41116: PUSH
41117: LD_VAR 0 14
41121: PUSH
41122: LD_INT 2
41124: ARRAY
41125: GREATEREQUAL
41126: AND
41127: PUSH
41128: LD_VAR 0 9
41132: PPUSH
41133: LD_INT 3
41135: PPUSH
41136: CALL_OW 275
41140: PUSH
41141: LD_VAR 0 14
41145: PUSH
41146: LD_INT 3
41148: ARRAY
41149: GREATEREQUAL
41150: AND
41151: IFFALSE 41163
// result := weapon ;
41153: LD_ADDR_VAR 0 3
41157: PUSH
41158: LD_VAR 0 18
41162: ST_TO_ADDR
// end ; end ;
41163: LD_VAR 0 3
41167: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41168: LD_INT 0
41170: PPUSH
41171: PPUSH
// result := true ;
41172: LD_ADDR_VAR 0 3
41176: PUSH
41177: LD_INT 1
41179: ST_TO_ADDR
// if array1 = array2 then
41180: LD_VAR 0 1
41184: PUSH
41185: LD_VAR 0 2
41189: EQUAL
41190: IFFALSE 41250
// begin for i = 1 to array1 do
41192: LD_ADDR_VAR 0 4
41196: PUSH
41197: DOUBLE
41198: LD_INT 1
41200: DEC
41201: ST_TO_ADDR
41202: LD_VAR 0 1
41206: PUSH
41207: FOR_TO
41208: IFFALSE 41246
// if array1 [ i ] <> array2 [ i ] then
41210: LD_VAR 0 1
41214: PUSH
41215: LD_VAR 0 4
41219: ARRAY
41220: PUSH
41221: LD_VAR 0 2
41225: PUSH
41226: LD_VAR 0 4
41230: ARRAY
41231: NONEQUAL
41232: IFFALSE 41244
// begin result := false ;
41234: LD_ADDR_VAR 0 3
41238: PUSH
41239: LD_INT 0
41241: ST_TO_ADDR
// break ;
41242: GO 41246
// end ;
41244: GO 41207
41246: POP
41247: POP
// end else
41248: GO 41258
// result := false ;
41250: LD_ADDR_VAR 0 3
41254: PUSH
41255: LD_INT 0
41257: ST_TO_ADDR
// end ;
41258: LD_VAR 0 3
41262: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41263: LD_INT 0
41265: PPUSH
41266: PPUSH
// if not array1 or not array2 then
41267: LD_VAR 0 1
41271: NOT
41272: PUSH
41273: LD_VAR 0 2
41277: NOT
41278: OR
41279: IFFALSE 41283
// exit ;
41281: GO 41347
// result := true ;
41283: LD_ADDR_VAR 0 3
41287: PUSH
41288: LD_INT 1
41290: ST_TO_ADDR
// for i = 1 to array1 do
41291: LD_ADDR_VAR 0 4
41295: PUSH
41296: DOUBLE
41297: LD_INT 1
41299: DEC
41300: ST_TO_ADDR
41301: LD_VAR 0 1
41305: PUSH
41306: FOR_TO
41307: IFFALSE 41345
// if array1 [ i ] <> array2 [ i ] then
41309: LD_VAR 0 1
41313: PUSH
41314: LD_VAR 0 4
41318: ARRAY
41319: PUSH
41320: LD_VAR 0 2
41324: PUSH
41325: LD_VAR 0 4
41329: ARRAY
41330: NONEQUAL
41331: IFFALSE 41343
// begin result := false ;
41333: LD_ADDR_VAR 0 3
41337: PUSH
41338: LD_INT 0
41340: ST_TO_ADDR
// break ;
41341: GO 41345
// end ;
41343: GO 41306
41345: POP
41346: POP
// end ;
41347: LD_VAR 0 3
41351: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41352: LD_INT 0
41354: PPUSH
41355: PPUSH
41356: PPUSH
// pom := GetBase ( fac ) ;
41357: LD_ADDR_VAR 0 5
41361: PUSH
41362: LD_VAR 0 1
41366: PPUSH
41367: CALL_OW 274
41371: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41372: LD_ADDR_VAR 0 4
41376: PUSH
41377: LD_VAR 0 2
41381: PUSH
41382: LD_INT 1
41384: ARRAY
41385: PPUSH
41386: LD_VAR 0 2
41390: PUSH
41391: LD_INT 2
41393: ARRAY
41394: PPUSH
41395: LD_VAR 0 2
41399: PUSH
41400: LD_INT 3
41402: ARRAY
41403: PPUSH
41404: LD_VAR 0 2
41408: PUSH
41409: LD_INT 4
41411: ARRAY
41412: PPUSH
41413: CALL_OW 449
41417: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41418: LD_ADDR_VAR 0 3
41422: PUSH
41423: LD_VAR 0 5
41427: PPUSH
41428: LD_INT 1
41430: PPUSH
41431: CALL_OW 275
41435: PUSH
41436: LD_VAR 0 4
41440: PUSH
41441: LD_INT 1
41443: ARRAY
41444: GREATEREQUAL
41445: PUSH
41446: LD_VAR 0 5
41450: PPUSH
41451: LD_INT 2
41453: PPUSH
41454: CALL_OW 275
41458: PUSH
41459: LD_VAR 0 4
41463: PUSH
41464: LD_INT 2
41466: ARRAY
41467: GREATEREQUAL
41468: AND
41469: PUSH
41470: LD_VAR 0 5
41474: PPUSH
41475: LD_INT 3
41477: PPUSH
41478: CALL_OW 275
41482: PUSH
41483: LD_VAR 0 4
41487: PUSH
41488: LD_INT 3
41490: ARRAY
41491: GREATEREQUAL
41492: AND
41493: ST_TO_ADDR
// end ;
41494: LD_VAR 0 3
41498: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41499: LD_INT 0
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
// pom := GetBase ( building ) ;
41505: LD_ADDR_VAR 0 3
41509: PUSH
41510: LD_VAR 0 1
41514: PPUSH
41515: CALL_OW 274
41519: ST_TO_ADDR
// if not pom then
41520: LD_VAR 0 3
41524: NOT
41525: IFFALSE 41529
// exit ;
41527: GO 41699
// btype := GetBType ( building ) ;
41529: LD_ADDR_VAR 0 5
41533: PUSH
41534: LD_VAR 0 1
41538: PPUSH
41539: CALL_OW 266
41543: ST_TO_ADDR
// if btype = b_armoury then
41544: LD_VAR 0 5
41548: PUSH
41549: LD_INT 4
41551: EQUAL
41552: IFFALSE 41562
// btype := b_barracks ;
41554: LD_ADDR_VAR 0 5
41558: PUSH
41559: LD_INT 5
41561: ST_TO_ADDR
// if btype = b_depot then
41562: LD_VAR 0 5
41566: PUSH
41567: LD_INT 0
41569: EQUAL
41570: IFFALSE 41580
// btype := b_warehouse ;
41572: LD_ADDR_VAR 0 5
41576: PUSH
41577: LD_INT 1
41579: ST_TO_ADDR
// if btype = b_workshop then
41580: LD_VAR 0 5
41584: PUSH
41585: LD_INT 2
41587: EQUAL
41588: IFFALSE 41598
// btype := b_factory ;
41590: LD_ADDR_VAR 0 5
41594: PUSH
41595: LD_INT 3
41597: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41598: LD_ADDR_VAR 0 4
41602: PUSH
41603: LD_VAR 0 5
41607: PPUSH
41608: LD_VAR 0 1
41612: PPUSH
41613: CALL_OW 248
41617: PPUSH
41618: CALL_OW 450
41622: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41623: LD_ADDR_VAR 0 2
41627: PUSH
41628: LD_VAR 0 3
41632: PPUSH
41633: LD_INT 1
41635: PPUSH
41636: CALL_OW 275
41640: PUSH
41641: LD_VAR 0 4
41645: PUSH
41646: LD_INT 1
41648: ARRAY
41649: GREATEREQUAL
41650: PUSH
41651: LD_VAR 0 3
41655: PPUSH
41656: LD_INT 2
41658: PPUSH
41659: CALL_OW 275
41663: PUSH
41664: LD_VAR 0 4
41668: PUSH
41669: LD_INT 2
41671: ARRAY
41672: GREATEREQUAL
41673: AND
41674: PUSH
41675: LD_VAR 0 3
41679: PPUSH
41680: LD_INT 3
41682: PPUSH
41683: CALL_OW 275
41687: PUSH
41688: LD_VAR 0 4
41692: PUSH
41693: LD_INT 3
41695: ARRAY
41696: GREATEREQUAL
41697: AND
41698: ST_TO_ADDR
// end ;
41699: LD_VAR 0 2
41703: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41704: LD_INT 0
41706: PPUSH
41707: PPUSH
41708: PPUSH
// pom := GetBase ( building ) ;
41709: LD_ADDR_VAR 0 4
41713: PUSH
41714: LD_VAR 0 1
41718: PPUSH
41719: CALL_OW 274
41723: ST_TO_ADDR
// if not pom then
41724: LD_VAR 0 4
41728: NOT
41729: IFFALSE 41733
// exit ;
41731: GO 41834
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41733: LD_ADDR_VAR 0 5
41737: PUSH
41738: LD_VAR 0 2
41742: PPUSH
41743: LD_VAR 0 1
41747: PPUSH
41748: CALL_OW 248
41752: PPUSH
41753: CALL_OW 450
41757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41758: LD_ADDR_VAR 0 3
41762: PUSH
41763: LD_VAR 0 4
41767: PPUSH
41768: LD_INT 1
41770: PPUSH
41771: CALL_OW 275
41775: PUSH
41776: LD_VAR 0 5
41780: PUSH
41781: LD_INT 1
41783: ARRAY
41784: GREATEREQUAL
41785: PUSH
41786: LD_VAR 0 4
41790: PPUSH
41791: LD_INT 2
41793: PPUSH
41794: CALL_OW 275
41798: PUSH
41799: LD_VAR 0 5
41803: PUSH
41804: LD_INT 2
41806: ARRAY
41807: GREATEREQUAL
41808: AND
41809: PUSH
41810: LD_VAR 0 4
41814: PPUSH
41815: LD_INT 3
41817: PPUSH
41818: CALL_OW 275
41822: PUSH
41823: LD_VAR 0 5
41827: PUSH
41828: LD_INT 3
41830: ARRAY
41831: GREATEREQUAL
41832: AND
41833: ST_TO_ADDR
// end ;
41834: LD_VAR 0 3
41838: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41839: LD_INT 0
41841: PPUSH
41842: PPUSH
41843: PPUSH
41844: PPUSH
41845: PPUSH
41846: PPUSH
41847: PPUSH
41848: PPUSH
41849: PPUSH
41850: PPUSH
41851: PPUSH
// result := false ;
41852: LD_ADDR_VAR 0 8
41856: PUSH
41857: LD_INT 0
41859: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41860: LD_VAR 0 5
41864: NOT
41865: PUSH
41866: LD_VAR 0 1
41870: NOT
41871: OR
41872: PUSH
41873: LD_VAR 0 2
41877: NOT
41878: OR
41879: PUSH
41880: LD_VAR 0 3
41884: NOT
41885: OR
41886: IFFALSE 41890
// exit ;
41888: GO 42704
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41890: LD_ADDR_VAR 0 14
41894: PUSH
41895: LD_VAR 0 1
41899: PPUSH
41900: LD_VAR 0 2
41904: PPUSH
41905: LD_VAR 0 3
41909: PPUSH
41910: LD_VAR 0 4
41914: PPUSH
41915: LD_VAR 0 5
41919: PUSH
41920: LD_INT 1
41922: ARRAY
41923: PPUSH
41924: CALL_OW 248
41928: PPUSH
41929: LD_INT 0
41931: PPUSH
41932: CALL 43941 0 6
41936: ST_TO_ADDR
// if not hexes then
41937: LD_VAR 0 14
41941: NOT
41942: IFFALSE 41946
// exit ;
41944: GO 42704
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41946: LD_ADDR_VAR 0 17
41950: PUSH
41951: LD_VAR 0 5
41955: PPUSH
41956: LD_INT 22
41958: PUSH
41959: LD_VAR 0 13
41963: PPUSH
41964: CALL_OW 255
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: LD_INT 30
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 30
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PPUSH
42005: CALL_OW 72
42009: ST_TO_ADDR
// for i = 1 to hexes do
42010: LD_ADDR_VAR 0 9
42014: PUSH
42015: DOUBLE
42016: LD_INT 1
42018: DEC
42019: ST_TO_ADDR
42020: LD_VAR 0 14
42024: PUSH
42025: FOR_TO
42026: IFFALSE 42702
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42028: LD_ADDR_VAR 0 13
42032: PUSH
42033: LD_VAR 0 14
42037: PUSH
42038: LD_VAR 0 9
42042: ARRAY
42043: PUSH
42044: LD_INT 1
42046: ARRAY
42047: PPUSH
42048: LD_VAR 0 14
42052: PUSH
42053: LD_VAR 0 9
42057: ARRAY
42058: PUSH
42059: LD_INT 2
42061: ARRAY
42062: PPUSH
42063: CALL_OW 428
42067: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42068: LD_VAR 0 14
42072: PUSH
42073: LD_VAR 0 9
42077: ARRAY
42078: PUSH
42079: LD_INT 1
42081: ARRAY
42082: PPUSH
42083: LD_VAR 0 14
42087: PUSH
42088: LD_VAR 0 9
42092: ARRAY
42093: PUSH
42094: LD_INT 2
42096: ARRAY
42097: PPUSH
42098: CALL_OW 351
42102: PUSH
42103: LD_VAR 0 14
42107: PUSH
42108: LD_VAR 0 9
42112: ARRAY
42113: PUSH
42114: LD_INT 1
42116: ARRAY
42117: PPUSH
42118: LD_VAR 0 14
42122: PUSH
42123: LD_VAR 0 9
42127: ARRAY
42128: PUSH
42129: LD_INT 2
42131: ARRAY
42132: PPUSH
42133: CALL_OW 488
42137: NOT
42138: OR
42139: PUSH
42140: LD_VAR 0 13
42144: PPUSH
42145: CALL_OW 247
42149: PUSH
42150: LD_INT 3
42152: EQUAL
42153: OR
42154: IFFALSE 42160
// exit ;
42156: POP
42157: POP
42158: GO 42704
// if not tmp then
42160: LD_VAR 0 13
42164: NOT
42165: IFFALSE 42169
// continue ;
42167: GO 42025
// result := true ;
42169: LD_ADDR_VAR 0 8
42173: PUSH
42174: LD_INT 1
42176: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42177: LD_VAR 0 6
42181: PUSH
42182: LD_VAR 0 13
42186: PPUSH
42187: CALL_OW 247
42191: PUSH
42192: LD_INT 2
42194: EQUAL
42195: AND
42196: PUSH
42197: LD_VAR 0 13
42201: PPUSH
42202: CALL_OW 263
42206: PUSH
42207: LD_INT 1
42209: EQUAL
42210: AND
42211: IFFALSE 42375
// begin if IsDrivenBy ( tmp ) then
42213: LD_VAR 0 13
42217: PPUSH
42218: CALL_OW 311
42222: IFFALSE 42226
// continue ;
42224: GO 42025
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42226: LD_VAR 0 6
42230: PPUSH
42231: LD_INT 3
42233: PUSH
42234: LD_INT 60
42236: PUSH
42237: EMPTY
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: LD_INT 55
42249: PUSH
42250: EMPTY
42251: LIST
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PPUSH
42261: CALL_OW 72
42265: IFFALSE 42373
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42267: LD_ADDR_VAR 0 18
42271: PUSH
42272: LD_VAR 0 6
42276: PPUSH
42277: LD_INT 3
42279: PUSH
42280: LD_INT 60
42282: PUSH
42283: EMPTY
42284: LIST
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 3
42292: PUSH
42293: LD_INT 55
42295: PUSH
42296: EMPTY
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PPUSH
42307: CALL_OW 72
42311: PUSH
42312: LD_INT 1
42314: ARRAY
42315: ST_TO_ADDR
// if IsInUnit ( driver ) then
42316: LD_VAR 0 18
42320: PPUSH
42321: CALL_OW 310
42325: IFFALSE 42336
// ComExit ( driver ) ;
42327: LD_VAR 0 18
42331: PPUSH
42332: CALL 67125 0 1
// AddComEnterUnit ( driver , tmp ) ;
42336: LD_VAR 0 18
42340: PPUSH
42341: LD_VAR 0 13
42345: PPUSH
42346: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42350: LD_VAR 0 18
42354: PPUSH
42355: LD_VAR 0 7
42359: PPUSH
42360: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42364: LD_VAR 0 18
42368: PPUSH
42369: CALL_OW 181
// end ; continue ;
42373: GO 42025
// end ; if not cleaners or not tmp in cleaners then
42375: LD_VAR 0 6
42379: NOT
42380: PUSH
42381: LD_VAR 0 13
42385: PUSH
42386: LD_VAR 0 6
42390: IN
42391: NOT
42392: OR
42393: IFFALSE 42700
// begin if dep then
42395: LD_VAR 0 17
42399: IFFALSE 42535
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42401: LD_ADDR_VAR 0 16
42405: PUSH
42406: LD_VAR 0 17
42410: PUSH
42411: LD_INT 1
42413: ARRAY
42414: PPUSH
42415: CALL_OW 250
42419: PPUSH
42420: LD_VAR 0 17
42424: PUSH
42425: LD_INT 1
42427: ARRAY
42428: PPUSH
42429: CALL_OW 254
42433: PPUSH
42434: LD_INT 5
42436: PPUSH
42437: CALL_OW 272
42441: PUSH
42442: LD_VAR 0 17
42446: PUSH
42447: LD_INT 1
42449: ARRAY
42450: PPUSH
42451: CALL_OW 251
42455: PPUSH
42456: LD_VAR 0 17
42460: PUSH
42461: LD_INT 1
42463: ARRAY
42464: PPUSH
42465: CALL_OW 254
42469: PPUSH
42470: LD_INT 5
42472: PPUSH
42473: CALL_OW 273
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42482: LD_VAR 0 16
42486: PUSH
42487: LD_INT 1
42489: ARRAY
42490: PPUSH
42491: LD_VAR 0 16
42495: PUSH
42496: LD_INT 2
42498: ARRAY
42499: PPUSH
42500: CALL_OW 488
42504: IFFALSE 42535
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42506: LD_VAR 0 13
42510: PPUSH
42511: LD_VAR 0 16
42515: PUSH
42516: LD_INT 1
42518: ARRAY
42519: PPUSH
42520: LD_VAR 0 16
42524: PUSH
42525: LD_INT 2
42527: ARRAY
42528: PPUSH
42529: CALL_OW 111
// continue ;
42533: GO 42025
// end ; end ; r := GetDir ( tmp ) ;
42535: LD_ADDR_VAR 0 15
42539: PUSH
42540: LD_VAR 0 13
42544: PPUSH
42545: CALL_OW 254
42549: ST_TO_ADDR
// if r = 5 then
42550: LD_VAR 0 15
42554: PUSH
42555: LD_INT 5
42557: EQUAL
42558: IFFALSE 42568
// r := 0 ;
42560: LD_ADDR_VAR 0 15
42564: PUSH
42565: LD_INT 0
42567: ST_TO_ADDR
// for j = r to 5 do
42568: LD_ADDR_VAR 0 10
42572: PUSH
42573: DOUBLE
42574: LD_VAR 0 15
42578: DEC
42579: ST_TO_ADDR
42580: LD_INT 5
42582: PUSH
42583: FOR_TO
42584: IFFALSE 42698
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42586: LD_ADDR_VAR 0 11
42590: PUSH
42591: LD_VAR 0 13
42595: PPUSH
42596: CALL_OW 250
42600: PPUSH
42601: LD_VAR 0 10
42605: PPUSH
42606: LD_INT 2
42608: PPUSH
42609: CALL_OW 272
42613: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42614: LD_ADDR_VAR 0 12
42618: PUSH
42619: LD_VAR 0 13
42623: PPUSH
42624: CALL_OW 251
42628: PPUSH
42629: LD_VAR 0 10
42633: PPUSH
42634: LD_INT 2
42636: PPUSH
42637: CALL_OW 273
42641: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42642: LD_VAR 0 11
42646: PPUSH
42647: LD_VAR 0 12
42651: PPUSH
42652: CALL_OW 488
42656: PUSH
42657: LD_VAR 0 11
42661: PPUSH
42662: LD_VAR 0 12
42666: PPUSH
42667: CALL_OW 428
42671: NOT
42672: AND
42673: IFFALSE 42696
// begin ComMoveXY ( tmp , _x , _y ) ;
42675: LD_VAR 0 13
42679: PPUSH
42680: LD_VAR 0 11
42684: PPUSH
42685: LD_VAR 0 12
42689: PPUSH
42690: CALL_OW 111
// break ;
42694: GO 42698
// end ; end ;
42696: GO 42583
42698: POP
42699: POP
// end ; end ;
42700: GO 42025
42702: POP
42703: POP
// end ;
42704: LD_VAR 0 8
42708: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42709: LD_INT 0
42711: PPUSH
// result := true ;
42712: LD_ADDR_VAR 0 3
42716: PUSH
42717: LD_INT 1
42719: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42720: LD_VAR 0 2
42724: PUSH
42725: LD_INT 24
42727: DOUBLE
42728: EQUAL
42729: IFTRUE 42739
42731: LD_INT 33
42733: DOUBLE
42734: EQUAL
42735: IFTRUE 42739
42737: GO 42764
42739: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42740: LD_ADDR_VAR 0 3
42744: PUSH
42745: LD_INT 32
42747: PPUSH
42748: LD_VAR 0 1
42752: PPUSH
42753: CALL_OW 321
42757: PUSH
42758: LD_INT 2
42760: EQUAL
42761: ST_TO_ADDR
42762: GO 43084
42764: LD_INT 20
42766: DOUBLE
42767: EQUAL
42768: IFTRUE 42772
42770: GO 42797
42772: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: LD_INT 6
42780: PPUSH
42781: LD_VAR 0 1
42785: PPUSH
42786: CALL_OW 321
42790: PUSH
42791: LD_INT 2
42793: EQUAL
42794: ST_TO_ADDR
42795: GO 43084
42797: LD_INT 22
42799: DOUBLE
42800: EQUAL
42801: IFTRUE 42811
42803: LD_INT 36
42805: DOUBLE
42806: EQUAL
42807: IFTRUE 42811
42809: GO 42836
42811: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42812: LD_ADDR_VAR 0 3
42816: PUSH
42817: LD_INT 15
42819: PPUSH
42820: LD_VAR 0 1
42824: PPUSH
42825: CALL_OW 321
42829: PUSH
42830: LD_INT 2
42832: EQUAL
42833: ST_TO_ADDR
42834: GO 43084
42836: LD_INT 30
42838: DOUBLE
42839: EQUAL
42840: IFTRUE 42844
42842: GO 42869
42844: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42845: LD_ADDR_VAR 0 3
42849: PUSH
42850: LD_INT 20
42852: PPUSH
42853: LD_VAR 0 1
42857: PPUSH
42858: CALL_OW 321
42862: PUSH
42863: LD_INT 2
42865: EQUAL
42866: ST_TO_ADDR
42867: GO 43084
42869: LD_INT 28
42871: DOUBLE
42872: EQUAL
42873: IFTRUE 42883
42875: LD_INT 21
42877: DOUBLE
42878: EQUAL
42879: IFTRUE 42883
42881: GO 42908
42883: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42884: LD_ADDR_VAR 0 3
42888: PUSH
42889: LD_INT 21
42891: PPUSH
42892: LD_VAR 0 1
42896: PPUSH
42897: CALL_OW 321
42901: PUSH
42902: LD_INT 2
42904: EQUAL
42905: ST_TO_ADDR
42906: GO 43084
42908: LD_INT 16
42910: DOUBLE
42911: EQUAL
42912: IFTRUE 42916
42914: GO 42943
42916: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42917: LD_ADDR_VAR 0 3
42921: PUSH
42922: LD_EXP 44
42926: PPUSH
42927: LD_VAR 0 1
42931: PPUSH
42932: CALL_OW 321
42936: PUSH
42937: LD_INT 2
42939: EQUAL
42940: ST_TO_ADDR
42941: GO 43084
42943: LD_INT 19
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42957
42949: LD_INT 23
42951: DOUBLE
42952: EQUAL
42953: IFTRUE 42957
42955: GO 42984
42957: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42958: LD_ADDR_VAR 0 3
42962: PUSH
42963: LD_EXP 43
42967: PPUSH
42968: LD_VAR 0 1
42972: PPUSH
42973: CALL_OW 321
42977: PUSH
42978: LD_INT 2
42980: EQUAL
42981: ST_TO_ADDR
42982: GO 43084
42984: LD_INT 17
42986: DOUBLE
42987: EQUAL
42988: IFTRUE 42992
42990: GO 43017
42992: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42993: LD_ADDR_VAR 0 3
42997: PUSH
42998: LD_INT 39
43000: PPUSH
43001: LD_VAR 0 1
43005: PPUSH
43006: CALL_OW 321
43010: PUSH
43011: LD_INT 2
43013: EQUAL
43014: ST_TO_ADDR
43015: GO 43084
43017: LD_INT 18
43019: DOUBLE
43020: EQUAL
43021: IFTRUE 43025
43023: GO 43050
43025: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43026: LD_ADDR_VAR 0 3
43030: PUSH
43031: LD_INT 40
43033: PPUSH
43034: LD_VAR 0 1
43038: PPUSH
43039: CALL_OW 321
43043: PUSH
43044: LD_INT 2
43046: EQUAL
43047: ST_TO_ADDR
43048: GO 43084
43050: LD_INT 27
43052: DOUBLE
43053: EQUAL
43054: IFTRUE 43058
43056: GO 43083
43058: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43059: LD_ADDR_VAR 0 3
43063: PUSH
43064: LD_INT 35
43066: PPUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL_OW 321
43076: PUSH
43077: LD_INT 2
43079: EQUAL
43080: ST_TO_ADDR
43081: GO 43084
43083: POP
// end ;
43084: LD_VAR 0 3
43088: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43089: LD_INT 0
43091: PPUSH
43092: PPUSH
43093: PPUSH
43094: PPUSH
43095: PPUSH
43096: PPUSH
43097: PPUSH
43098: PPUSH
43099: PPUSH
43100: PPUSH
43101: PPUSH
// result := false ;
43102: LD_ADDR_VAR 0 6
43106: PUSH
43107: LD_INT 0
43109: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43110: LD_VAR 0 1
43114: NOT
43115: PUSH
43116: LD_VAR 0 1
43120: PPUSH
43121: CALL_OW 266
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 1
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: IN
43136: NOT
43137: OR
43138: PUSH
43139: LD_VAR 0 2
43143: NOT
43144: OR
43145: PUSH
43146: LD_VAR 0 5
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 2
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 4
43165: PUSH
43166: LD_INT 5
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: IN
43177: NOT
43178: OR
43179: PUSH
43180: LD_VAR 0 3
43184: PPUSH
43185: LD_VAR 0 4
43189: PPUSH
43190: CALL_OW 488
43194: NOT
43195: OR
43196: IFFALSE 43200
// exit ;
43198: GO 43936
// side := GetSide ( depot ) ;
43200: LD_ADDR_VAR 0 9
43204: PUSH
43205: LD_VAR 0 1
43209: PPUSH
43210: CALL_OW 255
43214: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43215: LD_VAR 0 9
43219: PPUSH
43220: LD_VAR 0 2
43224: PPUSH
43225: CALL 42709 0 2
43229: NOT
43230: IFFALSE 43234
// exit ;
43232: GO 43936
// pom := GetBase ( depot ) ;
43234: LD_ADDR_VAR 0 10
43238: PUSH
43239: LD_VAR 0 1
43243: PPUSH
43244: CALL_OW 274
43248: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43249: LD_ADDR_VAR 0 11
43253: PUSH
43254: LD_VAR 0 2
43258: PPUSH
43259: LD_VAR 0 1
43263: PPUSH
43264: CALL_OW 248
43268: PPUSH
43269: CALL_OW 450
43273: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43274: LD_VAR 0 10
43278: PPUSH
43279: LD_INT 1
43281: PPUSH
43282: CALL_OW 275
43286: PUSH
43287: LD_VAR 0 11
43291: PUSH
43292: LD_INT 1
43294: ARRAY
43295: GREATEREQUAL
43296: PUSH
43297: LD_VAR 0 10
43301: PPUSH
43302: LD_INT 2
43304: PPUSH
43305: CALL_OW 275
43309: PUSH
43310: LD_VAR 0 11
43314: PUSH
43315: LD_INT 2
43317: ARRAY
43318: GREATEREQUAL
43319: AND
43320: PUSH
43321: LD_VAR 0 10
43325: PPUSH
43326: LD_INT 3
43328: PPUSH
43329: CALL_OW 275
43333: PUSH
43334: LD_VAR 0 11
43338: PUSH
43339: LD_INT 3
43341: ARRAY
43342: GREATEREQUAL
43343: AND
43344: NOT
43345: IFFALSE 43349
// exit ;
43347: GO 43936
// if GetBType ( depot ) = b_depot then
43349: LD_VAR 0 1
43353: PPUSH
43354: CALL_OW 266
43358: PUSH
43359: LD_INT 0
43361: EQUAL
43362: IFFALSE 43374
// dist := 28 else
43364: LD_ADDR_VAR 0 14
43368: PUSH
43369: LD_INT 28
43371: ST_TO_ADDR
43372: GO 43382
// dist := 36 ;
43374: LD_ADDR_VAR 0 14
43378: PUSH
43379: LD_INT 36
43381: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43382: LD_VAR 0 1
43386: PPUSH
43387: LD_VAR 0 3
43391: PPUSH
43392: LD_VAR 0 4
43396: PPUSH
43397: CALL_OW 297
43401: PUSH
43402: LD_VAR 0 14
43406: GREATER
43407: IFFALSE 43411
// exit ;
43409: GO 43936
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43411: LD_ADDR_VAR 0 12
43415: PUSH
43416: LD_VAR 0 2
43420: PPUSH
43421: LD_VAR 0 3
43425: PPUSH
43426: LD_VAR 0 4
43430: PPUSH
43431: LD_VAR 0 5
43435: PPUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 248
43445: PPUSH
43446: LD_INT 0
43448: PPUSH
43449: CALL 43941 0 6
43453: ST_TO_ADDR
// if not hexes then
43454: LD_VAR 0 12
43458: NOT
43459: IFFALSE 43463
// exit ;
43461: GO 43936
// hex := GetHexInfo ( x , y ) ;
43463: LD_ADDR_VAR 0 15
43467: PUSH
43468: LD_VAR 0 3
43472: PPUSH
43473: LD_VAR 0 4
43477: PPUSH
43478: CALL_OW 546
43482: ST_TO_ADDR
// if hex [ 1 ] then
43483: LD_VAR 0 15
43487: PUSH
43488: LD_INT 1
43490: ARRAY
43491: IFFALSE 43495
// exit ;
43493: GO 43936
// height := hex [ 2 ] ;
43495: LD_ADDR_VAR 0 13
43499: PUSH
43500: LD_VAR 0 15
43504: PUSH
43505: LD_INT 2
43507: ARRAY
43508: ST_TO_ADDR
// for i = 1 to hexes do
43509: LD_ADDR_VAR 0 7
43513: PUSH
43514: DOUBLE
43515: LD_INT 1
43517: DEC
43518: ST_TO_ADDR
43519: LD_VAR 0 12
43523: PUSH
43524: FOR_TO
43525: IFFALSE 43855
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43527: LD_VAR 0 12
43531: PUSH
43532: LD_VAR 0 7
43536: ARRAY
43537: PUSH
43538: LD_INT 1
43540: ARRAY
43541: PPUSH
43542: LD_VAR 0 12
43546: PUSH
43547: LD_VAR 0 7
43551: ARRAY
43552: PUSH
43553: LD_INT 2
43555: ARRAY
43556: PPUSH
43557: CALL_OW 488
43561: NOT
43562: PUSH
43563: LD_VAR 0 12
43567: PUSH
43568: LD_VAR 0 7
43572: ARRAY
43573: PUSH
43574: LD_INT 1
43576: ARRAY
43577: PPUSH
43578: LD_VAR 0 12
43582: PUSH
43583: LD_VAR 0 7
43587: ARRAY
43588: PUSH
43589: LD_INT 2
43591: ARRAY
43592: PPUSH
43593: CALL_OW 428
43597: PUSH
43598: LD_INT 0
43600: GREATER
43601: OR
43602: PUSH
43603: LD_VAR 0 12
43607: PUSH
43608: LD_VAR 0 7
43612: ARRAY
43613: PUSH
43614: LD_INT 1
43616: ARRAY
43617: PPUSH
43618: LD_VAR 0 12
43622: PUSH
43623: LD_VAR 0 7
43627: ARRAY
43628: PUSH
43629: LD_INT 2
43631: ARRAY
43632: PPUSH
43633: CALL_OW 351
43637: OR
43638: IFFALSE 43644
// exit ;
43640: POP
43641: POP
43642: GO 43936
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43644: LD_ADDR_VAR 0 8
43648: PUSH
43649: LD_VAR 0 12
43653: PUSH
43654: LD_VAR 0 7
43658: ARRAY
43659: PUSH
43660: LD_INT 1
43662: ARRAY
43663: PPUSH
43664: LD_VAR 0 12
43668: PUSH
43669: LD_VAR 0 7
43673: ARRAY
43674: PUSH
43675: LD_INT 2
43677: ARRAY
43678: PPUSH
43679: CALL_OW 546
43683: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43684: LD_VAR 0 8
43688: PUSH
43689: LD_INT 1
43691: ARRAY
43692: PUSH
43693: LD_VAR 0 8
43697: PUSH
43698: LD_INT 2
43700: ARRAY
43701: PUSH
43702: LD_VAR 0 13
43706: PUSH
43707: LD_INT 2
43709: PLUS
43710: GREATER
43711: OR
43712: PUSH
43713: LD_VAR 0 8
43717: PUSH
43718: LD_INT 2
43720: ARRAY
43721: PUSH
43722: LD_VAR 0 13
43726: PUSH
43727: LD_INT 2
43729: MINUS
43730: LESS
43731: OR
43732: PUSH
43733: LD_VAR 0 8
43737: PUSH
43738: LD_INT 3
43740: ARRAY
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 8
43747: PUSH
43748: LD_INT 9
43750: PUSH
43751: LD_INT 10
43753: PUSH
43754: LD_INT 11
43756: PUSH
43757: LD_INT 12
43759: PUSH
43760: LD_INT 13
43762: PUSH
43763: LD_INT 16
43765: PUSH
43766: LD_INT 17
43768: PUSH
43769: LD_INT 18
43771: PUSH
43772: LD_INT 19
43774: PUSH
43775: LD_INT 20
43777: PUSH
43778: LD_INT 21
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: LIST
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: LIST
43794: LIST
43795: IN
43796: NOT
43797: OR
43798: PUSH
43799: LD_VAR 0 8
43803: PUSH
43804: LD_INT 5
43806: ARRAY
43807: NOT
43808: OR
43809: PUSH
43810: LD_VAR 0 8
43814: PUSH
43815: LD_INT 6
43817: ARRAY
43818: PUSH
43819: LD_INT 1
43821: PUSH
43822: LD_INT 2
43824: PUSH
43825: LD_INT 7
43827: PUSH
43828: LD_INT 9
43830: PUSH
43831: LD_INT 10
43833: PUSH
43834: LD_INT 11
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: IN
43845: NOT
43846: OR
43847: IFFALSE 43853
// exit ;
43849: POP
43850: POP
43851: GO 43936
// end ;
43853: GO 43524
43855: POP
43856: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43857: LD_VAR 0 9
43861: PPUSH
43862: LD_VAR 0 3
43866: PPUSH
43867: LD_VAR 0 4
43871: PPUSH
43872: LD_INT 20
43874: PPUSH
43875: CALL 35882 0 4
43879: PUSH
43880: LD_INT 4
43882: ARRAY
43883: IFFALSE 43887
// exit ;
43885: GO 43936
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43887: LD_VAR 0 2
43891: PUSH
43892: LD_INT 29
43894: PUSH
43895: LD_INT 30
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: IN
43902: PUSH
43903: LD_VAR 0 3
43907: PPUSH
43908: LD_VAR 0 4
43912: PPUSH
43913: LD_VAR 0 9
43917: PPUSH
43918: CALL_OW 440
43922: NOT
43923: AND
43924: IFFALSE 43928
// exit ;
43926: GO 43936
// result := true ;
43928: LD_ADDR_VAR 0 6
43932: PUSH
43933: LD_INT 1
43935: ST_TO_ADDR
// end ;
43936: LD_VAR 0 6
43940: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43941: LD_INT 0
43943: PPUSH
43944: PPUSH
43945: PPUSH
43946: PPUSH
43947: PPUSH
43948: PPUSH
43949: PPUSH
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
43962: PPUSH
43963: PPUSH
43964: PPUSH
43965: PPUSH
43966: PPUSH
43967: PPUSH
43968: PPUSH
43969: PPUSH
43970: PPUSH
43971: PPUSH
43972: PPUSH
43973: PPUSH
43974: PPUSH
43975: PPUSH
43976: PPUSH
43977: PPUSH
43978: PPUSH
43979: PPUSH
43980: PPUSH
43981: PPUSH
43982: PPUSH
43983: PPUSH
43984: PPUSH
43985: PPUSH
43986: PPUSH
43987: PPUSH
43988: PPUSH
43989: PPUSH
43990: PPUSH
43991: PPUSH
43992: PPUSH
43993: PPUSH
43994: PPUSH
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
44000: PPUSH
// result = [ ] ;
44001: LD_ADDR_VAR 0 7
44005: PUSH
44006: EMPTY
44007: ST_TO_ADDR
// temp_list = [ ] ;
44008: LD_ADDR_VAR 0 9
44012: PUSH
44013: EMPTY
44014: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44015: LD_VAR 0 4
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 2
44028: PUSH
44029: LD_INT 3
44031: PUSH
44032: LD_INT 4
44034: PUSH
44035: LD_INT 5
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: IN
44046: NOT
44047: PUSH
44048: LD_VAR 0 1
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: LD_INT 1
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: IN
44063: PUSH
44064: LD_VAR 0 5
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: LD_INT 3
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: LIST
44082: IN
44083: NOT
44084: AND
44085: OR
44086: IFFALSE 44090
// exit ;
44088: GO 62481
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44090: LD_VAR 0 1
44094: PUSH
44095: LD_INT 6
44097: PUSH
44098: LD_INT 7
44100: PUSH
44101: LD_INT 8
44103: PUSH
44104: LD_INT 13
44106: PUSH
44107: LD_INT 12
44109: PUSH
44110: LD_INT 15
44112: PUSH
44113: LD_INT 11
44115: PUSH
44116: LD_INT 14
44118: PUSH
44119: LD_INT 10
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: IN
44133: IFFALSE 44143
// btype = b_lab ;
44135: LD_ADDR_VAR 0 1
44139: PUSH
44140: LD_INT 6
44142: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44143: LD_VAR 0 6
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: LIST
44161: IN
44162: NOT
44163: PUSH
44164: LD_VAR 0 1
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 3
44180: PUSH
44181: LD_INT 6
44183: PUSH
44184: LD_INT 36
44186: PUSH
44187: LD_INT 4
44189: PUSH
44190: LD_INT 5
44192: PUSH
44193: LD_INT 31
44195: PUSH
44196: LD_INT 32
44198: PUSH
44199: LD_INT 33
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: IN
44215: NOT
44216: PUSH
44217: LD_VAR 0 6
44221: PUSH
44222: LD_INT 1
44224: EQUAL
44225: AND
44226: OR
44227: PUSH
44228: LD_VAR 0 1
44232: PUSH
44233: LD_INT 2
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: IN
44243: NOT
44244: PUSH
44245: LD_VAR 0 6
44249: PUSH
44250: LD_INT 2
44252: EQUAL
44253: AND
44254: OR
44255: IFFALSE 44265
// mode = 0 ;
44257: LD_ADDR_VAR 0 6
44261: PUSH
44262: LD_INT 0
44264: ST_TO_ADDR
// case mode of 0 :
44265: LD_VAR 0 6
44269: PUSH
44270: LD_INT 0
44272: DOUBLE
44273: EQUAL
44274: IFTRUE 44278
44276: GO 55731
44278: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44279: LD_ADDR_VAR 0 11
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 0
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 0
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 1
44337: NEG
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 1
44348: NEG
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 0
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: PUSH
44395: LD_INT 2
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 3
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: NEG
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44472: LD_ADDR_VAR 0 12
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 0
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 1
44556: NEG
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 2
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 3
44629: NEG
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44668: LD_ADDR_VAR 0 13
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: LD_INT 0
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 0
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 1
44726: NEG
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: LD_INT 2
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 1
44781: PUSH
44782: LD_INT 2
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 2
44791: NEG
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: LD_INT 2
44807: NEG
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 3
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 3
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 3
44839: NEG
44840: PUSH
44841: LD_INT 3
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44867: LD_ADDR_VAR 0 14
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 0
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 0
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: NEG
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 3
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 3
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45063: LD_ADDR_VAR 0 15
45067: PUSH
45068: LD_INT 0
45070: PUSH
45071: LD_INT 0
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 0
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 1
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 2
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 2
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 3
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45256: LD_ADDR_VAR 0 16
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 2
45359: PUSH
45360: LD_INT 2
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 2
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: NEG
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 3
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45449: LD_ADDR_VAR 0 17
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 2
45545: NEG
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: LD_INT 0
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: LD_INT 1
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: NEG
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45679: LD_ADDR_VAR 0 18
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: LD_INT 1
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 1
45737: NEG
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 1
45752: NEG
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 0
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 2
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 0
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 2
45855: NEG
45856: PUSH
45857: LD_INT 0
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 2
45866: NEG
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 2
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45909: LD_ADDR_VAR 0 19
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: LD_INT 1
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: LD_INT 2
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 2
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 2
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 0
46064: PUSH
46065: LD_INT 2
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 2
46085: NEG
46086: PUSH
46087: LD_INT 0
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: NEG
46097: PUSH
46098: LD_INT 1
46100: NEG
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 2
46108: NEG
46109: PUSH
46110: LD_INT 2
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46139: LD_ADDR_VAR 0 20
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 0
46156: PUSH
46157: LD_INT 1
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: LD_INT 1
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: NEG
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 2
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46369: LD_ADDR_VAR 0 21
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 1
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: NEG
46439: PUSH
46440: LD_INT 1
46442: NEG
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: NEG
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 2
46465: NEG
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 2
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 2
46504: PUSH
46505: LD_INT 2
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 2
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 2
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: NEG
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46599: LD_ADDR_VAR 0 22
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: LD_INT 1
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: LD_INT 1
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: LD_INT 1
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 0
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 2
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 2
46734: PUSH
46735: LD_INT 2
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 1
46744: PUSH
46745: LD_INT 2
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 2
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46829: LD_ADDR_VAR 0 23
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 1
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: NEG
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 0
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: LD_INT 2
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 2
47040: NEG
47041: PUSH
47042: LD_INT 3
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 1
47052: NEG
47053: PUSH
47054: LD_INT 3
47056: NEG
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47109: LD_ADDR_VAR 0 24
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 2
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 0
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 2
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47385: LD_ADDR_VAR 0 25
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 1
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 1
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: LD_INT 1
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 0
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: PUSH
47511: LD_INT 1
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 2
47520: PUSH
47521: LD_INT 2
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: LD_INT 1
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: LD_INT 0
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 2
47572: NEG
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 3
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47659: LD_ADDR_VAR 0 26
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 0
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: LD_INT 1
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 2
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 1
47804: PUSH
47805: LD_INT 2
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 3
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 1
47880: PUSH
47881: LD_INT 3
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: NEG
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47935: LD_ADDR_VAR 0 27
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: LD_INT 1
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: NEG
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: LD_INT 2
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 1
48042: NEG
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 2
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 1
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: PUSH
48071: LD_INT 2
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 0
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 1
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 0
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 2
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: NEG
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 2
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 3
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 3
48180: NEG
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48215: LD_ADDR_VAR 0 28
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 1
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: EMPTY
48279: LIST
48280: LIST
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 2
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 0
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: LD_INT 0
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 2
48402: NEG
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 2
48414: NEG
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: LD_INT 3
48430: NEG
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: LD_INT 3
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: NEG
48451: PUSH
48452: LD_INT 1
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 3
48462: NEG
48463: PUSH
48464: LD_INT 2
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48497: LD_ADDR_VAR 0 29
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: LD_INT 2
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: LD_INT 1
48667: NEG
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 2
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 3
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 3
48741: NEG
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48776: LD_ADDR_VAR 0 30
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: LD_INT 1
48834: NEG
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 2
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 2
48891: PUSH
48892: LD_INT 0
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: LD_INT 1
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: LD_INT 2
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 2
48953: NEG
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 3
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 3
48988: PUSH
48989: LD_INT 2
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 3
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49054: LD_ADDR_VAR 0 31
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 0
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: NEG
49113: PUSH
49114: LD_INT 0
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 2
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: LD_INT 1
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: NEG
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: NEG
49244: PUSH
49245: LD_INT 3
49247: NEG
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 3
49297: NEG
49298: PUSH
49299: LD_INT 2
49301: NEG
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49332: LD_ADDR_VAR 0 32
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 0
49380: PUSH
49381: LD_INT 1
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: NEG
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 3
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 3
49575: NEG
49576: PUSH
49577: LD_INT 1
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49610: LD_ADDR_VAR 0 33
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: LD_INT 1
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: LD_INT 0
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: NEG
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 2
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: NEG
49801: PUSH
49802: LD_INT 3
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 3
49823: PUSH
49824: LD_INT 1
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 3
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 3
49854: NEG
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49889: LD_ADDR_VAR 0 34
49893: PUSH
49894: LD_INT 0
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: LD_INT 1
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 1
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 2
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 0
49982: PUSH
49983: LD_INT 2
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 2
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 2
50045: NEG
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: LD_INT 2
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 3
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: LD_INT 2
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50169: LD_ADDR_VAR 0 35
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: LD_INT 1
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: LD_INT 1
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 2
50260: NEG
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50281: LD_ADDR_VAR 0 36
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: NEG
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50393: LD_ADDR_VAR 0 37
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50505: LD_ADDR_VAR 0 38
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 1
50525: NEG
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50617: LD_ADDR_VAR 0 39
50621: PUSH
50622: LD_INT 0
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 0
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: NEG
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 2
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50729: LD_ADDR_VAR 0 40
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: LD_INT 0
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 0
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: NEG
50788: PUSH
50789: LD_INT 0
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50841: LD_ADDR_VAR 0 41
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 3
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: LD_INT 2
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 3
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: NEG
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 1
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 2
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51191: LD_ADDR_VAR 0 42
51195: PUSH
51196: LD_INT 0
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: LD_INT 1
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 0
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: LD_INT 2
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 0
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: NEG
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 2
51357: NEG
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 2
51369: NEG
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 3
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 3
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 3
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 3
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: LD_INT 3
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: NEG
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 3
51488: NEG
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 3
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51541: LD_ADDR_VAR 0 43
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 0
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 1
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 1
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 3
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 0
51742: PUSH
51743: LD_INT 3
51745: NEG
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 3
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 3
51837: NEG
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: LD_INT 1
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51889: LD_ADDR_VAR 0 44
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 0
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: NEG
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 3
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 3
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52239: LD_ADDR_VAR 0 45
52243: PUSH
52244: LD_INT 0
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 1
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 0
52287: PUSH
52288: LD_INT 1
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 1
52297: NEG
52298: PUSH
52299: LD_INT 0
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 2
52335: NEG
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 2
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 2
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 2
52405: NEG
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 2
52417: NEG
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: NEG
52430: PUSH
52431: LD_INT 3
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 3
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 0
52453: PUSH
52454: LD_INT 3
52456: NEG
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 3
52475: PUSH
52476: LD_INT 2
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 3
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 3
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 3
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 1
52525: NEG
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 3
52536: NEG
52537: PUSH
52538: LD_INT 2
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 3
52548: NEG
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52589: LD_ADDR_VAR 0 46
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 2
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 2
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 2
52755: NEG
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: NEG
52767: PUSH
52768: LD_INT 1
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 3
52782: NEG
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 3
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: LD_INT 2
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 1
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 3
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 3
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 1
52863: NEG
52864: PUSH
52865: LD_INT 2
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 3
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52937: LD_ADDR_VAR 0 47
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: NEG
52996: PUSH
52997: LD_INT 0
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: NEG
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: LD_INT 2
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: NEG
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 2
53064: NEG
53065: PUSH
53066: LD_INT 2
53068: NEG
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53088: LD_ADDR_VAR 0 48
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53235: LD_ADDR_VAR 0 49
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: LD_INT 1
53319: NEG
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 2
53337: PUSH
53338: LD_INT 1
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 2
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53379: LD_ADDR_VAR 0 50
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 0
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53523: LD_ADDR_VAR 0 51
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 0
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: NEG
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53670: LD_ADDR_VAR 0 52
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 1
53763: NEG
53764: PUSH
53765: LD_INT 1
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53821: LD_ADDR_VAR 0 53
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: LD_INT 2
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 0
53914: PUSH
53915: LD_INT 2
53917: NEG
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 1
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: LD_INT 0
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: NEG
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54051: LD_ADDR_VAR 0 54
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54281: LD_ADDR_VAR 0 55
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54511: LD_ADDR_VAR 0 56
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54741: LD_ADDR_VAR 0 57
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54971: LD_ADDR_VAR 0 58
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55201: LD_ADDR_VAR 0 59
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55289: LD_ADDR_VAR 0 60
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 1
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: LD_INT 0
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55377: LD_ADDR_VAR 0 61
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 0
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 0
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: NEG
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: LD_INT 1
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55465: LD_ADDR_VAR 0 62
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55553: LD_ADDR_VAR 0 63
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 1
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55641: LD_ADDR_VAR 0 64
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 1
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: LD_INT 1
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: ST_TO_ADDR
// end ; 1 :
55729: GO 61626
55731: LD_INT 1
55733: DOUBLE
55734: EQUAL
55735: IFTRUE 55739
55737: GO 58362
55739: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55740: LD_ADDR_VAR 0 11
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 3
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 3
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 2
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55784: LD_ADDR_VAR 0 12
55788: PUSH
55789: LD_INT 2
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 3
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55825: LD_ADDR_VAR 0 13
55829: PUSH
55830: LD_INT 3
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 3
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: LIST
55864: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55865: LD_ADDR_VAR 0 14
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55906: LD_ADDR_VAR 0 15
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: NEG
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: LIST
55949: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55950: LD_ADDR_VAR 0 16
55954: PUSH
55955: LD_INT 2
55957: NEG
55958: PUSH
55959: LD_INT 3
55961: NEG
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 3
55969: NEG
55970: PUSH
55971: LD_INT 2
55973: NEG
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: LD_INT 3
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55996: LD_ADDR_VAR 0 17
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 3
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: LIST
56039: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56040: LD_ADDR_VAR 0 18
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56081: LD_ADDR_VAR 0 19
56085: PUSH
56086: LD_INT 3
56088: PUSH
56089: LD_INT 2
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: LD_INT 3
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 3
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: LIST
56120: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56121: LD_ADDR_VAR 0 20
56125: PUSH
56126: LD_INT 1
56128: PUSH
56129: LD_INT 3
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: LD_INT 3
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56162: LD_ADDR_VAR 0 21
56166: PUSH
56167: LD_INT 2
56169: NEG
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 3
56180: NEG
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56206: LD_ADDR_VAR 0 22
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 3
56225: NEG
56226: PUSH
56227: LD_INT 2
56229: NEG
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 3
56237: NEG
56238: PUSH
56239: LD_INT 3
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: LIST
56251: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56252: LD_ADDR_VAR 0 23
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 3
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 4
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: LD_INT 3
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56296: LD_ADDR_VAR 0 24
56300: PUSH
56301: LD_INT 3
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 4
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56337: LD_ADDR_VAR 0 25
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: LD_INT 3
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 4
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: LD_INT 4
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56377: LD_ADDR_VAR 0 26
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: LD_INT 3
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56418: LD_ADDR_VAR 0 27
56422: PUSH
56423: LD_INT 3
56425: NEG
56426: PUSH
56427: LD_INT 0
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56462: LD_ADDR_VAR 0 28
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: LD_INT 3
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 3
56481: NEG
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 4
56493: NEG
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56508: LD_ADDR_VAR 0 29
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 3
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 0
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: PUSH
56539: LD_INT 2
56541: NEG
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 4
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 4
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: LD_INT 5
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 5
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: LD_INT 4
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 6
56621: NEG
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 6
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: LD_INT 5
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56663: LD_ADDR_VAR 0 30
56667: PUSH
56668: LD_INT 2
56670: PUSH
56671: LD_INT 1
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 1
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 3
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 4
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 4
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 4
56732: PUSH
56733: LD_INT 1
56735: NEG
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 5
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 5
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 5
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 6
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 6
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56806: LD_ADDR_VAR 0 31
56810: PUSH
56811: LD_INT 3
56813: PUSH
56814: LD_INT 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: PUSH
56824: LD_INT 3
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 2
56833: PUSH
56834: LD_INT 3
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 4
56843: PUSH
56844: LD_INT 3
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 4
56853: PUSH
56854: LD_INT 4
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 3
56863: PUSH
56864: LD_INT 4
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 5
56873: PUSH
56874: LD_INT 4
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 5
56883: PUSH
56884: LD_INT 5
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 4
56893: PUSH
56894: LD_INT 5
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 6
56903: PUSH
56904: LD_INT 5
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 6
56913: PUSH
56914: LD_INT 6
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 5
56923: PUSH
56924: LD_INT 6
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56945: LD_ADDR_VAR 0 32
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 4
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 1
57003: NEG
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 5
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 5
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 6
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 6
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 5
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57088: LD_ADDR_VAR 0 33
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 4
57140: NEG
57141: PUSH
57142: LD_INT 0
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 4
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 4
57163: NEG
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 5
57174: NEG
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 5
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 5
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 6
57208: NEG
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 6
57219: NEG
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57243: LD_ADDR_VAR 0 34
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 3
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: LD_INT 4
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 4
57298: NEG
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 4
57310: NEG
57311: PUSH
57312: LD_INT 4
57314: NEG
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 4
57322: NEG
57323: PUSH
57324: LD_INT 5
57326: NEG
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: LD_INT 5
57334: NEG
57335: PUSH
57336: LD_INT 4
57338: NEG
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 5
57346: NEG
57347: PUSH
57348: LD_INT 5
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 5
57358: NEG
57359: PUSH
57360: LD_INT 6
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 6
57370: NEG
57371: PUSH
57372: LD_INT 5
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 6
57382: NEG
57383: PUSH
57384: LD_INT 6
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57406: LD_ADDR_VAR 0 41
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 3
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57450: LD_ADDR_VAR 0 42
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: LD_INT 0
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 2
57467: PUSH
57468: LD_INT 1
57470: NEG
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 1
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57491: LD_ADDR_VAR 0 43
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: LIST
57530: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57531: LD_ADDR_VAR 0 44
57535: PUSH
57536: LD_INT 0
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 1
57548: PUSH
57549: LD_INT 3
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57572: LD_ADDR_VAR 0 45
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: LD_INT 1
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 3
57601: NEG
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: LIST
57615: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57616: LD_ADDR_VAR 0 46
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: LD_INT 3
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 3
57647: NEG
57648: PUSH
57649: LD_INT 2
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57662: LD_ADDR_VAR 0 47
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: LD_INT 3
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57695: LD_ADDR_VAR 0 48
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 2
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57726: LD_ADDR_VAR 0 49
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57755: LD_ADDR_VAR 0 50
57759: PUSH
57760: LD_INT 2
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 3
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57784: LD_ADDR_VAR 0 51
57788: PUSH
57789: LD_INT 1
57791: NEG
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57815: LD_ADDR_VAR 0 52
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: LD_INT 1
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: NEG
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57848: LD_ADDR_VAR 0 53
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: LD_INT 3
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 3
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 2
57881: NEG
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57892: LD_ADDR_VAR 0 54
57896: PUSH
57897: LD_INT 2
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: LD_INT 0
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 3
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57933: LD_ADDR_VAR 0 55
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: LD_INT 2
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 3
57950: PUSH
57951: LD_INT 3
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 3
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57973: LD_ADDR_VAR 0 56
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: LIST
58013: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58014: LD_ADDR_VAR 0 57
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 3
58032: NEG
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 3
58043: NEG
58044: PUSH
58045: LD_INT 1
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: LIST
58057: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58058: LD_ADDR_VAR 0 58
58062: PUSH
58063: LD_INT 2
58065: NEG
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: NEG
58090: PUSH
58091: LD_INT 3
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: LIST
58103: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58104: LD_ADDR_VAR 0 59
58108: PUSH
58109: LD_INT 1
58111: NEG
58112: PUSH
58113: LD_INT 2
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 2
58126: NEG
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58148: LD_ADDR_VAR 0 60
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58189: LD_ADDR_VAR 0 61
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 1
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 2
58206: PUSH
58207: LD_INT 2
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 2
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: LIST
58228: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58229: LD_ADDR_VAR 0 62
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: LIST
58269: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58270: LD_ADDR_VAR 0 63
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 2
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58314: LD_ADDR_VAR 0 64
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: NEG
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: LIST
58359: ST_TO_ADDR
// end ; 2 :
58360: GO 61626
58362: LD_INT 2
58364: DOUBLE
58365: EQUAL
58366: IFTRUE 58370
58368: GO 61625
58370: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58371: LD_ADDR_VAR 0 29
58375: PUSH
58376: LD_INT 4
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 4
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 5
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 5
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 4
58419: PUSH
58420: LD_INT 1
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 3
58439: PUSH
58440: LD_INT 1
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: LD_INT 2
58453: NEG
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 5
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 3
58471: PUSH
58472: LD_INT 3
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 3
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 4
58491: PUSH
58492: LD_INT 3
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 4
58501: PUSH
58502: LD_INT 4
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: LD_INT 4
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: LD_INT 3
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 4
58541: PUSH
58542: LD_INT 2
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 0
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: LD_INT 4
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 5
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 0
58601: PUSH
58602: LD_INT 5
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: LD_INT 4
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 3
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 2
58633: PUSH
58634: LD_INT 5
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: NEG
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 3
58654: NEG
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 3
58699: NEG
58700: PUSH
58701: LD_INT 1
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 4
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 2
58745: NEG
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 4
58756: NEG
58757: PUSH
58758: LD_INT 4
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 4
58768: NEG
58769: PUSH
58770: LD_INT 5
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: LD_INT 4
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: LD_INT 3
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 4
58804: NEG
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: LD_INT 4
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 5
58828: NEG
58829: PUSH
58830: LD_INT 5
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: LD_INT 5
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 5
58852: NEG
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58909: LD_ADDR_VAR 0 30
58913: PUSH
58914: LD_INT 4
58916: PUSH
58917: LD_INT 4
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: LD_INT 3
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: LD_INT 4
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 5
58946: PUSH
58947: LD_INT 5
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 4
58956: PUSH
58957: LD_INT 5
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: LD_INT 4
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: LD_INT 3
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 5
58986: PUSH
58987: LD_INT 3
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: LD_INT 5
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 3
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 3
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 0
59046: PUSH
59047: LD_INT 4
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 1
59056: NEG
59057: PUSH
59058: LD_INT 3
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 1
59067: NEG
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: PUSH
59079: LD_INT 4
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: LD_INT 2
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 4
59099: NEG
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 4
59110: NEG
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 3
59122: NEG
59123: PUSH
59124: LD_INT 0
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 4
59144: NEG
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 5
59155: NEG
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 5
59166: NEG
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 5
59178: NEG
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 3
59190: NEG
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: NEG
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: NEG
59214: PUSH
59215: LD_INT 4
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: NEG
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 2
59237: NEG
59238: PUSH
59239: LD_INT 2
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 3
59249: NEG
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 4
59261: NEG
59262: PUSH
59263: LD_INT 3
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 4
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 4
59289: NEG
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 4
59297: NEG
59298: PUSH
59299: LD_INT 2
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 4
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 5
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: LD_INT 4
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 1
59342: PUSH
59343: LD_INT 3
59345: NEG
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 0
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 4
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 5
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: PUSH
59389: LD_INT 3
59391: NEG
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: LD_INT 5
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: LIST
59448: LIST
59449: LIST
59450: LIST
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59456: LD_ADDR_VAR 0 31
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 4
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 0
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 4
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: LD_INT 5
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 0
59503: PUSH
59504: LD_INT 5
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: LD_INT 4
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: LD_INT 3
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: PUSH
59536: LD_INT 5
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 2
59545: NEG
59546: PUSH
59547: LD_INT 3
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 3
59556: NEG
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: NEG
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 4
59612: NEG
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 4
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 4
59635: NEG
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 2
59647: NEG
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 4
59670: NEG
59671: PUSH
59672: LD_INT 5
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: LD_INT 4
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 3
59694: NEG
59695: PUSH
59696: LD_INT 3
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 4
59706: NEG
59707: PUSH
59708: LD_INT 3
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: LD_INT 4
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: NEG
59731: PUSH
59732: LD_INT 5
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 5
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 5
59754: NEG
59755: PUSH
59756: LD_INT 3
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 0
59766: PUSH
59767: LD_INT 3
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: LD_INT 4
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 3
59791: NEG
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 2
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: NEG
59822: PUSH
59823: LD_INT 3
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 4
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 2
59856: NEG
59857: PUSH
59858: LD_INT 4
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 4
59868: PUSH
59869: LD_INT 0
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 4
59878: PUSH
59879: LD_INT 1
59881: NEG
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 5
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 5
59899: PUSH
59900: LD_INT 1
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 4
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 3
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 5
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60006: LD_ADDR_VAR 0 32
60010: PUSH
60011: LD_INT 4
60013: NEG
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 4
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 3
60036: NEG
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: NEG
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 5
60069: NEG
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 5
60080: NEG
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 5
60092: NEG
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 3
60104: NEG
60105: PUSH
60106: LD_INT 2
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 3
60115: NEG
60116: PUSH
60117: LD_INT 3
60119: NEG
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: NEG
60128: PUSH
60129: LD_INT 4
60131: NEG
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: EMPTY
60146: LIST
60147: LIST
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 3
60163: NEG
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 4
60175: NEG
60176: PUSH
60177: LD_INT 3
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 4
60187: NEG
60188: PUSH
60189: LD_INT 4
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 2
60199: NEG
60200: PUSH
60201: LD_INT 4
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 4
60211: NEG
60212: PUSH
60213: LD_INT 2
60215: NEG
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 5
60237: NEG
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 1
60245: PUSH
60246: LD_INT 4
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 0
60267: PUSH
60268: LD_INT 3
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: LD_INT 4
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 1
60290: NEG
60291: PUSH
60292: LD_INT 5
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 2
60302: PUSH
60303: LD_INT 3
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: LD_INT 5
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 3
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 3
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 4
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 2
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 2
60397: PUSH
60398: LD_INT 2
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: LD_INT 4
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 4
60428: PUSH
60429: LD_INT 3
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 5
60438: PUSH
60439: LD_INT 4
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PUSH
60446: LD_INT 5
60448: PUSH
60449: LD_INT 5
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 4
60458: PUSH
60459: LD_INT 5
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: LD_INT 4
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: LD_INT 3
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 5
60488: PUSH
60489: LD_INT 3
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: PUSH
60499: LD_INT 5
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60553: LD_ADDR_VAR 0 33
60557: PUSH
60558: LD_INT 4
60560: NEG
60561: PUSH
60562: LD_INT 4
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 4
60572: NEG
60573: PUSH
60574: LD_INT 5
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: LD_INT 4
60588: NEG
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 3
60596: NEG
60597: PUSH
60598: LD_INT 3
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 4
60608: NEG
60609: PUSH
60610: LD_INT 3
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 5
60620: NEG
60621: PUSH
60622: LD_INT 4
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 5
60632: NEG
60633: PUSH
60634: LD_INT 5
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 3
60644: NEG
60645: PUSH
60646: LD_INT 5
60648: NEG
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 5
60656: NEG
60657: PUSH
60658: LD_INT 3
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 0
60668: PUSH
60669: LD_INT 3
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: LD_INT 4
60682: NEG
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 1
60690: PUSH
60691: LD_INT 3
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 1
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 2
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 1
60723: NEG
60724: PUSH
60725: LD_INT 3
60727: NEG
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: LD_INT 4
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: LD_INT 2
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: LD_INT 4
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 4
60770: PUSH
60771: LD_INT 0
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 4
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 5
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 5
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 3
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 5
60853: PUSH
60854: LD_INT 2
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 3
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 3
60873: PUSH
60874: LD_INT 2
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 4
60883: PUSH
60884: LD_INT 3
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 4
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: LD_INT 2
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 4
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: LD_INT 4
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 3
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 5
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 5
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 4
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 1
61014: NEG
61015: PUSH
61016: LD_INT 3
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 2
61025: PUSH
61026: LD_INT 5
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 2
61035: NEG
61036: PUSH
61037: LD_INT 3
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61091: LD_ADDR_VAR 0 34
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 4
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: LD_INT 0
61109: PUSH
61110: LD_INT 5
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 4
61123: NEG
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 3
61134: NEG
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 3
61145: NEG
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: NEG
61154: PUSH
61155: LD_INT 4
61157: NEG
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 1
61165: NEG
61166: PUSH
61167: LD_INT 5
61169: NEG
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 5
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 3
61200: PUSH
61201: LD_INT 0
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 3
61210: PUSH
61211: LD_INT 1
61213: NEG
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 4
61221: PUSH
61222: LD_INT 0
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: LD_INT 0
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: LD_INT 2
61275: NEG
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 4
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 4
61293: PUSH
61294: LD_INT 4
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 4
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 5
61313: PUSH
61314: LD_INT 4
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 5
61323: PUSH
61324: LD_INT 5
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 4
61333: PUSH
61334: LD_INT 5
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: PUSH
61344: LD_INT 4
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: LD_INT 3
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 5
61363: PUSH
61364: LD_INT 3
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: LD_INT 5
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: LD_INT 0
61383: PUSH
61384: LD_INT 3
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PUSH
61391: LD_INT 0
61393: PUSH
61394: LD_INT 2
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 3
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: LD_INT 4
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 0
61423: PUSH
61424: LD_INT 4
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: LD_INT 3
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PUSH
61442: LD_INT 1
61444: NEG
61445: PUSH
61446: LD_INT 2
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: LD_INT 4
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 2
61465: NEG
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 4
61476: NEG
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 4
61487: NEG
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 3
61510: NEG
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 4
61521: NEG
61522: PUSH
61523: LD_INT 1
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 5
61532: NEG
61533: PUSH
61534: LD_INT 0
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 5
61543: NEG
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 5
61555: NEG
61556: PUSH
61557: LD_INT 2
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 3
61567: NEG
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: LIST
61621: LIST
61622: ST_TO_ADDR
// end ; end ;
61623: GO 61626
61625: POP
// case btype of b_depot , b_warehouse :
61626: LD_VAR 0 1
61630: PUSH
61631: LD_INT 0
61633: DOUBLE
61634: EQUAL
61635: IFTRUE 61645
61637: LD_INT 1
61639: DOUBLE
61640: EQUAL
61641: IFTRUE 61645
61643: GO 61846
61645: POP
// case nation of nation_american :
61646: LD_VAR 0 5
61650: PUSH
61651: LD_INT 1
61653: DOUBLE
61654: EQUAL
61655: IFTRUE 61659
61657: GO 61715
61659: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61660: LD_ADDR_VAR 0 9
61664: PUSH
61665: LD_VAR 0 11
61669: PUSH
61670: LD_VAR 0 12
61674: PUSH
61675: LD_VAR 0 13
61679: PUSH
61680: LD_VAR 0 14
61684: PUSH
61685: LD_VAR 0 15
61689: PUSH
61690: LD_VAR 0 16
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: PUSH
61703: LD_VAR 0 4
61707: PUSH
61708: LD_INT 1
61710: PLUS
61711: ARRAY
61712: ST_TO_ADDR
61713: GO 61844
61715: LD_INT 2
61717: DOUBLE
61718: EQUAL
61719: IFTRUE 61723
61721: GO 61779
61723: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61724: LD_ADDR_VAR 0 9
61728: PUSH
61729: LD_VAR 0 17
61733: PUSH
61734: LD_VAR 0 18
61738: PUSH
61739: LD_VAR 0 19
61743: PUSH
61744: LD_VAR 0 20
61748: PUSH
61749: LD_VAR 0 21
61753: PUSH
61754: LD_VAR 0 22
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: PUSH
61767: LD_VAR 0 4
61771: PUSH
61772: LD_INT 1
61774: PLUS
61775: ARRAY
61776: ST_TO_ADDR
61777: GO 61844
61779: LD_INT 3
61781: DOUBLE
61782: EQUAL
61783: IFTRUE 61787
61785: GO 61843
61787: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61788: LD_ADDR_VAR 0 9
61792: PUSH
61793: LD_VAR 0 23
61797: PUSH
61798: LD_VAR 0 24
61802: PUSH
61803: LD_VAR 0 25
61807: PUSH
61808: LD_VAR 0 26
61812: PUSH
61813: LD_VAR 0 27
61817: PUSH
61818: LD_VAR 0 28
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: PUSH
61831: LD_VAR 0 4
61835: PUSH
61836: LD_INT 1
61838: PLUS
61839: ARRAY
61840: ST_TO_ADDR
61841: GO 61844
61843: POP
61844: GO 62399
61846: LD_INT 2
61848: DOUBLE
61849: EQUAL
61850: IFTRUE 61860
61852: LD_INT 3
61854: DOUBLE
61855: EQUAL
61856: IFTRUE 61860
61858: GO 61916
61860: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61861: LD_ADDR_VAR 0 9
61865: PUSH
61866: LD_VAR 0 29
61870: PUSH
61871: LD_VAR 0 30
61875: PUSH
61876: LD_VAR 0 31
61880: PUSH
61881: LD_VAR 0 32
61885: PUSH
61886: LD_VAR 0 33
61890: PUSH
61891: LD_VAR 0 34
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: PUSH
61904: LD_VAR 0 4
61908: PUSH
61909: LD_INT 1
61911: PLUS
61912: ARRAY
61913: ST_TO_ADDR
61914: GO 62399
61916: LD_INT 16
61918: DOUBLE
61919: EQUAL
61920: IFTRUE 61978
61922: LD_INT 17
61924: DOUBLE
61925: EQUAL
61926: IFTRUE 61978
61928: LD_INT 18
61930: DOUBLE
61931: EQUAL
61932: IFTRUE 61978
61934: LD_INT 19
61936: DOUBLE
61937: EQUAL
61938: IFTRUE 61978
61940: LD_INT 22
61942: DOUBLE
61943: EQUAL
61944: IFTRUE 61978
61946: LD_INT 20
61948: DOUBLE
61949: EQUAL
61950: IFTRUE 61978
61952: LD_INT 21
61954: DOUBLE
61955: EQUAL
61956: IFTRUE 61978
61958: LD_INT 23
61960: DOUBLE
61961: EQUAL
61962: IFTRUE 61978
61964: LD_INT 24
61966: DOUBLE
61967: EQUAL
61968: IFTRUE 61978
61970: LD_INT 25
61972: DOUBLE
61973: EQUAL
61974: IFTRUE 61978
61976: GO 62034
61978: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61979: LD_ADDR_VAR 0 9
61983: PUSH
61984: LD_VAR 0 35
61988: PUSH
61989: LD_VAR 0 36
61993: PUSH
61994: LD_VAR 0 37
61998: PUSH
61999: LD_VAR 0 38
62003: PUSH
62004: LD_VAR 0 39
62008: PUSH
62009: LD_VAR 0 40
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: PUSH
62022: LD_VAR 0 4
62026: PUSH
62027: LD_INT 1
62029: PLUS
62030: ARRAY
62031: ST_TO_ADDR
62032: GO 62399
62034: LD_INT 6
62036: DOUBLE
62037: EQUAL
62038: IFTRUE 62090
62040: LD_INT 7
62042: DOUBLE
62043: EQUAL
62044: IFTRUE 62090
62046: LD_INT 8
62048: DOUBLE
62049: EQUAL
62050: IFTRUE 62090
62052: LD_INT 13
62054: DOUBLE
62055: EQUAL
62056: IFTRUE 62090
62058: LD_INT 12
62060: DOUBLE
62061: EQUAL
62062: IFTRUE 62090
62064: LD_INT 15
62066: DOUBLE
62067: EQUAL
62068: IFTRUE 62090
62070: LD_INT 11
62072: DOUBLE
62073: EQUAL
62074: IFTRUE 62090
62076: LD_INT 14
62078: DOUBLE
62079: EQUAL
62080: IFTRUE 62090
62082: LD_INT 10
62084: DOUBLE
62085: EQUAL
62086: IFTRUE 62090
62088: GO 62146
62090: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62091: LD_ADDR_VAR 0 9
62095: PUSH
62096: LD_VAR 0 41
62100: PUSH
62101: LD_VAR 0 42
62105: PUSH
62106: LD_VAR 0 43
62110: PUSH
62111: LD_VAR 0 44
62115: PUSH
62116: LD_VAR 0 45
62120: PUSH
62121: LD_VAR 0 46
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: PUSH
62134: LD_VAR 0 4
62138: PUSH
62139: LD_INT 1
62141: PLUS
62142: ARRAY
62143: ST_TO_ADDR
62144: GO 62399
62146: LD_INT 36
62148: DOUBLE
62149: EQUAL
62150: IFTRUE 62154
62152: GO 62210
62154: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62155: LD_ADDR_VAR 0 9
62159: PUSH
62160: LD_VAR 0 47
62164: PUSH
62165: LD_VAR 0 48
62169: PUSH
62170: LD_VAR 0 49
62174: PUSH
62175: LD_VAR 0 50
62179: PUSH
62180: LD_VAR 0 51
62184: PUSH
62185: LD_VAR 0 52
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: PUSH
62198: LD_VAR 0 4
62202: PUSH
62203: LD_INT 1
62205: PLUS
62206: ARRAY
62207: ST_TO_ADDR
62208: GO 62399
62210: LD_INT 4
62212: DOUBLE
62213: EQUAL
62214: IFTRUE 62236
62216: LD_INT 5
62218: DOUBLE
62219: EQUAL
62220: IFTRUE 62236
62222: LD_INT 34
62224: DOUBLE
62225: EQUAL
62226: IFTRUE 62236
62228: LD_INT 37
62230: DOUBLE
62231: EQUAL
62232: IFTRUE 62236
62234: GO 62292
62236: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62237: LD_ADDR_VAR 0 9
62241: PUSH
62242: LD_VAR 0 53
62246: PUSH
62247: LD_VAR 0 54
62251: PUSH
62252: LD_VAR 0 55
62256: PUSH
62257: LD_VAR 0 56
62261: PUSH
62262: LD_VAR 0 57
62266: PUSH
62267: LD_VAR 0 58
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: PUSH
62280: LD_VAR 0 4
62284: PUSH
62285: LD_INT 1
62287: PLUS
62288: ARRAY
62289: ST_TO_ADDR
62290: GO 62399
62292: LD_INT 31
62294: DOUBLE
62295: EQUAL
62296: IFTRUE 62342
62298: LD_INT 32
62300: DOUBLE
62301: EQUAL
62302: IFTRUE 62342
62304: LD_INT 33
62306: DOUBLE
62307: EQUAL
62308: IFTRUE 62342
62310: LD_INT 27
62312: DOUBLE
62313: EQUAL
62314: IFTRUE 62342
62316: LD_INT 26
62318: DOUBLE
62319: EQUAL
62320: IFTRUE 62342
62322: LD_INT 28
62324: DOUBLE
62325: EQUAL
62326: IFTRUE 62342
62328: LD_INT 29
62330: DOUBLE
62331: EQUAL
62332: IFTRUE 62342
62334: LD_INT 30
62336: DOUBLE
62337: EQUAL
62338: IFTRUE 62342
62340: GO 62398
62342: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62343: LD_ADDR_VAR 0 9
62347: PUSH
62348: LD_VAR 0 59
62352: PUSH
62353: LD_VAR 0 60
62357: PUSH
62358: LD_VAR 0 61
62362: PUSH
62363: LD_VAR 0 62
62367: PUSH
62368: LD_VAR 0 63
62372: PUSH
62373: LD_VAR 0 64
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: LD_VAR 0 4
62390: PUSH
62391: LD_INT 1
62393: PLUS
62394: ARRAY
62395: ST_TO_ADDR
62396: GO 62399
62398: POP
// temp_list2 = [ ] ;
62399: LD_ADDR_VAR 0 10
62403: PUSH
62404: EMPTY
62405: ST_TO_ADDR
// for i in temp_list do
62406: LD_ADDR_VAR 0 8
62410: PUSH
62411: LD_VAR 0 9
62415: PUSH
62416: FOR_IN
62417: IFFALSE 62469
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62419: LD_ADDR_VAR 0 10
62423: PUSH
62424: LD_VAR 0 10
62428: PUSH
62429: LD_VAR 0 8
62433: PUSH
62434: LD_INT 1
62436: ARRAY
62437: PUSH
62438: LD_VAR 0 2
62442: PLUS
62443: PUSH
62444: LD_VAR 0 8
62448: PUSH
62449: LD_INT 2
62451: ARRAY
62452: PUSH
62453: LD_VAR 0 3
62457: PLUS
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: EMPTY
62464: LIST
62465: ADD
62466: ST_TO_ADDR
62467: GO 62416
62469: POP
62470: POP
// result = temp_list2 ;
62471: LD_ADDR_VAR 0 7
62475: PUSH
62476: LD_VAR 0 10
62480: ST_TO_ADDR
// end ;
62481: LD_VAR 0 7
62485: RET
// export function EnemyInRange ( unit , dist ) ; begin
62486: LD_INT 0
62488: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62489: LD_ADDR_VAR 0 3
62493: PUSH
62494: LD_VAR 0 1
62498: PPUSH
62499: CALL_OW 255
62503: PPUSH
62504: LD_VAR 0 1
62508: PPUSH
62509: CALL_OW 250
62513: PPUSH
62514: LD_VAR 0 1
62518: PPUSH
62519: CALL_OW 251
62523: PPUSH
62524: LD_VAR 0 2
62528: PPUSH
62529: CALL 35882 0 4
62533: PUSH
62534: LD_INT 4
62536: ARRAY
62537: ST_TO_ADDR
// end ;
62538: LD_VAR 0 3
62542: RET
// export function PlayerSeeMe ( unit ) ; begin
62543: LD_INT 0
62545: PPUSH
// result := See ( your_side , unit ) ;
62546: LD_ADDR_VAR 0 2
62550: PUSH
62551: LD_OWVAR 2
62555: PPUSH
62556: LD_VAR 0 1
62560: PPUSH
62561: CALL_OW 292
62565: ST_TO_ADDR
// end ;
62566: LD_VAR 0 2
62570: RET
// export function ReverseDir ( unit ) ; begin
62571: LD_INT 0
62573: PPUSH
// if not unit then
62574: LD_VAR 0 1
62578: NOT
62579: IFFALSE 62583
// exit ;
62581: GO 62606
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62583: LD_ADDR_VAR 0 2
62587: PUSH
62588: LD_VAR 0 1
62592: PPUSH
62593: CALL_OW 254
62597: PUSH
62598: LD_INT 3
62600: PLUS
62601: PUSH
62602: LD_INT 6
62604: MOD
62605: ST_TO_ADDR
// end ;
62606: LD_VAR 0 2
62610: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62611: LD_INT 0
62613: PPUSH
62614: PPUSH
62615: PPUSH
62616: PPUSH
62617: PPUSH
// if not hexes then
62618: LD_VAR 0 2
62622: NOT
62623: IFFALSE 62627
// exit ;
62625: GO 62775
// dist := 9999 ;
62627: LD_ADDR_VAR 0 5
62631: PUSH
62632: LD_INT 9999
62634: ST_TO_ADDR
// for i = 1 to hexes do
62635: LD_ADDR_VAR 0 4
62639: PUSH
62640: DOUBLE
62641: LD_INT 1
62643: DEC
62644: ST_TO_ADDR
62645: LD_VAR 0 2
62649: PUSH
62650: FOR_TO
62651: IFFALSE 62763
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62653: LD_VAR 0 1
62657: PPUSH
62658: LD_VAR 0 2
62662: PUSH
62663: LD_VAR 0 4
62667: ARRAY
62668: PUSH
62669: LD_INT 1
62671: ARRAY
62672: PPUSH
62673: LD_VAR 0 2
62677: PUSH
62678: LD_VAR 0 4
62682: ARRAY
62683: PUSH
62684: LD_INT 2
62686: ARRAY
62687: PPUSH
62688: CALL_OW 297
62692: PUSH
62693: LD_VAR 0 5
62697: LESS
62698: IFFALSE 62761
// begin hex := hexes [ i ] ;
62700: LD_ADDR_VAR 0 7
62704: PUSH
62705: LD_VAR 0 2
62709: PUSH
62710: LD_VAR 0 4
62714: ARRAY
62715: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62716: LD_ADDR_VAR 0 5
62720: PUSH
62721: LD_VAR 0 1
62725: PPUSH
62726: LD_VAR 0 2
62730: PUSH
62731: LD_VAR 0 4
62735: ARRAY
62736: PUSH
62737: LD_INT 1
62739: ARRAY
62740: PPUSH
62741: LD_VAR 0 2
62745: PUSH
62746: LD_VAR 0 4
62750: ARRAY
62751: PUSH
62752: LD_INT 2
62754: ARRAY
62755: PPUSH
62756: CALL_OW 297
62760: ST_TO_ADDR
// end ; end ;
62761: GO 62650
62763: POP
62764: POP
// result := hex ;
62765: LD_ADDR_VAR 0 3
62769: PUSH
62770: LD_VAR 0 7
62774: ST_TO_ADDR
// end ;
62775: LD_VAR 0 3
62779: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62780: LD_INT 0
62782: PPUSH
62783: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62784: LD_VAR 0 1
62788: NOT
62789: PUSH
62790: LD_VAR 0 1
62794: PUSH
62795: LD_INT 21
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 23
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PPUSH
62819: CALL_OW 69
62823: IN
62824: NOT
62825: OR
62826: IFFALSE 62830
// exit ;
62828: GO 62877
// for i = 1 to 3 do
62830: LD_ADDR_VAR 0 3
62834: PUSH
62835: DOUBLE
62836: LD_INT 1
62838: DEC
62839: ST_TO_ADDR
62840: LD_INT 3
62842: PUSH
62843: FOR_TO
62844: IFFALSE 62875
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62846: LD_VAR 0 1
62850: PPUSH
62851: CALL_OW 250
62855: PPUSH
62856: LD_VAR 0 1
62860: PPUSH
62861: CALL_OW 251
62865: PPUSH
62866: LD_INT 1
62868: PPUSH
62869: CALL_OW 453
62873: GO 62843
62875: POP
62876: POP
// end ;
62877: LD_VAR 0 2
62881: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62882: LD_INT 0
62884: PPUSH
62885: PPUSH
62886: PPUSH
62887: PPUSH
62888: PPUSH
62889: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62890: LD_VAR 0 1
62894: NOT
62895: PUSH
62896: LD_VAR 0 2
62900: NOT
62901: OR
62902: PUSH
62903: LD_VAR 0 1
62907: PPUSH
62908: CALL_OW 314
62912: OR
62913: IFFALSE 62917
// exit ;
62915: GO 63358
// x := GetX ( enemy_unit ) ;
62917: LD_ADDR_VAR 0 7
62921: PUSH
62922: LD_VAR 0 2
62926: PPUSH
62927: CALL_OW 250
62931: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62932: LD_ADDR_VAR 0 8
62936: PUSH
62937: LD_VAR 0 2
62941: PPUSH
62942: CALL_OW 251
62946: ST_TO_ADDR
// if not x or not y then
62947: LD_VAR 0 7
62951: NOT
62952: PUSH
62953: LD_VAR 0 8
62957: NOT
62958: OR
62959: IFFALSE 62963
// exit ;
62961: GO 63358
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62963: LD_ADDR_VAR 0 6
62967: PUSH
62968: LD_VAR 0 7
62972: PPUSH
62973: LD_INT 0
62975: PPUSH
62976: LD_INT 4
62978: PPUSH
62979: CALL_OW 272
62983: PUSH
62984: LD_VAR 0 8
62988: PPUSH
62989: LD_INT 0
62991: PPUSH
62992: LD_INT 4
62994: PPUSH
62995: CALL_OW 273
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_VAR 0 7
63008: PPUSH
63009: LD_INT 1
63011: PPUSH
63012: LD_INT 4
63014: PPUSH
63015: CALL_OW 272
63019: PUSH
63020: LD_VAR 0 8
63024: PPUSH
63025: LD_INT 1
63027: PPUSH
63028: LD_INT 4
63030: PPUSH
63031: CALL_OW 273
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_VAR 0 7
63044: PPUSH
63045: LD_INT 2
63047: PPUSH
63048: LD_INT 4
63050: PPUSH
63051: CALL_OW 272
63055: PUSH
63056: LD_VAR 0 8
63060: PPUSH
63061: LD_INT 2
63063: PPUSH
63064: LD_INT 4
63066: PPUSH
63067: CALL_OW 273
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_VAR 0 7
63080: PPUSH
63081: LD_INT 3
63083: PPUSH
63084: LD_INT 4
63086: PPUSH
63087: CALL_OW 272
63091: PUSH
63092: LD_VAR 0 8
63096: PPUSH
63097: LD_INT 3
63099: PPUSH
63100: LD_INT 4
63102: PPUSH
63103: CALL_OW 273
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_VAR 0 7
63116: PPUSH
63117: LD_INT 4
63119: PPUSH
63120: LD_INT 4
63122: PPUSH
63123: CALL_OW 272
63127: PUSH
63128: LD_VAR 0 8
63132: PPUSH
63133: LD_INT 4
63135: PPUSH
63136: LD_INT 4
63138: PPUSH
63139: CALL_OW 273
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_VAR 0 7
63152: PPUSH
63153: LD_INT 5
63155: PPUSH
63156: LD_INT 4
63158: PPUSH
63159: CALL_OW 272
63163: PUSH
63164: LD_VAR 0 8
63168: PPUSH
63169: LD_INT 5
63171: PPUSH
63172: LD_INT 4
63174: PPUSH
63175: CALL_OW 273
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: ST_TO_ADDR
// for i = tmp downto 1 do
63192: LD_ADDR_VAR 0 4
63196: PUSH
63197: DOUBLE
63198: LD_VAR 0 6
63202: INC
63203: ST_TO_ADDR
63204: LD_INT 1
63206: PUSH
63207: FOR_DOWNTO
63208: IFFALSE 63309
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63210: LD_VAR 0 6
63214: PUSH
63215: LD_VAR 0 4
63219: ARRAY
63220: PUSH
63221: LD_INT 1
63223: ARRAY
63224: PPUSH
63225: LD_VAR 0 6
63229: PUSH
63230: LD_VAR 0 4
63234: ARRAY
63235: PUSH
63236: LD_INT 2
63238: ARRAY
63239: PPUSH
63240: CALL_OW 488
63244: NOT
63245: PUSH
63246: LD_VAR 0 6
63250: PUSH
63251: LD_VAR 0 4
63255: ARRAY
63256: PUSH
63257: LD_INT 1
63259: ARRAY
63260: PPUSH
63261: LD_VAR 0 6
63265: PUSH
63266: LD_VAR 0 4
63270: ARRAY
63271: PUSH
63272: LD_INT 2
63274: ARRAY
63275: PPUSH
63276: CALL_OW 428
63280: PUSH
63281: LD_INT 0
63283: NONEQUAL
63284: OR
63285: IFFALSE 63307
// tmp := Delete ( tmp , i ) ;
63287: LD_ADDR_VAR 0 6
63291: PUSH
63292: LD_VAR 0 6
63296: PPUSH
63297: LD_VAR 0 4
63301: PPUSH
63302: CALL_OW 3
63306: ST_TO_ADDR
63307: GO 63207
63309: POP
63310: POP
// j := GetClosestHex ( unit , tmp ) ;
63311: LD_ADDR_VAR 0 5
63315: PUSH
63316: LD_VAR 0 1
63320: PPUSH
63321: LD_VAR 0 6
63325: PPUSH
63326: CALL 62611 0 2
63330: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63331: LD_VAR 0 1
63335: PPUSH
63336: LD_VAR 0 5
63340: PUSH
63341: LD_INT 1
63343: ARRAY
63344: PPUSH
63345: LD_VAR 0 5
63349: PUSH
63350: LD_INT 2
63352: ARRAY
63353: PPUSH
63354: CALL_OW 111
// end ;
63358: LD_VAR 0 3
63362: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63363: LD_INT 0
63365: PPUSH
63366: PPUSH
63367: PPUSH
// uc_side = 0 ;
63368: LD_ADDR_OWVAR 20
63372: PUSH
63373: LD_INT 0
63375: ST_TO_ADDR
// uc_nation = 0 ;
63376: LD_ADDR_OWVAR 21
63380: PUSH
63381: LD_INT 0
63383: ST_TO_ADDR
// InitHc_All ( ) ;
63384: CALL_OW 584
// InitVc ;
63388: CALL_OW 20
// if mastodonts then
63392: LD_VAR 0 6
63396: IFFALSE 63463
// for i = 1 to mastodonts do
63398: LD_ADDR_VAR 0 11
63402: PUSH
63403: DOUBLE
63404: LD_INT 1
63406: DEC
63407: ST_TO_ADDR
63408: LD_VAR 0 6
63412: PUSH
63413: FOR_TO
63414: IFFALSE 63461
// begin vc_chassis := 31 ;
63416: LD_ADDR_OWVAR 37
63420: PUSH
63421: LD_INT 31
63423: ST_TO_ADDR
// vc_control := control_rider ;
63424: LD_ADDR_OWVAR 38
63428: PUSH
63429: LD_INT 4
63431: ST_TO_ADDR
// animal := CreateVehicle ;
63432: LD_ADDR_VAR 0 12
63436: PUSH
63437: CALL_OW 45
63441: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63442: LD_VAR 0 12
63446: PPUSH
63447: LD_VAR 0 8
63451: PPUSH
63452: LD_INT 0
63454: PPUSH
63455: CALL 65651 0 3
// end ;
63459: GO 63413
63461: POP
63462: POP
// if horses then
63463: LD_VAR 0 5
63467: IFFALSE 63534
// for i = 1 to horses do
63469: LD_ADDR_VAR 0 11
63473: PUSH
63474: DOUBLE
63475: LD_INT 1
63477: DEC
63478: ST_TO_ADDR
63479: LD_VAR 0 5
63483: PUSH
63484: FOR_TO
63485: IFFALSE 63532
// begin hc_class := 21 ;
63487: LD_ADDR_OWVAR 28
63491: PUSH
63492: LD_INT 21
63494: ST_TO_ADDR
// hc_gallery :=  ;
63495: LD_ADDR_OWVAR 33
63499: PUSH
63500: LD_STRING 
63502: ST_TO_ADDR
// animal := CreateHuman ;
63503: LD_ADDR_VAR 0 12
63507: PUSH
63508: CALL_OW 44
63512: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63513: LD_VAR 0 12
63517: PPUSH
63518: LD_VAR 0 8
63522: PPUSH
63523: LD_INT 0
63525: PPUSH
63526: CALL 65651 0 3
// end ;
63530: GO 63484
63532: POP
63533: POP
// if birds then
63534: LD_VAR 0 1
63538: IFFALSE 63605
// for i = 1 to birds do
63540: LD_ADDR_VAR 0 11
63544: PUSH
63545: DOUBLE
63546: LD_INT 1
63548: DEC
63549: ST_TO_ADDR
63550: LD_VAR 0 1
63554: PUSH
63555: FOR_TO
63556: IFFALSE 63603
// begin hc_class = 18 ;
63558: LD_ADDR_OWVAR 28
63562: PUSH
63563: LD_INT 18
63565: ST_TO_ADDR
// hc_gallery =  ;
63566: LD_ADDR_OWVAR 33
63570: PUSH
63571: LD_STRING 
63573: ST_TO_ADDR
// animal := CreateHuman ;
63574: LD_ADDR_VAR 0 12
63578: PUSH
63579: CALL_OW 44
63583: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63584: LD_VAR 0 12
63588: PPUSH
63589: LD_VAR 0 8
63593: PPUSH
63594: LD_INT 0
63596: PPUSH
63597: CALL 65651 0 3
// end ;
63601: GO 63555
63603: POP
63604: POP
// if tigers then
63605: LD_VAR 0 2
63609: IFFALSE 63693
// for i = 1 to tigers do
63611: LD_ADDR_VAR 0 11
63615: PUSH
63616: DOUBLE
63617: LD_INT 1
63619: DEC
63620: ST_TO_ADDR
63621: LD_VAR 0 2
63625: PUSH
63626: FOR_TO
63627: IFFALSE 63691
// begin hc_class = class_tiger ;
63629: LD_ADDR_OWVAR 28
63633: PUSH
63634: LD_INT 14
63636: ST_TO_ADDR
// hc_gallery =  ;
63637: LD_ADDR_OWVAR 33
63641: PUSH
63642: LD_STRING 
63644: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63645: LD_ADDR_OWVAR 35
63649: PUSH
63650: LD_INT 7
63652: NEG
63653: PPUSH
63654: LD_INT 7
63656: PPUSH
63657: CALL_OW 12
63661: ST_TO_ADDR
// animal := CreateHuman ;
63662: LD_ADDR_VAR 0 12
63666: PUSH
63667: CALL_OW 44
63671: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63672: LD_VAR 0 12
63676: PPUSH
63677: LD_VAR 0 8
63681: PPUSH
63682: LD_INT 0
63684: PPUSH
63685: CALL 65651 0 3
// end ;
63689: GO 63626
63691: POP
63692: POP
// if apemans then
63693: LD_VAR 0 3
63697: IFFALSE 63820
// for i = 1 to apemans do
63699: LD_ADDR_VAR 0 11
63703: PUSH
63704: DOUBLE
63705: LD_INT 1
63707: DEC
63708: ST_TO_ADDR
63709: LD_VAR 0 3
63713: PUSH
63714: FOR_TO
63715: IFFALSE 63818
// begin hc_class = class_apeman ;
63717: LD_ADDR_OWVAR 28
63721: PUSH
63722: LD_INT 12
63724: ST_TO_ADDR
// hc_gallery =  ;
63725: LD_ADDR_OWVAR 33
63729: PUSH
63730: LD_STRING 
63732: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63733: LD_ADDR_OWVAR 35
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PPUSH
63742: LD_INT 2
63744: PPUSH
63745: CALL_OW 12
63749: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63750: LD_ADDR_OWVAR 31
63754: PUSH
63755: LD_INT 1
63757: PPUSH
63758: LD_INT 3
63760: PPUSH
63761: CALL_OW 12
63765: PUSH
63766: LD_INT 1
63768: PPUSH
63769: LD_INT 3
63771: PPUSH
63772: CALL_OW 12
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: LD_INT 0
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: ST_TO_ADDR
// animal := CreateHuman ;
63789: LD_ADDR_VAR 0 12
63793: PUSH
63794: CALL_OW 44
63798: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63799: LD_VAR 0 12
63803: PPUSH
63804: LD_VAR 0 8
63808: PPUSH
63809: LD_INT 0
63811: PPUSH
63812: CALL 65651 0 3
// end ;
63816: GO 63714
63818: POP
63819: POP
// if enchidnas then
63820: LD_VAR 0 4
63824: IFFALSE 63891
// for i = 1 to enchidnas do
63826: LD_ADDR_VAR 0 11
63830: PUSH
63831: DOUBLE
63832: LD_INT 1
63834: DEC
63835: ST_TO_ADDR
63836: LD_VAR 0 4
63840: PUSH
63841: FOR_TO
63842: IFFALSE 63889
// begin hc_class = 13 ;
63844: LD_ADDR_OWVAR 28
63848: PUSH
63849: LD_INT 13
63851: ST_TO_ADDR
// hc_gallery =  ;
63852: LD_ADDR_OWVAR 33
63856: PUSH
63857: LD_STRING 
63859: ST_TO_ADDR
// animal := CreateHuman ;
63860: LD_ADDR_VAR 0 12
63864: PUSH
63865: CALL_OW 44
63869: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63870: LD_VAR 0 12
63874: PPUSH
63875: LD_VAR 0 8
63879: PPUSH
63880: LD_INT 0
63882: PPUSH
63883: CALL 65651 0 3
// end ;
63887: GO 63841
63889: POP
63890: POP
// if fishes then
63891: LD_VAR 0 7
63895: IFFALSE 63962
// for i = 1 to fishes do
63897: LD_ADDR_VAR 0 11
63901: PUSH
63902: DOUBLE
63903: LD_INT 1
63905: DEC
63906: ST_TO_ADDR
63907: LD_VAR 0 7
63911: PUSH
63912: FOR_TO
63913: IFFALSE 63960
// begin hc_class = 20 ;
63915: LD_ADDR_OWVAR 28
63919: PUSH
63920: LD_INT 20
63922: ST_TO_ADDR
// hc_gallery =  ;
63923: LD_ADDR_OWVAR 33
63927: PUSH
63928: LD_STRING 
63930: ST_TO_ADDR
// animal := CreateHuman ;
63931: LD_ADDR_VAR 0 12
63935: PUSH
63936: CALL_OW 44
63940: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63941: LD_VAR 0 12
63945: PPUSH
63946: LD_VAR 0 9
63950: PPUSH
63951: LD_INT 0
63953: PPUSH
63954: CALL 65651 0 3
// end ;
63958: GO 63912
63960: POP
63961: POP
// end ;
63962: LD_VAR 0 10
63966: RET
// export function WantHeal ( sci , unit ) ; begin
63967: LD_INT 0
63969: PPUSH
// if GetTaskList ( sci ) > 0 then
63970: LD_VAR 0 1
63974: PPUSH
63975: CALL_OW 437
63979: PUSH
63980: LD_INT 0
63982: GREATER
63983: IFFALSE 64053
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63985: LD_VAR 0 1
63989: PPUSH
63990: CALL_OW 437
63994: PUSH
63995: LD_INT 1
63997: ARRAY
63998: PUSH
63999: LD_INT 1
64001: ARRAY
64002: PUSH
64003: LD_STRING l
64005: EQUAL
64006: PUSH
64007: LD_VAR 0 1
64011: PPUSH
64012: CALL_OW 437
64016: PUSH
64017: LD_INT 1
64019: ARRAY
64020: PUSH
64021: LD_INT 4
64023: ARRAY
64024: PUSH
64025: LD_VAR 0 2
64029: EQUAL
64030: AND
64031: IFFALSE 64043
// result := true else
64033: LD_ADDR_VAR 0 3
64037: PUSH
64038: LD_INT 1
64040: ST_TO_ADDR
64041: GO 64051
// result := false ;
64043: LD_ADDR_VAR 0 3
64047: PUSH
64048: LD_INT 0
64050: ST_TO_ADDR
// end else
64051: GO 64061
// result := false ;
64053: LD_ADDR_VAR 0 3
64057: PUSH
64058: LD_INT 0
64060: ST_TO_ADDR
// end ;
64061: LD_VAR 0 3
64065: RET
// export function HealTarget ( sci ) ; begin
64066: LD_INT 0
64068: PPUSH
// if not sci then
64069: LD_VAR 0 1
64073: NOT
64074: IFFALSE 64078
// exit ;
64076: GO 64143
// result := 0 ;
64078: LD_ADDR_VAR 0 2
64082: PUSH
64083: LD_INT 0
64085: ST_TO_ADDR
// if GetTaskList ( sci ) then
64086: LD_VAR 0 1
64090: PPUSH
64091: CALL_OW 437
64095: IFFALSE 64143
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64097: LD_VAR 0 1
64101: PPUSH
64102: CALL_OW 437
64106: PUSH
64107: LD_INT 1
64109: ARRAY
64110: PUSH
64111: LD_INT 1
64113: ARRAY
64114: PUSH
64115: LD_STRING l
64117: EQUAL
64118: IFFALSE 64143
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64120: LD_ADDR_VAR 0 2
64124: PUSH
64125: LD_VAR 0 1
64129: PPUSH
64130: CALL_OW 437
64134: PUSH
64135: LD_INT 1
64137: ARRAY
64138: PUSH
64139: LD_INT 4
64141: ARRAY
64142: ST_TO_ADDR
// end ;
64143: LD_VAR 0 2
64147: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64148: LD_INT 0
64150: PPUSH
64151: PPUSH
64152: PPUSH
64153: PPUSH
// if not base_units then
64154: LD_VAR 0 1
64158: NOT
64159: IFFALSE 64163
// exit ;
64161: GO 64250
// result := false ;
64163: LD_ADDR_VAR 0 2
64167: PUSH
64168: LD_INT 0
64170: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64171: LD_ADDR_VAR 0 5
64175: PUSH
64176: LD_VAR 0 1
64180: PPUSH
64181: LD_INT 21
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PPUSH
64191: CALL_OW 72
64195: ST_TO_ADDR
// if not tmp then
64196: LD_VAR 0 5
64200: NOT
64201: IFFALSE 64205
// exit ;
64203: GO 64250
// for i in tmp do
64205: LD_ADDR_VAR 0 3
64209: PUSH
64210: LD_VAR 0 5
64214: PUSH
64215: FOR_IN
64216: IFFALSE 64248
// begin result := EnemyInRange ( i , 22 ) ;
64218: LD_ADDR_VAR 0 2
64222: PUSH
64223: LD_VAR 0 3
64227: PPUSH
64228: LD_INT 22
64230: PPUSH
64231: CALL 62486 0 2
64235: ST_TO_ADDR
// if result then
64236: LD_VAR 0 2
64240: IFFALSE 64246
// exit ;
64242: POP
64243: POP
64244: GO 64250
// end ;
64246: GO 64215
64248: POP
64249: POP
// end ;
64250: LD_VAR 0 2
64254: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64255: LD_INT 0
64257: PPUSH
64258: PPUSH
// if not units then
64259: LD_VAR 0 1
64263: NOT
64264: IFFALSE 64268
// exit ;
64266: GO 64338
// result := [ ] ;
64268: LD_ADDR_VAR 0 3
64272: PUSH
64273: EMPTY
64274: ST_TO_ADDR
// for i in units do
64275: LD_ADDR_VAR 0 4
64279: PUSH
64280: LD_VAR 0 1
64284: PUSH
64285: FOR_IN
64286: IFFALSE 64336
// if GetTag ( i ) = tag then
64288: LD_VAR 0 4
64292: PPUSH
64293: CALL_OW 110
64297: PUSH
64298: LD_VAR 0 2
64302: EQUAL
64303: IFFALSE 64334
// result := Insert ( result , result + 1 , i ) ;
64305: LD_ADDR_VAR 0 3
64309: PUSH
64310: LD_VAR 0 3
64314: PPUSH
64315: LD_VAR 0 3
64319: PUSH
64320: LD_INT 1
64322: PLUS
64323: PPUSH
64324: LD_VAR 0 4
64328: PPUSH
64329: CALL_OW 2
64333: ST_TO_ADDR
64334: GO 64285
64336: POP
64337: POP
// end ;
64338: LD_VAR 0 3
64342: RET
// export function IsDriver ( un ) ; begin
64343: LD_INT 0
64345: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64346: LD_ADDR_VAR 0 2
64350: PUSH
64351: LD_VAR 0 1
64355: PUSH
64356: LD_INT 55
64358: PUSH
64359: EMPTY
64360: LIST
64361: PPUSH
64362: CALL_OW 69
64366: IN
64367: ST_TO_ADDR
// end ;
64368: LD_VAR 0 2
64372: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64373: LD_INT 0
64375: PPUSH
64376: PPUSH
// list := [ ] ;
64377: LD_ADDR_VAR 0 5
64381: PUSH
64382: EMPTY
64383: ST_TO_ADDR
// case d of 0 :
64384: LD_VAR 0 3
64388: PUSH
64389: LD_INT 0
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64397
64395: GO 64530
64397: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64398: LD_ADDR_VAR 0 5
64402: PUSH
64403: LD_VAR 0 1
64407: PUSH
64408: LD_INT 4
64410: MINUS
64411: PUSH
64412: LD_VAR 0 2
64416: PUSH
64417: LD_INT 4
64419: MINUS
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: PUSH
64429: LD_VAR 0 1
64433: PUSH
64434: LD_INT 3
64436: MINUS
64437: PUSH
64438: LD_VAR 0 2
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: PUSH
64451: LD_VAR 0 1
64455: PUSH
64456: LD_INT 4
64458: PLUS
64459: PUSH
64460: LD_VAR 0 2
64464: PUSH
64465: LD_INT 4
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: LIST
64472: PUSH
64473: LD_VAR 0 1
64477: PUSH
64478: LD_INT 3
64480: PLUS
64481: PUSH
64482: LD_VAR 0 2
64486: PUSH
64487: LD_INT 3
64489: PLUS
64490: PUSH
64491: LD_INT 5
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: LIST
64498: PUSH
64499: LD_VAR 0 1
64503: PUSH
64504: LD_VAR 0 2
64508: PUSH
64509: LD_INT 4
64511: PLUS
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: LIST
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: ST_TO_ADDR
// end ; 1 :
64528: GO 65228
64530: LD_INT 1
64532: DOUBLE
64533: EQUAL
64534: IFTRUE 64538
64536: GO 64671
64538: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64539: LD_ADDR_VAR 0 5
64543: PUSH
64544: LD_VAR 0 1
64548: PUSH
64549: LD_VAR 0 2
64553: PUSH
64554: LD_INT 4
64556: MINUS
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: PUSH
64566: LD_VAR 0 1
64570: PUSH
64571: LD_INT 3
64573: MINUS
64574: PUSH
64575: LD_VAR 0 2
64579: PUSH
64580: LD_INT 3
64582: MINUS
64583: PUSH
64584: LD_INT 2
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: LIST
64591: PUSH
64592: LD_VAR 0 1
64596: PUSH
64597: LD_INT 4
64599: MINUS
64600: PUSH
64601: LD_VAR 0 2
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: LIST
64613: PUSH
64614: LD_VAR 0 1
64618: PUSH
64619: LD_VAR 0 2
64623: PUSH
64624: LD_INT 3
64626: PLUS
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: LIST
64635: PUSH
64636: LD_VAR 0 1
64640: PUSH
64641: LD_INT 4
64643: PLUS
64644: PUSH
64645: LD_VAR 0 2
64649: PUSH
64650: LD_INT 4
64652: PLUS
64653: PUSH
64654: LD_INT 5
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: LIST
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: ST_TO_ADDR
// end ; 2 :
64669: GO 65228
64671: LD_INT 2
64673: DOUBLE
64674: EQUAL
64675: IFTRUE 64679
64677: GO 64808
64679: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64680: LD_ADDR_VAR 0 5
64684: PUSH
64685: LD_VAR 0 1
64689: PUSH
64690: LD_VAR 0 2
64694: PUSH
64695: LD_INT 3
64697: MINUS
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: PUSH
64707: LD_VAR 0 1
64711: PUSH
64712: LD_INT 4
64714: PLUS
64715: PUSH
64716: LD_VAR 0 2
64720: PUSH
64721: LD_INT 4
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: PUSH
64729: LD_VAR 0 1
64733: PUSH
64734: LD_VAR 0 2
64738: PUSH
64739: LD_INT 4
64741: PLUS
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: LIST
64750: PUSH
64751: LD_VAR 0 1
64755: PUSH
64756: LD_INT 3
64758: MINUS
64759: PUSH
64760: LD_VAR 0 2
64764: PUSH
64765: LD_INT 1
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: LIST
64772: PUSH
64773: LD_VAR 0 1
64777: PUSH
64778: LD_INT 4
64780: MINUS
64781: PUSH
64782: LD_VAR 0 2
64786: PUSH
64787: LD_INT 4
64789: MINUS
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: LIST
64805: ST_TO_ADDR
// end ; 3 :
64806: GO 65228
64808: LD_INT 3
64810: DOUBLE
64811: EQUAL
64812: IFTRUE 64816
64814: GO 64949
64816: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64817: LD_ADDR_VAR 0 5
64821: PUSH
64822: LD_VAR 0 1
64826: PUSH
64827: LD_INT 3
64829: PLUS
64830: PUSH
64831: LD_VAR 0 2
64835: PUSH
64836: LD_INT 4
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: PUSH
64844: LD_VAR 0 1
64848: PUSH
64849: LD_INT 4
64851: PLUS
64852: PUSH
64853: LD_VAR 0 2
64857: PUSH
64858: LD_INT 4
64860: PLUS
64861: PUSH
64862: LD_INT 5
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: PUSH
64870: LD_VAR 0 1
64874: PUSH
64875: LD_INT 4
64877: MINUS
64878: PUSH
64879: LD_VAR 0 2
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: PUSH
64892: LD_VAR 0 1
64896: PUSH
64897: LD_VAR 0 2
64901: PUSH
64902: LD_INT 4
64904: MINUS
64905: PUSH
64906: LD_INT 3
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: LIST
64913: PUSH
64914: LD_VAR 0 1
64918: PUSH
64919: LD_INT 3
64921: MINUS
64922: PUSH
64923: LD_VAR 0 2
64927: PUSH
64928: LD_INT 3
64930: MINUS
64931: PUSH
64932: LD_INT 2
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: LIST
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: ST_TO_ADDR
// end ; 4 :
64947: GO 65228
64949: LD_INT 4
64951: DOUBLE
64952: EQUAL
64953: IFTRUE 64957
64955: GO 65090
64957: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64958: LD_ADDR_VAR 0 5
64962: PUSH
64963: LD_VAR 0 1
64967: PUSH
64968: LD_VAR 0 2
64972: PUSH
64973: LD_INT 4
64975: PLUS
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 3
64992: PLUS
64993: PUSH
64994: LD_VAR 0 2
64998: PUSH
64999: LD_INT 3
65001: PLUS
65002: PUSH
65003: LD_INT 5
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: LIST
65010: PUSH
65011: LD_VAR 0 1
65015: PUSH
65016: LD_INT 4
65018: PLUS
65019: PUSH
65020: LD_VAR 0 2
65024: PUSH
65025: LD_INT 4
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: LIST
65032: PUSH
65033: LD_VAR 0 1
65037: PUSH
65038: LD_VAR 0 2
65042: PUSH
65043: LD_INT 3
65045: MINUS
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: LIST
65054: PUSH
65055: LD_VAR 0 1
65059: PUSH
65060: LD_INT 4
65062: MINUS
65063: PUSH
65064: LD_VAR 0 2
65068: PUSH
65069: LD_INT 4
65071: MINUS
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: ST_TO_ADDR
// end ; 5 :
65088: GO 65228
65090: LD_INT 5
65092: DOUBLE
65093: EQUAL
65094: IFTRUE 65098
65096: GO 65227
65098: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65099: LD_ADDR_VAR 0 5
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 4
65111: MINUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: LD_VAR 0 1
65130: PUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_INT 4
65138: MINUS
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_INT 4
65155: PLUS
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 4
65164: PLUS
65165: PUSH
65166: LD_INT 5
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: LD_VAR 0 1
65178: PUSH
65179: LD_INT 3
65181: PLUS
65182: PUSH
65183: LD_VAR 0 2
65187: PUSH
65188: LD_INT 4
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: LIST
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: LD_VAR 0 2
65205: PUSH
65206: LD_INT 3
65208: PLUS
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: LIST
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: ST_TO_ADDR
// end ; end ;
65225: GO 65228
65227: POP
// result := list ;
65228: LD_ADDR_VAR 0 4
65232: PUSH
65233: LD_VAR 0 5
65237: ST_TO_ADDR
// end ;
65238: LD_VAR 0 4
65242: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65243: LD_INT 0
65245: PPUSH
65246: PPUSH
65247: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65248: LD_VAR 0 1
65252: NOT
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 2
65264: PUSH
65265: LD_INT 3
65267: PUSH
65268: LD_INT 4
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: IN
65277: NOT
65278: OR
65279: IFFALSE 65283
// exit ;
65281: GO 65375
// tmp := [ ] ;
65283: LD_ADDR_VAR 0 5
65287: PUSH
65288: EMPTY
65289: ST_TO_ADDR
// for i in units do
65290: LD_ADDR_VAR 0 4
65294: PUSH
65295: LD_VAR 0 1
65299: PUSH
65300: FOR_IN
65301: IFFALSE 65344
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65303: LD_ADDR_VAR 0 5
65307: PUSH
65308: LD_VAR 0 5
65312: PPUSH
65313: LD_VAR 0 5
65317: PUSH
65318: LD_INT 1
65320: PLUS
65321: PPUSH
65322: LD_VAR 0 4
65326: PPUSH
65327: LD_VAR 0 2
65331: PPUSH
65332: CALL_OW 259
65336: PPUSH
65337: CALL_OW 2
65341: ST_TO_ADDR
65342: GO 65300
65344: POP
65345: POP
// if not tmp then
65346: LD_VAR 0 5
65350: NOT
65351: IFFALSE 65355
// exit ;
65353: GO 65375
// result := SortListByListDesc ( units , tmp ) ;
65355: LD_ADDR_VAR 0 3
65359: PUSH
65360: LD_VAR 0 1
65364: PPUSH
65365: LD_VAR 0 5
65369: PPUSH
65370: CALL_OW 77
65374: ST_TO_ADDR
// end ;
65375: LD_VAR 0 3
65379: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65380: LD_INT 0
65382: PPUSH
65383: PPUSH
65384: PPUSH
// result := false ;
65385: LD_ADDR_VAR 0 3
65389: PUSH
65390: LD_INT 0
65392: ST_TO_ADDR
// x := GetX ( building ) ;
65393: LD_ADDR_VAR 0 4
65397: PUSH
65398: LD_VAR 0 2
65402: PPUSH
65403: CALL_OW 250
65407: ST_TO_ADDR
// y := GetY ( building ) ;
65408: LD_ADDR_VAR 0 5
65412: PUSH
65413: LD_VAR 0 2
65417: PPUSH
65418: CALL_OW 251
65422: ST_TO_ADDR
// if not building or not x or not y then
65423: LD_VAR 0 2
65427: NOT
65428: PUSH
65429: LD_VAR 0 4
65433: NOT
65434: OR
65435: PUSH
65436: LD_VAR 0 5
65440: NOT
65441: OR
65442: IFFALSE 65446
// exit ;
65444: GO 65538
// if GetTaskList ( unit ) then
65446: LD_VAR 0 1
65450: PPUSH
65451: CALL_OW 437
65455: IFFALSE 65538
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65457: LD_STRING e
65459: PUSH
65460: LD_VAR 0 1
65464: PPUSH
65465: CALL_OW 437
65469: PUSH
65470: LD_INT 1
65472: ARRAY
65473: PUSH
65474: LD_INT 1
65476: ARRAY
65477: EQUAL
65478: PUSH
65479: LD_VAR 0 4
65483: PUSH
65484: LD_VAR 0 1
65488: PPUSH
65489: CALL_OW 437
65493: PUSH
65494: LD_INT 1
65496: ARRAY
65497: PUSH
65498: LD_INT 2
65500: ARRAY
65501: EQUAL
65502: AND
65503: PUSH
65504: LD_VAR 0 5
65508: PUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: CALL_OW 437
65518: PUSH
65519: LD_INT 1
65521: ARRAY
65522: PUSH
65523: LD_INT 3
65525: ARRAY
65526: EQUAL
65527: AND
65528: IFFALSE 65538
// result := true end ;
65530: LD_ADDR_VAR 0 3
65534: PUSH
65535: LD_INT 1
65537: ST_TO_ADDR
// end ;
65538: LD_VAR 0 3
65542: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65543: LD_INT 0
65545: PPUSH
// result := false ;
65546: LD_ADDR_VAR 0 4
65550: PUSH
65551: LD_INT 0
65553: ST_TO_ADDR
// if GetTaskList ( unit ) then
65554: LD_VAR 0 1
65558: PPUSH
65559: CALL_OW 437
65563: IFFALSE 65646
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65565: LD_STRING M
65567: PUSH
65568: LD_VAR 0 1
65572: PPUSH
65573: CALL_OW 437
65577: PUSH
65578: LD_INT 1
65580: ARRAY
65581: PUSH
65582: LD_INT 1
65584: ARRAY
65585: EQUAL
65586: PUSH
65587: LD_VAR 0 2
65591: PUSH
65592: LD_VAR 0 1
65596: PPUSH
65597: CALL_OW 437
65601: PUSH
65602: LD_INT 1
65604: ARRAY
65605: PUSH
65606: LD_INT 2
65608: ARRAY
65609: EQUAL
65610: AND
65611: PUSH
65612: LD_VAR 0 3
65616: PUSH
65617: LD_VAR 0 1
65621: PPUSH
65622: CALL_OW 437
65626: PUSH
65627: LD_INT 1
65629: ARRAY
65630: PUSH
65631: LD_INT 3
65633: ARRAY
65634: EQUAL
65635: AND
65636: IFFALSE 65646
// result := true ;
65638: LD_ADDR_VAR 0 4
65642: PUSH
65643: LD_INT 1
65645: ST_TO_ADDR
// end ; end ;
65646: LD_VAR 0 4
65650: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65651: LD_INT 0
65653: PPUSH
65654: PPUSH
65655: PPUSH
65656: PPUSH
// if not unit or not area then
65657: LD_VAR 0 1
65661: NOT
65662: PUSH
65663: LD_VAR 0 2
65667: NOT
65668: OR
65669: IFFALSE 65673
// exit ;
65671: GO 65837
// tmp := AreaToList ( area , i ) ;
65673: LD_ADDR_VAR 0 6
65677: PUSH
65678: LD_VAR 0 2
65682: PPUSH
65683: LD_VAR 0 5
65687: PPUSH
65688: CALL_OW 517
65692: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65693: LD_ADDR_VAR 0 5
65697: PUSH
65698: DOUBLE
65699: LD_INT 1
65701: DEC
65702: ST_TO_ADDR
65703: LD_VAR 0 6
65707: PUSH
65708: LD_INT 1
65710: ARRAY
65711: PUSH
65712: FOR_TO
65713: IFFALSE 65835
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65715: LD_ADDR_VAR 0 7
65719: PUSH
65720: LD_VAR 0 6
65724: PUSH
65725: LD_INT 1
65727: ARRAY
65728: PUSH
65729: LD_VAR 0 5
65733: ARRAY
65734: PUSH
65735: LD_VAR 0 6
65739: PUSH
65740: LD_INT 2
65742: ARRAY
65743: PUSH
65744: LD_VAR 0 5
65748: ARRAY
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65754: LD_VAR 0 7
65758: PUSH
65759: LD_INT 1
65761: ARRAY
65762: PPUSH
65763: LD_VAR 0 7
65767: PUSH
65768: LD_INT 2
65770: ARRAY
65771: PPUSH
65772: CALL_OW 428
65776: PUSH
65777: LD_INT 0
65779: EQUAL
65780: IFFALSE 65833
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65782: LD_VAR 0 1
65786: PPUSH
65787: LD_VAR 0 7
65791: PUSH
65792: LD_INT 1
65794: ARRAY
65795: PPUSH
65796: LD_VAR 0 7
65800: PUSH
65801: LD_INT 2
65803: ARRAY
65804: PPUSH
65805: LD_VAR 0 3
65809: PPUSH
65810: CALL_OW 48
// result := IsPlaced ( unit ) ;
65814: LD_ADDR_VAR 0 4
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 305
65828: ST_TO_ADDR
// exit ;
65829: POP
65830: POP
65831: GO 65837
// end ; end ;
65833: GO 65712
65835: POP
65836: POP
// end ;
65837: LD_VAR 0 4
65841: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65842: LD_INT 0
65844: PPUSH
65845: PPUSH
65846: PPUSH
// if not side or side > 8 then
65847: LD_VAR 0 1
65851: NOT
65852: PUSH
65853: LD_VAR 0 1
65857: PUSH
65858: LD_INT 8
65860: GREATER
65861: OR
65862: IFFALSE 65866
// exit ;
65864: GO 66053
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65866: LD_ADDR_VAR 0 4
65870: PUSH
65871: LD_INT 22
65873: PUSH
65874: LD_VAR 0 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 21
65885: PUSH
65886: LD_INT 3
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PPUSH
65897: CALL_OW 69
65901: ST_TO_ADDR
// if not tmp then
65902: LD_VAR 0 4
65906: NOT
65907: IFFALSE 65911
// exit ;
65909: GO 66053
// enable_addtolog := true ;
65911: LD_ADDR_OWVAR 81
65915: PUSH
65916: LD_INT 1
65918: ST_TO_ADDR
// AddToLog ( [ ) ;
65919: LD_STRING [
65921: PPUSH
65922: CALL_OW 561
// for i in tmp do
65926: LD_ADDR_VAR 0 3
65930: PUSH
65931: LD_VAR 0 4
65935: PUSH
65936: FOR_IN
65937: IFFALSE 66044
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65939: LD_STRING [
65941: PUSH
65942: LD_VAR 0 3
65946: PPUSH
65947: CALL_OW 266
65951: STR
65952: PUSH
65953: LD_STRING , 
65955: STR
65956: PUSH
65957: LD_VAR 0 3
65961: PPUSH
65962: CALL_OW 250
65966: STR
65967: PUSH
65968: LD_STRING , 
65970: STR
65971: PUSH
65972: LD_VAR 0 3
65976: PPUSH
65977: CALL_OW 251
65981: STR
65982: PUSH
65983: LD_STRING , 
65985: STR
65986: PUSH
65987: LD_VAR 0 3
65991: PPUSH
65992: CALL_OW 254
65996: STR
65997: PUSH
65998: LD_STRING , 
66000: STR
66001: PUSH
66002: LD_VAR 0 3
66006: PPUSH
66007: LD_INT 1
66009: PPUSH
66010: CALL_OW 268
66014: STR
66015: PUSH
66016: LD_STRING , 
66018: STR
66019: PUSH
66020: LD_VAR 0 3
66024: PPUSH
66025: LD_INT 2
66027: PPUSH
66028: CALL_OW 268
66032: STR
66033: PUSH
66034: LD_STRING ],
66036: STR
66037: PPUSH
66038: CALL_OW 561
// end ;
66042: GO 65936
66044: POP
66045: POP
// AddToLog ( ]; ) ;
66046: LD_STRING ];
66048: PPUSH
66049: CALL_OW 561
// end ;
66053: LD_VAR 0 2
66057: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66058: LD_INT 0
66060: PPUSH
66061: PPUSH
66062: PPUSH
66063: PPUSH
66064: PPUSH
// if not area or not rate or not max then
66065: LD_VAR 0 1
66069: NOT
66070: PUSH
66071: LD_VAR 0 2
66075: NOT
66076: OR
66077: PUSH
66078: LD_VAR 0 4
66082: NOT
66083: OR
66084: IFFALSE 66088
// exit ;
66086: GO 66280
// while 1 do
66088: LD_INT 1
66090: IFFALSE 66280
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66092: LD_ADDR_VAR 0 9
66096: PUSH
66097: LD_VAR 0 1
66101: PPUSH
66102: LD_INT 1
66104: PPUSH
66105: CALL_OW 287
66109: PUSH
66110: LD_INT 10
66112: MUL
66113: ST_TO_ADDR
// r := rate / 10 ;
66114: LD_ADDR_VAR 0 7
66118: PUSH
66119: LD_VAR 0 2
66123: PUSH
66124: LD_INT 10
66126: DIVREAL
66127: ST_TO_ADDR
// time := 1 1$00 ;
66128: LD_ADDR_VAR 0 8
66132: PUSH
66133: LD_INT 2100
66135: ST_TO_ADDR
// if amount < min then
66136: LD_VAR 0 9
66140: PUSH
66141: LD_VAR 0 3
66145: LESS
66146: IFFALSE 66164
// r := r * 2 else
66148: LD_ADDR_VAR 0 7
66152: PUSH
66153: LD_VAR 0 7
66157: PUSH
66158: LD_INT 2
66160: MUL
66161: ST_TO_ADDR
66162: GO 66190
// if amount > max then
66164: LD_VAR 0 9
66168: PUSH
66169: LD_VAR 0 4
66173: GREATER
66174: IFFALSE 66190
// r := r / 2 ;
66176: LD_ADDR_VAR 0 7
66180: PUSH
66181: LD_VAR 0 7
66185: PUSH
66186: LD_INT 2
66188: DIVREAL
66189: ST_TO_ADDR
// time := time / r ;
66190: LD_ADDR_VAR 0 8
66194: PUSH
66195: LD_VAR 0 8
66199: PUSH
66200: LD_VAR 0 7
66204: DIVREAL
66205: ST_TO_ADDR
// if time < 0 then
66206: LD_VAR 0 8
66210: PUSH
66211: LD_INT 0
66213: LESS
66214: IFFALSE 66231
// time := time * - 1 ;
66216: LD_ADDR_VAR 0 8
66220: PUSH
66221: LD_VAR 0 8
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: MUL
66230: ST_TO_ADDR
// wait ( time ) ;
66231: LD_VAR 0 8
66235: PPUSH
66236: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66240: LD_INT 35
66242: PPUSH
66243: LD_INT 875
66245: PPUSH
66246: CALL_OW 12
66250: PPUSH
66251: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66255: LD_INT 1
66257: PPUSH
66258: LD_INT 5
66260: PPUSH
66261: CALL_OW 12
66265: PPUSH
66266: LD_VAR 0 1
66270: PPUSH
66271: LD_INT 1
66273: PPUSH
66274: CALL_OW 55
// end ;
66278: GO 66088
// end ;
66280: LD_VAR 0 5
66284: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66285: LD_INT 0
66287: PPUSH
66288: PPUSH
66289: PPUSH
66290: PPUSH
66291: PPUSH
66292: PPUSH
66293: PPUSH
66294: PPUSH
// if not turrets or not factories then
66295: LD_VAR 0 1
66299: NOT
66300: PUSH
66301: LD_VAR 0 2
66305: NOT
66306: OR
66307: IFFALSE 66311
// exit ;
66309: GO 66618
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66311: LD_ADDR_VAR 0 10
66315: PUSH
66316: LD_INT 5
66318: PUSH
66319: LD_INT 6
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 2
66328: PUSH
66329: LD_INT 4
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 3
66338: PUSH
66339: LD_INT 5
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 24
66353: PUSH
66354: LD_INT 25
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 23
66363: PUSH
66364: LD_INT 27
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PUSH
66375: LD_INT 42
66377: PUSH
66378: LD_INT 43
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 44
66387: PUSH
66388: LD_INT 46
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: PUSH
66395: LD_INT 45
66397: PUSH
66398: LD_INT 47
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: LIST
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: LIST
66414: ST_TO_ADDR
// result := [ ] ;
66415: LD_ADDR_VAR 0 3
66419: PUSH
66420: EMPTY
66421: ST_TO_ADDR
// for i in turrets do
66422: LD_ADDR_VAR 0 4
66426: PUSH
66427: LD_VAR 0 1
66431: PUSH
66432: FOR_IN
66433: IFFALSE 66616
// begin nat := GetNation ( i ) ;
66435: LD_ADDR_VAR 0 7
66439: PUSH
66440: LD_VAR 0 4
66444: PPUSH
66445: CALL_OW 248
66449: ST_TO_ADDR
// weapon := 0 ;
66450: LD_ADDR_VAR 0 8
66454: PUSH
66455: LD_INT 0
66457: ST_TO_ADDR
// if not nat then
66458: LD_VAR 0 7
66462: NOT
66463: IFFALSE 66467
// continue ;
66465: GO 66432
// for j in list [ nat ] do
66467: LD_ADDR_VAR 0 5
66471: PUSH
66472: LD_VAR 0 10
66476: PUSH
66477: LD_VAR 0 7
66481: ARRAY
66482: PUSH
66483: FOR_IN
66484: IFFALSE 66525
// if GetBWeapon ( i ) = j [ 1 ] then
66486: LD_VAR 0 4
66490: PPUSH
66491: CALL_OW 269
66495: PUSH
66496: LD_VAR 0 5
66500: PUSH
66501: LD_INT 1
66503: ARRAY
66504: EQUAL
66505: IFFALSE 66523
// begin weapon := j [ 2 ] ;
66507: LD_ADDR_VAR 0 8
66511: PUSH
66512: LD_VAR 0 5
66516: PUSH
66517: LD_INT 2
66519: ARRAY
66520: ST_TO_ADDR
// break ;
66521: GO 66525
// end ;
66523: GO 66483
66525: POP
66526: POP
// if not weapon then
66527: LD_VAR 0 8
66531: NOT
66532: IFFALSE 66536
// continue ;
66534: GO 66432
// for k in factories do
66536: LD_ADDR_VAR 0 6
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: FOR_IN
66547: IFFALSE 66612
// begin weapons := AvailableWeaponList ( k ) ;
66549: LD_ADDR_VAR 0 9
66553: PUSH
66554: LD_VAR 0 6
66558: PPUSH
66559: CALL_OW 478
66563: ST_TO_ADDR
// if not weapons then
66564: LD_VAR 0 9
66568: NOT
66569: IFFALSE 66573
// continue ;
66571: GO 66546
// if weapon in weapons then
66573: LD_VAR 0 8
66577: PUSH
66578: LD_VAR 0 9
66582: IN
66583: IFFALSE 66610
// begin result := [ i , weapon ] ;
66585: LD_ADDR_VAR 0 3
66589: PUSH
66590: LD_VAR 0 4
66594: PUSH
66595: LD_VAR 0 8
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: ST_TO_ADDR
// exit ;
66604: POP
66605: POP
66606: POP
66607: POP
66608: GO 66618
// end ; end ;
66610: GO 66546
66612: POP
66613: POP
// end ;
66614: GO 66432
66616: POP
66617: POP
// end ;
66618: LD_VAR 0 3
66622: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66623: LD_INT 0
66625: PPUSH
// if not side or side > 8 then
66626: LD_VAR 0 3
66630: NOT
66631: PUSH
66632: LD_VAR 0 3
66636: PUSH
66637: LD_INT 8
66639: GREATER
66640: OR
66641: IFFALSE 66645
// exit ;
66643: GO 66704
// if not range then
66645: LD_VAR 0 4
66649: NOT
66650: IFFALSE 66661
// range := - 12 ;
66652: LD_ADDR_VAR 0 4
66656: PUSH
66657: LD_INT 12
66659: NEG
66660: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66661: LD_VAR 0 1
66665: PPUSH
66666: LD_VAR 0 2
66670: PPUSH
66671: LD_VAR 0 3
66675: PPUSH
66676: LD_VAR 0 4
66680: PPUSH
66681: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66685: LD_VAR 0 1
66689: PPUSH
66690: LD_VAR 0 2
66694: PPUSH
66695: LD_VAR 0 3
66699: PPUSH
66700: CALL_OW 331
// end ;
66704: LD_VAR 0 5
66708: RET
// export function Video ( mode ) ; begin
66709: LD_INT 0
66711: PPUSH
// ingame_video = mode ;
66712: LD_ADDR_OWVAR 52
66716: PUSH
66717: LD_VAR 0 1
66721: ST_TO_ADDR
// interface_hidden = mode ;
66722: LD_ADDR_OWVAR 54
66726: PUSH
66727: LD_VAR 0 1
66731: ST_TO_ADDR
// end ;
66732: LD_VAR 0 2
66736: RET
// export function Join ( array , element ) ; begin
66737: LD_INT 0
66739: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66740: LD_ADDR_VAR 0 3
66744: PUSH
66745: LD_VAR 0 1
66749: PPUSH
66750: LD_VAR 0 1
66754: PUSH
66755: LD_INT 1
66757: PLUS
66758: PPUSH
66759: LD_VAR 0 2
66763: PPUSH
66764: CALL_OW 1
66768: ST_TO_ADDR
// end ;
66769: LD_VAR 0 3
66773: RET
// export function JoinUnion ( array , element ) ; begin
66774: LD_INT 0
66776: PPUSH
// result := array union element ;
66777: LD_ADDR_VAR 0 3
66781: PUSH
66782: LD_VAR 0 1
66786: PUSH
66787: LD_VAR 0 2
66791: UNION
66792: ST_TO_ADDR
// end ;
66793: LD_VAR 0 3
66797: RET
// export function GetBehemoths ( side ) ; begin
66798: LD_INT 0
66800: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66801: LD_ADDR_VAR 0 2
66805: PUSH
66806: LD_INT 22
66808: PUSH
66809: LD_VAR 0 1
66813: PUSH
66814: EMPTY
66815: LIST
66816: LIST
66817: PUSH
66818: LD_INT 31
66820: PUSH
66821: LD_INT 25
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PPUSH
66832: CALL_OW 69
66836: ST_TO_ADDR
// end ;
66837: LD_VAR 0 2
66841: RET
// export function Shuffle ( array ) ; var i , index ; begin
66842: LD_INT 0
66844: PPUSH
66845: PPUSH
66846: PPUSH
// result := [ ] ;
66847: LD_ADDR_VAR 0 2
66851: PUSH
66852: EMPTY
66853: ST_TO_ADDR
// if not array then
66854: LD_VAR 0 1
66858: NOT
66859: IFFALSE 66863
// exit ;
66861: GO 66962
// Randomize ;
66863: CALL_OW 10
// for i = array downto 1 do
66867: LD_ADDR_VAR 0 3
66871: PUSH
66872: DOUBLE
66873: LD_VAR 0 1
66877: INC
66878: ST_TO_ADDR
66879: LD_INT 1
66881: PUSH
66882: FOR_DOWNTO
66883: IFFALSE 66960
// begin index := rand ( 1 , array ) ;
66885: LD_ADDR_VAR 0 4
66889: PUSH
66890: LD_INT 1
66892: PPUSH
66893: LD_VAR 0 1
66897: PPUSH
66898: CALL_OW 12
66902: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66903: LD_ADDR_VAR 0 2
66907: PUSH
66908: LD_VAR 0 2
66912: PPUSH
66913: LD_VAR 0 2
66917: PUSH
66918: LD_INT 1
66920: PLUS
66921: PPUSH
66922: LD_VAR 0 1
66926: PUSH
66927: LD_VAR 0 4
66931: ARRAY
66932: PPUSH
66933: CALL_OW 2
66937: ST_TO_ADDR
// array := Delete ( array , index ) ;
66938: LD_ADDR_VAR 0 1
66942: PUSH
66943: LD_VAR 0 1
66947: PPUSH
66948: LD_VAR 0 4
66952: PPUSH
66953: CALL_OW 3
66957: ST_TO_ADDR
// end ;
66958: GO 66882
66960: POP
66961: POP
// end ;
66962: LD_VAR 0 2
66966: RET
// export function GetBaseMaterials ( base ) ; begin
66967: LD_INT 0
66969: PPUSH
// result := [ 0 , 0 , 0 ] ;
66970: LD_ADDR_VAR 0 2
66974: PUSH
66975: LD_INT 0
66977: PUSH
66978: LD_INT 0
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: LIST
66988: ST_TO_ADDR
// if not base then
66989: LD_VAR 0 1
66993: NOT
66994: IFFALSE 66998
// exit ;
66996: GO 67047
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66998: LD_ADDR_VAR 0 2
67002: PUSH
67003: LD_VAR 0 1
67007: PPUSH
67008: LD_INT 1
67010: PPUSH
67011: CALL_OW 275
67015: PUSH
67016: LD_VAR 0 1
67020: PPUSH
67021: LD_INT 2
67023: PPUSH
67024: CALL_OW 275
67028: PUSH
67029: LD_VAR 0 1
67033: PPUSH
67034: LD_INT 3
67036: PPUSH
67037: CALL_OW 275
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: LIST
67046: ST_TO_ADDR
// end ;
67047: LD_VAR 0 2
67051: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67052: LD_INT 0
67054: PPUSH
67055: PPUSH
// result := array ;
67056: LD_ADDR_VAR 0 3
67060: PUSH
67061: LD_VAR 0 1
67065: ST_TO_ADDR
// if size > 0 then
67066: LD_VAR 0 2
67070: PUSH
67071: LD_INT 0
67073: GREATER
67074: IFFALSE 67120
// for i := array downto size do
67076: LD_ADDR_VAR 0 4
67080: PUSH
67081: DOUBLE
67082: LD_VAR 0 1
67086: INC
67087: ST_TO_ADDR
67088: LD_VAR 0 2
67092: PUSH
67093: FOR_DOWNTO
67094: IFFALSE 67118
// result := Delete ( result , result ) ;
67096: LD_ADDR_VAR 0 3
67100: PUSH
67101: LD_VAR 0 3
67105: PPUSH
67106: LD_VAR 0 3
67110: PPUSH
67111: CALL_OW 3
67115: ST_TO_ADDR
67116: GO 67093
67118: POP
67119: POP
// end ;
67120: LD_VAR 0 3
67124: RET
// export function ComExit ( unit ) ; var tmp ; begin
67125: LD_INT 0
67127: PPUSH
67128: PPUSH
// if not IsInUnit ( unit ) then
67129: LD_VAR 0 1
67133: PPUSH
67134: CALL_OW 310
67138: NOT
67139: IFFALSE 67143
// exit ;
67141: GO 67203
// tmp := IsInUnit ( unit ) ;
67143: LD_ADDR_VAR 0 3
67147: PUSH
67148: LD_VAR 0 1
67152: PPUSH
67153: CALL_OW 310
67157: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67158: LD_VAR 0 3
67162: PPUSH
67163: CALL_OW 247
67167: PUSH
67168: LD_INT 2
67170: EQUAL
67171: IFFALSE 67184
// ComExitVehicle ( unit ) else
67173: LD_VAR 0 1
67177: PPUSH
67178: CALL_OW 121
67182: GO 67193
// ComExitBuilding ( unit ) ;
67184: LD_VAR 0 1
67188: PPUSH
67189: CALL_OW 122
// result := tmp ;
67193: LD_ADDR_VAR 0 2
67197: PUSH
67198: LD_VAR 0 3
67202: ST_TO_ADDR
// end ;
67203: LD_VAR 0 2
67207: RET
// export function ComExitAll ( units ) ; var i ; begin
67208: LD_INT 0
67210: PPUSH
67211: PPUSH
// if not units then
67212: LD_VAR 0 1
67216: NOT
67217: IFFALSE 67221
// exit ;
67219: GO 67247
// for i in units do
67221: LD_ADDR_VAR 0 3
67225: PUSH
67226: LD_VAR 0 1
67230: PUSH
67231: FOR_IN
67232: IFFALSE 67245
// ComExit ( i ) ;
67234: LD_VAR 0 3
67238: PPUSH
67239: CALL 67125 0 1
67243: GO 67231
67245: POP
67246: POP
// end ;
67247: LD_VAR 0 2
67251: RET
// export function ResetHc ; begin
67252: LD_INT 0
67254: PPUSH
// InitHc ;
67255: CALL_OW 19
// hc_importance := 0 ;
67259: LD_ADDR_OWVAR 32
67263: PUSH
67264: LD_INT 0
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 1
67271: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
67276: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67277: LD_ADDR_VAR 0 6
67281: PUSH
67282: LD_VAR 0 1
67286: PUSH
67287: LD_VAR 0 3
67291: PLUS
67292: PUSH
67293: LD_INT 2
67295: DIV
67296: ST_TO_ADDR
// if _x < 0 then
67297: LD_VAR 0 6
67301: PUSH
67302: LD_INT 0
67304: LESS
67305: IFFALSE 67322
// _x := _x * - 1 ;
67307: LD_ADDR_VAR 0 6
67311: PUSH
67312: LD_VAR 0 6
67316: PUSH
67317: LD_INT 1
67319: NEG
67320: MUL
67321: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67322: LD_ADDR_VAR 0 7
67326: PUSH
67327: LD_VAR 0 2
67331: PUSH
67332: LD_VAR 0 4
67336: PLUS
67337: PUSH
67338: LD_INT 2
67340: DIV
67341: ST_TO_ADDR
// if _y < 0 then
67342: LD_VAR 0 7
67346: PUSH
67347: LD_INT 0
67349: LESS
67350: IFFALSE 67367
// _y := _y * - 1 ;
67352: LD_ADDR_VAR 0 7
67356: PUSH
67357: LD_VAR 0 7
67361: PUSH
67362: LD_INT 1
67364: NEG
67365: MUL
67366: ST_TO_ADDR
// result := [ _x , _y ] ;
67367: LD_ADDR_VAR 0 5
67371: PUSH
67372: LD_VAR 0 6
67376: PUSH
67377: LD_VAR 0 7
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: ST_TO_ADDR
// end ;
67386: LD_VAR 0 5
67390: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67391: LD_INT 0
67393: PPUSH
67394: PPUSH
67395: PPUSH
67396: PPUSH
// task := GetTaskList ( unit ) ;
67397: LD_ADDR_VAR 0 7
67401: PUSH
67402: LD_VAR 0 1
67406: PPUSH
67407: CALL_OW 437
67411: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67412: LD_VAR 0 7
67416: NOT
67417: PUSH
67418: LD_VAR 0 1
67422: PPUSH
67423: LD_VAR 0 2
67427: PPUSH
67428: CALL_OW 308
67432: NOT
67433: AND
67434: IFFALSE 67438
// exit ;
67436: GO 67556
// if IsInArea ( unit , area ) then
67438: LD_VAR 0 1
67442: PPUSH
67443: LD_VAR 0 2
67447: PPUSH
67448: CALL_OW 308
67452: IFFALSE 67470
// begin ComMoveToArea ( unit , goAway ) ;
67454: LD_VAR 0 1
67458: PPUSH
67459: LD_VAR 0 3
67463: PPUSH
67464: CALL_OW 113
// exit ;
67468: GO 67556
// end ; if task [ 1 ] [ 1 ] <> M then
67470: LD_VAR 0 7
67474: PUSH
67475: LD_INT 1
67477: ARRAY
67478: PUSH
67479: LD_INT 1
67481: ARRAY
67482: PUSH
67483: LD_STRING M
67485: NONEQUAL
67486: IFFALSE 67490
// exit ;
67488: GO 67556
// x := task [ 1 ] [ 2 ] ;
67490: LD_ADDR_VAR 0 5
67494: PUSH
67495: LD_VAR 0 7
67499: PUSH
67500: LD_INT 1
67502: ARRAY
67503: PUSH
67504: LD_INT 2
67506: ARRAY
67507: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67508: LD_ADDR_VAR 0 6
67512: PUSH
67513: LD_VAR 0 7
67517: PUSH
67518: LD_INT 1
67520: ARRAY
67521: PUSH
67522: LD_INT 3
67524: ARRAY
67525: ST_TO_ADDR
// if InArea ( x , y , area ) then
67526: LD_VAR 0 5
67530: PPUSH
67531: LD_VAR 0 6
67535: PPUSH
67536: LD_VAR 0 2
67540: PPUSH
67541: CALL_OW 309
67545: IFFALSE 67556
// ComStop ( unit ) ;
67547: LD_VAR 0 1
67551: PPUSH
67552: CALL_OW 141
// end ;
67556: LD_VAR 0 4
67560: RET
// export function Abs ( value ) ; begin
67561: LD_INT 0
67563: PPUSH
// result := value ;
67564: LD_ADDR_VAR 0 2
67568: PUSH
67569: LD_VAR 0 1
67573: ST_TO_ADDR
// if value < 0 then
67574: LD_VAR 0 1
67578: PUSH
67579: LD_INT 0
67581: LESS
67582: IFFALSE 67599
// result := value * - 1 ;
67584: LD_ADDR_VAR 0 2
67588: PUSH
67589: LD_VAR 0 1
67593: PUSH
67594: LD_INT 1
67596: NEG
67597: MUL
67598: ST_TO_ADDR
// end ;
67599: LD_VAR 0 2
67603: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67604: LD_INT 0
67606: PPUSH
67607: PPUSH
67608: PPUSH
67609: PPUSH
67610: PPUSH
67611: PPUSH
67612: PPUSH
67613: PPUSH
// if not unit or not building then
67614: LD_VAR 0 1
67618: NOT
67619: PUSH
67620: LD_VAR 0 2
67624: NOT
67625: OR
67626: IFFALSE 67630
// exit ;
67628: GO 67856
// x := GetX ( building ) ;
67630: LD_ADDR_VAR 0 4
67634: PUSH
67635: LD_VAR 0 2
67639: PPUSH
67640: CALL_OW 250
67644: ST_TO_ADDR
// y := GetY ( building ) ;
67645: LD_ADDR_VAR 0 6
67649: PUSH
67650: LD_VAR 0 2
67654: PPUSH
67655: CALL_OW 251
67659: ST_TO_ADDR
// d := GetDir ( building ) ;
67660: LD_ADDR_VAR 0 8
67664: PUSH
67665: LD_VAR 0 2
67669: PPUSH
67670: CALL_OW 254
67674: ST_TO_ADDR
// r := 4 ;
67675: LD_ADDR_VAR 0 9
67679: PUSH
67680: LD_INT 4
67682: ST_TO_ADDR
// for i := 1 to 5 do
67683: LD_ADDR_VAR 0 10
67687: PUSH
67688: DOUBLE
67689: LD_INT 1
67691: DEC
67692: ST_TO_ADDR
67693: LD_INT 5
67695: PUSH
67696: FOR_TO
67697: IFFALSE 67854
// begin _x := ShiftX ( x , d , r + i ) ;
67699: LD_ADDR_VAR 0 5
67703: PUSH
67704: LD_VAR 0 4
67708: PPUSH
67709: LD_VAR 0 8
67713: PPUSH
67714: LD_VAR 0 9
67718: PUSH
67719: LD_VAR 0 10
67723: PLUS
67724: PPUSH
67725: CALL_OW 272
67729: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67730: LD_ADDR_VAR 0 7
67734: PUSH
67735: LD_VAR 0 6
67739: PPUSH
67740: LD_VAR 0 8
67744: PPUSH
67745: LD_VAR 0 9
67749: PUSH
67750: LD_VAR 0 10
67754: PLUS
67755: PPUSH
67756: CALL_OW 273
67760: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67761: LD_VAR 0 5
67765: PPUSH
67766: LD_VAR 0 7
67770: PPUSH
67771: CALL_OW 488
67775: PUSH
67776: LD_VAR 0 5
67780: PPUSH
67781: LD_VAR 0 7
67785: PPUSH
67786: CALL_OW 428
67790: PPUSH
67791: CALL_OW 247
67795: PUSH
67796: LD_INT 3
67798: PUSH
67799: LD_INT 2
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: IN
67806: NOT
67807: AND
67808: IFFALSE 67852
// begin ComMoveXY ( unit , _x , _y ) ;
67810: LD_VAR 0 1
67814: PPUSH
67815: LD_VAR 0 5
67819: PPUSH
67820: LD_VAR 0 7
67824: PPUSH
67825: CALL_OW 111
// result := [ _x , _y ] ;
67829: LD_ADDR_VAR 0 3
67833: PUSH
67834: LD_VAR 0 5
67838: PUSH
67839: LD_VAR 0 7
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: ST_TO_ADDR
// exit ;
67848: POP
67849: POP
67850: GO 67856
// end ; end ;
67852: GO 67696
67854: POP
67855: POP
// end ;
67856: LD_VAR 0 3
67860: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67861: LD_INT 0
67863: PPUSH
67864: PPUSH
67865: PPUSH
// result := 0 ;
67866: LD_ADDR_VAR 0 3
67870: PUSH
67871: LD_INT 0
67873: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67874: LD_VAR 0 1
67878: PUSH
67879: LD_INT 0
67881: LESS
67882: PUSH
67883: LD_VAR 0 1
67887: PUSH
67888: LD_INT 8
67890: GREATER
67891: OR
67892: PUSH
67893: LD_VAR 0 2
67897: PUSH
67898: LD_INT 0
67900: LESS
67901: OR
67902: PUSH
67903: LD_VAR 0 2
67907: PUSH
67908: LD_INT 8
67910: GREATER
67911: OR
67912: IFFALSE 67916
// exit ;
67914: GO 67991
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67916: LD_ADDR_VAR 0 4
67920: PUSH
67921: LD_INT 22
67923: PUSH
67924: LD_VAR 0 2
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PPUSH
67933: CALL_OW 69
67937: PUSH
67938: FOR_IN
67939: IFFALSE 67989
// begin un := UnitShoot ( i ) ;
67941: LD_ADDR_VAR 0 5
67945: PUSH
67946: LD_VAR 0 4
67950: PPUSH
67951: CALL_OW 504
67955: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67956: LD_VAR 0 5
67960: PPUSH
67961: CALL_OW 255
67965: PUSH
67966: LD_VAR 0 1
67970: EQUAL
67971: IFFALSE 67987
// begin result := un ;
67973: LD_ADDR_VAR 0 3
67977: PUSH
67978: LD_VAR 0 5
67982: ST_TO_ADDR
// exit ;
67983: POP
67984: POP
67985: GO 67991
// end ; end ;
67987: GO 67938
67989: POP
67990: POP
// end ;
67991: LD_VAR 0 3
67995: RET
// export function GetCargoBay ( units ) ; begin
67996: LD_INT 0
67998: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67999: LD_ADDR_VAR 0 2
68003: PUSH
68004: LD_VAR 0 1
68008: PPUSH
68009: LD_INT 2
68011: PUSH
68012: LD_INT 34
68014: PUSH
68015: LD_INT 12
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 34
68024: PUSH
68025: LD_INT 51
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 34
68034: PUSH
68035: LD_INT 32
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 34
68044: PUSH
68045: LD_EXP 33
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: PPUSH
68061: CALL_OW 72
68065: ST_TO_ADDR
// end ;
68066: LD_VAR 0 2
68070: RET
// export function Negate ( value ) ; begin
68071: LD_INT 0
68073: PPUSH
// result := not value ;
68074: LD_ADDR_VAR 0 2
68078: PUSH
68079: LD_VAR 0 1
68083: NOT
68084: ST_TO_ADDR
// end ;
68085: LD_VAR 0 2
68089: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
68090: LD_INT 0
68092: PPUSH
// if x1 = x2 then
68093: LD_VAR 0 1
68097: PUSH
68098: LD_VAR 0 3
68102: EQUAL
68103: IFFALSE 68137
// begin if y1 > y2 then
68105: LD_VAR 0 2
68109: PUSH
68110: LD_VAR 0 4
68114: GREATER
68115: IFFALSE 68127
// result := 0 else
68117: LD_ADDR_VAR 0 5
68121: PUSH
68122: LD_INT 0
68124: ST_TO_ADDR
68125: GO 68135
// result := 3 ;
68127: LD_ADDR_VAR 0 5
68131: PUSH
68132: LD_INT 3
68134: ST_TO_ADDR
// exit ;
68135: GO 68223
// end ; if y1 = y2 then
68137: LD_VAR 0 2
68141: PUSH
68142: LD_VAR 0 4
68146: EQUAL
68147: IFFALSE 68181
// begin if x1 > x2 then
68149: LD_VAR 0 1
68153: PUSH
68154: LD_VAR 0 3
68158: GREATER
68159: IFFALSE 68171
// result := 1 else
68161: LD_ADDR_VAR 0 5
68165: PUSH
68166: LD_INT 1
68168: ST_TO_ADDR
68169: GO 68179
// result := 4 ;
68171: LD_ADDR_VAR 0 5
68175: PUSH
68176: LD_INT 4
68178: ST_TO_ADDR
// exit ;
68179: GO 68223
// end ; if x1 > x2 and y1 > y2 then
68181: LD_VAR 0 1
68185: PUSH
68186: LD_VAR 0 3
68190: GREATER
68191: PUSH
68192: LD_VAR 0 2
68196: PUSH
68197: LD_VAR 0 4
68201: GREATER
68202: AND
68203: IFFALSE 68215
// result := 2 else
68205: LD_ADDR_VAR 0 5
68209: PUSH
68210: LD_INT 2
68212: ST_TO_ADDR
68213: GO 68223
// result := 5 ;
68215: LD_ADDR_VAR 0 5
68219: PUSH
68220: LD_INT 5
68222: ST_TO_ADDR
// end ;
68223: LD_VAR 0 5
68227: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68228: LD_INT 0
68230: PPUSH
68231: PPUSH
// if not driver or not IsInUnit ( driver ) then
68232: LD_VAR 0 1
68236: NOT
68237: PUSH
68238: LD_VAR 0 1
68242: PPUSH
68243: CALL_OW 310
68247: NOT
68248: OR
68249: IFFALSE 68253
// exit ;
68251: GO 68343
// vehicle := IsInUnit ( driver ) ;
68253: LD_ADDR_VAR 0 3
68257: PUSH
68258: LD_VAR 0 1
68262: PPUSH
68263: CALL_OW 310
68267: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68268: LD_VAR 0 1
68272: PPUSH
68273: LD_STRING \
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: LD_INT 0
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: PUSH
68303: LD_STRING E
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: LD_INT 0
68311: PUSH
68312: LD_VAR 0 3
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PPUSH
68339: CALL_OW 446
// end ;
68343: LD_VAR 0 2
68347: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68348: LD_INT 0
68350: PPUSH
68351: PPUSH
// if not driver or not IsInUnit ( driver ) then
68352: LD_VAR 0 1
68356: NOT
68357: PUSH
68358: LD_VAR 0 1
68362: PPUSH
68363: CALL_OW 310
68367: NOT
68368: OR
68369: IFFALSE 68373
// exit ;
68371: GO 68463
// vehicle := IsInUnit ( driver ) ;
68373: LD_ADDR_VAR 0 3
68377: PUSH
68378: LD_VAR 0 1
68382: PPUSH
68383: CALL_OW 310
68387: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68388: LD_VAR 0 1
68392: PPUSH
68393: LD_STRING \
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: PUSH
68423: LD_STRING E
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_INT 0
68431: PUSH
68432: LD_VAR 0 3
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PPUSH
68459: CALL_OW 447
// end ;
68463: LD_VAR 0 2
68467: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68468: LD_INT 0
68470: PPUSH
68471: PPUSH
68472: PPUSH
// tmp := [ ] ;
68473: LD_ADDR_VAR 0 5
68477: PUSH
68478: EMPTY
68479: ST_TO_ADDR
// for i in units do
68480: LD_ADDR_VAR 0 4
68484: PUSH
68485: LD_VAR 0 1
68489: PUSH
68490: FOR_IN
68491: IFFALSE 68529
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68493: LD_ADDR_VAR 0 5
68497: PUSH
68498: LD_VAR 0 5
68502: PPUSH
68503: LD_VAR 0 5
68507: PUSH
68508: LD_INT 1
68510: PLUS
68511: PPUSH
68512: LD_VAR 0 4
68516: PPUSH
68517: CALL_OW 256
68521: PPUSH
68522: CALL_OW 2
68526: ST_TO_ADDR
68527: GO 68490
68529: POP
68530: POP
// if not tmp then
68531: LD_VAR 0 5
68535: NOT
68536: IFFALSE 68540
// exit ;
68538: GO 68588
// if asc then
68540: LD_VAR 0 2
68544: IFFALSE 68568
// result := SortListByListAsc ( units , tmp ) else
68546: LD_ADDR_VAR 0 3
68550: PUSH
68551: LD_VAR 0 1
68555: PPUSH
68556: LD_VAR 0 5
68560: PPUSH
68561: CALL_OW 76
68565: ST_TO_ADDR
68566: GO 68588
// result := SortListByListDesc ( units , tmp ) ;
68568: LD_ADDR_VAR 0 3
68572: PUSH
68573: LD_VAR 0 1
68577: PPUSH
68578: LD_VAR 0 5
68582: PPUSH
68583: CALL_OW 77
68587: ST_TO_ADDR
// end ;
68588: LD_VAR 0 3
68592: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68593: LD_INT 0
68595: PPUSH
68596: PPUSH
// task := GetTaskList ( mech ) ;
68597: LD_ADDR_VAR 0 4
68601: PUSH
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 437
68611: ST_TO_ADDR
// if not task then
68612: LD_VAR 0 4
68616: NOT
68617: IFFALSE 68621
// exit ;
68619: GO 68663
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68621: LD_ADDR_VAR 0 3
68625: PUSH
68626: LD_VAR 0 4
68630: PUSH
68631: LD_INT 1
68633: ARRAY
68634: PUSH
68635: LD_INT 1
68637: ARRAY
68638: PUSH
68639: LD_STRING r
68641: EQUAL
68642: PUSH
68643: LD_VAR 0 4
68647: PUSH
68648: LD_INT 1
68650: ARRAY
68651: PUSH
68652: LD_INT 4
68654: ARRAY
68655: PUSH
68656: LD_VAR 0 2
68660: EQUAL
68661: AND
68662: ST_TO_ADDR
// end ;
68663: LD_VAR 0 3
68667: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68668: LD_INT 0
68670: PPUSH
// SetDir ( unit , d ) ;
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_VAR 0 4
68680: PPUSH
68681: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68685: LD_VAR 0 1
68689: PPUSH
68690: LD_VAR 0 2
68694: PPUSH
68695: LD_VAR 0 3
68699: PPUSH
68700: LD_VAR 0 5
68704: PPUSH
68705: CALL_OW 48
// end ;
68709: LD_VAR 0 6
68713: RET
// export function ToNaturalNumber ( number ) ; begin
68714: LD_INT 0
68716: PPUSH
// result := number div 1 ;
68717: LD_ADDR_VAR 0 2
68721: PUSH
68722: LD_VAR 0 1
68726: PUSH
68727: LD_INT 1
68729: DIV
68730: ST_TO_ADDR
// if number < 0 then
68731: LD_VAR 0 1
68735: PUSH
68736: LD_INT 0
68738: LESS
68739: IFFALSE 68749
// result := 0 ;
68741: LD_ADDR_VAR 0 2
68745: PUSH
68746: LD_INT 0
68748: ST_TO_ADDR
// end ;
68749: LD_VAR 0 2
68753: RET
// export function SortByClass ( units , class ) ; var un ; begin
68754: LD_INT 0
68756: PPUSH
68757: PPUSH
// if not units or not class then
68758: LD_VAR 0 1
68762: NOT
68763: PUSH
68764: LD_VAR 0 2
68768: NOT
68769: OR
68770: IFFALSE 68774
// exit ;
68772: GO 68869
// result := [ ] ;
68774: LD_ADDR_VAR 0 3
68778: PUSH
68779: EMPTY
68780: ST_TO_ADDR
// for un in units do
68781: LD_ADDR_VAR 0 4
68785: PUSH
68786: LD_VAR 0 1
68790: PUSH
68791: FOR_IN
68792: IFFALSE 68867
// if GetClass ( un ) = class then
68794: LD_VAR 0 4
68798: PPUSH
68799: CALL_OW 257
68803: PUSH
68804: LD_VAR 0 2
68808: EQUAL
68809: IFFALSE 68836
// result := Insert ( result , 1 , un ) else
68811: LD_ADDR_VAR 0 3
68815: PUSH
68816: LD_VAR 0 3
68820: PPUSH
68821: LD_INT 1
68823: PPUSH
68824: LD_VAR 0 4
68828: PPUSH
68829: CALL_OW 2
68833: ST_TO_ADDR
68834: GO 68865
// result := Replace ( result , result + 1 , un ) ;
68836: LD_ADDR_VAR 0 3
68840: PUSH
68841: LD_VAR 0 3
68845: PPUSH
68846: LD_VAR 0 3
68850: PUSH
68851: LD_INT 1
68853: PLUS
68854: PPUSH
68855: LD_VAR 0 4
68859: PPUSH
68860: CALL_OW 1
68864: ST_TO_ADDR
68865: GO 68791
68867: POP
68868: POP
// end ; end_of_file
68869: LD_VAR 0 3
68873: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68874: LD_VAR 0 1
68878: PUSH
68879: LD_INT 200
68881: DOUBLE
68882: GREATEREQUAL
68883: IFFALSE 68891
68885: LD_INT 299
68887: DOUBLE
68888: LESSEQUAL
68889: IFTRUE 68893
68891: GO 68925
68893: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68894: LD_VAR 0 1
68898: PPUSH
68899: LD_VAR 0 2
68903: PPUSH
68904: LD_VAR 0 3
68908: PPUSH
68909: LD_VAR 0 4
68913: PPUSH
68914: LD_VAR 0 5
68918: PPUSH
68919: CALL 26117 0 5
68923: GO 69002
68925: LD_INT 300
68927: DOUBLE
68928: GREATEREQUAL
68929: IFFALSE 68937
68931: LD_INT 399
68933: DOUBLE
68934: LESSEQUAL
68935: IFTRUE 68939
68937: GO 69001
68939: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68940: LD_VAR 0 1
68944: PPUSH
68945: LD_VAR 0 2
68949: PPUSH
68950: LD_VAR 0 3
68954: PPUSH
68955: LD_VAR 0 4
68959: PPUSH
68960: LD_VAR 0 5
68964: PPUSH
68965: LD_VAR 0 6
68969: PPUSH
68970: LD_VAR 0 7
68974: PPUSH
68975: LD_VAR 0 8
68979: PPUSH
68980: LD_VAR 0 9
68984: PPUSH
68985: LD_VAR 0 10
68989: PPUSH
68990: LD_VAR 0 11
68994: PPUSH
68995: CALL 24005 0 11
68999: GO 69002
69001: POP
// end ;
69002: PPOPN 11
69004: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69005: LD_VAR 0 1
69009: PPUSH
69010: LD_VAR 0 2
69014: PPUSH
69015: LD_VAR 0 3
69019: PPUSH
69020: LD_VAR 0 4
69024: PPUSH
69025: LD_VAR 0 5
69029: PPUSH
69030: CALL 26099 0 5
// end ; end_of_file
69034: PPOPN 5
69036: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69037: LD_VAR 0 1
69041: PPUSH
69042: LD_VAR 0 2
69046: PPUSH
69047: LD_VAR 0 3
69051: PPUSH
69052: LD_VAR 0 4
69056: PPUSH
69057: LD_VAR 0 5
69061: PPUSH
69062: LD_VAR 0 6
69066: PPUSH
69067: CALL 12813 0 6
// end ;
69071: PPOPN 6
69073: END
