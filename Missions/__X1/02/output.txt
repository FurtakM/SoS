// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11141 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 29513 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 29513 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SaveForQuickRestart ;
6077: CALL_OW 22
// wait ( 0 0$20 ) ;
6081: LD_INT 700
6083: PPUSH
6084: CALL_OW 67
// SendSciToForest ;
6088: CALL 1496 0 0
// if Difficulty = 1 then
6092: LD_OWVAR 67
6096: PUSH
6097: LD_INT 1
6099: EQUAL
6100: IFFALSE 6104
// exit ;
6102: GO 6221
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6104: LD_INT 10500
6106: PUSH
6107: LD_INT 5250
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PUSH
6114: LD_OWVAR 67
6118: PUSH
6119: LD_INT 1
6121: MINUS
6122: ARRAY
6123: PPUSH
6124: CALL_OW 67
// if usAlert then
6128: LD_EXP 10
6132: IFFALSE 6136
// exit ;
6134: GO 6221
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6136: LD_ADDR_VAR 0 3
6140: PUSH
6141: LD_INT 22
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 25
6153: PUSH
6154: LD_INT 2
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PPUSH
6165: CALL_OW 69
6169: ST_TO_ADDR
// if not tmp then
6170: LD_VAR 0 3
6174: NOT
6175: IFFALSE 6179
// exit ;
6177: GO 6221
// ComExitBuilding ( tmp ) ;
6179: LD_VAR 0 3
6183: PPUSH
6184: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6188: LD_VAR 0 3
6192: PPUSH
6193: LD_INT 31
6195: PPUSH
6196: LD_INT 40
6198: PPUSH
6199: LD_INT 13
6201: PPUSH
6202: LD_INT 3
6204: PPUSH
6205: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6209: LD_VAR 0 3
6213: PPUSH
6214: LD_INT 1
6216: PPUSH
6217: CALL_OW 180
// end ;
6221: LD_VAR 0 1
6225: RET
// every 3 3$00 do
6226: GO 6228
6228: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6229: LD_INT 1
6231: PPUSH
6232: LD_INT 570
6234: PPUSH
6235: LD_INT 350
6237: PPUSH
6238: CALL_OW 550
// wait ( 2 2$40 ) ;
6242: LD_INT 5600
6244: PPUSH
6245: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6249: LD_INT 0
6251: PPUSH
6252: LD_INT 570
6254: PPUSH
6255: LD_INT 350
6257: PPUSH
6258: CALL_OW 550
// end ;
6262: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6263: LD_EXP 4
6267: NOT
6268: PUSH
6269: LD_INT 2
6271: PPUSH
6272: LD_EXP 27
6276: PPUSH
6277: CALL_OW 292
6281: AND
6282: IFFALSE 7188
6284: GO 6286
6286: DISABLE
6287: LD_INT 0
6289: PPUSH
6290: PPUSH
// begin aviradzeSpotted := true ;
6291: LD_ADDR_EXP 4
6295: PUSH
6296: LD_INT 1
6298: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6299: LD_ADDR_VAR 0 2
6303: PUSH
6304: LD_INT 22
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: PUSH
6314: LD_INT 21
6316: PUSH
6317: LD_INT 1
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6333: LD_EXP 23
6337: PPUSH
6338: LD_EXP 27
6342: PPUSH
6343: CALL_OW 250
6347: PPUSH
6348: LD_EXP 27
6352: PPUSH
6353: CALL_OW 251
6357: PPUSH
6358: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6362: LD_INT 35
6364: PPUSH
6365: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6369: LD_EXP 23
6373: PPUSH
6374: LD_EXP 27
6378: PPUSH
6379: CALL_OW 296
6383: PUSH
6384: LD_INT 16
6386: LESS
6387: IFFALSE 6362
// InGameOn ;
6389: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6393: LD_INT 5
6395: PPUSH
6396: LD_INT 2
6398: PPUSH
6399: CALL_OW 343
// if pepAmount > 2 then
6403: LD_VAR 0 2
6407: PUSH
6408: LD_INT 2
6410: GREATER
6411: IFFALSE 6427
// Say ( Heike , DH-1-spot ) else
6413: LD_EXP 23
6417: PPUSH
6418: LD_STRING DH-1-spot
6420: PPUSH
6421: CALL_OW 88
6425: GO 6439
// Say ( Heike , DH-1-spot-d ) ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_STRING DH-1-spot-d
6434: PPUSH
6435: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6439: LD_EXP 23
6443: PPUSH
6444: LD_EXP 27
6448: PPUSH
6449: CALL_OW 250
6453: PPUSH
6454: LD_EXP 27
6458: PPUSH
6459: CALL_OW 251
6463: PPUSH
6464: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6468: LD_ADDR_VAR 0 1
6472: PUSH
6473: LD_EXP 26
6477: PUSH
6478: LD_EXP 25
6482: PUSH
6483: LD_EXP 24
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: PUSH
6493: FOR_IN
6494: IFFALSE 6533
// if GetDistUnits ( i , Aviradze ) > 7 then
6496: LD_VAR 0 1
6500: PPUSH
6501: LD_EXP 27
6505: PPUSH
6506: CALL_OW 296
6510: PUSH
6511: LD_INT 7
6513: GREATER
6514: IFFALSE 6531
// ComMoveXY ( i , 102 , 40 ) ;
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_INT 102
6523: PPUSH
6524: LD_INT 40
6526: PPUSH
6527: CALL_OW 111
6531: GO 6493
6533: POP
6534: POP
// repeat wait ( 0 0$1 ) ;
6535: LD_INT 35
6537: PPUSH
6538: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6542: LD_EXP 23
6546: PPUSH
6547: LD_EXP 27
6551: PPUSH
6552: CALL_OW 296
6556: PUSH
6557: LD_INT 6
6559: LESS
6560: IFFALSE 6535
// ComTurnUnit ( Heike , Aviradze ) ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6576: LD_EXP 27
6580: PUSH
6581: LD_EXP 29
6585: PUSH
6586: LD_EXP 28
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: PPUSH
6596: LD_EXP 23
6600: PPUSH
6601: CALL_OW 119
// if pepAmount > 1 then
6605: LD_VAR 0 2
6609: PUSH
6610: LD_INT 1
6612: GREATER
6613: IFFALSE 6665
// begin wait ( 0 0$2 ) ;
6615: LD_INT 70
6617: PPUSH
6618: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6622: LD_EXP 26
6626: PUSH
6627: LD_EXP 25
6631: PUSH
6632: LD_EXP 24
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: LD_EXP 27
6646: PPUSH
6647: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6651: LD_EXP 23
6655: PPUSH
6656: LD_STRING DH-2-spot
6658: PPUSH
6659: CALL_OW 88
// end else
6663: GO 6677
// Say ( Heike , DH-2-spot-d ) ;
6665: LD_EXP 23
6669: PPUSH
6670: LD_STRING DH-2-spot-d
6672: PPUSH
6673: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6677: LD_EXP 27
6681: PPUSH
6682: LD_STRING DA-2-spot
6684: PPUSH
6685: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6689: LD_EXP 23
6693: PPUSH
6694: LD_STRING DH-3-spot
6696: PPUSH
6697: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6701: LD_EXP 28
6705: PPUSH
6706: LD_EXP 23
6710: PPUSH
6711: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6715: LD_EXP 23
6719: PPUSH
6720: LD_EXP 28
6724: PPUSH
6725: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6729: LD_INT 10
6731: PPUSH
6732: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6736: LD_EXP 28
6740: PPUSH
6741: LD_STRING DK-3-spot
6743: PPUSH
6744: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6748: LD_EXP 28
6752: PPUSH
6753: LD_EXP 23
6757: PPUSH
6758: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6762: LD_EXP 23
6766: PPUSH
6767: LD_STRING DH-4-spot
6769: PPUSH
6770: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6774: LD_INT 10
6776: PPUSH
6777: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6781: LD_EXP 23
6785: PPUSH
6786: LD_EXP 27
6790: PPUSH
6791: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6795: LD_EXP 27
6799: PPUSH
6800: LD_STRING DA-4-spot
6802: PPUSH
6803: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6807: LD_EXP 28
6811: PPUSH
6812: LD_EXP 27
6816: PPUSH
6817: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6821: LD_EXP 28
6825: PPUSH
6826: LD_STRING DK-4-spot
6828: PPUSH
6829: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6833: LD_EXP 27
6837: PPUSH
6838: LD_EXP 28
6842: PPUSH
6843: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6847: LD_EXP 27
6851: PPUSH
6852: LD_STRING DA-5-spot
6854: PPUSH
6855: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6859: LD_EXP 28
6863: PPUSH
6864: LD_STRING DK-5-spot
6866: PPUSH
6867: CALL_OW 88
// if pepAmount = 1 then
6871: LD_VAR 0 2
6875: PUSH
6876: LD_INT 1
6878: EQUAL
6879: IFFALSE 6893
// Say ( Heike , DH-5-spot-f ) ;
6881: LD_EXP 23
6885: PPUSH
6886: LD_STRING DH-5-spot-f
6888: PPUSH
6889: CALL_OW 88
// if pepAmount < 3 then
6893: LD_VAR 0 2
6897: PUSH
6898: LD_INT 3
6900: LESS
6901: IFFALSE 6917
// Say ( Aviradze , DA-6-spot-f ) else
6903: LD_EXP 27
6907: PPUSH
6908: LD_STRING DA-6-spot-f
6910: PPUSH
6911: CALL_OW 88
6915: GO 6953
// if pepAmount < 4 then
6917: LD_VAR 0 2
6921: PUSH
6922: LD_INT 4
6924: LESS
6925: IFFALSE 6941
// Say ( Aviradze , DA-6-spot-c ) else
6927: LD_EXP 27
6931: PPUSH
6932: LD_STRING DA-6-spot-c
6934: PPUSH
6935: CALL_OW 88
6939: GO 6953
// Say ( Aviradze , DA-6-spot ) ;
6941: LD_EXP 27
6945: PPUSH
6946: LD_STRING DA-6-spot
6948: PPUSH
6949: CALL_OW 88
// if Kamil then
6953: LD_EXP 26
6957: IFFALSE 6971
// Say ( Kamil , DKam-6-spot ) ;
6959: LD_EXP 26
6963: PPUSH
6964: LD_STRING DKam-6-spot
6966: PPUSH
6967: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6971: LD_EXP 28
6975: PPUSH
6976: LD_STRING DK-6-spot
6978: PPUSH
6979: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
6983: LD_EXP 27
6987: PPUSH
6988: LD_EXP 23
6992: PPUSH
6993: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
6997: LD_EXP 27
7001: PPUSH
7002: LD_STRING DA-7-spot
7004: PPUSH
7005: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7009: LD_EXP 23
7013: PPUSH
7014: LD_STRING DH-7-spot
7016: PPUSH
7017: CALL_OW 88
// if sciCounterKill >= 3 then
7021: LD_EXP 9
7025: PUSH
7026: LD_INT 3
7028: GREATEREQUAL
7029: IFFALSE 7055
// begin Say ( Heike , DH-7-spot-a ) ;
7031: LD_EXP 23
7035: PPUSH
7036: LD_STRING DH-7-spot-a
7038: PPUSH
7039: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7043: LD_EXP 27
7047: PPUSH
7048: LD_STRING DA-8-spot-a
7050: PPUSH
7051: CALL_OW 88
// end ; InGameOff ;
7055: CALL_OW 9
// if sciCounterKill < 3 then
7059: LD_EXP 9
7063: PUSH
7064: LD_INT 3
7066: LESS
7067: IFFALSE 7126
// begin SetSide ( Kaia , 2 ) ;
7069: LD_EXP 28
7073: PPUSH
7074: LD_INT 2
7076: PPUSH
7077: CALL_OW 235
// ComFree ( Kaia ) ;
7081: LD_EXP 28
7085: PPUSH
7086: CALL_OW 139
// if Kamil then
7090: LD_EXP 26
7094: IFFALSE 7117
// begin ComHold ( Kamil ) ;
7096: LD_EXP 26
7100: PPUSH
7101: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7105: LD_EXP 26
7109: PPUSH
7110: LD_INT 5
7112: PPUSH
7113: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7117: LD_STRING OSci
7119: PPUSH
7120: CALL_OW 337
// end else
7124: GO 7188
// begin aviradzeQuestDone := true ;
7126: LD_ADDR_EXP 8
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// attackDeltaAllowed := true ;
7134: LD_ADDR_EXP 14
7138: PUSH
7139: LD_INT 1
7141: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7142: LD_STRING ODelta2
7144: PPUSH
7145: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7149: LD_ADDR_VAR 0 1
7153: PUSH
7154: LD_INT 22
7156: PUSH
7157: LD_INT 5
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PPUSH
7164: CALL_OW 69
7168: PUSH
7169: FOR_IN
7170: IFFALSE 7186
// SetSide ( i , 2 ) ;
7172: LD_VAR 0 1
7176: PPUSH
7177: LD_INT 2
7179: PPUSH
7180: CALL_OW 235
7184: GO 7169
7186: POP
7187: POP
// end ; end ;
7188: PPOPN 2
7190: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7191: LD_EXP 7
7195: NOT
7196: PUSH
7197: LD_EXP 22
7201: PPUSH
7202: LD_EXP 23
7206: PPUSH
7207: CALL_OW 74
7211: PPUSH
7212: LD_EXP 23
7216: PPUSH
7217: CALL_OW 296
7221: PUSH
7222: LD_INT 8
7224: LESS
7225: AND
7226: PUSH
7227: LD_INT 2
7229: PPUSH
7230: LD_EXP 22
7234: PPUSH
7235: LD_EXP 23
7239: PPUSH
7240: CALL_OW 74
7244: PPUSH
7245: CALL_OW 292
7249: AND
7250: PUSH
7251: LD_INT 22
7253: PUSH
7254: LD_INT 2
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 21
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: EMPTY
7272: LIST
7273: LIST
7274: PPUSH
7275: CALL_OW 69
7279: PUSH
7280: LD_INT 1
7282: GREATER
7283: AND
7284: PUSH
7285: LD_EXP 4
7289: NOT
7290: AND
7291: IFFALSE 7335
7293: GO 7295
7295: DISABLE
// begin sciSpotted := true ;
7296: LD_ADDR_EXP 7
7300: PUSH
7301: LD_INT 1
7303: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7304: LD_EXP 22
7308: PPUSH
7309: LD_EXP 23
7313: PPUSH
7314: CALL_OW 74
7318: PPUSH
7319: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7323: LD_EXP 23
7327: PPUSH
7328: LD_STRING DH-1-sci
7330: PPUSH
7331: CALL_OW 88
// end ;
7335: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7336: LD_EXP 4
7340: PUSH
7341: LD_EXP 7
7345: NOT
7346: AND
7347: PUSH
7348: LD_INT 2
7350: PPUSH
7351: LD_EXP 22
7355: PPUSH
7356: LD_EXP 23
7360: PPUSH
7361: CALL_OW 74
7365: PPUSH
7366: CALL_OW 292
7370: AND
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_INT 2
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 21
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: EMPTY
7393: LIST
7394: LIST
7395: PPUSH
7396: CALL_OW 69
7400: PUSH
7401: LD_INT 1
7403: GREATER
7404: AND
7405: PUSH
7406: LD_EXP 4
7410: AND
7411: PUSH
7412: LD_EXP 8
7416: NOT
7417: AND
7418: IFFALSE 7559
7420: GO 7422
7422: DISABLE
7423: LD_INT 0
7425: PPUSH
// begin sciSpotted := true ;
7426: LD_ADDR_EXP 7
7430: PUSH
7431: LD_INT 1
7433: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7434: LD_ADDR_VAR 0 1
7438: PUSH
7439: LD_EXP 22
7443: PPUSH
7444: LD_EXP 23
7448: PPUSH
7449: CALL_OW 74
7453: ST_TO_ADDR
// DialogueOn ;
7454: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7458: LD_VAR 0 1
7462: PPUSH
7463: CALL_OW 250
7467: PPUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 251
7477: PPUSH
7478: LD_INT 2
7480: PPUSH
7481: LD_INT 3
7483: NEG
7484: PPUSH
7485: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7489: LD_VAR 0 1
7493: PPUSH
7494: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7498: LD_EXP 23
7502: PPUSH
7503: LD_STRING DH-1-sci-a
7505: PPUSH
7506: CALL_OW 88
// if Mike then
7510: LD_EXP 25
7514: IFFALSE 7528
// Say ( Mike , DM-1-sci-a ) ;
7516: LD_EXP 25
7520: PPUSH
7521: LD_STRING DM-1-sci-a
7523: PPUSH
7524: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7528: LD_VAR 0 1
7532: PPUSH
7533: CALL_OW 250
7537: PPUSH
7538: LD_VAR 0 1
7542: PPUSH
7543: CALL_OW 251
7547: PPUSH
7548: LD_INT 2
7550: PPUSH
7551: CALL_OW 331
// DialogueOff ;
7555: CALL_OW 7
// end ;
7559: PPOPN 1
7561: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7562: LD_EXP 10
7566: PUSH
7567: LD_EXP 19
7571: PPUSH
7572: CALL_OW 256
7576: PUSH
7577: LD_INT 1000
7579: LESS
7580: PUSH
7581: LD_INT 3
7583: PPUSH
7584: CALL_OW 256
7588: PUSH
7589: LD_INT 999
7591: LESS
7592: OR
7593: AND
7594: IFFALSE 7850
7596: GO 7598
7598: DISABLE
7599: LD_INT 0
7601: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7602: LD_ADDR_VAR 0 1
7606: PUSH
7607: LD_INT 22
7609: PUSH
7610: LD_INT 1
7612: PUSH
7613: EMPTY
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 21
7619: PUSH
7620: LD_INT 2
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 58
7629: PUSH
7630: EMPTY
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7643: LD_VAR 0 1
7647: PUSH
7648: LD_EXP 19
7652: PPUSH
7653: CALL_OW 302
7657: AND
7658: IFFALSE 7700
// begin if IsInUnit ( Gladstone ) then
7660: LD_EXP 19
7664: PPUSH
7665: CALL_OW 310
7669: IFFALSE 7680
// ComExitBuilding ( Gladstone ) ;
7671: LD_EXP 19
7675: PPUSH
7676: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7680: LD_EXP 19
7684: PPUSH
7685: LD_VAR 0 1
7689: PUSH
7690: LD_INT 1
7692: ARRAY
7693: PPUSH
7694: CALL_OW 180
// end else
7698: GO 7720
// if IsInUnit ( Gladstone ) then
7700: LD_EXP 19
7704: PPUSH
7705: CALL_OW 310
7709: IFFALSE 7720
// ComExitBuilding ( Gladstone ) ;
7711: LD_EXP 19
7715: PPUSH
7716: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7720: LD_EXP 19
7724: PPUSH
7725: LD_INT 27
7727: PPUSH
7728: LD_INT 51
7730: PPUSH
7731: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7735: LD_EXP 19
7739: PPUSH
7740: LD_STRING D8-Glad-2
7742: PPUSH
7743: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7747: LD_INT 35
7749: PPUSH
7750: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7754: LD_EXP 19
7758: PPUSH
7759: LD_INT 27
7761: PPUSH
7762: LD_INT 51
7764: PPUSH
7765: CALL_OW 307
7769: PUSH
7770: LD_EXP 19
7774: PPUSH
7775: CALL_OW 310
7779: PPUSH
7780: LD_INT 27
7782: PPUSH
7783: LD_INT 51
7785: PPUSH
7786: CALL_OW 307
7790: OR
7791: PUSH
7792: LD_EXP 19
7796: PPUSH
7797: CALL_OW 301
7801: OR
7802: IFFALSE 7747
// if IsDead ( Gladstone ) then
7804: LD_EXP 19
7808: PPUSH
7809: CALL_OW 301
7813: IFFALSE 7817
// exit ;
7815: GO 7850
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7817: LD_INT 27
7819: PPUSH
7820: LD_INT 51
7822: PPUSH
7823: CALL_OW 428
7827: PPUSH
7828: CALL_OW 64
// gladstoneEscaped := true ;
7832: LD_ADDR_EXP 12
7836: PUSH
7837: LD_INT 1
7839: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7840: LD_INT 1
7842: PPUSH
7843: LD_STRING 02_GladstoneEscaped
7845: PPUSH
7846: CALL_OW 39
// end ;
7850: PPOPN 1
7852: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7853: LD_EXP 4
7857: PUSH
7858: LD_EXP 9
7862: PUSH
7863: LD_INT 3
7865: GREATEREQUAL
7866: PUSH
7867: LD_EXP 22
7871: NOT
7872: OR
7873: AND
7874: PUSH
7875: LD_EXP 8
7879: NOT
7880: AND
7881: IFFALSE 7924
7883: GO 7885
7885: DISABLE
// begin aviradzeQuestDone := true ;
7886: LD_ADDR_EXP 8
7890: PUSH
7891: LD_INT 1
7893: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7894: LD_EXP 23
7898: PPUSH
7899: LD_STRING DH-1-quest-done
7901: PPUSH
7902: CALL_OW 88
// if Givi then
7906: LD_EXP 24
7910: IFFALSE 7924
// Say ( Givi , DG-1-quest-done ) ;
7912: LD_EXP 24
7916: PPUSH
7917: LD_STRING DG-1-quest-done
7919: PPUSH
7920: CALL_OW 88
// end ;
7924: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7925: LD_INT 5
7927: PPUSH
7928: LD_EXP 23
7932: PPUSH
7933: CALL_OW 292
7937: PUSH
7938: LD_EXP 23
7942: PPUSH
7943: LD_EXP 27
7947: PPUSH
7948: CALL_OW 296
7952: PUSH
7953: LD_INT 6
7955: LESS
7956: AND
7957: PUSH
7958: LD_EXP 8
7962: AND
7963: PUSH
7964: LD_EXP 14
7968: NOT
7969: AND
7970: IFFALSE 8108
7972: GO 7974
7974: DISABLE
7975: LD_INT 0
7977: PPUSH
// begin attackDeltaAllowed := true ;
7978: LD_ADDR_EXP 14
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// InGameOn ;
7986: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
7990: LD_EXP 23
7994: PPUSH
7995: CALL_OW 87
// wait ( 0 0$0.3 ) ;
7999: LD_INT 10
8001: PPUSH
8002: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8006: LD_EXP 27
8010: PPUSH
8011: LD_EXP 23
8015: PPUSH
8016: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8020: LD_EXP 23
8024: PPUSH
8025: LD_EXP 27
8029: PPUSH
8030: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8034: LD_EXP 23
8038: PPUSH
8039: LD_STRING DH-1-return
8041: PPUSH
8042: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8046: LD_EXP 27
8050: PPUSH
8051: LD_STRING DA-1-return
8053: PPUSH
8054: CALL_OW 88
// InGameOff ;
8058: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8062: LD_STRING ODelta
8064: PPUSH
8065: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8069: LD_ADDR_VAR 0 1
8073: PUSH
8074: LD_INT 22
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PPUSH
8084: CALL_OW 69
8088: PUSH
8089: FOR_IN
8090: IFFALSE 8106
// SetSide ( i , 2 ) ;
8092: LD_VAR 0 1
8096: PPUSH
8097: LD_INT 2
8099: PPUSH
8100: CALL_OW 235
8104: GO 8089
8106: POP
8107: POP
// end ;
8108: PPOPN 1
8110: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8111: LD_EXP 10
8115: PUSH
8116: LD_EXP 14
8120: NOT
8121: AND
8122: IFFALSE 8135
8124: GO 8126
8126: DISABLE
// spottedBeforeRadio := true ;
8127: LD_ADDR_EXP 6
8131: PUSH
8132: LD_INT 1
8134: ST_TO_ADDR
8135: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8136: LD_EXP 14
8140: PUSH
8141: LD_EXP 30
8145: PPUSH
8146: CALL_OW 302
8150: AND
8151: PUSH
8152: LD_INT 1
8154: PPUSH
8155: CALL_OW 255
8159: PUSH
8160: LD_INT 1
8162: EQUAL
8163: AND
8164: PUSH
8165: LD_EXP 20
8169: PPUSH
8170: CALL_OW 302
8174: AND
8175: PUSH
8176: LD_EXP 10
8180: NOT
8181: AND
8182: IFFALSE 9398
8184: GO 8186
8186: DISABLE
8187: LD_INT 0
8189: PPUSH
8190: PPUSH
8191: PPUSH
// begin trap := 0 ;
8192: LD_ADDR_EXP 17
8196: PUSH
8197: LD_INT 0
8199: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8200: LD_INT 420
8202: PPUSH
8203: CALL_OW 67
// DialogueOn ;
8207: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8211: LD_EXP 30
8215: PPUSH
8216: LD_STRING DMar-1-radio
8218: PPUSH
8219: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8223: LD_EXP 23
8227: PPUSH
8228: LD_STRING DH-1-radio
8230: PPUSH
8231: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8235: LD_EXP 30
8239: PPUSH
8240: LD_STRING DMar-2-radio
8242: PPUSH
8243: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8247: LD_EXP 23
8251: PPUSH
8252: LD_STRING DH-2-radio
8254: PPUSH
8255: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8259: LD_EXP 26
8263: PPUSH
8264: CALL_OW 302
8268: PUSH
8269: LD_EXP 29
8273: PPUSH
8274: CALL_OW 302
8278: OR
8279: IFFALSE 9398
// begin case Query ( Q1Trap ) of 1 :
8281: LD_STRING Q1Trap
8283: PPUSH
8284: CALL_OW 97
8288: PUSH
8289: LD_INT 1
8291: DOUBLE
8292: EQUAL
8293: IFTRUE 8297
8295: GO 8491
8297: POP
// begin if IsOk ( Kamil ) then
8298: LD_EXP 26
8302: PPUSH
8303: CALL_OW 302
8307: IFFALSE 8386
// begin Say ( Kamil , DKam-2-radio ) ;
8309: LD_EXP 26
8313: PPUSH
8314: LD_STRING DKam-2-radio
8316: PPUSH
8317: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8321: LD_EXP 26
8325: PPUSH
8326: LD_STRING DKam-3-radio
8328: PPUSH
8329: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8333: LD_EXP 20
8337: PPUSH
8338: LD_STRING DDelta-3-radio
8340: PPUSH
8341: CALL_OW 94
// dwait ( 0 0$01 ) ;
8345: LD_INT 35
8347: PPUSH
8348: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8352: LD_EXP 23
8356: PPUSH
8357: LD_STRING DH-3-radio
8359: PPUSH
8360: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8364: LD_EXP 26
8368: PPUSH
8369: LD_STRING DKam-4-radio
8371: PPUSH
8372: CALL_OW 88
// trap := 1 ;
8376: LD_ADDR_EXP 17
8380: PUSH
8381: LD_INT 1
8383: ST_TO_ADDR
// end else
8384: GO 8485
// begin Say ( Sophia , DS-1-radio ) ;
8386: LD_EXP 29
8390: PPUSH
8391: LD_STRING DS-1-radio
8393: PPUSH
8394: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8398: LD_EXP 29
8402: PPUSH
8403: LD_STRING DS-2-radio
8405: PPUSH
8406: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8410: LD_EXP 20
8414: PPUSH
8415: LD_STRING DDelta-2-radio-s
8417: PPUSH
8418: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8422: LD_EXP 29
8426: PPUSH
8427: LD_STRING DS-3-radio
8429: PPUSH
8430: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8434: LD_EXP 20
8438: PPUSH
8439: LD_STRING DDelta-3-radio-s
8441: PPUSH
8442: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8446: LD_EXP 29
8450: PPUSH
8451: LD_STRING DS-4-radio-s
8453: PPUSH
8454: CALL_OW 88
// dwait ( 0 0$01 ) ;
8458: LD_INT 35
8460: PPUSH
8461: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8465: LD_EXP 23
8469: PPUSH
8470: LD_STRING DH-1-trap
8472: PPUSH
8473: CALL_OW 88
// trap := 0 ;
8477: LD_ADDR_EXP 17
8481: PUSH
8482: LD_INT 0
8484: ST_TO_ADDR
// end ; DialogueOff ;
8485: CALL_OW 7
// end ; 2 :
8489: GO 8509
8491: LD_INT 2
8493: DOUBLE
8494: EQUAL
8495: IFTRUE 8499
8497: GO 8508
8499: POP
// begin DialogueOff ;
8500: CALL_OW 7
// exit ;
8504: GO 9398
// end ; end ;
8506: GO 8509
8508: POP
// if trap = 1 then
8509: LD_EXP 17
8513: PUSH
8514: LD_INT 1
8516: EQUAL
8517: IFFALSE 8969
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8519: LD_INT 64
8521: PPUSH
8522: LD_INT 32
8524: PPUSH
8525: LD_INT 2
8527: PPUSH
8528: LD_INT 8
8530: PPUSH
8531: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8535: LD_INT 64
8537: PPUSH
8538: LD_INT 32
8540: PPUSH
8541: CALL_OW 84
// tmp := [ ] ;
8545: LD_ADDR_VAR 0 3
8549: PUSH
8550: EMPTY
8551: ST_TO_ADDR
// k := 3 ;
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 3
8559: ST_TO_ADDR
// if usForces < 3 then
8560: LD_EXP 21
8564: PUSH
8565: LD_INT 3
8567: LESS
8568: IFFALSE 8580
// k := usForces ;
8570: LD_ADDR_VAR 0 2
8574: PUSH
8575: LD_EXP 21
8579: ST_TO_ADDR
// for i := 1 to k do
8580: LD_ADDR_VAR 0 1
8584: PUSH
8585: DOUBLE
8586: LD_INT 1
8588: DEC
8589: ST_TO_ADDR
8590: LD_VAR 0 2
8594: PUSH
8595: FOR_TO
8596: IFFALSE 8651
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8598: LD_ADDR_VAR 0 3
8602: PUSH
8603: LD_VAR 0 3
8607: PPUSH
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 1
8615: PLUS
8616: PPUSH
8617: LD_EXP 21
8621: PUSH
8622: LD_INT 1
8624: ARRAY
8625: PPUSH
8626: CALL_OW 1
8630: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8631: LD_ADDR_EXP 21
8635: PUSH
8636: LD_EXP 21
8640: PPUSH
8641: LD_INT 1
8643: PPUSH
8644: CALL_OW 3
8648: ST_TO_ADDR
// end ;
8649: GO 8595
8651: POP
8652: POP
// usPatrol := tmp ;
8653: LD_ADDR_EXP 16
8657: PUSH
8658: LD_VAR 0 3
8662: ST_TO_ADDR
// for i in tmp do
8663: LD_ADDR_VAR 0 1
8667: PUSH
8668: LD_VAR 0 3
8672: PUSH
8673: FOR_IN
8674: IFFALSE 8804
// begin if IsInUnit ( i ) then
8676: LD_VAR 0 1
8680: PPUSH
8681: CALL_OW 310
8685: IFFALSE 8696
// ComExitBuilding ( i ) ;
8687: LD_VAR 0 1
8691: PPUSH
8692: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8696: LD_VAR 0 1
8700: PPUSH
8701: LD_INT 63
8703: PPUSH
8704: LD_INT 31
8706: PPUSH
8707: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8711: LD_VAR 0 1
8715: PPUSH
8716: LD_INT 70
8718: PPUSH
8719: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: LD_INT 103
8730: PPUSH
8731: LD_INT 43
8733: PPUSH
8734: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8738: LD_VAR 0 1
8742: PPUSH
8743: LD_INT 105
8745: PPUSH
8746: CALL_OW 202
// if Difficulty > 1 then
8750: LD_OWVAR 67
8754: PUSH
8755: LD_INT 1
8757: GREATER
8758: IFFALSE 8775
// AddComAgressiveMove ( i , 114 , 69 ) ;
8760: LD_VAR 0 1
8764: PPUSH
8765: LD_INT 114
8767: PPUSH
8768: LD_INT 69
8770: PPUSH
8771: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8775: LD_VAR 0 1
8779: PPUSH
8780: LD_INT 105
8782: PPUSH
8783: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8787: LD_VAR 0 1
8791: PPUSH
8792: LD_INT 42
8794: PPUSH
8795: LD_INT 20
8797: PPUSH
8798: CALL_OW 174
// end ;
8802: GO 8673
8804: POP
8805: POP
// wait ( 0 0$8 ) ;
8806: LD_INT 280
8808: PPUSH
8809: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8813: LD_INT 64
8815: PPUSH
8816: LD_INT 32
8818: PPUSH
8819: LD_INT 2
8821: PPUSH
8822: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8826: LD_INT 35
8828: PPUSH
8829: CALL_OW 67
// for i in tmp do
8833: LD_ADDR_VAR 0 1
8837: PUSH
8838: LD_VAR 0 3
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8875
// if IsDead ( i ) then
8846: LD_VAR 0 1
8850: PPUSH
8851: CALL_OW 301
8855: IFFALSE 8873
// tmp := tmp diff i ;
8857: LD_ADDR_VAR 0 3
8861: PUSH
8862: LD_VAR 0 3
8866: PUSH
8867: LD_VAR 0 1
8871: DIFF
8872: ST_TO_ADDR
8873: GO 8843
8875: POP
8876: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8877: LD_VAR 0 3
8881: NOT
8882: PUSH
8883: LD_VAR 0 3
8887: PPUSH
8888: LD_INT 95
8890: PUSH
8891: LD_INT 7
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 3
8900: PUSH
8901: LD_INT 60
8903: PUSH
8904: EMPTY
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: PPUSH
8915: CALL_OW 72
8919: PUSH
8920: LD_VAR 0 3
8924: EQUAL
8925: OR
8926: IFFALSE 8826
// if tmp then
8928: LD_VAR 0 3
8932: IFFALSE 8959
// begin usPatrol := [ ] ;
8934: LD_ADDR_EXP 16
8938: PUSH
8939: EMPTY
8940: ST_TO_ADDR
// usForces := usForces union tmp ;
8941: LD_ADDR_EXP 21
8945: PUSH
8946: LD_EXP 21
8950: PUSH
8951: LD_VAR 0 3
8955: UNION
8956: ST_TO_ADDR
// end else
8957: GO 8967
// trickyMove := true ;
8959: LD_ADDR_EXP 15
8963: PUSH
8964: LD_INT 1
8966: ST_TO_ADDR
// end else
8967: GO 9398
// begin tmp := [ ] ;
8969: LD_ADDR_VAR 0 3
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// k := 4 ;
8976: LD_ADDR_VAR 0 2
8980: PUSH
8981: LD_INT 4
8983: ST_TO_ADDR
// if usForces < 4 then
8984: LD_EXP 21
8988: PUSH
8989: LD_INT 4
8991: LESS
8992: IFFALSE 9004
// k := usForces ;
8994: LD_ADDR_VAR 0 2
8998: PUSH
8999: LD_EXP 21
9003: ST_TO_ADDR
// for i := 1 to k do
9004: LD_ADDR_VAR 0 1
9008: PUSH
9009: DOUBLE
9010: LD_INT 1
9012: DEC
9013: ST_TO_ADDR
9014: LD_VAR 0 2
9018: PUSH
9019: FOR_TO
9020: IFFALSE 9075
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9022: LD_ADDR_VAR 0 3
9026: PUSH
9027: LD_VAR 0 3
9031: PPUSH
9032: LD_VAR 0 3
9036: PUSH
9037: LD_INT 1
9039: PLUS
9040: PPUSH
9041: LD_EXP 21
9045: PUSH
9046: LD_INT 1
9048: ARRAY
9049: PPUSH
9050: CALL_OW 1
9054: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9055: LD_ADDR_EXP 21
9059: PUSH
9060: LD_EXP 21
9064: PPUSH
9065: LD_INT 1
9067: PPUSH
9068: CALL_OW 3
9072: ST_TO_ADDR
// end ;
9073: GO 9019
9075: POP
9076: POP
// if Lynch then
9077: LD_EXP 20
9081: IFFALSE 9099
// tmp := tmp ^ Lynch ;
9083: LD_ADDR_VAR 0 3
9087: PUSH
9088: LD_VAR 0 3
9092: PUSH
9093: LD_EXP 20
9097: ADD
9098: ST_TO_ADDR
// usPatrol := tmp ;
9099: LD_ADDR_EXP 16
9103: PUSH
9104: LD_VAR 0 3
9108: ST_TO_ADDR
// for i in tmp do
9109: LD_ADDR_VAR 0 1
9113: PUSH
9114: LD_VAR 0 3
9118: PUSH
9119: FOR_IN
9120: IFFALSE 9213
// begin if IsInUnit ( i ) then
9122: LD_VAR 0 1
9126: PPUSH
9127: CALL_OW 310
9131: IFFALSE 9142
// ComExitBuilding ( i ) ;
9133: LD_VAR 0 1
9137: PPUSH
9138: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_INT 69
9149: PPUSH
9150: LD_INT 15
9152: PPUSH
9153: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9157: LD_VAR 0 1
9161: PPUSH
9162: LD_INT 700
9164: PPUSH
9165: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9169: LD_VAR 0 1
9173: PPUSH
9174: LD_INT 55
9176: PPUSH
9177: LD_INT 43
9179: PPUSH
9180: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9184: LD_VAR 0 1
9188: PPUSH
9189: LD_INT 700
9191: PPUSH
9192: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9196: LD_VAR 0 1
9200: PPUSH
9201: LD_INT 42
9203: PPUSH
9204: LD_INT 20
9206: PPUSH
9207: CALL_OW 174
// end ;
9211: GO 9119
9213: POP
9214: POP
// repeat wait ( 0 0$1 ) ;
9215: LD_INT 35
9217: PPUSH
9218: CALL_OW 67
// for i in tmp do
9222: LD_ADDR_VAR 0 1
9226: PUSH
9227: LD_VAR 0 3
9231: PUSH
9232: FOR_IN
9233: IFFALSE 9264
// if IsDead ( i ) then
9235: LD_VAR 0 1
9239: PPUSH
9240: CALL_OW 301
9244: IFFALSE 9262
// tmp := tmp diff i ;
9246: LD_ADDR_VAR 0 3
9250: PUSH
9251: LD_VAR 0 3
9255: PUSH
9256: LD_VAR 0 1
9260: DIFF
9261: ST_TO_ADDR
9262: GO 9232
9264: POP
9265: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9266: LD_VAR 0 3
9270: NOT
9271: PUSH
9272: LD_VAR 0 3
9276: PPUSH
9277: LD_INT 95
9279: PUSH
9280: LD_INT 7
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: LD_INT 60
9292: PUSH
9293: EMPTY
9294: LIST
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PPUSH
9304: CALL_OW 72
9308: PUSH
9309: LD_VAR 0 3
9313: EQUAL
9314: OR
9315: IFFALSE 9215
// if not tmp then
9317: LD_VAR 0 3
9321: NOT
9322: IFFALSE 9334
// trickyMove := true else
9324: LD_ADDR_EXP 15
9328: PUSH
9329: LD_INT 1
9331: ST_TO_ADDR
9332: GO 9341
// usPatrol := [ ] ;
9334: LD_ADDR_EXP 16
9338: PUSH
9339: EMPTY
9340: ST_TO_ADDR
// if tmp diff Lynch then
9341: LD_VAR 0 3
9345: PUSH
9346: LD_EXP 20
9350: DIFF
9351: IFFALSE 9375
// usForces := usForces union ( tmp diff Lynch ) ;
9353: LD_ADDR_EXP 21
9357: PUSH
9358: LD_EXP 21
9362: PUSH
9363: LD_VAR 0 3
9367: PUSH
9368: LD_EXP 20
9372: DIFF
9373: UNION
9374: ST_TO_ADDR
// if IsOk ( Lynch ) then
9375: LD_EXP 20
9379: PPUSH
9380: CALL_OW 302
9384: IFFALSE 9398
// ComEnterUnit ( Lynch , Delta ) ;
9386: LD_EXP 20
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: CALL_OW 120
// end ; end ; end ;
9398: PPOPN 3
9400: END
// every 0 0$1 trigger trickyMove do
9401: LD_EXP 15
9405: IFFALSE 9417
9407: GO 9409
9409: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9410: LD_STRING ACH_TRAP
9412: PPUSH
9413: CALL_OW 543
9417: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9418: LD_INT 22
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: PUSH
9428: LD_INT 23
9430: PUSH
9431: LD_INT 1
9433: PUSH
9434: EMPTY
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 21
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 69
9457: IFFALSE 9469
9459: GO 9461
9461: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9462: LD_STRING ACH_SCRAP
9464: PPUSH
9465: CALL_OW 543
9469: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9470: LD_EXP 16
9474: PPUSH
9475: LD_INT 101
9477: PUSH
9478: LD_INT 2
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: PPUSH
9485: CALL_OW 72
9489: PUSH
9490: LD_INT 1
9492: PPUSH
9493: LD_EXP 23
9497: PPUSH
9498: CALL_OW 292
9502: AND
9503: IFFALSE 9636
9505: GO 9507
9507: DISABLE
// begin if not trap then
9508: LD_EXP 17
9512: NOT
9513: IFFALSE 9541
// begin Say ( Heike , DH-2-trap ) ;
9515: LD_EXP 23
9519: PPUSH
9520: LD_STRING DH-2-trap
9522: PPUSH
9523: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9527: LD_EXP 25
9531: PPUSH
9532: LD_STRING DM-2-trap
9534: PPUSH
9535: CALL_OW 88
// end else
9539: GO 9553
// begin Say ( Heike , DH-1-trap-a ) ;
9541: LD_EXP 23
9545: PPUSH
9546: LD_STRING DH-1-trap-a
9548: PPUSH
9549: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9553: LD_INT 35
9555: PPUSH
9556: CALL_OW 67
// until trickyMove ;
9560: LD_EXP 15
9564: IFFALSE 9553
// Say ( Heike , DH-3-trap ) ;
9566: LD_EXP 23
9570: PPUSH
9571: LD_STRING DH-3-trap
9573: PPUSH
9574: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9578: LD_EXP 24
9582: PPUSH
9583: CALL_OW 302
9587: PUSH
9588: LD_EXP 28
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: IFFALSE 9636
// begin Say ( Givi , DG-3-trap ) ;
9600: LD_EXP 24
9604: PPUSH
9605: LD_STRING DG-3-trap
9607: PPUSH
9608: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9612: LD_EXP 28
9616: PPUSH
9617: LD_STRING DK-3-trap
9619: PPUSH
9620: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9624: LD_EXP 24
9628: PPUSH
9629: LD_STRING DG-4-trap
9631: PPUSH
9632: CALL_OW 88
// end ; end ;
9636: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9637: LD_INT 1
9639: PPUSH
9640: CALL_OW 255
9644: PUSH
9645: LD_INT 2
9647: EQUAL
9648: PUSH
9649: LD_EXP 14
9653: AND
9654: IFFALSE 9813
9656: GO 9658
9658: DISABLE
9659: LD_INT 0
9661: PPUSH
9662: PPUSH
// begin if not IsOk ( Kaia ) then
9663: LD_EXP 28
9667: PPUSH
9668: CALL_OW 302
9672: NOT
9673: IFFALSE 9677
// exit ;
9675: GO 9813
// if tick < 5 5$00 then
9677: LD_OWVAR 1
9681: PUSH
9682: LD_INT 10500
9684: LESS
9685: IFFALSE 9694
// SetAchievement ( ACH_DELTA ) ;
9687: LD_STRING ACH_DELTA
9689: PPUSH
9690: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9694: LD_EXP 28
9698: PPUSH
9699: LD_STRING DK-1-capture
9701: PPUSH
9702: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9706: LD_EXP 23
9710: PPUSH
9711: LD_STRING DH-1-capture
9713: PPUSH
9714: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9718: LD_ADDR_VAR 0 2
9722: PUSH
9723: LD_INT 22
9725: PUSH
9726: LD_INT 1
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 25
9735: PUSH
9736: LD_INT 1
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: PPUSH
9747: CALL_OW 69
9751: ST_TO_ADDR
// if not tmp then
9752: LD_VAR 0 2
9756: NOT
9757: IFFALSE 9761
// exit ;
9759: GO 9813
// for i in tmp do
9761: LD_ADDR_VAR 0 1
9765: PUSH
9766: LD_VAR 0 2
9770: PUSH
9771: FOR_IN
9772: IFFALSE 9811
// begin if IsInUnit ( i ) then
9774: LD_VAR 0 1
9778: PPUSH
9779: CALL_OW 310
9783: IFFALSE 9794
// ComExitBuilding ( i ) ;
9785: LD_VAR 0 1
9789: PPUSH
9790: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9794: LD_VAR 0 1
9798: PPUSH
9799: LD_INT 38
9801: PPUSH
9802: LD_INT 23
9804: PPUSH
9805: CALL_OW 174
// end ;
9809: GO 9771
9811: POP
9812: POP
// end ;
9813: PPOPN 2
9815: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9816: LD_INT 3
9818: PPUSH
9819: CALL_OW 255
9823: PUSH
9824: LD_INT 2
9826: EQUAL
9827: PUSH
9828: LD_EXP 14
9832: AND
9833: IFFALSE 9865
9835: GO 9837
9837: DISABLE
// begin DialogueOn ;
9838: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9842: LD_EXP 27
9846: PPUSH
9847: LD_STRING DA-1-capture
9849: PPUSH
9850: CALL_OW 88
// DialogueOff ;
9854: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9858: LD_STRING OTame
9860: PPUSH
9861: CALL_OW 337
// end ;
9865: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9866: LD_INT 1
9868: PPUSH
9869: LD_INT 2
9871: PPUSH
9872: CALL_OW 321
9876: PUSH
9877: LD_INT 2
9879: EQUAL
9880: PUSH
9881: LD_EXP 14
9885: AND
9886: IFFALSE 10037
9888: GO 9890
9890: DISABLE
// begin DialogueOn ;
9891: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9895: LD_EXP 27
9899: PPUSH
9900: LD_STRING DA-1-ape
9902: PPUSH
9903: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9907: LD_EXP 23
9911: PPUSH
9912: LD_STRING DH-1-ape
9914: PPUSH
9915: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9919: LD_EXP 27
9923: PPUSH
9924: LD_STRING DA-2-ape
9926: PPUSH
9927: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9931: LD_EXP 27
9935: PPUSH
9936: LD_STRING DA-3-ape
9938: PPUSH
9939: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9943: LD_EXP 23
9947: PPUSH
9948: LD_STRING DH-3-ape
9950: PPUSH
9951: CALL_OW 88
// DialogueOff ;
9955: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9959: LD_INT 22
9961: PUSH
9962: LD_INT 0
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 25
9971: PUSH
9972: LD_INT 12
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PPUSH
9983: CALL_OW 69
9987: PUSH
9988: LD_INT 0
9990: EQUAL
9991: IFFALSE 10003
// SpawnApeman ( forest , 2 ) ;
9993: LD_INT 1
9995: PPUSH
9996: LD_INT 2
9998: PPUSH
9999: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10003: LD_INT 35
10005: PPUSH
10006: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10010: LD_INT 25
10012: PUSH
10013: LD_INT 12
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: PUSH
10025: LD_INT 0
10027: EQUAL
10028: IFFALSE 10003
// YouLost ( Ape ) ;
10030: LD_STRING Ape
10032: PPUSH
10033: CALL_OW 104
// end ;
10037: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10038: LD_EXP 18
10042: PUSH
10043: LD_INT 3
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: LD_OWVAR 67
10061: ARRAY
10062: GREATEREQUAL
10063: IFFALSE 10107
10065: GO 10067
10067: DISABLE
// begin DialogueOn ;
10068: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10072: LD_EXP 27
10076: PPUSH
10077: LD_STRING DA-1-failure
10079: PPUSH
10080: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10084: LD_EXP 27
10088: PPUSH
10089: LD_STRING DA-2-failure
10091: PPUSH
10092: CALL_OW 88
// YouLost ( Failure ) ;
10096: LD_STRING Failure
10098: PPUSH
10099: CALL_OW 104
// DialogueOff ;
10103: CALL_OW 7
// end ;
10107: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10108: LD_EXP 28
10112: PPUSH
10113: CALL_OW 256
10117: PUSH
10118: LD_INT 3
10120: LESS
10121: IFFALSE 10254
10123: GO 10125
10125: DISABLE
// begin DialogueOn ;
10126: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10130: LD_EXP 28
10134: PPUSH
10135: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10139: LD_EXP 28
10143: PPUSH
10144: LD_STRING DK-Kaiaout-1
10146: PPUSH
10147: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10151: LD_EXP 23
10155: PPUSH
10156: LD_STRING DH-Kaiaout-2
10158: PPUSH
10159: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10163: LD_EXP 24
10167: PPUSH
10168: LD_STRING DG-Kaiaout-3
10170: PPUSH
10171: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10175: LD_EXP 23
10179: PPUSH
10180: LD_STRING DH-Kaiaout-4
10182: PPUSH
10183: CALL_OW 88
// if Givi then
10187: LD_EXP 24
10191: IFFALSE 10241
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10193: LD_EXP 24
10197: PPUSH
10198: LD_STRING DG-Kaiaout-5
10200: PPUSH
10201: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10205: LD_EXP 23
10209: PPUSH
10210: LD_STRING DH-Kaiaout-6
10212: PPUSH
10213: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10217: LD_EXP 24
10221: PPUSH
10222: LD_STRING DG-Kaiaout-7
10224: PPUSH
10225: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10229: LD_EXP 23
10233: PPUSH
10234: LD_STRING DH-Kaiaout-8
10236: PPUSH
10237: CALL_OW 88
// end ; DialogueOff ;
10241: CALL_OW 7
// KillUnit ( Kaia ) ;
10245: LD_EXP 28
10249: PPUSH
10250: CALL_OW 66
// end ;
10254: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10255: LD_INT 22
10257: PUSH
10258: LD_INT 2
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 23
10267: PUSH
10268: LD_INT 0
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: PPUSH
10279: CALL_OW 69
10283: PUSH
10284: LD_EXP 27
10288: PPUSH
10289: CALL_OW 302
10293: AND
10294: PUSH
10295: LD_EXP 27
10299: PPUSH
10300: CALL_OW 255
10304: PUSH
10305: LD_INT 2
10307: EQUAL
10308: AND
10309: IFFALSE 11081
10311: GO 10313
10313: DISABLE
10314: LD_INT 0
10316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10317: LD_ADDR_VAR 0 1
10321: PUSH
10322: LD_INT 22
10324: PUSH
10325: LD_INT 2
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 23
10334: PUSH
10335: LD_INT 0
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PPUSH
10346: CALL_OW 69
10350: ST_TO_ADDR
// InGameOn ;
10351: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10355: LD_VAR 0 1
10359: PPUSH
10360: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10364: LD_VAR 0 1
10368: PPUSH
10369: LD_EXP 27
10373: PPUSH
10374: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10378: LD_EXP 27
10382: PPUSH
10383: LD_VAR 0 1
10387: PPUSH
10388: CALL_OW 119
// wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10399: LD_EXP 27
10403: PPUSH
10404: LD_STRING DA-1-tame-a
10406: PPUSH
10407: CALL_OW 88
// if IsOk ( Mike ) then
10411: LD_EXP 25
10415: PPUSH
10416: CALL_OW 302
10420: IFFALSE 10458
// begin Say ( Mike , DM-1-tame-a ) ;
10422: LD_EXP 25
10426: PPUSH
10427: LD_STRING DM-1-tame-a
10429: PPUSH
10430: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10434: LD_EXP 29
10438: PPUSH
10439: LD_STRING DS-1-tame-a
10441: PPUSH
10442: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10446: LD_EXP 25
10450: PPUSH
10451: LD_STRING DM-2-tame-a
10453: PPUSH
10454: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10458: LD_INT 105
10460: PPUSH
10461: CALL_OW 67
// PrepareFarmer ;
10465: CALL 11756 0 0
// CenterOnUnits ( Farmer ) ;
10469: LD_EXP 31
10473: PPUSH
10474: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10478: LD_EXP 31
10482: PPUSH
10483: LD_INT 105
10485: PPUSH
10486: LD_INT 59
10488: PPUSH
10489: CALL_OW 111
// AddComHold ( Farmer ) ;
10493: LD_EXP 31
10497: PPUSH
10498: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10502: LD_EXP 31
10506: PPUSH
10507: LD_STRING DF-1-end
10509: PPUSH
10510: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10514: LD_EXP 27
10518: PPUSH
10519: LD_STRING DA-1-end
10521: PPUSH
10522: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10526: LD_EXP 31
10530: PPUSH
10531: LD_STRING DF-2-end
10533: PPUSH
10534: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10538: LD_EXP 27
10542: PPUSH
10543: LD_STRING DA-2-end
10545: PPUSH
10546: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10550: LD_EXP 31
10554: PPUSH
10555: LD_STRING DF-3-end
10557: PPUSH
10558: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10562: LD_EXP 23
10566: PPUSH
10567: LD_STRING DH-3-end
10569: PPUSH
10570: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10574: LD_EXP 31
10578: PPUSH
10579: LD_STRING DF-4-end
10581: PPUSH
10582: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10586: LD_OWVAR 1
10590: PUSH
10591: LD_INT 52500
10593: PUSH
10594: LD_INT 47250
10596: PUSH
10597: LD_INT 42000
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: LD_OWVAR 67
10609: ARRAY
10610: LESSEQUAL
10611: IFFALSE 10625
// AddMedal ( med1 , 1 ) else
10613: LD_STRING med1
10615: PPUSH
10616: LD_INT 1
10618: PPUSH
10619: CALL_OW 101
10623: GO 10636
// AddMedal ( med1 , - 1 ) ;
10625: LD_STRING med1
10627: PPUSH
10628: LD_INT 1
10630: NEG
10631: PPUSH
10632: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10636: LD_INT 22
10638: PUSH
10639: LD_INT 1
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 25
10648: PUSH
10649: LD_INT 4
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PPUSH
10660: CALL_OW 69
10664: PUSH
10665: LD_INT 0
10667: EQUAL
10668: PUSH
10669: LD_EXP 12
10673: NOT
10674: AND
10675: IFFALSE 10689
// AddMedal ( med2 , 1 ) else
10677: LD_STRING med2
10679: PPUSH
10680: LD_INT 1
10682: PPUSH
10683: CALL_OW 101
10687: GO 10700
// AddMedal ( med2 , - 1 ) ;
10689: LD_STRING med2
10691: PPUSH
10692: LD_INT 1
10694: NEG
10695: PPUSH
10696: CALL_OW 101
// if trickyMove then
10700: LD_EXP 15
10704: IFFALSE 10718
// AddMedal ( med3 , 1 ) else
10706: LD_STRING med3
10708: PPUSH
10709: LD_INT 1
10711: PPUSH
10712: CALL_OW 101
10716: GO 10748
// if spottedBeforeRadio then
10718: LD_EXP 6
10722: IFFALSE 10737
// AddMedal ( med3 , - 2 ) else
10724: LD_STRING med3
10726: PPUSH
10727: LD_INT 2
10729: NEG
10730: PPUSH
10731: CALL_OW 101
10735: GO 10748
// AddMedal ( med3 , - 1 ) ;
10737: LD_STRING med3
10739: PPUSH
10740: LD_INT 1
10742: NEG
10743: PPUSH
10744: CALL_OW 101
// GiveMedals ( MAIN ) ;
10748: LD_STRING MAIN
10750: PPUSH
10751: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10755: LD_VAR 0 1
10759: PPUSH
10760: LD_STRING 02_ape
10762: PPUSH
10763: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10767: LD_ADDR_VAR 0 1
10771: PUSH
10772: LD_INT 22
10774: PUSH
10775: LD_INT 2
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 23
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 21
10794: PUSH
10795: LD_INT 1
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: PPUSH
10807: CALL_OW 69
10811: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10821: LD_EXP 23
10825: PPUSH
10826: LD_STRING 02_Heike
10828: PPUSH
10829: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10833: LD_EXP 27
10837: PPUSH
10838: LD_STRING 02_Aviradze
10840: PPUSH
10841: CALL_OW 38
// if Givi then
10845: LD_EXP 24
10849: IFFALSE 10863
// SaveCharacters ( Givi , 02_Givi ) ;
10851: LD_EXP 24
10855: PPUSH
10856: LD_STRING 02_Givi
10858: PPUSH
10859: CALL_OW 38
// if Mike then
10863: LD_EXP 25
10867: IFFALSE 10881
// SaveCharacters ( Mike , 02_Mike ) ;
10869: LD_EXP 25
10873: PPUSH
10874: LD_STRING 02_Mike
10876: PPUSH
10877: CALL_OW 38
// if Kamil then
10881: LD_EXP 26
10885: IFFALSE 10899
// SaveCharacters ( Kamil , 02_Kamil ) ;
10887: LD_EXP 26
10891: PPUSH
10892: LD_STRING 02_Kamil
10894: PPUSH
10895: CALL_OW 38
// if Kaia then
10899: LD_EXP 28
10903: IFFALSE 10917
// SaveCharacters ( Kaia , 02_Kaia ) ;
10905: LD_EXP 28
10909: PPUSH
10910: LD_STRING 02_Kaia
10912: PPUSH
10913: CALL_OW 38
// if Sophia then
10917: LD_EXP 29
10921: IFFALSE 10935
// SaveCharacters ( Sophia , 02_Sophia ) ;
10923: LD_EXP 29
10927: PPUSH
10928: LD_STRING 02_Sophia
10930: PPUSH
10931: CALL_OW 38
// if Markov then
10935: LD_EXP 30
10939: IFFALSE 10953
// SaveCharacters ( Markov , 02_Markov ) ;
10941: LD_EXP 30
10945: PPUSH
10946: LD_STRING 02_Markov
10948: PPUSH
10949: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
10953: LD_VAR 0 1
10957: PUSH
10958: LD_EXP 23
10962: PUSH
10963: LD_EXP 27
10967: PUSH
10968: LD_EXP 24
10972: PUSH
10973: LD_EXP 25
10977: PUSH
10978: LD_EXP 26
10982: PUSH
10983: LD_EXP 29
10987: PUSH
10988: LD_EXP 28
10992: PUSH
10993: LD_EXP 30
10997: PUSH
10998: EMPTY
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: DIFF
11008: IFFALSE 11073
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11010: LD_VAR 0 1
11014: PUSH
11015: LD_EXP 23
11019: PUSH
11020: LD_EXP 27
11024: PUSH
11025: LD_EXP 24
11029: PUSH
11030: LD_EXP 25
11034: PUSH
11035: LD_EXP 26
11039: PUSH
11040: LD_EXP 29
11044: PUSH
11045: LD_EXP 28
11049: PUSH
11050: LD_EXP 30
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: DIFF
11065: PPUSH
11066: LD_STRING 02_others
11068: PPUSH
11069: CALL_OW 38
// YouWin ;
11073: CALL_OW 103
// InGameOff ;
11077: CALL_OW 9
// end ;
11081: PPOPN 1
11083: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11084: LD_OWVAR 1
11088: PUSH
11089: LD_EXP 13
11093: GREATER
11094: PUSH
11095: LD_EXP 4
11099: AND
11100: IFFALSE 11140
11102: GO 11104
11104: DISABLE
// begin InGameOn ;
11105: CALL_OW 8
// PrepareFarmer ;
11109: CALL 11756 0 0
// CenterNowOnUnits ( Farmer ) ;
11113: LD_EXP 31
11117: PPUSH
11118: CALL_OW 87
// wait ( 0 0$2 ) ;
11122: LD_INT 70
11124: PPUSH
11125: CALL_OW 67
// YouLost ( Farmer ) ;
11129: LD_STRING Farmer
11131: PPUSH
11132: CALL_OW 104
// InGameOff ;
11136: CALL_OW 9
// end ; end_of_file
11140: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11141: LD_INT 0
11143: PPUSH
11144: PPUSH
11145: PPUSH
// uc_side := 2 ;
11146: LD_ADDR_OWVAR 20
11150: PUSH
11151: LD_INT 2
11153: ST_TO_ADDR
// uc_nation := 2 ;
11154: LD_ADDR_OWVAR 21
11158: PUSH
11159: LD_INT 2
11161: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11162: LD_ADDR_EXP 23
11166: PUSH
11167: LD_STRING Heike
11169: PPUSH
11170: LD_EXP 1
11174: NOT
11175: PPUSH
11176: LD_EXP 2
11180: PPUSH
11181: CALL 29513 0 3
11185: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11186: LD_EXP 23
11190: PPUSH
11191: LD_INT 83
11193: PPUSH
11194: LD_INT 72
11196: PPUSH
11197: LD_INT 0
11199: PPUSH
11200: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11204: LD_ADDR_EXP 24
11208: PUSH
11209: LD_STRING Givi
11211: PPUSH
11212: LD_EXP 1
11216: NOT
11217: PPUSH
11218: LD_EXP 2
11222: PPUSH
11223: CALL 29513 0 3
11227: ST_TO_ADDR
// if Givi then
11228: LD_EXP 24
11232: IFFALSE 11252
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11234: LD_EXP 24
11238: PPUSH
11239: LD_INT 87
11241: PPUSH
11242: LD_INT 76
11244: PPUSH
11245: LD_INT 0
11247: PPUSH
11248: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11252: LD_ADDR_EXP 25
11256: PUSH
11257: LD_STRING Mike
11259: PPUSH
11260: LD_EXP 1
11264: NOT
11265: PPUSH
11266: LD_EXP 2
11270: PPUSH
11271: CALL 29513 0 3
11275: ST_TO_ADDR
// if Mike then
11276: LD_EXP 25
11280: IFFALSE 11300
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11282: LD_EXP 25
11286: PPUSH
11287: LD_INT 84
11289: PPUSH
11290: LD_INT 76
11292: PPUSH
11293: LD_INT 0
11295: PPUSH
11296: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11300: LD_ADDR_EXP 26
11304: PUSH
11305: LD_STRING Kamil
11307: PPUSH
11308: LD_EXP 1
11312: NOT
11313: PPUSH
11314: LD_EXP 2
11318: PPUSH
11319: CALL 29513 0 3
11323: ST_TO_ADDR
// if Kamil then
11324: LD_EXP 26
11328: IFFALSE 11348
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11330: LD_EXP 26
11334: PPUSH
11335: LD_INT 85
11337: PPUSH
11338: LD_INT 78
11340: PPUSH
11341: LD_INT 0
11343: PPUSH
11344: CALL_OW 48
// uc_side := 5 ;
11348: LD_ADDR_OWVAR 20
11352: PUSH
11353: LD_INT 5
11355: ST_TO_ADDR
// uc_nation := 2 ;
11356: LD_ADDR_OWVAR 21
11360: PUSH
11361: LD_INT 2
11363: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11364: LD_ADDR_EXP 27
11368: PUSH
11369: LD_STRING Aviradze
11371: PPUSH
11372: LD_INT 0
11374: PPUSH
11375: LD_STRING 
11377: PPUSH
11378: CALL 29513 0 3
11382: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11383: LD_EXP 27
11387: PPUSH
11388: LD_INT 106
11390: PPUSH
11391: LD_INT 38
11393: PPUSH
11394: LD_INT 0
11396: PPUSH
11397: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11401: LD_EXP 27
11405: PPUSH
11406: LD_INT 103
11408: PPUSH
11409: LD_INT 38
11411: PPUSH
11412: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11416: LD_ADDR_EXP 28
11420: PUSH
11421: LD_STRING Kaia
11423: PPUSH
11424: LD_INT 0
11426: PPUSH
11427: LD_STRING 
11429: PPUSH
11430: CALL 29513 0 3
11434: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11435: LD_EXP 28
11439: PPUSH
11440: LD_INT 100
11442: PPUSH
11443: LD_INT 34
11445: PPUSH
11446: LD_INT 0
11448: PPUSH
11449: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11453: LD_EXP 28
11457: PPUSH
11458: LD_INT 100
11460: PPUSH
11461: LD_INT 39
11463: PPUSH
11464: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11468: LD_ADDR_EXP 29
11472: PUSH
11473: LD_STRING Sophia
11475: PPUSH
11476: LD_INT 0
11478: PPUSH
11479: LD_STRING 
11481: PPUSH
11482: CALL 29513 0 3
11486: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11487: LD_EXP 29
11491: PPUSH
11492: LD_INT 109
11494: PPUSH
11495: LD_INT 50
11497: PPUSH
11498: LD_INT 0
11500: PPUSH
11501: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11505: LD_EXP 29
11509: PPUSH
11510: LD_INT 100
11512: PPUSH
11513: LD_INT 39
11515: PPUSH
11516: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11520: LD_ADDR_EXP 30
11524: PUSH
11525: LD_STRING Markov
11527: PPUSH
11528: LD_INT 0
11530: PPUSH
11531: LD_STRING 
11533: PPUSH
11534: CALL 29513 0 3
11538: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11539: LD_INT 5
11541: PPUSH
11542: LD_INT 3
11544: PPUSH
11545: LD_INT 21
11547: PPUSH
11548: LD_INT 1
11550: PPUSH
11551: LD_INT 1
11553: PPUSH
11554: LD_INT 42
11556: PPUSH
11557: LD_INT 90
11559: PUSH
11560: LD_INT 70
11562: PUSH
11563: LD_INT 60
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_OWVAR 67
11575: ARRAY
11576: PPUSH
11577: CALL 237 0 7
// veh := CreateVehicle ;
11581: LD_ADDR_VAR 0 3
11585: PUSH
11586: CALL_OW 45
11590: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11591: LD_VAR 0 3
11595: PPUSH
11596: LD_INT 4
11598: PPUSH
11599: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11603: LD_VAR 0 3
11607: PPUSH
11608: LD_INT 109
11610: PPUSH
11611: LD_INT 38
11613: PPUSH
11614: LD_INT 0
11616: PPUSH
11617: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11621: LD_EXP 30
11625: PPUSH
11626: LD_VAR 0 3
11630: PPUSH
11631: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11635: LD_EXP 28
11639: PPUSH
11640: LD_EXP 27
11644: PPUSH
11645: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11649: LD_EXP 27
11653: PPUSH
11654: LD_EXP 28
11658: PPUSH
11659: CALL_OW 119
// if not Givi or not Mike then
11663: LD_EXP 24
11667: NOT
11668: PUSH
11669: LD_EXP 25
11673: NOT
11674: OR
11675: IFFALSE 11751
// begin uc_nation := 2 ;
11677: LD_ADDR_OWVAR 21
11681: PUSH
11682: LD_INT 2
11684: ST_TO_ADDR
// uc_side := 5 ;
11685: LD_ADDR_OWVAR 20
11689: PUSH
11690: LD_INT 5
11692: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11693: LD_INT 1
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: LD_INT 1
11701: PPUSH
11702: CALL_OW 380
// un := CreateHuman ;
11706: LD_ADDR_VAR 0 2
11710: PUSH
11711: CALL_OW 44
11715: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11716: LD_VAR 0 2
11720: PPUSH
11721: LD_INT 112
11723: PPUSH
11724: LD_INT 40
11726: PPUSH
11727: LD_INT 3
11729: PPUSH
11730: LD_INT 0
11732: PPUSH
11733: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11737: LD_VAR 0 2
11741: PPUSH
11742: LD_EXP 27
11746: PPUSH
11747: CALL_OW 119
// end ; end ;
11751: LD_VAR 0 1
11755: RET
// export function PrepareFarmer ; var i ; begin
11756: LD_INT 0
11758: PPUSH
11759: PPUSH
// uc_side := 5 ;
11760: LD_ADDR_OWVAR 20
11764: PUSH
11765: LD_INT 5
11767: ST_TO_ADDR
// uc_nation := 2 ;
11768: LD_ADDR_OWVAR 21
11772: PUSH
11773: LD_INT 2
11775: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11776: LD_ADDR_EXP 31
11780: PUSH
11781: LD_STRING Farmer
11783: PPUSH
11784: LD_INT 0
11786: PPUSH
11787: LD_STRING 
11789: PPUSH
11790: CALL 29513 0 3
11794: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11795: LD_EXP 31
11799: PPUSH
11800: LD_INT 106
11802: PPUSH
11803: LD_INT 62
11805: PPUSH
11806: LD_INT 0
11808: PPUSH
11809: CALL_OW 48
// for i := 1 to 5 do
11813: LD_ADDR_VAR 0 2
11817: PUSH
11818: DOUBLE
11819: LD_INT 1
11821: DEC
11822: ST_TO_ADDR
11823: LD_INT 5
11825: PUSH
11826: FOR_TO
11827: IFFALSE 11865
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11829: LD_INT 1
11831: PPUSH
11832: LD_INT 1
11834: PPUSH
11835: LD_INT 1
11837: PPUSH
11838: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
11842: CALL_OW 44
11846: PPUSH
11847: LD_INT 105
11849: PPUSH
11850: LD_INT 64
11852: PPUSH
11853: LD_INT 3
11855: PPUSH
11856: LD_INT 0
11858: PPUSH
11859: CALL_OW 50
// end ;
11863: GO 11826
11865: POP
11866: POP
// end ; end_of_file
11867: LD_VAR 0 1
11871: RET
// every 2 2$20 + 0 0$10 do
11872: GO 11874
11874: DISABLE
// begin enable ;
11875: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
11876: LD_INT 1
11878: PPUSH
11879: LD_INT 5
11881: PPUSH
11882: CALL_OW 12
11886: PPUSH
11887: LD_INT 1
11889: PPUSH
11890: LD_INT 1
11892: PPUSH
11893: CALL_OW 55
// if tick > 6 6$00 then
11897: LD_OWVAR 1
11901: PUSH
11902: LD_INT 12600
11904: GREATER
11905: IFFALSE 11908
// disable ;
11907: DISABLE
// end ; end_of_file
11908: END
// on UnitDestroyed ( un ) do begin if un = Heike then
11909: LD_VAR 0 1
11913: PUSH
11914: LD_EXP 23
11918: EQUAL
11919: IFFALSE 11928
// YouLost ( Heike ) ;
11921: LD_STRING Heike
11923: PPUSH
11924: CALL_OW 104
// if un = Aviradze then
11928: LD_VAR 0 1
11932: PUSH
11933: LD_EXP 27
11937: EQUAL
11938: IFFALSE 11947
// YouLost ( Aviradze ) ;
11940: LD_STRING Aviradze
11942: PPUSH
11943: CALL_OW 104
// if un = usLab then
11947: LD_VAR 0 1
11951: PUSH
11952: LD_INT 3
11954: EQUAL
11955: IFFALSE 11964
// YouLost ( Lab ) ;
11957: LD_STRING Lab
11959: PPUSH
11960: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
11964: LD_VAR 0 1
11968: PUSH
11969: LD_INT 22
11971: PUSH
11972: LD_INT 2
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 21
11981: PUSH
11982: LD_INT 1
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 2
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: PPUSH
12004: CALL_OW 69
12008: PUSH
12009: LD_EXP 23
12013: PUSH
12014: LD_EXP 27
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: DIFF
12023: IN
12024: PUSH
12025: LD_EXP 4
12029: AND
12030: IFFALSE 12046
// lostCounter := lostCounter + 1 ;
12032: LD_ADDR_EXP 18
12036: PUSH
12037: LD_EXP 18
12041: PUSH
12042: LD_INT 1
12044: PLUS
12045: ST_TO_ADDR
// end ;
12046: PPOPN 1
12048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12049: LD_INT 23
12051: PUSH
12052: LD_INT 2
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PUSH
12059: LD_INT 25
12061: PUSH
12062: LD_INT 2
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: PUSH
12069: EMPTY
12070: LIST
12071: LIST
12072: PPUSH
12073: CALL_OW 69
12077: PUSH
12078: LD_INT 0
12080: EQUAL
12081: PUSH
12082: LD_INT 22
12084: PUSH
12085: LD_INT 2
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 21
12094: PUSH
12095: LD_INT 3
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PPUSH
12106: CALL_OW 69
12110: PUSH
12111: LD_INT 0
12113: EQUAL
12114: AND
12115: IFFALSE 12127
12117: GO 12119
12119: DISABLE
// YouLost ( Eng ) ;
12120: LD_STRING Eng
12122: PPUSH
12123: CALL_OW 104
12127: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12128: LD_VAR 0 1
12132: PUSH
12133: LD_EXP 22
12137: IN
12138: PUSH
12139: LD_VAR 0 2
12143: PUSH
12144: LD_INT 2
12146: EQUAL
12147: AND
12148: IFFALSE 12180
// begin usSci := usSci diff un ;
12150: LD_ADDR_EXP 22
12154: PUSH
12155: LD_EXP 22
12159: PUSH
12160: LD_VAR 0 1
12164: DIFF
12165: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12166: LD_ADDR_EXP 9
12170: PUSH
12171: LD_EXP 9
12175: PUSH
12176: LD_INT 1
12178: PLUS
12179: ST_TO_ADDR
// end ; end ;
12180: PPOPN 3
12182: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12183: LD_VAR 0 1
12187: PUSH
12188: LD_INT 2
12190: EQUAL
12191: PUSH
12192: LD_VAR 0 2
12196: PUSH
12197: LD_INT 5
12199: EQUAL
12200: AND
12201: IFFALSE 12210
// YouLost ( FriendlyFire ) ;
12203: LD_STRING FriendlyFire
12205: PPUSH
12206: CALL_OW 104
// end ; end_of_file
12210: PPOPN 2
12212: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12213: LD_INT 0
12215: PPUSH
// ar_miner := 81 ;
12216: LD_ADDR_EXP 39
12220: PUSH
12221: LD_INT 81
12223: ST_TO_ADDR
// ar_crane := 88 ;
12224: LD_ADDR_EXP 38
12228: PUSH
12229: LD_INT 88
12231: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12232: LD_ADDR_EXP 33
12236: PUSH
12237: LD_INT 89
12239: ST_TO_ADDR
// us_hack := 99 ;
12240: LD_ADDR_EXP 34
12244: PUSH
12245: LD_INT 99
12247: ST_TO_ADDR
// us_artillery := 97 ;
12248: LD_ADDR_EXP 35
12252: PUSH
12253: LD_INT 97
12255: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12256: LD_ADDR_EXP 36
12260: PUSH
12261: LD_INT 91
12263: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12264: LD_ADDR_EXP 37
12268: PUSH
12269: LD_INT 92
12271: ST_TO_ADDR
// ru_radar := 98 ;
12272: LD_ADDR_EXP 32
12276: PUSH
12277: LD_INT 98
12279: ST_TO_ADDR
// tech_Artillery := 80 ;
12280: LD_ADDR_EXP 40
12284: PUSH
12285: LD_INT 80
12287: ST_TO_ADDR
// tech_RadMat := 81 ;
12288: LD_ADDR_EXP 41
12292: PUSH
12293: LD_INT 81
12295: ST_TO_ADDR
// tech_BasicTools := 82 ;
12296: LD_ADDR_EXP 42
12300: PUSH
12301: LD_INT 82
12303: ST_TO_ADDR
// tech_Cargo := 83 ;
12304: LD_ADDR_EXP 43
12308: PUSH
12309: LD_INT 83
12311: ST_TO_ADDR
// tech_Track := 84 ;
12312: LD_ADDR_EXP 44
12316: PUSH
12317: LD_INT 84
12319: ST_TO_ADDR
// tech_Crane := 85 ;
12320: LD_ADDR_EXP 45
12324: PUSH
12325: LD_INT 85
12327: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12328: LD_ADDR_EXP 46
12332: PUSH
12333: LD_INT 86
12335: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12336: LD_ADDR_EXP 47
12340: PUSH
12341: LD_INT 87
12343: ST_TO_ADDR
// end ;
12344: LD_VAR 0 1
12348: RET
// every 1 do
12349: GO 12351
12351: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12352: CALL 12213 0 0
12356: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12357: LD_VAR 0 2
12361: PUSH
12362: LD_INT 100
12364: EQUAL
12365: IFFALSE 13314
// begin if not StreamModeActive then
12367: LD_EXP 48
12371: NOT
12372: IFFALSE 12382
// StreamModeActive := true ;
12374: LD_ADDR_EXP 48
12378: PUSH
12379: LD_INT 1
12381: ST_TO_ADDR
// if p3 = 0 then
12382: LD_VAR 0 3
12386: PUSH
12387: LD_INT 0
12389: EQUAL
12390: IFFALSE 12396
// InitStreamMode ;
12392: CALL 13472 0 0
// if p3 = 1 then
12396: LD_VAR 0 3
12400: PUSH
12401: LD_INT 1
12403: EQUAL
12404: IFFALSE 12414
// sRocket := true ;
12406: LD_ADDR_EXP 53
12410: PUSH
12411: LD_INT 1
12413: ST_TO_ADDR
// if p3 = 2 then
12414: LD_VAR 0 3
12418: PUSH
12419: LD_INT 2
12421: EQUAL
12422: IFFALSE 12432
// sSpeed := true ;
12424: LD_ADDR_EXP 52
12428: PUSH
12429: LD_INT 1
12431: ST_TO_ADDR
// if p3 = 3 then
12432: LD_VAR 0 3
12436: PUSH
12437: LD_INT 3
12439: EQUAL
12440: IFFALSE 12450
// sEngine := true ;
12442: LD_ADDR_EXP 54
12446: PUSH
12447: LD_INT 1
12449: ST_TO_ADDR
// if p3 = 4 then
12450: LD_VAR 0 3
12454: PUSH
12455: LD_INT 4
12457: EQUAL
12458: IFFALSE 12468
// sSpec := true ;
12460: LD_ADDR_EXP 51
12464: PUSH
12465: LD_INT 1
12467: ST_TO_ADDR
// if p3 = 5 then
12468: LD_VAR 0 3
12472: PUSH
12473: LD_INT 5
12475: EQUAL
12476: IFFALSE 12486
// sLevel := true ;
12478: LD_ADDR_EXP 55
12482: PUSH
12483: LD_INT 1
12485: ST_TO_ADDR
// if p3 = 6 then
12486: LD_VAR 0 3
12490: PUSH
12491: LD_INT 6
12493: EQUAL
12494: IFFALSE 12504
// sArmoury := true ;
12496: LD_ADDR_EXP 56
12500: PUSH
12501: LD_INT 1
12503: ST_TO_ADDR
// if p3 = 7 then
12504: LD_VAR 0 3
12508: PUSH
12509: LD_INT 7
12511: EQUAL
12512: IFFALSE 12522
// sRadar := true ;
12514: LD_ADDR_EXP 57
12518: PUSH
12519: LD_INT 1
12521: ST_TO_ADDR
// if p3 = 8 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 8
12529: EQUAL
12530: IFFALSE 12540
// sBunker := true ;
12532: LD_ADDR_EXP 58
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// if p3 = 9 then
12540: LD_VAR 0 3
12544: PUSH
12545: LD_INT 9
12547: EQUAL
12548: IFFALSE 12558
// sHack := true ;
12550: LD_ADDR_EXP 59
12554: PUSH
12555: LD_INT 1
12557: ST_TO_ADDR
// if p3 = 10 then
12558: LD_VAR 0 3
12562: PUSH
12563: LD_INT 10
12565: EQUAL
12566: IFFALSE 12576
// sFire := true ;
12568: LD_ADDR_EXP 60
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if p3 = 11 then
12576: LD_VAR 0 3
12580: PUSH
12581: LD_INT 11
12583: EQUAL
12584: IFFALSE 12594
// sRefresh := true ;
12586: LD_ADDR_EXP 61
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// if p3 = 12 then
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 12
12601: EQUAL
12602: IFFALSE 12612
// sExp := true ;
12604: LD_ADDR_EXP 62
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// if p3 = 13 then
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 13
12619: EQUAL
12620: IFFALSE 12630
// sDepot := true ;
12622: LD_ADDR_EXP 63
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// if p3 = 14 then
12630: LD_VAR 0 3
12634: PUSH
12635: LD_INT 14
12637: EQUAL
12638: IFFALSE 12648
// sFlag := true ;
12640: LD_ADDR_EXP 64
12644: PUSH
12645: LD_INT 1
12647: ST_TO_ADDR
// if p3 = 15 then
12648: LD_VAR 0 3
12652: PUSH
12653: LD_INT 15
12655: EQUAL
12656: IFFALSE 12666
// sKamikadze := true ;
12658: LD_ADDR_EXP 72
12662: PUSH
12663: LD_INT 1
12665: ST_TO_ADDR
// if p3 = 16 then
12666: LD_VAR 0 3
12670: PUSH
12671: LD_INT 16
12673: EQUAL
12674: IFFALSE 12684
// sTroll := true ;
12676: LD_ADDR_EXP 73
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// if p3 = 17 then
12684: LD_VAR 0 3
12688: PUSH
12689: LD_INT 17
12691: EQUAL
12692: IFFALSE 12702
// sSlow := true ;
12694: LD_ADDR_EXP 74
12698: PUSH
12699: LD_INT 1
12701: ST_TO_ADDR
// if p3 = 18 then
12702: LD_VAR 0 3
12706: PUSH
12707: LD_INT 18
12709: EQUAL
12710: IFFALSE 12720
// sLack := true ;
12712: LD_ADDR_EXP 75
12716: PUSH
12717: LD_INT 1
12719: ST_TO_ADDR
// if p3 = 19 then
12720: LD_VAR 0 3
12724: PUSH
12725: LD_INT 19
12727: EQUAL
12728: IFFALSE 12738
// sTank := true ;
12730: LD_ADDR_EXP 77
12734: PUSH
12735: LD_INT 1
12737: ST_TO_ADDR
// if p3 = 20 then
12738: LD_VAR 0 3
12742: PUSH
12743: LD_INT 20
12745: EQUAL
12746: IFFALSE 12756
// sRemote := true ;
12748: LD_ADDR_EXP 78
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// if p3 = 21 then
12756: LD_VAR 0 3
12760: PUSH
12761: LD_INT 21
12763: EQUAL
12764: IFFALSE 12774
// sPowell := true ;
12766: LD_ADDR_EXP 79
12770: PUSH
12771: LD_INT 1
12773: ST_TO_ADDR
// if p3 = 22 then
12774: LD_VAR 0 3
12778: PUSH
12779: LD_INT 22
12781: EQUAL
12782: IFFALSE 12792
// sTeleport := true ;
12784: LD_ADDR_EXP 82
12788: PUSH
12789: LD_INT 1
12791: ST_TO_ADDR
// if p3 = 23 then
12792: LD_VAR 0 3
12796: PUSH
12797: LD_INT 23
12799: EQUAL
12800: IFFALSE 12810
// sOilTower := true ;
12802: LD_ADDR_EXP 84
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// if p3 = 24 then
12810: LD_VAR 0 3
12814: PUSH
12815: LD_INT 24
12817: EQUAL
12818: IFFALSE 12828
// sShovel := true ;
12820: LD_ADDR_EXP 85
12824: PUSH
12825: LD_INT 1
12827: ST_TO_ADDR
// if p3 = 25 then
12828: LD_VAR 0 3
12832: PUSH
12833: LD_INT 25
12835: EQUAL
12836: IFFALSE 12846
// sSheik := true ;
12838: LD_ADDR_EXP 86
12842: PUSH
12843: LD_INT 1
12845: ST_TO_ADDR
// if p3 = 26 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 26
12853: EQUAL
12854: IFFALSE 12864
// sEarthquake := true ;
12856: LD_ADDR_EXP 88
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// if p3 = 27 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 27
12871: EQUAL
12872: IFFALSE 12882
// sAI := true ;
12874: LD_ADDR_EXP 89
12878: PUSH
12879: LD_INT 1
12881: ST_TO_ADDR
// if p3 = 28 then
12882: LD_VAR 0 3
12886: PUSH
12887: LD_INT 28
12889: EQUAL
12890: IFFALSE 12900
// sCargo := true ;
12892: LD_ADDR_EXP 92
12896: PUSH
12897: LD_INT 1
12899: ST_TO_ADDR
// if p3 = 29 then
12900: LD_VAR 0 3
12904: PUSH
12905: LD_INT 29
12907: EQUAL
12908: IFFALSE 12918
// sDLaser := true ;
12910: LD_ADDR_EXP 93
12914: PUSH
12915: LD_INT 1
12917: ST_TO_ADDR
// if p3 = 30 then
12918: LD_VAR 0 3
12922: PUSH
12923: LD_INT 30
12925: EQUAL
12926: IFFALSE 12936
// sExchange := true ;
12928: LD_ADDR_EXP 94
12932: PUSH
12933: LD_INT 1
12935: ST_TO_ADDR
// if p3 = 31 then
12936: LD_VAR 0 3
12940: PUSH
12941: LD_INT 31
12943: EQUAL
12944: IFFALSE 12954
// sFac := true ;
12946: LD_ADDR_EXP 95
12950: PUSH
12951: LD_INT 1
12953: ST_TO_ADDR
// if p3 = 32 then
12954: LD_VAR 0 3
12958: PUSH
12959: LD_INT 32
12961: EQUAL
12962: IFFALSE 12972
// sPower := true ;
12964: LD_ADDR_EXP 96
12968: PUSH
12969: LD_INT 1
12971: ST_TO_ADDR
// if p3 = 33 then
12972: LD_VAR 0 3
12976: PUSH
12977: LD_INT 33
12979: EQUAL
12980: IFFALSE 12990
// sRandom := true ;
12982: LD_ADDR_EXP 97
12986: PUSH
12987: LD_INT 1
12989: ST_TO_ADDR
// if p3 = 34 then
12990: LD_VAR 0 3
12994: PUSH
12995: LD_INT 34
12997: EQUAL
12998: IFFALSE 13008
// sShield := true ;
13000: LD_ADDR_EXP 98
13004: PUSH
13005: LD_INT 1
13007: ST_TO_ADDR
// if p3 = 35 then
13008: LD_VAR 0 3
13012: PUSH
13013: LD_INT 35
13015: EQUAL
13016: IFFALSE 13026
// sTime := true ;
13018: LD_ADDR_EXP 99
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// if p3 = 36 then
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 36
13033: EQUAL
13034: IFFALSE 13044
// sTools := true ;
13036: LD_ADDR_EXP 100
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// if p3 = 101 then
13044: LD_VAR 0 3
13048: PUSH
13049: LD_INT 101
13051: EQUAL
13052: IFFALSE 13062
// sSold := true ;
13054: LD_ADDR_EXP 65
13058: PUSH
13059: LD_INT 1
13061: ST_TO_ADDR
// if p3 = 102 then
13062: LD_VAR 0 3
13066: PUSH
13067: LD_INT 102
13069: EQUAL
13070: IFFALSE 13080
// sDiff := true ;
13072: LD_ADDR_EXP 66
13076: PUSH
13077: LD_INT 1
13079: ST_TO_ADDR
// if p3 = 103 then
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 103
13087: EQUAL
13088: IFFALSE 13098
// sFog := true ;
13090: LD_ADDR_EXP 69
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// if p3 = 104 then
13098: LD_VAR 0 3
13102: PUSH
13103: LD_INT 104
13105: EQUAL
13106: IFFALSE 13116
// sReset := true ;
13108: LD_ADDR_EXP 70
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// if p3 = 105 then
13116: LD_VAR 0 3
13120: PUSH
13121: LD_INT 105
13123: EQUAL
13124: IFFALSE 13134
// sSun := true ;
13126: LD_ADDR_EXP 71
13130: PUSH
13131: LD_INT 1
13133: ST_TO_ADDR
// if p3 = 106 then
13134: LD_VAR 0 3
13138: PUSH
13139: LD_INT 106
13141: EQUAL
13142: IFFALSE 13152
// sTiger := true ;
13144: LD_ADDR_EXP 67
13148: PUSH
13149: LD_INT 1
13151: ST_TO_ADDR
// if p3 = 107 then
13152: LD_VAR 0 3
13156: PUSH
13157: LD_INT 107
13159: EQUAL
13160: IFFALSE 13170
// sBomb := true ;
13162: LD_ADDR_EXP 68
13166: PUSH
13167: LD_INT 1
13169: ST_TO_ADDR
// if p3 = 108 then
13170: LD_VAR 0 3
13174: PUSH
13175: LD_INT 108
13177: EQUAL
13178: IFFALSE 13188
// sWound := true ;
13180: LD_ADDR_EXP 76
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// if p3 = 109 then
13188: LD_VAR 0 3
13192: PUSH
13193: LD_INT 109
13195: EQUAL
13196: IFFALSE 13206
// sBetray := true ;
13198: LD_ADDR_EXP 80
13202: PUSH
13203: LD_INT 1
13205: ST_TO_ADDR
// if p3 = 110 then
13206: LD_VAR 0 3
13210: PUSH
13211: LD_INT 110
13213: EQUAL
13214: IFFALSE 13224
// sContamin := true ;
13216: LD_ADDR_EXP 81
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// if p3 = 111 then
13224: LD_VAR 0 3
13228: PUSH
13229: LD_INT 111
13231: EQUAL
13232: IFFALSE 13242
// sOil := true ;
13234: LD_ADDR_EXP 83
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// if p3 = 112 then
13242: LD_VAR 0 3
13246: PUSH
13247: LD_INT 112
13249: EQUAL
13250: IFFALSE 13260
// sStu := true ;
13252: LD_ADDR_EXP 87
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// if p3 = 113 then
13260: LD_VAR 0 3
13264: PUSH
13265: LD_INT 113
13267: EQUAL
13268: IFFALSE 13278
// sBazooka := true ;
13270: LD_ADDR_EXP 90
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// if p3 = 114 then
13278: LD_VAR 0 3
13282: PUSH
13283: LD_INT 114
13285: EQUAL
13286: IFFALSE 13296
// sMortar := true ;
13288: LD_ADDR_EXP 91
13292: PUSH
13293: LD_INT 1
13295: ST_TO_ADDR
// if p3 = 115 then
13296: LD_VAR 0 3
13300: PUSH
13301: LD_INT 115
13303: EQUAL
13304: IFFALSE 13314
// sRanger := true ;
13306: LD_ADDR_EXP 101
13310: PUSH
13311: LD_INT 1
13313: ST_TO_ADDR
// end ; if p2 = 101 then
13314: LD_VAR 0 2
13318: PUSH
13319: LD_INT 101
13321: EQUAL
13322: IFFALSE 13450
// begin case p3 of 1 :
13324: LD_VAR 0 3
13328: PUSH
13329: LD_INT 1
13331: DOUBLE
13332: EQUAL
13333: IFTRUE 13337
13335: GO 13344
13337: POP
// hHackUnlimitedResources ; 2 :
13338: CALL 24485 0 0
13342: GO 13450
13344: LD_INT 2
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13359
13352: POP
// hHackSetLevel10 ; 3 :
13353: CALL 24618 0 0
13357: GO 13450
13359: LD_INT 3
13361: DOUBLE
13362: EQUAL
13363: IFTRUE 13367
13365: GO 13374
13367: POP
// hHackSetLevel10YourUnits ; 4 :
13368: CALL 24703 0 0
13372: GO 13450
13374: LD_INT 4
13376: DOUBLE
13377: EQUAL
13378: IFTRUE 13382
13380: GO 13389
13382: POP
// hHackInvincible ; 5 :
13383: CALL 25151 0 0
13387: GO 13450
13389: LD_INT 5
13391: DOUBLE
13392: EQUAL
13393: IFTRUE 13397
13395: GO 13404
13397: POP
// hHackInvisible ; 6 :
13398: CALL 25262 0 0
13402: GO 13450
13404: LD_INT 6
13406: DOUBLE
13407: EQUAL
13408: IFTRUE 13412
13410: GO 13419
13412: POP
// hHackChangeYourSide ; 7 :
13413: CALL 25319 0 0
13417: GO 13450
13419: LD_INT 7
13421: DOUBLE
13422: EQUAL
13423: IFTRUE 13427
13425: GO 13434
13427: POP
// hHackChangeUnitSide ; 8 :
13428: CALL 25361 0 0
13432: GO 13450
13434: LD_INT 8
13436: DOUBLE
13437: EQUAL
13438: IFTRUE 13442
13440: GO 13449
13442: POP
// hHackFog ; end ;
13443: CALL 25462 0 0
13447: GO 13450
13449: POP
// end ; end ;
13450: PPOPN 6
13452: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13453: GO 13455
13455: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13456: LD_STRING initStreamRollete();
13458: PPUSH
13459: CALL_OW 559
// InitStreamMode ;
13463: CALL 13472 0 0
// DefineStreamItems ( ) ;
13467: CALL 13912 0 0
// end ;
13471: END
// function InitStreamMode ; begin
13472: LD_INT 0
13474: PPUSH
// streamModeActive := false ;
13475: LD_ADDR_EXP 48
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// normalCounter := 36 ;
13483: LD_ADDR_EXP 49
13487: PUSH
13488: LD_INT 36
13490: ST_TO_ADDR
// hardcoreCounter := 16 ;
13491: LD_ADDR_EXP 50
13495: PUSH
13496: LD_INT 16
13498: ST_TO_ADDR
// sRocket := false ;
13499: LD_ADDR_EXP 53
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// sSpeed := false ;
13507: LD_ADDR_EXP 52
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// sEngine := false ;
13515: LD_ADDR_EXP 54
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// sSpec := false ;
13523: LD_ADDR_EXP 51
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// sLevel := false ;
13531: LD_ADDR_EXP 55
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sArmoury := false ;
13539: LD_ADDR_EXP 56
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sRadar := false ;
13547: LD_ADDR_EXP 57
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sBunker := false ;
13555: LD_ADDR_EXP 58
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// sHack := false ;
13563: LD_ADDR_EXP 59
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// sFire := false ;
13571: LD_ADDR_EXP 60
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// sRefresh := false ;
13579: LD_ADDR_EXP 61
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// sExp := false ;
13587: LD_ADDR_EXP 62
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// sDepot := false ;
13595: LD_ADDR_EXP 63
13599: PUSH
13600: LD_INT 0
13602: ST_TO_ADDR
// sFlag := false ;
13603: LD_ADDR_EXP 64
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sKamikadze := false ;
13611: LD_ADDR_EXP 72
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sTroll := false ;
13619: LD_ADDR_EXP 73
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// sSlow := false ;
13627: LD_ADDR_EXP 74
13631: PUSH
13632: LD_INT 0
13634: ST_TO_ADDR
// sLack := false ;
13635: LD_ADDR_EXP 75
13639: PUSH
13640: LD_INT 0
13642: ST_TO_ADDR
// sTank := false ;
13643: LD_ADDR_EXP 77
13647: PUSH
13648: LD_INT 0
13650: ST_TO_ADDR
// sRemote := false ;
13651: LD_ADDR_EXP 78
13655: PUSH
13656: LD_INT 0
13658: ST_TO_ADDR
// sPowell := false ;
13659: LD_ADDR_EXP 79
13663: PUSH
13664: LD_INT 0
13666: ST_TO_ADDR
// sTeleport := false ;
13667: LD_ADDR_EXP 82
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// sOilTower := false ;
13675: LD_ADDR_EXP 84
13679: PUSH
13680: LD_INT 0
13682: ST_TO_ADDR
// sShovel := false ;
13683: LD_ADDR_EXP 85
13687: PUSH
13688: LD_INT 0
13690: ST_TO_ADDR
// sSheik := false ;
13691: LD_ADDR_EXP 86
13695: PUSH
13696: LD_INT 0
13698: ST_TO_ADDR
// sEarthquake := false ;
13699: LD_ADDR_EXP 88
13703: PUSH
13704: LD_INT 0
13706: ST_TO_ADDR
// sAI := false ;
13707: LD_ADDR_EXP 89
13711: PUSH
13712: LD_INT 0
13714: ST_TO_ADDR
// sCargo := false ;
13715: LD_ADDR_EXP 92
13719: PUSH
13720: LD_INT 0
13722: ST_TO_ADDR
// sDLaser := false ;
13723: LD_ADDR_EXP 93
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// sExchange := false ;
13731: LD_ADDR_EXP 94
13735: PUSH
13736: LD_INT 0
13738: ST_TO_ADDR
// sFac := false ;
13739: LD_ADDR_EXP 95
13743: PUSH
13744: LD_INT 0
13746: ST_TO_ADDR
// sPower := false ;
13747: LD_ADDR_EXP 96
13751: PUSH
13752: LD_INT 0
13754: ST_TO_ADDR
// sRandom := false ;
13755: LD_ADDR_EXP 97
13759: PUSH
13760: LD_INT 0
13762: ST_TO_ADDR
// sShield := false ;
13763: LD_ADDR_EXP 98
13767: PUSH
13768: LD_INT 0
13770: ST_TO_ADDR
// sTime := false ;
13771: LD_ADDR_EXP 99
13775: PUSH
13776: LD_INT 0
13778: ST_TO_ADDR
// sTools := false ;
13779: LD_ADDR_EXP 100
13783: PUSH
13784: LD_INT 0
13786: ST_TO_ADDR
// sSold := false ;
13787: LD_ADDR_EXP 65
13791: PUSH
13792: LD_INT 0
13794: ST_TO_ADDR
// sDiff := false ;
13795: LD_ADDR_EXP 66
13799: PUSH
13800: LD_INT 0
13802: ST_TO_ADDR
// sFog := false ;
13803: LD_ADDR_EXP 69
13807: PUSH
13808: LD_INT 0
13810: ST_TO_ADDR
// sReset := false ;
13811: LD_ADDR_EXP 70
13815: PUSH
13816: LD_INT 0
13818: ST_TO_ADDR
// sSun := false ;
13819: LD_ADDR_EXP 71
13823: PUSH
13824: LD_INT 0
13826: ST_TO_ADDR
// sTiger := false ;
13827: LD_ADDR_EXP 67
13831: PUSH
13832: LD_INT 0
13834: ST_TO_ADDR
// sBomb := false ;
13835: LD_ADDR_EXP 68
13839: PUSH
13840: LD_INT 0
13842: ST_TO_ADDR
// sWound := false ;
13843: LD_ADDR_EXP 76
13847: PUSH
13848: LD_INT 0
13850: ST_TO_ADDR
// sBetray := false ;
13851: LD_ADDR_EXP 80
13855: PUSH
13856: LD_INT 0
13858: ST_TO_ADDR
// sContamin := false ;
13859: LD_ADDR_EXP 81
13863: PUSH
13864: LD_INT 0
13866: ST_TO_ADDR
// sOil := false ;
13867: LD_ADDR_EXP 83
13871: PUSH
13872: LD_INT 0
13874: ST_TO_ADDR
// sStu := false ;
13875: LD_ADDR_EXP 87
13879: PUSH
13880: LD_INT 0
13882: ST_TO_ADDR
// sBazooka := false ;
13883: LD_ADDR_EXP 90
13887: PUSH
13888: LD_INT 0
13890: ST_TO_ADDR
// sMortar := false ;
13891: LD_ADDR_EXP 91
13895: PUSH
13896: LD_INT 0
13898: ST_TO_ADDR
// sRanger := false ;
13899: LD_ADDR_EXP 101
13903: PUSH
13904: LD_INT 0
13906: ST_TO_ADDR
// end ;
13907: LD_VAR 0 1
13911: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13912: LD_INT 0
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
// result := [ ] ;
13919: LD_ADDR_VAR 0 1
13923: PUSH
13924: EMPTY
13925: ST_TO_ADDR
// if campaign_id = 1 then
13926: LD_OWVAR 69
13930: PUSH
13931: LD_INT 1
13933: EQUAL
13934: IFFALSE 16872
// begin case mission_number of 1 :
13936: LD_OWVAR 70
13940: PUSH
13941: LD_INT 1
13943: DOUBLE
13944: EQUAL
13945: IFTRUE 13949
13947: GO 14013
13949: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: LD_INT 2
13957: PUSH
13958: LD_INT 4
13960: PUSH
13961: LD_INT 11
13963: PUSH
13964: LD_INT 12
13966: PUSH
13967: LD_INT 15
13969: PUSH
13970: LD_INT 16
13972: PUSH
13973: LD_INT 22
13975: PUSH
13976: LD_INT 23
13978: PUSH
13979: LD_INT 26
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 101
13995: PUSH
13996: LD_INT 102
13998: PUSH
13999: LD_INT 106
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: ST_TO_ADDR
14011: GO 16870
14013: LD_INT 2
14015: DOUBLE
14016: EQUAL
14017: IFTRUE 14021
14019: GO 14093
14021: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: LD_INT 2
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: LD_INT 11
14035: PUSH
14036: LD_INT 12
14038: PUSH
14039: LD_INT 15
14041: PUSH
14042: LD_INT 16
14044: PUSH
14045: LD_INT 22
14047: PUSH
14048: LD_INT 23
14050: PUSH
14051: LD_INT 26
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 101
14067: PUSH
14068: LD_INT 102
14070: PUSH
14071: LD_INT 105
14073: PUSH
14074: LD_INT 106
14076: PUSH
14077: LD_INT 108
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: ST_TO_ADDR
14091: GO 16870
14093: LD_INT 3
14095: DOUBLE
14096: EQUAL
14097: IFTRUE 14101
14099: GO 14177
14101: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14102: LD_ADDR_VAR 0 1
14106: PUSH
14107: LD_INT 2
14109: PUSH
14110: LD_INT 4
14112: PUSH
14113: LD_INT 5
14115: PUSH
14116: LD_INT 11
14118: PUSH
14119: LD_INT 12
14121: PUSH
14122: LD_INT 15
14124: PUSH
14125: LD_INT 16
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_INT 26
14133: PUSH
14134: LD_INT 36
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 101
14151: PUSH
14152: LD_INT 102
14154: PUSH
14155: LD_INT 105
14157: PUSH
14158: LD_INT 106
14160: PUSH
14161: LD_INT 108
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: ST_TO_ADDR
14175: GO 16870
14177: LD_INT 4
14179: DOUBLE
14180: EQUAL
14181: IFTRUE 14185
14183: GO 14269
14185: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14186: LD_ADDR_VAR 0 1
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: LD_INT 4
14196: PUSH
14197: LD_INT 5
14199: PUSH
14200: LD_INT 8
14202: PUSH
14203: LD_INT 11
14205: PUSH
14206: LD_INT 12
14208: PUSH
14209: LD_INT 15
14211: PUSH
14212: LD_INT 16
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_INT 23
14220: PUSH
14221: LD_INT 26
14223: PUSH
14224: LD_INT 36
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 101
14243: PUSH
14244: LD_INT 102
14246: PUSH
14247: LD_INT 105
14249: PUSH
14250: LD_INT 106
14252: PUSH
14253: LD_INT 108
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: ST_TO_ADDR
14267: GO 16870
14269: LD_INT 5
14271: DOUBLE
14272: EQUAL
14273: IFTRUE 14277
14275: GO 14377
14277: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14278: LD_ADDR_VAR 0 1
14282: PUSH
14283: LD_INT 2
14285: PUSH
14286: LD_INT 4
14288: PUSH
14289: LD_INT 5
14291: PUSH
14292: LD_INT 6
14294: PUSH
14295: LD_INT 8
14297: PUSH
14298: LD_INT 11
14300: PUSH
14301: LD_INT 12
14303: PUSH
14304: LD_INT 15
14306: PUSH
14307: LD_INT 16
14309: PUSH
14310: LD_INT 22
14312: PUSH
14313: LD_INT 23
14315: PUSH
14316: LD_INT 25
14318: PUSH
14319: LD_INT 26
14321: PUSH
14322: LD_INT 36
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 101
14343: PUSH
14344: LD_INT 102
14346: PUSH
14347: LD_INT 105
14349: PUSH
14350: LD_INT 106
14352: PUSH
14353: LD_INT 108
14355: PUSH
14356: LD_INT 109
14358: PUSH
14359: LD_INT 112
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: ST_TO_ADDR
14375: GO 16870
14377: LD_INT 6
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14505
14385: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14386: LD_ADDR_VAR 0 1
14390: PUSH
14391: LD_INT 2
14393: PUSH
14394: LD_INT 4
14396: PUSH
14397: LD_INT 5
14399: PUSH
14400: LD_INT 6
14402: PUSH
14403: LD_INT 8
14405: PUSH
14406: LD_INT 11
14408: PUSH
14409: LD_INT 12
14411: PUSH
14412: LD_INT 15
14414: PUSH
14415: LD_INT 16
14417: PUSH
14418: LD_INT 20
14420: PUSH
14421: LD_INT 21
14423: PUSH
14424: LD_INT 22
14426: PUSH
14427: LD_INT 23
14429: PUSH
14430: LD_INT 25
14432: PUSH
14433: LD_INT 26
14435: PUSH
14436: LD_INT 30
14438: PUSH
14439: LD_INT 31
14441: PUSH
14442: LD_INT 32
14444: PUSH
14445: LD_INT 36
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: LD_INT 101
14471: PUSH
14472: LD_INT 102
14474: PUSH
14475: LD_INT 105
14477: PUSH
14478: LD_INT 106
14480: PUSH
14481: LD_INT 108
14483: PUSH
14484: LD_INT 109
14486: PUSH
14487: LD_INT 112
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: ST_TO_ADDR
14503: GO 16870
14505: LD_INT 7
14507: DOUBLE
14508: EQUAL
14509: IFTRUE 14513
14511: GO 14613
14513: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14514: LD_ADDR_VAR 0 1
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: LD_INT 4
14524: PUSH
14525: LD_INT 5
14527: PUSH
14528: LD_INT 7
14530: PUSH
14531: LD_INT 11
14533: PUSH
14534: LD_INT 12
14536: PUSH
14537: LD_INT 15
14539: PUSH
14540: LD_INT 16
14542: PUSH
14543: LD_INT 20
14545: PUSH
14546: LD_INT 21
14548: PUSH
14549: LD_INT 22
14551: PUSH
14552: LD_INT 23
14554: PUSH
14555: LD_INT 25
14557: PUSH
14558: LD_INT 26
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 101
14579: PUSH
14580: LD_INT 102
14582: PUSH
14583: LD_INT 103
14585: PUSH
14586: LD_INT 105
14588: PUSH
14589: LD_INT 106
14591: PUSH
14592: LD_INT 108
14594: PUSH
14595: LD_INT 112
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: ST_TO_ADDR
14611: GO 16870
14613: LD_INT 8
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14749
14621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 4
14632: PUSH
14633: LD_INT 5
14635: PUSH
14636: LD_INT 6
14638: PUSH
14639: LD_INT 7
14641: PUSH
14642: LD_INT 8
14644: PUSH
14645: LD_INT 11
14647: PUSH
14648: LD_INT 12
14650: PUSH
14651: LD_INT 15
14653: PUSH
14654: LD_INT 16
14656: PUSH
14657: LD_INT 20
14659: PUSH
14660: LD_INT 21
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: LD_INT 23
14668: PUSH
14669: LD_INT 25
14671: PUSH
14672: LD_INT 26
14674: PUSH
14675: LD_INT 30
14677: PUSH
14678: LD_INT 31
14680: PUSH
14681: LD_INT 32
14683: PUSH
14684: LD_INT 36
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 101
14711: PUSH
14712: LD_INT 102
14714: PUSH
14715: LD_INT 103
14717: PUSH
14718: LD_INT 105
14720: PUSH
14721: LD_INT 106
14723: PUSH
14724: LD_INT 108
14726: PUSH
14727: LD_INT 109
14729: PUSH
14730: LD_INT 112
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: ST_TO_ADDR
14747: GO 16870
14749: LD_INT 9
14751: DOUBLE
14752: EQUAL
14753: IFTRUE 14757
14755: GO 14893
14757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14758: LD_ADDR_VAR 0 1
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 4
14768: PUSH
14769: LD_INT 5
14771: PUSH
14772: LD_INT 6
14774: PUSH
14775: LD_INT 7
14777: PUSH
14778: LD_INT 8
14780: PUSH
14781: LD_INT 11
14783: PUSH
14784: LD_INT 12
14786: PUSH
14787: LD_INT 15
14789: PUSH
14790: LD_INT 16
14792: PUSH
14793: LD_INT 20
14795: PUSH
14796: LD_INT 21
14798: PUSH
14799: LD_INT 22
14801: PUSH
14802: LD_INT 23
14804: PUSH
14805: LD_INT 25
14807: PUSH
14808: LD_INT 26
14810: PUSH
14811: LD_INT 28
14813: PUSH
14814: LD_INT 30
14816: PUSH
14817: LD_INT 31
14819: PUSH
14820: LD_INT 32
14822: PUSH
14823: LD_INT 36
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: LIST
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 101
14851: PUSH
14852: LD_INT 102
14854: PUSH
14855: LD_INT 103
14857: PUSH
14858: LD_INT 105
14860: PUSH
14861: LD_INT 106
14863: PUSH
14864: LD_INT 108
14866: PUSH
14867: LD_INT 109
14869: PUSH
14870: LD_INT 112
14872: PUSH
14873: LD_INT 114
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: ST_TO_ADDR
14891: GO 16870
14893: LD_INT 10
14895: DOUBLE
14896: EQUAL
14897: IFTRUE 14901
14899: GO 15085
14901: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14902: LD_ADDR_VAR 0 1
14906: PUSH
14907: LD_INT 2
14909: PUSH
14910: LD_INT 4
14912: PUSH
14913: LD_INT 5
14915: PUSH
14916: LD_INT 6
14918: PUSH
14919: LD_INT 7
14921: PUSH
14922: LD_INT 8
14924: PUSH
14925: LD_INT 9
14927: PUSH
14928: LD_INT 10
14930: PUSH
14931: LD_INT 11
14933: PUSH
14934: LD_INT 12
14936: PUSH
14937: LD_INT 13
14939: PUSH
14940: LD_INT 14
14942: PUSH
14943: LD_INT 15
14945: PUSH
14946: LD_INT 16
14948: PUSH
14949: LD_INT 17
14951: PUSH
14952: LD_INT 18
14954: PUSH
14955: LD_INT 19
14957: PUSH
14958: LD_INT 20
14960: PUSH
14961: LD_INT 21
14963: PUSH
14964: LD_INT 22
14966: PUSH
14967: LD_INT 23
14969: PUSH
14970: LD_INT 24
14972: PUSH
14973: LD_INT 25
14975: PUSH
14976: LD_INT 26
14978: PUSH
14979: LD_INT 28
14981: PUSH
14982: LD_INT 30
14984: PUSH
14985: LD_INT 31
14987: PUSH
14988: LD_INT 32
14990: PUSH
14991: LD_INT 36
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: LD_INT 101
15027: PUSH
15028: LD_INT 102
15030: PUSH
15031: LD_INT 103
15033: PUSH
15034: LD_INT 104
15036: PUSH
15037: LD_INT 105
15039: PUSH
15040: LD_INT 106
15042: PUSH
15043: LD_INT 107
15045: PUSH
15046: LD_INT 108
15048: PUSH
15049: LD_INT 109
15051: PUSH
15052: LD_INT 110
15054: PUSH
15055: LD_INT 111
15057: PUSH
15058: LD_INT 112
15060: PUSH
15061: LD_INT 114
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: ST_TO_ADDR
15083: GO 16870
15085: LD_INT 11
15087: DOUBLE
15088: EQUAL
15089: IFTRUE 15093
15091: GO 15285
15093: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15094: LD_ADDR_VAR 0 1
15098: PUSH
15099: LD_INT 2
15101: PUSH
15102: LD_INT 3
15104: PUSH
15105: LD_INT 4
15107: PUSH
15108: LD_INT 5
15110: PUSH
15111: LD_INT 6
15113: PUSH
15114: LD_INT 7
15116: PUSH
15117: LD_INT 8
15119: PUSH
15120: LD_INT 9
15122: PUSH
15123: LD_INT 10
15125: PUSH
15126: LD_INT 11
15128: PUSH
15129: LD_INT 12
15131: PUSH
15132: LD_INT 13
15134: PUSH
15135: LD_INT 14
15137: PUSH
15138: LD_INT 15
15140: PUSH
15141: LD_INT 16
15143: PUSH
15144: LD_INT 17
15146: PUSH
15147: LD_INT 18
15149: PUSH
15150: LD_INT 19
15152: PUSH
15153: LD_INT 20
15155: PUSH
15156: LD_INT 21
15158: PUSH
15159: LD_INT 22
15161: PUSH
15162: LD_INT 23
15164: PUSH
15165: LD_INT 24
15167: PUSH
15168: LD_INT 25
15170: PUSH
15171: LD_INT 26
15173: PUSH
15174: LD_INT 28
15176: PUSH
15177: LD_INT 30
15179: PUSH
15180: LD_INT 31
15182: PUSH
15183: LD_INT 32
15185: PUSH
15186: LD_INT 34
15188: PUSH
15189: LD_INT 36
15191: PUSH
15192: EMPTY
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: PUSH
15225: LD_INT 101
15227: PUSH
15228: LD_INT 102
15230: PUSH
15231: LD_INT 103
15233: PUSH
15234: LD_INT 104
15236: PUSH
15237: LD_INT 105
15239: PUSH
15240: LD_INT 106
15242: PUSH
15243: LD_INT 107
15245: PUSH
15246: LD_INT 108
15248: PUSH
15249: LD_INT 109
15251: PUSH
15252: LD_INT 110
15254: PUSH
15255: LD_INT 111
15257: PUSH
15258: LD_INT 112
15260: PUSH
15261: LD_INT 114
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: ST_TO_ADDR
15283: GO 16870
15285: LD_INT 12
15287: DOUBLE
15288: EQUAL
15289: IFTRUE 15293
15291: GO 15501
15293: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: LD_INT 2
15304: PUSH
15305: LD_INT 3
15307: PUSH
15308: LD_INT 4
15310: PUSH
15311: LD_INT 5
15313: PUSH
15314: LD_INT 6
15316: PUSH
15317: LD_INT 7
15319: PUSH
15320: LD_INT 8
15322: PUSH
15323: LD_INT 9
15325: PUSH
15326: LD_INT 10
15328: PUSH
15329: LD_INT 11
15331: PUSH
15332: LD_INT 12
15334: PUSH
15335: LD_INT 13
15337: PUSH
15338: LD_INT 14
15340: PUSH
15341: LD_INT 15
15343: PUSH
15344: LD_INT 16
15346: PUSH
15347: LD_INT 17
15349: PUSH
15350: LD_INT 18
15352: PUSH
15353: LD_INT 19
15355: PUSH
15356: LD_INT 20
15358: PUSH
15359: LD_INT 21
15361: PUSH
15362: LD_INT 22
15364: PUSH
15365: LD_INT 23
15367: PUSH
15368: LD_INT 24
15370: PUSH
15371: LD_INT 25
15373: PUSH
15374: LD_INT 26
15376: PUSH
15377: LD_INT 27
15379: PUSH
15380: LD_INT 28
15382: PUSH
15383: LD_INT 30
15385: PUSH
15386: LD_INT 31
15388: PUSH
15389: LD_INT 32
15391: PUSH
15392: LD_INT 33
15394: PUSH
15395: LD_INT 34
15397: PUSH
15398: LD_INT 36
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 101
15439: PUSH
15440: LD_INT 102
15442: PUSH
15443: LD_INT 103
15445: PUSH
15446: LD_INT 104
15448: PUSH
15449: LD_INT 105
15451: PUSH
15452: LD_INT 106
15454: PUSH
15455: LD_INT 107
15457: PUSH
15458: LD_INT 108
15460: PUSH
15461: LD_INT 109
15463: PUSH
15464: LD_INT 110
15466: PUSH
15467: LD_INT 111
15469: PUSH
15470: LD_INT 112
15472: PUSH
15473: LD_INT 113
15475: PUSH
15476: LD_INT 114
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: ST_TO_ADDR
15499: GO 16870
15501: LD_INT 13
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15705
15509: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15510: LD_ADDR_VAR 0 1
15514: PUSH
15515: LD_INT 1
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: LD_INT 3
15523: PUSH
15524: LD_INT 4
15526: PUSH
15527: LD_INT 5
15529: PUSH
15530: LD_INT 8
15532: PUSH
15533: LD_INT 9
15535: PUSH
15536: LD_INT 10
15538: PUSH
15539: LD_INT 11
15541: PUSH
15542: LD_INT 12
15544: PUSH
15545: LD_INT 14
15547: PUSH
15548: LD_INT 15
15550: PUSH
15551: LD_INT 16
15553: PUSH
15554: LD_INT 17
15556: PUSH
15557: LD_INT 18
15559: PUSH
15560: LD_INT 19
15562: PUSH
15563: LD_INT 20
15565: PUSH
15566: LD_INT 21
15568: PUSH
15569: LD_INT 22
15571: PUSH
15572: LD_INT 23
15574: PUSH
15575: LD_INT 24
15577: PUSH
15578: LD_INT 25
15580: PUSH
15581: LD_INT 26
15583: PUSH
15584: LD_INT 27
15586: PUSH
15587: LD_INT 28
15589: PUSH
15590: LD_INT 30
15592: PUSH
15593: LD_INT 31
15595: PUSH
15596: LD_INT 32
15598: PUSH
15599: LD_INT 33
15601: PUSH
15602: LD_INT 34
15604: PUSH
15605: LD_INT 36
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 101
15643: PUSH
15644: LD_INT 102
15646: PUSH
15647: LD_INT 103
15649: PUSH
15650: LD_INT 104
15652: PUSH
15653: LD_INT 105
15655: PUSH
15656: LD_INT 106
15658: PUSH
15659: LD_INT 107
15661: PUSH
15662: LD_INT 108
15664: PUSH
15665: LD_INT 109
15667: PUSH
15668: LD_INT 110
15670: PUSH
15671: LD_INT 111
15673: PUSH
15674: LD_INT 112
15676: PUSH
15677: LD_INT 113
15679: PUSH
15680: LD_INT 114
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: ST_TO_ADDR
15703: GO 16870
15705: LD_INT 14
15707: DOUBLE
15708: EQUAL
15709: IFTRUE 15713
15711: GO 15925
15713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15714: LD_ADDR_VAR 0 1
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: LD_INT 2
15724: PUSH
15725: LD_INT 3
15727: PUSH
15728: LD_INT 4
15730: PUSH
15731: LD_INT 5
15733: PUSH
15734: LD_INT 6
15736: PUSH
15737: LD_INT 7
15739: PUSH
15740: LD_INT 8
15742: PUSH
15743: LD_INT 9
15745: PUSH
15746: LD_INT 10
15748: PUSH
15749: LD_INT 11
15751: PUSH
15752: LD_INT 12
15754: PUSH
15755: LD_INT 13
15757: PUSH
15758: LD_INT 14
15760: PUSH
15761: LD_INT 15
15763: PUSH
15764: LD_INT 16
15766: PUSH
15767: LD_INT 17
15769: PUSH
15770: LD_INT 18
15772: PUSH
15773: LD_INT 19
15775: PUSH
15776: LD_INT 20
15778: PUSH
15779: LD_INT 21
15781: PUSH
15782: LD_INT 22
15784: PUSH
15785: LD_INT 23
15787: PUSH
15788: LD_INT 24
15790: PUSH
15791: LD_INT 25
15793: PUSH
15794: LD_INT 26
15796: PUSH
15797: LD_INT 27
15799: PUSH
15800: LD_INT 28
15802: PUSH
15803: LD_INT 29
15805: PUSH
15806: LD_INT 30
15808: PUSH
15809: LD_INT 31
15811: PUSH
15812: LD_INT 32
15814: PUSH
15815: LD_INT 33
15817: PUSH
15818: LD_INT 34
15820: PUSH
15821: LD_INT 36
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: PUSH
15861: LD_INT 101
15863: PUSH
15864: LD_INT 102
15866: PUSH
15867: LD_INT 103
15869: PUSH
15870: LD_INT 104
15872: PUSH
15873: LD_INT 105
15875: PUSH
15876: LD_INT 106
15878: PUSH
15879: LD_INT 107
15881: PUSH
15882: LD_INT 108
15884: PUSH
15885: LD_INT 109
15887: PUSH
15888: LD_INT 110
15890: PUSH
15891: LD_INT 111
15893: PUSH
15894: LD_INT 112
15896: PUSH
15897: LD_INT 113
15899: PUSH
15900: LD_INT 114
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: ST_TO_ADDR
15923: GO 16870
15925: LD_INT 15
15927: DOUBLE
15928: EQUAL
15929: IFTRUE 15933
15931: GO 16145
15933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_INT 1
15941: PUSH
15942: LD_INT 2
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: LD_INT 4
15950: PUSH
15951: LD_INT 5
15953: PUSH
15954: LD_INT 6
15956: PUSH
15957: LD_INT 7
15959: PUSH
15960: LD_INT 8
15962: PUSH
15963: LD_INT 9
15965: PUSH
15966: LD_INT 10
15968: PUSH
15969: LD_INT 11
15971: PUSH
15972: LD_INT 12
15974: PUSH
15975: LD_INT 13
15977: PUSH
15978: LD_INT 14
15980: PUSH
15981: LD_INT 15
15983: PUSH
15984: LD_INT 16
15986: PUSH
15987: LD_INT 17
15989: PUSH
15990: LD_INT 18
15992: PUSH
15993: LD_INT 19
15995: PUSH
15996: LD_INT 20
15998: PUSH
15999: LD_INT 21
16001: PUSH
16002: LD_INT 22
16004: PUSH
16005: LD_INT 23
16007: PUSH
16008: LD_INT 24
16010: PUSH
16011: LD_INT 25
16013: PUSH
16014: LD_INT 26
16016: PUSH
16017: LD_INT 27
16019: PUSH
16020: LD_INT 28
16022: PUSH
16023: LD_INT 29
16025: PUSH
16026: LD_INT 30
16028: PUSH
16029: LD_INT 31
16031: PUSH
16032: LD_INT 32
16034: PUSH
16035: LD_INT 33
16037: PUSH
16038: LD_INT 34
16040: PUSH
16041: LD_INT 36
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 101
16083: PUSH
16084: LD_INT 102
16086: PUSH
16087: LD_INT 103
16089: PUSH
16090: LD_INT 104
16092: PUSH
16093: LD_INT 105
16095: PUSH
16096: LD_INT 106
16098: PUSH
16099: LD_INT 107
16101: PUSH
16102: LD_INT 108
16104: PUSH
16105: LD_INT 109
16107: PUSH
16108: LD_INT 110
16110: PUSH
16111: LD_INT 111
16113: PUSH
16114: LD_INT 112
16116: PUSH
16117: LD_INT 113
16119: PUSH
16120: LD_INT 114
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: ST_TO_ADDR
16143: GO 16870
16145: LD_INT 16
16147: DOUBLE
16148: EQUAL
16149: IFTRUE 16153
16151: GO 16277
16153: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16154: LD_ADDR_VAR 0 1
16158: PUSH
16159: LD_INT 2
16161: PUSH
16162: LD_INT 4
16164: PUSH
16165: LD_INT 5
16167: PUSH
16168: LD_INT 7
16170: PUSH
16171: LD_INT 11
16173: PUSH
16174: LD_INT 12
16176: PUSH
16177: LD_INT 15
16179: PUSH
16180: LD_INT 16
16182: PUSH
16183: LD_INT 20
16185: PUSH
16186: LD_INT 21
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 23
16194: PUSH
16195: LD_INT 25
16197: PUSH
16198: LD_INT 26
16200: PUSH
16201: LD_INT 30
16203: PUSH
16204: LD_INT 31
16206: PUSH
16207: LD_INT 32
16209: PUSH
16210: LD_INT 33
16212: PUSH
16213: LD_INT 34
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: PUSH
16237: LD_INT 101
16239: PUSH
16240: LD_INT 102
16242: PUSH
16243: LD_INT 103
16245: PUSH
16246: LD_INT 106
16248: PUSH
16249: LD_INT 108
16251: PUSH
16252: LD_INT 112
16254: PUSH
16255: LD_INT 113
16257: PUSH
16258: LD_INT 114
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: PUSH
16271: EMPTY
16272: LIST
16273: LIST
16274: ST_TO_ADDR
16275: GO 16870
16277: LD_INT 17
16279: DOUBLE
16280: EQUAL
16281: IFTRUE 16285
16283: GO 16497
16285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16286: LD_ADDR_VAR 0 1
16290: PUSH
16291: LD_INT 1
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 3
16299: PUSH
16300: LD_INT 4
16302: PUSH
16303: LD_INT 5
16305: PUSH
16306: LD_INT 6
16308: PUSH
16309: LD_INT 7
16311: PUSH
16312: LD_INT 8
16314: PUSH
16315: LD_INT 9
16317: PUSH
16318: LD_INT 10
16320: PUSH
16321: LD_INT 11
16323: PUSH
16324: LD_INT 12
16326: PUSH
16327: LD_INT 13
16329: PUSH
16330: LD_INT 14
16332: PUSH
16333: LD_INT 15
16335: PUSH
16336: LD_INT 16
16338: PUSH
16339: LD_INT 17
16341: PUSH
16342: LD_INT 18
16344: PUSH
16345: LD_INT 19
16347: PUSH
16348: LD_INT 20
16350: PUSH
16351: LD_INT 21
16353: PUSH
16354: LD_INT 22
16356: PUSH
16357: LD_INT 23
16359: PUSH
16360: LD_INT 24
16362: PUSH
16363: LD_INT 25
16365: PUSH
16366: LD_INT 26
16368: PUSH
16369: LD_INT 27
16371: PUSH
16372: LD_INT 28
16374: PUSH
16375: LD_INT 29
16377: PUSH
16378: LD_INT 30
16380: PUSH
16381: LD_INT 31
16383: PUSH
16384: LD_INT 32
16386: PUSH
16387: LD_INT 33
16389: PUSH
16390: LD_INT 34
16392: PUSH
16393: LD_INT 36
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: PUSH
16433: LD_INT 101
16435: PUSH
16436: LD_INT 102
16438: PUSH
16439: LD_INT 103
16441: PUSH
16442: LD_INT 104
16444: PUSH
16445: LD_INT 105
16447: PUSH
16448: LD_INT 106
16450: PUSH
16451: LD_INT 107
16453: PUSH
16454: LD_INT 108
16456: PUSH
16457: LD_INT 109
16459: PUSH
16460: LD_INT 110
16462: PUSH
16463: LD_INT 111
16465: PUSH
16466: LD_INT 112
16468: PUSH
16469: LD_INT 113
16471: PUSH
16472: LD_INT 114
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: ST_TO_ADDR
16495: GO 16870
16497: LD_INT 18
16499: DOUBLE
16500: EQUAL
16501: IFTRUE 16505
16503: GO 16641
16505: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16506: LD_ADDR_VAR 0 1
16510: PUSH
16511: LD_INT 2
16513: PUSH
16514: LD_INT 4
16516: PUSH
16517: LD_INT 5
16519: PUSH
16520: LD_INT 7
16522: PUSH
16523: LD_INT 11
16525: PUSH
16526: LD_INT 12
16528: PUSH
16529: LD_INT 15
16531: PUSH
16532: LD_INT 16
16534: PUSH
16535: LD_INT 20
16537: PUSH
16538: LD_INT 21
16540: PUSH
16541: LD_INT 22
16543: PUSH
16544: LD_INT 23
16546: PUSH
16547: LD_INT 25
16549: PUSH
16550: LD_INT 26
16552: PUSH
16553: LD_INT 30
16555: PUSH
16556: LD_INT 31
16558: PUSH
16559: LD_INT 32
16561: PUSH
16562: LD_INT 33
16564: PUSH
16565: LD_INT 34
16567: PUSH
16568: LD_INT 35
16570: PUSH
16571: LD_INT 36
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: PUSH
16597: LD_INT 101
16599: PUSH
16600: LD_INT 102
16602: PUSH
16603: LD_INT 103
16605: PUSH
16606: LD_INT 106
16608: PUSH
16609: LD_INT 108
16611: PUSH
16612: LD_INT 112
16614: PUSH
16615: LD_INT 113
16617: PUSH
16618: LD_INT 114
16620: PUSH
16621: LD_INT 115
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: ST_TO_ADDR
16639: GO 16870
16641: LD_INT 19
16643: DOUBLE
16644: EQUAL
16645: IFTRUE 16649
16647: GO 16869
16649: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16650: LD_ADDR_VAR 0 1
16654: PUSH
16655: LD_INT 1
16657: PUSH
16658: LD_INT 2
16660: PUSH
16661: LD_INT 3
16663: PUSH
16664: LD_INT 4
16666: PUSH
16667: LD_INT 5
16669: PUSH
16670: LD_INT 6
16672: PUSH
16673: LD_INT 7
16675: PUSH
16676: LD_INT 8
16678: PUSH
16679: LD_INT 9
16681: PUSH
16682: LD_INT 10
16684: PUSH
16685: LD_INT 11
16687: PUSH
16688: LD_INT 12
16690: PUSH
16691: LD_INT 13
16693: PUSH
16694: LD_INT 14
16696: PUSH
16697: LD_INT 15
16699: PUSH
16700: LD_INT 16
16702: PUSH
16703: LD_INT 17
16705: PUSH
16706: LD_INT 18
16708: PUSH
16709: LD_INT 19
16711: PUSH
16712: LD_INT 20
16714: PUSH
16715: LD_INT 21
16717: PUSH
16718: LD_INT 22
16720: PUSH
16721: LD_INT 23
16723: PUSH
16724: LD_INT 24
16726: PUSH
16727: LD_INT 25
16729: PUSH
16730: LD_INT 26
16732: PUSH
16733: LD_INT 27
16735: PUSH
16736: LD_INT 28
16738: PUSH
16739: LD_INT 29
16741: PUSH
16742: LD_INT 30
16744: PUSH
16745: LD_INT 31
16747: PUSH
16748: LD_INT 32
16750: PUSH
16751: LD_INT 33
16753: PUSH
16754: LD_INT 34
16756: PUSH
16757: LD_INT 35
16759: PUSH
16760: LD_INT 36
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 101
16803: PUSH
16804: LD_INT 102
16806: PUSH
16807: LD_INT 103
16809: PUSH
16810: LD_INT 104
16812: PUSH
16813: LD_INT 105
16815: PUSH
16816: LD_INT 106
16818: PUSH
16819: LD_INT 107
16821: PUSH
16822: LD_INT 108
16824: PUSH
16825: LD_INT 109
16827: PUSH
16828: LD_INT 110
16830: PUSH
16831: LD_INT 111
16833: PUSH
16834: LD_INT 112
16836: PUSH
16837: LD_INT 113
16839: PUSH
16840: LD_INT 114
16842: PUSH
16843: LD_INT 115
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: ST_TO_ADDR
16867: GO 16870
16869: POP
// end else
16870: GO 17089
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16872: LD_ADDR_VAR 0 1
16876: PUSH
16877: LD_INT 1
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: LD_INT 3
16885: PUSH
16886: LD_INT 4
16888: PUSH
16889: LD_INT 5
16891: PUSH
16892: LD_INT 6
16894: PUSH
16895: LD_INT 7
16897: PUSH
16898: LD_INT 8
16900: PUSH
16901: LD_INT 9
16903: PUSH
16904: LD_INT 10
16906: PUSH
16907: LD_INT 11
16909: PUSH
16910: LD_INT 12
16912: PUSH
16913: LD_INT 13
16915: PUSH
16916: LD_INT 14
16918: PUSH
16919: LD_INT 15
16921: PUSH
16922: LD_INT 16
16924: PUSH
16925: LD_INT 17
16927: PUSH
16928: LD_INT 18
16930: PUSH
16931: LD_INT 19
16933: PUSH
16934: LD_INT 20
16936: PUSH
16937: LD_INT 21
16939: PUSH
16940: LD_INT 22
16942: PUSH
16943: LD_INT 23
16945: PUSH
16946: LD_INT 24
16948: PUSH
16949: LD_INT 25
16951: PUSH
16952: LD_INT 26
16954: PUSH
16955: LD_INT 27
16957: PUSH
16958: LD_INT 28
16960: PUSH
16961: LD_INT 29
16963: PUSH
16964: LD_INT 30
16966: PUSH
16967: LD_INT 31
16969: PUSH
16970: LD_INT 32
16972: PUSH
16973: LD_INT 33
16975: PUSH
16976: LD_INT 34
16978: PUSH
16979: LD_INT 35
16981: PUSH
16982: LD_INT 36
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 101
17025: PUSH
17026: LD_INT 102
17028: PUSH
17029: LD_INT 103
17031: PUSH
17032: LD_INT 104
17034: PUSH
17035: LD_INT 105
17037: PUSH
17038: LD_INT 106
17040: PUSH
17041: LD_INT 107
17043: PUSH
17044: LD_INT 108
17046: PUSH
17047: LD_INT 109
17049: PUSH
17050: LD_INT 110
17052: PUSH
17053: LD_INT 111
17055: PUSH
17056: LD_INT 112
17058: PUSH
17059: LD_INT 113
17061: PUSH
17062: LD_INT 114
17064: PUSH
17065: LD_INT 115
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: ST_TO_ADDR
// if result then
17089: LD_VAR 0 1
17093: IFFALSE 17382
// begin normal :=  ;
17095: LD_ADDR_VAR 0 3
17099: PUSH
17100: LD_STRING 
17102: ST_TO_ADDR
// hardcore :=  ;
17103: LD_ADDR_VAR 0 4
17107: PUSH
17108: LD_STRING 
17110: ST_TO_ADDR
// for i = 1 to normalCounter do
17111: LD_ADDR_VAR 0 5
17115: PUSH
17116: DOUBLE
17117: LD_INT 1
17119: DEC
17120: ST_TO_ADDR
17121: LD_EXP 49
17125: PUSH
17126: FOR_TO
17127: IFFALSE 17228
// begin tmp := 0 ;
17129: LD_ADDR_VAR 0 2
17133: PUSH
17134: LD_STRING 0
17136: ST_TO_ADDR
// if result [ 1 ] then
17137: LD_VAR 0 1
17141: PUSH
17142: LD_INT 1
17144: ARRAY
17145: IFFALSE 17210
// if result [ 1 ] [ 1 ] = i then
17147: LD_VAR 0 1
17151: PUSH
17152: LD_INT 1
17154: ARRAY
17155: PUSH
17156: LD_INT 1
17158: ARRAY
17159: PUSH
17160: LD_VAR 0 5
17164: EQUAL
17165: IFFALSE 17210
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17167: LD_ADDR_VAR 0 1
17171: PUSH
17172: LD_VAR 0 1
17176: PPUSH
17177: LD_INT 1
17179: PPUSH
17180: LD_VAR 0 1
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL_OW 3
17196: PPUSH
17197: CALL_OW 1
17201: ST_TO_ADDR
// tmp := 1 ;
17202: LD_ADDR_VAR 0 2
17206: PUSH
17207: LD_STRING 1
17209: ST_TO_ADDR
// end ; normal := normal & tmp ;
17210: LD_ADDR_VAR 0 3
17214: PUSH
17215: LD_VAR 0 3
17219: PUSH
17220: LD_VAR 0 2
17224: STR
17225: ST_TO_ADDR
// end ;
17226: GO 17126
17228: POP
17229: POP
// for i = 1 to hardcoreCounter do
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: DOUBLE
17236: LD_INT 1
17238: DEC
17239: ST_TO_ADDR
17240: LD_EXP 50
17244: PUSH
17245: FOR_TO
17246: IFFALSE 17351
// begin tmp := 0 ;
17248: LD_ADDR_VAR 0 2
17252: PUSH
17253: LD_STRING 0
17255: ST_TO_ADDR
// if result [ 2 ] then
17256: LD_VAR 0 1
17260: PUSH
17261: LD_INT 2
17263: ARRAY
17264: IFFALSE 17333
// if result [ 2 ] [ 1 ] = 100 + i then
17266: LD_VAR 0 1
17270: PUSH
17271: LD_INT 2
17273: ARRAY
17274: PUSH
17275: LD_INT 1
17277: ARRAY
17278: PUSH
17279: LD_INT 100
17281: PUSH
17282: LD_VAR 0 5
17286: PLUS
17287: EQUAL
17288: IFFALSE 17333
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17290: LD_ADDR_VAR 0 1
17294: PUSH
17295: LD_VAR 0 1
17299: PPUSH
17300: LD_INT 2
17302: PPUSH
17303: LD_VAR 0 1
17307: PUSH
17308: LD_INT 2
17310: ARRAY
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 3
17319: PPUSH
17320: CALL_OW 1
17324: ST_TO_ADDR
// tmp := 1 ;
17325: LD_ADDR_VAR 0 2
17329: PUSH
17330: LD_STRING 1
17332: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17333: LD_ADDR_VAR 0 4
17337: PUSH
17338: LD_VAR 0 4
17342: PUSH
17343: LD_VAR 0 2
17347: STR
17348: ST_TO_ADDR
// end ;
17349: GO 17245
17351: POP
17352: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17353: LD_STRING getStreamItemsFromMission("
17355: PUSH
17356: LD_VAR 0 3
17360: STR
17361: PUSH
17362: LD_STRING ","
17364: STR
17365: PUSH
17366: LD_VAR 0 4
17370: STR
17371: PUSH
17372: LD_STRING ")
17374: STR
17375: PPUSH
17376: CALL_OW 559
// end else
17380: GO 17389
// ToLua ( getStreamItemsFromMission("","") ) ;
17382: LD_STRING getStreamItemsFromMission("","")
17384: PPUSH
17385: CALL_OW 559
// end ;
17389: LD_VAR 0 1
17393: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17394: LD_EXP 48
17398: PUSH
17399: LD_EXP 53
17403: AND
17404: IFFALSE 17528
17406: GO 17408
17408: DISABLE
17409: LD_INT 0
17411: PPUSH
17412: PPUSH
// begin enable ;
17413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17414: LD_ADDR_VAR 0 2
17418: PUSH
17419: LD_INT 22
17421: PUSH
17422: LD_OWVAR 2
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 2
17433: PUSH
17434: LD_INT 34
17436: PUSH
17437: LD_INT 7
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 34
17446: PUSH
17447: LD_INT 45
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 34
17456: PUSH
17457: LD_INT 28
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 34
17466: PUSH
17467: LD_INT 47
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PPUSH
17485: CALL_OW 69
17489: ST_TO_ADDR
// if not tmp then
17490: LD_VAR 0 2
17494: NOT
17495: IFFALSE 17499
// exit ;
17497: GO 17528
// for i in tmp do
17499: LD_ADDR_VAR 0 1
17503: PUSH
17504: LD_VAR 0 2
17508: PUSH
17509: FOR_IN
17510: IFFALSE 17526
// begin SetLives ( i , 0 ) ;
17512: LD_VAR 0 1
17516: PPUSH
17517: LD_INT 0
17519: PPUSH
17520: CALL_OW 234
// end ;
17524: GO 17509
17526: POP
17527: POP
// end ;
17528: PPOPN 2
17530: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17531: LD_EXP 48
17535: PUSH
17536: LD_EXP 54
17540: AND
17541: IFFALSE 17625
17543: GO 17545
17545: DISABLE
17546: LD_INT 0
17548: PPUSH
17549: PPUSH
// begin enable ;
17550: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17551: LD_ADDR_VAR 0 2
17555: PUSH
17556: LD_INT 22
17558: PUSH
17559: LD_OWVAR 2
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: PUSH
17568: LD_INT 32
17570: PUSH
17571: LD_INT 3
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 69
17586: ST_TO_ADDR
// if not tmp then
17587: LD_VAR 0 2
17591: NOT
17592: IFFALSE 17596
// exit ;
17594: GO 17625
// for i in tmp do
17596: LD_ADDR_VAR 0 1
17600: PUSH
17601: LD_VAR 0 2
17605: PUSH
17606: FOR_IN
17607: IFFALSE 17623
// begin SetLives ( i , 0 ) ;
17609: LD_VAR 0 1
17613: PPUSH
17614: LD_INT 0
17616: PPUSH
17617: CALL_OW 234
// end ;
17621: GO 17606
17623: POP
17624: POP
// end ;
17625: PPOPN 2
17627: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17628: LD_EXP 48
17632: PUSH
17633: LD_EXP 51
17637: AND
17638: IFFALSE 17731
17640: GO 17642
17642: DISABLE
17643: LD_INT 0
17645: PPUSH
// begin enable ;
17646: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17647: LD_ADDR_VAR 0 1
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_OWVAR 2
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: LD_INT 25
17669: PUSH
17670: LD_INT 5
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 25
17679: PUSH
17680: LD_INT 9
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 25
17689: PUSH
17690: LD_INT 8
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PPUSH
17707: CALL_OW 69
17711: PUSH
17712: FOR_IN
17713: IFFALSE 17729
// begin SetClass ( i , 1 ) ;
17715: LD_VAR 0 1
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: CALL_OW 336
// end ;
17727: GO 17712
17729: POP
17730: POP
// end ;
17731: PPOPN 1
17733: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17734: LD_EXP 48
17738: PUSH
17739: LD_EXP 52
17743: AND
17744: PUSH
17745: LD_OWVAR 65
17749: PUSH
17750: LD_INT 7
17752: LESS
17753: AND
17754: IFFALSE 17768
17756: GO 17758
17758: DISABLE
// begin enable ;
17759: ENABLE
// game_speed := 7 ;
17760: LD_ADDR_OWVAR 65
17764: PUSH
17765: LD_INT 7
17767: ST_TO_ADDR
// end ;
17768: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17769: LD_EXP 48
17773: PUSH
17774: LD_EXP 55
17778: AND
17779: IFFALSE 17981
17781: GO 17783
17783: DISABLE
17784: LD_INT 0
17786: PPUSH
17787: PPUSH
17788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17789: LD_ADDR_VAR 0 3
17793: PUSH
17794: LD_INT 81
17796: PUSH
17797: LD_OWVAR 2
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 21
17808: PUSH
17809: LD_INT 1
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 69
17824: ST_TO_ADDR
// if not tmp then
17825: LD_VAR 0 3
17829: NOT
17830: IFFALSE 17834
// exit ;
17832: GO 17981
// if tmp > 5 then
17834: LD_VAR 0 3
17838: PUSH
17839: LD_INT 5
17841: GREATER
17842: IFFALSE 17854
// k := 5 else
17844: LD_ADDR_VAR 0 2
17848: PUSH
17849: LD_INT 5
17851: ST_TO_ADDR
17852: GO 17864
// k := tmp ;
17854: LD_ADDR_VAR 0 2
17858: PUSH
17859: LD_VAR 0 3
17863: ST_TO_ADDR
// for i := 1 to k do
17864: LD_ADDR_VAR 0 1
17868: PUSH
17869: DOUBLE
17870: LD_INT 1
17872: DEC
17873: ST_TO_ADDR
17874: LD_VAR 0 2
17878: PUSH
17879: FOR_TO
17880: IFFALSE 17979
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17882: LD_VAR 0 3
17886: PUSH
17887: LD_VAR 0 1
17891: ARRAY
17892: PPUSH
17893: LD_VAR 0 1
17897: PUSH
17898: LD_INT 4
17900: MOD
17901: PUSH
17902: LD_INT 1
17904: PLUS
17905: PPUSH
17906: CALL_OW 259
17910: PUSH
17911: LD_INT 10
17913: LESS
17914: IFFALSE 17977
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17916: LD_VAR 0 3
17920: PUSH
17921: LD_VAR 0 1
17925: ARRAY
17926: PPUSH
17927: LD_VAR 0 1
17931: PUSH
17932: LD_INT 4
17934: MOD
17935: PUSH
17936: LD_INT 1
17938: PLUS
17939: PPUSH
17940: LD_VAR 0 3
17944: PUSH
17945: LD_VAR 0 1
17949: ARRAY
17950: PPUSH
17951: LD_VAR 0 1
17955: PUSH
17956: LD_INT 4
17958: MOD
17959: PUSH
17960: LD_INT 1
17962: PLUS
17963: PPUSH
17964: CALL_OW 259
17968: PUSH
17969: LD_INT 1
17971: PLUS
17972: PPUSH
17973: CALL_OW 237
17977: GO 17879
17979: POP
17980: POP
// end ;
17981: PPOPN 3
17983: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17984: LD_EXP 48
17988: PUSH
17989: LD_EXP 56
17993: AND
17994: IFFALSE 18014
17996: GO 17998
17998: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17999: LD_INT 4
18001: PPUSH
18002: LD_OWVAR 2
18006: PPUSH
18007: LD_INT 0
18009: PPUSH
18010: CALL_OW 324
18014: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18015: LD_EXP 48
18019: PUSH
18020: LD_EXP 85
18024: AND
18025: IFFALSE 18045
18027: GO 18029
18029: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18030: LD_INT 19
18032: PPUSH
18033: LD_OWVAR 2
18037: PPUSH
18038: LD_INT 0
18040: PPUSH
18041: CALL_OW 324
18045: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18046: LD_EXP 48
18050: PUSH
18051: LD_EXP 57
18055: AND
18056: IFFALSE 18158
18058: GO 18060
18060: DISABLE
18061: LD_INT 0
18063: PPUSH
18064: PPUSH
// begin enable ;
18065: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18066: LD_ADDR_VAR 0 2
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_OWVAR 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 2
18085: PUSH
18086: LD_INT 34
18088: PUSH
18089: LD_INT 11
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 34
18098: PUSH
18099: LD_INT 30
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: LIST
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PPUSH
18115: CALL_OW 69
18119: ST_TO_ADDR
// if not tmp then
18120: LD_VAR 0 2
18124: NOT
18125: IFFALSE 18129
// exit ;
18127: GO 18158
// for i in tmp do
18129: LD_ADDR_VAR 0 1
18133: PUSH
18134: LD_VAR 0 2
18138: PUSH
18139: FOR_IN
18140: IFFALSE 18156
// begin SetLives ( i , 0 ) ;
18142: LD_VAR 0 1
18146: PPUSH
18147: LD_INT 0
18149: PPUSH
18150: CALL_OW 234
// end ;
18154: GO 18139
18156: POP
18157: POP
// end ;
18158: PPOPN 2
18160: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18161: LD_EXP 48
18165: PUSH
18166: LD_EXP 58
18170: AND
18171: IFFALSE 18191
18173: GO 18175
18175: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18176: LD_INT 32
18178: PPUSH
18179: LD_OWVAR 2
18183: PPUSH
18184: LD_INT 0
18186: PPUSH
18187: CALL_OW 324
18191: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18192: LD_EXP 48
18196: PUSH
18197: LD_EXP 59
18201: AND
18202: IFFALSE 18383
18204: GO 18206
18206: DISABLE
18207: LD_INT 0
18209: PPUSH
18210: PPUSH
18211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18212: LD_ADDR_VAR 0 2
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_OWVAR 2
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 33
18231: PUSH
18232: LD_INT 3
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PPUSH
18243: CALL_OW 69
18247: ST_TO_ADDR
// if not tmp then
18248: LD_VAR 0 2
18252: NOT
18253: IFFALSE 18257
// exit ;
18255: GO 18383
// side := 0 ;
18257: LD_ADDR_VAR 0 3
18261: PUSH
18262: LD_INT 0
18264: ST_TO_ADDR
// for i := 1 to 8 do
18265: LD_ADDR_VAR 0 1
18269: PUSH
18270: DOUBLE
18271: LD_INT 1
18273: DEC
18274: ST_TO_ADDR
18275: LD_INT 8
18277: PUSH
18278: FOR_TO
18279: IFFALSE 18327
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18281: LD_OWVAR 2
18285: PUSH
18286: LD_VAR 0 1
18290: NONEQUAL
18291: PUSH
18292: LD_OWVAR 2
18296: PPUSH
18297: LD_VAR 0 1
18301: PPUSH
18302: CALL_OW 81
18306: PUSH
18307: LD_INT 2
18309: EQUAL
18310: AND
18311: IFFALSE 18325
// begin side := i ;
18313: LD_ADDR_VAR 0 3
18317: PUSH
18318: LD_VAR 0 1
18322: ST_TO_ADDR
// break ;
18323: GO 18327
// end ;
18325: GO 18278
18327: POP
18328: POP
// if not side then
18329: LD_VAR 0 3
18333: NOT
18334: IFFALSE 18338
// exit ;
18336: GO 18383
// for i := 1 to tmp do
18338: LD_ADDR_VAR 0 1
18342: PUSH
18343: DOUBLE
18344: LD_INT 1
18346: DEC
18347: ST_TO_ADDR
18348: LD_VAR 0 2
18352: PUSH
18353: FOR_TO
18354: IFFALSE 18381
// if Prob ( 60 ) then
18356: LD_INT 60
18358: PPUSH
18359: CALL_OW 13
18363: IFFALSE 18379
// SetSide ( i , side ) ;
18365: LD_VAR 0 1
18369: PPUSH
18370: LD_VAR 0 3
18374: PPUSH
18375: CALL_OW 235
18379: GO 18353
18381: POP
18382: POP
// end ;
18383: PPOPN 3
18385: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18386: LD_EXP 48
18390: PUSH
18391: LD_EXP 61
18395: AND
18396: IFFALSE 18515
18398: GO 18400
18400: DISABLE
18401: LD_INT 0
18403: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18404: LD_ADDR_VAR 0 1
18408: PUSH
18409: LD_INT 22
18411: PUSH
18412: LD_OWVAR 2
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 21
18423: PUSH
18424: LD_INT 1
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 3
18433: PUSH
18434: LD_INT 23
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: LIST
18452: PPUSH
18453: CALL_OW 69
18457: PUSH
18458: FOR_IN
18459: IFFALSE 18513
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18461: LD_VAR 0 1
18465: PPUSH
18466: CALL_OW 257
18470: PUSH
18471: LD_INT 1
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: LD_INT 3
18479: PUSH
18480: LD_INT 4
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: IN
18489: IFFALSE 18511
// SetClass ( un , rand ( 1 , 4 ) ) ;
18491: LD_VAR 0 1
18495: PPUSH
18496: LD_INT 1
18498: PPUSH
18499: LD_INT 4
18501: PPUSH
18502: CALL_OW 12
18506: PPUSH
18507: CALL_OW 336
18511: GO 18458
18513: POP
18514: POP
// end ;
18515: PPOPN 1
18517: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18518: LD_EXP 48
18522: PUSH
18523: LD_EXP 60
18527: AND
18528: IFFALSE 18607
18530: GO 18532
18532: DISABLE
18533: LD_INT 0
18535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18536: LD_ADDR_VAR 0 1
18540: PUSH
18541: LD_INT 22
18543: PUSH
18544: LD_OWVAR 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 21
18555: PUSH
18556: LD_INT 3
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 69
18571: ST_TO_ADDR
// if not tmp then
18572: LD_VAR 0 1
18576: NOT
18577: IFFALSE 18581
// exit ;
18579: GO 18607
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18581: LD_VAR 0 1
18585: PUSH
18586: LD_INT 1
18588: PPUSH
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 12
18598: ARRAY
18599: PPUSH
18600: LD_INT 100
18602: PPUSH
18603: CALL_OW 234
// end ;
18607: PPOPN 1
18609: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18610: LD_EXP 48
18614: PUSH
18615: LD_EXP 62
18619: AND
18620: IFFALSE 18718
18622: GO 18624
18624: DISABLE
18625: LD_INT 0
18627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18628: LD_ADDR_VAR 0 1
18632: PUSH
18633: LD_INT 22
18635: PUSH
18636: LD_OWVAR 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 21
18647: PUSH
18648: LD_INT 1
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 69
18663: ST_TO_ADDR
// if not tmp then
18664: LD_VAR 0 1
18668: NOT
18669: IFFALSE 18673
// exit ;
18671: GO 18718
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18673: LD_VAR 0 1
18677: PUSH
18678: LD_INT 1
18680: PPUSH
18681: LD_VAR 0 1
18685: PPUSH
18686: CALL_OW 12
18690: ARRAY
18691: PPUSH
18692: LD_INT 1
18694: PPUSH
18695: LD_INT 4
18697: PPUSH
18698: CALL_OW 12
18702: PPUSH
18703: LD_INT 3000
18705: PPUSH
18706: LD_INT 9000
18708: PPUSH
18709: CALL_OW 12
18713: PPUSH
18714: CALL_OW 492
// end ;
18718: PPOPN 1
18720: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18721: LD_EXP 48
18725: PUSH
18726: LD_EXP 63
18730: AND
18731: IFFALSE 18751
18733: GO 18735
18735: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18736: LD_INT 1
18738: PPUSH
18739: LD_OWVAR 2
18743: PPUSH
18744: LD_INT 0
18746: PPUSH
18747: CALL_OW 324
18751: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18752: LD_EXP 48
18756: PUSH
18757: LD_EXP 64
18761: AND
18762: IFFALSE 18845
18764: GO 18766
18766: DISABLE
18767: LD_INT 0
18769: PPUSH
18770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18771: LD_ADDR_VAR 0 2
18775: PUSH
18776: LD_INT 22
18778: PUSH
18779: LD_OWVAR 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 21
18790: PUSH
18791: LD_INT 3
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: ST_TO_ADDR
// if not tmp then
18807: LD_VAR 0 2
18811: NOT
18812: IFFALSE 18816
// exit ;
18814: GO 18845
// for i in tmp do
18816: LD_ADDR_VAR 0 1
18820: PUSH
18821: LD_VAR 0 2
18825: PUSH
18826: FOR_IN
18827: IFFALSE 18843
// SetBLevel ( i , 10 ) ;
18829: LD_VAR 0 1
18833: PPUSH
18834: LD_INT 10
18836: PPUSH
18837: CALL_OW 241
18841: GO 18826
18843: POP
18844: POP
// end ;
18845: PPOPN 2
18847: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18848: LD_EXP 48
18852: PUSH
18853: LD_EXP 65
18857: AND
18858: IFFALSE 18969
18860: GO 18862
18862: DISABLE
18863: LD_INT 0
18865: PPUSH
18866: PPUSH
18867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18868: LD_ADDR_VAR 0 3
18872: PUSH
18873: LD_INT 22
18875: PUSH
18876: LD_OWVAR 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 25
18887: PUSH
18888: LD_INT 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PPUSH
18899: CALL_OW 69
18903: ST_TO_ADDR
// if not tmp then
18904: LD_VAR 0 3
18908: NOT
18909: IFFALSE 18913
// exit ;
18911: GO 18969
// un := tmp [ rand ( 1 , tmp ) ] ;
18913: LD_ADDR_VAR 0 2
18917: PUSH
18918: LD_VAR 0 3
18922: PUSH
18923: LD_INT 1
18925: PPUSH
18926: LD_VAR 0 3
18930: PPUSH
18931: CALL_OW 12
18935: ARRAY
18936: ST_TO_ADDR
// if Crawls ( un ) then
18937: LD_VAR 0 2
18941: PPUSH
18942: CALL_OW 318
18946: IFFALSE 18957
// ComWalk ( un ) ;
18948: LD_VAR 0 2
18952: PPUSH
18953: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18957: LD_VAR 0 2
18961: PPUSH
18962: LD_INT 5
18964: PPUSH
18965: CALL_OW 336
// end ;
18969: PPOPN 3
18971: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18972: LD_EXP 48
18976: PUSH
18977: LD_EXP 66
18981: AND
18982: PUSH
18983: LD_OWVAR 67
18987: PUSH
18988: LD_INT 3
18990: LESS
18991: AND
18992: IFFALSE 19011
18994: GO 18996
18996: DISABLE
// Difficulty := Difficulty + 1 ;
18997: LD_ADDR_OWVAR 67
19001: PUSH
19002: LD_OWVAR 67
19006: PUSH
19007: LD_INT 1
19009: PLUS
19010: ST_TO_ADDR
19011: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19012: LD_EXP 48
19016: PUSH
19017: LD_EXP 67
19021: AND
19022: IFFALSE 19125
19024: GO 19026
19026: DISABLE
19027: LD_INT 0
19029: PPUSH
// begin for i := 1 to 5 do
19030: LD_ADDR_VAR 0 1
19034: PUSH
19035: DOUBLE
19036: LD_INT 1
19038: DEC
19039: ST_TO_ADDR
19040: LD_INT 5
19042: PUSH
19043: FOR_TO
19044: IFFALSE 19123
// begin uc_nation := nation_nature ;
19046: LD_ADDR_OWVAR 21
19050: PUSH
19051: LD_INT 0
19053: ST_TO_ADDR
// uc_side := 0 ;
19054: LD_ADDR_OWVAR 20
19058: PUSH
19059: LD_INT 0
19061: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19062: LD_ADDR_OWVAR 29
19066: PUSH
19067: LD_INT 12
19069: PUSH
19070: LD_INT 12
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: ST_TO_ADDR
// hc_agressivity := 20 ;
19077: LD_ADDR_OWVAR 35
19081: PUSH
19082: LD_INT 20
19084: ST_TO_ADDR
// hc_class := class_tiger ;
19085: LD_ADDR_OWVAR 28
19089: PUSH
19090: LD_INT 14
19092: ST_TO_ADDR
// hc_gallery :=  ;
19093: LD_ADDR_OWVAR 33
19097: PUSH
19098: LD_STRING 
19100: ST_TO_ADDR
// hc_name :=  ;
19101: LD_ADDR_OWVAR 26
19105: PUSH
19106: LD_STRING 
19108: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19109: CALL_OW 44
19113: PPUSH
19114: LD_INT 0
19116: PPUSH
19117: CALL_OW 51
// end ;
19121: GO 19043
19123: POP
19124: POP
// end ;
19125: PPOPN 1
19127: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19128: LD_EXP 48
19132: PUSH
19133: LD_EXP 68
19137: AND
19138: IFFALSE 19147
19140: GO 19142
19142: DISABLE
// StreamSibBomb ;
19143: CALL 19148 0 0
19147: END
// export function StreamSibBomb ; var i , x , y ; begin
19148: LD_INT 0
19150: PPUSH
19151: PPUSH
19152: PPUSH
19153: PPUSH
// result := false ;
19154: LD_ADDR_VAR 0 1
19158: PUSH
19159: LD_INT 0
19161: ST_TO_ADDR
// for i := 1 to 16 do
19162: LD_ADDR_VAR 0 2
19166: PUSH
19167: DOUBLE
19168: LD_INT 1
19170: DEC
19171: ST_TO_ADDR
19172: LD_INT 16
19174: PUSH
19175: FOR_TO
19176: IFFALSE 19375
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19178: LD_ADDR_VAR 0 3
19182: PUSH
19183: LD_INT 10
19185: PUSH
19186: LD_INT 20
19188: PUSH
19189: LD_INT 30
19191: PUSH
19192: LD_INT 40
19194: PUSH
19195: LD_INT 50
19197: PUSH
19198: LD_INT 60
19200: PUSH
19201: LD_INT 70
19203: PUSH
19204: LD_INT 80
19206: PUSH
19207: LD_INT 90
19209: PUSH
19210: LD_INT 100
19212: PUSH
19213: LD_INT 110
19215: PUSH
19216: LD_INT 120
19218: PUSH
19219: LD_INT 130
19221: PUSH
19222: LD_INT 140
19224: PUSH
19225: LD_INT 150
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 1
19247: PPUSH
19248: LD_INT 15
19250: PPUSH
19251: CALL_OW 12
19255: ARRAY
19256: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19257: LD_ADDR_VAR 0 4
19261: PUSH
19262: LD_INT 10
19264: PUSH
19265: LD_INT 20
19267: PUSH
19268: LD_INT 30
19270: PUSH
19271: LD_INT 40
19273: PUSH
19274: LD_INT 50
19276: PUSH
19277: LD_INT 60
19279: PUSH
19280: LD_INT 70
19282: PUSH
19283: LD_INT 80
19285: PUSH
19286: LD_INT 90
19288: PUSH
19289: LD_INT 100
19291: PUSH
19292: LD_INT 110
19294: PUSH
19295: LD_INT 120
19297: PUSH
19298: LD_INT 130
19300: PUSH
19301: LD_INT 140
19303: PUSH
19304: LD_INT 150
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 1
19326: PPUSH
19327: LD_INT 15
19329: PPUSH
19330: CALL_OW 12
19334: ARRAY
19335: ST_TO_ADDR
// if ValidHex ( x , y ) then
19336: LD_VAR 0 3
19340: PPUSH
19341: LD_VAR 0 4
19345: PPUSH
19346: CALL_OW 488
19350: IFFALSE 19373
// begin result := [ x , y ] ;
19352: LD_ADDR_VAR 0 1
19356: PUSH
19357: LD_VAR 0 3
19361: PUSH
19362: LD_VAR 0 4
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: ST_TO_ADDR
// break ;
19371: GO 19375
// end ; end ;
19373: GO 19175
19375: POP
19376: POP
// if result then
19377: LD_VAR 0 1
19381: IFFALSE 19441
// begin ToLua ( playSibBomb() ) ;
19383: LD_STRING playSibBomb()
19385: PPUSH
19386: CALL_OW 559
// wait ( 0 0$14 ) ;
19390: LD_INT 490
19392: PPUSH
19393: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19397: LD_VAR 0 1
19401: PUSH
19402: LD_INT 1
19404: ARRAY
19405: PPUSH
19406: LD_VAR 0 1
19410: PUSH
19411: LD_INT 2
19413: ARRAY
19414: PPUSH
19415: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19419: LD_VAR 0 1
19423: PUSH
19424: LD_INT 1
19426: ARRAY
19427: PPUSH
19428: LD_VAR 0 1
19432: PUSH
19433: LD_INT 2
19435: ARRAY
19436: PPUSH
19437: CALL_OW 429
// end ; end ;
19441: LD_VAR 0 1
19445: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19446: LD_EXP 48
19450: PUSH
19451: LD_EXP 70
19455: AND
19456: IFFALSE 19468
19458: GO 19460
19460: DISABLE
// YouLost (  ) ;
19461: LD_STRING 
19463: PPUSH
19464: CALL_OW 104
19468: END
// every 0 0$1 trigger StreamModeActive and sFog do
19469: LD_EXP 48
19473: PUSH
19474: LD_EXP 69
19478: AND
19479: IFFALSE 19493
19481: GO 19483
19483: DISABLE
// FogOff ( your_side ) ;
19484: LD_OWVAR 2
19488: PPUSH
19489: CALL_OW 344
19493: END
// every 0 0$1 trigger StreamModeActive and sSun do
19494: LD_EXP 48
19498: PUSH
19499: LD_EXP 71
19503: AND
19504: IFFALSE 19532
19506: GO 19508
19508: DISABLE
// begin solar_recharge_percent := 0 ;
19509: LD_ADDR_OWVAR 79
19513: PUSH
19514: LD_INT 0
19516: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19517: LD_INT 10500
19519: PPUSH
19520: CALL_OW 67
// solar_recharge_percent := 100 ;
19524: LD_ADDR_OWVAR 79
19528: PUSH
19529: LD_INT 100
19531: ST_TO_ADDR
// end ;
19532: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19533: LD_EXP 48
19537: PUSH
19538: LD_EXP 72
19542: AND
19543: IFFALSE 19782
19545: GO 19547
19547: DISABLE
19548: LD_INT 0
19550: PPUSH
19551: PPUSH
19552: PPUSH
// begin tmp := [ ] ;
19553: LD_ADDR_VAR 0 3
19557: PUSH
19558: EMPTY
19559: ST_TO_ADDR
// for i := 1 to 6 do
19560: LD_ADDR_VAR 0 1
19564: PUSH
19565: DOUBLE
19566: LD_INT 1
19568: DEC
19569: ST_TO_ADDR
19570: LD_INT 6
19572: PUSH
19573: FOR_TO
19574: IFFALSE 19679
// begin uc_nation := nation_nature ;
19576: LD_ADDR_OWVAR 21
19580: PUSH
19581: LD_INT 0
19583: ST_TO_ADDR
// uc_side := 0 ;
19584: LD_ADDR_OWVAR 20
19588: PUSH
19589: LD_INT 0
19591: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19592: LD_ADDR_OWVAR 29
19596: PUSH
19597: LD_INT 12
19599: PUSH
19600: LD_INT 12
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: ST_TO_ADDR
// hc_agressivity := 20 ;
19607: LD_ADDR_OWVAR 35
19611: PUSH
19612: LD_INT 20
19614: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19615: LD_ADDR_OWVAR 28
19619: PUSH
19620: LD_INT 17
19622: ST_TO_ADDR
// hc_gallery :=  ;
19623: LD_ADDR_OWVAR 33
19627: PUSH
19628: LD_STRING 
19630: ST_TO_ADDR
// hc_name :=  ;
19631: LD_ADDR_OWVAR 26
19635: PUSH
19636: LD_STRING 
19638: ST_TO_ADDR
// un := CreateHuman ;
19639: LD_ADDR_VAR 0 2
19643: PUSH
19644: CALL_OW 44
19648: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19649: LD_VAR 0 2
19653: PPUSH
19654: LD_INT 1
19656: PPUSH
19657: CALL_OW 51
// tmp := tmp ^ un ;
19661: LD_ADDR_VAR 0 3
19665: PUSH
19666: LD_VAR 0 3
19670: PUSH
19671: LD_VAR 0 2
19675: ADD
19676: ST_TO_ADDR
// end ;
19677: GO 19573
19679: POP
19680: POP
// repeat wait ( 0 0$1 ) ;
19681: LD_INT 35
19683: PPUSH
19684: CALL_OW 67
// for un in tmp do
19688: LD_ADDR_VAR 0 2
19692: PUSH
19693: LD_VAR 0 3
19697: PUSH
19698: FOR_IN
19699: IFFALSE 19773
// begin if IsDead ( un ) then
19701: LD_VAR 0 2
19705: PPUSH
19706: CALL_OW 301
19710: IFFALSE 19730
// begin tmp := tmp diff un ;
19712: LD_ADDR_VAR 0 3
19716: PUSH
19717: LD_VAR 0 3
19721: PUSH
19722: LD_VAR 0 2
19726: DIFF
19727: ST_TO_ADDR
// continue ;
19728: GO 19698
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19730: LD_VAR 0 2
19734: PPUSH
19735: LD_INT 3
19737: PUSH
19738: LD_INT 22
19740: PUSH
19741: LD_INT 0
19743: PUSH
19744: EMPTY
19745: LIST
19746: LIST
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PPUSH
19752: CALL_OW 69
19756: PPUSH
19757: LD_VAR 0 2
19761: PPUSH
19762: CALL_OW 74
19766: PPUSH
19767: CALL_OW 115
// end ;
19771: GO 19698
19773: POP
19774: POP
// until not tmp ;
19775: LD_VAR 0 3
19779: NOT
19780: IFFALSE 19681
// end ;
19782: PPOPN 3
19784: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19785: LD_EXP 48
19789: PUSH
19790: LD_EXP 73
19794: AND
19795: IFFALSE 19849
19797: GO 19799
19799: DISABLE
// begin ToLua ( displayTroll(); ) ;
19800: LD_STRING displayTroll();
19802: PPUSH
19803: CALL_OW 559
// wait ( 3 3$00 ) ;
19807: LD_INT 6300
19809: PPUSH
19810: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19814: LD_STRING hideTroll();
19816: PPUSH
19817: CALL_OW 559
// wait ( 1 1$00 ) ;
19821: LD_INT 2100
19823: PPUSH
19824: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19828: LD_STRING displayTroll();
19830: PPUSH
19831: CALL_OW 559
// wait ( 1 1$00 ) ;
19835: LD_INT 2100
19837: PPUSH
19838: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19842: LD_STRING hideTroll();
19844: PPUSH
19845: CALL_OW 559
// end ;
19849: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19850: LD_EXP 48
19854: PUSH
19855: LD_EXP 74
19859: AND
19860: IFFALSE 19923
19862: GO 19864
19864: DISABLE
19865: LD_INT 0
19867: PPUSH
// begin p := 0 ;
19868: LD_ADDR_VAR 0 1
19872: PUSH
19873: LD_INT 0
19875: ST_TO_ADDR
// repeat game_speed := 1 ;
19876: LD_ADDR_OWVAR 65
19880: PUSH
19881: LD_INT 1
19883: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19884: LD_INT 35
19886: PPUSH
19887: CALL_OW 67
// p := p + 1 ;
19891: LD_ADDR_VAR 0 1
19895: PUSH
19896: LD_VAR 0 1
19900: PUSH
19901: LD_INT 1
19903: PLUS
19904: ST_TO_ADDR
// until p >= 60 ;
19905: LD_VAR 0 1
19909: PUSH
19910: LD_INT 60
19912: GREATEREQUAL
19913: IFFALSE 19876
// game_speed := 4 ;
19915: LD_ADDR_OWVAR 65
19919: PUSH
19920: LD_INT 4
19922: ST_TO_ADDR
// end ;
19923: PPOPN 1
19925: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19926: LD_EXP 48
19930: PUSH
19931: LD_EXP 75
19935: AND
19936: IFFALSE 20082
19938: GO 19940
19940: DISABLE
19941: LD_INT 0
19943: PPUSH
19944: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19945: LD_ADDR_VAR 0 1
19949: PUSH
19950: LD_INT 22
19952: PUSH
19953: LD_OWVAR 2
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 2
19964: PUSH
19965: LD_INT 30
19967: PUSH
19968: LD_INT 0
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PUSH
19975: LD_INT 30
19977: PUSH
19978: LD_INT 1
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: ST_TO_ADDR
// if not depot then
19999: LD_VAR 0 1
20003: NOT
20004: IFFALSE 20008
// exit ;
20006: GO 20082
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20008: LD_ADDR_VAR 0 2
20012: PUSH
20013: LD_VAR 0 1
20017: PUSH
20018: LD_INT 1
20020: PPUSH
20021: LD_VAR 0 1
20025: PPUSH
20026: CALL_OW 12
20030: ARRAY
20031: PPUSH
20032: CALL_OW 274
20036: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20037: LD_VAR 0 2
20041: PPUSH
20042: LD_INT 1
20044: PPUSH
20045: LD_INT 0
20047: PPUSH
20048: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20052: LD_VAR 0 2
20056: PPUSH
20057: LD_INT 2
20059: PPUSH
20060: LD_INT 0
20062: PPUSH
20063: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_INT 3
20074: PPUSH
20075: LD_INT 0
20077: PPUSH
20078: CALL_OW 277
// end ;
20082: PPOPN 2
20084: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20085: LD_EXP 48
20089: PUSH
20090: LD_EXP 76
20094: AND
20095: IFFALSE 20192
20097: GO 20099
20099: DISABLE
20100: LD_INT 0
20102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20103: LD_ADDR_VAR 0 1
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_OWVAR 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PUSH
20120: LD_INT 21
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 3
20132: PUSH
20133: LD_INT 23
20135: PUSH
20136: LD_INT 0
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: PPUSH
20152: CALL_OW 69
20156: ST_TO_ADDR
// if not tmp then
20157: LD_VAR 0 1
20161: NOT
20162: IFFALSE 20166
// exit ;
20164: GO 20192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20166: LD_VAR 0 1
20170: PUSH
20171: LD_INT 1
20173: PPUSH
20174: LD_VAR 0 1
20178: PPUSH
20179: CALL_OW 12
20183: ARRAY
20184: PPUSH
20185: LD_INT 200
20187: PPUSH
20188: CALL_OW 234
// end ;
20192: PPOPN 1
20194: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20195: LD_EXP 48
20199: PUSH
20200: LD_EXP 77
20204: AND
20205: IFFALSE 20284
20207: GO 20209
20209: DISABLE
20210: LD_INT 0
20212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20213: LD_ADDR_VAR 0 1
20217: PUSH
20218: LD_INT 22
20220: PUSH
20221: LD_OWVAR 2
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 21
20232: PUSH
20233: LD_INT 2
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PPUSH
20244: CALL_OW 69
20248: ST_TO_ADDR
// if not tmp then
20249: LD_VAR 0 1
20253: NOT
20254: IFFALSE 20258
// exit ;
20256: GO 20284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20258: LD_VAR 0 1
20262: PUSH
20263: LD_INT 1
20265: PPUSH
20266: LD_VAR 0 1
20270: PPUSH
20271: CALL_OW 12
20275: ARRAY
20276: PPUSH
20277: LD_INT 60
20279: PPUSH
20280: CALL_OW 234
// end ;
20284: PPOPN 1
20286: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20287: LD_EXP 48
20291: PUSH
20292: LD_EXP 78
20296: AND
20297: IFFALSE 20396
20299: GO 20301
20301: DISABLE
20302: LD_INT 0
20304: PPUSH
20305: PPUSH
// begin enable ;
20306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20307: LD_ADDR_VAR 0 1
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_OWVAR 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 61
20326: PUSH
20327: EMPTY
20328: LIST
20329: PUSH
20330: LD_INT 33
20332: PUSH
20333: LD_INT 2
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 69
20349: ST_TO_ADDR
// if not tmp then
20350: LD_VAR 0 1
20354: NOT
20355: IFFALSE 20359
// exit ;
20357: GO 20396
// for i in tmp do
20359: LD_ADDR_VAR 0 2
20363: PUSH
20364: LD_VAR 0 1
20368: PUSH
20369: FOR_IN
20370: IFFALSE 20394
// if IsControledBy ( i ) then
20372: LD_VAR 0 2
20376: PPUSH
20377: CALL_OW 312
20381: IFFALSE 20392
// ComUnlink ( i ) ;
20383: LD_VAR 0 2
20387: PPUSH
20388: CALL_OW 136
20392: GO 20369
20394: POP
20395: POP
// end ;
20396: PPOPN 2
20398: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20399: LD_EXP 48
20403: PUSH
20404: LD_EXP 79
20408: AND
20409: IFFALSE 20549
20411: GO 20413
20413: DISABLE
20414: LD_INT 0
20416: PPUSH
20417: PPUSH
// begin ToLua ( displayPowell(); ) ;
20418: LD_STRING displayPowell();
20420: PPUSH
20421: CALL_OW 559
// uc_side := 0 ;
20425: LD_ADDR_OWVAR 20
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// uc_nation := 2 ;
20433: LD_ADDR_OWVAR 21
20437: PUSH
20438: LD_INT 2
20440: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20441: LD_ADDR_OWVAR 37
20445: PUSH
20446: LD_INT 14
20448: ST_TO_ADDR
// vc_engine := engine_siberite ;
20449: LD_ADDR_OWVAR 39
20453: PUSH
20454: LD_INT 3
20456: ST_TO_ADDR
// vc_control := control_apeman ;
20457: LD_ADDR_OWVAR 38
20461: PUSH
20462: LD_INT 5
20464: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20465: LD_ADDR_OWVAR 40
20469: PUSH
20470: LD_INT 29
20472: ST_TO_ADDR
// un := CreateVehicle ;
20473: LD_ADDR_VAR 0 2
20477: PUSH
20478: CALL_OW 45
20482: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20483: LD_VAR 0 2
20487: PPUSH
20488: LD_INT 1
20490: PPUSH
20491: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20495: LD_INT 35
20497: PPUSH
20498: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20502: LD_VAR 0 2
20506: PPUSH
20507: LD_INT 22
20509: PUSH
20510: LD_OWVAR 2
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PPUSH
20519: CALL_OW 69
20523: PPUSH
20524: LD_VAR 0 2
20528: PPUSH
20529: CALL_OW 74
20533: PPUSH
20534: CALL_OW 115
// until IsDead ( un ) ;
20538: LD_VAR 0 2
20542: PPUSH
20543: CALL_OW 301
20547: IFFALSE 20495
// end ;
20549: PPOPN 2
20551: END
// every 0 0$1 trigger StreamModeActive and sStu do
20552: LD_EXP 48
20556: PUSH
20557: LD_EXP 87
20561: AND
20562: IFFALSE 20578
20564: GO 20566
20566: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20567: LD_STRING displayStucuk();
20569: PPUSH
20570: CALL_OW 559
// ResetFog ;
20574: CALL_OW 335
// end ;
20578: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20579: LD_EXP 48
20583: PUSH
20584: LD_EXP 80
20588: AND
20589: IFFALSE 20730
20591: GO 20593
20593: DISABLE
20594: LD_INT 0
20596: PPUSH
20597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20598: LD_ADDR_VAR 0 2
20602: PUSH
20603: LD_INT 22
20605: PUSH
20606: LD_OWVAR 2
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: PUSH
20615: LD_INT 21
20617: PUSH
20618: LD_INT 1
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PPUSH
20629: CALL_OW 69
20633: ST_TO_ADDR
// if not tmp then
20634: LD_VAR 0 2
20638: NOT
20639: IFFALSE 20643
// exit ;
20641: GO 20730
// un := tmp [ rand ( 1 , tmp ) ] ;
20643: LD_ADDR_VAR 0 1
20647: PUSH
20648: LD_VAR 0 2
20652: PUSH
20653: LD_INT 1
20655: PPUSH
20656: LD_VAR 0 2
20660: PPUSH
20661: CALL_OW 12
20665: ARRAY
20666: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20667: LD_VAR 0 1
20671: PPUSH
20672: LD_INT 0
20674: PPUSH
20675: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_OWVAR 3
20688: PUSH
20689: LD_VAR 0 1
20693: DIFF
20694: PPUSH
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 74
20704: PPUSH
20705: CALL_OW 115
// wait ( 0 0$20 ) ;
20709: LD_INT 700
20711: PPUSH
20712: CALL_OW 67
// SetSide ( un , your_side ) ;
20716: LD_VAR 0 1
20720: PPUSH
20721: LD_OWVAR 2
20725: PPUSH
20726: CALL_OW 235
// end ;
20730: PPOPN 2
20732: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20733: LD_EXP 48
20737: PUSH
20738: LD_EXP 81
20742: AND
20743: IFFALSE 20849
20745: GO 20747
20747: DISABLE
20748: LD_INT 0
20750: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20751: LD_ADDR_VAR 0 1
20755: PUSH
20756: LD_INT 22
20758: PUSH
20759: LD_OWVAR 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 2
20770: PUSH
20771: LD_INT 30
20773: PUSH
20774: LD_INT 0
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: LD_INT 30
20783: PUSH
20784: LD_INT 1
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: LIST
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: PPUSH
20800: CALL_OW 69
20804: ST_TO_ADDR
// if not depot then
20805: LD_VAR 0 1
20809: NOT
20810: IFFALSE 20814
// exit ;
20812: GO 20849
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20814: LD_VAR 0 1
20818: PUSH
20819: LD_INT 1
20821: ARRAY
20822: PPUSH
20823: CALL_OW 250
20827: PPUSH
20828: LD_VAR 0 1
20832: PUSH
20833: LD_INT 1
20835: ARRAY
20836: PPUSH
20837: CALL_OW 251
20841: PPUSH
20842: LD_INT 70
20844: PPUSH
20845: CALL_OW 495
// end ;
20849: PPOPN 1
20851: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20852: LD_EXP 48
20856: PUSH
20857: LD_EXP 82
20861: AND
20862: IFFALSE 21073
20864: GO 20866
20866: DISABLE
20867: LD_INT 0
20869: PPUSH
20870: PPUSH
20871: PPUSH
20872: PPUSH
20873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20874: LD_ADDR_VAR 0 5
20878: PUSH
20879: LD_INT 22
20881: PUSH
20882: LD_OWVAR 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 21
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 69
20909: ST_TO_ADDR
// if not tmp then
20910: LD_VAR 0 5
20914: NOT
20915: IFFALSE 20919
// exit ;
20917: GO 21073
// for i in tmp do
20919: LD_ADDR_VAR 0 1
20923: PUSH
20924: LD_VAR 0 5
20928: PUSH
20929: FOR_IN
20930: IFFALSE 21071
// begin d := rand ( 0 , 5 ) ;
20932: LD_ADDR_VAR 0 4
20936: PUSH
20937: LD_INT 0
20939: PPUSH
20940: LD_INT 5
20942: PPUSH
20943: CALL_OW 12
20947: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20948: LD_ADDR_VAR 0 2
20952: PUSH
20953: LD_VAR 0 1
20957: PPUSH
20958: CALL_OW 250
20962: PPUSH
20963: LD_VAR 0 4
20967: PPUSH
20968: LD_INT 3
20970: PPUSH
20971: LD_INT 12
20973: PPUSH
20974: CALL_OW 12
20978: PPUSH
20979: CALL_OW 272
20983: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20984: LD_ADDR_VAR 0 3
20988: PUSH
20989: LD_VAR 0 1
20993: PPUSH
20994: CALL_OW 251
20998: PPUSH
20999: LD_VAR 0 4
21003: PPUSH
21004: LD_INT 3
21006: PPUSH
21007: LD_INT 12
21009: PPUSH
21010: CALL_OW 12
21014: PPUSH
21015: CALL_OW 273
21019: ST_TO_ADDR
// if ValidHex ( x , y ) then
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_VAR 0 3
21029: PPUSH
21030: CALL_OW 488
21034: IFFALSE 21069
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21036: LD_VAR 0 1
21040: PPUSH
21041: LD_VAR 0 2
21045: PPUSH
21046: LD_VAR 0 3
21050: PPUSH
21051: LD_INT 3
21053: PPUSH
21054: LD_INT 6
21056: PPUSH
21057: CALL_OW 12
21061: PPUSH
21062: LD_INT 1
21064: PPUSH
21065: CALL_OW 483
// end ;
21069: GO 20929
21071: POP
21072: POP
// end ;
21073: PPOPN 5
21075: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21076: LD_EXP 48
21080: PUSH
21081: LD_EXP 83
21085: AND
21086: IFFALSE 21180
21088: GO 21090
21090: DISABLE
21091: LD_INT 0
21093: PPUSH
21094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21095: LD_ADDR_VAR 0 2
21099: PUSH
21100: LD_INT 22
21102: PUSH
21103: LD_OWVAR 2
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 32
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 21
21124: PUSH
21125: LD_INT 2
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: LIST
21136: PPUSH
21137: CALL_OW 69
21141: ST_TO_ADDR
// if not tmp then
21142: LD_VAR 0 2
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 21180
// for i in tmp do
21151: LD_ADDR_VAR 0 1
21155: PUSH
21156: LD_VAR 0 2
21160: PUSH
21161: FOR_IN
21162: IFFALSE 21178
// SetFuel ( i , 0 ) ;
21164: LD_VAR 0 1
21168: PPUSH
21169: LD_INT 0
21171: PPUSH
21172: CALL_OW 240
21176: GO 21161
21178: POP
21179: POP
// end ;
21180: PPOPN 2
21182: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21183: LD_EXP 48
21187: PUSH
21188: LD_EXP 84
21192: AND
21193: IFFALSE 21259
21195: GO 21197
21197: DISABLE
21198: LD_INT 0
21200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21201: LD_ADDR_VAR 0 1
21205: PUSH
21206: LD_INT 22
21208: PUSH
21209: LD_OWVAR 2
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 30
21220: PUSH
21221: LD_INT 29
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PPUSH
21232: CALL_OW 69
21236: ST_TO_ADDR
// if not tmp then
21237: LD_VAR 0 1
21241: NOT
21242: IFFALSE 21246
// exit ;
21244: GO 21259
// DestroyUnit ( tmp [ 1 ] ) ;
21246: LD_VAR 0 1
21250: PUSH
21251: LD_INT 1
21253: ARRAY
21254: PPUSH
21255: CALL_OW 65
// end ;
21259: PPOPN 1
21261: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21262: LD_EXP 48
21266: PUSH
21267: LD_EXP 86
21271: AND
21272: IFFALSE 21401
21274: GO 21276
21276: DISABLE
21277: LD_INT 0
21279: PPUSH
// begin uc_side := 0 ;
21280: LD_ADDR_OWVAR 20
21284: PUSH
21285: LD_INT 0
21287: ST_TO_ADDR
// uc_nation := nation_arabian ;
21288: LD_ADDR_OWVAR 21
21292: PUSH
21293: LD_INT 2
21295: ST_TO_ADDR
// hc_gallery :=  ;
21296: LD_ADDR_OWVAR 33
21300: PUSH
21301: LD_STRING 
21303: ST_TO_ADDR
// hc_name :=  ;
21304: LD_ADDR_OWVAR 26
21308: PUSH
21309: LD_STRING 
21311: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21312: LD_INT 1
21314: PPUSH
21315: LD_INT 11
21317: PPUSH
21318: LD_INT 10
21320: PPUSH
21321: CALL_OW 380
// un := CreateHuman ;
21325: LD_ADDR_VAR 0 1
21329: PUSH
21330: CALL_OW 44
21334: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21335: LD_VAR 0 1
21339: PPUSH
21340: LD_INT 1
21342: PPUSH
21343: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21347: LD_INT 35
21349: PPUSH
21350: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_INT 22
21361: PUSH
21362: LD_OWVAR 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: PPUSH
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 74
21385: PPUSH
21386: CALL_OW 115
// until IsDead ( un ) ;
21390: LD_VAR 0 1
21394: PPUSH
21395: CALL_OW 301
21399: IFFALSE 21347
// end ;
21401: PPOPN 1
21403: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21404: LD_EXP 48
21408: PUSH
21409: LD_EXP 88
21413: AND
21414: IFFALSE 21426
21416: GO 21418
21418: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21419: LD_STRING earthquake(getX(game), 0, 32)
21421: PPUSH
21422: CALL_OW 559
21426: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21427: LD_EXP 48
21431: PUSH
21432: LD_EXP 89
21436: AND
21437: IFFALSE 21528
21439: GO 21441
21441: DISABLE
21442: LD_INT 0
21444: PPUSH
// begin enable ;
21445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21446: LD_ADDR_VAR 0 1
21450: PUSH
21451: LD_INT 22
21453: PUSH
21454: LD_OWVAR 2
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 21
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 33
21475: PUSH
21476: LD_INT 3
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: LIST
21487: PPUSH
21488: CALL_OW 69
21492: ST_TO_ADDR
// if not tmp then
21493: LD_VAR 0 1
21497: NOT
21498: IFFALSE 21502
// exit ;
21500: GO 21528
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21502: LD_VAR 0 1
21506: PUSH
21507: LD_INT 1
21509: PPUSH
21510: LD_VAR 0 1
21514: PPUSH
21515: CALL_OW 12
21519: ARRAY
21520: PPUSH
21521: LD_INT 1
21523: PPUSH
21524: CALL_OW 234
// end ;
21528: PPOPN 1
21530: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21531: LD_EXP 48
21535: PUSH
21536: LD_EXP 90
21540: AND
21541: IFFALSE 21682
21543: GO 21545
21545: DISABLE
21546: LD_INT 0
21548: PPUSH
21549: PPUSH
21550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21551: LD_ADDR_VAR 0 3
21555: PUSH
21556: LD_INT 22
21558: PUSH
21559: LD_OWVAR 2
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 25
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PPUSH
21582: CALL_OW 69
21586: ST_TO_ADDR
// if not tmp then
21587: LD_VAR 0 3
21591: NOT
21592: IFFALSE 21596
// exit ;
21594: GO 21682
// un := tmp [ rand ( 1 , tmp ) ] ;
21596: LD_ADDR_VAR 0 2
21600: PUSH
21601: LD_VAR 0 3
21605: PUSH
21606: LD_INT 1
21608: PPUSH
21609: LD_VAR 0 3
21613: PPUSH
21614: CALL_OW 12
21618: ARRAY
21619: ST_TO_ADDR
// if Crawls ( un ) then
21620: LD_VAR 0 2
21624: PPUSH
21625: CALL_OW 318
21629: IFFALSE 21640
// ComWalk ( un ) ;
21631: LD_VAR 0 2
21635: PPUSH
21636: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21640: LD_VAR 0 2
21644: PPUSH
21645: LD_INT 9
21647: PPUSH
21648: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21652: LD_INT 28
21654: PPUSH
21655: LD_OWVAR 2
21659: PPUSH
21660: LD_INT 2
21662: PPUSH
21663: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21667: LD_INT 29
21669: PPUSH
21670: LD_OWVAR 2
21674: PPUSH
21675: LD_INT 2
21677: PPUSH
21678: CALL_OW 322
// end ;
21682: PPOPN 3
21684: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21685: LD_EXP 48
21689: PUSH
21690: LD_EXP 91
21694: AND
21695: IFFALSE 21806
21697: GO 21699
21699: DISABLE
21700: LD_INT 0
21702: PPUSH
21703: PPUSH
21704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21705: LD_ADDR_VAR 0 3
21709: PUSH
21710: LD_INT 22
21712: PUSH
21713: LD_OWVAR 2
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: LD_INT 25
21724: PUSH
21725: LD_INT 1
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PPUSH
21736: CALL_OW 69
21740: ST_TO_ADDR
// if not tmp then
21741: LD_VAR 0 3
21745: NOT
21746: IFFALSE 21750
// exit ;
21748: GO 21806
// un := tmp [ rand ( 1 , tmp ) ] ;
21750: LD_ADDR_VAR 0 2
21754: PUSH
21755: LD_VAR 0 3
21759: PUSH
21760: LD_INT 1
21762: PPUSH
21763: LD_VAR 0 3
21767: PPUSH
21768: CALL_OW 12
21772: ARRAY
21773: ST_TO_ADDR
// if Crawls ( un ) then
21774: LD_VAR 0 2
21778: PPUSH
21779: CALL_OW 318
21783: IFFALSE 21794
// ComWalk ( un ) ;
21785: LD_VAR 0 2
21789: PPUSH
21790: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21794: LD_VAR 0 2
21798: PPUSH
21799: LD_INT 8
21801: PPUSH
21802: CALL_OW 336
// end ;
21806: PPOPN 3
21808: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21809: LD_EXP 48
21813: PUSH
21814: LD_EXP 92
21818: AND
21819: IFFALSE 21963
21821: GO 21823
21823: DISABLE
21824: LD_INT 0
21826: PPUSH
21827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21828: LD_ADDR_VAR 0 2
21832: PUSH
21833: LD_INT 22
21835: PUSH
21836: LD_OWVAR 2
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 2
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 2
21857: PUSH
21858: LD_INT 34
21860: PUSH
21861: LD_INT 12
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: PUSH
21868: LD_INT 34
21870: PUSH
21871: LD_INT 51
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PUSH
21878: LD_INT 34
21880: PUSH
21881: LD_INT 32
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: LIST
21898: PPUSH
21899: CALL_OW 69
21903: ST_TO_ADDR
// if not tmp then
21904: LD_VAR 0 2
21908: NOT
21909: IFFALSE 21913
// exit ;
21911: GO 21963
// for i in tmp do
21913: LD_ADDR_VAR 0 1
21917: PUSH
21918: LD_VAR 0 2
21922: PUSH
21923: FOR_IN
21924: IFFALSE 21961
// if GetCargo ( i , mat_artifact ) = 0 then
21926: LD_VAR 0 1
21930: PPUSH
21931: LD_INT 4
21933: PPUSH
21934: CALL_OW 289
21938: PUSH
21939: LD_INT 0
21941: EQUAL
21942: IFFALSE 21959
// SetCargo ( i , mat_siberit , 100 ) ;
21944: LD_VAR 0 1
21948: PPUSH
21949: LD_INT 3
21951: PPUSH
21952: LD_INT 100
21954: PPUSH
21955: CALL_OW 290
21959: GO 21923
21961: POP
21962: POP
// end ;
21963: PPOPN 2
21965: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21966: LD_EXP 48
21970: PUSH
21971: LD_EXP 93
21975: AND
21976: IFFALSE 22159
21978: GO 21980
21980: DISABLE
21981: LD_INT 0
21983: PPUSH
21984: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21985: LD_ADDR_VAR 0 2
21989: PUSH
21990: LD_INT 22
21992: PUSH
21993: LD_OWVAR 2
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PPUSH
22002: CALL_OW 69
22006: ST_TO_ADDR
// if not tmp then
22007: LD_VAR 0 2
22011: NOT
22012: IFFALSE 22016
// exit ;
22014: GO 22159
// for i := 1 to 2 do
22016: LD_ADDR_VAR 0 1
22020: PUSH
22021: DOUBLE
22022: LD_INT 1
22024: DEC
22025: ST_TO_ADDR
22026: LD_INT 2
22028: PUSH
22029: FOR_TO
22030: IFFALSE 22157
// begin uc_side := your_side ;
22032: LD_ADDR_OWVAR 20
22036: PUSH
22037: LD_OWVAR 2
22041: ST_TO_ADDR
// uc_nation := nation_american ;
22042: LD_ADDR_OWVAR 21
22046: PUSH
22047: LD_INT 1
22049: ST_TO_ADDR
// vc_chassis := us_morphling ;
22050: LD_ADDR_OWVAR 37
22054: PUSH
22055: LD_INT 5
22057: ST_TO_ADDR
// vc_engine := engine_siberite ;
22058: LD_ADDR_OWVAR 39
22062: PUSH
22063: LD_INT 3
22065: ST_TO_ADDR
// vc_control := control_computer ;
22066: LD_ADDR_OWVAR 38
22070: PUSH
22071: LD_INT 3
22073: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22074: LD_ADDR_OWVAR 40
22078: PUSH
22079: LD_INT 10
22081: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22082: LD_VAR 0 2
22086: PUSH
22087: LD_INT 1
22089: ARRAY
22090: PPUSH
22091: CALL_OW 310
22095: NOT
22096: IFFALSE 22143
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22098: CALL_OW 45
22102: PPUSH
22103: LD_VAR 0 2
22107: PUSH
22108: LD_INT 1
22110: ARRAY
22111: PPUSH
22112: CALL_OW 250
22116: PPUSH
22117: LD_VAR 0 2
22121: PUSH
22122: LD_INT 1
22124: ARRAY
22125: PPUSH
22126: CALL_OW 251
22130: PPUSH
22131: LD_INT 12
22133: PPUSH
22134: LD_INT 1
22136: PPUSH
22137: CALL_OW 50
22141: GO 22155
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22143: CALL_OW 45
22147: PPUSH
22148: LD_INT 1
22150: PPUSH
22151: CALL_OW 51
// end ;
22155: GO 22029
22157: POP
22158: POP
// end ;
22159: PPOPN 2
22161: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22162: LD_EXP 48
22166: PUSH
22167: LD_EXP 94
22171: AND
22172: IFFALSE 22394
22174: GO 22176
22176: DISABLE
22177: LD_INT 0
22179: PPUSH
22180: PPUSH
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22185: LD_ADDR_VAR 0 6
22189: PUSH
22190: LD_INT 22
22192: PUSH
22193: LD_OWVAR 2
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 21
22204: PUSH
22205: LD_INT 1
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 3
22214: PUSH
22215: LD_INT 23
22217: PUSH
22218: LD_INT 0
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: LIST
22233: PPUSH
22234: CALL_OW 69
22238: ST_TO_ADDR
// if not tmp then
22239: LD_VAR 0 6
22243: NOT
22244: IFFALSE 22248
// exit ;
22246: GO 22394
// s1 := rand ( 1 , 4 ) ;
22248: LD_ADDR_VAR 0 2
22252: PUSH
22253: LD_INT 1
22255: PPUSH
22256: LD_INT 4
22258: PPUSH
22259: CALL_OW 12
22263: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22264: LD_ADDR_VAR 0 4
22268: PUSH
22269: LD_VAR 0 6
22273: PUSH
22274: LD_INT 1
22276: ARRAY
22277: PPUSH
22278: LD_VAR 0 2
22282: PPUSH
22283: CALL_OW 259
22287: ST_TO_ADDR
// if s1 = 1 then
22288: LD_VAR 0 2
22292: PUSH
22293: LD_INT 1
22295: EQUAL
22296: IFFALSE 22316
// s2 := rand ( 2 , 4 ) else
22298: LD_ADDR_VAR 0 3
22302: PUSH
22303: LD_INT 2
22305: PPUSH
22306: LD_INT 4
22308: PPUSH
22309: CALL_OW 12
22313: ST_TO_ADDR
22314: GO 22324
// s2 := 1 ;
22316: LD_ADDR_VAR 0 3
22320: PUSH
22321: LD_INT 1
22323: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22324: LD_ADDR_VAR 0 5
22328: PUSH
22329: LD_VAR 0 6
22333: PUSH
22334: LD_INT 1
22336: ARRAY
22337: PPUSH
22338: LD_VAR 0 3
22342: PPUSH
22343: CALL_OW 259
22347: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22348: LD_VAR 0 6
22352: PUSH
22353: LD_INT 1
22355: ARRAY
22356: PPUSH
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_VAR 0 5
22366: PPUSH
22367: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22371: LD_VAR 0 6
22375: PUSH
22376: LD_INT 1
22378: ARRAY
22379: PPUSH
22380: LD_VAR 0 3
22384: PPUSH
22385: LD_VAR 0 4
22389: PPUSH
22390: CALL_OW 237
// end ;
22394: PPOPN 6
22396: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22397: LD_EXP 48
22401: PUSH
22402: LD_EXP 95
22406: AND
22407: IFFALSE 22486
22409: GO 22411
22411: DISABLE
22412: LD_INT 0
22414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22415: LD_ADDR_VAR 0 1
22419: PUSH
22420: LD_INT 22
22422: PUSH
22423: LD_OWVAR 2
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 30
22434: PUSH
22435: LD_INT 3
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: EMPTY
22443: LIST
22444: LIST
22445: PPUSH
22446: CALL_OW 69
22450: ST_TO_ADDR
// if not tmp then
22451: LD_VAR 0 1
22455: NOT
22456: IFFALSE 22460
// exit ;
22458: GO 22486
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22460: LD_VAR 0 1
22464: PUSH
22465: LD_INT 1
22467: PPUSH
22468: LD_VAR 0 1
22472: PPUSH
22473: CALL_OW 12
22477: ARRAY
22478: PPUSH
22479: LD_INT 1
22481: PPUSH
22482: CALL_OW 234
// end ;
22486: PPOPN 1
22488: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22489: LD_EXP 48
22493: PUSH
22494: LD_EXP 96
22498: AND
22499: IFFALSE 22611
22501: GO 22503
22503: DISABLE
22504: LD_INT 0
22506: PPUSH
22507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22508: LD_ADDR_VAR 0 2
22512: PUSH
22513: LD_INT 22
22515: PUSH
22516: LD_OWVAR 2
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: LD_INT 30
22530: PUSH
22531: LD_INT 27
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 26
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 30
22550: PUSH
22551: LD_INT 28
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: ST_TO_ADDR
// if not tmp then
22573: LD_VAR 0 2
22577: NOT
22578: IFFALSE 22582
// exit ;
22580: GO 22611
// for i in tmp do
22582: LD_ADDR_VAR 0 1
22586: PUSH
22587: LD_VAR 0 2
22591: PUSH
22592: FOR_IN
22593: IFFALSE 22609
// SetLives ( i , 1 ) ;
22595: LD_VAR 0 1
22599: PPUSH
22600: LD_INT 1
22602: PPUSH
22603: CALL_OW 234
22607: GO 22592
22609: POP
22610: POP
// end ;
22611: PPOPN 2
22613: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22614: LD_EXP 48
22618: PUSH
22619: LD_EXP 97
22623: AND
22624: IFFALSE 22898
22626: GO 22628
22628: DISABLE
22629: LD_INT 0
22631: PPUSH
22632: PPUSH
22633: PPUSH
// begin i := rand ( 1 , 7 ) ;
22634: LD_ADDR_VAR 0 1
22638: PUSH
22639: LD_INT 1
22641: PPUSH
22642: LD_INT 7
22644: PPUSH
22645: CALL_OW 12
22649: ST_TO_ADDR
// case i of 1 :
22650: LD_VAR 0 1
22654: PUSH
22655: LD_INT 1
22657: DOUBLE
22658: EQUAL
22659: IFTRUE 22663
22661: GO 22673
22663: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22664: LD_STRING earthquake(getX(game), 0, 32)
22666: PPUSH
22667: CALL_OW 559
22671: GO 22898
22673: LD_INT 2
22675: DOUBLE
22676: EQUAL
22677: IFTRUE 22681
22679: GO 22695
22681: POP
// begin ToLua ( displayStucuk(); ) ;
22682: LD_STRING displayStucuk();
22684: PPUSH
22685: CALL_OW 559
// ResetFog ;
22689: CALL_OW 335
// end ; 3 :
22693: GO 22898
22695: LD_INT 3
22697: DOUBLE
22698: EQUAL
22699: IFTRUE 22703
22701: GO 22807
22703: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22704: LD_ADDR_VAR 0 2
22708: PUSH
22709: LD_INT 22
22711: PUSH
22712: LD_OWVAR 2
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 25
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PPUSH
22735: CALL_OW 69
22739: ST_TO_ADDR
// if not tmp then
22740: LD_VAR 0 2
22744: NOT
22745: IFFALSE 22749
// exit ;
22747: GO 22898
// un := tmp [ rand ( 1 , tmp ) ] ;
22749: LD_ADDR_VAR 0 3
22753: PUSH
22754: LD_VAR 0 2
22758: PUSH
22759: LD_INT 1
22761: PPUSH
22762: LD_VAR 0 2
22766: PPUSH
22767: CALL_OW 12
22771: ARRAY
22772: ST_TO_ADDR
// if Crawls ( un ) then
22773: LD_VAR 0 3
22777: PPUSH
22778: CALL_OW 318
22782: IFFALSE 22793
// ComWalk ( un ) ;
22784: LD_VAR 0 3
22788: PPUSH
22789: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22793: LD_VAR 0 3
22797: PPUSH
22798: LD_INT 8
22800: PPUSH
22801: CALL_OW 336
// end ; 4 :
22805: GO 22898
22807: LD_INT 4
22809: DOUBLE
22810: EQUAL
22811: IFTRUE 22815
22813: GO 22876
22815: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22816: LD_ADDR_VAR 0 2
22820: PUSH
22821: LD_INT 22
22823: PUSH
22824: LD_OWVAR 2
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 30
22835: PUSH
22836: LD_INT 29
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL_OW 69
22851: ST_TO_ADDR
// if not tmp then
22852: LD_VAR 0 2
22856: NOT
22857: IFFALSE 22861
// exit ;
22859: GO 22898
// DestroyUnit ( tmp [ 1 ] ) ;
22861: LD_VAR 0 2
22865: PUSH
22866: LD_INT 1
22868: ARRAY
22869: PPUSH
22870: CALL_OW 65
// end ; 5 .. 7 :
22874: GO 22898
22876: LD_INT 5
22878: DOUBLE
22879: GREATEREQUAL
22880: IFFALSE 22888
22882: LD_INT 7
22884: DOUBLE
22885: LESSEQUAL
22886: IFTRUE 22890
22888: GO 22897
22890: POP
// StreamSibBomb ; end ;
22891: CALL 19148 0 0
22895: GO 22898
22897: POP
// end ;
22898: PPOPN 3
22900: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22901: LD_EXP 48
22905: PUSH
22906: LD_EXP 98
22910: AND
22911: IFFALSE 23067
22913: GO 22915
22915: DISABLE
22916: LD_INT 0
22918: PPUSH
22919: PPUSH
22920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22921: LD_ADDR_VAR 0 2
22925: PUSH
22926: LD_INT 81
22928: PUSH
22929: LD_OWVAR 2
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 2
22940: PUSH
22941: LD_INT 21
22943: PUSH
22944: LD_INT 1
22946: PUSH
22947: EMPTY
22948: LIST
22949: LIST
22950: PUSH
22951: LD_INT 21
22953: PUSH
22954: LD_INT 2
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: LIST
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PPUSH
22970: CALL_OW 69
22974: ST_TO_ADDR
// if not tmp then
22975: LD_VAR 0 2
22979: NOT
22980: IFFALSE 22984
// exit ;
22982: GO 23067
// p := 0 ;
22984: LD_ADDR_VAR 0 3
22988: PUSH
22989: LD_INT 0
22991: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22992: LD_INT 35
22994: PPUSH
22995: CALL_OW 67
// p := p + 1 ;
22999: LD_ADDR_VAR 0 3
23003: PUSH
23004: LD_VAR 0 3
23008: PUSH
23009: LD_INT 1
23011: PLUS
23012: ST_TO_ADDR
// for i in tmp do
23013: LD_ADDR_VAR 0 1
23017: PUSH
23018: LD_VAR 0 2
23022: PUSH
23023: FOR_IN
23024: IFFALSE 23055
// if GetLives ( i ) < 1000 then
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 256
23035: PUSH
23036: LD_INT 1000
23038: LESS
23039: IFFALSE 23053
// SetLives ( i , 1000 ) ;
23041: LD_VAR 0 1
23045: PPUSH
23046: LD_INT 1000
23048: PPUSH
23049: CALL_OW 234
23053: GO 23023
23055: POP
23056: POP
// until p > 20 ;
23057: LD_VAR 0 3
23061: PUSH
23062: LD_INT 20
23064: GREATER
23065: IFFALSE 22992
// end ;
23067: PPOPN 3
23069: END
// every 0 0$1 trigger StreamModeActive and sTime do
23070: LD_EXP 48
23074: PUSH
23075: LD_EXP 99
23079: AND
23080: IFFALSE 23115
23082: GO 23084
23084: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23085: LD_INT 28
23087: PPUSH
23088: LD_OWVAR 2
23092: PPUSH
23093: LD_INT 2
23095: PPUSH
23096: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23100: LD_INT 30
23102: PPUSH
23103: LD_OWVAR 2
23107: PPUSH
23108: LD_INT 2
23110: PPUSH
23111: CALL_OW 322
// end ;
23115: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23116: LD_EXP 48
23120: PUSH
23121: LD_EXP 100
23125: AND
23126: IFFALSE 23247
23128: GO 23130
23130: DISABLE
23131: LD_INT 0
23133: PPUSH
23134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23135: LD_ADDR_VAR 0 2
23139: PUSH
23140: LD_INT 22
23142: PUSH
23143: LD_OWVAR 2
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 21
23154: PUSH
23155: LD_INT 1
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PUSH
23162: LD_INT 3
23164: PUSH
23165: LD_INT 23
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: LIST
23183: PPUSH
23184: CALL_OW 69
23188: ST_TO_ADDR
// if not tmp then
23189: LD_VAR 0 2
23193: NOT
23194: IFFALSE 23198
// exit ;
23196: GO 23247
// for i in tmp do
23198: LD_ADDR_VAR 0 1
23202: PUSH
23203: LD_VAR 0 2
23207: PUSH
23208: FOR_IN
23209: IFFALSE 23245
// begin if Crawls ( i ) then
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 318
23220: IFFALSE 23231
// ComWalk ( i ) ;
23222: LD_VAR 0 1
23226: PPUSH
23227: CALL_OW 138
// SetClass ( i , 2 ) ;
23231: LD_VAR 0 1
23235: PPUSH
23236: LD_INT 2
23238: PPUSH
23239: CALL_OW 336
// end ;
23243: GO 23208
23245: POP
23246: POP
// end ;
23247: PPOPN 2
23249: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23250: LD_EXP 48
23254: PUSH
23255: LD_EXP 101
23259: AND
23260: IFFALSE 23541
23262: GO 23264
23264: DISABLE
23265: LD_INT 0
23267: PPUSH
23268: PPUSH
23269: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23270: LD_OWVAR 2
23274: PPUSH
23275: LD_INT 9
23277: PPUSH
23278: LD_INT 1
23280: PPUSH
23281: LD_INT 1
23283: PPUSH
23284: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23288: LD_INT 9
23290: PPUSH
23291: LD_OWVAR 2
23295: PPUSH
23296: CALL_OW 343
// uc_side := 9 ;
23300: LD_ADDR_OWVAR 20
23304: PUSH
23305: LD_INT 9
23307: ST_TO_ADDR
// uc_nation := 2 ;
23308: LD_ADDR_OWVAR 21
23312: PUSH
23313: LD_INT 2
23315: ST_TO_ADDR
// hc_name := Dark Warrior ;
23316: LD_ADDR_OWVAR 26
23320: PUSH
23321: LD_STRING Dark Warrior
23323: ST_TO_ADDR
// hc_gallery :=  ;
23324: LD_ADDR_OWVAR 33
23328: PUSH
23329: LD_STRING 
23331: ST_TO_ADDR
// hc_noskilllimit := true ;
23332: LD_ADDR_OWVAR 76
23336: PUSH
23337: LD_INT 1
23339: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23340: LD_ADDR_OWVAR 31
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 30
23350: PUSH
23351: LD_INT 30
23353: PUSH
23354: LD_INT 30
23356: PUSH
23357: EMPTY
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: ST_TO_ADDR
// un := CreateHuman ;
23363: LD_ADDR_VAR 0 3
23367: PUSH
23368: CALL_OW 44
23372: ST_TO_ADDR
// hc_noskilllimit := false ;
23373: LD_ADDR_OWVAR 76
23377: PUSH
23378: LD_INT 0
23380: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23381: LD_VAR 0 3
23385: PPUSH
23386: LD_INT 1
23388: PPUSH
23389: CALL_OW 51
// p := 0 ;
23393: LD_ADDR_VAR 0 2
23397: PUSH
23398: LD_INT 0
23400: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23401: LD_INT 35
23403: PPUSH
23404: CALL_OW 67
// p := p + 1 ;
23408: LD_ADDR_VAR 0 2
23412: PUSH
23413: LD_VAR 0 2
23417: PUSH
23418: LD_INT 1
23420: PLUS
23421: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23422: LD_VAR 0 3
23426: PPUSH
23427: CALL_OW 256
23431: PUSH
23432: LD_INT 1000
23434: LESS
23435: IFFALSE 23449
// SetLives ( un , 1000 ) ;
23437: LD_VAR 0 3
23441: PPUSH
23442: LD_INT 1000
23444: PPUSH
23445: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23449: LD_VAR 0 3
23453: PPUSH
23454: LD_INT 81
23456: PUSH
23457: LD_OWVAR 2
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 91
23468: PUSH
23469: LD_VAR 0 3
23473: PUSH
23474: LD_INT 30
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL_OW 69
23490: PPUSH
23491: LD_VAR 0 3
23495: PPUSH
23496: CALL_OW 74
23500: PPUSH
23501: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23505: LD_VAR 0 2
23509: PUSH
23510: LD_INT 60
23512: GREATER
23513: PUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: CALL_OW 301
23523: OR
23524: IFFALSE 23401
// if un then
23526: LD_VAR 0 3
23530: IFFALSE 23541
// RemoveUnit ( un ) ;
23532: LD_VAR 0 3
23536: PPUSH
23537: CALL_OW 64
// end ;
23541: PPOPN 3
23543: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23544: LD_INT 0
23546: PPUSH
// case cmd of 301 :
23547: LD_VAR 0 1
23551: PUSH
23552: LD_INT 301
23554: DOUBLE
23555: EQUAL
23556: IFTRUE 23560
23558: GO 23592
23560: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23561: LD_VAR 0 6
23565: PPUSH
23566: LD_VAR 0 7
23570: PPUSH
23571: LD_VAR 0 8
23575: PPUSH
23576: LD_VAR 0 4
23580: PPUSH
23581: LD_VAR 0 5
23585: PPUSH
23586: CALL 24793 0 5
23590: GO 23713
23592: LD_INT 302
23594: DOUBLE
23595: EQUAL
23596: IFTRUE 23600
23598: GO 23637
23600: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23601: LD_VAR 0 6
23605: PPUSH
23606: LD_VAR 0 7
23610: PPUSH
23611: LD_VAR 0 8
23615: PPUSH
23616: LD_VAR 0 9
23620: PPUSH
23621: LD_VAR 0 4
23625: PPUSH
23626: LD_VAR 0 5
23630: PPUSH
23631: CALL 24884 0 6
23635: GO 23713
23637: LD_INT 303
23639: DOUBLE
23640: EQUAL
23641: IFTRUE 23645
23643: GO 23682
23645: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23646: LD_VAR 0 6
23650: PPUSH
23651: LD_VAR 0 7
23655: PPUSH
23656: LD_VAR 0 8
23660: PPUSH
23661: LD_VAR 0 9
23665: PPUSH
23666: LD_VAR 0 4
23670: PPUSH
23671: LD_VAR 0 5
23675: PPUSH
23676: CALL 23718 0 6
23680: GO 23713
23682: LD_INT 304
23684: DOUBLE
23685: EQUAL
23686: IFTRUE 23690
23688: GO 23712
23690: POP
// hHackTeleport ( unit , x , y ) ; end ;
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_VAR 0 4
23700: PPUSH
23701: LD_VAR 0 5
23705: PPUSH
23706: CALL 25477 0 3
23710: GO 23713
23712: POP
// end ;
23713: LD_VAR 0 12
23717: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23718: LD_INT 0
23720: PPUSH
23721: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23722: LD_VAR 0 1
23726: PUSH
23727: LD_INT 1
23729: LESS
23730: PUSH
23731: LD_VAR 0 1
23735: PUSH
23736: LD_INT 3
23738: GREATER
23739: OR
23740: PUSH
23741: LD_VAR 0 5
23745: PPUSH
23746: LD_VAR 0 6
23750: PPUSH
23751: CALL_OW 428
23755: OR
23756: IFFALSE 23760
// exit ;
23758: GO 24480
// uc_side := your_side ;
23760: LD_ADDR_OWVAR 20
23764: PUSH
23765: LD_OWVAR 2
23769: ST_TO_ADDR
// uc_nation := nation ;
23770: LD_ADDR_OWVAR 21
23774: PUSH
23775: LD_VAR 0 1
23779: ST_TO_ADDR
// bc_level = 1 ;
23780: LD_ADDR_OWVAR 43
23784: PUSH
23785: LD_INT 1
23787: ST_TO_ADDR
// case btype of 1 :
23788: LD_VAR 0 2
23792: PUSH
23793: LD_INT 1
23795: DOUBLE
23796: EQUAL
23797: IFTRUE 23801
23799: GO 23812
23801: POP
// bc_type := b_depot ; 2 :
23802: LD_ADDR_OWVAR 42
23806: PUSH
23807: LD_INT 0
23809: ST_TO_ADDR
23810: GO 24424
23812: LD_INT 2
23814: DOUBLE
23815: EQUAL
23816: IFTRUE 23820
23818: GO 23831
23820: POP
// bc_type := b_warehouse ; 3 :
23821: LD_ADDR_OWVAR 42
23825: PUSH
23826: LD_INT 1
23828: ST_TO_ADDR
23829: GO 24424
23831: LD_INT 3
23833: DOUBLE
23834: EQUAL
23835: IFTRUE 23839
23837: GO 23850
23839: POP
// bc_type := b_lab ; 4 .. 9 :
23840: LD_ADDR_OWVAR 42
23844: PUSH
23845: LD_INT 6
23847: ST_TO_ADDR
23848: GO 24424
23850: LD_INT 4
23852: DOUBLE
23853: GREATEREQUAL
23854: IFFALSE 23862
23856: LD_INT 9
23858: DOUBLE
23859: LESSEQUAL
23860: IFTRUE 23864
23862: GO 23916
23864: POP
// begin bc_type := b_lab_half ;
23865: LD_ADDR_OWVAR 42
23869: PUSH
23870: LD_INT 7
23872: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23873: LD_ADDR_OWVAR 44
23877: PUSH
23878: LD_INT 10
23880: PUSH
23881: LD_INT 11
23883: PUSH
23884: LD_INT 12
23886: PUSH
23887: LD_INT 15
23889: PUSH
23890: LD_INT 14
23892: PUSH
23893: LD_INT 13
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: PUSH
23904: LD_VAR 0 2
23908: PUSH
23909: LD_INT 3
23911: MINUS
23912: ARRAY
23913: ST_TO_ADDR
// end ; 10 .. 13 :
23914: GO 24424
23916: LD_INT 10
23918: DOUBLE
23919: GREATEREQUAL
23920: IFFALSE 23928
23922: LD_INT 13
23924: DOUBLE
23925: LESSEQUAL
23926: IFTRUE 23930
23928: GO 24007
23930: POP
// begin bc_type := b_lab_full ;
23931: LD_ADDR_OWVAR 42
23935: PUSH
23936: LD_INT 8
23938: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23939: LD_ADDR_OWVAR 44
23943: PUSH
23944: LD_INT 10
23946: PUSH
23947: LD_INT 12
23949: PUSH
23950: LD_INT 14
23952: PUSH
23953: LD_INT 13
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: PUSH
23962: LD_VAR 0 2
23966: PUSH
23967: LD_INT 9
23969: MINUS
23970: ARRAY
23971: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23972: LD_ADDR_OWVAR 45
23976: PUSH
23977: LD_INT 11
23979: PUSH
23980: LD_INT 15
23982: PUSH
23983: LD_INT 12
23985: PUSH
23986: LD_INT 15
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_VAR 0 2
23999: PUSH
24000: LD_INT 9
24002: MINUS
24003: ARRAY
24004: ST_TO_ADDR
// end ; 14 :
24005: GO 24424
24007: LD_INT 14
24009: DOUBLE
24010: EQUAL
24011: IFTRUE 24015
24013: GO 24026
24015: POP
// bc_type := b_workshop ; 15 :
24016: LD_ADDR_OWVAR 42
24020: PUSH
24021: LD_INT 2
24023: ST_TO_ADDR
24024: GO 24424
24026: LD_INT 15
24028: DOUBLE
24029: EQUAL
24030: IFTRUE 24034
24032: GO 24045
24034: POP
// bc_type := b_factory ; 16 :
24035: LD_ADDR_OWVAR 42
24039: PUSH
24040: LD_INT 3
24042: ST_TO_ADDR
24043: GO 24424
24045: LD_INT 16
24047: DOUBLE
24048: EQUAL
24049: IFTRUE 24053
24051: GO 24064
24053: POP
// bc_type := b_ext_gun ; 17 :
24054: LD_ADDR_OWVAR 42
24058: PUSH
24059: LD_INT 17
24061: ST_TO_ADDR
24062: GO 24424
24064: LD_INT 17
24066: DOUBLE
24067: EQUAL
24068: IFTRUE 24072
24070: GO 24100
24072: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24073: LD_ADDR_OWVAR 42
24077: PUSH
24078: LD_INT 19
24080: PUSH
24081: LD_INT 23
24083: PUSH
24084: LD_INT 19
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: PUSH
24092: LD_VAR 0 1
24096: ARRAY
24097: ST_TO_ADDR
24098: GO 24424
24100: LD_INT 18
24102: DOUBLE
24103: EQUAL
24104: IFTRUE 24108
24106: GO 24119
24108: POP
// bc_type := b_ext_radar ; 19 :
24109: LD_ADDR_OWVAR 42
24113: PUSH
24114: LD_INT 20
24116: ST_TO_ADDR
24117: GO 24424
24119: LD_INT 19
24121: DOUBLE
24122: EQUAL
24123: IFTRUE 24127
24125: GO 24138
24127: POP
// bc_type := b_ext_radio ; 20 :
24128: LD_ADDR_OWVAR 42
24132: PUSH
24133: LD_INT 22
24135: ST_TO_ADDR
24136: GO 24424
24138: LD_INT 20
24140: DOUBLE
24141: EQUAL
24142: IFTRUE 24146
24144: GO 24157
24146: POP
// bc_type := b_ext_siberium ; 21 :
24147: LD_ADDR_OWVAR 42
24151: PUSH
24152: LD_INT 21
24154: ST_TO_ADDR
24155: GO 24424
24157: LD_INT 21
24159: DOUBLE
24160: EQUAL
24161: IFTRUE 24165
24163: GO 24176
24165: POP
// bc_type := b_ext_computer ; 22 :
24166: LD_ADDR_OWVAR 42
24170: PUSH
24171: LD_INT 24
24173: ST_TO_ADDR
24174: GO 24424
24176: LD_INT 22
24178: DOUBLE
24179: EQUAL
24180: IFTRUE 24184
24182: GO 24195
24184: POP
// bc_type := b_ext_track ; 23 :
24185: LD_ADDR_OWVAR 42
24189: PUSH
24190: LD_INT 16
24192: ST_TO_ADDR
24193: GO 24424
24195: LD_INT 23
24197: DOUBLE
24198: EQUAL
24199: IFTRUE 24203
24201: GO 24214
24203: POP
// bc_type := b_ext_laser ; 24 :
24204: LD_ADDR_OWVAR 42
24208: PUSH
24209: LD_INT 25
24211: ST_TO_ADDR
24212: GO 24424
24214: LD_INT 24
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24233
24222: POP
// bc_type := b_control_tower ; 25 :
24223: LD_ADDR_OWVAR 42
24227: PUSH
24228: LD_INT 36
24230: ST_TO_ADDR
24231: GO 24424
24233: LD_INT 25
24235: DOUBLE
24236: EQUAL
24237: IFTRUE 24241
24239: GO 24252
24241: POP
// bc_type := b_breastwork ; 26 :
24242: LD_ADDR_OWVAR 42
24246: PUSH
24247: LD_INT 31
24249: ST_TO_ADDR
24250: GO 24424
24252: LD_INT 26
24254: DOUBLE
24255: EQUAL
24256: IFTRUE 24260
24258: GO 24271
24260: POP
// bc_type := b_bunker ; 27 :
24261: LD_ADDR_OWVAR 42
24265: PUSH
24266: LD_INT 32
24268: ST_TO_ADDR
24269: GO 24424
24271: LD_INT 27
24273: DOUBLE
24274: EQUAL
24275: IFTRUE 24279
24277: GO 24290
24279: POP
// bc_type := b_turret ; 28 :
24280: LD_ADDR_OWVAR 42
24284: PUSH
24285: LD_INT 33
24287: ST_TO_ADDR
24288: GO 24424
24290: LD_INT 28
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24309
24298: POP
// bc_type := b_armoury ; 29 :
24299: LD_ADDR_OWVAR 42
24303: PUSH
24304: LD_INT 4
24306: ST_TO_ADDR
24307: GO 24424
24309: LD_INT 29
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24328
24317: POP
// bc_type := b_barracks ; 30 :
24318: LD_ADDR_OWVAR 42
24322: PUSH
24323: LD_INT 5
24325: ST_TO_ADDR
24326: GO 24424
24328: LD_INT 30
24330: DOUBLE
24331: EQUAL
24332: IFTRUE 24336
24334: GO 24347
24336: POP
// bc_type := b_solar_power ; 31 :
24337: LD_ADDR_OWVAR 42
24341: PUSH
24342: LD_INT 27
24344: ST_TO_ADDR
24345: GO 24424
24347: LD_INT 31
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24366
24355: POP
// bc_type := b_oil_power ; 32 :
24356: LD_ADDR_OWVAR 42
24360: PUSH
24361: LD_INT 26
24363: ST_TO_ADDR
24364: GO 24424
24366: LD_INT 32
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24385
24374: POP
// bc_type := b_siberite_power ; 33 :
24375: LD_ADDR_OWVAR 42
24379: PUSH
24380: LD_INT 28
24382: ST_TO_ADDR
24383: GO 24424
24385: LD_INT 33
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24393
24391: GO 24404
24393: POP
// bc_type := b_oil_mine ; 34 :
24394: LD_ADDR_OWVAR 42
24398: PUSH
24399: LD_INT 29
24401: ST_TO_ADDR
24402: GO 24424
24404: LD_INT 34
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24412
24410: GO 24423
24412: POP
// bc_type := b_siberite_mine ; end ;
24413: LD_ADDR_OWVAR 42
24417: PUSH
24418: LD_INT 30
24420: ST_TO_ADDR
24421: GO 24424
24423: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24424: LD_ADDR_VAR 0 8
24428: PUSH
24429: LD_VAR 0 5
24433: PPUSH
24434: LD_VAR 0 6
24438: PPUSH
24439: LD_VAR 0 3
24443: PPUSH
24444: CALL_OW 47
24448: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24449: LD_OWVAR 42
24453: PUSH
24454: LD_INT 32
24456: PUSH
24457: LD_INT 33
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: IN
24464: IFFALSE 24480
// PlaceWeaponTurret ( b , weapon ) ;
24466: LD_VAR 0 8
24470: PPUSH
24471: LD_VAR 0 4
24475: PPUSH
24476: CALL_OW 431
// end ;
24480: LD_VAR 0 7
24484: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24485: LD_INT 0
24487: PPUSH
24488: PPUSH
24489: PPUSH
24490: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24491: LD_ADDR_VAR 0 4
24495: PUSH
24496: LD_INT 22
24498: PUSH
24499: LD_OWVAR 2
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 2
24510: PUSH
24511: LD_INT 30
24513: PUSH
24514: LD_INT 0
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 30
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PPUSH
24540: CALL_OW 69
24544: ST_TO_ADDR
// if not tmp then
24545: LD_VAR 0 4
24549: NOT
24550: IFFALSE 24554
// exit ;
24552: GO 24613
// for i in tmp do
24554: LD_ADDR_VAR 0 2
24558: PUSH
24559: LD_VAR 0 4
24563: PUSH
24564: FOR_IN
24565: IFFALSE 24611
// for j = 1 to 3 do
24567: LD_ADDR_VAR 0 3
24571: PUSH
24572: DOUBLE
24573: LD_INT 1
24575: DEC
24576: ST_TO_ADDR
24577: LD_INT 3
24579: PUSH
24580: FOR_TO
24581: IFFALSE 24607
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24583: LD_VAR 0 2
24587: PPUSH
24588: CALL_OW 274
24592: PPUSH
24593: LD_VAR 0 3
24597: PPUSH
24598: LD_INT 99999
24600: PPUSH
24601: CALL_OW 277
24605: GO 24580
24607: POP
24608: POP
24609: GO 24564
24611: POP
24612: POP
// end ;
24613: LD_VAR 0 1
24617: RET
// export function hHackSetLevel10 ; var i , j ; begin
24618: LD_INT 0
24620: PPUSH
24621: PPUSH
24622: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24623: LD_ADDR_VAR 0 2
24627: PUSH
24628: LD_INT 21
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PPUSH
24638: CALL_OW 69
24642: PUSH
24643: FOR_IN
24644: IFFALSE 24696
// if IsSelected ( i ) then
24646: LD_VAR 0 2
24650: PPUSH
24651: CALL_OW 306
24655: IFFALSE 24694
// begin for j := 1 to 4 do
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: DOUBLE
24663: LD_INT 1
24665: DEC
24666: ST_TO_ADDR
24667: LD_INT 4
24669: PUSH
24670: FOR_TO
24671: IFFALSE 24692
// SetSkill ( i , j , 10 ) ;
24673: LD_VAR 0 2
24677: PPUSH
24678: LD_VAR 0 3
24682: PPUSH
24683: LD_INT 10
24685: PPUSH
24686: CALL_OW 237
24690: GO 24670
24692: POP
24693: POP
// end ;
24694: GO 24643
24696: POP
24697: POP
// end ;
24698: LD_VAR 0 1
24702: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24703: LD_INT 0
24705: PPUSH
24706: PPUSH
24707: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24708: LD_ADDR_VAR 0 2
24712: PUSH
24713: LD_INT 22
24715: PUSH
24716: LD_OWVAR 2
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: PUSH
24725: LD_INT 21
24727: PUSH
24728: LD_INT 1
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PPUSH
24739: CALL_OW 69
24743: PUSH
24744: FOR_IN
24745: IFFALSE 24786
// begin for j := 1 to 4 do
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: DOUBLE
24753: LD_INT 1
24755: DEC
24756: ST_TO_ADDR
24757: LD_INT 4
24759: PUSH
24760: FOR_TO
24761: IFFALSE 24782
// SetSkill ( i , j , 10 ) ;
24763: LD_VAR 0 2
24767: PPUSH
24768: LD_VAR 0 3
24772: PPUSH
24773: LD_INT 10
24775: PPUSH
24776: CALL_OW 237
24780: GO 24760
24782: POP
24783: POP
// end ;
24784: GO 24744
24786: POP
24787: POP
// end ;
24788: LD_VAR 0 1
24792: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24793: LD_INT 0
24795: PPUSH
// uc_side := your_side ;
24796: LD_ADDR_OWVAR 20
24800: PUSH
24801: LD_OWVAR 2
24805: ST_TO_ADDR
// uc_nation := nation ;
24806: LD_ADDR_OWVAR 21
24810: PUSH
24811: LD_VAR 0 1
24815: ST_TO_ADDR
// InitHc ;
24816: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24820: LD_INT 0
24822: PPUSH
24823: LD_VAR 0 2
24827: PPUSH
24828: LD_VAR 0 3
24832: PPUSH
24833: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24837: LD_VAR 0 4
24841: PPUSH
24842: LD_VAR 0 5
24846: PPUSH
24847: CALL_OW 428
24851: PUSH
24852: LD_INT 0
24854: EQUAL
24855: IFFALSE 24879
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24857: CALL_OW 44
24861: PPUSH
24862: LD_VAR 0 4
24866: PPUSH
24867: LD_VAR 0 5
24871: PPUSH
24872: LD_INT 1
24874: PPUSH
24875: CALL_OW 48
// end ;
24879: LD_VAR 0 6
24883: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24884: LD_INT 0
24886: PPUSH
24887: PPUSH
// uc_side := your_side ;
24888: LD_ADDR_OWVAR 20
24892: PUSH
24893: LD_OWVAR 2
24897: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24898: LD_VAR 0 1
24902: PUSH
24903: LD_INT 1
24905: PUSH
24906: LD_INT 2
24908: PUSH
24909: LD_INT 3
24911: PUSH
24912: LD_INT 4
24914: PUSH
24915: LD_INT 5
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: IN
24925: IFFALSE 24937
// uc_nation := nation_american else
24927: LD_ADDR_OWVAR 21
24931: PUSH
24932: LD_INT 1
24934: ST_TO_ADDR
24935: GO 24980
// if chassis in [ 11 , 12 , 13 , 14 ] then
24937: LD_VAR 0 1
24941: PUSH
24942: LD_INT 11
24944: PUSH
24945: LD_INT 12
24947: PUSH
24948: LD_INT 13
24950: PUSH
24951: LD_INT 14
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: IN
24960: IFFALSE 24972
// uc_nation := nation_arabian else
24962: LD_ADDR_OWVAR 21
24966: PUSH
24967: LD_INT 2
24969: ST_TO_ADDR
24970: GO 24980
// uc_nation := nation_russian ;
24972: LD_ADDR_OWVAR 21
24976: PUSH
24977: LD_INT 3
24979: ST_TO_ADDR
// vc_chassis := chassis ;
24980: LD_ADDR_OWVAR 37
24984: PUSH
24985: LD_VAR 0 1
24989: ST_TO_ADDR
// vc_engine := engine ;
24990: LD_ADDR_OWVAR 39
24994: PUSH
24995: LD_VAR 0 2
24999: ST_TO_ADDR
// vc_control := control ;
25000: LD_ADDR_OWVAR 38
25004: PUSH
25005: LD_VAR 0 3
25009: ST_TO_ADDR
// vc_weapon := weapon ;
25010: LD_ADDR_OWVAR 40
25014: PUSH
25015: LD_VAR 0 4
25019: ST_TO_ADDR
// un := CreateVehicle ;
25020: LD_ADDR_VAR 0 8
25024: PUSH
25025: CALL_OW 45
25029: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25030: LD_VAR 0 8
25034: PPUSH
25035: LD_INT 0
25037: PPUSH
25038: LD_INT 5
25040: PPUSH
25041: CALL_OW 12
25045: PPUSH
25046: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25050: LD_VAR 0 8
25054: PPUSH
25055: LD_VAR 0 5
25059: PPUSH
25060: LD_VAR 0 6
25064: PPUSH
25065: LD_INT 1
25067: PPUSH
25068: CALL_OW 48
// end ;
25072: LD_VAR 0 7
25076: RET
// export hInvincible ; every 1 do
25077: GO 25079
25079: DISABLE
// hInvincible := [ ] ;
25080: LD_ADDR_EXP 102
25084: PUSH
25085: EMPTY
25086: ST_TO_ADDR
25087: END
// every 10 do var i ;
25088: GO 25090
25090: DISABLE
25091: LD_INT 0
25093: PPUSH
// begin enable ;
25094: ENABLE
// if not hInvincible then
25095: LD_EXP 102
25099: NOT
25100: IFFALSE 25104
// exit ;
25102: GO 25148
// for i in hInvincible do
25104: LD_ADDR_VAR 0 1
25108: PUSH
25109: LD_EXP 102
25113: PUSH
25114: FOR_IN
25115: IFFALSE 25146
// if GetLives ( i ) < 1000 then
25117: LD_VAR 0 1
25121: PPUSH
25122: CALL_OW 256
25126: PUSH
25127: LD_INT 1000
25129: LESS
25130: IFFALSE 25144
// SetLives ( i , 1000 ) ;
25132: LD_VAR 0 1
25136: PPUSH
25137: LD_INT 1000
25139: PPUSH
25140: CALL_OW 234
25144: GO 25114
25146: POP
25147: POP
// end ;
25148: PPOPN 1
25150: END
// export function hHackInvincible ; var i ; begin
25151: LD_INT 0
25153: PPUSH
25154: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25155: LD_ADDR_VAR 0 2
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 21
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: PPUSH
25188: CALL_OW 69
25192: PUSH
25193: FOR_IN
25194: IFFALSE 25255
// if IsSelected ( i ) then
25196: LD_VAR 0 2
25200: PPUSH
25201: CALL_OW 306
25205: IFFALSE 25253
// begin if i in hInvincible then
25207: LD_VAR 0 2
25211: PUSH
25212: LD_EXP 102
25216: IN
25217: IFFALSE 25237
// hInvincible := hInvincible diff i else
25219: LD_ADDR_EXP 102
25223: PUSH
25224: LD_EXP 102
25228: PUSH
25229: LD_VAR 0 2
25233: DIFF
25234: ST_TO_ADDR
25235: GO 25253
// hInvincible := hInvincible union i ;
25237: LD_ADDR_EXP 102
25241: PUSH
25242: LD_EXP 102
25246: PUSH
25247: LD_VAR 0 2
25251: UNION
25252: ST_TO_ADDR
// end ;
25253: GO 25193
25255: POP
25256: POP
// end ;
25257: LD_VAR 0 1
25261: RET
// export function hHackInvisible ; var i , j ; begin
25262: LD_INT 0
25264: PPUSH
25265: PPUSH
25266: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25267: LD_ADDR_VAR 0 2
25271: PUSH
25272: LD_INT 21
25274: PUSH
25275: LD_INT 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PPUSH
25282: CALL_OW 69
25286: PUSH
25287: FOR_IN
25288: IFFALSE 25312
// if IsSelected ( i ) then
25290: LD_VAR 0 2
25294: PPUSH
25295: CALL_OW 306
25299: IFFALSE 25310
// ComForceInvisible ( i ) ;
25301: LD_VAR 0 2
25305: PPUSH
25306: CALL_OW 496
25310: GO 25287
25312: POP
25313: POP
// end ;
25314: LD_VAR 0 1
25318: RET
// export function hHackChangeYourSide ; begin
25319: LD_INT 0
25321: PPUSH
// if your_side = 8 then
25322: LD_OWVAR 2
25326: PUSH
25327: LD_INT 8
25329: EQUAL
25330: IFFALSE 25342
// your_side := 0 else
25332: LD_ADDR_OWVAR 2
25336: PUSH
25337: LD_INT 0
25339: ST_TO_ADDR
25340: GO 25356
// your_side := your_side + 1 ;
25342: LD_ADDR_OWVAR 2
25346: PUSH
25347: LD_OWVAR 2
25351: PUSH
25352: LD_INT 1
25354: PLUS
25355: ST_TO_ADDR
// end ;
25356: LD_VAR 0 1
25360: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25361: LD_INT 0
25363: PPUSH
25364: PPUSH
25365: PPUSH
// for i in all_units do
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: LD_OWVAR 3
25375: PUSH
25376: FOR_IN
25377: IFFALSE 25455
// if IsSelected ( i ) then
25379: LD_VAR 0 2
25383: PPUSH
25384: CALL_OW 306
25388: IFFALSE 25453
// begin j := GetSide ( i ) ;
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_VAR 0 2
25399: PPUSH
25400: CALL_OW 255
25404: ST_TO_ADDR
// if j = 8 then
25405: LD_VAR 0 3
25409: PUSH
25410: LD_INT 8
25412: EQUAL
25413: IFFALSE 25425
// j := 0 else
25415: LD_ADDR_VAR 0 3
25419: PUSH
25420: LD_INT 0
25422: ST_TO_ADDR
25423: GO 25439
// j := j + 1 ;
25425: LD_ADDR_VAR 0 3
25429: PUSH
25430: LD_VAR 0 3
25434: PUSH
25435: LD_INT 1
25437: PLUS
25438: ST_TO_ADDR
// SetSide ( i , j ) ;
25439: LD_VAR 0 2
25443: PPUSH
25444: LD_VAR 0 3
25448: PPUSH
25449: CALL_OW 235
// end ;
25453: GO 25376
25455: POP
25456: POP
// end ;
25457: LD_VAR 0 1
25461: RET
// export function hHackFog ; begin
25462: LD_INT 0
25464: PPUSH
// FogOff ( true ) ;
25465: LD_INT 1
25467: PPUSH
25468: CALL_OW 344
// end ;
25472: LD_VAR 0 1
25476: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25477: LD_INT 0
25479: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25480: LD_VAR 0 1
25484: PPUSH
25485: LD_VAR 0 2
25489: PPUSH
25490: LD_VAR 0 3
25494: PPUSH
25495: LD_INT 1
25497: PPUSH
25498: LD_INT 1
25500: PPUSH
25501: CALL_OW 483
// CenterOnXY ( x , y ) ;
25505: LD_VAR 0 2
25509: PPUSH
25510: LD_VAR 0 3
25514: PPUSH
25515: CALL_OW 84
// end ; end_of_file
25519: LD_VAR 0 4
25523: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25524: LD_INT 0
25526: PPUSH
25527: PPUSH
25528: PPUSH
25529: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25530: LD_VAR 0 1
25534: PPUSH
25535: CALL_OW 264
25539: PUSH
25540: LD_EXP 36
25544: EQUAL
25545: IFFALSE 25617
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25547: LD_INT 68
25549: PPUSH
25550: LD_VAR 0 1
25554: PPUSH
25555: CALL_OW 255
25559: PPUSH
25560: CALL_OW 321
25564: PUSH
25565: LD_INT 2
25567: EQUAL
25568: IFFALSE 25580
// eff := 70 else
25570: LD_ADDR_VAR 0 4
25574: PUSH
25575: LD_INT 70
25577: ST_TO_ADDR
25578: GO 25588
// eff := 30 ;
25580: LD_ADDR_VAR 0 4
25584: PUSH
25585: LD_INT 30
25587: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25588: LD_VAR 0 1
25592: PPUSH
25593: CALL_OW 250
25597: PPUSH
25598: LD_VAR 0 1
25602: PPUSH
25603: CALL_OW 251
25607: PPUSH
25608: LD_VAR 0 4
25612: PPUSH
25613: CALL_OW 495
// end ; end ;
25617: LD_VAR 0 2
25621: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25622: LD_INT 0
25624: PPUSH
// end ;
25625: LD_VAR 0 4
25629: RET
// export function SOS_Command ( cmd ) ; begin
25630: LD_INT 0
25632: PPUSH
// end ;
25633: LD_VAR 0 2
25637: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25638: LD_INT 0
25640: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25641: LD_VAR 0 1
25645: PUSH
25646: LD_INT 250
25648: EQUAL
25649: PUSH
25650: LD_VAR 0 2
25654: PPUSH
25655: CALL_OW 264
25659: PUSH
25660: LD_EXP 39
25664: EQUAL
25665: AND
25666: IFFALSE 25687
// MinerPlaceMine ( unit , x , y ) ;
25668: LD_VAR 0 2
25672: PPUSH
25673: LD_VAR 0 4
25677: PPUSH
25678: LD_VAR 0 5
25682: PPUSH
25683: CALL 28028 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25687: LD_VAR 0 1
25691: PUSH
25692: LD_INT 251
25694: EQUAL
25695: PUSH
25696: LD_VAR 0 2
25700: PPUSH
25701: CALL_OW 264
25705: PUSH
25706: LD_EXP 39
25710: EQUAL
25711: AND
25712: IFFALSE 25733
// MinerDetonateMine ( unit , x , y ) ;
25714: LD_VAR 0 2
25718: PPUSH
25719: LD_VAR 0 4
25723: PPUSH
25724: LD_VAR 0 5
25728: PPUSH
25729: CALL 28305 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25733: LD_VAR 0 1
25737: PUSH
25738: LD_INT 252
25740: EQUAL
25741: PUSH
25742: LD_VAR 0 2
25746: PPUSH
25747: CALL_OW 264
25751: PUSH
25752: LD_EXP 39
25756: EQUAL
25757: AND
25758: IFFALSE 25779
// MinerCreateMinefield ( unit , x , y ) ;
25760: LD_VAR 0 2
25764: PPUSH
25765: LD_VAR 0 4
25769: PPUSH
25770: LD_VAR 0 5
25774: PPUSH
25775: CALL 28722 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25779: LD_VAR 0 1
25783: PUSH
25784: LD_INT 253
25786: EQUAL
25787: PUSH
25788: LD_VAR 0 2
25792: PPUSH
25793: CALL_OW 257
25797: PUSH
25798: LD_INT 5
25800: EQUAL
25801: AND
25802: IFFALSE 25823
// ComBinocular ( unit , x , y ) ;
25804: LD_VAR 0 2
25808: PPUSH
25809: LD_VAR 0 4
25813: PPUSH
25814: LD_VAR 0 5
25818: PPUSH
25819: CALL 29093 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25823: LD_VAR 0 1
25827: PUSH
25828: LD_INT 254
25830: EQUAL
25831: PUSH
25832: LD_VAR 0 2
25836: PPUSH
25837: CALL_OW 264
25841: PUSH
25842: LD_EXP 34
25846: EQUAL
25847: AND
25848: PUSH
25849: LD_VAR 0 3
25853: PPUSH
25854: CALL_OW 263
25858: PUSH
25859: LD_INT 3
25861: EQUAL
25862: AND
25863: IFFALSE 25879
// HackDestroyVehicle ( unit , selectedUnit ) ;
25865: LD_VAR 0 2
25869: PPUSH
25870: LD_VAR 0 3
25874: PPUSH
25875: CALL 27388 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25879: LD_VAR 0 1
25883: PUSH
25884: LD_INT 255
25886: EQUAL
25887: PUSH
25888: LD_VAR 0 2
25892: PPUSH
25893: CALL_OW 264
25897: PUSH
25898: LD_INT 14
25900: PUSH
25901: LD_INT 53
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: IN
25908: AND
25909: PUSH
25910: LD_VAR 0 4
25914: PPUSH
25915: LD_VAR 0 5
25919: PPUSH
25920: CALL_OW 488
25924: AND
25925: IFFALSE 25949
// CutTreeXYR ( unit , x , y , 12 ) ;
25927: LD_VAR 0 2
25931: PPUSH
25932: LD_VAR 0 4
25936: PPUSH
25937: LD_VAR 0 5
25941: PPUSH
25942: LD_INT 12
25944: PPUSH
25945: CALL 25954 0 4
// end ;
25949: LD_VAR 0 6
25953: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25954: LD_INT 0
25956: PPUSH
25957: PPUSH
25958: PPUSH
25959: PPUSH
25960: PPUSH
25961: PPUSH
25962: PPUSH
25963: PPUSH
25964: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25965: LD_VAR 0 1
25969: NOT
25970: PUSH
25971: LD_VAR 0 2
25975: PPUSH
25976: LD_VAR 0 3
25980: PPUSH
25981: CALL_OW 488
25985: NOT
25986: OR
25987: PUSH
25988: LD_VAR 0 4
25992: NOT
25993: OR
25994: IFFALSE 25998
// exit ;
25996: GO 26338
// list := [ ] ;
25998: LD_ADDR_VAR 0 13
26002: PUSH
26003: EMPTY
26004: ST_TO_ADDR
// if x - r < 0 then
26005: LD_VAR 0 2
26009: PUSH
26010: LD_VAR 0 4
26014: MINUS
26015: PUSH
26016: LD_INT 0
26018: LESS
26019: IFFALSE 26031
// min_x := 0 else
26021: LD_ADDR_VAR 0 7
26025: PUSH
26026: LD_INT 0
26028: ST_TO_ADDR
26029: GO 26047
// min_x := x - r ;
26031: LD_ADDR_VAR 0 7
26035: PUSH
26036: LD_VAR 0 2
26040: PUSH
26041: LD_VAR 0 4
26045: MINUS
26046: ST_TO_ADDR
// if y - r < 0 then
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 4
26056: MINUS
26057: PUSH
26058: LD_INT 0
26060: LESS
26061: IFFALSE 26073
// min_y := 0 else
26063: LD_ADDR_VAR 0 8
26067: PUSH
26068: LD_INT 0
26070: ST_TO_ADDR
26071: GO 26089
// min_y := y - r ;
26073: LD_ADDR_VAR 0 8
26077: PUSH
26078: LD_VAR 0 3
26082: PUSH
26083: LD_VAR 0 4
26087: MINUS
26088: ST_TO_ADDR
// max_x := x + r ;
26089: LD_ADDR_VAR 0 9
26093: PUSH
26094: LD_VAR 0 2
26098: PUSH
26099: LD_VAR 0 4
26103: PLUS
26104: ST_TO_ADDR
// max_y := y + r ;
26105: LD_ADDR_VAR 0 10
26109: PUSH
26110: LD_VAR 0 3
26114: PUSH
26115: LD_VAR 0 4
26119: PLUS
26120: ST_TO_ADDR
// for _x = min_x to max_x do
26121: LD_ADDR_VAR 0 11
26125: PUSH
26126: DOUBLE
26127: LD_VAR 0 7
26131: DEC
26132: ST_TO_ADDR
26133: LD_VAR 0 9
26137: PUSH
26138: FOR_TO
26139: IFFALSE 26256
// for _y = min_y to max_y do
26141: LD_ADDR_VAR 0 12
26145: PUSH
26146: DOUBLE
26147: LD_VAR 0 8
26151: DEC
26152: ST_TO_ADDR
26153: LD_VAR 0 10
26157: PUSH
26158: FOR_TO
26159: IFFALSE 26252
// begin if not ValidHex ( _x , _y ) then
26161: LD_VAR 0 11
26165: PPUSH
26166: LD_VAR 0 12
26170: PPUSH
26171: CALL_OW 488
26175: NOT
26176: IFFALSE 26180
// continue ;
26178: GO 26158
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26180: LD_VAR 0 11
26184: PPUSH
26185: LD_VAR 0 12
26189: PPUSH
26190: CALL_OW 351
26194: PUSH
26195: LD_VAR 0 11
26199: PPUSH
26200: LD_VAR 0 12
26204: PPUSH
26205: CALL_OW 554
26209: AND
26210: IFFALSE 26250
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26212: LD_ADDR_VAR 0 13
26216: PUSH
26217: LD_VAR 0 13
26221: PPUSH
26222: LD_VAR 0 13
26226: PUSH
26227: LD_INT 1
26229: PLUS
26230: PPUSH
26231: LD_VAR 0 11
26235: PUSH
26236: LD_VAR 0 12
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PPUSH
26245: CALL_OW 2
26249: ST_TO_ADDR
// end ;
26250: GO 26158
26252: POP
26253: POP
26254: GO 26138
26256: POP
26257: POP
// if not list then
26258: LD_VAR 0 13
26262: NOT
26263: IFFALSE 26267
// exit ;
26265: GO 26338
// for i in list do
26267: LD_ADDR_VAR 0 6
26271: PUSH
26272: LD_VAR 0 13
26276: PUSH
26277: FOR_IN
26278: IFFALSE 26336
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26280: LD_VAR 0 1
26284: PPUSH
26285: LD_STRING M
26287: PUSH
26288: LD_VAR 0 6
26292: PUSH
26293: LD_INT 1
26295: ARRAY
26296: PUSH
26297: LD_VAR 0 6
26301: PUSH
26302: LD_INT 2
26304: ARRAY
26305: PUSH
26306: LD_INT 0
26308: PUSH
26309: LD_INT 0
26311: PUSH
26312: LD_INT 0
26314: PUSH
26315: LD_INT 0
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: LIST
26326: PUSH
26327: EMPTY
26328: LIST
26329: PPUSH
26330: CALL_OW 447
26334: GO 26277
26336: POP
26337: POP
// end ;
26338: LD_VAR 0 5
26342: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26343: LD_EXP 103
26347: NOT
26348: IFFALSE 26398
26350: GO 26352
26352: DISABLE
// begin initHack := true ;
26353: LD_ADDR_EXP 103
26357: PUSH
26358: LD_INT 1
26360: ST_TO_ADDR
// hackTanks := [ ] ;
26361: LD_ADDR_EXP 104
26365: PUSH
26366: EMPTY
26367: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26368: LD_ADDR_EXP 105
26372: PUSH
26373: EMPTY
26374: ST_TO_ADDR
// hackLimit := 3 ;
26375: LD_ADDR_EXP 106
26379: PUSH
26380: LD_INT 3
26382: ST_TO_ADDR
// hackDist := 12 ;
26383: LD_ADDR_EXP 107
26387: PUSH
26388: LD_INT 12
26390: ST_TO_ADDR
// hackCounter := [ ] ;
26391: LD_ADDR_EXP 108
26395: PUSH
26396: EMPTY
26397: ST_TO_ADDR
// end ;
26398: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26399: LD_EXP 103
26403: PUSH
26404: LD_INT 34
26406: PUSH
26407: LD_EXP 34
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PPUSH
26416: CALL_OW 69
26420: AND
26421: IFFALSE 26676
26423: GO 26425
26425: DISABLE
26426: LD_INT 0
26428: PPUSH
26429: PPUSH
// begin enable ;
26430: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26431: LD_ADDR_VAR 0 1
26435: PUSH
26436: LD_INT 34
26438: PUSH
26439: LD_EXP 34
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PPUSH
26448: CALL_OW 69
26452: PUSH
26453: FOR_IN
26454: IFFALSE 26674
// begin if not i in hackTanks then
26456: LD_VAR 0 1
26460: PUSH
26461: LD_EXP 104
26465: IN
26466: NOT
26467: IFFALSE 26550
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26469: LD_ADDR_EXP 104
26473: PUSH
26474: LD_EXP 104
26478: PPUSH
26479: LD_EXP 104
26483: PUSH
26484: LD_INT 1
26486: PLUS
26487: PPUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL_OW 1
26497: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26498: LD_ADDR_EXP 105
26502: PUSH
26503: LD_EXP 105
26507: PPUSH
26508: LD_EXP 105
26512: PUSH
26513: LD_INT 1
26515: PLUS
26516: PPUSH
26517: EMPTY
26518: PPUSH
26519: CALL_OW 1
26523: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26524: LD_ADDR_EXP 108
26528: PUSH
26529: LD_EXP 108
26533: PPUSH
26534: LD_EXP 108
26538: PUSH
26539: LD_INT 1
26541: PLUS
26542: PPUSH
26543: EMPTY
26544: PPUSH
26545: CALL_OW 1
26549: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 302
26559: NOT
26560: IFFALSE 26573
// begin HackUnlinkAll ( i ) ;
26562: LD_VAR 0 1
26566: PPUSH
26567: CALL 26679 0 1
// continue ;
26571: GO 26453
// end ; HackCheckCapturedStatus ( i ) ;
26573: LD_VAR 0 1
26577: PPUSH
26578: CALL 27122 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26582: LD_ADDR_VAR 0 2
26586: PUSH
26587: LD_INT 81
26589: PUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: CALL_OW 255
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 33
26606: PUSH
26607: LD_INT 3
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 91
26616: PUSH
26617: LD_VAR 0 1
26621: PUSH
26622: LD_EXP 107
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 50
26634: PUSH
26635: EMPTY
26636: LIST
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: PPUSH
26644: CALL_OW 69
26648: ST_TO_ADDR
// if not tmp then
26649: LD_VAR 0 2
26653: NOT
26654: IFFALSE 26658
// continue ;
26656: GO 26453
// HackLink ( i , tmp ) ;
26658: LD_VAR 0 1
26662: PPUSH
26663: LD_VAR 0 2
26667: PPUSH
26668: CALL 26815 0 2
// end ;
26672: GO 26453
26674: POP
26675: POP
// end ;
26676: PPOPN 2
26678: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26679: LD_INT 0
26681: PPUSH
26682: PPUSH
26683: PPUSH
// if not hack in hackTanks then
26684: LD_VAR 0 1
26688: PUSH
26689: LD_EXP 104
26693: IN
26694: NOT
26695: IFFALSE 26699
// exit ;
26697: GO 26810
// index := GetElementIndex ( hackTanks , hack ) ;
26699: LD_ADDR_VAR 0 4
26703: PUSH
26704: LD_EXP 104
26708: PPUSH
26709: LD_VAR 0 1
26713: PPUSH
26714: CALL 34244 0 2
26718: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26719: LD_EXP 105
26723: PUSH
26724: LD_VAR 0 4
26728: ARRAY
26729: IFFALSE 26810
// begin for i in hackTanksCaptured [ index ] do
26731: LD_ADDR_VAR 0 3
26735: PUSH
26736: LD_EXP 105
26740: PUSH
26741: LD_VAR 0 4
26745: ARRAY
26746: PUSH
26747: FOR_IN
26748: IFFALSE 26774
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26750: LD_VAR 0 3
26754: PUSH
26755: LD_INT 1
26757: ARRAY
26758: PPUSH
26759: LD_VAR 0 3
26763: PUSH
26764: LD_INT 2
26766: ARRAY
26767: PPUSH
26768: CALL_OW 235
26772: GO 26747
26774: POP
26775: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26776: LD_ADDR_EXP 105
26780: PUSH
26781: LD_EXP 105
26785: PPUSH
26786: LD_VAR 0 4
26790: PPUSH
26791: EMPTY
26792: PPUSH
26793: CALL_OW 1
26797: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26798: LD_VAR 0 1
26802: PPUSH
26803: LD_INT 0
26805: PPUSH
26806: CALL_OW 505
// end ; end ;
26810: LD_VAR 0 2
26814: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26815: LD_INT 0
26817: PPUSH
26818: PPUSH
26819: PPUSH
// if not hack in hackTanks or not vehicles then
26820: LD_VAR 0 1
26824: PUSH
26825: LD_EXP 104
26829: IN
26830: NOT
26831: PUSH
26832: LD_VAR 0 2
26836: NOT
26837: OR
26838: IFFALSE 26842
// exit ;
26840: GO 27117
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26842: LD_ADDR_VAR 0 2
26846: PUSH
26847: LD_VAR 0 1
26851: PPUSH
26852: LD_VAR 0 2
26856: PPUSH
26857: LD_INT 1
26859: PPUSH
26860: LD_INT 1
26862: PPUSH
26863: CALL 34894 0 4
26867: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26868: LD_ADDR_VAR 0 5
26872: PUSH
26873: LD_EXP 104
26877: PPUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: CALL 34244 0 2
26887: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26888: LD_EXP 105
26892: PUSH
26893: LD_VAR 0 5
26897: ARRAY
26898: PUSH
26899: LD_EXP 106
26903: LESS
26904: IFFALSE 27093
// begin for i := 1 to vehicles do
26906: LD_ADDR_VAR 0 4
26910: PUSH
26911: DOUBLE
26912: LD_INT 1
26914: DEC
26915: ST_TO_ADDR
26916: LD_VAR 0 2
26920: PUSH
26921: FOR_TO
26922: IFFALSE 27091
// begin if hackTanksCaptured [ index ] = hackLimit then
26924: LD_EXP 105
26928: PUSH
26929: LD_VAR 0 5
26933: ARRAY
26934: PUSH
26935: LD_EXP 106
26939: EQUAL
26940: IFFALSE 26944
// break ;
26942: GO 27091
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26944: LD_ADDR_EXP 108
26948: PUSH
26949: LD_EXP 108
26953: PPUSH
26954: LD_VAR 0 5
26958: PPUSH
26959: LD_EXP 108
26963: PUSH
26964: LD_VAR 0 5
26968: ARRAY
26969: PUSH
26970: LD_INT 1
26972: PLUS
26973: PPUSH
26974: CALL_OW 1
26978: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26979: LD_ADDR_EXP 105
26983: PUSH
26984: LD_EXP 105
26988: PPUSH
26989: LD_VAR 0 5
26993: PUSH
26994: LD_EXP 105
26998: PUSH
26999: LD_VAR 0 5
27003: ARRAY
27004: PUSH
27005: LD_INT 1
27007: PLUS
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PPUSH
27013: LD_VAR 0 2
27017: PUSH
27018: LD_VAR 0 4
27022: ARRAY
27023: PUSH
27024: LD_VAR 0 2
27028: PUSH
27029: LD_VAR 0 4
27033: ARRAY
27034: PPUSH
27035: CALL_OW 255
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PPUSH
27044: CALL 34459 0 3
27048: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27049: LD_VAR 0 2
27053: PUSH
27054: LD_VAR 0 4
27058: ARRAY
27059: PPUSH
27060: LD_VAR 0 1
27064: PPUSH
27065: CALL_OW 255
27069: PPUSH
27070: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27074: LD_VAR 0 2
27078: PUSH
27079: LD_VAR 0 4
27083: ARRAY
27084: PPUSH
27085: CALL_OW 141
// end ;
27089: GO 26921
27091: POP
27092: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27093: LD_VAR 0 1
27097: PPUSH
27098: LD_EXP 105
27102: PUSH
27103: LD_VAR 0 5
27107: ARRAY
27108: PUSH
27109: LD_INT 0
27111: PLUS
27112: PPUSH
27113: CALL_OW 505
// end ;
27117: LD_VAR 0 3
27121: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27122: LD_INT 0
27124: PPUSH
27125: PPUSH
27126: PPUSH
27127: PPUSH
// if not hack in hackTanks then
27128: LD_VAR 0 1
27132: PUSH
27133: LD_EXP 104
27137: IN
27138: NOT
27139: IFFALSE 27143
// exit ;
27141: GO 27383
// index := GetElementIndex ( hackTanks , hack ) ;
27143: LD_ADDR_VAR 0 4
27147: PUSH
27148: LD_EXP 104
27152: PPUSH
27153: LD_VAR 0 1
27157: PPUSH
27158: CALL 34244 0 2
27162: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27163: LD_ADDR_VAR 0 3
27167: PUSH
27168: DOUBLE
27169: LD_EXP 105
27173: PUSH
27174: LD_VAR 0 4
27178: ARRAY
27179: INC
27180: ST_TO_ADDR
27181: LD_INT 1
27183: PUSH
27184: FOR_DOWNTO
27185: IFFALSE 27357
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27187: LD_ADDR_VAR 0 5
27191: PUSH
27192: LD_EXP 105
27196: PUSH
27197: LD_VAR 0 4
27201: ARRAY
27202: PUSH
27203: LD_VAR 0 3
27207: ARRAY
27208: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27209: LD_VAR 0 5
27213: PUSH
27214: LD_INT 1
27216: ARRAY
27217: PPUSH
27218: CALL_OW 302
27222: NOT
27223: PUSH
27224: LD_VAR 0 5
27228: PUSH
27229: LD_INT 1
27231: ARRAY
27232: PPUSH
27233: CALL_OW 255
27237: PUSH
27238: LD_VAR 0 1
27242: PPUSH
27243: CALL_OW 255
27247: NONEQUAL
27248: OR
27249: IFFALSE 27355
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27251: LD_VAR 0 5
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: PPUSH
27260: CALL_OW 305
27264: PUSH
27265: LD_VAR 0 5
27269: PUSH
27270: LD_INT 1
27272: ARRAY
27273: PPUSH
27274: CALL_OW 255
27278: PUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL_OW 255
27288: EQUAL
27289: AND
27290: IFFALSE 27314
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27292: LD_VAR 0 5
27296: PUSH
27297: LD_INT 1
27299: ARRAY
27300: PPUSH
27301: LD_VAR 0 5
27305: PUSH
27306: LD_INT 2
27308: ARRAY
27309: PPUSH
27310: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27314: LD_ADDR_EXP 105
27318: PUSH
27319: LD_EXP 105
27323: PPUSH
27324: LD_VAR 0 4
27328: PPUSH
27329: LD_EXP 105
27333: PUSH
27334: LD_VAR 0 4
27338: ARRAY
27339: PPUSH
27340: LD_VAR 0 3
27344: PPUSH
27345: CALL_OW 3
27349: PPUSH
27350: CALL_OW 1
27354: ST_TO_ADDR
// end ; end ;
27355: GO 27184
27357: POP
27358: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27359: LD_VAR 0 1
27363: PPUSH
27364: LD_EXP 105
27368: PUSH
27369: LD_VAR 0 4
27373: ARRAY
27374: PUSH
27375: LD_INT 0
27377: PLUS
27378: PPUSH
27379: CALL_OW 505
// end ;
27383: LD_VAR 0 2
27387: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27388: LD_INT 0
27390: PPUSH
27391: PPUSH
27392: PPUSH
27393: PPUSH
// if not hack in hackTanks then
27394: LD_VAR 0 1
27398: PUSH
27399: LD_EXP 104
27403: IN
27404: NOT
27405: IFFALSE 27409
// exit ;
27407: GO 27494
// index := GetElementIndex ( hackTanks , hack ) ;
27409: LD_ADDR_VAR 0 5
27413: PUSH
27414: LD_EXP 104
27418: PPUSH
27419: LD_VAR 0 1
27423: PPUSH
27424: CALL 34244 0 2
27428: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27429: LD_ADDR_VAR 0 4
27433: PUSH
27434: DOUBLE
27435: LD_INT 1
27437: DEC
27438: ST_TO_ADDR
27439: LD_EXP 105
27443: PUSH
27444: LD_VAR 0 5
27448: ARRAY
27449: PUSH
27450: FOR_TO
27451: IFFALSE 27492
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27453: LD_EXP 105
27457: PUSH
27458: LD_VAR 0 5
27462: ARRAY
27463: PUSH
27464: LD_VAR 0 4
27468: ARRAY
27469: PUSH
27470: LD_INT 1
27472: ARRAY
27473: PUSH
27474: LD_VAR 0 2
27478: EQUAL
27479: IFFALSE 27490
// KillUnit ( vehicle ) ;
27481: LD_VAR 0 2
27485: PPUSH
27486: CALL_OW 66
27490: GO 27450
27492: POP
27493: POP
// end ;
27494: LD_VAR 0 3
27498: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27499: LD_EXP 109
27503: NOT
27504: IFFALSE 27539
27506: GO 27508
27508: DISABLE
// begin initMiner := true ;
27509: LD_ADDR_EXP 109
27513: PUSH
27514: LD_INT 1
27516: ST_TO_ADDR
// minersList := [ ] ;
27517: LD_ADDR_EXP 110
27521: PUSH
27522: EMPTY
27523: ST_TO_ADDR
// minerMinesList := [ ] ;
27524: LD_ADDR_EXP 111
27528: PUSH
27529: EMPTY
27530: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27531: LD_ADDR_EXP 112
27535: PUSH
27536: LD_INT 5
27538: ST_TO_ADDR
// end ;
27539: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27540: LD_EXP 109
27544: PUSH
27545: LD_INT 34
27547: PUSH
27548: LD_EXP 39
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PPUSH
27557: CALL_OW 69
27561: AND
27562: IFFALSE 28025
27564: GO 27566
27566: DISABLE
27567: LD_INT 0
27569: PPUSH
27570: PPUSH
27571: PPUSH
27572: PPUSH
// begin enable ;
27573: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27574: LD_ADDR_VAR 0 1
27578: PUSH
27579: LD_INT 34
27581: PUSH
27582: LD_EXP 39
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PPUSH
27591: CALL_OW 69
27595: PUSH
27596: FOR_IN
27597: IFFALSE 27669
// begin if not i in minersList then
27599: LD_VAR 0 1
27603: PUSH
27604: LD_EXP 110
27608: IN
27609: NOT
27610: IFFALSE 27667
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27612: LD_ADDR_EXP 110
27616: PUSH
27617: LD_EXP 110
27621: PPUSH
27622: LD_EXP 110
27626: PUSH
27627: LD_INT 1
27629: PLUS
27630: PPUSH
27631: LD_VAR 0 1
27635: PPUSH
27636: CALL_OW 1
27640: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27641: LD_ADDR_EXP 111
27645: PUSH
27646: LD_EXP 111
27650: PPUSH
27651: LD_EXP 111
27655: PUSH
27656: LD_INT 1
27658: PLUS
27659: PPUSH
27660: EMPTY
27661: PPUSH
27662: CALL_OW 1
27666: ST_TO_ADDR
// end end ;
27667: GO 27596
27669: POP
27670: POP
// for i := minerMinesList downto 1 do
27671: LD_ADDR_VAR 0 1
27675: PUSH
27676: DOUBLE
27677: LD_EXP 111
27681: INC
27682: ST_TO_ADDR
27683: LD_INT 1
27685: PUSH
27686: FOR_DOWNTO
27687: IFFALSE 28023
// begin if IsLive ( minersList [ i ] ) then
27689: LD_EXP 110
27693: PUSH
27694: LD_VAR 0 1
27698: ARRAY
27699: PPUSH
27700: CALL_OW 300
27704: IFFALSE 27732
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27706: LD_EXP 110
27710: PUSH
27711: LD_VAR 0 1
27715: ARRAY
27716: PPUSH
27717: LD_EXP 111
27721: PUSH
27722: LD_VAR 0 1
27726: ARRAY
27727: PPUSH
27728: CALL_OW 505
// if not minerMinesList [ i ] then
27732: LD_EXP 111
27736: PUSH
27737: LD_VAR 0 1
27741: ARRAY
27742: NOT
27743: IFFALSE 27747
// continue ;
27745: GO 27686
// for j := minerMinesList [ i ] downto 1 do
27747: LD_ADDR_VAR 0 2
27751: PUSH
27752: DOUBLE
27753: LD_EXP 111
27757: PUSH
27758: LD_VAR 0 1
27762: ARRAY
27763: INC
27764: ST_TO_ADDR
27765: LD_INT 1
27767: PUSH
27768: FOR_DOWNTO
27769: IFFALSE 28019
// begin side := GetSide ( minersList [ i ] ) ;
27771: LD_ADDR_VAR 0 3
27775: PUSH
27776: LD_EXP 110
27780: PUSH
27781: LD_VAR 0 1
27785: ARRAY
27786: PPUSH
27787: CALL_OW 255
27791: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27792: LD_ADDR_VAR 0 4
27796: PUSH
27797: LD_EXP 111
27801: PUSH
27802: LD_VAR 0 1
27806: ARRAY
27807: PUSH
27808: LD_VAR 0 2
27812: ARRAY
27813: PUSH
27814: LD_INT 1
27816: ARRAY
27817: PPUSH
27818: LD_EXP 111
27822: PUSH
27823: LD_VAR 0 1
27827: ARRAY
27828: PUSH
27829: LD_VAR 0 2
27833: ARRAY
27834: PUSH
27835: LD_INT 2
27837: ARRAY
27838: PPUSH
27839: CALL_OW 428
27843: ST_TO_ADDR
// if not tmp then
27844: LD_VAR 0 4
27848: NOT
27849: IFFALSE 27853
// continue ;
27851: GO 27768
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27853: LD_VAR 0 4
27857: PUSH
27858: LD_INT 81
27860: PUSH
27861: LD_VAR 0 3
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PPUSH
27870: CALL_OW 69
27874: IN
27875: PUSH
27876: LD_EXP 111
27880: PUSH
27881: LD_VAR 0 1
27885: ARRAY
27886: PUSH
27887: LD_VAR 0 2
27891: ARRAY
27892: PUSH
27893: LD_INT 1
27895: ARRAY
27896: PPUSH
27897: LD_EXP 111
27901: PUSH
27902: LD_VAR 0 1
27906: ARRAY
27907: PUSH
27908: LD_VAR 0 2
27912: ARRAY
27913: PUSH
27914: LD_INT 2
27916: ARRAY
27917: PPUSH
27918: CALL_OW 458
27922: AND
27923: IFFALSE 28017
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27925: LD_EXP 111
27929: PUSH
27930: LD_VAR 0 1
27934: ARRAY
27935: PUSH
27936: LD_VAR 0 2
27940: ARRAY
27941: PUSH
27942: LD_INT 1
27944: ARRAY
27945: PPUSH
27946: LD_EXP 111
27950: PUSH
27951: LD_VAR 0 1
27955: ARRAY
27956: PUSH
27957: LD_VAR 0 2
27961: ARRAY
27962: PUSH
27963: LD_INT 2
27965: ARRAY
27966: PPUSH
27967: LD_VAR 0 3
27971: PPUSH
27972: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27976: LD_ADDR_EXP 111
27980: PUSH
27981: LD_EXP 111
27985: PPUSH
27986: LD_VAR 0 1
27990: PPUSH
27991: LD_EXP 111
27995: PUSH
27996: LD_VAR 0 1
28000: ARRAY
28001: PPUSH
28002: LD_VAR 0 2
28006: PPUSH
28007: CALL_OW 3
28011: PPUSH
28012: CALL_OW 1
28016: ST_TO_ADDR
// end ; end ;
28017: GO 27768
28019: POP
28020: POP
// end ;
28021: GO 27686
28023: POP
28024: POP
// end ;
28025: PPOPN 4
28027: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28028: LD_INT 0
28030: PPUSH
28031: PPUSH
// result := false ;
28032: LD_ADDR_VAR 0 4
28036: PUSH
28037: LD_INT 0
28039: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28040: LD_VAR 0 1
28044: PPUSH
28045: CALL_OW 264
28049: PUSH
28050: LD_EXP 39
28054: EQUAL
28055: NOT
28056: IFFALSE 28060
// exit ;
28058: GO 28300
// index := GetElementIndex ( minersList , unit ) ;
28060: LD_ADDR_VAR 0 5
28064: PUSH
28065: LD_EXP 110
28069: PPUSH
28070: LD_VAR 0 1
28074: PPUSH
28075: CALL 34244 0 2
28079: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28080: LD_EXP 111
28084: PUSH
28085: LD_VAR 0 5
28089: ARRAY
28090: PUSH
28091: LD_EXP 112
28095: GREATEREQUAL
28096: IFFALSE 28100
// exit ;
28098: GO 28300
// ComMoveXY ( unit , x , y ) ;
28100: LD_VAR 0 1
28104: PPUSH
28105: LD_VAR 0 2
28109: PPUSH
28110: LD_VAR 0 3
28114: PPUSH
28115: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28119: LD_INT 35
28121: PPUSH
28122: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28126: LD_VAR 0 1
28130: PPUSH
28131: LD_VAR 0 2
28135: PPUSH
28136: LD_VAR 0 3
28140: PPUSH
28141: CALL 64308 0 3
28145: NOT
28146: PUSH
28147: LD_VAR 0 1
28151: PPUSH
28152: CALL_OW 314
28156: AND
28157: IFFALSE 28161
// exit ;
28159: GO 28300
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28161: LD_VAR 0 2
28165: PPUSH
28166: LD_VAR 0 3
28170: PPUSH
28171: CALL_OW 428
28175: PUSH
28176: LD_VAR 0 1
28180: EQUAL
28181: PUSH
28182: LD_VAR 0 1
28186: PPUSH
28187: CALL_OW 314
28191: NOT
28192: AND
28193: IFFALSE 28119
// PlaySoundXY ( x , y , PlantMine ) ;
28195: LD_VAR 0 2
28199: PPUSH
28200: LD_VAR 0 3
28204: PPUSH
28205: LD_STRING PlantMine
28207: PPUSH
28208: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28212: LD_VAR 0 2
28216: PPUSH
28217: LD_VAR 0 3
28221: PPUSH
28222: LD_VAR 0 1
28226: PPUSH
28227: CALL_OW 255
28231: PPUSH
28232: LD_INT 0
28234: PPUSH
28235: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28239: LD_ADDR_EXP 111
28243: PUSH
28244: LD_EXP 111
28248: PPUSH
28249: LD_VAR 0 5
28253: PUSH
28254: LD_EXP 111
28258: PUSH
28259: LD_VAR 0 5
28263: ARRAY
28264: PUSH
28265: LD_INT 1
28267: PLUS
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PPUSH
28273: LD_VAR 0 2
28277: PUSH
28278: LD_VAR 0 3
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PPUSH
28287: CALL 34459 0 3
28291: ST_TO_ADDR
// result := true ;
28292: LD_ADDR_VAR 0 4
28296: PUSH
28297: LD_INT 1
28299: ST_TO_ADDR
// end ;
28300: LD_VAR 0 4
28304: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28305: LD_INT 0
28307: PPUSH
28308: PPUSH
28309: PPUSH
// if not unit in minersList then
28310: LD_VAR 0 1
28314: PUSH
28315: LD_EXP 110
28319: IN
28320: NOT
28321: IFFALSE 28325
// exit ;
28323: GO 28717
// index := GetElementIndex ( minersList , unit ) ;
28325: LD_ADDR_VAR 0 6
28329: PUSH
28330: LD_EXP 110
28334: PPUSH
28335: LD_VAR 0 1
28339: PPUSH
28340: CALL 34244 0 2
28344: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28345: LD_ADDR_VAR 0 5
28349: PUSH
28350: DOUBLE
28351: LD_EXP 111
28355: PUSH
28356: LD_VAR 0 6
28360: ARRAY
28361: INC
28362: ST_TO_ADDR
28363: LD_INT 1
28365: PUSH
28366: FOR_DOWNTO
28367: IFFALSE 28528
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28369: LD_EXP 111
28373: PUSH
28374: LD_VAR 0 6
28378: ARRAY
28379: PUSH
28380: LD_VAR 0 5
28384: ARRAY
28385: PUSH
28386: LD_INT 1
28388: ARRAY
28389: PUSH
28390: LD_VAR 0 2
28394: EQUAL
28395: PUSH
28396: LD_EXP 111
28400: PUSH
28401: LD_VAR 0 6
28405: ARRAY
28406: PUSH
28407: LD_VAR 0 5
28411: ARRAY
28412: PUSH
28413: LD_INT 2
28415: ARRAY
28416: PUSH
28417: LD_VAR 0 3
28421: EQUAL
28422: AND
28423: IFFALSE 28526
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28425: LD_EXP 111
28429: PUSH
28430: LD_VAR 0 6
28434: ARRAY
28435: PUSH
28436: LD_VAR 0 5
28440: ARRAY
28441: PUSH
28442: LD_INT 1
28444: ARRAY
28445: PPUSH
28446: LD_EXP 111
28450: PUSH
28451: LD_VAR 0 6
28455: ARRAY
28456: PUSH
28457: LD_VAR 0 5
28461: ARRAY
28462: PUSH
28463: LD_INT 2
28465: ARRAY
28466: PPUSH
28467: LD_VAR 0 1
28471: PPUSH
28472: CALL_OW 255
28476: PPUSH
28477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28481: LD_ADDR_EXP 111
28485: PUSH
28486: LD_EXP 111
28490: PPUSH
28491: LD_VAR 0 6
28495: PPUSH
28496: LD_EXP 111
28500: PUSH
28501: LD_VAR 0 6
28505: ARRAY
28506: PPUSH
28507: LD_VAR 0 5
28511: PPUSH
28512: CALL_OW 3
28516: PPUSH
28517: CALL_OW 1
28521: ST_TO_ADDR
// exit ;
28522: POP
28523: POP
28524: GO 28717
// end ; end ;
28526: GO 28366
28528: POP
28529: POP
// for i := minerMinesList [ index ] downto 1 do
28530: LD_ADDR_VAR 0 5
28534: PUSH
28535: DOUBLE
28536: LD_EXP 111
28540: PUSH
28541: LD_VAR 0 6
28545: ARRAY
28546: INC
28547: ST_TO_ADDR
28548: LD_INT 1
28550: PUSH
28551: FOR_DOWNTO
28552: IFFALSE 28715
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28554: LD_EXP 111
28558: PUSH
28559: LD_VAR 0 6
28563: ARRAY
28564: PUSH
28565: LD_VAR 0 5
28569: ARRAY
28570: PUSH
28571: LD_INT 1
28573: ARRAY
28574: PPUSH
28575: LD_EXP 111
28579: PUSH
28580: LD_VAR 0 6
28584: ARRAY
28585: PUSH
28586: LD_VAR 0 5
28590: ARRAY
28591: PUSH
28592: LD_INT 2
28594: ARRAY
28595: PPUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: LD_VAR 0 3
28605: PPUSH
28606: CALL_OW 298
28610: PUSH
28611: LD_INT 6
28613: LESS
28614: IFFALSE 28713
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28616: LD_EXP 111
28620: PUSH
28621: LD_VAR 0 6
28625: ARRAY
28626: PUSH
28627: LD_VAR 0 5
28631: ARRAY
28632: PUSH
28633: LD_INT 1
28635: ARRAY
28636: PPUSH
28637: LD_EXP 111
28641: PUSH
28642: LD_VAR 0 6
28646: ARRAY
28647: PUSH
28648: LD_VAR 0 5
28652: ARRAY
28653: PUSH
28654: LD_INT 2
28656: ARRAY
28657: PPUSH
28658: LD_VAR 0 1
28662: PPUSH
28663: CALL_OW 255
28667: PPUSH
28668: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28672: LD_ADDR_EXP 111
28676: PUSH
28677: LD_EXP 111
28681: PPUSH
28682: LD_VAR 0 6
28686: PPUSH
28687: LD_EXP 111
28691: PUSH
28692: LD_VAR 0 6
28696: ARRAY
28697: PPUSH
28698: LD_VAR 0 5
28702: PPUSH
28703: CALL_OW 3
28707: PPUSH
28708: CALL_OW 1
28712: ST_TO_ADDR
// end ; end ;
28713: GO 28551
28715: POP
28716: POP
// end ;
28717: LD_VAR 0 4
28721: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28722: LD_INT 0
28724: PPUSH
28725: PPUSH
28726: PPUSH
28727: PPUSH
28728: PPUSH
28729: PPUSH
28730: PPUSH
28731: PPUSH
28732: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28733: LD_VAR 0 1
28737: PPUSH
28738: CALL_OW 264
28742: PUSH
28743: LD_EXP 39
28747: EQUAL
28748: NOT
28749: PUSH
28750: LD_VAR 0 1
28754: PUSH
28755: LD_EXP 110
28759: IN
28760: NOT
28761: OR
28762: IFFALSE 28766
// exit ;
28764: GO 29088
// index := GetElementIndex ( minersList , unit ) ;
28766: LD_ADDR_VAR 0 6
28770: PUSH
28771: LD_EXP 110
28775: PPUSH
28776: LD_VAR 0 1
28780: PPUSH
28781: CALL 34244 0 2
28785: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28786: LD_ADDR_VAR 0 8
28790: PUSH
28791: LD_EXP 112
28795: PUSH
28796: LD_EXP 111
28800: PUSH
28801: LD_VAR 0 6
28805: ARRAY
28806: MINUS
28807: ST_TO_ADDR
// if not minesFreeAmount then
28808: LD_VAR 0 8
28812: NOT
28813: IFFALSE 28817
// exit ;
28815: GO 29088
// tmp := [ ] ;
28817: LD_ADDR_VAR 0 7
28821: PUSH
28822: EMPTY
28823: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28824: LD_ADDR_VAR 0 5
28828: PUSH
28829: DOUBLE
28830: LD_INT 1
28832: DEC
28833: ST_TO_ADDR
28834: LD_VAR 0 8
28838: PUSH
28839: FOR_TO
28840: IFFALSE 29035
// begin _d := rand ( 0 , 5 ) ;
28842: LD_ADDR_VAR 0 11
28846: PUSH
28847: LD_INT 0
28849: PPUSH
28850: LD_INT 5
28852: PPUSH
28853: CALL_OW 12
28857: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28858: LD_ADDR_VAR 0 12
28862: PUSH
28863: LD_INT 2
28865: PPUSH
28866: LD_INT 6
28868: PPUSH
28869: CALL_OW 12
28873: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28874: LD_ADDR_VAR 0 9
28878: PUSH
28879: LD_VAR 0 2
28883: PPUSH
28884: LD_VAR 0 11
28888: PPUSH
28889: LD_VAR 0 12
28893: PPUSH
28894: CALL_OW 272
28898: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28899: LD_ADDR_VAR 0 10
28903: PUSH
28904: LD_VAR 0 3
28908: PPUSH
28909: LD_VAR 0 11
28913: PPUSH
28914: LD_VAR 0 12
28918: PPUSH
28919: CALL_OW 273
28923: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28924: LD_VAR 0 9
28928: PPUSH
28929: LD_VAR 0 10
28933: PPUSH
28934: CALL_OW 488
28938: PUSH
28939: LD_VAR 0 9
28943: PUSH
28944: LD_VAR 0 10
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_VAR 0 7
28957: IN
28958: NOT
28959: AND
28960: PUSH
28961: LD_VAR 0 9
28965: PPUSH
28966: LD_VAR 0 10
28970: PPUSH
28971: CALL_OW 458
28975: NOT
28976: AND
28977: IFFALSE 29019
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28979: LD_ADDR_VAR 0 7
28983: PUSH
28984: LD_VAR 0 7
28988: PPUSH
28989: LD_VAR 0 7
28993: PUSH
28994: LD_INT 1
28996: PLUS
28997: PPUSH
28998: LD_VAR 0 9
29002: PUSH
29003: LD_VAR 0 10
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 1
29016: ST_TO_ADDR
29017: GO 29033
// i := i - 1 ;
29019: LD_ADDR_VAR 0 5
29023: PUSH
29024: LD_VAR 0 5
29028: PUSH
29029: LD_INT 1
29031: MINUS
29032: ST_TO_ADDR
// end ;
29033: GO 28839
29035: POP
29036: POP
// for i in tmp do
29037: LD_ADDR_VAR 0 5
29041: PUSH
29042: LD_VAR 0 7
29046: PUSH
29047: FOR_IN
29048: IFFALSE 29086
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29050: LD_VAR 0 1
29054: PPUSH
29055: LD_VAR 0 5
29059: PUSH
29060: LD_INT 1
29062: ARRAY
29063: PPUSH
29064: LD_VAR 0 5
29068: PUSH
29069: LD_INT 2
29071: ARRAY
29072: PPUSH
29073: CALL 28028 0 3
29077: NOT
29078: IFFALSE 29084
// exit ;
29080: POP
29081: POP
29082: GO 29088
29084: GO 29047
29086: POP
29087: POP
// end ;
29088: LD_VAR 0 4
29092: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29093: LD_INT 0
29095: PPUSH
29096: PPUSH
29097: PPUSH
29098: PPUSH
29099: PPUSH
29100: PPUSH
29101: PPUSH
// if not GetClass ( unit ) = class_sniper then
29102: LD_VAR 0 1
29106: PPUSH
29107: CALL_OW 257
29111: PUSH
29112: LD_INT 5
29114: EQUAL
29115: NOT
29116: IFFALSE 29120
// exit ;
29118: GO 29508
// dist := 8 ;
29120: LD_ADDR_VAR 0 5
29124: PUSH
29125: LD_INT 8
29127: ST_TO_ADDR
// viewRange := 12 ;
29128: LD_ADDR_VAR 0 7
29132: PUSH
29133: LD_INT 12
29135: ST_TO_ADDR
// side := GetSide ( unit ) ;
29136: LD_ADDR_VAR 0 6
29140: PUSH
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL_OW 255
29150: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29151: LD_INT 61
29153: PPUSH
29154: LD_VAR 0 6
29158: PPUSH
29159: CALL_OW 321
29163: PUSH
29164: LD_INT 2
29166: EQUAL
29167: IFFALSE 29177
// viewRange := 16 ;
29169: LD_ADDR_VAR 0 7
29173: PUSH
29174: LD_INT 16
29176: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29177: LD_VAR 0 1
29181: PPUSH
29182: LD_VAR 0 2
29186: PPUSH
29187: LD_VAR 0 3
29191: PPUSH
29192: CALL_OW 297
29196: PUSH
29197: LD_VAR 0 5
29201: GREATER
29202: IFFALSE 29281
// begin ComMoveXY ( unit , x , y ) ;
29204: LD_VAR 0 1
29208: PPUSH
29209: LD_VAR 0 2
29213: PPUSH
29214: LD_VAR 0 3
29218: PPUSH
29219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29223: LD_INT 35
29225: PPUSH
29226: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29230: LD_VAR 0 1
29234: PPUSH
29235: LD_VAR 0 2
29239: PPUSH
29240: LD_VAR 0 3
29244: PPUSH
29245: CALL 64308 0 3
29249: NOT
29250: IFFALSE 29254
// exit ;
29252: GO 29508
// until GetDistUnitXY ( unit , x , y ) < dist ;
29254: LD_VAR 0 1
29258: PPUSH
29259: LD_VAR 0 2
29263: PPUSH
29264: LD_VAR 0 3
29268: PPUSH
29269: CALL_OW 297
29273: PUSH
29274: LD_VAR 0 5
29278: LESS
29279: IFFALSE 29223
// end ; ComTurnXY ( unit , x , y ) ;
29281: LD_VAR 0 1
29285: PPUSH
29286: LD_VAR 0 2
29290: PPUSH
29291: LD_VAR 0 3
29295: PPUSH
29296: CALL_OW 118
// wait ( 5 ) ;
29300: LD_INT 5
29302: PPUSH
29303: CALL_OW 67
// _d := GetDir ( unit ) ;
29307: LD_ADDR_VAR 0 10
29311: PUSH
29312: LD_VAR 0 1
29316: PPUSH
29317: CALL_OW 254
29321: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29322: LD_ADDR_VAR 0 8
29326: PUSH
29327: LD_VAR 0 1
29331: PPUSH
29332: CALL_OW 250
29336: PPUSH
29337: LD_VAR 0 10
29341: PPUSH
29342: LD_VAR 0 5
29346: PPUSH
29347: CALL_OW 272
29351: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29352: LD_ADDR_VAR 0 9
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 251
29366: PPUSH
29367: LD_VAR 0 10
29371: PPUSH
29372: LD_VAR 0 5
29376: PPUSH
29377: CALL_OW 273
29381: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29382: LD_VAR 0 8
29386: PPUSH
29387: LD_VAR 0 9
29391: PPUSH
29392: CALL_OW 488
29396: NOT
29397: IFFALSE 29401
// exit ;
29399: GO 29508
// ComAnimCustom ( unit , 1 ) ;
29401: LD_VAR 0 1
29405: PPUSH
29406: LD_INT 1
29408: PPUSH
29409: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29413: LD_VAR 0 8
29417: PPUSH
29418: LD_VAR 0 9
29422: PPUSH
29423: LD_VAR 0 6
29427: PPUSH
29428: LD_VAR 0 7
29432: PPUSH
29433: CALL_OW 330
// repeat wait ( 1 ) ;
29437: LD_INT 1
29439: PPUSH
29440: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29444: LD_VAR 0 1
29448: PPUSH
29449: CALL_OW 316
29453: PUSH
29454: LD_VAR 0 1
29458: PPUSH
29459: CALL_OW 314
29463: OR
29464: PUSH
29465: LD_VAR 0 1
29469: PPUSH
29470: CALL_OW 302
29474: NOT
29475: OR
29476: PUSH
29477: LD_VAR 0 1
29481: PPUSH
29482: CALL_OW 301
29486: OR
29487: IFFALSE 29437
// RemoveSeeing ( _x , _y , side ) ;
29489: LD_VAR 0 8
29493: PPUSH
29494: LD_VAR 0 9
29498: PPUSH
29499: LD_VAR 0 6
29503: PPUSH
29504: CALL_OW 331
// end ; end_of_file
29508: LD_VAR 0 4
29512: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29513: LD_INT 0
29515: PPUSH
29516: PPUSH
// if exist_mode then
29517: LD_VAR 0 2
29521: IFFALSE 29546
// unit := CreateCharacter ( prefix & ident ) else
29523: LD_ADDR_VAR 0 5
29527: PUSH
29528: LD_VAR 0 3
29532: PUSH
29533: LD_VAR 0 1
29537: STR
29538: PPUSH
29539: CALL_OW 34
29543: ST_TO_ADDR
29544: GO 29561
// unit := NewCharacter ( ident ) ;
29546: LD_ADDR_VAR 0 5
29550: PUSH
29551: LD_VAR 0 1
29555: PPUSH
29556: CALL_OW 25
29560: ST_TO_ADDR
// result := unit ;
29561: LD_ADDR_VAR 0 4
29565: PUSH
29566: LD_VAR 0 5
29570: ST_TO_ADDR
// end ;
29571: LD_VAR 0 4
29575: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29576: LD_INT 0
29578: PPUSH
29579: PPUSH
// if not side or not nation then
29580: LD_VAR 0 1
29584: NOT
29585: PUSH
29586: LD_VAR 0 2
29590: NOT
29591: OR
29592: IFFALSE 29596
// exit ;
29594: GO 30360
// case nation of nation_american :
29596: LD_VAR 0 2
29600: PUSH
29601: LD_INT 1
29603: DOUBLE
29604: EQUAL
29605: IFTRUE 29609
29607: GO 29823
29609: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29610: LD_ADDR_VAR 0 4
29614: PUSH
29615: LD_INT 35
29617: PUSH
29618: LD_INT 45
29620: PUSH
29621: LD_INT 46
29623: PUSH
29624: LD_INT 47
29626: PUSH
29627: LD_INT 82
29629: PUSH
29630: LD_INT 83
29632: PUSH
29633: LD_INT 84
29635: PUSH
29636: LD_INT 85
29638: PUSH
29639: LD_INT 86
29641: PUSH
29642: LD_INT 1
29644: PUSH
29645: LD_INT 2
29647: PUSH
29648: LD_INT 6
29650: PUSH
29651: LD_INT 15
29653: PUSH
29654: LD_INT 16
29656: PUSH
29657: LD_INT 7
29659: PUSH
29660: LD_INT 12
29662: PUSH
29663: LD_INT 13
29665: PUSH
29666: LD_INT 10
29668: PUSH
29669: LD_INT 14
29671: PUSH
29672: LD_INT 20
29674: PUSH
29675: LD_INT 21
29677: PUSH
29678: LD_INT 22
29680: PUSH
29681: LD_INT 25
29683: PUSH
29684: LD_INT 32
29686: PUSH
29687: LD_INT 27
29689: PUSH
29690: LD_INT 36
29692: PUSH
29693: LD_INT 69
29695: PUSH
29696: LD_INT 39
29698: PUSH
29699: LD_INT 34
29701: PUSH
29702: LD_INT 40
29704: PUSH
29705: LD_INT 48
29707: PUSH
29708: LD_INT 49
29710: PUSH
29711: LD_INT 50
29713: PUSH
29714: LD_INT 51
29716: PUSH
29717: LD_INT 52
29719: PUSH
29720: LD_INT 53
29722: PUSH
29723: LD_INT 54
29725: PUSH
29726: LD_INT 55
29728: PUSH
29729: LD_INT 56
29731: PUSH
29732: LD_INT 57
29734: PUSH
29735: LD_INT 58
29737: PUSH
29738: LD_INT 59
29740: PUSH
29741: LD_INT 60
29743: PUSH
29744: LD_INT 61
29746: PUSH
29747: LD_INT 62
29749: PUSH
29750: LD_INT 80
29752: PUSH
29753: LD_INT 82
29755: PUSH
29756: LD_INT 83
29758: PUSH
29759: LD_INT 84
29761: PUSH
29762: LD_INT 85
29764: PUSH
29765: LD_INT 86
29767: PUSH
29768: EMPTY
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: LIST
29820: ST_TO_ADDR
29821: GO 30284
29823: LD_INT 2
29825: DOUBLE
29826: EQUAL
29827: IFTRUE 29831
29829: GO 30053
29831: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
29832: LD_ADDR_VAR 0 4
29836: PUSH
29837: LD_INT 35
29839: PUSH
29840: LD_INT 45
29842: PUSH
29843: LD_INT 46
29845: PUSH
29846: LD_INT 47
29848: PUSH
29849: LD_INT 82
29851: PUSH
29852: LD_INT 83
29854: PUSH
29855: LD_INT 84
29857: PUSH
29858: LD_INT 85
29860: PUSH
29861: LD_INT 87
29863: PUSH
29864: LD_INT 70
29866: PUSH
29867: LD_INT 1
29869: PUSH
29870: LD_INT 11
29872: PUSH
29873: LD_INT 3
29875: PUSH
29876: LD_INT 4
29878: PUSH
29879: LD_INT 5
29881: PUSH
29882: LD_INT 6
29884: PUSH
29885: LD_INT 15
29887: PUSH
29888: LD_INT 18
29890: PUSH
29891: LD_INT 7
29893: PUSH
29894: LD_INT 17
29896: PUSH
29897: LD_INT 8
29899: PUSH
29900: LD_INT 20
29902: PUSH
29903: LD_INT 21
29905: PUSH
29906: LD_INT 22
29908: PUSH
29909: LD_INT 72
29911: PUSH
29912: LD_INT 26
29914: PUSH
29915: LD_INT 69
29917: PUSH
29918: LD_INT 39
29920: PUSH
29921: LD_INT 40
29923: PUSH
29924: LD_INT 41
29926: PUSH
29927: LD_INT 42
29929: PUSH
29930: LD_INT 43
29932: PUSH
29933: LD_INT 48
29935: PUSH
29936: LD_INT 49
29938: PUSH
29939: LD_INT 50
29941: PUSH
29942: LD_INT 51
29944: PUSH
29945: LD_INT 52
29947: PUSH
29948: LD_INT 53
29950: PUSH
29951: LD_INT 54
29953: PUSH
29954: LD_INT 55
29956: PUSH
29957: LD_INT 56
29959: PUSH
29960: LD_INT 60
29962: PUSH
29963: LD_INT 61
29965: PUSH
29966: LD_INT 62
29968: PUSH
29969: LD_INT 66
29971: PUSH
29972: LD_INT 67
29974: PUSH
29975: LD_INT 68
29977: PUSH
29978: LD_INT 81
29980: PUSH
29981: LD_INT 82
29983: PUSH
29984: LD_INT 83
29986: PUSH
29987: LD_INT 84
29989: PUSH
29990: LD_INT 85
29992: PUSH
29993: LD_INT 87
29995: PUSH
29996: EMPTY
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: LIST
30048: LIST
30049: LIST
30050: ST_TO_ADDR
30051: GO 30284
30053: LD_INT 3
30055: DOUBLE
30056: EQUAL
30057: IFTRUE 30061
30059: GO 30283
30061: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30062: LD_ADDR_VAR 0 4
30066: PUSH
30067: LD_INT 46
30069: PUSH
30070: LD_INT 47
30072: PUSH
30073: LD_INT 1
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: LD_INT 82
30081: PUSH
30082: LD_INT 83
30084: PUSH
30085: LD_INT 84
30087: PUSH
30088: LD_INT 85
30090: PUSH
30091: LD_INT 86
30093: PUSH
30094: LD_INT 11
30096: PUSH
30097: LD_INT 9
30099: PUSH
30100: LD_INT 20
30102: PUSH
30103: LD_INT 19
30105: PUSH
30106: LD_INT 21
30108: PUSH
30109: LD_INT 24
30111: PUSH
30112: LD_INT 22
30114: PUSH
30115: LD_INT 25
30117: PUSH
30118: LD_INT 28
30120: PUSH
30121: LD_INT 29
30123: PUSH
30124: LD_INT 30
30126: PUSH
30127: LD_INT 31
30129: PUSH
30130: LD_INT 37
30132: PUSH
30133: LD_INT 38
30135: PUSH
30136: LD_INT 32
30138: PUSH
30139: LD_INT 27
30141: PUSH
30142: LD_INT 33
30144: PUSH
30145: LD_INT 69
30147: PUSH
30148: LD_INT 39
30150: PUSH
30151: LD_INT 34
30153: PUSH
30154: LD_INT 40
30156: PUSH
30157: LD_INT 71
30159: PUSH
30160: LD_INT 23
30162: PUSH
30163: LD_INT 44
30165: PUSH
30166: LD_INT 48
30168: PUSH
30169: LD_INT 49
30171: PUSH
30172: LD_INT 50
30174: PUSH
30175: LD_INT 51
30177: PUSH
30178: LD_INT 52
30180: PUSH
30181: LD_INT 53
30183: PUSH
30184: LD_INT 54
30186: PUSH
30187: LD_INT 55
30189: PUSH
30190: LD_INT 56
30192: PUSH
30193: LD_INT 57
30195: PUSH
30196: LD_INT 58
30198: PUSH
30199: LD_INT 59
30201: PUSH
30202: LD_INT 63
30204: PUSH
30205: LD_INT 64
30207: PUSH
30208: LD_INT 65
30210: PUSH
30211: LD_INT 82
30213: PUSH
30214: LD_INT 83
30216: PUSH
30217: LD_INT 84
30219: PUSH
30220: LD_INT 85
30222: PUSH
30223: LD_INT 86
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: LIST
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: ST_TO_ADDR
30281: GO 30284
30283: POP
// if state > - 1 and state < 3 then
30284: LD_VAR 0 3
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: GREATER
30293: PUSH
30294: LD_VAR 0 3
30298: PUSH
30299: LD_INT 3
30301: LESS
30302: AND
30303: IFFALSE 30360
// for i in result do
30305: LD_ADDR_VAR 0 5
30309: PUSH
30310: LD_VAR 0 4
30314: PUSH
30315: FOR_IN
30316: IFFALSE 30358
// if GetTech ( i , side ) <> state then
30318: LD_VAR 0 5
30322: PPUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL_OW 321
30332: PUSH
30333: LD_VAR 0 3
30337: NONEQUAL
30338: IFFALSE 30356
// result := result diff i ;
30340: LD_ADDR_VAR 0 4
30344: PUSH
30345: LD_VAR 0 4
30349: PUSH
30350: LD_VAR 0 5
30354: DIFF
30355: ST_TO_ADDR
30356: GO 30315
30358: POP
30359: POP
// end ;
30360: LD_VAR 0 4
30364: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30365: LD_INT 0
30367: PPUSH
30368: PPUSH
30369: PPUSH
// result := true ;
30370: LD_ADDR_VAR 0 3
30374: PUSH
30375: LD_INT 1
30377: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30378: LD_ADDR_VAR 0 5
30382: PUSH
30383: LD_VAR 0 2
30387: PPUSH
30388: CALL_OW 480
30392: ST_TO_ADDR
// if not tmp then
30393: LD_VAR 0 5
30397: NOT
30398: IFFALSE 30402
// exit ;
30400: GO 30451
// for i in tmp do
30402: LD_ADDR_VAR 0 4
30406: PUSH
30407: LD_VAR 0 5
30411: PUSH
30412: FOR_IN
30413: IFFALSE 30449
// if GetTech ( i , side ) <> state_researched then
30415: LD_VAR 0 4
30419: PPUSH
30420: LD_VAR 0 1
30424: PPUSH
30425: CALL_OW 321
30429: PUSH
30430: LD_INT 2
30432: NONEQUAL
30433: IFFALSE 30447
// begin result := false ;
30435: LD_ADDR_VAR 0 3
30439: PUSH
30440: LD_INT 0
30442: ST_TO_ADDR
// exit ;
30443: POP
30444: POP
30445: GO 30451
// end ;
30447: GO 30412
30449: POP
30450: POP
// end ;
30451: LD_VAR 0 3
30455: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30456: LD_INT 0
30458: PPUSH
30459: PPUSH
30460: PPUSH
30461: PPUSH
30462: PPUSH
30463: PPUSH
30464: PPUSH
30465: PPUSH
30466: PPUSH
30467: PPUSH
30468: PPUSH
30469: PPUSH
30470: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30471: LD_VAR 0 1
30475: NOT
30476: PUSH
30477: LD_VAR 0 1
30481: PPUSH
30482: CALL_OW 257
30486: PUSH
30487: LD_INT 9
30489: NONEQUAL
30490: OR
30491: IFFALSE 30495
// exit ;
30493: GO 31068
// side := GetSide ( unit ) ;
30495: LD_ADDR_VAR 0 9
30499: PUSH
30500: LD_VAR 0 1
30504: PPUSH
30505: CALL_OW 255
30509: ST_TO_ADDR
// tech_space := tech_spacanom ;
30510: LD_ADDR_VAR 0 12
30514: PUSH
30515: LD_INT 29
30517: ST_TO_ADDR
// tech_time := tech_taurad ;
30518: LD_ADDR_VAR 0 13
30522: PUSH
30523: LD_INT 28
30525: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30526: LD_ADDR_VAR 0 11
30530: PUSH
30531: LD_VAR 0 1
30535: PPUSH
30536: CALL_OW 310
30540: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30541: LD_VAR 0 11
30545: PPUSH
30546: CALL_OW 247
30550: PUSH
30551: LD_INT 2
30553: EQUAL
30554: IFFALSE 30558
// exit ;
30556: GO 31068
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30558: LD_ADDR_VAR 0 8
30562: PUSH
30563: LD_INT 81
30565: PUSH
30566: LD_VAR 0 9
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 3
30577: PUSH
30578: LD_INT 21
30580: PUSH
30581: LD_INT 3
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PPUSH
30596: CALL_OW 69
30600: ST_TO_ADDR
// if not tmp then
30601: LD_VAR 0 8
30605: NOT
30606: IFFALSE 30610
// exit ;
30608: GO 31068
// if in_unit then
30610: LD_VAR 0 11
30614: IFFALSE 30638
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30616: LD_ADDR_VAR 0 10
30620: PUSH
30621: LD_VAR 0 8
30625: PPUSH
30626: LD_VAR 0 11
30630: PPUSH
30631: CALL_OW 74
30635: ST_TO_ADDR
30636: GO 30658
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30638: LD_ADDR_VAR 0 10
30642: PUSH
30643: LD_VAR 0 8
30647: PPUSH
30648: LD_VAR 0 1
30652: PPUSH
30653: CALL_OW 74
30657: ST_TO_ADDR
// if not enemy then
30658: LD_VAR 0 10
30662: NOT
30663: IFFALSE 30667
// exit ;
30665: GO 31068
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30667: LD_VAR 0 11
30671: PUSH
30672: LD_VAR 0 11
30676: PPUSH
30677: LD_VAR 0 10
30681: PPUSH
30682: CALL_OW 296
30686: PUSH
30687: LD_INT 13
30689: GREATER
30690: AND
30691: PUSH
30692: LD_VAR 0 1
30696: PPUSH
30697: LD_VAR 0 10
30701: PPUSH
30702: CALL_OW 296
30706: PUSH
30707: LD_INT 12
30709: GREATER
30710: OR
30711: IFFALSE 30715
// exit ;
30713: GO 31068
// missile := [ 1 ] ;
30715: LD_ADDR_VAR 0 14
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30726: LD_VAR 0 9
30730: PPUSH
30731: LD_VAR 0 12
30735: PPUSH
30736: CALL_OW 325
30740: IFFALSE 30769
// missile := Insert ( missile , missile + 1 , 2 ) ;
30742: LD_ADDR_VAR 0 14
30746: PUSH
30747: LD_VAR 0 14
30751: PPUSH
30752: LD_VAR 0 14
30756: PUSH
30757: LD_INT 1
30759: PLUS
30760: PPUSH
30761: LD_INT 2
30763: PPUSH
30764: CALL_OW 2
30768: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30769: LD_VAR 0 9
30773: PPUSH
30774: LD_VAR 0 13
30778: PPUSH
30779: CALL_OW 325
30783: PUSH
30784: LD_VAR 0 10
30788: PPUSH
30789: CALL_OW 255
30793: PPUSH
30794: LD_VAR 0 13
30798: PPUSH
30799: CALL_OW 325
30803: NOT
30804: AND
30805: IFFALSE 30834
// missile := Insert ( missile , missile + 1 , 3 ) ;
30807: LD_ADDR_VAR 0 14
30811: PUSH
30812: LD_VAR 0 14
30816: PPUSH
30817: LD_VAR 0 14
30821: PUSH
30822: LD_INT 1
30824: PLUS
30825: PPUSH
30826: LD_INT 3
30828: PPUSH
30829: CALL_OW 2
30833: ST_TO_ADDR
// if missile < 2 then
30834: LD_VAR 0 14
30838: PUSH
30839: LD_INT 2
30841: LESS
30842: IFFALSE 30846
// exit ;
30844: GO 31068
// x := GetX ( enemy ) ;
30846: LD_ADDR_VAR 0 4
30850: PUSH
30851: LD_VAR 0 10
30855: PPUSH
30856: CALL_OW 250
30860: ST_TO_ADDR
// y := GetY ( enemy ) ;
30861: LD_ADDR_VAR 0 5
30865: PUSH
30866: LD_VAR 0 10
30870: PPUSH
30871: CALL_OW 251
30875: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30876: LD_ADDR_VAR 0 6
30880: PUSH
30881: LD_VAR 0 4
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PPUSH
30890: LD_INT 1
30892: PPUSH
30893: CALL_OW 12
30897: PLUS
30898: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30899: LD_ADDR_VAR 0 7
30903: PUSH
30904: LD_VAR 0 5
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PPUSH
30913: LD_INT 1
30915: PPUSH
30916: CALL_OW 12
30920: PLUS
30921: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30922: LD_VAR 0 6
30926: PPUSH
30927: LD_VAR 0 7
30931: PPUSH
30932: CALL_OW 488
30936: NOT
30937: IFFALSE 30959
// begin _x := x ;
30939: LD_ADDR_VAR 0 6
30943: PUSH
30944: LD_VAR 0 4
30948: ST_TO_ADDR
// _y := y ;
30949: LD_ADDR_VAR 0 7
30953: PUSH
30954: LD_VAR 0 5
30958: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30959: LD_ADDR_VAR 0 3
30963: PUSH
30964: LD_INT 1
30966: PPUSH
30967: LD_VAR 0 14
30971: PPUSH
30972: CALL_OW 12
30976: ST_TO_ADDR
// case i of 1 :
30977: LD_VAR 0 3
30981: PUSH
30982: LD_INT 1
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31007
30990: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30991: LD_VAR 0 1
30995: PPUSH
30996: LD_VAR 0 10
31000: PPUSH
31001: CALL_OW 115
31005: GO 31068
31007: LD_INT 2
31009: DOUBLE
31010: EQUAL
31011: IFTRUE 31015
31013: GO 31037
31015: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31016: LD_VAR 0 1
31020: PPUSH
31021: LD_VAR 0 6
31025: PPUSH
31026: LD_VAR 0 7
31030: PPUSH
31031: CALL_OW 153
31035: GO 31068
31037: LD_INT 3
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31067
31045: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31046: LD_VAR 0 1
31050: PPUSH
31051: LD_VAR 0 6
31055: PPUSH
31056: LD_VAR 0 7
31060: PPUSH
31061: CALL_OW 154
31065: GO 31068
31067: POP
// end ;
31068: LD_VAR 0 2
31072: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31073: LD_INT 0
31075: PPUSH
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
31080: PPUSH
// if not unit or not building then
31081: LD_VAR 0 1
31085: NOT
31086: PUSH
31087: LD_VAR 0 2
31091: NOT
31092: OR
31093: IFFALSE 31097
// exit ;
31095: GO 31255
// x := GetX ( building ) ;
31097: LD_ADDR_VAR 0 5
31101: PUSH
31102: LD_VAR 0 2
31106: PPUSH
31107: CALL_OW 250
31111: ST_TO_ADDR
// y := GetY ( building ) ;
31112: LD_ADDR_VAR 0 6
31116: PUSH
31117: LD_VAR 0 2
31121: PPUSH
31122: CALL_OW 251
31126: ST_TO_ADDR
// for i = 0 to 5 do
31127: LD_ADDR_VAR 0 4
31131: PUSH
31132: DOUBLE
31133: LD_INT 0
31135: DEC
31136: ST_TO_ADDR
31137: LD_INT 5
31139: PUSH
31140: FOR_TO
31141: IFFALSE 31253
// begin _x := ShiftX ( x , i , 3 ) ;
31143: LD_ADDR_VAR 0 7
31147: PUSH
31148: LD_VAR 0 5
31152: PPUSH
31153: LD_VAR 0 4
31157: PPUSH
31158: LD_INT 3
31160: PPUSH
31161: CALL_OW 272
31165: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31166: LD_ADDR_VAR 0 8
31170: PUSH
31171: LD_VAR 0 6
31175: PPUSH
31176: LD_VAR 0 4
31180: PPUSH
31181: LD_INT 3
31183: PPUSH
31184: CALL_OW 273
31188: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31189: LD_VAR 0 7
31193: PPUSH
31194: LD_VAR 0 8
31198: PPUSH
31199: CALL_OW 488
31203: NOT
31204: IFFALSE 31208
// continue ;
31206: GO 31140
// if HexInfo ( _x , _y ) = 0 then
31208: LD_VAR 0 7
31212: PPUSH
31213: LD_VAR 0 8
31217: PPUSH
31218: CALL_OW 428
31222: PUSH
31223: LD_INT 0
31225: EQUAL
31226: IFFALSE 31251
// begin ComMoveXY ( unit , _x , _y ) ;
31228: LD_VAR 0 1
31232: PPUSH
31233: LD_VAR 0 7
31237: PPUSH
31238: LD_VAR 0 8
31242: PPUSH
31243: CALL_OW 111
// exit ;
31247: POP
31248: POP
31249: GO 31255
// end ; end ;
31251: GO 31140
31253: POP
31254: POP
// end ;
31255: LD_VAR 0 3
31259: RET
// export function ScanBase ( side , base_area ) ; begin
31260: LD_INT 0
31262: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31263: LD_ADDR_VAR 0 3
31267: PUSH
31268: LD_VAR 0 2
31272: PPUSH
31273: LD_INT 81
31275: PUSH
31276: LD_VAR 0 1
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PPUSH
31285: CALL_OW 70
31289: ST_TO_ADDR
// end ;
31290: LD_VAR 0 3
31294: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31295: LD_INT 0
31297: PPUSH
31298: PPUSH
31299: PPUSH
31300: PPUSH
// result := false ;
31301: LD_ADDR_VAR 0 2
31305: PUSH
31306: LD_INT 0
31308: ST_TO_ADDR
// side := GetSide ( unit ) ;
31309: LD_ADDR_VAR 0 3
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 255
31323: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31324: LD_ADDR_VAR 0 4
31328: PUSH
31329: LD_VAR 0 1
31333: PPUSH
31334: CALL_OW 248
31338: ST_TO_ADDR
// case nat of 1 :
31339: LD_VAR 0 4
31343: PUSH
31344: LD_INT 1
31346: DOUBLE
31347: EQUAL
31348: IFTRUE 31352
31350: GO 31363
31352: POP
// tech := tech_lassight ; 2 :
31353: LD_ADDR_VAR 0 5
31357: PUSH
31358: LD_INT 12
31360: ST_TO_ADDR
31361: GO 31402
31363: LD_INT 2
31365: DOUBLE
31366: EQUAL
31367: IFTRUE 31371
31369: GO 31382
31371: POP
// tech := tech_mortar ; 3 :
31372: LD_ADDR_VAR 0 5
31376: PUSH
31377: LD_INT 41
31379: ST_TO_ADDR
31380: GO 31402
31382: LD_INT 3
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31401
31390: POP
// tech := tech_bazooka ; end ;
31391: LD_ADDR_VAR 0 5
31395: PUSH
31396: LD_INT 44
31398: ST_TO_ADDR
31399: GO 31402
31401: POP
// if Researched ( side , tech ) then
31402: LD_VAR 0 3
31406: PPUSH
31407: LD_VAR 0 5
31411: PPUSH
31412: CALL_OW 325
31416: IFFALSE 31443
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31418: LD_ADDR_VAR 0 2
31422: PUSH
31423: LD_INT 5
31425: PUSH
31426: LD_INT 8
31428: PUSH
31429: LD_INT 9
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: LIST
31436: PUSH
31437: LD_VAR 0 4
31441: ARRAY
31442: ST_TO_ADDR
// end ;
31443: LD_VAR 0 2
31447: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31448: LD_INT 0
31450: PPUSH
31451: PPUSH
31452: PPUSH
// if not mines then
31453: LD_VAR 0 2
31457: NOT
31458: IFFALSE 31462
// exit ;
31460: GO 31606
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31462: LD_ADDR_VAR 0 5
31466: PUSH
31467: LD_INT 81
31469: PUSH
31470: LD_VAR 0 1
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: PUSH
31479: LD_INT 3
31481: PUSH
31482: LD_INT 21
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: EMPTY
31493: LIST
31494: LIST
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PPUSH
31500: CALL_OW 69
31504: ST_TO_ADDR
// for i in mines do
31505: LD_ADDR_VAR 0 4
31509: PUSH
31510: LD_VAR 0 2
31514: PUSH
31515: FOR_IN
31516: IFFALSE 31604
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31518: LD_VAR 0 4
31522: PUSH
31523: LD_INT 1
31525: ARRAY
31526: PPUSH
31527: LD_VAR 0 4
31531: PUSH
31532: LD_INT 2
31534: ARRAY
31535: PPUSH
31536: CALL_OW 458
31540: NOT
31541: IFFALSE 31545
// continue ;
31543: GO 31515
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31545: LD_VAR 0 4
31549: PUSH
31550: LD_INT 1
31552: ARRAY
31553: PPUSH
31554: LD_VAR 0 4
31558: PUSH
31559: LD_INT 2
31561: ARRAY
31562: PPUSH
31563: CALL_OW 428
31567: PUSH
31568: LD_VAR 0 5
31572: IN
31573: IFFALSE 31602
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31575: LD_VAR 0 4
31579: PUSH
31580: LD_INT 1
31582: ARRAY
31583: PPUSH
31584: LD_VAR 0 4
31588: PUSH
31589: LD_INT 2
31591: ARRAY
31592: PPUSH
31593: LD_VAR 0 1
31597: PPUSH
31598: CALL_OW 456
// end ;
31602: GO 31515
31604: POP
31605: POP
// end ;
31606: LD_VAR 0 3
31610: RET
// export function Count ( array ) ; var i ; begin
31611: LD_INT 0
31613: PPUSH
31614: PPUSH
// result := 0 ;
31615: LD_ADDR_VAR 0 2
31619: PUSH
31620: LD_INT 0
31622: ST_TO_ADDR
// for i in array do
31623: LD_ADDR_VAR 0 3
31627: PUSH
31628: LD_VAR 0 1
31632: PUSH
31633: FOR_IN
31634: IFFALSE 31658
// if i then
31636: LD_VAR 0 3
31640: IFFALSE 31656
// result := result + 1 ;
31642: LD_ADDR_VAR 0 2
31646: PUSH
31647: LD_VAR 0 2
31651: PUSH
31652: LD_INT 1
31654: PLUS
31655: ST_TO_ADDR
31656: GO 31633
31658: POP
31659: POP
// end ;
31660: LD_VAR 0 2
31664: RET
// export function IsEmpty ( building ) ; begin
31665: LD_INT 0
31667: PPUSH
// if not building then
31668: LD_VAR 0 1
31672: NOT
31673: IFFALSE 31677
// exit ;
31675: GO 31720
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31677: LD_ADDR_VAR 0 2
31681: PUSH
31682: LD_VAR 0 1
31686: PUSH
31687: LD_INT 22
31689: PUSH
31690: LD_VAR 0 1
31694: PPUSH
31695: CALL_OW 255
31699: PUSH
31700: EMPTY
31701: LIST
31702: LIST
31703: PUSH
31704: LD_INT 58
31706: PUSH
31707: EMPTY
31708: LIST
31709: PUSH
31710: EMPTY
31711: LIST
31712: LIST
31713: PPUSH
31714: CALL_OW 69
31718: IN
31719: ST_TO_ADDR
// end ;
31720: LD_VAR 0 2
31724: RET
// export function IsNotFull ( building ) ; begin
31725: LD_INT 0
31727: PPUSH
// if not building then
31728: LD_VAR 0 1
31732: NOT
31733: IFFALSE 31737
// exit ;
31735: GO 31756
// result := UnitsInside ( building ) < 6 ;
31737: LD_ADDR_VAR 0 2
31741: PUSH
31742: LD_VAR 0 1
31746: PPUSH
31747: CALL_OW 313
31751: PUSH
31752: LD_INT 6
31754: LESS
31755: ST_TO_ADDR
// end ;
31756: LD_VAR 0 2
31760: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31761: LD_INT 0
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
// tmp := [ ] ;
31767: LD_ADDR_VAR 0 3
31771: PUSH
31772: EMPTY
31773: ST_TO_ADDR
// list := [ ] ;
31774: LD_ADDR_VAR 0 5
31778: PUSH
31779: EMPTY
31780: ST_TO_ADDR
// for i = 16 to 25 do
31781: LD_ADDR_VAR 0 4
31785: PUSH
31786: DOUBLE
31787: LD_INT 16
31789: DEC
31790: ST_TO_ADDR
31791: LD_INT 25
31793: PUSH
31794: FOR_TO
31795: IFFALSE 31868
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31797: LD_ADDR_VAR 0 3
31801: PUSH
31802: LD_VAR 0 3
31806: PUSH
31807: LD_INT 22
31809: PUSH
31810: LD_VAR 0 1
31814: PPUSH
31815: CALL_OW 255
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 91
31826: PUSH
31827: LD_VAR 0 1
31831: PUSH
31832: LD_INT 6
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 30
31842: PUSH
31843: LD_VAR 0 4
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: PUSH
31857: EMPTY
31858: LIST
31859: PPUSH
31860: CALL_OW 69
31864: ADD
31865: ST_TO_ADDR
31866: GO 31794
31868: POP
31869: POP
// for i = 1 to tmp do
31870: LD_ADDR_VAR 0 4
31874: PUSH
31875: DOUBLE
31876: LD_INT 1
31878: DEC
31879: ST_TO_ADDR
31880: LD_VAR 0 3
31884: PUSH
31885: FOR_TO
31886: IFFALSE 31974
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31888: LD_ADDR_VAR 0 5
31892: PUSH
31893: LD_VAR 0 5
31897: PUSH
31898: LD_VAR 0 3
31902: PUSH
31903: LD_VAR 0 4
31907: ARRAY
31908: PPUSH
31909: CALL_OW 266
31913: PUSH
31914: LD_VAR 0 3
31918: PUSH
31919: LD_VAR 0 4
31923: ARRAY
31924: PPUSH
31925: CALL_OW 250
31929: PUSH
31930: LD_VAR 0 3
31934: PUSH
31935: LD_VAR 0 4
31939: ARRAY
31940: PPUSH
31941: CALL_OW 251
31945: PUSH
31946: LD_VAR 0 3
31950: PUSH
31951: LD_VAR 0 4
31955: ARRAY
31956: PPUSH
31957: CALL_OW 254
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: ADD
31971: ST_TO_ADDR
31972: GO 31885
31974: POP
31975: POP
// result := list ;
31976: LD_ADDR_VAR 0 2
31980: PUSH
31981: LD_VAR 0 5
31985: ST_TO_ADDR
// end ;
31986: LD_VAR 0 2
31990: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31991: LD_INT 0
31993: PPUSH
31994: PPUSH
31995: PPUSH
31996: PPUSH
31997: PPUSH
31998: PPUSH
31999: PPUSH
// if not factory then
32000: LD_VAR 0 1
32004: NOT
32005: IFFALSE 32009
// exit ;
32007: GO 32602
// if control = control_apeman then
32009: LD_VAR 0 4
32013: PUSH
32014: LD_INT 5
32016: EQUAL
32017: IFFALSE 32126
// begin tmp := UnitsInside ( factory ) ;
32019: LD_ADDR_VAR 0 8
32023: PUSH
32024: LD_VAR 0 1
32028: PPUSH
32029: CALL_OW 313
32033: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32034: LD_VAR 0 8
32038: PPUSH
32039: LD_INT 25
32041: PUSH
32042: LD_INT 12
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PPUSH
32049: CALL_OW 72
32053: NOT
32054: IFFALSE 32064
// control := control_manual ;
32056: LD_ADDR_VAR 0 4
32060: PUSH
32061: LD_INT 1
32063: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32064: LD_ADDR_VAR 0 8
32068: PUSH
32069: LD_VAR 0 1
32073: PPUSH
32074: CALL 31761 0 1
32078: ST_TO_ADDR
// if tmp then
32079: LD_VAR 0 8
32083: IFFALSE 32126
// begin for i in tmp do
32085: LD_ADDR_VAR 0 7
32089: PUSH
32090: LD_VAR 0 8
32094: PUSH
32095: FOR_IN
32096: IFFALSE 32124
// if i [ 1 ] = b_ext_radio then
32098: LD_VAR 0 7
32102: PUSH
32103: LD_INT 1
32105: ARRAY
32106: PUSH
32107: LD_INT 22
32109: EQUAL
32110: IFFALSE 32122
// begin control := control_remote ;
32112: LD_ADDR_VAR 0 4
32116: PUSH
32117: LD_INT 2
32119: ST_TO_ADDR
// break ;
32120: GO 32124
// end ;
32122: GO 32095
32124: POP
32125: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32126: LD_VAR 0 1
32130: PPUSH
32131: LD_VAR 0 2
32135: PPUSH
32136: LD_VAR 0 3
32140: PPUSH
32141: LD_VAR 0 4
32145: PPUSH
32146: LD_VAR 0 5
32150: PPUSH
32151: CALL_OW 448
32155: IFFALSE 32190
// begin result := [ chassis , engine , control , weapon ] ;
32157: LD_ADDR_VAR 0 6
32161: PUSH
32162: LD_VAR 0 2
32166: PUSH
32167: LD_VAR 0 3
32171: PUSH
32172: LD_VAR 0 4
32176: PUSH
32177: LD_VAR 0 5
32181: PUSH
32182: EMPTY
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: ST_TO_ADDR
// exit ;
32188: GO 32602
// end ; _chassis := AvailableChassisList ( factory ) ;
32190: LD_ADDR_VAR 0 9
32194: PUSH
32195: LD_VAR 0 1
32199: PPUSH
32200: CALL_OW 475
32204: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32205: LD_ADDR_VAR 0 11
32209: PUSH
32210: LD_VAR 0 1
32214: PPUSH
32215: CALL_OW 476
32219: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32220: LD_ADDR_VAR 0 12
32224: PUSH
32225: LD_VAR 0 1
32229: PPUSH
32230: CALL_OW 477
32234: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32235: LD_ADDR_VAR 0 10
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 478
32249: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32250: LD_VAR 0 9
32254: NOT
32255: PUSH
32256: LD_VAR 0 11
32260: NOT
32261: OR
32262: PUSH
32263: LD_VAR 0 12
32267: NOT
32268: OR
32269: PUSH
32270: LD_VAR 0 10
32274: NOT
32275: OR
32276: IFFALSE 32311
// begin result := [ chassis , engine , control , weapon ] ;
32278: LD_ADDR_VAR 0 6
32282: PUSH
32283: LD_VAR 0 2
32287: PUSH
32288: LD_VAR 0 3
32292: PUSH
32293: LD_VAR 0 4
32297: PUSH
32298: LD_VAR 0 5
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: ST_TO_ADDR
// exit ;
32309: GO 32602
// end ; if not chassis in _chassis then
32311: LD_VAR 0 2
32315: PUSH
32316: LD_VAR 0 9
32320: IN
32321: NOT
32322: IFFALSE 32348
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32324: LD_ADDR_VAR 0 2
32328: PUSH
32329: LD_VAR 0 9
32333: PUSH
32334: LD_INT 1
32336: PPUSH
32337: LD_VAR 0 9
32341: PPUSH
32342: CALL_OW 12
32346: ARRAY
32347: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32348: LD_VAR 0 2
32352: PPUSH
32353: LD_VAR 0 3
32357: PPUSH
32358: CALL 32607 0 2
32362: NOT
32363: IFFALSE 32422
// repeat engine := _engine [ 1 ] ;
32365: LD_ADDR_VAR 0 3
32369: PUSH
32370: LD_VAR 0 11
32374: PUSH
32375: LD_INT 1
32377: ARRAY
32378: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32379: LD_ADDR_VAR 0 11
32383: PUSH
32384: LD_VAR 0 11
32388: PPUSH
32389: LD_INT 1
32391: PPUSH
32392: CALL_OW 3
32396: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32397: LD_VAR 0 2
32401: PPUSH
32402: LD_VAR 0 3
32406: PPUSH
32407: CALL 32607 0 2
32411: PUSH
32412: LD_VAR 0 11
32416: PUSH
32417: EMPTY
32418: EQUAL
32419: OR
32420: IFFALSE 32365
// if not control in _control then
32422: LD_VAR 0 4
32426: PUSH
32427: LD_VAR 0 12
32431: IN
32432: NOT
32433: IFFALSE 32459
// control := _control [ rand ( 1 , _control ) ] ;
32435: LD_ADDR_VAR 0 4
32439: PUSH
32440: LD_VAR 0 12
32444: PUSH
32445: LD_INT 1
32447: PPUSH
32448: LD_VAR 0 12
32452: PPUSH
32453: CALL_OW 12
32457: ARRAY
32458: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32459: LD_VAR 0 2
32463: PPUSH
32464: LD_VAR 0 5
32468: PPUSH
32469: CALL 32827 0 2
32473: NOT
32474: IFFALSE 32533
// repeat weapon := _weapon [ 1 ] ;
32476: LD_ADDR_VAR 0 5
32480: PUSH
32481: LD_VAR 0 10
32485: PUSH
32486: LD_INT 1
32488: ARRAY
32489: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32490: LD_ADDR_VAR 0 10
32494: PUSH
32495: LD_VAR 0 10
32499: PPUSH
32500: LD_INT 1
32502: PPUSH
32503: CALL_OW 3
32507: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32508: LD_VAR 0 2
32512: PPUSH
32513: LD_VAR 0 5
32517: PPUSH
32518: CALL 32827 0 2
32522: PUSH
32523: LD_VAR 0 10
32527: PUSH
32528: EMPTY
32529: EQUAL
32530: OR
32531: IFFALSE 32476
// result := [ ] ;
32533: LD_ADDR_VAR 0 6
32537: PUSH
32538: EMPTY
32539: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32540: LD_VAR 0 1
32544: PPUSH
32545: LD_VAR 0 2
32549: PPUSH
32550: LD_VAR 0 3
32554: PPUSH
32555: LD_VAR 0 4
32559: PPUSH
32560: LD_VAR 0 5
32564: PPUSH
32565: CALL_OW 448
32569: IFFALSE 32602
// result := [ chassis , engine , control , weapon ] ;
32571: LD_ADDR_VAR 0 6
32575: PUSH
32576: LD_VAR 0 2
32580: PUSH
32581: LD_VAR 0 3
32585: PUSH
32586: LD_VAR 0 4
32590: PUSH
32591: LD_VAR 0 5
32595: PUSH
32596: EMPTY
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: ST_TO_ADDR
// end ;
32602: LD_VAR 0 6
32606: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32607: LD_INT 0
32609: PPUSH
// if not chassis or not engine then
32610: LD_VAR 0 1
32614: NOT
32615: PUSH
32616: LD_VAR 0 2
32620: NOT
32621: OR
32622: IFFALSE 32626
// exit ;
32624: GO 32822
// case engine of engine_solar :
32626: LD_VAR 0 2
32630: PUSH
32631: LD_INT 2
32633: DOUBLE
32634: EQUAL
32635: IFTRUE 32639
32637: GO 32677
32639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32640: LD_ADDR_VAR 0 3
32644: PUSH
32645: LD_INT 11
32647: PUSH
32648: LD_INT 12
32650: PUSH
32651: LD_INT 13
32653: PUSH
32654: LD_INT 14
32656: PUSH
32657: LD_INT 1
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: LD_INT 3
32665: PUSH
32666: EMPTY
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: ST_TO_ADDR
32675: GO 32806
32677: LD_INT 1
32679: DOUBLE
32680: EQUAL
32681: IFTRUE 32685
32683: GO 32747
32685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32686: LD_ADDR_VAR 0 3
32690: PUSH
32691: LD_INT 11
32693: PUSH
32694: LD_INT 12
32696: PUSH
32697: LD_INT 13
32699: PUSH
32700: LD_INT 14
32702: PUSH
32703: LD_INT 1
32705: PUSH
32706: LD_INT 2
32708: PUSH
32709: LD_INT 3
32711: PUSH
32712: LD_INT 4
32714: PUSH
32715: LD_INT 5
32717: PUSH
32718: LD_INT 21
32720: PUSH
32721: LD_INT 23
32723: PUSH
32724: LD_INT 22
32726: PUSH
32727: LD_INT 24
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: ST_TO_ADDR
32745: GO 32806
32747: LD_INT 3
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32805
32755: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32756: LD_ADDR_VAR 0 3
32760: PUSH
32761: LD_INT 13
32763: PUSH
32764: LD_INT 14
32766: PUSH
32767: LD_INT 2
32769: PUSH
32770: LD_INT 3
32772: PUSH
32773: LD_INT 4
32775: PUSH
32776: LD_INT 5
32778: PUSH
32779: LD_INT 21
32781: PUSH
32782: LD_INT 22
32784: PUSH
32785: LD_INT 23
32787: PUSH
32788: LD_INT 24
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: ST_TO_ADDR
32803: GO 32806
32805: POP
// result := ( chassis in result ) ;
32806: LD_ADDR_VAR 0 3
32810: PUSH
32811: LD_VAR 0 1
32815: PUSH
32816: LD_VAR 0 3
32820: IN
32821: ST_TO_ADDR
// end ;
32822: LD_VAR 0 3
32826: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32827: LD_INT 0
32829: PPUSH
// if not chassis or not weapon then
32830: LD_VAR 0 1
32834: NOT
32835: PUSH
32836: LD_VAR 0 2
32840: NOT
32841: OR
32842: IFFALSE 32846
// exit ;
32844: GO 33872
// case weapon of us_machine_gun :
32846: LD_VAR 0 2
32850: PUSH
32851: LD_INT 2
32853: DOUBLE
32854: EQUAL
32855: IFTRUE 32859
32857: GO 32889
32859: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32860: LD_ADDR_VAR 0 3
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 2
32870: PUSH
32871: LD_INT 3
32873: PUSH
32874: LD_INT 4
32876: PUSH
32877: LD_INT 5
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
32887: GO 33856
32889: LD_INT 3
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 32927
32897: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32898: LD_ADDR_VAR 0 3
32902: PUSH
32903: LD_INT 1
32905: PUSH
32906: LD_INT 2
32908: PUSH
32909: LD_INT 3
32911: PUSH
32912: LD_INT 4
32914: PUSH
32915: LD_INT 5
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
32925: GO 33856
32927: LD_INT 11
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 32965
32935: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32936: LD_ADDR_VAR 0 3
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: LD_INT 4
32952: PUSH
32953: LD_INT 5
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: ST_TO_ADDR
32963: GO 33856
32965: LD_INT 4
32967: DOUBLE
32968: EQUAL
32969: IFTRUE 32973
32971: GO 32999
32973: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32974: LD_ADDR_VAR 0 3
32978: PUSH
32979: LD_INT 2
32981: PUSH
32982: LD_INT 3
32984: PUSH
32985: LD_INT 4
32987: PUSH
32988: LD_INT 5
32990: PUSH
32991: EMPTY
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: ST_TO_ADDR
32997: GO 33856
32999: LD_INT 5
33001: DOUBLE
33002: EQUAL
33003: IFTRUE 33007
33005: GO 33033
33007: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33008: LD_ADDR_VAR 0 3
33012: PUSH
33013: LD_INT 2
33015: PUSH
33016: LD_INT 3
33018: PUSH
33019: LD_INT 4
33021: PUSH
33022: LD_INT 5
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: ST_TO_ADDR
33031: GO 33856
33033: LD_INT 9
33035: DOUBLE
33036: EQUAL
33037: IFTRUE 33041
33039: GO 33067
33041: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33042: LD_ADDR_VAR 0 3
33046: PUSH
33047: LD_INT 2
33049: PUSH
33050: LD_INT 3
33052: PUSH
33053: LD_INT 4
33055: PUSH
33056: LD_INT 5
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: ST_TO_ADDR
33065: GO 33856
33067: LD_INT 7
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33101
33075: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: LD_INT 2
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: LD_INT 4
33089: PUSH
33090: LD_INT 5
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: ST_TO_ADDR
33099: GO 33856
33101: LD_INT 12
33103: DOUBLE
33104: EQUAL
33105: IFTRUE 33109
33107: GO 33135
33109: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33110: LD_ADDR_VAR 0 3
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: LD_INT 3
33120: PUSH
33121: LD_INT 4
33123: PUSH
33124: LD_INT 5
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: ST_TO_ADDR
33133: GO 33856
33135: LD_INT 13
33137: DOUBLE
33138: EQUAL
33139: IFTRUE 33143
33141: GO 33169
33143: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33144: LD_ADDR_VAR 0 3
33148: PUSH
33149: LD_INT 2
33151: PUSH
33152: LD_INT 3
33154: PUSH
33155: LD_INT 4
33157: PUSH
33158: LD_INT 5
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: ST_TO_ADDR
33167: GO 33856
33169: LD_INT 14
33171: DOUBLE
33172: EQUAL
33173: IFTRUE 33177
33175: GO 33195
33177: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33178: LD_ADDR_VAR 0 3
33182: PUSH
33183: LD_INT 4
33185: PUSH
33186: LD_INT 5
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: ST_TO_ADDR
33193: GO 33856
33195: LD_INT 6
33197: DOUBLE
33198: EQUAL
33199: IFTRUE 33203
33201: GO 33221
33203: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33204: LD_ADDR_VAR 0 3
33208: PUSH
33209: LD_INT 4
33211: PUSH
33212: LD_INT 5
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: ST_TO_ADDR
33219: GO 33856
33221: LD_INT 10
33223: DOUBLE
33224: EQUAL
33225: IFTRUE 33229
33227: GO 33247
33229: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33230: LD_ADDR_VAR 0 3
33234: PUSH
33235: LD_INT 4
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: ST_TO_ADDR
33245: GO 33856
33247: LD_INT 22
33249: DOUBLE
33250: EQUAL
33251: IFTRUE 33255
33253: GO 33281
33255: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33256: LD_ADDR_VAR 0 3
33260: PUSH
33261: LD_INT 11
33263: PUSH
33264: LD_INT 12
33266: PUSH
33267: LD_INT 13
33269: PUSH
33270: LD_INT 14
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: ST_TO_ADDR
33279: GO 33856
33281: LD_INT 23
33283: DOUBLE
33284: EQUAL
33285: IFTRUE 33289
33287: GO 33315
33289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33290: LD_ADDR_VAR 0 3
33294: PUSH
33295: LD_INT 11
33297: PUSH
33298: LD_INT 12
33300: PUSH
33301: LD_INT 13
33303: PUSH
33304: LD_INT 14
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
33313: GO 33856
33315: LD_INT 24
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33349
33323: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_INT 11
33331: PUSH
33332: LD_INT 12
33334: PUSH
33335: LD_INT 13
33337: PUSH
33338: LD_INT 14
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: ST_TO_ADDR
33347: GO 33856
33349: LD_INT 30
33351: DOUBLE
33352: EQUAL
33353: IFTRUE 33357
33355: GO 33383
33357: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_INT 11
33365: PUSH
33366: LD_INT 12
33368: PUSH
33369: LD_INT 13
33371: PUSH
33372: LD_INT 14
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: ST_TO_ADDR
33381: GO 33856
33383: LD_INT 25
33385: DOUBLE
33386: EQUAL
33387: IFTRUE 33391
33389: GO 33409
33391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33392: LD_ADDR_VAR 0 3
33396: PUSH
33397: LD_INT 13
33399: PUSH
33400: LD_INT 14
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: ST_TO_ADDR
33407: GO 33856
33409: LD_INT 27
33411: DOUBLE
33412: EQUAL
33413: IFTRUE 33417
33415: GO 33435
33417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33418: LD_ADDR_VAR 0 3
33422: PUSH
33423: LD_INT 13
33425: PUSH
33426: LD_INT 14
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: ST_TO_ADDR
33433: GO 33856
33435: LD_INT 28
33437: DOUBLE
33438: EQUAL
33439: IFTRUE 33443
33441: GO 33461
33443: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33444: LD_ADDR_VAR 0 3
33448: PUSH
33449: LD_INT 13
33451: PUSH
33452: LD_INT 14
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: ST_TO_ADDR
33459: GO 33856
33461: LD_INT 29
33463: DOUBLE
33464: EQUAL
33465: IFTRUE 33469
33467: GO 33487
33469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33470: LD_ADDR_VAR 0 3
33474: PUSH
33475: LD_INT 13
33477: PUSH
33478: LD_INT 14
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: ST_TO_ADDR
33485: GO 33856
33487: LD_INT 31
33489: DOUBLE
33490: EQUAL
33491: IFTRUE 33495
33493: GO 33513
33495: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33496: LD_ADDR_VAR 0 3
33500: PUSH
33501: LD_INT 13
33503: PUSH
33504: LD_INT 14
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: ST_TO_ADDR
33511: GO 33856
33513: LD_INT 26
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33539
33521: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33522: LD_ADDR_VAR 0 3
33526: PUSH
33527: LD_INT 13
33529: PUSH
33530: LD_INT 14
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: ST_TO_ADDR
33537: GO 33856
33539: LD_INT 42
33541: DOUBLE
33542: EQUAL
33543: IFTRUE 33547
33545: GO 33573
33547: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33548: LD_ADDR_VAR 0 3
33552: PUSH
33553: LD_INT 21
33555: PUSH
33556: LD_INT 22
33558: PUSH
33559: LD_INT 23
33561: PUSH
33562: LD_INT 24
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: ST_TO_ADDR
33571: GO 33856
33573: LD_INT 43
33575: DOUBLE
33576: EQUAL
33577: IFTRUE 33581
33579: GO 33607
33581: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33582: LD_ADDR_VAR 0 3
33586: PUSH
33587: LD_INT 21
33589: PUSH
33590: LD_INT 22
33592: PUSH
33593: LD_INT 23
33595: PUSH
33596: LD_INT 24
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: ST_TO_ADDR
33605: GO 33856
33607: LD_INT 44
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33615
33613: GO 33641
33615: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33616: LD_ADDR_VAR 0 3
33620: PUSH
33621: LD_INT 21
33623: PUSH
33624: LD_INT 22
33626: PUSH
33627: LD_INT 23
33629: PUSH
33630: LD_INT 24
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
33639: GO 33856
33641: LD_INT 45
33643: DOUBLE
33644: EQUAL
33645: IFTRUE 33649
33647: GO 33675
33649: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33650: LD_ADDR_VAR 0 3
33654: PUSH
33655: LD_INT 21
33657: PUSH
33658: LD_INT 22
33660: PUSH
33661: LD_INT 23
33663: PUSH
33664: LD_INT 24
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: ST_TO_ADDR
33673: GO 33856
33675: LD_INT 49
33677: DOUBLE
33678: EQUAL
33679: IFTRUE 33683
33681: GO 33709
33683: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_INT 21
33691: PUSH
33692: LD_INT 22
33694: PUSH
33695: LD_INT 23
33697: PUSH
33698: LD_INT 24
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
33707: GO 33856
33709: LD_INT 51
33711: DOUBLE
33712: EQUAL
33713: IFTRUE 33717
33715: GO 33743
33717: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33718: LD_ADDR_VAR 0 3
33722: PUSH
33723: LD_INT 21
33725: PUSH
33726: LD_INT 22
33728: PUSH
33729: LD_INT 23
33731: PUSH
33732: LD_INT 24
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: ST_TO_ADDR
33741: GO 33856
33743: LD_INT 52
33745: DOUBLE
33746: EQUAL
33747: IFTRUE 33751
33749: GO 33777
33751: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33752: LD_ADDR_VAR 0 3
33756: PUSH
33757: LD_INT 21
33759: PUSH
33760: LD_INT 22
33762: PUSH
33763: LD_INT 23
33765: PUSH
33766: LD_INT 24
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: ST_TO_ADDR
33775: GO 33856
33777: LD_INT 53
33779: DOUBLE
33780: EQUAL
33781: IFTRUE 33785
33783: GO 33803
33785: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33786: LD_ADDR_VAR 0 3
33790: PUSH
33791: LD_INT 23
33793: PUSH
33794: LD_INT 24
33796: PUSH
33797: EMPTY
33798: LIST
33799: LIST
33800: ST_TO_ADDR
33801: GO 33856
33803: LD_INT 46
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33829
33811: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33812: LD_ADDR_VAR 0 3
33816: PUSH
33817: LD_INT 23
33819: PUSH
33820: LD_INT 24
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: ST_TO_ADDR
33827: GO 33856
33829: LD_INT 47
33831: DOUBLE
33832: EQUAL
33833: IFTRUE 33837
33835: GO 33855
33837: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_INT 23
33845: PUSH
33846: LD_INT 24
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: ST_TO_ADDR
33853: GO 33856
33855: POP
// result := ( chassis in result ) ;
33856: LD_ADDR_VAR 0 3
33860: PUSH
33861: LD_VAR 0 1
33865: PUSH
33866: LD_VAR 0 3
33870: IN
33871: ST_TO_ADDR
// end ;
33872: LD_VAR 0 3
33876: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33877: LD_INT 0
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
// result := array ;
33886: LD_ADDR_VAR 0 5
33890: PUSH
33891: LD_VAR 0 1
33895: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33896: LD_VAR 0 1
33900: NOT
33901: PUSH
33902: LD_VAR 0 2
33906: NOT
33907: OR
33908: PUSH
33909: LD_VAR 0 3
33913: NOT
33914: OR
33915: PUSH
33916: LD_VAR 0 2
33920: PUSH
33921: LD_VAR 0 1
33925: GREATER
33926: OR
33927: PUSH
33928: LD_VAR 0 3
33932: PUSH
33933: LD_VAR 0 1
33937: GREATER
33938: OR
33939: IFFALSE 33943
// exit ;
33941: GO 34239
// if direction then
33943: LD_VAR 0 4
33947: IFFALSE 34011
// begin d := 1 ;
33949: LD_ADDR_VAR 0 9
33953: PUSH
33954: LD_INT 1
33956: ST_TO_ADDR
// if i_from > i_to then
33957: LD_VAR 0 2
33961: PUSH
33962: LD_VAR 0 3
33966: GREATER
33967: IFFALSE 33993
// length := ( array - i_from ) + i_to else
33969: LD_ADDR_VAR 0 11
33973: PUSH
33974: LD_VAR 0 1
33978: PUSH
33979: LD_VAR 0 2
33983: MINUS
33984: PUSH
33985: LD_VAR 0 3
33989: PLUS
33990: ST_TO_ADDR
33991: GO 34009
// length := i_to - i_from ;
33993: LD_ADDR_VAR 0 11
33997: PUSH
33998: LD_VAR 0 3
34002: PUSH
34003: LD_VAR 0 2
34007: MINUS
34008: ST_TO_ADDR
// end else
34009: GO 34072
// begin d := - 1 ;
34011: LD_ADDR_VAR 0 9
34015: PUSH
34016: LD_INT 1
34018: NEG
34019: ST_TO_ADDR
// if i_from > i_to then
34020: LD_VAR 0 2
34024: PUSH
34025: LD_VAR 0 3
34029: GREATER
34030: IFFALSE 34050
// length := i_from - i_to else
34032: LD_ADDR_VAR 0 11
34036: PUSH
34037: LD_VAR 0 2
34041: PUSH
34042: LD_VAR 0 3
34046: MINUS
34047: ST_TO_ADDR
34048: GO 34072
// length := ( array - i_to ) + i_from ;
34050: LD_ADDR_VAR 0 11
34054: PUSH
34055: LD_VAR 0 1
34059: PUSH
34060: LD_VAR 0 3
34064: MINUS
34065: PUSH
34066: LD_VAR 0 2
34070: PLUS
34071: ST_TO_ADDR
// end ; if not length then
34072: LD_VAR 0 11
34076: NOT
34077: IFFALSE 34081
// exit ;
34079: GO 34239
// tmp := array ;
34081: LD_ADDR_VAR 0 10
34085: PUSH
34086: LD_VAR 0 1
34090: ST_TO_ADDR
// for i = 1 to length do
34091: LD_ADDR_VAR 0 6
34095: PUSH
34096: DOUBLE
34097: LD_INT 1
34099: DEC
34100: ST_TO_ADDR
34101: LD_VAR 0 11
34105: PUSH
34106: FOR_TO
34107: IFFALSE 34227
// begin for j = 1 to array do
34109: LD_ADDR_VAR 0 7
34113: PUSH
34114: DOUBLE
34115: LD_INT 1
34117: DEC
34118: ST_TO_ADDR
34119: LD_VAR 0 1
34123: PUSH
34124: FOR_TO
34125: IFFALSE 34213
// begin k := j + d ;
34127: LD_ADDR_VAR 0 8
34131: PUSH
34132: LD_VAR 0 7
34136: PUSH
34137: LD_VAR 0 9
34141: PLUS
34142: ST_TO_ADDR
// if k > array then
34143: LD_VAR 0 8
34147: PUSH
34148: LD_VAR 0 1
34152: GREATER
34153: IFFALSE 34163
// k := 1 ;
34155: LD_ADDR_VAR 0 8
34159: PUSH
34160: LD_INT 1
34162: ST_TO_ADDR
// if not k then
34163: LD_VAR 0 8
34167: NOT
34168: IFFALSE 34180
// k := array ;
34170: LD_ADDR_VAR 0 8
34174: PUSH
34175: LD_VAR 0 1
34179: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34180: LD_ADDR_VAR 0 10
34184: PUSH
34185: LD_VAR 0 10
34189: PPUSH
34190: LD_VAR 0 8
34194: PPUSH
34195: LD_VAR 0 1
34199: PUSH
34200: LD_VAR 0 7
34204: ARRAY
34205: PPUSH
34206: CALL_OW 1
34210: ST_TO_ADDR
// end ;
34211: GO 34124
34213: POP
34214: POP
// array := tmp ;
34215: LD_ADDR_VAR 0 1
34219: PUSH
34220: LD_VAR 0 10
34224: ST_TO_ADDR
// end ;
34225: GO 34106
34227: POP
34228: POP
// result := array ;
34229: LD_ADDR_VAR 0 5
34233: PUSH
34234: LD_VAR 0 1
34238: ST_TO_ADDR
// end ;
34239: LD_VAR 0 5
34243: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34244: LD_INT 0
34246: PPUSH
34247: PPUSH
// result := 0 ;
34248: LD_ADDR_VAR 0 3
34252: PUSH
34253: LD_INT 0
34255: ST_TO_ADDR
// if not array or not value in array then
34256: LD_VAR 0 1
34260: NOT
34261: PUSH
34262: LD_VAR 0 2
34266: PUSH
34267: LD_VAR 0 1
34271: IN
34272: NOT
34273: OR
34274: IFFALSE 34278
// exit ;
34276: GO 34332
// for i = 1 to array do
34278: LD_ADDR_VAR 0 4
34282: PUSH
34283: DOUBLE
34284: LD_INT 1
34286: DEC
34287: ST_TO_ADDR
34288: LD_VAR 0 1
34292: PUSH
34293: FOR_TO
34294: IFFALSE 34330
// if value = array [ i ] then
34296: LD_VAR 0 2
34300: PUSH
34301: LD_VAR 0 1
34305: PUSH
34306: LD_VAR 0 4
34310: ARRAY
34311: EQUAL
34312: IFFALSE 34328
// begin result := i ;
34314: LD_ADDR_VAR 0 3
34318: PUSH
34319: LD_VAR 0 4
34323: ST_TO_ADDR
// exit ;
34324: POP
34325: POP
34326: GO 34332
// end ;
34328: GO 34293
34330: POP
34331: POP
// end ;
34332: LD_VAR 0 3
34336: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34337: LD_INT 0
34339: PPUSH
// vc_chassis := chassis ;
34340: LD_ADDR_OWVAR 37
34344: PUSH
34345: LD_VAR 0 1
34349: ST_TO_ADDR
// vc_engine := engine ;
34350: LD_ADDR_OWVAR 39
34354: PUSH
34355: LD_VAR 0 2
34359: ST_TO_ADDR
// vc_control := control ;
34360: LD_ADDR_OWVAR 38
34364: PUSH
34365: LD_VAR 0 3
34369: ST_TO_ADDR
// vc_weapon := weapon ;
34370: LD_ADDR_OWVAR 40
34374: PUSH
34375: LD_VAR 0 4
34379: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34380: LD_ADDR_OWVAR 41
34384: PUSH
34385: LD_VAR 0 5
34389: ST_TO_ADDR
// end ;
34390: LD_VAR 0 6
34394: RET
// export function WantPlant ( unit ) ; var task ; begin
34395: LD_INT 0
34397: PPUSH
34398: PPUSH
// result := false ;
34399: LD_ADDR_VAR 0 2
34403: PUSH
34404: LD_INT 0
34406: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34407: LD_ADDR_VAR 0 3
34411: PUSH
34412: LD_VAR 0 1
34416: PPUSH
34417: CALL_OW 437
34421: ST_TO_ADDR
// if task then
34422: LD_VAR 0 3
34426: IFFALSE 34454
// if task [ 1 ] [ 1 ] = p then
34428: LD_VAR 0 3
34432: PUSH
34433: LD_INT 1
34435: ARRAY
34436: PUSH
34437: LD_INT 1
34439: ARRAY
34440: PUSH
34441: LD_STRING p
34443: EQUAL
34444: IFFALSE 34454
// result := true ;
34446: LD_ADDR_VAR 0 2
34450: PUSH
34451: LD_INT 1
34453: ST_TO_ADDR
// end ;
34454: LD_VAR 0 2
34458: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34459: LD_INT 0
34461: PPUSH
34462: PPUSH
34463: PPUSH
34464: PPUSH
// if pos < 1 then
34465: LD_VAR 0 2
34469: PUSH
34470: LD_INT 1
34472: LESS
34473: IFFALSE 34477
// exit ;
34475: GO 34780
// if pos = 1 then
34477: LD_VAR 0 2
34481: PUSH
34482: LD_INT 1
34484: EQUAL
34485: IFFALSE 34518
// result := Replace ( arr , pos [ 1 ] , value ) else
34487: LD_ADDR_VAR 0 4
34491: PUSH
34492: LD_VAR 0 1
34496: PPUSH
34497: LD_VAR 0 2
34501: PUSH
34502: LD_INT 1
34504: ARRAY
34505: PPUSH
34506: LD_VAR 0 3
34510: PPUSH
34511: CALL_OW 1
34515: ST_TO_ADDR
34516: GO 34780
// begin tmp := arr ;
34518: LD_ADDR_VAR 0 6
34522: PUSH
34523: LD_VAR 0 1
34527: ST_TO_ADDR
// s_arr := [ tmp ] ;
34528: LD_ADDR_VAR 0 7
34532: PUSH
34533: LD_VAR 0 6
34537: PUSH
34538: EMPTY
34539: LIST
34540: ST_TO_ADDR
// for i = 1 to pos - 1 do
34541: LD_ADDR_VAR 0 5
34545: PUSH
34546: DOUBLE
34547: LD_INT 1
34549: DEC
34550: ST_TO_ADDR
34551: LD_VAR 0 2
34555: PUSH
34556: LD_INT 1
34558: MINUS
34559: PUSH
34560: FOR_TO
34561: IFFALSE 34606
// begin tmp := tmp [ pos [ i ] ] ;
34563: LD_ADDR_VAR 0 6
34567: PUSH
34568: LD_VAR 0 6
34572: PUSH
34573: LD_VAR 0 2
34577: PUSH
34578: LD_VAR 0 5
34582: ARRAY
34583: ARRAY
34584: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34585: LD_ADDR_VAR 0 7
34589: PUSH
34590: LD_VAR 0 7
34594: PUSH
34595: LD_VAR 0 6
34599: PUSH
34600: EMPTY
34601: LIST
34602: ADD
34603: ST_TO_ADDR
// end ;
34604: GO 34560
34606: POP
34607: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34608: LD_ADDR_VAR 0 6
34612: PUSH
34613: LD_VAR 0 6
34617: PPUSH
34618: LD_VAR 0 2
34622: PUSH
34623: LD_VAR 0 2
34627: ARRAY
34628: PPUSH
34629: LD_VAR 0 3
34633: PPUSH
34634: CALL_OW 1
34638: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34639: LD_ADDR_VAR 0 7
34643: PUSH
34644: LD_VAR 0 7
34648: PPUSH
34649: LD_VAR 0 7
34653: PPUSH
34654: LD_VAR 0 6
34658: PPUSH
34659: CALL_OW 1
34663: ST_TO_ADDR
// for i = s_arr downto 2 do
34664: LD_ADDR_VAR 0 5
34668: PUSH
34669: DOUBLE
34670: LD_VAR 0 7
34674: INC
34675: ST_TO_ADDR
34676: LD_INT 2
34678: PUSH
34679: FOR_DOWNTO
34680: IFFALSE 34764
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34682: LD_ADDR_VAR 0 6
34686: PUSH
34687: LD_VAR 0 7
34691: PUSH
34692: LD_VAR 0 5
34696: PUSH
34697: LD_INT 1
34699: MINUS
34700: ARRAY
34701: PPUSH
34702: LD_VAR 0 2
34706: PUSH
34707: LD_VAR 0 5
34711: PUSH
34712: LD_INT 1
34714: MINUS
34715: ARRAY
34716: PPUSH
34717: LD_VAR 0 7
34721: PUSH
34722: LD_VAR 0 5
34726: ARRAY
34727: PPUSH
34728: CALL_OW 1
34732: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34733: LD_ADDR_VAR 0 7
34737: PUSH
34738: LD_VAR 0 7
34742: PPUSH
34743: LD_VAR 0 5
34747: PUSH
34748: LD_INT 1
34750: MINUS
34751: PPUSH
34752: LD_VAR 0 6
34756: PPUSH
34757: CALL_OW 1
34761: ST_TO_ADDR
// end ;
34762: GO 34679
34764: POP
34765: POP
// result := s_arr [ 1 ] ;
34766: LD_ADDR_VAR 0 4
34770: PUSH
34771: LD_VAR 0 7
34775: PUSH
34776: LD_INT 1
34778: ARRAY
34779: ST_TO_ADDR
// end ; end ;
34780: LD_VAR 0 4
34784: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34785: LD_INT 0
34787: PPUSH
34788: PPUSH
// if not list then
34789: LD_VAR 0 1
34793: NOT
34794: IFFALSE 34798
// exit ;
34796: GO 34889
// i := list [ pos1 ] ;
34798: LD_ADDR_VAR 0 5
34802: PUSH
34803: LD_VAR 0 1
34807: PUSH
34808: LD_VAR 0 2
34812: ARRAY
34813: ST_TO_ADDR
// if not i then
34814: LD_VAR 0 5
34818: NOT
34819: IFFALSE 34823
// exit ;
34821: GO 34889
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34823: LD_ADDR_VAR 0 1
34827: PUSH
34828: LD_VAR 0 1
34832: PPUSH
34833: LD_VAR 0 2
34837: PPUSH
34838: LD_VAR 0 1
34842: PUSH
34843: LD_VAR 0 3
34847: ARRAY
34848: PPUSH
34849: CALL_OW 1
34853: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34854: LD_ADDR_VAR 0 1
34858: PUSH
34859: LD_VAR 0 1
34863: PPUSH
34864: LD_VAR 0 3
34868: PPUSH
34869: LD_VAR 0 5
34873: PPUSH
34874: CALL_OW 1
34878: ST_TO_ADDR
// result := list ;
34879: LD_ADDR_VAR 0 4
34883: PUSH
34884: LD_VAR 0 1
34888: ST_TO_ADDR
// end ;
34889: LD_VAR 0 4
34893: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34894: LD_INT 0
34896: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34897: LD_ADDR_VAR 0 5
34901: PUSH
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 250
34911: PPUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 251
34921: PPUSH
34922: LD_VAR 0 2
34926: PPUSH
34927: LD_VAR 0 3
34931: PPUSH
34932: LD_VAR 0 4
34936: PPUSH
34937: CALL 34947 0 5
34941: ST_TO_ADDR
// end ;
34942: LD_VAR 0 5
34946: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
// if not list then
34953: LD_VAR 0 3
34957: NOT
34958: IFFALSE 34962
// exit ;
34960: GO 35350
// result := [ ] ;
34962: LD_ADDR_VAR 0 6
34966: PUSH
34967: EMPTY
34968: ST_TO_ADDR
// for i in list do
34969: LD_ADDR_VAR 0 7
34973: PUSH
34974: LD_VAR 0 3
34978: PUSH
34979: FOR_IN
34980: IFFALSE 35182
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34982: LD_ADDR_VAR 0 9
34986: PUSH
34987: LD_VAR 0 7
34991: PPUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: CALL_OW 297
35006: ST_TO_ADDR
// if not result then
35007: LD_VAR 0 6
35011: NOT
35012: IFFALSE 35038
// result := [ [ i , tmp ] ] else
35014: LD_ADDR_VAR 0 6
35018: PUSH
35019: LD_VAR 0 7
35023: PUSH
35024: LD_VAR 0 9
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: EMPTY
35034: LIST
35035: ST_TO_ADDR
35036: GO 35180
// begin if result [ result ] [ 2 ] < tmp then
35038: LD_VAR 0 6
35042: PUSH
35043: LD_VAR 0 6
35047: ARRAY
35048: PUSH
35049: LD_INT 2
35051: ARRAY
35052: PUSH
35053: LD_VAR 0 9
35057: LESS
35058: IFFALSE 35100
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35060: LD_ADDR_VAR 0 6
35064: PUSH
35065: LD_VAR 0 6
35069: PPUSH
35070: LD_VAR 0 6
35074: PUSH
35075: LD_INT 1
35077: PLUS
35078: PPUSH
35079: LD_VAR 0 7
35083: PUSH
35084: LD_VAR 0 9
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PPUSH
35093: CALL_OW 2
35097: ST_TO_ADDR
35098: GO 35180
// for j = 1 to result do
35100: LD_ADDR_VAR 0 8
35104: PUSH
35105: DOUBLE
35106: LD_INT 1
35108: DEC
35109: ST_TO_ADDR
35110: LD_VAR 0 6
35114: PUSH
35115: FOR_TO
35116: IFFALSE 35178
// begin if tmp < result [ j ] [ 2 ] then
35118: LD_VAR 0 9
35122: PUSH
35123: LD_VAR 0 6
35127: PUSH
35128: LD_VAR 0 8
35132: ARRAY
35133: PUSH
35134: LD_INT 2
35136: ARRAY
35137: LESS
35138: IFFALSE 35176
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35140: LD_ADDR_VAR 0 6
35144: PUSH
35145: LD_VAR 0 6
35149: PPUSH
35150: LD_VAR 0 8
35154: PPUSH
35155: LD_VAR 0 7
35159: PUSH
35160: LD_VAR 0 9
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PPUSH
35169: CALL_OW 2
35173: ST_TO_ADDR
// break ;
35174: GO 35178
// end ; end ;
35176: GO 35115
35178: POP
35179: POP
// end ; end ;
35180: GO 34979
35182: POP
35183: POP
// if result and not asc then
35184: LD_VAR 0 6
35188: PUSH
35189: LD_VAR 0 4
35193: NOT
35194: AND
35195: IFFALSE 35270
// begin tmp := result ;
35197: LD_ADDR_VAR 0 9
35201: PUSH
35202: LD_VAR 0 6
35206: ST_TO_ADDR
// for i = tmp downto 1 do
35207: LD_ADDR_VAR 0 7
35211: PUSH
35212: DOUBLE
35213: LD_VAR 0 9
35217: INC
35218: ST_TO_ADDR
35219: LD_INT 1
35221: PUSH
35222: FOR_DOWNTO
35223: IFFALSE 35268
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35225: LD_ADDR_VAR 0 6
35229: PUSH
35230: LD_VAR 0 6
35234: PPUSH
35235: LD_VAR 0 9
35239: PUSH
35240: LD_VAR 0 7
35244: MINUS
35245: PUSH
35246: LD_INT 1
35248: PLUS
35249: PPUSH
35250: LD_VAR 0 9
35254: PUSH
35255: LD_VAR 0 7
35259: ARRAY
35260: PPUSH
35261: CALL_OW 1
35265: ST_TO_ADDR
35266: GO 35222
35268: POP
35269: POP
// end ; tmp := [ ] ;
35270: LD_ADDR_VAR 0 9
35274: PUSH
35275: EMPTY
35276: ST_TO_ADDR
// if mode then
35277: LD_VAR 0 5
35281: IFFALSE 35350
// begin for i = 1 to result do
35283: LD_ADDR_VAR 0 7
35287: PUSH
35288: DOUBLE
35289: LD_INT 1
35291: DEC
35292: ST_TO_ADDR
35293: LD_VAR 0 6
35297: PUSH
35298: FOR_TO
35299: IFFALSE 35338
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35301: LD_ADDR_VAR 0 9
35305: PUSH
35306: LD_VAR 0 9
35310: PPUSH
35311: LD_VAR 0 7
35315: PPUSH
35316: LD_VAR 0 6
35320: PUSH
35321: LD_VAR 0 7
35325: ARRAY
35326: PUSH
35327: LD_INT 1
35329: ARRAY
35330: PPUSH
35331: CALL_OW 1
35335: ST_TO_ADDR
35336: GO 35298
35338: POP
35339: POP
// result := tmp ;
35340: LD_ADDR_VAR 0 6
35344: PUSH
35345: LD_VAR 0 9
35349: ST_TO_ADDR
// end ; end ;
35350: LD_VAR 0 6
35354: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35355: LD_INT 0
35357: PPUSH
35358: PPUSH
35359: PPUSH
35360: PPUSH
35361: PPUSH
35362: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35363: LD_ADDR_VAR 0 5
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: LD_INT 0
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: EMPTY
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: ST_TO_ADDR
// if not x or not y then
35385: LD_VAR 0 2
35389: NOT
35390: PUSH
35391: LD_VAR 0 3
35395: NOT
35396: OR
35397: IFFALSE 35401
// exit ;
35399: GO 37047
// if not range then
35401: LD_VAR 0 4
35405: NOT
35406: IFFALSE 35416
// range := 10 ;
35408: LD_ADDR_VAR 0 4
35412: PUSH
35413: LD_INT 10
35415: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35416: LD_ADDR_VAR 0 8
35420: PUSH
35421: LD_INT 81
35423: PUSH
35424: LD_VAR 0 1
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 92
35435: PUSH
35436: LD_VAR 0 2
35440: PUSH
35441: LD_VAR 0 3
35445: PUSH
35446: LD_VAR 0 4
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 21
35462: PUSH
35463: LD_INT 3
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: PPUSH
35479: CALL_OW 69
35483: ST_TO_ADDR
// if not tmp then
35484: LD_VAR 0 8
35488: NOT
35489: IFFALSE 35493
// exit ;
35491: GO 37047
// for i in tmp do
35493: LD_ADDR_VAR 0 6
35497: PUSH
35498: LD_VAR 0 8
35502: PUSH
35503: FOR_IN
35504: IFFALSE 37022
// begin points := [ 0 , 0 , 0 ] ;
35506: LD_ADDR_VAR 0 9
35510: PUSH
35511: LD_INT 0
35513: PUSH
35514: LD_INT 0
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
// bpoints := 1 ;
35525: LD_ADDR_VAR 0 10
35529: PUSH
35530: LD_INT 1
35532: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35533: LD_VAR 0 6
35537: PPUSH
35538: CALL_OW 247
35542: PUSH
35543: LD_INT 1
35545: DOUBLE
35546: EQUAL
35547: IFTRUE 35551
35549: GO 36129
35551: POP
// begin if GetClass ( i ) = 1 then
35552: LD_VAR 0 6
35556: PPUSH
35557: CALL_OW 257
35561: PUSH
35562: LD_INT 1
35564: EQUAL
35565: IFFALSE 35586
// points := [ 10 , 5 , 3 ] ;
35567: LD_ADDR_VAR 0 9
35571: PUSH
35572: LD_INT 10
35574: PUSH
35575: LD_INT 5
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: EMPTY
35582: LIST
35583: LIST
35584: LIST
35585: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35586: LD_VAR 0 6
35590: PPUSH
35591: CALL_OW 257
35595: PUSH
35596: LD_INT 2
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: LD_INT 4
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: IN
35610: IFFALSE 35631
// points := [ 3 , 2 , 1 ] ;
35612: LD_ADDR_VAR 0 9
35616: PUSH
35617: LD_INT 3
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: LD_INT 1
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35631: LD_VAR 0 6
35635: PPUSH
35636: CALL_OW 257
35640: PUSH
35641: LD_INT 5
35643: EQUAL
35644: IFFALSE 35665
// points := [ 130 , 5 , 2 ] ;
35646: LD_ADDR_VAR 0 9
35650: PUSH
35651: LD_INT 130
35653: PUSH
35654: LD_INT 5
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: LIST
35664: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35665: LD_VAR 0 6
35669: PPUSH
35670: CALL_OW 257
35674: PUSH
35675: LD_INT 8
35677: EQUAL
35678: IFFALSE 35699
// points := [ 35 , 35 , 30 ] ;
35680: LD_ADDR_VAR 0 9
35684: PUSH
35685: LD_INT 35
35687: PUSH
35688: LD_INT 35
35690: PUSH
35691: LD_INT 30
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35699: LD_VAR 0 6
35703: PPUSH
35704: CALL_OW 257
35708: PUSH
35709: LD_INT 9
35711: EQUAL
35712: IFFALSE 35733
// points := [ 20 , 55 , 40 ] ;
35714: LD_ADDR_VAR 0 9
35718: PUSH
35719: LD_INT 20
35721: PUSH
35722: LD_INT 55
35724: PUSH
35725: LD_INT 40
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: LIST
35732: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35733: LD_VAR 0 6
35737: PPUSH
35738: CALL_OW 257
35742: PUSH
35743: LD_INT 12
35745: PUSH
35746: LD_INT 16
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: IN
35753: IFFALSE 35774
// points := [ 5 , 3 , 2 ] ;
35755: LD_ADDR_VAR 0 9
35759: PUSH
35760: LD_INT 5
35762: PUSH
35763: LD_INT 3
35765: PUSH
35766: LD_INT 2
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: LIST
35773: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35774: LD_VAR 0 6
35778: PPUSH
35779: CALL_OW 257
35783: PUSH
35784: LD_INT 17
35786: EQUAL
35787: IFFALSE 35808
// points := [ 100 , 50 , 75 ] ;
35789: LD_ADDR_VAR 0 9
35793: PUSH
35794: LD_INT 100
35796: PUSH
35797: LD_INT 50
35799: PUSH
35800: LD_INT 75
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: LIST
35807: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35808: LD_VAR 0 6
35812: PPUSH
35813: CALL_OW 257
35817: PUSH
35818: LD_INT 15
35820: EQUAL
35821: IFFALSE 35842
// points := [ 10 , 5 , 3 ] ;
35823: LD_ADDR_VAR 0 9
35827: PUSH
35828: LD_INT 10
35830: PUSH
35831: LD_INT 5
35833: PUSH
35834: LD_INT 3
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: LIST
35841: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35842: LD_VAR 0 6
35846: PPUSH
35847: CALL_OW 257
35851: PUSH
35852: LD_INT 14
35854: EQUAL
35855: IFFALSE 35876
// points := [ 10 , 0 , 0 ] ;
35857: LD_ADDR_VAR 0 9
35861: PUSH
35862: LD_INT 10
35864: PUSH
35865: LD_INT 0
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35876: LD_VAR 0 6
35880: PPUSH
35881: CALL_OW 257
35885: PUSH
35886: LD_INT 11
35888: EQUAL
35889: IFFALSE 35910
// points := [ 30 , 10 , 5 ] ;
35891: LD_ADDR_VAR 0 9
35895: PUSH
35896: LD_INT 30
35898: PUSH
35899: LD_INT 10
35901: PUSH
35902: LD_INT 5
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: LIST
35909: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35910: LD_VAR 0 1
35914: PPUSH
35915: LD_INT 5
35917: PPUSH
35918: CALL_OW 321
35922: PUSH
35923: LD_INT 2
35925: EQUAL
35926: IFFALSE 35943
// bpoints := bpoints * 1.8 ;
35928: LD_ADDR_VAR 0 10
35932: PUSH
35933: LD_VAR 0 10
35937: PUSH
35938: LD_REAL  1.80000000000000E+0000
35941: MUL
35942: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35943: LD_VAR 0 6
35947: PPUSH
35948: CALL_OW 257
35952: PUSH
35953: LD_INT 1
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 3
35961: PUSH
35962: LD_INT 4
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: IN
35971: PUSH
35972: LD_VAR 0 1
35976: PPUSH
35977: LD_INT 51
35979: PPUSH
35980: CALL_OW 321
35984: PUSH
35985: LD_INT 2
35987: EQUAL
35988: AND
35989: IFFALSE 36006
// bpoints := bpoints * 1.2 ;
35991: LD_ADDR_VAR 0 10
35995: PUSH
35996: LD_VAR 0 10
36000: PUSH
36001: LD_REAL  1.20000000000000E+0000
36004: MUL
36005: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36006: LD_VAR 0 6
36010: PPUSH
36011: CALL_OW 257
36015: PUSH
36016: LD_INT 5
36018: PUSH
36019: LD_INT 7
36021: PUSH
36022: LD_INT 9
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: IN
36030: PUSH
36031: LD_VAR 0 1
36035: PPUSH
36036: LD_INT 52
36038: PPUSH
36039: CALL_OW 321
36043: PUSH
36044: LD_INT 2
36046: EQUAL
36047: AND
36048: IFFALSE 36065
// bpoints := bpoints * 1.5 ;
36050: LD_ADDR_VAR 0 10
36054: PUSH
36055: LD_VAR 0 10
36059: PUSH
36060: LD_REAL  1.50000000000000E+0000
36063: MUL
36064: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36065: LD_VAR 0 1
36069: PPUSH
36070: LD_INT 66
36072: PPUSH
36073: CALL_OW 321
36077: PUSH
36078: LD_INT 2
36080: EQUAL
36081: IFFALSE 36098
// bpoints := bpoints * 1.1 ;
36083: LD_ADDR_VAR 0 10
36087: PUSH
36088: LD_VAR 0 10
36092: PUSH
36093: LD_REAL  1.10000000000000E+0000
36096: MUL
36097: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36098: LD_ADDR_VAR 0 10
36102: PUSH
36103: LD_VAR 0 10
36107: PUSH
36108: LD_VAR 0 6
36112: PPUSH
36113: LD_INT 1
36115: PPUSH
36116: CALL_OW 259
36120: PUSH
36121: LD_REAL  1.15000000000000E+0000
36124: MUL
36125: MUL
36126: ST_TO_ADDR
// end ; unit_vehicle :
36127: GO 36951
36129: LD_INT 2
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36137
36135: GO 36939
36137: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36138: LD_VAR 0 6
36142: PPUSH
36143: CALL_OW 264
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 42
36153: PUSH
36154: LD_INT 24
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: IN
36162: IFFALSE 36183
// points := [ 25 , 5 , 3 ] ;
36164: LD_ADDR_VAR 0 9
36168: PUSH
36169: LD_INT 25
36171: PUSH
36172: LD_INT 5
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: LIST
36182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36183: LD_VAR 0 6
36187: PPUSH
36188: CALL_OW 264
36192: PUSH
36193: LD_INT 4
36195: PUSH
36196: LD_INT 43
36198: PUSH
36199: LD_INT 25
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: IN
36207: IFFALSE 36228
// points := [ 40 , 15 , 5 ] ;
36209: LD_ADDR_VAR 0 9
36213: PUSH
36214: LD_INT 40
36216: PUSH
36217: LD_INT 15
36219: PUSH
36220: LD_INT 5
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36228: LD_VAR 0 6
36232: PPUSH
36233: CALL_OW 264
36237: PUSH
36238: LD_INT 3
36240: PUSH
36241: LD_INT 23
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: IN
36248: IFFALSE 36269
// points := [ 7 , 25 , 8 ] ;
36250: LD_ADDR_VAR 0 9
36254: PUSH
36255: LD_INT 7
36257: PUSH
36258: LD_INT 25
36260: PUSH
36261: LD_INT 8
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36269: LD_VAR 0 6
36273: PPUSH
36274: CALL_OW 264
36278: PUSH
36279: LD_INT 5
36281: PUSH
36282: LD_INT 27
36284: PUSH
36285: LD_INT 44
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: LIST
36292: IN
36293: IFFALSE 36314
// points := [ 14 , 50 , 16 ] ;
36295: LD_ADDR_VAR 0 9
36299: PUSH
36300: LD_INT 14
36302: PUSH
36303: LD_INT 50
36305: PUSH
36306: LD_INT 16
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: LIST
36313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36314: LD_VAR 0 6
36318: PPUSH
36319: CALL_OW 264
36323: PUSH
36324: LD_INT 6
36326: PUSH
36327: LD_INT 46
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: IN
36334: IFFALSE 36355
// points := [ 32 , 120 , 70 ] ;
36336: LD_ADDR_VAR 0 9
36340: PUSH
36341: LD_INT 32
36343: PUSH
36344: LD_INT 120
36346: PUSH
36347: LD_INT 70
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36355: LD_VAR 0 6
36359: PPUSH
36360: CALL_OW 264
36364: PUSH
36365: LD_INT 7
36367: PUSH
36368: LD_INT 28
36370: PUSH
36371: LD_INT 45
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: LIST
36378: IN
36379: IFFALSE 36400
// points := [ 35 , 20 , 45 ] ;
36381: LD_ADDR_VAR 0 9
36385: PUSH
36386: LD_INT 35
36388: PUSH
36389: LD_INT 20
36391: PUSH
36392: LD_INT 45
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36400: LD_VAR 0 6
36404: PPUSH
36405: CALL_OW 264
36409: PUSH
36410: LD_INT 47
36412: PUSH
36413: EMPTY
36414: LIST
36415: IN
36416: IFFALSE 36437
// points := [ 67 , 45 , 75 ] ;
36418: LD_ADDR_VAR 0 9
36422: PUSH
36423: LD_INT 67
36425: PUSH
36426: LD_INT 45
36428: PUSH
36429: LD_INT 75
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: LIST
36436: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36437: LD_VAR 0 6
36441: PPUSH
36442: CALL_OW 264
36446: PUSH
36447: LD_INT 26
36449: PUSH
36450: EMPTY
36451: LIST
36452: IN
36453: IFFALSE 36474
// points := [ 120 , 30 , 80 ] ;
36455: LD_ADDR_VAR 0 9
36459: PUSH
36460: LD_INT 120
36462: PUSH
36463: LD_INT 30
36465: PUSH
36466: LD_INT 80
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36474: LD_VAR 0 6
36478: PPUSH
36479: CALL_OW 264
36483: PUSH
36484: LD_INT 22
36486: PUSH
36487: EMPTY
36488: LIST
36489: IN
36490: IFFALSE 36511
// points := [ 40 , 1 , 1 ] ;
36492: LD_ADDR_VAR 0 9
36496: PUSH
36497: LD_INT 40
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: LIST
36510: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36511: LD_VAR 0 6
36515: PPUSH
36516: CALL_OW 264
36520: PUSH
36521: LD_INT 29
36523: PUSH
36524: EMPTY
36525: LIST
36526: IN
36527: IFFALSE 36548
// points := [ 70 , 200 , 400 ] ;
36529: LD_ADDR_VAR 0 9
36533: PUSH
36534: LD_INT 70
36536: PUSH
36537: LD_INT 200
36539: PUSH
36540: LD_INT 400
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: LIST
36547: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36548: LD_VAR 0 6
36552: PPUSH
36553: CALL_OW 264
36557: PUSH
36558: LD_INT 14
36560: PUSH
36561: LD_INT 53
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: IN
36568: IFFALSE 36589
// points := [ 40 , 10 , 20 ] ;
36570: LD_ADDR_VAR 0 9
36574: PUSH
36575: LD_INT 40
36577: PUSH
36578: LD_INT 10
36580: PUSH
36581: LD_INT 20
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36589: LD_VAR 0 6
36593: PPUSH
36594: CALL_OW 264
36598: PUSH
36599: LD_INT 9
36601: PUSH
36602: EMPTY
36603: LIST
36604: IN
36605: IFFALSE 36626
// points := [ 5 , 70 , 20 ] ;
36607: LD_ADDR_VAR 0 9
36611: PUSH
36612: LD_INT 5
36614: PUSH
36615: LD_INT 70
36617: PUSH
36618: LD_INT 20
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36626: LD_VAR 0 6
36630: PPUSH
36631: CALL_OW 264
36635: PUSH
36636: LD_INT 10
36638: PUSH
36639: EMPTY
36640: LIST
36641: IN
36642: IFFALSE 36663
// points := [ 35 , 110 , 70 ] ;
36644: LD_ADDR_VAR 0 9
36648: PUSH
36649: LD_INT 35
36651: PUSH
36652: LD_INT 110
36654: PUSH
36655: LD_INT 70
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: LIST
36662: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36663: LD_VAR 0 6
36667: PPUSH
36668: CALL_OW 265
36672: PUSH
36673: LD_INT 25
36675: EQUAL
36676: IFFALSE 36697
// points := [ 80 , 65 , 100 ] ;
36678: LD_ADDR_VAR 0 9
36682: PUSH
36683: LD_INT 80
36685: PUSH
36686: LD_INT 65
36688: PUSH
36689: LD_INT 100
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36697: LD_VAR 0 6
36701: PPUSH
36702: CALL_OW 263
36706: PUSH
36707: LD_INT 1
36709: EQUAL
36710: IFFALSE 36745
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36712: LD_ADDR_VAR 0 10
36716: PUSH
36717: LD_VAR 0 10
36721: PUSH
36722: LD_VAR 0 6
36726: PPUSH
36727: CALL_OW 311
36731: PPUSH
36732: LD_INT 3
36734: PPUSH
36735: CALL_OW 259
36739: PUSH
36740: LD_INT 4
36742: MUL
36743: MUL
36744: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36745: LD_VAR 0 6
36749: PPUSH
36750: CALL_OW 263
36754: PUSH
36755: LD_INT 2
36757: EQUAL
36758: IFFALSE 36809
// begin j := IsControledBy ( i ) ;
36760: LD_ADDR_VAR 0 7
36764: PUSH
36765: LD_VAR 0 6
36769: PPUSH
36770: CALL_OW 312
36774: ST_TO_ADDR
// if j then
36775: LD_VAR 0 7
36779: IFFALSE 36809
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36781: LD_ADDR_VAR 0 10
36785: PUSH
36786: LD_VAR 0 10
36790: PUSH
36791: LD_VAR 0 7
36795: PPUSH
36796: LD_INT 3
36798: PPUSH
36799: CALL_OW 259
36803: PUSH
36804: LD_INT 3
36806: MUL
36807: MUL
36808: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 264
36818: PUSH
36819: LD_INT 5
36821: PUSH
36822: LD_INT 6
36824: PUSH
36825: LD_INT 46
36827: PUSH
36828: LD_INT 44
36830: PUSH
36831: LD_INT 47
36833: PUSH
36834: LD_INT 45
36836: PUSH
36837: LD_INT 28
36839: PUSH
36840: LD_INT 7
36842: PUSH
36843: LD_INT 27
36845: PUSH
36846: LD_INT 29
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: IN
36861: PUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: LD_INT 52
36869: PPUSH
36870: CALL_OW 321
36874: PUSH
36875: LD_INT 2
36877: EQUAL
36878: AND
36879: IFFALSE 36896
// bpoints := bpoints * 1.2 ;
36881: LD_ADDR_VAR 0 10
36885: PUSH
36886: LD_VAR 0 10
36890: PUSH
36891: LD_REAL  1.20000000000000E+0000
36894: MUL
36895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36896: LD_VAR 0 6
36900: PPUSH
36901: CALL_OW 264
36905: PUSH
36906: LD_INT 6
36908: PUSH
36909: LD_INT 46
36911: PUSH
36912: LD_INT 47
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: LIST
36919: IN
36920: IFFALSE 36937
// bpoints := bpoints * 1.2 ;
36922: LD_ADDR_VAR 0 10
36926: PUSH
36927: LD_VAR 0 10
36931: PUSH
36932: LD_REAL  1.20000000000000E+0000
36935: MUL
36936: ST_TO_ADDR
// end ; unit_building :
36937: GO 36951
36939: LD_INT 3
36941: DOUBLE
36942: EQUAL
36943: IFTRUE 36947
36945: GO 36950
36947: POP
// ; end ;
36948: GO 36951
36950: POP
// for j = 1 to 3 do
36951: LD_ADDR_VAR 0 7
36955: PUSH
36956: DOUBLE
36957: LD_INT 1
36959: DEC
36960: ST_TO_ADDR
36961: LD_INT 3
36963: PUSH
36964: FOR_TO
36965: IFFALSE 37018
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36967: LD_ADDR_VAR 0 5
36971: PUSH
36972: LD_VAR 0 5
36976: PPUSH
36977: LD_VAR 0 7
36981: PPUSH
36982: LD_VAR 0 5
36986: PUSH
36987: LD_VAR 0 7
36991: ARRAY
36992: PUSH
36993: LD_VAR 0 9
36997: PUSH
36998: LD_VAR 0 7
37002: ARRAY
37003: PUSH
37004: LD_VAR 0 10
37008: MUL
37009: PLUS
37010: PPUSH
37011: CALL_OW 1
37015: ST_TO_ADDR
37016: GO 36964
37018: POP
37019: POP
// end ;
37020: GO 35503
37022: POP
37023: POP
// result := Replace ( result , 4 , tmp ) ;
37024: LD_ADDR_VAR 0 5
37028: PUSH
37029: LD_VAR 0 5
37033: PPUSH
37034: LD_INT 4
37036: PPUSH
37037: LD_VAR 0 8
37041: PPUSH
37042: CALL_OW 1
37046: ST_TO_ADDR
// end ;
37047: LD_VAR 0 5
37051: RET
// export function DangerAtRange ( unit , range ) ; begin
37052: LD_INT 0
37054: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37055: LD_ADDR_VAR 0 3
37059: PUSH
37060: LD_VAR 0 1
37064: PPUSH
37065: CALL_OW 255
37069: PPUSH
37070: LD_VAR 0 1
37074: PPUSH
37075: CALL_OW 250
37079: PPUSH
37080: LD_VAR 0 1
37084: PPUSH
37085: CALL_OW 251
37089: PPUSH
37090: LD_VAR 0 2
37094: PPUSH
37095: CALL 35355 0 4
37099: ST_TO_ADDR
// end ;
37100: LD_VAR 0 3
37104: RET
// export function DangerInArea ( side , area ) ; begin
37105: LD_INT 0
37107: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37108: LD_ADDR_VAR 0 3
37112: PUSH
37113: LD_VAR 0 2
37117: PPUSH
37118: LD_INT 81
37120: PUSH
37121: LD_VAR 0 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PPUSH
37130: CALL_OW 70
37134: ST_TO_ADDR
// end ;
37135: LD_VAR 0 3
37139: RET
// export function IsExtension ( b ) ; begin
37140: LD_INT 0
37142: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37143: LD_ADDR_VAR 0 2
37147: PUSH
37148: LD_VAR 0 1
37152: PUSH
37153: LD_INT 23
37155: PUSH
37156: LD_INT 20
37158: PUSH
37159: LD_INT 22
37161: PUSH
37162: LD_INT 17
37164: PUSH
37165: LD_INT 24
37167: PUSH
37168: LD_INT 21
37170: PUSH
37171: LD_INT 19
37173: PUSH
37174: LD_INT 16
37176: PUSH
37177: LD_INT 25
37179: PUSH
37180: LD_INT 18
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: IN
37195: ST_TO_ADDR
// end ;
37196: LD_VAR 0 2
37200: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
37201: LD_INT 0
37203: PPUSH
37204: PPUSH
37205: PPUSH
// result := [ ] ;
37206: LD_ADDR_VAR 0 3
37210: PUSH
37211: EMPTY
37212: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37213: LD_ADDR_VAR 0 4
37217: PUSH
37218: LD_VAR 0 2
37222: PPUSH
37223: LD_INT 21
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PPUSH
37233: CALL_OW 70
37237: ST_TO_ADDR
// if not tmp then
37238: LD_VAR 0 4
37242: NOT
37243: IFFALSE 37247
// exit ;
37245: GO 37305
// for i in tmp do
37247: LD_ADDR_VAR 0 5
37251: PUSH
37252: LD_VAR 0 4
37256: PUSH
37257: FOR_IN
37258: IFFALSE 37293
// if GetBase ( i ) <> base then
37260: LD_VAR 0 5
37264: PPUSH
37265: CALL_OW 274
37269: PUSH
37270: LD_VAR 0 1
37274: NONEQUAL
37275: IFFALSE 37291
// ComLinkToBase ( base , i ) ;
37277: LD_VAR 0 1
37281: PPUSH
37282: LD_VAR 0 5
37286: PPUSH
37287: CALL_OW 169
37291: GO 37257
37293: POP
37294: POP
// result := tmp ;
37295: LD_ADDR_VAR 0 3
37299: PUSH
37300: LD_VAR 0 4
37304: ST_TO_ADDR
// end ;
37305: LD_VAR 0 3
37309: RET
// export function ComComplete ( unit , b ) ; var i ; begin
37310: LD_INT 0
37312: PPUSH
37313: PPUSH
// if BuildingStatus ( b ) = bs_build then
37314: LD_VAR 0 2
37318: PPUSH
37319: CALL_OW 461
37323: PUSH
37324: LD_INT 1
37326: EQUAL
37327: IFFALSE 37387
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37329: LD_VAR 0 1
37333: PPUSH
37334: LD_STRING h
37336: PUSH
37337: LD_VAR 0 2
37341: PPUSH
37342: CALL_OW 250
37346: PUSH
37347: LD_VAR 0 2
37351: PPUSH
37352: CALL_OW 251
37356: PUSH
37357: LD_VAR 0 2
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: PPUSH
37383: CALL_OW 446
// end ;
37387: LD_VAR 0 3
37391: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37392: LD_INT 0
37394: PPUSH
37395: PPUSH
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37400: LD_VAR 0 1
37404: NOT
37405: PUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL_OW 263
37415: PUSH
37416: LD_INT 2
37418: EQUAL
37419: NOT
37420: OR
37421: IFFALSE 37425
// exit ;
37423: GO 37741
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37425: LD_ADDR_VAR 0 6
37429: PUSH
37430: LD_INT 22
37432: PUSH
37433: LD_VAR 0 1
37437: PPUSH
37438: CALL_OW 255
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: LD_INT 30
37452: PUSH
37453: LD_INT 36
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 34
37462: PUSH
37463: LD_INT 31
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PPUSH
37479: CALL_OW 69
37483: ST_TO_ADDR
// if not tmp then
37484: LD_VAR 0 6
37488: NOT
37489: IFFALSE 37493
// exit ;
37491: GO 37741
// result := [ ] ;
37493: LD_ADDR_VAR 0 2
37497: PUSH
37498: EMPTY
37499: ST_TO_ADDR
// for i in tmp do
37500: LD_ADDR_VAR 0 3
37504: PUSH
37505: LD_VAR 0 6
37509: PUSH
37510: FOR_IN
37511: IFFALSE 37582
// begin t := UnitsInside ( i ) ;
37513: LD_ADDR_VAR 0 4
37517: PUSH
37518: LD_VAR 0 3
37522: PPUSH
37523: CALL_OW 313
37527: ST_TO_ADDR
// if t then
37528: LD_VAR 0 4
37532: IFFALSE 37580
// for j in t do
37534: LD_ADDR_VAR 0 7
37538: PUSH
37539: LD_VAR 0 4
37543: PUSH
37544: FOR_IN
37545: IFFALSE 37578
// result := Insert ( result , result + 1 , j ) ;
37547: LD_ADDR_VAR 0 2
37551: PUSH
37552: LD_VAR 0 2
37556: PPUSH
37557: LD_VAR 0 2
37561: PUSH
37562: LD_INT 1
37564: PLUS
37565: PPUSH
37566: LD_VAR 0 7
37570: PPUSH
37571: CALL_OW 2
37575: ST_TO_ADDR
37576: GO 37544
37578: POP
37579: POP
// end ;
37580: GO 37510
37582: POP
37583: POP
// if not result then
37584: LD_VAR 0 2
37588: NOT
37589: IFFALSE 37593
// exit ;
37591: GO 37741
// mech := result [ 1 ] ;
37593: LD_ADDR_VAR 0 5
37597: PUSH
37598: LD_VAR 0 2
37602: PUSH
37603: LD_INT 1
37605: ARRAY
37606: ST_TO_ADDR
// if result > 1 then
37607: LD_VAR 0 2
37611: PUSH
37612: LD_INT 1
37614: GREATER
37615: IFFALSE 37727
// for i = 2 to result do
37617: LD_ADDR_VAR 0 3
37621: PUSH
37622: DOUBLE
37623: LD_INT 2
37625: DEC
37626: ST_TO_ADDR
37627: LD_VAR 0 2
37631: PUSH
37632: FOR_TO
37633: IFFALSE 37725
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37635: LD_ADDR_VAR 0 4
37639: PUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_VAR 0 3
37649: ARRAY
37650: PPUSH
37651: LD_INT 3
37653: PPUSH
37654: CALL_OW 259
37658: PUSH
37659: LD_VAR 0 2
37663: PUSH
37664: LD_VAR 0 3
37668: ARRAY
37669: PPUSH
37670: CALL_OW 432
37674: MINUS
37675: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37676: LD_VAR 0 4
37680: PUSH
37681: LD_VAR 0 5
37685: PPUSH
37686: LD_INT 3
37688: PPUSH
37689: CALL_OW 259
37693: PUSH
37694: LD_VAR 0 5
37698: PPUSH
37699: CALL_OW 432
37703: MINUS
37704: GREATEREQUAL
37705: IFFALSE 37723
// mech := result [ i ] ;
37707: LD_ADDR_VAR 0 5
37711: PUSH
37712: LD_VAR 0 2
37716: PUSH
37717: LD_VAR 0 3
37721: ARRAY
37722: ST_TO_ADDR
// end ;
37723: GO 37632
37725: POP
37726: POP
// ComLinkTo ( vehicle , mech ) ;
37727: LD_VAR 0 1
37731: PPUSH
37732: LD_VAR 0 5
37736: PPUSH
37737: CALL_OW 135
// end ;
37741: LD_VAR 0 2
37745: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37746: LD_INT 0
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
37755: PPUSH
37756: PPUSH
37757: PPUSH
37758: PPUSH
37759: PPUSH
37760: PPUSH
// result := [ ] ;
37761: LD_ADDR_VAR 0 7
37765: PUSH
37766: EMPTY
37767: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37768: LD_VAR 0 1
37772: PPUSH
37773: CALL_OW 266
37777: PUSH
37778: LD_INT 0
37780: PUSH
37781: LD_INT 1
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: IN
37788: NOT
37789: IFFALSE 37793
// exit ;
37791: GO 39424
// if name then
37793: LD_VAR 0 3
37797: IFFALSE 37813
// SetBName ( base_dep , name ) ;
37799: LD_VAR 0 1
37803: PPUSH
37804: LD_VAR 0 3
37808: PPUSH
37809: CALL_OW 500
// base := GetBase ( base_dep ) ;
37813: LD_ADDR_VAR 0 15
37817: PUSH
37818: LD_VAR 0 1
37822: PPUSH
37823: CALL_OW 274
37827: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37828: LD_ADDR_VAR 0 16
37832: PUSH
37833: LD_VAR 0 1
37837: PPUSH
37838: CALL_OW 255
37842: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37843: LD_ADDR_VAR 0 17
37847: PUSH
37848: LD_VAR 0 1
37852: PPUSH
37853: CALL_OW 248
37857: ST_TO_ADDR
// if sources then
37858: LD_VAR 0 5
37862: IFFALSE 37909
// for i = 1 to 3 do
37864: LD_ADDR_VAR 0 8
37868: PUSH
37869: DOUBLE
37870: LD_INT 1
37872: DEC
37873: ST_TO_ADDR
37874: LD_INT 3
37876: PUSH
37877: FOR_TO
37878: IFFALSE 37907
// AddResourceType ( base , i , sources [ i ] ) ;
37880: LD_VAR 0 15
37884: PPUSH
37885: LD_VAR 0 8
37889: PPUSH
37890: LD_VAR 0 5
37894: PUSH
37895: LD_VAR 0 8
37899: ARRAY
37900: PPUSH
37901: CALL_OW 276
37905: GO 37877
37907: POP
37908: POP
// buildings := GetBaseBuildings ( base , area ) ;
37909: LD_ADDR_VAR 0 18
37913: PUSH
37914: LD_VAR 0 15
37918: PPUSH
37919: LD_VAR 0 2
37923: PPUSH
37924: CALL 37201 0 2
37928: ST_TO_ADDR
// InitHc ;
37929: CALL_OW 19
// InitUc ;
37933: CALL_OW 18
// uc_side := side ;
37937: LD_ADDR_OWVAR 20
37941: PUSH
37942: LD_VAR 0 16
37946: ST_TO_ADDR
// uc_nation := nation ;
37947: LD_ADDR_OWVAR 21
37951: PUSH
37952: LD_VAR 0 17
37956: ST_TO_ADDR
// if buildings then
37957: LD_VAR 0 18
37961: IFFALSE 39283
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37963: LD_ADDR_VAR 0 19
37967: PUSH
37968: LD_VAR 0 18
37972: PPUSH
37973: LD_INT 2
37975: PUSH
37976: LD_INT 30
37978: PUSH
37979: LD_INT 29
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 30
37988: PUSH
37989: LD_INT 30
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: LIST
38000: PPUSH
38001: CALL_OW 72
38005: ST_TO_ADDR
// if tmp then
38006: LD_VAR 0 19
38010: IFFALSE 38058
// for i in tmp do
38012: LD_ADDR_VAR 0 8
38016: PUSH
38017: LD_VAR 0 19
38021: PUSH
38022: FOR_IN
38023: IFFALSE 38056
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38025: LD_VAR 0 8
38029: PPUSH
38030: CALL_OW 250
38034: PPUSH
38035: LD_VAR 0 8
38039: PPUSH
38040: CALL_OW 251
38044: PPUSH
38045: LD_VAR 0 16
38049: PPUSH
38050: CALL_OW 441
38054: GO 38022
38056: POP
38057: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38058: LD_VAR 0 18
38062: PPUSH
38063: LD_INT 2
38065: PUSH
38066: LD_INT 30
38068: PUSH
38069: LD_INT 32
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 30
38078: PUSH
38079: LD_INT 33
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: PPUSH
38091: CALL_OW 72
38095: IFFALSE 38183
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38097: LD_ADDR_VAR 0 8
38101: PUSH
38102: LD_VAR 0 18
38106: PPUSH
38107: LD_INT 2
38109: PUSH
38110: LD_INT 30
38112: PUSH
38113: LD_INT 32
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 30
38122: PUSH
38123: LD_INT 33
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: PPUSH
38135: CALL_OW 72
38139: PUSH
38140: FOR_IN
38141: IFFALSE 38181
// begin if not GetBWeapon ( i ) then
38143: LD_VAR 0 8
38147: PPUSH
38148: CALL_OW 269
38152: NOT
38153: IFFALSE 38179
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38155: LD_VAR 0 8
38159: PPUSH
38160: LD_VAR 0 8
38164: PPUSH
38165: LD_VAR 0 2
38169: PPUSH
38170: CALL 39429 0 2
38174: PPUSH
38175: CALL_OW 431
// end ;
38179: GO 38140
38181: POP
38182: POP
// end ; for i = 1 to personel do
38183: LD_ADDR_VAR 0 8
38187: PUSH
38188: DOUBLE
38189: LD_INT 1
38191: DEC
38192: ST_TO_ADDR
38193: LD_VAR 0 6
38197: PUSH
38198: FOR_TO
38199: IFFALSE 39263
// begin if i > 4 then
38201: LD_VAR 0 8
38205: PUSH
38206: LD_INT 4
38208: GREATER
38209: IFFALSE 38213
// break ;
38211: GO 39263
// case i of 1 :
38213: LD_VAR 0 8
38217: PUSH
38218: LD_INT 1
38220: DOUBLE
38221: EQUAL
38222: IFTRUE 38226
38224: GO 38306
38226: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38227: LD_ADDR_VAR 0 12
38231: PUSH
38232: LD_VAR 0 18
38236: PPUSH
38237: LD_INT 22
38239: PUSH
38240: LD_VAR 0 16
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 58
38251: PUSH
38252: EMPTY
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: PUSH
38258: LD_INT 30
38260: PUSH
38261: LD_INT 32
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: LD_INT 30
38270: PUSH
38271: LD_INT 4
38273: PUSH
38274: EMPTY
38275: LIST
38276: LIST
38277: PUSH
38278: LD_INT 30
38280: PUSH
38281: LD_INT 5
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: LIST
38298: PPUSH
38299: CALL_OW 72
38303: ST_TO_ADDR
38304: GO 38528
38306: LD_INT 2
38308: DOUBLE
38309: EQUAL
38310: IFTRUE 38314
38312: GO 38376
38314: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38315: LD_ADDR_VAR 0 12
38319: PUSH
38320: LD_VAR 0 18
38324: PPUSH
38325: LD_INT 22
38327: PUSH
38328: LD_VAR 0 16
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 2
38339: PUSH
38340: LD_INT 30
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 30
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: PPUSH
38369: CALL_OW 72
38373: ST_TO_ADDR
38374: GO 38528
38376: LD_INT 3
38378: DOUBLE
38379: EQUAL
38380: IFTRUE 38384
38382: GO 38446
38384: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38385: LD_ADDR_VAR 0 12
38389: PUSH
38390: LD_VAR 0 18
38394: PPUSH
38395: LD_INT 22
38397: PUSH
38398: LD_VAR 0 16
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: LD_INT 30
38412: PUSH
38413: LD_INT 2
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 30
38422: PUSH
38423: LD_INT 3
38425: PUSH
38426: EMPTY
38427: LIST
38428: LIST
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PPUSH
38439: CALL_OW 72
38443: ST_TO_ADDR
38444: GO 38528
38446: LD_INT 4
38448: DOUBLE
38449: EQUAL
38450: IFTRUE 38454
38452: GO 38527
38454: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38455: LD_ADDR_VAR 0 12
38459: PUSH
38460: LD_VAR 0 18
38464: PPUSH
38465: LD_INT 22
38467: PUSH
38468: LD_VAR 0 16
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 30
38482: PUSH
38483: LD_INT 6
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 30
38492: PUSH
38493: LD_INT 7
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 30
38502: PUSH
38503: LD_INT 8
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PPUSH
38520: CALL_OW 72
38524: ST_TO_ADDR
38525: GO 38528
38527: POP
// if i = 1 then
38528: LD_VAR 0 8
38532: PUSH
38533: LD_INT 1
38535: EQUAL
38536: IFFALSE 38647
// begin tmp := [ ] ;
38538: LD_ADDR_VAR 0 19
38542: PUSH
38543: EMPTY
38544: ST_TO_ADDR
// for j in f do
38545: LD_ADDR_VAR 0 9
38549: PUSH
38550: LD_VAR 0 12
38554: PUSH
38555: FOR_IN
38556: IFFALSE 38629
// if GetBType ( j ) = b_bunker then
38558: LD_VAR 0 9
38562: PPUSH
38563: CALL_OW 266
38567: PUSH
38568: LD_INT 32
38570: EQUAL
38571: IFFALSE 38598
// tmp := Insert ( tmp , 1 , j ) else
38573: LD_ADDR_VAR 0 19
38577: PUSH
38578: LD_VAR 0 19
38582: PPUSH
38583: LD_INT 1
38585: PPUSH
38586: LD_VAR 0 9
38590: PPUSH
38591: CALL_OW 2
38595: ST_TO_ADDR
38596: GO 38627
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38598: LD_ADDR_VAR 0 19
38602: PUSH
38603: LD_VAR 0 19
38607: PPUSH
38608: LD_VAR 0 19
38612: PUSH
38613: LD_INT 1
38615: PLUS
38616: PPUSH
38617: LD_VAR 0 9
38621: PPUSH
38622: CALL_OW 2
38626: ST_TO_ADDR
38627: GO 38555
38629: POP
38630: POP
// if tmp then
38631: LD_VAR 0 19
38635: IFFALSE 38647
// f := tmp ;
38637: LD_ADDR_VAR 0 12
38641: PUSH
38642: LD_VAR 0 19
38646: ST_TO_ADDR
// end ; x := personel [ i ] ;
38647: LD_ADDR_VAR 0 13
38651: PUSH
38652: LD_VAR 0 6
38656: PUSH
38657: LD_VAR 0 8
38661: ARRAY
38662: ST_TO_ADDR
// if x = - 1 then
38663: LD_VAR 0 13
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: EQUAL
38672: IFFALSE 38881
// begin for j in f do
38674: LD_ADDR_VAR 0 9
38678: PUSH
38679: LD_VAR 0 12
38683: PUSH
38684: FOR_IN
38685: IFFALSE 38877
// repeat InitHc ;
38687: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38691: LD_VAR 0 9
38695: PPUSH
38696: CALL_OW 266
38700: PUSH
38701: LD_INT 5
38703: EQUAL
38704: IFFALSE 38774
// begin if UnitsInside ( j ) < 3 then
38706: LD_VAR 0 9
38710: PPUSH
38711: CALL_OW 313
38715: PUSH
38716: LD_INT 3
38718: LESS
38719: IFFALSE 38755
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38721: LD_INT 0
38723: PPUSH
38724: LD_INT 5
38726: PUSH
38727: LD_INT 8
38729: PUSH
38730: LD_INT 9
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: PUSH
38738: LD_VAR 0 17
38742: ARRAY
38743: PPUSH
38744: LD_VAR 0 4
38748: PPUSH
38749: CALL_OW 380
38753: GO 38772
// PrepareHuman ( false , i , skill ) ;
38755: LD_INT 0
38757: PPUSH
38758: LD_VAR 0 8
38762: PPUSH
38763: LD_VAR 0 4
38767: PPUSH
38768: CALL_OW 380
// end else
38772: GO 38791
// PrepareHuman ( false , i , skill ) ;
38774: LD_INT 0
38776: PPUSH
38777: LD_VAR 0 8
38781: PPUSH
38782: LD_VAR 0 4
38786: PPUSH
38787: CALL_OW 380
// un := CreateHuman ;
38791: LD_ADDR_VAR 0 14
38795: PUSH
38796: CALL_OW 44
38800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38801: LD_ADDR_VAR 0 7
38805: PUSH
38806: LD_VAR 0 7
38810: PPUSH
38811: LD_INT 1
38813: PPUSH
38814: LD_VAR 0 14
38818: PPUSH
38819: CALL_OW 2
38823: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38824: LD_VAR 0 14
38828: PPUSH
38829: LD_VAR 0 9
38833: PPUSH
38834: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38838: LD_VAR 0 9
38842: PPUSH
38843: CALL_OW 313
38847: PUSH
38848: LD_INT 6
38850: EQUAL
38851: PUSH
38852: LD_VAR 0 9
38856: PPUSH
38857: CALL_OW 266
38861: PUSH
38862: LD_INT 32
38864: PUSH
38865: LD_INT 31
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: IN
38872: OR
38873: IFFALSE 38687
38875: GO 38684
38877: POP
38878: POP
// end else
38879: GO 39261
// for j = 1 to x do
38881: LD_ADDR_VAR 0 9
38885: PUSH
38886: DOUBLE
38887: LD_INT 1
38889: DEC
38890: ST_TO_ADDR
38891: LD_VAR 0 13
38895: PUSH
38896: FOR_TO
38897: IFFALSE 39259
// begin InitHc ;
38899: CALL_OW 19
// if not f then
38903: LD_VAR 0 12
38907: NOT
38908: IFFALSE 38997
// begin PrepareHuman ( false , i , skill ) ;
38910: LD_INT 0
38912: PPUSH
38913: LD_VAR 0 8
38917: PPUSH
38918: LD_VAR 0 4
38922: PPUSH
38923: CALL_OW 380
// un := CreateHuman ;
38927: LD_ADDR_VAR 0 14
38931: PUSH
38932: CALL_OW 44
38936: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38937: LD_ADDR_VAR 0 7
38941: PUSH
38942: LD_VAR 0 7
38946: PPUSH
38947: LD_INT 1
38949: PPUSH
38950: LD_VAR 0 14
38954: PPUSH
38955: CALL_OW 2
38959: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38960: LD_VAR 0 14
38964: PPUSH
38965: LD_VAR 0 1
38969: PPUSH
38970: CALL_OW 250
38974: PPUSH
38975: LD_VAR 0 1
38979: PPUSH
38980: CALL_OW 251
38984: PPUSH
38985: LD_INT 10
38987: PPUSH
38988: LD_INT 0
38990: PPUSH
38991: CALL_OW 50
// continue ;
38995: GO 38896
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38997: LD_VAR 0 12
39001: PUSH
39002: LD_INT 1
39004: ARRAY
39005: PPUSH
39006: CALL_OW 313
39010: PUSH
39011: LD_VAR 0 12
39015: PUSH
39016: LD_INT 1
39018: ARRAY
39019: PPUSH
39020: CALL_OW 266
39024: PUSH
39025: LD_INT 32
39027: PUSH
39028: LD_INT 31
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: IN
39035: AND
39036: PUSH
39037: LD_VAR 0 12
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: PPUSH
39046: CALL_OW 313
39050: PUSH
39051: LD_INT 6
39053: EQUAL
39054: OR
39055: IFFALSE 39075
// f := Delete ( f , 1 ) ;
39057: LD_ADDR_VAR 0 12
39061: PUSH
39062: LD_VAR 0 12
39066: PPUSH
39067: LD_INT 1
39069: PPUSH
39070: CALL_OW 3
39074: ST_TO_ADDR
// if not f then
39075: LD_VAR 0 12
39079: NOT
39080: IFFALSE 39098
// begin x := x + 2 ;
39082: LD_ADDR_VAR 0 13
39086: PUSH
39087: LD_VAR 0 13
39091: PUSH
39092: LD_INT 2
39094: PLUS
39095: ST_TO_ADDR
// continue ;
39096: GO 38896
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39098: LD_VAR 0 12
39102: PUSH
39103: LD_INT 1
39105: ARRAY
39106: PPUSH
39107: CALL_OW 266
39111: PUSH
39112: LD_INT 5
39114: EQUAL
39115: IFFALSE 39189
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39117: LD_VAR 0 12
39121: PUSH
39122: LD_INT 1
39124: ARRAY
39125: PPUSH
39126: CALL_OW 313
39130: PUSH
39131: LD_INT 3
39133: LESS
39134: IFFALSE 39170
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39136: LD_INT 0
39138: PPUSH
39139: LD_INT 5
39141: PUSH
39142: LD_INT 8
39144: PUSH
39145: LD_INT 9
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: LD_VAR 0 17
39157: ARRAY
39158: PPUSH
39159: LD_VAR 0 4
39163: PPUSH
39164: CALL_OW 380
39168: GO 39187
// PrepareHuman ( false , i , skill ) ;
39170: LD_INT 0
39172: PPUSH
39173: LD_VAR 0 8
39177: PPUSH
39178: LD_VAR 0 4
39182: PPUSH
39183: CALL_OW 380
// end else
39187: GO 39206
// PrepareHuman ( false , i , skill ) ;
39189: LD_INT 0
39191: PPUSH
39192: LD_VAR 0 8
39196: PPUSH
39197: LD_VAR 0 4
39201: PPUSH
39202: CALL_OW 380
// un := CreateHuman ;
39206: LD_ADDR_VAR 0 14
39210: PUSH
39211: CALL_OW 44
39215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39216: LD_ADDR_VAR 0 7
39220: PUSH
39221: LD_VAR 0 7
39225: PPUSH
39226: LD_INT 1
39228: PPUSH
39229: LD_VAR 0 14
39233: PPUSH
39234: CALL_OW 2
39238: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39239: LD_VAR 0 14
39243: PPUSH
39244: LD_VAR 0 12
39248: PUSH
39249: LD_INT 1
39251: ARRAY
39252: PPUSH
39253: CALL_OW 52
// end ;
39257: GO 38896
39259: POP
39260: POP
// end ;
39261: GO 38198
39263: POP
39264: POP
// result := result ^ buildings ;
39265: LD_ADDR_VAR 0 7
39269: PUSH
39270: LD_VAR 0 7
39274: PUSH
39275: LD_VAR 0 18
39279: ADD
39280: ST_TO_ADDR
// end else
39281: GO 39424
// begin for i = 1 to personel do
39283: LD_ADDR_VAR 0 8
39287: PUSH
39288: DOUBLE
39289: LD_INT 1
39291: DEC
39292: ST_TO_ADDR
39293: LD_VAR 0 6
39297: PUSH
39298: FOR_TO
39299: IFFALSE 39422
// begin if i > 4 then
39301: LD_VAR 0 8
39305: PUSH
39306: LD_INT 4
39308: GREATER
39309: IFFALSE 39313
// break ;
39311: GO 39422
// x := personel [ i ] ;
39313: LD_ADDR_VAR 0 13
39317: PUSH
39318: LD_VAR 0 6
39322: PUSH
39323: LD_VAR 0 8
39327: ARRAY
39328: ST_TO_ADDR
// if x = - 1 then
39329: LD_VAR 0 13
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: EQUAL
39338: IFFALSE 39342
// continue ;
39340: GO 39298
// PrepareHuman ( false , i , skill ) ;
39342: LD_INT 0
39344: PPUSH
39345: LD_VAR 0 8
39349: PPUSH
39350: LD_VAR 0 4
39354: PPUSH
39355: CALL_OW 380
// un := CreateHuman ;
39359: LD_ADDR_VAR 0 14
39363: PUSH
39364: CALL_OW 44
39368: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39369: LD_VAR 0 14
39373: PPUSH
39374: LD_VAR 0 1
39378: PPUSH
39379: CALL_OW 250
39383: PPUSH
39384: LD_VAR 0 1
39388: PPUSH
39389: CALL_OW 251
39393: PPUSH
39394: LD_INT 10
39396: PPUSH
39397: LD_INT 0
39399: PPUSH
39400: CALL_OW 50
// result := result ^ un ;
39404: LD_ADDR_VAR 0 7
39408: PUSH
39409: LD_VAR 0 7
39413: PUSH
39414: LD_VAR 0 14
39418: ADD
39419: ST_TO_ADDR
// end ;
39420: GO 39298
39422: POP
39423: POP
// end ; end ;
39424: LD_VAR 0 7
39428: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39429: LD_INT 0
39431: PPUSH
39432: PPUSH
39433: PPUSH
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
39439: PPUSH
39440: PPUSH
39441: PPUSH
39442: PPUSH
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
// result := false ;
39447: LD_ADDR_VAR 0 3
39451: PUSH
39452: LD_INT 0
39454: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39455: LD_VAR 0 1
39459: NOT
39460: PUSH
39461: LD_VAR 0 1
39465: PPUSH
39466: CALL_OW 266
39470: PUSH
39471: LD_INT 32
39473: PUSH
39474: LD_INT 33
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: IN
39481: NOT
39482: OR
39483: IFFALSE 39487
// exit ;
39485: GO 40623
// nat := GetNation ( tower ) ;
39487: LD_ADDR_VAR 0 12
39491: PUSH
39492: LD_VAR 0 1
39496: PPUSH
39497: CALL_OW 248
39501: ST_TO_ADDR
// side := GetSide ( tower ) ;
39502: LD_ADDR_VAR 0 16
39506: PUSH
39507: LD_VAR 0 1
39511: PPUSH
39512: CALL_OW 255
39516: ST_TO_ADDR
// x := GetX ( tower ) ;
39517: LD_ADDR_VAR 0 10
39521: PUSH
39522: LD_VAR 0 1
39526: PPUSH
39527: CALL_OW 250
39531: ST_TO_ADDR
// y := GetY ( tower ) ;
39532: LD_ADDR_VAR 0 11
39536: PUSH
39537: LD_VAR 0 1
39541: PPUSH
39542: CALL_OW 251
39546: ST_TO_ADDR
// if not x or not y then
39547: LD_VAR 0 10
39551: NOT
39552: PUSH
39553: LD_VAR 0 11
39557: NOT
39558: OR
39559: IFFALSE 39563
// exit ;
39561: GO 40623
// weapon := 0 ;
39563: LD_ADDR_VAR 0 18
39567: PUSH
39568: LD_INT 0
39570: ST_TO_ADDR
// fac_list := [ ] ;
39571: LD_ADDR_VAR 0 17
39575: PUSH
39576: EMPTY
39577: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
39578: LD_ADDR_VAR 0 6
39582: PUSH
39583: LD_VAR 0 1
39587: PPUSH
39588: CALL_OW 274
39592: PPUSH
39593: LD_VAR 0 2
39597: PPUSH
39598: CALL 37201 0 2
39602: PPUSH
39603: LD_INT 30
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PPUSH
39613: CALL_OW 72
39617: ST_TO_ADDR
// if not factories then
39618: LD_VAR 0 6
39622: NOT
39623: IFFALSE 39627
// exit ;
39625: GO 40623
// for i in factories do
39627: LD_ADDR_VAR 0 8
39631: PUSH
39632: LD_VAR 0 6
39636: PUSH
39637: FOR_IN
39638: IFFALSE 39663
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39640: LD_ADDR_VAR 0 17
39644: PUSH
39645: LD_VAR 0 17
39649: PUSH
39650: LD_VAR 0 8
39654: PPUSH
39655: CALL_OW 478
39659: UNION
39660: ST_TO_ADDR
39661: GO 39637
39663: POP
39664: POP
// if not fac_list then
39665: LD_VAR 0 17
39669: NOT
39670: IFFALSE 39674
// exit ;
39672: GO 40623
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39674: LD_ADDR_VAR 0 5
39678: PUSH
39679: LD_INT 4
39681: PUSH
39682: LD_INT 5
39684: PUSH
39685: LD_INT 9
39687: PUSH
39688: LD_INT 10
39690: PUSH
39691: LD_INT 6
39693: PUSH
39694: LD_INT 7
39696: PUSH
39697: LD_INT 11
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 27
39711: PUSH
39712: LD_INT 28
39714: PUSH
39715: LD_INT 26
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 43
39729: PUSH
39730: LD_INT 44
39732: PUSH
39733: LD_INT 46
39735: PUSH
39736: LD_INT 45
39738: PUSH
39739: LD_INT 47
39741: PUSH
39742: LD_INT 49
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: LIST
39757: PUSH
39758: LD_VAR 0 12
39762: ARRAY
39763: ST_TO_ADDR
// for i in list do
39764: LD_ADDR_VAR 0 8
39768: PUSH
39769: LD_VAR 0 5
39773: PUSH
39774: FOR_IN
39775: IFFALSE 39808
// if not i in fac_list then
39777: LD_VAR 0 8
39781: PUSH
39782: LD_VAR 0 17
39786: IN
39787: NOT
39788: IFFALSE 39806
// list := list diff i ;
39790: LD_ADDR_VAR 0 5
39794: PUSH
39795: LD_VAR 0 5
39799: PUSH
39800: LD_VAR 0 8
39804: DIFF
39805: ST_TO_ADDR
39806: GO 39774
39808: POP
39809: POP
// if not list then
39810: LD_VAR 0 5
39814: NOT
39815: IFFALSE 39819
// exit ;
39817: GO 40623
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39819: LD_VAR 0 12
39823: PUSH
39824: LD_INT 3
39826: EQUAL
39827: PUSH
39828: LD_INT 49
39830: PUSH
39831: LD_VAR 0 5
39835: IN
39836: AND
39837: PUSH
39838: LD_INT 31
39840: PPUSH
39841: LD_VAR 0 16
39845: PPUSH
39846: CALL_OW 321
39850: PUSH
39851: LD_INT 2
39853: EQUAL
39854: AND
39855: IFFALSE 39915
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39857: LD_INT 22
39859: PUSH
39860: LD_VAR 0 16
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 35
39871: PUSH
39872: LD_INT 49
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 91
39881: PUSH
39882: LD_VAR 0 1
39886: PUSH
39887: LD_INT 10
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: LIST
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: LIST
39899: PPUSH
39900: CALL_OW 69
39904: NOT
39905: IFFALSE 39915
// weapon := ru_time_lapser ;
39907: LD_ADDR_VAR 0 18
39911: PUSH
39912: LD_INT 49
39914: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39915: LD_VAR 0 12
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 2
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: IN
39930: PUSH
39931: LD_INT 11
39933: PUSH
39934: LD_VAR 0 5
39938: IN
39939: PUSH
39940: LD_INT 30
39942: PUSH
39943: LD_VAR 0 5
39947: IN
39948: OR
39949: AND
39950: PUSH
39951: LD_INT 6
39953: PPUSH
39954: LD_VAR 0 16
39958: PPUSH
39959: CALL_OW 321
39963: PUSH
39964: LD_INT 2
39966: EQUAL
39967: AND
39968: IFFALSE 40133
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39970: LD_INT 22
39972: PUSH
39973: LD_VAR 0 16
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: LD_INT 35
39987: PUSH
39988: LD_INT 11
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 35
39997: PUSH
39998: LD_INT 30
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 91
40012: PUSH
40013: LD_VAR 0 1
40017: PUSH
40018: LD_INT 18
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: LIST
40030: PPUSH
40031: CALL_OW 69
40035: NOT
40036: PUSH
40037: LD_INT 22
40039: PUSH
40040: LD_VAR 0 16
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 30
40054: PUSH
40055: LD_INT 32
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 30
40064: PUSH
40065: LD_INT 33
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 91
40079: PUSH
40080: LD_VAR 0 1
40084: PUSH
40085: LD_INT 12
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: PUSH
40098: EMPTY
40099: LIST
40100: PPUSH
40101: CALL_OW 69
40105: PUSH
40106: LD_INT 2
40108: GREATER
40109: AND
40110: IFFALSE 40133
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40112: LD_ADDR_VAR 0 18
40116: PUSH
40117: LD_INT 11
40119: PUSH
40120: LD_INT 30
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_VAR 0 12
40131: ARRAY
40132: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40133: LD_VAR 0 18
40137: NOT
40138: PUSH
40139: LD_INT 40
40141: PPUSH
40142: LD_VAR 0 16
40146: PPUSH
40147: CALL_OW 321
40151: PUSH
40152: LD_INT 2
40154: EQUAL
40155: AND
40156: PUSH
40157: LD_INT 7
40159: PUSH
40160: LD_VAR 0 5
40164: IN
40165: PUSH
40166: LD_INT 28
40168: PUSH
40169: LD_VAR 0 5
40173: IN
40174: OR
40175: PUSH
40176: LD_INT 45
40178: PUSH
40179: LD_VAR 0 5
40183: IN
40184: OR
40185: AND
40186: IFFALSE 40440
// begin hex := GetHexInfo ( x , y ) ;
40188: LD_ADDR_VAR 0 4
40192: PUSH
40193: LD_VAR 0 10
40197: PPUSH
40198: LD_VAR 0 11
40202: PPUSH
40203: CALL_OW 546
40207: ST_TO_ADDR
// if hex [ 1 ] then
40208: LD_VAR 0 4
40212: PUSH
40213: LD_INT 1
40215: ARRAY
40216: IFFALSE 40220
// exit ;
40218: GO 40623
// height := hex [ 2 ] ;
40220: LD_ADDR_VAR 0 15
40224: PUSH
40225: LD_VAR 0 4
40229: PUSH
40230: LD_INT 2
40232: ARRAY
40233: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40234: LD_ADDR_VAR 0 14
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: LD_INT 3
40247: PUSH
40248: LD_INT 5
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// for i in tmp do
40257: LD_ADDR_VAR 0 8
40261: PUSH
40262: LD_VAR 0 14
40266: PUSH
40267: FOR_IN
40268: IFFALSE 40438
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40270: LD_ADDR_VAR 0 9
40274: PUSH
40275: LD_VAR 0 10
40279: PPUSH
40280: LD_VAR 0 8
40284: PPUSH
40285: LD_INT 5
40287: PPUSH
40288: CALL_OW 272
40292: PUSH
40293: LD_VAR 0 11
40297: PPUSH
40298: LD_VAR 0 8
40302: PPUSH
40303: LD_INT 5
40305: PPUSH
40306: CALL_OW 273
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40315: LD_VAR 0 9
40319: PUSH
40320: LD_INT 1
40322: ARRAY
40323: PPUSH
40324: LD_VAR 0 9
40328: PUSH
40329: LD_INT 2
40331: ARRAY
40332: PPUSH
40333: CALL_OW 488
40337: IFFALSE 40436
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40339: LD_ADDR_VAR 0 4
40343: PUSH
40344: LD_VAR 0 9
40348: PUSH
40349: LD_INT 1
40351: ARRAY
40352: PPUSH
40353: LD_VAR 0 9
40357: PUSH
40358: LD_INT 2
40360: ARRAY
40361: PPUSH
40362: CALL_OW 546
40366: ST_TO_ADDR
// if hex [ 1 ] then
40367: LD_VAR 0 4
40371: PUSH
40372: LD_INT 1
40374: ARRAY
40375: IFFALSE 40379
// continue ;
40377: GO 40267
// h := hex [ 2 ] ;
40379: LD_ADDR_VAR 0 13
40383: PUSH
40384: LD_VAR 0 4
40388: PUSH
40389: LD_INT 2
40391: ARRAY
40392: ST_TO_ADDR
// if h + 7 < height then
40393: LD_VAR 0 13
40397: PUSH
40398: LD_INT 7
40400: PLUS
40401: PUSH
40402: LD_VAR 0 15
40406: LESS
40407: IFFALSE 40436
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40409: LD_ADDR_VAR 0 18
40413: PUSH
40414: LD_INT 7
40416: PUSH
40417: LD_INT 28
40419: PUSH
40420: LD_INT 45
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: LIST
40427: PUSH
40428: LD_VAR 0 12
40432: ARRAY
40433: ST_TO_ADDR
// break ;
40434: GO 40438
// end ; end ; end ;
40436: GO 40267
40438: POP
40439: POP
// end ; if not weapon then
40440: LD_VAR 0 18
40444: NOT
40445: IFFALSE 40505
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40447: LD_ADDR_VAR 0 5
40451: PUSH
40452: LD_VAR 0 5
40456: PUSH
40457: LD_INT 11
40459: PUSH
40460: LD_INT 30
40462: PUSH
40463: LD_INT 49
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: DIFF
40471: ST_TO_ADDR
// if not list then
40472: LD_VAR 0 5
40476: NOT
40477: IFFALSE 40481
// exit ;
40479: GO 40623
// weapon := list [ rand ( 1 , list ) ] ;
40481: LD_ADDR_VAR 0 18
40485: PUSH
40486: LD_VAR 0 5
40490: PUSH
40491: LD_INT 1
40493: PPUSH
40494: LD_VAR 0 5
40498: PPUSH
40499: CALL_OW 12
40503: ARRAY
40504: ST_TO_ADDR
// end ; if weapon then
40505: LD_VAR 0 18
40509: IFFALSE 40623
// begin tmp := CostOfWeapon ( weapon ) ;
40511: LD_ADDR_VAR 0 14
40515: PUSH
40516: LD_VAR 0 18
40520: PPUSH
40521: CALL_OW 451
40525: ST_TO_ADDR
// j := GetBase ( tower ) ;
40526: LD_ADDR_VAR 0 9
40530: PUSH
40531: LD_VAR 0 1
40535: PPUSH
40536: CALL_OW 274
40540: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40541: LD_VAR 0 9
40545: PPUSH
40546: LD_INT 1
40548: PPUSH
40549: CALL_OW 275
40553: PUSH
40554: LD_VAR 0 14
40558: PUSH
40559: LD_INT 1
40561: ARRAY
40562: GREATEREQUAL
40563: PUSH
40564: LD_VAR 0 9
40568: PPUSH
40569: LD_INT 2
40571: PPUSH
40572: CALL_OW 275
40576: PUSH
40577: LD_VAR 0 14
40581: PUSH
40582: LD_INT 2
40584: ARRAY
40585: GREATEREQUAL
40586: AND
40587: PUSH
40588: LD_VAR 0 9
40592: PPUSH
40593: LD_INT 3
40595: PPUSH
40596: CALL_OW 275
40600: PUSH
40601: LD_VAR 0 14
40605: PUSH
40606: LD_INT 3
40608: ARRAY
40609: GREATEREQUAL
40610: AND
40611: IFFALSE 40623
// result := weapon ;
40613: LD_ADDR_VAR 0 3
40617: PUSH
40618: LD_VAR 0 18
40622: ST_TO_ADDR
// end ; end ;
40623: LD_VAR 0 3
40627: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40628: LD_INT 0
40630: PPUSH
40631: PPUSH
// result := true ;
40632: LD_ADDR_VAR 0 3
40636: PUSH
40637: LD_INT 1
40639: ST_TO_ADDR
// if array1 = array2 then
40640: LD_VAR 0 1
40644: PUSH
40645: LD_VAR 0 2
40649: EQUAL
40650: IFFALSE 40710
// begin for i = 1 to array1 do
40652: LD_ADDR_VAR 0 4
40656: PUSH
40657: DOUBLE
40658: LD_INT 1
40660: DEC
40661: ST_TO_ADDR
40662: LD_VAR 0 1
40666: PUSH
40667: FOR_TO
40668: IFFALSE 40706
// if array1 [ i ] <> array2 [ i ] then
40670: LD_VAR 0 1
40674: PUSH
40675: LD_VAR 0 4
40679: ARRAY
40680: PUSH
40681: LD_VAR 0 2
40685: PUSH
40686: LD_VAR 0 4
40690: ARRAY
40691: NONEQUAL
40692: IFFALSE 40704
// begin result := false ;
40694: LD_ADDR_VAR 0 3
40698: PUSH
40699: LD_INT 0
40701: ST_TO_ADDR
// break ;
40702: GO 40706
// end ;
40704: GO 40667
40706: POP
40707: POP
// end else
40708: GO 40718
// result := false ;
40710: LD_ADDR_VAR 0 3
40714: PUSH
40715: LD_INT 0
40717: ST_TO_ADDR
// end ;
40718: LD_VAR 0 3
40722: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40723: LD_INT 0
40725: PPUSH
40726: PPUSH
40727: PPUSH
// pom := GetBase ( fac ) ;
40728: LD_ADDR_VAR 0 5
40732: PUSH
40733: LD_VAR 0 1
40737: PPUSH
40738: CALL_OW 274
40742: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40743: LD_ADDR_VAR 0 4
40747: PUSH
40748: LD_VAR 0 2
40752: PUSH
40753: LD_INT 1
40755: ARRAY
40756: PPUSH
40757: LD_VAR 0 2
40761: PUSH
40762: LD_INT 2
40764: ARRAY
40765: PPUSH
40766: LD_VAR 0 2
40770: PUSH
40771: LD_INT 3
40773: ARRAY
40774: PPUSH
40775: LD_VAR 0 2
40779: PUSH
40780: LD_INT 4
40782: ARRAY
40783: PPUSH
40784: CALL_OW 449
40788: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40789: LD_ADDR_VAR 0 3
40793: PUSH
40794: LD_VAR 0 5
40798: PPUSH
40799: LD_INT 1
40801: PPUSH
40802: CALL_OW 275
40806: PUSH
40807: LD_VAR 0 4
40811: PUSH
40812: LD_INT 1
40814: ARRAY
40815: GREATEREQUAL
40816: PUSH
40817: LD_VAR 0 5
40821: PPUSH
40822: LD_INT 2
40824: PPUSH
40825: CALL_OW 275
40829: PUSH
40830: LD_VAR 0 4
40834: PUSH
40835: LD_INT 2
40837: ARRAY
40838: GREATEREQUAL
40839: AND
40840: PUSH
40841: LD_VAR 0 5
40845: PPUSH
40846: LD_INT 3
40848: PPUSH
40849: CALL_OW 275
40853: PUSH
40854: LD_VAR 0 4
40858: PUSH
40859: LD_INT 3
40861: ARRAY
40862: GREATEREQUAL
40863: AND
40864: ST_TO_ADDR
// end ;
40865: LD_VAR 0 3
40869: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40870: LD_INT 0
40872: PPUSH
40873: PPUSH
40874: PPUSH
40875: PPUSH
// pom := GetBase ( building ) ;
40876: LD_ADDR_VAR 0 3
40880: PUSH
40881: LD_VAR 0 1
40885: PPUSH
40886: CALL_OW 274
40890: ST_TO_ADDR
// if not pom then
40891: LD_VAR 0 3
40895: NOT
40896: IFFALSE 40900
// exit ;
40898: GO 41070
// btype := GetBType ( building ) ;
40900: LD_ADDR_VAR 0 5
40904: PUSH
40905: LD_VAR 0 1
40909: PPUSH
40910: CALL_OW 266
40914: ST_TO_ADDR
// if btype = b_armoury then
40915: LD_VAR 0 5
40919: PUSH
40920: LD_INT 4
40922: EQUAL
40923: IFFALSE 40933
// btype := b_barracks ;
40925: LD_ADDR_VAR 0 5
40929: PUSH
40930: LD_INT 5
40932: ST_TO_ADDR
// if btype = b_depot then
40933: LD_VAR 0 5
40937: PUSH
40938: LD_INT 0
40940: EQUAL
40941: IFFALSE 40951
// btype := b_warehouse ;
40943: LD_ADDR_VAR 0 5
40947: PUSH
40948: LD_INT 1
40950: ST_TO_ADDR
// if btype = b_workshop then
40951: LD_VAR 0 5
40955: PUSH
40956: LD_INT 2
40958: EQUAL
40959: IFFALSE 40969
// btype := b_factory ;
40961: LD_ADDR_VAR 0 5
40965: PUSH
40966: LD_INT 3
40968: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40969: LD_ADDR_VAR 0 4
40973: PUSH
40974: LD_VAR 0 5
40978: PPUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 248
40988: PPUSH
40989: CALL_OW 450
40993: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40994: LD_ADDR_VAR 0 2
40998: PUSH
40999: LD_VAR 0 3
41003: PPUSH
41004: LD_INT 1
41006: PPUSH
41007: CALL_OW 275
41011: PUSH
41012: LD_VAR 0 4
41016: PUSH
41017: LD_INT 1
41019: ARRAY
41020: GREATEREQUAL
41021: PUSH
41022: LD_VAR 0 3
41026: PPUSH
41027: LD_INT 2
41029: PPUSH
41030: CALL_OW 275
41034: PUSH
41035: LD_VAR 0 4
41039: PUSH
41040: LD_INT 2
41042: ARRAY
41043: GREATEREQUAL
41044: AND
41045: PUSH
41046: LD_VAR 0 3
41050: PPUSH
41051: LD_INT 3
41053: PPUSH
41054: CALL_OW 275
41058: PUSH
41059: LD_VAR 0 4
41063: PUSH
41064: LD_INT 3
41066: ARRAY
41067: GREATEREQUAL
41068: AND
41069: ST_TO_ADDR
// end ;
41070: LD_VAR 0 2
41074: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41075: LD_INT 0
41077: PPUSH
41078: PPUSH
41079: PPUSH
// pom := GetBase ( building ) ;
41080: LD_ADDR_VAR 0 4
41084: PUSH
41085: LD_VAR 0 1
41089: PPUSH
41090: CALL_OW 274
41094: ST_TO_ADDR
// if not pom then
41095: LD_VAR 0 4
41099: NOT
41100: IFFALSE 41104
// exit ;
41102: GO 41205
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41104: LD_ADDR_VAR 0 5
41108: PUSH
41109: LD_VAR 0 2
41113: PPUSH
41114: LD_VAR 0 1
41118: PPUSH
41119: CALL_OW 248
41123: PPUSH
41124: CALL_OW 450
41128: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41129: LD_ADDR_VAR 0 3
41133: PUSH
41134: LD_VAR 0 4
41138: PPUSH
41139: LD_INT 1
41141: PPUSH
41142: CALL_OW 275
41146: PUSH
41147: LD_VAR 0 5
41151: PUSH
41152: LD_INT 1
41154: ARRAY
41155: GREATEREQUAL
41156: PUSH
41157: LD_VAR 0 4
41161: PPUSH
41162: LD_INT 2
41164: PPUSH
41165: CALL_OW 275
41169: PUSH
41170: LD_VAR 0 5
41174: PUSH
41175: LD_INT 2
41177: ARRAY
41178: GREATEREQUAL
41179: AND
41180: PUSH
41181: LD_VAR 0 4
41185: PPUSH
41186: LD_INT 3
41188: PPUSH
41189: CALL_OW 275
41193: PUSH
41194: LD_VAR 0 5
41198: PUSH
41199: LD_INT 3
41201: ARRAY
41202: GREATEREQUAL
41203: AND
41204: ST_TO_ADDR
// end ;
41205: LD_VAR 0 3
41209: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
41210: LD_INT 0
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
// result := false ;
41222: LD_ADDR_VAR 0 6
41226: PUSH
41227: LD_INT 0
41229: ST_TO_ADDR
// if not base or not btype or not x or not y then
41230: LD_VAR 0 1
41234: NOT
41235: PUSH
41236: LD_VAR 0 2
41240: NOT
41241: OR
41242: PUSH
41243: LD_VAR 0 3
41247: NOT
41248: OR
41249: PUSH
41250: LD_VAR 0 4
41254: NOT
41255: OR
41256: IFFALSE 41260
// exit ;
41258: GO 41869
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
41260: LD_ADDR_VAR 0 12
41264: PUSH
41265: LD_VAR 0 2
41269: PPUSH
41270: LD_VAR 0 3
41274: PPUSH
41275: LD_VAR 0 4
41279: PPUSH
41280: LD_VAR 0 5
41284: PPUSH
41285: LD_VAR 0 1
41289: PUSH
41290: LD_INT 1
41292: ARRAY
41293: PPUSH
41294: CALL_OW 248
41298: PPUSH
41299: LD_INT 0
41301: PPUSH
41302: CALL 42706 0 6
41306: ST_TO_ADDR
// if not hexes then
41307: LD_VAR 0 12
41311: NOT
41312: IFFALSE 41316
// exit ;
41314: GO 41869
// for i = 1 to hexes do
41316: LD_ADDR_VAR 0 7
41320: PUSH
41321: DOUBLE
41322: LD_INT 1
41324: DEC
41325: ST_TO_ADDR
41326: LD_VAR 0 12
41330: PUSH
41331: FOR_TO
41332: IFFALSE 41867
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41334: LD_ADDR_VAR 0 11
41338: PUSH
41339: LD_VAR 0 12
41343: PUSH
41344: LD_VAR 0 7
41348: ARRAY
41349: PUSH
41350: LD_INT 1
41352: ARRAY
41353: PPUSH
41354: LD_VAR 0 12
41358: PUSH
41359: LD_VAR 0 7
41363: ARRAY
41364: PUSH
41365: LD_INT 2
41367: ARRAY
41368: PPUSH
41369: CALL_OW 428
41373: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41374: LD_VAR 0 12
41378: PUSH
41379: LD_VAR 0 7
41383: ARRAY
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PPUSH
41389: LD_VAR 0 12
41393: PUSH
41394: LD_VAR 0 7
41398: ARRAY
41399: PUSH
41400: LD_INT 2
41402: ARRAY
41403: PPUSH
41404: CALL_OW 351
41408: PUSH
41409: LD_VAR 0 12
41413: PUSH
41414: LD_VAR 0 7
41418: ARRAY
41419: PUSH
41420: LD_INT 1
41422: ARRAY
41423: PPUSH
41424: LD_VAR 0 12
41428: PUSH
41429: LD_VAR 0 7
41433: ARRAY
41434: PUSH
41435: LD_INT 2
41437: ARRAY
41438: PPUSH
41439: CALL_OW 488
41443: NOT
41444: OR
41445: PUSH
41446: LD_VAR 0 11
41450: PPUSH
41451: CALL_OW 247
41455: PUSH
41456: LD_INT 3
41458: EQUAL
41459: OR
41460: IFFALSE 41466
// exit ;
41462: POP
41463: POP
41464: GO 41869
// if not tmp or not tmp in base then
41466: LD_VAR 0 11
41470: NOT
41471: PUSH
41472: LD_VAR 0 11
41476: PUSH
41477: LD_VAR 0 1
41481: IN
41482: NOT
41483: OR
41484: IFFALSE 41488
// continue ;
41486: GO 41331
// result := true ;
41488: LD_ADDR_VAR 0 6
41492: PUSH
41493: LD_INT 1
41495: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41496: LD_ADDR_VAR 0 15
41500: PUSH
41501: LD_VAR 0 1
41505: PPUSH
41506: LD_INT 22
41508: PUSH
41509: LD_VAR 0 11
41513: PPUSH
41514: CALL_OW 255
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 30
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 30
41538: PUSH
41539: LD_INT 1
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PPUSH
41555: CALL_OW 72
41559: ST_TO_ADDR
// if dep then
41560: LD_VAR 0 15
41564: IFFALSE 41700
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41566: LD_ADDR_VAR 0 14
41570: PUSH
41571: LD_VAR 0 15
41575: PUSH
41576: LD_INT 1
41578: ARRAY
41579: PPUSH
41580: CALL_OW 250
41584: PPUSH
41585: LD_VAR 0 15
41589: PUSH
41590: LD_INT 1
41592: ARRAY
41593: PPUSH
41594: CALL_OW 254
41598: PPUSH
41599: LD_INT 5
41601: PPUSH
41602: CALL_OW 272
41606: PUSH
41607: LD_VAR 0 15
41611: PUSH
41612: LD_INT 1
41614: ARRAY
41615: PPUSH
41616: CALL_OW 251
41620: PPUSH
41621: LD_VAR 0 15
41625: PUSH
41626: LD_INT 1
41628: ARRAY
41629: PPUSH
41630: CALL_OW 254
41634: PPUSH
41635: LD_INT 5
41637: PPUSH
41638: CALL_OW 273
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41647: LD_VAR 0 14
41651: PUSH
41652: LD_INT 1
41654: ARRAY
41655: PPUSH
41656: LD_VAR 0 14
41660: PUSH
41661: LD_INT 2
41663: ARRAY
41664: PPUSH
41665: CALL_OW 488
41669: IFFALSE 41700
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41671: LD_VAR 0 11
41675: PPUSH
41676: LD_VAR 0 14
41680: PUSH
41681: LD_INT 1
41683: ARRAY
41684: PPUSH
41685: LD_VAR 0 14
41689: PUSH
41690: LD_INT 2
41692: ARRAY
41693: PPUSH
41694: CALL_OW 111
// continue ;
41698: GO 41331
// end ; end ; r := GetDir ( tmp ) ;
41700: LD_ADDR_VAR 0 13
41704: PUSH
41705: LD_VAR 0 11
41709: PPUSH
41710: CALL_OW 254
41714: ST_TO_ADDR
// if r = 5 then
41715: LD_VAR 0 13
41719: PUSH
41720: LD_INT 5
41722: EQUAL
41723: IFFALSE 41733
// r := 0 ;
41725: LD_ADDR_VAR 0 13
41729: PUSH
41730: LD_INT 0
41732: ST_TO_ADDR
// for j = r to 5 do
41733: LD_ADDR_VAR 0 8
41737: PUSH
41738: DOUBLE
41739: LD_VAR 0 13
41743: DEC
41744: ST_TO_ADDR
41745: LD_INT 5
41747: PUSH
41748: FOR_TO
41749: IFFALSE 41863
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41751: LD_ADDR_VAR 0 9
41755: PUSH
41756: LD_VAR 0 11
41760: PPUSH
41761: CALL_OW 250
41765: PPUSH
41766: LD_VAR 0 8
41770: PPUSH
41771: LD_INT 2
41773: PPUSH
41774: CALL_OW 272
41778: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41779: LD_ADDR_VAR 0 10
41783: PUSH
41784: LD_VAR 0 11
41788: PPUSH
41789: CALL_OW 251
41793: PPUSH
41794: LD_VAR 0 8
41798: PPUSH
41799: LD_INT 2
41801: PPUSH
41802: CALL_OW 273
41806: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41807: LD_VAR 0 9
41811: PPUSH
41812: LD_VAR 0 10
41816: PPUSH
41817: CALL_OW 488
41821: PUSH
41822: LD_VAR 0 9
41826: PPUSH
41827: LD_VAR 0 10
41831: PPUSH
41832: CALL_OW 428
41836: NOT
41837: AND
41838: IFFALSE 41861
// begin ComMoveXY ( tmp , _x , _y ) ;
41840: LD_VAR 0 11
41844: PPUSH
41845: LD_VAR 0 9
41849: PPUSH
41850: LD_VAR 0 10
41854: PPUSH
41855: CALL_OW 111
// break ;
41859: GO 41863
// end ; end ;
41861: GO 41748
41863: POP
41864: POP
// end ;
41865: GO 41331
41867: POP
41868: POP
// end ;
41869: LD_VAR 0 6
41873: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
41874: LD_INT 0
41876: PPUSH
41877: PPUSH
41878: PPUSH
41879: PPUSH
41880: PPUSH
41881: PPUSH
41882: PPUSH
41883: PPUSH
41884: PPUSH
41885: PPUSH
// result := false ;
41886: LD_ADDR_VAR 0 6
41890: PUSH
41891: LD_INT 0
41893: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41894: LD_VAR 0 1
41898: NOT
41899: PUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: CALL_OW 266
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: IN
41920: NOT
41921: OR
41922: PUSH
41923: LD_VAR 0 2
41927: NOT
41928: OR
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: LD_INT 3
41946: PUSH
41947: LD_INT 4
41949: PUSH
41950: LD_INT 5
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: IN
41961: NOT
41962: OR
41963: PUSH
41964: LD_VAR 0 3
41968: PPUSH
41969: LD_VAR 0 4
41973: PPUSH
41974: CALL_OW 488
41978: NOT
41979: OR
41980: IFFALSE 41984
// exit ;
41982: GO 42701
// pom := GetBase ( depot ) ;
41984: LD_ADDR_VAR 0 10
41988: PUSH
41989: LD_VAR 0 1
41993: PPUSH
41994: CALL_OW 274
41998: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41999: LD_ADDR_VAR 0 11
42003: PUSH
42004: LD_VAR 0 2
42008: PPUSH
42009: LD_VAR 0 1
42013: PPUSH
42014: CALL_OW 248
42018: PPUSH
42019: CALL_OW 450
42023: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42024: LD_VAR 0 10
42028: PPUSH
42029: LD_INT 1
42031: PPUSH
42032: CALL_OW 275
42036: PUSH
42037: LD_VAR 0 11
42041: PUSH
42042: LD_INT 1
42044: ARRAY
42045: GREATEREQUAL
42046: PUSH
42047: LD_VAR 0 10
42051: PPUSH
42052: LD_INT 2
42054: PPUSH
42055: CALL_OW 275
42059: PUSH
42060: LD_VAR 0 11
42064: PUSH
42065: LD_INT 2
42067: ARRAY
42068: GREATEREQUAL
42069: AND
42070: PUSH
42071: LD_VAR 0 10
42075: PPUSH
42076: LD_INT 3
42078: PPUSH
42079: CALL_OW 275
42083: PUSH
42084: LD_VAR 0 11
42088: PUSH
42089: LD_INT 3
42091: ARRAY
42092: GREATEREQUAL
42093: AND
42094: NOT
42095: IFFALSE 42099
// exit ;
42097: GO 42701
// if GetBType ( depot ) = b_depot then
42099: LD_VAR 0 1
42103: PPUSH
42104: CALL_OW 266
42108: PUSH
42109: LD_INT 0
42111: EQUAL
42112: IFFALSE 42124
// dist := 28 else
42114: LD_ADDR_VAR 0 14
42118: PUSH
42119: LD_INT 28
42121: ST_TO_ADDR
42122: GO 42132
// dist := 36 ;
42124: LD_ADDR_VAR 0 14
42128: PUSH
42129: LD_INT 36
42131: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42132: LD_VAR 0 1
42136: PPUSH
42137: LD_VAR 0 3
42141: PPUSH
42142: LD_VAR 0 4
42146: PPUSH
42147: CALL_OW 297
42151: PUSH
42152: LD_VAR 0 14
42156: GREATER
42157: IFFALSE 42161
// exit ;
42159: GO 42701
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42161: LD_ADDR_VAR 0 12
42165: PUSH
42166: LD_VAR 0 2
42170: PPUSH
42171: LD_VAR 0 3
42175: PPUSH
42176: LD_VAR 0 4
42180: PPUSH
42181: LD_VAR 0 5
42185: PPUSH
42186: LD_VAR 0 1
42190: PPUSH
42191: CALL_OW 248
42195: PPUSH
42196: LD_INT 0
42198: PPUSH
42199: CALL 42706 0 6
42203: ST_TO_ADDR
// if not hexes then
42204: LD_VAR 0 12
42208: NOT
42209: IFFALSE 42213
// exit ;
42211: GO 42701
// hex := GetHexInfo ( x , y ) ;
42213: LD_ADDR_VAR 0 15
42217: PUSH
42218: LD_VAR 0 3
42222: PPUSH
42223: LD_VAR 0 4
42227: PPUSH
42228: CALL_OW 546
42232: ST_TO_ADDR
// if hex [ 1 ] then
42233: LD_VAR 0 15
42237: PUSH
42238: LD_INT 1
42240: ARRAY
42241: IFFALSE 42245
// exit ;
42243: GO 42701
// height := hex [ 2 ] ;
42245: LD_ADDR_VAR 0 13
42249: PUSH
42250: LD_VAR 0 15
42254: PUSH
42255: LD_INT 2
42257: ARRAY
42258: ST_TO_ADDR
// for i = 1 to hexes do
42259: LD_ADDR_VAR 0 7
42263: PUSH
42264: DOUBLE
42265: LD_INT 1
42267: DEC
42268: ST_TO_ADDR
42269: LD_VAR 0 12
42273: PUSH
42274: FOR_TO
42275: IFFALSE 42605
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42277: LD_VAR 0 12
42281: PUSH
42282: LD_VAR 0 7
42286: ARRAY
42287: PUSH
42288: LD_INT 1
42290: ARRAY
42291: PPUSH
42292: LD_VAR 0 12
42296: PUSH
42297: LD_VAR 0 7
42301: ARRAY
42302: PUSH
42303: LD_INT 2
42305: ARRAY
42306: PPUSH
42307: CALL_OW 488
42311: NOT
42312: PUSH
42313: LD_VAR 0 12
42317: PUSH
42318: LD_VAR 0 7
42322: ARRAY
42323: PUSH
42324: LD_INT 1
42326: ARRAY
42327: PPUSH
42328: LD_VAR 0 12
42332: PUSH
42333: LD_VAR 0 7
42337: ARRAY
42338: PUSH
42339: LD_INT 2
42341: ARRAY
42342: PPUSH
42343: CALL_OW 428
42347: PUSH
42348: LD_INT 0
42350: GREATER
42351: OR
42352: PUSH
42353: LD_VAR 0 12
42357: PUSH
42358: LD_VAR 0 7
42362: ARRAY
42363: PUSH
42364: LD_INT 1
42366: ARRAY
42367: PPUSH
42368: LD_VAR 0 12
42372: PUSH
42373: LD_VAR 0 7
42377: ARRAY
42378: PUSH
42379: LD_INT 2
42381: ARRAY
42382: PPUSH
42383: CALL_OW 351
42387: OR
42388: IFFALSE 42394
// exit ;
42390: POP
42391: POP
42392: GO 42701
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42394: LD_ADDR_VAR 0 8
42398: PUSH
42399: LD_VAR 0 12
42403: PUSH
42404: LD_VAR 0 7
42408: ARRAY
42409: PUSH
42410: LD_INT 1
42412: ARRAY
42413: PPUSH
42414: LD_VAR 0 12
42418: PUSH
42419: LD_VAR 0 7
42423: ARRAY
42424: PUSH
42425: LD_INT 2
42427: ARRAY
42428: PPUSH
42429: CALL_OW 546
42433: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42434: LD_VAR 0 8
42438: PUSH
42439: LD_INT 1
42441: ARRAY
42442: PUSH
42443: LD_VAR 0 8
42447: PUSH
42448: LD_INT 2
42450: ARRAY
42451: PUSH
42452: LD_VAR 0 13
42456: PUSH
42457: LD_INT 2
42459: PLUS
42460: GREATER
42461: OR
42462: PUSH
42463: LD_VAR 0 8
42467: PUSH
42468: LD_INT 2
42470: ARRAY
42471: PUSH
42472: LD_VAR 0 13
42476: PUSH
42477: LD_INT 2
42479: MINUS
42480: LESS
42481: OR
42482: PUSH
42483: LD_VAR 0 8
42487: PUSH
42488: LD_INT 3
42490: ARRAY
42491: PUSH
42492: LD_INT 0
42494: PUSH
42495: LD_INT 8
42497: PUSH
42498: LD_INT 9
42500: PUSH
42501: LD_INT 10
42503: PUSH
42504: LD_INT 11
42506: PUSH
42507: LD_INT 12
42509: PUSH
42510: LD_INT 13
42512: PUSH
42513: LD_INT 16
42515: PUSH
42516: LD_INT 17
42518: PUSH
42519: LD_INT 18
42521: PUSH
42522: LD_INT 19
42524: PUSH
42525: LD_INT 20
42527: PUSH
42528: LD_INT 21
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: IN
42546: NOT
42547: OR
42548: PUSH
42549: LD_VAR 0 8
42553: PUSH
42554: LD_INT 5
42556: ARRAY
42557: NOT
42558: OR
42559: PUSH
42560: LD_VAR 0 8
42564: PUSH
42565: LD_INT 6
42567: ARRAY
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 2
42574: PUSH
42575: LD_INT 7
42577: PUSH
42578: LD_INT 9
42580: PUSH
42581: LD_INT 10
42583: PUSH
42584: LD_INT 11
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: IN
42595: NOT
42596: OR
42597: IFFALSE 42603
// exit ;
42599: POP
42600: POP
42601: GO 42701
// end ;
42603: GO 42274
42605: POP
42606: POP
// side := GetSide ( depot ) ;
42607: LD_ADDR_VAR 0 9
42611: PUSH
42612: LD_VAR 0 1
42616: PPUSH
42617: CALL_OW 255
42621: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42622: LD_VAR 0 9
42626: PPUSH
42627: LD_VAR 0 3
42631: PPUSH
42632: LD_VAR 0 4
42636: PPUSH
42637: LD_INT 20
42639: PPUSH
42640: CALL 35355 0 4
42644: PUSH
42645: LD_INT 4
42647: ARRAY
42648: IFFALSE 42652
// exit ;
42650: GO 42701
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42652: LD_VAR 0 2
42656: PUSH
42657: LD_INT 29
42659: PUSH
42660: LD_INT 30
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: IN
42667: PUSH
42668: LD_VAR 0 3
42672: PPUSH
42673: LD_VAR 0 4
42677: PPUSH
42678: LD_VAR 0 9
42682: PPUSH
42683: CALL_OW 440
42687: NOT
42688: AND
42689: IFFALSE 42693
// exit ;
42691: GO 42701
// result := true ;
42693: LD_ADDR_VAR 0 6
42697: PUSH
42698: LD_INT 1
42700: ST_TO_ADDR
// end ;
42701: LD_VAR 0 6
42705: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42706: LD_INT 0
42708: PPUSH
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
42720: PPUSH
42721: PPUSH
42722: PPUSH
42723: PPUSH
42724: PPUSH
42725: PPUSH
42726: PPUSH
42727: PPUSH
42728: PPUSH
42729: PPUSH
42730: PPUSH
42731: PPUSH
42732: PPUSH
42733: PPUSH
42734: PPUSH
42735: PPUSH
42736: PPUSH
42737: PPUSH
42738: PPUSH
42739: PPUSH
42740: PPUSH
42741: PPUSH
42742: PPUSH
42743: PPUSH
42744: PPUSH
42745: PPUSH
42746: PPUSH
42747: PPUSH
42748: PPUSH
42749: PPUSH
42750: PPUSH
42751: PPUSH
42752: PPUSH
42753: PPUSH
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
42761: PPUSH
42762: PPUSH
42763: PPUSH
42764: PPUSH
42765: PPUSH
// result = [ ] ;
42766: LD_ADDR_VAR 0 7
42770: PUSH
42771: EMPTY
42772: ST_TO_ADDR
// temp_list = [ ] ;
42773: LD_ADDR_VAR 0 9
42777: PUSH
42778: EMPTY
42779: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42780: LD_VAR 0 4
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 3
42796: PUSH
42797: LD_INT 4
42799: PUSH
42800: LD_INT 5
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: IN
42811: NOT
42812: PUSH
42813: LD_VAR 0 1
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: IN
42828: PUSH
42829: LD_VAR 0 5
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 2
42839: PUSH
42840: LD_INT 3
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: IN
42848: NOT
42849: AND
42850: OR
42851: IFFALSE 42855
// exit ;
42853: GO 61246
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42855: LD_VAR 0 1
42859: PUSH
42860: LD_INT 6
42862: PUSH
42863: LD_INT 7
42865: PUSH
42866: LD_INT 8
42868: PUSH
42869: LD_INT 13
42871: PUSH
42872: LD_INT 12
42874: PUSH
42875: LD_INT 15
42877: PUSH
42878: LD_INT 11
42880: PUSH
42881: LD_INT 14
42883: PUSH
42884: LD_INT 10
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: IN
42898: IFFALSE 42908
// btype = b_lab ;
42900: LD_ADDR_VAR 0 1
42904: PUSH
42905: LD_INT 6
42907: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42908: LD_VAR 0 6
42912: PUSH
42913: LD_INT 0
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: LIST
42926: IN
42927: NOT
42928: PUSH
42929: LD_VAR 0 1
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: LD_INT 2
42942: PUSH
42943: LD_INT 3
42945: PUSH
42946: LD_INT 6
42948: PUSH
42949: LD_INT 36
42951: PUSH
42952: LD_INT 4
42954: PUSH
42955: LD_INT 5
42957: PUSH
42958: LD_INT 31
42960: PUSH
42961: LD_INT 32
42963: PUSH
42964: LD_INT 33
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: IN
42980: NOT
42981: PUSH
42982: LD_VAR 0 6
42986: PUSH
42987: LD_INT 1
42989: EQUAL
42990: AND
42991: OR
42992: PUSH
42993: LD_VAR 0 1
42997: PUSH
42998: LD_INT 2
43000: PUSH
43001: LD_INT 3
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: IN
43008: NOT
43009: PUSH
43010: LD_VAR 0 6
43014: PUSH
43015: LD_INT 2
43017: EQUAL
43018: AND
43019: OR
43020: IFFALSE 43030
// mode = 0 ;
43022: LD_ADDR_VAR 0 6
43026: PUSH
43027: LD_INT 0
43029: ST_TO_ADDR
// case mode of 0 :
43030: LD_VAR 0 6
43034: PUSH
43035: LD_INT 0
43037: DOUBLE
43038: EQUAL
43039: IFTRUE 43043
43041: GO 54496
43043: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43044: LD_ADDR_VAR 0 11
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 1
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 2
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 1
43151: NEG
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 3
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: EMPTY
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43237: LD_ADDR_VAR 0 12
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 0
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 1
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 1
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 1
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 1
43349: NEG
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 2
43360: NEG
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 2
43371: NEG
43372: PUSH
43373: LD_INT 1
43375: NEG
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 3
43394: NEG
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 3
43405: NEG
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43433: LD_ADDR_VAR 0 13
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 0
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: NEG
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: LD_INT 2
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 3
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 3
43592: NEG
43593: PUSH
43594: LD_INT 2
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 3
43604: NEG
43605: PUSH
43606: LD_INT 3
43608: NEG
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43632: LD_ADDR_VAR 0 14
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 0
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: LD_INT 2
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: LD_INT 0
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 1
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 3
43782: NEG
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: LD_INT 3
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 1
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43828: LD_ADDR_VAR 0 15
43832: PUSH
43833: LD_INT 0
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: LD_INT 1
43848: NEG
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 0
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 2
43930: PUSH
43931: LD_INT 1
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 2
43962: NEG
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 3
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 3
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44021: LD_ADDR_VAR 0 16
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 0
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 2
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 2
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: NEG
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: LD_INT 2
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 3
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 3
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: LD_INT 3
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44214: LD_ADDR_VAR 0 17
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: PUSH
44399: LD_INT 2
44401: NEG
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: NEG
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44444: LD_ADDR_VAR 0 18
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: PUSH
44473: LD_INT 0
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: PUSH
44483: LD_INT 1
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: LD_INT 1
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: LD_INT 0
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: LD_INT 2
44540: NEG
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 2
44579: PUSH
44580: LD_INT 2
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 2
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: NEG
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: NEG
44644: PUSH
44645: LD_INT 2
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44674: LD_ADDR_VAR 0 19
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 0
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 0
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 1
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: LD_INT 2
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 2
44850: NEG
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: LD_INT 2
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44904: LD_ADDR_VAR 0 20
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 1
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 0
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 1
44962: NEG
44963: PUSH
44964: LD_INT 0
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 0
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 2
45080: NEG
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: NEG
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: NEG
45104: PUSH
45105: LD_INT 2
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45134: LD_ADDR_VAR 0 21
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 2
45219: NEG
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 0
45227: PUSH
45228: LD_INT 2
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 1
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 2
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 0
45289: PUSH
45290: LD_INT 2
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: NEG
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 2
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45364: LD_ADDR_VAR 0 22
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45594: LD_ADDR_VAR 0 23
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: NEG
45806: PUSH
45807: LD_INT 3
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: LD_INT 1
45817: NEG
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: LD_INT 1
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45874: LD_ADDR_VAR 0 24
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 1
45932: NEG
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 1
45955: NEG
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 1
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 2
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 2
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 2
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 3
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46150: LD_ADDR_VAR 0 25
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 0
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 1
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 0
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 1
46231: NEG
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 2
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: PUSH
46286: LD_INT 2
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 2
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 0
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 3
46361: PUSH
46362: LD_INT 1
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 3
46371: PUSH
46372: LD_INT 2
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 1
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46424: LD_ADDR_VAR 0 26
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 0
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 2
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 2
46600: NEG
46601: PUSH
46602: LD_INT 0
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 2
46611: NEG
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 3
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 3
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 1
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46700: LD_ADDR_VAR 0 27
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 2
46922: NEG
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 3
46945: NEG
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46980: LD_ADDR_VAR 0 28
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: LD_INT 2
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 0
47073: PUSH
47074: LD_INT 2
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 2
47156: NEG
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 2
47191: NEG
47192: PUSH
47193: LD_INT 3
47195: NEG
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 3
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 3
47215: NEG
47216: PUSH
47217: LD_INT 1
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 3
47227: NEG
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47262: LD_ADDR_VAR 0 29
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 0
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 1
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 2
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 3
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 2
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 3
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: LD_INT 3
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47541: LD_ADDR_VAR 0 30
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 0
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 3
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 3
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47819: LD_ADDR_VAR 0 31
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 2
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 2
47933: PUSH
47934: LD_INT 1
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: NEG
48009: PUSH
48010: LD_INT 3
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 2
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 3
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: NEG
48052: PUSH
48053: LD_INT 2
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 3
48062: NEG
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48097: LD_ADDR_VAR 0 32
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: NEG
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: LD_INT 2
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: LD_INT 2
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: NEG
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 2
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 3
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 3
48340: NEG
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48375: LD_ADDR_VAR 0 33
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: LD_INT 1
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 2
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: NEG
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: NEG
48609: PUSH
48610: LD_INT 2
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48654: LD_ADDR_VAR 0 34
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: LD_INT 1
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: LD_INT 3
48849: NEG
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 3
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 3
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48934: LD_ADDR_VAR 0 35
48938: PUSH
48939: LD_INT 0
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 0
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: NEG
49004: PUSH
49005: LD_INT 1
49007: NEG
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 2
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49046: LD_ADDR_VAR 0 36
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 1
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 1
49115: NEG
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49158: LD_ADDR_VAR 0 37
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: LD_INT 0
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: LD_INT 1
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: NEG
49217: PUSH
49218: LD_INT 0
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49270: LD_ADDR_VAR 0 38
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 0
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: NEG
49362: PUSH
49363: LD_INT 1
49365: NEG
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49382: LD_ADDR_VAR 0 39
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 1
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: LIST
49493: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49494: LD_ADDR_VAR 0 40
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 0
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: NEG
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49606: LD_ADDR_VAR 0 41
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: NEG
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 1
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 1
49811: NEG
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 3
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 3
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 3
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 3
49880: NEG
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: LD_INT 3
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49956: LD_ADDR_VAR 0 42
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 0
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 1
50014: NEG
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 2
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 1
50158: NEG
50159: PUSH
50160: LD_INT 3
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 0
50170: PUSH
50171: LD_INT 3
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 3
50192: PUSH
50193: LD_INT 2
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 3
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: LD_INT 3
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 3
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: LD_INT 2
50257: NEG
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 3
50265: NEG
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50306: LD_ADDR_VAR 0 43
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: LD_INT 0
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 0
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: LD_INT 0
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 1
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: NEG
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: LD_INT 2
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 0
50399: PUSH
50400: LD_INT 2
50402: NEG
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 0
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: LD_INT 3
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 3
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 2
50521: NEG
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 3
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 3
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 3
50602: NEG
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50654: LD_ADDR_VAR 0 44
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 1
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 3
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 3
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 3
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: LD_INT 3
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 3
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: NEG
50952: PUSH
50953: LD_INT 2
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 3
50963: NEG
50964: PUSH
50965: LD_INT 3
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51004: LD_ADDR_VAR 0 45
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: NEG
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 2
51194: NEG
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 3
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 3
51301: NEG
51302: PUSH
51303: LD_INT 2
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: LD_INT 3
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51354: LD_ADDR_VAR 0 46
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 1
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 0
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: LD_INT 1
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: NEG
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: LD_INT 3
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 3
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 3
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 2
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 3
51650: NEG
51651: PUSH
51652: LD_INT 0
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: NEG
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51702: LD_ADDR_VAR 0 47
51706: PUSH
51707: LD_INT 0
51709: PUSH
51710: LD_INT 0
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 0
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 1
51771: NEG
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 2
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 2
51817: NEG
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51853: LD_ADDR_VAR 0 48
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: NEG
51935: PUSH
51936: LD_INT 2
51938: NEG
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 2
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52000: LD_ADDR_VAR 0 49
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: NEG
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 1
52069: NEG
52070: PUSH
52071: LD_INT 1
52073: NEG
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52144: LD_ADDR_VAR 0 50
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: LD_INT 1
52164: NEG
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: LD_INT 0
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52288: LD_ADDR_VAR 0 51
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 0
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 0
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52435: LD_ADDR_VAR 0 52
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: NEG
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 2
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52586: LD_ADDR_VAR 0 53
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 0
52603: PUSH
52604: LD_INT 1
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 1
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 1
52659: NEG
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 1
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: LD_INT 2
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: NEG
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52816: LD_ADDR_VAR 0 54
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53046: LD_ADDR_VAR 0 55
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 0
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: NEG
53128: PUSH
53129: LD_INT 2
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: LD_INT 2
53142: NEG
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 1
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: PUSH
53182: LD_INT 2
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: LD_INT 2
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: LD_INT 1
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: LD_INT 2
53222: NEG
53223: PUSH
53224: LD_INT 0
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: LD_INT 1
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53276: LD_ADDR_VAR 0 56
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 0
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 0
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 1
53349: NEG
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: PUSH
53355: LD_INT 1
53357: NEG
53358: PUSH
53359: LD_INT 2
53361: NEG
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: NEG
53453: PUSH
53454: LD_INT 0
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53506: LD_ADDR_VAR 0 57
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 0
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 0
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 1
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: LD_INT 1
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 1
53587: NEG
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: LD_INT 2
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 2
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 1
53671: NEG
53672: PUSH
53673: LD_INT 1
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 0
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: LD_INT 1
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53736: LD_ADDR_VAR 0 58
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 0
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 0
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: NEG
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53966: LD_ADDR_VAR 0 59
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 1
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 1
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54054: LD_ADDR_VAR 0 60
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54142: LD_ADDR_VAR 0 61
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 0
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54230: LD_ADDR_VAR 0 62
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 1
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: LD_INT 1
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: NEG
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54318: LD_ADDR_VAR 0 63
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 0
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54406: LD_ADDR_VAR 0 64
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 0
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: ST_TO_ADDR
// end ; 1 :
54494: GO 60391
54496: LD_INT 1
54498: DOUBLE
54499: EQUAL
54500: IFTRUE 54504
54502: GO 57127
54504: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54505: LD_ADDR_VAR 0 11
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: LD_INT 3
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: LD_INT 3
54527: NEG
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54549: LD_ADDR_VAR 0 12
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 3
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54590: LD_ADDR_VAR 0 13
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: LIST
54629: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54630: LD_ADDR_VAR 0 14
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 3
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: LD_INT 3
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: LIST
54670: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54671: LD_ADDR_VAR 0 15
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 3
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: LIST
54714: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54715: LD_ADDR_VAR 0 16
54719: PUSH
54720: LD_INT 2
54722: NEG
54723: PUSH
54724: LD_INT 3
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 3
54734: NEG
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 3
54746: NEG
54747: PUSH
54748: LD_INT 3
54750: NEG
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: LIST
54760: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54761: LD_ADDR_VAR 0 17
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 3
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: LD_INT 3
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: PUSH
54792: LD_INT 2
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: LIST
54804: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54805: LD_ADDR_VAR 0 18
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54846: LD_ADDR_VAR 0 19
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: LIST
54885: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54886: LD_ADDR_VAR 0 20
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 3
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 1
54913: NEG
54914: PUSH
54915: LD_INT 2
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54927: LD_ADDR_VAR 0 21
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: LD_INT 1
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: LIST
54970: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54971: LD_ADDR_VAR 0 22
54975: PUSH
54976: LD_INT 2
54978: NEG
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 3
54990: NEG
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 3
55002: NEG
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: LIST
55016: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55017: LD_ADDR_VAR 0 23
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 4
55039: NEG
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: PUSH
55048: LD_INT 3
55050: NEG
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: LIST
55060: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55061: LD_ADDR_VAR 0 24
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 3
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 4
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: LIST
55101: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55102: LD_ADDR_VAR 0 25
55106: PUSH
55107: LD_INT 3
55109: PUSH
55110: LD_INT 3
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: LD_INT 3
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: LD_INT 4
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55142: LD_ADDR_VAR 0 26
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 1
55159: PUSH
55160: LD_INT 4
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: NEG
55170: PUSH
55171: LD_INT 3
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55183: LD_ADDR_VAR 0 27
55187: PUSH
55188: LD_INT 3
55190: NEG
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 3
55201: NEG
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 4
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: LIST
55226: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55227: LD_ADDR_VAR 0 28
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: LD_INT 3
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 3
55246: NEG
55247: PUSH
55248: LD_INT 4
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 4
55258: NEG
55259: PUSH
55260: LD_INT 3
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: LIST
55272: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55273: LD_ADDR_VAR 0 29
55277: PUSH
55278: LD_INT 1
55280: NEG
55281: PUSH
55282: LD_INT 3
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 3
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 1
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: LD_INT 4
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 4
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 5
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 5
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 4
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: LD_INT 6
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 6
55397: NEG
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 5
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55428: LD_ADDR_VAR 0 30
55432: PUSH
55433: LD_INT 2
55435: PUSH
55436: LD_INT 1
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 3
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 4
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 4
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 4
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 5
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 5
55518: PUSH
55519: LD_INT 1
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 5
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 6
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 6
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55571: LD_ADDR_VAR 0 31
55575: PUSH
55576: LD_INT 3
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: LD_INT 3
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 2
55598: PUSH
55599: LD_INT 3
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 4
55608: PUSH
55609: LD_INT 3
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 4
55618: PUSH
55619: LD_INT 4
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 5
55638: PUSH
55639: LD_INT 4
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 5
55648: PUSH
55649: LD_INT 5
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 4
55658: PUSH
55659: LD_INT 5
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 6
55668: PUSH
55669: LD_INT 5
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 6
55678: PUSH
55679: LD_INT 6
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 5
55688: PUSH
55689: LD_INT 6
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55710: LD_ADDR_VAR 0 32
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 3
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 3
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 4
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: LD_INT 5
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: LD_INT 5
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 4
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: LD_INT 6
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 6
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 5
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55853: LD_ADDR_VAR 0 33
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: LD_INT 1
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 3
55871: NEG
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 3
55882: NEG
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 3
55894: NEG
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 4
55905: NEG
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 4
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 4
55928: NEG
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 5
55939: NEG
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 5
55950: NEG
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 5
55962: NEG
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 6
55973: NEG
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 6
55984: NEG
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56008: LD_ADDR_VAR 0 34
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: LD_INT 3
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: LD_INT 3
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 3
56051: NEG
56052: PUSH
56053: LD_INT 4
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 4
56063: NEG
56064: PUSH
56065: LD_INT 3
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 4
56075: NEG
56076: PUSH
56077: LD_INT 4
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 4
56087: NEG
56088: PUSH
56089: LD_INT 5
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 5
56099: NEG
56100: PUSH
56101: LD_INT 4
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 5
56111: NEG
56112: PUSH
56113: LD_INT 5
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 5
56123: NEG
56124: PUSH
56125: LD_INT 6
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 6
56135: NEG
56136: PUSH
56137: LD_INT 5
56139: NEG
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 6
56147: NEG
56148: PUSH
56149: LD_INT 6
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56171: LD_ADDR_VAR 0 41
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: NEG
56190: PUSH
56191: LD_INT 3
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: LD_INT 2
56204: NEG
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: LIST
56214: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56215: LD_ADDR_VAR 0 42
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 3
56243: PUSH
56244: LD_INT 1
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: LIST
56255: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56256: LD_ADDR_VAR 0 43
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 3
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 3
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56296: LD_ADDR_VAR 0 44
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 2
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: LIST
56336: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56337: LD_ADDR_VAR 0 45
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 2
56355: NEG
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 3
56366: NEG
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: LIST
56380: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56381: LD_ADDR_VAR 0 46
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: NEG
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56427: LD_ADDR_VAR 0 47
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 1
56446: NEG
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56460: LD_ADDR_VAR 0 48
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56491: LD_ADDR_VAR 0 49
56495: PUSH
56496: LD_INT 3
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56520: LD_ADDR_VAR 0 50
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 3
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: LD_INT 3
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56549: LD_ADDR_VAR 0 51
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56580: LD_ADDR_VAR 0 52
56584: PUSH
56585: LD_INT 3
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 3
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56613: LD_ADDR_VAR 0 53
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 3
56635: NEG
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 2
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: LIST
56656: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56657: LD_ADDR_VAR 0 54
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 1
56667: NEG
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 3
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56698: LD_ADDR_VAR 0 55
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: LD_INT 3
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56738: LD_ADDR_VAR 0 56
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: LD_INT 3
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: NEG
56766: PUSH
56767: LD_INT 2
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56779: LD_ADDR_VAR 0 57
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: NEG
56798: PUSH
56799: LD_INT 0
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 3
56808: NEG
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: LIST
56822: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56823: LD_ADDR_VAR 0 58
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 3
56842: NEG
56843: PUSH
56844: LD_INT 2
56846: NEG
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 3
56854: NEG
56855: PUSH
56856: LD_INT 3
56858: NEG
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: LIST
56868: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56869: LD_ADDR_VAR 0 59
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 2
56880: NEG
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: LIST
56912: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56913: LD_ADDR_VAR 0 60
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: LD_INT 1
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 2
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: LD_INT 1
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: LIST
56953: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56954: LD_ADDR_VAR 0 61
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 2
56971: PUSH
56972: LD_INT 2
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 2
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56994: LD_ADDR_VAR 0 62
56998: PUSH
56999: LD_INT 1
57001: PUSH
57002: LD_INT 2
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 0
57011: PUSH
57012: LD_INT 2
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57035: LD_ADDR_VAR 0 63
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: NEG
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 2
57064: NEG
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57079: LD_ADDR_VAR 0 64
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 2
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: ST_TO_ADDR
// end ; 2 :
57125: GO 60391
57127: LD_INT 2
57129: DOUBLE
57130: EQUAL
57131: IFTRUE 57135
57133: GO 60390
57135: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57136: LD_ADDR_VAR 0 29
57140: PUSH
57141: LD_INT 4
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 4
57153: PUSH
57154: LD_INT 1
57156: NEG
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: PUSH
57162: LD_INT 5
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 5
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 4
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: LD_INT 1
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: LD_INT 2
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 5
57226: PUSH
57227: LD_INT 2
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 3
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 4
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 4
57266: PUSH
57267: LD_INT 4
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 3
57276: PUSH
57277: LD_INT 4
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 2
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 4
57306: PUSH
57307: LD_INT 2
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 4
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 3
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: LD_INT 5
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: LD_INT 5
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 1
57387: NEG
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 5
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 3
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 3
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: LD_INT 0
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: LD_INT 1
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: NEG
57476: PUSH
57477: LD_INT 0
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 4
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 4
57498: NEG
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 2
57510: NEG
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 4
57521: NEG
57522: PUSH
57523: LD_INT 4
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 4
57533: NEG
57534: PUSH
57535: LD_INT 5
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 3
57545: NEG
57546: PUSH
57547: LD_INT 4
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: NEG
57558: PUSH
57559: LD_INT 3
57561: NEG
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 4
57569: NEG
57570: PUSH
57571: LD_INT 3
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 5
57581: NEG
57582: PUSH
57583: LD_INT 4
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 5
57593: NEG
57594: PUSH
57595: LD_INT 5
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: NEG
57606: PUSH
57607: LD_INT 5
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 5
57617: NEG
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57674: LD_ADDR_VAR 0 30
57678: PUSH
57679: LD_INT 4
57681: PUSH
57682: LD_INT 4
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 5
57701: PUSH
57702: LD_INT 4
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 5
57711: PUSH
57712: LD_INT 5
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: LD_INT 5
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 3
57731: PUSH
57732: LD_INT 4
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 5
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: PUSH
57762: LD_INT 5
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: LD_INT 3
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 4
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 4
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 3
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 2
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 4
57864: NEG
57865: PUSH
57866: LD_INT 0
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 4
57875: NEG
57876: PUSH
57877: LD_INT 1
57879: NEG
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 3
57887: NEG
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: NEG
57899: PUSH
57900: LD_INT 1
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: NEG
57910: PUSH
57911: LD_INT 1
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 5
57920: NEG
57921: PUSH
57922: LD_INT 0
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 5
57931: NEG
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 5
57943: NEG
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 3
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 3
57966: NEG
57967: PUSH
57968: LD_INT 3
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: LD_INT 4
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 2
58002: NEG
58003: PUSH
58004: LD_INT 2
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: LD_INT 2
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: NEG
58027: PUSH
58028: LD_INT 3
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 4
58038: NEG
58039: PUSH
58040: LD_INT 4
58042: NEG
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: LD_INT 4
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 4
58062: NEG
58063: PUSH
58064: LD_INT 2
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 4
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 5
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 4
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: LD_INT 3
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 3
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 4
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 5
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: LD_INT 3
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: NEG
58165: PUSH
58166: LD_INT 5
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58221: LD_ADDR_VAR 0 31
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 4
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: LD_INT 4
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: LD_INT 5
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 5
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: NEG
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 5
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 3
58321: NEG
58322: PUSH
58323: LD_INT 0
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 3
58332: NEG
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 3
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 4
58377: NEG
58378: PUSH
58379: LD_INT 0
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 4
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 4
58400: NEG
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 2
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 4
58423: NEG
58424: PUSH
58425: LD_INT 4
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 4
58435: NEG
58436: PUSH
58437: LD_INT 5
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: LD_INT 4
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 3
58459: NEG
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: LD_INT 3
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 5
58483: NEG
58484: PUSH
58485: LD_INT 4
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 5
58495: NEG
58496: PUSH
58497: LD_INT 5
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 3
58507: NEG
58508: PUSH
58509: LD_INT 5
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: LD_INT 3
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: LD_INT 3
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 4
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 3
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: LD_INT 4
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: LD_INT 4
58625: NEG
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 4
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 4
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 5
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 5
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 3
58705: PUSH
58706: LD_INT 2
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 5
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58771: LD_ADDR_VAR 0 32
58775: PUSH
58776: LD_INT 4
58778: NEG
58779: PUSH
58780: LD_INT 0
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 4
58789: NEG
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 4
58823: NEG
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 5
58834: NEG
58835: PUSH
58836: LD_INT 0
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 5
58845: NEG
58846: PUSH
58847: LD_INT 1
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 5
58857: NEG
58858: PUSH
58859: LD_INT 2
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 3
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 3
58880: NEG
58881: PUSH
58882: LD_INT 3
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 3
58892: NEG
58893: PUSH
58894: LD_INT 4
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 3
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 4
58940: NEG
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 4
58952: NEG
58953: PUSH
58954: LD_INT 4
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 2
58964: NEG
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 4
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: LD_INT 4
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 5
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 4
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: LD_INT 3
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 3
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 4
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: NEG
59056: PUSH
59057: LD_INT 5
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: PUSH
59068: LD_INT 3
59070: NEG
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 2
59078: NEG
59079: PUSH
59080: LD_INT 5
59082: NEG
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 3
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 3
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 4
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 4
59121: PUSH
59122: LD_INT 1
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 3
59131: PUSH
59132: LD_INT 1
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: LD_INT 0
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: LD_INT 3
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: LD_INT 4
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: LD_INT 5
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 4
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 3
59233: PUSH
59234: LD_INT 4
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 3
59243: PUSH
59244: LD_INT 3
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 5
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 3
59263: PUSH
59264: LD_INT 5
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: LIST
59308: LIST
59309: LIST
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59318: LD_ADDR_VAR 0 33
59322: PUSH
59323: LD_INT 4
59325: NEG
59326: PUSH
59327: LD_INT 4
59329: NEG
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: LD_INT 5
59341: NEG
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 3
59349: NEG
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: LD_INT 3
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 4
59373: NEG
59374: PUSH
59375: LD_INT 3
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 5
59385: NEG
59386: PUSH
59387: LD_INT 4
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 5
59397: NEG
59398: PUSH
59399: LD_INT 5
59401: NEG
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 3
59409: NEG
59410: PUSH
59411: LD_INT 5
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 5
59421: NEG
59422: PUSH
59423: LD_INT 3
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 0
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 0
59444: PUSH
59445: LD_INT 4
59447: NEG
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: LD_INT 3
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 3
59492: NEG
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 1
59500: NEG
59501: PUSH
59502: LD_INT 4
59504: NEG
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: LD_INT 2
59515: NEG
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: LD_INT 4
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 4
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 4
59545: PUSH
59546: LD_INT 1
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 5
59556: PUSH
59557: LD_INT 0
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: LD_INT 5
59566: PUSH
59567: LD_INT 1
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 4
59576: PUSH
59577: LD_INT 1
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 3
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 3
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 5
59618: PUSH
59619: LD_INT 2
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 3
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: LD_INT 2
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 4
59648: PUSH
59649: LD_INT 3
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 4
59658: PUSH
59659: LD_INT 4
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 3
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 3
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 2
59688: PUSH
59689: LD_INT 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 4
59698: PUSH
59699: LD_INT 2
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 4
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 4
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 3
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: LD_INT 4
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 5
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 5
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 4
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 1
59779: NEG
59780: PUSH
59781: LD_INT 3
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: PUSH
59791: LD_INT 5
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: NEG
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59856: LD_ADDR_VAR 0 34
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 4
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 5
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 4
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 3
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 3
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 4
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 5
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: NEG
59954: PUSH
59955: LD_INT 5
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 3
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 3
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 4
59986: PUSH
59987: LD_INT 0
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 4
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 3
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: LD_INT 0
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 2
60026: PUSH
60027: LD_INT 1
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 4
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 4
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 5
60078: PUSH
60079: LD_INT 4
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 5
60088: PUSH
60089: LD_INT 5
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: LD_INT 5
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: LD_INT 4
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 3
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 5
60128: PUSH
60129: LD_INT 3
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 5
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 3
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: LD_INT 4
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 0
60188: PUSH
60189: LD_INT 4
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 4
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 4
60241: NEG
60242: PUSH
60243: LD_INT 0
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PUSH
60250: LD_INT 4
60252: NEG
60253: PUSH
60254: LD_INT 1
60256: NEG
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: NEG
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 3
60275: NEG
60276: PUSH
60277: LD_INT 1
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 4
60286: NEG
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 5
60297: NEG
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 5
60308: NEG
60309: PUSH
60310: LD_INT 1
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 5
60320: NEG
60321: PUSH
60322: LD_INT 2
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// end ; end ;
60388: GO 60391
60390: POP
// case btype of b_depot , b_warehouse :
60391: LD_VAR 0 1
60395: PUSH
60396: LD_INT 0
60398: DOUBLE
60399: EQUAL
60400: IFTRUE 60410
60402: LD_INT 1
60404: DOUBLE
60405: EQUAL
60406: IFTRUE 60410
60408: GO 60611
60410: POP
// case nation of nation_american :
60411: LD_VAR 0 5
60415: PUSH
60416: LD_INT 1
60418: DOUBLE
60419: EQUAL
60420: IFTRUE 60424
60422: GO 60480
60424: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60425: LD_ADDR_VAR 0 9
60429: PUSH
60430: LD_VAR 0 11
60434: PUSH
60435: LD_VAR 0 12
60439: PUSH
60440: LD_VAR 0 13
60444: PUSH
60445: LD_VAR 0 14
60449: PUSH
60450: LD_VAR 0 15
60454: PUSH
60455: LD_VAR 0 16
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: PUSH
60468: LD_VAR 0 4
60472: PUSH
60473: LD_INT 1
60475: PLUS
60476: ARRAY
60477: ST_TO_ADDR
60478: GO 60609
60480: LD_INT 2
60482: DOUBLE
60483: EQUAL
60484: IFTRUE 60488
60486: GO 60544
60488: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60489: LD_ADDR_VAR 0 9
60493: PUSH
60494: LD_VAR 0 17
60498: PUSH
60499: LD_VAR 0 18
60503: PUSH
60504: LD_VAR 0 19
60508: PUSH
60509: LD_VAR 0 20
60513: PUSH
60514: LD_VAR 0 21
60518: PUSH
60519: LD_VAR 0 22
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: PUSH
60532: LD_VAR 0 4
60536: PUSH
60537: LD_INT 1
60539: PLUS
60540: ARRAY
60541: ST_TO_ADDR
60542: GO 60609
60544: LD_INT 3
60546: DOUBLE
60547: EQUAL
60548: IFTRUE 60552
60550: GO 60608
60552: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60553: LD_ADDR_VAR 0 9
60557: PUSH
60558: LD_VAR 0 23
60562: PUSH
60563: LD_VAR 0 24
60567: PUSH
60568: LD_VAR 0 25
60572: PUSH
60573: LD_VAR 0 26
60577: PUSH
60578: LD_VAR 0 27
60582: PUSH
60583: LD_VAR 0 28
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: PUSH
60596: LD_VAR 0 4
60600: PUSH
60601: LD_INT 1
60603: PLUS
60604: ARRAY
60605: ST_TO_ADDR
60606: GO 60609
60608: POP
60609: GO 61164
60611: LD_INT 2
60613: DOUBLE
60614: EQUAL
60615: IFTRUE 60625
60617: LD_INT 3
60619: DOUBLE
60620: EQUAL
60621: IFTRUE 60625
60623: GO 60681
60625: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60626: LD_ADDR_VAR 0 9
60630: PUSH
60631: LD_VAR 0 29
60635: PUSH
60636: LD_VAR 0 30
60640: PUSH
60641: LD_VAR 0 31
60645: PUSH
60646: LD_VAR 0 32
60650: PUSH
60651: LD_VAR 0 33
60655: PUSH
60656: LD_VAR 0 34
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: PUSH
60669: LD_VAR 0 4
60673: PUSH
60674: LD_INT 1
60676: PLUS
60677: ARRAY
60678: ST_TO_ADDR
60679: GO 61164
60681: LD_INT 16
60683: DOUBLE
60684: EQUAL
60685: IFTRUE 60743
60687: LD_INT 17
60689: DOUBLE
60690: EQUAL
60691: IFTRUE 60743
60693: LD_INT 18
60695: DOUBLE
60696: EQUAL
60697: IFTRUE 60743
60699: LD_INT 19
60701: DOUBLE
60702: EQUAL
60703: IFTRUE 60743
60705: LD_INT 22
60707: DOUBLE
60708: EQUAL
60709: IFTRUE 60743
60711: LD_INT 20
60713: DOUBLE
60714: EQUAL
60715: IFTRUE 60743
60717: LD_INT 21
60719: DOUBLE
60720: EQUAL
60721: IFTRUE 60743
60723: LD_INT 23
60725: DOUBLE
60726: EQUAL
60727: IFTRUE 60743
60729: LD_INT 24
60731: DOUBLE
60732: EQUAL
60733: IFTRUE 60743
60735: LD_INT 25
60737: DOUBLE
60738: EQUAL
60739: IFTRUE 60743
60741: GO 60799
60743: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60744: LD_ADDR_VAR 0 9
60748: PUSH
60749: LD_VAR 0 35
60753: PUSH
60754: LD_VAR 0 36
60758: PUSH
60759: LD_VAR 0 37
60763: PUSH
60764: LD_VAR 0 38
60768: PUSH
60769: LD_VAR 0 39
60773: PUSH
60774: LD_VAR 0 40
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: PUSH
60787: LD_VAR 0 4
60791: PUSH
60792: LD_INT 1
60794: PLUS
60795: ARRAY
60796: ST_TO_ADDR
60797: GO 61164
60799: LD_INT 6
60801: DOUBLE
60802: EQUAL
60803: IFTRUE 60855
60805: LD_INT 7
60807: DOUBLE
60808: EQUAL
60809: IFTRUE 60855
60811: LD_INT 8
60813: DOUBLE
60814: EQUAL
60815: IFTRUE 60855
60817: LD_INT 13
60819: DOUBLE
60820: EQUAL
60821: IFTRUE 60855
60823: LD_INT 12
60825: DOUBLE
60826: EQUAL
60827: IFTRUE 60855
60829: LD_INT 15
60831: DOUBLE
60832: EQUAL
60833: IFTRUE 60855
60835: LD_INT 11
60837: DOUBLE
60838: EQUAL
60839: IFTRUE 60855
60841: LD_INT 14
60843: DOUBLE
60844: EQUAL
60845: IFTRUE 60855
60847: LD_INT 10
60849: DOUBLE
60850: EQUAL
60851: IFTRUE 60855
60853: GO 60911
60855: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60856: LD_ADDR_VAR 0 9
60860: PUSH
60861: LD_VAR 0 41
60865: PUSH
60866: LD_VAR 0 42
60870: PUSH
60871: LD_VAR 0 43
60875: PUSH
60876: LD_VAR 0 44
60880: PUSH
60881: LD_VAR 0 45
60885: PUSH
60886: LD_VAR 0 46
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: PUSH
60899: LD_VAR 0 4
60903: PUSH
60904: LD_INT 1
60906: PLUS
60907: ARRAY
60908: ST_TO_ADDR
60909: GO 61164
60911: LD_INT 36
60913: DOUBLE
60914: EQUAL
60915: IFTRUE 60919
60917: GO 60975
60919: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60920: LD_ADDR_VAR 0 9
60924: PUSH
60925: LD_VAR 0 47
60929: PUSH
60930: LD_VAR 0 48
60934: PUSH
60935: LD_VAR 0 49
60939: PUSH
60940: LD_VAR 0 50
60944: PUSH
60945: LD_VAR 0 51
60949: PUSH
60950: LD_VAR 0 52
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: PUSH
60963: LD_VAR 0 4
60967: PUSH
60968: LD_INT 1
60970: PLUS
60971: ARRAY
60972: ST_TO_ADDR
60973: GO 61164
60975: LD_INT 4
60977: DOUBLE
60978: EQUAL
60979: IFTRUE 61001
60981: LD_INT 5
60983: DOUBLE
60984: EQUAL
60985: IFTRUE 61001
60987: LD_INT 34
60989: DOUBLE
60990: EQUAL
60991: IFTRUE 61001
60993: LD_INT 37
60995: DOUBLE
60996: EQUAL
60997: IFTRUE 61001
60999: GO 61057
61001: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61002: LD_ADDR_VAR 0 9
61006: PUSH
61007: LD_VAR 0 53
61011: PUSH
61012: LD_VAR 0 54
61016: PUSH
61017: LD_VAR 0 55
61021: PUSH
61022: LD_VAR 0 56
61026: PUSH
61027: LD_VAR 0 57
61031: PUSH
61032: LD_VAR 0 58
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: PUSH
61045: LD_VAR 0 4
61049: PUSH
61050: LD_INT 1
61052: PLUS
61053: ARRAY
61054: ST_TO_ADDR
61055: GO 61164
61057: LD_INT 31
61059: DOUBLE
61060: EQUAL
61061: IFTRUE 61107
61063: LD_INT 32
61065: DOUBLE
61066: EQUAL
61067: IFTRUE 61107
61069: LD_INT 33
61071: DOUBLE
61072: EQUAL
61073: IFTRUE 61107
61075: LD_INT 27
61077: DOUBLE
61078: EQUAL
61079: IFTRUE 61107
61081: LD_INT 26
61083: DOUBLE
61084: EQUAL
61085: IFTRUE 61107
61087: LD_INT 28
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61107
61093: LD_INT 29
61095: DOUBLE
61096: EQUAL
61097: IFTRUE 61107
61099: LD_INT 30
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61107
61105: GO 61163
61107: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61108: LD_ADDR_VAR 0 9
61112: PUSH
61113: LD_VAR 0 59
61117: PUSH
61118: LD_VAR 0 60
61122: PUSH
61123: LD_VAR 0 61
61127: PUSH
61128: LD_VAR 0 62
61132: PUSH
61133: LD_VAR 0 63
61137: PUSH
61138: LD_VAR 0 64
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: LD_VAR 0 4
61155: PUSH
61156: LD_INT 1
61158: PLUS
61159: ARRAY
61160: ST_TO_ADDR
61161: GO 61164
61163: POP
// temp_list2 = [ ] ;
61164: LD_ADDR_VAR 0 10
61168: PUSH
61169: EMPTY
61170: ST_TO_ADDR
// for i in temp_list do
61171: LD_ADDR_VAR 0 8
61175: PUSH
61176: LD_VAR 0 9
61180: PUSH
61181: FOR_IN
61182: IFFALSE 61234
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61184: LD_ADDR_VAR 0 10
61188: PUSH
61189: LD_VAR 0 10
61193: PUSH
61194: LD_VAR 0 8
61198: PUSH
61199: LD_INT 1
61201: ARRAY
61202: PUSH
61203: LD_VAR 0 2
61207: PLUS
61208: PUSH
61209: LD_VAR 0 8
61213: PUSH
61214: LD_INT 2
61216: ARRAY
61217: PUSH
61218: LD_VAR 0 3
61222: PLUS
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: EMPTY
61229: LIST
61230: ADD
61231: ST_TO_ADDR
61232: GO 61181
61234: POP
61235: POP
// result = temp_list2 ;
61236: LD_ADDR_VAR 0 7
61240: PUSH
61241: LD_VAR 0 10
61245: ST_TO_ADDR
// end ;
61246: LD_VAR 0 7
61250: RET
// export function EnemyInRange ( unit , dist ) ; begin
61251: LD_INT 0
61253: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61254: LD_ADDR_VAR 0 3
61258: PUSH
61259: LD_VAR 0 1
61263: PPUSH
61264: CALL_OW 255
61268: PPUSH
61269: LD_VAR 0 1
61273: PPUSH
61274: CALL_OW 250
61278: PPUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: CALL_OW 251
61288: PPUSH
61289: LD_VAR 0 2
61293: PPUSH
61294: CALL 35355 0 4
61298: PUSH
61299: LD_INT 4
61301: ARRAY
61302: ST_TO_ADDR
// end ;
61303: LD_VAR 0 3
61307: RET
// export function PlayerSeeMe ( unit ) ; begin
61308: LD_INT 0
61310: PPUSH
// result := See ( your_side , unit ) ;
61311: LD_ADDR_VAR 0 2
61315: PUSH
61316: LD_OWVAR 2
61320: PPUSH
61321: LD_VAR 0 1
61325: PPUSH
61326: CALL_OW 292
61330: ST_TO_ADDR
// end ;
61331: LD_VAR 0 2
61335: RET
// export function ReverseDir ( unit ) ; begin
61336: LD_INT 0
61338: PPUSH
// if not unit then
61339: LD_VAR 0 1
61343: NOT
61344: IFFALSE 61348
// exit ;
61346: GO 61371
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61348: LD_ADDR_VAR 0 2
61352: PUSH
61353: LD_VAR 0 1
61357: PPUSH
61358: CALL_OW 254
61362: PUSH
61363: LD_INT 3
61365: PLUS
61366: PUSH
61367: LD_INT 6
61369: MOD
61370: ST_TO_ADDR
// end ;
61371: LD_VAR 0 2
61375: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61376: LD_INT 0
61378: PPUSH
61379: PPUSH
61380: PPUSH
61381: PPUSH
61382: PPUSH
// if not hexes then
61383: LD_VAR 0 2
61387: NOT
61388: IFFALSE 61392
// exit ;
61390: GO 61540
// dist := 9999 ;
61392: LD_ADDR_VAR 0 5
61396: PUSH
61397: LD_INT 9999
61399: ST_TO_ADDR
// for i = 1 to hexes do
61400: LD_ADDR_VAR 0 4
61404: PUSH
61405: DOUBLE
61406: LD_INT 1
61408: DEC
61409: ST_TO_ADDR
61410: LD_VAR 0 2
61414: PUSH
61415: FOR_TO
61416: IFFALSE 61528
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61418: LD_VAR 0 1
61422: PPUSH
61423: LD_VAR 0 2
61427: PUSH
61428: LD_VAR 0 4
61432: ARRAY
61433: PUSH
61434: LD_INT 1
61436: ARRAY
61437: PPUSH
61438: LD_VAR 0 2
61442: PUSH
61443: LD_VAR 0 4
61447: ARRAY
61448: PUSH
61449: LD_INT 2
61451: ARRAY
61452: PPUSH
61453: CALL_OW 297
61457: PUSH
61458: LD_VAR 0 5
61462: LESS
61463: IFFALSE 61526
// begin hex := hexes [ i ] ;
61465: LD_ADDR_VAR 0 7
61469: PUSH
61470: LD_VAR 0 2
61474: PUSH
61475: LD_VAR 0 4
61479: ARRAY
61480: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61481: LD_ADDR_VAR 0 5
61485: PUSH
61486: LD_VAR 0 1
61490: PPUSH
61491: LD_VAR 0 2
61495: PUSH
61496: LD_VAR 0 4
61500: ARRAY
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: PPUSH
61506: LD_VAR 0 2
61510: PUSH
61511: LD_VAR 0 4
61515: ARRAY
61516: PUSH
61517: LD_INT 2
61519: ARRAY
61520: PPUSH
61521: CALL_OW 297
61525: ST_TO_ADDR
// end ; end ;
61526: GO 61415
61528: POP
61529: POP
// result := hex ;
61530: LD_ADDR_VAR 0 3
61534: PUSH
61535: LD_VAR 0 7
61539: ST_TO_ADDR
// end ;
61540: LD_VAR 0 3
61544: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61545: LD_INT 0
61547: PPUSH
61548: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61549: LD_VAR 0 1
61553: NOT
61554: PUSH
61555: LD_VAR 0 1
61559: PUSH
61560: LD_INT 21
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 23
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PPUSH
61584: CALL_OW 69
61588: IN
61589: NOT
61590: OR
61591: IFFALSE 61595
// exit ;
61593: GO 61642
// for i = 1 to 3 do
61595: LD_ADDR_VAR 0 3
61599: PUSH
61600: DOUBLE
61601: LD_INT 1
61603: DEC
61604: ST_TO_ADDR
61605: LD_INT 3
61607: PUSH
61608: FOR_TO
61609: IFFALSE 61640
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61611: LD_VAR 0 1
61615: PPUSH
61616: CALL_OW 250
61620: PPUSH
61621: LD_VAR 0 1
61625: PPUSH
61626: CALL_OW 251
61630: PPUSH
61631: LD_INT 1
61633: PPUSH
61634: CALL_OW 453
61638: GO 61608
61640: POP
61641: POP
// end ;
61642: LD_VAR 0 2
61646: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61647: LD_INT 0
61649: PPUSH
61650: PPUSH
61651: PPUSH
61652: PPUSH
61653: PPUSH
61654: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61655: LD_VAR 0 1
61659: NOT
61660: PUSH
61661: LD_VAR 0 2
61665: NOT
61666: OR
61667: PUSH
61668: LD_VAR 0 1
61672: PPUSH
61673: CALL_OW 314
61677: OR
61678: IFFALSE 61682
// exit ;
61680: GO 62123
// x := GetX ( enemy_unit ) ;
61682: LD_ADDR_VAR 0 7
61686: PUSH
61687: LD_VAR 0 2
61691: PPUSH
61692: CALL_OW 250
61696: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61697: LD_ADDR_VAR 0 8
61701: PUSH
61702: LD_VAR 0 2
61706: PPUSH
61707: CALL_OW 251
61711: ST_TO_ADDR
// if not x or not y then
61712: LD_VAR 0 7
61716: NOT
61717: PUSH
61718: LD_VAR 0 8
61722: NOT
61723: OR
61724: IFFALSE 61728
// exit ;
61726: GO 62123
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61728: LD_ADDR_VAR 0 6
61732: PUSH
61733: LD_VAR 0 7
61737: PPUSH
61738: LD_INT 0
61740: PPUSH
61741: LD_INT 4
61743: PPUSH
61744: CALL_OW 272
61748: PUSH
61749: LD_VAR 0 8
61753: PPUSH
61754: LD_INT 0
61756: PPUSH
61757: LD_INT 4
61759: PPUSH
61760: CALL_OW 273
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_VAR 0 7
61773: PPUSH
61774: LD_INT 1
61776: PPUSH
61777: LD_INT 4
61779: PPUSH
61780: CALL_OW 272
61784: PUSH
61785: LD_VAR 0 8
61789: PPUSH
61790: LD_INT 1
61792: PPUSH
61793: LD_INT 4
61795: PPUSH
61796: CALL_OW 273
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_VAR 0 7
61809: PPUSH
61810: LD_INT 2
61812: PPUSH
61813: LD_INT 4
61815: PPUSH
61816: CALL_OW 272
61820: PUSH
61821: LD_VAR 0 8
61825: PPUSH
61826: LD_INT 2
61828: PPUSH
61829: LD_INT 4
61831: PPUSH
61832: CALL_OW 273
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_VAR 0 7
61845: PPUSH
61846: LD_INT 3
61848: PPUSH
61849: LD_INT 4
61851: PPUSH
61852: CALL_OW 272
61856: PUSH
61857: LD_VAR 0 8
61861: PPUSH
61862: LD_INT 3
61864: PPUSH
61865: LD_INT 4
61867: PPUSH
61868: CALL_OW 273
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_VAR 0 7
61881: PPUSH
61882: LD_INT 4
61884: PPUSH
61885: LD_INT 4
61887: PPUSH
61888: CALL_OW 272
61892: PUSH
61893: LD_VAR 0 8
61897: PPUSH
61898: LD_INT 4
61900: PPUSH
61901: LD_INT 4
61903: PPUSH
61904: CALL_OW 273
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_VAR 0 7
61917: PPUSH
61918: LD_INT 5
61920: PPUSH
61921: LD_INT 4
61923: PPUSH
61924: CALL_OW 272
61928: PUSH
61929: LD_VAR 0 8
61933: PPUSH
61934: LD_INT 5
61936: PPUSH
61937: LD_INT 4
61939: PPUSH
61940: CALL_OW 273
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: ST_TO_ADDR
// for i = tmp downto 1 do
61957: LD_ADDR_VAR 0 4
61961: PUSH
61962: DOUBLE
61963: LD_VAR 0 6
61967: INC
61968: ST_TO_ADDR
61969: LD_INT 1
61971: PUSH
61972: FOR_DOWNTO
61973: IFFALSE 62074
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61975: LD_VAR 0 6
61979: PUSH
61980: LD_VAR 0 4
61984: ARRAY
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PPUSH
61990: LD_VAR 0 6
61994: PUSH
61995: LD_VAR 0 4
61999: ARRAY
62000: PUSH
62001: LD_INT 2
62003: ARRAY
62004: PPUSH
62005: CALL_OW 488
62009: NOT
62010: PUSH
62011: LD_VAR 0 6
62015: PUSH
62016: LD_VAR 0 4
62020: ARRAY
62021: PUSH
62022: LD_INT 1
62024: ARRAY
62025: PPUSH
62026: LD_VAR 0 6
62030: PUSH
62031: LD_VAR 0 4
62035: ARRAY
62036: PUSH
62037: LD_INT 2
62039: ARRAY
62040: PPUSH
62041: CALL_OW 428
62045: PUSH
62046: LD_INT 0
62048: NONEQUAL
62049: OR
62050: IFFALSE 62072
// tmp := Delete ( tmp , i ) ;
62052: LD_ADDR_VAR 0 6
62056: PUSH
62057: LD_VAR 0 6
62061: PPUSH
62062: LD_VAR 0 4
62066: PPUSH
62067: CALL_OW 3
62071: ST_TO_ADDR
62072: GO 61972
62074: POP
62075: POP
// j := GetClosestHex ( unit , tmp ) ;
62076: LD_ADDR_VAR 0 5
62080: PUSH
62081: LD_VAR 0 1
62085: PPUSH
62086: LD_VAR 0 6
62090: PPUSH
62091: CALL 61376 0 2
62095: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62096: LD_VAR 0 1
62100: PPUSH
62101: LD_VAR 0 5
62105: PUSH
62106: LD_INT 1
62108: ARRAY
62109: PPUSH
62110: LD_VAR 0 5
62114: PUSH
62115: LD_INT 2
62117: ARRAY
62118: PPUSH
62119: CALL_OW 111
// end ;
62123: LD_VAR 0 3
62127: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62128: LD_INT 0
62130: PPUSH
62131: PPUSH
62132: PPUSH
// uc_side = 0 ;
62133: LD_ADDR_OWVAR 20
62137: PUSH
62138: LD_INT 0
62140: ST_TO_ADDR
// uc_nation = 0 ;
62141: LD_ADDR_OWVAR 21
62145: PUSH
62146: LD_INT 0
62148: ST_TO_ADDR
// InitHc_All ( ) ;
62149: CALL_OW 584
// InitVc ;
62153: CALL_OW 20
// if mastodonts then
62157: LD_VAR 0 6
62161: IFFALSE 62228
// for i = 1 to mastodonts do
62163: LD_ADDR_VAR 0 11
62167: PUSH
62168: DOUBLE
62169: LD_INT 1
62171: DEC
62172: ST_TO_ADDR
62173: LD_VAR 0 6
62177: PUSH
62178: FOR_TO
62179: IFFALSE 62226
// begin vc_chassis := 31 ;
62181: LD_ADDR_OWVAR 37
62185: PUSH
62186: LD_INT 31
62188: ST_TO_ADDR
// vc_control := control_rider ;
62189: LD_ADDR_OWVAR 38
62193: PUSH
62194: LD_INT 4
62196: ST_TO_ADDR
// animal := CreateVehicle ;
62197: LD_ADDR_VAR 0 12
62201: PUSH
62202: CALL_OW 45
62206: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62207: LD_VAR 0 12
62211: PPUSH
62212: LD_VAR 0 8
62216: PPUSH
62217: LD_INT 0
62219: PPUSH
62220: CALL 64416 0 3
// end ;
62224: GO 62178
62226: POP
62227: POP
// if horses then
62228: LD_VAR 0 5
62232: IFFALSE 62299
// for i = 1 to horses do
62234: LD_ADDR_VAR 0 11
62238: PUSH
62239: DOUBLE
62240: LD_INT 1
62242: DEC
62243: ST_TO_ADDR
62244: LD_VAR 0 5
62248: PUSH
62249: FOR_TO
62250: IFFALSE 62297
// begin hc_class := 21 ;
62252: LD_ADDR_OWVAR 28
62256: PUSH
62257: LD_INT 21
62259: ST_TO_ADDR
// hc_gallery :=  ;
62260: LD_ADDR_OWVAR 33
62264: PUSH
62265: LD_STRING 
62267: ST_TO_ADDR
// animal := CreateHuman ;
62268: LD_ADDR_VAR 0 12
62272: PUSH
62273: CALL_OW 44
62277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62278: LD_VAR 0 12
62282: PPUSH
62283: LD_VAR 0 8
62287: PPUSH
62288: LD_INT 0
62290: PPUSH
62291: CALL 64416 0 3
// end ;
62295: GO 62249
62297: POP
62298: POP
// if birds then
62299: LD_VAR 0 1
62303: IFFALSE 62370
// for i = 1 to birds do
62305: LD_ADDR_VAR 0 11
62309: PUSH
62310: DOUBLE
62311: LD_INT 1
62313: DEC
62314: ST_TO_ADDR
62315: LD_VAR 0 1
62319: PUSH
62320: FOR_TO
62321: IFFALSE 62368
// begin hc_class = 18 ;
62323: LD_ADDR_OWVAR 28
62327: PUSH
62328: LD_INT 18
62330: ST_TO_ADDR
// hc_gallery =  ;
62331: LD_ADDR_OWVAR 33
62335: PUSH
62336: LD_STRING 
62338: ST_TO_ADDR
// animal := CreateHuman ;
62339: LD_ADDR_VAR 0 12
62343: PUSH
62344: CALL_OW 44
62348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62349: LD_VAR 0 12
62353: PPUSH
62354: LD_VAR 0 8
62358: PPUSH
62359: LD_INT 0
62361: PPUSH
62362: CALL 64416 0 3
// end ;
62366: GO 62320
62368: POP
62369: POP
// if tigers then
62370: LD_VAR 0 2
62374: IFFALSE 62458
// for i = 1 to tigers do
62376: LD_ADDR_VAR 0 11
62380: PUSH
62381: DOUBLE
62382: LD_INT 1
62384: DEC
62385: ST_TO_ADDR
62386: LD_VAR 0 2
62390: PUSH
62391: FOR_TO
62392: IFFALSE 62456
// begin hc_class = class_tiger ;
62394: LD_ADDR_OWVAR 28
62398: PUSH
62399: LD_INT 14
62401: ST_TO_ADDR
// hc_gallery =  ;
62402: LD_ADDR_OWVAR 33
62406: PUSH
62407: LD_STRING 
62409: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62410: LD_ADDR_OWVAR 35
62414: PUSH
62415: LD_INT 7
62417: NEG
62418: PPUSH
62419: LD_INT 7
62421: PPUSH
62422: CALL_OW 12
62426: ST_TO_ADDR
// animal := CreateHuman ;
62427: LD_ADDR_VAR 0 12
62431: PUSH
62432: CALL_OW 44
62436: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62437: LD_VAR 0 12
62441: PPUSH
62442: LD_VAR 0 8
62446: PPUSH
62447: LD_INT 0
62449: PPUSH
62450: CALL 64416 0 3
// end ;
62454: GO 62391
62456: POP
62457: POP
// if apemans then
62458: LD_VAR 0 3
62462: IFFALSE 62585
// for i = 1 to apemans do
62464: LD_ADDR_VAR 0 11
62468: PUSH
62469: DOUBLE
62470: LD_INT 1
62472: DEC
62473: ST_TO_ADDR
62474: LD_VAR 0 3
62478: PUSH
62479: FOR_TO
62480: IFFALSE 62583
// begin hc_class = class_apeman ;
62482: LD_ADDR_OWVAR 28
62486: PUSH
62487: LD_INT 12
62489: ST_TO_ADDR
// hc_gallery =  ;
62490: LD_ADDR_OWVAR 33
62494: PUSH
62495: LD_STRING 
62497: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
62498: LD_ADDR_OWVAR 35
62502: PUSH
62503: LD_INT 5
62505: NEG
62506: PPUSH
62507: LD_INT 5
62509: PPUSH
62510: CALL_OW 12
62514: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62515: LD_ADDR_OWVAR 31
62519: PUSH
62520: LD_INT 1
62522: PPUSH
62523: LD_INT 3
62525: PPUSH
62526: CALL_OW 12
62530: PUSH
62531: LD_INT 1
62533: PPUSH
62534: LD_INT 3
62536: PPUSH
62537: CALL_OW 12
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: LIST
62552: LIST
62553: ST_TO_ADDR
// animal := CreateHuman ;
62554: LD_ADDR_VAR 0 12
62558: PUSH
62559: CALL_OW 44
62563: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62564: LD_VAR 0 12
62568: PPUSH
62569: LD_VAR 0 8
62573: PPUSH
62574: LD_INT 0
62576: PPUSH
62577: CALL 64416 0 3
// end ;
62581: GO 62479
62583: POP
62584: POP
// if enchidnas then
62585: LD_VAR 0 4
62589: IFFALSE 62656
// for i = 1 to enchidnas do
62591: LD_ADDR_VAR 0 11
62595: PUSH
62596: DOUBLE
62597: LD_INT 1
62599: DEC
62600: ST_TO_ADDR
62601: LD_VAR 0 4
62605: PUSH
62606: FOR_TO
62607: IFFALSE 62654
// begin hc_class = 13 ;
62609: LD_ADDR_OWVAR 28
62613: PUSH
62614: LD_INT 13
62616: ST_TO_ADDR
// hc_gallery =  ;
62617: LD_ADDR_OWVAR 33
62621: PUSH
62622: LD_STRING 
62624: ST_TO_ADDR
// animal := CreateHuman ;
62625: LD_ADDR_VAR 0 12
62629: PUSH
62630: CALL_OW 44
62634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62635: LD_VAR 0 12
62639: PPUSH
62640: LD_VAR 0 8
62644: PPUSH
62645: LD_INT 0
62647: PPUSH
62648: CALL 64416 0 3
// end ;
62652: GO 62606
62654: POP
62655: POP
// if fishes then
62656: LD_VAR 0 7
62660: IFFALSE 62727
// for i = 1 to fishes do
62662: LD_ADDR_VAR 0 11
62666: PUSH
62667: DOUBLE
62668: LD_INT 1
62670: DEC
62671: ST_TO_ADDR
62672: LD_VAR 0 7
62676: PUSH
62677: FOR_TO
62678: IFFALSE 62725
// begin hc_class = 20 ;
62680: LD_ADDR_OWVAR 28
62684: PUSH
62685: LD_INT 20
62687: ST_TO_ADDR
// hc_gallery =  ;
62688: LD_ADDR_OWVAR 33
62692: PUSH
62693: LD_STRING 
62695: ST_TO_ADDR
// animal := CreateHuman ;
62696: LD_ADDR_VAR 0 12
62700: PUSH
62701: CALL_OW 44
62705: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62706: LD_VAR 0 12
62710: PPUSH
62711: LD_VAR 0 9
62715: PPUSH
62716: LD_INT 0
62718: PPUSH
62719: CALL 64416 0 3
// end ;
62723: GO 62677
62725: POP
62726: POP
// end ;
62727: LD_VAR 0 10
62731: RET
// export function WantHeal ( sci , unit ) ; begin
62732: LD_INT 0
62734: PPUSH
// if GetTaskList ( sci ) > 0 then
62735: LD_VAR 0 1
62739: PPUSH
62740: CALL_OW 437
62744: PUSH
62745: LD_INT 0
62747: GREATER
62748: IFFALSE 62818
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62750: LD_VAR 0 1
62754: PPUSH
62755: CALL_OW 437
62759: PUSH
62760: LD_INT 1
62762: ARRAY
62763: PUSH
62764: LD_INT 1
62766: ARRAY
62767: PUSH
62768: LD_STRING l
62770: EQUAL
62771: PUSH
62772: LD_VAR 0 1
62776: PPUSH
62777: CALL_OW 437
62781: PUSH
62782: LD_INT 1
62784: ARRAY
62785: PUSH
62786: LD_INT 4
62788: ARRAY
62789: PUSH
62790: LD_VAR 0 2
62794: EQUAL
62795: AND
62796: IFFALSE 62808
// result := true else
62798: LD_ADDR_VAR 0 3
62802: PUSH
62803: LD_INT 1
62805: ST_TO_ADDR
62806: GO 62816
// result := false ;
62808: LD_ADDR_VAR 0 3
62812: PUSH
62813: LD_INT 0
62815: ST_TO_ADDR
// end else
62816: GO 62826
// result := false ;
62818: LD_ADDR_VAR 0 3
62822: PUSH
62823: LD_INT 0
62825: ST_TO_ADDR
// end ;
62826: LD_VAR 0 3
62830: RET
// export function HealTarget ( sci ) ; begin
62831: LD_INT 0
62833: PPUSH
// if not sci then
62834: LD_VAR 0 1
62838: NOT
62839: IFFALSE 62843
// exit ;
62841: GO 62908
// result := 0 ;
62843: LD_ADDR_VAR 0 2
62847: PUSH
62848: LD_INT 0
62850: ST_TO_ADDR
// if GetTaskList ( sci ) then
62851: LD_VAR 0 1
62855: PPUSH
62856: CALL_OW 437
62860: IFFALSE 62908
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62862: LD_VAR 0 1
62866: PPUSH
62867: CALL_OW 437
62871: PUSH
62872: LD_INT 1
62874: ARRAY
62875: PUSH
62876: LD_INT 1
62878: ARRAY
62879: PUSH
62880: LD_STRING l
62882: EQUAL
62883: IFFALSE 62908
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62885: LD_ADDR_VAR 0 2
62889: PUSH
62890: LD_VAR 0 1
62894: PPUSH
62895: CALL_OW 437
62899: PUSH
62900: LD_INT 1
62902: ARRAY
62903: PUSH
62904: LD_INT 4
62906: ARRAY
62907: ST_TO_ADDR
// end ;
62908: LD_VAR 0 2
62912: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62913: LD_INT 0
62915: PPUSH
62916: PPUSH
62917: PPUSH
62918: PPUSH
// if not base_units then
62919: LD_VAR 0 1
62923: NOT
62924: IFFALSE 62928
// exit ;
62926: GO 63015
// result := false ;
62928: LD_ADDR_VAR 0 2
62932: PUSH
62933: LD_INT 0
62935: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62936: LD_ADDR_VAR 0 5
62940: PUSH
62941: LD_VAR 0 1
62945: PPUSH
62946: LD_INT 21
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PPUSH
62956: CALL_OW 72
62960: ST_TO_ADDR
// if not tmp then
62961: LD_VAR 0 5
62965: NOT
62966: IFFALSE 62970
// exit ;
62968: GO 63015
// for i in tmp do
62970: LD_ADDR_VAR 0 3
62974: PUSH
62975: LD_VAR 0 5
62979: PUSH
62980: FOR_IN
62981: IFFALSE 63013
// begin result := EnemyInRange ( i , 22 ) ;
62983: LD_ADDR_VAR 0 2
62987: PUSH
62988: LD_VAR 0 3
62992: PPUSH
62993: LD_INT 22
62995: PPUSH
62996: CALL 61251 0 2
63000: ST_TO_ADDR
// if result then
63001: LD_VAR 0 2
63005: IFFALSE 63011
// exit ;
63007: POP
63008: POP
63009: GO 63015
// end ;
63011: GO 62980
63013: POP
63014: POP
// end ;
63015: LD_VAR 0 2
63019: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63020: LD_INT 0
63022: PPUSH
63023: PPUSH
// if not units then
63024: LD_VAR 0 1
63028: NOT
63029: IFFALSE 63033
// exit ;
63031: GO 63103
// result := [ ] ;
63033: LD_ADDR_VAR 0 3
63037: PUSH
63038: EMPTY
63039: ST_TO_ADDR
// for i in units do
63040: LD_ADDR_VAR 0 4
63044: PUSH
63045: LD_VAR 0 1
63049: PUSH
63050: FOR_IN
63051: IFFALSE 63101
// if GetTag ( i ) = tag then
63053: LD_VAR 0 4
63057: PPUSH
63058: CALL_OW 110
63062: PUSH
63063: LD_VAR 0 2
63067: EQUAL
63068: IFFALSE 63099
// result := Insert ( result , result + 1 , i ) ;
63070: LD_ADDR_VAR 0 3
63074: PUSH
63075: LD_VAR 0 3
63079: PPUSH
63080: LD_VAR 0 3
63084: PUSH
63085: LD_INT 1
63087: PLUS
63088: PPUSH
63089: LD_VAR 0 4
63093: PPUSH
63094: CALL_OW 2
63098: ST_TO_ADDR
63099: GO 63050
63101: POP
63102: POP
// end ;
63103: LD_VAR 0 3
63107: RET
// export function IsDriver ( un ) ; begin
63108: LD_INT 0
63110: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63111: LD_ADDR_VAR 0 2
63115: PUSH
63116: LD_VAR 0 1
63120: PUSH
63121: LD_INT 55
63123: PUSH
63124: EMPTY
63125: LIST
63126: PPUSH
63127: CALL_OW 69
63131: IN
63132: ST_TO_ADDR
// end ;
63133: LD_VAR 0 2
63137: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63138: LD_INT 0
63140: PPUSH
63141: PPUSH
// list := [ ] ;
63142: LD_ADDR_VAR 0 5
63146: PUSH
63147: EMPTY
63148: ST_TO_ADDR
// case d of 0 :
63149: LD_VAR 0 3
63153: PUSH
63154: LD_INT 0
63156: DOUBLE
63157: EQUAL
63158: IFTRUE 63162
63160: GO 63295
63162: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63163: LD_ADDR_VAR 0 5
63167: PUSH
63168: LD_VAR 0 1
63172: PUSH
63173: LD_INT 4
63175: MINUS
63176: PUSH
63177: LD_VAR 0 2
63181: PUSH
63182: LD_INT 4
63184: MINUS
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: PUSH
63194: LD_VAR 0 1
63198: PUSH
63199: LD_INT 3
63201: MINUS
63202: PUSH
63203: LD_VAR 0 2
63207: PUSH
63208: LD_INT 1
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: LIST
63215: PUSH
63216: LD_VAR 0 1
63220: PUSH
63221: LD_INT 4
63223: PLUS
63224: PUSH
63225: LD_VAR 0 2
63229: PUSH
63230: LD_INT 4
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: LIST
63237: PUSH
63238: LD_VAR 0 1
63242: PUSH
63243: LD_INT 3
63245: PLUS
63246: PUSH
63247: LD_VAR 0 2
63251: PUSH
63252: LD_INT 3
63254: PLUS
63255: PUSH
63256: LD_INT 5
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: LIST
63263: PUSH
63264: LD_VAR 0 1
63268: PUSH
63269: LD_VAR 0 2
63273: PUSH
63274: LD_INT 4
63276: PLUS
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: ST_TO_ADDR
// end ; 1 :
63293: GO 63993
63295: LD_INT 1
63297: DOUBLE
63298: EQUAL
63299: IFTRUE 63303
63301: GO 63436
63303: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63304: LD_ADDR_VAR 0 5
63308: PUSH
63309: LD_VAR 0 1
63313: PUSH
63314: LD_VAR 0 2
63318: PUSH
63319: LD_INT 4
63321: MINUS
63322: PUSH
63323: LD_INT 3
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: PUSH
63331: LD_VAR 0 1
63335: PUSH
63336: LD_INT 3
63338: MINUS
63339: PUSH
63340: LD_VAR 0 2
63344: PUSH
63345: LD_INT 3
63347: MINUS
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: LIST
63356: PUSH
63357: LD_VAR 0 1
63361: PUSH
63362: LD_INT 4
63364: MINUS
63365: PUSH
63366: LD_VAR 0 2
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: LIST
63378: PUSH
63379: LD_VAR 0 1
63383: PUSH
63384: LD_VAR 0 2
63388: PUSH
63389: LD_INT 3
63391: PLUS
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: PUSH
63401: LD_VAR 0 1
63405: PUSH
63406: LD_INT 4
63408: PLUS
63409: PUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_INT 4
63417: PLUS
63418: PUSH
63419: LD_INT 5
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: ST_TO_ADDR
// end ; 2 :
63434: GO 63993
63436: LD_INT 2
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63444
63442: GO 63573
63444: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63445: LD_ADDR_VAR 0 5
63449: PUSH
63450: LD_VAR 0 1
63454: PUSH
63455: LD_VAR 0 2
63459: PUSH
63460: LD_INT 3
63462: MINUS
63463: PUSH
63464: LD_INT 3
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: LIST
63471: PUSH
63472: LD_VAR 0 1
63476: PUSH
63477: LD_INT 4
63479: PLUS
63480: PUSH
63481: LD_VAR 0 2
63485: PUSH
63486: LD_INT 4
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: LIST
63493: PUSH
63494: LD_VAR 0 1
63498: PUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_INT 4
63506: PLUS
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: PUSH
63516: LD_VAR 0 1
63520: PUSH
63521: LD_INT 3
63523: MINUS
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: PUSH
63538: LD_VAR 0 1
63542: PUSH
63543: LD_INT 4
63545: MINUS
63546: PUSH
63547: LD_VAR 0 2
63551: PUSH
63552: LD_INT 4
63554: MINUS
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: ST_TO_ADDR
// end ; 3 :
63571: GO 63993
63573: LD_INT 3
63575: DOUBLE
63576: EQUAL
63577: IFTRUE 63581
63579: GO 63714
63581: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63582: LD_ADDR_VAR 0 5
63586: PUSH
63587: LD_VAR 0 1
63591: PUSH
63592: LD_INT 3
63594: PLUS
63595: PUSH
63596: LD_VAR 0 2
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: LIST
63608: PUSH
63609: LD_VAR 0 1
63613: PUSH
63614: LD_INT 4
63616: PLUS
63617: PUSH
63618: LD_VAR 0 2
63622: PUSH
63623: LD_INT 4
63625: PLUS
63626: PUSH
63627: LD_INT 5
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: LIST
63634: PUSH
63635: LD_VAR 0 1
63639: PUSH
63640: LD_INT 4
63642: MINUS
63643: PUSH
63644: LD_VAR 0 2
63648: PUSH
63649: LD_INT 1
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_VAR 0 1
63661: PUSH
63662: LD_VAR 0 2
63666: PUSH
63667: LD_INT 4
63669: MINUS
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 1
63683: PUSH
63684: LD_INT 3
63686: MINUS
63687: PUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_INT 3
63695: MINUS
63696: PUSH
63697: LD_INT 2
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: ST_TO_ADDR
// end ; 4 :
63712: GO 63993
63714: LD_INT 4
63716: DOUBLE
63717: EQUAL
63718: IFTRUE 63722
63720: GO 63855
63722: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63723: LD_ADDR_VAR 0 5
63727: PUSH
63728: LD_VAR 0 1
63732: PUSH
63733: LD_VAR 0 2
63737: PUSH
63738: LD_INT 4
63740: PLUS
63741: PUSH
63742: LD_INT 0
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: PUSH
63750: LD_VAR 0 1
63754: PUSH
63755: LD_INT 3
63757: PLUS
63758: PUSH
63759: LD_VAR 0 2
63763: PUSH
63764: LD_INT 3
63766: PLUS
63767: PUSH
63768: LD_INT 5
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: LIST
63775: PUSH
63776: LD_VAR 0 1
63780: PUSH
63781: LD_INT 4
63783: PLUS
63784: PUSH
63785: LD_VAR 0 2
63789: PUSH
63790: LD_INT 4
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: PUSH
63798: LD_VAR 0 1
63802: PUSH
63803: LD_VAR 0 2
63807: PUSH
63808: LD_INT 3
63810: MINUS
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: PUSH
63820: LD_VAR 0 1
63824: PUSH
63825: LD_INT 4
63827: MINUS
63828: PUSH
63829: LD_VAR 0 2
63833: PUSH
63834: LD_INT 4
63836: MINUS
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: ST_TO_ADDR
// end ; 5 :
63853: GO 63993
63855: LD_INT 5
63857: DOUBLE
63858: EQUAL
63859: IFTRUE 63863
63861: GO 63992
63863: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63864: LD_ADDR_VAR 0 5
63868: PUSH
63869: LD_VAR 0 1
63873: PUSH
63874: LD_INT 4
63876: MINUS
63877: PUSH
63878: LD_VAR 0 2
63882: PUSH
63883: LD_INT 1
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: LIST
63890: PUSH
63891: LD_VAR 0 1
63895: PUSH
63896: LD_VAR 0 2
63900: PUSH
63901: LD_INT 4
63903: MINUS
63904: PUSH
63905: LD_INT 3
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: LIST
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_INT 4
63920: PLUS
63921: PUSH
63922: LD_VAR 0 2
63926: PUSH
63927: LD_INT 4
63929: PLUS
63930: PUSH
63931: LD_INT 5
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: PUSH
63939: LD_VAR 0 1
63943: PUSH
63944: LD_INT 3
63946: PLUS
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: LD_INT 4
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: LD_VAR 0 1
63965: PUSH
63966: LD_VAR 0 2
63970: PUSH
63971: LD_INT 3
63973: PLUS
63974: PUSH
63975: LD_INT 0
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: ST_TO_ADDR
// end ; end ;
63990: GO 63993
63992: POP
// result := list ;
63993: LD_ADDR_VAR 0 4
63997: PUSH
63998: LD_VAR 0 5
64002: ST_TO_ADDR
// end ;
64003: LD_VAR 0 4
64007: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64008: LD_INT 0
64010: PPUSH
64011: PPUSH
64012: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64013: LD_VAR 0 1
64017: NOT
64018: PUSH
64019: LD_VAR 0 2
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: LD_INT 2
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: LD_INT 4
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: IN
64042: NOT
64043: OR
64044: IFFALSE 64048
// exit ;
64046: GO 64140
// tmp := [ ] ;
64048: LD_ADDR_VAR 0 5
64052: PUSH
64053: EMPTY
64054: ST_TO_ADDR
// for i in units do
64055: LD_ADDR_VAR 0 4
64059: PUSH
64060: LD_VAR 0 1
64064: PUSH
64065: FOR_IN
64066: IFFALSE 64109
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64068: LD_ADDR_VAR 0 5
64072: PUSH
64073: LD_VAR 0 5
64077: PPUSH
64078: LD_VAR 0 5
64082: PUSH
64083: LD_INT 1
64085: PLUS
64086: PPUSH
64087: LD_VAR 0 4
64091: PPUSH
64092: LD_VAR 0 2
64096: PPUSH
64097: CALL_OW 259
64101: PPUSH
64102: CALL_OW 2
64106: ST_TO_ADDR
64107: GO 64065
64109: POP
64110: POP
// if not tmp then
64111: LD_VAR 0 5
64115: NOT
64116: IFFALSE 64120
// exit ;
64118: GO 64140
// result := SortListByListDesc ( units , tmp ) ;
64120: LD_ADDR_VAR 0 3
64124: PUSH
64125: LD_VAR 0 1
64129: PPUSH
64130: LD_VAR 0 5
64134: PPUSH
64135: CALL_OW 77
64139: ST_TO_ADDR
// end ;
64140: LD_VAR 0 3
64144: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64145: LD_INT 0
64147: PPUSH
64148: PPUSH
64149: PPUSH
// result := false ;
64150: LD_ADDR_VAR 0 3
64154: PUSH
64155: LD_INT 0
64157: ST_TO_ADDR
// x := GetX ( building ) ;
64158: LD_ADDR_VAR 0 4
64162: PUSH
64163: LD_VAR 0 2
64167: PPUSH
64168: CALL_OW 250
64172: ST_TO_ADDR
// y := GetY ( building ) ;
64173: LD_ADDR_VAR 0 5
64177: PUSH
64178: LD_VAR 0 2
64182: PPUSH
64183: CALL_OW 251
64187: ST_TO_ADDR
// if not building or not x or not y then
64188: LD_VAR 0 2
64192: NOT
64193: PUSH
64194: LD_VAR 0 4
64198: NOT
64199: OR
64200: PUSH
64201: LD_VAR 0 5
64205: NOT
64206: OR
64207: IFFALSE 64211
// exit ;
64209: GO 64303
// if GetTaskList ( unit ) then
64211: LD_VAR 0 1
64215: PPUSH
64216: CALL_OW 437
64220: IFFALSE 64303
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64222: LD_STRING e
64224: PUSH
64225: LD_VAR 0 1
64229: PPUSH
64230: CALL_OW 437
64234: PUSH
64235: LD_INT 1
64237: ARRAY
64238: PUSH
64239: LD_INT 1
64241: ARRAY
64242: EQUAL
64243: PUSH
64244: LD_VAR 0 4
64248: PUSH
64249: LD_VAR 0 1
64253: PPUSH
64254: CALL_OW 437
64258: PUSH
64259: LD_INT 1
64261: ARRAY
64262: PUSH
64263: LD_INT 2
64265: ARRAY
64266: EQUAL
64267: AND
64268: PUSH
64269: LD_VAR 0 5
64273: PUSH
64274: LD_VAR 0 1
64278: PPUSH
64279: CALL_OW 437
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: PUSH
64288: LD_INT 3
64290: ARRAY
64291: EQUAL
64292: AND
64293: IFFALSE 64303
// result := true end ;
64295: LD_ADDR_VAR 0 3
64299: PUSH
64300: LD_INT 1
64302: ST_TO_ADDR
// end ;
64303: LD_VAR 0 3
64307: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64308: LD_INT 0
64310: PPUSH
// result := false ;
64311: LD_ADDR_VAR 0 4
64315: PUSH
64316: LD_INT 0
64318: ST_TO_ADDR
// if GetTaskList ( unit ) then
64319: LD_VAR 0 1
64323: PPUSH
64324: CALL_OW 437
64328: IFFALSE 64411
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64330: LD_STRING M
64332: PUSH
64333: LD_VAR 0 1
64337: PPUSH
64338: CALL_OW 437
64342: PUSH
64343: LD_INT 1
64345: ARRAY
64346: PUSH
64347: LD_INT 1
64349: ARRAY
64350: EQUAL
64351: PUSH
64352: LD_VAR 0 2
64356: PUSH
64357: LD_VAR 0 1
64361: PPUSH
64362: CALL_OW 437
64366: PUSH
64367: LD_INT 1
64369: ARRAY
64370: PUSH
64371: LD_INT 2
64373: ARRAY
64374: EQUAL
64375: AND
64376: PUSH
64377: LD_VAR 0 3
64381: PUSH
64382: LD_VAR 0 1
64386: PPUSH
64387: CALL_OW 437
64391: PUSH
64392: LD_INT 1
64394: ARRAY
64395: PUSH
64396: LD_INT 3
64398: ARRAY
64399: EQUAL
64400: AND
64401: IFFALSE 64411
// result := true ;
64403: LD_ADDR_VAR 0 4
64407: PUSH
64408: LD_INT 1
64410: ST_TO_ADDR
// end ; end ;
64411: LD_VAR 0 4
64415: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64416: LD_INT 0
64418: PPUSH
64419: PPUSH
64420: PPUSH
64421: PPUSH
// if not unit or not area then
64422: LD_VAR 0 1
64426: NOT
64427: PUSH
64428: LD_VAR 0 2
64432: NOT
64433: OR
64434: IFFALSE 64438
// exit ;
64436: GO 64602
// tmp := AreaToList ( area , i ) ;
64438: LD_ADDR_VAR 0 6
64442: PUSH
64443: LD_VAR 0 2
64447: PPUSH
64448: LD_VAR 0 5
64452: PPUSH
64453: CALL_OW 517
64457: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64458: LD_ADDR_VAR 0 5
64462: PUSH
64463: DOUBLE
64464: LD_INT 1
64466: DEC
64467: ST_TO_ADDR
64468: LD_VAR 0 6
64472: PUSH
64473: LD_INT 1
64475: ARRAY
64476: PUSH
64477: FOR_TO
64478: IFFALSE 64600
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64480: LD_ADDR_VAR 0 7
64484: PUSH
64485: LD_VAR 0 6
64489: PUSH
64490: LD_INT 1
64492: ARRAY
64493: PUSH
64494: LD_VAR 0 5
64498: ARRAY
64499: PUSH
64500: LD_VAR 0 6
64504: PUSH
64505: LD_INT 2
64507: ARRAY
64508: PUSH
64509: LD_VAR 0 5
64513: ARRAY
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64519: LD_VAR 0 7
64523: PUSH
64524: LD_INT 1
64526: ARRAY
64527: PPUSH
64528: LD_VAR 0 7
64532: PUSH
64533: LD_INT 2
64535: ARRAY
64536: PPUSH
64537: CALL_OW 428
64541: PUSH
64542: LD_INT 0
64544: EQUAL
64545: IFFALSE 64598
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64547: LD_VAR 0 1
64551: PPUSH
64552: LD_VAR 0 7
64556: PUSH
64557: LD_INT 1
64559: ARRAY
64560: PPUSH
64561: LD_VAR 0 7
64565: PUSH
64566: LD_INT 2
64568: ARRAY
64569: PPUSH
64570: LD_VAR 0 3
64574: PPUSH
64575: CALL_OW 48
// result := IsPlaced ( unit ) ;
64579: LD_ADDR_VAR 0 4
64583: PUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: CALL_OW 305
64593: ST_TO_ADDR
// exit ;
64594: POP
64595: POP
64596: GO 64602
// end ; end ;
64598: GO 64477
64600: POP
64601: POP
// end ;
64602: LD_VAR 0 4
64606: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64607: LD_INT 0
64609: PPUSH
64610: PPUSH
64611: PPUSH
// if not side or side > 8 then
64612: LD_VAR 0 1
64616: NOT
64617: PUSH
64618: LD_VAR 0 1
64622: PUSH
64623: LD_INT 8
64625: GREATER
64626: OR
64627: IFFALSE 64631
// exit ;
64629: GO 64818
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64631: LD_ADDR_VAR 0 4
64635: PUSH
64636: LD_INT 22
64638: PUSH
64639: LD_VAR 0 1
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 21
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PPUSH
64662: CALL_OW 69
64666: ST_TO_ADDR
// if not tmp then
64667: LD_VAR 0 4
64671: NOT
64672: IFFALSE 64676
// exit ;
64674: GO 64818
// enable_addtolog := true ;
64676: LD_ADDR_OWVAR 81
64680: PUSH
64681: LD_INT 1
64683: ST_TO_ADDR
// AddToLog ( [ ) ;
64684: LD_STRING [
64686: PPUSH
64687: CALL_OW 561
// for i in tmp do
64691: LD_ADDR_VAR 0 3
64695: PUSH
64696: LD_VAR 0 4
64700: PUSH
64701: FOR_IN
64702: IFFALSE 64809
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64704: LD_STRING [
64706: PUSH
64707: LD_VAR 0 3
64711: PPUSH
64712: CALL_OW 266
64716: STR
64717: PUSH
64718: LD_STRING , 
64720: STR
64721: PUSH
64722: LD_VAR 0 3
64726: PPUSH
64727: CALL_OW 250
64731: STR
64732: PUSH
64733: LD_STRING , 
64735: STR
64736: PUSH
64737: LD_VAR 0 3
64741: PPUSH
64742: CALL_OW 251
64746: STR
64747: PUSH
64748: LD_STRING , 
64750: STR
64751: PUSH
64752: LD_VAR 0 3
64756: PPUSH
64757: CALL_OW 254
64761: STR
64762: PUSH
64763: LD_STRING , 
64765: STR
64766: PUSH
64767: LD_VAR 0 3
64771: PPUSH
64772: LD_INT 1
64774: PPUSH
64775: CALL_OW 268
64779: STR
64780: PUSH
64781: LD_STRING , 
64783: STR
64784: PUSH
64785: LD_VAR 0 3
64789: PPUSH
64790: LD_INT 2
64792: PPUSH
64793: CALL_OW 268
64797: STR
64798: PUSH
64799: LD_STRING ],
64801: STR
64802: PPUSH
64803: CALL_OW 561
// end ;
64807: GO 64701
64809: POP
64810: POP
// AddToLog ( ]; ) ;
64811: LD_STRING ];
64813: PPUSH
64814: CALL_OW 561
// end ;
64818: LD_VAR 0 2
64822: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64823: LD_INT 0
64825: PPUSH
64826: PPUSH
64827: PPUSH
64828: PPUSH
64829: PPUSH
// if not area or not rate or not max then
64830: LD_VAR 0 1
64834: NOT
64835: PUSH
64836: LD_VAR 0 2
64840: NOT
64841: OR
64842: PUSH
64843: LD_VAR 0 4
64847: NOT
64848: OR
64849: IFFALSE 64853
// exit ;
64851: GO 65045
// while 1 do
64853: LD_INT 1
64855: IFFALSE 65045
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64857: LD_ADDR_VAR 0 9
64861: PUSH
64862: LD_VAR 0 1
64866: PPUSH
64867: LD_INT 1
64869: PPUSH
64870: CALL_OW 287
64874: PUSH
64875: LD_INT 10
64877: MUL
64878: ST_TO_ADDR
// r := rate / 10 ;
64879: LD_ADDR_VAR 0 7
64883: PUSH
64884: LD_VAR 0 2
64888: PUSH
64889: LD_INT 10
64891: DIVREAL
64892: ST_TO_ADDR
// time := 1 1$00 ;
64893: LD_ADDR_VAR 0 8
64897: PUSH
64898: LD_INT 2100
64900: ST_TO_ADDR
// if amount < min then
64901: LD_VAR 0 9
64905: PUSH
64906: LD_VAR 0 3
64910: LESS
64911: IFFALSE 64929
// r := r * 2 else
64913: LD_ADDR_VAR 0 7
64917: PUSH
64918: LD_VAR 0 7
64922: PUSH
64923: LD_INT 2
64925: MUL
64926: ST_TO_ADDR
64927: GO 64955
// if amount > max then
64929: LD_VAR 0 9
64933: PUSH
64934: LD_VAR 0 4
64938: GREATER
64939: IFFALSE 64955
// r := r / 2 ;
64941: LD_ADDR_VAR 0 7
64945: PUSH
64946: LD_VAR 0 7
64950: PUSH
64951: LD_INT 2
64953: DIVREAL
64954: ST_TO_ADDR
// time := time / r ;
64955: LD_ADDR_VAR 0 8
64959: PUSH
64960: LD_VAR 0 8
64964: PUSH
64965: LD_VAR 0 7
64969: DIVREAL
64970: ST_TO_ADDR
// if time < 0 then
64971: LD_VAR 0 8
64975: PUSH
64976: LD_INT 0
64978: LESS
64979: IFFALSE 64996
// time := time * - 1 ;
64981: LD_ADDR_VAR 0 8
64985: PUSH
64986: LD_VAR 0 8
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: MUL
64995: ST_TO_ADDR
// wait ( time ) ;
64996: LD_VAR 0 8
65000: PPUSH
65001: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65005: LD_INT 35
65007: PPUSH
65008: LD_INT 875
65010: PPUSH
65011: CALL_OW 12
65015: PPUSH
65016: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65020: LD_INT 1
65022: PPUSH
65023: LD_INT 5
65025: PPUSH
65026: CALL_OW 12
65030: PPUSH
65031: LD_VAR 0 1
65035: PPUSH
65036: LD_INT 1
65038: PPUSH
65039: CALL_OW 55
// end ;
65043: GO 64853
// end ;
65045: LD_VAR 0 5
65049: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65050: LD_INT 0
65052: PPUSH
65053: PPUSH
65054: PPUSH
65055: PPUSH
65056: PPUSH
65057: PPUSH
65058: PPUSH
65059: PPUSH
// if not turrets or not factories then
65060: LD_VAR 0 1
65064: NOT
65065: PUSH
65066: LD_VAR 0 2
65070: NOT
65071: OR
65072: IFFALSE 65076
// exit ;
65074: GO 65383
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65076: LD_ADDR_VAR 0 10
65080: PUSH
65081: LD_INT 5
65083: PUSH
65084: LD_INT 6
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: LD_INT 4
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: LD_INT 5
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 24
65118: PUSH
65119: LD_INT 25
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 23
65128: PUSH
65129: LD_INT 27
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 42
65142: PUSH
65143: LD_INT 43
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 44
65152: PUSH
65153: LD_INT 46
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 45
65162: PUSH
65163: LD_INT 47
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: LIST
65179: ST_TO_ADDR
// result := [ ] ;
65180: LD_ADDR_VAR 0 3
65184: PUSH
65185: EMPTY
65186: ST_TO_ADDR
// for i in turrets do
65187: LD_ADDR_VAR 0 4
65191: PUSH
65192: LD_VAR 0 1
65196: PUSH
65197: FOR_IN
65198: IFFALSE 65381
// begin nat := GetNation ( i ) ;
65200: LD_ADDR_VAR 0 7
65204: PUSH
65205: LD_VAR 0 4
65209: PPUSH
65210: CALL_OW 248
65214: ST_TO_ADDR
// weapon := 0 ;
65215: LD_ADDR_VAR 0 8
65219: PUSH
65220: LD_INT 0
65222: ST_TO_ADDR
// if not nat then
65223: LD_VAR 0 7
65227: NOT
65228: IFFALSE 65232
// continue ;
65230: GO 65197
// for j in list [ nat ] do
65232: LD_ADDR_VAR 0 5
65236: PUSH
65237: LD_VAR 0 10
65241: PUSH
65242: LD_VAR 0 7
65246: ARRAY
65247: PUSH
65248: FOR_IN
65249: IFFALSE 65290
// if GetBWeapon ( i ) = j [ 1 ] then
65251: LD_VAR 0 4
65255: PPUSH
65256: CALL_OW 269
65260: PUSH
65261: LD_VAR 0 5
65265: PUSH
65266: LD_INT 1
65268: ARRAY
65269: EQUAL
65270: IFFALSE 65288
// begin weapon := j [ 2 ] ;
65272: LD_ADDR_VAR 0 8
65276: PUSH
65277: LD_VAR 0 5
65281: PUSH
65282: LD_INT 2
65284: ARRAY
65285: ST_TO_ADDR
// break ;
65286: GO 65290
// end ;
65288: GO 65248
65290: POP
65291: POP
// if not weapon then
65292: LD_VAR 0 8
65296: NOT
65297: IFFALSE 65301
// continue ;
65299: GO 65197
// for k in factories do
65301: LD_ADDR_VAR 0 6
65305: PUSH
65306: LD_VAR 0 2
65310: PUSH
65311: FOR_IN
65312: IFFALSE 65377
// begin weapons := AvailableWeaponList ( k ) ;
65314: LD_ADDR_VAR 0 9
65318: PUSH
65319: LD_VAR 0 6
65323: PPUSH
65324: CALL_OW 478
65328: ST_TO_ADDR
// if not weapons then
65329: LD_VAR 0 9
65333: NOT
65334: IFFALSE 65338
// continue ;
65336: GO 65311
// if weapon in weapons then
65338: LD_VAR 0 8
65342: PUSH
65343: LD_VAR 0 9
65347: IN
65348: IFFALSE 65375
// begin result := [ i , weapon ] ;
65350: LD_ADDR_VAR 0 3
65354: PUSH
65355: LD_VAR 0 4
65359: PUSH
65360: LD_VAR 0 8
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: ST_TO_ADDR
// exit ;
65369: POP
65370: POP
65371: POP
65372: POP
65373: GO 65383
// end ; end ;
65375: GO 65311
65377: POP
65378: POP
// end ;
65379: GO 65197
65381: POP
65382: POP
// end ;
65383: LD_VAR 0 3
65387: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65388: LD_INT 0
65390: PPUSH
// if not side or side > 8 then
65391: LD_VAR 0 3
65395: NOT
65396: PUSH
65397: LD_VAR 0 3
65401: PUSH
65402: LD_INT 8
65404: GREATER
65405: OR
65406: IFFALSE 65410
// exit ;
65408: GO 65469
// if not range then
65410: LD_VAR 0 4
65414: NOT
65415: IFFALSE 65426
// range := - 12 ;
65417: LD_ADDR_VAR 0 4
65421: PUSH
65422: LD_INT 12
65424: NEG
65425: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65426: LD_VAR 0 1
65430: PPUSH
65431: LD_VAR 0 2
65435: PPUSH
65436: LD_VAR 0 3
65440: PPUSH
65441: LD_VAR 0 4
65445: PPUSH
65446: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65450: LD_VAR 0 1
65454: PPUSH
65455: LD_VAR 0 2
65459: PPUSH
65460: LD_VAR 0 3
65464: PPUSH
65465: CALL_OW 331
// end ;
65469: LD_VAR 0 5
65473: RET
// export function Video ( mode ) ; begin
65474: LD_INT 0
65476: PPUSH
// ingame_video = mode ;
65477: LD_ADDR_OWVAR 52
65481: PUSH
65482: LD_VAR 0 1
65486: ST_TO_ADDR
// interface_hidden = mode ;
65487: LD_ADDR_OWVAR 54
65491: PUSH
65492: LD_VAR 0 1
65496: ST_TO_ADDR
// end ;
65497: LD_VAR 0 2
65501: RET
// export function Join ( array , element ) ; begin
65502: LD_INT 0
65504: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65505: LD_ADDR_VAR 0 3
65509: PUSH
65510: LD_VAR 0 1
65514: PPUSH
65515: LD_VAR 0 1
65519: PUSH
65520: LD_INT 1
65522: PLUS
65523: PPUSH
65524: LD_VAR 0 2
65528: PPUSH
65529: CALL_OW 1
65533: ST_TO_ADDR
// end ;
65534: LD_VAR 0 3
65538: RET
// export function JoinUnion ( array , element ) ; begin
65539: LD_INT 0
65541: PPUSH
// result := array union element ;
65542: LD_ADDR_VAR 0 3
65546: PUSH
65547: LD_VAR 0 1
65551: PUSH
65552: LD_VAR 0 2
65556: UNION
65557: ST_TO_ADDR
// end ;
65558: LD_VAR 0 3
65562: RET
// export function GetBehemoths ( side ) ; begin
65563: LD_INT 0
65565: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
65566: LD_ADDR_VAR 0 2
65570: PUSH
65571: LD_INT 22
65573: PUSH
65574: LD_VAR 0 1
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 31
65585: PUSH
65586: LD_INT 25
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PPUSH
65597: CALL_OW 69
65601: ST_TO_ADDR
// end ;
65602: LD_VAR 0 2
65606: RET
// export function Shuffle ( array ) ; var i , index ; begin
65607: LD_INT 0
65609: PPUSH
65610: PPUSH
65611: PPUSH
// result := [ ] ;
65612: LD_ADDR_VAR 0 2
65616: PUSH
65617: EMPTY
65618: ST_TO_ADDR
// if not array then
65619: LD_VAR 0 1
65623: NOT
65624: IFFALSE 65628
// exit ;
65626: GO 65727
// Randomize ;
65628: CALL_OW 10
// for i = array downto 1 do
65632: LD_ADDR_VAR 0 3
65636: PUSH
65637: DOUBLE
65638: LD_VAR 0 1
65642: INC
65643: ST_TO_ADDR
65644: LD_INT 1
65646: PUSH
65647: FOR_DOWNTO
65648: IFFALSE 65725
// begin index := rand ( 1 , array ) ;
65650: LD_ADDR_VAR 0 4
65654: PUSH
65655: LD_INT 1
65657: PPUSH
65658: LD_VAR 0 1
65662: PPUSH
65663: CALL_OW 12
65667: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65668: LD_ADDR_VAR 0 2
65672: PUSH
65673: LD_VAR 0 2
65677: PPUSH
65678: LD_VAR 0 2
65682: PUSH
65683: LD_INT 1
65685: PLUS
65686: PPUSH
65687: LD_VAR 0 1
65691: PUSH
65692: LD_VAR 0 4
65696: ARRAY
65697: PPUSH
65698: CALL_OW 2
65702: ST_TO_ADDR
// array := Delete ( array , index ) ;
65703: LD_ADDR_VAR 0 1
65707: PUSH
65708: LD_VAR 0 1
65712: PPUSH
65713: LD_VAR 0 4
65717: PPUSH
65718: CALL_OW 3
65722: ST_TO_ADDR
// end ;
65723: GO 65647
65725: POP
65726: POP
// end ;
65727: LD_VAR 0 2
65731: RET
// export function GetBaseMaterials ( base ) ; begin
65732: LD_INT 0
65734: PPUSH
// result := [ 0 , 0 , 0 ] ;
65735: LD_ADDR_VAR 0 2
65739: PUSH
65740: LD_INT 0
65742: PUSH
65743: LD_INT 0
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// if not base then
65754: LD_VAR 0 1
65758: NOT
65759: IFFALSE 65763
// exit ;
65761: GO 65812
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65763: LD_ADDR_VAR 0 2
65767: PUSH
65768: LD_VAR 0 1
65772: PPUSH
65773: LD_INT 1
65775: PPUSH
65776: CALL_OW 275
65780: PUSH
65781: LD_VAR 0 1
65785: PPUSH
65786: LD_INT 2
65788: PPUSH
65789: CALL_OW 275
65793: PUSH
65794: LD_VAR 0 1
65798: PPUSH
65799: LD_INT 3
65801: PPUSH
65802: CALL_OW 275
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: LIST
65811: ST_TO_ADDR
// end ;
65812: LD_VAR 0 2
65816: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65817: LD_INT 0
65819: PPUSH
65820: PPUSH
// result := array ;
65821: LD_ADDR_VAR 0 3
65825: PUSH
65826: LD_VAR 0 1
65830: ST_TO_ADDR
// if size > 0 then
65831: LD_VAR 0 2
65835: PUSH
65836: LD_INT 0
65838: GREATER
65839: IFFALSE 65885
// for i := array downto size do
65841: LD_ADDR_VAR 0 4
65845: PUSH
65846: DOUBLE
65847: LD_VAR 0 1
65851: INC
65852: ST_TO_ADDR
65853: LD_VAR 0 2
65857: PUSH
65858: FOR_DOWNTO
65859: IFFALSE 65883
// result := Delete ( result , result ) ;
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: LD_VAR 0 3
65870: PPUSH
65871: LD_VAR 0 3
65875: PPUSH
65876: CALL_OW 3
65880: ST_TO_ADDR
65881: GO 65858
65883: POP
65884: POP
// end ;
65885: LD_VAR 0 3
65889: RET
// export function ComExit ( unit ) ; var tmp ; begin
65890: LD_INT 0
65892: PPUSH
65893: PPUSH
// if not IsInUnit ( unit ) then
65894: LD_VAR 0 1
65898: PPUSH
65899: CALL_OW 310
65903: NOT
65904: IFFALSE 65908
// exit ;
65906: GO 65968
// tmp := IsInUnit ( unit ) ;
65908: LD_ADDR_VAR 0 3
65912: PUSH
65913: LD_VAR 0 1
65917: PPUSH
65918: CALL_OW 310
65922: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65923: LD_VAR 0 3
65927: PPUSH
65928: CALL_OW 247
65932: PUSH
65933: LD_INT 2
65935: EQUAL
65936: IFFALSE 65949
// ComExitVehicle ( unit ) else
65938: LD_VAR 0 1
65942: PPUSH
65943: CALL_OW 121
65947: GO 65958
// ComExitBuilding ( unit ) ;
65949: LD_VAR 0 1
65953: PPUSH
65954: CALL_OW 122
// result := tmp ;
65958: LD_ADDR_VAR 0 2
65962: PUSH
65963: LD_VAR 0 3
65967: ST_TO_ADDR
// end ;
65968: LD_VAR 0 2
65972: RET
// export function ResetHc ; begin
65973: LD_INT 0
65975: PPUSH
// InitHc ;
65976: CALL_OW 19
// hc_importance := 0 ;
65980: LD_ADDR_OWVAR 32
65984: PUSH
65985: LD_INT 0
65987: ST_TO_ADDR
// end ;
65988: LD_VAR 0 1
65992: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65993: LD_INT 0
65995: PPUSH
65996: PPUSH
65997: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65998: LD_ADDR_VAR 0 6
66002: PUSH
66003: LD_VAR 0 1
66007: PUSH
66008: LD_VAR 0 3
66012: PLUS
66013: PUSH
66014: LD_INT 2
66016: DIV
66017: ST_TO_ADDR
// if _x < 0 then
66018: LD_VAR 0 6
66022: PUSH
66023: LD_INT 0
66025: LESS
66026: IFFALSE 66043
// _x := _x * - 1 ;
66028: LD_ADDR_VAR 0 6
66032: PUSH
66033: LD_VAR 0 6
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: MUL
66042: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66043: LD_ADDR_VAR 0 7
66047: PUSH
66048: LD_VAR 0 2
66052: PUSH
66053: LD_VAR 0 4
66057: PLUS
66058: PUSH
66059: LD_INT 2
66061: DIV
66062: ST_TO_ADDR
// if _y < 0 then
66063: LD_VAR 0 7
66067: PUSH
66068: LD_INT 0
66070: LESS
66071: IFFALSE 66088
// _y := _y * - 1 ;
66073: LD_ADDR_VAR 0 7
66077: PUSH
66078: LD_VAR 0 7
66082: PUSH
66083: LD_INT 1
66085: NEG
66086: MUL
66087: ST_TO_ADDR
// result := [ _x , _y ] ;
66088: LD_ADDR_VAR 0 5
66092: PUSH
66093: LD_VAR 0 6
66097: PUSH
66098: LD_VAR 0 7
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: ST_TO_ADDR
// end ;
66107: LD_VAR 0 5
66111: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66112: LD_INT 0
66114: PPUSH
66115: PPUSH
66116: PPUSH
66117: PPUSH
// task := GetTaskList ( unit ) ;
66118: LD_ADDR_VAR 0 7
66122: PUSH
66123: LD_VAR 0 1
66127: PPUSH
66128: CALL_OW 437
66132: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66133: LD_VAR 0 7
66137: NOT
66138: PUSH
66139: LD_VAR 0 1
66143: PPUSH
66144: LD_VAR 0 2
66148: PPUSH
66149: CALL_OW 308
66153: NOT
66154: AND
66155: IFFALSE 66159
// exit ;
66157: GO 66277
// if IsInArea ( unit , area ) then
66159: LD_VAR 0 1
66163: PPUSH
66164: LD_VAR 0 2
66168: PPUSH
66169: CALL_OW 308
66173: IFFALSE 66191
// begin ComMoveToArea ( unit , goAway ) ;
66175: LD_VAR 0 1
66179: PPUSH
66180: LD_VAR 0 3
66184: PPUSH
66185: CALL_OW 113
// exit ;
66189: GO 66277
// end ; if task [ 1 ] [ 1 ] <> M then
66191: LD_VAR 0 7
66195: PUSH
66196: LD_INT 1
66198: ARRAY
66199: PUSH
66200: LD_INT 1
66202: ARRAY
66203: PUSH
66204: LD_STRING M
66206: NONEQUAL
66207: IFFALSE 66211
// exit ;
66209: GO 66277
// x := task [ 1 ] [ 2 ] ;
66211: LD_ADDR_VAR 0 5
66215: PUSH
66216: LD_VAR 0 7
66220: PUSH
66221: LD_INT 1
66223: ARRAY
66224: PUSH
66225: LD_INT 2
66227: ARRAY
66228: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66229: LD_ADDR_VAR 0 6
66233: PUSH
66234: LD_VAR 0 7
66238: PUSH
66239: LD_INT 1
66241: ARRAY
66242: PUSH
66243: LD_INT 3
66245: ARRAY
66246: ST_TO_ADDR
// if InArea ( x , y , area ) then
66247: LD_VAR 0 5
66251: PPUSH
66252: LD_VAR 0 6
66256: PPUSH
66257: LD_VAR 0 2
66261: PPUSH
66262: CALL_OW 309
66266: IFFALSE 66277
// ComStop ( unit ) ;
66268: LD_VAR 0 1
66272: PPUSH
66273: CALL_OW 141
// end ;
66277: LD_VAR 0 4
66281: RET
// export function Abs ( value ) ; begin
66282: LD_INT 0
66284: PPUSH
// result := value ;
66285: LD_ADDR_VAR 0 2
66289: PUSH
66290: LD_VAR 0 1
66294: ST_TO_ADDR
// if value < 0 then
66295: LD_VAR 0 1
66299: PUSH
66300: LD_INT 0
66302: LESS
66303: IFFALSE 66320
// result := value * - 1 ;
66305: LD_ADDR_VAR 0 2
66309: PUSH
66310: LD_VAR 0 1
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: MUL
66319: ST_TO_ADDR
// end ; end_of_file
66320: LD_VAR 0 2
66324: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66325: LD_VAR 0 1
66329: PUSH
66330: LD_INT 200
66332: DOUBLE
66333: GREATEREQUAL
66334: IFFALSE 66342
66336: LD_INT 299
66338: DOUBLE
66339: LESSEQUAL
66340: IFTRUE 66344
66342: GO 66376
66344: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66345: LD_VAR 0 1
66349: PPUSH
66350: LD_VAR 0 2
66354: PPUSH
66355: LD_VAR 0 3
66359: PPUSH
66360: LD_VAR 0 4
66364: PPUSH
66365: LD_VAR 0 5
66369: PPUSH
66370: CALL 25638 0 5
66374: GO 66453
66376: LD_INT 300
66378: DOUBLE
66379: GREATEREQUAL
66380: IFFALSE 66388
66382: LD_INT 399
66384: DOUBLE
66385: LESSEQUAL
66386: IFTRUE 66390
66388: GO 66452
66390: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66391: LD_VAR 0 1
66395: PPUSH
66396: LD_VAR 0 2
66400: PPUSH
66401: LD_VAR 0 3
66405: PPUSH
66406: LD_VAR 0 4
66410: PPUSH
66411: LD_VAR 0 5
66415: PPUSH
66416: LD_VAR 0 6
66420: PPUSH
66421: LD_VAR 0 7
66425: PPUSH
66426: LD_VAR 0 8
66430: PPUSH
66431: LD_VAR 0 9
66435: PPUSH
66436: LD_VAR 0 10
66440: PPUSH
66441: LD_VAR 0 11
66445: PPUSH
66446: CALL 23544 0 11
66450: GO 66453
66452: POP
// end ;
66453: PPOPN 11
66455: END
