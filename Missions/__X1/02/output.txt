// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 834 0 0
// PrepareArabian ;
  27: CALL 11684 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4691 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: PUSH
 771: LD_VAR 0 2
 775: NOT
 776: OR
 777: IFFALSE 781
// exit ;
 779: GO 829
// if not See ( GetSide ( observer ) , unit ) then
 781: LD_VAR 0 1
 785: PPUSH
 786: CALL_OW 255
 790: PPUSH
 791: LD_VAR 0 2
 795: PPUSH
 796: CALL_OW 292
 800: NOT
 801: IFFALSE 805
// exit ;
 803: GO 829
// result := GetDistUnits ( observer , unit ) < 12 ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_VAR 0 1
 814: PPUSH
 815: LD_VAR 0 2
 819: PPUSH
 820: CALL_OW 296
 824: PUSH
 825: LD_INT 12
 827: LESS
 828: ST_TO_ADDR
// end ; end_of_file
 829: LD_VAR 0 3
 833: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 834: LD_INT 0
 836: PPUSH
 837: PPUSH
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
// usForces := [ ] ;
 842: LD_ADDR_EXP 21
 846: PUSH
 847: EMPTY
 848: ST_TO_ADDR
// usSci := [ ] ;
 849: LD_ADDR_EXP 22
 853: PUSH
 854: EMPTY
 855: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 856: LD_INT 1
 858: PPUSH
 859: LD_STRING Delta
 861: PPUSH
 862: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 866: LD_INT 1
 868: PPUSH
 869: CALL_OW 274
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: LD_INT 400
 879: PPUSH
 880: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 274
 891: PPUSH
 892: LD_INT 2
 894: PPUSH
 895: LD_INT 80
 897: PPUSH
 898: CALL_OW 277
// uc_side := 1 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 1
 909: ST_TO_ADDR
// uc_nation := 1 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 1
 917: ST_TO_ADDR
// InitHc ;
 918: CALL_OW 19
// hc_importance := 0 ;
 922: LD_ADDR_OWVAR 32
 926: PUSH
 927: LD_INT 0
 929: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 930: LD_ADDR_EXP 20
 934: PUSH
 935: LD_STRING Lynch
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: LD_STRING 
 943: PPUSH
 944: CALL 32848 0 3
 948: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 949: LD_ADDR_EXP 19
 953: PUSH
 954: LD_STRING Gladstone
 956: PPUSH
 957: LD_INT 0
 959: PPUSH
 960: LD_STRING 
 962: PPUSH
 963: CALL 32848 0 3
 967: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 968: LD_EXP 20
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 980: LD_EXP 19
 984: PPUSH
 985: LD_INT 3
 987: PPUSH
 988: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 992: LD_ADDR_VAR 0 2
 996: PUSH
 997: DOUBLE
 998: LD_INT 1
1000: DEC
1001: ST_TO_ADDR
1002: LD_INT 1
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 2
1010: PUSH
1011: LD_INT 2
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: LIST
1018: LIST
1019: PUSH
1020: LD_OWVAR 67
1024: ARRAY
1025: PUSH
1026: FOR_TO
1027: IFFALSE 1077
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1029: LD_INT 0
1031: PPUSH
1032: LD_INT 2
1034: PPUSH
1035: LD_INT 1
1037: PUSH
1038: LD_INT 2
1040: PUSH
1041: LD_INT 2
1043: PUSH
1044: LD_INT 3
1046: PUSH
1047: EMPTY
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_OWVAR 67
1057: ARRAY
1058: PPUSH
1059: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1063: CALL_OW 44
1067: PPUSH
1068: LD_INT 1
1070: PPUSH
1071: CALL_OW 52
// end ;
1075: GO 1026
1077: POP
1078: POP
// for i := 1 to 7 - Difficulty do
1079: LD_ADDR_VAR 0 2
1083: PUSH
1084: DOUBLE
1085: LD_INT 1
1087: DEC
1088: ST_TO_ADDR
1089: LD_INT 7
1091: PUSH
1092: LD_OWVAR 67
1096: MINUS
1097: PUSH
1098: FOR_TO
1099: IFFALSE 1188
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1101: LD_INT 0
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 2
1112: PUSH
1113: LD_INT 2
1115: PUSH
1116: LD_INT 2
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: LIST
1123: LIST
1124: PUSH
1125: LD_OWVAR 67
1129: ARRAY
1130: PPUSH
1131: CALL_OW 380
// un := CreateHuman ;
1135: LD_ADDR_VAR 0 3
1139: PUSH
1140: CALL_OW 44
1144: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1145: LD_VAR 0 3
1149: PPUSH
1150: LD_INT 3
1152: PPUSH
1153: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1157: LD_ADDR_EXP 22
1161: PUSH
1162: LD_EXP 22
1166: PPUSH
1167: LD_EXP 22
1171: PUSH
1172: LD_INT 1
1174: PLUS
1175: PPUSH
1176: LD_VAR 0 3
1180: PPUSH
1181: CALL_OW 1
1185: ST_TO_ADDR
// end ;
1186: GO 1098
1188: POP
1189: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1190: LD_ADDR_VAR 0 6
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 30
1207: PUSH
1208: LD_INT 4
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: DOUBLE
1230: LD_INT 1
1232: DEC
1233: ST_TO_ADDR
1234: LD_INT 3
1236: PUSH
1237: LD_INT 1
1239: PUSH
1240: LD_INT 2
1242: PUSH
1243: LD_INT 2
1245: PUSH
1246: LD_INT 3
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PLUS
1261: PUSH
1262: FOR_TO
1263: IFFALSE 1345
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1265: LD_INT 0
1267: PPUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 1
1273: PUSH
1274: LD_INT 2
1276: PUSH
1277: LD_INT 3
1279: PUSH
1280: LD_INT 3
1282: PUSH
1283: EMPTY
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: PUSH
1289: LD_OWVAR 67
1293: ARRAY
1294: PPUSH
1295: CALL_OW 380
// un := CreateHuman ;
1299: LD_ADDR_VAR 0 3
1303: PUSH
1304: CALL_OW 44
1308: ST_TO_ADDR
// usForces := usForces ^ un ;
1309: LD_ADDR_EXP 21
1313: PUSH
1314: LD_EXP 21
1318: PUSH
1319: LD_VAR 0 3
1323: ADD
1324: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1325: LD_VAR 0 3
1329: PPUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: ARRAY
1338: PPUSH
1339: CALL_OW 52
// end ;
1343: GO 1262
1345: POP
1346: POP
// if Difficulty > 1 then
1347: LD_OWVAR 67
1351: PUSH
1352: LD_INT 1
1354: GREATER
1355: IFFALSE 1454
// begin for i := 1 to Difficulty do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: DOUBLE
1363: LD_INT 1
1365: DEC
1366: ST_TO_ADDR
1367: LD_OWVAR 67
1371: PUSH
1372: FOR_TO
1373: IFFALSE 1452
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1375: LD_INT 0
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 1
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: LD_INT 2
1389: PUSH
1390: LD_INT 3
1392: PUSH
1393: EMPTY
1394: LIST
1395: LIST
1396: LIST
1397: LIST
1398: PUSH
1399: LD_OWVAR 67
1403: ARRAY
1404: PPUSH
1405: CALL_OW 380
// un := CreateHuman ;
1409: LD_ADDR_VAR 0 3
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// usForces := usForces ^ un ;
1419: LD_ADDR_EXP 21
1423: PUSH
1424: LD_EXP 21
1428: PUSH
1429: LD_VAR 0 3
1433: ADD
1434: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1435: LD_VAR 0 3
1439: PPUSH
1440: LD_INT 9
1442: PPUSH
1443: LD_INT 0
1445: PPUSH
1446: CALL_OW 49
// end ;
1450: GO 1372
1452: POP
1453: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1454: LD_INT 1
1456: PPUSH
1457: LD_INT 1
1459: PPUSH
1460: LD_INT 1
1462: PPUSH
1463: LD_INT 2
1465: PPUSH
1466: LD_INT 1
1468: PPUSH
1469: LD_INT 2
1471: PPUSH
1472: LD_INT 100
1474: PPUSH
1475: CALL 241 0 7
// veh := CreateVehicle ;
1479: LD_ADDR_VAR 0 4
1483: PUSH
1484: CALL_OW 45
1488: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 2
1496: PPUSH
1497: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1501: LD_VAR 0 4
1505: PPUSH
1506: LD_INT 43
1508: PPUSH
1509: LD_INT 24
1511: PPUSH
1512: LD_INT 0
1514: PPUSH
1515: CALL_OW 48
// end ;
1519: LD_VAR 0 1
1523: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1524: LD_INT 0
1526: PPUSH
1527: PPUSH
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
// if not usSci then
1532: LD_EXP 22
1536: NOT
1537: IFFALSE 1541
// exit ;
1539: GO 1715
// xy := AreaToList ( tameArea , 0 ) ;
1541: LD_ADDR_VAR 0 6
1545: PUSH
1546: LD_INT 5
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 517
1556: ST_TO_ADDR
// for i in usSci do
1557: LD_ADDR_VAR 0 2
1561: PUSH
1562: LD_EXP 22
1566: PUSH
1567: FOR_IN
1568: IFFALSE 1713
// begin k := rand ( 1 , xy [ 1 ] ) ;
1570: LD_ADDR_VAR 0 4
1574: PUSH
1575: LD_INT 1
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PPUSH
1587: CALL_OW 12
1591: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1592: LD_VAR 0 2
1596: PPUSH
1597: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1601: LD_VAR 0 2
1605: PPUSH
1606: LD_VAR 0 6
1610: PUSH
1611: LD_INT 1
1613: ARRAY
1614: PUSH
1615: LD_VAR 0 4
1619: ARRAY
1620: PPUSH
1621: LD_VAR 0 6
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PUSH
1630: LD_VAR 0 4
1634: ARRAY
1635: PPUSH
1636: CALL_OW 171
// for j := 1 to 2 do
1640: LD_ADDR_VAR 0 3
1644: PUSH
1645: DOUBLE
1646: LD_INT 1
1648: DEC
1649: ST_TO_ADDR
1650: LD_INT 2
1652: PUSH
1653: FOR_TO
1654: IFFALSE 1709
// begin tmp := Delete ( xy [ j ] , k ) ;
1656: LD_ADDR_VAR 0 5
1660: PUSH
1661: LD_VAR 0 6
1665: PUSH
1666: LD_VAR 0 3
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 3
1681: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1682: LD_ADDR_VAR 0 6
1686: PUSH
1687: LD_VAR 0 6
1691: PPUSH
1692: LD_VAR 0 3
1696: PPUSH
1697: LD_VAR 0 5
1701: PPUSH
1702: CALL_OW 1
1706: ST_TO_ADDR
// end ;
1707: GO 1653
1709: POP
1710: POP
// end ;
1711: GO 1567
1713: POP
1714: POP
// end ;
1715: LD_VAR 0 1
1719: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1720: LD_EXP 4
1724: PUSH
1725: LD_EXP 22
1729: AND
1730: PUSH
1731: LD_EXP 10
1735: NOT
1736: AND
1737: PUSH
1738: LD_INT 22
1740: PUSH
1741: LD_INT 0
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: PUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 12
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: EMPTY
1759: LIST
1760: LIST
1761: PPUSH
1762: CALL_OW 69
1766: AND
1767: IFFALSE 2259
1769: GO 1771
1771: DISABLE
1772: LD_INT 0
1774: PPUSH
1775: PPUSH
1776: PPUSH
1777: PPUSH
1778: PPUSH
// begin enable ;
1779: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1780: LD_EXP 22
1784: PPUSH
1785: LD_INT 2
1787: PUSH
1788: LD_INT 60
1790: PUSH
1791: EMPTY
1792: LIST
1793: PUSH
1794: LD_INT 54
1796: PUSH
1797: EMPTY
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: PPUSH
1805: CALL_OW 72
1809: IFFALSE 1813
// exit ;
1811: GO 2259
// for i in usSci do
1813: LD_ADDR_VAR 0 1
1817: PUSH
1818: LD_EXP 22
1822: PUSH
1823: FOR_IN
1824: IFFALSE 2257
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1826: LD_VAR 0 1
1830: PPUSH
1831: CALL_OW 314
1835: NOT
1836: PUSH
1837: LD_VAR 0 1
1841: PPUSH
1842: CALL_OW 256
1846: PUSH
1847: LD_INT 1000
1849: EQUAL
1850: AND
1851: IFFALSE 2058
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1853: LD_ADDR_VAR 0 5
1857: PUSH
1858: LD_INT 22
1860: PUSH
1861: LD_INT 0
1863: PUSH
1864: EMPTY
1865: LIST
1866: LIST
1867: PUSH
1868: LD_INT 25
1870: PUSH
1871: LD_INT 12
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: EMPTY
1879: LIST
1880: LIST
1881: PPUSH
1882: CALL_OW 69
1886: PPUSH
1887: LD_VAR 0 1
1891: PPUSH
1892: CALL_OW 74
1896: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1897: LD_VAR 0 1
1901: PPUSH
1902: LD_VAR 0 5
1906: PPUSH
1907: CALL_OW 296
1911: PUSH
1912: LD_INT 10
1914: LESS
1915: IFFALSE 1948
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1917: LD_VAR 0 1
1921: PPUSH
1922: LD_VAR 0 5
1926: PPUSH
1927: CALL_OW 250
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 251
1941: PPUSH
1942: CALL_OW 131
1946: GO 2058
// begin d := rand ( 0 , 5 ) ;
1948: LD_ADDR_VAR 0 4
1952: PUSH
1953: LD_INT 0
1955: PPUSH
1956: LD_INT 5
1958: PPUSH
1959: CALL_OW 12
1963: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 2
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 250
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 272
1991: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 251
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: CALL_OW 273
2019: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2020: LD_VAR 0 2
2024: PPUSH
2025: LD_VAR 0 3
2029: PPUSH
2030: CALL_OW 488
2034: NOT
2035: IFFALSE 2039
// continue ;
2037: GO 1823
// ComMoveXY ( i , x , y ) ;
2039: LD_VAR 0 1
2043: PPUSH
2044: LD_VAR 0 2
2048: PPUSH
2049: LD_VAR 0 3
2053: PPUSH
2054: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2058: LD_VAR 0 1
2062: PPUSH
2063: CALL_OW 256
2067: PUSH
2068: LD_INT 900
2070: LESS
2071: PUSH
2072: LD_VAR 0 1
2076: PPUSH
2077: LD_INT 37
2079: PPUSH
2080: LD_INT 23
2082: PPUSH
2083: CALL_OW 297
2087: PUSH
2088: LD_INT 10
2090: GREATER
2091: AND
2092: IFFALSE 2168
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2094: LD_EXP 19
2098: PPUSH
2099: CALL_OW 302
2103: PUSH
2104: LD_EXP 19
2108: PPUSH
2109: CALL_OW 310
2113: AND
2114: IFFALSE 2125
// ComExitBuilding ( Gladstone ) ;
2116: LD_EXP 19
2120: PPUSH
2121: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2125: LD_EXP 19
2129: PPUSH
2130: LD_VAR 0 1
2134: PPUSH
2135: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2139: LD_EXP 19
2143: PPUSH
2144: LD_INT 3
2146: PPUSH
2147: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2151: LD_VAR 0 1
2155: PPUSH
2156: LD_INT 37
2158: PPUSH
2159: LD_INT 23
2161: PPUSH
2162: CALL_OW 111
// end else
2166: GO 2255
// if GetLives ( i ) = 1000 then
2168: LD_VAR 0 1
2172: PPUSH
2173: CALL_OW 256
2177: PUSH
2178: LD_INT 1000
2180: EQUAL
2181: IFFALSE 2255
// begin if SideShoot ( i ) = 2 then
2183: LD_VAR 0 1
2187: PPUSH
2188: CALL_OW 503
2192: PUSH
2193: LD_INT 2
2195: EQUAL
2196: IFFALSE 2243
// begin if not usAlert then
2198: LD_EXP 10
2202: NOT
2203: IFFALSE 2213
// usAlert := true ;
2205: LD_ADDR_EXP 10
2209: PUSH
2210: LD_INT 1
2212: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2213: LD_VAR 0 1
2217: PPUSH
2218: LD_INT 3
2220: PPUSH
2221: CALL_OW 180
// usSci := usSci diff i ;
2225: LD_ADDR_EXP 22
2229: PUSH
2230: LD_EXP 22
2234: PUSH
2235: LD_VAR 0 1
2239: DIFF
2240: ST_TO_ADDR
// end else
2241: GO 2255
// ComMoveToArea ( i , tameArea ) ;
2243: LD_VAR 0 1
2247: PPUSH
2248: LD_INT 5
2250: PPUSH
2251: CALL_OW 113
// end ; end ;
2255: GO 1823
2257: POP
2258: POP
// end ;
2259: PPOPN 5
2261: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2262: LD_EXP 10
2266: NOT
2267: PUSH
2268: LD_INT 22
2270: PUSH
2271: LD_INT 1
2273: PUSH
2274: EMPTY
2275: LIST
2276: LIST
2277: PUSH
2278: LD_INT 21
2280: PUSH
2281: LD_INT 3
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: LD_INT 57
2293: PUSH
2294: EMPTY
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: LD_INT 3
2303: PUSH
2304: LD_INT 24
2306: PUSH
2307: LD_INT 999
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: LIST
2323: PPUSH
2324: CALL_OW 69
2328: PUSH
2329: LD_INT 7
2331: PPUSH
2332: LD_INT 22
2334: PUSH
2335: LD_INT 2
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: OR
2347: AND
2348: IFFALSE 2361
2350: GO 2352
2352: DISABLE
// usAlert := true ;
2353: LD_ADDR_EXP 10
2357: PUSH
2358: LD_INT 1
2360: ST_TO_ADDR
2361: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2362: LD_EXP 10
2366: IFFALSE 2713
2368: GO 2370
2370: DISABLE
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
// begin usActiveDefend := true ;
2376: LD_ADDR_EXP 11
2380: PUSH
2381: LD_INT 1
2383: ST_TO_ADDR
// if not usForces then
2384: LD_EXP 21
2388: NOT
2389: IFFALSE 2393
// exit ;
2391: GO 2713
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2393: LD_ADDR_VAR 0 3
2397: PUSH
2398: LD_INT 22
2400: PUSH
2401: LD_INT 1
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 4
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: EMPTY
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 69
2426: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2427: LD_ADDR_VAR 0 2
2431: PUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 30
2444: PUSH
2445: LD_INT 31
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PPUSH
2456: CALL_OW 69
2460: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2461: LD_EXP 20
2465: PPUSH
2466: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2470: LD_EXP 20
2474: PPUSH
2475: LD_VAR 0 3
2479: PUSH
2480: LD_INT 1
2482: ARRAY
2483: PPUSH
2484: CALL_OW 180
// if IsOk ( Gladstone ) then
2488: LD_EXP 19
2492: PPUSH
2493: CALL_OW 302
2497: IFFALSE 2538
// begin ComExitBuilding ( Gladstone ) ;
2499: LD_EXP 19
2503: PPUSH
2504: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_VAR 0 3
2517: PUSH
2518: LD_INT 1
2520: ARRAY
2521: PPUSH
2522: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2526: LD_EXP 19
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2538: LD_EXP 21
2542: PUSH
2543: LD_INT 1
2545: ARRAY
2546: PPUSH
2547: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2551: LD_EXP 21
2555: PUSH
2556: LD_INT 1
2558: ARRAY
2559: PPUSH
2560: LD_VAR 0 2
2564: PUSH
2565: LD_INT 1
2567: ARRAY
2568: PPUSH
2569: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2573: LD_EXP 21
2577: PUSH
2578: LD_INT 2
2580: ARRAY
2581: PPUSH
2582: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2586: LD_EXP 21
2590: PUSH
2591: LD_INT 2
2593: ARRAY
2594: PPUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 30
2607: PUSH
2608: LD_INT 32
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PPUSH
2619: CALL_OW 69
2623: PUSH
2624: LD_INT 1
2626: ARRAY
2627: PPUSH
2628: CALL_OW 180
// if b > 1 and usForces > 2 then
2632: LD_VAR 0 2
2636: PUSH
2637: LD_INT 1
2639: GREATER
2640: PUSH
2641: LD_EXP 21
2645: PUSH
2646: LD_INT 2
2648: GREATER
2649: AND
2650: IFFALSE 2713
// begin repeat wait ( 0 0$1 ) ;
2652: LD_INT 35
2654: PPUSH
2655: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2659: LD_VAR 0 2
2663: PUSH
2664: LD_INT 2
2666: ARRAY
2667: PPUSH
2668: CALL_OW 461
2672: PUSH
2673: LD_INT 1
2675: NONEQUAL
2676: IFFALSE 2652
// ComExitBuilding ( usForces [ 3 ] ) ;
2678: LD_EXP 21
2682: PUSH
2683: LD_INT 3
2685: ARRAY
2686: PPUSH
2687: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2691: LD_EXP 21
2695: PUSH
2696: LD_INT 3
2698: ARRAY
2699: PPUSH
2700: LD_VAR 0 2
2704: PUSH
2705: LD_INT 2
2707: ARRAY
2708: PPUSH
2709: CALL_OW 180
// end ; end ;
2713: PPOPN 3
2715: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2716: LD_INT 3
2718: PPUSH
2719: CALL_OW 256
2723: PUSH
2724: LD_INT 999
2726: LESS
2727: PUSH
2728: LD_EXP 10
2732: AND
2733: PUSH
2734: LD_EXP 21
2738: AND
2739: IFFALSE 2910
2741: GO 2743
2743: DISABLE
2744: LD_INT 0
2746: PPUSH
// begin for i in usForces do
2747: LD_ADDR_VAR 0 1
2751: PUSH
2752: LD_EXP 21
2756: PUSH
2757: FOR_IN
2758: IFFALSE 2797
// begin if IsInUnit ( i ) then
2760: LD_VAR 0 1
2764: PPUSH
2765: CALL_OW 310
2769: IFFALSE 2780
// ComExitBuilding ( i ) ;
2771: LD_VAR 0 1
2775: PPUSH
2776: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2780: LD_VAR 0 1
2784: PPUSH
2785: LD_INT 31
2787: PPUSH
2788: LD_INT 8
2790: PPUSH
2791: CALL_OW 174
// end ;
2795: GO 2757
2797: POP
2798: POP
// wait ( 0 0$8 ) ;
2799: LD_INT 280
2801: PPUSH
2802: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2806: LD_INT 22
2808: PUSH
2809: LD_INT 2
2811: PUSH
2812: EMPTY
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 91
2818: PUSH
2819: LD_INT 3
2821: PUSH
2822: LD_INT 14
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: IFFALSE 2888
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2840: LD_EXP 21
2844: PPUSH
2845: LD_INT 22
2847: PUSH
2848: LD_INT 2
2850: PUSH
2851: EMPTY
2852: LIST
2853: LIST
2854: PUSH
2855: LD_INT 91
2857: PUSH
2858: LD_INT 3
2860: PUSH
2861: LD_INT 14
2863: PUSH
2864: EMPTY
2865: LIST
2866: LIST
2867: LIST
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: CALL_OW 69
2877: PUSH
2878: LD_INT 1
2880: ARRAY
2881: PPUSH
2882: CALL_OW 115
2886: GO 2910
// begin wait ( 0 0$20 ) ;
2888: LD_INT 700
2890: PPUSH
2891: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2895: LD_EXP 21
2899: PPUSH
2900: LD_INT 39
2902: PPUSH
2903: LD_INT 19
2905: PPUSH
2906: CALL_OW 171
// end ; end ;
2910: PPOPN 1
2912: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2913: LD_EXP 23
2917: PPUSH
2918: LD_INT 1
2920: PPUSH
2921: CALL_OW 296
2925: PUSH
2926: LD_INT 10
2928: LESS
2929: PUSH
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 256
2937: PUSH
2938: LD_INT 999
2940: LESS
2941: OR
2942: PUSH
2943: LD_INT 22
2945: PUSH
2946: LD_INT 1
2948: PUSH
2949: EMPTY
2950: LIST
2951: LIST
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 2
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PPUSH
2967: CALL_OW 69
2971: AND
2972: IFFALSE 3086
2974: GO 2976
2976: DISABLE
2977: LD_INT 0
2979: PPUSH
2980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2981: LD_ADDR_VAR 0 1
2985: PUSH
2986: LD_INT 22
2988: PUSH
2989: LD_INT 1
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PUSH
2996: LD_INT 25
2998: PUSH
2999: LD_INT 2
3001: PUSH
3002: EMPTY
3003: LIST
3004: LIST
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 69
3014: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 21
3032: PUSH
3033: LD_INT 2
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PUSH
3040: LD_INT 58
3042: PUSH
3043: EMPTY
3044: LIST
3045: PUSH
3046: EMPTY
3047: LIST
3048: LIST
3049: LIST
3050: PPUSH
3051: CALL_OW 69
3055: ST_TO_ADDR
// if not tmp then
3056: LD_VAR 0 1
3060: NOT
3061: IFFALSE 3065
// exit ;
3063: GO 3086
// ComExitBuilding ( tmp ) ;
3065: LD_VAR 0 1
3069: PPUSH
3070: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3074: LD_VAR 0 1
3078: PPUSH
3079: LD_INT 3
3081: PPUSH
3082: CALL_OW 227
// end ;
3086: PPOPN 2
3088: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3089: LD_EXP 10
3093: PUSH
3094: LD_INT 7
3096: PPUSH
3097: LD_INT 22
3099: PUSH
3100: LD_INT 1
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 21
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 24
3122: PUSH
3123: LD_INT 600
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: EMPTY
3135: LIST
3136: LIST
3137: LIST
3138: PPUSH
3139: CALL_OW 70
3143: AND
3144: IFFALSE 3272
3146: GO 3148
3148: DISABLE
3149: LD_INT 0
3151: PPUSH
3152: PPUSH
// begin enable ;
3153: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3154: LD_ADDR_VAR 0 2
3158: PUSH
3159: LD_INT 7
3161: PPUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 21
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: LD_INT 3
3184: PUSH
3185: LD_INT 24
3187: PUSH
3188: LD_INT 600
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: LIST
3203: PPUSH
3204: CALL_OW 70
3208: ST_TO_ADDR
// if not tmp then
3209: LD_VAR 0 2
3213: NOT
3214: IFFALSE 3218
// exit ;
3216: GO 3272
// for i in tmp do
3218: LD_ADDR_VAR 0 1
3222: PUSH
3223: LD_VAR 0 2
3227: PUSH
3228: FOR_IN
3229: IFFALSE 3270
// if IsInUnit ( i ) then
3231: LD_VAR 0 1
3235: PPUSH
3236: CALL_OW 310
3240: IFFALSE 3253
// ComExitBuilding ( i ) else
3242: LD_VAR 0 1
3246: PPUSH
3247: CALL_OW 122
3251: GO 3268
// ComMoveXY ( i , 48 , 74 ) ;
3253: LD_VAR 0 1
3257: PPUSH
3258: LD_INT 48
3260: PPUSH
3261: LD_INT 74
3263: PPUSH
3264: CALL_OW 111
3268: GO 3228
3270: POP
3271: POP
// end ;
3272: PPOPN 2
3274: END
// every 12 12$00 do var i , un , tmp ;
3275: GO 3277
3277: DISABLE
3278: LD_INT 0
3280: PPUSH
3281: PPUSH
3282: PPUSH
// begin tmp := [ ] ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: EMPTY
3289: ST_TO_ADDR
// uc_side := 1 ;
3290: LD_ADDR_OWVAR 20
3294: PUSH
3295: LD_INT 1
3297: ST_TO_ADDR
// uc_nation := 1 ;
3298: LD_ADDR_OWVAR 21
3302: PUSH
3303: LD_INT 1
3305: ST_TO_ADDR
// case Difficulty of 1 :
3306: LD_OWVAR 67
3310: PUSH
3311: LD_INT 1
3313: DOUBLE
3314: EQUAL
3315: IFTRUE 3319
3317: GO 3422
3319: POP
// begin wait ( 1 1$00 ) ;
3320: LD_INT 2100
3322: PPUSH
3323: CALL_OW 67
// for i := 1 to 2 do
3327: LD_ADDR_VAR 0 1
3331: PUSH
3332: DOUBLE
3333: LD_INT 1
3335: DEC
3336: ST_TO_ADDR
3337: LD_INT 2
3339: PUSH
3340: FOR_TO
3341: IFFALSE 3418
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3343: LD_INT 0
3345: PPUSH
3346: LD_INT 1
3348: PUSH
3349: LD_INT 4
3351: PUSH
3352: EMPTY
3353: LIST
3354: LIST
3355: PUSH
3356: LD_VAR 0 1
3360: PUSH
3361: LD_INT 2
3363: MOD
3364: PUSH
3365: LD_INT 1
3367: PLUS
3368: ARRAY
3369: PPUSH
3370: LD_INT 1
3372: PPUSH
3373: CALL_OW 380
// un := CreateHuman ;
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: CALL_OW 44
3386: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_VAR 0 3
3401: PUSH
3402: LD_INT 1
3404: PLUS
3405: PPUSH
3406: LD_VAR 0 2
3410: PPUSH
3411: CALL_OW 1
3415: ST_TO_ADDR
// end ;
3416: GO 3340
3418: POP
3419: POP
// end ; 2 :
3420: GO 3822
3422: LD_INT 2
3424: DOUBLE
3425: EQUAL
3426: IFTRUE 3430
3428: GO 3564
3430: POP
// begin wait ( 0 0$30 ) ;
3431: LD_INT 1050
3433: PPUSH
3434: CALL_OW 67
// for i := 1 to 2 do
3438: LD_ADDR_VAR 0 1
3442: PUSH
3443: DOUBLE
3444: LD_INT 1
3446: DEC
3447: ST_TO_ADDR
3448: LD_INT 2
3450: PUSH
3451: FOR_TO
3452: IFFALSE 3508
// begin PrepareHuman ( false , 1 , 2 ) ;
3454: LD_INT 0
3456: PPUSH
3457: LD_INT 1
3459: PPUSH
3460: LD_INT 2
3462: PPUSH
3463: CALL_OW 380
// un := CreateHuman ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: CALL_OW 44
3476: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3477: LD_ADDR_VAR 0 3
3481: PUSH
3482: LD_VAR 0 3
3486: PPUSH
3487: LD_VAR 0 3
3491: PUSH
3492: LD_INT 1
3494: PLUS
3495: PPUSH
3496: LD_VAR 0 2
3500: PPUSH
3501: CALL_OW 1
3505: ST_TO_ADDR
// end ;
3506: GO 3451
3508: POP
3509: POP
// PrepareHuman ( false , 4 , 2 ) ;
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 4
3515: PPUSH
3516: LD_INT 2
3518: PPUSH
3519: CALL_OW 380
// un := CreateHuman ;
3523: LD_ADDR_VAR 0 2
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3533: LD_ADDR_VAR 0 3
3537: PUSH
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 3
3547: PUSH
3548: LD_INT 1
3550: PLUS
3551: PPUSH
3552: LD_VAR 0 2
3556: PPUSH
3557: CALL_OW 1
3561: ST_TO_ADDR
// end ; 3 .. 4 :
3562: GO 3822
3564: LD_INT 3
3566: DOUBLE
3567: GREATEREQUAL
3568: IFFALSE 3576
3570: LD_INT 4
3572: DOUBLE
3573: LESSEQUAL
3574: IFTRUE 3578
3576: GO 3821
3578: POP
// begin for i := 1 to 2 do
3579: LD_ADDR_VAR 0 1
3583: PUSH
3584: DOUBLE
3585: LD_INT 1
3587: DEC
3588: ST_TO_ADDR
3589: LD_INT 2
3591: PUSH
3592: FOR_TO
3593: IFFALSE 3649
// begin PrepareHuman ( false , 1 , 2 ) ;
3595: LD_INT 0
3597: PPUSH
3598: LD_INT 1
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: CALL_OW 380
// un := CreateHuman ;
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3618: LD_ADDR_VAR 0 3
3622: PUSH
3623: LD_VAR 0 3
3627: PPUSH
3628: LD_VAR 0 3
3632: PUSH
3633: LD_INT 1
3635: PLUS
3636: PPUSH
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 1
3646: ST_TO_ADDR
// end ;
3647: GO 3592
3649: POP
3650: POP
// PrepareHuman ( false , 4 , 2 ) ;
3651: LD_INT 0
3653: PPUSH
3654: LD_INT 4
3656: PPUSH
3657: LD_INT 2
3659: PPUSH
3660: CALL_OW 380
// un := CreateHuman ;
3664: LD_ADDR_VAR 0 2
3668: PUSH
3669: CALL_OW 44
3673: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3674: LD_ADDR_VAR 0 3
3678: PUSH
3679: LD_VAR 0 3
3683: PPUSH
3684: LD_VAR 0 3
3688: PUSH
3689: LD_INT 1
3691: PLUS
3692: PPUSH
3693: LD_VAR 0 2
3697: PPUSH
3698: CALL_OW 1
3702: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 1
3708: PPUSH
3709: LD_INT 2
3711: PPUSH
3712: LD_INT 2
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 2
3720: PPUSH
3721: LD_INT 90
3723: PPUSH
3724: CALL 241 0 7
// un := CreateVehicle ;
3728: LD_ADDR_VAR 0 2
3732: PUSH
3733: CALL_OW 45
3737: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3738: LD_ADDR_VAR 0 3
3742: PUSH
3743: LD_VAR 0 3
3747: PPUSH
3748: LD_VAR 0 3
3752: PUSH
3753: LD_INT 1
3755: PLUS
3756: PPUSH
3757: LD_VAR 0 2
3761: PPUSH
3762: CALL_OW 1
3766: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3767: LD_INT 0
3769: PPUSH
3770: LD_INT 1
3772: PPUSH
3773: LD_INT 2
3775: PPUSH
3776: CALL_OW 380
// un := CreateHuman ;
3780: LD_ADDR_VAR 0 2
3784: PUSH
3785: CALL_OW 44
3789: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3790: LD_ADDR_VAR 0 3
3794: PUSH
3795: LD_VAR 0 3
3799: PPUSH
3800: LD_VAR 0 3
3804: PUSH
3805: LD_INT 1
3807: PLUS
3808: PPUSH
3809: LD_VAR 0 2
3813: PPUSH
3814: CALL_OW 1
3818: ST_TO_ADDR
// end ; end ;
3819: GO 3822
3821: POP
// for i := 1 to tmp do
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: DOUBLE
3828: LD_INT 1
3830: DEC
3831: ST_TO_ADDR
3832: LD_VAR 0 3
3836: PUSH
3837: FOR_TO
3838: IFFALSE 4003
// begin SetDir ( tmp [ i ] , 1 ) ;
3840: LD_VAR 0 3
3844: PUSH
3845: LD_VAR 0 1
3849: ARRAY
3850: PPUSH
3851: LD_INT 1
3853: PPUSH
3854: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3858: LD_VAR 0 3
3862: PUSH
3863: LD_VAR 0 1
3867: ARRAY
3868: PPUSH
3869: CALL_OW 247
3873: PUSH
3874: LD_INT 1
3876: EQUAL
3877: IFFALSE 3905
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3879: LD_VAR 0 3
3883: PUSH
3884: LD_VAR 0 1
3888: ARRAY
3889: PPUSH
3890: LD_INT 28
3892: PPUSH
3893: LD_INT 52
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 48
3903: GO 3973
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3905: LD_VAR 0 3
3909: PUSH
3910: LD_VAR 0 1
3914: ARRAY
3915: PPUSH
3916: LD_INT 28
3918: PPUSH
3919: LD_INT 52
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 48
// i := i + 1 ;
3929: LD_ADDR_VAR 0 1
3933: PUSH
3934: LD_VAR 0 1
3938: PUSH
3939: LD_INT 1
3941: PLUS
3942: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3943: LD_VAR 0 3
3947: PUSH
3948: LD_VAR 0 1
3952: ARRAY
3953: PPUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: PUSH
3964: LD_INT 1
3966: MINUS
3967: ARRAY
3968: PPUSH
3969: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3973: LD_VAR 0 3
3977: PUSH
3978: LD_VAR 0 1
3982: ARRAY
3983: PPUSH
3984: LD_INT 43
3986: PPUSH
3987: LD_INT 56
3989: PPUSH
3990: CALL_OW 111
// wait ( 0 0$2 ) ;
3994: LD_INT 70
3996: PPUSH
3997: CALL_OW 67
// end ;
4001: GO 3837
4003: POP
4004: POP
// wait ( 0 0$2 ) ;
4005: LD_INT 70
4007: PPUSH
4008: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4012: LD_INT 7
4014: PPUSH
4015: LD_INT 22
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: PPUSH
4025: CALL_OW 70
4029: NOT
4030: IFFALSE 4228
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4032: LD_VAR 0 3
4036: PPUSH
4037: LD_INT 35
4039: PPUSH
4040: LD_INT 24
4042: PPUSH
4043: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4047: LD_ADDR_EXP 21
4051: PUSH
4052: LD_EXP 21
4056: PUSH
4057: LD_VAR 0 3
4061: PPUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PPUSH
4072: CALL_OW 72
4076: UNION
4077: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4078: LD_INT 22
4080: PUSH
4081: LD_INT 1
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 4
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: CALL_OW 313
4115: PUSH
4116: LD_INT 6
4118: LESS
4119: IFFALSE 4178
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4121: LD_VAR 0 3
4125: PPUSH
4126: LD_INT 25
4128: PUSH
4129: LD_INT 1
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PPUSH
4136: CALL_OW 72
4140: PPUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: LD_INT 30
4153: PUSH
4154: LD_INT 4
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PPUSH
4165: CALL_OW 69
4169: PUSH
4170: LD_INT 1
4172: ARRAY
4173: PPUSH
4174: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4178: LD_VAR 0 3
4182: PPUSH
4183: LD_INT 25
4185: PUSH
4186: LD_INT 4
4188: PUSH
4189: EMPTY
4190: LIST
4191: LIST
4192: PPUSH
4193: CALL_OW 72
4197: IFFALSE 4226
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4199: LD_VAR 0 3
4203: PPUSH
4204: LD_INT 25
4206: PUSH
4207: LD_INT 4
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 72
4218: PPUSH
4219: LD_INT 3
4221: PPUSH
4222: CALL_OW 180
// end else
4226: GO 4503
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4228: LD_ADDR_VAR 0 3
4232: PUSH
4233: LD_VAR 0 3
4237: PUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PPUSH
4251: CALL_OW 70
4255: UNION
4256: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4257: LD_VAR 0 3
4261: PPUSH
4262: LD_INT 45
4264: PPUSH
4265: LD_INT 54
4267: PPUSH
4268: CALL_OW 111
// wait ( 0 0$3 ) ;
4272: LD_INT 105
4274: PPUSH
4275: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 3
4288: PPUSH
4289: LD_INT 25
4291: PUSH
4292: LD_INT 4
4294: PUSH
4295: EMPTY
4296: LIST
4297: LIST
4298: PPUSH
4299: CALL_OW 72
4303: DIFF
4304: PPUSH
4305: LD_INT 35
4307: PPUSH
4308: LD_INT 24
4310: PPUSH
4311: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4315: LD_VAR 0 3
4319: PPUSH
4320: LD_INT 25
4322: PUSH
4323: LD_INT 4
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 72
4334: PPUSH
4335: LD_INT 42
4337: PPUSH
4338: LD_INT 49
4340: PPUSH
4341: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// for i in tmp do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_VAR 0 3
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4494
// if IsDead ( i ) then
4365: LD_VAR 0 1
4369: PPUSH
4370: CALL_OW 301
4374: IFFALSE 4394
// tmp := tmp diff i else
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_VAR 0 3
4385: PUSH
4386: LD_VAR 0 1
4390: DIFF
4391: ST_TO_ADDR
4392: GO 4492
// if GetClass ( i ) = 1 then
4394: LD_VAR 0 1
4398: PPUSH
4399: CALL_OW 257
4403: PUSH
4404: LD_INT 1
4406: EQUAL
4407: IFFALSE 4492
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4409: LD_VAR 0 1
4413: PPUSH
4414: CALL_OW 256
4418: PUSH
4419: LD_INT 600
4421: LESS
4422: PUSH
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 42
4430: PPUSH
4431: LD_INT 49
4433: PPUSH
4434: CALL_OW 297
4438: PUSH
4439: LD_INT 6
4441: GREATER
4442: AND
4443: IFFALSE 4462
// ComMoveXY ( i , 42 , 49 ) else
4445: LD_VAR 0 1
4449: PPUSH
4450: LD_INT 42
4452: PPUSH
4453: LD_INT 49
4455: PPUSH
4456: CALL_OW 111
4460: GO 4492
// if GetLives ( i ) = 1000 then
4462: LD_VAR 0 1
4466: PPUSH
4467: CALL_OW 256
4471: PUSH
4472: LD_INT 1000
4474: EQUAL
4475: IFFALSE 4492
// ComAgressiveMove ( i , 36 , 25 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 36
4484: PPUSH
4485: LD_INT 25
4487: PPUSH
4488: CALL_OW 114
// end ;
4492: GO 4362
4494: POP
4495: POP
// until not tmp ;
4496: LD_VAR 0 3
4500: NOT
4501: IFFALSE 4345
// end ; end ;
4503: PPOPN 3
4505: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4506: LD_INT 7
4508: PPUSH
4509: LD_INT 22
4511: PUSH
4512: LD_INT 2
4514: PUSH
4515: EMPTY
4516: LIST
4517: LIST
4518: PPUSH
4519: CALL_OW 70
4523: PUSH
4524: LD_EXP 14
4528: NOT
4529: AND
4530: IFFALSE 4688
4532: GO 4534
4534: DISABLE
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
4539: PPUSH
// begin for i := 1 to 2 do
4540: LD_ADDR_VAR 0 1
4544: PUSH
4545: DOUBLE
4546: LD_INT 1
4548: DEC
4549: ST_TO_ADDR
4550: LD_INT 2
4552: PUSH
4553: FOR_TO
4554: IFFALSE 4686
// begin wait ( 0 0$3 ) ;
4556: LD_INT 105
4558: PPUSH
4559: CALL_OW 67
// uc_side := 1 ;
4563: LD_ADDR_OWVAR 20
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// uc_nation := 1 ;
4571: LD_ADDR_OWVAR 21
4575: PUSH
4576: LD_INT 1
4578: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4579: LD_INT 1
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 2
4587: PPUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 4
4596: PPUSH
4597: LD_INT 90
4599: PPUSH
4600: CALL 241 0 7
// veh := CreateVehicle ;
4604: LD_ADDR_VAR 0 3
4608: PUSH
4609: CALL_OW 45
4613: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 29
4621: PPUSH
4622: LD_INT 52
4624: PPUSH
4625: LD_INT 0
4627: PPUSH
4628: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4632: LD_INT 0
4634: PPUSH
4635: LD_INT 3
4637: PPUSH
4638: LD_INT 3
4640: PPUSH
4641: CALL_OW 380
// un := CreateHuman ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: CALL_OW 44
4654: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_VAR 0 3
4664: PPUSH
4665: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4669: LD_VAR 0 3
4673: PPUSH
4674: LD_INT 36
4676: PPUSH
4677: LD_INT 25
4679: PPUSH
4680: CALL_OW 114
// end ;
4684: GO 4553
4686: POP
4687: POP
// end ; end_of_file
4688: PPOPN 3
4690: END
// export function Action ; var i , tmp ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// InGameOn ;
4696: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4700: LD_INT 2
4702: PPUSH
4703: LD_INT 3
4705: PPUSH
4706: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4710: LD_EXP 23
4714: PPUSH
4715: LD_INT 78
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: CALL_OW 111
// if Mike then
4725: LD_EXP 25
4729: IFFALSE 4746
// ComMoveXY ( Mike , 80 , 66 ) ;
4731: LD_EXP 25
4735: PPUSH
4736: LD_INT 80
4738: PPUSH
4739: LD_INT 66
4741: PPUSH
4742: CALL_OW 111
// if Givi then
4746: LD_EXP 24
4750: IFFALSE 4767
// ComMoveXY ( Givi , 82 , 66 ) ;
4752: LD_EXP 24
4756: PPUSH
4757: LD_INT 82
4759: PPUSH
4760: LD_INT 66
4762: PPUSH
4763: CALL_OW 111
// if Kamil then
4767: LD_EXP 26
4771: IFFALSE 4788
// ComMoveXY ( Kamil , 82 , 67 ) ;
4773: LD_EXP 26
4777: PPUSH
4778: LD_INT 82
4780: PPUSH
4781: LD_INT 67
4783: PPUSH
4784: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4788: LD_EXP 23
4792: PPUSH
4793: CALL_OW 87
// wait ( 0 0$2 ) ;
4797: LD_INT 70
4799: PPUSH
4800: CALL_OW 67
// if Givi and Mike then
4804: LD_EXP 24
4808: PUSH
4809: LD_EXP 25
4813: AND
4814: IFFALSE 5348
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4816: LD_EXP 24
4820: PUSH
4821: LD_EXP 25
4825: PUSH
4826: LD_EXP 26
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_EXP 23
4840: PPUSH
4841: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4845: LD_EXP 23
4849: PPUSH
4850: LD_EXP 24
4854: PPUSH
4855: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4859: LD_EXP 24
4863: PPUSH
4864: LD_STRING DG-1-start
4866: PPUSH
4867: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4871: LD_EXP 23
4875: PPUSH
4876: LD_STRING DH-1-start
4878: PPUSH
4879: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4883: LD_EXP 25
4887: PPUSH
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4897: LD_EXP 23
4901: PPUSH
4902: LD_EXP 25
4906: PPUSH
4907: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4911: LD_EXP 25
4915: PPUSH
4916: LD_STRING DM-1-start
4918: PPUSH
4919: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4923: LD_EXP 23
4927: PPUSH
4928: LD_STRING DH-2-start
4930: PPUSH
4931: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4935: LD_EXP 25
4939: PPUSH
4940: LD_STRING DM-2-start
4942: PPUSH
4943: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4947: LD_EXP 24
4951: PPUSH
4952: LD_STRING DG-2-start
4954: PPUSH
4955: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4959: LD_EXP 25
4963: PPUSH
4964: LD_EXP 24
4968: PPUSH
4969: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_EXP 25
4982: PPUSH
4983: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4987: LD_EXP 25
4991: PPUSH
4992: LD_STRING DM-3-start
4994: PPUSH
4995: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_STRING DH-3-start
5006: PPUSH
5007: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5011: LD_EXP 23
5015: PUSH
5016: LD_EXP 25
5020: PUSH
5021: LD_EXP 24
5025: PUSH
5026: LD_EXP 26
5030: PUSH
5031: EMPTY
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 84
5039: PPUSH
5040: LD_INT 51
5042: PPUSH
5043: CALL_OW 111
// wait ( 0 0$2 ) ;
5047: LD_INT 70
5049: PPUSH
5050: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5054: LD_EXP 24
5058: PPUSH
5059: LD_STRING DG-3-start
5061: PPUSH
5062: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5066: LD_EXP 23
5070: PUSH
5071: LD_EXP 25
5075: PUSH
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 26
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: PPUSH
5092: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5096: LD_EXP 23
5100: PPUSH
5101: LD_EXP 24
5105: PPUSH
5106: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5110: LD_EXP 24
5114: PUSH
5115: LD_EXP 25
5119: PUSH
5120: LD_EXP 26
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: PPUSH
5130: LD_EXP 23
5134: PPUSH
5135: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5139: LD_EXP 23
5143: PPUSH
5144: LD_STRING DH-4-start
5146: PPUSH
5147: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5151: LD_EXP 24
5155: PPUSH
5156: LD_STRING DG-4-start
5158: PPUSH
5159: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5163: LD_EXP 23
5167: PPUSH
5168: LD_STRING DH-5-start
5170: PPUSH
5171: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5175: LD_EXP 24
5179: PPUSH
5180: LD_STRING DG-5-start
5182: PPUSH
5183: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5187: LD_EXP 23
5191: PPUSH
5192: LD_STRING DH-6-start
5194: PPUSH
5195: CALL_OW 88
// if not Kamil then
5199: LD_EXP 26
5203: NOT
5204: IFFALSE 5255
// begin Say ( Mike , DM-6-start ) ;
5206: LD_EXP 25
5210: PPUSH
5211: LD_STRING DM-6-start
5213: PPUSH
5214: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5218: LD_EXP 23
5222: PUSH
5223: LD_EXP 24
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 25
5236: PPUSH
5237: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5241: LD_EXP 24
5245: PPUSH
5246: LD_STRING DG-6-start
5248: PPUSH
5249: CALL_OW 88
// end else
5253: GO 5334
// begin Say ( Mike , DM-6-start-a ) ;
5255: LD_EXP 25
5259: PPUSH
5260: LD_STRING DM-6-start-a
5262: PPUSH
5263: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5267: LD_EXP 23
5271: PUSH
5272: LD_EXP 24
5276: PUSH
5277: LD_EXP 25
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: PPUSH
5287: LD_EXP 26
5291: PPUSH
5292: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5296: LD_EXP 26
5300: PPUSH
5301: LD_EXP 25
5305: PPUSH
5306: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5310: LD_EXP 26
5314: PPUSH
5315: LD_STRING DKam-7-start-a
5317: PPUSH
5318: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5322: LD_EXP 24
5326: PPUSH
5327: LD_STRING DG-6-start-a
5329: PPUSH
5330: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5334: LD_EXP 23
5338: PPUSH
5339: LD_STRING DH-7-start
5341: PPUSH
5342: CALL_OW 88
// end else
5346: GO 6070
// if not Mike and Givi then
5348: LD_EXP 25
5352: NOT
5353: PUSH
5354: LD_EXP 24
5358: AND
5359: IFFALSE 5704
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5361: LD_EXP 24
5365: PUSH
5366: LD_EXP 26
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PPUSH
5375: LD_EXP 23
5379: PPUSH
5380: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5384: LD_EXP 23
5388: PPUSH
5389: LD_EXP 24
5393: PPUSH
5394: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5398: LD_EXP 24
5402: PPUSH
5403: LD_STRING DG-1-start-c
5405: PPUSH
5406: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5410: LD_EXP 23
5414: PPUSH
5415: LD_STRING DH-1-start-c
5417: PPUSH
5418: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5422: LD_EXP 24
5426: PPUSH
5427: LD_STRING DG-2-start-c
5429: PPUSH
5430: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5434: LD_EXP 23
5438: PPUSH
5439: LD_STRING DH-2-start-c
5441: PPUSH
5442: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5446: LD_EXP 24
5450: PPUSH
5451: LD_STRING DG-3-start-c
5453: PPUSH
5454: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5458: LD_EXP 23
5462: PPUSH
5463: LD_INT 83
5465: PPUSH
5466: LD_INT 56
5468: PPUSH
5469: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5473: LD_EXP 24
5477: PPUSH
5478: LD_INT 83
5480: PPUSH
5481: LD_INT 59
5483: PPUSH
5484: CALL_OW 111
// if Kamil then
5488: LD_EXP 26
5492: IFFALSE 5509
// ComMoveXY ( Kamil , 80 , 58 ) ;
5494: LD_EXP 26
5498: PPUSH
5499: LD_INT 80
5501: PPUSH
5502: LD_INT 58
5504: PPUSH
5505: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5509: LD_EXP 23
5513: PPUSH
5514: LD_EXP 24
5518: PPUSH
5519: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5523: LD_EXP 24
5527: PUSH
5528: LD_EXP 26
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PPUSH
5537: LD_EXP 23
5541: PPUSH
5542: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5546: LD_EXP 23
5550: PPUSH
5551: LD_STRING DH-3-start-c
5553: PPUSH
5554: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5558: LD_EXP 24
5562: PPUSH
5563: LD_STRING DG-4-start-c
5565: PPUSH
5566: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING DH-5-start-c
5577: PPUSH
5578: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5582: LD_EXP 24
5586: PPUSH
5587: LD_STRING DG-5-start-c
5589: PPUSH
5590: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5594: LD_EXP 23
5598: PPUSH
5599: LD_STRING DH-6-start-c
5601: PPUSH
5602: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5606: LD_EXP 24
5610: PPUSH
5611: LD_STRING DG-6-start-c
5613: PPUSH
5614: CALL_OW 88
// if Kamil then
5618: LD_EXP 26
5622: IFFALSE 5678
// begin ComTurnUnit ( Kamil , Heike ) ;
5624: LD_EXP 26
5628: PPUSH
5629: LD_EXP 23
5633: PPUSH
5634: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5638: LD_EXP 26
5642: PPUSH
5643: LD_STRING DKam-1-start-c
5645: PPUSH
5646: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5650: LD_EXP 24
5654: PPUSH
5655: LD_EXP 26
5659: PPUSH
5660: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5664: LD_EXP 24
5668: PPUSH
5669: LD_STRING DG-7-start-c
5671: PPUSH
5672: CALL_OW 88
// end else
5676: GO 5702
// begin Say ( Givi , DG-8-start-c ) ;
5678: LD_EXP 24
5682: PPUSH
5683: LD_STRING DG-8-start-c
5685: PPUSH
5686: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5690: LD_EXP 23
5694: PPUSH
5695: LD_STRING DH-7-start-c
5697: PPUSH
5698: CALL_OW 88
// end ; end else
5702: GO 6070
// if not Givi and Mike then
5704: LD_EXP 24
5708: NOT
5709: PUSH
5710: LD_EXP 25
5714: AND
5715: IFFALSE 5974
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5717: LD_EXP 25
5721: PUSH
5722: LD_EXP 26
5726: PUSH
5727: EMPTY
5728: LIST
5729: LIST
5730: PPUSH
5731: LD_EXP 23
5735: PPUSH
5736: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5740: LD_EXP 23
5744: PPUSH
5745: LD_EXP 25
5749: PPUSH
5750: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5754: LD_EXP 25
5758: PPUSH
5759: LD_STRING DM-1-start-b
5761: PPUSH
5762: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5766: LD_EXP 23
5770: PPUSH
5771: LD_STRING DH-1-start-b
5773: PPUSH
5774: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5778: LD_EXP 25
5782: PPUSH
5783: LD_STRING DM-2-start-b
5785: PPUSH
5786: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5790: LD_EXP 23
5794: PPUSH
5795: LD_STRING DH-2-start-b
5797: PPUSH
5798: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5802: LD_EXP 25
5806: PPUSH
5807: LD_STRING DM-3-start-b
5809: PPUSH
5810: CALL_OW 88
// if Kamil then
5814: LD_EXP 26
5818: IFFALSE 5835
// ComMoveXY ( Kamil , 80 , 58 ) ;
5820: LD_EXP 26
5824: PPUSH
5825: LD_INT 80
5827: PPUSH
5828: LD_INT 58
5830: PPUSH
5831: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5835: LD_EXP 23
5839: PPUSH
5840: LD_INT 83
5842: PPUSH
5843: LD_INT 56
5845: PPUSH
5846: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5850: LD_EXP 25
5854: PPUSH
5855: LD_INT 83
5857: PPUSH
5858: LD_INT 59
5860: PPUSH
5861: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5865: LD_EXP 23
5869: PPUSH
5870: LD_EXP 25
5874: PPUSH
5875: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5879: LD_EXP 26
5883: PUSH
5884: LD_EXP 25
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: PPUSH
5893: LD_EXP 23
5897: PPUSH
5898: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5902: LD_EXP 23
5906: PPUSH
5907: LD_STRING DH-3-start-b
5909: PPUSH
5910: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5914: LD_EXP 25
5918: PPUSH
5919: LD_STRING DM-4-start-b
5921: PPUSH
5922: CALL_OW 88
// if Kamil then
5926: LD_EXP 26
5930: IFFALSE 5960
// begin ComTurnUnit ( Kamil , Heike ) ;
5932: LD_EXP 26
5936: PPUSH
5937: LD_EXP 23
5941: PPUSH
5942: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5946: LD_EXP 26
5950: PPUSH
5951: LD_STRING DKam-1-start-c
5953: PPUSH
5954: CALL_OW 88
// end else
5958: GO 5972
// begin Say ( Mike , DM-5-start-b ) ;
5960: LD_EXP 25
5964: PPUSH
5965: LD_STRING DM-5-start-b
5967: PPUSH
5968: CALL_OW 88
// end ; end else
5972: GO 6070
// if Kamil then
5974: LD_EXP 26
5978: IFFALSE 6058
// begin AddComTurnUnit ( Heike , Kamil ) ;
5980: LD_EXP 23
5984: PPUSH
5985: LD_EXP 26
5989: PPUSH
5990: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5994: LD_EXP 26
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-1-start-f
6015: PPUSH
6016: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6020: LD_EXP 26
6024: PPUSH
6025: LD_STRING DKam-1-start-f
6027: PPUSH
6028: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6032: LD_EXP 23
6036: PPUSH
6037: LD_STRING DH-2-start-f
6039: PPUSH
6040: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6044: LD_EXP 26
6048: PPUSH
6049: LD_STRING DKam-2-start-f
6051: PPUSH
6052: CALL_OW 88
// end else
6056: GO 6070
// begin Say ( Heike , DH-1-start-d ) ;
6058: LD_EXP 23
6062: PPUSH
6063: LD_STRING DH-1-start-d
6065: PPUSH
6066: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6070: LD_EXP 23
6074: PUSH
6075: LD_EXP 24
6079: PUSH
6080: LD_EXP 25
6084: PUSH
6085: LD_EXP 26
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PPUSH
6096: CALL_OW 139
// InGameOff ;
6100: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6104: LD_STRING OEast
6106: PPUSH
6107: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6111: LD_INT 10
6113: PPUSH
6114: LD_INT 1
6116: PPUSH
6117: CALL_OW 424
// SaveForQuickRestart ;
6121: CALL_OW 22
// wait ( 0 0$20 ) ;
6125: LD_INT 700
6127: PPUSH
6128: CALL_OW 67
// SendSciToForest ;
6132: CALL 1524 0 0
// if Difficulty = 1 then
6136: LD_OWVAR 67
6140: PUSH
6141: LD_INT 1
6143: EQUAL
6144: IFFALSE 6148
// exit ;
6146: GO 6269
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6148: LD_INT 10500
6150: PUSH
6151: LD_INT 5250
6153: PUSH
6154: LD_INT 4200
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_OWVAR 67
6166: PUSH
6167: LD_INT 1
6169: MINUS
6170: ARRAY
6171: PPUSH
6172: CALL_OW 67
// if usAlert then
6176: LD_EXP 10
6180: IFFALSE 6184
// exit ;
6182: GO 6269
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6184: LD_ADDR_VAR 0 3
6188: PUSH
6189: LD_INT 22
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PPUSH
6213: CALL_OW 69
6217: ST_TO_ADDR
// if not tmp then
6218: LD_VAR 0 3
6222: NOT
6223: IFFALSE 6227
// exit ;
6225: GO 6269
// ComExitBuilding ( tmp ) ;
6227: LD_VAR 0 3
6231: PPUSH
6232: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6236: LD_VAR 0 3
6240: PPUSH
6241: LD_INT 31
6243: PPUSH
6244: LD_INT 40
6246: PPUSH
6247: LD_INT 13
6249: PPUSH
6250: LD_INT 3
6252: PPUSH
6253: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 1
6264: PPUSH
6265: CALL_OW 180
// end ;
6269: LD_VAR 0 1
6273: RET
// every 3 3$00 do
6274: GO 6276
6276: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6277: LD_INT 1
6279: PPUSH
6280: LD_INT 570
6282: PPUSH
6283: LD_INT 350
6285: PPUSH
6286: CALL_OW 550
// wait ( 2 2$40 ) ;
6290: LD_INT 5600
6292: PPUSH
6293: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6297: LD_INT 0
6299: PPUSH
6300: LD_INT 570
6302: PPUSH
6303: LD_INT 350
6305: PPUSH
6306: CALL_OW 550
// end ;
6310: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6311: LD_EXP 4
6315: NOT
6316: PUSH
6317: LD_INT 2
6319: PPUSH
6320: LD_EXP 27
6324: PPUSH
6325: CALL_OW 292
6329: AND
6330: IFFALSE 7255
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
6338: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6339: LD_INT 10
6341: PPUSH
6342: LD_INT 0
6344: PPUSH
6345: CALL_OW 424
// aviradzeSpotted := true ;
6349: LD_ADDR_EXP 4
6353: PUSH
6354: LD_INT 1
6356: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6357: LD_ADDR_VAR 0 2
6361: PUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 1
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PPUSH
6386: CALL_OW 69
6390: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6391: LD_EXP 23
6395: PPUSH
6396: LD_EXP 27
6400: PPUSH
6401: CALL_OW 250
6405: PPUSH
6406: LD_EXP 27
6410: PPUSH
6411: CALL_OW 251
6415: PPUSH
6416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6420: LD_INT 35
6422: PPUSH
6423: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6427: LD_EXP 23
6431: PPUSH
6432: LD_EXP 27
6436: PPUSH
6437: CALL_OW 296
6441: PUSH
6442: LD_INT 16
6444: LESS
6445: IFFALSE 6420
// InGameOn ;
6447: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6451: LD_INT 5
6453: PPUSH
6454: LD_INT 2
6456: PPUSH
6457: CALL_OW 343
// if pepAmount > 2 then
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 2
6468: GREATER
6469: IFFALSE 6485
// Say ( Heike , DH-1-spot ) else
6471: LD_EXP 23
6475: PPUSH
6476: LD_STRING DH-1-spot
6478: PPUSH
6479: CALL_OW 88
6483: GO 6497
// Say ( Heike , DH-1-spot-d ) ;
6485: LD_EXP 23
6489: PPUSH
6490: LD_STRING DH-1-spot-d
6492: PPUSH
6493: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6497: LD_EXP 23
6501: PPUSH
6502: LD_EXP 27
6506: PPUSH
6507: CALL_OW 250
6511: PPUSH
6512: LD_EXP 27
6516: PPUSH
6517: CALL_OW 251
6521: PPUSH
6522: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6526: LD_ADDR_VAR 0 1
6530: PUSH
6531: LD_EXP 26
6535: PUSH
6536: LD_EXP 25
6540: PUSH
6541: LD_EXP 24
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: LIST
6550: PUSH
6551: FOR_IN
6552: IFFALSE 6591
// if GetDistUnits ( i , Aviradze ) > 7 then
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_EXP 27
6563: PPUSH
6564: CALL_OW 296
6568: PUSH
6569: LD_INT 7
6571: GREATER
6572: IFFALSE 6589
// ComMoveXY ( i , 102 , 40 ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: LD_INT 102
6581: PPUSH
6582: LD_INT 40
6584: PPUSH
6585: CALL_OW 111
6589: GO 6551
6591: POP
6592: POP
// repeat wait ( 0 0$1 ) ;
6593: LD_INT 35
6595: PPUSH
6596: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6600: LD_EXP 23
6604: PPUSH
6605: LD_EXP 27
6609: PPUSH
6610: CALL_OW 296
6614: PUSH
6615: LD_INT 6
6617: LESS
6618: IFFALSE 6593
// ComTurnUnit ( Heike , Aviradze ) ;
6620: LD_EXP 23
6624: PPUSH
6625: LD_EXP 27
6629: PPUSH
6630: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6634: LD_EXP 27
6638: PUSH
6639: LD_EXP 29
6643: PUSH
6644: LD_EXP 28
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: LIST
6653: PPUSH
6654: LD_EXP 23
6658: PPUSH
6659: CALL_OW 119
// if pepAmount > 1 then
6663: LD_VAR 0 2
6667: PUSH
6668: LD_INT 1
6670: GREATER
6671: IFFALSE 6723
// begin wait ( 0 0$2 ) ;
6673: LD_INT 70
6675: PPUSH
6676: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6680: LD_EXP 26
6684: PUSH
6685: LD_EXP 25
6689: PUSH
6690: LD_EXP 24
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: LIST
6699: PPUSH
6700: LD_EXP 27
6704: PPUSH
6705: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-2-spot
6716: PPUSH
6717: CALL_OW 88
// end else
6721: GO 6735
// Say ( Heike , DH-2-spot-d ) ;
6723: LD_EXP 23
6727: PPUSH
6728: LD_STRING DH-2-spot-d
6730: PPUSH
6731: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6735: LD_EXP 27
6739: PPUSH
6740: LD_STRING DA-2-spot
6742: PPUSH
6743: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6747: LD_EXP 23
6751: PPUSH
6752: LD_STRING DH-3-spot
6754: PPUSH
6755: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6759: LD_EXP 28
6763: PPUSH
6764: LD_EXP 23
6768: PPUSH
6769: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6773: LD_EXP 23
6777: PPUSH
6778: LD_EXP 28
6782: PPUSH
6783: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6787: LD_INT 10
6789: PPUSH
6790: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6794: LD_EXP 28
6798: PPUSH
6799: LD_STRING DK-3-spot
6801: PPUSH
6802: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6806: LD_EXP 28
6810: PPUSH
6811: LD_EXP 23
6815: PPUSH
6816: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6820: LD_EXP 23
6824: PPUSH
6825: LD_STRING DH-4-spot
6827: PPUSH
6828: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6832: LD_INT 10
6834: PPUSH
6835: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6839: LD_EXP 23
6843: PPUSH
6844: LD_EXP 27
6848: PPUSH
6849: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_STRING DA-4-spot
6860: PPUSH
6861: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6865: LD_EXP 28
6869: PPUSH
6870: LD_EXP 27
6874: PPUSH
6875: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-4-spot
6886: PPUSH
6887: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6891: LD_EXP 27
6895: PPUSH
6896: LD_EXP 28
6900: PPUSH
6901: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6905: LD_EXP 27
6909: PPUSH
6910: LD_STRING DA-5-spot
6912: PPUSH
6913: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6917: LD_EXP 28
6921: PPUSH
6922: LD_STRING DK-5-spot
6924: PPUSH
6925: CALL_OW 88
// if pepAmount = 1 then
6929: LD_VAR 0 2
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: IFFALSE 6951
// Say ( Heike , DH-5-spot-f ) ;
6939: LD_EXP 23
6943: PPUSH
6944: LD_STRING DH-5-spot-f
6946: PPUSH
6947: CALL_OW 88
// if pepAmount < 3 then
6951: LD_VAR 0 2
6955: PUSH
6956: LD_INT 3
6958: LESS
6959: IFFALSE 6975
// Say ( Aviradze , DA-6-spot-f ) else
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot-f
6968: PPUSH
6969: CALL_OW 88
6973: GO 7011
// if pepAmount < 4 then
6975: LD_VAR 0 2
6979: PUSH
6980: LD_INT 4
6982: LESS
6983: IFFALSE 6999
// Say ( Aviradze , DA-6-spot-c ) else
6985: LD_EXP 27
6989: PPUSH
6990: LD_STRING DA-6-spot-c
6992: PPUSH
6993: CALL_OW 88
6997: GO 7011
// Say ( Aviradze , DA-6-spot ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_STRING DA-6-spot
7006: PPUSH
7007: CALL_OW 88
// if Kamil then
7011: LD_EXP 26
7015: IFFALSE 7029
// Say ( Kamil , DKam-6-spot ) ;
7017: LD_EXP 26
7021: PPUSH
7022: LD_STRING DKam-6-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7029: LD_EXP 28
7033: PPUSH
7034: LD_STRING DK-6-spot
7036: PPUSH
7037: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7041: LD_EXP 27
7045: PPUSH
7046: LD_EXP 23
7050: PPUSH
7051: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7055: LD_EXP 27
7059: PPUSH
7060: LD_STRING DA-7-spot
7062: PPUSH
7063: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7067: LD_EXP 23
7071: PPUSH
7072: LD_STRING DH-7-spot
7074: PPUSH
7075: CALL_OW 88
// if sciCounterKill >= 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: GREATEREQUAL
7087: IFFALSE 7113
// begin Say ( Heike , DH-7-spot-a ) ;
7089: LD_EXP 23
7093: PPUSH
7094: LD_STRING DH-7-spot-a
7096: PPUSH
7097: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7101: LD_EXP 27
7105: PPUSH
7106: LD_STRING DA-8-spot-a
7108: PPUSH
7109: CALL_OW 88
// end ; InGameOff ;
7113: CALL_OW 9
// if sciCounterKill < 3 then
7117: LD_EXP 9
7121: PUSH
7122: LD_INT 3
7124: LESS
7125: IFFALSE 7193
// begin SetSide ( Kaia , 2 ) ;
7127: LD_EXP 28
7131: PPUSH
7132: LD_INT 2
7134: PPUSH
7135: CALL_OW 235
// ComFree ( Kaia ) ;
7139: LD_EXP 28
7143: PPUSH
7144: CALL_OW 139
// if Kamil then
7148: LD_EXP 26
7152: IFFALSE 7175
// begin ComHold ( Kamil ) ;
7154: LD_EXP 26
7158: PPUSH
7159: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 5
7170: PPUSH
7171: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7175: LD_STRING OSci
7177: PPUSH
7178: CALL_OW 337
// ComFree ( Aviradze ) ;
7182: LD_EXP 27
7186: PPUSH
7187: CALL_OW 139
// end else
7191: GO 7255
// begin aviradzeQuestDone := true ;
7193: LD_ADDR_EXP 8
7197: PUSH
7198: LD_INT 1
7200: ST_TO_ADDR
// attackDeltaAllowed := true ;
7201: LD_ADDR_EXP 14
7205: PUSH
7206: LD_INT 1
7208: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7209: LD_STRING ODelta2
7211: PPUSH
7212: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7216: LD_ADDR_VAR 0 1
7220: PUSH
7221: LD_INT 22
7223: PUSH
7224: LD_INT 5
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PPUSH
7231: CALL_OW 69
7235: PUSH
7236: FOR_IN
7237: IFFALSE 7253
// SetSide ( i , 2 ) ;
7239: LD_VAR 0 1
7243: PPUSH
7244: LD_INT 2
7246: PPUSH
7247: CALL_OW 235
7251: GO 7236
7253: POP
7254: POP
// end ; end ;
7255: PPOPN 2
7257: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7258: LD_EXP 27
7262: PPUSH
7263: LD_INT 106
7265: PPUSH
7266: LD_INT 38
7268: PPUSH
7269: CALL_OW 297
7273: PUSH
7274: LD_INT 8
7276: GREATER
7277: PUSH
7278: LD_EXP 27
7282: PPUSH
7283: CALL_OW 255
7287: PUSH
7288: LD_INT 5
7290: EQUAL
7291: AND
7292: IFFALSE 7313
7294: GO 7296
7296: DISABLE
// begin enable ;
7297: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7298: LD_EXP 27
7302: PPUSH
7303: LD_INT 106
7305: PPUSH
7306: LD_INT 38
7308: PPUSH
7309: CALL_OW 111
// end ;
7313: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7314: LD_EXP 10
7318: PUSH
7319: LD_EXP 8
7323: NOT
7324: AND
7325: IFFALSE 7342
7327: GO 7329
7329: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7330: LD_EXP 20
7334: PPUSH
7335: LD_STRING DDelta-Alarm-1
7337: PPUSH
7338: CALL 74235 0 2
7342: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7343: LD_EXP 7
7347: NOT
7348: PUSH
7349: LD_EXP 22
7353: PPUSH
7354: LD_EXP 23
7358: PPUSH
7359: CALL_OW 74
7363: PPUSH
7364: LD_EXP 23
7368: PPUSH
7369: CALL_OW 296
7373: PUSH
7374: LD_INT 8
7376: LESS
7377: AND
7378: PUSH
7379: LD_INT 2
7381: PPUSH
7382: LD_EXP 22
7386: PPUSH
7387: LD_EXP 23
7391: PPUSH
7392: CALL_OW 74
7396: PPUSH
7397: CALL_OW 292
7401: AND
7402: PUSH
7403: LD_INT 22
7405: PUSH
7406: LD_INT 2
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: PUSH
7413: LD_INT 21
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_INT 1
7434: GREATER
7435: AND
7436: PUSH
7437: LD_EXP 4
7441: NOT
7442: AND
7443: IFFALSE 7487
7445: GO 7447
7447: DISABLE
// begin sciSpotted := true ;
7448: LD_ADDR_EXP 7
7452: PUSH
7453: LD_INT 1
7455: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7456: LD_EXP 22
7460: PPUSH
7461: LD_EXP 23
7465: PPUSH
7466: CALL_OW 74
7470: PPUSH
7471: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7475: LD_EXP 23
7479: PPUSH
7480: LD_STRING DH-1-sci
7482: PPUSH
7483: CALL_OW 88
// end ;
7487: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7488: LD_EXP 4
7492: PUSH
7493: LD_EXP 7
7497: NOT
7498: AND
7499: PUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_EXP 22
7507: PPUSH
7508: LD_EXP 23
7512: PPUSH
7513: CALL_OW 74
7517: PPUSH
7518: CALL_OW 292
7522: AND
7523: PUSH
7524: LD_INT 22
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 1
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 1
7555: GREATER
7556: AND
7557: PUSH
7558: LD_EXP 4
7562: AND
7563: PUSH
7564: LD_EXP 8
7568: NOT
7569: AND
7570: IFFALSE 7711
7572: GO 7574
7574: DISABLE
7575: LD_INT 0
7577: PPUSH
// begin sciSpotted := true ;
7578: LD_ADDR_EXP 7
7582: PUSH
7583: LD_INT 1
7585: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7586: LD_ADDR_VAR 0 1
7590: PUSH
7591: LD_EXP 22
7595: PPUSH
7596: LD_EXP 23
7600: PPUSH
7601: CALL_OW 74
7605: ST_TO_ADDR
// DialogueOn ;
7606: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 250
7619: PPUSH
7620: LD_VAR 0 1
7624: PPUSH
7625: CALL_OW 251
7629: PPUSH
7630: LD_INT 2
7632: PPUSH
7633: LD_INT 3
7635: NEG
7636: PPUSH
7637: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7641: LD_VAR 0 1
7645: PPUSH
7646: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7650: LD_EXP 23
7654: PPUSH
7655: LD_STRING DH-1-sci-a
7657: PPUSH
7658: CALL_OW 88
// if Mike then
7662: LD_EXP 25
7666: IFFALSE 7680
// Say ( Mike , DM-1-sci-a ) ;
7668: LD_EXP 25
7672: PPUSH
7673: LD_STRING DM-1-sci-a
7675: PPUSH
7676: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7680: LD_VAR 0 1
7684: PPUSH
7685: CALL_OW 250
7689: PPUSH
7690: LD_VAR 0 1
7694: PPUSH
7695: CALL_OW 251
7699: PPUSH
7700: LD_INT 2
7702: PPUSH
7703: CALL_OW 331
// DialogueOff ;
7707: CALL_OW 7
// end ;
7711: PPOPN 1
7713: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7714: LD_EXP 10
7718: PUSH
7719: LD_EXP 19
7723: PPUSH
7724: CALL_OW 256
7728: PUSH
7729: LD_INT 1000
7731: LESS
7732: PUSH
7733: LD_INT 3
7735: PPUSH
7736: CALL_OW 256
7740: PUSH
7741: LD_INT 999
7743: LESS
7744: OR
7745: AND
7746: IFFALSE 8002
7748: GO 7750
7750: DISABLE
7751: LD_INT 0
7753: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7754: LD_ADDR_VAR 0 1
7758: PUSH
7759: LD_INT 22
7761: PUSH
7762: LD_INT 1
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 2
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: LIST
7789: PPUSH
7790: CALL_OW 69
7794: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7795: LD_VAR 0 1
7799: PUSH
7800: LD_EXP 19
7804: PPUSH
7805: CALL_OW 302
7809: AND
7810: IFFALSE 7852
// begin if IsInUnit ( Gladstone ) then
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 310
7821: IFFALSE 7832
// ComExitBuilding ( Gladstone ) ;
7823: LD_EXP 19
7827: PPUSH
7828: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7832: LD_EXP 19
7836: PPUSH
7837: LD_VAR 0 1
7841: PUSH
7842: LD_INT 1
7844: ARRAY
7845: PPUSH
7846: CALL_OW 180
// end else
7850: GO 7872
// if IsInUnit ( Gladstone ) then
7852: LD_EXP 19
7856: PPUSH
7857: CALL_OW 310
7861: IFFALSE 7872
// ComExitBuilding ( Gladstone ) ;
7863: LD_EXP 19
7867: PPUSH
7868: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7872: LD_EXP 19
7876: PPUSH
7877: LD_INT 27
7879: PPUSH
7880: LD_INT 51
7882: PPUSH
7883: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7887: LD_EXP 19
7891: PPUSH
7892: LD_STRING D8-Glad-2
7894: PPUSH
7895: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7899: LD_INT 35
7901: PPUSH
7902: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7906: LD_EXP 19
7910: PPUSH
7911: LD_INT 27
7913: PPUSH
7914: LD_INT 51
7916: PPUSH
7917: CALL_OW 307
7921: PUSH
7922: LD_EXP 19
7926: PPUSH
7927: CALL_OW 310
7931: PPUSH
7932: LD_INT 27
7934: PPUSH
7935: LD_INT 51
7937: PPUSH
7938: CALL_OW 307
7942: OR
7943: PUSH
7944: LD_EXP 19
7948: PPUSH
7949: CALL_OW 301
7953: OR
7954: IFFALSE 7899
// if IsDead ( Gladstone ) then
7956: LD_EXP 19
7960: PPUSH
7961: CALL_OW 301
7965: IFFALSE 7969
// exit ;
7967: GO 8002
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7969: LD_INT 27
7971: PPUSH
7972: LD_INT 51
7974: PPUSH
7975: CALL_OW 428
7979: PPUSH
7980: CALL_OW 64
// gladstoneEscaped := true ;
7984: LD_ADDR_EXP 12
7988: PUSH
7989: LD_INT 1
7991: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7992: LD_INT 1
7994: PPUSH
7995: LD_STRING 02_GladstoneEscaped
7997: PPUSH
7998: CALL_OW 39
// end ;
8002: PPOPN 1
8004: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
8005: LD_EXP 4
8009: PUSH
8010: LD_EXP 9
8014: PUSH
8015: LD_INT 3
8017: GREATEREQUAL
8018: PUSH
8019: LD_EXP 22
8023: NOT
8024: OR
8025: AND
8026: PUSH
8027: LD_EXP 8
8031: NOT
8032: AND
8033: IFFALSE 8076
8035: GO 8037
8037: DISABLE
// begin aviradzeQuestDone := true ;
8038: LD_ADDR_EXP 8
8042: PUSH
8043: LD_INT 1
8045: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
8046: LD_EXP 23
8050: PPUSH
8051: LD_STRING DH-1-quest-done
8053: PPUSH
8054: CALL_OW 88
// if Givi then
8058: LD_EXP 24
8062: IFFALSE 8076
// Say ( Givi , DG-1-quest-done ) ;
8064: LD_EXP 24
8068: PPUSH
8069: LD_STRING DG-1-quest-done
8071: PPUSH
8072: CALL_OW 88
// end ;
8076: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and GetSide ( Delta ) = 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8077: LD_INT 11
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 2
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 70
8094: PUSH
8095: LD_INT 1
8097: GREATER
8098: PUSH
8099: LD_INT 1
8101: PPUSH
8102: CALL_OW 255
8106: PUSH
8107: LD_INT 2
8109: EQUAL
8110: AND
8111: PUSH
8112: LD_EXP 25
8116: PPUSH
8117: CALL_OW 302
8121: AND
8122: PUSH
8123: LD_EXP 23
8127: PPUSH
8128: CALL_OW 302
8132: AND
8133: IFFALSE 8278
8135: GO 8137
8137: DISABLE
// begin DialogueOn ;
8138: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8142: LD_INT 47
8144: PPUSH
8145: LD_INT 19
8147: PPUSH
8148: LD_INT 2
8150: PPUSH
8151: LD_INT 6
8153: NEG
8154: PPUSH
8155: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8159: LD_INT 47
8161: PPUSH
8162: LD_INT 19
8164: PPUSH
8165: LD_INT 2
8167: PPUSH
8168: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8172: LD_INT 34
8174: PPUSH
8175: LD_INT 32
8177: PPUSH
8178: LD_INT 2
8180: PPUSH
8181: LD_INT 6
8183: NEG
8184: PPUSH
8185: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8189: LD_INT 34
8191: PPUSH
8192: LD_INT 32
8194: PPUSH
8195: LD_INT 2
8197: PPUSH
8198: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8202: LD_EXP 25
8206: PPUSH
8207: LD_STRING DM-Prem-1
8209: PPUSH
8210: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8214: LD_EXP 23
8218: PPUSH
8219: LD_STRING DH-Prem-2
8221: PPUSH
8222: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8226: LD_EXP 23
8230: PPUSH
8231: LD_STRING DH-Prem-3
8233: PPUSH
8234: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8238: LD_EXP 25
8242: PPUSH
8243: LD_STRING DM-Prem-4
8245: PPUSH
8246: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8250: LD_EXP 25
8254: PPUSH
8255: LD_STRING DM-Prem-5
8257: PPUSH
8258: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8262: LD_EXP 24
8266: PPUSH
8267: LD_STRING DG-Prem-6
8269: PPUSH
8270: CALL_OW 88
// DialogueOff ;
8274: CALL_OW 7
// end ;
8278: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8279: LD_INT 5
8281: PPUSH
8282: LD_EXP 23
8286: PPUSH
8287: CALL_OW 292
8291: PUSH
8292: LD_EXP 23
8296: PPUSH
8297: LD_EXP 27
8301: PPUSH
8302: CALL_OW 296
8306: PUSH
8307: LD_INT 6
8309: LESS
8310: AND
8311: PUSH
8312: LD_EXP 8
8316: AND
8317: PUSH
8318: LD_EXP 14
8322: NOT
8323: AND
8324: IFFALSE 8462
8326: GO 8328
8328: DISABLE
8329: LD_INT 0
8331: PPUSH
// begin attackDeltaAllowed := true ;
8332: LD_ADDR_EXP 14
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// InGameOn ;
8340: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8344: LD_EXP 23
8348: PPUSH
8349: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8353: LD_INT 10
8355: PPUSH
8356: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8360: LD_EXP 27
8364: PPUSH
8365: LD_EXP 23
8369: PPUSH
8370: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8374: LD_EXP 23
8378: PPUSH
8379: LD_EXP 27
8383: PPUSH
8384: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8388: LD_EXP 23
8392: PPUSH
8393: LD_STRING DH-1-return
8395: PPUSH
8396: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8400: LD_EXP 27
8404: PPUSH
8405: LD_STRING DA-1-return
8407: PPUSH
8408: CALL_OW 88
// InGameOff ;
8412: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8416: LD_STRING ODelta
8418: PPUSH
8419: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8423: LD_ADDR_VAR 0 1
8427: PUSH
8428: LD_INT 22
8430: PUSH
8431: LD_INT 5
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 69
8442: PUSH
8443: FOR_IN
8444: IFFALSE 8460
// SetSide ( i , 2 ) ;
8446: LD_VAR 0 1
8450: PPUSH
8451: LD_INT 2
8453: PPUSH
8454: CALL_OW 235
8458: GO 8443
8460: POP
8461: POP
// end ;
8462: PPOPN 1
8464: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8465: LD_EXP 10
8469: PUSH
8470: LD_EXP 14
8474: NOT
8475: AND
8476: IFFALSE 8489
8478: GO 8480
8480: DISABLE
// spottedBeforeRadio := true ;
8481: LD_ADDR_EXP 6
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
8489: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8490: LD_EXP 14
8494: PUSH
8495: LD_EXP 30
8499: PPUSH
8500: CALL_OW 302
8504: AND
8505: PUSH
8506: LD_INT 1
8508: PPUSH
8509: CALL_OW 255
8513: PUSH
8514: LD_INT 1
8516: EQUAL
8517: AND
8518: PUSH
8519: LD_EXP 20
8523: PPUSH
8524: CALL_OW 302
8528: AND
8529: PUSH
8530: LD_EXP 10
8534: NOT
8535: AND
8536: IFFALSE 9764
8538: GO 8540
8540: DISABLE
8541: LD_INT 0
8543: PPUSH
8544: PPUSH
8545: PPUSH
// begin trap := 0 ;
8546: LD_ADDR_EXP 17
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8554: LD_INT 420
8556: PPUSH
8557: CALL_OW 67
// DialogueOn ;
8561: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8565: LD_EXP 30
8569: PPUSH
8570: LD_STRING DMar-1-radio
8572: PPUSH
8573: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8577: LD_EXP 23
8581: PPUSH
8582: LD_STRING DH-1-radio
8584: PPUSH
8585: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8589: LD_EXP 30
8593: PPUSH
8594: LD_STRING DMar-2-radio
8596: PPUSH
8597: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8601: LD_EXP 23
8605: PPUSH
8606: LD_STRING DH-2-radio
8608: PPUSH
8609: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8613: LD_EXP 26
8617: PPUSH
8618: CALL_OW 302
8622: PUSH
8623: LD_EXP 29
8627: PPUSH
8628: CALL_OW 302
8632: OR
8633: IFFALSE 9764
// begin case Query ( Q1Trap ) of 1 :
8635: LD_STRING Q1Trap
8637: PPUSH
8638: CALL_OW 97
8642: PUSH
8643: LD_INT 1
8645: DOUBLE
8646: EQUAL
8647: IFTRUE 8651
8649: GO 8857
8651: POP
// begin if IsOk ( Kamil ) then
8652: LD_EXP 26
8656: PPUSH
8657: CALL_OW 302
8661: IFFALSE 8740
// begin Say ( Kamil , DKam-2-radio ) ;
8663: LD_EXP 26
8667: PPUSH
8668: LD_STRING DKam-2-radio
8670: PPUSH
8671: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8675: LD_EXP 26
8679: PPUSH
8680: LD_STRING DKam-3-radio
8682: PPUSH
8683: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8687: LD_EXP 20
8691: PPUSH
8692: LD_STRING DDelta-3-radio
8694: PPUSH
8695: CALL 74235 0 2
// dwait ( 0 0$01 ) ;
8699: LD_INT 35
8701: PPUSH
8702: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8706: LD_EXP 23
8710: PPUSH
8711: LD_STRING DH-3-radio
8713: PPUSH
8714: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8718: LD_EXP 26
8722: PPUSH
8723: LD_STRING DKam-4-radio
8725: PPUSH
8726: CALL_OW 88
// trap := 1 ;
8730: LD_ADDR_EXP 17
8734: PUSH
8735: LD_INT 1
8737: ST_TO_ADDR
// end else
8738: GO 8851
// begin Say ( Sophia , DS-1-radio ) ;
8740: LD_EXP 29
8744: PPUSH
8745: LD_STRING DS-1-radio
8747: PPUSH
8748: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8752: LD_EXP 29
8756: PPUSH
8757: LD_STRING DS-2-radio
8759: PPUSH
8760: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8764: LD_EXP 20
8768: PPUSH
8769: LD_STRING DDelta-2-radio-s
8771: PPUSH
8772: CALL 74235 0 2
// Say ( Sophia , DS-3-radio ) ;
8776: LD_EXP 29
8780: PPUSH
8781: LD_STRING DS-3-radio
8783: PPUSH
8784: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8788: LD_EXP 20
8792: PPUSH
8793: LD_STRING DDelta-3-radio-s
8795: PPUSH
8796: CALL 74235 0 2
// Say ( Sophia , DS-4-radio-s ) ;
8800: LD_EXP 29
8804: PPUSH
8805: LD_STRING DS-4-radio-s
8807: PPUSH
8808: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
8812: LD_EXP 20
8816: PPUSH
8817: LD_STRING DDelta-4-radio-s
8819: PPUSH
8820: CALL 74235 0 2
// dwait ( 0 0$01 ) ;
8824: LD_INT 35
8826: PPUSH
8827: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8831: LD_EXP 23
8835: PPUSH
8836: LD_STRING DH-1-trap
8838: PPUSH
8839: CALL_OW 88
// trap := 0 ;
8843: LD_ADDR_EXP 17
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// end ; DialogueOff ;
8851: CALL_OW 7
// end ; 2 :
8855: GO 8875
8857: LD_INT 2
8859: DOUBLE
8860: EQUAL
8861: IFTRUE 8865
8863: GO 8874
8865: POP
// begin DialogueOff ;
8866: CALL_OW 7
// exit ;
8870: GO 9764
// end ; end ;
8872: GO 8875
8874: POP
// if trap = 1 then
8875: LD_EXP 17
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 9335
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8885: LD_INT 64
8887: PPUSH
8888: LD_INT 32
8890: PPUSH
8891: LD_INT 2
8893: PPUSH
8894: LD_INT 8
8896: PPUSH
8897: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8901: LD_INT 64
8903: PPUSH
8904: LD_INT 32
8906: PPUSH
8907: CALL_OW 84
// tmp := [ ] ;
8911: LD_ADDR_VAR 0 3
8915: PUSH
8916: EMPTY
8917: ST_TO_ADDR
// k := 3 ;
8918: LD_ADDR_VAR 0 2
8922: PUSH
8923: LD_INT 3
8925: ST_TO_ADDR
// if usForces < 3 then
8926: LD_EXP 21
8930: PUSH
8931: LD_INT 3
8933: LESS
8934: IFFALSE 8946
// k := usForces ;
8936: LD_ADDR_VAR 0 2
8940: PUSH
8941: LD_EXP 21
8945: ST_TO_ADDR
// for i := 1 to k do
8946: LD_ADDR_VAR 0 1
8950: PUSH
8951: DOUBLE
8952: LD_INT 1
8954: DEC
8955: ST_TO_ADDR
8956: LD_VAR 0 2
8960: PUSH
8961: FOR_TO
8962: IFFALSE 9017
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8964: LD_ADDR_VAR 0 3
8968: PUSH
8969: LD_VAR 0 3
8973: PPUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 1
8981: PLUS
8982: PPUSH
8983: LD_EXP 21
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PPUSH
8992: CALL_OW 1
8996: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8997: LD_ADDR_EXP 21
9001: PUSH
9002: LD_EXP 21
9006: PPUSH
9007: LD_INT 1
9009: PPUSH
9010: CALL_OW 3
9014: ST_TO_ADDR
// end ;
9015: GO 8961
9017: POP
9018: POP
// usPatrol := tmp ;
9019: LD_ADDR_EXP 16
9023: PUSH
9024: LD_VAR 0 3
9028: ST_TO_ADDR
// for i in tmp do
9029: LD_ADDR_VAR 0 1
9033: PUSH
9034: LD_VAR 0 3
9038: PUSH
9039: FOR_IN
9040: IFFALSE 9170
// begin if IsInUnit ( i ) then
9042: LD_VAR 0 1
9046: PPUSH
9047: CALL_OW 310
9051: IFFALSE 9062
// ComExitBuilding ( i ) ;
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9062: LD_VAR 0 1
9066: PPUSH
9067: LD_INT 63
9069: PPUSH
9070: LD_INT 31
9072: PPUSH
9073: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9077: LD_VAR 0 1
9081: PPUSH
9082: LD_INT 70
9084: PPUSH
9085: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9089: LD_VAR 0 1
9093: PPUSH
9094: LD_INT 103
9096: PPUSH
9097: LD_INT 43
9099: PPUSH
9100: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9104: LD_VAR 0 1
9108: PPUSH
9109: LD_INT 105
9111: PPUSH
9112: CALL_OW 202
// if Difficulty > 1 then
9116: LD_OWVAR 67
9120: PUSH
9121: LD_INT 1
9123: GREATER
9124: IFFALSE 9141
// AddComAgressiveMove ( i , 114 , 69 ) ;
9126: LD_VAR 0 1
9130: PPUSH
9131: LD_INT 114
9133: PPUSH
9134: LD_INT 69
9136: PPUSH
9137: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9141: LD_VAR 0 1
9145: PPUSH
9146: LD_INT 105
9148: PPUSH
9149: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_INT 42
9160: PPUSH
9161: LD_INT 20
9163: PPUSH
9164: CALL_OW 174
// end ;
9168: GO 9039
9170: POP
9171: POP
// wait ( 0 0$8 ) ;
9172: LD_INT 280
9174: PPUSH
9175: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9179: LD_INT 64
9181: PPUSH
9182: LD_INT 32
9184: PPUSH
9185: LD_INT 2
9187: PPUSH
9188: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9192: LD_INT 35
9194: PPUSH
9195: CALL_OW 67
// for i in tmp do
9199: LD_ADDR_VAR 0 1
9203: PUSH
9204: LD_VAR 0 3
9208: PUSH
9209: FOR_IN
9210: IFFALSE 9241
// if IsDead ( i ) then
9212: LD_VAR 0 1
9216: PPUSH
9217: CALL_OW 301
9221: IFFALSE 9239
// tmp := tmp diff i ;
9223: LD_ADDR_VAR 0 3
9227: PUSH
9228: LD_VAR 0 3
9232: PUSH
9233: LD_VAR 0 1
9237: DIFF
9238: ST_TO_ADDR
9239: GO 9209
9241: POP
9242: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9243: LD_VAR 0 3
9247: NOT
9248: PUSH
9249: LD_VAR 0 3
9253: PPUSH
9254: LD_INT 95
9256: PUSH
9257: LD_INT 7
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 3
9266: PUSH
9267: LD_INT 60
9269: PUSH
9270: EMPTY
9271: LIST
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PPUSH
9281: CALL_OW 72
9285: PUSH
9286: LD_VAR 0 3
9290: EQUAL
9291: OR
9292: IFFALSE 9192
// if tmp then
9294: LD_VAR 0 3
9298: IFFALSE 9325
// begin usPatrol := [ ] ;
9300: LD_ADDR_EXP 16
9304: PUSH
9305: EMPTY
9306: ST_TO_ADDR
// usForces := usForces union tmp ;
9307: LD_ADDR_EXP 21
9311: PUSH
9312: LD_EXP 21
9316: PUSH
9317: LD_VAR 0 3
9321: UNION
9322: ST_TO_ADDR
// end else
9323: GO 9333
// trickyMove := true ;
9325: LD_ADDR_EXP 15
9329: PUSH
9330: LD_INT 1
9332: ST_TO_ADDR
// end else
9333: GO 9764
// begin tmp := [ ] ;
9335: LD_ADDR_VAR 0 3
9339: PUSH
9340: EMPTY
9341: ST_TO_ADDR
// k := 4 ;
9342: LD_ADDR_VAR 0 2
9346: PUSH
9347: LD_INT 4
9349: ST_TO_ADDR
// if usForces < 4 then
9350: LD_EXP 21
9354: PUSH
9355: LD_INT 4
9357: LESS
9358: IFFALSE 9370
// k := usForces ;
9360: LD_ADDR_VAR 0 2
9364: PUSH
9365: LD_EXP 21
9369: ST_TO_ADDR
// for i := 1 to k do
9370: LD_ADDR_VAR 0 1
9374: PUSH
9375: DOUBLE
9376: LD_INT 1
9378: DEC
9379: ST_TO_ADDR
9380: LD_VAR 0 2
9384: PUSH
9385: FOR_TO
9386: IFFALSE 9441
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9388: LD_ADDR_VAR 0 3
9392: PUSH
9393: LD_VAR 0 3
9397: PPUSH
9398: LD_VAR 0 3
9402: PUSH
9403: LD_INT 1
9405: PLUS
9406: PPUSH
9407: LD_EXP 21
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: CALL_OW 1
9420: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9421: LD_ADDR_EXP 21
9425: PUSH
9426: LD_EXP 21
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: CALL_OW 3
9438: ST_TO_ADDR
// end ;
9439: GO 9385
9441: POP
9442: POP
// if Lynch then
9443: LD_EXP 20
9447: IFFALSE 9465
// tmp := tmp ^ Lynch ;
9449: LD_ADDR_VAR 0 3
9453: PUSH
9454: LD_VAR 0 3
9458: PUSH
9459: LD_EXP 20
9463: ADD
9464: ST_TO_ADDR
// usPatrol := tmp ;
9465: LD_ADDR_EXP 16
9469: PUSH
9470: LD_VAR 0 3
9474: ST_TO_ADDR
// for i in tmp do
9475: LD_ADDR_VAR 0 1
9479: PUSH
9480: LD_VAR 0 3
9484: PUSH
9485: FOR_IN
9486: IFFALSE 9579
// begin if IsInUnit ( i ) then
9488: LD_VAR 0 1
9492: PPUSH
9493: CALL_OW 310
9497: IFFALSE 9508
// ComExitBuilding ( i ) ;
9499: LD_VAR 0 1
9503: PPUSH
9504: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9508: LD_VAR 0 1
9512: PPUSH
9513: LD_INT 69
9515: PPUSH
9516: LD_INT 15
9518: PPUSH
9519: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9523: LD_VAR 0 1
9527: PPUSH
9528: LD_INT 700
9530: PPUSH
9531: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9535: LD_VAR 0 1
9539: PPUSH
9540: LD_INT 55
9542: PPUSH
9543: LD_INT 43
9545: PPUSH
9546: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9550: LD_VAR 0 1
9554: PPUSH
9555: LD_INT 700
9557: PPUSH
9558: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9562: LD_VAR 0 1
9566: PPUSH
9567: LD_INT 42
9569: PPUSH
9570: LD_INT 20
9572: PPUSH
9573: CALL_OW 174
// end ;
9577: GO 9485
9579: POP
9580: POP
// repeat wait ( 0 0$1 ) ;
9581: LD_INT 35
9583: PPUSH
9584: CALL_OW 67
// for i in tmp do
9588: LD_ADDR_VAR 0 1
9592: PUSH
9593: LD_VAR 0 3
9597: PUSH
9598: FOR_IN
9599: IFFALSE 9630
// if IsDead ( i ) then
9601: LD_VAR 0 1
9605: PPUSH
9606: CALL_OW 301
9610: IFFALSE 9628
// tmp := tmp diff i ;
9612: LD_ADDR_VAR 0 3
9616: PUSH
9617: LD_VAR 0 3
9621: PUSH
9622: LD_VAR 0 1
9626: DIFF
9627: ST_TO_ADDR
9628: GO 9598
9630: POP
9631: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9632: LD_VAR 0 3
9636: NOT
9637: PUSH
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 95
9645: PUSH
9646: LD_INT 7
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: LD_INT 60
9658: PUSH
9659: EMPTY
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 72
9674: PUSH
9675: LD_VAR 0 3
9679: EQUAL
9680: OR
9681: IFFALSE 9581
// if not tmp then
9683: LD_VAR 0 3
9687: NOT
9688: IFFALSE 9700
// trickyMove := true else
9690: LD_ADDR_EXP 15
9694: PUSH
9695: LD_INT 1
9697: ST_TO_ADDR
9698: GO 9707
// usPatrol := [ ] ;
9700: LD_ADDR_EXP 16
9704: PUSH
9705: EMPTY
9706: ST_TO_ADDR
// if tmp diff Lynch then
9707: LD_VAR 0 3
9711: PUSH
9712: LD_EXP 20
9716: DIFF
9717: IFFALSE 9741
// usForces := usForces union ( tmp diff Lynch ) ;
9719: LD_ADDR_EXP 21
9723: PUSH
9724: LD_EXP 21
9728: PUSH
9729: LD_VAR 0 3
9733: PUSH
9734: LD_EXP 20
9738: DIFF
9739: UNION
9740: ST_TO_ADDR
// if IsOk ( Lynch ) then
9741: LD_EXP 20
9745: PPUSH
9746: CALL_OW 302
9750: IFFALSE 9764
// ComEnterUnit ( Lynch , Delta ) ;
9752: LD_EXP 20
9756: PPUSH
9757: LD_INT 1
9759: PPUSH
9760: CALL_OW 120
// end ; end ; end ;
9764: PPOPN 3
9766: END
// every 0 0$1 trigger trickyMove do
9767: LD_EXP 15
9771: IFFALSE 9783
9773: GO 9775
9775: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9776: LD_STRING ACH_TRAP
9778: PPUSH
9779: CALL_OW 543
9783: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9784: LD_INT 22
9786: PUSH
9787: LD_INT 2
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 23
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 69
9823: IFFALSE 9835
9825: GO 9827
9827: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9828: LD_STRING ACH_SCRAP
9830: PPUSH
9831: CALL_OW 543
9835: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9836: LD_EXP 16
9840: PPUSH
9841: LD_INT 101
9843: PUSH
9844: LD_INT 2
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PPUSH
9851: CALL_OW 72
9855: PUSH
9856: LD_INT 1
9858: PPUSH
9859: LD_EXP 23
9863: PPUSH
9864: CALL_OW 292
9868: AND
9869: IFFALSE 10002
9871: GO 9873
9873: DISABLE
// begin if not trap then
9874: LD_EXP 17
9878: NOT
9879: IFFALSE 9907
// begin Say ( Heike , DH-2-trap ) ;
9881: LD_EXP 23
9885: PPUSH
9886: LD_STRING DH-2-trap
9888: PPUSH
9889: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9893: LD_EXP 25
9897: PPUSH
9898: LD_STRING DM-2-trap
9900: PPUSH
9901: CALL_OW 88
// end else
9905: GO 9919
// begin Say ( Heike , DH-1-trap-a ) ;
9907: LD_EXP 23
9911: PPUSH
9912: LD_STRING DH-1-trap-a
9914: PPUSH
9915: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9919: LD_INT 35
9921: PPUSH
9922: CALL_OW 67
// until trickyMove ;
9926: LD_EXP 15
9930: IFFALSE 9919
// Say ( Heike , DH-3-trap ) ;
9932: LD_EXP 23
9936: PPUSH
9937: LD_STRING DH-3-trap
9939: PPUSH
9940: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9944: LD_EXP 24
9948: PPUSH
9949: CALL_OW 302
9953: PUSH
9954: LD_EXP 28
9958: PPUSH
9959: CALL_OW 302
9963: AND
9964: IFFALSE 10002
// begin Say ( Givi , DG-3-trap ) ;
9966: LD_EXP 24
9970: PPUSH
9971: LD_STRING DG-3-trap
9973: PPUSH
9974: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9978: LD_EXP 28
9982: PPUSH
9983: LD_STRING DK-3-trap
9985: PPUSH
9986: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9990: LD_EXP 24
9994: PPUSH
9995: LD_STRING DG-4-trap
9997: PPUSH
9998: CALL_OW 88
// end ; end ;
10002: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10003: LD_INT 1
10005: PPUSH
10006: CALL_OW 255
10010: PUSH
10011: LD_INT 2
10013: EQUAL
10014: PUSH
10015: LD_EXP 14
10019: AND
10020: IFFALSE 10179
10022: GO 10024
10024: DISABLE
10025: LD_INT 0
10027: PPUSH
10028: PPUSH
// begin if not IsOk ( Kaia ) then
10029: LD_EXP 28
10033: PPUSH
10034: CALL_OW 302
10038: NOT
10039: IFFALSE 10043
// exit ;
10041: GO 10179
// if tick < 5 5$00 then
10043: LD_OWVAR 1
10047: PUSH
10048: LD_INT 10500
10050: LESS
10051: IFFALSE 10060
// SetAchievement ( ACH_DELTA ) ;
10053: LD_STRING ACH_DELTA
10055: PPUSH
10056: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10060: LD_EXP 28
10064: PPUSH
10065: LD_STRING DK-1-capture
10067: PPUSH
10068: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10072: LD_EXP 23
10076: PPUSH
10077: LD_STRING DH-1-capture
10079: PPUSH
10080: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10084: LD_ADDR_VAR 0 2
10088: PUSH
10089: LD_INT 22
10091: PUSH
10092: LD_INT 1
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: PUSH
10099: LD_INT 25
10101: PUSH
10102: LD_INT 1
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: PPUSH
10113: CALL_OW 69
10117: ST_TO_ADDR
// if not tmp then
10118: LD_VAR 0 2
10122: NOT
10123: IFFALSE 10127
// exit ;
10125: GO 10179
// for i in tmp do
10127: LD_ADDR_VAR 0 1
10131: PUSH
10132: LD_VAR 0 2
10136: PUSH
10137: FOR_IN
10138: IFFALSE 10177
// begin if IsInUnit ( i ) then
10140: LD_VAR 0 1
10144: PPUSH
10145: CALL_OW 310
10149: IFFALSE 10160
// ComExitBuilding ( i ) ;
10151: LD_VAR 0 1
10155: PPUSH
10156: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10160: LD_VAR 0 1
10164: PPUSH
10165: LD_INT 38
10167: PPUSH
10168: LD_INT 23
10170: PPUSH
10171: CALL_OW 174
// end ;
10175: GO 10137
10177: POP
10178: POP
// end ;
10179: PPOPN 2
10181: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10182: LD_INT 3
10184: PPUSH
10185: CALL_OW 255
10189: PUSH
10190: LD_INT 2
10192: EQUAL
10193: PUSH
10194: LD_EXP 14
10198: AND
10199: IFFALSE 10231
10201: GO 10203
10203: DISABLE
// begin DialogueOn ;
10204: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10208: LD_EXP 27
10212: PPUSH
10213: LD_STRING DA-1-capture
10215: PPUSH
10216: CALL_OW 88
// DialogueOff ;
10220: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10224: LD_STRING OTame
10226: PPUSH
10227: CALL_OW 337
// end ;
10231: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10232: LD_INT 1
10234: PPUSH
10235: LD_INT 2
10237: PPUSH
10238: CALL_OW 321
10242: PUSH
10243: LD_INT 2
10245: EQUAL
10246: PUSH
10247: LD_EXP 14
10251: AND
10252: IFFALSE 10403
10254: GO 10256
10256: DISABLE
// begin DialogueOn ;
10257: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10261: LD_EXP 27
10265: PPUSH
10266: LD_STRING DA-1-ape
10268: PPUSH
10269: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10273: LD_EXP 23
10277: PPUSH
10278: LD_STRING DH-1-ape
10280: PPUSH
10281: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10285: LD_EXP 27
10289: PPUSH
10290: LD_STRING DA-2-ape
10292: PPUSH
10293: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10297: LD_EXP 27
10301: PPUSH
10302: LD_STRING DA-3-ape
10304: PPUSH
10305: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10309: LD_EXP 23
10313: PPUSH
10314: LD_STRING DH-3-ape
10316: PPUSH
10317: CALL_OW 88
// DialogueOff ;
10321: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10325: LD_INT 22
10327: PUSH
10328: LD_INT 0
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PUSH
10335: LD_INT 25
10337: PUSH
10338: LD_INT 12
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PPUSH
10349: CALL_OW 69
10353: PUSH
10354: LD_INT 0
10356: EQUAL
10357: IFFALSE 10369
// SpawnApeman ( forest , 2 ) ;
10359: LD_INT 1
10361: PPUSH
10362: LD_INT 2
10364: PPUSH
10365: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10369: LD_INT 35
10371: PPUSH
10372: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10376: LD_INT 25
10378: PUSH
10379: LD_INT 12
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: PUSH
10391: LD_INT 0
10393: EQUAL
10394: IFFALSE 10369
// YouLost ( Ape ) ;
10396: LD_STRING Ape
10398: PPUSH
10399: CALL_OW 104
// end ;
10403: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10404: LD_EXP 18
10408: PUSH
10409: LD_INT 3
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: LD_INT 2
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_OWVAR 67
10431: ARRAY
10432: GREATEREQUAL
10433: IFFALSE 10477
10435: GO 10437
10437: DISABLE
// begin DialogueOn ;
10438: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10442: LD_EXP 27
10446: PPUSH
10447: LD_STRING DA-1-failure
10449: PPUSH
10450: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10454: LD_EXP 27
10458: PPUSH
10459: LD_STRING DA-2-failure
10461: PPUSH
10462: CALL_OW 88
// YouLost ( Failure ) ;
10466: LD_STRING Failure
10468: PPUSH
10469: CALL_OW 104
// DialogueOff ;
10473: CALL_OW 7
// end ;
10477: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10478: LD_EXP 28
10482: PPUSH
10483: CALL_OW 256
10487: PUSH
10488: LD_INT 3
10490: LESS
10491: IFFALSE 10624
10493: GO 10495
10495: DISABLE
// begin DialogueOn ;
10496: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10500: LD_EXP 28
10504: PPUSH
10505: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10509: LD_EXP 28
10513: PPUSH
10514: LD_STRING DK-Kaiaout-1
10516: PPUSH
10517: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10521: LD_EXP 23
10525: PPUSH
10526: LD_STRING DH-Kaiaout-2
10528: PPUSH
10529: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10533: LD_EXP 24
10537: PPUSH
10538: LD_STRING DG-Kaiaout-3
10540: PPUSH
10541: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10545: LD_EXP 23
10549: PPUSH
10550: LD_STRING DH-Kaiaout-4
10552: PPUSH
10553: CALL_OW 88
// if Givi then
10557: LD_EXP 24
10561: IFFALSE 10611
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10563: LD_EXP 24
10567: PPUSH
10568: LD_STRING DG-Kaiaout-5
10570: PPUSH
10571: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10575: LD_EXP 23
10579: PPUSH
10580: LD_STRING DH-Kaiaout-6
10582: PPUSH
10583: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10587: LD_EXP 24
10591: PPUSH
10592: LD_STRING DG-Kaiaout-7
10594: PPUSH
10595: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10599: LD_EXP 23
10603: PPUSH
10604: LD_STRING DH-Kaiaout-8
10606: PPUSH
10607: CALL_OW 88
// end ; DialogueOff ;
10611: CALL_OW 7
// KillUnit ( Kaia ) ;
10615: LD_EXP 28
10619: PPUSH
10620: CALL_OW 66
// end ;
10624: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10625: LD_INT 22
10627: PUSH
10628: LD_INT 2
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 23
10637: PUSH
10638: LD_INT 0
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: PPUSH
10649: CALL_OW 69
10653: PUSH
10654: LD_EXP 27
10658: PPUSH
10659: CALL_OW 302
10663: AND
10664: PUSH
10665: LD_EXP 27
10669: PPUSH
10670: CALL_OW 255
10674: PUSH
10675: LD_INT 2
10677: EQUAL
10678: AND
10679: IFFALSE 11624
10681: GO 10683
10683: DISABLE
10684: LD_INT 0
10686: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10687: LD_INT 22
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 2
10699: PUSH
10700: LD_INT 25
10702: PUSH
10703: LD_INT 1
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 34
10712: PUSH
10713: LD_INT 4
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PPUSH
10729: CALL_OW 69
10733: IFFALSE 10828
// begin Query ( QEnemyInSight ) ;
10735: LD_STRING QEnemyInSight
10737: PPUSH
10738: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10742: LD_INT 35
10744: PPUSH
10745: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10749: LD_INT 22
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 2
10761: PUSH
10762: LD_INT 25
10764: PUSH
10765: LD_INT 1
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 34
10774: PUSH
10775: LD_INT 4
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 69
10795: NOT
10796: PUSH
10797: LD_INT 22
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 0
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: AND
10826: IFFALSE 10742
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10828: LD_ADDR_VAR 0 1
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 2
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 23
10845: PUSH
10846: LD_INT 0
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: PPUSH
10857: CALL_OW 69
10861: ST_TO_ADDR
// InGameOn ;
10862: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10866: LD_VAR 0 1
10870: PPUSH
10871: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10875: LD_VAR 0 1
10879: PPUSH
10880: LD_EXP 27
10884: PPUSH
10885: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10889: LD_EXP 27
10893: PPUSH
10894: LD_VAR 0 1
10898: PPUSH
10899: CALL_OW 119
// wait ( 0 0$1 ) ;
10903: LD_INT 35
10905: PPUSH
10906: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10910: LD_EXP 27
10914: PPUSH
10915: LD_STRING DA-1-tame-a
10917: PPUSH
10918: CALL_OW 88
// if IsOk ( Mike ) then
10922: LD_EXP 25
10926: PPUSH
10927: CALL_OW 302
10931: IFFALSE 10969
// begin Say ( Mike , DM-1-tame-a ) ;
10933: LD_EXP 25
10937: PPUSH
10938: LD_STRING DM-1-tame-a
10940: PPUSH
10941: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10945: LD_EXP 29
10949: PPUSH
10950: LD_STRING DS-1-tame-a
10952: PPUSH
10953: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10957: LD_EXP 25
10961: PPUSH
10962: LD_STRING DM-2-tame-a
10964: PPUSH
10965: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10969: LD_INT 105
10971: PPUSH
10972: CALL_OW 67
// PrepareFarmer ;
10976: CALL 12303 0 0
// CenterOnUnits ( Farmer ) ;
10980: LD_EXP 31
10984: PPUSH
10985: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10989: LD_EXP 31
10993: PPUSH
10994: LD_INT 105
10996: PPUSH
10997: LD_INT 59
10999: PPUSH
11000: CALL_OW 111
// AddComHold ( Farmer ) ;
11004: LD_EXP 31
11008: PPUSH
11009: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11013: LD_EXP 31
11017: PPUSH
11018: LD_STRING DF-1-end
11020: PPUSH
11021: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11025: LD_EXP 27
11029: PPUSH
11030: LD_STRING DA-1-end
11032: PPUSH
11033: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11037: LD_EXP 31
11041: PPUSH
11042: LD_STRING DF-2-end
11044: PPUSH
11045: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11049: LD_EXP 27
11053: PPUSH
11054: LD_STRING DA-2-end
11056: PPUSH
11057: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11061: LD_EXP 31
11065: PPUSH
11066: LD_STRING DF-3-end
11068: PPUSH
11069: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11073: LD_EXP 23
11077: PPUSH
11078: LD_STRING DH-3-end
11080: PPUSH
11081: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11085: LD_EXP 31
11089: PPUSH
11090: LD_STRING DF-4-end
11092: PPUSH
11093: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11097: LD_OWVAR 1
11101: PUSH
11102: LD_INT 52500
11104: PUSH
11105: LD_INT 47250
11107: PUSH
11108: LD_INT 42000
11110: PUSH
11111: LD_INT 31500
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: PUSH
11120: LD_OWVAR 67
11124: ARRAY
11125: LESSEQUAL
11126: IFFALSE 11140
// AddMedal ( med1 , 1 ) else
11128: LD_STRING med1
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 101
11138: GO 11151
// AddMedal ( med1 , - 1 ) ;
11140: LD_STRING med1
11142: PPUSH
11143: LD_INT 1
11145: NEG
11146: PPUSH
11147: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11151: LD_INT 22
11153: PUSH
11154: LD_INT 1
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 25
11163: PUSH
11164: LD_INT 4
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PUSH
11180: LD_INT 0
11182: EQUAL
11183: PUSH
11184: LD_EXP 12
11188: NOT
11189: AND
11190: IFFALSE 11204
// AddMedal ( med2 , 1 ) else
11192: LD_STRING med2
11194: PPUSH
11195: LD_INT 1
11197: PPUSH
11198: CALL_OW 101
11202: GO 11215
// AddMedal ( med2 , - 1 ) ;
11204: LD_STRING med2
11206: PPUSH
11207: LD_INT 1
11209: NEG
11210: PPUSH
11211: CALL_OW 101
// if trickyMove then
11215: LD_EXP 15
11219: IFFALSE 11233
// AddMedal ( med3 , 1 ) else
11221: LD_STRING med3
11223: PPUSH
11224: LD_INT 1
11226: PPUSH
11227: CALL_OW 101
11231: GO 11263
// if spottedBeforeRadio then
11233: LD_EXP 6
11237: IFFALSE 11252
// AddMedal ( med3 , - 2 ) else
11239: LD_STRING med3
11241: PPUSH
11242: LD_INT 2
11244: NEG
11245: PPUSH
11246: CALL_OW 101
11250: GO 11263
// AddMedal ( med3 , - 1 ) ;
11252: LD_STRING med3
11254: PPUSH
11255: LD_INT 1
11257: NEG
11258: PPUSH
11259: CALL_OW 101
// GiveMedals ( MAIN ) ;
11263: LD_STRING MAIN
11265: PPUSH
11266: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
11270: LD_VAR 0 1
11274: PPUSH
11275: LD_STRING 02_ape
11277: PPUSH
11278: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11282: LD_ADDR_VAR 0 1
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: LD_INT 23
11299: PUSH
11300: LD_INT 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 21
11309: PUSH
11310: LD_INT 1
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: PPUSH
11322: CALL_OW 69
11326: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11336: LD_EXP 23
11340: PPUSH
11341: LD_STRING 02_Heike
11343: PPUSH
11344: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11348: LD_EXP 27
11352: PPUSH
11353: LD_STRING 02_Aviradze
11355: PPUSH
11356: CALL_OW 38
// if Givi then
11360: LD_EXP 24
11364: IFFALSE 11378
// SaveCharacters ( Givi , 02_Givi ) ;
11366: LD_EXP 24
11370: PPUSH
11371: LD_STRING 02_Givi
11373: PPUSH
11374: CALL_OW 38
// if Mike then
11378: LD_EXP 25
11382: IFFALSE 11396
// SaveCharacters ( Mike , 02_Mike ) ;
11384: LD_EXP 25
11388: PPUSH
11389: LD_STRING 02_Mike
11391: PPUSH
11392: CALL_OW 38
// if Kamil then
11396: LD_EXP 26
11400: IFFALSE 11414
// SaveCharacters ( Kamil , 02_Kamil ) ;
11402: LD_EXP 26
11406: PPUSH
11407: LD_STRING 02_Kamil
11409: PPUSH
11410: CALL_OW 38
// if Kaia then
11414: LD_EXP 28
11418: IFFALSE 11432
// SaveCharacters ( Kaia , 02_Kaia ) ;
11420: LD_EXP 28
11424: PPUSH
11425: LD_STRING 02_Kaia
11427: PPUSH
11428: CALL_OW 38
// if Sophia then
11432: LD_EXP 29
11436: IFFALSE 11450
// SaveCharacters ( Sophia , 02_Sophia ) ;
11438: LD_EXP 29
11442: PPUSH
11443: LD_STRING 02_Sophia
11445: PPUSH
11446: CALL_OW 38
// if Markov then
11450: LD_EXP 30
11454: IFFALSE 11468
// SaveCharacters ( Markov , 02_Markov ) ;
11456: LD_EXP 30
11460: PPUSH
11461: LD_STRING 02_Markov
11463: PPUSH
11464: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11468: LD_VAR 0 1
11472: PUSH
11473: LD_EXP 23
11477: PUSH
11478: LD_EXP 27
11482: PUSH
11483: LD_EXP 24
11487: PUSH
11488: LD_EXP 25
11492: PUSH
11493: LD_EXP 26
11497: PUSH
11498: LD_EXP 29
11502: PUSH
11503: LD_EXP 28
11507: PUSH
11508: LD_EXP 30
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: DIFF
11523: IFFALSE 11588
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11525: LD_VAR 0 1
11529: PUSH
11530: LD_EXP 23
11534: PUSH
11535: LD_EXP 27
11539: PUSH
11540: LD_EXP 24
11544: PUSH
11545: LD_EXP 25
11549: PUSH
11550: LD_EXP 26
11554: PUSH
11555: LD_EXP 29
11559: PUSH
11560: LD_EXP 28
11564: PUSH
11565: LD_EXP 30
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: DIFF
11580: PPUSH
11581: LD_STRING 02_others
11583: PPUSH
11584: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11588: LD_STRING enableBioCharacter(BIO_KRAY)
11590: PPUSH
11591: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11595: LD_STRING enableBioCharacter(BIO_AVIR)
11597: PPUSH
11598: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11602: LD_STRING enableBioCharacter(BIO_SOPH)
11604: PPUSH
11605: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11609: LD_STRING enableBioCharacter(BIO_KAMI)
11611: PPUSH
11612: CALL_OW 559
// YouWin ;
11616: CALL_OW 103
// InGameOff ;
11620: CALL_OW 9
// end ;
11624: PPOPN 1
11626: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11627: LD_OWVAR 1
11631: PUSH
11632: LD_EXP 13
11636: GREATER
11637: PUSH
11638: LD_EXP 4
11642: AND
11643: IFFALSE 11683
11645: GO 11647
11647: DISABLE
// begin InGameOn ;
11648: CALL_OW 8
// PrepareFarmer ;
11652: CALL 12303 0 0
// CenterNowOnUnits ( Farmer ) ;
11656: LD_EXP 31
11660: PPUSH
11661: CALL_OW 87
// wait ( 0 0$2 ) ;
11665: LD_INT 70
11667: PPUSH
11668: CALL_OW 67
// YouLost ( Farmer ) ;
11672: LD_STRING Farmer
11674: PPUSH
11675: CALL_OW 104
// InGameOff ;
11679: CALL_OW 9
// end ; end_of_file
11683: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11684: LD_INT 0
11686: PPUSH
11687: PPUSH
11688: PPUSH
// uc_side := 2 ;
11689: LD_ADDR_OWVAR 20
11693: PUSH
11694: LD_INT 2
11696: ST_TO_ADDR
// uc_nation := 2 ;
11697: LD_ADDR_OWVAR 21
11701: PUSH
11702: LD_INT 2
11704: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11705: LD_ADDR_EXP 23
11709: PUSH
11710: LD_STRING Heike
11712: PPUSH
11713: LD_EXP 1
11717: NOT
11718: PPUSH
11719: LD_EXP 2
11723: PPUSH
11724: CALL 32848 0 3
11728: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11729: LD_EXP 23
11733: PPUSH
11734: LD_INT 83
11736: PPUSH
11737: LD_INT 72
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11747: LD_ADDR_EXP 24
11751: PUSH
11752: LD_STRING Givi
11754: PPUSH
11755: LD_EXP 1
11759: NOT
11760: PPUSH
11761: LD_EXP 2
11765: PPUSH
11766: CALL 32848 0 3
11770: ST_TO_ADDR
// if Givi then
11771: LD_EXP 24
11775: IFFALSE 11795
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11777: LD_EXP 24
11781: PPUSH
11782: LD_INT 87
11784: PPUSH
11785: LD_INT 76
11787: PPUSH
11788: LD_INT 0
11790: PPUSH
11791: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11795: LD_ADDR_EXP 25
11799: PUSH
11800: LD_STRING Mike
11802: PPUSH
11803: LD_EXP 1
11807: NOT
11808: PPUSH
11809: LD_EXP 2
11813: PPUSH
11814: CALL 32848 0 3
11818: ST_TO_ADDR
// if Mike then
11819: LD_EXP 25
11823: IFFALSE 11843
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11825: LD_EXP 25
11829: PPUSH
11830: LD_INT 84
11832: PPUSH
11833: LD_INT 76
11835: PPUSH
11836: LD_INT 0
11838: PPUSH
11839: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11843: LD_ADDR_EXP 26
11847: PUSH
11848: LD_STRING Kamil
11850: PPUSH
11851: LD_EXP 1
11855: NOT
11856: PPUSH
11857: LD_EXP 2
11861: PPUSH
11862: CALL 32848 0 3
11866: ST_TO_ADDR
// if Kamil then
11867: LD_EXP 26
11871: IFFALSE 11891
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11873: LD_EXP 26
11877: PPUSH
11878: LD_INT 85
11880: PPUSH
11881: LD_INT 78
11883: PPUSH
11884: LD_INT 0
11886: PPUSH
11887: CALL_OW 48
// uc_side := 5 ;
11891: LD_ADDR_OWVAR 20
11895: PUSH
11896: LD_INT 5
11898: ST_TO_ADDR
// uc_nation := 2 ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 2
11906: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11907: LD_ADDR_EXP 27
11911: PUSH
11912: LD_STRING Aviradze
11914: PPUSH
11915: LD_INT 0
11917: PPUSH
11918: LD_STRING 
11920: PPUSH
11921: CALL 32848 0 3
11925: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11926: LD_EXP 27
11930: PPUSH
11931: LD_INT 106
11933: PPUSH
11934: LD_INT 38
11936: PPUSH
11937: LD_INT 0
11939: PPUSH
11940: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11944: LD_EXP 27
11948: PPUSH
11949: LD_INT 103
11951: PPUSH
11952: LD_INT 38
11954: PPUSH
11955: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11959: LD_ADDR_EXP 28
11963: PUSH
11964: LD_STRING Kaia
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: LD_STRING 
11972: PPUSH
11973: CALL 32848 0 3
11977: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11978: LD_EXP 28
11982: PPUSH
11983: LD_INT 100
11985: PPUSH
11986: LD_INT 34
11988: PPUSH
11989: LD_INT 0
11991: PPUSH
11992: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11996: LD_EXP 28
12000: PPUSH
12001: LD_INT 100
12003: PPUSH
12004: LD_INT 39
12006: PPUSH
12007: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12011: LD_ADDR_EXP 29
12015: PUSH
12016: LD_STRING Sophia
12018: PPUSH
12019: LD_INT 0
12021: PPUSH
12022: LD_STRING 
12024: PPUSH
12025: CALL 32848 0 3
12029: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12030: LD_EXP 29
12034: PPUSH
12035: LD_INT 109
12037: PPUSH
12038: LD_INT 50
12040: PPUSH
12041: LD_INT 0
12043: PPUSH
12044: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12048: LD_EXP 29
12052: PPUSH
12053: LD_INT 100
12055: PPUSH
12056: LD_INT 39
12058: PPUSH
12059: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12063: LD_ADDR_EXP 30
12067: PUSH
12068: LD_STRING Markov
12070: PPUSH
12071: LD_INT 0
12073: PPUSH
12074: LD_STRING 
12076: PPUSH
12077: CALL 32848 0 3
12081: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12082: LD_INT 5
12084: PPUSH
12085: LD_INT 3
12087: PPUSH
12088: LD_INT 21
12090: PPUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_INT 1
12096: PPUSH
12097: LD_INT 42
12099: PPUSH
12100: LD_INT 90
12102: PUSH
12103: LD_INT 70
12105: PUSH
12106: LD_INT 60
12108: PUSH
12109: LD_INT 50
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_OWVAR 67
12122: ARRAY
12123: PPUSH
12124: CALL 241 0 7
// veh := CreateVehicle ;
12128: LD_ADDR_VAR 0 3
12132: PUSH
12133: CALL_OW 45
12137: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12138: LD_VAR 0 3
12142: PPUSH
12143: LD_INT 4
12145: PPUSH
12146: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 109
12157: PPUSH
12158: LD_INT 38
12160: PPUSH
12161: LD_INT 0
12163: PPUSH
12164: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12168: LD_EXP 30
12172: PPUSH
12173: LD_VAR 0 3
12177: PPUSH
12178: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12182: LD_EXP 28
12186: PPUSH
12187: LD_EXP 27
12191: PPUSH
12192: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12196: LD_EXP 27
12200: PPUSH
12201: LD_EXP 28
12205: PPUSH
12206: CALL_OW 119
// if not Givi or not Mike then
12210: LD_EXP 24
12214: NOT
12215: PUSH
12216: LD_EXP 25
12220: NOT
12221: OR
12222: IFFALSE 12298
// begin uc_nation := 2 ;
12224: LD_ADDR_OWVAR 21
12228: PUSH
12229: LD_INT 2
12231: ST_TO_ADDR
// uc_side := 5 ;
12232: LD_ADDR_OWVAR 20
12236: PUSH
12237: LD_INT 5
12239: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12240: LD_INT 1
12242: PPUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_INT 1
12248: PPUSH
12249: CALL_OW 380
// un := CreateHuman ;
12253: LD_ADDR_VAR 0 2
12257: PUSH
12258: CALL_OW 44
12262: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12263: LD_VAR 0 2
12267: PPUSH
12268: LD_INT 112
12270: PPUSH
12271: LD_INT 40
12273: PPUSH
12274: LD_INT 3
12276: PPUSH
12277: LD_INT 0
12279: PPUSH
12280: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12284: LD_VAR 0 2
12288: PPUSH
12289: LD_EXP 27
12293: PPUSH
12294: CALL_OW 119
// end ; end ;
12298: LD_VAR 0 1
12302: RET
// export function PrepareFarmer ; var i ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
// uc_side := 5 ;
12307: LD_ADDR_OWVAR 20
12311: PUSH
12312: LD_INT 5
12314: ST_TO_ADDR
// uc_nation := 2 ;
12315: LD_ADDR_OWVAR 21
12319: PUSH
12320: LD_INT 2
12322: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12323: LD_ADDR_EXP 31
12327: PUSH
12328: LD_STRING Farmer
12330: PPUSH
12331: LD_INT 0
12333: PPUSH
12334: LD_STRING 
12336: PPUSH
12337: CALL 32848 0 3
12341: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12342: LD_EXP 31
12346: PPUSH
12347: LD_INT 106
12349: PPUSH
12350: LD_INT 62
12352: PPUSH
12353: LD_INT 0
12355: PPUSH
12356: CALL_OW 48
// for i := 1 to 5 do
12360: LD_ADDR_VAR 0 2
12364: PUSH
12365: DOUBLE
12366: LD_INT 1
12368: DEC
12369: ST_TO_ADDR
12370: LD_INT 5
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12412
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12376: LD_INT 1
12378: PPUSH
12379: LD_INT 1
12381: PPUSH
12382: LD_INT 1
12384: PPUSH
12385: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12389: CALL_OW 44
12393: PPUSH
12394: LD_INT 105
12396: PPUSH
12397: LD_INT 64
12399: PPUSH
12400: LD_INT 3
12402: PPUSH
12403: LD_INT 0
12405: PPUSH
12406: CALL_OW 50
// end ;
12410: GO 12373
12412: POP
12413: POP
// end ; end_of_file
12414: LD_VAR 0 1
12418: RET
// every 2 2$20 + 0 0$10 do
12419: GO 12421
12421: DISABLE
// begin enable ;
12422: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12423: LD_INT 1
12425: PPUSH
12426: LD_INT 5
12428: PPUSH
12429: CALL_OW 12
12433: PPUSH
12434: LD_INT 1
12436: PPUSH
12437: LD_INT 1
12439: PPUSH
12440: CALL_OW 55
// if tick > 6 6$00 then
12444: LD_OWVAR 1
12448: PUSH
12449: LD_INT 12600
12451: GREATER
12452: IFFALSE 12455
// disable ;
12454: DISABLE
// end ; end_of_file
12455: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12456: LD_VAR 0 1
12460: PUSH
12461: LD_EXP 23
12465: EQUAL
12466: IFFALSE 12475
// YouLost ( Heike ) ;
12468: LD_STRING Heike
12470: PPUSH
12471: CALL_OW 104
// if un = Aviradze then
12475: LD_VAR 0 1
12479: PUSH
12480: LD_EXP 27
12484: EQUAL
12485: IFFALSE 12494
// YouLost ( Aviradze ) ;
12487: LD_STRING Aviradze
12489: PPUSH
12490: CALL_OW 104
// if un = usLab then
12494: LD_VAR 0 1
12498: PUSH
12499: LD_INT 3
12501: EQUAL
12502: IFFALSE 12511
// YouLost ( Lab ) ;
12504: LD_STRING Lab
12506: PPUSH
12507: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12511: LD_VAR 0 1
12515: PUSH
12516: LD_INT 22
12518: PUSH
12519: LD_INT 2
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: LD_INT 23
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: PPUSH
12551: CALL_OW 69
12555: PUSH
12556: LD_EXP 23
12560: PUSH
12561: LD_EXP 27
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: DIFF
12570: IN
12571: PUSH
12572: LD_EXP 4
12576: AND
12577: IFFALSE 12593
// lostCounter := lostCounter + 1 ;
12579: LD_ADDR_EXP 18
12583: PUSH
12584: LD_EXP 18
12588: PUSH
12589: LD_INT 1
12591: PLUS
12592: ST_TO_ADDR
// end ;
12593: PPOPN 1
12595: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12596: LD_INT 23
12598: PUSH
12599: LD_INT 2
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 25
12608: PUSH
12609: LD_INT 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: PPUSH
12620: CALL_OW 69
12624: PUSH
12625: LD_INT 0
12627: EQUAL
12628: PUSH
12629: LD_INT 22
12631: PUSH
12632: LD_INT 2
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 21
12641: PUSH
12642: LD_INT 3
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: PUSH
12649: EMPTY
12650: LIST
12651: LIST
12652: PPUSH
12653: CALL_OW 69
12657: PUSH
12658: LD_INT 0
12660: EQUAL
12661: AND
12662: IFFALSE 12674
12664: GO 12666
12666: DISABLE
// YouLost ( Eng ) ;
12667: LD_STRING Eng
12669: PPUSH
12670: CALL_OW 104
12674: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12675: LD_VAR 0 1
12679: PUSH
12680: LD_EXP 22
12684: IN
12685: PUSH
12686: LD_VAR 0 2
12690: PUSH
12691: LD_INT 2
12693: EQUAL
12694: AND
12695: IFFALSE 12727
// begin usSci := usSci diff un ;
12697: LD_ADDR_EXP 22
12701: PUSH
12702: LD_EXP 22
12706: PUSH
12707: LD_VAR 0 1
12711: DIFF
12712: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12713: LD_ADDR_EXP 9
12717: PUSH
12718: LD_EXP 9
12722: PUSH
12723: LD_INT 1
12725: PLUS
12726: ST_TO_ADDR
// end ; end ;
12727: PPOPN 3
12729: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12730: LD_VAR 0 1
12734: PUSH
12735: LD_INT 2
12737: EQUAL
12738: PUSH
12739: LD_VAR 0 2
12743: PUSH
12744: LD_INT 5
12746: EQUAL
12747: AND
12748: IFFALSE 12757
// YouLost ( FriendlyFire ) ;
12750: LD_STRING FriendlyFire
12752: PPUSH
12753: CALL_OW 104
// end ; end_of_file end_of_file
12757: PPOPN 2
12759: END
// every 0 0$1 do
12760: GO 12762
12762: DISABLE
// begin enable ;
12763: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12764: LD_STRING updateTimer(
12766: PUSH
12767: LD_OWVAR 1
12771: STR
12772: PUSH
12773: LD_STRING );
12775: STR
12776: PPUSH
12777: CALL_OW 559
// end ;
12781: END
// export function SOS_MapStart ( ) ; begin
12782: LD_INT 0
12784: PPUSH
// if streamModeActive then
12785: LD_EXP 33
12789: IFFALSE 12798
// DefineStreamItems ( true ) ;
12791: LD_INT 1
12793: PPUSH
12794: CALL 14602 0 1
// UpdateLuaVariables ( ) ;
12798: CALL 12815 0 0
// UpdateFactoryWaypoints ( ) ;
12802: CALL 27463 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12806: CALL 27720 0 0
// end ;
12810: LD_VAR 0 1
12814: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
12815: LD_INT 0
12817: PPUSH
// if not globalGameSaveCounter then
12818: LD_EXP 32
12822: NOT
12823: IFFALSE 12834
// ToLua ( setGameSaveCounter(0) ) else
12825: LD_STRING setGameSaveCounter(0)
12827: PPUSH
12828: CALL_OW 559
12832: GO 12866
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12834: LD_ADDR_EXP 32
12838: PUSH
12839: LD_EXP 32
12843: PPUSH
12844: CALL 71677 0 1
12848: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12849: LD_STRING setGameSaveCounter(
12851: PUSH
12852: LD_EXP 32
12856: STR
12857: PUSH
12858: LD_STRING )
12860: STR
12861: PPUSH
12862: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12866: LD_STRING setGameDifficulty(
12868: PUSH
12869: LD_OWVAR 67
12873: STR
12874: PUSH
12875: LD_STRING )
12877: STR
12878: PPUSH
12879: CALL_OW 559
// end ;
12883: LD_VAR 0 1
12887: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12888: LD_INT 0
12890: PPUSH
// if p2 = stream_mode then
12891: LD_VAR 0 2
12895: PUSH
12896: LD_INT 100
12898: EQUAL
12899: IFFALSE 13902
// begin if not StreamModeActive then
12901: LD_EXP 33
12905: NOT
12906: IFFALSE 12916
// StreamModeActive := true ;
12908: LD_ADDR_EXP 33
12912: PUSH
12913: LD_INT 1
12915: ST_TO_ADDR
// if p3 = 0 then
12916: LD_VAR 0 3
12920: PUSH
12921: LD_INT 0
12923: EQUAL
12924: IFFALSE 12930
// InitStreamMode ;
12926: CALL 14138 0 0
// if p3 = 1 then
12930: LD_VAR 0 3
12934: PUSH
12935: LD_INT 1
12937: EQUAL
12938: IFFALSE 12948
// sRocket := true ;
12940: LD_ADDR_EXP 38
12944: PUSH
12945: LD_INT 1
12947: ST_TO_ADDR
// if p3 = 2 then
12948: LD_VAR 0 3
12952: PUSH
12953: LD_INT 2
12955: EQUAL
12956: IFFALSE 12966
// sSpeed := true ;
12958: LD_ADDR_EXP 37
12962: PUSH
12963: LD_INT 1
12965: ST_TO_ADDR
// if p3 = 3 then
12966: LD_VAR 0 3
12970: PUSH
12971: LD_INT 3
12973: EQUAL
12974: IFFALSE 12984
// sEngine := true ;
12976: LD_ADDR_EXP 39
12980: PUSH
12981: LD_INT 1
12983: ST_TO_ADDR
// if p3 = 4 then
12984: LD_VAR 0 3
12988: PUSH
12989: LD_INT 4
12991: EQUAL
12992: IFFALSE 13002
// sSpec := true ;
12994: LD_ADDR_EXP 36
12998: PUSH
12999: LD_INT 1
13001: ST_TO_ADDR
// if p3 = 5 then
13002: LD_VAR 0 3
13006: PUSH
13007: LD_INT 5
13009: EQUAL
13010: IFFALSE 13020
// sLevel := true ;
13012: LD_ADDR_EXP 40
13016: PUSH
13017: LD_INT 1
13019: ST_TO_ADDR
// if p3 = 6 then
13020: LD_VAR 0 3
13024: PUSH
13025: LD_INT 6
13027: EQUAL
13028: IFFALSE 13038
// sArmoury := true ;
13030: LD_ADDR_EXP 41
13034: PUSH
13035: LD_INT 1
13037: ST_TO_ADDR
// if p3 = 7 then
13038: LD_VAR 0 3
13042: PUSH
13043: LD_INT 7
13045: EQUAL
13046: IFFALSE 13056
// sRadar := true ;
13048: LD_ADDR_EXP 42
13052: PUSH
13053: LD_INT 1
13055: ST_TO_ADDR
// if p3 = 8 then
13056: LD_VAR 0 3
13060: PUSH
13061: LD_INT 8
13063: EQUAL
13064: IFFALSE 13074
// sBunker := true ;
13066: LD_ADDR_EXP 43
13070: PUSH
13071: LD_INT 1
13073: ST_TO_ADDR
// if p3 = 9 then
13074: LD_VAR 0 3
13078: PUSH
13079: LD_INT 9
13081: EQUAL
13082: IFFALSE 13092
// sHack := true ;
13084: LD_ADDR_EXP 44
13088: PUSH
13089: LD_INT 1
13091: ST_TO_ADDR
// if p3 = 10 then
13092: LD_VAR 0 3
13096: PUSH
13097: LD_INT 10
13099: EQUAL
13100: IFFALSE 13110
// sFire := true ;
13102: LD_ADDR_EXP 45
13106: PUSH
13107: LD_INT 1
13109: ST_TO_ADDR
// if p3 = 11 then
13110: LD_VAR 0 3
13114: PUSH
13115: LD_INT 11
13117: EQUAL
13118: IFFALSE 13128
// sRefresh := true ;
13120: LD_ADDR_EXP 46
13124: PUSH
13125: LD_INT 1
13127: ST_TO_ADDR
// if p3 = 12 then
13128: LD_VAR 0 3
13132: PUSH
13133: LD_INT 12
13135: EQUAL
13136: IFFALSE 13146
// sExp := true ;
13138: LD_ADDR_EXP 47
13142: PUSH
13143: LD_INT 1
13145: ST_TO_ADDR
// if p3 = 13 then
13146: LD_VAR 0 3
13150: PUSH
13151: LD_INT 13
13153: EQUAL
13154: IFFALSE 13164
// sDepot := true ;
13156: LD_ADDR_EXP 48
13160: PUSH
13161: LD_INT 1
13163: ST_TO_ADDR
// if p3 = 14 then
13164: LD_VAR 0 3
13168: PUSH
13169: LD_INT 14
13171: EQUAL
13172: IFFALSE 13182
// sFlag := true ;
13174: LD_ADDR_EXP 49
13178: PUSH
13179: LD_INT 1
13181: ST_TO_ADDR
// if p3 = 15 then
13182: LD_VAR 0 3
13186: PUSH
13187: LD_INT 15
13189: EQUAL
13190: IFFALSE 13200
// sKamikadze := true ;
13192: LD_ADDR_EXP 57
13196: PUSH
13197: LD_INT 1
13199: ST_TO_ADDR
// if p3 = 16 then
13200: LD_VAR 0 3
13204: PUSH
13205: LD_INT 16
13207: EQUAL
13208: IFFALSE 13218
// sTroll := true ;
13210: LD_ADDR_EXP 58
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// if p3 = 17 then
13218: LD_VAR 0 3
13222: PUSH
13223: LD_INT 17
13225: EQUAL
13226: IFFALSE 13236
// sSlow := true ;
13228: LD_ADDR_EXP 59
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// if p3 = 18 then
13236: LD_VAR 0 3
13240: PUSH
13241: LD_INT 18
13243: EQUAL
13244: IFFALSE 13254
// sLack := true ;
13246: LD_ADDR_EXP 60
13250: PUSH
13251: LD_INT 1
13253: ST_TO_ADDR
// if p3 = 19 then
13254: LD_VAR 0 3
13258: PUSH
13259: LD_INT 19
13261: EQUAL
13262: IFFALSE 13272
// sTank := true ;
13264: LD_ADDR_EXP 62
13268: PUSH
13269: LD_INT 1
13271: ST_TO_ADDR
// if p3 = 20 then
13272: LD_VAR 0 3
13276: PUSH
13277: LD_INT 20
13279: EQUAL
13280: IFFALSE 13290
// sRemote := true ;
13282: LD_ADDR_EXP 63
13286: PUSH
13287: LD_INT 1
13289: ST_TO_ADDR
// if p3 = 21 then
13290: LD_VAR 0 3
13294: PUSH
13295: LD_INT 21
13297: EQUAL
13298: IFFALSE 13308
// sPowell := true ;
13300: LD_ADDR_EXP 64
13304: PUSH
13305: LD_INT 1
13307: ST_TO_ADDR
// if p3 = 22 then
13308: LD_VAR 0 3
13312: PUSH
13313: LD_INT 22
13315: EQUAL
13316: IFFALSE 13326
// sTeleport := true ;
13318: LD_ADDR_EXP 67
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// if p3 = 23 then
13326: LD_VAR 0 3
13330: PUSH
13331: LD_INT 23
13333: EQUAL
13334: IFFALSE 13344
// sOilTower := true ;
13336: LD_ADDR_EXP 69
13340: PUSH
13341: LD_INT 1
13343: ST_TO_ADDR
// if p3 = 24 then
13344: LD_VAR 0 3
13348: PUSH
13349: LD_INT 24
13351: EQUAL
13352: IFFALSE 13362
// sShovel := true ;
13354: LD_ADDR_EXP 70
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// if p3 = 25 then
13362: LD_VAR 0 3
13366: PUSH
13367: LD_INT 25
13369: EQUAL
13370: IFFALSE 13380
// sSheik := true ;
13372: LD_ADDR_EXP 71
13376: PUSH
13377: LD_INT 1
13379: ST_TO_ADDR
// if p3 = 26 then
13380: LD_VAR 0 3
13384: PUSH
13385: LD_INT 26
13387: EQUAL
13388: IFFALSE 13398
// sEarthquake := true ;
13390: LD_ADDR_EXP 73
13394: PUSH
13395: LD_INT 1
13397: ST_TO_ADDR
// if p3 = 27 then
13398: LD_VAR 0 3
13402: PUSH
13403: LD_INT 27
13405: EQUAL
13406: IFFALSE 13416
// sAI := true ;
13408: LD_ADDR_EXP 74
13412: PUSH
13413: LD_INT 1
13415: ST_TO_ADDR
// if p3 = 28 then
13416: LD_VAR 0 3
13420: PUSH
13421: LD_INT 28
13423: EQUAL
13424: IFFALSE 13434
// sCargo := true ;
13426: LD_ADDR_EXP 77
13430: PUSH
13431: LD_INT 1
13433: ST_TO_ADDR
// if p3 = 29 then
13434: LD_VAR 0 3
13438: PUSH
13439: LD_INT 29
13441: EQUAL
13442: IFFALSE 13452
// sDLaser := true ;
13444: LD_ADDR_EXP 78
13448: PUSH
13449: LD_INT 1
13451: ST_TO_ADDR
// if p3 = 30 then
13452: LD_VAR 0 3
13456: PUSH
13457: LD_INT 30
13459: EQUAL
13460: IFFALSE 13470
// sExchange := true ;
13462: LD_ADDR_EXP 79
13466: PUSH
13467: LD_INT 1
13469: ST_TO_ADDR
// if p3 = 31 then
13470: LD_VAR 0 3
13474: PUSH
13475: LD_INT 31
13477: EQUAL
13478: IFFALSE 13488
// sFac := true ;
13480: LD_ADDR_EXP 80
13484: PUSH
13485: LD_INT 1
13487: ST_TO_ADDR
// if p3 = 32 then
13488: LD_VAR 0 3
13492: PUSH
13493: LD_INT 32
13495: EQUAL
13496: IFFALSE 13506
// sPower := true ;
13498: LD_ADDR_EXP 81
13502: PUSH
13503: LD_INT 1
13505: ST_TO_ADDR
// if p3 = 33 then
13506: LD_VAR 0 3
13510: PUSH
13511: LD_INT 33
13513: EQUAL
13514: IFFALSE 13524
// sRandom := true ;
13516: LD_ADDR_EXP 82
13520: PUSH
13521: LD_INT 1
13523: ST_TO_ADDR
// if p3 = 34 then
13524: LD_VAR 0 3
13528: PUSH
13529: LD_INT 34
13531: EQUAL
13532: IFFALSE 13542
// sShield := true ;
13534: LD_ADDR_EXP 83
13538: PUSH
13539: LD_INT 1
13541: ST_TO_ADDR
// if p3 = 35 then
13542: LD_VAR 0 3
13546: PUSH
13547: LD_INT 35
13549: EQUAL
13550: IFFALSE 13560
// sTime := true ;
13552: LD_ADDR_EXP 84
13556: PUSH
13557: LD_INT 1
13559: ST_TO_ADDR
// if p3 = 36 then
13560: LD_VAR 0 3
13564: PUSH
13565: LD_INT 36
13567: EQUAL
13568: IFFALSE 13578
// sTools := true ;
13570: LD_ADDR_EXP 85
13574: PUSH
13575: LD_INT 1
13577: ST_TO_ADDR
// if p3 = 101 then
13578: LD_VAR 0 3
13582: PUSH
13583: LD_INT 101
13585: EQUAL
13586: IFFALSE 13596
// sSold := true ;
13588: LD_ADDR_EXP 50
13592: PUSH
13593: LD_INT 1
13595: ST_TO_ADDR
// if p3 = 102 then
13596: LD_VAR 0 3
13600: PUSH
13601: LD_INT 102
13603: EQUAL
13604: IFFALSE 13614
// sDiff := true ;
13606: LD_ADDR_EXP 51
13610: PUSH
13611: LD_INT 1
13613: ST_TO_ADDR
// if p3 = 103 then
13614: LD_VAR 0 3
13618: PUSH
13619: LD_INT 103
13621: EQUAL
13622: IFFALSE 13632
// sFog := true ;
13624: LD_ADDR_EXP 54
13628: PUSH
13629: LD_INT 1
13631: ST_TO_ADDR
// if p3 = 104 then
13632: LD_VAR 0 3
13636: PUSH
13637: LD_INT 104
13639: EQUAL
13640: IFFALSE 13650
// sReset := true ;
13642: LD_ADDR_EXP 55
13646: PUSH
13647: LD_INT 1
13649: ST_TO_ADDR
// if p3 = 105 then
13650: LD_VAR 0 3
13654: PUSH
13655: LD_INT 105
13657: EQUAL
13658: IFFALSE 13668
// sSun := true ;
13660: LD_ADDR_EXP 56
13664: PUSH
13665: LD_INT 1
13667: ST_TO_ADDR
// if p3 = 106 then
13668: LD_VAR 0 3
13672: PUSH
13673: LD_INT 106
13675: EQUAL
13676: IFFALSE 13686
// sTiger := true ;
13678: LD_ADDR_EXP 52
13682: PUSH
13683: LD_INT 1
13685: ST_TO_ADDR
// if p3 = 107 then
13686: LD_VAR 0 3
13690: PUSH
13691: LD_INT 107
13693: EQUAL
13694: IFFALSE 13704
// sBomb := true ;
13696: LD_ADDR_EXP 53
13700: PUSH
13701: LD_INT 1
13703: ST_TO_ADDR
// if p3 = 108 then
13704: LD_VAR 0 3
13708: PUSH
13709: LD_INT 108
13711: EQUAL
13712: IFFALSE 13722
// sWound := true ;
13714: LD_ADDR_EXP 61
13718: PUSH
13719: LD_INT 1
13721: ST_TO_ADDR
// if p3 = 109 then
13722: LD_VAR 0 3
13726: PUSH
13727: LD_INT 109
13729: EQUAL
13730: IFFALSE 13740
// sBetray := true ;
13732: LD_ADDR_EXP 65
13736: PUSH
13737: LD_INT 1
13739: ST_TO_ADDR
// if p3 = 110 then
13740: LD_VAR 0 3
13744: PUSH
13745: LD_INT 110
13747: EQUAL
13748: IFFALSE 13758
// sContamin := true ;
13750: LD_ADDR_EXP 66
13754: PUSH
13755: LD_INT 1
13757: ST_TO_ADDR
// if p3 = 111 then
13758: LD_VAR 0 3
13762: PUSH
13763: LD_INT 111
13765: EQUAL
13766: IFFALSE 13776
// sOil := true ;
13768: LD_ADDR_EXP 68
13772: PUSH
13773: LD_INT 1
13775: ST_TO_ADDR
// if p3 = 112 then
13776: LD_VAR 0 3
13780: PUSH
13781: LD_INT 112
13783: EQUAL
13784: IFFALSE 13794
// sStu := true ;
13786: LD_ADDR_EXP 72
13790: PUSH
13791: LD_INT 1
13793: ST_TO_ADDR
// if p3 = 113 then
13794: LD_VAR 0 3
13798: PUSH
13799: LD_INT 113
13801: EQUAL
13802: IFFALSE 13812
// sBazooka := true ;
13804: LD_ADDR_EXP 75
13808: PUSH
13809: LD_INT 1
13811: ST_TO_ADDR
// if p3 = 114 then
13812: LD_VAR 0 3
13816: PUSH
13817: LD_INT 114
13819: EQUAL
13820: IFFALSE 13830
// sMortar := true ;
13822: LD_ADDR_EXP 76
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// if p3 = 115 then
13830: LD_VAR 0 3
13834: PUSH
13835: LD_INT 115
13837: EQUAL
13838: IFFALSE 13848
// sRanger := true ;
13840: LD_ADDR_EXP 86
13844: PUSH
13845: LD_INT 1
13847: ST_TO_ADDR
// if p3 = 116 then
13848: LD_VAR 0 3
13852: PUSH
13853: LD_INT 116
13855: EQUAL
13856: IFFALSE 13866
// sComputer := true ;
13858: LD_ADDR_EXP 87
13862: PUSH
13863: LD_INT 1
13865: ST_TO_ADDR
// if p3 = 117 then
13866: LD_VAR 0 3
13870: PUSH
13871: LD_INT 117
13873: EQUAL
13874: IFFALSE 13884
// s30 := true ;
13876: LD_ADDR_EXP 88
13880: PUSH
13881: LD_INT 1
13883: ST_TO_ADDR
// if p3 = 118 then
13884: LD_VAR 0 3
13888: PUSH
13889: LD_INT 118
13891: EQUAL
13892: IFFALSE 13902
// s60 := true ;
13894: LD_ADDR_EXP 89
13898: PUSH
13899: LD_INT 1
13901: ST_TO_ADDR
// end ; if p2 = hack_mode then
13902: LD_VAR 0 2
13906: PUSH
13907: LD_INT 101
13909: EQUAL
13910: IFFALSE 14038
// begin case p3 of 1 :
13912: LD_VAR 0 3
13916: PUSH
13917: LD_INT 1
13919: DOUBLE
13920: EQUAL
13921: IFTRUE 13925
13923: GO 13932
13925: POP
// hHackUnlimitedResources ; 2 :
13926: CALL 26209 0 0
13930: GO 14038
13932: LD_INT 2
13934: DOUBLE
13935: EQUAL
13936: IFTRUE 13940
13938: GO 13947
13940: POP
// hHackSetLevel10 ; 3 :
13941: CALL 26342 0 0
13945: GO 14038
13947: LD_INT 3
13949: DOUBLE
13950: EQUAL
13951: IFTRUE 13955
13953: GO 13962
13955: POP
// hHackSetLevel10YourUnits ; 4 :
13956: CALL 26427 0 0
13960: GO 14038
13962: LD_INT 4
13964: DOUBLE
13965: EQUAL
13966: IFTRUE 13970
13968: GO 13977
13970: POP
// hHackInvincible ; 5 :
13971: CALL 26875 0 0
13975: GO 14038
13977: LD_INT 5
13979: DOUBLE
13980: EQUAL
13981: IFTRUE 13985
13983: GO 13992
13985: POP
// hHackInvisible ; 6 :
13986: CALL 26986 0 0
13990: GO 14038
13992: LD_INT 6
13994: DOUBLE
13995: EQUAL
13996: IFTRUE 14000
13998: GO 14007
14000: POP
// hHackChangeYourSide ; 7 :
14001: CALL 27043 0 0
14005: GO 14038
14007: LD_INT 7
14009: DOUBLE
14010: EQUAL
14011: IFTRUE 14015
14013: GO 14022
14015: POP
// hHackChangeUnitSide ; 8 :
14016: CALL 27085 0 0
14020: GO 14038
14022: LD_INT 8
14024: DOUBLE
14025: EQUAL
14026: IFTRUE 14030
14028: GO 14037
14030: POP
// hHackFog ; end ;
14031: CALL 27186 0 0
14035: GO 14038
14037: POP
// end ; if p2 = game_save_mode then
14038: LD_VAR 0 2
14042: PUSH
14043: LD_INT 102
14045: EQUAL
14046: IFFALSE 14111
// begin if p3 = 1 then
14048: LD_VAR 0 3
14052: PUSH
14053: LD_INT 1
14055: EQUAL
14056: IFFALSE 14068
// globalGameSaveCounter := p4 ;
14058: LD_ADDR_EXP 32
14062: PUSH
14063: LD_VAR 0 4
14067: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14068: LD_VAR 0 3
14072: PUSH
14073: LD_INT 2
14075: EQUAL
14076: PUSH
14077: LD_EXP 32
14081: AND
14082: IFFALSE 14101
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14084: LD_STRING setGameSaveCounter(
14086: PUSH
14087: LD_EXP 32
14091: STR
14092: PUSH
14093: LD_STRING )
14095: STR
14096: PPUSH
14097: CALL_OW 559
// display_strings := globalGameSaveCounter ;
14101: LD_ADDR_OWVAR 47
14105: PUSH
14106: LD_EXP 32
14110: ST_TO_ADDR
// end ; end ;
14111: LD_VAR 0 7
14115: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
14116: GO 14118
14118: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
14119: LD_STRING initStreamRollete();
14121: PPUSH
14122: CALL_OW 559
// InitStreamMode ;
14126: CALL 14138 0 0
// DefineStreamItems ( false ) ;
14130: LD_INT 0
14132: PPUSH
14133: CALL 14602 0 1
// end ;
14137: END
// function InitStreamMode ; begin
14138: LD_INT 0
14140: PPUSH
// streamModeActive := false ;
14141: LD_ADDR_EXP 33
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// normalCounter := 36 ;
14149: LD_ADDR_EXP 34
14153: PUSH
14154: LD_INT 36
14156: ST_TO_ADDR
// hardcoreCounter := 18 ;
14157: LD_ADDR_EXP 35
14161: PUSH
14162: LD_INT 18
14164: ST_TO_ADDR
// sRocket := false ;
14165: LD_ADDR_EXP 38
14169: PUSH
14170: LD_INT 0
14172: ST_TO_ADDR
// sSpeed := false ;
14173: LD_ADDR_EXP 37
14177: PUSH
14178: LD_INT 0
14180: ST_TO_ADDR
// sEngine := false ;
14181: LD_ADDR_EXP 39
14185: PUSH
14186: LD_INT 0
14188: ST_TO_ADDR
// sSpec := false ;
14189: LD_ADDR_EXP 36
14193: PUSH
14194: LD_INT 0
14196: ST_TO_ADDR
// sLevel := false ;
14197: LD_ADDR_EXP 40
14201: PUSH
14202: LD_INT 0
14204: ST_TO_ADDR
// sArmoury := false ;
14205: LD_ADDR_EXP 41
14209: PUSH
14210: LD_INT 0
14212: ST_TO_ADDR
// sRadar := false ;
14213: LD_ADDR_EXP 42
14217: PUSH
14218: LD_INT 0
14220: ST_TO_ADDR
// sBunker := false ;
14221: LD_ADDR_EXP 43
14225: PUSH
14226: LD_INT 0
14228: ST_TO_ADDR
// sHack := false ;
14229: LD_ADDR_EXP 44
14233: PUSH
14234: LD_INT 0
14236: ST_TO_ADDR
// sFire := false ;
14237: LD_ADDR_EXP 45
14241: PUSH
14242: LD_INT 0
14244: ST_TO_ADDR
// sRefresh := false ;
14245: LD_ADDR_EXP 46
14249: PUSH
14250: LD_INT 0
14252: ST_TO_ADDR
// sExp := false ;
14253: LD_ADDR_EXP 47
14257: PUSH
14258: LD_INT 0
14260: ST_TO_ADDR
// sDepot := false ;
14261: LD_ADDR_EXP 48
14265: PUSH
14266: LD_INT 0
14268: ST_TO_ADDR
// sFlag := false ;
14269: LD_ADDR_EXP 49
14273: PUSH
14274: LD_INT 0
14276: ST_TO_ADDR
// sKamikadze := false ;
14277: LD_ADDR_EXP 57
14281: PUSH
14282: LD_INT 0
14284: ST_TO_ADDR
// sTroll := false ;
14285: LD_ADDR_EXP 58
14289: PUSH
14290: LD_INT 0
14292: ST_TO_ADDR
// sSlow := false ;
14293: LD_ADDR_EXP 59
14297: PUSH
14298: LD_INT 0
14300: ST_TO_ADDR
// sLack := false ;
14301: LD_ADDR_EXP 60
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// sTank := false ;
14309: LD_ADDR_EXP 62
14313: PUSH
14314: LD_INT 0
14316: ST_TO_ADDR
// sRemote := false ;
14317: LD_ADDR_EXP 63
14321: PUSH
14322: LD_INT 0
14324: ST_TO_ADDR
// sPowell := false ;
14325: LD_ADDR_EXP 64
14329: PUSH
14330: LD_INT 0
14332: ST_TO_ADDR
// sTeleport := false ;
14333: LD_ADDR_EXP 67
14337: PUSH
14338: LD_INT 0
14340: ST_TO_ADDR
// sOilTower := false ;
14341: LD_ADDR_EXP 69
14345: PUSH
14346: LD_INT 0
14348: ST_TO_ADDR
// sShovel := false ;
14349: LD_ADDR_EXP 70
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// sSheik := false ;
14357: LD_ADDR_EXP 71
14361: PUSH
14362: LD_INT 0
14364: ST_TO_ADDR
// sEarthquake := false ;
14365: LD_ADDR_EXP 73
14369: PUSH
14370: LD_INT 0
14372: ST_TO_ADDR
// sAI := false ;
14373: LD_ADDR_EXP 74
14377: PUSH
14378: LD_INT 0
14380: ST_TO_ADDR
// sCargo := false ;
14381: LD_ADDR_EXP 77
14385: PUSH
14386: LD_INT 0
14388: ST_TO_ADDR
// sDLaser := false ;
14389: LD_ADDR_EXP 78
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// sExchange := false ;
14397: LD_ADDR_EXP 79
14401: PUSH
14402: LD_INT 0
14404: ST_TO_ADDR
// sFac := false ;
14405: LD_ADDR_EXP 80
14409: PUSH
14410: LD_INT 0
14412: ST_TO_ADDR
// sPower := false ;
14413: LD_ADDR_EXP 81
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// sRandom := false ;
14421: LD_ADDR_EXP 82
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// sShield := false ;
14429: LD_ADDR_EXP 83
14433: PUSH
14434: LD_INT 0
14436: ST_TO_ADDR
// sTime := false ;
14437: LD_ADDR_EXP 84
14441: PUSH
14442: LD_INT 0
14444: ST_TO_ADDR
// sTools := false ;
14445: LD_ADDR_EXP 85
14449: PUSH
14450: LD_INT 0
14452: ST_TO_ADDR
// sSold := false ;
14453: LD_ADDR_EXP 50
14457: PUSH
14458: LD_INT 0
14460: ST_TO_ADDR
// sDiff := false ;
14461: LD_ADDR_EXP 51
14465: PUSH
14466: LD_INT 0
14468: ST_TO_ADDR
// sFog := false ;
14469: LD_ADDR_EXP 54
14473: PUSH
14474: LD_INT 0
14476: ST_TO_ADDR
// sReset := false ;
14477: LD_ADDR_EXP 55
14481: PUSH
14482: LD_INT 0
14484: ST_TO_ADDR
// sSun := false ;
14485: LD_ADDR_EXP 56
14489: PUSH
14490: LD_INT 0
14492: ST_TO_ADDR
// sTiger := false ;
14493: LD_ADDR_EXP 52
14497: PUSH
14498: LD_INT 0
14500: ST_TO_ADDR
// sBomb := false ;
14501: LD_ADDR_EXP 53
14505: PUSH
14506: LD_INT 0
14508: ST_TO_ADDR
// sWound := false ;
14509: LD_ADDR_EXP 61
14513: PUSH
14514: LD_INT 0
14516: ST_TO_ADDR
// sBetray := false ;
14517: LD_ADDR_EXP 65
14521: PUSH
14522: LD_INT 0
14524: ST_TO_ADDR
// sContamin := false ;
14525: LD_ADDR_EXP 66
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// sOil := false ;
14533: LD_ADDR_EXP 68
14537: PUSH
14538: LD_INT 0
14540: ST_TO_ADDR
// sStu := false ;
14541: LD_ADDR_EXP 72
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// sBazooka := false ;
14549: LD_ADDR_EXP 75
14553: PUSH
14554: LD_INT 0
14556: ST_TO_ADDR
// sMortar := false ;
14557: LD_ADDR_EXP 76
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// sRanger := false ;
14565: LD_ADDR_EXP 86
14569: PUSH
14570: LD_INT 0
14572: ST_TO_ADDR
// sComputer := false ;
14573: LD_ADDR_EXP 87
14577: PUSH
14578: LD_INT 0
14580: ST_TO_ADDR
// s30 := false ;
14581: LD_ADDR_EXP 88
14585: PUSH
14586: LD_INT 0
14588: ST_TO_ADDR
// s60 := false ;
14589: LD_ADDR_EXP 89
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// end ;
14597: LD_VAR 0 1
14601: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14602: LD_INT 0
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
// result := [ ] ;
14611: LD_ADDR_VAR 0 2
14615: PUSH
14616: EMPTY
14617: ST_TO_ADDR
// if campaign_id = 1 then
14618: LD_OWVAR 69
14622: PUSH
14623: LD_INT 1
14625: EQUAL
14626: IFFALSE 17792
// begin case mission_number of 1 :
14628: LD_OWVAR 70
14632: PUSH
14633: LD_INT 1
14635: DOUBLE
14636: EQUAL
14637: IFTRUE 14641
14639: GO 14717
14641: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14642: LD_ADDR_VAR 0 2
14646: PUSH
14647: LD_INT 2
14649: PUSH
14650: LD_INT 4
14652: PUSH
14653: LD_INT 11
14655: PUSH
14656: LD_INT 12
14658: PUSH
14659: LD_INT 15
14661: PUSH
14662: LD_INT 16
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 26
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: PUSH
14685: LD_INT 101
14687: PUSH
14688: LD_INT 102
14690: PUSH
14691: LD_INT 106
14693: PUSH
14694: LD_INT 116
14696: PUSH
14697: LD_INT 117
14699: PUSH
14700: LD_INT 118
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: ST_TO_ADDR
14715: GO 17790
14717: LD_INT 2
14719: DOUBLE
14720: EQUAL
14721: IFTRUE 14725
14723: GO 14809
14725: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14726: LD_ADDR_VAR 0 2
14730: PUSH
14731: LD_INT 2
14733: PUSH
14734: LD_INT 4
14736: PUSH
14737: LD_INT 11
14739: PUSH
14740: LD_INT 12
14742: PUSH
14743: LD_INT 15
14745: PUSH
14746: LD_INT 16
14748: PUSH
14749: LD_INT 22
14751: PUSH
14752: LD_INT 23
14754: PUSH
14755: LD_INT 26
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 101
14771: PUSH
14772: LD_INT 102
14774: PUSH
14775: LD_INT 105
14777: PUSH
14778: LD_INT 106
14780: PUSH
14781: LD_INT 108
14783: PUSH
14784: LD_INT 116
14786: PUSH
14787: LD_INT 117
14789: PUSH
14790: LD_INT 118
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: ST_TO_ADDR
14807: GO 17790
14809: LD_INT 3
14811: DOUBLE
14812: EQUAL
14813: IFTRUE 14817
14815: GO 14905
14817: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14818: LD_ADDR_VAR 0 2
14822: PUSH
14823: LD_INT 2
14825: PUSH
14826: LD_INT 4
14828: PUSH
14829: LD_INT 5
14831: PUSH
14832: LD_INT 11
14834: PUSH
14835: LD_INT 12
14837: PUSH
14838: LD_INT 15
14840: PUSH
14841: LD_INT 16
14843: PUSH
14844: LD_INT 22
14846: PUSH
14847: LD_INT 26
14849: PUSH
14850: LD_INT 36
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 101
14867: PUSH
14868: LD_INT 102
14870: PUSH
14871: LD_INT 105
14873: PUSH
14874: LD_INT 106
14876: PUSH
14877: LD_INT 108
14879: PUSH
14880: LD_INT 116
14882: PUSH
14883: LD_INT 117
14885: PUSH
14886: LD_INT 118
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: ST_TO_ADDR
14903: GO 17790
14905: LD_INT 4
14907: DOUBLE
14908: EQUAL
14909: IFTRUE 14913
14911: GO 15009
14913: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14914: LD_ADDR_VAR 0 2
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: LD_INT 4
14924: PUSH
14925: LD_INT 5
14927: PUSH
14928: LD_INT 8
14930: PUSH
14931: LD_INT 11
14933: PUSH
14934: LD_INT 12
14936: PUSH
14937: LD_INT 15
14939: PUSH
14940: LD_INT 16
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 23
14948: PUSH
14949: LD_INT 26
14951: PUSH
14952: LD_INT 36
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: PUSH
14969: LD_INT 101
14971: PUSH
14972: LD_INT 102
14974: PUSH
14975: LD_INT 105
14977: PUSH
14978: LD_INT 106
14980: PUSH
14981: LD_INT 108
14983: PUSH
14984: LD_INT 116
14986: PUSH
14987: LD_INT 117
14989: PUSH
14990: LD_INT 118
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: ST_TO_ADDR
15007: GO 17790
15009: LD_INT 5
15011: DOUBLE
15012: EQUAL
15013: IFTRUE 15017
15015: GO 15129
15017: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15018: LD_ADDR_VAR 0 2
15022: PUSH
15023: LD_INT 2
15025: PUSH
15026: LD_INT 4
15028: PUSH
15029: LD_INT 5
15031: PUSH
15032: LD_INT 6
15034: PUSH
15035: LD_INT 8
15037: PUSH
15038: LD_INT 11
15040: PUSH
15041: LD_INT 12
15043: PUSH
15044: LD_INT 15
15046: PUSH
15047: LD_INT 16
15049: PUSH
15050: LD_INT 22
15052: PUSH
15053: LD_INT 23
15055: PUSH
15056: LD_INT 25
15058: PUSH
15059: LD_INT 26
15061: PUSH
15062: LD_INT 36
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 101
15083: PUSH
15084: LD_INT 102
15086: PUSH
15087: LD_INT 105
15089: PUSH
15090: LD_INT 106
15092: PUSH
15093: LD_INT 108
15095: PUSH
15096: LD_INT 109
15098: PUSH
15099: LD_INT 112
15101: PUSH
15102: LD_INT 116
15104: PUSH
15105: LD_INT 117
15107: PUSH
15108: LD_INT 118
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: PUSH
15123: EMPTY
15124: LIST
15125: LIST
15126: ST_TO_ADDR
15127: GO 17790
15129: LD_INT 6
15131: DOUBLE
15132: EQUAL
15133: IFTRUE 15137
15135: GO 15269
15137: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15138: LD_ADDR_VAR 0 2
15142: PUSH
15143: LD_INT 2
15145: PUSH
15146: LD_INT 4
15148: PUSH
15149: LD_INT 5
15151: PUSH
15152: LD_INT 6
15154: PUSH
15155: LD_INT 8
15157: PUSH
15158: LD_INT 11
15160: PUSH
15161: LD_INT 12
15163: PUSH
15164: LD_INT 15
15166: PUSH
15167: LD_INT 16
15169: PUSH
15170: LD_INT 20
15172: PUSH
15173: LD_INT 21
15175: PUSH
15176: LD_INT 22
15178: PUSH
15179: LD_INT 23
15181: PUSH
15182: LD_INT 25
15184: PUSH
15185: LD_INT 26
15187: PUSH
15188: LD_INT 30
15190: PUSH
15191: LD_INT 31
15193: PUSH
15194: LD_INT 32
15196: PUSH
15197: LD_INT 36
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 101
15223: PUSH
15224: LD_INT 102
15226: PUSH
15227: LD_INT 105
15229: PUSH
15230: LD_INT 106
15232: PUSH
15233: LD_INT 108
15235: PUSH
15236: LD_INT 109
15238: PUSH
15239: LD_INT 112
15241: PUSH
15242: LD_INT 116
15244: PUSH
15245: LD_INT 117
15247: PUSH
15248: LD_INT 118
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: ST_TO_ADDR
15267: GO 17790
15269: LD_INT 7
15271: DOUBLE
15272: EQUAL
15273: IFTRUE 15277
15275: GO 15389
15277: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15278: LD_ADDR_VAR 0 2
15282: PUSH
15283: LD_INT 2
15285: PUSH
15286: LD_INT 4
15288: PUSH
15289: LD_INT 5
15291: PUSH
15292: LD_INT 7
15294: PUSH
15295: LD_INT 11
15297: PUSH
15298: LD_INT 12
15300: PUSH
15301: LD_INT 15
15303: PUSH
15304: LD_INT 16
15306: PUSH
15307: LD_INT 20
15309: PUSH
15310: LD_INT 21
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: LD_INT 23
15318: PUSH
15319: LD_INT 25
15321: PUSH
15322: LD_INT 26
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 101
15343: PUSH
15344: LD_INT 102
15346: PUSH
15347: LD_INT 103
15349: PUSH
15350: LD_INT 105
15352: PUSH
15353: LD_INT 106
15355: PUSH
15356: LD_INT 108
15358: PUSH
15359: LD_INT 112
15361: PUSH
15362: LD_INT 116
15364: PUSH
15365: LD_INT 117
15367: PUSH
15368: LD_INT 118
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: ST_TO_ADDR
15387: GO 17790
15389: LD_INT 8
15391: DOUBLE
15392: EQUAL
15393: IFTRUE 15397
15395: GO 15537
15397: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: LD_INT 2
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: LD_INT 7
15417: PUSH
15418: LD_INT 8
15420: PUSH
15421: LD_INT 11
15423: PUSH
15424: LD_INT 12
15426: PUSH
15427: LD_INT 15
15429: PUSH
15430: LD_INT 16
15432: PUSH
15433: LD_INT 20
15435: PUSH
15436: LD_INT 21
15438: PUSH
15439: LD_INT 22
15441: PUSH
15442: LD_INT 23
15444: PUSH
15445: LD_INT 25
15447: PUSH
15448: LD_INT 26
15450: PUSH
15451: LD_INT 30
15453: PUSH
15454: LD_INT 31
15456: PUSH
15457: LD_INT 32
15459: PUSH
15460: LD_INT 36
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: PUSH
15485: LD_INT 101
15487: PUSH
15488: LD_INT 102
15490: PUSH
15491: LD_INT 103
15493: PUSH
15494: LD_INT 105
15496: PUSH
15497: LD_INT 106
15499: PUSH
15500: LD_INT 108
15502: PUSH
15503: LD_INT 109
15505: PUSH
15506: LD_INT 112
15508: PUSH
15509: LD_INT 116
15511: PUSH
15512: LD_INT 117
15514: PUSH
15515: LD_INT 118
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: ST_TO_ADDR
15535: GO 17790
15537: LD_INT 9
15539: DOUBLE
15540: EQUAL
15541: IFTRUE 15545
15543: GO 15693
15545: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15546: LD_ADDR_VAR 0 2
15550: PUSH
15551: LD_INT 2
15553: PUSH
15554: LD_INT 4
15556: PUSH
15557: LD_INT 5
15559: PUSH
15560: LD_INT 6
15562: PUSH
15563: LD_INT 7
15565: PUSH
15566: LD_INT 8
15568: PUSH
15569: LD_INT 11
15571: PUSH
15572: LD_INT 12
15574: PUSH
15575: LD_INT 15
15577: PUSH
15578: LD_INT 16
15580: PUSH
15581: LD_INT 20
15583: PUSH
15584: LD_INT 21
15586: PUSH
15587: LD_INT 22
15589: PUSH
15590: LD_INT 23
15592: PUSH
15593: LD_INT 25
15595: PUSH
15596: LD_INT 26
15598: PUSH
15599: LD_INT 28
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: LD_INT 31
15607: PUSH
15608: LD_INT 32
15610: PUSH
15611: LD_INT 36
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 101
15639: PUSH
15640: LD_INT 102
15642: PUSH
15643: LD_INT 103
15645: PUSH
15646: LD_INT 105
15648: PUSH
15649: LD_INT 106
15651: PUSH
15652: LD_INT 108
15654: PUSH
15655: LD_INT 109
15657: PUSH
15658: LD_INT 112
15660: PUSH
15661: LD_INT 114
15663: PUSH
15664: LD_INT 116
15666: PUSH
15667: LD_INT 117
15669: PUSH
15670: LD_INT 118
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: ST_TO_ADDR
15691: GO 17790
15693: LD_INT 10
15695: DOUBLE
15696: EQUAL
15697: IFTRUE 15701
15699: GO 15897
15701: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15702: LD_ADDR_VAR 0 2
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: LD_INT 4
15712: PUSH
15713: LD_INT 5
15715: PUSH
15716: LD_INT 6
15718: PUSH
15719: LD_INT 7
15721: PUSH
15722: LD_INT 8
15724: PUSH
15725: LD_INT 9
15727: PUSH
15728: LD_INT 10
15730: PUSH
15731: LD_INT 11
15733: PUSH
15734: LD_INT 12
15736: PUSH
15737: LD_INT 13
15739: PUSH
15740: LD_INT 14
15742: PUSH
15743: LD_INT 15
15745: PUSH
15746: LD_INT 16
15748: PUSH
15749: LD_INT 17
15751: PUSH
15752: LD_INT 18
15754: PUSH
15755: LD_INT 19
15757: PUSH
15758: LD_INT 20
15760: PUSH
15761: LD_INT 21
15763: PUSH
15764: LD_INT 22
15766: PUSH
15767: LD_INT 23
15769: PUSH
15770: LD_INT 24
15772: PUSH
15773: LD_INT 25
15775: PUSH
15776: LD_INT 26
15778: PUSH
15779: LD_INT 28
15781: PUSH
15782: LD_INT 30
15784: PUSH
15785: LD_INT 31
15787: PUSH
15788: LD_INT 32
15790: PUSH
15791: LD_INT 36
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: PUSH
15825: LD_INT 101
15827: PUSH
15828: LD_INT 102
15830: PUSH
15831: LD_INT 103
15833: PUSH
15834: LD_INT 104
15836: PUSH
15837: LD_INT 105
15839: PUSH
15840: LD_INT 106
15842: PUSH
15843: LD_INT 107
15845: PUSH
15846: LD_INT 108
15848: PUSH
15849: LD_INT 109
15851: PUSH
15852: LD_INT 110
15854: PUSH
15855: LD_INT 111
15857: PUSH
15858: LD_INT 112
15860: PUSH
15861: LD_INT 114
15863: PUSH
15864: LD_INT 116
15866: PUSH
15867: LD_INT 117
15869: PUSH
15870: LD_INT 118
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 17790
15897: LD_INT 11
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 16109
15905: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 2
15913: PUSH
15914: LD_INT 3
15916: PUSH
15917: LD_INT 4
15919: PUSH
15920: LD_INT 5
15922: PUSH
15923: LD_INT 6
15925: PUSH
15926: LD_INT 7
15928: PUSH
15929: LD_INT 8
15931: PUSH
15932: LD_INT 9
15934: PUSH
15935: LD_INT 10
15937: PUSH
15938: LD_INT 11
15940: PUSH
15941: LD_INT 12
15943: PUSH
15944: LD_INT 13
15946: PUSH
15947: LD_INT 14
15949: PUSH
15950: LD_INT 15
15952: PUSH
15953: LD_INT 16
15955: PUSH
15956: LD_INT 17
15958: PUSH
15959: LD_INT 18
15961: PUSH
15962: LD_INT 19
15964: PUSH
15965: LD_INT 20
15967: PUSH
15968: LD_INT 21
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_INT 23
15976: PUSH
15977: LD_INT 24
15979: PUSH
15980: LD_INT 25
15982: PUSH
15983: LD_INT 26
15985: PUSH
15986: LD_INT 28
15988: PUSH
15989: LD_INT 30
15991: PUSH
15992: LD_INT 31
15994: PUSH
15995: LD_INT 32
15997: PUSH
15998: LD_INT 34
16000: PUSH
16001: LD_INT 36
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 101
16039: PUSH
16040: LD_INT 102
16042: PUSH
16043: LD_INT 103
16045: PUSH
16046: LD_INT 104
16048: PUSH
16049: LD_INT 105
16051: PUSH
16052: LD_INT 106
16054: PUSH
16055: LD_INT 107
16057: PUSH
16058: LD_INT 108
16060: PUSH
16061: LD_INT 109
16063: PUSH
16064: LD_INT 110
16066: PUSH
16067: LD_INT 111
16069: PUSH
16070: LD_INT 112
16072: PUSH
16073: LD_INT 114
16075: PUSH
16076: LD_INT 116
16078: PUSH
16079: LD_INT 117
16081: PUSH
16082: LD_INT 118
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: ST_TO_ADDR
16107: GO 17790
16109: LD_INT 12
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16337
16117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16118: LD_ADDR_VAR 0 2
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: LD_INT 2
16128: PUSH
16129: LD_INT 3
16131: PUSH
16132: LD_INT 4
16134: PUSH
16135: LD_INT 5
16137: PUSH
16138: LD_INT 6
16140: PUSH
16141: LD_INT 7
16143: PUSH
16144: LD_INT 8
16146: PUSH
16147: LD_INT 9
16149: PUSH
16150: LD_INT 10
16152: PUSH
16153: LD_INT 11
16155: PUSH
16156: LD_INT 12
16158: PUSH
16159: LD_INT 13
16161: PUSH
16162: LD_INT 14
16164: PUSH
16165: LD_INT 15
16167: PUSH
16168: LD_INT 16
16170: PUSH
16171: LD_INT 17
16173: PUSH
16174: LD_INT 18
16176: PUSH
16177: LD_INT 19
16179: PUSH
16180: LD_INT 20
16182: PUSH
16183: LD_INT 21
16185: PUSH
16186: LD_INT 22
16188: PUSH
16189: LD_INT 23
16191: PUSH
16192: LD_INT 24
16194: PUSH
16195: LD_INT 25
16197: PUSH
16198: LD_INT 26
16200: PUSH
16201: LD_INT 27
16203: PUSH
16204: LD_INT 28
16206: PUSH
16207: LD_INT 30
16209: PUSH
16210: LD_INT 31
16212: PUSH
16213: LD_INT 32
16215: PUSH
16216: LD_INT 33
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 36
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 101
16263: PUSH
16264: LD_INT 102
16266: PUSH
16267: LD_INT 103
16269: PUSH
16270: LD_INT 104
16272: PUSH
16273: LD_INT 105
16275: PUSH
16276: LD_INT 106
16278: PUSH
16279: LD_INT 107
16281: PUSH
16282: LD_INT 108
16284: PUSH
16285: LD_INT 109
16287: PUSH
16288: LD_INT 110
16290: PUSH
16291: LD_INT 111
16293: PUSH
16294: LD_INT 112
16296: PUSH
16297: LD_INT 113
16299: PUSH
16300: LD_INT 114
16302: PUSH
16303: LD_INT 116
16305: PUSH
16306: LD_INT 117
16308: PUSH
16309: LD_INT 118
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: ST_TO_ADDR
16335: GO 17790
16337: LD_INT 13
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16553
16345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16346: LD_ADDR_VAR 0 2
16350: PUSH
16351: LD_INT 1
16353: PUSH
16354: LD_INT 2
16356: PUSH
16357: LD_INT 3
16359: PUSH
16360: LD_INT 4
16362: PUSH
16363: LD_INT 5
16365: PUSH
16366: LD_INT 8
16368: PUSH
16369: LD_INT 9
16371: PUSH
16372: LD_INT 10
16374: PUSH
16375: LD_INT 11
16377: PUSH
16378: LD_INT 12
16380: PUSH
16381: LD_INT 14
16383: PUSH
16384: LD_INT 15
16386: PUSH
16387: LD_INT 16
16389: PUSH
16390: LD_INT 17
16392: PUSH
16393: LD_INT 18
16395: PUSH
16396: LD_INT 19
16398: PUSH
16399: LD_INT 20
16401: PUSH
16402: LD_INT 21
16404: PUSH
16405: LD_INT 22
16407: PUSH
16408: LD_INT 23
16410: PUSH
16411: LD_INT 24
16413: PUSH
16414: LD_INT 25
16416: PUSH
16417: LD_INT 26
16419: PUSH
16420: LD_INT 27
16422: PUSH
16423: LD_INT 28
16425: PUSH
16426: LD_INT 30
16428: PUSH
16429: LD_INT 31
16431: PUSH
16432: LD_INT 32
16434: PUSH
16435: LD_INT 33
16437: PUSH
16438: LD_INT 34
16440: PUSH
16441: LD_INT 36
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 101
16479: PUSH
16480: LD_INT 102
16482: PUSH
16483: LD_INT 103
16485: PUSH
16486: LD_INT 104
16488: PUSH
16489: LD_INT 105
16491: PUSH
16492: LD_INT 106
16494: PUSH
16495: LD_INT 107
16497: PUSH
16498: LD_INT 108
16500: PUSH
16501: LD_INT 109
16503: PUSH
16504: LD_INT 110
16506: PUSH
16507: LD_INT 111
16509: PUSH
16510: LD_INT 112
16512: PUSH
16513: LD_INT 113
16515: PUSH
16516: LD_INT 114
16518: PUSH
16519: LD_INT 116
16521: PUSH
16522: LD_INT 117
16524: PUSH
16525: LD_INT 118
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: ST_TO_ADDR
16551: GO 17790
16553: LD_INT 14
16555: DOUBLE
16556: EQUAL
16557: IFTRUE 16561
16559: GO 16785
16561: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16562: LD_ADDR_VAR 0 2
16566: PUSH
16567: LD_INT 1
16569: PUSH
16570: LD_INT 2
16572: PUSH
16573: LD_INT 3
16575: PUSH
16576: LD_INT 4
16578: PUSH
16579: LD_INT 5
16581: PUSH
16582: LD_INT 6
16584: PUSH
16585: LD_INT 7
16587: PUSH
16588: LD_INT 8
16590: PUSH
16591: LD_INT 9
16593: PUSH
16594: LD_INT 10
16596: PUSH
16597: LD_INT 11
16599: PUSH
16600: LD_INT 12
16602: PUSH
16603: LD_INT 13
16605: PUSH
16606: LD_INT 14
16608: PUSH
16609: LD_INT 15
16611: PUSH
16612: LD_INT 16
16614: PUSH
16615: LD_INT 17
16617: PUSH
16618: LD_INT 18
16620: PUSH
16621: LD_INT 19
16623: PUSH
16624: LD_INT 20
16626: PUSH
16627: LD_INT 21
16629: PUSH
16630: LD_INT 22
16632: PUSH
16633: LD_INT 23
16635: PUSH
16636: LD_INT 24
16638: PUSH
16639: LD_INT 25
16641: PUSH
16642: LD_INT 26
16644: PUSH
16645: LD_INT 27
16647: PUSH
16648: LD_INT 28
16650: PUSH
16651: LD_INT 29
16653: PUSH
16654: LD_INT 30
16656: PUSH
16657: LD_INT 31
16659: PUSH
16660: LD_INT 32
16662: PUSH
16663: LD_INT 33
16665: PUSH
16666: LD_INT 34
16668: PUSH
16669: LD_INT 36
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: PUSH
16709: LD_INT 101
16711: PUSH
16712: LD_INT 102
16714: PUSH
16715: LD_INT 103
16717: PUSH
16718: LD_INT 104
16720: PUSH
16721: LD_INT 105
16723: PUSH
16724: LD_INT 106
16726: PUSH
16727: LD_INT 107
16729: PUSH
16730: LD_INT 108
16732: PUSH
16733: LD_INT 109
16735: PUSH
16736: LD_INT 110
16738: PUSH
16739: LD_INT 111
16741: PUSH
16742: LD_INT 112
16744: PUSH
16745: LD_INT 113
16747: PUSH
16748: LD_INT 114
16750: PUSH
16751: LD_INT 116
16753: PUSH
16754: LD_INT 117
16756: PUSH
16757: LD_INT 118
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: ST_TO_ADDR
16783: GO 17790
16785: LD_INT 15
16787: DOUBLE
16788: EQUAL
16789: IFTRUE 16793
16791: GO 17017
16793: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16794: LD_ADDR_VAR 0 2
16798: PUSH
16799: LD_INT 1
16801: PUSH
16802: LD_INT 2
16804: PUSH
16805: LD_INT 3
16807: PUSH
16808: LD_INT 4
16810: PUSH
16811: LD_INT 5
16813: PUSH
16814: LD_INT 6
16816: PUSH
16817: LD_INT 7
16819: PUSH
16820: LD_INT 8
16822: PUSH
16823: LD_INT 9
16825: PUSH
16826: LD_INT 10
16828: PUSH
16829: LD_INT 11
16831: PUSH
16832: LD_INT 12
16834: PUSH
16835: LD_INT 13
16837: PUSH
16838: LD_INT 14
16840: PUSH
16841: LD_INT 15
16843: PUSH
16844: LD_INT 16
16846: PUSH
16847: LD_INT 17
16849: PUSH
16850: LD_INT 18
16852: PUSH
16853: LD_INT 19
16855: PUSH
16856: LD_INT 20
16858: PUSH
16859: LD_INT 21
16861: PUSH
16862: LD_INT 22
16864: PUSH
16865: LD_INT 23
16867: PUSH
16868: LD_INT 24
16870: PUSH
16871: LD_INT 25
16873: PUSH
16874: LD_INT 26
16876: PUSH
16877: LD_INT 27
16879: PUSH
16880: LD_INT 28
16882: PUSH
16883: LD_INT 29
16885: PUSH
16886: LD_INT 30
16888: PUSH
16889: LD_INT 31
16891: PUSH
16892: LD_INT 32
16894: PUSH
16895: LD_INT 33
16897: PUSH
16898: LD_INT 34
16900: PUSH
16901: LD_INT 36
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 101
16943: PUSH
16944: LD_INT 102
16946: PUSH
16947: LD_INT 103
16949: PUSH
16950: LD_INT 104
16952: PUSH
16953: LD_INT 105
16955: PUSH
16956: LD_INT 106
16958: PUSH
16959: LD_INT 107
16961: PUSH
16962: LD_INT 108
16964: PUSH
16965: LD_INT 109
16967: PUSH
16968: LD_INT 110
16970: PUSH
16971: LD_INT 111
16973: PUSH
16974: LD_INT 112
16976: PUSH
16977: LD_INT 113
16979: PUSH
16980: LD_INT 114
16982: PUSH
16983: LD_INT 116
16985: PUSH
16986: LD_INT 117
16988: PUSH
16989: LD_INT 118
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: ST_TO_ADDR
17015: GO 17790
17017: LD_INT 16
17019: DOUBLE
17020: EQUAL
17021: IFTRUE 17025
17023: GO 17161
17025: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17026: LD_ADDR_VAR 0 2
17030: PUSH
17031: LD_INT 2
17033: PUSH
17034: LD_INT 4
17036: PUSH
17037: LD_INT 5
17039: PUSH
17040: LD_INT 7
17042: PUSH
17043: LD_INT 11
17045: PUSH
17046: LD_INT 12
17048: PUSH
17049: LD_INT 15
17051: PUSH
17052: LD_INT 16
17054: PUSH
17055: LD_INT 20
17057: PUSH
17058: LD_INT 21
17060: PUSH
17061: LD_INT 22
17063: PUSH
17064: LD_INT 23
17066: PUSH
17067: LD_INT 25
17069: PUSH
17070: LD_INT 26
17072: PUSH
17073: LD_INT 30
17075: PUSH
17076: LD_INT 31
17078: PUSH
17079: LD_INT 32
17081: PUSH
17082: LD_INT 33
17084: PUSH
17085: LD_INT 34
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 101
17111: PUSH
17112: LD_INT 102
17114: PUSH
17115: LD_INT 103
17117: PUSH
17118: LD_INT 106
17120: PUSH
17121: LD_INT 108
17123: PUSH
17124: LD_INT 112
17126: PUSH
17127: LD_INT 113
17129: PUSH
17130: LD_INT 114
17132: PUSH
17133: LD_INT 116
17135: PUSH
17136: LD_INT 117
17138: PUSH
17139: LD_INT 118
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: ST_TO_ADDR
17159: GO 17790
17161: LD_INT 17
17163: DOUBLE
17164: EQUAL
17165: IFTRUE 17169
17167: GO 17393
17169: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17170: LD_ADDR_VAR 0 2
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: LD_INT 3
17183: PUSH
17184: LD_INT 4
17186: PUSH
17187: LD_INT 5
17189: PUSH
17190: LD_INT 6
17192: PUSH
17193: LD_INT 7
17195: PUSH
17196: LD_INT 8
17198: PUSH
17199: LD_INT 9
17201: PUSH
17202: LD_INT 10
17204: PUSH
17205: LD_INT 11
17207: PUSH
17208: LD_INT 12
17210: PUSH
17211: LD_INT 13
17213: PUSH
17214: LD_INT 14
17216: PUSH
17217: LD_INT 15
17219: PUSH
17220: LD_INT 16
17222: PUSH
17223: LD_INT 17
17225: PUSH
17226: LD_INT 18
17228: PUSH
17229: LD_INT 19
17231: PUSH
17232: LD_INT 20
17234: PUSH
17235: LD_INT 21
17237: PUSH
17238: LD_INT 22
17240: PUSH
17241: LD_INT 23
17243: PUSH
17244: LD_INT 24
17246: PUSH
17247: LD_INT 25
17249: PUSH
17250: LD_INT 26
17252: PUSH
17253: LD_INT 27
17255: PUSH
17256: LD_INT 28
17258: PUSH
17259: LD_INT 29
17261: PUSH
17262: LD_INT 30
17264: PUSH
17265: LD_INT 31
17267: PUSH
17268: LD_INT 32
17270: PUSH
17271: LD_INT 33
17273: PUSH
17274: LD_INT 34
17276: PUSH
17277: LD_INT 36
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 101
17319: PUSH
17320: LD_INT 102
17322: PUSH
17323: LD_INT 103
17325: PUSH
17326: LD_INT 104
17328: PUSH
17329: LD_INT 105
17331: PUSH
17332: LD_INT 106
17334: PUSH
17335: LD_INT 107
17337: PUSH
17338: LD_INT 108
17340: PUSH
17341: LD_INT 109
17343: PUSH
17344: LD_INT 110
17346: PUSH
17347: LD_INT 111
17349: PUSH
17350: LD_INT 112
17352: PUSH
17353: LD_INT 113
17355: PUSH
17356: LD_INT 114
17358: PUSH
17359: LD_INT 116
17361: PUSH
17362: LD_INT 117
17364: PUSH
17365: LD_INT 118
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: LIST
17380: LIST
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: ST_TO_ADDR
17391: GO 17790
17393: LD_INT 18
17395: DOUBLE
17396: EQUAL
17397: IFTRUE 17401
17399: GO 17549
17401: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17402: LD_ADDR_VAR 0 2
17406: PUSH
17407: LD_INT 2
17409: PUSH
17410: LD_INT 4
17412: PUSH
17413: LD_INT 5
17415: PUSH
17416: LD_INT 7
17418: PUSH
17419: LD_INT 11
17421: PUSH
17422: LD_INT 12
17424: PUSH
17425: LD_INT 15
17427: PUSH
17428: LD_INT 16
17430: PUSH
17431: LD_INT 20
17433: PUSH
17434: LD_INT 21
17436: PUSH
17437: LD_INT 22
17439: PUSH
17440: LD_INT 23
17442: PUSH
17443: LD_INT 25
17445: PUSH
17446: LD_INT 26
17448: PUSH
17449: LD_INT 30
17451: PUSH
17452: LD_INT 31
17454: PUSH
17455: LD_INT 32
17457: PUSH
17458: LD_INT 33
17460: PUSH
17461: LD_INT 34
17463: PUSH
17464: LD_INT 35
17466: PUSH
17467: LD_INT 36
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 101
17495: PUSH
17496: LD_INT 102
17498: PUSH
17499: LD_INT 103
17501: PUSH
17502: LD_INT 106
17504: PUSH
17505: LD_INT 108
17507: PUSH
17508: LD_INT 112
17510: PUSH
17511: LD_INT 113
17513: PUSH
17514: LD_INT 114
17516: PUSH
17517: LD_INT 115
17519: PUSH
17520: LD_INT 116
17522: PUSH
17523: LD_INT 117
17525: PUSH
17526: LD_INT 118
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: ST_TO_ADDR
17547: GO 17790
17549: LD_INT 19
17551: DOUBLE
17552: EQUAL
17553: IFTRUE 17557
17555: GO 17789
17557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: LD_INT 2
17568: PUSH
17569: LD_INT 3
17571: PUSH
17572: LD_INT 4
17574: PUSH
17575: LD_INT 5
17577: PUSH
17578: LD_INT 6
17580: PUSH
17581: LD_INT 7
17583: PUSH
17584: LD_INT 8
17586: PUSH
17587: LD_INT 9
17589: PUSH
17590: LD_INT 10
17592: PUSH
17593: LD_INT 11
17595: PUSH
17596: LD_INT 12
17598: PUSH
17599: LD_INT 13
17601: PUSH
17602: LD_INT 14
17604: PUSH
17605: LD_INT 15
17607: PUSH
17608: LD_INT 16
17610: PUSH
17611: LD_INT 17
17613: PUSH
17614: LD_INT 18
17616: PUSH
17617: LD_INT 19
17619: PUSH
17620: LD_INT 20
17622: PUSH
17623: LD_INT 21
17625: PUSH
17626: LD_INT 22
17628: PUSH
17629: LD_INT 23
17631: PUSH
17632: LD_INT 24
17634: PUSH
17635: LD_INT 25
17637: PUSH
17638: LD_INT 26
17640: PUSH
17641: LD_INT 27
17643: PUSH
17644: LD_INT 28
17646: PUSH
17647: LD_INT 29
17649: PUSH
17650: LD_INT 30
17652: PUSH
17653: LD_INT 31
17655: PUSH
17656: LD_INT 32
17658: PUSH
17659: LD_INT 33
17661: PUSH
17662: LD_INT 34
17664: PUSH
17665: LD_INT 35
17667: PUSH
17668: LD_INT 36
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: PUSH
17709: LD_INT 101
17711: PUSH
17712: LD_INT 102
17714: PUSH
17715: LD_INT 103
17717: PUSH
17718: LD_INT 104
17720: PUSH
17721: LD_INT 105
17723: PUSH
17724: LD_INT 106
17726: PUSH
17727: LD_INT 107
17729: PUSH
17730: LD_INT 108
17732: PUSH
17733: LD_INT 109
17735: PUSH
17736: LD_INT 110
17738: PUSH
17739: LD_INT 111
17741: PUSH
17742: LD_INT 112
17744: PUSH
17745: LD_INT 113
17747: PUSH
17748: LD_INT 114
17750: PUSH
17751: LD_INT 115
17753: PUSH
17754: LD_INT 116
17756: PUSH
17757: LD_INT 117
17759: PUSH
17760: LD_INT 118
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: ST_TO_ADDR
17787: GO 17790
17789: POP
// end else
17790: GO 18021
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17792: LD_ADDR_VAR 0 2
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: LD_INT 2
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: LD_INT 4
17808: PUSH
17809: LD_INT 5
17811: PUSH
17812: LD_INT 6
17814: PUSH
17815: LD_INT 7
17817: PUSH
17818: LD_INT 8
17820: PUSH
17821: LD_INT 9
17823: PUSH
17824: LD_INT 10
17826: PUSH
17827: LD_INT 11
17829: PUSH
17830: LD_INT 12
17832: PUSH
17833: LD_INT 13
17835: PUSH
17836: LD_INT 14
17838: PUSH
17839: LD_INT 15
17841: PUSH
17842: LD_INT 16
17844: PUSH
17845: LD_INT 17
17847: PUSH
17848: LD_INT 18
17850: PUSH
17851: LD_INT 19
17853: PUSH
17854: LD_INT 20
17856: PUSH
17857: LD_INT 21
17859: PUSH
17860: LD_INT 22
17862: PUSH
17863: LD_INT 23
17865: PUSH
17866: LD_INT 24
17868: PUSH
17869: LD_INT 25
17871: PUSH
17872: LD_INT 26
17874: PUSH
17875: LD_INT 27
17877: PUSH
17878: LD_INT 28
17880: PUSH
17881: LD_INT 29
17883: PUSH
17884: LD_INT 30
17886: PUSH
17887: LD_INT 31
17889: PUSH
17890: LD_INT 32
17892: PUSH
17893: LD_INT 33
17895: PUSH
17896: LD_INT 34
17898: PUSH
17899: LD_INT 35
17901: PUSH
17902: LD_INT 36
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 101
17945: PUSH
17946: LD_INT 102
17948: PUSH
17949: LD_INT 103
17951: PUSH
17952: LD_INT 104
17954: PUSH
17955: LD_INT 105
17957: PUSH
17958: LD_INT 106
17960: PUSH
17961: LD_INT 107
17963: PUSH
17964: LD_INT 108
17966: PUSH
17967: LD_INT 109
17969: PUSH
17970: LD_INT 110
17972: PUSH
17973: LD_INT 111
17975: PUSH
17976: LD_INT 112
17978: PUSH
17979: LD_INT 113
17981: PUSH
17982: LD_INT 114
17984: PUSH
17985: LD_INT 115
17987: PUSH
17988: LD_INT 116
17990: PUSH
17991: LD_INT 117
17993: PUSH
17994: LD_INT 118
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: ST_TO_ADDR
// if result then
18021: LD_VAR 0 2
18025: IFFALSE 18811
// begin normal :=  ;
18027: LD_ADDR_VAR 0 5
18031: PUSH
18032: LD_STRING 
18034: ST_TO_ADDR
// hardcore :=  ;
18035: LD_ADDR_VAR 0 6
18039: PUSH
18040: LD_STRING 
18042: ST_TO_ADDR
// active :=  ;
18043: LD_ADDR_VAR 0 7
18047: PUSH
18048: LD_STRING 
18050: ST_TO_ADDR
// for i = 1 to normalCounter do
18051: LD_ADDR_VAR 0 8
18055: PUSH
18056: DOUBLE
18057: LD_INT 1
18059: DEC
18060: ST_TO_ADDR
18061: LD_EXP 34
18065: PUSH
18066: FOR_TO
18067: IFFALSE 18168
// begin tmp := 0 ;
18069: LD_ADDR_VAR 0 3
18073: PUSH
18074: LD_STRING 0
18076: ST_TO_ADDR
// if result [ 1 ] then
18077: LD_VAR 0 2
18081: PUSH
18082: LD_INT 1
18084: ARRAY
18085: IFFALSE 18150
// if result [ 1 ] [ 1 ] = i then
18087: LD_VAR 0 2
18091: PUSH
18092: LD_INT 1
18094: ARRAY
18095: PUSH
18096: LD_INT 1
18098: ARRAY
18099: PUSH
18100: LD_VAR 0 8
18104: EQUAL
18105: IFFALSE 18150
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18107: LD_ADDR_VAR 0 2
18111: PUSH
18112: LD_VAR 0 2
18116: PPUSH
18117: LD_INT 1
18119: PPUSH
18120: LD_VAR 0 2
18124: PUSH
18125: LD_INT 1
18127: ARRAY
18128: PPUSH
18129: LD_INT 1
18131: PPUSH
18132: CALL_OW 3
18136: PPUSH
18137: CALL_OW 1
18141: ST_TO_ADDR
// tmp := 1 ;
18142: LD_ADDR_VAR 0 3
18146: PUSH
18147: LD_STRING 1
18149: ST_TO_ADDR
// end ; normal := normal & tmp ;
18150: LD_ADDR_VAR 0 5
18154: PUSH
18155: LD_VAR 0 5
18159: PUSH
18160: LD_VAR 0 3
18164: STR
18165: ST_TO_ADDR
// end ;
18166: GO 18066
18168: POP
18169: POP
// for i = 1 to hardcoreCounter do
18170: LD_ADDR_VAR 0 8
18174: PUSH
18175: DOUBLE
18176: LD_INT 1
18178: DEC
18179: ST_TO_ADDR
18180: LD_EXP 35
18184: PUSH
18185: FOR_TO
18186: IFFALSE 18291
// begin tmp := 0 ;
18188: LD_ADDR_VAR 0 3
18192: PUSH
18193: LD_STRING 0
18195: ST_TO_ADDR
// if result [ 2 ] then
18196: LD_VAR 0 2
18200: PUSH
18201: LD_INT 2
18203: ARRAY
18204: IFFALSE 18273
// if result [ 2 ] [ 1 ] = 100 + i then
18206: LD_VAR 0 2
18210: PUSH
18211: LD_INT 2
18213: ARRAY
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PUSH
18219: LD_INT 100
18221: PUSH
18222: LD_VAR 0 8
18226: PLUS
18227: EQUAL
18228: IFFALSE 18273
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_VAR 0 2
18239: PPUSH
18240: LD_INT 2
18242: PPUSH
18243: LD_VAR 0 2
18247: PUSH
18248: LD_INT 2
18250: ARRAY
18251: PPUSH
18252: LD_INT 1
18254: PPUSH
18255: CALL_OW 3
18259: PPUSH
18260: CALL_OW 1
18264: ST_TO_ADDR
// tmp := 1 ;
18265: LD_ADDR_VAR 0 3
18269: PUSH
18270: LD_STRING 1
18272: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18273: LD_ADDR_VAR 0 6
18277: PUSH
18278: LD_VAR 0 6
18282: PUSH
18283: LD_VAR 0 3
18287: STR
18288: ST_TO_ADDR
// end ;
18289: GO 18185
18291: POP
18292: POP
// if isGameLoad then
18293: LD_VAR 0 1
18297: IFFALSE 18772
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18299: LD_ADDR_VAR 0 4
18303: PUSH
18304: LD_EXP 38
18308: PUSH
18309: LD_EXP 37
18313: PUSH
18314: LD_EXP 39
18318: PUSH
18319: LD_EXP 36
18323: PUSH
18324: LD_EXP 40
18328: PUSH
18329: LD_EXP 41
18333: PUSH
18334: LD_EXP 42
18338: PUSH
18339: LD_EXP 43
18343: PUSH
18344: LD_EXP 44
18348: PUSH
18349: LD_EXP 45
18353: PUSH
18354: LD_EXP 46
18358: PUSH
18359: LD_EXP 47
18363: PUSH
18364: LD_EXP 48
18368: PUSH
18369: LD_EXP 49
18373: PUSH
18374: LD_EXP 57
18378: PUSH
18379: LD_EXP 58
18383: PUSH
18384: LD_EXP 59
18388: PUSH
18389: LD_EXP 60
18393: PUSH
18394: LD_EXP 62
18398: PUSH
18399: LD_EXP 63
18403: PUSH
18404: LD_EXP 64
18408: PUSH
18409: LD_EXP 67
18413: PUSH
18414: LD_EXP 69
18418: PUSH
18419: LD_EXP 70
18423: PUSH
18424: LD_EXP 71
18428: PUSH
18429: LD_EXP 73
18433: PUSH
18434: LD_EXP 74
18438: PUSH
18439: LD_EXP 77
18443: PUSH
18444: LD_EXP 78
18448: PUSH
18449: LD_EXP 79
18453: PUSH
18454: LD_EXP 80
18458: PUSH
18459: LD_EXP 81
18463: PUSH
18464: LD_EXP 82
18468: PUSH
18469: LD_EXP 83
18473: PUSH
18474: LD_EXP 84
18478: PUSH
18479: LD_EXP 85
18483: PUSH
18484: LD_EXP 50
18488: PUSH
18489: LD_EXP 51
18493: PUSH
18494: LD_EXP 54
18498: PUSH
18499: LD_EXP 55
18503: PUSH
18504: LD_EXP 56
18508: PUSH
18509: LD_EXP 52
18513: PUSH
18514: LD_EXP 53
18518: PUSH
18519: LD_EXP 61
18523: PUSH
18524: LD_EXP 65
18528: PUSH
18529: LD_EXP 66
18533: PUSH
18534: LD_EXP 68
18538: PUSH
18539: LD_EXP 72
18543: PUSH
18544: LD_EXP 75
18548: PUSH
18549: LD_EXP 76
18553: PUSH
18554: LD_EXP 86
18558: PUSH
18559: LD_EXP 87
18563: PUSH
18564: LD_EXP 88
18568: PUSH
18569: LD_EXP 89
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: LIST
18629: ST_TO_ADDR
// tmp :=  ;
18630: LD_ADDR_VAR 0 3
18634: PUSH
18635: LD_STRING 
18637: ST_TO_ADDR
// for i = 1 to normalCounter do
18638: LD_ADDR_VAR 0 8
18642: PUSH
18643: DOUBLE
18644: LD_INT 1
18646: DEC
18647: ST_TO_ADDR
18648: LD_EXP 34
18652: PUSH
18653: FOR_TO
18654: IFFALSE 18690
// begin if flags [ i ] then
18656: LD_VAR 0 4
18660: PUSH
18661: LD_VAR 0 8
18665: ARRAY
18666: IFFALSE 18688
// tmp := tmp & i & ; ;
18668: LD_ADDR_VAR 0 3
18672: PUSH
18673: LD_VAR 0 3
18677: PUSH
18678: LD_VAR 0 8
18682: STR
18683: PUSH
18684: LD_STRING ;
18686: STR
18687: ST_TO_ADDR
// end ;
18688: GO 18653
18690: POP
18691: POP
// for i = 1 to hardcoreCounter do
18692: LD_ADDR_VAR 0 8
18696: PUSH
18697: DOUBLE
18698: LD_INT 1
18700: DEC
18701: ST_TO_ADDR
18702: LD_EXP 35
18706: PUSH
18707: FOR_TO
18708: IFFALSE 18754
// begin if flags [ normalCounter + i ] then
18710: LD_VAR 0 4
18714: PUSH
18715: LD_EXP 34
18719: PUSH
18720: LD_VAR 0 8
18724: PLUS
18725: ARRAY
18726: IFFALSE 18752
// tmp := tmp & ( 100 + i ) & ; ;
18728: LD_ADDR_VAR 0 3
18732: PUSH
18733: LD_VAR 0 3
18737: PUSH
18738: LD_INT 100
18740: PUSH
18741: LD_VAR 0 8
18745: PLUS
18746: STR
18747: PUSH
18748: LD_STRING ;
18750: STR
18751: ST_TO_ADDR
// end ;
18752: GO 18707
18754: POP
18755: POP
// if tmp then
18756: LD_VAR 0 3
18760: IFFALSE 18772
// active := tmp ;
18762: LD_ADDR_VAR 0 7
18766: PUSH
18767: LD_VAR 0 3
18771: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18772: LD_STRING getStreamItemsFromMission("
18774: PUSH
18775: LD_VAR 0 5
18779: STR
18780: PUSH
18781: LD_STRING ","
18783: STR
18784: PUSH
18785: LD_VAR 0 6
18789: STR
18790: PUSH
18791: LD_STRING ","
18793: STR
18794: PUSH
18795: LD_VAR 0 7
18799: STR
18800: PUSH
18801: LD_STRING ")
18803: STR
18804: PPUSH
18805: CALL_OW 559
// end else
18809: GO 18818
// ToLua ( getStreamItemsFromMission("","","") ) ;
18811: LD_STRING getStreamItemsFromMission("","","")
18813: PPUSH
18814: CALL_OW 559
// end ;
18818: LD_VAR 0 2
18822: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18823: LD_EXP 33
18827: PUSH
18828: LD_EXP 38
18832: AND
18833: IFFALSE 18957
18835: GO 18837
18837: DISABLE
18838: LD_INT 0
18840: PPUSH
18841: PPUSH
// begin enable ;
18842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18843: LD_ADDR_VAR 0 2
18847: PUSH
18848: LD_INT 22
18850: PUSH
18851: LD_OWVAR 2
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: LD_INT 34
18865: PUSH
18866: LD_INT 7
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PUSH
18873: LD_INT 34
18875: PUSH
18876: LD_INT 45
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PUSH
18883: LD_INT 34
18885: PUSH
18886: LD_INT 28
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PUSH
18893: LD_INT 34
18895: PUSH
18896: LD_INT 47
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PPUSH
18914: CALL_OW 69
18918: ST_TO_ADDR
// if not tmp then
18919: LD_VAR 0 2
18923: NOT
18924: IFFALSE 18928
// exit ;
18926: GO 18957
// for i in tmp do
18928: LD_ADDR_VAR 0 1
18932: PUSH
18933: LD_VAR 0 2
18937: PUSH
18938: FOR_IN
18939: IFFALSE 18955
// begin SetLives ( i , 0 ) ;
18941: LD_VAR 0 1
18945: PPUSH
18946: LD_INT 0
18948: PPUSH
18949: CALL_OW 234
// end ;
18953: GO 18938
18955: POP
18956: POP
// end ;
18957: PPOPN 2
18959: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18960: LD_EXP 33
18964: PUSH
18965: LD_EXP 39
18969: AND
18970: IFFALSE 19054
18972: GO 18974
18974: DISABLE
18975: LD_INT 0
18977: PPUSH
18978: PPUSH
// begin enable ;
18979: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18980: LD_ADDR_VAR 0 2
18984: PUSH
18985: LD_INT 22
18987: PUSH
18988: LD_OWVAR 2
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: PUSH
18997: LD_INT 32
18999: PUSH
19000: LD_INT 3
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 69
19015: ST_TO_ADDR
// if not tmp then
19016: LD_VAR 0 2
19020: NOT
19021: IFFALSE 19025
// exit ;
19023: GO 19054
// for i in tmp do
19025: LD_ADDR_VAR 0 1
19029: PUSH
19030: LD_VAR 0 2
19034: PUSH
19035: FOR_IN
19036: IFFALSE 19052
// begin SetLives ( i , 0 ) ;
19038: LD_VAR 0 1
19042: PPUSH
19043: LD_INT 0
19045: PPUSH
19046: CALL_OW 234
// end ;
19050: GO 19035
19052: POP
19053: POP
// end ;
19054: PPOPN 2
19056: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19057: LD_EXP 33
19061: PUSH
19062: LD_EXP 36
19066: AND
19067: IFFALSE 19160
19069: GO 19071
19071: DISABLE
19072: LD_INT 0
19074: PPUSH
// begin enable ;
19075: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19076: LD_ADDR_VAR 0 1
19080: PUSH
19081: LD_INT 22
19083: PUSH
19084: LD_OWVAR 2
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: LD_INT 25
19098: PUSH
19099: LD_INT 5
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 25
19108: PUSH
19109: LD_INT 9
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 25
19118: PUSH
19119: LD_INT 8
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PPUSH
19136: CALL_OW 69
19140: PUSH
19141: FOR_IN
19142: IFFALSE 19158
// begin SetClass ( i , 1 ) ;
19144: LD_VAR 0 1
19148: PPUSH
19149: LD_INT 1
19151: PPUSH
19152: CALL_OW 336
// end ;
19156: GO 19141
19158: POP
19159: POP
// end ;
19160: PPOPN 1
19162: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19163: LD_EXP 33
19167: PUSH
19168: LD_EXP 37
19172: AND
19173: PUSH
19174: LD_OWVAR 65
19178: PUSH
19179: LD_INT 7
19181: LESS
19182: AND
19183: IFFALSE 19197
19185: GO 19187
19187: DISABLE
// begin enable ;
19188: ENABLE
// game_speed := 7 ;
19189: LD_ADDR_OWVAR 65
19193: PUSH
19194: LD_INT 7
19196: ST_TO_ADDR
// end ;
19197: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19198: LD_EXP 33
19202: PUSH
19203: LD_EXP 40
19207: AND
19208: IFFALSE 19410
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19218: LD_ADDR_VAR 0 3
19222: PUSH
19223: LD_INT 81
19225: PUSH
19226: LD_OWVAR 2
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: PUSH
19235: LD_INT 21
19237: PUSH
19238: LD_INT 1
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PPUSH
19249: CALL_OW 69
19253: ST_TO_ADDR
// if not tmp then
19254: LD_VAR 0 3
19258: NOT
19259: IFFALSE 19263
// exit ;
19261: GO 19410
// if tmp > 5 then
19263: LD_VAR 0 3
19267: PUSH
19268: LD_INT 5
19270: GREATER
19271: IFFALSE 19283
// k := 5 else
19273: LD_ADDR_VAR 0 2
19277: PUSH
19278: LD_INT 5
19280: ST_TO_ADDR
19281: GO 19293
// k := tmp ;
19283: LD_ADDR_VAR 0 2
19287: PUSH
19288: LD_VAR 0 3
19292: ST_TO_ADDR
// for i := 1 to k do
19293: LD_ADDR_VAR 0 1
19297: PUSH
19298: DOUBLE
19299: LD_INT 1
19301: DEC
19302: ST_TO_ADDR
19303: LD_VAR 0 2
19307: PUSH
19308: FOR_TO
19309: IFFALSE 19408
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19311: LD_VAR 0 3
19315: PUSH
19316: LD_VAR 0 1
19320: ARRAY
19321: PPUSH
19322: LD_VAR 0 1
19326: PUSH
19327: LD_INT 4
19329: MOD
19330: PUSH
19331: LD_INT 1
19333: PLUS
19334: PPUSH
19335: CALL_OW 259
19339: PUSH
19340: LD_INT 10
19342: LESS
19343: IFFALSE 19406
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19345: LD_VAR 0 3
19349: PUSH
19350: LD_VAR 0 1
19354: ARRAY
19355: PPUSH
19356: LD_VAR 0 1
19360: PUSH
19361: LD_INT 4
19363: MOD
19364: PUSH
19365: LD_INT 1
19367: PLUS
19368: PPUSH
19369: LD_VAR 0 3
19373: PUSH
19374: LD_VAR 0 1
19378: ARRAY
19379: PPUSH
19380: LD_VAR 0 1
19384: PUSH
19385: LD_INT 4
19387: MOD
19388: PUSH
19389: LD_INT 1
19391: PLUS
19392: PPUSH
19393: CALL_OW 259
19397: PUSH
19398: LD_INT 1
19400: PLUS
19401: PPUSH
19402: CALL_OW 237
19406: GO 19308
19408: POP
19409: POP
// end ;
19410: PPOPN 3
19412: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19413: LD_EXP 33
19417: PUSH
19418: LD_EXP 41
19422: AND
19423: IFFALSE 19443
19425: GO 19427
19427: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19428: LD_INT 4
19430: PPUSH
19431: LD_OWVAR 2
19435: PPUSH
19436: LD_INT 0
19438: PPUSH
19439: CALL_OW 324
19443: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19444: LD_EXP 33
19448: PUSH
19449: LD_EXP 70
19453: AND
19454: IFFALSE 19474
19456: GO 19458
19458: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19459: LD_INT 19
19461: PPUSH
19462: LD_OWVAR 2
19466: PPUSH
19467: LD_INT 0
19469: PPUSH
19470: CALL_OW 324
19474: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19475: LD_EXP 33
19479: PUSH
19480: LD_EXP 42
19484: AND
19485: IFFALSE 19587
19487: GO 19489
19489: DISABLE
19490: LD_INT 0
19492: PPUSH
19493: PPUSH
// begin enable ;
19494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19495: LD_ADDR_VAR 0 2
19499: PUSH
19500: LD_INT 22
19502: PUSH
19503: LD_OWVAR 2
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 34
19517: PUSH
19518: LD_INT 11
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 34
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: LIST
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PPUSH
19544: CALL_OW 69
19548: ST_TO_ADDR
// if not tmp then
19549: LD_VAR 0 2
19553: NOT
19554: IFFALSE 19558
// exit ;
19556: GO 19587
// for i in tmp do
19558: LD_ADDR_VAR 0 1
19562: PUSH
19563: LD_VAR 0 2
19567: PUSH
19568: FOR_IN
19569: IFFALSE 19585
// begin SetLives ( i , 0 ) ;
19571: LD_VAR 0 1
19575: PPUSH
19576: LD_INT 0
19578: PPUSH
19579: CALL_OW 234
// end ;
19583: GO 19568
19585: POP
19586: POP
// end ;
19587: PPOPN 2
19589: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19590: LD_EXP 33
19594: PUSH
19595: LD_EXP 43
19599: AND
19600: IFFALSE 19620
19602: GO 19604
19604: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19605: LD_INT 32
19607: PPUSH
19608: LD_OWVAR 2
19612: PPUSH
19613: LD_INT 0
19615: PPUSH
19616: CALL_OW 324
19620: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19621: LD_EXP 33
19625: PUSH
19626: LD_EXP 44
19630: AND
19631: IFFALSE 19812
19633: GO 19635
19635: DISABLE
19636: LD_INT 0
19638: PPUSH
19639: PPUSH
19640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19641: LD_ADDR_VAR 0 2
19645: PUSH
19646: LD_INT 22
19648: PUSH
19649: LD_OWVAR 2
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PUSH
19658: LD_INT 33
19660: PUSH
19661: LD_INT 3
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PPUSH
19672: CALL_OW 69
19676: ST_TO_ADDR
// if not tmp then
19677: LD_VAR 0 2
19681: NOT
19682: IFFALSE 19686
// exit ;
19684: GO 19812
// side := 0 ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: LD_INT 0
19693: ST_TO_ADDR
// for i := 1 to 8 do
19694: LD_ADDR_VAR 0 1
19698: PUSH
19699: DOUBLE
19700: LD_INT 1
19702: DEC
19703: ST_TO_ADDR
19704: LD_INT 8
19706: PUSH
19707: FOR_TO
19708: IFFALSE 19756
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19710: LD_OWVAR 2
19714: PUSH
19715: LD_VAR 0 1
19719: NONEQUAL
19720: PUSH
19721: LD_OWVAR 2
19725: PPUSH
19726: LD_VAR 0 1
19730: PPUSH
19731: CALL_OW 81
19735: PUSH
19736: LD_INT 2
19738: EQUAL
19739: AND
19740: IFFALSE 19754
// begin side := i ;
19742: LD_ADDR_VAR 0 3
19746: PUSH
19747: LD_VAR 0 1
19751: ST_TO_ADDR
// break ;
19752: GO 19756
// end ;
19754: GO 19707
19756: POP
19757: POP
// if not side then
19758: LD_VAR 0 3
19762: NOT
19763: IFFALSE 19767
// exit ;
19765: GO 19812
// for i := 1 to tmp do
19767: LD_ADDR_VAR 0 1
19771: PUSH
19772: DOUBLE
19773: LD_INT 1
19775: DEC
19776: ST_TO_ADDR
19777: LD_VAR 0 2
19781: PUSH
19782: FOR_TO
19783: IFFALSE 19810
// if Prob ( 60 ) then
19785: LD_INT 60
19787: PPUSH
19788: CALL_OW 13
19792: IFFALSE 19808
// SetSide ( i , side ) ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_VAR 0 3
19803: PPUSH
19804: CALL_OW 235
19808: GO 19782
19810: POP
19811: POP
// end ;
19812: PPOPN 3
19814: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19815: LD_EXP 33
19819: PUSH
19820: LD_EXP 46
19824: AND
19825: IFFALSE 19944
19827: GO 19829
19829: DISABLE
19830: LD_INT 0
19832: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19833: LD_ADDR_VAR 0 1
19837: PUSH
19838: LD_INT 22
19840: PUSH
19841: LD_OWVAR 2
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 21
19852: PUSH
19853: LD_INT 1
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 3
19862: PUSH
19863: LD_INT 23
19865: PUSH
19866: LD_INT 0
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: LIST
19881: PPUSH
19882: CALL_OW 69
19886: PUSH
19887: FOR_IN
19888: IFFALSE 19942
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19890: LD_VAR 0 1
19894: PPUSH
19895: CALL_OW 257
19899: PUSH
19900: LD_INT 1
19902: PUSH
19903: LD_INT 2
19905: PUSH
19906: LD_INT 3
19908: PUSH
19909: LD_INT 4
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: IN
19918: IFFALSE 19940
// SetClass ( un , rand ( 1 , 4 ) ) ;
19920: LD_VAR 0 1
19924: PPUSH
19925: LD_INT 1
19927: PPUSH
19928: LD_INT 4
19930: PPUSH
19931: CALL_OW 12
19935: PPUSH
19936: CALL_OW 336
19940: GO 19887
19942: POP
19943: POP
// end ;
19944: PPOPN 1
19946: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19947: LD_EXP 33
19951: PUSH
19952: LD_EXP 45
19956: AND
19957: IFFALSE 20036
19959: GO 19961
19961: DISABLE
19962: LD_INT 0
19964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19965: LD_ADDR_VAR 0 1
19969: PUSH
19970: LD_INT 22
19972: PUSH
19973: LD_OWVAR 2
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 21
19984: PUSH
19985: LD_INT 3
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: PPUSH
19996: CALL_OW 69
20000: ST_TO_ADDR
// if not tmp then
20001: LD_VAR 0 1
20005: NOT
20006: IFFALSE 20010
// exit ;
20008: GO 20036
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20010: LD_VAR 0 1
20014: PUSH
20015: LD_INT 1
20017: PPUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 12
20027: ARRAY
20028: PPUSH
20029: LD_INT 100
20031: PPUSH
20032: CALL_OW 234
// end ;
20036: PPOPN 1
20038: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20039: LD_EXP 33
20043: PUSH
20044: LD_EXP 47
20048: AND
20049: IFFALSE 20147
20051: GO 20053
20053: DISABLE
20054: LD_INT 0
20056: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20057: LD_ADDR_VAR 0 1
20061: PUSH
20062: LD_INT 22
20064: PUSH
20065: LD_OWVAR 2
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 21
20076: PUSH
20077: LD_INT 1
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PPUSH
20088: CALL_OW 69
20092: ST_TO_ADDR
// if not tmp then
20093: LD_VAR 0 1
20097: NOT
20098: IFFALSE 20102
// exit ;
20100: GO 20147
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20102: LD_VAR 0 1
20106: PUSH
20107: LD_INT 1
20109: PPUSH
20110: LD_VAR 0 1
20114: PPUSH
20115: CALL_OW 12
20119: ARRAY
20120: PPUSH
20121: LD_INT 1
20123: PPUSH
20124: LD_INT 4
20126: PPUSH
20127: CALL_OW 12
20131: PPUSH
20132: LD_INT 3000
20134: PPUSH
20135: LD_INT 9000
20137: PPUSH
20138: CALL_OW 12
20142: PPUSH
20143: CALL_OW 492
// end ;
20147: PPOPN 1
20149: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20150: LD_EXP 33
20154: PUSH
20155: LD_EXP 48
20159: AND
20160: IFFALSE 20180
20162: GO 20164
20164: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20165: LD_INT 1
20167: PPUSH
20168: LD_OWVAR 2
20172: PPUSH
20173: LD_INT 0
20175: PPUSH
20176: CALL_OW 324
20180: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20181: LD_EXP 33
20185: PUSH
20186: LD_EXP 49
20190: AND
20191: IFFALSE 20274
20193: GO 20195
20195: DISABLE
20196: LD_INT 0
20198: PPUSH
20199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20200: LD_ADDR_VAR 0 2
20204: PUSH
20205: LD_INT 22
20207: PUSH
20208: LD_OWVAR 2
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 21
20219: PUSH
20220: LD_INT 3
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 69
20235: ST_TO_ADDR
// if not tmp then
20236: LD_VAR 0 2
20240: NOT
20241: IFFALSE 20245
// exit ;
20243: GO 20274
// for i in tmp do
20245: LD_ADDR_VAR 0 1
20249: PUSH
20250: LD_VAR 0 2
20254: PUSH
20255: FOR_IN
20256: IFFALSE 20272
// SetBLevel ( i , 10 ) ;
20258: LD_VAR 0 1
20262: PPUSH
20263: LD_INT 10
20265: PPUSH
20266: CALL_OW 241
20270: GO 20255
20272: POP
20273: POP
// end ;
20274: PPOPN 2
20276: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20277: LD_EXP 33
20281: PUSH
20282: LD_EXP 50
20286: AND
20287: IFFALSE 20398
20289: GO 20291
20291: DISABLE
20292: LD_INT 0
20294: PPUSH
20295: PPUSH
20296: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: LD_INT 22
20304: PUSH
20305: LD_OWVAR 2
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 25
20316: PUSH
20317: LD_INT 1
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PPUSH
20328: CALL_OW 69
20332: ST_TO_ADDR
// if not tmp then
20333: LD_VAR 0 3
20337: NOT
20338: IFFALSE 20342
// exit ;
20340: GO 20398
// un := tmp [ rand ( 1 , tmp ) ] ;
20342: LD_ADDR_VAR 0 2
20346: PUSH
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 1
20354: PPUSH
20355: LD_VAR 0 3
20359: PPUSH
20360: CALL_OW 12
20364: ARRAY
20365: ST_TO_ADDR
// if Crawls ( un ) then
20366: LD_VAR 0 2
20370: PPUSH
20371: CALL_OW 318
20375: IFFALSE 20386
// ComWalk ( un ) ;
20377: LD_VAR 0 2
20381: PPUSH
20382: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20386: LD_VAR 0 2
20390: PPUSH
20391: LD_INT 5
20393: PPUSH
20394: CALL_OW 336
// end ;
20398: PPOPN 3
20400: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20401: LD_EXP 33
20405: PUSH
20406: LD_EXP 51
20410: AND
20411: PUSH
20412: LD_OWVAR 67
20416: PUSH
20417: LD_INT 4
20419: LESS
20420: AND
20421: IFFALSE 20440
20423: GO 20425
20425: DISABLE
// begin Difficulty := Difficulty + 1 ;
20426: LD_ADDR_OWVAR 67
20430: PUSH
20431: LD_OWVAR 67
20435: PUSH
20436: LD_INT 1
20438: PLUS
20439: ST_TO_ADDR
// end ;
20440: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20441: LD_EXP 33
20445: PUSH
20446: LD_EXP 52
20450: AND
20451: IFFALSE 20554
20453: GO 20455
20455: DISABLE
20456: LD_INT 0
20458: PPUSH
// begin for i := 1 to 5 do
20459: LD_ADDR_VAR 0 1
20463: PUSH
20464: DOUBLE
20465: LD_INT 1
20467: DEC
20468: ST_TO_ADDR
20469: LD_INT 5
20471: PUSH
20472: FOR_TO
20473: IFFALSE 20552
// begin uc_nation := nation_nature ;
20475: LD_ADDR_OWVAR 21
20479: PUSH
20480: LD_INT 0
20482: ST_TO_ADDR
// uc_side := 0 ;
20483: LD_ADDR_OWVAR 20
20487: PUSH
20488: LD_INT 0
20490: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20491: LD_ADDR_OWVAR 29
20495: PUSH
20496: LD_INT 12
20498: PUSH
20499: LD_INT 12
20501: PUSH
20502: EMPTY
20503: LIST
20504: LIST
20505: ST_TO_ADDR
// hc_agressivity := 20 ;
20506: LD_ADDR_OWVAR 35
20510: PUSH
20511: LD_INT 20
20513: ST_TO_ADDR
// hc_class := class_tiger ;
20514: LD_ADDR_OWVAR 28
20518: PUSH
20519: LD_INT 14
20521: ST_TO_ADDR
// hc_gallery :=  ;
20522: LD_ADDR_OWVAR 33
20526: PUSH
20527: LD_STRING 
20529: ST_TO_ADDR
// hc_name :=  ;
20530: LD_ADDR_OWVAR 26
20534: PUSH
20535: LD_STRING 
20537: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20538: CALL_OW 44
20542: PPUSH
20543: LD_INT 0
20545: PPUSH
20546: CALL_OW 51
// end ;
20550: GO 20472
20552: POP
20553: POP
// end ;
20554: PPOPN 1
20556: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20557: LD_EXP 33
20561: PUSH
20562: LD_EXP 53
20566: AND
20567: IFFALSE 20576
20569: GO 20571
20571: DISABLE
// StreamSibBomb ;
20572: CALL 20577 0 0
20576: END
// export function StreamSibBomb ; var i , x , y ; begin
20577: LD_INT 0
20579: PPUSH
20580: PPUSH
20581: PPUSH
20582: PPUSH
// result := false ;
20583: LD_ADDR_VAR 0 1
20587: PUSH
20588: LD_INT 0
20590: ST_TO_ADDR
// for i := 1 to 16 do
20591: LD_ADDR_VAR 0 2
20595: PUSH
20596: DOUBLE
20597: LD_INT 1
20599: DEC
20600: ST_TO_ADDR
20601: LD_INT 16
20603: PUSH
20604: FOR_TO
20605: IFFALSE 20804
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20607: LD_ADDR_VAR 0 3
20611: PUSH
20612: LD_INT 10
20614: PUSH
20615: LD_INT 20
20617: PUSH
20618: LD_INT 30
20620: PUSH
20621: LD_INT 40
20623: PUSH
20624: LD_INT 50
20626: PUSH
20627: LD_INT 60
20629: PUSH
20630: LD_INT 70
20632: PUSH
20633: LD_INT 80
20635: PUSH
20636: LD_INT 90
20638: PUSH
20639: LD_INT 100
20641: PUSH
20642: LD_INT 110
20644: PUSH
20645: LD_INT 120
20647: PUSH
20648: LD_INT 130
20650: PUSH
20651: LD_INT 140
20653: PUSH
20654: LD_INT 150
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 1
20676: PPUSH
20677: LD_INT 15
20679: PPUSH
20680: CALL_OW 12
20684: ARRAY
20685: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20686: LD_ADDR_VAR 0 4
20690: PUSH
20691: LD_INT 10
20693: PUSH
20694: LD_INT 20
20696: PUSH
20697: LD_INT 30
20699: PUSH
20700: LD_INT 40
20702: PUSH
20703: LD_INT 50
20705: PUSH
20706: LD_INT 60
20708: PUSH
20709: LD_INT 70
20711: PUSH
20712: LD_INT 80
20714: PUSH
20715: LD_INT 90
20717: PUSH
20718: LD_INT 100
20720: PUSH
20721: LD_INT 110
20723: PUSH
20724: LD_INT 120
20726: PUSH
20727: LD_INT 130
20729: PUSH
20730: LD_INT 140
20732: PUSH
20733: LD_INT 150
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 1
20755: PPUSH
20756: LD_INT 15
20758: PPUSH
20759: CALL_OW 12
20763: ARRAY
20764: ST_TO_ADDR
// if ValidHex ( x , y ) then
20765: LD_VAR 0 3
20769: PPUSH
20770: LD_VAR 0 4
20774: PPUSH
20775: CALL_OW 488
20779: IFFALSE 20802
// begin result := [ x , y ] ;
20781: LD_ADDR_VAR 0 1
20785: PUSH
20786: LD_VAR 0 3
20790: PUSH
20791: LD_VAR 0 4
20795: PUSH
20796: EMPTY
20797: LIST
20798: LIST
20799: ST_TO_ADDR
// break ;
20800: GO 20804
// end ; end ;
20802: GO 20604
20804: POP
20805: POP
// if result then
20806: LD_VAR 0 1
20810: IFFALSE 20870
// begin ToLua ( playSibBomb() ) ;
20812: LD_STRING playSibBomb()
20814: PPUSH
20815: CALL_OW 559
// wait ( 0 0$14 ) ;
20819: LD_INT 490
20821: PPUSH
20822: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20826: LD_VAR 0 1
20830: PUSH
20831: LD_INT 1
20833: ARRAY
20834: PPUSH
20835: LD_VAR 0 1
20839: PUSH
20840: LD_INT 2
20842: ARRAY
20843: PPUSH
20844: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20848: LD_VAR 0 1
20852: PUSH
20853: LD_INT 1
20855: ARRAY
20856: PPUSH
20857: LD_VAR 0 1
20861: PUSH
20862: LD_INT 2
20864: ARRAY
20865: PPUSH
20866: CALL_OW 429
// end ; end ;
20870: LD_VAR 0 1
20874: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20875: LD_EXP 33
20879: PUSH
20880: LD_EXP 55
20884: AND
20885: IFFALSE 20897
20887: GO 20889
20889: DISABLE
// YouLost (  ) ;
20890: LD_STRING 
20892: PPUSH
20893: CALL_OW 104
20897: END
// every 0 0$1 trigger StreamModeActive and sFog do
20898: LD_EXP 33
20902: PUSH
20903: LD_EXP 54
20907: AND
20908: IFFALSE 20922
20910: GO 20912
20912: DISABLE
// FogOff ( your_side ) ;
20913: LD_OWVAR 2
20917: PPUSH
20918: CALL_OW 344
20922: END
// every 0 0$1 trigger StreamModeActive and sSun do
20923: LD_EXP 33
20927: PUSH
20928: LD_EXP 56
20932: AND
20933: IFFALSE 20961
20935: GO 20937
20937: DISABLE
// begin solar_recharge_percent := 0 ;
20938: LD_ADDR_OWVAR 79
20942: PUSH
20943: LD_INT 0
20945: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20946: LD_INT 10500
20948: PPUSH
20949: CALL_OW 67
// solar_recharge_percent := 100 ;
20953: LD_ADDR_OWVAR 79
20957: PUSH
20958: LD_INT 100
20960: ST_TO_ADDR
// end ;
20961: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20962: LD_EXP 33
20966: PUSH
20967: LD_EXP 57
20971: AND
20972: IFFALSE 21211
20974: GO 20976
20976: DISABLE
20977: LD_INT 0
20979: PPUSH
20980: PPUSH
20981: PPUSH
// begin tmp := [ ] ;
20982: LD_ADDR_VAR 0 3
20986: PUSH
20987: EMPTY
20988: ST_TO_ADDR
// for i := 1 to 6 do
20989: LD_ADDR_VAR 0 1
20993: PUSH
20994: DOUBLE
20995: LD_INT 1
20997: DEC
20998: ST_TO_ADDR
20999: LD_INT 6
21001: PUSH
21002: FOR_TO
21003: IFFALSE 21108
// begin uc_nation := nation_nature ;
21005: LD_ADDR_OWVAR 21
21009: PUSH
21010: LD_INT 0
21012: ST_TO_ADDR
// uc_side := 0 ;
21013: LD_ADDR_OWVAR 20
21017: PUSH
21018: LD_INT 0
21020: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21021: LD_ADDR_OWVAR 29
21025: PUSH
21026: LD_INT 12
21028: PUSH
21029: LD_INT 12
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: ST_TO_ADDR
// hc_agressivity := 20 ;
21036: LD_ADDR_OWVAR 35
21040: PUSH
21041: LD_INT 20
21043: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21044: LD_ADDR_OWVAR 28
21048: PUSH
21049: LD_INT 17
21051: ST_TO_ADDR
// hc_gallery :=  ;
21052: LD_ADDR_OWVAR 33
21056: PUSH
21057: LD_STRING 
21059: ST_TO_ADDR
// hc_name :=  ;
21060: LD_ADDR_OWVAR 26
21064: PUSH
21065: LD_STRING 
21067: ST_TO_ADDR
// un := CreateHuman ;
21068: LD_ADDR_VAR 0 2
21072: PUSH
21073: CALL_OW 44
21077: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21078: LD_VAR 0 2
21082: PPUSH
21083: LD_INT 1
21085: PPUSH
21086: CALL_OW 51
// tmp := tmp ^ un ;
21090: LD_ADDR_VAR 0 3
21094: PUSH
21095: LD_VAR 0 3
21099: PUSH
21100: LD_VAR 0 2
21104: ADD
21105: ST_TO_ADDR
// end ;
21106: GO 21002
21108: POP
21109: POP
// repeat wait ( 0 0$1 ) ;
21110: LD_INT 35
21112: PPUSH
21113: CALL_OW 67
// for un in tmp do
21117: LD_ADDR_VAR 0 2
21121: PUSH
21122: LD_VAR 0 3
21126: PUSH
21127: FOR_IN
21128: IFFALSE 21202
// begin if IsDead ( un ) then
21130: LD_VAR 0 2
21134: PPUSH
21135: CALL_OW 301
21139: IFFALSE 21159
// begin tmp := tmp diff un ;
21141: LD_ADDR_VAR 0 3
21145: PUSH
21146: LD_VAR 0 3
21150: PUSH
21151: LD_VAR 0 2
21155: DIFF
21156: ST_TO_ADDR
// continue ;
21157: GO 21127
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21159: LD_VAR 0 2
21163: PPUSH
21164: LD_INT 3
21166: PUSH
21167: LD_INT 22
21169: PUSH
21170: LD_INT 0
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: EMPTY
21178: LIST
21179: LIST
21180: PPUSH
21181: CALL_OW 69
21185: PPUSH
21186: LD_VAR 0 2
21190: PPUSH
21191: CALL_OW 74
21195: PPUSH
21196: CALL_OW 115
// end ;
21200: GO 21127
21202: POP
21203: POP
// until not tmp ;
21204: LD_VAR 0 3
21208: NOT
21209: IFFALSE 21110
// end ;
21211: PPOPN 3
21213: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21214: LD_EXP 33
21218: PUSH
21219: LD_EXP 58
21223: AND
21224: IFFALSE 21278
21226: GO 21228
21228: DISABLE
// begin ToLua ( displayTroll(); ) ;
21229: LD_STRING displayTroll();
21231: PPUSH
21232: CALL_OW 559
// wait ( 3 3$00 ) ;
21236: LD_INT 6300
21238: PPUSH
21239: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21243: LD_STRING hideTroll();
21245: PPUSH
21246: CALL_OW 559
// wait ( 1 1$00 ) ;
21250: LD_INT 2100
21252: PPUSH
21253: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21257: LD_STRING displayTroll();
21259: PPUSH
21260: CALL_OW 559
// wait ( 1 1$00 ) ;
21264: LD_INT 2100
21266: PPUSH
21267: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21271: LD_STRING hideTroll();
21273: PPUSH
21274: CALL_OW 559
// end ;
21278: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21279: LD_EXP 33
21283: PUSH
21284: LD_EXP 59
21288: AND
21289: IFFALSE 21352
21291: GO 21293
21293: DISABLE
21294: LD_INT 0
21296: PPUSH
// begin p := 0 ;
21297: LD_ADDR_VAR 0 1
21301: PUSH
21302: LD_INT 0
21304: ST_TO_ADDR
// repeat game_speed := 1 ;
21305: LD_ADDR_OWVAR 65
21309: PUSH
21310: LD_INT 1
21312: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21313: LD_INT 35
21315: PPUSH
21316: CALL_OW 67
// p := p + 1 ;
21320: LD_ADDR_VAR 0 1
21324: PUSH
21325: LD_VAR 0 1
21329: PUSH
21330: LD_INT 1
21332: PLUS
21333: ST_TO_ADDR
// until p >= 60 ;
21334: LD_VAR 0 1
21338: PUSH
21339: LD_INT 60
21341: GREATEREQUAL
21342: IFFALSE 21305
// game_speed := 4 ;
21344: LD_ADDR_OWVAR 65
21348: PUSH
21349: LD_INT 4
21351: ST_TO_ADDR
// end ;
21352: PPOPN 1
21354: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21355: LD_EXP 33
21359: PUSH
21360: LD_EXP 60
21364: AND
21365: IFFALSE 21511
21367: GO 21369
21369: DISABLE
21370: LD_INT 0
21372: PPUSH
21373: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21374: LD_ADDR_VAR 0 1
21378: PUSH
21379: LD_INT 22
21381: PUSH
21382: LD_OWVAR 2
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: LD_INT 2
21393: PUSH
21394: LD_INT 30
21396: PUSH
21397: LD_INT 0
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PUSH
21404: LD_INT 30
21406: PUSH
21407: LD_INT 1
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: LIST
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PPUSH
21423: CALL_OW 69
21427: ST_TO_ADDR
// if not depot then
21428: LD_VAR 0 1
21432: NOT
21433: IFFALSE 21437
// exit ;
21435: GO 21511
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21437: LD_ADDR_VAR 0 2
21441: PUSH
21442: LD_VAR 0 1
21446: PUSH
21447: LD_INT 1
21449: PPUSH
21450: LD_VAR 0 1
21454: PPUSH
21455: CALL_OW 12
21459: ARRAY
21460: PPUSH
21461: CALL_OW 274
21465: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21466: LD_VAR 0 2
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: LD_INT 0
21476: PPUSH
21477: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21481: LD_VAR 0 2
21485: PPUSH
21486: LD_INT 2
21488: PPUSH
21489: LD_INT 0
21491: PPUSH
21492: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21496: LD_VAR 0 2
21500: PPUSH
21501: LD_INT 3
21503: PPUSH
21504: LD_INT 0
21506: PPUSH
21507: CALL_OW 277
// end ;
21511: PPOPN 2
21513: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21514: LD_EXP 33
21518: PUSH
21519: LD_EXP 61
21523: AND
21524: IFFALSE 21621
21526: GO 21528
21528: DISABLE
21529: LD_INT 0
21531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21532: LD_ADDR_VAR 0 1
21536: PUSH
21537: LD_INT 22
21539: PUSH
21540: LD_OWVAR 2
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 21
21551: PUSH
21552: LD_INT 1
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 3
21561: PUSH
21562: LD_INT 23
21564: PUSH
21565: LD_INT 0
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: LIST
21580: PPUSH
21581: CALL_OW 69
21585: ST_TO_ADDR
// if not tmp then
21586: LD_VAR 0 1
21590: NOT
21591: IFFALSE 21595
// exit ;
21593: GO 21621
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21595: LD_VAR 0 1
21599: PUSH
21600: LD_INT 1
21602: PPUSH
21603: LD_VAR 0 1
21607: PPUSH
21608: CALL_OW 12
21612: ARRAY
21613: PPUSH
21614: LD_INT 200
21616: PPUSH
21617: CALL_OW 234
// end ;
21621: PPOPN 1
21623: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21624: LD_EXP 33
21628: PUSH
21629: LD_EXP 62
21633: AND
21634: IFFALSE 21713
21636: GO 21638
21638: DISABLE
21639: LD_INT 0
21641: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21642: LD_ADDR_VAR 0 1
21646: PUSH
21647: LD_INT 22
21649: PUSH
21650: LD_OWVAR 2
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 21
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: EMPTY
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PPUSH
21673: CALL_OW 69
21677: ST_TO_ADDR
// if not tmp then
21678: LD_VAR 0 1
21682: NOT
21683: IFFALSE 21687
// exit ;
21685: GO 21713
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21687: LD_VAR 0 1
21691: PUSH
21692: LD_INT 1
21694: PPUSH
21695: LD_VAR 0 1
21699: PPUSH
21700: CALL_OW 12
21704: ARRAY
21705: PPUSH
21706: LD_INT 60
21708: PPUSH
21709: CALL_OW 234
// end ;
21713: PPOPN 1
21715: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21716: LD_EXP 33
21720: PUSH
21721: LD_EXP 63
21725: AND
21726: IFFALSE 21825
21728: GO 21730
21730: DISABLE
21731: LD_INT 0
21733: PPUSH
21734: PPUSH
// begin enable ;
21735: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21736: LD_ADDR_VAR 0 1
21740: PUSH
21741: LD_INT 22
21743: PUSH
21744: LD_OWVAR 2
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 61
21755: PUSH
21756: EMPTY
21757: LIST
21758: PUSH
21759: LD_INT 33
21761: PUSH
21762: LD_INT 2
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: PPUSH
21774: CALL_OW 69
21778: ST_TO_ADDR
// if not tmp then
21779: LD_VAR 0 1
21783: NOT
21784: IFFALSE 21788
// exit ;
21786: GO 21825
// for i in tmp do
21788: LD_ADDR_VAR 0 2
21792: PUSH
21793: LD_VAR 0 1
21797: PUSH
21798: FOR_IN
21799: IFFALSE 21823
// if IsControledBy ( i ) then
21801: LD_VAR 0 2
21805: PPUSH
21806: CALL_OW 312
21810: IFFALSE 21821
// ComUnlink ( i ) ;
21812: LD_VAR 0 2
21816: PPUSH
21817: CALL_OW 136
21821: GO 21798
21823: POP
21824: POP
// end ;
21825: PPOPN 2
21827: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21828: LD_EXP 33
21832: PUSH
21833: LD_EXP 64
21837: AND
21838: IFFALSE 21978
21840: GO 21842
21842: DISABLE
21843: LD_INT 0
21845: PPUSH
21846: PPUSH
// begin ToLua ( displayPowell(); ) ;
21847: LD_STRING displayPowell();
21849: PPUSH
21850: CALL_OW 559
// uc_side := 0 ;
21854: LD_ADDR_OWVAR 20
21858: PUSH
21859: LD_INT 0
21861: ST_TO_ADDR
// uc_nation := 2 ;
21862: LD_ADDR_OWVAR 21
21866: PUSH
21867: LD_INT 2
21869: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21870: LD_ADDR_OWVAR 37
21874: PUSH
21875: LD_INT 14
21877: ST_TO_ADDR
// vc_engine := engine_siberite ;
21878: LD_ADDR_OWVAR 39
21882: PUSH
21883: LD_INT 3
21885: ST_TO_ADDR
// vc_control := control_apeman ;
21886: LD_ADDR_OWVAR 38
21890: PUSH
21891: LD_INT 5
21893: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21894: LD_ADDR_OWVAR 40
21898: PUSH
21899: LD_INT 29
21901: ST_TO_ADDR
// un := CreateVehicle ;
21902: LD_ADDR_VAR 0 2
21906: PUSH
21907: CALL_OW 45
21911: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21912: LD_VAR 0 2
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21924: LD_INT 35
21926: PPUSH
21927: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21931: LD_VAR 0 2
21935: PPUSH
21936: LD_INT 22
21938: PUSH
21939: LD_OWVAR 2
21943: PUSH
21944: EMPTY
21945: LIST
21946: LIST
21947: PPUSH
21948: CALL_OW 69
21952: PPUSH
21953: LD_VAR 0 2
21957: PPUSH
21958: CALL_OW 74
21962: PPUSH
21963: CALL_OW 115
// until IsDead ( un ) ;
21967: LD_VAR 0 2
21971: PPUSH
21972: CALL_OW 301
21976: IFFALSE 21924
// end ;
21978: PPOPN 2
21980: END
// every 0 0$1 trigger StreamModeActive and sStu do
21981: LD_EXP 33
21985: PUSH
21986: LD_EXP 72
21990: AND
21991: IFFALSE 22007
21993: GO 21995
21995: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21996: LD_STRING displayStucuk();
21998: PPUSH
21999: CALL_OW 559
// ResetFog ;
22003: CALL_OW 335
// end ;
22007: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22008: LD_EXP 33
22012: PUSH
22013: LD_EXP 65
22017: AND
22018: IFFALSE 22159
22020: GO 22022
22022: DISABLE
22023: LD_INT 0
22025: PPUSH
22026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22027: LD_ADDR_VAR 0 2
22031: PUSH
22032: LD_INT 22
22034: PUSH
22035: LD_OWVAR 2
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 1
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PPUSH
22058: CALL_OW 69
22062: ST_TO_ADDR
// if not tmp then
22063: LD_VAR 0 2
22067: NOT
22068: IFFALSE 22072
// exit ;
22070: GO 22159
// un := tmp [ rand ( 1 , tmp ) ] ;
22072: LD_ADDR_VAR 0 1
22076: PUSH
22077: LD_VAR 0 2
22081: PUSH
22082: LD_INT 1
22084: PPUSH
22085: LD_VAR 0 2
22089: PPUSH
22090: CALL_OW 12
22094: ARRAY
22095: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22096: LD_VAR 0 1
22100: PPUSH
22101: LD_INT 0
22103: PPUSH
22104: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22108: LD_VAR 0 1
22112: PPUSH
22113: LD_OWVAR 3
22117: PUSH
22118: LD_VAR 0 1
22122: DIFF
22123: PPUSH
22124: LD_VAR 0 1
22128: PPUSH
22129: CALL_OW 74
22133: PPUSH
22134: CALL_OW 115
// wait ( 0 0$20 ) ;
22138: LD_INT 700
22140: PPUSH
22141: CALL_OW 67
// SetSide ( un , your_side ) ;
22145: LD_VAR 0 1
22149: PPUSH
22150: LD_OWVAR 2
22154: PPUSH
22155: CALL_OW 235
// end ;
22159: PPOPN 2
22161: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22162: LD_EXP 33
22166: PUSH
22167: LD_EXP 66
22171: AND
22172: IFFALSE 22278
22174: GO 22176
22176: DISABLE
22177: LD_INT 0
22179: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22180: LD_ADDR_VAR 0 1
22184: PUSH
22185: LD_INT 22
22187: PUSH
22188: LD_OWVAR 2
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 30
22202: PUSH
22203: LD_INT 0
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 1
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: LIST
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PPUSH
22229: CALL_OW 69
22233: ST_TO_ADDR
// if not depot then
22234: LD_VAR 0 1
22238: NOT
22239: IFFALSE 22243
// exit ;
22241: GO 22278
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22243: LD_VAR 0 1
22247: PUSH
22248: LD_INT 1
22250: ARRAY
22251: PPUSH
22252: CALL_OW 250
22256: PPUSH
22257: LD_VAR 0 1
22261: PUSH
22262: LD_INT 1
22264: ARRAY
22265: PPUSH
22266: CALL_OW 251
22270: PPUSH
22271: LD_INT 70
22273: PPUSH
22274: CALL_OW 495
// end ;
22278: PPOPN 1
22280: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22281: LD_EXP 33
22285: PUSH
22286: LD_EXP 67
22290: AND
22291: IFFALSE 22502
22293: GO 22295
22295: DISABLE
22296: LD_INT 0
22298: PPUSH
22299: PPUSH
22300: PPUSH
22301: PPUSH
22302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22303: LD_ADDR_VAR 0 5
22307: PUSH
22308: LD_INT 22
22310: PUSH
22311: LD_OWVAR 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 21
22322: PUSH
22323: LD_INT 1
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PPUSH
22334: CALL_OW 69
22338: ST_TO_ADDR
// if not tmp then
22339: LD_VAR 0 5
22343: NOT
22344: IFFALSE 22348
// exit ;
22346: GO 22502
// for i in tmp do
22348: LD_ADDR_VAR 0 1
22352: PUSH
22353: LD_VAR 0 5
22357: PUSH
22358: FOR_IN
22359: IFFALSE 22500
// begin d := rand ( 0 , 5 ) ;
22361: LD_ADDR_VAR 0 4
22365: PUSH
22366: LD_INT 0
22368: PPUSH
22369: LD_INT 5
22371: PPUSH
22372: CALL_OW 12
22376: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22377: LD_ADDR_VAR 0 2
22381: PUSH
22382: LD_VAR 0 1
22386: PPUSH
22387: CALL_OW 250
22391: PPUSH
22392: LD_VAR 0 4
22396: PPUSH
22397: LD_INT 3
22399: PPUSH
22400: LD_INT 12
22402: PPUSH
22403: CALL_OW 12
22407: PPUSH
22408: CALL_OW 272
22412: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22413: LD_ADDR_VAR 0 3
22417: PUSH
22418: LD_VAR 0 1
22422: PPUSH
22423: CALL_OW 251
22427: PPUSH
22428: LD_VAR 0 4
22432: PPUSH
22433: LD_INT 3
22435: PPUSH
22436: LD_INT 12
22438: PPUSH
22439: CALL_OW 12
22443: PPUSH
22444: CALL_OW 273
22448: ST_TO_ADDR
// if ValidHex ( x , y ) then
22449: LD_VAR 0 2
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL_OW 488
22463: IFFALSE 22498
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22465: LD_VAR 0 1
22469: PPUSH
22470: LD_VAR 0 2
22474: PPUSH
22475: LD_VAR 0 3
22479: PPUSH
22480: LD_INT 3
22482: PPUSH
22483: LD_INT 6
22485: PPUSH
22486: CALL_OW 12
22490: PPUSH
22491: LD_INT 1
22493: PPUSH
22494: CALL_OW 483
// end ;
22498: GO 22358
22500: POP
22501: POP
// end ;
22502: PPOPN 5
22504: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22505: LD_EXP 33
22509: PUSH
22510: LD_EXP 68
22514: AND
22515: IFFALSE 22609
22517: GO 22519
22519: DISABLE
22520: LD_INT 0
22522: PPUSH
22523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22524: LD_ADDR_VAR 0 2
22528: PUSH
22529: LD_INT 22
22531: PUSH
22532: LD_OWVAR 2
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PUSH
22541: LD_INT 32
22543: PUSH
22544: LD_INT 1
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 21
22553: PUSH
22554: LD_INT 2
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: LIST
22565: PPUSH
22566: CALL_OW 69
22570: ST_TO_ADDR
// if not tmp then
22571: LD_VAR 0 2
22575: NOT
22576: IFFALSE 22580
// exit ;
22578: GO 22609
// for i in tmp do
22580: LD_ADDR_VAR 0 1
22584: PUSH
22585: LD_VAR 0 2
22589: PUSH
22590: FOR_IN
22591: IFFALSE 22607
// SetFuel ( i , 0 ) ;
22593: LD_VAR 0 1
22597: PPUSH
22598: LD_INT 0
22600: PPUSH
22601: CALL_OW 240
22605: GO 22590
22607: POP
22608: POP
// end ;
22609: PPOPN 2
22611: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22612: LD_EXP 33
22616: PUSH
22617: LD_EXP 69
22621: AND
22622: IFFALSE 22688
22624: GO 22626
22626: DISABLE
22627: LD_INT 0
22629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22630: LD_ADDR_VAR 0 1
22634: PUSH
22635: LD_INT 22
22637: PUSH
22638: LD_OWVAR 2
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PUSH
22647: LD_INT 30
22649: PUSH
22650: LD_INT 29
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PPUSH
22661: CALL_OW 69
22665: ST_TO_ADDR
// if not tmp then
22666: LD_VAR 0 1
22670: NOT
22671: IFFALSE 22675
// exit ;
22673: GO 22688
// DestroyUnit ( tmp [ 1 ] ) ;
22675: LD_VAR 0 1
22679: PUSH
22680: LD_INT 1
22682: ARRAY
22683: PPUSH
22684: CALL_OW 65
// end ;
22688: PPOPN 1
22690: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22691: LD_EXP 33
22695: PUSH
22696: LD_EXP 71
22700: AND
22701: IFFALSE 22830
22703: GO 22705
22705: DISABLE
22706: LD_INT 0
22708: PPUSH
// begin uc_side := 0 ;
22709: LD_ADDR_OWVAR 20
22713: PUSH
22714: LD_INT 0
22716: ST_TO_ADDR
// uc_nation := nation_arabian ;
22717: LD_ADDR_OWVAR 21
22721: PUSH
22722: LD_INT 2
22724: ST_TO_ADDR
// hc_gallery :=  ;
22725: LD_ADDR_OWVAR 33
22729: PUSH
22730: LD_STRING 
22732: ST_TO_ADDR
// hc_name :=  ;
22733: LD_ADDR_OWVAR 26
22737: PUSH
22738: LD_STRING 
22740: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22741: LD_INT 1
22743: PPUSH
22744: LD_INT 11
22746: PPUSH
22747: LD_INT 10
22749: PPUSH
22750: CALL_OW 380
// un := CreateHuman ;
22754: LD_ADDR_VAR 0 1
22758: PUSH
22759: CALL_OW 44
22763: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22764: LD_VAR 0 1
22768: PPUSH
22769: LD_INT 1
22771: PPUSH
22772: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22776: LD_INT 35
22778: PPUSH
22779: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22783: LD_VAR 0 1
22787: PPUSH
22788: LD_INT 22
22790: PUSH
22791: LD_OWVAR 2
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PPUSH
22800: CALL_OW 69
22804: PPUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 74
22814: PPUSH
22815: CALL_OW 115
// until IsDead ( un ) ;
22819: LD_VAR 0 1
22823: PPUSH
22824: CALL_OW 301
22828: IFFALSE 22776
// end ;
22830: PPOPN 1
22832: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22833: LD_EXP 33
22837: PUSH
22838: LD_EXP 73
22842: AND
22843: IFFALSE 22855
22845: GO 22847
22847: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22848: LD_STRING earthquake(getX(game), 0, 32)
22850: PPUSH
22851: CALL_OW 559
22855: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22856: LD_EXP 33
22860: PUSH
22861: LD_EXP 74
22865: AND
22866: IFFALSE 22957
22868: GO 22870
22870: DISABLE
22871: LD_INT 0
22873: PPUSH
// begin enable ;
22874: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22875: LD_ADDR_VAR 0 1
22879: PUSH
22880: LD_INT 22
22882: PUSH
22883: LD_OWVAR 2
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: PUSH
22892: LD_INT 21
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 33
22904: PUSH
22905: LD_INT 3
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: LIST
22916: PPUSH
22917: CALL_OW 69
22921: ST_TO_ADDR
// if not tmp then
22922: LD_VAR 0 1
22926: NOT
22927: IFFALSE 22931
// exit ;
22929: GO 22957
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22931: LD_VAR 0 1
22935: PUSH
22936: LD_INT 1
22938: PPUSH
22939: LD_VAR 0 1
22943: PPUSH
22944: CALL_OW 12
22948: ARRAY
22949: PPUSH
22950: LD_INT 1
22952: PPUSH
22953: CALL_OW 234
// end ;
22957: PPOPN 1
22959: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22960: LD_EXP 33
22964: PUSH
22965: LD_EXP 75
22969: AND
22970: IFFALSE 23111
22972: GO 22974
22974: DISABLE
22975: LD_INT 0
22977: PPUSH
22978: PPUSH
22979: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22980: LD_ADDR_VAR 0 3
22984: PUSH
22985: LD_INT 22
22987: PUSH
22988: LD_OWVAR 2
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: LD_INT 25
22999: PUSH
23000: LD_INT 1
23002: PUSH
23003: EMPTY
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 69
23015: ST_TO_ADDR
// if not tmp then
23016: LD_VAR 0 3
23020: NOT
23021: IFFALSE 23025
// exit ;
23023: GO 23111
// un := tmp [ rand ( 1 , tmp ) ] ;
23025: LD_ADDR_VAR 0 2
23029: PUSH
23030: LD_VAR 0 3
23034: PUSH
23035: LD_INT 1
23037: PPUSH
23038: LD_VAR 0 3
23042: PPUSH
23043: CALL_OW 12
23047: ARRAY
23048: ST_TO_ADDR
// if Crawls ( un ) then
23049: LD_VAR 0 2
23053: PPUSH
23054: CALL_OW 318
23058: IFFALSE 23069
// ComWalk ( un ) ;
23060: LD_VAR 0 2
23064: PPUSH
23065: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23069: LD_VAR 0 2
23073: PPUSH
23074: LD_INT 9
23076: PPUSH
23077: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23081: LD_INT 28
23083: PPUSH
23084: LD_OWVAR 2
23088: PPUSH
23089: LD_INT 2
23091: PPUSH
23092: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23096: LD_INT 29
23098: PPUSH
23099: LD_OWVAR 2
23103: PPUSH
23104: LD_INT 2
23106: PPUSH
23107: CALL_OW 322
// end ;
23111: PPOPN 3
23113: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23114: LD_EXP 33
23118: PUSH
23119: LD_EXP 76
23123: AND
23124: IFFALSE 23235
23126: GO 23128
23128: DISABLE
23129: LD_INT 0
23131: PPUSH
23132: PPUSH
23133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23134: LD_ADDR_VAR 0 3
23138: PUSH
23139: LD_INT 22
23141: PUSH
23142: LD_OWVAR 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 25
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PPUSH
23165: CALL_OW 69
23169: ST_TO_ADDR
// if not tmp then
23170: LD_VAR 0 3
23174: NOT
23175: IFFALSE 23179
// exit ;
23177: GO 23235
// un := tmp [ rand ( 1 , tmp ) ] ;
23179: LD_ADDR_VAR 0 2
23183: PUSH
23184: LD_VAR 0 3
23188: PUSH
23189: LD_INT 1
23191: PPUSH
23192: LD_VAR 0 3
23196: PPUSH
23197: CALL_OW 12
23201: ARRAY
23202: ST_TO_ADDR
// if Crawls ( un ) then
23203: LD_VAR 0 2
23207: PPUSH
23208: CALL_OW 318
23212: IFFALSE 23223
// ComWalk ( un ) ;
23214: LD_VAR 0 2
23218: PPUSH
23219: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23223: LD_VAR 0 2
23227: PPUSH
23228: LD_INT 8
23230: PPUSH
23231: CALL_OW 336
// end ;
23235: PPOPN 3
23237: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23238: LD_EXP 33
23242: PUSH
23243: LD_EXP 77
23247: AND
23248: IFFALSE 23392
23250: GO 23252
23252: DISABLE
23253: LD_INT 0
23255: PPUSH
23256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23257: LD_ADDR_VAR 0 2
23261: PUSH
23262: LD_INT 22
23264: PUSH
23265: LD_OWVAR 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 21
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 34
23289: PUSH
23290: LD_INT 12
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: PUSH
23297: LD_INT 34
23299: PUSH
23300: LD_INT 51
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: PUSH
23307: LD_INT 34
23309: PUSH
23310: LD_INT 32
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: PUSH
23317: EMPTY
23318: LIST
23319: LIST
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: PPUSH
23328: CALL_OW 69
23332: ST_TO_ADDR
// if not tmp then
23333: LD_VAR 0 2
23337: NOT
23338: IFFALSE 23342
// exit ;
23340: GO 23392
// for i in tmp do
23342: LD_ADDR_VAR 0 1
23346: PUSH
23347: LD_VAR 0 2
23351: PUSH
23352: FOR_IN
23353: IFFALSE 23390
// if GetCargo ( i , mat_artifact ) = 0 then
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_INT 4
23362: PPUSH
23363: CALL_OW 289
23367: PUSH
23368: LD_INT 0
23370: EQUAL
23371: IFFALSE 23388
// SetCargo ( i , mat_siberit , 100 ) ;
23373: LD_VAR 0 1
23377: PPUSH
23378: LD_INT 3
23380: PPUSH
23381: LD_INT 100
23383: PPUSH
23384: CALL_OW 290
23388: GO 23352
23390: POP
23391: POP
// end ;
23392: PPOPN 2
23394: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23395: LD_EXP 33
23399: PUSH
23400: LD_EXP 78
23404: AND
23405: IFFALSE 23588
23407: GO 23409
23409: DISABLE
23410: LD_INT 0
23412: PPUSH
23413: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23414: LD_ADDR_VAR 0 2
23418: PUSH
23419: LD_INT 22
23421: PUSH
23422: LD_OWVAR 2
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PPUSH
23431: CALL_OW 69
23435: ST_TO_ADDR
// if not tmp then
23436: LD_VAR 0 2
23440: NOT
23441: IFFALSE 23445
// exit ;
23443: GO 23588
// for i := 1 to 2 do
23445: LD_ADDR_VAR 0 1
23449: PUSH
23450: DOUBLE
23451: LD_INT 1
23453: DEC
23454: ST_TO_ADDR
23455: LD_INT 2
23457: PUSH
23458: FOR_TO
23459: IFFALSE 23586
// begin uc_side := your_side ;
23461: LD_ADDR_OWVAR 20
23465: PUSH
23466: LD_OWVAR 2
23470: ST_TO_ADDR
// uc_nation := nation_american ;
23471: LD_ADDR_OWVAR 21
23475: PUSH
23476: LD_INT 1
23478: ST_TO_ADDR
// vc_chassis := us_morphling ;
23479: LD_ADDR_OWVAR 37
23483: PUSH
23484: LD_INT 5
23486: ST_TO_ADDR
// vc_engine := engine_siberite ;
23487: LD_ADDR_OWVAR 39
23491: PUSH
23492: LD_INT 3
23494: ST_TO_ADDR
// vc_control := control_computer ;
23495: LD_ADDR_OWVAR 38
23499: PUSH
23500: LD_INT 3
23502: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23503: LD_ADDR_OWVAR 40
23507: PUSH
23508: LD_INT 10
23510: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23511: LD_VAR 0 2
23515: PUSH
23516: LD_INT 1
23518: ARRAY
23519: PPUSH
23520: CALL_OW 310
23524: NOT
23525: IFFALSE 23572
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23527: CALL_OW 45
23531: PPUSH
23532: LD_VAR 0 2
23536: PUSH
23537: LD_INT 1
23539: ARRAY
23540: PPUSH
23541: CALL_OW 250
23545: PPUSH
23546: LD_VAR 0 2
23550: PUSH
23551: LD_INT 1
23553: ARRAY
23554: PPUSH
23555: CALL_OW 251
23559: PPUSH
23560: LD_INT 12
23562: PPUSH
23563: LD_INT 1
23565: PPUSH
23566: CALL_OW 50
23570: GO 23584
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23572: CALL_OW 45
23576: PPUSH
23577: LD_INT 1
23579: PPUSH
23580: CALL_OW 51
// end ;
23584: GO 23458
23586: POP
23587: POP
// end ;
23588: PPOPN 2
23590: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23591: LD_EXP 33
23595: PUSH
23596: LD_EXP 79
23600: AND
23601: IFFALSE 23823
23603: GO 23605
23605: DISABLE
23606: LD_INT 0
23608: PPUSH
23609: PPUSH
23610: PPUSH
23611: PPUSH
23612: PPUSH
23613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23614: LD_ADDR_VAR 0 6
23618: PUSH
23619: LD_INT 22
23621: PUSH
23622: LD_OWVAR 2
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 21
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: LD_INT 3
23643: PUSH
23644: LD_INT 23
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: PPUSH
23663: CALL_OW 69
23667: ST_TO_ADDR
// if not tmp then
23668: LD_VAR 0 6
23672: NOT
23673: IFFALSE 23677
// exit ;
23675: GO 23823
// s1 := rand ( 1 , 4 ) ;
23677: LD_ADDR_VAR 0 2
23681: PUSH
23682: LD_INT 1
23684: PPUSH
23685: LD_INT 4
23687: PPUSH
23688: CALL_OW 12
23692: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23693: LD_ADDR_VAR 0 4
23697: PUSH
23698: LD_VAR 0 6
23702: PUSH
23703: LD_INT 1
23705: ARRAY
23706: PPUSH
23707: LD_VAR 0 2
23711: PPUSH
23712: CALL_OW 259
23716: ST_TO_ADDR
// if s1 = 1 then
23717: LD_VAR 0 2
23721: PUSH
23722: LD_INT 1
23724: EQUAL
23725: IFFALSE 23745
// s2 := rand ( 2 , 4 ) else
23727: LD_ADDR_VAR 0 3
23731: PUSH
23732: LD_INT 2
23734: PPUSH
23735: LD_INT 4
23737: PPUSH
23738: CALL_OW 12
23742: ST_TO_ADDR
23743: GO 23753
// s2 := 1 ;
23745: LD_ADDR_VAR 0 3
23749: PUSH
23750: LD_INT 1
23752: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23753: LD_ADDR_VAR 0 5
23757: PUSH
23758: LD_VAR 0 6
23762: PUSH
23763: LD_INT 1
23765: ARRAY
23766: PPUSH
23767: LD_VAR 0 3
23771: PPUSH
23772: CALL_OW 259
23776: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23777: LD_VAR 0 6
23781: PUSH
23782: LD_INT 1
23784: ARRAY
23785: PPUSH
23786: LD_VAR 0 2
23790: PPUSH
23791: LD_VAR 0 5
23795: PPUSH
23796: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23800: LD_VAR 0 6
23804: PUSH
23805: LD_INT 1
23807: ARRAY
23808: PPUSH
23809: LD_VAR 0 3
23813: PPUSH
23814: LD_VAR 0 4
23818: PPUSH
23819: CALL_OW 237
// end ;
23823: PPOPN 6
23825: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23826: LD_EXP 33
23830: PUSH
23831: LD_EXP 80
23835: AND
23836: IFFALSE 23915
23838: GO 23840
23840: DISABLE
23841: LD_INT 0
23843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23844: LD_ADDR_VAR 0 1
23848: PUSH
23849: LD_INT 22
23851: PUSH
23852: LD_OWVAR 2
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PUSH
23861: LD_INT 30
23863: PUSH
23864: LD_INT 3
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PPUSH
23875: CALL_OW 69
23879: ST_TO_ADDR
// if not tmp then
23880: LD_VAR 0 1
23884: NOT
23885: IFFALSE 23889
// exit ;
23887: GO 23915
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23889: LD_VAR 0 1
23893: PUSH
23894: LD_INT 1
23896: PPUSH
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 12
23906: ARRAY
23907: PPUSH
23908: LD_INT 1
23910: PPUSH
23911: CALL_OW 234
// end ;
23915: PPOPN 1
23917: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23918: LD_EXP 33
23922: PUSH
23923: LD_EXP 81
23927: AND
23928: IFFALSE 24040
23930: GO 23932
23932: DISABLE
23933: LD_INT 0
23935: PPUSH
23936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23937: LD_ADDR_VAR 0 2
23941: PUSH
23942: LD_INT 22
23944: PUSH
23945: LD_OWVAR 2
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 27
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: LD_INT 30
23969: PUSH
23970: LD_INT 26
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: PUSH
23977: LD_INT 30
23979: PUSH
23980: LD_INT 28
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PPUSH
23997: CALL_OW 69
24001: ST_TO_ADDR
// if not tmp then
24002: LD_VAR 0 2
24006: NOT
24007: IFFALSE 24011
// exit ;
24009: GO 24040
// for i in tmp do
24011: LD_ADDR_VAR 0 1
24015: PUSH
24016: LD_VAR 0 2
24020: PUSH
24021: FOR_IN
24022: IFFALSE 24038
// SetLives ( i , 1 ) ;
24024: LD_VAR 0 1
24028: PPUSH
24029: LD_INT 1
24031: PPUSH
24032: CALL_OW 234
24036: GO 24021
24038: POP
24039: POP
// end ;
24040: PPOPN 2
24042: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24043: LD_EXP 33
24047: PUSH
24048: LD_EXP 82
24052: AND
24053: IFFALSE 24340
24055: GO 24057
24057: DISABLE
24058: LD_INT 0
24060: PPUSH
24061: PPUSH
24062: PPUSH
// begin i := rand ( 1 , 7 ) ;
24063: LD_ADDR_VAR 0 1
24067: PUSH
24068: LD_INT 1
24070: PPUSH
24071: LD_INT 7
24073: PPUSH
24074: CALL_OW 12
24078: ST_TO_ADDR
// case i of 1 :
24079: LD_VAR 0 1
24083: PUSH
24084: LD_INT 1
24086: DOUBLE
24087: EQUAL
24088: IFTRUE 24092
24090: GO 24102
24092: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24093: LD_STRING earthquake(getX(game), 0, 32)
24095: PPUSH
24096: CALL_OW 559
24100: GO 24340
24102: LD_INT 2
24104: DOUBLE
24105: EQUAL
24106: IFTRUE 24110
24108: GO 24124
24110: POP
// begin ToLua ( displayStucuk(); ) ;
24111: LD_STRING displayStucuk();
24113: PPUSH
24114: CALL_OW 559
// ResetFog ;
24118: CALL_OW 335
// end ; 3 :
24122: GO 24340
24124: LD_INT 3
24126: DOUBLE
24127: EQUAL
24128: IFTRUE 24132
24130: GO 24236
24132: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24133: LD_ADDR_VAR 0 2
24137: PUSH
24138: LD_INT 22
24140: PUSH
24141: LD_OWVAR 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 25
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PPUSH
24164: CALL_OW 69
24168: ST_TO_ADDR
// if not tmp then
24169: LD_VAR 0 2
24173: NOT
24174: IFFALSE 24178
// exit ;
24176: GO 24340
// un := tmp [ rand ( 1 , tmp ) ] ;
24178: LD_ADDR_VAR 0 3
24182: PUSH
24183: LD_VAR 0 2
24187: PUSH
24188: LD_INT 1
24190: PPUSH
24191: LD_VAR 0 2
24195: PPUSH
24196: CALL_OW 12
24200: ARRAY
24201: ST_TO_ADDR
// if Crawls ( un ) then
24202: LD_VAR 0 3
24206: PPUSH
24207: CALL_OW 318
24211: IFFALSE 24222
// ComWalk ( un ) ;
24213: LD_VAR 0 3
24217: PPUSH
24218: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24222: LD_VAR 0 3
24226: PPUSH
24227: LD_INT 8
24229: PPUSH
24230: CALL_OW 336
// end ; 4 :
24234: GO 24340
24236: LD_INT 4
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24244
24242: GO 24318
24244: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24245: LD_ADDR_VAR 0 2
24249: PUSH
24250: LD_INT 22
24252: PUSH
24253: LD_OWVAR 2
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 30
24264: PUSH
24265: LD_INT 29
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PPUSH
24276: CALL_OW 69
24280: ST_TO_ADDR
// if not tmp then
24281: LD_VAR 0 2
24285: NOT
24286: IFFALSE 24290
// exit ;
24288: GO 24340
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24290: LD_VAR 0 2
24294: PUSH
24295: LD_INT 1
24297: ARRAY
24298: PPUSH
24299: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24303: LD_VAR 0 2
24307: PUSH
24308: LD_INT 1
24310: ARRAY
24311: PPUSH
24312: CALL_OW 65
// end ; 5 .. 7 :
24316: GO 24340
24318: LD_INT 5
24320: DOUBLE
24321: GREATEREQUAL
24322: IFFALSE 24330
24324: LD_INT 7
24326: DOUBLE
24327: LESSEQUAL
24328: IFTRUE 24332
24330: GO 24339
24332: POP
// StreamSibBomb ; end ;
24333: CALL 20577 0 0
24337: GO 24340
24339: POP
// end ;
24340: PPOPN 3
24342: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24343: LD_EXP 33
24347: PUSH
24348: LD_EXP 83
24352: AND
24353: IFFALSE 24509
24355: GO 24357
24357: DISABLE
24358: LD_INT 0
24360: PPUSH
24361: PPUSH
24362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24363: LD_ADDR_VAR 0 2
24367: PUSH
24368: LD_INT 81
24370: PUSH
24371: LD_OWVAR 2
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 2
24382: PUSH
24383: LD_INT 21
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: LD_INT 21
24395: PUSH
24396: LD_INT 2
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: LIST
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PPUSH
24412: CALL_OW 69
24416: ST_TO_ADDR
// if not tmp then
24417: LD_VAR 0 2
24421: NOT
24422: IFFALSE 24426
// exit ;
24424: GO 24509
// p := 0 ;
24426: LD_ADDR_VAR 0 3
24430: PUSH
24431: LD_INT 0
24433: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24434: LD_INT 35
24436: PPUSH
24437: CALL_OW 67
// p := p + 1 ;
24441: LD_ADDR_VAR 0 3
24445: PUSH
24446: LD_VAR 0 3
24450: PUSH
24451: LD_INT 1
24453: PLUS
24454: ST_TO_ADDR
// for i in tmp do
24455: LD_ADDR_VAR 0 1
24459: PUSH
24460: LD_VAR 0 2
24464: PUSH
24465: FOR_IN
24466: IFFALSE 24497
// if GetLives ( i ) < 1000 then
24468: LD_VAR 0 1
24472: PPUSH
24473: CALL_OW 256
24477: PUSH
24478: LD_INT 1000
24480: LESS
24481: IFFALSE 24495
// SetLives ( i , 1000 ) ;
24483: LD_VAR 0 1
24487: PPUSH
24488: LD_INT 1000
24490: PPUSH
24491: CALL_OW 234
24495: GO 24465
24497: POP
24498: POP
// until p > 20 ;
24499: LD_VAR 0 3
24503: PUSH
24504: LD_INT 20
24506: GREATER
24507: IFFALSE 24434
// end ;
24509: PPOPN 3
24511: END
// every 0 0$1 trigger StreamModeActive and sTime do
24512: LD_EXP 33
24516: PUSH
24517: LD_EXP 84
24521: AND
24522: IFFALSE 24557
24524: GO 24526
24526: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24527: LD_INT 28
24529: PPUSH
24530: LD_OWVAR 2
24534: PPUSH
24535: LD_INT 2
24537: PPUSH
24538: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24542: LD_INT 30
24544: PPUSH
24545: LD_OWVAR 2
24549: PPUSH
24550: LD_INT 2
24552: PPUSH
24553: CALL_OW 322
// end ;
24557: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24558: LD_EXP 33
24562: PUSH
24563: LD_EXP 85
24567: AND
24568: IFFALSE 24689
24570: GO 24572
24572: DISABLE
24573: LD_INT 0
24575: PPUSH
24576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24577: LD_ADDR_VAR 0 2
24581: PUSH
24582: LD_INT 22
24584: PUSH
24585: LD_OWVAR 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 3
24606: PUSH
24607: LD_INT 23
24609: PUSH
24610: LD_INT 0
24612: PUSH
24613: EMPTY
24614: LIST
24615: LIST
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: PPUSH
24626: CALL_OW 69
24630: ST_TO_ADDR
// if not tmp then
24631: LD_VAR 0 2
24635: NOT
24636: IFFALSE 24640
// exit ;
24638: GO 24689
// for i in tmp do
24640: LD_ADDR_VAR 0 1
24644: PUSH
24645: LD_VAR 0 2
24649: PUSH
24650: FOR_IN
24651: IFFALSE 24687
// begin if Crawls ( i ) then
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL_OW 318
24662: IFFALSE 24673
// ComWalk ( i ) ;
24664: LD_VAR 0 1
24668: PPUSH
24669: CALL_OW 138
// SetClass ( i , 2 ) ;
24673: LD_VAR 0 1
24677: PPUSH
24678: LD_INT 2
24680: PPUSH
24681: CALL_OW 336
// end ;
24685: GO 24650
24687: POP
24688: POP
// end ;
24689: PPOPN 2
24691: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24692: LD_EXP 33
24696: PUSH
24697: LD_EXP 86
24701: AND
24702: IFFALSE 24990
24704: GO 24706
24706: DISABLE
24707: LD_INT 0
24709: PPUSH
24710: PPUSH
24711: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24712: LD_OWVAR 2
24716: PPUSH
24717: LD_INT 9
24719: PPUSH
24720: LD_INT 1
24722: PPUSH
24723: LD_INT 1
24725: PPUSH
24726: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24730: LD_INT 9
24732: PPUSH
24733: LD_OWVAR 2
24737: PPUSH
24738: CALL_OW 343
// uc_side := 9 ;
24742: LD_ADDR_OWVAR 20
24746: PUSH
24747: LD_INT 9
24749: ST_TO_ADDR
// uc_nation := 2 ;
24750: LD_ADDR_OWVAR 21
24754: PUSH
24755: LD_INT 2
24757: ST_TO_ADDR
// hc_name := Dark Warrior ;
24758: LD_ADDR_OWVAR 26
24762: PUSH
24763: LD_STRING Dark Warrior
24765: ST_TO_ADDR
// hc_gallery :=  ;
24766: LD_ADDR_OWVAR 33
24770: PUSH
24771: LD_STRING 
24773: ST_TO_ADDR
// hc_noskilllimit := true ;
24774: LD_ADDR_OWVAR 76
24778: PUSH
24779: LD_INT 1
24781: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24782: LD_ADDR_OWVAR 31
24786: PUSH
24787: LD_INT 30
24789: PUSH
24790: LD_INT 30
24792: PUSH
24793: LD_INT 30
24795: PUSH
24796: LD_INT 30
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: ST_TO_ADDR
// un := CreateHuman ;
24805: LD_ADDR_VAR 0 3
24809: PUSH
24810: CALL_OW 44
24814: ST_TO_ADDR
// hc_noskilllimit := false ;
24815: LD_ADDR_OWVAR 76
24819: PUSH
24820: LD_INT 0
24822: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24823: LD_VAR 0 3
24827: PPUSH
24828: LD_INT 1
24830: PPUSH
24831: CALL_OW 51
// ToLua ( playRanger() ) ;
24835: LD_STRING playRanger()
24837: PPUSH
24838: CALL_OW 559
// p := 0 ;
24842: LD_ADDR_VAR 0 2
24846: PUSH
24847: LD_INT 0
24849: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24850: LD_INT 35
24852: PPUSH
24853: CALL_OW 67
// p := p + 1 ;
24857: LD_ADDR_VAR 0 2
24861: PUSH
24862: LD_VAR 0 2
24866: PUSH
24867: LD_INT 1
24869: PLUS
24870: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24871: LD_VAR 0 3
24875: PPUSH
24876: CALL_OW 256
24880: PUSH
24881: LD_INT 1000
24883: LESS
24884: IFFALSE 24898
// SetLives ( un , 1000 ) ;
24886: LD_VAR 0 3
24890: PPUSH
24891: LD_INT 1000
24893: PPUSH
24894: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24898: LD_VAR 0 3
24902: PPUSH
24903: LD_INT 81
24905: PUSH
24906: LD_OWVAR 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 91
24917: PUSH
24918: LD_VAR 0 3
24922: PUSH
24923: LD_INT 30
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: LIST
24930: PUSH
24931: EMPTY
24932: LIST
24933: LIST
24934: PPUSH
24935: CALL_OW 69
24939: PPUSH
24940: LD_VAR 0 3
24944: PPUSH
24945: CALL_OW 74
24949: PPUSH
24950: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24954: LD_VAR 0 2
24958: PUSH
24959: LD_INT 80
24961: GREATER
24962: PUSH
24963: LD_VAR 0 3
24967: PPUSH
24968: CALL_OW 301
24972: OR
24973: IFFALSE 24850
// if un then
24975: LD_VAR 0 3
24979: IFFALSE 24990
// RemoveUnit ( un ) ;
24981: LD_VAR 0 3
24985: PPUSH
24986: CALL_OW 64
// end ;
24990: PPOPN 3
24992: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24993: LD_EXP 87
24997: IFFALSE 25113
24999: GO 25001
25001: DISABLE
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
25006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25007: LD_ADDR_VAR 0 2
25011: PUSH
25012: LD_INT 81
25014: PUSH
25015: LD_OWVAR 2
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 21
25026: PUSH
25027: LD_INT 1
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PPUSH
25038: CALL_OW 69
25042: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25043: LD_STRING playComputer()
25045: PPUSH
25046: CALL_OW 559
// if not tmp then
25050: LD_VAR 0 2
25054: NOT
25055: IFFALSE 25059
// exit ;
25057: GO 25113
// for i in tmp do
25059: LD_ADDR_VAR 0 1
25063: PUSH
25064: LD_VAR 0 2
25068: PUSH
25069: FOR_IN
25070: IFFALSE 25111
// for j := 1 to 4 do
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: DOUBLE
25078: LD_INT 1
25080: DEC
25081: ST_TO_ADDR
25082: LD_INT 4
25084: PUSH
25085: FOR_TO
25086: IFFALSE 25107
// SetSkill ( i , j , 10 ) ;
25088: LD_VAR 0 1
25092: PPUSH
25093: LD_VAR 0 3
25097: PPUSH
25098: LD_INT 10
25100: PPUSH
25101: CALL_OW 237
25105: GO 25085
25107: POP
25108: POP
25109: GO 25069
25111: POP
25112: POP
// end ;
25113: PPOPN 3
25115: END
// every 0 0$1 trigger s30 do var i , tmp ;
25116: LD_EXP 88
25120: IFFALSE 25189
25122: GO 25124
25124: DISABLE
25125: LD_INT 0
25127: PPUSH
25128: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PPUSH
25146: CALL_OW 69
25150: ST_TO_ADDR
// if not tmp then
25151: LD_VAR 0 2
25155: NOT
25156: IFFALSE 25160
// exit ;
25158: GO 25189
// for i in tmp do
25160: LD_ADDR_VAR 0 1
25164: PUSH
25165: LD_VAR 0 2
25169: PUSH
25170: FOR_IN
25171: IFFALSE 25187
// SetLives ( i , 300 ) ;
25173: LD_VAR 0 1
25177: PPUSH
25178: LD_INT 300
25180: PPUSH
25181: CALL_OW 234
25185: GO 25170
25187: POP
25188: POP
// end ;
25189: PPOPN 2
25191: END
// every 0 0$1 trigger s60 do var i , tmp ;
25192: LD_EXP 89
25196: IFFALSE 25265
25198: GO 25200
25200: DISABLE
25201: LD_INT 0
25203: PPUSH
25204: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25205: LD_ADDR_VAR 0 2
25209: PUSH
25210: LD_INT 22
25212: PUSH
25213: LD_OWVAR 2
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PPUSH
25222: CALL_OW 69
25226: ST_TO_ADDR
// if not tmp then
25227: LD_VAR 0 2
25231: NOT
25232: IFFALSE 25236
// exit ;
25234: GO 25265
// for i in tmp do
25236: LD_ADDR_VAR 0 1
25240: PUSH
25241: LD_VAR 0 2
25245: PUSH
25246: FOR_IN
25247: IFFALSE 25263
// SetLives ( i , 600 ) ;
25249: LD_VAR 0 1
25253: PPUSH
25254: LD_INT 600
25256: PPUSH
25257: CALL_OW 234
25261: GO 25246
25263: POP
25264: POP
// end ;
25265: PPOPN 2
25267: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25268: LD_INT 0
25270: PPUSH
// case cmd of 301 :
25271: LD_VAR 0 1
25275: PUSH
25276: LD_INT 301
25278: DOUBLE
25279: EQUAL
25280: IFTRUE 25284
25282: GO 25316
25284: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25285: LD_VAR 0 6
25289: PPUSH
25290: LD_VAR 0 7
25294: PPUSH
25295: LD_VAR 0 8
25299: PPUSH
25300: LD_VAR 0 4
25304: PPUSH
25305: LD_VAR 0 5
25309: PPUSH
25310: CALL 26517 0 5
25314: GO 25437
25316: LD_INT 302
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25361
25324: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25325: LD_VAR 0 6
25329: PPUSH
25330: LD_VAR 0 7
25334: PPUSH
25335: LD_VAR 0 8
25339: PPUSH
25340: LD_VAR 0 9
25344: PPUSH
25345: LD_VAR 0 4
25349: PPUSH
25350: LD_VAR 0 5
25354: PPUSH
25355: CALL 26608 0 6
25359: GO 25437
25361: LD_INT 303
25363: DOUBLE
25364: EQUAL
25365: IFTRUE 25369
25367: GO 25406
25369: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25370: LD_VAR 0 6
25374: PPUSH
25375: LD_VAR 0 7
25379: PPUSH
25380: LD_VAR 0 8
25384: PPUSH
25385: LD_VAR 0 9
25389: PPUSH
25390: LD_VAR 0 4
25394: PPUSH
25395: LD_VAR 0 5
25399: PPUSH
25400: CALL 25442 0 6
25404: GO 25437
25406: LD_INT 304
25408: DOUBLE
25409: EQUAL
25410: IFTRUE 25414
25412: GO 25436
25414: POP
// hHackTeleport ( unit , x , y ) ; end ;
25415: LD_VAR 0 2
25419: PPUSH
25420: LD_VAR 0 4
25424: PPUSH
25425: LD_VAR 0 5
25429: PPUSH
25430: CALL 27201 0 3
25434: GO 25437
25436: POP
// end ;
25437: LD_VAR 0 12
25441: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25442: LD_INT 0
25444: PPUSH
25445: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25446: LD_VAR 0 1
25450: PUSH
25451: LD_INT 1
25453: LESS
25454: PUSH
25455: LD_VAR 0 1
25459: PUSH
25460: LD_INT 3
25462: GREATER
25463: OR
25464: PUSH
25465: LD_VAR 0 5
25469: PPUSH
25470: LD_VAR 0 6
25474: PPUSH
25475: CALL_OW 428
25479: OR
25480: IFFALSE 25484
// exit ;
25482: GO 26204
// uc_side := your_side ;
25484: LD_ADDR_OWVAR 20
25488: PUSH
25489: LD_OWVAR 2
25493: ST_TO_ADDR
// uc_nation := nation ;
25494: LD_ADDR_OWVAR 21
25498: PUSH
25499: LD_VAR 0 1
25503: ST_TO_ADDR
// bc_level = 1 ;
25504: LD_ADDR_OWVAR 43
25508: PUSH
25509: LD_INT 1
25511: ST_TO_ADDR
// case btype of 1 :
25512: LD_VAR 0 2
25516: PUSH
25517: LD_INT 1
25519: DOUBLE
25520: EQUAL
25521: IFTRUE 25525
25523: GO 25536
25525: POP
// bc_type := b_depot ; 2 :
25526: LD_ADDR_OWVAR 42
25530: PUSH
25531: LD_INT 0
25533: ST_TO_ADDR
25534: GO 26148
25536: LD_INT 2
25538: DOUBLE
25539: EQUAL
25540: IFTRUE 25544
25542: GO 25555
25544: POP
// bc_type := b_warehouse ; 3 :
25545: LD_ADDR_OWVAR 42
25549: PUSH
25550: LD_INT 1
25552: ST_TO_ADDR
25553: GO 26148
25555: LD_INT 3
25557: DOUBLE
25558: EQUAL
25559: IFTRUE 25563
25561: GO 25574
25563: POP
// bc_type := b_lab ; 4 .. 9 :
25564: LD_ADDR_OWVAR 42
25568: PUSH
25569: LD_INT 6
25571: ST_TO_ADDR
25572: GO 26148
25574: LD_INT 4
25576: DOUBLE
25577: GREATEREQUAL
25578: IFFALSE 25586
25580: LD_INT 9
25582: DOUBLE
25583: LESSEQUAL
25584: IFTRUE 25588
25586: GO 25640
25588: POP
// begin bc_type := b_lab_half ;
25589: LD_ADDR_OWVAR 42
25593: PUSH
25594: LD_INT 7
25596: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25597: LD_ADDR_OWVAR 44
25601: PUSH
25602: LD_INT 10
25604: PUSH
25605: LD_INT 11
25607: PUSH
25608: LD_INT 12
25610: PUSH
25611: LD_INT 15
25613: PUSH
25614: LD_INT 14
25616: PUSH
25617: LD_INT 13
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: LIST
25624: LIST
25625: LIST
25626: LIST
25627: PUSH
25628: LD_VAR 0 2
25632: PUSH
25633: LD_INT 3
25635: MINUS
25636: ARRAY
25637: ST_TO_ADDR
// end ; 10 .. 13 :
25638: GO 26148
25640: LD_INT 10
25642: DOUBLE
25643: GREATEREQUAL
25644: IFFALSE 25652
25646: LD_INT 13
25648: DOUBLE
25649: LESSEQUAL
25650: IFTRUE 25654
25652: GO 25731
25654: POP
// begin bc_type := b_lab_full ;
25655: LD_ADDR_OWVAR 42
25659: PUSH
25660: LD_INT 8
25662: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25663: LD_ADDR_OWVAR 44
25667: PUSH
25668: LD_INT 10
25670: PUSH
25671: LD_INT 12
25673: PUSH
25674: LD_INT 14
25676: PUSH
25677: LD_INT 13
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: PUSH
25686: LD_VAR 0 2
25690: PUSH
25691: LD_INT 9
25693: MINUS
25694: ARRAY
25695: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25696: LD_ADDR_OWVAR 45
25700: PUSH
25701: LD_INT 11
25703: PUSH
25704: LD_INT 15
25706: PUSH
25707: LD_INT 12
25709: PUSH
25710: LD_INT 15
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: PUSH
25719: LD_VAR 0 2
25723: PUSH
25724: LD_INT 9
25726: MINUS
25727: ARRAY
25728: ST_TO_ADDR
// end ; 14 :
25729: GO 26148
25731: LD_INT 14
25733: DOUBLE
25734: EQUAL
25735: IFTRUE 25739
25737: GO 25750
25739: POP
// bc_type := b_workshop ; 15 :
25740: LD_ADDR_OWVAR 42
25744: PUSH
25745: LD_INT 2
25747: ST_TO_ADDR
25748: GO 26148
25750: LD_INT 15
25752: DOUBLE
25753: EQUAL
25754: IFTRUE 25758
25756: GO 25769
25758: POP
// bc_type := b_factory ; 16 :
25759: LD_ADDR_OWVAR 42
25763: PUSH
25764: LD_INT 3
25766: ST_TO_ADDR
25767: GO 26148
25769: LD_INT 16
25771: DOUBLE
25772: EQUAL
25773: IFTRUE 25777
25775: GO 25788
25777: POP
// bc_type := b_ext_gun ; 17 :
25778: LD_ADDR_OWVAR 42
25782: PUSH
25783: LD_INT 17
25785: ST_TO_ADDR
25786: GO 26148
25788: LD_INT 17
25790: DOUBLE
25791: EQUAL
25792: IFTRUE 25796
25794: GO 25824
25796: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25797: LD_ADDR_OWVAR 42
25801: PUSH
25802: LD_INT 19
25804: PUSH
25805: LD_INT 23
25807: PUSH
25808: LD_INT 19
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: PUSH
25816: LD_VAR 0 1
25820: ARRAY
25821: ST_TO_ADDR
25822: GO 26148
25824: LD_INT 18
25826: DOUBLE
25827: EQUAL
25828: IFTRUE 25832
25830: GO 25843
25832: POP
// bc_type := b_ext_radar ; 19 :
25833: LD_ADDR_OWVAR 42
25837: PUSH
25838: LD_INT 20
25840: ST_TO_ADDR
25841: GO 26148
25843: LD_INT 19
25845: DOUBLE
25846: EQUAL
25847: IFTRUE 25851
25849: GO 25862
25851: POP
// bc_type := b_ext_radio ; 20 :
25852: LD_ADDR_OWVAR 42
25856: PUSH
25857: LD_INT 22
25859: ST_TO_ADDR
25860: GO 26148
25862: LD_INT 20
25864: DOUBLE
25865: EQUAL
25866: IFTRUE 25870
25868: GO 25881
25870: POP
// bc_type := b_ext_siberium ; 21 :
25871: LD_ADDR_OWVAR 42
25875: PUSH
25876: LD_INT 21
25878: ST_TO_ADDR
25879: GO 26148
25881: LD_INT 21
25883: DOUBLE
25884: EQUAL
25885: IFTRUE 25889
25887: GO 25900
25889: POP
// bc_type := b_ext_computer ; 22 :
25890: LD_ADDR_OWVAR 42
25894: PUSH
25895: LD_INT 24
25897: ST_TO_ADDR
25898: GO 26148
25900: LD_INT 22
25902: DOUBLE
25903: EQUAL
25904: IFTRUE 25908
25906: GO 25919
25908: POP
// bc_type := b_ext_track ; 23 :
25909: LD_ADDR_OWVAR 42
25913: PUSH
25914: LD_INT 16
25916: ST_TO_ADDR
25917: GO 26148
25919: LD_INT 23
25921: DOUBLE
25922: EQUAL
25923: IFTRUE 25927
25925: GO 25938
25927: POP
// bc_type := b_ext_laser ; 24 :
25928: LD_ADDR_OWVAR 42
25932: PUSH
25933: LD_INT 25
25935: ST_TO_ADDR
25936: GO 26148
25938: LD_INT 24
25940: DOUBLE
25941: EQUAL
25942: IFTRUE 25946
25944: GO 25957
25946: POP
// bc_type := b_control_tower ; 25 :
25947: LD_ADDR_OWVAR 42
25951: PUSH
25952: LD_INT 36
25954: ST_TO_ADDR
25955: GO 26148
25957: LD_INT 25
25959: DOUBLE
25960: EQUAL
25961: IFTRUE 25965
25963: GO 25976
25965: POP
// bc_type := b_breastwork ; 26 :
25966: LD_ADDR_OWVAR 42
25970: PUSH
25971: LD_INT 31
25973: ST_TO_ADDR
25974: GO 26148
25976: LD_INT 26
25978: DOUBLE
25979: EQUAL
25980: IFTRUE 25984
25982: GO 25995
25984: POP
// bc_type := b_bunker ; 27 :
25985: LD_ADDR_OWVAR 42
25989: PUSH
25990: LD_INT 32
25992: ST_TO_ADDR
25993: GO 26148
25995: LD_INT 27
25997: DOUBLE
25998: EQUAL
25999: IFTRUE 26003
26001: GO 26014
26003: POP
// bc_type := b_turret ; 28 :
26004: LD_ADDR_OWVAR 42
26008: PUSH
26009: LD_INT 33
26011: ST_TO_ADDR
26012: GO 26148
26014: LD_INT 28
26016: DOUBLE
26017: EQUAL
26018: IFTRUE 26022
26020: GO 26033
26022: POP
// bc_type := b_armoury ; 29 :
26023: LD_ADDR_OWVAR 42
26027: PUSH
26028: LD_INT 4
26030: ST_TO_ADDR
26031: GO 26148
26033: LD_INT 29
26035: DOUBLE
26036: EQUAL
26037: IFTRUE 26041
26039: GO 26052
26041: POP
// bc_type := b_barracks ; 30 :
26042: LD_ADDR_OWVAR 42
26046: PUSH
26047: LD_INT 5
26049: ST_TO_ADDR
26050: GO 26148
26052: LD_INT 30
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26071
26060: POP
// bc_type := b_solar_power ; 31 :
26061: LD_ADDR_OWVAR 42
26065: PUSH
26066: LD_INT 27
26068: ST_TO_ADDR
26069: GO 26148
26071: LD_INT 31
26073: DOUBLE
26074: EQUAL
26075: IFTRUE 26079
26077: GO 26090
26079: POP
// bc_type := b_oil_power ; 32 :
26080: LD_ADDR_OWVAR 42
26084: PUSH
26085: LD_INT 26
26087: ST_TO_ADDR
26088: GO 26148
26090: LD_INT 32
26092: DOUBLE
26093: EQUAL
26094: IFTRUE 26098
26096: GO 26109
26098: POP
// bc_type := b_siberite_power ; 33 :
26099: LD_ADDR_OWVAR 42
26103: PUSH
26104: LD_INT 28
26106: ST_TO_ADDR
26107: GO 26148
26109: LD_INT 33
26111: DOUBLE
26112: EQUAL
26113: IFTRUE 26117
26115: GO 26128
26117: POP
// bc_type := b_oil_mine ; 34 :
26118: LD_ADDR_OWVAR 42
26122: PUSH
26123: LD_INT 29
26125: ST_TO_ADDR
26126: GO 26148
26128: LD_INT 34
26130: DOUBLE
26131: EQUAL
26132: IFTRUE 26136
26134: GO 26147
26136: POP
// bc_type := b_siberite_mine ; end ;
26137: LD_ADDR_OWVAR 42
26141: PUSH
26142: LD_INT 30
26144: ST_TO_ADDR
26145: GO 26148
26147: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26148: LD_ADDR_VAR 0 8
26152: PUSH
26153: LD_VAR 0 5
26157: PPUSH
26158: LD_VAR 0 6
26162: PPUSH
26163: LD_VAR 0 3
26167: PPUSH
26168: CALL_OW 47
26172: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26173: LD_OWVAR 42
26177: PUSH
26178: LD_INT 32
26180: PUSH
26181: LD_INT 33
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: IN
26188: IFFALSE 26204
// PlaceWeaponTurret ( b , weapon ) ;
26190: LD_VAR 0 8
26194: PPUSH
26195: LD_VAR 0 4
26199: PPUSH
26200: CALL_OW 431
// end ;
26204: LD_VAR 0 7
26208: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26209: LD_INT 0
26211: PPUSH
26212: PPUSH
26213: PPUSH
26214: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26215: LD_ADDR_VAR 0 4
26219: PUSH
26220: LD_INT 22
26222: PUSH
26223: LD_OWVAR 2
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: LD_INT 30
26237: PUSH
26238: LD_INT 0
26240: PUSH
26241: EMPTY
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 30
26247: PUSH
26248: LD_INT 1
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 69
26268: ST_TO_ADDR
// if not tmp then
26269: LD_VAR 0 4
26273: NOT
26274: IFFALSE 26278
// exit ;
26276: GO 26337
// for i in tmp do
26278: LD_ADDR_VAR 0 2
26282: PUSH
26283: LD_VAR 0 4
26287: PUSH
26288: FOR_IN
26289: IFFALSE 26335
// for j = 1 to 3 do
26291: LD_ADDR_VAR 0 3
26295: PUSH
26296: DOUBLE
26297: LD_INT 1
26299: DEC
26300: ST_TO_ADDR
26301: LD_INT 3
26303: PUSH
26304: FOR_TO
26305: IFFALSE 26331
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26307: LD_VAR 0 2
26311: PPUSH
26312: CALL_OW 274
26316: PPUSH
26317: LD_VAR 0 3
26321: PPUSH
26322: LD_INT 99999
26324: PPUSH
26325: CALL_OW 277
26329: GO 26304
26331: POP
26332: POP
26333: GO 26288
26335: POP
26336: POP
// end ;
26337: LD_VAR 0 1
26341: RET
// export function hHackSetLevel10 ; var i , j ; begin
26342: LD_INT 0
26344: PPUSH
26345: PPUSH
26346: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26347: LD_ADDR_VAR 0 2
26351: PUSH
26352: LD_INT 21
26354: PUSH
26355: LD_INT 1
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PPUSH
26362: CALL_OW 69
26366: PUSH
26367: FOR_IN
26368: IFFALSE 26420
// if IsSelected ( i ) then
26370: LD_VAR 0 2
26374: PPUSH
26375: CALL_OW 306
26379: IFFALSE 26418
// begin for j := 1 to 4 do
26381: LD_ADDR_VAR 0 3
26385: PUSH
26386: DOUBLE
26387: LD_INT 1
26389: DEC
26390: ST_TO_ADDR
26391: LD_INT 4
26393: PUSH
26394: FOR_TO
26395: IFFALSE 26416
// SetSkill ( i , j , 10 ) ;
26397: LD_VAR 0 2
26401: PPUSH
26402: LD_VAR 0 3
26406: PPUSH
26407: LD_INT 10
26409: PPUSH
26410: CALL_OW 237
26414: GO 26394
26416: POP
26417: POP
// end ;
26418: GO 26367
26420: POP
26421: POP
// end ;
26422: LD_VAR 0 1
26426: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26427: LD_INT 0
26429: PPUSH
26430: PPUSH
26431: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26432: LD_ADDR_VAR 0 2
26436: PUSH
26437: LD_INT 22
26439: PUSH
26440: LD_OWVAR 2
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 21
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 69
26467: PUSH
26468: FOR_IN
26469: IFFALSE 26510
// begin for j := 1 to 4 do
26471: LD_ADDR_VAR 0 3
26475: PUSH
26476: DOUBLE
26477: LD_INT 1
26479: DEC
26480: ST_TO_ADDR
26481: LD_INT 4
26483: PUSH
26484: FOR_TO
26485: IFFALSE 26506
// SetSkill ( i , j , 10 ) ;
26487: LD_VAR 0 2
26491: PPUSH
26492: LD_VAR 0 3
26496: PPUSH
26497: LD_INT 10
26499: PPUSH
26500: CALL_OW 237
26504: GO 26484
26506: POP
26507: POP
// end ;
26508: GO 26468
26510: POP
26511: POP
// end ;
26512: LD_VAR 0 1
26516: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26517: LD_INT 0
26519: PPUSH
// uc_side := your_side ;
26520: LD_ADDR_OWVAR 20
26524: PUSH
26525: LD_OWVAR 2
26529: ST_TO_ADDR
// uc_nation := nation ;
26530: LD_ADDR_OWVAR 21
26534: PUSH
26535: LD_VAR 0 1
26539: ST_TO_ADDR
// InitHc ;
26540: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26544: LD_INT 0
26546: PPUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: LD_VAR 0 3
26556: PPUSH
26557: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26561: LD_VAR 0 4
26565: PPUSH
26566: LD_VAR 0 5
26570: PPUSH
26571: CALL_OW 428
26575: PUSH
26576: LD_INT 0
26578: EQUAL
26579: IFFALSE 26603
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26581: CALL_OW 44
26585: PPUSH
26586: LD_VAR 0 4
26590: PPUSH
26591: LD_VAR 0 5
26595: PPUSH
26596: LD_INT 1
26598: PPUSH
26599: CALL_OW 48
// end ;
26603: LD_VAR 0 6
26607: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26608: LD_INT 0
26610: PPUSH
26611: PPUSH
// uc_side := your_side ;
26612: LD_ADDR_OWVAR 20
26616: PUSH
26617: LD_OWVAR 2
26621: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26622: LD_VAR 0 1
26626: PUSH
26627: LD_INT 1
26629: PUSH
26630: LD_INT 2
26632: PUSH
26633: LD_INT 3
26635: PUSH
26636: LD_INT 4
26638: PUSH
26639: LD_INT 5
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: IN
26649: IFFALSE 26661
// uc_nation := nation_american else
26651: LD_ADDR_OWVAR 21
26655: PUSH
26656: LD_INT 1
26658: ST_TO_ADDR
26659: GO 26704
// if chassis in [ 11 , 12 , 13 , 14 ] then
26661: LD_VAR 0 1
26665: PUSH
26666: LD_INT 11
26668: PUSH
26669: LD_INT 12
26671: PUSH
26672: LD_INT 13
26674: PUSH
26675: LD_INT 14
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: IN
26684: IFFALSE 26696
// uc_nation := nation_arabian else
26686: LD_ADDR_OWVAR 21
26690: PUSH
26691: LD_INT 2
26693: ST_TO_ADDR
26694: GO 26704
// uc_nation := nation_russian ;
26696: LD_ADDR_OWVAR 21
26700: PUSH
26701: LD_INT 3
26703: ST_TO_ADDR
// vc_chassis := chassis ;
26704: LD_ADDR_OWVAR 37
26708: PUSH
26709: LD_VAR 0 1
26713: ST_TO_ADDR
// vc_engine := engine ;
26714: LD_ADDR_OWVAR 39
26718: PUSH
26719: LD_VAR 0 2
26723: ST_TO_ADDR
// vc_control := control ;
26724: LD_ADDR_OWVAR 38
26728: PUSH
26729: LD_VAR 0 3
26733: ST_TO_ADDR
// vc_weapon := weapon ;
26734: LD_ADDR_OWVAR 40
26738: PUSH
26739: LD_VAR 0 4
26743: ST_TO_ADDR
// un := CreateVehicle ;
26744: LD_ADDR_VAR 0 8
26748: PUSH
26749: CALL_OW 45
26753: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26754: LD_VAR 0 8
26758: PPUSH
26759: LD_INT 0
26761: PPUSH
26762: LD_INT 5
26764: PPUSH
26765: CALL_OW 12
26769: PPUSH
26770: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26774: LD_VAR 0 8
26778: PPUSH
26779: LD_VAR 0 5
26783: PPUSH
26784: LD_VAR 0 6
26788: PPUSH
26789: LD_INT 1
26791: PPUSH
26792: CALL_OW 48
// end ;
26796: LD_VAR 0 7
26800: RET
// export hInvincible ; every 1 do
26801: GO 26803
26803: DISABLE
// hInvincible := [ ] ;
26804: LD_ADDR_EXP 90
26808: PUSH
26809: EMPTY
26810: ST_TO_ADDR
26811: END
// every 10 do var i ;
26812: GO 26814
26814: DISABLE
26815: LD_INT 0
26817: PPUSH
// begin enable ;
26818: ENABLE
// if not hInvincible then
26819: LD_EXP 90
26823: NOT
26824: IFFALSE 26828
// exit ;
26826: GO 26872
// for i in hInvincible do
26828: LD_ADDR_VAR 0 1
26832: PUSH
26833: LD_EXP 90
26837: PUSH
26838: FOR_IN
26839: IFFALSE 26870
// if GetLives ( i ) < 1000 then
26841: LD_VAR 0 1
26845: PPUSH
26846: CALL_OW 256
26850: PUSH
26851: LD_INT 1000
26853: LESS
26854: IFFALSE 26868
// SetLives ( i , 1000 ) ;
26856: LD_VAR 0 1
26860: PPUSH
26861: LD_INT 1000
26863: PPUSH
26864: CALL_OW 234
26868: GO 26838
26870: POP
26871: POP
// end ;
26872: PPOPN 1
26874: END
// export function hHackInvincible ; var i ; begin
26875: LD_INT 0
26877: PPUSH
26878: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26879: LD_ADDR_VAR 0 2
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: LD_INT 21
26889: PUSH
26890: LD_INT 1
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 21
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: LIST
26911: PPUSH
26912: CALL_OW 69
26916: PUSH
26917: FOR_IN
26918: IFFALSE 26979
// if IsSelected ( i ) then
26920: LD_VAR 0 2
26924: PPUSH
26925: CALL_OW 306
26929: IFFALSE 26977
// begin if i in hInvincible then
26931: LD_VAR 0 2
26935: PUSH
26936: LD_EXP 90
26940: IN
26941: IFFALSE 26961
// hInvincible := hInvincible diff i else
26943: LD_ADDR_EXP 90
26947: PUSH
26948: LD_EXP 90
26952: PUSH
26953: LD_VAR 0 2
26957: DIFF
26958: ST_TO_ADDR
26959: GO 26977
// hInvincible := hInvincible union i ;
26961: LD_ADDR_EXP 90
26965: PUSH
26966: LD_EXP 90
26970: PUSH
26971: LD_VAR 0 2
26975: UNION
26976: ST_TO_ADDR
// end ;
26977: GO 26917
26979: POP
26980: POP
// end ;
26981: LD_VAR 0 1
26985: RET
// export function hHackInvisible ; var i , j ; begin
26986: LD_INT 0
26988: PPUSH
26989: PPUSH
26990: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26991: LD_ADDR_VAR 0 2
26995: PUSH
26996: LD_INT 21
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PPUSH
27006: CALL_OW 69
27010: PUSH
27011: FOR_IN
27012: IFFALSE 27036
// if IsSelected ( i ) then
27014: LD_VAR 0 2
27018: PPUSH
27019: CALL_OW 306
27023: IFFALSE 27034
// ComForceInvisible ( i ) ;
27025: LD_VAR 0 2
27029: PPUSH
27030: CALL_OW 496
27034: GO 27011
27036: POP
27037: POP
// end ;
27038: LD_VAR 0 1
27042: RET
// export function hHackChangeYourSide ; begin
27043: LD_INT 0
27045: PPUSH
// if your_side = 8 then
27046: LD_OWVAR 2
27050: PUSH
27051: LD_INT 8
27053: EQUAL
27054: IFFALSE 27066
// your_side := 0 else
27056: LD_ADDR_OWVAR 2
27060: PUSH
27061: LD_INT 0
27063: ST_TO_ADDR
27064: GO 27080
// your_side := your_side + 1 ;
27066: LD_ADDR_OWVAR 2
27070: PUSH
27071: LD_OWVAR 2
27075: PUSH
27076: LD_INT 1
27078: PLUS
27079: ST_TO_ADDR
// end ;
27080: LD_VAR 0 1
27084: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27085: LD_INT 0
27087: PPUSH
27088: PPUSH
27089: PPUSH
// for i in all_units do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: LD_OWVAR 3
27099: PUSH
27100: FOR_IN
27101: IFFALSE 27179
// if IsSelected ( i ) then
27103: LD_VAR 0 2
27107: PPUSH
27108: CALL_OW 306
27112: IFFALSE 27177
// begin j := GetSide ( i ) ;
27114: LD_ADDR_VAR 0 3
27118: PUSH
27119: LD_VAR 0 2
27123: PPUSH
27124: CALL_OW 255
27128: ST_TO_ADDR
// if j = 8 then
27129: LD_VAR 0 3
27133: PUSH
27134: LD_INT 8
27136: EQUAL
27137: IFFALSE 27149
// j := 0 else
27139: LD_ADDR_VAR 0 3
27143: PUSH
27144: LD_INT 0
27146: ST_TO_ADDR
27147: GO 27163
// j := j + 1 ;
27149: LD_ADDR_VAR 0 3
27153: PUSH
27154: LD_VAR 0 3
27158: PUSH
27159: LD_INT 1
27161: PLUS
27162: ST_TO_ADDR
// SetSide ( i , j ) ;
27163: LD_VAR 0 2
27167: PPUSH
27168: LD_VAR 0 3
27172: PPUSH
27173: CALL_OW 235
// end ;
27177: GO 27100
27179: POP
27180: POP
// end ;
27181: LD_VAR 0 1
27185: RET
// export function hHackFog ; begin
27186: LD_INT 0
27188: PPUSH
// FogOff ( true ) ;
27189: LD_INT 1
27191: PPUSH
27192: CALL_OW 344
// end ;
27196: LD_VAR 0 1
27200: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27201: LD_INT 0
27203: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27204: LD_VAR 0 1
27208: PPUSH
27209: LD_VAR 0 2
27213: PPUSH
27214: LD_VAR 0 3
27218: PPUSH
27219: LD_INT 1
27221: PPUSH
27222: LD_INT 1
27224: PPUSH
27225: CALL_OW 483
// CenterOnXY ( x , y ) ;
27229: LD_VAR 0 2
27233: PPUSH
27234: LD_VAR 0 3
27238: PPUSH
27239: CALL_OW 84
// end ;
27243: LD_VAR 0 4
27247: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27248: LD_INT 0
27250: PPUSH
27251: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27252: LD_VAR 0 1
27256: NOT
27257: PUSH
27258: LD_VAR 0 2
27262: PPUSH
27263: LD_VAR 0 3
27267: PPUSH
27268: CALL_OW 488
27272: NOT
27273: OR
27274: PUSH
27275: LD_VAR 0 1
27279: PPUSH
27280: CALL_OW 266
27284: PUSH
27285: LD_INT 3
27287: NONEQUAL
27288: PUSH
27289: LD_VAR 0 1
27293: PPUSH
27294: CALL_OW 247
27298: PUSH
27299: LD_INT 1
27301: EQUAL
27302: NOT
27303: AND
27304: OR
27305: IFFALSE 27309
// exit ;
27307: GO 27458
// if GetType ( factory ) = unit_human then
27309: LD_VAR 0 1
27313: PPUSH
27314: CALL_OW 247
27318: PUSH
27319: LD_INT 1
27321: EQUAL
27322: IFFALSE 27339
// factory := IsInUnit ( factory ) ;
27324: LD_ADDR_VAR 0 1
27328: PUSH
27329: LD_VAR 0 1
27333: PPUSH
27334: CALL_OW 310
27338: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27339: LD_VAR 0 1
27343: PPUSH
27344: CALL_OW 266
27348: PUSH
27349: LD_INT 3
27351: NONEQUAL
27352: IFFALSE 27356
// exit ;
27354: GO 27458
// if HexInfo ( x , y ) = factory then
27356: LD_VAR 0 2
27360: PPUSH
27361: LD_VAR 0 3
27365: PPUSH
27366: CALL_OW 428
27370: PUSH
27371: LD_VAR 0 1
27375: EQUAL
27376: IFFALSE 27403
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27378: LD_ADDR_EXP 91
27382: PUSH
27383: LD_EXP 91
27387: PPUSH
27388: LD_VAR 0 1
27392: PPUSH
27393: LD_INT 0
27395: PPUSH
27396: CALL_OW 1
27400: ST_TO_ADDR
27401: GO 27454
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27403: LD_ADDR_EXP 91
27407: PUSH
27408: LD_EXP 91
27412: PPUSH
27413: LD_VAR 0 1
27417: PPUSH
27418: LD_VAR 0 1
27422: PPUSH
27423: CALL_OW 255
27427: PUSH
27428: LD_VAR 0 1
27432: PUSH
27433: LD_VAR 0 2
27437: PUSH
27438: LD_VAR 0 3
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: PPUSH
27449: CALL_OW 1
27453: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27454: CALL 27463 0 0
// end ;
27458: LD_VAR 0 4
27462: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27463: LD_INT 0
27465: PPUSH
27466: PPUSH
27467: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27468: LD_STRING resetFactoryWaypoint();
27470: PPUSH
27471: CALL_OW 559
// if factoryWaypoints then
27475: LD_EXP 91
27479: IFFALSE 27605
// begin list := PrepareArray ( factoryWaypoints ) ;
27481: LD_ADDR_VAR 0 3
27485: PUSH
27486: LD_EXP 91
27490: PPUSH
27491: CALL 74074 0 1
27495: ST_TO_ADDR
// for i := 1 to list do
27496: LD_ADDR_VAR 0 2
27500: PUSH
27501: DOUBLE
27502: LD_INT 1
27504: DEC
27505: ST_TO_ADDR
27506: LD_VAR 0 3
27510: PUSH
27511: FOR_TO
27512: IFFALSE 27603
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27514: LD_STRING setFactoryWaypointXY(
27516: PUSH
27517: LD_VAR 0 3
27521: PUSH
27522: LD_VAR 0 2
27526: ARRAY
27527: PUSH
27528: LD_INT 1
27530: ARRAY
27531: STR
27532: PUSH
27533: LD_STRING ,
27535: STR
27536: PUSH
27537: LD_VAR 0 3
27541: PUSH
27542: LD_VAR 0 2
27546: ARRAY
27547: PUSH
27548: LD_INT 2
27550: ARRAY
27551: STR
27552: PUSH
27553: LD_STRING ,
27555: STR
27556: PUSH
27557: LD_VAR 0 3
27561: PUSH
27562: LD_VAR 0 2
27566: ARRAY
27567: PUSH
27568: LD_INT 3
27570: ARRAY
27571: STR
27572: PUSH
27573: LD_STRING ,
27575: STR
27576: PUSH
27577: LD_VAR 0 3
27581: PUSH
27582: LD_VAR 0 2
27586: ARRAY
27587: PUSH
27588: LD_INT 4
27590: ARRAY
27591: STR
27592: PUSH
27593: LD_STRING )
27595: STR
27596: PPUSH
27597: CALL_OW 559
27601: GO 27511
27603: POP
27604: POP
// end ; end ;
27605: LD_VAR 0 1
27609: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27610: LD_INT 0
27612: PPUSH
// if HexInfo ( x , y ) = warehouse then
27613: LD_VAR 0 2
27617: PPUSH
27618: LD_VAR 0 3
27622: PPUSH
27623: CALL_OW 428
27627: PUSH
27628: LD_VAR 0 1
27632: EQUAL
27633: IFFALSE 27660
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27635: LD_ADDR_EXP 92
27639: PUSH
27640: LD_EXP 92
27644: PPUSH
27645: LD_VAR 0 1
27649: PPUSH
27650: LD_INT 0
27652: PPUSH
27653: CALL_OW 1
27657: ST_TO_ADDR
27658: GO 27711
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27660: LD_ADDR_EXP 92
27664: PUSH
27665: LD_EXP 92
27669: PPUSH
27670: LD_VAR 0 1
27674: PPUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 255
27684: PUSH
27685: LD_VAR 0 1
27689: PUSH
27690: LD_VAR 0 2
27694: PUSH
27695: LD_VAR 0 3
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: PPUSH
27706: CALL_OW 1
27710: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27711: CALL 27720 0 0
// end ;
27715: LD_VAR 0 4
27719: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27720: LD_INT 0
27722: PPUSH
27723: PPUSH
27724: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27725: LD_STRING resetWarehouseGatheringPoints();
27727: PPUSH
27728: CALL_OW 559
// if warehouseGatheringPoints then
27732: LD_EXP 92
27736: IFFALSE 27862
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27738: LD_ADDR_VAR 0 3
27742: PUSH
27743: LD_EXP 92
27747: PPUSH
27748: CALL 74074 0 1
27752: ST_TO_ADDR
// for i := 1 to list do
27753: LD_ADDR_VAR 0 2
27757: PUSH
27758: DOUBLE
27759: LD_INT 1
27761: DEC
27762: ST_TO_ADDR
27763: LD_VAR 0 3
27767: PUSH
27768: FOR_TO
27769: IFFALSE 27860
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27771: LD_STRING setWarehouseGatheringPointXY(
27773: PUSH
27774: LD_VAR 0 3
27778: PUSH
27779: LD_VAR 0 2
27783: ARRAY
27784: PUSH
27785: LD_INT 1
27787: ARRAY
27788: STR
27789: PUSH
27790: LD_STRING ,
27792: STR
27793: PUSH
27794: LD_VAR 0 3
27798: PUSH
27799: LD_VAR 0 2
27803: ARRAY
27804: PUSH
27805: LD_INT 2
27807: ARRAY
27808: STR
27809: PUSH
27810: LD_STRING ,
27812: STR
27813: PUSH
27814: LD_VAR 0 3
27818: PUSH
27819: LD_VAR 0 2
27823: ARRAY
27824: PUSH
27825: LD_INT 3
27827: ARRAY
27828: STR
27829: PUSH
27830: LD_STRING ,
27832: STR
27833: PUSH
27834: LD_VAR 0 3
27838: PUSH
27839: LD_VAR 0 2
27843: ARRAY
27844: PUSH
27845: LD_INT 4
27847: ARRAY
27848: STR
27849: PUSH
27850: LD_STRING )
27852: STR
27853: PPUSH
27854: CALL_OW 559
27858: GO 27768
27860: POP
27861: POP
// end ; end ;
27862: LD_VAR 0 1
27866: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27867: LD_EXP 92
27871: IFFALSE 28556
27873: GO 27875
27875: DISABLE
27876: LD_INT 0
27878: PPUSH
27879: PPUSH
27880: PPUSH
27881: PPUSH
27882: PPUSH
27883: PPUSH
27884: PPUSH
27885: PPUSH
27886: PPUSH
// begin enable ;
27887: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27888: LD_ADDR_VAR 0 3
27892: PUSH
27893: LD_EXP 92
27897: PPUSH
27898: CALL 74074 0 1
27902: ST_TO_ADDR
// if not list then
27903: LD_VAR 0 3
27907: NOT
27908: IFFALSE 27912
// exit ;
27910: GO 28556
// for i := 1 to list do
27912: LD_ADDR_VAR 0 1
27916: PUSH
27917: DOUBLE
27918: LD_INT 1
27920: DEC
27921: ST_TO_ADDR
27922: LD_VAR 0 3
27926: PUSH
27927: FOR_TO
27928: IFFALSE 28554
// begin depot := list [ i ] [ 2 ] ;
27930: LD_ADDR_VAR 0 8
27934: PUSH
27935: LD_VAR 0 3
27939: PUSH
27940: LD_VAR 0 1
27944: ARRAY
27945: PUSH
27946: LD_INT 2
27948: ARRAY
27949: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27950: LD_ADDR_VAR 0 5
27954: PUSH
27955: LD_VAR 0 3
27959: PUSH
27960: LD_VAR 0 1
27964: ARRAY
27965: PUSH
27966: LD_INT 1
27968: ARRAY
27969: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27970: LD_VAR 0 8
27974: PPUSH
27975: CALL_OW 301
27979: PUSH
27980: LD_VAR 0 5
27984: PUSH
27985: LD_VAR 0 8
27989: PPUSH
27990: CALL_OW 255
27994: NONEQUAL
27995: OR
27996: IFFALSE 28025
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27998: LD_ADDR_EXP 92
28002: PUSH
28003: LD_EXP 92
28007: PPUSH
28008: LD_VAR 0 8
28012: PPUSH
28013: LD_INT 0
28015: PPUSH
28016: CALL_OW 1
28020: ST_TO_ADDR
// exit ;
28021: POP
28022: POP
28023: GO 28556
// end ; x := list [ i ] [ 3 ] ;
28025: LD_ADDR_VAR 0 6
28029: PUSH
28030: LD_VAR 0 3
28034: PUSH
28035: LD_VAR 0 1
28039: ARRAY
28040: PUSH
28041: LD_INT 3
28043: ARRAY
28044: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28045: LD_ADDR_VAR 0 7
28049: PUSH
28050: LD_VAR 0 3
28054: PUSH
28055: LD_VAR 0 1
28059: ARRAY
28060: PUSH
28061: LD_INT 4
28063: ARRAY
28064: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28065: LD_ADDR_VAR 0 9
28069: PUSH
28070: LD_VAR 0 6
28074: PPUSH
28075: LD_VAR 0 7
28079: PPUSH
28080: LD_INT 16
28082: PPUSH
28083: CALL 72662 0 3
28087: ST_TO_ADDR
// if not cratesNearbyPoint then
28088: LD_VAR 0 9
28092: NOT
28093: IFFALSE 28099
// exit ;
28095: POP
28096: POP
28097: GO 28556
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_INT 22
28106: PUSH
28107: LD_VAR 0 5
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 3
28118: PUSH
28119: LD_INT 60
28121: PUSH
28122: EMPTY
28123: LIST
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 91
28131: PUSH
28132: LD_VAR 0 8
28136: PUSH
28137: LD_INT 6
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: LIST
28144: PUSH
28145: LD_INT 2
28147: PUSH
28148: LD_INT 25
28150: PUSH
28151: LD_INT 2
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 25
28160: PUSH
28161: LD_INT 16
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: PPUSH
28179: CALL_OW 69
28183: PUSH
28184: LD_VAR 0 8
28188: PPUSH
28189: CALL_OW 313
28193: PPUSH
28194: LD_INT 3
28196: PUSH
28197: LD_INT 60
28199: PUSH
28200: EMPTY
28201: LIST
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PUSH
28207: LD_INT 2
28209: PUSH
28210: LD_INT 25
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 25
28222: PUSH
28223: LD_INT 16
28225: PUSH
28226: EMPTY
28227: LIST
28228: LIST
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: LIST
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PPUSH
28239: CALL_OW 72
28243: UNION
28244: ST_TO_ADDR
// if tmp then
28245: LD_VAR 0 4
28249: IFFALSE 28329
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28251: LD_ADDR_VAR 0 4
28255: PUSH
28256: LD_VAR 0 4
28260: PPUSH
28261: LD_INT 3
28263: PPUSH
28264: CALL 70631 0 2
28268: ST_TO_ADDR
// for j in tmp do
28269: LD_ADDR_VAR 0 2
28273: PUSH
28274: LD_VAR 0 4
28278: PUSH
28279: FOR_IN
28280: IFFALSE 28323
// begin if IsInUnit ( j ) then
28282: LD_VAR 0 2
28286: PPUSH
28287: CALL_OW 310
28291: IFFALSE 28302
// ComExit ( j ) ;
28293: LD_VAR 0 2
28297: PPUSH
28298: CALL 70714 0 1
// AddComCollect ( j , x , y ) ;
28302: LD_VAR 0 2
28306: PPUSH
28307: LD_VAR 0 6
28311: PPUSH
28312: LD_VAR 0 7
28316: PPUSH
28317: CALL_OW 177
// end ;
28321: GO 28279
28323: POP
28324: POP
// exit ;
28325: POP
28326: POP
28327: GO 28556
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28329: LD_ADDR_VAR 0 4
28333: PUSH
28334: LD_INT 22
28336: PUSH
28337: LD_VAR 0 5
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 91
28348: PUSH
28349: LD_VAR 0 8
28353: PUSH
28354: LD_INT 8
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: LD_INT 34
28367: PUSH
28368: LD_INT 12
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 34
28377: PUSH
28378: LD_INT 51
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: PUSH
28385: LD_INT 34
28387: PUSH
28388: LD_INT 32
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 34
28397: PUSH
28398: LD_INT 89
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: LIST
28416: PPUSH
28417: CALL_OW 69
28421: ST_TO_ADDR
// if tmp then
28422: LD_VAR 0 4
28426: IFFALSE 28552
// begin for j in tmp do
28428: LD_ADDR_VAR 0 2
28432: PUSH
28433: LD_VAR 0 4
28437: PUSH
28438: FOR_IN
28439: IFFALSE 28550
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28441: LD_VAR 0 2
28445: PPUSH
28446: CALL_OW 262
28450: PUSH
28451: LD_INT 3
28453: EQUAL
28454: PUSH
28455: LD_VAR 0 2
28459: PPUSH
28460: CALL_OW 261
28464: PUSH
28465: LD_INT 20
28467: GREATER
28468: OR
28469: PUSH
28470: LD_VAR 0 2
28474: PPUSH
28475: CALL_OW 314
28479: NOT
28480: AND
28481: PUSH
28482: LD_VAR 0 2
28486: PPUSH
28487: CALL_OW 263
28491: PUSH
28492: LD_INT 1
28494: NONEQUAL
28495: PUSH
28496: LD_VAR 0 2
28500: PPUSH
28501: CALL_OW 311
28505: OR
28506: AND
28507: IFFALSE 28548
// begin ComCollect ( j , x , y ) ;
28509: LD_VAR 0 2
28513: PPUSH
28514: LD_VAR 0 6
28518: PPUSH
28519: LD_VAR 0 7
28523: PPUSH
28524: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28528: LD_VAR 0 2
28532: PPUSH
28533: LD_VAR 0 8
28537: PPUSH
28538: CALL_OW 172
// exit ;
28542: POP
28543: POP
28544: POP
28545: POP
28546: GO 28556
// end ;
28548: GO 28438
28550: POP
28551: POP
// end ; end ;
28552: GO 27927
28554: POP
28555: POP
// end ; end_of_file
28556: PPOPN 9
28558: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28559: LD_INT 0
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28565: LD_VAR 0 1
28569: PPUSH
28570: CALL_OW 264
28574: PUSH
28575: LD_INT 91
28577: EQUAL
28578: IFFALSE 28650
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28580: LD_INT 68
28582: PPUSH
28583: LD_VAR 0 1
28587: PPUSH
28588: CALL_OW 255
28592: PPUSH
28593: CALL_OW 321
28597: PUSH
28598: LD_INT 2
28600: EQUAL
28601: IFFALSE 28613
// eff := 70 else
28603: LD_ADDR_VAR 0 4
28607: PUSH
28608: LD_INT 70
28610: ST_TO_ADDR
28611: GO 28621
// eff := 30 ;
28613: LD_ADDR_VAR 0 4
28617: PUSH
28618: LD_INT 30
28620: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 250
28630: PPUSH
28631: LD_VAR 0 1
28635: PPUSH
28636: CALL_OW 251
28640: PPUSH
28641: LD_VAR 0 4
28645: PPUSH
28646: CALL_OW 495
// end ; end ;
28650: LD_VAR 0 2
28654: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28655: LD_INT 0
28657: PPUSH
// end ;
28658: LD_VAR 0 4
28662: RET
// export function SOS_Command ( cmd ) ; begin
28663: LD_INT 0
28665: PPUSH
// end ;
28666: LD_VAR 0 2
28670: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28671: LD_INT 0
28673: PPUSH
// end ;
28674: LD_VAR 0 6
28678: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28679: LD_INT 0
28681: PPUSH
28682: PPUSH
// if not vehicle or not factory then
28683: LD_VAR 0 1
28687: NOT
28688: PUSH
28689: LD_VAR 0 2
28693: NOT
28694: OR
28695: IFFALSE 28699
// exit ;
28697: GO 28930
// if factoryWaypoints >= factory then
28699: LD_EXP 91
28703: PUSH
28704: LD_VAR 0 2
28708: GREATEREQUAL
28709: IFFALSE 28930
// if factoryWaypoints [ factory ] then
28711: LD_EXP 91
28715: PUSH
28716: LD_VAR 0 2
28720: ARRAY
28721: IFFALSE 28930
// begin if GetControl ( vehicle ) = control_manual then
28723: LD_VAR 0 1
28727: PPUSH
28728: CALL_OW 263
28732: PUSH
28733: LD_INT 1
28735: EQUAL
28736: IFFALSE 28817
// begin driver := IsDrivenBy ( vehicle ) ;
28738: LD_ADDR_VAR 0 4
28742: PUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: CALL_OW 311
28752: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28753: LD_VAR 0 4
28757: PPUSH
28758: LD_EXP 91
28762: PUSH
28763: LD_VAR 0 2
28767: ARRAY
28768: PUSH
28769: LD_INT 3
28771: ARRAY
28772: PPUSH
28773: LD_EXP 91
28777: PUSH
28778: LD_VAR 0 2
28782: ARRAY
28783: PUSH
28784: LD_INT 4
28786: ARRAY
28787: PPUSH
28788: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28792: LD_VAR 0 4
28796: PPUSH
28797: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28801: LD_VAR 0 4
28805: PPUSH
28806: LD_VAR 0 2
28810: PPUSH
28811: CALL_OW 180
// end else
28815: GO 28930
// if GetControl ( vehicle ) = control_remote then
28817: LD_VAR 0 1
28821: PPUSH
28822: CALL_OW 263
28826: PUSH
28827: LD_INT 2
28829: EQUAL
28830: IFFALSE 28891
// begin wait ( 0 0$2 ) ;
28832: LD_INT 70
28834: PPUSH
28835: CALL_OW 67
// if Connect ( vehicle ) then
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL 40954 0 1
28848: IFFALSE 28889
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28850: LD_VAR 0 1
28854: PPUSH
28855: LD_EXP 91
28859: PUSH
28860: LD_VAR 0 2
28864: ARRAY
28865: PUSH
28866: LD_INT 3
28868: ARRAY
28869: PPUSH
28870: LD_EXP 91
28874: PUSH
28875: LD_VAR 0 2
28879: ARRAY
28880: PUSH
28881: LD_INT 4
28883: ARRAY
28884: PPUSH
28885: CALL_OW 171
// end else
28889: GO 28930
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28891: LD_VAR 0 1
28895: PPUSH
28896: LD_EXP 91
28900: PUSH
28901: LD_VAR 0 2
28905: ARRAY
28906: PUSH
28907: LD_INT 3
28909: ARRAY
28910: PPUSH
28911: LD_EXP 91
28915: PUSH
28916: LD_VAR 0 2
28920: ARRAY
28921: PUSH
28922: LD_INT 4
28924: ARRAY
28925: PPUSH
28926: CALL_OW 171
// end ; end ;
28930: LD_VAR 0 3
28934: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28935: LD_INT 0
28937: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28938: LD_VAR 0 1
28942: PUSH
28943: LD_INT 250
28945: EQUAL
28946: PUSH
28947: LD_VAR 0 2
28951: PPUSH
28952: CALL_OW 264
28956: PUSH
28957: LD_INT 81
28959: EQUAL
28960: AND
28961: IFFALSE 28982
// MinerPlaceMine ( unit , x , y ) ;
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_VAR 0 4
28972: PPUSH
28973: LD_VAR 0 5
28977: PPUSH
28978: CALL 31367 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28982: LD_VAR 0 1
28986: PUSH
28987: LD_INT 251
28989: EQUAL
28990: PUSH
28991: LD_VAR 0 2
28995: PPUSH
28996: CALL_OW 264
29000: PUSH
29001: LD_INT 81
29003: EQUAL
29004: AND
29005: IFFALSE 29026
// MinerDetonateMine ( unit , x , y ) ;
29007: LD_VAR 0 2
29011: PPUSH
29012: LD_VAR 0 4
29016: PPUSH
29017: LD_VAR 0 5
29021: PPUSH
29022: CALL 31642 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29026: LD_VAR 0 1
29030: PUSH
29031: LD_INT 252
29033: EQUAL
29034: PUSH
29035: LD_VAR 0 2
29039: PPUSH
29040: CALL_OW 264
29044: PUSH
29045: LD_INT 81
29047: EQUAL
29048: AND
29049: IFFALSE 29070
// MinerCreateMinefield ( unit , x , y ) ;
29051: LD_VAR 0 2
29055: PPUSH
29056: LD_VAR 0 4
29060: PPUSH
29061: LD_VAR 0 5
29065: PPUSH
29066: CALL 32059 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29070: LD_VAR 0 1
29074: PUSH
29075: LD_INT 253
29077: EQUAL
29078: PUSH
29079: LD_VAR 0 2
29083: PPUSH
29084: CALL_OW 257
29088: PUSH
29089: LD_INT 5
29091: EQUAL
29092: AND
29093: IFFALSE 29114
// ComBinocular ( unit , x , y ) ;
29095: LD_VAR 0 2
29099: PPUSH
29100: LD_VAR 0 4
29104: PPUSH
29105: LD_VAR 0 5
29109: PPUSH
29110: CALL 32428 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29114: LD_VAR 0 1
29118: PUSH
29119: LD_INT 254
29121: EQUAL
29122: PUSH
29123: LD_VAR 0 2
29127: PPUSH
29128: CALL_OW 264
29132: PUSH
29133: LD_INT 99
29135: EQUAL
29136: AND
29137: PUSH
29138: LD_VAR 0 3
29142: PPUSH
29143: CALL_OW 263
29147: PUSH
29148: LD_INT 3
29150: EQUAL
29151: AND
29152: IFFALSE 29168
// HackDestroyVehicle ( unit , selectedUnit ) ;
29154: LD_VAR 0 2
29158: PPUSH
29159: LD_VAR 0 3
29163: PPUSH
29164: CALL 30731 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29168: LD_VAR 0 1
29172: PUSH
29173: LD_INT 255
29175: EQUAL
29176: PUSH
29177: LD_VAR 0 2
29181: PPUSH
29182: CALL_OW 264
29186: PUSH
29187: LD_INT 14
29189: PUSH
29190: LD_INT 53
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: IN
29197: AND
29198: PUSH
29199: LD_VAR 0 4
29203: PPUSH
29204: LD_VAR 0 5
29208: PPUSH
29209: CALL_OW 488
29213: AND
29214: IFFALSE 29238
// CutTreeXYR ( unit , x , y , 12 ) ;
29216: LD_VAR 0 2
29220: PPUSH
29221: LD_VAR 0 4
29225: PPUSH
29226: LD_VAR 0 5
29230: PPUSH
29231: LD_INT 12
29233: PPUSH
29234: CALL 29301 0 4
// if cmd = 256 then
29238: LD_VAR 0 1
29242: PUSH
29243: LD_INT 256
29245: EQUAL
29246: IFFALSE 29267
// SetFactoryWaypoint ( unit , x , y ) ;
29248: LD_VAR 0 2
29252: PPUSH
29253: LD_VAR 0 4
29257: PPUSH
29258: LD_VAR 0 5
29262: PPUSH
29263: CALL 27248 0 3
// if cmd = 257 then
29267: LD_VAR 0 1
29271: PUSH
29272: LD_INT 257
29274: EQUAL
29275: IFFALSE 29296
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29277: LD_VAR 0 2
29281: PPUSH
29282: LD_VAR 0 4
29286: PPUSH
29287: LD_VAR 0 5
29291: PPUSH
29292: CALL 27610 0 3
// end ;
29296: LD_VAR 0 6
29300: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29301: LD_INT 0
29303: PPUSH
29304: PPUSH
29305: PPUSH
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
29310: PPUSH
29311: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29312: LD_VAR 0 1
29316: NOT
29317: PUSH
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_VAR 0 3
29327: PPUSH
29328: CALL_OW 488
29332: NOT
29333: OR
29334: PUSH
29335: LD_VAR 0 4
29339: NOT
29340: OR
29341: IFFALSE 29345
// exit ;
29343: GO 29685
// list := [ ] ;
29345: LD_ADDR_VAR 0 13
29349: PUSH
29350: EMPTY
29351: ST_TO_ADDR
// if x - r < 0 then
29352: LD_VAR 0 2
29356: PUSH
29357: LD_VAR 0 4
29361: MINUS
29362: PUSH
29363: LD_INT 0
29365: LESS
29366: IFFALSE 29378
// min_x := 0 else
29368: LD_ADDR_VAR 0 7
29372: PUSH
29373: LD_INT 0
29375: ST_TO_ADDR
29376: GO 29394
// min_x := x - r ;
29378: LD_ADDR_VAR 0 7
29382: PUSH
29383: LD_VAR 0 2
29387: PUSH
29388: LD_VAR 0 4
29392: MINUS
29393: ST_TO_ADDR
// if y - r < 0 then
29394: LD_VAR 0 3
29398: PUSH
29399: LD_VAR 0 4
29403: MINUS
29404: PUSH
29405: LD_INT 0
29407: LESS
29408: IFFALSE 29420
// min_y := 0 else
29410: LD_ADDR_VAR 0 8
29414: PUSH
29415: LD_INT 0
29417: ST_TO_ADDR
29418: GO 29436
// min_y := y - r ;
29420: LD_ADDR_VAR 0 8
29424: PUSH
29425: LD_VAR 0 3
29429: PUSH
29430: LD_VAR 0 4
29434: MINUS
29435: ST_TO_ADDR
// max_x := x + r ;
29436: LD_ADDR_VAR 0 9
29440: PUSH
29441: LD_VAR 0 2
29445: PUSH
29446: LD_VAR 0 4
29450: PLUS
29451: ST_TO_ADDR
// max_y := y + r ;
29452: LD_ADDR_VAR 0 10
29456: PUSH
29457: LD_VAR 0 3
29461: PUSH
29462: LD_VAR 0 4
29466: PLUS
29467: ST_TO_ADDR
// for _x = min_x to max_x do
29468: LD_ADDR_VAR 0 11
29472: PUSH
29473: DOUBLE
29474: LD_VAR 0 7
29478: DEC
29479: ST_TO_ADDR
29480: LD_VAR 0 9
29484: PUSH
29485: FOR_TO
29486: IFFALSE 29603
// for _y = min_y to max_y do
29488: LD_ADDR_VAR 0 12
29492: PUSH
29493: DOUBLE
29494: LD_VAR 0 8
29498: DEC
29499: ST_TO_ADDR
29500: LD_VAR 0 10
29504: PUSH
29505: FOR_TO
29506: IFFALSE 29599
// begin if not ValidHex ( _x , _y ) then
29508: LD_VAR 0 11
29512: PPUSH
29513: LD_VAR 0 12
29517: PPUSH
29518: CALL_OW 488
29522: NOT
29523: IFFALSE 29527
// continue ;
29525: GO 29505
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29527: LD_VAR 0 11
29531: PPUSH
29532: LD_VAR 0 12
29536: PPUSH
29537: CALL_OW 351
29541: PUSH
29542: LD_VAR 0 11
29546: PPUSH
29547: LD_VAR 0 12
29551: PPUSH
29552: CALL_OW 554
29556: AND
29557: IFFALSE 29597
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29559: LD_ADDR_VAR 0 13
29563: PUSH
29564: LD_VAR 0 13
29568: PPUSH
29569: LD_VAR 0 13
29573: PUSH
29574: LD_INT 1
29576: PLUS
29577: PPUSH
29578: LD_VAR 0 11
29582: PUSH
29583: LD_VAR 0 12
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PPUSH
29592: CALL_OW 2
29596: ST_TO_ADDR
// end ;
29597: GO 29505
29599: POP
29600: POP
29601: GO 29485
29603: POP
29604: POP
// if not list then
29605: LD_VAR 0 13
29609: NOT
29610: IFFALSE 29614
// exit ;
29612: GO 29685
// for i in list do
29614: LD_ADDR_VAR 0 6
29618: PUSH
29619: LD_VAR 0 13
29623: PUSH
29624: FOR_IN
29625: IFFALSE 29683
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29627: LD_VAR 0 1
29631: PPUSH
29632: LD_STRING M
29634: PUSH
29635: LD_VAR 0 6
29639: PUSH
29640: LD_INT 1
29642: ARRAY
29643: PUSH
29644: LD_VAR 0 6
29648: PUSH
29649: LD_INT 2
29651: ARRAY
29652: PUSH
29653: LD_INT 0
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: PUSH
29674: EMPTY
29675: LIST
29676: PPUSH
29677: CALL_OW 447
29681: GO 29624
29683: POP
29684: POP
// end ;
29685: LD_VAR 0 5
29689: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29690: LD_EXP 94
29694: NOT
29695: IFFALSE 29745
29697: GO 29699
29699: DISABLE
// begin initHack := true ;
29700: LD_ADDR_EXP 94
29704: PUSH
29705: LD_INT 1
29707: ST_TO_ADDR
// hackTanks := [ ] ;
29708: LD_ADDR_EXP 95
29712: PUSH
29713: EMPTY
29714: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29715: LD_ADDR_EXP 96
29719: PUSH
29720: EMPTY
29721: ST_TO_ADDR
// hackLimit := 3 ;
29722: LD_ADDR_EXP 97
29726: PUSH
29727: LD_INT 3
29729: ST_TO_ADDR
// hackDist := 12 ;
29730: LD_ADDR_EXP 98
29734: PUSH
29735: LD_INT 12
29737: ST_TO_ADDR
// hackCounter := [ ] ;
29738: LD_ADDR_EXP 99
29742: PUSH
29743: EMPTY
29744: ST_TO_ADDR
// end ;
29745: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29746: LD_EXP 94
29750: PUSH
29751: LD_INT 34
29753: PUSH
29754: LD_INT 99
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PPUSH
29761: CALL_OW 69
29765: AND
29766: IFFALSE 30019
29768: GO 29770
29770: DISABLE
29771: LD_INT 0
29773: PPUSH
29774: PPUSH
// begin enable ;
29775: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29776: LD_ADDR_VAR 0 1
29780: PUSH
29781: LD_INT 34
29783: PUSH
29784: LD_INT 99
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PPUSH
29791: CALL_OW 69
29795: PUSH
29796: FOR_IN
29797: IFFALSE 30017
// begin if not i in hackTanks then
29799: LD_VAR 0 1
29803: PUSH
29804: LD_EXP 95
29808: IN
29809: NOT
29810: IFFALSE 29893
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29812: LD_ADDR_EXP 95
29816: PUSH
29817: LD_EXP 95
29821: PPUSH
29822: LD_EXP 95
29826: PUSH
29827: LD_INT 1
29829: PLUS
29830: PPUSH
29831: LD_VAR 0 1
29835: PPUSH
29836: CALL_OW 1
29840: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29841: LD_ADDR_EXP 96
29845: PUSH
29846: LD_EXP 96
29850: PPUSH
29851: LD_EXP 96
29855: PUSH
29856: LD_INT 1
29858: PLUS
29859: PPUSH
29860: EMPTY
29861: PPUSH
29862: CALL_OW 1
29866: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29867: LD_ADDR_EXP 99
29871: PUSH
29872: LD_EXP 99
29876: PPUSH
29877: LD_EXP 99
29881: PUSH
29882: LD_INT 1
29884: PLUS
29885: PPUSH
29886: EMPTY
29887: PPUSH
29888: CALL_OW 1
29892: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29893: LD_VAR 0 1
29897: PPUSH
29898: CALL_OW 302
29902: NOT
29903: IFFALSE 29916
// begin HackUnlinkAll ( i ) ;
29905: LD_VAR 0 1
29909: PPUSH
29910: CALL 30022 0 1
// continue ;
29914: GO 29796
// end ; HackCheckCapturedStatus ( i ) ;
29916: LD_VAR 0 1
29920: PPUSH
29921: CALL 30465 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29925: LD_ADDR_VAR 0 2
29929: PUSH
29930: LD_INT 81
29932: PUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: CALL_OW 255
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 33
29949: PUSH
29950: LD_INT 3
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 91
29959: PUSH
29960: LD_VAR 0 1
29964: PUSH
29965: LD_EXP 98
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 50
29977: PUSH
29978: EMPTY
29979: LIST
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: PPUSH
29987: CALL_OW 69
29991: ST_TO_ADDR
// if not tmp then
29992: LD_VAR 0 2
29996: NOT
29997: IFFALSE 30001
// continue ;
29999: GO 29796
// HackLink ( i , tmp ) ;
30001: LD_VAR 0 1
30005: PPUSH
30006: LD_VAR 0 2
30010: PPUSH
30011: CALL 30158 0 2
// end ;
30015: GO 29796
30017: POP
30018: POP
// end ;
30019: PPOPN 2
30021: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30022: LD_INT 0
30024: PPUSH
30025: PPUSH
30026: PPUSH
// if not hack in hackTanks then
30027: LD_VAR 0 1
30031: PUSH
30032: LD_EXP 95
30036: IN
30037: NOT
30038: IFFALSE 30042
// exit ;
30040: GO 30153
// index := GetElementIndex ( hackTanks , hack ) ;
30042: LD_ADDR_VAR 0 4
30046: PUSH
30047: LD_EXP 95
30051: PPUSH
30052: LD_VAR 0 1
30056: PPUSH
30057: CALL 37770 0 2
30061: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30062: LD_EXP 96
30066: PUSH
30067: LD_VAR 0 4
30071: ARRAY
30072: IFFALSE 30153
// begin for i in hackTanksCaptured [ index ] do
30074: LD_ADDR_VAR 0 3
30078: PUSH
30079: LD_EXP 96
30083: PUSH
30084: LD_VAR 0 4
30088: ARRAY
30089: PUSH
30090: FOR_IN
30091: IFFALSE 30117
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30093: LD_VAR 0 3
30097: PUSH
30098: LD_INT 1
30100: ARRAY
30101: PPUSH
30102: LD_VAR 0 3
30106: PUSH
30107: LD_INT 2
30109: ARRAY
30110: PPUSH
30111: CALL_OW 235
30115: GO 30090
30117: POP
30118: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30119: LD_ADDR_EXP 96
30123: PUSH
30124: LD_EXP 96
30128: PPUSH
30129: LD_VAR 0 4
30133: PPUSH
30134: EMPTY
30135: PPUSH
30136: CALL_OW 1
30140: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30141: LD_VAR 0 1
30145: PPUSH
30146: LD_INT 0
30148: PPUSH
30149: CALL_OW 505
// end ; end ;
30153: LD_VAR 0 2
30157: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30158: LD_INT 0
30160: PPUSH
30161: PPUSH
30162: PPUSH
// if not hack in hackTanks or not vehicles then
30163: LD_VAR 0 1
30167: PUSH
30168: LD_EXP 95
30172: IN
30173: NOT
30174: PUSH
30175: LD_VAR 0 2
30179: NOT
30180: OR
30181: IFFALSE 30185
// exit ;
30183: GO 30460
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30185: LD_ADDR_VAR 0 2
30189: PUSH
30190: LD_VAR 0 1
30194: PPUSH
30195: LD_VAR 0 2
30199: PPUSH
30200: LD_INT 1
30202: PPUSH
30203: LD_INT 1
30205: PPUSH
30206: CALL 38420 0 4
30210: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30211: LD_ADDR_VAR 0 5
30215: PUSH
30216: LD_EXP 95
30220: PPUSH
30221: LD_VAR 0 1
30225: PPUSH
30226: CALL 37770 0 2
30230: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30231: LD_EXP 96
30235: PUSH
30236: LD_VAR 0 5
30240: ARRAY
30241: PUSH
30242: LD_EXP 97
30246: LESS
30247: IFFALSE 30436
// begin for i := 1 to vehicles do
30249: LD_ADDR_VAR 0 4
30253: PUSH
30254: DOUBLE
30255: LD_INT 1
30257: DEC
30258: ST_TO_ADDR
30259: LD_VAR 0 2
30263: PUSH
30264: FOR_TO
30265: IFFALSE 30434
// begin if hackTanksCaptured [ index ] = hackLimit then
30267: LD_EXP 96
30271: PUSH
30272: LD_VAR 0 5
30276: ARRAY
30277: PUSH
30278: LD_EXP 97
30282: EQUAL
30283: IFFALSE 30287
// break ;
30285: GO 30434
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30287: LD_ADDR_EXP 99
30291: PUSH
30292: LD_EXP 99
30296: PPUSH
30297: LD_VAR 0 5
30301: PPUSH
30302: LD_EXP 99
30306: PUSH
30307: LD_VAR 0 5
30311: ARRAY
30312: PUSH
30313: LD_INT 1
30315: PLUS
30316: PPUSH
30317: CALL_OW 1
30321: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30322: LD_ADDR_EXP 96
30326: PUSH
30327: LD_EXP 96
30331: PPUSH
30332: LD_VAR 0 5
30336: PUSH
30337: LD_EXP 96
30341: PUSH
30342: LD_VAR 0 5
30346: ARRAY
30347: PUSH
30348: LD_INT 1
30350: PLUS
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PPUSH
30356: LD_VAR 0 2
30360: PUSH
30361: LD_VAR 0 4
30365: ARRAY
30366: PUSH
30367: LD_VAR 0 2
30371: PUSH
30372: LD_VAR 0 4
30376: ARRAY
30377: PPUSH
30378: CALL_OW 255
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL 37985 0 3
30391: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30392: LD_VAR 0 2
30396: PUSH
30397: LD_VAR 0 4
30401: ARRAY
30402: PPUSH
30403: LD_VAR 0 1
30407: PPUSH
30408: CALL_OW 255
30412: PPUSH
30413: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30417: LD_VAR 0 2
30421: PUSH
30422: LD_VAR 0 4
30426: ARRAY
30427: PPUSH
30428: CALL_OW 141
// end ;
30432: GO 30264
30434: POP
30435: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30436: LD_VAR 0 1
30440: PPUSH
30441: LD_EXP 96
30445: PUSH
30446: LD_VAR 0 5
30450: ARRAY
30451: PUSH
30452: LD_INT 0
30454: PLUS
30455: PPUSH
30456: CALL_OW 505
// end ;
30460: LD_VAR 0 3
30464: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30465: LD_INT 0
30467: PPUSH
30468: PPUSH
30469: PPUSH
30470: PPUSH
// if not hack in hackTanks then
30471: LD_VAR 0 1
30475: PUSH
30476: LD_EXP 95
30480: IN
30481: NOT
30482: IFFALSE 30486
// exit ;
30484: GO 30726
// index := GetElementIndex ( hackTanks , hack ) ;
30486: LD_ADDR_VAR 0 4
30490: PUSH
30491: LD_EXP 95
30495: PPUSH
30496: LD_VAR 0 1
30500: PPUSH
30501: CALL 37770 0 2
30505: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30506: LD_ADDR_VAR 0 3
30510: PUSH
30511: DOUBLE
30512: LD_EXP 96
30516: PUSH
30517: LD_VAR 0 4
30521: ARRAY
30522: INC
30523: ST_TO_ADDR
30524: LD_INT 1
30526: PUSH
30527: FOR_DOWNTO
30528: IFFALSE 30700
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30530: LD_ADDR_VAR 0 5
30534: PUSH
30535: LD_EXP 96
30539: PUSH
30540: LD_VAR 0 4
30544: ARRAY
30545: PUSH
30546: LD_VAR 0 3
30550: ARRAY
30551: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30552: LD_VAR 0 5
30556: PUSH
30557: LD_INT 1
30559: ARRAY
30560: PPUSH
30561: CALL_OW 302
30565: NOT
30566: PUSH
30567: LD_VAR 0 5
30571: PUSH
30572: LD_INT 1
30574: ARRAY
30575: PPUSH
30576: CALL_OW 255
30580: PUSH
30581: LD_VAR 0 1
30585: PPUSH
30586: CALL_OW 255
30590: NONEQUAL
30591: OR
30592: IFFALSE 30698
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30594: LD_VAR 0 5
30598: PUSH
30599: LD_INT 1
30601: ARRAY
30602: PPUSH
30603: CALL_OW 305
30607: PUSH
30608: LD_VAR 0 5
30612: PUSH
30613: LD_INT 1
30615: ARRAY
30616: PPUSH
30617: CALL_OW 255
30621: PUSH
30622: LD_VAR 0 1
30626: PPUSH
30627: CALL_OW 255
30631: EQUAL
30632: AND
30633: IFFALSE 30657
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30635: LD_VAR 0 5
30639: PUSH
30640: LD_INT 1
30642: ARRAY
30643: PPUSH
30644: LD_VAR 0 5
30648: PUSH
30649: LD_INT 2
30651: ARRAY
30652: PPUSH
30653: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30657: LD_ADDR_EXP 96
30661: PUSH
30662: LD_EXP 96
30666: PPUSH
30667: LD_VAR 0 4
30671: PPUSH
30672: LD_EXP 96
30676: PUSH
30677: LD_VAR 0 4
30681: ARRAY
30682: PPUSH
30683: LD_VAR 0 3
30687: PPUSH
30688: CALL_OW 3
30692: PPUSH
30693: CALL_OW 1
30697: ST_TO_ADDR
// end ; end ;
30698: GO 30527
30700: POP
30701: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30702: LD_VAR 0 1
30706: PPUSH
30707: LD_EXP 96
30711: PUSH
30712: LD_VAR 0 4
30716: ARRAY
30717: PUSH
30718: LD_INT 0
30720: PLUS
30721: PPUSH
30722: CALL_OW 505
// end ;
30726: LD_VAR 0 2
30730: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30731: LD_INT 0
30733: PPUSH
30734: PPUSH
30735: PPUSH
30736: PPUSH
// if not hack in hackTanks then
30737: LD_VAR 0 1
30741: PUSH
30742: LD_EXP 95
30746: IN
30747: NOT
30748: IFFALSE 30752
// exit ;
30750: GO 30837
// index := GetElementIndex ( hackTanks , hack ) ;
30752: LD_ADDR_VAR 0 5
30756: PUSH
30757: LD_EXP 95
30761: PPUSH
30762: LD_VAR 0 1
30766: PPUSH
30767: CALL 37770 0 2
30771: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30772: LD_ADDR_VAR 0 4
30776: PUSH
30777: DOUBLE
30778: LD_INT 1
30780: DEC
30781: ST_TO_ADDR
30782: LD_EXP 96
30786: PUSH
30787: LD_VAR 0 5
30791: ARRAY
30792: PUSH
30793: FOR_TO
30794: IFFALSE 30835
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30796: LD_EXP 96
30800: PUSH
30801: LD_VAR 0 5
30805: ARRAY
30806: PUSH
30807: LD_VAR 0 4
30811: ARRAY
30812: PUSH
30813: LD_INT 1
30815: ARRAY
30816: PUSH
30817: LD_VAR 0 2
30821: EQUAL
30822: IFFALSE 30833
// KillUnit ( vehicle ) ;
30824: LD_VAR 0 2
30828: PPUSH
30829: CALL_OW 66
30833: GO 30793
30835: POP
30836: POP
// end ;
30837: LD_VAR 0 3
30841: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30842: LD_EXP 100
30846: NOT
30847: IFFALSE 30882
30849: GO 30851
30851: DISABLE
// begin initMiner := true ;
30852: LD_ADDR_EXP 100
30856: PUSH
30857: LD_INT 1
30859: ST_TO_ADDR
// minersList := [ ] ;
30860: LD_ADDR_EXP 101
30864: PUSH
30865: EMPTY
30866: ST_TO_ADDR
// minerMinesList := [ ] ;
30867: LD_ADDR_EXP 102
30871: PUSH
30872: EMPTY
30873: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30874: LD_ADDR_EXP 103
30878: PUSH
30879: LD_INT 5
30881: ST_TO_ADDR
// end ;
30882: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30883: LD_EXP 100
30887: PUSH
30888: LD_INT 34
30890: PUSH
30891: LD_INT 81
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PPUSH
30898: CALL_OW 69
30902: AND
30903: IFFALSE 31364
30905: GO 30907
30907: DISABLE
30908: LD_INT 0
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
// begin enable ;
30914: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30915: LD_ADDR_VAR 0 1
30919: PUSH
30920: LD_INT 34
30922: PUSH
30923: LD_INT 81
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PPUSH
30930: CALL_OW 69
30934: PUSH
30935: FOR_IN
30936: IFFALSE 31008
// begin if not i in minersList then
30938: LD_VAR 0 1
30942: PUSH
30943: LD_EXP 101
30947: IN
30948: NOT
30949: IFFALSE 31006
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30951: LD_ADDR_EXP 101
30955: PUSH
30956: LD_EXP 101
30960: PPUSH
30961: LD_EXP 101
30965: PUSH
30966: LD_INT 1
30968: PLUS
30969: PPUSH
30970: LD_VAR 0 1
30974: PPUSH
30975: CALL_OW 1
30979: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30980: LD_ADDR_EXP 102
30984: PUSH
30985: LD_EXP 102
30989: PPUSH
30990: LD_EXP 102
30994: PUSH
30995: LD_INT 1
30997: PLUS
30998: PPUSH
30999: EMPTY
31000: PPUSH
31001: CALL_OW 1
31005: ST_TO_ADDR
// end end ;
31006: GO 30935
31008: POP
31009: POP
// for i := minerMinesList downto 1 do
31010: LD_ADDR_VAR 0 1
31014: PUSH
31015: DOUBLE
31016: LD_EXP 102
31020: INC
31021: ST_TO_ADDR
31022: LD_INT 1
31024: PUSH
31025: FOR_DOWNTO
31026: IFFALSE 31362
// begin if IsLive ( minersList [ i ] ) then
31028: LD_EXP 101
31032: PUSH
31033: LD_VAR 0 1
31037: ARRAY
31038: PPUSH
31039: CALL_OW 300
31043: IFFALSE 31071
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31045: LD_EXP 101
31049: PUSH
31050: LD_VAR 0 1
31054: ARRAY
31055: PPUSH
31056: LD_EXP 102
31060: PUSH
31061: LD_VAR 0 1
31065: ARRAY
31066: PPUSH
31067: CALL_OW 505
// if not minerMinesList [ i ] then
31071: LD_EXP 102
31075: PUSH
31076: LD_VAR 0 1
31080: ARRAY
31081: NOT
31082: IFFALSE 31086
// continue ;
31084: GO 31025
// for j := minerMinesList [ i ] downto 1 do
31086: LD_ADDR_VAR 0 2
31090: PUSH
31091: DOUBLE
31092: LD_EXP 102
31096: PUSH
31097: LD_VAR 0 1
31101: ARRAY
31102: INC
31103: ST_TO_ADDR
31104: LD_INT 1
31106: PUSH
31107: FOR_DOWNTO
31108: IFFALSE 31358
// begin side := GetSide ( minersList [ i ] ) ;
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: LD_EXP 101
31119: PUSH
31120: LD_VAR 0 1
31124: ARRAY
31125: PPUSH
31126: CALL_OW 255
31130: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31131: LD_ADDR_VAR 0 4
31135: PUSH
31136: LD_EXP 102
31140: PUSH
31141: LD_VAR 0 1
31145: ARRAY
31146: PUSH
31147: LD_VAR 0 2
31151: ARRAY
31152: PUSH
31153: LD_INT 1
31155: ARRAY
31156: PPUSH
31157: LD_EXP 102
31161: PUSH
31162: LD_VAR 0 1
31166: ARRAY
31167: PUSH
31168: LD_VAR 0 2
31172: ARRAY
31173: PUSH
31174: LD_INT 2
31176: ARRAY
31177: PPUSH
31178: CALL_OW 428
31182: ST_TO_ADDR
// if not tmp then
31183: LD_VAR 0 4
31187: NOT
31188: IFFALSE 31192
// continue ;
31190: GO 31107
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31192: LD_VAR 0 4
31196: PUSH
31197: LD_INT 81
31199: PUSH
31200: LD_VAR 0 3
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PPUSH
31209: CALL_OW 69
31213: IN
31214: PUSH
31215: LD_EXP 102
31219: PUSH
31220: LD_VAR 0 1
31224: ARRAY
31225: PUSH
31226: LD_VAR 0 2
31230: ARRAY
31231: PUSH
31232: LD_INT 1
31234: ARRAY
31235: PPUSH
31236: LD_EXP 102
31240: PUSH
31241: LD_VAR 0 1
31245: ARRAY
31246: PUSH
31247: LD_VAR 0 2
31251: ARRAY
31252: PUSH
31253: LD_INT 2
31255: ARRAY
31256: PPUSH
31257: CALL_OW 458
31261: AND
31262: IFFALSE 31356
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31264: LD_EXP 102
31268: PUSH
31269: LD_VAR 0 1
31273: ARRAY
31274: PUSH
31275: LD_VAR 0 2
31279: ARRAY
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: LD_EXP 102
31289: PUSH
31290: LD_VAR 0 1
31294: ARRAY
31295: PUSH
31296: LD_VAR 0 2
31300: ARRAY
31301: PUSH
31302: LD_INT 2
31304: ARRAY
31305: PPUSH
31306: LD_VAR 0 3
31310: PPUSH
31311: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31315: LD_ADDR_EXP 102
31319: PUSH
31320: LD_EXP 102
31324: PPUSH
31325: LD_VAR 0 1
31329: PPUSH
31330: LD_EXP 102
31334: PUSH
31335: LD_VAR 0 1
31339: ARRAY
31340: PPUSH
31341: LD_VAR 0 2
31345: PPUSH
31346: CALL_OW 3
31350: PPUSH
31351: CALL_OW 1
31355: ST_TO_ADDR
// end ; end ;
31356: GO 31107
31358: POP
31359: POP
// end ;
31360: GO 31025
31362: POP
31363: POP
// end ;
31364: PPOPN 4
31366: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31367: LD_INT 0
31369: PPUSH
31370: PPUSH
// result := false ;
31371: LD_ADDR_VAR 0 4
31375: PUSH
31376: LD_INT 0
31378: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31379: LD_VAR 0 1
31383: PPUSH
31384: CALL_OW 264
31388: PUSH
31389: LD_INT 81
31391: EQUAL
31392: NOT
31393: IFFALSE 31397
// exit ;
31395: GO 31637
// index := GetElementIndex ( minersList , unit ) ;
31397: LD_ADDR_VAR 0 5
31401: PUSH
31402: LD_EXP 101
31406: PPUSH
31407: LD_VAR 0 1
31411: PPUSH
31412: CALL 37770 0 2
31416: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31417: LD_EXP 102
31421: PUSH
31422: LD_VAR 0 5
31426: ARRAY
31427: PUSH
31428: LD_EXP 103
31432: GREATEREQUAL
31433: IFFALSE 31437
// exit ;
31435: GO 31637
// ComMoveXY ( unit , x , y ) ;
31437: LD_VAR 0 1
31441: PPUSH
31442: LD_VAR 0 2
31446: PPUSH
31447: LD_VAR 0 3
31451: PPUSH
31452: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31456: LD_INT 35
31458: PPUSH
31459: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31463: LD_VAR 0 1
31467: PPUSH
31468: LD_VAR 0 2
31472: PPUSH
31473: LD_VAR 0 3
31477: PPUSH
31478: CALL 69125 0 3
31482: NOT
31483: PUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 314
31493: AND
31494: IFFALSE 31498
// exit ;
31496: GO 31637
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31498: LD_VAR 0 2
31502: PPUSH
31503: LD_VAR 0 3
31507: PPUSH
31508: CALL_OW 428
31512: PUSH
31513: LD_VAR 0 1
31517: EQUAL
31518: PUSH
31519: LD_VAR 0 1
31523: PPUSH
31524: CALL_OW 314
31528: NOT
31529: AND
31530: IFFALSE 31456
// PlaySoundXY ( x , y , PlantMine ) ;
31532: LD_VAR 0 2
31536: PPUSH
31537: LD_VAR 0 3
31541: PPUSH
31542: LD_STRING PlantMine
31544: PPUSH
31545: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31549: LD_VAR 0 2
31553: PPUSH
31554: LD_VAR 0 3
31558: PPUSH
31559: LD_VAR 0 1
31563: PPUSH
31564: CALL_OW 255
31568: PPUSH
31569: LD_INT 0
31571: PPUSH
31572: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31576: LD_ADDR_EXP 102
31580: PUSH
31581: LD_EXP 102
31585: PPUSH
31586: LD_VAR 0 5
31590: PUSH
31591: LD_EXP 102
31595: PUSH
31596: LD_VAR 0 5
31600: ARRAY
31601: PUSH
31602: LD_INT 1
31604: PLUS
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PPUSH
31610: LD_VAR 0 2
31614: PUSH
31615: LD_VAR 0 3
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PPUSH
31624: CALL 37985 0 3
31628: ST_TO_ADDR
// result := true ;
31629: LD_ADDR_VAR 0 4
31633: PUSH
31634: LD_INT 1
31636: ST_TO_ADDR
// end ;
31637: LD_VAR 0 4
31641: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31642: LD_INT 0
31644: PPUSH
31645: PPUSH
31646: PPUSH
// if not unit in minersList then
31647: LD_VAR 0 1
31651: PUSH
31652: LD_EXP 101
31656: IN
31657: NOT
31658: IFFALSE 31662
// exit ;
31660: GO 32054
// index := GetElementIndex ( minersList , unit ) ;
31662: LD_ADDR_VAR 0 6
31666: PUSH
31667: LD_EXP 101
31671: PPUSH
31672: LD_VAR 0 1
31676: PPUSH
31677: CALL 37770 0 2
31681: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31682: LD_ADDR_VAR 0 5
31686: PUSH
31687: DOUBLE
31688: LD_EXP 102
31692: PUSH
31693: LD_VAR 0 6
31697: ARRAY
31698: INC
31699: ST_TO_ADDR
31700: LD_INT 1
31702: PUSH
31703: FOR_DOWNTO
31704: IFFALSE 31865
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31706: LD_EXP 102
31710: PUSH
31711: LD_VAR 0 6
31715: ARRAY
31716: PUSH
31717: LD_VAR 0 5
31721: ARRAY
31722: PUSH
31723: LD_INT 1
31725: ARRAY
31726: PUSH
31727: LD_VAR 0 2
31731: EQUAL
31732: PUSH
31733: LD_EXP 102
31737: PUSH
31738: LD_VAR 0 6
31742: ARRAY
31743: PUSH
31744: LD_VAR 0 5
31748: ARRAY
31749: PUSH
31750: LD_INT 2
31752: ARRAY
31753: PUSH
31754: LD_VAR 0 3
31758: EQUAL
31759: AND
31760: IFFALSE 31863
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31762: LD_EXP 102
31766: PUSH
31767: LD_VAR 0 6
31771: ARRAY
31772: PUSH
31773: LD_VAR 0 5
31777: ARRAY
31778: PUSH
31779: LD_INT 1
31781: ARRAY
31782: PPUSH
31783: LD_EXP 102
31787: PUSH
31788: LD_VAR 0 6
31792: ARRAY
31793: PUSH
31794: LD_VAR 0 5
31798: ARRAY
31799: PUSH
31800: LD_INT 2
31802: ARRAY
31803: PPUSH
31804: LD_VAR 0 1
31808: PPUSH
31809: CALL_OW 255
31813: PPUSH
31814: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31818: LD_ADDR_EXP 102
31822: PUSH
31823: LD_EXP 102
31827: PPUSH
31828: LD_VAR 0 6
31832: PPUSH
31833: LD_EXP 102
31837: PUSH
31838: LD_VAR 0 6
31842: ARRAY
31843: PPUSH
31844: LD_VAR 0 5
31848: PPUSH
31849: CALL_OW 3
31853: PPUSH
31854: CALL_OW 1
31858: ST_TO_ADDR
// exit ;
31859: POP
31860: POP
31861: GO 32054
// end ; end ;
31863: GO 31703
31865: POP
31866: POP
// for i := minerMinesList [ index ] downto 1 do
31867: LD_ADDR_VAR 0 5
31871: PUSH
31872: DOUBLE
31873: LD_EXP 102
31877: PUSH
31878: LD_VAR 0 6
31882: ARRAY
31883: INC
31884: ST_TO_ADDR
31885: LD_INT 1
31887: PUSH
31888: FOR_DOWNTO
31889: IFFALSE 32052
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31891: LD_EXP 102
31895: PUSH
31896: LD_VAR 0 6
31900: ARRAY
31901: PUSH
31902: LD_VAR 0 5
31906: ARRAY
31907: PUSH
31908: LD_INT 1
31910: ARRAY
31911: PPUSH
31912: LD_EXP 102
31916: PUSH
31917: LD_VAR 0 6
31921: ARRAY
31922: PUSH
31923: LD_VAR 0 5
31927: ARRAY
31928: PUSH
31929: LD_INT 2
31931: ARRAY
31932: PPUSH
31933: LD_VAR 0 2
31937: PPUSH
31938: LD_VAR 0 3
31942: PPUSH
31943: CALL_OW 298
31947: PUSH
31948: LD_INT 6
31950: LESS
31951: IFFALSE 32050
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31953: LD_EXP 102
31957: PUSH
31958: LD_VAR 0 6
31962: ARRAY
31963: PUSH
31964: LD_VAR 0 5
31968: ARRAY
31969: PUSH
31970: LD_INT 1
31972: ARRAY
31973: PPUSH
31974: LD_EXP 102
31978: PUSH
31979: LD_VAR 0 6
31983: ARRAY
31984: PUSH
31985: LD_VAR 0 5
31989: ARRAY
31990: PUSH
31991: LD_INT 2
31993: ARRAY
31994: PPUSH
31995: LD_VAR 0 1
31999: PPUSH
32000: CALL_OW 255
32004: PPUSH
32005: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32009: LD_ADDR_EXP 102
32013: PUSH
32014: LD_EXP 102
32018: PPUSH
32019: LD_VAR 0 6
32023: PPUSH
32024: LD_EXP 102
32028: PUSH
32029: LD_VAR 0 6
32033: ARRAY
32034: PPUSH
32035: LD_VAR 0 5
32039: PPUSH
32040: CALL_OW 3
32044: PPUSH
32045: CALL_OW 1
32049: ST_TO_ADDR
// end ; end ;
32050: GO 31888
32052: POP
32053: POP
// end ;
32054: LD_VAR 0 4
32058: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
32069: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32070: LD_VAR 0 1
32074: PPUSH
32075: CALL_OW 264
32079: PUSH
32080: LD_INT 81
32082: EQUAL
32083: NOT
32084: PUSH
32085: LD_VAR 0 1
32089: PUSH
32090: LD_EXP 101
32094: IN
32095: NOT
32096: OR
32097: IFFALSE 32101
// exit ;
32099: GO 32423
// index := GetElementIndex ( minersList , unit ) ;
32101: LD_ADDR_VAR 0 6
32105: PUSH
32106: LD_EXP 101
32110: PPUSH
32111: LD_VAR 0 1
32115: PPUSH
32116: CALL 37770 0 2
32120: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32121: LD_ADDR_VAR 0 8
32125: PUSH
32126: LD_EXP 103
32130: PUSH
32131: LD_EXP 102
32135: PUSH
32136: LD_VAR 0 6
32140: ARRAY
32141: MINUS
32142: ST_TO_ADDR
// if not minesFreeAmount then
32143: LD_VAR 0 8
32147: NOT
32148: IFFALSE 32152
// exit ;
32150: GO 32423
// tmp := [ ] ;
32152: LD_ADDR_VAR 0 7
32156: PUSH
32157: EMPTY
32158: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32159: LD_ADDR_VAR 0 5
32163: PUSH
32164: DOUBLE
32165: LD_INT 1
32167: DEC
32168: ST_TO_ADDR
32169: LD_VAR 0 8
32173: PUSH
32174: FOR_TO
32175: IFFALSE 32370
// begin _d := rand ( 0 , 5 ) ;
32177: LD_ADDR_VAR 0 11
32181: PUSH
32182: LD_INT 0
32184: PPUSH
32185: LD_INT 5
32187: PPUSH
32188: CALL_OW 12
32192: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32193: LD_ADDR_VAR 0 12
32197: PUSH
32198: LD_INT 2
32200: PPUSH
32201: LD_INT 6
32203: PPUSH
32204: CALL_OW 12
32208: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32209: LD_ADDR_VAR 0 9
32213: PUSH
32214: LD_VAR 0 2
32218: PPUSH
32219: LD_VAR 0 11
32223: PPUSH
32224: LD_VAR 0 12
32228: PPUSH
32229: CALL_OW 272
32233: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32234: LD_ADDR_VAR 0 10
32238: PUSH
32239: LD_VAR 0 3
32243: PPUSH
32244: LD_VAR 0 11
32248: PPUSH
32249: LD_VAR 0 12
32253: PPUSH
32254: CALL_OW 273
32258: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32259: LD_VAR 0 9
32263: PPUSH
32264: LD_VAR 0 10
32268: PPUSH
32269: CALL_OW 488
32273: PUSH
32274: LD_VAR 0 9
32278: PUSH
32279: LD_VAR 0 10
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_VAR 0 7
32292: IN
32293: NOT
32294: AND
32295: PUSH
32296: LD_VAR 0 9
32300: PPUSH
32301: LD_VAR 0 10
32305: PPUSH
32306: CALL_OW 458
32310: NOT
32311: AND
32312: IFFALSE 32354
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32314: LD_ADDR_VAR 0 7
32318: PUSH
32319: LD_VAR 0 7
32323: PPUSH
32324: LD_VAR 0 7
32328: PUSH
32329: LD_INT 1
32331: PLUS
32332: PPUSH
32333: LD_VAR 0 9
32337: PUSH
32338: LD_VAR 0 10
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PPUSH
32347: CALL_OW 1
32351: ST_TO_ADDR
32352: GO 32368
// i := i - 1 ;
32354: LD_ADDR_VAR 0 5
32358: PUSH
32359: LD_VAR 0 5
32363: PUSH
32364: LD_INT 1
32366: MINUS
32367: ST_TO_ADDR
// end ;
32368: GO 32174
32370: POP
32371: POP
// for i in tmp do
32372: LD_ADDR_VAR 0 5
32376: PUSH
32377: LD_VAR 0 7
32381: PUSH
32382: FOR_IN
32383: IFFALSE 32421
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32385: LD_VAR 0 1
32389: PPUSH
32390: LD_VAR 0 5
32394: PUSH
32395: LD_INT 1
32397: ARRAY
32398: PPUSH
32399: LD_VAR 0 5
32403: PUSH
32404: LD_INT 2
32406: ARRAY
32407: PPUSH
32408: CALL 31367 0 3
32412: NOT
32413: IFFALSE 32419
// exit ;
32415: POP
32416: POP
32417: GO 32423
32419: GO 32382
32421: POP
32422: POP
// end ;
32423: LD_VAR 0 4
32427: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32428: LD_INT 0
32430: PPUSH
32431: PPUSH
32432: PPUSH
32433: PPUSH
32434: PPUSH
32435: PPUSH
32436: PPUSH
// if not GetClass ( unit ) = class_sniper then
32437: LD_VAR 0 1
32441: PPUSH
32442: CALL_OW 257
32446: PUSH
32447: LD_INT 5
32449: EQUAL
32450: NOT
32451: IFFALSE 32455
// exit ;
32453: GO 32843
// dist := 8 ;
32455: LD_ADDR_VAR 0 5
32459: PUSH
32460: LD_INT 8
32462: ST_TO_ADDR
// viewRange := 12 ;
32463: LD_ADDR_VAR 0 7
32467: PUSH
32468: LD_INT 12
32470: ST_TO_ADDR
// side := GetSide ( unit ) ;
32471: LD_ADDR_VAR 0 6
32475: PUSH
32476: LD_VAR 0 1
32480: PPUSH
32481: CALL_OW 255
32485: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32486: LD_INT 61
32488: PPUSH
32489: LD_VAR 0 6
32493: PPUSH
32494: CALL_OW 321
32498: PUSH
32499: LD_INT 2
32501: EQUAL
32502: IFFALSE 32512
// viewRange := 16 ;
32504: LD_ADDR_VAR 0 7
32508: PUSH
32509: LD_INT 16
32511: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32512: LD_VAR 0 1
32516: PPUSH
32517: LD_VAR 0 2
32521: PPUSH
32522: LD_VAR 0 3
32526: PPUSH
32527: CALL_OW 297
32531: PUSH
32532: LD_VAR 0 5
32536: GREATER
32537: IFFALSE 32616
// begin ComMoveXY ( unit , x , y ) ;
32539: LD_VAR 0 1
32543: PPUSH
32544: LD_VAR 0 2
32548: PPUSH
32549: LD_VAR 0 3
32553: PPUSH
32554: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32558: LD_INT 35
32560: PPUSH
32561: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32565: LD_VAR 0 1
32569: PPUSH
32570: LD_VAR 0 2
32574: PPUSH
32575: LD_VAR 0 3
32579: PPUSH
32580: CALL 69125 0 3
32584: NOT
32585: IFFALSE 32589
// exit ;
32587: GO 32843
// until GetDistUnitXY ( unit , x , y ) < dist ;
32589: LD_VAR 0 1
32593: PPUSH
32594: LD_VAR 0 2
32598: PPUSH
32599: LD_VAR 0 3
32603: PPUSH
32604: CALL_OW 297
32608: PUSH
32609: LD_VAR 0 5
32613: LESS
32614: IFFALSE 32558
// end ; ComTurnXY ( unit , x , y ) ;
32616: LD_VAR 0 1
32620: PPUSH
32621: LD_VAR 0 2
32625: PPUSH
32626: LD_VAR 0 3
32630: PPUSH
32631: CALL_OW 118
// wait ( 5 ) ;
32635: LD_INT 5
32637: PPUSH
32638: CALL_OW 67
// _d := GetDir ( unit ) ;
32642: LD_ADDR_VAR 0 10
32646: PUSH
32647: LD_VAR 0 1
32651: PPUSH
32652: CALL_OW 254
32656: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32657: LD_ADDR_VAR 0 8
32661: PUSH
32662: LD_VAR 0 1
32666: PPUSH
32667: CALL_OW 250
32671: PPUSH
32672: LD_VAR 0 10
32676: PPUSH
32677: LD_VAR 0 5
32681: PPUSH
32682: CALL_OW 272
32686: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32687: LD_ADDR_VAR 0 9
32691: PUSH
32692: LD_VAR 0 1
32696: PPUSH
32697: CALL_OW 251
32701: PPUSH
32702: LD_VAR 0 10
32706: PPUSH
32707: LD_VAR 0 5
32711: PPUSH
32712: CALL_OW 273
32716: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32717: LD_VAR 0 8
32721: PPUSH
32722: LD_VAR 0 9
32726: PPUSH
32727: CALL_OW 488
32731: NOT
32732: IFFALSE 32736
// exit ;
32734: GO 32843
// ComAnimCustom ( unit , 1 ) ;
32736: LD_VAR 0 1
32740: PPUSH
32741: LD_INT 1
32743: PPUSH
32744: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32748: LD_VAR 0 8
32752: PPUSH
32753: LD_VAR 0 9
32757: PPUSH
32758: LD_VAR 0 6
32762: PPUSH
32763: LD_VAR 0 7
32767: PPUSH
32768: CALL_OW 330
// repeat wait ( 1 ) ;
32772: LD_INT 1
32774: PPUSH
32775: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32779: LD_VAR 0 1
32783: PPUSH
32784: CALL_OW 316
32788: PUSH
32789: LD_VAR 0 1
32793: PPUSH
32794: CALL_OW 314
32798: OR
32799: PUSH
32800: LD_VAR 0 1
32804: PPUSH
32805: CALL_OW 302
32809: NOT
32810: OR
32811: PUSH
32812: LD_VAR 0 1
32816: PPUSH
32817: CALL_OW 301
32821: OR
32822: IFFALSE 32772
// RemoveSeeing ( _x , _y , side ) ;
32824: LD_VAR 0 8
32828: PPUSH
32829: LD_VAR 0 9
32833: PPUSH
32834: LD_VAR 0 6
32838: PPUSH
32839: CALL_OW 331
// end ; end_of_file
32843: LD_VAR 0 4
32847: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32848: LD_INT 0
32850: PPUSH
32851: PPUSH
// if exist_mode then
32852: LD_VAR 0 2
32856: IFFALSE 32881
// unit := CreateCharacter ( prefix & ident ) else
32858: LD_ADDR_VAR 0 5
32862: PUSH
32863: LD_VAR 0 3
32867: PUSH
32868: LD_VAR 0 1
32872: STR
32873: PPUSH
32874: CALL_OW 34
32878: ST_TO_ADDR
32879: GO 32896
// unit := NewCharacter ( ident ) ;
32881: LD_ADDR_VAR 0 5
32885: PUSH
32886: LD_VAR 0 1
32890: PPUSH
32891: CALL_OW 25
32895: ST_TO_ADDR
// result := unit ;
32896: LD_ADDR_VAR 0 4
32900: PUSH
32901: LD_VAR 0 5
32905: ST_TO_ADDR
// end ;
32906: LD_VAR 0 4
32910: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32911: LD_INT 0
32913: PPUSH
32914: PPUSH
// if not side or not nation then
32915: LD_VAR 0 1
32919: NOT
32920: PUSH
32921: LD_VAR 0 2
32925: NOT
32926: OR
32927: IFFALSE 32931
// exit ;
32929: GO 33699
// case nation of nation_american :
32931: LD_VAR 0 2
32935: PUSH
32936: LD_INT 1
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 33158
32944: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32945: LD_ADDR_VAR 0 4
32949: PUSH
32950: LD_INT 35
32952: PUSH
32953: LD_INT 45
32955: PUSH
32956: LD_INT 46
32958: PUSH
32959: LD_INT 47
32961: PUSH
32962: LD_INT 82
32964: PUSH
32965: LD_INT 83
32967: PUSH
32968: LD_INT 84
32970: PUSH
32971: LD_INT 85
32973: PUSH
32974: LD_INT 86
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: LD_INT 2
32982: PUSH
32983: LD_INT 6
32985: PUSH
32986: LD_INT 15
32988: PUSH
32989: LD_INT 16
32991: PUSH
32992: LD_INT 7
32994: PUSH
32995: LD_INT 12
32997: PUSH
32998: LD_INT 13
33000: PUSH
33001: LD_INT 10
33003: PUSH
33004: LD_INT 14
33006: PUSH
33007: LD_INT 20
33009: PUSH
33010: LD_INT 21
33012: PUSH
33013: LD_INT 22
33015: PUSH
33016: LD_INT 25
33018: PUSH
33019: LD_INT 32
33021: PUSH
33022: LD_INT 27
33024: PUSH
33025: LD_INT 36
33027: PUSH
33028: LD_INT 69
33030: PUSH
33031: LD_INT 39
33033: PUSH
33034: LD_INT 34
33036: PUSH
33037: LD_INT 40
33039: PUSH
33040: LD_INT 48
33042: PUSH
33043: LD_INT 49
33045: PUSH
33046: LD_INT 50
33048: PUSH
33049: LD_INT 51
33051: PUSH
33052: LD_INT 52
33054: PUSH
33055: LD_INT 53
33057: PUSH
33058: LD_INT 54
33060: PUSH
33061: LD_INT 55
33063: PUSH
33064: LD_INT 56
33066: PUSH
33067: LD_INT 57
33069: PUSH
33070: LD_INT 58
33072: PUSH
33073: LD_INT 59
33075: PUSH
33076: LD_INT 60
33078: PUSH
33079: LD_INT 61
33081: PUSH
33082: LD_INT 62
33084: PUSH
33085: LD_INT 80
33087: PUSH
33088: LD_INT 82
33090: PUSH
33091: LD_INT 83
33093: PUSH
33094: LD_INT 84
33096: PUSH
33097: LD_INT 85
33099: PUSH
33100: LD_INT 86
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: ST_TO_ADDR
33156: GO 33623
33158: LD_INT 2
33160: DOUBLE
33161: EQUAL
33162: IFTRUE 33166
33164: GO 33392
33166: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33167: LD_ADDR_VAR 0 4
33171: PUSH
33172: LD_INT 35
33174: PUSH
33175: LD_INT 45
33177: PUSH
33178: LD_INT 46
33180: PUSH
33181: LD_INT 47
33183: PUSH
33184: LD_INT 82
33186: PUSH
33187: LD_INT 83
33189: PUSH
33190: LD_INT 84
33192: PUSH
33193: LD_INT 85
33195: PUSH
33196: LD_INT 87
33198: PUSH
33199: LD_INT 70
33201: PUSH
33202: LD_INT 1
33204: PUSH
33205: LD_INT 11
33207: PUSH
33208: LD_INT 3
33210: PUSH
33211: LD_INT 4
33213: PUSH
33214: LD_INT 5
33216: PUSH
33217: LD_INT 6
33219: PUSH
33220: LD_INT 15
33222: PUSH
33223: LD_INT 18
33225: PUSH
33226: LD_INT 7
33228: PUSH
33229: LD_INT 17
33231: PUSH
33232: LD_INT 8
33234: PUSH
33235: LD_INT 20
33237: PUSH
33238: LD_INT 21
33240: PUSH
33241: LD_INT 22
33243: PUSH
33244: LD_INT 72
33246: PUSH
33247: LD_INT 26
33249: PUSH
33250: LD_INT 69
33252: PUSH
33253: LD_INT 39
33255: PUSH
33256: LD_INT 40
33258: PUSH
33259: LD_INT 41
33261: PUSH
33262: LD_INT 42
33264: PUSH
33265: LD_INT 43
33267: PUSH
33268: LD_INT 48
33270: PUSH
33271: LD_INT 49
33273: PUSH
33274: LD_INT 50
33276: PUSH
33277: LD_INT 51
33279: PUSH
33280: LD_INT 52
33282: PUSH
33283: LD_INT 53
33285: PUSH
33286: LD_INT 54
33288: PUSH
33289: LD_INT 55
33291: PUSH
33292: LD_INT 56
33294: PUSH
33295: LD_INT 60
33297: PUSH
33298: LD_INT 61
33300: PUSH
33301: LD_INT 62
33303: PUSH
33304: LD_INT 66
33306: PUSH
33307: LD_INT 67
33309: PUSH
33310: LD_INT 68
33312: PUSH
33313: LD_INT 81
33315: PUSH
33316: LD_INT 82
33318: PUSH
33319: LD_INT 83
33321: PUSH
33322: LD_INT 84
33324: PUSH
33325: LD_INT 85
33327: PUSH
33328: LD_INT 87
33330: PUSH
33331: LD_INT 88
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
33390: GO 33623
33392: LD_INT 3
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33622
33400: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33401: LD_ADDR_VAR 0 4
33405: PUSH
33406: LD_INT 46
33408: PUSH
33409: LD_INT 47
33411: PUSH
33412: LD_INT 1
33414: PUSH
33415: LD_INT 2
33417: PUSH
33418: LD_INT 82
33420: PUSH
33421: LD_INT 83
33423: PUSH
33424: LD_INT 84
33426: PUSH
33427: LD_INT 85
33429: PUSH
33430: LD_INT 86
33432: PUSH
33433: LD_INT 11
33435: PUSH
33436: LD_INT 9
33438: PUSH
33439: LD_INT 20
33441: PUSH
33442: LD_INT 19
33444: PUSH
33445: LD_INT 21
33447: PUSH
33448: LD_INT 24
33450: PUSH
33451: LD_INT 22
33453: PUSH
33454: LD_INT 25
33456: PUSH
33457: LD_INT 28
33459: PUSH
33460: LD_INT 29
33462: PUSH
33463: LD_INT 30
33465: PUSH
33466: LD_INT 31
33468: PUSH
33469: LD_INT 37
33471: PUSH
33472: LD_INT 38
33474: PUSH
33475: LD_INT 32
33477: PUSH
33478: LD_INT 27
33480: PUSH
33481: LD_INT 33
33483: PUSH
33484: LD_INT 69
33486: PUSH
33487: LD_INT 39
33489: PUSH
33490: LD_INT 34
33492: PUSH
33493: LD_INT 40
33495: PUSH
33496: LD_INT 71
33498: PUSH
33499: LD_INT 23
33501: PUSH
33502: LD_INT 44
33504: PUSH
33505: LD_INT 48
33507: PUSH
33508: LD_INT 49
33510: PUSH
33511: LD_INT 50
33513: PUSH
33514: LD_INT 51
33516: PUSH
33517: LD_INT 52
33519: PUSH
33520: LD_INT 53
33522: PUSH
33523: LD_INT 54
33525: PUSH
33526: LD_INT 55
33528: PUSH
33529: LD_INT 56
33531: PUSH
33532: LD_INT 57
33534: PUSH
33535: LD_INT 58
33537: PUSH
33538: LD_INT 59
33540: PUSH
33541: LD_INT 63
33543: PUSH
33544: LD_INT 64
33546: PUSH
33547: LD_INT 65
33549: PUSH
33550: LD_INT 82
33552: PUSH
33553: LD_INT 83
33555: PUSH
33556: LD_INT 84
33558: PUSH
33559: LD_INT 85
33561: PUSH
33562: LD_INT 86
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: ST_TO_ADDR
33620: GO 33623
33622: POP
// if state > - 1 and state < 3 then
33623: LD_VAR 0 3
33627: PUSH
33628: LD_INT 1
33630: NEG
33631: GREATER
33632: PUSH
33633: LD_VAR 0 3
33637: PUSH
33638: LD_INT 3
33640: LESS
33641: AND
33642: IFFALSE 33699
// for i in result do
33644: LD_ADDR_VAR 0 5
33648: PUSH
33649: LD_VAR 0 4
33653: PUSH
33654: FOR_IN
33655: IFFALSE 33697
// if GetTech ( i , side ) <> state then
33657: LD_VAR 0 5
33661: PPUSH
33662: LD_VAR 0 1
33666: PPUSH
33667: CALL_OW 321
33671: PUSH
33672: LD_VAR 0 3
33676: NONEQUAL
33677: IFFALSE 33695
// result := result diff i ;
33679: LD_ADDR_VAR 0 4
33683: PUSH
33684: LD_VAR 0 4
33688: PUSH
33689: LD_VAR 0 5
33693: DIFF
33694: ST_TO_ADDR
33695: GO 33654
33697: POP
33698: POP
// end ;
33699: LD_VAR 0 4
33703: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33704: LD_INT 0
33706: PPUSH
33707: PPUSH
33708: PPUSH
// result := true ;
33709: LD_ADDR_VAR 0 3
33713: PUSH
33714: LD_INT 1
33716: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33717: LD_ADDR_VAR 0 5
33721: PUSH
33722: LD_VAR 0 2
33726: PPUSH
33727: CALL_OW 480
33731: ST_TO_ADDR
// if not tmp then
33732: LD_VAR 0 5
33736: NOT
33737: IFFALSE 33741
// exit ;
33739: GO 33790
// for i in tmp do
33741: LD_ADDR_VAR 0 4
33745: PUSH
33746: LD_VAR 0 5
33750: PUSH
33751: FOR_IN
33752: IFFALSE 33788
// if GetTech ( i , side ) <> state_researched then
33754: LD_VAR 0 4
33758: PPUSH
33759: LD_VAR 0 1
33763: PPUSH
33764: CALL_OW 321
33768: PUSH
33769: LD_INT 2
33771: NONEQUAL
33772: IFFALSE 33786
// begin result := false ;
33774: LD_ADDR_VAR 0 3
33778: PUSH
33779: LD_INT 0
33781: ST_TO_ADDR
// exit ;
33782: POP
33783: POP
33784: GO 33790
// end ;
33786: GO 33751
33788: POP
33789: POP
// end ;
33790: LD_VAR 0 3
33794: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33795: LD_INT 0
33797: PPUSH
33798: PPUSH
33799: PPUSH
33800: PPUSH
33801: PPUSH
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
33809: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33810: LD_VAR 0 1
33814: NOT
33815: PUSH
33816: LD_VAR 0 1
33820: PPUSH
33821: CALL_OW 257
33825: PUSH
33826: LD_INT 9
33828: NONEQUAL
33829: OR
33830: IFFALSE 33834
// exit ;
33832: GO 34407
// side := GetSide ( unit ) ;
33834: LD_ADDR_VAR 0 9
33838: PUSH
33839: LD_VAR 0 1
33843: PPUSH
33844: CALL_OW 255
33848: ST_TO_ADDR
// tech_space := tech_spacanom ;
33849: LD_ADDR_VAR 0 12
33853: PUSH
33854: LD_INT 29
33856: ST_TO_ADDR
// tech_time := tech_taurad ;
33857: LD_ADDR_VAR 0 13
33861: PUSH
33862: LD_INT 28
33864: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33865: LD_ADDR_VAR 0 11
33869: PUSH
33870: LD_VAR 0 1
33874: PPUSH
33875: CALL_OW 310
33879: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33880: LD_VAR 0 11
33884: PPUSH
33885: CALL_OW 247
33889: PUSH
33890: LD_INT 2
33892: EQUAL
33893: IFFALSE 33897
// exit ;
33895: GO 34407
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33897: LD_ADDR_VAR 0 8
33901: PUSH
33902: LD_INT 81
33904: PUSH
33905: LD_VAR 0 9
33909: PUSH
33910: EMPTY
33911: LIST
33912: LIST
33913: PUSH
33914: LD_INT 3
33916: PUSH
33917: LD_INT 21
33919: PUSH
33920: LD_INT 3
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PPUSH
33935: CALL_OW 69
33939: ST_TO_ADDR
// if not tmp then
33940: LD_VAR 0 8
33944: NOT
33945: IFFALSE 33949
// exit ;
33947: GO 34407
// if in_unit then
33949: LD_VAR 0 11
33953: IFFALSE 33977
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33955: LD_ADDR_VAR 0 10
33959: PUSH
33960: LD_VAR 0 8
33964: PPUSH
33965: LD_VAR 0 11
33969: PPUSH
33970: CALL_OW 74
33974: ST_TO_ADDR
33975: GO 33997
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33977: LD_ADDR_VAR 0 10
33981: PUSH
33982: LD_VAR 0 8
33986: PPUSH
33987: LD_VAR 0 1
33991: PPUSH
33992: CALL_OW 74
33996: ST_TO_ADDR
// if not enemy then
33997: LD_VAR 0 10
34001: NOT
34002: IFFALSE 34006
// exit ;
34004: GO 34407
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34006: LD_VAR 0 11
34010: PUSH
34011: LD_VAR 0 11
34015: PPUSH
34016: LD_VAR 0 10
34020: PPUSH
34021: CALL_OW 296
34025: PUSH
34026: LD_INT 13
34028: GREATER
34029: AND
34030: PUSH
34031: LD_VAR 0 1
34035: PPUSH
34036: LD_VAR 0 10
34040: PPUSH
34041: CALL_OW 296
34045: PUSH
34046: LD_INT 12
34048: GREATER
34049: OR
34050: IFFALSE 34054
// exit ;
34052: GO 34407
// missile := [ 1 ] ;
34054: LD_ADDR_VAR 0 14
34058: PUSH
34059: LD_INT 1
34061: PUSH
34062: EMPTY
34063: LIST
34064: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34065: LD_VAR 0 9
34069: PPUSH
34070: LD_VAR 0 12
34074: PPUSH
34075: CALL_OW 325
34079: IFFALSE 34108
// missile := Replace ( missile , missile + 1 , 2 ) ;
34081: LD_ADDR_VAR 0 14
34085: PUSH
34086: LD_VAR 0 14
34090: PPUSH
34091: LD_VAR 0 14
34095: PUSH
34096: LD_INT 1
34098: PLUS
34099: PPUSH
34100: LD_INT 2
34102: PPUSH
34103: CALL_OW 1
34107: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34108: LD_VAR 0 9
34112: PPUSH
34113: LD_VAR 0 13
34117: PPUSH
34118: CALL_OW 325
34122: PUSH
34123: LD_VAR 0 10
34127: PPUSH
34128: CALL_OW 255
34132: PPUSH
34133: LD_VAR 0 13
34137: PPUSH
34138: CALL_OW 325
34142: NOT
34143: AND
34144: IFFALSE 34173
// missile := Replace ( missile , missile + 1 , 3 ) ;
34146: LD_ADDR_VAR 0 14
34150: PUSH
34151: LD_VAR 0 14
34155: PPUSH
34156: LD_VAR 0 14
34160: PUSH
34161: LD_INT 1
34163: PLUS
34164: PPUSH
34165: LD_INT 3
34167: PPUSH
34168: CALL_OW 1
34172: ST_TO_ADDR
// if missile < 2 then
34173: LD_VAR 0 14
34177: PUSH
34178: LD_INT 2
34180: LESS
34181: IFFALSE 34185
// exit ;
34183: GO 34407
// x := GetX ( enemy ) ;
34185: LD_ADDR_VAR 0 4
34189: PUSH
34190: LD_VAR 0 10
34194: PPUSH
34195: CALL_OW 250
34199: ST_TO_ADDR
// y := GetY ( enemy ) ;
34200: LD_ADDR_VAR 0 5
34204: PUSH
34205: LD_VAR 0 10
34209: PPUSH
34210: CALL_OW 251
34214: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34215: LD_ADDR_VAR 0 6
34219: PUSH
34220: LD_VAR 0 4
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PPUSH
34229: LD_INT 1
34231: PPUSH
34232: CALL_OW 12
34236: PLUS
34237: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34238: LD_ADDR_VAR 0 7
34242: PUSH
34243: LD_VAR 0 5
34247: PUSH
34248: LD_INT 1
34250: NEG
34251: PPUSH
34252: LD_INT 1
34254: PPUSH
34255: CALL_OW 12
34259: PLUS
34260: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34261: LD_VAR 0 6
34265: PPUSH
34266: LD_VAR 0 7
34270: PPUSH
34271: CALL_OW 488
34275: NOT
34276: IFFALSE 34298
// begin _x := x ;
34278: LD_ADDR_VAR 0 6
34282: PUSH
34283: LD_VAR 0 4
34287: ST_TO_ADDR
// _y := y ;
34288: LD_ADDR_VAR 0 7
34292: PUSH
34293: LD_VAR 0 5
34297: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34298: LD_ADDR_VAR 0 3
34302: PUSH
34303: LD_INT 1
34305: PPUSH
34306: LD_VAR 0 14
34310: PPUSH
34311: CALL_OW 12
34315: ST_TO_ADDR
// case i of 1 :
34316: LD_VAR 0 3
34320: PUSH
34321: LD_INT 1
34323: DOUBLE
34324: EQUAL
34325: IFTRUE 34329
34327: GO 34346
34329: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34330: LD_VAR 0 1
34334: PPUSH
34335: LD_VAR 0 10
34339: PPUSH
34340: CALL_OW 115
34344: GO 34407
34346: LD_INT 2
34348: DOUBLE
34349: EQUAL
34350: IFTRUE 34354
34352: GO 34376
34354: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34355: LD_VAR 0 1
34359: PPUSH
34360: LD_VAR 0 6
34364: PPUSH
34365: LD_VAR 0 7
34369: PPUSH
34370: CALL_OW 153
34374: GO 34407
34376: LD_INT 3
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34406
34384: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34385: LD_VAR 0 1
34389: PPUSH
34390: LD_VAR 0 6
34394: PPUSH
34395: LD_VAR 0 7
34399: PPUSH
34400: CALL_OW 154
34404: GO 34407
34406: POP
// end ;
34407: LD_VAR 0 2
34411: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34412: LD_INT 0
34414: PPUSH
34415: PPUSH
34416: PPUSH
34417: PPUSH
34418: PPUSH
34419: PPUSH
// if not unit or not building then
34420: LD_VAR 0 1
34424: NOT
34425: PUSH
34426: LD_VAR 0 2
34430: NOT
34431: OR
34432: IFFALSE 34436
// exit ;
34434: GO 34594
// x := GetX ( building ) ;
34436: LD_ADDR_VAR 0 5
34440: PUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: CALL_OW 250
34450: ST_TO_ADDR
// y := GetY ( building ) ;
34451: LD_ADDR_VAR 0 6
34455: PUSH
34456: LD_VAR 0 2
34460: PPUSH
34461: CALL_OW 251
34465: ST_TO_ADDR
// for i = 0 to 5 do
34466: LD_ADDR_VAR 0 4
34470: PUSH
34471: DOUBLE
34472: LD_INT 0
34474: DEC
34475: ST_TO_ADDR
34476: LD_INT 5
34478: PUSH
34479: FOR_TO
34480: IFFALSE 34592
// begin _x := ShiftX ( x , i , 3 ) ;
34482: LD_ADDR_VAR 0 7
34486: PUSH
34487: LD_VAR 0 5
34491: PPUSH
34492: LD_VAR 0 4
34496: PPUSH
34497: LD_INT 3
34499: PPUSH
34500: CALL_OW 272
34504: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34505: LD_ADDR_VAR 0 8
34509: PUSH
34510: LD_VAR 0 6
34514: PPUSH
34515: LD_VAR 0 4
34519: PPUSH
34520: LD_INT 3
34522: PPUSH
34523: CALL_OW 273
34527: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34528: LD_VAR 0 7
34532: PPUSH
34533: LD_VAR 0 8
34537: PPUSH
34538: CALL_OW 488
34542: NOT
34543: IFFALSE 34547
// continue ;
34545: GO 34479
// if HexInfo ( _x , _y ) = 0 then
34547: LD_VAR 0 7
34551: PPUSH
34552: LD_VAR 0 8
34556: PPUSH
34557: CALL_OW 428
34561: PUSH
34562: LD_INT 0
34564: EQUAL
34565: IFFALSE 34590
// begin ComMoveXY ( unit , _x , _y ) ;
34567: LD_VAR 0 1
34571: PPUSH
34572: LD_VAR 0 7
34576: PPUSH
34577: LD_VAR 0 8
34581: PPUSH
34582: CALL_OW 111
// exit ;
34586: POP
34587: POP
34588: GO 34594
// end ; end ;
34590: GO 34479
34592: POP
34593: POP
// end ;
34594: LD_VAR 0 3
34598: RET
// export function ScanBase ( side , base_area ) ; begin
34599: LD_INT 0
34601: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34602: LD_ADDR_VAR 0 3
34606: PUSH
34607: LD_VAR 0 2
34611: PPUSH
34612: LD_INT 81
34614: PUSH
34615: LD_VAR 0 1
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PPUSH
34624: CALL_OW 70
34628: ST_TO_ADDR
// end ;
34629: LD_VAR 0 3
34633: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34634: LD_INT 0
34636: PPUSH
34637: PPUSH
34638: PPUSH
34639: PPUSH
// result := false ;
34640: LD_ADDR_VAR 0 2
34644: PUSH
34645: LD_INT 0
34647: ST_TO_ADDR
// side := GetSide ( unit ) ;
34648: LD_ADDR_VAR 0 3
34652: PUSH
34653: LD_VAR 0 1
34657: PPUSH
34658: CALL_OW 255
34662: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34663: LD_ADDR_VAR 0 4
34667: PUSH
34668: LD_VAR 0 1
34672: PPUSH
34673: CALL_OW 248
34677: ST_TO_ADDR
// case nat of 1 :
34678: LD_VAR 0 4
34682: PUSH
34683: LD_INT 1
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34702
34691: POP
// tech := tech_lassight ; 2 :
34692: LD_ADDR_VAR 0 5
34696: PUSH
34697: LD_INT 12
34699: ST_TO_ADDR
34700: GO 34741
34702: LD_INT 2
34704: DOUBLE
34705: EQUAL
34706: IFTRUE 34710
34708: GO 34721
34710: POP
// tech := tech_mortar ; 3 :
34711: LD_ADDR_VAR 0 5
34715: PUSH
34716: LD_INT 41
34718: ST_TO_ADDR
34719: GO 34741
34721: LD_INT 3
34723: DOUBLE
34724: EQUAL
34725: IFTRUE 34729
34727: GO 34740
34729: POP
// tech := tech_bazooka ; end ;
34730: LD_ADDR_VAR 0 5
34734: PUSH
34735: LD_INT 44
34737: ST_TO_ADDR
34738: GO 34741
34740: POP
// if Researched ( side , tech ) then
34741: LD_VAR 0 3
34745: PPUSH
34746: LD_VAR 0 5
34750: PPUSH
34751: CALL_OW 325
34755: IFFALSE 34782
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34757: LD_ADDR_VAR 0 2
34761: PUSH
34762: LD_INT 5
34764: PUSH
34765: LD_INT 8
34767: PUSH
34768: LD_INT 9
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: PUSH
34776: LD_VAR 0 4
34780: ARRAY
34781: ST_TO_ADDR
// end ;
34782: LD_VAR 0 2
34786: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34787: LD_INT 0
34789: PPUSH
34790: PPUSH
34791: PPUSH
// if not mines then
34792: LD_VAR 0 2
34796: NOT
34797: IFFALSE 34801
// exit ;
34799: GO 34945
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34801: LD_ADDR_VAR 0 5
34805: PUSH
34806: LD_INT 81
34808: PUSH
34809: LD_VAR 0 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 3
34820: PUSH
34821: LD_INT 21
34823: PUSH
34824: LD_INT 3
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: EMPTY
34836: LIST
34837: LIST
34838: PPUSH
34839: CALL_OW 69
34843: ST_TO_ADDR
// for i in mines do
34844: LD_ADDR_VAR 0 4
34848: PUSH
34849: LD_VAR 0 2
34853: PUSH
34854: FOR_IN
34855: IFFALSE 34943
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34857: LD_VAR 0 4
34861: PUSH
34862: LD_INT 1
34864: ARRAY
34865: PPUSH
34866: LD_VAR 0 4
34870: PUSH
34871: LD_INT 2
34873: ARRAY
34874: PPUSH
34875: CALL_OW 458
34879: NOT
34880: IFFALSE 34884
// continue ;
34882: GO 34854
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34884: LD_VAR 0 4
34888: PUSH
34889: LD_INT 1
34891: ARRAY
34892: PPUSH
34893: LD_VAR 0 4
34897: PUSH
34898: LD_INT 2
34900: ARRAY
34901: PPUSH
34902: CALL_OW 428
34906: PUSH
34907: LD_VAR 0 5
34911: IN
34912: IFFALSE 34941
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34914: LD_VAR 0 4
34918: PUSH
34919: LD_INT 1
34921: ARRAY
34922: PPUSH
34923: LD_VAR 0 4
34927: PUSH
34928: LD_INT 2
34930: ARRAY
34931: PPUSH
34932: LD_VAR 0 1
34936: PPUSH
34937: CALL_OW 456
// end ;
34941: GO 34854
34943: POP
34944: POP
// end ;
34945: LD_VAR 0 3
34949: RET
// export function Count ( array ) ; var i ; begin
34950: LD_INT 0
34952: PPUSH
34953: PPUSH
// result := 0 ;
34954: LD_ADDR_VAR 0 2
34958: PUSH
34959: LD_INT 0
34961: ST_TO_ADDR
// for i in array do
34962: LD_ADDR_VAR 0 3
34966: PUSH
34967: LD_VAR 0 1
34971: PUSH
34972: FOR_IN
34973: IFFALSE 34997
// if i then
34975: LD_VAR 0 3
34979: IFFALSE 34995
// result := result + 1 ;
34981: LD_ADDR_VAR 0 2
34985: PUSH
34986: LD_VAR 0 2
34990: PUSH
34991: LD_INT 1
34993: PLUS
34994: ST_TO_ADDR
34995: GO 34972
34997: POP
34998: POP
// end ;
34999: LD_VAR 0 2
35003: RET
// export function IsEmpty ( building ) ; begin
35004: LD_INT 0
35006: PPUSH
// if not building then
35007: LD_VAR 0 1
35011: NOT
35012: IFFALSE 35016
// exit ;
35014: GO 35059
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35016: LD_ADDR_VAR 0 2
35020: PUSH
35021: LD_VAR 0 1
35025: PUSH
35026: LD_INT 22
35028: PUSH
35029: LD_VAR 0 1
35033: PPUSH
35034: CALL_OW 255
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 58
35045: PUSH
35046: EMPTY
35047: LIST
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PPUSH
35053: CALL_OW 69
35057: IN
35058: ST_TO_ADDR
// end ;
35059: LD_VAR 0 2
35063: RET
// export function IsNotFull ( building ) ; var places ; begin
35064: LD_INT 0
35066: PPUSH
35067: PPUSH
// if not building then
35068: LD_VAR 0 1
35072: NOT
35073: IFFALSE 35077
// exit ;
35075: GO 35248
// result := false ;
35077: LD_ADDR_VAR 0 2
35081: PUSH
35082: LD_INT 0
35084: ST_TO_ADDR
// places := 0 ;
35085: LD_ADDR_VAR 0 3
35089: PUSH
35090: LD_INT 0
35092: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
35093: LD_VAR 0 1
35097: PPUSH
35098: CALL_OW 266
35102: PUSH
35103: LD_INT 0
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35165
35109: LD_INT 1
35111: DOUBLE
35112: EQUAL
35113: IFTRUE 35165
35115: LD_INT 6
35117: DOUBLE
35118: EQUAL
35119: IFTRUE 35165
35121: LD_INT 7
35123: DOUBLE
35124: EQUAL
35125: IFTRUE 35165
35127: LD_INT 8
35129: DOUBLE
35130: EQUAL
35131: IFTRUE 35165
35133: LD_INT 4
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35165
35139: LD_INT 5
35141: DOUBLE
35142: EQUAL
35143: IFTRUE 35165
35145: LD_INT 2
35147: DOUBLE
35148: EQUAL
35149: IFTRUE 35165
35151: LD_INT 3
35153: DOUBLE
35154: EQUAL
35155: IFTRUE 35165
35157: LD_INT 35
35159: DOUBLE
35160: EQUAL
35161: IFTRUE 35165
35163: GO 35176
35165: POP
// places := 6 ; b_bunker , b_breastwork :
35166: LD_ADDR_VAR 0 3
35170: PUSH
35171: LD_INT 6
35173: ST_TO_ADDR
35174: GO 35221
35176: LD_INT 32
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35190
35182: LD_INT 31
35184: DOUBLE
35185: EQUAL
35186: IFTRUE 35190
35188: GO 35201
35190: POP
// places := 1 ; b_control_tower :
35191: LD_ADDR_VAR 0 3
35195: PUSH
35196: LD_INT 1
35198: ST_TO_ADDR
35199: GO 35221
35201: LD_INT 36
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35209
35207: GO 35220
35209: POP
// places := 3 ; end ;
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_INT 3
35217: ST_TO_ADDR
35218: GO 35221
35220: POP
// if places then
35221: LD_VAR 0 3
35225: IFFALSE 35248
// result := UnitsInside ( building ) < places ;
35227: LD_ADDR_VAR 0 2
35231: PUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 313
35241: PUSH
35242: LD_VAR 0 3
35246: LESS
35247: ST_TO_ADDR
// end ;
35248: LD_VAR 0 2
35252: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35253: LD_INT 0
35255: PPUSH
35256: PPUSH
35257: PPUSH
35258: PPUSH
// tmp := [ ] ;
35259: LD_ADDR_VAR 0 3
35263: PUSH
35264: EMPTY
35265: ST_TO_ADDR
// list := [ ] ;
35266: LD_ADDR_VAR 0 5
35270: PUSH
35271: EMPTY
35272: ST_TO_ADDR
// for i = 16 to 25 do
35273: LD_ADDR_VAR 0 4
35277: PUSH
35278: DOUBLE
35279: LD_INT 16
35281: DEC
35282: ST_TO_ADDR
35283: LD_INT 25
35285: PUSH
35286: FOR_TO
35287: IFFALSE 35360
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35289: LD_ADDR_VAR 0 3
35293: PUSH
35294: LD_VAR 0 3
35298: PUSH
35299: LD_INT 22
35301: PUSH
35302: LD_VAR 0 1
35306: PPUSH
35307: CALL_OW 255
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 91
35318: PUSH
35319: LD_VAR 0 1
35323: PUSH
35324: LD_INT 6
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 30
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: PPUSH
35352: CALL_OW 69
35356: ADD
35357: ST_TO_ADDR
35358: GO 35286
35360: POP
35361: POP
// for i = 1 to tmp do
35362: LD_ADDR_VAR 0 4
35366: PUSH
35367: DOUBLE
35368: LD_INT 1
35370: DEC
35371: ST_TO_ADDR
35372: LD_VAR 0 3
35376: PUSH
35377: FOR_TO
35378: IFFALSE 35466
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35380: LD_ADDR_VAR 0 5
35384: PUSH
35385: LD_VAR 0 5
35389: PUSH
35390: LD_VAR 0 3
35394: PUSH
35395: LD_VAR 0 4
35399: ARRAY
35400: PPUSH
35401: CALL_OW 266
35405: PUSH
35406: LD_VAR 0 3
35410: PUSH
35411: LD_VAR 0 4
35415: ARRAY
35416: PPUSH
35417: CALL_OW 250
35421: PUSH
35422: LD_VAR 0 3
35426: PUSH
35427: LD_VAR 0 4
35431: ARRAY
35432: PPUSH
35433: CALL_OW 251
35437: PUSH
35438: LD_VAR 0 3
35442: PUSH
35443: LD_VAR 0 4
35447: ARRAY
35448: PPUSH
35449: CALL_OW 254
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: PUSH
35460: EMPTY
35461: LIST
35462: ADD
35463: ST_TO_ADDR
35464: GO 35377
35466: POP
35467: POP
// result := list ;
35468: LD_ADDR_VAR 0 2
35472: PUSH
35473: LD_VAR 0 5
35477: ST_TO_ADDR
// end ;
35478: LD_VAR 0 2
35482: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35483: LD_INT 0
35485: PPUSH
35486: PPUSH
35487: PPUSH
35488: PPUSH
35489: PPUSH
35490: PPUSH
35491: PPUSH
// if not factory then
35492: LD_VAR 0 1
35496: NOT
35497: IFFALSE 35501
// exit ;
35499: GO 36094
// if control = control_apeman then
35501: LD_VAR 0 4
35505: PUSH
35506: LD_INT 5
35508: EQUAL
35509: IFFALSE 35618
// begin tmp := UnitsInside ( factory ) ;
35511: LD_ADDR_VAR 0 8
35515: PUSH
35516: LD_VAR 0 1
35520: PPUSH
35521: CALL_OW 313
35525: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35526: LD_VAR 0 8
35530: PPUSH
35531: LD_INT 25
35533: PUSH
35534: LD_INT 12
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PPUSH
35541: CALL_OW 72
35545: NOT
35546: IFFALSE 35556
// control := control_manual ;
35548: LD_ADDR_VAR 0 4
35552: PUSH
35553: LD_INT 1
35555: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35556: LD_ADDR_VAR 0 8
35560: PUSH
35561: LD_VAR 0 1
35565: PPUSH
35566: CALL 35253 0 1
35570: ST_TO_ADDR
// if tmp then
35571: LD_VAR 0 8
35575: IFFALSE 35618
// begin for i in tmp do
35577: LD_ADDR_VAR 0 7
35581: PUSH
35582: LD_VAR 0 8
35586: PUSH
35587: FOR_IN
35588: IFFALSE 35616
// if i [ 1 ] = b_ext_radio then
35590: LD_VAR 0 7
35594: PUSH
35595: LD_INT 1
35597: ARRAY
35598: PUSH
35599: LD_INT 22
35601: EQUAL
35602: IFFALSE 35614
// begin control := control_remote ;
35604: LD_ADDR_VAR 0 4
35608: PUSH
35609: LD_INT 2
35611: ST_TO_ADDR
// break ;
35612: GO 35616
// end ;
35614: GO 35587
35616: POP
35617: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35618: LD_VAR 0 1
35622: PPUSH
35623: LD_VAR 0 2
35627: PPUSH
35628: LD_VAR 0 3
35632: PPUSH
35633: LD_VAR 0 4
35637: PPUSH
35638: LD_VAR 0 5
35642: PPUSH
35643: CALL_OW 448
35647: IFFALSE 35682
// begin result := [ chassis , engine , control , weapon ] ;
35649: LD_ADDR_VAR 0 6
35653: PUSH
35654: LD_VAR 0 2
35658: PUSH
35659: LD_VAR 0 3
35663: PUSH
35664: LD_VAR 0 4
35668: PUSH
35669: LD_VAR 0 5
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: ST_TO_ADDR
// exit ;
35680: GO 36094
// end ; _chassis := AvailableChassisList ( factory ) ;
35682: LD_ADDR_VAR 0 9
35686: PUSH
35687: LD_VAR 0 1
35691: PPUSH
35692: CALL_OW 475
35696: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35697: LD_ADDR_VAR 0 11
35701: PUSH
35702: LD_VAR 0 1
35706: PPUSH
35707: CALL_OW 476
35711: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35712: LD_ADDR_VAR 0 12
35716: PUSH
35717: LD_VAR 0 1
35721: PPUSH
35722: CALL_OW 477
35726: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35727: LD_ADDR_VAR 0 10
35731: PUSH
35732: LD_VAR 0 1
35736: PPUSH
35737: CALL_OW 478
35741: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35742: LD_VAR 0 9
35746: NOT
35747: PUSH
35748: LD_VAR 0 11
35752: NOT
35753: OR
35754: PUSH
35755: LD_VAR 0 12
35759: NOT
35760: OR
35761: PUSH
35762: LD_VAR 0 10
35766: NOT
35767: OR
35768: IFFALSE 35803
// begin result := [ chassis , engine , control , weapon ] ;
35770: LD_ADDR_VAR 0 6
35774: PUSH
35775: LD_VAR 0 2
35779: PUSH
35780: LD_VAR 0 3
35784: PUSH
35785: LD_VAR 0 4
35789: PUSH
35790: LD_VAR 0 5
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: ST_TO_ADDR
// exit ;
35801: GO 36094
// end ; if not chassis in _chassis then
35803: LD_VAR 0 2
35807: PUSH
35808: LD_VAR 0 9
35812: IN
35813: NOT
35814: IFFALSE 35840
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35816: LD_ADDR_VAR 0 2
35820: PUSH
35821: LD_VAR 0 9
35825: PUSH
35826: LD_INT 1
35828: PPUSH
35829: LD_VAR 0 9
35833: PPUSH
35834: CALL_OW 12
35838: ARRAY
35839: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35840: LD_VAR 0 2
35844: PPUSH
35845: LD_VAR 0 3
35849: PPUSH
35850: CALL 36099 0 2
35854: NOT
35855: IFFALSE 35914
// repeat engine := _engine [ 1 ] ;
35857: LD_ADDR_VAR 0 3
35861: PUSH
35862: LD_VAR 0 11
35866: PUSH
35867: LD_INT 1
35869: ARRAY
35870: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35871: LD_ADDR_VAR 0 11
35875: PUSH
35876: LD_VAR 0 11
35880: PPUSH
35881: LD_INT 1
35883: PPUSH
35884: CALL_OW 3
35888: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35889: LD_VAR 0 2
35893: PPUSH
35894: LD_VAR 0 3
35898: PPUSH
35899: CALL 36099 0 2
35903: PUSH
35904: LD_VAR 0 11
35908: PUSH
35909: EMPTY
35910: EQUAL
35911: OR
35912: IFFALSE 35857
// if not control in _control then
35914: LD_VAR 0 4
35918: PUSH
35919: LD_VAR 0 12
35923: IN
35924: NOT
35925: IFFALSE 35951
// control := _control [ rand ( 1 , _control ) ] ;
35927: LD_ADDR_VAR 0 4
35931: PUSH
35932: LD_VAR 0 12
35936: PUSH
35937: LD_INT 1
35939: PPUSH
35940: LD_VAR 0 12
35944: PPUSH
35945: CALL_OW 12
35949: ARRAY
35950: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35951: LD_VAR 0 2
35955: PPUSH
35956: LD_VAR 0 5
35960: PPUSH
35961: CALL 36319 0 2
35965: NOT
35966: IFFALSE 36025
// repeat weapon := _weapon [ 1 ] ;
35968: LD_ADDR_VAR 0 5
35972: PUSH
35973: LD_VAR 0 10
35977: PUSH
35978: LD_INT 1
35980: ARRAY
35981: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35982: LD_ADDR_VAR 0 10
35986: PUSH
35987: LD_VAR 0 10
35991: PPUSH
35992: LD_INT 1
35994: PPUSH
35995: CALL_OW 3
35999: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36000: LD_VAR 0 2
36004: PPUSH
36005: LD_VAR 0 5
36009: PPUSH
36010: CALL 36319 0 2
36014: PUSH
36015: LD_VAR 0 10
36019: PUSH
36020: EMPTY
36021: EQUAL
36022: OR
36023: IFFALSE 35968
// result := [ ] ;
36025: LD_ADDR_VAR 0 6
36029: PUSH
36030: EMPTY
36031: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36032: LD_VAR 0 1
36036: PPUSH
36037: LD_VAR 0 2
36041: PPUSH
36042: LD_VAR 0 3
36046: PPUSH
36047: LD_VAR 0 4
36051: PPUSH
36052: LD_VAR 0 5
36056: PPUSH
36057: CALL_OW 448
36061: IFFALSE 36094
// result := [ chassis , engine , control , weapon ] ;
36063: LD_ADDR_VAR 0 6
36067: PUSH
36068: LD_VAR 0 2
36072: PUSH
36073: LD_VAR 0 3
36077: PUSH
36078: LD_VAR 0 4
36082: PUSH
36083: LD_VAR 0 5
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: ST_TO_ADDR
// end ;
36094: LD_VAR 0 6
36098: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36099: LD_INT 0
36101: PPUSH
// if not chassis or not engine then
36102: LD_VAR 0 1
36106: NOT
36107: PUSH
36108: LD_VAR 0 2
36112: NOT
36113: OR
36114: IFFALSE 36118
// exit ;
36116: GO 36314
// case engine of engine_solar :
36118: LD_VAR 0 2
36122: PUSH
36123: LD_INT 2
36125: DOUBLE
36126: EQUAL
36127: IFTRUE 36131
36129: GO 36169
36131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36132: LD_ADDR_VAR 0 3
36136: PUSH
36137: LD_INT 11
36139: PUSH
36140: LD_INT 12
36142: PUSH
36143: LD_INT 13
36145: PUSH
36146: LD_INT 14
36148: PUSH
36149: LD_INT 1
36151: PUSH
36152: LD_INT 2
36154: PUSH
36155: LD_INT 3
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: ST_TO_ADDR
36167: GO 36298
36169: LD_INT 1
36171: DOUBLE
36172: EQUAL
36173: IFTRUE 36177
36175: GO 36239
36177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_INT 11
36185: PUSH
36186: LD_INT 12
36188: PUSH
36189: LD_INT 13
36191: PUSH
36192: LD_INT 14
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: LD_INT 4
36206: PUSH
36207: LD_INT 5
36209: PUSH
36210: LD_INT 21
36212: PUSH
36213: LD_INT 23
36215: PUSH
36216: LD_INT 22
36218: PUSH
36219: LD_INT 24
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: ST_TO_ADDR
36237: GO 36298
36239: LD_INT 3
36241: DOUBLE
36242: EQUAL
36243: IFTRUE 36247
36245: GO 36297
36247: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36248: LD_ADDR_VAR 0 3
36252: PUSH
36253: LD_INT 13
36255: PUSH
36256: LD_INT 14
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 3
36264: PUSH
36265: LD_INT 4
36267: PUSH
36268: LD_INT 5
36270: PUSH
36271: LD_INT 21
36273: PUSH
36274: LD_INT 22
36276: PUSH
36277: LD_INT 23
36279: PUSH
36280: LD_INT 24
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: ST_TO_ADDR
36295: GO 36298
36297: POP
// result := ( chassis in result ) ;
36298: LD_ADDR_VAR 0 3
36302: PUSH
36303: LD_VAR 0 1
36307: PUSH
36308: LD_VAR 0 3
36312: IN
36313: ST_TO_ADDR
// end ;
36314: LD_VAR 0 3
36318: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36319: LD_INT 0
36321: PPUSH
// if not chassis or not weapon then
36322: LD_VAR 0 1
36326: NOT
36327: PUSH
36328: LD_VAR 0 2
36332: NOT
36333: OR
36334: IFFALSE 36338
// exit ;
36336: GO 37398
// case weapon of us_machine_gun :
36338: LD_VAR 0 2
36342: PUSH
36343: LD_INT 2
36345: DOUBLE
36346: EQUAL
36347: IFTRUE 36351
36349: GO 36381
36351: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36352: LD_ADDR_VAR 0 3
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 2
36362: PUSH
36363: LD_INT 3
36365: PUSH
36366: LD_INT 4
36368: PUSH
36369: LD_INT 5
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: ST_TO_ADDR
36379: GO 37382
36381: LD_INT 3
36383: DOUBLE
36384: EQUAL
36385: IFTRUE 36389
36387: GO 36419
36389: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36390: LD_ADDR_VAR 0 3
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: LD_INT 2
36400: PUSH
36401: LD_INT 3
36403: PUSH
36404: LD_INT 4
36406: PUSH
36407: LD_INT 5
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
36417: GO 37382
36419: LD_INT 11
36421: DOUBLE
36422: EQUAL
36423: IFTRUE 36427
36425: GO 36457
36427: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36428: LD_ADDR_VAR 0 3
36432: PUSH
36433: LD_INT 1
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: LD_INT 3
36441: PUSH
36442: LD_INT 4
36444: PUSH
36445: LD_INT 5
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
36455: GO 37382
36457: LD_INT 4
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36465
36463: GO 36491
36465: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36466: LD_ADDR_VAR 0 3
36470: PUSH
36471: LD_INT 2
36473: PUSH
36474: LD_INT 3
36476: PUSH
36477: LD_INT 4
36479: PUSH
36480: LD_INT 5
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
36489: GO 37382
36491: LD_INT 5
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36525
36499: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 2
36507: PUSH
36508: LD_INT 3
36510: PUSH
36511: LD_INT 4
36513: PUSH
36514: LD_INT 5
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
36523: GO 37382
36525: LD_INT 9
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36559
36533: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 3
36544: PUSH
36545: LD_INT 4
36547: PUSH
36548: LD_INT 5
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 37382
36559: LD_INT 7
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36567
36565: GO 36593
36567: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 2
36575: PUSH
36576: LD_INT 3
36578: PUSH
36579: LD_INT 4
36581: PUSH
36582: LD_INT 5
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: ST_TO_ADDR
36591: GO 37382
36593: LD_INT 12
36595: DOUBLE
36596: EQUAL
36597: IFTRUE 36601
36599: GO 36627
36601: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36602: LD_ADDR_VAR 0 3
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: LD_INT 4
36615: PUSH
36616: LD_INT 5
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: ST_TO_ADDR
36625: GO 37382
36627: LD_INT 13
36629: DOUBLE
36630: EQUAL
36631: IFTRUE 36635
36633: GO 36661
36635: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36636: LD_ADDR_VAR 0 3
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 3
36646: PUSH
36647: LD_INT 4
36649: PUSH
36650: LD_INT 5
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: ST_TO_ADDR
36659: GO 37382
36661: LD_INT 14
36663: DOUBLE
36664: EQUAL
36665: IFTRUE 36669
36667: GO 36687
36669: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36670: LD_ADDR_VAR 0 3
36674: PUSH
36675: LD_INT 4
36677: PUSH
36678: LD_INT 5
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: ST_TO_ADDR
36685: GO 37382
36687: LD_INT 6
36689: DOUBLE
36690: EQUAL
36691: IFTRUE 36695
36693: GO 36713
36695: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_INT 4
36703: PUSH
36704: LD_INT 5
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: ST_TO_ADDR
36711: GO 37382
36713: LD_INT 10
36715: DOUBLE
36716: EQUAL
36717: IFTRUE 36721
36719: GO 36739
36721: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36722: LD_ADDR_VAR 0 3
36726: PUSH
36727: LD_INT 4
36729: PUSH
36730: LD_INT 5
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: ST_TO_ADDR
36737: GO 37382
36739: LD_INT 22
36741: DOUBLE
36742: EQUAL
36743: IFTRUE 36747
36745: GO 36773
36747: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36748: LD_ADDR_VAR 0 3
36752: PUSH
36753: LD_INT 11
36755: PUSH
36756: LD_INT 12
36758: PUSH
36759: LD_INT 13
36761: PUSH
36762: LD_INT 14
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: ST_TO_ADDR
36771: GO 37382
36773: LD_INT 23
36775: DOUBLE
36776: EQUAL
36777: IFTRUE 36781
36779: GO 36807
36781: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36782: LD_ADDR_VAR 0 3
36786: PUSH
36787: LD_INT 11
36789: PUSH
36790: LD_INT 12
36792: PUSH
36793: LD_INT 13
36795: PUSH
36796: LD_INT 14
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
36805: GO 37382
36807: LD_INT 24
36809: DOUBLE
36810: EQUAL
36811: IFTRUE 36815
36813: GO 36841
36815: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36816: LD_ADDR_VAR 0 3
36820: PUSH
36821: LD_INT 11
36823: PUSH
36824: LD_INT 12
36826: PUSH
36827: LD_INT 13
36829: PUSH
36830: LD_INT 14
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: ST_TO_ADDR
36839: GO 37382
36841: LD_INT 30
36843: DOUBLE
36844: EQUAL
36845: IFTRUE 36849
36847: GO 36875
36849: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36850: LD_ADDR_VAR 0 3
36854: PUSH
36855: LD_INT 11
36857: PUSH
36858: LD_INT 12
36860: PUSH
36861: LD_INT 13
36863: PUSH
36864: LD_INT 14
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: ST_TO_ADDR
36873: GO 37382
36875: LD_INT 25
36877: DOUBLE
36878: EQUAL
36879: IFTRUE 36883
36881: GO 36901
36883: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36884: LD_ADDR_VAR 0 3
36888: PUSH
36889: LD_INT 13
36891: PUSH
36892: LD_INT 14
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: ST_TO_ADDR
36899: GO 37382
36901: LD_INT 27
36903: DOUBLE
36904: EQUAL
36905: IFTRUE 36909
36907: GO 36927
36909: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36910: LD_ADDR_VAR 0 3
36914: PUSH
36915: LD_INT 13
36917: PUSH
36918: LD_INT 14
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: ST_TO_ADDR
36925: GO 37382
36927: LD_INT 92
36929: DOUBLE
36930: EQUAL
36931: IFTRUE 36935
36933: GO 36961
36935: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_INT 11
36943: PUSH
36944: LD_INT 12
36946: PUSH
36947: LD_INT 13
36949: PUSH
36950: LD_INT 14
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
36959: GO 37382
36961: LD_INT 28
36963: DOUBLE
36964: EQUAL
36965: IFTRUE 36969
36967: GO 36987
36969: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36970: LD_ADDR_VAR 0 3
36974: PUSH
36975: LD_INT 13
36977: PUSH
36978: LD_INT 14
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: ST_TO_ADDR
36985: GO 37382
36987: LD_INT 29
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37013
36995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36996: LD_ADDR_VAR 0 3
37000: PUSH
37001: LD_INT 13
37003: PUSH
37004: LD_INT 14
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: ST_TO_ADDR
37011: GO 37382
37013: LD_INT 31
37015: DOUBLE
37016: EQUAL
37017: IFTRUE 37021
37019: GO 37039
37021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37022: LD_ADDR_VAR 0 3
37026: PUSH
37027: LD_INT 13
37029: PUSH
37030: LD_INT 14
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: ST_TO_ADDR
37037: GO 37382
37039: LD_INT 26
37041: DOUBLE
37042: EQUAL
37043: IFTRUE 37047
37045: GO 37065
37047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37048: LD_ADDR_VAR 0 3
37052: PUSH
37053: LD_INT 13
37055: PUSH
37056: LD_INT 14
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: ST_TO_ADDR
37063: GO 37382
37065: LD_INT 42
37067: DOUBLE
37068: EQUAL
37069: IFTRUE 37073
37071: GO 37099
37073: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37074: LD_ADDR_VAR 0 3
37078: PUSH
37079: LD_INT 21
37081: PUSH
37082: LD_INT 22
37084: PUSH
37085: LD_INT 23
37087: PUSH
37088: LD_INT 24
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
37097: GO 37382
37099: LD_INT 43
37101: DOUBLE
37102: EQUAL
37103: IFTRUE 37107
37105: GO 37133
37107: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37108: LD_ADDR_VAR 0 3
37112: PUSH
37113: LD_INT 21
37115: PUSH
37116: LD_INT 22
37118: PUSH
37119: LD_INT 23
37121: PUSH
37122: LD_INT 24
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
37131: GO 37382
37133: LD_INT 44
37135: DOUBLE
37136: EQUAL
37137: IFTRUE 37141
37139: GO 37167
37141: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37142: LD_ADDR_VAR 0 3
37146: PUSH
37147: LD_INT 21
37149: PUSH
37150: LD_INT 22
37152: PUSH
37153: LD_INT 23
37155: PUSH
37156: LD_INT 24
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: ST_TO_ADDR
37165: GO 37382
37167: LD_INT 45
37169: DOUBLE
37170: EQUAL
37171: IFTRUE 37175
37173: GO 37201
37175: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37176: LD_ADDR_VAR 0 3
37180: PUSH
37181: LD_INT 21
37183: PUSH
37184: LD_INT 22
37186: PUSH
37187: LD_INT 23
37189: PUSH
37190: LD_INT 24
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: LIST
37198: ST_TO_ADDR
37199: GO 37382
37201: LD_INT 49
37203: DOUBLE
37204: EQUAL
37205: IFTRUE 37209
37207: GO 37235
37209: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_INT 21
37217: PUSH
37218: LD_INT 22
37220: PUSH
37221: LD_INT 23
37223: PUSH
37224: LD_INT 24
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: ST_TO_ADDR
37233: GO 37382
37235: LD_INT 51
37237: DOUBLE
37238: EQUAL
37239: IFTRUE 37243
37241: GO 37269
37243: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37244: LD_ADDR_VAR 0 3
37248: PUSH
37249: LD_INT 21
37251: PUSH
37252: LD_INT 22
37254: PUSH
37255: LD_INT 23
37257: PUSH
37258: LD_INT 24
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: ST_TO_ADDR
37267: GO 37382
37269: LD_INT 52
37271: DOUBLE
37272: EQUAL
37273: IFTRUE 37277
37275: GO 37303
37277: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37278: LD_ADDR_VAR 0 3
37282: PUSH
37283: LD_INT 21
37285: PUSH
37286: LD_INT 22
37288: PUSH
37289: LD_INT 23
37291: PUSH
37292: LD_INT 24
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: ST_TO_ADDR
37301: GO 37382
37303: LD_INT 53
37305: DOUBLE
37306: EQUAL
37307: IFTRUE 37311
37309: GO 37329
37311: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37312: LD_ADDR_VAR 0 3
37316: PUSH
37317: LD_INT 23
37319: PUSH
37320: LD_INT 24
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: ST_TO_ADDR
37327: GO 37382
37329: LD_INT 46
37331: DOUBLE
37332: EQUAL
37333: IFTRUE 37337
37335: GO 37355
37337: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37338: LD_ADDR_VAR 0 3
37342: PUSH
37343: LD_INT 23
37345: PUSH
37346: LD_INT 24
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: ST_TO_ADDR
37353: GO 37382
37355: LD_INT 47
37357: DOUBLE
37358: EQUAL
37359: IFTRUE 37363
37361: GO 37381
37363: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37364: LD_ADDR_VAR 0 3
37368: PUSH
37369: LD_INT 23
37371: PUSH
37372: LD_INT 24
37374: PUSH
37375: EMPTY
37376: LIST
37377: LIST
37378: ST_TO_ADDR
37379: GO 37382
37381: POP
// result := ( chassis in result ) ;
37382: LD_ADDR_VAR 0 3
37386: PUSH
37387: LD_VAR 0 1
37391: PUSH
37392: LD_VAR 0 3
37396: IN
37397: ST_TO_ADDR
// end ;
37398: LD_VAR 0 3
37402: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37403: LD_INT 0
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
37411: PPUSH
// result := array ;
37412: LD_ADDR_VAR 0 5
37416: PUSH
37417: LD_VAR 0 1
37421: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37422: LD_VAR 0 1
37426: NOT
37427: PUSH
37428: LD_VAR 0 2
37432: NOT
37433: OR
37434: PUSH
37435: LD_VAR 0 3
37439: NOT
37440: OR
37441: PUSH
37442: LD_VAR 0 2
37446: PUSH
37447: LD_VAR 0 1
37451: GREATER
37452: OR
37453: PUSH
37454: LD_VAR 0 3
37458: PUSH
37459: LD_VAR 0 1
37463: GREATER
37464: OR
37465: IFFALSE 37469
// exit ;
37467: GO 37765
// if direction then
37469: LD_VAR 0 4
37473: IFFALSE 37537
// begin d := 1 ;
37475: LD_ADDR_VAR 0 9
37479: PUSH
37480: LD_INT 1
37482: ST_TO_ADDR
// if i_from > i_to then
37483: LD_VAR 0 2
37487: PUSH
37488: LD_VAR 0 3
37492: GREATER
37493: IFFALSE 37519
// length := ( array - i_from ) + i_to else
37495: LD_ADDR_VAR 0 11
37499: PUSH
37500: LD_VAR 0 1
37504: PUSH
37505: LD_VAR 0 2
37509: MINUS
37510: PUSH
37511: LD_VAR 0 3
37515: PLUS
37516: ST_TO_ADDR
37517: GO 37535
// length := i_to - i_from ;
37519: LD_ADDR_VAR 0 11
37523: PUSH
37524: LD_VAR 0 3
37528: PUSH
37529: LD_VAR 0 2
37533: MINUS
37534: ST_TO_ADDR
// end else
37535: GO 37598
// begin d := - 1 ;
37537: LD_ADDR_VAR 0 9
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: ST_TO_ADDR
// if i_from > i_to then
37546: LD_VAR 0 2
37550: PUSH
37551: LD_VAR 0 3
37555: GREATER
37556: IFFALSE 37576
// length := i_from - i_to else
37558: LD_ADDR_VAR 0 11
37562: PUSH
37563: LD_VAR 0 2
37567: PUSH
37568: LD_VAR 0 3
37572: MINUS
37573: ST_TO_ADDR
37574: GO 37598
// length := ( array - i_to ) + i_from ;
37576: LD_ADDR_VAR 0 11
37580: PUSH
37581: LD_VAR 0 1
37585: PUSH
37586: LD_VAR 0 3
37590: MINUS
37591: PUSH
37592: LD_VAR 0 2
37596: PLUS
37597: ST_TO_ADDR
// end ; if not length then
37598: LD_VAR 0 11
37602: NOT
37603: IFFALSE 37607
// exit ;
37605: GO 37765
// tmp := array ;
37607: LD_ADDR_VAR 0 10
37611: PUSH
37612: LD_VAR 0 1
37616: ST_TO_ADDR
// for i = 1 to length do
37617: LD_ADDR_VAR 0 6
37621: PUSH
37622: DOUBLE
37623: LD_INT 1
37625: DEC
37626: ST_TO_ADDR
37627: LD_VAR 0 11
37631: PUSH
37632: FOR_TO
37633: IFFALSE 37753
// begin for j = 1 to array do
37635: LD_ADDR_VAR 0 7
37639: PUSH
37640: DOUBLE
37641: LD_INT 1
37643: DEC
37644: ST_TO_ADDR
37645: LD_VAR 0 1
37649: PUSH
37650: FOR_TO
37651: IFFALSE 37739
// begin k := j + d ;
37653: LD_ADDR_VAR 0 8
37657: PUSH
37658: LD_VAR 0 7
37662: PUSH
37663: LD_VAR 0 9
37667: PLUS
37668: ST_TO_ADDR
// if k > array then
37669: LD_VAR 0 8
37673: PUSH
37674: LD_VAR 0 1
37678: GREATER
37679: IFFALSE 37689
// k := 1 ;
37681: LD_ADDR_VAR 0 8
37685: PUSH
37686: LD_INT 1
37688: ST_TO_ADDR
// if not k then
37689: LD_VAR 0 8
37693: NOT
37694: IFFALSE 37706
// k := array ;
37696: LD_ADDR_VAR 0 8
37700: PUSH
37701: LD_VAR 0 1
37705: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37706: LD_ADDR_VAR 0 10
37710: PUSH
37711: LD_VAR 0 10
37715: PPUSH
37716: LD_VAR 0 8
37720: PPUSH
37721: LD_VAR 0 1
37725: PUSH
37726: LD_VAR 0 7
37730: ARRAY
37731: PPUSH
37732: CALL_OW 1
37736: ST_TO_ADDR
// end ;
37737: GO 37650
37739: POP
37740: POP
// array := tmp ;
37741: LD_ADDR_VAR 0 1
37745: PUSH
37746: LD_VAR 0 10
37750: ST_TO_ADDR
// end ;
37751: GO 37632
37753: POP
37754: POP
// result := array ;
37755: LD_ADDR_VAR 0 5
37759: PUSH
37760: LD_VAR 0 1
37764: ST_TO_ADDR
// end ;
37765: LD_VAR 0 5
37769: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37770: LD_INT 0
37772: PPUSH
37773: PPUSH
// result := 0 ;
37774: LD_ADDR_VAR 0 3
37778: PUSH
37779: LD_INT 0
37781: ST_TO_ADDR
// if not array or not value in array then
37782: LD_VAR 0 1
37786: NOT
37787: PUSH
37788: LD_VAR 0 2
37792: PUSH
37793: LD_VAR 0 1
37797: IN
37798: NOT
37799: OR
37800: IFFALSE 37804
// exit ;
37802: GO 37858
// for i = 1 to array do
37804: LD_ADDR_VAR 0 4
37808: PUSH
37809: DOUBLE
37810: LD_INT 1
37812: DEC
37813: ST_TO_ADDR
37814: LD_VAR 0 1
37818: PUSH
37819: FOR_TO
37820: IFFALSE 37856
// if value = array [ i ] then
37822: LD_VAR 0 2
37826: PUSH
37827: LD_VAR 0 1
37831: PUSH
37832: LD_VAR 0 4
37836: ARRAY
37837: EQUAL
37838: IFFALSE 37854
// begin result := i ;
37840: LD_ADDR_VAR 0 3
37844: PUSH
37845: LD_VAR 0 4
37849: ST_TO_ADDR
// exit ;
37850: POP
37851: POP
37852: GO 37858
// end ;
37854: GO 37819
37856: POP
37857: POP
// end ;
37858: LD_VAR 0 3
37862: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37863: LD_INT 0
37865: PPUSH
// vc_chassis := chassis ;
37866: LD_ADDR_OWVAR 37
37870: PUSH
37871: LD_VAR 0 1
37875: ST_TO_ADDR
// vc_engine := engine ;
37876: LD_ADDR_OWVAR 39
37880: PUSH
37881: LD_VAR 0 2
37885: ST_TO_ADDR
// vc_control := control ;
37886: LD_ADDR_OWVAR 38
37890: PUSH
37891: LD_VAR 0 3
37895: ST_TO_ADDR
// vc_weapon := weapon ;
37896: LD_ADDR_OWVAR 40
37900: PUSH
37901: LD_VAR 0 4
37905: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37906: LD_ADDR_OWVAR 41
37910: PUSH
37911: LD_VAR 0 5
37915: ST_TO_ADDR
// end ;
37916: LD_VAR 0 6
37920: RET
// export function WantPlant ( unit ) ; var task ; begin
37921: LD_INT 0
37923: PPUSH
37924: PPUSH
// result := false ;
37925: LD_ADDR_VAR 0 2
37929: PUSH
37930: LD_INT 0
37932: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37933: LD_ADDR_VAR 0 3
37937: PUSH
37938: LD_VAR 0 1
37942: PPUSH
37943: CALL_OW 437
37947: ST_TO_ADDR
// if task then
37948: LD_VAR 0 3
37952: IFFALSE 37980
// if task [ 1 ] [ 1 ] = p then
37954: LD_VAR 0 3
37958: PUSH
37959: LD_INT 1
37961: ARRAY
37962: PUSH
37963: LD_INT 1
37965: ARRAY
37966: PUSH
37967: LD_STRING p
37969: EQUAL
37970: IFFALSE 37980
// result := true ;
37972: LD_ADDR_VAR 0 2
37976: PUSH
37977: LD_INT 1
37979: ST_TO_ADDR
// end ;
37980: LD_VAR 0 2
37984: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37985: LD_INT 0
37987: PPUSH
37988: PPUSH
37989: PPUSH
37990: PPUSH
// if pos < 1 then
37991: LD_VAR 0 2
37995: PUSH
37996: LD_INT 1
37998: LESS
37999: IFFALSE 38003
// exit ;
38001: GO 38306
// if pos = 1 then
38003: LD_VAR 0 2
38007: PUSH
38008: LD_INT 1
38010: EQUAL
38011: IFFALSE 38044
// result := Replace ( arr , pos [ 1 ] , value ) else
38013: LD_ADDR_VAR 0 4
38017: PUSH
38018: LD_VAR 0 1
38022: PPUSH
38023: LD_VAR 0 2
38027: PUSH
38028: LD_INT 1
38030: ARRAY
38031: PPUSH
38032: LD_VAR 0 3
38036: PPUSH
38037: CALL_OW 1
38041: ST_TO_ADDR
38042: GO 38306
// begin tmp := arr ;
38044: LD_ADDR_VAR 0 6
38048: PUSH
38049: LD_VAR 0 1
38053: ST_TO_ADDR
// s_arr := [ tmp ] ;
38054: LD_ADDR_VAR 0 7
38058: PUSH
38059: LD_VAR 0 6
38063: PUSH
38064: EMPTY
38065: LIST
38066: ST_TO_ADDR
// for i = 1 to pos - 1 do
38067: LD_ADDR_VAR 0 5
38071: PUSH
38072: DOUBLE
38073: LD_INT 1
38075: DEC
38076: ST_TO_ADDR
38077: LD_VAR 0 2
38081: PUSH
38082: LD_INT 1
38084: MINUS
38085: PUSH
38086: FOR_TO
38087: IFFALSE 38132
// begin tmp := tmp [ pos [ i ] ] ;
38089: LD_ADDR_VAR 0 6
38093: PUSH
38094: LD_VAR 0 6
38098: PUSH
38099: LD_VAR 0 2
38103: PUSH
38104: LD_VAR 0 5
38108: ARRAY
38109: ARRAY
38110: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38111: LD_ADDR_VAR 0 7
38115: PUSH
38116: LD_VAR 0 7
38120: PUSH
38121: LD_VAR 0 6
38125: PUSH
38126: EMPTY
38127: LIST
38128: ADD
38129: ST_TO_ADDR
// end ;
38130: GO 38086
38132: POP
38133: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38134: LD_ADDR_VAR 0 6
38138: PUSH
38139: LD_VAR 0 6
38143: PPUSH
38144: LD_VAR 0 2
38148: PUSH
38149: LD_VAR 0 2
38153: ARRAY
38154: PPUSH
38155: LD_VAR 0 3
38159: PPUSH
38160: CALL_OW 1
38164: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38165: LD_ADDR_VAR 0 7
38169: PUSH
38170: LD_VAR 0 7
38174: PPUSH
38175: LD_VAR 0 7
38179: PPUSH
38180: LD_VAR 0 6
38184: PPUSH
38185: CALL_OW 1
38189: ST_TO_ADDR
// for i = s_arr downto 2 do
38190: LD_ADDR_VAR 0 5
38194: PUSH
38195: DOUBLE
38196: LD_VAR 0 7
38200: INC
38201: ST_TO_ADDR
38202: LD_INT 2
38204: PUSH
38205: FOR_DOWNTO
38206: IFFALSE 38290
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38208: LD_ADDR_VAR 0 6
38212: PUSH
38213: LD_VAR 0 7
38217: PUSH
38218: LD_VAR 0 5
38222: PUSH
38223: LD_INT 1
38225: MINUS
38226: ARRAY
38227: PPUSH
38228: LD_VAR 0 2
38232: PUSH
38233: LD_VAR 0 5
38237: PUSH
38238: LD_INT 1
38240: MINUS
38241: ARRAY
38242: PPUSH
38243: LD_VAR 0 7
38247: PUSH
38248: LD_VAR 0 5
38252: ARRAY
38253: PPUSH
38254: CALL_OW 1
38258: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38259: LD_ADDR_VAR 0 7
38263: PUSH
38264: LD_VAR 0 7
38268: PPUSH
38269: LD_VAR 0 5
38273: PUSH
38274: LD_INT 1
38276: MINUS
38277: PPUSH
38278: LD_VAR 0 6
38282: PPUSH
38283: CALL_OW 1
38287: ST_TO_ADDR
// end ;
38288: GO 38205
38290: POP
38291: POP
// result := s_arr [ 1 ] ;
38292: LD_ADDR_VAR 0 4
38296: PUSH
38297: LD_VAR 0 7
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: ST_TO_ADDR
// end ; end ;
38306: LD_VAR 0 4
38310: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38311: LD_INT 0
38313: PPUSH
38314: PPUSH
// if not list then
38315: LD_VAR 0 1
38319: NOT
38320: IFFALSE 38324
// exit ;
38322: GO 38415
// i := list [ pos1 ] ;
38324: LD_ADDR_VAR 0 5
38328: PUSH
38329: LD_VAR 0 1
38333: PUSH
38334: LD_VAR 0 2
38338: ARRAY
38339: ST_TO_ADDR
// if not i then
38340: LD_VAR 0 5
38344: NOT
38345: IFFALSE 38349
// exit ;
38347: GO 38415
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38349: LD_ADDR_VAR 0 1
38353: PUSH
38354: LD_VAR 0 1
38358: PPUSH
38359: LD_VAR 0 2
38363: PPUSH
38364: LD_VAR 0 1
38368: PUSH
38369: LD_VAR 0 3
38373: ARRAY
38374: PPUSH
38375: CALL_OW 1
38379: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38380: LD_ADDR_VAR 0 1
38384: PUSH
38385: LD_VAR 0 1
38389: PPUSH
38390: LD_VAR 0 3
38394: PPUSH
38395: LD_VAR 0 5
38399: PPUSH
38400: CALL_OW 1
38404: ST_TO_ADDR
// result := list ;
38405: LD_ADDR_VAR 0 4
38409: PUSH
38410: LD_VAR 0 1
38414: ST_TO_ADDR
// end ;
38415: LD_VAR 0 4
38419: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38420: LD_INT 0
38422: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38423: LD_ADDR_VAR 0 5
38427: PUSH
38428: LD_VAR 0 1
38432: PPUSH
38433: CALL_OW 250
38437: PPUSH
38438: LD_VAR 0 1
38442: PPUSH
38443: CALL_OW 251
38447: PPUSH
38448: LD_VAR 0 2
38452: PPUSH
38453: LD_VAR 0 3
38457: PPUSH
38458: LD_VAR 0 4
38462: PPUSH
38463: CALL 38473 0 5
38467: ST_TO_ADDR
// end ;
38468: LD_VAR 0 5
38472: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38473: LD_INT 0
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
// if not list then
38479: LD_VAR 0 3
38483: NOT
38484: IFFALSE 38488
// exit ;
38486: GO 38876
// result := [ ] ;
38488: LD_ADDR_VAR 0 6
38492: PUSH
38493: EMPTY
38494: ST_TO_ADDR
// for i in list do
38495: LD_ADDR_VAR 0 7
38499: PUSH
38500: LD_VAR 0 3
38504: PUSH
38505: FOR_IN
38506: IFFALSE 38708
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38508: LD_ADDR_VAR 0 9
38512: PUSH
38513: LD_VAR 0 7
38517: PPUSH
38518: LD_VAR 0 1
38522: PPUSH
38523: LD_VAR 0 2
38527: PPUSH
38528: CALL_OW 297
38532: ST_TO_ADDR
// if not result then
38533: LD_VAR 0 6
38537: NOT
38538: IFFALSE 38564
// result := [ [ i , tmp ] ] else
38540: LD_ADDR_VAR 0 6
38544: PUSH
38545: LD_VAR 0 7
38549: PUSH
38550: LD_VAR 0 9
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: ST_TO_ADDR
38562: GO 38706
// begin if result [ result ] [ 2 ] < tmp then
38564: LD_VAR 0 6
38568: PUSH
38569: LD_VAR 0 6
38573: ARRAY
38574: PUSH
38575: LD_INT 2
38577: ARRAY
38578: PUSH
38579: LD_VAR 0 9
38583: LESS
38584: IFFALSE 38626
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38586: LD_ADDR_VAR 0 6
38590: PUSH
38591: LD_VAR 0 6
38595: PPUSH
38596: LD_VAR 0 6
38600: PUSH
38601: LD_INT 1
38603: PLUS
38604: PPUSH
38605: LD_VAR 0 7
38609: PUSH
38610: LD_VAR 0 9
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PPUSH
38619: CALL_OW 2
38623: ST_TO_ADDR
38624: GO 38706
// for j = 1 to result do
38626: LD_ADDR_VAR 0 8
38630: PUSH
38631: DOUBLE
38632: LD_INT 1
38634: DEC
38635: ST_TO_ADDR
38636: LD_VAR 0 6
38640: PUSH
38641: FOR_TO
38642: IFFALSE 38704
// begin if tmp < result [ j ] [ 2 ] then
38644: LD_VAR 0 9
38648: PUSH
38649: LD_VAR 0 6
38653: PUSH
38654: LD_VAR 0 8
38658: ARRAY
38659: PUSH
38660: LD_INT 2
38662: ARRAY
38663: LESS
38664: IFFALSE 38702
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38666: LD_ADDR_VAR 0 6
38670: PUSH
38671: LD_VAR 0 6
38675: PPUSH
38676: LD_VAR 0 8
38680: PPUSH
38681: LD_VAR 0 7
38685: PUSH
38686: LD_VAR 0 9
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PPUSH
38695: CALL_OW 2
38699: ST_TO_ADDR
// break ;
38700: GO 38704
// end ; end ;
38702: GO 38641
38704: POP
38705: POP
// end ; end ;
38706: GO 38505
38708: POP
38709: POP
// if result and not asc then
38710: LD_VAR 0 6
38714: PUSH
38715: LD_VAR 0 4
38719: NOT
38720: AND
38721: IFFALSE 38796
// begin tmp := result ;
38723: LD_ADDR_VAR 0 9
38727: PUSH
38728: LD_VAR 0 6
38732: ST_TO_ADDR
// for i = tmp downto 1 do
38733: LD_ADDR_VAR 0 7
38737: PUSH
38738: DOUBLE
38739: LD_VAR 0 9
38743: INC
38744: ST_TO_ADDR
38745: LD_INT 1
38747: PUSH
38748: FOR_DOWNTO
38749: IFFALSE 38794
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38751: LD_ADDR_VAR 0 6
38755: PUSH
38756: LD_VAR 0 6
38760: PPUSH
38761: LD_VAR 0 9
38765: PUSH
38766: LD_VAR 0 7
38770: MINUS
38771: PUSH
38772: LD_INT 1
38774: PLUS
38775: PPUSH
38776: LD_VAR 0 9
38780: PUSH
38781: LD_VAR 0 7
38785: ARRAY
38786: PPUSH
38787: CALL_OW 1
38791: ST_TO_ADDR
38792: GO 38748
38794: POP
38795: POP
// end ; tmp := [ ] ;
38796: LD_ADDR_VAR 0 9
38800: PUSH
38801: EMPTY
38802: ST_TO_ADDR
// if mode then
38803: LD_VAR 0 5
38807: IFFALSE 38876
// begin for i = 1 to result do
38809: LD_ADDR_VAR 0 7
38813: PUSH
38814: DOUBLE
38815: LD_INT 1
38817: DEC
38818: ST_TO_ADDR
38819: LD_VAR 0 6
38823: PUSH
38824: FOR_TO
38825: IFFALSE 38864
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38827: LD_ADDR_VAR 0 9
38831: PUSH
38832: LD_VAR 0 9
38836: PPUSH
38837: LD_VAR 0 7
38841: PPUSH
38842: LD_VAR 0 6
38846: PUSH
38847: LD_VAR 0 7
38851: ARRAY
38852: PUSH
38853: LD_INT 1
38855: ARRAY
38856: PPUSH
38857: CALL_OW 1
38861: ST_TO_ADDR
38862: GO 38824
38864: POP
38865: POP
// result := tmp ;
38866: LD_ADDR_VAR 0 6
38870: PUSH
38871: LD_VAR 0 9
38875: ST_TO_ADDR
// end ; end ;
38876: LD_VAR 0 6
38880: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38881: LD_INT 0
38883: PPUSH
38884: PPUSH
38885: PPUSH
38886: PPUSH
38887: PPUSH
38888: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38889: LD_ADDR_VAR 0 5
38893: PUSH
38894: LD_INT 0
38896: PUSH
38897: LD_INT 0
38899: PUSH
38900: LD_INT 0
38902: PUSH
38903: EMPTY
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: ST_TO_ADDR
// if not x or not y then
38911: LD_VAR 0 2
38915: NOT
38916: PUSH
38917: LD_VAR 0 3
38921: NOT
38922: OR
38923: IFFALSE 38927
// exit ;
38925: GO 40577
// if not range then
38927: LD_VAR 0 4
38931: NOT
38932: IFFALSE 38942
// range := 10 ;
38934: LD_ADDR_VAR 0 4
38938: PUSH
38939: LD_INT 10
38941: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38942: LD_ADDR_VAR 0 8
38946: PUSH
38947: LD_INT 81
38949: PUSH
38950: LD_VAR 0 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 92
38961: PUSH
38962: LD_VAR 0 2
38966: PUSH
38967: LD_VAR 0 3
38971: PUSH
38972: LD_VAR 0 4
38976: PUSH
38977: EMPTY
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 3
38985: PUSH
38986: LD_INT 21
38988: PUSH
38989: LD_INT 3
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: LIST
39004: PPUSH
39005: CALL_OW 69
39009: ST_TO_ADDR
// if not tmp then
39010: LD_VAR 0 8
39014: NOT
39015: IFFALSE 39019
// exit ;
39017: GO 40577
// for i in tmp do
39019: LD_ADDR_VAR 0 6
39023: PUSH
39024: LD_VAR 0 8
39028: PUSH
39029: FOR_IN
39030: IFFALSE 40552
// begin points := [ 0 , 0 , 0 ] ;
39032: LD_ADDR_VAR 0 9
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// bpoints := 1 ;
39051: LD_ADDR_VAR 0 10
39055: PUSH
39056: LD_INT 1
39058: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39059: LD_VAR 0 6
39063: PPUSH
39064: CALL_OW 247
39068: PUSH
39069: LD_INT 1
39071: DOUBLE
39072: EQUAL
39073: IFTRUE 39077
39075: GO 39655
39077: POP
// begin if GetClass ( i ) = 1 then
39078: LD_VAR 0 6
39082: PPUSH
39083: CALL_OW 257
39087: PUSH
39088: LD_INT 1
39090: EQUAL
39091: IFFALSE 39112
// points := [ 10 , 5 , 3 ] ;
39093: LD_ADDR_VAR 0 9
39097: PUSH
39098: LD_INT 10
39100: PUSH
39101: LD_INT 5
39103: PUSH
39104: LD_INT 3
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: LIST
39111: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39112: LD_VAR 0 6
39116: PPUSH
39117: CALL_OW 257
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 3
39127: PUSH
39128: LD_INT 4
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: LIST
39135: IN
39136: IFFALSE 39157
// points := [ 3 , 2 , 1 ] ;
39138: LD_ADDR_VAR 0 9
39142: PUSH
39143: LD_INT 3
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39157: LD_VAR 0 6
39161: PPUSH
39162: CALL_OW 257
39166: PUSH
39167: LD_INT 5
39169: EQUAL
39170: IFFALSE 39191
// points := [ 130 , 5 , 2 ] ;
39172: LD_ADDR_VAR 0 9
39176: PUSH
39177: LD_INT 130
39179: PUSH
39180: LD_INT 5
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39191: LD_VAR 0 6
39195: PPUSH
39196: CALL_OW 257
39200: PUSH
39201: LD_INT 8
39203: EQUAL
39204: IFFALSE 39225
// points := [ 35 , 35 , 30 ] ;
39206: LD_ADDR_VAR 0 9
39210: PUSH
39211: LD_INT 35
39213: PUSH
39214: LD_INT 35
39216: PUSH
39217: LD_INT 30
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39225: LD_VAR 0 6
39229: PPUSH
39230: CALL_OW 257
39234: PUSH
39235: LD_INT 9
39237: EQUAL
39238: IFFALSE 39259
// points := [ 20 , 55 , 40 ] ;
39240: LD_ADDR_VAR 0 9
39244: PUSH
39245: LD_INT 20
39247: PUSH
39248: LD_INT 55
39250: PUSH
39251: LD_INT 40
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: LIST
39258: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39259: LD_VAR 0 6
39263: PPUSH
39264: CALL_OW 257
39268: PUSH
39269: LD_INT 12
39271: PUSH
39272: LD_INT 16
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: IN
39279: IFFALSE 39300
// points := [ 5 , 3 , 2 ] ;
39281: LD_ADDR_VAR 0 9
39285: PUSH
39286: LD_INT 5
39288: PUSH
39289: LD_INT 3
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39300: LD_VAR 0 6
39304: PPUSH
39305: CALL_OW 257
39309: PUSH
39310: LD_INT 17
39312: EQUAL
39313: IFFALSE 39334
// points := [ 100 , 50 , 75 ] ;
39315: LD_ADDR_VAR 0 9
39319: PUSH
39320: LD_INT 100
39322: PUSH
39323: LD_INT 50
39325: PUSH
39326: LD_INT 75
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39334: LD_VAR 0 6
39338: PPUSH
39339: CALL_OW 257
39343: PUSH
39344: LD_INT 15
39346: EQUAL
39347: IFFALSE 39368
// points := [ 10 , 5 , 3 ] ;
39349: LD_ADDR_VAR 0 9
39353: PUSH
39354: LD_INT 10
39356: PUSH
39357: LD_INT 5
39359: PUSH
39360: LD_INT 3
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: LIST
39367: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39368: LD_VAR 0 6
39372: PPUSH
39373: CALL_OW 257
39377: PUSH
39378: LD_INT 14
39380: EQUAL
39381: IFFALSE 39402
// points := [ 10 , 0 , 0 ] ;
39383: LD_ADDR_VAR 0 9
39387: PUSH
39388: LD_INT 10
39390: PUSH
39391: LD_INT 0
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39402: LD_VAR 0 6
39406: PPUSH
39407: CALL_OW 257
39411: PUSH
39412: LD_INT 11
39414: EQUAL
39415: IFFALSE 39436
// points := [ 30 , 10 , 5 ] ;
39417: LD_ADDR_VAR 0 9
39421: PUSH
39422: LD_INT 30
39424: PUSH
39425: LD_INT 10
39427: PUSH
39428: LD_INT 5
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: LIST
39435: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39436: LD_VAR 0 1
39440: PPUSH
39441: LD_INT 5
39443: PPUSH
39444: CALL_OW 321
39448: PUSH
39449: LD_INT 2
39451: EQUAL
39452: IFFALSE 39469
// bpoints := bpoints * 1.8 ;
39454: LD_ADDR_VAR 0 10
39458: PUSH
39459: LD_VAR 0 10
39463: PUSH
39464: LD_REAL  1.80000000000000E+0000
39467: MUL
39468: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39469: LD_VAR 0 6
39473: PPUSH
39474: CALL_OW 257
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: LD_INT 3
39487: PUSH
39488: LD_INT 4
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: IN
39497: PUSH
39498: LD_VAR 0 1
39502: PPUSH
39503: LD_INT 51
39505: PPUSH
39506: CALL_OW 321
39510: PUSH
39511: LD_INT 2
39513: EQUAL
39514: AND
39515: IFFALSE 39532
// bpoints := bpoints * 1.2 ;
39517: LD_ADDR_VAR 0 10
39521: PUSH
39522: LD_VAR 0 10
39526: PUSH
39527: LD_REAL  1.20000000000000E+0000
39530: MUL
39531: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39532: LD_VAR 0 6
39536: PPUSH
39537: CALL_OW 257
39541: PUSH
39542: LD_INT 5
39544: PUSH
39545: LD_INT 7
39547: PUSH
39548: LD_INT 9
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: LIST
39555: IN
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: LD_INT 52
39564: PPUSH
39565: CALL_OW 321
39569: PUSH
39570: LD_INT 2
39572: EQUAL
39573: AND
39574: IFFALSE 39591
// bpoints := bpoints * 1.5 ;
39576: LD_ADDR_VAR 0 10
39580: PUSH
39581: LD_VAR 0 10
39585: PUSH
39586: LD_REAL  1.50000000000000E+0000
39589: MUL
39590: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39591: LD_VAR 0 1
39595: PPUSH
39596: LD_INT 66
39598: PPUSH
39599: CALL_OW 321
39603: PUSH
39604: LD_INT 2
39606: EQUAL
39607: IFFALSE 39624
// bpoints := bpoints * 1.1 ;
39609: LD_ADDR_VAR 0 10
39613: PUSH
39614: LD_VAR 0 10
39618: PUSH
39619: LD_REAL  1.10000000000000E+0000
39622: MUL
39623: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39624: LD_ADDR_VAR 0 10
39628: PUSH
39629: LD_VAR 0 10
39633: PUSH
39634: LD_VAR 0 6
39638: PPUSH
39639: LD_INT 1
39641: PPUSH
39642: CALL_OW 259
39646: PUSH
39647: LD_REAL  1.15000000000000E+0000
39650: MUL
39651: MUL
39652: ST_TO_ADDR
// end ; unit_vehicle :
39653: GO 40481
39655: LD_INT 2
39657: DOUBLE
39658: EQUAL
39659: IFTRUE 39663
39661: GO 40469
39663: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39664: LD_VAR 0 6
39668: PPUSH
39669: CALL_OW 264
39673: PUSH
39674: LD_INT 2
39676: PUSH
39677: LD_INT 42
39679: PUSH
39680: LD_INT 24
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: IN
39688: IFFALSE 39709
// points := [ 25 , 5 , 3 ] ;
39690: LD_ADDR_VAR 0 9
39694: PUSH
39695: LD_INT 25
39697: PUSH
39698: LD_INT 5
39700: PUSH
39701: LD_INT 3
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39709: LD_VAR 0 6
39713: PPUSH
39714: CALL_OW 264
39718: PUSH
39719: LD_INT 4
39721: PUSH
39722: LD_INT 43
39724: PUSH
39725: LD_INT 25
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: IN
39733: IFFALSE 39754
// points := [ 40 , 15 , 5 ] ;
39735: LD_ADDR_VAR 0 9
39739: PUSH
39740: LD_INT 40
39742: PUSH
39743: LD_INT 15
39745: PUSH
39746: LD_INT 5
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39754: LD_VAR 0 6
39758: PPUSH
39759: CALL_OW 264
39763: PUSH
39764: LD_INT 3
39766: PUSH
39767: LD_INT 23
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: IN
39774: IFFALSE 39795
// points := [ 7 , 25 , 8 ] ;
39776: LD_ADDR_VAR 0 9
39780: PUSH
39781: LD_INT 7
39783: PUSH
39784: LD_INT 25
39786: PUSH
39787: LD_INT 8
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39795: LD_VAR 0 6
39799: PPUSH
39800: CALL_OW 264
39804: PUSH
39805: LD_INT 5
39807: PUSH
39808: LD_INT 27
39810: PUSH
39811: LD_INT 44
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: IN
39819: IFFALSE 39840
// points := [ 14 , 50 , 16 ] ;
39821: LD_ADDR_VAR 0 9
39825: PUSH
39826: LD_INT 14
39828: PUSH
39829: LD_INT 50
39831: PUSH
39832: LD_INT 16
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39840: LD_VAR 0 6
39844: PPUSH
39845: CALL_OW 264
39849: PUSH
39850: LD_INT 6
39852: PUSH
39853: LD_INT 46
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: IN
39860: IFFALSE 39881
// points := [ 32 , 120 , 70 ] ;
39862: LD_ADDR_VAR 0 9
39866: PUSH
39867: LD_INT 32
39869: PUSH
39870: LD_INT 120
39872: PUSH
39873: LD_INT 70
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: LIST
39880: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39881: LD_VAR 0 6
39885: PPUSH
39886: CALL_OW 264
39890: PUSH
39891: LD_INT 7
39893: PUSH
39894: LD_INT 28
39896: PUSH
39897: LD_INT 45
39899: PUSH
39900: LD_INT 92
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: IN
39909: IFFALSE 39930
// points := [ 35 , 20 , 45 ] ;
39911: LD_ADDR_VAR 0 9
39915: PUSH
39916: LD_INT 35
39918: PUSH
39919: LD_INT 20
39921: PUSH
39922: LD_INT 45
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: LIST
39929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39930: LD_VAR 0 6
39934: PPUSH
39935: CALL_OW 264
39939: PUSH
39940: LD_INT 47
39942: PUSH
39943: EMPTY
39944: LIST
39945: IN
39946: IFFALSE 39967
// points := [ 67 , 45 , 75 ] ;
39948: LD_ADDR_VAR 0 9
39952: PUSH
39953: LD_INT 67
39955: PUSH
39956: LD_INT 45
39958: PUSH
39959: LD_INT 75
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39967: LD_VAR 0 6
39971: PPUSH
39972: CALL_OW 264
39976: PUSH
39977: LD_INT 26
39979: PUSH
39980: EMPTY
39981: LIST
39982: IN
39983: IFFALSE 40004
// points := [ 120 , 30 , 80 ] ;
39985: LD_ADDR_VAR 0 9
39989: PUSH
39990: LD_INT 120
39992: PUSH
39993: LD_INT 30
39995: PUSH
39996: LD_INT 80
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40004: LD_VAR 0 6
40008: PPUSH
40009: CALL_OW 264
40013: PUSH
40014: LD_INT 22
40016: PUSH
40017: EMPTY
40018: LIST
40019: IN
40020: IFFALSE 40041
// points := [ 40 , 1 , 1 ] ;
40022: LD_ADDR_VAR 0 9
40026: PUSH
40027: LD_INT 40
40029: PUSH
40030: LD_INT 1
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40041: LD_VAR 0 6
40045: PPUSH
40046: CALL_OW 264
40050: PUSH
40051: LD_INT 29
40053: PUSH
40054: EMPTY
40055: LIST
40056: IN
40057: IFFALSE 40078
// points := [ 70 , 200 , 400 ] ;
40059: LD_ADDR_VAR 0 9
40063: PUSH
40064: LD_INT 70
40066: PUSH
40067: LD_INT 200
40069: PUSH
40070: LD_INT 400
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: LIST
40077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40078: LD_VAR 0 6
40082: PPUSH
40083: CALL_OW 264
40087: PUSH
40088: LD_INT 14
40090: PUSH
40091: LD_INT 53
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: IN
40098: IFFALSE 40119
// points := [ 40 , 10 , 20 ] ;
40100: LD_ADDR_VAR 0 9
40104: PUSH
40105: LD_INT 40
40107: PUSH
40108: LD_INT 10
40110: PUSH
40111: LD_INT 20
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40119: LD_VAR 0 6
40123: PPUSH
40124: CALL_OW 264
40128: PUSH
40129: LD_INT 9
40131: PUSH
40132: EMPTY
40133: LIST
40134: IN
40135: IFFALSE 40156
// points := [ 5 , 70 , 20 ] ;
40137: LD_ADDR_VAR 0 9
40141: PUSH
40142: LD_INT 5
40144: PUSH
40145: LD_INT 70
40147: PUSH
40148: LD_INT 20
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: LIST
40155: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40156: LD_VAR 0 6
40160: PPUSH
40161: CALL_OW 264
40165: PUSH
40166: LD_INT 10
40168: PUSH
40169: EMPTY
40170: LIST
40171: IN
40172: IFFALSE 40193
// points := [ 35 , 110 , 70 ] ;
40174: LD_ADDR_VAR 0 9
40178: PUSH
40179: LD_INT 35
40181: PUSH
40182: LD_INT 110
40184: PUSH
40185: LD_INT 70
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40193: LD_VAR 0 6
40197: PPUSH
40198: CALL_OW 265
40202: PUSH
40203: LD_INT 25
40205: EQUAL
40206: IFFALSE 40227
// points := [ 80 , 65 , 100 ] ;
40208: LD_ADDR_VAR 0 9
40212: PUSH
40213: LD_INT 80
40215: PUSH
40216: LD_INT 65
40218: PUSH
40219: LD_INT 100
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: LIST
40226: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40227: LD_VAR 0 6
40231: PPUSH
40232: CALL_OW 263
40236: PUSH
40237: LD_INT 1
40239: EQUAL
40240: IFFALSE 40275
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40242: LD_ADDR_VAR 0 10
40246: PUSH
40247: LD_VAR 0 10
40251: PUSH
40252: LD_VAR 0 6
40256: PPUSH
40257: CALL_OW 311
40261: PPUSH
40262: LD_INT 3
40264: PPUSH
40265: CALL_OW 259
40269: PUSH
40270: LD_INT 4
40272: MUL
40273: MUL
40274: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40275: LD_VAR 0 6
40279: PPUSH
40280: CALL_OW 263
40284: PUSH
40285: LD_INT 2
40287: EQUAL
40288: IFFALSE 40339
// begin j := IsControledBy ( i ) ;
40290: LD_ADDR_VAR 0 7
40294: PUSH
40295: LD_VAR 0 6
40299: PPUSH
40300: CALL_OW 312
40304: ST_TO_ADDR
// if j then
40305: LD_VAR 0 7
40309: IFFALSE 40339
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40311: LD_ADDR_VAR 0 10
40315: PUSH
40316: LD_VAR 0 10
40320: PUSH
40321: LD_VAR 0 7
40325: PPUSH
40326: LD_INT 3
40328: PPUSH
40329: CALL_OW 259
40333: PUSH
40334: LD_INT 3
40336: MUL
40337: MUL
40338: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40339: LD_VAR 0 6
40343: PPUSH
40344: CALL_OW 264
40348: PUSH
40349: LD_INT 5
40351: PUSH
40352: LD_INT 6
40354: PUSH
40355: LD_INT 46
40357: PUSH
40358: LD_INT 44
40360: PUSH
40361: LD_INT 47
40363: PUSH
40364: LD_INT 45
40366: PUSH
40367: LD_INT 28
40369: PUSH
40370: LD_INT 7
40372: PUSH
40373: LD_INT 27
40375: PUSH
40376: LD_INT 29
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: IN
40391: PUSH
40392: LD_VAR 0 1
40396: PPUSH
40397: LD_INT 52
40399: PPUSH
40400: CALL_OW 321
40404: PUSH
40405: LD_INT 2
40407: EQUAL
40408: AND
40409: IFFALSE 40426
// bpoints := bpoints * 1.2 ;
40411: LD_ADDR_VAR 0 10
40415: PUSH
40416: LD_VAR 0 10
40420: PUSH
40421: LD_REAL  1.20000000000000E+0000
40424: MUL
40425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40426: LD_VAR 0 6
40430: PPUSH
40431: CALL_OW 264
40435: PUSH
40436: LD_INT 6
40438: PUSH
40439: LD_INT 46
40441: PUSH
40442: LD_INT 47
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: IN
40450: IFFALSE 40467
// bpoints := bpoints * 1.2 ;
40452: LD_ADDR_VAR 0 10
40456: PUSH
40457: LD_VAR 0 10
40461: PUSH
40462: LD_REAL  1.20000000000000E+0000
40465: MUL
40466: ST_TO_ADDR
// end ; unit_building :
40467: GO 40481
40469: LD_INT 3
40471: DOUBLE
40472: EQUAL
40473: IFTRUE 40477
40475: GO 40480
40477: POP
// ; end ;
40478: GO 40481
40480: POP
// for j = 1 to 3 do
40481: LD_ADDR_VAR 0 7
40485: PUSH
40486: DOUBLE
40487: LD_INT 1
40489: DEC
40490: ST_TO_ADDR
40491: LD_INT 3
40493: PUSH
40494: FOR_TO
40495: IFFALSE 40548
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40497: LD_ADDR_VAR 0 5
40501: PUSH
40502: LD_VAR 0 5
40506: PPUSH
40507: LD_VAR 0 7
40511: PPUSH
40512: LD_VAR 0 5
40516: PUSH
40517: LD_VAR 0 7
40521: ARRAY
40522: PUSH
40523: LD_VAR 0 9
40527: PUSH
40528: LD_VAR 0 7
40532: ARRAY
40533: PUSH
40534: LD_VAR 0 10
40538: MUL
40539: PLUS
40540: PPUSH
40541: CALL_OW 1
40545: ST_TO_ADDR
40546: GO 40494
40548: POP
40549: POP
// end ;
40550: GO 39029
40552: POP
40553: POP
// result := Replace ( result , 4 , tmp ) ;
40554: LD_ADDR_VAR 0 5
40558: PUSH
40559: LD_VAR 0 5
40563: PPUSH
40564: LD_INT 4
40566: PPUSH
40567: LD_VAR 0 8
40571: PPUSH
40572: CALL_OW 1
40576: ST_TO_ADDR
// end ;
40577: LD_VAR 0 5
40581: RET
// export function DangerAtRange ( unit , range ) ; begin
40582: LD_INT 0
40584: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40585: LD_ADDR_VAR 0 3
40589: PUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 255
40599: PPUSH
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 250
40609: PPUSH
40610: LD_VAR 0 1
40614: PPUSH
40615: CALL_OW 251
40619: PPUSH
40620: LD_VAR 0 2
40624: PPUSH
40625: CALL 38881 0 4
40629: ST_TO_ADDR
// end ;
40630: LD_VAR 0 3
40634: RET
// export function DangerInArea ( side , area ) ; begin
40635: LD_INT 0
40637: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40638: LD_ADDR_VAR 0 3
40642: PUSH
40643: LD_VAR 0 2
40647: PPUSH
40648: LD_INT 81
40650: PUSH
40651: LD_VAR 0 1
40655: PUSH
40656: EMPTY
40657: LIST
40658: LIST
40659: PPUSH
40660: CALL_OW 70
40664: ST_TO_ADDR
// end ;
40665: LD_VAR 0 3
40669: RET
// export function IsExtension ( b ) ; begin
40670: LD_INT 0
40672: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40673: LD_ADDR_VAR 0 2
40677: PUSH
40678: LD_VAR 0 1
40682: PUSH
40683: LD_INT 23
40685: PUSH
40686: LD_INT 20
40688: PUSH
40689: LD_INT 22
40691: PUSH
40692: LD_INT 17
40694: PUSH
40695: LD_INT 24
40697: PUSH
40698: LD_INT 21
40700: PUSH
40701: LD_INT 19
40703: PUSH
40704: LD_INT 16
40706: PUSH
40707: LD_INT 25
40709: PUSH
40710: LD_INT 18
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: IN
40725: ST_TO_ADDR
// end ;
40726: LD_VAR 0 2
40730: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40731: LD_INT 0
40733: PPUSH
40734: PPUSH
40735: PPUSH
// result := [ ] ;
40736: LD_ADDR_VAR 0 4
40740: PUSH
40741: EMPTY
40742: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40743: LD_ADDR_VAR 0 5
40747: PUSH
40748: LD_VAR 0 2
40752: PPUSH
40753: LD_INT 21
40755: PUSH
40756: LD_INT 3
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PPUSH
40763: CALL_OW 70
40767: ST_TO_ADDR
// if not tmp then
40768: LD_VAR 0 5
40772: NOT
40773: IFFALSE 40777
// exit ;
40775: GO 40841
// if checkLink then
40777: LD_VAR 0 3
40781: IFFALSE 40831
// begin for i in tmp do
40783: LD_ADDR_VAR 0 6
40787: PUSH
40788: LD_VAR 0 5
40792: PUSH
40793: FOR_IN
40794: IFFALSE 40829
// if GetBase ( i ) <> base then
40796: LD_VAR 0 6
40800: PPUSH
40801: CALL_OW 274
40805: PUSH
40806: LD_VAR 0 1
40810: NONEQUAL
40811: IFFALSE 40827
// ComLinkToBase ( base , i ) ;
40813: LD_VAR 0 1
40817: PPUSH
40818: LD_VAR 0 6
40822: PPUSH
40823: CALL_OW 169
40827: GO 40793
40829: POP
40830: POP
// end ; result := tmp ;
40831: LD_ADDR_VAR 0 4
40835: PUSH
40836: LD_VAR 0 5
40840: ST_TO_ADDR
// end ;
40841: LD_VAR 0 4
40845: RET
// export function ComComplete ( units , b ) ; var i ; begin
40846: LD_INT 0
40848: PPUSH
40849: PPUSH
// if not units then
40850: LD_VAR 0 1
40854: NOT
40855: IFFALSE 40859
// exit ;
40857: GO 40949
// for i in units do
40859: LD_ADDR_VAR 0 4
40863: PUSH
40864: LD_VAR 0 1
40868: PUSH
40869: FOR_IN
40870: IFFALSE 40947
// if BuildingStatus ( b ) = bs_build then
40872: LD_VAR 0 2
40876: PPUSH
40877: CALL_OW 461
40881: PUSH
40882: LD_INT 1
40884: EQUAL
40885: IFFALSE 40945
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40887: LD_VAR 0 4
40891: PPUSH
40892: LD_STRING h
40894: PUSH
40895: LD_VAR 0 2
40899: PPUSH
40900: CALL_OW 250
40904: PUSH
40905: LD_VAR 0 2
40909: PPUSH
40910: CALL_OW 251
40914: PUSH
40915: LD_VAR 0 2
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 0
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: PUSH
40938: EMPTY
40939: LIST
40940: PPUSH
40941: CALL_OW 446
40945: GO 40869
40947: POP
40948: POP
// end ;
40949: LD_VAR 0 3
40953: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40954: LD_INT 0
40956: PPUSH
40957: PPUSH
40958: PPUSH
40959: PPUSH
40960: PPUSH
40961: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40962: LD_VAR 0 1
40966: NOT
40967: PUSH
40968: LD_VAR 0 1
40972: PPUSH
40973: CALL_OW 263
40977: PUSH
40978: LD_INT 2
40980: NONEQUAL
40981: OR
40982: IFFALSE 40986
// exit ;
40984: GO 41302
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40986: LD_ADDR_VAR 0 6
40990: PUSH
40991: LD_INT 22
40993: PUSH
40994: LD_VAR 0 1
40998: PPUSH
40999: CALL_OW 255
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: LD_INT 30
41013: PUSH
41014: LD_INT 36
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 34
41023: PUSH
41024: LD_INT 31
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PPUSH
41040: CALL_OW 69
41044: ST_TO_ADDR
// if not tmp then
41045: LD_VAR 0 6
41049: NOT
41050: IFFALSE 41054
// exit ;
41052: GO 41302
// result := [ ] ;
41054: LD_ADDR_VAR 0 2
41058: PUSH
41059: EMPTY
41060: ST_TO_ADDR
// for i in tmp do
41061: LD_ADDR_VAR 0 3
41065: PUSH
41066: LD_VAR 0 6
41070: PUSH
41071: FOR_IN
41072: IFFALSE 41143
// begin t := UnitsInside ( i ) ;
41074: LD_ADDR_VAR 0 4
41078: PUSH
41079: LD_VAR 0 3
41083: PPUSH
41084: CALL_OW 313
41088: ST_TO_ADDR
// if t then
41089: LD_VAR 0 4
41093: IFFALSE 41141
// for j in t do
41095: LD_ADDR_VAR 0 7
41099: PUSH
41100: LD_VAR 0 4
41104: PUSH
41105: FOR_IN
41106: IFFALSE 41139
// result := Replace ( result , result + 1 , j ) ;
41108: LD_ADDR_VAR 0 2
41112: PUSH
41113: LD_VAR 0 2
41117: PPUSH
41118: LD_VAR 0 2
41122: PUSH
41123: LD_INT 1
41125: PLUS
41126: PPUSH
41127: LD_VAR 0 7
41131: PPUSH
41132: CALL_OW 1
41136: ST_TO_ADDR
41137: GO 41105
41139: POP
41140: POP
// end ;
41141: GO 41071
41143: POP
41144: POP
// if not result then
41145: LD_VAR 0 2
41149: NOT
41150: IFFALSE 41154
// exit ;
41152: GO 41302
// mech := result [ 1 ] ;
41154: LD_ADDR_VAR 0 5
41158: PUSH
41159: LD_VAR 0 2
41163: PUSH
41164: LD_INT 1
41166: ARRAY
41167: ST_TO_ADDR
// if result > 1 then
41168: LD_VAR 0 2
41172: PUSH
41173: LD_INT 1
41175: GREATER
41176: IFFALSE 41288
// begin for i = 2 to result do
41178: LD_ADDR_VAR 0 3
41182: PUSH
41183: DOUBLE
41184: LD_INT 2
41186: DEC
41187: ST_TO_ADDR
41188: LD_VAR 0 2
41192: PUSH
41193: FOR_TO
41194: IFFALSE 41286
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41196: LD_ADDR_VAR 0 4
41200: PUSH
41201: LD_VAR 0 2
41205: PUSH
41206: LD_VAR 0 3
41210: ARRAY
41211: PPUSH
41212: LD_INT 3
41214: PPUSH
41215: CALL_OW 259
41219: PUSH
41220: LD_VAR 0 2
41224: PUSH
41225: LD_VAR 0 3
41229: ARRAY
41230: PPUSH
41231: CALL_OW 432
41235: MINUS
41236: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41237: LD_VAR 0 4
41241: PUSH
41242: LD_VAR 0 5
41246: PPUSH
41247: LD_INT 3
41249: PPUSH
41250: CALL_OW 259
41254: PUSH
41255: LD_VAR 0 5
41259: PPUSH
41260: CALL_OW 432
41264: MINUS
41265: GREATEREQUAL
41266: IFFALSE 41284
// mech := result [ i ] ;
41268: LD_ADDR_VAR 0 5
41272: PUSH
41273: LD_VAR 0 2
41277: PUSH
41278: LD_VAR 0 3
41282: ARRAY
41283: ST_TO_ADDR
// end ;
41284: GO 41193
41286: POP
41287: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41288: LD_VAR 0 1
41292: PPUSH
41293: LD_VAR 0 5
41297: PPUSH
41298: CALL_OW 135
// end ;
41302: LD_VAR 0 2
41306: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41307: LD_INT 0
41309: PPUSH
41310: PPUSH
41311: PPUSH
41312: PPUSH
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
// result := [ ] ;
41322: LD_ADDR_VAR 0 7
41326: PUSH
41327: EMPTY
41328: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41329: LD_VAR 0 1
41333: PPUSH
41334: CALL_OW 266
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: IN
41349: NOT
41350: IFFALSE 41354
// exit ;
41352: GO 42988
// if name then
41354: LD_VAR 0 3
41358: IFFALSE 41374
// SetBName ( base_dep , name ) ;
41360: LD_VAR 0 1
41364: PPUSH
41365: LD_VAR 0 3
41369: PPUSH
41370: CALL_OW 500
// base := GetBase ( base_dep ) ;
41374: LD_ADDR_VAR 0 15
41378: PUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: CALL_OW 274
41388: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41389: LD_ADDR_VAR 0 16
41393: PUSH
41394: LD_VAR 0 1
41398: PPUSH
41399: CALL_OW 255
41403: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41404: LD_ADDR_VAR 0 17
41408: PUSH
41409: LD_VAR 0 1
41413: PPUSH
41414: CALL_OW 248
41418: ST_TO_ADDR
// if sources then
41419: LD_VAR 0 5
41423: IFFALSE 41470
// for i = 1 to 3 do
41425: LD_ADDR_VAR 0 8
41429: PUSH
41430: DOUBLE
41431: LD_INT 1
41433: DEC
41434: ST_TO_ADDR
41435: LD_INT 3
41437: PUSH
41438: FOR_TO
41439: IFFALSE 41468
// AddResourceType ( base , i , sources [ i ] ) ;
41441: LD_VAR 0 15
41445: PPUSH
41446: LD_VAR 0 8
41450: PPUSH
41451: LD_VAR 0 5
41455: PUSH
41456: LD_VAR 0 8
41460: ARRAY
41461: PPUSH
41462: CALL_OW 276
41466: GO 41438
41468: POP
41469: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41470: LD_ADDR_VAR 0 18
41474: PUSH
41475: LD_VAR 0 15
41479: PPUSH
41480: LD_VAR 0 2
41484: PPUSH
41485: LD_INT 1
41487: PPUSH
41488: CALL 40731 0 3
41492: ST_TO_ADDR
// InitHc ;
41493: CALL_OW 19
// InitUc ;
41497: CALL_OW 18
// uc_side := side ;
41501: LD_ADDR_OWVAR 20
41505: PUSH
41506: LD_VAR 0 16
41510: ST_TO_ADDR
// uc_nation := nation ;
41511: LD_ADDR_OWVAR 21
41515: PUSH
41516: LD_VAR 0 17
41520: ST_TO_ADDR
// if buildings then
41521: LD_VAR 0 18
41525: IFFALSE 42847
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41527: LD_ADDR_VAR 0 19
41531: PUSH
41532: LD_VAR 0 18
41536: PPUSH
41537: LD_INT 2
41539: PUSH
41540: LD_INT 30
41542: PUSH
41543: LD_INT 29
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 30
41552: PUSH
41553: LD_INT 30
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: PPUSH
41565: CALL_OW 72
41569: ST_TO_ADDR
// if tmp then
41570: LD_VAR 0 19
41574: IFFALSE 41622
// for i in tmp do
41576: LD_ADDR_VAR 0 8
41580: PUSH
41581: LD_VAR 0 19
41585: PUSH
41586: FOR_IN
41587: IFFALSE 41620
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41589: LD_VAR 0 8
41593: PPUSH
41594: CALL_OW 250
41598: PPUSH
41599: LD_VAR 0 8
41603: PPUSH
41604: CALL_OW 251
41608: PPUSH
41609: LD_VAR 0 16
41613: PPUSH
41614: CALL_OW 441
41618: GO 41586
41620: POP
41621: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41622: LD_VAR 0 18
41626: PPUSH
41627: LD_INT 2
41629: PUSH
41630: LD_INT 30
41632: PUSH
41633: LD_INT 32
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 30
41642: PUSH
41643: LD_INT 33
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: LIST
41654: PPUSH
41655: CALL_OW 72
41659: IFFALSE 41747
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41661: LD_ADDR_VAR 0 8
41665: PUSH
41666: LD_VAR 0 18
41670: PPUSH
41671: LD_INT 2
41673: PUSH
41674: LD_INT 30
41676: PUSH
41677: LD_INT 32
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 30
41686: PUSH
41687: LD_INT 33
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: LIST
41698: PPUSH
41699: CALL_OW 72
41703: PUSH
41704: FOR_IN
41705: IFFALSE 41745
// begin if not GetBWeapon ( i ) then
41707: LD_VAR 0 8
41711: PPUSH
41712: CALL_OW 269
41716: NOT
41717: IFFALSE 41743
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41719: LD_VAR 0 8
41723: PPUSH
41724: LD_VAR 0 8
41728: PPUSH
41729: LD_VAR 0 2
41733: PPUSH
41734: CALL 42993 0 2
41738: PPUSH
41739: CALL_OW 431
// end ;
41743: GO 41704
41745: POP
41746: POP
// end ; for i = 1 to personel do
41747: LD_ADDR_VAR 0 8
41751: PUSH
41752: DOUBLE
41753: LD_INT 1
41755: DEC
41756: ST_TO_ADDR
41757: LD_VAR 0 6
41761: PUSH
41762: FOR_TO
41763: IFFALSE 42827
// begin if i > 4 then
41765: LD_VAR 0 8
41769: PUSH
41770: LD_INT 4
41772: GREATER
41773: IFFALSE 41777
// break ;
41775: GO 42827
// case i of 1 :
41777: LD_VAR 0 8
41781: PUSH
41782: LD_INT 1
41784: DOUBLE
41785: EQUAL
41786: IFTRUE 41790
41788: GO 41870
41790: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41791: LD_ADDR_VAR 0 12
41795: PUSH
41796: LD_VAR 0 18
41800: PPUSH
41801: LD_INT 22
41803: PUSH
41804: LD_VAR 0 16
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 58
41815: PUSH
41816: EMPTY
41817: LIST
41818: PUSH
41819: LD_INT 2
41821: PUSH
41822: LD_INT 30
41824: PUSH
41825: LD_INT 32
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 30
41834: PUSH
41835: LD_INT 4
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 30
41844: PUSH
41845: LD_INT 5
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: LIST
41862: PPUSH
41863: CALL_OW 72
41867: ST_TO_ADDR
41868: GO 42092
41870: LD_INT 2
41872: DOUBLE
41873: EQUAL
41874: IFTRUE 41878
41876: GO 41940
41878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41879: LD_ADDR_VAR 0 12
41883: PUSH
41884: LD_VAR 0 18
41888: PPUSH
41889: LD_INT 22
41891: PUSH
41892: LD_VAR 0 16
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: LD_INT 30
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 30
41916: PUSH
41917: LD_INT 1
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: LIST
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PPUSH
41933: CALL_OW 72
41937: ST_TO_ADDR
41938: GO 42092
41940: LD_INT 3
41942: DOUBLE
41943: EQUAL
41944: IFTRUE 41948
41946: GO 42010
41948: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41949: LD_ADDR_VAR 0 12
41953: PUSH
41954: LD_VAR 0 18
41958: PPUSH
41959: LD_INT 22
41961: PUSH
41962: LD_VAR 0 16
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 2
41973: PUSH
41974: LD_INT 30
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 30
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: LIST
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PPUSH
42003: CALL_OW 72
42007: ST_TO_ADDR
42008: GO 42092
42010: LD_INT 4
42012: DOUBLE
42013: EQUAL
42014: IFTRUE 42018
42016: GO 42091
42018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42019: LD_ADDR_VAR 0 12
42023: PUSH
42024: LD_VAR 0 18
42028: PPUSH
42029: LD_INT 22
42031: PUSH
42032: LD_VAR 0 16
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 2
42043: PUSH
42044: LD_INT 30
42046: PUSH
42047: LD_INT 6
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 30
42056: PUSH
42057: LD_INT 7
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 30
42066: PUSH
42067: LD_INT 8
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PPUSH
42084: CALL_OW 72
42088: ST_TO_ADDR
42089: GO 42092
42091: POP
// if i = 1 then
42092: LD_VAR 0 8
42096: PUSH
42097: LD_INT 1
42099: EQUAL
42100: IFFALSE 42211
// begin tmp := [ ] ;
42102: LD_ADDR_VAR 0 19
42106: PUSH
42107: EMPTY
42108: ST_TO_ADDR
// for j in f do
42109: LD_ADDR_VAR 0 9
42113: PUSH
42114: LD_VAR 0 12
42118: PUSH
42119: FOR_IN
42120: IFFALSE 42193
// if GetBType ( j ) = b_bunker then
42122: LD_VAR 0 9
42126: PPUSH
42127: CALL_OW 266
42131: PUSH
42132: LD_INT 32
42134: EQUAL
42135: IFFALSE 42162
// tmp := Insert ( tmp , 1 , j ) else
42137: LD_ADDR_VAR 0 19
42141: PUSH
42142: LD_VAR 0 19
42146: PPUSH
42147: LD_INT 1
42149: PPUSH
42150: LD_VAR 0 9
42154: PPUSH
42155: CALL_OW 2
42159: ST_TO_ADDR
42160: GO 42191
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42162: LD_ADDR_VAR 0 19
42166: PUSH
42167: LD_VAR 0 19
42171: PPUSH
42172: LD_VAR 0 19
42176: PUSH
42177: LD_INT 1
42179: PLUS
42180: PPUSH
42181: LD_VAR 0 9
42185: PPUSH
42186: CALL_OW 2
42190: ST_TO_ADDR
42191: GO 42119
42193: POP
42194: POP
// if tmp then
42195: LD_VAR 0 19
42199: IFFALSE 42211
// f := tmp ;
42201: LD_ADDR_VAR 0 12
42205: PUSH
42206: LD_VAR 0 19
42210: ST_TO_ADDR
// end ; x := personel [ i ] ;
42211: LD_ADDR_VAR 0 13
42215: PUSH
42216: LD_VAR 0 6
42220: PUSH
42221: LD_VAR 0 8
42225: ARRAY
42226: ST_TO_ADDR
// if x = - 1 then
42227: LD_VAR 0 13
42231: PUSH
42232: LD_INT 1
42234: NEG
42235: EQUAL
42236: IFFALSE 42445
// begin for j in f do
42238: LD_ADDR_VAR 0 9
42242: PUSH
42243: LD_VAR 0 12
42247: PUSH
42248: FOR_IN
42249: IFFALSE 42441
// repeat InitHc ;
42251: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42255: LD_VAR 0 9
42259: PPUSH
42260: CALL_OW 266
42264: PUSH
42265: LD_INT 5
42267: EQUAL
42268: IFFALSE 42338
// begin if UnitsInside ( j ) < 3 then
42270: LD_VAR 0 9
42274: PPUSH
42275: CALL_OW 313
42279: PUSH
42280: LD_INT 3
42282: LESS
42283: IFFALSE 42319
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42285: LD_INT 0
42287: PPUSH
42288: LD_INT 5
42290: PUSH
42291: LD_INT 8
42293: PUSH
42294: LD_INT 9
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: LD_VAR 0 17
42306: ARRAY
42307: PPUSH
42308: LD_VAR 0 4
42312: PPUSH
42313: CALL_OW 380
42317: GO 42336
// PrepareHuman ( false , i , skill ) ;
42319: LD_INT 0
42321: PPUSH
42322: LD_VAR 0 8
42326: PPUSH
42327: LD_VAR 0 4
42331: PPUSH
42332: CALL_OW 380
// end else
42336: GO 42355
// PrepareHuman ( false , i , skill ) ;
42338: LD_INT 0
42340: PPUSH
42341: LD_VAR 0 8
42345: PPUSH
42346: LD_VAR 0 4
42350: PPUSH
42351: CALL_OW 380
// un := CreateHuman ;
42355: LD_ADDR_VAR 0 14
42359: PUSH
42360: CALL_OW 44
42364: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42365: LD_ADDR_VAR 0 7
42369: PUSH
42370: LD_VAR 0 7
42374: PPUSH
42375: LD_INT 1
42377: PPUSH
42378: LD_VAR 0 14
42382: PPUSH
42383: CALL_OW 2
42387: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42388: LD_VAR 0 14
42392: PPUSH
42393: LD_VAR 0 9
42397: PPUSH
42398: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42402: LD_VAR 0 9
42406: PPUSH
42407: CALL_OW 313
42411: PUSH
42412: LD_INT 6
42414: EQUAL
42415: PUSH
42416: LD_VAR 0 9
42420: PPUSH
42421: CALL_OW 266
42425: PUSH
42426: LD_INT 32
42428: PUSH
42429: LD_INT 31
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: IN
42436: OR
42437: IFFALSE 42251
42439: GO 42248
42441: POP
42442: POP
// end else
42443: GO 42825
// for j = 1 to x do
42445: LD_ADDR_VAR 0 9
42449: PUSH
42450: DOUBLE
42451: LD_INT 1
42453: DEC
42454: ST_TO_ADDR
42455: LD_VAR 0 13
42459: PUSH
42460: FOR_TO
42461: IFFALSE 42823
// begin InitHc ;
42463: CALL_OW 19
// if not f then
42467: LD_VAR 0 12
42471: NOT
42472: IFFALSE 42561
// begin PrepareHuman ( false , i , skill ) ;
42474: LD_INT 0
42476: PPUSH
42477: LD_VAR 0 8
42481: PPUSH
42482: LD_VAR 0 4
42486: PPUSH
42487: CALL_OW 380
// un := CreateHuman ;
42491: LD_ADDR_VAR 0 14
42495: PUSH
42496: CALL_OW 44
42500: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42501: LD_ADDR_VAR 0 7
42505: PUSH
42506: LD_VAR 0 7
42510: PPUSH
42511: LD_INT 1
42513: PPUSH
42514: LD_VAR 0 14
42518: PPUSH
42519: CALL_OW 2
42523: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42524: LD_VAR 0 14
42528: PPUSH
42529: LD_VAR 0 1
42533: PPUSH
42534: CALL_OW 250
42538: PPUSH
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 251
42548: PPUSH
42549: LD_INT 10
42551: PPUSH
42552: LD_INT 0
42554: PPUSH
42555: CALL_OW 50
// continue ;
42559: GO 42460
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42561: LD_VAR 0 12
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: PPUSH
42570: CALL_OW 313
42574: PUSH
42575: LD_VAR 0 12
42579: PUSH
42580: LD_INT 1
42582: ARRAY
42583: PPUSH
42584: CALL_OW 266
42588: PUSH
42589: LD_INT 32
42591: PUSH
42592: LD_INT 31
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: IN
42599: AND
42600: PUSH
42601: LD_VAR 0 12
42605: PUSH
42606: LD_INT 1
42608: ARRAY
42609: PPUSH
42610: CALL_OW 313
42614: PUSH
42615: LD_INT 6
42617: EQUAL
42618: OR
42619: IFFALSE 42639
// f := Delete ( f , 1 ) ;
42621: LD_ADDR_VAR 0 12
42625: PUSH
42626: LD_VAR 0 12
42630: PPUSH
42631: LD_INT 1
42633: PPUSH
42634: CALL_OW 3
42638: ST_TO_ADDR
// if not f then
42639: LD_VAR 0 12
42643: NOT
42644: IFFALSE 42662
// begin x := x + 2 ;
42646: LD_ADDR_VAR 0 13
42650: PUSH
42651: LD_VAR 0 13
42655: PUSH
42656: LD_INT 2
42658: PLUS
42659: ST_TO_ADDR
// continue ;
42660: GO 42460
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42662: LD_VAR 0 12
42666: PUSH
42667: LD_INT 1
42669: ARRAY
42670: PPUSH
42671: CALL_OW 266
42675: PUSH
42676: LD_INT 5
42678: EQUAL
42679: IFFALSE 42753
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42681: LD_VAR 0 12
42685: PUSH
42686: LD_INT 1
42688: ARRAY
42689: PPUSH
42690: CALL_OW 313
42694: PUSH
42695: LD_INT 3
42697: LESS
42698: IFFALSE 42734
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42700: LD_INT 0
42702: PPUSH
42703: LD_INT 5
42705: PUSH
42706: LD_INT 8
42708: PUSH
42709: LD_INT 9
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: LIST
42716: PUSH
42717: LD_VAR 0 17
42721: ARRAY
42722: PPUSH
42723: LD_VAR 0 4
42727: PPUSH
42728: CALL_OW 380
42732: GO 42751
// PrepareHuman ( false , i , skill ) ;
42734: LD_INT 0
42736: PPUSH
42737: LD_VAR 0 8
42741: PPUSH
42742: LD_VAR 0 4
42746: PPUSH
42747: CALL_OW 380
// end else
42751: GO 42770
// PrepareHuman ( false , i , skill ) ;
42753: LD_INT 0
42755: PPUSH
42756: LD_VAR 0 8
42760: PPUSH
42761: LD_VAR 0 4
42765: PPUSH
42766: CALL_OW 380
// un := CreateHuman ;
42770: LD_ADDR_VAR 0 14
42774: PUSH
42775: CALL_OW 44
42779: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42780: LD_ADDR_VAR 0 7
42784: PUSH
42785: LD_VAR 0 7
42789: PPUSH
42790: LD_INT 1
42792: PPUSH
42793: LD_VAR 0 14
42797: PPUSH
42798: CALL_OW 2
42802: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42803: LD_VAR 0 14
42807: PPUSH
42808: LD_VAR 0 12
42812: PUSH
42813: LD_INT 1
42815: ARRAY
42816: PPUSH
42817: CALL_OW 52
// end ;
42821: GO 42460
42823: POP
42824: POP
// end ;
42825: GO 41762
42827: POP
42828: POP
// result := result ^ buildings ;
42829: LD_ADDR_VAR 0 7
42833: PUSH
42834: LD_VAR 0 7
42838: PUSH
42839: LD_VAR 0 18
42843: ADD
42844: ST_TO_ADDR
// end else
42845: GO 42988
// begin for i = 1 to personel do
42847: LD_ADDR_VAR 0 8
42851: PUSH
42852: DOUBLE
42853: LD_INT 1
42855: DEC
42856: ST_TO_ADDR
42857: LD_VAR 0 6
42861: PUSH
42862: FOR_TO
42863: IFFALSE 42986
// begin if i > 4 then
42865: LD_VAR 0 8
42869: PUSH
42870: LD_INT 4
42872: GREATER
42873: IFFALSE 42877
// break ;
42875: GO 42986
// x := personel [ i ] ;
42877: LD_ADDR_VAR 0 13
42881: PUSH
42882: LD_VAR 0 6
42886: PUSH
42887: LD_VAR 0 8
42891: ARRAY
42892: ST_TO_ADDR
// if x = - 1 then
42893: LD_VAR 0 13
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: EQUAL
42902: IFFALSE 42906
// continue ;
42904: GO 42862
// PrepareHuman ( false , i , skill ) ;
42906: LD_INT 0
42908: PPUSH
42909: LD_VAR 0 8
42913: PPUSH
42914: LD_VAR 0 4
42918: PPUSH
42919: CALL_OW 380
// un := CreateHuman ;
42923: LD_ADDR_VAR 0 14
42927: PUSH
42928: CALL_OW 44
42932: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42933: LD_VAR 0 14
42937: PPUSH
42938: LD_VAR 0 1
42942: PPUSH
42943: CALL_OW 250
42947: PPUSH
42948: LD_VAR 0 1
42952: PPUSH
42953: CALL_OW 251
42957: PPUSH
42958: LD_INT 10
42960: PPUSH
42961: LD_INT 0
42963: PPUSH
42964: CALL_OW 50
// result := result ^ un ;
42968: LD_ADDR_VAR 0 7
42972: PUSH
42973: LD_VAR 0 7
42977: PUSH
42978: LD_VAR 0 14
42982: ADD
42983: ST_TO_ADDR
// end ;
42984: GO 42862
42986: POP
42987: POP
// end ; end ;
42988: LD_VAR 0 7
42992: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42993: LD_INT 0
42995: PPUSH
42996: PPUSH
42997: PPUSH
42998: PPUSH
42999: PPUSH
43000: PPUSH
43001: PPUSH
43002: PPUSH
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
43010: PPUSH
// result := false ;
43011: LD_ADDR_VAR 0 3
43015: PUSH
43016: LD_INT 0
43018: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43019: LD_VAR 0 1
43023: NOT
43024: PUSH
43025: LD_VAR 0 1
43029: PPUSH
43030: CALL_OW 266
43034: PUSH
43035: LD_INT 32
43037: PUSH
43038: LD_INT 33
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: IN
43045: NOT
43046: OR
43047: IFFALSE 43051
// exit ;
43049: GO 44160
// nat := GetNation ( tower ) ;
43051: LD_ADDR_VAR 0 12
43055: PUSH
43056: LD_VAR 0 1
43060: PPUSH
43061: CALL_OW 248
43065: ST_TO_ADDR
// side := GetSide ( tower ) ;
43066: LD_ADDR_VAR 0 16
43070: PUSH
43071: LD_VAR 0 1
43075: PPUSH
43076: CALL_OW 255
43080: ST_TO_ADDR
// x := GetX ( tower ) ;
43081: LD_ADDR_VAR 0 10
43085: PUSH
43086: LD_VAR 0 1
43090: PPUSH
43091: CALL_OW 250
43095: ST_TO_ADDR
// y := GetY ( tower ) ;
43096: LD_ADDR_VAR 0 11
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: CALL_OW 251
43110: ST_TO_ADDR
// if not x or not y then
43111: LD_VAR 0 10
43115: NOT
43116: PUSH
43117: LD_VAR 0 11
43121: NOT
43122: OR
43123: IFFALSE 43127
// exit ;
43125: GO 44160
// weapon := 0 ;
43127: LD_ADDR_VAR 0 18
43131: PUSH
43132: LD_INT 0
43134: ST_TO_ADDR
// fac_list := [ ] ;
43135: LD_ADDR_VAR 0 17
43139: PUSH
43140: EMPTY
43141: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43142: LD_ADDR_VAR 0 6
43146: PUSH
43147: LD_VAR 0 1
43151: PPUSH
43152: CALL_OW 274
43156: PPUSH
43157: LD_VAR 0 2
43161: PPUSH
43162: LD_INT 0
43164: PPUSH
43165: CALL 40731 0 3
43169: PPUSH
43170: LD_INT 30
43172: PUSH
43173: LD_INT 3
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PPUSH
43180: CALL_OW 72
43184: ST_TO_ADDR
// if not factories then
43185: LD_VAR 0 6
43189: NOT
43190: IFFALSE 43194
// exit ;
43192: GO 44160
// for i in factories do
43194: LD_ADDR_VAR 0 8
43198: PUSH
43199: LD_VAR 0 6
43203: PUSH
43204: FOR_IN
43205: IFFALSE 43230
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43207: LD_ADDR_VAR 0 17
43211: PUSH
43212: LD_VAR 0 17
43216: PUSH
43217: LD_VAR 0 8
43221: PPUSH
43222: CALL_OW 478
43226: UNION
43227: ST_TO_ADDR
43228: GO 43204
43230: POP
43231: POP
// if not fac_list then
43232: LD_VAR 0 17
43236: NOT
43237: IFFALSE 43241
// exit ;
43239: GO 44160
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43241: LD_ADDR_VAR 0 5
43245: PUSH
43246: LD_INT 4
43248: PUSH
43249: LD_INT 5
43251: PUSH
43252: LD_INT 9
43254: PUSH
43255: LD_INT 10
43257: PUSH
43258: LD_INT 6
43260: PUSH
43261: LD_INT 7
43263: PUSH
43264: LD_INT 11
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 27
43278: PUSH
43279: LD_INT 28
43281: PUSH
43282: LD_INT 26
43284: PUSH
43285: LD_INT 30
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 43
43296: PUSH
43297: LD_INT 44
43299: PUSH
43300: LD_INT 46
43302: PUSH
43303: LD_INT 45
43305: PUSH
43306: LD_INT 47
43308: PUSH
43309: LD_INT 49
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: LIST
43324: PUSH
43325: LD_VAR 0 12
43329: ARRAY
43330: ST_TO_ADDR
// list := list isect fac_list ;
43331: LD_ADDR_VAR 0 5
43335: PUSH
43336: LD_VAR 0 5
43340: PUSH
43341: LD_VAR 0 17
43345: ISECT
43346: ST_TO_ADDR
// if not list then
43347: LD_VAR 0 5
43351: NOT
43352: IFFALSE 43356
// exit ;
43354: GO 44160
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43356: LD_VAR 0 12
43360: PUSH
43361: LD_INT 3
43363: EQUAL
43364: PUSH
43365: LD_INT 49
43367: PUSH
43368: LD_VAR 0 5
43372: IN
43373: AND
43374: PUSH
43375: LD_INT 31
43377: PPUSH
43378: LD_VAR 0 16
43382: PPUSH
43383: CALL_OW 321
43387: PUSH
43388: LD_INT 2
43390: EQUAL
43391: AND
43392: IFFALSE 43452
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43394: LD_INT 22
43396: PUSH
43397: LD_VAR 0 16
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 35
43408: PUSH
43409: LD_INT 49
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 91
43418: PUSH
43419: LD_VAR 0 1
43423: PUSH
43424: LD_INT 10
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: PPUSH
43437: CALL_OW 69
43441: NOT
43442: IFFALSE 43452
// weapon := ru_time_lapser ;
43444: LD_ADDR_VAR 0 18
43448: PUSH
43449: LD_INT 49
43451: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43452: LD_VAR 0 12
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: IN
43467: PUSH
43468: LD_INT 11
43470: PUSH
43471: LD_VAR 0 5
43475: IN
43476: PUSH
43477: LD_INT 30
43479: PUSH
43480: LD_VAR 0 5
43484: IN
43485: OR
43486: AND
43487: PUSH
43488: LD_INT 6
43490: PPUSH
43491: LD_VAR 0 16
43495: PPUSH
43496: CALL_OW 321
43500: PUSH
43501: LD_INT 2
43503: EQUAL
43504: AND
43505: IFFALSE 43670
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43507: LD_INT 22
43509: PUSH
43510: LD_VAR 0 16
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: PUSH
43522: LD_INT 35
43524: PUSH
43525: LD_INT 11
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 35
43534: PUSH
43535: LD_INT 30
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 91
43549: PUSH
43550: LD_VAR 0 1
43554: PUSH
43555: LD_INT 18
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: LIST
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: LIST
43567: PPUSH
43568: CALL_OW 69
43572: NOT
43573: PUSH
43574: LD_INT 22
43576: PUSH
43577: LD_VAR 0 16
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: LD_INT 30
43591: PUSH
43592: LD_INT 32
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 30
43601: PUSH
43602: LD_INT 33
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 91
43616: PUSH
43617: LD_VAR 0 1
43621: PUSH
43622: LD_INT 12
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: LIST
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: PPUSH
43638: CALL_OW 69
43642: PUSH
43643: LD_INT 2
43645: GREATER
43646: AND
43647: IFFALSE 43670
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43649: LD_ADDR_VAR 0 18
43653: PUSH
43654: LD_INT 11
43656: PUSH
43657: LD_INT 30
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_VAR 0 12
43668: ARRAY
43669: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43670: LD_VAR 0 18
43674: NOT
43675: PUSH
43676: LD_INT 40
43678: PPUSH
43679: LD_VAR 0 16
43683: PPUSH
43684: CALL_OW 321
43688: PUSH
43689: LD_INT 2
43691: EQUAL
43692: AND
43693: PUSH
43694: LD_INT 7
43696: PUSH
43697: LD_VAR 0 5
43701: IN
43702: PUSH
43703: LD_INT 28
43705: PUSH
43706: LD_VAR 0 5
43710: IN
43711: OR
43712: PUSH
43713: LD_INT 45
43715: PUSH
43716: LD_VAR 0 5
43720: IN
43721: OR
43722: AND
43723: IFFALSE 43977
// begin hex := GetHexInfo ( x , y ) ;
43725: LD_ADDR_VAR 0 4
43729: PUSH
43730: LD_VAR 0 10
43734: PPUSH
43735: LD_VAR 0 11
43739: PPUSH
43740: CALL_OW 546
43744: ST_TO_ADDR
// if hex [ 1 ] then
43745: LD_VAR 0 4
43749: PUSH
43750: LD_INT 1
43752: ARRAY
43753: IFFALSE 43757
// exit ;
43755: GO 44160
// height := hex [ 2 ] ;
43757: LD_ADDR_VAR 0 15
43761: PUSH
43762: LD_VAR 0 4
43766: PUSH
43767: LD_INT 2
43769: ARRAY
43770: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43771: LD_ADDR_VAR 0 14
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 2
43781: PUSH
43782: LD_INT 3
43784: PUSH
43785: LD_INT 5
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: LIST
43792: LIST
43793: ST_TO_ADDR
// for i in tmp do
43794: LD_ADDR_VAR 0 8
43798: PUSH
43799: LD_VAR 0 14
43803: PUSH
43804: FOR_IN
43805: IFFALSE 43975
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43807: LD_ADDR_VAR 0 9
43811: PUSH
43812: LD_VAR 0 10
43816: PPUSH
43817: LD_VAR 0 8
43821: PPUSH
43822: LD_INT 5
43824: PPUSH
43825: CALL_OW 272
43829: PUSH
43830: LD_VAR 0 11
43834: PPUSH
43835: LD_VAR 0 8
43839: PPUSH
43840: LD_INT 5
43842: PPUSH
43843: CALL_OW 273
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43852: LD_VAR 0 9
43856: PUSH
43857: LD_INT 1
43859: ARRAY
43860: PPUSH
43861: LD_VAR 0 9
43865: PUSH
43866: LD_INT 2
43868: ARRAY
43869: PPUSH
43870: CALL_OW 488
43874: IFFALSE 43973
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43876: LD_ADDR_VAR 0 4
43880: PUSH
43881: LD_VAR 0 9
43885: PUSH
43886: LD_INT 1
43888: ARRAY
43889: PPUSH
43890: LD_VAR 0 9
43894: PUSH
43895: LD_INT 2
43897: ARRAY
43898: PPUSH
43899: CALL_OW 546
43903: ST_TO_ADDR
// if hex [ 1 ] then
43904: LD_VAR 0 4
43908: PUSH
43909: LD_INT 1
43911: ARRAY
43912: IFFALSE 43916
// continue ;
43914: GO 43804
// h := hex [ 2 ] ;
43916: LD_ADDR_VAR 0 13
43920: PUSH
43921: LD_VAR 0 4
43925: PUSH
43926: LD_INT 2
43928: ARRAY
43929: ST_TO_ADDR
// if h + 7 < height then
43930: LD_VAR 0 13
43934: PUSH
43935: LD_INT 7
43937: PLUS
43938: PUSH
43939: LD_VAR 0 15
43943: LESS
43944: IFFALSE 43973
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43946: LD_ADDR_VAR 0 18
43950: PUSH
43951: LD_INT 7
43953: PUSH
43954: LD_INT 28
43956: PUSH
43957: LD_INT 45
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: PUSH
43965: LD_VAR 0 12
43969: ARRAY
43970: ST_TO_ADDR
// break ;
43971: GO 43975
// end ; end ; end ;
43973: GO 43804
43975: POP
43976: POP
// end ; if not weapon then
43977: LD_VAR 0 18
43981: NOT
43982: IFFALSE 44042
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43984: LD_ADDR_VAR 0 5
43988: PUSH
43989: LD_VAR 0 5
43993: PUSH
43994: LD_INT 11
43996: PUSH
43997: LD_INT 30
43999: PUSH
44000: LD_INT 49
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: LIST
44007: DIFF
44008: ST_TO_ADDR
// if not list then
44009: LD_VAR 0 5
44013: NOT
44014: IFFALSE 44018
// exit ;
44016: GO 44160
// weapon := list [ rand ( 1 , list ) ] ;
44018: LD_ADDR_VAR 0 18
44022: PUSH
44023: LD_VAR 0 5
44027: PUSH
44028: LD_INT 1
44030: PPUSH
44031: LD_VAR 0 5
44035: PPUSH
44036: CALL_OW 12
44040: ARRAY
44041: ST_TO_ADDR
// end ; if weapon then
44042: LD_VAR 0 18
44046: IFFALSE 44160
// begin tmp := CostOfWeapon ( weapon ) ;
44048: LD_ADDR_VAR 0 14
44052: PUSH
44053: LD_VAR 0 18
44057: PPUSH
44058: CALL_OW 451
44062: ST_TO_ADDR
// j := GetBase ( tower ) ;
44063: LD_ADDR_VAR 0 9
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: CALL_OW 274
44077: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44078: LD_VAR 0 9
44082: PPUSH
44083: LD_INT 1
44085: PPUSH
44086: CALL_OW 275
44090: PUSH
44091: LD_VAR 0 14
44095: PUSH
44096: LD_INT 1
44098: ARRAY
44099: GREATEREQUAL
44100: PUSH
44101: LD_VAR 0 9
44105: PPUSH
44106: LD_INT 2
44108: PPUSH
44109: CALL_OW 275
44113: PUSH
44114: LD_VAR 0 14
44118: PUSH
44119: LD_INT 2
44121: ARRAY
44122: GREATEREQUAL
44123: AND
44124: PUSH
44125: LD_VAR 0 9
44129: PPUSH
44130: LD_INT 3
44132: PPUSH
44133: CALL_OW 275
44137: PUSH
44138: LD_VAR 0 14
44142: PUSH
44143: LD_INT 3
44145: ARRAY
44146: GREATEREQUAL
44147: AND
44148: IFFALSE 44160
// result := weapon ;
44150: LD_ADDR_VAR 0 3
44154: PUSH
44155: LD_VAR 0 18
44159: ST_TO_ADDR
// end ; end ;
44160: LD_VAR 0 3
44164: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
// result := true ;
44169: LD_ADDR_VAR 0 3
44173: PUSH
44174: LD_INT 1
44176: ST_TO_ADDR
// if array1 = array2 then
44177: LD_VAR 0 1
44181: PUSH
44182: LD_VAR 0 2
44186: EQUAL
44187: IFFALSE 44247
// begin for i = 1 to array1 do
44189: LD_ADDR_VAR 0 4
44193: PUSH
44194: DOUBLE
44195: LD_INT 1
44197: DEC
44198: ST_TO_ADDR
44199: LD_VAR 0 1
44203: PUSH
44204: FOR_TO
44205: IFFALSE 44243
// if array1 [ i ] <> array2 [ i ] then
44207: LD_VAR 0 1
44211: PUSH
44212: LD_VAR 0 4
44216: ARRAY
44217: PUSH
44218: LD_VAR 0 2
44222: PUSH
44223: LD_VAR 0 4
44227: ARRAY
44228: NONEQUAL
44229: IFFALSE 44241
// begin result := false ;
44231: LD_ADDR_VAR 0 3
44235: PUSH
44236: LD_INT 0
44238: ST_TO_ADDR
// break ;
44239: GO 44243
// end ;
44241: GO 44204
44243: POP
44244: POP
// end else
44245: GO 44255
// result := false ;
44247: LD_ADDR_VAR 0 3
44251: PUSH
44252: LD_INT 0
44254: ST_TO_ADDR
// end ;
44255: LD_VAR 0 3
44259: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44260: LD_INT 0
44262: PPUSH
44263: PPUSH
// if not array1 or not array2 then
44264: LD_VAR 0 1
44268: NOT
44269: PUSH
44270: LD_VAR 0 2
44274: NOT
44275: OR
44276: IFFALSE 44280
// exit ;
44278: GO 44344
// result := true ;
44280: LD_ADDR_VAR 0 3
44284: PUSH
44285: LD_INT 1
44287: ST_TO_ADDR
// for i = 1 to array1 do
44288: LD_ADDR_VAR 0 4
44292: PUSH
44293: DOUBLE
44294: LD_INT 1
44296: DEC
44297: ST_TO_ADDR
44298: LD_VAR 0 1
44302: PUSH
44303: FOR_TO
44304: IFFALSE 44342
// if array1 [ i ] <> array2 [ i ] then
44306: LD_VAR 0 1
44310: PUSH
44311: LD_VAR 0 4
44315: ARRAY
44316: PUSH
44317: LD_VAR 0 2
44321: PUSH
44322: LD_VAR 0 4
44326: ARRAY
44327: NONEQUAL
44328: IFFALSE 44340
// begin result := false ;
44330: LD_ADDR_VAR 0 3
44334: PUSH
44335: LD_INT 0
44337: ST_TO_ADDR
// break ;
44338: GO 44342
// end ;
44340: GO 44303
44342: POP
44343: POP
// end ;
44344: LD_VAR 0 3
44348: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44349: LD_INT 0
44351: PPUSH
44352: PPUSH
44353: PPUSH
// pom := GetBase ( fac ) ;
44354: LD_ADDR_VAR 0 5
44358: PUSH
44359: LD_VAR 0 1
44363: PPUSH
44364: CALL_OW 274
44368: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44369: LD_ADDR_VAR 0 4
44373: PUSH
44374: LD_VAR 0 2
44378: PUSH
44379: LD_INT 1
44381: ARRAY
44382: PPUSH
44383: LD_VAR 0 2
44387: PUSH
44388: LD_INT 2
44390: ARRAY
44391: PPUSH
44392: LD_VAR 0 2
44396: PUSH
44397: LD_INT 3
44399: ARRAY
44400: PPUSH
44401: LD_VAR 0 2
44405: PUSH
44406: LD_INT 4
44408: ARRAY
44409: PPUSH
44410: CALL_OW 449
44414: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44415: LD_ADDR_VAR 0 3
44419: PUSH
44420: LD_VAR 0 5
44424: PPUSH
44425: LD_INT 1
44427: PPUSH
44428: CALL_OW 275
44432: PUSH
44433: LD_VAR 0 4
44437: PUSH
44438: LD_INT 1
44440: ARRAY
44441: GREATEREQUAL
44442: PUSH
44443: LD_VAR 0 5
44447: PPUSH
44448: LD_INT 2
44450: PPUSH
44451: CALL_OW 275
44455: PUSH
44456: LD_VAR 0 4
44460: PUSH
44461: LD_INT 2
44463: ARRAY
44464: GREATEREQUAL
44465: AND
44466: PUSH
44467: LD_VAR 0 5
44471: PPUSH
44472: LD_INT 3
44474: PPUSH
44475: CALL_OW 275
44479: PUSH
44480: LD_VAR 0 4
44484: PUSH
44485: LD_INT 3
44487: ARRAY
44488: GREATEREQUAL
44489: AND
44490: ST_TO_ADDR
// end ;
44491: LD_VAR 0 3
44495: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44496: LD_INT 0
44498: PPUSH
44499: PPUSH
44500: PPUSH
44501: PPUSH
// pom := GetBase ( building ) ;
44502: LD_ADDR_VAR 0 3
44506: PUSH
44507: LD_VAR 0 1
44511: PPUSH
44512: CALL_OW 274
44516: ST_TO_ADDR
// if not pom then
44517: LD_VAR 0 3
44521: NOT
44522: IFFALSE 44526
// exit ;
44524: GO 44696
// btype := GetBType ( building ) ;
44526: LD_ADDR_VAR 0 5
44530: PUSH
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 266
44540: ST_TO_ADDR
// if btype = b_armoury then
44541: LD_VAR 0 5
44545: PUSH
44546: LD_INT 4
44548: EQUAL
44549: IFFALSE 44559
// btype := b_barracks ;
44551: LD_ADDR_VAR 0 5
44555: PUSH
44556: LD_INT 5
44558: ST_TO_ADDR
// if btype = b_depot then
44559: LD_VAR 0 5
44563: PUSH
44564: LD_INT 0
44566: EQUAL
44567: IFFALSE 44577
// btype := b_warehouse ;
44569: LD_ADDR_VAR 0 5
44573: PUSH
44574: LD_INT 1
44576: ST_TO_ADDR
// if btype = b_workshop then
44577: LD_VAR 0 5
44581: PUSH
44582: LD_INT 2
44584: EQUAL
44585: IFFALSE 44595
// btype := b_factory ;
44587: LD_ADDR_VAR 0 5
44591: PUSH
44592: LD_INT 3
44594: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44595: LD_ADDR_VAR 0 4
44599: PUSH
44600: LD_VAR 0 5
44604: PPUSH
44605: LD_VAR 0 1
44609: PPUSH
44610: CALL_OW 248
44614: PPUSH
44615: CALL_OW 450
44619: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44620: LD_ADDR_VAR 0 2
44624: PUSH
44625: LD_VAR 0 3
44629: PPUSH
44630: LD_INT 1
44632: PPUSH
44633: CALL_OW 275
44637: PUSH
44638: LD_VAR 0 4
44642: PUSH
44643: LD_INT 1
44645: ARRAY
44646: GREATEREQUAL
44647: PUSH
44648: LD_VAR 0 3
44652: PPUSH
44653: LD_INT 2
44655: PPUSH
44656: CALL_OW 275
44660: PUSH
44661: LD_VAR 0 4
44665: PUSH
44666: LD_INT 2
44668: ARRAY
44669: GREATEREQUAL
44670: AND
44671: PUSH
44672: LD_VAR 0 3
44676: PPUSH
44677: LD_INT 3
44679: PPUSH
44680: CALL_OW 275
44684: PUSH
44685: LD_VAR 0 4
44689: PUSH
44690: LD_INT 3
44692: ARRAY
44693: GREATEREQUAL
44694: AND
44695: ST_TO_ADDR
// end ;
44696: LD_VAR 0 2
44700: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44701: LD_INT 0
44703: PPUSH
44704: PPUSH
44705: PPUSH
// pom := GetBase ( building ) ;
44706: LD_ADDR_VAR 0 4
44710: PUSH
44711: LD_VAR 0 1
44715: PPUSH
44716: CALL_OW 274
44720: ST_TO_ADDR
// if not pom then
44721: LD_VAR 0 4
44725: NOT
44726: IFFALSE 44730
// exit ;
44728: GO 44831
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44730: LD_ADDR_VAR 0 5
44734: PUSH
44735: LD_VAR 0 2
44739: PPUSH
44740: LD_VAR 0 1
44744: PPUSH
44745: CALL_OW 248
44749: PPUSH
44750: CALL_OW 450
44754: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44755: LD_ADDR_VAR 0 3
44759: PUSH
44760: LD_VAR 0 4
44764: PPUSH
44765: LD_INT 1
44767: PPUSH
44768: CALL_OW 275
44772: PUSH
44773: LD_VAR 0 5
44777: PUSH
44778: LD_INT 1
44780: ARRAY
44781: GREATEREQUAL
44782: PUSH
44783: LD_VAR 0 4
44787: PPUSH
44788: LD_INT 2
44790: PPUSH
44791: CALL_OW 275
44795: PUSH
44796: LD_VAR 0 5
44800: PUSH
44801: LD_INT 2
44803: ARRAY
44804: GREATEREQUAL
44805: AND
44806: PUSH
44807: LD_VAR 0 4
44811: PPUSH
44812: LD_INT 3
44814: PPUSH
44815: CALL_OW 275
44819: PUSH
44820: LD_VAR 0 5
44824: PUSH
44825: LD_INT 3
44827: ARRAY
44828: GREATEREQUAL
44829: AND
44830: ST_TO_ADDR
// end ;
44831: LD_VAR 0 3
44835: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44836: LD_INT 0
44838: PPUSH
44839: PPUSH
44840: PPUSH
44841: PPUSH
44842: PPUSH
44843: PPUSH
44844: PPUSH
44845: PPUSH
44846: PPUSH
44847: PPUSH
44848: PPUSH
// result := false ;
44849: LD_ADDR_VAR 0 8
44853: PUSH
44854: LD_INT 0
44856: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44857: LD_VAR 0 5
44861: NOT
44862: PUSH
44863: LD_VAR 0 1
44867: NOT
44868: OR
44869: PUSH
44870: LD_VAR 0 2
44874: NOT
44875: OR
44876: PUSH
44877: LD_VAR 0 3
44881: NOT
44882: OR
44883: IFFALSE 44887
// exit ;
44885: GO 45701
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44887: LD_ADDR_VAR 0 14
44891: PUSH
44892: LD_VAR 0 1
44896: PPUSH
44897: LD_VAR 0 2
44901: PPUSH
44902: LD_VAR 0 3
44906: PPUSH
44907: LD_VAR 0 4
44911: PPUSH
44912: LD_VAR 0 5
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: PPUSH
44921: CALL_OW 248
44925: PPUSH
44926: LD_INT 0
44928: PPUSH
44929: CALL 46934 0 6
44933: ST_TO_ADDR
// if not hexes then
44934: LD_VAR 0 14
44938: NOT
44939: IFFALSE 44943
// exit ;
44941: GO 45701
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44943: LD_ADDR_VAR 0 17
44947: PUSH
44948: LD_VAR 0 5
44952: PPUSH
44953: LD_INT 22
44955: PUSH
44956: LD_VAR 0 13
44960: PPUSH
44961: CALL_OW 255
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 30
44975: PUSH
44976: LD_INT 0
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 30
44985: PUSH
44986: LD_INT 1
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: LIST
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PPUSH
45002: CALL_OW 72
45006: ST_TO_ADDR
// for i = 1 to hexes do
45007: LD_ADDR_VAR 0 9
45011: PUSH
45012: DOUBLE
45013: LD_INT 1
45015: DEC
45016: ST_TO_ADDR
45017: LD_VAR 0 14
45021: PUSH
45022: FOR_TO
45023: IFFALSE 45699
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45025: LD_ADDR_VAR 0 13
45029: PUSH
45030: LD_VAR 0 14
45034: PUSH
45035: LD_VAR 0 9
45039: ARRAY
45040: PUSH
45041: LD_INT 1
45043: ARRAY
45044: PPUSH
45045: LD_VAR 0 14
45049: PUSH
45050: LD_VAR 0 9
45054: ARRAY
45055: PUSH
45056: LD_INT 2
45058: ARRAY
45059: PPUSH
45060: CALL_OW 428
45064: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45065: LD_VAR 0 14
45069: PUSH
45070: LD_VAR 0 9
45074: ARRAY
45075: PUSH
45076: LD_INT 1
45078: ARRAY
45079: PPUSH
45080: LD_VAR 0 14
45084: PUSH
45085: LD_VAR 0 9
45089: ARRAY
45090: PUSH
45091: LD_INT 2
45093: ARRAY
45094: PPUSH
45095: CALL_OW 351
45099: PUSH
45100: LD_VAR 0 14
45104: PUSH
45105: LD_VAR 0 9
45109: ARRAY
45110: PUSH
45111: LD_INT 1
45113: ARRAY
45114: PPUSH
45115: LD_VAR 0 14
45119: PUSH
45120: LD_VAR 0 9
45124: ARRAY
45125: PUSH
45126: LD_INT 2
45128: ARRAY
45129: PPUSH
45130: CALL_OW 488
45134: NOT
45135: OR
45136: PUSH
45137: LD_VAR 0 13
45141: PPUSH
45142: CALL_OW 247
45146: PUSH
45147: LD_INT 3
45149: EQUAL
45150: OR
45151: IFFALSE 45157
// exit ;
45153: POP
45154: POP
45155: GO 45701
// if not tmp then
45157: LD_VAR 0 13
45161: NOT
45162: IFFALSE 45166
// continue ;
45164: GO 45022
// result := true ;
45166: LD_ADDR_VAR 0 8
45170: PUSH
45171: LD_INT 1
45173: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45174: LD_VAR 0 6
45178: PUSH
45179: LD_VAR 0 13
45183: PPUSH
45184: CALL_OW 247
45188: PUSH
45189: LD_INT 2
45191: EQUAL
45192: AND
45193: PUSH
45194: LD_VAR 0 13
45198: PPUSH
45199: CALL_OW 263
45203: PUSH
45204: LD_INT 1
45206: EQUAL
45207: AND
45208: IFFALSE 45372
// begin if IsDrivenBy ( tmp ) then
45210: LD_VAR 0 13
45214: PPUSH
45215: CALL_OW 311
45219: IFFALSE 45223
// continue ;
45221: GO 45022
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45223: LD_VAR 0 6
45227: PPUSH
45228: LD_INT 3
45230: PUSH
45231: LD_INT 60
45233: PUSH
45234: EMPTY
45235: LIST
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: LD_INT 55
45246: PUSH
45247: EMPTY
45248: LIST
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PPUSH
45258: CALL_OW 72
45262: IFFALSE 45370
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45264: LD_ADDR_VAR 0 18
45268: PUSH
45269: LD_VAR 0 6
45273: PPUSH
45274: LD_INT 3
45276: PUSH
45277: LD_INT 60
45279: PUSH
45280: EMPTY
45281: LIST
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: LD_INT 55
45292: PUSH
45293: EMPTY
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PPUSH
45304: CALL_OW 72
45308: PUSH
45309: LD_INT 1
45311: ARRAY
45312: ST_TO_ADDR
// if IsInUnit ( driver ) then
45313: LD_VAR 0 18
45317: PPUSH
45318: CALL_OW 310
45322: IFFALSE 45333
// ComExit ( driver ) ;
45324: LD_VAR 0 18
45328: PPUSH
45329: CALL 70714 0 1
// AddComEnterUnit ( driver , tmp ) ;
45333: LD_VAR 0 18
45337: PPUSH
45338: LD_VAR 0 13
45342: PPUSH
45343: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45347: LD_VAR 0 18
45351: PPUSH
45352: LD_VAR 0 7
45356: PPUSH
45357: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45361: LD_VAR 0 18
45365: PPUSH
45366: CALL_OW 181
// end ; continue ;
45370: GO 45022
// end ; if not cleaners or not tmp in cleaners then
45372: LD_VAR 0 6
45376: NOT
45377: PUSH
45378: LD_VAR 0 13
45382: PUSH
45383: LD_VAR 0 6
45387: IN
45388: NOT
45389: OR
45390: IFFALSE 45697
// begin if dep then
45392: LD_VAR 0 17
45396: IFFALSE 45532
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45398: LD_ADDR_VAR 0 16
45402: PUSH
45403: LD_VAR 0 17
45407: PUSH
45408: LD_INT 1
45410: ARRAY
45411: PPUSH
45412: CALL_OW 250
45416: PPUSH
45417: LD_VAR 0 17
45421: PUSH
45422: LD_INT 1
45424: ARRAY
45425: PPUSH
45426: CALL_OW 254
45430: PPUSH
45431: LD_INT 5
45433: PPUSH
45434: CALL_OW 272
45438: PUSH
45439: LD_VAR 0 17
45443: PUSH
45444: LD_INT 1
45446: ARRAY
45447: PPUSH
45448: CALL_OW 251
45452: PPUSH
45453: LD_VAR 0 17
45457: PUSH
45458: LD_INT 1
45460: ARRAY
45461: PPUSH
45462: CALL_OW 254
45466: PPUSH
45467: LD_INT 5
45469: PPUSH
45470: CALL_OW 273
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45479: LD_VAR 0 16
45483: PUSH
45484: LD_INT 1
45486: ARRAY
45487: PPUSH
45488: LD_VAR 0 16
45492: PUSH
45493: LD_INT 2
45495: ARRAY
45496: PPUSH
45497: CALL_OW 488
45501: IFFALSE 45532
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45503: LD_VAR 0 13
45507: PPUSH
45508: LD_VAR 0 16
45512: PUSH
45513: LD_INT 1
45515: ARRAY
45516: PPUSH
45517: LD_VAR 0 16
45521: PUSH
45522: LD_INT 2
45524: ARRAY
45525: PPUSH
45526: CALL_OW 111
// continue ;
45530: GO 45022
// end ; end ; r := GetDir ( tmp ) ;
45532: LD_ADDR_VAR 0 15
45536: PUSH
45537: LD_VAR 0 13
45541: PPUSH
45542: CALL_OW 254
45546: ST_TO_ADDR
// if r = 5 then
45547: LD_VAR 0 15
45551: PUSH
45552: LD_INT 5
45554: EQUAL
45555: IFFALSE 45565
// r := 0 ;
45557: LD_ADDR_VAR 0 15
45561: PUSH
45562: LD_INT 0
45564: ST_TO_ADDR
// for j = r to 5 do
45565: LD_ADDR_VAR 0 10
45569: PUSH
45570: DOUBLE
45571: LD_VAR 0 15
45575: DEC
45576: ST_TO_ADDR
45577: LD_INT 5
45579: PUSH
45580: FOR_TO
45581: IFFALSE 45695
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45583: LD_ADDR_VAR 0 11
45587: PUSH
45588: LD_VAR 0 13
45592: PPUSH
45593: CALL_OW 250
45597: PPUSH
45598: LD_VAR 0 10
45602: PPUSH
45603: LD_INT 2
45605: PPUSH
45606: CALL_OW 272
45610: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45611: LD_ADDR_VAR 0 12
45615: PUSH
45616: LD_VAR 0 13
45620: PPUSH
45621: CALL_OW 251
45625: PPUSH
45626: LD_VAR 0 10
45630: PPUSH
45631: LD_INT 2
45633: PPUSH
45634: CALL_OW 273
45638: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45639: LD_VAR 0 11
45643: PPUSH
45644: LD_VAR 0 12
45648: PPUSH
45649: CALL_OW 488
45653: PUSH
45654: LD_VAR 0 11
45658: PPUSH
45659: LD_VAR 0 12
45663: PPUSH
45664: CALL_OW 428
45668: NOT
45669: AND
45670: IFFALSE 45693
// begin ComMoveXY ( tmp , _x , _y ) ;
45672: LD_VAR 0 13
45676: PPUSH
45677: LD_VAR 0 11
45681: PPUSH
45682: LD_VAR 0 12
45686: PPUSH
45687: CALL_OW 111
// break ;
45691: GO 45695
// end ; end ;
45693: GO 45580
45695: POP
45696: POP
// end ; end ;
45697: GO 45022
45699: POP
45700: POP
// end ;
45701: LD_VAR 0 8
45705: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45706: LD_INT 0
45708: PPUSH
// result := true ;
45709: LD_ADDR_VAR 0 3
45713: PUSH
45714: LD_INT 1
45716: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45717: LD_VAR 0 2
45721: PUSH
45722: LD_INT 24
45724: DOUBLE
45725: EQUAL
45726: IFTRUE 45736
45728: LD_INT 33
45730: DOUBLE
45731: EQUAL
45732: IFTRUE 45736
45734: GO 45761
45736: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45737: LD_ADDR_VAR 0 3
45741: PUSH
45742: LD_INT 32
45744: PPUSH
45745: LD_VAR 0 1
45749: PPUSH
45750: CALL_OW 321
45754: PUSH
45755: LD_INT 2
45757: EQUAL
45758: ST_TO_ADDR
45759: GO 46077
45761: LD_INT 20
45763: DOUBLE
45764: EQUAL
45765: IFTRUE 45769
45767: GO 45794
45769: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45770: LD_ADDR_VAR 0 3
45774: PUSH
45775: LD_INT 6
45777: PPUSH
45778: LD_VAR 0 1
45782: PPUSH
45783: CALL_OW 321
45787: PUSH
45788: LD_INT 2
45790: EQUAL
45791: ST_TO_ADDR
45792: GO 46077
45794: LD_INT 22
45796: DOUBLE
45797: EQUAL
45798: IFTRUE 45808
45800: LD_INT 36
45802: DOUBLE
45803: EQUAL
45804: IFTRUE 45808
45806: GO 45833
45808: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45809: LD_ADDR_VAR 0 3
45813: PUSH
45814: LD_INT 15
45816: PPUSH
45817: LD_VAR 0 1
45821: PPUSH
45822: CALL_OW 321
45826: PUSH
45827: LD_INT 2
45829: EQUAL
45830: ST_TO_ADDR
45831: GO 46077
45833: LD_INT 30
45835: DOUBLE
45836: EQUAL
45837: IFTRUE 45841
45839: GO 45866
45841: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45842: LD_ADDR_VAR 0 3
45846: PUSH
45847: LD_INT 20
45849: PPUSH
45850: LD_VAR 0 1
45854: PPUSH
45855: CALL_OW 321
45859: PUSH
45860: LD_INT 2
45862: EQUAL
45863: ST_TO_ADDR
45864: GO 46077
45866: LD_INT 28
45868: DOUBLE
45869: EQUAL
45870: IFTRUE 45880
45872: LD_INT 21
45874: DOUBLE
45875: EQUAL
45876: IFTRUE 45880
45878: GO 45905
45880: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45881: LD_ADDR_VAR 0 3
45885: PUSH
45886: LD_INT 21
45888: PPUSH
45889: LD_VAR 0 1
45893: PPUSH
45894: CALL_OW 321
45898: PUSH
45899: LD_INT 2
45901: EQUAL
45902: ST_TO_ADDR
45903: GO 46077
45905: LD_INT 16
45907: DOUBLE
45908: EQUAL
45909: IFTRUE 45913
45911: GO 45938
45913: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45914: LD_ADDR_VAR 0 3
45918: PUSH
45919: LD_INT 84
45921: PPUSH
45922: LD_VAR 0 1
45926: PPUSH
45927: CALL_OW 321
45931: PUSH
45932: LD_INT 2
45934: EQUAL
45935: ST_TO_ADDR
45936: GO 46077
45938: LD_INT 19
45940: DOUBLE
45941: EQUAL
45942: IFTRUE 45952
45944: LD_INT 23
45946: DOUBLE
45947: EQUAL
45948: IFTRUE 45952
45950: GO 45977
45952: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45953: LD_ADDR_VAR 0 3
45957: PUSH
45958: LD_INT 83
45960: PPUSH
45961: LD_VAR 0 1
45965: PPUSH
45966: CALL_OW 321
45970: PUSH
45971: LD_INT 2
45973: EQUAL
45974: ST_TO_ADDR
45975: GO 46077
45977: LD_INT 17
45979: DOUBLE
45980: EQUAL
45981: IFTRUE 45985
45983: GO 46010
45985: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45986: LD_ADDR_VAR 0 3
45990: PUSH
45991: LD_INT 39
45993: PPUSH
45994: LD_VAR 0 1
45998: PPUSH
45999: CALL_OW 321
46003: PUSH
46004: LD_INT 2
46006: EQUAL
46007: ST_TO_ADDR
46008: GO 46077
46010: LD_INT 18
46012: DOUBLE
46013: EQUAL
46014: IFTRUE 46018
46016: GO 46043
46018: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46019: LD_ADDR_VAR 0 3
46023: PUSH
46024: LD_INT 40
46026: PPUSH
46027: LD_VAR 0 1
46031: PPUSH
46032: CALL_OW 321
46036: PUSH
46037: LD_INT 2
46039: EQUAL
46040: ST_TO_ADDR
46041: GO 46077
46043: LD_INT 27
46045: DOUBLE
46046: EQUAL
46047: IFTRUE 46051
46049: GO 46076
46051: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_INT 35
46059: PPUSH
46060: LD_VAR 0 1
46064: PPUSH
46065: CALL_OW 321
46069: PUSH
46070: LD_INT 2
46072: EQUAL
46073: ST_TO_ADDR
46074: GO 46077
46076: POP
// end ;
46077: LD_VAR 0 3
46081: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46082: LD_INT 0
46084: PPUSH
46085: PPUSH
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
46093: PPUSH
46094: PPUSH
// result := false ;
46095: LD_ADDR_VAR 0 6
46099: PUSH
46100: LD_INT 0
46102: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46103: LD_VAR 0 1
46107: NOT
46108: PUSH
46109: LD_VAR 0 1
46113: PPUSH
46114: CALL_OW 266
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: IN
46129: NOT
46130: OR
46131: PUSH
46132: LD_VAR 0 2
46136: NOT
46137: OR
46138: PUSH
46139: LD_VAR 0 5
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 2
46152: PUSH
46153: LD_INT 3
46155: PUSH
46156: LD_INT 4
46158: PUSH
46159: LD_INT 5
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: IN
46170: NOT
46171: OR
46172: PUSH
46173: LD_VAR 0 3
46177: PPUSH
46178: LD_VAR 0 4
46182: PPUSH
46183: CALL_OW 488
46187: NOT
46188: OR
46189: IFFALSE 46193
// exit ;
46191: GO 46929
// side := GetSide ( depot ) ;
46193: LD_ADDR_VAR 0 9
46197: PUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: CALL_OW 255
46207: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46208: LD_VAR 0 9
46212: PPUSH
46213: LD_VAR 0 2
46217: PPUSH
46218: CALL 45706 0 2
46222: NOT
46223: IFFALSE 46227
// exit ;
46225: GO 46929
// pom := GetBase ( depot ) ;
46227: LD_ADDR_VAR 0 10
46231: PUSH
46232: LD_VAR 0 1
46236: PPUSH
46237: CALL_OW 274
46241: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46242: LD_ADDR_VAR 0 11
46246: PUSH
46247: LD_VAR 0 2
46251: PPUSH
46252: LD_VAR 0 1
46256: PPUSH
46257: CALL_OW 248
46261: PPUSH
46262: CALL_OW 450
46266: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46267: LD_VAR 0 10
46271: PPUSH
46272: LD_INT 1
46274: PPUSH
46275: CALL_OW 275
46279: PUSH
46280: LD_VAR 0 11
46284: PUSH
46285: LD_INT 1
46287: ARRAY
46288: GREATEREQUAL
46289: PUSH
46290: LD_VAR 0 10
46294: PPUSH
46295: LD_INT 2
46297: PPUSH
46298: CALL_OW 275
46302: PUSH
46303: LD_VAR 0 11
46307: PUSH
46308: LD_INT 2
46310: ARRAY
46311: GREATEREQUAL
46312: AND
46313: PUSH
46314: LD_VAR 0 10
46318: PPUSH
46319: LD_INT 3
46321: PPUSH
46322: CALL_OW 275
46326: PUSH
46327: LD_VAR 0 11
46331: PUSH
46332: LD_INT 3
46334: ARRAY
46335: GREATEREQUAL
46336: AND
46337: NOT
46338: IFFALSE 46342
// exit ;
46340: GO 46929
// if GetBType ( depot ) = b_depot then
46342: LD_VAR 0 1
46346: PPUSH
46347: CALL_OW 266
46351: PUSH
46352: LD_INT 0
46354: EQUAL
46355: IFFALSE 46367
// dist := 28 else
46357: LD_ADDR_VAR 0 14
46361: PUSH
46362: LD_INT 28
46364: ST_TO_ADDR
46365: GO 46375
// dist := 36 ;
46367: LD_ADDR_VAR 0 14
46371: PUSH
46372: LD_INT 36
46374: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46375: LD_VAR 0 1
46379: PPUSH
46380: LD_VAR 0 3
46384: PPUSH
46385: LD_VAR 0 4
46389: PPUSH
46390: CALL_OW 297
46394: PUSH
46395: LD_VAR 0 14
46399: GREATER
46400: IFFALSE 46404
// exit ;
46402: GO 46929
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46404: LD_ADDR_VAR 0 12
46408: PUSH
46409: LD_VAR 0 2
46413: PPUSH
46414: LD_VAR 0 3
46418: PPUSH
46419: LD_VAR 0 4
46423: PPUSH
46424: LD_VAR 0 5
46428: PPUSH
46429: LD_VAR 0 1
46433: PPUSH
46434: CALL_OW 248
46438: PPUSH
46439: LD_INT 0
46441: PPUSH
46442: CALL 46934 0 6
46446: ST_TO_ADDR
// if not hexes then
46447: LD_VAR 0 12
46451: NOT
46452: IFFALSE 46456
// exit ;
46454: GO 46929
// hex := GetHexInfo ( x , y ) ;
46456: LD_ADDR_VAR 0 15
46460: PUSH
46461: LD_VAR 0 3
46465: PPUSH
46466: LD_VAR 0 4
46470: PPUSH
46471: CALL_OW 546
46475: ST_TO_ADDR
// if hex [ 1 ] then
46476: LD_VAR 0 15
46480: PUSH
46481: LD_INT 1
46483: ARRAY
46484: IFFALSE 46488
// exit ;
46486: GO 46929
// height := hex [ 2 ] ;
46488: LD_ADDR_VAR 0 13
46492: PUSH
46493: LD_VAR 0 15
46497: PUSH
46498: LD_INT 2
46500: ARRAY
46501: ST_TO_ADDR
// for i = 1 to hexes do
46502: LD_ADDR_VAR 0 7
46506: PUSH
46507: DOUBLE
46508: LD_INT 1
46510: DEC
46511: ST_TO_ADDR
46512: LD_VAR 0 12
46516: PUSH
46517: FOR_TO
46518: IFFALSE 46848
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46520: LD_VAR 0 12
46524: PUSH
46525: LD_VAR 0 7
46529: ARRAY
46530: PUSH
46531: LD_INT 1
46533: ARRAY
46534: PPUSH
46535: LD_VAR 0 12
46539: PUSH
46540: LD_VAR 0 7
46544: ARRAY
46545: PUSH
46546: LD_INT 2
46548: ARRAY
46549: PPUSH
46550: CALL_OW 488
46554: NOT
46555: PUSH
46556: LD_VAR 0 12
46560: PUSH
46561: LD_VAR 0 7
46565: ARRAY
46566: PUSH
46567: LD_INT 1
46569: ARRAY
46570: PPUSH
46571: LD_VAR 0 12
46575: PUSH
46576: LD_VAR 0 7
46580: ARRAY
46581: PUSH
46582: LD_INT 2
46584: ARRAY
46585: PPUSH
46586: CALL_OW 428
46590: PUSH
46591: LD_INT 0
46593: GREATER
46594: OR
46595: PUSH
46596: LD_VAR 0 12
46600: PUSH
46601: LD_VAR 0 7
46605: ARRAY
46606: PUSH
46607: LD_INT 1
46609: ARRAY
46610: PPUSH
46611: LD_VAR 0 12
46615: PUSH
46616: LD_VAR 0 7
46620: ARRAY
46621: PUSH
46622: LD_INT 2
46624: ARRAY
46625: PPUSH
46626: CALL_OW 351
46630: OR
46631: IFFALSE 46637
// exit ;
46633: POP
46634: POP
46635: GO 46929
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46637: LD_ADDR_VAR 0 8
46641: PUSH
46642: LD_VAR 0 12
46646: PUSH
46647: LD_VAR 0 7
46651: ARRAY
46652: PUSH
46653: LD_INT 1
46655: ARRAY
46656: PPUSH
46657: LD_VAR 0 12
46661: PUSH
46662: LD_VAR 0 7
46666: ARRAY
46667: PUSH
46668: LD_INT 2
46670: ARRAY
46671: PPUSH
46672: CALL_OW 546
46676: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46677: LD_VAR 0 8
46681: PUSH
46682: LD_INT 1
46684: ARRAY
46685: PUSH
46686: LD_VAR 0 8
46690: PUSH
46691: LD_INT 2
46693: ARRAY
46694: PUSH
46695: LD_VAR 0 13
46699: PUSH
46700: LD_INT 2
46702: PLUS
46703: GREATER
46704: OR
46705: PUSH
46706: LD_VAR 0 8
46710: PUSH
46711: LD_INT 2
46713: ARRAY
46714: PUSH
46715: LD_VAR 0 13
46719: PUSH
46720: LD_INT 2
46722: MINUS
46723: LESS
46724: OR
46725: PUSH
46726: LD_VAR 0 8
46730: PUSH
46731: LD_INT 3
46733: ARRAY
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 8
46740: PUSH
46741: LD_INT 9
46743: PUSH
46744: LD_INT 10
46746: PUSH
46747: LD_INT 11
46749: PUSH
46750: LD_INT 12
46752: PUSH
46753: LD_INT 13
46755: PUSH
46756: LD_INT 16
46758: PUSH
46759: LD_INT 17
46761: PUSH
46762: LD_INT 18
46764: PUSH
46765: LD_INT 19
46767: PUSH
46768: LD_INT 20
46770: PUSH
46771: LD_INT 21
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: IN
46789: NOT
46790: OR
46791: PUSH
46792: LD_VAR 0 8
46796: PUSH
46797: LD_INT 5
46799: ARRAY
46800: NOT
46801: OR
46802: PUSH
46803: LD_VAR 0 8
46807: PUSH
46808: LD_INT 6
46810: ARRAY
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: LD_INT 7
46820: PUSH
46821: LD_INT 9
46823: PUSH
46824: LD_INT 10
46826: PUSH
46827: LD_INT 11
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: IN
46838: NOT
46839: OR
46840: IFFALSE 46846
// exit ;
46842: POP
46843: POP
46844: GO 46929
// end ;
46846: GO 46517
46848: POP
46849: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46850: LD_VAR 0 9
46854: PPUSH
46855: LD_VAR 0 3
46859: PPUSH
46860: LD_VAR 0 4
46864: PPUSH
46865: LD_INT 20
46867: PPUSH
46868: CALL 38881 0 4
46872: PUSH
46873: LD_INT 4
46875: ARRAY
46876: IFFALSE 46880
// exit ;
46878: GO 46929
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46880: LD_VAR 0 2
46884: PUSH
46885: LD_INT 29
46887: PUSH
46888: LD_INT 30
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: IN
46895: PUSH
46896: LD_VAR 0 3
46900: PPUSH
46901: LD_VAR 0 4
46905: PPUSH
46906: LD_VAR 0 9
46910: PPUSH
46911: CALL_OW 440
46915: NOT
46916: AND
46917: IFFALSE 46921
// exit ;
46919: GO 46929
// result := true ;
46921: LD_ADDR_VAR 0 6
46925: PUSH
46926: LD_INT 1
46928: ST_TO_ADDR
// end ;
46929: LD_VAR 0 6
46933: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46934: LD_INT 0
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
46953: PPUSH
46954: PPUSH
46955: PPUSH
46956: PPUSH
46957: PPUSH
46958: PPUSH
46959: PPUSH
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
46971: PPUSH
46972: PPUSH
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
46978: PPUSH
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
46983: PPUSH
46984: PPUSH
46985: PPUSH
46986: PPUSH
46987: PPUSH
46988: PPUSH
46989: PPUSH
46990: PPUSH
46991: PPUSH
46992: PPUSH
46993: PPUSH
// result = [ ] ;
46994: LD_ADDR_VAR 0 7
46998: PUSH
46999: EMPTY
47000: ST_TO_ADDR
// temp_list = [ ] ;
47001: LD_ADDR_VAR 0 9
47005: PUSH
47006: EMPTY
47007: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47008: LD_VAR 0 4
47012: PUSH
47013: LD_INT 0
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 2
47021: PUSH
47022: LD_INT 3
47024: PUSH
47025: LD_INT 4
47027: PUSH
47028: LD_INT 5
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: IN
47039: NOT
47040: PUSH
47041: LD_VAR 0 1
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: IN
47056: PUSH
47057: LD_VAR 0 5
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 3
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: IN
47076: NOT
47077: AND
47078: OR
47079: IFFALSE 47083
// exit ;
47081: GO 65474
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47083: LD_VAR 0 1
47087: PUSH
47088: LD_INT 6
47090: PUSH
47091: LD_INT 7
47093: PUSH
47094: LD_INT 8
47096: PUSH
47097: LD_INT 13
47099: PUSH
47100: LD_INT 12
47102: PUSH
47103: LD_INT 15
47105: PUSH
47106: LD_INT 11
47108: PUSH
47109: LD_INT 14
47111: PUSH
47112: LD_INT 10
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: IN
47126: IFFALSE 47136
// btype = b_lab ;
47128: LD_ADDR_VAR 0 1
47132: PUSH
47133: LD_INT 6
47135: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47136: LD_VAR 0 6
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: LIST
47154: IN
47155: NOT
47156: PUSH
47157: LD_VAR 0 1
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 3
47173: PUSH
47174: LD_INT 6
47176: PUSH
47177: LD_INT 36
47179: PUSH
47180: LD_INT 4
47182: PUSH
47183: LD_INT 5
47185: PUSH
47186: LD_INT 31
47188: PUSH
47189: LD_INT 32
47191: PUSH
47192: LD_INT 33
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: IN
47208: NOT
47209: PUSH
47210: LD_VAR 0 6
47214: PUSH
47215: LD_INT 1
47217: EQUAL
47218: AND
47219: OR
47220: PUSH
47221: LD_VAR 0 1
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: LD_INT 3
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: IN
47236: NOT
47237: PUSH
47238: LD_VAR 0 6
47242: PUSH
47243: LD_INT 2
47245: EQUAL
47246: AND
47247: OR
47248: IFFALSE 47258
// mode = 0 ;
47250: LD_ADDR_VAR 0 6
47254: PUSH
47255: LD_INT 0
47257: ST_TO_ADDR
// case mode of 0 :
47258: LD_VAR 0 6
47262: PUSH
47263: LD_INT 0
47265: DOUBLE
47266: EQUAL
47267: IFTRUE 47271
47269: GO 58724
47271: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47272: LD_ADDR_VAR 0 11
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 0
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 3
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: LD_INT 3
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: LD_INT 2
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47465: LD_ADDR_VAR 0 12
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 3
47633: NEG
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: LIST
47659: LIST
47660: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47661: LD_ADDR_VAR 0 13
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 0
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: LD_INT 0
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 0
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: NEG
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 1
47742: NEG
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 2
47784: NEG
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: NEG
47797: PUSH
47798: LD_INT 2
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 2
47808: NEG
47809: PUSH
47810: LD_INT 3
47812: NEG
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 3
47820: NEG
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 3
47832: NEG
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47860: LD_ADDR_VAR 0 14
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 1
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 3
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48056: LD_ADDR_VAR 0 15
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 0
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 3
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 3
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48249: LD_ADDR_VAR 0 16
48253: PUSH
48254: LD_INT 0
48256: PUSH
48257: LD_INT 0
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 0
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: LD_INT 1
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 0
48297: PUSH
48298: LD_INT 1
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 0
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 2
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 1
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 2
48372: NEG
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 2
48384: NEG
48385: PUSH
48386: LD_INT 2
48388: NEG
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: LD_INT 2
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: LD_INT 3
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 3
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48442: LD_ADDR_VAR 0 17
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: LD_INT 1
48462: NEG
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: NEG
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 1
48523: NEG
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 2
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 2
48629: NEG
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48672: LD_ADDR_VAR 0 18
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 0
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: NEG
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: LD_INT 2
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 2
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 2
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: NEG
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 2
48871: NEG
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48902: LD_ADDR_VAR 0 19
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 1
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 1
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: NEG
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 0
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: LD_INT 2
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 2
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 2
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: NEG
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49132: LD_ADDR_VAR 0 20
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 0
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 0
49225: PUSH
49226: LD_INT 2
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: LD_INT 2
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49362: LD_ADDR_VAR 0 21
49366: PUSH
49367: LD_INT 0
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 1
49431: NEG
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: LD_INT 2
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49592: LD_ADDR_VAR 0 22
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 1
49620: PUSH
49621: LD_INT 0
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 0
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 0
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 2
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49822: LD_ADDR_VAR 0 23
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 0
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: NEG
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 2
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: LD_INT 0
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 2
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 2
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 0
49977: PUSH
49978: LD_INT 2
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: LD_INT 3
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50102: LD_ADDR_VAR 0 24
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 2
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 1
50209: NEG
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 2
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_INT 1
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 2
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 2
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 2
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 2
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 1
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50378: LD_ADDR_VAR 0 25
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 2
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 1
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 3
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 3
50599: PUSH
50600: LD_INT 2
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: LD_INT 3
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: LD_INT 3
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50652: LD_ADDR_VAR 0 26
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: LD_INT 1
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 2
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 0
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 2
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 2
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: NEG
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: LD_INT 2
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50928: LD_ADDR_VAR 0 27
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 0
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 0
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 2
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 2
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 2
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 2
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: LD_INT 1
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: LD_INT 2
51131: NEG
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 3
51161: NEG
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: PUSH
51171: LD_INT 3
51173: NEG
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51208: LD_ADDR_VAR 0 28
51212: PUSH
51213: LD_INT 0
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 2
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 2
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 1
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 2
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: NEG
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51490: LD_ADDR_VAR 0 29
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: LD_INT 2
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: LD_INT 0
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: NEG
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 2
51668: NEG
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: NEG
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 2
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 3
51734: NEG
51735: PUSH
51736: LD_INT 2
51738: NEG
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51769: LD_ADDR_VAR 0 30
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 1
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 1
51850: NEG
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 2
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 2
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 2
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 2
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 3
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: LD_INT 3
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 3
52012: NEG
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52047: LD_ADDR_VAR 0 31
52051: PUSH
52052: LD_INT 0
52054: PUSH
52055: LD_INT 0
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 1
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: LD_INT 1
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 1
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 2
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 2
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: LD_INT 2
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 3
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: LD_INT 2
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52325: LD_ADDR_VAR 0 32
52329: PUSH
52330: LD_INT 0
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 0
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 0
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 1
52394: NEG
52395: PUSH
52396: LD_INT 1
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 0
52418: PUSH
52419: LD_INT 2
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: LD_INT 1
52432: NEG
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 2
52440: PUSH
52441: LD_INT 1
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: LD_INT 2
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 1
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: LD_INT 3
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 2
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 3
52537: PUSH
52538: LD_INT 2
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: LD_INT 3
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: NEG
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52603: LD_ADDR_VAR 0 33
52607: PUSH
52608: LD_INT 0
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 1
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 2
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: LD_INT 1
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 1
52727: PUSH
52728: LD_INT 2
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 2
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 1
52747: NEG
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 2
52781: NEG
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 2
52793: NEG
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 3
52847: NEG
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52882: LD_ADDR_VAR 0 34
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 2
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 1
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 2
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 3
53096: PUSH
53097: LD_INT 2
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 2
53106: PUSH
53107: LD_INT 3
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: NEG
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53162: LD_ADDR_VAR 0 35
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 1
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: LD_INT 1
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 2
53253: NEG
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53274: LD_ADDR_VAR 0 36
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53386: LD_ADDR_VAR 0 37
53390: PUSH
53391: LD_INT 0
53393: PUSH
53394: LD_INT 0
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 1
53455: NEG
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53498: LD_ADDR_VAR 0 38
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53610: LD_ADDR_VAR 0 39
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 1
53679: NEG
53680: PUSH
53681: LD_INT 1
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 2
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53722: LD_ADDR_VAR 0 40
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 0
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 1
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 1
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53834: LD_ADDR_VAR 0 41
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: NEG
53904: PUSH
53905: LD_INT 1
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 1
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: LD_INT 2
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 2
54024: NEG
54025: PUSH
54026: LD_INT 3
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 3
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 2
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: NEG
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 3
54131: NEG
54132: PUSH
54133: LD_INT 2
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 3
54143: NEG
54144: PUSH
54145: LD_INT 3
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54184: LD_ADDR_VAR 0 42
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: LD_INT 0
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: PUSH
54223: LD_INT 1
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 1
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 0
54277: PUSH
54278: LD_INT 2
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: LD_INT 1
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 2
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 0
54398: PUSH
54399: LD_INT 3
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: LD_INT 3
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 3
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: LD_INT 3
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54534: LD_ADDR_VAR 0 43
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 1
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: LD_INT 1
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 0
54627: PUSH
54628: LD_INT 2
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: LD_INT 1
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: NEG
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 3
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 3
54768: PUSH
54769: LD_INT 0
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: LD_INT 3
54778: PUSH
54779: LD_INT 1
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: NEG
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 3
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54882: LD_ADDR_VAR 0 44
54886: PUSH
54887: LD_INT 0
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: LD_INT 1
54902: NEG
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 2
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 2
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: NEG
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: NEG
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 3
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 1
55087: NEG
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 3
55115: PUSH
55116: LD_INT 2
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 3
55125: PUSH
55126: LD_INT 3
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: LD_INT 3
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: NEG
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 3
55179: NEG
55180: PUSH
55181: LD_INT 2
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: LD_INT 3
55195: NEG
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55232: LD_ADDR_VAR 0 45
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: LD_INT 1
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: LD_INT 1
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 2
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 2
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 2
55398: NEG
55399: PUSH
55400: LD_INT 1
55402: NEG
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: LD_INT 2
55414: NEG
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 2
55422: NEG
55423: PUSH
55424: LD_INT 3
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: LD_INT 3
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 3
55468: PUSH
55469: LD_INT 2
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 3
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 3
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 3
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 0
55508: PUSH
55509: LD_INT 3
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 3
55541: NEG
55542: PUSH
55543: LD_INT 3
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55582: LD_ADDR_VAR 0 46
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 1
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: NEG
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 2
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 2
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 3
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 3
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: LD_INT 2
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 3
55889: NEG
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55930: LD_ADDR_VAR 0 47
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 0
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 0
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 1
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 1
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56081: LD_ADDR_VAR 0 48
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: PUSH
56120: LD_INT 1
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 2
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: LD_INT 1
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56228: LD_ADDR_VAR 0 49
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 2
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56372: LD_ADDR_VAR 0 50
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: NEG
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 1
56493: NEG
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56516: LD_ADDR_VAR 0 51
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 0
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 1
56536: NEG
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: LD_INT 1
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56663: LD_ADDR_VAR 0 52
56667: PUSH
56668: LD_INT 0
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: LD_INT 0
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56814: LD_ADDR_VAR 0 53
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 1
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 1
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: LD_INT 2
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 2
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 2
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 2
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57044: LD_ADDR_VAR 0 54
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57274: LD_ADDR_VAR 0 55
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 0
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 0
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 1
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 2
57409: PUSH
57410: LD_INT 2
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 2
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 2
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57504: LD_ADDR_VAR 0 56
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: LD_INT 0
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 1
57524: NEG
57525: PUSH
57526: EMPTY
57527: LIST
57528: LIST
57529: PUSH
57530: LD_INT 1
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: NEG
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: NEG
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 0
57597: PUSH
57598: LD_INT 2
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57734: LD_ADDR_VAR 0 57
57738: PUSH
57739: LD_INT 0
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 0
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: LD_INT 0
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 1
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 0
57827: PUSH
57828: LD_INT 2
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 2
57859: PUSH
57860: LD_INT 1
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 2
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 1
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 0
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 2
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57964: LD_ADDR_VAR 0 58
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 0
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: LD_INT 1
57984: NEG
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 0
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 2
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: LD_INT 1
58155: NEG
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58194: LD_ADDR_VAR 0 59
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 1
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 1
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58282: LD_ADDR_VAR 0 60
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 1
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 1
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: LIST
58368: LIST
58369: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58370: LD_ADDR_VAR 0 61
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: LD_INT 1
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: LD_INT 1
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58458: LD_ADDR_VAR 0 62
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58546: LD_ADDR_VAR 0 63
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 0
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 0
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 1
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 0
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58634: LD_ADDR_VAR 0 64
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: PUSH
58673: LD_INT 1
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 0
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 1
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
// end ; 1 :
58722: GO 64619
58724: LD_INT 1
58726: DOUBLE
58727: EQUAL
58728: IFTRUE 58732
58730: GO 61355
58732: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58733: LD_ADDR_VAR 0 11
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: LD_INT 2
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58777: LD_ADDR_VAR 0 12
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: LD_INT 1
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 3
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: PUSH
58806: LD_INT 1
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58818: LD_ADDR_VAR 0 13
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 3
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 2
58845: PUSH
58846: LD_INT 3
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58858: LD_ADDR_VAR 0 14
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 3
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: LD_INT 2
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58899: LD_ADDR_VAR 0 15
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: NEG
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 3
58928: NEG
58929: PUSH
58930: LD_INT 1
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: LIST
58942: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58943: LD_ADDR_VAR 0 16
58947: PUSH
58948: LD_INT 2
58950: NEG
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 3
58962: NEG
58963: PUSH
58964: LD_INT 2
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 3
58974: NEG
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58989: LD_ADDR_VAR 0 17
58993: PUSH
58994: LD_INT 1
58996: NEG
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: LD_INT 3
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: LIST
59032: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59033: LD_ADDR_VAR 0 18
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 3
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: LD_INT 1
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: LIST
59073: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59074: LD_ADDR_VAR 0 19
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 2
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 3
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 2
59101: PUSH
59102: LD_INT 3
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: LIST
59113: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59114: LD_ADDR_VAR 0 20
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: LD_INT 3
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: LIST
59154: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59155: LD_ADDR_VAR 0 21
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 3
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59199: LD_ADDR_VAR 0 22
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: LD_INT 3
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 3
59218: NEG
59219: PUSH
59220: LD_INT 2
59222: NEG
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: LD_INT 3
59234: NEG
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59245: LD_ADDR_VAR 0 23
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: LD_INT 3
59255: NEG
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: LD_INT 4
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: PUSH
59276: LD_INT 3
59278: NEG
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59289: LD_ADDR_VAR 0 24
59293: PUSH
59294: LD_INT 3
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: LD_INT 1
59309: NEG
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 4
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59330: LD_ADDR_VAR 0 25
59334: PUSH
59335: LD_INT 3
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 4
59347: PUSH
59348: LD_INT 3
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 3
59357: PUSH
59358: LD_INT 4
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: LIST
59369: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59370: LD_ADDR_VAR 0 26
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 4
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59411: LD_ADDR_VAR 0 27
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 4
59440: NEG
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59455: LD_ADDR_VAR 0 28
59459: PUSH
59460: LD_INT 3
59462: NEG
59463: PUSH
59464: LD_INT 3
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: LD_INT 4
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 4
59486: NEG
59487: PUSH
59488: LD_INT 3
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59501: LD_ADDR_VAR 0 29
59505: PUSH
59506: LD_INT 1
59508: NEG
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 3
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: LD_INT 4
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 4
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 3
59568: NEG
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 5
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: LD_INT 5
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: PUSH
59600: LD_INT 4
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: LD_INT 6
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 6
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 5
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59656: LD_ADDR_VAR 0 30
59660: PUSH
59661: LD_INT 2
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 4
59705: PUSH
59706: LD_INT 0
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 4
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 4
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 5
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 5
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 5
59756: PUSH
59757: LD_INT 1
59759: NEG
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 6
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 6
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59799: LD_ADDR_VAR 0 31
59803: PUSH
59804: LD_INT 3
59806: PUSH
59807: LD_INT 2
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 3
59816: PUSH
59817: LD_INT 3
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: LD_INT 3
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 4
59836: PUSH
59837: LD_INT 3
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 4
59846: PUSH
59847: LD_INT 4
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 3
59856: PUSH
59857: LD_INT 4
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 5
59866: PUSH
59867: LD_INT 4
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 5
59876: PUSH
59877: LD_INT 5
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 4
59886: PUSH
59887: LD_INT 5
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 6
59896: PUSH
59897: LD_INT 5
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 6
59906: PUSH
59907: LD_INT 6
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 5
59916: PUSH
59917: LD_INT 6
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59938: LD_ADDR_VAR 0 32
59942: PUSH
59943: LD_INT 1
59945: PUSH
59946: LD_INT 3
59948: PUSH
59949: EMPTY
59950: LIST
59951: LIST
59952: PUSH
59953: LD_INT 0
59955: PUSH
59956: LD_INT 3
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: NEG
59966: PUSH
59967: LD_INT 2
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 1
59976: PUSH
59977: LD_INT 4
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 3
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 5
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 5
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 4
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: LD_INT 6
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 0
60048: PUSH
60049: LD_INT 6
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 5
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60081: LD_ADDR_VAR 0 33
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 0
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: NEG
60111: PUSH
60112: LD_INT 1
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: LD_INT 1
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 4
60133: NEG
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 4
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 4
60156: NEG
60157: PUSH
60158: LD_INT 1
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 5
60167: NEG
60168: PUSH
60169: LD_INT 0
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 5
60178: NEG
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 5
60190: NEG
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 6
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 6
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60236: LD_ADDR_VAR 0 34
60240: PUSH
60241: LD_INT 2
60243: NEG
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 3
60255: NEG
60256: PUSH
60257: LD_INT 2
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 3
60267: NEG
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 3
60279: NEG
60280: PUSH
60281: LD_INT 4
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 4
60303: NEG
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: LD_INT 5
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 5
60339: NEG
60340: PUSH
60341: LD_INT 5
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 5
60351: NEG
60352: PUSH
60353: LD_INT 6
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 6
60363: NEG
60364: PUSH
60365: LD_INT 5
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 6
60375: NEG
60376: PUSH
60377: LD_INT 6
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60399: LD_ADDR_VAR 0 41
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 1
60429: PUSH
60430: LD_INT 2
60432: NEG
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: LIST
60442: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60443: LD_ADDR_VAR 0 42
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: LD_INT 1
60463: NEG
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 3
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: LIST
60483: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60484: LD_ADDR_VAR 0 43
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: PUSH
60512: LD_INT 3
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: LIST
60523: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60524: LD_ADDR_VAR 0 44
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 2
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: LD_INT 3
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: LD_INT 2
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: LIST
60564: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60565: LD_ADDR_VAR 0 45
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 2
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 3
60594: NEG
60595: PUSH
60596: LD_INT 1
60598: NEG
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: LIST
60608: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60609: LD_ADDR_VAR 0 46
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: LD_INT 3
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: LD_INT 2
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60655: LD_ADDR_VAR 0 47
60659: PUSH
60660: LD_INT 2
60662: NEG
60663: PUSH
60664: LD_INT 3
60666: NEG
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 3
60678: NEG
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60688: LD_ADDR_VAR 0 48
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: LD_INT 2
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60719: LD_ADDR_VAR 0 49
60723: PUSH
60724: LD_INT 3
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60748: LD_ADDR_VAR 0 50
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: LD_INT 3
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 1
60765: PUSH
60766: LD_INT 3
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60777: LD_ADDR_VAR 0 51
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 1
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60808: LD_ADDR_VAR 0 52
60812: PUSH
60813: LD_INT 3
60815: NEG
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 3
60827: NEG
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60841: LD_ADDR_VAR 0 53
60845: PUSH
60846: LD_INT 1
60848: NEG
60849: PUSH
60850: LD_INT 3
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 3
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: LD_INT 2
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60885: LD_ADDR_VAR 0 54
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: LIST
60925: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60926: LD_ADDR_VAR 0 55
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: LD_INT 2
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60966: LD_ADDR_VAR 0 56
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: LD_INT 3
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: LD_INT 2
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: LIST
61006: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61007: LD_ADDR_VAR 0 57
61011: PUSH
61012: LD_INT 2
61014: NEG
61015: PUSH
61016: LD_INT 1
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 3
61036: NEG
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: LIST
61050: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61051: LD_ADDR_VAR 0 58
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: LD_INT 3
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: LD_INT 2
61074: NEG
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 3
61082: NEG
61083: PUSH
61084: LD_INT 3
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: LIST
61096: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61097: LD_ADDR_VAR 0 59
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 2
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: PUSH
61128: LD_INT 1
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: LIST
61140: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61141: LD_ADDR_VAR 0 60
61145: PUSH
61146: LD_INT 1
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: LD_INT 0
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61182: LD_ADDR_VAR 0 61
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61222: LD_ADDR_VAR 0 62
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 2
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 2
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 1
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: LIST
61262: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61263: LD_ADDR_VAR 0 63
61267: PUSH
61268: LD_INT 1
61270: NEG
61271: PUSH
61272: LD_INT 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: LD_INT 0
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: LIST
61306: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61307: LD_ADDR_VAR 0 64
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: LD_INT 1
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: LD_INT 2
61342: NEG
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: ST_TO_ADDR
// end ; 2 :
61353: GO 64619
61355: LD_INT 2
61357: DOUBLE
61358: EQUAL
61359: IFTRUE 61363
61361: GO 64618
61363: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61364: LD_ADDR_VAR 0 29
61368: PUSH
61369: LD_INT 4
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 4
61381: PUSH
61382: LD_INT 1
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 5
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 5
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 3
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 3
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 5
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: LD_INT 3
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 2
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 4
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 4
61494: PUSH
61495: LD_INT 4
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 2
61514: PUSH
61515: LD_INT 3
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 2
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 4
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 4
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: LD_INT 4
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 3
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: PUSH
61575: LD_INT 4
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: PUSH
61582: LD_INT 1
61584: PUSH
61585: LD_INT 5
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: LD_INT 5
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: NEG
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 2
61626: PUSH
61627: LD_INT 5
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 2
61636: NEG
61637: PUSH
61638: LD_INT 3
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: NEG
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 3
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: LD_INT 0
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 2
61681: NEG
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 4
61703: NEG
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 4
61714: NEG
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 4
61726: NEG
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 2
61738: NEG
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 4
61749: NEG
61750: PUSH
61751: LD_INT 4
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 4
61761: NEG
61762: PUSH
61763: LD_INT 5
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: LD_INT 4
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 3
61785: NEG
61786: PUSH
61787: LD_INT 3
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 4
61797: NEG
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 5
61809: NEG
61810: PUSH
61811: LD_INT 4
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 5
61821: NEG
61822: PUSH
61823: LD_INT 5
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: LD_INT 5
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 5
61845: NEG
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61902: LD_ADDR_VAR 0 30
61906: PUSH
61907: LD_INT 4
61909: PUSH
61910: LD_INT 4
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 5
61929: PUSH
61930: LD_INT 4
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 5
61939: PUSH
61940: LD_INT 5
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 4
61949: PUSH
61950: LD_INT 5
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: PUSH
61960: LD_INT 4
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 3
61969: PUSH
61970: LD_INT 3
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 5
61979: PUSH
61980: LD_INT 3
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: PUSH
61990: LD_INT 5
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 3
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 0
62009: PUSH
62010: LD_INT 2
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 3
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 1
62029: PUSH
62030: LD_INT 4
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: LD_INT 4
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 1
62060: NEG
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 2
62071: PUSH
62072: LD_INT 4
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 4
62092: NEG
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 4
62103: NEG
62104: PUSH
62105: LD_INT 1
62107: NEG
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 3
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 5
62148: NEG
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 5
62159: NEG
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 5
62171: NEG
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 3
62183: NEG
62184: PUSH
62185: LD_INT 2
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 3
62194: NEG
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 3
62206: NEG
62207: PUSH
62208: LD_INT 4
62210: NEG
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 2
62218: NEG
62219: PUSH
62220: LD_INT 3
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: NEG
62231: PUSH
62232: LD_INT 2
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 3
62242: NEG
62243: PUSH
62244: LD_INT 2
62246: NEG
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 4
62254: NEG
62255: PUSH
62256: LD_INT 3
62258: NEG
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 4
62266: NEG
62267: PUSH
62268: LD_INT 4
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 2
62278: NEG
62279: PUSH
62280: LD_INT 4
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 4
62290: NEG
62291: PUSH
62292: LD_INT 2
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 4
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 0
62313: PUSH
62314: LD_INT 5
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 4
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 1
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: LD_INT 3
62349: NEG
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 1
62357: NEG
62358: PUSH
62359: LD_INT 4
62361: NEG
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: LD_INT 5
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: LD_INT 3
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: LD_INT 5
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62449: LD_ADDR_VAR 0 31
62453: PUSH
62454: LD_INT 0
62456: PUSH
62457: LD_INT 4
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 0
62466: PUSH
62467: LD_INT 3
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: PUSH
62477: LD_INT 4
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: LD_INT 5
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 0
62496: PUSH
62497: LD_INT 5
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: LD_INT 4
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 3
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 2
62528: PUSH
62529: LD_INT 5
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PUSH
62540: LD_INT 3
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: LD_INT 0
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 3
62560: NEG
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: LD_INT 1
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 4
62605: NEG
62606: PUSH
62607: LD_INT 0
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 4
62616: NEG
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 4
62628: NEG
62629: PUSH
62630: LD_INT 2
62632: NEG
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 2
62640: NEG
62641: PUSH
62642: LD_INT 2
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 4
62651: NEG
62652: PUSH
62653: LD_INT 4
62655: NEG
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 4
62663: NEG
62664: PUSH
62665: LD_INT 5
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 3
62675: NEG
62676: PUSH
62677: LD_INT 4
62679: NEG
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 3
62687: NEG
62688: PUSH
62689: LD_INT 3
62691: NEG
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 4
62699: NEG
62700: PUSH
62701: LD_INT 3
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 5
62711: NEG
62712: PUSH
62713: LD_INT 4
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 5
62723: NEG
62724: PUSH
62725: LD_INT 5
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: LD_INT 5
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 5
62747: NEG
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 3
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 0
62770: PUSH
62771: LD_INT 4
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: LD_INT 3
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 3
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 4
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 2
62849: NEG
62850: PUSH
62851: LD_INT 4
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 4
62861: PUSH
62862: LD_INT 0
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 4
62871: PUSH
62872: LD_INT 1
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 5
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 5
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 4
62902: PUSH
62903: LD_INT 1
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: PUSH
62910: LD_INT 3
62912: PUSH
62913: LD_INT 0
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: PUSH
62923: LD_INT 1
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: LD_INT 2
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 5
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62999: LD_ADDR_VAR 0 32
63003: PUSH
63004: LD_INT 4
63006: NEG
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 4
63017: NEG
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 3
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 4
63051: NEG
63052: PUSH
63053: LD_INT 1
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 5
63062: NEG
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 5
63073: NEG
63074: PUSH
63075: LD_INT 1
63077: NEG
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 5
63085: NEG
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: NEG
63098: PUSH
63099: LD_INT 2
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 3
63108: NEG
63109: PUSH
63110: LD_INT 3
63112: NEG
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 3
63120: NEG
63121: PUSH
63122: LD_INT 4
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 2
63132: NEG
63133: PUSH
63134: LD_INT 3
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 2
63144: NEG
63145: PUSH
63146: LD_INT 2
63148: NEG
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 3
63156: NEG
63157: PUSH
63158: LD_INT 2
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 4
63168: NEG
63169: PUSH
63170: LD_INT 3
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 4
63180: NEG
63181: PUSH
63182: LD_INT 4
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 2
63192: NEG
63193: PUSH
63194: LD_INT 4
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 4
63204: NEG
63205: PUSH
63206: LD_INT 2
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 4
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 5
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 4
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 3
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 3
63263: NEG
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 4
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 5
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: LD_INT 3
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 2
63306: NEG
63307: PUSH
63308: LD_INT 5
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 3
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 3
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 4
63339: PUSH
63340: LD_INT 0
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 4
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 3
63359: PUSH
63360: LD_INT 1
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 0
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 2
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 4
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 4
63411: PUSH
63412: LD_INT 4
63414: PUSH
63415: EMPTY
63416: LIST
63417: LIST
63418: PUSH
63419: LD_INT 4
63421: PUSH
63422: LD_INT 3
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 5
63431: PUSH
63432: LD_INT 4
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 5
63441: PUSH
63442: LD_INT 5
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 4
63451: PUSH
63452: LD_INT 5
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 3
63461: PUSH
63462: LD_INT 4
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 3
63471: PUSH
63472: LD_INT 3
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 5
63481: PUSH
63482: LD_INT 3
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 3
63491: PUSH
63492: LD_INT 5
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63546: LD_ADDR_VAR 0 33
63550: PUSH
63551: LD_INT 4
63553: NEG
63554: PUSH
63555: LD_INT 4
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 4
63565: NEG
63566: PUSH
63567: LD_INT 5
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 3
63577: NEG
63578: PUSH
63579: LD_INT 4
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 3
63589: NEG
63590: PUSH
63591: LD_INT 3
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 4
63601: NEG
63602: PUSH
63603: LD_INT 3
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 5
63613: NEG
63614: PUSH
63615: LD_INT 4
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 5
63625: NEG
63626: PUSH
63627: LD_INT 5
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 3
63637: NEG
63638: PUSH
63639: LD_INT 5
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 5
63649: NEG
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 3
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 0
63672: PUSH
63673: LD_INT 4
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 3
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: PUSH
63718: LD_INT 3
63720: NEG
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 1
63728: NEG
63729: PUSH
63730: LD_INT 4
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 2
63743: NEG
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: NEG
63752: PUSH
63753: LD_INT 4
63755: NEG
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 4
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 4
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 5
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 5
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 3
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 3
63835: PUSH
63836: LD_INT 2
63838: NEG
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 5
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: LD_INT 3
63866: PUSH
63867: LD_INT 2
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 4
63876: PUSH
63877: LD_INT 3
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 4
63886: PUSH
63887: LD_INT 4
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 3
63896: PUSH
63897: LD_INT 4
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: LD_INT 3
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: LD_INT 2
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 4
63926: PUSH
63927: LD_INT 2
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: LD_INT 2
63936: PUSH
63937: LD_INT 4
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 0
63946: PUSH
63947: LD_INT 4
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 0
63956: PUSH
63957: LD_INT 3
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 4
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: LD_INT 5
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 5
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 4
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: NEG
64008: PUSH
64009: LD_INT 3
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 2
64018: PUSH
64019: LD_INT 5
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 2
64028: NEG
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: EMPTY
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64084: LD_ADDR_VAR 0 34
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 4
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 0
64102: PUSH
64103: LD_INT 5
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: LD_INT 4
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 3
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 3
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 1
64146: NEG
64147: PUSH
64148: LD_INT 4
64150: NEG
64151: PUSH
64152: EMPTY
64153: LIST
64154: LIST
64155: PUSH
64156: LD_INT 1
64158: NEG
64159: PUSH
64160: LD_INT 5
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: LD_INT 3
64173: NEG
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: LD_INT 5
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 4
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 4
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 3
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 2
64265: PUSH
64266: LD_INT 2
64268: NEG
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 4
64276: PUSH
64277: LD_INT 2
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 4
64286: PUSH
64287: LD_INT 4
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 4
64296: PUSH
64297: LD_INT 3
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 5
64306: PUSH
64307: LD_INT 4
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 5
64316: PUSH
64317: LD_INT 5
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 4
64326: PUSH
64327: LD_INT 5
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 3
64336: PUSH
64337: LD_INT 4
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 3
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: PUSH
64354: LD_INT 5
64356: PUSH
64357: LD_INT 3
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 3
64366: PUSH
64367: LD_INT 5
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 0
64376: PUSH
64377: LD_INT 3
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 2
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 1
64406: PUSH
64407: LD_INT 4
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 0
64416: PUSH
64417: LD_INT 4
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 3
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 2
64448: PUSH
64449: LD_INT 4
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 4
64469: NEG
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 4
64480: NEG
64481: PUSH
64482: LD_INT 1
64484: NEG
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: NEG
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 3
64503: NEG
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 4
64514: NEG
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 5
64525: NEG
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 5
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 5
64548: NEG
64549: PUSH
64550: LD_INT 2
64552: NEG
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 3
64560: NEG
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: ST_TO_ADDR
// end ; end ;
64616: GO 64619
64618: POP
// case btype of b_depot , b_warehouse :
64619: LD_VAR 0 1
64623: PUSH
64624: LD_INT 0
64626: DOUBLE
64627: EQUAL
64628: IFTRUE 64638
64630: LD_INT 1
64632: DOUBLE
64633: EQUAL
64634: IFTRUE 64638
64636: GO 64839
64638: POP
// case nation of nation_american :
64639: LD_VAR 0 5
64643: PUSH
64644: LD_INT 1
64646: DOUBLE
64647: EQUAL
64648: IFTRUE 64652
64650: GO 64708
64652: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64653: LD_ADDR_VAR 0 9
64657: PUSH
64658: LD_VAR 0 11
64662: PUSH
64663: LD_VAR 0 12
64667: PUSH
64668: LD_VAR 0 13
64672: PUSH
64673: LD_VAR 0 14
64677: PUSH
64678: LD_VAR 0 15
64682: PUSH
64683: LD_VAR 0 16
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: PUSH
64696: LD_VAR 0 4
64700: PUSH
64701: LD_INT 1
64703: PLUS
64704: ARRAY
64705: ST_TO_ADDR
64706: GO 64837
64708: LD_INT 2
64710: DOUBLE
64711: EQUAL
64712: IFTRUE 64716
64714: GO 64772
64716: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64717: LD_ADDR_VAR 0 9
64721: PUSH
64722: LD_VAR 0 17
64726: PUSH
64727: LD_VAR 0 18
64731: PUSH
64732: LD_VAR 0 19
64736: PUSH
64737: LD_VAR 0 20
64741: PUSH
64742: LD_VAR 0 21
64746: PUSH
64747: LD_VAR 0 22
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: PUSH
64760: LD_VAR 0 4
64764: PUSH
64765: LD_INT 1
64767: PLUS
64768: ARRAY
64769: ST_TO_ADDR
64770: GO 64837
64772: LD_INT 3
64774: DOUBLE
64775: EQUAL
64776: IFTRUE 64780
64778: GO 64836
64780: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64781: LD_ADDR_VAR 0 9
64785: PUSH
64786: LD_VAR 0 23
64790: PUSH
64791: LD_VAR 0 24
64795: PUSH
64796: LD_VAR 0 25
64800: PUSH
64801: LD_VAR 0 26
64805: PUSH
64806: LD_VAR 0 27
64810: PUSH
64811: LD_VAR 0 28
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: PUSH
64824: LD_VAR 0 4
64828: PUSH
64829: LD_INT 1
64831: PLUS
64832: ARRAY
64833: ST_TO_ADDR
64834: GO 64837
64836: POP
64837: GO 65392
64839: LD_INT 2
64841: DOUBLE
64842: EQUAL
64843: IFTRUE 64853
64845: LD_INT 3
64847: DOUBLE
64848: EQUAL
64849: IFTRUE 64853
64851: GO 64909
64853: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64854: LD_ADDR_VAR 0 9
64858: PUSH
64859: LD_VAR 0 29
64863: PUSH
64864: LD_VAR 0 30
64868: PUSH
64869: LD_VAR 0 31
64873: PUSH
64874: LD_VAR 0 32
64878: PUSH
64879: LD_VAR 0 33
64883: PUSH
64884: LD_VAR 0 34
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: PUSH
64897: LD_VAR 0 4
64901: PUSH
64902: LD_INT 1
64904: PLUS
64905: ARRAY
64906: ST_TO_ADDR
64907: GO 65392
64909: LD_INT 16
64911: DOUBLE
64912: EQUAL
64913: IFTRUE 64971
64915: LD_INT 17
64917: DOUBLE
64918: EQUAL
64919: IFTRUE 64971
64921: LD_INT 18
64923: DOUBLE
64924: EQUAL
64925: IFTRUE 64971
64927: LD_INT 19
64929: DOUBLE
64930: EQUAL
64931: IFTRUE 64971
64933: LD_INT 22
64935: DOUBLE
64936: EQUAL
64937: IFTRUE 64971
64939: LD_INT 20
64941: DOUBLE
64942: EQUAL
64943: IFTRUE 64971
64945: LD_INT 21
64947: DOUBLE
64948: EQUAL
64949: IFTRUE 64971
64951: LD_INT 23
64953: DOUBLE
64954: EQUAL
64955: IFTRUE 64971
64957: LD_INT 24
64959: DOUBLE
64960: EQUAL
64961: IFTRUE 64971
64963: LD_INT 25
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 64971
64969: GO 65027
64971: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64972: LD_ADDR_VAR 0 9
64976: PUSH
64977: LD_VAR 0 35
64981: PUSH
64982: LD_VAR 0 36
64986: PUSH
64987: LD_VAR 0 37
64991: PUSH
64992: LD_VAR 0 38
64996: PUSH
64997: LD_VAR 0 39
65001: PUSH
65002: LD_VAR 0 40
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: PUSH
65015: LD_VAR 0 4
65019: PUSH
65020: LD_INT 1
65022: PLUS
65023: ARRAY
65024: ST_TO_ADDR
65025: GO 65392
65027: LD_INT 6
65029: DOUBLE
65030: EQUAL
65031: IFTRUE 65083
65033: LD_INT 7
65035: DOUBLE
65036: EQUAL
65037: IFTRUE 65083
65039: LD_INT 8
65041: DOUBLE
65042: EQUAL
65043: IFTRUE 65083
65045: LD_INT 13
65047: DOUBLE
65048: EQUAL
65049: IFTRUE 65083
65051: LD_INT 12
65053: DOUBLE
65054: EQUAL
65055: IFTRUE 65083
65057: LD_INT 15
65059: DOUBLE
65060: EQUAL
65061: IFTRUE 65083
65063: LD_INT 11
65065: DOUBLE
65066: EQUAL
65067: IFTRUE 65083
65069: LD_INT 14
65071: DOUBLE
65072: EQUAL
65073: IFTRUE 65083
65075: LD_INT 10
65077: DOUBLE
65078: EQUAL
65079: IFTRUE 65083
65081: GO 65139
65083: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65084: LD_ADDR_VAR 0 9
65088: PUSH
65089: LD_VAR 0 41
65093: PUSH
65094: LD_VAR 0 42
65098: PUSH
65099: LD_VAR 0 43
65103: PUSH
65104: LD_VAR 0 44
65108: PUSH
65109: LD_VAR 0 45
65113: PUSH
65114: LD_VAR 0 46
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: PUSH
65127: LD_VAR 0 4
65131: PUSH
65132: LD_INT 1
65134: PLUS
65135: ARRAY
65136: ST_TO_ADDR
65137: GO 65392
65139: LD_INT 36
65141: DOUBLE
65142: EQUAL
65143: IFTRUE 65147
65145: GO 65203
65147: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65148: LD_ADDR_VAR 0 9
65152: PUSH
65153: LD_VAR 0 47
65157: PUSH
65158: LD_VAR 0 48
65162: PUSH
65163: LD_VAR 0 49
65167: PUSH
65168: LD_VAR 0 50
65172: PUSH
65173: LD_VAR 0 51
65177: PUSH
65178: LD_VAR 0 52
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: PUSH
65191: LD_VAR 0 4
65195: PUSH
65196: LD_INT 1
65198: PLUS
65199: ARRAY
65200: ST_TO_ADDR
65201: GO 65392
65203: LD_INT 4
65205: DOUBLE
65206: EQUAL
65207: IFTRUE 65229
65209: LD_INT 5
65211: DOUBLE
65212: EQUAL
65213: IFTRUE 65229
65215: LD_INT 34
65217: DOUBLE
65218: EQUAL
65219: IFTRUE 65229
65221: LD_INT 37
65223: DOUBLE
65224: EQUAL
65225: IFTRUE 65229
65227: GO 65285
65229: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65230: LD_ADDR_VAR 0 9
65234: PUSH
65235: LD_VAR 0 53
65239: PUSH
65240: LD_VAR 0 54
65244: PUSH
65245: LD_VAR 0 55
65249: PUSH
65250: LD_VAR 0 56
65254: PUSH
65255: LD_VAR 0 57
65259: PUSH
65260: LD_VAR 0 58
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: PUSH
65273: LD_VAR 0 4
65277: PUSH
65278: LD_INT 1
65280: PLUS
65281: ARRAY
65282: ST_TO_ADDR
65283: GO 65392
65285: LD_INT 31
65287: DOUBLE
65288: EQUAL
65289: IFTRUE 65335
65291: LD_INT 32
65293: DOUBLE
65294: EQUAL
65295: IFTRUE 65335
65297: LD_INT 33
65299: DOUBLE
65300: EQUAL
65301: IFTRUE 65335
65303: LD_INT 27
65305: DOUBLE
65306: EQUAL
65307: IFTRUE 65335
65309: LD_INT 26
65311: DOUBLE
65312: EQUAL
65313: IFTRUE 65335
65315: LD_INT 28
65317: DOUBLE
65318: EQUAL
65319: IFTRUE 65335
65321: LD_INT 29
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65335
65327: LD_INT 30
65329: DOUBLE
65330: EQUAL
65331: IFTRUE 65335
65333: GO 65391
65335: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65336: LD_ADDR_VAR 0 9
65340: PUSH
65341: LD_VAR 0 59
65345: PUSH
65346: LD_VAR 0 60
65350: PUSH
65351: LD_VAR 0 61
65355: PUSH
65356: LD_VAR 0 62
65360: PUSH
65361: LD_VAR 0 63
65365: PUSH
65366: LD_VAR 0 64
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: PUSH
65379: LD_VAR 0 4
65383: PUSH
65384: LD_INT 1
65386: PLUS
65387: ARRAY
65388: ST_TO_ADDR
65389: GO 65392
65391: POP
// temp_list2 = [ ] ;
65392: LD_ADDR_VAR 0 10
65396: PUSH
65397: EMPTY
65398: ST_TO_ADDR
// for i in temp_list do
65399: LD_ADDR_VAR 0 8
65403: PUSH
65404: LD_VAR 0 9
65408: PUSH
65409: FOR_IN
65410: IFFALSE 65462
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65412: LD_ADDR_VAR 0 10
65416: PUSH
65417: LD_VAR 0 10
65421: PUSH
65422: LD_VAR 0 8
65426: PUSH
65427: LD_INT 1
65429: ARRAY
65430: PUSH
65431: LD_VAR 0 2
65435: PLUS
65436: PUSH
65437: LD_VAR 0 8
65441: PUSH
65442: LD_INT 2
65444: ARRAY
65445: PUSH
65446: LD_VAR 0 3
65450: PLUS
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: EMPTY
65457: LIST
65458: ADD
65459: ST_TO_ADDR
65460: GO 65409
65462: POP
65463: POP
// result = temp_list2 ;
65464: LD_ADDR_VAR 0 7
65468: PUSH
65469: LD_VAR 0 10
65473: ST_TO_ADDR
// end ;
65474: LD_VAR 0 7
65478: RET
// export function EnemyInRange ( unit , dist ) ; begin
65479: LD_INT 0
65481: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65482: LD_ADDR_VAR 0 3
65486: PUSH
65487: LD_VAR 0 1
65491: PPUSH
65492: CALL_OW 255
65496: PPUSH
65497: LD_VAR 0 1
65501: PPUSH
65502: CALL_OW 250
65506: PPUSH
65507: LD_VAR 0 1
65511: PPUSH
65512: CALL_OW 251
65516: PPUSH
65517: LD_VAR 0 2
65521: PPUSH
65522: CALL 38881 0 4
65526: PUSH
65527: LD_INT 4
65529: ARRAY
65530: ST_TO_ADDR
// end ;
65531: LD_VAR 0 3
65535: RET
// export function PlayerSeeMe ( unit ) ; begin
65536: LD_INT 0
65538: PPUSH
// result := See ( your_side , unit ) ;
65539: LD_ADDR_VAR 0 2
65543: PUSH
65544: LD_OWVAR 2
65548: PPUSH
65549: LD_VAR 0 1
65553: PPUSH
65554: CALL_OW 292
65558: ST_TO_ADDR
// end ;
65559: LD_VAR 0 2
65563: RET
// export function ReverseDir ( unit ) ; begin
65564: LD_INT 0
65566: PPUSH
// if not unit then
65567: LD_VAR 0 1
65571: NOT
65572: IFFALSE 65576
// exit ;
65574: GO 65599
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65576: LD_ADDR_VAR 0 2
65580: PUSH
65581: LD_VAR 0 1
65585: PPUSH
65586: CALL_OW 254
65590: PUSH
65591: LD_INT 3
65593: PLUS
65594: PUSH
65595: LD_INT 6
65597: MOD
65598: ST_TO_ADDR
// end ;
65599: LD_VAR 0 2
65603: RET
// export function ReverseArray ( array ) ; var i ; begin
65604: LD_INT 0
65606: PPUSH
65607: PPUSH
// if not array then
65608: LD_VAR 0 1
65612: NOT
65613: IFFALSE 65617
// exit ;
65615: GO 65672
// result := [ ] ;
65617: LD_ADDR_VAR 0 2
65621: PUSH
65622: EMPTY
65623: ST_TO_ADDR
// for i := array downto 1 do
65624: LD_ADDR_VAR 0 3
65628: PUSH
65629: DOUBLE
65630: LD_VAR 0 1
65634: INC
65635: ST_TO_ADDR
65636: LD_INT 1
65638: PUSH
65639: FOR_DOWNTO
65640: IFFALSE 65670
// result := Join ( result , array [ i ] ) ;
65642: LD_ADDR_VAR 0 2
65646: PUSH
65647: LD_VAR 0 2
65651: PPUSH
65652: LD_VAR 0 1
65656: PUSH
65657: LD_VAR 0 3
65661: ARRAY
65662: PPUSH
65663: CALL 70316 0 2
65667: ST_TO_ADDR
65668: GO 65639
65670: POP
65671: POP
// end ;
65672: LD_VAR 0 2
65676: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65677: LD_INT 0
65679: PPUSH
65680: PPUSH
65681: PPUSH
65682: PPUSH
65683: PPUSH
65684: PPUSH
// if not unit or not hexes then
65685: LD_VAR 0 1
65689: NOT
65690: PUSH
65691: LD_VAR 0 2
65695: NOT
65696: OR
65697: IFFALSE 65701
// exit ;
65699: GO 65824
// dist := 9999 ;
65701: LD_ADDR_VAR 0 5
65705: PUSH
65706: LD_INT 9999
65708: ST_TO_ADDR
// for i = 1 to hexes do
65709: LD_ADDR_VAR 0 4
65713: PUSH
65714: DOUBLE
65715: LD_INT 1
65717: DEC
65718: ST_TO_ADDR
65719: LD_VAR 0 2
65723: PUSH
65724: FOR_TO
65725: IFFALSE 65812
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65727: LD_ADDR_VAR 0 6
65731: PUSH
65732: LD_VAR 0 1
65736: PPUSH
65737: LD_VAR 0 2
65741: PUSH
65742: LD_VAR 0 4
65746: ARRAY
65747: PUSH
65748: LD_INT 1
65750: ARRAY
65751: PPUSH
65752: LD_VAR 0 2
65756: PUSH
65757: LD_VAR 0 4
65761: ARRAY
65762: PUSH
65763: LD_INT 2
65765: ARRAY
65766: PPUSH
65767: CALL_OW 297
65771: ST_TO_ADDR
// if tdist < dist then
65772: LD_VAR 0 6
65776: PUSH
65777: LD_VAR 0 5
65781: LESS
65782: IFFALSE 65810
// begin hex := hexes [ i ] ;
65784: LD_ADDR_VAR 0 8
65788: PUSH
65789: LD_VAR 0 2
65793: PUSH
65794: LD_VAR 0 4
65798: ARRAY
65799: ST_TO_ADDR
// dist := tdist ;
65800: LD_ADDR_VAR 0 5
65804: PUSH
65805: LD_VAR 0 6
65809: ST_TO_ADDR
// end ; end ;
65810: GO 65724
65812: POP
65813: POP
// result := hex ;
65814: LD_ADDR_VAR 0 3
65818: PUSH
65819: LD_VAR 0 8
65823: ST_TO_ADDR
// end ;
65824: LD_VAR 0 3
65828: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65829: LD_INT 0
65831: PPUSH
65832: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65833: LD_VAR 0 1
65837: NOT
65838: PUSH
65839: LD_VAR 0 1
65843: PUSH
65844: LD_INT 21
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 23
65856: PUSH
65857: LD_INT 2
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PPUSH
65868: CALL_OW 69
65872: IN
65873: NOT
65874: OR
65875: IFFALSE 65879
// exit ;
65877: GO 65926
// for i = 1 to 3 do
65879: LD_ADDR_VAR 0 3
65883: PUSH
65884: DOUBLE
65885: LD_INT 1
65887: DEC
65888: ST_TO_ADDR
65889: LD_INT 3
65891: PUSH
65892: FOR_TO
65893: IFFALSE 65924
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65895: LD_VAR 0 1
65899: PPUSH
65900: CALL_OW 250
65904: PPUSH
65905: LD_VAR 0 1
65909: PPUSH
65910: CALL_OW 251
65914: PPUSH
65915: LD_INT 1
65917: PPUSH
65918: CALL_OW 453
65922: GO 65892
65924: POP
65925: POP
// end ;
65926: LD_VAR 0 2
65930: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65931: LD_INT 0
65933: PPUSH
65934: PPUSH
65935: PPUSH
65936: PPUSH
65937: PPUSH
65938: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65939: LD_VAR 0 1
65943: NOT
65944: PUSH
65945: LD_VAR 0 2
65949: NOT
65950: OR
65951: PUSH
65952: LD_VAR 0 1
65956: PPUSH
65957: CALL_OW 314
65961: OR
65962: IFFALSE 65966
// exit ;
65964: GO 66433
// if GetLives ( i ) < 250 then
65966: LD_VAR 0 4
65970: PPUSH
65971: CALL_OW 256
65975: PUSH
65976: LD_INT 250
65978: LESS
65979: IFFALSE 65992
// begin ComAutodestruct ( i ) ;
65981: LD_VAR 0 4
65985: PPUSH
65986: CALL 65829 0 1
// exit ;
65990: GO 66433
// end ; x := GetX ( enemy_unit ) ;
65992: LD_ADDR_VAR 0 7
65996: PUSH
65997: LD_VAR 0 2
66001: PPUSH
66002: CALL_OW 250
66006: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66007: LD_ADDR_VAR 0 8
66011: PUSH
66012: LD_VAR 0 2
66016: PPUSH
66017: CALL_OW 251
66021: ST_TO_ADDR
// if not x or not y then
66022: LD_VAR 0 7
66026: NOT
66027: PUSH
66028: LD_VAR 0 8
66032: NOT
66033: OR
66034: IFFALSE 66038
// exit ;
66036: GO 66433
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66038: LD_ADDR_VAR 0 6
66042: PUSH
66043: LD_VAR 0 7
66047: PPUSH
66048: LD_INT 0
66050: PPUSH
66051: LD_INT 4
66053: PPUSH
66054: CALL_OW 272
66058: PUSH
66059: LD_VAR 0 8
66063: PPUSH
66064: LD_INT 0
66066: PPUSH
66067: LD_INT 4
66069: PPUSH
66070: CALL_OW 273
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_VAR 0 7
66083: PPUSH
66084: LD_INT 1
66086: PPUSH
66087: LD_INT 4
66089: PPUSH
66090: CALL_OW 272
66094: PUSH
66095: LD_VAR 0 8
66099: PPUSH
66100: LD_INT 1
66102: PPUSH
66103: LD_INT 4
66105: PPUSH
66106: CALL_OW 273
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_VAR 0 7
66119: PPUSH
66120: LD_INT 2
66122: PPUSH
66123: LD_INT 4
66125: PPUSH
66126: CALL_OW 272
66130: PUSH
66131: LD_VAR 0 8
66135: PPUSH
66136: LD_INT 2
66138: PPUSH
66139: LD_INT 4
66141: PPUSH
66142: CALL_OW 273
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_VAR 0 7
66155: PPUSH
66156: LD_INT 3
66158: PPUSH
66159: LD_INT 4
66161: PPUSH
66162: CALL_OW 272
66166: PUSH
66167: LD_VAR 0 8
66171: PPUSH
66172: LD_INT 3
66174: PPUSH
66175: LD_INT 4
66177: PPUSH
66178: CALL_OW 273
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_VAR 0 7
66191: PPUSH
66192: LD_INT 4
66194: PPUSH
66195: LD_INT 4
66197: PPUSH
66198: CALL_OW 272
66202: PUSH
66203: LD_VAR 0 8
66207: PPUSH
66208: LD_INT 4
66210: PPUSH
66211: LD_INT 4
66213: PPUSH
66214: CALL_OW 273
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_VAR 0 7
66227: PPUSH
66228: LD_INT 5
66230: PPUSH
66231: LD_INT 4
66233: PPUSH
66234: CALL_OW 272
66238: PUSH
66239: LD_VAR 0 8
66243: PPUSH
66244: LD_INT 5
66246: PPUSH
66247: LD_INT 4
66249: PPUSH
66250: CALL_OW 273
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: ST_TO_ADDR
// for i = tmp downto 1 do
66267: LD_ADDR_VAR 0 4
66271: PUSH
66272: DOUBLE
66273: LD_VAR 0 6
66277: INC
66278: ST_TO_ADDR
66279: LD_INT 1
66281: PUSH
66282: FOR_DOWNTO
66283: IFFALSE 66384
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66285: LD_VAR 0 6
66289: PUSH
66290: LD_VAR 0 4
66294: ARRAY
66295: PUSH
66296: LD_INT 1
66298: ARRAY
66299: PPUSH
66300: LD_VAR 0 6
66304: PUSH
66305: LD_VAR 0 4
66309: ARRAY
66310: PUSH
66311: LD_INT 2
66313: ARRAY
66314: PPUSH
66315: CALL_OW 488
66319: NOT
66320: PUSH
66321: LD_VAR 0 6
66325: PUSH
66326: LD_VAR 0 4
66330: ARRAY
66331: PUSH
66332: LD_INT 1
66334: ARRAY
66335: PPUSH
66336: LD_VAR 0 6
66340: PUSH
66341: LD_VAR 0 4
66345: ARRAY
66346: PUSH
66347: LD_INT 2
66349: ARRAY
66350: PPUSH
66351: CALL_OW 428
66355: PUSH
66356: LD_INT 0
66358: NONEQUAL
66359: OR
66360: IFFALSE 66382
// tmp := Delete ( tmp , i ) ;
66362: LD_ADDR_VAR 0 6
66366: PUSH
66367: LD_VAR 0 6
66371: PPUSH
66372: LD_VAR 0 4
66376: PPUSH
66377: CALL_OW 3
66381: ST_TO_ADDR
66382: GO 66282
66384: POP
66385: POP
// j := GetClosestHex ( unit , tmp ) ;
66386: LD_ADDR_VAR 0 5
66390: PUSH
66391: LD_VAR 0 1
66395: PPUSH
66396: LD_VAR 0 6
66400: PPUSH
66401: CALL 65677 0 2
66405: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66406: LD_VAR 0 1
66410: PPUSH
66411: LD_VAR 0 5
66415: PUSH
66416: LD_INT 1
66418: ARRAY
66419: PPUSH
66420: LD_VAR 0 5
66424: PUSH
66425: LD_INT 2
66427: ARRAY
66428: PPUSH
66429: CALL_OW 111
// end ;
66433: LD_VAR 0 3
66437: RET
// export function PrepareApemanSoldier ( ) ; begin
66438: LD_INT 0
66440: PPUSH
// uc_nation := 0 ;
66441: LD_ADDR_OWVAR 21
66445: PUSH
66446: LD_INT 0
66448: ST_TO_ADDR
// hc_sex := sex_male ;
66449: LD_ADDR_OWVAR 27
66453: PUSH
66454: LD_INT 1
66456: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66457: LD_ADDR_OWVAR 28
66461: PUSH
66462: LD_INT 15
66464: ST_TO_ADDR
// hc_gallery :=  ;
66465: LD_ADDR_OWVAR 33
66469: PUSH
66470: LD_STRING 
66472: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66473: LD_ADDR_OWVAR 31
66477: PUSH
66478: LD_INT 0
66480: PPUSH
66481: LD_INT 3
66483: PPUSH
66484: CALL_OW 12
66488: PUSH
66489: LD_INT 0
66491: PPUSH
66492: LD_INT 3
66494: PPUSH
66495: CALL_OW 12
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 0
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: LIST
66510: LIST
66511: ST_TO_ADDR
// end ;
66512: LD_VAR 0 1
66516: RET
// export function PrepareApemanEngineer ( ) ; begin
66517: LD_INT 0
66519: PPUSH
// uc_nation := 0 ;
66520: LD_ADDR_OWVAR 21
66524: PUSH
66525: LD_INT 0
66527: ST_TO_ADDR
// hc_sex := sex_male ;
66528: LD_ADDR_OWVAR 27
66532: PUSH
66533: LD_INT 1
66535: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66536: LD_ADDR_OWVAR 28
66540: PUSH
66541: LD_INT 16
66543: ST_TO_ADDR
// hc_gallery :=  ;
66544: LD_ADDR_OWVAR 33
66548: PUSH
66549: LD_STRING 
66551: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66552: LD_ADDR_OWVAR 31
66556: PUSH
66557: LD_INT 0
66559: PPUSH
66560: LD_INT 3
66562: PPUSH
66563: CALL_OW 12
66567: PUSH
66568: LD_INT 0
66570: PPUSH
66571: LD_INT 3
66573: PPUSH
66574: CALL_OW 12
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: ST_TO_ADDR
// end ;
66591: LD_VAR 0 1
66595: RET
// export function PrepareApeman ( agressivity ) ; begin
66596: LD_INT 0
66598: PPUSH
// uc_side := 0 ;
66599: LD_ADDR_OWVAR 20
66603: PUSH
66604: LD_INT 0
66606: ST_TO_ADDR
// uc_nation := 0 ;
66607: LD_ADDR_OWVAR 21
66611: PUSH
66612: LD_INT 0
66614: ST_TO_ADDR
// hc_sex := sex_male ;
66615: LD_ADDR_OWVAR 27
66619: PUSH
66620: LD_INT 1
66622: ST_TO_ADDR
// hc_class := class_apeman ;
66623: LD_ADDR_OWVAR 28
66627: PUSH
66628: LD_INT 12
66630: ST_TO_ADDR
// hc_gallery :=  ;
66631: LD_ADDR_OWVAR 33
66635: PUSH
66636: LD_STRING 
66638: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66639: LD_ADDR_OWVAR 35
66643: PUSH
66644: LD_VAR 0 1
66648: NEG
66649: PPUSH
66650: LD_VAR 0 1
66654: PPUSH
66655: CALL_OW 12
66659: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66660: LD_ADDR_OWVAR 31
66664: PUSH
66665: LD_INT 0
66667: PPUSH
66668: LD_INT 3
66670: PPUSH
66671: CALL_OW 12
66675: PUSH
66676: LD_INT 0
66678: PPUSH
66679: LD_INT 3
66681: PPUSH
66682: CALL_OW 12
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: ST_TO_ADDR
// end ;
66699: LD_VAR 0 2
66703: RET
// export function PrepareTiger ( agressivity ) ; begin
66704: LD_INT 0
66706: PPUSH
// uc_side := 0 ;
66707: LD_ADDR_OWVAR 20
66711: PUSH
66712: LD_INT 0
66714: ST_TO_ADDR
// uc_nation := 0 ;
66715: LD_ADDR_OWVAR 21
66719: PUSH
66720: LD_INT 0
66722: ST_TO_ADDR
// hc_class := class_tiger ;
66723: LD_ADDR_OWVAR 28
66727: PUSH
66728: LD_INT 14
66730: ST_TO_ADDR
// hc_gallery :=  ;
66731: LD_ADDR_OWVAR 33
66735: PUSH
66736: LD_STRING 
66738: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66739: LD_ADDR_OWVAR 35
66743: PUSH
66744: LD_VAR 0 1
66748: NEG
66749: PPUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL_OW 12
66759: ST_TO_ADDR
// end ;
66760: LD_VAR 0 2
66764: RET
// export function PrepareEnchidna ( ) ; begin
66765: LD_INT 0
66767: PPUSH
// uc_side := 0 ;
66768: LD_ADDR_OWVAR 20
66772: PUSH
66773: LD_INT 0
66775: ST_TO_ADDR
// uc_nation := 0 ;
66776: LD_ADDR_OWVAR 21
66780: PUSH
66781: LD_INT 0
66783: ST_TO_ADDR
// hc_class := class_baggie ;
66784: LD_ADDR_OWVAR 28
66788: PUSH
66789: LD_INT 13
66791: ST_TO_ADDR
// hc_gallery :=  ;
66792: LD_ADDR_OWVAR 33
66796: PUSH
66797: LD_STRING 
66799: ST_TO_ADDR
// end ;
66800: LD_VAR 0 1
66804: RET
// export function PrepareFrog ( ) ; begin
66805: LD_INT 0
66807: PPUSH
// uc_side := 0 ;
66808: LD_ADDR_OWVAR 20
66812: PUSH
66813: LD_INT 0
66815: ST_TO_ADDR
// uc_nation := 0 ;
66816: LD_ADDR_OWVAR 21
66820: PUSH
66821: LD_INT 0
66823: ST_TO_ADDR
// hc_class := class_frog ;
66824: LD_ADDR_OWVAR 28
66828: PUSH
66829: LD_INT 19
66831: ST_TO_ADDR
// hc_gallery :=  ;
66832: LD_ADDR_OWVAR 33
66836: PUSH
66837: LD_STRING 
66839: ST_TO_ADDR
// end ;
66840: LD_VAR 0 1
66844: RET
// export function PrepareFish ( ) ; begin
66845: LD_INT 0
66847: PPUSH
// uc_side := 0 ;
66848: LD_ADDR_OWVAR 20
66852: PUSH
66853: LD_INT 0
66855: ST_TO_ADDR
// uc_nation := 0 ;
66856: LD_ADDR_OWVAR 21
66860: PUSH
66861: LD_INT 0
66863: ST_TO_ADDR
// hc_class := class_fish ;
66864: LD_ADDR_OWVAR 28
66868: PUSH
66869: LD_INT 20
66871: ST_TO_ADDR
// hc_gallery :=  ;
66872: LD_ADDR_OWVAR 33
66876: PUSH
66877: LD_STRING 
66879: ST_TO_ADDR
// end ;
66880: LD_VAR 0 1
66884: RET
// export function PrepareBird ( ) ; begin
66885: LD_INT 0
66887: PPUSH
// uc_side := 0 ;
66888: LD_ADDR_OWVAR 20
66892: PUSH
66893: LD_INT 0
66895: ST_TO_ADDR
// uc_nation := 0 ;
66896: LD_ADDR_OWVAR 21
66900: PUSH
66901: LD_INT 0
66903: ST_TO_ADDR
// hc_class := class_phororhacos ;
66904: LD_ADDR_OWVAR 28
66908: PUSH
66909: LD_INT 18
66911: ST_TO_ADDR
// hc_gallery :=  ;
66912: LD_ADDR_OWVAR 33
66916: PUSH
66917: LD_STRING 
66919: ST_TO_ADDR
// end ;
66920: LD_VAR 0 1
66924: RET
// export function PrepareHorse ( ) ; begin
66925: LD_INT 0
66927: PPUSH
// uc_side := 0 ;
66928: LD_ADDR_OWVAR 20
66932: PUSH
66933: LD_INT 0
66935: ST_TO_ADDR
// uc_nation := 0 ;
66936: LD_ADDR_OWVAR 21
66940: PUSH
66941: LD_INT 0
66943: ST_TO_ADDR
// hc_class := class_horse ;
66944: LD_ADDR_OWVAR 28
66948: PUSH
66949: LD_INT 21
66951: ST_TO_ADDR
// hc_gallery :=  ;
66952: LD_ADDR_OWVAR 33
66956: PUSH
66957: LD_STRING 
66959: ST_TO_ADDR
// end ;
66960: LD_VAR 0 1
66964: RET
// export function PrepareMastodont ( ) ; begin
66965: LD_INT 0
66967: PPUSH
// uc_side := 0 ;
66968: LD_ADDR_OWVAR 20
66972: PUSH
66973: LD_INT 0
66975: ST_TO_ADDR
// uc_nation := 0 ;
66976: LD_ADDR_OWVAR 21
66980: PUSH
66981: LD_INT 0
66983: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66984: LD_ADDR_OWVAR 37
66988: PUSH
66989: LD_INT 31
66991: ST_TO_ADDR
// vc_control := control_rider ;
66992: LD_ADDR_OWVAR 38
66996: PUSH
66997: LD_INT 4
66999: ST_TO_ADDR
// end ;
67000: LD_VAR 0 1
67004: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67005: LD_INT 0
67007: PPUSH
67008: PPUSH
67009: PPUSH
// uc_side = 0 ;
67010: LD_ADDR_OWVAR 20
67014: PUSH
67015: LD_INT 0
67017: ST_TO_ADDR
// uc_nation = 0 ;
67018: LD_ADDR_OWVAR 21
67022: PUSH
67023: LD_INT 0
67025: ST_TO_ADDR
// InitHc_All ( ) ;
67026: CALL_OW 584
// InitVc ;
67030: CALL_OW 20
// if mastodonts then
67034: LD_VAR 0 6
67038: IFFALSE 67105
// for i = 1 to mastodonts do
67040: LD_ADDR_VAR 0 11
67044: PUSH
67045: DOUBLE
67046: LD_INT 1
67048: DEC
67049: ST_TO_ADDR
67050: LD_VAR 0 6
67054: PUSH
67055: FOR_TO
67056: IFFALSE 67103
// begin vc_chassis := 31 ;
67058: LD_ADDR_OWVAR 37
67062: PUSH
67063: LD_INT 31
67065: ST_TO_ADDR
// vc_control := control_rider ;
67066: LD_ADDR_OWVAR 38
67070: PUSH
67071: LD_INT 4
67073: ST_TO_ADDR
// animal := CreateVehicle ;
67074: LD_ADDR_VAR 0 12
67078: PUSH
67079: CALL_OW 45
67083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67084: LD_VAR 0 12
67088: PPUSH
67089: LD_VAR 0 8
67093: PPUSH
67094: LD_INT 0
67096: PPUSH
67097: CALL 69233 0 3
// end ;
67101: GO 67055
67103: POP
67104: POP
// if horses then
67105: LD_VAR 0 5
67109: IFFALSE 67176
// for i = 1 to horses do
67111: LD_ADDR_VAR 0 11
67115: PUSH
67116: DOUBLE
67117: LD_INT 1
67119: DEC
67120: ST_TO_ADDR
67121: LD_VAR 0 5
67125: PUSH
67126: FOR_TO
67127: IFFALSE 67174
// begin hc_class := 21 ;
67129: LD_ADDR_OWVAR 28
67133: PUSH
67134: LD_INT 21
67136: ST_TO_ADDR
// hc_gallery :=  ;
67137: LD_ADDR_OWVAR 33
67141: PUSH
67142: LD_STRING 
67144: ST_TO_ADDR
// animal := CreateHuman ;
67145: LD_ADDR_VAR 0 12
67149: PUSH
67150: CALL_OW 44
67154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67155: LD_VAR 0 12
67159: PPUSH
67160: LD_VAR 0 8
67164: PPUSH
67165: LD_INT 0
67167: PPUSH
67168: CALL 69233 0 3
// end ;
67172: GO 67126
67174: POP
67175: POP
// if birds then
67176: LD_VAR 0 1
67180: IFFALSE 67247
// for i = 1 to birds do
67182: LD_ADDR_VAR 0 11
67186: PUSH
67187: DOUBLE
67188: LD_INT 1
67190: DEC
67191: ST_TO_ADDR
67192: LD_VAR 0 1
67196: PUSH
67197: FOR_TO
67198: IFFALSE 67245
// begin hc_class = 18 ;
67200: LD_ADDR_OWVAR 28
67204: PUSH
67205: LD_INT 18
67207: ST_TO_ADDR
// hc_gallery =  ;
67208: LD_ADDR_OWVAR 33
67212: PUSH
67213: LD_STRING 
67215: ST_TO_ADDR
// animal := CreateHuman ;
67216: LD_ADDR_VAR 0 12
67220: PUSH
67221: CALL_OW 44
67225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67226: LD_VAR 0 12
67230: PPUSH
67231: LD_VAR 0 8
67235: PPUSH
67236: LD_INT 0
67238: PPUSH
67239: CALL 69233 0 3
// end ;
67243: GO 67197
67245: POP
67246: POP
// if tigers then
67247: LD_VAR 0 2
67251: IFFALSE 67335
// for i = 1 to tigers do
67253: LD_ADDR_VAR 0 11
67257: PUSH
67258: DOUBLE
67259: LD_INT 1
67261: DEC
67262: ST_TO_ADDR
67263: LD_VAR 0 2
67267: PUSH
67268: FOR_TO
67269: IFFALSE 67333
// begin hc_class = class_tiger ;
67271: LD_ADDR_OWVAR 28
67275: PUSH
67276: LD_INT 14
67278: ST_TO_ADDR
// hc_gallery =  ;
67279: LD_ADDR_OWVAR 33
67283: PUSH
67284: LD_STRING 
67286: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67287: LD_ADDR_OWVAR 35
67291: PUSH
67292: LD_INT 7
67294: NEG
67295: PPUSH
67296: LD_INT 7
67298: PPUSH
67299: CALL_OW 12
67303: ST_TO_ADDR
// animal := CreateHuman ;
67304: LD_ADDR_VAR 0 12
67308: PUSH
67309: CALL_OW 44
67313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67314: LD_VAR 0 12
67318: PPUSH
67319: LD_VAR 0 8
67323: PPUSH
67324: LD_INT 0
67326: PPUSH
67327: CALL 69233 0 3
// end ;
67331: GO 67268
67333: POP
67334: POP
// if apemans then
67335: LD_VAR 0 3
67339: IFFALSE 67462
// for i = 1 to apemans do
67341: LD_ADDR_VAR 0 11
67345: PUSH
67346: DOUBLE
67347: LD_INT 1
67349: DEC
67350: ST_TO_ADDR
67351: LD_VAR 0 3
67355: PUSH
67356: FOR_TO
67357: IFFALSE 67460
// begin hc_class = class_apeman ;
67359: LD_ADDR_OWVAR 28
67363: PUSH
67364: LD_INT 12
67366: ST_TO_ADDR
// hc_gallery =  ;
67367: LD_ADDR_OWVAR 33
67371: PUSH
67372: LD_STRING 
67374: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67375: LD_ADDR_OWVAR 35
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PPUSH
67384: LD_INT 2
67386: PPUSH
67387: CALL_OW 12
67391: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67392: LD_ADDR_OWVAR 31
67396: PUSH
67397: LD_INT 1
67399: PPUSH
67400: LD_INT 3
67402: PPUSH
67403: CALL_OW 12
67407: PUSH
67408: LD_INT 1
67410: PPUSH
67411: LD_INT 3
67413: PPUSH
67414: CALL_OW 12
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: LD_INT 0
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// animal := CreateHuman ;
67431: LD_ADDR_VAR 0 12
67435: PUSH
67436: CALL_OW 44
67440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67441: LD_VAR 0 12
67445: PPUSH
67446: LD_VAR 0 8
67450: PPUSH
67451: LD_INT 0
67453: PPUSH
67454: CALL 69233 0 3
// end ;
67458: GO 67356
67460: POP
67461: POP
// if enchidnas then
67462: LD_VAR 0 4
67466: IFFALSE 67533
// for i = 1 to enchidnas do
67468: LD_ADDR_VAR 0 11
67472: PUSH
67473: DOUBLE
67474: LD_INT 1
67476: DEC
67477: ST_TO_ADDR
67478: LD_VAR 0 4
67482: PUSH
67483: FOR_TO
67484: IFFALSE 67531
// begin hc_class = 13 ;
67486: LD_ADDR_OWVAR 28
67490: PUSH
67491: LD_INT 13
67493: ST_TO_ADDR
// hc_gallery =  ;
67494: LD_ADDR_OWVAR 33
67498: PUSH
67499: LD_STRING 
67501: ST_TO_ADDR
// animal := CreateHuman ;
67502: LD_ADDR_VAR 0 12
67506: PUSH
67507: CALL_OW 44
67511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67512: LD_VAR 0 12
67516: PPUSH
67517: LD_VAR 0 8
67521: PPUSH
67522: LD_INT 0
67524: PPUSH
67525: CALL 69233 0 3
// end ;
67529: GO 67483
67531: POP
67532: POP
// if fishes then
67533: LD_VAR 0 7
67537: IFFALSE 67604
// for i = 1 to fishes do
67539: LD_ADDR_VAR 0 11
67543: PUSH
67544: DOUBLE
67545: LD_INT 1
67547: DEC
67548: ST_TO_ADDR
67549: LD_VAR 0 7
67553: PUSH
67554: FOR_TO
67555: IFFALSE 67602
// begin hc_class = 20 ;
67557: LD_ADDR_OWVAR 28
67561: PUSH
67562: LD_INT 20
67564: ST_TO_ADDR
// hc_gallery =  ;
67565: LD_ADDR_OWVAR 33
67569: PUSH
67570: LD_STRING 
67572: ST_TO_ADDR
// animal := CreateHuman ;
67573: LD_ADDR_VAR 0 12
67577: PUSH
67578: CALL_OW 44
67582: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67583: LD_VAR 0 12
67587: PPUSH
67588: LD_VAR 0 9
67592: PPUSH
67593: LD_INT 0
67595: PPUSH
67596: CALL 69233 0 3
// end ;
67600: GO 67554
67602: POP
67603: POP
// end ;
67604: LD_VAR 0 10
67608: RET
// export function WantHeal ( sci , unit ) ; begin
67609: LD_INT 0
67611: PPUSH
// if GetTaskList ( sci ) > 0 then
67612: LD_VAR 0 1
67616: PPUSH
67617: CALL_OW 437
67621: PUSH
67622: LD_INT 0
67624: GREATER
67625: IFFALSE 67695
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67627: LD_VAR 0 1
67631: PPUSH
67632: CALL_OW 437
67636: PUSH
67637: LD_INT 1
67639: ARRAY
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: PUSH
67645: LD_STRING l
67647: EQUAL
67648: PUSH
67649: LD_VAR 0 1
67653: PPUSH
67654: CALL_OW 437
67658: PUSH
67659: LD_INT 1
67661: ARRAY
67662: PUSH
67663: LD_INT 4
67665: ARRAY
67666: PUSH
67667: LD_VAR 0 2
67671: EQUAL
67672: AND
67673: IFFALSE 67685
// result := true else
67675: LD_ADDR_VAR 0 3
67679: PUSH
67680: LD_INT 1
67682: ST_TO_ADDR
67683: GO 67693
// result := false ;
67685: LD_ADDR_VAR 0 3
67689: PUSH
67690: LD_INT 0
67692: ST_TO_ADDR
// end else
67693: GO 67703
// result := false ;
67695: LD_ADDR_VAR 0 3
67699: PUSH
67700: LD_INT 0
67702: ST_TO_ADDR
// end ;
67703: LD_VAR 0 3
67707: RET
// export function HealTarget ( sci ) ; begin
67708: LD_INT 0
67710: PPUSH
// if not sci then
67711: LD_VAR 0 1
67715: NOT
67716: IFFALSE 67720
// exit ;
67718: GO 67785
// result := 0 ;
67720: LD_ADDR_VAR 0 2
67724: PUSH
67725: LD_INT 0
67727: ST_TO_ADDR
// if GetTaskList ( sci ) then
67728: LD_VAR 0 1
67732: PPUSH
67733: CALL_OW 437
67737: IFFALSE 67785
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67739: LD_VAR 0 1
67743: PPUSH
67744: CALL_OW 437
67748: PUSH
67749: LD_INT 1
67751: ARRAY
67752: PUSH
67753: LD_INT 1
67755: ARRAY
67756: PUSH
67757: LD_STRING l
67759: EQUAL
67760: IFFALSE 67785
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67762: LD_ADDR_VAR 0 2
67766: PUSH
67767: LD_VAR 0 1
67771: PPUSH
67772: CALL_OW 437
67776: PUSH
67777: LD_INT 1
67779: ARRAY
67780: PUSH
67781: LD_INT 4
67783: ARRAY
67784: ST_TO_ADDR
// end ;
67785: LD_VAR 0 2
67789: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67790: LD_INT 0
67792: PPUSH
67793: PPUSH
67794: PPUSH
67795: PPUSH
// if not base_units then
67796: LD_VAR 0 1
67800: NOT
67801: IFFALSE 67805
// exit ;
67803: GO 67892
// result := false ;
67805: LD_ADDR_VAR 0 2
67809: PUSH
67810: LD_INT 0
67812: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67813: LD_ADDR_VAR 0 5
67817: PUSH
67818: LD_VAR 0 1
67822: PPUSH
67823: LD_INT 21
67825: PUSH
67826: LD_INT 3
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PPUSH
67833: CALL_OW 72
67837: ST_TO_ADDR
// if not tmp then
67838: LD_VAR 0 5
67842: NOT
67843: IFFALSE 67847
// exit ;
67845: GO 67892
// for i in tmp do
67847: LD_ADDR_VAR 0 3
67851: PUSH
67852: LD_VAR 0 5
67856: PUSH
67857: FOR_IN
67858: IFFALSE 67890
// begin result := EnemyInRange ( i , 22 ) ;
67860: LD_ADDR_VAR 0 2
67864: PUSH
67865: LD_VAR 0 3
67869: PPUSH
67870: LD_INT 22
67872: PPUSH
67873: CALL 65479 0 2
67877: ST_TO_ADDR
// if result then
67878: LD_VAR 0 2
67882: IFFALSE 67888
// exit ;
67884: POP
67885: POP
67886: GO 67892
// end ;
67888: GO 67857
67890: POP
67891: POP
// end ;
67892: LD_VAR 0 2
67896: RET
// export function FilterByTag ( units , tag ) ; begin
67897: LD_INT 0
67899: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67900: LD_ADDR_VAR 0 3
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: LD_INT 120
67912: PUSH
67913: LD_VAR 0 2
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PPUSH
67922: CALL_OW 72
67926: ST_TO_ADDR
// end ;
67927: LD_VAR 0 3
67931: RET
// export function IsDriver ( un ) ; begin
67932: LD_INT 0
67934: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67935: LD_ADDR_VAR 0 2
67939: PUSH
67940: LD_VAR 0 1
67944: PUSH
67945: LD_INT 55
67947: PUSH
67948: EMPTY
67949: LIST
67950: PPUSH
67951: CALL_OW 69
67955: IN
67956: ST_TO_ADDR
// end ;
67957: LD_VAR 0 2
67961: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67962: LD_INT 0
67964: PPUSH
67965: PPUSH
// list := [ ] ;
67966: LD_ADDR_VAR 0 5
67970: PUSH
67971: EMPTY
67972: ST_TO_ADDR
// case d of 0 :
67973: LD_VAR 0 3
67977: PUSH
67978: LD_INT 0
67980: DOUBLE
67981: EQUAL
67982: IFTRUE 67986
67984: GO 68119
67986: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67987: LD_ADDR_VAR 0 5
67991: PUSH
67992: LD_VAR 0 1
67996: PUSH
67997: LD_INT 4
67999: MINUS
68000: PUSH
68001: LD_VAR 0 2
68005: PUSH
68006: LD_INT 4
68008: MINUS
68009: PUSH
68010: LD_INT 2
68012: PUSH
68013: EMPTY
68014: LIST
68015: LIST
68016: LIST
68017: PUSH
68018: LD_VAR 0 1
68022: PUSH
68023: LD_INT 3
68025: MINUS
68026: PUSH
68027: LD_VAR 0 2
68031: PUSH
68032: LD_INT 1
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: LIST
68039: PUSH
68040: LD_VAR 0 1
68044: PUSH
68045: LD_INT 4
68047: PLUS
68048: PUSH
68049: LD_VAR 0 2
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: LIST
68061: PUSH
68062: LD_VAR 0 1
68066: PUSH
68067: LD_INT 3
68069: PLUS
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: LD_INT 3
68078: PLUS
68079: PUSH
68080: LD_INT 5
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_VAR 0 2
68097: PUSH
68098: LD_INT 4
68100: PLUS
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: LIST
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: ST_TO_ADDR
// end ; 1 :
68117: GO 68817
68119: LD_INT 1
68121: DOUBLE
68122: EQUAL
68123: IFTRUE 68127
68125: GO 68260
68127: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68128: LD_ADDR_VAR 0 5
68132: PUSH
68133: LD_VAR 0 1
68137: PUSH
68138: LD_VAR 0 2
68142: PUSH
68143: LD_INT 4
68145: MINUS
68146: PUSH
68147: LD_INT 3
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: LIST
68154: PUSH
68155: LD_VAR 0 1
68159: PUSH
68160: LD_INT 3
68162: MINUS
68163: PUSH
68164: LD_VAR 0 2
68168: PUSH
68169: LD_INT 3
68171: MINUS
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: LIST
68180: PUSH
68181: LD_VAR 0 1
68185: PUSH
68186: LD_INT 4
68188: MINUS
68189: PUSH
68190: LD_VAR 0 2
68194: PUSH
68195: LD_INT 1
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: LIST
68202: PUSH
68203: LD_VAR 0 1
68207: PUSH
68208: LD_VAR 0 2
68212: PUSH
68213: LD_INT 3
68215: PLUS
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: LIST
68224: PUSH
68225: LD_VAR 0 1
68229: PUSH
68230: LD_INT 4
68232: PLUS
68233: PUSH
68234: LD_VAR 0 2
68238: PUSH
68239: LD_INT 4
68241: PLUS
68242: PUSH
68243: LD_INT 5
68245: PUSH
68246: EMPTY
68247: LIST
68248: LIST
68249: LIST
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: LIST
68255: LIST
68256: LIST
68257: ST_TO_ADDR
// end ; 2 :
68258: GO 68817
68260: LD_INT 2
68262: DOUBLE
68263: EQUAL
68264: IFTRUE 68268
68266: GO 68397
68268: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68269: LD_ADDR_VAR 0 5
68273: PUSH
68274: LD_VAR 0 1
68278: PUSH
68279: LD_VAR 0 2
68283: PUSH
68284: LD_INT 3
68286: MINUS
68287: PUSH
68288: LD_INT 3
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: LIST
68295: PUSH
68296: LD_VAR 0 1
68300: PUSH
68301: LD_INT 4
68303: PLUS
68304: PUSH
68305: LD_VAR 0 2
68309: PUSH
68310: LD_INT 4
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: LIST
68317: PUSH
68318: LD_VAR 0 1
68322: PUSH
68323: LD_VAR 0 2
68327: PUSH
68328: LD_INT 4
68330: PLUS
68331: PUSH
68332: LD_INT 0
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: LIST
68339: PUSH
68340: LD_VAR 0 1
68344: PUSH
68345: LD_INT 3
68347: MINUS
68348: PUSH
68349: LD_VAR 0 2
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: LIST
68361: PUSH
68362: LD_VAR 0 1
68366: PUSH
68367: LD_INT 4
68369: MINUS
68370: PUSH
68371: LD_VAR 0 2
68375: PUSH
68376: LD_INT 4
68378: MINUS
68379: PUSH
68380: LD_INT 2
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: LIST
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: ST_TO_ADDR
// end ; 3 :
68395: GO 68817
68397: LD_INT 3
68399: DOUBLE
68400: EQUAL
68401: IFTRUE 68405
68403: GO 68538
68405: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68406: LD_ADDR_VAR 0 5
68410: PUSH
68411: LD_VAR 0 1
68415: PUSH
68416: LD_INT 3
68418: PLUS
68419: PUSH
68420: LD_VAR 0 2
68424: PUSH
68425: LD_INT 4
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: LIST
68432: PUSH
68433: LD_VAR 0 1
68437: PUSH
68438: LD_INT 4
68440: PLUS
68441: PUSH
68442: LD_VAR 0 2
68446: PUSH
68447: LD_INT 4
68449: PLUS
68450: PUSH
68451: LD_INT 5
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: LIST
68458: PUSH
68459: LD_VAR 0 1
68463: PUSH
68464: LD_INT 4
68466: MINUS
68467: PUSH
68468: LD_VAR 0 2
68472: PUSH
68473: LD_INT 1
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: LIST
68480: PUSH
68481: LD_VAR 0 1
68485: PUSH
68486: LD_VAR 0 2
68490: PUSH
68491: LD_INT 4
68493: MINUS
68494: PUSH
68495: LD_INT 3
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: LIST
68502: PUSH
68503: LD_VAR 0 1
68507: PUSH
68508: LD_INT 3
68510: MINUS
68511: PUSH
68512: LD_VAR 0 2
68516: PUSH
68517: LD_INT 3
68519: MINUS
68520: PUSH
68521: LD_INT 2
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// end ; 4 :
68536: GO 68817
68538: LD_INT 4
68540: DOUBLE
68541: EQUAL
68542: IFTRUE 68546
68544: GO 68679
68546: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68547: LD_ADDR_VAR 0 5
68551: PUSH
68552: LD_VAR 0 1
68556: PUSH
68557: LD_VAR 0 2
68561: PUSH
68562: LD_INT 4
68564: PLUS
68565: PUSH
68566: LD_INT 0
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: LIST
68573: PUSH
68574: LD_VAR 0 1
68578: PUSH
68579: LD_INT 3
68581: PLUS
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: LD_INT 3
68590: PLUS
68591: PUSH
68592: LD_INT 5
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: LIST
68599: PUSH
68600: LD_VAR 0 1
68604: PUSH
68605: LD_INT 4
68607: PLUS
68608: PUSH
68609: LD_VAR 0 2
68613: PUSH
68614: LD_INT 4
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: LIST
68621: PUSH
68622: LD_VAR 0 1
68626: PUSH
68627: LD_VAR 0 2
68631: PUSH
68632: LD_INT 3
68634: MINUS
68635: PUSH
68636: LD_INT 3
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: LIST
68643: PUSH
68644: LD_VAR 0 1
68648: PUSH
68649: LD_INT 4
68651: MINUS
68652: PUSH
68653: LD_VAR 0 2
68657: PUSH
68658: LD_INT 4
68660: MINUS
68661: PUSH
68662: LD_INT 2
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: LIST
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: ST_TO_ADDR
// end ; 5 :
68677: GO 68817
68679: LD_INT 5
68681: DOUBLE
68682: EQUAL
68683: IFTRUE 68687
68685: GO 68816
68687: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68688: LD_ADDR_VAR 0 5
68692: PUSH
68693: LD_VAR 0 1
68697: PUSH
68698: LD_INT 4
68700: MINUS
68701: PUSH
68702: LD_VAR 0 2
68706: PUSH
68707: LD_INT 1
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: PUSH
68715: LD_VAR 0 1
68719: PUSH
68720: LD_VAR 0 2
68724: PUSH
68725: LD_INT 4
68727: MINUS
68728: PUSH
68729: LD_INT 3
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: LIST
68736: PUSH
68737: LD_VAR 0 1
68741: PUSH
68742: LD_INT 4
68744: PLUS
68745: PUSH
68746: LD_VAR 0 2
68750: PUSH
68751: LD_INT 4
68753: PLUS
68754: PUSH
68755: LD_INT 5
68757: PUSH
68758: EMPTY
68759: LIST
68760: LIST
68761: LIST
68762: PUSH
68763: LD_VAR 0 1
68767: PUSH
68768: LD_INT 3
68770: PLUS
68771: PUSH
68772: LD_VAR 0 2
68776: PUSH
68777: LD_INT 4
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: PUSH
68785: LD_VAR 0 1
68789: PUSH
68790: LD_VAR 0 2
68794: PUSH
68795: LD_INT 3
68797: PLUS
68798: PUSH
68799: LD_INT 0
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: LIST
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: ST_TO_ADDR
// end ; end ;
68814: GO 68817
68816: POP
// result := list ;
68817: LD_ADDR_VAR 0 4
68821: PUSH
68822: LD_VAR 0 5
68826: ST_TO_ADDR
// end ;
68827: LD_VAR 0 4
68831: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68832: LD_INT 0
68834: PPUSH
68835: PPUSH
68836: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68837: LD_VAR 0 1
68841: NOT
68842: PUSH
68843: LD_VAR 0 2
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: LD_INT 2
68853: PUSH
68854: LD_INT 3
68856: PUSH
68857: LD_INT 4
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: IN
68866: NOT
68867: OR
68868: IFFALSE 68872
// exit ;
68870: GO 68955
// tmp := [ ] ;
68872: LD_ADDR_VAR 0 5
68876: PUSH
68877: EMPTY
68878: ST_TO_ADDR
// for i in units do
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_VAR 0 1
68888: PUSH
68889: FOR_IN
68890: IFFALSE 68924
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68892: LD_ADDR_VAR 0 5
68896: PUSH
68897: LD_VAR 0 5
68901: PPUSH
68902: LD_VAR 0 4
68906: PPUSH
68907: LD_VAR 0 2
68911: PPUSH
68912: CALL_OW 259
68916: PPUSH
68917: CALL 70316 0 2
68921: ST_TO_ADDR
68922: GO 68889
68924: POP
68925: POP
// if not tmp then
68926: LD_VAR 0 5
68930: NOT
68931: IFFALSE 68935
// exit ;
68933: GO 68955
// result := SortListByListDesc ( units , tmp ) ;
68935: LD_ADDR_VAR 0 3
68939: PUSH
68940: LD_VAR 0 1
68944: PPUSH
68945: LD_VAR 0 5
68949: PPUSH
68950: CALL_OW 77
68954: ST_TO_ADDR
// end ;
68955: LD_VAR 0 3
68959: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68960: LD_INT 0
68962: PPUSH
68963: PPUSH
68964: PPUSH
// result := false ;
68965: LD_ADDR_VAR 0 3
68969: PUSH
68970: LD_INT 0
68972: ST_TO_ADDR
// if not building then
68973: LD_VAR 0 2
68977: NOT
68978: IFFALSE 68982
// exit ;
68980: GO 69120
// x := GetX ( building ) ;
68982: LD_ADDR_VAR 0 4
68986: PUSH
68987: LD_VAR 0 2
68991: PPUSH
68992: CALL_OW 250
68996: ST_TO_ADDR
// y := GetY ( building ) ;
68997: LD_ADDR_VAR 0 5
69001: PUSH
69002: LD_VAR 0 2
69006: PPUSH
69007: CALL_OW 251
69011: ST_TO_ADDR
// if not x or not y then
69012: LD_VAR 0 4
69016: NOT
69017: PUSH
69018: LD_VAR 0 5
69022: NOT
69023: OR
69024: IFFALSE 69028
// exit ;
69026: GO 69120
// if GetTaskList ( unit ) then
69028: LD_VAR 0 1
69032: PPUSH
69033: CALL_OW 437
69037: IFFALSE 69120
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69039: LD_STRING e
69041: PUSH
69042: LD_VAR 0 1
69046: PPUSH
69047: CALL_OW 437
69051: PUSH
69052: LD_INT 1
69054: ARRAY
69055: PUSH
69056: LD_INT 1
69058: ARRAY
69059: EQUAL
69060: PUSH
69061: LD_VAR 0 4
69065: PUSH
69066: LD_VAR 0 1
69070: PPUSH
69071: CALL_OW 437
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: PUSH
69080: LD_INT 2
69082: ARRAY
69083: EQUAL
69084: AND
69085: PUSH
69086: LD_VAR 0 5
69090: PUSH
69091: LD_VAR 0 1
69095: PPUSH
69096: CALL_OW 437
69100: PUSH
69101: LD_INT 1
69103: ARRAY
69104: PUSH
69105: LD_INT 3
69107: ARRAY
69108: EQUAL
69109: AND
69110: IFFALSE 69120
// result := true end ;
69112: LD_ADDR_VAR 0 3
69116: PUSH
69117: LD_INT 1
69119: ST_TO_ADDR
// end ;
69120: LD_VAR 0 3
69124: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69125: LD_INT 0
69127: PPUSH
// result := false ;
69128: LD_ADDR_VAR 0 4
69132: PUSH
69133: LD_INT 0
69135: ST_TO_ADDR
// if GetTaskList ( unit ) then
69136: LD_VAR 0 1
69140: PPUSH
69141: CALL_OW 437
69145: IFFALSE 69228
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69147: LD_STRING M
69149: PUSH
69150: LD_VAR 0 1
69154: PPUSH
69155: CALL_OW 437
69159: PUSH
69160: LD_INT 1
69162: ARRAY
69163: PUSH
69164: LD_INT 1
69166: ARRAY
69167: EQUAL
69168: PUSH
69169: LD_VAR 0 2
69173: PUSH
69174: LD_VAR 0 1
69178: PPUSH
69179: CALL_OW 437
69183: PUSH
69184: LD_INT 1
69186: ARRAY
69187: PUSH
69188: LD_INT 2
69190: ARRAY
69191: EQUAL
69192: AND
69193: PUSH
69194: LD_VAR 0 3
69198: PUSH
69199: LD_VAR 0 1
69203: PPUSH
69204: CALL_OW 437
69208: PUSH
69209: LD_INT 1
69211: ARRAY
69212: PUSH
69213: LD_INT 3
69215: ARRAY
69216: EQUAL
69217: AND
69218: IFFALSE 69228
// result := true ;
69220: LD_ADDR_VAR 0 4
69224: PUSH
69225: LD_INT 1
69227: ST_TO_ADDR
// end ; end ;
69228: LD_VAR 0 4
69232: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69233: LD_INT 0
69235: PPUSH
69236: PPUSH
69237: PPUSH
69238: PPUSH
// if not unit or not area then
69239: LD_VAR 0 1
69243: NOT
69244: PUSH
69245: LD_VAR 0 2
69249: NOT
69250: OR
69251: IFFALSE 69255
// exit ;
69253: GO 69419
// tmp := AreaToList ( area , i ) ;
69255: LD_ADDR_VAR 0 6
69259: PUSH
69260: LD_VAR 0 2
69264: PPUSH
69265: LD_VAR 0 5
69269: PPUSH
69270: CALL_OW 517
69274: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69275: LD_ADDR_VAR 0 5
69279: PUSH
69280: DOUBLE
69281: LD_INT 1
69283: DEC
69284: ST_TO_ADDR
69285: LD_VAR 0 6
69289: PUSH
69290: LD_INT 1
69292: ARRAY
69293: PUSH
69294: FOR_TO
69295: IFFALSE 69417
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69297: LD_ADDR_VAR 0 7
69301: PUSH
69302: LD_VAR 0 6
69306: PUSH
69307: LD_INT 1
69309: ARRAY
69310: PUSH
69311: LD_VAR 0 5
69315: ARRAY
69316: PUSH
69317: LD_VAR 0 6
69321: PUSH
69322: LD_INT 2
69324: ARRAY
69325: PUSH
69326: LD_VAR 0 5
69330: ARRAY
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69336: LD_VAR 0 7
69340: PUSH
69341: LD_INT 1
69343: ARRAY
69344: PPUSH
69345: LD_VAR 0 7
69349: PUSH
69350: LD_INT 2
69352: ARRAY
69353: PPUSH
69354: CALL_OW 428
69358: PUSH
69359: LD_INT 0
69361: EQUAL
69362: IFFALSE 69415
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69364: LD_VAR 0 1
69368: PPUSH
69369: LD_VAR 0 7
69373: PUSH
69374: LD_INT 1
69376: ARRAY
69377: PPUSH
69378: LD_VAR 0 7
69382: PUSH
69383: LD_INT 2
69385: ARRAY
69386: PPUSH
69387: LD_VAR 0 3
69391: PPUSH
69392: CALL_OW 48
// result := IsPlaced ( unit ) ;
69396: LD_ADDR_VAR 0 4
69400: PUSH
69401: LD_VAR 0 1
69405: PPUSH
69406: CALL_OW 305
69410: ST_TO_ADDR
// exit ;
69411: POP
69412: POP
69413: GO 69419
// end ; end ;
69415: GO 69294
69417: POP
69418: POP
// end ;
69419: LD_VAR 0 4
69423: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69424: LD_INT 0
69426: PPUSH
69427: PPUSH
69428: PPUSH
// if not side or side > 8 then
69429: LD_VAR 0 1
69433: NOT
69434: PUSH
69435: LD_VAR 0 1
69439: PUSH
69440: LD_INT 8
69442: GREATER
69443: OR
69444: IFFALSE 69448
// exit ;
69446: GO 69635
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69448: LD_ADDR_VAR 0 4
69452: PUSH
69453: LD_INT 22
69455: PUSH
69456: LD_VAR 0 1
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 21
69467: PUSH
69468: LD_INT 3
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PPUSH
69479: CALL_OW 69
69483: ST_TO_ADDR
// if not tmp then
69484: LD_VAR 0 4
69488: NOT
69489: IFFALSE 69493
// exit ;
69491: GO 69635
// enable_addtolog := true ;
69493: LD_ADDR_OWVAR 81
69497: PUSH
69498: LD_INT 1
69500: ST_TO_ADDR
// AddToLog ( [ ) ;
69501: LD_STRING [
69503: PPUSH
69504: CALL_OW 561
// for i in tmp do
69508: LD_ADDR_VAR 0 3
69512: PUSH
69513: LD_VAR 0 4
69517: PUSH
69518: FOR_IN
69519: IFFALSE 69626
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69521: LD_STRING [
69523: PUSH
69524: LD_VAR 0 3
69528: PPUSH
69529: CALL_OW 266
69533: STR
69534: PUSH
69535: LD_STRING , 
69537: STR
69538: PUSH
69539: LD_VAR 0 3
69543: PPUSH
69544: CALL_OW 250
69548: STR
69549: PUSH
69550: LD_STRING , 
69552: STR
69553: PUSH
69554: LD_VAR 0 3
69558: PPUSH
69559: CALL_OW 251
69563: STR
69564: PUSH
69565: LD_STRING , 
69567: STR
69568: PUSH
69569: LD_VAR 0 3
69573: PPUSH
69574: CALL_OW 254
69578: STR
69579: PUSH
69580: LD_STRING , 
69582: STR
69583: PUSH
69584: LD_VAR 0 3
69588: PPUSH
69589: LD_INT 1
69591: PPUSH
69592: CALL_OW 268
69596: STR
69597: PUSH
69598: LD_STRING , 
69600: STR
69601: PUSH
69602: LD_VAR 0 3
69606: PPUSH
69607: LD_INT 2
69609: PPUSH
69610: CALL_OW 268
69614: STR
69615: PUSH
69616: LD_STRING ],
69618: STR
69619: PPUSH
69620: CALL_OW 561
// end ;
69624: GO 69518
69626: POP
69627: POP
// AddToLog ( ]; ) ;
69628: LD_STRING ];
69630: PPUSH
69631: CALL_OW 561
// end ;
69635: LD_VAR 0 2
69639: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69640: LD_INT 0
69642: PPUSH
69643: PPUSH
69644: PPUSH
69645: PPUSH
69646: PPUSH
// if not area or not rate or not max then
69647: LD_VAR 0 1
69651: NOT
69652: PUSH
69653: LD_VAR 0 2
69657: NOT
69658: OR
69659: PUSH
69660: LD_VAR 0 4
69664: NOT
69665: OR
69666: IFFALSE 69670
// exit ;
69668: GO 69859
// while 1 do
69670: LD_INT 1
69672: IFFALSE 69859
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69674: LD_ADDR_VAR 0 9
69678: PUSH
69679: LD_VAR 0 1
69683: PPUSH
69684: LD_INT 1
69686: PPUSH
69687: CALL_OW 287
69691: PUSH
69692: LD_INT 10
69694: MUL
69695: ST_TO_ADDR
// r := rate / 10 ;
69696: LD_ADDR_VAR 0 7
69700: PUSH
69701: LD_VAR 0 2
69705: PUSH
69706: LD_INT 10
69708: DIVREAL
69709: ST_TO_ADDR
// time := 1 1$00 ;
69710: LD_ADDR_VAR 0 8
69714: PUSH
69715: LD_INT 2100
69717: ST_TO_ADDR
// if amount < min then
69718: LD_VAR 0 9
69722: PUSH
69723: LD_VAR 0 3
69727: LESS
69728: IFFALSE 69746
// r := r * 2 else
69730: LD_ADDR_VAR 0 7
69734: PUSH
69735: LD_VAR 0 7
69739: PUSH
69740: LD_INT 2
69742: MUL
69743: ST_TO_ADDR
69744: GO 69772
// if amount > max then
69746: LD_VAR 0 9
69750: PUSH
69751: LD_VAR 0 4
69755: GREATER
69756: IFFALSE 69772
// r := r / 2 ;
69758: LD_ADDR_VAR 0 7
69762: PUSH
69763: LD_VAR 0 7
69767: PUSH
69768: LD_INT 2
69770: DIVREAL
69771: ST_TO_ADDR
// time := time / r ;
69772: LD_ADDR_VAR 0 8
69776: PUSH
69777: LD_VAR 0 8
69781: PUSH
69782: LD_VAR 0 7
69786: DIVREAL
69787: ST_TO_ADDR
// if time < 0 then
69788: LD_VAR 0 8
69792: PUSH
69793: LD_INT 0
69795: LESS
69796: IFFALSE 69813
// time := time * - 1 ;
69798: LD_ADDR_VAR 0 8
69802: PUSH
69803: LD_VAR 0 8
69807: PUSH
69808: LD_INT 1
69810: NEG
69811: MUL
69812: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69813: LD_VAR 0 8
69817: PUSH
69818: LD_INT 35
69820: PPUSH
69821: LD_INT 875
69823: PPUSH
69824: CALL_OW 12
69828: PLUS
69829: PPUSH
69830: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69834: LD_INT 1
69836: PPUSH
69837: LD_INT 5
69839: PPUSH
69840: CALL_OW 12
69844: PPUSH
69845: LD_VAR 0 1
69849: PPUSH
69850: LD_INT 1
69852: PPUSH
69853: CALL_OW 55
// end ;
69857: GO 69670
// end ;
69859: LD_VAR 0 5
69863: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69864: LD_INT 0
69866: PPUSH
69867: PPUSH
69868: PPUSH
69869: PPUSH
69870: PPUSH
69871: PPUSH
69872: PPUSH
69873: PPUSH
// if not turrets or not factories then
69874: LD_VAR 0 1
69878: NOT
69879: PUSH
69880: LD_VAR 0 2
69884: NOT
69885: OR
69886: IFFALSE 69890
// exit ;
69888: GO 70197
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69890: LD_ADDR_VAR 0 10
69894: PUSH
69895: LD_INT 5
69897: PUSH
69898: LD_INT 6
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 2
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: LD_INT 3
69917: PUSH
69918: LD_INT 5
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 24
69932: PUSH
69933: LD_INT 25
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 23
69942: PUSH
69943: LD_INT 27
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 42
69956: PUSH
69957: LD_INT 43
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 44
69966: PUSH
69967: LD_INT 46
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 45
69976: PUSH
69977: LD_INT 47
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: LIST
69993: ST_TO_ADDR
// result := [ ] ;
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: EMPTY
70000: ST_TO_ADDR
// for i in turrets do
70001: LD_ADDR_VAR 0 4
70005: PUSH
70006: LD_VAR 0 1
70010: PUSH
70011: FOR_IN
70012: IFFALSE 70195
// begin nat := GetNation ( i ) ;
70014: LD_ADDR_VAR 0 7
70018: PUSH
70019: LD_VAR 0 4
70023: PPUSH
70024: CALL_OW 248
70028: ST_TO_ADDR
// weapon := 0 ;
70029: LD_ADDR_VAR 0 8
70033: PUSH
70034: LD_INT 0
70036: ST_TO_ADDR
// if not nat then
70037: LD_VAR 0 7
70041: NOT
70042: IFFALSE 70046
// continue ;
70044: GO 70011
// for j in list [ nat ] do
70046: LD_ADDR_VAR 0 5
70050: PUSH
70051: LD_VAR 0 10
70055: PUSH
70056: LD_VAR 0 7
70060: ARRAY
70061: PUSH
70062: FOR_IN
70063: IFFALSE 70104
// if GetBWeapon ( i ) = j [ 1 ] then
70065: LD_VAR 0 4
70069: PPUSH
70070: CALL_OW 269
70074: PUSH
70075: LD_VAR 0 5
70079: PUSH
70080: LD_INT 1
70082: ARRAY
70083: EQUAL
70084: IFFALSE 70102
// begin weapon := j [ 2 ] ;
70086: LD_ADDR_VAR 0 8
70090: PUSH
70091: LD_VAR 0 5
70095: PUSH
70096: LD_INT 2
70098: ARRAY
70099: ST_TO_ADDR
// break ;
70100: GO 70104
// end ;
70102: GO 70062
70104: POP
70105: POP
// if not weapon then
70106: LD_VAR 0 8
70110: NOT
70111: IFFALSE 70115
// continue ;
70113: GO 70011
// for k in factories do
70115: LD_ADDR_VAR 0 6
70119: PUSH
70120: LD_VAR 0 2
70124: PUSH
70125: FOR_IN
70126: IFFALSE 70191
// begin weapons := AvailableWeaponList ( k ) ;
70128: LD_ADDR_VAR 0 9
70132: PUSH
70133: LD_VAR 0 6
70137: PPUSH
70138: CALL_OW 478
70142: ST_TO_ADDR
// if not weapons then
70143: LD_VAR 0 9
70147: NOT
70148: IFFALSE 70152
// continue ;
70150: GO 70125
// if weapon in weapons then
70152: LD_VAR 0 8
70156: PUSH
70157: LD_VAR 0 9
70161: IN
70162: IFFALSE 70189
// begin result := [ i , weapon ] ;
70164: LD_ADDR_VAR 0 3
70168: PUSH
70169: LD_VAR 0 4
70173: PUSH
70174: LD_VAR 0 8
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: ST_TO_ADDR
// exit ;
70183: POP
70184: POP
70185: POP
70186: POP
70187: GO 70197
// end ; end ;
70189: GO 70125
70191: POP
70192: POP
// end ;
70193: GO 70011
70195: POP
70196: POP
// end ;
70197: LD_VAR 0 3
70201: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70202: LD_INT 0
70204: PPUSH
// if not side or side > 8 then
70205: LD_VAR 0 3
70209: NOT
70210: PUSH
70211: LD_VAR 0 3
70215: PUSH
70216: LD_INT 8
70218: GREATER
70219: OR
70220: IFFALSE 70224
// exit ;
70222: GO 70283
// if not range then
70224: LD_VAR 0 4
70228: NOT
70229: IFFALSE 70240
// range := - 12 ;
70231: LD_ADDR_VAR 0 4
70235: PUSH
70236: LD_INT 12
70238: NEG
70239: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70240: LD_VAR 0 1
70244: PPUSH
70245: LD_VAR 0 2
70249: PPUSH
70250: LD_VAR 0 3
70254: PPUSH
70255: LD_VAR 0 4
70259: PPUSH
70260: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70264: LD_VAR 0 1
70268: PPUSH
70269: LD_VAR 0 2
70273: PPUSH
70274: LD_VAR 0 3
70278: PPUSH
70279: CALL_OW 331
// end ;
70283: LD_VAR 0 5
70287: RET
// export function Video ( mode ) ; begin
70288: LD_INT 0
70290: PPUSH
// ingame_video = mode ;
70291: LD_ADDR_OWVAR 52
70295: PUSH
70296: LD_VAR 0 1
70300: ST_TO_ADDR
// interface_hidden = mode ;
70301: LD_ADDR_OWVAR 54
70305: PUSH
70306: LD_VAR 0 1
70310: ST_TO_ADDR
// end ;
70311: LD_VAR 0 2
70315: RET
// export function Join ( array , element ) ; begin
70316: LD_INT 0
70318: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70319: LD_ADDR_VAR 0 3
70323: PUSH
70324: LD_VAR 0 1
70328: PPUSH
70329: LD_VAR 0 1
70333: PUSH
70334: LD_INT 1
70336: PLUS
70337: PPUSH
70338: LD_VAR 0 2
70342: PPUSH
70343: CALL_OW 1
70347: ST_TO_ADDR
// end ;
70348: LD_VAR 0 3
70352: RET
// export function JoinUnion ( array , element ) ; begin
70353: LD_INT 0
70355: PPUSH
// result := array union element ;
70356: LD_ADDR_VAR 0 3
70360: PUSH
70361: LD_VAR 0 1
70365: PUSH
70366: LD_VAR 0 2
70370: UNION
70371: ST_TO_ADDR
// end ;
70372: LD_VAR 0 3
70376: RET
// export function GetBehemoths ( side ) ; begin
70377: LD_INT 0
70379: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70380: LD_ADDR_VAR 0 2
70384: PUSH
70385: LD_INT 22
70387: PUSH
70388: LD_VAR 0 1
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 31
70399: PUSH
70400: LD_INT 25
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PPUSH
70411: CALL_OW 69
70415: ST_TO_ADDR
// end ;
70416: LD_VAR 0 2
70420: RET
// export function Shuffle ( array ) ; var i , index ; begin
70421: LD_INT 0
70423: PPUSH
70424: PPUSH
70425: PPUSH
// result := [ ] ;
70426: LD_ADDR_VAR 0 2
70430: PUSH
70431: EMPTY
70432: ST_TO_ADDR
// if not array then
70433: LD_VAR 0 1
70437: NOT
70438: IFFALSE 70442
// exit ;
70440: GO 70541
// Randomize ;
70442: CALL_OW 10
// for i = array downto 1 do
70446: LD_ADDR_VAR 0 3
70450: PUSH
70451: DOUBLE
70452: LD_VAR 0 1
70456: INC
70457: ST_TO_ADDR
70458: LD_INT 1
70460: PUSH
70461: FOR_DOWNTO
70462: IFFALSE 70539
// begin index := rand ( 1 , array ) ;
70464: LD_ADDR_VAR 0 4
70468: PUSH
70469: LD_INT 1
70471: PPUSH
70472: LD_VAR 0 1
70476: PPUSH
70477: CALL_OW 12
70481: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70482: LD_ADDR_VAR 0 2
70486: PUSH
70487: LD_VAR 0 2
70491: PPUSH
70492: LD_VAR 0 2
70496: PUSH
70497: LD_INT 1
70499: PLUS
70500: PPUSH
70501: LD_VAR 0 1
70505: PUSH
70506: LD_VAR 0 4
70510: ARRAY
70511: PPUSH
70512: CALL_OW 2
70516: ST_TO_ADDR
// array := Delete ( array , index ) ;
70517: LD_ADDR_VAR 0 1
70521: PUSH
70522: LD_VAR 0 1
70526: PPUSH
70527: LD_VAR 0 4
70531: PPUSH
70532: CALL_OW 3
70536: ST_TO_ADDR
// end ;
70537: GO 70461
70539: POP
70540: POP
// end ;
70541: LD_VAR 0 2
70545: RET
// export function GetBaseMaterials ( base ) ; begin
70546: LD_INT 0
70548: PPUSH
// result := [ 0 , 0 , 0 ] ;
70549: LD_ADDR_VAR 0 2
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: LD_INT 0
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: LIST
70567: ST_TO_ADDR
// if not base then
70568: LD_VAR 0 1
70572: NOT
70573: IFFALSE 70577
// exit ;
70575: GO 70626
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70577: LD_ADDR_VAR 0 2
70581: PUSH
70582: LD_VAR 0 1
70586: PPUSH
70587: LD_INT 1
70589: PPUSH
70590: CALL_OW 275
70594: PUSH
70595: LD_VAR 0 1
70599: PPUSH
70600: LD_INT 2
70602: PPUSH
70603: CALL_OW 275
70607: PUSH
70608: LD_VAR 0 1
70612: PPUSH
70613: LD_INT 3
70615: PPUSH
70616: CALL_OW 275
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: LIST
70625: ST_TO_ADDR
// end ;
70626: LD_VAR 0 2
70630: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70631: LD_INT 0
70633: PPUSH
70634: PPUSH
// result := array ;
70635: LD_ADDR_VAR 0 3
70639: PUSH
70640: LD_VAR 0 1
70644: ST_TO_ADDR
// if size >= result then
70645: LD_VAR 0 2
70649: PUSH
70650: LD_VAR 0 3
70654: GREATEREQUAL
70655: IFFALSE 70659
// exit ;
70657: GO 70709
// if size then
70659: LD_VAR 0 2
70663: IFFALSE 70709
// for i := array downto size do
70665: LD_ADDR_VAR 0 4
70669: PUSH
70670: DOUBLE
70671: LD_VAR 0 1
70675: INC
70676: ST_TO_ADDR
70677: LD_VAR 0 2
70681: PUSH
70682: FOR_DOWNTO
70683: IFFALSE 70707
// result := Delete ( result , result ) ;
70685: LD_ADDR_VAR 0 3
70689: PUSH
70690: LD_VAR 0 3
70694: PPUSH
70695: LD_VAR 0 3
70699: PPUSH
70700: CALL_OW 3
70704: ST_TO_ADDR
70705: GO 70682
70707: POP
70708: POP
// end ;
70709: LD_VAR 0 3
70713: RET
// export function ComExit ( unit ) ; var tmp ; begin
70714: LD_INT 0
70716: PPUSH
70717: PPUSH
// if not IsInUnit ( unit ) then
70718: LD_VAR 0 1
70722: PPUSH
70723: CALL_OW 310
70727: NOT
70728: IFFALSE 70732
// exit ;
70730: GO 70792
// tmp := IsInUnit ( unit ) ;
70732: LD_ADDR_VAR 0 3
70736: PUSH
70737: LD_VAR 0 1
70741: PPUSH
70742: CALL_OW 310
70746: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70747: LD_VAR 0 3
70751: PPUSH
70752: CALL_OW 247
70756: PUSH
70757: LD_INT 2
70759: EQUAL
70760: IFFALSE 70773
// ComExitVehicle ( unit ) else
70762: LD_VAR 0 1
70766: PPUSH
70767: CALL_OW 121
70771: GO 70782
// ComExitBuilding ( unit ) ;
70773: LD_VAR 0 1
70777: PPUSH
70778: CALL_OW 122
// result := tmp ;
70782: LD_ADDR_VAR 0 2
70786: PUSH
70787: LD_VAR 0 3
70791: ST_TO_ADDR
// end ;
70792: LD_VAR 0 2
70796: RET
// export function ComExitAll ( units ) ; var i ; begin
70797: LD_INT 0
70799: PPUSH
70800: PPUSH
// if not units then
70801: LD_VAR 0 1
70805: NOT
70806: IFFALSE 70810
// exit ;
70808: GO 70836
// for i in units do
70810: LD_ADDR_VAR 0 3
70814: PUSH
70815: LD_VAR 0 1
70819: PUSH
70820: FOR_IN
70821: IFFALSE 70834
// ComExit ( i ) ;
70823: LD_VAR 0 3
70827: PPUSH
70828: CALL 70714 0 1
70832: GO 70820
70834: POP
70835: POP
// end ;
70836: LD_VAR 0 2
70840: RET
// export function ResetHc ; begin
70841: LD_INT 0
70843: PPUSH
// InitHc ;
70844: CALL_OW 19
// hc_importance := 0 ;
70848: LD_ADDR_OWVAR 32
70852: PUSH
70853: LD_INT 0
70855: ST_TO_ADDR
// end ;
70856: LD_VAR 0 1
70860: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70861: LD_INT 0
70863: PPUSH
70864: PPUSH
70865: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70866: LD_ADDR_VAR 0 6
70870: PUSH
70871: LD_VAR 0 1
70875: PUSH
70876: LD_VAR 0 3
70880: PLUS
70881: PUSH
70882: LD_INT 2
70884: DIV
70885: ST_TO_ADDR
// if _x < 0 then
70886: LD_VAR 0 6
70890: PUSH
70891: LD_INT 0
70893: LESS
70894: IFFALSE 70911
// _x := _x * - 1 ;
70896: LD_ADDR_VAR 0 6
70900: PUSH
70901: LD_VAR 0 6
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: MUL
70910: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70911: LD_ADDR_VAR 0 7
70915: PUSH
70916: LD_VAR 0 2
70920: PUSH
70921: LD_VAR 0 4
70925: PLUS
70926: PUSH
70927: LD_INT 2
70929: DIV
70930: ST_TO_ADDR
// if _y < 0 then
70931: LD_VAR 0 7
70935: PUSH
70936: LD_INT 0
70938: LESS
70939: IFFALSE 70956
// _y := _y * - 1 ;
70941: LD_ADDR_VAR 0 7
70945: PUSH
70946: LD_VAR 0 7
70950: PUSH
70951: LD_INT 1
70953: NEG
70954: MUL
70955: ST_TO_ADDR
// result := [ _x , _y ] ;
70956: LD_ADDR_VAR 0 5
70960: PUSH
70961: LD_VAR 0 6
70965: PUSH
70966: LD_VAR 0 7
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: ST_TO_ADDR
// end ;
70975: LD_VAR 0 5
70979: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70980: LD_INT 0
70982: PPUSH
70983: PPUSH
70984: PPUSH
70985: PPUSH
// task := GetTaskList ( unit ) ;
70986: LD_ADDR_VAR 0 7
70990: PUSH
70991: LD_VAR 0 1
70995: PPUSH
70996: CALL_OW 437
71000: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71001: LD_VAR 0 7
71005: NOT
71006: PUSH
71007: LD_VAR 0 1
71011: PPUSH
71012: LD_VAR 0 2
71016: PPUSH
71017: CALL_OW 308
71021: NOT
71022: AND
71023: IFFALSE 71027
// exit ;
71025: GO 71145
// if IsInArea ( unit , area ) then
71027: LD_VAR 0 1
71031: PPUSH
71032: LD_VAR 0 2
71036: PPUSH
71037: CALL_OW 308
71041: IFFALSE 71059
// begin ComMoveToArea ( unit , goAway ) ;
71043: LD_VAR 0 1
71047: PPUSH
71048: LD_VAR 0 3
71052: PPUSH
71053: CALL_OW 113
// exit ;
71057: GO 71145
// end ; if task [ 1 ] [ 1 ] <> M then
71059: LD_VAR 0 7
71063: PUSH
71064: LD_INT 1
71066: ARRAY
71067: PUSH
71068: LD_INT 1
71070: ARRAY
71071: PUSH
71072: LD_STRING M
71074: NONEQUAL
71075: IFFALSE 71079
// exit ;
71077: GO 71145
// x := task [ 1 ] [ 2 ] ;
71079: LD_ADDR_VAR 0 5
71083: PUSH
71084: LD_VAR 0 7
71088: PUSH
71089: LD_INT 1
71091: ARRAY
71092: PUSH
71093: LD_INT 2
71095: ARRAY
71096: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71097: LD_ADDR_VAR 0 6
71101: PUSH
71102: LD_VAR 0 7
71106: PUSH
71107: LD_INT 1
71109: ARRAY
71110: PUSH
71111: LD_INT 3
71113: ARRAY
71114: ST_TO_ADDR
// if InArea ( x , y , area ) then
71115: LD_VAR 0 5
71119: PPUSH
71120: LD_VAR 0 6
71124: PPUSH
71125: LD_VAR 0 2
71129: PPUSH
71130: CALL_OW 309
71134: IFFALSE 71145
// ComStop ( unit ) ;
71136: LD_VAR 0 1
71140: PPUSH
71141: CALL_OW 141
// end ;
71145: LD_VAR 0 4
71149: RET
// export function Abs ( value ) ; begin
71150: LD_INT 0
71152: PPUSH
// result := value ;
71153: LD_ADDR_VAR 0 2
71157: PUSH
71158: LD_VAR 0 1
71162: ST_TO_ADDR
// if value < 0 then
71163: LD_VAR 0 1
71167: PUSH
71168: LD_INT 0
71170: LESS
71171: IFFALSE 71188
// result := value * - 1 ;
71173: LD_ADDR_VAR 0 2
71177: PUSH
71178: LD_VAR 0 1
71182: PUSH
71183: LD_INT 1
71185: NEG
71186: MUL
71187: ST_TO_ADDR
// end ;
71188: LD_VAR 0 2
71192: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71193: LD_INT 0
71195: PPUSH
71196: PPUSH
71197: PPUSH
71198: PPUSH
71199: PPUSH
71200: PPUSH
71201: PPUSH
71202: PPUSH
// if not unit or not building then
71203: LD_VAR 0 1
71207: NOT
71208: PUSH
71209: LD_VAR 0 2
71213: NOT
71214: OR
71215: IFFALSE 71219
// exit ;
71217: GO 71445
// x := GetX ( building ) ;
71219: LD_ADDR_VAR 0 4
71223: PUSH
71224: LD_VAR 0 2
71228: PPUSH
71229: CALL_OW 250
71233: ST_TO_ADDR
// y := GetY ( building ) ;
71234: LD_ADDR_VAR 0 6
71238: PUSH
71239: LD_VAR 0 2
71243: PPUSH
71244: CALL_OW 251
71248: ST_TO_ADDR
// d := GetDir ( building ) ;
71249: LD_ADDR_VAR 0 8
71253: PUSH
71254: LD_VAR 0 2
71258: PPUSH
71259: CALL_OW 254
71263: ST_TO_ADDR
// r := 4 ;
71264: LD_ADDR_VAR 0 9
71268: PUSH
71269: LD_INT 4
71271: ST_TO_ADDR
// for i := 1 to 5 do
71272: LD_ADDR_VAR 0 10
71276: PUSH
71277: DOUBLE
71278: LD_INT 1
71280: DEC
71281: ST_TO_ADDR
71282: LD_INT 5
71284: PUSH
71285: FOR_TO
71286: IFFALSE 71443
// begin _x := ShiftX ( x , d , r + i ) ;
71288: LD_ADDR_VAR 0 5
71292: PUSH
71293: LD_VAR 0 4
71297: PPUSH
71298: LD_VAR 0 8
71302: PPUSH
71303: LD_VAR 0 9
71307: PUSH
71308: LD_VAR 0 10
71312: PLUS
71313: PPUSH
71314: CALL_OW 272
71318: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71319: LD_ADDR_VAR 0 7
71323: PUSH
71324: LD_VAR 0 6
71328: PPUSH
71329: LD_VAR 0 8
71333: PPUSH
71334: LD_VAR 0 9
71338: PUSH
71339: LD_VAR 0 10
71343: PLUS
71344: PPUSH
71345: CALL_OW 273
71349: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71350: LD_VAR 0 5
71354: PPUSH
71355: LD_VAR 0 7
71359: PPUSH
71360: CALL_OW 488
71364: PUSH
71365: LD_VAR 0 5
71369: PPUSH
71370: LD_VAR 0 7
71374: PPUSH
71375: CALL_OW 428
71379: PPUSH
71380: CALL_OW 247
71384: PUSH
71385: LD_INT 3
71387: PUSH
71388: LD_INT 2
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: IN
71395: NOT
71396: AND
71397: IFFALSE 71441
// begin ComMoveXY ( unit , _x , _y ) ;
71399: LD_VAR 0 1
71403: PPUSH
71404: LD_VAR 0 5
71408: PPUSH
71409: LD_VAR 0 7
71413: PPUSH
71414: CALL_OW 111
// result := [ _x , _y ] ;
71418: LD_ADDR_VAR 0 3
71422: PUSH
71423: LD_VAR 0 5
71427: PUSH
71428: LD_VAR 0 7
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: ST_TO_ADDR
// exit ;
71437: POP
71438: POP
71439: GO 71445
// end ; end ;
71441: GO 71285
71443: POP
71444: POP
// end ;
71445: LD_VAR 0 3
71449: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71450: LD_INT 0
71452: PPUSH
71453: PPUSH
71454: PPUSH
// result := 0 ;
71455: LD_ADDR_VAR 0 3
71459: PUSH
71460: LD_INT 0
71462: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71463: LD_VAR 0 1
71467: PUSH
71468: LD_INT 0
71470: LESS
71471: PUSH
71472: LD_VAR 0 1
71476: PUSH
71477: LD_INT 8
71479: GREATER
71480: OR
71481: PUSH
71482: LD_VAR 0 2
71486: PUSH
71487: LD_INT 0
71489: LESS
71490: OR
71491: PUSH
71492: LD_VAR 0 2
71496: PUSH
71497: LD_INT 8
71499: GREATER
71500: OR
71501: IFFALSE 71505
// exit ;
71503: GO 71580
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71505: LD_ADDR_VAR 0 4
71509: PUSH
71510: LD_INT 22
71512: PUSH
71513: LD_VAR 0 2
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PPUSH
71522: CALL_OW 69
71526: PUSH
71527: FOR_IN
71528: IFFALSE 71578
// begin un := UnitShoot ( i ) ;
71530: LD_ADDR_VAR 0 5
71534: PUSH
71535: LD_VAR 0 4
71539: PPUSH
71540: CALL_OW 504
71544: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71545: LD_VAR 0 5
71549: PPUSH
71550: CALL_OW 255
71554: PUSH
71555: LD_VAR 0 1
71559: EQUAL
71560: IFFALSE 71576
// begin result := un ;
71562: LD_ADDR_VAR 0 3
71566: PUSH
71567: LD_VAR 0 5
71571: ST_TO_ADDR
// exit ;
71572: POP
71573: POP
71574: GO 71580
// end ; end ;
71576: GO 71527
71578: POP
71579: POP
// end ;
71580: LD_VAR 0 3
71584: RET
// export function GetCargoBay ( units ) ; begin
71585: LD_INT 0
71587: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71588: LD_ADDR_VAR 0 2
71592: PUSH
71593: LD_VAR 0 1
71597: PPUSH
71598: LD_INT 2
71600: PUSH
71601: LD_INT 34
71603: PUSH
71604: LD_INT 12
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 34
71613: PUSH
71614: LD_INT 51
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 34
71623: PUSH
71624: LD_INT 32
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: LD_INT 34
71633: PUSH
71634: LD_INT 89
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: PPUSH
71648: CALL_OW 72
71652: ST_TO_ADDR
// end ;
71653: LD_VAR 0 2
71657: RET
// export function Negate ( value ) ; begin
71658: LD_INT 0
71660: PPUSH
// result := not value ;
71661: LD_ADDR_VAR 0 2
71665: PUSH
71666: LD_VAR 0 1
71670: NOT
71671: ST_TO_ADDR
// end ;
71672: LD_VAR 0 2
71676: RET
// export function Inc ( value ) ; begin
71677: LD_INT 0
71679: PPUSH
// result := value + 1 ;
71680: LD_ADDR_VAR 0 2
71684: PUSH
71685: LD_VAR 0 1
71689: PUSH
71690: LD_INT 1
71692: PLUS
71693: ST_TO_ADDR
// end ;
71694: LD_VAR 0 2
71698: RET
// export function Dec ( value ) ; begin
71699: LD_INT 0
71701: PPUSH
// result := value - 1 ;
71702: LD_ADDR_VAR 0 2
71706: PUSH
71707: LD_VAR 0 1
71711: PUSH
71712: LD_INT 1
71714: MINUS
71715: ST_TO_ADDR
// end ;
71716: LD_VAR 0 2
71720: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71721: LD_INT 0
71723: PPUSH
71724: PPUSH
71725: PPUSH
71726: PPUSH
71727: PPUSH
71728: PPUSH
71729: PPUSH
71730: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71731: LD_VAR 0 1
71735: PPUSH
71736: LD_VAR 0 2
71740: PPUSH
71741: CALL_OW 488
71745: NOT
71746: PUSH
71747: LD_VAR 0 3
71751: PPUSH
71752: LD_VAR 0 4
71756: PPUSH
71757: CALL_OW 488
71761: NOT
71762: OR
71763: IFFALSE 71776
// begin result := - 1 ;
71765: LD_ADDR_VAR 0 5
71769: PUSH
71770: LD_INT 1
71772: NEG
71773: ST_TO_ADDR
// exit ;
71774: GO 72011
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71776: LD_ADDR_VAR 0 12
71780: PUSH
71781: LD_VAR 0 1
71785: PPUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: LD_VAR 0 3
71795: PPUSH
71796: LD_VAR 0 4
71800: PPUSH
71801: CALL 70861 0 4
71805: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71806: LD_ADDR_VAR 0 11
71810: PUSH
71811: LD_VAR 0 1
71815: PPUSH
71816: LD_VAR 0 2
71820: PPUSH
71821: LD_VAR 0 12
71825: PUSH
71826: LD_INT 1
71828: ARRAY
71829: PPUSH
71830: LD_VAR 0 12
71834: PUSH
71835: LD_INT 2
71837: ARRAY
71838: PPUSH
71839: CALL_OW 298
71843: ST_TO_ADDR
// distance := 9999 ;
71844: LD_ADDR_VAR 0 10
71848: PUSH
71849: LD_INT 9999
71851: ST_TO_ADDR
// for i := 0 to 5 do
71852: LD_ADDR_VAR 0 6
71856: PUSH
71857: DOUBLE
71858: LD_INT 0
71860: DEC
71861: ST_TO_ADDR
71862: LD_INT 5
71864: PUSH
71865: FOR_TO
71866: IFFALSE 72009
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71868: LD_ADDR_VAR 0 7
71872: PUSH
71873: LD_VAR 0 1
71877: PPUSH
71878: LD_VAR 0 6
71882: PPUSH
71883: LD_VAR 0 11
71887: PPUSH
71888: CALL_OW 272
71892: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71893: LD_ADDR_VAR 0 8
71897: PUSH
71898: LD_VAR 0 2
71902: PPUSH
71903: LD_VAR 0 6
71907: PPUSH
71908: LD_VAR 0 11
71912: PPUSH
71913: CALL_OW 273
71917: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71918: LD_VAR 0 7
71922: PPUSH
71923: LD_VAR 0 8
71927: PPUSH
71928: CALL_OW 488
71932: NOT
71933: IFFALSE 71937
// continue ;
71935: GO 71865
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71937: LD_ADDR_VAR 0 9
71941: PUSH
71942: LD_VAR 0 12
71946: PUSH
71947: LD_INT 1
71949: ARRAY
71950: PPUSH
71951: LD_VAR 0 12
71955: PUSH
71956: LD_INT 2
71958: ARRAY
71959: PPUSH
71960: LD_VAR 0 7
71964: PPUSH
71965: LD_VAR 0 8
71969: PPUSH
71970: CALL_OW 298
71974: ST_TO_ADDR
// if tmp < distance then
71975: LD_VAR 0 9
71979: PUSH
71980: LD_VAR 0 10
71984: LESS
71985: IFFALSE 72007
// begin result := i ;
71987: LD_ADDR_VAR 0 5
71991: PUSH
71992: LD_VAR 0 6
71996: ST_TO_ADDR
// distance := tmp ;
71997: LD_ADDR_VAR 0 10
72001: PUSH
72002: LD_VAR 0 9
72006: ST_TO_ADDR
// end ; end ;
72007: GO 71865
72009: POP
72010: POP
// end ;
72011: LD_VAR 0 5
72015: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72016: LD_INT 0
72018: PPUSH
72019: PPUSH
// if not driver or not IsInUnit ( driver ) then
72020: LD_VAR 0 1
72024: NOT
72025: PUSH
72026: LD_VAR 0 1
72030: PPUSH
72031: CALL_OW 310
72035: NOT
72036: OR
72037: IFFALSE 72041
// exit ;
72039: GO 72131
// vehicle := IsInUnit ( driver ) ;
72041: LD_ADDR_VAR 0 3
72045: PUSH
72046: LD_VAR 0 1
72050: PPUSH
72051: CALL_OW 310
72055: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72056: LD_VAR 0 1
72060: PPUSH
72061: LD_STRING \
72063: PUSH
72064: LD_INT 0
72066: PUSH
72067: LD_INT 0
72069: PUSH
72070: LD_INT 0
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 0
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: PUSH
72091: LD_STRING E
72093: PUSH
72094: LD_INT 0
72096: PUSH
72097: LD_INT 0
72099: PUSH
72100: LD_VAR 0 3
72104: PUSH
72105: LD_INT 0
72107: PUSH
72108: LD_INT 0
72110: PUSH
72111: LD_INT 0
72113: PUSH
72114: EMPTY
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PPUSH
72127: CALL_OW 446
// end ;
72131: LD_VAR 0 2
72135: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72136: LD_INT 0
72138: PPUSH
72139: PPUSH
// if not driver or not IsInUnit ( driver ) then
72140: LD_VAR 0 1
72144: NOT
72145: PUSH
72146: LD_VAR 0 1
72150: PPUSH
72151: CALL_OW 310
72155: NOT
72156: OR
72157: IFFALSE 72161
// exit ;
72159: GO 72251
// vehicle := IsInUnit ( driver ) ;
72161: LD_ADDR_VAR 0 3
72165: PUSH
72166: LD_VAR 0 1
72170: PPUSH
72171: CALL_OW 310
72175: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72176: LD_VAR 0 1
72180: PPUSH
72181: LD_STRING \
72183: PUSH
72184: LD_INT 0
72186: PUSH
72187: LD_INT 0
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: LD_INT 0
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: PUSH
72211: LD_STRING E
72213: PUSH
72214: LD_INT 0
72216: PUSH
72217: LD_INT 0
72219: PUSH
72220: LD_VAR 0 3
72224: PUSH
72225: LD_INT 0
72227: PUSH
72228: LD_INT 0
72230: PUSH
72231: LD_INT 0
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PPUSH
72247: CALL_OW 447
// end ;
72251: LD_VAR 0 2
72255: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72256: LD_INT 0
72258: PPUSH
72259: PPUSH
72260: PPUSH
// tmp := [ ] ;
72261: LD_ADDR_VAR 0 5
72265: PUSH
72266: EMPTY
72267: ST_TO_ADDR
// for i in units do
72268: LD_ADDR_VAR 0 4
72272: PUSH
72273: LD_VAR 0 1
72277: PUSH
72278: FOR_IN
72279: IFFALSE 72317
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72281: LD_ADDR_VAR 0 5
72285: PUSH
72286: LD_VAR 0 5
72290: PPUSH
72291: LD_VAR 0 5
72295: PUSH
72296: LD_INT 1
72298: PLUS
72299: PPUSH
72300: LD_VAR 0 4
72304: PPUSH
72305: CALL_OW 256
72309: PPUSH
72310: CALL_OW 2
72314: ST_TO_ADDR
72315: GO 72278
72317: POP
72318: POP
// if not tmp then
72319: LD_VAR 0 5
72323: NOT
72324: IFFALSE 72328
// exit ;
72326: GO 72376
// if asc then
72328: LD_VAR 0 2
72332: IFFALSE 72356
// result := SortListByListAsc ( units , tmp ) else
72334: LD_ADDR_VAR 0 3
72338: PUSH
72339: LD_VAR 0 1
72343: PPUSH
72344: LD_VAR 0 5
72348: PPUSH
72349: CALL_OW 76
72353: ST_TO_ADDR
72354: GO 72376
// result := SortListByListDesc ( units , tmp ) ;
72356: LD_ADDR_VAR 0 3
72360: PUSH
72361: LD_VAR 0 1
72365: PPUSH
72366: LD_VAR 0 5
72370: PPUSH
72371: CALL_OW 77
72375: ST_TO_ADDR
// end ;
72376: LD_VAR 0 3
72380: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72381: LD_INT 0
72383: PPUSH
72384: PPUSH
// task := GetTaskList ( mech ) ;
72385: LD_ADDR_VAR 0 4
72389: PUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: CALL_OW 437
72399: ST_TO_ADDR
// if not task then
72400: LD_VAR 0 4
72404: NOT
72405: IFFALSE 72409
// exit ;
72407: GO 72451
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72409: LD_ADDR_VAR 0 3
72413: PUSH
72414: LD_VAR 0 4
72418: PUSH
72419: LD_INT 1
72421: ARRAY
72422: PUSH
72423: LD_INT 1
72425: ARRAY
72426: PUSH
72427: LD_STRING r
72429: EQUAL
72430: PUSH
72431: LD_VAR 0 4
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: PUSH
72440: LD_INT 4
72442: ARRAY
72443: PUSH
72444: LD_VAR 0 2
72448: EQUAL
72449: AND
72450: ST_TO_ADDR
// end ;
72451: LD_VAR 0 3
72455: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72456: LD_INT 0
72458: PPUSH
// SetDir ( unit , d ) ;
72459: LD_VAR 0 1
72463: PPUSH
72464: LD_VAR 0 4
72468: PPUSH
72469: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72473: LD_VAR 0 1
72477: PPUSH
72478: LD_VAR 0 2
72482: PPUSH
72483: LD_VAR 0 3
72487: PPUSH
72488: LD_VAR 0 5
72492: PPUSH
72493: CALL_OW 48
// end ;
72497: LD_VAR 0 6
72501: RET
// export function ToNaturalNumber ( number ) ; begin
72502: LD_INT 0
72504: PPUSH
// result := number div 1 ;
72505: LD_ADDR_VAR 0 2
72509: PUSH
72510: LD_VAR 0 1
72514: PUSH
72515: LD_INT 1
72517: DIV
72518: ST_TO_ADDR
// if number < 0 then
72519: LD_VAR 0 1
72523: PUSH
72524: LD_INT 0
72526: LESS
72527: IFFALSE 72537
// result := 0 ;
72529: LD_ADDR_VAR 0 2
72533: PUSH
72534: LD_INT 0
72536: ST_TO_ADDR
// end ;
72537: LD_VAR 0 2
72541: RET
// export function SortByClass ( units , class ) ; var un ; begin
72542: LD_INT 0
72544: PPUSH
72545: PPUSH
// if not units or not class then
72546: LD_VAR 0 1
72550: NOT
72551: PUSH
72552: LD_VAR 0 2
72556: NOT
72557: OR
72558: IFFALSE 72562
// exit ;
72560: GO 72657
// result := [ ] ;
72562: LD_ADDR_VAR 0 3
72566: PUSH
72567: EMPTY
72568: ST_TO_ADDR
// for un in units do
72569: LD_ADDR_VAR 0 4
72573: PUSH
72574: LD_VAR 0 1
72578: PUSH
72579: FOR_IN
72580: IFFALSE 72655
// if GetClass ( un ) = class then
72582: LD_VAR 0 4
72586: PPUSH
72587: CALL_OW 257
72591: PUSH
72592: LD_VAR 0 2
72596: EQUAL
72597: IFFALSE 72624
// result := Insert ( result , 1 , un ) else
72599: LD_ADDR_VAR 0 3
72603: PUSH
72604: LD_VAR 0 3
72608: PPUSH
72609: LD_INT 1
72611: PPUSH
72612: LD_VAR 0 4
72616: PPUSH
72617: CALL_OW 2
72621: ST_TO_ADDR
72622: GO 72653
// result := Replace ( result , result + 1 , un ) ;
72624: LD_ADDR_VAR 0 3
72628: PUSH
72629: LD_VAR 0 3
72633: PPUSH
72634: LD_VAR 0 3
72638: PUSH
72639: LD_INT 1
72641: PLUS
72642: PPUSH
72643: LD_VAR 0 4
72647: PPUSH
72648: CALL_OW 1
72652: ST_TO_ADDR
72653: GO 72579
72655: POP
72656: POP
// end ;
72657: LD_VAR 0 3
72661: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72662: LD_INT 0
72664: PPUSH
72665: PPUSH
72666: PPUSH
72667: PPUSH
72668: PPUSH
72669: PPUSH
72670: PPUSH
// result := [ ] ;
72671: LD_ADDR_VAR 0 4
72675: PUSH
72676: EMPTY
72677: ST_TO_ADDR
// if x - r < 0 then
72678: LD_VAR 0 1
72682: PUSH
72683: LD_VAR 0 3
72687: MINUS
72688: PUSH
72689: LD_INT 0
72691: LESS
72692: IFFALSE 72704
// min_x := 0 else
72694: LD_ADDR_VAR 0 8
72698: PUSH
72699: LD_INT 0
72701: ST_TO_ADDR
72702: GO 72720
// min_x := x - r ;
72704: LD_ADDR_VAR 0 8
72708: PUSH
72709: LD_VAR 0 1
72713: PUSH
72714: LD_VAR 0 3
72718: MINUS
72719: ST_TO_ADDR
// if y - r < 0 then
72720: LD_VAR 0 2
72724: PUSH
72725: LD_VAR 0 3
72729: MINUS
72730: PUSH
72731: LD_INT 0
72733: LESS
72734: IFFALSE 72746
// min_y := 0 else
72736: LD_ADDR_VAR 0 7
72740: PUSH
72741: LD_INT 0
72743: ST_TO_ADDR
72744: GO 72762
// min_y := y - r ;
72746: LD_ADDR_VAR 0 7
72750: PUSH
72751: LD_VAR 0 2
72755: PUSH
72756: LD_VAR 0 3
72760: MINUS
72761: ST_TO_ADDR
// max_x := x + r ;
72762: LD_ADDR_VAR 0 9
72766: PUSH
72767: LD_VAR 0 1
72771: PUSH
72772: LD_VAR 0 3
72776: PLUS
72777: ST_TO_ADDR
// max_y := y + r ;
72778: LD_ADDR_VAR 0 10
72782: PUSH
72783: LD_VAR 0 2
72787: PUSH
72788: LD_VAR 0 3
72792: PLUS
72793: ST_TO_ADDR
// for _x = min_x to max_x do
72794: LD_ADDR_VAR 0 5
72798: PUSH
72799: DOUBLE
72800: LD_VAR 0 8
72804: DEC
72805: ST_TO_ADDR
72806: LD_VAR 0 9
72810: PUSH
72811: FOR_TO
72812: IFFALSE 72913
// for _y = min_y to max_y do
72814: LD_ADDR_VAR 0 6
72818: PUSH
72819: DOUBLE
72820: LD_VAR 0 7
72824: DEC
72825: ST_TO_ADDR
72826: LD_VAR 0 10
72830: PUSH
72831: FOR_TO
72832: IFFALSE 72909
// begin if not ValidHex ( _x , _y ) then
72834: LD_VAR 0 5
72838: PPUSH
72839: LD_VAR 0 6
72843: PPUSH
72844: CALL_OW 488
72848: NOT
72849: IFFALSE 72853
// continue ;
72851: GO 72831
// if GetResourceTypeXY ( _x , _y ) then
72853: LD_VAR 0 5
72857: PPUSH
72858: LD_VAR 0 6
72862: PPUSH
72863: CALL_OW 283
72867: IFFALSE 72907
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72869: LD_ADDR_VAR 0 4
72873: PUSH
72874: LD_VAR 0 4
72878: PPUSH
72879: LD_VAR 0 4
72883: PUSH
72884: LD_INT 1
72886: PLUS
72887: PPUSH
72888: LD_VAR 0 5
72892: PUSH
72893: LD_VAR 0 6
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PPUSH
72902: CALL_OW 1
72906: ST_TO_ADDR
// end ;
72907: GO 72831
72909: POP
72910: POP
72911: GO 72811
72913: POP
72914: POP
// end ;
72915: LD_VAR 0 4
72919: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72920: LD_INT 0
72922: PPUSH
72923: PPUSH
72924: PPUSH
72925: PPUSH
72926: PPUSH
72927: PPUSH
72928: PPUSH
72929: PPUSH
// if not units then
72930: LD_VAR 0 1
72934: NOT
72935: IFFALSE 72939
// exit ;
72937: GO 73463
// result := UnitFilter ( units , [ f_ok ] ) ;
72939: LD_ADDR_VAR 0 3
72943: PUSH
72944: LD_VAR 0 1
72948: PPUSH
72949: LD_INT 50
72951: PUSH
72952: EMPTY
72953: LIST
72954: PPUSH
72955: CALL_OW 72
72959: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72960: LD_ADDR_VAR 0 8
72964: PUSH
72965: LD_VAR 0 1
72969: PUSH
72970: LD_INT 1
72972: ARRAY
72973: PPUSH
72974: CALL_OW 255
72978: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72979: LD_ADDR_VAR 0 10
72983: PUSH
72984: LD_INT 29
72986: PUSH
72987: LD_INT 91
72989: PUSH
72990: LD_INT 49
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: ST_TO_ADDR
// if not result then
72998: LD_VAR 0 3
73002: NOT
73003: IFFALSE 73007
// exit ;
73005: GO 73463
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73007: LD_ADDR_VAR 0 5
73011: PUSH
73012: LD_INT 81
73014: PUSH
73015: LD_VAR 0 8
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PPUSH
73024: CALL_OW 69
73028: ST_TO_ADDR
// for i in result do
73029: LD_ADDR_VAR 0 4
73033: PUSH
73034: LD_VAR 0 3
73038: PUSH
73039: FOR_IN
73040: IFFALSE 73461
// begin tag := GetTag ( i ) + 1 ;
73042: LD_ADDR_VAR 0 9
73046: PUSH
73047: LD_VAR 0 4
73051: PPUSH
73052: CALL_OW 110
73056: PUSH
73057: LD_INT 1
73059: PLUS
73060: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73061: LD_ADDR_VAR 0 7
73065: PUSH
73066: LD_VAR 0 4
73070: PPUSH
73071: CALL_OW 250
73075: PPUSH
73076: LD_VAR 0 4
73080: PPUSH
73081: CALL_OW 251
73085: PPUSH
73086: LD_INT 6
73088: PPUSH
73089: CALL 72662 0 3
73093: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73094: LD_VAR 0 4
73098: PPUSH
73099: CALL_OW 247
73103: PUSH
73104: LD_INT 2
73106: EQUAL
73107: PUSH
73108: LD_VAR 0 7
73112: AND
73113: PUSH
73114: LD_VAR 0 4
73118: PPUSH
73119: CALL_OW 264
73123: PUSH
73124: LD_VAR 0 10
73128: IN
73129: NOT
73130: AND
73131: IFFALSE 73170
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73133: LD_VAR 0 4
73137: PPUSH
73138: LD_VAR 0 7
73142: PUSH
73143: LD_INT 1
73145: ARRAY
73146: PUSH
73147: LD_INT 1
73149: ARRAY
73150: PPUSH
73151: LD_VAR 0 7
73155: PUSH
73156: LD_INT 1
73158: ARRAY
73159: PUSH
73160: LD_INT 2
73162: ARRAY
73163: PPUSH
73164: CALL_OW 116
73168: GO 73459
// if path > tag then
73170: LD_VAR 0 2
73174: PUSH
73175: LD_VAR 0 9
73179: GREATER
73180: IFFALSE 73388
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73182: LD_ADDR_VAR 0 6
73186: PUSH
73187: LD_VAR 0 5
73191: PPUSH
73192: LD_INT 91
73194: PUSH
73195: LD_VAR 0 4
73199: PUSH
73200: LD_INT 8
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: LIST
73207: PPUSH
73208: CALL_OW 72
73212: ST_TO_ADDR
// if nearEnemy then
73213: LD_VAR 0 6
73217: IFFALSE 73286
// begin if GetWeapon ( i ) = ru_time_lapser then
73219: LD_VAR 0 4
73223: PPUSH
73224: CALL_OW 264
73228: PUSH
73229: LD_INT 49
73231: EQUAL
73232: IFFALSE 73260
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73234: LD_VAR 0 4
73238: PPUSH
73239: LD_VAR 0 6
73243: PPUSH
73244: LD_VAR 0 4
73248: PPUSH
73249: CALL_OW 74
73253: PPUSH
73254: CALL_OW 112
73258: GO 73284
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73260: LD_VAR 0 4
73264: PPUSH
73265: LD_VAR 0 6
73269: PPUSH
73270: LD_VAR 0 4
73274: PPUSH
73275: CALL_OW 74
73279: PPUSH
73280: CALL_OW 115
// end else
73284: GO 73386
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73286: LD_VAR 0 4
73290: PPUSH
73291: LD_VAR 0 2
73295: PUSH
73296: LD_VAR 0 9
73300: ARRAY
73301: PUSH
73302: LD_INT 1
73304: ARRAY
73305: PPUSH
73306: LD_VAR 0 2
73310: PUSH
73311: LD_VAR 0 9
73315: ARRAY
73316: PUSH
73317: LD_INT 2
73319: ARRAY
73320: PPUSH
73321: CALL_OW 297
73325: PUSH
73326: LD_INT 6
73328: GREATER
73329: IFFALSE 73372
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73331: LD_VAR 0 4
73335: PPUSH
73336: LD_VAR 0 2
73340: PUSH
73341: LD_VAR 0 9
73345: ARRAY
73346: PUSH
73347: LD_INT 1
73349: ARRAY
73350: PPUSH
73351: LD_VAR 0 2
73355: PUSH
73356: LD_VAR 0 9
73360: ARRAY
73361: PUSH
73362: LD_INT 2
73364: ARRAY
73365: PPUSH
73366: CALL_OW 114
73370: GO 73386
// SetTag ( i , tag ) ;
73372: LD_VAR 0 4
73376: PPUSH
73377: LD_VAR 0 9
73381: PPUSH
73382: CALL_OW 109
// end else
73386: GO 73459
// if enemy then
73388: LD_VAR 0 5
73392: IFFALSE 73459
// begin if GetWeapon ( i ) = ru_time_lapser then
73394: LD_VAR 0 4
73398: PPUSH
73399: CALL_OW 264
73403: PUSH
73404: LD_INT 49
73406: EQUAL
73407: IFFALSE 73435
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73409: LD_VAR 0 4
73413: PPUSH
73414: LD_VAR 0 5
73418: PPUSH
73419: LD_VAR 0 4
73423: PPUSH
73424: CALL_OW 74
73428: PPUSH
73429: CALL_OW 112
73433: GO 73459
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73435: LD_VAR 0 4
73439: PPUSH
73440: LD_VAR 0 5
73444: PPUSH
73445: LD_VAR 0 4
73449: PPUSH
73450: CALL_OW 74
73454: PPUSH
73455: CALL_OW 115
// end ; end ;
73459: GO 73039
73461: POP
73462: POP
// end ;
73463: LD_VAR 0 3
73467: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73468: LD_INT 0
73470: PPUSH
73471: PPUSH
73472: PPUSH
// if not unit or IsInUnit ( unit ) then
73473: LD_VAR 0 1
73477: NOT
73478: PUSH
73479: LD_VAR 0 1
73483: PPUSH
73484: CALL_OW 310
73488: OR
73489: IFFALSE 73493
// exit ;
73491: GO 73584
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73493: LD_ADDR_VAR 0 4
73497: PUSH
73498: LD_VAR 0 1
73502: PPUSH
73503: CALL_OW 250
73507: PPUSH
73508: LD_VAR 0 2
73512: PPUSH
73513: LD_INT 1
73515: PPUSH
73516: CALL_OW 272
73520: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73521: LD_ADDR_VAR 0 5
73525: PUSH
73526: LD_VAR 0 1
73530: PPUSH
73531: CALL_OW 251
73535: PPUSH
73536: LD_VAR 0 2
73540: PPUSH
73541: LD_INT 1
73543: PPUSH
73544: CALL_OW 273
73548: ST_TO_ADDR
// if ValidHex ( x , y ) then
73549: LD_VAR 0 4
73553: PPUSH
73554: LD_VAR 0 5
73558: PPUSH
73559: CALL_OW 488
73563: IFFALSE 73584
// ComTurnXY ( unit , x , y ) ;
73565: LD_VAR 0 1
73569: PPUSH
73570: LD_VAR 0 4
73574: PPUSH
73575: LD_VAR 0 5
73579: PPUSH
73580: CALL_OW 118
// end ;
73584: LD_VAR 0 3
73588: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73589: LD_INT 0
73591: PPUSH
73592: PPUSH
// result := false ;
73593: LD_ADDR_VAR 0 3
73597: PUSH
73598: LD_INT 0
73600: ST_TO_ADDR
// if not units then
73601: LD_VAR 0 2
73605: NOT
73606: IFFALSE 73610
// exit ;
73608: GO 73655
// for i in units do
73610: LD_ADDR_VAR 0 4
73614: PUSH
73615: LD_VAR 0 2
73619: PUSH
73620: FOR_IN
73621: IFFALSE 73653
// if See ( side , i ) then
73623: LD_VAR 0 1
73627: PPUSH
73628: LD_VAR 0 4
73632: PPUSH
73633: CALL_OW 292
73637: IFFALSE 73651
// begin result := true ;
73639: LD_ADDR_VAR 0 3
73643: PUSH
73644: LD_INT 1
73646: ST_TO_ADDR
// exit ;
73647: POP
73648: POP
73649: GO 73655
// end ;
73651: GO 73620
73653: POP
73654: POP
// end ;
73655: LD_VAR 0 3
73659: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73660: LD_INT 0
73662: PPUSH
73663: PPUSH
73664: PPUSH
73665: PPUSH
// if not unit or not points then
73666: LD_VAR 0 1
73670: NOT
73671: PUSH
73672: LD_VAR 0 2
73676: NOT
73677: OR
73678: IFFALSE 73682
// exit ;
73680: GO 73772
// dist := 99999 ;
73682: LD_ADDR_VAR 0 5
73686: PUSH
73687: LD_INT 99999
73689: ST_TO_ADDR
// for i in points do
73690: LD_ADDR_VAR 0 4
73694: PUSH
73695: LD_VAR 0 2
73699: PUSH
73700: FOR_IN
73701: IFFALSE 73770
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73703: LD_ADDR_VAR 0 6
73707: PUSH
73708: LD_VAR 0 1
73712: PPUSH
73713: LD_VAR 0 4
73717: PUSH
73718: LD_INT 1
73720: ARRAY
73721: PPUSH
73722: LD_VAR 0 4
73726: PUSH
73727: LD_INT 2
73729: ARRAY
73730: PPUSH
73731: CALL_OW 297
73735: ST_TO_ADDR
// if tmpDist < dist then
73736: LD_VAR 0 6
73740: PUSH
73741: LD_VAR 0 5
73745: LESS
73746: IFFALSE 73768
// begin result := i ;
73748: LD_ADDR_VAR 0 3
73752: PUSH
73753: LD_VAR 0 4
73757: ST_TO_ADDR
// dist := tmpDist ;
73758: LD_ADDR_VAR 0 5
73762: PUSH
73763: LD_VAR 0 6
73767: ST_TO_ADDR
// end ; end ;
73768: GO 73700
73770: POP
73771: POP
// end ;
73772: LD_VAR 0 3
73776: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73777: LD_INT 0
73779: PPUSH
// uc_side := side ;
73780: LD_ADDR_OWVAR 20
73784: PUSH
73785: LD_VAR 0 1
73789: ST_TO_ADDR
// uc_nation := 3 ;
73790: LD_ADDR_OWVAR 21
73794: PUSH
73795: LD_INT 3
73797: ST_TO_ADDR
// vc_chassis := 25 ;
73798: LD_ADDR_OWVAR 37
73802: PUSH
73803: LD_INT 25
73805: ST_TO_ADDR
// vc_engine := engine_siberite ;
73806: LD_ADDR_OWVAR 39
73810: PUSH
73811: LD_INT 3
73813: ST_TO_ADDR
// vc_control := control_computer ;
73814: LD_ADDR_OWVAR 38
73818: PUSH
73819: LD_INT 3
73821: ST_TO_ADDR
// vc_weapon := 59 ;
73822: LD_ADDR_OWVAR 40
73826: PUSH
73827: LD_INT 59
73829: ST_TO_ADDR
// result := CreateVehicle ;
73830: LD_ADDR_VAR 0 5
73834: PUSH
73835: CALL_OW 45
73839: ST_TO_ADDR
// SetDir ( result , d ) ;
73840: LD_VAR 0 5
73844: PPUSH
73845: LD_VAR 0 4
73849: PPUSH
73850: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73854: LD_VAR 0 5
73858: PPUSH
73859: LD_VAR 0 2
73863: PPUSH
73864: LD_VAR 0 3
73868: PPUSH
73869: LD_INT 0
73871: PPUSH
73872: CALL_OW 48
// end ;
73876: LD_VAR 0 5
73880: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73881: LD_INT 0
73883: PPUSH
73884: PPUSH
73885: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73886: LD_ADDR_VAR 0 2
73890: PUSH
73891: LD_INT 0
73893: PUSH
73894: LD_INT 0
73896: PUSH
73897: LD_INT 0
73899: PUSH
73900: LD_INT 0
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73909: LD_VAR 0 1
73913: NOT
73914: PUSH
73915: LD_VAR 0 1
73919: PPUSH
73920: CALL_OW 264
73924: PUSH
73925: LD_INT 12
73927: PUSH
73928: LD_INT 51
73930: PUSH
73931: LD_INT 32
73933: PUSH
73934: LD_INT 89
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: IN
73943: NOT
73944: OR
73945: IFFALSE 73949
// exit ;
73947: GO 74047
// for i := 1 to 3 do
73949: LD_ADDR_VAR 0 3
73953: PUSH
73954: DOUBLE
73955: LD_INT 1
73957: DEC
73958: ST_TO_ADDR
73959: LD_INT 3
73961: PUSH
73962: FOR_TO
73963: IFFALSE 74045
// begin tmp := GetCargo ( cargo , i ) ;
73965: LD_ADDR_VAR 0 4
73969: PUSH
73970: LD_VAR 0 1
73974: PPUSH
73975: LD_VAR 0 3
73979: PPUSH
73980: CALL_OW 289
73984: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73985: LD_ADDR_VAR 0 2
73989: PUSH
73990: LD_VAR 0 2
73994: PPUSH
73995: LD_VAR 0 3
73999: PPUSH
74000: LD_VAR 0 4
74004: PPUSH
74005: CALL_OW 1
74009: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74010: LD_ADDR_VAR 0 2
74014: PUSH
74015: LD_VAR 0 2
74019: PPUSH
74020: LD_INT 4
74022: PPUSH
74023: LD_VAR 0 2
74027: PUSH
74028: LD_INT 4
74030: ARRAY
74031: PUSH
74032: LD_VAR 0 4
74036: PLUS
74037: PPUSH
74038: CALL_OW 1
74042: ST_TO_ADDR
// end ;
74043: GO 73962
74045: POP
74046: POP
// end ;
74047: LD_VAR 0 2
74051: RET
// export function Length ( array ) ; begin
74052: LD_INT 0
74054: PPUSH
// result := array + 0 ;
74055: LD_ADDR_VAR 0 2
74059: PUSH
74060: LD_VAR 0 1
74064: PUSH
74065: LD_INT 0
74067: PLUS
74068: ST_TO_ADDR
// end ;
74069: LD_VAR 0 2
74073: RET
// export function PrepareArray ( array ) ; begin
74074: LD_INT 0
74076: PPUSH
// result := array diff 0 ;
74077: LD_ADDR_VAR 0 2
74081: PUSH
74082: LD_VAR 0 1
74086: PUSH
74087: LD_INT 0
74089: DIFF
74090: ST_TO_ADDR
// if not result [ 1 ] then
74091: LD_VAR 0 2
74095: PUSH
74096: LD_INT 1
74098: ARRAY
74099: NOT
74100: IFFALSE 74120
// result := Delete ( result , 1 ) ;
74102: LD_ADDR_VAR 0 2
74106: PUSH
74107: LD_VAR 0 2
74111: PPUSH
74112: LD_INT 1
74114: PPUSH
74115: CALL_OW 3
74119: ST_TO_ADDR
// end ;
74120: LD_VAR 0 2
74124: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74125: LD_INT 0
74127: PPUSH
74128: PPUSH
74129: PPUSH
74130: PPUSH
// sibRocketRange := 25 ;
74131: LD_ADDR_VAR 0 6
74135: PUSH
74136: LD_INT 25
74138: ST_TO_ADDR
// result := false ;
74139: LD_ADDR_VAR 0 4
74143: PUSH
74144: LD_INT 0
74146: ST_TO_ADDR
// for i := 0 to 5 do
74147: LD_ADDR_VAR 0 5
74151: PUSH
74152: DOUBLE
74153: LD_INT 0
74155: DEC
74156: ST_TO_ADDR
74157: LD_INT 5
74159: PUSH
74160: FOR_TO
74161: IFFALSE 74228
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74163: LD_VAR 0 1
74167: PPUSH
74168: LD_VAR 0 5
74172: PPUSH
74173: LD_VAR 0 6
74177: PPUSH
74178: CALL_OW 272
74182: PPUSH
74183: LD_VAR 0 2
74187: PPUSH
74188: LD_VAR 0 5
74192: PPUSH
74193: LD_VAR 0 6
74197: PPUSH
74198: CALL_OW 273
74202: PPUSH
74203: LD_VAR 0 3
74207: PPUSH
74208: CALL_OW 309
74212: IFFALSE 74226
// begin result := true ;
74214: LD_ADDR_VAR 0 4
74218: PUSH
74219: LD_INT 1
74221: ST_TO_ADDR
// exit ;
74222: POP
74223: POP
74224: GO 74230
// end ;
74226: GO 74160
74228: POP
74229: POP
// end ;
74230: LD_VAR 0 4
74234: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74235: LD_INT 0
74237: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74238: LD_VAR 0 1
74242: PPUSH
74243: LD_VAR 0 2
74247: PPUSH
74248: LD_INT 0
74250: PPUSH
74251: LD_INT 0
74253: PPUSH
74254: LD_INT 1
74256: PPUSH
74257: LD_INT 0
74259: PPUSH
74260: CALL_OW 587
// end ; end_of_file
74264: LD_VAR 0 3
74268: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74269: LD_VAR 0 1
74273: PUSH
74274: LD_INT 200
74276: DOUBLE
74277: GREATEREQUAL
74278: IFFALSE 74286
74280: LD_INT 299
74282: DOUBLE
74283: LESSEQUAL
74284: IFTRUE 74288
74286: GO 74320
74288: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74289: LD_VAR 0 1
74293: PPUSH
74294: LD_VAR 0 2
74298: PPUSH
74299: LD_VAR 0 3
74303: PPUSH
74304: LD_VAR 0 4
74308: PPUSH
74309: LD_VAR 0 5
74313: PPUSH
74314: CALL 28935 0 5
74318: GO 74397
74320: LD_INT 300
74322: DOUBLE
74323: GREATEREQUAL
74324: IFFALSE 74332
74326: LD_INT 399
74328: DOUBLE
74329: LESSEQUAL
74330: IFTRUE 74334
74332: GO 74396
74334: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74335: LD_VAR 0 1
74339: PPUSH
74340: LD_VAR 0 2
74344: PPUSH
74345: LD_VAR 0 3
74349: PPUSH
74350: LD_VAR 0 4
74354: PPUSH
74355: LD_VAR 0 5
74359: PPUSH
74360: LD_VAR 0 6
74364: PPUSH
74365: LD_VAR 0 7
74369: PPUSH
74370: LD_VAR 0 8
74374: PPUSH
74375: LD_VAR 0 9
74379: PPUSH
74380: LD_VAR 0 10
74384: PPUSH
74385: LD_VAR 0 11
74389: PPUSH
74390: CALL 25268 0 11
74394: GO 74397
74396: POP
// end ;
74397: PPOPN 11
74399: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74400: LD_VAR 0 1
74404: PPUSH
74405: LD_VAR 0 2
74409: PPUSH
74410: LD_VAR 0 3
74414: PPUSH
74415: LD_VAR 0 4
74419: PPUSH
74420: LD_VAR 0 5
74424: PPUSH
74425: CALL 28671 0 5
// end ; end_of_file
74429: PPOPN 5
74431: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74432: LD_VAR 0 1
74436: PPUSH
74437: LD_VAR 0 2
74441: PPUSH
74442: LD_VAR 0 3
74446: PPUSH
74447: LD_VAR 0 4
74451: PPUSH
74452: LD_VAR 0 5
74456: PPUSH
74457: LD_VAR 0 6
74461: PPUSH
74462: CALL 12888 0 6
// end ;
74466: PPOPN 6
74468: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74469: LD_INT 0
74471: PPUSH
// begin if not units then
74472: LD_VAR 0 1
74476: NOT
74477: IFFALSE 74481
// exit ;
74479: GO 74481
// end ;
74481: PPOPN 7
74483: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74484: CALL 12782 0 0
// end ;
74488: PPOPN 1
74490: END
