// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 533 0 0
// PrepareAmericans ;
  23: CALL 830 0 0
// PrepareArabian ;
  27: CALL 11302 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 214 0 0
// Action ;
  41: CALL 4657 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: EMPTY
 151: LIST
 152: LIST
 153: LIST
 154: PUSH
 155: LD_OWVAR 67
 159: ARRAY
 160: ST_TO_ADDR
// trickyMove := false ;
 161: LD_ADDR_EXP 15
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// gladstoneEscaped := false ;
 169: LD_ADDR_EXP 12
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// prefix := 01_ ;
 177: LD_ADDR_EXP 2
 181: PUSH
 182: LD_STRING 01_
 184: ST_TO_ADDR
// trap := 0 ;
 185: LD_ADDR_EXP 17
 189: PUSH
 190: LD_INT 0
 192: ST_TO_ADDR
// lostCounter := false ;
 193: LD_ADDR_EXP 18
 197: PUSH
 198: LD_INT 0
 200: ST_TO_ADDR
// spottedBeforeRadio := false ;
 201: LD_ADDR_EXP 6
 205: PUSH
 206: LD_INT 0
 208: ST_TO_ADDR
// end ;
 209: LD_VAR 0 1
 213: RET
// function DebugMode ; begin
 214: LD_INT 0
 216: PPUSH
// FogOff ( 1 ) ;
 217: LD_INT 1
 219: PPUSH
 220: CALL_OW 344
// Difficulty := 2 ;
 224: LD_ADDR_OWVAR 67
 228: PUSH
 229: LD_INT 2
 231: ST_TO_ADDR
// end ; end_of_file
 232: LD_VAR 0 1
 236: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 237: LD_INT 0
 239: PPUSH
// uc_side := side ;
 240: LD_ADDR_OWVAR 20
 244: PUSH
 245: LD_VAR 0 1
 249: ST_TO_ADDR
// uc_nation := nation ;
 250: LD_ADDR_OWVAR 21
 254: PUSH
 255: LD_VAR 0 2
 259: ST_TO_ADDR
// vc_chassis := chassis ;
 260: LD_ADDR_OWVAR 37
 264: PUSH
 265: LD_VAR 0 3
 269: ST_TO_ADDR
// vc_engine := engine ;
 270: LD_ADDR_OWVAR 39
 274: PUSH
 275: LD_VAR 0 4
 279: ST_TO_ADDR
// vc_control := control ;
 280: LD_ADDR_OWVAR 38
 284: PUSH
 285: LD_VAR 0 5
 289: ST_TO_ADDR
// vc_weapon := weapon ;
 290: LD_ADDR_OWVAR 40
 294: PUSH
 295: LD_VAR 0 6
 299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 300: LD_ADDR_OWVAR 41
 304: PUSH
 305: LD_VAR 0 7
 309: ST_TO_ADDR
// result := CreateVehicle ;
 310: LD_ADDR_VAR 0 8
 314: PUSH
 315: CALL_OW 45
 319: ST_TO_ADDR
// end ;
 320: LD_VAR 0 8
 324: RET
// export function SayX ( units , ident ) ; var i ; begin
 325: LD_INT 0
 327: PPUSH
 328: PPUSH
// result := false ;
 329: LD_ADDR_VAR 0 3
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// if not units then
 337: LD_VAR 0 1
 341: NOT
 342: IFFALSE 346
// exit ;
 344: GO 400
// for i in units do
 346: LD_ADDR_VAR 0 4
 350: PUSH
 351: LD_VAR 0 1
 355: PUSH
 356: FOR_IN
 357: IFFALSE 398
// if IsOk ( i ) then
 359: LD_VAR 0 4
 363: PPUSH
 364: CALL_OW 302
 368: IFFALSE 396
// begin Say ( i , ident ) ;
 370: LD_VAR 0 4
 374: PPUSH
 375: LD_VAR 0 2
 379: PPUSH
 380: CALL_OW 88
// result := i ;
 384: LD_ADDR_VAR 0 3
 388: PUSH
 389: LD_VAR 0 4
 393: ST_TO_ADDR
// break ;
 394: GO 398
// end ;
 396: GO 356
 398: POP
 399: POP
// end ;
 400: LD_VAR 0 3
 404: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 405: LD_INT 0
 407: PPUSH
 408: PPUSH
// InitUc ;
 409: CALL_OW 18
// InitHc ;
 413: CALL_OW 19
// uc_side := 0 ;
 417: LD_ADDR_OWVAR 20
 421: PUSH
 422: LD_INT 0
 424: ST_TO_ADDR
// uc_nation := 0 ;
 425: LD_ADDR_OWVAR 21
 429: PUSH
 430: LD_INT 0
 432: ST_TO_ADDR
// for i = 1 to amount do
 433: LD_ADDR_VAR 0 4
 437: PUSH
 438: DOUBLE
 439: LD_INT 1
 441: DEC
 442: ST_TO_ADDR
 443: LD_VAR 0 2
 447: PUSH
 448: FOR_TO
 449: IFFALSE 522
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 451: LD_ADDR_OWVAR 29
 455: PUSH
 456: LD_INT 9
 458: PPUSH
 459: LD_INT 12
 461: PPUSH
 462: CALL_OW 12
 466: PUSH
 467: LD_INT 9
 469: PPUSH
 470: LD_INT 12
 472: PPUSH
 473: CALL_OW 12
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// hc_agressivity := 0 ;
 482: LD_ADDR_OWVAR 35
 486: PUSH
 487: LD_INT 0
 489: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 490: LD_INT 0
 492: PPUSH
 493: LD_INT 12
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 503: CALL_OW 44
 507: PPUSH
 508: LD_VAR 0 1
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 448
 522: POP
 523: POP
// InitHc ;
 524: CALL_OW 19
// end ;
 528: LD_VAR 0 3
 532: RET
// export function CreateNature ; var i ; begin
 533: LD_INT 0
 535: PPUSH
 536: PPUSH
// SpawnApeman ( forest , 9 ) ;
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9
 542: PPUSH
 543: CALL 405 0 2
// for i := 1 to 4 do
 547: LD_ADDR_VAR 0 2
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_INT 4
 559: PUSH
 560: FOR_TO
 561: IFFALSE 596
// begin hc_class := 21 ;
 563: LD_ADDR_OWVAR 28
 567: PUSH
 568: LD_INT 21
 570: ST_TO_ADDR
// hc_gallery :=  ;
 571: LD_ADDR_OWVAR 33
 575: PUSH
 576: LD_STRING 
 578: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 579: CALL_OW 44
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL_OW 49
// end ;
 594: GO 560
 596: POP
 597: POP
// for i := 1 to 2 do
 598: LD_ADDR_VAR 0 2
 602: PUSH
 603: DOUBLE
 604: LD_INT 1
 606: DEC
 607: ST_TO_ADDR
 608: LD_INT 2
 610: PUSH
 611: FOR_TO
 612: IFFALSE 647
// begin hc_class := 18 ;
 614: LD_ADDR_OWVAR 28
 618: PUSH
 619: LD_INT 18
 621: ST_TO_ADDR
// hc_gallery :=  ;
 622: LD_ADDR_OWVAR 33
 626: PUSH
 627: LD_STRING 
 629: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 630: CALL_OW 44
 634: PPUSH
 635: LD_INT 1
 637: PPUSH
 638: LD_INT 0
 640: PPUSH
 641: CALL_OW 49
// end ;
 645: GO 611
 647: POP
 648: POP
// for i := 1 to 3 do
 649: LD_ADDR_VAR 0 2
 653: PUSH
 654: DOUBLE
 655: LD_INT 1
 657: DEC
 658: ST_TO_ADDR
 659: LD_INT 3
 661: PUSH
 662: FOR_TO
 663: IFFALSE 698
// begin hc_class := 13 ;
 665: LD_ADDR_OWVAR 28
 669: PUSH
 670: LD_INT 13
 672: ST_TO_ADDR
// hc_gallery :=  ;
 673: LD_ADDR_OWVAR 33
 677: PUSH
 678: LD_STRING 
 680: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 681: CALL_OW 44
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: LD_INT 0
 691: PPUSH
 692: CALL_OW 49
// end ;
 696: GO 662
 698: POP
 699: POP
// for i := 1 to 4 do
 700: LD_ADDR_VAR 0 2
 704: PUSH
 705: DOUBLE
 706: LD_INT 1
 708: DEC
 709: ST_TO_ADDR
 710: LD_INT 4
 712: PUSH
 713: FOR_TO
 714: IFFALSE 749
// begin hc_class := class_frog ;
 716: LD_ADDR_OWVAR 28
 720: PUSH
 721: LD_INT 19
 723: ST_TO_ADDR
// hc_gallery :=  ;
 724: LD_ADDR_OWVAR 33
 728: PUSH
 729: LD_STRING 
 731: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 732: CALL_OW 44
 736: PPUSH
 737: LD_INT 8
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// end ;
 747: GO 713
 749: POP
 750: POP
// end ;
 751: LD_VAR 0 1
 755: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 756: LD_INT 0
 758: PPUSH
 759: PPUSH
 760: PPUSH
// if not observer or not unit then
 761: LD_VAR 0 1
 765: NOT
 766: PUSH
 767: LD_VAR 0 2
 771: NOT
 772: OR
 773: IFFALSE 777
// exit ;
 775: GO 825
// if not See ( GetSide ( observer ) , unit ) then
 777: LD_VAR 0 1
 781: PPUSH
 782: CALL_OW 255
 786: PPUSH
 787: LD_VAR 0 2
 791: PPUSH
 792: CALL_OW 292
 796: NOT
 797: IFFALSE 801
// exit ;
 799: GO 825
// result := GetDistUnits ( observer , unit ) < 12 ;
 801: LD_ADDR_VAR 0 3
 805: PUSH
 806: LD_VAR 0 1
 810: PPUSH
 811: LD_VAR 0 2
 815: PPUSH
 816: CALL_OW 296
 820: PUSH
 821: LD_INT 12
 823: LESS
 824: ST_TO_ADDR
// end ; end_of_file
 825: LD_VAR 0 3
 829: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
 837: PPUSH
// usForces := [ ] ;
 838: LD_ADDR_EXP 21
 842: PUSH
 843: EMPTY
 844: ST_TO_ADDR
// usSci := [ ] ;
 845: LD_ADDR_EXP 22
 849: PUSH
 850: EMPTY
 851: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 852: LD_INT 1
 854: PPUSH
 855: LD_STRING Delta
 857: PPUSH
 858: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 862: LD_INT 1
 864: PPUSH
 865: CALL_OW 274
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: LD_INT 400
 875: PPUSH
 876: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 880: LD_INT 1
 882: PPUSH
 883: CALL_OW 274
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 80
 893: PPUSH
 894: CALL_OW 277
// uc_side := 1 ;
 898: LD_ADDR_OWVAR 20
 902: PUSH
 903: LD_INT 1
 905: ST_TO_ADDR
// uc_nation := 1 ;
 906: LD_ADDR_OWVAR 21
 910: PUSH
 911: LD_INT 1
 913: ST_TO_ADDR
// InitHc ;
 914: CALL_OW 19
// hc_importance := 0 ;
 918: LD_ADDR_OWVAR 32
 922: PUSH
 923: LD_INT 0
 925: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_STRING Lynch
 933: PPUSH
 934: LD_INT 0
 936: PPUSH
 937: LD_STRING 
 939: PPUSH
 940: CALL 29729 0 3
 944: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 945: LD_ADDR_EXP 19
 949: PUSH
 950: LD_STRING Gladstone
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: LD_STRING 
 958: PPUSH
 959: CALL 29729 0 3
 963: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 964: LD_EXP 20
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 976: LD_EXP 19
 980: PPUSH
 981: LD_INT 3
 983: PPUSH
 984: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 1
1000: PUSH
1001: LD_INT 2
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: LIST
1011: PUSH
1012: LD_OWVAR 67
1016: ARRAY
1017: PUSH
1018: FOR_TO
1019: IFFALSE 1065
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1021: LD_INT 0
1023: PPUSH
1024: LD_INT 2
1026: PPUSH
1027: LD_INT 1
1029: PUSH
1030: LD_INT 2
1032: PUSH
1033: LD_INT 2
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: LIST
1040: PUSH
1041: LD_OWVAR 67
1045: ARRAY
1046: PPUSH
1047: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1051: CALL_OW 44
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: CALL_OW 52
// end ;
1063: GO 1018
1065: POP
1066: POP
// for i := 1 to 7 - Difficulty do
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: DOUBLE
1073: LD_INT 1
1075: DEC
1076: ST_TO_ADDR
1077: LD_INT 7
1079: PUSH
1080: LD_OWVAR 67
1084: MINUS
1085: PUSH
1086: FOR_TO
1087: IFFALSE 1172
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1089: LD_INT 0
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 1
1097: PUSH
1098: LD_INT 2
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: PUSH
1109: LD_OWVAR 67
1113: ARRAY
1114: PPUSH
1115: CALL_OW 380
// un := CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 3
1136: PPUSH
1137: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1141: LD_ADDR_EXP 22
1145: PUSH
1146: LD_EXP 22
1150: PPUSH
1151: LD_EXP 22
1155: PUSH
1156: LD_INT 1
1158: PLUS
1159: PPUSH
1160: LD_VAR 0 3
1164: PPUSH
1165: CALL_OW 1
1169: ST_TO_ADDR
// end ;
1170: GO 1086
1172: POP
1173: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1174: LD_ADDR_VAR 0 6
1178: PUSH
1179: LD_INT 22
1181: PUSH
1182: LD_INT 1
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: PUSH
1189: LD_INT 30
1191: PUSH
1192: LD_INT 4
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PPUSH
1203: CALL_OW 69
1207: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 ] [ Difficulty ] do
1208: LD_ADDR_VAR 0 2
1212: PUSH
1213: DOUBLE
1214: LD_INT 1
1216: DEC
1217: ST_TO_ADDR
1218: LD_INT 3
1220: PUSH
1221: LD_INT 1
1223: PUSH
1224: LD_INT 2
1226: PUSH
1227: LD_INT 2
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_OWVAR 67
1239: ARRAY
1240: PLUS
1241: PUSH
1242: FOR_TO
1243: IFFALSE 1321
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
1245: LD_INT 0
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 3
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: LIST
1264: PUSH
1265: LD_OWVAR 67
1269: ARRAY
1270: PPUSH
1271: CALL_OW 380
// un := CreateHuman ;
1275: LD_ADDR_VAR 0 3
1279: PUSH
1280: CALL_OW 44
1284: ST_TO_ADDR
// usForces := usForces ^ un ;
1285: LD_ADDR_EXP 21
1289: PUSH
1290: LD_EXP 21
1294: PUSH
1295: LD_VAR 0 3
1299: ADD
1300: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1301: LD_VAR 0 3
1305: PPUSH
1306: LD_VAR 0 6
1310: PUSH
1311: LD_INT 1
1313: ARRAY
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1242
1321: POP
1322: POP
// if Difficulty > 1 then
1323: LD_OWVAR 67
1327: PUSH
1328: LD_INT 1
1330: GREATER
1331: IFFALSE 1426
// begin for i := 1 to Difficulty do
1333: LD_ADDR_VAR 0 2
1337: PUSH
1338: DOUBLE
1339: LD_INT 1
1341: DEC
1342: ST_TO_ADDR
1343: LD_OWVAR 67
1347: PUSH
1348: FOR_TO
1349: IFFALSE 1424
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 ] [ Difficulty ] ) ;
1351: LD_INT 0
1353: PPUSH
1354: LD_INT 1
1356: PPUSH
1357: LD_INT 1
1359: PUSH
1360: LD_INT 2
1362: PUSH
1363: LD_INT 2
1365: PUSH
1366: EMPTY
1367: LIST
1368: LIST
1369: LIST
1370: PUSH
1371: LD_OWVAR 67
1375: ARRAY
1376: PPUSH
1377: CALL_OW 380
// un := CreateHuman ;
1381: LD_ADDR_VAR 0 3
1385: PUSH
1386: CALL_OW 44
1390: ST_TO_ADDR
// usForces := usForces ^ un ;
1391: LD_ADDR_EXP 21
1395: PUSH
1396: LD_EXP 21
1400: PUSH
1401: LD_VAR 0 3
1405: ADD
1406: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1407: LD_VAR 0 3
1411: PPUSH
1412: LD_INT 9
1414: PPUSH
1415: LD_INT 0
1417: PPUSH
1418: CALL_OW 49
// end ;
1422: GO 1348
1424: POP
1425: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1426: LD_INT 1
1428: PPUSH
1429: LD_INT 1
1431: PPUSH
1432: LD_INT 1
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_INT 2
1443: PPUSH
1444: LD_INT 100
1446: PPUSH
1447: CALL 237 0 7
// veh := CreateVehicle ;
1451: LD_ADDR_VAR 0 4
1455: PUSH
1456: CALL_OW 45
1460: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1461: LD_VAR 0 4
1465: PPUSH
1466: LD_INT 2
1468: PPUSH
1469: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1473: LD_VAR 0 4
1477: PPUSH
1478: LD_INT 43
1480: PPUSH
1481: LD_INT 24
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 48
// end ;
1491: LD_VAR 0 1
1495: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1496: LD_INT 0
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
1502: PPUSH
1503: PPUSH
// if not usSci then
1504: LD_EXP 22
1508: NOT
1509: IFFALSE 1513
// exit ;
1511: GO 1687
// xy := AreaToList ( tameArea , 0 ) ;
1513: LD_ADDR_VAR 0 6
1517: PUSH
1518: LD_INT 5
1520: PPUSH
1521: LD_INT 0
1523: PPUSH
1524: CALL_OW 517
1528: ST_TO_ADDR
// for i in usSci do
1529: LD_ADDR_VAR 0 2
1533: PUSH
1534: LD_EXP 22
1538: PUSH
1539: FOR_IN
1540: IFFALSE 1685
// begin k := rand ( 1 , xy [ 1 ] ) ;
1542: LD_ADDR_VAR 0 4
1546: PUSH
1547: LD_INT 1
1549: PPUSH
1550: LD_VAR 0 6
1554: PUSH
1555: LD_INT 1
1557: ARRAY
1558: PPUSH
1559: CALL_OW 12
1563: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1564: LD_VAR 0 2
1568: PPUSH
1569: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1573: LD_VAR 0 2
1577: PPUSH
1578: LD_VAR 0 6
1582: PUSH
1583: LD_INT 1
1585: ARRAY
1586: PUSH
1587: LD_VAR 0 4
1591: ARRAY
1592: PPUSH
1593: LD_VAR 0 6
1597: PUSH
1598: LD_INT 2
1600: ARRAY
1601: PUSH
1602: LD_VAR 0 4
1606: ARRAY
1607: PPUSH
1608: CALL_OW 171
// for j := 1 to 2 do
1612: LD_ADDR_VAR 0 3
1616: PUSH
1617: DOUBLE
1618: LD_INT 1
1620: DEC
1621: ST_TO_ADDR
1622: LD_INT 2
1624: PUSH
1625: FOR_TO
1626: IFFALSE 1681
// begin tmp := Delete ( xy [ j ] , k ) ;
1628: LD_ADDR_VAR 0 5
1632: PUSH
1633: LD_VAR 0 6
1637: PUSH
1638: LD_VAR 0 3
1642: ARRAY
1643: PPUSH
1644: LD_VAR 0 4
1648: PPUSH
1649: CALL_OW 3
1653: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1654: LD_ADDR_VAR 0 6
1658: PUSH
1659: LD_VAR 0 6
1663: PPUSH
1664: LD_VAR 0 3
1668: PPUSH
1669: LD_VAR 0 5
1673: PPUSH
1674: CALL_OW 1
1678: ST_TO_ADDR
// end ;
1679: GO 1625
1681: POP
1682: POP
// end ;
1683: GO 1539
1685: POP
1686: POP
// end ;
1687: LD_VAR 0 1
1691: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1692: LD_EXP 4
1696: PUSH
1697: LD_EXP 22
1701: AND
1702: PUSH
1703: LD_EXP 10
1707: NOT
1708: AND
1709: PUSH
1710: LD_INT 22
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 25
1722: PUSH
1723: LD_INT 12
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: EMPTY
1731: LIST
1732: LIST
1733: PPUSH
1734: CALL_OW 69
1738: AND
1739: IFFALSE 2231
1741: GO 1743
1743: DISABLE
1744: LD_INT 0
1746: PPUSH
1747: PPUSH
1748: PPUSH
1749: PPUSH
1750: PPUSH
// begin enable ;
1751: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1752: LD_EXP 22
1756: PPUSH
1757: LD_INT 2
1759: PUSH
1760: LD_INT 60
1762: PUSH
1763: EMPTY
1764: LIST
1765: PUSH
1766: LD_INT 54
1768: PUSH
1769: EMPTY
1770: LIST
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: LIST
1776: PPUSH
1777: CALL_OW 72
1781: IFFALSE 1785
// exit ;
1783: GO 2231
// for i in usSci do
1785: LD_ADDR_VAR 0 1
1789: PUSH
1790: LD_EXP 22
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2229
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1798: LD_VAR 0 1
1802: PPUSH
1803: CALL_OW 314
1807: NOT
1808: PUSH
1809: LD_VAR 0 1
1813: PPUSH
1814: CALL_OW 256
1818: PUSH
1819: LD_INT 1000
1821: EQUAL
1822: AND
1823: IFFALSE 2030
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1825: LD_ADDR_VAR 0 5
1829: PUSH
1830: LD_INT 22
1832: PUSH
1833: LD_INT 0
1835: PUSH
1836: EMPTY
1837: LIST
1838: LIST
1839: PUSH
1840: LD_INT 25
1842: PUSH
1843: LD_INT 12
1845: PUSH
1846: EMPTY
1847: LIST
1848: LIST
1849: PUSH
1850: EMPTY
1851: LIST
1852: LIST
1853: PPUSH
1854: CALL_OW 69
1858: PPUSH
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL_OW 74
1868: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1869: LD_VAR 0 1
1873: PPUSH
1874: LD_VAR 0 5
1878: PPUSH
1879: CALL_OW 296
1883: PUSH
1884: LD_INT 10
1886: LESS
1887: IFFALSE 1920
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1889: LD_VAR 0 1
1893: PPUSH
1894: LD_VAR 0 5
1898: PPUSH
1899: CALL_OW 250
1903: PPUSH
1904: LD_VAR 0 5
1908: PPUSH
1909: CALL_OW 251
1913: PPUSH
1914: CALL_OW 131
1918: GO 2030
// begin d := rand ( 0 , 5 ) ;
1920: LD_ADDR_VAR 0 4
1924: PUSH
1925: LD_INT 0
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 12
1935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_VAR 0 1
1945: PPUSH
1946: CALL_OW 250
1950: PPUSH
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 3
1958: PPUSH
1959: CALL_OW 272
1963: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
1964: LD_ADDR_VAR 0 3
1968: PUSH
1969: LD_VAR 0 1
1973: PPUSH
1974: CALL_OW 251
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 3
1986: PPUSH
1987: CALL_OW 273
1991: ST_TO_ADDR
// if not ValidHex ( x , y ) then
1992: LD_VAR 0 2
1996: PPUSH
1997: LD_VAR 0 3
2001: PPUSH
2002: CALL_OW 488
2006: NOT
2007: IFFALSE 2011
// continue ;
2009: GO 1795
// ComMoveXY ( i , x , y ) ;
2011: LD_VAR 0 1
2015: PPUSH
2016: LD_VAR 0 2
2020: PPUSH
2021: LD_VAR 0 3
2025: PPUSH
2026: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2030: LD_VAR 0 1
2034: PPUSH
2035: CALL_OW 256
2039: PUSH
2040: LD_INT 900
2042: LESS
2043: PUSH
2044: LD_VAR 0 1
2048: PPUSH
2049: LD_INT 37
2051: PPUSH
2052: LD_INT 23
2054: PPUSH
2055: CALL_OW 297
2059: PUSH
2060: LD_INT 10
2062: GREATER
2063: AND
2064: IFFALSE 2140
// begin if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2066: LD_EXP 19
2070: PPUSH
2071: CALL_OW 302
2075: PUSH
2076: LD_EXP 19
2080: PPUSH
2081: CALL_OW 310
2085: AND
2086: IFFALSE 2097
// ComExitBuilding ( Gladstone ) ;
2088: LD_EXP 19
2092: PPUSH
2093: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2097: LD_EXP 19
2101: PPUSH
2102: LD_VAR 0 1
2106: PPUSH
2107: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2111: LD_EXP 19
2115: PPUSH
2116: LD_INT 3
2118: PPUSH
2119: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2123: LD_VAR 0 1
2127: PPUSH
2128: LD_INT 37
2130: PPUSH
2131: LD_INT 23
2133: PPUSH
2134: CALL_OW 111
// end else
2138: GO 2227
// if GetLives ( i ) = 1000 then
2140: LD_VAR 0 1
2144: PPUSH
2145: CALL_OW 256
2149: PUSH
2150: LD_INT 1000
2152: EQUAL
2153: IFFALSE 2227
// begin if SideShoot ( i ) = 2 then
2155: LD_VAR 0 1
2159: PPUSH
2160: CALL_OW 503
2164: PUSH
2165: LD_INT 2
2167: EQUAL
2168: IFFALSE 2215
// begin if not usAlert then
2170: LD_EXP 10
2174: NOT
2175: IFFALSE 2185
// usAlert := true ;
2177: LD_ADDR_EXP 10
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2185: LD_VAR 0 1
2189: PPUSH
2190: LD_INT 3
2192: PPUSH
2193: CALL_OW 180
// usSci := usSci diff i ;
2197: LD_ADDR_EXP 22
2201: PUSH
2202: LD_EXP 22
2206: PUSH
2207: LD_VAR 0 1
2211: DIFF
2212: ST_TO_ADDR
// end else
2213: GO 2227
// ComMoveToArea ( i , tameArea ) ;
2215: LD_VAR 0 1
2219: PPUSH
2220: LD_INT 5
2222: PPUSH
2223: CALL_OW 113
// end ; end ;
2227: GO 1795
2229: POP
2230: POP
// end ;
2231: PPOPN 5
2233: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2234: LD_EXP 10
2238: NOT
2239: PUSH
2240: LD_INT 22
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: PUSH
2250: LD_INT 21
2252: PUSH
2253: LD_INT 3
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 3
2262: PUSH
2263: LD_INT 57
2265: PUSH
2266: EMPTY
2267: LIST
2268: PUSH
2269: EMPTY
2270: LIST
2271: LIST
2272: PUSH
2273: LD_INT 3
2275: PUSH
2276: LD_INT 24
2278: PUSH
2279: LD_INT 999
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: PPUSH
2296: CALL_OW 69
2300: PUSH
2301: LD_INT 7
2303: PPUSH
2304: LD_INT 22
2306: PUSH
2307: LD_INT 2
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 70
2318: OR
2319: AND
2320: IFFALSE 2333
2322: GO 2324
2324: DISABLE
// usAlert := true ;
2325: LD_ADDR_EXP 10
2329: PUSH
2330: LD_INT 1
2332: ST_TO_ADDR
2333: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2334: LD_EXP 10
2338: IFFALSE 2685
2340: GO 2342
2342: DISABLE
2343: LD_INT 0
2345: PPUSH
2346: PPUSH
2347: PPUSH
// begin usActiveDefend := true ;
2348: LD_ADDR_EXP 11
2352: PUSH
2353: LD_INT 1
2355: ST_TO_ADDR
// if not usForces then
2356: LD_EXP 21
2360: NOT
2361: IFFALSE 2365
// exit ;
2363: GO 2685
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2365: LD_ADDR_VAR 0 3
2369: PUSH
2370: LD_INT 22
2372: PUSH
2373: LD_INT 1
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: PUSH
2380: LD_INT 30
2382: PUSH
2383: LD_INT 4
2385: PUSH
2386: EMPTY
2387: LIST
2388: LIST
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 69
2398: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2399: LD_ADDR_VAR 0 2
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 30
2416: PUSH
2417: LD_INT 31
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 69
2432: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2433: LD_EXP 20
2437: PPUSH
2438: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2442: LD_EXP 20
2446: PPUSH
2447: LD_VAR 0 3
2451: PUSH
2452: LD_INT 1
2454: ARRAY
2455: PPUSH
2456: CALL_OW 180
// if IsOk ( Gladstone ) then
2460: LD_EXP 19
2464: PPUSH
2465: CALL_OW 302
2469: IFFALSE 2510
// begin ComExitBuilding ( Gladstone ) ;
2471: LD_EXP 19
2475: PPUSH
2476: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2480: LD_EXP 19
2484: PPUSH
2485: LD_VAR 0 3
2489: PUSH
2490: LD_INT 1
2492: ARRAY
2493: PPUSH
2494: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_INT 1
2505: PPUSH
2506: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2510: LD_EXP 21
2514: PUSH
2515: LD_INT 1
2517: ARRAY
2518: PPUSH
2519: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2523: LD_EXP 21
2527: PUSH
2528: LD_INT 1
2530: ARRAY
2531: PPUSH
2532: LD_VAR 0 2
2536: PUSH
2537: LD_INT 1
2539: ARRAY
2540: PPUSH
2541: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2545: LD_EXP 21
2549: PUSH
2550: LD_INT 2
2552: ARRAY
2553: PPUSH
2554: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2558: LD_EXP 21
2562: PUSH
2563: LD_INT 2
2565: ARRAY
2566: PPUSH
2567: LD_INT 22
2569: PUSH
2570: LD_INT 1
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 30
2579: PUSH
2580: LD_INT 32
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PPUSH
2591: CALL_OW 69
2595: PUSH
2596: LD_INT 1
2598: ARRAY
2599: PPUSH
2600: CALL_OW 180
// if b > 1 and usForces > 2 then
2604: LD_VAR 0 2
2608: PUSH
2609: LD_INT 1
2611: GREATER
2612: PUSH
2613: LD_EXP 21
2617: PUSH
2618: LD_INT 2
2620: GREATER
2621: AND
2622: IFFALSE 2685
// begin repeat wait ( 0 0$1 ) ;
2624: LD_INT 35
2626: PPUSH
2627: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2631: LD_VAR 0 2
2635: PUSH
2636: LD_INT 2
2638: ARRAY
2639: PPUSH
2640: CALL_OW 461
2644: PUSH
2645: LD_INT 1
2647: NONEQUAL
2648: IFFALSE 2624
// ComExitBuilding ( usForces [ 3 ] ) ;
2650: LD_EXP 21
2654: PUSH
2655: LD_INT 3
2657: ARRAY
2658: PPUSH
2659: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2663: LD_EXP 21
2667: PUSH
2668: LD_INT 3
2670: ARRAY
2671: PPUSH
2672: LD_VAR 0 2
2676: PUSH
2677: LD_INT 2
2679: ARRAY
2680: PPUSH
2681: CALL_OW 180
// end ; end ;
2685: PPOPN 3
2687: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2688: LD_INT 3
2690: PPUSH
2691: CALL_OW 256
2695: PUSH
2696: LD_INT 999
2698: LESS
2699: PUSH
2700: LD_EXP 10
2704: AND
2705: PUSH
2706: LD_EXP 21
2710: AND
2711: IFFALSE 2882
2713: GO 2715
2715: DISABLE
2716: LD_INT 0
2718: PPUSH
// begin for i in usForces do
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 21
2728: PUSH
2729: FOR_IN
2730: IFFALSE 2769
// begin if IsInUnit ( i ) then
2732: LD_VAR 0 1
2736: PPUSH
2737: CALL_OW 310
2741: IFFALSE 2752
// ComExitBuilding ( i ) ;
2743: LD_VAR 0 1
2747: PPUSH
2748: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2752: LD_VAR 0 1
2756: PPUSH
2757: LD_INT 31
2759: PPUSH
2760: LD_INT 8
2762: PPUSH
2763: CALL_OW 174
// end ;
2767: GO 2729
2769: POP
2770: POP
// wait ( 0 0$8 ) ;
2771: LD_INT 280
2773: PPUSH
2774: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2778: LD_INT 22
2780: PUSH
2781: LD_INT 2
2783: PUSH
2784: EMPTY
2785: LIST
2786: LIST
2787: PUSH
2788: LD_INT 91
2790: PUSH
2791: LD_INT 3
2793: PUSH
2794: LD_INT 14
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: EMPTY
2803: LIST
2804: LIST
2805: PPUSH
2806: CALL_OW 69
2810: IFFALSE 2860
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2812: LD_EXP 21
2816: PPUSH
2817: LD_INT 22
2819: PUSH
2820: LD_INT 2
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_INT 91
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: LD_INT 14
2835: PUSH
2836: EMPTY
2837: LIST
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 69
2849: PUSH
2850: LD_INT 1
2852: ARRAY
2853: PPUSH
2854: CALL_OW 115
2858: GO 2882
// begin wait ( 0 0$20 ) ;
2860: LD_INT 700
2862: PPUSH
2863: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2867: LD_EXP 21
2871: PPUSH
2872: LD_INT 39
2874: PPUSH
2875: LD_INT 19
2877: PPUSH
2878: CALL_OW 171
// end ; end ;
2882: PPOPN 1
2884: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
2885: LD_EXP 23
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: CALL_OW 296
2897: PUSH
2898: LD_INT 10
2900: LESS
2901: PUSH
2902: LD_INT 3
2904: PPUSH
2905: CALL_OW 256
2909: PUSH
2910: LD_INT 999
2912: LESS
2913: OR
2914: PUSH
2915: LD_INT 22
2917: PUSH
2918: LD_INT 1
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 25
2927: PUSH
2928: LD_INT 2
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PPUSH
2939: CALL_OW 69
2943: AND
2944: IFFALSE 3058
2946: GO 2948
2948: DISABLE
2949: LD_INT 0
2951: PPUSH
2952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
2953: LD_ADDR_VAR 0 1
2957: PUSH
2958: LD_INT 22
2960: PUSH
2961: LD_INT 1
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: PUSH
2968: LD_INT 25
2970: PUSH
2971: LD_INT 2
2973: PUSH
2974: EMPTY
2975: LIST
2976: LIST
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2987: LD_ADDR_VAR 0 2
2991: PUSH
2992: LD_INT 22
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: EMPTY
2999: LIST
3000: LIST
3001: PUSH
3002: LD_INT 21
3004: PUSH
3005: LD_INT 2
3007: PUSH
3008: EMPTY
3009: LIST
3010: LIST
3011: PUSH
3012: LD_INT 58
3014: PUSH
3015: EMPTY
3016: LIST
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: ST_TO_ADDR
// if not tmp then
3028: LD_VAR 0 1
3032: NOT
3033: IFFALSE 3037
// exit ;
3035: GO 3058
// ComExitBuilding ( tmp ) ;
3037: LD_VAR 0 1
3041: PPUSH
3042: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3046: LD_VAR 0 1
3050: PPUSH
3051: LD_INT 3
3053: PPUSH
3054: CALL_OW 227
// end ;
3058: PPOPN 2
3060: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3061: LD_EXP 10
3065: PUSH
3066: LD_INT 7
3068: PPUSH
3069: LD_INT 22
3071: PUSH
3072: LD_INT 1
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PUSH
3079: LD_INT 21
3081: PUSH
3082: LD_INT 1
3084: PUSH
3085: EMPTY
3086: LIST
3087: LIST
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 24
3094: PUSH
3095: LD_INT 600
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: PUSH
3102: EMPTY
3103: LIST
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 70
3115: AND
3116: IFFALSE 3244
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
3124: PPUSH
// begin enable ;
3125: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3126: LD_ADDR_VAR 0 2
3130: PUSH
3131: LD_INT 7
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 1
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 21
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 24
3159: PUSH
3160: LD_INT 600
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PUSH
3171: EMPTY
3172: LIST
3173: LIST
3174: LIST
3175: PPUSH
3176: CALL_OW 70
3180: ST_TO_ADDR
// if not tmp then
3181: LD_VAR 0 2
3185: NOT
3186: IFFALSE 3190
// exit ;
3188: GO 3244
// for i in tmp do
3190: LD_ADDR_VAR 0 1
3194: PUSH
3195: LD_VAR 0 2
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3242
// if IsInUnit ( i ) then
3203: LD_VAR 0 1
3207: PPUSH
3208: CALL_OW 310
3212: IFFALSE 3225
// ComExitBuilding ( i ) else
3214: LD_VAR 0 1
3218: PPUSH
3219: CALL_OW 122
3223: GO 3240
// ComMoveXY ( i , 48 , 74 ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: LD_INT 48
3232: PPUSH
3233: LD_INT 74
3235: PPUSH
3236: CALL_OW 111
3240: GO 3200
3242: POP
3243: POP
// end ;
3244: PPOPN 2
3246: END
// every 12 12$00 do var i , un , tmp ;
3247: GO 3249
3249: DISABLE
3250: LD_INT 0
3252: PPUSH
3253: PPUSH
3254: PPUSH
// begin tmp := [ ] ;
3255: LD_ADDR_VAR 0 3
3259: PUSH
3260: EMPTY
3261: ST_TO_ADDR
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// uc_nation := 1 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 1
3277: ST_TO_ADDR
// case Difficulty of 1 :
3278: LD_OWVAR 67
3282: PUSH
3283: LD_INT 1
3285: DOUBLE
3286: EQUAL
3287: IFTRUE 3291
3289: GO 3394
3291: POP
// begin wait ( 1 1$00 ) ;
3292: LD_INT 2100
3294: PPUSH
3295: CALL_OW 67
// for i := 1 to 2 do
3299: LD_ADDR_VAR 0 1
3303: PUSH
3304: DOUBLE
3305: LD_INT 1
3307: DEC
3308: ST_TO_ADDR
3309: LD_INT 2
3311: PUSH
3312: FOR_TO
3313: IFFALSE 3390
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3315: LD_INT 0
3317: PPUSH
3318: LD_INT 1
3320: PUSH
3321: LD_INT 4
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PUSH
3328: LD_VAR 0 1
3332: PUSH
3333: LD_INT 2
3335: MOD
3336: PUSH
3337: LD_INT 1
3339: PLUS
3340: ARRAY
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: CALL_OW 380
// un := CreateHuman ;
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: CALL_OW 44
3358: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3359: LD_ADDR_VAR 0 3
3363: PUSH
3364: LD_VAR 0 3
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_INT 1
3376: PLUS
3377: PPUSH
3378: LD_VAR 0 2
3382: PPUSH
3383: CALL_OW 1
3387: ST_TO_ADDR
// end ;
3388: GO 3312
3390: POP
3391: POP
// end ; 2 :
3392: GO 3788
3394: LD_INT 2
3396: DOUBLE
3397: EQUAL
3398: IFTRUE 3402
3400: GO 3536
3402: POP
// begin wait ( 0 0$30 ) ;
3403: LD_INT 1050
3405: PPUSH
3406: CALL_OW 67
// for i := 1 to 2 do
3410: LD_ADDR_VAR 0 1
3414: PUSH
3415: DOUBLE
3416: LD_INT 1
3418: DEC
3419: ST_TO_ADDR
3420: LD_INT 2
3422: PUSH
3423: FOR_TO
3424: IFFALSE 3480
// begin PrepareHuman ( false , 1 , 2 ) ;
3426: LD_INT 0
3428: PPUSH
3429: LD_INT 1
3431: PPUSH
3432: LD_INT 2
3434: PPUSH
3435: CALL_OW 380
// un := CreateHuman ;
3439: LD_ADDR_VAR 0 2
3443: PUSH
3444: CALL_OW 44
3448: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3449: LD_ADDR_VAR 0 3
3453: PUSH
3454: LD_VAR 0 3
3458: PPUSH
3459: LD_VAR 0 3
3463: PUSH
3464: LD_INT 1
3466: PLUS
3467: PPUSH
3468: LD_VAR 0 2
3472: PPUSH
3473: CALL_OW 1
3477: ST_TO_ADDR
// end ;
3478: GO 3423
3480: POP
3481: POP
// PrepareHuman ( false , 4 , 2 ) ;
3482: LD_INT 0
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: LD_INT 2
3490: PPUSH
3491: CALL_OW 380
// un := CreateHuman ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 44
3504: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3505: LD_ADDR_VAR 0 3
3509: PUSH
3510: LD_VAR 0 3
3514: PPUSH
3515: LD_VAR 0 3
3519: PUSH
3520: LD_INT 1
3522: PLUS
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL_OW 1
3533: ST_TO_ADDR
// end ; 3 :
3534: GO 3788
3536: LD_INT 3
3538: DOUBLE
3539: EQUAL
3540: IFTRUE 3544
3542: GO 3787
3544: POP
// begin for i := 1 to 2 do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: DOUBLE
3551: LD_INT 1
3553: DEC
3554: ST_TO_ADDR
3555: LD_INT 2
3557: PUSH
3558: FOR_TO
3559: IFFALSE 3615
// begin PrepareHuman ( false , 1 , 2 ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 1
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 380
// un := CreateHuman ;
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: CALL_OW 44
3583: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3584: LD_ADDR_VAR 0 3
3588: PUSH
3589: LD_VAR 0 3
3593: PPUSH
3594: LD_VAR 0 3
3598: PUSH
3599: LD_INT 1
3601: PLUS
3602: PPUSH
3603: LD_VAR 0 2
3607: PPUSH
3608: CALL_OW 1
3612: ST_TO_ADDR
// end ;
3613: GO 3558
3615: POP
3616: POP
// PrepareHuman ( false , 4 , 2 ) ;
3617: LD_INT 0
3619: PPUSH
3620: LD_INT 4
3622: PPUSH
3623: LD_INT 2
3625: PPUSH
3626: CALL_OW 380
// un := CreateHuman ;
3630: LD_ADDR_VAR 0 2
3634: PUSH
3635: CALL_OW 44
3639: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3640: LD_ADDR_VAR 0 3
3644: PUSH
3645: LD_VAR 0 3
3649: PPUSH
3650: LD_VAR 0 3
3654: PUSH
3655: LD_INT 1
3657: PLUS
3658: PPUSH
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 1
3668: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3669: LD_INT 1
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 2
3677: PPUSH
3678: LD_INT 2
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: LD_INT 2
3686: PPUSH
3687: LD_INT 90
3689: PPUSH
3690: CALL 237 0 7
// un := CreateVehicle ;
3694: LD_ADDR_VAR 0 2
3698: PUSH
3699: CALL_OW 45
3703: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3704: LD_ADDR_VAR 0 3
3708: PUSH
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_VAR 0 3
3718: PUSH
3719: LD_INT 1
3721: PLUS
3722: PPUSH
3723: LD_VAR 0 2
3727: PPUSH
3728: CALL_OW 1
3732: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3733: LD_INT 0
3735: PPUSH
3736: LD_INT 1
3738: PPUSH
3739: LD_INT 2
3741: PPUSH
3742: CALL_OW 380
// un := CreateHuman ;
3746: LD_ADDR_VAR 0 2
3750: PUSH
3751: CALL_OW 44
3755: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 3
3770: PUSH
3771: LD_INT 1
3773: PLUS
3774: PPUSH
3775: LD_VAR 0 2
3779: PPUSH
3780: CALL_OW 1
3784: ST_TO_ADDR
// end ; end ;
3785: GO 3788
3787: POP
// for i := 1 to tmp do
3788: LD_ADDR_VAR 0 1
3792: PUSH
3793: DOUBLE
3794: LD_INT 1
3796: DEC
3797: ST_TO_ADDR
3798: LD_VAR 0 3
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3969
// begin SetDir ( tmp [ i ] , 1 ) ;
3806: LD_VAR 0 3
3810: PUSH
3811: LD_VAR 0 1
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PPUSH
3820: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3824: LD_VAR 0 3
3828: PUSH
3829: LD_VAR 0 1
3833: ARRAY
3834: PPUSH
3835: CALL_OW 247
3839: PUSH
3840: LD_INT 1
3842: EQUAL
3843: IFFALSE 3871
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3845: LD_VAR 0 3
3849: PUSH
3850: LD_VAR 0 1
3854: ARRAY
3855: PPUSH
3856: LD_INT 28
3858: PPUSH
3859: LD_INT 52
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 48
3869: GO 3939
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
3871: LD_VAR 0 3
3875: PUSH
3876: LD_VAR 0 1
3880: ARRAY
3881: PPUSH
3882: LD_INT 28
3884: PPUSH
3885: LD_INT 52
3887: PPUSH
3888: LD_INT 0
3890: PPUSH
3891: CALL_OW 48
// i := i + 1 ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_VAR 0 3
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_INT 1
3932: MINUS
3933: ARRAY
3934: PPUSH
3935: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
3939: LD_VAR 0 3
3943: PUSH
3944: LD_VAR 0 1
3948: ARRAY
3949: PPUSH
3950: LD_INT 43
3952: PPUSH
3953: LD_INT 56
3955: PPUSH
3956: CALL_OW 111
// wait ( 0 0$2 ) ;
3960: LD_INT 70
3962: PPUSH
3963: CALL_OW 67
// end ;
3967: GO 3803
3969: POP
3970: POP
// wait ( 0 0$2 ) ;
3971: LD_INT 70
3973: PPUSH
3974: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
3978: LD_INT 7
3980: PPUSH
3981: LD_INT 22
3983: PUSH
3984: LD_INT 2
3986: PUSH
3987: EMPTY
3988: LIST
3989: LIST
3990: PPUSH
3991: CALL_OW 70
3995: NOT
3996: IFFALSE 4194
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
3998: LD_VAR 0 3
4002: PPUSH
4003: LD_INT 35
4005: PPUSH
4006: LD_INT 24
4008: PPUSH
4009: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4013: LD_ADDR_EXP 21
4017: PUSH
4018: LD_EXP 21
4022: PUSH
4023: LD_VAR 0 3
4027: PPUSH
4028: LD_INT 25
4030: PUSH
4031: LD_INT 1
4033: PUSH
4034: EMPTY
4035: LIST
4036: LIST
4037: PPUSH
4038: CALL_OW 72
4042: UNION
4043: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4044: LD_INT 22
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: EMPTY
4051: LIST
4052: LIST
4053: PUSH
4054: LD_INT 30
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PUSH
4064: EMPTY
4065: LIST
4066: LIST
4067: PPUSH
4068: CALL_OW 69
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 313
4081: PUSH
4082: LD_INT 6
4084: LESS
4085: IFFALSE 4144
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_INT 25
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 72
4106: PPUSH
4107: LD_INT 22
4109: PUSH
4110: LD_INT 1
4112: PUSH
4113: EMPTY
4114: LIST
4115: LIST
4116: PUSH
4117: LD_INT 30
4119: PUSH
4120: LD_INT 4
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PPUSH
4131: CALL_OW 69
4135: PUSH
4136: LD_INT 1
4138: ARRAY
4139: PPUSH
4140: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 25
4151: PUSH
4152: LD_INT 4
4154: PUSH
4155: EMPTY
4156: LIST
4157: LIST
4158: PPUSH
4159: CALL_OW 72
4163: IFFALSE 4192
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4165: LD_VAR 0 3
4169: PPUSH
4170: LD_INT 25
4172: PUSH
4173: LD_INT 4
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 72
4184: PPUSH
4185: LD_INT 3
4187: PPUSH
4188: CALL_OW 180
// end else
4192: GO 4469
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 3
4203: PUSH
4204: LD_INT 6
4206: PPUSH
4207: LD_INT 22
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 70
4221: UNION
4222: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4223: LD_VAR 0 3
4227: PPUSH
4228: LD_INT 45
4230: PPUSH
4231: LD_INT 54
4233: PPUSH
4234: CALL_OW 111
// wait ( 0 0$3 ) ;
4238: LD_INT 105
4240: PPUSH
4241: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4245: LD_VAR 0 3
4249: PUSH
4250: LD_VAR 0 3
4254: PPUSH
4255: LD_INT 25
4257: PUSH
4258: LD_INT 4
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PPUSH
4265: CALL_OW 72
4269: DIFF
4270: PPUSH
4271: LD_INT 35
4273: PPUSH
4274: LD_INT 24
4276: PPUSH
4277: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4281: LD_VAR 0 3
4285: PPUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 4
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PPUSH
4296: CALL_OW 72
4300: PPUSH
4301: LD_INT 42
4303: PPUSH
4304: LD_INT 49
4306: PPUSH
4307: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4311: LD_INT 35
4313: PPUSH
4314: CALL_OW 67
// for i in tmp do
4318: LD_ADDR_VAR 0 1
4322: PUSH
4323: LD_VAR 0 3
4327: PUSH
4328: FOR_IN
4329: IFFALSE 4460
// if IsDead ( i ) then
4331: LD_VAR 0 1
4335: PPUSH
4336: CALL_OW 301
4340: IFFALSE 4360
// tmp := tmp diff i else
4342: LD_ADDR_VAR 0 3
4346: PUSH
4347: LD_VAR 0 3
4351: PUSH
4352: LD_VAR 0 1
4356: DIFF
4357: ST_TO_ADDR
4358: GO 4458
// if GetClass ( i ) = 1 then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 257
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 4458
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4375: LD_VAR 0 1
4379: PPUSH
4380: CALL_OW 256
4384: PUSH
4385: LD_INT 600
4387: LESS
4388: PUSH
4389: LD_VAR 0 1
4393: PPUSH
4394: LD_INT 42
4396: PPUSH
4397: LD_INT 49
4399: PPUSH
4400: CALL_OW 297
4404: PUSH
4405: LD_INT 6
4407: GREATER
4408: AND
4409: IFFALSE 4428
// ComMoveXY ( i , 42 , 49 ) else
4411: LD_VAR 0 1
4415: PPUSH
4416: LD_INT 42
4418: PPUSH
4419: LD_INT 49
4421: PPUSH
4422: CALL_OW 111
4426: GO 4458
// if GetLives ( i ) = 1000 then
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL_OW 256
4437: PUSH
4438: LD_INT 1000
4440: EQUAL
4441: IFFALSE 4458
// ComAgressiveMove ( i , 36 , 25 ) ;
4443: LD_VAR 0 1
4447: PPUSH
4448: LD_INT 36
4450: PPUSH
4451: LD_INT 25
4453: PPUSH
4454: CALL_OW 114
// end ;
4458: GO 4328
4460: POP
4461: POP
// until not tmp ;
4462: LD_VAR 0 3
4466: NOT
4467: IFFALSE 4311
// end ; end ;
4469: PPOPN 3
4471: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4472: LD_INT 7
4474: PPUSH
4475: LD_INT 22
4477: PUSH
4478: LD_INT 2
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: PUSH
4490: LD_EXP 14
4494: NOT
4495: AND
4496: IFFALSE 4654
4498: GO 4500
4500: DISABLE
4501: LD_INT 0
4503: PPUSH
4504: PPUSH
4505: PPUSH
// begin for i := 1 to 2 do
4506: LD_ADDR_VAR 0 1
4510: PUSH
4511: DOUBLE
4512: LD_INT 1
4514: DEC
4515: ST_TO_ADDR
4516: LD_INT 2
4518: PUSH
4519: FOR_TO
4520: IFFALSE 4652
// begin wait ( 0 0$3 ) ;
4522: LD_INT 105
4524: PPUSH
4525: CALL_OW 67
// uc_side := 1 ;
4529: LD_ADDR_OWVAR 20
4533: PUSH
4534: LD_INT 1
4536: ST_TO_ADDR
// uc_nation := 1 ;
4537: LD_ADDR_OWVAR 21
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4545: LD_INT 1
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: LD_INT 1
4556: PPUSH
4557: LD_INT 1
4559: PPUSH
4560: LD_INT 4
4562: PPUSH
4563: LD_INT 90
4565: PPUSH
4566: CALL 237 0 7
// veh := CreateVehicle ;
4570: LD_ADDR_VAR 0 3
4574: PUSH
4575: CALL_OW 45
4579: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4580: LD_VAR 0 3
4584: PPUSH
4585: LD_INT 29
4587: PPUSH
4588: LD_INT 52
4590: PPUSH
4591: LD_INT 0
4593: PPUSH
4594: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4598: LD_INT 0
4600: PPUSH
4601: LD_INT 3
4603: PPUSH
4604: LD_INT 3
4606: PPUSH
4607: CALL_OW 380
// un := CreateHuman ;
4611: LD_ADDR_VAR 0 2
4615: PUSH
4616: CALL_OW 44
4620: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4621: LD_VAR 0 2
4625: PPUSH
4626: LD_VAR 0 3
4630: PPUSH
4631: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4635: LD_VAR 0 3
4639: PPUSH
4640: LD_INT 36
4642: PPUSH
4643: LD_INT 25
4645: PPUSH
4646: CALL_OW 114
// end ;
4650: GO 4519
4652: POP
4653: POP
// end ; end_of_file
4654: PPOPN 3
4656: END
// export function Action ; var i , tmp ; begin
4657: LD_INT 0
4659: PPUSH
4660: PPUSH
4661: PPUSH
// InGameOn ;
4662: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4666: LD_INT 2
4668: PPUSH
4669: LD_INT 3
4671: PPUSH
4672: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4676: LD_EXP 23
4680: PPUSH
4681: LD_INT 78
4683: PPUSH
4684: LD_INT 61
4686: PPUSH
4687: CALL_OW 111
// if Mike then
4691: LD_EXP 25
4695: IFFALSE 4712
// ComMoveXY ( Mike , 80 , 66 ) ;
4697: LD_EXP 25
4701: PPUSH
4702: LD_INT 80
4704: PPUSH
4705: LD_INT 66
4707: PPUSH
4708: CALL_OW 111
// if Givi then
4712: LD_EXP 24
4716: IFFALSE 4733
// ComMoveXY ( Givi , 82 , 66 ) ;
4718: LD_EXP 24
4722: PPUSH
4723: LD_INT 82
4725: PPUSH
4726: LD_INT 66
4728: PPUSH
4729: CALL_OW 111
// if Kamil then
4733: LD_EXP 26
4737: IFFALSE 4754
// ComMoveXY ( Kamil , 82 , 67 ) ;
4739: LD_EXP 26
4743: PPUSH
4744: LD_INT 82
4746: PPUSH
4747: LD_INT 67
4749: PPUSH
4750: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4754: LD_EXP 23
4758: PPUSH
4759: CALL_OW 87
// wait ( 0 0$2 ) ;
4763: LD_INT 70
4765: PPUSH
4766: CALL_OW 67
// if Givi and Mike then
4770: LD_EXP 24
4774: PUSH
4775: LD_EXP 25
4779: AND
4780: IFFALSE 5314
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4782: LD_EXP 24
4786: PUSH
4787: LD_EXP 25
4791: PUSH
4792: LD_EXP 26
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: LD_EXP 23
4806: PPUSH
4807: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4811: LD_EXP 23
4815: PPUSH
4816: LD_EXP 24
4820: PPUSH
4821: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4825: LD_EXP 24
4829: PPUSH
4830: LD_STRING DG-1-start
4832: PPUSH
4833: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4837: LD_EXP 23
4841: PPUSH
4842: LD_STRING DH-1-start
4844: PPUSH
4845: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4849: LD_EXP 25
4853: PPUSH
4854: LD_EXP 23
4858: PPUSH
4859: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4863: LD_EXP 23
4867: PPUSH
4868: LD_EXP 25
4872: PPUSH
4873: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
4877: LD_EXP 25
4881: PPUSH
4882: LD_STRING DM-1-start
4884: PPUSH
4885: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
4889: LD_EXP 23
4893: PPUSH
4894: LD_STRING DH-2-start
4896: PPUSH
4897: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
4901: LD_EXP 25
4905: PPUSH
4906: LD_STRING DM-2-start
4908: PPUSH
4909: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
4913: LD_EXP 24
4917: PPUSH
4918: LD_STRING DG-2-start
4920: PPUSH
4921: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
4925: LD_EXP 25
4929: PPUSH
4930: LD_EXP 24
4934: PPUSH
4935: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
4939: LD_EXP 23
4943: PPUSH
4944: LD_EXP 25
4948: PPUSH
4949: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
4953: LD_EXP 25
4957: PPUSH
4958: LD_STRING DM-3-start
4960: PPUSH
4961: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
4965: LD_EXP 23
4969: PPUSH
4970: LD_STRING DH-3-start
4972: PPUSH
4973: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
4977: LD_EXP 23
4981: PUSH
4982: LD_EXP 25
4986: PUSH
4987: LD_EXP 24
4991: PUSH
4992: LD_EXP 26
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: PPUSH
5003: LD_INT 84
5005: PPUSH
5006: LD_INT 51
5008: PPUSH
5009: CALL_OW 111
// wait ( 0 0$2 ) ;
5013: LD_INT 70
5015: PPUSH
5016: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5020: LD_EXP 24
5024: PPUSH
5025: LD_STRING DG-3-start
5027: PPUSH
5028: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5032: LD_EXP 23
5036: PUSH
5037: LD_EXP 25
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: LD_EXP 26
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: PPUSH
5058: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5062: LD_EXP 23
5066: PPUSH
5067: LD_EXP 24
5071: PPUSH
5072: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5076: LD_EXP 24
5080: PUSH
5081: LD_EXP 25
5085: PUSH
5086: LD_EXP 26
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PPUSH
5096: LD_EXP 23
5100: PPUSH
5101: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5105: LD_EXP 23
5109: PPUSH
5110: LD_STRING DH-4-start
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5117: LD_EXP 24
5121: PPUSH
5122: LD_STRING DG-4-start
5124: PPUSH
5125: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5129: LD_EXP 23
5133: PPUSH
5134: LD_STRING DH-5-start
5136: PPUSH
5137: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5141: LD_EXP 24
5145: PPUSH
5146: LD_STRING DG-5-start
5148: PPUSH
5149: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5153: LD_EXP 23
5157: PPUSH
5158: LD_STRING DH-6-start
5160: PPUSH
5161: CALL_OW 88
// if not Kamil then
5165: LD_EXP 26
5169: NOT
5170: IFFALSE 5221
// begin Say ( Mike , DM-6-start ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_STRING DM-6-start
5179: PPUSH
5180: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5184: LD_EXP 23
5188: PUSH
5189: LD_EXP 24
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PPUSH
5198: LD_EXP 25
5202: PPUSH
5203: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5207: LD_EXP 24
5211: PPUSH
5212: LD_STRING DG-6-start
5214: PPUSH
5215: CALL_OW 88
// end else
5219: GO 5300
// begin Say ( Mike , DM-6-start-a ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DM-6-start-a
5228: PPUSH
5229: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5233: LD_EXP 23
5237: PUSH
5238: LD_EXP 24
5242: PUSH
5243: LD_EXP 25
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: LD_EXP 26
5257: PPUSH
5258: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5262: LD_EXP 26
5266: PPUSH
5267: LD_EXP 25
5271: PPUSH
5272: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5276: LD_EXP 26
5280: PPUSH
5281: LD_STRING DKam-7-start-a
5283: PPUSH
5284: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5288: LD_EXP 24
5292: PPUSH
5293: LD_STRING DG-6-start-a
5295: PPUSH
5296: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5300: LD_EXP 23
5304: PPUSH
5305: LD_STRING DH-7-start
5307: PPUSH
5308: CALL_OW 88
// end else
5312: GO 6036
// if not Mike and Givi then
5314: LD_EXP 25
5318: NOT
5319: PUSH
5320: LD_EXP 24
5324: AND
5325: IFFALSE 5670
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5327: LD_EXP 24
5331: PUSH
5332: LD_EXP 26
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: PPUSH
5341: LD_EXP 23
5345: PPUSH
5346: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5350: LD_EXP 23
5354: PPUSH
5355: LD_EXP 24
5359: PPUSH
5360: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5364: LD_EXP 24
5368: PPUSH
5369: LD_STRING DG-1-start-c
5371: PPUSH
5372: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5376: LD_EXP 23
5380: PPUSH
5381: LD_STRING DH-1-start-c
5383: PPUSH
5384: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5388: LD_EXP 24
5392: PPUSH
5393: LD_STRING DG-2-start-c
5395: PPUSH
5396: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5400: LD_EXP 23
5404: PPUSH
5405: LD_STRING DH-2-start-c
5407: PPUSH
5408: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5412: LD_EXP 24
5416: PPUSH
5417: LD_STRING DG-3-start-c
5419: PPUSH
5420: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5424: LD_EXP 23
5428: PPUSH
5429: LD_INT 83
5431: PPUSH
5432: LD_INT 56
5434: PPUSH
5435: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5439: LD_EXP 24
5443: PPUSH
5444: LD_INT 83
5446: PPUSH
5447: LD_INT 59
5449: PPUSH
5450: CALL_OW 111
// if Kamil then
5454: LD_EXP 26
5458: IFFALSE 5475
// ComMoveXY ( Kamil , 80 , 58 ) ;
5460: LD_EXP 26
5464: PPUSH
5465: LD_INT 80
5467: PPUSH
5468: LD_INT 58
5470: PPUSH
5471: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5475: LD_EXP 23
5479: PPUSH
5480: LD_EXP 24
5484: PPUSH
5485: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5489: LD_EXP 24
5493: PUSH
5494: LD_EXP 26
5498: PUSH
5499: EMPTY
5500: LIST
5501: LIST
5502: PPUSH
5503: LD_EXP 23
5507: PPUSH
5508: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5512: LD_EXP 23
5516: PPUSH
5517: LD_STRING DH-3-start-c
5519: PPUSH
5520: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5524: LD_EXP 24
5528: PPUSH
5529: LD_STRING DG-4-start-c
5531: PPUSH
5532: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5536: LD_EXP 23
5540: PPUSH
5541: LD_STRING DH-5-start-c
5543: PPUSH
5544: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5548: LD_EXP 24
5552: PPUSH
5553: LD_STRING DG-5-start-c
5555: PPUSH
5556: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5560: LD_EXP 23
5564: PPUSH
5565: LD_STRING DH-6-start-c
5567: PPUSH
5568: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5572: LD_EXP 24
5576: PPUSH
5577: LD_STRING DG-6-start-c
5579: PPUSH
5580: CALL_OW 88
// if Kamil then
5584: LD_EXP 26
5588: IFFALSE 5644
// begin ComTurnUnit ( Kamil , Heike ) ;
5590: LD_EXP 26
5594: PPUSH
5595: LD_EXP 23
5599: PPUSH
5600: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5604: LD_EXP 26
5608: PPUSH
5609: LD_STRING DKam-1-start-c
5611: PPUSH
5612: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5616: LD_EXP 24
5620: PPUSH
5621: LD_EXP 26
5625: PPUSH
5626: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5630: LD_EXP 24
5634: PPUSH
5635: LD_STRING DG-7-start-c
5637: PPUSH
5638: CALL_OW 88
// end else
5642: GO 5668
// begin Say ( Givi , DG-8-start-c ) ;
5644: LD_EXP 24
5648: PPUSH
5649: LD_STRING DG-8-start-c
5651: PPUSH
5652: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5656: LD_EXP 23
5660: PPUSH
5661: LD_STRING DH-7-start-c
5663: PPUSH
5664: CALL_OW 88
// end ; end else
5668: GO 6036
// if not Givi and Mike then
5670: LD_EXP 24
5674: NOT
5675: PUSH
5676: LD_EXP 25
5680: AND
5681: IFFALSE 5940
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5683: LD_EXP 25
5687: PUSH
5688: LD_EXP 26
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: LD_EXP 23
5701: PPUSH
5702: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5706: LD_EXP 23
5710: PPUSH
5711: LD_EXP 25
5715: PPUSH
5716: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5720: LD_EXP 25
5724: PPUSH
5725: LD_STRING DM-1-start-b
5727: PPUSH
5728: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5732: LD_EXP 23
5736: PPUSH
5737: LD_STRING DH-1-start-b
5739: PPUSH
5740: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5744: LD_EXP 25
5748: PPUSH
5749: LD_STRING DM-2-start-b
5751: PPUSH
5752: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5756: LD_EXP 23
5760: PPUSH
5761: LD_STRING DH-2-start-b
5763: PPUSH
5764: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5768: LD_EXP 25
5772: PPUSH
5773: LD_STRING DM-3-start-b
5775: PPUSH
5776: CALL_OW 88
// if Kamil then
5780: LD_EXP 26
5784: IFFALSE 5801
// ComMoveXY ( Kamil , 80 , 58 ) ;
5786: LD_EXP 26
5790: PPUSH
5791: LD_INT 80
5793: PPUSH
5794: LD_INT 58
5796: PPUSH
5797: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5801: LD_EXP 23
5805: PPUSH
5806: LD_INT 83
5808: PPUSH
5809: LD_INT 56
5811: PPUSH
5812: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5816: LD_EXP 25
5820: PPUSH
5821: LD_INT 83
5823: PPUSH
5824: LD_INT 59
5826: PPUSH
5827: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5831: LD_EXP 23
5835: PPUSH
5836: LD_EXP 25
5840: PPUSH
5841: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5845: LD_EXP 26
5849: PUSH
5850: LD_EXP 25
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: LD_EXP 23
5863: PPUSH
5864: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
5868: LD_EXP 23
5872: PPUSH
5873: LD_STRING DH-3-start-b
5875: PPUSH
5876: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
5880: LD_EXP 25
5884: PPUSH
5885: LD_STRING DM-4-start-b
5887: PPUSH
5888: CALL_OW 88
// if Kamil then
5892: LD_EXP 26
5896: IFFALSE 5926
// begin ComTurnUnit ( Kamil , Heike ) ;
5898: LD_EXP 26
5902: PPUSH
5903: LD_EXP 23
5907: PPUSH
5908: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5912: LD_EXP 26
5916: PPUSH
5917: LD_STRING DKam-1-start-c
5919: PPUSH
5920: CALL_OW 88
// end else
5924: GO 5938
// begin Say ( Mike , DM-5-start-b ) ;
5926: LD_EXP 25
5930: PPUSH
5931: LD_STRING DM-5-start-b
5933: PPUSH
5934: CALL_OW 88
// end ; end else
5938: GO 6036
// if Kamil then
5940: LD_EXP 26
5944: IFFALSE 6024
// begin AddComTurnUnit ( Heike , Kamil ) ;
5946: LD_EXP 23
5950: PPUSH
5951: LD_EXP 26
5955: PPUSH
5956: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
5960: LD_EXP 26
5964: PPUSH
5965: LD_EXP 23
5969: PPUSH
5970: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
5974: LD_EXP 23
5978: PPUSH
5979: LD_STRING DH-1-start-f
5981: PPUSH
5982: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
5986: LD_EXP 26
5990: PPUSH
5991: LD_STRING DKam-1-start-f
5993: PPUSH
5994: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
5998: LD_EXP 23
6002: PPUSH
6003: LD_STRING DH-2-start-f
6005: PPUSH
6006: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6010: LD_EXP 26
6014: PPUSH
6015: LD_STRING DKam-2-start-f
6017: PPUSH
6018: CALL_OW 88
// end else
6022: GO 6036
// begin Say ( Heike , DH-1-start-d ) ;
6024: LD_EXP 23
6028: PPUSH
6029: LD_STRING DH-1-start-d
6031: PPUSH
6032: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6036: LD_EXP 23
6040: PUSH
6041: LD_EXP 24
6045: PUSH
6046: LD_EXP 25
6050: PUSH
6051: LD_EXP 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PPUSH
6062: CALL_OW 139
// InGameOff ;
6066: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6070: LD_STRING OEast
6072: PPUSH
6073: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6077: LD_INT 10
6079: PPUSH
6080: LD_INT 1
6082: PPUSH
6083: CALL_OW 424
// SaveForQuickRestart ;
6087: CALL_OW 22
// wait ( 0 0$20 ) ;
6091: LD_INT 700
6093: PPUSH
6094: CALL_OW 67
// SendSciToForest ;
6098: CALL 1496 0 0
// if Difficulty = 1 then
6102: LD_OWVAR 67
6106: PUSH
6107: LD_INT 1
6109: EQUAL
6110: IFFALSE 6114
// exit ;
6112: GO 6231
// wait ( [ 5 5$00 , 2 2$30 ] [ Difficulty - 1 ] ) ;
6114: LD_INT 10500
6116: PUSH
6117: LD_INT 5250
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: LD_OWVAR 67
6128: PUSH
6129: LD_INT 1
6131: MINUS
6132: ARRAY
6133: PPUSH
6134: CALL_OW 67
// if usAlert then
6138: LD_EXP 10
6142: IFFALSE 6146
// exit ;
6144: GO 6231
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6146: LD_ADDR_VAR 0 3
6150: PUSH
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PPUSH
6175: CALL_OW 69
6179: ST_TO_ADDR
// if not tmp then
6180: LD_VAR 0 3
6184: NOT
6185: IFFALSE 6189
// exit ;
6187: GO 6231
// ComExitBuilding ( tmp ) ;
6189: LD_VAR 0 3
6193: PPUSH
6194: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6198: LD_VAR 0 3
6202: PPUSH
6203: LD_INT 31
6205: PPUSH
6206: LD_INT 40
6208: PPUSH
6209: LD_INT 13
6211: PPUSH
6212: LD_INT 3
6214: PPUSH
6215: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6219: LD_VAR 0 3
6223: PPUSH
6224: LD_INT 1
6226: PPUSH
6227: CALL_OW 180
// end ;
6231: LD_VAR 0 1
6235: RET
// every 3 3$00 do
6236: GO 6238
6238: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6239: LD_INT 1
6241: PPUSH
6242: LD_INT 570
6244: PPUSH
6245: LD_INT 350
6247: PPUSH
6248: CALL_OW 550
// wait ( 2 2$40 ) ;
6252: LD_INT 5600
6254: PPUSH
6255: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6259: LD_INT 0
6261: PPUSH
6262: LD_INT 570
6264: PPUSH
6265: LD_INT 350
6267: PPUSH
6268: CALL_OW 550
// end ;
6272: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6273: LD_EXP 4
6277: NOT
6278: PUSH
6279: LD_INT 2
6281: PPUSH
6282: LD_EXP 27
6286: PPUSH
6287: CALL_OW 292
6291: AND
6292: IFFALSE 7208
6294: GO 6296
6296: DISABLE
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6301: LD_INT 10
6303: PPUSH
6304: LD_INT 0
6306: PPUSH
6307: CALL_OW 424
// aviradzeSpotted := true ;
6311: LD_ADDR_EXP 4
6315: PUSH
6316: LD_INT 1
6318: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6319: LD_ADDR_VAR 0 2
6323: PUSH
6324: LD_INT 22
6326: PUSH
6327: LD_INT 2
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 21
6336: PUSH
6337: LD_INT 1
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PPUSH
6348: CALL_OW 69
6352: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6353: LD_EXP 23
6357: PPUSH
6358: LD_EXP 27
6362: PPUSH
6363: CALL_OW 250
6367: PPUSH
6368: LD_EXP 27
6372: PPUSH
6373: CALL_OW 251
6377: PPUSH
6378: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6382: LD_INT 35
6384: PPUSH
6385: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6389: LD_EXP 23
6393: PPUSH
6394: LD_EXP 27
6398: PPUSH
6399: CALL_OW 296
6403: PUSH
6404: LD_INT 16
6406: LESS
6407: IFFALSE 6382
// InGameOn ;
6409: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6413: LD_INT 5
6415: PPUSH
6416: LD_INT 2
6418: PPUSH
6419: CALL_OW 343
// if pepAmount > 2 then
6423: LD_VAR 0 2
6427: PUSH
6428: LD_INT 2
6430: GREATER
6431: IFFALSE 6447
// Say ( Heike , DH-1-spot ) else
6433: LD_EXP 23
6437: PPUSH
6438: LD_STRING DH-1-spot
6440: PPUSH
6441: CALL_OW 88
6445: GO 6459
// Say ( Heike , DH-1-spot-d ) ;
6447: LD_EXP 23
6451: PPUSH
6452: LD_STRING DH-1-spot-d
6454: PPUSH
6455: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6459: LD_EXP 23
6463: PPUSH
6464: LD_EXP 27
6468: PPUSH
6469: CALL_OW 250
6473: PPUSH
6474: LD_EXP 27
6478: PPUSH
6479: CALL_OW 251
6483: PPUSH
6484: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6488: LD_ADDR_VAR 0 1
6492: PUSH
6493: LD_EXP 26
6497: PUSH
6498: LD_EXP 25
6502: PUSH
6503: LD_EXP 24
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PUSH
6513: FOR_IN
6514: IFFALSE 6553
// if GetDistUnits ( i , Aviradze ) > 7 then
6516: LD_VAR 0 1
6520: PPUSH
6521: LD_EXP 27
6525: PPUSH
6526: CALL_OW 296
6530: PUSH
6531: LD_INT 7
6533: GREATER
6534: IFFALSE 6551
// ComMoveXY ( i , 102 , 40 ) ;
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 102
6543: PPUSH
6544: LD_INT 40
6546: PPUSH
6547: CALL_OW 111
6551: GO 6513
6553: POP
6554: POP
// repeat wait ( 0 0$1 ) ;
6555: LD_INT 35
6557: PPUSH
6558: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6562: LD_EXP 23
6566: PPUSH
6567: LD_EXP 27
6571: PPUSH
6572: CALL_OW 296
6576: PUSH
6577: LD_INT 6
6579: LESS
6580: IFFALSE 6555
// ComTurnUnit ( Heike , Aviradze ) ;
6582: LD_EXP 23
6586: PPUSH
6587: LD_EXP 27
6591: PPUSH
6592: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6596: LD_EXP 27
6600: PUSH
6601: LD_EXP 29
6605: PUSH
6606: LD_EXP 28
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: PPUSH
6616: LD_EXP 23
6620: PPUSH
6621: CALL_OW 119
// if pepAmount > 1 then
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 1
6632: GREATER
6633: IFFALSE 6685
// begin wait ( 0 0$2 ) ;
6635: LD_INT 70
6637: PPUSH
6638: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6642: LD_EXP 26
6646: PUSH
6647: LD_EXP 25
6651: PUSH
6652: LD_EXP 24
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: LD_EXP 27
6666: PPUSH
6667: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6671: LD_EXP 23
6675: PPUSH
6676: LD_STRING DH-2-spot
6678: PPUSH
6679: CALL_OW 88
// end else
6683: GO 6697
// Say ( Heike , DH-2-spot-d ) ;
6685: LD_EXP 23
6689: PPUSH
6690: LD_STRING DH-2-spot-d
6692: PPUSH
6693: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6697: LD_EXP 27
6701: PPUSH
6702: LD_STRING DA-2-spot
6704: PPUSH
6705: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6709: LD_EXP 23
6713: PPUSH
6714: LD_STRING DH-3-spot
6716: PPUSH
6717: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6721: LD_EXP 28
6725: PPUSH
6726: LD_EXP 23
6730: PPUSH
6731: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6735: LD_EXP 23
6739: PPUSH
6740: LD_EXP 28
6744: PPUSH
6745: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6749: LD_INT 10
6751: PPUSH
6752: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6756: LD_EXP 28
6760: PPUSH
6761: LD_STRING DK-3-spot
6763: PPUSH
6764: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6768: LD_EXP 28
6772: PPUSH
6773: LD_EXP 23
6777: PPUSH
6778: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6782: LD_EXP 23
6786: PPUSH
6787: LD_STRING DH-4-spot
6789: PPUSH
6790: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6794: LD_INT 10
6796: PPUSH
6797: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6801: LD_EXP 23
6805: PPUSH
6806: LD_EXP 27
6810: PPUSH
6811: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6815: LD_EXP 27
6819: PPUSH
6820: LD_STRING DA-4-spot
6822: PPUSH
6823: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6827: LD_EXP 28
6831: PPUSH
6832: LD_EXP 27
6836: PPUSH
6837: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6841: LD_EXP 28
6845: PPUSH
6846: LD_STRING DK-4-spot
6848: PPUSH
6849: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6853: LD_EXP 27
6857: PPUSH
6858: LD_EXP 28
6862: PPUSH
6863: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
6867: LD_EXP 27
6871: PPUSH
6872: LD_STRING DA-5-spot
6874: PPUSH
6875: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
6879: LD_EXP 28
6883: PPUSH
6884: LD_STRING DK-5-spot
6886: PPUSH
6887: CALL_OW 88
// if pepAmount = 1 then
6891: LD_VAR 0 2
6895: PUSH
6896: LD_INT 1
6898: EQUAL
6899: IFFALSE 6913
// Say ( Heike , DH-5-spot-f ) ;
6901: LD_EXP 23
6905: PPUSH
6906: LD_STRING DH-5-spot-f
6908: PPUSH
6909: CALL_OW 88
// if pepAmount < 3 then
6913: LD_VAR 0 2
6917: PUSH
6918: LD_INT 3
6920: LESS
6921: IFFALSE 6937
// Say ( Aviradze , DA-6-spot-f ) else
6923: LD_EXP 27
6927: PPUSH
6928: LD_STRING DA-6-spot-f
6930: PPUSH
6931: CALL_OW 88
6935: GO 6973
// if pepAmount < 4 then
6937: LD_VAR 0 2
6941: PUSH
6942: LD_INT 4
6944: LESS
6945: IFFALSE 6961
// Say ( Aviradze , DA-6-spot-c ) else
6947: LD_EXP 27
6951: PPUSH
6952: LD_STRING DA-6-spot-c
6954: PPUSH
6955: CALL_OW 88
6959: GO 6973
// Say ( Aviradze , DA-6-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-6-spot
6968: PPUSH
6969: CALL_OW 88
// if Kamil then
6973: LD_EXP 26
6977: IFFALSE 6991
// Say ( Kamil , DKam-6-spot ) ;
6979: LD_EXP 26
6983: PPUSH
6984: LD_STRING DKam-6-spot
6986: PPUSH
6987: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
6991: LD_EXP 28
6995: PPUSH
6996: LD_STRING DK-6-spot
6998: PPUSH
6999: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7003: LD_EXP 27
7007: PPUSH
7008: LD_EXP 23
7012: PPUSH
7013: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7017: LD_EXP 27
7021: PPUSH
7022: LD_STRING DA-7-spot
7024: PPUSH
7025: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7029: LD_EXP 23
7033: PPUSH
7034: LD_STRING DH-7-spot
7036: PPUSH
7037: CALL_OW 88
// if sciCounterKill >= 3 then
7041: LD_EXP 9
7045: PUSH
7046: LD_INT 3
7048: GREATEREQUAL
7049: IFFALSE 7075
// begin Say ( Heike , DH-7-spot-a ) ;
7051: LD_EXP 23
7055: PPUSH
7056: LD_STRING DH-7-spot-a
7058: PPUSH
7059: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7063: LD_EXP 27
7067: PPUSH
7068: LD_STRING DA-8-spot-a
7070: PPUSH
7071: CALL_OW 88
// end ; InGameOff ;
7075: CALL_OW 9
// if sciCounterKill < 3 then
7079: LD_EXP 9
7083: PUSH
7084: LD_INT 3
7086: LESS
7087: IFFALSE 7146
// begin SetSide ( Kaia , 2 ) ;
7089: LD_EXP 28
7093: PPUSH
7094: LD_INT 2
7096: PPUSH
7097: CALL_OW 235
// ComFree ( Kaia ) ;
7101: LD_EXP 28
7105: PPUSH
7106: CALL_OW 139
// if Kamil then
7110: LD_EXP 26
7114: IFFALSE 7137
// begin ComHold ( Kamil ) ;
7116: LD_EXP 26
7120: PPUSH
7121: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_INT 5
7132: PPUSH
7133: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7137: LD_STRING OSci
7139: PPUSH
7140: CALL_OW 337
// end else
7144: GO 7208
// begin aviradzeQuestDone := true ;
7146: LD_ADDR_EXP 8
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// attackDeltaAllowed := true ;
7154: LD_ADDR_EXP 14
7158: PUSH
7159: LD_INT 1
7161: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7162: LD_STRING ODelta2
7164: PPUSH
7165: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
7169: LD_ADDR_VAR 0 1
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_INT 5
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PUSH
7189: FOR_IN
7190: IFFALSE 7206
// SetSide ( i , 2 ) ;
7192: LD_VAR 0 1
7196: PPUSH
7197: LD_INT 2
7199: PPUSH
7200: CALL_OW 235
7204: GO 7189
7206: POP
7207: POP
// end ; end ;
7208: PPOPN 2
7210: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7211: LD_EXP 7
7215: NOT
7216: PUSH
7217: LD_EXP 22
7221: PPUSH
7222: LD_EXP 23
7226: PPUSH
7227: CALL_OW 74
7231: PPUSH
7232: LD_EXP 23
7236: PPUSH
7237: CALL_OW 296
7241: PUSH
7242: LD_INT 8
7244: LESS
7245: AND
7246: PUSH
7247: LD_INT 2
7249: PPUSH
7250: LD_EXP 22
7254: PPUSH
7255: LD_EXP 23
7259: PPUSH
7260: CALL_OW 74
7264: PPUSH
7265: CALL_OW 292
7269: AND
7270: PUSH
7271: LD_INT 22
7273: PUSH
7274: LD_INT 2
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 21
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PPUSH
7295: CALL_OW 69
7299: PUSH
7300: LD_INT 1
7302: GREATER
7303: AND
7304: PUSH
7305: LD_EXP 4
7309: NOT
7310: AND
7311: IFFALSE 7355
7313: GO 7315
7315: DISABLE
// begin sciSpotted := true ;
7316: LD_ADDR_EXP 7
7320: PUSH
7321: LD_INT 1
7323: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7324: LD_EXP 22
7328: PPUSH
7329: LD_EXP 23
7333: PPUSH
7334: CALL_OW 74
7338: PPUSH
7339: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7343: LD_EXP 23
7347: PPUSH
7348: LD_STRING DH-1-sci
7350: PPUSH
7351: CALL_OW 88
// end ;
7355: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7356: LD_EXP 4
7360: PUSH
7361: LD_EXP 7
7365: NOT
7366: AND
7367: PUSH
7368: LD_INT 2
7370: PPUSH
7371: LD_EXP 22
7375: PPUSH
7376: LD_EXP 23
7380: PPUSH
7381: CALL_OW 74
7385: PPUSH
7386: CALL_OW 292
7390: AND
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 2
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 21
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PPUSH
7416: CALL_OW 69
7420: PUSH
7421: LD_INT 1
7423: GREATER
7424: AND
7425: PUSH
7426: LD_EXP 4
7430: AND
7431: PUSH
7432: LD_EXP 8
7436: NOT
7437: AND
7438: IFFALSE 7579
7440: GO 7442
7442: DISABLE
7443: LD_INT 0
7445: PPUSH
// begin sciSpotted := true ;
7446: LD_ADDR_EXP 7
7450: PUSH
7451: LD_INT 1
7453: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7454: LD_ADDR_VAR 0 1
7458: PUSH
7459: LD_EXP 22
7463: PPUSH
7464: LD_EXP 23
7468: PPUSH
7469: CALL_OW 74
7473: ST_TO_ADDR
// DialogueOn ;
7474: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 250
7487: PPUSH
7488: LD_VAR 0 1
7492: PPUSH
7493: CALL_OW 251
7497: PPUSH
7498: LD_INT 2
7500: PPUSH
7501: LD_INT 3
7503: NEG
7504: PPUSH
7505: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7509: LD_VAR 0 1
7513: PPUSH
7514: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7518: LD_EXP 23
7522: PPUSH
7523: LD_STRING DH-1-sci-a
7525: PPUSH
7526: CALL_OW 88
// if Mike then
7530: LD_EXP 25
7534: IFFALSE 7548
// Say ( Mike , DM-1-sci-a ) ;
7536: LD_EXP 25
7540: PPUSH
7541: LD_STRING DM-1-sci-a
7543: PPUSH
7544: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7548: LD_VAR 0 1
7552: PPUSH
7553: CALL_OW 250
7557: PPUSH
7558: LD_VAR 0 1
7562: PPUSH
7563: CALL_OW 251
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 331
// DialogueOff ;
7575: CALL_OW 7
// end ;
7579: PPOPN 1
7581: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7582: LD_EXP 10
7586: PUSH
7587: LD_EXP 19
7591: PPUSH
7592: CALL_OW 256
7596: PUSH
7597: LD_INT 1000
7599: LESS
7600: PUSH
7601: LD_INT 3
7603: PPUSH
7604: CALL_OW 256
7608: PUSH
7609: LD_INT 999
7611: LESS
7612: OR
7613: AND
7614: IFFALSE 7870
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7622: LD_ADDR_VAR 0 1
7626: PUSH
7627: LD_INT 22
7629: PUSH
7630: LD_INT 1
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: PUSH
7637: LD_INT 21
7639: PUSH
7640: LD_INT 2
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PUSH
7647: LD_INT 58
7649: PUSH
7650: EMPTY
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 69
7662: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7663: LD_VAR 0 1
7667: PUSH
7668: LD_EXP 19
7672: PPUSH
7673: CALL_OW 302
7677: AND
7678: IFFALSE 7720
// begin if IsInUnit ( Gladstone ) then
7680: LD_EXP 19
7684: PPUSH
7685: CALL_OW 310
7689: IFFALSE 7700
// ComExitBuilding ( Gladstone ) ;
7691: LD_EXP 19
7695: PPUSH
7696: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7700: LD_EXP 19
7704: PPUSH
7705: LD_VAR 0 1
7709: PUSH
7710: LD_INT 1
7712: ARRAY
7713: PPUSH
7714: CALL_OW 180
// end else
7718: GO 7740
// if IsInUnit ( Gladstone ) then
7720: LD_EXP 19
7724: PPUSH
7725: CALL_OW 310
7729: IFFALSE 7740
// ComExitBuilding ( Gladstone ) ;
7731: LD_EXP 19
7735: PPUSH
7736: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
7740: LD_EXP 19
7744: PPUSH
7745: LD_INT 27
7747: PPUSH
7748: LD_INT 51
7750: PPUSH
7751: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
7755: LD_EXP 19
7759: PPUSH
7760: LD_STRING D8-Glad-2
7762: PPUSH
7763: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7767: LD_INT 35
7769: PPUSH
7770: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
7774: LD_EXP 19
7778: PPUSH
7779: LD_INT 27
7781: PPUSH
7782: LD_INT 51
7784: PPUSH
7785: CALL_OW 307
7789: PUSH
7790: LD_EXP 19
7794: PPUSH
7795: CALL_OW 310
7799: PPUSH
7800: LD_INT 27
7802: PPUSH
7803: LD_INT 51
7805: PPUSH
7806: CALL_OW 307
7810: OR
7811: PUSH
7812: LD_EXP 19
7816: PPUSH
7817: CALL_OW 301
7821: OR
7822: IFFALSE 7767
// if IsDead ( Gladstone ) then
7824: LD_EXP 19
7828: PPUSH
7829: CALL_OW 301
7833: IFFALSE 7837
// exit ;
7835: GO 7870
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
7837: LD_INT 27
7839: PPUSH
7840: LD_INT 51
7842: PPUSH
7843: CALL_OW 428
7847: PPUSH
7848: CALL_OW 64
// gladstoneEscaped := true ;
7852: LD_ADDR_EXP 12
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
7860: LD_INT 1
7862: PPUSH
7863: LD_STRING 02_GladstoneEscaped
7865: PPUSH
7866: CALL_OW 39
// end ;
7870: PPOPN 1
7872: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone do
7873: LD_EXP 4
7877: PUSH
7878: LD_EXP 9
7882: PUSH
7883: LD_INT 3
7885: GREATEREQUAL
7886: PUSH
7887: LD_EXP 22
7891: NOT
7892: OR
7893: AND
7894: PUSH
7895: LD_EXP 8
7899: NOT
7900: AND
7901: IFFALSE 7944
7903: GO 7905
7905: DISABLE
// begin aviradzeQuestDone := true ;
7906: LD_ADDR_EXP 8
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// Say ( Heike , DH-1-quest-done ) ;
7914: LD_EXP 23
7918: PPUSH
7919: LD_STRING DH-1-quest-done
7921: PPUSH
7922: CALL_OW 88
// if Givi then
7926: LD_EXP 24
7930: IFFALSE 7944
// Say ( Givi , DG-1-quest-done ) ;
7932: LD_EXP 24
7936: PPUSH
7937: LD_STRING DG-1-quest-done
7939: PPUSH
7940: CALL_OW 88
// end ;
7944: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
7945: LD_INT 5
7947: PPUSH
7948: LD_EXP 23
7952: PPUSH
7953: CALL_OW 292
7957: PUSH
7958: LD_EXP 23
7962: PPUSH
7963: LD_EXP 27
7967: PPUSH
7968: CALL_OW 296
7972: PUSH
7973: LD_INT 6
7975: LESS
7976: AND
7977: PUSH
7978: LD_EXP 8
7982: AND
7983: PUSH
7984: LD_EXP 14
7988: NOT
7989: AND
7990: IFFALSE 8128
7992: GO 7994
7994: DISABLE
7995: LD_INT 0
7997: PPUSH
// begin attackDeltaAllowed := true ;
7998: LD_ADDR_EXP 14
8002: PUSH
8003: LD_INT 1
8005: ST_TO_ADDR
// InGameOn ;
8006: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8010: LD_EXP 23
8014: PPUSH
8015: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8019: LD_INT 10
8021: PPUSH
8022: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8026: LD_EXP 27
8030: PPUSH
8031: LD_EXP 23
8035: PPUSH
8036: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8040: LD_EXP 23
8044: PPUSH
8045: LD_EXP 27
8049: PPUSH
8050: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8054: LD_EXP 23
8058: PPUSH
8059: LD_STRING DH-1-return
8061: PPUSH
8062: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8066: LD_EXP 27
8070: PPUSH
8071: LD_STRING DA-1-return
8073: PPUSH
8074: CALL_OW 88
// InGameOff ;
8078: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8082: LD_STRING ODelta
8084: PPUSH
8085: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8089: LD_ADDR_VAR 0 1
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 5
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: PUSH
8109: FOR_IN
8110: IFFALSE 8126
// SetSide ( i , 2 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 2
8119: PPUSH
8120: CALL_OW 235
8124: GO 8109
8126: POP
8127: POP
// end ;
8128: PPOPN 1
8130: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8131: LD_EXP 10
8135: PUSH
8136: LD_EXP 14
8140: NOT
8141: AND
8142: IFFALSE 8155
8144: GO 8146
8146: DISABLE
// spottedBeforeRadio := true ;
8147: LD_ADDR_EXP 6
8151: PUSH
8152: LD_INT 1
8154: ST_TO_ADDR
8155: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8156: LD_EXP 14
8160: PUSH
8161: LD_EXP 30
8165: PPUSH
8166: CALL_OW 302
8170: AND
8171: PUSH
8172: LD_INT 1
8174: PPUSH
8175: CALL_OW 255
8179: PUSH
8180: LD_INT 1
8182: EQUAL
8183: AND
8184: PUSH
8185: LD_EXP 20
8189: PPUSH
8190: CALL_OW 302
8194: AND
8195: PUSH
8196: LD_EXP 10
8200: NOT
8201: AND
8202: IFFALSE 9418
8204: GO 8206
8206: DISABLE
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
8211: PPUSH
// begin trap := 0 ;
8212: LD_ADDR_EXP 17
8216: PUSH
8217: LD_INT 0
8219: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8220: LD_INT 420
8222: PPUSH
8223: CALL_OW 67
// DialogueOn ;
8227: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8231: LD_EXP 30
8235: PPUSH
8236: LD_STRING DMar-1-radio
8238: PPUSH
8239: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8243: LD_EXP 23
8247: PPUSH
8248: LD_STRING DH-1-radio
8250: PPUSH
8251: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8255: LD_EXP 30
8259: PPUSH
8260: LD_STRING DMar-2-radio
8262: PPUSH
8263: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8267: LD_EXP 23
8271: PPUSH
8272: LD_STRING DH-2-radio
8274: PPUSH
8275: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8279: LD_EXP 26
8283: PPUSH
8284: CALL_OW 302
8288: PUSH
8289: LD_EXP 29
8293: PPUSH
8294: CALL_OW 302
8298: OR
8299: IFFALSE 9418
// begin case Query ( Q1Trap ) of 1 :
8301: LD_STRING Q1Trap
8303: PPUSH
8304: CALL_OW 97
8308: PUSH
8309: LD_INT 1
8311: DOUBLE
8312: EQUAL
8313: IFTRUE 8317
8315: GO 8511
8317: POP
// begin if IsOk ( Kamil ) then
8318: LD_EXP 26
8322: PPUSH
8323: CALL_OW 302
8327: IFFALSE 8406
// begin Say ( Kamil , DKam-2-radio ) ;
8329: LD_EXP 26
8333: PPUSH
8334: LD_STRING DKam-2-radio
8336: PPUSH
8337: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8341: LD_EXP 26
8345: PPUSH
8346: LD_STRING DKam-3-radio
8348: PPUSH
8349: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio ) ;
8353: LD_EXP 20
8357: PPUSH
8358: LD_STRING DDelta-3-radio
8360: PPUSH
8361: CALL_OW 94
// dwait ( 0 0$01 ) ;
8365: LD_INT 35
8367: PPUSH
8368: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8372: LD_EXP 23
8376: PPUSH
8377: LD_STRING DH-3-radio
8379: PPUSH
8380: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8384: LD_EXP 26
8388: PPUSH
8389: LD_STRING DKam-4-radio
8391: PPUSH
8392: CALL_OW 88
// trap := 1 ;
8396: LD_ADDR_EXP 17
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// end else
8404: GO 8505
// begin Say ( Sophia , DS-1-radio ) ;
8406: LD_EXP 29
8410: PPUSH
8411: LD_STRING DS-1-radio
8413: PPUSH
8414: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8418: LD_EXP 29
8422: PPUSH
8423: LD_STRING DS-2-radio
8425: PPUSH
8426: CALL_OW 88
// SayRadio ( Lynch , DDelta-2-radio-s ) ;
8430: LD_EXP 20
8434: PPUSH
8435: LD_STRING DDelta-2-radio-s
8437: PPUSH
8438: CALL_OW 94
// Say ( Sophia , DS-3-radio ) ;
8442: LD_EXP 29
8446: PPUSH
8447: LD_STRING DS-3-radio
8449: PPUSH
8450: CALL_OW 88
// SayRadio ( Lynch , DDelta-3-radio-s ) ;
8454: LD_EXP 20
8458: PPUSH
8459: LD_STRING DDelta-3-radio-s
8461: PPUSH
8462: CALL_OW 94
// Say ( Sophia , DS-4-radio-s ) ;
8466: LD_EXP 29
8470: PPUSH
8471: LD_STRING DS-4-radio-s
8473: PPUSH
8474: CALL_OW 88
// dwait ( 0 0$01 ) ;
8478: LD_INT 35
8480: PPUSH
8481: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
8485: LD_EXP 23
8489: PPUSH
8490: LD_STRING DH-1-trap
8492: PPUSH
8493: CALL_OW 88
// trap := 0 ;
8497: LD_ADDR_EXP 17
8501: PUSH
8502: LD_INT 0
8504: ST_TO_ADDR
// end ; DialogueOff ;
8505: CALL_OW 7
// end ; 2 :
8509: GO 8529
8511: LD_INT 2
8513: DOUBLE
8514: EQUAL
8515: IFTRUE 8519
8517: GO 8528
8519: POP
// begin DialogueOff ;
8520: CALL_OW 7
// exit ;
8524: GO 9418
// end ; end ;
8526: GO 8529
8528: POP
// if trap = 1 then
8529: LD_EXP 17
8533: PUSH
8534: LD_INT 1
8536: EQUAL
8537: IFFALSE 8989
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
8539: LD_INT 64
8541: PPUSH
8542: LD_INT 32
8544: PPUSH
8545: LD_INT 2
8547: PPUSH
8548: LD_INT 8
8550: PPUSH
8551: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
8555: LD_INT 64
8557: PPUSH
8558: LD_INT 32
8560: PPUSH
8561: CALL_OW 84
// tmp := [ ] ;
8565: LD_ADDR_VAR 0 3
8569: PUSH
8570: EMPTY
8571: ST_TO_ADDR
// k := 3 ;
8572: LD_ADDR_VAR 0 2
8576: PUSH
8577: LD_INT 3
8579: ST_TO_ADDR
// if usForces < 3 then
8580: LD_EXP 21
8584: PUSH
8585: LD_INT 3
8587: LESS
8588: IFFALSE 8600
// k := usForces ;
8590: LD_ADDR_VAR 0 2
8594: PUSH
8595: LD_EXP 21
8599: ST_TO_ADDR
// for i := 1 to k do
8600: LD_ADDR_VAR 0 1
8604: PUSH
8605: DOUBLE
8606: LD_INT 1
8608: DEC
8609: ST_TO_ADDR
8610: LD_VAR 0 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8671
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
8618: LD_ADDR_VAR 0 3
8622: PUSH
8623: LD_VAR 0 3
8627: PPUSH
8628: LD_VAR 0 3
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PPUSH
8637: LD_EXP 21
8641: PUSH
8642: LD_INT 1
8644: ARRAY
8645: PPUSH
8646: CALL_OW 1
8650: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
8651: LD_ADDR_EXP 21
8655: PUSH
8656: LD_EXP 21
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 3
8668: ST_TO_ADDR
// end ;
8669: GO 8615
8671: POP
8672: POP
// usPatrol := tmp ;
8673: LD_ADDR_EXP 16
8677: PUSH
8678: LD_VAR 0 3
8682: ST_TO_ADDR
// for i in tmp do
8683: LD_ADDR_VAR 0 1
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: FOR_IN
8694: IFFALSE 8824
// begin if IsInUnit ( i ) then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 310
8705: IFFALSE 8716
// ComExitBuilding ( i ) ;
8707: LD_VAR 0 1
8711: PPUSH
8712: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
8716: LD_VAR 0 1
8720: PPUSH
8721: LD_INT 63
8723: PPUSH
8724: LD_INT 31
8726: PPUSH
8727: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
8731: LD_VAR 0 1
8735: PPUSH
8736: LD_INT 70
8738: PPUSH
8739: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
8743: LD_VAR 0 1
8747: PPUSH
8748: LD_INT 103
8750: PPUSH
8751: LD_INT 43
8753: PPUSH
8754: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8758: LD_VAR 0 1
8762: PPUSH
8763: LD_INT 105
8765: PPUSH
8766: CALL_OW 202
// if Difficulty > 1 then
8770: LD_OWVAR 67
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8795
// AddComAgressiveMove ( i , 114 , 69 ) ;
8780: LD_VAR 0 1
8784: PPUSH
8785: LD_INT 114
8787: PPUSH
8788: LD_INT 69
8790: PPUSH
8791: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
8795: LD_VAR 0 1
8799: PPUSH
8800: LD_INT 105
8802: PPUSH
8803: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
8807: LD_VAR 0 1
8811: PPUSH
8812: LD_INT 42
8814: PPUSH
8815: LD_INT 20
8817: PPUSH
8818: CALL_OW 174
// end ;
8822: GO 8693
8824: POP
8825: POP
// wait ( 0 0$8 ) ;
8826: LD_INT 280
8828: PPUSH
8829: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
8833: LD_INT 64
8835: PPUSH
8836: LD_INT 32
8838: PPUSH
8839: LD_INT 2
8841: PPUSH
8842: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
8846: LD_INT 35
8848: PPUSH
8849: CALL_OW 67
// for i in tmp do
8853: LD_ADDR_VAR 0 1
8857: PUSH
8858: LD_VAR 0 3
8862: PUSH
8863: FOR_IN
8864: IFFALSE 8895
// if IsDead ( i ) then
8866: LD_VAR 0 1
8870: PPUSH
8871: CALL_OW 301
8875: IFFALSE 8893
// tmp := tmp diff i ;
8877: LD_ADDR_VAR 0 3
8881: PUSH
8882: LD_VAR 0 3
8886: PUSH
8887: LD_VAR 0 1
8891: DIFF
8892: ST_TO_ADDR
8893: GO 8863
8895: POP
8896: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
8897: LD_VAR 0 3
8901: NOT
8902: PUSH
8903: LD_VAR 0 3
8907: PPUSH
8908: LD_INT 95
8910: PUSH
8911: LD_INT 7
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 3
8920: PUSH
8921: LD_INT 60
8923: PUSH
8924: EMPTY
8925: LIST
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: PUSH
8940: LD_VAR 0 3
8944: EQUAL
8945: OR
8946: IFFALSE 8846
// if tmp then
8948: LD_VAR 0 3
8952: IFFALSE 8979
// begin usPatrol := [ ] ;
8954: LD_ADDR_EXP 16
8958: PUSH
8959: EMPTY
8960: ST_TO_ADDR
// usForces := usForces union tmp ;
8961: LD_ADDR_EXP 21
8965: PUSH
8966: LD_EXP 21
8970: PUSH
8971: LD_VAR 0 3
8975: UNION
8976: ST_TO_ADDR
// end else
8977: GO 8987
// trickyMove := true ;
8979: LD_ADDR_EXP 15
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// end else
8987: GO 9418
// begin tmp := [ ] ;
8989: LD_ADDR_VAR 0 3
8993: PUSH
8994: EMPTY
8995: ST_TO_ADDR
// k := 4 ;
8996: LD_ADDR_VAR 0 2
9000: PUSH
9001: LD_INT 4
9003: ST_TO_ADDR
// if usForces < 4 then
9004: LD_EXP 21
9008: PUSH
9009: LD_INT 4
9011: LESS
9012: IFFALSE 9024
// k := usForces ;
9014: LD_ADDR_VAR 0 2
9018: PUSH
9019: LD_EXP 21
9023: ST_TO_ADDR
// for i := 1 to k do
9024: LD_ADDR_VAR 0 1
9028: PUSH
9029: DOUBLE
9030: LD_INT 1
9032: DEC
9033: ST_TO_ADDR
9034: LD_VAR 0 2
9038: PUSH
9039: FOR_TO
9040: IFFALSE 9095
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9042: LD_ADDR_VAR 0 3
9046: PUSH
9047: LD_VAR 0 3
9051: PPUSH
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 1
9059: PLUS
9060: PPUSH
9061: LD_EXP 21
9065: PUSH
9066: LD_INT 1
9068: ARRAY
9069: PPUSH
9070: CALL_OW 1
9074: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9075: LD_ADDR_EXP 21
9079: PUSH
9080: LD_EXP 21
9084: PPUSH
9085: LD_INT 1
9087: PPUSH
9088: CALL_OW 3
9092: ST_TO_ADDR
// end ;
9093: GO 9039
9095: POP
9096: POP
// if Lynch then
9097: LD_EXP 20
9101: IFFALSE 9119
// tmp := tmp ^ Lynch ;
9103: LD_ADDR_VAR 0 3
9107: PUSH
9108: LD_VAR 0 3
9112: PUSH
9113: LD_EXP 20
9117: ADD
9118: ST_TO_ADDR
// usPatrol := tmp ;
9119: LD_ADDR_EXP 16
9123: PUSH
9124: LD_VAR 0 3
9128: ST_TO_ADDR
// for i in tmp do
9129: LD_ADDR_VAR 0 1
9133: PUSH
9134: LD_VAR 0 3
9138: PUSH
9139: FOR_IN
9140: IFFALSE 9233
// begin if IsInUnit ( i ) then
9142: LD_VAR 0 1
9146: PPUSH
9147: CALL_OW 310
9151: IFFALSE 9162
// ComExitBuilding ( i ) ;
9153: LD_VAR 0 1
9157: PPUSH
9158: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9162: LD_VAR 0 1
9166: PPUSH
9167: LD_INT 69
9169: PPUSH
9170: LD_INT 15
9172: PPUSH
9173: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: LD_INT 700
9184: PPUSH
9185: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9189: LD_VAR 0 1
9193: PPUSH
9194: LD_INT 55
9196: PPUSH
9197: LD_INT 43
9199: PPUSH
9200: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9204: LD_VAR 0 1
9208: PPUSH
9209: LD_INT 700
9211: PPUSH
9212: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9216: LD_VAR 0 1
9220: PPUSH
9221: LD_INT 42
9223: PPUSH
9224: LD_INT 20
9226: PPUSH
9227: CALL_OW 174
// end ;
9231: GO 9139
9233: POP
9234: POP
// repeat wait ( 0 0$1 ) ;
9235: LD_INT 35
9237: PPUSH
9238: CALL_OW 67
// for i in tmp do
9242: LD_ADDR_VAR 0 1
9246: PUSH
9247: LD_VAR 0 3
9251: PUSH
9252: FOR_IN
9253: IFFALSE 9284
// if IsDead ( i ) then
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 301
9264: IFFALSE 9282
// tmp := tmp diff i ;
9266: LD_ADDR_VAR 0 3
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 1
9280: DIFF
9281: ST_TO_ADDR
9282: GO 9252
9284: POP
9285: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9286: LD_VAR 0 3
9290: NOT
9291: PUSH
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 95
9299: PUSH
9300: LD_INT 7
9302: PUSH
9303: EMPTY
9304: LIST
9305: LIST
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 60
9312: PUSH
9313: EMPTY
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PPUSH
9324: CALL_OW 72
9328: PUSH
9329: LD_VAR 0 3
9333: EQUAL
9334: OR
9335: IFFALSE 9235
// if not tmp then
9337: LD_VAR 0 3
9341: NOT
9342: IFFALSE 9354
// trickyMove := true else
9344: LD_ADDR_EXP 15
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
9352: GO 9361
// usPatrol := [ ] ;
9354: LD_ADDR_EXP 16
9358: PUSH
9359: EMPTY
9360: ST_TO_ADDR
// if tmp diff Lynch then
9361: LD_VAR 0 3
9365: PUSH
9366: LD_EXP 20
9370: DIFF
9371: IFFALSE 9395
// usForces := usForces union ( tmp diff Lynch ) ;
9373: LD_ADDR_EXP 21
9377: PUSH
9378: LD_EXP 21
9382: PUSH
9383: LD_VAR 0 3
9387: PUSH
9388: LD_EXP 20
9392: DIFF
9393: UNION
9394: ST_TO_ADDR
// if IsOk ( Lynch ) then
9395: LD_EXP 20
9399: PPUSH
9400: CALL_OW 302
9404: IFFALSE 9418
// ComEnterUnit ( Lynch , Delta ) ;
9406: LD_EXP 20
9410: PPUSH
9411: LD_INT 1
9413: PPUSH
9414: CALL_OW 120
// end ; end ; end ;
9418: PPOPN 3
9420: END
// every 0 0$1 trigger trickyMove do
9421: LD_EXP 15
9425: IFFALSE 9437
9427: GO 9429
9429: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9430: LD_STRING ACH_TRAP
9432: PPUSH
9433: CALL_OW 543
9437: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9438: LD_INT 22
9440: PUSH
9441: LD_INT 2
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 23
9450: PUSH
9451: LD_INT 1
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 2
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: PPUSH
9473: CALL_OW 69
9477: IFFALSE 9489
9479: GO 9481
9481: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
9482: LD_STRING ACH_SCRAP
9484: PPUSH
9485: CALL_OW 543
9489: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
9490: LD_EXP 16
9494: PPUSH
9495: LD_INT 101
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 72
9509: PUSH
9510: LD_INT 1
9512: PPUSH
9513: LD_EXP 23
9517: PPUSH
9518: CALL_OW 292
9522: AND
9523: IFFALSE 9656
9525: GO 9527
9527: DISABLE
// begin if not trap then
9528: LD_EXP 17
9532: NOT
9533: IFFALSE 9561
// begin Say ( Heike , DH-2-trap ) ;
9535: LD_EXP 23
9539: PPUSH
9540: LD_STRING DH-2-trap
9542: PPUSH
9543: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
9547: LD_EXP 25
9551: PPUSH
9552: LD_STRING DM-2-trap
9554: PPUSH
9555: CALL_OW 88
// end else
9559: GO 9573
// begin Say ( Heike , DH-1-trap-a ) ;
9561: LD_EXP 23
9565: PPUSH
9566: LD_STRING DH-1-trap-a
9568: PPUSH
9569: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9573: LD_INT 35
9575: PPUSH
9576: CALL_OW 67
// until trickyMove ;
9580: LD_EXP 15
9584: IFFALSE 9573
// Say ( Heike , DH-3-trap ) ;
9586: LD_EXP 23
9590: PPUSH
9591: LD_STRING DH-3-trap
9593: PPUSH
9594: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
9598: LD_EXP 24
9602: PPUSH
9603: CALL_OW 302
9607: PUSH
9608: LD_EXP 28
9612: PPUSH
9613: CALL_OW 302
9617: AND
9618: IFFALSE 9656
// begin Say ( Givi , DG-3-trap ) ;
9620: LD_EXP 24
9624: PPUSH
9625: LD_STRING DG-3-trap
9627: PPUSH
9628: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
9632: LD_EXP 28
9636: PPUSH
9637: LD_STRING DK-3-trap
9639: PPUSH
9640: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
9644: LD_EXP 24
9648: PPUSH
9649: LD_STRING DG-4-trap
9651: PPUSH
9652: CALL_OW 88
// end ; end ;
9656: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
9657: LD_INT 1
9659: PPUSH
9660: CALL_OW 255
9664: PUSH
9665: LD_INT 2
9667: EQUAL
9668: PUSH
9669: LD_EXP 14
9673: AND
9674: IFFALSE 9833
9676: GO 9678
9678: DISABLE
9679: LD_INT 0
9681: PPUSH
9682: PPUSH
// begin if not IsOk ( Kaia ) then
9683: LD_EXP 28
9687: PPUSH
9688: CALL_OW 302
9692: NOT
9693: IFFALSE 9697
// exit ;
9695: GO 9833
// if tick < 5 5$00 then
9697: LD_OWVAR 1
9701: PUSH
9702: LD_INT 10500
9704: LESS
9705: IFFALSE 9714
// SetAchievement ( ACH_DELTA ) ;
9707: LD_STRING ACH_DELTA
9709: PPUSH
9710: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
9714: LD_EXP 28
9718: PPUSH
9719: LD_STRING DK-1-capture
9721: PPUSH
9722: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
9726: LD_EXP 23
9730: PPUSH
9731: LD_STRING DH-1-capture
9733: PPUSH
9734: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
9738: LD_ADDR_VAR 0 2
9742: PUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 1
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 25
9755: PUSH
9756: LD_INT 1
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 69
9771: ST_TO_ADDR
// if not tmp then
9772: LD_VAR 0 2
9776: NOT
9777: IFFALSE 9781
// exit ;
9779: GO 9833
// for i in tmp do
9781: LD_ADDR_VAR 0 1
9785: PUSH
9786: LD_VAR 0 2
9790: PUSH
9791: FOR_IN
9792: IFFALSE 9831
// begin if IsInUnit ( i ) then
9794: LD_VAR 0 1
9798: PPUSH
9799: CALL_OW 310
9803: IFFALSE 9814
// ComExitBuilding ( i ) ;
9805: LD_VAR 0 1
9809: PPUSH
9810: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
9814: LD_VAR 0 1
9818: PPUSH
9819: LD_INT 38
9821: PPUSH
9822: LD_INT 23
9824: PPUSH
9825: CALL_OW 174
// end ;
9829: GO 9791
9831: POP
9832: POP
// end ;
9833: PPOPN 2
9835: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
9836: LD_INT 3
9838: PPUSH
9839: CALL_OW 255
9843: PUSH
9844: LD_INT 2
9846: EQUAL
9847: PUSH
9848: LD_EXP 14
9852: AND
9853: IFFALSE 9885
9855: GO 9857
9857: DISABLE
// begin DialogueOn ;
9858: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
9862: LD_EXP 27
9866: PPUSH
9867: LD_STRING DA-1-capture
9869: PPUSH
9870: CALL_OW 88
// DialogueOff ;
9874: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
9878: LD_STRING OTame
9880: PPUSH
9881: CALL_OW 337
// end ;
9885: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
9886: LD_INT 1
9888: PPUSH
9889: LD_INT 2
9891: PPUSH
9892: CALL_OW 321
9896: PUSH
9897: LD_INT 2
9899: EQUAL
9900: PUSH
9901: LD_EXP 14
9905: AND
9906: IFFALSE 10057
9908: GO 9910
9910: DISABLE
// begin DialogueOn ;
9911: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
9915: LD_EXP 27
9919: PPUSH
9920: LD_STRING DA-1-ape
9922: PPUSH
9923: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
9927: LD_EXP 23
9931: PPUSH
9932: LD_STRING DH-1-ape
9934: PPUSH
9935: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
9939: LD_EXP 27
9943: PPUSH
9944: LD_STRING DA-2-ape
9946: PPUSH
9947: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
9951: LD_EXP 27
9955: PPUSH
9956: LD_STRING DA-3-ape
9958: PPUSH
9959: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
9963: LD_EXP 23
9967: PPUSH
9968: LD_STRING DH-3-ape
9970: PPUSH
9971: CALL_OW 88
// DialogueOff ;
9975: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
9979: LD_INT 22
9981: PUSH
9982: LD_INT 0
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 25
9991: PUSH
9992: LD_INT 12
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: PPUSH
10003: CALL_OW 69
10007: PUSH
10008: LD_INT 0
10010: EQUAL
10011: IFFALSE 10023
// SpawnApeman ( forest , 2 ) ;
10013: LD_INT 1
10015: PPUSH
10016: LD_INT 2
10018: PPUSH
10019: CALL 405 0 2
// repeat wait ( 0 0$1 ) ;
10023: LD_INT 35
10025: PPUSH
10026: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10030: LD_INT 25
10032: PUSH
10033: LD_INT 12
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PPUSH
10040: CALL_OW 69
10044: PUSH
10045: LD_INT 0
10047: EQUAL
10048: IFFALSE 10023
// YouLost ( Ape ) ;
10050: LD_STRING Ape
10052: PPUSH
10053: CALL_OW 104
// end ;
10057: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 ] [ Difficulty ] do
10058: LD_EXP 18
10062: PUSH
10063: LD_INT 3
10065: PUSH
10066: LD_INT 2
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: PUSH
10077: LD_OWVAR 67
10081: ARRAY
10082: GREATEREQUAL
10083: IFFALSE 10127
10085: GO 10087
10087: DISABLE
// begin DialogueOn ;
10088: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10092: LD_EXP 27
10096: PPUSH
10097: LD_STRING DA-1-failure
10099: PPUSH
10100: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10104: LD_EXP 27
10108: PPUSH
10109: LD_STRING DA-2-failure
10111: PPUSH
10112: CALL_OW 88
// YouLost ( Failure ) ;
10116: LD_STRING Failure
10118: PPUSH
10119: CALL_OW 104
// DialogueOff ;
10123: CALL_OW 7
// end ;
10127: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10128: LD_EXP 28
10132: PPUSH
10133: CALL_OW 256
10137: PUSH
10138: LD_INT 3
10140: LESS
10141: IFFALSE 10274
10143: GO 10145
10145: DISABLE
// begin DialogueOn ;
10146: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10150: LD_EXP 28
10154: PPUSH
10155: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10159: LD_EXP 28
10163: PPUSH
10164: LD_STRING DK-Kaiaout-1
10166: PPUSH
10167: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10171: LD_EXP 23
10175: PPUSH
10176: LD_STRING DH-Kaiaout-2
10178: PPUSH
10179: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10183: LD_EXP 24
10187: PPUSH
10188: LD_STRING DG-Kaiaout-3
10190: PPUSH
10191: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10195: LD_EXP 23
10199: PPUSH
10200: LD_STRING DH-Kaiaout-4
10202: PPUSH
10203: CALL_OW 88
// if Givi then
10207: LD_EXP 24
10211: IFFALSE 10261
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10213: LD_EXP 24
10217: PPUSH
10218: LD_STRING DG-Kaiaout-5
10220: PPUSH
10221: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10225: LD_EXP 23
10229: PPUSH
10230: LD_STRING DH-Kaiaout-6
10232: PPUSH
10233: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10237: LD_EXP 24
10241: PPUSH
10242: LD_STRING DG-Kaiaout-7
10244: PPUSH
10245: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10249: LD_EXP 23
10253: PPUSH
10254: LD_STRING DH-Kaiaout-8
10256: PPUSH
10257: CALL_OW 88
// end ; DialogueOff ;
10261: CALL_OW 7
// KillUnit ( Kaia ) ;
10265: LD_EXP 28
10269: PPUSH
10270: CALL_OW 66
// end ;
10274: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var tmp ;
10275: LD_INT 22
10277: PUSH
10278: LD_INT 2
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 23
10287: PUSH
10288: LD_INT 0
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: PUSH
10304: LD_EXP 27
10308: PPUSH
10309: CALL_OW 302
10313: AND
10314: PUSH
10315: LD_EXP 27
10319: PPUSH
10320: CALL_OW 255
10324: PUSH
10325: LD_INT 2
10327: EQUAL
10328: AND
10329: IFFALSE 11242
10331: GO 10333
10333: DISABLE
10334: LD_INT 0
10336: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10337: LD_INT 22
10339: PUSH
10340: LD_INT 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 25
10352: PUSH
10353: LD_INT 1
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: PUSH
10360: LD_INT 34
10362: PUSH
10363: LD_INT 4
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PPUSH
10379: CALL_OW 69
10383: IFFALSE 10478
// begin Query ( QEnemyInSight ) ;
10385: LD_STRING QEnemyInSight
10387: PPUSH
10388: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
10392: LD_INT 35
10394: PPUSH
10395: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10399: LD_INT 22
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 2
10411: PUSH
10412: LD_INT 25
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 34
10424: PUSH
10425: LD_INT 4
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 69
10445: NOT
10446: PUSH
10447: LD_INT 22
10449: PUSH
10450: LD_INT 2
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 23
10459: PUSH
10460: LD_INT 0
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PPUSH
10471: CALL_OW 69
10475: AND
10476: IFFALSE 10392
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
10478: LD_ADDR_VAR 0 1
10482: PUSH
10483: LD_INT 22
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 23
10495: PUSH
10496: LD_INT 0
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 69
10511: ST_TO_ADDR
// InGameOn ;
10512: CALL_OW 8
// CenterNowOnUnits ( tmp ) ;
10516: LD_VAR 0 1
10520: PPUSH
10521: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
10525: LD_VAR 0 1
10529: PPUSH
10530: LD_EXP 27
10534: PPUSH
10535: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
10539: LD_EXP 27
10543: PPUSH
10544: LD_VAR 0 1
10548: PPUSH
10549: CALL_OW 119
// wait ( 0 0$1 ) ;
10553: LD_INT 35
10555: PPUSH
10556: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
10560: LD_EXP 27
10564: PPUSH
10565: LD_STRING DA-1-tame-a
10567: PPUSH
10568: CALL_OW 88
// if IsOk ( Mike ) then
10572: LD_EXP 25
10576: PPUSH
10577: CALL_OW 302
10581: IFFALSE 10619
// begin Say ( Mike , DM-1-tame-a ) ;
10583: LD_EXP 25
10587: PPUSH
10588: LD_STRING DM-1-tame-a
10590: PPUSH
10591: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
10595: LD_EXP 29
10599: PPUSH
10600: LD_STRING DS-1-tame-a
10602: PPUSH
10603: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
10607: LD_EXP 25
10611: PPUSH
10612: LD_STRING DM-2-tame-a
10614: PPUSH
10615: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
10619: LD_INT 105
10621: PPUSH
10622: CALL_OW 67
// PrepareFarmer ;
10626: CALL 11917 0 0
// CenterOnUnits ( Farmer ) ;
10630: LD_EXP 31
10634: PPUSH
10635: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
10639: LD_EXP 31
10643: PPUSH
10644: LD_INT 105
10646: PPUSH
10647: LD_INT 59
10649: PPUSH
10650: CALL_OW 111
// AddComHold ( Farmer ) ;
10654: LD_EXP 31
10658: PPUSH
10659: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
10663: LD_EXP 31
10667: PPUSH
10668: LD_STRING DF-1-end
10670: PPUSH
10671: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
10675: LD_EXP 27
10679: PPUSH
10680: LD_STRING DA-1-end
10682: PPUSH
10683: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
10687: LD_EXP 31
10691: PPUSH
10692: LD_STRING DF-2-end
10694: PPUSH
10695: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
10699: LD_EXP 27
10703: PPUSH
10704: LD_STRING DA-2-end
10706: PPUSH
10707: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
10711: LD_EXP 31
10715: PPUSH
10716: LD_STRING DF-3-end
10718: PPUSH
10719: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
10723: LD_EXP 23
10727: PPUSH
10728: LD_STRING DH-3-end
10730: PPUSH
10731: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
10735: LD_EXP 31
10739: PPUSH
10740: LD_STRING DF-4-end
10742: PPUSH
10743: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 ] [ Difficulty ] then
10747: LD_OWVAR 1
10751: PUSH
10752: LD_INT 52500
10754: PUSH
10755: LD_INT 47250
10757: PUSH
10758: LD_INT 42000
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: LIST
10765: PUSH
10766: LD_OWVAR 67
10770: ARRAY
10771: LESSEQUAL
10772: IFFALSE 10786
// AddMedal ( med1 , 1 ) else
10774: LD_STRING med1
10776: PPUSH
10777: LD_INT 1
10779: PPUSH
10780: CALL_OW 101
10784: GO 10797
// AddMedal ( med1 , - 1 ) ;
10786: LD_STRING med1
10788: PPUSH
10789: LD_INT 1
10791: NEG
10792: PPUSH
10793: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
10797: LD_INT 22
10799: PUSH
10800: LD_INT 1
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 25
10809: PUSH
10810: LD_INT 4
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PPUSH
10821: CALL_OW 69
10825: PUSH
10826: LD_INT 0
10828: EQUAL
10829: PUSH
10830: LD_EXP 12
10834: NOT
10835: AND
10836: IFFALSE 10850
// AddMedal ( med2 , 1 ) else
10838: LD_STRING med2
10840: PPUSH
10841: LD_INT 1
10843: PPUSH
10844: CALL_OW 101
10848: GO 10861
// AddMedal ( med2 , - 1 ) ;
10850: LD_STRING med2
10852: PPUSH
10853: LD_INT 1
10855: NEG
10856: PPUSH
10857: CALL_OW 101
// if trickyMove then
10861: LD_EXP 15
10865: IFFALSE 10879
// AddMedal ( med3 , 1 ) else
10867: LD_STRING med3
10869: PPUSH
10870: LD_INT 1
10872: PPUSH
10873: CALL_OW 101
10877: GO 10909
// if spottedBeforeRadio then
10879: LD_EXP 6
10883: IFFALSE 10898
// AddMedal ( med3 , - 2 ) else
10885: LD_STRING med3
10887: PPUSH
10888: LD_INT 2
10890: NEG
10891: PPUSH
10892: CALL_OW 101
10896: GO 10909
// AddMedal ( med3 , - 1 ) ;
10898: LD_STRING med3
10900: PPUSH
10901: LD_INT 1
10903: NEG
10904: PPUSH
10905: CALL_OW 101
// GiveMedals ( MAIN ) ;
10909: LD_STRING MAIN
10911: PPUSH
10912: CALL_OW 102
// SaveCharacters ( tmp , 02_ape ) ;
10916: LD_VAR 0 1
10920: PPUSH
10921: LD_STRING 02_ape
10923: PPUSH
10924: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
10928: LD_ADDR_VAR 0 1
10932: PUSH
10933: LD_INT 22
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 23
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 1
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
10982: LD_EXP 23
10986: PPUSH
10987: LD_STRING 02_Heike
10989: PPUSH
10990: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
10994: LD_EXP 27
10998: PPUSH
10999: LD_STRING 02_Aviradze
11001: PPUSH
11002: CALL_OW 38
// if Givi then
11006: LD_EXP 24
11010: IFFALSE 11024
// SaveCharacters ( Givi , 02_Givi ) ;
11012: LD_EXP 24
11016: PPUSH
11017: LD_STRING 02_Givi
11019: PPUSH
11020: CALL_OW 38
// if Mike then
11024: LD_EXP 25
11028: IFFALSE 11042
// SaveCharacters ( Mike , 02_Mike ) ;
11030: LD_EXP 25
11034: PPUSH
11035: LD_STRING 02_Mike
11037: PPUSH
11038: CALL_OW 38
// if Kamil then
11042: LD_EXP 26
11046: IFFALSE 11060
// SaveCharacters ( Kamil , 02_Kamil ) ;
11048: LD_EXP 26
11052: PPUSH
11053: LD_STRING 02_Kamil
11055: PPUSH
11056: CALL_OW 38
// if Kaia then
11060: LD_EXP 28
11064: IFFALSE 11078
// SaveCharacters ( Kaia , 02_Kaia ) ;
11066: LD_EXP 28
11070: PPUSH
11071: LD_STRING 02_Kaia
11073: PPUSH
11074: CALL_OW 38
// if Sophia then
11078: LD_EXP 29
11082: IFFALSE 11096
// SaveCharacters ( Sophia , 02_Sophia ) ;
11084: LD_EXP 29
11088: PPUSH
11089: LD_STRING 02_Sophia
11091: PPUSH
11092: CALL_OW 38
// if Markov then
11096: LD_EXP 30
11100: IFFALSE 11114
// SaveCharacters ( Markov , 02_Markov ) ;
11102: LD_EXP 30
11106: PPUSH
11107: LD_STRING 02_Markov
11109: PPUSH
11110: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11114: LD_VAR 0 1
11118: PUSH
11119: LD_EXP 23
11123: PUSH
11124: LD_EXP 27
11128: PUSH
11129: LD_EXP 24
11133: PUSH
11134: LD_EXP 25
11138: PUSH
11139: LD_EXP 26
11143: PUSH
11144: LD_EXP 29
11148: PUSH
11149: LD_EXP 28
11153: PUSH
11154: LD_EXP 30
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: DIFF
11169: IFFALSE 11234
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11171: LD_VAR 0 1
11175: PUSH
11176: LD_EXP 23
11180: PUSH
11181: LD_EXP 27
11185: PUSH
11186: LD_EXP 24
11190: PUSH
11191: LD_EXP 25
11195: PUSH
11196: LD_EXP 26
11200: PUSH
11201: LD_EXP 29
11205: PUSH
11206: LD_EXP 28
11210: PUSH
11211: LD_EXP 30
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: DIFF
11226: PPUSH
11227: LD_STRING 02_others
11229: PPUSH
11230: CALL_OW 38
// YouWin ;
11234: CALL_OW 103
// InGameOff ;
11238: CALL_OW 9
// end ;
11242: PPOPN 1
11244: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11245: LD_OWVAR 1
11249: PUSH
11250: LD_EXP 13
11254: GREATER
11255: PUSH
11256: LD_EXP 4
11260: AND
11261: IFFALSE 11301
11263: GO 11265
11265: DISABLE
// begin InGameOn ;
11266: CALL_OW 8
// PrepareFarmer ;
11270: CALL 11917 0 0
// CenterNowOnUnits ( Farmer ) ;
11274: LD_EXP 31
11278: PPUSH
11279: CALL_OW 87
// wait ( 0 0$2 ) ;
11283: LD_INT 70
11285: PPUSH
11286: CALL_OW 67
// YouLost ( Farmer ) ;
11290: LD_STRING Farmer
11292: PPUSH
11293: CALL_OW 104
// InGameOff ;
11297: CALL_OW 9
// end ; end_of_file
11301: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
11302: LD_INT 0
11304: PPUSH
11305: PPUSH
11306: PPUSH
// uc_side := 2 ;
11307: LD_ADDR_OWVAR 20
11311: PUSH
11312: LD_INT 2
11314: ST_TO_ADDR
// uc_nation := 2 ;
11315: LD_ADDR_OWVAR 21
11319: PUSH
11320: LD_INT 2
11322: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
11323: LD_ADDR_EXP 23
11327: PUSH
11328: LD_STRING Heike
11330: PPUSH
11331: LD_EXP 1
11335: NOT
11336: PPUSH
11337: LD_EXP 2
11341: PPUSH
11342: CALL 29729 0 3
11346: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
11347: LD_EXP 23
11351: PPUSH
11352: LD_INT 83
11354: PPUSH
11355: LD_INT 72
11357: PPUSH
11358: LD_INT 0
11360: PPUSH
11361: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
11365: LD_ADDR_EXP 24
11369: PUSH
11370: LD_STRING Givi
11372: PPUSH
11373: LD_EXP 1
11377: NOT
11378: PPUSH
11379: LD_EXP 2
11383: PPUSH
11384: CALL 29729 0 3
11388: ST_TO_ADDR
// if Givi then
11389: LD_EXP 24
11393: IFFALSE 11413
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
11395: LD_EXP 24
11399: PPUSH
11400: LD_INT 87
11402: PPUSH
11403: LD_INT 76
11405: PPUSH
11406: LD_INT 0
11408: PPUSH
11409: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
11413: LD_ADDR_EXP 25
11417: PUSH
11418: LD_STRING Mike
11420: PPUSH
11421: LD_EXP 1
11425: NOT
11426: PPUSH
11427: LD_EXP 2
11431: PPUSH
11432: CALL 29729 0 3
11436: ST_TO_ADDR
// if Mike then
11437: LD_EXP 25
11441: IFFALSE 11461
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
11443: LD_EXP 25
11447: PPUSH
11448: LD_INT 84
11450: PPUSH
11451: LD_INT 76
11453: PPUSH
11454: LD_INT 0
11456: PPUSH
11457: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
11461: LD_ADDR_EXP 26
11465: PUSH
11466: LD_STRING Kamil
11468: PPUSH
11469: LD_EXP 1
11473: NOT
11474: PPUSH
11475: LD_EXP 2
11479: PPUSH
11480: CALL 29729 0 3
11484: ST_TO_ADDR
// if Kamil then
11485: LD_EXP 26
11489: IFFALSE 11509
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
11491: LD_EXP 26
11495: PPUSH
11496: LD_INT 85
11498: PPUSH
11499: LD_INT 78
11501: PPUSH
11502: LD_INT 0
11504: PPUSH
11505: CALL_OW 48
// uc_side := 5 ;
11509: LD_ADDR_OWVAR 20
11513: PUSH
11514: LD_INT 5
11516: ST_TO_ADDR
// uc_nation := 2 ;
11517: LD_ADDR_OWVAR 21
11521: PUSH
11522: LD_INT 2
11524: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
11525: LD_ADDR_EXP 27
11529: PUSH
11530: LD_STRING Aviradze
11532: PPUSH
11533: LD_INT 0
11535: PPUSH
11536: LD_STRING 
11538: PPUSH
11539: CALL 29729 0 3
11543: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
11544: LD_EXP 27
11548: PPUSH
11549: LD_INT 106
11551: PPUSH
11552: LD_INT 38
11554: PPUSH
11555: LD_INT 0
11557: PPUSH
11558: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
11562: LD_EXP 27
11566: PPUSH
11567: LD_INT 103
11569: PPUSH
11570: LD_INT 38
11572: PPUSH
11573: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
11577: LD_ADDR_EXP 28
11581: PUSH
11582: LD_STRING Kaia
11584: PPUSH
11585: LD_INT 0
11587: PPUSH
11588: LD_STRING 
11590: PPUSH
11591: CALL 29729 0 3
11595: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
11596: LD_EXP 28
11600: PPUSH
11601: LD_INT 100
11603: PPUSH
11604: LD_INT 34
11606: PPUSH
11607: LD_INT 0
11609: PPUSH
11610: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
11614: LD_EXP 28
11618: PPUSH
11619: LD_INT 100
11621: PPUSH
11622: LD_INT 39
11624: PPUSH
11625: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
11629: LD_ADDR_EXP 29
11633: PUSH
11634: LD_STRING Sophia
11636: PPUSH
11637: LD_INT 0
11639: PPUSH
11640: LD_STRING 
11642: PPUSH
11643: CALL 29729 0 3
11647: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
11648: LD_EXP 29
11652: PPUSH
11653: LD_INT 109
11655: PPUSH
11656: LD_INT 50
11658: PPUSH
11659: LD_INT 0
11661: PPUSH
11662: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
11666: LD_EXP 29
11670: PPUSH
11671: LD_INT 100
11673: PPUSH
11674: LD_INT 39
11676: PPUSH
11677: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
11681: LD_ADDR_EXP 30
11685: PUSH
11686: LD_STRING Markov
11688: PPUSH
11689: LD_INT 0
11691: PPUSH
11692: LD_STRING 
11694: PPUSH
11695: CALL 29729 0 3
11699: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 ] [ Difficulty ] ) ;
11700: LD_INT 5
11702: PPUSH
11703: LD_INT 3
11705: PPUSH
11706: LD_INT 21
11708: PPUSH
11709: LD_INT 1
11711: PPUSH
11712: LD_INT 1
11714: PPUSH
11715: LD_INT 42
11717: PPUSH
11718: LD_INT 90
11720: PUSH
11721: LD_INT 70
11723: PUSH
11724: LD_INT 60
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: LD_OWVAR 67
11736: ARRAY
11737: PPUSH
11738: CALL 237 0 7
// veh := CreateVehicle ;
11742: LD_ADDR_VAR 0 3
11746: PUSH
11747: CALL_OW 45
11751: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
11752: LD_VAR 0 3
11756: PPUSH
11757: LD_INT 4
11759: PPUSH
11760: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
11764: LD_VAR 0 3
11768: PPUSH
11769: LD_INT 109
11771: PPUSH
11772: LD_INT 38
11774: PPUSH
11775: LD_INT 0
11777: PPUSH
11778: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
11782: LD_EXP 30
11786: PPUSH
11787: LD_VAR 0 3
11791: PPUSH
11792: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
11796: LD_EXP 28
11800: PPUSH
11801: LD_EXP 27
11805: PPUSH
11806: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
11810: LD_EXP 27
11814: PPUSH
11815: LD_EXP 28
11819: PPUSH
11820: CALL_OW 119
// if not Givi or not Mike then
11824: LD_EXP 24
11828: NOT
11829: PUSH
11830: LD_EXP 25
11834: NOT
11835: OR
11836: IFFALSE 11912
// begin uc_nation := 2 ;
11838: LD_ADDR_OWVAR 21
11842: PUSH
11843: LD_INT 2
11845: ST_TO_ADDR
// uc_side := 5 ;
11846: LD_ADDR_OWVAR 20
11850: PUSH
11851: LD_INT 5
11853: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
11854: LD_INT 1
11856: PPUSH
11857: LD_INT 1
11859: PPUSH
11860: LD_INT 1
11862: PPUSH
11863: CALL_OW 380
// un := CreateHuman ;
11867: LD_ADDR_VAR 0 2
11871: PUSH
11872: CALL_OW 44
11876: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
11877: LD_VAR 0 2
11881: PPUSH
11882: LD_INT 112
11884: PPUSH
11885: LD_INT 40
11887: PPUSH
11888: LD_INT 3
11890: PPUSH
11891: LD_INT 0
11893: PPUSH
11894: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
11898: LD_VAR 0 2
11902: PPUSH
11903: LD_EXP 27
11907: PPUSH
11908: CALL_OW 119
// end ; end ;
11912: LD_VAR 0 1
11916: RET
// export function PrepareFarmer ; var i ; begin
11917: LD_INT 0
11919: PPUSH
11920: PPUSH
// uc_side := 5 ;
11921: LD_ADDR_OWVAR 20
11925: PUSH
11926: LD_INT 5
11928: ST_TO_ADDR
// uc_nation := 2 ;
11929: LD_ADDR_OWVAR 21
11933: PUSH
11934: LD_INT 2
11936: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
11937: LD_ADDR_EXP 31
11941: PUSH
11942: LD_STRING Farmer
11944: PPUSH
11945: LD_INT 0
11947: PPUSH
11948: LD_STRING 
11950: PPUSH
11951: CALL 29729 0 3
11955: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
11956: LD_EXP 31
11960: PPUSH
11961: LD_INT 106
11963: PPUSH
11964: LD_INT 62
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 48
// for i := 1 to 5 do
11974: LD_ADDR_VAR 0 2
11978: PUSH
11979: DOUBLE
11980: LD_INT 1
11982: DEC
11983: ST_TO_ADDR
11984: LD_INT 5
11986: PUSH
11987: FOR_TO
11988: IFFALSE 12026
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
11990: LD_INT 1
11992: PPUSH
11993: LD_INT 1
11995: PPUSH
11996: LD_INT 1
11998: PPUSH
11999: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12003: CALL_OW 44
12007: PPUSH
12008: LD_INT 105
12010: PPUSH
12011: LD_INT 64
12013: PPUSH
12014: LD_INT 3
12016: PPUSH
12017: LD_INT 0
12019: PPUSH
12020: CALL_OW 50
// end ;
12024: GO 11987
12026: POP
12027: POP
// end ; end_of_file
12028: LD_VAR 0 1
12032: RET
// every 2 2$20 + 0 0$10 do
12033: GO 12035
12035: DISABLE
// begin enable ;
12036: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12037: LD_INT 1
12039: PPUSH
12040: LD_INT 5
12042: PPUSH
12043: CALL_OW 12
12047: PPUSH
12048: LD_INT 1
12050: PPUSH
12051: LD_INT 1
12053: PPUSH
12054: CALL_OW 55
// if tick > 6 6$00 then
12058: LD_OWVAR 1
12062: PUSH
12063: LD_INT 12600
12065: GREATER
12066: IFFALSE 12069
// disable ;
12068: DISABLE
// end ; end_of_file
12069: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12070: LD_VAR 0 1
12074: PUSH
12075: LD_EXP 23
12079: EQUAL
12080: IFFALSE 12089
// YouLost ( Heike ) ;
12082: LD_STRING Heike
12084: PPUSH
12085: CALL_OW 104
// if un = Aviradze then
12089: LD_VAR 0 1
12093: PUSH
12094: LD_EXP 27
12098: EQUAL
12099: IFFALSE 12108
// YouLost ( Aviradze ) ;
12101: LD_STRING Aviradze
12103: PPUSH
12104: CALL_OW 104
// if un = usLab then
12108: LD_VAR 0 1
12112: PUSH
12113: LD_INT 3
12115: EQUAL
12116: IFFALSE 12125
// YouLost ( Lab ) ;
12118: LD_STRING Lab
12120: PPUSH
12121: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12125: LD_VAR 0 1
12129: PUSH
12130: LD_INT 22
12132: PUSH
12133: LD_INT 2
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 21
12142: PUSH
12143: LD_INT 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 23
12152: PUSH
12153: LD_INT 2
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: PPUSH
12165: CALL_OW 69
12169: PUSH
12170: LD_EXP 23
12174: PUSH
12175: LD_EXP 27
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: DIFF
12184: IN
12185: PUSH
12186: LD_EXP 4
12190: AND
12191: IFFALSE 12207
// lostCounter := lostCounter + 1 ;
12193: LD_ADDR_EXP 18
12197: PUSH
12198: LD_EXP 18
12202: PUSH
12203: LD_INT 1
12205: PLUS
12206: ST_TO_ADDR
// end ;
12207: PPOPN 1
12209: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12210: LD_INT 23
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 25
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: EMPTY
12227: LIST
12228: LIST
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PPUSH
12234: CALL_OW 69
12238: PUSH
12239: LD_INT 0
12241: EQUAL
12242: PUSH
12243: LD_INT 22
12245: PUSH
12246: LD_INT 2
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 21
12255: PUSH
12256: LD_INT 3
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PPUSH
12267: CALL_OW 69
12271: PUSH
12272: LD_INT 0
12274: EQUAL
12275: AND
12276: IFFALSE 12288
12278: GO 12280
12280: DISABLE
// YouLost ( Eng ) ;
12281: LD_STRING Eng
12283: PPUSH
12284: CALL_OW 104
12288: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
12289: LD_VAR 0 1
12293: PUSH
12294: LD_EXP 22
12298: IN
12299: PUSH
12300: LD_VAR 0 2
12304: PUSH
12305: LD_INT 2
12307: EQUAL
12308: AND
12309: IFFALSE 12341
// begin usSci := usSci diff un ;
12311: LD_ADDR_EXP 22
12315: PUSH
12316: LD_EXP 22
12320: PUSH
12321: LD_VAR 0 1
12325: DIFF
12326: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
12327: LD_ADDR_EXP 9
12331: PUSH
12332: LD_EXP 9
12336: PUSH
12337: LD_INT 1
12339: PLUS
12340: ST_TO_ADDR
// end ; end ;
12341: PPOPN 3
12343: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
12344: LD_VAR 0 1
12348: PUSH
12349: LD_INT 2
12351: EQUAL
12352: PUSH
12353: LD_VAR 0 2
12357: PUSH
12358: LD_INT 5
12360: EQUAL
12361: AND
12362: IFFALSE 12371
// YouLost ( FriendlyFire ) ;
12364: LD_STRING FriendlyFire
12366: PPUSH
12367: CALL_OW 104
// end ; end_of_file
12371: PPOPN 2
12373: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12374: LD_INT 0
12376: PPUSH
// ar_miner := 81 ;
12377: LD_ADDR_EXP 39
12381: PUSH
12382: LD_INT 81
12384: ST_TO_ADDR
// ar_crane := 88 ;
12385: LD_ADDR_EXP 38
12389: PUSH
12390: LD_INT 88
12392: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12393: LD_ADDR_EXP 33
12397: PUSH
12398: LD_INT 89
12400: ST_TO_ADDR
// us_hack := 99 ;
12401: LD_ADDR_EXP 34
12405: PUSH
12406: LD_INT 99
12408: ST_TO_ADDR
// us_artillery := 97 ;
12409: LD_ADDR_EXP 35
12413: PUSH
12414: LD_INT 97
12416: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12417: LD_ADDR_EXP 36
12421: PUSH
12422: LD_INT 91
12424: ST_TO_ADDR
// ar_mortar := 92 ;
12425: LD_ADDR_EXP 37
12429: PUSH
12430: LD_INT 92
12432: ST_TO_ADDR
// ru_radar := 98 ;
12433: LD_ADDR_EXP 32
12437: PUSH
12438: LD_INT 98
12440: ST_TO_ADDR
// tech_Artillery := 80 ;
12441: LD_ADDR_EXP 40
12445: PUSH
12446: LD_INT 80
12448: ST_TO_ADDR
// tech_RadMat := 81 ;
12449: LD_ADDR_EXP 41
12453: PUSH
12454: LD_INT 81
12456: ST_TO_ADDR
// tech_BasicTools := 82 ;
12457: LD_ADDR_EXP 42
12461: PUSH
12462: LD_INT 82
12464: ST_TO_ADDR
// tech_Cargo := 83 ;
12465: LD_ADDR_EXP 43
12469: PUSH
12470: LD_INT 83
12472: ST_TO_ADDR
// tech_Track := 84 ;
12473: LD_ADDR_EXP 44
12477: PUSH
12478: LD_INT 84
12480: ST_TO_ADDR
// tech_Crane := 85 ;
12481: LD_ADDR_EXP 45
12485: PUSH
12486: LD_INT 85
12488: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12489: LD_ADDR_EXP 46
12493: PUSH
12494: LD_INT 86
12496: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12497: LD_ADDR_EXP 47
12501: PUSH
12502: LD_INT 87
12504: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12505: LD_ADDR_EXP 48
12509: PUSH
12510: LD_INT 88
12512: ST_TO_ADDR
// class_mastodont := 31 ;
12513: LD_ADDR_EXP 49
12517: PUSH
12518: LD_INT 31
12520: ST_TO_ADDR
// class_horse := 21 ;
12521: LD_ADDR_EXP 50
12525: PUSH
12526: LD_INT 21
12528: ST_TO_ADDR
// end ;
12529: LD_VAR 0 1
12533: RET
// every 1 do
12534: GO 12536
12536: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12537: CALL 12374 0 0
12541: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12542: LD_INT 0
12544: PPUSH
// if p2 = 100 then
12545: LD_VAR 0 2
12549: PUSH
12550: LD_INT 100
12552: EQUAL
12553: IFFALSE 13502
// begin if not StreamModeActive then
12555: LD_EXP 51
12559: NOT
12560: IFFALSE 12570
// StreamModeActive := true ;
12562: LD_ADDR_EXP 51
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 0 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 0
12577: EQUAL
12578: IFFALSE 12584
// InitStreamMode ;
12580: CALL 13662 0 0
// if p3 = 1 then
12584: LD_VAR 0 3
12588: PUSH
12589: LD_INT 1
12591: EQUAL
12592: IFFALSE 12602
// sRocket := true ;
12594: LD_ADDR_EXP 56
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// if p3 = 2 then
12602: LD_VAR 0 3
12606: PUSH
12607: LD_INT 2
12609: EQUAL
12610: IFFALSE 12620
// sSpeed := true ;
12612: LD_ADDR_EXP 55
12616: PUSH
12617: LD_INT 1
12619: ST_TO_ADDR
// if p3 = 3 then
12620: LD_VAR 0 3
12624: PUSH
12625: LD_INT 3
12627: EQUAL
12628: IFFALSE 12638
// sEngine := true ;
12630: LD_ADDR_EXP 57
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// if p3 = 4 then
12638: LD_VAR 0 3
12642: PUSH
12643: LD_INT 4
12645: EQUAL
12646: IFFALSE 12656
// sSpec := true ;
12648: LD_ADDR_EXP 54
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// if p3 = 5 then
12656: LD_VAR 0 3
12660: PUSH
12661: LD_INT 5
12663: EQUAL
12664: IFFALSE 12674
// sLevel := true ;
12666: LD_ADDR_EXP 58
12670: PUSH
12671: LD_INT 1
12673: ST_TO_ADDR
// if p3 = 6 then
12674: LD_VAR 0 3
12678: PUSH
12679: LD_INT 6
12681: EQUAL
12682: IFFALSE 12692
// sArmoury := true ;
12684: LD_ADDR_EXP 59
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// if p3 = 7 then
12692: LD_VAR 0 3
12696: PUSH
12697: LD_INT 7
12699: EQUAL
12700: IFFALSE 12710
// sRadar := true ;
12702: LD_ADDR_EXP 60
12706: PUSH
12707: LD_INT 1
12709: ST_TO_ADDR
// if p3 = 8 then
12710: LD_VAR 0 3
12714: PUSH
12715: LD_INT 8
12717: EQUAL
12718: IFFALSE 12728
// sBunker := true ;
12720: LD_ADDR_EXP 61
12724: PUSH
12725: LD_INT 1
12727: ST_TO_ADDR
// if p3 = 9 then
12728: LD_VAR 0 3
12732: PUSH
12733: LD_INT 9
12735: EQUAL
12736: IFFALSE 12746
// sHack := true ;
12738: LD_ADDR_EXP 62
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
// if p3 = 10 then
12746: LD_VAR 0 3
12750: PUSH
12751: LD_INT 10
12753: EQUAL
12754: IFFALSE 12764
// sFire := true ;
12756: LD_ADDR_EXP 63
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// if p3 = 11 then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 11
12771: EQUAL
12772: IFFALSE 12782
// sRefresh := true ;
12774: LD_ADDR_EXP 64
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// if p3 = 12 then
12782: LD_VAR 0 3
12786: PUSH
12787: LD_INT 12
12789: EQUAL
12790: IFFALSE 12800
// sExp := true ;
12792: LD_ADDR_EXP 65
12796: PUSH
12797: LD_INT 1
12799: ST_TO_ADDR
// if p3 = 13 then
12800: LD_VAR 0 3
12804: PUSH
12805: LD_INT 13
12807: EQUAL
12808: IFFALSE 12818
// sDepot := true ;
12810: LD_ADDR_EXP 66
12814: PUSH
12815: LD_INT 1
12817: ST_TO_ADDR
// if p3 = 14 then
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 14
12825: EQUAL
12826: IFFALSE 12836
// sFlag := true ;
12828: LD_ADDR_EXP 67
12832: PUSH
12833: LD_INT 1
12835: ST_TO_ADDR
// if p3 = 15 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 15
12843: EQUAL
12844: IFFALSE 12854
// sKamikadze := true ;
12846: LD_ADDR_EXP 75
12850: PUSH
12851: LD_INT 1
12853: ST_TO_ADDR
// if p3 = 16 then
12854: LD_VAR 0 3
12858: PUSH
12859: LD_INT 16
12861: EQUAL
12862: IFFALSE 12872
// sTroll := true ;
12864: LD_ADDR_EXP 76
12868: PUSH
12869: LD_INT 1
12871: ST_TO_ADDR
// if p3 = 17 then
12872: LD_VAR 0 3
12876: PUSH
12877: LD_INT 17
12879: EQUAL
12880: IFFALSE 12890
// sSlow := true ;
12882: LD_ADDR_EXP 77
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// if p3 = 18 then
12890: LD_VAR 0 3
12894: PUSH
12895: LD_INT 18
12897: EQUAL
12898: IFFALSE 12908
// sLack := true ;
12900: LD_ADDR_EXP 78
12904: PUSH
12905: LD_INT 1
12907: ST_TO_ADDR
// if p3 = 19 then
12908: LD_VAR 0 3
12912: PUSH
12913: LD_INT 19
12915: EQUAL
12916: IFFALSE 12926
// sTank := true ;
12918: LD_ADDR_EXP 80
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// if p3 = 20 then
12926: LD_VAR 0 3
12930: PUSH
12931: LD_INT 20
12933: EQUAL
12934: IFFALSE 12944
// sRemote := true ;
12936: LD_ADDR_EXP 81
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
// if p3 = 21 then
12944: LD_VAR 0 3
12948: PUSH
12949: LD_INT 21
12951: EQUAL
12952: IFFALSE 12962
// sPowell := true ;
12954: LD_ADDR_EXP 82
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// if p3 = 22 then
12962: LD_VAR 0 3
12966: PUSH
12967: LD_INT 22
12969: EQUAL
12970: IFFALSE 12980
// sTeleport := true ;
12972: LD_ADDR_EXP 85
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// if p3 = 23 then
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 23
12987: EQUAL
12988: IFFALSE 12998
// sOilTower := true ;
12990: LD_ADDR_EXP 87
12994: PUSH
12995: LD_INT 1
12997: ST_TO_ADDR
// if p3 = 24 then
12998: LD_VAR 0 3
13002: PUSH
13003: LD_INT 24
13005: EQUAL
13006: IFFALSE 13016
// sShovel := true ;
13008: LD_ADDR_EXP 88
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// if p3 = 25 then
13016: LD_VAR 0 3
13020: PUSH
13021: LD_INT 25
13023: EQUAL
13024: IFFALSE 13034
// sSheik := true ;
13026: LD_ADDR_EXP 89
13030: PUSH
13031: LD_INT 1
13033: ST_TO_ADDR
// if p3 = 26 then
13034: LD_VAR 0 3
13038: PUSH
13039: LD_INT 26
13041: EQUAL
13042: IFFALSE 13052
// sEarthquake := true ;
13044: LD_ADDR_EXP 91
13048: PUSH
13049: LD_INT 1
13051: ST_TO_ADDR
// if p3 = 27 then
13052: LD_VAR 0 3
13056: PUSH
13057: LD_INT 27
13059: EQUAL
13060: IFFALSE 13070
// sAI := true ;
13062: LD_ADDR_EXP 92
13066: PUSH
13067: LD_INT 1
13069: ST_TO_ADDR
// if p3 = 28 then
13070: LD_VAR 0 3
13074: PUSH
13075: LD_INT 28
13077: EQUAL
13078: IFFALSE 13088
// sCargo := true ;
13080: LD_ADDR_EXP 95
13084: PUSH
13085: LD_INT 1
13087: ST_TO_ADDR
// if p3 = 29 then
13088: LD_VAR 0 3
13092: PUSH
13093: LD_INT 29
13095: EQUAL
13096: IFFALSE 13106
// sDLaser := true ;
13098: LD_ADDR_EXP 96
13102: PUSH
13103: LD_INT 1
13105: ST_TO_ADDR
// if p3 = 30 then
13106: LD_VAR 0 3
13110: PUSH
13111: LD_INT 30
13113: EQUAL
13114: IFFALSE 13124
// sExchange := true ;
13116: LD_ADDR_EXP 97
13120: PUSH
13121: LD_INT 1
13123: ST_TO_ADDR
// if p3 = 31 then
13124: LD_VAR 0 3
13128: PUSH
13129: LD_INT 31
13131: EQUAL
13132: IFFALSE 13142
// sFac := true ;
13134: LD_ADDR_EXP 98
13138: PUSH
13139: LD_INT 1
13141: ST_TO_ADDR
// if p3 = 32 then
13142: LD_VAR 0 3
13146: PUSH
13147: LD_INT 32
13149: EQUAL
13150: IFFALSE 13160
// sPower := true ;
13152: LD_ADDR_EXP 99
13156: PUSH
13157: LD_INT 1
13159: ST_TO_ADDR
// if p3 = 33 then
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 33
13167: EQUAL
13168: IFFALSE 13178
// sRandom := true ;
13170: LD_ADDR_EXP 100
13174: PUSH
13175: LD_INT 1
13177: ST_TO_ADDR
// if p3 = 34 then
13178: LD_VAR 0 3
13182: PUSH
13183: LD_INT 34
13185: EQUAL
13186: IFFALSE 13196
// sShield := true ;
13188: LD_ADDR_EXP 101
13192: PUSH
13193: LD_INT 1
13195: ST_TO_ADDR
// if p3 = 35 then
13196: LD_VAR 0 3
13200: PUSH
13201: LD_INT 35
13203: EQUAL
13204: IFFALSE 13214
// sTime := true ;
13206: LD_ADDR_EXP 102
13210: PUSH
13211: LD_INT 1
13213: ST_TO_ADDR
// if p3 = 36 then
13214: LD_VAR 0 3
13218: PUSH
13219: LD_INT 36
13221: EQUAL
13222: IFFALSE 13232
// sTools := true ;
13224: LD_ADDR_EXP 103
13228: PUSH
13229: LD_INT 1
13231: ST_TO_ADDR
// if p3 = 101 then
13232: LD_VAR 0 3
13236: PUSH
13237: LD_INT 101
13239: EQUAL
13240: IFFALSE 13250
// sSold := true ;
13242: LD_ADDR_EXP 68
13246: PUSH
13247: LD_INT 1
13249: ST_TO_ADDR
// if p3 = 102 then
13250: LD_VAR 0 3
13254: PUSH
13255: LD_INT 102
13257: EQUAL
13258: IFFALSE 13268
// sDiff := true ;
13260: LD_ADDR_EXP 69
13264: PUSH
13265: LD_INT 1
13267: ST_TO_ADDR
// if p3 = 103 then
13268: LD_VAR 0 3
13272: PUSH
13273: LD_INT 103
13275: EQUAL
13276: IFFALSE 13286
// sFog := true ;
13278: LD_ADDR_EXP 72
13282: PUSH
13283: LD_INT 1
13285: ST_TO_ADDR
// if p3 = 104 then
13286: LD_VAR 0 3
13290: PUSH
13291: LD_INT 104
13293: EQUAL
13294: IFFALSE 13304
// sReset := true ;
13296: LD_ADDR_EXP 73
13300: PUSH
13301: LD_INT 1
13303: ST_TO_ADDR
// if p3 = 105 then
13304: LD_VAR 0 3
13308: PUSH
13309: LD_INT 105
13311: EQUAL
13312: IFFALSE 13322
// sSun := true ;
13314: LD_ADDR_EXP 74
13318: PUSH
13319: LD_INT 1
13321: ST_TO_ADDR
// if p3 = 106 then
13322: LD_VAR 0 3
13326: PUSH
13327: LD_INT 106
13329: EQUAL
13330: IFFALSE 13340
// sTiger := true ;
13332: LD_ADDR_EXP 70
13336: PUSH
13337: LD_INT 1
13339: ST_TO_ADDR
// if p3 = 107 then
13340: LD_VAR 0 3
13344: PUSH
13345: LD_INT 107
13347: EQUAL
13348: IFFALSE 13358
// sBomb := true ;
13350: LD_ADDR_EXP 71
13354: PUSH
13355: LD_INT 1
13357: ST_TO_ADDR
// if p3 = 108 then
13358: LD_VAR 0 3
13362: PUSH
13363: LD_INT 108
13365: EQUAL
13366: IFFALSE 13376
// sWound := true ;
13368: LD_ADDR_EXP 79
13372: PUSH
13373: LD_INT 1
13375: ST_TO_ADDR
// if p3 = 109 then
13376: LD_VAR 0 3
13380: PUSH
13381: LD_INT 109
13383: EQUAL
13384: IFFALSE 13394
// sBetray := true ;
13386: LD_ADDR_EXP 83
13390: PUSH
13391: LD_INT 1
13393: ST_TO_ADDR
// if p3 = 110 then
13394: LD_VAR 0 3
13398: PUSH
13399: LD_INT 110
13401: EQUAL
13402: IFFALSE 13412
// sContamin := true ;
13404: LD_ADDR_EXP 84
13408: PUSH
13409: LD_INT 1
13411: ST_TO_ADDR
// if p3 = 111 then
13412: LD_VAR 0 3
13416: PUSH
13417: LD_INT 111
13419: EQUAL
13420: IFFALSE 13430
// sOil := true ;
13422: LD_ADDR_EXP 86
13426: PUSH
13427: LD_INT 1
13429: ST_TO_ADDR
// if p3 = 112 then
13430: LD_VAR 0 3
13434: PUSH
13435: LD_INT 112
13437: EQUAL
13438: IFFALSE 13448
// sStu := true ;
13440: LD_ADDR_EXP 90
13444: PUSH
13445: LD_INT 1
13447: ST_TO_ADDR
// if p3 = 113 then
13448: LD_VAR 0 3
13452: PUSH
13453: LD_INT 113
13455: EQUAL
13456: IFFALSE 13466
// sBazooka := true ;
13458: LD_ADDR_EXP 93
13462: PUSH
13463: LD_INT 1
13465: ST_TO_ADDR
// if p3 = 114 then
13466: LD_VAR 0 3
13470: PUSH
13471: LD_INT 114
13473: EQUAL
13474: IFFALSE 13484
// sMortar := true ;
13476: LD_ADDR_EXP 94
13480: PUSH
13481: LD_INT 1
13483: ST_TO_ADDR
// if p3 = 115 then
13484: LD_VAR 0 3
13488: PUSH
13489: LD_INT 115
13491: EQUAL
13492: IFFALSE 13502
// sRanger := true ;
13494: LD_ADDR_EXP 104
13498: PUSH
13499: LD_INT 1
13501: ST_TO_ADDR
// end ; if p2 = 101 then
13502: LD_VAR 0 2
13506: PUSH
13507: LD_INT 101
13509: EQUAL
13510: IFFALSE 13638
// begin case p3 of 1 :
13512: LD_VAR 0 3
13516: PUSH
13517: LD_INT 1
13519: DOUBLE
13520: EQUAL
13521: IFTRUE 13525
13523: GO 13532
13525: POP
// hHackUnlimitedResources ; 2 :
13526: CALL 24675 0 0
13530: GO 13638
13532: LD_INT 2
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13547
13540: POP
// hHackSetLevel10 ; 3 :
13541: CALL 24808 0 0
13545: GO 13638
13547: LD_INT 3
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13562
13555: POP
// hHackSetLevel10YourUnits ; 4 :
13556: CALL 24893 0 0
13560: GO 13638
13562: LD_INT 4
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13577
13570: POP
// hHackInvincible ; 5 :
13571: CALL 25341 0 0
13575: GO 13638
13577: LD_INT 5
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13592
13585: POP
// hHackInvisible ; 6 :
13586: CALL 25452 0 0
13590: GO 13638
13592: LD_INT 6
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13600
13598: GO 13607
13600: POP
// hHackChangeYourSide ; 7 :
13601: CALL 25509 0 0
13605: GO 13638
13607: LD_INT 7
13609: DOUBLE
13610: EQUAL
13611: IFTRUE 13615
13613: GO 13622
13615: POP
// hHackChangeUnitSide ; 8 :
13616: CALL 25551 0 0
13620: GO 13638
13622: LD_INT 8
13624: DOUBLE
13625: EQUAL
13626: IFTRUE 13630
13628: GO 13637
13630: POP
// hHackFog ; end ;
13631: CALL 25652 0 0
13635: GO 13638
13637: POP
// end ; end ;
13638: LD_VAR 0 7
13642: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13643: GO 13645
13645: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13646: LD_STRING initStreamRollete();
13648: PPUSH
13649: CALL_OW 559
// InitStreamMode ;
13653: CALL 13662 0 0
// DefineStreamItems ( ) ;
13657: CALL 14102 0 0
// end ;
13661: END
// function InitStreamMode ; begin
13662: LD_INT 0
13664: PPUSH
// streamModeActive := false ;
13665: LD_ADDR_EXP 51
13669: PUSH
13670: LD_INT 0
13672: ST_TO_ADDR
// normalCounter := 36 ;
13673: LD_ADDR_EXP 52
13677: PUSH
13678: LD_INT 36
13680: ST_TO_ADDR
// hardcoreCounter := 16 ;
13681: LD_ADDR_EXP 53
13685: PUSH
13686: LD_INT 16
13688: ST_TO_ADDR
// sRocket := false ;
13689: LD_ADDR_EXP 56
13693: PUSH
13694: LD_INT 0
13696: ST_TO_ADDR
// sSpeed := false ;
13697: LD_ADDR_EXP 55
13701: PUSH
13702: LD_INT 0
13704: ST_TO_ADDR
// sEngine := false ;
13705: LD_ADDR_EXP 57
13709: PUSH
13710: LD_INT 0
13712: ST_TO_ADDR
// sSpec := false ;
13713: LD_ADDR_EXP 54
13717: PUSH
13718: LD_INT 0
13720: ST_TO_ADDR
// sLevel := false ;
13721: LD_ADDR_EXP 58
13725: PUSH
13726: LD_INT 0
13728: ST_TO_ADDR
// sArmoury := false ;
13729: LD_ADDR_EXP 59
13733: PUSH
13734: LD_INT 0
13736: ST_TO_ADDR
// sRadar := false ;
13737: LD_ADDR_EXP 60
13741: PUSH
13742: LD_INT 0
13744: ST_TO_ADDR
// sBunker := false ;
13745: LD_ADDR_EXP 61
13749: PUSH
13750: LD_INT 0
13752: ST_TO_ADDR
// sHack := false ;
13753: LD_ADDR_EXP 62
13757: PUSH
13758: LD_INT 0
13760: ST_TO_ADDR
// sFire := false ;
13761: LD_ADDR_EXP 63
13765: PUSH
13766: LD_INT 0
13768: ST_TO_ADDR
// sRefresh := false ;
13769: LD_ADDR_EXP 64
13773: PUSH
13774: LD_INT 0
13776: ST_TO_ADDR
// sExp := false ;
13777: LD_ADDR_EXP 65
13781: PUSH
13782: LD_INT 0
13784: ST_TO_ADDR
// sDepot := false ;
13785: LD_ADDR_EXP 66
13789: PUSH
13790: LD_INT 0
13792: ST_TO_ADDR
// sFlag := false ;
13793: LD_ADDR_EXP 67
13797: PUSH
13798: LD_INT 0
13800: ST_TO_ADDR
// sKamikadze := false ;
13801: LD_ADDR_EXP 75
13805: PUSH
13806: LD_INT 0
13808: ST_TO_ADDR
// sTroll := false ;
13809: LD_ADDR_EXP 76
13813: PUSH
13814: LD_INT 0
13816: ST_TO_ADDR
// sSlow := false ;
13817: LD_ADDR_EXP 77
13821: PUSH
13822: LD_INT 0
13824: ST_TO_ADDR
// sLack := false ;
13825: LD_ADDR_EXP 78
13829: PUSH
13830: LD_INT 0
13832: ST_TO_ADDR
// sTank := false ;
13833: LD_ADDR_EXP 80
13837: PUSH
13838: LD_INT 0
13840: ST_TO_ADDR
// sRemote := false ;
13841: LD_ADDR_EXP 81
13845: PUSH
13846: LD_INT 0
13848: ST_TO_ADDR
// sPowell := false ;
13849: LD_ADDR_EXP 82
13853: PUSH
13854: LD_INT 0
13856: ST_TO_ADDR
// sTeleport := false ;
13857: LD_ADDR_EXP 85
13861: PUSH
13862: LD_INT 0
13864: ST_TO_ADDR
// sOilTower := false ;
13865: LD_ADDR_EXP 87
13869: PUSH
13870: LD_INT 0
13872: ST_TO_ADDR
// sShovel := false ;
13873: LD_ADDR_EXP 88
13877: PUSH
13878: LD_INT 0
13880: ST_TO_ADDR
// sSheik := false ;
13881: LD_ADDR_EXP 89
13885: PUSH
13886: LD_INT 0
13888: ST_TO_ADDR
// sEarthquake := false ;
13889: LD_ADDR_EXP 91
13893: PUSH
13894: LD_INT 0
13896: ST_TO_ADDR
// sAI := false ;
13897: LD_ADDR_EXP 92
13901: PUSH
13902: LD_INT 0
13904: ST_TO_ADDR
// sCargo := false ;
13905: LD_ADDR_EXP 95
13909: PUSH
13910: LD_INT 0
13912: ST_TO_ADDR
// sDLaser := false ;
13913: LD_ADDR_EXP 96
13917: PUSH
13918: LD_INT 0
13920: ST_TO_ADDR
// sExchange := false ;
13921: LD_ADDR_EXP 97
13925: PUSH
13926: LD_INT 0
13928: ST_TO_ADDR
// sFac := false ;
13929: LD_ADDR_EXP 98
13933: PUSH
13934: LD_INT 0
13936: ST_TO_ADDR
// sPower := false ;
13937: LD_ADDR_EXP 99
13941: PUSH
13942: LD_INT 0
13944: ST_TO_ADDR
// sRandom := false ;
13945: LD_ADDR_EXP 100
13949: PUSH
13950: LD_INT 0
13952: ST_TO_ADDR
// sShield := false ;
13953: LD_ADDR_EXP 101
13957: PUSH
13958: LD_INT 0
13960: ST_TO_ADDR
// sTime := false ;
13961: LD_ADDR_EXP 102
13965: PUSH
13966: LD_INT 0
13968: ST_TO_ADDR
// sTools := false ;
13969: LD_ADDR_EXP 103
13973: PUSH
13974: LD_INT 0
13976: ST_TO_ADDR
// sSold := false ;
13977: LD_ADDR_EXP 68
13981: PUSH
13982: LD_INT 0
13984: ST_TO_ADDR
// sDiff := false ;
13985: LD_ADDR_EXP 69
13989: PUSH
13990: LD_INT 0
13992: ST_TO_ADDR
// sFog := false ;
13993: LD_ADDR_EXP 72
13997: PUSH
13998: LD_INT 0
14000: ST_TO_ADDR
// sReset := false ;
14001: LD_ADDR_EXP 73
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// sSun := false ;
14009: LD_ADDR_EXP 74
14013: PUSH
14014: LD_INT 0
14016: ST_TO_ADDR
// sTiger := false ;
14017: LD_ADDR_EXP 70
14021: PUSH
14022: LD_INT 0
14024: ST_TO_ADDR
// sBomb := false ;
14025: LD_ADDR_EXP 71
14029: PUSH
14030: LD_INT 0
14032: ST_TO_ADDR
// sWound := false ;
14033: LD_ADDR_EXP 79
14037: PUSH
14038: LD_INT 0
14040: ST_TO_ADDR
// sBetray := false ;
14041: LD_ADDR_EXP 83
14045: PUSH
14046: LD_INT 0
14048: ST_TO_ADDR
// sContamin := false ;
14049: LD_ADDR_EXP 84
14053: PUSH
14054: LD_INT 0
14056: ST_TO_ADDR
// sOil := false ;
14057: LD_ADDR_EXP 86
14061: PUSH
14062: LD_INT 0
14064: ST_TO_ADDR
// sStu := false ;
14065: LD_ADDR_EXP 90
14069: PUSH
14070: LD_INT 0
14072: ST_TO_ADDR
// sBazooka := false ;
14073: LD_ADDR_EXP 93
14077: PUSH
14078: LD_INT 0
14080: ST_TO_ADDR
// sMortar := false ;
14081: LD_ADDR_EXP 94
14085: PUSH
14086: LD_INT 0
14088: ST_TO_ADDR
// sRanger := false ;
14089: LD_ADDR_EXP 104
14093: PUSH
14094: LD_INT 0
14096: ST_TO_ADDR
// end ;
14097: LD_VAR 0 1
14101: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
14102: LD_INT 0
14104: PPUSH
14105: PPUSH
14106: PPUSH
14107: PPUSH
14108: PPUSH
// result := [ ] ;
14109: LD_ADDR_VAR 0 1
14113: PUSH
14114: EMPTY
14115: ST_TO_ADDR
// if campaign_id = 1 then
14116: LD_OWVAR 69
14120: PUSH
14121: LD_INT 1
14123: EQUAL
14124: IFFALSE 17062
// begin case mission_number of 1 :
14126: LD_OWVAR 70
14130: PUSH
14131: LD_INT 1
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14203
14139: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
14140: LD_ADDR_VAR 0 1
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 4
14150: PUSH
14151: LD_INT 11
14153: PUSH
14154: LD_INT 12
14156: PUSH
14157: LD_INT 15
14159: PUSH
14160: LD_INT 16
14162: PUSH
14163: LD_INT 22
14165: PUSH
14166: LD_INT 23
14168: PUSH
14169: LD_INT 26
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 101
14185: PUSH
14186: LD_INT 102
14188: PUSH
14189: LD_INT 106
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: ST_TO_ADDR
14201: GO 17060
14203: LD_INT 2
14205: DOUBLE
14206: EQUAL
14207: IFTRUE 14211
14209: GO 14283
14211: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
14212: LD_ADDR_VAR 0 1
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: LD_INT 4
14222: PUSH
14223: LD_INT 11
14225: PUSH
14226: LD_INT 12
14228: PUSH
14229: LD_INT 15
14231: PUSH
14232: LD_INT 16
14234: PUSH
14235: LD_INT 22
14237: PUSH
14238: LD_INT 23
14240: PUSH
14241: LD_INT 26
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PUSH
14255: LD_INT 101
14257: PUSH
14258: LD_INT 102
14260: PUSH
14261: LD_INT 105
14263: PUSH
14264: LD_INT 106
14266: PUSH
14267: LD_INT 108
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: ST_TO_ADDR
14281: GO 17060
14283: LD_INT 3
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14367
14291: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: LD_INT 4
14302: PUSH
14303: LD_INT 5
14305: PUSH
14306: LD_INT 11
14308: PUSH
14309: LD_INT 12
14311: PUSH
14312: LD_INT 15
14314: PUSH
14315: LD_INT 16
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_INT 26
14323: PUSH
14324: LD_INT 36
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 101
14341: PUSH
14342: LD_INT 102
14344: PUSH
14345: LD_INT 105
14347: PUSH
14348: LD_INT 106
14350: PUSH
14351: LD_INT 108
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: ST_TO_ADDR
14365: GO 17060
14367: LD_INT 4
14369: DOUBLE
14370: EQUAL
14371: IFTRUE 14375
14373: GO 14459
14375: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14376: LD_ADDR_VAR 0 1
14380: PUSH
14381: LD_INT 2
14383: PUSH
14384: LD_INT 4
14386: PUSH
14387: LD_INT 5
14389: PUSH
14390: LD_INT 8
14392: PUSH
14393: LD_INT 11
14395: PUSH
14396: LD_INT 12
14398: PUSH
14399: LD_INT 15
14401: PUSH
14402: LD_INT 16
14404: PUSH
14405: LD_INT 22
14407: PUSH
14408: LD_INT 23
14410: PUSH
14411: LD_INT 26
14413: PUSH
14414: LD_INT 36
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: LD_INT 101
14433: PUSH
14434: LD_INT 102
14436: PUSH
14437: LD_INT 105
14439: PUSH
14440: LD_INT 106
14442: PUSH
14443: LD_INT 108
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: ST_TO_ADDR
14457: GO 17060
14459: LD_INT 5
14461: DOUBLE
14462: EQUAL
14463: IFTRUE 14467
14465: GO 14567
14467: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14468: LD_ADDR_VAR 0 1
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 4
14478: PUSH
14479: LD_INT 5
14481: PUSH
14482: LD_INT 6
14484: PUSH
14485: LD_INT 8
14487: PUSH
14488: LD_INT 11
14490: PUSH
14491: LD_INT 12
14493: PUSH
14494: LD_INT 15
14496: PUSH
14497: LD_INT 16
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_INT 23
14505: PUSH
14506: LD_INT 25
14508: PUSH
14509: LD_INT 26
14511: PUSH
14512: LD_INT 36
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 101
14533: PUSH
14534: LD_INT 102
14536: PUSH
14537: LD_INT 105
14539: PUSH
14540: LD_INT 106
14542: PUSH
14543: LD_INT 108
14545: PUSH
14546: LD_INT 109
14548: PUSH
14549: LD_INT 112
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: ST_TO_ADDR
14565: GO 17060
14567: LD_INT 6
14569: DOUBLE
14570: EQUAL
14571: IFTRUE 14575
14573: GO 14695
14575: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14576: LD_ADDR_VAR 0 1
14580: PUSH
14581: LD_INT 2
14583: PUSH
14584: LD_INT 4
14586: PUSH
14587: LD_INT 5
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 8
14595: PUSH
14596: LD_INT 11
14598: PUSH
14599: LD_INT 12
14601: PUSH
14602: LD_INT 15
14604: PUSH
14605: LD_INT 16
14607: PUSH
14608: LD_INT 20
14610: PUSH
14611: LD_INT 21
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_INT 23
14619: PUSH
14620: LD_INT 25
14622: PUSH
14623: LD_INT 26
14625: PUSH
14626: LD_INT 30
14628: PUSH
14629: LD_INT 31
14631: PUSH
14632: LD_INT 32
14634: PUSH
14635: LD_INT 36
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: PUSH
14659: LD_INT 101
14661: PUSH
14662: LD_INT 102
14664: PUSH
14665: LD_INT 105
14667: PUSH
14668: LD_INT 106
14670: PUSH
14671: LD_INT 108
14673: PUSH
14674: LD_INT 109
14676: PUSH
14677: LD_INT 112
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: ST_TO_ADDR
14693: GO 17060
14695: LD_INT 7
14697: DOUBLE
14698: EQUAL
14699: IFTRUE 14703
14701: GO 14803
14703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14704: LD_ADDR_VAR 0 1
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: LD_INT 4
14714: PUSH
14715: LD_INT 5
14717: PUSH
14718: LD_INT 7
14720: PUSH
14721: LD_INT 11
14723: PUSH
14724: LD_INT 12
14726: PUSH
14727: LD_INT 15
14729: PUSH
14730: LD_INT 16
14732: PUSH
14733: LD_INT 20
14735: PUSH
14736: LD_INT 21
14738: PUSH
14739: LD_INT 22
14741: PUSH
14742: LD_INT 23
14744: PUSH
14745: LD_INT 25
14747: PUSH
14748: LD_INT 26
14750: PUSH
14751: EMPTY
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 101
14769: PUSH
14770: LD_INT 102
14772: PUSH
14773: LD_INT 103
14775: PUSH
14776: LD_INT 105
14778: PUSH
14779: LD_INT 106
14781: PUSH
14782: LD_INT 108
14784: PUSH
14785: LD_INT 112
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: ST_TO_ADDR
14801: GO 17060
14803: LD_INT 8
14805: DOUBLE
14806: EQUAL
14807: IFTRUE 14811
14809: GO 14939
14811: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14812: LD_ADDR_VAR 0 1
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: LD_INT 4
14822: PUSH
14823: LD_INT 5
14825: PUSH
14826: LD_INT 6
14828: PUSH
14829: LD_INT 7
14831: PUSH
14832: LD_INT 8
14834: PUSH
14835: LD_INT 11
14837: PUSH
14838: LD_INT 12
14840: PUSH
14841: LD_INT 15
14843: PUSH
14844: LD_INT 16
14846: PUSH
14847: LD_INT 20
14849: PUSH
14850: LD_INT 21
14852: PUSH
14853: LD_INT 22
14855: PUSH
14856: LD_INT 23
14858: PUSH
14859: LD_INT 25
14861: PUSH
14862: LD_INT 26
14864: PUSH
14865: LD_INT 30
14867: PUSH
14868: LD_INT 31
14870: PUSH
14871: LD_INT 32
14873: PUSH
14874: LD_INT 36
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: LD_INT 101
14901: PUSH
14902: LD_INT 102
14904: PUSH
14905: LD_INT 103
14907: PUSH
14908: LD_INT 105
14910: PUSH
14911: LD_INT 106
14913: PUSH
14914: LD_INT 108
14916: PUSH
14917: LD_INT 109
14919: PUSH
14920: LD_INT 112
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: ST_TO_ADDR
14937: GO 17060
14939: LD_INT 9
14941: DOUBLE
14942: EQUAL
14943: IFTRUE 14947
14945: GO 15083
14947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14948: LD_ADDR_VAR 0 1
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 4
14958: PUSH
14959: LD_INT 5
14961: PUSH
14962: LD_INT 6
14964: PUSH
14965: LD_INT 7
14967: PUSH
14968: LD_INT 8
14970: PUSH
14971: LD_INT 11
14973: PUSH
14974: LD_INT 12
14976: PUSH
14977: LD_INT 15
14979: PUSH
14980: LD_INT 16
14982: PUSH
14983: LD_INT 20
14985: PUSH
14986: LD_INT 21
14988: PUSH
14989: LD_INT 22
14991: PUSH
14992: LD_INT 23
14994: PUSH
14995: LD_INT 25
14997: PUSH
14998: LD_INT 26
15000: PUSH
15001: LD_INT 28
15003: PUSH
15004: LD_INT 30
15006: PUSH
15007: LD_INT 31
15009: PUSH
15010: LD_INT 32
15012: PUSH
15013: LD_INT 36
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: PUSH
15039: LD_INT 101
15041: PUSH
15042: LD_INT 102
15044: PUSH
15045: LD_INT 103
15047: PUSH
15048: LD_INT 105
15050: PUSH
15051: LD_INT 106
15053: PUSH
15054: LD_INT 108
15056: PUSH
15057: LD_INT 109
15059: PUSH
15060: LD_INT 112
15062: PUSH
15063: LD_INT 114
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: ST_TO_ADDR
15081: GO 17060
15083: LD_INT 10
15085: DOUBLE
15086: EQUAL
15087: IFTRUE 15091
15089: GO 15275
15091: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
15092: LD_ADDR_VAR 0 1
15096: PUSH
15097: LD_INT 2
15099: PUSH
15100: LD_INT 4
15102: PUSH
15103: LD_INT 5
15105: PUSH
15106: LD_INT 6
15108: PUSH
15109: LD_INT 7
15111: PUSH
15112: LD_INT 8
15114: PUSH
15115: LD_INT 9
15117: PUSH
15118: LD_INT 10
15120: PUSH
15121: LD_INT 11
15123: PUSH
15124: LD_INT 12
15126: PUSH
15127: LD_INT 13
15129: PUSH
15130: LD_INT 14
15132: PUSH
15133: LD_INT 15
15135: PUSH
15136: LD_INT 16
15138: PUSH
15139: LD_INT 17
15141: PUSH
15142: LD_INT 18
15144: PUSH
15145: LD_INT 19
15147: PUSH
15148: LD_INT 20
15150: PUSH
15151: LD_INT 21
15153: PUSH
15154: LD_INT 22
15156: PUSH
15157: LD_INT 23
15159: PUSH
15160: LD_INT 24
15162: PUSH
15163: LD_INT 25
15165: PUSH
15166: LD_INT 26
15168: PUSH
15169: LD_INT 28
15171: PUSH
15172: LD_INT 30
15174: PUSH
15175: LD_INT 31
15177: PUSH
15178: LD_INT 32
15180: PUSH
15181: LD_INT 36
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 101
15217: PUSH
15218: LD_INT 102
15220: PUSH
15221: LD_INT 103
15223: PUSH
15224: LD_INT 104
15226: PUSH
15227: LD_INT 105
15229: PUSH
15230: LD_INT 106
15232: PUSH
15233: LD_INT 107
15235: PUSH
15236: LD_INT 108
15238: PUSH
15239: LD_INT 109
15241: PUSH
15242: LD_INT 110
15244: PUSH
15245: LD_INT 111
15247: PUSH
15248: LD_INT 112
15250: PUSH
15251: LD_INT 114
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: LIST
15263: LIST
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: ST_TO_ADDR
15273: GO 17060
15275: LD_INT 11
15277: DOUBLE
15278: EQUAL
15279: IFTRUE 15283
15281: GO 15475
15283: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15284: LD_ADDR_VAR 0 1
15288: PUSH
15289: LD_INT 2
15291: PUSH
15292: LD_INT 3
15294: PUSH
15295: LD_INT 4
15297: PUSH
15298: LD_INT 5
15300: PUSH
15301: LD_INT 6
15303: PUSH
15304: LD_INT 7
15306: PUSH
15307: LD_INT 8
15309: PUSH
15310: LD_INT 9
15312: PUSH
15313: LD_INT 10
15315: PUSH
15316: LD_INT 11
15318: PUSH
15319: LD_INT 12
15321: PUSH
15322: LD_INT 13
15324: PUSH
15325: LD_INT 14
15327: PUSH
15328: LD_INT 15
15330: PUSH
15331: LD_INT 16
15333: PUSH
15334: LD_INT 17
15336: PUSH
15337: LD_INT 18
15339: PUSH
15340: LD_INT 19
15342: PUSH
15343: LD_INT 20
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_INT 23
15354: PUSH
15355: LD_INT 24
15357: PUSH
15358: LD_INT 25
15360: PUSH
15361: LD_INT 26
15363: PUSH
15364: LD_INT 28
15366: PUSH
15367: LD_INT 30
15369: PUSH
15370: LD_INT 31
15372: PUSH
15373: LD_INT 32
15375: PUSH
15376: LD_INT 34
15378: PUSH
15379: LD_INT 36
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 101
15417: PUSH
15418: LD_INT 102
15420: PUSH
15421: LD_INT 103
15423: PUSH
15424: LD_INT 104
15426: PUSH
15427: LD_INT 105
15429: PUSH
15430: LD_INT 106
15432: PUSH
15433: LD_INT 107
15435: PUSH
15436: LD_INT 108
15438: PUSH
15439: LD_INT 109
15441: PUSH
15442: LD_INT 110
15444: PUSH
15445: LD_INT 111
15447: PUSH
15448: LD_INT 112
15450: PUSH
15451: LD_INT 114
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: ST_TO_ADDR
15473: GO 17060
15475: LD_INT 12
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15691
15483: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15484: LD_ADDR_VAR 0 1
15488: PUSH
15489: LD_INT 1
15491: PUSH
15492: LD_INT 2
15494: PUSH
15495: LD_INT 3
15497: PUSH
15498: LD_INT 4
15500: PUSH
15501: LD_INT 5
15503: PUSH
15504: LD_INT 6
15506: PUSH
15507: LD_INT 7
15509: PUSH
15510: LD_INT 8
15512: PUSH
15513: LD_INT 9
15515: PUSH
15516: LD_INT 10
15518: PUSH
15519: LD_INT 11
15521: PUSH
15522: LD_INT 12
15524: PUSH
15525: LD_INT 13
15527: PUSH
15528: LD_INT 14
15530: PUSH
15531: LD_INT 15
15533: PUSH
15534: LD_INT 16
15536: PUSH
15537: LD_INT 17
15539: PUSH
15540: LD_INT 18
15542: PUSH
15543: LD_INT 19
15545: PUSH
15546: LD_INT 20
15548: PUSH
15549: LD_INT 21
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_INT 23
15557: PUSH
15558: LD_INT 24
15560: PUSH
15561: LD_INT 25
15563: PUSH
15564: LD_INT 26
15566: PUSH
15567: LD_INT 27
15569: PUSH
15570: LD_INT 28
15572: PUSH
15573: LD_INT 30
15575: PUSH
15576: LD_INT 31
15578: PUSH
15579: LD_INT 32
15581: PUSH
15582: LD_INT 33
15584: PUSH
15585: LD_INT 34
15587: PUSH
15588: LD_INT 36
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: LIST
15605: LIST
15606: LIST
15607: LIST
15608: LIST
15609: LIST
15610: LIST
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: LIST
15617: LIST
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: LD_INT 101
15629: PUSH
15630: LD_INT 102
15632: PUSH
15633: LD_INT 103
15635: PUSH
15636: LD_INT 104
15638: PUSH
15639: LD_INT 105
15641: PUSH
15642: LD_INT 106
15644: PUSH
15645: LD_INT 107
15647: PUSH
15648: LD_INT 108
15650: PUSH
15651: LD_INT 109
15653: PUSH
15654: LD_INT 110
15656: PUSH
15657: LD_INT 111
15659: PUSH
15660: LD_INT 112
15662: PUSH
15663: LD_INT 113
15665: PUSH
15666: LD_INT 114
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: ST_TO_ADDR
15689: GO 17060
15691: LD_INT 13
15693: DOUBLE
15694: EQUAL
15695: IFTRUE 15699
15697: GO 15895
15699: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15700: LD_ADDR_VAR 0 1
15704: PUSH
15705: LD_INT 1
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_INT 4
15716: PUSH
15717: LD_INT 5
15719: PUSH
15720: LD_INT 8
15722: PUSH
15723: LD_INT 9
15725: PUSH
15726: LD_INT 10
15728: PUSH
15729: LD_INT 11
15731: PUSH
15732: LD_INT 12
15734: PUSH
15735: LD_INT 14
15737: PUSH
15738: LD_INT 15
15740: PUSH
15741: LD_INT 16
15743: PUSH
15744: LD_INT 17
15746: PUSH
15747: LD_INT 18
15749: PUSH
15750: LD_INT 19
15752: PUSH
15753: LD_INT 20
15755: PUSH
15756: LD_INT 21
15758: PUSH
15759: LD_INT 22
15761: PUSH
15762: LD_INT 23
15764: PUSH
15765: LD_INT 24
15767: PUSH
15768: LD_INT 25
15770: PUSH
15771: LD_INT 26
15773: PUSH
15774: LD_INT 27
15776: PUSH
15777: LD_INT 28
15779: PUSH
15780: LD_INT 30
15782: PUSH
15783: LD_INT 31
15785: PUSH
15786: LD_INT 32
15788: PUSH
15789: LD_INT 33
15791: PUSH
15792: LD_INT 34
15794: PUSH
15795: LD_INT 36
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 101
15833: PUSH
15834: LD_INT 102
15836: PUSH
15837: LD_INT 103
15839: PUSH
15840: LD_INT 104
15842: PUSH
15843: LD_INT 105
15845: PUSH
15846: LD_INT 106
15848: PUSH
15849: LD_INT 107
15851: PUSH
15852: LD_INT 108
15854: PUSH
15855: LD_INT 109
15857: PUSH
15858: LD_INT 110
15860: PUSH
15861: LD_INT 111
15863: PUSH
15864: LD_INT 112
15866: PUSH
15867: LD_INT 113
15869: PUSH
15870: LD_INT 114
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: ST_TO_ADDR
15893: GO 17060
15895: LD_INT 14
15897: DOUBLE
15898: EQUAL
15899: IFTRUE 15903
15901: GO 16115
15903: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15904: LD_ADDR_VAR 0 1
15908: PUSH
15909: LD_INT 1
15911: PUSH
15912: LD_INT 2
15914: PUSH
15915: LD_INT 3
15917: PUSH
15918: LD_INT 4
15920: PUSH
15921: LD_INT 5
15923: PUSH
15924: LD_INT 6
15926: PUSH
15927: LD_INT 7
15929: PUSH
15930: LD_INT 8
15932: PUSH
15933: LD_INT 9
15935: PUSH
15936: LD_INT 10
15938: PUSH
15939: LD_INT 11
15941: PUSH
15942: LD_INT 12
15944: PUSH
15945: LD_INT 13
15947: PUSH
15948: LD_INT 14
15950: PUSH
15951: LD_INT 15
15953: PUSH
15954: LD_INT 16
15956: PUSH
15957: LD_INT 17
15959: PUSH
15960: LD_INT 18
15962: PUSH
15963: LD_INT 19
15965: PUSH
15966: LD_INT 20
15968: PUSH
15969: LD_INT 21
15971: PUSH
15972: LD_INT 22
15974: PUSH
15975: LD_INT 23
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: LD_INT 25
15983: PUSH
15984: LD_INT 26
15986: PUSH
15987: LD_INT 27
15989: PUSH
15990: LD_INT 28
15992: PUSH
15993: LD_INT 29
15995: PUSH
15996: LD_INT 30
15998: PUSH
15999: LD_INT 31
16001: PUSH
16002: LD_INT 32
16004: PUSH
16005: LD_INT 33
16007: PUSH
16008: LD_INT 34
16010: PUSH
16011: LD_INT 36
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 101
16053: PUSH
16054: LD_INT 102
16056: PUSH
16057: LD_INT 103
16059: PUSH
16060: LD_INT 104
16062: PUSH
16063: LD_INT 105
16065: PUSH
16066: LD_INT 106
16068: PUSH
16069: LD_INT 107
16071: PUSH
16072: LD_INT 108
16074: PUSH
16075: LD_INT 109
16077: PUSH
16078: LD_INT 110
16080: PUSH
16081: LD_INT 111
16083: PUSH
16084: LD_INT 112
16086: PUSH
16087: LD_INT 113
16089: PUSH
16090: LD_INT 114
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: ST_TO_ADDR
16113: GO 17060
16115: LD_INT 15
16117: DOUBLE
16118: EQUAL
16119: IFTRUE 16123
16121: GO 16335
16123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
16124: LD_ADDR_VAR 0 1
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: LD_INT 2
16134: PUSH
16135: LD_INT 3
16137: PUSH
16138: LD_INT 4
16140: PUSH
16141: LD_INT 5
16143: PUSH
16144: LD_INT 6
16146: PUSH
16147: LD_INT 7
16149: PUSH
16150: LD_INT 8
16152: PUSH
16153: LD_INT 9
16155: PUSH
16156: LD_INT 10
16158: PUSH
16159: LD_INT 11
16161: PUSH
16162: LD_INT 12
16164: PUSH
16165: LD_INT 13
16167: PUSH
16168: LD_INT 14
16170: PUSH
16171: LD_INT 15
16173: PUSH
16174: LD_INT 16
16176: PUSH
16177: LD_INT 17
16179: PUSH
16180: LD_INT 18
16182: PUSH
16183: LD_INT 19
16185: PUSH
16186: LD_INT 20
16188: PUSH
16189: LD_INT 21
16191: PUSH
16192: LD_INT 22
16194: PUSH
16195: LD_INT 23
16197: PUSH
16198: LD_INT 24
16200: PUSH
16201: LD_INT 25
16203: PUSH
16204: LD_INT 26
16206: PUSH
16207: LD_INT 27
16209: PUSH
16210: LD_INT 28
16212: PUSH
16213: LD_INT 29
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 31
16221: PUSH
16222: LD_INT 32
16224: PUSH
16225: LD_INT 33
16227: PUSH
16228: LD_INT 34
16230: PUSH
16231: LD_INT 36
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 101
16273: PUSH
16274: LD_INT 102
16276: PUSH
16277: LD_INT 103
16279: PUSH
16280: LD_INT 104
16282: PUSH
16283: LD_INT 105
16285: PUSH
16286: LD_INT 106
16288: PUSH
16289: LD_INT 107
16291: PUSH
16292: LD_INT 108
16294: PUSH
16295: LD_INT 109
16297: PUSH
16298: LD_INT 110
16300: PUSH
16301: LD_INT 111
16303: PUSH
16304: LD_INT 112
16306: PUSH
16307: LD_INT 113
16309: PUSH
16310: LD_INT 114
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: ST_TO_ADDR
16333: GO 17060
16335: LD_INT 16
16337: DOUBLE
16338: EQUAL
16339: IFTRUE 16343
16341: GO 16467
16343: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16344: LD_ADDR_VAR 0 1
16348: PUSH
16349: LD_INT 2
16351: PUSH
16352: LD_INT 4
16354: PUSH
16355: LD_INT 5
16357: PUSH
16358: LD_INT 7
16360: PUSH
16361: LD_INT 11
16363: PUSH
16364: LD_INT 12
16366: PUSH
16367: LD_INT 15
16369: PUSH
16370: LD_INT 16
16372: PUSH
16373: LD_INT 20
16375: PUSH
16376: LD_INT 21
16378: PUSH
16379: LD_INT 22
16381: PUSH
16382: LD_INT 23
16384: PUSH
16385: LD_INT 25
16387: PUSH
16388: LD_INT 26
16390: PUSH
16391: LD_INT 30
16393: PUSH
16394: LD_INT 31
16396: PUSH
16397: LD_INT 32
16399: PUSH
16400: LD_INT 33
16402: PUSH
16403: LD_INT 34
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 101
16429: PUSH
16430: LD_INT 102
16432: PUSH
16433: LD_INT 103
16435: PUSH
16436: LD_INT 106
16438: PUSH
16439: LD_INT 108
16441: PUSH
16442: LD_INT 112
16444: PUSH
16445: LD_INT 113
16447: PUSH
16448: LD_INT 114
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: ST_TO_ADDR
16465: GO 17060
16467: LD_INT 17
16469: DOUBLE
16470: EQUAL
16471: IFTRUE 16475
16473: GO 16687
16475: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16476: LD_ADDR_VAR 0 1
16480: PUSH
16481: LD_INT 1
16483: PUSH
16484: LD_INT 2
16486: PUSH
16487: LD_INT 3
16489: PUSH
16490: LD_INT 4
16492: PUSH
16493: LD_INT 5
16495: PUSH
16496: LD_INT 6
16498: PUSH
16499: LD_INT 7
16501: PUSH
16502: LD_INT 8
16504: PUSH
16505: LD_INT 9
16507: PUSH
16508: LD_INT 10
16510: PUSH
16511: LD_INT 11
16513: PUSH
16514: LD_INT 12
16516: PUSH
16517: LD_INT 13
16519: PUSH
16520: LD_INT 14
16522: PUSH
16523: LD_INT 15
16525: PUSH
16526: LD_INT 16
16528: PUSH
16529: LD_INT 17
16531: PUSH
16532: LD_INT 18
16534: PUSH
16535: LD_INT 19
16537: PUSH
16538: LD_INT 20
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 22
16546: PUSH
16547: LD_INT 23
16549: PUSH
16550: LD_INT 24
16552: PUSH
16553: LD_INT 25
16555: PUSH
16556: LD_INT 26
16558: PUSH
16559: LD_INT 27
16561: PUSH
16562: LD_INT 28
16564: PUSH
16565: LD_INT 29
16567: PUSH
16568: LD_INT 30
16570: PUSH
16571: LD_INT 31
16573: PUSH
16574: LD_INT 32
16576: PUSH
16577: LD_INT 33
16579: PUSH
16580: LD_INT 34
16582: PUSH
16583: LD_INT 36
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 101
16625: PUSH
16626: LD_INT 102
16628: PUSH
16629: LD_INT 103
16631: PUSH
16632: LD_INT 104
16634: PUSH
16635: LD_INT 105
16637: PUSH
16638: LD_INT 106
16640: PUSH
16641: LD_INT 107
16643: PUSH
16644: LD_INT 108
16646: PUSH
16647: LD_INT 109
16649: PUSH
16650: LD_INT 110
16652: PUSH
16653: LD_INT 111
16655: PUSH
16656: LD_INT 112
16658: PUSH
16659: LD_INT 113
16661: PUSH
16662: LD_INT 114
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: ST_TO_ADDR
16685: GO 17060
16687: LD_INT 18
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16831
16695: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: LD_INT 2
16703: PUSH
16704: LD_INT 4
16706: PUSH
16707: LD_INT 5
16709: PUSH
16710: LD_INT 7
16712: PUSH
16713: LD_INT 11
16715: PUSH
16716: LD_INT 12
16718: PUSH
16719: LD_INT 15
16721: PUSH
16722: LD_INT 16
16724: PUSH
16725: LD_INT 20
16727: PUSH
16728: LD_INT 21
16730: PUSH
16731: LD_INT 22
16733: PUSH
16734: LD_INT 23
16736: PUSH
16737: LD_INT 25
16739: PUSH
16740: LD_INT 26
16742: PUSH
16743: LD_INT 30
16745: PUSH
16746: LD_INT 31
16748: PUSH
16749: LD_INT 32
16751: PUSH
16752: LD_INT 33
16754: PUSH
16755: LD_INT 34
16757: PUSH
16758: LD_INT 35
16760: PUSH
16761: LD_INT 36
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 101
16789: PUSH
16790: LD_INT 102
16792: PUSH
16793: LD_INT 103
16795: PUSH
16796: LD_INT 106
16798: PUSH
16799: LD_INT 108
16801: PUSH
16802: LD_INT 112
16804: PUSH
16805: LD_INT 113
16807: PUSH
16808: LD_INT 114
16810: PUSH
16811: LD_INT 115
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: ST_TO_ADDR
16829: GO 17060
16831: LD_INT 19
16833: DOUBLE
16834: EQUAL
16835: IFTRUE 16839
16837: GO 17059
16839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_INT 1
16847: PUSH
16848: LD_INT 2
16850: PUSH
16851: LD_INT 3
16853: PUSH
16854: LD_INT 4
16856: PUSH
16857: LD_INT 5
16859: PUSH
16860: LD_INT 6
16862: PUSH
16863: LD_INT 7
16865: PUSH
16866: LD_INT 8
16868: PUSH
16869: LD_INT 9
16871: PUSH
16872: LD_INT 10
16874: PUSH
16875: LD_INT 11
16877: PUSH
16878: LD_INT 12
16880: PUSH
16881: LD_INT 13
16883: PUSH
16884: LD_INT 14
16886: PUSH
16887: LD_INT 15
16889: PUSH
16890: LD_INT 16
16892: PUSH
16893: LD_INT 17
16895: PUSH
16896: LD_INT 18
16898: PUSH
16899: LD_INT 19
16901: PUSH
16902: LD_INT 20
16904: PUSH
16905: LD_INT 21
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_INT 23
16913: PUSH
16914: LD_INT 24
16916: PUSH
16917: LD_INT 25
16919: PUSH
16920: LD_INT 26
16922: PUSH
16923: LD_INT 27
16925: PUSH
16926: LD_INT 28
16928: PUSH
16929: LD_INT 29
16931: PUSH
16932: LD_INT 30
16934: PUSH
16935: LD_INT 31
16937: PUSH
16938: LD_INT 32
16940: PUSH
16941: LD_INT 33
16943: PUSH
16944: LD_INT 34
16946: PUSH
16947: LD_INT 35
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: LD_INT 101
16993: PUSH
16994: LD_INT 102
16996: PUSH
16997: LD_INT 103
16999: PUSH
17000: LD_INT 104
17002: PUSH
17003: LD_INT 105
17005: PUSH
17006: LD_INT 106
17008: PUSH
17009: LD_INT 107
17011: PUSH
17012: LD_INT 108
17014: PUSH
17015: LD_INT 109
17017: PUSH
17018: LD_INT 110
17020: PUSH
17021: LD_INT 111
17023: PUSH
17024: LD_INT 112
17026: PUSH
17027: LD_INT 113
17029: PUSH
17030: LD_INT 114
17032: PUSH
17033: LD_INT 115
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: ST_TO_ADDR
17057: GO 17060
17059: POP
// end else
17060: GO 17279
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
17062: LD_ADDR_VAR 0 1
17066: PUSH
17067: LD_INT 1
17069: PUSH
17070: LD_INT 2
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: LD_INT 4
17078: PUSH
17079: LD_INT 5
17081: PUSH
17082: LD_INT 6
17084: PUSH
17085: LD_INT 7
17087: PUSH
17088: LD_INT 8
17090: PUSH
17091: LD_INT 9
17093: PUSH
17094: LD_INT 10
17096: PUSH
17097: LD_INT 11
17099: PUSH
17100: LD_INT 12
17102: PUSH
17103: LD_INT 13
17105: PUSH
17106: LD_INT 14
17108: PUSH
17109: LD_INT 15
17111: PUSH
17112: LD_INT 16
17114: PUSH
17115: LD_INT 17
17117: PUSH
17118: LD_INT 18
17120: PUSH
17121: LD_INT 19
17123: PUSH
17124: LD_INT 20
17126: PUSH
17127: LD_INT 21
17129: PUSH
17130: LD_INT 22
17132: PUSH
17133: LD_INT 23
17135: PUSH
17136: LD_INT 24
17138: PUSH
17139: LD_INT 25
17141: PUSH
17142: LD_INT 26
17144: PUSH
17145: LD_INT 27
17147: PUSH
17148: LD_INT 28
17150: PUSH
17151: LD_INT 29
17153: PUSH
17154: LD_INT 30
17156: PUSH
17157: LD_INT 31
17159: PUSH
17160: LD_INT 32
17162: PUSH
17163: LD_INT 33
17165: PUSH
17166: LD_INT 34
17168: PUSH
17169: LD_INT 35
17171: PUSH
17172: LD_INT 36
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 101
17215: PUSH
17216: LD_INT 102
17218: PUSH
17219: LD_INT 103
17221: PUSH
17222: LD_INT 104
17224: PUSH
17225: LD_INT 105
17227: PUSH
17228: LD_INT 106
17230: PUSH
17231: LD_INT 107
17233: PUSH
17234: LD_INT 108
17236: PUSH
17237: LD_INT 109
17239: PUSH
17240: LD_INT 110
17242: PUSH
17243: LD_INT 111
17245: PUSH
17246: LD_INT 112
17248: PUSH
17249: LD_INT 113
17251: PUSH
17252: LD_INT 114
17254: PUSH
17255: LD_INT 115
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: ST_TO_ADDR
// if result then
17279: LD_VAR 0 1
17283: IFFALSE 17572
// begin normal :=  ;
17285: LD_ADDR_VAR 0 3
17289: PUSH
17290: LD_STRING 
17292: ST_TO_ADDR
// hardcore :=  ;
17293: LD_ADDR_VAR 0 4
17297: PUSH
17298: LD_STRING 
17300: ST_TO_ADDR
// for i = 1 to normalCounter do
17301: LD_ADDR_VAR 0 5
17305: PUSH
17306: DOUBLE
17307: LD_INT 1
17309: DEC
17310: ST_TO_ADDR
17311: LD_EXP 52
17315: PUSH
17316: FOR_TO
17317: IFFALSE 17418
// begin tmp := 0 ;
17319: LD_ADDR_VAR 0 2
17323: PUSH
17324: LD_STRING 0
17326: ST_TO_ADDR
// if result [ 1 ] then
17327: LD_VAR 0 1
17331: PUSH
17332: LD_INT 1
17334: ARRAY
17335: IFFALSE 17400
// if result [ 1 ] [ 1 ] = i then
17337: LD_VAR 0 1
17341: PUSH
17342: LD_INT 1
17344: ARRAY
17345: PUSH
17346: LD_INT 1
17348: ARRAY
17349: PUSH
17350: LD_VAR 0 5
17354: EQUAL
17355: IFFALSE 17400
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_VAR 0 1
17366: PPUSH
17367: LD_INT 1
17369: PPUSH
17370: LD_VAR 0 1
17374: PUSH
17375: LD_INT 1
17377: ARRAY
17378: PPUSH
17379: LD_INT 1
17381: PPUSH
17382: CALL_OW 3
17386: PPUSH
17387: CALL_OW 1
17391: ST_TO_ADDR
// tmp := 1 ;
17392: LD_ADDR_VAR 0 2
17396: PUSH
17397: LD_STRING 1
17399: ST_TO_ADDR
// end ; normal := normal & tmp ;
17400: LD_ADDR_VAR 0 3
17404: PUSH
17405: LD_VAR 0 3
17409: PUSH
17410: LD_VAR 0 2
17414: STR
17415: ST_TO_ADDR
// end ;
17416: GO 17316
17418: POP
17419: POP
// for i = 1 to hardcoreCounter do
17420: LD_ADDR_VAR 0 5
17424: PUSH
17425: DOUBLE
17426: LD_INT 1
17428: DEC
17429: ST_TO_ADDR
17430: LD_EXP 53
17434: PUSH
17435: FOR_TO
17436: IFFALSE 17541
// begin tmp := 0 ;
17438: LD_ADDR_VAR 0 2
17442: PUSH
17443: LD_STRING 0
17445: ST_TO_ADDR
// if result [ 2 ] then
17446: LD_VAR 0 1
17450: PUSH
17451: LD_INT 2
17453: ARRAY
17454: IFFALSE 17523
// if result [ 2 ] [ 1 ] = 100 + i then
17456: LD_VAR 0 1
17460: PUSH
17461: LD_INT 2
17463: ARRAY
17464: PUSH
17465: LD_INT 1
17467: ARRAY
17468: PUSH
17469: LD_INT 100
17471: PUSH
17472: LD_VAR 0 5
17476: PLUS
17477: EQUAL
17478: IFFALSE 17523
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17480: LD_ADDR_VAR 0 1
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: LD_INT 2
17492: PPUSH
17493: LD_VAR 0 1
17497: PUSH
17498: LD_INT 2
17500: ARRAY
17501: PPUSH
17502: LD_INT 1
17504: PPUSH
17505: CALL_OW 3
17509: PPUSH
17510: CALL_OW 1
17514: ST_TO_ADDR
// tmp := 1 ;
17515: LD_ADDR_VAR 0 2
17519: PUSH
17520: LD_STRING 1
17522: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17523: LD_ADDR_VAR 0 4
17527: PUSH
17528: LD_VAR 0 4
17532: PUSH
17533: LD_VAR 0 2
17537: STR
17538: ST_TO_ADDR
// end ;
17539: GO 17435
17541: POP
17542: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17543: LD_STRING getStreamItemsFromMission("
17545: PUSH
17546: LD_VAR 0 3
17550: STR
17551: PUSH
17552: LD_STRING ","
17554: STR
17555: PUSH
17556: LD_VAR 0 4
17560: STR
17561: PUSH
17562: LD_STRING ")
17564: STR
17565: PPUSH
17566: CALL_OW 559
// end else
17570: GO 17579
// ToLua ( getStreamItemsFromMission("","") ) ;
17572: LD_STRING getStreamItemsFromMission("","")
17574: PPUSH
17575: CALL_OW 559
// end ;
17579: LD_VAR 0 1
17583: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17584: LD_EXP 51
17588: PUSH
17589: LD_EXP 56
17593: AND
17594: IFFALSE 17718
17596: GO 17598
17598: DISABLE
17599: LD_INT 0
17601: PPUSH
17602: PPUSH
// begin enable ;
17603: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_INT 22
17611: PUSH
17612: LD_OWVAR 2
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: LD_INT 34
17626: PUSH
17627: LD_INT 7
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 34
17636: PUSH
17637: LD_INT 45
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 34
17646: PUSH
17647: LD_INT 28
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 34
17656: PUSH
17657: LD_INT 47
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: ST_TO_ADDR
// if not tmp then
17680: LD_VAR 0 2
17684: NOT
17685: IFFALSE 17689
// exit ;
17687: GO 17718
// for i in tmp do
17689: LD_ADDR_VAR 0 1
17693: PUSH
17694: LD_VAR 0 2
17698: PUSH
17699: FOR_IN
17700: IFFALSE 17716
// begin SetLives ( i , 0 ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 0
17709: PPUSH
17710: CALL_OW 234
// end ;
17714: GO 17699
17716: POP
17717: POP
// end ;
17718: PPOPN 2
17720: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17721: LD_EXP 51
17725: PUSH
17726: LD_EXP 57
17730: AND
17731: IFFALSE 17815
17733: GO 17735
17735: DISABLE
17736: LD_INT 0
17738: PPUSH
17739: PPUSH
// begin enable ;
17740: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 32
17760: PUSH
17761: LD_INT 3
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 2
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17815
// for i in tmp do
17786: LD_ADDR_VAR 0 1
17790: PUSH
17791: LD_VAR 0 2
17795: PUSH
17796: FOR_IN
17797: IFFALSE 17813
// begin SetLives ( i , 0 ) ;
17799: LD_VAR 0 1
17803: PPUSH
17804: LD_INT 0
17806: PPUSH
17807: CALL_OW 234
// end ;
17811: GO 17796
17813: POP
17814: POP
// end ;
17815: PPOPN 2
17817: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17818: LD_EXP 51
17822: PUSH
17823: LD_EXP 54
17827: AND
17828: IFFALSE 17921
17830: GO 17832
17832: DISABLE
17833: LD_INT 0
17835: PPUSH
// begin enable ;
17836: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17837: LD_ADDR_VAR 0 1
17841: PUSH
17842: LD_INT 22
17844: PUSH
17845: LD_OWVAR 2
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: LD_INT 2
17856: PUSH
17857: LD_INT 25
17859: PUSH
17860: LD_INT 5
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 25
17869: PUSH
17870: LD_INT 9
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 25
17879: PUSH
17880: LD_INT 8
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PPUSH
17897: CALL_OW 69
17901: PUSH
17902: FOR_IN
17903: IFFALSE 17919
// begin SetClass ( i , 1 ) ;
17905: LD_VAR 0 1
17909: PPUSH
17910: LD_INT 1
17912: PPUSH
17913: CALL_OW 336
// end ;
17917: GO 17902
17919: POP
17920: POP
// end ;
17921: PPOPN 1
17923: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17924: LD_EXP 51
17928: PUSH
17929: LD_EXP 55
17933: AND
17934: PUSH
17935: LD_OWVAR 65
17939: PUSH
17940: LD_INT 7
17942: LESS
17943: AND
17944: IFFALSE 17958
17946: GO 17948
17948: DISABLE
// begin enable ;
17949: ENABLE
// game_speed := 7 ;
17950: LD_ADDR_OWVAR 65
17954: PUSH
17955: LD_INT 7
17957: ST_TO_ADDR
// end ;
17958: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17959: LD_EXP 51
17963: PUSH
17964: LD_EXP 58
17968: AND
17969: IFFALSE 18171
17971: GO 17973
17973: DISABLE
17974: LD_INT 0
17976: PPUSH
17977: PPUSH
17978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17979: LD_ADDR_VAR 0 3
17983: PUSH
17984: LD_INT 81
17986: PUSH
17987: LD_OWVAR 2
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: ST_TO_ADDR
// if not tmp then
18015: LD_VAR 0 3
18019: NOT
18020: IFFALSE 18024
// exit ;
18022: GO 18171
// if tmp > 5 then
18024: LD_VAR 0 3
18028: PUSH
18029: LD_INT 5
18031: GREATER
18032: IFFALSE 18044
// k := 5 else
18034: LD_ADDR_VAR 0 2
18038: PUSH
18039: LD_INT 5
18041: ST_TO_ADDR
18042: GO 18054
// k := tmp ;
18044: LD_ADDR_VAR 0 2
18048: PUSH
18049: LD_VAR 0 3
18053: ST_TO_ADDR
// for i := 1 to k do
18054: LD_ADDR_VAR 0 1
18058: PUSH
18059: DOUBLE
18060: LD_INT 1
18062: DEC
18063: ST_TO_ADDR
18064: LD_VAR 0 2
18068: PUSH
18069: FOR_TO
18070: IFFALSE 18169
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18072: LD_VAR 0 3
18076: PUSH
18077: LD_VAR 0 1
18081: ARRAY
18082: PPUSH
18083: LD_VAR 0 1
18087: PUSH
18088: LD_INT 4
18090: MOD
18091: PUSH
18092: LD_INT 1
18094: PLUS
18095: PPUSH
18096: CALL_OW 259
18100: PUSH
18101: LD_INT 10
18103: LESS
18104: IFFALSE 18167
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18106: LD_VAR 0 3
18110: PUSH
18111: LD_VAR 0 1
18115: ARRAY
18116: PPUSH
18117: LD_VAR 0 1
18121: PUSH
18122: LD_INT 4
18124: MOD
18125: PUSH
18126: LD_INT 1
18128: PLUS
18129: PPUSH
18130: LD_VAR 0 3
18134: PUSH
18135: LD_VAR 0 1
18139: ARRAY
18140: PPUSH
18141: LD_VAR 0 1
18145: PUSH
18146: LD_INT 4
18148: MOD
18149: PUSH
18150: LD_INT 1
18152: PLUS
18153: PPUSH
18154: CALL_OW 259
18158: PUSH
18159: LD_INT 1
18161: PLUS
18162: PPUSH
18163: CALL_OW 237
18167: GO 18069
18169: POP
18170: POP
// end ;
18171: PPOPN 3
18173: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18174: LD_EXP 51
18178: PUSH
18179: LD_EXP 59
18183: AND
18184: IFFALSE 18204
18186: GO 18188
18188: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18189: LD_INT 4
18191: PPUSH
18192: LD_OWVAR 2
18196: PPUSH
18197: LD_INT 0
18199: PPUSH
18200: CALL_OW 324
18204: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18205: LD_EXP 51
18209: PUSH
18210: LD_EXP 88
18214: AND
18215: IFFALSE 18235
18217: GO 18219
18219: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18220: LD_INT 19
18222: PPUSH
18223: LD_OWVAR 2
18227: PPUSH
18228: LD_INT 0
18230: PPUSH
18231: CALL_OW 324
18235: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18236: LD_EXP 51
18240: PUSH
18241: LD_EXP 60
18245: AND
18246: IFFALSE 18348
18248: GO 18250
18250: DISABLE
18251: LD_INT 0
18253: PPUSH
18254: PPUSH
// begin enable ;
18255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18256: LD_ADDR_VAR 0 2
18260: PUSH
18261: LD_INT 22
18263: PUSH
18264: LD_OWVAR 2
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 34
18278: PUSH
18279: LD_INT 11
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 34
18288: PUSH
18289: LD_INT 30
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: LIST
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PPUSH
18305: CALL_OW 69
18309: ST_TO_ADDR
// if not tmp then
18310: LD_VAR 0 2
18314: NOT
18315: IFFALSE 18319
// exit ;
18317: GO 18348
// for i in tmp do
18319: LD_ADDR_VAR 0 1
18323: PUSH
18324: LD_VAR 0 2
18328: PUSH
18329: FOR_IN
18330: IFFALSE 18346
// begin SetLives ( i , 0 ) ;
18332: LD_VAR 0 1
18336: PPUSH
18337: LD_INT 0
18339: PPUSH
18340: CALL_OW 234
// end ;
18344: GO 18329
18346: POP
18347: POP
// end ;
18348: PPOPN 2
18350: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18351: LD_EXP 51
18355: PUSH
18356: LD_EXP 61
18360: AND
18361: IFFALSE 18381
18363: GO 18365
18365: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18366: LD_INT 32
18368: PPUSH
18369: LD_OWVAR 2
18373: PPUSH
18374: LD_INT 0
18376: PPUSH
18377: CALL_OW 324
18381: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18382: LD_EXP 51
18386: PUSH
18387: LD_EXP 62
18391: AND
18392: IFFALSE 18573
18394: GO 18396
18396: DISABLE
18397: LD_INT 0
18399: PPUSH
18400: PPUSH
18401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18402: LD_ADDR_VAR 0 2
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_OWVAR 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 33
18421: PUSH
18422: LD_INT 3
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: ST_TO_ADDR
// if not tmp then
18438: LD_VAR 0 2
18442: NOT
18443: IFFALSE 18447
// exit ;
18445: GO 18573
// side := 0 ;
18447: LD_ADDR_VAR 0 3
18451: PUSH
18452: LD_INT 0
18454: ST_TO_ADDR
// for i := 1 to 8 do
18455: LD_ADDR_VAR 0 1
18459: PUSH
18460: DOUBLE
18461: LD_INT 1
18463: DEC
18464: ST_TO_ADDR
18465: LD_INT 8
18467: PUSH
18468: FOR_TO
18469: IFFALSE 18517
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18471: LD_OWVAR 2
18475: PUSH
18476: LD_VAR 0 1
18480: NONEQUAL
18481: PUSH
18482: LD_OWVAR 2
18486: PPUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 81
18496: PUSH
18497: LD_INT 2
18499: EQUAL
18500: AND
18501: IFFALSE 18515
// begin side := i ;
18503: LD_ADDR_VAR 0 3
18507: PUSH
18508: LD_VAR 0 1
18512: ST_TO_ADDR
// break ;
18513: GO 18517
// end ;
18515: GO 18468
18517: POP
18518: POP
// if not side then
18519: LD_VAR 0 3
18523: NOT
18524: IFFALSE 18528
// exit ;
18526: GO 18573
// for i := 1 to tmp do
18528: LD_ADDR_VAR 0 1
18532: PUSH
18533: DOUBLE
18534: LD_INT 1
18536: DEC
18537: ST_TO_ADDR
18538: LD_VAR 0 2
18542: PUSH
18543: FOR_TO
18544: IFFALSE 18571
// if Prob ( 60 ) then
18546: LD_INT 60
18548: PPUSH
18549: CALL_OW 13
18553: IFFALSE 18569
// SetSide ( i , side ) ;
18555: LD_VAR 0 1
18559: PPUSH
18560: LD_VAR 0 3
18564: PPUSH
18565: CALL_OW 235
18569: GO 18543
18571: POP
18572: POP
// end ;
18573: PPOPN 3
18575: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18576: LD_EXP 51
18580: PUSH
18581: LD_EXP 64
18585: AND
18586: IFFALSE 18705
18588: GO 18590
18590: DISABLE
18591: LD_INT 0
18593: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18594: LD_ADDR_VAR 0 1
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_OWVAR 2
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 21
18613: PUSH
18614: LD_INT 1
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 3
18623: PUSH
18624: LD_INT 23
18626: PUSH
18627: LD_INT 0
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: LIST
18642: PPUSH
18643: CALL_OW 69
18647: PUSH
18648: FOR_IN
18649: IFFALSE 18703
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18651: LD_VAR 0 1
18655: PPUSH
18656: CALL_OW 257
18660: PUSH
18661: LD_INT 1
18663: PUSH
18664: LD_INT 2
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: LD_INT 4
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: IN
18679: IFFALSE 18701
// SetClass ( un , rand ( 1 , 4 ) ) ;
18681: LD_VAR 0 1
18685: PPUSH
18686: LD_INT 1
18688: PPUSH
18689: LD_INT 4
18691: PPUSH
18692: CALL_OW 12
18696: PPUSH
18697: CALL_OW 336
18701: GO 18648
18703: POP
18704: POP
// end ;
18705: PPOPN 1
18707: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18708: LD_EXP 51
18712: PUSH
18713: LD_EXP 63
18717: AND
18718: IFFALSE 18797
18720: GO 18722
18722: DISABLE
18723: LD_INT 0
18725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18726: LD_ADDR_VAR 0 1
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_OWVAR 2
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 3
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PPUSH
18757: CALL_OW 69
18761: ST_TO_ADDR
// if not tmp then
18762: LD_VAR 0 1
18766: NOT
18767: IFFALSE 18771
// exit ;
18769: GO 18797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18771: LD_VAR 0 1
18775: PUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_VAR 0 1
18783: PPUSH
18784: CALL_OW 12
18788: ARRAY
18789: PPUSH
18790: LD_INT 100
18792: PPUSH
18793: CALL_OW 234
// end ;
18797: PPOPN 1
18799: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18800: LD_EXP 51
18804: PUSH
18805: LD_EXP 65
18809: AND
18810: IFFALSE 18908
18812: GO 18814
18814: DISABLE
18815: LD_INT 0
18817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18818: LD_ADDR_VAR 0 1
18822: PUSH
18823: LD_INT 22
18825: PUSH
18826: LD_OWVAR 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 21
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PPUSH
18849: CALL_OW 69
18853: ST_TO_ADDR
// if not tmp then
18854: LD_VAR 0 1
18858: NOT
18859: IFFALSE 18863
// exit ;
18861: GO 18908
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18863: LD_VAR 0 1
18867: PUSH
18868: LD_INT 1
18870: PPUSH
18871: LD_VAR 0 1
18875: PPUSH
18876: CALL_OW 12
18880: ARRAY
18881: PPUSH
18882: LD_INT 1
18884: PPUSH
18885: LD_INT 4
18887: PPUSH
18888: CALL_OW 12
18892: PPUSH
18893: LD_INT 3000
18895: PPUSH
18896: LD_INT 9000
18898: PPUSH
18899: CALL_OW 12
18903: PPUSH
18904: CALL_OW 492
// end ;
18908: PPOPN 1
18910: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18911: LD_EXP 51
18915: PUSH
18916: LD_EXP 66
18920: AND
18921: IFFALSE 18941
18923: GO 18925
18925: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18926: LD_INT 1
18928: PPUSH
18929: LD_OWVAR 2
18933: PPUSH
18934: LD_INT 0
18936: PPUSH
18937: CALL_OW 324
18941: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18942: LD_EXP 51
18946: PUSH
18947: LD_EXP 67
18951: AND
18952: IFFALSE 19035
18954: GO 18956
18956: DISABLE
18957: LD_INT 0
18959: PPUSH
18960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18961: LD_ADDR_VAR 0 2
18965: PUSH
18966: LD_INT 22
18968: PUSH
18969: LD_OWVAR 2
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 21
18980: PUSH
18981: LD_INT 3
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PPUSH
18992: CALL_OW 69
18996: ST_TO_ADDR
// if not tmp then
18997: LD_VAR 0 2
19001: NOT
19002: IFFALSE 19006
// exit ;
19004: GO 19035
// for i in tmp do
19006: LD_ADDR_VAR 0 1
19010: PUSH
19011: LD_VAR 0 2
19015: PUSH
19016: FOR_IN
19017: IFFALSE 19033
// SetBLevel ( i , 10 ) ;
19019: LD_VAR 0 1
19023: PPUSH
19024: LD_INT 10
19026: PPUSH
19027: CALL_OW 241
19031: GO 19016
19033: POP
19034: POP
// end ;
19035: PPOPN 2
19037: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19038: LD_EXP 51
19042: PUSH
19043: LD_EXP 68
19047: AND
19048: IFFALSE 19159
19050: GO 19052
19052: DISABLE
19053: LD_INT 0
19055: PPUSH
19056: PPUSH
19057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: LD_INT 22
19065: PUSH
19066: LD_OWVAR 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 25
19077: PUSH
19078: LD_INT 1
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PPUSH
19089: CALL_OW 69
19093: ST_TO_ADDR
// if not tmp then
19094: LD_VAR 0 3
19098: NOT
19099: IFFALSE 19103
// exit ;
19101: GO 19159
// un := tmp [ rand ( 1 , tmp ) ] ;
19103: LD_ADDR_VAR 0 2
19107: PUSH
19108: LD_VAR 0 3
19112: PUSH
19113: LD_INT 1
19115: PPUSH
19116: LD_VAR 0 3
19120: PPUSH
19121: CALL_OW 12
19125: ARRAY
19126: ST_TO_ADDR
// if Crawls ( un ) then
19127: LD_VAR 0 2
19131: PPUSH
19132: CALL_OW 318
19136: IFFALSE 19147
// ComWalk ( un ) ;
19138: LD_VAR 0 2
19142: PPUSH
19143: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19147: LD_VAR 0 2
19151: PPUSH
19152: LD_INT 5
19154: PPUSH
19155: CALL_OW 336
// end ;
19159: PPOPN 3
19161: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
19162: LD_EXP 51
19166: PUSH
19167: LD_EXP 69
19171: AND
19172: PUSH
19173: LD_OWVAR 67
19177: PUSH
19178: LD_INT 3
19180: LESS
19181: AND
19182: IFFALSE 19201
19184: GO 19186
19186: DISABLE
// Difficulty := Difficulty + 1 ;
19187: LD_ADDR_OWVAR 67
19191: PUSH
19192: LD_OWVAR 67
19196: PUSH
19197: LD_INT 1
19199: PLUS
19200: ST_TO_ADDR
19201: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19202: LD_EXP 51
19206: PUSH
19207: LD_EXP 70
19211: AND
19212: IFFALSE 19315
19214: GO 19216
19216: DISABLE
19217: LD_INT 0
19219: PPUSH
// begin for i := 1 to 5 do
19220: LD_ADDR_VAR 0 1
19224: PUSH
19225: DOUBLE
19226: LD_INT 1
19228: DEC
19229: ST_TO_ADDR
19230: LD_INT 5
19232: PUSH
19233: FOR_TO
19234: IFFALSE 19313
// begin uc_nation := nation_nature ;
19236: LD_ADDR_OWVAR 21
19240: PUSH
19241: LD_INT 0
19243: ST_TO_ADDR
// uc_side := 0 ;
19244: LD_ADDR_OWVAR 20
19248: PUSH
19249: LD_INT 0
19251: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19252: LD_ADDR_OWVAR 29
19256: PUSH
19257: LD_INT 12
19259: PUSH
19260: LD_INT 12
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: ST_TO_ADDR
// hc_agressivity := 20 ;
19267: LD_ADDR_OWVAR 35
19271: PUSH
19272: LD_INT 20
19274: ST_TO_ADDR
// hc_class := class_tiger ;
19275: LD_ADDR_OWVAR 28
19279: PUSH
19280: LD_INT 14
19282: ST_TO_ADDR
// hc_gallery :=  ;
19283: LD_ADDR_OWVAR 33
19287: PUSH
19288: LD_STRING 
19290: ST_TO_ADDR
// hc_name :=  ;
19291: LD_ADDR_OWVAR 26
19295: PUSH
19296: LD_STRING 
19298: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19299: CALL_OW 44
19303: PPUSH
19304: LD_INT 0
19306: PPUSH
19307: CALL_OW 51
// end ;
19311: GO 19233
19313: POP
19314: POP
// end ;
19315: PPOPN 1
19317: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19318: LD_EXP 51
19322: PUSH
19323: LD_EXP 71
19327: AND
19328: IFFALSE 19337
19330: GO 19332
19332: DISABLE
// StreamSibBomb ;
19333: CALL 19338 0 0
19337: END
// export function StreamSibBomb ; var i , x , y ; begin
19338: LD_INT 0
19340: PPUSH
19341: PPUSH
19342: PPUSH
19343: PPUSH
// result := false ;
19344: LD_ADDR_VAR 0 1
19348: PUSH
19349: LD_INT 0
19351: ST_TO_ADDR
// for i := 1 to 16 do
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: DOUBLE
19358: LD_INT 1
19360: DEC
19361: ST_TO_ADDR
19362: LD_INT 16
19364: PUSH
19365: FOR_TO
19366: IFFALSE 19565
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19368: LD_ADDR_VAR 0 3
19372: PUSH
19373: LD_INT 10
19375: PUSH
19376: LD_INT 20
19378: PUSH
19379: LD_INT 30
19381: PUSH
19382: LD_INT 40
19384: PUSH
19385: LD_INT 50
19387: PUSH
19388: LD_INT 60
19390: PUSH
19391: LD_INT 70
19393: PUSH
19394: LD_INT 80
19396: PUSH
19397: LD_INT 90
19399: PUSH
19400: LD_INT 100
19402: PUSH
19403: LD_INT 110
19405: PUSH
19406: LD_INT 120
19408: PUSH
19409: LD_INT 130
19411: PUSH
19412: LD_INT 140
19414: PUSH
19415: LD_INT 150
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PPUSH
19438: LD_INT 15
19440: PPUSH
19441: CALL_OW 12
19445: ARRAY
19446: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19447: LD_ADDR_VAR 0 4
19451: PUSH
19452: LD_INT 10
19454: PUSH
19455: LD_INT 20
19457: PUSH
19458: LD_INT 30
19460: PUSH
19461: LD_INT 40
19463: PUSH
19464: LD_INT 50
19466: PUSH
19467: LD_INT 60
19469: PUSH
19470: LD_INT 70
19472: PUSH
19473: LD_INT 80
19475: PUSH
19476: LD_INT 90
19478: PUSH
19479: LD_INT 100
19481: PUSH
19482: LD_INT 110
19484: PUSH
19485: LD_INT 120
19487: PUSH
19488: LD_INT 130
19490: PUSH
19491: LD_INT 140
19493: PUSH
19494: LD_INT 150
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 1
19516: PPUSH
19517: LD_INT 15
19519: PPUSH
19520: CALL_OW 12
19524: ARRAY
19525: ST_TO_ADDR
// if ValidHex ( x , y ) then
19526: LD_VAR 0 3
19530: PPUSH
19531: LD_VAR 0 4
19535: PPUSH
19536: CALL_OW 488
19540: IFFALSE 19563
// begin result := [ x , y ] ;
19542: LD_ADDR_VAR 0 1
19546: PUSH
19547: LD_VAR 0 3
19551: PUSH
19552: LD_VAR 0 4
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: ST_TO_ADDR
// break ;
19561: GO 19565
// end ; end ;
19563: GO 19365
19565: POP
19566: POP
// if result then
19567: LD_VAR 0 1
19571: IFFALSE 19631
// begin ToLua ( playSibBomb() ) ;
19573: LD_STRING playSibBomb()
19575: PPUSH
19576: CALL_OW 559
// wait ( 0 0$14 ) ;
19580: LD_INT 490
19582: PPUSH
19583: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19587: LD_VAR 0 1
19591: PUSH
19592: LD_INT 1
19594: ARRAY
19595: PPUSH
19596: LD_VAR 0 1
19600: PUSH
19601: LD_INT 2
19603: ARRAY
19604: PPUSH
19605: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19609: LD_VAR 0 1
19613: PUSH
19614: LD_INT 1
19616: ARRAY
19617: PPUSH
19618: LD_VAR 0 1
19622: PUSH
19623: LD_INT 2
19625: ARRAY
19626: PPUSH
19627: CALL_OW 429
// end ; end ;
19631: LD_VAR 0 1
19635: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19636: LD_EXP 51
19640: PUSH
19641: LD_EXP 73
19645: AND
19646: IFFALSE 19658
19648: GO 19650
19650: DISABLE
// YouLost (  ) ;
19651: LD_STRING 
19653: PPUSH
19654: CALL_OW 104
19658: END
// every 0 0$1 trigger StreamModeActive and sFog do
19659: LD_EXP 51
19663: PUSH
19664: LD_EXP 72
19668: AND
19669: IFFALSE 19683
19671: GO 19673
19673: DISABLE
// FogOff ( your_side ) ;
19674: LD_OWVAR 2
19678: PPUSH
19679: CALL_OW 344
19683: END
// every 0 0$1 trigger StreamModeActive and sSun do
19684: LD_EXP 51
19688: PUSH
19689: LD_EXP 74
19693: AND
19694: IFFALSE 19722
19696: GO 19698
19698: DISABLE
// begin solar_recharge_percent := 0 ;
19699: LD_ADDR_OWVAR 79
19703: PUSH
19704: LD_INT 0
19706: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19707: LD_INT 10500
19709: PPUSH
19710: CALL_OW 67
// solar_recharge_percent := 100 ;
19714: LD_ADDR_OWVAR 79
19718: PUSH
19719: LD_INT 100
19721: ST_TO_ADDR
// end ;
19722: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19723: LD_EXP 51
19727: PUSH
19728: LD_EXP 75
19732: AND
19733: IFFALSE 19972
19735: GO 19737
19737: DISABLE
19738: LD_INT 0
19740: PPUSH
19741: PPUSH
19742: PPUSH
// begin tmp := [ ] ;
19743: LD_ADDR_VAR 0 3
19747: PUSH
19748: EMPTY
19749: ST_TO_ADDR
// for i := 1 to 6 do
19750: LD_ADDR_VAR 0 1
19754: PUSH
19755: DOUBLE
19756: LD_INT 1
19758: DEC
19759: ST_TO_ADDR
19760: LD_INT 6
19762: PUSH
19763: FOR_TO
19764: IFFALSE 19869
// begin uc_nation := nation_nature ;
19766: LD_ADDR_OWVAR 21
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// uc_side := 0 ;
19774: LD_ADDR_OWVAR 20
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19782: LD_ADDR_OWVAR 29
19786: PUSH
19787: LD_INT 12
19789: PUSH
19790: LD_INT 12
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: ST_TO_ADDR
// hc_agressivity := 20 ;
19797: LD_ADDR_OWVAR 35
19801: PUSH
19802: LD_INT 20
19804: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19805: LD_ADDR_OWVAR 28
19809: PUSH
19810: LD_INT 17
19812: ST_TO_ADDR
// hc_gallery :=  ;
19813: LD_ADDR_OWVAR 33
19817: PUSH
19818: LD_STRING 
19820: ST_TO_ADDR
// hc_name :=  ;
19821: LD_ADDR_OWVAR 26
19825: PUSH
19826: LD_STRING 
19828: ST_TO_ADDR
// un := CreateHuman ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: CALL_OW 44
19838: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19839: LD_VAR 0 2
19843: PPUSH
19844: LD_INT 1
19846: PPUSH
19847: CALL_OW 51
// tmp := tmp ^ un ;
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_VAR 0 3
19860: PUSH
19861: LD_VAR 0 2
19865: ADD
19866: ST_TO_ADDR
// end ;
19867: GO 19763
19869: POP
19870: POP
// repeat wait ( 0 0$1 ) ;
19871: LD_INT 35
19873: PPUSH
19874: CALL_OW 67
// for un in tmp do
19878: LD_ADDR_VAR 0 2
19882: PUSH
19883: LD_VAR 0 3
19887: PUSH
19888: FOR_IN
19889: IFFALSE 19963
// begin if IsDead ( un ) then
19891: LD_VAR 0 2
19895: PPUSH
19896: CALL_OW 301
19900: IFFALSE 19920
// begin tmp := tmp diff un ;
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_VAR 0 2
19916: DIFF
19917: ST_TO_ADDR
// continue ;
19918: GO 19888
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19920: LD_VAR 0 2
19924: PPUSH
19925: LD_INT 3
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_INT 0
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PPUSH
19942: CALL_OW 69
19946: PPUSH
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 74
19956: PPUSH
19957: CALL_OW 115
// end ;
19961: GO 19888
19963: POP
19964: POP
// until not tmp ;
19965: LD_VAR 0 3
19969: NOT
19970: IFFALSE 19871
// end ;
19972: PPOPN 3
19974: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19975: LD_EXP 51
19979: PUSH
19980: LD_EXP 76
19984: AND
19985: IFFALSE 20039
19987: GO 19989
19989: DISABLE
// begin ToLua ( displayTroll(); ) ;
19990: LD_STRING displayTroll();
19992: PPUSH
19993: CALL_OW 559
// wait ( 3 3$00 ) ;
19997: LD_INT 6300
19999: PPUSH
20000: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20004: LD_STRING hideTroll();
20006: PPUSH
20007: CALL_OW 559
// wait ( 1 1$00 ) ;
20011: LD_INT 2100
20013: PPUSH
20014: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20018: LD_STRING displayTroll();
20020: PPUSH
20021: CALL_OW 559
// wait ( 1 1$00 ) ;
20025: LD_INT 2100
20027: PPUSH
20028: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20032: LD_STRING hideTroll();
20034: PPUSH
20035: CALL_OW 559
// end ;
20039: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20040: LD_EXP 51
20044: PUSH
20045: LD_EXP 77
20049: AND
20050: IFFALSE 20113
20052: GO 20054
20054: DISABLE
20055: LD_INT 0
20057: PPUSH
// begin p := 0 ;
20058: LD_ADDR_VAR 0 1
20062: PUSH
20063: LD_INT 0
20065: ST_TO_ADDR
// repeat game_speed := 1 ;
20066: LD_ADDR_OWVAR 65
20070: PUSH
20071: LD_INT 1
20073: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20074: LD_INT 35
20076: PPUSH
20077: CALL_OW 67
// p := p + 1 ;
20081: LD_ADDR_VAR 0 1
20085: PUSH
20086: LD_VAR 0 1
20090: PUSH
20091: LD_INT 1
20093: PLUS
20094: ST_TO_ADDR
// until p >= 60 ;
20095: LD_VAR 0 1
20099: PUSH
20100: LD_INT 60
20102: GREATEREQUAL
20103: IFFALSE 20066
// game_speed := 4 ;
20105: LD_ADDR_OWVAR 65
20109: PUSH
20110: LD_INT 4
20112: ST_TO_ADDR
// end ;
20113: PPOPN 1
20115: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20116: LD_EXP 51
20120: PUSH
20121: LD_EXP 78
20125: AND
20126: IFFALSE 20272
20128: GO 20130
20130: DISABLE
20131: LD_INT 0
20133: PPUSH
20134: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20135: LD_ADDR_VAR 0 1
20139: PUSH
20140: LD_INT 22
20142: PUSH
20143: LD_OWVAR 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 30
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: ST_TO_ADDR
// if not depot then
20189: LD_VAR 0 1
20193: NOT
20194: IFFALSE 20198
// exit ;
20196: GO 20272
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20198: LD_ADDR_VAR 0 2
20202: PUSH
20203: LD_VAR 0 1
20207: PUSH
20208: LD_INT 1
20210: PPUSH
20211: LD_VAR 0 1
20215: PPUSH
20216: CALL_OW 12
20220: ARRAY
20221: PPUSH
20222: CALL_OW 274
20226: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20227: LD_VAR 0 2
20231: PPUSH
20232: LD_INT 1
20234: PPUSH
20235: LD_INT 0
20237: PPUSH
20238: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20242: LD_VAR 0 2
20246: PPUSH
20247: LD_INT 2
20249: PPUSH
20250: LD_INT 0
20252: PPUSH
20253: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20257: LD_VAR 0 2
20261: PPUSH
20262: LD_INT 3
20264: PPUSH
20265: LD_INT 0
20267: PPUSH
20268: CALL_OW 277
// end ;
20272: PPOPN 2
20274: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20275: LD_EXP 51
20279: PUSH
20280: LD_EXP 79
20284: AND
20285: IFFALSE 20382
20287: GO 20289
20289: DISABLE
20290: LD_INT 0
20292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20293: LD_ADDR_VAR 0 1
20297: PUSH
20298: LD_INT 22
20300: PUSH
20301: LD_OWVAR 2
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: LD_INT 21
20312: PUSH
20313: LD_INT 1
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 3
20322: PUSH
20323: LD_INT 23
20325: PUSH
20326: LD_INT 0
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: LIST
20341: PPUSH
20342: CALL_OW 69
20346: ST_TO_ADDR
// if not tmp then
20347: LD_VAR 0 1
20351: NOT
20352: IFFALSE 20356
// exit ;
20354: GO 20382
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20356: LD_VAR 0 1
20360: PUSH
20361: LD_INT 1
20363: PPUSH
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 12
20373: ARRAY
20374: PPUSH
20375: LD_INT 200
20377: PPUSH
20378: CALL_OW 234
// end ;
20382: PPOPN 1
20384: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20385: LD_EXP 51
20389: PUSH
20390: LD_EXP 80
20394: AND
20395: IFFALSE 20474
20397: GO 20399
20399: DISABLE
20400: LD_INT 0
20402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_OWVAR 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 21
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PUSH
20430: EMPTY
20431: LIST
20432: LIST
20433: PPUSH
20434: CALL_OW 69
20438: ST_TO_ADDR
// if not tmp then
20439: LD_VAR 0 1
20443: NOT
20444: IFFALSE 20448
// exit ;
20446: GO 20474
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20448: LD_VAR 0 1
20452: PUSH
20453: LD_INT 1
20455: PPUSH
20456: LD_VAR 0 1
20460: PPUSH
20461: CALL_OW 12
20465: ARRAY
20466: PPUSH
20467: LD_INT 60
20469: PPUSH
20470: CALL_OW 234
// end ;
20474: PPOPN 1
20476: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20477: LD_EXP 51
20481: PUSH
20482: LD_EXP 81
20486: AND
20487: IFFALSE 20586
20489: GO 20491
20491: DISABLE
20492: LD_INT 0
20494: PPUSH
20495: PPUSH
// begin enable ;
20496: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20497: LD_ADDR_VAR 0 1
20501: PUSH
20502: LD_INT 22
20504: PUSH
20505: LD_OWVAR 2
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 61
20516: PUSH
20517: EMPTY
20518: LIST
20519: PUSH
20520: LD_INT 33
20522: PUSH
20523: LD_INT 2
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: LIST
20534: PPUSH
20535: CALL_OW 69
20539: ST_TO_ADDR
// if not tmp then
20540: LD_VAR 0 1
20544: NOT
20545: IFFALSE 20549
// exit ;
20547: GO 20586
// for i in tmp do
20549: LD_ADDR_VAR 0 2
20553: PUSH
20554: LD_VAR 0 1
20558: PUSH
20559: FOR_IN
20560: IFFALSE 20584
// if IsControledBy ( i ) then
20562: LD_VAR 0 2
20566: PPUSH
20567: CALL_OW 312
20571: IFFALSE 20582
// ComUnlink ( i ) ;
20573: LD_VAR 0 2
20577: PPUSH
20578: CALL_OW 136
20582: GO 20559
20584: POP
20585: POP
// end ;
20586: PPOPN 2
20588: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20589: LD_EXP 51
20593: PUSH
20594: LD_EXP 82
20598: AND
20599: IFFALSE 20739
20601: GO 20603
20603: DISABLE
20604: LD_INT 0
20606: PPUSH
20607: PPUSH
// begin ToLua ( displayPowell(); ) ;
20608: LD_STRING displayPowell();
20610: PPUSH
20611: CALL_OW 559
// uc_side := 0 ;
20615: LD_ADDR_OWVAR 20
20619: PUSH
20620: LD_INT 0
20622: ST_TO_ADDR
// uc_nation := 2 ;
20623: LD_ADDR_OWVAR 21
20627: PUSH
20628: LD_INT 2
20630: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20631: LD_ADDR_OWVAR 37
20635: PUSH
20636: LD_INT 14
20638: ST_TO_ADDR
// vc_engine := engine_siberite ;
20639: LD_ADDR_OWVAR 39
20643: PUSH
20644: LD_INT 3
20646: ST_TO_ADDR
// vc_control := control_apeman ;
20647: LD_ADDR_OWVAR 38
20651: PUSH
20652: LD_INT 5
20654: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20655: LD_ADDR_OWVAR 40
20659: PUSH
20660: LD_INT 29
20662: ST_TO_ADDR
// un := CreateVehicle ;
20663: LD_ADDR_VAR 0 2
20667: PUSH
20668: CALL_OW 45
20672: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20673: LD_VAR 0 2
20677: PPUSH
20678: LD_INT 1
20680: PPUSH
20681: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20685: LD_INT 35
20687: PPUSH
20688: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20692: LD_VAR 0 2
20696: PPUSH
20697: LD_INT 22
20699: PUSH
20700: LD_OWVAR 2
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PPUSH
20709: CALL_OW 69
20713: PPUSH
20714: LD_VAR 0 2
20718: PPUSH
20719: CALL_OW 74
20723: PPUSH
20724: CALL_OW 115
// until IsDead ( un ) ;
20728: LD_VAR 0 2
20732: PPUSH
20733: CALL_OW 301
20737: IFFALSE 20685
// end ;
20739: PPOPN 2
20741: END
// every 0 0$1 trigger StreamModeActive and sStu do
20742: LD_EXP 51
20746: PUSH
20747: LD_EXP 90
20751: AND
20752: IFFALSE 20768
20754: GO 20756
20756: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20757: LD_STRING displayStucuk();
20759: PPUSH
20760: CALL_OW 559
// ResetFog ;
20764: CALL_OW 335
// end ;
20768: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20769: LD_EXP 51
20773: PUSH
20774: LD_EXP 83
20778: AND
20779: IFFALSE 20920
20781: GO 20783
20783: DISABLE
20784: LD_INT 0
20786: PPUSH
20787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20788: LD_ADDR_VAR 0 2
20792: PUSH
20793: LD_INT 22
20795: PUSH
20796: LD_OWVAR 2
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PPUSH
20819: CALL_OW 69
20823: ST_TO_ADDR
// if not tmp then
20824: LD_VAR 0 2
20828: NOT
20829: IFFALSE 20833
// exit ;
20831: GO 20920
// un := tmp [ rand ( 1 , tmp ) ] ;
20833: LD_ADDR_VAR 0 1
20837: PUSH
20838: LD_VAR 0 2
20842: PUSH
20843: LD_INT 1
20845: PPUSH
20846: LD_VAR 0 2
20850: PPUSH
20851: CALL_OW 12
20855: ARRAY
20856: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_INT 0
20864: PPUSH
20865: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20869: LD_VAR 0 1
20873: PPUSH
20874: LD_OWVAR 3
20878: PUSH
20879: LD_VAR 0 1
20883: DIFF
20884: PPUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: CALL_OW 74
20894: PPUSH
20895: CALL_OW 115
// wait ( 0 0$20 ) ;
20899: LD_INT 700
20901: PPUSH
20902: CALL_OW 67
// SetSide ( un , your_side ) ;
20906: LD_VAR 0 1
20910: PPUSH
20911: LD_OWVAR 2
20915: PPUSH
20916: CALL_OW 235
// end ;
20920: PPOPN 2
20922: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20923: LD_EXP 51
20927: PUSH
20928: LD_EXP 84
20932: AND
20933: IFFALSE 21039
20935: GO 20937
20937: DISABLE
20938: LD_INT 0
20940: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20941: LD_ADDR_VAR 0 1
20945: PUSH
20946: LD_INT 22
20948: PUSH
20949: LD_OWVAR 2
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 30
20963: PUSH
20964: LD_INT 0
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 30
20973: PUSH
20974: LD_INT 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PPUSH
20990: CALL_OW 69
20994: ST_TO_ADDR
// if not depot then
20995: LD_VAR 0 1
20999: NOT
21000: IFFALSE 21004
// exit ;
21002: GO 21039
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21004: LD_VAR 0 1
21008: PUSH
21009: LD_INT 1
21011: ARRAY
21012: PPUSH
21013: CALL_OW 250
21017: PPUSH
21018: LD_VAR 0 1
21022: PUSH
21023: LD_INT 1
21025: ARRAY
21026: PPUSH
21027: CALL_OW 251
21031: PPUSH
21032: LD_INT 70
21034: PPUSH
21035: CALL_OW 495
// end ;
21039: PPOPN 1
21041: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21042: LD_EXP 51
21046: PUSH
21047: LD_EXP 85
21051: AND
21052: IFFALSE 21263
21054: GO 21056
21056: DISABLE
21057: LD_INT 0
21059: PPUSH
21060: PPUSH
21061: PPUSH
21062: PPUSH
21063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21064: LD_ADDR_VAR 0 5
21068: PUSH
21069: LD_INT 22
21071: PUSH
21072: LD_OWVAR 2
21076: PUSH
21077: EMPTY
21078: LIST
21079: LIST
21080: PUSH
21081: LD_INT 21
21083: PUSH
21084: LD_INT 1
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PPUSH
21095: CALL_OW 69
21099: ST_TO_ADDR
// if not tmp then
21100: LD_VAR 0 5
21104: NOT
21105: IFFALSE 21109
// exit ;
21107: GO 21263
// for i in tmp do
21109: LD_ADDR_VAR 0 1
21113: PUSH
21114: LD_VAR 0 5
21118: PUSH
21119: FOR_IN
21120: IFFALSE 21261
// begin d := rand ( 0 , 5 ) ;
21122: LD_ADDR_VAR 0 4
21126: PUSH
21127: LD_INT 0
21129: PPUSH
21130: LD_INT 5
21132: PPUSH
21133: CALL_OW 12
21137: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21138: LD_ADDR_VAR 0 2
21142: PUSH
21143: LD_VAR 0 1
21147: PPUSH
21148: CALL_OW 250
21152: PPUSH
21153: LD_VAR 0 4
21157: PPUSH
21158: LD_INT 3
21160: PPUSH
21161: LD_INT 12
21163: PPUSH
21164: CALL_OW 12
21168: PPUSH
21169: CALL_OW 272
21173: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21174: LD_ADDR_VAR 0 3
21178: PUSH
21179: LD_VAR 0 1
21183: PPUSH
21184: CALL_OW 251
21188: PPUSH
21189: LD_VAR 0 4
21193: PPUSH
21194: LD_INT 3
21196: PPUSH
21197: LD_INT 12
21199: PPUSH
21200: CALL_OW 12
21204: PPUSH
21205: CALL_OW 273
21209: ST_TO_ADDR
// if ValidHex ( x , y ) then
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: CALL_OW 488
21224: IFFALSE 21259
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21226: LD_VAR 0 1
21230: PPUSH
21231: LD_VAR 0 2
21235: PPUSH
21236: LD_VAR 0 3
21240: PPUSH
21241: LD_INT 3
21243: PPUSH
21244: LD_INT 6
21246: PPUSH
21247: CALL_OW 12
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: CALL_OW 483
// end ;
21259: GO 21119
21261: POP
21262: POP
// end ;
21263: PPOPN 5
21265: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21266: LD_EXP 51
21270: PUSH
21271: LD_EXP 86
21275: AND
21276: IFFALSE 21370
21278: GO 21280
21280: DISABLE
21281: LD_INT 0
21283: PPUSH
21284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21285: LD_ADDR_VAR 0 2
21289: PUSH
21290: LD_INT 22
21292: PUSH
21293: LD_OWVAR 2
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PUSH
21302: LD_INT 32
21304: PUSH
21305: LD_INT 1
21307: PUSH
21308: EMPTY
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 21
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: PPUSH
21327: CALL_OW 69
21331: ST_TO_ADDR
// if not tmp then
21332: LD_VAR 0 2
21336: NOT
21337: IFFALSE 21341
// exit ;
21339: GO 21370
// for i in tmp do
21341: LD_ADDR_VAR 0 1
21345: PUSH
21346: LD_VAR 0 2
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21368
// SetFuel ( i , 0 ) ;
21354: LD_VAR 0 1
21358: PPUSH
21359: LD_INT 0
21361: PPUSH
21362: CALL_OW 240
21366: GO 21351
21368: POP
21369: POP
// end ;
21370: PPOPN 2
21372: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21373: LD_EXP 51
21377: PUSH
21378: LD_EXP 87
21382: AND
21383: IFFALSE 21449
21385: GO 21387
21387: DISABLE
21388: LD_INT 0
21390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21391: LD_ADDR_VAR 0 1
21395: PUSH
21396: LD_INT 22
21398: PUSH
21399: LD_OWVAR 2
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 30
21410: PUSH
21411: LD_INT 29
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PPUSH
21422: CALL_OW 69
21426: ST_TO_ADDR
// if not tmp then
21427: LD_VAR 0 1
21431: NOT
21432: IFFALSE 21436
// exit ;
21434: GO 21449
// DestroyUnit ( tmp [ 1 ] ) ;
21436: LD_VAR 0 1
21440: PUSH
21441: LD_INT 1
21443: ARRAY
21444: PPUSH
21445: CALL_OW 65
// end ;
21449: PPOPN 1
21451: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21452: LD_EXP 51
21456: PUSH
21457: LD_EXP 89
21461: AND
21462: IFFALSE 21591
21464: GO 21466
21466: DISABLE
21467: LD_INT 0
21469: PPUSH
// begin uc_side := 0 ;
21470: LD_ADDR_OWVAR 20
21474: PUSH
21475: LD_INT 0
21477: ST_TO_ADDR
// uc_nation := nation_arabian ;
21478: LD_ADDR_OWVAR 21
21482: PUSH
21483: LD_INT 2
21485: ST_TO_ADDR
// hc_gallery :=  ;
21486: LD_ADDR_OWVAR 33
21490: PUSH
21491: LD_STRING 
21493: ST_TO_ADDR
// hc_name :=  ;
21494: LD_ADDR_OWVAR 26
21498: PUSH
21499: LD_STRING 
21501: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21502: LD_INT 1
21504: PPUSH
21505: LD_INT 11
21507: PPUSH
21508: LD_INT 10
21510: PPUSH
21511: CALL_OW 380
// un := CreateHuman ;
21515: LD_ADDR_VAR 0 1
21519: PUSH
21520: CALL_OW 44
21524: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21525: LD_VAR 0 1
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21537: LD_INT 35
21539: PPUSH
21540: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21544: LD_VAR 0 1
21548: PPUSH
21549: LD_INT 22
21551: PUSH
21552: LD_OWVAR 2
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PPUSH
21561: CALL_OW 69
21565: PPUSH
21566: LD_VAR 0 1
21570: PPUSH
21571: CALL_OW 74
21575: PPUSH
21576: CALL_OW 115
// until IsDead ( un ) ;
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL_OW 301
21589: IFFALSE 21537
// end ;
21591: PPOPN 1
21593: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21594: LD_EXP 51
21598: PUSH
21599: LD_EXP 91
21603: AND
21604: IFFALSE 21616
21606: GO 21608
21608: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21609: LD_STRING earthquake(getX(game), 0, 32)
21611: PPUSH
21612: CALL_OW 559
21616: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21617: LD_EXP 51
21621: PUSH
21622: LD_EXP 92
21626: AND
21627: IFFALSE 21718
21629: GO 21631
21631: DISABLE
21632: LD_INT 0
21634: PPUSH
// begin enable ;
21635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21636: LD_ADDR_VAR 0 1
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_OWVAR 2
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 21
21655: PUSH
21656: LD_INT 2
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 33
21665: PUSH
21666: LD_INT 3
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: PPUSH
21678: CALL_OW 69
21682: ST_TO_ADDR
// if not tmp then
21683: LD_VAR 0 1
21687: NOT
21688: IFFALSE 21692
// exit ;
21690: GO 21718
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21692: LD_VAR 0 1
21696: PUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_VAR 0 1
21704: PPUSH
21705: CALL_OW 12
21709: ARRAY
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: CALL_OW 234
// end ;
21718: PPOPN 1
21720: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21721: LD_EXP 51
21725: PUSH
21726: LD_EXP 93
21730: AND
21731: IFFALSE 21872
21733: GO 21735
21735: DISABLE
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
21740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21741: LD_ADDR_VAR 0 3
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_OWVAR 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 25
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: ST_TO_ADDR
// if not tmp then
21777: LD_VAR 0 3
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21872
// un := tmp [ rand ( 1 , tmp ) ] ;
21786: LD_ADDR_VAR 0 2
21790: PUSH
21791: LD_VAR 0 3
21795: PUSH
21796: LD_INT 1
21798: PPUSH
21799: LD_VAR 0 3
21803: PPUSH
21804: CALL_OW 12
21808: ARRAY
21809: ST_TO_ADDR
// if Crawls ( un ) then
21810: LD_VAR 0 2
21814: PPUSH
21815: CALL_OW 318
21819: IFFALSE 21830
// ComWalk ( un ) ;
21821: LD_VAR 0 2
21825: PPUSH
21826: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21830: LD_VAR 0 2
21834: PPUSH
21835: LD_INT 9
21837: PPUSH
21838: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21842: LD_INT 28
21844: PPUSH
21845: LD_OWVAR 2
21849: PPUSH
21850: LD_INT 2
21852: PPUSH
21853: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21857: LD_INT 29
21859: PPUSH
21860: LD_OWVAR 2
21864: PPUSH
21865: LD_INT 2
21867: PPUSH
21868: CALL_OW 322
// end ;
21872: PPOPN 3
21874: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21875: LD_EXP 51
21879: PUSH
21880: LD_EXP 94
21884: AND
21885: IFFALSE 21996
21887: GO 21889
21889: DISABLE
21890: LD_INT 0
21892: PPUSH
21893: PPUSH
21894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21895: LD_ADDR_VAR 0 3
21899: PUSH
21900: LD_INT 22
21902: PUSH
21903: LD_OWVAR 2
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 25
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: PPUSH
21926: CALL_OW 69
21930: ST_TO_ADDR
// if not tmp then
21931: LD_VAR 0 3
21935: NOT
21936: IFFALSE 21940
// exit ;
21938: GO 21996
// un := tmp [ rand ( 1 , tmp ) ] ;
21940: LD_ADDR_VAR 0 2
21944: PUSH
21945: LD_VAR 0 3
21949: PUSH
21950: LD_INT 1
21952: PPUSH
21953: LD_VAR 0 3
21957: PPUSH
21958: CALL_OW 12
21962: ARRAY
21963: ST_TO_ADDR
// if Crawls ( un ) then
21964: LD_VAR 0 2
21968: PPUSH
21969: CALL_OW 318
21973: IFFALSE 21984
// ComWalk ( un ) ;
21975: LD_VAR 0 2
21979: PPUSH
21980: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21984: LD_VAR 0 2
21988: PPUSH
21989: LD_INT 8
21991: PPUSH
21992: CALL_OW 336
// end ;
21996: PPOPN 3
21998: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21999: LD_EXP 51
22003: PUSH
22004: LD_EXP 95
22008: AND
22009: IFFALSE 22153
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
22017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22018: LD_ADDR_VAR 0 2
22022: PUSH
22023: LD_INT 22
22025: PUSH
22026: LD_OWVAR 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 21
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 34
22050: PUSH
22051: LD_INT 12
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: LD_INT 34
22060: PUSH
22061: LD_INT 51
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 34
22070: PUSH
22071: LD_INT 32
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: PPUSH
22089: CALL_OW 69
22093: ST_TO_ADDR
// if not tmp then
22094: LD_VAR 0 2
22098: NOT
22099: IFFALSE 22103
// exit ;
22101: GO 22153
// for i in tmp do
22103: LD_ADDR_VAR 0 1
22107: PUSH
22108: LD_VAR 0 2
22112: PUSH
22113: FOR_IN
22114: IFFALSE 22151
// if GetCargo ( i , mat_artifact ) = 0 then
22116: LD_VAR 0 1
22120: PPUSH
22121: LD_INT 4
22123: PPUSH
22124: CALL_OW 289
22128: PUSH
22129: LD_INT 0
22131: EQUAL
22132: IFFALSE 22149
// SetCargo ( i , mat_siberit , 100 ) ;
22134: LD_VAR 0 1
22138: PPUSH
22139: LD_INT 3
22141: PPUSH
22142: LD_INT 100
22144: PPUSH
22145: CALL_OW 290
22149: GO 22113
22151: POP
22152: POP
// end ;
22153: PPOPN 2
22155: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22156: LD_EXP 51
22160: PUSH
22161: LD_EXP 96
22165: AND
22166: IFFALSE 22349
22168: GO 22170
22170: DISABLE
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22175: LD_ADDR_VAR 0 2
22179: PUSH
22180: LD_INT 22
22182: PUSH
22183: LD_OWVAR 2
22187: PUSH
22188: EMPTY
22189: LIST
22190: LIST
22191: PPUSH
22192: CALL_OW 69
22196: ST_TO_ADDR
// if not tmp then
22197: LD_VAR 0 2
22201: NOT
22202: IFFALSE 22206
// exit ;
22204: GO 22349
// for i := 1 to 2 do
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: DOUBLE
22212: LD_INT 1
22214: DEC
22215: ST_TO_ADDR
22216: LD_INT 2
22218: PUSH
22219: FOR_TO
22220: IFFALSE 22347
// begin uc_side := your_side ;
22222: LD_ADDR_OWVAR 20
22226: PUSH
22227: LD_OWVAR 2
22231: ST_TO_ADDR
// uc_nation := nation_american ;
22232: LD_ADDR_OWVAR 21
22236: PUSH
22237: LD_INT 1
22239: ST_TO_ADDR
// vc_chassis := us_morphling ;
22240: LD_ADDR_OWVAR 37
22244: PUSH
22245: LD_INT 5
22247: ST_TO_ADDR
// vc_engine := engine_siberite ;
22248: LD_ADDR_OWVAR 39
22252: PUSH
22253: LD_INT 3
22255: ST_TO_ADDR
// vc_control := control_computer ;
22256: LD_ADDR_OWVAR 38
22260: PUSH
22261: LD_INT 3
22263: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22264: LD_ADDR_OWVAR 40
22268: PUSH
22269: LD_INT 10
22271: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22272: LD_VAR 0 2
22276: PUSH
22277: LD_INT 1
22279: ARRAY
22280: PPUSH
22281: CALL_OW 310
22285: NOT
22286: IFFALSE 22333
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22288: CALL_OW 45
22292: PPUSH
22293: LD_VAR 0 2
22297: PUSH
22298: LD_INT 1
22300: ARRAY
22301: PPUSH
22302: CALL_OW 250
22306: PPUSH
22307: LD_VAR 0 2
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: CALL_OW 251
22320: PPUSH
22321: LD_INT 12
22323: PPUSH
22324: LD_INT 1
22326: PPUSH
22327: CALL_OW 50
22331: GO 22345
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22333: CALL_OW 45
22337: PPUSH
22338: LD_INT 1
22340: PPUSH
22341: CALL_OW 51
// end ;
22345: GO 22219
22347: POP
22348: POP
// end ;
22349: PPOPN 2
22351: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22352: LD_EXP 51
22356: PUSH
22357: LD_EXP 97
22361: AND
22362: IFFALSE 22584
22364: GO 22366
22366: DISABLE
22367: LD_INT 0
22369: PPUSH
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22375: LD_ADDR_VAR 0 6
22379: PUSH
22380: LD_INT 22
22382: PUSH
22383: LD_OWVAR 2
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 21
22394: PUSH
22395: LD_INT 1
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 23
22407: PUSH
22408: LD_INT 0
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: LIST
22423: PPUSH
22424: CALL_OW 69
22428: ST_TO_ADDR
// if not tmp then
22429: LD_VAR 0 6
22433: NOT
22434: IFFALSE 22438
// exit ;
22436: GO 22584
// s1 := rand ( 1 , 4 ) ;
22438: LD_ADDR_VAR 0 2
22442: PUSH
22443: LD_INT 1
22445: PPUSH
22446: LD_INT 4
22448: PPUSH
22449: CALL_OW 12
22453: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22454: LD_ADDR_VAR 0 4
22458: PUSH
22459: LD_VAR 0 6
22463: PUSH
22464: LD_INT 1
22466: ARRAY
22467: PPUSH
22468: LD_VAR 0 2
22472: PPUSH
22473: CALL_OW 259
22477: ST_TO_ADDR
// if s1 = 1 then
22478: LD_VAR 0 2
22482: PUSH
22483: LD_INT 1
22485: EQUAL
22486: IFFALSE 22506
// s2 := rand ( 2 , 4 ) else
22488: LD_ADDR_VAR 0 3
22492: PUSH
22493: LD_INT 2
22495: PPUSH
22496: LD_INT 4
22498: PPUSH
22499: CALL_OW 12
22503: ST_TO_ADDR
22504: GO 22514
// s2 := 1 ;
22506: LD_ADDR_VAR 0 3
22510: PUSH
22511: LD_INT 1
22513: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22514: LD_ADDR_VAR 0 5
22518: PUSH
22519: LD_VAR 0 6
22523: PUSH
22524: LD_INT 1
22526: ARRAY
22527: PPUSH
22528: LD_VAR 0 3
22532: PPUSH
22533: CALL_OW 259
22537: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22538: LD_VAR 0 6
22542: PUSH
22543: LD_INT 1
22545: ARRAY
22546: PPUSH
22547: LD_VAR 0 2
22551: PPUSH
22552: LD_VAR 0 5
22556: PPUSH
22557: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22561: LD_VAR 0 6
22565: PUSH
22566: LD_INT 1
22568: ARRAY
22569: PPUSH
22570: LD_VAR 0 3
22574: PPUSH
22575: LD_VAR 0 4
22579: PPUSH
22580: CALL_OW 237
// end ;
22584: PPOPN 6
22586: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22587: LD_EXP 51
22591: PUSH
22592: LD_EXP 98
22596: AND
22597: IFFALSE 22676
22599: GO 22601
22601: DISABLE
22602: LD_INT 0
22604: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22605: LD_ADDR_VAR 0 1
22609: PUSH
22610: LD_INT 22
22612: PUSH
22613: LD_OWVAR 2
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 30
22624: PUSH
22625: LD_INT 3
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PPUSH
22636: CALL_OW 69
22640: ST_TO_ADDR
// if not tmp then
22641: LD_VAR 0 1
22645: NOT
22646: IFFALSE 22650
// exit ;
22648: GO 22676
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22650: LD_VAR 0 1
22654: PUSH
22655: LD_INT 1
22657: PPUSH
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL_OW 12
22667: ARRAY
22668: PPUSH
22669: LD_INT 1
22671: PPUSH
22672: CALL_OW 234
// end ;
22676: PPOPN 1
22678: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22679: LD_EXP 51
22683: PUSH
22684: LD_EXP 99
22688: AND
22689: IFFALSE 22801
22691: GO 22693
22693: DISABLE
22694: LD_INT 0
22696: PPUSH
22697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22698: LD_ADDR_VAR 0 2
22702: PUSH
22703: LD_INT 22
22705: PUSH
22706: LD_OWVAR 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 2
22717: PUSH
22718: LD_INT 30
22720: PUSH
22721: LD_INT 27
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: PUSH
22728: LD_INT 30
22730: PUSH
22731: LD_INT 26
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: LD_INT 30
22740: PUSH
22741: LD_INT 28
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PPUSH
22758: CALL_OW 69
22762: ST_TO_ADDR
// if not tmp then
22763: LD_VAR 0 2
22767: NOT
22768: IFFALSE 22772
// exit ;
22770: GO 22801
// for i in tmp do
22772: LD_ADDR_VAR 0 1
22776: PUSH
22777: LD_VAR 0 2
22781: PUSH
22782: FOR_IN
22783: IFFALSE 22799
// SetLives ( i , 1 ) ;
22785: LD_VAR 0 1
22789: PPUSH
22790: LD_INT 1
22792: PPUSH
22793: CALL_OW 234
22797: GO 22782
22799: POP
22800: POP
// end ;
22801: PPOPN 2
22803: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22804: LD_EXP 51
22808: PUSH
22809: LD_EXP 100
22813: AND
22814: IFFALSE 23088
22816: GO 22818
22818: DISABLE
22819: LD_INT 0
22821: PPUSH
22822: PPUSH
22823: PPUSH
// begin i := rand ( 1 , 7 ) ;
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_INT 1
22831: PPUSH
22832: LD_INT 7
22834: PPUSH
22835: CALL_OW 12
22839: ST_TO_ADDR
// case i of 1 :
22840: LD_VAR 0 1
22844: PUSH
22845: LD_INT 1
22847: DOUBLE
22848: EQUAL
22849: IFTRUE 22853
22851: GO 22863
22853: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22854: LD_STRING earthquake(getX(game), 0, 32)
22856: PPUSH
22857: CALL_OW 559
22861: GO 23088
22863: LD_INT 2
22865: DOUBLE
22866: EQUAL
22867: IFTRUE 22871
22869: GO 22885
22871: POP
// begin ToLua ( displayStucuk(); ) ;
22872: LD_STRING displayStucuk();
22874: PPUSH
22875: CALL_OW 559
// ResetFog ;
22879: CALL_OW 335
// end ; 3 :
22883: GO 23088
22885: LD_INT 3
22887: DOUBLE
22888: EQUAL
22889: IFTRUE 22893
22891: GO 22997
22893: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22894: LD_ADDR_VAR 0 2
22898: PUSH
22899: LD_INT 22
22901: PUSH
22902: LD_OWVAR 2
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 25
22913: PUSH
22914: LD_INT 1
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PPUSH
22925: CALL_OW 69
22929: ST_TO_ADDR
// if not tmp then
22930: LD_VAR 0 2
22934: NOT
22935: IFFALSE 22939
// exit ;
22937: GO 23088
// un := tmp [ rand ( 1 , tmp ) ] ;
22939: LD_ADDR_VAR 0 3
22943: PUSH
22944: LD_VAR 0 2
22948: PUSH
22949: LD_INT 1
22951: PPUSH
22952: LD_VAR 0 2
22956: PPUSH
22957: CALL_OW 12
22961: ARRAY
22962: ST_TO_ADDR
// if Crawls ( un ) then
22963: LD_VAR 0 3
22967: PPUSH
22968: CALL_OW 318
22972: IFFALSE 22983
// ComWalk ( un ) ;
22974: LD_VAR 0 3
22978: PPUSH
22979: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22983: LD_VAR 0 3
22987: PPUSH
22988: LD_INT 8
22990: PPUSH
22991: CALL_OW 336
// end ; 4 :
22995: GO 23088
22997: LD_INT 4
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23066
23005: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23006: LD_ADDR_VAR 0 2
23010: PUSH
23011: LD_INT 22
23013: PUSH
23014: LD_OWVAR 2
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: LD_INT 30
23025: PUSH
23026: LD_INT 29
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PPUSH
23037: CALL_OW 69
23041: ST_TO_ADDR
// if not tmp then
23042: LD_VAR 0 2
23046: NOT
23047: IFFALSE 23051
// exit ;
23049: GO 23088
// DestroyUnit ( tmp [ 1 ] ) ;
23051: LD_VAR 0 2
23055: PUSH
23056: LD_INT 1
23058: ARRAY
23059: PPUSH
23060: CALL_OW 65
// end ; 5 .. 7 :
23064: GO 23088
23066: LD_INT 5
23068: DOUBLE
23069: GREATEREQUAL
23070: IFFALSE 23078
23072: LD_INT 7
23074: DOUBLE
23075: LESSEQUAL
23076: IFTRUE 23080
23078: GO 23087
23080: POP
// StreamSibBomb ; end ;
23081: CALL 19338 0 0
23085: GO 23088
23087: POP
// end ;
23088: PPOPN 3
23090: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23091: LD_EXP 51
23095: PUSH
23096: LD_EXP 101
23100: AND
23101: IFFALSE 23257
23103: GO 23105
23105: DISABLE
23106: LD_INT 0
23108: PPUSH
23109: PPUSH
23110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23111: LD_ADDR_VAR 0 2
23115: PUSH
23116: LD_INT 81
23118: PUSH
23119: LD_OWVAR 2
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 21
23133: PUSH
23134: LD_INT 1
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 21
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: LIST
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PPUSH
23160: CALL_OW 69
23164: ST_TO_ADDR
// if not tmp then
23165: LD_VAR 0 2
23169: NOT
23170: IFFALSE 23174
// exit ;
23172: GO 23257
// p := 0 ;
23174: LD_ADDR_VAR 0 3
23178: PUSH
23179: LD_INT 0
23181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23182: LD_INT 35
23184: PPUSH
23185: CALL_OW 67
// p := p + 1 ;
23189: LD_ADDR_VAR 0 3
23193: PUSH
23194: LD_VAR 0 3
23198: PUSH
23199: LD_INT 1
23201: PLUS
23202: ST_TO_ADDR
// for i in tmp do
23203: LD_ADDR_VAR 0 1
23207: PUSH
23208: LD_VAR 0 2
23212: PUSH
23213: FOR_IN
23214: IFFALSE 23245
// if GetLives ( i ) < 1000 then
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 256
23225: PUSH
23226: LD_INT 1000
23228: LESS
23229: IFFALSE 23243
// SetLives ( i , 1000 ) ;
23231: LD_VAR 0 1
23235: PPUSH
23236: LD_INT 1000
23238: PPUSH
23239: CALL_OW 234
23243: GO 23213
23245: POP
23246: POP
// until p > 20 ;
23247: LD_VAR 0 3
23251: PUSH
23252: LD_INT 20
23254: GREATER
23255: IFFALSE 23182
// end ;
23257: PPOPN 3
23259: END
// every 0 0$1 trigger StreamModeActive and sTime do
23260: LD_EXP 51
23264: PUSH
23265: LD_EXP 102
23269: AND
23270: IFFALSE 23305
23272: GO 23274
23274: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23275: LD_INT 28
23277: PPUSH
23278: LD_OWVAR 2
23282: PPUSH
23283: LD_INT 2
23285: PPUSH
23286: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23290: LD_INT 30
23292: PPUSH
23293: LD_OWVAR 2
23297: PPUSH
23298: LD_INT 2
23300: PPUSH
23301: CALL_OW 322
// end ;
23305: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23306: LD_EXP 51
23310: PUSH
23311: LD_EXP 103
23315: AND
23316: IFFALSE 23437
23318: GO 23320
23320: DISABLE
23321: LD_INT 0
23323: PPUSH
23324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23325: LD_ADDR_VAR 0 2
23329: PUSH
23330: LD_INT 22
23332: PUSH
23333: LD_OWVAR 2
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: LD_INT 21
23344: PUSH
23345: LD_INT 1
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: PUSH
23352: LD_INT 3
23354: PUSH
23355: LD_INT 23
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: EMPTY
23366: LIST
23367: LIST
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: PPUSH
23374: CALL_OW 69
23378: ST_TO_ADDR
// if not tmp then
23379: LD_VAR 0 2
23383: NOT
23384: IFFALSE 23388
// exit ;
23386: GO 23437
// for i in tmp do
23388: LD_ADDR_VAR 0 1
23392: PUSH
23393: LD_VAR 0 2
23397: PUSH
23398: FOR_IN
23399: IFFALSE 23435
// begin if Crawls ( i ) then
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL_OW 318
23410: IFFALSE 23421
// ComWalk ( i ) ;
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 138
// SetClass ( i , 2 ) ;
23421: LD_VAR 0 1
23425: PPUSH
23426: LD_INT 2
23428: PPUSH
23429: CALL_OW 336
// end ;
23433: GO 23398
23435: POP
23436: POP
// end ;
23437: PPOPN 2
23439: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23440: LD_EXP 51
23444: PUSH
23445: LD_EXP 104
23449: AND
23450: IFFALSE 23731
23452: GO 23454
23454: DISABLE
23455: LD_INT 0
23457: PPUSH
23458: PPUSH
23459: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23460: LD_OWVAR 2
23464: PPUSH
23465: LD_INT 9
23467: PPUSH
23468: LD_INT 1
23470: PPUSH
23471: LD_INT 1
23473: PPUSH
23474: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23478: LD_INT 9
23480: PPUSH
23481: LD_OWVAR 2
23485: PPUSH
23486: CALL_OW 343
// uc_side := 9 ;
23490: LD_ADDR_OWVAR 20
23494: PUSH
23495: LD_INT 9
23497: ST_TO_ADDR
// uc_nation := 2 ;
23498: LD_ADDR_OWVAR 21
23502: PUSH
23503: LD_INT 2
23505: ST_TO_ADDR
// hc_name := Dark Warrior ;
23506: LD_ADDR_OWVAR 26
23510: PUSH
23511: LD_STRING Dark Warrior
23513: ST_TO_ADDR
// hc_gallery :=  ;
23514: LD_ADDR_OWVAR 33
23518: PUSH
23519: LD_STRING 
23521: ST_TO_ADDR
// hc_noskilllimit := true ;
23522: LD_ADDR_OWVAR 76
23526: PUSH
23527: LD_INT 1
23529: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23530: LD_ADDR_OWVAR 31
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 30
23540: PUSH
23541: LD_INT 30
23543: PUSH
23544: LD_INT 30
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: ST_TO_ADDR
// un := CreateHuman ;
23553: LD_ADDR_VAR 0 3
23557: PUSH
23558: CALL_OW 44
23562: ST_TO_ADDR
// hc_noskilllimit := false ;
23563: LD_ADDR_OWVAR 76
23567: PUSH
23568: LD_INT 0
23570: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23571: LD_VAR 0 3
23575: PPUSH
23576: LD_INT 1
23578: PPUSH
23579: CALL_OW 51
// p := 0 ;
23583: LD_ADDR_VAR 0 2
23587: PUSH
23588: LD_INT 0
23590: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23591: LD_INT 35
23593: PPUSH
23594: CALL_OW 67
// p := p + 1 ;
23598: LD_ADDR_VAR 0 2
23602: PUSH
23603: LD_VAR 0 2
23607: PUSH
23608: LD_INT 1
23610: PLUS
23611: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23612: LD_VAR 0 3
23616: PPUSH
23617: CALL_OW 256
23621: PUSH
23622: LD_INT 1000
23624: LESS
23625: IFFALSE 23639
// SetLives ( un , 1000 ) ;
23627: LD_VAR 0 3
23631: PPUSH
23632: LD_INT 1000
23634: PPUSH
23635: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23639: LD_VAR 0 3
23643: PPUSH
23644: LD_INT 81
23646: PUSH
23647: LD_OWVAR 2
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: LD_INT 91
23658: PUSH
23659: LD_VAR 0 3
23663: PUSH
23664: LD_INT 30
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PPUSH
23676: CALL_OW 69
23680: PPUSH
23681: LD_VAR 0 3
23685: PPUSH
23686: CALL_OW 74
23690: PPUSH
23691: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23695: LD_VAR 0 2
23699: PUSH
23700: LD_INT 60
23702: GREATER
23703: PUSH
23704: LD_VAR 0 3
23708: PPUSH
23709: CALL_OW 301
23713: OR
23714: IFFALSE 23591
// if un then
23716: LD_VAR 0 3
23720: IFFALSE 23731
// RemoveUnit ( un ) ;
23722: LD_VAR 0 3
23726: PPUSH
23727: CALL_OW 64
// end ;
23731: PPOPN 3
23733: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23734: LD_INT 0
23736: PPUSH
// case cmd of 301 :
23737: LD_VAR 0 1
23741: PUSH
23742: LD_INT 301
23744: DOUBLE
23745: EQUAL
23746: IFTRUE 23750
23748: GO 23782
23750: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23751: LD_VAR 0 6
23755: PPUSH
23756: LD_VAR 0 7
23760: PPUSH
23761: LD_VAR 0 8
23765: PPUSH
23766: LD_VAR 0 4
23770: PPUSH
23771: LD_VAR 0 5
23775: PPUSH
23776: CALL 24983 0 5
23780: GO 23903
23782: LD_INT 302
23784: DOUBLE
23785: EQUAL
23786: IFTRUE 23790
23788: GO 23827
23790: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23791: LD_VAR 0 6
23795: PPUSH
23796: LD_VAR 0 7
23800: PPUSH
23801: LD_VAR 0 8
23805: PPUSH
23806: LD_VAR 0 9
23810: PPUSH
23811: LD_VAR 0 4
23815: PPUSH
23816: LD_VAR 0 5
23820: PPUSH
23821: CALL 25074 0 6
23825: GO 23903
23827: LD_INT 303
23829: DOUBLE
23830: EQUAL
23831: IFTRUE 23835
23833: GO 23872
23835: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23836: LD_VAR 0 6
23840: PPUSH
23841: LD_VAR 0 7
23845: PPUSH
23846: LD_VAR 0 8
23850: PPUSH
23851: LD_VAR 0 9
23855: PPUSH
23856: LD_VAR 0 4
23860: PPUSH
23861: LD_VAR 0 5
23865: PPUSH
23866: CALL 23908 0 6
23870: GO 23903
23872: LD_INT 304
23874: DOUBLE
23875: EQUAL
23876: IFTRUE 23880
23878: GO 23902
23880: POP
// hHackTeleport ( unit , x , y ) ; end ;
23881: LD_VAR 0 2
23885: PPUSH
23886: LD_VAR 0 4
23890: PPUSH
23891: LD_VAR 0 5
23895: PPUSH
23896: CALL 25667 0 3
23900: GO 23903
23902: POP
// end ;
23903: LD_VAR 0 12
23907: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23908: LD_INT 0
23910: PPUSH
23911: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23912: LD_VAR 0 1
23916: PUSH
23917: LD_INT 1
23919: LESS
23920: PUSH
23921: LD_VAR 0 1
23925: PUSH
23926: LD_INT 3
23928: GREATER
23929: OR
23930: PUSH
23931: LD_VAR 0 5
23935: PPUSH
23936: LD_VAR 0 6
23940: PPUSH
23941: CALL_OW 428
23945: OR
23946: IFFALSE 23950
// exit ;
23948: GO 24670
// uc_side := your_side ;
23950: LD_ADDR_OWVAR 20
23954: PUSH
23955: LD_OWVAR 2
23959: ST_TO_ADDR
// uc_nation := nation ;
23960: LD_ADDR_OWVAR 21
23964: PUSH
23965: LD_VAR 0 1
23969: ST_TO_ADDR
// bc_level = 1 ;
23970: LD_ADDR_OWVAR 43
23974: PUSH
23975: LD_INT 1
23977: ST_TO_ADDR
// case btype of 1 :
23978: LD_VAR 0 2
23982: PUSH
23983: LD_INT 1
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23991
23989: GO 24002
23991: POP
// bc_type := b_depot ; 2 :
23992: LD_ADDR_OWVAR 42
23996: PUSH
23997: LD_INT 0
23999: ST_TO_ADDR
24000: GO 24614
24002: LD_INT 2
24004: DOUBLE
24005: EQUAL
24006: IFTRUE 24010
24008: GO 24021
24010: POP
// bc_type := b_warehouse ; 3 :
24011: LD_ADDR_OWVAR 42
24015: PUSH
24016: LD_INT 1
24018: ST_TO_ADDR
24019: GO 24614
24021: LD_INT 3
24023: DOUBLE
24024: EQUAL
24025: IFTRUE 24029
24027: GO 24040
24029: POP
// bc_type := b_lab ; 4 .. 9 :
24030: LD_ADDR_OWVAR 42
24034: PUSH
24035: LD_INT 6
24037: ST_TO_ADDR
24038: GO 24614
24040: LD_INT 4
24042: DOUBLE
24043: GREATEREQUAL
24044: IFFALSE 24052
24046: LD_INT 9
24048: DOUBLE
24049: LESSEQUAL
24050: IFTRUE 24054
24052: GO 24106
24054: POP
// begin bc_type := b_lab_half ;
24055: LD_ADDR_OWVAR 42
24059: PUSH
24060: LD_INT 7
24062: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24063: LD_ADDR_OWVAR 44
24067: PUSH
24068: LD_INT 10
24070: PUSH
24071: LD_INT 11
24073: PUSH
24074: LD_INT 12
24076: PUSH
24077: LD_INT 15
24079: PUSH
24080: LD_INT 14
24082: PUSH
24083: LD_INT 13
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: PUSH
24094: LD_VAR 0 2
24098: PUSH
24099: LD_INT 3
24101: MINUS
24102: ARRAY
24103: ST_TO_ADDR
// end ; 10 .. 13 :
24104: GO 24614
24106: LD_INT 10
24108: DOUBLE
24109: GREATEREQUAL
24110: IFFALSE 24118
24112: LD_INT 13
24114: DOUBLE
24115: LESSEQUAL
24116: IFTRUE 24120
24118: GO 24197
24120: POP
// begin bc_type := b_lab_full ;
24121: LD_ADDR_OWVAR 42
24125: PUSH
24126: LD_INT 8
24128: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24129: LD_ADDR_OWVAR 44
24133: PUSH
24134: LD_INT 10
24136: PUSH
24137: LD_INT 12
24139: PUSH
24140: LD_INT 14
24142: PUSH
24143: LD_INT 13
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: LD_VAR 0 2
24156: PUSH
24157: LD_INT 9
24159: MINUS
24160: ARRAY
24161: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24162: LD_ADDR_OWVAR 45
24166: PUSH
24167: LD_INT 11
24169: PUSH
24170: LD_INT 15
24172: PUSH
24173: LD_INT 12
24175: PUSH
24176: LD_INT 15
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: PUSH
24185: LD_VAR 0 2
24189: PUSH
24190: LD_INT 9
24192: MINUS
24193: ARRAY
24194: ST_TO_ADDR
// end ; 14 :
24195: GO 24614
24197: LD_INT 14
24199: DOUBLE
24200: EQUAL
24201: IFTRUE 24205
24203: GO 24216
24205: POP
// bc_type := b_workshop ; 15 :
24206: LD_ADDR_OWVAR 42
24210: PUSH
24211: LD_INT 2
24213: ST_TO_ADDR
24214: GO 24614
24216: LD_INT 15
24218: DOUBLE
24219: EQUAL
24220: IFTRUE 24224
24222: GO 24235
24224: POP
// bc_type := b_factory ; 16 :
24225: LD_ADDR_OWVAR 42
24229: PUSH
24230: LD_INT 3
24232: ST_TO_ADDR
24233: GO 24614
24235: LD_INT 16
24237: DOUBLE
24238: EQUAL
24239: IFTRUE 24243
24241: GO 24254
24243: POP
// bc_type := b_ext_gun ; 17 :
24244: LD_ADDR_OWVAR 42
24248: PUSH
24249: LD_INT 17
24251: ST_TO_ADDR
24252: GO 24614
24254: LD_INT 17
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24290
24262: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24263: LD_ADDR_OWVAR 42
24267: PUSH
24268: LD_INT 19
24270: PUSH
24271: LD_INT 23
24273: PUSH
24274: LD_INT 19
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: LIST
24281: PUSH
24282: LD_VAR 0 1
24286: ARRAY
24287: ST_TO_ADDR
24288: GO 24614
24290: LD_INT 18
24292: DOUBLE
24293: EQUAL
24294: IFTRUE 24298
24296: GO 24309
24298: POP
// bc_type := b_ext_radar ; 19 :
24299: LD_ADDR_OWVAR 42
24303: PUSH
24304: LD_INT 20
24306: ST_TO_ADDR
24307: GO 24614
24309: LD_INT 19
24311: DOUBLE
24312: EQUAL
24313: IFTRUE 24317
24315: GO 24328
24317: POP
// bc_type := b_ext_radio ; 20 :
24318: LD_ADDR_OWVAR 42
24322: PUSH
24323: LD_INT 22
24325: ST_TO_ADDR
24326: GO 24614
24328: LD_INT 20
24330: DOUBLE
24331: EQUAL
24332: IFTRUE 24336
24334: GO 24347
24336: POP
// bc_type := b_ext_siberium ; 21 :
24337: LD_ADDR_OWVAR 42
24341: PUSH
24342: LD_INT 21
24344: ST_TO_ADDR
24345: GO 24614
24347: LD_INT 21
24349: DOUBLE
24350: EQUAL
24351: IFTRUE 24355
24353: GO 24366
24355: POP
// bc_type := b_ext_computer ; 22 :
24356: LD_ADDR_OWVAR 42
24360: PUSH
24361: LD_INT 24
24363: ST_TO_ADDR
24364: GO 24614
24366: LD_INT 22
24368: DOUBLE
24369: EQUAL
24370: IFTRUE 24374
24372: GO 24385
24374: POP
// bc_type := b_ext_track ; 23 :
24375: LD_ADDR_OWVAR 42
24379: PUSH
24380: LD_INT 16
24382: ST_TO_ADDR
24383: GO 24614
24385: LD_INT 23
24387: DOUBLE
24388: EQUAL
24389: IFTRUE 24393
24391: GO 24404
24393: POP
// bc_type := b_ext_laser ; 24 :
24394: LD_ADDR_OWVAR 42
24398: PUSH
24399: LD_INT 25
24401: ST_TO_ADDR
24402: GO 24614
24404: LD_INT 24
24406: DOUBLE
24407: EQUAL
24408: IFTRUE 24412
24410: GO 24423
24412: POP
// bc_type := b_control_tower ; 25 :
24413: LD_ADDR_OWVAR 42
24417: PUSH
24418: LD_INT 36
24420: ST_TO_ADDR
24421: GO 24614
24423: LD_INT 25
24425: DOUBLE
24426: EQUAL
24427: IFTRUE 24431
24429: GO 24442
24431: POP
// bc_type := b_breastwork ; 26 :
24432: LD_ADDR_OWVAR 42
24436: PUSH
24437: LD_INT 31
24439: ST_TO_ADDR
24440: GO 24614
24442: LD_INT 26
24444: DOUBLE
24445: EQUAL
24446: IFTRUE 24450
24448: GO 24461
24450: POP
// bc_type := b_bunker ; 27 :
24451: LD_ADDR_OWVAR 42
24455: PUSH
24456: LD_INT 32
24458: ST_TO_ADDR
24459: GO 24614
24461: LD_INT 27
24463: DOUBLE
24464: EQUAL
24465: IFTRUE 24469
24467: GO 24480
24469: POP
// bc_type := b_turret ; 28 :
24470: LD_ADDR_OWVAR 42
24474: PUSH
24475: LD_INT 33
24477: ST_TO_ADDR
24478: GO 24614
24480: LD_INT 28
24482: DOUBLE
24483: EQUAL
24484: IFTRUE 24488
24486: GO 24499
24488: POP
// bc_type := b_armoury ; 29 :
24489: LD_ADDR_OWVAR 42
24493: PUSH
24494: LD_INT 4
24496: ST_TO_ADDR
24497: GO 24614
24499: LD_INT 29
24501: DOUBLE
24502: EQUAL
24503: IFTRUE 24507
24505: GO 24518
24507: POP
// bc_type := b_barracks ; 30 :
24508: LD_ADDR_OWVAR 42
24512: PUSH
24513: LD_INT 5
24515: ST_TO_ADDR
24516: GO 24614
24518: LD_INT 30
24520: DOUBLE
24521: EQUAL
24522: IFTRUE 24526
24524: GO 24537
24526: POP
// bc_type := b_solar_power ; 31 :
24527: LD_ADDR_OWVAR 42
24531: PUSH
24532: LD_INT 27
24534: ST_TO_ADDR
24535: GO 24614
24537: LD_INT 31
24539: DOUBLE
24540: EQUAL
24541: IFTRUE 24545
24543: GO 24556
24545: POP
// bc_type := b_oil_power ; 32 :
24546: LD_ADDR_OWVAR 42
24550: PUSH
24551: LD_INT 26
24553: ST_TO_ADDR
24554: GO 24614
24556: LD_INT 32
24558: DOUBLE
24559: EQUAL
24560: IFTRUE 24564
24562: GO 24575
24564: POP
// bc_type := b_siberite_power ; 33 :
24565: LD_ADDR_OWVAR 42
24569: PUSH
24570: LD_INT 28
24572: ST_TO_ADDR
24573: GO 24614
24575: LD_INT 33
24577: DOUBLE
24578: EQUAL
24579: IFTRUE 24583
24581: GO 24594
24583: POP
// bc_type := b_oil_mine ; 34 :
24584: LD_ADDR_OWVAR 42
24588: PUSH
24589: LD_INT 29
24591: ST_TO_ADDR
24592: GO 24614
24594: LD_INT 34
24596: DOUBLE
24597: EQUAL
24598: IFTRUE 24602
24600: GO 24613
24602: POP
// bc_type := b_siberite_mine ; end ;
24603: LD_ADDR_OWVAR 42
24607: PUSH
24608: LD_INT 30
24610: ST_TO_ADDR
24611: GO 24614
24613: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24614: LD_ADDR_VAR 0 8
24618: PUSH
24619: LD_VAR 0 5
24623: PPUSH
24624: LD_VAR 0 6
24628: PPUSH
24629: LD_VAR 0 3
24633: PPUSH
24634: CALL_OW 47
24638: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24639: LD_OWVAR 42
24643: PUSH
24644: LD_INT 32
24646: PUSH
24647: LD_INT 33
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: IN
24654: IFFALSE 24670
// PlaceWeaponTurret ( b , weapon ) ;
24656: LD_VAR 0 8
24660: PPUSH
24661: LD_VAR 0 4
24665: PPUSH
24666: CALL_OW 431
// end ;
24670: LD_VAR 0 7
24674: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24675: LD_INT 0
24677: PPUSH
24678: PPUSH
24679: PPUSH
24680: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24681: LD_ADDR_VAR 0 4
24685: PUSH
24686: LD_INT 22
24688: PUSH
24689: LD_OWVAR 2
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 2
24700: PUSH
24701: LD_INT 30
24703: PUSH
24704: LD_INT 0
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PUSH
24711: LD_INT 30
24713: PUSH
24714: LD_INT 1
24716: PUSH
24717: EMPTY
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PPUSH
24730: CALL_OW 69
24734: ST_TO_ADDR
// if not tmp then
24735: LD_VAR 0 4
24739: NOT
24740: IFFALSE 24744
// exit ;
24742: GO 24803
// for i in tmp do
24744: LD_ADDR_VAR 0 2
24748: PUSH
24749: LD_VAR 0 4
24753: PUSH
24754: FOR_IN
24755: IFFALSE 24801
// for j = 1 to 3 do
24757: LD_ADDR_VAR 0 3
24761: PUSH
24762: DOUBLE
24763: LD_INT 1
24765: DEC
24766: ST_TO_ADDR
24767: LD_INT 3
24769: PUSH
24770: FOR_TO
24771: IFFALSE 24797
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24773: LD_VAR 0 2
24777: PPUSH
24778: CALL_OW 274
24782: PPUSH
24783: LD_VAR 0 3
24787: PPUSH
24788: LD_INT 99999
24790: PPUSH
24791: CALL_OW 277
24795: GO 24770
24797: POP
24798: POP
24799: GO 24754
24801: POP
24802: POP
// end ;
24803: LD_VAR 0 1
24807: RET
// export function hHackSetLevel10 ; var i , j ; begin
24808: LD_INT 0
24810: PPUSH
24811: PPUSH
24812: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24813: LD_ADDR_VAR 0 2
24817: PUSH
24818: LD_INT 21
24820: PUSH
24821: LD_INT 1
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PPUSH
24828: CALL_OW 69
24832: PUSH
24833: FOR_IN
24834: IFFALSE 24886
// if IsSelected ( i ) then
24836: LD_VAR 0 2
24840: PPUSH
24841: CALL_OW 306
24845: IFFALSE 24884
// begin for j := 1 to 4 do
24847: LD_ADDR_VAR 0 3
24851: PUSH
24852: DOUBLE
24853: LD_INT 1
24855: DEC
24856: ST_TO_ADDR
24857: LD_INT 4
24859: PUSH
24860: FOR_TO
24861: IFFALSE 24882
// SetSkill ( i , j , 10 ) ;
24863: LD_VAR 0 2
24867: PPUSH
24868: LD_VAR 0 3
24872: PPUSH
24873: LD_INT 10
24875: PPUSH
24876: CALL_OW 237
24880: GO 24860
24882: POP
24883: POP
// end ;
24884: GO 24833
24886: POP
24887: POP
// end ;
24888: LD_VAR 0 1
24892: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24893: LD_INT 0
24895: PPUSH
24896: PPUSH
24897: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24898: LD_ADDR_VAR 0 2
24902: PUSH
24903: LD_INT 22
24905: PUSH
24906: LD_OWVAR 2
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 21
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PPUSH
24929: CALL_OW 69
24933: PUSH
24934: FOR_IN
24935: IFFALSE 24976
// begin for j := 1 to 4 do
24937: LD_ADDR_VAR 0 3
24941: PUSH
24942: DOUBLE
24943: LD_INT 1
24945: DEC
24946: ST_TO_ADDR
24947: LD_INT 4
24949: PUSH
24950: FOR_TO
24951: IFFALSE 24972
// SetSkill ( i , j , 10 ) ;
24953: LD_VAR 0 2
24957: PPUSH
24958: LD_VAR 0 3
24962: PPUSH
24963: LD_INT 10
24965: PPUSH
24966: CALL_OW 237
24970: GO 24950
24972: POP
24973: POP
// end ;
24974: GO 24934
24976: POP
24977: POP
// end ;
24978: LD_VAR 0 1
24982: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24983: LD_INT 0
24985: PPUSH
// uc_side := your_side ;
24986: LD_ADDR_OWVAR 20
24990: PUSH
24991: LD_OWVAR 2
24995: ST_TO_ADDR
// uc_nation := nation ;
24996: LD_ADDR_OWVAR 21
25000: PUSH
25001: LD_VAR 0 1
25005: ST_TO_ADDR
// InitHc ;
25006: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25010: LD_INT 0
25012: PPUSH
25013: LD_VAR 0 2
25017: PPUSH
25018: LD_VAR 0 3
25022: PPUSH
25023: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25027: LD_VAR 0 4
25031: PPUSH
25032: LD_VAR 0 5
25036: PPUSH
25037: CALL_OW 428
25041: PUSH
25042: LD_INT 0
25044: EQUAL
25045: IFFALSE 25069
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25047: CALL_OW 44
25051: PPUSH
25052: LD_VAR 0 4
25056: PPUSH
25057: LD_VAR 0 5
25061: PPUSH
25062: LD_INT 1
25064: PPUSH
25065: CALL_OW 48
// end ;
25069: LD_VAR 0 6
25073: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25074: LD_INT 0
25076: PPUSH
25077: PPUSH
// uc_side := your_side ;
25078: LD_ADDR_OWVAR 20
25082: PUSH
25083: LD_OWVAR 2
25087: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25088: LD_VAR 0 1
25092: PUSH
25093: LD_INT 1
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 3
25101: PUSH
25102: LD_INT 4
25104: PUSH
25105: LD_INT 5
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: IN
25115: IFFALSE 25127
// uc_nation := nation_american else
25117: LD_ADDR_OWVAR 21
25121: PUSH
25122: LD_INT 1
25124: ST_TO_ADDR
25125: GO 25170
// if chassis in [ 11 , 12 , 13 , 14 ] then
25127: LD_VAR 0 1
25131: PUSH
25132: LD_INT 11
25134: PUSH
25135: LD_INT 12
25137: PUSH
25138: LD_INT 13
25140: PUSH
25141: LD_INT 14
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: IN
25150: IFFALSE 25162
// uc_nation := nation_arabian else
25152: LD_ADDR_OWVAR 21
25156: PUSH
25157: LD_INT 2
25159: ST_TO_ADDR
25160: GO 25170
// uc_nation := nation_russian ;
25162: LD_ADDR_OWVAR 21
25166: PUSH
25167: LD_INT 3
25169: ST_TO_ADDR
// vc_chassis := chassis ;
25170: LD_ADDR_OWVAR 37
25174: PUSH
25175: LD_VAR 0 1
25179: ST_TO_ADDR
// vc_engine := engine ;
25180: LD_ADDR_OWVAR 39
25184: PUSH
25185: LD_VAR 0 2
25189: ST_TO_ADDR
// vc_control := control ;
25190: LD_ADDR_OWVAR 38
25194: PUSH
25195: LD_VAR 0 3
25199: ST_TO_ADDR
// vc_weapon := weapon ;
25200: LD_ADDR_OWVAR 40
25204: PUSH
25205: LD_VAR 0 4
25209: ST_TO_ADDR
// un := CreateVehicle ;
25210: LD_ADDR_VAR 0 8
25214: PUSH
25215: CALL_OW 45
25219: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25220: LD_VAR 0 8
25224: PPUSH
25225: LD_INT 0
25227: PPUSH
25228: LD_INT 5
25230: PPUSH
25231: CALL_OW 12
25235: PPUSH
25236: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25240: LD_VAR 0 8
25244: PPUSH
25245: LD_VAR 0 5
25249: PPUSH
25250: LD_VAR 0 6
25254: PPUSH
25255: LD_INT 1
25257: PPUSH
25258: CALL_OW 48
// end ;
25262: LD_VAR 0 7
25266: RET
// export hInvincible ; every 1 do
25267: GO 25269
25269: DISABLE
// hInvincible := [ ] ;
25270: LD_ADDR_EXP 105
25274: PUSH
25275: EMPTY
25276: ST_TO_ADDR
25277: END
// every 10 do var i ;
25278: GO 25280
25280: DISABLE
25281: LD_INT 0
25283: PPUSH
// begin enable ;
25284: ENABLE
// if not hInvincible then
25285: LD_EXP 105
25289: NOT
25290: IFFALSE 25294
// exit ;
25292: GO 25338
// for i in hInvincible do
25294: LD_ADDR_VAR 0 1
25298: PUSH
25299: LD_EXP 105
25303: PUSH
25304: FOR_IN
25305: IFFALSE 25336
// if GetLives ( i ) < 1000 then
25307: LD_VAR 0 1
25311: PPUSH
25312: CALL_OW 256
25316: PUSH
25317: LD_INT 1000
25319: LESS
25320: IFFALSE 25334
// SetLives ( i , 1000 ) ;
25322: LD_VAR 0 1
25326: PPUSH
25327: LD_INT 1000
25329: PPUSH
25330: CALL_OW 234
25334: GO 25304
25336: POP
25337: POP
// end ;
25338: PPOPN 1
25340: END
// export function hHackInvincible ; var i ; begin
25341: LD_INT 0
25343: PPUSH
25344: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25345: LD_ADDR_VAR 0 2
25349: PUSH
25350: LD_INT 2
25352: PUSH
25353: LD_INT 21
25355: PUSH
25356: LD_INT 1
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: LD_INT 21
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: PPUSH
25378: CALL_OW 69
25382: PUSH
25383: FOR_IN
25384: IFFALSE 25445
// if IsSelected ( i ) then
25386: LD_VAR 0 2
25390: PPUSH
25391: CALL_OW 306
25395: IFFALSE 25443
// begin if i in hInvincible then
25397: LD_VAR 0 2
25401: PUSH
25402: LD_EXP 105
25406: IN
25407: IFFALSE 25427
// hInvincible := hInvincible diff i else
25409: LD_ADDR_EXP 105
25413: PUSH
25414: LD_EXP 105
25418: PUSH
25419: LD_VAR 0 2
25423: DIFF
25424: ST_TO_ADDR
25425: GO 25443
// hInvincible := hInvincible union i ;
25427: LD_ADDR_EXP 105
25431: PUSH
25432: LD_EXP 105
25436: PUSH
25437: LD_VAR 0 2
25441: UNION
25442: ST_TO_ADDR
// end ;
25443: GO 25383
25445: POP
25446: POP
// end ;
25447: LD_VAR 0 1
25451: RET
// export function hHackInvisible ; var i , j ; begin
25452: LD_INT 0
25454: PPUSH
25455: PPUSH
25456: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25457: LD_ADDR_VAR 0 2
25461: PUSH
25462: LD_INT 21
25464: PUSH
25465: LD_INT 1
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PPUSH
25472: CALL_OW 69
25476: PUSH
25477: FOR_IN
25478: IFFALSE 25502
// if IsSelected ( i ) then
25480: LD_VAR 0 2
25484: PPUSH
25485: CALL_OW 306
25489: IFFALSE 25500
// ComForceInvisible ( i ) ;
25491: LD_VAR 0 2
25495: PPUSH
25496: CALL_OW 496
25500: GO 25477
25502: POP
25503: POP
// end ;
25504: LD_VAR 0 1
25508: RET
// export function hHackChangeYourSide ; begin
25509: LD_INT 0
25511: PPUSH
// if your_side = 8 then
25512: LD_OWVAR 2
25516: PUSH
25517: LD_INT 8
25519: EQUAL
25520: IFFALSE 25532
// your_side := 0 else
25522: LD_ADDR_OWVAR 2
25526: PUSH
25527: LD_INT 0
25529: ST_TO_ADDR
25530: GO 25546
// your_side := your_side + 1 ;
25532: LD_ADDR_OWVAR 2
25536: PUSH
25537: LD_OWVAR 2
25541: PUSH
25542: LD_INT 1
25544: PLUS
25545: ST_TO_ADDR
// end ;
25546: LD_VAR 0 1
25550: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25551: LD_INT 0
25553: PPUSH
25554: PPUSH
25555: PPUSH
// for i in all_units do
25556: LD_ADDR_VAR 0 2
25560: PUSH
25561: LD_OWVAR 3
25565: PUSH
25566: FOR_IN
25567: IFFALSE 25645
// if IsSelected ( i ) then
25569: LD_VAR 0 2
25573: PPUSH
25574: CALL_OW 306
25578: IFFALSE 25643
// begin j := GetSide ( i ) ;
25580: LD_ADDR_VAR 0 3
25584: PUSH
25585: LD_VAR 0 2
25589: PPUSH
25590: CALL_OW 255
25594: ST_TO_ADDR
// if j = 8 then
25595: LD_VAR 0 3
25599: PUSH
25600: LD_INT 8
25602: EQUAL
25603: IFFALSE 25615
// j := 0 else
25605: LD_ADDR_VAR 0 3
25609: PUSH
25610: LD_INT 0
25612: ST_TO_ADDR
25613: GO 25629
// j := j + 1 ;
25615: LD_ADDR_VAR 0 3
25619: PUSH
25620: LD_VAR 0 3
25624: PUSH
25625: LD_INT 1
25627: PLUS
25628: ST_TO_ADDR
// SetSide ( i , j ) ;
25629: LD_VAR 0 2
25633: PPUSH
25634: LD_VAR 0 3
25638: PPUSH
25639: CALL_OW 235
// end ;
25643: GO 25566
25645: POP
25646: POP
// end ;
25647: LD_VAR 0 1
25651: RET
// export function hHackFog ; begin
25652: LD_INT 0
25654: PPUSH
// FogOff ( true ) ;
25655: LD_INT 1
25657: PPUSH
25658: CALL_OW 344
// end ;
25662: LD_VAR 0 1
25666: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25667: LD_INT 0
25669: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25670: LD_VAR 0 1
25674: PPUSH
25675: LD_VAR 0 2
25679: PPUSH
25680: LD_VAR 0 3
25684: PPUSH
25685: LD_INT 1
25687: PPUSH
25688: LD_INT 1
25690: PPUSH
25691: CALL_OW 483
// CenterOnXY ( x , y ) ;
25695: LD_VAR 0 2
25699: PPUSH
25700: LD_VAR 0 3
25704: PPUSH
25705: CALL_OW 84
// end ; end_of_file
25709: LD_VAR 0 4
25713: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25714: LD_INT 0
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25720: LD_VAR 0 1
25724: PPUSH
25725: CALL_OW 264
25729: PUSH
25730: LD_EXP 36
25734: EQUAL
25735: IFFALSE 25807
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25737: LD_INT 68
25739: PPUSH
25740: LD_VAR 0 1
25744: PPUSH
25745: CALL_OW 255
25749: PPUSH
25750: CALL_OW 321
25754: PUSH
25755: LD_INT 2
25757: EQUAL
25758: IFFALSE 25770
// eff := 70 else
25760: LD_ADDR_VAR 0 4
25764: PUSH
25765: LD_INT 70
25767: ST_TO_ADDR
25768: GO 25778
// eff := 30 ;
25770: LD_ADDR_VAR 0 4
25774: PUSH
25775: LD_INT 30
25777: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25778: LD_VAR 0 1
25782: PPUSH
25783: CALL_OW 250
25787: PPUSH
25788: LD_VAR 0 1
25792: PPUSH
25793: CALL_OW 251
25797: PPUSH
25798: LD_VAR 0 4
25802: PPUSH
25803: CALL_OW 495
// end ; end ;
25807: LD_VAR 0 2
25811: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25812: LD_INT 0
25814: PPUSH
// end ;
25815: LD_VAR 0 4
25819: RET
// export function SOS_Command ( cmd ) ; begin
25820: LD_INT 0
25822: PPUSH
// end ;
25823: LD_VAR 0 2
25827: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
25828: LD_INT 0
25830: PPUSH
// if cmd = 121 then
25831: LD_VAR 0 1
25835: PUSH
25836: LD_INT 121
25838: EQUAL
25839: IFFALSE 25841
// end ;
25841: LD_VAR 0 6
25845: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25846: LD_INT 0
25848: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_INT 250
25856: EQUAL
25857: PUSH
25858: LD_VAR 0 2
25862: PPUSH
25863: CALL_OW 264
25867: PUSH
25868: LD_EXP 39
25872: EQUAL
25873: AND
25874: IFFALSE 25895
// MinerPlaceMine ( unit , x , y ) ;
25876: LD_VAR 0 2
25880: PPUSH
25881: LD_VAR 0 4
25885: PPUSH
25886: LD_VAR 0 5
25890: PPUSH
25891: CALL 28244 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25895: LD_VAR 0 1
25899: PUSH
25900: LD_INT 251
25902: EQUAL
25903: PUSH
25904: LD_VAR 0 2
25908: PPUSH
25909: CALL_OW 264
25913: PUSH
25914: LD_EXP 39
25918: EQUAL
25919: AND
25920: IFFALSE 25941
// MinerDetonateMine ( unit , x , y ) ;
25922: LD_VAR 0 2
25926: PPUSH
25927: LD_VAR 0 4
25931: PPUSH
25932: LD_VAR 0 5
25936: PPUSH
25937: CALL 28521 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25941: LD_VAR 0 1
25945: PUSH
25946: LD_INT 252
25948: EQUAL
25949: PUSH
25950: LD_VAR 0 2
25954: PPUSH
25955: CALL_OW 264
25959: PUSH
25960: LD_EXP 39
25964: EQUAL
25965: AND
25966: IFFALSE 25987
// MinerCreateMinefield ( unit , x , y ) ;
25968: LD_VAR 0 2
25972: PPUSH
25973: LD_VAR 0 4
25977: PPUSH
25978: LD_VAR 0 5
25982: PPUSH
25983: CALL 28938 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25987: LD_VAR 0 1
25991: PUSH
25992: LD_INT 253
25994: EQUAL
25995: PUSH
25996: LD_VAR 0 2
26000: PPUSH
26001: CALL_OW 257
26005: PUSH
26006: LD_INT 5
26008: EQUAL
26009: AND
26010: IFFALSE 26031
// ComBinocular ( unit , x , y ) ;
26012: LD_VAR 0 2
26016: PPUSH
26017: LD_VAR 0 4
26021: PPUSH
26022: LD_VAR 0 5
26026: PPUSH
26027: CALL 29309 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26031: LD_VAR 0 1
26035: PUSH
26036: LD_INT 254
26038: EQUAL
26039: PUSH
26040: LD_VAR 0 2
26044: PPUSH
26045: CALL_OW 264
26049: PUSH
26050: LD_EXP 34
26054: EQUAL
26055: AND
26056: PUSH
26057: LD_VAR 0 3
26061: PPUSH
26062: CALL_OW 263
26066: PUSH
26067: LD_INT 3
26069: EQUAL
26070: AND
26071: IFFALSE 26087
// HackDestroyVehicle ( unit , selectedUnit ) ;
26073: LD_VAR 0 2
26077: PPUSH
26078: LD_VAR 0 3
26082: PPUSH
26083: CALL 27604 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26087: LD_VAR 0 1
26091: PUSH
26092: LD_INT 255
26094: EQUAL
26095: PUSH
26096: LD_VAR 0 2
26100: PPUSH
26101: CALL_OW 264
26105: PUSH
26106: LD_INT 14
26108: PUSH
26109: LD_INT 53
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: IN
26116: AND
26117: PUSH
26118: LD_VAR 0 4
26122: PPUSH
26123: LD_VAR 0 5
26127: PPUSH
26128: CALL_OW 488
26132: AND
26133: IFFALSE 26157
// CutTreeXYR ( unit , x , y , 12 ) ;
26135: LD_VAR 0 2
26139: PPUSH
26140: LD_VAR 0 4
26144: PPUSH
26145: LD_VAR 0 5
26149: PPUSH
26150: LD_INT 12
26152: PPUSH
26153: CALL 26170 0 4
// end ;
26157: LD_VAR 0 6
26161: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26162: LD_INT 0
26164: PPUSH
// end ;
26165: LD_VAR 0 4
26169: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26170: LD_INT 0
26172: PPUSH
26173: PPUSH
26174: PPUSH
26175: PPUSH
26176: PPUSH
26177: PPUSH
26178: PPUSH
26179: PPUSH
26180: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26181: LD_VAR 0 1
26185: NOT
26186: PUSH
26187: LD_VAR 0 2
26191: PPUSH
26192: LD_VAR 0 3
26196: PPUSH
26197: CALL_OW 488
26201: NOT
26202: OR
26203: PUSH
26204: LD_VAR 0 4
26208: NOT
26209: OR
26210: IFFALSE 26214
// exit ;
26212: GO 26554
// list := [ ] ;
26214: LD_ADDR_VAR 0 13
26218: PUSH
26219: EMPTY
26220: ST_TO_ADDR
// if x - r < 0 then
26221: LD_VAR 0 2
26225: PUSH
26226: LD_VAR 0 4
26230: MINUS
26231: PUSH
26232: LD_INT 0
26234: LESS
26235: IFFALSE 26247
// min_x := 0 else
26237: LD_ADDR_VAR 0 7
26241: PUSH
26242: LD_INT 0
26244: ST_TO_ADDR
26245: GO 26263
// min_x := x - r ;
26247: LD_ADDR_VAR 0 7
26251: PUSH
26252: LD_VAR 0 2
26256: PUSH
26257: LD_VAR 0 4
26261: MINUS
26262: ST_TO_ADDR
// if y - r < 0 then
26263: LD_VAR 0 3
26267: PUSH
26268: LD_VAR 0 4
26272: MINUS
26273: PUSH
26274: LD_INT 0
26276: LESS
26277: IFFALSE 26289
// min_y := 0 else
26279: LD_ADDR_VAR 0 8
26283: PUSH
26284: LD_INT 0
26286: ST_TO_ADDR
26287: GO 26305
// min_y := y - r ;
26289: LD_ADDR_VAR 0 8
26293: PUSH
26294: LD_VAR 0 3
26298: PUSH
26299: LD_VAR 0 4
26303: MINUS
26304: ST_TO_ADDR
// max_x := x + r ;
26305: LD_ADDR_VAR 0 9
26309: PUSH
26310: LD_VAR 0 2
26314: PUSH
26315: LD_VAR 0 4
26319: PLUS
26320: ST_TO_ADDR
// max_y := y + r ;
26321: LD_ADDR_VAR 0 10
26325: PUSH
26326: LD_VAR 0 3
26330: PUSH
26331: LD_VAR 0 4
26335: PLUS
26336: ST_TO_ADDR
// for _x = min_x to max_x do
26337: LD_ADDR_VAR 0 11
26341: PUSH
26342: DOUBLE
26343: LD_VAR 0 7
26347: DEC
26348: ST_TO_ADDR
26349: LD_VAR 0 9
26353: PUSH
26354: FOR_TO
26355: IFFALSE 26472
// for _y = min_y to max_y do
26357: LD_ADDR_VAR 0 12
26361: PUSH
26362: DOUBLE
26363: LD_VAR 0 8
26367: DEC
26368: ST_TO_ADDR
26369: LD_VAR 0 10
26373: PUSH
26374: FOR_TO
26375: IFFALSE 26468
// begin if not ValidHex ( _x , _y ) then
26377: LD_VAR 0 11
26381: PPUSH
26382: LD_VAR 0 12
26386: PPUSH
26387: CALL_OW 488
26391: NOT
26392: IFFALSE 26396
// continue ;
26394: GO 26374
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26396: LD_VAR 0 11
26400: PPUSH
26401: LD_VAR 0 12
26405: PPUSH
26406: CALL_OW 351
26410: PUSH
26411: LD_VAR 0 11
26415: PPUSH
26416: LD_VAR 0 12
26420: PPUSH
26421: CALL_OW 554
26425: AND
26426: IFFALSE 26466
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26428: LD_ADDR_VAR 0 13
26432: PUSH
26433: LD_VAR 0 13
26437: PPUSH
26438: LD_VAR 0 13
26442: PUSH
26443: LD_INT 1
26445: PLUS
26446: PPUSH
26447: LD_VAR 0 11
26451: PUSH
26452: LD_VAR 0 12
26456: PUSH
26457: EMPTY
26458: LIST
26459: LIST
26460: PPUSH
26461: CALL_OW 2
26465: ST_TO_ADDR
// end ;
26466: GO 26374
26468: POP
26469: POP
26470: GO 26354
26472: POP
26473: POP
// if not list then
26474: LD_VAR 0 13
26478: NOT
26479: IFFALSE 26483
// exit ;
26481: GO 26554
// for i in list do
26483: LD_ADDR_VAR 0 6
26487: PUSH
26488: LD_VAR 0 13
26492: PUSH
26493: FOR_IN
26494: IFFALSE 26552
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_STRING M
26503: PUSH
26504: LD_VAR 0 6
26508: PUSH
26509: LD_INT 1
26511: ARRAY
26512: PUSH
26513: LD_VAR 0 6
26517: PUSH
26518: LD_INT 2
26520: ARRAY
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: LD_INT 0
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: LIST
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: PPUSH
26546: CALL_OW 447
26550: GO 26493
26552: POP
26553: POP
// end ;
26554: LD_VAR 0 5
26558: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26559: LD_EXP 108
26563: NOT
26564: IFFALSE 26614
26566: GO 26568
26568: DISABLE
// begin initHack := true ;
26569: LD_ADDR_EXP 108
26573: PUSH
26574: LD_INT 1
26576: ST_TO_ADDR
// hackTanks := [ ] ;
26577: LD_ADDR_EXP 109
26581: PUSH
26582: EMPTY
26583: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26584: LD_ADDR_EXP 110
26588: PUSH
26589: EMPTY
26590: ST_TO_ADDR
// hackLimit := 3 ;
26591: LD_ADDR_EXP 111
26595: PUSH
26596: LD_INT 3
26598: ST_TO_ADDR
// hackDist := 12 ;
26599: LD_ADDR_EXP 112
26603: PUSH
26604: LD_INT 12
26606: ST_TO_ADDR
// hackCounter := [ ] ;
26607: LD_ADDR_EXP 113
26611: PUSH
26612: EMPTY
26613: ST_TO_ADDR
// end ;
26614: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26615: LD_EXP 108
26619: PUSH
26620: LD_INT 34
26622: PUSH
26623: LD_EXP 34
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PPUSH
26632: CALL_OW 69
26636: AND
26637: IFFALSE 26892
26639: GO 26641
26641: DISABLE
26642: LD_INT 0
26644: PPUSH
26645: PPUSH
// begin enable ;
26646: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26647: LD_ADDR_VAR 0 1
26651: PUSH
26652: LD_INT 34
26654: PUSH
26655: LD_EXP 34
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PPUSH
26664: CALL_OW 69
26668: PUSH
26669: FOR_IN
26670: IFFALSE 26890
// begin if not i in hackTanks then
26672: LD_VAR 0 1
26676: PUSH
26677: LD_EXP 109
26681: IN
26682: NOT
26683: IFFALSE 26766
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26685: LD_ADDR_EXP 109
26689: PUSH
26690: LD_EXP 109
26694: PPUSH
26695: LD_EXP 109
26699: PUSH
26700: LD_INT 1
26702: PLUS
26703: PPUSH
26704: LD_VAR 0 1
26708: PPUSH
26709: CALL_OW 1
26713: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26714: LD_ADDR_EXP 110
26718: PUSH
26719: LD_EXP 110
26723: PPUSH
26724: LD_EXP 110
26728: PUSH
26729: LD_INT 1
26731: PLUS
26732: PPUSH
26733: EMPTY
26734: PPUSH
26735: CALL_OW 1
26739: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26740: LD_ADDR_EXP 113
26744: PUSH
26745: LD_EXP 113
26749: PPUSH
26750: LD_EXP 113
26754: PUSH
26755: LD_INT 1
26757: PLUS
26758: PPUSH
26759: EMPTY
26760: PPUSH
26761: CALL_OW 1
26765: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26766: LD_VAR 0 1
26770: PPUSH
26771: CALL_OW 302
26775: NOT
26776: IFFALSE 26789
// begin HackUnlinkAll ( i ) ;
26778: LD_VAR 0 1
26782: PPUSH
26783: CALL 26895 0 1
// continue ;
26787: GO 26669
// end ; HackCheckCapturedStatus ( i ) ;
26789: LD_VAR 0 1
26793: PPUSH
26794: CALL 27338 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26798: LD_ADDR_VAR 0 2
26802: PUSH
26803: LD_INT 81
26805: PUSH
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 255
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 33
26822: PUSH
26823: LD_INT 3
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 91
26832: PUSH
26833: LD_VAR 0 1
26837: PUSH
26838: LD_EXP 112
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 50
26850: PUSH
26851: EMPTY
26852: LIST
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: PPUSH
26860: CALL_OW 69
26864: ST_TO_ADDR
// if not tmp then
26865: LD_VAR 0 2
26869: NOT
26870: IFFALSE 26874
// continue ;
26872: GO 26669
// HackLink ( i , tmp ) ;
26874: LD_VAR 0 1
26878: PPUSH
26879: LD_VAR 0 2
26883: PPUSH
26884: CALL 27031 0 2
// end ;
26888: GO 26669
26890: POP
26891: POP
// end ;
26892: PPOPN 2
26894: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26895: LD_INT 0
26897: PPUSH
26898: PPUSH
26899: PPUSH
// if not hack in hackTanks then
26900: LD_VAR 0 1
26904: PUSH
26905: LD_EXP 109
26909: IN
26910: NOT
26911: IFFALSE 26915
// exit ;
26913: GO 27026
// index := GetElementIndex ( hackTanks , hack ) ;
26915: LD_ADDR_VAR 0 4
26919: PUSH
26920: LD_EXP 109
26924: PPUSH
26925: LD_VAR 0 1
26929: PPUSH
26930: CALL 34460 0 2
26934: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26935: LD_EXP 110
26939: PUSH
26940: LD_VAR 0 4
26944: ARRAY
26945: IFFALSE 27026
// begin for i in hackTanksCaptured [ index ] do
26947: LD_ADDR_VAR 0 3
26951: PUSH
26952: LD_EXP 110
26956: PUSH
26957: LD_VAR 0 4
26961: ARRAY
26962: PUSH
26963: FOR_IN
26964: IFFALSE 26990
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26966: LD_VAR 0 3
26970: PUSH
26971: LD_INT 1
26973: ARRAY
26974: PPUSH
26975: LD_VAR 0 3
26979: PUSH
26980: LD_INT 2
26982: ARRAY
26983: PPUSH
26984: CALL_OW 235
26988: GO 26963
26990: POP
26991: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26992: LD_ADDR_EXP 110
26996: PUSH
26997: LD_EXP 110
27001: PPUSH
27002: LD_VAR 0 4
27006: PPUSH
27007: EMPTY
27008: PPUSH
27009: CALL_OW 1
27013: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27014: LD_VAR 0 1
27018: PPUSH
27019: LD_INT 0
27021: PPUSH
27022: CALL_OW 505
// end ; end ;
27026: LD_VAR 0 2
27030: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27031: LD_INT 0
27033: PPUSH
27034: PPUSH
27035: PPUSH
// if not hack in hackTanks or not vehicles then
27036: LD_VAR 0 1
27040: PUSH
27041: LD_EXP 109
27045: IN
27046: NOT
27047: PUSH
27048: LD_VAR 0 2
27052: NOT
27053: OR
27054: IFFALSE 27058
// exit ;
27056: GO 27333
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27058: LD_ADDR_VAR 0 2
27062: PUSH
27063: LD_VAR 0 1
27067: PPUSH
27068: LD_VAR 0 2
27072: PPUSH
27073: LD_INT 1
27075: PPUSH
27076: LD_INT 1
27078: PPUSH
27079: CALL 35110 0 4
27083: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27084: LD_ADDR_VAR 0 5
27088: PUSH
27089: LD_EXP 109
27093: PPUSH
27094: LD_VAR 0 1
27098: PPUSH
27099: CALL 34460 0 2
27103: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27104: LD_EXP 110
27108: PUSH
27109: LD_VAR 0 5
27113: ARRAY
27114: PUSH
27115: LD_EXP 111
27119: LESS
27120: IFFALSE 27309
// begin for i := 1 to vehicles do
27122: LD_ADDR_VAR 0 4
27126: PUSH
27127: DOUBLE
27128: LD_INT 1
27130: DEC
27131: ST_TO_ADDR
27132: LD_VAR 0 2
27136: PUSH
27137: FOR_TO
27138: IFFALSE 27307
// begin if hackTanksCaptured [ index ] = hackLimit then
27140: LD_EXP 110
27144: PUSH
27145: LD_VAR 0 5
27149: ARRAY
27150: PUSH
27151: LD_EXP 111
27155: EQUAL
27156: IFFALSE 27160
// break ;
27158: GO 27307
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27160: LD_ADDR_EXP 113
27164: PUSH
27165: LD_EXP 113
27169: PPUSH
27170: LD_VAR 0 5
27174: PPUSH
27175: LD_EXP 113
27179: PUSH
27180: LD_VAR 0 5
27184: ARRAY
27185: PUSH
27186: LD_INT 1
27188: PLUS
27189: PPUSH
27190: CALL_OW 1
27194: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27195: LD_ADDR_EXP 110
27199: PUSH
27200: LD_EXP 110
27204: PPUSH
27205: LD_VAR 0 5
27209: PUSH
27210: LD_EXP 110
27214: PUSH
27215: LD_VAR 0 5
27219: ARRAY
27220: PUSH
27221: LD_INT 1
27223: PLUS
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PPUSH
27229: LD_VAR 0 2
27233: PUSH
27234: LD_VAR 0 4
27238: ARRAY
27239: PUSH
27240: LD_VAR 0 2
27244: PUSH
27245: LD_VAR 0 4
27249: ARRAY
27250: PPUSH
27251: CALL_OW 255
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: PPUSH
27260: CALL 34675 0 3
27264: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27265: LD_VAR 0 2
27269: PUSH
27270: LD_VAR 0 4
27274: ARRAY
27275: PPUSH
27276: LD_VAR 0 1
27280: PPUSH
27281: CALL_OW 255
27285: PPUSH
27286: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27290: LD_VAR 0 2
27294: PUSH
27295: LD_VAR 0 4
27299: ARRAY
27300: PPUSH
27301: CALL_OW 141
// end ;
27305: GO 27137
27307: POP
27308: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27309: LD_VAR 0 1
27313: PPUSH
27314: LD_EXP 110
27318: PUSH
27319: LD_VAR 0 5
27323: ARRAY
27324: PUSH
27325: LD_INT 0
27327: PLUS
27328: PPUSH
27329: CALL_OW 505
// end ;
27333: LD_VAR 0 3
27337: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27338: LD_INT 0
27340: PPUSH
27341: PPUSH
27342: PPUSH
27343: PPUSH
// if not hack in hackTanks then
27344: LD_VAR 0 1
27348: PUSH
27349: LD_EXP 109
27353: IN
27354: NOT
27355: IFFALSE 27359
// exit ;
27357: GO 27599
// index := GetElementIndex ( hackTanks , hack ) ;
27359: LD_ADDR_VAR 0 4
27363: PUSH
27364: LD_EXP 109
27368: PPUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL 34460 0 2
27378: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27379: LD_ADDR_VAR 0 3
27383: PUSH
27384: DOUBLE
27385: LD_EXP 110
27389: PUSH
27390: LD_VAR 0 4
27394: ARRAY
27395: INC
27396: ST_TO_ADDR
27397: LD_INT 1
27399: PUSH
27400: FOR_DOWNTO
27401: IFFALSE 27573
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27403: LD_ADDR_VAR 0 5
27407: PUSH
27408: LD_EXP 110
27412: PUSH
27413: LD_VAR 0 4
27417: ARRAY
27418: PUSH
27419: LD_VAR 0 3
27423: ARRAY
27424: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27425: LD_VAR 0 5
27429: PUSH
27430: LD_INT 1
27432: ARRAY
27433: PPUSH
27434: CALL_OW 302
27438: NOT
27439: PUSH
27440: LD_VAR 0 5
27444: PUSH
27445: LD_INT 1
27447: ARRAY
27448: PPUSH
27449: CALL_OW 255
27453: PUSH
27454: LD_VAR 0 1
27458: PPUSH
27459: CALL_OW 255
27463: NONEQUAL
27464: OR
27465: IFFALSE 27571
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27467: LD_VAR 0 5
27471: PUSH
27472: LD_INT 1
27474: ARRAY
27475: PPUSH
27476: CALL_OW 305
27480: PUSH
27481: LD_VAR 0 5
27485: PUSH
27486: LD_INT 1
27488: ARRAY
27489: PPUSH
27490: CALL_OW 255
27494: PUSH
27495: LD_VAR 0 1
27499: PPUSH
27500: CALL_OW 255
27504: EQUAL
27505: AND
27506: IFFALSE 27530
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27508: LD_VAR 0 5
27512: PUSH
27513: LD_INT 1
27515: ARRAY
27516: PPUSH
27517: LD_VAR 0 5
27521: PUSH
27522: LD_INT 2
27524: ARRAY
27525: PPUSH
27526: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27530: LD_ADDR_EXP 110
27534: PUSH
27535: LD_EXP 110
27539: PPUSH
27540: LD_VAR 0 4
27544: PPUSH
27545: LD_EXP 110
27549: PUSH
27550: LD_VAR 0 4
27554: ARRAY
27555: PPUSH
27556: LD_VAR 0 3
27560: PPUSH
27561: CALL_OW 3
27565: PPUSH
27566: CALL_OW 1
27570: ST_TO_ADDR
// end ; end ;
27571: GO 27400
27573: POP
27574: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27575: LD_VAR 0 1
27579: PPUSH
27580: LD_EXP 110
27584: PUSH
27585: LD_VAR 0 4
27589: ARRAY
27590: PUSH
27591: LD_INT 0
27593: PLUS
27594: PPUSH
27595: CALL_OW 505
// end ;
27599: LD_VAR 0 2
27603: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27604: LD_INT 0
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
// if not hack in hackTanks then
27610: LD_VAR 0 1
27614: PUSH
27615: LD_EXP 109
27619: IN
27620: NOT
27621: IFFALSE 27625
// exit ;
27623: GO 27710
// index := GetElementIndex ( hackTanks , hack ) ;
27625: LD_ADDR_VAR 0 5
27629: PUSH
27630: LD_EXP 109
27634: PPUSH
27635: LD_VAR 0 1
27639: PPUSH
27640: CALL 34460 0 2
27644: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27645: LD_ADDR_VAR 0 4
27649: PUSH
27650: DOUBLE
27651: LD_INT 1
27653: DEC
27654: ST_TO_ADDR
27655: LD_EXP 110
27659: PUSH
27660: LD_VAR 0 5
27664: ARRAY
27665: PUSH
27666: FOR_TO
27667: IFFALSE 27708
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27669: LD_EXP 110
27673: PUSH
27674: LD_VAR 0 5
27678: ARRAY
27679: PUSH
27680: LD_VAR 0 4
27684: ARRAY
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: PUSH
27690: LD_VAR 0 2
27694: EQUAL
27695: IFFALSE 27706
// KillUnit ( vehicle ) ;
27697: LD_VAR 0 2
27701: PPUSH
27702: CALL_OW 66
27706: GO 27666
27708: POP
27709: POP
// end ;
27710: LD_VAR 0 3
27714: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27715: LD_EXP 114
27719: NOT
27720: IFFALSE 27755
27722: GO 27724
27724: DISABLE
// begin initMiner := true ;
27725: LD_ADDR_EXP 114
27729: PUSH
27730: LD_INT 1
27732: ST_TO_ADDR
// minersList := [ ] ;
27733: LD_ADDR_EXP 115
27737: PUSH
27738: EMPTY
27739: ST_TO_ADDR
// minerMinesList := [ ] ;
27740: LD_ADDR_EXP 116
27744: PUSH
27745: EMPTY
27746: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27747: LD_ADDR_EXP 117
27751: PUSH
27752: LD_INT 5
27754: ST_TO_ADDR
// end ;
27755: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27756: LD_EXP 114
27760: PUSH
27761: LD_INT 34
27763: PUSH
27764: LD_EXP 39
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: PPUSH
27773: CALL_OW 69
27777: AND
27778: IFFALSE 28241
27780: GO 27782
27782: DISABLE
27783: LD_INT 0
27785: PPUSH
27786: PPUSH
27787: PPUSH
27788: PPUSH
// begin enable ;
27789: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27790: LD_ADDR_VAR 0 1
27794: PUSH
27795: LD_INT 34
27797: PUSH
27798: LD_EXP 39
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PPUSH
27807: CALL_OW 69
27811: PUSH
27812: FOR_IN
27813: IFFALSE 27885
// begin if not i in minersList then
27815: LD_VAR 0 1
27819: PUSH
27820: LD_EXP 115
27824: IN
27825: NOT
27826: IFFALSE 27883
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27828: LD_ADDR_EXP 115
27832: PUSH
27833: LD_EXP 115
27837: PPUSH
27838: LD_EXP 115
27842: PUSH
27843: LD_INT 1
27845: PLUS
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 1
27856: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27857: LD_ADDR_EXP 116
27861: PUSH
27862: LD_EXP 116
27866: PPUSH
27867: LD_EXP 116
27871: PUSH
27872: LD_INT 1
27874: PLUS
27875: PPUSH
27876: EMPTY
27877: PPUSH
27878: CALL_OW 1
27882: ST_TO_ADDR
// end end ;
27883: GO 27812
27885: POP
27886: POP
// for i := minerMinesList downto 1 do
27887: LD_ADDR_VAR 0 1
27891: PUSH
27892: DOUBLE
27893: LD_EXP 116
27897: INC
27898: ST_TO_ADDR
27899: LD_INT 1
27901: PUSH
27902: FOR_DOWNTO
27903: IFFALSE 28239
// begin if IsLive ( minersList [ i ] ) then
27905: LD_EXP 115
27909: PUSH
27910: LD_VAR 0 1
27914: ARRAY
27915: PPUSH
27916: CALL_OW 300
27920: IFFALSE 27948
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27922: LD_EXP 115
27926: PUSH
27927: LD_VAR 0 1
27931: ARRAY
27932: PPUSH
27933: LD_EXP 116
27937: PUSH
27938: LD_VAR 0 1
27942: ARRAY
27943: PPUSH
27944: CALL_OW 505
// if not minerMinesList [ i ] then
27948: LD_EXP 116
27952: PUSH
27953: LD_VAR 0 1
27957: ARRAY
27958: NOT
27959: IFFALSE 27963
// continue ;
27961: GO 27902
// for j := minerMinesList [ i ] downto 1 do
27963: LD_ADDR_VAR 0 2
27967: PUSH
27968: DOUBLE
27969: LD_EXP 116
27973: PUSH
27974: LD_VAR 0 1
27978: ARRAY
27979: INC
27980: ST_TO_ADDR
27981: LD_INT 1
27983: PUSH
27984: FOR_DOWNTO
27985: IFFALSE 28235
// begin side := GetSide ( minersList [ i ] ) ;
27987: LD_ADDR_VAR 0 3
27991: PUSH
27992: LD_EXP 115
27996: PUSH
27997: LD_VAR 0 1
28001: ARRAY
28002: PPUSH
28003: CALL_OW 255
28007: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28008: LD_ADDR_VAR 0 4
28012: PUSH
28013: LD_EXP 116
28017: PUSH
28018: LD_VAR 0 1
28022: ARRAY
28023: PUSH
28024: LD_VAR 0 2
28028: ARRAY
28029: PUSH
28030: LD_INT 1
28032: ARRAY
28033: PPUSH
28034: LD_EXP 116
28038: PUSH
28039: LD_VAR 0 1
28043: ARRAY
28044: PUSH
28045: LD_VAR 0 2
28049: ARRAY
28050: PUSH
28051: LD_INT 2
28053: ARRAY
28054: PPUSH
28055: CALL_OW 428
28059: ST_TO_ADDR
// if not tmp then
28060: LD_VAR 0 4
28064: NOT
28065: IFFALSE 28069
// continue ;
28067: GO 27984
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28069: LD_VAR 0 4
28073: PUSH
28074: LD_INT 81
28076: PUSH
28077: LD_VAR 0 3
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: PPUSH
28086: CALL_OW 69
28090: IN
28091: PUSH
28092: LD_EXP 116
28096: PUSH
28097: LD_VAR 0 1
28101: ARRAY
28102: PUSH
28103: LD_VAR 0 2
28107: ARRAY
28108: PUSH
28109: LD_INT 1
28111: ARRAY
28112: PPUSH
28113: LD_EXP 116
28117: PUSH
28118: LD_VAR 0 1
28122: ARRAY
28123: PUSH
28124: LD_VAR 0 2
28128: ARRAY
28129: PUSH
28130: LD_INT 2
28132: ARRAY
28133: PPUSH
28134: CALL_OW 458
28138: AND
28139: IFFALSE 28233
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28141: LD_EXP 116
28145: PUSH
28146: LD_VAR 0 1
28150: ARRAY
28151: PUSH
28152: LD_VAR 0 2
28156: ARRAY
28157: PUSH
28158: LD_INT 1
28160: ARRAY
28161: PPUSH
28162: LD_EXP 116
28166: PUSH
28167: LD_VAR 0 1
28171: ARRAY
28172: PUSH
28173: LD_VAR 0 2
28177: ARRAY
28178: PUSH
28179: LD_INT 2
28181: ARRAY
28182: PPUSH
28183: LD_VAR 0 3
28187: PPUSH
28188: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28192: LD_ADDR_EXP 116
28196: PUSH
28197: LD_EXP 116
28201: PPUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: LD_EXP 116
28211: PUSH
28212: LD_VAR 0 1
28216: ARRAY
28217: PPUSH
28218: LD_VAR 0 2
28222: PPUSH
28223: CALL_OW 3
28227: PPUSH
28228: CALL_OW 1
28232: ST_TO_ADDR
// end ; end ;
28233: GO 27984
28235: POP
28236: POP
// end ;
28237: GO 27902
28239: POP
28240: POP
// end ;
28241: PPOPN 4
28243: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28244: LD_INT 0
28246: PPUSH
28247: PPUSH
// result := false ;
28248: LD_ADDR_VAR 0 4
28252: PUSH
28253: LD_INT 0
28255: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28256: LD_VAR 0 1
28260: PPUSH
28261: CALL_OW 264
28265: PUSH
28266: LD_EXP 39
28270: EQUAL
28271: NOT
28272: IFFALSE 28276
// exit ;
28274: GO 28516
// index := GetElementIndex ( minersList , unit ) ;
28276: LD_ADDR_VAR 0 5
28280: PUSH
28281: LD_EXP 115
28285: PPUSH
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL 34460 0 2
28295: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28296: LD_EXP 116
28300: PUSH
28301: LD_VAR 0 5
28305: ARRAY
28306: PUSH
28307: LD_EXP 117
28311: GREATEREQUAL
28312: IFFALSE 28316
// exit ;
28314: GO 28516
// ComMoveXY ( unit , x , y ) ;
28316: LD_VAR 0 1
28320: PPUSH
28321: LD_VAR 0 2
28325: PPUSH
28326: LD_VAR 0 3
28330: PPUSH
28331: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28335: LD_INT 35
28337: PPUSH
28338: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28342: LD_VAR 0 1
28346: PPUSH
28347: LD_VAR 0 2
28351: PPUSH
28352: LD_VAR 0 3
28356: PPUSH
28357: CALL 64827 0 3
28361: NOT
28362: PUSH
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 314
28372: AND
28373: IFFALSE 28377
// exit ;
28375: GO 28516
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_VAR 0 3
28386: PPUSH
28387: CALL_OW 428
28391: PUSH
28392: LD_VAR 0 1
28396: EQUAL
28397: PUSH
28398: LD_VAR 0 1
28402: PPUSH
28403: CALL_OW 314
28407: NOT
28408: AND
28409: IFFALSE 28335
// PlaySoundXY ( x , y , PlantMine ) ;
28411: LD_VAR 0 2
28415: PPUSH
28416: LD_VAR 0 3
28420: PPUSH
28421: LD_STRING PlantMine
28423: PPUSH
28424: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_VAR 0 3
28437: PPUSH
28438: LD_VAR 0 1
28442: PPUSH
28443: CALL_OW 255
28447: PPUSH
28448: LD_INT 0
28450: PPUSH
28451: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28455: LD_ADDR_EXP 116
28459: PUSH
28460: LD_EXP 116
28464: PPUSH
28465: LD_VAR 0 5
28469: PUSH
28470: LD_EXP 116
28474: PUSH
28475: LD_VAR 0 5
28479: ARRAY
28480: PUSH
28481: LD_INT 1
28483: PLUS
28484: PUSH
28485: EMPTY
28486: LIST
28487: LIST
28488: PPUSH
28489: LD_VAR 0 2
28493: PUSH
28494: LD_VAR 0 3
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL 34675 0 3
28507: ST_TO_ADDR
// result := true ;
28508: LD_ADDR_VAR 0 4
28512: PUSH
28513: LD_INT 1
28515: ST_TO_ADDR
// end ;
28516: LD_VAR 0 4
28520: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
28525: PPUSH
// if not unit in minersList then
28526: LD_VAR 0 1
28530: PUSH
28531: LD_EXP 115
28535: IN
28536: NOT
28537: IFFALSE 28541
// exit ;
28539: GO 28933
// index := GetElementIndex ( minersList , unit ) ;
28541: LD_ADDR_VAR 0 6
28545: PUSH
28546: LD_EXP 115
28550: PPUSH
28551: LD_VAR 0 1
28555: PPUSH
28556: CALL 34460 0 2
28560: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28561: LD_ADDR_VAR 0 5
28565: PUSH
28566: DOUBLE
28567: LD_EXP 116
28571: PUSH
28572: LD_VAR 0 6
28576: ARRAY
28577: INC
28578: ST_TO_ADDR
28579: LD_INT 1
28581: PUSH
28582: FOR_DOWNTO
28583: IFFALSE 28744
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28585: LD_EXP 116
28589: PUSH
28590: LD_VAR 0 6
28594: ARRAY
28595: PUSH
28596: LD_VAR 0 5
28600: ARRAY
28601: PUSH
28602: LD_INT 1
28604: ARRAY
28605: PUSH
28606: LD_VAR 0 2
28610: EQUAL
28611: PUSH
28612: LD_EXP 116
28616: PUSH
28617: LD_VAR 0 6
28621: ARRAY
28622: PUSH
28623: LD_VAR 0 5
28627: ARRAY
28628: PUSH
28629: LD_INT 2
28631: ARRAY
28632: PUSH
28633: LD_VAR 0 3
28637: EQUAL
28638: AND
28639: IFFALSE 28742
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28641: LD_EXP 116
28645: PUSH
28646: LD_VAR 0 6
28650: ARRAY
28651: PUSH
28652: LD_VAR 0 5
28656: ARRAY
28657: PUSH
28658: LD_INT 1
28660: ARRAY
28661: PPUSH
28662: LD_EXP 116
28666: PUSH
28667: LD_VAR 0 6
28671: ARRAY
28672: PUSH
28673: LD_VAR 0 5
28677: ARRAY
28678: PUSH
28679: LD_INT 2
28681: ARRAY
28682: PPUSH
28683: LD_VAR 0 1
28687: PPUSH
28688: CALL_OW 255
28692: PPUSH
28693: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28697: LD_ADDR_EXP 116
28701: PUSH
28702: LD_EXP 116
28706: PPUSH
28707: LD_VAR 0 6
28711: PPUSH
28712: LD_EXP 116
28716: PUSH
28717: LD_VAR 0 6
28721: ARRAY
28722: PPUSH
28723: LD_VAR 0 5
28727: PPUSH
28728: CALL_OW 3
28732: PPUSH
28733: CALL_OW 1
28737: ST_TO_ADDR
// exit ;
28738: POP
28739: POP
28740: GO 28933
// end ; end ;
28742: GO 28582
28744: POP
28745: POP
// for i := minerMinesList [ index ] downto 1 do
28746: LD_ADDR_VAR 0 5
28750: PUSH
28751: DOUBLE
28752: LD_EXP 116
28756: PUSH
28757: LD_VAR 0 6
28761: ARRAY
28762: INC
28763: ST_TO_ADDR
28764: LD_INT 1
28766: PUSH
28767: FOR_DOWNTO
28768: IFFALSE 28931
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28770: LD_EXP 116
28774: PUSH
28775: LD_VAR 0 6
28779: ARRAY
28780: PUSH
28781: LD_VAR 0 5
28785: ARRAY
28786: PUSH
28787: LD_INT 1
28789: ARRAY
28790: PPUSH
28791: LD_EXP 116
28795: PUSH
28796: LD_VAR 0 6
28800: ARRAY
28801: PUSH
28802: LD_VAR 0 5
28806: ARRAY
28807: PUSH
28808: LD_INT 2
28810: ARRAY
28811: PPUSH
28812: LD_VAR 0 2
28816: PPUSH
28817: LD_VAR 0 3
28821: PPUSH
28822: CALL_OW 298
28826: PUSH
28827: LD_INT 6
28829: LESS
28830: IFFALSE 28929
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28832: LD_EXP 116
28836: PUSH
28837: LD_VAR 0 6
28841: ARRAY
28842: PUSH
28843: LD_VAR 0 5
28847: ARRAY
28848: PUSH
28849: LD_INT 1
28851: ARRAY
28852: PPUSH
28853: LD_EXP 116
28857: PUSH
28858: LD_VAR 0 6
28862: ARRAY
28863: PUSH
28864: LD_VAR 0 5
28868: ARRAY
28869: PUSH
28870: LD_INT 2
28872: ARRAY
28873: PPUSH
28874: LD_VAR 0 1
28878: PPUSH
28879: CALL_OW 255
28883: PPUSH
28884: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28888: LD_ADDR_EXP 116
28892: PUSH
28893: LD_EXP 116
28897: PPUSH
28898: LD_VAR 0 6
28902: PPUSH
28903: LD_EXP 116
28907: PUSH
28908: LD_VAR 0 6
28912: ARRAY
28913: PPUSH
28914: LD_VAR 0 5
28918: PPUSH
28919: CALL_OW 3
28923: PPUSH
28924: CALL_OW 1
28928: ST_TO_ADDR
// end ; end ;
28929: GO 28767
28931: POP
28932: POP
// end ;
28933: LD_VAR 0 4
28937: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28938: LD_INT 0
28940: PPUSH
28941: PPUSH
28942: PPUSH
28943: PPUSH
28944: PPUSH
28945: PPUSH
28946: PPUSH
28947: PPUSH
28948: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28949: LD_VAR 0 1
28953: PPUSH
28954: CALL_OW 264
28958: PUSH
28959: LD_EXP 39
28963: EQUAL
28964: NOT
28965: PUSH
28966: LD_VAR 0 1
28970: PUSH
28971: LD_EXP 115
28975: IN
28976: NOT
28977: OR
28978: IFFALSE 28982
// exit ;
28980: GO 29304
// index := GetElementIndex ( minersList , unit ) ;
28982: LD_ADDR_VAR 0 6
28986: PUSH
28987: LD_EXP 115
28991: PPUSH
28992: LD_VAR 0 1
28996: PPUSH
28997: CALL 34460 0 2
29001: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29002: LD_ADDR_VAR 0 8
29006: PUSH
29007: LD_EXP 117
29011: PUSH
29012: LD_EXP 116
29016: PUSH
29017: LD_VAR 0 6
29021: ARRAY
29022: MINUS
29023: ST_TO_ADDR
// if not minesFreeAmount then
29024: LD_VAR 0 8
29028: NOT
29029: IFFALSE 29033
// exit ;
29031: GO 29304
// tmp := [ ] ;
29033: LD_ADDR_VAR 0 7
29037: PUSH
29038: EMPTY
29039: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29040: LD_ADDR_VAR 0 5
29044: PUSH
29045: DOUBLE
29046: LD_INT 1
29048: DEC
29049: ST_TO_ADDR
29050: LD_VAR 0 8
29054: PUSH
29055: FOR_TO
29056: IFFALSE 29251
// begin _d := rand ( 0 , 5 ) ;
29058: LD_ADDR_VAR 0 11
29062: PUSH
29063: LD_INT 0
29065: PPUSH
29066: LD_INT 5
29068: PPUSH
29069: CALL_OW 12
29073: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29074: LD_ADDR_VAR 0 12
29078: PUSH
29079: LD_INT 2
29081: PPUSH
29082: LD_INT 6
29084: PPUSH
29085: CALL_OW 12
29089: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29090: LD_ADDR_VAR 0 9
29094: PUSH
29095: LD_VAR 0 2
29099: PPUSH
29100: LD_VAR 0 11
29104: PPUSH
29105: LD_VAR 0 12
29109: PPUSH
29110: CALL_OW 272
29114: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29115: LD_ADDR_VAR 0 10
29119: PUSH
29120: LD_VAR 0 3
29124: PPUSH
29125: LD_VAR 0 11
29129: PPUSH
29130: LD_VAR 0 12
29134: PPUSH
29135: CALL_OW 273
29139: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29140: LD_VAR 0 9
29144: PPUSH
29145: LD_VAR 0 10
29149: PPUSH
29150: CALL_OW 488
29154: PUSH
29155: LD_VAR 0 9
29159: PUSH
29160: LD_VAR 0 10
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_VAR 0 7
29173: IN
29174: NOT
29175: AND
29176: PUSH
29177: LD_VAR 0 9
29181: PPUSH
29182: LD_VAR 0 10
29186: PPUSH
29187: CALL_OW 458
29191: NOT
29192: AND
29193: IFFALSE 29235
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29195: LD_ADDR_VAR 0 7
29199: PUSH
29200: LD_VAR 0 7
29204: PPUSH
29205: LD_VAR 0 7
29209: PUSH
29210: LD_INT 1
29212: PLUS
29213: PPUSH
29214: LD_VAR 0 9
29218: PUSH
29219: LD_VAR 0 10
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 1
29232: ST_TO_ADDR
29233: GO 29249
// i := i - 1 ;
29235: LD_ADDR_VAR 0 5
29239: PUSH
29240: LD_VAR 0 5
29244: PUSH
29245: LD_INT 1
29247: MINUS
29248: ST_TO_ADDR
// end ;
29249: GO 29055
29251: POP
29252: POP
// for i in tmp do
29253: LD_ADDR_VAR 0 5
29257: PUSH
29258: LD_VAR 0 7
29262: PUSH
29263: FOR_IN
29264: IFFALSE 29302
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_VAR 0 5
29275: PUSH
29276: LD_INT 1
29278: ARRAY
29279: PPUSH
29280: LD_VAR 0 5
29284: PUSH
29285: LD_INT 2
29287: ARRAY
29288: PPUSH
29289: CALL 28244 0 3
29293: NOT
29294: IFFALSE 29300
// exit ;
29296: POP
29297: POP
29298: GO 29304
29300: GO 29263
29302: POP
29303: POP
// end ;
29304: LD_VAR 0 4
29308: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29309: LD_INT 0
29311: PPUSH
29312: PPUSH
29313: PPUSH
29314: PPUSH
29315: PPUSH
29316: PPUSH
29317: PPUSH
// if not GetClass ( unit ) = class_sniper then
29318: LD_VAR 0 1
29322: PPUSH
29323: CALL_OW 257
29327: PUSH
29328: LD_INT 5
29330: EQUAL
29331: NOT
29332: IFFALSE 29336
// exit ;
29334: GO 29724
// dist := 8 ;
29336: LD_ADDR_VAR 0 5
29340: PUSH
29341: LD_INT 8
29343: ST_TO_ADDR
// viewRange := 12 ;
29344: LD_ADDR_VAR 0 7
29348: PUSH
29349: LD_INT 12
29351: ST_TO_ADDR
// side := GetSide ( unit ) ;
29352: LD_ADDR_VAR 0 6
29356: PUSH
29357: LD_VAR 0 1
29361: PPUSH
29362: CALL_OW 255
29366: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29367: LD_INT 61
29369: PPUSH
29370: LD_VAR 0 6
29374: PPUSH
29375: CALL_OW 321
29379: PUSH
29380: LD_INT 2
29382: EQUAL
29383: IFFALSE 29393
// viewRange := 16 ;
29385: LD_ADDR_VAR 0 7
29389: PUSH
29390: LD_INT 16
29392: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29393: LD_VAR 0 1
29397: PPUSH
29398: LD_VAR 0 2
29402: PPUSH
29403: LD_VAR 0 3
29407: PPUSH
29408: CALL_OW 297
29412: PUSH
29413: LD_VAR 0 5
29417: GREATER
29418: IFFALSE 29497
// begin ComMoveXY ( unit , x , y ) ;
29420: LD_VAR 0 1
29424: PPUSH
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_VAR 0 3
29434: PPUSH
29435: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29439: LD_INT 35
29441: PPUSH
29442: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29446: LD_VAR 0 1
29450: PPUSH
29451: LD_VAR 0 2
29455: PPUSH
29456: LD_VAR 0 3
29460: PPUSH
29461: CALL 64827 0 3
29465: NOT
29466: IFFALSE 29470
// exit ;
29468: GO 29724
// until GetDistUnitXY ( unit , x , y ) < dist ;
29470: LD_VAR 0 1
29474: PPUSH
29475: LD_VAR 0 2
29479: PPUSH
29480: LD_VAR 0 3
29484: PPUSH
29485: CALL_OW 297
29489: PUSH
29490: LD_VAR 0 5
29494: LESS
29495: IFFALSE 29439
// end ; ComTurnXY ( unit , x , y ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: LD_VAR 0 2
29506: PPUSH
29507: LD_VAR 0 3
29511: PPUSH
29512: CALL_OW 118
// wait ( 5 ) ;
29516: LD_INT 5
29518: PPUSH
29519: CALL_OW 67
// _d := GetDir ( unit ) ;
29523: LD_ADDR_VAR 0 10
29527: PUSH
29528: LD_VAR 0 1
29532: PPUSH
29533: CALL_OW 254
29537: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29538: LD_ADDR_VAR 0 8
29542: PUSH
29543: LD_VAR 0 1
29547: PPUSH
29548: CALL_OW 250
29552: PPUSH
29553: LD_VAR 0 10
29557: PPUSH
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 272
29567: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29568: LD_ADDR_VAR 0 9
29572: PUSH
29573: LD_VAR 0 1
29577: PPUSH
29578: CALL_OW 251
29582: PPUSH
29583: LD_VAR 0 10
29587: PPUSH
29588: LD_VAR 0 5
29592: PPUSH
29593: CALL_OW 273
29597: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29598: LD_VAR 0 8
29602: PPUSH
29603: LD_VAR 0 9
29607: PPUSH
29608: CALL_OW 488
29612: NOT
29613: IFFALSE 29617
// exit ;
29615: GO 29724
// ComAnimCustom ( unit , 1 ) ;
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_INT 1
29624: PPUSH
29625: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29629: LD_VAR 0 8
29633: PPUSH
29634: LD_VAR 0 9
29638: PPUSH
29639: LD_VAR 0 6
29643: PPUSH
29644: LD_VAR 0 7
29648: PPUSH
29649: CALL_OW 330
// repeat wait ( 1 ) ;
29653: LD_INT 1
29655: PPUSH
29656: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL_OW 316
29669: PUSH
29670: LD_VAR 0 1
29674: PPUSH
29675: CALL_OW 314
29679: OR
29680: PUSH
29681: LD_VAR 0 1
29685: PPUSH
29686: CALL_OW 302
29690: NOT
29691: OR
29692: PUSH
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 301
29702: OR
29703: IFFALSE 29653
// RemoveSeeing ( _x , _y , side ) ;
29705: LD_VAR 0 8
29709: PPUSH
29710: LD_VAR 0 9
29714: PPUSH
29715: LD_VAR 0 6
29719: PPUSH
29720: CALL_OW 331
// end ; end_of_file
29724: LD_VAR 0 4
29728: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29729: LD_INT 0
29731: PPUSH
29732: PPUSH
// if exist_mode then
29733: LD_VAR 0 2
29737: IFFALSE 29762
// unit := CreateCharacter ( prefix & ident ) else
29739: LD_ADDR_VAR 0 5
29743: PUSH
29744: LD_VAR 0 3
29748: PUSH
29749: LD_VAR 0 1
29753: STR
29754: PPUSH
29755: CALL_OW 34
29759: ST_TO_ADDR
29760: GO 29777
// unit := NewCharacter ( ident ) ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 25
29776: ST_TO_ADDR
// result := unit ;
29777: LD_ADDR_VAR 0 4
29781: PUSH
29782: LD_VAR 0 5
29786: ST_TO_ADDR
// end ;
29787: LD_VAR 0 4
29791: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29792: LD_INT 0
29794: PPUSH
29795: PPUSH
// if not side or not nation then
29796: LD_VAR 0 1
29800: NOT
29801: PUSH
29802: LD_VAR 0 2
29806: NOT
29807: OR
29808: IFFALSE 29812
// exit ;
29810: GO 30576
// case nation of nation_american :
29812: LD_VAR 0 2
29816: PUSH
29817: LD_INT 1
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 30039
29825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29826: LD_ADDR_VAR 0 4
29830: PUSH
29831: LD_INT 35
29833: PUSH
29834: LD_INT 45
29836: PUSH
29837: LD_INT 46
29839: PUSH
29840: LD_INT 47
29842: PUSH
29843: LD_INT 82
29845: PUSH
29846: LD_INT 83
29848: PUSH
29849: LD_INT 84
29851: PUSH
29852: LD_INT 85
29854: PUSH
29855: LD_INT 86
29857: PUSH
29858: LD_INT 1
29860: PUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 6
29866: PUSH
29867: LD_INT 15
29869: PUSH
29870: LD_INT 16
29872: PUSH
29873: LD_INT 7
29875: PUSH
29876: LD_INT 12
29878: PUSH
29879: LD_INT 13
29881: PUSH
29882: LD_INT 10
29884: PUSH
29885: LD_INT 14
29887: PUSH
29888: LD_INT 20
29890: PUSH
29891: LD_INT 21
29893: PUSH
29894: LD_INT 22
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 32
29902: PUSH
29903: LD_INT 27
29905: PUSH
29906: LD_INT 36
29908: PUSH
29909: LD_INT 69
29911: PUSH
29912: LD_INT 39
29914: PUSH
29915: LD_INT 34
29917: PUSH
29918: LD_INT 40
29920: PUSH
29921: LD_INT 48
29923: PUSH
29924: LD_INT 49
29926: PUSH
29927: LD_INT 50
29929: PUSH
29930: LD_INT 51
29932: PUSH
29933: LD_INT 52
29935: PUSH
29936: LD_INT 53
29938: PUSH
29939: LD_INT 54
29941: PUSH
29942: LD_INT 55
29944: PUSH
29945: LD_INT 56
29947: PUSH
29948: LD_INT 57
29950: PUSH
29951: LD_INT 58
29953: PUSH
29954: LD_INT 59
29956: PUSH
29957: LD_INT 60
29959: PUSH
29960: LD_INT 61
29962: PUSH
29963: LD_INT 62
29965: PUSH
29966: LD_INT 80
29968: PUSH
29969: LD_INT 82
29971: PUSH
29972: LD_INT 83
29974: PUSH
29975: LD_INT 84
29977: PUSH
29978: LD_INT 85
29980: PUSH
29981: LD_INT 86
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: ST_TO_ADDR
30037: GO 30500
30039: LD_INT 2
30041: DOUBLE
30042: EQUAL
30043: IFTRUE 30047
30045: GO 30269
30047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
30048: LD_ADDR_VAR 0 4
30052: PUSH
30053: LD_INT 35
30055: PUSH
30056: LD_INT 45
30058: PUSH
30059: LD_INT 46
30061: PUSH
30062: LD_INT 47
30064: PUSH
30065: LD_INT 82
30067: PUSH
30068: LD_INT 83
30070: PUSH
30071: LD_INT 84
30073: PUSH
30074: LD_INT 85
30076: PUSH
30077: LD_INT 87
30079: PUSH
30080: LD_INT 70
30082: PUSH
30083: LD_INT 1
30085: PUSH
30086: LD_INT 11
30088: PUSH
30089: LD_INT 3
30091: PUSH
30092: LD_INT 4
30094: PUSH
30095: LD_INT 5
30097: PUSH
30098: LD_INT 6
30100: PUSH
30101: LD_INT 15
30103: PUSH
30104: LD_INT 18
30106: PUSH
30107: LD_INT 7
30109: PUSH
30110: LD_INT 17
30112: PUSH
30113: LD_INT 8
30115: PUSH
30116: LD_INT 20
30118: PUSH
30119: LD_INT 21
30121: PUSH
30122: LD_INT 22
30124: PUSH
30125: LD_INT 72
30127: PUSH
30128: LD_INT 26
30130: PUSH
30131: LD_INT 69
30133: PUSH
30134: LD_INT 39
30136: PUSH
30137: LD_INT 40
30139: PUSH
30140: LD_INT 41
30142: PUSH
30143: LD_INT 42
30145: PUSH
30146: LD_INT 43
30148: PUSH
30149: LD_INT 48
30151: PUSH
30152: LD_INT 49
30154: PUSH
30155: LD_INT 50
30157: PUSH
30158: LD_INT 51
30160: PUSH
30161: LD_INT 52
30163: PUSH
30164: LD_INT 53
30166: PUSH
30167: LD_INT 54
30169: PUSH
30170: LD_INT 55
30172: PUSH
30173: LD_INT 56
30175: PUSH
30176: LD_INT 60
30178: PUSH
30179: LD_INT 61
30181: PUSH
30182: LD_INT 62
30184: PUSH
30185: LD_INT 66
30187: PUSH
30188: LD_INT 67
30190: PUSH
30191: LD_INT 68
30193: PUSH
30194: LD_INT 81
30196: PUSH
30197: LD_INT 82
30199: PUSH
30200: LD_INT 83
30202: PUSH
30203: LD_INT 84
30205: PUSH
30206: LD_INT 85
30208: PUSH
30209: LD_INT 87
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: LIST
30254: LIST
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
30267: GO 30500
30269: LD_INT 3
30271: DOUBLE
30272: EQUAL
30273: IFTRUE 30277
30275: GO 30499
30277: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30278: LD_ADDR_VAR 0 4
30282: PUSH
30283: LD_INT 46
30285: PUSH
30286: LD_INT 47
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 2
30294: PUSH
30295: LD_INT 82
30297: PUSH
30298: LD_INT 83
30300: PUSH
30301: LD_INT 84
30303: PUSH
30304: LD_INT 85
30306: PUSH
30307: LD_INT 86
30309: PUSH
30310: LD_INT 11
30312: PUSH
30313: LD_INT 9
30315: PUSH
30316: LD_INT 20
30318: PUSH
30319: LD_INT 19
30321: PUSH
30322: LD_INT 21
30324: PUSH
30325: LD_INT 24
30327: PUSH
30328: LD_INT 22
30330: PUSH
30331: LD_INT 25
30333: PUSH
30334: LD_INT 28
30336: PUSH
30337: LD_INT 29
30339: PUSH
30340: LD_INT 30
30342: PUSH
30343: LD_INT 31
30345: PUSH
30346: LD_INT 37
30348: PUSH
30349: LD_INT 38
30351: PUSH
30352: LD_INT 32
30354: PUSH
30355: LD_INT 27
30357: PUSH
30358: LD_INT 33
30360: PUSH
30361: LD_INT 69
30363: PUSH
30364: LD_INT 39
30366: PUSH
30367: LD_INT 34
30369: PUSH
30370: LD_INT 40
30372: PUSH
30373: LD_INT 71
30375: PUSH
30376: LD_INT 23
30378: PUSH
30379: LD_INT 44
30381: PUSH
30382: LD_INT 48
30384: PUSH
30385: LD_INT 49
30387: PUSH
30388: LD_INT 50
30390: PUSH
30391: LD_INT 51
30393: PUSH
30394: LD_INT 52
30396: PUSH
30397: LD_INT 53
30399: PUSH
30400: LD_INT 54
30402: PUSH
30403: LD_INT 55
30405: PUSH
30406: LD_INT 56
30408: PUSH
30409: LD_INT 57
30411: PUSH
30412: LD_INT 58
30414: PUSH
30415: LD_INT 59
30417: PUSH
30418: LD_INT 63
30420: PUSH
30421: LD_INT 64
30423: PUSH
30424: LD_INT 65
30426: PUSH
30427: LD_INT 82
30429: PUSH
30430: LD_INT 83
30432: PUSH
30433: LD_INT 84
30435: PUSH
30436: LD_INT 85
30438: PUSH
30439: LD_INT 86
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: LIST
30491: LIST
30492: LIST
30493: LIST
30494: LIST
30495: LIST
30496: ST_TO_ADDR
30497: GO 30500
30499: POP
// if state > - 1 and state < 3 then
30500: LD_VAR 0 3
30504: PUSH
30505: LD_INT 1
30507: NEG
30508: GREATER
30509: PUSH
30510: LD_VAR 0 3
30514: PUSH
30515: LD_INT 3
30517: LESS
30518: AND
30519: IFFALSE 30576
// for i in result do
30521: LD_ADDR_VAR 0 5
30525: PUSH
30526: LD_VAR 0 4
30530: PUSH
30531: FOR_IN
30532: IFFALSE 30574
// if GetTech ( i , side ) <> state then
30534: LD_VAR 0 5
30538: PPUSH
30539: LD_VAR 0 1
30543: PPUSH
30544: CALL_OW 321
30548: PUSH
30549: LD_VAR 0 3
30553: NONEQUAL
30554: IFFALSE 30572
// result := result diff i ;
30556: LD_ADDR_VAR 0 4
30560: PUSH
30561: LD_VAR 0 4
30565: PUSH
30566: LD_VAR 0 5
30570: DIFF
30571: ST_TO_ADDR
30572: GO 30531
30574: POP
30575: POP
// end ;
30576: LD_VAR 0 4
30580: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30581: LD_INT 0
30583: PPUSH
30584: PPUSH
30585: PPUSH
// result := true ;
30586: LD_ADDR_VAR 0 3
30590: PUSH
30591: LD_INT 1
30593: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30594: LD_ADDR_VAR 0 5
30598: PUSH
30599: LD_VAR 0 2
30603: PPUSH
30604: CALL_OW 480
30608: ST_TO_ADDR
// if not tmp then
30609: LD_VAR 0 5
30613: NOT
30614: IFFALSE 30618
// exit ;
30616: GO 30667
// for i in tmp do
30618: LD_ADDR_VAR 0 4
30622: PUSH
30623: LD_VAR 0 5
30627: PUSH
30628: FOR_IN
30629: IFFALSE 30665
// if GetTech ( i , side ) <> state_researched then
30631: LD_VAR 0 4
30635: PPUSH
30636: LD_VAR 0 1
30640: PPUSH
30641: CALL_OW 321
30645: PUSH
30646: LD_INT 2
30648: NONEQUAL
30649: IFFALSE 30663
// begin result := false ;
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: LD_INT 0
30658: ST_TO_ADDR
// exit ;
30659: POP
30660: POP
30661: GO 30667
// end ;
30663: GO 30628
30665: POP
30666: POP
// end ;
30667: LD_VAR 0 3
30671: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30672: LD_INT 0
30674: PPUSH
30675: PPUSH
30676: PPUSH
30677: PPUSH
30678: PPUSH
30679: PPUSH
30680: PPUSH
30681: PPUSH
30682: PPUSH
30683: PPUSH
30684: PPUSH
30685: PPUSH
30686: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30687: LD_VAR 0 1
30691: NOT
30692: PUSH
30693: LD_VAR 0 1
30697: PPUSH
30698: CALL_OW 257
30702: PUSH
30703: LD_INT 9
30705: NONEQUAL
30706: OR
30707: IFFALSE 30711
// exit ;
30709: GO 31284
// side := GetSide ( unit ) ;
30711: LD_ADDR_VAR 0 9
30715: PUSH
30716: LD_VAR 0 1
30720: PPUSH
30721: CALL_OW 255
30725: ST_TO_ADDR
// tech_space := tech_spacanom ;
30726: LD_ADDR_VAR 0 12
30730: PUSH
30731: LD_INT 29
30733: ST_TO_ADDR
// tech_time := tech_taurad ;
30734: LD_ADDR_VAR 0 13
30738: PUSH
30739: LD_INT 28
30741: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30742: LD_ADDR_VAR 0 11
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 310
30756: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30757: LD_VAR 0 11
30761: PPUSH
30762: CALL_OW 247
30766: PUSH
30767: LD_INT 2
30769: EQUAL
30770: IFFALSE 30774
// exit ;
30772: GO 31284
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30774: LD_ADDR_VAR 0 8
30778: PUSH
30779: LD_INT 81
30781: PUSH
30782: LD_VAR 0 9
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: LD_INT 21
30796: PUSH
30797: LD_INT 3
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PPUSH
30812: CALL_OW 69
30816: ST_TO_ADDR
// if not tmp then
30817: LD_VAR 0 8
30821: NOT
30822: IFFALSE 30826
// exit ;
30824: GO 31284
// if in_unit then
30826: LD_VAR 0 11
30830: IFFALSE 30854
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30832: LD_ADDR_VAR 0 10
30836: PUSH
30837: LD_VAR 0 8
30841: PPUSH
30842: LD_VAR 0 11
30846: PPUSH
30847: CALL_OW 74
30851: ST_TO_ADDR
30852: GO 30874
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30854: LD_ADDR_VAR 0 10
30858: PUSH
30859: LD_VAR 0 8
30863: PPUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 74
30873: ST_TO_ADDR
// if not enemy then
30874: LD_VAR 0 10
30878: NOT
30879: IFFALSE 30883
// exit ;
30881: GO 31284
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30883: LD_VAR 0 11
30887: PUSH
30888: LD_VAR 0 11
30892: PPUSH
30893: LD_VAR 0 10
30897: PPUSH
30898: CALL_OW 296
30902: PUSH
30903: LD_INT 13
30905: GREATER
30906: AND
30907: PUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: LD_VAR 0 10
30917: PPUSH
30918: CALL_OW 296
30922: PUSH
30923: LD_INT 12
30925: GREATER
30926: OR
30927: IFFALSE 30931
// exit ;
30929: GO 31284
// missile := [ 1 ] ;
30931: LD_ADDR_VAR 0 14
30935: PUSH
30936: LD_INT 1
30938: PUSH
30939: EMPTY
30940: LIST
30941: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30942: LD_VAR 0 9
30946: PPUSH
30947: LD_VAR 0 12
30951: PPUSH
30952: CALL_OW 325
30956: IFFALSE 30985
// missile := Insert ( missile , missile + 1 , 2 ) ;
30958: LD_ADDR_VAR 0 14
30962: PUSH
30963: LD_VAR 0 14
30967: PPUSH
30968: LD_VAR 0 14
30972: PUSH
30973: LD_INT 1
30975: PLUS
30976: PPUSH
30977: LD_INT 2
30979: PPUSH
30980: CALL_OW 2
30984: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30985: LD_VAR 0 9
30989: PPUSH
30990: LD_VAR 0 13
30994: PPUSH
30995: CALL_OW 325
30999: PUSH
31000: LD_VAR 0 10
31004: PPUSH
31005: CALL_OW 255
31009: PPUSH
31010: LD_VAR 0 13
31014: PPUSH
31015: CALL_OW 325
31019: NOT
31020: AND
31021: IFFALSE 31050
// missile := Insert ( missile , missile + 1 , 3 ) ;
31023: LD_ADDR_VAR 0 14
31027: PUSH
31028: LD_VAR 0 14
31032: PPUSH
31033: LD_VAR 0 14
31037: PUSH
31038: LD_INT 1
31040: PLUS
31041: PPUSH
31042: LD_INT 3
31044: PPUSH
31045: CALL_OW 2
31049: ST_TO_ADDR
// if missile < 2 then
31050: LD_VAR 0 14
31054: PUSH
31055: LD_INT 2
31057: LESS
31058: IFFALSE 31062
// exit ;
31060: GO 31284
// x := GetX ( enemy ) ;
31062: LD_ADDR_VAR 0 4
31066: PUSH
31067: LD_VAR 0 10
31071: PPUSH
31072: CALL_OW 250
31076: ST_TO_ADDR
// y := GetY ( enemy ) ;
31077: LD_ADDR_VAR 0 5
31081: PUSH
31082: LD_VAR 0 10
31086: PPUSH
31087: CALL_OW 251
31091: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31092: LD_ADDR_VAR 0 6
31096: PUSH
31097: LD_VAR 0 4
31101: PUSH
31102: LD_INT 1
31104: NEG
31105: PPUSH
31106: LD_INT 1
31108: PPUSH
31109: CALL_OW 12
31113: PLUS
31114: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31115: LD_ADDR_VAR 0 7
31119: PUSH
31120: LD_VAR 0 5
31124: PUSH
31125: LD_INT 1
31127: NEG
31128: PPUSH
31129: LD_INT 1
31131: PPUSH
31132: CALL_OW 12
31136: PLUS
31137: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31138: LD_VAR 0 6
31142: PPUSH
31143: LD_VAR 0 7
31147: PPUSH
31148: CALL_OW 488
31152: NOT
31153: IFFALSE 31175
// begin _x := x ;
31155: LD_ADDR_VAR 0 6
31159: PUSH
31160: LD_VAR 0 4
31164: ST_TO_ADDR
// _y := y ;
31165: LD_ADDR_VAR 0 7
31169: PUSH
31170: LD_VAR 0 5
31174: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31175: LD_ADDR_VAR 0 3
31179: PUSH
31180: LD_INT 1
31182: PPUSH
31183: LD_VAR 0 14
31187: PPUSH
31188: CALL_OW 12
31192: ST_TO_ADDR
// case i of 1 :
31193: LD_VAR 0 3
31197: PUSH
31198: LD_INT 1
31200: DOUBLE
31201: EQUAL
31202: IFTRUE 31206
31204: GO 31223
31206: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31207: LD_VAR 0 1
31211: PPUSH
31212: LD_VAR 0 10
31216: PPUSH
31217: CALL_OW 115
31221: GO 31284
31223: LD_INT 2
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31253
31231: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31232: LD_VAR 0 1
31236: PPUSH
31237: LD_VAR 0 6
31241: PPUSH
31242: LD_VAR 0 7
31246: PPUSH
31247: CALL_OW 153
31251: GO 31284
31253: LD_INT 3
31255: DOUBLE
31256: EQUAL
31257: IFTRUE 31261
31259: GO 31283
31261: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31262: LD_VAR 0 1
31266: PPUSH
31267: LD_VAR 0 6
31271: PPUSH
31272: LD_VAR 0 7
31276: PPUSH
31277: CALL_OW 154
31281: GO 31284
31283: POP
// end ;
31284: LD_VAR 0 2
31288: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31289: LD_INT 0
31291: PPUSH
31292: PPUSH
31293: PPUSH
31294: PPUSH
31295: PPUSH
31296: PPUSH
// if not unit or not building then
31297: LD_VAR 0 1
31301: NOT
31302: PUSH
31303: LD_VAR 0 2
31307: NOT
31308: OR
31309: IFFALSE 31313
// exit ;
31311: GO 31471
// x := GetX ( building ) ;
31313: LD_ADDR_VAR 0 5
31317: PUSH
31318: LD_VAR 0 2
31322: PPUSH
31323: CALL_OW 250
31327: ST_TO_ADDR
// y := GetY ( building ) ;
31328: LD_ADDR_VAR 0 6
31332: PUSH
31333: LD_VAR 0 2
31337: PPUSH
31338: CALL_OW 251
31342: ST_TO_ADDR
// for i = 0 to 5 do
31343: LD_ADDR_VAR 0 4
31347: PUSH
31348: DOUBLE
31349: LD_INT 0
31351: DEC
31352: ST_TO_ADDR
31353: LD_INT 5
31355: PUSH
31356: FOR_TO
31357: IFFALSE 31469
// begin _x := ShiftX ( x , i , 3 ) ;
31359: LD_ADDR_VAR 0 7
31363: PUSH
31364: LD_VAR 0 5
31368: PPUSH
31369: LD_VAR 0 4
31373: PPUSH
31374: LD_INT 3
31376: PPUSH
31377: CALL_OW 272
31381: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31382: LD_ADDR_VAR 0 8
31386: PUSH
31387: LD_VAR 0 6
31391: PPUSH
31392: LD_VAR 0 4
31396: PPUSH
31397: LD_INT 3
31399: PPUSH
31400: CALL_OW 273
31404: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31405: LD_VAR 0 7
31409: PPUSH
31410: LD_VAR 0 8
31414: PPUSH
31415: CALL_OW 488
31419: NOT
31420: IFFALSE 31424
// continue ;
31422: GO 31356
// if HexInfo ( _x , _y ) = 0 then
31424: LD_VAR 0 7
31428: PPUSH
31429: LD_VAR 0 8
31433: PPUSH
31434: CALL_OW 428
31438: PUSH
31439: LD_INT 0
31441: EQUAL
31442: IFFALSE 31467
// begin ComMoveXY ( unit , _x , _y ) ;
31444: LD_VAR 0 1
31448: PPUSH
31449: LD_VAR 0 7
31453: PPUSH
31454: LD_VAR 0 8
31458: PPUSH
31459: CALL_OW 111
// exit ;
31463: POP
31464: POP
31465: GO 31471
// end ; end ;
31467: GO 31356
31469: POP
31470: POP
// end ;
31471: LD_VAR 0 3
31475: RET
// export function ScanBase ( side , base_area ) ; begin
31476: LD_INT 0
31478: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31479: LD_ADDR_VAR 0 3
31483: PUSH
31484: LD_VAR 0 2
31488: PPUSH
31489: LD_INT 81
31491: PUSH
31492: LD_VAR 0 1
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PPUSH
31501: CALL_OW 70
31505: ST_TO_ADDR
// end ;
31506: LD_VAR 0 3
31510: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31511: LD_INT 0
31513: PPUSH
31514: PPUSH
31515: PPUSH
31516: PPUSH
// result := false ;
31517: LD_ADDR_VAR 0 2
31521: PUSH
31522: LD_INT 0
31524: ST_TO_ADDR
// side := GetSide ( unit ) ;
31525: LD_ADDR_VAR 0 3
31529: PUSH
31530: LD_VAR 0 1
31534: PPUSH
31535: CALL_OW 255
31539: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31540: LD_ADDR_VAR 0 4
31544: PUSH
31545: LD_VAR 0 1
31549: PPUSH
31550: CALL_OW 248
31554: ST_TO_ADDR
// case nat of 1 :
31555: LD_VAR 0 4
31559: PUSH
31560: LD_INT 1
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31579
31568: POP
// tech := tech_lassight ; 2 :
31569: LD_ADDR_VAR 0 5
31573: PUSH
31574: LD_INT 12
31576: ST_TO_ADDR
31577: GO 31618
31579: LD_INT 2
31581: DOUBLE
31582: EQUAL
31583: IFTRUE 31587
31585: GO 31598
31587: POP
// tech := tech_mortar ; 3 :
31588: LD_ADDR_VAR 0 5
31592: PUSH
31593: LD_INT 41
31595: ST_TO_ADDR
31596: GO 31618
31598: LD_INT 3
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31617
31606: POP
// tech := tech_bazooka ; end ;
31607: LD_ADDR_VAR 0 5
31611: PUSH
31612: LD_INT 44
31614: ST_TO_ADDR
31615: GO 31618
31617: POP
// if Researched ( side , tech ) then
31618: LD_VAR 0 3
31622: PPUSH
31623: LD_VAR 0 5
31627: PPUSH
31628: CALL_OW 325
31632: IFFALSE 31659
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31634: LD_ADDR_VAR 0 2
31638: PUSH
31639: LD_INT 5
31641: PUSH
31642: LD_INT 8
31644: PUSH
31645: LD_INT 9
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: PUSH
31653: LD_VAR 0 4
31657: ARRAY
31658: ST_TO_ADDR
// end ;
31659: LD_VAR 0 2
31663: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31664: LD_INT 0
31666: PPUSH
31667: PPUSH
31668: PPUSH
// if not mines then
31669: LD_VAR 0 2
31673: NOT
31674: IFFALSE 31678
// exit ;
31676: GO 31822
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31678: LD_ADDR_VAR 0 5
31682: PUSH
31683: LD_INT 81
31685: PUSH
31686: LD_VAR 0 1
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: PUSH
31695: LD_INT 3
31697: PUSH
31698: LD_INT 21
31700: PUSH
31701: LD_INT 3
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL_OW 69
31720: ST_TO_ADDR
// for i in mines do
31721: LD_ADDR_VAR 0 4
31725: PUSH
31726: LD_VAR 0 2
31730: PUSH
31731: FOR_IN
31732: IFFALSE 31820
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31734: LD_VAR 0 4
31738: PUSH
31739: LD_INT 1
31741: ARRAY
31742: PPUSH
31743: LD_VAR 0 4
31747: PUSH
31748: LD_INT 2
31750: ARRAY
31751: PPUSH
31752: CALL_OW 458
31756: NOT
31757: IFFALSE 31761
// continue ;
31759: GO 31731
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31761: LD_VAR 0 4
31765: PUSH
31766: LD_INT 1
31768: ARRAY
31769: PPUSH
31770: LD_VAR 0 4
31774: PUSH
31775: LD_INT 2
31777: ARRAY
31778: PPUSH
31779: CALL_OW 428
31783: PUSH
31784: LD_VAR 0 5
31788: IN
31789: IFFALSE 31818
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31791: LD_VAR 0 4
31795: PUSH
31796: LD_INT 1
31798: ARRAY
31799: PPUSH
31800: LD_VAR 0 4
31804: PUSH
31805: LD_INT 2
31807: ARRAY
31808: PPUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL_OW 456
// end ;
31818: GO 31731
31820: POP
31821: POP
// end ;
31822: LD_VAR 0 3
31826: RET
// export function Count ( array ) ; var i ; begin
31827: LD_INT 0
31829: PPUSH
31830: PPUSH
// result := 0 ;
31831: LD_ADDR_VAR 0 2
31835: PUSH
31836: LD_INT 0
31838: ST_TO_ADDR
// for i in array do
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_VAR 0 1
31848: PUSH
31849: FOR_IN
31850: IFFALSE 31874
// if i then
31852: LD_VAR 0 3
31856: IFFALSE 31872
// result := result + 1 ;
31858: LD_ADDR_VAR 0 2
31862: PUSH
31863: LD_VAR 0 2
31867: PUSH
31868: LD_INT 1
31870: PLUS
31871: ST_TO_ADDR
31872: GO 31849
31874: POP
31875: POP
// end ;
31876: LD_VAR 0 2
31880: RET
// export function IsEmpty ( building ) ; begin
31881: LD_INT 0
31883: PPUSH
// if not building then
31884: LD_VAR 0 1
31888: NOT
31889: IFFALSE 31893
// exit ;
31891: GO 31936
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31893: LD_ADDR_VAR 0 2
31897: PUSH
31898: LD_VAR 0 1
31902: PUSH
31903: LD_INT 22
31905: PUSH
31906: LD_VAR 0 1
31910: PPUSH
31911: CALL_OW 255
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 58
31922: PUSH
31923: EMPTY
31924: LIST
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PPUSH
31930: CALL_OW 69
31934: IN
31935: ST_TO_ADDR
// end ;
31936: LD_VAR 0 2
31940: RET
// export function IsNotFull ( building ) ; begin
31941: LD_INT 0
31943: PPUSH
// if not building then
31944: LD_VAR 0 1
31948: NOT
31949: IFFALSE 31953
// exit ;
31951: GO 31972
// result := UnitsInside ( building ) < 6 ;
31953: LD_ADDR_VAR 0 2
31957: PUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: CALL_OW 313
31967: PUSH
31968: LD_INT 6
31970: LESS
31971: ST_TO_ADDR
// end ;
31972: LD_VAR 0 2
31976: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31977: LD_INT 0
31979: PPUSH
31980: PPUSH
31981: PPUSH
31982: PPUSH
// tmp := [ ] ;
31983: LD_ADDR_VAR 0 3
31987: PUSH
31988: EMPTY
31989: ST_TO_ADDR
// list := [ ] ;
31990: LD_ADDR_VAR 0 5
31994: PUSH
31995: EMPTY
31996: ST_TO_ADDR
// for i = 16 to 25 do
31997: LD_ADDR_VAR 0 4
32001: PUSH
32002: DOUBLE
32003: LD_INT 16
32005: DEC
32006: ST_TO_ADDR
32007: LD_INT 25
32009: PUSH
32010: FOR_TO
32011: IFFALSE 32084
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32013: LD_ADDR_VAR 0 3
32017: PUSH
32018: LD_VAR 0 3
32022: PUSH
32023: LD_INT 22
32025: PUSH
32026: LD_VAR 0 1
32030: PPUSH
32031: CALL_OW 255
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 91
32042: PUSH
32043: LD_VAR 0 1
32047: PUSH
32048: LD_INT 6
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 30
32058: PUSH
32059: LD_VAR 0 4
32063: PUSH
32064: EMPTY
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: PPUSH
32076: CALL_OW 69
32080: ADD
32081: ST_TO_ADDR
32082: GO 32010
32084: POP
32085: POP
// for i = 1 to tmp do
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: DOUBLE
32092: LD_INT 1
32094: DEC
32095: ST_TO_ADDR
32096: LD_VAR 0 3
32100: PUSH
32101: FOR_TO
32102: IFFALSE 32190
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32104: LD_ADDR_VAR 0 5
32108: PUSH
32109: LD_VAR 0 5
32113: PUSH
32114: LD_VAR 0 3
32118: PUSH
32119: LD_VAR 0 4
32123: ARRAY
32124: PPUSH
32125: CALL_OW 266
32129: PUSH
32130: LD_VAR 0 3
32134: PUSH
32135: LD_VAR 0 4
32139: ARRAY
32140: PPUSH
32141: CALL_OW 250
32145: PUSH
32146: LD_VAR 0 3
32150: PUSH
32151: LD_VAR 0 4
32155: ARRAY
32156: PPUSH
32157: CALL_OW 251
32161: PUSH
32162: LD_VAR 0 3
32166: PUSH
32167: LD_VAR 0 4
32171: ARRAY
32172: PPUSH
32173: CALL_OW 254
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: PUSH
32184: EMPTY
32185: LIST
32186: ADD
32187: ST_TO_ADDR
32188: GO 32101
32190: POP
32191: POP
// result := list ;
32192: LD_ADDR_VAR 0 2
32196: PUSH
32197: LD_VAR 0 5
32201: ST_TO_ADDR
// end ;
32202: LD_VAR 0 2
32206: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32207: LD_INT 0
32209: PPUSH
32210: PPUSH
32211: PPUSH
32212: PPUSH
32213: PPUSH
32214: PPUSH
32215: PPUSH
// if not factory then
32216: LD_VAR 0 1
32220: NOT
32221: IFFALSE 32225
// exit ;
32223: GO 32818
// if control = control_apeman then
32225: LD_VAR 0 4
32229: PUSH
32230: LD_INT 5
32232: EQUAL
32233: IFFALSE 32342
// begin tmp := UnitsInside ( factory ) ;
32235: LD_ADDR_VAR 0 8
32239: PUSH
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 313
32249: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32250: LD_VAR 0 8
32254: PPUSH
32255: LD_INT 25
32257: PUSH
32258: LD_INT 12
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: PPUSH
32265: CALL_OW 72
32269: NOT
32270: IFFALSE 32280
// control := control_manual ;
32272: LD_ADDR_VAR 0 4
32276: PUSH
32277: LD_INT 1
32279: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32280: LD_ADDR_VAR 0 8
32284: PUSH
32285: LD_VAR 0 1
32289: PPUSH
32290: CALL 31977 0 1
32294: ST_TO_ADDR
// if tmp then
32295: LD_VAR 0 8
32299: IFFALSE 32342
// begin for i in tmp do
32301: LD_ADDR_VAR 0 7
32305: PUSH
32306: LD_VAR 0 8
32310: PUSH
32311: FOR_IN
32312: IFFALSE 32340
// if i [ 1 ] = b_ext_radio then
32314: LD_VAR 0 7
32318: PUSH
32319: LD_INT 1
32321: ARRAY
32322: PUSH
32323: LD_INT 22
32325: EQUAL
32326: IFFALSE 32338
// begin control := control_remote ;
32328: LD_ADDR_VAR 0 4
32332: PUSH
32333: LD_INT 2
32335: ST_TO_ADDR
// break ;
32336: GO 32340
// end ;
32338: GO 32311
32340: POP
32341: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32342: LD_VAR 0 1
32346: PPUSH
32347: LD_VAR 0 2
32351: PPUSH
32352: LD_VAR 0 3
32356: PPUSH
32357: LD_VAR 0 4
32361: PPUSH
32362: LD_VAR 0 5
32366: PPUSH
32367: CALL_OW 448
32371: IFFALSE 32406
// begin result := [ chassis , engine , control , weapon ] ;
32373: LD_ADDR_VAR 0 6
32377: PUSH
32378: LD_VAR 0 2
32382: PUSH
32383: LD_VAR 0 3
32387: PUSH
32388: LD_VAR 0 4
32392: PUSH
32393: LD_VAR 0 5
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
// exit ;
32404: GO 32818
// end ; _chassis := AvailableChassisList ( factory ) ;
32406: LD_ADDR_VAR 0 9
32410: PUSH
32411: LD_VAR 0 1
32415: PPUSH
32416: CALL_OW 475
32420: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32421: LD_ADDR_VAR 0 11
32425: PUSH
32426: LD_VAR 0 1
32430: PPUSH
32431: CALL_OW 476
32435: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32436: LD_ADDR_VAR 0 12
32440: PUSH
32441: LD_VAR 0 1
32445: PPUSH
32446: CALL_OW 477
32450: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32451: LD_ADDR_VAR 0 10
32455: PUSH
32456: LD_VAR 0 1
32460: PPUSH
32461: CALL_OW 478
32465: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32466: LD_VAR 0 9
32470: NOT
32471: PUSH
32472: LD_VAR 0 11
32476: NOT
32477: OR
32478: PUSH
32479: LD_VAR 0 12
32483: NOT
32484: OR
32485: PUSH
32486: LD_VAR 0 10
32490: NOT
32491: OR
32492: IFFALSE 32527
// begin result := [ chassis , engine , control , weapon ] ;
32494: LD_ADDR_VAR 0 6
32498: PUSH
32499: LD_VAR 0 2
32503: PUSH
32504: LD_VAR 0 3
32508: PUSH
32509: LD_VAR 0 4
32513: PUSH
32514: LD_VAR 0 5
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: ST_TO_ADDR
// exit ;
32525: GO 32818
// end ; if not chassis in _chassis then
32527: LD_VAR 0 2
32531: PUSH
32532: LD_VAR 0 9
32536: IN
32537: NOT
32538: IFFALSE 32564
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32540: LD_ADDR_VAR 0 2
32544: PUSH
32545: LD_VAR 0 9
32549: PUSH
32550: LD_INT 1
32552: PPUSH
32553: LD_VAR 0 9
32557: PPUSH
32558: CALL_OW 12
32562: ARRAY
32563: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32564: LD_VAR 0 2
32568: PPUSH
32569: LD_VAR 0 3
32573: PPUSH
32574: CALL 32823 0 2
32578: NOT
32579: IFFALSE 32638
// repeat engine := _engine [ 1 ] ;
32581: LD_ADDR_VAR 0 3
32585: PUSH
32586: LD_VAR 0 11
32590: PUSH
32591: LD_INT 1
32593: ARRAY
32594: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32595: LD_ADDR_VAR 0 11
32599: PUSH
32600: LD_VAR 0 11
32604: PPUSH
32605: LD_INT 1
32607: PPUSH
32608: CALL_OW 3
32612: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32613: LD_VAR 0 2
32617: PPUSH
32618: LD_VAR 0 3
32622: PPUSH
32623: CALL 32823 0 2
32627: PUSH
32628: LD_VAR 0 11
32632: PUSH
32633: EMPTY
32634: EQUAL
32635: OR
32636: IFFALSE 32581
// if not control in _control then
32638: LD_VAR 0 4
32642: PUSH
32643: LD_VAR 0 12
32647: IN
32648: NOT
32649: IFFALSE 32675
// control := _control [ rand ( 1 , _control ) ] ;
32651: LD_ADDR_VAR 0 4
32655: PUSH
32656: LD_VAR 0 12
32660: PUSH
32661: LD_INT 1
32663: PPUSH
32664: LD_VAR 0 12
32668: PPUSH
32669: CALL_OW 12
32673: ARRAY
32674: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32675: LD_VAR 0 2
32679: PPUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: CALL 33043 0 2
32689: NOT
32690: IFFALSE 32749
// repeat weapon := _weapon [ 1 ] ;
32692: LD_ADDR_VAR 0 5
32696: PUSH
32697: LD_VAR 0 10
32701: PUSH
32702: LD_INT 1
32704: ARRAY
32705: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32706: LD_ADDR_VAR 0 10
32710: PUSH
32711: LD_VAR 0 10
32715: PPUSH
32716: LD_INT 1
32718: PPUSH
32719: CALL_OW 3
32723: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32724: LD_VAR 0 2
32728: PPUSH
32729: LD_VAR 0 5
32733: PPUSH
32734: CALL 33043 0 2
32738: PUSH
32739: LD_VAR 0 10
32743: PUSH
32744: EMPTY
32745: EQUAL
32746: OR
32747: IFFALSE 32692
// result := [ ] ;
32749: LD_ADDR_VAR 0 6
32753: PUSH
32754: EMPTY
32755: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32756: LD_VAR 0 1
32760: PPUSH
32761: LD_VAR 0 2
32765: PPUSH
32766: LD_VAR 0 3
32770: PPUSH
32771: LD_VAR 0 4
32775: PPUSH
32776: LD_VAR 0 5
32780: PPUSH
32781: CALL_OW 448
32785: IFFALSE 32818
// result := [ chassis , engine , control , weapon ] ;
32787: LD_ADDR_VAR 0 6
32791: PUSH
32792: LD_VAR 0 2
32796: PUSH
32797: LD_VAR 0 3
32801: PUSH
32802: LD_VAR 0 4
32806: PUSH
32807: LD_VAR 0 5
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: ST_TO_ADDR
// end ;
32818: LD_VAR 0 6
32822: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32823: LD_INT 0
32825: PPUSH
// if not chassis or not engine then
32826: LD_VAR 0 1
32830: NOT
32831: PUSH
32832: LD_VAR 0 2
32836: NOT
32837: OR
32838: IFFALSE 32842
// exit ;
32840: GO 33038
// case engine of engine_solar :
32842: LD_VAR 0 2
32846: PUSH
32847: LD_INT 2
32849: DOUBLE
32850: EQUAL
32851: IFTRUE 32855
32853: GO 32893
32855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_INT 11
32863: PUSH
32864: LD_INT 12
32866: PUSH
32867: LD_INT 13
32869: PUSH
32870: LD_INT 14
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: ST_TO_ADDR
32891: GO 33022
32893: LD_INT 1
32895: DOUBLE
32896: EQUAL
32897: IFTRUE 32901
32899: GO 32963
32901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32902: LD_ADDR_VAR 0 3
32906: PUSH
32907: LD_INT 11
32909: PUSH
32910: LD_INT 12
32912: PUSH
32913: LD_INT 13
32915: PUSH
32916: LD_INT 14
32918: PUSH
32919: LD_INT 1
32921: PUSH
32922: LD_INT 2
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: LD_INT 4
32930: PUSH
32931: LD_INT 5
32933: PUSH
32934: LD_INT 21
32936: PUSH
32937: LD_INT 23
32939: PUSH
32940: LD_INT 22
32942: PUSH
32943: LD_INT 24
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: ST_TO_ADDR
32961: GO 33022
32963: LD_INT 3
32965: DOUBLE
32966: EQUAL
32967: IFTRUE 32971
32969: GO 33021
32971: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32972: LD_ADDR_VAR 0 3
32976: PUSH
32977: LD_INT 13
32979: PUSH
32980: LD_INT 14
32982: PUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 3
32988: PUSH
32989: LD_INT 4
32991: PUSH
32992: LD_INT 5
32994: PUSH
32995: LD_INT 21
32997: PUSH
32998: LD_INT 22
33000: PUSH
33001: LD_INT 23
33003: PUSH
33004: LD_INT 24
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
33019: GO 33022
33021: POP
// result := ( chassis in result ) ;
33022: LD_ADDR_VAR 0 3
33026: PUSH
33027: LD_VAR 0 1
33031: PUSH
33032: LD_VAR 0 3
33036: IN
33037: ST_TO_ADDR
// end ;
33038: LD_VAR 0 3
33042: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33043: LD_INT 0
33045: PPUSH
// if not chassis or not weapon then
33046: LD_VAR 0 1
33050: NOT
33051: PUSH
33052: LD_VAR 0 2
33056: NOT
33057: OR
33058: IFFALSE 33062
// exit ;
33060: GO 34088
// case weapon of us_machine_gun :
33062: LD_VAR 0 2
33066: PUSH
33067: LD_INT 2
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33105
33075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33076: LD_ADDR_VAR 0 3
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: LD_INT 3
33089: PUSH
33090: LD_INT 4
33092: PUSH
33093: LD_INT 5
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: ST_TO_ADDR
33103: GO 34072
33105: LD_INT 3
33107: DOUBLE
33108: EQUAL
33109: IFTRUE 33113
33111: GO 33143
33113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33114: LD_ADDR_VAR 0 3
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: LD_INT 2
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: LD_INT 4
33130: PUSH
33131: LD_INT 5
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: ST_TO_ADDR
33141: GO 34072
33143: LD_INT 11
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33181
33151: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33152: LD_ADDR_VAR 0 3
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: LD_INT 2
33162: PUSH
33163: LD_INT 3
33165: PUSH
33166: LD_INT 4
33168: PUSH
33169: LD_INT 5
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: ST_TO_ADDR
33179: GO 34072
33181: LD_INT 4
33183: DOUBLE
33184: EQUAL
33185: IFTRUE 33189
33187: GO 33215
33189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33190: LD_ADDR_VAR 0 3
33194: PUSH
33195: LD_INT 2
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: LD_INT 4
33203: PUSH
33204: LD_INT 5
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: LIST
33212: ST_TO_ADDR
33213: GO 34072
33215: LD_INT 5
33217: DOUBLE
33218: EQUAL
33219: IFTRUE 33223
33221: GO 33249
33223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33224: LD_ADDR_VAR 0 3
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: LD_INT 4
33237: PUSH
33238: LD_INT 5
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: ST_TO_ADDR
33247: GO 34072
33249: LD_INT 9
33251: DOUBLE
33252: EQUAL
33253: IFTRUE 33257
33255: GO 33283
33257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33258: LD_ADDR_VAR 0 3
33262: PUSH
33263: LD_INT 2
33265: PUSH
33266: LD_INT 3
33268: PUSH
33269: LD_INT 4
33271: PUSH
33272: LD_INT 5
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: ST_TO_ADDR
33281: GO 34072
33283: LD_INT 7
33285: DOUBLE
33286: EQUAL
33287: IFTRUE 33291
33289: GO 33317
33291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33292: LD_ADDR_VAR 0 3
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: LD_INT 3
33302: PUSH
33303: LD_INT 4
33305: PUSH
33306: LD_INT 5
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: ST_TO_ADDR
33315: GO 34072
33317: LD_INT 12
33319: DOUBLE
33320: EQUAL
33321: IFTRUE 33325
33323: GO 33351
33325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_INT 2
33333: PUSH
33334: LD_INT 3
33336: PUSH
33337: LD_INT 4
33339: PUSH
33340: LD_INT 5
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: ST_TO_ADDR
33349: GO 34072
33351: LD_INT 13
33353: DOUBLE
33354: EQUAL
33355: IFTRUE 33359
33357: GO 33385
33359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33360: LD_ADDR_VAR 0 3
33364: PUSH
33365: LD_INT 2
33367: PUSH
33368: LD_INT 3
33370: PUSH
33371: LD_INT 4
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: ST_TO_ADDR
33383: GO 34072
33385: LD_INT 14
33387: DOUBLE
33388: EQUAL
33389: IFTRUE 33393
33391: GO 33411
33393: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33394: LD_ADDR_VAR 0 3
33398: PUSH
33399: LD_INT 4
33401: PUSH
33402: LD_INT 5
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: ST_TO_ADDR
33409: GO 34072
33411: LD_INT 6
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33419
33417: GO 33437
33419: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 4
33427: PUSH
33428: LD_INT 5
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: ST_TO_ADDR
33435: GO 34072
33437: LD_INT 10
33439: DOUBLE
33440: EQUAL
33441: IFTRUE 33445
33443: GO 33463
33445: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33446: LD_ADDR_VAR 0 3
33450: PUSH
33451: LD_INT 4
33453: PUSH
33454: LD_INT 5
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: ST_TO_ADDR
33461: GO 34072
33463: LD_INT 22
33465: DOUBLE
33466: EQUAL
33467: IFTRUE 33471
33469: GO 33497
33471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33472: LD_ADDR_VAR 0 3
33476: PUSH
33477: LD_INT 11
33479: PUSH
33480: LD_INT 12
33482: PUSH
33483: LD_INT 13
33485: PUSH
33486: LD_INT 14
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: ST_TO_ADDR
33495: GO 34072
33497: LD_INT 23
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33531
33505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33506: LD_ADDR_VAR 0 3
33510: PUSH
33511: LD_INT 11
33513: PUSH
33514: LD_INT 12
33516: PUSH
33517: LD_INT 13
33519: PUSH
33520: LD_INT 14
33522: PUSH
33523: EMPTY
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
33529: GO 34072
33531: LD_INT 24
33533: DOUBLE
33534: EQUAL
33535: IFTRUE 33539
33537: GO 33565
33539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_INT 11
33547: PUSH
33548: LD_INT 12
33550: PUSH
33551: LD_INT 13
33553: PUSH
33554: LD_INT 14
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: ST_TO_ADDR
33563: GO 34072
33565: LD_INT 30
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33599
33573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_INT 11
33581: PUSH
33582: LD_INT 12
33584: PUSH
33585: LD_INT 13
33587: PUSH
33588: LD_INT 14
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: ST_TO_ADDR
33597: GO 34072
33599: LD_INT 25
33601: DOUBLE
33602: EQUAL
33603: IFTRUE 33607
33605: GO 33625
33607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33608: LD_ADDR_VAR 0 3
33612: PUSH
33613: LD_INT 13
33615: PUSH
33616: LD_INT 14
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: ST_TO_ADDR
33623: GO 34072
33625: LD_INT 27
33627: DOUBLE
33628: EQUAL
33629: IFTRUE 33633
33631: GO 33651
33633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33634: LD_ADDR_VAR 0 3
33638: PUSH
33639: LD_INT 13
33641: PUSH
33642: LD_INT 14
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: ST_TO_ADDR
33649: GO 34072
33651: LD_INT 28
33653: DOUBLE
33654: EQUAL
33655: IFTRUE 33659
33657: GO 33677
33659: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33660: LD_ADDR_VAR 0 3
33664: PUSH
33665: LD_INT 13
33667: PUSH
33668: LD_INT 14
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: ST_TO_ADDR
33675: GO 34072
33677: LD_INT 29
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33703
33685: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33686: LD_ADDR_VAR 0 3
33690: PUSH
33691: LD_INT 13
33693: PUSH
33694: LD_INT 14
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: ST_TO_ADDR
33701: GO 34072
33703: LD_INT 31
33705: DOUBLE
33706: EQUAL
33707: IFTRUE 33711
33709: GO 33729
33711: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33712: LD_ADDR_VAR 0 3
33716: PUSH
33717: LD_INT 13
33719: PUSH
33720: LD_INT 14
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: ST_TO_ADDR
33727: GO 34072
33729: LD_INT 26
33731: DOUBLE
33732: EQUAL
33733: IFTRUE 33737
33735: GO 33755
33737: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33738: LD_ADDR_VAR 0 3
33742: PUSH
33743: LD_INT 13
33745: PUSH
33746: LD_INT 14
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: ST_TO_ADDR
33753: GO 34072
33755: LD_INT 42
33757: DOUBLE
33758: EQUAL
33759: IFTRUE 33763
33761: GO 33789
33763: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33764: LD_ADDR_VAR 0 3
33768: PUSH
33769: LD_INT 21
33771: PUSH
33772: LD_INT 22
33774: PUSH
33775: LD_INT 23
33777: PUSH
33778: LD_INT 24
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: ST_TO_ADDR
33787: GO 34072
33789: LD_INT 43
33791: DOUBLE
33792: EQUAL
33793: IFTRUE 33797
33795: GO 33823
33797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33798: LD_ADDR_VAR 0 3
33802: PUSH
33803: LD_INT 21
33805: PUSH
33806: LD_INT 22
33808: PUSH
33809: LD_INT 23
33811: PUSH
33812: LD_INT 24
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: ST_TO_ADDR
33821: GO 34072
33823: LD_INT 44
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33857
33831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33832: LD_ADDR_VAR 0 3
33836: PUSH
33837: LD_INT 21
33839: PUSH
33840: LD_INT 22
33842: PUSH
33843: LD_INT 23
33845: PUSH
33846: LD_INT 24
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
33855: GO 34072
33857: LD_INT 45
33859: DOUBLE
33860: EQUAL
33861: IFTRUE 33865
33863: GO 33891
33865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33866: LD_ADDR_VAR 0 3
33870: PUSH
33871: LD_INT 21
33873: PUSH
33874: LD_INT 22
33876: PUSH
33877: LD_INT 23
33879: PUSH
33880: LD_INT 24
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
33889: GO 34072
33891: LD_INT 49
33893: DOUBLE
33894: EQUAL
33895: IFTRUE 33899
33897: GO 33925
33899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33900: LD_ADDR_VAR 0 3
33904: PUSH
33905: LD_INT 21
33907: PUSH
33908: LD_INT 22
33910: PUSH
33911: LD_INT 23
33913: PUSH
33914: LD_INT 24
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: ST_TO_ADDR
33923: GO 34072
33925: LD_INT 51
33927: DOUBLE
33928: EQUAL
33929: IFTRUE 33933
33931: GO 33959
33933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33934: LD_ADDR_VAR 0 3
33938: PUSH
33939: LD_INT 21
33941: PUSH
33942: LD_INT 22
33944: PUSH
33945: LD_INT 23
33947: PUSH
33948: LD_INT 24
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: ST_TO_ADDR
33957: GO 34072
33959: LD_INT 52
33961: DOUBLE
33962: EQUAL
33963: IFTRUE 33967
33965: GO 33993
33967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33968: LD_ADDR_VAR 0 3
33972: PUSH
33973: LD_INT 21
33975: PUSH
33976: LD_INT 22
33978: PUSH
33979: LD_INT 23
33981: PUSH
33982: LD_INT 24
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: ST_TO_ADDR
33991: GO 34072
33993: LD_INT 53
33995: DOUBLE
33996: EQUAL
33997: IFTRUE 34001
33999: GO 34019
34001: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34002: LD_ADDR_VAR 0 3
34006: PUSH
34007: LD_INT 23
34009: PUSH
34010: LD_INT 24
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: ST_TO_ADDR
34017: GO 34072
34019: LD_INT 46
34021: DOUBLE
34022: EQUAL
34023: IFTRUE 34027
34025: GO 34045
34027: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_INT 23
34035: PUSH
34036: LD_INT 24
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: ST_TO_ADDR
34043: GO 34072
34045: LD_INT 47
34047: DOUBLE
34048: EQUAL
34049: IFTRUE 34053
34051: GO 34071
34053: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34054: LD_ADDR_VAR 0 3
34058: PUSH
34059: LD_INT 23
34061: PUSH
34062: LD_INT 24
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: ST_TO_ADDR
34069: GO 34072
34071: POP
// result := ( chassis in result ) ;
34072: LD_ADDR_VAR 0 3
34076: PUSH
34077: LD_VAR 0 1
34081: PUSH
34082: LD_VAR 0 3
34086: IN
34087: ST_TO_ADDR
// end ;
34088: LD_VAR 0 3
34092: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34093: LD_INT 0
34095: PPUSH
34096: PPUSH
34097: PPUSH
34098: PPUSH
34099: PPUSH
34100: PPUSH
34101: PPUSH
// result := array ;
34102: LD_ADDR_VAR 0 5
34106: PUSH
34107: LD_VAR 0 1
34111: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34112: LD_VAR 0 1
34116: NOT
34117: PUSH
34118: LD_VAR 0 2
34122: NOT
34123: OR
34124: PUSH
34125: LD_VAR 0 3
34129: NOT
34130: OR
34131: PUSH
34132: LD_VAR 0 2
34136: PUSH
34137: LD_VAR 0 1
34141: GREATER
34142: OR
34143: PUSH
34144: LD_VAR 0 3
34148: PUSH
34149: LD_VAR 0 1
34153: GREATER
34154: OR
34155: IFFALSE 34159
// exit ;
34157: GO 34455
// if direction then
34159: LD_VAR 0 4
34163: IFFALSE 34227
// begin d := 1 ;
34165: LD_ADDR_VAR 0 9
34169: PUSH
34170: LD_INT 1
34172: ST_TO_ADDR
// if i_from > i_to then
34173: LD_VAR 0 2
34177: PUSH
34178: LD_VAR 0 3
34182: GREATER
34183: IFFALSE 34209
// length := ( array - i_from ) + i_to else
34185: LD_ADDR_VAR 0 11
34189: PUSH
34190: LD_VAR 0 1
34194: PUSH
34195: LD_VAR 0 2
34199: MINUS
34200: PUSH
34201: LD_VAR 0 3
34205: PLUS
34206: ST_TO_ADDR
34207: GO 34225
// length := i_to - i_from ;
34209: LD_ADDR_VAR 0 11
34213: PUSH
34214: LD_VAR 0 3
34218: PUSH
34219: LD_VAR 0 2
34223: MINUS
34224: ST_TO_ADDR
// end else
34225: GO 34288
// begin d := - 1 ;
34227: LD_ADDR_VAR 0 9
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: ST_TO_ADDR
// if i_from > i_to then
34236: LD_VAR 0 2
34240: PUSH
34241: LD_VAR 0 3
34245: GREATER
34246: IFFALSE 34266
// length := i_from - i_to else
34248: LD_ADDR_VAR 0 11
34252: PUSH
34253: LD_VAR 0 2
34257: PUSH
34258: LD_VAR 0 3
34262: MINUS
34263: ST_TO_ADDR
34264: GO 34288
// length := ( array - i_to ) + i_from ;
34266: LD_ADDR_VAR 0 11
34270: PUSH
34271: LD_VAR 0 1
34275: PUSH
34276: LD_VAR 0 3
34280: MINUS
34281: PUSH
34282: LD_VAR 0 2
34286: PLUS
34287: ST_TO_ADDR
// end ; if not length then
34288: LD_VAR 0 11
34292: NOT
34293: IFFALSE 34297
// exit ;
34295: GO 34455
// tmp := array ;
34297: LD_ADDR_VAR 0 10
34301: PUSH
34302: LD_VAR 0 1
34306: ST_TO_ADDR
// for i = 1 to length do
34307: LD_ADDR_VAR 0 6
34311: PUSH
34312: DOUBLE
34313: LD_INT 1
34315: DEC
34316: ST_TO_ADDR
34317: LD_VAR 0 11
34321: PUSH
34322: FOR_TO
34323: IFFALSE 34443
// begin for j = 1 to array do
34325: LD_ADDR_VAR 0 7
34329: PUSH
34330: DOUBLE
34331: LD_INT 1
34333: DEC
34334: ST_TO_ADDR
34335: LD_VAR 0 1
34339: PUSH
34340: FOR_TO
34341: IFFALSE 34429
// begin k := j + d ;
34343: LD_ADDR_VAR 0 8
34347: PUSH
34348: LD_VAR 0 7
34352: PUSH
34353: LD_VAR 0 9
34357: PLUS
34358: ST_TO_ADDR
// if k > array then
34359: LD_VAR 0 8
34363: PUSH
34364: LD_VAR 0 1
34368: GREATER
34369: IFFALSE 34379
// k := 1 ;
34371: LD_ADDR_VAR 0 8
34375: PUSH
34376: LD_INT 1
34378: ST_TO_ADDR
// if not k then
34379: LD_VAR 0 8
34383: NOT
34384: IFFALSE 34396
// k := array ;
34386: LD_ADDR_VAR 0 8
34390: PUSH
34391: LD_VAR 0 1
34395: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34396: LD_ADDR_VAR 0 10
34400: PUSH
34401: LD_VAR 0 10
34405: PPUSH
34406: LD_VAR 0 8
34410: PPUSH
34411: LD_VAR 0 1
34415: PUSH
34416: LD_VAR 0 7
34420: ARRAY
34421: PPUSH
34422: CALL_OW 1
34426: ST_TO_ADDR
// end ;
34427: GO 34340
34429: POP
34430: POP
// array := tmp ;
34431: LD_ADDR_VAR 0 1
34435: PUSH
34436: LD_VAR 0 10
34440: ST_TO_ADDR
// end ;
34441: GO 34322
34443: POP
34444: POP
// result := array ;
34445: LD_ADDR_VAR 0 5
34449: PUSH
34450: LD_VAR 0 1
34454: ST_TO_ADDR
// end ;
34455: LD_VAR 0 5
34459: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34460: LD_INT 0
34462: PPUSH
34463: PPUSH
// result := 0 ;
34464: LD_ADDR_VAR 0 3
34468: PUSH
34469: LD_INT 0
34471: ST_TO_ADDR
// if not array or not value in array then
34472: LD_VAR 0 1
34476: NOT
34477: PUSH
34478: LD_VAR 0 2
34482: PUSH
34483: LD_VAR 0 1
34487: IN
34488: NOT
34489: OR
34490: IFFALSE 34494
// exit ;
34492: GO 34548
// for i = 1 to array do
34494: LD_ADDR_VAR 0 4
34498: PUSH
34499: DOUBLE
34500: LD_INT 1
34502: DEC
34503: ST_TO_ADDR
34504: LD_VAR 0 1
34508: PUSH
34509: FOR_TO
34510: IFFALSE 34546
// if value = array [ i ] then
34512: LD_VAR 0 2
34516: PUSH
34517: LD_VAR 0 1
34521: PUSH
34522: LD_VAR 0 4
34526: ARRAY
34527: EQUAL
34528: IFFALSE 34544
// begin result := i ;
34530: LD_ADDR_VAR 0 3
34534: PUSH
34535: LD_VAR 0 4
34539: ST_TO_ADDR
// exit ;
34540: POP
34541: POP
34542: GO 34548
// end ;
34544: GO 34509
34546: POP
34547: POP
// end ;
34548: LD_VAR 0 3
34552: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34553: LD_INT 0
34555: PPUSH
// vc_chassis := chassis ;
34556: LD_ADDR_OWVAR 37
34560: PUSH
34561: LD_VAR 0 1
34565: ST_TO_ADDR
// vc_engine := engine ;
34566: LD_ADDR_OWVAR 39
34570: PUSH
34571: LD_VAR 0 2
34575: ST_TO_ADDR
// vc_control := control ;
34576: LD_ADDR_OWVAR 38
34580: PUSH
34581: LD_VAR 0 3
34585: ST_TO_ADDR
// vc_weapon := weapon ;
34586: LD_ADDR_OWVAR 40
34590: PUSH
34591: LD_VAR 0 4
34595: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34596: LD_ADDR_OWVAR 41
34600: PUSH
34601: LD_VAR 0 5
34605: ST_TO_ADDR
// end ;
34606: LD_VAR 0 6
34610: RET
// export function WantPlant ( unit ) ; var task ; begin
34611: LD_INT 0
34613: PPUSH
34614: PPUSH
// result := false ;
34615: LD_ADDR_VAR 0 2
34619: PUSH
34620: LD_INT 0
34622: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34623: LD_ADDR_VAR 0 3
34627: PUSH
34628: LD_VAR 0 1
34632: PPUSH
34633: CALL_OW 437
34637: ST_TO_ADDR
// if task then
34638: LD_VAR 0 3
34642: IFFALSE 34670
// if task [ 1 ] [ 1 ] = p then
34644: LD_VAR 0 3
34648: PUSH
34649: LD_INT 1
34651: ARRAY
34652: PUSH
34653: LD_INT 1
34655: ARRAY
34656: PUSH
34657: LD_STRING p
34659: EQUAL
34660: IFFALSE 34670
// result := true ;
34662: LD_ADDR_VAR 0 2
34666: PUSH
34667: LD_INT 1
34669: ST_TO_ADDR
// end ;
34670: LD_VAR 0 2
34674: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34675: LD_INT 0
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
// if pos < 1 then
34681: LD_VAR 0 2
34685: PUSH
34686: LD_INT 1
34688: LESS
34689: IFFALSE 34693
// exit ;
34691: GO 34996
// if pos = 1 then
34693: LD_VAR 0 2
34697: PUSH
34698: LD_INT 1
34700: EQUAL
34701: IFFALSE 34734
// result := Replace ( arr , pos [ 1 ] , value ) else
34703: LD_ADDR_VAR 0 4
34707: PUSH
34708: LD_VAR 0 1
34712: PPUSH
34713: LD_VAR 0 2
34717: PUSH
34718: LD_INT 1
34720: ARRAY
34721: PPUSH
34722: LD_VAR 0 3
34726: PPUSH
34727: CALL_OW 1
34731: ST_TO_ADDR
34732: GO 34996
// begin tmp := arr ;
34734: LD_ADDR_VAR 0 6
34738: PUSH
34739: LD_VAR 0 1
34743: ST_TO_ADDR
// s_arr := [ tmp ] ;
34744: LD_ADDR_VAR 0 7
34748: PUSH
34749: LD_VAR 0 6
34753: PUSH
34754: EMPTY
34755: LIST
34756: ST_TO_ADDR
// for i = 1 to pos - 1 do
34757: LD_ADDR_VAR 0 5
34761: PUSH
34762: DOUBLE
34763: LD_INT 1
34765: DEC
34766: ST_TO_ADDR
34767: LD_VAR 0 2
34771: PUSH
34772: LD_INT 1
34774: MINUS
34775: PUSH
34776: FOR_TO
34777: IFFALSE 34822
// begin tmp := tmp [ pos [ i ] ] ;
34779: LD_ADDR_VAR 0 6
34783: PUSH
34784: LD_VAR 0 6
34788: PUSH
34789: LD_VAR 0 2
34793: PUSH
34794: LD_VAR 0 5
34798: ARRAY
34799: ARRAY
34800: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34801: LD_ADDR_VAR 0 7
34805: PUSH
34806: LD_VAR 0 7
34810: PUSH
34811: LD_VAR 0 6
34815: PUSH
34816: EMPTY
34817: LIST
34818: ADD
34819: ST_TO_ADDR
// end ;
34820: GO 34776
34822: POP
34823: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34824: LD_ADDR_VAR 0 6
34828: PUSH
34829: LD_VAR 0 6
34833: PPUSH
34834: LD_VAR 0 2
34838: PUSH
34839: LD_VAR 0 2
34843: ARRAY
34844: PPUSH
34845: LD_VAR 0 3
34849: PPUSH
34850: CALL_OW 1
34854: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34855: LD_ADDR_VAR 0 7
34859: PUSH
34860: LD_VAR 0 7
34864: PPUSH
34865: LD_VAR 0 7
34869: PPUSH
34870: LD_VAR 0 6
34874: PPUSH
34875: CALL_OW 1
34879: ST_TO_ADDR
// for i = s_arr downto 2 do
34880: LD_ADDR_VAR 0 5
34884: PUSH
34885: DOUBLE
34886: LD_VAR 0 7
34890: INC
34891: ST_TO_ADDR
34892: LD_INT 2
34894: PUSH
34895: FOR_DOWNTO
34896: IFFALSE 34980
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34898: LD_ADDR_VAR 0 6
34902: PUSH
34903: LD_VAR 0 7
34907: PUSH
34908: LD_VAR 0 5
34912: PUSH
34913: LD_INT 1
34915: MINUS
34916: ARRAY
34917: PPUSH
34918: LD_VAR 0 2
34922: PUSH
34923: LD_VAR 0 5
34927: PUSH
34928: LD_INT 1
34930: MINUS
34931: ARRAY
34932: PPUSH
34933: LD_VAR 0 7
34937: PUSH
34938: LD_VAR 0 5
34942: ARRAY
34943: PPUSH
34944: CALL_OW 1
34948: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34949: LD_ADDR_VAR 0 7
34953: PUSH
34954: LD_VAR 0 7
34958: PPUSH
34959: LD_VAR 0 5
34963: PUSH
34964: LD_INT 1
34966: MINUS
34967: PPUSH
34968: LD_VAR 0 6
34972: PPUSH
34973: CALL_OW 1
34977: ST_TO_ADDR
// end ;
34978: GO 34895
34980: POP
34981: POP
// result := s_arr [ 1 ] ;
34982: LD_ADDR_VAR 0 4
34986: PUSH
34987: LD_VAR 0 7
34991: PUSH
34992: LD_INT 1
34994: ARRAY
34995: ST_TO_ADDR
// end ; end ;
34996: LD_VAR 0 4
35000: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35001: LD_INT 0
35003: PPUSH
35004: PPUSH
// if not list then
35005: LD_VAR 0 1
35009: NOT
35010: IFFALSE 35014
// exit ;
35012: GO 35105
// i := list [ pos1 ] ;
35014: LD_ADDR_VAR 0 5
35018: PUSH
35019: LD_VAR 0 1
35023: PUSH
35024: LD_VAR 0 2
35028: ARRAY
35029: ST_TO_ADDR
// if not i then
35030: LD_VAR 0 5
35034: NOT
35035: IFFALSE 35039
// exit ;
35037: GO 35105
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35039: LD_ADDR_VAR 0 1
35043: PUSH
35044: LD_VAR 0 1
35048: PPUSH
35049: LD_VAR 0 2
35053: PPUSH
35054: LD_VAR 0 1
35058: PUSH
35059: LD_VAR 0 3
35063: ARRAY
35064: PPUSH
35065: CALL_OW 1
35069: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35070: LD_ADDR_VAR 0 1
35074: PUSH
35075: LD_VAR 0 1
35079: PPUSH
35080: LD_VAR 0 3
35084: PPUSH
35085: LD_VAR 0 5
35089: PPUSH
35090: CALL_OW 1
35094: ST_TO_ADDR
// result := list ;
35095: LD_ADDR_VAR 0 4
35099: PUSH
35100: LD_VAR 0 1
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 4
35109: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35110: LD_INT 0
35112: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35113: LD_ADDR_VAR 0 5
35117: PUSH
35118: LD_VAR 0 1
35122: PPUSH
35123: CALL_OW 250
35127: PPUSH
35128: LD_VAR 0 1
35132: PPUSH
35133: CALL_OW 251
35137: PPUSH
35138: LD_VAR 0 2
35142: PPUSH
35143: LD_VAR 0 3
35147: PPUSH
35148: LD_VAR 0 4
35152: PPUSH
35153: CALL 35163 0 5
35157: ST_TO_ADDR
// end ;
35158: LD_VAR 0 5
35162: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35163: LD_INT 0
35165: PPUSH
35166: PPUSH
35167: PPUSH
35168: PPUSH
// if not list then
35169: LD_VAR 0 3
35173: NOT
35174: IFFALSE 35178
// exit ;
35176: GO 35566
// result := [ ] ;
35178: LD_ADDR_VAR 0 6
35182: PUSH
35183: EMPTY
35184: ST_TO_ADDR
// for i in list do
35185: LD_ADDR_VAR 0 7
35189: PUSH
35190: LD_VAR 0 3
35194: PUSH
35195: FOR_IN
35196: IFFALSE 35398
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35198: LD_ADDR_VAR 0 9
35202: PUSH
35203: LD_VAR 0 7
35207: PPUSH
35208: LD_VAR 0 1
35212: PPUSH
35213: LD_VAR 0 2
35217: PPUSH
35218: CALL_OW 297
35222: ST_TO_ADDR
// if not result then
35223: LD_VAR 0 6
35227: NOT
35228: IFFALSE 35254
// result := [ [ i , tmp ] ] else
35230: LD_ADDR_VAR 0 6
35234: PUSH
35235: LD_VAR 0 7
35239: PUSH
35240: LD_VAR 0 9
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: EMPTY
35250: LIST
35251: ST_TO_ADDR
35252: GO 35396
// begin if result [ result ] [ 2 ] < tmp then
35254: LD_VAR 0 6
35258: PUSH
35259: LD_VAR 0 6
35263: ARRAY
35264: PUSH
35265: LD_INT 2
35267: ARRAY
35268: PUSH
35269: LD_VAR 0 9
35273: LESS
35274: IFFALSE 35316
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35276: LD_ADDR_VAR 0 6
35280: PUSH
35281: LD_VAR 0 6
35285: PPUSH
35286: LD_VAR 0 6
35290: PUSH
35291: LD_INT 1
35293: PLUS
35294: PPUSH
35295: LD_VAR 0 7
35299: PUSH
35300: LD_VAR 0 9
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PPUSH
35309: CALL_OW 2
35313: ST_TO_ADDR
35314: GO 35396
// for j = 1 to result do
35316: LD_ADDR_VAR 0 8
35320: PUSH
35321: DOUBLE
35322: LD_INT 1
35324: DEC
35325: ST_TO_ADDR
35326: LD_VAR 0 6
35330: PUSH
35331: FOR_TO
35332: IFFALSE 35394
// begin if tmp < result [ j ] [ 2 ] then
35334: LD_VAR 0 9
35338: PUSH
35339: LD_VAR 0 6
35343: PUSH
35344: LD_VAR 0 8
35348: ARRAY
35349: PUSH
35350: LD_INT 2
35352: ARRAY
35353: LESS
35354: IFFALSE 35392
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35356: LD_ADDR_VAR 0 6
35360: PUSH
35361: LD_VAR 0 6
35365: PPUSH
35366: LD_VAR 0 8
35370: PPUSH
35371: LD_VAR 0 7
35375: PUSH
35376: LD_VAR 0 9
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PPUSH
35385: CALL_OW 2
35389: ST_TO_ADDR
// break ;
35390: GO 35394
// end ; end ;
35392: GO 35331
35394: POP
35395: POP
// end ; end ;
35396: GO 35195
35398: POP
35399: POP
// if result and not asc then
35400: LD_VAR 0 6
35404: PUSH
35405: LD_VAR 0 4
35409: NOT
35410: AND
35411: IFFALSE 35486
// begin tmp := result ;
35413: LD_ADDR_VAR 0 9
35417: PUSH
35418: LD_VAR 0 6
35422: ST_TO_ADDR
// for i = tmp downto 1 do
35423: LD_ADDR_VAR 0 7
35427: PUSH
35428: DOUBLE
35429: LD_VAR 0 9
35433: INC
35434: ST_TO_ADDR
35435: LD_INT 1
35437: PUSH
35438: FOR_DOWNTO
35439: IFFALSE 35484
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35441: LD_ADDR_VAR 0 6
35445: PUSH
35446: LD_VAR 0 6
35450: PPUSH
35451: LD_VAR 0 9
35455: PUSH
35456: LD_VAR 0 7
35460: MINUS
35461: PUSH
35462: LD_INT 1
35464: PLUS
35465: PPUSH
35466: LD_VAR 0 9
35470: PUSH
35471: LD_VAR 0 7
35475: ARRAY
35476: PPUSH
35477: CALL_OW 1
35481: ST_TO_ADDR
35482: GO 35438
35484: POP
35485: POP
// end ; tmp := [ ] ;
35486: LD_ADDR_VAR 0 9
35490: PUSH
35491: EMPTY
35492: ST_TO_ADDR
// if mode then
35493: LD_VAR 0 5
35497: IFFALSE 35566
// begin for i = 1 to result do
35499: LD_ADDR_VAR 0 7
35503: PUSH
35504: DOUBLE
35505: LD_INT 1
35507: DEC
35508: ST_TO_ADDR
35509: LD_VAR 0 6
35513: PUSH
35514: FOR_TO
35515: IFFALSE 35554
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35517: LD_ADDR_VAR 0 9
35521: PUSH
35522: LD_VAR 0 9
35526: PPUSH
35527: LD_VAR 0 7
35531: PPUSH
35532: LD_VAR 0 6
35536: PUSH
35537: LD_VAR 0 7
35541: ARRAY
35542: PUSH
35543: LD_INT 1
35545: ARRAY
35546: PPUSH
35547: CALL_OW 1
35551: ST_TO_ADDR
35552: GO 35514
35554: POP
35555: POP
// result := tmp ;
35556: LD_ADDR_VAR 0 6
35560: PUSH
35561: LD_VAR 0 9
35565: ST_TO_ADDR
// end ; end ;
35566: LD_VAR 0 6
35570: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35571: LD_INT 0
35573: PPUSH
35574: PPUSH
35575: PPUSH
35576: PPUSH
35577: PPUSH
35578: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35579: LD_ADDR_VAR 0 5
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: ST_TO_ADDR
// if not x or not y then
35601: LD_VAR 0 2
35605: NOT
35606: PUSH
35607: LD_VAR 0 3
35611: NOT
35612: OR
35613: IFFALSE 35617
// exit ;
35615: GO 37263
// if not range then
35617: LD_VAR 0 4
35621: NOT
35622: IFFALSE 35632
// range := 10 ;
35624: LD_ADDR_VAR 0 4
35628: PUSH
35629: LD_INT 10
35631: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35632: LD_ADDR_VAR 0 8
35636: PUSH
35637: LD_INT 81
35639: PUSH
35640: LD_VAR 0 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 92
35651: PUSH
35652: LD_VAR 0 2
35656: PUSH
35657: LD_VAR 0 3
35661: PUSH
35662: LD_VAR 0 4
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 3
35675: PUSH
35676: LD_INT 21
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: LIST
35694: PPUSH
35695: CALL_OW 69
35699: ST_TO_ADDR
// if not tmp then
35700: LD_VAR 0 8
35704: NOT
35705: IFFALSE 35709
// exit ;
35707: GO 37263
// for i in tmp do
35709: LD_ADDR_VAR 0 6
35713: PUSH
35714: LD_VAR 0 8
35718: PUSH
35719: FOR_IN
35720: IFFALSE 37238
// begin points := [ 0 , 0 , 0 ] ;
35722: LD_ADDR_VAR 0 9
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: LIST
35740: ST_TO_ADDR
// bpoints := 1 ;
35741: LD_ADDR_VAR 0 10
35745: PUSH
35746: LD_INT 1
35748: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35749: LD_VAR 0 6
35753: PPUSH
35754: CALL_OW 247
35758: PUSH
35759: LD_INT 1
35761: DOUBLE
35762: EQUAL
35763: IFTRUE 35767
35765: GO 36345
35767: POP
// begin if GetClass ( i ) = 1 then
35768: LD_VAR 0 6
35772: PPUSH
35773: CALL_OW 257
35777: PUSH
35778: LD_INT 1
35780: EQUAL
35781: IFFALSE 35802
// points := [ 10 , 5 , 3 ] ;
35783: LD_ADDR_VAR 0 9
35787: PUSH
35788: LD_INT 10
35790: PUSH
35791: LD_INT 5
35793: PUSH
35794: LD_INT 3
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35802: LD_VAR 0 6
35806: PPUSH
35807: CALL_OW 257
35811: PUSH
35812: LD_INT 2
35814: PUSH
35815: LD_INT 3
35817: PUSH
35818: LD_INT 4
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: LIST
35825: IN
35826: IFFALSE 35847
// points := [ 3 , 2 , 1 ] ;
35828: LD_ADDR_VAR 0 9
35832: PUSH
35833: LD_INT 3
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35847: LD_VAR 0 6
35851: PPUSH
35852: CALL_OW 257
35856: PUSH
35857: LD_INT 5
35859: EQUAL
35860: IFFALSE 35881
// points := [ 130 , 5 , 2 ] ;
35862: LD_ADDR_VAR 0 9
35866: PUSH
35867: LD_INT 130
35869: PUSH
35870: LD_INT 5
35872: PUSH
35873: LD_INT 2
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35881: LD_VAR 0 6
35885: PPUSH
35886: CALL_OW 257
35890: PUSH
35891: LD_INT 8
35893: EQUAL
35894: IFFALSE 35915
// points := [ 35 , 35 , 30 ] ;
35896: LD_ADDR_VAR 0 9
35900: PUSH
35901: LD_INT 35
35903: PUSH
35904: LD_INT 35
35906: PUSH
35907: LD_INT 30
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35915: LD_VAR 0 6
35919: PPUSH
35920: CALL_OW 257
35924: PUSH
35925: LD_INT 9
35927: EQUAL
35928: IFFALSE 35949
// points := [ 20 , 55 , 40 ] ;
35930: LD_ADDR_VAR 0 9
35934: PUSH
35935: LD_INT 20
35937: PUSH
35938: LD_INT 55
35940: PUSH
35941: LD_INT 40
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35949: LD_VAR 0 6
35953: PPUSH
35954: CALL_OW 257
35958: PUSH
35959: LD_INT 12
35961: PUSH
35962: LD_INT 16
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: IN
35969: IFFALSE 35990
// points := [ 5 , 3 , 2 ] ;
35971: LD_ADDR_VAR 0 9
35975: PUSH
35976: LD_INT 5
35978: PUSH
35979: LD_INT 3
35981: PUSH
35982: LD_INT 2
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: LIST
35989: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35990: LD_VAR 0 6
35994: PPUSH
35995: CALL_OW 257
35999: PUSH
36000: LD_INT 17
36002: EQUAL
36003: IFFALSE 36024
// points := [ 100 , 50 , 75 ] ;
36005: LD_ADDR_VAR 0 9
36009: PUSH
36010: LD_INT 100
36012: PUSH
36013: LD_INT 50
36015: PUSH
36016: LD_INT 75
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: LIST
36023: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36024: LD_VAR 0 6
36028: PPUSH
36029: CALL_OW 257
36033: PUSH
36034: LD_INT 15
36036: EQUAL
36037: IFFALSE 36058
// points := [ 10 , 5 , 3 ] ;
36039: LD_ADDR_VAR 0 9
36043: PUSH
36044: LD_INT 10
36046: PUSH
36047: LD_INT 5
36049: PUSH
36050: LD_INT 3
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: LIST
36057: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36058: LD_VAR 0 6
36062: PPUSH
36063: CALL_OW 257
36067: PUSH
36068: LD_INT 14
36070: EQUAL
36071: IFFALSE 36092
// points := [ 10 , 0 , 0 ] ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_INT 10
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: LD_INT 0
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36092: LD_VAR 0 6
36096: PPUSH
36097: CALL_OW 257
36101: PUSH
36102: LD_INT 11
36104: EQUAL
36105: IFFALSE 36126
// points := [ 30 , 10 , 5 ] ;
36107: LD_ADDR_VAR 0 9
36111: PUSH
36112: LD_INT 30
36114: PUSH
36115: LD_INT 10
36117: PUSH
36118: LD_INT 5
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36126: LD_VAR 0 1
36130: PPUSH
36131: LD_INT 5
36133: PPUSH
36134: CALL_OW 321
36138: PUSH
36139: LD_INT 2
36141: EQUAL
36142: IFFALSE 36159
// bpoints := bpoints * 1.8 ;
36144: LD_ADDR_VAR 0 10
36148: PUSH
36149: LD_VAR 0 10
36153: PUSH
36154: LD_REAL  1.80000000000000E+0000
36157: MUL
36158: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36159: LD_VAR 0 6
36163: PPUSH
36164: CALL_OW 257
36168: PUSH
36169: LD_INT 1
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 3
36177: PUSH
36178: LD_INT 4
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: IN
36187: PUSH
36188: LD_VAR 0 1
36192: PPUSH
36193: LD_INT 51
36195: PPUSH
36196: CALL_OW 321
36200: PUSH
36201: LD_INT 2
36203: EQUAL
36204: AND
36205: IFFALSE 36222
// bpoints := bpoints * 1.2 ;
36207: LD_ADDR_VAR 0 10
36211: PUSH
36212: LD_VAR 0 10
36216: PUSH
36217: LD_REAL  1.20000000000000E+0000
36220: MUL
36221: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36222: LD_VAR 0 6
36226: PPUSH
36227: CALL_OW 257
36231: PUSH
36232: LD_INT 5
36234: PUSH
36235: LD_INT 7
36237: PUSH
36238: LD_INT 9
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: LIST
36245: IN
36246: PUSH
36247: LD_VAR 0 1
36251: PPUSH
36252: LD_INT 52
36254: PPUSH
36255: CALL_OW 321
36259: PUSH
36260: LD_INT 2
36262: EQUAL
36263: AND
36264: IFFALSE 36281
// bpoints := bpoints * 1.5 ;
36266: LD_ADDR_VAR 0 10
36270: PUSH
36271: LD_VAR 0 10
36275: PUSH
36276: LD_REAL  1.50000000000000E+0000
36279: MUL
36280: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36281: LD_VAR 0 1
36285: PPUSH
36286: LD_INT 66
36288: PPUSH
36289: CALL_OW 321
36293: PUSH
36294: LD_INT 2
36296: EQUAL
36297: IFFALSE 36314
// bpoints := bpoints * 1.1 ;
36299: LD_ADDR_VAR 0 10
36303: PUSH
36304: LD_VAR 0 10
36308: PUSH
36309: LD_REAL  1.10000000000000E+0000
36312: MUL
36313: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36314: LD_ADDR_VAR 0 10
36318: PUSH
36319: LD_VAR 0 10
36323: PUSH
36324: LD_VAR 0 6
36328: PPUSH
36329: LD_INT 1
36331: PPUSH
36332: CALL_OW 259
36336: PUSH
36337: LD_REAL  1.15000000000000E+0000
36340: MUL
36341: MUL
36342: ST_TO_ADDR
// end ; unit_vehicle :
36343: GO 37167
36345: LD_INT 2
36347: DOUBLE
36348: EQUAL
36349: IFTRUE 36353
36351: GO 37155
36353: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36354: LD_VAR 0 6
36358: PPUSH
36359: CALL_OW 264
36363: PUSH
36364: LD_INT 2
36366: PUSH
36367: LD_INT 42
36369: PUSH
36370: LD_INT 24
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: LIST
36377: IN
36378: IFFALSE 36399
// points := [ 25 , 5 , 3 ] ;
36380: LD_ADDR_VAR 0 9
36384: PUSH
36385: LD_INT 25
36387: PUSH
36388: LD_INT 5
36390: PUSH
36391: LD_INT 3
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36399: LD_VAR 0 6
36403: PPUSH
36404: CALL_OW 264
36408: PUSH
36409: LD_INT 4
36411: PUSH
36412: LD_INT 43
36414: PUSH
36415: LD_INT 25
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: LIST
36422: IN
36423: IFFALSE 36444
// points := [ 40 , 15 , 5 ] ;
36425: LD_ADDR_VAR 0 9
36429: PUSH
36430: LD_INT 40
36432: PUSH
36433: LD_INT 15
36435: PUSH
36436: LD_INT 5
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36444: LD_VAR 0 6
36448: PPUSH
36449: CALL_OW 264
36453: PUSH
36454: LD_INT 3
36456: PUSH
36457: LD_INT 23
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: IN
36464: IFFALSE 36485
// points := [ 7 , 25 , 8 ] ;
36466: LD_ADDR_VAR 0 9
36470: PUSH
36471: LD_INT 7
36473: PUSH
36474: LD_INT 25
36476: PUSH
36477: LD_INT 8
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36485: LD_VAR 0 6
36489: PPUSH
36490: CALL_OW 264
36494: PUSH
36495: LD_INT 5
36497: PUSH
36498: LD_INT 27
36500: PUSH
36501: LD_INT 44
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: LIST
36508: IN
36509: IFFALSE 36530
// points := [ 14 , 50 , 16 ] ;
36511: LD_ADDR_VAR 0 9
36515: PUSH
36516: LD_INT 14
36518: PUSH
36519: LD_INT 50
36521: PUSH
36522: LD_INT 16
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36530: LD_VAR 0 6
36534: PPUSH
36535: CALL_OW 264
36539: PUSH
36540: LD_INT 6
36542: PUSH
36543: LD_INT 46
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: IN
36550: IFFALSE 36571
// points := [ 32 , 120 , 70 ] ;
36552: LD_ADDR_VAR 0 9
36556: PUSH
36557: LD_INT 32
36559: PUSH
36560: LD_INT 120
36562: PUSH
36563: LD_INT 70
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
36571: LD_VAR 0 6
36575: PPUSH
36576: CALL_OW 264
36580: PUSH
36581: LD_INT 7
36583: PUSH
36584: LD_INT 28
36586: PUSH
36587: LD_INT 45
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: LIST
36594: IN
36595: IFFALSE 36616
// points := [ 35 , 20 , 45 ] ;
36597: LD_ADDR_VAR 0 9
36601: PUSH
36602: LD_INT 35
36604: PUSH
36605: LD_INT 20
36607: PUSH
36608: LD_INT 45
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36616: LD_VAR 0 6
36620: PPUSH
36621: CALL_OW 264
36625: PUSH
36626: LD_INT 47
36628: PUSH
36629: EMPTY
36630: LIST
36631: IN
36632: IFFALSE 36653
// points := [ 67 , 45 , 75 ] ;
36634: LD_ADDR_VAR 0 9
36638: PUSH
36639: LD_INT 67
36641: PUSH
36642: LD_INT 45
36644: PUSH
36645: LD_INT 75
36647: PUSH
36648: EMPTY
36649: LIST
36650: LIST
36651: LIST
36652: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36653: LD_VAR 0 6
36657: PPUSH
36658: CALL_OW 264
36662: PUSH
36663: LD_INT 26
36665: PUSH
36666: EMPTY
36667: LIST
36668: IN
36669: IFFALSE 36690
// points := [ 120 , 30 , 80 ] ;
36671: LD_ADDR_VAR 0 9
36675: PUSH
36676: LD_INT 120
36678: PUSH
36679: LD_INT 30
36681: PUSH
36682: LD_INT 80
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36690: LD_VAR 0 6
36694: PPUSH
36695: CALL_OW 264
36699: PUSH
36700: LD_INT 22
36702: PUSH
36703: EMPTY
36704: LIST
36705: IN
36706: IFFALSE 36727
// points := [ 40 , 1 , 1 ] ;
36708: LD_ADDR_VAR 0 9
36712: PUSH
36713: LD_INT 40
36715: PUSH
36716: LD_INT 1
36718: PUSH
36719: LD_INT 1
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: LIST
36726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36727: LD_VAR 0 6
36731: PPUSH
36732: CALL_OW 264
36736: PUSH
36737: LD_INT 29
36739: PUSH
36740: EMPTY
36741: LIST
36742: IN
36743: IFFALSE 36764
// points := [ 70 , 200 , 400 ] ;
36745: LD_ADDR_VAR 0 9
36749: PUSH
36750: LD_INT 70
36752: PUSH
36753: LD_INT 200
36755: PUSH
36756: LD_INT 400
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: LIST
36763: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36764: LD_VAR 0 6
36768: PPUSH
36769: CALL_OW 264
36773: PUSH
36774: LD_INT 14
36776: PUSH
36777: LD_INT 53
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: IN
36784: IFFALSE 36805
// points := [ 40 , 10 , 20 ] ;
36786: LD_ADDR_VAR 0 9
36790: PUSH
36791: LD_INT 40
36793: PUSH
36794: LD_INT 10
36796: PUSH
36797: LD_INT 20
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36805: LD_VAR 0 6
36809: PPUSH
36810: CALL_OW 264
36814: PUSH
36815: LD_INT 9
36817: PUSH
36818: EMPTY
36819: LIST
36820: IN
36821: IFFALSE 36842
// points := [ 5 , 70 , 20 ] ;
36823: LD_ADDR_VAR 0 9
36827: PUSH
36828: LD_INT 5
36830: PUSH
36831: LD_INT 70
36833: PUSH
36834: LD_INT 20
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: LIST
36841: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36842: LD_VAR 0 6
36846: PPUSH
36847: CALL_OW 264
36851: PUSH
36852: LD_INT 10
36854: PUSH
36855: EMPTY
36856: LIST
36857: IN
36858: IFFALSE 36879
// points := [ 35 , 110 , 70 ] ;
36860: LD_ADDR_VAR 0 9
36864: PUSH
36865: LD_INT 35
36867: PUSH
36868: LD_INT 110
36870: PUSH
36871: LD_INT 70
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36879: LD_VAR 0 6
36883: PPUSH
36884: CALL_OW 265
36888: PUSH
36889: LD_INT 25
36891: EQUAL
36892: IFFALSE 36913
// points := [ 80 , 65 , 100 ] ;
36894: LD_ADDR_VAR 0 9
36898: PUSH
36899: LD_INT 80
36901: PUSH
36902: LD_INT 65
36904: PUSH
36905: LD_INT 100
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36913: LD_VAR 0 6
36917: PPUSH
36918: CALL_OW 263
36922: PUSH
36923: LD_INT 1
36925: EQUAL
36926: IFFALSE 36961
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36928: LD_ADDR_VAR 0 10
36932: PUSH
36933: LD_VAR 0 10
36937: PUSH
36938: LD_VAR 0 6
36942: PPUSH
36943: CALL_OW 311
36947: PPUSH
36948: LD_INT 3
36950: PPUSH
36951: CALL_OW 259
36955: PUSH
36956: LD_INT 4
36958: MUL
36959: MUL
36960: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36961: LD_VAR 0 6
36965: PPUSH
36966: CALL_OW 263
36970: PUSH
36971: LD_INT 2
36973: EQUAL
36974: IFFALSE 37025
// begin j := IsControledBy ( i ) ;
36976: LD_ADDR_VAR 0 7
36980: PUSH
36981: LD_VAR 0 6
36985: PPUSH
36986: CALL_OW 312
36990: ST_TO_ADDR
// if j then
36991: LD_VAR 0 7
36995: IFFALSE 37025
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36997: LD_ADDR_VAR 0 10
37001: PUSH
37002: LD_VAR 0 10
37006: PUSH
37007: LD_VAR 0 7
37011: PPUSH
37012: LD_INT 3
37014: PPUSH
37015: CALL_OW 259
37019: PUSH
37020: LD_INT 3
37022: MUL
37023: MUL
37024: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37025: LD_VAR 0 6
37029: PPUSH
37030: CALL_OW 264
37034: PUSH
37035: LD_INT 5
37037: PUSH
37038: LD_INT 6
37040: PUSH
37041: LD_INT 46
37043: PUSH
37044: LD_INT 44
37046: PUSH
37047: LD_INT 47
37049: PUSH
37050: LD_INT 45
37052: PUSH
37053: LD_INT 28
37055: PUSH
37056: LD_INT 7
37058: PUSH
37059: LD_INT 27
37061: PUSH
37062: LD_INT 29
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: IN
37077: PUSH
37078: LD_VAR 0 1
37082: PPUSH
37083: LD_INT 52
37085: PPUSH
37086: CALL_OW 321
37090: PUSH
37091: LD_INT 2
37093: EQUAL
37094: AND
37095: IFFALSE 37112
// bpoints := bpoints * 1.2 ;
37097: LD_ADDR_VAR 0 10
37101: PUSH
37102: LD_VAR 0 10
37106: PUSH
37107: LD_REAL  1.20000000000000E+0000
37110: MUL
37111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37112: LD_VAR 0 6
37116: PPUSH
37117: CALL_OW 264
37121: PUSH
37122: LD_INT 6
37124: PUSH
37125: LD_INT 46
37127: PUSH
37128: LD_INT 47
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: LIST
37135: IN
37136: IFFALSE 37153
// bpoints := bpoints * 1.2 ;
37138: LD_ADDR_VAR 0 10
37142: PUSH
37143: LD_VAR 0 10
37147: PUSH
37148: LD_REAL  1.20000000000000E+0000
37151: MUL
37152: ST_TO_ADDR
// end ; unit_building :
37153: GO 37167
37155: LD_INT 3
37157: DOUBLE
37158: EQUAL
37159: IFTRUE 37163
37161: GO 37166
37163: POP
// ; end ;
37164: GO 37167
37166: POP
// for j = 1 to 3 do
37167: LD_ADDR_VAR 0 7
37171: PUSH
37172: DOUBLE
37173: LD_INT 1
37175: DEC
37176: ST_TO_ADDR
37177: LD_INT 3
37179: PUSH
37180: FOR_TO
37181: IFFALSE 37234
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37183: LD_ADDR_VAR 0 5
37187: PUSH
37188: LD_VAR 0 5
37192: PPUSH
37193: LD_VAR 0 7
37197: PPUSH
37198: LD_VAR 0 5
37202: PUSH
37203: LD_VAR 0 7
37207: ARRAY
37208: PUSH
37209: LD_VAR 0 9
37213: PUSH
37214: LD_VAR 0 7
37218: ARRAY
37219: PUSH
37220: LD_VAR 0 10
37224: MUL
37225: PLUS
37226: PPUSH
37227: CALL_OW 1
37231: ST_TO_ADDR
37232: GO 37180
37234: POP
37235: POP
// end ;
37236: GO 35719
37238: POP
37239: POP
// result := Replace ( result , 4 , tmp ) ;
37240: LD_ADDR_VAR 0 5
37244: PUSH
37245: LD_VAR 0 5
37249: PPUSH
37250: LD_INT 4
37252: PPUSH
37253: LD_VAR 0 8
37257: PPUSH
37258: CALL_OW 1
37262: ST_TO_ADDR
// end ;
37263: LD_VAR 0 5
37267: RET
// export function DangerAtRange ( unit , range ) ; begin
37268: LD_INT 0
37270: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37271: LD_ADDR_VAR 0 3
37275: PUSH
37276: LD_VAR 0 1
37280: PPUSH
37281: CALL_OW 255
37285: PPUSH
37286: LD_VAR 0 1
37290: PPUSH
37291: CALL_OW 250
37295: PPUSH
37296: LD_VAR 0 1
37300: PPUSH
37301: CALL_OW 251
37305: PPUSH
37306: LD_VAR 0 2
37310: PPUSH
37311: CALL 35571 0 4
37315: ST_TO_ADDR
// end ;
37316: LD_VAR 0 3
37320: RET
// export function DangerInArea ( side , area ) ; begin
37321: LD_INT 0
37323: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37324: LD_ADDR_VAR 0 3
37328: PUSH
37329: LD_VAR 0 2
37333: PPUSH
37334: LD_INT 81
37336: PUSH
37337: LD_VAR 0 1
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PPUSH
37346: CALL_OW 70
37350: ST_TO_ADDR
// end ;
37351: LD_VAR 0 3
37355: RET
// export function IsExtension ( b ) ; begin
37356: LD_INT 0
37358: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37359: LD_ADDR_VAR 0 2
37363: PUSH
37364: LD_VAR 0 1
37368: PUSH
37369: LD_INT 23
37371: PUSH
37372: LD_INT 20
37374: PUSH
37375: LD_INT 22
37377: PUSH
37378: LD_INT 17
37380: PUSH
37381: LD_INT 24
37383: PUSH
37384: LD_INT 21
37386: PUSH
37387: LD_INT 19
37389: PUSH
37390: LD_INT 16
37392: PUSH
37393: LD_INT 25
37395: PUSH
37396: LD_INT 18
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: IN
37411: ST_TO_ADDR
// end ;
37412: LD_VAR 0 2
37416: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37417: LD_INT 0
37419: PPUSH
37420: PPUSH
37421: PPUSH
// result := [ ] ;
37422: LD_ADDR_VAR 0 4
37426: PUSH
37427: EMPTY
37428: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37429: LD_ADDR_VAR 0 5
37433: PUSH
37434: LD_VAR 0 2
37438: PPUSH
37439: LD_INT 21
37441: PUSH
37442: LD_INT 3
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PPUSH
37449: CALL_OW 70
37453: ST_TO_ADDR
// if not tmp then
37454: LD_VAR 0 5
37458: NOT
37459: IFFALSE 37463
// exit ;
37461: GO 37527
// if checkLink then
37463: LD_VAR 0 3
37467: IFFALSE 37517
// begin for i in tmp do
37469: LD_ADDR_VAR 0 6
37473: PUSH
37474: LD_VAR 0 5
37478: PUSH
37479: FOR_IN
37480: IFFALSE 37515
// if GetBase ( i ) <> base then
37482: LD_VAR 0 6
37486: PPUSH
37487: CALL_OW 274
37491: PUSH
37492: LD_VAR 0 1
37496: NONEQUAL
37497: IFFALSE 37513
// ComLinkToBase ( base , i ) ;
37499: LD_VAR 0 1
37503: PPUSH
37504: LD_VAR 0 6
37508: PPUSH
37509: CALL_OW 169
37513: GO 37479
37515: POP
37516: POP
// end ; result := tmp ;
37517: LD_ADDR_VAR 0 4
37521: PUSH
37522: LD_VAR 0 5
37526: ST_TO_ADDR
// end ;
37527: LD_VAR 0 4
37531: RET
// export function ComComplete ( units , b ) ; var i ; begin
37532: LD_INT 0
37534: PPUSH
37535: PPUSH
// if not units then
37536: LD_VAR 0 1
37540: NOT
37541: IFFALSE 37545
// exit ;
37543: GO 37635
// for i in units do
37545: LD_ADDR_VAR 0 4
37549: PUSH
37550: LD_VAR 0 1
37554: PUSH
37555: FOR_IN
37556: IFFALSE 37633
// if BuildingStatus ( b ) = bs_build then
37558: LD_VAR 0 2
37562: PPUSH
37563: CALL_OW 461
37567: PUSH
37568: LD_INT 1
37570: EQUAL
37571: IFFALSE 37631
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37573: LD_VAR 0 4
37577: PPUSH
37578: LD_STRING h
37580: PUSH
37581: LD_VAR 0 2
37585: PPUSH
37586: CALL_OW 250
37590: PUSH
37591: LD_VAR 0 2
37595: PPUSH
37596: CALL_OW 251
37600: PUSH
37601: LD_VAR 0 2
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: PUSH
37624: EMPTY
37625: LIST
37626: PPUSH
37627: CALL_OW 446
37631: GO 37555
37633: POP
37634: POP
// end ;
37635: LD_VAR 0 3
37639: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37640: LD_INT 0
37642: PPUSH
37643: PPUSH
37644: PPUSH
37645: PPUSH
37646: PPUSH
37647: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
37648: LD_VAR 0 1
37652: NOT
37653: PUSH
37654: LD_VAR 0 1
37658: PPUSH
37659: CALL_OW 263
37663: PUSH
37664: LD_INT 2
37666: EQUAL
37667: NOT
37668: OR
37669: IFFALSE 37673
// exit ;
37671: GO 37989
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37673: LD_ADDR_VAR 0 6
37677: PUSH
37678: LD_INT 22
37680: PUSH
37681: LD_VAR 0 1
37685: PPUSH
37686: CALL_OW 255
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: PUSH
37698: LD_INT 30
37700: PUSH
37701: LD_INT 36
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 34
37710: PUSH
37711: LD_INT 31
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: LIST
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PPUSH
37727: CALL_OW 69
37731: ST_TO_ADDR
// if not tmp then
37732: LD_VAR 0 6
37736: NOT
37737: IFFALSE 37741
// exit ;
37739: GO 37989
// result := [ ] ;
37741: LD_ADDR_VAR 0 2
37745: PUSH
37746: EMPTY
37747: ST_TO_ADDR
// for i in tmp do
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: LD_VAR 0 6
37757: PUSH
37758: FOR_IN
37759: IFFALSE 37830
// begin t := UnitsInside ( i ) ;
37761: LD_ADDR_VAR 0 4
37765: PUSH
37766: LD_VAR 0 3
37770: PPUSH
37771: CALL_OW 313
37775: ST_TO_ADDR
// if t then
37776: LD_VAR 0 4
37780: IFFALSE 37828
// for j in t do
37782: LD_ADDR_VAR 0 7
37786: PUSH
37787: LD_VAR 0 4
37791: PUSH
37792: FOR_IN
37793: IFFALSE 37826
// result := Insert ( result , result + 1 , j ) ;
37795: LD_ADDR_VAR 0 2
37799: PUSH
37800: LD_VAR 0 2
37804: PPUSH
37805: LD_VAR 0 2
37809: PUSH
37810: LD_INT 1
37812: PLUS
37813: PPUSH
37814: LD_VAR 0 7
37818: PPUSH
37819: CALL_OW 2
37823: ST_TO_ADDR
37824: GO 37792
37826: POP
37827: POP
// end ;
37828: GO 37758
37830: POP
37831: POP
// if not result then
37832: LD_VAR 0 2
37836: NOT
37837: IFFALSE 37841
// exit ;
37839: GO 37989
// mech := result [ 1 ] ;
37841: LD_ADDR_VAR 0 5
37845: PUSH
37846: LD_VAR 0 2
37850: PUSH
37851: LD_INT 1
37853: ARRAY
37854: ST_TO_ADDR
// if result > 1 then
37855: LD_VAR 0 2
37859: PUSH
37860: LD_INT 1
37862: GREATER
37863: IFFALSE 37975
// for i = 2 to result do
37865: LD_ADDR_VAR 0 3
37869: PUSH
37870: DOUBLE
37871: LD_INT 2
37873: DEC
37874: ST_TO_ADDR
37875: LD_VAR 0 2
37879: PUSH
37880: FOR_TO
37881: IFFALSE 37973
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37883: LD_ADDR_VAR 0 4
37887: PUSH
37888: LD_VAR 0 2
37892: PUSH
37893: LD_VAR 0 3
37897: ARRAY
37898: PPUSH
37899: LD_INT 3
37901: PPUSH
37902: CALL_OW 259
37906: PUSH
37907: LD_VAR 0 2
37911: PUSH
37912: LD_VAR 0 3
37916: ARRAY
37917: PPUSH
37918: CALL_OW 432
37922: MINUS
37923: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37924: LD_VAR 0 4
37928: PUSH
37929: LD_VAR 0 5
37933: PPUSH
37934: LD_INT 3
37936: PPUSH
37937: CALL_OW 259
37941: PUSH
37942: LD_VAR 0 5
37946: PPUSH
37947: CALL_OW 432
37951: MINUS
37952: GREATEREQUAL
37953: IFFALSE 37971
// mech := result [ i ] ;
37955: LD_ADDR_VAR 0 5
37959: PUSH
37960: LD_VAR 0 2
37964: PUSH
37965: LD_VAR 0 3
37969: ARRAY
37970: ST_TO_ADDR
// end ;
37971: GO 37880
37973: POP
37974: POP
// ComLinkTo ( vehicle , mech ) ;
37975: LD_VAR 0 1
37979: PPUSH
37980: LD_VAR 0 5
37984: PPUSH
37985: CALL_OW 135
// end ;
37989: LD_VAR 0 2
37993: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37994: LD_INT 0
37996: PPUSH
37997: PPUSH
37998: PPUSH
37999: PPUSH
38000: PPUSH
38001: PPUSH
38002: PPUSH
38003: PPUSH
38004: PPUSH
38005: PPUSH
38006: PPUSH
38007: PPUSH
38008: PPUSH
// result := [ ] ;
38009: LD_ADDR_VAR 0 7
38013: PUSH
38014: EMPTY
38015: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38016: LD_VAR 0 1
38020: PPUSH
38021: CALL_OW 266
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 1
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: IN
38036: NOT
38037: IFFALSE 38041
// exit ;
38039: GO 39675
// if name then
38041: LD_VAR 0 3
38045: IFFALSE 38061
// SetBName ( base_dep , name ) ;
38047: LD_VAR 0 1
38051: PPUSH
38052: LD_VAR 0 3
38056: PPUSH
38057: CALL_OW 500
// base := GetBase ( base_dep ) ;
38061: LD_ADDR_VAR 0 15
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 274
38075: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38076: LD_ADDR_VAR 0 16
38080: PUSH
38081: LD_VAR 0 1
38085: PPUSH
38086: CALL_OW 255
38090: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38091: LD_ADDR_VAR 0 17
38095: PUSH
38096: LD_VAR 0 1
38100: PPUSH
38101: CALL_OW 248
38105: ST_TO_ADDR
// if sources then
38106: LD_VAR 0 5
38110: IFFALSE 38157
// for i = 1 to 3 do
38112: LD_ADDR_VAR 0 8
38116: PUSH
38117: DOUBLE
38118: LD_INT 1
38120: DEC
38121: ST_TO_ADDR
38122: LD_INT 3
38124: PUSH
38125: FOR_TO
38126: IFFALSE 38155
// AddResourceType ( base , i , sources [ i ] ) ;
38128: LD_VAR 0 15
38132: PPUSH
38133: LD_VAR 0 8
38137: PPUSH
38138: LD_VAR 0 5
38142: PUSH
38143: LD_VAR 0 8
38147: ARRAY
38148: PPUSH
38149: CALL_OW 276
38153: GO 38125
38155: POP
38156: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38157: LD_ADDR_VAR 0 18
38161: PUSH
38162: LD_VAR 0 15
38166: PPUSH
38167: LD_VAR 0 2
38171: PPUSH
38172: LD_INT 1
38174: PPUSH
38175: CALL 37417 0 3
38179: ST_TO_ADDR
// InitHc ;
38180: CALL_OW 19
// InitUc ;
38184: CALL_OW 18
// uc_side := side ;
38188: LD_ADDR_OWVAR 20
38192: PUSH
38193: LD_VAR 0 16
38197: ST_TO_ADDR
// uc_nation := nation ;
38198: LD_ADDR_OWVAR 21
38202: PUSH
38203: LD_VAR 0 17
38207: ST_TO_ADDR
// if buildings then
38208: LD_VAR 0 18
38212: IFFALSE 39534
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38214: LD_ADDR_VAR 0 19
38218: PUSH
38219: LD_VAR 0 18
38223: PPUSH
38224: LD_INT 2
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 29
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 30
38239: PUSH
38240: LD_INT 30
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: LIST
38251: PPUSH
38252: CALL_OW 72
38256: ST_TO_ADDR
// if tmp then
38257: LD_VAR 0 19
38261: IFFALSE 38309
// for i in tmp do
38263: LD_ADDR_VAR 0 8
38267: PUSH
38268: LD_VAR 0 19
38272: PUSH
38273: FOR_IN
38274: IFFALSE 38307
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38276: LD_VAR 0 8
38280: PPUSH
38281: CALL_OW 250
38285: PPUSH
38286: LD_VAR 0 8
38290: PPUSH
38291: CALL_OW 251
38295: PPUSH
38296: LD_VAR 0 16
38300: PPUSH
38301: CALL_OW 441
38305: GO 38273
38307: POP
38308: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38309: LD_VAR 0 18
38313: PPUSH
38314: LD_INT 2
38316: PUSH
38317: LD_INT 30
38319: PUSH
38320: LD_INT 32
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 30
38329: PUSH
38330: LD_INT 33
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: LIST
38341: PPUSH
38342: CALL_OW 72
38346: IFFALSE 38434
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38348: LD_ADDR_VAR 0 8
38352: PUSH
38353: LD_VAR 0 18
38357: PPUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 30
38363: PUSH
38364: LD_INT 32
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 30
38373: PUSH
38374: LD_INT 33
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: LIST
38385: PPUSH
38386: CALL_OW 72
38390: PUSH
38391: FOR_IN
38392: IFFALSE 38432
// begin if not GetBWeapon ( i ) then
38394: LD_VAR 0 8
38398: PPUSH
38399: CALL_OW 269
38403: NOT
38404: IFFALSE 38430
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38406: LD_VAR 0 8
38410: PPUSH
38411: LD_VAR 0 8
38415: PPUSH
38416: LD_VAR 0 2
38420: PPUSH
38421: CALL 39680 0 2
38425: PPUSH
38426: CALL_OW 431
// end ;
38430: GO 38391
38432: POP
38433: POP
// end ; for i = 1 to personel do
38434: LD_ADDR_VAR 0 8
38438: PUSH
38439: DOUBLE
38440: LD_INT 1
38442: DEC
38443: ST_TO_ADDR
38444: LD_VAR 0 6
38448: PUSH
38449: FOR_TO
38450: IFFALSE 39514
// begin if i > 4 then
38452: LD_VAR 0 8
38456: PUSH
38457: LD_INT 4
38459: GREATER
38460: IFFALSE 38464
// break ;
38462: GO 39514
// case i of 1 :
38464: LD_VAR 0 8
38468: PUSH
38469: LD_INT 1
38471: DOUBLE
38472: EQUAL
38473: IFTRUE 38477
38475: GO 38557
38477: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38478: LD_ADDR_VAR 0 12
38482: PUSH
38483: LD_VAR 0 18
38487: PPUSH
38488: LD_INT 22
38490: PUSH
38491: LD_VAR 0 16
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 58
38502: PUSH
38503: EMPTY
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 30
38511: PUSH
38512: LD_INT 32
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 30
38521: PUSH
38522: LD_INT 4
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 30
38531: PUSH
38532: LD_INT 5
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: LIST
38549: PPUSH
38550: CALL_OW 72
38554: ST_TO_ADDR
38555: GO 38779
38557: LD_INT 2
38559: DOUBLE
38560: EQUAL
38561: IFTRUE 38565
38563: GO 38627
38565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38566: LD_ADDR_VAR 0 12
38570: PUSH
38571: LD_VAR 0 18
38575: PPUSH
38576: LD_INT 22
38578: PUSH
38579: LD_VAR 0 16
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 2
38590: PUSH
38591: LD_INT 30
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 30
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PPUSH
38620: CALL_OW 72
38624: ST_TO_ADDR
38625: GO 38779
38627: LD_INT 3
38629: DOUBLE
38630: EQUAL
38631: IFTRUE 38635
38633: GO 38697
38635: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38636: LD_ADDR_VAR 0 12
38640: PUSH
38641: LD_VAR 0 18
38645: PPUSH
38646: LD_INT 22
38648: PUSH
38649: LD_VAR 0 16
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 2
38660: PUSH
38661: LD_INT 30
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 30
38673: PUSH
38674: LD_INT 3
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PPUSH
38690: CALL_OW 72
38694: ST_TO_ADDR
38695: GO 38779
38697: LD_INT 4
38699: DOUBLE
38700: EQUAL
38701: IFTRUE 38705
38703: GO 38778
38705: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38706: LD_ADDR_VAR 0 12
38710: PUSH
38711: LD_VAR 0 18
38715: PPUSH
38716: LD_INT 22
38718: PUSH
38719: LD_VAR 0 16
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: LD_INT 30
38733: PUSH
38734: LD_INT 6
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 30
38743: PUSH
38744: LD_INT 7
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 30
38753: PUSH
38754: LD_INT 8
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PPUSH
38771: CALL_OW 72
38775: ST_TO_ADDR
38776: GO 38779
38778: POP
// if i = 1 then
38779: LD_VAR 0 8
38783: PUSH
38784: LD_INT 1
38786: EQUAL
38787: IFFALSE 38898
// begin tmp := [ ] ;
38789: LD_ADDR_VAR 0 19
38793: PUSH
38794: EMPTY
38795: ST_TO_ADDR
// for j in f do
38796: LD_ADDR_VAR 0 9
38800: PUSH
38801: LD_VAR 0 12
38805: PUSH
38806: FOR_IN
38807: IFFALSE 38880
// if GetBType ( j ) = b_bunker then
38809: LD_VAR 0 9
38813: PPUSH
38814: CALL_OW 266
38818: PUSH
38819: LD_INT 32
38821: EQUAL
38822: IFFALSE 38849
// tmp := Insert ( tmp , 1 , j ) else
38824: LD_ADDR_VAR 0 19
38828: PUSH
38829: LD_VAR 0 19
38833: PPUSH
38834: LD_INT 1
38836: PPUSH
38837: LD_VAR 0 9
38841: PPUSH
38842: CALL_OW 2
38846: ST_TO_ADDR
38847: GO 38878
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38849: LD_ADDR_VAR 0 19
38853: PUSH
38854: LD_VAR 0 19
38858: PPUSH
38859: LD_VAR 0 19
38863: PUSH
38864: LD_INT 1
38866: PLUS
38867: PPUSH
38868: LD_VAR 0 9
38872: PPUSH
38873: CALL_OW 2
38877: ST_TO_ADDR
38878: GO 38806
38880: POP
38881: POP
// if tmp then
38882: LD_VAR 0 19
38886: IFFALSE 38898
// f := tmp ;
38888: LD_ADDR_VAR 0 12
38892: PUSH
38893: LD_VAR 0 19
38897: ST_TO_ADDR
// end ; x := personel [ i ] ;
38898: LD_ADDR_VAR 0 13
38902: PUSH
38903: LD_VAR 0 6
38907: PUSH
38908: LD_VAR 0 8
38912: ARRAY
38913: ST_TO_ADDR
// if x = - 1 then
38914: LD_VAR 0 13
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: EQUAL
38923: IFFALSE 39132
// begin for j in f do
38925: LD_ADDR_VAR 0 9
38929: PUSH
38930: LD_VAR 0 12
38934: PUSH
38935: FOR_IN
38936: IFFALSE 39128
// repeat InitHc ;
38938: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38942: LD_VAR 0 9
38946: PPUSH
38947: CALL_OW 266
38951: PUSH
38952: LD_INT 5
38954: EQUAL
38955: IFFALSE 39025
// begin if UnitsInside ( j ) < 3 then
38957: LD_VAR 0 9
38961: PPUSH
38962: CALL_OW 313
38966: PUSH
38967: LD_INT 3
38969: LESS
38970: IFFALSE 39006
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38972: LD_INT 0
38974: PPUSH
38975: LD_INT 5
38977: PUSH
38978: LD_INT 8
38980: PUSH
38981: LD_INT 9
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: PUSH
38989: LD_VAR 0 17
38993: ARRAY
38994: PPUSH
38995: LD_VAR 0 4
38999: PPUSH
39000: CALL_OW 380
39004: GO 39023
// PrepareHuman ( false , i , skill ) ;
39006: LD_INT 0
39008: PPUSH
39009: LD_VAR 0 8
39013: PPUSH
39014: LD_VAR 0 4
39018: PPUSH
39019: CALL_OW 380
// end else
39023: GO 39042
// PrepareHuman ( false , i , skill ) ;
39025: LD_INT 0
39027: PPUSH
39028: LD_VAR 0 8
39032: PPUSH
39033: LD_VAR 0 4
39037: PPUSH
39038: CALL_OW 380
// un := CreateHuman ;
39042: LD_ADDR_VAR 0 14
39046: PUSH
39047: CALL_OW 44
39051: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39052: LD_ADDR_VAR 0 7
39056: PUSH
39057: LD_VAR 0 7
39061: PPUSH
39062: LD_INT 1
39064: PPUSH
39065: LD_VAR 0 14
39069: PPUSH
39070: CALL_OW 2
39074: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39075: LD_VAR 0 14
39079: PPUSH
39080: LD_VAR 0 9
39084: PPUSH
39085: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39089: LD_VAR 0 9
39093: PPUSH
39094: CALL_OW 313
39098: PUSH
39099: LD_INT 6
39101: EQUAL
39102: PUSH
39103: LD_VAR 0 9
39107: PPUSH
39108: CALL_OW 266
39112: PUSH
39113: LD_INT 32
39115: PUSH
39116: LD_INT 31
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: IN
39123: OR
39124: IFFALSE 38938
39126: GO 38935
39128: POP
39129: POP
// end else
39130: GO 39512
// for j = 1 to x do
39132: LD_ADDR_VAR 0 9
39136: PUSH
39137: DOUBLE
39138: LD_INT 1
39140: DEC
39141: ST_TO_ADDR
39142: LD_VAR 0 13
39146: PUSH
39147: FOR_TO
39148: IFFALSE 39510
// begin InitHc ;
39150: CALL_OW 19
// if not f then
39154: LD_VAR 0 12
39158: NOT
39159: IFFALSE 39248
// begin PrepareHuman ( false , i , skill ) ;
39161: LD_INT 0
39163: PPUSH
39164: LD_VAR 0 8
39168: PPUSH
39169: LD_VAR 0 4
39173: PPUSH
39174: CALL_OW 380
// un := CreateHuman ;
39178: LD_ADDR_VAR 0 14
39182: PUSH
39183: CALL_OW 44
39187: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39188: LD_ADDR_VAR 0 7
39192: PUSH
39193: LD_VAR 0 7
39197: PPUSH
39198: LD_INT 1
39200: PPUSH
39201: LD_VAR 0 14
39205: PPUSH
39206: CALL_OW 2
39210: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39211: LD_VAR 0 14
39215: PPUSH
39216: LD_VAR 0 1
39220: PPUSH
39221: CALL_OW 250
39225: PPUSH
39226: LD_VAR 0 1
39230: PPUSH
39231: CALL_OW 251
39235: PPUSH
39236: LD_INT 10
39238: PPUSH
39239: LD_INT 0
39241: PPUSH
39242: CALL_OW 50
// continue ;
39246: GO 39147
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39248: LD_VAR 0 12
39252: PUSH
39253: LD_INT 1
39255: ARRAY
39256: PPUSH
39257: CALL_OW 313
39261: PUSH
39262: LD_VAR 0 12
39266: PUSH
39267: LD_INT 1
39269: ARRAY
39270: PPUSH
39271: CALL_OW 266
39275: PUSH
39276: LD_INT 32
39278: PUSH
39279: LD_INT 31
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: IN
39286: AND
39287: PUSH
39288: LD_VAR 0 12
39292: PUSH
39293: LD_INT 1
39295: ARRAY
39296: PPUSH
39297: CALL_OW 313
39301: PUSH
39302: LD_INT 6
39304: EQUAL
39305: OR
39306: IFFALSE 39326
// f := Delete ( f , 1 ) ;
39308: LD_ADDR_VAR 0 12
39312: PUSH
39313: LD_VAR 0 12
39317: PPUSH
39318: LD_INT 1
39320: PPUSH
39321: CALL_OW 3
39325: ST_TO_ADDR
// if not f then
39326: LD_VAR 0 12
39330: NOT
39331: IFFALSE 39349
// begin x := x + 2 ;
39333: LD_ADDR_VAR 0 13
39337: PUSH
39338: LD_VAR 0 13
39342: PUSH
39343: LD_INT 2
39345: PLUS
39346: ST_TO_ADDR
// continue ;
39347: GO 39147
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39349: LD_VAR 0 12
39353: PUSH
39354: LD_INT 1
39356: ARRAY
39357: PPUSH
39358: CALL_OW 266
39362: PUSH
39363: LD_INT 5
39365: EQUAL
39366: IFFALSE 39440
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39368: LD_VAR 0 12
39372: PUSH
39373: LD_INT 1
39375: ARRAY
39376: PPUSH
39377: CALL_OW 313
39381: PUSH
39382: LD_INT 3
39384: LESS
39385: IFFALSE 39421
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39387: LD_INT 0
39389: PPUSH
39390: LD_INT 5
39392: PUSH
39393: LD_INT 8
39395: PUSH
39396: LD_INT 9
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: PUSH
39404: LD_VAR 0 17
39408: ARRAY
39409: PPUSH
39410: LD_VAR 0 4
39414: PPUSH
39415: CALL_OW 380
39419: GO 39438
// PrepareHuman ( false , i , skill ) ;
39421: LD_INT 0
39423: PPUSH
39424: LD_VAR 0 8
39428: PPUSH
39429: LD_VAR 0 4
39433: PPUSH
39434: CALL_OW 380
// end else
39438: GO 39457
// PrepareHuman ( false , i , skill ) ;
39440: LD_INT 0
39442: PPUSH
39443: LD_VAR 0 8
39447: PPUSH
39448: LD_VAR 0 4
39452: PPUSH
39453: CALL_OW 380
// un := CreateHuman ;
39457: LD_ADDR_VAR 0 14
39461: PUSH
39462: CALL_OW 44
39466: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39467: LD_ADDR_VAR 0 7
39471: PUSH
39472: LD_VAR 0 7
39476: PPUSH
39477: LD_INT 1
39479: PPUSH
39480: LD_VAR 0 14
39484: PPUSH
39485: CALL_OW 2
39489: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39490: LD_VAR 0 14
39494: PPUSH
39495: LD_VAR 0 12
39499: PUSH
39500: LD_INT 1
39502: ARRAY
39503: PPUSH
39504: CALL_OW 52
// end ;
39508: GO 39147
39510: POP
39511: POP
// end ;
39512: GO 38449
39514: POP
39515: POP
// result := result ^ buildings ;
39516: LD_ADDR_VAR 0 7
39520: PUSH
39521: LD_VAR 0 7
39525: PUSH
39526: LD_VAR 0 18
39530: ADD
39531: ST_TO_ADDR
// end else
39532: GO 39675
// begin for i = 1 to personel do
39534: LD_ADDR_VAR 0 8
39538: PUSH
39539: DOUBLE
39540: LD_INT 1
39542: DEC
39543: ST_TO_ADDR
39544: LD_VAR 0 6
39548: PUSH
39549: FOR_TO
39550: IFFALSE 39673
// begin if i > 4 then
39552: LD_VAR 0 8
39556: PUSH
39557: LD_INT 4
39559: GREATER
39560: IFFALSE 39564
// break ;
39562: GO 39673
// x := personel [ i ] ;
39564: LD_ADDR_VAR 0 13
39568: PUSH
39569: LD_VAR 0 6
39573: PUSH
39574: LD_VAR 0 8
39578: ARRAY
39579: ST_TO_ADDR
// if x = - 1 then
39580: LD_VAR 0 13
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: EQUAL
39589: IFFALSE 39593
// continue ;
39591: GO 39549
// PrepareHuman ( false , i , skill ) ;
39593: LD_INT 0
39595: PPUSH
39596: LD_VAR 0 8
39600: PPUSH
39601: LD_VAR 0 4
39605: PPUSH
39606: CALL_OW 380
// un := CreateHuman ;
39610: LD_ADDR_VAR 0 14
39614: PUSH
39615: CALL_OW 44
39619: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39620: LD_VAR 0 14
39624: PPUSH
39625: LD_VAR 0 1
39629: PPUSH
39630: CALL_OW 250
39634: PPUSH
39635: LD_VAR 0 1
39639: PPUSH
39640: CALL_OW 251
39644: PPUSH
39645: LD_INT 10
39647: PPUSH
39648: LD_INT 0
39650: PPUSH
39651: CALL_OW 50
// result := result ^ un ;
39655: LD_ADDR_VAR 0 7
39659: PUSH
39660: LD_VAR 0 7
39664: PUSH
39665: LD_VAR 0 14
39669: ADD
39670: ST_TO_ADDR
// end ;
39671: GO 39549
39673: POP
39674: POP
// end ; end ;
39675: LD_VAR 0 7
39679: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39680: LD_INT 0
39682: PPUSH
39683: PPUSH
39684: PPUSH
39685: PPUSH
39686: PPUSH
39687: PPUSH
39688: PPUSH
39689: PPUSH
39690: PPUSH
39691: PPUSH
39692: PPUSH
39693: PPUSH
39694: PPUSH
39695: PPUSH
39696: PPUSH
39697: PPUSH
// result := false ;
39698: LD_ADDR_VAR 0 3
39702: PUSH
39703: LD_INT 0
39705: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39706: LD_VAR 0 1
39710: NOT
39711: PUSH
39712: LD_VAR 0 1
39716: PPUSH
39717: CALL_OW 266
39721: PUSH
39722: LD_INT 32
39724: PUSH
39725: LD_INT 33
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: IN
39732: NOT
39733: OR
39734: IFFALSE 39738
// exit ;
39736: GO 40847
// nat := GetNation ( tower ) ;
39738: LD_ADDR_VAR 0 12
39742: PUSH
39743: LD_VAR 0 1
39747: PPUSH
39748: CALL_OW 248
39752: ST_TO_ADDR
// side := GetSide ( tower ) ;
39753: LD_ADDR_VAR 0 16
39757: PUSH
39758: LD_VAR 0 1
39762: PPUSH
39763: CALL_OW 255
39767: ST_TO_ADDR
// x := GetX ( tower ) ;
39768: LD_ADDR_VAR 0 10
39772: PUSH
39773: LD_VAR 0 1
39777: PPUSH
39778: CALL_OW 250
39782: ST_TO_ADDR
// y := GetY ( tower ) ;
39783: LD_ADDR_VAR 0 11
39787: PUSH
39788: LD_VAR 0 1
39792: PPUSH
39793: CALL_OW 251
39797: ST_TO_ADDR
// if not x or not y then
39798: LD_VAR 0 10
39802: NOT
39803: PUSH
39804: LD_VAR 0 11
39808: NOT
39809: OR
39810: IFFALSE 39814
// exit ;
39812: GO 40847
// weapon := 0 ;
39814: LD_ADDR_VAR 0 18
39818: PUSH
39819: LD_INT 0
39821: ST_TO_ADDR
// fac_list := [ ] ;
39822: LD_ADDR_VAR 0 17
39826: PUSH
39827: EMPTY
39828: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39829: LD_ADDR_VAR 0 6
39833: PUSH
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 274
39843: PPUSH
39844: LD_VAR 0 2
39848: PPUSH
39849: LD_INT 0
39851: PPUSH
39852: CALL 37417 0 3
39856: PPUSH
39857: LD_INT 30
39859: PUSH
39860: LD_INT 3
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PPUSH
39867: CALL_OW 72
39871: ST_TO_ADDR
// if not factories then
39872: LD_VAR 0 6
39876: NOT
39877: IFFALSE 39881
// exit ;
39879: GO 40847
// for i in factories do
39881: LD_ADDR_VAR 0 8
39885: PUSH
39886: LD_VAR 0 6
39890: PUSH
39891: FOR_IN
39892: IFFALSE 39917
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39894: LD_ADDR_VAR 0 17
39898: PUSH
39899: LD_VAR 0 17
39903: PUSH
39904: LD_VAR 0 8
39908: PPUSH
39909: CALL_OW 478
39913: UNION
39914: ST_TO_ADDR
39915: GO 39891
39917: POP
39918: POP
// if not fac_list then
39919: LD_VAR 0 17
39923: NOT
39924: IFFALSE 39928
// exit ;
39926: GO 40847
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39928: LD_ADDR_VAR 0 5
39932: PUSH
39933: LD_INT 4
39935: PUSH
39936: LD_INT 5
39938: PUSH
39939: LD_INT 9
39941: PUSH
39942: LD_INT 10
39944: PUSH
39945: LD_INT 6
39947: PUSH
39948: LD_INT 7
39950: PUSH
39951: LD_INT 11
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 27
39965: PUSH
39966: LD_INT 28
39968: PUSH
39969: LD_INT 26
39971: PUSH
39972: LD_INT 30
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 43
39983: PUSH
39984: LD_INT 44
39986: PUSH
39987: LD_INT 46
39989: PUSH
39990: LD_INT 45
39992: PUSH
39993: LD_INT 47
39995: PUSH
39996: LD_INT 49
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: PUSH
40012: LD_VAR 0 12
40016: ARRAY
40017: ST_TO_ADDR
// list := list isect fac_list ;
40018: LD_ADDR_VAR 0 5
40022: PUSH
40023: LD_VAR 0 5
40027: PUSH
40028: LD_VAR 0 17
40032: ISECT
40033: ST_TO_ADDR
// if not list then
40034: LD_VAR 0 5
40038: NOT
40039: IFFALSE 40043
// exit ;
40041: GO 40847
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40043: LD_VAR 0 12
40047: PUSH
40048: LD_INT 3
40050: EQUAL
40051: PUSH
40052: LD_INT 49
40054: PUSH
40055: LD_VAR 0 5
40059: IN
40060: AND
40061: PUSH
40062: LD_INT 31
40064: PPUSH
40065: LD_VAR 0 16
40069: PPUSH
40070: CALL_OW 321
40074: PUSH
40075: LD_INT 2
40077: EQUAL
40078: AND
40079: IFFALSE 40139
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40081: LD_INT 22
40083: PUSH
40084: LD_VAR 0 16
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 35
40095: PUSH
40096: LD_INT 49
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 91
40105: PUSH
40106: LD_VAR 0 1
40110: PUSH
40111: LD_INT 10
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: LIST
40123: PPUSH
40124: CALL_OW 69
40128: NOT
40129: IFFALSE 40139
// weapon := ru_time_lapser ;
40131: LD_ADDR_VAR 0 18
40135: PUSH
40136: LD_INT 49
40138: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40139: LD_VAR 0 12
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 2
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: IN
40154: PUSH
40155: LD_INT 11
40157: PUSH
40158: LD_VAR 0 5
40162: IN
40163: PUSH
40164: LD_INT 30
40166: PUSH
40167: LD_VAR 0 5
40171: IN
40172: OR
40173: AND
40174: PUSH
40175: LD_INT 6
40177: PPUSH
40178: LD_VAR 0 16
40182: PPUSH
40183: CALL_OW 321
40187: PUSH
40188: LD_INT 2
40190: EQUAL
40191: AND
40192: IFFALSE 40357
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40194: LD_INT 22
40196: PUSH
40197: LD_VAR 0 16
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 2
40208: PUSH
40209: LD_INT 35
40211: PUSH
40212: LD_INT 11
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 35
40221: PUSH
40222: LD_INT 30
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 91
40236: PUSH
40237: LD_VAR 0 1
40241: PUSH
40242: LD_INT 18
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: LIST
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: PPUSH
40255: CALL_OW 69
40259: NOT
40260: PUSH
40261: LD_INT 22
40263: PUSH
40264: LD_VAR 0 16
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 30
40278: PUSH
40279: LD_INT 32
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 30
40288: PUSH
40289: LD_INT 33
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 91
40303: PUSH
40304: LD_VAR 0 1
40308: PUSH
40309: LD_INT 12
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: LIST
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: PUSH
40322: EMPTY
40323: LIST
40324: PPUSH
40325: CALL_OW 69
40329: PUSH
40330: LD_INT 2
40332: GREATER
40333: AND
40334: IFFALSE 40357
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40336: LD_ADDR_VAR 0 18
40340: PUSH
40341: LD_INT 11
40343: PUSH
40344: LD_INT 30
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_VAR 0 12
40355: ARRAY
40356: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40357: LD_VAR 0 18
40361: NOT
40362: PUSH
40363: LD_INT 40
40365: PPUSH
40366: LD_VAR 0 16
40370: PPUSH
40371: CALL_OW 321
40375: PUSH
40376: LD_INT 2
40378: EQUAL
40379: AND
40380: PUSH
40381: LD_INT 7
40383: PUSH
40384: LD_VAR 0 5
40388: IN
40389: PUSH
40390: LD_INT 28
40392: PUSH
40393: LD_VAR 0 5
40397: IN
40398: OR
40399: PUSH
40400: LD_INT 45
40402: PUSH
40403: LD_VAR 0 5
40407: IN
40408: OR
40409: AND
40410: IFFALSE 40664
// begin hex := GetHexInfo ( x , y ) ;
40412: LD_ADDR_VAR 0 4
40416: PUSH
40417: LD_VAR 0 10
40421: PPUSH
40422: LD_VAR 0 11
40426: PPUSH
40427: CALL_OW 546
40431: ST_TO_ADDR
// if hex [ 1 ] then
40432: LD_VAR 0 4
40436: PUSH
40437: LD_INT 1
40439: ARRAY
40440: IFFALSE 40444
// exit ;
40442: GO 40847
// height := hex [ 2 ] ;
40444: LD_ADDR_VAR 0 15
40448: PUSH
40449: LD_VAR 0 4
40453: PUSH
40454: LD_INT 2
40456: ARRAY
40457: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40458: LD_ADDR_VAR 0 14
40462: PUSH
40463: LD_INT 0
40465: PUSH
40466: LD_INT 2
40468: PUSH
40469: LD_INT 3
40471: PUSH
40472: LD_INT 5
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: ST_TO_ADDR
// for i in tmp do
40481: LD_ADDR_VAR 0 8
40485: PUSH
40486: LD_VAR 0 14
40490: PUSH
40491: FOR_IN
40492: IFFALSE 40662
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40494: LD_ADDR_VAR 0 9
40498: PUSH
40499: LD_VAR 0 10
40503: PPUSH
40504: LD_VAR 0 8
40508: PPUSH
40509: LD_INT 5
40511: PPUSH
40512: CALL_OW 272
40516: PUSH
40517: LD_VAR 0 11
40521: PPUSH
40522: LD_VAR 0 8
40526: PPUSH
40527: LD_INT 5
40529: PPUSH
40530: CALL_OW 273
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40539: LD_VAR 0 9
40543: PUSH
40544: LD_INT 1
40546: ARRAY
40547: PPUSH
40548: LD_VAR 0 9
40552: PUSH
40553: LD_INT 2
40555: ARRAY
40556: PPUSH
40557: CALL_OW 488
40561: IFFALSE 40660
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40563: LD_ADDR_VAR 0 4
40567: PUSH
40568: LD_VAR 0 9
40572: PUSH
40573: LD_INT 1
40575: ARRAY
40576: PPUSH
40577: LD_VAR 0 9
40581: PUSH
40582: LD_INT 2
40584: ARRAY
40585: PPUSH
40586: CALL_OW 546
40590: ST_TO_ADDR
// if hex [ 1 ] then
40591: LD_VAR 0 4
40595: PUSH
40596: LD_INT 1
40598: ARRAY
40599: IFFALSE 40603
// continue ;
40601: GO 40491
// h := hex [ 2 ] ;
40603: LD_ADDR_VAR 0 13
40607: PUSH
40608: LD_VAR 0 4
40612: PUSH
40613: LD_INT 2
40615: ARRAY
40616: ST_TO_ADDR
// if h + 7 < height then
40617: LD_VAR 0 13
40621: PUSH
40622: LD_INT 7
40624: PLUS
40625: PUSH
40626: LD_VAR 0 15
40630: LESS
40631: IFFALSE 40660
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40633: LD_ADDR_VAR 0 18
40637: PUSH
40638: LD_INT 7
40640: PUSH
40641: LD_INT 28
40643: PUSH
40644: LD_INT 45
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: LIST
40651: PUSH
40652: LD_VAR 0 12
40656: ARRAY
40657: ST_TO_ADDR
// break ;
40658: GO 40662
// end ; end ; end ;
40660: GO 40491
40662: POP
40663: POP
// end ; if not weapon then
40664: LD_VAR 0 18
40668: NOT
40669: IFFALSE 40729
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40671: LD_ADDR_VAR 0 5
40675: PUSH
40676: LD_VAR 0 5
40680: PUSH
40681: LD_INT 11
40683: PUSH
40684: LD_INT 30
40686: PUSH
40687: LD_INT 49
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: LIST
40694: DIFF
40695: ST_TO_ADDR
// if not list then
40696: LD_VAR 0 5
40700: NOT
40701: IFFALSE 40705
// exit ;
40703: GO 40847
// weapon := list [ rand ( 1 , list ) ] ;
40705: LD_ADDR_VAR 0 18
40709: PUSH
40710: LD_VAR 0 5
40714: PUSH
40715: LD_INT 1
40717: PPUSH
40718: LD_VAR 0 5
40722: PPUSH
40723: CALL_OW 12
40727: ARRAY
40728: ST_TO_ADDR
// end ; if weapon then
40729: LD_VAR 0 18
40733: IFFALSE 40847
// begin tmp := CostOfWeapon ( weapon ) ;
40735: LD_ADDR_VAR 0 14
40739: PUSH
40740: LD_VAR 0 18
40744: PPUSH
40745: CALL_OW 451
40749: ST_TO_ADDR
// j := GetBase ( tower ) ;
40750: LD_ADDR_VAR 0 9
40754: PUSH
40755: LD_VAR 0 1
40759: PPUSH
40760: CALL_OW 274
40764: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40765: LD_VAR 0 9
40769: PPUSH
40770: LD_INT 1
40772: PPUSH
40773: CALL_OW 275
40777: PUSH
40778: LD_VAR 0 14
40782: PUSH
40783: LD_INT 1
40785: ARRAY
40786: GREATEREQUAL
40787: PUSH
40788: LD_VAR 0 9
40792: PPUSH
40793: LD_INT 2
40795: PPUSH
40796: CALL_OW 275
40800: PUSH
40801: LD_VAR 0 14
40805: PUSH
40806: LD_INT 2
40808: ARRAY
40809: GREATEREQUAL
40810: AND
40811: PUSH
40812: LD_VAR 0 9
40816: PPUSH
40817: LD_INT 3
40819: PPUSH
40820: CALL_OW 275
40824: PUSH
40825: LD_VAR 0 14
40829: PUSH
40830: LD_INT 3
40832: ARRAY
40833: GREATEREQUAL
40834: AND
40835: IFFALSE 40847
// result := weapon ;
40837: LD_ADDR_VAR 0 3
40841: PUSH
40842: LD_VAR 0 18
40846: ST_TO_ADDR
// end ; end ;
40847: LD_VAR 0 3
40851: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40852: LD_INT 0
40854: PPUSH
40855: PPUSH
// result := true ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 1
40863: ST_TO_ADDR
// if array1 = array2 then
40864: LD_VAR 0 1
40868: PUSH
40869: LD_VAR 0 2
40873: EQUAL
40874: IFFALSE 40934
// begin for i = 1 to array1 do
40876: LD_ADDR_VAR 0 4
40880: PUSH
40881: DOUBLE
40882: LD_INT 1
40884: DEC
40885: ST_TO_ADDR
40886: LD_VAR 0 1
40890: PUSH
40891: FOR_TO
40892: IFFALSE 40930
// if array1 [ i ] <> array2 [ i ] then
40894: LD_VAR 0 1
40898: PUSH
40899: LD_VAR 0 4
40903: ARRAY
40904: PUSH
40905: LD_VAR 0 2
40909: PUSH
40910: LD_VAR 0 4
40914: ARRAY
40915: NONEQUAL
40916: IFFALSE 40928
// begin result := false ;
40918: LD_ADDR_VAR 0 3
40922: PUSH
40923: LD_INT 0
40925: ST_TO_ADDR
// break ;
40926: GO 40930
// end ;
40928: GO 40891
40930: POP
40931: POP
// end else
40932: GO 40942
// result := false ;
40934: LD_ADDR_VAR 0 3
40938: PUSH
40939: LD_INT 0
40941: ST_TO_ADDR
// end ;
40942: LD_VAR 0 3
40946: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40947: LD_INT 0
40949: PPUSH
40950: PPUSH
// if not array1 or not array2 then
40951: LD_VAR 0 1
40955: NOT
40956: PUSH
40957: LD_VAR 0 2
40961: NOT
40962: OR
40963: IFFALSE 40967
// exit ;
40965: GO 41031
// result := true ;
40967: LD_ADDR_VAR 0 3
40971: PUSH
40972: LD_INT 1
40974: ST_TO_ADDR
// for i = 1 to array1 do
40975: LD_ADDR_VAR 0 4
40979: PUSH
40980: DOUBLE
40981: LD_INT 1
40983: DEC
40984: ST_TO_ADDR
40985: LD_VAR 0 1
40989: PUSH
40990: FOR_TO
40991: IFFALSE 41029
// if array1 [ i ] <> array2 [ i ] then
40993: LD_VAR 0 1
40997: PUSH
40998: LD_VAR 0 4
41002: ARRAY
41003: PUSH
41004: LD_VAR 0 2
41008: PUSH
41009: LD_VAR 0 4
41013: ARRAY
41014: NONEQUAL
41015: IFFALSE 41027
// begin result := false ;
41017: LD_ADDR_VAR 0 3
41021: PUSH
41022: LD_INT 0
41024: ST_TO_ADDR
// break ;
41025: GO 41029
// end ;
41027: GO 40990
41029: POP
41030: POP
// end ;
41031: LD_VAR 0 3
41035: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41036: LD_INT 0
41038: PPUSH
41039: PPUSH
41040: PPUSH
// pom := GetBase ( fac ) ;
41041: LD_ADDR_VAR 0 5
41045: PUSH
41046: LD_VAR 0 1
41050: PPUSH
41051: CALL_OW 274
41055: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41056: LD_ADDR_VAR 0 4
41060: PUSH
41061: LD_VAR 0 2
41065: PUSH
41066: LD_INT 1
41068: ARRAY
41069: PPUSH
41070: LD_VAR 0 2
41074: PUSH
41075: LD_INT 2
41077: ARRAY
41078: PPUSH
41079: LD_VAR 0 2
41083: PUSH
41084: LD_INT 3
41086: ARRAY
41087: PPUSH
41088: LD_VAR 0 2
41092: PUSH
41093: LD_INT 4
41095: ARRAY
41096: PPUSH
41097: CALL_OW 449
41101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41102: LD_ADDR_VAR 0 3
41106: PUSH
41107: LD_VAR 0 5
41111: PPUSH
41112: LD_INT 1
41114: PPUSH
41115: CALL_OW 275
41119: PUSH
41120: LD_VAR 0 4
41124: PUSH
41125: LD_INT 1
41127: ARRAY
41128: GREATEREQUAL
41129: PUSH
41130: LD_VAR 0 5
41134: PPUSH
41135: LD_INT 2
41137: PPUSH
41138: CALL_OW 275
41142: PUSH
41143: LD_VAR 0 4
41147: PUSH
41148: LD_INT 2
41150: ARRAY
41151: GREATEREQUAL
41152: AND
41153: PUSH
41154: LD_VAR 0 5
41158: PPUSH
41159: LD_INT 3
41161: PPUSH
41162: CALL_OW 275
41166: PUSH
41167: LD_VAR 0 4
41171: PUSH
41172: LD_INT 3
41174: ARRAY
41175: GREATEREQUAL
41176: AND
41177: ST_TO_ADDR
// end ;
41178: LD_VAR 0 3
41182: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41183: LD_INT 0
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
// pom := GetBase ( building ) ;
41189: LD_ADDR_VAR 0 3
41193: PUSH
41194: LD_VAR 0 1
41198: PPUSH
41199: CALL_OW 274
41203: ST_TO_ADDR
// if not pom then
41204: LD_VAR 0 3
41208: NOT
41209: IFFALSE 41213
// exit ;
41211: GO 41383
// btype := GetBType ( building ) ;
41213: LD_ADDR_VAR 0 5
41217: PUSH
41218: LD_VAR 0 1
41222: PPUSH
41223: CALL_OW 266
41227: ST_TO_ADDR
// if btype = b_armoury then
41228: LD_VAR 0 5
41232: PUSH
41233: LD_INT 4
41235: EQUAL
41236: IFFALSE 41246
// btype := b_barracks ;
41238: LD_ADDR_VAR 0 5
41242: PUSH
41243: LD_INT 5
41245: ST_TO_ADDR
// if btype = b_depot then
41246: LD_VAR 0 5
41250: PUSH
41251: LD_INT 0
41253: EQUAL
41254: IFFALSE 41264
// btype := b_warehouse ;
41256: LD_ADDR_VAR 0 5
41260: PUSH
41261: LD_INT 1
41263: ST_TO_ADDR
// if btype = b_workshop then
41264: LD_VAR 0 5
41268: PUSH
41269: LD_INT 2
41271: EQUAL
41272: IFFALSE 41282
// btype := b_factory ;
41274: LD_ADDR_VAR 0 5
41278: PUSH
41279: LD_INT 3
41281: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41282: LD_ADDR_VAR 0 4
41286: PUSH
41287: LD_VAR 0 5
41291: PPUSH
41292: LD_VAR 0 1
41296: PPUSH
41297: CALL_OW 248
41301: PPUSH
41302: CALL_OW 450
41306: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41307: LD_ADDR_VAR 0 2
41311: PUSH
41312: LD_VAR 0 3
41316: PPUSH
41317: LD_INT 1
41319: PPUSH
41320: CALL_OW 275
41324: PUSH
41325: LD_VAR 0 4
41329: PUSH
41330: LD_INT 1
41332: ARRAY
41333: GREATEREQUAL
41334: PUSH
41335: LD_VAR 0 3
41339: PPUSH
41340: LD_INT 2
41342: PPUSH
41343: CALL_OW 275
41347: PUSH
41348: LD_VAR 0 4
41352: PUSH
41353: LD_INT 2
41355: ARRAY
41356: GREATEREQUAL
41357: AND
41358: PUSH
41359: LD_VAR 0 3
41363: PPUSH
41364: LD_INT 3
41366: PPUSH
41367: CALL_OW 275
41371: PUSH
41372: LD_VAR 0 4
41376: PUSH
41377: LD_INT 3
41379: ARRAY
41380: GREATEREQUAL
41381: AND
41382: ST_TO_ADDR
// end ;
41383: LD_VAR 0 2
41387: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41388: LD_INT 0
41390: PPUSH
41391: PPUSH
41392: PPUSH
// pom := GetBase ( building ) ;
41393: LD_ADDR_VAR 0 4
41397: PUSH
41398: LD_VAR 0 1
41402: PPUSH
41403: CALL_OW 274
41407: ST_TO_ADDR
// if not pom then
41408: LD_VAR 0 4
41412: NOT
41413: IFFALSE 41417
// exit ;
41415: GO 41518
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41417: LD_ADDR_VAR 0 5
41421: PUSH
41422: LD_VAR 0 2
41426: PPUSH
41427: LD_VAR 0 1
41431: PPUSH
41432: CALL_OW 248
41436: PPUSH
41437: CALL_OW 450
41441: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_VAR 0 4
41451: PPUSH
41452: LD_INT 1
41454: PPUSH
41455: CALL_OW 275
41459: PUSH
41460: LD_VAR 0 5
41464: PUSH
41465: LD_INT 1
41467: ARRAY
41468: GREATEREQUAL
41469: PUSH
41470: LD_VAR 0 4
41474: PPUSH
41475: LD_INT 2
41477: PPUSH
41478: CALL_OW 275
41482: PUSH
41483: LD_VAR 0 5
41487: PUSH
41488: LD_INT 2
41490: ARRAY
41491: GREATEREQUAL
41492: AND
41493: PUSH
41494: LD_VAR 0 4
41498: PPUSH
41499: LD_INT 3
41501: PPUSH
41502: CALL_OW 275
41506: PUSH
41507: LD_VAR 0 5
41511: PUSH
41512: LD_INT 3
41514: ARRAY
41515: GREATEREQUAL
41516: AND
41517: ST_TO_ADDR
// end ;
41518: LD_VAR 0 3
41522: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41523: LD_INT 0
41525: PPUSH
41526: PPUSH
41527: PPUSH
41528: PPUSH
41529: PPUSH
41530: PPUSH
41531: PPUSH
41532: PPUSH
41533: PPUSH
41534: PPUSH
41535: PPUSH
// result := false ;
41536: LD_ADDR_VAR 0 8
41540: PUSH
41541: LD_INT 0
41543: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41544: LD_VAR 0 5
41548: NOT
41549: PUSH
41550: LD_VAR 0 1
41554: NOT
41555: OR
41556: PUSH
41557: LD_VAR 0 2
41561: NOT
41562: OR
41563: PUSH
41564: LD_VAR 0 3
41568: NOT
41569: OR
41570: IFFALSE 41574
// exit ;
41572: GO 42388
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41574: LD_ADDR_VAR 0 14
41578: PUSH
41579: LD_VAR 0 1
41583: PPUSH
41584: LD_VAR 0 2
41588: PPUSH
41589: LD_VAR 0 3
41593: PPUSH
41594: LD_VAR 0 4
41598: PPUSH
41599: LD_VAR 0 5
41603: PUSH
41604: LD_INT 1
41606: ARRAY
41607: PPUSH
41608: CALL_OW 248
41612: PPUSH
41613: LD_INT 0
41615: PPUSH
41616: CALL 43225 0 6
41620: ST_TO_ADDR
// if not hexes then
41621: LD_VAR 0 14
41625: NOT
41626: IFFALSE 41630
// exit ;
41628: GO 42388
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41630: LD_ADDR_VAR 0 17
41634: PUSH
41635: LD_VAR 0 5
41639: PPUSH
41640: LD_INT 22
41642: PUSH
41643: LD_VAR 0 13
41647: PPUSH
41648: CALL_OW 255
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 30
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 30
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: LIST
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PPUSH
41689: CALL_OW 72
41693: ST_TO_ADDR
// for i = 1 to hexes do
41694: LD_ADDR_VAR 0 9
41698: PUSH
41699: DOUBLE
41700: LD_INT 1
41702: DEC
41703: ST_TO_ADDR
41704: LD_VAR 0 14
41708: PUSH
41709: FOR_TO
41710: IFFALSE 42386
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41712: LD_ADDR_VAR 0 13
41716: PUSH
41717: LD_VAR 0 14
41721: PUSH
41722: LD_VAR 0 9
41726: ARRAY
41727: PUSH
41728: LD_INT 1
41730: ARRAY
41731: PPUSH
41732: LD_VAR 0 14
41736: PUSH
41737: LD_VAR 0 9
41741: ARRAY
41742: PUSH
41743: LD_INT 2
41745: ARRAY
41746: PPUSH
41747: CALL_OW 428
41751: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41752: LD_VAR 0 14
41756: PUSH
41757: LD_VAR 0 9
41761: ARRAY
41762: PUSH
41763: LD_INT 1
41765: ARRAY
41766: PPUSH
41767: LD_VAR 0 14
41771: PUSH
41772: LD_VAR 0 9
41776: ARRAY
41777: PUSH
41778: LD_INT 2
41780: ARRAY
41781: PPUSH
41782: CALL_OW 351
41786: PUSH
41787: LD_VAR 0 14
41791: PUSH
41792: LD_VAR 0 9
41796: ARRAY
41797: PUSH
41798: LD_INT 1
41800: ARRAY
41801: PPUSH
41802: LD_VAR 0 14
41806: PUSH
41807: LD_VAR 0 9
41811: ARRAY
41812: PUSH
41813: LD_INT 2
41815: ARRAY
41816: PPUSH
41817: CALL_OW 488
41821: NOT
41822: OR
41823: PUSH
41824: LD_VAR 0 13
41828: PPUSH
41829: CALL_OW 247
41833: PUSH
41834: LD_INT 3
41836: EQUAL
41837: OR
41838: IFFALSE 41844
// exit ;
41840: POP
41841: POP
41842: GO 42388
// if not tmp then
41844: LD_VAR 0 13
41848: NOT
41849: IFFALSE 41853
// continue ;
41851: GO 41709
// result := true ;
41853: LD_ADDR_VAR 0 8
41857: PUSH
41858: LD_INT 1
41860: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41861: LD_VAR 0 6
41865: PUSH
41866: LD_VAR 0 13
41870: PPUSH
41871: CALL_OW 247
41875: PUSH
41876: LD_INT 2
41878: EQUAL
41879: AND
41880: PUSH
41881: LD_VAR 0 13
41885: PPUSH
41886: CALL_OW 263
41890: PUSH
41891: LD_INT 1
41893: EQUAL
41894: AND
41895: IFFALSE 42059
// begin if IsDrivenBy ( tmp ) then
41897: LD_VAR 0 13
41901: PPUSH
41902: CALL_OW 311
41906: IFFALSE 41910
// continue ;
41908: GO 41709
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41910: LD_VAR 0 6
41914: PPUSH
41915: LD_INT 3
41917: PUSH
41918: LD_INT 60
41920: PUSH
41921: EMPTY
41922: LIST
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: LD_INT 55
41933: PUSH
41934: EMPTY
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PPUSH
41945: CALL_OW 72
41949: IFFALSE 42057
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41951: LD_ADDR_VAR 0 18
41955: PUSH
41956: LD_VAR 0 6
41960: PPUSH
41961: LD_INT 3
41963: PUSH
41964: LD_INT 60
41966: PUSH
41967: EMPTY
41968: LIST
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 3
41976: PUSH
41977: LD_INT 55
41979: PUSH
41980: EMPTY
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PPUSH
41991: CALL_OW 72
41995: PUSH
41996: LD_INT 1
41998: ARRAY
41999: ST_TO_ADDR
// if IsInUnit ( driver ) then
42000: LD_VAR 0 18
42004: PPUSH
42005: CALL_OW 310
42009: IFFALSE 42020
// ComExit ( driver ) ;
42011: LD_VAR 0 18
42015: PPUSH
42016: CALL 66409 0 1
// AddComEnterUnit ( driver , tmp ) ;
42020: LD_VAR 0 18
42024: PPUSH
42025: LD_VAR 0 13
42029: PPUSH
42030: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42034: LD_VAR 0 18
42038: PPUSH
42039: LD_VAR 0 7
42043: PPUSH
42044: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42048: LD_VAR 0 18
42052: PPUSH
42053: CALL_OW 181
// end ; continue ;
42057: GO 41709
// end ; if not cleaners or not tmp in cleaners then
42059: LD_VAR 0 6
42063: NOT
42064: PUSH
42065: LD_VAR 0 13
42069: PUSH
42070: LD_VAR 0 6
42074: IN
42075: NOT
42076: OR
42077: IFFALSE 42384
// begin if dep then
42079: LD_VAR 0 17
42083: IFFALSE 42219
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42085: LD_ADDR_VAR 0 16
42089: PUSH
42090: LD_VAR 0 17
42094: PUSH
42095: LD_INT 1
42097: ARRAY
42098: PPUSH
42099: CALL_OW 250
42103: PPUSH
42104: LD_VAR 0 17
42108: PUSH
42109: LD_INT 1
42111: ARRAY
42112: PPUSH
42113: CALL_OW 254
42117: PPUSH
42118: LD_INT 5
42120: PPUSH
42121: CALL_OW 272
42125: PUSH
42126: LD_VAR 0 17
42130: PUSH
42131: LD_INT 1
42133: ARRAY
42134: PPUSH
42135: CALL_OW 251
42139: PPUSH
42140: LD_VAR 0 17
42144: PUSH
42145: LD_INT 1
42147: ARRAY
42148: PPUSH
42149: CALL_OW 254
42153: PPUSH
42154: LD_INT 5
42156: PPUSH
42157: CALL_OW 273
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42166: LD_VAR 0 16
42170: PUSH
42171: LD_INT 1
42173: ARRAY
42174: PPUSH
42175: LD_VAR 0 16
42179: PUSH
42180: LD_INT 2
42182: ARRAY
42183: PPUSH
42184: CALL_OW 488
42188: IFFALSE 42219
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42190: LD_VAR 0 13
42194: PPUSH
42195: LD_VAR 0 16
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: PPUSH
42204: LD_VAR 0 16
42208: PUSH
42209: LD_INT 2
42211: ARRAY
42212: PPUSH
42213: CALL_OW 111
// continue ;
42217: GO 41709
// end ; end ; r := GetDir ( tmp ) ;
42219: LD_ADDR_VAR 0 15
42223: PUSH
42224: LD_VAR 0 13
42228: PPUSH
42229: CALL_OW 254
42233: ST_TO_ADDR
// if r = 5 then
42234: LD_VAR 0 15
42238: PUSH
42239: LD_INT 5
42241: EQUAL
42242: IFFALSE 42252
// r := 0 ;
42244: LD_ADDR_VAR 0 15
42248: PUSH
42249: LD_INT 0
42251: ST_TO_ADDR
// for j = r to 5 do
42252: LD_ADDR_VAR 0 10
42256: PUSH
42257: DOUBLE
42258: LD_VAR 0 15
42262: DEC
42263: ST_TO_ADDR
42264: LD_INT 5
42266: PUSH
42267: FOR_TO
42268: IFFALSE 42382
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42270: LD_ADDR_VAR 0 11
42274: PUSH
42275: LD_VAR 0 13
42279: PPUSH
42280: CALL_OW 250
42284: PPUSH
42285: LD_VAR 0 10
42289: PPUSH
42290: LD_INT 2
42292: PPUSH
42293: CALL_OW 272
42297: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42298: LD_ADDR_VAR 0 12
42302: PUSH
42303: LD_VAR 0 13
42307: PPUSH
42308: CALL_OW 251
42312: PPUSH
42313: LD_VAR 0 10
42317: PPUSH
42318: LD_INT 2
42320: PPUSH
42321: CALL_OW 273
42325: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42326: LD_VAR 0 11
42330: PPUSH
42331: LD_VAR 0 12
42335: PPUSH
42336: CALL_OW 488
42340: PUSH
42341: LD_VAR 0 11
42345: PPUSH
42346: LD_VAR 0 12
42350: PPUSH
42351: CALL_OW 428
42355: NOT
42356: AND
42357: IFFALSE 42380
// begin ComMoveXY ( tmp , _x , _y ) ;
42359: LD_VAR 0 13
42363: PPUSH
42364: LD_VAR 0 11
42368: PPUSH
42369: LD_VAR 0 12
42373: PPUSH
42374: CALL_OW 111
// break ;
42378: GO 42382
// end ; end ;
42380: GO 42267
42382: POP
42383: POP
// end ; end ;
42384: GO 41709
42386: POP
42387: POP
// end ;
42388: LD_VAR 0 8
42392: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
42393: LD_INT 0
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
// result := false ;
42405: LD_ADDR_VAR 0 6
42409: PUSH
42410: LD_INT 0
42412: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42413: LD_VAR 0 1
42417: NOT
42418: PUSH
42419: LD_VAR 0 1
42423: PPUSH
42424: CALL_OW 266
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: IN
42439: NOT
42440: OR
42441: PUSH
42442: LD_VAR 0 2
42446: NOT
42447: OR
42448: PUSH
42449: LD_VAR 0 5
42453: PUSH
42454: LD_INT 0
42456: PUSH
42457: LD_INT 1
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 3
42465: PUSH
42466: LD_INT 4
42468: PUSH
42469: LD_INT 5
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: IN
42480: NOT
42481: OR
42482: PUSH
42483: LD_VAR 0 3
42487: PPUSH
42488: LD_VAR 0 4
42492: PPUSH
42493: CALL_OW 488
42497: NOT
42498: OR
42499: IFFALSE 42503
// exit ;
42501: GO 43220
// pom := GetBase ( depot ) ;
42503: LD_ADDR_VAR 0 10
42507: PUSH
42508: LD_VAR 0 1
42512: PPUSH
42513: CALL_OW 274
42517: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42518: LD_ADDR_VAR 0 11
42522: PUSH
42523: LD_VAR 0 2
42527: PPUSH
42528: LD_VAR 0 1
42532: PPUSH
42533: CALL_OW 248
42537: PPUSH
42538: CALL_OW 450
42542: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42543: LD_VAR 0 10
42547: PPUSH
42548: LD_INT 1
42550: PPUSH
42551: CALL_OW 275
42555: PUSH
42556: LD_VAR 0 11
42560: PUSH
42561: LD_INT 1
42563: ARRAY
42564: GREATEREQUAL
42565: PUSH
42566: LD_VAR 0 10
42570: PPUSH
42571: LD_INT 2
42573: PPUSH
42574: CALL_OW 275
42578: PUSH
42579: LD_VAR 0 11
42583: PUSH
42584: LD_INT 2
42586: ARRAY
42587: GREATEREQUAL
42588: AND
42589: PUSH
42590: LD_VAR 0 10
42594: PPUSH
42595: LD_INT 3
42597: PPUSH
42598: CALL_OW 275
42602: PUSH
42603: LD_VAR 0 11
42607: PUSH
42608: LD_INT 3
42610: ARRAY
42611: GREATEREQUAL
42612: AND
42613: NOT
42614: IFFALSE 42618
// exit ;
42616: GO 43220
// if GetBType ( depot ) = b_depot then
42618: LD_VAR 0 1
42622: PPUSH
42623: CALL_OW 266
42627: PUSH
42628: LD_INT 0
42630: EQUAL
42631: IFFALSE 42643
// dist := 28 else
42633: LD_ADDR_VAR 0 14
42637: PUSH
42638: LD_INT 28
42640: ST_TO_ADDR
42641: GO 42651
// dist := 36 ;
42643: LD_ADDR_VAR 0 14
42647: PUSH
42648: LD_INT 36
42650: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42651: LD_VAR 0 1
42655: PPUSH
42656: LD_VAR 0 3
42660: PPUSH
42661: LD_VAR 0 4
42665: PPUSH
42666: CALL_OW 297
42670: PUSH
42671: LD_VAR 0 14
42675: GREATER
42676: IFFALSE 42680
// exit ;
42678: GO 43220
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42680: LD_ADDR_VAR 0 12
42684: PUSH
42685: LD_VAR 0 2
42689: PPUSH
42690: LD_VAR 0 3
42694: PPUSH
42695: LD_VAR 0 4
42699: PPUSH
42700: LD_VAR 0 5
42704: PPUSH
42705: LD_VAR 0 1
42709: PPUSH
42710: CALL_OW 248
42714: PPUSH
42715: LD_INT 0
42717: PPUSH
42718: CALL 43225 0 6
42722: ST_TO_ADDR
// if not hexes then
42723: LD_VAR 0 12
42727: NOT
42728: IFFALSE 42732
// exit ;
42730: GO 43220
// hex := GetHexInfo ( x , y ) ;
42732: LD_ADDR_VAR 0 15
42736: PUSH
42737: LD_VAR 0 3
42741: PPUSH
42742: LD_VAR 0 4
42746: PPUSH
42747: CALL_OW 546
42751: ST_TO_ADDR
// if hex [ 1 ] then
42752: LD_VAR 0 15
42756: PUSH
42757: LD_INT 1
42759: ARRAY
42760: IFFALSE 42764
// exit ;
42762: GO 43220
// height := hex [ 2 ] ;
42764: LD_ADDR_VAR 0 13
42768: PUSH
42769: LD_VAR 0 15
42773: PUSH
42774: LD_INT 2
42776: ARRAY
42777: ST_TO_ADDR
// for i = 1 to hexes do
42778: LD_ADDR_VAR 0 7
42782: PUSH
42783: DOUBLE
42784: LD_INT 1
42786: DEC
42787: ST_TO_ADDR
42788: LD_VAR 0 12
42792: PUSH
42793: FOR_TO
42794: IFFALSE 43124
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42796: LD_VAR 0 12
42800: PUSH
42801: LD_VAR 0 7
42805: ARRAY
42806: PUSH
42807: LD_INT 1
42809: ARRAY
42810: PPUSH
42811: LD_VAR 0 12
42815: PUSH
42816: LD_VAR 0 7
42820: ARRAY
42821: PUSH
42822: LD_INT 2
42824: ARRAY
42825: PPUSH
42826: CALL_OW 488
42830: NOT
42831: PUSH
42832: LD_VAR 0 12
42836: PUSH
42837: LD_VAR 0 7
42841: ARRAY
42842: PUSH
42843: LD_INT 1
42845: ARRAY
42846: PPUSH
42847: LD_VAR 0 12
42851: PUSH
42852: LD_VAR 0 7
42856: ARRAY
42857: PUSH
42858: LD_INT 2
42860: ARRAY
42861: PPUSH
42862: CALL_OW 428
42866: PUSH
42867: LD_INT 0
42869: GREATER
42870: OR
42871: PUSH
42872: LD_VAR 0 12
42876: PUSH
42877: LD_VAR 0 7
42881: ARRAY
42882: PUSH
42883: LD_INT 1
42885: ARRAY
42886: PPUSH
42887: LD_VAR 0 12
42891: PUSH
42892: LD_VAR 0 7
42896: ARRAY
42897: PUSH
42898: LD_INT 2
42900: ARRAY
42901: PPUSH
42902: CALL_OW 351
42906: OR
42907: IFFALSE 42913
// exit ;
42909: POP
42910: POP
42911: GO 43220
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42913: LD_ADDR_VAR 0 8
42917: PUSH
42918: LD_VAR 0 12
42922: PUSH
42923: LD_VAR 0 7
42927: ARRAY
42928: PUSH
42929: LD_INT 1
42931: ARRAY
42932: PPUSH
42933: LD_VAR 0 12
42937: PUSH
42938: LD_VAR 0 7
42942: ARRAY
42943: PUSH
42944: LD_INT 2
42946: ARRAY
42947: PPUSH
42948: CALL_OW 546
42952: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42953: LD_VAR 0 8
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PUSH
42962: LD_VAR 0 8
42966: PUSH
42967: LD_INT 2
42969: ARRAY
42970: PUSH
42971: LD_VAR 0 13
42975: PUSH
42976: LD_INT 2
42978: PLUS
42979: GREATER
42980: OR
42981: PUSH
42982: LD_VAR 0 8
42986: PUSH
42987: LD_INT 2
42989: ARRAY
42990: PUSH
42991: LD_VAR 0 13
42995: PUSH
42996: LD_INT 2
42998: MINUS
42999: LESS
43000: OR
43001: PUSH
43002: LD_VAR 0 8
43006: PUSH
43007: LD_INT 3
43009: ARRAY
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 8
43016: PUSH
43017: LD_INT 9
43019: PUSH
43020: LD_INT 10
43022: PUSH
43023: LD_INT 11
43025: PUSH
43026: LD_INT 12
43028: PUSH
43029: LD_INT 13
43031: PUSH
43032: LD_INT 16
43034: PUSH
43035: LD_INT 17
43037: PUSH
43038: LD_INT 18
43040: PUSH
43041: LD_INT 19
43043: PUSH
43044: LD_INT 20
43046: PUSH
43047: LD_INT 21
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: IN
43065: NOT
43066: OR
43067: PUSH
43068: LD_VAR 0 8
43072: PUSH
43073: LD_INT 5
43075: ARRAY
43076: NOT
43077: OR
43078: PUSH
43079: LD_VAR 0 8
43083: PUSH
43084: LD_INT 6
43086: ARRAY
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 7
43096: PUSH
43097: LD_INT 9
43099: PUSH
43100: LD_INT 10
43102: PUSH
43103: LD_INT 11
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: IN
43114: NOT
43115: OR
43116: IFFALSE 43122
// exit ;
43118: POP
43119: POP
43120: GO 43220
// end ;
43122: GO 42793
43124: POP
43125: POP
// side := GetSide ( depot ) ;
43126: LD_ADDR_VAR 0 9
43130: PUSH
43131: LD_VAR 0 1
43135: PPUSH
43136: CALL_OW 255
43140: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43141: LD_VAR 0 9
43145: PPUSH
43146: LD_VAR 0 3
43150: PPUSH
43151: LD_VAR 0 4
43155: PPUSH
43156: LD_INT 20
43158: PPUSH
43159: CALL 35571 0 4
43163: PUSH
43164: LD_INT 4
43166: ARRAY
43167: IFFALSE 43171
// exit ;
43169: GO 43220
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43171: LD_VAR 0 2
43175: PUSH
43176: LD_INT 29
43178: PUSH
43179: LD_INT 30
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: IN
43186: PUSH
43187: LD_VAR 0 3
43191: PPUSH
43192: LD_VAR 0 4
43196: PPUSH
43197: LD_VAR 0 9
43201: PPUSH
43202: CALL_OW 440
43206: NOT
43207: AND
43208: IFFALSE 43212
// exit ;
43210: GO 43220
// result := true ;
43212: LD_ADDR_VAR 0 6
43216: PUSH
43217: LD_INT 1
43219: ST_TO_ADDR
// end ;
43220: LD_VAR 0 6
43224: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43225: LD_INT 0
43227: PPUSH
43228: PPUSH
43229: PPUSH
43230: PPUSH
43231: PPUSH
43232: PPUSH
43233: PPUSH
43234: PPUSH
43235: PPUSH
43236: PPUSH
43237: PPUSH
43238: PPUSH
43239: PPUSH
43240: PPUSH
43241: PPUSH
43242: PPUSH
43243: PPUSH
43244: PPUSH
43245: PPUSH
43246: PPUSH
43247: PPUSH
43248: PPUSH
43249: PPUSH
43250: PPUSH
43251: PPUSH
43252: PPUSH
43253: PPUSH
43254: PPUSH
43255: PPUSH
43256: PPUSH
43257: PPUSH
43258: PPUSH
43259: PPUSH
43260: PPUSH
43261: PPUSH
43262: PPUSH
43263: PPUSH
43264: PPUSH
43265: PPUSH
43266: PPUSH
43267: PPUSH
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
43276: PPUSH
43277: PPUSH
43278: PPUSH
43279: PPUSH
43280: PPUSH
43281: PPUSH
43282: PPUSH
43283: PPUSH
43284: PPUSH
// result = [ ] ;
43285: LD_ADDR_VAR 0 7
43289: PUSH
43290: EMPTY
43291: ST_TO_ADDR
// temp_list = [ ] ;
43292: LD_ADDR_VAR 0 9
43296: PUSH
43297: EMPTY
43298: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43299: LD_VAR 0 4
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: LD_INT 3
43315: PUSH
43316: LD_INT 4
43318: PUSH
43319: LD_INT 5
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: IN
43330: NOT
43331: PUSH
43332: LD_VAR 0 1
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: IN
43347: PUSH
43348: LD_VAR 0 5
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: LD_INT 3
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: LIST
43366: IN
43367: NOT
43368: AND
43369: OR
43370: IFFALSE 43374
// exit ;
43372: GO 61765
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43374: LD_VAR 0 1
43378: PUSH
43379: LD_INT 6
43381: PUSH
43382: LD_INT 7
43384: PUSH
43385: LD_INT 8
43387: PUSH
43388: LD_INT 13
43390: PUSH
43391: LD_INT 12
43393: PUSH
43394: LD_INT 15
43396: PUSH
43397: LD_INT 11
43399: PUSH
43400: LD_INT 14
43402: PUSH
43403: LD_INT 10
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: IN
43417: IFFALSE 43427
// btype = b_lab ;
43419: LD_ADDR_VAR 0 1
43423: PUSH
43424: LD_INT 6
43426: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43427: LD_VAR 0 6
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 2
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: LIST
43445: IN
43446: NOT
43447: PUSH
43448: LD_VAR 0 1
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 1
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: LD_INT 6
43467: PUSH
43468: LD_INT 36
43470: PUSH
43471: LD_INT 4
43473: PUSH
43474: LD_INT 5
43476: PUSH
43477: LD_INT 31
43479: PUSH
43480: LD_INT 32
43482: PUSH
43483: LD_INT 33
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: IN
43499: NOT
43500: PUSH
43501: LD_VAR 0 6
43505: PUSH
43506: LD_INT 1
43508: EQUAL
43509: AND
43510: OR
43511: PUSH
43512: LD_VAR 0 1
43516: PUSH
43517: LD_INT 2
43519: PUSH
43520: LD_INT 3
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: IN
43527: NOT
43528: PUSH
43529: LD_VAR 0 6
43533: PUSH
43534: LD_INT 2
43536: EQUAL
43537: AND
43538: OR
43539: IFFALSE 43549
// mode = 0 ;
43541: LD_ADDR_VAR 0 6
43545: PUSH
43546: LD_INT 0
43548: ST_TO_ADDR
// case mode of 0 :
43549: LD_VAR 0 6
43553: PUSH
43554: LD_INT 0
43556: DOUBLE
43557: EQUAL
43558: IFTRUE 43562
43560: GO 55015
43562: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43563: LD_ADDR_VAR 0 11
43567: PUSH
43568: LD_INT 0
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 0
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: LD_INT 2
43659: NEG
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 1
43670: NEG
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: PUSH
43679: LD_INT 2
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43756: LD_ADDR_VAR 0 12
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 0
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: LD_INT 0
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: NEG
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: NEG
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 3
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43952: LD_ADDR_VAR 0 13
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 1
43972: NEG
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 1
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 2
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 2
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: NEG
44100: PUSH
44101: LD_INT 3
44103: NEG
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: PUSH
44109: LD_INT 3
44111: NEG
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 3
44123: NEG
44124: PUSH
44125: LD_INT 3
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44151: LD_ADDR_VAR 0 14
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 0
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: NEG
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 2
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 1
44286: NEG
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: LD_INT 3
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: LD_INT 3
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44347: LD_ADDR_VAR 0 15
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 0
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 0
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 0
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 2
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 2
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 3
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 3
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44540: LD_ADDR_VAR 0 16
44544: PUSH
44545: LD_INT 0
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 1
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: NEG
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: NEG
44676: PUSH
44677: LD_INT 2
44679: NEG
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 3
44687: PUSH
44688: LD_INT 2
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: LD_INT 3
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44733: LD_ADDR_VAR 0 17
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: LD_INT 2
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 2
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 2
44858: PUSH
44859: LD_INT 1
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 2
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 2
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 2
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44963: LD_ADDR_VAR 0 18
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 2
45078: PUSH
45079: LD_INT 0
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: LD_INT 1
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 2
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 1
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 2
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: NEG
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: LD_INT 1
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 2
45162: NEG
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45193: LD_ADDR_VAR 0 19
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: LD_INT 0
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: LD_INT 1
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: LD_INT 0
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 0
45286: PUSH
45287: LD_INT 2
45289: NEG
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 2
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 2
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: LD_INT 2
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45423: LD_ADDR_VAR 0 20
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: LD_INT 0
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 0
45440: PUSH
45441: LD_INT 1
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 1
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 1
45481: NEG
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: NEG
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: NEG
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 2
45622: NEG
45623: PUSH
45624: LD_INT 2
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45653: LD_ADDR_VAR 0 21
45657: PUSH
45658: LD_INT 0
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: LD_INT 0
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: LD_INT 1
45726: NEG
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: NEG
45735: PUSH
45736: LD_INT 2
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: LD_INT 2
45749: NEG
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 2
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 2
45778: PUSH
45779: LD_INT 1
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: NEG
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 2
45840: NEG
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 2
45852: NEG
45853: PUSH
45854: LD_INT 2
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45883: LD_ADDR_VAR 0 22
45887: PUSH
45888: LD_INT 0
45890: PUSH
45891: LD_INT 0
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: LD_INT 1
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: LD_INT 0
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 2
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 2
46059: NEG
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 2
46070: NEG
46071: PUSH
46072: LD_INT 1
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46113: LD_ADDR_VAR 0 23
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 0
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: NEG
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 2
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 2
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 2
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 2
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: NEG
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: LD_INT 2
46316: NEG
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: LD_INT 3
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 3
46340: NEG
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 2
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46393: LD_ADDR_VAR 0 24
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 1
46462: NEG
46463: PUSH
46464: LD_INT 1
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 2
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 2
46489: NEG
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: NEG
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: PUSH
46509: LD_INT 0
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 2
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: PUSH
46529: LD_INT 2
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 2
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 2
46569: NEG
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 3
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 3
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46669: LD_ADDR_VAR 0 25
46673: PUSH
46674: LD_INT 0
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 2
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46943: LD_ADDR_VAR 0 26
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 0
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: LD_INT 0
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 1
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 2
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: LD_INT 0
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 2
47130: NEG
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: LD_INT 2
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: NEG
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47219: LD_ADDR_VAR 0 27
47223: PUSH
47224: LD_INT 0
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: NEG
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: LD_INT 1
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 2
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 2
47344: PUSH
47345: LD_INT 1
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 1
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 0
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: NEG
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 2
47441: NEG
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: NEG
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: LD_INT 2
47468: NEG
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47499: LD_ADDR_VAR 0 28
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 2
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: LD_INT 1
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 2
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 2
47710: NEG
47711: PUSH
47712: LD_INT 3
47714: NEG
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 3
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 3
47746: NEG
47747: PUSH
47748: LD_INT 2
47750: NEG
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47781: LD_ADDR_VAR 0 29
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 2
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 3
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 1
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 3
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 3
48025: NEG
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48060: LD_ADDR_VAR 0 30
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 0
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: PUSH
48099: LD_INT 1
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 1
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 2
48156: NEG
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 2
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 3
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 3
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 3
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 3
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48338: LD_ADDR_VAR 0 31
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 1
48358: NEG
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 1
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: LD_INT 1
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: LD_INT 3
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: LD_INT 3
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 3
48581: NEG
48582: PUSH
48583: LD_INT 2
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48616: LD_ADDR_VAR 0 32
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 0
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: LD_INT 1
48689: NEG
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: LD_INT 2
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 2
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 2
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: NEG
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 3
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 3
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 3
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 1
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 3
48859: NEG
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48894: LD_ADDR_VAR 0 33
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: LD_INT 0
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 0
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: LD_INT 1
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: LD_INT 0
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 2
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 0
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 2
49072: NEG
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: NEG
49085: PUSH
49086: LD_INT 3
49088: NEG
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: LD_INT 1
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 3
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: NEG
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: NEG
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49173: LD_ADDR_VAR 0 34
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 1
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: PUSH
49377: LD_INT 2
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 3
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 2
49397: PUSH
49398: LD_INT 3
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49453: LD_ADDR_VAR 0 35
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 2
49544: NEG
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49565: LD_ADDR_VAR 0 36
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 0
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 2
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49677: LD_ADDR_VAR 0 37
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: LD_INT 1
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 1
49705: PUSH
49706: LD_INT 0
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: LD_INT 1
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: NEG
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49789: LD_ADDR_VAR 0 38
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 0
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 1
49847: NEG
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49901: LD_ADDR_VAR 0 39
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 1
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50013: LD_ADDR_VAR 0 40
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 0
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 0
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 1
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50125: LD_ADDR_VAR 0 41
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 1
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: LD_INT 0
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: NEG
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 2
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 2
50280: NEG
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: LD_INT 1
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: LD_INT 2
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 3
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 3
50368: PUSH
50369: LD_INT 3
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 2
50378: PUSH
50379: LD_INT 3
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 3
50399: NEG
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 3
50410: NEG
50411: PUSH
50412: LD_INT 1
50414: NEG
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 3
50422: NEG
50423: PUSH
50424: LD_INT 2
50426: NEG
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 3
50434: NEG
50435: PUSH
50436: LD_INT 3
50438: NEG
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50475: LD_ADDR_VAR 0 42
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 1
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 1
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 0
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: LD_INT 2
50560: NEG
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 0
50568: PUSH
50569: LD_INT 2
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 1
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 2
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 2
50665: NEG
50666: PUSH
50667: LD_INT 3
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: LD_INT 3
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 3
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: LD_INT 2
50703: NEG
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 3
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 3
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: LD_INT 3
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: LD_INT 3
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 3
50772: NEG
50773: PUSH
50774: LD_INT 2
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 3
50784: NEG
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50825: LD_ADDR_VAR 0 43
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 2
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 2
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: PUSH
50951: LD_INT 1
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 2
50991: NEG
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 3
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 3
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: NEG
51122: PUSH
51123: LD_INT 0
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 3
51132: NEG
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51173: LD_ADDR_VAR 0 44
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 0
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: NEG
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 2
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: NEG
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 3
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: LD_INT 2
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: LD_INT 3
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 3
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: NEG
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51523: LD_ADDR_VAR 0 45
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 1
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 2
51689: NEG
51690: PUSH
51691: LD_INT 1
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 2
51701: NEG
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 3
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 3
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 2
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 3
51759: PUSH
51760: LD_INT 2
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 3
51769: PUSH
51770: LD_INT 3
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 3
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 1
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 3
51820: NEG
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51873: LD_ADDR_VAR 0 46
51877: PUSH
51878: LD_INT 0
51880: PUSH
51881: LD_INT 0
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 0
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 2
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 2
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 1
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 2
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 0
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 3
52107: PUSH
52108: LD_INT 0
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 3
52117: PUSH
52118: LD_INT 1
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 3
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 3
52169: NEG
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 3
52180: NEG
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52221: LD_ADDR_VAR 0 47
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: NEG
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52372: LD_ADDR_VAR 0 48
52376: PUSH
52377: LD_INT 0
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 0
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 1
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: LD_INT 2
52468: NEG
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: LD_INT 1
52479: NEG
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 2
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52519: LD_ADDR_VAR 0 49
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 1
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: PUSH
52601: LD_INT 1
52603: NEG
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: LD_INT 0
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: LD_INT 1
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: LD_INT 2
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 1
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52663: LD_ADDR_VAR 0 50
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 1
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 1
52732: NEG
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 2
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 2
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 2
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52807: LD_ADDR_VAR 0 51
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 1
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: NEG
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 0
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 1
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52954: LD_ADDR_VAR 0 52
52958: PUSH
52959: LD_INT 0
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 2
53069: NEG
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: LD_INT 2
53085: NEG
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53105: LD_ADDR_VAR 0 53
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 1
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: LD_INT 1
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 1
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 1
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 2
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 2
53201: NEG
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 2
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 1
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 2
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: LD_INT 1
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 2
53281: NEG
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: LD_INT 2
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53335: LD_ADDR_VAR 0 54
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 2
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 2
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 2
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 2
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 2
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53565: LD_ADDR_VAR 0 55
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 0
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 0
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 1
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 2
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 2
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: LD_INT 2
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 2
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 1
53730: NEG
53731: PUSH
53732: LD_INT 1
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 0
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: LD_INT 1
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 2
53764: NEG
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53795: LD_ADDR_VAR 0 56
53799: PUSH
53800: LD_INT 0
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 1
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: LD_INT 0
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: LD_INT 1
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 1
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: LD_INT 0
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 2
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 2
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 2
53930: PUSH
53931: LD_INT 2
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: LD_INT 2
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: NEG
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 2
53971: NEG
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 2
53982: NEG
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: LD_INT 2
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54025: LD_ADDR_VAR 0 57
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 1
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 1
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 1
54106: NEG
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 0
54118: PUSH
54119: LD_INT 2
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 1
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: PUSH
54138: LD_INT 2
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 1
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 2
54224: NEG
54225: PUSH
54226: LD_INT 2
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54255: LD_ADDR_VAR 0 58
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 0
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 1
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 1
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 2
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: LD_INT 2
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 2
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 2
54431: NEG
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 2
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54485: LD_ADDR_VAR 0 59
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 0
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54573: LD_ADDR_VAR 0 60
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 0
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54661: LD_ADDR_VAR 0 61
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 1
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54749: LD_ADDR_VAR 0 62
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 0
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54837: LD_ADDR_VAR 0 63
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 0
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: LD_INT 0
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54925: LD_ADDR_VAR 0 64
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 0
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 1
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: ST_TO_ADDR
// end ; 1 :
55013: GO 60910
55015: LD_INT 1
55017: DOUBLE
55018: EQUAL
55019: IFTRUE 55023
55021: GO 57646
55023: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55024: LD_ADDR_VAR 0 11
55028: PUSH
55029: LD_INT 1
55031: NEG
55032: PUSH
55033: LD_INT 3
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: LD_INT 3
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: LIST
55067: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55068: LD_ADDR_VAR 0 12
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: LIST
55108: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55109: LD_ADDR_VAR 0 13
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 3
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 3
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55149: LD_ADDR_VAR 0 14
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 3
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: LD_INT 3
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55190: LD_ADDR_VAR 0 15
55194: PUSH
55195: LD_INT 2
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: LIST
55233: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55234: LD_ADDR_VAR 0 16
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: LD_INT 2
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: LD_INT 3
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55280: LD_ADDR_VAR 0 17
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 0
55299: PUSH
55300: LD_INT 3
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: LIST
55323: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55324: LD_ADDR_VAR 0 18
55328: PUSH
55329: LD_INT 2
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 3
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 3
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55365: LD_ADDR_VAR 0 19
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: LD_INT 2
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: LD_INT 3
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 3
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55405: LD_ADDR_VAR 0 20
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 3
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 3
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: LIST
55445: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55446: LD_ADDR_VAR 0 21
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 3
55475: NEG
55476: PUSH
55477: LD_INT 1
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55490: LD_ADDR_VAR 0 22
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: LD_INT 3
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 3
55509: NEG
55510: PUSH
55511: LD_INT 2
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 3
55521: NEG
55522: PUSH
55523: LD_INT 3
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: LIST
55535: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55536: LD_ADDR_VAR 0 23
55540: PUSH
55541: LD_INT 0
55543: PUSH
55544: LD_INT 3
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 4
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 3
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: LIST
55579: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55580: LD_ADDR_VAR 0 24
55584: PUSH
55585: LD_INT 3
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 3
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 4
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55621: LD_ADDR_VAR 0 25
55625: PUSH
55626: LD_INT 3
55628: PUSH
55629: LD_INT 3
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 3
55648: PUSH
55649: LD_INT 4
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55661: LD_ADDR_VAR 0 26
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: LD_INT 4
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: LIST
55701: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55702: LD_ADDR_VAR 0 27
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 4
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55746: LD_ADDR_VAR 0 28
55750: PUSH
55751: LD_INT 3
55753: NEG
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 3
55765: NEG
55766: PUSH
55767: LD_INT 4
55769: NEG
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 4
55777: NEG
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: LIST
55791: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55792: LD_ADDR_VAR 0 29
55796: PUSH
55797: LD_INT 1
55799: NEG
55800: PUSH
55801: LD_INT 3
55803: NEG
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: LD_INT 4
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 4
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: LD_INT 5
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 5
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: LD_INT 4
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: LD_INT 6
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: LD_INT 6
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 5
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55947: LD_ADDR_VAR 0 30
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 3
55975: PUSH
55976: LD_INT 1
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 4
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 4
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 4
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 5
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 5
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 5
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 6
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 6
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56090: LD_ADDR_VAR 0 31
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 4
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 4
56137: PUSH
56138: LD_INT 4
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 3
56147: PUSH
56148: LD_INT 4
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 5
56157: PUSH
56158: LD_INT 4
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 5
56167: PUSH
56168: LD_INT 5
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 4
56177: PUSH
56178: LD_INT 5
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 6
56187: PUSH
56188: LD_INT 5
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 6
56197: PUSH
56198: LD_INT 6
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 5
56207: PUSH
56208: LD_INT 6
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56229: LD_ADDR_VAR 0 32
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 3
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 4
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 4
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 5
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: LD_INT 5
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 4
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 6
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 0
56339: PUSH
56340: LD_INT 6
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: LD_INT 5
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56372: LD_ADDR_VAR 0 33
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: LD_INT 1
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 3
56390: NEG
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 3
56401: NEG
56402: PUSH
56403: LD_INT 1
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 3
56413: NEG
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 4
56424: NEG
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 4
56435: NEG
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 4
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 5
56458: NEG
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 5
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 5
56481: NEG
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 6
56492: NEG
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 6
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56527: LD_ADDR_VAR 0 34
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 3
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 3
56558: NEG
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 3
56570: NEG
56571: PUSH
56572: LD_INT 4
56574: NEG
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 4
56582: NEG
56583: PUSH
56584: LD_INT 3
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 4
56594: NEG
56595: PUSH
56596: LD_INT 4
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: LD_INT 5
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 5
56618: NEG
56619: PUSH
56620: LD_INT 4
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 5
56630: NEG
56631: PUSH
56632: LD_INT 5
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 5
56642: NEG
56643: PUSH
56644: LD_INT 6
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 6
56654: NEG
56655: PUSH
56656: LD_INT 5
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 6
56666: NEG
56667: PUSH
56668: LD_INT 6
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56690: LD_ADDR_VAR 0 41
56694: PUSH
56695: LD_INT 0
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: NEG
56709: PUSH
56710: LD_INT 3
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 2
56723: NEG
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: LIST
56733: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56734: LD_ADDR_VAR 0 42
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: LIST
56774: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56775: LD_ADDR_VAR 0 43
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 3
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 2
56802: PUSH
56803: LD_INT 3
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56815: LD_ADDR_VAR 0 44
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 2
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: LD_INT 1
56842: NEG
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: LIST
56855: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56856: LD_ADDR_VAR 0 45
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: LIST
56899: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56900: LD_ADDR_VAR 0 46
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 2
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56946: LD_ADDR_VAR 0 47
56950: PUSH
56951: LD_INT 2
56953: NEG
56954: PUSH
56955: LD_INT 3
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: NEG
56966: PUSH
56967: LD_INT 3
56969: NEG
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56979: LD_ADDR_VAR 0 48
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 2
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 2
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57010: LD_ADDR_VAR 0 49
57014: PUSH
57015: LD_INT 3
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: PUSH
57028: LD_INT 2
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57039: LD_ADDR_VAR 0 50
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: LD_INT 3
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57068: LD_ADDR_VAR 0 51
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 2
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57099: LD_ADDR_VAR 0 52
57103: PUSH
57104: LD_INT 3
57106: NEG
57107: PUSH
57108: LD_INT 1
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 3
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57132: LD_ADDR_VAR 0 53
57136: PUSH
57137: LD_INT 1
57139: NEG
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: LD_INT 3
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 2
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57176: LD_ADDR_VAR 0 54
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57217: LD_ADDR_VAR 0 55
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 3
57234: PUSH
57235: LD_INT 3
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: PUSH
57245: LD_INT 3
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: LIST
57256: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57257: LD_ADDR_VAR 0 56
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: LD_INT 3
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 1
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: LIST
57297: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57298: LD_ADDR_VAR 0 57
57302: PUSH
57303: LD_INT 2
57305: NEG
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 3
57327: NEG
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57342: LD_ADDR_VAR 0 58
57346: PUSH
57347: LD_INT 2
57349: NEG
57350: PUSH
57351: LD_INT 3
57353: NEG
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 3
57361: NEG
57362: PUSH
57363: LD_INT 2
57365: NEG
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 3
57373: NEG
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: LIST
57387: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57388: LD_ADDR_VAR 0 59
57392: PUSH
57393: LD_INT 1
57395: NEG
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 1
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57432: LD_ADDR_VAR 0 60
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: LIST
57472: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57473: LD_ADDR_VAR 0 61
57477: PUSH
57478: LD_INT 2
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 2
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: LIST
57512: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57513: LD_ADDR_VAR 0 62
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 2
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: LD_INT 2
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57554: LD_ADDR_VAR 0 63
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: NEG
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57598: LD_ADDR_VAR 0 64
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: NEG
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: ST_TO_ADDR
// end ; 2 :
57644: GO 60910
57646: LD_INT 2
57648: DOUBLE
57649: EQUAL
57650: IFTRUE 57654
57652: GO 60909
57654: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57655: LD_ADDR_VAR 0 29
57659: PUSH
57660: LD_INT 4
57662: PUSH
57663: LD_INT 0
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 4
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 5
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 5
57693: PUSH
57694: LD_INT 1
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 4
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 3
57713: PUSH
57714: LD_INT 0
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 5
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 3
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 3
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 4
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 4
57785: PUSH
57786: LD_INT 4
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 4
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 4
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 4
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: LD_INT 4
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: LD_INT 1
57865: PUSH
57866: LD_INT 4
57868: PUSH
57869: EMPTY
57870: LIST
57871: LIST
57872: PUSH
57873: LD_INT 1
57875: PUSH
57876: LD_INT 5
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 0
57885: PUSH
57886: LD_INT 5
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 1
57895: NEG
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 1
57906: NEG
57907: PUSH
57908: LD_INT 3
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 2
57917: PUSH
57918: LD_INT 5
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PUSH
57925: LD_INT 2
57927: NEG
57928: PUSH
57929: LD_INT 3
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 3
57949: NEG
57950: PUSH
57951: LD_INT 1
57953: NEG
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 4
57994: NEG
57995: PUSH
57996: LD_INT 0
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 4
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 4
58017: NEG
58018: PUSH
58019: LD_INT 2
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 4
58040: NEG
58041: PUSH
58042: LD_INT 4
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 4
58052: NEG
58053: PUSH
58054: LD_INT 5
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: NEG
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 3
58076: NEG
58077: PUSH
58078: LD_INT 3
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 4
58088: NEG
58089: PUSH
58090: LD_INT 3
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 5
58100: NEG
58101: PUSH
58102: LD_INT 4
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 5
58112: NEG
58113: PUSH
58114: LD_INT 5
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 3
58124: NEG
58125: PUSH
58126: LD_INT 5
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: NEG
58137: PUSH
58138: LD_INT 3
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58193: LD_ADDR_VAR 0 30
58197: PUSH
58198: LD_INT 4
58200: PUSH
58201: LD_INT 4
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 4
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 5
58220: PUSH
58221: LD_INT 4
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 5
58230: PUSH
58231: LD_INT 5
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 4
58240: PUSH
58241: LD_INT 5
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 3
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 3
58260: PUSH
58261: LD_INT 3
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 5
58270: PUSH
58271: LD_INT 3
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: LD_INT 5
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 0
58290: PUSH
58291: LD_INT 3
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PUSH
58321: LD_INT 4
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: LD_INT 4
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: LD_INT 4
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 2
58372: NEG
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 4
58383: NEG
58384: PUSH
58385: LD_INT 0
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: LD_INT 0
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 3
58417: NEG
58418: PUSH
58419: LD_INT 1
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 5
58439: NEG
58440: PUSH
58441: LD_INT 0
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 5
58450: NEG
58451: PUSH
58452: LD_INT 1
58454: NEG
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 5
58462: NEG
58463: PUSH
58464: LD_INT 2
58466: NEG
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 3
58474: NEG
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: LD_INT 3
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 3
58497: NEG
58498: PUSH
58499: LD_INT 4
58501: NEG
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: LD_INT 3
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 2
58521: NEG
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 4
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 4
58557: NEG
58558: PUSH
58559: LD_INT 4
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 2
58569: NEG
58570: PUSH
58571: LD_INT 4
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: LD_INT 2
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: LD_INT 4
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: LD_INT 5
58607: NEG
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: LD_INT 3
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 1
58648: NEG
58649: PUSH
58650: LD_INT 4
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: LD_INT 5
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: LD_INT 5
58687: NEG
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58740: LD_ADDR_VAR 0 31
58744: PUSH
58745: LD_INT 0
58747: PUSH
58748: LD_INT 4
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: LD_INT 3
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: LD_INT 4
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 5
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: LD_INT 5
58790: PUSH
58791: EMPTY
58792: LIST
58793: LIST
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 3
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 2
58819: PUSH
58820: LD_INT 5
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: NEG
58830: PUSH
58831: LD_INT 3
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 0
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: NEG
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 4
58896: NEG
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 4
58907: NEG
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 4
58919: NEG
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 4
58942: NEG
58943: PUSH
58944: LD_INT 4
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 4
58954: NEG
58955: PUSH
58956: LD_INT 5
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: NEG
58967: PUSH
58968: LD_INT 4
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 3
58978: NEG
58979: PUSH
58980: LD_INT 3
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 4
58990: NEG
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 5
59002: NEG
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 5
59014: NEG
59015: PUSH
59016: LD_INT 5
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 3
59026: NEG
59027: PUSH
59028: LD_INT 5
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 5
59038: NEG
59039: PUSH
59040: LD_INT 3
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 0
59050: PUSH
59051: LD_INT 3
59053: NEG
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: LD_INT 4
59064: NEG
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: LD_INT 2
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 3
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: NEG
59118: PUSH
59119: LD_INT 4
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: LD_INT 2
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 4
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 4
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 4
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 5
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 5
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 4
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 3
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 3
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 5
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59290: LD_ADDR_VAR 0 32
59294: PUSH
59295: LD_INT 4
59297: NEG
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 5
59353: NEG
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 5
59364: NEG
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 5
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: LD_INT 3
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: LD_INT 4
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: NEG
59424: PUSH
59425: LD_INT 3
59427: NEG
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: NEG
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 3
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 4
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 4
59471: NEG
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 4
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 0
59507: PUSH
59508: LD_INT 4
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: LD_INT 5
59521: NEG
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: LD_INT 4
59532: NEG
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: LD_INT 3
59543: NEG
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: LD_INT 3
59554: NEG
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: LD_INT 4
59566: NEG
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 5
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: LD_INT 3
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 2
59597: NEG
59598: PUSH
59599: LD_INT 5
59601: NEG
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 3
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 4
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 4
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 2
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 2
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 4
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: LD_INT 4
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 4
59712: PUSH
59713: LD_INT 3
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 5
59722: PUSH
59723: LD_INT 4
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 5
59732: PUSH
59733: LD_INT 5
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: PUSH
59743: LD_INT 5
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: PUSH
59753: LD_INT 4
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 3
59762: PUSH
59763: LD_INT 3
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 5
59772: PUSH
59773: LD_INT 3
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 3
59782: PUSH
59783: LD_INT 5
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59837: LD_ADDR_VAR 0 33
59841: PUSH
59842: LD_INT 4
59844: NEG
59845: PUSH
59846: LD_INT 4
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 4
59856: NEG
59857: PUSH
59858: LD_INT 5
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: NEG
59869: PUSH
59870: LD_INT 4
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 3
59880: NEG
59881: PUSH
59882: LD_INT 3
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 4
59892: NEG
59893: PUSH
59894: LD_INT 3
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 5
59904: NEG
59905: PUSH
59906: LD_INT 4
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 5
59916: NEG
59917: PUSH
59918: LD_INT 5
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 3
59928: NEG
59929: PUSH
59930: LD_INT 5
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 5
59940: NEG
59941: PUSH
59942: LD_INT 3
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 3
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: LD_INT 4
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 2
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 2
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: NEG
60008: PUSH
60009: LD_INT 3
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 4
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: LD_INT 2
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: LD_INT 4
60046: NEG
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 4
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 4
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 5
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 5
60085: PUSH
60086: LD_INT 1
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 4
60095: PUSH
60096: LD_INT 1
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 3
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 3
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 5
60137: PUSH
60138: LD_INT 2
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 3
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 4
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 4
60177: PUSH
60178: LD_INT 4
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 4
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: LD_INT 3
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 4
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 4
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: LD_INT 4
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 4
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 5
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 5
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 4
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 3
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: LD_INT 5
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 2
60319: NEG
60320: PUSH
60321: LD_INT 3
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60375: LD_ADDR_VAR 0 34
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 4
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 0
60393: PUSH
60394: LD_INT 5
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: PUSH
60405: LD_INT 4
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: PUSH
60416: LD_INT 3
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 1
60437: NEG
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 1
60449: NEG
60450: PUSH
60451: LD_INT 5
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 2
60461: PUSH
60462: LD_INT 3
60464: NEG
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 2
60472: NEG
60473: PUSH
60474: LD_INT 5
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 3
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 3
60494: PUSH
60495: LD_INT 1
60497: NEG
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 4
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 4
60515: PUSH
60516: LD_INT 1
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 3
60525: PUSH
60526: LD_INT 1
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 2
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: PUSH
60546: LD_INT 1
60548: NEG
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: LD_INT 2
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: LD_INT 2
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 4
60577: PUSH
60578: LD_INT 4
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 4
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 5
60597: PUSH
60598: LD_INT 4
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 5
60607: PUSH
60608: LD_INT 5
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 4
60617: PUSH
60618: LD_INT 5
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 3
60627: PUSH
60628: LD_INT 4
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: LD_INT 3
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 5
60647: PUSH
60648: LD_INT 3
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 3
60657: PUSH
60658: LD_INT 5
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 3
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 3
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 4
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: LD_INT 4
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: LD_INT 3
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: LD_INT 2
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 2
60739: PUSH
60740: LD_INT 4
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 2
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 4
60760: NEG
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 4
60771: NEG
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: NEG
60795: PUSH
60796: LD_INT 1
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 4
60805: NEG
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 5
60816: NEG
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 5
60827: NEG
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 5
60839: NEG
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 3
60851: NEG
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: ST_TO_ADDR
// end ; end ;
60907: GO 60910
60909: POP
// case btype of b_depot , b_warehouse :
60910: LD_VAR 0 1
60914: PUSH
60915: LD_INT 0
60917: DOUBLE
60918: EQUAL
60919: IFTRUE 60929
60921: LD_INT 1
60923: DOUBLE
60924: EQUAL
60925: IFTRUE 60929
60927: GO 61130
60929: POP
// case nation of nation_american :
60930: LD_VAR 0 5
60934: PUSH
60935: LD_INT 1
60937: DOUBLE
60938: EQUAL
60939: IFTRUE 60943
60941: GO 60999
60943: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60944: LD_ADDR_VAR 0 9
60948: PUSH
60949: LD_VAR 0 11
60953: PUSH
60954: LD_VAR 0 12
60958: PUSH
60959: LD_VAR 0 13
60963: PUSH
60964: LD_VAR 0 14
60968: PUSH
60969: LD_VAR 0 15
60973: PUSH
60974: LD_VAR 0 16
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: PUSH
60987: LD_VAR 0 4
60991: PUSH
60992: LD_INT 1
60994: PLUS
60995: ARRAY
60996: ST_TO_ADDR
60997: GO 61128
60999: LD_INT 2
61001: DOUBLE
61002: EQUAL
61003: IFTRUE 61007
61005: GO 61063
61007: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61008: LD_ADDR_VAR 0 9
61012: PUSH
61013: LD_VAR 0 17
61017: PUSH
61018: LD_VAR 0 18
61022: PUSH
61023: LD_VAR 0 19
61027: PUSH
61028: LD_VAR 0 20
61032: PUSH
61033: LD_VAR 0 21
61037: PUSH
61038: LD_VAR 0 22
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: PUSH
61051: LD_VAR 0 4
61055: PUSH
61056: LD_INT 1
61058: PLUS
61059: ARRAY
61060: ST_TO_ADDR
61061: GO 61128
61063: LD_INT 3
61065: DOUBLE
61066: EQUAL
61067: IFTRUE 61071
61069: GO 61127
61071: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61072: LD_ADDR_VAR 0 9
61076: PUSH
61077: LD_VAR 0 23
61081: PUSH
61082: LD_VAR 0 24
61086: PUSH
61087: LD_VAR 0 25
61091: PUSH
61092: LD_VAR 0 26
61096: PUSH
61097: LD_VAR 0 27
61101: PUSH
61102: LD_VAR 0 28
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: PUSH
61115: LD_VAR 0 4
61119: PUSH
61120: LD_INT 1
61122: PLUS
61123: ARRAY
61124: ST_TO_ADDR
61125: GO 61128
61127: POP
61128: GO 61683
61130: LD_INT 2
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61144
61136: LD_INT 3
61138: DOUBLE
61139: EQUAL
61140: IFTRUE 61144
61142: GO 61200
61144: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61145: LD_ADDR_VAR 0 9
61149: PUSH
61150: LD_VAR 0 29
61154: PUSH
61155: LD_VAR 0 30
61159: PUSH
61160: LD_VAR 0 31
61164: PUSH
61165: LD_VAR 0 32
61169: PUSH
61170: LD_VAR 0 33
61174: PUSH
61175: LD_VAR 0 34
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: PUSH
61188: LD_VAR 0 4
61192: PUSH
61193: LD_INT 1
61195: PLUS
61196: ARRAY
61197: ST_TO_ADDR
61198: GO 61683
61200: LD_INT 16
61202: DOUBLE
61203: EQUAL
61204: IFTRUE 61262
61206: LD_INT 17
61208: DOUBLE
61209: EQUAL
61210: IFTRUE 61262
61212: LD_INT 18
61214: DOUBLE
61215: EQUAL
61216: IFTRUE 61262
61218: LD_INT 19
61220: DOUBLE
61221: EQUAL
61222: IFTRUE 61262
61224: LD_INT 22
61226: DOUBLE
61227: EQUAL
61228: IFTRUE 61262
61230: LD_INT 20
61232: DOUBLE
61233: EQUAL
61234: IFTRUE 61262
61236: LD_INT 21
61238: DOUBLE
61239: EQUAL
61240: IFTRUE 61262
61242: LD_INT 23
61244: DOUBLE
61245: EQUAL
61246: IFTRUE 61262
61248: LD_INT 24
61250: DOUBLE
61251: EQUAL
61252: IFTRUE 61262
61254: LD_INT 25
61256: DOUBLE
61257: EQUAL
61258: IFTRUE 61262
61260: GO 61318
61262: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61263: LD_ADDR_VAR 0 9
61267: PUSH
61268: LD_VAR 0 35
61272: PUSH
61273: LD_VAR 0 36
61277: PUSH
61278: LD_VAR 0 37
61282: PUSH
61283: LD_VAR 0 38
61287: PUSH
61288: LD_VAR 0 39
61292: PUSH
61293: LD_VAR 0 40
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: PUSH
61306: LD_VAR 0 4
61310: PUSH
61311: LD_INT 1
61313: PLUS
61314: ARRAY
61315: ST_TO_ADDR
61316: GO 61683
61318: LD_INT 6
61320: DOUBLE
61321: EQUAL
61322: IFTRUE 61374
61324: LD_INT 7
61326: DOUBLE
61327: EQUAL
61328: IFTRUE 61374
61330: LD_INT 8
61332: DOUBLE
61333: EQUAL
61334: IFTRUE 61374
61336: LD_INT 13
61338: DOUBLE
61339: EQUAL
61340: IFTRUE 61374
61342: LD_INT 12
61344: DOUBLE
61345: EQUAL
61346: IFTRUE 61374
61348: LD_INT 15
61350: DOUBLE
61351: EQUAL
61352: IFTRUE 61374
61354: LD_INT 11
61356: DOUBLE
61357: EQUAL
61358: IFTRUE 61374
61360: LD_INT 14
61362: DOUBLE
61363: EQUAL
61364: IFTRUE 61374
61366: LD_INT 10
61368: DOUBLE
61369: EQUAL
61370: IFTRUE 61374
61372: GO 61430
61374: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61375: LD_ADDR_VAR 0 9
61379: PUSH
61380: LD_VAR 0 41
61384: PUSH
61385: LD_VAR 0 42
61389: PUSH
61390: LD_VAR 0 43
61394: PUSH
61395: LD_VAR 0 44
61399: PUSH
61400: LD_VAR 0 45
61404: PUSH
61405: LD_VAR 0 46
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: PUSH
61418: LD_VAR 0 4
61422: PUSH
61423: LD_INT 1
61425: PLUS
61426: ARRAY
61427: ST_TO_ADDR
61428: GO 61683
61430: LD_INT 36
61432: DOUBLE
61433: EQUAL
61434: IFTRUE 61438
61436: GO 61494
61438: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61439: LD_ADDR_VAR 0 9
61443: PUSH
61444: LD_VAR 0 47
61448: PUSH
61449: LD_VAR 0 48
61453: PUSH
61454: LD_VAR 0 49
61458: PUSH
61459: LD_VAR 0 50
61463: PUSH
61464: LD_VAR 0 51
61468: PUSH
61469: LD_VAR 0 52
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: PUSH
61482: LD_VAR 0 4
61486: PUSH
61487: LD_INT 1
61489: PLUS
61490: ARRAY
61491: ST_TO_ADDR
61492: GO 61683
61494: LD_INT 4
61496: DOUBLE
61497: EQUAL
61498: IFTRUE 61520
61500: LD_INT 5
61502: DOUBLE
61503: EQUAL
61504: IFTRUE 61520
61506: LD_INT 34
61508: DOUBLE
61509: EQUAL
61510: IFTRUE 61520
61512: LD_INT 37
61514: DOUBLE
61515: EQUAL
61516: IFTRUE 61520
61518: GO 61576
61520: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61521: LD_ADDR_VAR 0 9
61525: PUSH
61526: LD_VAR 0 53
61530: PUSH
61531: LD_VAR 0 54
61535: PUSH
61536: LD_VAR 0 55
61540: PUSH
61541: LD_VAR 0 56
61545: PUSH
61546: LD_VAR 0 57
61550: PUSH
61551: LD_VAR 0 58
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: PUSH
61564: LD_VAR 0 4
61568: PUSH
61569: LD_INT 1
61571: PLUS
61572: ARRAY
61573: ST_TO_ADDR
61574: GO 61683
61576: LD_INT 31
61578: DOUBLE
61579: EQUAL
61580: IFTRUE 61626
61582: LD_INT 32
61584: DOUBLE
61585: EQUAL
61586: IFTRUE 61626
61588: LD_INT 33
61590: DOUBLE
61591: EQUAL
61592: IFTRUE 61626
61594: LD_INT 27
61596: DOUBLE
61597: EQUAL
61598: IFTRUE 61626
61600: LD_INT 26
61602: DOUBLE
61603: EQUAL
61604: IFTRUE 61626
61606: LD_INT 28
61608: DOUBLE
61609: EQUAL
61610: IFTRUE 61626
61612: LD_INT 29
61614: DOUBLE
61615: EQUAL
61616: IFTRUE 61626
61618: LD_INT 30
61620: DOUBLE
61621: EQUAL
61622: IFTRUE 61626
61624: GO 61682
61626: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61627: LD_ADDR_VAR 0 9
61631: PUSH
61632: LD_VAR 0 59
61636: PUSH
61637: LD_VAR 0 60
61641: PUSH
61642: LD_VAR 0 61
61646: PUSH
61647: LD_VAR 0 62
61651: PUSH
61652: LD_VAR 0 63
61656: PUSH
61657: LD_VAR 0 64
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: PUSH
61670: LD_VAR 0 4
61674: PUSH
61675: LD_INT 1
61677: PLUS
61678: ARRAY
61679: ST_TO_ADDR
61680: GO 61683
61682: POP
// temp_list2 = [ ] ;
61683: LD_ADDR_VAR 0 10
61687: PUSH
61688: EMPTY
61689: ST_TO_ADDR
// for i in temp_list do
61690: LD_ADDR_VAR 0 8
61694: PUSH
61695: LD_VAR 0 9
61699: PUSH
61700: FOR_IN
61701: IFFALSE 61753
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61703: LD_ADDR_VAR 0 10
61707: PUSH
61708: LD_VAR 0 10
61712: PUSH
61713: LD_VAR 0 8
61717: PUSH
61718: LD_INT 1
61720: ARRAY
61721: PUSH
61722: LD_VAR 0 2
61726: PLUS
61727: PUSH
61728: LD_VAR 0 8
61732: PUSH
61733: LD_INT 2
61735: ARRAY
61736: PUSH
61737: LD_VAR 0 3
61741: PLUS
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: EMPTY
61748: LIST
61749: ADD
61750: ST_TO_ADDR
61751: GO 61700
61753: POP
61754: POP
// result = temp_list2 ;
61755: LD_ADDR_VAR 0 7
61759: PUSH
61760: LD_VAR 0 10
61764: ST_TO_ADDR
// end ;
61765: LD_VAR 0 7
61769: RET
// export function EnemyInRange ( unit , dist ) ; begin
61770: LD_INT 0
61772: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61773: LD_ADDR_VAR 0 3
61777: PUSH
61778: LD_VAR 0 1
61782: PPUSH
61783: CALL_OW 255
61787: PPUSH
61788: LD_VAR 0 1
61792: PPUSH
61793: CALL_OW 250
61797: PPUSH
61798: LD_VAR 0 1
61802: PPUSH
61803: CALL_OW 251
61807: PPUSH
61808: LD_VAR 0 2
61812: PPUSH
61813: CALL 35571 0 4
61817: PUSH
61818: LD_INT 4
61820: ARRAY
61821: ST_TO_ADDR
// end ;
61822: LD_VAR 0 3
61826: RET
// export function PlayerSeeMe ( unit ) ; begin
61827: LD_INT 0
61829: PPUSH
// result := See ( your_side , unit ) ;
61830: LD_ADDR_VAR 0 2
61834: PUSH
61835: LD_OWVAR 2
61839: PPUSH
61840: LD_VAR 0 1
61844: PPUSH
61845: CALL_OW 292
61849: ST_TO_ADDR
// end ;
61850: LD_VAR 0 2
61854: RET
// export function ReverseDir ( unit ) ; begin
61855: LD_INT 0
61857: PPUSH
// if not unit then
61858: LD_VAR 0 1
61862: NOT
61863: IFFALSE 61867
// exit ;
61865: GO 61890
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61867: LD_ADDR_VAR 0 2
61871: PUSH
61872: LD_VAR 0 1
61876: PPUSH
61877: CALL_OW 254
61881: PUSH
61882: LD_INT 3
61884: PLUS
61885: PUSH
61886: LD_INT 6
61888: MOD
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 2
61894: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
61895: LD_INT 0
61897: PPUSH
61898: PPUSH
61899: PPUSH
61900: PPUSH
61901: PPUSH
// if not hexes then
61902: LD_VAR 0 2
61906: NOT
61907: IFFALSE 61911
// exit ;
61909: GO 62059
// dist := 9999 ;
61911: LD_ADDR_VAR 0 5
61915: PUSH
61916: LD_INT 9999
61918: ST_TO_ADDR
// for i = 1 to hexes do
61919: LD_ADDR_VAR 0 4
61923: PUSH
61924: DOUBLE
61925: LD_INT 1
61927: DEC
61928: ST_TO_ADDR
61929: LD_VAR 0 2
61933: PUSH
61934: FOR_TO
61935: IFFALSE 62047
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
61937: LD_VAR 0 1
61941: PPUSH
61942: LD_VAR 0 2
61946: PUSH
61947: LD_VAR 0 4
61951: ARRAY
61952: PUSH
61953: LD_INT 1
61955: ARRAY
61956: PPUSH
61957: LD_VAR 0 2
61961: PUSH
61962: LD_VAR 0 4
61966: ARRAY
61967: PUSH
61968: LD_INT 2
61970: ARRAY
61971: PPUSH
61972: CALL_OW 297
61976: PUSH
61977: LD_VAR 0 5
61981: LESS
61982: IFFALSE 62045
// begin hex := hexes [ i ] ;
61984: LD_ADDR_VAR 0 7
61988: PUSH
61989: LD_VAR 0 2
61993: PUSH
61994: LD_VAR 0 4
61998: ARRAY
61999: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62000: LD_ADDR_VAR 0 5
62004: PUSH
62005: LD_VAR 0 1
62009: PPUSH
62010: LD_VAR 0 2
62014: PUSH
62015: LD_VAR 0 4
62019: ARRAY
62020: PUSH
62021: LD_INT 1
62023: ARRAY
62024: PPUSH
62025: LD_VAR 0 2
62029: PUSH
62030: LD_VAR 0 4
62034: ARRAY
62035: PUSH
62036: LD_INT 2
62038: ARRAY
62039: PPUSH
62040: CALL_OW 297
62044: ST_TO_ADDR
// end ; end ;
62045: GO 61934
62047: POP
62048: POP
// result := hex ;
62049: LD_ADDR_VAR 0 3
62053: PUSH
62054: LD_VAR 0 7
62058: ST_TO_ADDR
// end ;
62059: LD_VAR 0 3
62063: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62064: LD_INT 0
62066: PPUSH
62067: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62068: LD_VAR 0 1
62072: NOT
62073: PUSH
62074: LD_VAR 0 1
62078: PUSH
62079: LD_INT 21
62081: PUSH
62082: LD_INT 2
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 23
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PPUSH
62103: CALL_OW 69
62107: IN
62108: NOT
62109: OR
62110: IFFALSE 62114
// exit ;
62112: GO 62161
// for i = 1 to 3 do
62114: LD_ADDR_VAR 0 3
62118: PUSH
62119: DOUBLE
62120: LD_INT 1
62122: DEC
62123: ST_TO_ADDR
62124: LD_INT 3
62126: PUSH
62127: FOR_TO
62128: IFFALSE 62159
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62130: LD_VAR 0 1
62134: PPUSH
62135: CALL_OW 250
62139: PPUSH
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 251
62149: PPUSH
62150: LD_INT 1
62152: PPUSH
62153: CALL_OW 453
62157: GO 62127
62159: POP
62160: POP
// end ;
62161: LD_VAR 0 2
62165: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62166: LD_INT 0
62168: PPUSH
62169: PPUSH
62170: PPUSH
62171: PPUSH
62172: PPUSH
62173: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62174: LD_VAR 0 1
62178: NOT
62179: PUSH
62180: LD_VAR 0 2
62184: NOT
62185: OR
62186: PUSH
62187: LD_VAR 0 1
62191: PPUSH
62192: CALL_OW 314
62196: OR
62197: IFFALSE 62201
// exit ;
62199: GO 62642
// x := GetX ( enemy_unit ) ;
62201: LD_ADDR_VAR 0 7
62205: PUSH
62206: LD_VAR 0 2
62210: PPUSH
62211: CALL_OW 250
62215: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62216: LD_ADDR_VAR 0 8
62220: PUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: CALL_OW 251
62230: ST_TO_ADDR
// if not x or not y then
62231: LD_VAR 0 7
62235: NOT
62236: PUSH
62237: LD_VAR 0 8
62241: NOT
62242: OR
62243: IFFALSE 62247
// exit ;
62245: GO 62642
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62247: LD_ADDR_VAR 0 6
62251: PUSH
62252: LD_VAR 0 7
62256: PPUSH
62257: LD_INT 0
62259: PPUSH
62260: LD_INT 4
62262: PPUSH
62263: CALL_OW 272
62267: PUSH
62268: LD_VAR 0 8
62272: PPUSH
62273: LD_INT 0
62275: PPUSH
62276: LD_INT 4
62278: PPUSH
62279: CALL_OW 273
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_VAR 0 7
62292: PPUSH
62293: LD_INT 1
62295: PPUSH
62296: LD_INT 4
62298: PPUSH
62299: CALL_OW 272
62303: PUSH
62304: LD_VAR 0 8
62308: PPUSH
62309: LD_INT 1
62311: PPUSH
62312: LD_INT 4
62314: PPUSH
62315: CALL_OW 273
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_VAR 0 7
62328: PPUSH
62329: LD_INT 2
62331: PPUSH
62332: LD_INT 4
62334: PPUSH
62335: CALL_OW 272
62339: PUSH
62340: LD_VAR 0 8
62344: PPUSH
62345: LD_INT 2
62347: PPUSH
62348: LD_INT 4
62350: PPUSH
62351: CALL_OW 273
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_VAR 0 7
62364: PPUSH
62365: LD_INT 3
62367: PPUSH
62368: LD_INT 4
62370: PPUSH
62371: CALL_OW 272
62375: PUSH
62376: LD_VAR 0 8
62380: PPUSH
62381: LD_INT 3
62383: PPUSH
62384: LD_INT 4
62386: PPUSH
62387: CALL_OW 273
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_VAR 0 7
62400: PPUSH
62401: LD_INT 4
62403: PPUSH
62404: LD_INT 4
62406: PPUSH
62407: CALL_OW 272
62411: PUSH
62412: LD_VAR 0 8
62416: PPUSH
62417: LD_INT 4
62419: PPUSH
62420: LD_INT 4
62422: PPUSH
62423: CALL_OW 273
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_VAR 0 7
62436: PPUSH
62437: LD_INT 5
62439: PPUSH
62440: LD_INT 4
62442: PPUSH
62443: CALL_OW 272
62447: PUSH
62448: LD_VAR 0 8
62452: PPUSH
62453: LD_INT 5
62455: PPUSH
62456: LD_INT 4
62458: PPUSH
62459: CALL_OW 273
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: ST_TO_ADDR
// for i = tmp downto 1 do
62476: LD_ADDR_VAR 0 4
62480: PUSH
62481: DOUBLE
62482: LD_VAR 0 6
62486: INC
62487: ST_TO_ADDR
62488: LD_INT 1
62490: PUSH
62491: FOR_DOWNTO
62492: IFFALSE 62593
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62494: LD_VAR 0 6
62498: PUSH
62499: LD_VAR 0 4
62503: ARRAY
62504: PUSH
62505: LD_INT 1
62507: ARRAY
62508: PPUSH
62509: LD_VAR 0 6
62513: PUSH
62514: LD_VAR 0 4
62518: ARRAY
62519: PUSH
62520: LD_INT 2
62522: ARRAY
62523: PPUSH
62524: CALL_OW 488
62528: NOT
62529: PUSH
62530: LD_VAR 0 6
62534: PUSH
62535: LD_VAR 0 4
62539: ARRAY
62540: PUSH
62541: LD_INT 1
62543: ARRAY
62544: PPUSH
62545: LD_VAR 0 6
62549: PUSH
62550: LD_VAR 0 4
62554: ARRAY
62555: PUSH
62556: LD_INT 2
62558: ARRAY
62559: PPUSH
62560: CALL_OW 428
62564: PUSH
62565: LD_INT 0
62567: NONEQUAL
62568: OR
62569: IFFALSE 62591
// tmp := Delete ( tmp , i ) ;
62571: LD_ADDR_VAR 0 6
62575: PUSH
62576: LD_VAR 0 6
62580: PPUSH
62581: LD_VAR 0 4
62585: PPUSH
62586: CALL_OW 3
62590: ST_TO_ADDR
62591: GO 62491
62593: POP
62594: POP
// j := GetClosestHex ( unit , tmp ) ;
62595: LD_ADDR_VAR 0 5
62599: PUSH
62600: LD_VAR 0 1
62604: PPUSH
62605: LD_VAR 0 6
62609: PPUSH
62610: CALL 61895 0 2
62614: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62615: LD_VAR 0 1
62619: PPUSH
62620: LD_VAR 0 5
62624: PUSH
62625: LD_INT 1
62627: ARRAY
62628: PPUSH
62629: LD_VAR 0 5
62633: PUSH
62634: LD_INT 2
62636: ARRAY
62637: PPUSH
62638: CALL_OW 111
// end ;
62642: LD_VAR 0 3
62646: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62647: LD_INT 0
62649: PPUSH
62650: PPUSH
62651: PPUSH
// uc_side = 0 ;
62652: LD_ADDR_OWVAR 20
62656: PUSH
62657: LD_INT 0
62659: ST_TO_ADDR
// uc_nation = 0 ;
62660: LD_ADDR_OWVAR 21
62664: PUSH
62665: LD_INT 0
62667: ST_TO_ADDR
// InitHc_All ( ) ;
62668: CALL_OW 584
// InitVc ;
62672: CALL_OW 20
// if mastodonts then
62676: LD_VAR 0 6
62680: IFFALSE 62747
// for i = 1 to mastodonts do
62682: LD_ADDR_VAR 0 11
62686: PUSH
62687: DOUBLE
62688: LD_INT 1
62690: DEC
62691: ST_TO_ADDR
62692: LD_VAR 0 6
62696: PUSH
62697: FOR_TO
62698: IFFALSE 62745
// begin vc_chassis := 31 ;
62700: LD_ADDR_OWVAR 37
62704: PUSH
62705: LD_INT 31
62707: ST_TO_ADDR
// vc_control := control_rider ;
62708: LD_ADDR_OWVAR 38
62712: PUSH
62713: LD_INT 4
62715: ST_TO_ADDR
// animal := CreateVehicle ;
62716: LD_ADDR_VAR 0 12
62720: PUSH
62721: CALL_OW 45
62725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62726: LD_VAR 0 12
62730: PPUSH
62731: LD_VAR 0 8
62735: PPUSH
62736: LD_INT 0
62738: PPUSH
62739: CALL 64935 0 3
// end ;
62743: GO 62697
62745: POP
62746: POP
// if horses then
62747: LD_VAR 0 5
62751: IFFALSE 62818
// for i = 1 to horses do
62753: LD_ADDR_VAR 0 11
62757: PUSH
62758: DOUBLE
62759: LD_INT 1
62761: DEC
62762: ST_TO_ADDR
62763: LD_VAR 0 5
62767: PUSH
62768: FOR_TO
62769: IFFALSE 62816
// begin hc_class := 21 ;
62771: LD_ADDR_OWVAR 28
62775: PUSH
62776: LD_INT 21
62778: ST_TO_ADDR
// hc_gallery :=  ;
62779: LD_ADDR_OWVAR 33
62783: PUSH
62784: LD_STRING 
62786: ST_TO_ADDR
// animal := CreateHuman ;
62787: LD_ADDR_VAR 0 12
62791: PUSH
62792: CALL_OW 44
62796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62797: LD_VAR 0 12
62801: PPUSH
62802: LD_VAR 0 8
62806: PPUSH
62807: LD_INT 0
62809: PPUSH
62810: CALL 64935 0 3
// end ;
62814: GO 62768
62816: POP
62817: POP
// if birds then
62818: LD_VAR 0 1
62822: IFFALSE 62889
// for i = 1 to birds do
62824: LD_ADDR_VAR 0 11
62828: PUSH
62829: DOUBLE
62830: LD_INT 1
62832: DEC
62833: ST_TO_ADDR
62834: LD_VAR 0 1
62838: PUSH
62839: FOR_TO
62840: IFFALSE 62887
// begin hc_class = 18 ;
62842: LD_ADDR_OWVAR 28
62846: PUSH
62847: LD_INT 18
62849: ST_TO_ADDR
// hc_gallery =  ;
62850: LD_ADDR_OWVAR 33
62854: PUSH
62855: LD_STRING 
62857: ST_TO_ADDR
// animal := CreateHuman ;
62858: LD_ADDR_VAR 0 12
62862: PUSH
62863: CALL_OW 44
62867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62868: LD_VAR 0 12
62872: PPUSH
62873: LD_VAR 0 8
62877: PPUSH
62878: LD_INT 0
62880: PPUSH
62881: CALL 64935 0 3
// end ;
62885: GO 62839
62887: POP
62888: POP
// if tigers then
62889: LD_VAR 0 2
62893: IFFALSE 62977
// for i = 1 to tigers do
62895: LD_ADDR_VAR 0 11
62899: PUSH
62900: DOUBLE
62901: LD_INT 1
62903: DEC
62904: ST_TO_ADDR
62905: LD_VAR 0 2
62909: PUSH
62910: FOR_TO
62911: IFFALSE 62975
// begin hc_class = class_tiger ;
62913: LD_ADDR_OWVAR 28
62917: PUSH
62918: LD_INT 14
62920: ST_TO_ADDR
// hc_gallery =  ;
62921: LD_ADDR_OWVAR 33
62925: PUSH
62926: LD_STRING 
62928: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62929: LD_ADDR_OWVAR 35
62933: PUSH
62934: LD_INT 7
62936: NEG
62937: PPUSH
62938: LD_INT 7
62940: PPUSH
62941: CALL_OW 12
62945: ST_TO_ADDR
// animal := CreateHuman ;
62946: LD_ADDR_VAR 0 12
62950: PUSH
62951: CALL_OW 44
62955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62956: LD_VAR 0 12
62960: PPUSH
62961: LD_VAR 0 8
62965: PPUSH
62966: LD_INT 0
62968: PPUSH
62969: CALL 64935 0 3
// end ;
62973: GO 62910
62975: POP
62976: POP
// if apemans then
62977: LD_VAR 0 3
62981: IFFALSE 63104
// for i = 1 to apemans do
62983: LD_ADDR_VAR 0 11
62987: PUSH
62988: DOUBLE
62989: LD_INT 1
62991: DEC
62992: ST_TO_ADDR
62993: LD_VAR 0 3
62997: PUSH
62998: FOR_TO
62999: IFFALSE 63102
// begin hc_class = class_apeman ;
63001: LD_ADDR_OWVAR 28
63005: PUSH
63006: LD_INT 12
63008: ST_TO_ADDR
// hc_gallery =  ;
63009: LD_ADDR_OWVAR 33
63013: PUSH
63014: LD_STRING 
63016: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
63017: LD_ADDR_OWVAR 35
63021: PUSH
63022: LD_INT 5
63024: NEG
63025: PPUSH
63026: LD_INT 5
63028: PPUSH
63029: CALL_OW 12
63033: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63034: LD_ADDR_OWVAR 31
63038: PUSH
63039: LD_INT 1
63041: PPUSH
63042: LD_INT 3
63044: PPUSH
63045: CALL_OW 12
63049: PUSH
63050: LD_INT 1
63052: PPUSH
63053: LD_INT 3
63055: PPUSH
63056: CALL_OW 12
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: ST_TO_ADDR
// animal := CreateHuman ;
63073: LD_ADDR_VAR 0 12
63077: PUSH
63078: CALL_OW 44
63082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63083: LD_VAR 0 12
63087: PPUSH
63088: LD_VAR 0 8
63092: PPUSH
63093: LD_INT 0
63095: PPUSH
63096: CALL 64935 0 3
// end ;
63100: GO 62998
63102: POP
63103: POP
// if enchidnas then
63104: LD_VAR 0 4
63108: IFFALSE 63175
// for i = 1 to enchidnas do
63110: LD_ADDR_VAR 0 11
63114: PUSH
63115: DOUBLE
63116: LD_INT 1
63118: DEC
63119: ST_TO_ADDR
63120: LD_VAR 0 4
63124: PUSH
63125: FOR_TO
63126: IFFALSE 63173
// begin hc_class = 13 ;
63128: LD_ADDR_OWVAR 28
63132: PUSH
63133: LD_INT 13
63135: ST_TO_ADDR
// hc_gallery =  ;
63136: LD_ADDR_OWVAR 33
63140: PUSH
63141: LD_STRING 
63143: ST_TO_ADDR
// animal := CreateHuman ;
63144: LD_ADDR_VAR 0 12
63148: PUSH
63149: CALL_OW 44
63153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63154: LD_VAR 0 12
63158: PPUSH
63159: LD_VAR 0 8
63163: PPUSH
63164: LD_INT 0
63166: PPUSH
63167: CALL 64935 0 3
// end ;
63171: GO 63125
63173: POP
63174: POP
// if fishes then
63175: LD_VAR 0 7
63179: IFFALSE 63246
// for i = 1 to fishes do
63181: LD_ADDR_VAR 0 11
63185: PUSH
63186: DOUBLE
63187: LD_INT 1
63189: DEC
63190: ST_TO_ADDR
63191: LD_VAR 0 7
63195: PUSH
63196: FOR_TO
63197: IFFALSE 63244
// begin hc_class = 20 ;
63199: LD_ADDR_OWVAR 28
63203: PUSH
63204: LD_INT 20
63206: ST_TO_ADDR
// hc_gallery =  ;
63207: LD_ADDR_OWVAR 33
63211: PUSH
63212: LD_STRING 
63214: ST_TO_ADDR
// animal := CreateHuman ;
63215: LD_ADDR_VAR 0 12
63219: PUSH
63220: CALL_OW 44
63224: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63225: LD_VAR 0 12
63229: PPUSH
63230: LD_VAR 0 9
63234: PPUSH
63235: LD_INT 0
63237: PPUSH
63238: CALL 64935 0 3
// end ;
63242: GO 63196
63244: POP
63245: POP
// end ;
63246: LD_VAR 0 10
63250: RET
// export function WantHeal ( sci , unit ) ; begin
63251: LD_INT 0
63253: PPUSH
// if GetTaskList ( sci ) > 0 then
63254: LD_VAR 0 1
63258: PPUSH
63259: CALL_OW 437
63263: PUSH
63264: LD_INT 0
63266: GREATER
63267: IFFALSE 63337
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63269: LD_VAR 0 1
63273: PPUSH
63274: CALL_OW 437
63278: PUSH
63279: LD_INT 1
63281: ARRAY
63282: PUSH
63283: LD_INT 1
63285: ARRAY
63286: PUSH
63287: LD_STRING l
63289: EQUAL
63290: PUSH
63291: LD_VAR 0 1
63295: PPUSH
63296: CALL_OW 437
63300: PUSH
63301: LD_INT 1
63303: ARRAY
63304: PUSH
63305: LD_INT 4
63307: ARRAY
63308: PUSH
63309: LD_VAR 0 2
63313: EQUAL
63314: AND
63315: IFFALSE 63327
// result := true else
63317: LD_ADDR_VAR 0 3
63321: PUSH
63322: LD_INT 1
63324: ST_TO_ADDR
63325: GO 63335
// result := false ;
63327: LD_ADDR_VAR 0 3
63331: PUSH
63332: LD_INT 0
63334: ST_TO_ADDR
// end else
63335: GO 63345
// result := false ;
63337: LD_ADDR_VAR 0 3
63341: PUSH
63342: LD_INT 0
63344: ST_TO_ADDR
// end ;
63345: LD_VAR 0 3
63349: RET
// export function HealTarget ( sci ) ; begin
63350: LD_INT 0
63352: PPUSH
// if not sci then
63353: LD_VAR 0 1
63357: NOT
63358: IFFALSE 63362
// exit ;
63360: GO 63427
// result := 0 ;
63362: LD_ADDR_VAR 0 2
63366: PUSH
63367: LD_INT 0
63369: ST_TO_ADDR
// if GetTaskList ( sci ) then
63370: LD_VAR 0 1
63374: PPUSH
63375: CALL_OW 437
63379: IFFALSE 63427
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63381: LD_VAR 0 1
63385: PPUSH
63386: CALL_OW 437
63390: PUSH
63391: LD_INT 1
63393: ARRAY
63394: PUSH
63395: LD_INT 1
63397: ARRAY
63398: PUSH
63399: LD_STRING l
63401: EQUAL
63402: IFFALSE 63427
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63404: LD_ADDR_VAR 0 2
63408: PUSH
63409: LD_VAR 0 1
63413: PPUSH
63414: CALL_OW 437
63418: PUSH
63419: LD_INT 1
63421: ARRAY
63422: PUSH
63423: LD_INT 4
63425: ARRAY
63426: ST_TO_ADDR
// end ;
63427: LD_VAR 0 2
63431: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63432: LD_INT 0
63434: PPUSH
63435: PPUSH
63436: PPUSH
63437: PPUSH
// if not base_units then
63438: LD_VAR 0 1
63442: NOT
63443: IFFALSE 63447
// exit ;
63445: GO 63534
// result := false ;
63447: LD_ADDR_VAR 0 2
63451: PUSH
63452: LD_INT 0
63454: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63455: LD_ADDR_VAR 0 5
63459: PUSH
63460: LD_VAR 0 1
63464: PPUSH
63465: LD_INT 21
63467: PUSH
63468: LD_INT 3
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PPUSH
63475: CALL_OW 72
63479: ST_TO_ADDR
// if not tmp then
63480: LD_VAR 0 5
63484: NOT
63485: IFFALSE 63489
// exit ;
63487: GO 63534
// for i in tmp do
63489: LD_ADDR_VAR 0 3
63493: PUSH
63494: LD_VAR 0 5
63498: PUSH
63499: FOR_IN
63500: IFFALSE 63532
// begin result := EnemyInRange ( i , 22 ) ;
63502: LD_ADDR_VAR 0 2
63506: PUSH
63507: LD_VAR 0 3
63511: PPUSH
63512: LD_INT 22
63514: PPUSH
63515: CALL 61770 0 2
63519: ST_TO_ADDR
// if result then
63520: LD_VAR 0 2
63524: IFFALSE 63530
// exit ;
63526: POP
63527: POP
63528: GO 63534
// end ;
63530: GO 63499
63532: POP
63533: POP
// end ;
63534: LD_VAR 0 2
63538: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
63539: LD_INT 0
63541: PPUSH
63542: PPUSH
// if not units then
63543: LD_VAR 0 1
63547: NOT
63548: IFFALSE 63552
// exit ;
63550: GO 63622
// result := [ ] ;
63552: LD_ADDR_VAR 0 3
63556: PUSH
63557: EMPTY
63558: ST_TO_ADDR
// for i in units do
63559: LD_ADDR_VAR 0 4
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: FOR_IN
63570: IFFALSE 63620
// if GetTag ( i ) = tag then
63572: LD_VAR 0 4
63576: PPUSH
63577: CALL_OW 110
63581: PUSH
63582: LD_VAR 0 2
63586: EQUAL
63587: IFFALSE 63618
// result := Insert ( result , result + 1 , i ) ;
63589: LD_ADDR_VAR 0 3
63593: PUSH
63594: LD_VAR 0 3
63598: PPUSH
63599: LD_VAR 0 3
63603: PUSH
63604: LD_INT 1
63606: PLUS
63607: PPUSH
63608: LD_VAR 0 4
63612: PPUSH
63613: CALL_OW 2
63617: ST_TO_ADDR
63618: GO 63569
63620: POP
63621: POP
// end ;
63622: LD_VAR 0 3
63626: RET
// export function IsDriver ( un ) ; begin
63627: LD_INT 0
63629: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63630: LD_ADDR_VAR 0 2
63634: PUSH
63635: LD_VAR 0 1
63639: PUSH
63640: LD_INT 55
63642: PUSH
63643: EMPTY
63644: LIST
63645: PPUSH
63646: CALL_OW 69
63650: IN
63651: ST_TO_ADDR
// end ;
63652: LD_VAR 0 2
63656: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63657: LD_INT 0
63659: PPUSH
63660: PPUSH
// list := [ ] ;
63661: LD_ADDR_VAR 0 5
63665: PUSH
63666: EMPTY
63667: ST_TO_ADDR
// case d of 0 :
63668: LD_VAR 0 3
63672: PUSH
63673: LD_INT 0
63675: DOUBLE
63676: EQUAL
63677: IFTRUE 63681
63679: GO 63814
63681: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63682: LD_ADDR_VAR 0 5
63686: PUSH
63687: LD_VAR 0 1
63691: PUSH
63692: LD_INT 4
63694: MINUS
63695: PUSH
63696: LD_VAR 0 2
63700: PUSH
63701: LD_INT 4
63703: MINUS
63704: PUSH
63705: LD_INT 2
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: LIST
63712: PUSH
63713: LD_VAR 0 1
63717: PUSH
63718: LD_INT 3
63720: MINUS
63721: PUSH
63722: LD_VAR 0 2
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: LIST
63734: PUSH
63735: LD_VAR 0 1
63739: PUSH
63740: LD_INT 4
63742: PLUS
63743: PUSH
63744: LD_VAR 0 2
63748: PUSH
63749: LD_INT 4
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: PUSH
63757: LD_VAR 0 1
63761: PUSH
63762: LD_INT 3
63764: PLUS
63765: PUSH
63766: LD_VAR 0 2
63770: PUSH
63771: LD_INT 3
63773: PLUS
63774: PUSH
63775: LD_INT 5
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: LIST
63782: PUSH
63783: LD_VAR 0 1
63787: PUSH
63788: LD_VAR 0 2
63792: PUSH
63793: LD_INT 4
63795: PLUS
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: LIST
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: ST_TO_ADDR
// end ; 1 :
63812: GO 64512
63814: LD_INT 1
63816: DOUBLE
63817: EQUAL
63818: IFTRUE 63822
63820: GO 63955
63822: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63823: LD_ADDR_VAR 0 5
63827: PUSH
63828: LD_VAR 0 1
63832: PUSH
63833: LD_VAR 0 2
63837: PUSH
63838: LD_INT 4
63840: MINUS
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: LIST
63849: PUSH
63850: LD_VAR 0 1
63854: PUSH
63855: LD_INT 3
63857: MINUS
63858: PUSH
63859: LD_VAR 0 2
63863: PUSH
63864: LD_INT 3
63866: MINUS
63867: PUSH
63868: LD_INT 2
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: PUSH
63876: LD_VAR 0 1
63880: PUSH
63881: LD_INT 4
63883: MINUS
63884: PUSH
63885: LD_VAR 0 2
63889: PUSH
63890: LD_INT 1
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: LD_VAR 0 1
63902: PUSH
63903: LD_VAR 0 2
63907: PUSH
63908: LD_INT 3
63910: PLUS
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: PUSH
63920: LD_VAR 0 1
63924: PUSH
63925: LD_INT 4
63927: PLUS
63928: PUSH
63929: LD_VAR 0 2
63933: PUSH
63934: LD_INT 4
63936: PLUS
63937: PUSH
63938: LD_INT 5
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: LIST
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: ST_TO_ADDR
// end ; 2 :
63953: GO 64512
63955: LD_INT 2
63957: DOUBLE
63958: EQUAL
63959: IFTRUE 63963
63961: GO 64092
63963: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63964: LD_ADDR_VAR 0 5
63968: PUSH
63969: LD_VAR 0 1
63973: PUSH
63974: LD_VAR 0 2
63978: PUSH
63979: LD_INT 3
63981: MINUS
63982: PUSH
63983: LD_INT 3
63985: PUSH
63986: EMPTY
63987: LIST
63988: LIST
63989: LIST
63990: PUSH
63991: LD_VAR 0 1
63995: PUSH
63996: LD_INT 4
63998: PLUS
63999: PUSH
64000: LD_VAR 0 2
64004: PUSH
64005: LD_INT 4
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: PUSH
64013: LD_VAR 0 1
64017: PUSH
64018: LD_VAR 0 2
64022: PUSH
64023: LD_INT 4
64025: PLUS
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: LIST
64034: PUSH
64035: LD_VAR 0 1
64039: PUSH
64040: LD_INT 3
64042: MINUS
64043: PUSH
64044: LD_VAR 0 2
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: PUSH
64057: LD_VAR 0 1
64061: PUSH
64062: LD_INT 4
64064: MINUS
64065: PUSH
64066: LD_VAR 0 2
64070: PUSH
64071: LD_INT 4
64073: MINUS
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: ST_TO_ADDR
// end ; 3 :
64090: GO 64512
64092: LD_INT 3
64094: DOUBLE
64095: EQUAL
64096: IFTRUE 64100
64098: GO 64233
64100: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64101: LD_ADDR_VAR 0 5
64105: PUSH
64106: LD_VAR 0 1
64110: PUSH
64111: LD_INT 3
64113: PLUS
64114: PUSH
64115: LD_VAR 0 2
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: LIST
64127: PUSH
64128: LD_VAR 0 1
64132: PUSH
64133: LD_INT 4
64135: PLUS
64136: PUSH
64137: LD_VAR 0 2
64141: PUSH
64142: LD_INT 4
64144: PLUS
64145: PUSH
64146: LD_INT 5
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: LIST
64153: PUSH
64154: LD_VAR 0 1
64158: PUSH
64159: LD_INT 4
64161: MINUS
64162: PUSH
64163: LD_VAR 0 2
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 1
64180: PUSH
64181: LD_VAR 0 2
64185: PUSH
64186: LD_INT 4
64188: MINUS
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: LIST
64197: PUSH
64198: LD_VAR 0 1
64202: PUSH
64203: LD_INT 3
64205: MINUS
64206: PUSH
64207: LD_VAR 0 2
64211: PUSH
64212: LD_INT 3
64214: MINUS
64215: PUSH
64216: LD_INT 2
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: LIST
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: ST_TO_ADDR
// end ; 4 :
64231: GO 64512
64233: LD_INT 4
64235: DOUBLE
64236: EQUAL
64237: IFTRUE 64241
64239: GO 64374
64241: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64242: LD_ADDR_VAR 0 5
64246: PUSH
64247: LD_VAR 0 1
64251: PUSH
64252: LD_VAR 0 2
64256: PUSH
64257: LD_INT 4
64259: PLUS
64260: PUSH
64261: LD_INT 0
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: LIST
64268: PUSH
64269: LD_VAR 0 1
64273: PUSH
64274: LD_INT 3
64276: PLUS
64277: PUSH
64278: LD_VAR 0 2
64282: PUSH
64283: LD_INT 3
64285: PLUS
64286: PUSH
64287: LD_INT 5
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: PUSH
64295: LD_VAR 0 1
64299: PUSH
64300: LD_INT 4
64302: PLUS
64303: PUSH
64304: LD_VAR 0 2
64308: PUSH
64309: LD_INT 4
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_VAR 0 2
64326: PUSH
64327: LD_INT 3
64329: MINUS
64330: PUSH
64331: LD_INT 3
64333: PUSH
64334: EMPTY
64335: LIST
64336: LIST
64337: LIST
64338: PUSH
64339: LD_VAR 0 1
64343: PUSH
64344: LD_INT 4
64346: MINUS
64347: PUSH
64348: LD_VAR 0 2
64352: PUSH
64353: LD_INT 4
64355: MINUS
64356: PUSH
64357: LD_INT 2
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: ST_TO_ADDR
// end ; 5 :
64372: GO 64512
64374: LD_INT 5
64376: DOUBLE
64377: EQUAL
64378: IFTRUE 64382
64380: GO 64511
64382: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64383: LD_ADDR_VAR 0 5
64387: PUSH
64388: LD_VAR 0 1
64392: PUSH
64393: LD_INT 4
64395: MINUS
64396: PUSH
64397: LD_VAR 0 2
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: LIST
64409: PUSH
64410: LD_VAR 0 1
64414: PUSH
64415: LD_VAR 0 2
64419: PUSH
64420: LD_INT 4
64422: MINUS
64423: PUSH
64424: LD_INT 3
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: PUSH
64432: LD_VAR 0 1
64436: PUSH
64437: LD_INT 4
64439: PLUS
64440: PUSH
64441: LD_VAR 0 2
64445: PUSH
64446: LD_INT 4
64448: PLUS
64449: PUSH
64450: LD_INT 5
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: LIST
64457: PUSH
64458: LD_VAR 0 1
64462: PUSH
64463: LD_INT 3
64465: PLUS
64466: PUSH
64467: LD_VAR 0 2
64471: PUSH
64472: LD_INT 4
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: LIST
64479: PUSH
64480: LD_VAR 0 1
64484: PUSH
64485: LD_VAR 0 2
64489: PUSH
64490: LD_INT 3
64492: PLUS
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: ST_TO_ADDR
// end ; end ;
64509: GO 64512
64511: POP
// result := list ;
64512: LD_ADDR_VAR 0 4
64516: PUSH
64517: LD_VAR 0 5
64521: ST_TO_ADDR
// end ;
64522: LD_VAR 0 4
64526: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64527: LD_INT 0
64529: PPUSH
64530: PPUSH
64531: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64532: LD_VAR 0 1
64536: NOT
64537: PUSH
64538: LD_VAR 0 2
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: LD_INT 3
64551: PUSH
64552: LD_INT 4
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: IN
64561: NOT
64562: OR
64563: IFFALSE 64567
// exit ;
64565: GO 64659
// tmp := [ ] ;
64567: LD_ADDR_VAR 0 5
64571: PUSH
64572: EMPTY
64573: ST_TO_ADDR
// for i in units do
64574: LD_ADDR_VAR 0 4
64578: PUSH
64579: LD_VAR 0 1
64583: PUSH
64584: FOR_IN
64585: IFFALSE 64628
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64587: LD_ADDR_VAR 0 5
64591: PUSH
64592: LD_VAR 0 5
64596: PPUSH
64597: LD_VAR 0 5
64601: PUSH
64602: LD_INT 1
64604: PLUS
64605: PPUSH
64606: LD_VAR 0 4
64610: PPUSH
64611: LD_VAR 0 2
64615: PPUSH
64616: CALL_OW 259
64620: PPUSH
64621: CALL_OW 2
64625: ST_TO_ADDR
64626: GO 64584
64628: POP
64629: POP
// if not tmp then
64630: LD_VAR 0 5
64634: NOT
64635: IFFALSE 64639
// exit ;
64637: GO 64659
// result := SortListByListDesc ( units , tmp ) ;
64639: LD_ADDR_VAR 0 3
64643: PUSH
64644: LD_VAR 0 1
64648: PPUSH
64649: LD_VAR 0 5
64653: PPUSH
64654: CALL_OW 77
64658: ST_TO_ADDR
// end ;
64659: LD_VAR 0 3
64663: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64664: LD_INT 0
64666: PPUSH
64667: PPUSH
64668: PPUSH
// result := false ;
64669: LD_ADDR_VAR 0 3
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// x := GetX ( building ) ;
64677: LD_ADDR_VAR 0 4
64681: PUSH
64682: LD_VAR 0 2
64686: PPUSH
64687: CALL_OW 250
64691: ST_TO_ADDR
// y := GetY ( building ) ;
64692: LD_ADDR_VAR 0 5
64696: PUSH
64697: LD_VAR 0 2
64701: PPUSH
64702: CALL_OW 251
64706: ST_TO_ADDR
// if not building or not x or not y then
64707: LD_VAR 0 2
64711: NOT
64712: PUSH
64713: LD_VAR 0 4
64717: NOT
64718: OR
64719: PUSH
64720: LD_VAR 0 5
64724: NOT
64725: OR
64726: IFFALSE 64730
// exit ;
64728: GO 64822
// if GetTaskList ( unit ) then
64730: LD_VAR 0 1
64734: PPUSH
64735: CALL_OW 437
64739: IFFALSE 64822
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64741: LD_STRING e
64743: PUSH
64744: LD_VAR 0 1
64748: PPUSH
64749: CALL_OW 437
64753: PUSH
64754: LD_INT 1
64756: ARRAY
64757: PUSH
64758: LD_INT 1
64760: ARRAY
64761: EQUAL
64762: PUSH
64763: LD_VAR 0 4
64767: PUSH
64768: LD_VAR 0 1
64772: PPUSH
64773: CALL_OW 437
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: PUSH
64782: LD_INT 2
64784: ARRAY
64785: EQUAL
64786: AND
64787: PUSH
64788: LD_VAR 0 5
64792: PUSH
64793: LD_VAR 0 1
64797: PPUSH
64798: CALL_OW 437
64802: PUSH
64803: LD_INT 1
64805: ARRAY
64806: PUSH
64807: LD_INT 3
64809: ARRAY
64810: EQUAL
64811: AND
64812: IFFALSE 64822
// result := true end ;
64814: LD_ADDR_VAR 0 3
64818: PUSH
64819: LD_INT 1
64821: ST_TO_ADDR
// end ;
64822: LD_VAR 0 3
64826: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64827: LD_INT 0
64829: PPUSH
// result := false ;
64830: LD_ADDR_VAR 0 4
64834: PUSH
64835: LD_INT 0
64837: ST_TO_ADDR
// if GetTaskList ( unit ) then
64838: LD_VAR 0 1
64842: PPUSH
64843: CALL_OW 437
64847: IFFALSE 64930
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64849: LD_STRING M
64851: PUSH
64852: LD_VAR 0 1
64856: PPUSH
64857: CALL_OW 437
64861: PUSH
64862: LD_INT 1
64864: ARRAY
64865: PUSH
64866: LD_INT 1
64868: ARRAY
64869: EQUAL
64870: PUSH
64871: LD_VAR 0 2
64875: PUSH
64876: LD_VAR 0 1
64880: PPUSH
64881: CALL_OW 437
64885: PUSH
64886: LD_INT 1
64888: ARRAY
64889: PUSH
64890: LD_INT 2
64892: ARRAY
64893: EQUAL
64894: AND
64895: PUSH
64896: LD_VAR 0 3
64900: PUSH
64901: LD_VAR 0 1
64905: PPUSH
64906: CALL_OW 437
64910: PUSH
64911: LD_INT 1
64913: ARRAY
64914: PUSH
64915: LD_INT 3
64917: ARRAY
64918: EQUAL
64919: AND
64920: IFFALSE 64930
// result := true ;
64922: LD_ADDR_VAR 0 4
64926: PUSH
64927: LD_INT 1
64929: ST_TO_ADDR
// end ; end ;
64930: LD_VAR 0 4
64934: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64935: LD_INT 0
64937: PPUSH
64938: PPUSH
64939: PPUSH
64940: PPUSH
// if not unit or not area then
64941: LD_VAR 0 1
64945: NOT
64946: PUSH
64947: LD_VAR 0 2
64951: NOT
64952: OR
64953: IFFALSE 64957
// exit ;
64955: GO 65121
// tmp := AreaToList ( area , i ) ;
64957: LD_ADDR_VAR 0 6
64961: PUSH
64962: LD_VAR 0 2
64966: PPUSH
64967: LD_VAR 0 5
64971: PPUSH
64972: CALL_OW 517
64976: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64977: LD_ADDR_VAR 0 5
64981: PUSH
64982: DOUBLE
64983: LD_INT 1
64985: DEC
64986: ST_TO_ADDR
64987: LD_VAR 0 6
64991: PUSH
64992: LD_INT 1
64994: ARRAY
64995: PUSH
64996: FOR_TO
64997: IFFALSE 65119
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64999: LD_ADDR_VAR 0 7
65003: PUSH
65004: LD_VAR 0 6
65008: PUSH
65009: LD_INT 1
65011: ARRAY
65012: PUSH
65013: LD_VAR 0 5
65017: ARRAY
65018: PUSH
65019: LD_VAR 0 6
65023: PUSH
65024: LD_INT 2
65026: ARRAY
65027: PUSH
65028: LD_VAR 0 5
65032: ARRAY
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65038: LD_VAR 0 7
65042: PUSH
65043: LD_INT 1
65045: ARRAY
65046: PPUSH
65047: LD_VAR 0 7
65051: PUSH
65052: LD_INT 2
65054: ARRAY
65055: PPUSH
65056: CALL_OW 428
65060: PUSH
65061: LD_INT 0
65063: EQUAL
65064: IFFALSE 65117
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65066: LD_VAR 0 1
65070: PPUSH
65071: LD_VAR 0 7
65075: PUSH
65076: LD_INT 1
65078: ARRAY
65079: PPUSH
65080: LD_VAR 0 7
65084: PUSH
65085: LD_INT 2
65087: ARRAY
65088: PPUSH
65089: LD_VAR 0 3
65093: PPUSH
65094: CALL_OW 48
// result := IsPlaced ( unit ) ;
65098: LD_ADDR_VAR 0 4
65102: PUSH
65103: LD_VAR 0 1
65107: PPUSH
65108: CALL_OW 305
65112: ST_TO_ADDR
// exit ;
65113: POP
65114: POP
65115: GO 65121
// end ; end ;
65117: GO 64996
65119: POP
65120: POP
// end ;
65121: LD_VAR 0 4
65125: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65126: LD_INT 0
65128: PPUSH
65129: PPUSH
65130: PPUSH
// if not side or side > 8 then
65131: LD_VAR 0 1
65135: NOT
65136: PUSH
65137: LD_VAR 0 1
65141: PUSH
65142: LD_INT 8
65144: GREATER
65145: OR
65146: IFFALSE 65150
// exit ;
65148: GO 65337
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65150: LD_ADDR_VAR 0 4
65154: PUSH
65155: LD_INT 22
65157: PUSH
65158: LD_VAR 0 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 21
65169: PUSH
65170: LD_INT 3
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PPUSH
65181: CALL_OW 69
65185: ST_TO_ADDR
// if not tmp then
65186: LD_VAR 0 4
65190: NOT
65191: IFFALSE 65195
// exit ;
65193: GO 65337
// enable_addtolog := true ;
65195: LD_ADDR_OWVAR 81
65199: PUSH
65200: LD_INT 1
65202: ST_TO_ADDR
// AddToLog ( [ ) ;
65203: LD_STRING [
65205: PPUSH
65206: CALL_OW 561
// for i in tmp do
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: LD_VAR 0 4
65219: PUSH
65220: FOR_IN
65221: IFFALSE 65328
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65223: LD_STRING [
65225: PUSH
65226: LD_VAR 0 3
65230: PPUSH
65231: CALL_OW 266
65235: STR
65236: PUSH
65237: LD_STRING , 
65239: STR
65240: PUSH
65241: LD_VAR 0 3
65245: PPUSH
65246: CALL_OW 250
65250: STR
65251: PUSH
65252: LD_STRING , 
65254: STR
65255: PUSH
65256: LD_VAR 0 3
65260: PPUSH
65261: CALL_OW 251
65265: STR
65266: PUSH
65267: LD_STRING , 
65269: STR
65270: PUSH
65271: LD_VAR 0 3
65275: PPUSH
65276: CALL_OW 254
65280: STR
65281: PUSH
65282: LD_STRING , 
65284: STR
65285: PUSH
65286: LD_VAR 0 3
65290: PPUSH
65291: LD_INT 1
65293: PPUSH
65294: CALL_OW 268
65298: STR
65299: PUSH
65300: LD_STRING , 
65302: STR
65303: PUSH
65304: LD_VAR 0 3
65308: PPUSH
65309: LD_INT 2
65311: PPUSH
65312: CALL_OW 268
65316: STR
65317: PUSH
65318: LD_STRING ],
65320: STR
65321: PPUSH
65322: CALL_OW 561
// end ;
65326: GO 65220
65328: POP
65329: POP
// AddToLog ( ]; ) ;
65330: LD_STRING ];
65332: PPUSH
65333: CALL_OW 561
// end ;
65337: LD_VAR 0 2
65341: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65342: LD_INT 0
65344: PPUSH
65345: PPUSH
65346: PPUSH
65347: PPUSH
65348: PPUSH
// if not area or not rate or not max then
65349: LD_VAR 0 1
65353: NOT
65354: PUSH
65355: LD_VAR 0 2
65359: NOT
65360: OR
65361: PUSH
65362: LD_VAR 0 4
65366: NOT
65367: OR
65368: IFFALSE 65372
// exit ;
65370: GO 65564
// while 1 do
65372: LD_INT 1
65374: IFFALSE 65564
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65376: LD_ADDR_VAR 0 9
65380: PUSH
65381: LD_VAR 0 1
65385: PPUSH
65386: LD_INT 1
65388: PPUSH
65389: CALL_OW 287
65393: PUSH
65394: LD_INT 10
65396: MUL
65397: ST_TO_ADDR
// r := rate / 10 ;
65398: LD_ADDR_VAR 0 7
65402: PUSH
65403: LD_VAR 0 2
65407: PUSH
65408: LD_INT 10
65410: DIVREAL
65411: ST_TO_ADDR
// time := 1 1$00 ;
65412: LD_ADDR_VAR 0 8
65416: PUSH
65417: LD_INT 2100
65419: ST_TO_ADDR
// if amount < min then
65420: LD_VAR 0 9
65424: PUSH
65425: LD_VAR 0 3
65429: LESS
65430: IFFALSE 65448
// r := r * 2 else
65432: LD_ADDR_VAR 0 7
65436: PUSH
65437: LD_VAR 0 7
65441: PUSH
65442: LD_INT 2
65444: MUL
65445: ST_TO_ADDR
65446: GO 65474
// if amount > max then
65448: LD_VAR 0 9
65452: PUSH
65453: LD_VAR 0 4
65457: GREATER
65458: IFFALSE 65474
// r := r / 2 ;
65460: LD_ADDR_VAR 0 7
65464: PUSH
65465: LD_VAR 0 7
65469: PUSH
65470: LD_INT 2
65472: DIVREAL
65473: ST_TO_ADDR
// time := time / r ;
65474: LD_ADDR_VAR 0 8
65478: PUSH
65479: LD_VAR 0 8
65483: PUSH
65484: LD_VAR 0 7
65488: DIVREAL
65489: ST_TO_ADDR
// if time < 0 then
65490: LD_VAR 0 8
65494: PUSH
65495: LD_INT 0
65497: LESS
65498: IFFALSE 65515
// time := time * - 1 ;
65500: LD_ADDR_VAR 0 8
65504: PUSH
65505: LD_VAR 0 8
65509: PUSH
65510: LD_INT 1
65512: NEG
65513: MUL
65514: ST_TO_ADDR
// wait ( time ) ;
65515: LD_VAR 0 8
65519: PPUSH
65520: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
65524: LD_INT 35
65526: PPUSH
65527: LD_INT 875
65529: PPUSH
65530: CALL_OW 12
65534: PPUSH
65535: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65539: LD_INT 1
65541: PPUSH
65542: LD_INT 5
65544: PPUSH
65545: CALL_OW 12
65549: PPUSH
65550: LD_VAR 0 1
65554: PPUSH
65555: LD_INT 1
65557: PPUSH
65558: CALL_OW 55
// end ;
65562: GO 65372
// end ;
65564: LD_VAR 0 5
65568: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65569: LD_INT 0
65571: PPUSH
65572: PPUSH
65573: PPUSH
65574: PPUSH
65575: PPUSH
65576: PPUSH
65577: PPUSH
65578: PPUSH
// if not turrets or not factories then
65579: LD_VAR 0 1
65583: NOT
65584: PUSH
65585: LD_VAR 0 2
65589: NOT
65590: OR
65591: IFFALSE 65595
// exit ;
65593: GO 65902
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65595: LD_ADDR_VAR 0 10
65599: PUSH
65600: LD_INT 5
65602: PUSH
65603: LD_INT 6
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: LD_INT 4
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: LD_INT 5
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 24
65637: PUSH
65638: LD_INT 25
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 23
65647: PUSH
65648: LD_INT 27
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 42
65661: PUSH
65662: LD_INT 43
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 44
65671: PUSH
65672: LD_INT 46
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 45
65681: PUSH
65682: LD_INT 47
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: ST_TO_ADDR
// result := [ ] ;
65699: LD_ADDR_VAR 0 3
65703: PUSH
65704: EMPTY
65705: ST_TO_ADDR
// for i in turrets do
65706: LD_ADDR_VAR 0 4
65710: PUSH
65711: LD_VAR 0 1
65715: PUSH
65716: FOR_IN
65717: IFFALSE 65900
// begin nat := GetNation ( i ) ;
65719: LD_ADDR_VAR 0 7
65723: PUSH
65724: LD_VAR 0 4
65728: PPUSH
65729: CALL_OW 248
65733: ST_TO_ADDR
// weapon := 0 ;
65734: LD_ADDR_VAR 0 8
65738: PUSH
65739: LD_INT 0
65741: ST_TO_ADDR
// if not nat then
65742: LD_VAR 0 7
65746: NOT
65747: IFFALSE 65751
// continue ;
65749: GO 65716
// for j in list [ nat ] do
65751: LD_ADDR_VAR 0 5
65755: PUSH
65756: LD_VAR 0 10
65760: PUSH
65761: LD_VAR 0 7
65765: ARRAY
65766: PUSH
65767: FOR_IN
65768: IFFALSE 65809
// if GetBWeapon ( i ) = j [ 1 ] then
65770: LD_VAR 0 4
65774: PPUSH
65775: CALL_OW 269
65779: PUSH
65780: LD_VAR 0 5
65784: PUSH
65785: LD_INT 1
65787: ARRAY
65788: EQUAL
65789: IFFALSE 65807
// begin weapon := j [ 2 ] ;
65791: LD_ADDR_VAR 0 8
65795: PUSH
65796: LD_VAR 0 5
65800: PUSH
65801: LD_INT 2
65803: ARRAY
65804: ST_TO_ADDR
// break ;
65805: GO 65809
// end ;
65807: GO 65767
65809: POP
65810: POP
// if not weapon then
65811: LD_VAR 0 8
65815: NOT
65816: IFFALSE 65820
// continue ;
65818: GO 65716
// for k in factories do
65820: LD_ADDR_VAR 0 6
65824: PUSH
65825: LD_VAR 0 2
65829: PUSH
65830: FOR_IN
65831: IFFALSE 65896
// begin weapons := AvailableWeaponList ( k ) ;
65833: LD_ADDR_VAR 0 9
65837: PUSH
65838: LD_VAR 0 6
65842: PPUSH
65843: CALL_OW 478
65847: ST_TO_ADDR
// if not weapons then
65848: LD_VAR 0 9
65852: NOT
65853: IFFALSE 65857
// continue ;
65855: GO 65830
// if weapon in weapons then
65857: LD_VAR 0 8
65861: PUSH
65862: LD_VAR 0 9
65866: IN
65867: IFFALSE 65894
// begin result := [ i , weapon ] ;
65869: LD_ADDR_VAR 0 3
65873: PUSH
65874: LD_VAR 0 4
65878: PUSH
65879: LD_VAR 0 8
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: ST_TO_ADDR
// exit ;
65888: POP
65889: POP
65890: POP
65891: POP
65892: GO 65902
// end ; end ;
65894: GO 65830
65896: POP
65897: POP
// end ;
65898: GO 65716
65900: POP
65901: POP
// end ;
65902: LD_VAR 0 3
65906: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65907: LD_INT 0
65909: PPUSH
// if not side or side > 8 then
65910: LD_VAR 0 3
65914: NOT
65915: PUSH
65916: LD_VAR 0 3
65920: PUSH
65921: LD_INT 8
65923: GREATER
65924: OR
65925: IFFALSE 65929
// exit ;
65927: GO 65988
// if not range then
65929: LD_VAR 0 4
65933: NOT
65934: IFFALSE 65945
// range := - 12 ;
65936: LD_ADDR_VAR 0 4
65940: PUSH
65941: LD_INT 12
65943: NEG
65944: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65945: LD_VAR 0 1
65949: PPUSH
65950: LD_VAR 0 2
65954: PPUSH
65955: LD_VAR 0 3
65959: PPUSH
65960: LD_VAR 0 4
65964: PPUSH
65965: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65969: LD_VAR 0 1
65973: PPUSH
65974: LD_VAR 0 2
65978: PPUSH
65979: LD_VAR 0 3
65983: PPUSH
65984: CALL_OW 331
// end ;
65988: LD_VAR 0 5
65992: RET
// export function Video ( mode ) ; begin
65993: LD_INT 0
65995: PPUSH
// ingame_video = mode ;
65996: LD_ADDR_OWVAR 52
66000: PUSH
66001: LD_VAR 0 1
66005: ST_TO_ADDR
// interface_hidden = mode ;
66006: LD_ADDR_OWVAR 54
66010: PUSH
66011: LD_VAR 0 1
66015: ST_TO_ADDR
// end ;
66016: LD_VAR 0 2
66020: RET
// export function Join ( array , element ) ; begin
66021: LD_INT 0
66023: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66024: LD_ADDR_VAR 0 3
66028: PUSH
66029: LD_VAR 0 1
66033: PPUSH
66034: LD_VAR 0 1
66038: PUSH
66039: LD_INT 1
66041: PLUS
66042: PPUSH
66043: LD_VAR 0 2
66047: PPUSH
66048: CALL_OW 1
66052: ST_TO_ADDR
// end ;
66053: LD_VAR 0 3
66057: RET
// export function JoinUnion ( array , element ) ; begin
66058: LD_INT 0
66060: PPUSH
// result := array union element ;
66061: LD_ADDR_VAR 0 3
66065: PUSH
66066: LD_VAR 0 1
66070: PUSH
66071: LD_VAR 0 2
66075: UNION
66076: ST_TO_ADDR
// end ;
66077: LD_VAR 0 3
66081: RET
// export function GetBehemoths ( side ) ; begin
66082: LD_INT 0
66084: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66085: LD_ADDR_VAR 0 2
66089: PUSH
66090: LD_INT 22
66092: PUSH
66093: LD_VAR 0 1
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 31
66104: PUSH
66105: LD_INT 25
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PPUSH
66116: CALL_OW 69
66120: ST_TO_ADDR
// end ;
66121: LD_VAR 0 2
66125: RET
// export function Shuffle ( array ) ; var i , index ; begin
66126: LD_INT 0
66128: PPUSH
66129: PPUSH
66130: PPUSH
// result := [ ] ;
66131: LD_ADDR_VAR 0 2
66135: PUSH
66136: EMPTY
66137: ST_TO_ADDR
// if not array then
66138: LD_VAR 0 1
66142: NOT
66143: IFFALSE 66147
// exit ;
66145: GO 66246
// Randomize ;
66147: CALL_OW 10
// for i = array downto 1 do
66151: LD_ADDR_VAR 0 3
66155: PUSH
66156: DOUBLE
66157: LD_VAR 0 1
66161: INC
66162: ST_TO_ADDR
66163: LD_INT 1
66165: PUSH
66166: FOR_DOWNTO
66167: IFFALSE 66244
// begin index := rand ( 1 , array ) ;
66169: LD_ADDR_VAR 0 4
66173: PUSH
66174: LD_INT 1
66176: PPUSH
66177: LD_VAR 0 1
66181: PPUSH
66182: CALL_OW 12
66186: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66187: LD_ADDR_VAR 0 2
66191: PUSH
66192: LD_VAR 0 2
66196: PPUSH
66197: LD_VAR 0 2
66201: PUSH
66202: LD_INT 1
66204: PLUS
66205: PPUSH
66206: LD_VAR 0 1
66210: PUSH
66211: LD_VAR 0 4
66215: ARRAY
66216: PPUSH
66217: CALL_OW 2
66221: ST_TO_ADDR
// array := Delete ( array , index ) ;
66222: LD_ADDR_VAR 0 1
66226: PUSH
66227: LD_VAR 0 1
66231: PPUSH
66232: LD_VAR 0 4
66236: PPUSH
66237: CALL_OW 3
66241: ST_TO_ADDR
// end ;
66242: GO 66166
66244: POP
66245: POP
// end ;
66246: LD_VAR 0 2
66250: RET
// export function GetBaseMaterials ( base ) ; begin
66251: LD_INT 0
66253: PPUSH
// result := [ 0 , 0 , 0 ] ;
66254: LD_ADDR_VAR 0 2
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: LD_INT 0
66264: PUSH
66265: LD_INT 0
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: LIST
66272: ST_TO_ADDR
// if not base then
66273: LD_VAR 0 1
66277: NOT
66278: IFFALSE 66282
// exit ;
66280: GO 66331
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66282: LD_ADDR_VAR 0 2
66286: PUSH
66287: LD_VAR 0 1
66291: PPUSH
66292: LD_INT 1
66294: PPUSH
66295: CALL_OW 275
66299: PUSH
66300: LD_VAR 0 1
66304: PPUSH
66305: LD_INT 2
66307: PPUSH
66308: CALL_OW 275
66312: PUSH
66313: LD_VAR 0 1
66317: PPUSH
66318: LD_INT 3
66320: PPUSH
66321: CALL_OW 275
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: ST_TO_ADDR
// end ;
66331: LD_VAR 0 2
66335: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66336: LD_INT 0
66338: PPUSH
66339: PPUSH
// result := array ;
66340: LD_ADDR_VAR 0 3
66344: PUSH
66345: LD_VAR 0 1
66349: ST_TO_ADDR
// if size > 0 then
66350: LD_VAR 0 2
66354: PUSH
66355: LD_INT 0
66357: GREATER
66358: IFFALSE 66404
// for i := array downto size do
66360: LD_ADDR_VAR 0 4
66364: PUSH
66365: DOUBLE
66366: LD_VAR 0 1
66370: INC
66371: ST_TO_ADDR
66372: LD_VAR 0 2
66376: PUSH
66377: FOR_DOWNTO
66378: IFFALSE 66402
// result := Delete ( result , result ) ;
66380: LD_ADDR_VAR 0 3
66384: PUSH
66385: LD_VAR 0 3
66389: PPUSH
66390: LD_VAR 0 3
66394: PPUSH
66395: CALL_OW 3
66399: ST_TO_ADDR
66400: GO 66377
66402: POP
66403: POP
// end ;
66404: LD_VAR 0 3
66408: RET
// export function ComExit ( unit ) ; var tmp ; begin
66409: LD_INT 0
66411: PPUSH
66412: PPUSH
// if not IsInUnit ( unit ) then
66413: LD_VAR 0 1
66417: PPUSH
66418: CALL_OW 310
66422: NOT
66423: IFFALSE 66427
// exit ;
66425: GO 66487
// tmp := IsInUnit ( unit ) ;
66427: LD_ADDR_VAR 0 3
66431: PUSH
66432: LD_VAR 0 1
66436: PPUSH
66437: CALL_OW 310
66441: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66442: LD_VAR 0 3
66446: PPUSH
66447: CALL_OW 247
66451: PUSH
66452: LD_INT 2
66454: EQUAL
66455: IFFALSE 66468
// ComExitVehicle ( unit ) else
66457: LD_VAR 0 1
66461: PPUSH
66462: CALL_OW 121
66466: GO 66477
// ComExitBuilding ( unit ) ;
66468: LD_VAR 0 1
66472: PPUSH
66473: CALL_OW 122
// result := tmp ;
66477: LD_ADDR_VAR 0 2
66481: PUSH
66482: LD_VAR 0 3
66486: ST_TO_ADDR
// end ;
66487: LD_VAR 0 2
66491: RET
// export function ComExitAll ( units ) ; var i ; begin
66492: LD_INT 0
66494: PPUSH
66495: PPUSH
// if not units then
66496: LD_VAR 0 1
66500: NOT
66501: IFFALSE 66505
// exit ;
66503: GO 66531
// for i in units do
66505: LD_ADDR_VAR 0 3
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: FOR_IN
66516: IFFALSE 66529
// ComExit ( i ) ;
66518: LD_VAR 0 3
66522: PPUSH
66523: CALL 66409 0 1
66527: GO 66515
66529: POP
66530: POP
// end ;
66531: LD_VAR 0 2
66535: RET
// export function ResetHc ; begin
66536: LD_INT 0
66538: PPUSH
// InitHc ;
66539: CALL_OW 19
// hc_importance := 0 ;
66543: LD_ADDR_OWVAR 32
66547: PUSH
66548: LD_INT 0
66550: ST_TO_ADDR
// end ;
66551: LD_VAR 0 1
66555: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66556: LD_INT 0
66558: PPUSH
66559: PPUSH
66560: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66561: LD_ADDR_VAR 0 6
66565: PUSH
66566: LD_VAR 0 1
66570: PUSH
66571: LD_VAR 0 3
66575: PLUS
66576: PUSH
66577: LD_INT 2
66579: DIV
66580: ST_TO_ADDR
// if _x < 0 then
66581: LD_VAR 0 6
66585: PUSH
66586: LD_INT 0
66588: LESS
66589: IFFALSE 66606
// _x := _x * - 1 ;
66591: LD_ADDR_VAR 0 6
66595: PUSH
66596: LD_VAR 0 6
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: MUL
66605: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66606: LD_ADDR_VAR 0 7
66610: PUSH
66611: LD_VAR 0 2
66615: PUSH
66616: LD_VAR 0 4
66620: PLUS
66621: PUSH
66622: LD_INT 2
66624: DIV
66625: ST_TO_ADDR
// if _y < 0 then
66626: LD_VAR 0 7
66630: PUSH
66631: LD_INT 0
66633: LESS
66634: IFFALSE 66651
// _y := _y * - 1 ;
66636: LD_ADDR_VAR 0 7
66640: PUSH
66641: LD_VAR 0 7
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: MUL
66650: ST_TO_ADDR
// result := [ _x , _y ] ;
66651: LD_ADDR_VAR 0 5
66655: PUSH
66656: LD_VAR 0 6
66660: PUSH
66661: LD_VAR 0 7
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// end ;
66670: LD_VAR 0 5
66674: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66675: LD_INT 0
66677: PPUSH
66678: PPUSH
66679: PPUSH
66680: PPUSH
// task := GetTaskList ( unit ) ;
66681: LD_ADDR_VAR 0 7
66685: PUSH
66686: LD_VAR 0 1
66690: PPUSH
66691: CALL_OW 437
66695: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66696: LD_VAR 0 7
66700: NOT
66701: PUSH
66702: LD_VAR 0 1
66706: PPUSH
66707: LD_VAR 0 2
66711: PPUSH
66712: CALL_OW 308
66716: NOT
66717: AND
66718: IFFALSE 66722
// exit ;
66720: GO 66840
// if IsInArea ( unit , area ) then
66722: LD_VAR 0 1
66726: PPUSH
66727: LD_VAR 0 2
66731: PPUSH
66732: CALL_OW 308
66736: IFFALSE 66754
// begin ComMoveToArea ( unit , goAway ) ;
66738: LD_VAR 0 1
66742: PPUSH
66743: LD_VAR 0 3
66747: PPUSH
66748: CALL_OW 113
// exit ;
66752: GO 66840
// end ; if task [ 1 ] [ 1 ] <> M then
66754: LD_VAR 0 7
66758: PUSH
66759: LD_INT 1
66761: ARRAY
66762: PUSH
66763: LD_INT 1
66765: ARRAY
66766: PUSH
66767: LD_STRING M
66769: NONEQUAL
66770: IFFALSE 66774
// exit ;
66772: GO 66840
// x := task [ 1 ] [ 2 ] ;
66774: LD_ADDR_VAR 0 5
66778: PUSH
66779: LD_VAR 0 7
66783: PUSH
66784: LD_INT 1
66786: ARRAY
66787: PUSH
66788: LD_INT 2
66790: ARRAY
66791: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66792: LD_ADDR_VAR 0 6
66796: PUSH
66797: LD_VAR 0 7
66801: PUSH
66802: LD_INT 1
66804: ARRAY
66805: PUSH
66806: LD_INT 3
66808: ARRAY
66809: ST_TO_ADDR
// if InArea ( x , y , area ) then
66810: LD_VAR 0 5
66814: PPUSH
66815: LD_VAR 0 6
66819: PPUSH
66820: LD_VAR 0 2
66824: PPUSH
66825: CALL_OW 309
66829: IFFALSE 66840
// ComStop ( unit ) ;
66831: LD_VAR 0 1
66835: PPUSH
66836: CALL_OW 141
// end ;
66840: LD_VAR 0 4
66844: RET
// export function Abs ( value ) ; begin
66845: LD_INT 0
66847: PPUSH
// result := value ;
66848: LD_ADDR_VAR 0 2
66852: PUSH
66853: LD_VAR 0 1
66857: ST_TO_ADDR
// if value < 0 then
66858: LD_VAR 0 1
66862: PUSH
66863: LD_INT 0
66865: LESS
66866: IFFALSE 66883
// result := value * - 1 ;
66868: LD_ADDR_VAR 0 2
66872: PUSH
66873: LD_VAR 0 1
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: MUL
66882: ST_TO_ADDR
// end ;
66883: LD_VAR 0 2
66887: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66888: LD_INT 0
66890: PPUSH
66891: PPUSH
66892: PPUSH
66893: PPUSH
66894: PPUSH
66895: PPUSH
66896: PPUSH
66897: PPUSH
// if not unit or not building then
66898: LD_VAR 0 1
66902: NOT
66903: PUSH
66904: LD_VAR 0 2
66908: NOT
66909: OR
66910: IFFALSE 66914
// exit ;
66912: GO 67140
// x := GetX ( building ) ;
66914: LD_ADDR_VAR 0 4
66918: PUSH
66919: LD_VAR 0 2
66923: PPUSH
66924: CALL_OW 250
66928: ST_TO_ADDR
// y := GetY ( building ) ;
66929: LD_ADDR_VAR 0 6
66933: PUSH
66934: LD_VAR 0 2
66938: PPUSH
66939: CALL_OW 251
66943: ST_TO_ADDR
// d := GetDir ( building ) ;
66944: LD_ADDR_VAR 0 8
66948: PUSH
66949: LD_VAR 0 2
66953: PPUSH
66954: CALL_OW 254
66958: ST_TO_ADDR
// r := 4 ;
66959: LD_ADDR_VAR 0 9
66963: PUSH
66964: LD_INT 4
66966: ST_TO_ADDR
// for i := 1 to 5 do
66967: LD_ADDR_VAR 0 10
66971: PUSH
66972: DOUBLE
66973: LD_INT 1
66975: DEC
66976: ST_TO_ADDR
66977: LD_INT 5
66979: PUSH
66980: FOR_TO
66981: IFFALSE 67138
// begin _x := ShiftX ( x , d , r + i ) ;
66983: LD_ADDR_VAR 0 5
66987: PUSH
66988: LD_VAR 0 4
66992: PPUSH
66993: LD_VAR 0 8
66997: PPUSH
66998: LD_VAR 0 9
67002: PUSH
67003: LD_VAR 0 10
67007: PLUS
67008: PPUSH
67009: CALL_OW 272
67013: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67014: LD_ADDR_VAR 0 7
67018: PUSH
67019: LD_VAR 0 6
67023: PPUSH
67024: LD_VAR 0 8
67028: PPUSH
67029: LD_VAR 0 9
67033: PUSH
67034: LD_VAR 0 10
67038: PLUS
67039: PPUSH
67040: CALL_OW 273
67044: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67045: LD_VAR 0 5
67049: PPUSH
67050: LD_VAR 0 7
67054: PPUSH
67055: CALL_OW 488
67059: PUSH
67060: LD_VAR 0 5
67064: PPUSH
67065: LD_VAR 0 7
67069: PPUSH
67070: CALL_OW 428
67074: PPUSH
67075: CALL_OW 247
67079: PUSH
67080: LD_INT 3
67082: PUSH
67083: LD_INT 2
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: IN
67090: NOT
67091: AND
67092: IFFALSE 67136
// begin ComMoveXY ( unit , _x , _y ) ;
67094: LD_VAR 0 1
67098: PPUSH
67099: LD_VAR 0 5
67103: PPUSH
67104: LD_VAR 0 7
67108: PPUSH
67109: CALL_OW 111
// result := [ _x , _y ] ;
67113: LD_ADDR_VAR 0 3
67117: PUSH
67118: LD_VAR 0 5
67122: PUSH
67123: LD_VAR 0 7
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: ST_TO_ADDR
// exit ;
67132: POP
67133: POP
67134: GO 67140
// end ; end ;
67136: GO 66980
67138: POP
67139: POP
// end ;
67140: LD_VAR 0 3
67144: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67145: LD_INT 0
67147: PPUSH
67148: PPUSH
67149: PPUSH
// result := 0 ;
67150: LD_ADDR_VAR 0 3
67154: PUSH
67155: LD_INT 0
67157: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67158: LD_VAR 0 1
67162: PUSH
67163: LD_INT 0
67165: LESS
67166: PUSH
67167: LD_VAR 0 1
67171: PUSH
67172: LD_INT 8
67174: GREATER
67175: OR
67176: PUSH
67177: LD_VAR 0 2
67181: PUSH
67182: LD_INT 0
67184: LESS
67185: OR
67186: PUSH
67187: LD_VAR 0 2
67191: PUSH
67192: LD_INT 8
67194: GREATER
67195: OR
67196: IFFALSE 67200
// exit ;
67198: GO 67275
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67200: LD_ADDR_VAR 0 4
67204: PUSH
67205: LD_INT 22
67207: PUSH
67208: LD_VAR 0 2
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PPUSH
67217: CALL_OW 69
67221: PUSH
67222: FOR_IN
67223: IFFALSE 67273
// begin un := UnitShoot ( i ) ;
67225: LD_ADDR_VAR 0 5
67229: PUSH
67230: LD_VAR 0 4
67234: PPUSH
67235: CALL_OW 504
67239: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67240: LD_VAR 0 5
67244: PPUSH
67245: CALL_OW 255
67249: PUSH
67250: LD_VAR 0 1
67254: EQUAL
67255: IFFALSE 67271
// begin result := un ;
67257: LD_ADDR_VAR 0 3
67261: PUSH
67262: LD_VAR 0 5
67266: ST_TO_ADDR
// exit ;
67267: POP
67268: POP
67269: GO 67275
// end ; end ;
67271: GO 67222
67273: POP
67274: POP
// end ;
67275: LD_VAR 0 3
67279: RET
// export function GetCargoBay ( units ) ; begin
67280: LD_INT 0
67282: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67283: LD_ADDR_VAR 0 2
67287: PUSH
67288: LD_VAR 0 1
67292: PPUSH
67293: LD_INT 2
67295: PUSH
67296: LD_INT 34
67298: PUSH
67299: LD_INT 12
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 34
67308: PUSH
67309: LD_INT 51
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_INT 34
67318: PUSH
67319: LD_INT 32
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 34
67328: PUSH
67329: LD_EXP 33
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: LIST
67342: LIST
67343: LIST
67344: PPUSH
67345: CALL_OW 72
67349: ST_TO_ADDR
// end ;
67350: LD_VAR 0 2
67354: RET
// export function Negate ( value ) ; begin
67355: LD_INT 0
67357: PPUSH
// result := not value ;
67358: LD_ADDR_VAR 0 2
67362: PUSH
67363: LD_VAR 0 1
67367: NOT
67368: ST_TO_ADDR
// end ;
67369: LD_VAR 0 2
67373: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
67374: LD_INT 0
67376: PPUSH
// if x1 = x2 then
67377: LD_VAR 0 1
67381: PUSH
67382: LD_VAR 0 3
67386: EQUAL
67387: IFFALSE 67421
// begin if y1 > y2 then
67389: LD_VAR 0 2
67393: PUSH
67394: LD_VAR 0 4
67398: GREATER
67399: IFFALSE 67411
// result := 0 else
67401: LD_ADDR_VAR 0 5
67405: PUSH
67406: LD_INT 0
67408: ST_TO_ADDR
67409: GO 67419
// result := 3 ;
67411: LD_ADDR_VAR 0 5
67415: PUSH
67416: LD_INT 3
67418: ST_TO_ADDR
// exit ;
67419: GO 67507
// end ; if y1 = y2 then
67421: LD_VAR 0 2
67425: PUSH
67426: LD_VAR 0 4
67430: EQUAL
67431: IFFALSE 67465
// begin if x1 > x2 then
67433: LD_VAR 0 1
67437: PUSH
67438: LD_VAR 0 3
67442: GREATER
67443: IFFALSE 67455
// result := 1 else
67445: LD_ADDR_VAR 0 5
67449: PUSH
67450: LD_INT 1
67452: ST_TO_ADDR
67453: GO 67463
// result := 4 ;
67455: LD_ADDR_VAR 0 5
67459: PUSH
67460: LD_INT 4
67462: ST_TO_ADDR
// exit ;
67463: GO 67507
// end ; if x1 > x2 and y1 > y2 then
67465: LD_VAR 0 1
67469: PUSH
67470: LD_VAR 0 3
67474: GREATER
67475: PUSH
67476: LD_VAR 0 2
67480: PUSH
67481: LD_VAR 0 4
67485: GREATER
67486: AND
67487: IFFALSE 67499
// result := 2 else
67489: LD_ADDR_VAR 0 5
67493: PUSH
67494: LD_INT 2
67496: ST_TO_ADDR
67497: GO 67507
// result := 5 ;
67499: LD_ADDR_VAR 0 5
67503: PUSH
67504: LD_INT 5
67506: ST_TO_ADDR
// end ; end_of_file
67507: LD_VAR 0 5
67511: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67512: LD_VAR 0 1
67516: PUSH
67517: LD_INT 200
67519: DOUBLE
67520: GREATEREQUAL
67521: IFFALSE 67529
67523: LD_INT 299
67525: DOUBLE
67526: LESSEQUAL
67527: IFTRUE 67531
67529: GO 67563
67531: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67532: LD_VAR 0 1
67536: PPUSH
67537: LD_VAR 0 2
67541: PPUSH
67542: LD_VAR 0 3
67546: PPUSH
67547: LD_VAR 0 4
67551: PPUSH
67552: LD_VAR 0 5
67556: PPUSH
67557: CALL 25846 0 5
67561: GO 67640
67563: LD_INT 300
67565: DOUBLE
67566: GREATEREQUAL
67567: IFFALSE 67575
67569: LD_INT 399
67571: DOUBLE
67572: LESSEQUAL
67573: IFTRUE 67577
67575: GO 67639
67577: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67578: LD_VAR 0 1
67582: PPUSH
67583: LD_VAR 0 2
67587: PPUSH
67588: LD_VAR 0 3
67592: PPUSH
67593: LD_VAR 0 4
67597: PPUSH
67598: LD_VAR 0 5
67602: PPUSH
67603: LD_VAR 0 6
67607: PPUSH
67608: LD_VAR 0 7
67612: PPUSH
67613: LD_VAR 0 8
67617: PPUSH
67618: LD_VAR 0 9
67622: PPUSH
67623: LD_VAR 0 10
67627: PPUSH
67628: LD_VAR 0 11
67632: PPUSH
67633: CALL 23734 0 11
67637: GO 67640
67639: POP
// end ;
67640: PPOPN 11
67642: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67643: LD_VAR 0 1
67647: PPUSH
67648: LD_VAR 0 2
67652: PPUSH
67653: LD_VAR 0 3
67657: PPUSH
67658: LD_VAR 0 4
67662: PPUSH
67663: LD_VAR 0 5
67667: PPUSH
67668: CALL 25828 0 5
// end ; end_of_file
67672: PPOPN 5
67674: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67675: LD_VAR 0 1
67679: PPUSH
67680: LD_VAR 0 2
67684: PPUSH
67685: LD_VAR 0 3
67689: PPUSH
67690: LD_VAR 0 4
67694: PPUSH
67695: LD_VAR 0 5
67699: PPUSH
67700: LD_VAR 0 6
67704: PPUSH
67705: CALL 12542 0 6
// end ;
67709: PPOPN 6
67711: END
