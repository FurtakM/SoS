// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 46 0 0
// CreateNature ;
  19: CALL 537 0 0
// PrepareAmericans ;
  23: CALL 836 0 0
// PrepareArabian ;
  27: CALL 12058 0 0
// if debug then
  31: LD_EXP 1
  35: IFFALSE 41
// DebugMode ;
  37: CALL 218 0 0
// Action ;
  41: CALL 4791 0 0
// end ;
  45: END
// export debug , prefix , missionStart , aviradzeSpotted , deltaSpotted , spottedBeforeRadio , sciSpotted , aviradzeQuestDone , sciCounterKill , usAlert , usActiveDefend , gladstoneEscaped , timeUntilFarmer , attackDeltaAllowed , trickyMove , usPatrol , trap , lostCounter ; function Init ; begin
  46: LD_INT 0
  48: PPUSH
// debug := false ;
  49: LD_ADDR_EXP 1
  53: PUSH
  54: LD_INT 0
  56: ST_TO_ADDR
// missionStart := false ;
  57: LD_ADDR_EXP 3
  61: PUSH
  62: LD_INT 0
  64: ST_TO_ADDR
// aviradzeSpotted := false ;
  65: LD_ADDR_EXP 4
  69: PUSH
  70: LD_INT 0
  72: ST_TO_ADDR
// deltaSpotted := false ;
  73: LD_ADDR_EXP 5
  77: PUSH
  78: LD_INT 0
  80: ST_TO_ADDR
// sciSpotted := false ;
  81: LD_ADDR_EXP 7
  85: PUSH
  86: LD_INT 0
  88: ST_TO_ADDR
// sciCounterKill := 0 ;
  89: LD_ADDR_EXP 9
  93: PUSH
  94: LD_INT 0
  96: ST_TO_ADDR
// aviradzeQuestDone := false ;
  97: LD_ADDR_EXP 8
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// attackDeltaAllowed := false ;
 105: LD_ADDR_EXP 14
 109: PUSH
 110: LD_INT 0
 112: ST_TO_ADDR
// usAlert := false ;
 113: LD_ADDR_EXP 10
 117: PUSH
 118: LD_INT 0
 120: ST_TO_ADDR
// usActiveDefend := false ;
 121: LD_ADDR_EXP 11
 125: PUSH
 126: LD_INT 0
 128: ST_TO_ADDR
// usPatrol := [ ] ;
 129: LD_ADDR_EXP 16
 133: PUSH
 134: EMPTY
 135: ST_TO_ADDR
// timeUntilFarmer := [ 40 40$00 , 30 30$00 , 20 20$00 , 15 15$00 ] [ Difficulty ] ;
 136: LD_ADDR_EXP 13
 140: PUSH
 141: LD_INT 84000
 143: PUSH
 144: LD_INT 63000
 146: PUSH
 147: LD_INT 42000
 149: PUSH
 150: LD_INT 31500
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: LIST
 157: LIST
 158: PUSH
 159: LD_OWVAR 67
 163: ARRAY
 164: ST_TO_ADDR
// trickyMove := false ;
 165: LD_ADDR_EXP 15
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// gladstoneEscaped := false ;
 173: LD_ADDR_EXP 12
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// prefix := 01_ ;
 181: LD_ADDR_EXP 2
 185: PUSH
 186: LD_STRING 01_
 188: ST_TO_ADDR
// trap := 0 ;
 189: LD_ADDR_EXP 17
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter := false ;
 197: LD_ADDR_EXP 18
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// spottedBeforeRadio := false ;
 205: LD_ADDR_EXP 6
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// end ;
 213: LD_VAR 0 1
 217: RET
// function DebugMode ; begin
 218: LD_INT 0
 220: PPUSH
// FogOff ( 1 ) ;
 221: LD_INT 1
 223: PPUSH
 224: CALL_OW 344
// Difficulty := 2 ;
 228: LD_ADDR_OWVAR 67
 232: PUSH
 233: LD_INT 2
 235: ST_TO_ADDR
// end ; end_of_file
 236: LD_VAR 0 1
 240: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 241: LD_INT 0
 243: PPUSH
// uc_side := side ;
 244: LD_ADDR_OWVAR 20
 248: PUSH
 249: LD_VAR 0 1
 253: ST_TO_ADDR
// uc_nation := nation ;
 254: LD_ADDR_OWVAR 21
 258: PUSH
 259: LD_VAR 0 2
 263: ST_TO_ADDR
// vc_chassis := chassis ;
 264: LD_ADDR_OWVAR 37
 268: PUSH
 269: LD_VAR 0 3
 273: ST_TO_ADDR
// vc_engine := engine ;
 274: LD_ADDR_OWVAR 39
 278: PUSH
 279: LD_VAR 0 4
 283: ST_TO_ADDR
// vc_control := control ;
 284: LD_ADDR_OWVAR 38
 288: PUSH
 289: LD_VAR 0 5
 293: ST_TO_ADDR
// vc_weapon := weapon ;
 294: LD_ADDR_OWVAR 40
 298: PUSH
 299: LD_VAR 0 6
 303: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 304: LD_ADDR_OWVAR 41
 308: PUSH
 309: LD_VAR 0 7
 313: ST_TO_ADDR
// result := CreateVehicle ;
 314: LD_ADDR_VAR 0 8
 318: PUSH
 319: CALL_OW 45
 323: ST_TO_ADDR
// end ;
 324: LD_VAR 0 8
 328: RET
// export function SayX ( units , ident ) ; var i ; begin
 329: LD_INT 0
 331: PPUSH
 332: PPUSH
// result := false ;
 333: LD_ADDR_VAR 0 3
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// if not units then
 341: LD_VAR 0 1
 345: NOT
 346: IFFALSE 350
// exit ;
 348: GO 404
// for i in units do
 350: LD_ADDR_VAR 0 4
 354: PUSH
 355: LD_VAR 0 1
 359: PUSH
 360: FOR_IN
 361: IFFALSE 402
// if IsOk ( i ) then
 363: LD_VAR 0 4
 367: PPUSH
 368: CALL_OW 302
 372: IFFALSE 400
// begin Say ( i , ident ) ;
 374: LD_VAR 0 4
 378: PPUSH
 379: LD_VAR 0 2
 383: PPUSH
 384: CALL_OW 88
// result := i ;
 388: LD_ADDR_VAR 0 3
 392: PUSH
 393: LD_VAR 0 4
 397: ST_TO_ADDR
// break ;
 398: GO 402
// end ;
 400: GO 360
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 3
 408: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 409: LD_INT 0
 411: PPUSH
 412: PPUSH
// InitUc ;
 413: CALL_OW 18
// InitHc ;
 417: CALL_OW 19
// uc_side := 0 ;
 421: LD_ADDR_OWVAR 20
 425: PUSH
 426: LD_INT 0
 428: ST_TO_ADDR
// uc_nation := 0 ;
 429: LD_ADDR_OWVAR 21
 433: PUSH
 434: LD_INT 0
 436: ST_TO_ADDR
// for i = 1 to amount do
 437: LD_ADDR_VAR 0 4
 441: PUSH
 442: DOUBLE
 443: LD_INT 1
 445: DEC
 446: ST_TO_ADDR
 447: LD_VAR 0 2
 451: PUSH
 452: FOR_TO
 453: IFFALSE 526
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 455: LD_ADDR_OWVAR 29
 459: PUSH
 460: LD_INT 9
 462: PPUSH
 463: LD_INT 12
 465: PPUSH
 466: CALL_OW 12
 470: PUSH
 471: LD_INT 9
 473: PPUSH
 474: LD_INT 12
 476: PPUSH
 477: CALL_OW 12
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// hc_agressivity := 0 ;
 486: LD_ADDR_OWVAR 35
 490: PUSH
 491: LD_INT 0
 493: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 494: LD_INT 0
 496: PPUSH
 497: LD_INT 12
 499: PPUSH
 500: LD_INT 1
 502: PPUSH
 503: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 507: CALL_OW 44
 511: PPUSH
 512: LD_VAR 0 1
 516: PPUSH
 517: LD_INT 0
 519: PPUSH
 520: CALL_OW 49
// end ;
 524: GO 452
 526: POP
 527: POP
// InitHc ;
 528: CALL_OW 19
// end ;
 532: LD_VAR 0 3
 536: RET
// export function CreateNature ; var i ; begin
 537: LD_INT 0
 539: PPUSH
 540: PPUSH
// SpawnApeman ( forest , 9 ) ;
 541: LD_INT 1
 543: PPUSH
 544: LD_INT 9
 546: PPUSH
 547: CALL 409 0 2
// for i := 1 to 4 do
 551: LD_ADDR_VAR 0 2
 555: PUSH
 556: DOUBLE
 557: LD_INT 1
 559: DEC
 560: ST_TO_ADDR
 561: LD_INT 4
 563: PUSH
 564: FOR_TO
 565: IFFALSE 600
// begin hc_class := 21 ;
 567: LD_ADDR_OWVAR 28
 571: PUSH
 572: LD_INT 21
 574: ST_TO_ADDR
// hc_gallery :=  ;
 575: LD_ADDR_OWVAR 33
 579: PUSH
 580: LD_STRING 
 582: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 583: CALL_OW 44
 587: PPUSH
 588: LD_INT 1
 590: PPUSH
 591: LD_INT 0
 593: PPUSH
 594: CALL_OW 49
// end ;
 598: GO 564
 600: POP
 601: POP
// for i := 1 to 2 do
 602: LD_ADDR_VAR 0 2
 606: PUSH
 607: DOUBLE
 608: LD_INT 1
 610: DEC
 611: ST_TO_ADDR
 612: LD_INT 2
 614: PUSH
 615: FOR_TO
 616: IFFALSE 651
// begin hc_class := 18 ;
 618: LD_ADDR_OWVAR 28
 622: PUSH
 623: LD_INT 18
 625: ST_TO_ADDR
// hc_gallery :=  ;
 626: LD_ADDR_OWVAR 33
 630: PUSH
 631: LD_STRING 
 633: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 634: CALL_OW 44
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: LD_INT 0
 644: PPUSH
 645: CALL_OW 49
// end ;
 649: GO 615
 651: POP
 652: POP
// for i := 1 to 3 do
 653: LD_ADDR_VAR 0 2
 657: PUSH
 658: DOUBLE
 659: LD_INT 1
 661: DEC
 662: ST_TO_ADDR
 663: LD_INT 3
 665: PUSH
 666: FOR_TO
 667: IFFALSE 702
// begin hc_class := 13 ;
 669: LD_ADDR_OWVAR 28
 673: PUSH
 674: LD_INT 13
 676: ST_TO_ADDR
// hc_gallery :=  ;
 677: LD_ADDR_OWVAR 33
 681: PUSH
 682: LD_STRING 
 684: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 685: CALL_OW 44
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: LD_INT 0
 695: PPUSH
 696: CALL_OW 49
// end ;
 700: GO 666
 702: POP
 703: POP
// for i := 1 to 4 do
 704: LD_ADDR_VAR 0 2
 708: PUSH
 709: DOUBLE
 710: LD_INT 1
 712: DEC
 713: ST_TO_ADDR
 714: LD_INT 4
 716: PUSH
 717: FOR_TO
 718: IFFALSE 753
// begin hc_class := class_frog ;
 720: LD_ADDR_OWVAR 28
 724: PUSH
 725: LD_INT 19
 727: ST_TO_ADDR
// hc_gallery :=  ;
 728: LD_ADDR_OWVAR 33
 732: PUSH
 733: LD_STRING 
 735: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 736: CALL_OW 44
 740: PPUSH
 741: LD_INT 8
 743: PPUSH
 744: LD_INT 0
 746: PPUSH
 747: CALL_OW 49
// end ;
 751: GO 717
 753: POP
 754: POP
// end ;
 755: LD_VAR 0 1
 759: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 760: LD_INT 0
 762: PPUSH
 763: PPUSH
 764: PPUSH
// if not observer or not unit then
 765: LD_VAR 0 1
 769: NOT
 770: IFTRUE 779
 772: PUSH
 773: LD_VAR 0 2
 777: NOT
 778: OR
 779: IFFALSE 783
// exit ;
 781: GO 831
// if not See ( GetSide ( observer ) , unit ) then
 783: LD_VAR 0 1
 787: PPUSH
 788: CALL_OW 255
 792: PPUSH
 793: LD_VAR 0 2
 797: PPUSH
 798: CALL_OW 292
 802: NOT
 803: IFFALSE 807
// exit ;
 805: GO 831
// result := GetDistUnits ( observer , unit ) < 12 ;
 807: LD_ADDR_VAR 0 3
 811: PUSH
 812: LD_VAR 0 1
 816: PPUSH
 817: LD_VAR 0 2
 821: PPUSH
 822: CALL_OW 296
 826: PUSH
 827: LD_INT 12
 829: LESS
 830: ST_TO_ADDR
// end ; end_of_file
 831: LD_VAR 0 3
 835: RET
// export Gladstone , Lynch ; export usForces , usSci ; export function PrepareAmericans ; var i , un , veh , tmp , arm ; begin
 836: LD_INT 0
 838: PPUSH
 839: PPUSH
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
// usForces := [ ] ;
 844: LD_ADDR_EXP 21
 848: PUSH
 849: EMPTY
 850: ST_TO_ADDR
// usSci := [ ] ;
 851: LD_ADDR_EXP 22
 855: PUSH
 856: EMPTY
 857: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
 858: LD_INT 1
 860: PPUSH
 861: LD_STRING Delta
 863: PPUSH
 864: CALL_OW 500
// SetResourceType ( GetBase ( Delta ) , mat_cans , 400 ) ;
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 274
 875: PPUSH
 876: LD_INT 1
 878: PPUSH
 879: LD_INT 400
 881: PPUSH
 882: CALL_OW 277
// SetResourceType ( GetBase ( Delta ) , mat_oil , 80 ) ;
 886: LD_INT 1
 888: PPUSH
 889: CALL_OW 274
 893: PPUSH
 894: LD_INT 2
 896: PPUSH
 897: LD_INT 80
 899: PPUSH
 900: CALL_OW 277
// uc_side := 1 ;
 904: LD_ADDR_OWVAR 20
 908: PUSH
 909: LD_INT 1
 911: ST_TO_ADDR
// uc_nation := 1 ;
 912: LD_ADDR_OWVAR 21
 916: PUSH
 917: LD_INT 1
 919: ST_TO_ADDR
// InitHc ;
 920: CALL_OW 19
// hc_importance := 0 ;
 924: LD_ADDR_OWVAR 32
 928: PUSH
 929: LD_INT 0
 931: ST_TO_ADDR
// Lynch := PrepareUnit ( Lynch , false ,  ) ;
 932: LD_ADDR_EXP 20
 936: PUSH
 937: LD_STRING Lynch
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: LD_STRING 
 945: PPUSH
 946: CALL 35453 0 3
 950: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 951: LD_ADDR_EXP 19
 955: PUSH
 956: LD_STRING Gladstone
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: LD_STRING 
 964: PPUSH
 965: CALL 35453 0 3
 969: ST_TO_ADDR
// PlaceHumanInUnit ( Lynch , Delta ) ;
 970: LD_EXP 20
 974: PPUSH
 975: LD_INT 1
 977: PPUSH
 978: CALL_OW 52
// PlaceHumanInUnit ( Gladstone , usLab ) ;
 982: LD_EXP 19
 986: PPUSH
 987: LD_INT 3
 989: PPUSH
 990: CALL_OW 52
// for i := 1 to [ 1 , 2 , 2 , 2 ] [ Difficulty ] do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 1
1006: PUSH
1007: LD_INT 2
1009: PUSH
1010: LD_INT 2
1012: PUSH
1013: LD_INT 2
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: LIST
1020: LIST
1021: PUSH
1022: LD_OWVAR 67
1026: ARRAY
1027: PUSH
1028: FOR_TO
1029: IFFALSE 1079
// begin PrepareHuman ( false , 2 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1031: LD_INT 0
1033: PPUSH
1034: LD_INT 2
1036: PPUSH
1037: LD_INT 1
1039: PUSH
1040: LD_INT 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: PUSH
1055: LD_OWVAR 67
1059: ARRAY
1060: PPUSH
1061: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , Delta ) ;
1065: CALL_OW 44
1069: PPUSH
1070: LD_INT 1
1072: PPUSH
1073: CALL_OW 52
// end ;
1077: GO 1028
1079: POP
1080: POP
// for i := 1 to 7 - Difficulty do
1081: LD_ADDR_VAR 0 2
1085: PUSH
1086: DOUBLE
1087: LD_INT 1
1089: DEC
1090: ST_TO_ADDR
1091: LD_INT 7
1093: PUSH
1094: LD_OWVAR 67
1098: MINUS
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1190
// begin PrepareHuman ( false , 4 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] ) ;
1103: LD_INT 0
1105: PPUSH
1106: LD_INT 4
1108: PPUSH
1109: LD_INT 1
1111: PUSH
1112: LD_INT 2
1114: PUSH
1115: LD_INT 2
1117: PUSH
1118: LD_INT 2
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_OWVAR 67
1131: ARRAY
1132: PPUSH
1133: CALL_OW 380
// un := CreateHuman ;
1137: LD_ADDR_VAR 0 3
1141: PUSH
1142: CALL_OW 44
1146: ST_TO_ADDR
// PlaceHumanInUnit ( un , usLab ) ;
1147: LD_VAR 0 3
1151: PPUSH
1152: LD_INT 3
1154: PPUSH
1155: CALL_OW 52
// usSci := Replace ( usSci , usSci + 1 , un ) ;
1159: LD_ADDR_EXP 22
1163: PUSH
1164: LD_EXP 22
1168: PPUSH
1169: LD_EXP 22
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: PPUSH
1178: LD_VAR 0 3
1182: PPUSH
1183: CALL_OW 1
1187: ST_TO_ADDR
// end ;
1188: GO 1100
1190: POP
1191: POP
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
1192: LD_ADDR_VAR 0 6
1196: PUSH
1197: LD_INT 22
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: EMPTY
1204: LIST
1205: LIST
1206: PUSH
1207: LD_INT 30
1209: PUSH
1210: LD_INT 4
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PPUSH
1221: CALL_OW 69
1225: ST_TO_ADDR
// for i := 1 to 3 + [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: DOUBLE
1232: LD_INT 1
1234: DEC
1235: ST_TO_ADDR
1236: LD_INT 3
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 2
1244: PUSH
1245: LD_INT 2
1247: PUSH
1248: LD_INT 3
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: LD_OWVAR 67
1261: ARRAY
1262: PLUS
1263: PUSH
1264: FOR_TO
1265: IFFALSE 1347
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
1267: LD_INT 0
1269: PPUSH
1270: LD_INT 1
1272: PPUSH
1273: LD_INT 1
1275: PUSH
1276: LD_INT 2
1278: PUSH
1279: LD_INT 3
1281: PUSH
1282: LD_INT 3
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: PUSH
1291: LD_OWVAR 67
1295: ARRAY
1296: PPUSH
1297: CALL_OW 380
// un := CreateHuman ;
1301: LD_ADDR_VAR 0 3
1305: PUSH
1306: CALL_OW 44
1310: ST_TO_ADDR
// usForces := usForces ^ un ;
1311: LD_ADDR_EXP 21
1315: PUSH
1316: LD_EXP 21
1320: PUSH
1321: LD_VAR 0 3
1325: ADD
1326: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm [ 1 ] ) ;
1327: LD_VAR 0 3
1331: PPUSH
1332: LD_VAR 0 6
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: PPUSH
1341: CALL_OW 52
// end ;
1345: GO 1264
1347: POP
1348: POP
// if Difficulty > 1 then
1349: LD_OWVAR 67
1353: PUSH
1354: LD_INT 1
1356: GREATER
1357: IFFALSE 1456
// begin for i := 1 to Difficulty do
1359: LD_ADDR_VAR 0 2
1363: PUSH
1364: DOUBLE
1365: LD_INT 1
1367: DEC
1368: ST_TO_ADDR
1369: LD_OWVAR 67
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1454
// begin PrepareHuman ( false , 1 , [ 1 , 2 , 2 , 3 ] [ Difficulty ] ) ;
1377: LD_INT 0
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 1
1385: PUSH
1386: LD_INT 2
1388: PUSH
1389: LD_INT 2
1391: PUSH
1392: LD_INT 3
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: LIST
1399: LIST
1400: PUSH
1401: LD_OWVAR 67
1405: ARRAY
1406: PPUSH
1407: CALL_OW 380
// un := CreateHuman ;
1411: LD_ADDR_VAR 0 3
1415: PUSH
1416: CALL_OW 44
1420: ST_TO_ADDR
// usForces := usForces ^ un ;
1421: LD_ADDR_EXP 21
1425: PUSH
1426: LD_EXP 21
1430: PUSH
1431: LD_VAR 0 3
1435: ADD
1436: ST_TO_ADDR
// PlaceUnitArea ( un , usAdditionalDefenceArea , false ) ;
1437: LD_VAR 0 3
1441: PPUSH
1442: LD_INT 9
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// end ;
1452: GO 1374
1454: POP
1455: POP
// end ; PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 100 ) ;
1456: LD_INT 1
1458: PPUSH
1459: LD_INT 1
1461: PPUSH
1462: LD_INT 1
1464: PPUSH
1465: LD_INT 2
1467: PPUSH
1468: LD_INT 1
1470: PPUSH
1471: LD_INT 2
1473: PPUSH
1474: LD_INT 100
1476: PPUSH
1477: CALL 241 0 7
// veh := CreateVehicle ;
1481: LD_ADDR_VAR 0 4
1485: PUSH
1486: CALL_OW 45
1490: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1491: LD_VAR 0 4
1495: PPUSH
1496: LD_INT 2
1498: PPUSH
1499: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 24 , false ) ;
1503: LD_VAR 0 4
1507: PPUSH
1508: LD_INT 43
1510: PPUSH
1511: LD_INT 24
1513: PPUSH
1514: LD_INT 0
1516: PPUSH
1517: CALL_OW 48
// end ;
1521: LD_VAR 0 1
1525: RET
// export function SendSciToForest ; var i , j , k , tmp , xy ; begin
1526: LD_INT 0
1528: PPUSH
1529: PPUSH
1530: PPUSH
1531: PPUSH
1532: PPUSH
1533: PPUSH
// if not usSci then
1534: LD_EXP 22
1538: NOT
1539: IFFALSE 1543
// exit ;
1541: GO 1717
// xy := AreaToList ( tameArea , 0 ) ;
1543: LD_ADDR_VAR 0 6
1547: PUSH
1548: LD_INT 5
1550: PPUSH
1551: LD_INT 0
1553: PPUSH
1554: CALL_OW 517
1558: ST_TO_ADDR
// for i in usSci do
1559: LD_ADDR_VAR 0 2
1563: PUSH
1564: LD_EXP 22
1568: PUSH
1569: FOR_IN
1570: IFFALSE 1715
// begin k := rand ( 1 , xy [ 1 ] ) ;
1572: LD_ADDR_VAR 0 4
1576: PUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_VAR 0 6
1584: PUSH
1585: LD_INT 1
1587: ARRAY
1588: PPUSH
1589: CALL_OW 12
1593: ST_TO_ADDR
// ComExitBuilding ( i ) ;
1594: LD_VAR 0 2
1598: PPUSH
1599: CALL_OW 122
// AddComMoveXY ( i , xy [ 1 ] [ k ] , xy [ 2 ] [ k ] ) ;
1603: LD_VAR 0 2
1607: PPUSH
1608: LD_VAR 0 6
1612: PUSH
1613: LD_INT 1
1615: ARRAY
1616: PUSH
1617: LD_VAR 0 4
1621: ARRAY
1622: PPUSH
1623: LD_VAR 0 6
1627: PUSH
1628: LD_INT 2
1630: ARRAY
1631: PUSH
1632: LD_VAR 0 4
1636: ARRAY
1637: PPUSH
1638: CALL_OW 171
// for j := 1 to 2 do
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: DOUBLE
1648: LD_INT 1
1650: DEC
1651: ST_TO_ADDR
1652: LD_INT 2
1654: PUSH
1655: FOR_TO
1656: IFFALSE 1711
// begin tmp := Delete ( xy [ j ] , k ) ;
1658: LD_ADDR_VAR 0 5
1662: PUSH
1663: LD_VAR 0 6
1667: PUSH
1668: LD_VAR 0 3
1672: ARRAY
1673: PPUSH
1674: LD_VAR 0 4
1678: PPUSH
1679: CALL_OW 3
1683: ST_TO_ADDR
// xy := Replace ( xy , j , tmp ) ;
1684: LD_ADDR_VAR 0 6
1688: PUSH
1689: LD_VAR 0 6
1693: PPUSH
1694: LD_VAR 0 3
1698: PPUSH
1699: LD_VAR 0 5
1703: PPUSH
1704: CALL_OW 1
1708: ST_TO_ADDR
// end ;
1709: GO 1655
1711: POP
1712: POP
// end ;
1713: GO 1569
1715: POP
1716: POP
// end ;
1717: LD_VAR 0 1
1721: RET
// every 0 0$5 + 0 0$10 trigger aviradzeSpotted and usSci and not usAlert and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do var i , x , y , d , ape ;
1722: LD_EXP 4
1726: IFFALSE 1734
1728: PUSH
1729: LD_EXP 22
1733: AND
1734: IFFALSE 1743
1736: PUSH
1737: LD_EXP 10
1741: NOT
1742: AND
1743: IFFALSE 1775
1745: PUSH
1746: LD_INT 22
1748: PUSH
1749: LD_INT 0
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PUSH
1756: LD_INT 25
1758: PUSH
1759: LD_INT 12
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PPUSH
1770: CALL_OW 69
1774: AND
1775: IFFALSE 2285
1777: GO 1779
1779: DISABLE
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
1784: PPUSH
1785: PPUSH
1786: PPUSH
// begin enable ;
1787: ENABLE
// if UnitFilter ( usSci , [ f_or , [ f_hastask ] , [ f_inside ] ] ) then
1788: LD_EXP 22
1792: PPUSH
1793: LD_INT 2
1795: PUSH
1796: LD_INT 60
1798: PUSH
1799: EMPTY
1800: LIST
1801: PUSH
1802: LD_INT 54
1804: PUSH
1805: EMPTY
1806: LIST
1807: PUSH
1808: EMPTY
1809: LIST
1810: LIST
1811: LIST
1812: PPUSH
1813: CALL_OW 72
1817: IFFALSE 1821
// exit ;
1819: GO 2285
// for i in usSci do
1821: LD_ADDR_VAR 0 1
1825: PUSH
1826: LD_EXP 22
1830: PUSH
1831: FOR_IN
1832: IFFALSE 2283
// begin if not HasTask ( i ) and GetLives ( i ) = 1000 then
1834: LD_VAR 0 1
1838: PPUSH
1839: CALL_OW 314
1843: NOT
1844: IFFALSE 1861
1846: PUSH
1847: LD_VAR 0 1
1851: PPUSH
1852: CALL_OW 256
1856: PUSH
1857: LD_INT 1000
1859: EQUAL
1860: AND
1861: IFFALSE 2068
// begin ape := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) , i ) ;
1863: LD_ADDR_VAR 0 5
1867: PUSH
1868: LD_INT 22
1870: PUSH
1871: LD_INT 0
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: PUSH
1878: LD_INT 25
1880: PUSH
1881: LD_INT 12
1883: PUSH
1884: EMPTY
1885: LIST
1886: LIST
1887: PUSH
1888: EMPTY
1889: LIST
1890: LIST
1891: PPUSH
1892: CALL_OW 69
1896: PPUSH
1897: LD_VAR 0 1
1901: PPUSH
1902: CALL_OW 74
1906: ST_TO_ADDR
// if GetDistUnits ( i , ape ) < 10 then
1907: LD_VAR 0 1
1911: PPUSH
1912: LD_VAR 0 5
1916: PPUSH
1917: CALL_OW 296
1921: PUSH
1922: LD_INT 10
1924: LESS
1925: IFFALSE 1958
// ComTameXY ( i , GetX ( ape ) , GetY ( ape ) ) else
1927: LD_VAR 0 1
1931: PPUSH
1932: LD_VAR 0 5
1936: PPUSH
1937: CALL_OW 250
1941: PPUSH
1942: LD_VAR 0 5
1946: PPUSH
1947: CALL_OW 251
1951: PPUSH
1952: CALL_OW 131
1956: GO 2068
// begin d := rand ( 0 , 5 ) ;
1958: LD_ADDR_VAR 0 4
1962: PUSH
1963: LD_INT 0
1965: PPUSH
1966: LD_INT 5
1968: PPUSH
1969: CALL_OW 12
1973: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 3 ) ;
1974: LD_ADDR_VAR 0 2
1978: PUSH
1979: LD_VAR 0 1
1983: PPUSH
1984: CALL_OW 250
1988: PPUSH
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: CALL_OW 272
2001: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 3 ) ;
2002: LD_ADDR_VAR 0 3
2006: PUSH
2007: LD_VAR 0 1
2011: PPUSH
2012: CALL_OW 251
2016: PPUSH
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_INT 3
2024: PPUSH
2025: CALL_OW 273
2029: ST_TO_ADDR
// if not ValidHex ( x , y ) then
2030: LD_VAR 0 2
2034: PPUSH
2035: LD_VAR 0 3
2039: PPUSH
2040: CALL_OW 488
2044: NOT
2045: IFFALSE 2049
// continue ;
2047: GO 1831
// ComMoveXY ( i , x , y ) ;
2049: LD_VAR 0 1
2053: PPUSH
2054: LD_VAR 0 2
2058: PPUSH
2059: LD_VAR 0 3
2063: PPUSH
2064: CALL_OW 111
// end ; end ; if GetLives ( i ) < 900 and GetDistUnitXY ( i , 37 , 23 ) > 10 then
2068: LD_VAR 0 1
2072: PPUSH
2073: CALL_OW 256
2077: PUSH
2078: LD_INT 900
2080: LESS
2081: IFFALSE 2104
2083: PUSH
2084: LD_VAR 0 1
2088: PPUSH
2089: LD_INT 37
2091: PPUSH
2092: LD_INT 23
2094: PPUSH
2095: CALL_OW 297
2099: PUSH
2100: LD_INT 10
2102: GREATER
2103: AND
2104: IFFALSE 2194
// begin SetTag ( Gladstone , 1 ) ;
2106: LD_EXP 19
2110: PPUSH
2111: LD_INT 1
2113: PPUSH
2114: CALL_OW 109
// if IsOk ( Gladstone ) and IsInUnit ( Gladstone ) then
2118: LD_EXP 19
2122: PPUSH
2123: CALL_OW 302
2127: IFFALSE 2140
2129: PUSH
2130: LD_EXP 19
2134: PPUSH
2135: CALL_OW 310
2139: AND
2140: IFFALSE 2151
// ComExitBuilding ( Gladstone ) ;
2142: LD_EXP 19
2146: PPUSH
2147: CALL_OW 122
// AddComHeal ( Gladstone , i ) ;
2151: LD_EXP 19
2155: PPUSH
2156: LD_VAR 0 1
2160: PPUSH
2161: CALL_OW 188
// AddComEnterUnit ( Gladstone , usLab ) ;
2165: LD_EXP 19
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 180
// ComMoveXY ( i , 37 , 23 ) ;
2177: LD_VAR 0 1
2181: PPUSH
2182: LD_INT 37
2184: PPUSH
2185: LD_INT 23
2187: PPUSH
2188: CALL_OW 111
// end else
2192: GO 2281
// if GetLives ( i ) = 1000 then
2194: LD_VAR 0 1
2198: PPUSH
2199: CALL_OW 256
2203: PUSH
2204: LD_INT 1000
2206: EQUAL
2207: IFFALSE 2281
// begin if SideShoot ( i ) = 2 then
2209: LD_VAR 0 1
2213: PPUSH
2214: CALL_OW 503
2218: PUSH
2219: LD_INT 2
2221: EQUAL
2222: IFFALSE 2269
// begin if not usAlert then
2224: LD_EXP 10
2228: NOT
2229: IFFALSE 2239
// usAlert := true ;
2231: LD_ADDR_EXP 10
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// AddComEnterUnit ( i , usLab ) ;
2239: LD_VAR 0 1
2243: PPUSH
2244: LD_INT 3
2246: PPUSH
2247: CALL_OW 180
// usSci := usSci diff i ;
2251: LD_ADDR_EXP 22
2255: PUSH
2256: LD_EXP 22
2260: PUSH
2261: LD_VAR 0 1
2265: DIFF
2266: ST_TO_ADDR
// end else
2267: GO 2281
// ComMoveToArea ( i , tameArea ) ;
2269: LD_VAR 0 1
2273: PPUSH
2274: LD_INT 5
2276: PPUSH
2277: CALL_OW 113
// end ; end ;
2281: GO 1831
2283: POP
2284: POP
// end ;
2285: PPOPN 5
2287: END
// every 0 0$1 trigger GetTag ( Gladstone ) = 1 and not IsInUnit ( Gladstone ) and not usAlert do
2288: LD_EXP 19
2292: PPUSH
2293: CALL_OW 110
2297: PUSH
2298: LD_INT 1
2300: EQUAL
2301: IFFALSE 2315
2303: PUSH
2304: LD_EXP 19
2308: PPUSH
2309: CALL_OW 310
2313: NOT
2314: AND
2315: IFFALSE 2324
2317: PUSH
2318: LD_EXP 10
2322: NOT
2323: AND
2324: IFFALSE 2341
2326: GO 2328
2328: DISABLE
// ComEnterUnit ( Gladstone , usLab ) ;
2329: LD_EXP 19
2333: PPUSH
2334: LD_INT 3
2336: PPUSH
2337: CALL_OW 120
2341: END
// every 0 0$1 trigger not usAlert and ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 999 ] ] ] ) or FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) ) do
2342: LD_EXP 10
2346: NOT
2347: IFFALSE 2432
2349: PUSH
2350: LD_INT 22
2352: PUSH
2353: LD_INT 1
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PUSH
2360: LD_INT 21
2362: PUSH
2363: LD_INT 3
2365: PUSH
2366: EMPTY
2367: LIST
2368: LIST
2369: PUSH
2370: LD_INT 3
2372: PUSH
2373: LD_INT 57
2375: PUSH
2376: EMPTY
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 24
2388: PUSH
2389: LD_INT 999
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: PUSH
2396: EMPTY
2397: LIST
2398: LIST
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: PPUSH
2406: CALL_OW 69
2410: IFTRUE 2431
2412: PUSH
2413: LD_INT 7
2415: PPUSH
2416: LD_INT 22
2418: PUSH
2419: LD_INT 2
2421: PUSH
2422: EMPTY
2423: LIST
2424: LIST
2425: PPUSH
2426: CALL_OW 70
2430: OR
2431: AND
2432: IFFALSE 2445
2434: GO 2436
2436: DISABLE
// usAlert := true ;
2437: LD_ADDR_EXP 10
2441: PUSH
2442: LD_INT 1
2444: ST_TO_ADDR
2445: END
// every 0 0$1 trigger usAlert do var i , b , arm ;
2446: LD_EXP 10
2450: IFFALSE 2799
2452: GO 2454
2454: DISABLE
2455: LD_INT 0
2457: PPUSH
2458: PPUSH
2459: PPUSH
// begin usActiveDefend := true ;
2460: LD_ADDR_EXP 11
2464: PUSH
2465: LD_INT 1
2467: ST_TO_ADDR
// if not usForces then
2468: LD_EXP 21
2472: NOT
2473: IFFALSE 2477
// exit ;
2475: GO 2799
// arm := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) ;
2477: LD_ADDR_VAR 0 3
2481: PUSH
2482: LD_INT 22
2484: PUSH
2485: LD_INT 1
2487: PUSH
2488: EMPTY
2489: LIST
2490: LIST
2491: PUSH
2492: LD_INT 30
2494: PUSH
2495: LD_INT 4
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PUSH
2502: EMPTY
2503: LIST
2504: LIST
2505: PPUSH
2506: CALL_OW 69
2510: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) ;
2511: LD_ADDR_VAR 0 2
2515: PUSH
2516: LD_INT 22
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 30
2528: PUSH
2529: LD_INT 31
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 69
2544: ST_TO_ADDR
// ComExitBuilding ( Lynch ) ;
2545: LD_EXP 20
2549: PPUSH
2550: CALL_OW 122
// AddComEnterUnit ( Lynch , arm [ 1 ] ) ;
2554: LD_EXP 20
2558: PPUSH
2559: LD_VAR 0 3
2563: PUSH
2564: LD_INT 1
2566: ARRAY
2567: PPUSH
2568: CALL_OW 180
// if IsOk ( Gladstone ) then
2572: LD_EXP 19
2576: PPUSH
2577: CALL_OW 302
2581: IFFALSE 2622
// begin ComExitBuilding ( Gladstone ) ;
2583: LD_EXP 19
2587: PPUSH
2588: CALL_OW 122
// AddComEnterUnit ( Gladstone , arm [ 1 ] ) ;
2592: LD_EXP 19
2596: PPUSH
2597: LD_VAR 0 3
2601: PUSH
2602: LD_INT 1
2604: ARRAY
2605: PPUSH
2606: CALL_OW 180
// AddComChangeProfession ( Gladstone , class_soldier ) ;
2610: LD_EXP 19
2614: PPUSH
2615: LD_INT 1
2617: PPUSH
2618: CALL_OW 183
// end ; ComExitBuilding ( usForces [ 1 ] ) ;
2622: LD_EXP 21
2626: PUSH
2627: LD_INT 1
2629: ARRAY
2630: PPUSH
2631: CALL_OW 122
// AddComEnterUnit ( usForces [ 1 ] , b [ 1 ] ) ;
2635: LD_EXP 21
2639: PUSH
2640: LD_INT 1
2642: ARRAY
2643: PPUSH
2644: LD_VAR 0 2
2648: PUSH
2649: LD_INT 1
2651: ARRAY
2652: PPUSH
2653: CALL_OW 180
// ComExitBuilding ( usForces [ 2 ] ) ;
2657: LD_EXP 21
2661: PUSH
2662: LD_INT 2
2664: ARRAY
2665: PPUSH
2666: CALL_OW 122
// AddComEnterUnit ( usForces [ 2 ] , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) [ 1 ] ) ;
2670: LD_EXP 21
2674: PUSH
2675: LD_INT 2
2677: ARRAY
2678: PPUSH
2679: LD_INT 22
2681: PUSH
2682: LD_INT 1
2684: PUSH
2685: EMPTY
2686: LIST
2687: LIST
2688: PUSH
2689: LD_INT 30
2691: PUSH
2692: LD_INT 32
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PPUSH
2703: CALL_OW 69
2707: PUSH
2708: LD_INT 1
2710: ARRAY
2711: PPUSH
2712: CALL_OW 180
// if b > 1 and usForces > 2 then
2716: LD_VAR 0 2
2720: PUSH
2721: LD_INT 1
2723: GREATER
2724: IFFALSE 2736
2726: PUSH
2727: LD_EXP 21
2731: PUSH
2732: LD_INT 2
2734: GREATER
2735: AND
2736: IFFALSE 2799
// begin repeat wait ( 0 0$1 ) ;
2738: LD_INT 35
2740: PPUSH
2741: CALL_OW 67
// until BuildingStatus ( b [ 2 ] ) <> bs_build ;
2745: LD_VAR 0 2
2749: PUSH
2750: LD_INT 2
2752: ARRAY
2753: PPUSH
2754: CALL_OW 461
2758: PUSH
2759: LD_INT 1
2761: NONEQUAL
2762: IFFALSE 2738
// ComExitBuilding ( usForces [ 3 ] ) ;
2764: LD_EXP 21
2768: PUSH
2769: LD_INT 3
2771: ARRAY
2772: PPUSH
2773: CALL_OW 122
// AddComEnterUnit ( usForces [ 3 ] , b [ 2 ] ) ;
2777: LD_EXP 21
2781: PUSH
2782: LD_INT 3
2784: ARRAY
2785: PPUSH
2786: LD_VAR 0 2
2790: PUSH
2791: LD_INT 2
2793: ARRAY
2794: PPUSH
2795: CALL_OW 180
// end ; end ;
2799: PPOPN 3
2801: END
// every 0 0$1 trigger GetLives ( usLab ) < 999 and usAlert and usForces do var i ;
2802: LD_INT 3
2804: PPUSH
2805: CALL_OW 256
2809: PUSH
2810: LD_INT 999
2812: LESS
2813: IFFALSE 2821
2815: PUSH
2816: LD_EXP 10
2820: AND
2821: IFFALSE 2829
2823: PUSH
2824: LD_EXP 21
2828: AND
2829: IFFALSE 3000
2831: GO 2833
2833: DISABLE
2834: LD_INT 0
2836: PPUSH
// begin for i in usForces do
2837: LD_ADDR_VAR 0 1
2841: PUSH
2842: LD_EXP 21
2846: PUSH
2847: FOR_IN
2848: IFFALSE 2887
// begin if IsInUnit ( i ) then
2850: LD_VAR 0 1
2854: PPUSH
2855: CALL_OW 310
2859: IFFALSE 2870
// ComExitBuilding ( i ) ;
2861: LD_VAR 0 1
2865: PPUSH
2866: CALL_OW 122
// AddComAgressiveMove ( i , 31 , 8 ) ;
2870: LD_VAR 0 1
2874: PPUSH
2875: LD_INT 31
2877: PPUSH
2878: LD_INT 8
2880: PPUSH
2881: CALL_OW 174
// end ;
2885: GO 2847
2887: POP
2888: POP
// wait ( 0 0$8 ) ;
2889: LD_INT 280
2891: PPUSH
2892: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) then
2896: LD_INT 22
2898: PUSH
2899: LD_INT 2
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 91
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: LD_INT 14
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: EMPTY
2921: LIST
2922: LIST
2923: PPUSH
2924: CALL_OW 69
2928: IFFALSE 2978
// ComAttackUnit ( usForces , FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , usLab , 14 ] ] ) [ 1 ] ) else
2930: LD_EXP 21
2934: PPUSH
2935: LD_INT 22
2937: PUSH
2938: LD_INT 2
2940: PUSH
2941: EMPTY
2942: LIST
2943: LIST
2944: PUSH
2945: LD_INT 91
2947: PUSH
2948: LD_INT 3
2950: PUSH
2951: LD_INT 14
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PPUSH
2963: CALL_OW 69
2967: PUSH
2968: LD_INT 1
2970: ARRAY
2971: PPUSH
2972: CALL_OW 115
2976: GO 3000
// begin wait ( 0 0$20 ) ;
2978: LD_INT 700
2980: PPUSH
2981: CALL_OW 67
// AddComMoveXY ( usForces , 39 , 19 ) ;
2985: LD_EXP 21
2989: PPUSH
2990: LD_INT 39
2992: PPUSH
2993: LD_INT 19
2995: PPUSH
2996: CALL_OW 171
// end ; end ;
3000: PPOPN 1
3002: END
// every 0 0$3 trigger ( GetDistUnits ( Heike , Delta ) < 10 or GetLives ( usLab ) < 999 ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do var tmp , veh ;
3003: LD_EXP 23
3007: PPUSH
3008: LD_INT 1
3010: PPUSH
3011: CALL_OW 296
3015: PUSH
3016: LD_INT 10
3018: LESS
3019: IFTRUE 3034
3021: PUSH
3022: LD_INT 3
3024: PPUSH
3025: CALL_OW 256
3029: PUSH
3030: LD_INT 999
3032: LESS
3033: OR
3034: IFFALSE 3066
3036: PUSH
3037: LD_INT 22
3039: PUSH
3040: LD_INT 1
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 25
3049: PUSH
3050: LD_INT 2
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 69
3065: AND
3066: IFFALSE 3180
3068: GO 3070
3070: DISABLE
3071: LD_INT 0
3073: PPUSH
3074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
3075: LD_ADDR_VAR 0 1
3079: PUSH
3080: LD_INT 22
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 25
3092: PUSH
3093: LD_INT 2
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PPUSH
3104: CALL_OW 69
3108: ST_TO_ADDR
// veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3109: LD_ADDR_VAR 0 2
3113: PUSH
3114: LD_INT 22
3116: PUSH
3117: LD_INT 1
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PUSH
3124: LD_INT 21
3126: PUSH
3127: LD_INT 2
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 58
3136: PUSH
3137: EMPTY
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: LIST
3144: PPUSH
3145: CALL_OW 69
3149: ST_TO_ADDR
// if not tmp then
3150: LD_VAR 0 1
3154: NOT
3155: IFFALSE 3159
// exit ;
3157: GO 3180
// ComExitBuilding ( tmp ) ;
3159: LD_VAR 0 1
3163: PPUSH
3164: CALL_OW 122
// AddComDismantle ( tmp , usLab ) ;
3168: LD_VAR 0 1
3172: PPUSH
3173: LD_INT 3
3175: PPUSH
3176: CALL_OW 227
// end ;
3180: PPOPN 2
3182: END
// every 0 0$1 trigger usAlert and FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) do var i , tmp ;
3183: LD_EXP 10
3187: IFFALSE 3240
3189: PUSH
3190: LD_INT 7
3192: PPUSH
3193: LD_INT 22
3195: PUSH
3196: LD_INT 1
3198: PUSH
3199: EMPTY
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 21
3205: PUSH
3206: LD_INT 1
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 24
3218: PUSH
3219: LD_INT 600
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 70
3239: AND
3240: IFFALSE 3368
3242: GO 3244
3244: DISABLE
3245: LD_INT 0
3247: PPUSH
3248: PPUSH
// begin enable ;
3249: ENABLE
// tmp := FilterUnitsInArea ( deltaBaseArea , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 600 ] ] ] ) ;
3250: LD_ADDR_VAR 0 2
3254: PUSH
3255: LD_INT 7
3257: PPUSH
3258: LD_INT 22
3260: PUSH
3261: LD_INT 1
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: LD_INT 21
3270: PUSH
3271: LD_INT 1
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: PUSH
3278: LD_INT 3
3280: PUSH
3281: LD_INT 24
3283: PUSH
3284: LD_INT 600
3286: PUSH
3287: EMPTY
3288: LIST
3289: LIST
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 70
3304: ST_TO_ADDR
// if not tmp then
3305: LD_VAR 0 2
3309: NOT
3310: IFFALSE 3314
// exit ;
3312: GO 3368
// for i in tmp do
3314: LD_ADDR_VAR 0 1
3318: PUSH
3319: LD_VAR 0 2
3323: PUSH
3324: FOR_IN
3325: IFFALSE 3366
// if IsInUnit ( i ) then
3327: LD_VAR 0 1
3331: PPUSH
3332: CALL_OW 310
3336: IFFALSE 3349
// ComExitBuilding ( i ) else
3338: LD_VAR 0 1
3342: PPUSH
3343: CALL_OW 122
3347: GO 3364
// ComMoveXY ( i , 48 , 74 ) ;
3349: LD_VAR 0 1
3353: PPUSH
3354: LD_INT 48
3356: PPUSH
3357: LD_INT 74
3359: PPUSH
3360: CALL_OW 111
3364: GO 3324
3366: POP
3367: POP
// end ;
3368: PPOPN 2
3370: END
// every 12 12$00 do var i , un , tmp ;
3371: GO 3373
3373: DISABLE
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
// begin tmp := [ ] ;
3379: LD_ADDR_VAR 0 3
3383: PUSH
3384: EMPTY
3385: ST_TO_ADDR
// uc_side := 1 ;
3386: LD_ADDR_OWVAR 20
3390: PUSH
3391: LD_INT 1
3393: ST_TO_ADDR
// uc_nation := 1 ;
3394: LD_ADDR_OWVAR 21
3398: PUSH
3399: LD_INT 1
3401: ST_TO_ADDR
// case Difficulty of 1 :
3402: LD_OWVAR 67
3406: PUSH
3407: LD_INT 1
3409: DOUBLE
3410: EQUAL
3411: IFTRUE 3415
3413: GO 3518
3415: POP
// begin wait ( 1 1$00 ) ;
3416: LD_INT 2100
3418: PPUSH
3419: CALL_OW 67
// for i := 1 to 2 do
3423: LD_ADDR_VAR 0 1
3427: PUSH
3428: DOUBLE
3429: LD_INT 1
3431: DEC
3432: ST_TO_ADDR
3433: LD_INT 2
3435: PUSH
3436: FOR_TO
3437: IFFALSE 3514
// begin PrepareHuman ( false , [ 1 , 4 ] [ i mod 2 + 1 ] , 1 ) ;
3439: LD_INT 0
3441: PPUSH
3442: LD_INT 1
3444: PUSH
3445: LD_INT 4
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: LD_VAR 0 1
3456: PUSH
3457: LD_INT 2
3459: MOD
3460: PUSH
3461: LD_INT 1
3463: PLUS
3464: ARRAY
3465: PPUSH
3466: LD_INT 1
3468: PPUSH
3469: CALL_OW 380
// un := CreateHuman ;
3473: LD_ADDR_VAR 0 2
3477: PUSH
3478: CALL_OW 44
3482: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3483: LD_ADDR_VAR 0 3
3487: PUSH
3488: LD_VAR 0 3
3492: PPUSH
3493: LD_VAR 0 3
3497: PUSH
3498: LD_INT 1
3500: PLUS
3501: PPUSH
3502: LD_VAR 0 2
3506: PPUSH
3507: CALL_OW 1
3511: ST_TO_ADDR
// end ;
3512: GO 3436
3514: POP
3515: POP
// end ; 2 :
3516: GO 3918
3518: LD_INT 2
3520: DOUBLE
3521: EQUAL
3522: IFTRUE 3526
3524: GO 3660
3526: POP
// begin wait ( 0 0$30 ) ;
3527: LD_INT 1050
3529: PPUSH
3530: CALL_OW 67
// for i := 1 to 2 do
3534: LD_ADDR_VAR 0 1
3538: PUSH
3539: DOUBLE
3540: LD_INT 1
3542: DEC
3543: ST_TO_ADDR
3544: LD_INT 2
3546: PUSH
3547: FOR_TO
3548: IFFALSE 3604
// begin PrepareHuman ( false , 1 , 2 ) ;
3550: LD_INT 0
3552: PPUSH
3553: LD_INT 1
3555: PPUSH
3556: LD_INT 2
3558: PPUSH
3559: CALL_OW 380
// un := CreateHuman ;
3563: LD_ADDR_VAR 0 2
3567: PUSH
3568: CALL_OW 44
3572: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3573: LD_ADDR_VAR 0 3
3577: PUSH
3578: LD_VAR 0 3
3582: PPUSH
3583: LD_VAR 0 3
3587: PUSH
3588: LD_INT 1
3590: PLUS
3591: PPUSH
3592: LD_VAR 0 2
3596: PPUSH
3597: CALL_OW 1
3601: ST_TO_ADDR
// end ;
3602: GO 3547
3604: POP
3605: POP
// PrepareHuman ( false , 4 , 2 ) ;
3606: LD_INT 0
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: LD_INT 2
3614: PPUSH
3615: CALL_OW 380
// un := CreateHuman ;
3619: LD_ADDR_VAR 0 2
3623: PUSH
3624: CALL_OW 44
3628: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3629: LD_ADDR_VAR 0 3
3633: PUSH
3634: LD_VAR 0 3
3638: PPUSH
3639: LD_VAR 0 3
3643: PUSH
3644: LD_INT 1
3646: PLUS
3647: PPUSH
3648: LD_VAR 0 2
3652: PPUSH
3653: CALL_OW 1
3657: ST_TO_ADDR
// end ; 3 .. 4 :
3658: GO 3918
3660: LD_INT 3
3662: DOUBLE
3663: GREATEREQUAL
3664: IFFALSE 3672
3666: LD_INT 4
3668: DOUBLE
3669: LESSEQUAL
3670: IFTRUE 3674
3672: GO 3917
3674: POP
// begin for i := 1 to 2 do
3675: LD_ADDR_VAR 0 1
3679: PUSH
3680: DOUBLE
3681: LD_INT 1
3683: DEC
3684: ST_TO_ADDR
3685: LD_INT 2
3687: PUSH
3688: FOR_TO
3689: IFFALSE 3745
// begin PrepareHuman ( false , 1 , 2 ) ;
3691: LD_INT 0
3693: PPUSH
3694: LD_INT 1
3696: PPUSH
3697: LD_INT 2
3699: PPUSH
3700: CALL_OW 380
// un := CreateHuman ;
3704: LD_ADDR_VAR 0 2
3708: PUSH
3709: CALL_OW 44
3713: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3714: LD_ADDR_VAR 0 3
3718: PUSH
3719: LD_VAR 0 3
3723: PPUSH
3724: LD_VAR 0 3
3728: PUSH
3729: LD_INT 1
3731: PLUS
3732: PPUSH
3733: LD_VAR 0 2
3737: PPUSH
3738: CALL_OW 1
3742: ST_TO_ADDR
// end ;
3743: GO 3688
3745: POP
3746: POP
// PrepareHuman ( false , 4 , 2 ) ;
3747: LD_INT 0
3749: PPUSH
3750: LD_INT 4
3752: PPUSH
3753: LD_INT 2
3755: PPUSH
3756: CALL_OW 380
// un := CreateHuman ;
3760: LD_ADDR_VAR 0 2
3764: PUSH
3765: CALL_OW 44
3769: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3770: LD_ADDR_VAR 0 3
3774: PUSH
3775: LD_VAR 0 3
3779: PPUSH
3780: LD_VAR 0 3
3784: PUSH
3785: LD_INT 1
3787: PLUS
3788: PPUSH
3789: LD_VAR 0 2
3793: PPUSH
3794: CALL_OW 1
3798: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_machine_gun , 90 ) ;
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 1
3804: PPUSH
3805: LD_INT 2
3807: PPUSH
3808: LD_INT 2
3810: PPUSH
3811: LD_INT 1
3813: PPUSH
3814: LD_INT 2
3816: PPUSH
3817: LD_INT 90
3819: PPUSH
3820: CALL 241 0 7
// un := CreateVehicle ;
3824: LD_ADDR_VAR 0 2
3828: PUSH
3829: CALL_OW 45
3833: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3834: LD_ADDR_VAR 0 3
3838: PUSH
3839: LD_VAR 0 3
3843: PPUSH
3844: LD_VAR 0 3
3848: PUSH
3849: LD_INT 1
3851: PLUS
3852: PPUSH
3853: LD_VAR 0 2
3857: PPUSH
3858: CALL_OW 1
3862: ST_TO_ADDR
// PrepareHuman ( false , 1 , 2 ) ;
3863: LD_INT 0
3865: PPUSH
3866: LD_INT 1
3868: PPUSH
3869: LD_INT 2
3871: PPUSH
3872: CALL_OW 380
// un := CreateHuman ;
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: CALL_OW 44
3885: ST_TO_ADDR
// tmp := Replace ( tmp , tmp + 1 , un ) ;
3886: LD_ADDR_VAR 0 3
3890: PUSH
3891: LD_VAR 0 3
3895: PPUSH
3896: LD_VAR 0 3
3900: PUSH
3901: LD_INT 1
3903: PLUS
3904: PPUSH
3905: LD_VAR 0 2
3909: PPUSH
3910: CALL_OW 1
3914: ST_TO_ADDR
// end ; end ;
3915: GO 3918
3917: POP
// for i := 1 to tmp do
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: DOUBLE
3924: LD_INT 1
3926: DEC
3927: ST_TO_ADDR
3928: LD_VAR 0 3
3932: PUSH
3933: FOR_TO
3934: IFFALSE 4099
// begin SetDir ( tmp [ i ] , 1 ) ;
3936: LD_VAR 0 3
3940: PUSH
3941: LD_VAR 0 1
3945: ARRAY
3946: PPUSH
3947: LD_INT 1
3949: PPUSH
3950: CALL_OW 233
// if GetType ( tmp [ i ] ) = unit_human then
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 1
3963: ARRAY
3964: PPUSH
3965: CALL_OW 247
3969: PUSH
3970: LD_INT 1
3972: EQUAL
3973: IFFALSE 4001
// PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) else
3975: LD_VAR 0 3
3979: PUSH
3980: LD_VAR 0 1
3984: ARRAY
3985: PPUSH
3986: LD_INT 28
3988: PPUSH
3989: LD_INT 52
3991: PPUSH
3992: LD_INT 0
3994: PPUSH
3995: CALL_OW 48
3999: GO 4069
// begin PlaceUnitXY ( tmp [ i ] , 28 , 52 , false ) ;
4001: LD_VAR 0 3
4005: PUSH
4006: LD_VAR 0 1
4010: ARRAY
4011: PPUSH
4012: LD_INT 28
4014: PPUSH
4015: LD_INT 52
4017: PPUSH
4018: LD_INT 0
4020: PPUSH
4021: CALL_OW 48
// i := i + 1 ;
4025: LD_ADDR_VAR 0 1
4029: PUSH
4030: LD_VAR 0 1
4034: PUSH
4035: LD_INT 1
4037: PLUS
4038: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ i ] , tmp [ i - 1 ] ) ;
4039: LD_VAR 0 3
4043: PUSH
4044: LD_VAR 0 1
4048: ARRAY
4049: PPUSH
4050: LD_VAR 0 3
4054: PUSH
4055: LD_VAR 0 1
4059: PUSH
4060: LD_INT 1
4062: MINUS
4063: ARRAY
4064: PPUSH
4065: CALL_OW 52
// end ; ComMoveXY ( tmp [ i ] , 43 , 56 ) ;
4069: LD_VAR 0 3
4073: PUSH
4074: LD_VAR 0 1
4078: ARRAY
4079: PPUSH
4080: LD_INT 43
4082: PPUSH
4083: LD_INT 56
4085: PPUSH
4086: CALL_OW 111
// wait ( 0 0$2 ) ;
4090: LD_INT 70
4092: PPUSH
4093: CALL_OW 67
// end ;
4097: GO 3933
4099: POP
4100: POP
// wait ( 0 0$2 ) ;
4101: LD_INT 70
4103: PPUSH
4104: CALL_OW 67
// if not FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) then
4108: LD_INT 7
4110: PPUSH
4111: LD_INT 22
4113: PUSH
4114: LD_INT 2
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PPUSH
4121: CALL_OW 70
4125: NOT
4126: IFFALSE 4324
// begin AddComAgressiveMove ( tmp , 35 , 24 ) ;
4128: LD_VAR 0 3
4132: PPUSH
4133: LD_INT 35
4135: PPUSH
4136: LD_INT 24
4138: PPUSH
4139: CALL_OW 174
// usForces := usForces union UnitFilter ( tmp , [ f_class , 1 ] ) ;
4143: LD_ADDR_EXP 21
4147: PUSH
4148: LD_EXP 21
4152: PUSH
4153: LD_VAR 0 3
4157: PPUSH
4158: LD_INT 25
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: UNION
4173: ST_TO_ADDR
// if UnitsInside ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) < 6 then
4174: LD_INT 22
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 30
4186: PUSH
4187: LD_INT 4
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: PUSH
4203: LD_INT 1
4205: ARRAY
4206: PPUSH
4207: CALL_OW 313
4211: PUSH
4212: LD_INT 6
4214: LESS
4215: IFFALSE 4274
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 1 ] ) , FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ) ;
4217: LD_VAR 0 3
4221: PPUSH
4222: LD_INT 25
4224: PUSH
4225: LD_INT 1
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PPUSH
4232: CALL_OW 72
4236: PPUSH
4237: LD_INT 22
4239: PUSH
4240: LD_INT 1
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: PUSH
4247: LD_INT 30
4249: PUSH
4250: LD_INT 4
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PPUSH
4261: CALL_OW 69
4265: PUSH
4266: LD_INT 1
4268: ARRAY
4269: PPUSH
4270: CALL_OW 180
// if UnitFilter ( tmp , [ f_class , 4 ] ) then
4274: LD_VAR 0 3
4278: PPUSH
4279: LD_INT 25
4281: PUSH
4282: LD_INT 4
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: PPUSH
4289: CALL_OW 72
4293: IFFALSE 4322
// AddComEnterUnit ( UnitFilter ( tmp , [ f_class , 4 ] ) , usLab ) ;
4295: LD_VAR 0 3
4299: PPUSH
4300: LD_INT 25
4302: PUSH
4303: LD_INT 4
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PPUSH
4310: CALL_OW 72
4314: PPUSH
4315: LD_INT 3
4317: PPUSH
4318: CALL_OW 180
// end else
4322: GO 4601
// begin tmp := tmp union FilterUnitsInArea ( retreatArea , [ f_side , 1 ] ) ;
4324: LD_ADDR_VAR 0 3
4328: PUSH
4329: LD_VAR 0 3
4333: PUSH
4334: LD_INT 6
4336: PPUSH
4337: LD_INT 22
4339: PUSH
4340: LD_INT 1
4342: PUSH
4343: EMPTY
4344: LIST
4345: LIST
4346: PPUSH
4347: CALL_OW 70
4351: UNION
4352: ST_TO_ADDR
// ComMoveXY ( tmp , 45 , 54 ) ;
4353: LD_VAR 0 3
4357: PPUSH
4358: LD_INT 45
4360: PPUSH
4361: LD_INT 54
4363: PPUSH
4364: CALL_OW 111
// wait ( 0 0$3 ) ;
4368: LD_INT 105
4370: PPUSH
4371: CALL_OW 67
// AddComAgressiveMove ( tmp diff UnitFilter ( tmp , [ f_class , 4 ] ) , 35 , 24 ) ;
4375: LD_VAR 0 3
4379: PUSH
4380: LD_VAR 0 3
4384: PPUSH
4385: LD_INT 25
4387: PUSH
4388: LD_INT 4
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: PPUSH
4395: CALL_OW 72
4399: DIFF
4400: PPUSH
4401: LD_INT 35
4403: PPUSH
4404: LD_INT 24
4406: PPUSH
4407: CALL_OW 174
// AddComMoveXY ( UnitFilter ( tmp , [ f_class , 4 ] ) , 42 , 49 ) ;
4411: LD_VAR 0 3
4415: PPUSH
4416: LD_INT 25
4418: PUSH
4419: LD_INT 4
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: PPUSH
4426: CALL_OW 72
4430: PPUSH
4431: LD_INT 42
4433: PPUSH
4434: LD_INT 49
4436: PPUSH
4437: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
4441: LD_INT 35
4443: PPUSH
4444: CALL_OW 67
// for i in tmp do
4448: LD_ADDR_VAR 0 1
4452: PUSH
4453: LD_VAR 0 3
4457: PUSH
4458: FOR_IN
4459: IFFALSE 4592
// if IsDead ( i ) then
4461: LD_VAR 0 1
4465: PPUSH
4466: CALL_OW 301
4470: IFFALSE 4490
// tmp := tmp diff i else
4472: LD_ADDR_VAR 0 3
4476: PUSH
4477: LD_VAR 0 3
4481: PUSH
4482: LD_VAR 0 1
4486: DIFF
4487: ST_TO_ADDR
4488: GO 4590
// if GetClass ( i ) = 1 then
4490: LD_VAR 0 1
4494: PPUSH
4495: CALL_OW 257
4499: PUSH
4500: LD_INT 1
4502: EQUAL
4503: IFFALSE 4590
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 42 , 49 ) > 6 then
4505: LD_VAR 0 1
4509: PPUSH
4510: CALL_OW 256
4514: PUSH
4515: LD_INT 600
4517: LESS
4518: IFFALSE 4541
4520: PUSH
4521: LD_VAR 0 1
4525: PPUSH
4526: LD_INT 42
4528: PPUSH
4529: LD_INT 49
4531: PPUSH
4532: CALL_OW 297
4536: PUSH
4537: LD_INT 6
4539: GREATER
4540: AND
4541: IFFALSE 4560
// ComMoveXY ( i , 42 , 49 ) else
4543: LD_VAR 0 1
4547: PPUSH
4548: LD_INT 42
4550: PPUSH
4551: LD_INT 49
4553: PPUSH
4554: CALL_OW 111
4558: GO 4590
// if GetLives ( i ) = 1000 then
4560: LD_VAR 0 1
4564: PPUSH
4565: CALL_OW 256
4569: PUSH
4570: LD_INT 1000
4572: EQUAL
4573: IFFALSE 4590
// ComAgressiveMove ( i , 36 , 25 ) ;
4575: LD_VAR 0 1
4579: PPUSH
4580: LD_INT 36
4582: PPUSH
4583: LD_INT 25
4585: PPUSH
4586: CALL_OW 114
// end ;
4590: GO 4458
4592: POP
4593: POP
// until not tmp ;
4594: LD_VAR 0 3
4598: NOT
4599: IFFALSE 4441
// end ; end ;
4601: PPOPN 3
4603: END
// every 1 1$30 trigger FilterUnitsInArea ( deltaBaseArea , [ f_side , 2 ] ) and not attackDeltaAllowed do var i , un , veh ;
4604: LD_INT 7
4606: PPUSH
4607: LD_INT 22
4609: PUSH
4610: LD_INT 2
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PPUSH
4617: CALL_OW 70
4621: IFFALSE 4630
4623: PUSH
4624: LD_EXP 14
4628: NOT
4629: AND
4630: IFFALSE 4788
4632: GO 4634
4634: DISABLE
4635: LD_INT 0
4637: PPUSH
4638: PPUSH
4639: PPUSH
// begin for i := 1 to 2 do
4640: LD_ADDR_VAR 0 1
4644: PUSH
4645: DOUBLE
4646: LD_INT 1
4648: DEC
4649: ST_TO_ADDR
4650: LD_INT 2
4652: PUSH
4653: FOR_TO
4654: IFFALSE 4786
// begin wait ( 0 0$3 ) ;
4656: LD_INT 105
4658: PPUSH
4659: CALL_OW 67
// uc_side := 1 ;
4663: LD_ADDR_OWVAR 20
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// uc_nation := 1 ;
4671: LD_ADDR_OWVAR 21
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// PrepareTank ( 1 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 90 ) ;
4679: LD_INT 1
4681: PPUSH
4682: LD_INT 1
4684: PPUSH
4685: LD_INT 2
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: LD_INT 1
4693: PPUSH
4694: LD_INT 4
4696: PPUSH
4697: LD_INT 90
4699: PPUSH
4700: CALL 241 0 7
// veh := CreateVehicle ;
4704: LD_ADDR_VAR 0 3
4708: PUSH
4709: CALL_OW 45
4713: ST_TO_ADDR
// PlaceUnitXY ( veh , 29 , 52 , false ) ;
4714: LD_VAR 0 3
4718: PPUSH
4719: LD_INT 29
4721: PPUSH
4722: LD_INT 52
4724: PPUSH
4725: LD_INT 0
4727: PPUSH
4728: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
4732: LD_INT 0
4734: PPUSH
4735: LD_INT 3
4737: PPUSH
4738: LD_INT 3
4740: PPUSH
4741: CALL_OW 380
// un := CreateHuman ;
4745: LD_ADDR_VAR 0 2
4749: PUSH
4750: CALL_OW 44
4754: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4755: LD_VAR 0 2
4759: PPUSH
4760: LD_VAR 0 3
4764: PPUSH
4765: CALL_OW 52
// ComAgressiveMove ( veh , 36 , 25 ) ;
4769: LD_VAR 0 3
4773: PPUSH
4774: LD_INT 36
4776: PPUSH
4777: LD_INT 25
4779: PPUSH
4780: CALL_OW 114
// end ;
4784: GO 4653
4786: POP
4787: POP
// end ; end_of_file
4788: PPOPN 3
4790: END
// export function Action ; var i , tmp ; begin
4791: LD_INT 0
4793: PPUSH
4794: PPUSH
4795: PPUSH
// InGameOn ;
4796: CALL_OW 8
// DoNotAttack ( 2 , usLab ) ;
4800: LD_INT 2
4802: PPUSH
4803: LD_INT 3
4805: PPUSH
4806: CALL_OW 471
// ComMoveXY ( Heike , 78 , 61 ) ;
4810: LD_EXP 23
4814: PPUSH
4815: LD_INT 78
4817: PPUSH
4818: LD_INT 61
4820: PPUSH
4821: CALL_OW 111
// if Mike then
4825: LD_EXP 25
4829: IFFALSE 4846
// ComMoveXY ( Mike , 80 , 66 ) ;
4831: LD_EXP 25
4835: PPUSH
4836: LD_INT 80
4838: PPUSH
4839: LD_INT 66
4841: PPUSH
4842: CALL_OW 111
// if Givi then
4846: LD_EXP 24
4850: IFFALSE 4867
// ComMoveXY ( Givi , 82 , 66 ) ;
4852: LD_EXP 24
4856: PPUSH
4857: LD_INT 82
4859: PPUSH
4860: LD_INT 66
4862: PPUSH
4863: CALL_OW 111
// if Kamil then
4867: LD_EXP 26
4871: IFFALSE 4888
// ComMoveXY ( Kamil , 82 , 67 ) ;
4873: LD_EXP 26
4877: PPUSH
4878: LD_INT 82
4880: PPUSH
4881: LD_INT 67
4883: PPUSH
4884: CALL_OW 111
// CenterNowOnUnits ( Heike ) ;
4888: LD_EXP 23
4892: PPUSH
4893: CALL_OW 87
// wait ( 0 0$2 ) ;
4897: LD_INT 70
4899: PPUSH
4900: CALL_OW 67
// if Givi and Mike then
4904: LD_EXP 24
4908: IFFALSE 4916
4910: PUSH
4911: LD_EXP 25
4915: AND
4916: IFFALSE 5450
// begin AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
4918: LD_EXP 24
4922: PUSH
4923: LD_EXP 25
4927: PUSH
4928: LD_EXP 26
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: LIST
4937: PPUSH
4938: LD_EXP 23
4942: PPUSH
4943: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
4947: LD_EXP 23
4951: PPUSH
4952: LD_EXP 24
4956: PPUSH
4957: CALL_OW 179
// Say ( Givi , DG-1-start ) ;
4961: LD_EXP 24
4965: PPUSH
4966: LD_STRING DG-1-start
4968: PPUSH
4969: CALL_OW 88
// Say ( Heike , DH-1-start ) ;
4973: LD_EXP 23
4977: PPUSH
4978: LD_STRING DH-1-start
4980: PPUSH
4981: CALL_OW 88
// AddComTurnUnit ( Mike , Heike ) ;
4985: LD_EXP 25
4989: PPUSH
4990: LD_EXP 23
4994: PPUSH
4995: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
4999: LD_EXP 23
5003: PPUSH
5004: LD_EXP 25
5008: PPUSH
5009: CALL_OW 179
// Say ( Mike , DM-1-start ) ;
5013: LD_EXP 25
5017: PPUSH
5018: LD_STRING DM-1-start
5020: PPUSH
5021: CALL_OW 88
// Say ( Heike , DH-2-start ) ;
5025: LD_EXP 23
5029: PPUSH
5030: LD_STRING DH-2-start
5032: PPUSH
5033: CALL_OW 88
// Say ( Mike , DM-2-start ) ;
5037: LD_EXP 25
5041: PPUSH
5042: LD_STRING DM-2-start
5044: PPUSH
5045: CALL_OW 88
// Say ( Givi , DG-2-start ) ;
5049: LD_EXP 24
5053: PPUSH
5054: LD_STRING DG-2-start
5056: PPUSH
5057: CALL_OW 88
// ComTurnUnit ( Mike , Givi ) ;
5061: LD_EXP 25
5065: PPUSH
5066: LD_EXP 24
5070: PPUSH
5071: CALL_OW 119
// ComTurnUnit ( Heike , Mike ) ;
5075: LD_EXP 23
5079: PPUSH
5080: LD_EXP 25
5084: PPUSH
5085: CALL_OW 119
// Say ( Mike , DM-3-start ) ;
5089: LD_EXP 25
5093: PPUSH
5094: LD_STRING DM-3-start
5096: PPUSH
5097: CALL_OW 88
// Say ( Heike , DH-3-start ) ;
5101: LD_EXP 23
5105: PPUSH
5106: LD_STRING DH-3-start
5108: PPUSH
5109: CALL_OW 88
// ComMoveXY ( [ Heike , Mike , Givi , Kamil ] , 84 , 51 ) ;
5113: LD_EXP 23
5117: PUSH
5118: LD_EXP 25
5122: PUSH
5123: LD_EXP 24
5127: PUSH
5128: LD_EXP 26
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: PPUSH
5139: LD_INT 84
5141: PPUSH
5142: LD_INT 51
5144: PPUSH
5145: CALL_OW 111
// wait ( 0 0$2 ) ;
5149: LD_INT 70
5151: PPUSH
5152: CALL_OW 67
// Say ( Givi , DG-3-start ) ;
5156: LD_EXP 24
5160: PPUSH
5161: LD_STRING DG-3-start
5163: PPUSH
5164: CALL_OW 88
// ComHold ( [ Heike , Mike , Givi , Kamil ] ) ;
5168: LD_EXP 23
5172: PUSH
5173: LD_EXP 25
5177: PUSH
5178: LD_EXP 24
5182: PUSH
5183: LD_EXP 26
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 140
// AddComTurnUnit ( Heike , Givi ) ;
5198: LD_EXP 23
5202: PPUSH
5203: LD_EXP 24
5207: PPUSH
5208: CALL_OW 179
// AddComTurnUnit ( [ Givi , Mike , Kamil ] , Heike ) ;
5212: LD_EXP 24
5216: PUSH
5217: LD_EXP 25
5221: PUSH
5222: LD_EXP 26
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 23
5236: PPUSH
5237: CALL_OW 179
// Say ( Heike , DH-4-start ) ;
5241: LD_EXP 23
5245: PPUSH
5246: LD_STRING DH-4-start
5248: PPUSH
5249: CALL_OW 88
// Say ( Givi , DG-4-start ) ;
5253: LD_EXP 24
5257: PPUSH
5258: LD_STRING DG-4-start
5260: PPUSH
5261: CALL_OW 88
// Say ( Heike , DH-5-start ) ;
5265: LD_EXP 23
5269: PPUSH
5270: LD_STRING DH-5-start
5272: PPUSH
5273: CALL_OW 88
// Say ( Givi , DG-5-start ) ;
5277: LD_EXP 24
5281: PPUSH
5282: LD_STRING DG-5-start
5284: PPUSH
5285: CALL_OW 88
// Say ( Heike , DH-6-start ) ;
5289: LD_EXP 23
5293: PPUSH
5294: LD_STRING DH-6-start
5296: PPUSH
5297: CALL_OW 88
// if not Kamil then
5301: LD_EXP 26
5305: NOT
5306: IFFALSE 5357
// begin Say ( Mike , DM-6-start ) ;
5308: LD_EXP 25
5312: PPUSH
5313: LD_STRING DM-6-start
5315: PPUSH
5316: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi ] , Mike ) ;
5320: LD_EXP 23
5324: PUSH
5325: LD_EXP 24
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: LD_EXP 25
5338: PPUSH
5339: CALL_OW 119
// Say ( Givi , DG-6-start ) ;
5343: LD_EXP 24
5347: PPUSH
5348: LD_STRING DG-6-start
5350: PPUSH
5351: CALL_OW 88
// end else
5355: GO 5436
// begin Say ( Mike , DM-6-start-a ) ;
5357: LD_EXP 25
5361: PPUSH
5362: LD_STRING DM-6-start-a
5364: PPUSH
5365: CALL_OW 88
// ComTurnUnit ( [ Heike , Givi , Mike ] , Kamil ) ;
5369: LD_EXP 23
5373: PUSH
5374: LD_EXP 24
5378: PUSH
5379: LD_EXP 25
5383: PUSH
5384: EMPTY
5385: LIST
5386: LIST
5387: LIST
5388: PPUSH
5389: LD_EXP 26
5393: PPUSH
5394: CALL_OW 119
// ComTurnUnit ( Kamil , Mike ) ;
5398: LD_EXP 26
5402: PPUSH
5403: LD_EXP 25
5407: PPUSH
5408: CALL_OW 119
// Say ( Kamil , DKam-7-start-a ) ;
5412: LD_EXP 26
5416: PPUSH
5417: LD_STRING DKam-7-start-a
5419: PPUSH
5420: CALL_OW 88
// Say ( Givi , DG-6-start-a ) ;
5424: LD_EXP 24
5428: PPUSH
5429: LD_STRING DG-6-start-a
5431: PPUSH
5432: CALL_OW 88
// end ; Say ( Heike , DH-7-start ) ;
5436: LD_EXP 23
5440: PPUSH
5441: LD_STRING DH-7-start
5443: PPUSH
5444: CALL_OW 88
// end else
5448: GO 6176
// if not Mike and Givi then
5450: LD_EXP 25
5454: NOT
5455: IFFALSE 5463
5457: PUSH
5458: LD_EXP 24
5462: AND
5463: IFFALSE 5808
// begin AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5465: LD_EXP 24
5469: PUSH
5470: LD_EXP 26
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PPUSH
5479: LD_EXP 23
5483: PPUSH
5484: CALL_OW 179
// AddComTurnUnit ( Heike , Givi ) ;
5488: LD_EXP 23
5492: PPUSH
5493: LD_EXP 24
5497: PPUSH
5498: CALL_OW 179
// Say ( Givi , DG-1-start-c ) ;
5502: LD_EXP 24
5506: PPUSH
5507: LD_STRING DG-1-start-c
5509: PPUSH
5510: CALL_OW 88
// Say ( Heike , DH-1-start-c ) ;
5514: LD_EXP 23
5518: PPUSH
5519: LD_STRING DH-1-start-c
5521: PPUSH
5522: CALL_OW 88
// Say ( Givi , DG-2-start-c ) ;
5526: LD_EXP 24
5530: PPUSH
5531: LD_STRING DG-2-start-c
5533: PPUSH
5534: CALL_OW 88
// Say ( Heike , DH-2-start-c ) ;
5538: LD_EXP 23
5542: PPUSH
5543: LD_STRING DH-2-start-c
5545: PPUSH
5546: CALL_OW 88
// Say ( Givi , DG-3-start-c ) ;
5550: LD_EXP 24
5554: PPUSH
5555: LD_STRING DG-3-start-c
5557: PPUSH
5558: CALL_OW 88
// ComMoveXY ( Heike , 83 , 56 ) ;
5562: LD_EXP 23
5566: PPUSH
5567: LD_INT 83
5569: PPUSH
5570: LD_INT 56
5572: PPUSH
5573: CALL_OW 111
// ComMoveXY ( Givi , 83 , 59 ) ;
5577: LD_EXP 24
5581: PPUSH
5582: LD_INT 83
5584: PPUSH
5585: LD_INT 59
5587: PPUSH
5588: CALL_OW 111
// if Kamil then
5592: LD_EXP 26
5596: IFFALSE 5613
// ComMoveXY ( Kamil , 80 , 58 ) ;
5598: LD_EXP 26
5602: PPUSH
5603: LD_INT 80
5605: PPUSH
5606: LD_INT 58
5608: PPUSH
5609: CALL_OW 111
// AddComTurnUnit ( Heike , Givi ) ;
5613: LD_EXP 23
5617: PPUSH
5618: LD_EXP 24
5622: PPUSH
5623: CALL_OW 179
// AddComTurnUnit ( [ Givi , Kamil ] , Heike ) ;
5627: LD_EXP 24
5631: PUSH
5632: LD_EXP 26
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: LD_EXP 23
5645: PPUSH
5646: CALL_OW 179
// Say ( Heike , DH-3-start-c ) ;
5650: LD_EXP 23
5654: PPUSH
5655: LD_STRING DH-3-start-c
5657: PPUSH
5658: CALL_OW 88
// Say ( Givi , DG-4-start-c ) ;
5662: LD_EXP 24
5666: PPUSH
5667: LD_STRING DG-4-start-c
5669: PPUSH
5670: CALL_OW 88
// Say ( Heike , DH-5-start-c ) ;
5674: LD_EXP 23
5678: PPUSH
5679: LD_STRING DH-5-start-c
5681: PPUSH
5682: CALL_OW 88
// Say ( Givi , DG-5-start-c ) ;
5686: LD_EXP 24
5690: PPUSH
5691: LD_STRING DG-5-start-c
5693: PPUSH
5694: CALL_OW 88
// Say ( Heike , DH-6-start-c ) ;
5698: LD_EXP 23
5702: PPUSH
5703: LD_STRING DH-6-start-c
5705: PPUSH
5706: CALL_OW 88
// Say ( Givi , DG-6-start-c ) ;
5710: LD_EXP 24
5714: PPUSH
5715: LD_STRING DG-6-start-c
5717: PPUSH
5718: CALL_OW 88
// if Kamil then
5722: LD_EXP 26
5726: IFFALSE 5782
// begin ComTurnUnit ( Kamil , Heike ) ;
5728: LD_EXP 26
5732: PPUSH
5733: LD_EXP 23
5737: PPUSH
5738: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
5742: LD_EXP 26
5746: PPUSH
5747: LD_STRING DKam-1-start-c
5749: PPUSH
5750: CALL_OW 88
// ComTurnUnit ( Givi , Kamil ) ;
5754: LD_EXP 24
5758: PPUSH
5759: LD_EXP 26
5763: PPUSH
5764: CALL_OW 119
// Say ( Givi , DG-7-start-c ) ;
5768: LD_EXP 24
5772: PPUSH
5773: LD_STRING DG-7-start-c
5775: PPUSH
5776: CALL_OW 88
// end else
5780: GO 5806
// begin Say ( Givi , DG-8-start-c ) ;
5782: LD_EXP 24
5786: PPUSH
5787: LD_STRING DG-8-start-c
5789: PPUSH
5790: CALL_OW 88
// Say ( Heike , DH-7-start-c ) ;
5794: LD_EXP 23
5798: PPUSH
5799: LD_STRING DH-7-start-c
5801: PPUSH
5802: CALL_OW 88
// end ; end else
5806: GO 6176
// if not Givi and Mike then
5808: LD_EXP 24
5812: NOT
5813: IFFALSE 5821
5815: PUSH
5816: LD_EXP 25
5820: AND
5821: IFFALSE 6080
// begin AddComTurnUnit ( [ Mike , Kamil ] , Heike ) ;
5823: LD_EXP 25
5827: PUSH
5828: LD_EXP 26
5832: PUSH
5833: EMPTY
5834: LIST
5835: LIST
5836: PPUSH
5837: LD_EXP 23
5841: PPUSH
5842: CALL_OW 179
// AddComTurnUnit ( Heike , Mike ) ;
5846: LD_EXP 23
5850: PPUSH
5851: LD_EXP 25
5855: PPUSH
5856: CALL_OW 179
// Say ( Mike , DM-1-start-b ) ;
5860: LD_EXP 25
5864: PPUSH
5865: LD_STRING DM-1-start-b
5867: PPUSH
5868: CALL_OW 88
// Say ( Heike , DH-1-start-b ) ;
5872: LD_EXP 23
5876: PPUSH
5877: LD_STRING DH-1-start-b
5879: PPUSH
5880: CALL_OW 88
// Say ( Mike , DM-2-start-b ) ;
5884: LD_EXP 25
5888: PPUSH
5889: LD_STRING DM-2-start-b
5891: PPUSH
5892: CALL_OW 88
// Say ( Heike , DH-2-start-b ) ;
5896: LD_EXP 23
5900: PPUSH
5901: LD_STRING DH-2-start-b
5903: PPUSH
5904: CALL_OW 88
// Say ( Mike , DM-3-start-b ) ;
5908: LD_EXP 25
5912: PPUSH
5913: LD_STRING DM-3-start-b
5915: PPUSH
5916: CALL_OW 88
// if Kamil then
5920: LD_EXP 26
5924: IFFALSE 5941
// ComMoveXY ( Kamil , 80 , 58 ) ;
5926: LD_EXP 26
5930: PPUSH
5931: LD_INT 80
5933: PPUSH
5934: LD_INT 58
5936: PPUSH
5937: CALL_OW 111
// ComMoveXY ( Heike , 83 , 56 ) ;
5941: LD_EXP 23
5945: PPUSH
5946: LD_INT 83
5948: PPUSH
5949: LD_INT 56
5951: PPUSH
5952: CALL_OW 111
// ComMoveXY ( Mike , 83 , 59 ) ;
5956: LD_EXP 25
5960: PPUSH
5961: LD_INT 83
5963: PPUSH
5964: LD_INT 59
5966: PPUSH
5967: CALL_OW 111
// AddComTurnUnit ( Heike , Mike ) ;
5971: LD_EXP 23
5975: PPUSH
5976: LD_EXP 25
5980: PPUSH
5981: CALL_OW 179
// AddComTurnUnit ( [ Kamil , Mike ] , Heike ) ;
5985: LD_EXP 26
5989: PUSH
5990: LD_EXP 25
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: LD_EXP 23
6003: PPUSH
6004: CALL_OW 179
// Say ( Heike , DH-3-start-b ) ;
6008: LD_EXP 23
6012: PPUSH
6013: LD_STRING DH-3-start-b
6015: PPUSH
6016: CALL_OW 88
// Say ( Mike , DM-4-start-b ) ;
6020: LD_EXP 25
6024: PPUSH
6025: LD_STRING DM-4-start-b
6027: PPUSH
6028: CALL_OW 88
// if Kamil then
6032: LD_EXP 26
6036: IFFALSE 6066
// begin ComTurnUnit ( Kamil , Heike ) ;
6038: LD_EXP 26
6042: PPUSH
6043: LD_EXP 23
6047: PPUSH
6048: CALL_OW 119
// Say ( Kamil , DKam-1-start-c ) ;
6052: LD_EXP 26
6056: PPUSH
6057: LD_STRING DKam-1-start-c
6059: PPUSH
6060: CALL_OW 88
// end else
6064: GO 6078
// begin Say ( Mike , DM-5-start-b ) ;
6066: LD_EXP 25
6070: PPUSH
6071: LD_STRING DM-5-start-b
6073: PPUSH
6074: CALL_OW 88
// end ; end else
6078: GO 6176
// if Kamil then
6080: LD_EXP 26
6084: IFFALSE 6164
// begin AddComTurnUnit ( Heike , Kamil ) ;
6086: LD_EXP 23
6090: PPUSH
6091: LD_EXP 26
6095: PPUSH
6096: CALL_OW 179
// AddComTurnUnit ( Kamil , Heike ) ;
6100: LD_EXP 26
6104: PPUSH
6105: LD_EXP 23
6109: PPUSH
6110: CALL_OW 179
// Say ( Heike , DH-1-start-f ) ;
6114: LD_EXP 23
6118: PPUSH
6119: LD_STRING DH-1-start-f
6121: PPUSH
6122: CALL_OW 88
// Say ( Kamil , DKam-1-start-f ) ;
6126: LD_EXP 26
6130: PPUSH
6131: LD_STRING DKam-1-start-f
6133: PPUSH
6134: CALL_OW 88
// Say ( Heike , DH-2-start-f ) ;
6138: LD_EXP 23
6142: PPUSH
6143: LD_STRING DH-2-start-f
6145: PPUSH
6146: CALL_OW 88
// Say ( Kamil , DKam-2-start-f ) ;
6150: LD_EXP 26
6154: PPUSH
6155: LD_STRING DKam-2-start-f
6157: PPUSH
6158: CALL_OW 88
// end else
6162: GO 6176
// begin Say ( Heike , DH-1-start-d ) ;
6164: LD_EXP 23
6168: PPUSH
6169: LD_STRING DH-1-start-d
6171: PPUSH
6172: CALL_OW 88
// end ; ComFree ( [ Heike , Givi , Mike , Kamil ] ) ;
6176: LD_EXP 23
6180: PUSH
6181: LD_EXP 24
6185: PUSH
6186: LD_EXP 25
6190: PUSH
6191: LD_EXP 26
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: PPUSH
6202: CALL_OW 139
// InGameOff ;
6206: CALL_OW 9
// ChangeMissionObjectives ( OEast ) ;
6210: LD_STRING OEast
6212: PPUSH
6213: CALL_OW 337
// SetAreaMapShow ( eastExitArea , 1 ) ;
6217: LD_INT 10
6219: PPUSH
6220: LD_INT 1
6222: PPUSH
6223: CALL_OW 424
// SaveForQuickRestart ;
6227: CALL_OW 22
// wait ( 0 0$20 ) ;
6231: LD_INT 700
6233: PPUSH
6234: CALL_OW 67
// SendSciToForest ;
6238: CALL 1526 0 0
// if Difficulty = 1 then
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 1
6249: EQUAL
6250: IFFALSE 6254
// exit ;
6252: GO 6375
// wait ( [ 5 5$00 , 2 2$30 , 2 2$00 ] [ Difficulty - 1 ] ) ;
6254: LD_INT 10500
6256: PUSH
6257: LD_INT 5250
6259: PUSH
6260: LD_INT 4200
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: PUSH
6268: LD_OWVAR 67
6272: PUSH
6273: LD_INT 1
6275: MINUS
6276: ARRAY
6277: PPUSH
6278: CALL_OW 67
// if usAlert then
6282: LD_EXP 10
6286: IFFALSE 6290
// exit ;
6288: GO 6375
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) ;
6290: LD_ADDR_VAR 0 3
6294: PUSH
6295: LD_INT 22
6297: PUSH
6298: LD_INT 1
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: PUSH
6305: LD_INT 25
6307: PUSH
6308: LD_INT 2
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PPUSH
6319: CALL_OW 69
6323: ST_TO_ADDR
// if not tmp then
6324: LD_VAR 0 3
6328: NOT
6329: IFFALSE 6333
// exit ;
6331: GO 6375
// ComExitBuilding ( tmp ) ;
6333: LD_VAR 0 3
6337: PPUSH
6338: CALL_OW 122
// AddComBuild ( tmp , b_breastwork , 40 , 13 , 3 ) ;
6342: LD_VAR 0 3
6346: PPUSH
6347: LD_INT 31
6349: PPUSH
6350: LD_INT 40
6352: PPUSH
6353: LD_INT 13
6355: PPUSH
6356: LD_INT 3
6358: PPUSH
6359: CALL_OW 205
// AddComEnterUnit ( tmp , Delta ) ;
6363: LD_VAR 0 3
6367: PPUSH
6368: LD_INT 1
6370: PPUSH
6371: CALL_OW 180
// end ;
6375: LD_VAR 0 1
6379: RET
// every 3 3$00 do
6380: GO 6382
6382: DISABLE
// begin SetWeather ( 1 , 570 , 350 ) ;
6383: LD_INT 1
6385: PPUSH
6386: LD_INT 570
6388: PPUSH
6389: LD_INT 350
6391: PPUSH
6392: CALL_OW 550
// wait ( 2 2$40 ) ;
6396: LD_INT 5600
6398: PPUSH
6399: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
6403: LD_INT 0
6405: PPUSH
6406: LD_INT 570
6408: PPUSH
6409: LD_INT 350
6411: PPUSH
6412: CALL_OW 550
// end ;
6416: END
// every 0 0$1 trigger not aviradzeSpotted and See ( 2 , Aviradze ) do var i , pepAmount ;
6417: LD_EXP 4
6421: NOT
6422: IFFALSE 6438
6424: PUSH
6425: LD_INT 2
6427: PPUSH
6428: LD_EXP 27
6432: PPUSH
6433: CALL_OW 292
6437: AND
6438: IFFALSE 7363
6440: GO 6442
6442: DISABLE
6443: LD_INT 0
6445: PPUSH
6446: PPUSH
// begin SetAreaMapShow ( eastExitArea , 0 ) ;
6447: LD_INT 10
6449: PPUSH
6450: LD_INT 0
6452: PPUSH
6453: CALL_OW 424
// aviradzeSpotted := true ;
6457: LD_ADDR_EXP 4
6461: PUSH
6462: LD_INT 1
6464: ST_TO_ADDR
// pepAmount := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) ;
6465: LD_ADDR_VAR 0 2
6469: PUSH
6470: LD_INT 22
6472: PUSH
6473: LD_INT 2
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 21
6482: PUSH
6483: LD_INT 1
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: PPUSH
6494: CALL_OW 69
6498: ST_TO_ADDR
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6499: LD_EXP 23
6503: PPUSH
6504: LD_EXP 27
6508: PPUSH
6509: CALL_OW 250
6513: PPUSH
6514: LD_EXP 27
6518: PPUSH
6519: CALL_OW 251
6523: PPUSH
6524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6528: LD_INT 35
6530: PPUSH
6531: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 16 ;
6535: LD_EXP 23
6539: PPUSH
6540: LD_EXP 27
6544: PPUSH
6545: CALL_OW 296
6549: PUSH
6550: LD_INT 16
6552: LESS
6553: IFFALSE 6528
// InGameOn ;
6555: CALL_OW 8
// ChangeSideFog ( 5 , 2 ) ;
6559: LD_INT 5
6561: PPUSH
6562: LD_INT 2
6564: PPUSH
6565: CALL_OW 343
// if pepAmount > 2 then
6569: LD_VAR 0 2
6573: PUSH
6574: LD_INT 2
6576: GREATER
6577: IFFALSE 6593
// Say ( Heike , DH-1-spot ) else
6579: LD_EXP 23
6583: PPUSH
6584: LD_STRING DH-1-spot
6586: PPUSH
6587: CALL_OW 88
6591: GO 6605
// Say ( Heike , DH-1-spot-d ) ;
6593: LD_EXP 23
6597: PPUSH
6598: LD_STRING DH-1-spot-d
6600: PPUSH
6601: CALL_OW 88
// ComMoveXY ( Heike , GetX ( Aviradze ) , GetY ( Aviradze ) ) ;
6605: LD_EXP 23
6609: PPUSH
6610: LD_EXP 27
6614: PPUSH
6615: CALL_OW 250
6619: PPUSH
6620: LD_EXP 27
6624: PPUSH
6625: CALL_OW 251
6629: PPUSH
6630: CALL_OW 111
// for i in [ Kamil , Mike , Givi ] do
6634: LD_ADDR_VAR 0 1
6638: PUSH
6639: LD_EXP 26
6643: PUSH
6644: LD_EXP 25
6648: PUSH
6649: LD_EXP 24
6653: PUSH
6654: EMPTY
6655: LIST
6656: LIST
6657: LIST
6658: PUSH
6659: FOR_IN
6660: IFFALSE 6699
// if GetDistUnits ( i , Aviradze ) > 7 then
6662: LD_VAR 0 1
6666: PPUSH
6667: LD_EXP 27
6671: PPUSH
6672: CALL_OW 296
6676: PUSH
6677: LD_INT 7
6679: GREATER
6680: IFFALSE 6697
// ComMoveXY ( i , 102 , 40 ) ;
6682: LD_VAR 0 1
6686: PPUSH
6687: LD_INT 102
6689: PPUSH
6690: LD_INT 40
6692: PPUSH
6693: CALL_OW 111
6697: GO 6659
6699: POP
6700: POP
// repeat wait ( 0 0$1 ) ;
6701: LD_INT 35
6703: PPUSH
6704: CALL_OW 67
// until GetDistUnits ( Heike , Aviradze ) < 6 ;
6708: LD_EXP 23
6712: PPUSH
6713: LD_EXP 27
6717: PPUSH
6718: CALL_OW 296
6722: PUSH
6723: LD_INT 6
6725: LESS
6726: IFFALSE 6701
// ComTurnUnit ( Heike , Aviradze ) ;
6728: LD_EXP 23
6732: PPUSH
6733: LD_EXP 27
6737: PPUSH
6738: CALL_OW 119
// ComTurnUnit ( [ Aviradze , Sophia , Kaia ] , Heike ) ;
6742: LD_EXP 27
6746: PUSH
6747: LD_EXP 29
6751: PUSH
6752: LD_EXP 28
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: LIST
6761: PPUSH
6762: LD_EXP 23
6766: PPUSH
6767: CALL_OW 119
// if pepAmount > 1 then
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: GREATER
6779: IFFALSE 6831
// begin wait ( 0 0$2 ) ;
6781: LD_INT 70
6783: PPUSH
6784: CALL_OW 67
// ComTurnUnit ( [ Kamil , Mike , Givi ] , Aviradze ) ;
6788: LD_EXP 26
6792: PUSH
6793: LD_EXP 25
6797: PUSH
6798: LD_EXP 24
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: PPUSH
6808: LD_EXP 27
6812: PPUSH
6813: CALL_OW 119
// Say ( Heike , DH-2-spot ) ;
6817: LD_EXP 23
6821: PPUSH
6822: LD_STRING DH-2-spot
6824: PPUSH
6825: CALL_OW 88
// end else
6829: GO 6843
// Say ( Heike , DH-2-spot-d ) ;
6831: LD_EXP 23
6835: PPUSH
6836: LD_STRING DH-2-spot-d
6838: PPUSH
6839: CALL_OW 88
// Say ( Aviradze , DA-2-spot ) ;
6843: LD_EXP 27
6847: PPUSH
6848: LD_STRING DA-2-spot
6850: PPUSH
6851: CALL_OW 88
// Say ( Heike , DH-3-spot ) ;
6855: LD_EXP 23
6859: PPUSH
6860: LD_STRING DH-3-spot
6862: PPUSH
6863: CALL_OW 88
// ComMoveUnit ( Kaia , Heike ) ;
6867: LD_EXP 28
6871: PPUSH
6872: LD_EXP 23
6876: PPUSH
6877: CALL_OW 112
// ComTurnUnit ( Heike , Kaia ) ;
6881: LD_EXP 23
6885: PPUSH
6886: LD_EXP 28
6890: PPUSH
6891: CALL_OW 119
// wait ( 0 0$0.3 ) ;
6895: LD_INT 10
6897: PPUSH
6898: CALL_OW 67
// Say ( Kaia , DK-3-spot ) ;
6902: LD_EXP 28
6906: PPUSH
6907: LD_STRING DK-3-spot
6909: PPUSH
6910: CALL_OW 88
// ComTurnUnit ( Kaia , Heike ) ;
6914: LD_EXP 28
6918: PPUSH
6919: LD_EXP 23
6923: PPUSH
6924: CALL_OW 119
// Say ( Heike , DH-4-spot ) ;
6928: LD_EXP 23
6932: PPUSH
6933: LD_STRING DH-4-spot
6935: PPUSH
6936: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6940: LD_INT 10
6942: PPUSH
6943: CALL_OW 67
// ComTurnUnit ( Heike , Aviradze ) ;
6947: LD_EXP 23
6951: PPUSH
6952: LD_EXP 27
6956: PPUSH
6957: CALL_OW 119
// Say ( Aviradze , DA-4-spot ) ;
6961: LD_EXP 27
6965: PPUSH
6966: LD_STRING DA-4-spot
6968: PPUSH
6969: CALL_OW 88
// ComTurnUnit ( Kaia , Aviradze ) ;
6973: LD_EXP 28
6977: PPUSH
6978: LD_EXP 27
6982: PPUSH
6983: CALL_OW 119
// Say ( Kaia , DK-4-spot ) ;
6987: LD_EXP 28
6991: PPUSH
6992: LD_STRING DK-4-spot
6994: PPUSH
6995: CALL_OW 88
// ComTurnUnit ( Aviradze , Kaia ) ;
6999: LD_EXP 27
7003: PPUSH
7004: LD_EXP 28
7008: PPUSH
7009: CALL_OW 119
// Say ( Aviradze , DA-5-spot ) ;
7013: LD_EXP 27
7017: PPUSH
7018: LD_STRING DA-5-spot
7020: PPUSH
7021: CALL_OW 88
// Say ( Kaia , DK-5-spot ) ;
7025: LD_EXP 28
7029: PPUSH
7030: LD_STRING DK-5-spot
7032: PPUSH
7033: CALL_OW 88
// if pepAmount = 1 then
7037: LD_VAR 0 2
7041: PUSH
7042: LD_INT 1
7044: EQUAL
7045: IFFALSE 7059
// Say ( Heike , DH-5-spot-f ) ;
7047: LD_EXP 23
7051: PPUSH
7052: LD_STRING DH-5-spot-f
7054: PPUSH
7055: CALL_OW 88
// if pepAmount < 3 then
7059: LD_VAR 0 2
7063: PUSH
7064: LD_INT 3
7066: LESS
7067: IFFALSE 7083
// Say ( Aviradze , DA-6-spot-f ) else
7069: LD_EXP 27
7073: PPUSH
7074: LD_STRING DA-6-spot-f
7076: PPUSH
7077: CALL_OW 88
7081: GO 7119
// if pepAmount < 4 then
7083: LD_VAR 0 2
7087: PUSH
7088: LD_INT 4
7090: LESS
7091: IFFALSE 7107
// Say ( Aviradze , DA-6-spot-c ) else
7093: LD_EXP 27
7097: PPUSH
7098: LD_STRING DA-6-spot-c
7100: PPUSH
7101: CALL_OW 88
7105: GO 7119
// Say ( Aviradze , DA-6-spot ) ;
7107: LD_EXP 27
7111: PPUSH
7112: LD_STRING DA-6-spot
7114: PPUSH
7115: CALL_OW 88
// if Kamil then
7119: LD_EXP 26
7123: IFFALSE 7137
// Say ( Kamil , DKam-6-spot ) ;
7125: LD_EXP 26
7129: PPUSH
7130: LD_STRING DKam-6-spot
7132: PPUSH
7133: CALL_OW 88
// Say ( Kaia , DK-6-spot ) ;
7137: LD_EXP 28
7141: PPUSH
7142: LD_STRING DK-6-spot
7144: PPUSH
7145: CALL_OW 88
// ComTurnUnit ( Aviradze , Heike ) ;
7149: LD_EXP 27
7153: PPUSH
7154: LD_EXP 23
7158: PPUSH
7159: CALL_OW 119
// Say ( Aviradze , DA-7-spot ) ;
7163: LD_EXP 27
7167: PPUSH
7168: LD_STRING DA-7-spot
7170: PPUSH
7171: CALL_OW 88
// Say ( Heike , DH-7-spot ) ;
7175: LD_EXP 23
7179: PPUSH
7180: LD_STRING DH-7-spot
7182: PPUSH
7183: CALL_OW 88
// if sciCounterKill >= 3 then
7187: LD_EXP 9
7191: PUSH
7192: LD_INT 3
7194: GREATEREQUAL
7195: IFFALSE 7221
// begin Say ( Heike , DH-7-spot-a ) ;
7197: LD_EXP 23
7201: PPUSH
7202: LD_STRING DH-7-spot-a
7204: PPUSH
7205: CALL_OW 88
// Say ( Aviradze , DA-8-spot-a ) ;
7209: LD_EXP 27
7213: PPUSH
7214: LD_STRING DA-8-spot-a
7216: PPUSH
7217: CALL_OW 88
// end ; InGameOff ;
7221: CALL_OW 9
// if sciCounterKill < 3 then
7225: LD_EXP 9
7229: PUSH
7230: LD_INT 3
7232: LESS
7233: IFFALSE 7301
// begin SetSide ( Kaia , 2 ) ;
7235: LD_EXP 28
7239: PPUSH
7240: LD_INT 2
7242: PPUSH
7243: CALL_OW 235
// ComFree ( Kaia ) ;
7247: LD_EXP 28
7251: PPUSH
7252: CALL_OW 139
// if Kamil then
7256: LD_EXP 26
7260: IFFALSE 7283
// begin ComHold ( Kamil ) ;
7262: LD_EXP 26
7266: PPUSH
7267: CALL_OW 140
// SetSide ( Kamil , 5 ) ;
7271: LD_EXP 26
7275: PPUSH
7276: LD_INT 5
7278: PPUSH
7279: CALL_OW 235
// end ; ChangeMissionObjectives ( OSci ) ;
7283: LD_STRING OSci
7285: PPUSH
7286: CALL_OW 337
// ComFree ( Aviradze ) ;
7290: LD_EXP 27
7294: PPUSH
7295: CALL_OW 139
// end else
7299: GO 7363
// begin for i in FilterAllUnits ( [ f_side , 5 ] ) do
7301: LD_ADDR_VAR 0 1
7305: PUSH
7306: LD_INT 22
7308: PUSH
7309: LD_INT 5
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 69
7320: PUSH
7321: FOR_IN
7322: IFFALSE 7338
// SetSide ( i , 2 ) ;
7324: LD_VAR 0 1
7328: PPUSH
7329: LD_INT 2
7331: PPUSH
7332: CALL_OW 235
7336: GO 7321
7338: POP
7339: POP
// aviradzeQuestDone := true ;
7340: LD_ADDR_EXP 8
7344: PUSH
7345: LD_INT 1
7347: ST_TO_ADDR
// attackDeltaAllowed := true ;
7348: LD_ADDR_EXP 14
7352: PUSH
7353: LD_INT 1
7355: ST_TO_ADDR
// ChangeMissionObjectives ( ODelta2 ) ;
7356: LD_STRING ODelta2
7358: PPUSH
7359: CALL_OW 337
// end ; end ;
7363: PPOPN 2
7365: END
// every 0 0$2 trigger GetDistUnitXY ( Aviradze , 106 , 38 ) > 8 and GetSide ( Aviradze ) = 5 do
7366: LD_EXP 27
7370: PPUSH
7371: LD_INT 106
7373: PPUSH
7374: LD_INT 38
7376: PPUSH
7377: CALL_OW 297
7381: PUSH
7382: LD_INT 8
7384: GREATER
7385: IFFALSE 7402
7387: PUSH
7388: LD_EXP 27
7392: PPUSH
7393: CALL_OW 255
7397: PUSH
7398: LD_INT 5
7400: EQUAL
7401: AND
7402: IFFALSE 7423
7404: GO 7406
7406: DISABLE
// begin enable ;
7407: ENABLE
// ComMoveXY ( Aviradze , 106 , 38 ) ;
7408: LD_EXP 27
7412: PPUSH
7413: LD_INT 106
7415: PPUSH
7416: LD_INT 38
7418: PPUSH
7419: CALL_OW 111
// end ;
7423: END
// every 0 0$2 trigger usAlert and not aviradzeQuestDone do
7424: LD_EXP 10
7428: IFFALSE 7437
7430: PUSH
7431: LD_EXP 8
7435: NOT
7436: AND
7437: IFFALSE 7454
7439: GO 7441
7441: DISABLE
// SayRadioNoFaceNoName ( Lynch , DDelta-Alarm-1 ) ;
7442: LD_EXP 20
7446: PPUSH
7447: LD_STRING DDelta-Alarm-1
7449: PPUSH
7450: CALL 77854 0 2
7454: END
// every 0 0$1 trigger not sciSpotted and GetDistUnits ( NearestUnitToUnit ( usSci , Heike ) , Heike ) < 8 and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and not aviradzeSpotted do
7455: LD_EXP 7
7459: NOT
7460: IFFALSE 7492
7462: PUSH
7463: LD_EXP 22
7467: PPUSH
7468: LD_EXP 23
7472: PPUSH
7473: CALL_OW 74
7477: PPUSH
7478: LD_EXP 23
7482: PPUSH
7483: CALL_OW 296
7487: PUSH
7488: LD_INT 8
7490: LESS
7491: AND
7492: IFFALSE 7518
7494: PUSH
7495: LD_INT 2
7497: PPUSH
7498: LD_EXP 22
7502: PPUSH
7503: LD_EXP 23
7507: PPUSH
7508: CALL_OW 74
7512: PPUSH
7513: CALL_OW 292
7517: AND
7518: IFFALSE 7554
7520: PUSH
7521: LD_INT 22
7523: PUSH
7524: LD_INT 2
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_INT 21
7533: PUSH
7534: LD_INT 1
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PPUSH
7545: CALL_OW 69
7549: PUSH
7550: LD_INT 1
7552: GREATER
7553: AND
7554: IFFALSE 7563
7556: PUSH
7557: LD_EXP 4
7561: NOT
7562: AND
7563: IFFALSE 7607
7565: GO 7567
7567: DISABLE
// begin sciSpotted := true ;
7568: LD_ADDR_EXP 7
7572: PUSH
7573: LD_INT 1
7575: ST_TO_ADDR
// CenterNowOnUnits ( NearestUnitToUnit ( usSci , Heike ) ) ;
7576: LD_EXP 22
7580: PPUSH
7581: LD_EXP 23
7585: PPUSH
7586: CALL_OW 74
7590: PPUSH
7591: CALL_OW 87
// Say ( Heike , DH-1-sci ) ;
7595: LD_EXP 23
7599: PPUSH
7600: LD_STRING DH-1-sci
7602: PPUSH
7603: CALL_OW 88
// end ;
7607: END
// every 0 0$1 trigger aviradzeSpotted and not sciSpotted and See ( 2 , NearestUnitToUnit ( usSci , Heike ) ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) > 1 and aviradzeSpotted and not aviradzeQuestDone do var un ;
7608: LD_EXP 4
7612: IFFALSE 7621
7614: PUSH
7615: LD_EXP 7
7619: NOT
7620: AND
7621: IFFALSE 7647
7623: PUSH
7624: LD_INT 2
7626: PPUSH
7627: LD_EXP 22
7631: PPUSH
7632: LD_EXP 23
7636: PPUSH
7637: CALL_OW 74
7641: PPUSH
7642: CALL_OW 292
7646: AND
7647: IFFALSE 7683
7649: PUSH
7650: LD_INT 22
7652: PUSH
7653: LD_INT 2
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_INT 21
7662: PUSH
7663: LD_INT 1
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 69
7678: PUSH
7679: LD_INT 1
7681: GREATER
7682: AND
7683: IFFALSE 7691
7685: PUSH
7686: LD_EXP 4
7690: AND
7691: IFFALSE 7700
7693: PUSH
7694: LD_EXP 8
7698: NOT
7699: AND
7700: IFFALSE 7841
7702: GO 7704
7704: DISABLE
7705: LD_INT 0
7707: PPUSH
// begin sciSpotted := true ;
7708: LD_ADDR_EXP 7
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// un := NearestUnitToUnit ( usSci , Heike ) ;
7716: LD_ADDR_VAR 0 1
7720: PUSH
7721: LD_EXP 22
7725: PPUSH
7726: LD_EXP 23
7730: PPUSH
7731: CALL_OW 74
7735: ST_TO_ADDR
// DialogueOn ;
7736: CALL_OW 6
// PlaceSeeing ( GetX ( un ) , GetY ( un ) , 2 , - 3 ) ;
7740: LD_VAR 0 1
7744: PPUSH
7745: CALL_OW 250
7749: PPUSH
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 251
7759: PPUSH
7760: LD_INT 2
7762: PPUSH
7763: LD_INT 3
7765: NEG
7766: PPUSH
7767: CALL_OW 330
// CenterNowOnUnits ( un ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 87
// Say ( Heike , DH-1-sci-a ) ;
7780: LD_EXP 23
7784: PPUSH
7785: LD_STRING DH-1-sci-a
7787: PPUSH
7788: CALL_OW 88
// if Mike then
7792: LD_EXP 25
7796: IFFALSE 7810
// Say ( Mike , DM-1-sci-a ) ;
7798: LD_EXP 25
7802: PPUSH
7803: LD_STRING DM-1-sci-a
7805: PPUSH
7806: CALL_OW 88
// RemoveSeeing ( GetX ( un ) , GetY ( un ) , 2 ) ;
7810: LD_VAR 0 1
7814: PPUSH
7815: CALL_OW 250
7819: PPUSH
7820: LD_VAR 0 1
7824: PPUSH
7825: CALL_OW 251
7829: PPUSH
7830: LD_INT 2
7832: PPUSH
7833: CALL_OW 331
// DialogueOff ;
7837: CALL_OW 7
// end ;
7841: PPOPN 1
7843: END
// every 0 0$1 trigger usAlert and ( GetLives ( Gladstone ) < 1000 or GetLives ( usLab ) < 999 ) do var veh ;
7844: LD_EXP 10
7848: IFFALSE 7880
7850: PUSH
7851: LD_EXP 19
7855: PPUSH
7856: CALL_OW 256
7860: PUSH
7861: LD_INT 1000
7863: LESS
7864: IFTRUE 7879
7866: PUSH
7867: LD_INT 3
7869: PPUSH
7870: CALL_OW 256
7874: PUSH
7875: LD_INT 999
7877: LESS
7878: OR
7879: AND
7880: IFFALSE 8142
7882: GO 7884
7884: DISABLE
7885: LD_INT 0
7887: PPUSH
// begin veh := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
7888: LD_ADDR_VAR 0 1
7892: PUSH
7893: LD_INT 22
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 21
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 58
7915: PUSH
7916: EMPTY
7917: LIST
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: PPUSH
7924: CALL_OW 69
7928: ST_TO_ADDR
// if veh and IsOk ( Gladstone ) then
7929: LD_VAR 0 1
7933: IFFALSE 7946
7935: PUSH
7936: LD_EXP 19
7940: PPUSH
7941: CALL_OW 302
7945: AND
7946: IFFALSE 7988
// begin if IsInUnit ( Gladstone ) then
7948: LD_EXP 19
7952: PPUSH
7953: CALL_OW 310
7957: IFFALSE 7968
// ComExitBuilding ( Gladstone ) ;
7959: LD_EXP 19
7963: PPUSH
7964: CALL_OW 122
// AddComEnterUnit ( Gladstone , veh [ 1 ] ) ;
7968: LD_EXP 19
7972: PPUSH
7973: LD_VAR 0 1
7977: PUSH
7978: LD_INT 1
7980: ARRAY
7981: PPUSH
7982: CALL_OW 180
// end else
7986: GO 8008
// if IsInUnit ( Gladstone ) then
7988: LD_EXP 19
7992: PPUSH
7993: CALL_OW 310
7997: IFFALSE 8008
// ComExitBuilding ( Gladstone ) ;
7999: LD_EXP 19
8003: PPUSH
8004: CALL_OW 122
// AddComMoveXY ( Gladstone , 27 , 51 ) ;
8008: LD_EXP 19
8012: PPUSH
8013: LD_INT 27
8015: PPUSH
8016: LD_INT 51
8018: PPUSH
8019: CALL_OW 171
// Say ( Gladstone , D8-Glad-2 ) ;
8023: LD_EXP 19
8027: PPUSH
8028: LD_STRING D8-Glad-2
8030: PPUSH
8031: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
8035: LD_INT 35
8037: PPUSH
8038: CALL_OW 67
// until IsAt ( Gladstone , 27 , 51 ) or IsAt ( IsInUnit ( Gladstone ) , 27 , 51 ) or IsDead ( Gladstone ) ;
8042: LD_EXP 19
8046: PPUSH
8047: LD_INT 27
8049: PPUSH
8050: LD_INT 51
8052: PPUSH
8053: CALL_OW 307
8057: IFTRUE 8081
8059: PUSH
8060: LD_EXP 19
8064: PPUSH
8065: CALL_OW 310
8069: PPUSH
8070: LD_INT 27
8072: PPUSH
8073: LD_INT 51
8075: PPUSH
8076: CALL_OW 307
8080: OR
8081: IFTRUE 8094
8083: PUSH
8084: LD_EXP 19
8088: PPUSH
8089: CALL_OW 301
8093: OR
8094: IFFALSE 8035
// if IsDead ( Gladstone ) then
8096: LD_EXP 19
8100: PPUSH
8101: CALL_OW 301
8105: IFFALSE 8109
// exit ;
8107: GO 8142
// RemoveUnit ( HexInfo ( 27 , 51 ) ) ;
8109: LD_INT 27
8111: PPUSH
8112: LD_INT 51
8114: PPUSH
8115: CALL_OW 428
8119: PPUSH
8120: CALL_OW 64
// gladstoneEscaped := true ;
8124: LD_ADDR_EXP 12
8128: PUSH
8129: LD_INT 1
8131: ST_TO_ADDR
// SaveVariable ( true , 02_GladstoneEscaped ) ;
8132: LD_INT 1
8134: PPUSH
8135: LD_STRING 02_GladstoneEscaped
8137: PPUSH
8138: CALL_OW 39
// end ;
8142: PPOPN 1
8144: END
// every 0 0$1 trigger aviradzeSpotted and ( sciCounterKill >= 3 or not usSci ) and not aviradzeQuestDone and GetSide ( Aviradze ) = 5 do
8145: LD_EXP 4
8149: IFFALSE 8170
8151: PUSH
8152: LD_EXP 9
8156: PUSH
8157: LD_INT 3
8159: GREATEREQUAL
8160: IFTRUE 8169
8162: PUSH
8163: LD_EXP 22
8167: NOT
8168: OR
8169: AND
8170: IFFALSE 8179
8172: PUSH
8173: LD_EXP 8
8177: NOT
8178: AND
8179: IFFALSE 8196
8181: PUSH
8182: LD_EXP 27
8186: PPUSH
8187: CALL_OW 255
8191: PUSH
8192: LD_INT 5
8194: EQUAL
8195: AND
8196: IFFALSE 8247
8198: GO 8200
8200: DISABLE
// begin DialogueOn ;
8201: CALL_OW 6
// Say ( Heike , DH-1-quest-done ) ;
8205: LD_EXP 23
8209: PPUSH
8210: LD_STRING DH-1-quest-done
8212: PPUSH
8213: CALL_OW 88
// if Givi then
8217: LD_EXP 24
8221: IFFALSE 8235
// Say ( Givi , DG-1-quest-done ) ;
8223: LD_EXP 24
8227: PPUSH
8228: LD_STRING DG-1-quest-done
8230: PPUSH
8231: CALL_OW 88
// DialogueOff ;
8235: CALL_OW 7
// aviradzeQuestDone := true ;
8239: LD_ADDR_EXP 8
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// end ;
8247: END
// every 0 0$1 trigger FilterUnitsInArea ( frontlineAttack , [ f_side , 2 ] ) > 1 and not aviradzeQuestDone and GetSide ( Delta ) <> 2 and IsOk ( Mike ) and IsOk ( Heike ) do
8248: LD_INT 11
8250: PPUSH
8251: LD_INT 22
8253: PUSH
8254: LD_INT 2
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PPUSH
8261: CALL_OW 70
8265: PUSH
8266: LD_INT 1
8268: GREATER
8269: IFFALSE 8278
8271: PUSH
8272: LD_EXP 8
8276: NOT
8277: AND
8278: IFFALSE 8293
8280: PUSH
8281: LD_INT 1
8283: PPUSH
8284: CALL_OW 255
8288: PUSH
8289: LD_INT 2
8291: NONEQUAL
8292: AND
8293: IFFALSE 8306
8295: PUSH
8296: LD_EXP 25
8300: PPUSH
8301: CALL_OW 302
8305: AND
8306: IFFALSE 8319
8308: PUSH
8309: LD_EXP 23
8313: PPUSH
8314: CALL_OW 302
8318: AND
8319: IFFALSE 8464
8321: GO 8323
8323: DISABLE
// begin DialogueOn ;
8324: CALL_OW 6
// PlaceSeeing ( 47 , 19 , 2 , - 6 ) ;
8328: LD_INT 47
8330: PPUSH
8331: LD_INT 19
8333: PPUSH
8334: LD_INT 2
8336: PPUSH
8337: LD_INT 6
8339: NEG
8340: PPUSH
8341: CALL_OW 330
// RemoveSeeing ( 47 , 19 , 2 ) ;
8345: LD_INT 47
8347: PPUSH
8348: LD_INT 19
8350: PPUSH
8351: LD_INT 2
8353: PPUSH
8354: CALL_OW 331
// PlaceSeeing ( 34 , 32 , 2 , - 6 ) ;
8358: LD_INT 34
8360: PPUSH
8361: LD_INT 32
8363: PPUSH
8364: LD_INT 2
8366: PPUSH
8367: LD_INT 6
8369: NEG
8370: PPUSH
8371: CALL_OW 330
// RemoveSeeing ( 34 , 32 , 2 ) ;
8375: LD_INT 34
8377: PPUSH
8378: LD_INT 32
8380: PPUSH
8381: LD_INT 2
8383: PPUSH
8384: CALL_OW 331
// Say ( Mike , DM-Prem-1 ) ;
8388: LD_EXP 25
8392: PPUSH
8393: LD_STRING DM-Prem-1
8395: PPUSH
8396: CALL_OW 88
// Say ( Heike , DH-Prem-2 ) ;
8400: LD_EXP 23
8404: PPUSH
8405: LD_STRING DH-Prem-2
8407: PPUSH
8408: CALL_OW 88
// Say ( Heike , DH-Prem-3 ) ;
8412: LD_EXP 23
8416: PPUSH
8417: LD_STRING DH-Prem-3
8419: PPUSH
8420: CALL_OW 88
// Say ( Mike , DM-Prem-4 ) ;
8424: LD_EXP 25
8428: PPUSH
8429: LD_STRING DM-Prem-4
8431: PPUSH
8432: CALL_OW 88
// Say ( Mike , DM-Prem-5 ) ;
8436: LD_EXP 25
8440: PPUSH
8441: LD_STRING DM-Prem-5
8443: PPUSH
8444: CALL_OW 88
// Say ( Givi , DG-Prem-6 ) ;
8448: LD_EXP 24
8452: PPUSH
8453: LD_STRING DG-Prem-6
8455: PPUSH
8456: CALL_OW 88
// DialogueOff ;
8460: CALL_OW 7
// end ;
8464: END
// every 0 0$1 trigger See ( 5 , Heike ) and GetDistUnits ( Heike , Aviradze ) < 6 and aviradzeQuestDone and not attackDeltaAllowed do var i ;
8465: LD_INT 5
8467: PPUSH
8468: LD_EXP 23
8472: PPUSH
8473: CALL_OW 292
8477: IFFALSE 8499
8479: PUSH
8480: LD_EXP 23
8484: PPUSH
8485: LD_EXP 27
8489: PPUSH
8490: CALL_OW 296
8494: PUSH
8495: LD_INT 6
8497: LESS
8498: AND
8499: IFFALSE 8507
8501: PUSH
8502: LD_EXP 8
8506: AND
8507: IFFALSE 8516
8509: PUSH
8510: LD_EXP 14
8514: NOT
8515: AND
8516: IFFALSE 8654
8518: GO 8520
8520: DISABLE
8521: LD_INT 0
8523: PPUSH
// begin attackDeltaAllowed := true ;
8524: LD_ADDR_EXP 14
8528: PUSH
8529: LD_INT 1
8531: ST_TO_ADDR
// InGameOn ;
8532: CALL_OW 8
// CenterNowOnUnits ( Heike ) ;
8536: LD_EXP 23
8540: PPUSH
8541: CALL_OW 87
// wait ( 0 0$0.3 ) ;
8545: LD_INT 10
8547: PPUSH
8548: CALL_OW 67
// ComTurnUnit ( Aviradze , Heike ) ;
8552: LD_EXP 27
8556: PPUSH
8557: LD_EXP 23
8561: PPUSH
8562: CALL_OW 119
// ComTurnUnit ( Heike , Aviradze ) ;
8566: LD_EXP 23
8570: PPUSH
8571: LD_EXP 27
8575: PPUSH
8576: CALL_OW 119
// Say ( Heike , DH-1-return ) ;
8580: LD_EXP 23
8584: PPUSH
8585: LD_STRING DH-1-return
8587: PPUSH
8588: CALL_OW 88
// Say ( Aviradze , DA-1-return ) ;
8592: LD_EXP 27
8596: PPUSH
8597: LD_STRING DA-1-return
8599: PPUSH
8600: CALL_OW 88
// InGameOff ;
8604: CALL_OW 9
// ChangeMissionObjectives ( ODelta ) ;
8608: LD_STRING ODelta
8610: PPUSH
8611: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
8615: LD_ADDR_VAR 0 1
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_INT 5
8625: PUSH
8626: EMPTY
8627: LIST
8628: LIST
8629: PPUSH
8630: CALL_OW 69
8634: PUSH
8635: FOR_IN
8636: IFFALSE 8652
// SetSide ( i , 2 ) ;
8638: LD_VAR 0 1
8642: PPUSH
8643: LD_INT 2
8645: PPUSH
8646: CALL_OW 235
8650: GO 8635
8652: POP
8653: POP
// end ;
8654: PPOPN 1
8656: END
// every 0 0$1 trigger usAlert and not attackDeltaAllowed do
8657: LD_EXP 10
8661: IFFALSE 8670
8663: PUSH
8664: LD_EXP 14
8668: NOT
8669: AND
8670: IFFALSE 8683
8672: GO 8674
8674: DISABLE
// spottedBeforeRadio := true ;
8675: LD_ADDR_EXP 6
8679: PUSH
8680: LD_INT 1
8682: ST_TO_ADDR
8683: END
// every 0 0$1 trigger attackDeltaAllowed and IsOk ( Markov ) and GetSide ( Delta ) = 1 and IsOk ( Lynch ) and not usAlert do var i , k , tmp ;
8684: LD_EXP 14
8688: IFFALSE 8701
8690: PUSH
8691: LD_EXP 30
8695: PPUSH
8696: CALL_OW 302
8700: AND
8701: IFFALSE 8716
8703: PUSH
8704: LD_INT 1
8706: PPUSH
8707: CALL_OW 255
8711: PUSH
8712: LD_INT 1
8714: EQUAL
8715: AND
8716: IFFALSE 8729
8718: PUSH
8719: LD_EXP 20
8723: PPUSH
8724: CALL_OW 302
8728: AND
8729: IFFALSE 8738
8731: PUSH
8732: LD_EXP 10
8736: NOT
8737: AND
8738: IFFALSE 9972
8740: GO 8742
8742: DISABLE
8743: LD_INT 0
8745: PPUSH
8746: PPUSH
8747: PPUSH
// begin trap := 0 ;
8748: LD_ADDR_EXP 17
8752: PUSH
8753: LD_INT 0
8755: ST_TO_ADDR
// wait ( 0 0$12 ) ;
8756: LD_INT 420
8758: PPUSH
8759: CALL_OW 67
// DialogueOn ;
8763: CALL_OW 6
// Say ( Markov , DMar-1-radio ) ;
8767: LD_EXP 30
8771: PPUSH
8772: LD_STRING DMar-1-radio
8774: PPUSH
8775: CALL_OW 88
// Say ( Heike , DH-1-radio ) ;
8779: LD_EXP 23
8783: PPUSH
8784: LD_STRING DH-1-radio
8786: PPUSH
8787: CALL_OW 88
// Say ( Markov , DMar-2-radio ) ;
8791: LD_EXP 30
8795: PPUSH
8796: LD_STRING DMar-2-radio
8798: PPUSH
8799: CALL_OW 88
// Say ( Heike , DH-2-radio ) ;
8803: LD_EXP 23
8807: PPUSH
8808: LD_STRING DH-2-radio
8810: PPUSH
8811: CALL_OW 88
// if IsOk ( Kamil ) or IsOk ( Sophia ) then
8815: LD_EXP 26
8819: PPUSH
8820: CALL_OW 302
8824: IFTRUE 8837
8826: PUSH
8827: LD_EXP 29
8831: PPUSH
8832: CALL_OW 302
8836: OR
8837: IFFALSE 9972
// begin case Query ( Q1Trap ) of 1 :
8839: LD_STRING Q1Trap
8841: PPUSH
8842: CALL_OW 97
8846: PUSH
8847: LD_INT 1
8849: DOUBLE
8850: EQUAL
8851: IFTRUE 8855
8853: GO 9061
8855: POP
// begin if IsOk ( Kamil ) then
8856: LD_EXP 26
8860: PPUSH
8861: CALL_OW 302
8865: IFFALSE 8944
// begin Say ( Kamil , DKam-2-radio ) ;
8867: LD_EXP 26
8871: PPUSH
8872: LD_STRING DKam-2-radio
8874: PPUSH
8875: CALL_OW 88
// Say ( Kamil , DKam-3-radio ) ;
8879: LD_EXP 26
8883: PPUSH
8884: LD_STRING DKam-3-radio
8886: PPUSH
8887: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio ) ;
8891: LD_EXP 20
8895: PPUSH
8896: LD_STRING DDelta-3-radio
8898: PPUSH
8899: CALL 77854 0 2
// dwait ( 0 0$01 ) ;
8903: LD_INT 35
8905: PPUSH
8906: CALL_OW 68
// Say ( Heike , DH-3-radio ) ;
8910: LD_EXP 23
8914: PPUSH
8915: LD_STRING DH-3-radio
8917: PPUSH
8918: CALL_OW 88
// Say ( Kamil , DKam-4-radio ) ;
8922: LD_EXP 26
8926: PPUSH
8927: LD_STRING DKam-4-radio
8929: PPUSH
8930: CALL_OW 88
// trap := 1 ;
8934: LD_ADDR_EXP 17
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// end else
8942: GO 9055
// begin Say ( Sophia , DS-1-radio ) ;
8944: LD_EXP 29
8948: PPUSH
8949: LD_STRING DS-1-radio
8951: PPUSH
8952: CALL_OW 88
// Say ( Sophia , DS-2-radio ) ;
8956: LD_EXP 29
8960: PPUSH
8961: LD_STRING DS-2-radio
8963: PPUSH
8964: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-2-radio-s ) ;
8968: LD_EXP 20
8972: PPUSH
8973: LD_STRING DDelta-2-radio-s
8975: PPUSH
8976: CALL 77854 0 2
// Say ( Sophia , DS-3-radio ) ;
8980: LD_EXP 29
8984: PPUSH
8985: LD_STRING DS-3-radio
8987: PPUSH
8988: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-3-radio-s ) ;
8992: LD_EXP 20
8996: PPUSH
8997: LD_STRING DDelta-3-radio-s
8999: PPUSH
9000: CALL 77854 0 2
// Say ( Sophia , DS-4-radio-s ) ;
9004: LD_EXP 29
9008: PPUSH
9009: LD_STRING DS-4-radio-s
9011: PPUSH
9012: CALL_OW 88
// SayRadioNoFaceNoName ( Lynch , DDelta-4-radio-s ) ;
9016: LD_EXP 20
9020: PPUSH
9021: LD_STRING DDelta-4-radio-s
9023: PPUSH
9024: CALL 77854 0 2
// dwait ( 0 0$01 ) ;
9028: LD_INT 35
9030: PPUSH
9031: CALL_OW 68
// Say ( Heike , DH-1-trap ) ;
9035: LD_EXP 23
9039: PPUSH
9040: LD_STRING DH-1-trap
9042: PPUSH
9043: CALL_OW 88
// trap := 0 ;
9047: LD_ADDR_EXP 17
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// end ; DialogueOff ;
9055: CALL_OW 7
// end ; 2 :
9059: GO 9079
9061: LD_INT 2
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9078
9069: POP
// begin DialogueOff ;
9070: CALL_OW 7
// exit ;
9074: GO 9972
// end ; end ;
9076: GO 9079
9078: POP
// if trap = 1 then
9079: LD_EXP 17
9083: PUSH
9084: LD_INT 1
9086: EQUAL
9087: IFFALSE 9541
// begin PlaceSeeing ( 64 , 32 , 2 , 8 ) ;
9089: LD_INT 64
9091: PPUSH
9092: LD_INT 32
9094: PPUSH
9095: LD_INT 2
9097: PPUSH
9098: LD_INT 8
9100: PPUSH
9101: CALL_OW 330
// CenterOnXY ( 64 , 32 ) ;
9105: LD_INT 64
9107: PPUSH
9108: LD_INT 32
9110: PPUSH
9111: CALL_OW 84
// tmp := [ ] ;
9115: LD_ADDR_VAR 0 3
9119: PUSH
9120: EMPTY
9121: ST_TO_ADDR
// k := 3 ;
9122: LD_ADDR_VAR 0 2
9126: PUSH
9127: LD_INT 3
9129: ST_TO_ADDR
// if usForces < 3 then
9130: LD_EXP 21
9134: PUSH
9135: LD_INT 3
9137: LESS
9138: IFFALSE 9150
// k := usForces ;
9140: LD_ADDR_VAR 0 2
9144: PUSH
9145: LD_EXP 21
9149: ST_TO_ADDR
// for i := 1 to k do
9150: LD_ADDR_VAR 0 1
9154: PUSH
9155: DOUBLE
9156: LD_INT 1
9158: DEC
9159: ST_TO_ADDR
9160: LD_VAR 0 2
9164: PUSH
9165: FOR_TO
9166: IFFALSE 9221
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9168: LD_ADDR_VAR 0 3
9172: PUSH
9173: LD_VAR 0 3
9177: PPUSH
9178: LD_VAR 0 3
9182: PUSH
9183: LD_INT 1
9185: PLUS
9186: PPUSH
9187: LD_EXP 21
9191: PUSH
9192: LD_INT 1
9194: ARRAY
9195: PPUSH
9196: CALL_OW 1
9200: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9201: LD_ADDR_EXP 21
9205: PUSH
9206: LD_EXP 21
9210: PPUSH
9211: LD_INT 1
9213: PPUSH
9214: CALL_OW 3
9218: ST_TO_ADDR
// end ;
9219: GO 9165
9221: POP
9222: POP
// usPatrol := tmp ;
9223: LD_ADDR_EXP 16
9227: PUSH
9228: LD_VAR 0 3
9232: ST_TO_ADDR
// for i in tmp do
9233: LD_ADDR_VAR 0 1
9237: PUSH
9238: LD_VAR 0 3
9242: PUSH
9243: FOR_IN
9244: IFFALSE 9374
// begin if IsInUnit ( i ) then
9246: LD_VAR 0 1
9250: PPUSH
9251: CALL_OW 310
9255: IFFALSE 9266
// ComExitBuilding ( i ) ;
9257: LD_VAR 0 1
9261: PPUSH
9262: CALL_OW 122
// AddComAgressiveMove ( i , 63 , 31 ) ;
9266: LD_VAR 0 1
9270: PPUSH
9271: LD_INT 63
9273: PPUSH
9274: LD_INT 31
9276: PPUSH
9277: CALL_OW 174
// AddComWait ( i , 0 0$2 ) ;
9281: LD_VAR 0 1
9285: PPUSH
9286: LD_INT 70
9288: PPUSH
9289: CALL_OW 202
// AddComAgressiveMove ( i , 103 , 43 ) ;
9293: LD_VAR 0 1
9297: PPUSH
9298: LD_INT 103
9300: PPUSH
9301: LD_INT 43
9303: PPUSH
9304: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9308: LD_VAR 0 1
9312: PPUSH
9313: LD_INT 105
9315: PPUSH
9316: CALL_OW 202
// if Difficulty > 1 then
9320: LD_OWVAR 67
9324: PUSH
9325: LD_INT 1
9327: GREATER
9328: IFFALSE 9345
// AddComAgressiveMove ( i , 114 , 69 ) ;
9330: LD_VAR 0 1
9334: PPUSH
9335: LD_INT 114
9337: PPUSH
9338: LD_INT 69
9340: PPUSH
9341: CALL_OW 174
// AddComWait ( i , 0 0$3 ) ;
9345: LD_VAR 0 1
9349: PPUSH
9350: LD_INT 105
9352: PPUSH
9353: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9357: LD_VAR 0 1
9361: PPUSH
9362: LD_INT 42
9364: PPUSH
9365: LD_INT 20
9367: PPUSH
9368: CALL_OW 174
// end ;
9372: GO 9243
9374: POP
9375: POP
// wait ( 0 0$8 ) ;
9376: LD_INT 280
9378: PPUSH
9379: CALL_OW 67
// RemoveSeeing ( 64 , 32 , 2 ) ;
9383: LD_INT 64
9385: PPUSH
9386: LD_INT 32
9388: PPUSH
9389: LD_INT 2
9391: PPUSH
9392: CALL_OW 331
// repeat wait ( 0 0$1 ) ;
9396: LD_INT 35
9398: PPUSH
9399: CALL_OW 67
// for i in tmp do
9403: LD_ADDR_VAR 0 1
9407: PUSH
9408: LD_VAR 0 3
9412: PUSH
9413: FOR_IN
9414: IFFALSE 9445
// if IsDead ( i ) then
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 301
9425: IFFALSE 9443
// tmp := tmp diff i ;
9427: LD_ADDR_VAR 0 3
9431: PUSH
9432: LD_VAR 0 3
9436: PUSH
9437: LD_VAR 0 1
9441: DIFF
9442: ST_TO_ADDR
9443: GO 9413
9445: POP
9446: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9447: LD_VAR 0 3
9451: NOT
9452: IFTRUE 9498
9454: PUSH
9455: LD_VAR 0 3
9459: PPUSH
9460: LD_INT 95
9462: PUSH
9463: LD_INT 7
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PUSH
9470: LD_INT 3
9472: PUSH
9473: LD_INT 60
9475: PUSH
9476: EMPTY
9477: LIST
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PPUSH
9487: CALL_OW 72
9491: PUSH
9492: LD_VAR 0 3
9496: EQUAL
9497: OR
9498: IFFALSE 9396
// if tmp then
9500: LD_VAR 0 3
9504: IFFALSE 9531
// begin usPatrol := [ ] ;
9506: LD_ADDR_EXP 16
9510: PUSH
9511: EMPTY
9512: ST_TO_ADDR
// usForces := usForces union tmp ;
9513: LD_ADDR_EXP 21
9517: PUSH
9518: LD_EXP 21
9522: PUSH
9523: LD_VAR 0 3
9527: UNION
9528: ST_TO_ADDR
// end else
9529: GO 9539
// trickyMove := true ;
9531: LD_ADDR_EXP 15
9535: PUSH
9536: LD_INT 1
9538: ST_TO_ADDR
// end else
9539: GO 9972
// begin tmp := [ ] ;
9541: LD_ADDR_VAR 0 3
9545: PUSH
9546: EMPTY
9547: ST_TO_ADDR
// k := 4 ;
9548: LD_ADDR_VAR 0 2
9552: PUSH
9553: LD_INT 4
9555: ST_TO_ADDR
// if usForces < 4 then
9556: LD_EXP 21
9560: PUSH
9561: LD_INT 4
9563: LESS
9564: IFFALSE 9576
// k := usForces ;
9566: LD_ADDR_VAR 0 2
9570: PUSH
9571: LD_EXP 21
9575: ST_TO_ADDR
// for i := 1 to k do
9576: LD_ADDR_VAR 0 1
9580: PUSH
9581: DOUBLE
9582: LD_INT 1
9584: DEC
9585: ST_TO_ADDR
9586: LD_VAR 0 2
9590: PUSH
9591: FOR_TO
9592: IFFALSE 9647
// begin tmp := Replace ( tmp , tmp + 1 , usForces [ 1 ] ) ;
9594: LD_ADDR_VAR 0 3
9598: PUSH
9599: LD_VAR 0 3
9603: PPUSH
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 1
9611: PLUS
9612: PPUSH
9613: LD_EXP 21
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: CALL_OW 1
9626: ST_TO_ADDR
// usForces := Delete ( usForces , 1 ) ;
9627: LD_ADDR_EXP 21
9631: PUSH
9632: LD_EXP 21
9636: PPUSH
9637: LD_INT 1
9639: PPUSH
9640: CALL_OW 3
9644: ST_TO_ADDR
// end ;
9645: GO 9591
9647: POP
9648: POP
// if Lynch then
9649: LD_EXP 20
9653: IFFALSE 9671
// tmp := tmp ^ Lynch ;
9655: LD_ADDR_VAR 0 3
9659: PUSH
9660: LD_VAR 0 3
9664: PUSH
9665: LD_EXP 20
9669: ADD
9670: ST_TO_ADDR
// usPatrol := tmp ;
9671: LD_ADDR_EXP 16
9675: PUSH
9676: LD_VAR 0 3
9680: ST_TO_ADDR
// for i in tmp do
9681: LD_ADDR_VAR 0 1
9685: PUSH
9686: LD_VAR 0 3
9690: PUSH
9691: FOR_IN
9692: IFFALSE 9785
// begin if IsInUnit ( i ) then
9694: LD_VAR 0 1
9698: PPUSH
9699: CALL_OW 310
9703: IFFALSE 9714
// ComExitBuilding ( i ) ;
9705: LD_VAR 0 1
9709: PPUSH
9710: CALL_OW 122
// AddComAgressiveMove ( i , 69 , 15 ) ;
9714: LD_VAR 0 1
9718: PPUSH
9719: LD_INT 69
9721: PPUSH
9722: LD_INT 15
9724: PPUSH
9725: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9729: LD_VAR 0 1
9733: PPUSH
9734: LD_INT 700
9736: PPUSH
9737: CALL_OW 202
// AddComAgressiveMove ( i , 55 , 43 ) ;
9741: LD_VAR 0 1
9745: PPUSH
9746: LD_INT 55
9748: PPUSH
9749: LD_INT 43
9751: PPUSH
9752: CALL_OW 174
// AddComWait ( i , 0 0$20 ) ;
9756: LD_VAR 0 1
9760: PPUSH
9761: LD_INT 700
9763: PPUSH
9764: CALL_OW 202
// AddComAgressiveMove ( i , 42 , 20 ) ;
9768: LD_VAR 0 1
9772: PPUSH
9773: LD_INT 42
9775: PPUSH
9776: LD_INT 20
9778: PPUSH
9779: CALL_OW 174
// end ;
9783: GO 9691
9785: POP
9786: POP
// repeat wait ( 0 0$1 ) ;
9787: LD_INT 35
9789: PPUSH
9790: CALL_OW 67
// for i in tmp do
9794: LD_ADDR_VAR 0 1
9798: PUSH
9799: LD_VAR 0 3
9803: PUSH
9804: FOR_IN
9805: IFFALSE 9836
// if IsDead ( i ) then
9807: LD_VAR 0 1
9811: PPUSH
9812: CALL_OW 301
9816: IFFALSE 9834
// tmp := tmp diff i ;
9818: LD_ADDR_VAR 0 3
9822: PUSH
9823: LD_VAR 0 3
9827: PUSH
9828: LD_VAR 0 1
9832: DIFF
9833: ST_TO_ADDR
9834: GO 9804
9836: POP
9837: POP
// until not tmp or UnitFilter ( tmp , [ [ f_inarea , deltaBaseArea ] , [ f_not , [ f_hastask ] ] ] ) = tmp ;
9838: LD_VAR 0 3
9842: NOT
9843: IFTRUE 9889
9845: PUSH
9846: LD_VAR 0 3
9850: PPUSH
9851: LD_INT 95
9853: PUSH
9854: LD_INT 7
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 3
9863: PUSH
9864: LD_INT 60
9866: PUSH
9867: EMPTY
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PPUSH
9878: CALL_OW 72
9882: PUSH
9883: LD_VAR 0 3
9887: EQUAL
9888: OR
9889: IFFALSE 9787
// if not tmp then
9891: LD_VAR 0 3
9895: NOT
9896: IFFALSE 9908
// trickyMove := true else
9898: LD_ADDR_EXP 15
9902: PUSH
9903: LD_INT 1
9905: ST_TO_ADDR
9906: GO 9915
// usPatrol := [ ] ;
9908: LD_ADDR_EXP 16
9912: PUSH
9913: EMPTY
9914: ST_TO_ADDR
// if tmp diff Lynch then
9915: LD_VAR 0 3
9919: PUSH
9920: LD_EXP 20
9924: DIFF
9925: IFFALSE 9949
// usForces := usForces union ( tmp diff Lynch ) ;
9927: LD_ADDR_EXP 21
9931: PUSH
9932: LD_EXP 21
9936: PUSH
9937: LD_VAR 0 3
9941: PUSH
9942: LD_EXP 20
9946: DIFF
9947: UNION
9948: ST_TO_ADDR
// if IsOk ( Lynch ) then
9949: LD_EXP 20
9953: PPUSH
9954: CALL_OW 302
9958: IFFALSE 9972
// ComEnterUnit ( Lynch , Delta ) ;
9960: LD_EXP 20
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: CALL_OW 120
// end ; end ; end ;
9972: PPOPN 3
9974: END
// every 0 0$1 trigger trickyMove do
9975: LD_EXP 15
9979: IFFALSE 9991
9981: GO 9983
9983: DISABLE
// SetAchievement ( ACH_TRAP ) ;
9984: LD_STRING ACH_TRAP
9986: PPUSH
9987: CALL_OW 543
9991: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ) do
9992: LD_INT 22
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: LD_INT 23
10004: PUSH
10005: LD_INT 1
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 21
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: PPUSH
10027: CALL_OW 69
10031: IFFALSE 10043
10033: GO 10035
10035: DISABLE
// SetAchievement ( ACH_SCRAP ) ;
10036: LD_STRING ACH_SCRAP
10038: PPUSH
10039: CALL_OW 543
10043: END
// every 0 0$1 trigger UnitFilter ( usPatrol , [ f_see , 2 ] ) and See ( 1 , Heike ) do
10044: LD_EXP 16
10048: PPUSH
10049: LD_INT 101
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 72
10063: IFFALSE 10079
10065: PUSH
10066: LD_INT 1
10068: PPUSH
10069: LD_EXP 23
10073: PPUSH
10074: CALL_OW 292
10078: AND
10079: IFFALSE 10214
10081: GO 10083
10083: DISABLE
// begin if not trap then
10084: LD_EXP 17
10088: NOT
10089: IFFALSE 10117
// begin Say ( Heike , DH-2-trap ) ;
10091: LD_EXP 23
10095: PPUSH
10096: LD_STRING DH-2-trap
10098: PPUSH
10099: CALL_OW 88
// Say ( Mike , DM-2-trap ) ;
10103: LD_EXP 25
10107: PPUSH
10108: LD_STRING DM-2-trap
10110: PPUSH
10111: CALL_OW 88
// end else
10115: GO 10129
// begin Say ( Heike , DH-1-trap-a ) ;
10117: LD_EXP 23
10121: PPUSH
10122: LD_STRING DH-1-trap-a
10124: PPUSH
10125: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
10129: LD_INT 35
10131: PPUSH
10132: CALL_OW 67
// until trickyMove ;
10136: LD_EXP 15
10140: IFFALSE 10129
// Say ( Heike , DH-3-trap ) ;
10142: LD_EXP 23
10146: PPUSH
10147: LD_STRING DH-3-trap
10149: PPUSH
10150: CALL_OW 88
// if IsOk ( Givi ) and IsOk ( Kaia ) then
10154: LD_EXP 24
10158: PPUSH
10159: CALL_OW 302
10163: IFFALSE 10176
10165: PUSH
10166: LD_EXP 28
10170: PPUSH
10171: CALL_OW 302
10175: AND
10176: IFFALSE 10214
// begin Say ( Givi , DG-3-trap ) ;
10178: LD_EXP 24
10182: PPUSH
10183: LD_STRING DG-3-trap
10185: PPUSH
10186: CALL_OW 88
// Say ( Kaia , DK-3-trap ) ;
10190: LD_EXP 28
10194: PPUSH
10195: LD_STRING DK-3-trap
10197: PPUSH
10198: CALL_OW 88
// Say ( Givi , DG-4-trap ) ;
10202: LD_EXP 24
10206: PPUSH
10207: LD_STRING DG-4-trap
10209: PPUSH
10210: CALL_OW 88
// end ; end ;
10214: END
// every 0 0$1 trigger GetSide ( Delta ) = 2 and attackDeltaAllowed do var i , tmp ;
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 255
10222: PUSH
10223: LD_INT 2
10225: EQUAL
10226: IFFALSE 10234
10228: PUSH
10229: LD_EXP 14
10233: AND
10234: IFFALSE 10393
10236: GO 10238
10238: DISABLE
10239: LD_INT 0
10241: PPUSH
10242: PPUSH
// begin if not IsOk ( Kaia ) then
10243: LD_EXP 28
10247: PPUSH
10248: CALL_OW 302
10252: NOT
10253: IFFALSE 10257
// exit ;
10255: GO 10393
// if tick < 5 5$00 then
10257: LD_OWVAR 1
10261: PUSH
10262: LD_INT 10500
10264: LESS
10265: IFFALSE 10274
// SetAchievement ( ACH_DELTA ) ;
10267: LD_STRING ACH_DELTA
10269: PPUSH
10270: CALL_OW 543
// Say ( Kaia , DK-1-capture ) ;
10274: LD_EXP 28
10278: PPUSH
10279: LD_STRING DK-1-capture
10281: PPUSH
10282: CALL_OW 88
// Say ( Heike , DH-1-capture ) ;
10286: LD_EXP 23
10290: PPUSH
10291: LD_STRING DH-1-capture
10293: PPUSH
10294: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
10298: LD_ADDR_VAR 0 2
10302: PUSH
10303: LD_INT 22
10305: PUSH
10306: LD_INT 1
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 25
10315: PUSH
10316: LD_INT 1
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: PPUSH
10327: CALL_OW 69
10331: ST_TO_ADDR
// if not tmp then
10332: LD_VAR 0 2
10336: NOT
10337: IFFALSE 10341
// exit ;
10339: GO 10393
// for i in tmp do
10341: LD_ADDR_VAR 0 1
10345: PUSH
10346: LD_VAR 0 2
10350: PUSH
10351: FOR_IN
10352: IFFALSE 10391
// begin if IsInUnit ( i ) then
10354: LD_VAR 0 1
10358: PPUSH
10359: CALL_OW 310
10363: IFFALSE 10374
// ComExitBuilding ( i ) ;
10365: LD_VAR 0 1
10369: PPUSH
10370: CALL_OW 122
// AddComAgressiveMove ( i , 38 , 23 ) ;
10374: LD_VAR 0 1
10378: PPUSH
10379: LD_INT 38
10381: PPUSH
10382: LD_INT 23
10384: PPUSH
10385: CALL_OW 174
// end ;
10389: GO 10351
10391: POP
10392: POP
// end ;
10393: PPOPN 2
10395: END
// every 0 0$1 trigger GetSide ( usLab ) = 2 and attackDeltaAllowed do
10396: LD_INT 3
10398: PPUSH
10399: CALL_OW 255
10403: PUSH
10404: LD_INT 2
10406: EQUAL
10407: IFFALSE 10415
10409: PUSH
10410: LD_EXP 14
10414: AND
10415: IFFALSE 10460
10417: GO 10419
10419: DISABLE
// begin SetTech ( tech_ApeLang , 2 , state_enabled ) ;
10420: LD_INT 1
10422: PPUSH
10423: LD_INT 2
10425: PPUSH
10426: LD_INT 1
10428: PPUSH
10429: CALL_OW 322
// DialogueOn ;
10433: CALL_OW 6
// Say ( Aviradze , DA-1-capture ) ;
10437: LD_EXP 27
10441: PPUSH
10442: LD_STRING DA-1-capture
10444: PPUSH
10445: CALL_OW 88
// DialogueOff ;
10449: CALL_OW 7
// ChangeMissionObjectives ( OTame ) ;
10453: LD_STRING OTame
10455: PPUSH
10456: CALL_OW 337
// end ;
10460: END
// every 0 0$1 trigger GetTech ( tech_ApeLang , 2 ) = state_researched and attackDeltaAllowed do
10461: LD_INT 1
10463: PPUSH
10464: LD_INT 2
10466: PPUSH
10467: CALL_OW 321
10471: PUSH
10472: LD_INT 2
10474: EQUAL
10475: IFFALSE 10483
10477: PUSH
10478: LD_EXP 14
10482: AND
10483: IFFALSE 10634
10485: GO 10487
10487: DISABLE
// begin DialogueOn ;
10488: CALL_OW 6
// Say ( Aviradze , DA-1-ape ) ;
10492: LD_EXP 27
10496: PPUSH
10497: LD_STRING DA-1-ape
10499: PPUSH
10500: CALL_OW 88
// Say ( Heike , DH-1-ape ) ;
10504: LD_EXP 23
10508: PPUSH
10509: LD_STRING DH-1-ape
10511: PPUSH
10512: CALL_OW 88
// Say ( Aviradze , DA-2-ape ) ;
10516: LD_EXP 27
10520: PPUSH
10521: LD_STRING DA-2-ape
10523: PPUSH
10524: CALL_OW 88
// Say ( Aviradze , DA-3-ape ) ;
10528: LD_EXP 27
10532: PPUSH
10533: LD_STRING DA-3-ape
10535: PPUSH
10536: CALL_OW 88
// Say ( Heike , DH-3-ape ) ;
10540: LD_EXP 23
10544: PPUSH
10545: LD_STRING DH-3-ape
10547: PPUSH
10548: CALL_OW 88
// DialogueOff ;
10552: CALL_OW 7
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 then
10556: LD_INT 22
10558: PUSH
10559: LD_INT 0
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 12
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: PPUSH
10580: CALL_OW 69
10584: PUSH
10585: LD_INT 0
10587: EQUAL
10588: IFFALSE 10600
// SpawnApeman ( forest , 2 ) ;
10590: LD_INT 1
10592: PPUSH
10593: LD_INT 2
10595: PPUSH
10596: CALL 409 0 2
// repeat wait ( 0 0$1 ) ;
10600: LD_INT 35
10602: PPUSH
10603: CALL_OW 67
// until FilterAllUnits ( [ f_class , class_apeman ] ) = 0 ;
10607: LD_INT 25
10609: PUSH
10610: LD_INT 12
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PPUSH
10617: CALL_OW 69
10621: PUSH
10622: LD_INT 0
10624: EQUAL
10625: IFFALSE 10600
// YouLost ( Ape ) ;
10627: LD_STRING Ape
10629: PPUSH
10630: CALL_OW 104
// end ;
10634: END
// every 0 0$5 trigger lostCounter >= [ 3 , 2 , 2 , 2 ] [ Difficulty ] do
10635: LD_EXP 18
10639: PUSH
10640: LD_INT 3
10642: PUSH
10643: LD_INT 2
10645: PUSH
10646: LD_INT 2
10648: PUSH
10649: LD_INT 2
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: PUSH
10658: LD_OWVAR 67
10662: ARRAY
10663: GREATEREQUAL
10664: IFFALSE 10715
10666: GO 10668
10668: DISABLE
// begin wait ( 0 0$5 ) ;
10669: LD_INT 175
10671: PPUSH
10672: CALL_OW 67
// DialogueOn ;
10676: CALL_OW 6
// Say ( Aviradze , DA-1-failure ) ;
10680: LD_EXP 27
10684: PPUSH
10685: LD_STRING DA-1-failure
10687: PPUSH
10688: CALL_OW 88
// Say ( Aviradze , DA-2-failure ) ;
10692: LD_EXP 27
10696: PPUSH
10697: LD_STRING DA-2-failure
10699: PPUSH
10700: CALL_OW 88
// YouLost ( Failure ) ;
10704: LD_STRING Failure
10706: PPUSH
10707: CALL_OW 104
// DialogueOff ;
10711: CALL_OW 7
// end ;
10715: END
// every 0 0$1 trigger GetLives ( Kaia ) < 3 do
10716: LD_EXP 28
10720: PPUSH
10721: CALL_OW 256
10725: PUSH
10726: LD_INT 3
10728: LESS
10729: IFFALSE 10862
10731: GO 10733
10733: DISABLE
// begin DialogueOn ;
10734: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
10738: LD_EXP 28
10742: PPUSH
10743: CALL_OW 87
// ForceSay ( Kaia , DK-Kaiaout-1 ) ;
10747: LD_EXP 28
10751: PPUSH
10752: LD_STRING DK-Kaiaout-1
10754: PPUSH
10755: CALL_OW 91
// Say ( Heike , DH-Kaiaout-2 ) ;
10759: LD_EXP 23
10763: PPUSH
10764: LD_STRING DH-Kaiaout-2
10766: PPUSH
10767: CALL_OW 88
// Say ( Givi , DG-Kaiaout-3 ) ;
10771: LD_EXP 24
10775: PPUSH
10776: LD_STRING DG-Kaiaout-3
10778: PPUSH
10779: CALL_OW 88
// Say ( Heike , DH-Kaiaout-4 ) ;
10783: LD_EXP 23
10787: PPUSH
10788: LD_STRING DH-Kaiaout-4
10790: PPUSH
10791: CALL_OW 88
// if Givi then
10795: LD_EXP 24
10799: IFFALSE 10849
// begin Say ( Givi , DG-Kaiaout-5 ) ;
10801: LD_EXP 24
10805: PPUSH
10806: LD_STRING DG-Kaiaout-5
10808: PPUSH
10809: CALL_OW 88
// Say ( Heike , DH-Kaiaout-6 ) ;
10813: LD_EXP 23
10817: PPUSH
10818: LD_STRING DH-Kaiaout-6
10820: PPUSH
10821: CALL_OW 88
// Say ( Givi , DG-Kaiaout-7 ) ;
10825: LD_EXP 24
10829: PPUSH
10830: LD_STRING DG-Kaiaout-7
10832: PPUSH
10833: CALL_OW 88
// Say ( Heike , DH-Kaiaout-8 ) ;
10837: LD_EXP 23
10841: PPUSH
10842: LD_STRING DH-Kaiaout-8
10844: PPUSH
10845: CALL_OW 88
// end ; DialogueOff ;
10849: CALL_OW 7
// KillUnit ( Kaia ) ;
10853: LD_EXP 28
10857: PPUSH
10858: CALL_OW 66
// end ;
10862: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) and IsOk ( Aviradze ) and GetSide ( Aviradze ) = 2 do var i , tmp ;
10863: LD_INT 22
10865: PUSH
10866: LD_INT 2
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 23
10875: PUSH
10876: LD_INT 0
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: PPUSH
10887: CALL_OW 69
10891: IFFALSE 10904
10893: PUSH
10894: LD_EXP 27
10898: PPUSH
10899: CALL_OW 302
10903: AND
10904: IFFALSE 10921
10906: PUSH
10907: LD_EXP 27
10911: PPUSH
10912: CALL_OW 255
10916: PUSH
10917: LD_INT 2
10919: EQUAL
10920: AND
10921: IFFALSE 11996
10923: GO 10925
10925: DISABLE
10926: LD_INT 0
10928: PPUSH
10929: PPUSH
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) then
10930: LD_INT 22
10932: PUSH
10933: LD_INT 1
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 2
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 34
10955: PUSH
10956: LD_INT 4
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PPUSH
10972: CALL_OW 69
10976: IFFALSE 11157
// begin Query ( QEnemyInSight ) ;
10978: LD_STRING QEnemyInSight
10980: PPUSH
10981: CALL_OW 97
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) ;
10985: LD_ADDR_VAR 0 2
10989: PUSH
10990: LD_INT 22
10992: PUSH
10993: LD_INT 1
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: LD_INT 25
11005: PUSH
11006: LD_INT 1
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 34
11015: PUSH
11016: LD_INT 4
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: PPUSH
11032: CALL_OW 69
11036: ST_TO_ADDR
// for i in tmp do
11037: LD_ADDR_VAR 0 1
11041: PUSH
11042: LD_VAR 0 2
11046: PUSH
11047: FOR_IN
11048: IFFALSE 11067
// ComAgressiveMove ( i , 36 , 22 ) ;
11050: LD_VAR 0 1
11054: PPUSH
11055: LD_INT 36
11057: PPUSH
11058: LD_INT 22
11060: PPUSH
11061: CALL_OW 114
11065: GO 11047
11067: POP
11068: POP
// repeat wait ( 0 0$1 ) ;
11069: LD_INT 35
11071: PPUSH
11072: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_weapon , us_gatling_gun ] ] ] ) and FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
11076: LD_INT 22
11078: PUSH
11079: LD_INT 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 2
11088: PUSH
11089: LD_INT 25
11091: PUSH
11092: LD_INT 1
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 34
11101: PUSH
11102: LD_INT 4
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PPUSH
11118: CALL_OW 69
11122: NOT
11123: IFFALSE 11155
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 2
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 23
11138: PUSH
11139: LD_INT 0
11141: PUSH
11142: EMPTY
11143: LIST
11144: LIST
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PPUSH
11150: CALL_OW 69
11154: AND
11155: IFFALSE 11069
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
11157: LD_ADDR_VAR 0 2
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_INT 2
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 23
11174: PUSH
11175: LD_INT 0
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PPUSH
11186: CALL_OW 69
11190: ST_TO_ADDR
// InGameOn ;
11191: CALL_OW 8
// if tick <= 10 10$00 then
11195: LD_OWVAR 1
11199: PUSH
11200: LD_INT 21000
11202: LESSEQUAL
11203: IFFALSE 11212
// SetAchievement ( ACH_HSPEED_2 ) ;
11205: LD_STRING ACH_HSPEED_2
11207: PPUSH
11208: CALL_OW 543
// CenterNowOnUnits ( tmp ) ;
11212: LD_VAR 0 2
11216: PPUSH
11217: CALL_OW 87
// ComMoveUnit ( tmp , Aviradze ) ;
11221: LD_VAR 0 2
11225: PPUSH
11226: LD_EXP 27
11230: PPUSH
11231: CALL_OW 112
// ComTurnUnit ( Aviradze , tmp ) ;
11235: LD_EXP 27
11239: PPUSH
11240: LD_VAR 0 2
11244: PPUSH
11245: CALL_OW 119
// wait ( 0 0$1 ) ;
11249: LD_INT 35
11251: PPUSH
11252: CALL_OW 67
// Say ( Aviradze , DA-1-tame-a ) ;
11256: LD_EXP 27
11260: PPUSH
11261: LD_STRING DA-1-tame-a
11263: PPUSH
11264: CALL_OW 88
// if IsOk ( Mike ) then
11268: LD_EXP 25
11272: PPUSH
11273: CALL_OW 302
11277: IFFALSE 11315
// begin Say ( Mike , DM-1-tame-a ) ;
11279: LD_EXP 25
11283: PPUSH
11284: LD_STRING DM-1-tame-a
11286: PPUSH
11287: CALL_OW 88
// Say ( Sophia , DS-1-tame-a ) ;
11291: LD_EXP 29
11295: PPUSH
11296: LD_STRING DS-1-tame-a
11298: PPUSH
11299: CALL_OW 88
// Say ( Mike , DM-2-tame-a ) ;
11303: LD_EXP 25
11307: PPUSH
11308: LD_STRING DM-2-tame-a
11310: PPUSH
11311: CALL_OW 88
// end ; wait ( 0 0$3 ) ;
11315: LD_INT 105
11317: PPUSH
11318: CALL_OW 67
// PrepareFarmer ;
11322: CALL 12679 0 0
// CenterOnUnits ( Farmer ) ;
11326: LD_EXP 31
11330: PPUSH
11331: CALL_OW 85
// ComMoveXY ( Farmer , 105 , 59 ) ;
11335: LD_EXP 31
11339: PPUSH
11340: LD_INT 105
11342: PPUSH
11343: LD_INT 59
11345: PPUSH
11346: CALL_OW 111
// AddComHold ( Farmer ) ;
11350: LD_EXP 31
11354: PPUSH
11355: CALL_OW 200
// SayRadio ( Farmer , DF-1-end ) ;
11359: LD_EXP 31
11363: PPUSH
11364: LD_STRING DF-1-end
11366: PPUSH
11367: CALL_OW 94
// Say ( Aviradze , DA-1-end ) ;
11371: LD_EXP 27
11375: PPUSH
11376: LD_STRING DA-1-end
11378: PPUSH
11379: CALL_OW 88
// SayRadio ( Farmer , DF-2-end ) ;
11383: LD_EXP 31
11387: PPUSH
11388: LD_STRING DF-2-end
11390: PPUSH
11391: CALL_OW 94
// Say ( Aviradze , DA-2-end ) ;
11395: LD_EXP 27
11399: PPUSH
11400: LD_STRING DA-2-end
11402: PPUSH
11403: CALL_OW 88
// SayRadio ( Farmer , DF-3-end ) ;
11407: LD_EXP 31
11411: PPUSH
11412: LD_STRING DF-3-end
11414: PPUSH
11415: CALL_OW 94
// Say ( Heike , DH-3-end ) ;
11419: LD_EXP 23
11423: PPUSH
11424: LD_STRING DH-3-end
11426: PPUSH
11427: CALL_OW 88
// SayRadio ( Farmer , DF-4-end ) ;
11431: LD_EXP 31
11435: PPUSH
11436: LD_STRING DF-4-end
11438: PPUSH
11439: CALL_OW 94
// if tick <= [ 25 25$00 , 22 22$30 , 20 20$00 , 15 15$00 ] [ Difficulty ] then
11443: LD_OWVAR 1
11447: PUSH
11448: LD_INT 52500
11450: PUSH
11451: LD_INT 47250
11453: PUSH
11454: LD_INT 42000
11456: PUSH
11457: LD_INT 31500
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: LD_OWVAR 67
11470: ARRAY
11471: LESSEQUAL
11472: IFFALSE 11486
// AddMedal ( med1 , 1 ) else
11474: LD_STRING med1
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: CALL_OW 101
11484: GO 11497
// AddMedal ( med1 , - 1 ) ;
11486: LD_STRING med1
11488: PPUSH
11489: LD_INT 1
11491: NEG
11492: PPUSH
11493: CALL_OW 101
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) = 0 and not gladstoneEscaped then
11497: LD_INT 22
11499: PUSH
11500: LD_INT 1
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 25
11509: PUSH
11510: LD_INT 4
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: PUSH
11526: LD_INT 0
11528: EQUAL
11529: IFFALSE 11538
11531: PUSH
11532: LD_EXP 12
11536: NOT
11537: AND
11538: IFFALSE 11552
// AddMedal ( med2 , 1 ) else
11540: LD_STRING med2
11542: PPUSH
11543: LD_INT 1
11545: PPUSH
11546: CALL_OW 101
11550: GO 11563
// AddMedal ( med2 , - 1 ) ;
11552: LD_STRING med2
11554: PPUSH
11555: LD_INT 1
11557: NEG
11558: PPUSH
11559: CALL_OW 101
// if trickyMove then
11563: LD_EXP 15
11567: IFFALSE 11581
// AddMedal ( med3 , 1 ) else
11569: LD_STRING med3
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL_OW 101
11579: GO 11611
// if spottedBeforeRadio then
11581: LD_EXP 6
11585: IFFALSE 11600
// AddMedal ( med3 , - 2 ) else
11587: LD_STRING med3
11589: PPUSH
11590: LD_INT 2
11592: NEG
11593: PPUSH
11594: CALL_OW 101
11598: GO 11611
// AddMedal ( med3 , - 1 ) ;
11600: LD_STRING med3
11602: PPUSH
11603: LD_INT 1
11605: NEG
11606: PPUSH
11607: CALL_OW 101
// GiveMedals ( MAIN ) ;
11611: LD_STRING MAIN
11613: PPUSH
11614: CALL_OW 102
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 02_ape ) ;
11618: LD_INT 22
11620: PUSH
11621: LD_INT 2
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 23
11630: PUSH
11631: LD_INT 0
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: PPUSH
11642: CALL_OW 69
11646: PPUSH
11647: LD_STRING 02_ape
11649: PPUSH
11650: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) ;
11654: LD_ADDR_VAR 0 2
11658: PUSH
11659: LD_INT 22
11661: PUSH
11662: LD_INT 2
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 23
11671: PUSH
11672: LD_INT 2
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 21
11681: PUSH
11682: LD_INT 1
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: PPUSH
11694: CALL_OW 69
11698: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11699: LD_VAR 0 2
11703: PPUSH
11704: CALL_OW 43
// SaveCharacters ( Heike , 02_Heike ) ;
11708: LD_EXP 23
11712: PPUSH
11713: LD_STRING 02_Heike
11715: PPUSH
11716: CALL_OW 38
// SaveCharacters ( Aviradze , 02_Aviradze ) ;
11720: LD_EXP 27
11724: PPUSH
11725: LD_STRING 02_Aviradze
11727: PPUSH
11728: CALL_OW 38
// if Givi then
11732: LD_EXP 24
11736: IFFALSE 11750
// SaveCharacters ( Givi , 02_Givi ) ;
11738: LD_EXP 24
11742: PPUSH
11743: LD_STRING 02_Givi
11745: PPUSH
11746: CALL_OW 38
// if Mike then
11750: LD_EXP 25
11754: IFFALSE 11768
// SaveCharacters ( Mike , 02_Mike ) ;
11756: LD_EXP 25
11760: PPUSH
11761: LD_STRING 02_Mike
11763: PPUSH
11764: CALL_OW 38
// if Kamil then
11768: LD_EXP 26
11772: IFFALSE 11786
// SaveCharacters ( Kamil , 02_Kamil ) ;
11774: LD_EXP 26
11778: PPUSH
11779: LD_STRING 02_Kamil
11781: PPUSH
11782: CALL_OW 38
// if Kaia then
11786: LD_EXP 28
11790: IFFALSE 11804
// SaveCharacters ( Kaia , 02_Kaia ) ;
11792: LD_EXP 28
11796: PPUSH
11797: LD_STRING 02_Kaia
11799: PPUSH
11800: CALL_OW 38
// if Sophia then
11804: LD_EXP 29
11808: IFFALSE 11822
// SaveCharacters ( Sophia , 02_Sophia ) ;
11810: LD_EXP 29
11814: PPUSH
11815: LD_STRING 02_Sophia
11817: PPUSH
11818: CALL_OW 38
// if Markov then
11822: LD_EXP 30
11826: IFFALSE 11840
// SaveCharacters ( Markov , 02_Markov ) ;
11828: LD_EXP 30
11832: PPUSH
11833: LD_STRING 02_Markov
11835: PPUSH
11836: CALL_OW 38
// if tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] then
11840: LD_VAR 0 2
11844: PUSH
11845: LD_EXP 23
11849: PUSH
11850: LD_EXP 27
11854: PUSH
11855: LD_EXP 24
11859: PUSH
11860: LD_EXP 25
11864: PUSH
11865: LD_EXP 26
11869: PUSH
11870: LD_EXP 29
11874: PUSH
11875: LD_EXP 28
11879: PUSH
11880: LD_EXP 30
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: DIFF
11895: IFFALSE 11960
// SaveCharacters ( tmp diff [ Heike , Aviradze , Givi , Mike , Kamil , Sophia , Kaia , Markov ] , 02_others ) ;
11897: LD_VAR 0 2
11901: PUSH
11902: LD_EXP 23
11906: PUSH
11907: LD_EXP 27
11911: PUSH
11912: LD_EXP 24
11916: PUSH
11917: LD_EXP 25
11921: PUSH
11922: LD_EXP 26
11926: PUSH
11927: LD_EXP 29
11931: PUSH
11932: LD_EXP 28
11936: PUSH
11937: LD_EXP 30
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: DIFF
11952: PPUSH
11953: LD_STRING 02_others
11955: PPUSH
11956: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_KRAY) ) ;
11960: LD_STRING enableBioCharacter(BIO_KRAY)
11962: PPUSH
11963: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_AVIR) ) ;
11967: LD_STRING enableBioCharacter(BIO_AVIR)
11969: PPUSH
11970: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_SOPH) ) ;
11974: LD_STRING enableBioCharacter(BIO_SOPH)
11976: PPUSH
11977: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAMI) ) ;
11981: LD_STRING enableBioCharacter(BIO_KAMI)
11983: PPUSH
11984: CALL_OW 559
// YouWin ;
11988: CALL_OW 103
// InGameOff ;
11992: CALL_OW 9
// end ;
11996: PPOPN 2
11998: END
// every 0 0$1 trigger tick > timeUntilFarmer and aviradzeSpotted do
11999: LD_OWVAR 1
12003: PUSH
12004: LD_EXP 13
12008: GREATER
12009: IFFALSE 12017
12011: PUSH
12012: LD_EXP 4
12016: AND
12017: IFFALSE 12057
12019: GO 12021
12021: DISABLE
// begin InGameOn ;
12022: CALL_OW 8
// PrepareFarmer ;
12026: CALL 12679 0 0
// CenterNowOnUnits ( Farmer ) ;
12030: LD_EXP 31
12034: PPUSH
12035: CALL_OW 87
// wait ( 0 0$2 ) ;
12039: LD_INT 70
12041: PPUSH
12042: CALL_OW 67
// YouLost ( Farmer ) ;
12046: LD_STRING Farmer
12048: PPUSH
12049: CALL_OW 104
// InGameOff ;
12053: CALL_OW 9
// end ; end_of_file
12057: END
// export Heike , Givi , Mike , Kamil , Aviradze , Kaia , Sophia , Markov , Farmer ; export function PrepareArabian ; var un , veh ; begin
12058: LD_INT 0
12060: PPUSH
12061: PPUSH
12062: PPUSH
// uc_side := 2 ;
12063: LD_ADDR_OWVAR 20
12067: PUSH
12068: LD_INT 2
12070: ST_TO_ADDR
// uc_nation := 2 ;
12071: LD_ADDR_OWVAR 21
12075: PUSH
12076: LD_INT 2
12078: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
12079: LD_ADDR_EXP 23
12083: PUSH
12084: LD_STRING Heike
12086: PPUSH
12087: LD_EXP 1
12091: NOT
12092: PPUSH
12093: LD_EXP 2
12097: PPUSH
12098: CALL 35453 0 3
12102: ST_TO_ADDR
// PlaceUnitXY ( Heike , 83 , 72 , false ) ;
12103: LD_EXP 23
12107: PPUSH
12108: LD_INT 83
12110: PPUSH
12111: LD_INT 72
12113: PPUSH
12114: LD_INT 0
12116: PPUSH
12117: CALL_OW 48
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
12121: LD_ADDR_EXP 24
12125: PUSH
12126: LD_STRING Givi
12128: PPUSH
12129: LD_EXP 1
12133: NOT
12134: PPUSH
12135: LD_EXP 2
12139: PPUSH
12140: CALL 35453 0 3
12144: ST_TO_ADDR
// if Givi then
12145: LD_EXP 24
12149: IFFALSE 12169
// PlaceUnitXY ( Givi , 87 , 76 , false ) ;
12151: LD_EXP 24
12155: PPUSH
12156: LD_INT 87
12158: PPUSH
12159: LD_INT 76
12161: PPUSH
12162: LD_INT 0
12164: PPUSH
12165: CALL_OW 48
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
12169: LD_ADDR_EXP 25
12173: PUSH
12174: LD_STRING Mike
12176: PPUSH
12177: LD_EXP 1
12181: NOT
12182: PPUSH
12183: LD_EXP 2
12187: PPUSH
12188: CALL 35453 0 3
12192: ST_TO_ADDR
// if Mike then
12193: LD_EXP 25
12197: IFFALSE 12217
// PlaceUnitXY ( Mike , 84 , 76 , false ) ;
12199: LD_EXP 25
12203: PPUSH
12204: LD_INT 84
12206: PPUSH
12207: LD_INT 76
12209: PPUSH
12210: LD_INT 0
12212: PPUSH
12213: CALL_OW 48
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
12217: LD_ADDR_EXP 26
12221: PUSH
12222: LD_STRING Kamil
12224: PPUSH
12225: LD_EXP 1
12229: NOT
12230: PPUSH
12231: LD_EXP 2
12235: PPUSH
12236: CALL 35453 0 3
12240: ST_TO_ADDR
// if Kamil then
12241: LD_EXP 26
12245: IFFALSE 12265
// PlaceUnitXY ( Kamil , 85 , 78 , false ) ;
12247: LD_EXP 26
12251: PPUSH
12252: LD_INT 85
12254: PPUSH
12255: LD_INT 78
12257: PPUSH
12258: LD_INT 0
12260: PPUSH
12261: CALL_OW 48
// uc_side := 5 ;
12265: LD_ADDR_OWVAR 20
12269: PUSH
12270: LD_INT 5
12272: ST_TO_ADDR
// uc_nation := 2 ;
12273: LD_ADDR_OWVAR 21
12277: PUSH
12278: LD_INT 2
12280: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , false ,  ) ;
12281: LD_ADDR_EXP 27
12285: PUSH
12286: LD_STRING Aviradze
12288: PPUSH
12289: LD_INT 0
12291: PPUSH
12292: LD_STRING 
12294: PPUSH
12295: CALL 35453 0 3
12299: ST_TO_ADDR
// PlaceUnitXY ( Aviradze , 106 , 38 , false ) ;
12300: LD_EXP 27
12304: PPUSH
12305: LD_INT 106
12307: PPUSH
12308: LD_INT 38
12310: PPUSH
12311: LD_INT 0
12313: PPUSH
12314: CALL_OW 48
// ComTurnXY ( Aviradze , 103 , 38 ) ;
12318: LD_EXP 27
12322: PPUSH
12323: LD_INT 103
12325: PPUSH
12326: LD_INT 38
12328: PPUSH
12329: CALL_OW 118
// Kaia := PrepareUnit ( Kaia , false ,  ) ;
12333: LD_ADDR_EXP 28
12337: PUSH
12338: LD_STRING Kaia
12340: PPUSH
12341: LD_INT 0
12343: PPUSH
12344: LD_STRING 
12346: PPUSH
12347: CALL 35453 0 3
12351: ST_TO_ADDR
// PlaceUnitXY ( Kaia , 100 , 34 , false ) ;
12352: LD_EXP 28
12356: PPUSH
12357: LD_INT 100
12359: PPUSH
12360: LD_INT 34
12362: PPUSH
12363: LD_INT 0
12365: PPUSH
12366: CALL_OW 48
// ComTurnXY ( Kaia , 100 , 39 ) ;
12370: LD_EXP 28
12374: PPUSH
12375: LD_INT 100
12377: PPUSH
12378: LD_INT 39
12380: PPUSH
12381: CALL_OW 118
// Sophia := PrepareUnit ( Sophia , false ,  ) ;
12385: LD_ADDR_EXP 29
12389: PUSH
12390: LD_STRING Sophia
12392: PPUSH
12393: LD_INT 0
12395: PPUSH
12396: LD_STRING 
12398: PPUSH
12399: CALL 35453 0 3
12403: ST_TO_ADDR
// PlaceUnitXY ( Sophia , 109 , 50 , false ) ;
12404: LD_EXP 29
12408: PPUSH
12409: LD_INT 109
12411: PPUSH
12412: LD_INT 50
12414: PPUSH
12415: LD_INT 0
12417: PPUSH
12418: CALL_OW 48
// ComTurnXY ( Sophia , 100 , 39 ) ;
12422: LD_EXP 29
12426: PPUSH
12427: LD_INT 100
12429: PPUSH
12430: LD_INT 39
12432: PPUSH
12433: CALL_OW 118
// Markov := PrepareUnit ( Markov , false ,  ) ;
12437: LD_ADDR_EXP 30
12441: PUSH
12442: LD_STRING Markov
12444: PPUSH
12445: LD_INT 0
12447: PPUSH
12448: LD_STRING 
12450: PPUSH
12451: CALL 35453 0 3
12455: ST_TO_ADDR
// PrepareTank ( 5 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , [ 90 , 70 , 60 , 50 ] [ Difficulty ] ) ;
12456: LD_INT 5
12458: PPUSH
12459: LD_INT 3
12461: PPUSH
12462: LD_INT 21
12464: PPUSH
12465: LD_INT 1
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: LD_INT 42
12473: PPUSH
12474: LD_INT 90
12476: PUSH
12477: LD_INT 70
12479: PUSH
12480: LD_INT 60
12482: PUSH
12483: LD_INT 50
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_OWVAR 67
12496: ARRAY
12497: PPUSH
12498: CALL 241 0 7
// veh := CreateVehicle ;
12502: LD_ADDR_VAR 0 3
12506: PUSH
12507: CALL_OW 45
12511: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
12512: LD_VAR 0 3
12516: PPUSH
12517: LD_INT 4
12519: PPUSH
12520: CALL_OW 233
// PlaceUnitXY ( veh , 109 , 38 , false ) ;
12524: LD_VAR 0 3
12528: PPUSH
12529: LD_INT 109
12531: PPUSH
12532: LD_INT 38
12534: PPUSH
12535: LD_INT 0
12537: PPUSH
12538: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
12542: LD_EXP 30
12546: PPUSH
12547: LD_VAR 0 3
12551: PPUSH
12552: CALL_OW 52
// ComTurnUnit ( Kaia , Aviradze ) ;
12556: LD_EXP 28
12560: PPUSH
12561: LD_EXP 27
12565: PPUSH
12566: CALL_OW 119
// ComTurnUnit ( Aviradze , Kaia ) ;
12570: LD_EXP 27
12574: PPUSH
12575: LD_EXP 28
12579: PPUSH
12580: CALL_OW 119
// if not Givi or not Mike then
12584: LD_EXP 24
12588: NOT
12589: IFTRUE 12598
12591: PUSH
12592: LD_EXP 25
12596: NOT
12597: OR
12598: IFFALSE 12674
// begin uc_nation := 2 ;
12600: LD_ADDR_OWVAR 21
12604: PUSH
12605: LD_INT 2
12607: ST_TO_ADDR
// uc_side := 5 ;
12608: LD_ADDR_OWVAR 20
12612: PUSH
12613: LD_INT 5
12615: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 1 ) ;
12616: LD_INT 1
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: LD_INT 1
12624: PPUSH
12625: CALL_OW 380
// un := CreateHuman ;
12629: LD_ADDR_VAR 0 2
12633: PUSH
12634: CALL_OW 44
12638: ST_TO_ADDR
// PlaceUnitXYR ( un , 112 , 40 , 3 , false ) ;
12639: LD_VAR 0 2
12643: PPUSH
12644: LD_INT 112
12646: PPUSH
12647: LD_INT 40
12649: PPUSH
12650: LD_INT 3
12652: PPUSH
12653: LD_INT 0
12655: PPUSH
12656: CALL_OW 50
// ComTurnUnit ( un , Aviradze ) ;
12660: LD_VAR 0 2
12664: PPUSH
12665: LD_EXP 27
12669: PPUSH
12670: CALL_OW 119
// end ; end ;
12674: LD_VAR 0 1
12678: RET
// export function PrepareFarmer ; var i ; begin
12679: LD_INT 0
12681: PPUSH
12682: PPUSH
// uc_side := 5 ;
12683: LD_ADDR_OWVAR 20
12687: PUSH
12688: LD_INT 5
12690: ST_TO_ADDR
// uc_nation := 2 ;
12691: LD_ADDR_OWVAR 21
12695: PUSH
12696: LD_INT 2
12698: ST_TO_ADDR
// Farmer := PrepareUnit ( Farmer , false ,  ) ;
12699: LD_ADDR_EXP 31
12703: PUSH
12704: LD_STRING Farmer
12706: PPUSH
12707: LD_INT 0
12709: PPUSH
12710: LD_STRING 
12712: PPUSH
12713: CALL 35453 0 3
12717: ST_TO_ADDR
// PlaceUnitXY ( Farmer , 106 , 62 , false ) ;
12718: LD_EXP 31
12722: PPUSH
12723: LD_INT 106
12725: PPUSH
12726: LD_INT 62
12728: PPUSH
12729: LD_INT 0
12731: PPUSH
12732: CALL_OW 48
// for i := 1 to 5 do
12736: LD_ADDR_VAR 0 2
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_INT 5
12748: PUSH
12749: FOR_TO
12750: IFFALSE 12788
// begin PrepareHuman ( sex_male , 1 , 1 ) ;
12752: LD_INT 1
12754: PPUSH
12755: LD_INT 1
12757: PPUSH
12758: LD_INT 1
12760: PPUSH
12761: CALL_OW 380
// PlaceUnitXYR ( CreateHuman , 105 , 64 , 3 , false ) ;
12765: CALL_OW 44
12769: PPUSH
12770: LD_INT 105
12772: PPUSH
12773: LD_INT 64
12775: PPUSH
12776: LD_INT 3
12778: PPUSH
12779: LD_INT 0
12781: PPUSH
12782: CALL_OW 50
// end ;
12786: GO 12749
12788: POP
12789: POP
// end ; end_of_file
12790: LD_VAR 0 1
12794: RET
// every 2 2$20 + 0 0$10 do
12795: GO 12797
12797: DISABLE
// begin enable ;
12798: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , forest , true ) ;
12799: LD_INT 1
12801: PPUSH
12802: LD_INT 5
12804: PPUSH
12805: CALL_OW 12
12809: PPUSH
12810: LD_INT 1
12812: PPUSH
12813: LD_INT 1
12815: PPUSH
12816: CALL_OW 55
// if tick > 6 6$00 then
12820: LD_OWVAR 1
12824: PUSH
12825: LD_INT 12600
12827: GREATER
12828: IFFALSE 12831
// disable ;
12830: DISABLE
// end ; end_of_file
12831: END
// on UnitDestroyed ( un ) do begin if un = Heike then
12832: LD_VAR 0 1
12836: PUSH
12837: LD_EXP 23
12841: EQUAL
12842: IFFALSE 12851
// YouLost ( Heike ) ;
12844: LD_STRING Heike
12846: PPUSH
12847: CALL_OW 104
// if un = Aviradze then
12851: LD_VAR 0 1
12855: PUSH
12856: LD_EXP 27
12860: EQUAL
12861: IFFALSE 12870
// YouLost ( Aviradze ) ;
12863: LD_STRING Aviradze
12865: PPUSH
12866: CALL_OW 104
// if un = usLab then
12870: LD_VAR 0 1
12874: PUSH
12875: LD_INT 3
12877: EQUAL
12878: IFFALSE 12887
// YouLost ( Lab ) ;
12880: LD_STRING Lab
12882: PPUSH
12883: CALL_OW 104
// if ( un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) diff [ Heike , Aviradze ] ) and aviradzeSpotted then
12887: LD_VAR 0 1
12891: PUSH
12892: LD_INT 22
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: PUSH
12902: LD_INT 21
12904: PUSH
12905: LD_INT 1
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 23
12914: PUSH
12915: LD_INT 2
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: PUSH
12932: LD_EXP 23
12936: PUSH
12937: LD_EXP 27
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: DIFF
12946: IN
12947: IFFALSE 12955
12949: PUSH
12950: LD_EXP 4
12954: AND
12955: IFFALSE 12971
// lostCounter := lostCounter + 1 ;
12957: LD_ADDR_EXP 18
12961: PUSH
12962: LD_EXP 18
12966: PUSH
12967: LD_INT 1
12969: PLUS
12970: ST_TO_ADDR
// end ;
12971: PPOPN 1
12973: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 2 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) = 0 do
12974: LD_INT 23
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 25
12986: PUSH
12987: LD_INT 2
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: PUSH
13003: LD_INT 0
13005: EQUAL
13006: IFFALSE 13042
13008: PUSH
13009: LD_INT 22
13011: PUSH
13012: LD_INT 2
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 21
13021: PUSH
13022: LD_INT 3
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PPUSH
13033: CALL_OW 69
13037: PUSH
13038: LD_INT 0
13040: EQUAL
13041: AND
13042: IFFALSE 13054
13044: GO 13046
13046: DISABLE
// YouLost ( Eng ) ;
13047: LD_STRING Eng
13049: PPUSH
13050: CALL_OW 104
13054: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in usSci and killerSide = 2 then
13055: LD_VAR 0 1
13059: PUSH
13060: LD_EXP 22
13064: IN
13065: IFFALSE 13077
13067: PUSH
13068: LD_VAR 0 2
13072: PUSH
13073: LD_INT 2
13075: EQUAL
13076: AND
13077: IFFALSE 13109
// begin usSci := usSci diff un ;
13079: LD_ADDR_EXP 22
13083: PUSH
13084: LD_EXP 22
13088: PUSH
13089: LD_VAR 0 1
13093: DIFF
13094: ST_TO_ADDR
// sciCounterKill := sciCounterKill + 1 ;
13095: LD_ADDR_EXP 9
13099: PUSH
13100: LD_EXP 9
13104: PUSH
13105: LD_INT 1
13107: PLUS
13108: ST_TO_ADDR
// end ; end ;
13109: PPOPN 3
13111: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
13112: LD_VAR 0 1
13116: PUSH
13117: LD_INT 2
13119: EQUAL
13120: IFFALSE 13132
13122: PUSH
13123: LD_VAR 0 2
13127: PUSH
13128: LD_INT 5
13130: EQUAL
13131: AND
13132: IFFALSE 13141
// YouLost ( FriendlyFire ) ;
13134: LD_STRING FriendlyFire
13136: PPUSH
13137: CALL_OW 104
// end ;
13141: PPOPN 2
13143: END
// on EnterBuilding ( b , un ) do begin if un = Gladstone then
13144: LD_VAR 0 2
13148: PUSH
13149: LD_EXP 19
13153: EQUAL
13154: IFFALSE 13168
// SetTag ( Gladstone , 0 ) ;
13156: LD_EXP 19
13160: PPUSH
13161: LD_INT 0
13163: PPUSH
13164: CALL_OW 109
// end ; end_of_file end_of_file
13168: PPOPN 2
13170: END
// export globalGameSaveCounter ; every 0 0$1 do
13171: GO 13173
13173: DISABLE
// begin enable ;
13174: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
13175: LD_STRING updateTimer(
13177: PUSH
13178: LD_OWVAR 1
13182: STR
13183: PUSH
13184: LD_STRING );
13186: STR
13187: PPUSH
13188: CALL_OW 559
// end ;
13192: END
// every 0 0$1 do
13193: GO 13195
13195: DISABLE
// begin globalGameSaveCounter := 0 ;
13196: LD_ADDR_EXP 32
13200: PUSH
13201: LD_INT 0
13203: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
13204: LD_STRING setGameSaveCounter(0)
13206: PPUSH
13207: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
13211: LD_STRING initStreamRollete();
13213: PPUSH
13214: CALL_OW 559
// InitStreamMode ;
13218: CALL 14563 0 0
// DefineStreamItems ( false ) ;
13222: LD_INT 0
13224: PPUSH
13225: CALL 15027 0 1
// end ;
13229: END
// export function SOS_MapStart ( ) ; begin
13230: LD_INT 0
13232: PPUSH
// if streamModeActive then
13233: LD_EXP 33
13237: IFFALSE 13246
// DefineStreamItems ( true ) ;
13239: LD_INT 1
13241: PPUSH
13242: CALL 15027 0 1
// UpdateLuaVariables ( ) ;
13246: CALL 13263 0 0
// UpdateFactoryWaypoints ( ) ;
13250: CALL 28149 0 0
// UpdateWarehouseGatheringPoints ( ) ;
13254: CALL 28401 0 0
// end ;
13258: LD_VAR 0 1
13262: RET
// function UpdateLuaVariables ( ) ; begin
13263: LD_INT 0
13265: PPUSH
// if globalGameSaveCounter then
13266: LD_EXP 32
13270: IFFALSE 13304
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
13272: LD_ADDR_EXP 32
13276: PUSH
13277: LD_EXP 32
13281: PPUSH
13282: CALL 74982 0 1
13286: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13287: LD_STRING setGameSaveCounter(
13289: PUSH
13290: LD_EXP 32
13294: STR
13295: PUSH
13296: LD_STRING )
13298: STR
13299: PPUSH
13300: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
13304: LD_STRING setGameDifficulty(
13306: PUSH
13307: LD_OWVAR 67
13311: STR
13312: PUSH
13313: LD_STRING )
13315: STR
13316: PPUSH
13317: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
13321: LD_STRING displayDifficulty(
13323: PUSH
13324: LD_OWVAR 67
13328: STR
13329: PUSH
13330: LD_STRING )
13332: STR
13333: PPUSH
13334: CALL_OW 559
// end ;
13338: LD_VAR 0 1
13342: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
13343: LD_INT 0
13345: PPUSH
// if p2 = stream_mode then
13346: LD_VAR 0 2
13350: PUSH
13351: LD_INT 100
13353: EQUAL
13354: IFFALSE 14357
// begin if not StreamModeActive then
13356: LD_EXP 33
13360: NOT
13361: IFFALSE 13371
// StreamModeActive := true ;
13363: LD_ADDR_EXP 33
13367: PUSH
13368: LD_INT 1
13370: ST_TO_ADDR
// if p3 = 0 then
13371: LD_VAR 0 3
13375: PUSH
13376: LD_INT 0
13378: EQUAL
13379: IFFALSE 13385
// InitStreamMode ;
13381: CALL 14563 0 0
// if p3 = 1 then
13385: LD_VAR 0 3
13389: PUSH
13390: LD_INT 1
13392: EQUAL
13393: IFFALSE 13403
// sRocket := true ;
13395: LD_ADDR_EXP 38
13399: PUSH
13400: LD_INT 1
13402: ST_TO_ADDR
// if p3 = 2 then
13403: LD_VAR 0 3
13407: PUSH
13408: LD_INT 2
13410: EQUAL
13411: IFFALSE 13421
// sSpeed := true ;
13413: LD_ADDR_EXP 37
13417: PUSH
13418: LD_INT 1
13420: ST_TO_ADDR
// if p3 = 3 then
13421: LD_VAR 0 3
13425: PUSH
13426: LD_INT 3
13428: EQUAL
13429: IFFALSE 13439
// sEngine := true ;
13431: LD_ADDR_EXP 39
13435: PUSH
13436: LD_INT 1
13438: ST_TO_ADDR
// if p3 = 4 then
13439: LD_VAR 0 3
13443: PUSH
13444: LD_INT 4
13446: EQUAL
13447: IFFALSE 13457
// sSpec := true ;
13449: LD_ADDR_EXP 36
13453: PUSH
13454: LD_INT 1
13456: ST_TO_ADDR
// if p3 = 5 then
13457: LD_VAR 0 3
13461: PUSH
13462: LD_INT 5
13464: EQUAL
13465: IFFALSE 13475
// sLevel := true ;
13467: LD_ADDR_EXP 40
13471: PUSH
13472: LD_INT 1
13474: ST_TO_ADDR
// if p3 = 6 then
13475: LD_VAR 0 3
13479: PUSH
13480: LD_INT 6
13482: EQUAL
13483: IFFALSE 13493
// sArmoury := true ;
13485: LD_ADDR_EXP 41
13489: PUSH
13490: LD_INT 1
13492: ST_TO_ADDR
// if p3 = 7 then
13493: LD_VAR 0 3
13497: PUSH
13498: LD_INT 7
13500: EQUAL
13501: IFFALSE 13511
// sRadar := true ;
13503: LD_ADDR_EXP 42
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// if p3 = 8 then
13511: LD_VAR 0 3
13515: PUSH
13516: LD_INT 8
13518: EQUAL
13519: IFFALSE 13529
// sBunker := true ;
13521: LD_ADDR_EXP 43
13525: PUSH
13526: LD_INT 1
13528: ST_TO_ADDR
// if p3 = 9 then
13529: LD_VAR 0 3
13533: PUSH
13534: LD_INT 9
13536: EQUAL
13537: IFFALSE 13547
// sHack := true ;
13539: LD_ADDR_EXP 44
13543: PUSH
13544: LD_INT 1
13546: ST_TO_ADDR
// if p3 = 10 then
13547: LD_VAR 0 3
13551: PUSH
13552: LD_INT 10
13554: EQUAL
13555: IFFALSE 13565
// sFire := true ;
13557: LD_ADDR_EXP 45
13561: PUSH
13562: LD_INT 1
13564: ST_TO_ADDR
// if p3 = 11 then
13565: LD_VAR 0 3
13569: PUSH
13570: LD_INT 11
13572: EQUAL
13573: IFFALSE 13583
// sRefresh := true ;
13575: LD_ADDR_EXP 46
13579: PUSH
13580: LD_INT 1
13582: ST_TO_ADDR
// if p3 = 12 then
13583: LD_VAR 0 3
13587: PUSH
13588: LD_INT 12
13590: EQUAL
13591: IFFALSE 13601
// sExp := true ;
13593: LD_ADDR_EXP 47
13597: PUSH
13598: LD_INT 1
13600: ST_TO_ADDR
// if p3 = 13 then
13601: LD_VAR 0 3
13605: PUSH
13606: LD_INT 13
13608: EQUAL
13609: IFFALSE 13619
// sDepot := true ;
13611: LD_ADDR_EXP 48
13615: PUSH
13616: LD_INT 1
13618: ST_TO_ADDR
// if p3 = 14 then
13619: LD_VAR 0 3
13623: PUSH
13624: LD_INT 14
13626: EQUAL
13627: IFFALSE 13637
// sFlag := true ;
13629: LD_ADDR_EXP 49
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
// if p3 = 15 then
13637: LD_VAR 0 3
13641: PUSH
13642: LD_INT 15
13644: EQUAL
13645: IFFALSE 13655
// sKamikadze := true ;
13647: LD_ADDR_EXP 57
13651: PUSH
13652: LD_INT 1
13654: ST_TO_ADDR
// if p3 = 16 then
13655: LD_VAR 0 3
13659: PUSH
13660: LD_INT 16
13662: EQUAL
13663: IFFALSE 13673
// sTroll := true ;
13665: LD_ADDR_EXP 58
13669: PUSH
13670: LD_INT 1
13672: ST_TO_ADDR
// if p3 = 17 then
13673: LD_VAR 0 3
13677: PUSH
13678: LD_INT 17
13680: EQUAL
13681: IFFALSE 13691
// sSlow := true ;
13683: LD_ADDR_EXP 59
13687: PUSH
13688: LD_INT 1
13690: ST_TO_ADDR
// if p3 = 18 then
13691: LD_VAR 0 3
13695: PUSH
13696: LD_INT 18
13698: EQUAL
13699: IFFALSE 13709
// sLack := true ;
13701: LD_ADDR_EXP 60
13705: PUSH
13706: LD_INT 1
13708: ST_TO_ADDR
// if p3 = 19 then
13709: LD_VAR 0 3
13713: PUSH
13714: LD_INT 19
13716: EQUAL
13717: IFFALSE 13727
// sTank := true ;
13719: LD_ADDR_EXP 62
13723: PUSH
13724: LD_INT 1
13726: ST_TO_ADDR
// if p3 = 20 then
13727: LD_VAR 0 3
13731: PUSH
13732: LD_INT 20
13734: EQUAL
13735: IFFALSE 13745
// sRemote := true ;
13737: LD_ADDR_EXP 63
13741: PUSH
13742: LD_INT 1
13744: ST_TO_ADDR
// if p3 = 21 then
13745: LD_VAR 0 3
13749: PUSH
13750: LD_INT 21
13752: EQUAL
13753: IFFALSE 13763
// sPowell := true ;
13755: LD_ADDR_EXP 64
13759: PUSH
13760: LD_INT 1
13762: ST_TO_ADDR
// if p3 = 22 then
13763: LD_VAR 0 3
13767: PUSH
13768: LD_INT 22
13770: EQUAL
13771: IFFALSE 13781
// sTeleport := true ;
13773: LD_ADDR_EXP 67
13777: PUSH
13778: LD_INT 1
13780: ST_TO_ADDR
// if p3 = 23 then
13781: LD_VAR 0 3
13785: PUSH
13786: LD_INT 23
13788: EQUAL
13789: IFFALSE 13799
// sOilTower := true ;
13791: LD_ADDR_EXP 69
13795: PUSH
13796: LD_INT 1
13798: ST_TO_ADDR
// if p3 = 24 then
13799: LD_VAR 0 3
13803: PUSH
13804: LD_INT 24
13806: EQUAL
13807: IFFALSE 13817
// sShovel := true ;
13809: LD_ADDR_EXP 70
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// if p3 = 25 then
13817: LD_VAR 0 3
13821: PUSH
13822: LD_INT 25
13824: EQUAL
13825: IFFALSE 13835
// sSheik := true ;
13827: LD_ADDR_EXP 71
13831: PUSH
13832: LD_INT 1
13834: ST_TO_ADDR
// if p3 = 26 then
13835: LD_VAR 0 3
13839: PUSH
13840: LD_INT 26
13842: EQUAL
13843: IFFALSE 13853
// sEarthquake := true ;
13845: LD_ADDR_EXP 73
13849: PUSH
13850: LD_INT 1
13852: ST_TO_ADDR
// if p3 = 27 then
13853: LD_VAR 0 3
13857: PUSH
13858: LD_INT 27
13860: EQUAL
13861: IFFALSE 13871
// sAI := true ;
13863: LD_ADDR_EXP 74
13867: PUSH
13868: LD_INT 1
13870: ST_TO_ADDR
// if p3 = 28 then
13871: LD_VAR 0 3
13875: PUSH
13876: LD_INT 28
13878: EQUAL
13879: IFFALSE 13889
// sCargo := true ;
13881: LD_ADDR_EXP 77
13885: PUSH
13886: LD_INT 1
13888: ST_TO_ADDR
// if p3 = 29 then
13889: LD_VAR 0 3
13893: PUSH
13894: LD_INT 29
13896: EQUAL
13897: IFFALSE 13907
// sDLaser := true ;
13899: LD_ADDR_EXP 78
13903: PUSH
13904: LD_INT 1
13906: ST_TO_ADDR
// if p3 = 30 then
13907: LD_VAR 0 3
13911: PUSH
13912: LD_INT 30
13914: EQUAL
13915: IFFALSE 13925
// sExchange := true ;
13917: LD_ADDR_EXP 79
13921: PUSH
13922: LD_INT 1
13924: ST_TO_ADDR
// if p3 = 31 then
13925: LD_VAR 0 3
13929: PUSH
13930: LD_INT 31
13932: EQUAL
13933: IFFALSE 13943
// sFac := true ;
13935: LD_ADDR_EXP 80
13939: PUSH
13940: LD_INT 1
13942: ST_TO_ADDR
// if p3 = 32 then
13943: LD_VAR 0 3
13947: PUSH
13948: LD_INT 32
13950: EQUAL
13951: IFFALSE 13961
// sPower := true ;
13953: LD_ADDR_EXP 81
13957: PUSH
13958: LD_INT 1
13960: ST_TO_ADDR
// if p3 = 33 then
13961: LD_VAR 0 3
13965: PUSH
13966: LD_INT 33
13968: EQUAL
13969: IFFALSE 13979
// sRandom := true ;
13971: LD_ADDR_EXP 82
13975: PUSH
13976: LD_INT 1
13978: ST_TO_ADDR
// if p3 = 34 then
13979: LD_VAR 0 3
13983: PUSH
13984: LD_INT 34
13986: EQUAL
13987: IFFALSE 13997
// sShield := true ;
13989: LD_ADDR_EXP 83
13993: PUSH
13994: LD_INT 1
13996: ST_TO_ADDR
// if p3 = 35 then
13997: LD_VAR 0 3
14001: PUSH
14002: LD_INT 35
14004: EQUAL
14005: IFFALSE 14015
// sTime := true ;
14007: LD_ADDR_EXP 84
14011: PUSH
14012: LD_INT 1
14014: ST_TO_ADDR
// if p3 = 36 then
14015: LD_VAR 0 3
14019: PUSH
14020: LD_INT 36
14022: EQUAL
14023: IFFALSE 14033
// sTools := true ;
14025: LD_ADDR_EXP 85
14029: PUSH
14030: LD_INT 1
14032: ST_TO_ADDR
// if p3 = 101 then
14033: LD_VAR 0 3
14037: PUSH
14038: LD_INT 101
14040: EQUAL
14041: IFFALSE 14051
// sSold := true ;
14043: LD_ADDR_EXP 50
14047: PUSH
14048: LD_INT 1
14050: ST_TO_ADDR
// if p3 = 102 then
14051: LD_VAR 0 3
14055: PUSH
14056: LD_INT 102
14058: EQUAL
14059: IFFALSE 14069
// sDiff := true ;
14061: LD_ADDR_EXP 51
14065: PUSH
14066: LD_INT 1
14068: ST_TO_ADDR
// if p3 = 103 then
14069: LD_VAR 0 3
14073: PUSH
14074: LD_INT 103
14076: EQUAL
14077: IFFALSE 14087
// sFog := true ;
14079: LD_ADDR_EXP 54
14083: PUSH
14084: LD_INT 1
14086: ST_TO_ADDR
// if p3 = 104 then
14087: LD_VAR 0 3
14091: PUSH
14092: LD_INT 104
14094: EQUAL
14095: IFFALSE 14105
// sReset := true ;
14097: LD_ADDR_EXP 55
14101: PUSH
14102: LD_INT 1
14104: ST_TO_ADDR
// if p3 = 105 then
14105: LD_VAR 0 3
14109: PUSH
14110: LD_INT 105
14112: EQUAL
14113: IFFALSE 14123
// sSun := true ;
14115: LD_ADDR_EXP 56
14119: PUSH
14120: LD_INT 1
14122: ST_TO_ADDR
// if p3 = 106 then
14123: LD_VAR 0 3
14127: PUSH
14128: LD_INT 106
14130: EQUAL
14131: IFFALSE 14141
// sTiger := true ;
14133: LD_ADDR_EXP 52
14137: PUSH
14138: LD_INT 1
14140: ST_TO_ADDR
// if p3 = 107 then
14141: LD_VAR 0 3
14145: PUSH
14146: LD_INT 107
14148: EQUAL
14149: IFFALSE 14159
// sBomb := true ;
14151: LD_ADDR_EXP 53
14155: PUSH
14156: LD_INT 1
14158: ST_TO_ADDR
// if p3 = 108 then
14159: LD_VAR 0 3
14163: PUSH
14164: LD_INT 108
14166: EQUAL
14167: IFFALSE 14177
// sWound := true ;
14169: LD_ADDR_EXP 61
14173: PUSH
14174: LD_INT 1
14176: ST_TO_ADDR
// if p3 = 109 then
14177: LD_VAR 0 3
14181: PUSH
14182: LD_INT 109
14184: EQUAL
14185: IFFALSE 14195
// sBetray := true ;
14187: LD_ADDR_EXP 65
14191: PUSH
14192: LD_INT 1
14194: ST_TO_ADDR
// if p3 = 110 then
14195: LD_VAR 0 3
14199: PUSH
14200: LD_INT 110
14202: EQUAL
14203: IFFALSE 14213
// sContamin := true ;
14205: LD_ADDR_EXP 66
14209: PUSH
14210: LD_INT 1
14212: ST_TO_ADDR
// if p3 = 111 then
14213: LD_VAR 0 3
14217: PUSH
14218: LD_INT 111
14220: EQUAL
14221: IFFALSE 14231
// sOil := true ;
14223: LD_ADDR_EXP 68
14227: PUSH
14228: LD_INT 1
14230: ST_TO_ADDR
// if p3 = 112 then
14231: LD_VAR 0 3
14235: PUSH
14236: LD_INT 112
14238: EQUAL
14239: IFFALSE 14249
// sStu := true ;
14241: LD_ADDR_EXP 72
14245: PUSH
14246: LD_INT 1
14248: ST_TO_ADDR
// if p3 = 113 then
14249: LD_VAR 0 3
14253: PUSH
14254: LD_INT 113
14256: EQUAL
14257: IFFALSE 14267
// sBazooka := true ;
14259: LD_ADDR_EXP 75
14263: PUSH
14264: LD_INT 1
14266: ST_TO_ADDR
// if p3 = 114 then
14267: LD_VAR 0 3
14271: PUSH
14272: LD_INT 114
14274: EQUAL
14275: IFFALSE 14285
// sMortar := true ;
14277: LD_ADDR_EXP 76
14281: PUSH
14282: LD_INT 1
14284: ST_TO_ADDR
// if p3 = 115 then
14285: LD_VAR 0 3
14289: PUSH
14290: LD_INT 115
14292: EQUAL
14293: IFFALSE 14303
// sRanger := true ;
14295: LD_ADDR_EXP 86
14299: PUSH
14300: LD_INT 1
14302: ST_TO_ADDR
// if p3 = 116 then
14303: LD_VAR 0 3
14307: PUSH
14308: LD_INT 116
14310: EQUAL
14311: IFFALSE 14321
// sComputer := true ;
14313: LD_ADDR_EXP 87
14317: PUSH
14318: LD_INT 1
14320: ST_TO_ADDR
// if p3 = 117 then
14321: LD_VAR 0 3
14325: PUSH
14326: LD_INT 117
14328: EQUAL
14329: IFFALSE 14339
// s30 := true ;
14331: LD_ADDR_EXP 88
14335: PUSH
14336: LD_INT 1
14338: ST_TO_ADDR
// if p3 = 118 then
14339: LD_VAR 0 3
14343: PUSH
14344: LD_INT 118
14346: EQUAL
14347: IFFALSE 14357
// s60 := true ;
14349: LD_ADDR_EXP 89
14353: PUSH
14354: LD_INT 1
14356: ST_TO_ADDR
// end ; if p2 = hack_mode then
14357: LD_VAR 0 2
14361: PUSH
14362: LD_INT 101
14364: EQUAL
14365: IFFALSE 14493
// begin case p3 of 1 :
14367: LD_VAR 0 3
14371: PUSH
14372: LD_INT 1
14374: DOUBLE
14375: EQUAL
14376: IFTRUE 14380
14378: GO 14387
14380: POP
// hHackUnlimitedResources ; 2 :
14381: CALL 26756 0 0
14385: GO 14493
14387: LD_INT 2
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14402
14395: POP
// hHackSetLevel10 ; 3 :
14396: CALL 26889 0 0
14400: GO 14493
14402: LD_INT 3
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14417
14410: POP
// hHackSetLevel10YourUnits ; 4 :
14411: CALL 26974 0 0
14415: GO 14493
14417: LD_INT 4
14419: DOUBLE
14420: EQUAL
14421: IFTRUE 14425
14423: GO 14432
14425: POP
// hHackInvincible ; 5 :
14426: CALL 27422 0 0
14430: GO 14493
14432: LD_INT 5
14434: DOUBLE
14435: EQUAL
14436: IFTRUE 14440
14438: GO 14447
14440: POP
// hHackInvisible ; 6 :
14441: CALL 27533 0 0
14445: GO 14493
14447: LD_INT 6
14449: DOUBLE
14450: EQUAL
14451: IFTRUE 14455
14453: GO 14462
14455: POP
// hHackChangeYourSide ; 7 :
14456: CALL 27590 0 0
14460: GO 14493
14462: LD_INT 7
14464: DOUBLE
14465: EQUAL
14466: IFTRUE 14470
14468: GO 14477
14470: POP
// hHackChangeUnitSide ; 8 :
14471: CALL 27632 0 0
14475: GO 14493
14477: LD_INT 8
14479: DOUBLE
14480: EQUAL
14481: IFTRUE 14485
14483: GO 14492
14485: POP
// hHackFog ; end ;
14486: CALL 27733 0 0
14490: GO 14493
14492: POP
// end ; if p2 = game_save_mode then
14493: LD_VAR 0 2
14497: PUSH
14498: LD_INT 102
14500: EQUAL
14501: IFFALSE 14558
// begin if p3 = 1 then
14503: LD_VAR 0 3
14507: PUSH
14508: LD_INT 1
14510: EQUAL
14511: IFFALSE 14523
// globalGameSaveCounter := p4 ;
14513: LD_ADDR_EXP 32
14517: PUSH
14518: LD_VAR 0 4
14522: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
14523: LD_VAR 0 3
14527: PUSH
14528: LD_INT 2
14530: EQUAL
14531: IFFALSE 14539
14533: PUSH
14534: LD_EXP 32
14538: AND
14539: IFFALSE 14558
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14541: LD_STRING setGameSaveCounter(
14543: PUSH
14544: LD_EXP 32
14548: STR
14549: PUSH
14550: LD_STRING )
14552: STR
14553: PPUSH
14554: CALL_OW 559
// end ; end ;
14558: LD_VAR 0 7
14562: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
14563: LD_INT 0
14565: PPUSH
// streamModeActive := false ;
14566: LD_ADDR_EXP 33
14570: PUSH
14571: LD_INT 0
14573: ST_TO_ADDR
// normalCounter := 36 ;
14574: LD_ADDR_EXP 34
14578: PUSH
14579: LD_INT 36
14581: ST_TO_ADDR
// hardcoreCounter := 18 ;
14582: LD_ADDR_EXP 35
14586: PUSH
14587: LD_INT 18
14589: ST_TO_ADDR
// sRocket := false ;
14590: LD_ADDR_EXP 38
14594: PUSH
14595: LD_INT 0
14597: ST_TO_ADDR
// sSpeed := false ;
14598: LD_ADDR_EXP 37
14602: PUSH
14603: LD_INT 0
14605: ST_TO_ADDR
// sEngine := false ;
14606: LD_ADDR_EXP 39
14610: PUSH
14611: LD_INT 0
14613: ST_TO_ADDR
// sSpec := false ;
14614: LD_ADDR_EXP 36
14618: PUSH
14619: LD_INT 0
14621: ST_TO_ADDR
// sLevel := false ;
14622: LD_ADDR_EXP 40
14626: PUSH
14627: LD_INT 0
14629: ST_TO_ADDR
// sArmoury := false ;
14630: LD_ADDR_EXP 41
14634: PUSH
14635: LD_INT 0
14637: ST_TO_ADDR
// sRadar := false ;
14638: LD_ADDR_EXP 42
14642: PUSH
14643: LD_INT 0
14645: ST_TO_ADDR
// sBunker := false ;
14646: LD_ADDR_EXP 43
14650: PUSH
14651: LD_INT 0
14653: ST_TO_ADDR
// sHack := false ;
14654: LD_ADDR_EXP 44
14658: PUSH
14659: LD_INT 0
14661: ST_TO_ADDR
// sFire := false ;
14662: LD_ADDR_EXP 45
14666: PUSH
14667: LD_INT 0
14669: ST_TO_ADDR
// sRefresh := false ;
14670: LD_ADDR_EXP 46
14674: PUSH
14675: LD_INT 0
14677: ST_TO_ADDR
// sExp := false ;
14678: LD_ADDR_EXP 47
14682: PUSH
14683: LD_INT 0
14685: ST_TO_ADDR
// sDepot := false ;
14686: LD_ADDR_EXP 48
14690: PUSH
14691: LD_INT 0
14693: ST_TO_ADDR
// sFlag := false ;
14694: LD_ADDR_EXP 49
14698: PUSH
14699: LD_INT 0
14701: ST_TO_ADDR
// sKamikadze := false ;
14702: LD_ADDR_EXP 57
14706: PUSH
14707: LD_INT 0
14709: ST_TO_ADDR
// sTroll := false ;
14710: LD_ADDR_EXP 58
14714: PUSH
14715: LD_INT 0
14717: ST_TO_ADDR
// sSlow := false ;
14718: LD_ADDR_EXP 59
14722: PUSH
14723: LD_INT 0
14725: ST_TO_ADDR
// sLack := false ;
14726: LD_ADDR_EXP 60
14730: PUSH
14731: LD_INT 0
14733: ST_TO_ADDR
// sTank := false ;
14734: LD_ADDR_EXP 62
14738: PUSH
14739: LD_INT 0
14741: ST_TO_ADDR
// sRemote := false ;
14742: LD_ADDR_EXP 63
14746: PUSH
14747: LD_INT 0
14749: ST_TO_ADDR
// sPowell := false ;
14750: LD_ADDR_EXP 64
14754: PUSH
14755: LD_INT 0
14757: ST_TO_ADDR
// sTeleport := false ;
14758: LD_ADDR_EXP 67
14762: PUSH
14763: LD_INT 0
14765: ST_TO_ADDR
// sOilTower := false ;
14766: LD_ADDR_EXP 69
14770: PUSH
14771: LD_INT 0
14773: ST_TO_ADDR
// sShovel := false ;
14774: LD_ADDR_EXP 70
14778: PUSH
14779: LD_INT 0
14781: ST_TO_ADDR
// sSheik := false ;
14782: LD_ADDR_EXP 71
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// sEarthquake := false ;
14790: LD_ADDR_EXP 73
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// sAI := false ;
14798: LD_ADDR_EXP 74
14802: PUSH
14803: LD_INT 0
14805: ST_TO_ADDR
// sCargo := false ;
14806: LD_ADDR_EXP 77
14810: PUSH
14811: LD_INT 0
14813: ST_TO_ADDR
// sDLaser := false ;
14814: LD_ADDR_EXP 78
14818: PUSH
14819: LD_INT 0
14821: ST_TO_ADDR
// sExchange := false ;
14822: LD_ADDR_EXP 79
14826: PUSH
14827: LD_INT 0
14829: ST_TO_ADDR
// sFac := false ;
14830: LD_ADDR_EXP 80
14834: PUSH
14835: LD_INT 0
14837: ST_TO_ADDR
// sPower := false ;
14838: LD_ADDR_EXP 81
14842: PUSH
14843: LD_INT 0
14845: ST_TO_ADDR
// sRandom := false ;
14846: LD_ADDR_EXP 82
14850: PUSH
14851: LD_INT 0
14853: ST_TO_ADDR
// sShield := false ;
14854: LD_ADDR_EXP 83
14858: PUSH
14859: LD_INT 0
14861: ST_TO_ADDR
// sTime := false ;
14862: LD_ADDR_EXP 84
14866: PUSH
14867: LD_INT 0
14869: ST_TO_ADDR
// sTools := false ;
14870: LD_ADDR_EXP 85
14874: PUSH
14875: LD_INT 0
14877: ST_TO_ADDR
// sSold := false ;
14878: LD_ADDR_EXP 50
14882: PUSH
14883: LD_INT 0
14885: ST_TO_ADDR
// sDiff := false ;
14886: LD_ADDR_EXP 51
14890: PUSH
14891: LD_INT 0
14893: ST_TO_ADDR
// sFog := false ;
14894: LD_ADDR_EXP 54
14898: PUSH
14899: LD_INT 0
14901: ST_TO_ADDR
// sReset := false ;
14902: LD_ADDR_EXP 55
14906: PUSH
14907: LD_INT 0
14909: ST_TO_ADDR
// sSun := false ;
14910: LD_ADDR_EXP 56
14914: PUSH
14915: LD_INT 0
14917: ST_TO_ADDR
// sTiger := false ;
14918: LD_ADDR_EXP 52
14922: PUSH
14923: LD_INT 0
14925: ST_TO_ADDR
// sBomb := false ;
14926: LD_ADDR_EXP 53
14930: PUSH
14931: LD_INT 0
14933: ST_TO_ADDR
// sWound := false ;
14934: LD_ADDR_EXP 61
14938: PUSH
14939: LD_INT 0
14941: ST_TO_ADDR
// sBetray := false ;
14942: LD_ADDR_EXP 65
14946: PUSH
14947: LD_INT 0
14949: ST_TO_ADDR
// sContamin := false ;
14950: LD_ADDR_EXP 66
14954: PUSH
14955: LD_INT 0
14957: ST_TO_ADDR
// sOil := false ;
14958: LD_ADDR_EXP 68
14962: PUSH
14963: LD_INT 0
14965: ST_TO_ADDR
// sStu := false ;
14966: LD_ADDR_EXP 72
14970: PUSH
14971: LD_INT 0
14973: ST_TO_ADDR
// sBazooka := false ;
14974: LD_ADDR_EXP 75
14978: PUSH
14979: LD_INT 0
14981: ST_TO_ADDR
// sMortar := false ;
14982: LD_ADDR_EXP 76
14986: PUSH
14987: LD_INT 0
14989: ST_TO_ADDR
// sRanger := false ;
14990: LD_ADDR_EXP 86
14994: PUSH
14995: LD_INT 0
14997: ST_TO_ADDR
// sComputer := false ;
14998: LD_ADDR_EXP 87
15002: PUSH
15003: LD_INT 0
15005: ST_TO_ADDR
// s30 := false ;
15006: LD_ADDR_EXP 88
15010: PUSH
15011: LD_INT 0
15013: ST_TO_ADDR
// s60 := false ;
15014: LD_ADDR_EXP 89
15018: PUSH
15019: LD_INT 0
15021: ST_TO_ADDR
// end ;
15022: LD_VAR 0 1
15026: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
15027: LD_INT 0
15029: PPUSH
15030: PPUSH
15031: PPUSH
15032: PPUSH
15033: PPUSH
15034: PPUSH
15035: PPUSH
// result := [ ] ;
15036: LD_ADDR_VAR 0 2
15040: PUSH
15041: EMPTY
15042: ST_TO_ADDR
// if campaign_id = 1 then
15043: LD_OWVAR 69
15047: PUSH
15048: LD_INT 1
15050: EQUAL
15051: IFFALSE 18217
// begin case mission_number of 1 :
15053: LD_OWVAR 70
15057: PUSH
15058: LD_INT 1
15060: DOUBLE
15061: EQUAL
15062: IFTRUE 15066
15064: GO 15142
15066: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
15067: LD_ADDR_VAR 0 2
15071: PUSH
15072: LD_INT 2
15074: PUSH
15075: LD_INT 4
15077: PUSH
15078: LD_INT 11
15080: PUSH
15081: LD_INT 12
15083: PUSH
15084: LD_INT 15
15086: PUSH
15087: LD_INT 16
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_INT 23
15095: PUSH
15096: LD_INT 26
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 101
15112: PUSH
15113: LD_INT 102
15115: PUSH
15116: LD_INT 106
15118: PUSH
15119: LD_INT 116
15121: PUSH
15122: LD_INT 117
15124: PUSH
15125: LD_INT 118
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: ST_TO_ADDR
15140: GO 18215
15142: LD_INT 2
15144: DOUBLE
15145: EQUAL
15146: IFTRUE 15150
15148: GO 15234
15150: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
15151: LD_ADDR_VAR 0 2
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: LD_INT 4
15161: PUSH
15162: LD_INT 11
15164: PUSH
15165: LD_INT 12
15167: PUSH
15168: LD_INT 15
15170: PUSH
15171: LD_INT 16
15173: PUSH
15174: LD_INT 22
15176: PUSH
15177: LD_INT 23
15179: PUSH
15180: LD_INT 26
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 101
15196: PUSH
15197: LD_INT 102
15199: PUSH
15200: LD_INT 105
15202: PUSH
15203: LD_INT 106
15205: PUSH
15206: LD_INT 108
15208: PUSH
15209: LD_INT 116
15211: PUSH
15212: LD_INT 117
15214: PUSH
15215: LD_INT 118
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: ST_TO_ADDR
15232: GO 18215
15234: LD_INT 3
15236: DOUBLE
15237: EQUAL
15238: IFTRUE 15242
15240: GO 15330
15242: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
15243: LD_ADDR_VAR 0 2
15247: PUSH
15248: LD_INT 2
15250: PUSH
15251: LD_INT 4
15253: PUSH
15254: LD_INT 5
15256: PUSH
15257: LD_INT 11
15259: PUSH
15260: LD_INT 12
15262: PUSH
15263: LD_INT 15
15265: PUSH
15266: LD_INT 16
15268: PUSH
15269: LD_INT 22
15271: PUSH
15272: LD_INT 26
15274: PUSH
15275: LD_INT 36
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 101
15292: PUSH
15293: LD_INT 102
15295: PUSH
15296: LD_INT 105
15298: PUSH
15299: LD_INT 106
15301: PUSH
15302: LD_INT 108
15304: PUSH
15305: LD_INT 116
15307: PUSH
15308: LD_INT 117
15310: PUSH
15311: LD_INT 118
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: ST_TO_ADDR
15328: GO 18215
15330: LD_INT 4
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15434
15338: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
15339: LD_ADDR_VAR 0 2
15343: PUSH
15344: LD_INT 2
15346: PUSH
15347: LD_INT 4
15349: PUSH
15350: LD_INT 5
15352: PUSH
15353: LD_INT 8
15355: PUSH
15356: LD_INT 11
15358: PUSH
15359: LD_INT 12
15361: PUSH
15362: LD_INT 15
15364: PUSH
15365: LD_INT 16
15367: PUSH
15368: LD_INT 22
15370: PUSH
15371: LD_INT 23
15373: PUSH
15374: LD_INT 26
15376: PUSH
15377: LD_INT 36
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: LIST
15385: LIST
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: PUSH
15394: LD_INT 101
15396: PUSH
15397: LD_INT 102
15399: PUSH
15400: LD_INT 105
15402: PUSH
15403: LD_INT 106
15405: PUSH
15406: LD_INT 108
15408: PUSH
15409: LD_INT 116
15411: PUSH
15412: LD_INT 117
15414: PUSH
15415: LD_INT 118
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: PUSH
15428: EMPTY
15429: LIST
15430: LIST
15431: ST_TO_ADDR
15432: GO 18215
15434: LD_INT 5
15436: DOUBLE
15437: EQUAL
15438: IFTRUE 15442
15440: GO 15554
15442: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
15443: LD_ADDR_VAR 0 2
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: LD_INT 4
15453: PUSH
15454: LD_INT 5
15456: PUSH
15457: LD_INT 6
15459: PUSH
15460: LD_INT 8
15462: PUSH
15463: LD_INT 11
15465: PUSH
15466: LD_INT 12
15468: PUSH
15469: LD_INT 15
15471: PUSH
15472: LD_INT 16
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 25
15483: PUSH
15484: LD_INT 26
15486: PUSH
15487: LD_INT 36
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 101
15508: PUSH
15509: LD_INT 102
15511: PUSH
15512: LD_INT 105
15514: PUSH
15515: LD_INT 106
15517: PUSH
15518: LD_INT 108
15520: PUSH
15521: LD_INT 109
15523: PUSH
15524: LD_INT 112
15526: PUSH
15527: LD_INT 116
15529: PUSH
15530: LD_INT 117
15532: PUSH
15533: LD_INT 118
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: ST_TO_ADDR
15552: GO 18215
15554: LD_INT 6
15556: DOUBLE
15557: EQUAL
15558: IFTRUE 15562
15560: GO 15694
15562: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
15563: LD_ADDR_VAR 0 2
15567: PUSH
15568: LD_INT 2
15570: PUSH
15571: LD_INT 4
15573: PUSH
15574: LD_INT 5
15576: PUSH
15577: LD_INT 6
15579: PUSH
15580: LD_INT 8
15582: PUSH
15583: LD_INT 11
15585: PUSH
15586: LD_INT 12
15588: PUSH
15589: LD_INT 15
15591: PUSH
15592: LD_INT 16
15594: PUSH
15595: LD_INT 20
15597: PUSH
15598: LD_INT 21
15600: PUSH
15601: LD_INT 22
15603: PUSH
15604: LD_INT 23
15606: PUSH
15607: LD_INT 25
15609: PUSH
15610: LD_INT 26
15612: PUSH
15613: LD_INT 30
15615: PUSH
15616: LD_INT 31
15618: PUSH
15619: LD_INT 32
15621: PUSH
15622: LD_INT 36
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 101
15648: PUSH
15649: LD_INT 102
15651: PUSH
15652: LD_INT 105
15654: PUSH
15655: LD_INT 106
15657: PUSH
15658: LD_INT 108
15660: PUSH
15661: LD_INT 109
15663: PUSH
15664: LD_INT 112
15666: PUSH
15667: LD_INT 116
15669: PUSH
15670: LD_INT 117
15672: PUSH
15673: LD_INT 118
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: ST_TO_ADDR
15692: GO 18215
15694: LD_INT 7
15696: DOUBLE
15697: EQUAL
15698: IFTRUE 15702
15700: GO 15814
15702: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
15703: LD_ADDR_VAR 0 2
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: LD_INT 4
15713: PUSH
15714: LD_INT 5
15716: PUSH
15717: LD_INT 7
15719: PUSH
15720: LD_INT 11
15722: PUSH
15723: LD_INT 12
15725: PUSH
15726: LD_INT 15
15728: PUSH
15729: LD_INT 16
15731: PUSH
15732: LD_INT 20
15734: PUSH
15735: LD_INT 21
15737: PUSH
15738: LD_INT 22
15740: PUSH
15741: LD_INT 23
15743: PUSH
15744: LD_INT 25
15746: PUSH
15747: LD_INT 26
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: PUSH
15766: LD_INT 101
15768: PUSH
15769: LD_INT 102
15771: PUSH
15772: LD_INT 103
15774: PUSH
15775: LD_INT 105
15777: PUSH
15778: LD_INT 106
15780: PUSH
15781: LD_INT 108
15783: PUSH
15784: LD_INT 112
15786: PUSH
15787: LD_INT 116
15789: PUSH
15790: LD_INT 117
15792: PUSH
15793: LD_INT 118
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: ST_TO_ADDR
15812: GO 18215
15814: LD_INT 8
15816: DOUBLE
15817: EQUAL
15818: IFTRUE 15822
15820: GO 15962
15822: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
15823: LD_ADDR_VAR 0 2
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 4
15833: PUSH
15834: LD_INT 5
15836: PUSH
15837: LD_INT 6
15839: PUSH
15840: LD_INT 7
15842: PUSH
15843: LD_INT 8
15845: PUSH
15846: LD_INT 11
15848: PUSH
15849: LD_INT 12
15851: PUSH
15852: LD_INT 15
15854: PUSH
15855: LD_INT 16
15857: PUSH
15858: LD_INT 20
15860: PUSH
15861: LD_INT 21
15863: PUSH
15864: LD_INT 22
15866: PUSH
15867: LD_INT 23
15869: PUSH
15870: LD_INT 25
15872: PUSH
15873: LD_INT 26
15875: PUSH
15876: LD_INT 30
15878: PUSH
15879: LD_INT 31
15881: PUSH
15882: LD_INT 32
15884: PUSH
15885: LD_INT 36
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 101
15912: PUSH
15913: LD_INT 102
15915: PUSH
15916: LD_INT 103
15918: PUSH
15919: LD_INT 105
15921: PUSH
15922: LD_INT 106
15924: PUSH
15925: LD_INT 108
15927: PUSH
15928: LD_INT 109
15930: PUSH
15931: LD_INT 112
15933: PUSH
15934: LD_INT 116
15936: PUSH
15937: LD_INT 117
15939: PUSH
15940: LD_INT 118
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: ST_TO_ADDR
15960: GO 18215
15962: LD_INT 9
15964: DOUBLE
15965: EQUAL
15966: IFTRUE 15970
15968: GO 16118
15970: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: LD_INT 2
15978: PUSH
15979: LD_INT 4
15981: PUSH
15982: LD_INT 5
15984: PUSH
15985: LD_INT 6
15987: PUSH
15988: LD_INT 7
15990: PUSH
15991: LD_INT 8
15993: PUSH
15994: LD_INT 11
15996: PUSH
15997: LD_INT 12
15999: PUSH
16000: LD_INT 15
16002: PUSH
16003: LD_INT 16
16005: PUSH
16006: LD_INT 20
16008: PUSH
16009: LD_INT 21
16011: PUSH
16012: LD_INT 22
16014: PUSH
16015: LD_INT 23
16017: PUSH
16018: LD_INT 25
16020: PUSH
16021: LD_INT 26
16023: PUSH
16024: LD_INT 28
16026: PUSH
16027: LD_INT 30
16029: PUSH
16030: LD_INT 31
16032: PUSH
16033: LD_INT 32
16035: PUSH
16036: LD_INT 36
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: LIST
16061: PUSH
16062: LD_INT 101
16064: PUSH
16065: LD_INT 102
16067: PUSH
16068: LD_INT 103
16070: PUSH
16071: LD_INT 105
16073: PUSH
16074: LD_INT 106
16076: PUSH
16077: LD_INT 108
16079: PUSH
16080: LD_INT 109
16082: PUSH
16083: LD_INT 112
16085: PUSH
16086: LD_INT 114
16088: PUSH
16089: LD_INT 116
16091: PUSH
16092: LD_INT 117
16094: PUSH
16095: LD_INT 118
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: ST_TO_ADDR
16116: GO 18215
16118: LD_INT 10
16120: DOUBLE
16121: EQUAL
16122: IFTRUE 16126
16124: GO 16322
16126: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
16127: LD_ADDR_VAR 0 2
16131: PUSH
16132: LD_INT 2
16134: PUSH
16135: LD_INT 4
16137: PUSH
16138: LD_INT 5
16140: PUSH
16141: LD_INT 6
16143: PUSH
16144: LD_INT 7
16146: PUSH
16147: LD_INT 8
16149: PUSH
16150: LD_INT 9
16152: PUSH
16153: LD_INT 10
16155: PUSH
16156: LD_INT 11
16158: PUSH
16159: LD_INT 12
16161: PUSH
16162: LD_INT 13
16164: PUSH
16165: LD_INT 14
16167: PUSH
16168: LD_INT 15
16170: PUSH
16171: LD_INT 16
16173: PUSH
16174: LD_INT 17
16176: PUSH
16177: LD_INT 18
16179: PUSH
16180: LD_INT 19
16182: PUSH
16183: LD_INT 20
16185: PUSH
16186: LD_INT 21
16188: PUSH
16189: LD_INT 22
16191: PUSH
16192: LD_INT 23
16194: PUSH
16195: LD_INT 24
16197: PUSH
16198: LD_INT 25
16200: PUSH
16201: LD_INT 26
16203: PUSH
16204: LD_INT 28
16206: PUSH
16207: LD_INT 30
16209: PUSH
16210: LD_INT 31
16212: PUSH
16213: LD_INT 32
16215: PUSH
16216: LD_INT 36
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 101
16252: PUSH
16253: LD_INT 102
16255: PUSH
16256: LD_INT 103
16258: PUSH
16259: LD_INT 104
16261: PUSH
16262: LD_INT 105
16264: PUSH
16265: LD_INT 106
16267: PUSH
16268: LD_INT 107
16270: PUSH
16271: LD_INT 108
16273: PUSH
16274: LD_INT 109
16276: PUSH
16277: LD_INT 110
16279: PUSH
16280: LD_INT 111
16282: PUSH
16283: LD_INT 112
16285: PUSH
16286: LD_INT 114
16288: PUSH
16289: LD_INT 116
16291: PUSH
16292: LD_INT 117
16294: PUSH
16295: LD_INT 118
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: ST_TO_ADDR
16320: GO 18215
16322: LD_INT 11
16324: DOUBLE
16325: EQUAL
16326: IFTRUE 16330
16328: GO 16534
16330: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: LD_INT 3
16341: PUSH
16342: LD_INT 4
16344: PUSH
16345: LD_INT 5
16347: PUSH
16348: LD_INT 6
16350: PUSH
16351: LD_INT 7
16353: PUSH
16354: LD_INT 8
16356: PUSH
16357: LD_INT 9
16359: PUSH
16360: LD_INT 10
16362: PUSH
16363: LD_INT 11
16365: PUSH
16366: LD_INT 12
16368: PUSH
16369: LD_INT 13
16371: PUSH
16372: LD_INT 14
16374: PUSH
16375: LD_INT 15
16377: PUSH
16378: LD_INT 16
16380: PUSH
16381: LD_INT 17
16383: PUSH
16384: LD_INT 18
16386: PUSH
16387: LD_INT 19
16389: PUSH
16390: LD_INT 20
16392: PUSH
16393: LD_INT 21
16395: PUSH
16396: LD_INT 22
16398: PUSH
16399: LD_INT 23
16401: PUSH
16402: LD_INT 24
16404: PUSH
16405: LD_INT 25
16407: PUSH
16408: LD_INT 26
16410: PUSH
16411: LD_INT 28
16413: PUSH
16414: LD_INT 30
16416: PUSH
16417: LD_INT 31
16419: PUSH
16420: LD_INT 32
16422: PUSH
16423: LD_INT 34
16425: PUSH
16426: LD_INT 36
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 101
16464: PUSH
16465: LD_INT 102
16467: PUSH
16468: LD_INT 103
16470: PUSH
16471: LD_INT 104
16473: PUSH
16474: LD_INT 105
16476: PUSH
16477: LD_INT 106
16479: PUSH
16480: LD_INT 107
16482: PUSH
16483: LD_INT 108
16485: PUSH
16486: LD_INT 109
16488: PUSH
16489: LD_INT 110
16491: PUSH
16492: LD_INT 111
16494: PUSH
16495: LD_INT 112
16497: PUSH
16498: LD_INT 114
16500: PUSH
16501: LD_INT 116
16503: PUSH
16504: LD_INT 117
16506: PUSH
16507: LD_INT 118
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: ST_TO_ADDR
16532: GO 18215
16534: LD_INT 12
16536: DOUBLE
16537: EQUAL
16538: IFTRUE 16542
16540: GO 16762
16542: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
16543: LD_ADDR_VAR 0 2
16547: PUSH
16548: LD_INT 1
16550: PUSH
16551: LD_INT 2
16553: PUSH
16554: LD_INT 3
16556: PUSH
16557: LD_INT 4
16559: PUSH
16560: LD_INT 5
16562: PUSH
16563: LD_INT 6
16565: PUSH
16566: LD_INT 7
16568: PUSH
16569: LD_INT 8
16571: PUSH
16572: LD_INT 9
16574: PUSH
16575: LD_INT 10
16577: PUSH
16578: LD_INT 11
16580: PUSH
16581: LD_INT 12
16583: PUSH
16584: LD_INT 13
16586: PUSH
16587: LD_INT 14
16589: PUSH
16590: LD_INT 15
16592: PUSH
16593: LD_INT 16
16595: PUSH
16596: LD_INT 17
16598: PUSH
16599: LD_INT 18
16601: PUSH
16602: LD_INT 19
16604: PUSH
16605: LD_INT 20
16607: PUSH
16608: LD_INT 21
16610: PUSH
16611: LD_INT 22
16613: PUSH
16614: LD_INT 23
16616: PUSH
16617: LD_INT 24
16619: PUSH
16620: LD_INT 25
16622: PUSH
16623: LD_INT 26
16625: PUSH
16626: LD_INT 27
16628: PUSH
16629: LD_INT 28
16631: PUSH
16632: LD_INT 30
16634: PUSH
16635: LD_INT 31
16637: PUSH
16638: LD_INT 32
16640: PUSH
16641: LD_INT 33
16643: PUSH
16644: LD_INT 34
16646: PUSH
16647: LD_INT 36
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: PUSH
16686: LD_INT 101
16688: PUSH
16689: LD_INT 102
16691: PUSH
16692: LD_INT 103
16694: PUSH
16695: LD_INT 104
16697: PUSH
16698: LD_INT 105
16700: PUSH
16701: LD_INT 106
16703: PUSH
16704: LD_INT 107
16706: PUSH
16707: LD_INT 108
16709: PUSH
16710: LD_INT 109
16712: PUSH
16713: LD_INT 110
16715: PUSH
16716: LD_INT 111
16718: PUSH
16719: LD_INT 112
16721: PUSH
16722: LD_INT 113
16724: PUSH
16725: LD_INT 114
16727: PUSH
16728: LD_INT 116
16730: PUSH
16731: LD_INT 117
16733: PUSH
16734: LD_INT 118
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: ST_TO_ADDR
16760: GO 18215
16762: LD_INT 13
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16978
16770: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
16771: LD_ADDR_VAR 0 2
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: LD_INT 2
16781: PUSH
16782: LD_INT 3
16784: PUSH
16785: LD_INT 4
16787: PUSH
16788: LD_INT 5
16790: PUSH
16791: LD_INT 8
16793: PUSH
16794: LD_INT 9
16796: PUSH
16797: LD_INT 10
16799: PUSH
16800: LD_INT 11
16802: PUSH
16803: LD_INT 12
16805: PUSH
16806: LD_INT 14
16808: PUSH
16809: LD_INT 15
16811: PUSH
16812: LD_INT 16
16814: PUSH
16815: LD_INT 17
16817: PUSH
16818: LD_INT 18
16820: PUSH
16821: LD_INT 19
16823: PUSH
16824: LD_INT 20
16826: PUSH
16827: LD_INT 21
16829: PUSH
16830: LD_INT 22
16832: PUSH
16833: LD_INT 23
16835: PUSH
16836: LD_INT 24
16838: PUSH
16839: LD_INT 25
16841: PUSH
16842: LD_INT 26
16844: PUSH
16845: LD_INT 27
16847: PUSH
16848: LD_INT 28
16850: PUSH
16851: LD_INT 30
16853: PUSH
16854: LD_INT 31
16856: PUSH
16857: LD_INT 32
16859: PUSH
16860: LD_INT 33
16862: PUSH
16863: LD_INT 34
16865: PUSH
16866: LD_INT 36
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 101
16904: PUSH
16905: LD_INT 102
16907: PUSH
16908: LD_INT 103
16910: PUSH
16911: LD_INT 104
16913: PUSH
16914: LD_INT 105
16916: PUSH
16917: LD_INT 106
16919: PUSH
16920: LD_INT 107
16922: PUSH
16923: LD_INT 108
16925: PUSH
16926: LD_INT 109
16928: PUSH
16929: LD_INT 110
16931: PUSH
16932: LD_INT 111
16934: PUSH
16935: LD_INT 112
16937: PUSH
16938: LD_INT 113
16940: PUSH
16941: LD_INT 114
16943: PUSH
16944: LD_INT 116
16946: PUSH
16947: LD_INT 117
16949: PUSH
16950: LD_INT 118
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: ST_TO_ADDR
16976: GO 18215
16978: LD_INT 14
16980: DOUBLE
16981: EQUAL
16982: IFTRUE 16986
16984: GO 17210
16986: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16987: LD_ADDR_VAR 0 2
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 2
16997: PUSH
16998: LD_INT 3
17000: PUSH
17001: LD_INT 4
17003: PUSH
17004: LD_INT 5
17006: PUSH
17007: LD_INT 6
17009: PUSH
17010: LD_INT 7
17012: PUSH
17013: LD_INT 8
17015: PUSH
17016: LD_INT 9
17018: PUSH
17019: LD_INT 10
17021: PUSH
17022: LD_INT 11
17024: PUSH
17025: LD_INT 12
17027: PUSH
17028: LD_INT 13
17030: PUSH
17031: LD_INT 14
17033: PUSH
17034: LD_INT 15
17036: PUSH
17037: LD_INT 16
17039: PUSH
17040: LD_INT 17
17042: PUSH
17043: LD_INT 18
17045: PUSH
17046: LD_INT 19
17048: PUSH
17049: LD_INT 20
17051: PUSH
17052: LD_INT 21
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_INT 23
17060: PUSH
17061: LD_INT 24
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 26
17069: PUSH
17070: LD_INT 27
17072: PUSH
17073: LD_INT 28
17075: PUSH
17076: LD_INT 29
17078: PUSH
17079: LD_INT 30
17081: PUSH
17082: LD_INT 31
17084: PUSH
17085: LD_INT 32
17087: PUSH
17088: LD_INT 33
17090: PUSH
17091: LD_INT 34
17093: PUSH
17094: LD_INT 36
17096: PUSH
17097: EMPTY
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 101
17136: PUSH
17137: LD_INT 102
17139: PUSH
17140: LD_INT 103
17142: PUSH
17143: LD_INT 104
17145: PUSH
17146: LD_INT 105
17148: PUSH
17149: LD_INT 106
17151: PUSH
17152: LD_INT 107
17154: PUSH
17155: LD_INT 108
17157: PUSH
17158: LD_INT 109
17160: PUSH
17161: LD_INT 110
17163: PUSH
17164: LD_INT 111
17166: PUSH
17167: LD_INT 112
17169: PUSH
17170: LD_INT 113
17172: PUSH
17173: LD_INT 114
17175: PUSH
17176: LD_INT 116
17178: PUSH
17179: LD_INT 117
17181: PUSH
17182: LD_INT 118
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: ST_TO_ADDR
17208: GO 18215
17210: LD_INT 15
17212: DOUBLE
17213: EQUAL
17214: IFTRUE 17218
17216: GO 17442
17218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
17219: LD_ADDR_VAR 0 2
17223: PUSH
17224: LD_INT 1
17226: PUSH
17227: LD_INT 2
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: LD_INT 4
17235: PUSH
17236: LD_INT 5
17238: PUSH
17239: LD_INT 6
17241: PUSH
17242: LD_INT 7
17244: PUSH
17245: LD_INT 8
17247: PUSH
17248: LD_INT 9
17250: PUSH
17251: LD_INT 10
17253: PUSH
17254: LD_INT 11
17256: PUSH
17257: LD_INT 12
17259: PUSH
17260: LD_INT 13
17262: PUSH
17263: LD_INT 14
17265: PUSH
17266: LD_INT 15
17268: PUSH
17269: LD_INT 16
17271: PUSH
17272: LD_INT 17
17274: PUSH
17275: LD_INT 18
17277: PUSH
17278: LD_INT 19
17280: PUSH
17281: LD_INT 20
17283: PUSH
17284: LD_INT 21
17286: PUSH
17287: LD_INT 22
17289: PUSH
17290: LD_INT 23
17292: PUSH
17293: LD_INT 24
17295: PUSH
17296: LD_INT 25
17298: PUSH
17299: LD_INT 26
17301: PUSH
17302: LD_INT 27
17304: PUSH
17305: LD_INT 28
17307: PUSH
17308: LD_INT 29
17310: PUSH
17311: LD_INT 30
17313: PUSH
17314: LD_INT 31
17316: PUSH
17317: LD_INT 32
17319: PUSH
17320: LD_INT 33
17322: PUSH
17323: LD_INT 34
17325: PUSH
17326: LD_INT 36
17328: PUSH
17329: EMPTY
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 101
17368: PUSH
17369: LD_INT 102
17371: PUSH
17372: LD_INT 103
17374: PUSH
17375: LD_INT 104
17377: PUSH
17378: LD_INT 105
17380: PUSH
17381: LD_INT 106
17383: PUSH
17384: LD_INT 107
17386: PUSH
17387: LD_INT 108
17389: PUSH
17390: LD_INT 109
17392: PUSH
17393: LD_INT 110
17395: PUSH
17396: LD_INT 111
17398: PUSH
17399: LD_INT 112
17401: PUSH
17402: LD_INT 113
17404: PUSH
17405: LD_INT 114
17407: PUSH
17408: LD_INT 116
17410: PUSH
17411: LD_INT 117
17413: PUSH
17414: LD_INT 118
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: ST_TO_ADDR
17440: GO 18215
17442: LD_INT 16
17444: DOUBLE
17445: EQUAL
17446: IFTRUE 17450
17448: GO 17586
17450: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
17451: LD_ADDR_VAR 0 2
17455: PUSH
17456: LD_INT 2
17458: PUSH
17459: LD_INT 4
17461: PUSH
17462: LD_INT 5
17464: PUSH
17465: LD_INT 7
17467: PUSH
17468: LD_INT 11
17470: PUSH
17471: LD_INT 12
17473: PUSH
17474: LD_INT 15
17476: PUSH
17477: LD_INT 16
17479: PUSH
17480: LD_INT 20
17482: PUSH
17483: LD_INT 21
17485: PUSH
17486: LD_INT 22
17488: PUSH
17489: LD_INT 23
17491: PUSH
17492: LD_INT 25
17494: PUSH
17495: LD_INT 26
17497: PUSH
17498: LD_INT 30
17500: PUSH
17501: LD_INT 31
17503: PUSH
17504: LD_INT 32
17506: PUSH
17507: LD_INT 33
17509: PUSH
17510: LD_INT 34
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 101
17536: PUSH
17537: LD_INT 102
17539: PUSH
17540: LD_INT 103
17542: PUSH
17543: LD_INT 106
17545: PUSH
17546: LD_INT 108
17548: PUSH
17549: LD_INT 112
17551: PUSH
17552: LD_INT 113
17554: PUSH
17555: LD_INT 114
17557: PUSH
17558: LD_INT 116
17560: PUSH
17561: LD_INT 117
17563: PUSH
17564: LD_INT 118
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: PUSH
17580: EMPTY
17581: LIST
17582: LIST
17583: ST_TO_ADDR
17584: GO 18215
17586: LD_INT 17
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17818
17594: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
17595: LD_ADDR_VAR 0 2
17599: PUSH
17600: LD_INT 1
17602: PUSH
17603: LD_INT 2
17605: PUSH
17606: LD_INT 3
17608: PUSH
17609: LD_INT 4
17611: PUSH
17612: LD_INT 5
17614: PUSH
17615: LD_INT 6
17617: PUSH
17618: LD_INT 7
17620: PUSH
17621: LD_INT 8
17623: PUSH
17624: LD_INT 9
17626: PUSH
17627: LD_INT 10
17629: PUSH
17630: LD_INT 11
17632: PUSH
17633: LD_INT 12
17635: PUSH
17636: LD_INT 13
17638: PUSH
17639: LD_INT 14
17641: PUSH
17642: LD_INT 15
17644: PUSH
17645: LD_INT 16
17647: PUSH
17648: LD_INT 17
17650: PUSH
17651: LD_INT 18
17653: PUSH
17654: LD_INT 19
17656: PUSH
17657: LD_INT 20
17659: PUSH
17660: LD_INT 21
17662: PUSH
17663: LD_INT 22
17665: PUSH
17666: LD_INT 23
17668: PUSH
17669: LD_INT 24
17671: PUSH
17672: LD_INT 25
17674: PUSH
17675: LD_INT 26
17677: PUSH
17678: LD_INT 27
17680: PUSH
17681: LD_INT 28
17683: PUSH
17684: LD_INT 29
17686: PUSH
17687: LD_INT 30
17689: PUSH
17690: LD_INT 31
17692: PUSH
17693: LD_INT 32
17695: PUSH
17696: LD_INT 33
17698: PUSH
17699: LD_INT 34
17701: PUSH
17702: LD_INT 36
17704: PUSH
17705: EMPTY
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 101
17744: PUSH
17745: LD_INT 102
17747: PUSH
17748: LD_INT 103
17750: PUSH
17751: LD_INT 104
17753: PUSH
17754: LD_INT 105
17756: PUSH
17757: LD_INT 106
17759: PUSH
17760: LD_INT 107
17762: PUSH
17763: LD_INT 108
17765: PUSH
17766: LD_INT 109
17768: PUSH
17769: LD_INT 110
17771: PUSH
17772: LD_INT 111
17774: PUSH
17775: LD_INT 112
17777: PUSH
17778: LD_INT 113
17780: PUSH
17781: LD_INT 114
17783: PUSH
17784: LD_INT 116
17786: PUSH
17787: LD_INT 117
17789: PUSH
17790: LD_INT 118
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: ST_TO_ADDR
17816: GO 18215
17818: LD_INT 18
17820: DOUBLE
17821: EQUAL
17822: IFTRUE 17826
17824: GO 17974
17826: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
17827: LD_ADDR_VAR 0 2
17831: PUSH
17832: LD_INT 2
17834: PUSH
17835: LD_INT 4
17837: PUSH
17838: LD_INT 5
17840: PUSH
17841: LD_INT 7
17843: PUSH
17844: LD_INT 11
17846: PUSH
17847: LD_INT 12
17849: PUSH
17850: LD_INT 15
17852: PUSH
17853: LD_INT 16
17855: PUSH
17856: LD_INT 20
17858: PUSH
17859: LD_INT 21
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_INT 23
17867: PUSH
17868: LD_INT 25
17870: PUSH
17871: LD_INT 26
17873: PUSH
17874: LD_INT 30
17876: PUSH
17877: LD_INT 31
17879: PUSH
17880: LD_INT 32
17882: PUSH
17883: LD_INT 33
17885: PUSH
17886: LD_INT 34
17888: PUSH
17889: LD_INT 35
17891: PUSH
17892: LD_INT 36
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: PUSH
17918: LD_INT 101
17920: PUSH
17921: LD_INT 102
17923: PUSH
17924: LD_INT 103
17926: PUSH
17927: LD_INT 106
17929: PUSH
17930: LD_INT 108
17932: PUSH
17933: LD_INT 112
17935: PUSH
17936: LD_INT 113
17938: PUSH
17939: LD_INT 114
17941: PUSH
17942: LD_INT 115
17944: PUSH
17945: LD_INT 116
17947: PUSH
17948: LD_INT 117
17950: PUSH
17951: LD_INT 118
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: ST_TO_ADDR
17972: GO 18215
17974: LD_INT 19
17976: DOUBLE
17977: EQUAL
17978: IFTRUE 17982
17980: GO 18214
17982: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17983: LD_ADDR_VAR 0 2
17987: PUSH
17988: LD_INT 1
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 3
17996: PUSH
17997: LD_INT 4
17999: PUSH
18000: LD_INT 5
18002: PUSH
18003: LD_INT 6
18005: PUSH
18006: LD_INT 7
18008: PUSH
18009: LD_INT 8
18011: PUSH
18012: LD_INT 9
18014: PUSH
18015: LD_INT 10
18017: PUSH
18018: LD_INT 11
18020: PUSH
18021: LD_INT 12
18023: PUSH
18024: LD_INT 13
18026: PUSH
18027: LD_INT 14
18029: PUSH
18030: LD_INT 15
18032: PUSH
18033: LD_INT 16
18035: PUSH
18036: LD_INT 17
18038: PUSH
18039: LD_INT 18
18041: PUSH
18042: LD_INT 19
18044: PUSH
18045: LD_INT 20
18047: PUSH
18048: LD_INT 21
18050: PUSH
18051: LD_INT 22
18053: PUSH
18054: LD_INT 23
18056: PUSH
18057: LD_INT 24
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 26
18065: PUSH
18066: LD_INT 27
18068: PUSH
18069: LD_INT 28
18071: PUSH
18072: LD_INT 29
18074: PUSH
18075: LD_INT 30
18077: PUSH
18078: LD_INT 31
18080: PUSH
18081: LD_INT 32
18083: PUSH
18084: LD_INT 33
18086: PUSH
18087: LD_INT 34
18089: PUSH
18090: LD_INT 35
18092: PUSH
18093: LD_INT 36
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 101
18136: PUSH
18137: LD_INT 102
18139: PUSH
18140: LD_INT 103
18142: PUSH
18143: LD_INT 104
18145: PUSH
18146: LD_INT 105
18148: PUSH
18149: LD_INT 106
18151: PUSH
18152: LD_INT 107
18154: PUSH
18155: LD_INT 108
18157: PUSH
18158: LD_INT 109
18160: PUSH
18161: LD_INT 110
18163: PUSH
18164: LD_INT 111
18166: PUSH
18167: LD_INT 112
18169: PUSH
18170: LD_INT 113
18172: PUSH
18173: LD_INT 114
18175: PUSH
18176: LD_INT 115
18178: PUSH
18179: LD_INT 116
18181: PUSH
18182: LD_INT 117
18184: PUSH
18185: LD_INT 118
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: ST_TO_ADDR
18212: GO 18215
18214: POP
// end else
18215: GO 18446
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
18217: LD_ADDR_VAR 0 2
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 3
18230: PUSH
18231: LD_INT 4
18233: PUSH
18234: LD_INT 5
18236: PUSH
18237: LD_INT 6
18239: PUSH
18240: LD_INT 7
18242: PUSH
18243: LD_INT 8
18245: PUSH
18246: LD_INT 9
18248: PUSH
18249: LD_INT 10
18251: PUSH
18252: LD_INT 11
18254: PUSH
18255: LD_INT 12
18257: PUSH
18258: LD_INT 13
18260: PUSH
18261: LD_INT 14
18263: PUSH
18264: LD_INT 15
18266: PUSH
18267: LD_INT 16
18269: PUSH
18270: LD_INT 17
18272: PUSH
18273: LD_INT 18
18275: PUSH
18276: LD_INT 19
18278: PUSH
18279: LD_INT 20
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_INT 23
18290: PUSH
18291: LD_INT 24
18293: PUSH
18294: LD_INT 25
18296: PUSH
18297: LD_INT 26
18299: PUSH
18300: LD_INT 27
18302: PUSH
18303: LD_INT 28
18305: PUSH
18306: LD_INT 29
18308: PUSH
18309: LD_INT 30
18311: PUSH
18312: LD_INT 31
18314: PUSH
18315: LD_INT 32
18317: PUSH
18318: LD_INT 33
18320: PUSH
18321: LD_INT 34
18323: PUSH
18324: LD_INT 35
18326: PUSH
18327: LD_INT 36
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 101
18370: PUSH
18371: LD_INT 102
18373: PUSH
18374: LD_INT 103
18376: PUSH
18377: LD_INT 104
18379: PUSH
18380: LD_INT 105
18382: PUSH
18383: LD_INT 106
18385: PUSH
18386: LD_INT 107
18388: PUSH
18389: LD_INT 108
18391: PUSH
18392: LD_INT 109
18394: PUSH
18395: LD_INT 110
18397: PUSH
18398: LD_INT 111
18400: PUSH
18401: LD_INT 112
18403: PUSH
18404: LD_INT 113
18406: PUSH
18407: LD_INT 114
18409: PUSH
18410: LD_INT 115
18412: PUSH
18413: LD_INT 116
18415: PUSH
18416: LD_INT 117
18418: PUSH
18419: LD_INT 118
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: ST_TO_ADDR
// if result then
18446: LD_VAR 0 2
18450: IFFALSE 19236
// begin normal :=  ;
18452: LD_ADDR_VAR 0 5
18456: PUSH
18457: LD_STRING 
18459: ST_TO_ADDR
// hardcore :=  ;
18460: LD_ADDR_VAR 0 6
18464: PUSH
18465: LD_STRING 
18467: ST_TO_ADDR
// active :=  ;
18468: LD_ADDR_VAR 0 7
18472: PUSH
18473: LD_STRING 
18475: ST_TO_ADDR
// for i = 1 to normalCounter do
18476: LD_ADDR_VAR 0 8
18480: PUSH
18481: DOUBLE
18482: LD_INT 1
18484: DEC
18485: ST_TO_ADDR
18486: LD_EXP 34
18490: PUSH
18491: FOR_TO
18492: IFFALSE 18593
// begin tmp := 0 ;
18494: LD_ADDR_VAR 0 3
18498: PUSH
18499: LD_STRING 0
18501: ST_TO_ADDR
// if result [ 1 ] then
18502: LD_VAR 0 2
18506: PUSH
18507: LD_INT 1
18509: ARRAY
18510: IFFALSE 18575
// if result [ 1 ] [ 1 ] = i then
18512: LD_VAR 0 2
18516: PUSH
18517: LD_INT 1
18519: ARRAY
18520: PUSH
18521: LD_INT 1
18523: ARRAY
18524: PUSH
18525: LD_VAR 0 8
18529: EQUAL
18530: IFFALSE 18575
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
18532: LD_ADDR_VAR 0 2
18536: PUSH
18537: LD_VAR 0 2
18541: PPUSH
18542: LD_INT 1
18544: PPUSH
18545: LD_VAR 0 2
18549: PUSH
18550: LD_INT 1
18552: ARRAY
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: CALL_OW 3
18561: PPUSH
18562: CALL_OW 1
18566: ST_TO_ADDR
// tmp := 1 ;
18567: LD_ADDR_VAR 0 3
18571: PUSH
18572: LD_STRING 1
18574: ST_TO_ADDR
// end ; normal := normal & tmp ;
18575: LD_ADDR_VAR 0 5
18579: PUSH
18580: LD_VAR 0 5
18584: PUSH
18585: LD_VAR 0 3
18589: STR
18590: ST_TO_ADDR
// end ;
18591: GO 18491
18593: POP
18594: POP
// for i = 1 to hardcoreCounter do
18595: LD_ADDR_VAR 0 8
18599: PUSH
18600: DOUBLE
18601: LD_INT 1
18603: DEC
18604: ST_TO_ADDR
18605: LD_EXP 35
18609: PUSH
18610: FOR_TO
18611: IFFALSE 18716
// begin tmp := 0 ;
18613: LD_ADDR_VAR 0 3
18617: PUSH
18618: LD_STRING 0
18620: ST_TO_ADDR
// if result [ 2 ] then
18621: LD_VAR 0 2
18625: PUSH
18626: LD_INT 2
18628: ARRAY
18629: IFFALSE 18698
// if result [ 2 ] [ 1 ] = 100 + i then
18631: LD_VAR 0 2
18635: PUSH
18636: LD_INT 2
18638: ARRAY
18639: PUSH
18640: LD_INT 1
18642: ARRAY
18643: PUSH
18644: LD_INT 100
18646: PUSH
18647: LD_VAR 0 8
18651: PLUS
18652: EQUAL
18653: IFFALSE 18698
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
18655: LD_ADDR_VAR 0 2
18659: PUSH
18660: LD_VAR 0 2
18664: PPUSH
18665: LD_INT 2
18667: PPUSH
18668: LD_VAR 0 2
18672: PUSH
18673: LD_INT 2
18675: ARRAY
18676: PPUSH
18677: LD_INT 1
18679: PPUSH
18680: CALL_OW 3
18684: PPUSH
18685: CALL_OW 1
18689: ST_TO_ADDR
// tmp := 1 ;
18690: LD_ADDR_VAR 0 3
18694: PUSH
18695: LD_STRING 1
18697: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
18698: LD_ADDR_VAR 0 6
18702: PUSH
18703: LD_VAR 0 6
18707: PUSH
18708: LD_VAR 0 3
18712: STR
18713: ST_TO_ADDR
// end ;
18714: GO 18610
18716: POP
18717: POP
// if isGameLoad then
18718: LD_VAR 0 1
18722: IFFALSE 19197
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
18724: LD_ADDR_VAR 0 4
18728: PUSH
18729: LD_EXP 38
18733: PUSH
18734: LD_EXP 37
18738: PUSH
18739: LD_EXP 39
18743: PUSH
18744: LD_EXP 36
18748: PUSH
18749: LD_EXP 40
18753: PUSH
18754: LD_EXP 41
18758: PUSH
18759: LD_EXP 42
18763: PUSH
18764: LD_EXP 43
18768: PUSH
18769: LD_EXP 44
18773: PUSH
18774: LD_EXP 45
18778: PUSH
18779: LD_EXP 46
18783: PUSH
18784: LD_EXP 47
18788: PUSH
18789: LD_EXP 48
18793: PUSH
18794: LD_EXP 49
18798: PUSH
18799: LD_EXP 57
18803: PUSH
18804: LD_EXP 58
18808: PUSH
18809: LD_EXP 59
18813: PUSH
18814: LD_EXP 60
18818: PUSH
18819: LD_EXP 62
18823: PUSH
18824: LD_EXP 63
18828: PUSH
18829: LD_EXP 64
18833: PUSH
18834: LD_EXP 67
18838: PUSH
18839: LD_EXP 69
18843: PUSH
18844: LD_EXP 70
18848: PUSH
18849: LD_EXP 71
18853: PUSH
18854: LD_EXP 73
18858: PUSH
18859: LD_EXP 74
18863: PUSH
18864: LD_EXP 77
18868: PUSH
18869: LD_EXP 78
18873: PUSH
18874: LD_EXP 79
18878: PUSH
18879: LD_EXP 80
18883: PUSH
18884: LD_EXP 81
18888: PUSH
18889: LD_EXP 82
18893: PUSH
18894: LD_EXP 83
18898: PUSH
18899: LD_EXP 84
18903: PUSH
18904: LD_EXP 85
18908: PUSH
18909: LD_EXP 50
18913: PUSH
18914: LD_EXP 51
18918: PUSH
18919: LD_EXP 54
18923: PUSH
18924: LD_EXP 55
18928: PUSH
18929: LD_EXP 56
18933: PUSH
18934: LD_EXP 52
18938: PUSH
18939: LD_EXP 53
18943: PUSH
18944: LD_EXP 61
18948: PUSH
18949: LD_EXP 65
18953: PUSH
18954: LD_EXP 66
18958: PUSH
18959: LD_EXP 68
18963: PUSH
18964: LD_EXP 72
18968: PUSH
18969: LD_EXP 75
18973: PUSH
18974: LD_EXP 76
18978: PUSH
18979: LD_EXP 86
18983: PUSH
18984: LD_EXP 87
18988: PUSH
18989: LD_EXP 88
18993: PUSH
18994: LD_EXP 89
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: ST_TO_ADDR
// tmp :=  ;
19055: LD_ADDR_VAR 0 3
19059: PUSH
19060: LD_STRING 
19062: ST_TO_ADDR
// for i = 1 to normalCounter do
19063: LD_ADDR_VAR 0 8
19067: PUSH
19068: DOUBLE
19069: LD_INT 1
19071: DEC
19072: ST_TO_ADDR
19073: LD_EXP 34
19077: PUSH
19078: FOR_TO
19079: IFFALSE 19115
// begin if flags [ i ] then
19081: LD_VAR 0 4
19085: PUSH
19086: LD_VAR 0 8
19090: ARRAY
19091: IFFALSE 19113
// tmp := tmp & i & ; ;
19093: LD_ADDR_VAR 0 3
19097: PUSH
19098: LD_VAR 0 3
19102: PUSH
19103: LD_VAR 0 8
19107: STR
19108: PUSH
19109: LD_STRING ;
19111: STR
19112: ST_TO_ADDR
// end ;
19113: GO 19078
19115: POP
19116: POP
// for i = 1 to hardcoreCounter do
19117: LD_ADDR_VAR 0 8
19121: PUSH
19122: DOUBLE
19123: LD_INT 1
19125: DEC
19126: ST_TO_ADDR
19127: LD_EXP 35
19131: PUSH
19132: FOR_TO
19133: IFFALSE 19179
// begin if flags [ normalCounter + i ] then
19135: LD_VAR 0 4
19139: PUSH
19140: LD_EXP 34
19144: PUSH
19145: LD_VAR 0 8
19149: PLUS
19150: ARRAY
19151: IFFALSE 19177
// tmp := tmp & ( 100 + i ) & ; ;
19153: LD_ADDR_VAR 0 3
19157: PUSH
19158: LD_VAR 0 3
19162: PUSH
19163: LD_INT 100
19165: PUSH
19166: LD_VAR 0 8
19170: PLUS
19171: STR
19172: PUSH
19173: LD_STRING ;
19175: STR
19176: ST_TO_ADDR
// end ;
19177: GO 19132
19179: POP
19180: POP
// if tmp then
19181: LD_VAR 0 3
19185: IFFALSE 19197
// active := tmp ;
19187: LD_ADDR_VAR 0 7
19191: PUSH
19192: LD_VAR 0 3
19196: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
19197: LD_STRING getStreamItemsFromMission("
19199: PUSH
19200: LD_VAR 0 5
19204: STR
19205: PUSH
19206: LD_STRING ","
19208: STR
19209: PUSH
19210: LD_VAR 0 6
19214: STR
19215: PUSH
19216: LD_STRING ","
19218: STR
19219: PUSH
19220: LD_VAR 0 7
19224: STR
19225: PUSH
19226: LD_STRING ")
19228: STR
19229: PPUSH
19230: CALL_OW 559
// end else
19234: GO 19243
// ToLua ( getStreamItemsFromMission("","","") ) ;
19236: LD_STRING getStreamItemsFromMission("","","")
19238: PPUSH
19239: CALL_OW 559
// end ;
19243: LD_VAR 0 2
19247: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19248: LD_EXP 33
19252: IFFALSE 19260
19254: PUSH
19255: LD_EXP 38
19259: AND
19260: IFFALSE 19384
19262: GO 19264
19264: DISABLE
19265: LD_INT 0
19267: PPUSH
19268: PPUSH
// begin enable ;
19269: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: LD_INT 22
19277: PUSH
19278: LD_OWVAR 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 2
19289: PUSH
19290: LD_INT 34
19292: PUSH
19293: LD_INT 7
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 34
19302: PUSH
19303: LD_INT 45
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 34
19312: PUSH
19313: LD_INT 28
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: LD_INT 34
19322: PUSH
19323: LD_INT 47
19325: PUSH
19326: EMPTY
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PPUSH
19341: CALL_OW 69
19345: ST_TO_ADDR
// if not tmp then
19346: LD_VAR 0 2
19350: NOT
19351: IFFALSE 19355
// exit ;
19353: GO 19384
// for i in tmp do
19355: LD_ADDR_VAR 0 1
19359: PUSH
19360: LD_VAR 0 2
19364: PUSH
19365: FOR_IN
19366: IFFALSE 19382
// begin SetLives ( i , 0 ) ;
19368: LD_VAR 0 1
19372: PPUSH
19373: LD_INT 0
19375: PPUSH
19376: CALL_OW 234
// end ;
19380: GO 19365
19382: POP
19383: POP
// end ;
19384: PPOPN 2
19386: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19387: LD_EXP 33
19391: IFFALSE 19399
19393: PUSH
19394: LD_EXP 39
19398: AND
19399: IFFALSE 19483
19401: GO 19403
19403: DISABLE
19404: LD_INT 0
19406: PPUSH
19407: PPUSH
// begin enable ;
19408: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19409: LD_ADDR_VAR 0 2
19413: PUSH
19414: LD_INT 22
19416: PUSH
19417: LD_OWVAR 2
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: LD_INT 32
19428: PUSH
19429: LD_INT 3
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PPUSH
19440: CALL_OW 69
19444: ST_TO_ADDR
// if not tmp then
19445: LD_VAR 0 2
19449: NOT
19450: IFFALSE 19454
// exit ;
19452: GO 19483
// for i in tmp do
19454: LD_ADDR_VAR 0 1
19458: PUSH
19459: LD_VAR 0 2
19463: PUSH
19464: FOR_IN
19465: IFFALSE 19481
// begin SetLives ( i , 0 ) ;
19467: LD_VAR 0 1
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 234
// end ;
19479: GO 19464
19481: POP
19482: POP
// end ;
19483: PPOPN 2
19485: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19486: LD_EXP 33
19490: IFFALSE 19498
19492: PUSH
19493: LD_EXP 36
19497: AND
19498: IFFALSE 19591
19500: GO 19502
19502: DISABLE
19503: LD_INT 0
19505: PPUSH
// begin enable ;
19506: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19507: LD_ADDR_VAR 0 1
19511: PUSH
19512: LD_INT 22
19514: PUSH
19515: LD_OWVAR 2
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: LD_INT 25
19529: PUSH
19530: LD_INT 5
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 25
19539: PUSH
19540: LD_INT 9
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 25
19549: PUSH
19550: LD_INT 8
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PPUSH
19567: CALL_OW 69
19571: PUSH
19572: FOR_IN
19573: IFFALSE 19589
// begin SetClass ( i , 1 ) ;
19575: LD_VAR 0 1
19579: PPUSH
19580: LD_INT 1
19582: PPUSH
19583: CALL_OW 336
// end ;
19587: GO 19572
19589: POP
19590: POP
// end ;
19591: PPOPN 1
19593: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19594: LD_EXP 33
19598: IFFALSE 19606
19600: PUSH
19601: LD_EXP 37
19605: AND
19606: IFFALSE 19618
19608: PUSH
19609: LD_OWVAR 65
19613: PUSH
19614: LD_INT 7
19616: LESS
19617: AND
19618: IFFALSE 19632
19620: GO 19622
19622: DISABLE
// begin enable ;
19623: ENABLE
// game_speed := 7 ;
19624: LD_ADDR_OWVAR 65
19628: PUSH
19629: LD_INT 7
19631: ST_TO_ADDR
// end ;
19632: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19633: LD_EXP 33
19637: IFFALSE 19645
19639: PUSH
19640: LD_EXP 40
19644: AND
19645: IFFALSE 19847
19647: GO 19649
19649: DISABLE
19650: LD_INT 0
19652: PPUSH
19653: PPUSH
19654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19655: LD_ADDR_VAR 0 3
19659: PUSH
19660: LD_INT 81
19662: PUSH
19663: LD_OWVAR 2
19667: PUSH
19668: EMPTY
19669: LIST
19670: LIST
19671: PUSH
19672: LD_INT 21
19674: PUSH
19675: LD_INT 1
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: ST_TO_ADDR
// if not tmp then
19691: LD_VAR 0 3
19695: NOT
19696: IFFALSE 19700
// exit ;
19698: GO 19847
// if tmp > 5 then
19700: LD_VAR 0 3
19704: PUSH
19705: LD_INT 5
19707: GREATER
19708: IFFALSE 19720
// k := 5 else
19710: LD_ADDR_VAR 0 2
19714: PUSH
19715: LD_INT 5
19717: ST_TO_ADDR
19718: GO 19730
// k := tmp ;
19720: LD_ADDR_VAR 0 2
19724: PUSH
19725: LD_VAR 0 3
19729: ST_TO_ADDR
// for i := 1 to k do
19730: LD_ADDR_VAR 0 1
19734: PUSH
19735: DOUBLE
19736: LD_INT 1
19738: DEC
19739: ST_TO_ADDR
19740: LD_VAR 0 2
19744: PUSH
19745: FOR_TO
19746: IFFALSE 19845
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19748: LD_VAR 0 3
19752: PUSH
19753: LD_VAR 0 1
19757: ARRAY
19758: PPUSH
19759: LD_VAR 0 1
19763: PUSH
19764: LD_INT 4
19766: MOD
19767: PUSH
19768: LD_INT 1
19770: PLUS
19771: PPUSH
19772: CALL_OW 259
19776: PUSH
19777: LD_INT 10
19779: LESS
19780: IFFALSE 19843
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19782: LD_VAR 0 3
19786: PUSH
19787: LD_VAR 0 1
19791: ARRAY
19792: PPUSH
19793: LD_VAR 0 1
19797: PUSH
19798: LD_INT 4
19800: MOD
19801: PUSH
19802: LD_INT 1
19804: PLUS
19805: PPUSH
19806: LD_VAR 0 3
19810: PUSH
19811: LD_VAR 0 1
19815: ARRAY
19816: PPUSH
19817: LD_VAR 0 1
19821: PUSH
19822: LD_INT 4
19824: MOD
19825: PUSH
19826: LD_INT 1
19828: PLUS
19829: PPUSH
19830: CALL_OW 259
19834: PUSH
19835: LD_INT 1
19837: PLUS
19838: PPUSH
19839: CALL_OW 237
19843: GO 19745
19845: POP
19846: POP
// end ;
19847: PPOPN 3
19849: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19850: LD_EXP 33
19854: IFFALSE 19862
19856: PUSH
19857: LD_EXP 41
19861: AND
19862: IFFALSE 19882
19864: GO 19866
19866: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19867: LD_INT 4
19869: PPUSH
19870: LD_OWVAR 2
19874: PPUSH
19875: LD_INT 0
19877: PPUSH
19878: CALL_OW 324
19882: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19883: LD_EXP 33
19887: IFFALSE 19895
19889: PUSH
19890: LD_EXP 70
19894: AND
19895: IFFALSE 19915
19897: GO 19899
19899: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19900: LD_INT 19
19902: PPUSH
19903: LD_OWVAR 2
19907: PPUSH
19908: LD_INT 0
19910: PPUSH
19911: CALL_OW 324
19915: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19916: LD_EXP 33
19920: IFFALSE 19928
19922: PUSH
19923: LD_EXP 42
19927: AND
19928: IFFALSE 20030
19930: GO 19932
19932: DISABLE
19933: LD_INT 0
19935: PPUSH
19936: PPUSH
// begin enable ;
19937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19938: LD_ADDR_VAR 0 2
19942: PUSH
19943: LD_INT 22
19945: PUSH
19946: LD_OWVAR 2
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 2
19957: PUSH
19958: LD_INT 34
19960: PUSH
19961: LD_INT 11
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 34
19970: PUSH
19971: LD_INT 30
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PPUSH
19987: CALL_OW 69
19991: ST_TO_ADDR
// if not tmp then
19992: LD_VAR 0 2
19996: NOT
19997: IFFALSE 20001
// exit ;
19999: GO 20030
// for i in tmp do
20001: LD_ADDR_VAR 0 1
20005: PUSH
20006: LD_VAR 0 2
20010: PUSH
20011: FOR_IN
20012: IFFALSE 20028
// begin SetLives ( i , 0 ) ;
20014: LD_VAR 0 1
20018: PPUSH
20019: LD_INT 0
20021: PPUSH
20022: CALL_OW 234
// end ;
20026: GO 20011
20028: POP
20029: POP
// end ;
20030: PPOPN 2
20032: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20033: LD_EXP 33
20037: IFFALSE 20045
20039: PUSH
20040: LD_EXP 43
20044: AND
20045: IFFALSE 20065
20047: GO 20049
20049: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20050: LD_INT 32
20052: PPUSH
20053: LD_OWVAR 2
20057: PPUSH
20058: LD_INT 0
20060: PPUSH
20061: CALL_OW 324
20065: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20066: LD_EXP 33
20070: IFFALSE 20078
20072: PUSH
20073: LD_EXP 44
20077: AND
20078: IFFALSE 20261
20080: GO 20082
20082: DISABLE
20083: LD_INT 0
20085: PPUSH
20086: PPUSH
20087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20088: LD_ADDR_VAR 0 2
20092: PUSH
20093: LD_INT 22
20095: PUSH
20096: LD_OWVAR 2
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 33
20107: PUSH
20108: LD_INT 3
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: ST_TO_ADDR
// if not tmp then
20124: LD_VAR 0 2
20128: NOT
20129: IFFALSE 20133
// exit ;
20131: GO 20261
// side := 0 ;
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_INT 0
20140: ST_TO_ADDR
// for i := 1 to 8 do
20141: LD_ADDR_VAR 0 1
20145: PUSH
20146: DOUBLE
20147: LD_INT 1
20149: DEC
20150: ST_TO_ADDR
20151: LD_INT 8
20153: PUSH
20154: FOR_TO
20155: IFFALSE 20205
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20157: LD_OWVAR 2
20161: PUSH
20162: LD_VAR 0 1
20166: NONEQUAL
20167: IFFALSE 20189
20169: PUSH
20170: LD_OWVAR 2
20174: PPUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL_OW 81
20184: PUSH
20185: LD_INT 2
20187: EQUAL
20188: AND
20189: IFFALSE 20203
// begin side := i ;
20191: LD_ADDR_VAR 0 3
20195: PUSH
20196: LD_VAR 0 1
20200: ST_TO_ADDR
// break ;
20201: GO 20205
// end ;
20203: GO 20154
20205: POP
20206: POP
// if not side then
20207: LD_VAR 0 3
20211: NOT
20212: IFFALSE 20216
// exit ;
20214: GO 20261
// for i := 1 to tmp do
20216: LD_ADDR_VAR 0 1
20220: PUSH
20221: DOUBLE
20222: LD_INT 1
20224: DEC
20225: ST_TO_ADDR
20226: LD_VAR 0 2
20230: PUSH
20231: FOR_TO
20232: IFFALSE 20259
// if Prob ( 60 ) then
20234: LD_INT 60
20236: PPUSH
20237: CALL_OW 13
20241: IFFALSE 20257
// SetSide ( i , side ) ;
20243: LD_VAR 0 1
20247: PPUSH
20248: LD_VAR 0 3
20252: PPUSH
20253: CALL_OW 235
20257: GO 20231
20259: POP
20260: POP
// end ;
20261: PPOPN 3
20263: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20264: LD_EXP 33
20268: IFFALSE 20276
20270: PUSH
20271: LD_EXP 46
20275: AND
20276: IFFALSE 20395
20278: GO 20280
20280: DISABLE
20281: LD_INT 0
20283: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20284: LD_ADDR_VAR 0 1
20288: PUSH
20289: LD_INT 22
20291: PUSH
20292: LD_OWVAR 2
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: LD_INT 21
20303: PUSH
20304: LD_INT 1
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: PUSH
20311: LD_INT 3
20313: PUSH
20314: LD_INT 23
20316: PUSH
20317: LD_INT 0
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: LIST
20332: PPUSH
20333: CALL_OW 69
20337: PUSH
20338: FOR_IN
20339: IFFALSE 20393
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20341: LD_VAR 0 1
20345: PPUSH
20346: CALL_OW 257
20350: PUSH
20351: LD_INT 1
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: LD_INT 3
20359: PUSH
20360: LD_INT 4
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: LIST
20367: LIST
20368: IN
20369: IFFALSE 20391
// SetClass ( un , rand ( 1 , 4 ) ) ;
20371: LD_VAR 0 1
20375: PPUSH
20376: LD_INT 1
20378: PPUSH
20379: LD_INT 4
20381: PPUSH
20382: CALL_OW 12
20386: PPUSH
20387: CALL_OW 336
20391: GO 20338
20393: POP
20394: POP
// end ;
20395: PPOPN 1
20397: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20398: LD_EXP 33
20402: IFFALSE 20410
20404: PUSH
20405: LD_EXP 45
20409: AND
20410: IFFALSE 20489
20412: GO 20414
20414: DISABLE
20415: LD_INT 0
20417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20418: LD_ADDR_VAR 0 1
20422: PUSH
20423: LD_INT 22
20425: PUSH
20426: LD_OWVAR 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 3
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PPUSH
20449: CALL_OW 69
20453: ST_TO_ADDR
// if not tmp then
20454: LD_VAR 0 1
20458: NOT
20459: IFFALSE 20463
// exit ;
20461: GO 20489
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20463: LD_VAR 0 1
20467: PUSH
20468: LD_INT 1
20470: PPUSH
20471: LD_VAR 0 1
20475: PPUSH
20476: CALL_OW 12
20480: ARRAY
20481: PPUSH
20482: LD_INT 100
20484: PPUSH
20485: CALL_OW 234
// end ;
20489: PPOPN 1
20491: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20492: LD_EXP 33
20496: IFFALSE 20504
20498: PUSH
20499: LD_EXP 47
20503: AND
20504: IFFALSE 20602
20506: GO 20508
20508: DISABLE
20509: LD_INT 0
20511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20512: LD_ADDR_VAR 0 1
20516: PUSH
20517: LD_INT 22
20519: PUSH
20520: LD_OWVAR 2
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PUSH
20529: LD_INT 21
20531: PUSH
20532: LD_INT 1
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 69
20547: ST_TO_ADDR
// if not tmp then
20548: LD_VAR 0 1
20552: NOT
20553: IFFALSE 20557
// exit ;
20555: GO 20602
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20557: LD_VAR 0 1
20561: PUSH
20562: LD_INT 1
20564: PPUSH
20565: LD_VAR 0 1
20569: PPUSH
20570: CALL_OW 12
20574: ARRAY
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_INT 4
20581: PPUSH
20582: CALL_OW 12
20586: PPUSH
20587: LD_INT 3000
20589: PPUSH
20590: LD_INT 9000
20592: PPUSH
20593: CALL_OW 12
20597: PPUSH
20598: CALL_OW 492
// end ;
20602: PPOPN 1
20604: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20605: LD_EXP 33
20609: IFFALSE 20617
20611: PUSH
20612: LD_EXP 48
20616: AND
20617: IFFALSE 20637
20619: GO 20621
20621: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20622: LD_INT 1
20624: PPUSH
20625: LD_OWVAR 2
20629: PPUSH
20630: LD_INT 0
20632: PPUSH
20633: CALL_OW 324
20637: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20638: LD_EXP 33
20642: IFFALSE 20650
20644: PUSH
20645: LD_EXP 49
20649: AND
20650: IFFALSE 20733
20652: GO 20654
20654: DISABLE
20655: LD_INT 0
20657: PPUSH
20658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20659: LD_ADDR_VAR 0 2
20663: PUSH
20664: LD_INT 22
20666: PUSH
20667: LD_OWVAR 2
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 21
20678: PUSH
20679: LD_INT 3
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PPUSH
20690: CALL_OW 69
20694: ST_TO_ADDR
// if not tmp then
20695: LD_VAR 0 2
20699: NOT
20700: IFFALSE 20704
// exit ;
20702: GO 20733
// for i in tmp do
20704: LD_ADDR_VAR 0 1
20708: PUSH
20709: LD_VAR 0 2
20713: PUSH
20714: FOR_IN
20715: IFFALSE 20731
// SetBLevel ( i , 10 ) ;
20717: LD_VAR 0 1
20721: PPUSH
20722: LD_INT 10
20724: PPUSH
20725: CALL_OW 241
20729: GO 20714
20731: POP
20732: POP
// end ;
20733: PPOPN 2
20735: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20736: LD_EXP 33
20740: IFFALSE 20748
20742: PUSH
20743: LD_EXP 50
20747: AND
20748: IFFALSE 20859
20750: GO 20752
20752: DISABLE
20753: LD_INT 0
20755: PPUSH
20756: PPUSH
20757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20758: LD_ADDR_VAR 0 3
20762: PUSH
20763: LD_INT 22
20765: PUSH
20766: LD_OWVAR 2
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 25
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PPUSH
20789: CALL_OW 69
20793: ST_TO_ADDR
// if not tmp then
20794: LD_VAR 0 3
20798: NOT
20799: IFFALSE 20803
// exit ;
20801: GO 20859
// un := tmp [ rand ( 1 , tmp ) ] ;
20803: LD_ADDR_VAR 0 2
20807: PUSH
20808: LD_VAR 0 3
20812: PUSH
20813: LD_INT 1
20815: PPUSH
20816: LD_VAR 0 3
20820: PPUSH
20821: CALL_OW 12
20825: ARRAY
20826: ST_TO_ADDR
// if Crawls ( un ) then
20827: LD_VAR 0 2
20831: PPUSH
20832: CALL_OW 318
20836: IFFALSE 20847
// ComWalk ( un ) ;
20838: LD_VAR 0 2
20842: PPUSH
20843: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20847: LD_VAR 0 2
20851: PPUSH
20852: LD_INT 5
20854: PPUSH
20855: CALL_OW 336
// end ;
20859: PPOPN 3
20861: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
20862: LD_EXP 33
20866: IFFALSE 20874
20868: PUSH
20869: LD_EXP 51
20873: AND
20874: IFFALSE 20886
20876: PUSH
20877: LD_OWVAR 67
20881: PUSH
20882: LD_INT 4
20884: LESS
20885: AND
20886: IFFALSE 20905
20888: GO 20890
20890: DISABLE
// begin Difficulty := Difficulty + 1 ;
20891: LD_ADDR_OWVAR 67
20895: PUSH
20896: LD_OWVAR 67
20900: PUSH
20901: LD_INT 1
20903: PLUS
20904: ST_TO_ADDR
// end ;
20905: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20906: LD_EXP 33
20910: IFFALSE 20918
20912: PUSH
20913: LD_EXP 52
20917: AND
20918: IFFALSE 21021
20920: GO 20922
20922: DISABLE
20923: LD_INT 0
20925: PPUSH
// begin for i := 1 to 5 do
20926: LD_ADDR_VAR 0 1
20930: PUSH
20931: DOUBLE
20932: LD_INT 1
20934: DEC
20935: ST_TO_ADDR
20936: LD_INT 5
20938: PUSH
20939: FOR_TO
20940: IFFALSE 21019
// begin uc_nation := nation_nature ;
20942: LD_ADDR_OWVAR 21
20946: PUSH
20947: LD_INT 0
20949: ST_TO_ADDR
// uc_side := 0 ;
20950: LD_ADDR_OWVAR 20
20954: PUSH
20955: LD_INT 0
20957: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20958: LD_ADDR_OWVAR 29
20962: PUSH
20963: LD_INT 12
20965: PUSH
20966: LD_INT 12
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: ST_TO_ADDR
// hc_agressivity := 20 ;
20973: LD_ADDR_OWVAR 35
20977: PUSH
20978: LD_INT 20
20980: ST_TO_ADDR
// hc_class := class_tiger ;
20981: LD_ADDR_OWVAR 28
20985: PUSH
20986: LD_INT 14
20988: ST_TO_ADDR
// hc_gallery :=  ;
20989: LD_ADDR_OWVAR 33
20993: PUSH
20994: LD_STRING 
20996: ST_TO_ADDR
// hc_name :=  ;
20997: LD_ADDR_OWVAR 26
21001: PUSH
21002: LD_STRING 
21004: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21005: CALL_OW 44
21009: PPUSH
21010: LD_INT 0
21012: PPUSH
21013: CALL_OW 51
// end ;
21017: GO 20939
21019: POP
21020: POP
// end ;
21021: PPOPN 1
21023: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21024: LD_EXP 33
21028: IFFALSE 21036
21030: PUSH
21031: LD_EXP 53
21035: AND
21036: IFFALSE 21045
21038: GO 21040
21040: DISABLE
// StreamSibBomb ;
21041: CALL 21046 0 0
21045: END
// export function StreamSibBomb ; var i , x , y ; begin
21046: LD_INT 0
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
// result := false ;
21052: LD_ADDR_VAR 0 1
21056: PUSH
21057: LD_INT 0
21059: ST_TO_ADDR
// for i := 1 to 16 do
21060: LD_ADDR_VAR 0 2
21064: PUSH
21065: DOUBLE
21066: LD_INT 1
21068: DEC
21069: ST_TO_ADDR
21070: LD_INT 16
21072: PUSH
21073: FOR_TO
21074: IFFALSE 21273
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21076: LD_ADDR_VAR 0 3
21080: PUSH
21081: LD_INT 10
21083: PUSH
21084: LD_INT 20
21086: PUSH
21087: LD_INT 30
21089: PUSH
21090: LD_INT 40
21092: PUSH
21093: LD_INT 50
21095: PUSH
21096: LD_INT 60
21098: PUSH
21099: LD_INT 70
21101: PUSH
21102: LD_INT 80
21104: PUSH
21105: LD_INT 90
21107: PUSH
21108: LD_INT 100
21110: PUSH
21111: LD_INT 110
21113: PUSH
21114: LD_INT 120
21116: PUSH
21117: LD_INT 130
21119: PUSH
21120: LD_INT 140
21122: PUSH
21123: LD_INT 150
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: PPUSH
21146: LD_INT 15
21148: PPUSH
21149: CALL_OW 12
21153: ARRAY
21154: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21155: LD_ADDR_VAR 0 4
21159: PUSH
21160: LD_INT 10
21162: PUSH
21163: LD_INT 20
21165: PUSH
21166: LD_INT 30
21168: PUSH
21169: LD_INT 40
21171: PUSH
21172: LD_INT 50
21174: PUSH
21175: LD_INT 60
21177: PUSH
21178: LD_INT 70
21180: PUSH
21181: LD_INT 80
21183: PUSH
21184: LD_INT 90
21186: PUSH
21187: LD_INT 100
21189: PUSH
21190: LD_INT 110
21192: PUSH
21193: LD_INT 120
21195: PUSH
21196: LD_INT 130
21198: PUSH
21199: LD_INT 140
21201: PUSH
21202: LD_INT 150
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: PUSH
21222: LD_INT 1
21224: PPUSH
21225: LD_INT 15
21227: PPUSH
21228: CALL_OW 12
21232: ARRAY
21233: ST_TO_ADDR
// if ValidHex ( x , y ) then
21234: LD_VAR 0 3
21238: PPUSH
21239: LD_VAR 0 4
21243: PPUSH
21244: CALL_OW 488
21248: IFFALSE 21271
// begin result := [ x , y ] ;
21250: LD_ADDR_VAR 0 1
21254: PUSH
21255: LD_VAR 0 3
21259: PUSH
21260: LD_VAR 0 4
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: ST_TO_ADDR
// break ;
21269: GO 21273
// end ; end ;
21271: GO 21073
21273: POP
21274: POP
// if result then
21275: LD_VAR 0 1
21279: IFFALSE 21339
// begin ToLua ( playSibBomb() ) ;
21281: LD_STRING playSibBomb()
21283: PPUSH
21284: CALL_OW 559
// wait ( 0 0$14 ) ;
21288: LD_INT 490
21290: PPUSH
21291: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21295: LD_VAR 0 1
21299: PUSH
21300: LD_INT 1
21302: ARRAY
21303: PPUSH
21304: LD_VAR 0 1
21308: PUSH
21309: LD_INT 2
21311: ARRAY
21312: PPUSH
21313: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21317: LD_VAR 0 1
21321: PUSH
21322: LD_INT 1
21324: ARRAY
21325: PPUSH
21326: LD_VAR 0 1
21330: PUSH
21331: LD_INT 2
21333: ARRAY
21334: PPUSH
21335: CALL_OW 429
// end ; end ;
21339: LD_VAR 0 1
21343: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21344: LD_EXP 33
21348: IFFALSE 21356
21350: PUSH
21351: LD_EXP 55
21355: AND
21356: IFFALSE 21368
21358: GO 21360
21360: DISABLE
// YouLost (  ) ;
21361: LD_STRING 
21363: PPUSH
21364: CALL_OW 104
21368: END
// every 0 0$1 trigger StreamModeActive and sFog do
21369: LD_EXP 33
21373: IFFALSE 21381
21375: PUSH
21376: LD_EXP 54
21380: AND
21381: IFFALSE 21395
21383: GO 21385
21385: DISABLE
// FogOff ( your_side ) ;
21386: LD_OWVAR 2
21390: PPUSH
21391: CALL_OW 344
21395: END
// every 0 0$1 trigger StreamModeActive and sSun do
21396: LD_EXP 33
21400: IFFALSE 21408
21402: PUSH
21403: LD_EXP 56
21407: AND
21408: IFFALSE 21436
21410: GO 21412
21412: DISABLE
// begin solar_recharge_percent := 0 ;
21413: LD_ADDR_OWVAR 79
21417: PUSH
21418: LD_INT 0
21420: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21421: LD_INT 10500
21423: PPUSH
21424: CALL_OW 67
// solar_recharge_percent := 100 ;
21428: LD_ADDR_OWVAR 79
21432: PUSH
21433: LD_INT 100
21435: ST_TO_ADDR
// end ;
21436: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21437: LD_EXP 33
21441: IFFALSE 21449
21443: PUSH
21444: LD_EXP 57
21448: AND
21449: IFFALSE 21688
21451: GO 21453
21453: DISABLE
21454: LD_INT 0
21456: PPUSH
21457: PPUSH
21458: PPUSH
// begin tmp := [ ] ;
21459: LD_ADDR_VAR 0 3
21463: PUSH
21464: EMPTY
21465: ST_TO_ADDR
// for i := 1 to 6 do
21466: LD_ADDR_VAR 0 1
21470: PUSH
21471: DOUBLE
21472: LD_INT 1
21474: DEC
21475: ST_TO_ADDR
21476: LD_INT 6
21478: PUSH
21479: FOR_TO
21480: IFFALSE 21585
// begin uc_nation := nation_nature ;
21482: LD_ADDR_OWVAR 21
21486: PUSH
21487: LD_INT 0
21489: ST_TO_ADDR
// uc_side := 0 ;
21490: LD_ADDR_OWVAR 20
21494: PUSH
21495: LD_INT 0
21497: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21498: LD_ADDR_OWVAR 29
21502: PUSH
21503: LD_INT 12
21505: PUSH
21506: LD_INT 12
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: ST_TO_ADDR
// hc_agressivity := 20 ;
21513: LD_ADDR_OWVAR 35
21517: PUSH
21518: LD_INT 20
21520: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21521: LD_ADDR_OWVAR 28
21525: PUSH
21526: LD_INT 17
21528: ST_TO_ADDR
// hc_gallery :=  ;
21529: LD_ADDR_OWVAR 33
21533: PUSH
21534: LD_STRING 
21536: ST_TO_ADDR
// hc_name :=  ;
21537: LD_ADDR_OWVAR 26
21541: PUSH
21542: LD_STRING 
21544: ST_TO_ADDR
// un := CreateHuman ;
21545: LD_ADDR_VAR 0 2
21549: PUSH
21550: CALL_OW 44
21554: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21555: LD_VAR 0 2
21559: PPUSH
21560: LD_INT 1
21562: PPUSH
21563: CALL_OW 51
// tmp := tmp ^ un ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 3
21576: PUSH
21577: LD_VAR 0 2
21581: ADD
21582: ST_TO_ADDR
// end ;
21583: GO 21479
21585: POP
21586: POP
// repeat wait ( 0 0$1 ) ;
21587: LD_INT 35
21589: PPUSH
21590: CALL_OW 67
// for un in tmp do
21594: LD_ADDR_VAR 0 2
21598: PUSH
21599: LD_VAR 0 3
21603: PUSH
21604: FOR_IN
21605: IFFALSE 21679
// begin if IsDead ( un ) then
21607: LD_VAR 0 2
21611: PPUSH
21612: CALL_OW 301
21616: IFFALSE 21636
// begin tmp := tmp diff un ;
21618: LD_ADDR_VAR 0 3
21622: PUSH
21623: LD_VAR 0 3
21627: PUSH
21628: LD_VAR 0 2
21632: DIFF
21633: ST_TO_ADDR
// continue ;
21634: GO 21604
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21636: LD_VAR 0 2
21640: PPUSH
21641: LD_INT 3
21643: PUSH
21644: LD_INT 22
21646: PUSH
21647: LD_INT 0
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PPUSH
21658: CALL_OW 69
21662: PPUSH
21663: LD_VAR 0 2
21667: PPUSH
21668: CALL_OW 74
21672: PPUSH
21673: CALL_OW 115
// end ;
21677: GO 21604
21679: POP
21680: POP
// until not tmp ;
21681: LD_VAR 0 3
21685: NOT
21686: IFFALSE 21587
// end ;
21688: PPOPN 3
21690: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21691: LD_EXP 33
21695: IFFALSE 21703
21697: PUSH
21698: LD_EXP 58
21702: AND
21703: IFFALSE 21757
21705: GO 21707
21707: DISABLE
// begin ToLua ( displayTroll(); ) ;
21708: LD_STRING displayTroll();
21710: PPUSH
21711: CALL_OW 559
// wait ( 3 3$00 ) ;
21715: LD_INT 6300
21717: PPUSH
21718: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21722: LD_STRING hideTroll();
21724: PPUSH
21725: CALL_OW 559
// wait ( 1 1$00 ) ;
21729: LD_INT 2100
21731: PPUSH
21732: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21736: LD_STRING displayTroll();
21738: PPUSH
21739: CALL_OW 559
// wait ( 1 1$00 ) ;
21743: LD_INT 2100
21745: PPUSH
21746: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21750: LD_STRING hideTroll();
21752: PPUSH
21753: CALL_OW 559
// end ;
21757: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21758: LD_EXP 33
21762: IFFALSE 21770
21764: PUSH
21765: LD_EXP 59
21769: AND
21770: IFFALSE 21833
21772: GO 21774
21774: DISABLE
21775: LD_INT 0
21777: PPUSH
// begin p := 0 ;
21778: LD_ADDR_VAR 0 1
21782: PUSH
21783: LD_INT 0
21785: ST_TO_ADDR
// repeat game_speed := 1 ;
21786: LD_ADDR_OWVAR 65
21790: PUSH
21791: LD_INT 1
21793: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21794: LD_INT 35
21796: PPUSH
21797: CALL_OW 67
// p := p + 1 ;
21801: LD_ADDR_VAR 0 1
21805: PUSH
21806: LD_VAR 0 1
21810: PUSH
21811: LD_INT 1
21813: PLUS
21814: ST_TO_ADDR
// until p >= 60 ;
21815: LD_VAR 0 1
21819: PUSH
21820: LD_INT 60
21822: GREATEREQUAL
21823: IFFALSE 21786
// game_speed := 4 ;
21825: LD_ADDR_OWVAR 65
21829: PUSH
21830: LD_INT 4
21832: ST_TO_ADDR
// end ;
21833: PPOPN 1
21835: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21836: LD_EXP 33
21840: IFFALSE 21848
21842: PUSH
21843: LD_EXP 60
21847: AND
21848: IFFALSE 21994
21850: GO 21852
21852: DISABLE
21853: LD_INT 0
21855: PPUSH
21856: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: LD_INT 22
21864: PUSH
21865: LD_OWVAR 2
21869: PUSH
21870: EMPTY
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 2
21876: PUSH
21877: LD_INT 30
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 30
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: LIST
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 69
21910: ST_TO_ADDR
// if not depot then
21911: LD_VAR 0 1
21915: NOT
21916: IFFALSE 21920
// exit ;
21918: GO 21994
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21920: LD_ADDR_VAR 0 2
21924: PUSH
21925: LD_VAR 0 1
21929: PUSH
21930: LD_INT 1
21932: PPUSH
21933: LD_VAR 0 1
21937: PPUSH
21938: CALL_OW 12
21942: ARRAY
21943: PPUSH
21944: CALL_OW 274
21948: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21949: LD_VAR 0 2
21953: PPUSH
21954: LD_INT 1
21956: PPUSH
21957: LD_INT 0
21959: PPUSH
21960: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21964: LD_VAR 0 2
21968: PPUSH
21969: LD_INT 2
21971: PPUSH
21972: LD_INT 0
21974: PPUSH
21975: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21979: LD_VAR 0 2
21983: PPUSH
21984: LD_INT 3
21986: PPUSH
21987: LD_INT 0
21989: PPUSH
21990: CALL_OW 277
// end ;
21994: PPOPN 2
21996: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21997: LD_EXP 33
22001: IFFALSE 22009
22003: PUSH
22004: LD_EXP 61
22008: AND
22009: IFFALSE 22106
22011: GO 22013
22013: DISABLE
22014: LD_INT 0
22016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22017: LD_ADDR_VAR 0 1
22021: PUSH
22022: LD_INT 22
22024: PUSH
22025: LD_OWVAR 2
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 21
22036: PUSH
22037: LD_INT 1
22039: PUSH
22040: EMPTY
22041: LIST
22042: LIST
22043: PUSH
22044: LD_INT 3
22046: PUSH
22047: LD_INT 23
22049: PUSH
22050: LD_INT 0
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: LIST
22065: PPUSH
22066: CALL_OW 69
22070: ST_TO_ADDR
// if not tmp then
22071: LD_VAR 0 1
22075: NOT
22076: IFFALSE 22080
// exit ;
22078: GO 22106
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22080: LD_VAR 0 1
22084: PUSH
22085: LD_INT 1
22087: PPUSH
22088: LD_VAR 0 1
22092: PPUSH
22093: CALL_OW 12
22097: ARRAY
22098: PPUSH
22099: LD_INT 200
22101: PPUSH
22102: CALL_OW 234
// end ;
22106: PPOPN 1
22108: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22109: LD_EXP 33
22113: IFFALSE 22121
22115: PUSH
22116: LD_EXP 62
22120: AND
22121: IFFALSE 22200
22123: GO 22125
22125: DISABLE
22126: LD_INT 0
22128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22129: LD_ADDR_VAR 0 1
22133: PUSH
22134: LD_INT 22
22136: PUSH
22137: LD_OWVAR 2
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 21
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PPUSH
22160: CALL_OW 69
22164: ST_TO_ADDR
// if not tmp then
22165: LD_VAR 0 1
22169: NOT
22170: IFFALSE 22174
// exit ;
22172: GO 22200
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22174: LD_VAR 0 1
22178: PUSH
22179: LD_INT 1
22181: PPUSH
22182: LD_VAR 0 1
22186: PPUSH
22187: CALL_OW 12
22191: ARRAY
22192: PPUSH
22193: LD_INT 60
22195: PPUSH
22196: CALL_OW 234
// end ;
22200: PPOPN 1
22202: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22203: LD_EXP 33
22207: IFFALSE 22215
22209: PUSH
22210: LD_EXP 63
22214: AND
22215: IFFALSE 22314
22217: GO 22219
22219: DISABLE
22220: LD_INT 0
22222: PPUSH
22223: PPUSH
// begin enable ;
22224: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22225: LD_ADDR_VAR 0 1
22229: PUSH
22230: LD_INT 22
22232: PUSH
22233: LD_OWVAR 2
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 61
22244: PUSH
22245: EMPTY
22246: LIST
22247: PUSH
22248: LD_INT 33
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 69
22267: ST_TO_ADDR
// if not tmp then
22268: LD_VAR 0 1
22272: NOT
22273: IFFALSE 22277
// exit ;
22275: GO 22314
// for i in tmp do
22277: LD_ADDR_VAR 0 2
22281: PUSH
22282: LD_VAR 0 1
22286: PUSH
22287: FOR_IN
22288: IFFALSE 22312
// if IsControledBy ( i ) then
22290: LD_VAR 0 2
22294: PPUSH
22295: CALL_OW 312
22299: IFFALSE 22310
// ComUnlink ( i ) ;
22301: LD_VAR 0 2
22305: PPUSH
22306: CALL_OW 136
22310: GO 22287
22312: POP
22313: POP
// end ;
22314: PPOPN 2
22316: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22317: LD_EXP 33
22321: IFFALSE 22329
22323: PUSH
22324: LD_EXP 64
22328: AND
22329: IFFALSE 22469
22331: GO 22333
22333: DISABLE
22334: LD_INT 0
22336: PPUSH
22337: PPUSH
// begin ToLua ( displayPowell(); ) ;
22338: LD_STRING displayPowell();
22340: PPUSH
22341: CALL_OW 559
// uc_side := 0 ;
22345: LD_ADDR_OWVAR 20
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
// uc_nation := 2 ;
22353: LD_ADDR_OWVAR 21
22357: PUSH
22358: LD_INT 2
22360: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22361: LD_ADDR_OWVAR 37
22365: PUSH
22366: LD_INT 14
22368: ST_TO_ADDR
// vc_engine := engine_siberite ;
22369: LD_ADDR_OWVAR 39
22373: PUSH
22374: LD_INT 3
22376: ST_TO_ADDR
// vc_control := control_apeman ;
22377: LD_ADDR_OWVAR 38
22381: PUSH
22382: LD_INT 5
22384: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22385: LD_ADDR_OWVAR 40
22389: PUSH
22390: LD_INT 29
22392: ST_TO_ADDR
// un := CreateVehicle ;
22393: LD_ADDR_VAR 0 2
22397: PUSH
22398: CALL_OW 45
22402: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22403: LD_VAR 0 2
22407: PPUSH
22408: LD_INT 1
22410: PPUSH
22411: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22415: LD_INT 35
22417: PPUSH
22418: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22422: LD_VAR 0 2
22426: PPUSH
22427: LD_INT 22
22429: PUSH
22430: LD_OWVAR 2
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PPUSH
22439: CALL_OW 69
22443: PPUSH
22444: LD_VAR 0 2
22448: PPUSH
22449: CALL_OW 74
22453: PPUSH
22454: CALL_OW 115
// until IsDead ( un ) ;
22458: LD_VAR 0 2
22462: PPUSH
22463: CALL_OW 301
22467: IFFALSE 22415
// end ;
22469: PPOPN 2
22471: END
// every 0 0$1 trigger StreamModeActive and sStu do
22472: LD_EXP 33
22476: IFFALSE 22484
22478: PUSH
22479: LD_EXP 72
22483: AND
22484: IFFALSE 22500
22486: GO 22488
22488: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22489: LD_STRING displayStucuk();
22491: PPUSH
22492: CALL_OW 559
// ResetFog ;
22496: CALL_OW 335
// end ;
22500: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22501: LD_EXP 33
22505: IFFALSE 22513
22507: PUSH
22508: LD_EXP 65
22512: AND
22513: IFFALSE 22654
22515: GO 22517
22517: DISABLE
22518: LD_INT 0
22520: PPUSH
22521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22522: LD_ADDR_VAR 0 2
22526: PUSH
22527: LD_INT 22
22529: PUSH
22530: LD_OWVAR 2
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 21
22541: PUSH
22542: LD_INT 1
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PPUSH
22553: CALL_OW 69
22557: ST_TO_ADDR
// if not tmp then
22558: LD_VAR 0 2
22562: NOT
22563: IFFALSE 22567
// exit ;
22565: GO 22654
// un := tmp [ rand ( 1 , tmp ) ] ;
22567: LD_ADDR_VAR 0 1
22571: PUSH
22572: LD_VAR 0 2
22576: PUSH
22577: LD_INT 1
22579: PPUSH
22580: LD_VAR 0 2
22584: PPUSH
22585: CALL_OW 12
22589: ARRAY
22590: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22591: LD_VAR 0 1
22595: PPUSH
22596: LD_INT 0
22598: PPUSH
22599: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22603: LD_VAR 0 1
22607: PPUSH
22608: LD_OWVAR 3
22612: PUSH
22613: LD_VAR 0 1
22617: DIFF
22618: PPUSH
22619: LD_VAR 0 1
22623: PPUSH
22624: CALL_OW 74
22628: PPUSH
22629: CALL_OW 115
// wait ( 0 0$20 ) ;
22633: LD_INT 700
22635: PPUSH
22636: CALL_OW 67
// SetSide ( un , your_side ) ;
22640: LD_VAR 0 1
22644: PPUSH
22645: LD_OWVAR 2
22649: PPUSH
22650: CALL_OW 235
// end ;
22654: PPOPN 2
22656: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22657: LD_EXP 33
22661: IFFALSE 22669
22663: PUSH
22664: LD_EXP 66
22668: AND
22669: IFFALSE 22775
22671: GO 22673
22673: DISABLE
22674: LD_INT 0
22676: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22677: LD_ADDR_VAR 0 1
22681: PUSH
22682: LD_INT 22
22684: PUSH
22685: LD_OWVAR 2
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 2
22696: PUSH
22697: LD_INT 30
22699: PUSH
22700: LD_INT 0
22702: PUSH
22703: EMPTY
22704: LIST
22705: LIST
22706: PUSH
22707: LD_INT 30
22709: PUSH
22710: LD_INT 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL_OW 69
22730: ST_TO_ADDR
// if not depot then
22731: LD_VAR 0 1
22735: NOT
22736: IFFALSE 22740
// exit ;
22738: GO 22775
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22740: LD_VAR 0 1
22744: PUSH
22745: LD_INT 1
22747: ARRAY
22748: PPUSH
22749: CALL_OW 250
22753: PPUSH
22754: LD_VAR 0 1
22758: PUSH
22759: LD_INT 1
22761: ARRAY
22762: PPUSH
22763: CALL_OW 251
22767: PPUSH
22768: LD_INT 70
22770: PPUSH
22771: CALL_OW 495
// end ;
22775: PPOPN 1
22777: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22778: LD_EXP 33
22782: IFFALSE 22790
22784: PUSH
22785: LD_EXP 67
22789: AND
22790: IFFALSE 23001
22792: GO 22794
22794: DISABLE
22795: LD_INT 0
22797: PPUSH
22798: PPUSH
22799: PPUSH
22800: PPUSH
22801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22802: LD_ADDR_VAR 0 5
22806: PUSH
22807: LD_INT 22
22809: PUSH
22810: LD_OWVAR 2
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 21
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PPUSH
22833: CALL_OW 69
22837: ST_TO_ADDR
// if not tmp then
22838: LD_VAR 0 5
22842: NOT
22843: IFFALSE 22847
// exit ;
22845: GO 23001
// for i in tmp do
22847: LD_ADDR_VAR 0 1
22851: PUSH
22852: LD_VAR 0 5
22856: PUSH
22857: FOR_IN
22858: IFFALSE 22999
// begin d := rand ( 0 , 5 ) ;
22860: LD_ADDR_VAR 0 4
22864: PUSH
22865: LD_INT 0
22867: PPUSH
22868: LD_INT 5
22870: PPUSH
22871: CALL_OW 12
22875: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22876: LD_ADDR_VAR 0 2
22880: PUSH
22881: LD_VAR 0 1
22885: PPUSH
22886: CALL_OW 250
22890: PPUSH
22891: LD_VAR 0 4
22895: PPUSH
22896: LD_INT 3
22898: PPUSH
22899: LD_INT 12
22901: PPUSH
22902: CALL_OW 12
22906: PPUSH
22907: CALL_OW 272
22911: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22912: LD_ADDR_VAR 0 3
22916: PUSH
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 251
22926: PPUSH
22927: LD_VAR 0 4
22931: PPUSH
22932: LD_INT 3
22934: PPUSH
22935: LD_INT 12
22937: PPUSH
22938: CALL_OW 12
22942: PPUSH
22943: CALL_OW 273
22947: ST_TO_ADDR
// if ValidHex ( x , y ) then
22948: LD_VAR 0 2
22952: PPUSH
22953: LD_VAR 0 3
22957: PPUSH
22958: CALL_OW 488
22962: IFFALSE 22997
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22964: LD_VAR 0 1
22968: PPUSH
22969: LD_VAR 0 2
22973: PPUSH
22974: LD_VAR 0 3
22978: PPUSH
22979: LD_INT 3
22981: PPUSH
22982: LD_INT 6
22984: PPUSH
22985: CALL_OW 12
22989: PPUSH
22990: LD_INT 1
22992: PPUSH
22993: CALL_OW 483
// end ;
22997: GO 22857
22999: POP
23000: POP
// end ;
23001: PPOPN 5
23003: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23004: LD_EXP 33
23008: IFFALSE 23016
23010: PUSH
23011: LD_EXP 68
23015: AND
23016: IFFALSE 23110
23018: GO 23020
23020: DISABLE
23021: LD_INT 0
23023: PPUSH
23024: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23025: LD_ADDR_VAR 0 2
23029: PUSH
23030: LD_INT 22
23032: PUSH
23033: LD_OWVAR 2
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 32
23044: PUSH
23045: LD_INT 1
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 21
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: LIST
23066: PPUSH
23067: CALL_OW 69
23071: ST_TO_ADDR
// if not tmp then
23072: LD_VAR 0 2
23076: NOT
23077: IFFALSE 23081
// exit ;
23079: GO 23110
// for i in tmp do
23081: LD_ADDR_VAR 0 1
23085: PUSH
23086: LD_VAR 0 2
23090: PUSH
23091: FOR_IN
23092: IFFALSE 23108
// SetFuel ( i , 0 ) ;
23094: LD_VAR 0 1
23098: PPUSH
23099: LD_INT 0
23101: PPUSH
23102: CALL_OW 240
23106: GO 23091
23108: POP
23109: POP
// end ;
23110: PPOPN 2
23112: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23113: LD_EXP 33
23117: IFFALSE 23125
23119: PUSH
23120: LD_EXP 69
23124: AND
23125: IFFALSE 23191
23127: GO 23129
23129: DISABLE
23130: LD_INT 0
23132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23133: LD_ADDR_VAR 0 1
23137: PUSH
23138: LD_INT 22
23140: PUSH
23141: LD_OWVAR 2
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 30
23152: PUSH
23153: LD_INT 29
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PPUSH
23164: CALL_OW 69
23168: ST_TO_ADDR
// if not tmp then
23169: LD_VAR 0 1
23173: NOT
23174: IFFALSE 23178
// exit ;
23176: GO 23191
// DestroyUnit ( tmp [ 1 ] ) ;
23178: LD_VAR 0 1
23182: PUSH
23183: LD_INT 1
23185: ARRAY
23186: PPUSH
23187: CALL_OW 65
// end ;
23191: PPOPN 1
23193: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23194: LD_EXP 33
23198: IFFALSE 23206
23200: PUSH
23201: LD_EXP 71
23205: AND
23206: IFFALSE 23335
23208: GO 23210
23210: DISABLE
23211: LD_INT 0
23213: PPUSH
// begin uc_side := 0 ;
23214: LD_ADDR_OWVAR 20
23218: PUSH
23219: LD_INT 0
23221: ST_TO_ADDR
// uc_nation := nation_arabian ;
23222: LD_ADDR_OWVAR 21
23226: PUSH
23227: LD_INT 2
23229: ST_TO_ADDR
// hc_gallery :=  ;
23230: LD_ADDR_OWVAR 33
23234: PUSH
23235: LD_STRING 
23237: ST_TO_ADDR
// hc_name :=  ;
23238: LD_ADDR_OWVAR 26
23242: PUSH
23243: LD_STRING 
23245: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23246: LD_INT 1
23248: PPUSH
23249: LD_INT 11
23251: PPUSH
23252: LD_INT 10
23254: PPUSH
23255: CALL_OW 380
// un := CreateHuman ;
23259: LD_ADDR_VAR 0 1
23263: PUSH
23264: CALL_OW 44
23268: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23269: LD_VAR 0 1
23273: PPUSH
23274: LD_INT 1
23276: PPUSH
23277: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23281: LD_INT 35
23283: PPUSH
23284: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23288: LD_VAR 0 1
23292: PPUSH
23293: LD_INT 22
23295: PUSH
23296: LD_OWVAR 2
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PPUSH
23305: CALL_OW 69
23309: PPUSH
23310: LD_VAR 0 1
23314: PPUSH
23315: CALL_OW 74
23319: PPUSH
23320: CALL_OW 115
// until IsDead ( un ) ;
23324: LD_VAR 0 1
23328: PPUSH
23329: CALL_OW 301
23333: IFFALSE 23281
// end ;
23335: PPOPN 1
23337: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23338: LD_EXP 33
23342: IFFALSE 23350
23344: PUSH
23345: LD_EXP 73
23349: AND
23350: IFFALSE 23362
23352: GO 23354
23354: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23355: LD_STRING earthquake(getX(game), 0, 32)
23357: PPUSH
23358: CALL_OW 559
23362: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23363: LD_EXP 33
23367: IFFALSE 23375
23369: PUSH
23370: LD_EXP 74
23374: AND
23375: IFFALSE 23466
23377: GO 23379
23379: DISABLE
23380: LD_INT 0
23382: PPUSH
// begin enable ;
23383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23384: LD_ADDR_VAR 0 1
23388: PUSH
23389: LD_INT 22
23391: PUSH
23392: LD_OWVAR 2
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 21
23403: PUSH
23404: LD_INT 2
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 33
23413: PUSH
23414: LD_INT 3
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: PPUSH
23426: CALL_OW 69
23430: ST_TO_ADDR
// if not tmp then
23431: LD_VAR 0 1
23435: NOT
23436: IFFALSE 23440
// exit ;
23438: GO 23466
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23440: LD_VAR 0 1
23444: PUSH
23445: LD_INT 1
23447: PPUSH
23448: LD_VAR 0 1
23452: PPUSH
23453: CALL_OW 12
23457: ARRAY
23458: PPUSH
23459: LD_INT 1
23461: PPUSH
23462: CALL_OW 234
// end ;
23466: PPOPN 1
23468: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23469: LD_EXP 33
23473: IFFALSE 23481
23475: PUSH
23476: LD_EXP 75
23480: AND
23481: IFFALSE 23622
23483: GO 23485
23485: DISABLE
23486: LD_INT 0
23488: PPUSH
23489: PPUSH
23490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23491: LD_ADDR_VAR 0 3
23495: PUSH
23496: LD_INT 22
23498: PUSH
23499: LD_OWVAR 2
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: PUSH
23508: LD_INT 25
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PPUSH
23522: CALL_OW 69
23526: ST_TO_ADDR
// if not tmp then
23527: LD_VAR 0 3
23531: NOT
23532: IFFALSE 23536
// exit ;
23534: GO 23622
// un := tmp [ rand ( 1 , tmp ) ] ;
23536: LD_ADDR_VAR 0 2
23540: PUSH
23541: LD_VAR 0 3
23545: PUSH
23546: LD_INT 1
23548: PPUSH
23549: LD_VAR 0 3
23553: PPUSH
23554: CALL_OW 12
23558: ARRAY
23559: ST_TO_ADDR
// if Crawls ( un ) then
23560: LD_VAR 0 2
23564: PPUSH
23565: CALL_OW 318
23569: IFFALSE 23580
// ComWalk ( un ) ;
23571: LD_VAR 0 2
23575: PPUSH
23576: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23580: LD_VAR 0 2
23584: PPUSH
23585: LD_INT 9
23587: PPUSH
23588: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23592: LD_INT 28
23594: PPUSH
23595: LD_OWVAR 2
23599: PPUSH
23600: LD_INT 2
23602: PPUSH
23603: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23607: LD_INT 29
23609: PPUSH
23610: LD_OWVAR 2
23614: PPUSH
23615: LD_INT 2
23617: PPUSH
23618: CALL_OW 322
// end ;
23622: PPOPN 3
23624: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23625: LD_EXP 33
23629: IFFALSE 23637
23631: PUSH
23632: LD_EXP 76
23636: AND
23637: IFFALSE 23748
23639: GO 23641
23641: DISABLE
23642: LD_INT 0
23644: PPUSH
23645: PPUSH
23646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23647: LD_ADDR_VAR 0 3
23651: PUSH
23652: LD_INT 22
23654: PUSH
23655: LD_OWVAR 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 25
23666: PUSH
23667: LD_INT 1
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PPUSH
23678: CALL_OW 69
23682: ST_TO_ADDR
// if not tmp then
23683: LD_VAR 0 3
23687: NOT
23688: IFFALSE 23692
// exit ;
23690: GO 23748
// un := tmp [ rand ( 1 , tmp ) ] ;
23692: LD_ADDR_VAR 0 2
23696: PUSH
23697: LD_VAR 0 3
23701: PUSH
23702: LD_INT 1
23704: PPUSH
23705: LD_VAR 0 3
23709: PPUSH
23710: CALL_OW 12
23714: ARRAY
23715: ST_TO_ADDR
// if Crawls ( un ) then
23716: LD_VAR 0 2
23720: PPUSH
23721: CALL_OW 318
23725: IFFALSE 23736
// ComWalk ( un ) ;
23727: LD_VAR 0 2
23731: PPUSH
23732: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23736: LD_VAR 0 2
23740: PPUSH
23741: LD_INT 8
23743: PPUSH
23744: CALL_OW 336
// end ;
23748: PPOPN 3
23750: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23751: LD_EXP 33
23755: IFFALSE 23763
23757: PUSH
23758: LD_EXP 77
23762: AND
23763: IFFALSE 23907
23765: GO 23767
23767: DISABLE
23768: LD_INT 0
23770: PPUSH
23771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23772: LD_ADDR_VAR 0 2
23776: PUSH
23777: LD_INT 22
23779: PUSH
23780: LD_OWVAR 2
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 21
23791: PUSH
23792: LD_INT 2
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PUSH
23799: LD_INT 2
23801: PUSH
23802: LD_INT 34
23804: PUSH
23805: LD_INT 12
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 34
23814: PUSH
23815: LD_INT 51
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 34
23824: PUSH
23825: LD_INT 32
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: LIST
23842: PPUSH
23843: CALL_OW 69
23847: ST_TO_ADDR
// if not tmp then
23848: LD_VAR 0 2
23852: NOT
23853: IFFALSE 23857
// exit ;
23855: GO 23907
// for i in tmp do
23857: LD_ADDR_VAR 0 1
23861: PUSH
23862: LD_VAR 0 2
23866: PUSH
23867: FOR_IN
23868: IFFALSE 23905
// if GetCargo ( i , mat_artifact ) = 0 then
23870: LD_VAR 0 1
23874: PPUSH
23875: LD_INT 4
23877: PPUSH
23878: CALL_OW 289
23882: PUSH
23883: LD_INT 0
23885: EQUAL
23886: IFFALSE 23903
// SetCargo ( i , mat_siberit , 100 ) ;
23888: LD_VAR 0 1
23892: PPUSH
23893: LD_INT 3
23895: PPUSH
23896: LD_INT 100
23898: PPUSH
23899: CALL_OW 290
23903: GO 23867
23905: POP
23906: POP
// end ;
23907: PPOPN 2
23909: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23910: LD_EXP 33
23914: IFFALSE 23922
23916: PUSH
23917: LD_EXP 78
23921: AND
23922: IFFALSE 24105
23924: GO 23926
23926: DISABLE
23927: LD_INT 0
23929: PPUSH
23930: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23931: LD_ADDR_VAR 0 2
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_OWVAR 2
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PPUSH
23948: CALL_OW 69
23952: ST_TO_ADDR
// if not tmp then
23953: LD_VAR 0 2
23957: NOT
23958: IFFALSE 23962
// exit ;
23960: GO 24105
// for i := 1 to 2 do
23962: LD_ADDR_VAR 0 1
23966: PUSH
23967: DOUBLE
23968: LD_INT 1
23970: DEC
23971: ST_TO_ADDR
23972: LD_INT 2
23974: PUSH
23975: FOR_TO
23976: IFFALSE 24103
// begin uc_side := your_side ;
23978: LD_ADDR_OWVAR 20
23982: PUSH
23983: LD_OWVAR 2
23987: ST_TO_ADDR
// uc_nation := nation_american ;
23988: LD_ADDR_OWVAR 21
23992: PUSH
23993: LD_INT 1
23995: ST_TO_ADDR
// vc_chassis := us_morphling ;
23996: LD_ADDR_OWVAR 37
24000: PUSH
24001: LD_INT 5
24003: ST_TO_ADDR
// vc_engine := engine_siberite ;
24004: LD_ADDR_OWVAR 39
24008: PUSH
24009: LD_INT 3
24011: ST_TO_ADDR
// vc_control := control_computer ;
24012: LD_ADDR_OWVAR 38
24016: PUSH
24017: LD_INT 3
24019: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24020: LD_ADDR_OWVAR 40
24024: PUSH
24025: LD_INT 10
24027: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24028: LD_VAR 0 2
24032: PUSH
24033: LD_INT 1
24035: ARRAY
24036: PPUSH
24037: CALL_OW 310
24041: NOT
24042: IFFALSE 24089
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24044: CALL_OW 45
24048: PPUSH
24049: LD_VAR 0 2
24053: PUSH
24054: LD_INT 1
24056: ARRAY
24057: PPUSH
24058: CALL_OW 250
24062: PPUSH
24063: LD_VAR 0 2
24067: PUSH
24068: LD_INT 1
24070: ARRAY
24071: PPUSH
24072: CALL_OW 251
24076: PPUSH
24077: LD_INT 12
24079: PPUSH
24080: LD_INT 1
24082: PPUSH
24083: CALL_OW 50
24087: GO 24101
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24089: CALL_OW 45
24093: PPUSH
24094: LD_INT 1
24096: PPUSH
24097: CALL_OW 51
// end ;
24101: GO 23975
24103: POP
24104: POP
// end ;
24105: PPOPN 2
24107: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24108: LD_EXP 33
24112: IFFALSE 24120
24114: PUSH
24115: LD_EXP 79
24119: AND
24120: IFFALSE 24342
24122: GO 24124
24124: DISABLE
24125: LD_INT 0
24127: PPUSH
24128: PPUSH
24129: PPUSH
24130: PPUSH
24131: PPUSH
24132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24133: LD_ADDR_VAR 0 6
24137: PUSH
24138: LD_INT 22
24140: PUSH
24141: LD_OWVAR 2
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: LD_INT 21
24152: PUSH
24153: LD_INT 1
24155: PUSH
24156: EMPTY
24157: LIST
24158: LIST
24159: PUSH
24160: LD_INT 3
24162: PUSH
24163: LD_INT 23
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: PPUSH
24182: CALL_OW 69
24186: ST_TO_ADDR
// if not tmp then
24187: LD_VAR 0 6
24191: NOT
24192: IFFALSE 24196
// exit ;
24194: GO 24342
// s1 := rand ( 1 , 4 ) ;
24196: LD_ADDR_VAR 0 2
24200: PUSH
24201: LD_INT 1
24203: PPUSH
24204: LD_INT 4
24206: PPUSH
24207: CALL_OW 12
24211: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24212: LD_ADDR_VAR 0 4
24216: PUSH
24217: LD_VAR 0 6
24221: PUSH
24222: LD_INT 1
24224: ARRAY
24225: PPUSH
24226: LD_VAR 0 2
24230: PPUSH
24231: CALL_OW 259
24235: ST_TO_ADDR
// if s1 = 1 then
24236: LD_VAR 0 2
24240: PUSH
24241: LD_INT 1
24243: EQUAL
24244: IFFALSE 24264
// s2 := rand ( 2 , 4 ) else
24246: LD_ADDR_VAR 0 3
24250: PUSH
24251: LD_INT 2
24253: PPUSH
24254: LD_INT 4
24256: PPUSH
24257: CALL_OW 12
24261: ST_TO_ADDR
24262: GO 24272
// s2 := 1 ;
24264: LD_ADDR_VAR 0 3
24268: PUSH
24269: LD_INT 1
24271: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24272: LD_ADDR_VAR 0 5
24276: PUSH
24277: LD_VAR 0 6
24281: PUSH
24282: LD_INT 1
24284: ARRAY
24285: PPUSH
24286: LD_VAR 0 3
24290: PPUSH
24291: CALL_OW 259
24295: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24296: LD_VAR 0 6
24300: PUSH
24301: LD_INT 1
24303: ARRAY
24304: PPUSH
24305: LD_VAR 0 2
24309: PPUSH
24310: LD_VAR 0 5
24314: PPUSH
24315: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24319: LD_VAR 0 6
24323: PUSH
24324: LD_INT 1
24326: ARRAY
24327: PPUSH
24328: LD_VAR 0 3
24332: PPUSH
24333: LD_VAR 0 4
24337: PPUSH
24338: CALL_OW 237
// end ;
24342: PPOPN 6
24344: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24345: LD_EXP 33
24349: IFFALSE 24357
24351: PUSH
24352: LD_EXP 80
24356: AND
24357: IFFALSE 24436
24359: GO 24361
24361: DISABLE
24362: LD_INT 0
24364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24365: LD_ADDR_VAR 0 1
24369: PUSH
24370: LD_INT 22
24372: PUSH
24373: LD_OWVAR 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 30
24384: PUSH
24385: LD_INT 3
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PPUSH
24396: CALL_OW 69
24400: ST_TO_ADDR
// if not tmp then
24401: LD_VAR 0 1
24405: NOT
24406: IFFALSE 24410
// exit ;
24408: GO 24436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24410: LD_VAR 0 1
24414: PUSH
24415: LD_INT 1
24417: PPUSH
24418: LD_VAR 0 1
24422: PPUSH
24423: CALL_OW 12
24427: ARRAY
24428: PPUSH
24429: LD_INT 1
24431: PPUSH
24432: CALL_OW 234
// end ;
24436: PPOPN 1
24438: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24439: LD_EXP 33
24443: IFFALSE 24451
24445: PUSH
24446: LD_EXP 81
24450: AND
24451: IFFALSE 24563
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
24459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24460: LD_ADDR_VAR 0 2
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_OWVAR 2
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: LD_INT 30
24482: PUSH
24483: LD_INT 27
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 30
24492: PUSH
24493: LD_INT 26
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 30
24502: PUSH
24503: LD_INT 28
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PPUSH
24520: CALL_OW 69
24524: ST_TO_ADDR
// if not tmp then
24525: LD_VAR 0 2
24529: NOT
24530: IFFALSE 24534
// exit ;
24532: GO 24563
// for i in tmp do
24534: LD_ADDR_VAR 0 1
24538: PUSH
24539: LD_VAR 0 2
24543: PUSH
24544: FOR_IN
24545: IFFALSE 24561
// SetLives ( i , 1 ) ;
24547: LD_VAR 0 1
24551: PPUSH
24552: LD_INT 1
24554: PPUSH
24555: CALL_OW 234
24559: GO 24544
24561: POP
24562: POP
// end ;
24563: PPOPN 2
24565: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24566: LD_EXP 33
24570: IFFALSE 24578
24572: PUSH
24573: LD_EXP 82
24577: AND
24578: IFFALSE 24865
24580: GO 24582
24582: DISABLE
24583: LD_INT 0
24585: PPUSH
24586: PPUSH
24587: PPUSH
// begin i := rand ( 1 , 7 ) ;
24588: LD_ADDR_VAR 0 1
24592: PUSH
24593: LD_INT 1
24595: PPUSH
24596: LD_INT 7
24598: PPUSH
24599: CALL_OW 12
24603: ST_TO_ADDR
// case i of 1 :
24604: LD_VAR 0 1
24608: PUSH
24609: LD_INT 1
24611: DOUBLE
24612: EQUAL
24613: IFTRUE 24617
24615: GO 24627
24617: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24618: LD_STRING earthquake(getX(game), 0, 32)
24620: PPUSH
24621: CALL_OW 559
24625: GO 24865
24627: LD_INT 2
24629: DOUBLE
24630: EQUAL
24631: IFTRUE 24635
24633: GO 24649
24635: POP
// begin ToLua ( displayStucuk(); ) ;
24636: LD_STRING displayStucuk();
24638: PPUSH
24639: CALL_OW 559
// ResetFog ;
24643: CALL_OW 335
// end ; 3 :
24647: GO 24865
24649: LD_INT 3
24651: DOUBLE
24652: EQUAL
24653: IFTRUE 24657
24655: GO 24761
24657: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_INT 22
24665: PUSH
24666: LD_OWVAR 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 25
24677: PUSH
24678: LD_INT 1
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PPUSH
24689: CALL_OW 69
24693: ST_TO_ADDR
// if not tmp then
24694: LD_VAR 0 2
24698: NOT
24699: IFFALSE 24703
// exit ;
24701: GO 24865
// un := tmp [ rand ( 1 , tmp ) ] ;
24703: LD_ADDR_VAR 0 3
24707: PUSH
24708: LD_VAR 0 2
24712: PUSH
24713: LD_INT 1
24715: PPUSH
24716: LD_VAR 0 2
24720: PPUSH
24721: CALL_OW 12
24725: ARRAY
24726: ST_TO_ADDR
// if Crawls ( un ) then
24727: LD_VAR 0 3
24731: PPUSH
24732: CALL_OW 318
24736: IFFALSE 24747
// ComWalk ( un ) ;
24738: LD_VAR 0 3
24742: PPUSH
24743: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24747: LD_VAR 0 3
24751: PPUSH
24752: LD_INT 8
24754: PPUSH
24755: CALL_OW 336
// end ; 4 :
24759: GO 24865
24761: LD_INT 4
24763: DOUBLE
24764: EQUAL
24765: IFTRUE 24769
24767: GO 24843
24769: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24770: LD_ADDR_VAR 0 2
24774: PUSH
24775: LD_INT 22
24777: PUSH
24778: LD_OWVAR 2
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: LD_INT 30
24789: PUSH
24790: LD_INT 29
24792: PUSH
24793: EMPTY
24794: LIST
24795: LIST
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PPUSH
24801: CALL_OW 69
24805: ST_TO_ADDR
// if not tmp then
24806: LD_VAR 0 2
24810: NOT
24811: IFFALSE 24815
// exit ;
24813: GO 24865
// CenterNowOnUnits ( tmp [ 1 ] ) ;
24815: LD_VAR 0 2
24819: PUSH
24820: LD_INT 1
24822: ARRAY
24823: PPUSH
24824: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
24828: LD_VAR 0 2
24832: PUSH
24833: LD_INT 1
24835: ARRAY
24836: PPUSH
24837: CALL_OW 65
// end ; 5 .. 7 :
24841: GO 24865
24843: LD_INT 5
24845: DOUBLE
24846: GREATEREQUAL
24847: IFFALSE 24855
24849: LD_INT 7
24851: DOUBLE
24852: LESSEQUAL
24853: IFTRUE 24857
24855: GO 24864
24857: POP
// StreamSibBomb ; end ;
24858: CALL 21046 0 0
24862: GO 24865
24864: POP
// end ;
24865: PPOPN 3
24867: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24868: LD_EXP 33
24872: IFFALSE 24880
24874: PUSH
24875: LD_EXP 83
24879: AND
24880: IFFALSE 25036
24882: GO 24884
24884: DISABLE
24885: LD_INT 0
24887: PPUSH
24888: PPUSH
24889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24890: LD_ADDR_VAR 0 2
24894: PUSH
24895: LD_INT 81
24897: PUSH
24898: LD_OWVAR 2
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 2
24909: PUSH
24910: LD_INT 21
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 21
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: LIST
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PPUSH
24939: CALL_OW 69
24943: ST_TO_ADDR
// if not tmp then
24944: LD_VAR 0 2
24948: NOT
24949: IFFALSE 24953
// exit ;
24951: GO 25036
// p := 0 ;
24953: LD_ADDR_VAR 0 3
24957: PUSH
24958: LD_INT 0
24960: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24961: LD_INT 35
24963: PPUSH
24964: CALL_OW 67
// p := p + 1 ;
24968: LD_ADDR_VAR 0 3
24972: PUSH
24973: LD_VAR 0 3
24977: PUSH
24978: LD_INT 1
24980: PLUS
24981: ST_TO_ADDR
// for i in tmp do
24982: LD_ADDR_VAR 0 1
24986: PUSH
24987: LD_VAR 0 2
24991: PUSH
24992: FOR_IN
24993: IFFALSE 25024
// if GetLives ( i ) < 1000 then
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL_OW 256
25004: PUSH
25005: LD_INT 1000
25007: LESS
25008: IFFALSE 25022
// SetLives ( i , 1000 ) ;
25010: LD_VAR 0 1
25014: PPUSH
25015: LD_INT 1000
25017: PPUSH
25018: CALL_OW 234
25022: GO 24992
25024: POP
25025: POP
// until p > 20 ;
25026: LD_VAR 0 3
25030: PUSH
25031: LD_INT 20
25033: GREATER
25034: IFFALSE 24961
// end ;
25036: PPOPN 3
25038: END
// every 0 0$1 trigger StreamModeActive and sTime do
25039: LD_EXP 33
25043: IFFALSE 25051
25045: PUSH
25046: LD_EXP 84
25050: AND
25051: IFFALSE 25086
25053: GO 25055
25055: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25056: LD_INT 28
25058: PPUSH
25059: LD_OWVAR 2
25063: PPUSH
25064: LD_INT 2
25066: PPUSH
25067: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25071: LD_INT 30
25073: PPUSH
25074: LD_OWVAR 2
25078: PPUSH
25079: LD_INT 2
25081: PPUSH
25082: CALL_OW 322
// end ;
25086: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25087: LD_EXP 33
25091: IFFALSE 25099
25093: PUSH
25094: LD_EXP 85
25098: AND
25099: IFFALSE 25220
25101: GO 25103
25103: DISABLE
25104: LD_INT 0
25106: PPUSH
25107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25108: LD_ADDR_VAR 0 2
25112: PUSH
25113: LD_INT 22
25115: PUSH
25116: LD_OWVAR 2
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PUSH
25125: LD_INT 21
25127: PUSH
25128: LD_INT 1
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 3
25137: PUSH
25138: LD_INT 23
25140: PUSH
25141: LD_INT 0
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: PPUSH
25157: CALL_OW 69
25161: ST_TO_ADDR
// if not tmp then
25162: LD_VAR 0 2
25166: NOT
25167: IFFALSE 25171
// exit ;
25169: GO 25220
// for i in tmp do
25171: LD_ADDR_VAR 0 1
25175: PUSH
25176: LD_VAR 0 2
25180: PUSH
25181: FOR_IN
25182: IFFALSE 25218
// begin if Crawls ( i ) then
25184: LD_VAR 0 1
25188: PPUSH
25189: CALL_OW 318
25193: IFFALSE 25204
// ComWalk ( i ) ;
25195: LD_VAR 0 1
25199: PPUSH
25200: CALL_OW 138
// SetClass ( i , 2 ) ;
25204: LD_VAR 0 1
25208: PPUSH
25209: LD_INT 2
25211: PPUSH
25212: CALL_OW 336
// end ;
25216: GO 25181
25218: POP
25219: POP
// end ;
25220: PPOPN 2
25222: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25223: LD_EXP 33
25227: IFFALSE 25235
25229: PUSH
25230: LD_EXP 86
25234: AND
25235: IFFALSE 25525
25237: GO 25239
25239: DISABLE
25240: LD_INT 0
25242: PPUSH
25243: PPUSH
25244: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25245: LD_OWVAR 2
25249: PPUSH
25250: LD_INT 9
25252: PPUSH
25253: LD_INT 1
25255: PPUSH
25256: LD_INT 1
25258: PPUSH
25259: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25263: LD_INT 9
25265: PPUSH
25266: LD_OWVAR 2
25270: PPUSH
25271: CALL_OW 343
// uc_side := 9 ;
25275: LD_ADDR_OWVAR 20
25279: PUSH
25280: LD_INT 9
25282: ST_TO_ADDR
// uc_nation := 2 ;
25283: LD_ADDR_OWVAR 21
25287: PUSH
25288: LD_INT 2
25290: ST_TO_ADDR
// hc_name := Dark Warrior ;
25291: LD_ADDR_OWVAR 26
25295: PUSH
25296: LD_STRING Dark Warrior
25298: ST_TO_ADDR
// hc_gallery :=  ;
25299: LD_ADDR_OWVAR 33
25303: PUSH
25304: LD_STRING 
25306: ST_TO_ADDR
// hc_noskilllimit := true ;
25307: LD_ADDR_OWVAR 76
25311: PUSH
25312: LD_INT 1
25314: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25315: LD_ADDR_OWVAR 31
25319: PUSH
25320: LD_INT 30
25322: PUSH
25323: LD_INT 30
25325: PUSH
25326: LD_INT 30
25328: PUSH
25329: LD_INT 30
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: ST_TO_ADDR
// un := CreateHuman ;
25338: LD_ADDR_VAR 0 3
25342: PUSH
25343: CALL_OW 44
25347: ST_TO_ADDR
// hc_noskilllimit := false ;
25348: LD_ADDR_OWVAR 76
25352: PUSH
25353: LD_INT 0
25355: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25356: LD_VAR 0 3
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 51
// ToLua ( playRanger() ) ;
25368: LD_STRING playRanger()
25370: PPUSH
25371: CALL_OW 559
// p := 0 ;
25375: LD_ADDR_VAR 0 2
25379: PUSH
25380: LD_INT 0
25382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25383: LD_INT 35
25385: PPUSH
25386: CALL_OW 67
// p := p + 1 ;
25390: LD_ADDR_VAR 0 2
25394: PUSH
25395: LD_VAR 0 2
25399: PUSH
25400: LD_INT 1
25402: PLUS
25403: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL_OW 256
25413: PUSH
25414: LD_INT 1000
25416: LESS
25417: IFFALSE 25431
// SetLives ( un , 1000 ) ;
25419: LD_VAR 0 3
25423: PPUSH
25424: LD_INT 1000
25426: PPUSH
25427: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25431: LD_VAR 0 3
25435: PPUSH
25436: LD_INT 81
25438: PUSH
25439: LD_OWVAR 2
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: LD_INT 91
25450: PUSH
25451: LD_VAR 0 3
25455: PUSH
25456: LD_INT 30
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: LIST
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PPUSH
25468: CALL_OW 69
25472: PPUSH
25473: LD_VAR 0 3
25477: PPUSH
25478: CALL_OW 74
25482: PPUSH
25483: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
25487: LD_VAR 0 2
25491: PUSH
25492: LD_INT 80
25494: GREATER
25495: IFTRUE 25508
25497: PUSH
25498: LD_VAR 0 3
25502: PPUSH
25503: CALL_OW 301
25507: OR
25508: IFFALSE 25383
// if un then
25510: LD_VAR 0 3
25514: IFFALSE 25525
// RemoveUnit ( un ) ;
25516: LD_VAR 0 3
25520: PPUSH
25521: CALL_OW 64
// end ;
25525: PPOPN 3
25527: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
25528: LD_EXP 87
25532: IFFALSE 25648
25534: GO 25536
25536: DISABLE
25537: LD_INT 0
25539: PPUSH
25540: PPUSH
25541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25542: LD_ADDR_VAR 0 2
25546: PUSH
25547: LD_INT 81
25549: PUSH
25550: LD_OWVAR 2
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 21
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PPUSH
25573: CALL_OW 69
25577: ST_TO_ADDR
// ToLua ( playComputer() ) ;
25578: LD_STRING playComputer()
25580: PPUSH
25581: CALL_OW 559
// if not tmp then
25585: LD_VAR 0 2
25589: NOT
25590: IFFALSE 25594
// exit ;
25592: GO 25648
// for i in tmp do
25594: LD_ADDR_VAR 0 1
25598: PUSH
25599: LD_VAR 0 2
25603: PUSH
25604: FOR_IN
25605: IFFALSE 25646
// for j := 1 to 4 do
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: DOUBLE
25613: LD_INT 1
25615: DEC
25616: ST_TO_ADDR
25617: LD_INT 4
25619: PUSH
25620: FOR_TO
25621: IFFALSE 25642
// SetSkill ( i , j , 10 ) ;
25623: LD_VAR 0 1
25627: PPUSH
25628: LD_VAR 0 3
25632: PPUSH
25633: LD_INT 10
25635: PPUSH
25636: CALL_OW 237
25640: GO 25620
25642: POP
25643: POP
25644: GO 25604
25646: POP
25647: POP
// end ;
25648: PPOPN 3
25650: END
// every 0 0$1 trigger s30 do var i , tmp ;
25651: LD_EXP 88
25655: IFFALSE 25724
25657: GO 25659
25659: DISABLE
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25664: LD_ADDR_VAR 0 2
25668: PUSH
25669: LD_INT 22
25671: PUSH
25672: LD_OWVAR 2
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PPUSH
25681: CALL_OW 69
25685: ST_TO_ADDR
// if not tmp then
25686: LD_VAR 0 2
25690: NOT
25691: IFFALSE 25695
// exit ;
25693: GO 25724
// for i in tmp do
25695: LD_ADDR_VAR 0 1
25699: PUSH
25700: LD_VAR 0 2
25704: PUSH
25705: FOR_IN
25706: IFFALSE 25722
// SetLives ( i , 300 ) ;
25708: LD_VAR 0 1
25712: PPUSH
25713: LD_INT 300
25715: PPUSH
25716: CALL_OW 234
25720: GO 25705
25722: POP
25723: POP
// end ;
25724: PPOPN 2
25726: END
// every 0 0$1 trigger s60 do var i , tmp ;
25727: LD_EXP 89
25731: IFFALSE 25800
25733: GO 25735
25735: DISABLE
25736: LD_INT 0
25738: PPUSH
25739: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25740: LD_ADDR_VAR 0 2
25744: PUSH
25745: LD_INT 22
25747: PUSH
25748: LD_OWVAR 2
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PPUSH
25757: CALL_OW 69
25761: ST_TO_ADDR
// if not tmp then
25762: LD_VAR 0 2
25766: NOT
25767: IFFALSE 25771
// exit ;
25769: GO 25800
// for i in tmp do
25771: LD_ADDR_VAR 0 1
25775: PUSH
25776: LD_VAR 0 2
25780: PUSH
25781: FOR_IN
25782: IFFALSE 25798
// SetLives ( i , 600 ) ;
25784: LD_VAR 0 1
25788: PPUSH
25789: LD_INT 600
25791: PPUSH
25792: CALL_OW 234
25796: GO 25781
25798: POP
25799: POP
// end ;
25800: PPOPN 2
25802: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25803: LD_INT 0
25805: PPUSH
// case cmd of 301 :
25806: LD_VAR 0 1
25810: PUSH
25811: LD_INT 301
25813: DOUBLE
25814: EQUAL
25815: IFTRUE 25819
25817: GO 25851
25819: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25820: LD_VAR 0 6
25824: PPUSH
25825: LD_VAR 0 7
25829: PPUSH
25830: LD_VAR 0 8
25834: PPUSH
25835: LD_VAR 0 4
25839: PPUSH
25840: LD_VAR 0 5
25844: PPUSH
25845: CALL 27064 0 5
25849: GO 25972
25851: LD_INT 302
25853: DOUBLE
25854: EQUAL
25855: IFTRUE 25859
25857: GO 25896
25859: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25860: LD_VAR 0 6
25864: PPUSH
25865: LD_VAR 0 7
25869: PPUSH
25870: LD_VAR 0 8
25874: PPUSH
25875: LD_VAR 0 9
25879: PPUSH
25880: LD_VAR 0 4
25884: PPUSH
25885: LD_VAR 0 5
25889: PPUSH
25890: CALL 27155 0 6
25894: GO 25972
25896: LD_INT 303
25898: DOUBLE
25899: EQUAL
25900: IFTRUE 25904
25902: GO 25941
25904: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25905: LD_VAR 0 6
25909: PPUSH
25910: LD_VAR 0 7
25914: PPUSH
25915: LD_VAR 0 8
25919: PPUSH
25920: LD_VAR 0 9
25924: PPUSH
25925: LD_VAR 0 4
25929: PPUSH
25930: LD_VAR 0 5
25934: PPUSH
25935: CALL 25977 0 6
25939: GO 25972
25941: LD_INT 304
25943: DOUBLE
25944: EQUAL
25945: IFTRUE 25949
25947: GO 25971
25949: POP
// hHackTeleport ( unit , x , y ) ; end ;
25950: LD_VAR 0 2
25954: PPUSH
25955: LD_VAR 0 4
25959: PPUSH
25960: LD_VAR 0 5
25964: PPUSH
25965: CALL 27748 0 3
25969: GO 25972
25971: POP
// end ;
25972: LD_VAR 0 12
25976: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25977: LD_INT 0
25979: PPUSH
25980: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25981: LD_VAR 0 1
25985: PUSH
25986: LD_INT 1
25988: LESS
25989: IFTRUE 26001
25991: PUSH
25992: LD_VAR 0 1
25996: PUSH
25997: LD_INT 3
25999: GREATER
26000: OR
26001: IFTRUE 26019
26003: PUSH
26004: LD_VAR 0 5
26008: PPUSH
26009: LD_VAR 0 6
26013: PPUSH
26014: CALL_OW 428
26018: OR
26019: IFFALSE 26023
// exit ;
26021: GO 26751
// uc_side := your_side ;
26023: LD_ADDR_OWVAR 20
26027: PUSH
26028: LD_OWVAR 2
26032: ST_TO_ADDR
// uc_nation := nation ;
26033: LD_ADDR_OWVAR 21
26037: PUSH
26038: LD_VAR 0 1
26042: ST_TO_ADDR
// bc_level = 1 ;
26043: LD_ADDR_OWVAR 43
26047: PUSH
26048: LD_INT 1
26050: ST_TO_ADDR
// case btype of 1 :
26051: LD_VAR 0 2
26055: PUSH
26056: LD_INT 1
26058: DOUBLE
26059: EQUAL
26060: IFTRUE 26064
26062: GO 26075
26064: POP
// bc_type := b_depot ; 2 :
26065: LD_ADDR_OWVAR 42
26069: PUSH
26070: LD_INT 0
26072: ST_TO_ADDR
26073: GO 26695
26075: LD_INT 2
26077: DOUBLE
26078: EQUAL
26079: IFTRUE 26083
26081: GO 26094
26083: POP
// bc_type := b_warehouse ; 3 :
26084: LD_ADDR_OWVAR 42
26088: PUSH
26089: LD_INT 1
26091: ST_TO_ADDR
26092: GO 26695
26094: LD_INT 3
26096: DOUBLE
26097: EQUAL
26098: IFTRUE 26102
26100: GO 26113
26102: POP
// bc_type := b_lab ; 4 .. 9 :
26103: LD_ADDR_OWVAR 42
26107: PUSH
26108: LD_INT 6
26110: ST_TO_ADDR
26111: GO 26695
26113: LD_INT 4
26115: DOUBLE
26116: GREATEREQUAL
26117: IFFALSE 26125
26119: LD_INT 9
26121: DOUBLE
26122: LESSEQUAL
26123: IFTRUE 26127
26125: GO 26187
26127: POP
// begin bc_type := b_lab_half ;
26128: LD_ADDR_OWVAR 42
26132: PUSH
26133: LD_INT 7
26135: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26136: LD_ADDR_OWVAR 44
26140: PUSH
26141: LD_INT 10
26143: PUSH
26144: LD_INT 11
26146: PUSH
26147: LD_INT 12
26149: PUSH
26150: LD_INT 15
26152: PUSH
26153: LD_INT 14
26155: PUSH
26156: LD_INT 13
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: LIST
26166: PUSH
26167: LD_VAR 0 2
26171: PUSH
26172: LD_INT 3
26174: MINUS
26175: ARRAY
26176: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
26177: LD_ADDR_OWVAR 45
26181: PUSH
26182: LD_INT 9
26184: ST_TO_ADDR
// end ; 10 .. 13 :
26185: GO 26695
26187: LD_INT 10
26189: DOUBLE
26190: GREATEREQUAL
26191: IFFALSE 26199
26193: LD_INT 13
26195: DOUBLE
26196: LESSEQUAL
26197: IFTRUE 26201
26199: GO 26278
26201: POP
// begin bc_type := b_lab_full ;
26202: LD_ADDR_OWVAR 42
26206: PUSH
26207: LD_INT 8
26209: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26210: LD_ADDR_OWVAR 44
26214: PUSH
26215: LD_INT 10
26217: PUSH
26218: LD_INT 12
26220: PUSH
26221: LD_INT 14
26223: PUSH
26224: LD_INT 13
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: PUSH
26233: LD_VAR 0 2
26237: PUSH
26238: LD_INT 9
26240: MINUS
26241: ARRAY
26242: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26243: LD_ADDR_OWVAR 45
26247: PUSH
26248: LD_INT 11
26250: PUSH
26251: LD_INT 15
26253: PUSH
26254: LD_INT 12
26256: PUSH
26257: LD_INT 15
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: PUSH
26266: LD_VAR 0 2
26270: PUSH
26271: LD_INT 9
26273: MINUS
26274: ARRAY
26275: ST_TO_ADDR
// end ; 14 :
26276: GO 26695
26278: LD_INT 14
26280: DOUBLE
26281: EQUAL
26282: IFTRUE 26286
26284: GO 26297
26286: POP
// bc_type := b_workshop ; 15 :
26287: LD_ADDR_OWVAR 42
26291: PUSH
26292: LD_INT 2
26294: ST_TO_ADDR
26295: GO 26695
26297: LD_INT 15
26299: DOUBLE
26300: EQUAL
26301: IFTRUE 26305
26303: GO 26316
26305: POP
// bc_type := b_factory ; 16 :
26306: LD_ADDR_OWVAR 42
26310: PUSH
26311: LD_INT 3
26313: ST_TO_ADDR
26314: GO 26695
26316: LD_INT 16
26318: DOUBLE
26319: EQUAL
26320: IFTRUE 26324
26322: GO 26335
26324: POP
// bc_type := b_ext_gun ; 17 :
26325: LD_ADDR_OWVAR 42
26329: PUSH
26330: LD_INT 17
26332: ST_TO_ADDR
26333: GO 26695
26335: LD_INT 17
26337: DOUBLE
26338: EQUAL
26339: IFTRUE 26343
26341: GO 26371
26343: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26344: LD_ADDR_OWVAR 42
26348: PUSH
26349: LD_INT 19
26351: PUSH
26352: LD_INT 23
26354: PUSH
26355: LD_INT 19
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: LIST
26362: PUSH
26363: LD_VAR 0 1
26367: ARRAY
26368: ST_TO_ADDR
26369: GO 26695
26371: LD_INT 18
26373: DOUBLE
26374: EQUAL
26375: IFTRUE 26379
26377: GO 26390
26379: POP
// bc_type := b_ext_radar ; 19 :
26380: LD_ADDR_OWVAR 42
26384: PUSH
26385: LD_INT 20
26387: ST_TO_ADDR
26388: GO 26695
26390: LD_INT 19
26392: DOUBLE
26393: EQUAL
26394: IFTRUE 26398
26396: GO 26409
26398: POP
// bc_type := b_ext_radio ; 20 :
26399: LD_ADDR_OWVAR 42
26403: PUSH
26404: LD_INT 22
26406: ST_TO_ADDR
26407: GO 26695
26409: LD_INT 20
26411: DOUBLE
26412: EQUAL
26413: IFTRUE 26417
26415: GO 26428
26417: POP
// bc_type := b_ext_siberium ; 21 :
26418: LD_ADDR_OWVAR 42
26422: PUSH
26423: LD_INT 21
26425: ST_TO_ADDR
26426: GO 26695
26428: LD_INT 21
26430: DOUBLE
26431: EQUAL
26432: IFTRUE 26436
26434: GO 26447
26436: POP
// bc_type := b_ext_computer ; 22 :
26437: LD_ADDR_OWVAR 42
26441: PUSH
26442: LD_INT 24
26444: ST_TO_ADDR
26445: GO 26695
26447: LD_INT 22
26449: DOUBLE
26450: EQUAL
26451: IFTRUE 26455
26453: GO 26466
26455: POP
// bc_type := b_ext_track ; 23 :
26456: LD_ADDR_OWVAR 42
26460: PUSH
26461: LD_INT 16
26463: ST_TO_ADDR
26464: GO 26695
26466: LD_INT 23
26468: DOUBLE
26469: EQUAL
26470: IFTRUE 26474
26472: GO 26485
26474: POP
// bc_type := b_ext_laser ; 24 :
26475: LD_ADDR_OWVAR 42
26479: PUSH
26480: LD_INT 25
26482: ST_TO_ADDR
26483: GO 26695
26485: LD_INT 24
26487: DOUBLE
26488: EQUAL
26489: IFTRUE 26493
26491: GO 26504
26493: POP
// bc_type := b_control_tower ; 25 :
26494: LD_ADDR_OWVAR 42
26498: PUSH
26499: LD_INT 36
26501: ST_TO_ADDR
26502: GO 26695
26504: LD_INT 25
26506: DOUBLE
26507: EQUAL
26508: IFTRUE 26512
26510: GO 26523
26512: POP
// bc_type := b_breastwork ; 26 :
26513: LD_ADDR_OWVAR 42
26517: PUSH
26518: LD_INT 31
26520: ST_TO_ADDR
26521: GO 26695
26523: LD_INT 26
26525: DOUBLE
26526: EQUAL
26527: IFTRUE 26531
26529: GO 26542
26531: POP
// bc_type := b_bunker ; 27 :
26532: LD_ADDR_OWVAR 42
26536: PUSH
26537: LD_INT 32
26539: ST_TO_ADDR
26540: GO 26695
26542: LD_INT 27
26544: DOUBLE
26545: EQUAL
26546: IFTRUE 26550
26548: GO 26561
26550: POP
// bc_type := b_turret ; 28 :
26551: LD_ADDR_OWVAR 42
26555: PUSH
26556: LD_INT 33
26558: ST_TO_ADDR
26559: GO 26695
26561: LD_INT 28
26563: DOUBLE
26564: EQUAL
26565: IFTRUE 26569
26567: GO 26580
26569: POP
// bc_type := b_armoury ; 29 :
26570: LD_ADDR_OWVAR 42
26574: PUSH
26575: LD_INT 4
26577: ST_TO_ADDR
26578: GO 26695
26580: LD_INT 29
26582: DOUBLE
26583: EQUAL
26584: IFTRUE 26588
26586: GO 26599
26588: POP
// bc_type := b_barracks ; 30 :
26589: LD_ADDR_OWVAR 42
26593: PUSH
26594: LD_INT 5
26596: ST_TO_ADDR
26597: GO 26695
26599: LD_INT 30
26601: DOUBLE
26602: EQUAL
26603: IFTRUE 26607
26605: GO 26618
26607: POP
// bc_type := b_solar_power ; 31 :
26608: LD_ADDR_OWVAR 42
26612: PUSH
26613: LD_INT 27
26615: ST_TO_ADDR
26616: GO 26695
26618: LD_INT 31
26620: DOUBLE
26621: EQUAL
26622: IFTRUE 26626
26624: GO 26637
26626: POP
// bc_type := b_oil_power ; 32 :
26627: LD_ADDR_OWVAR 42
26631: PUSH
26632: LD_INT 26
26634: ST_TO_ADDR
26635: GO 26695
26637: LD_INT 32
26639: DOUBLE
26640: EQUAL
26641: IFTRUE 26645
26643: GO 26656
26645: POP
// bc_type := b_siberite_power ; 33 :
26646: LD_ADDR_OWVAR 42
26650: PUSH
26651: LD_INT 28
26653: ST_TO_ADDR
26654: GO 26695
26656: LD_INT 33
26658: DOUBLE
26659: EQUAL
26660: IFTRUE 26664
26662: GO 26675
26664: POP
// bc_type := b_oil_mine ; 34 :
26665: LD_ADDR_OWVAR 42
26669: PUSH
26670: LD_INT 29
26672: ST_TO_ADDR
26673: GO 26695
26675: LD_INT 34
26677: DOUBLE
26678: EQUAL
26679: IFTRUE 26683
26681: GO 26694
26683: POP
// bc_type := b_siberite_mine ; end ;
26684: LD_ADDR_OWVAR 42
26688: PUSH
26689: LD_INT 30
26691: ST_TO_ADDR
26692: GO 26695
26694: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26695: LD_ADDR_VAR 0 8
26699: PUSH
26700: LD_VAR 0 5
26704: PPUSH
26705: LD_VAR 0 6
26709: PPUSH
26710: LD_VAR 0 3
26714: PPUSH
26715: CALL_OW 47
26719: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26720: LD_OWVAR 42
26724: PUSH
26725: LD_INT 32
26727: PUSH
26728: LD_INT 33
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: IN
26735: IFFALSE 26751
// PlaceWeaponTurret ( b , weapon ) ;
26737: LD_VAR 0 8
26741: PPUSH
26742: LD_VAR 0 4
26746: PPUSH
26747: CALL_OW 431
// end ;
26751: LD_VAR 0 7
26755: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26756: LD_INT 0
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26762: LD_ADDR_VAR 0 4
26766: PUSH
26767: LD_INT 22
26769: PUSH
26770: LD_OWVAR 2
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 2
26781: PUSH
26782: LD_INT 30
26784: PUSH
26785: LD_INT 0
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 30
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PPUSH
26811: CALL_OW 69
26815: ST_TO_ADDR
// if not tmp then
26816: LD_VAR 0 4
26820: NOT
26821: IFFALSE 26825
// exit ;
26823: GO 26884
// for i in tmp do
26825: LD_ADDR_VAR 0 2
26829: PUSH
26830: LD_VAR 0 4
26834: PUSH
26835: FOR_IN
26836: IFFALSE 26882
// for j = 1 to 3 do
26838: LD_ADDR_VAR 0 3
26842: PUSH
26843: DOUBLE
26844: LD_INT 1
26846: DEC
26847: ST_TO_ADDR
26848: LD_INT 3
26850: PUSH
26851: FOR_TO
26852: IFFALSE 26878
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26854: LD_VAR 0 2
26858: PPUSH
26859: CALL_OW 274
26863: PPUSH
26864: LD_VAR 0 3
26868: PPUSH
26869: LD_INT 99999
26871: PPUSH
26872: CALL_OW 277
26876: GO 26851
26878: POP
26879: POP
26880: GO 26835
26882: POP
26883: POP
// end ;
26884: LD_VAR 0 1
26888: RET
// export function hHackSetLevel10 ; var i , j ; begin
26889: LD_INT 0
26891: PPUSH
26892: PPUSH
26893: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26894: LD_ADDR_VAR 0 2
26898: PUSH
26899: LD_INT 21
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: PUSH
26914: FOR_IN
26915: IFFALSE 26967
// if IsSelected ( i ) then
26917: LD_VAR 0 2
26921: PPUSH
26922: CALL_OW 306
26926: IFFALSE 26965
// begin for j := 1 to 4 do
26928: LD_ADDR_VAR 0 3
26932: PUSH
26933: DOUBLE
26934: LD_INT 1
26936: DEC
26937: ST_TO_ADDR
26938: LD_INT 4
26940: PUSH
26941: FOR_TO
26942: IFFALSE 26963
// SetSkill ( i , j , 10 ) ;
26944: LD_VAR 0 2
26948: PPUSH
26949: LD_VAR 0 3
26953: PPUSH
26954: LD_INT 10
26956: PPUSH
26957: CALL_OW 237
26961: GO 26941
26963: POP
26964: POP
// end ;
26965: GO 26914
26967: POP
26968: POP
// end ;
26969: LD_VAR 0 1
26973: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26974: LD_INT 0
26976: PPUSH
26977: PPUSH
26978: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26979: LD_ADDR_VAR 0 2
26983: PUSH
26984: LD_INT 22
26986: PUSH
26987: LD_OWVAR 2
26991: PUSH
26992: EMPTY
26993: LIST
26994: LIST
26995: PUSH
26996: LD_INT 21
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 69
27014: PUSH
27015: FOR_IN
27016: IFFALSE 27057
// begin for j := 1 to 4 do
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: DOUBLE
27024: LD_INT 1
27026: DEC
27027: ST_TO_ADDR
27028: LD_INT 4
27030: PUSH
27031: FOR_TO
27032: IFFALSE 27053
// SetSkill ( i , j , 10 ) ;
27034: LD_VAR 0 2
27038: PPUSH
27039: LD_VAR 0 3
27043: PPUSH
27044: LD_INT 10
27046: PPUSH
27047: CALL_OW 237
27051: GO 27031
27053: POP
27054: POP
// end ;
27055: GO 27015
27057: POP
27058: POP
// end ;
27059: LD_VAR 0 1
27063: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27064: LD_INT 0
27066: PPUSH
// uc_side := your_side ;
27067: LD_ADDR_OWVAR 20
27071: PUSH
27072: LD_OWVAR 2
27076: ST_TO_ADDR
// uc_nation := nation ;
27077: LD_ADDR_OWVAR 21
27081: PUSH
27082: LD_VAR 0 1
27086: ST_TO_ADDR
// InitHc ;
27087: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27091: LD_INT 0
27093: PPUSH
27094: LD_VAR 0 2
27098: PPUSH
27099: LD_VAR 0 3
27103: PPUSH
27104: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27108: LD_VAR 0 4
27112: PPUSH
27113: LD_VAR 0 5
27117: PPUSH
27118: CALL_OW 428
27122: PUSH
27123: LD_INT 0
27125: EQUAL
27126: IFFALSE 27150
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27128: CALL_OW 44
27132: PPUSH
27133: LD_VAR 0 4
27137: PPUSH
27138: LD_VAR 0 5
27142: PPUSH
27143: LD_INT 1
27145: PPUSH
27146: CALL_OW 48
// end ;
27150: LD_VAR 0 6
27154: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27155: LD_INT 0
27157: PPUSH
27158: PPUSH
// uc_side := your_side ;
27159: LD_ADDR_OWVAR 20
27163: PUSH
27164: LD_OWVAR 2
27168: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27169: LD_VAR 0 1
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: LD_INT 2
27179: PUSH
27180: LD_INT 3
27182: PUSH
27183: LD_INT 4
27185: PUSH
27186: LD_INT 5
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: IN
27196: IFFALSE 27208
// uc_nation := nation_american else
27198: LD_ADDR_OWVAR 21
27202: PUSH
27203: LD_INT 1
27205: ST_TO_ADDR
27206: GO 27251
// if chassis in [ 11 , 12 , 13 , 14 ] then
27208: LD_VAR 0 1
27212: PUSH
27213: LD_INT 11
27215: PUSH
27216: LD_INT 12
27218: PUSH
27219: LD_INT 13
27221: PUSH
27222: LD_INT 14
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: IN
27231: IFFALSE 27243
// uc_nation := nation_arabian else
27233: LD_ADDR_OWVAR 21
27237: PUSH
27238: LD_INT 2
27240: ST_TO_ADDR
27241: GO 27251
// uc_nation := nation_russian ;
27243: LD_ADDR_OWVAR 21
27247: PUSH
27248: LD_INT 3
27250: ST_TO_ADDR
// vc_chassis := chassis ;
27251: LD_ADDR_OWVAR 37
27255: PUSH
27256: LD_VAR 0 1
27260: ST_TO_ADDR
// vc_engine := engine ;
27261: LD_ADDR_OWVAR 39
27265: PUSH
27266: LD_VAR 0 2
27270: ST_TO_ADDR
// vc_control := control ;
27271: LD_ADDR_OWVAR 38
27275: PUSH
27276: LD_VAR 0 3
27280: ST_TO_ADDR
// vc_weapon := weapon ;
27281: LD_ADDR_OWVAR 40
27285: PUSH
27286: LD_VAR 0 4
27290: ST_TO_ADDR
// un := CreateVehicle ;
27291: LD_ADDR_VAR 0 8
27295: PUSH
27296: CALL_OW 45
27300: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27301: LD_VAR 0 8
27305: PPUSH
27306: LD_INT 0
27308: PPUSH
27309: LD_INT 5
27311: PPUSH
27312: CALL_OW 12
27316: PPUSH
27317: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27321: LD_VAR 0 8
27325: PPUSH
27326: LD_VAR 0 5
27330: PPUSH
27331: LD_VAR 0 6
27335: PPUSH
27336: LD_INT 1
27338: PPUSH
27339: CALL_OW 48
// end ;
27343: LD_VAR 0 7
27347: RET
// export hInvincible ; every 1 do
27348: GO 27350
27350: DISABLE
// hInvincible := [ ] ;
27351: LD_ADDR_EXP 90
27355: PUSH
27356: EMPTY
27357: ST_TO_ADDR
27358: END
// every 10 do var i ;
27359: GO 27361
27361: DISABLE
27362: LD_INT 0
27364: PPUSH
// begin enable ;
27365: ENABLE
// if not hInvincible then
27366: LD_EXP 90
27370: NOT
27371: IFFALSE 27375
// exit ;
27373: GO 27419
// for i in hInvincible do
27375: LD_ADDR_VAR 0 1
27379: PUSH
27380: LD_EXP 90
27384: PUSH
27385: FOR_IN
27386: IFFALSE 27417
// if GetLives ( i ) < 1000 then
27388: LD_VAR 0 1
27392: PPUSH
27393: CALL_OW 256
27397: PUSH
27398: LD_INT 1000
27400: LESS
27401: IFFALSE 27415
// SetLives ( i , 1000 ) ;
27403: LD_VAR 0 1
27407: PPUSH
27408: LD_INT 1000
27410: PPUSH
27411: CALL_OW 234
27415: GO 27385
27417: POP
27418: POP
// end ;
27419: PPOPN 1
27421: END
// export function hHackInvincible ; var i ; begin
27422: LD_INT 0
27424: PPUSH
27425: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27426: LD_ADDR_VAR 0 2
27430: PUSH
27431: LD_INT 2
27433: PUSH
27434: LD_INT 21
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 21
27446: PUSH
27447: LD_INT 2
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: LIST
27458: PPUSH
27459: CALL_OW 69
27463: PUSH
27464: FOR_IN
27465: IFFALSE 27526
// if IsSelected ( i ) then
27467: LD_VAR 0 2
27471: PPUSH
27472: CALL_OW 306
27476: IFFALSE 27524
// begin if i in hInvincible then
27478: LD_VAR 0 2
27482: PUSH
27483: LD_EXP 90
27487: IN
27488: IFFALSE 27508
// hInvincible := hInvincible diff i else
27490: LD_ADDR_EXP 90
27494: PUSH
27495: LD_EXP 90
27499: PUSH
27500: LD_VAR 0 2
27504: DIFF
27505: ST_TO_ADDR
27506: GO 27524
// hInvincible := hInvincible union i ;
27508: LD_ADDR_EXP 90
27512: PUSH
27513: LD_EXP 90
27517: PUSH
27518: LD_VAR 0 2
27522: UNION
27523: ST_TO_ADDR
// end ;
27524: GO 27464
27526: POP
27527: POP
// end ;
27528: LD_VAR 0 1
27532: RET
// export function hHackInvisible ; var i , j ; begin
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
27537: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27538: LD_ADDR_VAR 0 2
27542: PUSH
27543: LD_INT 21
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: EMPTY
27550: LIST
27551: LIST
27552: PPUSH
27553: CALL_OW 69
27557: PUSH
27558: FOR_IN
27559: IFFALSE 27583
// if IsSelected ( i ) then
27561: LD_VAR 0 2
27565: PPUSH
27566: CALL_OW 306
27570: IFFALSE 27581
// ComForceInvisible ( i ) ;
27572: LD_VAR 0 2
27576: PPUSH
27577: CALL_OW 496
27581: GO 27558
27583: POP
27584: POP
// end ;
27585: LD_VAR 0 1
27589: RET
// export function hHackChangeYourSide ; begin
27590: LD_INT 0
27592: PPUSH
// if your_side = 8 then
27593: LD_OWVAR 2
27597: PUSH
27598: LD_INT 8
27600: EQUAL
27601: IFFALSE 27613
// your_side := 0 else
27603: LD_ADDR_OWVAR 2
27607: PUSH
27608: LD_INT 0
27610: ST_TO_ADDR
27611: GO 27627
// your_side := your_side + 1 ;
27613: LD_ADDR_OWVAR 2
27617: PUSH
27618: LD_OWVAR 2
27622: PUSH
27623: LD_INT 1
27625: PLUS
27626: ST_TO_ADDR
// end ;
27627: LD_VAR 0 1
27631: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27632: LD_INT 0
27634: PPUSH
27635: PPUSH
27636: PPUSH
// for i in all_units do
27637: LD_ADDR_VAR 0 2
27641: PUSH
27642: LD_OWVAR 3
27646: PUSH
27647: FOR_IN
27648: IFFALSE 27726
// if IsSelected ( i ) then
27650: LD_VAR 0 2
27654: PPUSH
27655: CALL_OW 306
27659: IFFALSE 27724
// begin j := GetSide ( i ) ;
27661: LD_ADDR_VAR 0 3
27665: PUSH
27666: LD_VAR 0 2
27670: PPUSH
27671: CALL_OW 255
27675: ST_TO_ADDR
// if j = 8 then
27676: LD_VAR 0 3
27680: PUSH
27681: LD_INT 8
27683: EQUAL
27684: IFFALSE 27696
// j := 0 else
27686: LD_ADDR_VAR 0 3
27690: PUSH
27691: LD_INT 0
27693: ST_TO_ADDR
27694: GO 27710
// j := j + 1 ;
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: LD_VAR 0 3
27705: PUSH
27706: LD_INT 1
27708: PLUS
27709: ST_TO_ADDR
// SetSide ( i , j ) ;
27710: LD_VAR 0 2
27714: PPUSH
27715: LD_VAR 0 3
27719: PPUSH
27720: CALL_OW 235
// end ;
27724: GO 27647
27726: POP
27727: POP
// end ;
27728: LD_VAR 0 1
27732: RET
// export function hHackFog ; begin
27733: LD_INT 0
27735: PPUSH
// FogOff ( true ) ;
27736: LD_INT 1
27738: PPUSH
27739: CALL_OW 344
// end ;
27743: LD_VAR 0 1
27747: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27748: LD_INT 0
27750: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27751: LD_VAR 0 1
27755: PPUSH
27756: LD_VAR 0 2
27760: PPUSH
27761: LD_VAR 0 3
27765: PPUSH
27766: LD_INT 1
27768: PPUSH
27769: LD_INT 1
27771: PPUSH
27772: CALL_OW 483
// CenterOnXY ( x , y ) ;
27776: LD_VAR 0 2
27780: PPUSH
27781: LD_VAR 0 3
27785: PPUSH
27786: CALL_OW 84
// end ;
27790: LD_VAR 0 4
27794: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27795: LD_INT 0
27797: PPUSH
27798: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27799: LD_VAR 0 1
27803: NOT
27804: IFTRUE 27823
27806: PUSH
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_VAR 0 3
27816: PPUSH
27817: CALL_OW 488
27821: NOT
27822: OR
27823: IFTRUE 27858
27825: PUSH
27826: LD_VAR 0 1
27830: PPUSH
27831: CALL_OW 266
27835: PUSH
27836: LD_INT 3
27838: NONEQUAL
27839: IFFALSE 27857
27841: PUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 247
27851: PUSH
27852: LD_INT 1
27854: EQUAL
27855: NOT
27856: AND
27857: OR
27858: IFFALSE 27862
// exit ;
27860: GO 28144
// if GetType ( factory ) = unit_human then
27862: LD_VAR 0 1
27866: PPUSH
27867: CALL_OW 247
27871: PUSH
27872: LD_INT 1
27874: EQUAL
27875: IFFALSE 27892
// factory := IsInUnit ( factory ) ;
27877: LD_ADDR_VAR 0 1
27881: PUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: CALL_OW 310
27891: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27892: LD_VAR 0 1
27896: PPUSH
27897: CALL_OW 266
27901: PUSH
27902: LD_INT 3
27904: NONEQUAL
27905: IFFALSE 27909
// exit ;
27907: GO 28144
// for i := 1 to Count ( factoryWaypoints ) do
27909: LD_ADDR_VAR 0 5
27913: PUSH
27914: DOUBLE
27915: LD_INT 1
27917: DEC
27918: ST_TO_ADDR
27919: LD_EXP 91
27923: PPUSH
27924: CALL 37677 0 1
27928: PUSH
27929: FOR_TO
27930: IFFALSE 28092
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
27932: LD_VAR 0 2
27936: PPUSH
27937: LD_VAR 0 3
27941: PPUSH
27942: CALL_OW 428
27946: PUSH
27947: LD_EXP 91
27951: PUSH
27952: LD_VAR 0 5
27956: ARRAY
27957: PUSH
27958: LD_INT 2
27960: ARRAY
27961: EQUAL
27962: IFFALSE 27994
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27964: LD_ADDR_EXP 91
27968: PUSH
27969: LD_EXP 91
27973: PPUSH
27974: LD_VAR 0 5
27978: PPUSH
27979: CALL_OW 3
27983: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27984: CALL 28149 0 0
// exit ;
27988: POP
27989: POP
27990: GO 28144
// end else
27992: GO 28090
// if factory = factoryWaypoints [ i ] [ 2 ] then
27994: LD_VAR 0 1
27998: PUSH
27999: LD_EXP 91
28003: PUSH
28004: LD_VAR 0 5
28008: ARRAY
28009: PUSH
28010: LD_INT 2
28012: ARRAY
28013: EQUAL
28014: IFFALSE 28090
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
28016: LD_ADDR_EXP 91
28020: PUSH
28021: LD_EXP 91
28025: PPUSH
28026: LD_VAR 0 5
28030: PPUSH
28031: CALL_OW 3
28035: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
28036: LD_ADDR_EXP 91
28040: PUSH
28041: LD_EXP 91
28045: PPUSH
28046: LD_VAR 0 1
28050: PPUSH
28051: CALL_OW 255
28055: PUSH
28056: LD_VAR 0 1
28060: PUSH
28061: LD_VAR 0 2
28065: PUSH
28066: LD_VAR 0 3
28070: PUSH
28071: EMPTY
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: PPUSH
28077: CALL 73609 0 2
28081: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28082: CALL 28149 0 0
// exit ;
28086: POP
28087: POP
28088: GO 28144
// end ; end ;
28090: GO 27929
28092: POP
28093: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
28094: LD_ADDR_EXP 91
28098: PUSH
28099: LD_EXP 91
28103: PPUSH
28104: LD_VAR 0 1
28108: PPUSH
28109: CALL_OW 255
28113: PUSH
28114: LD_VAR 0 1
28118: PUSH
28119: LD_VAR 0 2
28123: PUSH
28124: LD_VAR 0 3
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: PPUSH
28135: CALL 73609 0 2
28139: ST_TO_ADDR
// UpdateFactoryWaypoints ;
28140: CALL 28149 0 0
// end ;
28144: LD_VAR 0 4
28148: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
28149: LD_INT 0
28151: PPUSH
28152: PPUSH
28153: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
28154: LD_STRING resetFactoryWaypoint();
28156: PPUSH
28157: CALL_OW 559
// if factoryWaypoints then
28161: LD_EXP 91
28165: IFFALSE 28286
// begin list := factoryWaypoints ;
28167: LD_ADDR_VAR 0 3
28171: PUSH
28172: LD_EXP 91
28176: ST_TO_ADDR
// for i := 1 to list do
28177: LD_ADDR_VAR 0 2
28181: PUSH
28182: DOUBLE
28183: LD_INT 1
28185: DEC
28186: ST_TO_ADDR
28187: LD_VAR 0 3
28191: PUSH
28192: FOR_TO
28193: IFFALSE 28284
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28195: LD_STRING setFactoryWaypointXY(
28197: PUSH
28198: LD_VAR 0 3
28202: PUSH
28203: LD_VAR 0 2
28207: ARRAY
28208: PUSH
28209: LD_INT 1
28211: ARRAY
28212: STR
28213: PUSH
28214: LD_STRING ,
28216: STR
28217: PUSH
28218: LD_VAR 0 3
28222: PUSH
28223: LD_VAR 0 2
28227: ARRAY
28228: PUSH
28229: LD_INT 2
28231: ARRAY
28232: STR
28233: PUSH
28234: LD_STRING ,
28236: STR
28237: PUSH
28238: LD_VAR 0 3
28242: PUSH
28243: LD_VAR 0 2
28247: ARRAY
28248: PUSH
28249: LD_INT 3
28251: ARRAY
28252: STR
28253: PUSH
28254: LD_STRING ,
28256: STR
28257: PUSH
28258: LD_VAR 0 3
28262: PUSH
28263: LD_VAR 0 2
28267: ARRAY
28268: PUSH
28269: LD_INT 4
28271: ARRAY
28272: STR
28273: PUSH
28274: LD_STRING )
28276: STR
28277: PPUSH
28278: CALL_OW 559
28282: GO 28192
28284: POP
28285: POP
// end ; end ;
28286: LD_VAR 0 1
28290: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
28291: LD_INT 0
28293: PPUSH
// if HexInfo ( x , y ) = warehouse then
28294: LD_VAR 0 2
28298: PPUSH
28299: LD_VAR 0 3
28303: PPUSH
28304: CALL_OW 428
28308: PUSH
28309: LD_VAR 0 1
28313: EQUAL
28314: IFFALSE 28341
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
28316: LD_ADDR_EXP 93
28320: PUSH
28321: LD_EXP 93
28325: PPUSH
28326: LD_VAR 0 1
28330: PPUSH
28331: LD_INT 0
28333: PPUSH
28334: CALL_OW 1
28338: ST_TO_ADDR
28339: GO 28392
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
28341: LD_ADDR_EXP 93
28345: PUSH
28346: LD_EXP 93
28350: PPUSH
28351: LD_VAR 0 1
28355: PPUSH
28356: LD_VAR 0 1
28360: PPUSH
28361: CALL_OW 255
28365: PUSH
28366: LD_VAR 0 1
28370: PUSH
28371: LD_VAR 0 2
28375: PUSH
28376: LD_VAR 0 3
28380: PUSH
28381: EMPTY
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: PPUSH
28387: CALL_OW 1
28391: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
28392: CALL 28401 0 0
// end ;
28396: LD_VAR 0 4
28400: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
28401: LD_INT 0
28403: PPUSH
28404: PPUSH
28405: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
28406: LD_STRING resetWarehouseGatheringPoints();
28408: PPUSH
28409: CALL_OW 559
// if warehouseGatheringPoints then
28413: LD_EXP 93
28417: IFFALSE 28543
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
28419: LD_ADDR_VAR 0 3
28423: PUSH
28424: LD_EXP 93
28428: PPUSH
28429: CALL 77543 0 1
28433: ST_TO_ADDR
// for i := 1 to list do
28434: LD_ADDR_VAR 0 2
28438: PUSH
28439: DOUBLE
28440: LD_INT 1
28442: DEC
28443: ST_TO_ADDR
28444: LD_VAR 0 3
28448: PUSH
28449: FOR_TO
28450: IFFALSE 28541
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
28452: LD_STRING setWarehouseGatheringPointXY(
28454: PUSH
28455: LD_VAR 0 3
28459: PUSH
28460: LD_VAR 0 2
28464: ARRAY
28465: PUSH
28466: LD_INT 1
28468: ARRAY
28469: STR
28470: PUSH
28471: LD_STRING ,
28473: STR
28474: PUSH
28475: LD_VAR 0 3
28479: PUSH
28480: LD_VAR 0 2
28484: ARRAY
28485: PUSH
28486: LD_INT 2
28488: ARRAY
28489: STR
28490: PUSH
28491: LD_STRING ,
28493: STR
28494: PUSH
28495: LD_VAR 0 3
28499: PUSH
28500: LD_VAR 0 2
28504: ARRAY
28505: PUSH
28506: LD_INT 3
28508: ARRAY
28509: STR
28510: PUSH
28511: LD_STRING ,
28513: STR
28514: PUSH
28515: LD_VAR 0 3
28519: PUSH
28520: LD_VAR 0 2
28524: ARRAY
28525: PUSH
28526: LD_INT 4
28528: ARRAY
28529: STR
28530: PUSH
28531: LD_STRING )
28533: STR
28534: PPUSH
28535: CALL_OW 559
28539: GO 28449
28541: POP
28542: POP
// end ; end ;
28543: LD_VAR 0 1
28547: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
28548: LD_EXP 93
28552: IFFALSE 29247
28554: GO 28556
28556: DISABLE
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
28561: PPUSH
28562: PPUSH
28563: PPUSH
28564: PPUSH
28565: PPUSH
28566: PPUSH
28567: PPUSH
// begin enable ;
28568: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
28569: LD_ADDR_VAR 0 3
28573: PUSH
28574: LD_EXP 93
28578: PPUSH
28579: CALL 77543 0 1
28583: ST_TO_ADDR
// if not list then
28584: LD_VAR 0 3
28588: NOT
28589: IFFALSE 28593
// exit ;
28591: GO 29247
// for i := 1 to list do
28593: LD_ADDR_VAR 0 1
28597: PUSH
28598: DOUBLE
28599: LD_INT 1
28601: DEC
28602: ST_TO_ADDR
28603: LD_VAR 0 3
28607: PUSH
28608: FOR_TO
28609: IFFALSE 29245
// begin depot := list [ i ] [ 2 ] ;
28611: LD_ADDR_VAR 0 8
28615: PUSH
28616: LD_VAR 0 3
28620: PUSH
28621: LD_VAR 0 1
28625: ARRAY
28626: PUSH
28627: LD_INT 2
28629: ARRAY
28630: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
28631: LD_ADDR_VAR 0 5
28635: PUSH
28636: LD_VAR 0 3
28640: PUSH
28641: LD_VAR 0 1
28645: ARRAY
28646: PUSH
28647: LD_INT 1
28649: ARRAY
28650: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
28651: LD_VAR 0 8
28655: PPUSH
28656: CALL_OW 301
28660: IFTRUE 28679
28662: PUSH
28663: LD_VAR 0 5
28667: PUSH
28668: LD_VAR 0 8
28672: PPUSH
28673: CALL_OW 255
28677: NONEQUAL
28678: OR
28679: IFFALSE 28708
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
28681: LD_ADDR_EXP 93
28685: PUSH
28686: LD_EXP 93
28690: PPUSH
28691: LD_VAR 0 8
28695: PPUSH
28696: LD_INT 0
28698: PPUSH
28699: CALL_OW 1
28703: ST_TO_ADDR
// exit ;
28704: POP
28705: POP
28706: GO 29247
// end ; x := list [ i ] [ 3 ] ;
28708: LD_ADDR_VAR 0 6
28712: PUSH
28713: LD_VAR 0 3
28717: PUSH
28718: LD_VAR 0 1
28722: ARRAY
28723: PUSH
28724: LD_INT 3
28726: ARRAY
28727: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
28728: LD_ADDR_VAR 0 7
28732: PUSH
28733: LD_VAR 0 3
28737: PUSH
28738: LD_VAR 0 1
28742: ARRAY
28743: PUSH
28744: LD_INT 4
28746: ARRAY
28747: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
28748: LD_ADDR_VAR 0 9
28752: PUSH
28753: LD_VAR 0 6
28757: PPUSH
28758: LD_VAR 0 7
28762: PPUSH
28763: LD_INT 16
28765: PPUSH
28766: CALL 76117 0 3
28770: ST_TO_ADDR
// if not cratesNearbyPoint then
28771: LD_VAR 0 9
28775: NOT
28776: IFFALSE 28782
// exit ;
28778: POP
28779: POP
28780: GO 29247
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
28782: LD_ADDR_VAR 0 4
28786: PUSH
28787: LD_INT 22
28789: PUSH
28790: LD_VAR 0 5
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 3
28801: PUSH
28802: LD_INT 60
28804: PUSH
28805: EMPTY
28806: LIST
28807: PUSH
28808: EMPTY
28809: LIST
28810: LIST
28811: PUSH
28812: LD_INT 91
28814: PUSH
28815: LD_VAR 0 8
28819: PUSH
28820: LD_INT 6
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: LD_INT 25
28833: PUSH
28834: LD_INT 2
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 25
28843: PUSH
28844: LD_INT 16
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: PPUSH
28862: CALL_OW 69
28866: PUSH
28867: LD_VAR 0 8
28871: PPUSH
28872: CALL_OW 313
28876: PPUSH
28877: LD_INT 3
28879: PUSH
28880: LD_INT 60
28882: PUSH
28883: EMPTY
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: PUSH
28893: LD_INT 25
28895: PUSH
28896: LD_INT 2
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: PUSH
28903: LD_INT 25
28905: PUSH
28906: LD_INT 16
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PPUSH
28922: CALL_OW 72
28926: UNION
28927: ST_TO_ADDR
// if tmp then
28928: LD_VAR 0 4
28932: IFFALSE 29012
// begin tmp := ShrinkArray ( tmp , 3 ) ;
28934: LD_ADDR_VAR 0 4
28938: PUSH
28939: LD_VAR 0 4
28943: PPUSH
28944: LD_INT 3
28946: PPUSH
28947: CALL 73924 0 2
28951: ST_TO_ADDR
// for j in tmp do
28952: LD_ADDR_VAR 0 2
28956: PUSH
28957: LD_VAR 0 4
28961: PUSH
28962: FOR_IN
28963: IFFALSE 29006
// begin if IsInUnit ( j ) then
28965: LD_VAR 0 2
28969: PPUSH
28970: CALL_OW 310
28974: IFFALSE 28985
// ComExit ( j ) ;
28976: LD_VAR 0 2
28980: PPUSH
28981: CALL 74007 0 1
// AddComCollect ( j , x , y ) ;
28985: LD_VAR 0 2
28989: PPUSH
28990: LD_VAR 0 6
28994: PPUSH
28995: LD_VAR 0 7
28999: PPUSH
29000: CALL_OW 177
// end ;
29004: GO 28962
29006: POP
29007: POP
// exit ;
29008: POP
29009: POP
29010: GO 29247
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
29012: LD_ADDR_VAR 0 4
29016: PUSH
29017: LD_INT 22
29019: PUSH
29020: LD_VAR 0 5
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 91
29031: PUSH
29032: LD_VAR 0 8
29036: PUSH
29037: LD_INT 8
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 2
29047: PUSH
29048: LD_INT 34
29050: PUSH
29051: LD_INT 12
29053: PUSH
29054: EMPTY
29055: LIST
29056: LIST
29057: PUSH
29058: LD_INT 34
29060: PUSH
29061: LD_INT 51
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 34
29070: PUSH
29071: LD_INT 32
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 34
29080: PUSH
29081: LD_INT 89
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: PPUSH
29100: CALL_OW 69
29104: ST_TO_ADDR
// if tmp then
29105: LD_VAR 0 4
29109: IFFALSE 29243
// begin for j in tmp do
29111: LD_ADDR_VAR 0 2
29115: PUSH
29116: LD_VAR 0 4
29120: PUSH
29121: FOR_IN
29122: IFFALSE 29241
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
29124: LD_VAR 0 2
29128: PPUSH
29129: CALL_OW 262
29133: PUSH
29134: LD_INT 3
29136: EQUAL
29137: IFTRUE 29154
29139: PUSH
29140: LD_VAR 0 2
29144: PPUSH
29145: CALL_OW 261
29149: PUSH
29150: LD_INT 20
29152: GREATER
29153: OR
29154: IFFALSE 29168
29156: PUSH
29157: LD_VAR 0 2
29161: PPUSH
29162: CALL_OW 314
29166: NOT
29167: AND
29168: IFFALSE 29198
29170: PUSH
29171: LD_VAR 0 2
29175: PPUSH
29176: CALL_OW 263
29180: PUSH
29181: LD_INT 1
29183: NONEQUAL
29184: IFTRUE 29197
29186: PUSH
29187: LD_VAR 0 2
29191: PPUSH
29192: CALL_OW 311
29196: OR
29197: AND
29198: IFFALSE 29239
// begin ComCollect ( j , x , y ) ;
29200: LD_VAR 0 2
29204: PPUSH
29205: LD_VAR 0 6
29209: PPUSH
29210: LD_VAR 0 7
29214: PPUSH
29215: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_VAR 0 8
29228: PPUSH
29229: CALL_OW 172
// exit ;
29233: POP
29234: POP
29235: POP
29236: POP
29237: GO 29247
// end ;
29239: GO 29121
29241: POP
29242: POP
// end ; end ;
29243: GO 28608
29245: POP
29246: POP
// end ; end_of_file
29247: PPOPN 9
29249: END
// export function SOS_UnitDestroyed ( un ) ; begin
29250: LD_INT 0
29252: PPUSH
// ComRadiation ( un ) ;
29253: LD_VAR 0 1
29257: PPUSH
29258: CALL 30339 0 1
// end ;
29262: LD_VAR 0 2
29266: RET
// export function SOS_UnitKamikazed ( un ) ; begin
29267: LD_INT 0
29269: PPUSH
// ComRadiation ( un ) ;
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL 30339 0 1
// end ;
29279: LD_VAR 0 2
29283: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29284: LD_INT 0
29286: PPUSH
// end ;
29287: LD_VAR 0 4
29291: RET
// export function SOS_Command ( cmd ) ; begin
29292: LD_INT 0
29294: PPUSH
// end ;
29295: LD_VAR 0 2
29299: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29300: LD_INT 0
29302: PPUSH
// end ;
29303: LD_VAR 0 6
29307: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
29308: LD_INT 0
29310: PPUSH
29311: PPUSH
29312: PPUSH
29313: PPUSH
// if not vehicle or not factory then
29314: LD_VAR 0 1
29318: NOT
29319: IFTRUE 29328
29321: PUSH
29322: LD_VAR 0 2
29326: NOT
29327: OR
29328: IFFALSE 29332
// exit ;
29330: GO 29914
// if not factoryWaypoints then
29332: LD_EXP 91
29336: NOT
29337: IFFALSE 29341
// exit ;
29339: GO 29914
// for i := 1 to Count ( factoryWaypoints ) do
29341: LD_ADDR_VAR 0 4
29345: PUSH
29346: DOUBLE
29347: LD_INT 1
29349: DEC
29350: ST_TO_ADDR
29351: LD_EXP 91
29355: PPUSH
29356: CALL 37677 0 1
29360: PUSH
29361: FOR_TO
29362: IFFALSE 29912
// if factoryWaypoints [ i ] [ 2 ] = factory then
29364: LD_EXP 91
29368: PUSH
29369: LD_VAR 0 4
29373: ARRAY
29374: PUSH
29375: LD_INT 2
29377: ARRAY
29378: PUSH
29379: LD_VAR 0 2
29383: EQUAL
29384: IFFALSE 29910
// begin if GetControl ( vehicle ) = control_manual then
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 263
29395: PUSH
29396: LD_INT 1
29398: EQUAL
29399: IFFALSE 29763
// begin driver := IsDrivenBy ( vehicle ) ;
29401: LD_ADDR_VAR 0 5
29405: PUSH
29406: LD_VAR 0 1
29410: PPUSH
29411: CALL_OW 311
29415: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
29416: LD_VAR 0 5
29420: PUSH
29421: LD_EXP 92
29425: IN
29426: IFTRUE 29440
29428: PUSH
29429: LD_VAR 0 1
29433: PUSH
29434: LD_EXP 92
29438: IN
29439: OR
29440: IFFALSE 29446
// exit ;
29442: POP
29443: POP
29444: GO 29914
// if not HasTask ( driver ) then
29446: LD_VAR 0 5
29450: PPUSH
29451: CALL_OW 314
29455: NOT
29456: IFFALSE 29761
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
29458: LD_ADDR_EXP 92
29462: PUSH
29463: LD_EXP 92
29467: PPUSH
29468: LD_VAR 0 5
29472: PPUSH
29473: CALL 73609 0 2
29477: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
29478: LD_ADDR_EXP 92
29482: PUSH
29483: LD_EXP 92
29487: PPUSH
29488: LD_VAR 0 1
29492: PPUSH
29493: CALL 73609 0 2
29497: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29498: LD_ADDR_VAR 0 6
29502: PUSH
29503: LD_EXP 91
29507: PUSH
29508: LD_VAR 0 4
29512: ARRAY
29513: PUSH
29514: LD_INT 3
29516: ARRAY
29517: PPUSH
29518: LD_EXP 91
29522: PUSH
29523: LD_VAR 0 4
29527: ARRAY
29528: PUSH
29529: LD_INT 4
29531: ARRAY
29532: PPUSH
29533: CALL_OW 428
29537: ST_TO_ADDR
// if hex then
29538: LD_VAR 0 6
29542: IFFALSE 29560
// ComMoveUnit ( driver , hex ) else
29544: LD_VAR 0 5
29548: PPUSH
29549: LD_VAR 0 6
29553: PPUSH
29554: CALL_OW 112
29558: GO 29644
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
29560: LD_VAR 0 1
29564: PPUSH
29565: LD_EXP 91
29569: PUSH
29570: LD_VAR 0 4
29574: ARRAY
29575: PUSH
29576: LD_INT 3
29578: ARRAY
29579: PPUSH
29580: LD_EXP 91
29584: PUSH
29585: LD_VAR 0 4
29589: ARRAY
29590: PUSH
29591: LD_INT 4
29593: ARRAY
29594: PPUSH
29595: CALL_OW 297
29599: PUSH
29600: LD_INT 0
29602: GREATER
29603: IFFALSE 29644
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29605: LD_VAR 0 5
29609: PPUSH
29610: LD_EXP 91
29614: PUSH
29615: LD_VAR 0 4
29619: ARRAY
29620: PUSH
29621: LD_INT 3
29623: ARRAY
29624: PPUSH
29625: LD_EXP 91
29629: PUSH
29630: LD_VAR 0 4
29634: ARRAY
29635: PUSH
29636: LD_INT 4
29638: ARRAY
29639: PPUSH
29640: CALL_OW 111
// AddComExitVehicle ( driver ) ;
29644: LD_VAR 0 5
29648: PPUSH
29649: CALL_OW 181
// if Multiplayer then
29653: LD_OWVAR 4
29657: IFFALSE 29706
// begin repeat wait ( 10 ) ;
29659: LD_INT 10
29661: PPUSH
29662: CALL_OW 67
// until not IsInUnit ( driver ) ;
29666: LD_VAR 0 5
29670: PPUSH
29671: CALL_OW 310
29675: NOT
29676: IFFALSE 29659
// if not HasTask ( driver ) then
29678: LD_VAR 0 5
29682: PPUSH
29683: CALL_OW 314
29687: NOT
29688: IFFALSE 29704
// ComEnterUnit ( driver , factory ) ;
29690: LD_VAR 0 5
29694: PPUSH
29695: LD_VAR 0 2
29699: PPUSH
29700: CALL_OW 120
// end else
29704: GO 29720
// AddComEnterUnit ( driver , factory ) ;
29706: LD_VAR 0 5
29710: PPUSH
29711: LD_VAR 0 2
29715: PPUSH
29716: CALL_OW 180
// wait ( 0 0$1 ) ;
29720: LD_INT 35
29722: PPUSH
29723: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
29727: LD_ADDR_EXP 92
29731: PUSH
29732: LD_EXP 92
29736: PUSH
29737: LD_VAR 0 5
29741: DIFF
29742: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
29743: LD_ADDR_EXP 92
29747: PUSH
29748: LD_EXP 92
29752: PUSH
29753: LD_VAR 0 1
29757: DIFF
29758: ST_TO_ADDR
// break ;
29759: GO 29912
// end ; end else
29761: GO 29910
// if GetControl ( vehicle ) = control_remote then
29763: LD_VAR 0 1
29767: PPUSH
29768: CALL_OW 263
29772: PUSH
29773: LD_INT 2
29775: EQUAL
29776: IFFALSE 29862
// begin wait ( 0 0$2 ) ;
29778: LD_INT 70
29780: PPUSH
29781: CALL_OW 67
// repeat wait ( 10 ) ;
29785: LD_INT 10
29787: PPUSH
29788: CALL_OW 67
// Connect ( vehicle ) ;
29792: LD_VAR 0 1
29796: PPUSH
29797: CALL 43921 0 1
// until IsControledBy ( vehicle ) ;
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL_OW 312
29810: IFFALSE 29785
// wait ( 10 ) ;
29812: LD_INT 10
29814: PPUSH
29815: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29819: LD_VAR 0 1
29823: PPUSH
29824: LD_EXP 91
29828: PUSH
29829: LD_VAR 0 4
29833: ARRAY
29834: PUSH
29835: LD_INT 3
29837: ARRAY
29838: PPUSH
29839: LD_EXP 91
29843: PUSH
29844: LD_VAR 0 4
29848: ARRAY
29849: PUSH
29850: LD_INT 4
29852: ARRAY
29853: PPUSH
29854: CALL_OW 111
// break ;
29858: GO 29912
// end else
29860: GO 29910
// begin wait ( 0 0$3 ) ;
29862: LD_INT 105
29864: PPUSH
29865: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
29869: LD_VAR 0 1
29873: PPUSH
29874: LD_EXP 91
29878: PUSH
29879: LD_VAR 0 4
29883: ARRAY
29884: PUSH
29885: LD_INT 3
29887: ARRAY
29888: PPUSH
29889: LD_EXP 91
29893: PUSH
29894: LD_VAR 0 4
29898: ARRAY
29899: PUSH
29900: LD_INT 4
29902: ARRAY
29903: PPUSH
29904: CALL_OW 111
// break ;
29908: GO 29912
// end ; end ;
29910: GO 29361
29912: POP
29913: POP
// end ;
29914: LD_VAR 0 3
29918: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29919: LD_INT 0
29921: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29922: LD_VAR 0 1
29926: PUSH
29927: LD_INT 250
29929: EQUAL
29930: IFFALSE 29947
29932: PUSH
29933: LD_VAR 0 2
29937: PPUSH
29938: CALL_OW 264
29942: PUSH
29943: LD_INT 81
29945: EQUAL
29946: AND
29947: IFFALSE 29968
// MinerPlaceMine ( unit , x , y ) ;
29949: LD_VAR 0 2
29953: PPUSH
29954: LD_VAR 0 4
29958: PPUSH
29959: LD_VAR 0 5
29963: PPUSH
29964: CALL 33100 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29968: LD_VAR 0 1
29972: PUSH
29973: LD_INT 251
29975: EQUAL
29976: IFFALSE 29993
29978: PUSH
29979: LD_VAR 0 2
29983: PPUSH
29984: CALL_OW 264
29988: PUSH
29989: LD_INT 81
29991: EQUAL
29992: AND
29993: IFFALSE 30014
// MinerDetonateMine ( unit , x , y ) ;
29995: LD_VAR 0 2
29999: PPUSH
30000: LD_VAR 0 4
30004: PPUSH
30005: LD_VAR 0 5
30009: PPUSH
30010: CALL 33379 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
30014: LD_VAR 0 1
30018: PUSH
30019: LD_INT 252
30021: EQUAL
30022: IFFALSE 30039
30024: PUSH
30025: LD_VAR 0 2
30029: PPUSH
30030: CALL_OW 264
30034: PUSH
30035: LD_INT 81
30037: EQUAL
30038: AND
30039: IFFALSE 30060
// MinerCreateMinefield ( unit , x , y ) ;
30041: LD_VAR 0 2
30045: PPUSH
30046: LD_VAR 0 4
30050: PPUSH
30051: LD_VAR 0 5
30055: PPUSH
30056: CALL 33798 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30060: LD_VAR 0 1
30064: PUSH
30065: LD_INT 253
30067: EQUAL
30068: IFFALSE 30085
30070: PUSH
30071: LD_VAR 0 2
30075: PPUSH
30076: CALL_OW 257
30080: PUSH
30081: LD_INT 5
30083: EQUAL
30084: AND
30085: IFFALSE 30106
// ComBinocular ( unit , x , y ) ;
30087: LD_VAR 0 2
30091: PPUSH
30092: LD_VAR 0 4
30096: PPUSH
30097: LD_VAR 0 5
30101: PPUSH
30102: CALL 34173 0 3
// if selectedUnit then
30106: LD_VAR 0 3
30110: IFFALSE 30170
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30112: LD_VAR 0 1
30116: PUSH
30117: LD_INT 254
30119: EQUAL
30120: IFFALSE 30137
30122: PUSH
30123: LD_VAR 0 2
30127: PPUSH
30128: CALL_OW 264
30132: PUSH
30133: LD_INT 99
30135: EQUAL
30136: AND
30137: IFFALSE 30154
30139: PUSH
30140: LD_VAR 0 3
30144: PPUSH
30145: CALL_OW 263
30149: PUSH
30150: LD_INT 3
30152: EQUAL
30153: AND
30154: IFFALSE 30170
// HackDestroyVehicle ( unit , selectedUnit ) ;
30156: LD_VAR 0 2
30160: PPUSH
30161: LD_VAR 0 3
30165: PPUSH
30166: CALL 32460 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30170: LD_VAR 0 1
30174: PUSH
30175: LD_INT 255
30177: EQUAL
30178: IFFALSE 30202
30180: PUSH
30181: LD_VAR 0 2
30185: PPUSH
30186: CALL_OW 264
30190: PUSH
30191: LD_INT 14
30193: PUSH
30194: LD_INT 53
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: IN
30201: AND
30202: IFFALSE 30220
30204: PUSH
30205: LD_VAR 0 4
30209: PPUSH
30210: LD_VAR 0 5
30214: PPUSH
30215: CALL_OW 488
30219: AND
30220: IFFALSE 30244
// CutTreeXYR ( unit , x , y , 12 ) ;
30222: LD_VAR 0 2
30226: PPUSH
30227: LD_VAR 0 4
30231: PPUSH
30232: LD_VAR 0 5
30236: PPUSH
30237: LD_INT 12
30239: PPUSH
30240: CALL 30435 0 4
// if cmd = 256 then
30244: LD_VAR 0 1
30248: PUSH
30249: LD_INT 256
30251: EQUAL
30252: IFFALSE 30273
// SetFactoryWaypoint ( unit , x , y ) ;
30254: LD_VAR 0 2
30258: PPUSH
30259: LD_VAR 0 4
30263: PPUSH
30264: LD_VAR 0 5
30268: PPUSH
30269: CALL 27795 0 3
// if cmd = 257 then
30273: LD_VAR 0 1
30277: PUSH
30278: LD_INT 257
30280: EQUAL
30281: IFFALSE 30302
// SetWarehouseGatheringPoint ( unit , x , y ) ;
30283: LD_VAR 0 2
30287: PPUSH
30288: LD_VAR 0 4
30292: PPUSH
30293: LD_VAR 0 5
30297: PPUSH
30298: CALL 28291 0 3
// if cmd = 258 then
30302: LD_VAR 0 1
30306: PUSH
30307: LD_INT 258
30309: EQUAL
30310: IFFALSE 30334
// BurnTreeXYR ( unit , x , y , 8 ) ;
30312: LD_VAR 0 2
30316: PPUSH
30317: LD_VAR 0 4
30321: PPUSH
30322: LD_VAR 0 5
30326: PPUSH
30327: LD_INT 8
30329: PPUSH
30330: CALL 30835 0 4
// end ;
30334: LD_VAR 0 6
30338: RET
// export function ComRadiation ( un ) ; var eff ; begin
30339: LD_INT 0
30341: PPUSH
30342: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
30343: LD_VAR 0 1
30347: PPUSH
30348: CALL_OW 264
30352: PUSH
30353: LD_INT 91
30355: NONEQUAL
30356: IFFALSE 30360
// exit ;
30358: GO 30430
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30360: LD_INT 68
30362: PPUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: CALL_OW 255
30372: PPUSH
30373: CALL_OW 321
30377: PUSH
30378: LD_INT 2
30380: EQUAL
30381: IFFALSE 30393
// eff := 50 else
30383: LD_ADDR_VAR 0 3
30387: PUSH
30388: LD_INT 50
30390: ST_TO_ADDR
30391: GO 30401
// eff := 25 ;
30393: LD_ADDR_VAR 0 3
30397: PUSH
30398: LD_INT 25
30400: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30401: LD_VAR 0 1
30405: PPUSH
30406: CALL_OW 250
30410: PPUSH
30411: LD_VAR 0 1
30415: PPUSH
30416: CALL_OW 251
30420: PPUSH
30421: LD_VAR 0 3
30425: PPUSH
30426: CALL_OW 495
// end ;
30430: LD_VAR 0 2
30434: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30435: LD_INT 0
30437: PPUSH
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
30442: PPUSH
30443: PPUSH
30444: PPUSH
30445: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 302
30455: NOT
30456: IFTRUE 30475
30458: PUSH
30459: LD_VAR 0 2
30463: PPUSH
30464: LD_VAR 0 3
30468: PPUSH
30469: CALL_OW 488
30473: NOT
30474: OR
30475: IFTRUE 30484
30477: PUSH
30478: LD_VAR 0 4
30482: NOT
30483: OR
30484: IFFALSE 30488
// exit ;
30486: GO 30830
// list := [ ] ;
30488: LD_ADDR_VAR 0 13
30492: PUSH
30493: EMPTY
30494: ST_TO_ADDR
// if x - r < 0 then
30495: LD_VAR 0 2
30499: PUSH
30500: LD_VAR 0 4
30504: MINUS
30505: PUSH
30506: LD_INT 0
30508: LESS
30509: IFFALSE 30521
// min_x := 0 else
30511: LD_ADDR_VAR 0 7
30515: PUSH
30516: LD_INT 0
30518: ST_TO_ADDR
30519: GO 30537
// min_x := x - r ;
30521: LD_ADDR_VAR 0 7
30525: PUSH
30526: LD_VAR 0 2
30530: PUSH
30531: LD_VAR 0 4
30535: MINUS
30536: ST_TO_ADDR
// if y - r < 0 then
30537: LD_VAR 0 3
30541: PUSH
30542: LD_VAR 0 4
30546: MINUS
30547: PUSH
30548: LD_INT 0
30550: LESS
30551: IFFALSE 30563
// min_y := 0 else
30553: LD_ADDR_VAR 0 8
30557: PUSH
30558: LD_INT 0
30560: ST_TO_ADDR
30561: GO 30579
// min_y := y - r ;
30563: LD_ADDR_VAR 0 8
30567: PUSH
30568: LD_VAR 0 3
30572: PUSH
30573: LD_VAR 0 4
30577: MINUS
30578: ST_TO_ADDR
// max_x := x + r ;
30579: LD_ADDR_VAR 0 9
30583: PUSH
30584: LD_VAR 0 2
30588: PUSH
30589: LD_VAR 0 4
30593: PLUS
30594: ST_TO_ADDR
// max_y := y + r ;
30595: LD_ADDR_VAR 0 10
30599: PUSH
30600: LD_VAR 0 3
30604: PUSH
30605: LD_VAR 0 4
30609: PLUS
30610: ST_TO_ADDR
// for _x = min_x to max_x do
30611: LD_ADDR_VAR 0 11
30615: PUSH
30616: DOUBLE
30617: LD_VAR 0 7
30621: DEC
30622: ST_TO_ADDR
30623: LD_VAR 0 9
30627: PUSH
30628: FOR_TO
30629: IFFALSE 30748
// for _y = min_y to max_y do
30631: LD_ADDR_VAR 0 12
30635: PUSH
30636: DOUBLE
30637: LD_VAR 0 8
30641: DEC
30642: ST_TO_ADDR
30643: LD_VAR 0 10
30647: PUSH
30648: FOR_TO
30649: IFFALSE 30744
// begin if not ValidHex ( _x , _y ) then
30651: LD_VAR 0 11
30655: PPUSH
30656: LD_VAR 0 12
30660: PPUSH
30661: CALL_OW 488
30665: NOT
30666: IFFALSE 30670
// continue ;
30668: GO 30648
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30670: LD_VAR 0 11
30674: PPUSH
30675: LD_VAR 0 12
30679: PPUSH
30680: CALL_OW 351
30684: IFFALSE 30702
30686: PUSH
30687: LD_VAR 0 11
30691: PPUSH
30692: LD_VAR 0 12
30696: PPUSH
30697: CALL_OW 554
30701: AND
30702: IFFALSE 30742
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30704: LD_ADDR_VAR 0 13
30708: PUSH
30709: LD_VAR 0 13
30713: PPUSH
30714: LD_VAR 0 13
30718: PUSH
30719: LD_INT 1
30721: PLUS
30722: PPUSH
30723: LD_VAR 0 11
30727: PUSH
30728: LD_VAR 0 12
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PPUSH
30737: CALL_OW 2
30741: ST_TO_ADDR
// end ;
30742: GO 30648
30744: POP
30745: POP
30746: GO 30628
30748: POP
30749: POP
// if not list then
30750: LD_VAR 0 13
30754: NOT
30755: IFFALSE 30759
// exit ;
30757: GO 30830
// for i in list do
30759: LD_ADDR_VAR 0 6
30763: PUSH
30764: LD_VAR 0 13
30768: PUSH
30769: FOR_IN
30770: IFFALSE 30828
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30772: LD_VAR 0 1
30776: PPUSH
30777: LD_STRING M
30779: PUSH
30780: LD_VAR 0 6
30784: PUSH
30785: LD_INT 1
30787: ARRAY
30788: PUSH
30789: LD_VAR 0 6
30793: PUSH
30794: LD_INT 2
30796: ARRAY
30797: PUSH
30798: LD_INT 0
30800: PUSH
30801: LD_INT 0
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: PUSH
30819: EMPTY
30820: LIST
30821: PPUSH
30822: CALL_OW 447
30826: GO 30769
30828: POP
30829: POP
// end ;
30830: LD_VAR 0 5
30834: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
30835: LD_INT 0
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
30847: LD_VAR 0 1
30851: PPUSH
30852: CALL_OW 302
30856: NOT
30857: IFTRUE 30876
30859: PUSH
30860: LD_VAR 0 2
30864: PPUSH
30865: LD_VAR 0 3
30869: PPUSH
30870: CALL_OW 488
30874: NOT
30875: OR
30876: IFTRUE 30885
30878: PUSH
30879: LD_VAR 0 4
30883: NOT
30884: OR
30885: IFFALSE 30889
// exit ;
30887: GO 31406
// list := [ ] ;
30889: LD_ADDR_VAR 0 13
30893: PUSH
30894: EMPTY
30895: ST_TO_ADDR
// if x - r < 0 then
30896: LD_VAR 0 2
30900: PUSH
30901: LD_VAR 0 4
30905: MINUS
30906: PUSH
30907: LD_INT 0
30909: LESS
30910: IFFALSE 30922
// min_x := 0 else
30912: LD_ADDR_VAR 0 7
30916: PUSH
30917: LD_INT 0
30919: ST_TO_ADDR
30920: GO 30938
// min_x := x - r ;
30922: LD_ADDR_VAR 0 7
30926: PUSH
30927: LD_VAR 0 2
30931: PUSH
30932: LD_VAR 0 4
30936: MINUS
30937: ST_TO_ADDR
// if y - r < 0 then
30938: LD_VAR 0 3
30942: PUSH
30943: LD_VAR 0 4
30947: MINUS
30948: PUSH
30949: LD_INT 0
30951: LESS
30952: IFFALSE 30964
// min_y := 0 else
30954: LD_ADDR_VAR 0 8
30958: PUSH
30959: LD_INT 0
30961: ST_TO_ADDR
30962: GO 30980
// min_y := y - r ;
30964: LD_ADDR_VAR 0 8
30968: PUSH
30969: LD_VAR 0 3
30973: PUSH
30974: LD_VAR 0 4
30978: MINUS
30979: ST_TO_ADDR
// max_x := x + r ;
30980: LD_ADDR_VAR 0 9
30984: PUSH
30985: LD_VAR 0 2
30989: PUSH
30990: LD_VAR 0 4
30994: PLUS
30995: ST_TO_ADDR
// max_y := y + r ;
30996: LD_ADDR_VAR 0 10
31000: PUSH
31001: LD_VAR 0 3
31005: PUSH
31006: LD_VAR 0 4
31010: PLUS
31011: ST_TO_ADDR
// for _x = min_x to max_x do
31012: LD_ADDR_VAR 0 11
31016: PUSH
31017: DOUBLE
31018: LD_VAR 0 7
31022: DEC
31023: ST_TO_ADDR
31024: LD_VAR 0 9
31028: PUSH
31029: FOR_TO
31030: IFFALSE 31149
// for _y = min_y to max_y do
31032: LD_ADDR_VAR 0 12
31036: PUSH
31037: DOUBLE
31038: LD_VAR 0 8
31042: DEC
31043: ST_TO_ADDR
31044: LD_VAR 0 10
31048: PUSH
31049: FOR_TO
31050: IFFALSE 31145
// begin if not ValidHex ( _x , _y ) then
31052: LD_VAR 0 11
31056: PPUSH
31057: LD_VAR 0 12
31061: PPUSH
31062: CALL_OW 488
31066: NOT
31067: IFFALSE 31071
// continue ;
31069: GO 31049
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31071: LD_VAR 0 11
31075: PPUSH
31076: LD_VAR 0 12
31080: PPUSH
31081: CALL_OW 351
31085: IFFALSE 31103
31087: PUSH
31088: LD_VAR 0 11
31092: PPUSH
31093: LD_VAR 0 12
31097: PPUSH
31098: CALL_OW 554
31102: AND
31103: IFFALSE 31143
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31105: LD_ADDR_VAR 0 13
31109: PUSH
31110: LD_VAR 0 13
31114: PPUSH
31115: LD_VAR 0 13
31119: PUSH
31120: LD_INT 1
31122: PLUS
31123: PPUSH
31124: LD_VAR 0 11
31128: PUSH
31129: LD_VAR 0 12
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PPUSH
31138: CALL_OW 2
31142: ST_TO_ADDR
// end ;
31143: GO 31049
31145: POP
31146: POP
31147: GO 31029
31149: POP
31150: POP
// if not list then
31151: LD_VAR 0 13
31155: NOT
31156: IFFALSE 31160
// exit ;
31158: GO 31406
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
31160: LD_ADDR_VAR 0 13
31164: PUSH
31165: LD_VAR 0 1
31169: PPUSH
31170: LD_VAR 0 13
31174: PPUSH
31175: LD_INT 1
31177: PPUSH
31178: LD_INT 1
31180: PPUSH
31181: CALL 41049 0 4
31185: ST_TO_ADDR
// ComStop ( flame ) ;
31186: LD_VAR 0 1
31190: PPUSH
31191: CALL_OW 141
// for i in list do
31195: LD_ADDR_VAR 0 6
31199: PUSH
31200: LD_VAR 0 13
31204: PUSH
31205: FOR_IN
31206: IFFALSE 31237
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
31208: LD_VAR 0 1
31212: PPUSH
31213: LD_VAR 0 6
31217: PUSH
31218: LD_INT 1
31220: ARRAY
31221: PPUSH
31222: LD_VAR 0 6
31226: PUSH
31227: LD_INT 2
31229: ARRAY
31230: PPUSH
31231: CALL_OW 176
31235: GO 31205
31237: POP
31238: POP
// repeat wait ( 0 0$1 ) ;
31239: LD_INT 35
31241: PPUSH
31242: CALL_OW 67
// task := GetTaskList ( flame ) ;
31246: LD_ADDR_VAR 0 14
31250: PUSH
31251: LD_VAR 0 1
31255: PPUSH
31256: CALL_OW 437
31260: ST_TO_ADDR
// if not task then
31261: LD_VAR 0 14
31265: NOT
31266: IFFALSE 31270
// exit ;
31268: GO 31406
// if task [ 1 ] [ 1 ] <> | then
31270: LD_VAR 0 14
31274: PUSH
31275: LD_INT 1
31277: ARRAY
31278: PUSH
31279: LD_INT 1
31281: ARRAY
31282: PUSH
31283: LD_STRING |
31285: NONEQUAL
31286: IFFALSE 31290
// exit ;
31288: GO 31406
// _x := task [ 1 ] [ 2 ] ;
31290: LD_ADDR_VAR 0 11
31294: PUSH
31295: LD_VAR 0 14
31299: PUSH
31300: LD_INT 1
31302: ARRAY
31303: PUSH
31304: LD_INT 2
31306: ARRAY
31307: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
31308: LD_ADDR_VAR 0 12
31312: PUSH
31313: LD_VAR 0 14
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: PUSH
31322: LD_INT 3
31324: ARRAY
31325: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
31326: LD_VAR 0 11
31330: PPUSH
31331: LD_VAR 0 12
31335: PPUSH
31336: CALL_OW 351
31340: NOT
31341: IFTRUE 31360
31343: PUSH
31344: LD_VAR 0 11
31348: PPUSH
31349: LD_VAR 0 12
31353: PPUSH
31354: CALL_OW 554
31358: NOT
31359: OR
31360: IFFALSE 31394
// begin task := Delete ( task , 1 ) ;
31362: LD_ADDR_VAR 0 14
31366: PUSH
31367: LD_VAR 0 14
31371: PPUSH
31372: LD_INT 1
31374: PPUSH
31375: CALL_OW 3
31379: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
31380: LD_VAR 0 1
31384: PPUSH
31385: LD_VAR 0 14
31389: PPUSH
31390: CALL_OW 446
// end ; until not HasTask ( flame ) ;
31394: LD_VAR 0 1
31398: PPUSH
31399: CALL_OW 314
31403: NOT
31404: IFFALSE 31239
// end ;
31406: LD_VAR 0 5
31410: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31411: LD_EXP 95
31415: NOT
31416: IFFALSE 31466
31418: GO 31420
31420: DISABLE
// begin initHack := true ;
31421: LD_ADDR_EXP 95
31425: PUSH
31426: LD_INT 1
31428: ST_TO_ADDR
// hackTanks := [ ] ;
31429: LD_ADDR_EXP 96
31433: PUSH
31434: EMPTY
31435: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31436: LD_ADDR_EXP 97
31440: PUSH
31441: EMPTY
31442: ST_TO_ADDR
// hackLimit := 3 ;
31443: LD_ADDR_EXP 98
31447: PUSH
31448: LD_INT 3
31450: ST_TO_ADDR
// hackDist := 12 ;
31451: LD_ADDR_EXP 99
31455: PUSH
31456: LD_INT 12
31458: ST_TO_ADDR
// hackCounter := [ ] ;
31459: LD_ADDR_EXP 100
31463: PUSH
31464: EMPTY
31465: ST_TO_ADDR
// end ;
31466: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31467: LD_EXP 95
31471: IFFALSE 31489
31473: PUSH
31474: LD_INT 34
31476: PUSH
31477: LD_INT 99
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PPUSH
31484: CALL_OW 69
31488: AND
31489: IFFALSE 31742
31491: GO 31493
31493: DISABLE
31494: LD_INT 0
31496: PPUSH
31497: PPUSH
// begin enable ;
31498: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31499: LD_ADDR_VAR 0 1
31503: PUSH
31504: LD_INT 34
31506: PUSH
31507: LD_INT 99
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PPUSH
31514: CALL_OW 69
31518: PUSH
31519: FOR_IN
31520: IFFALSE 31740
// begin if not i in hackTanks then
31522: LD_VAR 0 1
31526: PUSH
31527: LD_EXP 96
31531: IN
31532: NOT
31533: IFFALSE 31616
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31535: LD_ADDR_EXP 96
31539: PUSH
31540: LD_EXP 96
31544: PPUSH
31545: LD_EXP 96
31549: PUSH
31550: LD_INT 1
31552: PLUS
31553: PPUSH
31554: LD_VAR 0 1
31558: PPUSH
31559: CALL_OW 1
31563: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31564: LD_ADDR_EXP 97
31568: PUSH
31569: LD_EXP 97
31573: PPUSH
31574: LD_EXP 97
31578: PUSH
31579: LD_INT 1
31581: PLUS
31582: PPUSH
31583: EMPTY
31584: PPUSH
31585: CALL_OW 1
31589: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31590: LD_ADDR_EXP 100
31594: PUSH
31595: LD_EXP 100
31599: PPUSH
31600: LD_EXP 100
31604: PUSH
31605: LD_INT 1
31607: PLUS
31608: PPUSH
31609: EMPTY
31610: PPUSH
31611: CALL_OW 1
31615: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 302
31625: NOT
31626: IFFALSE 31639
// begin HackUnlinkAll ( i ) ;
31628: LD_VAR 0 1
31632: PPUSH
31633: CALL 31745 0 1
// continue ;
31637: GO 31519
// end ; HackCheckCapturedStatus ( i ) ;
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL 32190 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31648: LD_ADDR_VAR 0 2
31652: PUSH
31653: LD_INT 81
31655: PUSH
31656: LD_VAR 0 1
31660: PPUSH
31661: CALL_OW 255
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 33
31672: PUSH
31673: LD_INT 3
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 91
31682: PUSH
31683: LD_VAR 0 1
31687: PUSH
31688: LD_EXP 99
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 50
31700: PUSH
31701: EMPTY
31702: LIST
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: PPUSH
31710: CALL_OW 69
31714: ST_TO_ADDR
// if not tmp then
31715: LD_VAR 0 2
31719: NOT
31720: IFFALSE 31724
// continue ;
31722: GO 31519
// HackLink ( i , tmp ) ;
31724: LD_VAR 0 1
31728: PPUSH
31729: LD_VAR 0 2
31733: PPUSH
31734: CALL 31881 0 2
// end ;
31738: GO 31519
31740: POP
31741: POP
// end ;
31742: PPOPN 2
31744: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31745: LD_INT 0
31747: PPUSH
31748: PPUSH
31749: PPUSH
// if not hack in hackTanks then
31750: LD_VAR 0 1
31754: PUSH
31755: LD_EXP 96
31759: IN
31760: NOT
31761: IFFALSE 31765
// exit ;
31763: GO 31876
// index := GetElementIndex ( hackTanks , hack ) ;
31765: LD_ADDR_VAR 0 4
31769: PUSH
31770: LD_EXP 96
31774: PPUSH
31775: LD_VAR 0 1
31779: PPUSH
31780: CALL 40344 0 2
31784: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31785: LD_EXP 97
31789: PUSH
31790: LD_VAR 0 4
31794: ARRAY
31795: IFFALSE 31876
// begin for i in hackTanksCaptured [ index ] do
31797: LD_ADDR_VAR 0 3
31801: PUSH
31802: LD_EXP 97
31806: PUSH
31807: LD_VAR 0 4
31811: ARRAY
31812: PUSH
31813: FOR_IN
31814: IFFALSE 31840
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31816: LD_VAR 0 3
31820: PUSH
31821: LD_INT 1
31823: ARRAY
31824: PPUSH
31825: LD_VAR 0 3
31829: PUSH
31830: LD_INT 2
31832: ARRAY
31833: PPUSH
31834: CALL_OW 235
31838: GO 31813
31840: POP
31841: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31842: LD_ADDR_EXP 97
31846: PUSH
31847: LD_EXP 97
31851: PPUSH
31852: LD_VAR 0 4
31856: PPUSH
31857: EMPTY
31858: PPUSH
31859: CALL_OW 1
31863: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31864: LD_VAR 0 1
31868: PPUSH
31869: LD_INT 0
31871: PPUSH
31872: CALL_OW 505
// end ; end ;
31876: LD_VAR 0 2
31880: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31881: LD_INT 0
31883: PPUSH
31884: PPUSH
31885: PPUSH
// if not hack in hackTanks or not vehicles then
31886: LD_VAR 0 1
31890: PUSH
31891: LD_EXP 96
31895: IN
31896: NOT
31897: IFTRUE 31906
31899: PUSH
31900: LD_VAR 0 2
31904: NOT
31905: OR
31906: IFFALSE 31910
// exit ;
31908: GO 32185
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31910: LD_ADDR_VAR 0 2
31914: PUSH
31915: LD_VAR 0 1
31919: PPUSH
31920: LD_VAR 0 2
31924: PPUSH
31925: LD_INT 1
31927: PPUSH
31928: LD_INT 1
31930: PPUSH
31931: CALL 40996 0 4
31935: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31936: LD_ADDR_VAR 0 5
31940: PUSH
31941: LD_EXP 96
31945: PPUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL 40344 0 2
31955: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31956: LD_EXP 97
31960: PUSH
31961: LD_VAR 0 5
31965: ARRAY
31966: PUSH
31967: LD_EXP 98
31971: LESS
31972: IFFALSE 32161
// begin for i := 1 to vehicles do
31974: LD_ADDR_VAR 0 4
31978: PUSH
31979: DOUBLE
31980: LD_INT 1
31982: DEC
31983: ST_TO_ADDR
31984: LD_VAR 0 2
31988: PUSH
31989: FOR_TO
31990: IFFALSE 32159
// begin if hackTanksCaptured [ index ] = hackLimit then
31992: LD_EXP 97
31996: PUSH
31997: LD_VAR 0 5
32001: ARRAY
32002: PUSH
32003: LD_EXP 98
32007: EQUAL
32008: IFFALSE 32012
// break ;
32010: GO 32159
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32012: LD_ADDR_EXP 100
32016: PUSH
32017: LD_EXP 100
32021: PPUSH
32022: LD_VAR 0 5
32026: PPUSH
32027: LD_EXP 100
32031: PUSH
32032: LD_VAR 0 5
32036: ARRAY
32037: PUSH
32038: LD_INT 1
32040: PLUS
32041: PPUSH
32042: CALL_OW 1
32046: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32047: LD_ADDR_EXP 97
32051: PUSH
32052: LD_EXP 97
32056: PPUSH
32057: LD_VAR 0 5
32061: PUSH
32062: LD_EXP 97
32066: PUSH
32067: LD_VAR 0 5
32071: ARRAY
32072: PUSH
32073: LD_INT 1
32075: PLUS
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PPUSH
32081: LD_VAR 0 2
32085: PUSH
32086: LD_VAR 0 4
32090: ARRAY
32091: PUSH
32092: LD_VAR 0 2
32096: PUSH
32097: LD_VAR 0 4
32101: ARRAY
32102: PPUSH
32103: CALL_OW 255
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PPUSH
32112: CALL 40561 0 3
32116: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32117: LD_VAR 0 2
32121: PUSH
32122: LD_VAR 0 4
32126: ARRAY
32127: PPUSH
32128: LD_VAR 0 1
32132: PPUSH
32133: CALL_OW 255
32137: PPUSH
32138: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32142: LD_VAR 0 2
32146: PUSH
32147: LD_VAR 0 4
32151: ARRAY
32152: PPUSH
32153: CALL_OW 141
// end ;
32157: GO 31989
32159: POP
32160: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32161: LD_VAR 0 1
32165: PPUSH
32166: LD_EXP 97
32170: PUSH
32171: LD_VAR 0 5
32175: ARRAY
32176: PUSH
32177: LD_INT 0
32179: PLUS
32180: PPUSH
32181: CALL_OW 505
// end ;
32185: LD_VAR 0 3
32189: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32190: LD_INT 0
32192: PPUSH
32193: PPUSH
32194: PPUSH
32195: PPUSH
// if not hack in hackTanks then
32196: LD_VAR 0 1
32200: PUSH
32201: LD_EXP 96
32205: IN
32206: NOT
32207: IFFALSE 32211
// exit ;
32209: GO 32455
// index := GetElementIndex ( hackTanks , hack ) ;
32211: LD_ADDR_VAR 0 4
32215: PUSH
32216: LD_EXP 96
32220: PPUSH
32221: LD_VAR 0 1
32225: PPUSH
32226: CALL 40344 0 2
32230: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32231: LD_ADDR_VAR 0 3
32235: PUSH
32236: DOUBLE
32237: LD_EXP 97
32241: PUSH
32242: LD_VAR 0 4
32246: ARRAY
32247: INC
32248: ST_TO_ADDR
32249: LD_INT 1
32251: PUSH
32252: FOR_DOWNTO
32253: IFFALSE 32429
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32255: LD_ADDR_VAR 0 5
32259: PUSH
32260: LD_EXP 97
32264: PUSH
32265: LD_VAR 0 4
32269: ARRAY
32270: PUSH
32271: LD_VAR 0 3
32275: ARRAY
32276: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32277: LD_VAR 0 5
32281: PUSH
32282: LD_INT 1
32284: ARRAY
32285: PPUSH
32286: CALL_OW 302
32290: NOT
32291: IFTRUE 32319
32293: PUSH
32294: LD_VAR 0 5
32298: PUSH
32299: LD_INT 1
32301: ARRAY
32302: PPUSH
32303: CALL_OW 255
32307: PUSH
32308: LD_VAR 0 1
32312: PPUSH
32313: CALL_OW 255
32317: NONEQUAL
32318: OR
32319: IFFALSE 32427
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32321: LD_VAR 0 5
32325: PUSH
32326: LD_INT 1
32328: ARRAY
32329: PPUSH
32330: CALL_OW 305
32334: IFFALSE 32362
32336: PUSH
32337: LD_VAR 0 5
32341: PUSH
32342: LD_INT 1
32344: ARRAY
32345: PPUSH
32346: CALL_OW 255
32350: PUSH
32351: LD_VAR 0 1
32355: PPUSH
32356: CALL_OW 255
32360: EQUAL
32361: AND
32362: IFFALSE 32386
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32364: LD_VAR 0 5
32368: PUSH
32369: LD_INT 1
32371: ARRAY
32372: PPUSH
32373: LD_VAR 0 5
32377: PUSH
32378: LD_INT 2
32380: ARRAY
32381: PPUSH
32382: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32386: LD_ADDR_EXP 97
32390: PUSH
32391: LD_EXP 97
32395: PPUSH
32396: LD_VAR 0 4
32400: PPUSH
32401: LD_EXP 97
32405: PUSH
32406: LD_VAR 0 4
32410: ARRAY
32411: PPUSH
32412: LD_VAR 0 3
32416: PPUSH
32417: CALL_OW 3
32421: PPUSH
32422: CALL_OW 1
32426: ST_TO_ADDR
// end ; end ;
32427: GO 32252
32429: POP
32430: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32431: LD_VAR 0 1
32435: PPUSH
32436: LD_EXP 97
32440: PUSH
32441: LD_VAR 0 4
32445: ARRAY
32446: PUSH
32447: LD_INT 0
32449: PLUS
32450: PPUSH
32451: CALL_OW 505
// end ;
32455: LD_VAR 0 2
32459: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32460: LD_INT 0
32462: PPUSH
32463: PPUSH
32464: PPUSH
32465: PPUSH
// if not hack in hackTanks then
32466: LD_VAR 0 1
32470: PUSH
32471: LD_EXP 96
32475: IN
32476: NOT
32477: IFFALSE 32481
// exit ;
32479: GO 32566
// index := GetElementIndex ( hackTanks , hack ) ;
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: LD_EXP 96
32490: PPUSH
32491: LD_VAR 0 1
32495: PPUSH
32496: CALL 40344 0 2
32500: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32501: LD_ADDR_VAR 0 4
32505: PUSH
32506: DOUBLE
32507: LD_INT 1
32509: DEC
32510: ST_TO_ADDR
32511: LD_EXP 97
32515: PUSH
32516: LD_VAR 0 5
32520: ARRAY
32521: PUSH
32522: FOR_TO
32523: IFFALSE 32564
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32525: LD_EXP 97
32529: PUSH
32530: LD_VAR 0 5
32534: ARRAY
32535: PUSH
32536: LD_VAR 0 4
32540: ARRAY
32541: PUSH
32542: LD_INT 1
32544: ARRAY
32545: PUSH
32546: LD_VAR 0 2
32550: EQUAL
32551: IFFALSE 32562
// KillUnit ( vehicle ) ;
32553: LD_VAR 0 2
32557: PPUSH
32558: CALL_OW 66
32562: GO 32522
32564: POP
32565: POP
// end ;
32566: LD_VAR 0 3
32570: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32571: LD_EXP 101
32575: NOT
32576: IFFALSE 32611
32578: GO 32580
32580: DISABLE
// begin initMiner := true ;
32581: LD_ADDR_EXP 101
32585: PUSH
32586: LD_INT 1
32588: ST_TO_ADDR
// minersList := [ ] ;
32589: LD_ADDR_EXP 102
32593: PUSH
32594: EMPTY
32595: ST_TO_ADDR
// minerMinesList := [ ] ;
32596: LD_ADDR_EXP 103
32600: PUSH
32601: EMPTY
32602: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32603: LD_ADDR_EXP 104
32607: PUSH
32608: LD_INT 5
32610: ST_TO_ADDR
// end ;
32611: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32612: LD_EXP 101
32616: IFFALSE 32634
32618: PUSH
32619: LD_INT 34
32621: PUSH
32622: LD_INT 81
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PPUSH
32629: CALL_OW 69
32633: AND
32634: IFFALSE 33097
32636: GO 32638
32638: DISABLE
32639: LD_INT 0
32641: PPUSH
32642: PPUSH
32643: PPUSH
32644: PPUSH
// begin enable ;
32645: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32646: LD_ADDR_VAR 0 1
32650: PUSH
32651: LD_INT 34
32653: PUSH
32654: LD_INT 81
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PPUSH
32661: CALL_OW 69
32665: PUSH
32666: FOR_IN
32667: IFFALSE 32739
// begin if not i in minersList then
32669: LD_VAR 0 1
32673: PUSH
32674: LD_EXP 102
32678: IN
32679: NOT
32680: IFFALSE 32737
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32682: LD_ADDR_EXP 102
32686: PUSH
32687: LD_EXP 102
32691: PPUSH
32692: LD_EXP 102
32696: PUSH
32697: LD_INT 1
32699: PLUS
32700: PPUSH
32701: LD_VAR 0 1
32705: PPUSH
32706: CALL_OW 1
32710: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32711: LD_ADDR_EXP 103
32715: PUSH
32716: LD_EXP 103
32720: PPUSH
32721: LD_EXP 103
32725: PUSH
32726: LD_INT 1
32728: PLUS
32729: PPUSH
32730: EMPTY
32731: PPUSH
32732: CALL_OW 1
32736: ST_TO_ADDR
// end end ;
32737: GO 32666
32739: POP
32740: POP
// for i := minerMinesList downto 1 do
32741: LD_ADDR_VAR 0 1
32745: PUSH
32746: DOUBLE
32747: LD_EXP 103
32751: INC
32752: ST_TO_ADDR
32753: LD_INT 1
32755: PUSH
32756: FOR_DOWNTO
32757: IFFALSE 33095
// begin if IsLive ( minersList [ i ] ) then
32759: LD_EXP 102
32763: PUSH
32764: LD_VAR 0 1
32768: ARRAY
32769: PPUSH
32770: CALL_OW 300
32774: IFFALSE 32802
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32776: LD_EXP 102
32780: PUSH
32781: LD_VAR 0 1
32785: ARRAY
32786: PPUSH
32787: LD_EXP 103
32791: PUSH
32792: LD_VAR 0 1
32796: ARRAY
32797: PPUSH
32798: CALL_OW 505
// if not minerMinesList [ i ] then
32802: LD_EXP 103
32806: PUSH
32807: LD_VAR 0 1
32811: ARRAY
32812: NOT
32813: IFFALSE 32817
// continue ;
32815: GO 32756
// for j := minerMinesList [ i ] downto 1 do
32817: LD_ADDR_VAR 0 2
32821: PUSH
32822: DOUBLE
32823: LD_EXP 103
32827: PUSH
32828: LD_VAR 0 1
32832: ARRAY
32833: INC
32834: ST_TO_ADDR
32835: LD_INT 1
32837: PUSH
32838: FOR_DOWNTO
32839: IFFALSE 33091
// begin side := GetSide ( minersList [ i ] ) ;
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: LD_EXP 102
32850: PUSH
32851: LD_VAR 0 1
32855: ARRAY
32856: PPUSH
32857: CALL_OW 255
32861: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32862: LD_ADDR_VAR 0 4
32866: PUSH
32867: LD_EXP 103
32871: PUSH
32872: LD_VAR 0 1
32876: ARRAY
32877: PUSH
32878: LD_VAR 0 2
32882: ARRAY
32883: PUSH
32884: LD_INT 1
32886: ARRAY
32887: PPUSH
32888: LD_EXP 103
32892: PUSH
32893: LD_VAR 0 1
32897: ARRAY
32898: PUSH
32899: LD_VAR 0 2
32903: ARRAY
32904: PUSH
32905: LD_INT 2
32907: ARRAY
32908: PPUSH
32909: CALL_OW 428
32913: ST_TO_ADDR
// if not tmp then
32914: LD_VAR 0 4
32918: NOT
32919: IFFALSE 32923
// continue ;
32921: GO 32838
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32923: LD_VAR 0 4
32927: PUSH
32928: LD_INT 81
32930: PUSH
32931: LD_VAR 0 3
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PPUSH
32940: CALL_OW 69
32944: IN
32945: IFFALSE 32995
32947: PUSH
32948: LD_EXP 103
32952: PUSH
32953: LD_VAR 0 1
32957: ARRAY
32958: PUSH
32959: LD_VAR 0 2
32963: ARRAY
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: PPUSH
32969: LD_EXP 103
32973: PUSH
32974: LD_VAR 0 1
32978: ARRAY
32979: PUSH
32980: LD_VAR 0 2
32984: ARRAY
32985: PUSH
32986: LD_INT 2
32988: ARRAY
32989: PPUSH
32990: CALL_OW 458
32994: AND
32995: IFFALSE 33089
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32997: LD_EXP 103
33001: PUSH
33002: LD_VAR 0 1
33006: ARRAY
33007: PUSH
33008: LD_VAR 0 2
33012: ARRAY
33013: PUSH
33014: LD_INT 1
33016: ARRAY
33017: PPUSH
33018: LD_EXP 103
33022: PUSH
33023: LD_VAR 0 1
33027: ARRAY
33028: PUSH
33029: LD_VAR 0 2
33033: ARRAY
33034: PUSH
33035: LD_INT 2
33037: ARRAY
33038: PPUSH
33039: LD_VAR 0 3
33043: PPUSH
33044: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33048: LD_ADDR_EXP 103
33052: PUSH
33053: LD_EXP 103
33057: PPUSH
33058: LD_VAR 0 1
33062: PPUSH
33063: LD_EXP 103
33067: PUSH
33068: LD_VAR 0 1
33072: ARRAY
33073: PPUSH
33074: LD_VAR 0 2
33078: PPUSH
33079: CALL_OW 3
33083: PPUSH
33084: CALL_OW 1
33088: ST_TO_ADDR
// end ; end ;
33089: GO 32838
33091: POP
33092: POP
// end ;
33093: GO 32756
33095: POP
33096: POP
// end ;
33097: PPOPN 4
33099: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33100: LD_INT 0
33102: PPUSH
33103: PPUSH
// result := false ;
33104: LD_ADDR_VAR 0 4
33108: PUSH
33109: LD_INT 0
33111: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33112: LD_VAR 0 1
33116: PPUSH
33117: CALL_OW 264
33121: PUSH
33122: LD_INT 81
33124: EQUAL
33125: NOT
33126: IFFALSE 33130
// exit ;
33128: GO 33374
// index := GetElementIndex ( minersList , unit ) ;
33130: LD_ADDR_VAR 0 5
33134: PUSH
33135: LD_EXP 102
33139: PPUSH
33140: LD_VAR 0 1
33144: PPUSH
33145: CALL 40344 0 2
33149: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33150: LD_EXP 103
33154: PUSH
33155: LD_VAR 0 5
33159: ARRAY
33160: PUSH
33161: LD_EXP 104
33165: GREATEREQUAL
33166: IFFALSE 33170
// exit ;
33168: GO 33374
// ComMoveXY ( unit , x , y ) ;
33170: LD_VAR 0 1
33174: PPUSH
33175: LD_VAR 0 2
33179: PPUSH
33180: LD_VAR 0 3
33184: PPUSH
33185: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33189: LD_INT 35
33191: PPUSH
33192: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33196: LD_VAR 0 1
33200: PPUSH
33201: LD_VAR 0 2
33205: PPUSH
33206: LD_VAR 0 3
33210: PPUSH
33211: CALL 72390 0 3
33215: NOT
33216: IFFALSE 33229
33218: PUSH
33219: LD_VAR 0 1
33223: PPUSH
33224: CALL_OW 314
33228: AND
33229: IFFALSE 33233
// exit ;
33231: GO 33374
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33233: LD_VAR 0 2
33237: PPUSH
33238: LD_VAR 0 3
33242: PPUSH
33243: CALL_OW 428
33247: PUSH
33248: LD_VAR 0 1
33252: EQUAL
33253: IFFALSE 33267
33255: PUSH
33256: LD_VAR 0 1
33260: PPUSH
33261: CALL_OW 314
33265: NOT
33266: AND
33267: IFFALSE 33189
// PlaySoundXY ( x , y , PlantMine ) ;
33269: LD_VAR 0 2
33273: PPUSH
33274: LD_VAR 0 3
33278: PPUSH
33279: LD_STRING PlantMine
33281: PPUSH
33282: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33286: LD_VAR 0 2
33290: PPUSH
33291: LD_VAR 0 3
33295: PPUSH
33296: LD_VAR 0 1
33300: PPUSH
33301: CALL_OW 255
33305: PPUSH
33306: LD_INT 0
33308: PPUSH
33309: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33313: LD_ADDR_EXP 103
33317: PUSH
33318: LD_EXP 103
33322: PPUSH
33323: LD_VAR 0 5
33327: PUSH
33328: LD_EXP 103
33332: PUSH
33333: LD_VAR 0 5
33337: ARRAY
33338: PUSH
33339: LD_INT 1
33341: PLUS
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PPUSH
33347: LD_VAR 0 2
33351: PUSH
33352: LD_VAR 0 3
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PPUSH
33361: CALL 40561 0 3
33365: ST_TO_ADDR
// result := true ;
33366: LD_ADDR_VAR 0 4
33370: PUSH
33371: LD_INT 1
33373: ST_TO_ADDR
// end ;
33374: LD_VAR 0 4
33378: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33379: LD_INT 0
33381: PPUSH
33382: PPUSH
33383: PPUSH
// if not unit in minersList then
33384: LD_VAR 0 1
33388: PUSH
33389: LD_EXP 102
33393: IN
33394: NOT
33395: IFFALSE 33399
// exit ;
33397: GO 33793
// index := GetElementIndex ( minersList , unit ) ;
33399: LD_ADDR_VAR 0 6
33403: PUSH
33404: LD_EXP 102
33408: PPUSH
33409: LD_VAR 0 1
33413: PPUSH
33414: CALL 40344 0 2
33418: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33419: LD_ADDR_VAR 0 5
33423: PUSH
33424: DOUBLE
33425: LD_EXP 103
33429: PUSH
33430: LD_VAR 0 6
33434: ARRAY
33435: INC
33436: ST_TO_ADDR
33437: LD_INT 1
33439: PUSH
33440: FOR_DOWNTO
33441: IFFALSE 33604
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33443: LD_EXP 103
33447: PUSH
33448: LD_VAR 0 6
33452: ARRAY
33453: PUSH
33454: LD_VAR 0 5
33458: ARRAY
33459: PUSH
33460: LD_INT 1
33462: ARRAY
33463: PUSH
33464: LD_VAR 0 2
33468: EQUAL
33469: IFFALSE 33499
33471: PUSH
33472: LD_EXP 103
33476: PUSH
33477: LD_VAR 0 6
33481: ARRAY
33482: PUSH
33483: LD_VAR 0 5
33487: ARRAY
33488: PUSH
33489: LD_INT 2
33491: ARRAY
33492: PUSH
33493: LD_VAR 0 3
33497: EQUAL
33498: AND
33499: IFFALSE 33602
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33501: LD_EXP 103
33505: PUSH
33506: LD_VAR 0 6
33510: ARRAY
33511: PUSH
33512: LD_VAR 0 5
33516: ARRAY
33517: PUSH
33518: LD_INT 1
33520: ARRAY
33521: PPUSH
33522: LD_EXP 103
33526: PUSH
33527: LD_VAR 0 6
33531: ARRAY
33532: PUSH
33533: LD_VAR 0 5
33537: ARRAY
33538: PUSH
33539: LD_INT 2
33541: ARRAY
33542: PPUSH
33543: LD_VAR 0 1
33547: PPUSH
33548: CALL_OW 255
33552: PPUSH
33553: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33557: LD_ADDR_EXP 103
33561: PUSH
33562: LD_EXP 103
33566: PPUSH
33567: LD_VAR 0 6
33571: PPUSH
33572: LD_EXP 103
33576: PUSH
33577: LD_VAR 0 6
33581: ARRAY
33582: PPUSH
33583: LD_VAR 0 5
33587: PPUSH
33588: CALL_OW 3
33592: PPUSH
33593: CALL_OW 1
33597: ST_TO_ADDR
// exit ;
33598: POP
33599: POP
33600: GO 33793
// end ; end ;
33602: GO 33440
33604: POP
33605: POP
// for i := minerMinesList [ index ] downto 1 do
33606: LD_ADDR_VAR 0 5
33610: PUSH
33611: DOUBLE
33612: LD_EXP 103
33616: PUSH
33617: LD_VAR 0 6
33621: ARRAY
33622: INC
33623: ST_TO_ADDR
33624: LD_INT 1
33626: PUSH
33627: FOR_DOWNTO
33628: IFFALSE 33791
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33630: LD_EXP 103
33634: PUSH
33635: LD_VAR 0 6
33639: ARRAY
33640: PUSH
33641: LD_VAR 0 5
33645: ARRAY
33646: PUSH
33647: LD_INT 1
33649: ARRAY
33650: PPUSH
33651: LD_EXP 103
33655: PUSH
33656: LD_VAR 0 6
33660: ARRAY
33661: PUSH
33662: LD_VAR 0 5
33666: ARRAY
33667: PUSH
33668: LD_INT 2
33670: ARRAY
33671: PPUSH
33672: LD_VAR 0 2
33676: PPUSH
33677: LD_VAR 0 3
33681: PPUSH
33682: CALL_OW 298
33686: PUSH
33687: LD_INT 6
33689: LESS
33690: IFFALSE 33789
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33692: LD_EXP 103
33696: PUSH
33697: LD_VAR 0 6
33701: ARRAY
33702: PUSH
33703: LD_VAR 0 5
33707: ARRAY
33708: PUSH
33709: LD_INT 1
33711: ARRAY
33712: PPUSH
33713: LD_EXP 103
33717: PUSH
33718: LD_VAR 0 6
33722: ARRAY
33723: PUSH
33724: LD_VAR 0 5
33728: ARRAY
33729: PUSH
33730: LD_INT 2
33732: ARRAY
33733: PPUSH
33734: LD_VAR 0 1
33738: PPUSH
33739: CALL_OW 255
33743: PPUSH
33744: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33748: LD_ADDR_EXP 103
33752: PUSH
33753: LD_EXP 103
33757: PPUSH
33758: LD_VAR 0 6
33762: PPUSH
33763: LD_EXP 103
33767: PUSH
33768: LD_VAR 0 6
33772: ARRAY
33773: PPUSH
33774: LD_VAR 0 5
33778: PPUSH
33779: CALL_OW 3
33783: PPUSH
33784: CALL_OW 1
33788: ST_TO_ADDR
// end ; end ;
33789: GO 33627
33791: POP
33792: POP
// end ;
33793: LD_VAR 0 4
33797: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33798: LD_INT 0
33800: PPUSH
33801: PPUSH
33802: PPUSH
33803: PPUSH
33804: PPUSH
33805: PPUSH
33806: PPUSH
33807: PPUSH
33808: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 264
33818: PUSH
33819: LD_INT 81
33821: EQUAL
33822: NOT
33823: IFTRUE 33838
33825: PUSH
33826: LD_VAR 0 1
33830: PUSH
33831: LD_EXP 102
33835: IN
33836: NOT
33837: OR
33838: IFFALSE 33842
// exit ;
33840: GO 34168
// index := GetElementIndex ( minersList , unit ) ;
33842: LD_ADDR_VAR 0 6
33846: PUSH
33847: LD_EXP 102
33851: PPUSH
33852: LD_VAR 0 1
33856: PPUSH
33857: CALL 40344 0 2
33861: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33862: LD_ADDR_VAR 0 8
33866: PUSH
33867: LD_EXP 104
33871: PUSH
33872: LD_EXP 103
33876: PUSH
33877: LD_VAR 0 6
33881: ARRAY
33882: MINUS
33883: ST_TO_ADDR
// if not minesFreeAmount then
33884: LD_VAR 0 8
33888: NOT
33889: IFFALSE 33893
// exit ;
33891: GO 34168
// tmp := [ ] ;
33893: LD_ADDR_VAR 0 7
33897: PUSH
33898: EMPTY
33899: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33900: LD_ADDR_VAR 0 5
33904: PUSH
33905: DOUBLE
33906: LD_INT 1
33908: DEC
33909: ST_TO_ADDR
33910: LD_VAR 0 8
33914: PUSH
33915: FOR_TO
33916: IFFALSE 34115
// begin _d := rand ( 0 , 5 ) ;
33918: LD_ADDR_VAR 0 11
33922: PUSH
33923: LD_INT 0
33925: PPUSH
33926: LD_INT 5
33928: PPUSH
33929: CALL_OW 12
33933: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33934: LD_ADDR_VAR 0 12
33938: PUSH
33939: LD_INT 2
33941: PPUSH
33942: LD_INT 6
33944: PPUSH
33945: CALL_OW 12
33949: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33950: LD_ADDR_VAR 0 9
33954: PUSH
33955: LD_VAR 0 2
33959: PPUSH
33960: LD_VAR 0 11
33964: PPUSH
33965: LD_VAR 0 12
33969: PPUSH
33970: CALL_OW 272
33974: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33975: LD_ADDR_VAR 0 10
33979: PUSH
33980: LD_VAR 0 3
33984: PPUSH
33985: LD_VAR 0 11
33989: PPUSH
33990: LD_VAR 0 12
33994: PPUSH
33995: CALL_OW 273
33999: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34000: LD_VAR 0 9
34004: PPUSH
34005: LD_VAR 0 10
34009: PPUSH
34010: CALL_OW 488
34014: IFFALSE 34038
34016: PUSH
34017: LD_VAR 0 9
34021: PUSH
34022: LD_VAR 0 10
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: LD_VAR 0 7
34035: IN
34036: NOT
34037: AND
34038: IFFALSE 34057
34040: PUSH
34041: LD_VAR 0 9
34045: PPUSH
34046: LD_VAR 0 10
34050: PPUSH
34051: CALL_OW 458
34055: NOT
34056: AND
34057: IFFALSE 34099
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34059: LD_ADDR_VAR 0 7
34063: PUSH
34064: LD_VAR 0 7
34068: PPUSH
34069: LD_VAR 0 7
34073: PUSH
34074: LD_INT 1
34076: PLUS
34077: PPUSH
34078: LD_VAR 0 9
34082: PUSH
34083: LD_VAR 0 10
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PPUSH
34092: CALL_OW 1
34096: ST_TO_ADDR
34097: GO 34113
// i := i - 1 ;
34099: LD_ADDR_VAR 0 5
34103: PUSH
34104: LD_VAR 0 5
34108: PUSH
34109: LD_INT 1
34111: MINUS
34112: ST_TO_ADDR
// end ;
34113: GO 33915
34115: POP
34116: POP
// for i in tmp do
34117: LD_ADDR_VAR 0 5
34121: PUSH
34122: LD_VAR 0 7
34126: PUSH
34127: FOR_IN
34128: IFFALSE 34166
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34130: LD_VAR 0 1
34134: PPUSH
34135: LD_VAR 0 5
34139: PUSH
34140: LD_INT 1
34142: ARRAY
34143: PPUSH
34144: LD_VAR 0 5
34148: PUSH
34149: LD_INT 2
34151: ARRAY
34152: PPUSH
34153: CALL 33100 0 3
34157: NOT
34158: IFFALSE 34164
// exit ;
34160: POP
34161: POP
34162: GO 34168
34164: GO 34127
34166: POP
34167: POP
// end ;
34168: LD_VAR 0 4
34172: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
34173: LD_INT 0
34175: PPUSH
34176: PPUSH
34177: PPUSH
34178: PPUSH
34179: PPUSH
34180: PPUSH
34181: PPUSH
34182: PPUSH
34183: PPUSH
// if GetClass ( unit ) <> class_sniper then
34184: LD_VAR 0 1
34188: PPUSH
34189: CALL_OW 257
34193: PUSH
34194: LD_INT 5
34196: NONEQUAL
34197: IFFALSE 34201
// exit ;
34199: GO 34671
// dist := 8 ;
34201: LD_ADDR_VAR 0 5
34205: PUSH
34206: LD_INT 8
34208: ST_TO_ADDR
// viewRange := 12 ;
34209: LD_ADDR_VAR 0 8
34213: PUSH
34214: LD_INT 12
34216: ST_TO_ADDR
// side := GetSide ( unit ) ;
34217: LD_ADDR_VAR 0 6
34221: PUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 255
34231: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34232: LD_INT 61
34234: PPUSH
34235: LD_VAR 0 6
34239: PPUSH
34240: CALL_OW 321
34244: PUSH
34245: LD_INT 2
34247: EQUAL
34248: IFFALSE 34258
// viewRange := 16 ;
34250: LD_ADDR_VAR 0 8
34254: PUSH
34255: LD_INT 16
34257: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34258: LD_VAR 0 1
34262: PPUSH
34263: LD_VAR 0 2
34267: PPUSH
34268: LD_VAR 0 3
34272: PPUSH
34273: CALL_OW 297
34277: PUSH
34278: LD_VAR 0 5
34282: GREATER
34283: IFFALSE 34362
// begin ComMoveXY ( unit , x , y ) ;
34285: LD_VAR 0 1
34289: PPUSH
34290: LD_VAR 0 2
34294: PPUSH
34295: LD_VAR 0 3
34299: PPUSH
34300: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34304: LD_INT 35
34306: PPUSH
34307: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34311: LD_VAR 0 1
34315: PPUSH
34316: LD_VAR 0 2
34320: PPUSH
34321: LD_VAR 0 3
34325: PPUSH
34326: CALL 72390 0 3
34330: NOT
34331: IFFALSE 34335
// exit ;
34333: GO 34671
// until GetDistUnitXY ( unit , x , y ) < dist ;
34335: LD_VAR 0 1
34339: PPUSH
34340: LD_VAR 0 2
34344: PPUSH
34345: LD_VAR 0 3
34349: PPUSH
34350: CALL_OW 297
34354: PUSH
34355: LD_VAR 0 5
34359: LESS
34360: IFFALSE 34304
// end ; ComTurnXY ( unit , x , y ) ;
34362: LD_VAR 0 1
34366: PPUSH
34367: LD_VAR 0 2
34371: PPUSH
34372: LD_VAR 0 3
34376: PPUSH
34377: CALL_OW 118
// repeat if Multiplayer then
34381: LD_OWVAR 4
34385: IFFALSE 34396
// wait ( 35 ) else
34387: LD_INT 35
34389: PPUSH
34390: CALL_OW 67
34394: GO 34403
// wait ( 5 ) ;
34396: LD_INT 5
34398: PPUSH
34399: CALL_OW 67
// _d := GetDir ( unit ) ;
34403: LD_ADDR_VAR 0 11
34407: PUSH
34408: LD_VAR 0 1
34412: PPUSH
34413: CALL_OW 254
34417: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
34418: LD_ADDR_VAR 0 7
34422: PUSH
34423: LD_VAR 0 1
34427: PPUSH
34428: CALL_OW 250
34432: PPUSH
34433: LD_VAR 0 1
34437: PPUSH
34438: CALL_OW 251
34442: PPUSH
34443: LD_VAR 0 2
34447: PPUSH
34448: LD_VAR 0 3
34452: PPUSH
34453: CALL 75026 0 4
34457: ST_TO_ADDR
// until dir = _d ;
34458: LD_VAR 0 7
34462: PUSH
34463: LD_VAR 0 11
34467: EQUAL
34468: IFFALSE 34381
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
34470: LD_ADDR_VAR 0 9
34474: PUSH
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 250
34484: PPUSH
34485: LD_VAR 0 7
34489: PPUSH
34490: LD_VAR 0 5
34494: PPUSH
34495: CALL_OW 272
34499: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
34500: LD_ADDR_VAR 0 10
34504: PUSH
34505: LD_VAR 0 1
34509: PPUSH
34510: CALL_OW 251
34514: PPUSH
34515: LD_VAR 0 7
34519: PPUSH
34520: LD_VAR 0 5
34524: PPUSH
34525: CALL_OW 273
34529: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34530: LD_VAR 0 9
34534: PPUSH
34535: LD_VAR 0 10
34539: PPUSH
34540: CALL_OW 488
34544: NOT
34545: IFFALSE 34549
// exit ;
34547: GO 34671
// ComAnimCustom ( unit , 1 ) ;
34549: LD_VAR 0 1
34553: PPUSH
34554: LD_INT 1
34556: PPUSH
34557: CALL_OW 592
// p := 0 ;
34561: LD_ADDR_VAR 0 12
34565: PUSH
34566: LD_INT 0
34568: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34569: LD_VAR 0 9
34573: PPUSH
34574: LD_VAR 0 10
34578: PPUSH
34579: LD_VAR 0 6
34583: PPUSH
34584: LD_VAR 0 8
34588: PPUSH
34589: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
34593: LD_INT 35
34595: PPUSH
34596: CALL_OW 67
// p := Inc ( p ) ;
34600: LD_ADDR_VAR 0 12
34604: PUSH
34605: LD_VAR 0 12
34609: PPUSH
34610: CALL 74982 0 1
34614: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
34615: LD_VAR 0 12
34619: PUSH
34620: LD_INT 3
34622: EQUAL
34623: IFTRUE 34637
34625: PUSH
34626: LD_VAR 0 1
34630: PPUSH
34631: CALL_OW 302
34635: NOT
34636: OR
34637: IFTRUE 34650
34639: PUSH
34640: LD_VAR 0 1
34644: PPUSH
34645: CALL_OW 301
34649: OR
34650: IFFALSE 34593
// RemoveSeeing ( _x , _y , side ) ;
34652: LD_VAR 0 9
34656: PPUSH
34657: LD_VAR 0 10
34661: PPUSH
34662: LD_VAR 0 6
34666: PPUSH
34667: CALL_OW 331
// end ;
34671: LD_VAR 0 4
34675: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
34676: LD_INT 0
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
// if not unit then
34689: LD_VAR 0 1
34693: NOT
34694: IFFALSE 34698
// exit ;
34696: GO 34969
// side := GetSide ( unit ) ;
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: LD_VAR 0 1
34707: PPUSH
34708: CALL_OW 255
34712: ST_TO_ADDR
// x := GetX ( unit ) ;
34713: LD_ADDR_VAR 0 5
34717: PUSH
34718: LD_VAR 0 1
34722: PPUSH
34723: CALL_OW 250
34727: ST_TO_ADDR
// y := GetY ( unit ) ;
34728: LD_ADDR_VAR 0 6
34732: PUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 251
34742: ST_TO_ADDR
// r := 8 ;
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_INT 8
34750: ST_TO_ADDR
// if x - r < 0 then
34751: LD_VAR 0 5
34755: PUSH
34756: LD_VAR 0 4
34760: MINUS
34761: PUSH
34762: LD_INT 0
34764: LESS
34765: IFFALSE 34777
// min_x := 0 else
34767: LD_ADDR_VAR 0 7
34771: PUSH
34772: LD_INT 0
34774: ST_TO_ADDR
34775: GO 34793
// min_x := x - r ;
34777: LD_ADDR_VAR 0 7
34781: PUSH
34782: LD_VAR 0 5
34786: PUSH
34787: LD_VAR 0 4
34791: MINUS
34792: ST_TO_ADDR
// if y - r < 0 then
34793: LD_VAR 0 6
34797: PUSH
34798: LD_VAR 0 4
34802: MINUS
34803: PUSH
34804: LD_INT 0
34806: LESS
34807: IFFALSE 34819
// min_y := 0 else
34809: LD_ADDR_VAR 0 8
34813: PUSH
34814: LD_INT 0
34816: ST_TO_ADDR
34817: GO 34835
// min_y := y - r ;
34819: LD_ADDR_VAR 0 8
34823: PUSH
34824: LD_VAR 0 6
34828: PUSH
34829: LD_VAR 0 4
34833: MINUS
34834: ST_TO_ADDR
// max_x := x + r ;
34835: LD_ADDR_VAR 0 9
34839: PUSH
34840: LD_VAR 0 5
34844: PUSH
34845: LD_VAR 0 4
34849: PLUS
34850: ST_TO_ADDR
// max_y := y + r ;
34851: LD_ADDR_VAR 0 10
34855: PUSH
34856: LD_VAR 0 6
34860: PUSH
34861: LD_VAR 0 4
34865: PLUS
34866: ST_TO_ADDR
// for _x = min_x to max_x do
34867: LD_ADDR_VAR 0 11
34871: PUSH
34872: DOUBLE
34873: LD_VAR 0 7
34877: DEC
34878: ST_TO_ADDR
34879: LD_VAR 0 9
34883: PUSH
34884: FOR_TO
34885: IFFALSE 34967
// for _y = min_y to max_y do
34887: LD_ADDR_VAR 0 12
34891: PUSH
34892: DOUBLE
34893: LD_VAR 0 8
34897: DEC
34898: ST_TO_ADDR
34899: LD_VAR 0 10
34903: PUSH
34904: FOR_TO
34905: IFFALSE 34963
// begin if not ValidHex ( _x , _y ) then
34907: LD_VAR 0 11
34911: PPUSH
34912: LD_VAR 0 12
34916: PPUSH
34917: CALL_OW 488
34921: NOT
34922: IFFALSE 34926
// continue ;
34924: GO 34904
// if MineAtPos ( _x , _y ) then
34926: LD_VAR 0 11
34930: PPUSH
34931: LD_VAR 0 12
34935: PPUSH
34936: CALL_OW 458
34940: IFFALSE 34961
// ViewMineAtPos ( _x , _y , side ) ;
34942: LD_VAR 0 11
34946: PPUSH
34947: LD_VAR 0 12
34951: PPUSH
34952: LD_VAR 0 3
34956: PPUSH
34957: CALL_OW 457
// end ;
34961: GO 34904
34963: POP
34964: POP
34965: GO 34884
34967: POP
34968: POP
// end ;
34969: LD_VAR 0 2
34973: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
34974: LD_INT 0
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
// if not units then
34982: LD_VAR 0 1
34986: NOT
34987: IFFALSE 34991
// exit ;
34989: GO 35421
// scaners := [ ] ;
34991: LD_ADDR_VAR 0 6
34995: PUSH
34996: EMPTY
34997: ST_TO_ADDR
// for i in units do
34998: LD_ADDR_VAR 0 3
35002: PUSH
35003: LD_VAR 0 1
35007: PUSH
35008: FOR_IN
35009: IFFALSE 35166
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
35011: LD_VAR 0 3
35015: PPUSH
35016: CALL_OW 264
35020: PUSH
35021: LD_INT 11
35023: NONEQUAL
35024: IFTRUE 35038
35026: PUSH
35027: LD_VAR 0 3
35031: PPUSH
35032: CALL_OW 302
35036: NOT
35037: OR
35038: IFTRUE 35055
35040: PUSH
35041: LD_VAR 0 3
35045: PPUSH
35046: CALL_OW 110
35050: PUSH
35051: LD_INT 502
35053: EQUAL
35054: OR
35055: IFFALSE 35059
// continue ;
35057: GO 35008
// ComStop ( i ) ;
35059: LD_VAR 0 3
35063: PPUSH
35064: CALL_OW 141
// x := GetX ( i ) ;
35068: LD_ADDR_VAR 0 4
35072: PUSH
35073: LD_VAR 0 3
35077: PPUSH
35078: CALL_OW 250
35082: ST_TO_ADDR
// y := GetY ( i ) ;
35083: LD_ADDR_VAR 0 5
35087: PUSH
35088: LD_VAR 0 3
35092: PPUSH
35093: CALL_OW 251
35097: ST_TO_ADDR
// if GetSide ( i ) = your_side then
35098: LD_VAR 0 3
35102: PPUSH
35103: CALL_OW 255
35107: PUSH
35108: LD_OWVAR 2
35112: EQUAL
35113: IFFALSE 35132
// PlaySoundXY ( x , y , mineDetector ) ;
35115: LD_VAR 0 4
35119: PPUSH
35120: LD_VAR 0 5
35124: PPUSH
35125: LD_STRING mineDetector
35127: PPUSH
35128: CALL_OW 366
// scaners := Join ( scaners , i ) ;
35132: LD_ADDR_VAR 0 6
35136: PUSH
35137: LD_VAR 0 6
35141: PPUSH
35142: LD_VAR 0 3
35146: PPUSH
35147: CALL 73609 0 2
35151: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
35152: LD_VAR 0 3
35156: PPUSH
35157: LD_INT 502
35159: PPUSH
35160: CALL_OW 109
// end ;
35164: GO 35008
35166: POP
35167: POP
// if not scaners then
35168: LD_VAR 0 6
35172: NOT
35173: IFFALSE 35177
// exit ;
35175: GO 35421
// wait ( 3 ) ;
35177: LD_INT 3
35179: PPUSH
35180: CALL_OW 67
// timer := 6 ;
35184: LD_ADDR_VAR 0 7
35188: PUSH
35189: LD_INT 6
35191: ST_TO_ADDR
// repeat for i in scaners do
35192: LD_ADDR_VAR 0 3
35196: PUSH
35197: LD_VAR 0 6
35201: PUSH
35202: FOR_IN
35203: IFFALSE 35319
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
35205: LD_VAR 0 3
35209: PPUSH
35210: CALL_OW 302
35214: NOT
35215: IFTRUE 35228
35217: PUSH
35218: LD_VAR 0 3
35222: PPUSH
35223: CALL_OW 314
35227: OR
35228: IFTRUE 35259
35230: PUSH
35231: LD_VAR 0 3
35235: PPUSH
35236: CALL_OW 263
35240: PUSH
35241: LD_INT 1
35243: EQUAL
35244: IFFALSE 35258
35246: PUSH
35247: LD_VAR 0 3
35251: PPUSH
35252: CALL_OW 311
35256: NOT
35257: AND
35258: OR
35259: IFFALSE 35303
// begin SetUnitDisplayNumber ( i , 0 ) ;
35261: LD_VAR 0 3
35265: PPUSH
35266: LD_INT 0
35268: PPUSH
35269: CALL_OW 505
// SetTag ( i , 0 ) ;
35273: LD_VAR 0 3
35277: PPUSH
35278: LD_INT 0
35280: PPUSH
35281: CALL_OW 109
// scaners := scaners diff i ;
35285: LD_ADDR_VAR 0 6
35289: PUSH
35290: LD_VAR 0 6
35294: PUSH
35295: LD_VAR 0 3
35299: DIFF
35300: ST_TO_ADDR
// continue ;
35301: GO 35202
// end ; SetUnitDisplayNumber ( i , timer ) ;
35303: LD_VAR 0 3
35307: PPUSH
35308: LD_VAR 0 7
35312: PPUSH
35313: CALL_OW 505
// end ;
35317: GO 35202
35319: POP
35320: POP
// if not scaners then
35321: LD_VAR 0 6
35325: NOT
35326: IFFALSE 35330
// exit ;
35328: GO 35421
// timer := Dec ( timer ) ;
35330: LD_ADDR_VAR 0 7
35334: PUSH
35335: LD_VAR 0 7
35339: PPUSH
35340: CALL 75004 0 1
35344: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35345: LD_INT 35
35347: PPUSH
35348: CALL_OW 67
// until timer = 0 ;
35352: LD_VAR 0 7
35356: PUSH
35357: LD_INT 0
35359: EQUAL
35360: IFFALSE 35192
// if not scaners then
35362: LD_VAR 0 6
35366: NOT
35367: IFFALSE 35371
// exit ;
35369: GO 35421
// for i in scaners do
35371: LD_ADDR_VAR 0 3
35375: PUSH
35376: LD_VAR 0 6
35380: PUSH
35381: FOR_IN
35382: IFFALSE 35419
// begin SetUnitDisplayNumber ( i , 0 ) ;
35384: LD_VAR 0 3
35388: PPUSH
35389: LD_INT 0
35391: PPUSH
35392: CALL_OW 505
// SetTag ( i , 0 ) ;
35396: LD_VAR 0 3
35400: PPUSH
35401: LD_INT 0
35403: PPUSH
35404: CALL_OW 109
// RevealDetectorMine ( i ) ;
35408: LD_VAR 0 3
35412: PPUSH
35413: CALL 34676 0 1
// end ;
35417: GO 35381
35419: POP
35420: POP
// end ;
35421: LD_VAR 0 2
35425: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
35426: LD_INT 0
35428: PPUSH
// if p1 = mine_detector_mode then
35429: LD_VAR 0 2
35433: PUSH
35434: LD_INT 103
35436: EQUAL
35437: IFFALSE 35448
// DetectMine ( units ) ;
35439: LD_VAR 0 1
35443: PPUSH
35444: CALL 34974 0 1
// end ; end_of_file
35448: LD_VAR 0 7
35452: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35453: LD_INT 0
35455: PPUSH
35456: PPUSH
// if exist_mode then
35457: LD_VAR 0 2
35461: IFFALSE 35507
// begin unit := CreateCharacter ( prefix & ident ) ;
35463: LD_ADDR_VAR 0 5
35467: PUSH
35468: LD_VAR 0 3
35472: PUSH
35473: LD_VAR 0 1
35477: STR
35478: PPUSH
35479: CALL_OW 34
35483: ST_TO_ADDR
// if unit then
35484: LD_VAR 0 5
35488: IFFALSE 35505
// DeleteCharacters ( prefix & ident ) ;
35490: LD_VAR 0 3
35494: PUSH
35495: LD_VAR 0 1
35499: STR
35500: PPUSH
35501: CALL_OW 40
// end else
35505: GO 35522
// unit := NewCharacter ( ident ) ;
35507: LD_ADDR_VAR 0 5
35511: PUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 25
35521: ST_TO_ADDR
// result := unit ;
35522: LD_ADDR_VAR 0 4
35526: PUSH
35527: LD_VAR 0 5
35531: ST_TO_ADDR
// end ;
35532: LD_VAR 0 4
35536: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
35537: LD_INT 0
35539: PPUSH
35540: PPUSH
// if exist_mode then
35541: LD_VAR 0 2
35545: IFFALSE 35570
// unit := CreateCharacter ( prefix & ident ) else
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_VAR 0 3
35556: PUSH
35557: LD_VAR 0 1
35561: STR
35562: PPUSH
35563: CALL_OW 34
35567: ST_TO_ADDR
35568: GO 35585
// unit := NewCharacter ( ident ) ;
35570: LD_ADDR_VAR 0 5
35574: PUSH
35575: LD_VAR 0 1
35579: PPUSH
35580: CALL_OW 25
35584: ST_TO_ADDR
// result := unit ;
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_VAR 0 5
35594: ST_TO_ADDR
// end ;
35595: LD_VAR 0 4
35599: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35600: LD_INT 0
35602: PPUSH
35603: PPUSH
// if not side or not nation then
35604: LD_VAR 0 1
35608: NOT
35609: IFTRUE 35618
35611: PUSH
35612: LD_VAR 0 2
35616: NOT
35617: OR
35618: IFFALSE 35622
// exit ;
35620: GO 36416
// case nation of nation_american :
35622: LD_VAR 0 2
35626: PUSH
35627: LD_INT 1
35629: DOUBLE
35630: EQUAL
35631: IFTRUE 35635
35633: GO 35857
35635: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
35636: LD_ADDR_VAR 0 4
35640: PUSH
35641: LD_INT 35
35643: PUSH
35644: LD_INT 45
35646: PUSH
35647: LD_INT 46
35649: PUSH
35650: LD_INT 47
35652: PUSH
35653: LD_INT 82
35655: PUSH
35656: LD_INT 83
35658: PUSH
35659: LD_INT 84
35661: PUSH
35662: LD_INT 85
35664: PUSH
35665: LD_INT 86
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 2
35673: PUSH
35674: LD_INT 6
35676: PUSH
35677: LD_INT 15
35679: PUSH
35680: LD_INT 16
35682: PUSH
35683: LD_INT 7
35685: PUSH
35686: LD_INT 12
35688: PUSH
35689: LD_INT 13
35691: PUSH
35692: LD_INT 10
35694: PUSH
35695: LD_INT 14
35697: PUSH
35698: LD_INT 20
35700: PUSH
35701: LD_INT 21
35703: PUSH
35704: LD_INT 22
35706: PUSH
35707: LD_INT 25
35709: PUSH
35710: LD_INT 32
35712: PUSH
35713: LD_INT 27
35715: PUSH
35716: LD_INT 36
35718: PUSH
35719: LD_INT 69
35721: PUSH
35722: LD_INT 39
35724: PUSH
35725: LD_INT 34
35727: PUSH
35728: LD_INT 40
35730: PUSH
35731: LD_INT 48
35733: PUSH
35734: LD_INT 49
35736: PUSH
35737: LD_INT 50
35739: PUSH
35740: LD_INT 51
35742: PUSH
35743: LD_INT 52
35745: PUSH
35746: LD_INT 53
35748: PUSH
35749: LD_INT 54
35751: PUSH
35752: LD_INT 55
35754: PUSH
35755: LD_INT 56
35757: PUSH
35758: LD_INT 57
35760: PUSH
35761: LD_INT 58
35763: PUSH
35764: LD_INT 59
35766: PUSH
35767: LD_INT 60
35769: PUSH
35770: LD_INT 61
35772: PUSH
35773: LD_INT 62
35775: PUSH
35776: LD_INT 80
35778: PUSH
35779: LD_INT 82
35781: PUSH
35782: LD_INT 83
35784: PUSH
35785: LD_INT 84
35787: PUSH
35788: LD_INT 85
35790: PUSH
35791: LD_INT 86
35793: PUSH
35794: LD_INT 90
35796: PUSH
35797: LD_INT 93
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: ST_TO_ADDR
35855: GO 36338
35857: LD_INT 2
35859: DOUBLE
35860: EQUAL
35861: IFTRUE 35865
35863: GO 36099
35865: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
35866: LD_ADDR_VAR 0 4
35870: PUSH
35871: LD_INT 35
35873: PUSH
35874: LD_INT 45
35876: PUSH
35877: LD_INT 46
35879: PUSH
35880: LD_INT 47
35882: PUSH
35883: LD_INT 82
35885: PUSH
35886: LD_INT 83
35888: PUSH
35889: LD_INT 84
35891: PUSH
35892: LD_INT 85
35894: PUSH
35895: LD_INT 87
35897: PUSH
35898: LD_INT 70
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 11
35906: PUSH
35907: LD_INT 3
35909: PUSH
35910: LD_INT 4
35912: PUSH
35913: LD_INT 5
35915: PUSH
35916: LD_INT 6
35918: PUSH
35919: LD_INT 15
35921: PUSH
35922: LD_INT 18
35924: PUSH
35925: LD_INT 7
35927: PUSH
35928: LD_INT 17
35930: PUSH
35931: LD_INT 8
35933: PUSH
35934: LD_INT 20
35936: PUSH
35937: LD_INT 21
35939: PUSH
35940: LD_INT 22
35942: PUSH
35943: LD_INT 72
35945: PUSH
35946: LD_INT 26
35948: PUSH
35949: LD_INT 69
35951: PUSH
35952: LD_INT 39
35954: PUSH
35955: LD_INT 40
35957: PUSH
35958: LD_INT 41
35960: PUSH
35961: LD_INT 42
35963: PUSH
35964: LD_INT 43
35966: PUSH
35967: LD_INT 48
35969: PUSH
35970: LD_INT 49
35972: PUSH
35973: LD_INT 50
35975: PUSH
35976: LD_INT 51
35978: PUSH
35979: LD_INT 52
35981: PUSH
35982: LD_INT 53
35984: PUSH
35985: LD_INT 54
35987: PUSH
35988: LD_INT 55
35990: PUSH
35991: LD_INT 56
35993: PUSH
35994: LD_INT 60
35996: PUSH
35997: LD_INT 61
35999: PUSH
36000: LD_INT 62
36002: PUSH
36003: LD_INT 66
36005: PUSH
36006: LD_INT 67
36008: PUSH
36009: LD_INT 68
36011: PUSH
36012: LD_INT 81
36014: PUSH
36015: LD_INT 82
36017: PUSH
36018: LD_INT 83
36020: PUSH
36021: LD_INT 84
36023: PUSH
36024: LD_INT 85
36026: PUSH
36027: LD_INT 87
36029: PUSH
36030: LD_INT 88
36032: PUSH
36033: LD_INT 92
36035: PUSH
36036: LD_INT 94
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: ST_TO_ADDR
36097: GO 36338
36099: LD_INT 3
36101: DOUBLE
36102: EQUAL
36103: IFTRUE 36107
36105: GO 36337
36107: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
36108: LD_ADDR_VAR 0 4
36112: PUSH
36113: LD_INT 46
36115: PUSH
36116: LD_INT 47
36118: PUSH
36119: LD_INT 1
36121: PUSH
36122: LD_INT 2
36124: PUSH
36125: LD_INT 82
36127: PUSH
36128: LD_INT 83
36130: PUSH
36131: LD_INT 84
36133: PUSH
36134: LD_INT 85
36136: PUSH
36137: LD_INT 86
36139: PUSH
36140: LD_INT 11
36142: PUSH
36143: LD_INT 9
36145: PUSH
36146: LD_INT 20
36148: PUSH
36149: LD_INT 19
36151: PUSH
36152: LD_INT 21
36154: PUSH
36155: LD_INT 24
36157: PUSH
36158: LD_INT 22
36160: PUSH
36161: LD_INT 25
36163: PUSH
36164: LD_INT 28
36166: PUSH
36167: LD_INT 29
36169: PUSH
36170: LD_INT 30
36172: PUSH
36173: LD_INT 31
36175: PUSH
36176: LD_INT 37
36178: PUSH
36179: LD_INT 38
36181: PUSH
36182: LD_INT 32
36184: PUSH
36185: LD_INT 27
36187: PUSH
36188: LD_INT 33
36190: PUSH
36191: LD_INT 69
36193: PUSH
36194: LD_INT 39
36196: PUSH
36197: LD_INT 34
36199: PUSH
36200: LD_INT 40
36202: PUSH
36203: LD_INT 71
36205: PUSH
36206: LD_INT 23
36208: PUSH
36209: LD_INT 44
36211: PUSH
36212: LD_INT 48
36214: PUSH
36215: LD_INT 49
36217: PUSH
36218: LD_INT 50
36220: PUSH
36221: LD_INT 51
36223: PUSH
36224: LD_INT 52
36226: PUSH
36227: LD_INT 53
36229: PUSH
36230: LD_INT 54
36232: PUSH
36233: LD_INT 55
36235: PUSH
36236: LD_INT 56
36238: PUSH
36239: LD_INT 57
36241: PUSH
36242: LD_INT 58
36244: PUSH
36245: LD_INT 59
36247: PUSH
36248: LD_INT 63
36250: PUSH
36251: LD_INT 64
36253: PUSH
36254: LD_INT 65
36256: PUSH
36257: LD_INT 82
36259: PUSH
36260: LD_INT 83
36262: PUSH
36263: LD_INT 84
36265: PUSH
36266: LD_INT 85
36268: PUSH
36269: LD_INT 86
36271: PUSH
36272: LD_INT 89
36274: PUSH
36275: LD_INT 91
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: ST_TO_ADDR
36335: GO 36338
36337: POP
// if state > - 1 and state < 3 then
36338: LD_VAR 0 3
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: GREATER
36347: IFFALSE 36359
36349: PUSH
36350: LD_VAR 0 3
36354: PUSH
36355: LD_INT 3
36357: LESS
36358: AND
36359: IFFALSE 36416
// for i in result do
36361: LD_ADDR_VAR 0 5
36365: PUSH
36366: LD_VAR 0 4
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36414
// if GetTech ( i , side ) <> state then
36374: LD_VAR 0 5
36378: PPUSH
36379: LD_VAR 0 1
36383: PPUSH
36384: CALL_OW 321
36388: PUSH
36389: LD_VAR 0 3
36393: NONEQUAL
36394: IFFALSE 36412
// result := result diff i ;
36396: LD_ADDR_VAR 0 4
36400: PUSH
36401: LD_VAR 0 4
36405: PUSH
36406: LD_VAR 0 5
36410: DIFF
36411: ST_TO_ADDR
36412: GO 36371
36414: POP
36415: POP
// end ;
36416: LD_VAR 0 4
36420: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36421: LD_INT 0
36423: PPUSH
36424: PPUSH
36425: PPUSH
// result := true ;
36426: LD_ADDR_VAR 0 3
36430: PUSH
36431: LD_INT 1
36433: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36434: LD_ADDR_VAR 0 5
36438: PUSH
36439: LD_VAR 0 2
36443: PPUSH
36444: CALL_OW 480
36448: ST_TO_ADDR
// if not tmp then
36449: LD_VAR 0 5
36453: NOT
36454: IFFALSE 36458
// exit ;
36456: GO 36507
// for i in tmp do
36458: LD_ADDR_VAR 0 4
36462: PUSH
36463: LD_VAR 0 5
36467: PUSH
36468: FOR_IN
36469: IFFALSE 36505
// if GetTech ( i , side ) <> state_researched then
36471: LD_VAR 0 4
36475: PPUSH
36476: LD_VAR 0 1
36480: PPUSH
36481: CALL_OW 321
36485: PUSH
36486: LD_INT 2
36488: NONEQUAL
36489: IFFALSE 36503
// begin result := false ;
36491: LD_ADDR_VAR 0 3
36495: PUSH
36496: LD_INT 0
36498: ST_TO_ADDR
// exit ;
36499: POP
36500: POP
36501: GO 36507
// end ;
36503: GO 36468
36505: POP
36506: POP
// end ;
36507: LD_VAR 0 3
36511: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36512: LD_INT 0
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
36519: PPUSH
36520: PPUSH
36521: PPUSH
36522: PPUSH
36523: PPUSH
36524: PPUSH
36525: PPUSH
36526: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36527: LD_VAR 0 1
36531: NOT
36532: IFTRUE 36549
36534: PUSH
36535: LD_VAR 0 1
36539: PPUSH
36540: CALL_OW 257
36544: PUSH
36545: LD_INT 9
36547: NONEQUAL
36548: OR
36549: IFFALSE 36553
// exit ;
36551: GO 37132
// side := GetSide ( unit ) ;
36553: LD_ADDR_VAR 0 9
36557: PUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 255
36567: ST_TO_ADDR
// tech_space := tech_spacanom ;
36568: LD_ADDR_VAR 0 12
36572: PUSH
36573: LD_INT 29
36575: ST_TO_ADDR
// tech_time := tech_taurad ;
36576: LD_ADDR_VAR 0 13
36580: PUSH
36581: LD_INT 28
36583: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36584: LD_ADDR_VAR 0 11
36588: PUSH
36589: LD_VAR 0 1
36593: PPUSH
36594: CALL_OW 310
36598: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36599: LD_VAR 0 11
36603: PPUSH
36604: CALL_OW 247
36608: PUSH
36609: LD_INT 2
36611: EQUAL
36612: IFFALSE 36616
// exit ;
36614: GO 37132
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36616: LD_ADDR_VAR 0 8
36620: PUSH
36621: LD_INT 81
36623: PUSH
36624: LD_VAR 0 9
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: LD_INT 21
36638: PUSH
36639: LD_INT 3
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: PPUSH
36654: CALL_OW 69
36658: ST_TO_ADDR
// if not tmp then
36659: LD_VAR 0 8
36663: NOT
36664: IFFALSE 36668
// exit ;
36666: GO 37132
// if in_unit then
36668: LD_VAR 0 11
36672: IFFALSE 36696
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36674: LD_ADDR_VAR 0 10
36678: PUSH
36679: LD_VAR 0 8
36683: PPUSH
36684: LD_VAR 0 11
36688: PPUSH
36689: CALL_OW 74
36693: ST_TO_ADDR
36694: GO 36716
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36696: LD_ADDR_VAR 0 10
36700: PUSH
36701: LD_VAR 0 8
36705: PPUSH
36706: LD_VAR 0 1
36710: PPUSH
36711: CALL_OW 74
36715: ST_TO_ADDR
// if not enemy then
36716: LD_VAR 0 10
36720: NOT
36721: IFFALSE 36725
// exit ;
36723: GO 37132
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36725: LD_VAR 0 11
36729: IFFALSE 36751
36731: PUSH
36732: LD_VAR 0 11
36736: PPUSH
36737: LD_VAR 0 10
36741: PPUSH
36742: CALL_OW 296
36746: PUSH
36747: LD_INT 13
36749: GREATER
36750: AND
36751: IFTRUE 36773
36753: PUSH
36754: LD_VAR 0 1
36758: PPUSH
36759: LD_VAR 0 10
36763: PPUSH
36764: CALL_OW 296
36768: PUSH
36769: LD_INT 12
36771: GREATER
36772: OR
36773: IFFALSE 36777
// exit ;
36775: GO 37132
// missile := [ 1 ] ;
36777: LD_ADDR_VAR 0 14
36781: PUSH
36782: LD_INT 1
36784: PUSH
36785: EMPTY
36786: LIST
36787: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36788: LD_VAR 0 9
36792: PPUSH
36793: LD_VAR 0 12
36797: PPUSH
36798: CALL_OW 325
36802: IFFALSE 36831
// missile := Replace ( missile , missile + 1 , 2 ) ;
36804: LD_ADDR_VAR 0 14
36808: PUSH
36809: LD_VAR 0 14
36813: PPUSH
36814: LD_VAR 0 14
36818: PUSH
36819: LD_INT 1
36821: PLUS
36822: PPUSH
36823: LD_INT 2
36825: PPUSH
36826: CALL_OW 1
36830: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36831: LD_VAR 0 9
36835: PPUSH
36836: LD_VAR 0 13
36840: PPUSH
36841: CALL_OW 325
36845: IFFALSE 36869
36847: PUSH
36848: LD_VAR 0 10
36852: PPUSH
36853: CALL_OW 255
36857: PPUSH
36858: LD_VAR 0 13
36862: PPUSH
36863: CALL_OW 325
36867: NOT
36868: AND
36869: IFFALSE 36898
// missile := Replace ( missile , missile + 1 , 3 ) ;
36871: LD_ADDR_VAR 0 14
36875: PUSH
36876: LD_VAR 0 14
36880: PPUSH
36881: LD_VAR 0 14
36885: PUSH
36886: LD_INT 1
36888: PLUS
36889: PPUSH
36890: LD_INT 3
36892: PPUSH
36893: CALL_OW 1
36897: ST_TO_ADDR
// if missile < 2 then
36898: LD_VAR 0 14
36902: PUSH
36903: LD_INT 2
36905: LESS
36906: IFFALSE 36910
// exit ;
36908: GO 37132
// x := GetX ( enemy ) ;
36910: LD_ADDR_VAR 0 4
36914: PUSH
36915: LD_VAR 0 10
36919: PPUSH
36920: CALL_OW 250
36924: ST_TO_ADDR
// y := GetY ( enemy ) ;
36925: LD_ADDR_VAR 0 5
36929: PUSH
36930: LD_VAR 0 10
36934: PPUSH
36935: CALL_OW 251
36939: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36940: LD_ADDR_VAR 0 6
36944: PUSH
36945: LD_VAR 0 4
36949: PUSH
36950: LD_INT 1
36952: NEG
36953: PPUSH
36954: LD_INT 1
36956: PPUSH
36957: CALL_OW 12
36961: PLUS
36962: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36963: LD_ADDR_VAR 0 7
36967: PUSH
36968: LD_VAR 0 5
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PPUSH
36977: LD_INT 1
36979: PPUSH
36980: CALL_OW 12
36984: PLUS
36985: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36986: LD_VAR 0 6
36990: PPUSH
36991: LD_VAR 0 7
36995: PPUSH
36996: CALL_OW 488
37000: NOT
37001: IFFALSE 37023
// begin _x := x ;
37003: LD_ADDR_VAR 0 6
37007: PUSH
37008: LD_VAR 0 4
37012: ST_TO_ADDR
// _y := y ;
37013: LD_ADDR_VAR 0 7
37017: PUSH
37018: LD_VAR 0 5
37022: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37023: LD_ADDR_VAR 0 3
37027: PUSH
37028: LD_INT 1
37030: PPUSH
37031: LD_VAR 0 14
37035: PPUSH
37036: CALL_OW 12
37040: ST_TO_ADDR
// case i of 1 :
37041: LD_VAR 0 3
37045: PUSH
37046: LD_INT 1
37048: DOUBLE
37049: EQUAL
37050: IFTRUE 37054
37052: GO 37071
37054: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37055: LD_VAR 0 1
37059: PPUSH
37060: LD_VAR 0 10
37064: PPUSH
37065: CALL_OW 115
37069: GO 37132
37071: LD_INT 2
37073: DOUBLE
37074: EQUAL
37075: IFTRUE 37079
37077: GO 37101
37079: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37080: LD_VAR 0 1
37084: PPUSH
37085: LD_VAR 0 6
37089: PPUSH
37090: LD_VAR 0 7
37094: PPUSH
37095: CALL_OW 153
37099: GO 37132
37101: LD_INT 3
37103: DOUBLE
37104: EQUAL
37105: IFTRUE 37109
37107: GO 37131
37109: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37110: LD_VAR 0 1
37114: PPUSH
37115: LD_VAR 0 6
37119: PPUSH
37120: LD_VAR 0 7
37124: PPUSH
37125: CALL_OW 154
37129: GO 37132
37131: POP
// end ;
37132: LD_VAR 0 2
37136: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37137: LD_INT 0
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
// if not unit or not building then
37145: LD_VAR 0 1
37149: NOT
37150: IFTRUE 37159
37152: PUSH
37153: LD_VAR 0 2
37157: NOT
37158: OR
37159: IFFALSE 37163
// exit ;
37161: GO 37321
// x := GetX ( building ) ;
37163: LD_ADDR_VAR 0 5
37167: PUSH
37168: LD_VAR 0 2
37172: PPUSH
37173: CALL_OW 250
37177: ST_TO_ADDR
// y := GetY ( building ) ;
37178: LD_ADDR_VAR 0 6
37182: PUSH
37183: LD_VAR 0 2
37187: PPUSH
37188: CALL_OW 251
37192: ST_TO_ADDR
// for i := 0 to 5 do
37193: LD_ADDR_VAR 0 4
37197: PUSH
37198: DOUBLE
37199: LD_INT 0
37201: DEC
37202: ST_TO_ADDR
37203: LD_INT 5
37205: PUSH
37206: FOR_TO
37207: IFFALSE 37319
// begin _x := ShiftX ( x , i , 3 ) ;
37209: LD_ADDR_VAR 0 7
37213: PUSH
37214: LD_VAR 0 5
37218: PPUSH
37219: LD_VAR 0 4
37223: PPUSH
37224: LD_INT 3
37226: PPUSH
37227: CALL_OW 272
37231: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37232: LD_ADDR_VAR 0 8
37236: PUSH
37237: LD_VAR 0 6
37241: PPUSH
37242: LD_VAR 0 4
37246: PPUSH
37247: LD_INT 3
37249: PPUSH
37250: CALL_OW 273
37254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37255: LD_VAR 0 7
37259: PPUSH
37260: LD_VAR 0 8
37264: PPUSH
37265: CALL_OW 488
37269: NOT
37270: IFFALSE 37274
// continue ;
37272: GO 37206
// if HexInfo ( _x , _y ) = 0 then
37274: LD_VAR 0 7
37278: PPUSH
37279: LD_VAR 0 8
37283: PPUSH
37284: CALL_OW 428
37288: PUSH
37289: LD_INT 0
37291: EQUAL
37292: IFFALSE 37317
// begin ComMoveXY ( unit , _x , _y ) ;
37294: LD_VAR 0 1
37298: PPUSH
37299: LD_VAR 0 7
37303: PPUSH
37304: LD_VAR 0 8
37308: PPUSH
37309: CALL_OW 111
// exit ;
37313: POP
37314: POP
37315: GO 37321
// end ; end ;
37317: GO 37206
37319: POP
37320: POP
// end ;
37321: LD_VAR 0 3
37325: RET
// export function ScanBase ( side , base_area ) ; begin
37326: LD_INT 0
37328: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37329: LD_ADDR_VAR 0 3
37333: PUSH
37334: LD_VAR 0 2
37338: PPUSH
37339: LD_INT 81
37341: PUSH
37342: LD_VAR 0 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PPUSH
37351: CALL_OW 70
37355: ST_TO_ADDR
// end ;
37356: LD_VAR 0 3
37360: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37361: LD_INT 0
37363: PPUSH
37364: PPUSH
37365: PPUSH
37366: PPUSH
// result := false ;
37367: LD_ADDR_VAR 0 2
37371: PUSH
37372: LD_INT 0
37374: ST_TO_ADDR
// side := GetSide ( unit ) ;
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: LD_VAR 0 1
37384: PPUSH
37385: CALL_OW 255
37389: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37390: LD_ADDR_VAR 0 4
37394: PUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL_OW 248
37404: ST_TO_ADDR
// case nat of 1 :
37405: LD_VAR 0 4
37409: PUSH
37410: LD_INT 1
37412: DOUBLE
37413: EQUAL
37414: IFTRUE 37418
37416: GO 37429
37418: POP
// tech := tech_lassight ; 2 :
37419: LD_ADDR_VAR 0 5
37423: PUSH
37424: LD_INT 12
37426: ST_TO_ADDR
37427: GO 37468
37429: LD_INT 2
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37448
37437: POP
// tech := tech_mortar ; 3 :
37438: LD_ADDR_VAR 0 5
37442: PUSH
37443: LD_INT 41
37445: ST_TO_ADDR
37446: GO 37468
37448: LD_INT 3
37450: DOUBLE
37451: EQUAL
37452: IFTRUE 37456
37454: GO 37467
37456: POP
// tech := tech_bazooka ; end ;
37457: LD_ADDR_VAR 0 5
37461: PUSH
37462: LD_INT 44
37464: ST_TO_ADDR
37465: GO 37468
37467: POP
// if Researched ( side , tech ) then
37468: LD_VAR 0 3
37472: PPUSH
37473: LD_VAR 0 5
37477: PPUSH
37478: CALL_OW 325
37482: IFFALSE 37509
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37484: LD_ADDR_VAR 0 2
37488: PUSH
37489: LD_INT 5
37491: PUSH
37492: LD_INT 8
37494: PUSH
37495: LD_INT 9
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: LIST
37502: PUSH
37503: LD_VAR 0 4
37507: ARRAY
37508: ST_TO_ADDR
// end ;
37509: LD_VAR 0 2
37513: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37514: LD_INT 0
37516: PPUSH
37517: PPUSH
37518: PPUSH
// if not mines then
37519: LD_VAR 0 2
37523: NOT
37524: IFFALSE 37528
// exit ;
37526: GO 37672
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37528: LD_ADDR_VAR 0 5
37532: PUSH
37533: LD_INT 81
37535: PUSH
37536: LD_VAR 0 1
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 3
37547: PUSH
37548: LD_INT 21
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PPUSH
37566: CALL_OW 69
37570: ST_TO_ADDR
// for i in mines do
37571: LD_ADDR_VAR 0 4
37575: PUSH
37576: LD_VAR 0 2
37580: PUSH
37581: FOR_IN
37582: IFFALSE 37670
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37584: LD_VAR 0 4
37588: PUSH
37589: LD_INT 1
37591: ARRAY
37592: PPUSH
37593: LD_VAR 0 4
37597: PUSH
37598: LD_INT 2
37600: ARRAY
37601: PPUSH
37602: CALL_OW 458
37606: NOT
37607: IFFALSE 37611
// continue ;
37609: GO 37581
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37611: LD_VAR 0 4
37615: PUSH
37616: LD_INT 1
37618: ARRAY
37619: PPUSH
37620: LD_VAR 0 4
37624: PUSH
37625: LD_INT 2
37627: ARRAY
37628: PPUSH
37629: CALL_OW 428
37633: PUSH
37634: LD_VAR 0 5
37638: IN
37639: IFFALSE 37668
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37641: LD_VAR 0 4
37645: PUSH
37646: LD_INT 1
37648: ARRAY
37649: PPUSH
37650: LD_VAR 0 4
37654: PUSH
37655: LD_INT 2
37657: ARRAY
37658: PPUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 456
// end ;
37668: GO 37581
37670: POP
37671: POP
// end ;
37672: LD_VAR 0 3
37676: RET
// export function Count ( array ) ; begin
37677: LD_INT 0
37679: PPUSH
// result := array + 0 ;
37680: LD_ADDR_VAR 0 2
37684: PUSH
37685: LD_VAR 0 1
37689: PUSH
37690: LD_INT 0
37692: PLUS
37693: ST_TO_ADDR
// end ;
37694: LD_VAR 0 2
37698: RET
// export function IsEmpty ( building ) ; begin
37699: LD_INT 0
37701: PPUSH
// if not building then
37702: LD_VAR 0 1
37706: NOT
37707: IFFALSE 37711
// exit ;
37709: GO 37754
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37711: LD_ADDR_VAR 0 2
37715: PUSH
37716: LD_VAR 0 1
37720: PUSH
37721: LD_INT 22
37723: PUSH
37724: LD_VAR 0 1
37728: PPUSH
37729: CALL_OW 255
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 58
37740: PUSH
37741: EMPTY
37742: LIST
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PPUSH
37748: CALL_OW 69
37752: IN
37753: ST_TO_ADDR
// end ;
37754: LD_VAR 0 2
37758: RET
// export function IsNotFull ( building ) ; var places ; begin
37759: LD_INT 0
37761: PPUSH
37762: PPUSH
// if not building then
37763: LD_VAR 0 1
37767: NOT
37768: IFFALSE 37772
// exit ;
37770: GO 37800
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37772: LD_ADDR_VAR 0 2
37776: PUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: LD_INT 3
37784: PUSH
37785: LD_INT 62
37787: PUSH
37788: EMPTY
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PPUSH
37795: CALL_OW 72
37799: ST_TO_ADDR
// end ;
37800: LD_VAR 0 2
37804: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37805: LD_INT 0
37807: PPUSH
37808: PPUSH
37809: PPUSH
37810: PPUSH
// tmp := [ ] ;
37811: LD_ADDR_VAR 0 3
37815: PUSH
37816: EMPTY
37817: ST_TO_ADDR
// list := [ ] ;
37818: LD_ADDR_VAR 0 5
37822: PUSH
37823: EMPTY
37824: ST_TO_ADDR
// for i = 16 to 25 do
37825: LD_ADDR_VAR 0 4
37829: PUSH
37830: DOUBLE
37831: LD_INT 16
37833: DEC
37834: ST_TO_ADDR
37835: LD_INT 25
37837: PUSH
37838: FOR_TO
37839: IFFALSE 37912
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37841: LD_ADDR_VAR 0 3
37845: PUSH
37846: LD_VAR 0 3
37850: PUSH
37851: LD_INT 22
37853: PUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 255
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 91
37870: PUSH
37871: LD_VAR 0 1
37875: PUSH
37876: LD_INT 6
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 30
37886: PUSH
37887: LD_VAR 0 4
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: PUSH
37901: EMPTY
37902: LIST
37903: PPUSH
37904: CALL_OW 69
37908: ADD
37909: ST_TO_ADDR
37910: GO 37838
37912: POP
37913: POP
// for i = 1 to tmp do
37914: LD_ADDR_VAR 0 4
37918: PUSH
37919: DOUBLE
37920: LD_INT 1
37922: DEC
37923: ST_TO_ADDR
37924: LD_VAR 0 3
37928: PUSH
37929: FOR_TO
37930: IFFALSE 38018
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37932: LD_ADDR_VAR 0 5
37936: PUSH
37937: LD_VAR 0 5
37941: PUSH
37942: LD_VAR 0 3
37946: PUSH
37947: LD_VAR 0 4
37951: ARRAY
37952: PPUSH
37953: CALL_OW 266
37957: PUSH
37958: LD_VAR 0 3
37962: PUSH
37963: LD_VAR 0 4
37967: ARRAY
37968: PPUSH
37969: CALL_OW 250
37973: PUSH
37974: LD_VAR 0 3
37978: PUSH
37979: LD_VAR 0 4
37983: ARRAY
37984: PPUSH
37985: CALL_OW 251
37989: PUSH
37990: LD_VAR 0 3
37994: PUSH
37995: LD_VAR 0 4
37999: ARRAY
38000: PPUSH
38001: CALL_OW 254
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: ADD
38015: ST_TO_ADDR
38016: GO 37929
38018: POP
38019: POP
// result := list ;
38020: LD_ADDR_VAR 0 2
38024: PUSH
38025: LD_VAR 0 5
38029: ST_TO_ADDR
// end ;
38030: LD_VAR 0 2
38034: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38035: LD_INT 0
38037: PPUSH
38038: PPUSH
38039: PPUSH
38040: PPUSH
38041: PPUSH
38042: PPUSH
38043: PPUSH
// if not factory then
38044: LD_VAR 0 1
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38656
// if control = control_apeman then
38053: LD_VAR 0 4
38057: PUSH
38058: LD_INT 5
38060: EQUAL
38061: IFFALSE 38170
// begin tmp := UnitsInside ( factory ) ;
38063: LD_ADDR_VAR 0 8
38067: PUSH
38068: LD_VAR 0 1
38072: PPUSH
38073: CALL_OW 313
38077: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38078: LD_VAR 0 8
38082: PPUSH
38083: LD_INT 25
38085: PUSH
38086: LD_INT 12
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PPUSH
38093: CALL_OW 72
38097: NOT
38098: IFFALSE 38108
// control := control_manual ;
38100: LD_ADDR_VAR 0 4
38104: PUSH
38105: LD_INT 1
38107: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38108: LD_ADDR_VAR 0 8
38112: PUSH
38113: LD_VAR 0 1
38117: PPUSH
38118: CALL 37805 0 1
38122: ST_TO_ADDR
// if tmp then
38123: LD_VAR 0 8
38127: IFFALSE 38170
// begin for i in tmp do
38129: LD_ADDR_VAR 0 7
38133: PUSH
38134: LD_VAR 0 8
38138: PUSH
38139: FOR_IN
38140: IFFALSE 38168
// if i [ 1 ] = b_ext_radio then
38142: LD_VAR 0 7
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PUSH
38151: LD_INT 22
38153: EQUAL
38154: IFFALSE 38166
// begin control := control_remote ;
38156: LD_ADDR_VAR 0 4
38160: PUSH
38161: LD_INT 2
38163: ST_TO_ADDR
// break ;
38164: GO 38168
// end ;
38166: GO 38139
38168: POP
38169: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38170: LD_VAR 0 1
38174: PPUSH
38175: LD_VAR 0 2
38179: PPUSH
38180: LD_VAR 0 3
38184: PPUSH
38185: LD_VAR 0 4
38189: PPUSH
38190: LD_VAR 0 5
38194: PPUSH
38195: CALL_OW 448
38199: IFFALSE 38234
// begin result := [ chassis , engine , control , weapon ] ;
38201: LD_ADDR_VAR 0 6
38205: PUSH
38206: LD_VAR 0 2
38210: PUSH
38211: LD_VAR 0 3
38215: PUSH
38216: LD_VAR 0 4
38220: PUSH
38221: LD_VAR 0 5
38225: PUSH
38226: EMPTY
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: ST_TO_ADDR
// exit ;
38232: GO 38656
// end ; _chassis := AvailableChassisList ( factory ) ;
38234: LD_ADDR_VAR 0 9
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 475
38248: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38249: LD_ADDR_VAR 0 11
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 476
38263: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38264: LD_ADDR_VAR 0 12
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 477
38278: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38279: LD_ADDR_VAR 0 10
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 478
38293: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38294: LD_VAR 0 9
38298: NOT
38299: IFTRUE 38308
38301: PUSH
38302: LD_VAR 0 11
38306: NOT
38307: OR
38308: IFTRUE 38317
38310: PUSH
38311: LD_VAR 0 12
38315: NOT
38316: OR
38317: IFTRUE 38326
38319: PUSH
38320: LD_VAR 0 10
38324: NOT
38325: OR
38326: IFFALSE 38361
// begin result := [ chassis , engine , control , weapon ] ;
38328: LD_ADDR_VAR 0 6
38332: PUSH
38333: LD_VAR 0 2
38337: PUSH
38338: LD_VAR 0 3
38342: PUSH
38343: LD_VAR 0 4
38347: PUSH
38348: LD_VAR 0 5
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: ST_TO_ADDR
// exit ;
38359: GO 38656
// end ; if not chassis in _chassis then
38361: LD_VAR 0 2
38365: PUSH
38366: LD_VAR 0 9
38370: IN
38371: NOT
38372: IFFALSE 38398
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38374: LD_ADDR_VAR 0 2
38378: PUSH
38379: LD_VAR 0 9
38383: PUSH
38384: LD_INT 1
38386: PPUSH
38387: LD_VAR 0 9
38391: PPUSH
38392: CALL_OW 12
38396: ARRAY
38397: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38398: LD_VAR 0 2
38402: PPUSH
38403: LD_VAR 0 3
38407: PPUSH
38408: CALL 38661 0 2
38412: NOT
38413: IFFALSE 38474
// repeat engine := _engine [ 1 ] ;
38415: LD_ADDR_VAR 0 3
38419: PUSH
38420: LD_VAR 0 11
38424: PUSH
38425: LD_INT 1
38427: ARRAY
38428: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38429: LD_ADDR_VAR 0 11
38433: PUSH
38434: LD_VAR 0 11
38438: PPUSH
38439: LD_INT 1
38441: PPUSH
38442: CALL_OW 3
38446: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38447: LD_VAR 0 2
38451: PPUSH
38452: LD_VAR 0 3
38456: PPUSH
38457: CALL 38661 0 2
38461: IFTRUE 38472
38463: PUSH
38464: LD_VAR 0 11
38468: PUSH
38469: EMPTY
38470: EQUAL
38471: OR
38472: IFFALSE 38415
// if not control in _control then
38474: LD_VAR 0 4
38478: PUSH
38479: LD_VAR 0 12
38483: IN
38484: NOT
38485: IFFALSE 38511
// control := _control [ rand ( 1 , _control ) ] ;
38487: LD_ADDR_VAR 0 4
38491: PUSH
38492: LD_VAR 0 12
38496: PUSH
38497: LD_INT 1
38499: PPUSH
38500: LD_VAR 0 12
38504: PPUSH
38505: CALL_OW 12
38509: ARRAY
38510: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38511: LD_VAR 0 2
38515: PPUSH
38516: LD_VAR 0 5
38520: PPUSH
38521: CALL 38883 0 2
38525: NOT
38526: IFFALSE 38587
// repeat weapon := _weapon [ 1 ] ;
38528: LD_ADDR_VAR 0 5
38532: PUSH
38533: LD_VAR 0 10
38537: PUSH
38538: LD_INT 1
38540: ARRAY
38541: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38542: LD_ADDR_VAR 0 10
38546: PUSH
38547: LD_VAR 0 10
38551: PPUSH
38552: LD_INT 1
38554: PPUSH
38555: CALL_OW 3
38559: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38560: LD_VAR 0 2
38564: PPUSH
38565: LD_VAR 0 5
38569: PPUSH
38570: CALL 38883 0 2
38574: IFTRUE 38585
38576: PUSH
38577: LD_VAR 0 10
38581: PUSH
38582: EMPTY
38583: EQUAL
38584: OR
38585: IFFALSE 38528
// result := [ ] ;
38587: LD_ADDR_VAR 0 6
38591: PUSH
38592: EMPTY
38593: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38594: LD_VAR 0 1
38598: PPUSH
38599: LD_VAR 0 2
38603: PPUSH
38604: LD_VAR 0 3
38608: PPUSH
38609: LD_VAR 0 4
38613: PPUSH
38614: LD_VAR 0 5
38618: PPUSH
38619: CALL_OW 448
38623: IFFALSE 38656
// result := [ chassis , engine , control , weapon ] ;
38625: LD_ADDR_VAR 0 6
38629: PUSH
38630: LD_VAR 0 2
38634: PUSH
38635: LD_VAR 0 3
38639: PUSH
38640: LD_VAR 0 4
38644: PUSH
38645: LD_VAR 0 5
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: ST_TO_ADDR
// end ;
38656: LD_VAR 0 6
38660: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38661: LD_INT 0
38663: PPUSH
// if not chassis or not engine then
38664: LD_VAR 0 1
38668: NOT
38669: IFTRUE 38678
38671: PUSH
38672: LD_VAR 0 2
38676: NOT
38677: OR
38678: IFFALSE 38682
// exit ;
38680: GO 38878
// case engine of engine_solar :
38682: LD_VAR 0 2
38686: PUSH
38687: LD_INT 2
38689: DOUBLE
38690: EQUAL
38691: IFTRUE 38695
38693: GO 38733
38695: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38696: LD_ADDR_VAR 0 3
38700: PUSH
38701: LD_INT 11
38703: PUSH
38704: LD_INT 12
38706: PUSH
38707: LD_INT 13
38709: PUSH
38710: LD_INT 14
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: LD_INT 2
38718: PUSH
38719: LD_INT 3
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: ST_TO_ADDR
38731: GO 38862
38733: LD_INT 1
38735: DOUBLE
38736: EQUAL
38737: IFTRUE 38741
38739: GO 38803
38741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38742: LD_ADDR_VAR 0 3
38746: PUSH
38747: LD_INT 11
38749: PUSH
38750: LD_INT 12
38752: PUSH
38753: LD_INT 13
38755: PUSH
38756: LD_INT 14
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: LD_INT 2
38764: PUSH
38765: LD_INT 3
38767: PUSH
38768: LD_INT 4
38770: PUSH
38771: LD_INT 5
38773: PUSH
38774: LD_INT 21
38776: PUSH
38777: LD_INT 23
38779: PUSH
38780: LD_INT 22
38782: PUSH
38783: LD_INT 24
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: ST_TO_ADDR
38801: GO 38862
38803: LD_INT 3
38805: DOUBLE
38806: EQUAL
38807: IFTRUE 38811
38809: GO 38861
38811: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38812: LD_ADDR_VAR 0 3
38816: PUSH
38817: LD_INT 13
38819: PUSH
38820: LD_INT 14
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 3
38828: PUSH
38829: LD_INT 4
38831: PUSH
38832: LD_INT 5
38834: PUSH
38835: LD_INT 21
38837: PUSH
38838: LD_INT 22
38840: PUSH
38841: LD_INT 23
38843: PUSH
38844: LD_INT 24
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: ST_TO_ADDR
38859: GO 38862
38861: POP
// result := ( chassis in result ) ;
38862: LD_ADDR_VAR 0 3
38866: PUSH
38867: LD_VAR 0 1
38871: PUSH
38872: LD_VAR 0 3
38876: IN
38877: ST_TO_ADDR
// end ;
38878: LD_VAR 0 3
38882: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38883: LD_INT 0
38885: PPUSH
// if not chassis or not weapon then
38886: LD_VAR 0 1
38890: NOT
38891: IFTRUE 38900
38893: PUSH
38894: LD_VAR 0 2
38898: NOT
38899: OR
38900: IFFALSE 38904
// exit ;
38902: GO 39964
// case weapon of us_machine_gun :
38904: LD_VAR 0 2
38908: PUSH
38909: LD_INT 2
38911: DOUBLE
38912: EQUAL
38913: IFTRUE 38917
38915: GO 38947
38917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38918: LD_ADDR_VAR 0 3
38922: PUSH
38923: LD_INT 1
38925: PUSH
38926: LD_INT 2
38928: PUSH
38929: LD_INT 3
38931: PUSH
38932: LD_INT 4
38934: PUSH
38935: LD_INT 5
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: ST_TO_ADDR
38945: GO 39948
38947: LD_INT 3
38949: DOUBLE
38950: EQUAL
38951: IFTRUE 38955
38953: GO 38985
38955: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38956: LD_ADDR_VAR 0 3
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: LD_INT 4
38972: PUSH
38973: LD_INT 5
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: ST_TO_ADDR
38983: GO 39948
38985: LD_INT 11
38987: DOUBLE
38988: EQUAL
38989: IFTRUE 38993
38991: GO 39023
38993: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38994: LD_ADDR_VAR 0 3
38998: PUSH
38999: LD_INT 1
39001: PUSH
39002: LD_INT 2
39004: PUSH
39005: LD_INT 3
39007: PUSH
39008: LD_INT 4
39010: PUSH
39011: LD_INT 5
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: ST_TO_ADDR
39021: GO 39948
39023: LD_INT 4
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39031
39029: GO 39057
39031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39032: LD_ADDR_VAR 0 3
39036: PUSH
39037: LD_INT 2
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: LD_INT 4
39045: PUSH
39046: LD_INT 5
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
39055: GO 39948
39057: LD_INT 5
39059: DOUBLE
39060: EQUAL
39061: IFTRUE 39065
39063: GO 39091
39065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39066: LD_ADDR_VAR 0 3
39070: PUSH
39071: LD_INT 2
39073: PUSH
39074: LD_INT 3
39076: PUSH
39077: LD_INT 4
39079: PUSH
39080: LD_INT 5
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
39089: GO 39948
39091: LD_INT 9
39093: DOUBLE
39094: EQUAL
39095: IFTRUE 39099
39097: GO 39125
39099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39100: LD_ADDR_VAR 0 3
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: LD_INT 3
39110: PUSH
39111: LD_INT 4
39113: PUSH
39114: LD_INT 5
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
39123: GO 39948
39125: LD_INT 7
39127: DOUBLE
39128: EQUAL
39129: IFTRUE 39133
39131: GO 39159
39133: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39134: LD_ADDR_VAR 0 3
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: LD_INT 3
39144: PUSH
39145: LD_INT 4
39147: PUSH
39148: LD_INT 5
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: ST_TO_ADDR
39157: GO 39948
39159: LD_INT 12
39161: DOUBLE
39162: EQUAL
39163: IFTRUE 39167
39165: GO 39193
39167: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39168: LD_ADDR_VAR 0 3
39172: PUSH
39173: LD_INT 2
39175: PUSH
39176: LD_INT 3
39178: PUSH
39179: LD_INT 4
39181: PUSH
39182: LD_INT 5
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: ST_TO_ADDR
39191: GO 39948
39193: LD_INT 13
39195: DOUBLE
39196: EQUAL
39197: IFTRUE 39201
39199: GO 39227
39201: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39202: LD_ADDR_VAR 0 3
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: LD_INT 3
39212: PUSH
39213: LD_INT 4
39215: PUSH
39216: LD_INT 5
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: ST_TO_ADDR
39225: GO 39948
39227: LD_INT 14
39229: DOUBLE
39230: EQUAL
39231: IFTRUE 39235
39233: GO 39253
39235: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39236: LD_ADDR_VAR 0 3
39240: PUSH
39241: LD_INT 4
39243: PUSH
39244: LD_INT 5
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: ST_TO_ADDR
39251: GO 39948
39253: LD_INT 6
39255: DOUBLE
39256: EQUAL
39257: IFTRUE 39261
39259: GO 39279
39261: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39262: LD_ADDR_VAR 0 3
39266: PUSH
39267: LD_INT 4
39269: PUSH
39270: LD_INT 5
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: ST_TO_ADDR
39277: GO 39948
39279: LD_INT 10
39281: DOUBLE
39282: EQUAL
39283: IFTRUE 39287
39285: GO 39305
39287: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39288: LD_ADDR_VAR 0 3
39292: PUSH
39293: LD_INT 4
39295: PUSH
39296: LD_INT 5
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: ST_TO_ADDR
39303: GO 39948
39305: LD_INT 22
39307: DOUBLE
39308: EQUAL
39309: IFTRUE 39313
39311: GO 39339
39313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39314: LD_ADDR_VAR 0 3
39318: PUSH
39319: LD_INT 11
39321: PUSH
39322: LD_INT 12
39324: PUSH
39325: LD_INT 13
39327: PUSH
39328: LD_INT 14
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: ST_TO_ADDR
39337: GO 39948
39339: LD_INT 23
39341: DOUBLE
39342: EQUAL
39343: IFTRUE 39347
39345: GO 39373
39347: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_INT 11
39355: PUSH
39356: LD_INT 12
39358: PUSH
39359: LD_INT 13
39361: PUSH
39362: LD_INT 14
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: ST_TO_ADDR
39371: GO 39948
39373: LD_INT 24
39375: DOUBLE
39376: EQUAL
39377: IFTRUE 39381
39379: GO 39407
39381: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39382: LD_ADDR_VAR 0 3
39386: PUSH
39387: LD_INT 11
39389: PUSH
39390: LD_INT 12
39392: PUSH
39393: LD_INT 13
39395: PUSH
39396: LD_INT 14
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: ST_TO_ADDR
39405: GO 39948
39407: LD_INT 30
39409: DOUBLE
39410: EQUAL
39411: IFTRUE 39415
39413: GO 39441
39415: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39416: LD_ADDR_VAR 0 3
39420: PUSH
39421: LD_INT 11
39423: PUSH
39424: LD_INT 12
39426: PUSH
39427: LD_INT 13
39429: PUSH
39430: LD_INT 14
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: ST_TO_ADDR
39439: GO 39948
39441: LD_INT 25
39443: DOUBLE
39444: EQUAL
39445: IFTRUE 39449
39447: GO 39467
39449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39450: LD_ADDR_VAR 0 3
39454: PUSH
39455: LD_INT 13
39457: PUSH
39458: LD_INT 14
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: ST_TO_ADDR
39465: GO 39948
39467: LD_INT 27
39469: DOUBLE
39470: EQUAL
39471: IFTRUE 39475
39473: GO 39493
39475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39476: LD_ADDR_VAR 0 3
39480: PUSH
39481: LD_INT 13
39483: PUSH
39484: LD_INT 14
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: ST_TO_ADDR
39491: GO 39948
39493: LD_INT 92
39495: DOUBLE
39496: EQUAL
39497: IFTRUE 39501
39499: GO 39527
39501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39502: LD_ADDR_VAR 0 3
39506: PUSH
39507: LD_INT 11
39509: PUSH
39510: LD_INT 12
39512: PUSH
39513: LD_INT 13
39515: PUSH
39516: LD_INT 14
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: ST_TO_ADDR
39525: GO 39948
39527: LD_INT 28
39529: DOUBLE
39530: EQUAL
39531: IFTRUE 39535
39533: GO 39553
39535: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39536: LD_ADDR_VAR 0 3
39540: PUSH
39541: LD_INT 13
39543: PUSH
39544: LD_INT 14
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: ST_TO_ADDR
39551: GO 39948
39553: LD_INT 29
39555: DOUBLE
39556: EQUAL
39557: IFTRUE 39561
39559: GO 39579
39561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39562: LD_ADDR_VAR 0 3
39566: PUSH
39567: LD_INT 13
39569: PUSH
39570: LD_INT 14
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: ST_TO_ADDR
39577: GO 39948
39579: LD_INT 31
39581: DOUBLE
39582: EQUAL
39583: IFTRUE 39587
39585: GO 39605
39587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39588: LD_ADDR_VAR 0 3
39592: PUSH
39593: LD_INT 13
39595: PUSH
39596: LD_INT 14
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: ST_TO_ADDR
39603: GO 39948
39605: LD_INT 26
39607: DOUBLE
39608: EQUAL
39609: IFTRUE 39613
39611: GO 39631
39613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39614: LD_ADDR_VAR 0 3
39618: PUSH
39619: LD_INT 13
39621: PUSH
39622: LD_INT 14
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: ST_TO_ADDR
39629: GO 39948
39631: LD_INT 42
39633: DOUBLE
39634: EQUAL
39635: IFTRUE 39639
39637: GO 39665
39639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39640: LD_ADDR_VAR 0 3
39644: PUSH
39645: LD_INT 21
39647: PUSH
39648: LD_INT 22
39650: PUSH
39651: LD_INT 23
39653: PUSH
39654: LD_INT 24
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: ST_TO_ADDR
39663: GO 39948
39665: LD_INT 43
39667: DOUBLE
39668: EQUAL
39669: IFTRUE 39673
39671: GO 39699
39673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39674: LD_ADDR_VAR 0 3
39678: PUSH
39679: LD_INT 21
39681: PUSH
39682: LD_INT 22
39684: PUSH
39685: LD_INT 23
39687: PUSH
39688: LD_INT 24
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: ST_TO_ADDR
39697: GO 39948
39699: LD_INT 44
39701: DOUBLE
39702: EQUAL
39703: IFTRUE 39707
39705: GO 39733
39707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: LD_INT 21
39715: PUSH
39716: LD_INT 22
39718: PUSH
39719: LD_INT 23
39721: PUSH
39722: LD_INT 24
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: ST_TO_ADDR
39731: GO 39948
39733: LD_INT 45
39735: DOUBLE
39736: EQUAL
39737: IFTRUE 39741
39739: GO 39767
39741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39742: LD_ADDR_VAR 0 3
39746: PUSH
39747: LD_INT 21
39749: PUSH
39750: LD_INT 22
39752: PUSH
39753: LD_INT 23
39755: PUSH
39756: LD_INT 24
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: ST_TO_ADDR
39765: GO 39948
39767: LD_INT 49
39769: DOUBLE
39770: EQUAL
39771: IFTRUE 39775
39773: GO 39801
39775: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39776: LD_ADDR_VAR 0 3
39780: PUSH
39781: LD_INT 21
39783: PUSH
39784: LD_INT 22
39786: PUSH
39787: LD_INT 23
39789: PUSH
39790: LD_INT 24
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: ST_TO_ADDR
39799: GO 39948
39801: LD_INT 51
39803: DOUBLE
39804: EQUAL
39805: IFTRUE 39809
39807: GO 39835
39809: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39810: LD_ADDR_VAR 0 3
39814: PUSH
39815: LD_INT 21
39817: PUSH
39818: LD_INT 22
39820: PUSH
39821: LD_INT 23
39823: PUSH
39824: LD_INT 24
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: ST_TO_ADDR
39833: GO 39948
39835: LD_INT 52
39837: DOUBLE
39838: EQUAL
39839: IFTRUE 39843
39841: GO 39869
39843: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39844: LD_ADDR_VAR 0 3
39848: PUSH
39849: LD_INT 21
39851: PUSH
39852: LD_INT 22
39854: PUSH
39855: LD_INT 23
39857: PUSH
39858: LD_INT 24
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: ST_TO_ADDR
39867: GO 39948
39869: LD_INT 53
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39877
39875: GO 39895
39877: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39878: LD_ADDR_VAR 0 3
39882: PUSH
39883: LD_INT 23
39885: PUSH
39886: LD_INT 24
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: ST_TO_ADDR
39893: GO 39948
39895: LD_INT 46
39897: DOUBLE
39898: EQUAL
39899: IFTRUE 39903
39901: GO 39921
39903: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39904: LD_ADDR_VAR 0 3
39908: PUSH
39909: LD_INT 23
39911: PUSH
39912: LD_INT 24
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: ST_TO_ADDR
39919: GO 39948
39921: LD_INT 47
39923: DOUBLE
39924: EQUAL
39925: IFTRUE 39929
39927: GO 39947
39929: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39930: LD_ADDR_VAR 0 3
39934: PUSH
39935: LD_INT 23
39937: PUSH
39938: LD_INT 24
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: ST_TO_ADDR
39945: GO 39948
39947: POP
// result := ( chassis in result ) ;
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_VAR 0 1
39957: PUSH
39958: LD_VAR 0 3
39962: IN
39963: ST_TO_ADDR
// end ;
39964: LD_VAR 0 3
39968: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39969: LD_INT 0
39971: PPUSH
39972: PPUSH
39973: PPUSH
39974: PPUSH
39975: PPUSH
39976: PPUSH
39977: PPUSH
// result := array ;
39978: LD_ADDR_VAR 0 5
39982: PUSH
39983: LD_VAR 0 1
39987: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39988: LD_VAR 0 1
39992: NOT
39993: IFTRUE 40002
39995: PUSH
39996: LD_VAR 0 2
40000: NOT
40001: OR
40002: IFTRUE 40011
40004: PUSH
40005: LD_VAR 0 3
40009: NOT
40010: OR
40011: IFTRUE 40025
40013: PUSH
40014: LD_VAR 0 2
40018: PUSH
40019: LD_VAR 0 1
40023: GREATER
40024: OR
40025: IFTRUE 40039
40027: PUSH
40028: LD_VAR 0 3
40032: PUSH
40033: LD_VAR 0 1
40037: GREATER
40038: OR
40039: IFFALSE 40043
// exit ;
40041: GO 40339
// if direction then
40043: LD_VAR 0 4
40047: IFFALSE 40111
// begin d := 1 ;
40049: LD_ADDR_VAR 0 9
40053: PUSH
40054: LD_INT 1
40056: ST_TO_ADDR
// if i_from > i_to then
40057: LD_VAR 0 2
40061: PUSH
40062: LD_VAR 0 3
40066: GREATER
40067: IFFALSE 40093
// length := ( array - i_from ) + i_to else
40069: LD_ADDR_VAR 0 11
40073: PUSH
40074: LD_VAR 0 1
40078: PUSH
40079: LD_VAR 0 2
40083: MINUS
40084: PUSH
40085: LD_VAR 0 3
40089: PLUS
40090: ST_TO_ADDR
40091: GO 40109
// length := i_to - i_from ;
40093: LD_ADDR_VAR 0 11
40097: PUSH
40098: LD_VAR 0 3
40102: PUSH
40103: LD_VAR 0 2
40107: MINUS
40108: ST_TO_ADDR
// end else
40109: GO 40172
// begin d := - 1 ;
40111: LD_ADDR_VAR 0 9
40115: PUSH
40116: LD_INT 1
40118: NEG
40119: ST_TO_ADDR
// if i_from > i_to then
40120: LD_VAR 0 2
40124: PUSH
40125: LD_VAR 0 3
40129: GREATER
40130: IFFALSE 40150
// length := i_from - i_to else
40132: LD_ADDR_VAR 0 11
40136: PUSH
40137: LD_VAR 0 2
40141: PUSH
40142: LD_VAR 0 3
40146: MINUS
40147: ST_TO_ADDR
40148: GO 40172
// length := ( array - i_to ) + i_from ;
40150: LD_ADDR_VAR 0 11
40154: PUSH
40155: LD_VAR 0 1
40159: PUSH
40160: LD_VAR 0 3
40164: MINUS
40165: PUSH
40166: LD_VAR 0 2
40170: PLUS
40171: ST_TO_ADDR
// end ; if not length then
40172: LD_VAR 0 11
40176: NOT
40177: IFFALSE 40181
// exit ;
40179: GO 40339
// tmp := array ;
40181: LD_ADDR_VAR 0 10
40185: PUSH
40186: LD_VAR 0 1
40190: ST_TO_ADDR
// for i = 1 to length do
40191: LD_ADDR_VAR 0 6
40195: PUSH
40196: DOUBLE
40197: LD_INT 1
40199: DEC
40200: ST_TO_ADDR
40201: LD_VAR 0 11
40205: PUSH
40206: FOR_TO
40207: IFFALSE 40327
// begin for j = 1 to array do
40209: LD_ADDR_VAR 0 7
40213: PUSH
40214: DOUBLE
40215: LD_INT 1
40217: DEC
40218: ST_TO_ADDR
40219: LD_VAR 0 1
40223: PUSH
40224: FOR_TO
40225: IFFALSE 40313
// begin k := j + d ;
40227: LD_ADDR_VAR 0 8
40231: PUSH
40232: LD_VAR 0 7
40236: PUSH
40237: LD_VAR 0 9
40241: PLUS
40242: ST_TO_ADDR
// if k > array then
40243: LD_VAR 0 8
40247: PUSH
40248: LD_VAR 0 1
40252: GREATER
40253: IFFALSE 40263
// k := 1 ;
40255: LD_ADDR_VAR 0 8
40259: PUSH
40260: LD_INT 1
40262: ST_TO_ADDR
// if not k then
40263: LD_VAR 0 8
40267: NOT
40268: IFFALSE 40280
// k := array ;
40270: LD_ADDR_VAR 0 8
40274: PUSH
40275: LD_VAR 0 1
40279: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40280: LD_ADDR_VAR 0 10
40284: PUSH
40285: LD_VAR 0 10
40289: PPUSH
40290: LD_VAR 0 8
40294: PPUSH
40295: LD_VAR 0 1
40299: PUSH
40300: LD_VAR 0 7
40304: ARRAY
40305: PPUSH
40306: CALL_OW 1
40310: ST_TO_ADDR
// end ;
40311: GO 40224
40313: POP
40314: POP
// array := tmp ;
40315: LD_ADDR_VAR 0 1
40319: PUSH
40320: LD_VAR 0 10
40324: ST_TO_ADDR
// end ;
40325: GO 40206
40327: POP
40328: POP
// result := array ;
40329: LD_ADDR_VAR 0 5
40333: PUSH
40334: LD_VAR 0 1
40338: ST_TO_ADDR
// end ;
40339: LD_VAR 0 5
40343: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40344: LD_INT 0
40346: PPUSH
40347: PPUSH
// result := 0 ;
40348: LD_ADDR_VAR 0 3
40352: PUSH
40353: LD_INT 0
40355: ST_TO_ADDR
// if not array or not value in array then
40356: LD_VAR 0 1
40360: NOT
40361: IFTRUE 40376
40363: PUSH
40364: LD_VAR 0 2
40368: PUSH
40369: LD_VAR 0 1
40373: IN
40374: NOT
40375: OR
40376: IFFALSE 40380
// exit ;
40378: GO 40434
// for i = 1 to array do
40380: LD_ADDR_VAR 0 4
40384: PUSH
40385: DOUBLE
40386: LD_INT 1
40388: DEC
40389: ST_TO_ADDR
40390: LD_VAR 0 1
40394: PUSH
40395: FOR_TO
40396: IFFALSE 40432
// if value = array [ i ] then
40398: LD_VAR 0 2
40402: PUSH
40403: LD_VAR 0 1
40407: PUSH
40408: LD_VAR 0 4
40412: ARRAY
40413: EQUAL
40414: IFFALSE 40430
// begin result := i ;
40416: LD_ADDR_VAR 0 3
40420: PUSH
40421: LD_VAR 0 4
40425: ST_TO_ADDR
// exit ;
40426: POP
40427: POP
40428: GO 40434
// end ;
40430: GO 40395
40432: POP
40433: POP
// end ;
40434: LD_VAR 0 3
40438: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40439: LD_INT 0
40441: PPUSH
// vc_chassis := chassis ;
40442: LD_ADDR_OWVAR 37
40446: PUSH
40447: LD_VAR 0 1
40451: ST_TO_ADDR
// vc_engine := engine ;
40452: LD_ADDR_OWVAR 39
40456: PUSH
40457: LD_VAR 0 2
40461: ST_TO_ADDR
// vc_control := control ;
40462: LD_ADDR_OWVAR 38
40466: PUSH
40467: LD_VAR 0 3
40471: ST_TO_ADDR
// vc_weapon := weapon ;
40472: LD_ADDR_OWVAR 40
40476: PUSH
40477: LD_VAR 0 4
40481: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40482: LD_ADDR_OWVAR 41
40486: PUSH
40487: LD_VAR 0 5
40491: ST_TO_ADDR
// end ;
40492: LD_VAR 0 6
40496: RET
// export function WantPlant ( unit ) ; var task ; begin
40497: LD_INT 0
40499: PPUSH
40500: PPUSH
// result := false ;
40501: LD_ADDR_VAR 0 2
40505: PUSH
40506: LD_INT 0
40508: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: LD_VAR 0 1
40518: PPUSH
40519: CALL_OW 437
40523: ST_TO_ADDR
// if task then
40524: LD_VAR 0 3
40528: IFFALSE 40556
// if task [ 1 ] [ 1 ] = p then
40530: LD_VAR 0 3
40534: PUSH
40535: LD_INT 1
40537: ARRAY
40538: PUSH
40539: LD_INT 1
40541: ARRAY
40542: PUSH
40543: LD_STRING p
40545: EQUAL
40546: IFFALSE 40556
// result := true ;
40548: LD_ADDR_VAR 0 2
40552: PUSH
40553: LD_INT 1
40555: ST_TO_ADDR
// end ;
40556: LD_VAR 0 2
40560: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40561: LD_INT 0
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
// if pos < 1 then
40567: LD_VAR 0 2
40571: PUSH
40572: LD_INT 1
40574: LESS
40575: IFFALSE 40579
// exit ;
40577: GO 40882
// if pos = 1 then
40579: LD_VAR 0 2
40583: PUSH
40584: LD_INT 1
40586: EQUAL
40587: IFFALSE 40620
// result := Replace ( arr , pos [ 1 ] , value ) else
40589: LD_ADDR_VAR 0 4
40593: PUSH
40594: LD_VAR 0 1
40598: PPUSH
40599: LD_VAR 0 2
40603: PUSH
40604: LD_INT 1
40606: ARRAY
40607: PPUSH
40608: LD_VAR 0 3
40612: PPUSH
40613: CALL_OW 1
40617: ST_TO_ADDR
40618: GO 40882
// begin tmp := arr ;
40620: LD_ADDR_VAR 0 6
40624: PUSH
40625: LD_VAR 0 1
40629: ST_TO_ADDR
// s_arr := [ tmp ] ;
40630: LD_ADDR_VAR 0 7
40634: PUSH
40635: LD_VAR 0 6
40639: PUSH
40640: EMPTY
40641: LIST
40642: ST_TO_ADDR
// for i = 1 to pos - 1 do
40643: LD_ADDR_VAR 0 5
40647: PUSH
40648: DOUBLE
40649: LD_INT 1
40651: DEC
40652: ST_TO_ADDR
40653: LD_VAR 0 2
40657: PUSH
40658: LD_INT 1
40660: MINUS
40661: PUSH
40662: FOR_TO
40663: IFFALSE 40708
// begin tmp := tmp [ pos [ i ] ] ;
40665: LD_ADDR_VAR 0 6
40669: PUSH
40670: LD_VAR 0 6
40674: PUSH
40675: LD_VAR 0 2
40679: PUSH
40680: LD_VAR 0 5
40684: ARRAY
40685: ARRAY
40686: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40687: LD_ADDR_VAR 0 7
40691: PUSH
40692: LD_VAR 0 7
40696: PUSH
40697: LD_VAR 0 6
40701: PUSH
40702: EMPTY
40703: LIST
40704: ADD
40705: ST_TO_ADDR
// end ;
40706: GO 40662
40708: POP
40709: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40710: LD_ADDR_VAR 0 6
40714: PUSH
40715: LD_VAR 0 6
40719: PPUSH
40720: LD_VAR 0 2
40724: PUSH
40725: LD_VAR 0 2
40729: ARRAY
40730: PPUSH
40731: LD_VAR 0 3
40735: PPUSH
40736: CALL_OW 1
40740: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 7
40750: PPUSH
40751: LD_VAR 0 7
40755: PPUSH
40756: LD_VAR 0 6
40760: PPUSH
40761: CALL_OW 1
40765: ST_TO_ADDR
// for i = s_arr downto 2 do
40766: LD_ADDR_VAR 0 5
40770: PUSH
40771: DOUBLE
40772: LD_VAR 0 7
40776: INC
40777: ST_TO_ADDR
40778: LD_INT 2
40780: PUSH
40781: FOR_DOWNTO
40782: IFFALSE 40866
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40784: LD_ADDR_VAR 0 6
40788: PUSH
40789: LD_VAR 0 7
40793: PUSH
40794: LD_VAR 0 5
40798: PUSH
40799: LD_INT 1
40801: MINUS
40802: ARRAY
40803: PPUSH
40804: LD_VAR 0 2
40808: PUSH
40809: LD_VAR 0 5
40813: PUSH
40814: LD_INT 1
40816: MINUS
40817: ARRAY
40818: PPUSH
40819: LD_VAR 0 7
40823: PUSH
40824: LD_VAR 0 5
40828: ARRAY
40829: PPUSH
40830: CALL_OW 1
40834: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40835: LD_ADDR_VAR 0 7
40839: PUSH
40840: LD_VAR 0 7
40844: PPUSH
40845: LD_VAR 0 5
40849: PUSH
40850: LD_INT 1
40852: MINUS
40853: PPUSH
40854: LD_VAR 0 6
40858: PPUSH
40859: CALL_OW 1
40863: ST_TO_ADDR
// end ;
40864: GO 40781
40866: POP
40867: POP
// result := s_arr [ 1 ] ;
40868: LD_ADDR_VAR 0 4
40872: PUSH
40873: LD_VAR 0 7
40877: PUSH
40878: LD_INT 1
40880: ARRAY
40881: ST_TO_ADDR
// end ; end ;
40882: LD_VAR 0 4
40886: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40887: LD_INT 0
40889: PPUSH
40890: PPUSH
// if not list then
40891: LD_VAR 0 1
40895: NOT
40896: IFFALSE 40900
// exit ;
40898: GO 40991
// i := list [ pos1 ] ;
40900: LD_ADDR_VAR 0 5
40904: PUSH
40905: LD_VAR 0 1
40909: PUSH
40910: LD_VAR 0 2
40914: ARRAY
40915: ST_TO_ADDR
// if not i then
40916: LD_VAR 0 5
40920: NOT
40921: IFFALSE 40925
// exit ;
40923: GO 40991
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40925: LD_ADDR_VAR 0 1
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: LD_VAR 0 2
40939: PPUSH
40940: LD_VAR 0 1
40944: PUSH
40945: LD_VAR 0 3
40949: ARRAY
40950: PPUSH
40951: CALL_OW 1
40955: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40956: LD_ADDR_VAR 0 1
40960: PUSH
40961: LD_VAR 0 1
40965: PPUSH
40966: LD_VAR 0 3
40970: PPUSH
40971: LD_VAR 0 5
40975: PPUSH
40976: CALL_OW 1
40980: ST_TO_ADDR
// result := list ;
40981: LD_ADDR_VAR 0 4
40985: PUSH
40986: LD_VAR 0 1
40990: ST_TO_ADDR
// end ;
40991: LD_VAR 0 4
40995: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40996: LD_INT 0
40998: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40999: LD_ADDR_VAR 0 5
41003: PUSH
41004: LD_VAR 0 1
41008: PPUSH
41009: CALL_OW 250
41013: PPUSH
41014: LD_VAR 0 1
41018: PPUSH
41019: CALL_OW 251
41023: PPUSH
41024: LD_VAR 0 2
41028: PPUSH
41029: LD_VAR 0 3
41033: PPUSH
41034: LD_VAR 0 4
41038: PPUSH
41039: CALL 41421 0 5
41043: ST_TO_ADDR
// end ;
41044: LD_VAR 0 5
41048: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
41049: LD_INT 0
41051: PPUSH
41052: PPUSH
41053: PPUSH
41054: PPUSH
// if not list or not unit then
41055: LD_VAR 0 2
41059: NOT
41060: IFTRUE 41069
41062: PUSH
41063: LD_VAR 0 1
41067: NOT
41068: OR
41069: IFFALSE 41073
// exit ;
41071: GO 41416
// result := [ ] ;
41073: LD_ADDR_VAR 0 5
41077: PUSH
41078: EMPTY
41079: ST_TO_ADDR
// for i in list do
41080: LD_ADDR_VAR 0 6
41084: PUSH
41085: LD_VAR 0 2
41089: PUSH
41090: FOR_IN
41091: IFFALSE 41309
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
41093: LD_ADDR_VAR 0 8
41097: PUSH
41098: LD_VAR 0 1
41102: PPUSH
41103: LD_VAR 0 6
41107: PUSH
41108: LD_INT 1
41110: ARRAY
41111: PPUSH
41112: LD_VAR 0 6
41116: PUSH
41117: LD_INT 2
41119: ARRAY
41120: PPUSH
41121: CALL_OW 297
41125: ST_TO_ADDR
// if not Count ( result ) then
41126: LD_VAR 0 5
41130: PPUSH
41131: CALL 37677 0 1
41135: NOT
41136: IFFALSE 41169
// begin result := Join ( result , [ i , tmp ] ) ;
41138: LD_ADDR_VAR 0 5
41142: PUSH
41143: LD_VAR 0 5
41147: PPUSH
41148: LD_VAR 0 6
41152: PUSH
41153: LD_VAR 0 8
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PPUSH
41162: CALL 73609 0 2
41166: ST_TO_ADDR
// continue ;
41167: GO 41090
// end ; if result [ result ] [ 2 ] <= tmp then
41169: LD_VAR 0 5
41173: PUSH
41174: LD_VAR 0 5
41178: ARRAY
41179: PUSH
41180: LD_INT 2
41182: ARRAY
41183: PUSH
41184: LD_VAR 0 8
41188: LESSEQUAL
41189: IFFALSE 41222
// result := Join ( result , [ i , tmp ] ) else
41191: LD_ADDR_VAR 0 5
41195: PUSH
41196: LD_VAR 0 5
41200: PPUSH
41201: LD_VAR 0 6
41205: PUSH
41206: LD_VAR 0 8
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PPUSH
41215: CALL 73609 0 2
41219: ST_TO_ADDR
41220: GO 41307
// begin for j := 1 to Count ( result ) do
41222: LD_ADDR_VAR 0 7
41226: PUSH
41227: DOUBLE
41228: LD_INT 1
41230: DEC
41231: ST_TO_ADDR
41232: LD_VAR 0 5
41236: PPUSH
41237: CALL 37677 0 1
41241: PUSH
41242: FOR_TO
41243: IFFALSE 41305
// begin if tmp < result [ j ] [ 2 ] then
41245: LD_VAR 0 8
41249: PUSH
41250: LD_VAR 0 5
41254: PUSH
41255: LD_VAR 0 7
41259: ARRAY
41260: PUSH
41261: LD_INT 2
41263: ARRAY
41264: LESS
41265: IFFALSE 41303
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41267: LD_ADDR_VAR 0 5
41271: PUSH
41272: LD_VAR 0 5
41276: PPUSH
41277: LD_VAR 0 7
41281: PPUSH
41282: LD_VAR 0 6
41286: PUSH
41287: LD_VAR 0 8
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PPUSH
41296: CALL_OW 2
41300: ST_TO_ADDR
// break ;
41301: GO 41305
// end ; end ;
41303: GO 41242
41305: POP
41306: POP
// end ; end ;
41307: GO 41090
41309: POP
41310: POP
// if result and not asc then
41311: LD_VAR 0 5
41315: IFFALSE 41324
41317: PUSH
41318: LD_VAR 0 3
41322: NOT
41323: AND
41324: IFFALSE 41341
// result := ReverseArray ( result ) ;
41326: LD_ADDR_VAR 0 5
41330: PUSH
41331: LD_VAR 0 5
41335: PPUSH
41336: CALL 68699 0 1
41340: ST_TO_ADDR
// tmp := [ ] ;
41341: LD_ADDR_VAR 0 8
41345: PUSH
41346: EMPTY
41347: ST_TO_ADDR
// if mode then
41348: LD_VAR 0 4
41352: IFFALSE 41416
// begin for i := 1 to result do
41354: LD_ADDR_VAR 0 6
41358: PUSH
41359: DOUBLE
41360: LD_INT 1
41362: DEC
41363: ST_TO_ADDR
41364: LD_VAR 0 5
41368: PUSH
41369: FOR_TO
41370: IFFALSE 41404
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
41372: LD_ADDR_VAR 0 8
41376: PUSH
41377: LD_VAR 0 8
41381: PPUSH
41382: LD_VAR 0 5
41386: PUSH
41387: LD_VAR 0 6
41391: ARRAY
41392: PUSH
41393: LD_INT 1
41395: ARRAY
41396: PPUSH
41397: CALL 73609 0 2
41401: ST_TO_ADDR
41402: GO 41369
41404: POP
41405: POP
// result := tmp ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_VAR 0 8
41415: ST_TO_ADDR
// end ; end ;
41416: LD_VAR 0 5
41420: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41421: LD_INT 0
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
// if not list then
41427: LD_VAR 0 3
41431: NOT
41432: IFFALSE 41436
// exit ;
41434: GO 41826
// result := [ ] ;
41436: LD_ADDR_VAR 0 6
41440: PUSH
41441: EMPTY
41442: ST_TO_ADDR
// for i in list do
41443: LD_ADDR_VAR 0 7
41447: PUSH
41448: LD_VAR 0 3
41452: PUSH
41453: FOR_IN
41454: IFFALSE 41656
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41456: LD_ADDR_VAR 0 9
41460: PUSH
41461: LD_VAR 0 7
41465: PPUSH
41466: LD_VAR 0 1
41470: PPUSH
41471: LD_VAR 0 2
41475: PPUSH
41476: CALL_OW 297
41480: ST_TO_ADDR
// if not result then
41481: LD_VAR 0 6
41485: NOT
41486: IFFALSE 41512
// result := [ [ i , tmp ] ] else
41488: LD_ADDR_VAR 0 6
41492: PUSH
41493: LD_VAR 0 7
41497: PUSH
41498: LD_VAR 0 9
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: EMPTY
41508: LIST
41509: ST_TO_ADDR
41510: GO 41654
// begin if result [ result ] [ 2 ] <= tmp then
41512: LD_VAR 0 6
41516: PUSH
41517: LD_VAR 0 6
41521: ARRAY
41522: PUSH
41523: LD_INT 2
41525: ARRAY
41526: PUSH
41527: LD_VAR 0 9
41531: LESSEQUAL
41532: IFFALSE 41574
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41534: LD_ADDR_VAR 0 6
41538: PUSH
41539: LD_VAR 0 6
41543: PPUSH
41544: LD_VAR 0 6
41548: PUSH
41549: LD_INT 1
41551: PLUS
41552: PPUSH
41553: LD_VAR 0 7
41557: PUSH
41558: LD_VAR 0 9
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PPUSH
41567: CALL_OW 2
41571: ST_TO_ADDR
41572: GO 41654
// for j := 1 to result do
41574: LD_ADDR_VAR 0 8
41578: PUSH
41579: DOUBLE
41580: LD_INT 1
41582: DEC
41583: ST_TO_ADDR
41584: LD_VAR 0 6
41588: PUSH
41589: FOR_TO
41590: IFFALSE 41652
// begin if tmp < result [ j ] [ 2 ] then
41592: LD_VAR 0 9
41596: PUSH
41597: LD_VAR 0 6
41601: PUSH
41602: LD_VAR 0 8
41606: ARRAY
41607: PUSH
41608: LD_INT 2
41610: ARRAY
41611: LESS
41612: IFFALSE 41650
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41614: LD_ADDR_VAR 0 6
41618: PUSH
41619: LD_VAR 0 6
41623: PPUSH
41624: LD_VAR 0 8
41628: PPUSH
41629: LD_VAR 0 7
41633: PUSH
41634: LD_VAR 0 9
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PPUSH
41643: CALL_OW 2
41647: ST_TO_ADDR
// break ;
41648: GO 41652
// end ; end ;
41650: GO 41589
41652: POP
41653: POP
// end ; end ;
41654: GO 41453
41656: POP
41657: POP
// if result and not asc then
41658: LD_VAR 0 6
41662: IFFALSE 41671
41664: PUSH
41665: LD_VAR 0 4
41669: NOT
41670: AND
41671: IFFALSE 41746
// begin tmp := result ;
41673: LD_ADDR_VAR 0 9
41677: PUSH
41678: LD_VAR 0 6
41682: ST_TO_ADDR
// for i = tmp downto 1 do
41683: LD_ADDR_VAR 0 7
41687: PUSH
41688: DOUBLE
41689: LD_VAR 0 9
41693: INC
41694: ST_TO_ADDR
41695: LD_INT 1
41697: PUSH
41698: FOR_DOWNTO
41699: IFFALSE 41744
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41701: LD_ADDR_VAR 0 6
41705: PUSH
41706: LD_VAR 0 6
41710: PPUSH
41711: LD_VAR 0 9
41715: PUSH
41716: LD_VAR 0 7
41720: MINUS
41721: PUSH
41722: LD_INT 1
41724: PLUS
41725: PPUSH
41726: LD_VAR 0 9
41730: PUSH
41731: LD_VAR 0 7
41735: ARRAY
41736: PPUSH
41737: CALL_OW 1
41741: ST_TO_ADDR
41742: GO 41698
41744: POP
41745: POP
// end ; tmp := [ ] ;
41746: LD_ADDR_VAR 0 9
41750: PUSH
41751: EMPTY
41752: ST_TO_ADDR
// if mode then
41753: LD_VAR 0 5
41757: IFFALSE 41826
// begin for i = 1 to result do
41759: LD_ADDR_VAR 0 7
41763: PUSH
41764: DOUBLE
41765: LD_INT 1
41767: DEC
41768: ST_TO_ADDR
41769: LD_VAR 0 6
41773: PUSH
41774: FOR_TO
41775: IFFALSE 41814
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41777: LD_ADDR_VAR 0 9
41781: PUSH
41782: LD_VAR 0 9
41786: PPUSH
41787: LD_VAR 0 7
41791: PPUSH
41792: LD_VAR 0 6
41796: PUSH
41797: LD_VAR 0 7
41801: ARRAY
41802: PUSH
41803: LD_INT 1
41805: ARRAY
41806: PPUSH
41807: CALL_OW 1
41811: ST_TO_ADDR
41812: GO 41774
41814: POP
41815: POP
// result := tmp ;
41816: LD_ADDR_VAR 0 6
41820: PUSH
41821: LD_VAR 0 9
41825: ST_TO_ADDR
// end ; end ;
41826: LD_VAR 0 6
41830: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41831: LD_INT 0
41833: PPUSH
41834: PPUSH
41835: PPUSH
41836: PPUSH
41837: PPUSH
41838: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41839: LD_ADDR_VAR 0 5
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: ST_TO_ADDR
// if not x or not y then
41861: LD_VAR 0 2
41865: NOT
41866: IFTRUE 41875
41868: PUSH
41869: LD_VAR 0 3
41873: NOT
41874: OR
41875: IFFALSE 41879
// exit ;
41877: GO 43535
// if not range then
41879: LD_VAR 0 4
41883: NOT
41884: IFFALSE 41894
// range := 10 ;
41886: LD_ADDR_VAR 0 4
41890: PUSH
41891: LD_INT 10
41893: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41894: LD_ADDR_VAR 0 8
41898: PUSH
41899: LD_INT 81
41901: PUSH
41902: LD_VAR 0 1
41906: PUSH
41907: EMPTY
41908: LIST
41909: LIST
41910: PUSH
41911: LD_INT 92
41913: PUSH
41914: LD_VAR 0 2
41918: PUSH
41919: LD_VAR 0 3
41923: PUSH
41924: LD_VAR 0 4
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: LD_INT 21
41940: PUSH
41941: LD_INT 3
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: PPUSH
41957: CALL_OW 69
41961: ST_TO_ADDR
// if not tmp then
41962: LD_VAR 0 8
41966: NOT
41967: IFFALSE 41971
// exit ;
41969: GO 43535
// for i in tmp do
41971: LD_ADDR_VAR 0 6
41975: PUSH
41976: LD_VAR 0 8
41980: PUSH
41981: FOR_IN
41982: IFFALSE 43510
// begin points := [ 0 , 0 , 0 ] ;
41984: LD_ADDR_VAR 0 9
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 0
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: ST_TO_ADDR
// bpoints := 1 ;
42003: LD_ADDR_VAR 0 10
42007: PUSH
42008: LD_INT 1
42010: ST_TO_ADDR
// case GetType ( i ) of unit_human :
42011: LD_VAR 0 6
42015: PPUSH
42016: CALL_OW 247
42020: PUSH
42021: LD_INT 1
42023: DOUBLE
42024: EQUAL
42025: IFTRUE 42029
42027: GO 42611
42029: POP
// begin if GetClass ( i ) = 1 then
42030: LD_VAR 0 6
42034: PPUSH
42035: CALL_OW 257
42039: PUSH
42040: LD_INT 1
42042: EQUAL
42043: IFFALSE 42064
// points := [ 10 , 5 , 3 ] ;
42045: LD_ADDR_VAR 0 9
42049: PUSH
42050: LD_INT 10
42052: PUSH
42053: LD_INT 5
42055: PUSH
42056: LD_INT 3
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
42064: LD_VAR 0 6
42068: PPUSH
42069: CALL_OW 257
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 3
42079: PUSH
42080: LD_INT 4
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: LIST
42087: IN
42088: IFFALSE 42109
// points := [ 3 , 2 , 1 ] ;
42090: LD_ADDR_VAR 0 9
42094: PUSH
42095: LD_INT 3
42097: PUSH
42098: LD_INT 2
42100: PUSH
42101: LD_INT 1
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: LIST
42108: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42109: LD_VAR 0 6
42113: PPUSH
42114: CALL_OW 257
42118: PUSH
42119: LD_INT 5
42121: EQUAL
42122: IFFALSE 42143
// points := [ 130 , 5 , 2 ] ;
42124: LD_ADDR_VAR 0 9
42128: PUSH
42129: LD_INT 130
42131: PUSH
42132: LD_INT 5
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: LIST
42142: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42143: LD_VAR 0 6
42147: PPUSH
42148: CALL_OW 257
42152: PUSH
42153: LD_INT 8
42155: EQUAL
42156: IFFALSE 42177
// points := [ 35 , 35 , 30 ] ;
42158: LD_ADDR_VAR 0 9
42162: PUSH
42163: LD_INT 35
42165: PUSH
42166: LD_INT 35
42168: PUSH
42169: LD_INT 30
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42177: LD_VAR 0 6
42181: PPUSH
42182: CALL_OW 257
42186: PUSH
42187: LD_INT 9
42189: EQUAL
42190: IFFALSE 42211
// points := [ 20 , 55 , 40 ] ;
42192: LD_ADDR_VAR 0 9
42196: PUSH
42197: LD_INT 20
42199: PUSH
42200: LD_INT 55
42202: PUSH
42203: LD_INT 40
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: LIST
42210: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42211: LD_VAR 0 6
42215: PPUSH
42216: CALL_OW 257
42220: PUSH
42221: LD_INT 12
42223: PUSH
42224: LD_INT 16
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: IN
42231: IFFALSE 42252
// points := [ 5 , 3 , 2 ] ;
42233: LD_ADDR_VAR 0 9
42237: PUSH
42238: LD_INT 5
42240: PUSH
42241: LD_INT 3
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42252: LD_VAR 0 6
42256: PPUSH
42257: CALL_OW 257
42261: PUSH
42262: LD_INT 17
42264: EQUAL
42265: IFFALSE 42286
// points := [ 100 , 50 , 75 ] ;
42267: LD_ADDR_VAR 0 9
42271: PUSH
42272: LD_INT 100
42274: PUSH
42275: LD_INT 50
42277: PUSH
42278: LD_INT 75
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42286: LD_VAR 0 6
42290: PPUSH
42291: CALL_OW 257
42295: PUSH
42296: LD_INT 15
42298: EQUAL
42299: IFFALSE 42320
// points := [ 10 , 5 , 3 ] ;
42301: LD_ADDR_VAR 0 9
42305: PUSH
42306: LD_INT 10
42308: PUSH
42309: LD_INT 5
42311: PUSH
42312: LD_INT 3
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: LIST
42319: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42320: LD_VAR 0 6
42324: PPUSH
42325: CALL_OW 257
42329: PUSH
42330: LD_INT 14
42332: EQUAL
42333: IFFALSE 42354
// points := [ 10 , 0 , 0 ] ;
42335: LD_ADDR_VAR 0 9
42339: PUSH
42340: LD_INT 10
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42354: LD_VAR 0 6
42358: PPUSH
42359: CALL_OW 257
42363: PUSH
42364: LD_INT 11
42366: EQUAL
42367: IFFALSE 42388
// points := [ 30 , 10 , 5 ] ;
42369: LD_ADDR_VAR 0 9
42373: PUSH
42374: LD_INT 30
42376: PUSH
42377: LD_INT 10
42379: PUSH
42380: LD_INT 5
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42388: LD_VAR 0 1
42392: PPUSH
42393: LD_INT 5
42395: PPUSH
42396: CALL_OW 321
42400: PUSH
42401: LD_INT 2
42403: EQUAL
42404: IFFALSE 42421
// bpoints := bpoints * 1.8 ;
42406: LD_ADDR_VAR 0 10
42410: PUSH
42411: LD_VAR 0 10
42415: PUSH
42416: LD_REAL  1.80000000000000E+0000
42419: MUL
42420: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42421: LD_VAR 0 6
42425: PPUSH
42426: CALL_OW 257
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 4
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: IN
42449: IFFALSE 42469
42451: PUSH
42452: LD_VAR 0 1
42456: PPUSH
42457: LD_INT 51
42459: PPUSH
42460: CALL_OW 321
42464: PUSH
42465: LD_INT 2
42467: EQUAL
42468: AND
42469: IFFALSE 42486
// bpoints := bpoints * 1.2 ;
42471: LD_ADDR_VAR 0 10
42475: PUSH
42476: LD_VAR 0 10
42480: PUSH
42481: LD_REAL  1.20000000000000E+0000
42484: MUL
42485: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42486: LD_VAR 0 6
42490: PPUSH
42491: CALL_OW 257
42495: PUSH
42496: LD_INT 5
42498: PUSH
42499: LD_INT 7
42501: PUSH
42502: LD_INT 9
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: LIST
42509: IN
42510: IFFALSE 42530
42512: PUSH
42513: LD_VAR 0 1
42517: PPUSH
42518: LD_INT 52
42520: PPUSH
42521: CALL_OW 321
42525: PUSH
42526: LD_INT 2
42528: EQUAL
42529: AND
42530: IFFALSE 42547
// bpoints := bpoints * 1.5 ;
42532: LD_ADDR_VAR 0 10
42536: PUSH
42537: LD_VAR 0 10
42541: PUSH
42542: LD_REAL  1.50000000000000E+0000
42545: MUL
42546: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42547: LD_VAR 0 1
42551: PPUSH
42552: LD_INT 66
42554: PPUSH
42555: CALL_OW 321
42559: PUSH
42560: LD_INT 2
42562: EQUAL
42563: IFFALSE 42580
// bpoints := bpoints * 1.1 ;
42565: LD_ADDR_VAR 0 10
42569: PUSH
42570: LD_VAR 0 10
42574: PUSH
42575: LD_REAL  1.10000000000000E+0000
42578: MUL
42579: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42580: LD_ADDR_VAR 0 10
42584: PUSH
42585: LD_VAR 0 10
42589: PUSH
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_INT 1
42597: PPUSH
42598: CALL_OW 259
42602: PUSH
42603: LD_REAL  1.15000000000000E+0000
42606: MUL
42607: MUL
42608: ST_TO_ADDR
// end ; unit_vehicle :
42609: GO 43439
42611: LD_INT 2
42613: DOUBLE
42614: EQUAL
42615: IFTRUE 42619
42617: GO 43427
42619: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42620: LD_VAR 0 6
42624: PPUSH
42625: CALL_OW 264
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 42
42635: PUSH
42636: LD_INT 24
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: LIST
42643: IN
42644: IFFALSE 42665
// points := [ 25 , 5 , 3 ] ;
42646: LD_ADDR_VAR 0 9
42650: PUSH
42651: LD_INT 25
42653: PUSH
42654: LD_INT 5
42656: PUSH
42657: LD_INT 3
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: LIST
42664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42665: LD_VAR 0 6
42669: PPUSH
42670: CALL_OW 264
42674: PUSH
42675: LD_INT 4
42677: PUSH
42678: LD_INT 43
42680: PUSH
42681: LD_INT 25
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: LIST
42688: IN
42689: IFFALSE 42710
// points := [ 40 , 15 , 5 ] ;
42691: LD_ADDR_VAR 0 9
42695: PUSH
42696: LD_INT 40
42698: PUSH
42699: LD_INT 15
42701: PUSH
42702: LD_INT 5
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42710: LD_VAR 0 6
42714: PPUSH
42715: CALL_OW 264
42719: PUSH
42720: LD_INT 3
42722: PUSH
42723: LD_INT 23
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: IN
42730: IFFALSE 42751
// points := [ 7 , 25 , 8 ] ;
42732: LD_ADDR_VAR 0 9
42736: PUSH
42737: LD_INT 7
42739: PUSH
42740: LD_INT 25
42742: PUSH
42743: LD_INT 8
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42751: LD_VAR 0 6
42755: PPUSH
42756: CALL_OW 264
42760: PUSH
42761: LD_INT 5
42763: PUSH
42764: LD_INT 27
42766: PUSH
42767: LD_INT 44
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: IN
42775: IFFALSE 42796
// points := [ 14 , 50 , 16 ] ;
42777: LD_ADDR_VAR 0 9
42781: PUSH
42782: LD_INT 14
42784: PUSH
42785: LD_INT 50
42787: PUSH
42788: LD_INT 16
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42796: LD_VAR 0 6
42800: PPUSH
42801: CALL_OW 264
42805: PUSH
42806: LD_INT 6
42808: PUSH
42809: LD_INT 46
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: IN
42816: IFFALSE 42837
// points := [ 32 , 120 , 70 ] ;
42818: LD_ADDR_VAR 0 9
42822: PUSH
42823: LD_INT 32
42825: PUSH
42826: LD_INT 120
42828: PUSH
42829: LD_INT 70
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: LIST
42836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42837: LD_VAR 0 6
42841: PPUSH
42842: CALL_OW 264
42846: PUSH
42847: LD_INT 7
42849: PUSH
42850: LD_INT 28
42852: PUSH
42853: LD_INT 45
42855: PUSH
42856: LD_INT 92
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: IN
42865: IFFALSE 42886
// points := [ 35 , 20 , 45 ] ;
42867: LD_ADDR_VAR 0 9
42871: PUSH
42872: LD_INT 35
42874: PUSH
42875: LD_INT 20
42877: PUSH
42878: LD_INT 45
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42886: LD_VAR 0 6
42890: PPUSH
42891: CALL_OW 264
42895: PUSH
42896: LD_INT 47
42898: PUSH
42899: EMPTY
42900: LIST
42901: IN
42902: IFFALSE 42923
// points := [ 67 , 45 , 75 ] ;
42904: LD_ADDR_VAR 0 9
42908: PUSH
42909: LD_INT 67
42911: PUSH
42912: LD_INT 45
42914: PUSH
42915: LD_INT 75
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42923: LD_VAR 0 6
42927: PPUSH
42928: CALL_OW 264
42932: PUSH
42933: LD_INT 26
42935: PUSH
42936: EMPTY
42937: LIST
42938: IN
42939: IFFALSE 42960
// points := [ 120 , 30 , 80 ] ;
42941: LD_ADDR_VAR 0 9
42945: PUSH
42946: LD_INT 120
42948: PUSH
42949: LD_INT 30
42951: PUSH
42952: LD_INT 80
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: LIST
42959: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42960: LD_VAR 0 6
42964: PPUSH
42965: CALL_OW 264
42969: PUSH
42970: LD_INT 22
42972: PUSH
42973: EMPTY
42974: LIST
42975: IN
42976: IFFALSE 42997
// points := [ 40 , 1 , 1 ] ;
42978: LD_ADDR_VAR 0 9
42982: PUSH
42983: LD_INT 40
42985: PUSH
42986: LD_INT 1
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42997: LD_VAR 0 6
43001: PPUSH
43002: CALL_OW 264
43006: PUSH
43007: LD_INT 29
43009: PUSH
43010: EMPTY
43011: LIST
43012: IN
43013: IFFALSE 43034
// points := [ 70 , 200 , 400 ] ;
43015: LD_ADDR_VAR 0 9
43019: PUSH
43020: LD_INT 70
43022: PUSH
43023: LD_INT 200
43025: PUSH
43026: LD_INT 400
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
43034: LD_VAR 0 6
43038: PPUSH
43039: CALL_OW 264
43043: PUSH
43044: LD_INT 14
43046: PUSH
43047: LD_INT 53
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: IN
43054: IFFALSE 43075
// points := [ 40 , 10 , 20 ] ;
43056: LD_ADDR_VAR 0 9
43060: PUSH
43061: LD_INT 40
43063: PUSH
43064: LD_INT 10
43066: PUSH
43067: LD_INT 20
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
43075: LD_VAR 0 6
43079: PPUSH
43080: CALL_OW 264
43084: PUSH
43085: LD_INT 9
43087: PUSH
43088: EMPTY
43089: LIST
43090: IN
43091: IFFALSE 43112
// points := [ 5 , 70 , 20 ] ;
43093: LD_ADDR_VAR 0 9
43097: PUSH
43098: LD_INT 5
43100: PUSH
43101: LD_INT 70
43103: PUSH
43104: LD_INT 20
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43112: LD_VAR 0 6
43116: PPUSH
43117: CALL_OW 264
43121: PUSH
43122: LD_INT 10
43124: PUSH
43125: EMPTY
43126: LIST
43127: IN
43128: IFFALSE 43149
// points := [ 35 , 110 , 70 ] ;
43130: LD_ADDR_VAR 0 9
43134: PUSH
43135: LD_INT 35
43137: PUSH
43138: LD_INT 110
43140: PUSH
43141: LD_INT 70
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: LIST
43148: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43149: LD_VAR 0 6
43153: PPUSH
43154: CALL_OW 265
43158: PUSH
43159: LD_INT 25
43161: EQUAL
43162: IFFALSE 43183
// points := [ 80 , 65 , 100 ] ;
43164: LD_ADDR_VAR 0 9
43168: PUSH
43169: LD_INT 80
43171: PUSH
43172: LD_INT 65
43174: PUSH
43175: LD_INT 100
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43183: LD_VAR 0 6
43187: PPUSH
43188: CALL_OW 263
43192: PUSH
43193: LD_INT 1
43195: EQUAL
43196: IFFALSE 43231
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43198: LD_ADDR_VAR 0 10
43202: PUSH
43203: LD_VAR 0 10
43207: PUSH
43208: LD_VAR 0 6
43212: PPUSH
43213: CALL_OW 311
43217: PPUSH
43218: LD_INT 3
43220: PPUSH
43221: CALL_OW 259
43225: PUSH
43226: LD_INT 4
43228: MUL
43229: MUL
43230: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43231: LD_VAR 0 6
43235: PPUSH
43236: CALL_OW 263
43240: PUSH
43241: LD_INT 2
43243: EQUAL
43244: IFFALSE 43295
// begin j := IsControledBy ( i ) ;
43246: LD_ADDR_VAR 0 7
43250: PUSH
43251: LD_VAR 0 6
43255: PPUSH
43256: CALL_OW 312
43260: ST_TO_ADDR
// if j then
43261: LD_VAR 0 7
43265: IFFALSE 43295
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43267: LD_ADDR_VAR 0 10
43271: PUSH
43272: LD_VAR 0 10
43276: PUSH
43277: LD_VAR 0 7
43281: PPUSH
43282: LD_INT 3
43284: PPUSH
43285: CALL_OW 259
43289: PUSH
43290: LD_INT 3
43292: MUL
43293: MUL
43294: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43295: LD_VAR 0 6
43299: PPUSH
43300: CALL_OW 264
43304: PUSH
43305: LD_INT 5
43307: PUSH
43308: LD_INT 6
43310: PUSH
43311: LD_INT 46
43313: PUSH
43314: LD_INT 44
43316: PUSH
43317: LD_INT 47
43319: PUSH
43320: LD_INT 45
43322: PUSH
43323: LD_INT 28
43325: PUSH
43326: LD_INT 7
43328: PUSH
43329: LD_INT 27
43331: PUSH
43332: LD_INT 29
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: IN
43347: IFFALSE 43367
43349: PUSH
43350: LD_VAR 0 1
43354: PPUSH
43355: LD_INT 52
43357: PPUSH
43358: CALL_OW 321
43362: PUSH
43363: LD_INT 2
43365: EQUAL
43366: AND
43367: IFFALSE 43384
// bpoints := bpoints * 1.2 ;
43369: LD_ADDR_VAR 0 10
43373: PUSH
43374: LD_VAR 0 10
43378: PUSH
43379: LD_REAL  1.20000000000000E+0000
43382: MUL
43383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43384: LD_VAR 0 6
43388: PPUSH
43389: CALL_OW 264
43393: PUSH
43394: LD_INT 6
43396: PUSH
43397: LD_INT 46
43399: PUSH
43400: LD_INT 47
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: LIST
43407: IN
43408: IFFALSE 43425
// bpoints := bpoints * 1.2 ;
43410: LD_ADDR_VAR 0 10
43414: PUSH
43415: LD_VAR 0 10
43419: PUSH
43420: LD_REAL  1.20000000000000E+0000
43423: MUL
43424: ST_TO_ADDR
// end ; unit_building :
43425: GO 43439
43427: LD_INT 3
43429: DOUBLE
43430: EQUAL
43431: IFTRUE 43435
43433: GO 43438
43435: POP
// ; end ;
43436: GO 43439
43438: POP
// for j = 1 to 3 do
43439: LD_ADDR_VAR 0 7
43443: PUSH
43444: DOUBLE
43445: LD_INT 1
43447: DEC
43448: ST_TO_ADDR
43449: LD_INT 3
43451: PUSH
43452: FOR_TO
43453: IFFALSE 43506
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43455: LD_ADDR_VAR 0 5
43459: PUSH
43460: LD_VAR 0 5
43464: PPUSH
43465: LD_VAR 0 7
43469: PPUSH
43470: LD_VAR 0 5
43474: PUSH
43475: LD_VAR 0 7
43479: ARRAY
43480: PUSH
43481: LD_VAR 0 9
43485: PUSH
43486: LD_VAR 0 7
43490: ARRAY
43491: PUSH
43492: LD_VAR 0 10
43496: MUL
43497: PLUS
43498: PPUSH
43499: CALL_OW 1
43503: ST_TO_ADDR
43504: GO 43452
43506: POP
43507: POP
// end ;
43508: GO 41981
43510: POP
43511: POP
// result := Replace ( result , 4 , tmp ) ;
43512: LD_ADDR_VAR 0 5
43516: PUSH
43517: LD_VAR 0 5
43521: PPUSH
43522: LD_INT 4
43524: PPUSH
43525: LD_VAR 0 8
43529: PPUSH
43530: CALL_OW 1
43534: ST_TO_ADDR
// end ;
43535: LD_VAR 0 5
43539: RET
// export function DangerAtRange ( unit , range ) ; begin
43540: LD_INT 0
43542: PPUSH
// if not unit then
43543: LD_VAR 0 1
43547: NOT
43548: IFFALSE 43552
// exit ;
43550: GO 43597
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43552: LD_ADDR_VAR 0 3
43556: PUSH
43557: LD_VAR 0 1
43561: PPUSH
43562: CALL_OW 255
43566: PPUSH
43567: LD_VAR 0 1
43571: PPUSH
43572: CALL_OW 250
43576: PPUSH
43577: LD_VAR 0 1
43581: PPUSH
43582: CALL_OW 251
43586: PPUSH
43587: LD_VAR 0 2
43591: PPUSH
43592: CALL 41831 0 4
43596: ST_TO_ADDR
// end ;
43597: LD_VAR 0 3
43601: RET
// export function DangerInArea ( side , area ) ; begin
43602: LD_INT 0
43604: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43605: LD_ADDR_VAR 0 3
43609: PUSH
43610: LD_VAR 0 2
43614: PPUSH
43615: LD_INT 81
43617: PUSH
43618: LD_VAR 0 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PPUSH
43627: CALL_OW 70
43631: ST_TO_ADDR
// end ;
43632: LD_VAR 0 3
43636: RET
// export function IsExtension ( b ) ; begin
43637: LD_INT 0
43639: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43640: LD_ADDR_VAR 0 2
43644: PUSH
43645: LD_VAR 0 1
43649: PUSH
43650: LD_INT 23
43652: PUSH
43653: LD_INT 20
43655: PUSH
43656: LD_INT 22
43658: PUSH
43659: LD_INT 17
43661: PUSH
43662: LD_INT 24
43664: PUSH
43665: LD_INT 21
43667: PUSH
43668: LD_INT 19
43670: PUSH
43671: LD_INT 16
43673: PUSH
43674: LD_INT 25
43676: PUSH
43677: LD_INT 18
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: IN
43692: ST_TO_ADDR
// end ;
43693: LD_VAR 0 2
43697: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43698: LD_INT 0
43700: PPUSH
43701: PPUSH
43702: PPUSH
// result := [ ] ;
43703: LD_ADDR_VAR 0 4
43707: PUSH
43708: EMPTY
43709: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43710: LD_ADDR_VAR 0 5
43714: PUSH
43715: LD_VAR 0 2
43719: PPUSH
43720: LD_INT 21
43722: PUSH
43723: LD_INT 3
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PPUSH
43730: CALL_OW 70
43734: ST_TO_ADDR
// if not tmp then
43735: LD_VAR 0 5
43739: NOT
43740: IFFALSE 43744
// exit ;
43742: GO 43808
// if checkLink then
43744: LD_VAR 0 3
43748: IFFALSE 43798
// begin for i in tmp do
43750: LD_ADDR_VAR 0 6
43754: PUSH
43755: LD_VAR 0 5
43759: PUSH
43760: FOR_IN
43761: IFFALSE 43796
// if GetBase ( i ) <> base then
43763: LD_VAR 0 6
43767: PPUSH
43768: CALL_OW 274
43772: PUSH
43773: LD_VAR 0 1
43777: NONEQUAL
43778: IFFALSE 43794
// ComLinkToBase ( base , i ) ;
43780: LD_VAR 0 1
43784: PPUSH
43785: LD_VAR 0 6
43789: PPUSH
43790: CALL_OW 169
43794: GO 43760
43796: POP
43797: POP
// end ; result := tmp ;
43798: LD_ADDR_VAR 0 4
43802: PUSH
43803: LD_VAR 0 5
43807: ST_TO_ADDR
// end ;
43808: LD_VAR 0 4
43812: RET
// export function ComComplete ( units , b ) ; var i ; begin
43813: LD_INT 0
43815: PPUSH
43816: PPUSH
// if not units then
43817: LD_VAR 0 1
43821: NOT
43822: IFFALSE 43826
// exit ;
43824: GO 43916
// for i in units do
43826: LD_ADDR_VAR 0 4
43830: PUSH
43831: LD_VAR 0 1
43835: PUSH
43836: FOR_IN
43837: IFFALSE 43914
// if BuildingStatus ( b ) = bs_build then
43839: LD_VAR 0 2
43843: PPUSH
43844: CALL_OW 461
43848: PUSH
43849: LD_INT 1
43851: EQUAL
43852: IFFALSE 43912
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43854: LD_VAR 0 4
43858: PPUSH
43859: LD_STRING h
43861: PUSH
43862: LD_VAR 0 2
43866: PPUSH
43867: CALL_OW 250
43871: PUSH
43872: LD_VAR 0 2
43876: PPUSH
43877: CALL_OW 251
43881: PUSH
43882: LD_VAR 0 2
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: PUSH
43905: EMPTY
43906: LIST
43907: PPUSH
43908: CALL_OW 446
43912: GO 43836
43914: POP
43915: POP
// end ;
43916: LD_VAR 0 3
43920: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43921: LD_INT 0
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43929: LD_VAR 0 1
43933: NOT
43934: IFTRUE 43951
43936: PUSH
43937: LD_VAR 0 1
43941: PPUSH
43942: CALL_OW 263
43946: PUSH
43947: LD_INT 2
43949: NONEQUAL
43950: OR
43951: IFFALSE 43955
// exit ;
43953: GO 44271
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43955: LD_ADDR_VAR 0 6
43959: PUSH
43960: LD_INT 22
43962: PUSH
43963: LD_VAR 0 1
43967: PPUSH
43968: CALL_OW 255
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 30
43982: PUSH
43983: LD_INT 36
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 34
43992: PUSH
43993: LD_INT 31
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: LIST
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PPUSH
44009: CALL_OW 69
44013: ST_TO_ADDR
// if not tmp then
44014: LD_VAR 0 6
44018: NOT
44019: IFFALSE 44023
// exit ;
44021: GO 44271
// result := [ ] ;
44023: LD_ADDR_VAR 0 2
44027: PUSH
44028: EMPTY
44029: ST_TO_ADDR
// for i in tmp do
44030: LD_ADDR_VAR 0 3
44034: PUSH
44035: LD_VAR 0 6
44039: PUSH
44040: FOR_IN
44041: IFFALSE 44112
// begin t := UnitsInside ( i ) ;
44043: LD_ADDR_VAR 0 4
44047: PUSH
44048: LD_VAR 0 3
44052: PPUSH
44053: CALL_OW 313
44057: ST_TO_ADDR
// if t then
44058: LD_VAR 0 4
44062: IFFALSE 44110
// for j in t do
44064: LD_ADDR_VAR 0 7
44068: PUSH
44069: LD_VAR 0 4
44073: PUSH
44074: FOR_IN
44075: IFFALSE 44108
// result := Replace ( result , result + 1 , j ) ;
44077: LD_ADDR_VAR 0 2
44081: PUSH
44082: LD_VAR 0 2
44086: PPUSH
44087: LD_VAR 0 2
44091: PUSH
44092: LD_INT 1
44094: PLUS
44095: PPUSH
44096: LD_VAR 0 7
44100: PPUSH
44101: CALL_OW 1
44105: ST_TO_ADDR
44106: GO 44074
44108: POP
44109: POP
// end ;
44110: GO 44040
44112: POP
44113: POP
// if not result then
44114: LD_VAR 0 2
44118: NOT
44119: IFFALSE 44123
// exit ;
44121: GO 44271
// mech := result [ 1 ] ;
44123: LD_ADDR_VAR 0 5
44127: PUSH
44128: LD_VAR 0 2
44132: PUSH
44133: LD_INT 1
44135: ARRAY
44136: ST_TO_ADDR
// if result > 1 then
44137: LD_VAR 0 2
44141: PUSH
44142: LD_INT 1
44144: GREATER
44145: IFFALSE 44257
// begin for i = 2 to result do
44147: LD_ADDR_VAR 0 3
44151: PUSH
44152: DOUBLE
44153: LD_INT 2
44155: DEC
44156: ST_TO_ADDR
44157: LD_VAR 0 2
44161: PUSH
44162: FOR_TO
44163: IFFALSE 44255
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44165: LD_ADDR_VAR 0 4
44169: PUSH
44170: LD_VAR 0 2
44174: PUSH
44175: LD_VAR 0 3
44179: ARRAY
44180: PPUSH
44181: LD_INT 3
44183: PPUSH
44184: CALL_OW 259
44188: PUSH
44189: LD_VAR 0 2
44193: PUSH
44194: LD_VAR 0 3
44198: ARRAY
44199: PPUSH
44200: CALL_OW 432
44204: MINUS
44205: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44206: LD_VAR 0 4
44210: PUSH
44211: LD_VAR 0 5
44215: PPUSH
44216: LD_INT 3
44218: PPUSH
44219: CALL_OW 259
44223: PUSH
44224: LD_VAR 0 5
44228: PPUSH
44229: CALL_OW 432
44233: MINUS
44234: GREATEREQUAL
44235: IFFALSE 44253
// mech := result [ i ] ;
44237: LD_ADDR_VAR 0 5
44241: PUSH
44242: LD_VAR 0 2
44246: PUSH
44247: LD_VAR 0 3
44251: ARRAY
44252: ST_TO_ADDR
// end ;
44253: GO 44162
44255: POP
44256: POP
// end ; ComLinkTo ( vehicle , mech ) ;
44257: LD_VAR 0 1
44261: PPUSH
44262: LD_VAR 0 5
44266: PPUSH
44267: CALL_OW 135
// end ;
44271: LD_VAR 0 2
44275: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44276: LD_INT 0
44278: PPUSH
44279: PPUSH
44280: PPUSH
44281: PPUSH
44282: PPUSH
44283: PPUSH
44284: PPUSH
44285: PPUSH
44286: PPUSH
44287: PPUSH
44288: PPUSH
44289: PPUSH
44290: PPUSH
// result := [ ] ;
44291: LD_ADDR_VAR 0 7
44295: PUSH
44296: EMPTY
44297: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44298: LD_VAR 0 1
44302: PPUSH
44303: CALL_OW 266
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: LD_INT 1
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: IN
44318: NOT
44319: IFFALSE 44323
// exit ;
44321: GO 45963
// if name then
44323: LD_VAR 0 3
44327: IFFALSE 44343
// SetBName ( base_dep , name ) ;
44329: LD_VAR 0 1
44333: PPUSH
44334: LD_VAR 0 3
44338: PPUSH
44339: CALL_OW 500
// base := GetBase ( base_dep ) ;
44343: LD_ADDR_VAR 0 15
44347: PUSH
44348: LD_VAR 0 1
44352: PPUSH
44353: CALL_OW 274
44357: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44358: LD_ADDR_VAR 0 16
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: CALL_OW 255
44372: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44373: LD_ADDR_VAR 0 17
44377: PUSH
44378: LD_VAR 0 1
44382: PPUSH
44383: CALL_OW 248
44387: ST_TO_ADDR
// if sources then
44388: LD_VAR 0 5
44392: IFFALSE 44439
// for i = 1 to 3 do
44394: LD_ADDR_VAR 0 8
44398: PUSH
44399: DOUBLE
44400: LD_INT 1
44402: DEC
44403: ST_TO_ADDR
44404: LD_INT 3
44406: PUSH
44407: FOR_TO
44408: IFFALSE 44437
// AddResourceType ( base , i , sources [ i ] ) ;
44410: LD_VAR 0 15
44414: PPUSH
44415: LD_VAR 0 8
44419: PPUSH
44420: LD_VAR 0 5
44424: PUSH
44425: LD_VAR 0 8
44429: ARRAY
44430: PPUSH
44431: CALL_OW 276
44435: GO 44407
44437: POP
44438: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44439: LD_ADDR_VAR 0 18
44443: PUSH
44444: LD_VAR 0 15
44448: PPUSH
44449: LD_VAR 0 2
44453: PPUSH
44454: LD_INT 1
44456: PPUSH
44457: CALL 43698 0 3
44461: ST_TO_ADDR
// InitHc ;
44462: CALL_OW 19
// InitUc ;
44466: CALL_OW 18
// uc_side := side ;
44470: LD_ADDR_OWVAR 20
44474: PUSH
44475: LD_VAR 0 16
44479: ST_TO_ADDR
// uc_nation := nation ;
44480: LD_ADDR_OWVAR 21
44484: PUSH
44485: LD_VAR 0 17
44489: ST_TO_ADDR
// if buildings then
44490: LD_VAR 0 18
44494: IFFALSE 45822
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44496: LD_ADDR_VAR 0 19
44500: PUSH
44501: LD_VAR 0 18
44505: PPUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 30
44511: PUSH
44512: LD_INT 29
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 30
44521: PUSH
44522: LD_INT 30
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: PPUSH
44534: CALL_OW 72
44538: ST_TO_ADDR
// if tmp then
44539: LD_VAR 0 19
44543: IFFALSE 44591
// for i in tmp do
44545: LD_ADDR_VAR 0 8
44549: PUSH
44550: LD_VAR 0 19
44554: PUSH
44555: FOR_IN
44556: IFFALSE 44589
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44558: LD_VAR 0 8
44562: PPUSH
44563: CALL_OW 250
44567: PPUSH
44568: LD_VAR 0 8
44572: PPUSH
44573: CALL_OW 251
44577: PPUSH
44578: LD_VAR 0 16
44582: PPUSH
44583: CALL_OW 441
44587: GO 44555
44589: POP
44590: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44591: LD_VAR 0 18
44595: PPUSH
44596: LD_INT 2
44598: PUSH
44599: LD_INT 30
44601: PUSH
44602: LD_INT 32
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 30
44611: PUSH
44612: LD_INT 33
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: PPUSH
44624: CALL_OW 72
44628: IFFALSE 44716
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44630: LD_ADDR_VAR 0 8
44634: PUSH
44635: LD_VAR 0 18
44639: PPUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 30
44645: PUSH
44646: LD_INT 32
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 30
44655: PUSH
44656: LD_INT 33
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: LIST
44667: PPUSH
44668: CALL_OW 72
44672: PUSH
44673: FOR_IN
44674: IFFALSE 44714
// begin if not GetBWeapon ( i ) then
44676: LD_VAR 0 8
44680: PPUSH
44681: CALL_OW 269
44685: NOT
44686: IFFALSE 44712
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44688: LD_VAR 0 8
44692: PPUSH
44693: LD_VAR 0 8
44697: PPUSH
44698: LD_VAR 0 2
44702: PPUSH
44703: CALL 45968 0 2
44707: PPUSH
44708: CALL_OW 431
// end ;
44712: GO 44673
44714: POP
44715: POP
// end ; for i = 1 to personel do
44716: LD_ADDR_VAR 0 8
44720: PUSH
44721: DOUBLE
44722: LD_INT 1
44724: DEC
44725: ST_TO_ADDR
44726: LD_VAR 0 6
44730: PUSH
44731: FOR_TO
44732: IFFALSE 45802
// begin if i > 4 then
44734: LD_VAR 0 8
44738: PUSH
44739: LD_INT 4
44741: GREATER
44742: IFFALSE 44746
// break ;
44744: GO 45802
// case i of 1 :
44746: LD_VAR 0 8
44750: PUSH
44751: LD_INT 1
44753: DOUBLE
44754: EQUAL
44755: IFTRUE 44759
44757: GO 44839
44759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44760: LD_ADDR_VAR 0 12
44764: PUSH
44765: LD_VAR 0 18
44769: PPUSH
44770: LD_INT 22
44772: PUSH
44773: LD_VAR 0 16
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 58
44784: PUSH
44785: EMPTY
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 30
44793: PUSH
44794: LD_INT 32
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 30
44803: PUSH
44804: LD_INT 4
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 30
44813: PUSH
44814: LD_INT 5
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: LIST
44831: PPUSH
44832: CALL_OW 72
44836: ST_TO_ADDR
44837: GO 45061
44839: LD_INT 2
44841: DOUBLE
44842: EQUAL
44843: IFTRUE 44847
44845: GO 44909
44847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44848: LD_ADDR_VAR 0 12
44852: PUSH
44853: LD_VAR 0 18
44857: PPUSH
44858: LD_INT 22
44860: PUSH
44861: LD_VAR 0 16
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 2
44872: PUSH
44873: LD_INT 30
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 30
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PPUSH
44902: CALL_OW 72
44906: ST_TO_ADDR
44907: GO 45061
44909: LD_INT 3
44911: DOUBLE
44912: EQUAL
44913: IFTRUE 44917
44915: GO 44979
44917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44918: LD_ADDR_VAR 0 12
44922: PUSH
44923: LD_VAR 0 18
44927: PPUSH
44928: LD_INT 22
44930: PUSH
44931: LD_VAR 0 16
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 30
44945: PUSH
44946: LD_INT 2
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 30
44955: PUSH
44956: LD_INT 3
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: LIST
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PPUSH
44972: CALL_OW 72
44976: ST_TO_ADDR
44977: GO 45061
44979: LD_INT 4
44981: DOUBLE
44982: EQUAL
44983: IFTRUE 44987
44985: GO 45060
44987: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44988: LD_ADDR_VAR 0 12
44992: PUSH
44993: LD_VAR 0 18
44997: PPUSH
44998: LD_INT 22
45000: PUSH
45001: LD_VAR 0 16
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: LD_INT 30
45015: PUSH
45016: LD_INT 6
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 30
45025: PUSH
45026: LD_INT 7
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 30
45035: PUSH
45036: LD_INT 8
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PPUSH
45053: CALL_OW 72
45057: ST_TO_ADDR
45058: GO 45061
45060: POP
// if i = 1 then
45061: LD_VAR 0 8
45065: PUSH
45066: LD_INT 1
45068: EQUAL
45069: IFFALSE 45180
// begin tmp := [ ] ;
45071: LD_ADDR_VAR 0 19
45075: PUSH
45076: EMPTY
45077: ST_TO_ADDR
// for j in f do
45078: LD_ADDR_VAR 0 9
45082: PUSH
45083: LD_VAR 0 12
45087: PUSH
45088: FOR_IN
45089: IFFALSE 45162
// if GetBType ( j ) = b_bunker then
45091: LD_VAR 0 9
45095: PPUSH
45096: CALL_OW 266
45100: PUSH
45101: LD_INT 32
45103: EQUAL
45104: IFFALSE 45131
// tmp := Insert ( tmp , 1 , j ) else
45106: LD_ADDR_VAR 0 19
45110: PUSH
45111: LD_VAR 0 19
45115: PPUSH
45116: LD_INT 1
45118: PPUSH
45119: LD_VAR 0 9
45123: PPUSH
45124: CALL_OW 2
45128: ST_TO_ADDR
45129: GO 45160
// tmp := Insert ( tmp , tmp + 1 , j ) ;
45131: LD_ADDR_VAR 0 19
45135: PUSH
45136: LD_VAR 0 19
45140: PPUSH
45141: LD_VAR 0 19
45145: PUSH
45146: LD_INT 1
45148: PLUS
45149: PPUSH
45150: LD_VAR 0 9
45154: PPUSH
45155: CALL_OW 2
45159: ST_TO_ADDR
45160: GO 45088
45162: POP
45163: POP
// if tmp then
45164: LD_VAR 0 19
45168: IFFALSE 45180
// f := tmp ;
45170: LD_ADDR_VAR 0 12
45174: PUSH
45175: LD_VAR 0 19
45179: ST_TO_ADDR
// end ; x := personel [ i ] ;
45180: LD_ADDR_VAR 0 13
45184: PUSH
45185: LD_VAR 0 6
45189: PUSH
45190: LD_VAR 0 8
45194: ARRAY
45195: ST_TO_ADDR
// if x = - 1 then
45196: LD_VAR 0 13
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: EQUAL
45205: IFFALSE 45416
// begin for j in f do
45207: LD_ADDR_VAR 0 9
45211: PUSH
45212: LD_VAR 0 12
45216: PUSH
45217: FOR_IN
45218: IFFALSE 45412
// repeat InitHc ;
45220: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45224: LD_VAR 0 9
45228: PPUSH
45229: CALL_OW 266
45233: PUSH
45234: LD_INT 5
45236: EQUAL
45237: IFFALSE 45307
// begin if UnitsInside ( j ) < 3 then
45239: LD_VAR 0 9
45243: PPUSH
45244: CALL_OW 313
45248: PUSH
45249: LD_INT 3
45251: LESS
45252: IFFALSE 45288
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45254: LD_INT 0
45256: PPUSH
45257: LD_INT 5
45259: PUSH
45260: LD_INT 8
45262: PUSH
45263: LD_INT 9
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: LIST
45270: PUSH
45271: LD_VAR 0 17
45275: ARRAY
45276: PPUSH
45277: LD_VAR 0 4
45281: PPUSH
45282: CALL_OW 380
45286: GO 45305
// PrepareHuman ( false , i , skill ) ;
45288: LD_INT 0
45290: PPUSH
45291: LD_VAR 0 8
45295: PPUSH
45296: LD_VAR 0 4
45300: PPUSH
45301: CALL_OW 380
// end else
45305: GO 45324
// PrepareHuman ( false , i , skill ) ;
45307: LD_INT 0
45309: PPUSH
45310: LD_VAR 0 8
45314: PPUSH
45315: LD_VAR 0 4
45319: PPUSH
45320: CALL_OW 380
// un := CreateHuman ;
45324: LD_ADDR_VAR 0 14
45328: PUSH
45329: CALL_OW 44
45333: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45334: LD_ADDR_VAR 0 7
45338: PUSH
45339: LD_VAR 0 7
45343: PPUSH
45344: LD_INT 1
45346: PPUSH
45347: LD_VAR 0 14
45351: PPUSH
45352: CALL_OW 2
45356: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45357: LD_VAR 0 14
45361: PPUSH
45362: LD_VAR 0 9
45366: PPUSH
45367: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45371: LD_VAR 0 9
45375: PPUSH
45376: CALL_OW 313
45380: PUSH
45381: LD_INT 6
45383: EQUAL
45384: IFTRUE 45408
45386: PUSH
45387: LD_VAR 0 9
45391: PPUSH
45392: CALL_OW 266
45396: PUSH
45397: LD_INT 32
45399: PUSH
45400: LD_INT 31
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: IN
45407: OR
45408: IFFALSE 45220
45410: GO 45217
45412: POP
45413: POP
// end else
45414: GO 45800
// for j = 1 to x do
45416: LD_ADDR_VAR 0 9
45420: PUSH
45421: DOUBLE
45422: LD_INT 1
45424: DEC
45425: ST_TO_ADDR
45426: LD_VAR 0 13
45430: PUSH
45431: FOR_TO
45432: IFFALSE 45798
// begin InitHc ;
45434: CALL_OW 19
// if not f then
45438: LD_VAR 0 12
45442: NOT
45443: IFFALSE 45532
// begin PrepareHuman ( false , i , skill ) ;
45445: LD_INT 0
45447: PPUSH
45448: LD_VAR 0 8
45452: PPUSH
45453: LD_VAR 0 4
45457: PPUSH
45458: CALL_OW 380
// un := CreateHuman ;
45462: LD_ADDR_VAR 0 14
45466: PUSH
45467: CALL_OW 44
45471: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45472: LD_ADDR_VAR 0 7
45476: PUSH
45477: LD_VAR 0 7
45481: PPUSH
45482: LD_INT 1
45484: PPUSH
45485: LD_VAR 0 14
45489: PPUSH
45490: CALL_OW 2
45494: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45495: LD_VAR 0 14
45499: PPUSH
45500: LD_VAR 0 1
45504: PPUSH
45505: CALL_OW 250
45509: PPUSH
45510: LD_VAR 0 1
45514: PPUSH
45515: CALL_OW 251
45519: PPUSH
45520: LD_INT 10
45522: PPUSH
45523: LD_INT 0
45525: PPUSH
45526: CALL_OW 50
// continue ;
45530: GO 45431
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45532: LD_VAR 0 12
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PPUSH
45541: CALL_OW 313
45545: IFFALSE 45573
45547: PUSH
45548: LD_VAR 0 12
45552: PUSH
45553: LD_INT 1
45555: ARRAY
45556: PPUSH
45557: CALL_OW 266
45561: PUSH
45562: LD_INT 32
45564: PUSH
45565: LD_INT 31
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: IN
45572: AND
45573: IFTRUE 45594
45575: PUSH
45576: LD_VAR 0 12
45580: PUSH
45581: LD_INT 1
45583: ARRAY
45584: PPUSH
45585: CALL_OW 313
45589: PUSH
45590: LD_INT 6
45592: EQUAL
45593: OR
45594: IFFALSE 45614
// f := Delete ( f , 1 ) ;
45596: LD_ADDR_VAR 0 12
45600: PUSH
45601: LD_VAR 0 12
45605: PPUSH
45606: LD_INT 1
45608: PPUSH
45609: CALL_OW 3
45613: ST_TO_ADDR
// if not f then
45614: LD_VAR 0 12
45618: NOT
45619: IFFALSE 45637
// begin x := x + 2 ;
45621: LD_ADDR_VAR 0 13
45625: PUSH
45626: LD_VAR 0 13
45630: PUSH
45631: LD_INT 2
45633: PLUS
45634: ST_TO_ADDR
// continue ;
45635: GO 45431
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45637: LD_VAR 0 12
45641: PUSH
45642: LD_INT 1
45644: ARRAY
45645: PPUSH
45646: CALL_OW 266
45650: PUSH
45651: LD_INT 5
45653: EQUAL
45654: IFFALSE 45728
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45656: LD_VAR 0 12
45660: PUSH
45661: LD_INT 1
45663: ARRAY
45664: PPUSH
45665: CALL_OW 313
45669: PUSH
45670: LD_INT 3
45672: LESS
45673: IFFALSE 45709
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45675: LD_INT 0
45677: PPUSH
45678: LD_INT 5
45680: PUSH
45681: LD_INT 8
45683: PUSH
45684: LD_INT 9
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: PUSH
45692: LD_VAR 0 17
45696: ARRAY
45697: PPUSH
45698: LD_VAR 0 4
45702: PPUSH
45703: CALL_OW 380
45707: GO 45726
// PrepareHuman ( false , i , skill ) ;
45709: LD_INT 0
45711: PPUSH
45712: LD_VAR 0 8
45716: PPUSH
45717: LD_VAR 0 4
45721: PPUSH
45722: CALL_OW 380
// end else
45726: GO 45745
// PrepareHuman ( false , i , skill ) ;
45728: LD_INT 0
45730: PPUSH
45731: LD_VAR 0 8
45735: PPUSH
45736: LD_VAR 0 4
45740: PPUSH
45741: CALL_OW 380
// un := CreateHuman ;
45745: LD_ADDR_VAR 0 14
45749: PUSH
45750: CALL_OW 44
45754: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45755: LD_ADDR_VAR 0 7
45759: PUSH
45760: LD_VAR 0 7
45764: PPUSH
45765: LD_INT 1
45767: PPUSH
45768: LD_VAR 0 14
45772: PPUSH
45773: CALL_OW 2
45777: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45778: LD_VAR 0 14
45782: PPUSH
45783: LD_VAR 0 12
45787: PUSH
45788: LD_INT 1
45790: ARRAY
45791: PPUSH
45792: CALL_OW 52
// end ;
45796: GO 45431
45798: POP
45799: POP
// end ;
45800: GO 44731
45802: POP
45803: POP
// result := result ^ buildings ;
45804: LD_ADDR_VAR 0 7
45808: PUSH
45809: LD_VAR 0 7
45813: PUSH
45814: LD_VAR 0 18
45818: ADD
45819: ST_TO_ADDR
// end else
45820: GO 45963
// begin for i = 1 to personel do
45822: LD_ADDR_VAR 0 8
45826: PUSH
45827: DOUBLE
45828: LD_INT 1
45830: DEC
45831: ST_TO_ADDR
45832: LD_VAR 0 6
45836: PUSH
45837: FOR_TO
45838: IFFALSE 45961
// begin if i > 4 then
45840: LD_VAR 0 8
45844: PUSH
45845: LD_INT 4
45847: GREATER
45848: IFFALSE 45852
// break ;
45850: GO 45961
// x := personel [ i ] ;
45852: LD_ADDR_VAR 0 13
45856: PUSH
45857: LD_VAR 0 6
45861: PUSH
45862: LD_VAR 0 8
45866: ARRAY
45867: ST_TO_ADDR
// if x = - 1 then
45868: LD_VAR 0 13
45872: PUSH
45873: LD_INT 1
45875: NEG
45876: EQUAL
45877: IFFALSE 45881
// continue ;
45879: GO 45837
// PrepareHuman ( false , i , skill ) ;
45881: LD_INT 0
45883: PPUSH
45884: LD_VAR 0 8
45888: PPUSH
45889: LD_VAR 0 4
45893: PPUSH
45894: CALL_OW 380
// un := CreateHuman ;
45898: LD_ADDR_VAR 0 14
45902: PUSH
45903: CALL_OW 44
45907: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45908: LD_VAR 0 14
45912: PPUSH
45913: LD_VAR 0 1
45917: PPUSH
45918: CALL_OW 250
45922: PPUSH
45923: LD_VAR 0 1
45927: PPUSH
45928: CALL_OW 251
45932: PPUSH
45933: LD_INT 10
45935: PPUSH
45936: LD_INT 0
45938: PPUSH
45939: CALL_OW 50
// result := result ^ un ;
45943: LD_ADDR_VAR 0 7
45947: PUSH
45948: LD_VAR 0 7
45952: PUSH
45953: LD_VAR 0 14
45957: ADD
45958: ST_TO_ADDR
// end ;
45959: GO 45837
45961: POP
45962: POP
// end ; end ;
45963: LD_VAR 0 7
45967: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45968: LD_INT 0
45970: PPUSH
45971: PPUSH
45972: PPUSH
45973: PPUSH
45974: PPUSH
45975: PPUSH
45976: PPUSH
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
// result := false ;
45986: LD_ADDR_VAR 0 3
45990: PUSH
45991: LD_INT 0
45993: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45994: LD_VAR 0 1
45998: NOT
45999: IFTRUE 46024
46001: PUSH
46002: LD_VAR 0 1
46006: PPUSH
46007: CALL_OW 266
46011: PUSH
46012: LD_INT 32
46014: PUSH
46015: LD_INT 33
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: IN
46022: NOT
46023: OR
46024: IFFALSE 46028
// exit ;
46026: GO 47163
// nat := GetNation ( tower ) ;
46028: LD_ADDR_VAR 0 12
46032: PUSH
46033: LD_VAR 0 1
46037: PPUSH
46038: CALL_OW 248
46042: ST_TO_ADDR
// side := GetSide ( tower ) ;
46043: LD_ADDR_VAR 0 16
46047: PUSH
46048: LD_VAR 0 1
46052: PPUSH
46053: CALL_OW 255
46057: ST_TO_ADDR
// x := GetX ( tower ) ;
46058: LD_ADDR_VAR 0 10
46062: PUSH
46063: LD_VAR 0 1
46067: PPUSH
46068: CALL_OW 250
46072: ST_TO_ADDR
// y := GetY ( tower ) ;
46073: LD_ADDR_VAR 0 11
46077: PUSH
46078: LD_VAR 0 1
46082: PPUSH
46083: CALL_OW 251
46087: ST_TO_ADDR
// if not x or not y then
46088: LD_VAR 0 10
46092: NOT
46093: IFTRUE 46102
46095: PUSH
46096: LD_VAR 0 11
46100: NOT
46101: OR
46102: IFFALSE 46106
// exit ;
46104: GO 47163
// weapon := 0 ;
46106: LD_ADDR_VAR 0 18
46110: PUSH
46111: LD_INT 0
46113: ST_TO_ADDR
// fac_list := [ ] ;
46114: LD_ADDR_VAR 0 17
46118: PUSH
46119: EMPTY
46120: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
46121: LD_ADDR_VAR 0 6
46125: PUSH
46126: LD_VAR 0 1
46130: PPUSH
46131: CALL_OW 274
46135: PPUSH
46136: LD_VAR 0 2
46140: PPUSH
46141: LD_INT 0
46143: PPUSH
46144: CALL 43698 0 3
46148: PPUSH
46149: LD_INT 30
46151: PUSH
46152: LD_INT 3
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PPUSH
46159: CALL_OW 72
46163: ST_TO_ADDR
// if not factories then
46164: LD_VAR 0 6
46168: NOT
46169: IFFALSE 46173
// exit ;
46171: GO 47163
// for i in factories do
46173: LD_ADDR_VAR 0 8
46177: PUSH
46178: LD_VAR 0 6
46182: PUSH
46183: FOR_IN
46184: IFFALSE 46209
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46186: LD_ADDR_VAR 0 17
46190: PUSH
46191: LD_VAR 0 17
46195: PUSH
46196: LD_VAR 0 8
46200: PPUSH
46201: CALL_OW 478
46205: UNION
46206: ST_TO_ADDR
46207: GO 46183
46209: POP
46210: POP
// if not fac_list then
46211: LD_VAR 0 17
46215: NOT
46216: IFFALSE 46220
// exit ;
46218: GO 47163
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46220: LD_ADDR_VAR 0 5
46224: PUSH
46225: LD_INT 4
46227: PUSH
46228: LD_INT 5
46230: PUSH
46231: LD_INT 9
46233: PUSH
46234: LD_INT 10
46236: PUSH
46237: LD_INT 6
46239: PUSH
46240: LD_INT 7
46242: PUSH
46243: LD_INT 11
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 27
46257: PUSH
46258: LD_INT 28
46260: PUSH
46261: LD_INT 26
46263: PUSH
46264: LD_INT 30
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 43
46275: PUSH
46276: LD_INT 44
46278: PUSH
46279: LD_INT 46
46281: PUSH
46282: LD_INT 45
46284: PUSH
46285: LD_INT 47
46287: PUSH
46288: LD_INT 49
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: PUSH
46304: LD_VAR 0 12
46308: ARRAY
46309: ST_TO_ADDR
// list := list isect fac_list ;
46310: LD_ADDR_VAR 0 5
46314: PUSH
46315: LD_VAR 0 5
46319: PUSH
46320: LD_VAR 0 17
46324: ISECT
46325: ST_TO_ADDR
// if not list then
46326: LD_VAR 0 5
46330: NOT
46331: IFFALSE 46335
// exit ;
46333: GO 47163
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46335: LD_VAR 0 12
46339: PUSH
46340: LD_INT 3
46342: EQUAL
46343: IFFALSE 46355
46345: PUSH
46346: LD_INT 49
46348: PUSH
46349: LD_VAR 0 5
46353: IN
46354: AND
46355: IFFALSE 46375
46357: PUSH
46358: LD_INT 31
46360: PPUSH
46361: LD_VAR 0 16
46365: PPUSH
46366: CALL_OW 321
46370: PUSH
46371: LD_INT 2
46373: EQUAL
46374: AND
46375: IFFALSE 46435
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46377: LD_INT 22
46379: PUSH
46380: LD_VAR 0 16
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 35
46391: PUSH
46392: LD_INT 49
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 91
46401: PUSH
46402: LD_VAR 0 1
46406: PUSH
46407: LD_INT 10
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: LIST
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: LIST
46419: PPUSH
46420: CALL_OW 69
46424: NOT
46425: IFFALSE 46435
// weapon := ru_time_lapser ;
46427: LD_ADDR_VAR 0 18
46431: PUSH
46432: LD_INT 49
46434: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46435: LD_VAR 0 12
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: IN
46450: IFFALSE 46474
46452: PUSH
46453: LD_INT 11
46455: PUSH
46456: LD_VAR 0 5
46460: IN
46461: IFTRUE 46473
46463: PUSH
46464: LD_INT 30
46466: PUSH
46467: LD_VAR 0 5
46471: IN
46472: OR
46473: AND
46474: IFFALSE 46494
46476: PUSH
46477: LD_INT 6
46479: PPUSH
46480: LD_VAR 0 16
46484: PPUSH
46485: CALL_OW 321
46489: PUSH
46490: LD_INT 2
46492: EQUAL
46493: AND
46494: IFFALSE 46661
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46496: LD_INT 22
46498: PUSH
46499: LD_VAR 0 16
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 35
46513: PUSH
46514: LD_INT 11
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 35
46523: PUSH
46524: LD_INT 30
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 91
46538: PUSH
46539: LD_VAR 0 1
46543: PUSH
46544: LD_INT 18
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: LIST
46556: PPUSH
46557: CALL_OW 69
46561: NOT
46562: IFFALSE 46638
46564: PUSH
46565: LD_INT 22
46567: PUSH
46568: LD_VAR 0 16
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 30
46582: PUSH
46583: LD_INT 32
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 30
46592: PUSH
46593: LD_INT 33
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 91
46607: PUSH
46608: LD_VAR 0 1
46612: PUSH
46613: LD_INT 12
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: LIST
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: PPUSH
46629: CALL_OW 69
46633: PUSH
46634: LD_INT 2
46636: GREATER
46637: AND
46638: IFFALSE 46661
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46640: LD_ADDR_VAR 0 18
46644: PUSH
46645: LD_INT 11
46647: PUSH
46648: LD_INT 30
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_VAR 0 12
46659: ARRAY
46660: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46661: LD_VAR 0 18
46665: NOT
46666: IFFALSE 46686
46668: PUSH
46669: LD_INT 40
46671: PPUSH
46672: LD_VAR 0 16
46676: PPUSH
46677: CALL_OW 321
46681: PUSH
46682: LD_INT 2
46684: EQUAL
46685: AND
46686: IFFALSE 46722
46688: PUSH
46689: LD_INT 7
46691: PUSH
46692: LD_VAR 0 5
46696: IN
46697: IFTRUE 46709
46699: PUSH
46700: LD_INT 28
46702: PUSH
46703: LD_VAR 0 5
46707: IN
46708: OR
46709: IFTRUE 46721
46711: PUSH
46712: LD_INT 45
46714: PUSH
46715: LD_VAR 0 5
46719: IN
46720: OR
46721: AND
46722: IFFALSE 46976
// begin hex := GetHexInfo ( x , y ) ;
46724: LD_ADDR_VAR 0 4
46728: PUSH
46729: LD_VAR 0 10
46733: PPUSH
46734: LD_VAR 0 11
46738: PPUSH
46739: CALL_OW 546
46743: ST_TO_ADDR
// if hex [ 1 ] then
46744: LD_VAR 0 4
46748: PUSH
46749: LD_INT 1
46751: ARRAY
46752: IFFALSE 46756
// exit ;
46754: GO 47163
// height := hex [ 2 ] ;
46756: LD_ADDR_VAR 0 15
46760: PUSH
46761: LD_VAR 0 4
46765: PUSH
46766: LD_INT 2
46768: ARRAY
46769: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46770: LD_ADDR_VAR 0 14
46774: PUSH
46775: LD_INT 0
46777: PUSH
46778: LD_INT 2
46780: PUSH
46781: LD_INT 3
46783: PUSH
46784: LD_INT 5
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// for i in tmp do
46793: LD_ADDR_VAR 0 8
46797: PUSH
46798: LD_VAR 0 14
46802: PUSH
46803: FOR_IN
46804: IFFALSE 46974
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46806: LD_ADDR_VAR 0 9
46810: PUSH
46811: LD_VAR 0 10
46815: PPUSH
46816: LD_VAR 0 8
46820: PPUSH
46821: LD_INT 5
46823: PPUSH
46824: CALL_OW 272
46828: PUSH
46829: LD_VAR 0 11
46833: PPUSH
46834: LD_VAR 0 8
46838: PPUSH
46839: LD_INT 5
46841: PPUSH
46842: CALL_OW 273
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46851: LD_VAR 0 9
46855: PUSH
46856: LD_INT 1
46858: ARRAY
46859: PPUSH
46860: LD_VAR 0 9
46864: PUSH
46865: LD_INT 2
46867: ARRAY
46868: PPUSH
46869: CALL_OW 488
46873: IFFALSE 46972
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46875: LD_ADDR_VAR 0 4
46879: PUSH
46880: LD_VAR 0 9
46884: PUSH
46885: LD_INT 1
46887: ARRAY
46888: PPUSH
46889: LD_VAR 0 9
46893: PUSH
46894: LD_INT 2
46896: ARRAY
46897: PPUSH
46898: CALL_OW 546
46902: ST_TO_ADDR
// if hex [ 1 ] then
46903: LD_VAR 0 4
46907: PUSH
46908: LD_INT 1
46910: ARRAY
46911: IFFALSE 46915
// continue ;
46913: GO 46803
// h := hex [ 2 ] ;
46915: LD_ADDR_VAR 0 13
46919: PUSH
46920: LD_VAR 0 4
46924: PUSH
46925: LD_INT 2
46927: ARRAY
46928: ST_TO_ADDR
// if h + 7 < height then
46929: LD_VAR 0 13
46933: PUSH
46934: LD_INT 7
46936: PLUS
46937: PUSH
46938: LD_VAR 0 15
46942: LESS
46943: IFFALSE 46972
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46945: LD_ADDR_VAR 0 18
46949: PUSH
46950: LD_INT 7
46952: PUSH
46953: LD_INT 28
46955: PUSH
46956: LD_INT 45
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: PUSH
46964: LD_VAR 0 12
46968: ARRAY
46969: ST_TO_ADDR
// break ;
46970: GO 46974
// end ; end ; end ;
46972: GO 46803
46974: POP
46975: POP
// end ; if not weapon then
46976: LD_VAR 0 18
46980: NOT
46981: IFFALSE 47041
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46983: LD_ADDR_VAR 0 5
46987: PUSH
46988: LD_VAR 0 5
46992: PUSH
46993: LD_INT 11
46995: PUSH
46996: LD_INT 30
46998: PUSH
46999: LD_INT 49
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: DIFF
47007: ST_TO_ADDR
// if not list then
47008: LD_VAR 0 5
47012: NOT
47013: IFFALSE 47017
// exit ;
47015: GO 47163
// weapon := list [ rand ( 1 , list ) ] ;
47017: LD_ADDR_VAR 0 18
47021: PUSH
47022: LD_VAR 0 5
47026: PUSH
47027: LD_INT 1
47029: PPUSH
47030: LD_VAR 0 5
47034: PPUSH
47035: CALL_OW 12
47039: ARRAY
47040: ST_TO_ADDR
// end ; if weapon then
47041: LD_VAR 0 18
47045: IFFALSE 47163
// begin tmp := CostOfWeapon ( weapon ) ;
47047: LD_ADDR_VAR 0 14
47051: PUSH
47052: LD_VAR 0 18
47056: PPUSH
47057: CALL_OW 451
47061: ST_TO_ADDR
// j := GetBase ( tower ) ;
47062: LD_ADDR_VAR 0 9
47066: PUSH
47067: LD_VAR 0 1
47071: PPUSH
47072: CALL_OW 274
47076: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
47077: LD_VAR 0 9
47081: PPUSH
47082: LD_INT 1
47084: PPUSH
47085: CALL_OW 275
47089: PUSH
47090: LD_VAR 0 14
47094: PUSH
47095: LD_INT 1
47097: ARRAY
47098: GREATEREQUAL
47099: IFFALSE 47125
47101: PUSH
47102: LD_VAR 0 9
47106: PPUSH
47107: LD_INT 2
47109: PPUSH
47110: CALL_OW 275
47114: PUSH
47115: LD_VAR 0 14
47119: PUSH
47120: LD_INT 2
47122: ARRAY
47123: GREATEREQUAL
47124: AND
47125: IFFALSE 47151
47127: PUSH
47128: LD_VAR 0 9
47132: PPUSH
47133: LD_INT 3
47135: PPUSH
47136: CALL_OW 275
47140: PUSH
47141: LD_VAR 0 14
47145: PUSH
47146: LD_INT 3
47148: ARRAY
47149: GREATEREQUAL
47150: AND
47151: IFFALSE 47163
// result := weapon ;
47153: LD_ADDR_VAR 0 3
47157: PUSH
47158: LD_VAR 0 18
47162: ST_TO_ADDR
// end ; end ;
47163: LD_VAR 0 3
47167: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47168: LD_INT 0
47170: PPUSH
47171: PPUSH
// result := true ;
47172: LD_ADDR_VAR 0 3
47176: PUSH
47177: LD_INT 1
47179: ST_TO_ADDR
// if array1 = array2 then
47180: LD_VAR 0 1
47184: PUSH
47185: LD_VAR 0 2
47189: EQUAL
47190: IFFALSE 47250
// begin for i = 1 to array1 do
47192: LD_ADDR_VAR 0 4
47196: PUSH
47197: DOUBLE
47198: LD_INT 1
47200: DEC
47201: ST_TO_ADDR
47202: LD_VAR 0 1
47206: PUSH
47207: FOR_TO
47208: IFFALSE 47246
// if array1 [ i ] <> array2 [ i ] then
47210: LD_VAR 0 1
47214: PUSH
47215: LD_VAR 0 4
47219: ARRAY
47220: PUSH
47221: LD_VAR 0 2
47225: PUSH
47226: LD_VAR 0 4
47230: ARRAY
47231: NONEQUAL
47232: IFFALSE 47244
// begin result := false ;
47234: LD_ADDR_VAR 0 3
47238: PUSH
47239: LD_INT 0
47241: ST_TO_ADDR
// break ;
47242: GO 47246
// end ;
47244: GO 47207
47246: POP
47247: POP
// end else
47248: GO 47258
// result := false ;
47250: LD_ADDR_VAR 0 3
47254: PUSH
47255: LD_INT 0
47257: ST_TO_ADDR
// end ;
47258: LD_VAR 0 3
47262: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
47263: LD_INT 0
47265: PPUSH
47266: PPUSH
// if not array1 or not array2 then
47267: LD_VAR 0 1
47271: NOT
47272: IFTRUE 47281
47274: PUSH
47275: LD_VAR 0 2
47279: NOT
47280: OR
47281: IFFALSE 47285
// exit ;
47283: GO 47349
// result := true ;
47285: LD_ADDR_VAR 0 3
47289: PUSH
47290: LD_INT 1
47292: ST_TO_ADDR
// for i = 1 to array1 do
47293: LD_ADDR_VAR 0 4
47297: PUSH
47298: DOUBLE
47299: LD_INT 1
47301: DEC
47302: ST_TO_ADDR
47303: LD_VAR 0 1
47307: PUSH
47308: FOR_TO
47309: IFFALSE 47347
// if array1 [ i ] <> array2 [ i ] then
47311: LD_VAR 0 1
47315: PUSH
47316: LD_VAR 0 4
47320: ARRAY
47321: PUSH
47322: LD_VAR 0 2
47326: PUSH
47327: LD_VAR 0 4
47331: ARRAY
47332: NONEQUAL
47333: IFFALSE 47345
// begin result := false ;
47335: LD_ADDR_VAR 0 3
47339: PUSH
47340: LD_INT 0
47342: ST_TO_ADDR
// break ;
47343: GO 47347
// end ;
47345: GO 47308
47347: POP
47348: POP
// end ;
47349: LD_VAR 0 3
47353: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47354: LD_INT 0
47356: PPUSH
47357: PPUSH
47358: PPUSH
// pom := GetBase ( fac ) ;
47359: LD_ADDR_VAR 0 5
47363: PUSH
47364: LD_VAR 0 1
47368: PPUSH
47369: CALL_OW 274
47373: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47374: LD_ADDR_VAR 0 4
47378: PUSH
47379: LD_VAR 0 2
47383: PUSH
47384: LD_INT 1
47386: ARRAY
47387: PPUSH
47388: LD_VAR 0 2
47392: PUSH
47393: LD_INT 2
47395: ARRAY
47396: PPUSH
47397: LD_VAR 0 2
47401: PUSH
47402: LD_INT 3
47404: ARRAY
47405: PPUSH
47406: LD_VAR 0 2
47410: PUSH
47411: LD_INT 4
47413: ARRAY
47414: PPUSH
47415: CALL_OW 449
47419: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47420: LD_ADDR_VAR 0 3
47424: PUSH
47425: LD_VAR 0 5
47429: PPUSH
47430: LD_INT 1
47432: PPUSH
47433: CALL_OW 275
47437: PUSH
47438: LD_VAR 0 4
47442: PUSH
47443: LD_INT 1
47445: ARRAY
47446: GREATEREQUAL
47447: IFFALSE 47473
47449: PUSH
47450: LD_VAR 0 5
47454: PPUSH
47455: LD_INT 2
47457: PPUSH
47458: CALL_OW 275
47462: PUSH
47463: LD_VAR 0 4
47467: PUSH
47468: LD_INT 2
47470: ARRAY
47471: GREATEREQUAL
47472: AND
47473: IFFALSE 47499
47475: PUSH
47476: LD_VAR 0 5
47480: PPUSH
47481: LD_INT 3
47483: PPUSH
47484: CALL_OW 275
47488: PUSH
47489: LD_VAR 0 4
47493: PUSH
47494: LD_INT 3
47496: ARRAY
47497: GREATEREQUAL
47498: AND
47499: ST_TO_ADDR
// end ;
47500: LD_VAR 0 3
47504: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47505: LD_INT 0
47507: PPUSH
47508: PPUSH
47509: PPUSH
47510: PPUSH
// pom := GetBase ( building ) ;
47511: LD_ADDR_VAR 0 3
47515: PUSH
47516: LD_VAR 0 1
47520: PPUSH
47521: CALL_OW 274
47525: ST_TO_ADDR
// if not pom then
47526: LD_VAR 0 3
47530: NOT
47531: IFFALSE 47535
// exit ;
47533: GO 47709
// btype := GetBType ( building ) ;
47535: LD_ADDR_VAR 0 5
47539: PUSH
47540: LD_VAR 0 1
47544: PPUSH
47545: CALL_OW 266
47549: ST_TO_ADDR
// if btype = b_armoury then
47550: LD_VAR 0 5
47554: PUSH
47555: LD_INT 4
47557: EQUAL
47558: IFFALSE 47568
// btype := b_barracks ;
47560: LD_ADDR_VAR 0 5
47564: PUSH
47565: LD_INT 5
47567: ST_TO_ADDR
// if btype = b_depot then
47568: LD_VAR 0 5
47572: PUSH
47573: LD_INT 0
47575: EQUAL
47576: IFFALSE 47586
// btype := b_warehouse ;
47578: LD_ADDR_VAR 0 5
47582: PUSH
47583: LD_INT 1
47585: ST_TO_ADDR
// if btype = b_workshop then
47586: LD_VAR 0 5
47590: PUSH
47591: LD_INT 2
47593: EQUAL
47594: IFFALSE 47604
// btype := b_factory ;
47596: LD_ADDR_VAR 0 5
47600: PUSH
47601: LD_INT 3
47603: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47604: LD_ADDR_VAR 0 4
47608: PUSH
47609: LD_VAR 0 5
47613: PPUSH
47614: LD_VAR 0 1
47618: PPUSH
47619: CALL_OW 248
47623: PPUSH
47624: CALL_OW 450
47628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47629: LD_ADDR_VAR 0 2
47633: PUSH
47634: LD_VAR 0 3
47638: PPUSH
47639: LD_INT 1
47641: PPUSH
47642: CALL_OW 275
47646: PUSH
47647: LD_VAR 0 4
47651: PUSH
47652: LD_INT 1
47654: ARRAY
47655: GREATEREQUAL
47656: IFFALSE 47682
47658: PUSH
47659: LD_VAR 0 3
47663: PPUSH
47664: LD_INT 2
47666: PPUSH
47667: CALL_OW 275
47671: PUSH
47672: LD_VAR 0 4
47676: PUSH
47677: LD_INT 2
47679: ARRAY
47680: GREATEREQUAL
47681: AND
47682: IFFALSE 47708
47684: PUSH
47685: LD_VAR 0 3
47689: PPUSH
47690: LD_INT 3
47692: PPUSH
47693: CALL_OW 275
47697: PUSH
47698: LD_VAR 0 4
47702: PUSH
47703: LD_INT 3
47705: ARRAY
47706: GREATEREQUAL
47707: AND
47708: ST_TO_ADDR
// end ;
47709: LD_VAR 0 2
47713: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47714: LD_INT 0
47716: PPUSH
47717: PPUSH
47718: PPUSH
// pom := GetBase ( building ) ;
47719: LD_ADDR_VAR 0 4
47723: PUSH
47724: LD_VAR 0 1
47728: PPUSH
47729: CALL_OW 274
47733: ST_TO_ADDR
// if not pom then
47734: LD_VAR 0 4
47738: NOT
47739: IFFALSE 47743
// exit ;
47741: GO 47848
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47743: LD_ADDR_VAR 0 5
47747: PUSH
47748: LD_VAR 0 2
47752: PPUSH
47753: LD_VAR 0 1
47757: PPUSH
47758: CALL_OW 248
47762: PPUSH
47763: CALL_OW 450
47767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47768: LD_ADDR_VAR 0 3
47772: PUSH
47773: LD_VAR 0 4
47777: PPUSH
47778: LD_INT 1
47780: PPUSH
47781: CALL_OW 275
47785: PUSH
47786: LD_VAR 0 5
47790: PUSH
47791: LD_INT 1
47793: ARRAY
47794: GREATEREQUAL
47795: IFFALSE 47821
47797: PUSH
47798: LD_VAR 0 4
47802: PPUSH
47803: LD_INT 2
47805: PPUSH
47806: CALL_OW 275
47810: PUSH
47811: LD_VAR 0 5
47815: PUSH
47816: LD_INT 2
47818: ARRAY
47819: GREATEREQUAL
47820: AND
47821: IFFALSE 47847
47823: PUSH
47824: LD_VAR 0 4
47828: PPUSH
47829: LD_INT 3
47831: PPUSH
47832: CALL_OW 275
47836: PUSH
47837: LD_VAR 0 5
47841: PUSH
47842: LD_INT 3
47844: ARRAY
47845: GREATEREQUAL
47846: AND
47847: ST_TO_ADDR
// end ;
47848: LD_VAR 0 3
47852: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47853: LD_INT 0
47855: PPUSH
47856: PPUSH
47857: PPUSH
47858: PPUSH
47859: PPUSH
47860: PPUSH
47861: PPUSH
47862: PPUSH
47863: PPUSH
47864: PPUSH
47865: PPUSH
// result := false ;
47866: LD_ADDR_VAR 0 8
47870: PUSH
47871: LD_INT 0
47873: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47874: LD_VAR 0 5
47878: NOT
47879: IFTRUE 47888
47881: PUSH
47882: LD_VAR 0 1
47886: NOT
47887: OR
47888: IFTRUE 47897
47890: PUSH
47891: LD_VAR 0 2
47895: NOT
47896: OR
47897: IFTRUE 47906
47899: PUSH
47900: LD_VAR 0 3
47904: NOT
47905: OR
47906: IFFALSE 47910
// exit ;
47908: GO 48736
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47910: LD_ADDR_VAR 0 14
47914: PUSH
47915: LD_VAR 0 1
47919: PPUSH
47920: LD_VAR 0 2
47924: PPUSH
47925: LD_VAR 0 3
47929: PPUSH
47930: LD_VAR 0 4
47934: PPUSH
47935: LD_VAR 0 5
47939: PUSH
47940: LD_INT 1
47942: ARRAY
47943: PPUSH
47944: CALL_OW 248
47948: PPUSH
47949: LD_INT 0
47951: PPUSH
47952: CALL 50017 0 6
47956: ST_TO_ADDR
// if not hexes then
47957: LD_VAR 0 14
47961: NOT
47962: IFFALSE 47966
// exit ;
47964: GO 48736
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47966: LD_ADDR_VAR 0 17
47970: PUSH
47971: LD_VAR 0 5
47975: PPUSH
47976: LD_INT 22
47978: PUSH
47979: LD_VAR 0 13
47983: PPUSH
47984: CALL_OW 255
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 30
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 30
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: LIST
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PPUSH
48025: CALL_OW 72
48029: ST_TO_ADDR
// for i = 1 to hexes do
48030: LD_ADDR_VAR 0 9
48034: PUSH
48035: DOUBLE
48036: LD_INT 1
48038: DEC
48039: ST_TO_ADDR
48040: LD_VAR 0 14
48044: PUSH
48045: FOR_TO
48046: IFFALSE 48734
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48048: LD_ADDR_VAR 0 13
48052: PUSH
48053: LD_VAR 0 14
48057: PUSH
48058: LD_VAR 0 9
48062: ARRAY
48063: PUSH
48064: LD_INT 1
48066: ARRAY
48067: PPUSH
48068: LD_VAR 0 14
48072: PUSH
48073: LD_VAR 0 9
48077: ARRAY
48078: PUSH
48079: LD_INT 2
48081: ARRAY
48082: PPUSH
48083: CALL_OW 428
48087: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
48088: LD_VAR 0 14
48092: PUSH
48093: LD_VAR 0 9
48097: ARRAY
48098: PUSH
48099: LD_INT 1
48101: ARRAY
48102: PPUSH
48103: LD_VAR 0 14
48107: PUSH
48108: LD_VAR 0 9
48112: ARRAY
48113: PUSH
48114: LD_INT 2
48116: ARRAY
48117: PPUSH
48118: CALL_OW 351
48122: IFTRUE 48161
48124: PUSH
48125: LD_VAR 0 14
48129: PUSH
48130: LD_VAR 0 9
48134: ARRAY
48135: PUSH
48136: LD_INT 1
48138: ARRAY
48139: PPUSH
48140: LD_VAR 0 14
48144: PUSH
48145: LD_VAR 0 9
48149: ARRAY
48150: PUSH
48151: LD_INT 2
48153: ARRAY
48154: PPUSH
48155: CALL_OW 488
48159: NOT
48160: OR
48161: IFTRUE 48178
48163: PUSH
48164: LD_VAR 0 13
48168: PPUSH
48169: CALL_OW 247
48173: PUSH
48174: LD_INT 3
48176: EQUAL
48177: OR
48178: IFFALSE 48184
// exit ;
48180: POP
48181: POP
48182: GO 48736
// if not tmp then
48184: LD_VAR 0 13
48188: NOT
48189: IFFALSE 48193
// continue ;
48191: GO 48045
// result := true ;
48193: LD_ADDR_VAR 0 8
48197: PUSH
48198: LD_INT 1
48200: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
48201: LD_VAR 0 6
48205: IFFALSE 48222
48207: PUSH
48208: LD_VAR 0 13
48212: PPUSH
48213: CALL_OW 247
48217: PUSH
48218: LD_INT 2
48220: EQUAL
48221: AND
48222: IFFALSE 48239
48224: PUSH
48225: LD_VAR 0 13
48229: PPUSH
48230: CALL_OW 263
48234: PUSH
48235: LD_INT 1
48237: EQUAL
48238: AND
48239: IFFALSE 48403
// begin if IsDrivenBy ( tmp ) then
48241: LD_VAR 0 13
48245: PPUSH
48246: CALL_OW 311
48250: IFFALSE 48254
// continue ;
48252: GO 48045
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
48254: LD_VAR 0 6
48258: PPUSH
48259: LD_INT 3
48261: PUSH
48262: LD_INT 60
48264: PUSH
48265: EMPTY
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: PUSH
48275: LD_INT 55
48277: PUSH
48278: EMPTY
48279: LIST
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PPUSH
48289: CALL_OW 72
48293: IFFALSE 48401
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
48295: LD_ADDR_VAR 0 18
48299: PUSH
48300: LD_VAR 0 6
48304: PPUSH
48305: LD_INT 3
48307: PUSH
48308: LD_INT 60
48310: PUSH
48311: EMPTY
48312: LIST
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 3
48320: PUSH
48321: LD_INT 55
48323: PUSH
48324: EMPTY
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PPUSH
48335: CALL_OW 72
48339: PUSH
48340: LD_INT 1
48342: ARRAY
48343: ST_TO_ADDR
// if IsInUnit ( driver ) then
48344: LD_VAR 0 18
48348: PPUSH
48349: CALL_OW 310
48353: IFFALSE 48364
// ComExit ( driver ) ;
48355: LD_VAR 0 18
48359: PPUSH
48360: CALL 74007 0 1
// AddComEnterUnit ( driver , tmp ) ;
48364: LD_VAR 0 18
48368: PPUSH
48369: LD_VAR 0 13
48373: PPUSH
48374: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
48378: LD_VAR 0 18
48382: PPUSH
48383: LD_VAR 0 7
48387: PPUSH
48388: CALL_OW 173
// AddComExitVehicle ( driver ) ;
48392: LD_VAR 0 18
48396: PPUSH
48397: CALL_OW 181
// end ; continue ;
48401: GO 48045
// end ; if not cleaners or not tmp in cleaners then
48403: LD_VAR 0 6
48407: NOT
48408: IFTRUE 48423
48410: PUSH
48411: LD_VAR 0 13
48415: PUSH
48416: LD_VAR 0 6
48420: IN
48421: NOT
48422: OR
48423: IFFALSE 48732
// begin if dep then
48425: LD_VAR 0 17
48429: IFFALSE 48565
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
48431: LD_ADDR_VAR 0 16
48435: PUSH
48436: LD_VAR 0 17
48440: PUSH
48441: LD_INT 1
48443: ARRAY
48444: PPUSH
48445: CALL_OW 250
48449: PPUSH
48450: LD_VAR 0 17
48454: PUSH
48455: LD_INT 1
48457: ARRAY
48458: PPUSH
48459: CALL_OW 254
48463: PPUSH
48464: LD_INT 5
48466: PPUSH
48467: CALL_OW 272
48471: PUSH
48472: LD_VAR 0 17
48476: PUSH
48477: LD_INT 1
48479: ARRAY
48480: PPUSH
48481: CALL_OW 251
48485: PPUSH
48486: LD_VAR 0 17
48490: PUSH
48491: LD_INT 1
48493: ARRAY
48494: PPUSH
48495: CALL_OW 254
48499: PPUSH
48500: LD_INT 5
48502: PPUSH
48503: CALL_OW 273
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48512: LD_VAR 0 16
48516: PUSH
48517: LD_INT 1
48519: ARRAY
48520: PPUSH
48521: LD_VAR 0 16
48525: PUSH
48526: LD_INT 2
48528: ARRAY
48529: PPUSH
48530: CALL_OW 488
48534: IFFALSE 48565
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48536: LD_VAR 0 13
48540: PPUSH
48541: LD_VAR 0 16
48545: PUSH
48546: LD_INT 1
48548: ARRAY
48549: PPUSH
48550: LD_VAR 0 16
48554: PUSH
48555: LD_INT 2
48557: ARRAY
48558: PPUSH
48559: CALL_OW 111
// continue ;
48563: GO 48045
// end ; end ; r := GetDir ( tmp ) ;
48565: LD_ADDR_VAR 0 15
48569: PUSH
48570: LD_VAR 0 13
48574: PPUSH
48575: CALL_OW 254
48579: ST_TO_ADDR
// if r = 5 then
48580: LD_VAR 0 15
48584: PUSH
48585: LD_INT 5
48587: EQUAL
48588: IFFALSE 48598
// r := 0 ;
48590: LD_ADDR_VAR 0 15
48594: PUSH
48595: LD_INT 0
48597: ST_TO_ADDR
// for j = r to 5 do
48598: LD_ADDR_VAR 0 10
48602: PUSH
48603: DOUBLE
48604: LD_VAR 0 15
48608: DEC
48609: ST_TO_ADDR
48610: LD_INT 5
48612: PUSH
48613: FOR_TO
48614: IFFALSE 48730
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48616: LD_ADDR_VAR 0 11
48620: PUSH
48621: LD_VAR 0 13
48625: PPUSH
48626: CALL_OW 250
48630: PPUSH
48631: LD_VAR 0 10
48635: PPUSH
48636: LD_INT 2
48638: PPUSH
48639: CALL_OW 272
48643: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48644: LD_ADDR_VAR 0 12
48648: PUSH
48649: LD_VAR 0 13
48653: PPUSH
48654: CALL_OW 251
48658: PPUSH
48659: LD_VAR 0 10
48663: PPUSH
48664: LD_INT 2
48666: PPUSH
48667: CALL_OW 273
48671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48672: LD_VAR 0 11
48676: PPUSH
48677: LD_VAR 0 12
48681: PPUSH
48682: CALL_OW 488
48686: IFFALSE 48705
48688: PUSH
48689: LD_VAR 0 11
48693: PPUSH
48694: LD_VAR 0 12
48698: PPUSH
48699: CALL_OW 428
48703: NOT
48704: AND
48705: IFFALSE 48728
// begin ComMoveXY ( tmp , _x , _y ) ;
48707: LD_VAR 0 13
48711: PPUSH
48712: LD_VAR 0 11
48716: PPUSH
48717: LD_VAR 0 12
48721: PPUSH
48722: CALL_OW 111
// break ;
48726: GO 48730
// end ; end ;
48728: GO 48613
48730: POP
48731: POP
// end ; end ;
48732: GO 48045
48734: POP
48735: POP
// end ;
48736: LD_VAR 0 8
48740: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48741: LD_INT 0
48743: PPUSH
// result := true ;
48744: LD_ADDR_VAR 0 3
48748: PUSH
48749: LD_INT 1
48751: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48752: LD_VAR 0 2
48756: PUSH
48757: LD_INT 24
48759: DOUBLE
48760: EQUAL
48761: IFTRUE 48771
48763: LD_INT 33
48765: DOUBLE
48766: EQUAL
48767: IFTRUE 48771
48769: GO 48796
48771: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48772: LD_ADDR_VAR 0 3
48776: PUSH
48777: LD_INT 32
48779: PPUSH
48780: LD_VAR 0 1
48784: PPUSH
48785: CALL_OW 321
48789: PUSH
48790: LD_INT 2
48792: EQUAL
48793: ST_TO_ADDR
48794: GO 49112
48796: LD_INT 20
48798: DOUBLE
48799: EQUAL
48800: IFTRUE 48804
48802: GO 48829
48804: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48805: LD_ADDR_VAR 0 3
48809: PUSH
48810: LD_INT 6
48812: PPUSH
48813: LD_VAR 0 1
48817: PPUSH
48818: CALL_OW 321
48822: PUSH
48823: LD_INT 2
48825: EQUAL
48826: ST_TO_ADDR
48827: GO 49112
48829: LD_INT 22
48831: DOUBLE
48832: EQUAL
48833: IFTRUE 48843
48835: LD_INT 36
48837: DOUBLE
48838: EQUAL
48839: IFTRUE 48843
48841: GO 48868
48843: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48844: LD_ADDR_VAR 0 3
48848: PUSH
48849: LD_INT 15
48851: PPUSH
48852: LD_VAR 0 1
48856: PPUSH
48857: CALL_OW 321
48861: PUSH
48862: LD_INT 2
48864: EQUAL
48865: ST_TO_ADDR
48866: GO 49112
48868: LD_INT 30
48870: DOUBLE
48871: EQUAL
48872: IFTRUE 48876
48874: GO 48901
48876: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48877: LD_ADDR_VAR 0 3
48881: PUSH
48882: LD_INT 20
48884: PPUSH
48885: LD_VAR 0 1
48889: PPUSH
48890: CALL_OW 321
48894: PUSH
48895: LD_INT 2
48897: EQUAL
48898: ST_TO_ADDR
48899: GO 49112
48901: LD_INT 28
48903: DOUBLE
48904: EQUAL
48905: IFTRUE 48915
48907: LD_INT 21
48909: DOUBLE
48910: EQUAL
48911: IFTRUE 48915
48913: GO 48940
48915: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48916: LD_ADDR_VAR 0 3
48920: PUSH
48921: LD_INT 21
48923: PPUSH
48924: LD_VAR 0 1
48928: PPUSH
48929: CALL_OW 321
48933: PUSH
48934: LD_INT 2
48936: EQUAL
48937: ST_TO_ADDR
48938: GO 49112
48940: LD_INT 16
48942: DOUBLE
48943: EQUAL
48944: IFTRUE 48948
48946: GO 48973
48948: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48949: LD_ADDR_VAR 0 3
48953: PUSH
48954: LD_INT 84
48956: PPUSH
48957: LD_VAR 0 1
48961: PPUSH
48962: CALL_OW 321
48966: PUSH
48967: LD_INT 2
48969: EQUAL
48970: ST_TO_ADDR
48971: GO 49112
48973: LD_INT 19
48975: DOUBLE
48976: EQUAL
48977: IFTRUE 48987
48979: LD_INT 23
48981: DOUBLE
48982: EQUAL
48983: IFTRUE 48987
48985: GO 49012
48987: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48988: LD_ADDR_VAR 0 3
48992: PUSH
48993: LD_INT 83
48995: PPUSH
48996: LD_VAR 0 1
49000: PPUSH
49001: CALL_OW 321
49005: PUSH
49006: LD_INT 2
49008: EQUAL
49009: ST_TO_ADDR
49010: GO 49112
49012: LD_INT 17
49014: DOUBLE
49015: EQUAL
49016: IFTRUE 49020
49018: GO 49045
49020: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
49021: LD_ADDR_VAR 0 3
49025: PUSH
49026: LD_INT 39
49028: PPUSH
49029: LD_VAR 0 1
49033: PPUSH
49034: CALL_OW 321
49038: PUSH
49039: LD_INT 2
49041: EQUAL
49042: ST_TO_ADDR
49043: GO 49112
49045: LD_INT 18
49047: DOUBLE
49048: EQUAL
49049: IFTRUE 49053
49051: GO 49078
49053: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
49054: LD_ADDR_VAR 0 3
49058: PUSH
49059: LD_INT 40
49061: PPUSH
49062: LD_VAR 0 1
49066: PPUSH
49067: CALL_OW 321
49071: PUSH
49072: LD_INT 2
49074: EQUAL
49075: ST_TO_ADDR
49076: GO 49112
49078: LD_INT 27
49080: DOUBLE
49081: EQUAL
49082: IFTRUE 49086
49084: GO 49111
49086: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
49087: LD_ADDR_VAR 0 3
49091: PUSH
49092: LD_INT 35
49094: PPUSH
49095: LD_VAR 0 1
49099: PPUSH
49100: CALL_OW 321
49104: PUSH
49105: LD_INT 2
49107: EQUAL
49108: ST_TO_ADDR
49109: GO 49112
49111: POP
// end ;
49112: LD_VAR 0 3
49116: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
49117: LD_INT 0
49119: PPUSH
49120: PPUSH
49121: PPUSH
49122: PPUSH
49123: PPUSH
49124: PPUSH
49125: PPUSH
49126: PPUSH
49127: PPUSH
49128: PPUSH
49129: PPUSH
// result := false ;
49130: LD_ADDR_VAR 0 6
49134: PUSH
49135: LD_INT 0
49137: ST_TO_ADDR
// if btype = b_depot then
49138: LD_VAR 0 2
49142: PUSH
49143: LD_INT 0
49145: EQUAL
49146: IFFALSE 49158
// begin result := true ;
49148: LD_ADDR_VAR 0 6
49152: PUSH
49153: LD_INT 1
49155: ST_TO_ADDR
// exit ;
49156: GO 50012
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
49158: LD_VAR 0 1
49162: NOT
49163: IFTRUE 49188
49165: PUSH
49166: LD_VAR 0 1
49170: PPUSH
49171: CALL_OW 266
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: IN
49186: NOT
49187: OR
49188: IFTRUE 49197
49190: PUSH
49191: LD_VAR 0 2
49195: NOT
49196: OR
49197: IFTRUE 49233
49199: PUSH
49200: LD_VAR 0 5
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 3
49216: PUSH
49217: LD_INT 4
49219: PUSH
49220: LD_INT 5
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: IN
49231: NOT
49232: OR
49233: IFTRUE 49252
49235: PUSH
49236: LD_VAR 0 3
49240: PPUSH
49241: LD_VAR 0 4
49245: PPUSH
49246: CALL_OW 488
49250: NOT
49251: OR
49252: IFFALSE 49256
// exit ;
49254: GO 50012
// side := GetSide ( depot ) ;
49256: LD_ADDR_VAR 0 9
49260: PUSH
49261: LD_VAR 0 1
49265: PPUSH
49266: CALL_OW 255
49270: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
49271: LD_VAR 0 9
49275: PPUSH
49276: LD_VAR 0 2
49280: PPUSH
49281: CALL 48741 0 2
49285: NOT
49286: IFFALSE 49290
// exit ;
49288: GO 50012
// pom := GetBase ( depot ) ;
49290: LD_ADDR_VAR 0 10
49294: PUSH
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 274
49304: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
49305: LD_ADDR_VAR 0 11
49309: PUSH
49310: LD_VAR 0 2
49314: PPUSH
49315: LD_VAR 0 1
49319: PPUSH
49320: CALL_OW 248
49324: PPUSH
49325: CALL_OW 450
49329: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
49330: LD_VAR 0 10
49334: PPUSH
49335: LD_INT 1
49337: PPUSH
49338: CALL_OW 275
49342: PUSH
49343: LD_VAR 0 11
49347: PUSH
49348: LD_INT 1
49350: ARRAY
49351: GREATEREQUAL
49352: IFFALSE 49378
49354: PUSH
49355: LD_VAR 0 10
49359: PPUSH
49360: LD_INT 2
49362: PPUSH
49363: CALL_OW 275
49367: PUSH
49368: LD_VAR 0 11
49372: PUSH
49373: LD_INT 2
49375: ARRAY
49376: GREATEREQUAL
49377: AND
49378: IFFALSE 49404
49380: PUSH
49381: LD_VAR 0 10
49385: PPUSH
49386: LD_INT 3
49388: PPUSH
49389: CALL_OW 275
49393: PUSH
49394: LD_VAR 0 11
49398: PUSH
49399: LD_INT 3
49401: ARRAY
49402: GREATEREQUAL
49403: AND
49404: NOT
49405: IFFALSE 49409
// exit ;
49407: GO 50012
// if GetBType ( depot ) = b_depot then
49409: LD_VAR 0 1
49413: PPUSH
49414: CALL_OW 266
49418: PUSH
49419: LD_INT 0
49421: EQUAL
49422: IFFALSE 49434
// dist := 28 else
49424: LD_ADDR_VAR 0 14
49428: PUSH
49429: LD_INT 28
49431: ST_TO_ADDR
49432: GO 49442
// dist := 36 ;
49434: LD_ADDR_VAR 0 14
49438: PUSH
49439: LD_INT 36
49441: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
49442: LD_VAR 0 1
49446: PPUSH
49447: LD_VAR 0 3
49451: PPUSH
49452: LD_VAR 0 4
49456: PPUSH
49457: CALL_OW 297
49461: PUSH
49462: LD_VAR 0 14
49466: GREATER
49467: IFFALSE 49471
// exit ;
49469: GO 50012
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
49471: LD_ADDR_VAR 0 12
49475: PUSH
49476: LD_VAR 0 2
49480: PPUSH
49481: LD_VAR 0 3
49485: PPUSH
49486: LD_VAR 0 4
49490: PPUSH
49491: LD_VAR 0 5
49495: PPUSH
49496: LD_VAR 0 1
49500: PPUSH
49501: CALL_OW 248
49505: PPUSH
49506: LD_INT 0
49508: PPUSH
49509: CALL 50017 0 6
49513: ST_TO_ADDR
// if not hexes then
49514: LD_VAR 0 12
49518: NOT
49519: IFFALSE 49523
// exit ;
49521: GO 50012
// hex := GetHexInfo ( x , y ) ;
49523: LD_ADDR_VAR 0 15
49527: PUSH
49528: LD_VAR 0 3
49532: PPUSH
49533: LD_VAR 0 4
49537: PPUSH
49538: CALL_OW 546
49542: ST_TO_ADDR
// if hex [ 1 ] then
49543: LD_VAR 0 15
49547: PUSH
49548: LD_INT 1
49550: ARRAY
49551: IFFALSE 49555
// exit ;
49553: GO 50012
// height := hex [ 2 ] ;
49555: LD_ADDR_VAR 0 13
49559: PUSH
49560: LD_VAR 0 15
49564: PUSH
49565: LD_INT 2
49567: ARRAY
49568: ST_TO_ADDR
// for i = 1 to hexes do
49569: LD_ADDR_VAR 0 7
49573: PUSH
49574: DOUBLE
49575: LD_INT 1
49577: DEC
49578: ST_TO_ADDR
49579: LD_VAR 0 12
49583: PUSH
49584: FOR_TO
49585: IFFALSE 49929
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49587: LD_VAR 0 12
49591: PUSH
49592: LD_VAR 0 7
49596: ARRAY
49597: PUSH
49598: LD_INT 1
49600: ARRAY
49601: PPUSH
49602: LD_VAR 0 12
49606: PUSH
49607: LD_VAR 0 7
49611: ARRAY
49612: PUSH
49613: LD_INT 2
49615: ARRAY
49616: PPUSH
49617: CALL_OW 488
49621: NOT
49622: IFTRUE 49664
49624: PUSH
49625: LD_VAR 0 12
49629: PUSH
49630: LD_VAR 0 7
49634: ARRAY
49635: PUSH
49636: LD_INT 1
49638: ARRAY
49639: PPUSH
49640: LD_VAR 0 12
49644: PUSH
49645: LD_VAR 0 7
49649: ARRAY
49650: PUSH
49651: LD_INT 2
49653: ARRAY
49654: PPUSH
49655: CALL_OW 428
49659: PUSH
49660: LD_INT 0
49662: GREATER
49663: OR
49664: IFTRUE 49702
49666: PUSH
49667: LD_VAR 0 12
49671: PUSH
49672: LD_VAR 0 7
49676: ARRAY
49677: PUSH
49678: LD_INT 1
49680: ARRAY
49681: PPUSH
49682: LD_VAR 0 12
49686: PUSH
49687: LD_VAR 0 7
49691: ARRAY
49692: PUSH
49693: LD_INT 2
49695: ARRAY
49696: PPUSH
49697: CALL_OW 351
49701: OR
49702: IFFALSE 49708
// exit ;
49704: POP
49705: POP
49706: GO 50012
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49708: LD_ADDR_VAR 0 8
49712: PUSH
49713: LD_VAR 0 12
49717: PUSH
49718: LD_VAR 0 7
49722: ARRAY
49723: PUSH
49724: LD_INT 1
49726: ARRAY
49727: PPUSH
49728: LD_VAR 0 12
49732: PUSH
49733: LD_VAR 0 7
49737: ARRAY
49738: PUSH
49739: LD_INT 2
49741: ARRAY
49742: PPUSH
49743: CALL_OW 546
49747: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49748: LD_VAR 0 8
49752: PUSH
49753: LD_INT 1
49755: ARRAY
49756: IFTRUE 49778
49758: PUSH
49759: LD_VAR 0 8
49763: PUSH
49764: LD_INT 2
49766: ARRAY
49767: PUSH
49768: LD_VAR 0 13
49772: PUSH
49773: LD_INT 2
49775: PLUS
49776: GREATER
49777: OR
49778: IFTRUE 49800
49780: PUSH
49781: LD_VAR 0 8
49785: PUSH
49786: LD_INT 2
49788: ARRAY
49789: PUSH
49790: LD_VAR 0 13
49794: PUSH
49795: LD_INT 2
49797: MINUS
49798: LESS
49799: OR
49800: IFTRUE 49868
49802: PUSH
49803: LD_VAR 0 8
49807: PUSH
49808: LD_INT 3
49810: ARRAY
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 8
49817: PUSH
49818: LD_INT 9
49820: PUSH
49821: LD_INT 10
49823: PUSH
49824: LD_INT 11
49826: PUSH
49827: LD_INT 12
49829: PUSH
49830: LD_INT 13
49832: PUSH
49833: LD_INT 16
49835: PUSH
49836: LD_INT 17
49838: PUSH
49839: LD_INT 18
49841: PUSH
49842: LD_INT 19
49844: PUSH
49845: LD_INT 20
49847: PUSH
49848: LD_INT 21
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: IN
49866: NOT
49867: OR
49868: IFTRUE 49881
49870: PUSH
49871: LD_VAR 0 8
49875: PUSH
49876: LD_INT 5
49878: ARRAY
49879: NOT
49880: OR
49881: IFTRUE 49921
49883: PUSH
49884: LD_VAR 0 8
49888: PUSH
49889: LD_INT 6
49891: ARRAY
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 7
49901: PUSH
49902: LD_INT 9
49904: PUSH
49905: LD_INT 10
49907: PUSH
49908: LD_INT 11
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: IN
49919: NOT
49920: OR
49921: IFFALSE 49927
// exit ;
49923: POP
49924: POP
49925: GO 50012
// end ;
49927: GO 49584
49929: POP
49930: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49931: LD_VAR 0 9
49935: PPUSH
49936: LD_VAR 0 3
49940: PPUSH
49941: LD_VAR 0 4
49945: PPUSH
49946: LD_INT 20
49948: PPUSH
49949: CALL 41831 0 4
49953: PUSH
49954: LD_INT 4
49956: ARRAY
49957: IFFALSE 49961
// exit ;
49959: GO 50012
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49961: LD_VAR 0 2
49965: PUSH
49966: LD_INT 29
49968: PUSH
49969: LD_INT 30
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: IN
49976: IFFALSE 50000
49978: PUSH
49979: LD_VAR 0 3
49983: PPUSH
49984: LD_VAR 0 4
49988: PPUSH
49989: LD_VAR 0 9
49993: PPUSH
49994: CALL_OW 440
49998: NOT
49999: AND
50000: IFFALSE 50004
// exit ;
50002: GO 50012
// result := true ;
50004: LD_ADDR_VAR 0 6
50008: PUSH
50009: LD_INT 1
50011: ST_TO_ADDR
// end ;
50012: LD_VAR 0 6
50016: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
50017: LD_INT 0
50019: PPUSH
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
50024: PPUSH
50025: PPUSH
50026: PPUSH
50027: PPUSH
50028: PPUSH
50029: PPUSH
50030: PPUSH
50031: PPUSH
50032: PPUSH
50033: PPUSH
50034: PPUSH
50035: PPUSH
50036: PPUSH
50037: PPUSH
50038: PPUSH
50039: PPUSH
50040: PPUSH
50041: PPUSH
50042: PPUSH
50043: PPUSH
50044: PPUSH
50045: PPUSH
50046: PPUSH
50047: PPUSH
50048: PPUSH
50049: PPUSH
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
50058: PPUSH
50059: PPUSH
50060: PPUSH
50061: PPUSH
50062: PPUSH
50063: PPUSH
50064: PPUSH
50065: PPUSH
50066: PPUSH
50067: PPUSH
50068: PPUSH
50069: PPUSH
50070: PPUSH
50071: PPUSH
50072: PPUSH
50073: PPUSH
50074: PPUSH
50075: PPUSH
50076: PPUSH
// result = [ ] ;
50077: LD_ADDR_VAR 0 7
50081: PUSH
50082: EMPTY
50083: ST_TO_ADDR
// temp_list = [ ] ;
50084: LD_ADDR_VAR 0 9
50088: PUSH
50089: EMPTY
50090: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
50091: LD_VAR 0 4
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: LD_INT 4
50110: PUSH
50111: LD_INT 5
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: IN
50122: NOT
50123: IFTRUE 50166
50125: PUSH
50126: LD_VAR 0 1
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: IN
50141: IFFALSE 50165
50143: PUSH
50144: LD_VAR 0 5
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: LD_INT 3
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: LIST
50162: IN
50163: NOT
50164: AND
50165: OR
50166: IFFALSE 50170
// exit ;
50168: GO 68569
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
50170: LD_VAR 0 1
50174: PUSH
50175: LD_INT 6
50177: PUSH
50178: LD_INT 7
50180: PUSH
50181: LD_INT 8
50183: PUSH
50184: LD_INT 13
50186: PUSH
50187: LD_INT 12
50189: PUSH
50190: LD_INT 15
50192: PUSH
50193: LD_INT 11
50195: PUSH
50196: LD_INT 14
50198: PUSH
50199: LD_INT 10
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: IN
50213: IFFALSE 50223
// btype = b_lab ;
50215: LD_ADDR_VAR 0 1
50219: PUSH
50220: LD_INT 6
50222: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
50223: LD_VAR 0 6
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: LD_INT 1
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: IN
50242: NOT
50243: IFTRUE 50311
50245: PUSH
50246: LD_VAR 0 1
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 3
50262: PUSH
50263: LD_INT 6
50265: PUSH
50266: LD_INT 36
50268: PUSH
50269: LD_INT 4
50271: PUSH
50272: LD_INT 5
50274: PUSH
50275: LD_INT 31
50277: PUSH
50278: LD_INT 32
50280: PUSH
50281: LD_INT 33
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: IN
50297: NOT
50298: IFFALSE 50310
50300: PUSH
50301: LD_VAR 0 6
50305: PUSH
50306: LD_INT 1
50308: EQUAL
50309: AND
50310: OR
50311: IFTRUE 50343
50313: PUSH
50314: LD_VAR 0 1
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: IN
50329: NOT
50330: IFFALSE 50342
50332: PUSH
50333: LD_VAR 0 6
50337: PUSH
50338: LD_INT 2
50340: EQUAL
50341: AND
50342: OR
50343: IFFALSE 50353
// mode = 0 ;
50345: LD_ADDR_VAR 0 6
50349: PUSH
50350: LD_INT 0
50352: ST_TO_ADDR
// case mode of 0 :
50353: LD_VAR 0 6
50357: PUSH
50358: LD_INT 0
50360: DOUBLE
50361: EQUAL
50362: IFTRUE 50366
50364: GO 61819
50366: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50367: LD_ADDR_VAR 0 11
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: LD_INT 1
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 3
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 0
50523: PUSH
50524: LD_INT 3
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 1
50533: NEG
50534: PUSH
50535: LD_INT 2
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50560: LD_ADDR_VAR 0 12
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 1
50618: NEG
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 1
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 2
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: NEG
50684: PUSH
50685: LD_INT 0
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: NEG
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 2
50706: NEG
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: NEG
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50756: LD_ADDR_VAR 0 13
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: LD_INT 0
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: NEG
50838: PUSH
50839: LD_INT 2
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 2
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: LD_INT 3
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 3
50915: NEG
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 3
50927: NEG
50928: PUSH
50929: LD_INT 3
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50955: LD_ADDR_VAR 0 14
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: NEG
51102: PUSH
51103: LD_INT 3
51105: NEG
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: LD_INT 3
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 2
51127: NEG
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51151: LD_ADDR_VAR 0 15
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: NEG
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: LD_INT 1
51220: NEG
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 1
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51344: LD_ADDR_VAR 0 16
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: LD_INT 1
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 2
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 1
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 2
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 3
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 3
51501: PUSH
51502: LD_INT 3
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 2
51511: PUSH
51512: LD_INT 3
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51537: LD_ADDR_VAR 0 17
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 0
51630: PUSH
51631: LD_INT 2
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 1
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 2
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: LD_INT 1
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: LD_INT 1
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 2
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51767: LD_ADDR_VAR 0 18
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 0
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 1
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 1
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 2
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: NEG
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 2
51966: NEG
51967: PUSH
51968: LD_INT 2
51970: NEG
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51997: LD_ADDR_VAR 0 19
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 1
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 0
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 1
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 0
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 2
52196: NEG
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52227: LD_ADDR_VAR 0 20
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52457: LD_ADDR_VAR 0 21
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52687: LD_ADDR_VAR 0 22
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52917: LD_ADDR_VAR 0 23
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: NEG
53129: PUSH
53130: LD_INT 3
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: NEG
53141: PUSH
53142: LD_INT 3
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: LD_INT 1
53166: NEG
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
53197: LD_ADDR_VAR 0 24
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
53473: LD_ADDR_VAR 0 25
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: LD_INT 1
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 3
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53747: LD_ADDR_VAR 0 26
53751: PUSH
53752: LD_INT 0
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: LD_INT 1
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 1
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 1
53805: NEG
53806: PUSH
53807: LD_INT 0
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 1
53828: NEG
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 2
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 2
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: LD_INT 1
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 2
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: NEG
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 2
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 2
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 3
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54023: LD_ADDR_VAR 0 27
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 1
54043: NEG
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 2
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: PUSH
54159: LD_INT 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: PUSH
54169: LD_INT 2
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: LD_INT 2
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 1
54188: NEG
54189: PUSH
54190: LD_INT 1
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 2
54210: NEG
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 2
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 3
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: LD_INT 2
54272: NEG
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54303: LD_ADDR_VAR 0 28
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 0
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: NEG
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 2
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 2
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 1
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 2
54479: NEG
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 2
54490: NEG
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 2
54502: NEG
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 3
54538: NEG
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54585: LD_ADDR_VAR 0 29
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: LD_INT 1
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 1
54643: NEG
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: LD_INT 2
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 2
54681: NEG
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 1
54689: PUSH
54690: LD_INT 1
54692: NEG
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 2
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 2
54775: NEG
54776: PUSH
54777: LD_INT 3
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 2
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 3
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54864: LD_ADDR_VAR 0 30
54868: PUSH
54869: LD_INT 0
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 1
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 1
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 1
54945: NEG
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: LD_INT 2
54960: NEG
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 2
54979: PUSH
54980: LD_INT 0
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: PUSH
55000: LD_INT 2
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 2
55030: NEG
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: NEG
55042: PUSH
55043: LD_INT 1
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: LD_INT 3
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: LD_INT 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 3
55107: NEG
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55142: LD_ADDR_VAR 0 31
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 1
55215: NEG
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 2
55227: NEG
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 2
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 1
55296: NEG
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 2
55307: NEG
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 2
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 3
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 3
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: LD_INT 2
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: LD_INT 2
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55420: LD_ADDR_VAR 0 32
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: LD_INT 0
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: PUSH
55459: LD_INT 1
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 0
55468: PUSH
55469: LD_INT 1
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: LD_INT 2
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: LD_INT 1
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: LD_INT 3
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: PUSH
55643: LD_INT 3
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 2
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 3
55663: NEG
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55698: LD_ADDR_VAR 0 33
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 0
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 1
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 0
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 0
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 1
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: LD_INT 1
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 2
55853: NEG
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: NEG
55865: PUSH
55866: LD_INT 1
55868: NEG
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: NEG
55877: PUSH
55878: LD_INT 2
55880: NEG
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: LD_INT 3
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 3
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: LD_INT 2
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55977: LD_ADDR_VAR 0 34
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 0
56070: PUSH
56071: LD_INT 2
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56257: LD_ADDR_VAR 0 35
56261: PUSH
56262: LD_INT 0
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56369: LD_ADDR_VAR 0 36
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: LD_INT 0
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 1
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56481: LD_ADDR_VAR 0 37
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 0
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 1
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 1
56539: NEG
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 1
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56593: LD_ADDR_VAR 0 38
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 1
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: NEG
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56705: LD_ADDR_VAR 0 39
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56817: LD_ADDR_VAR 0 40
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: LD_INT 1
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56929: LD_ADDR_VAR 0 41
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 1
56967: PUSH
56968: LD_INT 1
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: PUSH
57044: LD_INT 1
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 2
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: LD_INT 2
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 1
57073: NEG
57074: PUSH
57075: LD_INT 1
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: NEG
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 3
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 3
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: LD_INT 3
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 2
57192: NEG
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 3
57203: NEG
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 3
57226: NEG
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 3
57238: NEG
57239: PUSH
57240: LD_INT 3
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57279: LD_ADDR_VAR 0 42
57283: PUSH
57284: LD_INT 0
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 0
57296: PUSH
57297: LD_INT 1
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 1
57337: NEG
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: NEG
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 1
57360: NEG
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: NEG
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: LD_INT 1
57386: NEG
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 2
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: LD_INT 1
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: LD_INT 1
57449: NEG
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: PUSH
57455: LD_INT 2
57457: NEG
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 2
57469: NEG
57470: PUSH
57471: LD_INT 3
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 3
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 3
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 3
57515: PUSH
57516: LD_INT 2
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: PUSH
57536: LD_INT 3
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: NEG
57589: PUSH
57590: LD_INT 3
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57629: LD_ADDR_VAR 0 43
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: LD_INT 0
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 1
57657: PUSH
57658: LD_INT 0
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 1
57667: PUSH
57668: LD_INT 1
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: LD_INT 1
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 1
57687: NEG
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 2
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 1
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: EMPTY
57759: LIST
57760: LIST
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: LD_INT 2
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: LD_INT 1
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: NEG
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: EMPTY
57813: LIST
57814: LIST
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: LD_INT 3
57822: NEG
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 0
57830: PUSH
57831: LD_INT 3
57833: NEG
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 2
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 3
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 3
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 3
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 2
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 2
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 3
57925: NEG
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 3
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57977: LD_ADDR_VAR 0 44
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 0
57994: PUSH
57995: LD_INT 1
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 1
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 1
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 1
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 1
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: LD_INT 2
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: PUSH
58082: LD_INT 0
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: LD_INT 2
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 1
58111: PUSH
58112: LD_INT 2
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: LD_INT 1
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: LD_INT 0
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: NEG
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 2
58155: NEG
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 2
58167: NEG
58168: PUSH
58169: LD_INT 3
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 3
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 3
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 3
58210: PUSH
58211: LD_INT 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 3
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 3
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 3
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 3
58286: NEG
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58327: LD_ADDR_VAR 0 45
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 0
58420: PUSH
58421: LD_INT 2
58423: NEG
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 1
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 2
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 1
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 2
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 0
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: PUSH
58594: LD_INT 3
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 3
58624: NEG
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 3
58636: NEG
58637: PUSH
58638: LD_INT 3
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58677: LD_ADDR_VAR 0 46
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: LD_INT 0
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 2
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: LD_INT 2
58773: NEG
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 0
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 3
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 3
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 2
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 3
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 3
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 2
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59025: LD_ADDR_VAR 0 47
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: EMPTY
59037: LIST
59038: LIST
59039: PUSH
59040: LD_INT 0
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: LD_INT 0
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: LD_INT 1
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 1
59083: NEG
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: NEG
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: NEG
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 2
59152: NEG
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59176: LD_ADDR_VAR 0 48
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: NEG
59235: PUSH
59236: LD_INT 0
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 1
59245: NEG
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: NEG
59258: PUSH
59259: LD_INT 2
59261: NEG
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 2
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 1
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: LD_INT 0
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: LD_INT 1
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: LIST
59313: LIST
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: LIST
59319: LIST
59320: LIST
59321: LIST
59322: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59323: LD_ADDR_VAR 0 49
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 1
59343: NEG
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: PUSH
59352: LD_INT 0
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: NEG
59382: PUSH
59383: LD_INT 0
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: LD_INT 1
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: LD_INT 1
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 2
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 1
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59467: LD_ADDR_VAR 0 50
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 0
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 1
59525: NEG
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 2
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: NEG
59589: PUSH
59590: LD_INT 1
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59611: LD_ADDR_VAR 0 51
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 0
59628: PUSH
59629: LD_INT 1
59631: NEG
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 1
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 1
59680: NEG
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: LD_INT 1
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59758: LD_ADDR_VAR 0 52
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 0
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: EMPTY
59781: LIST
59782: LIST
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: LD_INT 1
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: NEG
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: NEG
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59909: LD_ADDR_VAR 0 53
59913: PUSH
59914: LD_INT 0
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 1
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 1
59990: NEG
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: LD_INT 2
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 1
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 0
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 2
60034: PUSH
60035: LD_INT 1
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 2
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 0
60064: PUSH
60065: LD_INT 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 1
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 0
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 1
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 2
60108: NEG
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60139: LD_ADDR_VAR 0 54
60143: PUSH
60144: LD_INT 0
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 0
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 1
60220: NEG
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 2
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 2
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 2
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 0
60294: PUSH
60295: LD_INT 2
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: NEG
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: NEG
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 2
60338: NEG
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: LIST
60366: LIST
60367: LIST
60368: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60369: LD_ADDR_VAR 0 55
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 0
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 1
60389: NEG
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 0
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: LD_INT 1
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 0
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: LD_INT 1
60438: NEG
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 2
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: LD_INT 2
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 1
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 2
60484: PUSH
60485: LD_INT 0
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 2
60504: PUSH
60505: LD_INT 2
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: LD_INT 2
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 2
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: NEG
60535: PUSH
60536: LD_INT 1
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 2
60545: NEG
60546: PUSH
60547: LD_INT 0
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 2
60568: NEG
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60599: LD_ADDR_VAR 0 56
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 0
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: PUSH
60628: LD_INT 0
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: LD_INT 1
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: NEG
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 2
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 2
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 2
60734: PUSH
60735: LD_INT 2
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 2
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 2
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 1
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 2
60775: NEG
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: NEG
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 2
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60829: LD_ADDR_VAR 0 57
60833: PUSH
60834: LD_INT 0
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: PUSH
60868: LD_INT 1
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: NEG
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 2
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 2
60925: NEG
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 1
60936: NEG
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: PUSH
60965: LD_INT 2
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 1
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 0
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 1
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: LD_INT 0
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: LD_INT 1
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 2
61028: NEG
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61059: LD_ADDR_VAR 0 58
61063: PUSH
61064: LD_INT 0
61066: PUSH
61067: LD_INT 0
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 1
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 1
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: PUSH
61098: LD_INT 1
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 1
61117: NEG
61118: PUSH
61119: LD_INT 0
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 1
61128: NEG
61129: PUSH
61130: LD_INT 1
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: LD_INT 2
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: LD_INT 2
61155: NEG
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 2
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 2
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 1
61224: NEG
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: NEG
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: NEG
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: NEG
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61289: LD_ADDR_VAR 0 59
61293: PUSH
61294: LD_INT 0
61296: PUSH
61297: LD_INT 0
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 1
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 1
61347: NEG
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61377: LD_ADDR_VAR 0 60
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 0
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 1
61397: NEG
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 0
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 0
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: NEG
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 1
61446: NEG
61447: PUSH
61448: LD_INT 1
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61465: LD_ADDR_VAR 0 61
61469: PUSH
61470: LD_INT 0
61472: PUSH
61473: LD_INT 0
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 0
61482: PUSH
61483: LD_INT 1
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 1
61493: PUSH
61494: LD_INT 0
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 1
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: LD_INT 0
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61553: LD_ADDR_VAR 0 62
61557: PUSH
61558: LD_INT 0
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: LD_INT 0
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: LD_INT 0
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 1
61622: NEG
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61641: LD_ADDR_VAR 0 63
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 0
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 1
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: PUSH
61680: LD_INT 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: LD_INT 1
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: NEG
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: LD_INT 1
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61729: LD_ADDR_VAR 0 64
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 0
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: PUSH
61758: LD_INT 0
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 1
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 0
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: LD_INT 0
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: LD_INT 1
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: ST_TO_ADDR
// end ; 1 :
61817: GO 67714
61819: LD_INT 1
61821: DOUBLE
61822: EQUAL
61823: IFTRUE 61827
61825: GO 64450
61827: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61828: LD_ADDR_VAR 0 11
61832: PUSH
61833: LD_INT 1
61835: NEG
61836: PUSH
61837: LD_INT 3
61839: NEG
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 1
61858: PUSH
61859: LD_INT 2
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: LIST
61871: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61872: LD_ADDR_VAR 0 12
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 3
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: PUSH
61901: LD_INT 1
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61913: LD_ADDR_VAR 0 13
61917: PUSH
61918: LD_INT 3
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 3
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: EMPTY
61945: LIST
61946: LIST
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: LIST
61952: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61953: LD_ADDR_VAR 0 14
61957: PUSH
61958: LD_INT 1
61960: PUSH
61961: LD_INT 3
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: LD_INT 3
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: LD_INT 2
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: LIST
61993: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61994: LD_ADDR_VAR 0 15
61998: PUSH
61999: LD_INT 2
62001: NEG
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 3
62012: NEG
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62038: LD_ADDR_VAR 0 16
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: LD_INT 2
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 3
62069: NEG
62070: PUSH
62071: LD_INT 3
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62084: LD_ADDR_VAR 0 17
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: LD_INT 3
62095: NEG
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 0
62103: PUSH
62104: LD_INT 3
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 2
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62128: LD_ADDR_VAR 0 18
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: PUSH
62147: LD_INT 0
62149: PUSH
62150: EMPTY
62151: LIST
62152: LIST
62153: PUSH
62154: LD_INT 3
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: LIST
62168: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62169: LD_ADDR_VAR 0 19
62173: PUSH
62174: LD_INT 3
62176: PUSH
62177: LD_INT 2
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 3
62186: PUSH
62187: LD_INT 3
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: PUSH
62197: LD_INT 3
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62209: LD_ADDR_VAR 0 20
62213: PUSH
62214: LD_INT 1
62216: PUSH
62217: LD_INT 3
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 3
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 2
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62250: LD_ADDR_VAR 0 21
62254: PUSH
62255: LD_INT 2
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 3
62268: NEG
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 3
62279: NEG
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: LIST
62293: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62294: LD_ADDR_VAR 0 22
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: LD_INT 3
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 3
62313: NEG
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 3
62325: NEG
62326: PUSH
62327: LD_INT 3
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
62340: LD_ADDR_VAR 0 23
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: LD_INT 3
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 4
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 1
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
62384: LD_ADDR_VAR 0 24
62388: PUSH
62389: LD_INT 3
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: LD_INT 1
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 4
62412: PUSH
62413: LD_INT 1
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: LIST
62424: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
62425: LD_ADDR_VAR 0 25
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 4
62442: PUSH
62443: LD_INT 3
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 3
62452: PUSH
62453: LD_INT 4
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: LIST
62464: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
62465: LD_ADDR_VAR 0 26
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 3
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 4
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 3
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: LIST
62505: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
62506: LD_ADDR_VAR 0 27
62510: PUSH
62511: LD_INT 3
62513: NEG
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 3
62524: NEG
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 4
62535: NEG
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62550: LD_ADDR_VAR 0 28
62554: PUSH
62555: LD_INT 3
62557: NEG
62558: PUSH
62559: LD_INT 3
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 3
62569: NEG
62570: PUSH
62571: LD_INT 4
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 4
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62596: LD_ADDR_VAR 0 29
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 3
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 0
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 1
62637: NEG
62638: PUSH
62639: LD_INT 4
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 0
62649: PUSH
62650: LD_INT 4
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: LD_INT 3
62663: NEG
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: LD_INT 5
62675: NEG
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 5
62686: NEG
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 4
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: LD_INT 6
62709: NEG
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 0
62717: PUSH
62718: LD_INT 6
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: LD_INT 5
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62751: LD_ADDR_VAR 0 30
62755: PUSH
62756: LD_INT 2
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 3
62779: PUSH
62780: LD_INT 1
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 3
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 4
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 4
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 4
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 5
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 5
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 5
62851: PUSH
62852: LD_INT 1
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 6
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 6
62872: PUSH
62873: LD_INT 1
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62894: LD_ADDR_VAR 0 31
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 2
62921: PUSH
62922: LD_INT 3
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 4
62931: PUSH
62932: LD_INT 3
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 4
62941: PUSH
62942: LD_INT 4
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 3
62951: PUSH
62952: LD_INT 4
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 5
62961: PUSH
62962: LD_INT 4
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 5
62971: PUSH
62972: LD_INT 5
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 4
62981: PUSH
62982: LD_INT 5
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 6
62991: PUSH
62992: LD_INT 5
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 6
63001: PUSH
63002: LD_INT 6
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 5
63011: PUSH
63012: LD_INT 6
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
63033: LD_ADDR_VAR 0 32
63037: PUSH
63038: LD_INT 1
63040: PUSH
63041: LD_INT 3
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: LD_INT 3
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: NEG
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 1
63071: PUSH
63072: LD_INT 4
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 0
63081: PUSH
63082: LD_INT 4
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: LD_INT 3
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: LD_INT 5
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 5
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 4
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 6
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 6
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 5
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
63176: LD_ADDR_VAR 0 33
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 3
63194: NEG
63195: PUSH
63196: LD_INT 0
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 3
63205: NEG
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: NEG
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 4
63228: NEG
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 4
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 4
63251: NEG
63252: PUSH
63253: LD_INT 1
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 5
63262: NEG
63263: PUSH
63264: LD_INT 0
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PUSH
63271: LD_INT 5
63273: NEG
63274: PUSH
63275: LD_INT 1
63277: NEG
63278: PUSH
63279: EMPTY
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 5
63285: NEG
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 6
63296: NEG
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 6
63307: NEG
63308: PUSH
63309: LD_INT 1
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
63331: LD_ADDR_VAR 0 34
63335: PUSH
63336: LD_INT 2
63338: NEG
63339: PUSH
63340: LD_INT 3
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 3
63350: NEG
63351: PUSH
63352: LD_INT 2
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 3
63362: NEG
63363: PUSH
63364: LD_INT 3
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 3
63374: NEG
63375: PUSH
63376: LD_INT 4
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 4
63386: NEG
63387: PUSH
63388: LD_INT 3
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 4
63398: NEG
63399: PUSH
63400: LD_INT 4
63402: NEG
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 4
63410: NEG
63411: PUSH
63412: LD_INT 5
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 5
63422: NEG
63423: PUSH
63424: LD_INT 4
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 5
63434: NEG
63435: PUSH
63436: LD_INT 5
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 5
63446: NEG
63447: PUSH
63448: LD_INT 6
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 6
63458: NEG
63459: PUSH
63460: LD_INT 5
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 6
63470: NEG
63471: PUSH
63472: LD_INT 6
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
63494: LD_ADDR_VAR 0 41
63498: PUSH
63499: LD_INT 0
63501: PUSH
63502: LD_INT 2
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: LD_INT 3
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 2
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
63538: LD_ADDR_VAR 0 42
63542: PUSH
63543: LD_INT 2
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: LD_INT 1
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: LIST
63578: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63579: LD_ADDR_VAR 0 43
63583: PUSH
63584: LD_INT 2
63586: PUSH
63587: LD_INT 2
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: LD_INT 2
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: LD_INT 3
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: LIST
63618: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63619: LD_ADDR_VAR 0 44
63623: PUSH
63624: LD_INT 0
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: EMPTY
63631: LIST
63632: LIST
63633: PUSH
63634: LD_INT 1
63636: PUSH
63637: LD_INT 3
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: LIST
63659: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63660: LD_ADDR_VAR 0 45
63664: PUSH
63665: LD_INT 2
63667: NEG
63668: PUSH
63669: LD_INT 0
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 3
63689: NEG
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: EMPTY
63696: LIST
63697: LIST
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: LIST
63703: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63704: LD_ADDR_VAR 0 46
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 2
63723: NEG
63724: PUSH
63725: LD_INT 3
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: LD_INT 2
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: LIST
63749: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63750: LD_ADDR_VAR 0 47
63754: PUSH
63755: LD_INT 2
63757: NEG
63758: PUSH
63759: LD_INT 3
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: NEG
63770: PUSH
63771: LD_INT 3
63773: NEG
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63783: LD_ADDR_VAR 0 48
63787: PUSH
63788: LD_INT 1
63790: PUSH
63791: LD_INT 2
63793: NEG
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 2
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63814: LD_ADDR_VAR 0 49
63818: PUSH
63819: LD_INT 3
63821: PUSH
63822: LD_INT 1
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 3
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63843: LD_ADDR_VAR 0 50
63847: PUSH
63848: LD_INT 2
63850: PUSH
63851: LD_INT 3
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 3
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63872: LD_ADDR_VAR 0 51
63876: PUSH
63877: LD_INT 1
63879: NEG
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 2
63890: NEG
63891: PUSH
63892: LD_INT 1
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63903: LD_ADDR_VAR 0 52
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: LD_INT 1
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 3
63922: NEG
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63936: LD_ADDR_VAR 0 53
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: LD_INT 3
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: PUSH
63967: LD_INT 2
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: EMPTY
63976: LIST
63977: LIST
63978: LIST
63979: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63980: LD_ADDR_VAR 0 54
63984: PUSH
63985: LD_INT 2
63987: PUSH
63988: LD_INT 1
63990: NEG
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 3
63998: PUSH
63999: LD_INT 0
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 3
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64021: LD_ADDR_VAR 0 55
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: LD_INT 2
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: PUSH
64039: LD_INT 3
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 2
64048: PUSH
64049: LD_INT 3
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64061: LD_ADDR_VAR 0 56
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: LD_INT 2
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64102: LD_ADDR_VAR 0 57
64106: PUSH
64107: LD_INT 2
64109: NEG
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 3
64120: NEG
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 3
64131: NEG
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: LIST
64145: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64146: LD_ADDR_VAR 0 58
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: LD_INT 3
64157: NEG
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: LD_INT 2
64169: NEG
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: LD_INT 3
64181: NEG
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: LIST
64191: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
64192: LD_ADDR_VAR 0 59
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: LD_INT 2
64203: NEG
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 0
64211: PUSH
64212: LD_INT 2
64214: NEG
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 1
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: LIST
64235: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64236: LD_ADDR_VAR 0 60
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: LD_INT 0
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 2
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64277: LD_ADDR_VAR 0 61
64281: PUSH
64282: LD_INT 2
64284: PUSH
64285: LD_INT 1
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64317: LD_ADDR_VAR 0 62
64321: PUSH
64322: LD_INT 1
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: NEG
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: LIST
64357: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64358: LD_ADDR_VAR 0 63
64362: PUSH
64363: LD_INT 1
64365: NEG
64366: PUSH
64367: LD_INT 1
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 2
64376: NEG
64377: PUSH
64378: LD_INT 0
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 2
64387: NEG
64388: PUSH
64389: LD_INT 1
64391: NEG
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: LIST
64401: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64402: LD_ADDR_VAR 0 64
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: LD_INT 2
64413: NEG
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: PUSH
64419: LD_INT 2
64421: NEG
64422: PUSH
64423: LD_INT 1
64425: NEG
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 2
64433: NEG
64434: PUSH
64435: LD_INT 2
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: LIST
64447: ST_TO_ADDR
// end ; 2 :
64448: GO 67714
64450: LD_INT 2
64452: DOUBLE
64453: EQUAL
64454: IFTRUE 64458
64456: GO 67713
64458: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
64459: LD_ADDR_VAR 0 29
64463: PUSH
64464: LD_INT 4
64466: PUSH
64467: LD_INT 0
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 4
64476: PUSH
64477: LD_INT 1
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 5
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 5
64497: PUSH
64498: LD_INT 1
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 4
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 3
64538: PUSH
64539: LD_INT 2
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 5
64549: PUSH
64550: LD_INT 2
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 3
64559: PUSH
64560: LD_INT 3
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 3
64569: PUSH
64570: LD_INT 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 4
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_INT 4
64589: PUSH
64590: LD_INT 4
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: PUSH
64597: LD_INT 3
64599: PUSH
64600: LD_INT 4
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: LD_INT 3
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 2
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 4
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 2
64639: PUSH
64640: LD_INT 4
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 0
64649: PUSH
64650: LD_INT 4
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 0
64659: PUSH
64660: LD_INT 3
64662: PUSH
64663: EMPTY
64664: LIST
64665: LIST
64666: PUSH
64667: LD_INT 1
64669: PUSH
64670: LD_INT 4
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: LD_INT 5
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: LD_INT 5
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: LD_INT 4
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 1
64710: NEG
64711: PUSH
64712: LD_INT 3
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: LD_INT 5
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: LD_INT 3
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 3
64742: NEG
64743: PUSH
64744: LD_INT 0
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 3
64753: NEG
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 2
64776: NEG
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: NEG
64788: PUSH
64789: LD_INT 1
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 4
64798: NEG
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: LD_INT 4
64809: NEG
64810: PUSH
64811: LD_INT 1
64813: NEG
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 4
64821: NEG
64822: PUSH
64823: LD_INT 2
64825: NEG
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 2
64833: NEG
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 4
64844: NEG
64845: PUSH
64846: LD_INT 4
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 4
64856: NEG
64857: PUSH
64858: LD_INT 5
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 3
64868: NEG
64869: PUSH
64870: LD_INT 4
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: NEG
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 4
64892: NEG
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: EMPTY
64899: LIST
64900: LIST
64901: PUSH
64902: LD_INT 5
64904: NEG
64905: PUSH
64906: LD_INT 4
64908: NEG
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 5
64916: NEG
64917: PUSH
64918: LD_INT 5
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 3
64928: NEG
64929: PUSH
64930: LD_INT 5
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 5
64940: NEG
64941: PUSH
64942: LD_INT 3
64944: NEG
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64997: LD_ADDR_VAR 0 30
65001: PUSH
65002: LD_INT 4
65004: PUSH
65005: LD_INT 4
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 4
65014: PUSH
65015: LD_INT 3
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 5
65024: PUSH
65025: LD_INT 4
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 5
65034: PUSH
65035: LD_INT 5
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 4
65044: PUSH
65045: LD_INT 5
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 3
65054: PUSH
65055: LD_INT 4
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: LD_INT 3
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 5
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 3
65084: PUSH
65085: LD_INT 5
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: LD_INT 3
65097: PUSH
65098: EMPTY
65099: LIST
65100: LIST
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: LD_INT 2
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: PUSH
65125: LD_INT 4
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 0
65134: PUSH
65135: LD_INT 4
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 1
65144: NEG
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 1
65155: NEG
65156: PUSH
65157: LD_INT 2
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: LD_INT 4
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 2
65176: NEG
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 4
65187: NEG
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 4
65198: NEG
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 3
65210: NEG
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 3
65221: NEG
65222: PUSH
65223: LD_INT 1
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 4
65232: NEG
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 5
65243: NEG
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 5
65254: NEG
65255: PUSH
65256: LD_INT 1
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 5
65266: NEG
65267: PUSH
65268: LD_INT 2
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 3
65278: NEG
65279: PUSH
65280: LD_INT 2
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 3
65289: NEG
65290: PUSH
65291: LD_INT 3
65293: NEG
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 3
65301: NEG
65302: PUSH
65303: LD_INT 4
65305: NEG
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 2
65313: NEG
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 2
65325: NEG
65326: PUSH
65327: LD_INT 2
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 3
65337: NEG
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 4
65349: NEG
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 4
65361: NEG
65362: PUSH
65363: LD_INT 4
65365: NEG
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 2
65373: NEG
65374: PUSH
65375: LD_INT 4
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 4
65385: NEG
65386: PUSH
65387: LD_INT 2
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 0
65397: PUSH
65398: LD_INT 4
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 0
65408: PUSH
65409: LD_INT 5
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 1
65419: PUSH
65420: LD_INT 4
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: LD_INT 3
65433: NEG
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 3
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 1
65452: NEG
65453: PUSH
65454: LD_INT 4
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 1
65464: NEG
65465: PUSH
65466: LD_INT 5
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 2
65476: PUSH
65477: LD_INT 3
65479: NEG
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: LD_INT 5
65491: NEG
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
65544: LD_ADDR_VAR 0 31
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 4
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 0
65561: PUSH
65562: LD_INT 3
65564: PUSH
65565: EMPTY
65566: LIST
65567: LIST
65568: PUSH
65569: LD_INT 1
65571: PUSH
65572: LD_INT 4
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: LD_INT 5
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 0
65591: PUSH
65592: LD_INT 5
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 1
65601: NEG
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 1
65612: NEG
65613: PUSH
65614: LD_INT 3
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 2
65623: PUSH
65624: LD_INT 5
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 2
65633: NEG
65634: PUSH
65635: LD_INT 3
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 3
65644: NEG
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: NEG
65656: PUSH
65657: LD_INT 1
65659: NEG
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 2
65667: NEG
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: NEG
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 3
65689: NEG
65690: PUSH
65691: LD_INT 1
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: NEG
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 4
65711: NEG
65712: PUSH
65713: LD_INT 1
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 4
65723: NEG
65724: PUSH
65725: LD_INT 2
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 2
65735: NEG
65736: PUSH
65737: LD_INT 2
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: PUSH
65744: LD_INT 4
65746: NEG
65747: PUSH
65748: LD_INT 4
65750: NEG
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 4
65758: NEG
65759: PUSH
65760: LD_INT 5
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 3
65770: NEG
65771: PUSH
65772: LD_INT 4
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 3
65782: NEG
65783: PUSH
65784: LD_INT 3
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 4
65794: NEG
65795: PUSH
65796: LD_INT 3
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 5
65806: NEG
65807: PUSH
65808: LD_INT 4
65810: NEG
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: PUSH
65816: LD_INT 5
65818: NEG
65819: PUSH
65820: LD_INT 5
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 3
65830: NEG
65831: PUSH
65832: LD_INT 5
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 5
65842: NEG
65843: PUSH
65844: LD_INT 3
65846: NEG
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 3
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: LD_INT 4
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: LD_INT 3
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: LD_INT 2
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: LD_INT 2
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 1
65909: NEG
65910: PUSH
65911: LD_INT 3
65913: NEG
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: NEG
65922: PUSH
65923: LD_INT 4
65925: NEG
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: PUSH
65934: LD_INT 2
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: LD_INT 4
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 4
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 4
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 5
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 5
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 4
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 3
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 3
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PUSH
66026: LD_INT 3
66028: PUSH
66029: LD_INT 2
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 5
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: LIST
66092: LIST
66093: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
66094: LD_ADDR_VAR 0 32
66098: PUSH
66099: LD_INT 4
66101: NEG
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 4
66112: NEG
66113: PUSH
66114: LD_INT 1
66116: NEG
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 3
66124: NEG
66125: PUSH
66126: LD_INT 0
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 3
66135: NEG
66136: PUSH
66137: LD_INT 1
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 4
66146: NEG
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 5
66157: NEG
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 5
66168: NEG
66169: PUSH
66170: LD_INT 1
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 5
66180: NEG
66181: PUSH
66182: LD_INT 2
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: LD_INT 2
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 3
66203: NEG
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 3
66215: NEG
66216: PUSH
66217: LD_INT 4
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 2
66227: NEG
66228: PUSH
66229: LD_INT 3
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 2
66239: NEG
66240: PUSH
66241: LD_INT 2
66243: NEG
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 3
66251: NEG
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 4
66263: NEG
66264: PUSH
66265: LD_INT 3
66267: NEG
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 4
66275: NEG
66276: PUSH
66277: LD_INT 4
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 2
66287: NEG
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 4
66299: NEG
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: LD_INT 4
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: LD_INT 5
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 1
66333: PUSH
66334: LD_INT 4
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: LD_INT 3
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 3
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: NEG
66367: PUSH
66368: LD_INT 4
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 1
66378: NEG
66379: PUSH
66380: LD_INT 5
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: LD_INT 3
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 2
66401: NEG
66402: PUSH
66403: LD_INT 5
66405: NEG
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 3
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: PUSH
66421: LD_INT 3
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 4
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: LD_INT 1
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: LD_INT 0
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: LD_INT 1
66477: NEG
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 2
66485: PUSH
66486: LD_INT 2
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 4
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 4
66506: PUSH
66507: LD_INT 4
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 4
66516: PUSH
66517: LD_INT 3
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 5
66526: PUSH
66527: LD_INT 4
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 5
66536: PUSH
66537: LD_INT 5
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 4
66546: PUSH
66547: LD_INT 5
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: LD_INT 4
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 3
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: PUSH
66574: LD_INT 5
66576: PUSH
66577: LD_INT 3
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: LD_INT 3
66586: PUSH
66587: LD_INT 5
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: LIST
66639: LIST
66640: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66641: LD_ADDR_VAR 0 33
66645: PUSH
66646: LD_INT 4
66648: NEG
66649: PUSH
66650: LD_INT 4
66652: NEG
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 4
66660: NEG
66661: PUSH
66662: LD_INT 5
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 3
66672: NEG
66673: PUSH
66674: LD_INT 4
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: LD_INT 3
66684: NEG
66685: PUSH
66686: LD_INT 3
66688: NEG
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 4
66696: NEG
66697: PUSH
66698: LD_INT 3
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 5
66708: NEG
66709: PUSH
66710: LD_INT 4
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 5
66720: NEG
66721: PUSH
66722: LD_INT 5
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 3
66732: NEG
66733: PUSH
66734: LD_INT 5
66736: NEG
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: PUSH
66742: LD_INT 5
66744: NEG
66745: PUSH
66746: LD_INT 3
66748: NEG
66749: PUSH
66750: EMPTY
66751: LIST
66752: LIST
66753: PUSH
66754: LD_INT 0
66756: PUSH
66757: LD_INT 3
66759: NEG
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 0
66767: PUSH
66768: LD_INT 4
66770: NEG
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 3
66781: NEG
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: LD_INT 2
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: NEG
66812: PUSH
66813: LD_INT 3
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 1
66823: NEG
66824: PUSH
66825: LD_INT 4
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: LD_INT 2
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 2
66846: NEG
66847: PUSH
66848: LD_INT 4
66850: NEG
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 4
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 4
66868: PUSH
66869: LD_INT 1
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 5
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 5
66889: PUSH
66890: LD_INT 1
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 4
66899: PUSH
66900: LD_INT 1
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 3
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 3
66919: PUSH
66920: LD_INT 1
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: LD_INT 2
66933: NEG
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 5
66941: PUSH
66942: LD_INT 2
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 3
66951: PUSH
66952: LD_INT 3
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 3
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 4
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 4
66981: PUSH
66982: LD_INT 4
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 3
66991: PUSH
66992: LD_INT 4
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 2
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: PUSH
67012: LD_INT 2
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 4
67021: PUSH
67022: LD_INT 2
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 2
67031: PUSH
67032: LD_INT 4
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: LD_INT 4
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 0
67051: PUSH
67052: LD_INT 3
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: LD_INT 4
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: PUSH
67072: LD_INT 5
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 0
67081: PUSH
67082: LD_INT 5
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 1
67091: NEG
67092: PUSH
67093: LD_INT 4
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: NEG
67103: PUSH
67104: LD_INT 3
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 2
67113: PUSH
67114: LD_INT 5
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: LD_INT 3
67127: PUSH
67128: EMPTY
67129: LIST
67130: LIST
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
67179: LD_ADDR_VAR 0 34
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 4
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 5
67200: NEG
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 1
67208: PUSH
67209: LD_INT 4
67211: NEG
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 1
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: EMPTY
67225: LIST
67226: LIST
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: LD_INT 3
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 1
67241: NEG
67242: PUSH
67243: LD_INT 4
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: LD_INT 5
67257: NEG
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 2
67265: PUSH
67266: LD_INT 3
67268: NEG
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 2
67276: NEG
67277: PUSH
67278: LD_INT 5
67280: NEG
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 3
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 3
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 4
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 4
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 3
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 2
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 4
67371: PUSH
67372: LD_INT 2
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 4
67381: PUSH
67382: LD_INT 4
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 4
67391: PUSH
67392: LD_INT 3
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 5
67401: PUSH
67402: LD_INT 4
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 5
67411: PUSH
67412: LD_INT 5
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 4
67421: PUSH
67422: LD_INT 5
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: LD_INT 4
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: PUSH
67442: LD_INT 3
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: PUSH
67449: LD_INT 5
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 3
67461: PUSH
67462: LD_INT 5
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 0
67471: PUSH
67472: LD_INT 3
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: LD_INT 2
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: LD_INT 3
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: LD_INT 4
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: LD_INT 4
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: LD_INT 3
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 2
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 4
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: NEG
67554: PUSH
67555: LD_INT 2
67557: PUSH
67558: EMPTY
67559: LIST
67560: LIST
67561: PUSH
67562: LD_INT 4
67564: NEG
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 4
67575: NEG
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 3
67598: NEG
67599: PUSH
67600: LD_INT 1
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 4
67609: NEG
67610: PUSH
67611: LD_INT 1
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 5
67620: NEG
67621: PUSH
67622: LD_INT 0
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 5
67631: NEG
67632: PUSH
67633: LD_INT 1
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 5
67643: NEG
67644: PUSH
67645: LD_INT 2
67647: NEG
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: PUSH
67653: LD_INT 3
67655: NEG
67656: PUSH
67657: LD_INT 2
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: ST_TO_ADDR
// end ; end ;
67711: GO 67714
67713: POP
// case btype of b_depot , b_warehouse :
67714: LD_VAR 0 1
67718: PUSH
67719: LD_INT 0
67721: DOUBLE
67722: EQUAL
67723: IFTRUE 67733
67725: LD_INT 1
67727: DOUBLE
67728: EQUAL
67729: IFTRUE 67733
67731: GO 67934
67733: POP
// case nation of nation_american :
67734: LD_VAR 0 5
67738: PUSH
67739: LD_INT 1
67741: DOUBLE
67742: EQUAL
67743: IFTRUE 67747
67745: GO 67803
67747: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67748: LD_ADDR_VAR 0 9
67752: PUSH
67753: LD_VAR 0 11
67757: PUSH
67758: LD_VAR 0 12
67762: PUSH
67763: LD_VAR 0 13
67767: PUSH
67768: LD_VAR 0 14
67772: PUSH
67773: LD_VAR 0 15
67777: PUSH
67778: LD_VAR 0 16
67782: PUSH
67783: EMPTY
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: PUSH
67791: LD_VAR 0 4
67795: PUSH
67796: LD_INT 1
67798: PLUS
67799: ARRAY
67800: ST_TO_ADDR
67801: GO 67932
67803: LD_INT 2
67805: DOUBLE
67806: EQUAL
67807: IFTRUE 67811
67809: GO 67867
67811: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67812: LD_ADDR_VAR 0 9
67816: PUSH
67817: LD_VAR 0 17
67821: PUSH
67822: LD_VAR 0 18
67826: PUSH
67827: LD_VAR 0 19
67831: PUSH
67832: LD_VAR 0 20
67836: PUSH
67837: LD_VAR 0 21
67841: PUSH
67842: LD_VAR 0 22
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: LIST
67853: LIST
67854: PUSH
67855: LD_VAR 0 4
67859: PUSH
67860: LD_INT 1
67862: PLUS
67863: ARRAY
67864: ST_TO_ADDR
67865: GO 67932
67867: LD_INT 3
67869: DOUBLE
67870: EQUAL
67871: IFTRUE 67875
67873: GO 67931
67875: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67876: LD_ADDR_VAR 0 9
67880: PUSH
67881: LD_VAR 0 23
67885: PUSH
67886: LD_VAR 0 24
67890: PUSH
67891: LD_VAR 0 25
67895: PUSH
67896: LD_VAR 0 26
67900: PUSH
67901: LD_VAR 0 27
67905: PUSH
67906: LD_VAR 0 28
67910: PUSH
67911: EMPTY
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: PUSH
67919: LD_VAR 0 4
67923: PUSH
67924: LD_INT 1
67926: PLUS
67927: ARRAY
67928: ST_TO_ADDR
67929: GO 67932
67931: POP
67932: GO 68487
67934: LD_INT 2
67936: DOUBLE
67937: EQUAL
67938: IFTRUE 67948
67940: LD_INT 3
67942: DOUBLE
67943: EQUAL
67944: IFTRUE 67948
67946: GO 68004
67948: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67949: LD_ADDR_VAR 0 9
67953: PUSH
67954: LD_VAR 0 29
67958: PUSH
67959: LD_VAR 0 30
67963: PUSH
67964: LD_VAR 0 31
67968: PUSH
67969: LD_VAR 0 32
67973: PUSH
67974: LD_VAR 0 33
67978: PUSH
67979: LD_VAR 0 34
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: PUSH
67992: LD_VAR 0 4
67996: PUSH
67997: LD_INT 1
67999: PLUS
68000: ARRAY
68001: ST_TO_ADDR
68002: GO 68487
68004: LD_INT 16
68006: DOUBLE
68007: EQUAL
68008: IFTRUE 68066
68010: LD_INT 17
68012: DOUBLE
68013: EQUAL
68014: IFTRUE 68066
68016: LD_INT 18
68018: DOUBLE
68019: EQUAL
68020: IFTRUE 68066
68022: LD_INT 19
68024: DOUBLE
68025: EQUAL
68026: IFTRUE 68066
68028: LD_INT 22
68030: DOUBLE
68031: EQUAL
68032: IFTRUE 68066
68034: LD_INT 20
68036: DOUBLE
68037: EQUAL
68038: IFTRUE 68066
68040: LD_INT 21
68042: DOUBLE
68043: EQUAL
68044: IFTRUE 68066
68046: LD_INT 23
68048: DOUBLE
68049: EQUAL
68050: IFTRUE 68066
68052: LD_INT 24
68054: DOUBLE
68055: EQUAL
68056: IFTRUE 68066
68058: LD_INT 25
68060: DOUBLE
68061: EQUAL
68062: IFTRUE 68066
68064: GO 68122
68066: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
68067: LD_ADDR_VAR 0 9
68071: PUSH
68072: LD_VAR 0 35
68076: PUSH
68077: LD_VAR 0 36
68081: PUSH
68082: LD_VAR 0 37
68086: PUSH
68087: LD_VAR 0 38
68091: PUSH
68092: LD_VAR 0 39
68096: PUSH
68097: LD_VAR 0 40
68101: PUSH
68102: EMPTY
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: PUSH
68110: LD_VAR 0 4
68114: PUSH
68115: LD_INT 1
68117: PLUS
68118: ARRAY
68119: ST_TO_ADDR
68120: GO 68487
68122: LD_INT 6
68124: DOUBLE
68125: EQUAL
68126: IFTRUE 68178
68128: LD_INT 7
68130: DOUBLE
68131: EQUAL
68132: IFTRUE 68178
68134: LD_INT 8
68136: DOUBLE
68137: EQUAL
68138: IFTRUE 68178
68140: LD_INT 13
68142: DOUBLE
68143: EQUAL
68144: IFTRUE 68178
68146: LD_INT 12
68148: DOUBLE
68149: EQUAL
68150: IFTRUE 68178
68152: LD_INT 15
68154: DOUBLE
68155: EQUAL
68156: IFTRUE 68178
68158: LD_INT 11
68160: DOUBLE
68161: EQUAL
68162: IFTRUE 68178
68164: LD_INT 14
68166: DOUBLE
68167: EQUAL
68168: IFTRUE 68178
68170: LD_INT 10
68172: DOUBLE
68173: EQUAL
68174: IFTRUE 68178
68176: GO 68234
68178: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
68179: LD_ADDR_VAR 0 9
68183: PUSH
68184: LD_VAR 0 41
68188: PUSH
68189: LD_VAR 0 42
68193: PUSH
68194: LD_VAR 0 43
68198: PUSH
68199: LD_VAR 0 44
68203: PUSH
68204: LD_VAR 0 45
68208: PUSH
68209: LD_VAR 0 46
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: PUSH
68222: LD_VAR 0 4
68226: PUSH
68227: LD_INT 1
68229: PLUS
68230: ARRAY
68231: ST_TO_ADDR
68232: GO 68487
68234: LD_INT 36
68236: DOUBLE
68237: EQUAL
68238: IFTRUE 68242
68240: GO 68298
68242: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
68243: LD_ADDR_VAR 0 9
68247: PUSH
68248: LD_VAR 0 47
68252: PUSH
68253: LD_VAR 0 48
68257: PUSH
68258: LD_VAR 0 49
68262: PUSH
68263: LD_VAR 0 50
68267: PUSH
68268: LD_VAR 0 51
68272: PUSH
68273: LD_VAR 0 52
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: PUSH
68286: LD_VAR 0 4
68290: PUSH
68291: LD_INT 1
68293: PLUS
68294: ARRAY
68295: ST_TO_ADDR
68296: GO 68487
68298: LD_INT 4
68300: DOUBLE
68301: EQUAL
68302: IFTRUE 68324
68304: LD_INT 5
68306: DOUBLE
68307: EQUAL
68308: IFTRUE 68324
68310: LD_INT 34
68312: DOUBLE
68313: EQUAL
68314: IFTRUE 68324
68316: LD_INT 37
68318: DOUBLE
68319: EQUAL
68320: IFTRUE 68324
68322: GO 68380
68324: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
68325: LD_ADDR_VAR 0 9
68329: PUSH
68330: LD_VAR 0 53
68334: PUSH
68335: LD_VAR 0 54
68339: PUSH
68340: LD_VAR 0 55
68344: PUSH
68345: LD_VAR 0 56
68349: PUSH
68350: LD_VAR 0 57
68354: PUSH
68355: LD_VAR 0 58
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: PUSH
68368: LD_VAR 0 4
68372: PUSH
68373: LD_INT 1
68375: PLUS
68376: ARRAY
68377: ST_TO_ADDR
68378: GO 68487
68380: LD_INT 31
68382: DOUBLE
68383: EQUAL
68384: IFTRUE 68430
68386: LD_INT 32
68388: DOUBLE
68389: EQUAL
68390: IFTRUE 68430
68392: LD_INT 33
68394: DOUBLE
68395: EQUAL
68396: IFTRUE 68430
68398: LD_INT 27
68400: DOUBLE
68401: EQUAL
68402: IFTRUE 68430
68404: LD_INT 26
68406: DOUBLE
68407: EQUAL
68408: IFTRUE 68430
68410: LD_INT 28
68412: DOUBLE
68413: EQUAL
68414: IFTRUE 68430
68416: LD_INT 29
68418: DOUBLE
68419: EQUAL
68420: IFTRUE 68430
68422: LD_INT 30
68424: DOUBLE
68425: EQUAL
68426: IFTRUE 68430
68428: GO 68486
68430: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
68431: LD_ADDR_VAR 0 9
68435: PUSH
68436: LD_VAR 0 59
68440: PUSH
68441: LD_VAR 0 60
68445: PUSH
68446: LD_VAR 0 61
68450: PUSH
68451: LD_VAR 0 62
68455: PUSH
68456: LD_VAR 0 63
68460: PUSH
68461: LD_VAR 0 64
68465: PUSH
68466: EMPTY
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: PUSH
68474: LD_VAR 0 4
68478: PUSH
68479: LD_INT 1
68481: PLUS
68482: ARRAY
68483: ST_TO_ADDR
68484: GO 68487
68486: POP
// temp_list2 = [ ] ;
68487: LD_ADDR_VAR 0 10
68491: PUSH
68492: EMPTY
68493: ST_TO_ADDR
// for i in temp_list do
68494: LD_ADDR_VAR 0 8
68498: PUSH
68499: LD_VAR 0 9
68503: PUSH
68504: FOR_IN
68505: IFFALSE 68557
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
68507: LD_ADDR_VAR 0 10
68511: PUSH
68512: LD_VAR 0 10
68516: PUSH
68517: LD_VAR 0 8
68521: PUSH
68522: LD_INT 1
68524: ARRAY
68525: PUSH
68526: LD_VAR 0 2
68530: PLUS
68531: PUSH
68532: LD_VAR 0 8
68536: PUSH
68537: LD_INT 2
68539: ARRAY
68540: PUSH
68541: LD_VAR 0 3
68545: PLUS
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: EMPTY
68552: LIST
68553: ADD
68554: ST_TO_ADDR
68555: GO 68504
68557: POP
68558: POP
// result = temp_list2 ;
68559: LD_ADDR_VAR 0 7
68563: PUSH
68564: LD_VAR 0 10
68568: ST_TO_ADDR
// end ;
68569: LD_VAR 0 7
68573: RET
// export function EnemyInRange ( unit , dist ) ; begin
68574: LD_INT 0
68576: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68577: LD_ADDR_VAR 0 3
68581: PUSH
68582: LD_VAR 0 1
68586: PPUSH
68587: CALL_OW 255
68591: PPUSH
68592: LD_VAR 0 1
68596: PPUSH
68597: CALL_OW 250
68601: PPUSH
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 251
68611: PPUSH
68612: LD_VAR 0 2
68616: PPUSH
68617: CALL 41831 0 4
68621: PUSH
68622: LD_INT 4
68624: ARRAY
68625: ST_TO_ADDR
// end ;
68626: LD_VAR 0 3
68630: RET
// export function PlayerSeeMe ( unit ) ; begin
68631: LD_INT 0
68633: PPUSH
// result := See ( your_side , unit ) ;
68634: LD_ADDR_VAR 0 2
68638: PUSH
68639: LD_OWVAR 2
68643: PPUSH
68644: LD_VAR 0 1
68648: PPUSH
68649: CALL_OW 292
68653: ST_TO_ADDR
// end ;
68654: LD_VAR 0 2
68658: RET
// export function ReverseDir ( unit ) ; begin
68659: LD_INT 0
68661: PPUSH
// if not unit then
68662: LD_VAR 0 1
68666: NOT
68667: IFFALSE 68671
// exit ;
68669: GO 68694
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68671: LD_ADDR_VAR 0 2
68675: PUSH
68676: LD_VAR 0 1
68680: PPUSH
68681: CALL_OW 254
68685: PUSH
68686: LD_INT 3
68688: PLUS
68689: PUSH
68690: LD_INT 6
68692: MOD
68693: ST_TO_ADDR
// end ;
68694: LD_VAR 0 2
68698: RET
// export function ReverseArray ( array ) ; var i ; begin
68699: LD_INT 0
68701: PPUSH
68702: PPUSH
// if not array then
68703: LD_VAR 0 1
68707: NOT
68708: IFFALSE 68712
// exit ;
68710: GO 68767
// result := [ ] ;
68712: LD_ADDR_VAR 0 2
68716: PUSH
68717: EMPTY
68718: ST_TO_ADDR
// for i := array downto 1 do
68719: LD_ADDR_VAR 0 3
68723: PUSH
68724: DOUBLE
68725: LD_VAR 0 1
68729: INC
68730: ST_TO_ADDR
68731: LD_INT 1
68733: PUSH
68734: FOR_DOWNTO
68735: IFFALSE 68765
// result := Join ( result , array [ i ] ) ;
68737: LD_ADDR_VAR 0 2
68741: PUSH
68742: LD_VAR 0 2
68746: PPUSH
68747: LD_VAR 0 1
68751: PUSH
68752: LD_VAR 0 3
68756: ARRAY
68757: PPUSH
68758: CALL 73609 0 2
68762: ST_TO_ADDR
68763: GO 68734
68765: POP
68766: POP
// end ;
68767: LD_VAR 0 2
68771: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68772: LD_INT 0
68774: PPUSH
68775: PPUSH
68776: PPUSH
68777: PPUSH
68778: PPUSH
68779: PPUSH
// if not unit or not hexes then
68780: LD_VAR 0 1
68784: NOT
68785: IFTRUE 68794
68787: PUSH
68788: LD_VAR 0 2
68792: NOT
68793: OR
68794: IFFALSE 68798
// exit ;
68796: GO 68921
// dist := 9999 ;
68798: LD_ADDR_VAR 0 5
68802: PUSH
68803: LD_INT 9999
68805: ST_TO_ADDR
// for i = 1 to hexes do
68806: LD_ADDR_VAR 0 4
68810: PUSH
68811: DOUBLE
68812: LD_INT 1
68814: DEC
68815: ST_TO_ADDR
68816: LD_VAR 0 2
68820: PUSH
68821: FOR_TO
68822: IFFALSE 68909
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68824: LD_ADDR_VAR 0 6
68828: PUSH
68829: LD_VAR 0 1
68833: PPUSH
68834: LD_VAR 0 2
68838: PUSH
68839: LD_VAR 0 4
68843: ARRAY
68844: PUSH
68845: LD_INT 1
68847: ARRAY
68848: PPUSH
68849: LD_VAR 0 2
68853: PUSH
68854: LD_VAR 0 4
68858: ARRAY
68859: PUSH
68860: LD_INT 2
68862: ARRAY
68863: PPUSH
68864: CALL_OW 297
68868: ST_TO_ADDR
// if tdist < dist then
68869: LD_VAR 0 6
68873: PUSH
68874: LD_VAR 0 5
68878: LESS
68879: IFFALSE 68907
// begin hex := hexes [ i ] ;
68881: LD_ADDR_VAR 0 8
68885: PUSH
68886: LD_VAR 0 2
68890: PUSH
68891: LD_VAR 0 4
68895: ARRAY
68896: ST_TO_ADDR
// dist := tdist ;
68897: LD_ADDR_VAR 0 5
68901: PUSH
68902: LD_VAR 0 6
68906: ST_TO_ADDR
// end ; end ;
68907: GO 68821
68909: POP
68910: POP
// result := hex ;
68911: LD_ADDR_VAR 0 3
68915: PUSH
68916: LD_VAR 0 8
68920: ST_TO_ADDR
// end ;
68921: LD_VAR 0 3
68925: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68926: LD_INT 0
68928: PPUSH
68929: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68930: LD_VAR 0 1
68934: NOT
68935: IFTRUE 68974
68937: PUSH
68938: LD_VAR 0 1
68942: PUSH
68943: LD_INT 21
68945: PUSH
68946: LD_INT 2
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: PUSH
68953: LD_INT 23
68955: PUSH
68956: LD_INT 2
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PPUSH
68967: CALL_OW 69
68971: IN
68972: NOT
68973: OR
68974: IFFALSE 68978
// exit ;
68976: GO 69025
// for i = 1 to 3 do
68978: LD_ADDR_VAR 0 3
68982: PUSH
68983: DOUBLE
68984: LD_INT 1
68986: DEC
68987: ST_TO_ADDR
68988: LD_INT 3
68990: PUSH
68991: FOR_TO
68992: IFFALSE 69023
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68994: LD_VAR 0 1
68998: PPUSH
68999: CALL_OW 250
69003: PPUSH
69004: LD_VAR 0 1
69008: PPUSH
69009: CALL_OW 251
69013: PPUSH
69014: LD_INT 1
69016: PPUSH
69017: CALL_OW 453
69021: GO 68991
69023: POP
69024: POP
// end ;
69025: LD_VAR 0 2
69029: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
69030: LD_INT 0
69032: PPUSH
69033: PPUSH
69034: PPUSH
69035: PPUSH
69036: PPUSH
69037: PPUSH
// if not unit or not enemy_unit then
69038: LD_VAR 0 1
69042: NOT
69043: IFTRUE 69052
69045: PUSH
69046: LD_VAR 0 2
69050: NOT
69051: OR
69052: IFFALSE 69056
// exit ;
69054: GO 69527
// if GetLives ( i ) < 250 then
69056: LD_VAR 0 4
69060: PPUSH
69061: CALL_OW 256
69065: PUSH
69066: LD_INT 250
69068: LESS
69069: IFFALSE 69082
// begin ComAutodestruct ( i ) ;
69071: LD_VAR 0 4
69075: PPUSH
69076: CALL 68926 0 1
// exit ;
69080: GO 69527
// end ; x := GetX ( enemy_unit ) ;
69082: LD_ADDR_VAR 0 7
69086: PUSH
69087: LD_VAR 0 2
69091: PPUSH
69092: CALL_OW 250
69096: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
69097: LD_ADDR_VAR 0 8
69101: PUSH
69102: LD_VAR 0 2
69106: PPUSH
69107: CALL_OW 251
69111: ST_TO_ADDR
// if not x or not y then
69112: LD_VAR 0 7
69116: NOT
69117: IFTRUE 69126
69119: PUSH
69120: LD_VAR 0 8
69124: NOT
69125: OR
69126: IFFALSE 69130
// exit ;
69128: GO 69527
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
69130: LD_ADDR_VAR 0 6
69134: PUSH
69135: LD_VAR 0 7
69139: PPUSH
69140: LD_INT 0
69142: PPUSH
69143: LD_INT 4
69145: PPUSH
69146: CALL_OW 272
69150: PUSH
69151: LD_VAR 0 8
69155: PPUSH
69156: LD_INT 0
69158: PPUSH
69159: LD_INT 4
69161: PPUSH
69162: CALL_OW 273
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_VAR 0 7
69175: PPUSH
69176: LD_INT 1
69178: PPUSH
69179: LD_INT 4
69181: PPUSH
69182: CALL_OW 272
69186: PUSH
69187: LD_VAR 0 8
69191: PPUSH
69192: LD_INT 1
69194: PPUSH
69195: LD_INT 4
69197: PPUSH
69198: CALL_OW 273
69202: PUSH
69203: EMPTY
69204: LIST
69205: LIST
69206: PUSH
69207: LD_VAR 0 7
69211: PPUSH
69212: LD_INT 2
69214: PPUSH
69215: LD_INT 4
69217: PPUSH
69218: CALL_OW 272
69222: PUSH
69223: LD_VAR 0 8
69227: PPUSH
69228: LD_INT 2
69230: PPUSH
69231: LD_INT 4
69233: PPUSH
69234: CALL_OW 273
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_VAR 0 7
69247: PPUSH
69248: LD_INT 3
69250: PPUSH
69251: LD_INT 4
69253: PPUSH
69254: CALL_OW 272
69258: PUSH
69259: LD_VAR 0 8
69263: PPUSH
69264: LD_INT 3
69266: PPUSH
69267: LD_INT 4
69269: PPUSH
69270: CALL_OW 273
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_VAR 0 7
69283: PPUSH
69284: LD_INT 4
69286: PPUSH
69287: LD_INT 4
69289: PPUSH
69290: CALL_OW 272
69294: PUSH
69295: LD_VAR 0 8
69299: PPUSH
69300: LD_INT 4
69302: PPUSH
69303: LD_INT 4
69305: PPUSH
69306: CALL_OW 273
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_VAR 0 7
69319: PPUSH
69320: LD_INT 5
69322: PPUSH
69323: LD_INT 4
69325: PPUSH
69326: CALL_OW 272
69330: PUSH
69331: LD_VAR 0 8
69335: PPUSH
69336: LD_INT 5
69338: PPUSH
69339: LD_INT 4
69341: PPUSH
69342: CALL_OW 273
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: EMPTY
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: ST_TO_ADDR
// for i = tmp downto 1 do
69359: LD_ADDR_VAR 0 4
69363: PUSH
69364: DOUBLE
69365: LD_VAR 0 6
69369: INC
69370: ST_TO_ADDR
69371: LD_INT 1
69373: PUSH
69374: FOR_DOWNTO
69375: IFFALSE 69478
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
69377: LD_VAR 0 6
69381: PUSH
69382: LD_VAR 0 4
69386: ARRAY
69387: PUSH
69388: LD_INT 1
69390: ARRAY
69391: PPUSH
69392: LD_VAR 0 6
69396: PUSH
69397: LD_VAR 0 4
69401: ARRAY
69402: PUSH
69403: LD_INT 2
69405: ARRAY
69406: PPUSH
69407: CALL_OW 488
69411: NOT
69412: IFTRUE 69454
69414: PUSH
69415: LD_VAR 0 6
69419: PUSH
69420: LD_VAR 0 4
69424: ARRAY
69425: PUSH
69426: LD_INT 1
69428: ARRAY
69429: PPUSH
69430: LD_VAR 0 6
69434: PUSH
69435: LD_VAR 0 4
69439: ARRAY
69440: PUSH
69441: LD_INT 2
69443: ARRAY
69444: PPUSH
69445: CALL_OW 428
69449: PUSH
69450: LD_INT 0
69452: NONEQUAL
69453: OR
69454: IFFALSE 69476
// tmp := Delete ( tmp , i ) ;
69456: LD_ADDR_VAR 0 6
69460: PUSH
69461: LD_VAR 0 6
69465: PPUSH
69466: LD_VAR 0 4
69470: PPUSH
69471: CALL_OW 3
69475: ST_TO_ADDR
69476: GO 69374
69478: POP
69479: POP
// j := GetClosestHex ( unit , tmp ) ;
69480: LD_ADDR_VAR 0 5
69484: PUSH
69485: LD_VAR 0 1
69489: PPUSH
69490: LD_VAR 0 6
69494: PPUSH
69495: CALL 68772 0 2
69499: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
69500: LD_VAR 0 1
69504: PPUSH
69505: LD_VAR 0 5
69509: PUSH
69510: LD_INT 1
69512: ARRAY
69513: PPUSH
69514: LD_VAR 0 5
69518: PUSH
69519: LD_INT 2
69521: ARRAY
69522: PPUSH
69523: CALL_OW 111
// end ;
69527: LD_VAR 0 3
69531: RET
// export function PrepareApemanSoldier ( ) ; begin
69532: LD_INT 0
69534: PPUSH
// uc_nation := 0 ;
69535: LD_ADDR_OWVAR 21
69539: PUSH
69540: LD_INT 0
69542: ST_TO_ADDR
// hc_sex := sex_male ;
69543: LD_ADDR_OWVAR 27
69547: PUSH
69548: LD_INT 1
69550: ST_TO_ADDR
// hc_name :=  ;
69551: LD_ADDR_OWVAR 26
69555: PUSH
69556: LD_STRING 
69558: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69559: LD_ADDR_OWVAR 28
69563: PUSH
69564: LD_INT 15
69566: ST_TO_ADDR
// hc_gallery :=  ;
69567: LD_ADDR_OWVAR 33
69571: PUSH
69572: LD_STRING 
69574: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69575: LD_ADDR_OWVAR 31
69579: PUSH
69580: LD_INT 0
69582: PPUSH
69583: LD_INT 3
69585: PPUSH
69586: CALL_OW 12
69590: PUSH
69591: LD_INT 0
69593: PPUSH
69594: LD_INT 3
69596: PPUSH
69597: CALL_OW 12
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: LD_INT 0
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: LIST
69612: LIST
69613: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69614: LD_ADDR_OWVAR 29
69618: PUSH
69619: LD_INT 12
69621: PUSH
69622: LD_INT 12
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: ST_TO_ADDR
// end ;
69629: LD_VAR 0 1
69633: RET
// export function PrepareApemanEngineer ( ) ; begin
69634: LD_INT 0
69636: PPUSH
// uc_nation := 0 ;
69637: LD_ADDR_OWVAR 21
69641: PUSH
69642: LD_INT 0
69644: ST_TO_ADDR
// hc_sex := sex_male ;
69645: LD_ADDR_OWVAR 27
69649: PUSH
69650: LD_INT 1
69652: ST_TO_ADDR
// hc_name :=  ;
69653: LD_ADDR_OWVAR 26
69657: PUSH
69658: LD_STRING 
69660: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69661: LD_ADDR_OWVAR 28
69665: PUSH
69666: LD_INT 16
69668: ST_TO_ADDR
// hc_gallery :=  ;
69669: LD_ADDR_OWVAR 33
69673: PUSH
69674: LD_STRING 
69676: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69677: LD_ADDR_OWVAR 31
69681: PUSH
69682: LD_INT 0
69684: PPUSH
69685: LD_INT 3
69687: PPUSH
69688: CALL_OW 12
69692: PUSH
69693: LD_INT 0
69695: PPUSH
69696: LD_INT 3
69698: PPUSH
69699: CALL_OW 12
69703: PUSH
69704: LD_INT 0
69706: PUSH
69707: LD_INT 0
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69716: LD_ADDR_OWVAR 29
69720: PUSH
69721: LD_INT 12
69723: PUSH
69724: LD_INT 12
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: ST_TO_ADDR
// end ;
69731: LD_VAR 0 1
69735: RET
// export function PrepareApeman ( agressivity ) ; begin
69736: LD_INT 0
69738: PPUSH
// uc_side := 0 ;
69739: LD_ADDR_OWVAR 20
69743: PUSH
69744: LD_INT 0
69746: ST_TO_ADDR
// uc_nation := 0 ;
69747: LD_ADDR_OWVAR 21
69751: PUSH
69752: LD_INT 0
69754: ST_TO_ADDR
// hc_sex := sex_male ;
69755: LD_ADDR_OWVAR 27
69759: PUSH
69760: LD_INT 1
69762: ST_TO_ADDR
// hc_class := class_apeman ;
69763: LD_ADDR_OWVAR 28
69767: PUSH
69768: LD_INT 12
69770: ST_TO_ADDR
// hc_gallery :=  ;
69771: LD_ADDR_OWVAR 33
69775: PUSH
69776: LD_STRING 
69778: ST_TO_ADDR
// hc_name :=  ;
69779: LD_ADDR_OWVAR 26
69783: PUSH
69784: LD_STRING 
69786: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69787: LD_ADDR_OWVAR 29
69791: PUSH
69792: LD_INT 12
69794: PUSH
69795: LD_INT 12
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: ST_TO_ADDR
// if agressivity = 0 then
69802: LD_VAR 0 1
69806: PUSH
69807: LD_INT 0
69809: EQUAL
69810: IFFALSE 69822
// hc_agressivity := 0 else
69812: LD_ADDR_OWVAR 35
69816: PUSH
69817: LD_INT 0
69819: ST_TO_ADDR
69820: GO 69843
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69822: LD_ADDR_OWVAR 35
69826: PUSH
69827: LD_VAR 0 1
69831: NEG
69832: PPUSH
69833: LD_VAR 0 1
69837: PPUSH
69838: CALL_OW 12
69842: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69843: LD_ADDR_OWVAR 31
69847: PUSH
69848: LD_INT 0
69850: PPUSH
69851: LD_INT 3
69853: PPUSH
69854: CALL_OW 12
69858: PUSH
69859: LD_INT 0
69861: PPUSH
69862: LD_INT 3
69864: PPUSH
69865: CALL_OW 12
69869: PUSH
69870: LD_INT 0
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: ST_TO_ADDR
// end ;
69882: LD_VAR 0 2
69886: RET
// export function PrepareTiger ( agressivity ) ; begin
69887: LD_INT 0
69889: PPUSH
// uc_side := 0 ;
69890: LD_ADDR_OWVAR 20
69894: PUSH
69895: LD_INT 0
69897: ST_TO_ADDR
// uc_nation := 0 ;
69898: LD_ADDR_OWVAR 21
69902: PUSH
69903: LD_INT 0
69905: ST_TO_ADDR
// InitHc ;
69906: CALL_OW 19
// hc_class := class_tiger ;
69910: LD_ADDR_OWVAR 28
69914: PUSH
69915: LD_INT 14
69917: ST_TO_ADDR
// hc_gallery :=  ;
69918: LD_ADDR_OWVAR 33
69922: PUSH
69923: LD_STRING 
69925: ST_TO_ADDR
// hc_name :=  ;
69926: LD_ADDR_OWVAR 26
69930: PUSH
69931: LD_STRING 
69933: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69934: LD_ADDR_OWVAR 35
69938: PUSH
69939: LD_VAR 0 1
69943: NEG
69944: PPUSH
69945: LD_VAR 0 1
69949: PPUSH
69950: CALL_OW 12
69954: ST_TO_ADDR
// end ;
69955: LD_VAR 0 2
69959: RET
// export function PrepareEnchidna ( ) ; begin
69960: LD_INT 0
69962: PPUSH
// uc_side := 0 ;
69963: LD_ADDR_OWVAR 20
69967: PUSH
69968: LD_INT 0
69970: ST_TO_ADDR
// uc_nation := 0 ;
69971: LD_ADDR_OWVAR 21
69975: PUSH
69976: LD_INT 0
69978: ST_TO_ADDR
// InitHc ;
69979: CALL_OW 19
// hc_class := class_baggie ;
69983: LD_ADDR_OWVAR 28
69987: PUSH
69988: LD_INT 13
69990: ST_TO_ADDR
// hc_gallery :=  ;
69991: LD_ADDR_OWVAR 33
69995: PUSH
69996: LD_STRING 
69998: ST_TO_ADDR
// hc_name :=  ;
69999: LD_ADDR_OWVAR 26
70003: PUSH
70004: LD_STRING 
70006: ST_TO_ADDR
// end ;
70007: LD_VAR 0 1
70011: RET
// export function PrepareFrog ( ) ; begin
70012: LD_INT 0
70014: PPUSH
// uc_side := 0 ;
70015: LD_ADDR_OWVAR 20
70019: PUSH
70020: LD_INT 0
70022: ST_TO_ADDR
// uc_nation := 0 ;
70023: LD_ADDR_OWVAR 21
70027: PUSH
70028: LD_INT 0
70030: ST_TO_ADDR
// InitHc ;
70031: CALL_OW 19
// hc_class := class_frog ;
70035: LD_ADDR_OWVAR 28
70039: PUSH
70040: LD_INT 19
70042: ST_TO_ADDR
// hc_gallery :=  ;
70043: LD_ADDR_OWVAR 33
70047: PUSH
70048: LD_STRING 
70050: ST_TO_ADDR
// hc_name :=  ;
70051: LD_ADDR_OWVAR 26
70055: PUSH
70056: LD_STRING 
70058: ST_TO_ADDR
// end ;
70059: LD_VAR 0 1
70063: RET
// export function PrepareFish ( ) ; begin
70064: LD_INT 0
70066: PPUSH
// uc_side := 0 ;
70067: LD_ADDR_OWVAR 20
70071: PUSH
70072: LD_INT 0
70074: ST_TO_ADDR
// uc_nation := 0 ;
70075: LD_ADDR_OWVAR 21
70079: PUSH
70080: LD_INT 0
70082: ST_TO_ADDR
// InitHc ;
70083: CALL_OW 19
// hc_class := class_fish ;
70087: LD_ADDR_OWVAR 28
70091: PUSH
70092: LD_INT 20
70094: ST_TO_ADDR
// hc_gallery :=  ;
70095: LD_ADDR_OWVAR 33
70099: PUSH
70100: LD_STRING 
70102: ST_TO_ADDR
// hc_name :=  ;
70103: LD_ADDR_OWVAR 26
70107: PUSH
70108: LD_STRING 
70110: ST_TO_ADDR
// end ;
70111: LD_VAR 0 1
70115: RET
// export function PrepareBird ( ) ; begin
70116: LD_INT 0
70118: PPUSH
// uc_side := 0 ;
70119: LD_ADDR_OWVAR 20
70123: PUSH
70124: LD_INT 0
70126: ST_TO_ADDR
// uc_nation := 0 ;
70127: LD_ADDR_OWVAR 21
70131: PUSH
70132: LD_INT 0
70134: ST_TO_ADDR
// InitHc ;
70135: CALL_OW 19
// hc_class := class_phororhacos ;
70139: LD_ADDR_OWVAR 28
70143: PUSH
70144: LD_INT 18
70146: ST_TO_ADDR
// hc_gallery :=  ;
70147: LD_ADDR_OWVAR 33
70151: PUSH
70152: LD_STRING 
70154: ST_TO_ADDR
// hc_name :=  ;
70155: LD_ADDR_OWVAR 26
70159: PUSH
70160: LD_STRING 
70162: ST_TO_ADDR
// end ;
70163: LD_VAR 0 1
70167: RET
// export function PrepareHorse ( ) ; begin
70168: LD_INT 0
70170: PPUSH
// uc_side := 0 ;
70171: LD_ADDR_OWVAR 20
70175: PUSH
70176: LD_INT 0
70178: ST_TO_ADDR
// uc_nation := 0 ;
70179: LD_ADDR_OWVAR 21
70183: PUSH
70184: LD_INT 0
70186: ST_TO_ADDR
// InitHc ;
70187: CALL_OW 19
// hc_class := class_horse ;
70191: LD_ADDR_OWVAR 28
70195: PUSH
70196: LD_INT 21
70198: ST_TO_ADDR
// hc_gallery :=  ;
70199: LD_ADDR_OWVAR 33
70203: PUSH
70204: LD_STRING 
70206: ST_TO_ADDR
// hc_name :=  ;
70207: LD_ADDR_OWVAR 26
70211: PUSH
70212: LD_STRING 
70214: ST_TO_ADDR
// end ;
70215: LD_VAR 0 1
70219: RET
// export function PrepareMastodont ( ) ; begin
70220: LD_INT 0
70222: PPUSH
// uc_side := 0 ;
70223: LD_ADDR_OWVAR 20
70227: PUSH
70228: LD_INT 0
70230: ST_TO_ADDR
// uc_nation := 0 ;
70231: LD_ADDR_OWVAR 21
70235: PUSH
70236: LD_INT 0
70238: ST_TO_ADDR
// vc_chassis := class_mastodont ;
70239: LD_ADDR_OWVAR 37
70243: PUSH
70244: LD_INT 31
70246: ST_TO_ADDR
// vc_control := control_rider ;
70247: LD_ADDR_OWVAR 38
70251: PUSH
70252: LD_INT 4
70254: ST_TO_ADDR
// end ;
70255: LD_VAR 0 1
70259: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
70260: LD_INT 0
70262: PPUSH
70263: PPUSH
70264: PPUSH
// uc_side = 0 ;
70265: LD_ADDR_OWVAR 20
70269: PUSH
70270: LD_INT 0
70272: ST_TO_ADDR
// uc_nation = 0 ;
70273: LD_ADDR_OWVAR 21
70277: PUSH
70278: LD_INT 0
70280: ST_TO_ADDR
// InitHc_All ( ) ;
70281: CALL_OW 584
// InitVc ;
70285: CALL_OW 20
// if mastodonts then
70289: LD_VAR 0 6
70293: IFFALSE 70360
// for i = 1 to mastodonts do
70295: LD_ADDR_VAR 0 11
70299: PUSH
70300: DOUBLE
70301: LD_INT 1
70303: DEC
70304: ST_TO_ADDR
70305: LD_VAR 0 6
70309: PUSH
70310: FOR_TO
70311: IFFALSE 70358
// begin vc_chassis := 31 ;
70313: LD_ADDR_OWVAR 37
70317: PUSH
70318: LD_INT 31
70320: ST_TO_ADDR
// vc_control := control_rider ;
70321: LD_ADDR_OWVAR 38
70325: PUSH
70326: LD_INT 4
70328: ST_TO_ADDR
// animal := CreateVehicle ;
70329: LD_ADDR_VAR 0 12
70333: PUSH
70334: CALL_OW 45
70338: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70339: LD_VAR 0 12
70343: PPUSH
70344: LD_VAR 0 8
70348: PPUSH
70349: LD_INT 0
70351: PPUSH
70352: CALL 72502 0 3
// end ;
70356: GO 70310
70358: POP
70359: POP
// if horses then
70360: LD_VAR 0 5
70364: IFFALSE 70431
// for i = 1 to horses do
70366: LD_ADDR_VAR 0 11
70370: PUSH
70371: DOUBLE
70372: LD_INT 1
70374: DEC
70375: ST_TO_ADDR
70376: LD_VAR 0 5
70380: PUSH
70381: FOR_TO
70382: IFFALSE 70429
// begin hc_class := 21 ;
70384: LD_ADDR_OWVAR 28
70388: PUSH
70389: LD_INT 21
70391: ST_TO_ADDR
// hc_gallery :=  ;
70392: LD_ADDR_OWVAR 33
70396: PUSH
70397: LD_STRING 
70399: ST_TO_ADDR
// animal := CreateHuman ;
70400: LD_ADDR_VAR 0 12
70404: PUSH
70405: CALL_OW 44
70409: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70410: LD_VAR 0 12
70414: PPUSH
70415: LD_VAR 0 8
70419: PPUSH
70420: LD_INT 0
70422: PPUSH
70423: CALL 72502 0 3
// end ;
70427: GO 70381
70429: POP
70430: POP
// if birds then
70431: LD_VAR 0 1
70435: IFFALSE 70502
// for i = 1 to birds do
70437: LD_ADDR_VAR 0 11
70441: PUSH
70442: DOUBLE
70443: LD_INT 1
70445: DEC
70446: ST_TO_ADDR
70447: LD_VAR 0 1
70451: PUSH
70452: FOR_TO
70453: IFFALSE 70500
// begin hc_class := 18 ;
70455: LD_ADDR_OWVAR 28
70459: PUSH
70460: LD_INT 18
70462: ST_TO_ADDR
// hc_gallery =  ;
70463: LD_ADDR_OWVAR 33
70467: PUSH
70468: LD_STRING 
70470: ST_TO_ADDR
// animal := CreateHuman ;
70471: LD_ADDR_VAR 0 12
70475: PUSH
70476: CALL_OW 44
70480: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70481: LD_VAR 0 12
70485: PPUSH
70486: LD_VAR 0 8
70490: PPUSH
70491: LD_INT 0
70493: PPUSH
70494: CALL 72502 0 3
// end ;
70498: GO 70452
70500: POP
70501: POP
// if tigers then
70502: LD_VAR 0 2
70506: IFFALSE 70590
// for i = 1 to tigers do
70508: LD_ADDR_VAR 0 11
70512: PUSH
70513: DOUBLE
70514: LD_INT 1
70516: DEC
70517: ST_TO_ADDR
70518: LD_VAR 0 2
70522: PUSH
70523: FOR_TO
70524: IFFALSE 70588
// begin hc_class = class_tiger ;
70526: LD_ADDR_OWVAR 28
70530: PUSH
70531: LD_INT 14
70533: ST_TO_ADDR
// hc_gallery =  ;
70534: LD_ADDR_OWVAR 33
70538: PUSH
70539: LD_STRING 
70541: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
70542: LD_ADDR_OWVAR 35
70546: PUSH
70547: LD_INT 7
70549: NEG
70550: PPUSH
70551: LD_INT 7
70553: PPUSH
70554: CALL_OW 12
70558: ST_TO_ADDR
// animal := CreateHuman ;
70559: LD_ADDR_VAR 0 12
70563: PUSH
70564: CALL_OW 44
70568: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70569: LD_VAR 0 12
70573: PPUSH
70574: LD_VAR 0 8
70578: PPUSH
70579: LD_INT 0
70581: PPUSH
70582: CALL 72502 0 3
// end ;
70586: GO 70523
70588: POP
70589: POP
// if apemans then
70590: LD_VAR 0 3
70594: IFFALSE 70717
// for i = 1 to apemans do
70596: LD_ADDR_VAR 0 11
70600: PUSH
70601: DOUBLE
70602: LD_INT 1
70604: DEC
70605: ST_TO_ADDR
70606: LD_VAR 0 3
70610: PUSH
70611: FOR_TO
70612: IFFALSE 70715
// begin hc_class = class_apeman ;
70614: LD_ADDR_OWVAR 28
70618: PUSH
70619: LD_INT 12
70621: ST_TO_ADDR
// hc_gallery =  ;
70622: LD_ADDR_OWVAR 33
70626: PUSH
70627: LD_STRING 
70629: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
70630: LD_ADDR_OWVAR 35
70634: PUSH
70635: LD_INT 2
70637: NEG
70638: PPUSH
70639: LD_INT 2
70641: PPUSH
70642: CALL_OW 12
70646: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
70647: LD_ADDR_OWVAR 31
70651: PUSH
70652: LD_INT 1
70654: PPUSH
70655: LD_INT 3
70657: PPUSH
70658: CALL_OW 12
70662: PUSH
70663: LD_INT 1
70665: PPUSH
70666: LD_INT 3
70668: PPUSH
70669: CALL_OW 12
70673: PUSH
70674: LD_INT 0
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: LIST
70685: ST_TO_ADDR
// animal := CreateHuman ;
70686: LD_ADDR_VAR 0 12
70690: PUSH
70691: CALL_OW 44
70695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70696: LD_VAR 0 12
70700: PPUSH
70701: LD_VAR 0 8
70705: PPUSH
70706: LD_INT 0
70708: PPUSH
70709: CALL 72502 0 3
// end ;
70713: GO 70611
70715: POP
70716: POP
// if enchidnas then
70717: LD_VAR 0 4
70721: IFFALSE 70788
// for i = 1 to enchidnas do
70723: LD_ADDR_VAR 0 11
70727: PUSH
70728: DOUBLE
70729: LD_INT 1
70731: DEC
70732: ST_TO_ADDR
70733: LD_VAR 0 4
70737: PUSH
70738: FOR_TO
70739: IFFALSE 70786
// begin hc_class = 13 ;
70741: LD_ADDR_OWVAR 28
70745: PUSH
70746: LD_INT 13
70748: ST_TO_ADDR
// hc_gallery =  ;
70749: LD_ADDR_OWVAR 33
70753: PUSH
70754: LD_STRING 
70756: ST_TO_ADDR
// animal := CreateHuman ;
70757: LD_ADDR_VAR 0 12
70761: PUSH
70762: CALL_OW 44
70766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70767: LD_VAR 0 12
70771: PPUSH
70772: LD_VAR 0 8
70776: PPUSH
70777: LD_INT 0
70779: PPUSH
70780: CALL 72502 0 3
// end ;
70784: GO 70738
70786: POP
70787: POP
// if fishes then
70788: LD_VAR 0 7
70792: IFFALSE 70859
// for i = 1 to fishes do
70794: LD_ADDR_VAR 0 11
70798: PUSH
70799: DOUBLE
70800: LD_INT 1
70802: DEC
70803: ST_TO_ADDR
70804: LD_VAR 0 7
70808: PUSH
70809: FOR_TO
70810: IFFALSE 70857
// begin hc_class = 20 ;
70812: LD_ADDR_OWVAR 28
70816: PUSH
70817: LD_INT 20
70819: ST_TO_ADDR
// hc_gallery =  ;
70820: LD_ADDR_OWVAR 33
70824: PUSH
70825: LD_STRING 
70827: ST_TO_ADDR
// animal := CreateHuman ;
70828: LD_ADDR_VAR 0 12
70832: PUSH
70833: CALL_OW 44
70837: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70838: LD_VAR 0 12
70842: PPUSH
70843: LD_VAR 0 9
70847: PPUSH
70848: LD_INT 0
70850: PPUSH
70851: CALL 72502 0 3
// end ;
70855: GO 70809
70857: POP
70858: POP
// end ;
70859: LD_VAR 0 10
70863: RET
// export function WantHeal ( sci , unit ) ; begin
70864: LD_INT 0
70866: PPUSH
// if GetTaskList ( sci ) > 0 then
70867: LD_VAR 0 1
70871: PPUSH
70872: CALL_OW 437
70876: PUSH
70877: LD_INT 0
70879: GREATER
70880: IFFALSE 70952
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70882: LD_VAR 0 1
70886: PPUSH
70887: CALL_OW 437
70891: PUSH
70892: LD_INT 1
70894: ARRAY
70895: PUSH
70896: LD_INT 1
70898: ARRAY
70899: PUSH
70900: LD_STRING l
70902: EQUAL
70903: IFFALSE 70930
70905: PUSH
70906: LD_VAR 0 1
70910: PPUSH
70911: CALL_OW 437
70915: PUSH
70916: LD_INT 1
70918: ARRAY
70919: PUSH
70920: LD_INT 4
70922: ARRAY
70923: PUSH
70924: LD_VAR 0 2
70928: EQUAL
70929: AND
70930: IFFALSE 70942
// result := true else
70932: LD_ADDR_VAR 0 3
70936: PUSH
70937: LD_INT 1
70939: ST_TO_ADDR
70940: GO 70950
// result := false ;
70942: LD_ADDR_VAR 0 3
70946: PUSH
70947: LD_INT 0
70949: ST_TO_ADDR
// end else
70950: GO 70960
// result := false ;
70952: LD_ADDR_VAR 0 3
70956: PUSH
70957: LD_INT 0
70959: ST_TO_ADDR
// end ;
70960: LD_VAR 0 3
70964: RET
// export function HealTarget ( sci ) ; begin
70965: LD_INT 0
70967: PPUSH
// if not sci then
70968: LD_VAR 0 1
70972: NOT
70973: IFFALSE 70977
// exit ;
70975: GO 71042
// result := 0 ;
70977: LD_ADDR_VAR 0 2
70981: PUSH
70982: LD_INT 0
70984: ST_TO_ADDR
// if GetTaskList ( sci ) then
70985: LD_VAR 0 1
70989: PPUSH
70990: CALL_OW 437
70994: IFFALSE 71042
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70996: LD_VAR 0 1
71000: PPUSH
71001: CALL_OW 437
71005: PUSH
71006: LD_INT 1
71008: ARRAY
71009: PUSH
71010: LD_INT 1
71012: ARRAY
71013: PUSH
71014: LD_STRING l
71016: EQUAL
71017: IFFALSE 71042
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
71019: LD_ADDR_VAR 0 2
71023: PUSH
71024: LD_VAR 0 1
71028: PPUSH
71029: CALL_OW 437
71033: PUSH
71034: LD_INT 1
71036: ARRAY
71037: PUSH
71038: LD_INT 4
71040: ARRAY
71041: ST_TO_ADDR
// end ;
71042: LD_VAR 0 2
71046: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
71047: LD_INT 0
71049: PPUSH
71050: PPUSH
71051: PPUSH
71052: PPUSH
// if not base_units then
71053: LD_VAR 0 1
71057: NOT
71058: IFFALSE 71062
// exit ;
71060: GO 71149
// result := false ;
71062: LD_ADDR_VAR 0 2
71066: PUSH
71067: LD_INT 0
71069: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
71070: LD_ADDR_VAR 0 5
71074: PUSH
71075: LD_VAR 0 1
71079: PPUSH
71080: LD_INT 21
71082: PUSH
71083: LD_INT 3
71085: PUSH
71086: EMPTY
71087: LIST
71088: LIST
71089: PPUSH
71090: CALL_OW 72
71094: ST_TO_ADDR
// if not tmp then
71095: LD_VAR 0 5
71099: NOT
71100: IFFALSE 71104
// exit ;
71102: GO 71149
// for i in tmp do
71104: LD_ADDR_VAR 0 3
71108: PUSH
71109: LD_VAR 0 5
71113: PUSH
71114: FOR_IN
71115: IFFALSE 71147
// begin result := EnemyInRange ( i , 22 ) ;
71117: LD_ADDR_VAR 0 2
71121: PUSH
71122: LD_VAR 0 3
71126: PPUSH
71127: LD_INT 22
71129: PPUSH
71130: CALL 68574 0 2
71134: ST_TO_ADDR
// if result then
71135: LD_VAR 0 2
71139: IFFALSE 71145
// exit ;
71141: POP
71142: POP
71143: GO 71149
// end ;
71145: GO 71114
71147: POP
71148: POP
// end ;
71149: LD_VAR 0 2
71153: RET
// export function FilterByTag ( units , tag ) ; begin
71154: LD_INT 0
71156: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
71157: LD_ADDR_VAR 0 3
71161: PUSH
71162: LD_VAR 0 1
71166: PPUSH
71167: LD_INT 120
71169: PUSH
71170: LD_VAR 0 2
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PPUSH
71179: CALL_OW 72
71183: ST_TO_ADDR
// end ;
71184: LD_VAR 0 3
71188: RET
// export function IsDriver ( un ) ; begin
71189: LD_INT 0
71191: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
71192: LD_ADDR_VAR 0 2
71196: PUSH
71197: LD_VAR 0 1
71201: PUSH
71202: LD_INT 55
71204: PUSH
71205: EMPTY
71206: LIST
71207: PPUSH
71208: CALL_OW 69
71212: IN
71213: ST_TO_ADDR
// end ;
71214: LD_VAR 0 2
71218: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
71219: LD_INT 0
71221: PPUSH
71222: PPUSH
// list := [ ] ;
71223: LD_ADDR_VAR 0 5
71227: PUSH
71228: EMPTY
71229: ST_TO_ADDR
// case d of 0 :
71230: LD_VAR 0 3
71234: PUSH
71235: LD_INT 0
71237: DOUBLE
71238: EQUAL
71239: IFTRUE 71243
71241: GO 71376
71243: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
71244: LD_ADDR_VAR 0 5
71248: PUSH
71249: LD_VAR 0 1
71253: PUSH
71254: LD_INT 4
71256: MINUS
71257: PUSH
71258: LD_VAR 0 2
71262: PUSH
71263: LD_INT 4
71265: MINUS
71266: PUSH
71267: LD_INT 2
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: LIST
71274: PUSH
71275: LD_VAR 0 1
71279: PUSH
71280: LD_INT 3
71282: MINUS
71283: PUSH
71284: LD_VAR 0 2
71288: PUSH
71289: LD_INT 1
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: LIST
71296: PUSH
71297: LD_VAR 0 1
71301: PUSH
71302: LD_INT 4
71304: PLUS
71305: PUSH
71306: LD_VAR 0 2
71310: PUSH
71311: LD_INT 4
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: LIST
71318: PUSH
71319: LD_VAR 0 1
71323: PUSH
71324: LD_INT 3
71326: PLUS
71327: PUSH
71328: LD_VAR 0 2
71332: PUSH
71333: LD_INT 3
71335: PLUS
71336: PUSH
71337: LD_INT 5
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: LIST
71344: PUSH
71345: LD_VAR 0 1
71349: PUSH
71350: LD_VAR 0 2
71354: PUSH
71355: LD_INT 4
71357: PLUS
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: ST_TO_ADDR
// end ; 1 :
71374: GO 72074
71376: LD_INT 1
71378: DOUBLE
71379: EQUAL
71380: IFTRUE 71384
71382: GO 71517
71384: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
71385: LD_ADDR_VAR 0 5
71389: PUSH
71390: LD_VAR 0 1
71394: PUSH
71395: LD_VAR 0 2
71399: PUSH
71400: LD_INT 4
71402: MINUS
71403: PUSH
71404: LD_INT 3
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: LIST
71411: PUSH
71412: LD_VAR 0 1
71416: PUSH
71417: LD_INT 3
71419: MINUS
71420: PUSH
71421: LD_VAR 0 2
71425: PUSH
71426: LD_INT 3
71428: MINUS
71429: PUSH
71430: LD_INT 2
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: LIST
71437: PUSH
71438: LD_VAR 0 1
71442: PUSH
71443: LD_INT 4
71445: MINUS
71446: PUSH
71447: LD_VAR 0 2
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: LIST
71459: PUSH
71460: LD_VAR 0 1
71464: PUSH
71465: LD_VAR 0 2
71469: PUSH
71470: LD_INT 3
71472: PLUS
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: LIST
71481: PUSH
71482: LD_VAR 0 1
71486: PUSH
71487: LD_INT 4
71489: PLUS
71490: PUSH
71491: LD_VAR 0 2
71495: PUSH
71496: LD_INT 4
71498: PLUS
71499: PUSH
71500: LD_INT 5
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: LIST
71507: PUSH
71508: EMPTY
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: ST_TO_ADDR
// end ; 2 :
71515: GO 72074
71517: LD_INT 2
71519: DOUBLE
71520: EQUAL
71521: IFTRUE 71525
71523: GO 71654
71525: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
71526: LD_ADDR_VAR 0 5
71530: PUSH
71531: LD_VAR 0 1
71535: PUSH
71536: LD_VAR 0 2
71540: PUSH
71541: LD_INT 3
71543: MINUS
71544: PUSH
71545: LD_INT 3
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: LIST
71552: PUSH
71553: LD_VAR 0 1
71557: PUSH
71558: LD_INT 4
71560: PLUS
71561: PUSH
71562: LD_VAR 0 2
71566: PUSH
71567: LD_INT 4
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: LIST
71574: PUSH
71575: LD_VAR 0 1
71579: PUSH
71580: LD_VAR 0 2
71584: PUSH
71585: LD_INT 4
71587: PLUS
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: LIST
71596: PUSH
71597: LD_VAR 0 1
71601: PUSH
71602: LD_INT 3
71604: MINUS
71605: PUSH
71606: LD_VAR 0 2
71610: PUSH
71611: LD_INT 1
71613: PUSH
71614: EMPTY
71615: LIST
71616: LIST
71617: LIST
71618: PUSH
71619: LD_VAR 0 1
71623: PUSH
71624: LD_INT 4
71626: MINUS
71627: PUSH
71628: LD_VAR 0 2
71632: PUSH
71633: LD_INT 4
71635: MINUS
71636: PUSH
71637: LD_INT 2
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: LIST
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: ST_TO_ADDR
// end ; 3 :
71652: GO 72074
71654: LD_INT 3
71656: DOUBLE
71657: EQUAL
71658: IFTRUE 71662
71660: GO 71795
71662: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
71663: LD_ADDR_VAR 0 5
71667: PUSH
71668: LD_VAR 0 1
71672: PUSH
71673: LD_INT 3
71675: PLUS
71676: PUSH
71677: LD_VAR 0 2
71681: PUSH
71682: LD_INT 4
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: LIST
71689: PUSH
71690: LD_VAR 0 1
71694: PUSH
71695: LD_INT 4
71697: PLUS
71698: PUSH
71699: LD_VAR 0 2
71703: PUSH
71704: LD_INT 4
71706: PLUS
71707: PUSH
71708: LD_INT 5
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: LIST
71715: PUSH
71716: LD_VAR 0 1
71720: PUSH
71721: LD_INT 4
71723: MINUS
71724: PUSH
71725: LD_VAR 0 2
71729: PUSH
71730: LD_INT 1
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: LIST
71737: PUSH
71738: LD_VAR 0 1
71742: PUSH
71743: LD_VAR 0 2
71747: PUSH
71748: LD_INT 4
71750: MINUS
71751: PUSH
71752: LD_INT 3
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: LIST
71759: PUSH
71760: LD_VAR 0 1
71764: PUSH
71765: LD_INT 3
71767: MINUS
71768: PUSH
71769: LD_VAR 0 2
71773: PUSH
71774: LD_INT 3
71776: MINUS
71777: PUSH
71778: LD_INT 2
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: LIST
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: ST_TO_ADDR
// end ; 4 :
71793: GO 72074
71795: LD_INT 4
71797: DOUBLE
71798: EQUAL
71799: IFTRUE 71803
71801: GO 71936
71803: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71804: LD_ADDR_VAR 0 5
71808: PUSH
71809: LD_VAR 0 1
71813: PUSH
71814: LD_VAR 0 2
71818: PUSH
71819: LD_INT 4
71821: PLUS
71822: PUSH
71823: LD_INT 0
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: LIST
71830: PUSH
71831: LD_VAR 0 1
71835: PUSH
71836: LD_INT 3
71838: PLUS
71839: PUSH
71840: LD_VAR 0 2
71844: PUSH
71845: LD_INT 3
71847: PLUS
71848: PUSH
71849: LD_INT 5
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: LIST
71856: PUSH
71857: LD_VAR 0 1
71861: PUSH
71862: LD_INT 4
71864: PLUS
71865: PUSH
71866: LD_VAR 0 2
71870: PUSH
71871: LD_INT 4
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: LIST
71878: PUSH
71879: LD_VAR 0 1
71883: PUSH
71884: LD_VAR 0 2
71888: PUSH
71889: LD_INT 3
71891: MINUS
71892: PUSH
71893: LD_INT 3
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: LIST
71900: PUSH
71901: LD_VAR 0 1
71905: PUSH
71906: LD_INT 4
71908: MINUS
71909: PUSH
71910: LD_VAR 0 2
71914: PUSH
71915: LD_INT 4
71917: MINUS
71918: PUSH
71919: LD_INT 2
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: LIST
71926: PUSH
71927: EMPTY
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: ST_TO_ADDR
// end ; 5 :
71934: GO 72074
71936: LD_INT 5
71938: DOUBLE
71939: EQUAL
71940: IFTRUE 71944
71942: GO 72073
71944: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71945: LD_ADDR_VAR 0 5
71949: PUSH
71950: LD_VAR 0 1
71954: PUSH
71955: LD_INT 4
71957: MINUS
71958: PUSH
71959: LD_VAR 0 2
71963: PUSH
71964: LD_INT 1
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: LIST
71971: PUSH
71972: LD_VAR 0 1
71976: PUSH
71977: LD_VAR 0 2
71981: PUSH
71982: LD_INT 4
71984: MINUS
71985: PUSH
71986: LD_INT 3
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: LIST
71993: PUSH
71994: LD_VAR 0 1
71998: PUSH
71999: LD_INT 4
72001: PLUS
72002: PUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_INT 4
72010: PLUS
72011: PUSH
72012: LD_INT 5
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: LIST
72019: PUSH
72020: LD_VAR 0 1
72024: PUSH
72025: LD_INT 3
72027: PLUS
72028: PUSH
72029: LD_VAR 0 2
72033: PUSH
72034: LD_INT 4
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: LIST
72041: PUSH
72042: LD_VAR 0 1
72046: PUSH
72047: LD_VAR 0 2
72051: PUSH
72052: LD_INT 3
72054: PLUS
72055: PUSH
72056: LD_INT 0
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: LIST
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: LIST
72068: LIST
72069: LIST
72070: ST_TO_ADDR
// end ; end ;
72071: GO 72074
72073: POP
// result := list ;
72074: LD_ADDR_VAR 0 4
72078: PUSH
72079: LD_VAR 0 5
72083: ST_TO_ADDR
// end ;
72084: LD_VAR 0 4
72088: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
72089: LD_INT 0
72091: PPUSH
72092: PPUSH
72093: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
72094: LD_VAR 0 1
72098: NOT
72099: IFTRUE 72127
72101: PUSH
72102: LD_VAR 0 2
72106: PUSH
72107: LD_INT 1
72109: PUSH
72110: LD_INT 2
72112: PUSH
72113: LD_INT 3
72115: PUSH
72116: LD_INT 4
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: IN
72125: NOT
72126: OR
72127: IFFALSE 72131
// exit ;
72129: GO 72214
// tmp := [ ] ;
72131: LD_ADDR_VAR 0 5
72135: PUSH
72136: EMPTY
72137: ST_TO_ADDR
// for i in units do
72138: LD_ADDR_VAR 0 4
72142: PUSH
72143: LD_VAR 0 1
72147: PUSH
72148: FOR_IN
72149: IFFALSE 72183
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
72151: LD_ADDR_VAR 0 5
72155: PUSH
72156: LD_VAR 0 5
72160: PPUSH
72161: LD_VAR 0 4
72165: PPUSH
72166: LD_VAR 0 2
72170: PPUSH
72171: CALL_OW 259
72175: PPUSH
72176: CALL 73609 0 2
72180: ST_TO_ADDR
72181: GO 72148
72183: POP
72184: POP
// if not tmp then
72185: LD_VAR 0 5
72189: NOT
72190: IFFALSE 72194
// exit ;
72192: GO 72214
// result := SortListByListDesc ( units , tmp ) ;
72194: LD_ADDR_VAR 0 3
72198: PUSH
72199: LD_VAR 0 1
72203: PPUSH
72204: LD_VAR 0 5
72208: PPUSH
72209: CALL_OW 77
72213: ST_TO_ADDR
// end ;
72214: LD_VAR 0 3
72218: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
72219: LD_INT 0
72221: PPUSH
72222: PPUSH
72223: PPUSH
// result := false ;
72224: LD_ADDR_VAR 0 3
72228: PUSH
72229: LD_INT 0
72231: ST_TO_ADDR
// if not building then
72232: LD_VAR 0 2
72236: NOT
72237: IFFALSE 72241
// exit ;
72239: GO 72385
// x := GetX ( building ) ;
72241: LD_ADDR_VAR 0 4
72245: PUSH
72246: LD_VAR 0 2
72250: PPUSH
72251: CALL_OW 250
72255: ST_TO_ADDR
// y := GetY ( building ) ;
72256: LD_ADDR_VAR 0 5
72260: PUSH
72261: LD_VAR 0 2
72265: PPUSH
72266: CALL_OW 251
72270: ST_TO_ADDR
// if not x or not y then
72271: LD_VAR 0 4
72275: NOT
72276: IFTRUE 72285
72278: PUSH
72279: LD_VAR 0 5
72283: NOT
72284: OR
72285: IFFALSE 72289
// exit ;
72287: GO 72385
// if GetTaskList ( unit ) then
72289: LD_VAR 0 1
72293: PPUSH
72294: CALL_OW 437
72298: IFFALSE 72385
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72300: LD_STRING e
72302: PUSH
72303: LD_VAR 0 1
72307: PPUSH
72308: CALL_OW 437
72312: PUSH
72313: LD_INT 1
72315: ARRAY
72316: PUSH
72317: LD_INT 1
72319: ARRAY
72320: EQUAL
72321: IFFALSE 72348
72323: PUSH
72324: LD_VAR 0 4
72328: PUSH
72329: LD_VAR 0 1
72333: PPUSH
72334: CALL_OW 437
72338: PUSH
72339: LD_INT 1
72341: ARRAY
72342: PUSH
72343: LD_INT 2
72345: ARRAY
72346: EQUAL
72347: AND
72348: IFFALSE 72375
72350: PUSH
72351: LD_VAR 0 5
72355: PUSH
72356: LD_VAR 0 1
72360: PPUSH
72361: CALL_OW 437
72365: PUSH
72366: LD_INT 1
72368: ARRAY
72369: PUSH
72370: LD_INT 3
72372: ARRAY
72373: EQUAL
72374: AND
72375: IFFALSE 72385
// result := true end ;
72377: LD_ADDR_VAR 0 3
72381: PUSH
72382: LD_INT 1
72384: ST_TO_ADDR
// end ;
72385: LD_VAR 0 3
72389: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
72390: LD_INT 0
72392: PPUSH
// result := false ;
72393: LD_ADDR_VAR 0 4
72397: PUSH
72398: LD_INT 0
72400: ST_TO_ADDR
// if GetTaskList ( unit ) then
72401: LD_VAR 0 1
72405: PPUSH
72406: CALL_OW 437
72410: IFFALSE 72497
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
72412: LD_STRING M
72414: PUSH
72415: LD_VAR 0 1
72419: PPUSH
72420: CALL_OW 437
72424: PUSH
72425: LD_INT 1
72427: ARRAY
72428: PUSH
72429: LD_INT 1
72431: ARRAY
72432: EQUAL
72433: IFFALSE 72460
72435: PUSH
72436: LD_VAR 0 2
72440: PUSH
72441: LD_VAR 0 1
72445: PPUSH
72446: CALL_OW 437
72450: PUSH
72451: LD_INT 1
72453: ARRAY
72454: PUSH
72455: LD_INT 2
72457: ARRAY
72458: EQUAL
72459: AND
72460: IFFALSE 72487
72462: PUSH
72463: LD_VAR 0 3
72467: PUSH
72468: LD_VAR 0 1
72472: PPUSH
72473: CALL_OW 437
72477: PUSH
72478: LD_INT 1
72480: ARRAY
72481: PUSH
72482: LD_INT 3
72484: ARRAY
72485: EQUAL
72486: AND
72487: IFFALSE 72497
// result := true ;
72489: LD_ADDR_VAR 0 4
72493: PUSH
72494: LD_INT 1
72496: ST_TO_ADDR
// end ; end ;
72497: LD_VAR 0 4
72501: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
72502: LD_INT 0
72504: PPUSH
72505: PPUSH
72506: PPUSH
72507: PPUSH
// if not unit or not area then
72508: LD_VAR 0 1
72512: NOT
72513: IFTRUE 72522
72515: PUSH
72516: LD_VAR 0 2
72520: NOT
72521: OR
72522: IFFALSE 72526
// exit ;
72524: GO 72702
// tmp := AreaToList ( area , i ) ;
72526: LD_ADDR_VAR 0 6
72530: PUSH
72531: LD_VAR 0 2
72535: PPUSH
72536: LD_VAR 0 5
72540: PPUSH
72541: CALL_OW 517
72545: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
72546: LD_ADDR_VAR 0 5
72550: PUSH
72551: DOUBLE
72552: LD_INT 1
72554: DEC
72555: ST_TO_ADDR
72556: LD_VAR 0 6
72560: PUSH
72561: LD_INT 1
72563: ARRAY
72564: PUSH
72565: FOR_TO
72566: IFFALSE 72700
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
72568: LD_ADDR_VAR 0 7
72572: PUSH
72573: LD_VAR 0 6
72577: PUSH
72578: LD_INT 1
72580: ARRAY
72581: PUSH
72582: LD_VAR 0 5
72586: ARRAY
72587: PUSH
72588: LD_VAR 0 6
72592: PUSH
72593: LD_INT 2
72595: ARRAY
72596: PUSH
72597: LD_VAR 0 5
72601: ARRAY
72602: PUSH
72603: EMPTY
72604: LIST
72605: LIST
72606: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
72607: LD_INT 92
72609: PUSH
72610: LD_VAR 0 7
72614: PUSH
72615: LD_INT 1
72617: ARRAY
72618: PUSH
72619: LD_VAR 0 7
72623: PUSH
72624: LD_INT 2
72626: ARRAY
72627: PUSH
72628: LD_INT 2
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: PPUSH
72637: CALL_OW 69
72641: PUSH
72642: LD_INT 0
72644: EQUAL
72645: IFFALSE 72698
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
72647: LD_VAR 0 1
72651: PPUSH
72652: LD_VAR 0 7
72656: PUSH
72657: LD_INT 1
72659: ARRAY
72660: PPUSH
72661: LD_VAR 0 7
72665: PUSH
72666: LD_INT 2
72668: ARRAY
72669: PPUSH
72670: LD_VAR 0 3
72674: PPUSH
72675: CALL_OW 48
// result := IsPlaced ( unit ) ;
72679: LD_ADDR_VAR 0 4
72683: PUSH
72684: LD_VAR 0 1
72688: PPUSH
72689: CALL_OW 305
72693: ST_TO_ADDR
// exit ;
72694: POP
72695: POP
72696: GO 72702
// end ; end ;
72698: GO 72565
72700: POP
72701: POP
// end ;
72702: LD_VAR 0 4
72706: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
72707: LD_INT 0
72709: PPUSH
72710: PPUSH
72711: PPUSH
// if not side or side > 8 then
72712: LD_VAR 0 1
72716: NOT
72717: IFTRUE 72729
72719: PUSH
72720: LD_VAR 0 1
72724: PUSH
72725: LD_INT 8
72727: GREATER
72728: OR
72729: IFFALSE 72733
// exit ;
72731: GO 72920
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
72733: LD_ADDR_VAR 0 4
72737: PUSH
72738: LD_INT 22
72740: PUSH
72741: LD_VAR 0 1
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 21
72752: PUSH
72753: LD_INT 3
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PPUSH
72764: CALL_OW 69
72768: ST_TO_ADDR
// if not tmp then
72769: LD_VAR 0 4
72773: NOT
72774: IFFALSE 72778
// exit ;
72776: GO 72920
// enable_addtolog := true ;
72778: LD_ADDR_OWVAR 81
72782: PUSH
72783: LD_INT 1
72785: ST_TO_ADDR
// AddToLog ( [ ) ;
72786: LD_STRING [
72788: PPUSH
72789: CALL_OW 561
// for i in tmp do
72793: LD_ADDR_VAR 0 3
72797: PUSH
72798: LD_VAR 0 4
72802: PUSH
72803: FOR_IN
72804: IFFALSE 72911
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72806: LD_STRING [
72808: PUSH
72809: LD_VAR 0 3
72813: PPUSH
72814: CALL_OW 266
72818: STR
72819: PUSH
72820: LD_STRING , 
72822: STR
72823: PUSH
72824: LD_VAR 0 3
72828: PPUSH
72829: CALL_OW 250
72833: STR
72834: PUSH
72835: LD_STRING , 
72837: STR
72838: PUSH
72839: LD_VAR 0 3
72843: PPUSH
72844: CALL_OW 251
72848: STR
72849: PUSH
72850: LD_STRING , 
72852: STR
72853: PUSH
72854: LD_VAR 0 3
72858: PPUSH
72859: CALL_OW 254
72863: STR
72864: PUSH
72865: LD_STRING , 
72867: STR
72868: PUSH
72869: LD_VAR 0 3
72873: PPUSH
72874: LD_INT 1
72876: PPUSH
72877: CALL_OW 268
72881: STR
72882: PUSH
72883: LD_STRING , 
72885: STR
72886: PUSH
72887: LD_VAR 0 3
72891: PPUSH
72892: LD_INT 2
72894: PPUSH
72895: CALL_OW 268
72899: STR
72900: PUSH
72901: LD_STRING ],
72903: STR
72904: PPUSH
72905: CALL_OW 561
// end ;
72909: GO 72803
72911: POP
72912: POP
// AddToLog ( ]; ) ;
72913: LD_STRING ];
72915: PPUSH
72916: CALL_OW 561
// end ;
72920: LD_VAR 0 2
72924: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72925: LD_INT 0
72927: PPUSH
72928: PPUSH
72929: PPUSH
72930: PPUSH
72931: PPUSH
// if not area or not rate or not max then
72932: LD_VAR 0 1
72936: NOT
72937: IFTRUE 72946
72939: PUSH
72940: LD_VAR 0 2
72944: NOT
72945: OR
72946: IFTRUE 72955
72948: PUSH
72949: LD_VAR 0 4
72953: NOT
72954: OR
72955: IFFALSE 72959
// exit ;
72957: GO 73148
// while 1 do
72959: LD_INT 1
72961: IFFALSE 73148
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72963: LD_ADDR_VAR 0 9
72967: PUSH
72968: LD_VAR 0 1
72972: PPUSH
72973: LD_INT 1
72975: PPUSH
72976: CALL_OW 287
72980: PUSH
72981: LD_INT 10
72983: MUL
72984: ST_TO_ADDR
// r := rate / 10 ;
72985: LD_ADDR_VAR 0 7
72989: PUSH
72990: LD_VAR 0 2
72994: PUSH
72995: LD_INT 10
72997: DIVREAL
72998: ST_TO_ADDR
// time := 1 1$00 ;
72999: LD_ADDR_VAR 0 8
73003: PUSH
73004: LD_INT 2100
73006: ST_TO_ADDR
// if amount < min then
73007: LD_VAR 0 9
73011: PUSH
73012: LD_VAR 0 3
73016: LESS
73017: IFFALSE 73035
// r := r * 2 else
73019: LD_ADDR_VAR 0 7
73023: PUSH
73024: LD_VAR 0 7
73028: PUSH
73029: LD_INT 2
73031: MUL
73032: ST_TO_ADDR
73033: GO 73061
// if amount > max then
73035: LD_VAR 0 9
73039: PUSH
73040: LD_VAR 0 4
73044: GREATER
73045: IFFALSE 73061
// r := r / 2 ;
73047: LD_ADDR_VAR 0 7
73051: PUSH
73052: LD_VAR 0 7
73056: PUSH
73057: LD_INT 2
73059: DIVREAL
73060: ST_TO_ADDR
// time := time / r ;
73061: LD_ADDR_VAR 0 8
73065: PUSH
73066: LD_VAR 0 8
73070: PUSH
73071: LD_VAR 0 7
73075: DIVREAL
73076: ST_TO_ADDR
// if time < 0 then
73077: LD_VAR 0 8
73081: PUSH
73082: LD_INT 0
73084: LESS
73085: IFFALSE 73102
// time := time * - 1 ;
73087: LD_ADDR_VAR 0 8
73091: PUSH
73092: LD_VAR 0 8
73096: PUSH
73097: LD_INT 1
73099: NEG
73100: MUL
73101: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
73102: LD_VAR 0 8
73106: PUSH
73107: LD_INT 35
73109: PPUSH
73110: LD_INT 875
73112: PPUSH
73113: CALL_OW 12
73117: PLUS
73118: PPUSH
73119: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
73123: LD_INT 1
73125: PPUSH
73126: LD_INT 5
73128: PPUSH
73129: CALL_OW 12
73133: PPUSH
73134: LD_VAR 0 1
73138: PPUSH
73139: LD_INT 1
73141: PPUSH
73142: CALL_OW 55
// end ;
73146: GO 72959
// end ;
73148: LD_VAR 0 5
73152: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
73153: LD_INT 0
73155: PPUSH
73156: PPUSH
73157: PPUSH
73158: PPUSH
73159: PPUSH
73160: PPUSH
73161: PPUSH
73162: PPUSH
// if not turrets or not factories then
73163: LD_VAR 0 1
73167: NOT
73168: IFTRUE 73177
73170: PUSH
73171: LD_VAR 0 2
73175: NOT
73176: OR
73177: IFFALSE 73181
// exit ;
73179: GO 73488
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
73181: LD_ADDR_VAR 0 10
73185: PUSH
73186: LD_INT 5
73188: PUSH
73189: LD_INT 6
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 2
73198: PUSH
73199: LD_INT 4
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_INT 3
73208: PUSH
73209: LD_INT 5
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 24
73223: PUSH
73224: LD_INT 25
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 23
73233: PUSH
73234: LD_INT 27
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 42
73247: PUSH
73248: LD_INT 43
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: PUSH
73255: LD_INT 44
73257: PUSH
73258: LD_INT 46
73260: PUSH
73261: EMPTY
73262: LIST
73263: LIST
73264: PUSH
73265: LD_INT 45
73267: PUSH
73268: LD_INT 47
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: LIST
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: LIST
73284: ST_TO_ADDR
// result := [ ] ;
73285: LD_ADDR_VAR 0 3
73289: PUSH
73290: EMPTY
73291: ST_TO_ADDR
// for i in turrets do
73292: LD_ADDR_VAR 0 4
73296: PUSH
73297: LD_VAR 0 1
73301: PUSH
73302: FOR_IN
73303: IFFALSE 73486
// begin nat := GetNation ( i ) ;
73305: LD_ADDR_VAR 0 7
73309: PUSH
73310: LD_VAR 0 4
73314: PPUSH
73315: CALL_OW 248
73319: ST_TO_ADDR
// weapon := 0 ;
73320: LD_ADDR_VAR 0 8
73324: PUSH
73325: LD_INT 0
73327: ST_TO_ADDR
// if not nat then
73328: LD_VAR 0 7
73332: NOT
73333: IFFALSE 73337
// continue ;
73335: GO 73302
// for j in list [ nat ] do
73337: LD_ADDR_VAR 0 5
73341: PUSH
73342: LD_VAR 0 10
73346: PUSH
73347: LD_VAR 0 7
73351: ARRAY
73352: PUSH
73353: FOR_IN
73354: IFFALSE 73395
// if GetBWeapon ( i ) = j [ 1 ] then
73356: LD_VAR 0 4
73360: PPUSH
73361: CALL_OW 269
73365: PUSH
73366: LD_VAR 0 5
73370: PUSH
73371: LD_INT 1
73373: ARRAY
73374: EQUAL
73375: IFFALSE 73393
// begin weapon := j [ 2 ] ;
73377: LD_ADDR_VAR 0 8
73381: PUSH
73382: LD_VAR 0 5
73386: PUSH
73387: LD_INT 2
73389: ARRAY
73390: ST_TO_ADDR
// break ;
73391: GO 73395
// end ;
73393: GO 73353
73395: POP
73396: POP
// if not weapon then
73397: LD_VAR 0 8
73401: NOT
73402: IFFALSE 73406
// continue ;
73404: GO 73302
// for k in factories do
73406: LD_ADDR_VAR 0 6
73410: PUSH
73411: LD_VAR 0 2
73415: PUSH
73416: FOR_IN
73417: IFFALSE 73482
// begin weapons := AvailableWeaponList ( k ) ;
73419: LD_ADDR_VAR 0 9
73423: PUSH
73424: LD_VAR 0 6
73428: PPUSH
73429: CALL_OW 478
73433: ST_TO_ADDR
// if not weapons then
73434: LD_VAR 0 9
73438: NOT
73439: IFFALSE 73443
// continue ;
73441: GO 73416
// if weapon in weapons then
73443: LD_VAR 0 8
73447: PUSH
73448: LD_VAR 0 9
73452: IN
73453: IFFALSE 73480
// begin result := [ i , weapon ] ;
73455: LD_ADDR_VAR 0 3
73459: PUSH
73460: LD_VAR 0 4
73464: PUSH
73465: LD_VAR 0 8
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: ST_TO_ADDR
// exit ;
73474: POP
73475: POP
73476: POP
73477: POP
73478: GO 73488
// end ; end ;
73480: GO 73416
73482: POP
73483: POP
// end ;
73484: GO 73302
73486: POP
73487: POP
// end ;
73488: LD_VAR 0 3
73492: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
73493: LD_INT 0
73495: PPUSH
// if not side or side > 8 then
73496: LD_VAR 0 3
73500: NOT
73501: IFTRUE 73513
73503: PUSH
73504: LD_VAR 0 3
73508: PUSH
73509: LD_INT 8
73511: GREATER
73512: OR
73513: IFFALSE 73517
// exit ;
73515: GO 73576
// if not range then
73517: LD_VAR 0 4
73521: NOT
73522: IFFALSE 73533
// range := - 12 ;
73524: LD_ADDR_VAR 0 4
73528: PUSH
73529: LD_INT 12
73531: NEG
73532: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
73533: LD_VAR 0 1
73537: PPUSH
73538: LD_VAR 0 2
73542: PPUSH
73543: LD_VAR 0 3
73547: PPUSH
73548: LD_VAR 0 4
73552: PPUSH
73553: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
73557: LD_VAR 0 1
73561: PPUSH
73562: LD_VAR 0 2
73566: PPUSH
73567: LD_VAR 0 3
73571: PPUSH
73572: CALL_OW 331
// end ;
73576: LD_VAR 0 5
73580: RET
// export function Video ( mode ) ; begin
73581: LD_INT 0
73583: PPUSH
// ingame_video = mode ;
73584: LD_ADDR_OWVAR 52
73588: PUSH
73589: LD_VAR 0 1
73593: ST_TO_ADDR
// interface_hidden = mode ;
73594: LD_ADDR_OWVAR 54
73598: PUSH
73599: LD_VAR 0 1
73603: ST_TO_ADDR
// end ;
73604: LD_VAR 0 2
73608: RET
// export function Join ( array , element ) ; begin
73609: LD_INT 0
73611: PPUSH
// result := Replace ( array , array + 1 , element ) ;
73612: LD_ADDR_VAR 0 3
73616: PUSH
73617: LD_VAR 0 1
73621: PPUSH
73622: LD_VAR 0 1
73626: PUSH
73627: LD_INT 1
73629: PLUS
73630: PPUSH
73631: LD_VAR 0 2
73635: PPUSH
73636: CALL_OW 1
73640: ST_TO_ADDR
// end ;
73641: LD_VAR 0 3
73645: RET
// export function JoinUnion ( array , element ) ; begin
73646: LD_INT 0
73648: PPUSH
// result := array union element ;
73649: LD_ADDR_VAR 0 3
73653: PUSH
73654: LD_VAR 0 1
73658: PUSH
73659: LD_VAR 0 2
73663: UNION
73664: ST_TO_ADDR
// end ;
73665: LD_VAR 0 3
73669: RET
// export function GetBehemoths ( side ) ; begin
73670: LD_INT 0
73672: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
73673: LD_ADDR_VAR 0 2
73677: PUSH
73678: LD_INT 22
73680: PUSH
73681: LD_VAR 0 1
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 31
73692: PUSH
73693: LD_INT 25
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PPUSH
73704: CALL_OW 69
73708: ST_TO_ADDR
// end ;
73709: LD_VAR 0 2
73713: RET
// export function Shuffle ( array ) ; var i , index ; begin
73714: LD_INT 0
73716: PPUSH
73717: PPUSH
73718: PPUSH
// result := [ ] ;
73719: LD_ADDR_VAR 0 2
73723: PUSH
73724: EMPTY
73725: ST_TO_ADDR
// if not array then
73726: LD_VAR 0 1
73730: NOT
73731: IFFALSE 73735
// exit ;
73733: GO 73834
// Randomize ;
73735: CALL_OW 10
// for i = array downto 1 do
73739: LD_ADDR_VAR 0 3
73743: PUSH
73744: DOUBLE
73745: LD_VAR 0 1
73749: INC
73750: ST_TO_ADDR
73751: LD_INT 1
73753: PUSH
73754: FOR_DOWNTO
73755: IFFALSE 73832
// begin index := rand ( 1 , array ) ;
73757: LD_ADDR_VAR 0 4
73761: PUSH
73762: LD_INT 1
73764: PPUSH
73765: LD_VAR 0 1
73769: PPUSH
73770: CALL_OW 12
73774: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73775: LD_ADDR_VAR 0 2
73779: PUSH
73780: LD_VAR 0 2
73784: PPUSH
73785: LD_VAR 0 2
73789: PUSH
73790: LD_INT 1
73792: PLUS
73793: PPUSH
73794: LD_VAR 0 1
73798: PUSH
73799: LD_VAR 0 4
73803: ARRAY
73804: PPUSH
73805: CALL_OW 2
73809: ST_TO_ADDR
// array := Delete ( array , index ) ;
73810: LD_ADDR_VAR 0 1
73814: PUSH
73815: LD_VAR 0 1
73819: PPUSH
73820: LD_VAR 0 4
73824: PPUSH
73825: CALL_OW 3
73829: ST_TO_ADDR
// end ;
73830: GO 73754
73832: POP
73833: POP
// end ;
73834: LD_VAR 0 2
73838: RET
// export function GetBaseMaterials ( base ) ; begin
73839: LD_INT 0
73841: PPUSH
// result := [ 0 , 0 , 0 ] ;
73842: LD_ADDR_VAR 0 2
73846: PUSH
73847: LD_INT 0
73849: PUSH
73850: LD_INT 0
73852: PUSH
73853: LD_INT 0
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: LIST
73860: ST_TO_ADDR
// if not base then
73861: LD_VAR 0 1
73865: NOT
73866: IFFALSE 73870
// exit ;
73868: GO 73919
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73870: LD_ADDR_VAR 0 2
73874: PUSH
73875: LD_VAR 0 1
73879: PPUSH
73880: LD_INT 1
73882: PPUSH
73883: CALL_OW 275
73887: PUSH
73888: LD_VAR 0 1
73892: PPUSH
73893: LD_INT 2
73895: PPUSH
73896: CALL_OW 275
73900: PUSH
73901: LD_VAR 0 1
73905: PPUSH
73906: LD_INT 3
73908: PPUSH
73909: CALL_OW 275
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: ST_TO_ADDR
// end ;
73919: LD_VAR 0 2
73923: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73924: LD_INT 0
73926: PPUSH
73927: PPUSH
// result := array ;
73928: LD_ADDR_VAR 0 3
73932: PUSH
73933: LD_VAR 0 1
73937: ST_TO_ADDR
// if size >= result then
73938: LD_VAR 0 2
73942: PUSH
73943: LD_VAR 0 3
73947: GREATEREQUAL
73948: IFFALSE 73952
// exit ;
73950: GO 74002
// if size then
73952: LD_VAR 0 2
73956: IFFALSE 74002
// for i := array downto size do
73958: LD_ADDR_VAR 0 4
73962: PUSH
73963: DOUBLE
73964: LD_VAR 0 1
73968: INC
73969: ST_TO_ADDR
73970: LD_VAR 0 2
73974: PUSH
73975: FOR_DOWNTO
73976: IFFALSE 74000
// result := Delete ( result , result ) ;
73978: LD_ADDR_VAR 0 3
73982: PUSH
73983: LD_VAR 0 3
73987: PPUSH
73988: LD_VAR 0 3
73992: PPUSH
73993: CALL_OW 3
73997: ST_TO_ADDR
73998: GO 73975
74000: POP
74001: POP
// end ;
74002: LD_VAR 0 3
74006: RET
// export function ComExit ( unit ) ; var tmp ; begin
74007: LD_INT 0
74009: PPUSH
74010: PPUSH
// if not IsInUnit ( unit ) then
74011: LD_VAR 0 1
74015: PPUSH
74016: CALL_OW 310
74020: NOT
74021: IFFALSE 74025
// exit ;
74023: GO 74085
// tmp := IsInUnit ( unit ) ;
74025: LD_ADDR_VAR 0 3
74029: PUSH
74030: LD_VAR 0 1
74034: PPUSH
74035: CALL_OW 310
74039: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
74040: LD_VAR 0 3
74044: PPUSH
74045: CALL_OW 247
74049: PUSH
74050: LD_INT 2
74052: EQUAL
74053: IFFALSE 74066
// ComExitVehicle ( unit ) else
74055: LD_VAR 0 1
74059: PPUSH
74060: CALL_OW 121
74064: GO 74075
// ComExitBuilding ( unit ) ;
74066: LD_VAR 0 1
74070: PPUSH
74071: CALL_OW 122
// result := tmp ;
74075: LD_ADDR_VAR 0 2
74079: PUSH
74080: LD_VAR 0 3
74084: ST_TO_ADDR
// end ;
74085: LD_VAR 0 2
74089: RET
// export function ComExitAll ( units ) ; var i ; begin
74090: LD_INT 0
74092: PPUSH
74093: PPUSH
// if not units then
74094: LD_VAR 0 1
74098: NOT
74099: IFFALSE 74103
// exit ;
74101: GO 74129
// for i in units do
74103: LD_ADDR_VAR 0 3
74107: PUSH
74108: LD_VAR 0 1
74112: PUSH
74113: FOR_IN
74114: IFFALSE 74127
// ComExit ( i ) ;
74116: LD_VAR 0 3
74120: PPUSH
74121: CALL 74007 0 1
74125: GO 74113
74127: POP
74128: POP
// end ;
74129: LD_VAR 0 2
74133: RET
// export function ResetHc ; begin
74134: LD_INT 0
74136: PPUSH
// InitHc ;
74137: CALL_OW 19
// hc_importance := 0 ;
74141: LD_ADDR_OWVAR 32
74145: PUSH
74146: LD_INT 0
74148: ST_TO_ADDR
// end ;
74149: LD_VAR 0 1
74153: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
74154: LD_INT 0
74156: PPUSH
74157: PPUSH
74158: PPUSH
// _x := ( x1 + x2 ) div 2 ;
74159: LD_ADDR_VAR 0 6
74163: PUSH
74164: LD_VAR 0 1
74168: PUSH
74169: LD_VAR 0 3
74173: PLUS
74174: PUSH
74175: LD_INT 2
74177: DIV
74178: ST_TO_ADDR
// if _x < 0 then
74179: LD_VAR 0 6
74183: PUSH
74184: LD_INT 0
74186: LESS
74187: IFFALSE 74204
// _x := _x * - 1 ;
74189: LD_ADDR_VAR 0 6
74193: PUSH
74194: LD_VAR 0 6
74198: PUSH
74199: LD_INT 1
74201: NEG
74202: MUL
74203: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
74204: LD_ADDR_VAR 0 7
74208: PUSH
74209: LD_VAR 0 2
74213: PUSH
74214: LD_VAR 0 4
74218: PLUS
74219: PUSH
74220: LD_INT 2
74222: DIV
74223: ST_TO_ADDR
// if _y < 0 then
74224: LD_VAR 0 7
74228: PUSH
74229: LD_INT 0
74231: LESS
74232: IFFALSE 74249
// _y := _y * - 1 ;
74234: LD_ADDR_VAR 0 7
74238: PUSH
74239: LD_VAR 0 7
74243: PUSH
74244: LD_INT 1
74246: NEG
74247: MUL
74248: ST_TO_ADDR
// result := [ _x , _y ] ;
74249: LD_ADDR_VAR 0 5
74253: PUSH
74254: LD_VAR 0 6
74258: PUSH
74259: LD_VAR 0 7
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: ST_TO_ADDR
// end ;
74268: LD_VAR 0 5
74272: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
74273: LD_INT 0
74275: PPUSH
74276: PPUSH
74277: PPUSH
74278: PPUSH
// task := GetTaskList ( unit ) ;
74279: LD_ADDR_VAR 0 7
74283: PUSH
74284: LD_VAR 0 1
74288: PPUSH
74289: CALL_OW 437
74293: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
74294: LD_VAR 0 7
74298: NOT
74299: IFFALSE 74318
74301: PUSH
74302: LD_VAR 0 1
74306: PPUSH
74307: LD_VAR 0 2
74311: PPUSH
74312: CALL_OW 308
74316: NOT
74317: AND
74318: IFFALSE 74322
// exit ;
74320: GO 74440
// if IsInArea ( unit , area ) then
74322: LD_VAR 0 1
74326: PPUSH
74327: LD_VAR 0 2
74331: PPUSH
74332: CALL_OW 308
74336: IFFALSE 74354
// begin ComMoveToArea ( unit , goAway ) ;
74338: LD_VAR 0 1
74342: PPUSH
74343: LD_VAR 0 3
74347: PPUSH
74348: CALL_OW 113
// exit ;
74352: GO 74440
// end ; if task [ 1 ] [ 1 ] <> M then
74354: LD_VAR 0 7
74358: PUSH
74359: LD_INT 1
74361: ARRAY
74362: PUSH
74363: LD_INT 1
74365: ARRAY
74366: PUSH
74367: LD_STRING M
74369: NONEQUAL
74370: IFFALSE 74374
// exit ;
74372: GO 74440
// x := task [ 1 ] [ 2 ] ;
74374: LD_ADDR_VAR 0 5
74378: PUSH
74379: LD_VAR 0 7
74383: PUSH
74384: LD_INT 1
74386: ARRAY
74387: PUSH
74388: LD_INT 2
74390: ARRAY
74391: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
74392: LD_ADDR_VAR 0 6
74396: PUSH
74397: LD_VAR 0 7
74401: PUSH
74402: LD_INT 1
74404: ARRAY
74405: PUSH
74406: LD_INT 3
74408: ARRAY
74409: ST_TO_ADDR
// if InArea ( x , y , area ) then
74410: LD_VAR 0 5
74414: PPUSH
74415: LD_VAR 0 6
74419: PPUSH
74420: LD_VAR 0 2
74424: PPUSH
74425: CALL_OW 309
74429: IFFALSE 74440
// ComStop ( unit ) ;
74431: LD_VAR 0 1
74435: PPUSH
74436: CALL_OW 141
// end ;
74440: LD_VAR 0 4
74444: RET
// export function Abs ( value ) ; begin
74445: LD_INT 0
74447: PPUSH
// result := value ;
74448: LD_ADDR_VAR 0 2
74452: PUSH
74453: LD_VAR 0 1
74457: ST_TO_ADDR
// if value < 0 then
74458: LD_VAR 0 1
74462: PUSH
74463: LD_INT 0
74465: LESS
74466: IFFALSE 74483
// result := value * - 1 ;
74468: LD_ADDR_VAR 0 2
74472: PUSH
74473: LD_VAR 0 1
74477: PUSH
74478: LD_INT 1
74480: NEG
74481: MUL
74482: ST_TO_ADDR
// end ;
74483: LD_VAR 0 2
74487: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
74488: LD_INT 0
74490: PPUSH
74491: PPUSH
74492: PPUSH
74493: PPUSH
74494: PPUSH
74495: PPUSH
74496: PPUSH
74497: PPUSH
// if not unit or not building then
74498: LD_VAR 0 1
74502: NOT
74503: IFTRUE 74512
74505: PUSH
74506: LD_VAR 0 2
74510: NOT
74511: OR
74512: IFFALSE 74516
// exit ;
74514: GO 74744
// x := GetX ( building ) ;
74516: LD_ADDR_VAR 0 4
74520: PUSH
74521: LD_VAR 0 2
74525: PPUSH
74526: CALL_OW 250
74530: ST_TO_ADDR
// y := GetY ( building ) ;
74531: LD_ADDR_VAR 0 6
74535: PUSH
74536: LD_VAR 0 2
74540: PPUSH
74541: CALL_OW 251
74545: ST_TO_ADDR
// d := GetDir ( building ) ;
74546: LD_ADDR_VAR 0 8
74550: PUSH
74551: LD_VAR 0 2
74555: PPUSH
74556: CALL_OW 254
74560: ST_TO_ADDR
// r := 4 ;
74561: LD_ADDR_VAR 0 9
74565: PUSH
74566: LD_INT 4
74568: ST_TO_ADDR
// for i := 1 to 5 do
74569: LD_ADDR_VAR 0 10
74573: PUSH
74574: DOUBLE
74575: LD_INT 1
74577: DEC
74578: ST_TO_ADDR
74579: LD_INT 5
74581: PUSH
74582: FOR_TO
74583: IFFALSE 74742
// begin _x := ShiftX ( x , d , r + i ) ;
74585: LD_ADDR_VAR 0 5
74589: PUSH
74590: LD_VAR 0 4
74594: PPUSH
74595: LD_VAR 0 8
74599: PPUSH
74600: LD_VAR 0 9
74604: PUSH
74605: LD_VAR 0 10
74609: PLUS
74610: PPUSH
74611: CALL_OW 272
74615: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
74616: LD_ADDR_VAR 0 7
74620: PUSH
74621: LD_VAR 0 6
74625: PPUSH
74626: LD_VAR 0 8
74630: PPUSH
74631: LD_VAR 0 9
74635: PUSH
74636: LD_VAR 0 10
74640: PLUS
74641: PPUSH
74642: CALL_OW 273
74646: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
74647: LD_VAR 0 5
74651: PPUSH
74652: LD_VAR 0 7
74656: PPUSH
74657: CALL_OW 488
74661: IFFALSE 74696
74663: PUSH
74664: LD_VAR 0 5
74668: PPUSH
74669: LD_VAR 0 7
74673: PPUSH
74674: CALL_OW 428
74678: PPUSH
74679: CALL_OW 247
74683: PUSH
74684: LD_INT 3
74686: PUSH
74687: LD_INT 2
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: IN
74694: NOT
74695: AND
74696: IFFALSE 74740
// begin ComMoveXY ( unit , _x , _y ) ;
74698: LD_VAR 0 1
74702: PPUSH
74703: LD_VAR 0 5
74707: PPUSH
74708: LD_VAR 0 7
74712: PPUSH
74713: CALL_OW 111
// result := [ _x , _y ] ;
74717: LD_ADDR_VAR 0 3
74721: PUSH
74722: LD_VAR 0 5
74726: PUSH
74727: LD_VAR 0 7
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: ST_TO_ADDR
// exit ;
74736: POP
74737: POP
74738: GO 74744
// end ; end ;
74740: GO 74582
74742: POP
74743: POP
// end ;
74744: LD_VAR 0 3
74748: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
74749: LD_INT 0
74751: PPUSH
74752: PPUSH
74753: PPUSH
// result := 0 ;
74754: LD_ADDR_VAR 0 3
74758: PUSH
74759: LD_INT 0
74761: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74762: LD_VAR 0 1
74766: PUSH
74767: LD_INT 0
74769: LESS
74770: IFTRUE 74782
74772: PUSH
74773: LD_VAR 0 1
74777: PUSH
74778: LD_INT 8
74780: GREATER
74781: OR
74782: IFTRUE 74794
74784: PUSH
74785: LD_VAR 0 2
74789: PUSH
74790: LD_INT 0
74792: LESS
74793: OR
74794: IFTRUE 74806
74796: PUSH
74797: LD_VAR 0 2
74801: PUSH
74802: LD_INT 8
74804: GREATER
74805: OR
74806: IFFALSE 74810
// exit ;
74808: GO 74885
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74810: LD_ADDR_VAR 0 4
74814: PUSH
74815: LD_INT 22
74817: PUSH
74818: LD_VAR 0 2
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PPUSH
74827: CALL_OW 69
74831: PUSH
74832: FOR_IN
74833: IFFALSE 74883
// begin un := UnitShoot ( i ) ;
74835: LD_ADDR_VAR 0 5
74839: PUSH
74840: LD_VAR 0 4
74844: PPUSH
74845: CALL_OW 504
74849: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74850: LD_VAR 0 5
74854: PPUSH
74855: CALL_OW 255
74859: PUSH
74860: LD_VAR 0 1
74864: EQUAL
74865: IFFALSE 74881
// begin result := un ;
74867: LD_ADDR_VAR 0 3
74871: PUSH
74872: LD_VAR 0 5
74876: ST_TO_ADDR
// exit ;
74877: POP
74878: POP
74879: GO 74885
// end ; end ;
74881: GO 74832
74883: POP
74884: POP
// end ;
74885: LD_VAR 0 3
74889: RET
// export function GetCargoBay ( units ) ; begin
74890: LD_INT 0
74892: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74893: LD_ADDR_VAR 0 2
74897: PUSH
74898: LD_VAR 0 1
74902: PPUSH
74903: LD_INT 2
74905: PUSH
74906: LD_INT 34
74908: PUSH
74909: LD_INT 12
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 34
74918: PUSH
74919: LD_INT 51
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: PUSH
74926: LD_INT 34
74928: PUSH
74929: LD_INT 32
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 34
74938: PUSH
74939: LD_INT 89
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: PPUSH
74953: CALL_OW 72
74957: ST_TO_ADDR
// end ;
74958: LD_VAR 0 2
74962: RET
// export function Negate ( value ) ; begin
74963: LD_INT 0
74965: PPUSH
// result := not value ;
74966: LD_ADDR_VAR 0 2
74970: PUSH
74971: LD_VAR 0 1
74975: NOT
74976: ST_TO_ADDR
// end ;
74977: LD_VAR 0 2
74981: RET
// export function Inc ( value ) ; begin
74982: LD_INT 0
74984: PPUSH
// result := value + 1 ;
74985: LD_ADDR_VAR 0 2
74989: PUSH
74990: LD_VAR 0 1
74994: PUSH
74995: LD_INT 1
74997: PLUS
74998: ST_TO_ADDR
// end ;
74999: LD_VAR 0 2
75003: RET
// export function Dec ( value ) ; begin
75004: LD_INT 0
75006: PPUSH
// result := value - 1 ;
75007: LD_ADDR_VAR 0 2
75011: PUSH
75012: LD_VAR 0 1
75016: PUSH
75017: LD_INT 1
75019: MINUS
75020: ST_TO_ADDR
// end ;
75021: LD_VAR 0 2
75025: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
75026: LD_INT 0
75028: PPUSH
75029: PPUSH
75030: PPUSH
75031: PPUSH
75032: PPUSH
75033: PPUSH
75034: PPUSH
75035: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
75036: LD_VAR 0 1
75040: PPUSH
75041: LD_VAR 0 2
75045: PPUSH
75046: CALL_OW 488
75050: NOT
75051: IFTRUE 75070
75053: PUSH
75054: LD_VAR 0 3
75058: PPUSH
75059: LD_VAR 0 4
75063: PPUSH
75064: CALL_OW 488
75068: NOT
75069: OR
75070: IFFALSE 75083
// begin result := - 1 ;
75072: LD_ADDR_VAR 0 5
75076: PUSH
75077: LD_INT 1
75079: NEG
75080: ST_TO_ADDR
// exit ;
75081: GO 75318
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
75083: LD_ADDR_VAR 0 12
75087: PUSH
75088: LD_VAR 0 1
75092: PPUSH
75093: LD_VAR 0 2
75097: PPUSH
75098: LD_VAR 0 3
75102: PPUSH
75103: LD_VAR 0 4
75107: PPUSH
75108: CALL 74154 0 4
75112: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
75113: LD_ADDR_VAR 0 11
75117: PUSH
75118: LD_VAR 0 1
75122: PPUSH
75123: LD_VAR 0 2
75127: PPUSH
75128: LD_VAR 0 12
75132: PUSH
75133: LD_INT 1
75135: ARRAY
75136: PPUSH
75137: LD_VAR 0 12
75141: PUSH
75142: LD_INT 2
75144: ARRAY
75145: PPUSH
75146: CALL_OW 298
75150: ST_TO_ADDR
// distance := 9999 ;
75151: LD_ADDR_VAR 0 10
75155: PUSH
75156: LD_INT 9999
75158: ST_TO_ADDR
// for i := 0 to 5 do
75159: LD_ADDR_VAR 0 6
75163: PUSH
75164: DOUBLE
75165: LD_INT 0
75167: DEC
75168: ST_TO_ADDR
75169: LD_INT 5
75171: PUSH
75172: FOR_TO
75173: IFFALSE 75316
// begin _x := ShiftX ( x1 , i , centerDist ) ;
75175: LD_ADDR_VAR 0 7
75179: PUSH
75180: LD_VAR 0 1
75184: PPUSH
75185: LD_VAR 0 6
75189: PPUSH
75190: LD_VAR 0 11
75194: PPUSH
75195: CALL_OW 272
75199: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
75200: LD_ADDR_VAR 0 8
75204: PUSH
75205: LD_VAR 0 2
75209: PPUSH
75210: LD_VAR 0 6
75214: PPUSH
75215: LD_VAR 0 11
75219: PPUSH
75220: CALL_OW 273
75224: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75225: LD_VAR 0 7
75229: PPUSH
75230: LD_VAR 0 8
75234: PPUSH
75235: CALL_OW 488
75239: NOT
75240: IFFALSE 75244
// continue ;
75242: GO 75172
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
75244: LD_ADDR_VAR 0 9
75248: PUSH
75249: LD_VAR 0 12
75253: PUSH
75254: LD_INT 1
75256: ARRAY
75257: PPUSH
75258: LD_VAR 0 12
75262: PUSH
75263: LD_INT 2
75265: ARRAY
75266: PPUSH
75267: LD_VAR 0 7
75271: PPUSH
75272: LD_VAR 0 8
75276: PPUSH
75277: CALL_OW 298
75281: ST_TO_ADDR
// if tmp < distance then
75282: LD_VAR 0 9
75286: PUSH
75287: LD_VAR 0 10
75291: LESS
75292: IFFALSE 75314
// begin result := i ;
75294: LD_ADDR_VAR 0 5
75298: PUSH
75299: LD_VAR 0 6
75303: ST_TO_ADDR
// distance := tmp ;
75304: LD_ADDR_VAR 0 10
75308: PUSH
75309: LD_VAR 0 9
75313: ST_TO_ADDR
// end ; end ;
75314: GO 75172
75316: POP
75317: POP
// end ;
75318: LD_VAR 0 5
75322: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75323: LD_INT 0
75325: PPUSH
75326: PPUSH
// if not driver or not IsInUnit ( driver ) then
75327: LD_VAR 0 1
75331: NOT
75332: IFTRUE 75346
75334: PUSH
75335: LD_VAR 0 1
75339: PPUSH
75340: CALL_OW 310
75344: NOT
75345: OR
75346: IFFALSE 75350
// exit ;
75348: GO 75440
// vehicle := IsInUnit ( driver ) ;
75350: LD_ADDR_VAR 0 3
75354: PUSH
75355: LD_VAR 0 1
75359: PPUSH
75360: CALL_OW 310
75364: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75365: LD_VAR 0 1
75369: PPUSH
75370: LD_STRING \
75372: PUSH
75373: LD_INT 0
75375: PUSH
75376: LD_INT 0
75378: PUSH
75379: LD_INT 0
75381: PUSH
75382: LD_INT 0
75384: PUSH
75385: LD_INT 0
75387: PUSH
75388: LD_INT 0
75390: PUSH
75391: EMPTY
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: PUSH
75400: LD_STRING E
75402: PUSH
75403: LD_INT 0
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: LD_VAR 0 3
75413: PUSH
75414: LD_INT 0
75416: PUSH
75417: LD_INT 0
75419: PUSH
75420: LD_INT 0
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: LIST
75427: LIST
75428: LIST
75429: LIST
75430: LIST
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PPUSH
75436: CALL_OW 446
// end ;
75440: LD_VAR 0 2
75444: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
75445: LD_INT 0
75447: PPUSH
75448: PPUSH
// if not driver or not IsInUnit ( driver ) then
75449: LD_VAR 0 1
75453: NOT
75454: IFTRUE 75468
75456: PUSH
75457: LD_VAR 0 1
75461: PPUSH
75462: CALL_OW 310
75466: NOT
75467: OR
75468: IFFALSE 75472
// exit ;
75470: GO 75562
// vehicle := IsInUnit ( driver ) ;
75472: LD_ADDR_VAR 0 3
75476: PUSH
75477: LD_VAR 0 1
75481: PPUSH
75482: CALL_OW 310
75486: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
75487: LD_VAR 0 1
75491: PPUSH
75492: LD_STRING \
75494: PUSH
75495: LD_INT 0
75497: PUSH
75498: LD_INT 0
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: LD_INT 0
75506: PUSH
75507: LD_INT 0
75509: PUSH
75510: LD_INT 0
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: LIST
75521: PUSH
75522: LD_STRING E
75524: PUSH
75525: LD_INT 0
75527: PUSH
75528: LD_INT 0
75530: PUSH
75531: LD_VAR 0 3
75535: PUSH
75536: LD_INT 0
75538: PUSH
75539: LD_INT 0
75541: PUSH
75542: LD_INT 0
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: LIST
75549: LIST
75550: LIST
75551: LIST
75552: LIST
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PPUSH
75558: CALL_OW 447
// end ;
75562: LD_VAR 0 2
75566: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
75567: LD_INT 0
75569: PPUSH
75570: PPUSH
75571: PPUSH
// tmp := [ ] ;
75572: LD_ADDR_VAR 0 5
75576: PUSH
75577: EMPTY
75578: ST_TO_ADDR
// for i in units do
75579: LD_ADDR_VAR 0 4
75583: PUSH
75584: LD_VAR 0 1
75588: PUSH
75589: FOR_IN
75590: IFFALSE 75628
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
75592: LD_ADDR_VAR 0 5
75596: PUSH
75597: LD_VAR 0 5
75601: PPUSH
75602: LD_VAR 0 5
75606: PUSH
75607: LD_INT 1
75609: PLUS
75610: PPUSH
75611: LD_VAR 0 4
75615: PPUSH
75616: CALL_OW 256
75620: PPUSH
75621: CALL_OW 2
75625: ST_TO_ADDR
75626: GO 75589
75628: POP
75629: POP
// if not tmp then
75630: LD_VAR 0 5
75634: NOT
75635: IFFALSE 75639
// exit ;
75637: GO 75687
// if asc then
75639: LD_VAR 0 2
75643: IFFALSE 75667
// result := SortListByListAsc ( units , tmp ) else
75645: LD_ADDR_VAR 0 3
75649: PUSH
75650: LD_VAR 0 1
75654: PPUSH
75655: LD_VAR 0 5
75659: PPUSH
75660: CALL_OW 76
75664: ST_TO_ADDR
75665: GO 75687
// result := SortListByListDesc ( units , tmp ) ;
75667: LD_ADDR_VAR 0 3
75671: PUSH
75672: LD_VAR 0 1
75676: PPUSH
75677: LD_VAR 0 5
75681: PPUSH
75682: CALL_OW 77
75686: ST_TO_ADDR
// end ;
75687: LD_VAR 0 3
75691: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
75692: LD_INT 0
75694: PPUSH
75695: PPUSH
// task := GetTaskList ( mech ) ;
75696: LD_ADDR_VAR 0 4
75700: PUSH
75701: LD_VAR 0 1
75705: PPUSH
75706: CALL_OW 437
75710: ST_TO_ADDR
// if not task then
75711: LD_VAR 0 4
75715: NOT
75716: IFFALSE 75720
// exit ;
75718: GO 75764
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
75720: LD_ADDR_VAR 0 3
75724: PUSH
75725: LD_VAR 0 4
75729: PUSH
75730: LD_INT 1
75732: ARRAY
75733: PUSH
75734: LD_INT 1
75736: ARRAY
75737: PUSH
75738: LD_STRING r
75740: EQUAL
75741: IFFALSE 75763
75743: PUSH
75744: LD_VAR 0 4
75748: PUSH
75749: LD_INT 1
75751: ARRAY
75752: PUSH
75753: LD_INT 4
75755: ARRAY
75756: PUSH
75757: LD_VAR 0 2
75761: EQUAL
75762: AND
75763: ST_TO_ADDR
// end ;
75764: LD_VAR 0 3
75768: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75769: LD_INT 0
75771: PPUSH
// SetDir ( unit , d ) ;
75772: LD_VAR 0 1
75776: PPUSH
75777: LD_VAR 0 4
75781: PPUSH
75782: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
75786: LD_ADDR_VAR 0 6
75790: PUSH
75791: LD_VAR 0 1
75795: PPUSH
75796: LD_VAR 0 2
75800: PPUSH
75801: LD_VAR 0 3
75805: PPUSH
75806: LD_VAR 0 5
75810: PPUSH
75811: CALL_OW 48
75815: ST_TO_ADDR
// end ;
75816: LD_VAR 0 6
75820: RET
// export function ToNaturalNumber ( number ) ; begin
75821: LD_INT 0
75823: PPUSH
// result := number div 1 ;
75824: LD_ADDR_VAR 0 2
75828: PUSH
75829: LD_VAR 0 1
75833: PUSH
75834: LD_INT 1
75836: DIV
75837: ST_TO_ADDR
// if number < 0 then
75838: LD_VAR 0 1
75842: PUSH
75843: LD_INT 0
75845: LESS
75846: IFFALSE 75856
// result := 0 ;
75848: LD_ADDR_VAR 0 2
75852: PUSH
75853: LD_INT 0
75855: ST_TO_ADDR
// end ;
75856: LD_VAR 0 2
75860: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
75861: LD_INT 0
75863: PPUSH
75864: PPUSH
75865: PPUSH
// if not buildings then
75866: LD_VAR 0 1
75870: NOT
75871: IFFALSE 75875
// exit ;
75873: GO 75990
// tmp := [ ] ;
75875: LD_ADDR_VAR 0 5
75879: PUSH
75880: EMPTY
75881: ST_TO_ADDR
// for b in buildings do
75882: LD_ADDR_VAR 0 4
75886: PUSH
75887: LD_VAR 0 1
75891: PUSH
75892: FOR_IN
75893: IFFALSE 75931
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
75895: LD_ADDR_VAR 0 5
75899: PUSH
75900: LD_VAR 0 5
75904: PPUSH
75905: LD_VAR 0 5
75909: PUSH
75910: LD_INT 1
75912: PLUS
75913: PPUSH
75914: LD_VAR 0 4
75918: PPUSH
75919: CALL_OW 266
75923: PPUSH
75924: CALL_OW 1
75928: ST_TO_ADDR
75929: GO 75892
75931: POP
75932: POP
// if not tmp then
75933: LD_VAR 0 5
75937: NOT
75938: IFFALSE 75942
// exit ;
75940: GO 75990
// if asc then
75942: LD_VAR 0 2
75946: IFFALSE 75970
// result := SortListByListAsc ( buildings , tmp ) else
75948: LD_ADDR_VAR 0 3
75952: PUSH
75953: LD_VAR 0 1
75957: PPUSH
75958: LD_VAR 0 5
75962: PPUSH
75963: CALL_OW 76
75967: ST_TO_ADDR
75968: GO 75990
// result := SortListByListDesc ( buildings , tmp ) ;
75970: LD_ADDR_VAR 0 3
75974: PUSH
75975: LD_VAR 0 1
75979: PPUSH
75980: LD_VAR 0 5
75984: PPUSH
75985: CALL_OW 77
75989: ST_TO_ADDR
// end ;
75990: LD_VAR 0 3
75994: RET
// export function SortByClass ( units , class ) ; var un ; begin
75995: LD_INT 0
75997: PPUSH
75998: PPUSH
// if not units or not class then
75999: LD_VAR 0 1
76003: NOT
76004: IFTRUE 76013
76006: PUSH
76007: LD_VAR 0 2
76011: NOT
76012: OR
76013: IFFALSE 76017
// exit ;
76015: GO 76112
// result := [ ] ;
76017: LD_ADDR_VAR 0 3
76021: PUSH
76022: EMPTY
76023: ST_TO_ADDR
// for un in units do
76024: LD_ADDR_VAR 0 4
76028: PUSH
76029: LD_VAR 0 1
76033: PUSH
76034: FOR_IN
76035: IFFALSE 76110
// if GetClass ( un ) = class then
76037: LD_VAR 0 4
76041: PPUSH
76042: CALL_OW 257
76046: PUSH
76047: LD_VAR 0 2
76051: EQUAL
76052: IFFALSE 76079
// result := Insert ( result , 1 , un ) else
76054: LD_ADDR_VAR 0 3
76058: PUSH
76059: LD_VAR 0 3
76063: PPUSH
76064: LD_INT 1
76066: PPUSH
76067: LD_VAR 0 4
76071: PPUSH
76072: CALL_OW 2
76076: ST_TO_ADDR
76077: GO 76108
// result := Replace ( result , result + 1 , un ) ;
76079: LD_ADDR_VAR 0 3
76083: PUSH
76084: LD_VAR 0 3
76088: PPUSH
76089: LD_VAR 0 3
76093: PUSH
76094: LD_INT 1
76096: PLUS
76097: PPUSH
76098: LD_VAR 0 4
76102: PPUSH
76103: CALL_OW 1
76107: ST_TO_ADDR
76108: GO 76034
76110: POP
76111: POP
// end ;
76112: LD_VAR 0 3
76116: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
76117: LD_INT 0
76119: PPUSH
76120: PPUSH
76121: PPUSH
76122: PPUSH
76123: PPUSH
76124: PPUSH
76125: PPUSH
// result := [ ] ;
76126: LD_ADDR_VAR 0 4
76130: PUSH
76131: EMPTY
76132: ST_TO_ADDR
// if x - r < 0 then
76133: LD_VAR 0 1
76137: PUSH
76138: LD_VAR 0 3
76142: MINUS
76143: PUSH
76144: LD_INT 0
76146: LESS
76147: IFFALSE 76159
// min_x := 0 else
76149: LD_ADDR_VAR 0 8
76153: PUSH
76154: LD_INT 0
76156: ST_TO_ADDR
76157: GO 76175
// min_x := x - r ;
76159: LD_ADDR_VAR 0 8
76163: PUSH
76164: LD_VAR 0 1
76168: PUSH
76169: LD_VAR 0 3
76173: MINUS
76174: ST_TO_ADDR
// if y - r < 0 then
76175: LD_VAR 0 2
76179: PUSH
76180: LD_VAR 0 3
76184: MINUS
76185: PUSH
76186: LD_INT 0
76188: LESS
76189: IFFALSE 76201
// min_y := 0 else
76191: LD_ADDR_VAR 0 7
76195: PUSH
76196: LD_INT 0
76198: ST_TO_ADDR
76199: GO 76217
// min_y := y - r ;
76201: LD_ADDR_VAR 0 7
76205: PUSH
76206: LD_VAR 0 2
76210: PUSH
76211: LD_VAR 0 3
76215: MINUS
76216: ST_TO_ADDR
// max_x := x + r ;
76217: LD_ADDR_VAR 0 9
76221: PUSH
76222: LD_VAR 0 1
76226: PUSH
76227: LD_VAR 0 3
76231: PLUS
76232: ST_TO_ADDR
// max_y := y + r ;
76233: LD_ADDR_VAR 0 10
76237: PUSH
76238: LD_VAR 0 2
76242: PUSH
76243: LD_VAR 0 3
76247: PLUS
76248: ST_TO_ADDR
// for _x = min_x to max_x do
76249: LD_ADDR_VAR 0 5
76253: PUSH
76254: DOUBLE
76255: LD_VAR 0 8
76259: DEC
76260: ST_TO_ADDR
76261: LD_VAR 0 9
76265: PUSH
76266: FOR_TO
76267: IFFALSE 76368
// for _y = min_y to max_y do
76269: LD_ADDR_VAR 0 6
76273: PUSH
76274: DOUBLE
76275: LD_VAR 0 7
76279: DEC
76280: ST_TO_ADDR
76281: LD_VAR 0 10
76285: PUSH
76286: FOR_TO
76287: IFFALSE 76364
// begin if not ValidHex ( _x , _y ) then
76289: LD_VAR 0 5
76293: PPUSH
76294: LD_VAR 0 6
76298: PPUSH
76299: CALL_OW 488
76303: NOT
76304: IFFALSE 76308
// continue ;
76306: GO 76286
// if GetResourceTypeXY ( _x , _y ) then
76308: LD_VAR 0 5
76312: PPUSH
76313: LD_VAR 0 6
76317: PPUSH
76318: CALL_OW 283
76322: IFFALSE 76362
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
76324: LD_ADDR_VAR 0 4
76328: PUSH
76329: LD_VAR 0 4
76333: PPUSH
76334: LD_VAR 0 4
76338: PUSH
76339: LD_INT 1
76341: PLUS
76342: PPUSH
76343: LD_VAR 0 5
76347: PUSH
76348: LD_VAR 0 6
76352: PUSH
76353: EMPTY
76354: LIST
76355: LIST
76356: PPUSH
76357: CALL_OW 1
76361: ST_TO_ADDR
// end ;
76362: GO 76286
76364: POP
76365: POP
76366: GO 76266
76368: POP
76369: POP
// end ;
76370: LD_VAR 0 4
76374: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
76375: LD_INT 0
76377: PPUSH
76378: PPUSH
76379: PPUSH
76380: PPUSH
76381: PPUSH
76382: PPUSH
76383: PPUSH
76384: PPUSH
// if not units then
76385: LD_VAR 0 1
76389: NOT
76390: IFFALSE 76394
// exit ;
76392: GO 76926
// result := UnitFilter ( units , [ f_ok ] ) ;
76394: LD_ADDR_VAR 0 3
76398: PUSH
76399: LD_VAR 0 1
76403: PPUSH
76404: LD_INT 50
76406: PUSH
76407: EMPTY
76408: LIST
76409: PPUSH
76410: CALL_OW 72
76414: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
76415: LD_ADDR_VAR 0 8
76419: PUSH
76420: LD_VAR 0 1
76424: PUSH
76425: LD_INT 1
76427: ARRAY
76428: PPUSH
76429: CALL_OW 255
76433: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
76434: LD_ADDR_VAR 0 10
76438: PUSH
76439: LD_INT 29
76441: PUSH
76442: LD_INT 91
76444: PUSH
76445: LD_INT 49
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: LIST
76452: ST_TO_ADDR
// if not result then
76453: LD_VAR 0 3
76457: NOT
76458: IFFALSE 76462
// exit ;
76460: GO 76926
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
76462: LD_ADDR_VAR 0 5
76466: PUSH
76467: LD_INT 81
76469: PUSH
76470: LD_VAR 0 8
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PPUSH
76479: CALL_OW 69
76483: ST_TO_ADDR
// for i in result do
76484: LD_ADDR_VAR 0 4
76488: PUSH
76489: LD_VAR 0 3
76493: PUSH
76494: FOR_IN
76495: IFFALSE 76924
// begin tag := GetTag ( i ) + 1 ;
76497: LD_ADDR_VAR 0 9
76501: PUSH
76502: LD_VAR 0 4
76506: PPUSH
76507: CALL_OW 110
76511: PUSH
76512: LD_INT 1
76514: PLUS
76515: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
76516: LD_ADDR_VAR 0 7
76520: PUSH
76521: LD_VAR 0 4
76525: PPUSH
76526: CALL_OW 250
76530: PPUSH
76531: LD_VAR 0 4
76535: PPUSH
76536: CALL_OW 251
76540: PPUSH
76541: LD_INT 4
76543: PPUSH
76544: CALL 76117 0 3
76548: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
76549: LD_VAR 0 4
76553: PPUSH
76554: CALL_OW 247
76558: PUSH
76559: LD_INT 2
76561: EQUAL
76562: IFFALSE 76574
76564: PUSH
76565: LD_VAR 0 7
76569: PUSH
76570: LD_INT 2
76572: GREATER
76573: AND
76574: IFFALSE 76594
76576: PUSH
76577: LD_VAR 0 4
76581: PPUSH
76582: CALL_OW 264
76586: PUSH
76587: LD_VAR 0 10
76591: IN
76592: NOT
76593: AND
76594: IFFALSE 76633
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
76596: LD_VAR 0 4
76600: PPUSH
76601: LD_VAR 0 7
76605: PUSH
76606: LD_INT 1
76608: ARRAY
76609: PUSH
76610: LD_INT 1
76612: ARRAY
76613: PPUSH
76614: LD_VAR 0 7
76618: PUSH
76619: LD_INT 1
76621: ARRAY
76622: PUSH
76623: LD_INT 2
76625: ARRAY
76626: PPUSH
76627: CALL_OW 116
76631: GO 76922
// if path > tag then
76633: LD_VAR 0 2
76637: PUSH
76638: LD_VAR 0 9
76642: GREATER
76643: IFFALSE 76851
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
76645: LD_ADDR_VAR 0 6
76649: PUSH
76650: LD_VAR 0 5
76654: PPUSH
76655: LD_INT 91
76657: PUSH
76658: LD_VAR 0 4
76662: PUSH
76663: LD_INT 8
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: LIST
76670: PPUSH
76671: CALL_OW 72
76675: ST_TO_ADDR
// if nearEnemy then
76676: LD_VAR 0 6
76680: IFFALSE 76749
// begin if GetWeapon ( i ) = ru_time_lapser then
76682: LD_VAR 0 4
76686: PPUSH
76687: CALL_OW 264
76691: PUSH
76692: LD_INT 49
76694: EQUAL
76695: IFFALSE 76723
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
76697: LD_VAR 0 4
76701: PPUSH
76702: LD_VAR 0 6
76706: PPUSH
76707: LD_VAR 0 4
76711: PPUSH
76712: CALL_OW 74
76716: PPUSH
76717: CALL_OW 112
76721: GO 76747
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
76723: LD_VAR 0 4
76727: PPUSH
76728: LD_VAR 0 6
76732: PPUSH
76733: LD_VAR 0 4
76737: PPUSH
76738: CALL_OW 74
76742: PPUSH
76743: CALL 78007 0 2
// end else
76747: GO 76849
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
76749: LD_VAR 0 4
76753: PPUSH
76754: LD_VAR 0 2
76758: PUSH
76759: LD_VAR 0 9
76763: ARRAY
76764: PUSH
76765: LD_INT 1
76767: ARRAY
76768: PPUSH
76769: LD_VAR 0 2
76773: PUSH
76774: LD_VAR 0 9
76778: ARRAY
76779: PUSH
76780: LD_INT 2
76782: ARRAY
76783: PPUSH
76784: CALL_OW 297
76788: PUSH
76789: LD_INT 6
76791: GREATER
76792: IFFALSE 76835
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
76794: LD_VAR 0 4
76798: PPUSH
76799: LD_VAR 0 2
76803: PUSH
76804: LD_VAR 0 9
76808: ARRAY
76809: PUSH
76810: LD_INT 1
76812: ARRAY
76813: PPUSH
76814: LD_VAR 0 2
76818: PUSH
76819: LD_VAR 0 9
76823: ARRAY
76824: PUSH
76825: LD_INT 2
76827: ARRAY
76828: PPUSH
76829: CALL_OW 114
76833: GO 76849
// SetTag ( i , tag ) ;
76835: LD_VAR 0 4
76839: PPUSH
76840: LD_VAR 0 9
76844: PPUSH
76845: CALL_OW 109
// end else
76849: GO 76922
// if enemy then
76851: LD_VAR 0 5
76855: IFFALSE 76922
// begin if GetWeapon ( i ) = ru_time_lapser then
76857: LD_VAR 0 4
76861: PPUSH
76862: CALL_OW 264
76866: PUSH
76867: LD_INT 49
76869: EQUAL
76870: IFFALSE 76898
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
76872: LD_VAR 0 4
76876: PPUSH
76877: LD_VAR 0 5
76881: PPUSH
76882: LD_VAR 0 4
76886: PPUSH
76887: CALL_OW 74
76891: PPUSH
76892: CALL_OW 112
76896: GO 76922
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
76898: LD_VAR 0 4
76902: PPUSH
76903: LD_VAR 0 5
76907: PPUSH
76908: LD_VAR 0 4
76912: PPUSH
76913: CALL_OW 74
76917: PPUSH
76918: CALL 78007 0 2
// end ; end ;
76922: GO 76494
76924: POP
76925: POP
// end ;
76926: LD_VAR 0 3
76930: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76931: LD_INT 0
76933: PPUSH
76934: PPUSH
76935: PPUSH
// if not unit or IsInUnit ( unit ) then
76936: LD_VAR 0 1
76940: NOT
76941: IFTRUE 76954
76943: PUSH
76944: LD_VAR 0 1
76948: PPUSH
76949: CALL_OW 310
76953: OR
76954: IFFALSE 76958
// exit ;
76956: GO 77049
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76958: LD_ADDR_VAR 0 4
76962: PUSH
76963: LD_VAR 0 1
76967: PPUSH
76968: CALL_OW 250
76972: PPUSH
76973: LD_VAR 0 2
76977: PPUSH
76978: LD_INT 1
76980: PPUSH
76981: CALL_OW 272
76985: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76986: LD_ADDR_VAR 0 5
76990: PUSH
76991: LD_VAR 0 1
76995: PPUSH
76996: CALL_OW 251
77000: PPUSH
77001: LD_VAR 0 2
77005: PPUSH
77006: LD_INT 1
77008: PPUSH
77009: CALL_OW 273
77013: ST_TO_ADDR
// if ValidHex ( x , y ) then
77014: LD_VAR 0 4
77018: PPUSH
77019: LD_VAR 0 5
77023: PPUSH
77024: CALL_OW 488
77028: IFFALSE 77049
// ComTurnXY ( unit , x , y ) ;
77030: LD_VAR 0 1
77034: PPUSH
77035: LD_VAR 0 4
77039: PPUSH
77040: LD_VAR 0 5
77044: PPUSH
77045: CALL_OW 118
// end ;
77049: LD_VAR 0 3
77053: RET
// export function SeeUnits ( side , units ) ; var i ; begin
77054: LD_INT 0
77056: PPUSH
77057: PPUSH
// result := false ;
77058: LD_ADDR_VAR 0 3
77062: PUSH
77063: LD_INT 0
77065: ST_TO_ADDR
// if not units then
77066: LD_VAR 0 2
77070: NOT
77071: IFFALSE 77075
// exit ;
77073: GO 77120
// for i in units do
77075: LD_ADDR_VAR 0 4
77079: PUSH
77080: LD_VAR 0 2
77084: PUSH
77085: FOR_IN
77086: IFFALSE 77118
// if See ( side , i ) then
77088: LD_VAR 0 1
77092: PPUSH
77093: LD_VAR 0 4
77097: PPUSH
77098: CALL_OW 292
77102: IFFALSE 77116
// begin result := true ;
77104: LD_ADDR_VAR 0 3
77108: PUSH
77109: LD_INT 1
77111: ST_TO_ADDR
// exit ;
77112: POP
77113: POP
77114: GO 77120
// end ;
77116: GO 77085
77118: POP
77119: POP
// end ;
77120: LD_VAR 0 3
77124: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
77125: LD_INT 0
77127: PPUSH
77128: PPUSH
77129: PPUSH
77130: PPUSH
// if not unit or not points then
77131: LD_VAR 0 1
77135: NOT
77136: IFTRUE 77145
77138: PUSH
77139: LD_VAR 0 2
77143: NOT
77144: OR
77145: IFFALSE 77149
// exit ;
77147: GO 77239
// dist := 99999 ;
77149: LD_ADDR_VAR 0 5
77153: PUSH
77154: LD_INT 99999
77156: ST_TO_ADDR
// for i in points do
77157: LD_ADDR_VAR 0 4
77161: PUSH
77162: LD_VAR 0 2
77166: PUSH
77167: FOR_IN
77168: IFFALSE 77237
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
77170: LD_ADDR_VAR 0 6
77174: PUSH
77175: LD_VAR 0 1
77179: PPUSH
77180: LD_VAR 0 4
77184: PUSH
77185: LD_INT 1
77187: ARRAY
77188: PPUSH
77189: LD_VAR 0 4
77193: PUSH
77194: LD_INT 2
77196: ARRAY
77197: PPUSH
77198: CALL_OW 297
77202: ST_TO_ADDR
// if tmpDist < dist then
77203: LD_VAR 0 6
77207: PUSH
77208: LD_VAR 0 5
77212: LESS
77213: IFFALSE 77235
// begin result := i ;
77215: LD_ADDR_VAR 0 3
77219: PUSH
77220: LD_VAR 0 4
77224: ST_TO_ADDR
// dist := tmpDist ;
77225: LD_ADDR_VAR 0 5
77229: PUSH
77230: LD_VAR 0 6
77234: ST_TO_ADDR
// end ; end ;
77235: GO 77167
77237: POP
77238: POP
// end ;
77239: LD_VAR 0 3
77243: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
77244: LD_INT 0
77246: PPUSH
// uc_side := side ;
77247: LD_ADDR_OWVAR 20
77251: PUSH
77252: LD_VAR 0 1
77256: ST_TO_ADDR
// uc_nation := 3 ;
77257: LD_ADDR_OWVAR 21
77261: PUSH
77262: LD_INT 3
77264: ST_TO_ADDR
// vc_chassis := 25 ;
77265: LD_ADDR_OWVAR 37
77269: PUSH
77270: LD_INT 25
77272: ST_TO_ADDR
// vc_engine := engine_siberite ;
77273: LD_ADDR_OWVAR 39
77277: PUSH
77278: LD_INT 3
77280: ST_TO_ADDR
// vc_control := control_computer ;
77281: LD_ADDR_OWVAR 38
77285: PUSH
77286: LD_INT 3
77288: ST_TO_ADDR
// vc_weapon := 59 ;
77289: LD_ADDR_OWVAR 40
77293: PUSH
77294: LD_INT 59
77296: ST_TO_ADDR
// result := CreateVehicle ;
77297: LD_ADDR_VAR 0 5
77301: PUSH
77302: CALL_OW 45
77306: ST_TO_ADDR
// SetDir ( result , d ) ;
77307: LD_VAR 0 5
77311: PPUSH
77312: LD_VAR 0 4
77316: PPUSH
77317: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
77321: LD_VAR 0 5
77325: PPUSH
77326: LD_VAR 0 2
77330: PPUSH
77331: LD_VAR 0 3
77335: PPUSH
77336: LD_INT 0
77338: PPUSH
77339: CALL_OW 48
// end ;
77343: LD_VAR 0 5
77347: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
77348: LD_INT 0
77350: PPUSH
77351: PPUSH
77352: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
77353: LD_ADDR_VAR 0 2
77357: PUSH
77358: LD_INT 0
77360: PUSH
77361: LD_INT 0
77363: PUSH
77364: LD_INT 0
77366: PUSH
77367: LD_INT 0
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: LIST
77374: LIST
77375: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
77376: LD_VAR 0 1
77380: NOT
77381: IFTRUE 77414
77383: PUSH
77384: LD_VAR 0 1
77388: PPUSH
77389: CALL_OW 264
77393: PUSH
77394: LD_INT 12
77396: PUSH
77397: LD_INT 51
77399: PUSH
77400: LD_INT 32
77402: PUSH
77403: LD_INT 89
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: LIST
77410: LIST
77411: IN
77412: NOT
77413: OR
77414: IFFALSE 77418
// exit ;
77416: GO 77516
// for i := 1 to 3 do
77418: LD_ADDR_VAR 0 3
77422: PUSH
77423: DOUBLE
77424: LD_INT 1
77426: DEC
77427: ST_TO_ADDR
77428: LD_INT 3
77430: PUSH
77431: FOR_TO
77432: IFFALSE 77514
// begin tmp := GetCargo ( cargo , i ) ;
77434: LD_ADDR_VAR 0 4
77438: PUSH
77439: LD_VAR 0 1
77443: PPUSH
77444: LD_VAR 0 3
77448: PPUSH
77449: CALL_OW 289
77453: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
77454: LD_ADDR_VAR 0 2
77458: PUSH
77459: LD_VAR 0 2
77463: PPUSH
77464: LD_VAR 0 3
77468: PPUSH
77469: LD_VAR 0 4
77473: PPUSH
77474: CALL_OW 1
77478: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
77479: LD_ADDR_VAR 0 2
77483: PUSH
77484: LD_VAR 0 2
77488: PPUSH
77489: LD_INT 4
77491: PPUSH
77492: LD_VAR 0 2
77496: PUSH
77497: LD_INT 4
77499: ARRAY
77500: PUSH
77501: LD_VAR 0 4
77505: PLUS
77506: PPUSH
77507: CALL_OW 1
77511: ST_TO_ADDR
// end ;
77512: GO 77431
77514: POP
77515: POP
// end ;
77516: LD_VAR 0 2
77520: RET
// export function Length ( array ) ; begin
77521: LD_INT 0
77523: PPUSH
// result := array + 0 ;
77524: LD_ADDR_VAR 0 2
77528: PUSH
77529: LD_VAR 0 1
77533: PUSH
77534: LD_INT 0
77536: PLUS
77537: ST_TO_ADDR
// end ;
77538: LD_VAR 0 2
77542: RET
// export function PrepareArray ( array ) ; begin
77543: LD_INT 0
77545: PPUSH
// result := array diff 0 ;
77546: LD_ADDR_VAR 0 2
77550: PUSH
77551: LD_VAR 0 1
77555: PUSH
77556: LD_INT 0
77558: DIFF
77559: ST_TO_ADDR
// if not result [ 1 ] then
77560: LD_VAR 0 2
77564: PUSH
77565: LD_INT 1
77567: ARRAY
77568: NOT
77569: IFFALSE 77589
// result := Delete ( result , 1 ) ;
77571: LD_ADDR_VAR 0 2
77575: PUSH
77576: LD_VAR 0 2
77580: PPUSH
77581: LD_INT 1
77583: PPUSH
77584: CALL_OW 3
77588: ST_TO_ADDR
// end ;
77589: LD_VAR 0 2
77593: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
77594: LD_INT 0
77596: PPUSH
77597: PPUSH
77598: PPUSH
77599: PPUSH
// sibRocketRange := 25 ;
77600: LD_ADDR_VAR 0 6
77604: PUSH
77605: LD_INT 25
77607: ST_TO_ADDR
// result := false ;
77608: LD_ADDR_VAR 0 4
77612: PUSH
77613: LD_INT 0
77615: ST_TO_ADDR
// for i := 0 to 5 do
77616: LD_ADDR_VAR 0 5
77620: PUSH
77621: DOUBLE
77622: LD_INT 0
77624: DEC
77625: ST_TO_ADDR
77626: LD_INT 5
77628: PUSH
77629: FOR_TO
77630: IFFALSE 77697
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
77632: LD_VAR 0 1
77636: PPUSH
77637: LD_VAR 0 5
77641: PPUSH
77642: LD_VAR 0 6
77646: PPUSH
77647: CALL_OW 272
77651: PPUSH
77652: LD_VAR 0 2
77656: PPUSH
77657: LD_VAR 0 5
77661: PPUSH
77662: LD_VAR 0 6
77666: PPUSH
77667: CALL_OW 273
77671: PPUSH
77672: LD_VAR 0 3
77676: PPUSH
77677: CALL_OW 309
77681: IFFALSE 77695
// begin result := true ;
77683: LD_ADDR_VAR 0 4
77687: PUSH
77688: LD_INT 1
77690: ST_TO_ADDR
// exit ;
77691: POP
77692: POP
77693: GO 77699
// end ;
77695: GO 77629
77697: POP
77698: POP
// end ;
77699: LD_VAR 0 4
77703: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
77704: LD_INT 0
77706: PPUSH
77707: PPUSH
77708: PPUSH
// if btype = b_depot then
77709: LD_VAR 0 2
77713: PUSH
77714: LD_INT 0
77716: EQUAL
77717: IFFALSE 77729
// begin result := true ;
77719: LD_ADDR_VAR 0 3
77723: PUSH
77724: LD_INT 1
77726: ST_TO_ADDR
// exit ;
77727: GO 77849
// end ; pom := GetBase ( depot ) ;
77729: LD_ADDR_VAR 0 4
77733: PUSH
77734: LD_VAR 0 1
77738: PPUSH
77739: CALL_OW 274
77743: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
77744: LD_ADDR_VAR 0 5
77748: PUSH
77749: LD_VAR 0 2
77753: PPUSH
77754: LD_VAR 0 1
77758: PPUSH
77759: CALL_OW 248
77763: PPUSH
77764: CALL_OW 450
77768: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
77769: LD_ADDR_VAR 0 3
77773: PUSH
77774: LD_VAR 0 4
77778: PPUSH
77779: LD_INT 1
77781: PPUSH
77782: CALL_OW 275
77786: PUSH
77787: LD_VAR 0 5
77791: PUSH
77792: LD_INT 1
77794: ARRAY
77795: GREATEREQUAL
77796: IFFALSE 77822
77798: PUSH
77799: LD_VAR 0 4
77803: PPUSH
77804: LD_INT 2
77806: PPUSH
77807: CALL_OW 275
77811: PUSH
77812: LD_VAR 0 5
77816: PUSH
77817: LD_INT 2
77819: ARRAY
77820: GREATEREQUAL
77821: AND
77822: IFFALSE 77848
77824: PUSH
77825: LD_VAR 0 4
77829: PPUSH
77830: LD_INT 3
77832: PPUSH
77833: CALL_OW 275
77837: PUSH
77838: LD_VAR 0 5
77842: PUSH
77843: LD_INT 3
77845: ARRAY
77846: GREATEREQUAL
77847: AND
77848: ST_TO_ADDR
// end ;
77849: LD_VAR 0 3
77853: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
77854: LD_INT 0
77856: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
77857: LD_VAR 0 1
77861: PPUSH
77862: LD_VAR 0 2
77866: PPUSH
77867: LD_INT 0
77869: PPUSH
77870: LD_INT 0
77872: PPUSH
77873: LD_INT 1
77875: PPUSH
77876: LD_INT 0
77878: PPUSH
77879: CALL_OW 587
// end ;
77883: LD_VAR 0 3
77887: RET
// export function CenterOnNow ( unit ) ; begin
77888: LD_INT 0
77890: PPUSH
// result := IsInUnit ( unit ) ;
77891: LD_ADDR_VAR 0 2
77895: PUSH
77896: LD_VAR 0 1
77900: PPUSH
77901: CALL_OW 310
77905: ST_TO_ADDR
// if not result then
77906: LD_VAR 0 2
77910: NOT
77911: IFFALSE 77923
// result := unit ;
77913: LD_ADDR_VAR 0 2
77917: PUSH
77918: LD_VAR 0 1
77922: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
77923: LD_VAR 0 1
77927: PPUSH
77928: CALL_OW 87
// end ;
77932: LD_VAR 0 2
77936: RET
// export function ComMoveHex ( unit , hex ) ; begin
77937: LD_INT 0
77939: PPUSH
// if not hex then
77940: LD_VAR 0 2
77944: NOT
77945: IFFALSE 77949
// exit ;
77947: GO 78002
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
77949: LD_VAR 0 2
77953: PUSH
77954: LD_INT 1
77956: ARRAY
77957: PPUSH
77958: LD_VAR 0 2
77962: PUSH
77963: LD_INT 2
77965: ARRAY
77966: PPUSH
77967: CALL_OW 428
77971: IFFALSE 77975
// exit ;
77973: GO 78002
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
77975: LD_VAR 0 1
77979: PPUSH
77980: LD_VAR 0 2
77984: PUSH
77985: LD_INT 1
77987: ARRAY
77988: PPUSH
77989: LD_VAR 0 2
77993: PUSH
77994: LD_INT 2
77996: ARRAY
77997: PPUSH
77998: CALL_OW 111
// end ;
78002: LD_VAR 0 3
78006: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
78007: LD_INT 0
78009: PPUSH
78010: PPUSH
78011: PPUSH
// if not unit or not enemy then
78012: LD_VAR 0 1
78016: NOT
78017: IFTRUE 78026
78019: PUSH
78020: LD_VAR 0 2
78024: NOT
78025: OR
78026: IFFALSE 78030
// exit ;
78028: GO 78156
// x := GetX ( enemy ) ;
78030: LD_ADDR_VAR 0 4
78034: PUSH
78035: LD_VAR 0 2
78039: PPUSH
78040: CALL_OW 250
78044: ST_TO_ADDR
// y := GetY ( enemy ) ;
78045: LD_ADDR_VAR 0 5
78049: PUSH
78050: LD_VAR 0 2
78054: PPUSH
78055: CALL_OW 251
78059: ST_TO_ADDR
// if ValidHex ( x , y ) then
78060: LD_VAR 0 4
78064: PPUSH
78065: LD_VAR 0 5
78069: PPUSH
78070: CALL_OW 488
78074: IFFALSE 78156
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
78076: LD_VAR 0 2
78080: PPUSH
78081: CALL_OW 247
78085: PUSH
78086: LD_INT 3
78088: PUSH
78089: LD_INT 2
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: IN
78096: IFTRUE 78119
78098: PUSH
78099: LD_VAR 0 1
78103: PPUSH
78104: CALL_OW 255
78108: PPUSH
78109: LD_VAR 0 2
78113: PPUSH
78114: CALL_OW 292
78118: OR
78119: IFFALSE 78137
// ComAttackUnit ( unit , enemy ) else
78121: LD_VAR 0 1
78125: PPUSH
78126: LD_VAR 0 2
78130: PPUSH
78131: CALL_OW 115
78135: GO 78156
// ComAgressiveMove ( unit , x , y ) ;
78137: LD_VAR 0 1
78141: PPUSH
78142: LD_VAR 0 4
78146: PPUSH
78147: LD_VAR 0 5
78151: PPUSH
78152: CALL_OW 114
// end ;
78156: LD_VAR 0 3
78160: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
78161: LD_INT 0
78163: PPUSH
78164: PPUSH
78165: PPUSH
// list := AreaToList ( area , 0 ) ;
78166: LD_ADDR_VAR 0 5
78170: PUSH
78171: LD_VAR 0 1
78175: PPUSH
78176: LD_INT 0
78178: PPUSH
78179: CALL_OW 517
78183: ST_TO_ADDR
// if not list then
78184: LD_VAR 0 5
78188: NOT
78189: IFFALSE 78193
// exit ;
78191: GO 78323
// if all then
78193: LD_VAR 0 2
78197: IFFALSE 78285
// begin for i := 1 to list [ 1 ] do
78199: LD_ADDR_VAR 0 4
78203: PUSH
78204: DOUBLE
78205: LD_INT 1
78207: DEC
78208: ST_TO_ADDR
78209: LD_VAR 0 5
78213: PUSH
78214: LD_INT 1
78216: ARRAY
78217: PUSH
78218: FOR_TO
78219: IFFALSE 78281
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
78221: LD_ADDR_VAR 0 3
78225: PUSH
78226: LD_VAR 0 3
78230: PPUSH
78231: LD_VAR 0 3
78235: PUSH
78236: LD_INT 1
78238: PLUS
78239: PPUSH
78240: LD_VAR 0 5
78244: PUSH
78245: LD_INT 1
78247: ARRAY
78248: PUSH
78249: LD_VAR 0 4
78253: ARRAY
78254: PUSH
78255: LD_VAR 0 5
78259: PUSH
78260: LD_INT 2
78262: ARRAY
78263: PUSH
78264: LD_VAR 0 4
78268: ARRAY
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: PPUSH
78274: CALL_OW 1
78278: ST_TO_ADDR
78279: GO 78218
78281: POP
78282: POP
// exit ;
78283: GO 78323
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
78285: LD_ADDR_VAR 0 3
78289: PUSH
78290: LD_VAR 0 5
78294: PUSH
78295: LD_INT 1
78297: ARRAY
78298: PUSH
78299: LD_INT 1
78301: ARRAY
78302: PUSH
78303: LD_VAR 0 5
78307: PUSH
78308: LD_INT 2
78310: ARRAY
78311: PUSH
78312: LD_INT 1
78314: ARRAY
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: EMPTY
78321: LIST
78322: ST_TO_ADDR
// end ;
78323: LD_VAR 0 3
78327: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
78328: LD_INT 0
78330: PPUSH
78331: PPUSH
// list := AreaToList ( area , 0 ) ;
78332: LD_ADDR_VAR 0 4
78336: PUSH
78337: LD_VAR 0 1
78341: PPUSH
78342: LD_INT 0
78344: PPUSH
78345: CALL_OW 517
78349: ST_TO_ADDR
// if not list then
78350: LD_VAR 0 4
78354: NOT
78355: IFFALSE 78359
// exit ;
78357: GO 78400
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
78359: LD_ADDR_VAR 0 3
78363: PUSH
78364: LD_VAR 0 4
78368: PUSH
78369: LD_INT 1
78371: ARRAY
78372: PUSH
78373: LD_INT 1
78375: ARRAY
78376: PUSH
78377: LD_VAR 0 4
78381: PUSH
78382: LD_INT 2
78384: ARRAY
78385: PUSH
78386: LD_INT 1
78388: ARRAY
78389: PUSH
78390: LD_VAR 0 2
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: LIST
78399: ST_TO_ADDR
// end ;
78400: LD_VAR 0 3
78404: RET
// export function First ( array ) ; begin
78405: LD_INT 0
78407: PPUSH
// if not array then
78408: LD_VAR 0 1
78412: NOT
78413: IFFALSE 78417
// exit ;
78415: GO 78431
// result := array [ 1 ] ;
78417: LD_ADDR_VAR 0 2
78421: PUSH
78422: LD_VAR 0 1
78426: PUSH
78427: LD_INT 1
78429: ARRAY
78430: ST_TO_ADDR
// end ;
78431: LD_VAR 0 2
78435: RET
// export function Last ( array ) ; begin
78436: LD_INT 0
78438: PPUSH
// if not array then
78439: LD_VAR 0 1
78443: NOT
78444: IFFALSE 78448
// exit ;
78446: GO 78464
// result := array [ array ] ;
78448: LD_ADDR_VAR 0 2
78452: PUSH
78453: LD_VAR 0 1
78457: PUSH
78458: LD_VAR 0 1
78462: ARRAY
78463: ST_TO_ADDR
// end ;
78464: LD_VAR 0 2
78468: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
78469: LD_INT 0
78471: PPUSH
78472: PPUSH
// result := [ ] ;
78473: LD_ADDR_VAR 0 5
78477: PUSH
78478: EMPTY
78479: ST_TO_ADDR
// if not array then
78480: LD_VAR 0 1
78484: NOT
78485: IFFALSE 78489
// exit ;
78487: GO 78601
// for i := 1 to array do
78489: LD_ADDR_VAR 0 6
78493: PUSH
78494: DOUBLE
78495: LD_INT 1
78497: DEC
78498: ST_TO_ADDR
78499: LD_VAR 0 1
78503: PUSH
78504: FOR_TO
78505: IFFALSE 78599
// if array [ i ] [ index ] = value then
78507: LD_VAR 0 1
78511: PUSH
78512: LD_VAR 0 6
78516: ARRAY
78517: PUSH
78518: LD_VAR 0 2
78522: ARRAY
78523: PUSH
78524: LD_VAR 0 3
78528: EQUAL
78529: IFFALSE 78597
// begin if indexColumn then
78531: LD_VAR 0 4
78535: IFFALSE 78571
// result := Join ( result , array [ i ] [ indexColumn ] ) else
78537: LD_ADDR_VAR 0 5
78541: PUSH
78542: LD_VAR 0 5
78546: PPUSH
78547: LD_VAR 0 1
78551: PUSH
78552: LD_VAR 0 6
78556: ARRAY
78557: PUSH
78558: LD_VAR 0 4
78562: ARRAY
78563: PPUSH
78564: CALL 73609 0 2
78568: ST_TO_ADDR
78569: GO 78597
// result := Join ( result , array [ i ] ) ;
78571: LD_ADDR_VAR 0 5
78575: PUSH
78576: LD_VAR 0 5
78580: PPUSH
78581: LD_VAR 0 1
78585: PUSH
78586: LD_VAR 0 6
78590: ARRAY
78591: PPUSH
78592: CALL 73609 0 2
78596: ST_TO_ADDR
// end ;
78597: GO 78504
78599: POP
78600: POP
// end ;
78601: LD_VAR 0 5
78605: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
78606: LD_INT 0
78608: PPUSH
// if not vehicles or not parkingPoint then
78609: LD_VAR 0 1
78613: NOT
78614: IFTRUE 78623
78616: PUSH
78617: LD_VAR 0 2
78621: NOT
78622: OR
78623: IFFALSE 78627
// exit ;
78625: GO 78725
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
78627: LD_ADDR_VAR 0 1
78631: PUSH
78632: LD_VAR 0 1
78636: PPUSH
78637: LD_INT 50
78639: PUSH
78640: EMPTY
78641: LIST
78642: PUSH
78643: LD_INT 3
78645: PUSH
78646: LD_INT 92
78648: PUSH
78649: LD_VAR 0 2
78653: PUSH
78654: LD_INT 1
78656: ARRAY
78657: PUSH
78658: LD_VAR 0 2
78662: PUSH
78663: LD_INT 2
78665: ARRAY
78666: PUSH
78667: LD_INT 8
78669: PUSH
78670: EMPTY
78671: LIST
78672: LIST
78673: LIST
78674: LIST
78675: PUSH
78676: EMPTY
78677: LIST
78678: LIST
78679: PUSH
78680: EMPTY
78681: LIST
78682: LIST
78683: PPUSH
78684: CALL_OW 72
78688: ST_TO_ADDR
// if not vehicles then
78689: LD_VAR 0 1
78693: NOT
78694: IFFALSE 78698
// exit ;
78696: GO 78725
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
78698: LD_VAR 0 1
78702: PPUSH
78703: LD_VAR 0 2
78707: PUSH
78708: LD_INT 1
78710: ARRAY
78711: PPUSH
78712: LD_VAR 0 2
78716: PUSH
78717: LD_INT 2
78719: ARRAY
78720: PPUSH
78721: CALL_OW 111
// end ;
78725: LD_VAR 0 3
78729: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
78730: LD_INT 0
78732: PPUSH
78733: PPUSH
78734: PPUSH
// if not side or not area then
78735: LD_VAR 0 1
78739: NOT
78740: IFTRUE 78749
78742: PUSH
78743: LD_VAR 0 2
78747: NOT
78748: OR
78749: IFFALSE 78753
// exit ;
78751: GO 78872
// tmp := AreaToList ( area , 0 ) ;
78753: LD_ADDR_VAR 0 5
78757: PUSH
78758: LD_VAR 0 2
78762: PPUSH
78763: LD_INT 0
78765: PPUSH
78766: CALL_OW 517
78770: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
78771: LD_ADDR_VAR 0 4
78775: PUSH
78776: DOUBLE
78777: LD_INT 1
78779: DEC
78780: ST_TO_ADDR
78781: LD_VAR 0 5
78785: PUSH
78786: LD_INT 1
78788: ARRAY
78789: PUSH
78790: FOR_TO
78791: IFFALSE 78870
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
78793: LD_VAR 0 5
78797: PUSH
78798: LD_INT 1
78800: ARRAY
78801: PUSH
78802: LD_VAR 0 4
78806: ARRAY
78807: PPUSH
78808: LD_VAR 0 5
78812: PUSH
78813: LD_INT 2
78815: ARRAY
78816: PUSH
78817: LD_VAR 0 4
78821: ARRAY
78822: PPUSH
78823: CALL_OW 351
78827: IFFALSE 78868
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
78829: LD_VAR 0 5
78833: PUSH
78834: LD_INT 1
78836: ARRAY
78837: PUSH
78838: LD_VAR 0 4
78842: ARRAY
78843: PPUSH
78844: LD_VAR 0 5
78848: PUSH
78849: LD_INT 2
78851: ARRAY
78852: PUSH
78853: LD_VAR 0 4
78857: ARRAY
78858: PPUSH
78859: LD_VAR 0 1
78863: PPUSH
78864: CALL_OW 244
// end ;
78868: GO 78790
78870: POP
78871: POP
// end ;
78872: LD_VAR 0 3
78876: RET
// export function UniqueArray ( array ) ; var i ; begin
78877: LD_INT 0
78879: PPUSH
78880: PPUSH
// result := [ ] ;
78881: LD_ADDR_VAR 0 2
78885: PUSH
78886: EMPTY
78887: ST_TO_ADDR
// if not array then
78888: LD_VAR 0 1
78892: NOT
78893: IFFALSE 78897
// exit ;
78895: GO 78958
// for i := 1 to array do
78897: LD_ADDR_VAR 0 3
78901: PUSH
78902: DOUBLE
78903: LD_INT 1
78905: DEC
78906: ST_TO_ADDR
78907: LD_VAR 0 1
78911: PUSH
78912: FOR_TO
78913: IFFALSE 78956
// if not array [ i ] in result then
78915: LD_VAR 0 1
78919: PUSH
78920: LD_VAR 0 3
78924: ARRAY
78925: PUSH
78926: LD_VAR 0 2
78930: IN
78931: NOT
78932: IFFALSE 78954
// result := Join ( result , i ) ;
78934: LD_ADDR_VAR 0 2
78938: PUSH
78939: LD_VAR 0 2
78943: PPUSH
78944: LD_VAR 0 3
78948: PPUSH
78949: CALL 73609 0 2
78953: ST_TO_ADDR
78954: GO 78912
78956: POP
78957: POP
// end ; end_of_file
78958: LD_VAR 0 2
78962: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78963: LD_VAR 0 1
78967: PUSH
78968: LD_INT 200
78970: DOUBLE
78971: GREATEREQUAL
78972: IFFALSE 78980
78974: LD_INT 299
78976: DOUBLE
78977: LESSEQUAL
78978: IFTRUE 78982
78980: GO 79014
78982: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78983: LD_VAR 0 1
78987: PPUSH
78988: LD_VAR 0 2
78992: PPUSH
78993: LD_VAR 0 3
78997: PPUSH
78998: LD_VAR 0 4
79002: PPUSH
79003: LD_VAR 0 5
79007: PPUSH
79008: CALL 29919 0 5
79012: GO 79091
79014: LD_INT 300
79016: DOUBLE
79017: GREATEREQUAL
79018: IFFALSE 79026
79020: LD_INT 399
79022: DOUBLE
79023: LESSEQUAL
79024: IFTRUE 79028
79026: GO 79090
79028: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
79029: LD_VAR 0 1
79033: PPUSH
79034: LD_VAR 0 2
79038: PPUSH
79039: LD_VAR 0 3
79043: PPUSH
79044: LD_VAR 0 4
79048: PPUSH
79049: LD_VAR 0 5
79053: PPUSH
79054: LD_VAR 0 6
79058: PPUSH
79059: LD_VAR 0 7
79063: PPUSH
79064: LD_VAR 0 8
79068: PPUSH
79069: LD_VAR 0 9
79073: PPUSH
79074: LD_VAR 0 10
79078: PPUSH
79079: LD_VAR 0 11
79083: PPUSH
79084: CALL 25803 0 11
79088: GO 79091
79090: POP
// end ;
79091: PPOPN 11
79093: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
79094: LD_VAR 0 1
79098: PPUSH
79099: LD_VAR 0 2
79103: PPUSH
79104: LD_VAR 0 3
79108: PPUSH
79109: LD_VAR 0 4
79113: PPUSH
79114: LD_VAR 0 5
79118: PPUSH
79119: CALL 29300 0 5
// end ; end_of_file
79123: PPOPN 5
79125: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
79126: LD_VAR 0 1
79130: PPUSH
79131: LD_VAR 0 2
79135: PPUSH
79136: LD_VAR 0 3
79140: PPUSH
79141: LD_VAR 0 4
79145: PPUSH
79146: LD_VAR 0 5
79150: PPUSH
79151: LD_VAR 0 6
79155: PPUSH
79156: CALL 13343 0 6
// end ;
79160: PPOPN 6
79162: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
79163: LD_INT 0
79165: PPUSH
// begin if not units then
79166: LD_VAR 0 1
79170: NOT
79171: IFFALSE 79175
// exit ;
79173: GO 79209
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
79175: LD_VAR 0 1
79179: PPUSH
79180: LD_VAR 0 2
79184: PPUSH
79185: LD_VAR 0 3
79189: PPUSH
79190: LD_VAR 0 4
79194: PPUSH
79195: LD_VAR 0 5
79199: PPUSH
79200: LD_VAR 0 6
79204: PPUSH
79205: CALL 35426 0 6
// end ;
79209: PPOPN 7
79211: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
79212: CALL 13230 0 0
// end ;
79216: PPOPN 1
79218: END
