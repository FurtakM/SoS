// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3629 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3476 0 0
// PrepareSheikGroup ;
 123: CALL 3114 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 3026 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3877 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: IFFALSE 699
 692: PUSH
 693: LD_EXP 19
 697: NOT
 698: AND
 699: IFFALSE 708
 701: PUSH
 702: LD_EXP 22
 706: NOT
 707: AND
 708: IFFALSE 769
 710: GO 712
 712: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 713: LD_EXP 1
 717: PPUSH
 718: LD_STRING DH-spot-1
 720: PPUSH
 721: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 725: LD_INT 47
 727: PPUSH
 728: LD_INT 68
 730: PPUSH
 731: CALL_OW 428
 735: PPUSH
 736: CALL_OW 313
 740: PUSH
 741: LD_INT 1
 743: ARRAY
 744: PPUSH
 745: LD_STRING DRa-spot-3
 747: PPUSH
 748: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 752: LD_INT 90
 754: PPUSH
 755: LD_INT 41
 757: PPUSH
 758: LD_INT 2
 760: PPUSH
 761: LD_INT 6
 763: NEG
 764: PPUSH
 765: CALL_OW 330
// end ;
 769: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 770: LD_INT 2
 772: PPUSH
 773: LD_INT 93
 775: PPUSH
 776: LD_INT 89
 778: PPUSH
 779: CALL_OW 293
 783: IFFALSE 792
 785: PUSH
 786: LD_EXP 19
 790: NOT
 791: AND
 792: IFFALSE 801
 794: PUSH
 795: LD_EXP 22
 799: NOT
 800: AND
 801: IFFALSE 862
 803: GO 805
 805: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 806: LD_EXP 1
 810: PPUSH
 811: LD_STRING DH-spot-1
 813: PPUSH
 814: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 818: LD_INT 93
 820: PPUSH
 821: LD_INT 89
 823: PPUSH
 824: CALL_OW 428
 828: PPUSH
 829: CALL_OW 313
 833: PUSH
 834: LD_INT 1
 836: ARRAY
 837: PPUSH
 838: LD_STRING DRa-spot-2
 840: PPUSH
 841: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 845: LD_INT 90
 847: PPUSH
 848: LD_INT 41
 850: PPUSH
 851: LD_INT 2
 853: PPUSH
 854: LD_INT 6
 856: NEG
 857: PPUSH
 858: CALL_OW 330
// end ;
 862: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 863: LD_INT 2
 865: PPUSH
 866: LD_INT 71
 868: PPUSH
 869: LD_INT 84
 871: PPUSH
 872: CALL_OW 428
 876: PPUSH
 877: CALL_OW 292
 881: IFFALSE 890
 883: PUSH
 884: LD_EXP 19
 888: NOT
 889: AND
 890: IFFALSE 899
 892: PUSH
 893: LD_EXP 22
 897: NOT
 898: AND
 899: IFFALSE 951
 901: GO 903
 903: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 904: LD_EXP 1
 908: PPUSH
 909: LD_STRING DH-spot-1
 911: PPUSH
 912: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 916: LD_INT 71
 918: PPUSH
 919: LD_INT 84
 921: PPUSH
 922: CALL_OW 428
 926: PPUSH
 927: LD_STRING DRa-spot-1
 929: PPUSH
 930: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 934: LD_INT 90
 936: PPUSH
 937: LD_INT 41
 939: PPUSH
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 6
 945: NEG
 946: PPUSH
 947: CALL_OW 330
// end ;
 951: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 952: LD_INT 2
 954: PPUSH
 955: LD_INT 35
 957: PPUSH
 958: LD_INT 35
 960: PPUSH
 961: CALL_OW 428
 965: PPUSH
 966: CALL_OW 292
 970: IFFALSE 979
 972: PUSH
 973: LD_EXP 22
 977: NOT
 978: AND
 979: IFFALSE 1029
 981: GO 983
 983: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 984: LD_INT 35
 986: PPUSH
 987: LD_INT 35
 989: PPUSH
 990: CALL_OW 428
 994: PPUSH
 995: LD_EXP 1
 999: PPUSH
1000: CALL_OW 119
// wait ( 0 0$1 ) ;
1004: LD_INT 35
1006: PPUSH
1007: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
1011: LD_INT 35
1013: PPUSH
1014: LD_INT 35
1016: PPUSH
1017: CALL_OW 428
1021: PPUSH
1022: LD_STRING DRa-spot-4
1024: PPUSH
1025: CALL_OW 88
// end ;
1029: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1030: LD_EXP 21
1034: IFFALSE 1057
1036: PUSH
1037: LD_EXP 14
1041: PPUSH
1042: LD_INT 101
1044: PUSH
1045: LD_INT 2
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 72
1056: AND
1057: IFFALSE 1066
1059: PUSH
1060: LD_EXP 22
1064: NOT
1065: AND
1066: IFFALSE 1390
1068: GO 1070
1070: DISABLE
1071: LD_INT 0
1073: PPUSH
1074: PPUSH
1075: PPUSH
1076: PPUSH
1077: PPUSH
// begin enable ;
1078: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1079: LD_ADDR_VAR 0 1
1083: PUSH
1084: LD_EXP 14
1088: PPUSH
1089: LD_INT 101
1091: PUSH
1092: LD_INT 2
1094: PUSH
1095: EMPTY
1096: LIST
1097: LIST
1098: PPUSH
1099: CALL_OW 72
1103: ST_TO_ADDR
// if not tmp then
1104: LD_VAR 0 1
1108: NOT
1109: IFFALSE 1113
// exit ;
1111: GO 1390
// InGameOn ;
1113: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1117: LD_EXP 1
1121: PUSH
1122: LD_EXP 5
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PPUSH
1131: LD_VAR 0 1
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_EXP 1
1157: PPUSH
1158: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1162: LD_VAR 0 1
1166: PUSH
1167: LD_INT 1
1169: ARRAY
1170: PPUSH
1171: LD_STRING DG-meeting-1
1173: PPUSH
1174: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1178: LD_ADDR_VAR 0 3
1182: PUSH
1183: LD_INT 81
1185: PUSH
1186: LD_INT 10
1188: PUSH
1189: EMPTY
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 63
1195: PUSH
1196: LD_INT 25
1198: PUSH
1199: EMPTY
1200: LIST
1201: LIST
1202: PUSH
1203: LD_INT 108
1205: PUSH
1206: LD_INT 73
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: LIST
1217: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1218: LD_ADDR_VAR 0 4
1222: PUSH
1223: LD_INT 9999
1225: PUSH
1226: EMPTY
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: ST_TO_ADDR
// for i := 1 to 3 do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: DOUBLE
1238: LD_INT 1
1240: DEC
1241: ST_TO_ADDR
1242: LD_INT 3
1244: PUSH
1245: FOR_TO
1246: IFFALSE 1330
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1248: LD_ADDR_VAR 0 5
1252: PUSH
1253: LD_EXP 1
1257: PPUSH
1258: LD_VAR 0 3
1262: PUSH
1263: LD_VAR 0 2
1267: ARRAY
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: LD_VAR 0 3
1277: PUSH
1278: LD_VAR 0 2
1282: ARRAY
1283: PUSH
1284: LD_INT 2
1286: ARRAY
1287: PPUSH
1288: CALL_OW 297
1292: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1293: LD_VAR 0 4
1297: PUSH
1298: LD_INT 1
1300: ARRAY
1301: PUSH
1302: LD_VAR 0 5
1306: GREATER
1307: IFFALSE 1328
// dist := [ tdist , i ] ;
1309: LD_ADDR_VAR 0 4
1313: PUSH
1314: LD_VAR 0 5
1318: PUSH
1319: LD_VAR 0 2
1323: PUSH
1324: EMPTY
1325: LIST
1326: LIST
1327: ST_TO_ADDR
// end ;
1328: GO 1245
1330: POP
1331: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1332: LD_EXP 1
1336: PPUSH
1337: LD_VAR 0 3
1341: PUSH
1342: LD_VAR 0 4
1346: PUSH
1347: LD_INT 2
1349: ARRAY
1350: ARRAY
1351: PUSH
1352: LD_INT 1
1354: ARRAY
1355: PPUSH
1356: LD_VAR 0 3
1360: PUSH
1361: LD_VAR 0 4
1365: PUSH
1366: LD_INT 2
1368: ARRAY
1369: ARRAY
1370: PUSH
1371: LD_INT 2
1373: ARRAY
1374: PPUSH
1375: CALL_OW 111
// wait ( 0 0$3 ) ;
1379: LD_INT 105
1381: PPUSH
1382: CALL_OW 67
// InGameOff ;
1386: CALL_OW 9
// end ;
1390: PPOPN 5
1392: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1393: LD_EXP 1
1397: PPUSH
1398: LD_INT 14
1400: PPUSH
1401: CALL_OW 296
1405: PUSH
1406: LD_INT 40
1408: GREATER
1409: IFFALSE 1422
1411: PUSH
1412: LD_EXP 1
1416: PPUSH
1417: CALL_OW 316
1421: AND
1422: IFFALSE 1431
1424: PUSH
1425: LD_EXP 22
1429: NOT
1430: AND
1431: IFFALSE 1448
1433: GO 1435
1435: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1436: LD_EXP 5
1440: PPUSH
1441: LD_STRING DK-idle-1
1443: PPUSH
1444: CALL_OW 88
// end ;
1448: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1449: LD_INT 2
1451: PPUSH
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: CALL_OW 293
1462: IFFALSE 1471
1464: PUSH
1465: LD_EXP 22
1469: NOT
1470: AND
1471: IFFALSE 1628
1473: GO 1475
1475: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1476: LD_INT 59
1478: PPUSH
1479: LD_INT 47
1481: PPUSH
1482: LD_INT 2
1484: PPUSH
1485: LD_INT 10
1487: NEG
1488: PPUSH
1489: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1493: LD_INT 59
1495: PPUSH
1496: LD_INT 47
1498: PPUSH
1499: CALL_OW 86
// goWithHeike := false ;
1503: LD_ADDR_EXP 18
1507: PUSH
1508: LD_INT 0
1510: ST_TO_ADDR
// baseSpotted := true ;
1511: LD_ADDR_EXP 19
1515: PUSH
1516: LD_INT 1
1518: ST_TO_ADDR
// InGameOn ;
1519: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1523: LD_EXP 1
1527: PUSH
1528: LD_EXP 5
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PPUSH
1537: LD_INT 54
1539: PPUSH
1540: LD_INT 45
1542: PPUSH
1543: CALL_OW 111
// wait ( 0 0$1 ) ;
1547: LD_INT 35
1549: PPUSH
1550: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1554: LD_EXP 1
1558: PUSH
1559: LD_EXP 5
1563: PUSH
1564: EMPTY
1565: LIST
1566: LIST
1567: PPUSH
1568: LD_INT 59
1570: PPUSH
1571: LD_INT 47
1573: PPUSH
1574: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1578: LD_EXP 1
1582: PPUSH
1583: LD_STRING DH-base-1
1585: PPUSH
1586: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1590: LD_EXP 5
1594: PPUSH
1595: LD_STRING DK-base-1
1597: PPUSH
1598: CALL_OW 88
// InGameOff ;
1602: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1606: LD_ADDR_EXP 17
1610: PUSH
1611: LD_EXP 17
1615: PUSH
1616: LD_INT 1
1618: PLUS
1619: ST_TO_ADDR
// goWithHeike := true ;
1620: LD_ADDR_EXP 18
1624: PUSH
1625: LD_INT 1
1627: ST_TO_ADDR
// end ;
1628: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1629: LD_INT 2
1631: PPUSH
1632: LD_EXP 8
1636: PPUSH
1637: CALL_OW 292
1641: IFFALSE 1650
1643: PUSH
1644: LD_EXP 22
1648: NOT
1649: AND
1650: IFFALSE 2996
1652: GO 1654
1654: DISABLE
1655: LD_INT 0
1657: PPUSH
1658: PPUSH
1659: PPUSH
1660: PPUSH
// begin meetingActive := false ;
1661: LD_ADDR_EXP 21
1665: PUSH
1666: LD_INT 0
1668: ST_TO_ADDR
// goWithHeike := false ;
1669: LD_ADDR_EXP 18
1673: PUSH
1674: LD_INT 0
1676: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1677: LD_ADDR_VAR 0 2
1681: PUSH
1682: LD_INT 6
1684: PPUSH
1685: LD_INT 0
1687: PPUSH
1688: CALL_OW 517
1692: ST_TO_ADDR
// for i := 1 to 4 do
1693: LD_ADDR_VAR 0 1
1697: PUSH
1698: DOUBLE
1699: LD_INT 1
1701: DEC
1702: ST_TO_ADDR
1703: LD_INT 4
1705: PUSH
1706: FOR_TO
1707: IFFALSE 1774
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1709: LD_EXP 15
1713: PUSH
1714: LD_VAR 0 1
1718: ARRAY
1719: PPUSH
1720: LD_VAR 0 2
1724: PUSH
1725: LD_INT 1
1727: ARRAY
1728: PUSH
1729: LD_VAR 0 1
1733: ARRAY
1734: PPUSH
1735: LD_VAR 0 2
1739: PUSH
1740: LD_INT 2
1742: ARRAY
1743: PUSH
1744: LD_VAR 0 1
1748: ARRAY
1749: PPUSH
1750: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1754: LD_EXP 15
1758: PUSH
1759: LD_VAR 0 1
1763: ARRAY
1764: PPUSH
1765: LD_INT 14
1767: PPUSH
1768: CALL_OW 179
// end ;
1772: GO 1706
1774: POP
1775: POP
// InGameOn ;
1776: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1780: LD_EXP 8
1784: PPUSH
1785: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1789: LD_EXP 1
1793: PPUSH
1794: LD_EXP 8
1798: PPUSH
1799: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1803: LD_EXP 5
1807: PPUSH
1808: LD_EXP 1
1812: PPUSH
1813: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1817: LD_INT 10
1819: PPUSH
1820: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1824: LD_EXP 1
1828: PPUSH
1829: LD_EXP 8
1833: PPUSH
1834: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1838: LD_EXP 5
1842: PPUSH
1843: LD_EXP 1
1847: PPUSH
1848: CALL_OW 250
1852: PPUSH
1853: LD_INT 5
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 272
1863: PPUSH
1864: LD_EXP 1
1868: PPUSH
1869: CALL_OW 251
1873: PPUSH
1874: LD_INT 5
1876: PPUSH
1877: LD_INT 1
1879: PPUSH
1880: CALL_OW 273
1884: PPUSH
1885: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1889: LD_EXP 1
1893: PPUSH
1894: LD_EXP 8
1898: PPUSH
1899: CALL_OW 296
1903: PUSH
1904: LD_INT 5
1906: LESS
1907: IFFALSE 1929
1909: PUSH
1910: LD_EXP 5
1914: PPUSH
1915: LD_EXP 8
1919: PPUSH
1920: CALL_OW 296
1924: PUSH
1925: LD_INT 6
1927: LESS
1928: AND
1929: IFFALSE 1817
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1931: LD_EXP 1
1935: PUSH
1936: LD_EXP 5
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PPUSH
1945: LD_EXP 8
1949: PPUSH
1950: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1954: LD_EXP 8
1958: PUSH
1959: LD_EXP 4
1963: PUSH
1964: LD_EXP 9
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: PPUSH
1974: LD_EXP 1
1978: PPUSH
1979: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1983: LD_INT 7
1985: PPUSH
1986: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1990: LD_EXP 8
1994: PPUSH
1995: LD_STRING DKu-Kurt-1
1997: PPUSH
1998: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
2002: LD_EXP 5
2006: PPUSH
2007: LD_STRING DK-Kurt-1
2009: PPUSH
2010: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
2014: LD_EXP 8
2018: PPUSH
2019: LD_STRING DKu-Kurt-2
2021: PPUSH
2022: CALL_OW 88
// wait ( 0 0$0.2 ) ;
2026: LD_INT 7
2028: PPUSH
2029: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2033: LD_EXP 1
2037: PPUSH
2038: LD_STRING DH-Kurt-1
2040: PPUSH
2041: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2045: LD_EXP 8
2049: PPUSH
2050: LD_STRING DKu-Kurt-3
2052: PPUSH
2053: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2057: LD_EXP 5
2061: PPUSH
2062: LD_STRING DK-Kurt-3
2064: PPUSH
2065: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2069: LD_EXP 9
2073: PPUSH
2074: LD_STRING DHa-Kurt-3
2076: PPUSH
2077: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2081: LD_EXP 4
2085: PPUSH
2086: LD_STRING DO-Kurt-3
2088: PPUSH
2089: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2093: LD_ADDR_VAR 0 3
2097: PUSH
2098: LD_EXP 8
2102: PUSH
2103: LD_EXP 4
2107: PUSH
2108: LD_EXP 9
2112: PUSH
2113: LD_EXP 5
2117: PUSH
2118: LD_EXP 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: LIST
2127: LIST
2128: LIST
2129: PUSH
2130: LD_EXP 16
2134: UNION
2135: ST_TO_ADDR
// for i = 1 to tmp2 do
2136: LD_ADDR_VAR 0 1
2140: PUSH
2141: DOUBLE
2142: LD_INT 1
2144: DEC
2145: ST_TO_ADDR
2146: LD_VAR 0 3
2150: PUSH
2151: FOR_TO
2152: IFFALSE 2227
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2154: LD_VAR 0 3
2158: PUSH
2159: LD_VAR 0 1
2163: ARRAY
2164: PPUSH
2165: LD_VAR 0 2
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PUSH
2174: LD_VAR 0 1
2178: PUSH
2179: LD_INT 4
2181: PLUS
2182: ARRAY
2183: PPUSH
2184: LD_VAR 0 2
2188: PUSH
2189: LD_INT 2
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 1
2197: PUSH
2198: LD_INT 4
2200: PLUS
2201: ARRAY
2202: PPUSH
2203: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2207: LD_VAR 0 3
2211: PUSH
2212: LD_VAR 0 1
2216: ARRAY
2217: PPUSH
2218: LD_INT 14
2220: PPUSH
2221: CALL_OW 179
// end ;
2225: GO 2151
2227: POP
2228: POP
// wait ( 0 0$2 ) ;
2229: LD_INT 70
2231: PPUSH
2232: CALL_OW 67
// CenterOnUnits ( eon ) ;
2236: LD_INT 14
2238: PPUSH
2239: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2243: LD_INT 90
2245: PPUSH
2246: LD_INT 43
2248: PPUSH
2249: LD_INT 2
2251: PPUSH
2252: LD_INT 21
2254: NEG
2255: PPUSH
2256: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2260: LD_EXP 2
2264: PPUSH
2265: LD_INT 84
2267: PPUSH
2268: LD_INT 36
2270: PPUSH
2271: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2275: LD_EXP 2
2279: PPUSH
2280: LD_INT 14
2282: PPUSH
2283: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2287: LD_EXP 11
2291: PPUSH
2292: LD_INT 85
2294: PPUSH
2295: LD_INT 36
2297: PPUSH
2298: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2302: LD_EXP 11
2306: PPUSH
2307: LD_INT 14
2309: PPUSH
2310: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2314: LD_EXP 10
2318: PPUSH
2319: LD_INT 86
2321: PPUSH
2322: LD_INT 36
2324: PPUSH
2325: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2329: LD_EXP 10
2333: PPUSH
2334: LD_INT 14
2336: PPUSH
2337: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2341: LD_EXP 7
2345: PPUSH
2346: LD_INT 87
2348: PPUSH
2349: LD_INT 36
2351: PPUSH
2352: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2356: LD_EXP 7
2360: PPUSH
2361: LD_INT 14
2363: PPUSH
2364: CALL_OW 179
// wait ( 0 0$3 ) ;
2368: LD_INT 105
2370: PPUSH
2371: CALL_OW 67
// p := 0 ;
2375: LD_ADDR_VAR 0 4
2379: PUSH
2380: LD_INT 0
2382: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2383: LD_INT 35
2385: PPUSH
2386: CALL_OW 67
// p := p + 1 ;
2390: LD_ADDR_VAR 0 4
2394: PUSH
2395: LD_VAR 0 4
2399: PUSH
2400: LD_INT 1
2402: PLUS
2403: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2404: LD_EXP 1
2408: PPUSH
2409: LD_INT 6
2411: PPUSH
2412: CALL_OW 308
2416: IFTRUE 2428
2418: PUSH
2419: LD_VAR 0 4
2423: PUSH
2424: LD_INT 10
2426: GREATER
2427: OR
2428: IFFALSE 2383
// heikeNearbyEon := true ;
2430: LD_ADDR_EXP 20
2434: PUSH
2435: LD_INT 1
2437: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2438: LD_EXP 6
2442: PPUSH
2443: LD_INT 88
2445: PPUSH
2446: LD_INT 37
2448: PPUSH
2449: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2453: LD_EXP 6
2457: PPUSH
2458: LD_EXP 13
2462: PUSH
2463: LD_INT 1
2465: ARRAY
2466: PPUSH
2467: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2471: LD_EXP 13
2475: PUSH
2476: LD_INT 1
2478: ARRAY
2479: PPUSH
2480: LD_INT 89
2482: PPUSH
2483: LD_INT 37
2485: PPUSH
2486: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2490: LD_EXP 13
2494: PUSH
2495: LD_INT 2
2497: ARRAY
2498: PPUSH
2499: LD_INT 91
2501: PPUSH
2502: LD_INT 39
2504: PPUSH
2505: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2509: LD_EXP 13
2513: PPUSH
2514: LD_EXP 11
2518: PPUSH
2519: CALL_OW 179
// wait ( 0 0$1 ) ;
2523: LD_INT 35
2525: PPUSH
2526: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2530: LD_EXP 13
2534: PUSH
2535: LD_INT 1
2537: ARRAY
2538: PPUSH
2539: LD_STRING DS-eon-1
2541: PPUSH
2542: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2546: LD_EXP 6
2550: PPUSH
2551: LD_STRING DSh-eon-1
2553: PPUSH
2554: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2558: LD_EXP 13
2562: PUSH
2563: LD_INT 1
2565: ARRAY
2566: PPUSH
2567: LD_STRING DS-eon-2
2569: PPUSH
2570: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2574: LD_EXP 6
2578: PPUSH
2579: LD_STRING DSh-eon-1a
2581: PPUSH
2582: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2586: LD_EXP 13
2590: PUSH
2591: LD_INT 1
2593: ARRAY
2594: PPUSH
2595: LD_INT 92
2597: PPUSH
2598: LD_INT 43
2600: PPUSH
2601: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2605: LD_EXP 13
2609: PUSH
2610: LD_INT 1
2612: ARRAY
2613: PPUSH
2614: LD_INT 14
2616: PPUSH
2617: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2621: LD_EXP 13
2625: PUSH
2626: LD_INT 2
2628: ARRAY
2629: PPUSH
2630: LD_INT 93
2632: PPUSH
2633: LD_INT 41
2635: PPUSH
2636: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2640: LD_EXP 13
2644: PUSH
2645: LD_INT 2
2647: ARRAY
2648: PPUSH
2649: LD_INT 93
2651: PPUSH
2652: LD_INT 40
2654: PPUSH
2655: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2659: LD_EXP 6
2663: PPUSH
2664: LD_INT 88
2666: PPUSH
2667: LD_INT 41
2669: PPUSH
2670: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2674: LD_EXP 6
2678: PPUSH
2679: LD_INT 87
2681: PPUSH
2682: LD_INT 41
2684: PPUSH
2685: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2689: LD_INT 35
2691: PPUSH
2692: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2696: LD_EXP 6
2700: PPUSH
2701: LD_INT 88
2703: PPUSH
2704: LD_INT 41
2706: PPUSH
2707: CALL_OW 307
2711: IFFALSE 2689
// wait ( 0 0$1 ) ;
2713: LD_INT 35
2715: PPUSH
2716: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2720: LD_EXP 6
2724: PPUSH
2725: LD_STRING DSh-eon-2
2727: PPUSH
2728: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2732: LD_EXP 11
2736: PPUSH
2737: LD_INT 87
2739: PPUSH
2740: LD_INT 40
2742: PPUSH
2743: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2747: LD_EXP 11
2751: PPUSH
2752: LD_INT 86
2754: PPUSH
2755: LD_INT 40
2757: PPUSH
2758: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2762: LD_INT 35
2764: PPUSH
2765: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2769: LD_EXP 11
2773: PPUSH
2774: LD_INT 87
2776: PPUSH
2777: LD_INT 40
2779: PPUSH
2780: CALL_OW 307
2784: IFFALSE 2762
// Say ( Shariff , DShar-eon-3 ) ;
2786: LD_EXP 11
2790: PPUSH
2791: LD_STRING DShar-eon-3
2793: PPUSH
2794: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2798: LD_INT 10
2800: PPUSH
2801: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2805: LD_EXP 5
2809: PPUSH
2810: LD_EXP 1
2814: PPUSH
2815: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2819: LD_EXP 11
2823: PPUSH
2824: LD_STRING DShar-eon-4
2826: PPUSH
2827: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2831: LD_EXP 5
2835: PPUSH
2836: LD_STRING DK-eon-4
2838: PPUSH
2839: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2843: LD_EXP 5
2847: PPUSH
2848: LD_INT 14
2850: PPUSH
2851: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2855: LD_INT 35
2857: PPUSH
2858: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2862: LD_EXP 5
2866: PPUSH
2867: CALL_OW 305
2871: NOT
2872: IFFALSE 2855
// ComTurnUnit ( Shariff , Heike ) ;
2874: LD_EXP 11
2878: PPUSH
2879: LD_EXP 1
2883: PPUSH
2884: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2888: LD_EXP 11
2892: PPUSH
2893: LD_STRING DShar-eon-5
2895: PPUSH
2896: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2900: LD_EXP 1
2904: PPUSH
2905: LD_INT 91
2907: PPUSH
2908: LD_INT 44
2910: PPUSH
2911: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2915: LD_EXP 1
2919: PPUSH
2920: LD_INT 14
2922: PPUSH
2923: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2927: LD_INT 35
2929: PPUSH
2930: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2934: LD_EXP 1
2938: PPUSH
2939: LD_INT 91
2941: PPUSH
2942: LD_INT 44
2944: PPUSH
2945: CALL_OW 307
2949: IFFALSE 2927
// Say ( Heike , DH-eon-5 ) ;
2951: LD_EXP 1
2955: PPUSH
2956: LD_STRING DH-eon-5
2958: PPUSH
2959: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2963: LD_EXP 1
2967: PPUSH
2968: LD_INT 14
2970: PPUSH
2971: CALL_OW 120
// wait ( 0 0$2 ) ;
2975: LD_INT 70
2977: PPUSH
2978: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2982: LD_INT 1
2984: PPUSH
2985: LD_STRING %_cont
2987: PPUSH
2988: CALL_OW 340
// InGameOff ;
2992: CALL_OW 9
// end ;
2996: PPOPN 4
2998: END
// every 3 trigger IsSelected ( Kaia ) do
2999: LD_EXP 5
3003: PPUSH
3004: CALL_OW 306
3008: IFFALSE 3025
3010: GO 3012
3012: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
3013: LD_EXP 5
3017: PPUSH
3018: LD_INT 42
3020: PPUSH
3021: CALL_OW 582
3025: END
// export function PrepareHeikeGroup ; begin
3026: LD_INT 0
3028: PPUSH
// uc_side := 2 ;
3029: LD_ADDR_OWVAR 20
3033: PUSH
3034: LD_INT 2
3036: ST_TO_ADDR
// uc_nation := 2 ;
3037: LD_ADDR_OWVAR 21
3041: PUSH
3042: LD_INT 2
3044: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3045: LD_ADDR_EXP 1
3049: PUSH
3050: LD_STRING Heike
3052: PPUSH
3053: CALL_OW 25
3057: ST_TO_ADDR
// uc_side := 5 ;
3058: LD_ADDR_OWVAR 20
3062: PUSH
3063: LD_INT 5
3065: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3066: LD_ADDR_EXP 5
3070: PUSH
3071: LD_STRING Kaia
3073: PPUSH
3074: CALL_OW 25
3078: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3079: LD_EXP 1
3083: PPUSH
3084: LD_INT 3
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3094: LD_EXP 5
3098: PPUSH
3099: LD_INT 3
3101: PPUSH
3102: LD_INT 0
3104: PPUSH
3105: CALL_OW 49
// end ;
3109: LD_VAR 0 1
3113: RET
// export function PrepareSheikGroup ; var un , i ; begin
3114: LD_INT 0
3116: PPUSH
3117: PPUSH
3118: PPUSH
// uc_side := 5 ;
3119: LD_ADDR_OWVAR 20
3123: PUSH
3124: LD_INT 5
3126: ST_TO_ADDR
// uc_nation := 2 ;
3127: LD_ADDR_OWVAR 21
3131: PUSH
3132: LD_INT 2
3134: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3135: LD_ADDR_EXP 10
3139: PUSH
3140: LD_STRING Ali
3142: PPUSH
3143: CALL_OW 25
3147: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3148: LD_ADDR_EXP 11
3152: PUSH
3153: LD_STRING Abdul
3155: PPUSH
3156: CALL_OW 25
3160: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3161: LD_ADDR_EXP 2
3165: PUSH
3166: LD_STRING Omar
3168: PPUSH
3169: CALL_OW 25
3173: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3174: LD_ADDR_EXP 7
3178: PUSH
3179: LD_STRING Mahtab
3181: PPUSH
3182: CALL_OW 25
3186: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3187: LD_ADDR_EXP 6
3191: PUSH
3192: LD_STRING Shahrzad
3194: PPUSH
3195: CALL_OW 25
3199: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3200: LD_EXP 10
3204: PPUSH
3205: LD_INT 85
3207: PPUSH
3208: LD_INT 37
3210: PPUSH
3211: LD_INT 0
3213: PPUSH
3214: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3218: LD_EXP 11
3222: PPUSH
3223: LD_INT 87
3225: PPUSH
3226: LD_INT 37
3228: PPUSH
3229: LD_INT 0
3231: PPUSH
3232: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3236: LD_EXP 2
3240: PPUSH
3241: LD_INT 85
3243: PPUSH
3244: LD_INT 35
3246: PPUSH
3247: LD_INT 0
3249: PPUSH
3250: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3254: LD_EXP 7
3258: PPUSH
3259: LD_INT 86
3261: PPUSH
3262: LD_INT 39
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3272: LD_EXP 6
3276: PPUSH
3277: LD_INT 88
3279: PPUSH
3280: LD_INT 39
3282: PPUSH
3283: LD_INT 0
3285: PPUSH
3286: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3290: LD_EXP 10
3294: PPUSH
3295: LD_EXP 11
3299: PPUSH
3300: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3304: LD_EXP 11
3308: PPUSH
3309: LD_EXP 10
3313: PPUSH
3314: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3318: LD_EXP 2
3322: PPUSH
3323: LD_EXP 11
3327: PPUSH
3328: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3332: LD_EXP 7
3336: PUSH
3337: LD_EXP 6
3341: PUSH
3342: EMPTY
3343: LIST
3344: LIST
3345: PPUSH
3346: LD_EXP 11
3350: PPUSH
3351: CALL_OW 119
// for i := 1 to 2 do
3355: LD_ADDR_VAR 0 3
3359: PUSH
3360: DOUBLE
3361: LD_INT 1
3363: DEC
3364: ST_TO_ADDR
3365: LD_INT 2
3367: PUSH
3368: FOR_TO
3369: IFFALSE 3455
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3371: LD_INT 2
3373: PPUSH
3374: LD_INT 4
3376: PPUSH
3377: LD_INT 6
3379: PPUSH
3380: CALL_OW 380
// un := CreateHuman ;
3384: LD_ADDR_VAR 0 2
3388: PUSH
3389: CALL_OW 44
3393: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3394: LD_VAR 0 2
3398: PPUSH
3399: LD_INT 90
3401: PPUSH
3402: LD_INT 44
3404: PPUSH
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3415: LD_VAR 0 2
3419: PPUSH
3420: LD_INT 91
3422: PPUSH
3423: LD_INT 43
3425: PPUSH
3426: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3430: LD_ADDR_EXP 13
3434: PUSH
3435: LD_EXP 13
3439: PPUSH
3440: LD_INT 1
3442: PPUSH
3443: LD_VAR 0 2
3447: PPUSH
3448: CALL_OW 2
3452: ST_TO_ADDR
// end ;
3453: GO 3368
3455: POP
3456: POP
// scientists := scientists diff 0 ;
3457: LD_ADDR_EXP 13
3461: PUSH
3462: LD_EXP 13
3466: PUSH
3467: LD_INT 0
3469: DIFF
3470: ST_TO_ADDR
// end ;
3471: LD_VAR 0 1
3475: RET
// export function PrepareKurtGroup ; var i ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
// uc_side := 5 ;
3480: LD_ADDR_OWVAR 20
3484: PUSH
3485: LD_INT 5
3487: ST_TO_ADDR
// uc_nation := 2 ;
3488: LD_ADDR_OWVAR 21
3492: PUSH
3493: LD_INT 2
3495: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3496: LD_ADDR_EXP 8
3500: PUSH
3501: LD_STRING Kurt
3503: PPUSH
3504: CALL_OW 25
3508: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3509: LD_ADDR_EXP 4
3513: PUSH
3514: LD_STRING Olaf
3516: PPUSH
3517: CALL_OW 25
3521: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3522: LD_ADDR_EXP 9
3526: PUSH
3527: LD_STRING Hans
3529: PPUSH
3530: CALL_OW 25
3534: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: LD_EXP 8
3544: PUSH
3545: LD_EXP 9
3549: PUSH
3550: LD_EXP 4
3554: PUSH
3555: EMPTY
3556: LIST
3557: LIST
3558: LIST
3559: PUSH
3560: FOR_IN
3561: IFFALSE 3580
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3563: LD_VAR 0 2
3567: PPUSH
3568: LD_INT 10
3570: PPUSH
3571: LD_INT 0
3573: PPUSH
3574: CALL_OW 49
3578: GO 3560
3580: POP
3581: POP
// ComTurnUnit ( Kurt , Hans ) ;
3582: LD_EXP 8
3586: PPUSH
3587: LD_EXP 9
3591: PPUSH
3592: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3596: LD_EXP 4
3600: PPUSH
3601: LD_EXP 9
3605: PPUSH
3606: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3610: LD_EXP 9
3614: PPUSH
3615: LD_EXP 4
3619: PPUSH
3620: CALL_OW 119
// end ;
3624: LD_VAR 0 1
3628: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
3634: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3635: LD_ADDR_VAR 0 2
3639: PUSH
3640: LD_INT 21
3642: PUSH
3643: LD_INT 3
3645: PUSH
3646: EMPTY
3647: LIST
3648: LIST
3649: PPUSH
3650: CALL_OW 69
3654: PUSH
3655: LD_INT 14
3657: DIFF
3658: PUSH
3659: FOR_IN
3660: IFFALSE 3740
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3662: LD_VAR 0 2
3666: PPUSH
3667: CALL_OW 266
3671: PUSH
3672: LD_INT 6
3674: PUSH
3675: LD_INT 31
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: IN
3682: IFFALSE 3706
// SetLives ( i , rand ( 500 , 600 ) ) else
3684: LD_VAR 0 2
3688: PPUSH
3689: LD_INT 500
3691: PPUSH
3692: LD_INT 600
3694: PPUSH
3695: CALL_OW 12
3699: PPUSH
3700: CALL_OW 234
3704: GO 3726
// SetLives ( i , rand ( 300 , 499 ) ) ;
3706: LD_VAR 0 2
3710: PPUSH
3711: LD_INT 300
3713: PPUSH
3714: LD_INT 499
3716: PPUSH
3717: CALL_OW 12
3721: PPUSH
3722: CALL_OW 234
// SetSide ( i , 5 ) ;
3726: LD_VAR 0 2
3730: PPUSH
3731: LD_INT 5
3733: PPUSH
3734: CALL_OW 235
// end ;
3738: GO 3659
3740: POP
3741: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3742: LD_ADDR_VAR 0 4
3746: PUSH
3747: LD_INT 9
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 517
3757: ST_TO_ADDR
// uc_side := 4 ;
3758: LD_ADDR_OWVAR 20
3762: PUSH
3763: LD_INT 4
3765: ST_TO_ADDR
// uc_nation := 1 ;
3766: LD_ADDR_OWVAR 21
3770: PUSH
3771: LD_INT 1
3773: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3774: LD_ADDR_VAR 0 2
3778: PUSH
3779: DOUBLE
3780: LD_INT 1
3782: DEC
3783: ST_TO_ADDR
3784: LD_VAR 0 4
3788: PUSH
3789: LD_INT 1
3791: ARRAY
3792: PUSH
3793: FOR_TO
3794: IFFALSE 3870
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3796: LD_INT 0
3798: PPUSH
3799: LD_INT 1
3801: PUSH
3802: LD_INT 1
3804: PUSH
3805: LD_INT 4
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PUSH
3813: LD_VAR 0 2
3817: PUSH
3818: LD_INT 3
3820: MOD
3821: PUSH
3822: LD_INT 1
3824: PLUS
3825: ARRAY
3826: PPUSH
3827: LD_INT 0
3829: PPUSH
3830: CALL_OW 380
// un := CreateHuman ;
3834: LD_ADDR_VAR 0 3
3838: PUSH
3839: CALL_OW 44
3843: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 9
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// KillUnit ( un ) ;
3859: LD_VAR 0 3
3863: PPUSH
3864: CALL_OW 66
// end ;
3868: GO 3793
3870: POP
3871: POP
// end ;
3872: LD_VAR 0 1
3876: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3877: LD_INT 0
3879: PPUSH
3880: PPUSH
3881: PPUSH
3882: PPUSH
3883: PPUSH
3884: PPUSH
3885: PPUSH
// uc_side := 5 ;
3886: LD_ADDR_OWVAR 20
3890: PUSH
3891: LD_INT 5
3893: ST_TO_ADDR
// uc_nation := 2 ;
3894: LD_ADDR_OWVAR 21
3898: PUSH
3899: LD_INT 2
3901: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3902: LD_ADDR_VAR 0 6
3906: PUSH
3907: LD_INT 2
3909: PUSH
3910: LD_INT 4
3912: PUSH
3913: LD_INT 5
3915: PUSH
3916: LD_INT 14
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: LIST
3923: LIST
3924: ST_TO_ADDR
// InitHc ;
3925: CALL_OW 19
// for i in area do
3929: LD_ADDR_VAR 0 2
3933: PUSH
3934: LD_VAR 0 6
3938: PUSH
3939: FOR_IN
3940: IFFALSE 4104
// begin tmp := AreaToList ( i , 0 ) ;
3942: LD_ADDR_VAR 0 5
3946: PUSH
3947: LD_VAR 0 2
3951: PPUSH
3952: LD_INT 0
3954: PPUSH
3955: CALL_OW 517
3959: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3960: LD_ADDR_VAR 0 3
3964: PUSH
3965: DOUBLE
3966: LD_INT 1
3968: DEC
3969: ST_TO_ADDR
3970: LD_VAR 0 5
3974: PUSH
3975: LD_INT 1
3977: ARRAY
3978: PUSH
3979: FOR_TO
3980: IFFALSE 4100
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3982: LD_INT 1
3984: PPUSH
3985: LD_INT 1
3987: PPUSH
3988: LD_INT 3
3990: PPUSH
3991: CALL_OW 380
// un := CreateHuman ;
3995: LD_ADDR_VAR 0 7
3999: PUSH
4000: CALL_OW 44
4004: ST_TO_ADDR
// if i = spawnBaseArea3 then
4005: LD_VAR 0 2
4009: PUSH
4010: LD_INT 5
4012: EQUAL
4013: IFFALSE 4031
// eonGuards := eonGuards ^ un ;
4015: LD_ADDR_EXP 14
4019: PUSH
4020: LD_EXP 14
4024: PUSH
4025: LD_VAR 0 7
4029: ADD
4030: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4031: LD_VAR 0 7
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// ComHold ( un ) ;
4048: LD_VAR 0 7
4052: PPUSH
4053: CALL_OW 140
// if i = spawnBaseArea4 then
4057: LD_VAR 0 2
4061: PUSH
4062: LD_INT 14
4064: EQUAL
4065: IFFALSE 4098
// begin firstGroup := firstGroup ^ un ;
4067: LD_ADDR_EXP 15
4071: PUSH
4072: LD_EXP 15
4076: PUSH
4077: LD_VAR 0 7
4081: ADD
4082: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4083: LD_VAR 0 7
4087: PPUSH
4088: LD_INT 108
4090: PPUSH
4091: LD_INT 47
4093: PPUSH
4094: CALL_OW 118
// end ; end ;
4098: GO 3979
4100: POP
4101: POP
// end ;
4102: GO 3939
4104: POP
4105: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4106: LD_ADDR_VAR 0 2
4110: PUSH
4111: DOUBLE
4112: LD_INT 1
4114: DEC
4115: ST_TO_ADDR
4116: LD_INT 30
4118: PUSH
4119: LD_INT 31
4121: PUSH
4122: EMPTY
4123: LIST
4124: LIST
4125: PPUSH
4126: CALL_OW 69
4130: PUSH
4131: FOR_TO
4132: IFFALSE 4226
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4134: LD_ADDR_VAR 0 4
4138: PUSH
4139: LD_INT 30
4141: PUSH
4142: LD_INT 31
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 69
4153: PUSH
4154: LD_VAR 0 2
4158: ARRAY
4159: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4160: LD_INT 1
4162: PPUSH
4163: LD_INT 1
4165: PPUSH
4166: LD_INT 3
4168: PPUSH
4169: CALL_OW 380
// un := CreateHuman ;
4173: LD_ADDR_VAR 0 7
4177: PUSH
4178: CALL_OW 44
4182: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4183: LD_VAR 0 7
4187: PPUSH
4188: LD_VAR 0 4
4192: PPUSH
4193: CALL_OW 254
4197: PUSH
4198: LD_INT 3
4200: PLUS
4201: PUSH
4202: LD_INT 6
4204: MOD
4205: PPUSH
4206: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4210: LD_VAR 0 7
4214: PPUSH
4215: LD_VAR 0 4
4219: PPUSH
4220: CALL_OW 52
// end ;
4224: GO 4131
4226: POP
4227: POP
// PrepareSoldier ( sex_male , 3 ) ;
4228: LD_INT 1
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: CALL_OW 381
// un := CreateHuman ;
4238: LD_ADDR_VAR 0 7
4242: PUSH
4243: CALL_OW 44
4247: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4248: LD_VAR 0 7
4252: PPUSH
4253: LD_INT 71
4255: PPUSH
4256: LD_INT 84
4258: PPUSH
4259: LD_INT 3
4261: PPUSH
4262: LD_INT 0
4264: PPUSH
4265: CALL 67670 0 5
// ComHold ( un ) ;
4269: LD_VAR 0 7
4273: PPUSH
4274: CALL_OW 140
// un := CreateHuman ;
4278: LD_ADDR_VAR 0 7
4282: PUSH
4283: CALL_OW 44
4287: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4288: LD_VAR 0 7
4292: PPUSH
4293: LD_INT 35
4295: PPUSH
4296: LD_INT 35
4298: PPUSH
4299: LD_INT 3
4301: PPUSH
4302: LD_INT 0
4304: PPUSH
4305: CALL 67670 0 5
// ComHold ( un ) ;
4309: LD_VAR 0 7
4313: PPUSH
4314: CALL_OW 140
// end ; end_of_file
4318: LD_VAR 0 1
4322: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4323: LD_VAR 0 1
4327: PUSH
4328: LD_INT 2
4330: EQUAL
4331: IFFALSE 4343
4333: PUSH
4334: LD_VAR 0 2
4338: PUSH
4339: LD_INT 5
4341: EQUAL
4342: AND
4343: IFFALSE 4369
// begin kaiaAttacked := true ;
4345: LD_ADDR_EXP 22
4349: PUSH
4350: LD_INT 1
4352: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4353: LD_INT 2
4355: PPUSH
4356: LD_INT 5
4358: PPUSH
4359: LD_INT 2
4361: PPUSH
4362: LD_INT 1
4364: PPUSH
4365: CALL_OW 80
// end ; end ;
4369: PPOPN 2
4371: END
// every 0 0$1 trigger scientists do var i ;
4372: LD_EXP 13
4376: IFFALSE 4584
4378: GO 4380
4380: DISABLE
4381: LD_INT 0
4383: PPUSH
// begin repeat for i in scientists do
4384: LD_ADDR_VAR 0 1
4388: PUSH
4389: LD_EXP 13
4393: PUSH
4394: FOR_IN
4395: IFFALSE 4569
// begin wait ( 0 0$1 ) ;
4397: LD_INT 35
4399: PPUSH
4400: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4404: LD_VAR 0 1
4408: PPUSH
4409: LD_INT 11
4411: PUSH
4412: LD_INT 13
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_VAR 0 1
4423: PUSH
4424: LD_INT 2
4426: MOD
4427: PUSH
4428: LD_INT 1
4430: PLUS
4431: ARRAY
4432: PPUSH
4433: CALL_OW 308
4437: NOT
4438: IFFALSE 4473
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4440: LD_VAR 0 1
4444: PPUSH
4445: LD_INT 11
4447: PUSH
4448: LD_INT 13
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_VAR 0 1
4459: PUSH
4460: LD_INT 2
4462: MOD
4463: PUSH
4464: LD_INT 1
4466: PLUS
4467: ARRAY
4468: PPUSH
4469: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_INT 14
4480: PPUSH
4481: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4485: LD_VAR 0 1
4489: PPUSH
4490: LD_INT 70
4492: PPUSH
4493: CALL_OW 202
// if rand ( 0 , 1 ) then
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 1
4502: PPUSH
4503: CALL_OW 12
4507: IFFALSE 4521
// AddComAnim ( i , 15 ) ;
4509: LD_VAR 0 1
4513: PPUSH
4514: LD_INT 15
4516: PPUSH
4517: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4521: LD_VAR 0 1
4525: PPUSH
4526: LD_INT 35
4528: PPUSH
4529: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4533: LD_VAR 0 1
4537: PPUSH
4538: LD_INT 12
4540: PPUSH
4541: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4545: LD_VAR 0 1
4549: PPUSH
4550: LD_INT 93
4552: PPUSH
4553: LD_INT 40
4555: PPUSH
4556: CALL_OW 178
// wait ( 0 0$1 ) ;
4560: LD_INT 35
4562: PPUSH
4563: CALL_OW 67
// end ;
4567: GO 4394
4569: POP
4570: POP
// wait ( 0 0$10 ) ;
4571: LD_INT 350
4573: PPUSH
4574: CALL_OW 67
// until heikeNearbyEon ;
4578: LD_EXP 20
4582: IFFALSE 4384
// end ; end_of_file
4584: PPOPN 1
4586: END
// export globalGameSaveCounter ; every 0 0$1 do
4587: GO 4589
4589: DISABLE
// begin enable ;
4590: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4591: LD_STRING updateTimer(
4593: PUSH
4594: LD_OWVAR 1
4598: STR
4599: PUSH
4600: LD_STRING );
4602: STR
4603: PPUSH
4604: CALL_OW 559
// end ;
4608: END
// every 0 0$1 do
4609: GO 4611
4611: DISABLE
// begin globalGameSaveCounter := 0 ;
4612: LD_ADDR_EXP 23
4616: PUSH
4617: LD_INT 0
4619: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4620: LD_STRING setGameSaveCounter(0)
4622: PPUSH
4623: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4627: LD_STRING initStreamRollete();
4629: PPUSH
4630: CALL_OW 559
// InitStreamMode ;
4634: CALL 5986 0 0
// DefineStreamItems ( false ) ;
4638: LD_INT 0
4640: PPUSH
4641: CALL 6450 0 1
// end ;
4645: END
// export function SOS_MapStart ( ) ; begin
4646: LD_INT 0
4648: PPUSH
// if streamModeActive then
4649: LD_EXP 24
4653: IFFALSE 4662
// DefineStreamItems ( true ) ;
4655: LD_INT 1
4657: PPUSH
4658: CALL 6450 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
4662: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
4664: PPUSH
4665: CALL_OW 559
// UpdateLuaVariables ( ) ;
4669: CALL 4686 0 0
// UpdateFactoryWaypoints ( ) ;
4673: CALL 19572 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4677: CALL 19824 0 0
// end ;
4681: LD_VAR 0 1
4685: RET
// function UpdateLuaVariables ( ) ; begin
4686: LD_INT 0
4688: PPUSH
// if globalGameSaveCounter then
4689: LD_EXP 23
4693: IFFALSE 4727
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4695: LD_ADDR_EXP 23
4699: PUSH
4700: LD_EXP 23
4704: PPUSH
4705: CALL 66883 0 1
4709: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4710: LD_STRING setGameSaveCounter(
4712: PUSH
4713: LD_EXP 23
4717: STR
4718: PUSH
4719: LD_STRING )
4721: STR
4722: PPUSH
4723: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4727: LD_STRING setGameDifficulty(
4729: PUSH
4730: LD_OWVAR 67
4734: STR
4735: PUSH
4736: LD_STRING )
4738: STR
4739: PPUSH
4740: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4744: LD_STRING displayDifficulty(
4746: PUSH
4747: LD_OWVAR 67
4751: STR
4752: PUSH
4753: LD_STRING )
4755: STR
4756: PPUSH
4757: CALL_OW 559
// end ;
4761: LD_VAR 0 1
4765: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4766: LD_INT 0
4768: PPUSH
// if p2 = stream_mode then
4769: LD_VAR 0 2
4773: PUSH
4774: LD_INT 100
4776: EQUAL
4777: IFFALSE 5780
// begin if not StreamModeActive then
4779: LD_EXP 24
4783: NOT
4784: IFFALSE 4794
// StreamModeActive := true ;
4786: LD_ADDR_EXP 24
4790: PUSH
4791: LD_INT 1
4793: ST_TO_ADDR
// if p3 = 0 then
4794: LD_VAR 0 3
4798: PUSH
4799: LD_INT 0
4801: EQUAL
4802: IFFALSE 4808
// InitStreamMode ;
4804: CALL 5986 0 0
// if p3 = 1 then
4808: LD_VAR 0 3
4812: PUSH
4813: LD_INT 1
4815: EQUAL
4816: IFFALSE 4826
// sRocket := true ;
4818: LD_ADDR_EXP 29
4822: PUSH
4823: LD_INT 1
4825: ST_TO_ADDR
// if p3 = 2 then
4826: LD_VAR 0 3
4830: PUSH
4831: LD_INT 2
4833: EQUAL
4834: IFFALSE 4844
// sSpeed := true ;
4836: LD_ADDR_EXP 28
4840: PUSH
4841: LD_INT 1
4843: ST_TO_ADDR
// if p3 = 3 then
4844: LD_VAR 0 3
4848: PUSH
4849: LD_INT 3
4851: EQUAL
4852: IFFALSE 4862
// sEngine := true ;
4854: LD_ADDR_EXP 30
4858: PUSH
4859: LD_INT 1
4861: ST_TO_ADDR
// if p3 = 4 then
4862: LD_VAR 0 3
4866: PUSH
4867: LD_INT 4
4869: EQUAL
4870: IFFALSE 4880
// sSpec := true ;
4872: LD_ADDR_EXP 27
4876: PUSH
4877: LD_INT 1
4879: ST_TO_ADDR
// if p3 = 5 then
4880: LD_VAR 0 3
4884: PUSH
4885: LD_INT 5
4887: EQUAL
4888: IFFALSE 4898
// sLevel := true ;
4890: LD_ADDR_EXP 31
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// if p3 = 6 then
4898: LD_VAR 0 3
4902: PUSH
4903: LD_INT 6
4905: EQUAL
4906: IFFALSE 4916
// sArmoury := true ;
4908: LD_ADDR_EXP 32
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// if p3 = 7 then
4916: LD_VAR 0 3
4920: PUSH
4921: LD_INT 7
4923: EQUAL
4924: IFFALSE 4934
// sRadar := true ;
4926: LD_ADDR_EXP 33
4930: PUSH
4931: LD_INT 1
4933: ST_TO_ADDR
// if p3 = 8 then
4934: LD_VAR 0 3
4938: PUSH
4939: LD_INT 8
4941: EQUAL
4942: IFFALSE 4952
// sBunker := true ;
4944: LD_ADDR_EXP 34
4948: PUSH
4949: LD_INT 1
4951: ST_TO_ADDR
// if p3 = 9 then
4952: LD_VAR 0 3
4956: PUSH
4957: LD_INT 9
4959: EQUAL
4960: IFFALSE 4970
// sHack := true ;
4962: LD_ADDR_EXP 35
4966: PUSH
4967: LD_INT 1
4969: ST_TO_ADDR
// if p3 = 10 then
4970: LD_VAR 0 3
4974: PUSH
4975: LD_INT 10
4977: EQUAL
4978: IFFALSE 4988
// sFire := true ;
4980: LD_ADDR_EXP 36
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 11 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 11
4995: EQUAL
4996: IFFALSE 5006
// sRefresh := true ;
4998: LD_ADDR_EXP 37
5002: PUSH
5003: LD_INT 1
5005: ST_TO_ADDR
// if p3 = 12 then
5006: LD_VAR 0 3
5010: PUSH
5011: LD_INT 12
5013: EQUAL
5014: IFFALSE 5024
// sExp := true ;
5016: LD_ADDR_EXP 38
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// if p3 = 13 then
5024: LD_VAR 0 3
5028: PUSH
5029: LD_INT 13
5031: EQUAL
5032: IFFALSE 5042
// sDepot := true ;
5034: LD_ADDR_EXP 39
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// if p3 = 14 then
5042: LD_VAR 0 3
5046: PUSH
5047: LD_INT 14
5049: EQUAL
5050: IFFALSE 5060
// sFlag := true ;
5052: LD_ADDR_EXP 40
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// if p3 = 15 then
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 15
5067: EQUAL
5068: IFFALSE 5078
// sKamikadze := true ;
5070: LD_ADDR_EXP 48
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// if p3 = 16 then
5078: LD_VAR 0 3
5082: PUSH
5083: LD_INT 16
5085: EQUAL
5086: IFFALSE 5096
// sTroll := true ;
5088: LD_ADDR_EXP 49
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// if p3 = 17 then
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 17
5103: EQUAL
5104: IFFALSE 5114
// sSlow := true ;
5106: LD_ADDR_EXP 50
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if p3 = 18 then
5114: LD_VAR 0 3
5118: PUSH
5119: LD_INT 18
5121: EQUAL
5122: IFFALSE 5132
// sLack := true ;
5124: LD_ADDR_EXP 51
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// if p3 = 19 then
5132: LD_VAR 0 3
5136: PUSH
5137: LD_INT 19
5139: EQUAL
5140: IFFALSE 5150
// sTank := true ;
5142: LD_ADDR_EXP 53
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// if p3 = 20 then
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 20
5157: EQUAL
5158: IFFALSE 5168
// sRemote := true ;
5160: LD_ADDR_EXP 54
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// if p3 = 21 then
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 21
5175: EQUAL
5176: IFFALSE 5186
// sPowell := true ;
5178: LD_ADDR_EXP 55
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if p3 = 22 then
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 22
5193: EQUAL
5194: IFFALSE 5204
// sTeleport := true ;
5196: LD_ADDR_EXP 58
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// if p3 = 23 then
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 23
5211: EQUAL
5212: IFFALSE 5222
// sOilTower := true ;
5214: LD_ADDR_EXP 60
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// if p3 = 24 then
5222: LD_VAR 0 3
5226: PUSH
5227: LD_INT 24
5229: EQUAL
5230: IFFALSE 5240
// sShovel := true ;
5232: LD_ADDR_EXP 61
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// if p3 = 25 then
5240: LD_VAR 0 3
5244: PUSH
5245: LD_INT 25
5247: EQUAL
5248: IFFALSE 5258
// sSheik := true ;
5250: LD_ADDR_EXP 62
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// if p3 = 26 then
5258: LD_VAR 0 3
5262: PUSH
5263: LD_INT 26
5265: EQUAL
5266: IFFALSE 5276
// sEarthquake := true ;
5268: LD_ADDR_EXP 64
5272: PUSH
5273: LD_INT 1
5275: ST_TO_ADDR
// if p3 = 27 then
5276: LD_VAR 0 3
5280: PUSH
5281: LD_INT 27
5283: EQUAL
5284: IFFALSE 5294
// sAI := true ;
5286: LD_ADDR_EXP 65
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// if p3 = 28 then
5294: LD_VAR 0 3
5298: PUSH
5299: LD_INT 28
5301: EQUAL
5302: IFFALSE 5312
// sCargo := true ;
5304: LD_ADDR_EXP 68
5308: PUSH
5309: LD_INT 1
5311: ST_TO_ADDR
// if p3 = 29 then
5312: LD_VAR 0 3
5316: PUSH
5317: LD_INT 29
5319: EQUAL
5320: IFFALSE 5330
// sDLaser := true ;
5322: LD_ADDR_EXP 69
5326: PUSH
5327: LD_INT 1
5329: ST_TO_ADDR
// if p3 = 30 then
5330: LD_VAR 0 3
5334: PUSH
5335: LD_INT 30
5337: EQUAL
5338: IFFALSE 5348
// sExchange := true ;
5340: LD_ADDR_EXP 70
5344: PUSH
5345: LD_INT 1
5347: ST_TO_ADDR
// if p3 = 31 then
5348: LD_VAR 0 3
5352: PUSH
5353: LD_INT 31
5355: EQUAL
5356: IFFALSE 5366
// sFac := true ;
5358: LD_ADDR_EXP 71
5362: PUSH
5363: LD_INT 1
5365: ST_TO_ADDR
// if p3 = 32 then
5366: LD_VAR 0 3
5370: PUSH
5371: LD_INT 32
5373: EQUAL
5374: IFFALSE 5384
// sPower := true ;
5376: LD_ADDR_EXP 72
5380: PUSH
5381: LD_INT 1
5383: ST_TO_ADDR
// if p3 = 33 then
5384: LD_VAR 0 3
5388: PUSH
5389: LD_INT 33
5391: EQUAL
5392: IFFALSE 5402
// sRandom := true ;
5394: LD_ADDR_EXP 73
5398: PUSH
5399: LD_INT 1
5401: ST_TO_ADDR
// if p3 = 34 then
5402: LD_VAR 0 3
5406: PUSH
5407: LD_INT 34
5409: EQUAL
5410: IFFALSE 5420
// sShield := true ;
5412: LD_ADDR_EXP 74
5416: PUSH
5417: LD_INT 1
5419: ST_TO_ADDR
// if p3 = 35 then
5420: LD_VAR 0 3
5424: PUSH
5425: LD_INT 35
5427: EQUAL
5428: IFFALSE 5438
// sTime := true ;
5430: LD_ADDR_EXP 75
5434: PUSH
5435: LD_INT 1
5437: ST_TO_ADDR
// if p3 = 36 then
5438: LD_VAR 0 3
5442: PUSH
5443: LD_INT 36
5445: EQUAL
5446: IFFALSE 5456
// sTools := true ;
5448: LD_ADDR_EXP 76
5452: PUSH
5453: LD_INT 1
5455: ST_TO_ADDR
// if p3 = 101 then
5456: LD_VAR 0 3
5460: PUSH
5461: LD_INT 101
5463: EQUAL
5464: IFFALSE 5474
// sSold := true ;
5466: LD_ADDR_EXP 41
5470: PUSH
5471: LD_INT 1
5473: ST_TO_ADDR
// if p3 = 102 then
5474: LD_VAR 0 3
5478: PUSH
5479: LD_INT 102
5481: EQUAL
5482: IFFALSE 5492
// sDiff := true ;
5484: LD_ADDR_EXP 42
5488: PUSH
5489: LD_INT 1
5491: ST_TO_ADDR
// if p3 = 103 then
5492: LD_VAR 0 3
5496: PUSH
5497: LD_INT 103
5499: EQUAL
5500: IFFALSE 5510
// sFog := true ;
5502: LD_ADDR_EXP 45
5506: PUSH
5507: LD_INT 1
5509: ST_TO_ADDR
// if p3 = 104 then
5510: LD_VAR 0 3
5514: PUSH
5515: LD_INT 104
5517: EQUAL
5518: IFFALSE 5528
// sReset := true ;
5520: LD_ADDR_EXP 46
5524: PUSH
5525: LD_INT 1
5527: ST_TO_ADDR
// if p3 = 105 then
5528: LD_VAR 0 3
5532: PUSH
5533: LD_INT 105
5535: EQUAL
5536: IFFALSE 5546
// sSun := true ;
5538: LD_ADDR_EXP 47
5542: PUSH
5543: LD_INT 1
5545: ST_TO_ADDR
// if p3 = 106 then
5546: LD_VAR 0 3
5550: PUSH
5551: LD_INT 106
5553: EQUAL
5554: IFFALSE 5564
// sTiger := true ;
5556: LD_ADDR_EXP 43
5560: PUSH
5561: LD_INT 1
5563: ST_TO_ADDR
// if p3 = 107 then
5564: LD_VAR 0 3
5568: PUSH
5569: LD_INT 107
5571: EQUAL
5572: IFFALSE 5582
// sBomb := true ;
5574: LD_ADDR_EXP 44
5578: PUSH
5579: LD_INT 1
5581: ST_TO_ADDR
// if p3 = 108 then
5582: LD_VAR 0 3
5586: PUSH
5587: LD_INT 108
5589: EQUAL
5590: IFFALSE 5600
// sWound := true ;
5592: LD_ADDR_EXP 52
5596: PUSH
5597: LD_INT 1
5599: ST_TO_ADDR
// if p3 = 109 then
5600: LD_VAR 0 3
5604: PUSH
5605: LD_INT 109
5607: EQUAL
5608: IFFALSE 5618
// sBetray := true ;
5610: LD_ADDR_EXP 56
5614: PUSH
5615: LD_INT 1
5617: ST_TO_ADDR
// if p3 = 110 then
5618: LD_VAR 0 3
5622: PUSH
5623: LD_INT 110
5625: EQUAL
5626: IFFALSE 5636
// sContamin := true ;
5628: LD_ADDR_EXP 57
5632: PUSH
5633: LD_INT 1
5635: ST_TO_ADDR
// if p3 = 111 then
5636: LD_VAR 0 3
5640: PUSH
5641: LD_INT 111
5643: EQUAL
5644: IFFALSE 5654
// sOil := true ;
5646: LD_ADDR_EXP 59
5650: PUSH
5651: LD_INT 1
5653: ST_TO_ADDR
// if p3 = 112 then
5654: LD_VAR 0 3
5658: PUSH
5659: LD_INT 112
5661: EQUAL
5662: IFFALSE 5672
// sStu := true ;
5664: LD_ADDR_EXP 63
5668: PUSH
5669: LD_INT 1
5671: ST_TO_ADDR
// if p3 = 113 then
5672: LD_VAR 0 3
5676: PUSH
5677: LD_INT 113
5679: EQUAL
5680: IFFALSE 5690
// sBazooka := true ;
5682: LD_ADDR_EXP 66
5686: PUSH
5687: LD_INT 1
5689: ST_TO_ADDR
// if p3 = 114 then
5690: LD_VAR 0 3
5694: PUSH
5695: LD_INT 114
5697: EQUAL
5698: IFFALSE 5708
// sMortar := true ;
5700: LD_ADDR_EXP 67
5704: PUSH
5705: LD_INT 1
5707: ST_TO_ADDR
// if p3 = 115 then
5708: LD_VAR 0 3
5712: PUSH
5713: LD_INT 115
5715: EQUAL
5716: IFFALSE 5726
// sRanger := true ;
5718: LD_ADDR_EXP 77
5722: PUSH
5723: LD_INT 1
5725: ST_TO_ADDR
// if p3 = 116 then
5726: LD_VAR 0 3
5730: PUSH
5731: LD_INT 116
5733: EQUAL
5734: IFFALSE 5744
// sComputer := true ;
5736: LD_ADDR_EXP 78
5740: PUSH
5741: LD_INT 1
5743: ST_TO_ADDR
// if p3 = 117 then
5744: LD_VAR 0 3
5748: PUSH
5749: LD_INT 117
5751: EQUAL
5752: IFFALSE 5762
// s30 := true ;
5754: LD_ADDR_EXP 79
5758: PUSH
5759: LD_INT 1
5761: ST_TO_ADDR
// if p3 = 118 then
5762: LD_VAR 0 3
5766: PUSH
5767: LD_INT 118
5769: EQUAL
5770: IFFALSE 5780
// s60 := true ;
5772: LD_ADDR_EXP 80
5776: PUSH
5777: LD_INT 1
5779: ST_TO_ADDR
// end ; if p2 = hack_mode then
5780: LD_VAR 0 2
5784: PUSH
5785: LD_INT 101
5787: EQUAL
5788: IFFALSE 5916
// begin case p3 of 1 :
5790: LD_VAR 0 3
5794: PUSH
5795: LD_INT 1
5797: DOUBLE
5798: EQUAL
5799: IFTRUE 5803
5801: GO 5810
5803: POP
// hHackUnlimitedResources ; 2 :
5804: CALL 18179 0 0
5808: GO 5916
5810: LD_INT 2
5812: DOUBLE
5813: EQUAL
5814: IFTRUE 5818
5816: GO 5825
5818: POP
// hHackSetLevel10 ; 3 :
5819: CALL 18312 0 0
5823: GO 5916
5825: LD_INT 3
5827: DOUBLE
5828: EQUAL
5829: IFTRUE 5833
5831: GO 5840
5833: POP
// hHackSetLevel10YourUnits ; 4 :
5834: CALL 18397 0 0
5838: GO 5916
5840: LD_INT 4
5842: DOUBLE
5843: EQUAL
5844: IFTRUE 5848
5846: GO 5855
5848: POP
// hHackInvincible ; 5 :
5849: CALL 18845 0 0
5853: GO 5916
5855: LD_INT 5
5857: DOUBLE
5858: EQUAL
5859: IFTRUE 5863
5861: GO 5870
5863: POP
// hHackInvisible ; 6 :
5864: CALL 18956 0 0
5868: GO 5916
5870: LD_INT 6
5872: DOUBLE
5873: EQUAL
5874: IFTRUE 5878
5876: GO 5885
5878: POP
// hHackChangeYourSide ; 7 :
5879: CALL 19013 0 0
5883: GO 5916
5885: LD_INT 7
5887: DOUBLE
5888: EQUAL
5889: IFTRUE 5893
5891: GO 5900
5893: POP
// hHackChangeUnitSide ; 8 :
5894: CALL 19055 0 0
5898: GO 5916
5900: LD_INT 8
5902: DOUBLE
5903: EQUAL
5904: IFTRUE 5908
5906: GO 5915
5908: POP
// hHackFog ; end ;
5909: CALL 19156 0 0
5913: GO 5916
5915: POP
// end ; if p2 = game_save_mode then
5916: LD_VAR 0 2
5920: PUSH
5921: LD_INT 102
5923: EQUAL
5924: IFFALSE 5981
// begin if p3 = 1 then
5926: LD_VAR 0 3
5930: PUSH
5931: LD_INT 1
5933: EQUAL
5934: IFFALSE 5946
// globalGameSaveCounter := p4 ;
5936: LD_ADDR_EXP 23
5940: PUSH
5941: LD_VAR 0 4
5945: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5946: LD_VAR 0 3
5950: PUSH
5951: LD_INT 2
5953: EQUAL
5954: IFFALSE 5962
5956: PUSH
5957: LD_EXP 23
5961: AND
5962: IFFALSE 5981
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5964: LD_STRING setGameSaveCounter(
5966: PUSH
5967: LD_EXP 23
5971: STR
5972: PUSH
5973: LD_STRING )
5975: STR
5976: PPUSH
5977: CALL_OW 559
// end ; end ;
5981: LD_VAR 0 7
5985: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5986: LD_INT 0
5988: PPUSH
// streamModeActive := false ;
5989: LD_ADDR_EXP 24
5993: PUSH
5994: LD_INT 0
5996: ST_TO_ADDR
// normalCounter := 36 ;
5997: LD_ADDR_EXP 25
6001: PUSH
6002: LD_INT 36
6004: ST_TO_ADDR
// hardcoreCounter := 18 ;
6005: LD_ADDR_EXP 26
6009: PUSH
6010: LD_INT 18
6012: ST_TO_ADDR
// sRocket := false ;
6013: LD_ADDR_EXP 29
6017: PUSH
6018: LD_INT 0
6020: ST_TO_ADDR
// sSpeed := false ;
6021: LD_ADDR_EXP 28
6025: PUSH
6026: LD_INT 0
6028: ST_TO_ADDR
// sEngine := false ;
6029: LD_ADDR_EXP 30
6033: PUSH
6034: LD_INT 0
6036: ST_TO_ADDR
// sSpec := false ;
6037: LD_ADDR_EXP 27
6041: PUSH
6042: LD_INT 0
6044: ST_TO_ADDR
// sLevel := false ;
6045: LD_ADDR_EXP 31
6049: PUSH
6050: LD_INT 0
6052: ST_TO_ADDR
// sArmoury := false ;
6053: LD_ADDR_EXP 32
6057: PUSH
6058: LD_INT 0
6060: ST_TO_ADDR
// sRadar := false ;
6061: LD_ADDR_EXP 33
6065: PUSH
6066: LD_INT 0
6068: ST_TO_ADDR
// sBunker := false ;
6069: LD_ADDR_EXP 34
6073: PUSH
6074: LD_INT 0
6076: ST_TO_ADDR
// sHack := false ;
6077: LD_ADDR_EXP 35
6081: PUSH
6082: LD_INT 0
6084: ST_TO_ADDR
// sFire := false ;
6085: LD_ADDR_EXP 36
6089: PUSH
6090: LD_INT 0
6092: ST_TO_ADDR
// sRefresh := false ;
6093: LD_ADDR_EXP 37
6097: PUSH
6098: LD_INT 0
6100: ST_TO_ADDR
// sExp := false ;
6101: LD_ADDR_EXP 38
6105: PUSH
6106: LD_INT 0
6108: ST_TO_ADDR
// sDepot := false ;
6109: LD_ADDR_EXP 39
6113: PUSH
6114: LD_INT 0
6116: ST_TO_ADDR
// sFlag := false ;
6117: LD_ADDR_EXP 40
6121: PUSH
6122: LD_INT 0
6124: ST_TO_ADDR
// sKamikadze := false ;
6125: LD_ADDR_EXP 48
6129: PUSH
6130: LD_INT 0
6132: ST_TO_ADDR
// sTroll := false ;
6133: LD_ADDR_EXP 49
6137: PUSH
6138: LD_INT 0
6140: ST_TO_ADDR
// sSlow := false ;
6141: LD_ADDR_EXP 50
6145: PUSH
6146: LD_INT 0
6148: ST_TO_ADDR
// sLack := false ;
6149: LD_ADDR_EXP 51
6153: PUSH
6154: LD_INT 0
6156: ST_TO_ADDR
// sTank := false ;
6157: LD_ADDR_EXP 53
6161: PUSH
6162: LD_INT 0
6164: ST_TO_ADDR
// sRemote := false ;
6165: LD_ADDR_EXP 54
6169: PUSH
6170: LD_INT 0
6172: ST_TO_ADDR
// sPowell := false ;
6173: LD_ADDR_EXP 55
6177: PUSH
6178: LD_INT 0
6180: ST_TO_ADDR
// sTeleport := false ;
6181: LD_ADDR_EXP 58
6185: PUSH
6186: LD_INT 0
6188: ST_TO_ADDR
// sOilTower := false ;
6189: LD_ADDR_EXP 60
6193: PUSH
6194: LD_INT 0
6196: ST_TO_ADDR
// sShovel := false ;
6197: LD_ADDR_EXP 61
6201: PUSH
6202: LD_INT 0
6204: ST_TO_ADDR
// sSheik := false ;
6205: LD_ADDR_EXP 62
6209: PUSH
6210: LD_INT 0
6212: ST_TO_ADDR
// sEarthquake := false ;
6213: LD_ADDR_EXP 64
6217: PUSH
6218: LD_INT 0
6220: ST_TO_ADDR
// sAI := false ;
6221: LD_ADDR_EXP 65
6225: PUSH
6226: LD_INT 0
6228: ST_TO_ADDR
// sCargo := false ;
6229: LD_ADDR_EXP 68
6233: PUSH
6234: LD_INT 0
6236: ST_TO_ADDR
// sDLaser := false ;
6237: LD_ADDR_EXP 69
6241: PUSH
6242: LD_INT 0
6244: ST_TO_ADDR
// sExchange := false ;
6245: LD_ADDR_EXP 70
6249: PUSH
6250: LD_INT 0
6252: ST_TO_ADDR
// sFac := false ;
6253: LD_ADDR_EXP 71
6257: PUSH
6258: LD_INT 0
6260: ST_TO_ADDR
// sPower := false ;
6261: LD_ADDR_EXP 72
6265: PUSH
6266: LD_INT 0
6268: ST_TO_ADDR
// sRandom := false ;
6269: LD_ADDR_EXP 73
6273: PUSH
6274: LD_INT 0
6276: ST_TO_ADDR
// sShield := false ;
6277: LD_ADDR_EXP 74
6281: PUSH
6282: LD_INT 0
6284: ST_TO_ADDR
// sTime := false ;
6285: LD_ADDR_EXP 75
6289: PUSH
6290: LD_INT 0
6292: ST_TO_ADDR
// sTools := false ;
6293: LD_ADDR_EXP 76
6297: PUSH
6298: LD_INT 0
6300: ST_TO_ADDR
// sSold := false ;
6301: LD_ADDR_EXP 41
6305: PUSH
6306: LD_INT 0
6308: ST_TO_ADDR
// sDiff := false ;
6309: LD_ADDR_EXP 42
6313: PUSH
6314: LD_INT 0
6316: ST_TO_ADDR
// sFog := false ;
6317: LD_ADDR_EXP 45
6321: PUSH
6322: LD_INT 0
6324: ST_TO_ADDR
// sReset := false ;
6325: LD_ADDR_EXP 46
6329: PUSH
6330: LD_INT 0
6332: ST_TO_ADDR
// sSun := false ;
6333: LD_ADDR_EXP 47
6337: PUSH
6338: LD_INT 0
6340: ST_TO_ADDR
// sTiger := false ;
6341: LD_ADDR_EXP 43
6345: PUSH
6346: LD_INT 0
6348: ST_TO_ADDR
// sBomb := false ;
6349: LD_ADDR_EXP 44
6353: PUSH
6354: LD_INT 0
6356: ST_TO_ADDR
// sWound := false ;
6357: LD_ADDR_EXP 52
6361: PUSH
6362: LD_INT 0
6364: ST_TO_ADDR
// sBetray := false ;
6365: LD_ADDR_EXP 56
6369: PUSH
6370: LD_INT 0
6372: ST_TO_ADDR
// sContamin := false ;
6373: LD_ADDR_EXP 57
6377: PUSH
6378: LD_INT 0
6380: ST_TO_ADDR
// sOil := false ;
6381: LD_ADDR_EXP 59
6385: PUSH
6386: LD_INT 0
6388: ST_TO_ADDR
// sStu := false ;
6389: LD_ADDR_EXP 63
6393: PUSH
6394: LD_INT 0
6396: ST_TO_ADDR
// sBazooka := false ;
6397: LD_ADDR_EXP 66
6401: PUSH
6402: LD_INT 0
6404: ST_TO_ADDR
// sMortar := false ;
6405: LD_ADDR_EXP 67
6409: PUSH
6410: LD_INT 0
6412: ST_TO_ADDR
// sRanger := false ;
6413: LD_ADDR_EXP 77
6417: PUSH
6418: LD_INT 0
6420: ST_TO_ADDR
// sComputer := false ;
6421: LD_ADDR_EXP 78
6425: PUSH
6426: LD_INT 0
6428: ST_TO_ADDR
// s30 := false ;
6429: LD_ADDR_EXP 79
6433: PUSH
6434: LD_INT 0
6436: ST_TO_ADDR
// s60 := false ;
6437: LD_ADDR_EXP 80
6441: PUSH
6442: LD_INT 0
6444: ST_TO_ADDR
// end ;
6445: LD_VAR 0 1
6449: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6450: LD_INT 0
6452: PPUSH
6453: PPUSH
6454: PPUSH
6455: PPUSH
6456: PPUSH
6457: PPUSH
6458: PPUSH
// result := [ ] ;
6459: LD_ADDR_VAR 0 2
6463: PUSH
6464: EMPTY
6465: ST_TO_ADDR
// if campaign_id = 1 then
6466: LD_OWVAR 69
6470: PUSH
6471: LD_INT 1
6473: EQUAL
6474: IFFALSE 9640
// begin case mission_number of 1 :
6476: LD_OWVAR 70
6480: PUSH
6481: LD_INT 1
6483: DOUBLE
6484: EQUAL
6485: IFTRUE 6489
6487: GO 6565
6489: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6490: LD_ADDR_VAR 0 2
6494: PUSH
6495: LD_INT 2
6497: PUSH
6498: LD_INT 4
6500: PUSH
6501: LD_INT 11
6503: PUSH
6504: LD_INT 12
6506: PUSH
6507: LD_INT 15
6509: PUSH
6510: LD_INT 16
6512: PUSH
6513: LD_INT 22
6515: PUSH
6516: LD_INT 23
6518: PUSH
6519: LD_INT 26
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: PUSH
6533: LD_INT 101
6535: PUSH
6536: LD_INT 102
6538: PUSH
6539: LD_INT 106
6541: PUSH
6542: LD_INT 116
6544: PUSH
6545: LD_INT 117
6547: PUSH
6548: LD_INT 118
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: ST_TO_ADDR
6563: GO 9638
6565: LD_INT 2
6567: DOUBLE
6568: EQUAL
6569: IFTRUE 6573
6571: GO 6657
6573: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6574: LD_ADDR_VAR 0 2
6578: PUSH
6579: LD_INT 2
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: LD_INT 11
6587: PUSH
6588: LD_INT 12
6590: PUSH
6591: LD_INT 15
6593: PUSH
6594: LD_INT 16
6596: PUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 23
6602: PUSH
6603: LD_INT 26
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 101
6619: PUSH
6620: LD_INT 102
6622: PUSH
6623: LD_INT 105
6625: PUSH
6626: LD_INT 106
6628: PUSH
6629: LD_INT 108
6631: PUSH
6632: LD_INT 116
6634: PUSH
6635: LD_INT 117
6637: PUSH
6638: LD_INT 118
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: ST_TO_ADDR
6655: GO 9638
6657: LD_INT 3
6659: DOUBLE
6660: EQUAL
6661: IFTRUE 6665
6663: GO 6753
6665: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6666: LD_ADDR_VAR 0 2
6670: PUSH
6671: LD_INT 2
6673: PUSH
6674: LD_INT 4
6676: PUSH
6677: LD_INT 5
6679: PUSH
6680: LD_INT 11
6682: PUSH
6683: LD_INT 12
6685: PUSH
6686: LD_INT 15
6688: PUSH
6689: LD_INT 16
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 26
6697: PUSH
6698: LD_INT 36
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: PUSH
6713: LD_INT 101
6715: PUSH
6716: LD_INT 102
6718: PUSH
6719: LD_INT 105
6721: PUSH
6722: LD_INT 106
6724: PUSH
6725: LD_INT 108
6727: PUSH
6728: LD_INT 116
6730: PUSH
6731: LD_INT 117
6733: PUSH
6734: LD_INT 118
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: ST_TO_ADDR
6751: GO 9638
6753: LD_INT 4
6755: DOUBLE
6756: EQUAL
6757: IFTRUE 6761
6759: GO 6857
6761: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6762: LD_ADDR_VAR 0 2
6766: PUSH
6767: LD_INT 2
6769: PUSH
6770: LD_INT 4
6772: PUSH
6773: LD_INT 5
6775: PUSH
6776: LD_INT 8
6778: PUSH
6779: LD_INT 11
6781: PUSH
6782: LD_INT 12
6784: PUSH
6785: LD_INT 15
6787: PUSH
6788: LD_INT 16
6790: PUSH
6791: LD_INT 22
6793: PUSH
6794: LD_INT 23
6796: PUSH
6797: LD_INT 26
6799: PUSH
6800: LD_INT 36
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 101
6819: PUSH
6820: LD_INT 102
6822: PUSH
6823: LD_INT 105
6825: PUSH
6826: LD_INT 106
6828: PUSH
6829: LD_INT 108
6831: PUSH
6832: LD_INT 116
6834: PUSH
6835: LD_INT 117
6837: PUSH
6838: LD_INT 118
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: ST_TO_ADDR
6855: GO 9638
6857: LD_INT 5
6859: DOUBLE
6860: EQUAL
6861: IFTRUE 6865
6863: GO 6977
6865: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6866: LD_ADDR_VAR 0 2
6870: PUSH
6871: LD_INT 2
6873: PUSH
6874: LD_INT 4
6876: PUSH
6877: LD_INT 5
6879: PUSH
6880: LD_INT 6
6882: PUSH
6883: LD_INT 8
6885: PUSH
6886: LD_INT 11
6888: PUSH
6889: LD_INT 12
6891: PUSH
6892: LD_INT 15
6894: PUSH
6895: LD_INT 16
6897: PUSH
6898: LD_INT 22
6900: PUSH
6901: LD_INT 23
6903: PUSH
6904: LD_INT 25
6906: PUSH
6907: LD_INT 26
6909: PUSH
6910: LD_INT 36
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 101
6931: PUSH
6932: LD_INT 102
6934: PUSH
6935: LD_INT 105
6937: PUSH
6938: LD_INT 106
6940: PUSH
6941: LD_INT 108
6943: PUSH
6944: LD_INT 109
6946: PUSH
6947: LD_INT 112
6949: PUSH
6950: LD_INT 116
6952: PUSH
6953: LD_INT 117
6955: PUSH
6956: LD_INT 118
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: ST_TO_ADDR
6975: GO 9638
6977: LD_INT 6
6979: DOUBLE
6980: EQUAL
6981: IFTRUE 6985
6983: GO 7117
6985: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6986: LD_ADDR_VAR 0 2
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 4
6996: PUSH
6997: LD_INT 5
6999: PUSH
7000: LD_INT 6
7002: PUSH
7003: LD_INT 8
7005: PUSH
7006: LD_INT 11
7008: PUSH
7009: LD_INT 12
7011: PUSH
7012: LD_INT 15
7014: PUSH
7015: LD_INT 16
7017: PUSH
7018: LD_INT 20
7020: PUSH
7021: LD_INT 21
7023: PUSH
7024: LD_INT 22
7026: PUSH
7027: LD_INT 23
7029: PUSH
7030: LD_INT 25
7032: PUSH
7033: LD_INT 26
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 31
7041: PUSH
7042: LD_INT 32
7044: PUSH
7045: LD_INT 36
7047: PUSH
7048: EMPTY
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 101
7071: PUSH
7072: LD_INT 102
7074: PUSH
7075: LD_INT 105
7077: PUSH
7078: LD_INT 106
7080: PUSH
7081: LD_INT 108
7083: PUSH
7084: LD_INT 109
7086: PUSH
7087: LD_INT 112
7089: PUSH
7090: LD_INT 116
7092: PUSH
7093: LD_INT 117
7095: PUSH
7096: LD_INT 118
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: ST_TO_ADDR
7115: GO 9638
7117: LD_INT 7
7119: DOUBLE
7120: EQUAL
7121: IFTRUE 7125
7123: GO 7237
7125: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7126: LD_ADDR_VAR 0 2
7130: PUSH
7131: LD_INT 2
7133: PUSH
7134: LD_INT 4
7136: PUSH
7137: LD_INT 5
7139: PUSH
7140: LD_INT 7
7142: PUSH
7143: LD_INT 11
7145: PUSH
7146: LD_INT 12
7148: PUSH
7149: LD_INT 15
7151: PUSH
7152: LD_INT 16
7154: PUSH
7155: LD_INT 20
7157: PUSH
7158: LD_INT 21
7160: PUSH
7161: LD_INT 22
7163: PUSH
7164: LD_INT 23
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 26
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 101
7191: PUSH
7192: LD_INT 102
7194: PUSH
7195: LD_INT 103
7197: PUSH
7198: LD_INT 105
7200: PUSH
7201: LD_INT 106
7203: PUSH
7204: LD_INT 108
7206: PUSH
7207: LD_INT 112
7209: PUSH
7210: LD_INT 116
7212: PUSH
7213: LD_INT 117
7215: PUSH
7216: LD_INT 118
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: ST_TO_ADDR
7235: GO 9638
7237: LD_INT 8
7239: DOUBLE
7240: EQUAL
7241: IFTRUE 7245
7243: GO 7385
7245: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7246: LD_ADDR_VAR 0 2
7250: PUSH
7251: LD_INT 2
7253: PUSH
7254: LD_INT 4
7256: PUSH
7257: LD_INT 5
7259: PUSH
7260: LD_INT 6
7262: PUSH
7263: LD_INT 7
7265: PUSH
7266: LD_INT 8
7268: PUSH
7269: LD_INT 11
7271: PUSH
7272: LD_INT 12
7274: PUSH
7275: LD_INT 15
7277: PUSH
7278: LD_INT 16
7280: PUSH
7281: LD_INT 20
7283: PUSH
7284: LD_INT 21
7286: PUSH
7287: LD_INT 22
7289: PUSH
7290: LD_INT 23
7292: PUSH
7293: LD_INT 25
7295: PUSH
7296: LD_INT 26
7298: PUSH
7299: LD_INT 30
7301: PUSH
7302: LD_INT 31
7304: PUSH
7305: LD_INT 32
7307: PUSH
7308: LD_INT 36
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 101
7335: PUSH
7336: LD_INT 102
7338: PUSH
7339: LD_INT 103
7341: PUSH
7342: LD_INT 105
7344: PUSH
7345: LD_INT 106
7347: PUSH
7348: LD_INT 108
7350: PUSH
7351: LD_INT 109
7353: PUSH
7354: LD_INT 112
7356: PUSH
7357: LD_INT 116
7359: PUSH
7360: LD_INT 117
7362: PUSH
7363: LD_INT 118
7365: PUSH
7366: EMPTY
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: LIST
7382: ST_TO_ADDR
7383: GO 9638
7385: LD_INT 9
7387: DOUBLE
7388: EQUAL
7389: IFTRUE 7393
7391: GO 7541
7393: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7394: LD_ADDR_VAR 0 2
7398: PUSH
7399: LD_INT 2
7401: PUSH
7402: LD_INT 4
7404: PUSH
7405: LD_INT 5
7407: PUSH
7408: LD_INT 6
7410: PUSH
7411: LD_INT 7
7413: PUSH
7414: LD_INT 8
7416: PUSH
7417: LD_INT 11
7419: PUSH
7420: LD_INT 12
7422: PUSH
7423: LD_INT 15
7425: PUSH
7426: LD_INT 16
7428: PUSH
7429: LD_INT 20
7431: PUSH
7432: LD_INT 21
7434: PUSH
7435: LD_INT 22
7437: PUSH
7438: LD_INT 23
7440: PUSH
7441: LD_INT 25
7443: PUSH
7444: LD_INT 26
7446: PUSH
7447: LD_INT 28
7449: PUSH
7450: LD_INT 30
7452: PUSH
7453: LD_INT 31
7455: PUSH
7456: LD_INT 32
7458: PUSH
7459: LD_INT 36
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 101
7487: PUSH
7488: LD_INT 102
7490: PUSH
7491: LD_INT 103
7493: PUSH
7494: LD_INT 105
7496: PUSH
7497: LD_INT 106
7499: PUSH
7500: LD_INT 108
7502: PUSH
7503: LD_INT 109
7505: PUSH
7506: LD_INT 112
7508: PUSH
7509: LD_INT 114
7511: PUSH
7512: LD_INT 116
7514: PUSH
7515: LD_INT 117
7517: PUSH
7518: LD_INT 118
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: ST_TO_ADDR
7539: GO 9638
7541: LD_INT 10
7543: DOUBLE
7544: EQUAL
7545: IFTRUE 7549
7547: GO 7745
7549: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7550: LD_ADDR_VAR 0 2
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: LD_INT 4
7560: PUSH
7561: LD_INT 5
7563: PUSH
7564: LD_INT 6
7566: PUSH
7567: LD_INT 7
7569: PUSH
7570: LD_INT 8
7572: PUSH
7573: LD_INT 9
7575: PUSH
7576: LD_INT 10
7578: PUSH
7579: LD_INT 11
7581: PUSH
7582: LD_INT 12
7584: PUSH
7585: LD_INT 13
7587: PUSH
7588: LD_INT 14
7590: PUSH
7591: LD_INT 15
7593: PUSH
7594: LD_INT 16
7596: PUSH
7597: LD_INT 17
7599: PUSH
7600: LD_INT 18
7602: PUSH
7603: LD_INT 19
7605: PUSH
7606: LD_INT 20
7608: PUSH
7609: LD_INT 21
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 23
7617: PUSH
7618: LD_INT 24
7620: PUSH
7621: LD_INT 25
7623: PUSH
7624: LD_INT 26
7626: PUSH
7627: LD_INT 28
7629: PUSH
7630: LD_INT 30
7632: PUSH
7633: LD_INT 31
7635: PUSH
7636: LD_INT 32
7638: PUSH
7639: LD_INT 36
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: PUSH
7673: LD_INT 101
7675: PUSH
7676: LD_INT 102
7678: PUSH
7679: LD_INT 103
7681: PUSH
7682: LD_INT 104
7684: PUSH
7685: LD_INT 105
7687: PUSH
7688: LD_INT 106
7690: PUSH
7691: LD_INT 107
7693: PUSH
7694: LD_INT 108
7696: PUSH
7697: LD_INT 109
7699: PUSH
7700: LD_INT 110
7702: PUSH
7703: LD_INT 111
7705: PUSH
7706: LD_INT 112
7708: PUSH
7709: LD_INT 114
7711: PUSH
7712: LD_INT 116
7714: PUSH
7715: LD_INT 117
7717: PUSH
7718: LD_INT 118
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: ST_TO_ADDR
7743: GO 9638
7745: LD_INT 11
7747: DOUBLE
7748: EQUAL
7749: IFTRUE 7753
7751: GO 7957
7753: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7754: LD_ADDR_VAR 0 2
7758: PUSH
7759: LD_INT 2
7761: PUSH
7762: LD_INT 3
7764: PUSH
7765: LD_INT 4
7767: PUSH
7768: LD_INT 5
7770: PUSH
7771: LD_INT 6
7773: PUSH
7774: LD_INT 7
7776: PUSH
7777: LD_INT 8
7779: PUSH
7780: LD_INT 9
7782: PUSH
7783: LD_INT 10
7785: PUSH
7786: LD_INT 11
7788: PUSH
7789: LD_INT 12
7791: PUSH
7792: LD_INT 13
7794: PUSH
7795: LD_INT 14
7797: PUSH
7798: LD_INT 15
7800: PUSH
7801: LD_INT 16
7803: PUSH
7804: LD_INT 17
7806: PUSH
7807: LD_INT 18
7809: PUSH
7810: LD_INT 19
7812: PUSH
7813: LD_INT 20
7815: PUSH
7816: LD_INT 21
7818: PUSH
7819: LD_INT 22
7821: PUSH
7822: LD_INT 23
7824: PUSH
7825: LD_INT 24
7827: PUSH
7828: LD_INT 25
7830: PUSH
7831: LD_INT 26
7833: PUSH
7834: LD_INT 28
7836: PUSH
7837: LD_INT 30
7839: PUSH
7840: LD_INT 31
7842: PUSH
7843: LD_INT 32
7845: PUSH
7846: LD_INT 34
7848: PUSH
7849: LD_INT 36
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: PUSH
7885: LD_INT 101
7887: PUSH
7888: LD_INT 102
7890: PUSH
7891: LD_INT 103
7893: PUSH
7894: LD_INT 104
7896: PUSH
7897: LD_INT 105
7899: PUSH
7900: LD_INT 106
7902: PUSH
7903: LD_INT 107
7905: PUSH
7906: LD_INT 108
7908: PUSH
7909: LD_INT 109
7911: PUSH
7912: LD_INT 110
7914: PUSH
7915: LD_INT 111
7917: PUSH
7918: LD_INT 112
7920: PUSH
7921: LD_INT 114
7923: PUSH
7924: LD_INT 116
7926: PUSH
7927: LD_INT 117
7929: PUSH
7930: LD_INT 118
7932: PUSH
7933: EMPTY
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: ST_TO_ADDR
7955: GO 9638
7957: LD_INT 12
7959: DOUBLE
7960: EQUAL
7961: IFTRUE 7965
7963: GO 8185
7965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7966: LD_ADDR_VAR 0 2
7970: PUSH
7971: LD_INT 1
7973: PUSH
7974: LD_INT 2
7976: PUSH
7977: LD_INT 3
7979: PUSH
7980: LD_INT 4
7982: PUSH
7983: LD_INT 5
7985: PUSH
7986: LD_INT 6
7988: PUSH
7989: LD_INT 7
7991: PUSH
7992: LD_INT 8
7994: PUSH
7995: LD_INT 9
7997: PUSH
7998: LD_INT 10
8000: PUSH
8001: LD_INT 11
8003: PUSH
8004: LD_INT 12
8006: PUSH
8007: LD_INT 13
8009: PUSH
8010: LD_INT 14
8012: PUSH
8013: LD_INT 15
8015: PUSH
8016: LD_INT 16
8018: PUSH
8019: LD_INT 17
8021: PUSH
8022: LD_INT 18
8024: PUSH
8025: LD_INT 19
8027: PUSH
8028: LD_INT 20
8030: PUSH
8031: LD_INT 21
8033: PUSH
8034: LD_INT 22
8036: PUSH
8037: LD_INT 23
8039: PUSH
8040: LD_INT 24
8042: PUSH
8043: LD_INT 25
8045: PUSH
8046: LD_INT 26
8048: PUSH
8049: LD_INT 27
8051: PUSH
8052: LD_INT 28
8054: PUSH
8055: LD_INT 30
8057: PUSH
8058: LD_INT 31
8060: PUSH
8061: LD_INT 32
8063: PUSH
8064: LD_INT 33
8066: PUSH
8067: LD_INT 34
8069: PUSH
8070: LD_INT 36
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 101
8111: PUSH
8112: LD_INT 102
8114: PUSH
8115: LD_INT 103
8117: PUSH
8118: LD_INT 104
8120: PUSH
8121: LD_INT 105
8123: PUSH
8124: LD_INT 106
8126: PUSH
8127: LD_INT 107
8129: PUSH
8130: LD_INT 108
8132: PUSH
8133: LD_INT 109
8135: PUSH
8136: LD_INT 110
8138: PUSH
8139: LD_INT 111
8141: PUSH
8142: LD_INT 112
8144: PUSH
8145: LD_INT 113
8147: PUSH
8148: LD_INT 114
8150: PUSH
8151: LD_INT 116
8153: PUSH
8154: LD_INT 117
8156: PUSH
8157: LD_INT 118
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: LIST
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: PUSH
8179: EMPTY
8180: LIST
8181: LIST
8182: ST_TO_ADDR
8183: GO 9638
8185: LD_INT 13
8187: DOUBLE
8188: EQUAL
8189: IFTRUE 8193
8191: GO 8401
8193: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8194: LD_ADDR_VAR 0 2
8198: PUSH
8199: LD_INT 1
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: LD_INT 3
8207: PUSH
8208: LD_INT 4
8210: PUSH
8211: LD_INT 5
8213: PUSH
8214: LD_INT 8
8216: PUSH
8217: LD_INT 9
8219: PUSH
8220: LD_INT 10
8222: PUSH
8223: LD_INT 11
8225: PUSH
8226: LD_INT 12
8228: PUSH
8229: LD_INT 14
8231: PUSH
8232: LD_INT 15
8234: PUSH
8235: LD_INT 16
8237: PUSH
8238: LD_INT 17
8240: PUSH
8241: LD_INT 18
8243: PUSH
8244: LD_INT 19
8246: PUSH
8247: LD_INT 20
8249: PUSH
8250: LD_INT 21
8252: PUSH
8253: LD_INT 22
8255: PUSH
8256: LD_INT 23
8258: PUSH
8259: LD_INT 24
8261: PUSH
8262: LD_INT 25
8264: PUSH
8265: LD_INT 26
8267: PUSH
8268: LD_INT 27
8270: PUSH
8271: LD_INT 28
8273: PUSH
8274: LD_INT 30
8276: PUSH
8277: LD_INT 31
8279: PUSH
8280: LD_INT 32
8282: PUSH
8283: LD_INT 33
8285: PUSH
8286: LD_INT 34
8288: PUSH
8289: LD_INT 36
8291: PUSH
8292: EMPTY
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 101
8327: PUSH
8328: LD_INT 102
8330: PUSH
8331: LD_INT 103
8333: PUSH
8334: LD_INT 104
8336: PUSH
8337: LD_INT 105
8339: PUSH
8340: LD_INT 106
8342: PUSH
8343: LD_INT 107
8345: PUSH
8346: LD_INT 108
8348: PUSH
8349: LD_INT 109
8351: PUSH
8352: LD_INT 110
8354: PUSH
8355: LD_INT 111
8357: PUSH
8358: LD_INT 112
8360: PUSH
8361: LD_INT 113
8363: PUSH
8364: LD_INT 114
8366: PUSH
8367: LD_INT 116
8369: PUSH
8370: LD_INT 117
8372: PUSH
8373: LD_INT 118
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: ST_TO_ADDR
8399: GO 9638
8401: LD_INT 14
8403: DOUBLE
8404: EQUAL
8405: IFTRUE 8409
8407: GO 8633
8409: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8410: LD_ADDR_VAR 0 2
8414: PUSH
8415: LD_INT 1
8417: PUSH
8418: LD_INT 2
8420: PUSH
8421: LD_INT 3
8423: PUSH
8424: LD_INT 4
8426: PUSH
8427: LD_INT 5
8429: PUSH
8430: LD_INT 6
8432: PUSH
8433: LD_INT 7
8435: PUSH
8436: LD_INT 8
8438: PUSH
8439: LD_INT 9
8441: PUSH
8442: LD_INT 10
8444: PUSH
8445: LD_INT 11
8447: PUSH
8448: LD_INT 12
8450: PUSH
8451: LD_INT 13
8453: PUSH
8454: LD_INT 14
8456: PUSH
8457: LD_INT 15
8459: PUSH
8460: LD_INT 16
8462: PUSH
8463: LD_INT 17
8465: PUSH
8466: LD_INT 18
8468: PUSH
8469: LD_INT 19
8471: PUSH
8472: LD_INT 20
8474: PUSH
8475: LD_INT 21
8477: PUSH
8478: LD_INT 22
8480: PUSH
8481: LD_INT 23
8483: PUSH
8484: LD_INT 24
8486: PUSH
8487: LD_INT 25
8489: PUSH
8490: LD_INT 26
8492: PUSH
8493: LD_INT 27
8495: PUSH
8496: LD_INT 28
8498: PUSH
8499: LD_INT 29
8501: PUSH
8502: LD_INT 30
8504: PUSH
8505: LD_INT 31
8507: PUSH
8508: LD_INT 32
8510: PUSH
8511: LD_INT 33
8513: PUSH
8514: LD_INT 34
8516: PUSH
8517: LD_INT 36
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: PUSH
8557: LD_INT 101
8559: PUSH
8560: LD_INT 102
8562: PUSH
8563: LD_INT 103
8565: PUSH
8566: LD_INT 104
8568: PUSH
8569: LD_INT 105
8571: PUSH
8572: LD_INT 106
8574: PUSH
8575: LD_INT 107
8577: PUSH
8578: LD_INT 108
8580: PUSH
8581: LD_INT 109
8583: PUSH
8584: LD_INT 110
8586: PUSH
8587: LD_INT 111
8589: PUSH
8590: LD_INT 112
8592: PUSH
8593: LD_INT 113
8595: PUSH
8596: LD_INT 114
8598: PUSH
8599: LD_INT 116
8601: PUSH
8602: LD_INT 117
8604: PUSH
8605: LD_INT 118
8607: PUSH
8608: EMPTY
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: LIST
8623: LIST
8624: LIST
8625: LIST
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: ST_TO_ADDR
8631: GO 9638
8633: LD_INT 15
8635: DOUBLE
8636: EQUAL
8637: IFTRUE 8641
8639: GO 8865
8641: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8642: LD_ADDR_VAR 0 2
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 3
8655: PUSH
8656: LD_INT 4
8658: PUSH
8659: LD_INT 5
8661: PUSH
8662: LD_INT 6
8664: PUSH
8665: LD_INT 7
8667: PUSH
8668: LD_INT 8
8670: PUSH
8671: LD_INT 9
8673: PUSH
8674: LD_INT 10
8676: PUSH
8677: LD_INT 11
8679: PUSH
8680: LD_INT 12
8682: PUSH
8683: LD_INT 13
8685: PUSH
8686: LD_INT 14
8688: PUSH
8689: LD_INT 15
8691: PUSH
8692: LD_INT 16
8694: PUSH
8695: LD_INT 17
8697: PUSH
8698: LD_INT 18
8700: PUSH
8701: LD_INT 19
8703: PUSH
8704: LD_INT 20
8706: PUSH
8707: LD_INT 21
8709: PUSH
8710: LD_INT 22
8712: PUSH
8713: LD_INT 23
8715: PUSH
8716: LD_INT 24
8718: PUSH
8719: LD_INT 25
8721: PUSH
8722: LD_INT 26
8724: PUSH
8725: LD_INT 27
8727: PUSH
8728: LD_INT 28
8730: PUSH
8731: LD_INT 29
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_INT 31
8739: PUSH
8740: LD_INT 32
8742: PUSH
8743: LD_INT 33
8745: PUSH
8746: LD_INT 34
8748: PUSH
8749: LD_INT 36
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 101
8791: PUSH
8792: LD_INT 102
8794: PUSH
8795: LD_INT 103
8797: PUSH
8798: LD_INT 104
8800: PUSH
8801: LD_INT 105
8803: PUSH
8804: LD_INT 106
8806: PUSH
8807: LD_INT 107
8809: PUSH
8810: LD_INT 108
8812: PUSH
8813: LD_INT 109
8815: PUSH
8816: LD_INT 110
8818: PUSH
8819: LD_INT 111
8821: PUSH
8822: LD_INT 112
8824: PUSH
8825: LD_INT 113
8827: PUSH
8828: LD_INT 114
8830: PUSH
8831: LD_INT 116
8833: PUSH
8834: LD_INT 117
8836: PUSH
8837: LD_INT 118
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: ST_TO_ADDR
8863: GO 9638
8865: LD_INT 16
8867: DOUBLE
8868: EQUAL
8869: IFTRUE 8873
8871: GO 9009
8873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8874: LD_ADDR_VAR 0 2
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: LD_INT 4
8884: PUSH
8885: LD_INT 5
8887: PUSH
8888: LD_INT 7
8890: PUSH
8891: LD_INT 11
8893: PUSH
8894: LD_INT 12
8896: PUSH
8897: LD_INT 15
8899: PUSH
8900: LD_INT 16
8902: PUSH
8903: LD_INT 20
8905: PUSH
8906: LD_INT 21
8908: PUSH
8909: LD_INT 22
8911: PUSH
8912: LD_INT 23
8914: PUSH
8915: LD_INT 25
8917: PUSH
8918: LD_INT 26
8920: PUSH
8921: LD_INT 30
8923: PUSH
8924: LD_INT 31
8926: PUSH
8927: LD_INT 32
8929: PUSH
8930: LD_INT 33
8932: PUSH
8933: LD_INT 34
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 101
8959: PUSH
8960: LD_INT 102
8962: PUSH
8963: LD_INT 103
8965: PUSH
8966: LD_INT 106
8968: PUSH
8969: LD_INT 108
8971: PUSH
8972: LD_INT 112
8974: PUSH
8975: LD_INT 113
8977: PUSH
8978: LD_INT 114
8980: PUSH
8981: LD_INT 116
8983: PUSH
8984: LD_INT 117
8986: PUSH
8987: LD_INT 118
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: PUSH
9003: EMPTY
9004: LIST
9005: LIST
9006: ST_TO_ADDR
9007: GO 9638
9009: LD_INT 17
9011: DOUBLE
9012: EQUAL
9013: IFTRUE 9017
9015: GO 9241
9017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
9018: LD_ADDR_VAR 0 2
9022: PUSH
9023: LD_INT 1
9025: PUSH
9026: LD_INT 2
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: LD_INT 4
9034: PUSH
9035: LD_INT 5
9037: PUSH
9038: LD_INT 6
9040: PUSH
9041: LD_INT 7
9043: PUSH
9044: LD_INT 8
9046: PUSH
9047: LD_INT 9
9049: PUSH
9050: LD_INT 10
9052: PUSH
9053: LD_INT 11
9055: PUSH
9056: LD_INT 12
9058: PUSH
9059: LD_INT 13
9061: PUSH
9062: LD_INT 14
9064: PUSH
9065: LD_INT 15
9067: PUSH
9068: LD_INT 16
9070: PUSH
9071: LD_INT 17
9073: PUSH
9074: LD_INT 18
9076: PUSH
9077: LD_INT 19
9079: PUSH
9080: LD_INT 20
9082: PUSH
9083: LD_INT 21
9085: PUSH
9086: LD_INT 22
9088: PUSH
9089: LD_INT 23
9091: PUSH
9092: LD_INT 24
9094: PUSH
9095: LD_INT 25
9097: PUSH
9098: LD_INT 26
9100: PUSH
9101: LD_INT 27
9103: PUSH
9104: LD_INT 28
9106: PUSH
9107: LD_INT 29
9109: PUSH
9110: LD_INT 30
9112: PUSH
9113: LD_INT 31
9115: PUSH
9116: LD_INT 32
9118: PUSH
9119: LD_INT 33
9121: PUSH
9122: LD_INT 34
9124: PUSH
9125: LD_INT 36
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 101
9167: PUSH
9168: LD_INT 102
9170: PUSH
9171: LD_INT 103
9173: PUSH
9174: LD_INT 104
9176: PUSH
9177: LD_INT 105
9179: PUSH
9180: LD_INT 106
9182: PUSH
9183: LD_INT 107
9185: PUSH
9186: LD_INT 108
9188: PUSH
9189: LD_INT 109
9191: PUSH
9192: LD_INT 110
9194: PUSH
9195: LD_INT 111
9197: PUSH
9198: LD_INT 112
9200: PUSH
9201: LD_INT 113
9203: PUSH
9204: LD_INT 114
9206: PUSH
9207: LD_INT 116
9209: PUSH
9210: LD_INT 117
9212: PUSH
9213: LD_INT 118
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: PUSH
9235: EMPTY
9236: LIST
9237: LIST
9238: ST_TO_ADDR
9239: GO 9638
9241: LD_INT 18
9243: DOUBLE
9244: EQUAL
9245: IFTRUE 9249
9247: GO 9397
9249: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9250: LD_ADDR_VAR 0 2
9254: PUSH
9255: LD_INT 2
9257: PUSH
9258: LD_INT 4
9260: PUSH
9261: LD_INT 5
9263: PUSH
9264: LD_INT 7
9266: PUSH
9267: LD_INT 11
9269: PUSH
9270: LD_INT 12
9272: PUSH
9273: LD_INT 15
9275: PUSH
9276: LD_INT 16
9278: PUSH
9279: LD_INT 20
9281: PUSH
9282: LD_INT 21
9284: PUSH
9285: LD_INT 22
9287: PUSH
9288: LD_INT 23
9290: PUSH
9291: LD_INT 25
9293: PUSH
9294: LD_INT 26
9296: PUSH
9297: LD_INT 30
9299: PUSH
9300: LD_INT 31
9302: PUSH
9303: LD_INT 32
9305: PUSH
9306: LD_INT 33
9308: PUSH
9309: LD_INT 34
9311: PUSH
9312: LD_INT 35
9314: PUSH
9315: LD_INT 36
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 101
9343: PUSH
9344: LD_INT 102
9346: PUSH
9347: LD_INT 103
9349: PUSH
9350: LD_INT 106
9352: PUSH
9353: LD_INT 108
9355: PUSH
9356: LD_INT 112
9358: PUSH
9359: LD_INT 113
9361: PUSH
9362: LD_INT 114
9364: PUSH
9365: LD_INT 115
9367: PUSH
9368: LD_INT 116
9370: PUSH
9371: LD_INT 117
9373: PUSH
9374: LD_INT 118
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: ST_TO_ADDR
9395: GO 9638
9397: LD_INT 19
9399: DOUBLE
9400: EQUAL
9401: IFTRUE 9405
9403: GO 9637
9405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 1
9413: PUSH
9414: LD_INT 2
9416: PUSH
9417: LD_INT 3
9419: PUSH
9420: LD_INT 4
9422: PUSH
9423: LD_INT 5
9425: PUSH
9426: LD_INT 6
9428: PUSH
9429: LD_INT 7
9431: PUSH
9432: LD_INT 8
9434: PUSH
9435: LD_INT 9
9437: PUSH
9438: LD_INT 10
9440: PUSH
9441: LD_INT 11
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: LD_INT 13
9449: PUSH
9450: LD_INT 14
9452: PUSH
9453: LD_INT 15
9455: PUSH
9456: LD_INT 16
9458: PUSH
9459: LD_INT 17
9461: PUSH
9462: LD_INT 18
9464: PUSH
9465: LD_INT 19
9467: PUSH
9468: LD_INT 20
9470: PUSH
9471: LD_INT 21
9473: PUSH
9474: LD_INT 22
9476: PUSH
9477: LD_INT 23
9479: PUSH
9480: LD_INT 24
9482: PUSH
9483: LD_INT 25
9485: PUSH
9486: LD_INT 26
9488: PUSH
9489: LD_INT 27
9491: PUSH
9492: LD_INT 28
9494: PUSH
9495: LD_INT 29
9497: PUSH
9498: LD_INT 30
9500: PUSH
9501: LD_INT 31
9503: PUSH
9504: LD_INT 32
9506: PUSH
9507: LD_INT 33
9509: PUSH
9510: LD_INT 34
9512: PUSH
9513: LD_INT 35
9515: PUSH
9516: LD_INT 36
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 101
9559: PUSH
9560: LD_INT 102
9562: PUSH
9563: LD_INT 103
9565: PUSH
9566: LD_INT 104
9568: PUSH
9569: LD_INT 105
9571: PUSH
9572: LD_INT 106
9574: PUSH
9575: LD_INT 107
9577: PUSH
9578: LD_INT 108
9580: PUSH
9581: LD_INT 109
9583: PUSH
9584: LD_INT 110
9586: PUSH
9587: LD_INT 111
9589: PUSH
9590: LD_INT 112
9592: PUSH
9593: LD_INT 113
9595: PUSH
9596: LD_INT 114
9598: PUSH
9599: LD_INT 115
9601: PUSH
9602: LD_INT 116
9604: PUSH
9605: LD_INT 117
9607: PUSH
9608: LD_INT 118
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: ST_TO_ADDR
9635: GO 9638
9637: POP
// end else
9638: GO 9869
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9640: LD_ADDR_VAR 0 2
9644: PUSH
9645: LD_INT 1
9647: PUSH
9648: LD_INT 2
9650: PUSH
9651: LD_INT 3
9653: PUSH
9654: LD_INT 4
9656: PUSH
9657: LD_INT 5
9659: PUSH
9660: LD_INT 6
9662: PUSH
9663: LD_INT 7
9665: PUSH
9666: LD_INT 8
9668: PUSH
9669: LD_INT 9
9671: PUSH
9672: LD_INT 10
9674: PUSH
9675: LD_INT 11
9677: PUSH
9678: LD_INT 12
9680: PUSH
9681: LD_INT 13
9683: PUSH
9684: LD_INT 14
9686: PUSH
9687: LD_INT 15
9689: PUSH
9690: LD_INT 16
9692: PUSH
9693: LD_INT 17
9695: PUSH
9696: LD_INT 18
9698: PUSH
9699: LD_INT 19
9701: PUSH
9702: LD_INT 20
9704: PUSH
9705: LD_INT 21
9707: PUSH
9708: LD_INT 22
9710: PUSH
9711: LD_INT 23
9713: PUSH
9714: LD_INT 24
9716: PUSH
9717: LD_INT 25
9719: PUSH
9720: LD_INT 26
9722: PUSH
9723: LD_INT 27
9725: PUSH
9726: LD_INT 28
9728: PUSH
9729: LD_INT 29
9731: PUSH
9732: LD_INT 30
9734: PUSH
9735: LD_INT 31
9737: PUSH
9738: LD_INT 32
9740: PUSH
9741: LD_INT 33
9743: PUSH
9744: LD_INT 34
9746: PUSH
9747: LD_INT 35
9749: PUSH
9750: LD_INT 36
9752: PUSH
9753: EMPTY
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 101
9793: PUSH
9794: LD_INT 102
9796: PUSH
9797: LD_INT 103
9799: PUSH
9800: LD_INT 104
9802: PUSH
9803: LD_INT 105
9805: PUSH
9806: LD_INT 106
9808: PUSH
9809: LD_INT 107
9811: PUSH
9812: LD_INT 108
9814: PUSH
9815: LD_INT 109
9817: PUSH
9818: LD_INT 110
9820: PUSH
9821: LD_INT 111
9823: PUSH
9824: LD_INT 112
9826: PUSH
9827: LD_INT 113
9829: PUSH
9830: LD_INT 114
9832: PUSH
9833: LD_INT 115
9835: PUSH
9836: LD_INT 116
9838: PUSH
9839: LD_INT 117
9841: PUSH
9842: LD_INT 118
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: ST_TO_ADDR
// if result then
9869: LD_VAR 0 2
9873: IFFALSE 10659
// begin normal :=  ;
9875: LD_ADDR_VAR 0 5
9879: PUSH
9880: LD_STRING 
9882: ST_TO_ADDR
// hardcore :=  ;
9883: LD_ADDR_VAR 0 6
9887: PUSH
9888: LD_STRING 
9890: ST_TO_ADDR
// active :=  ;
9891: LD_ADDR_VAR 0 7
9895: PUSH
9896: LD_STRING 
9898: ST_TO_ADDR
// for i = 1 to normalCounter do
9899: LD_ADDR_VAR 0 8
9903: PUSH
9904: DOUBLE
9905: LD_INT 1
9907: DEC
9908: ST_TO_ADDR
9909: LD_EXP 25
9913: PUSH
9914: FOR_TO
9915: IFFALSE 10016
// begin tmp := 0 ;
9917: LD_ADDR_VAR 0 3
9921: PUSH
9922: LD_STRING 0
9924: ST_TO_ADDR
// if result [ 1 ] then
9925: LD_VAR 0 2
9929: PUSH
9930: LD_INT 1
9932: ARRAY
9933: IFFALSE 9998
// if result [ 1 ] [ 1 ] = i then
9935: LD_VAR 0 2
9939: PUSH
9940: LD_INT 1
9942: ARRAY
9943: PUSH
9944: LD_INT 1
9946: ARRAY
9947: PUSH
9948: LD_VAR 0 8
9952: EQUAL
9953: IFFALSE 9998
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_VAR 0 2
9964: PPUSH
9965: LD_INT 1
9967: PPUSH
9968: LD_VAR 0 2
9972: PUSH
9973: LD_INT 1
9975: ARRAY
9976: PPUSH
9977: LD_INT 1
9979: PPUSH
9980: CALL_OW 3
9984: PPUSH
9985: CALL_OW 1
9989: ST_TO_ADDR
// tmp := 1 ;
9990: LD_ADDR_VAR 0 3
9994: PUSH
9995: LD_STRING 1
9997: ST_TO_ADDR
// end ; normal := normal & tmp ;
9998: LD_ADDR_VAR 0 5
10002: PUSH
10003: LD_VAR 0 5
10007: PUSH
10008: LD_VAR 0 3
10012: STR
10013: ST_TO_ADDR
// end ;
10014: GO 9914
10016: POP
10017: POP
// for i = 1 to hardcoreCounter do
10018: LD_ADDR_VAR 0 8
10022: PUSH
10023: DOUBLE
10024: LD_INT 1
10026: DEC
10027: ST_TO_ADDR
10028: LD_EXP 26
10032: PUSH
10033: FOR_TO
10034: IFFALSE 10139
// begin tmp := 0 ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_STRING 0
10043: ST_TO_ADDR
// if result [ 2 ] then
10044: LD_VAR 0 2
10048: PUSH
10049: LD_INT 2
10051: ARRAY
10052: IFFALSE 10121
// if result [ 2 ] [ 1 ] = 100 + i then
10054: LD_VAR 0 2
10058: PUSH
10059: LD_INT 2
10061: ARRAY
10062: PUSH
10063: LD_INT 1
10065: ARRAY
10066: PUSH
10067: LD_INT 100
10069: PUSH
10070: LD_VAR 0 8
10074: PLUS
10075: EQUAL
10076: IFFALSE 10121
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10078: LD_ADDR_VAR 0 2
10082: PUSH
10083: LD_VAR 0 2
10087: PPUSH
10088: LD_INT 2
10090: PPUSH
10091: LD_VAR 0 2
10095: PUSH
10096: LD_INT 2
10098: ARRAY
10099: PPUSH
10100: LD_INT 1
10102: PPUSH
10103: CALL_OW 3
10107: PPUSH
10108: CALL_OW 1
10112: ST_TO_ADDR
// tmp := 1 ;
10113: LD_ADDR_VAR 0 3
10117: PUSH
10118: LD_STRING 1
10120: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10121: LD_ADDR_VAR 0 6
10125: PUSH
10126: LD_VAR 0 6
10130: PUSH
10131: LD_VAR 0 3
10135: STR
10136: ST_TO_ADDR
// end ;
10137: GO 10033
10139: POP
10140: POP
// if isGameLoad then
10141: LD_VAR 0 1
10145: IFFALSE 10620
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10147: LD_ADDR_VAR 0 4
10151: PUSH
10152: LD_EXP 29
10156: PUSH
10157: LD_EXP 28
10161: PUSH
10162: LD_EXP 30
10166: PUSH
10167: LD_EXP 27
10171: PUSH
10172: LD_EXP 31
10176: PUSH
10177: LD_EXP 32
10181: PUSH
10182: LD_EXP 33
10186: PUSH
10187: LD_EXP 34
10191: PUSH
10192: LD_EXP 35
10196: PUSH
10197: LD_EXP 36
10201: PUSH
10202: LD_EXP 37
10206: PUSH
10207: LD_EXP 38
10211: PUSH
10212: LD_EXP 39
10216: PUSH
10217: LD_EXP 40
10221: PUSH
10222: LD_EXP 48
10226: PUSH
10227: LD_EXP 49
10231: PUSH
10232: LD_EXP 50
10236: PUSH
10237: LD_EXP 51
10241: PUSH
10242: LD_EXP 53
10246: PUSH
10247: LD_EXP 54
10251: PUSH
10252: LD_EXP 55
10256: PUSH
10257: LD_EXP 58
10261: PUSH
10262: LD_EXP 60
10266: PUSH
10267: LD_EXP 61
10271: PUSH
10272: LD_EXP 62
10276: PUSH
10277: LD_EXP 64
10281: PUSH
10282: LD_EXP 65
10286: PUSH
10287: LD_EXP 68
10291: PUSH
10292: LD_EXP 69
10296: PUSH
10297: LD_EXP 70
10301: PUSH
10302: LD_EXP 71
10306: PUSH
10307: LD_EXP 72
10311: PUSH
10312: LD_EXP 73
10316: PUSH
10317: LD_EXP 74
10321: PUSH
10322: LD_EXP 75
10326: PUSH
10327: LD_EXP 76
10331: PUSH
10332: LD_EXP 41
10336: PUSH
10337: LD_EXP 42
10341: PUSH
10342: LD_EXP 45
10346: PUSH
10347: LD_EXP 46
10351: PUSH
10352: LD_EXP 47
10356: PUSH
10357: LD_EXP 43
10361: PUSH
10362: LD_EXP 44
10366: PUSH
10367: LD_EXP 52
10371: PUSH
10372: LD_EXP 56
10376: PUSH
10377: LD_EXP 57
10381: PUSH
10382: LD_EXP 59
10386: PUSH
10387: LD_EXP 63
10391: PUSH
10392: LD_EXP 66
10396: PUSH
10397: LD_EXP 67
10401: PUSH
10402: LD_EXP 77
10406: PUSH
10407: LD_EXP 78
10411: PUSH
10412: LD_EXP 79
10416: PUSH
10417: LD_EXP 80
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: ST_TO_ADDR
// tmp :=  ;
10478: LD_ADDR_VAR 0 3
10482: PUSH
10483: LD_STRING 
10485: ST_TO_ADDR
// for i = 1 to normalCounter do
10486: LD_ADDR_VAR 0 8
10490: PUSH
10491: DOUBLE
10492: LD_INT 1
10494: DEC
10495: ST_TO_ADDR
10496: LD_EXP 25
10500: PUSH
10501: FOR_TO
10502: IFFALSE 10538
// begin if flags [ i ] then
10504: LD_VAR 0 4
10508: PUSH
10509: LD_VAR 0 8
10513: ARRAY
10514: IFFALSE 10536
// tmp := tmp & i & ; ;
10516: LD_ADDR_VAR 0 3
10520: PUSH
10521: LD_VAR 0 3
10525: PUSH
10526: LD_VAR 0 8
10530: STR
10531: PUSH
10532: LD_STRING ;
10534: STR
10535: ST_TO_ADDR
// end ;
10536: GO 10501
10538: POP
10539: POP
// for i = 1 to hardcoreCounter do
10540: LD_ADDR_VAR 0 8
10544: PUSH
10545: DOUBLE
10546: LD_INT 1
10548: DEC
10549: ST_TO_ADDR
10550: LD_EXP 26
10554: PUSH
10555: FOR_TO
10556: IFFALSE 10602
// begin if flags [ normalCounter + i ] then
10558: LD_VAR 0 4
10562: PUSH
10563: LD_EXP 25
10567: PUSH
10568: LD_VAR 0 8
10572: PLUS
10573: ARRAY
10574: IFFALSE 10600
// tmp := tmp & ( 100 + i ) & ; ;
10576: LD_ADDR_VAR 0 3
10580: PUSH
10581: LD_VAR 0 3
10585: PUSH
10586: LD_INT 100
10588: PUSH
10589: LD_VAR 0 8
10593: PLUS
10594: STR
10595: PUSH
10596: LD_STRING ;
10598: STR
10599: ST_TO_ADDR
// end ;
10600: GO 10555
10602: POP
10603: POP
// if tmp then
10604: LD_VAR 0 3
10608: IFFALSE 10620
// active := tmp ;
10610: LD_ADDR_VAR 0 7
10614: PUSH
10615: LD_VAR 0 3
10619: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10620: LD_STRING getStreamItemsFromMission("
10622: PUSH
10623: LD_VAR 0 5
10627: STR
10628: PUSH
10629: LD_STRING ","
10631: STR
10632: PUSH
10633: LD_VAR 0 6
10637: STR
10638: PUSH
10639: LD_STRING ","
10641: STR
10642: PUSH
10643: LD_VAR 0 7
10647: STR
10648: PUSH
10649: LD_STRING ")
10651: STR
10652: PPUSH
10653: CALL_OW 559
// end else
10657: GO 10666
// ToLua ( getStreamItemsFromMission("","","") ) ;
10659: LD_STRING getStreamItemsFromMission("","","")
10661: PPUSH
10662: CALL_OW 559
// end ;
10666: LD_VAR 0 2
10670: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10671: LD_EXP 24
10675: IFFALSE 10683
10677: PUSH
10678: LD_EXP 29
10682: AND
10683: IFFALSE 10807
10685: GO 10687
10687: DISABLE
10688: LD_INT 0
10690: PPUSH
10691: PPUSH
// begin enable ;
10692: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10693: LD_ADDR_VAR 0 2
10697: PUSH
10698: LD_INT 22
10700: PUSH
10701: LD_OWVAR 2
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: LD_INT 34
10715: PUSH
10716: LD_INT 7
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 34
10725: PUSH
10726: LD_INT 45
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 34
10735: PUSH
10736: LD_INT 28
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 34
10745: PUSH
10746: LD_INT 47
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: PPUSH
10764: CALL_OW 69
10768: ST_TO_ADDR
// if not tmp then
10769: LD_VAR 0 2
10773: NOT
10774: IFFALSE 10778
// exit ;
10776: GO 10807
// for i in tmp do
10778: LD_ADDR_VAR 0 1
10782: PUSH
10783: LD_VAR 0 2
10787: PUSH
10788: FOR_IN
10789: IFFALSE 10805
// begin SetLives ( i , 0 ) ;
10791: LD_VAR 0 1
10795: PPUSH
10796: LD_INT 0
10798: PPUSH
10799: CALL_OW 234
// end ;
10803: GO 10788
10805: POP
10806: POP
// end ;
10807: PPOPN 2
10809: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10810: LD_EXP 24
10814: IFFALSE 10822
10816: PUSH
10817: LD_EXP 30
10821: AND
10822: IFFALSE 10906
10824: GO 10826
10826: DISABLE
10827: LD_INT 0
10829: PPUSH
10830: PPUSH
// begin enable ;
10831: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10832: LD_ADDR_VAR 0 2
10836: PUSH
10837: LD_INT 22
10839: PUSH
10840: LD_OWVAR 2
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 32
10851: PUSH
10852: LD_INT 3
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: PPUSH
10863: CALL_OW 69
10867: ST_TO_ADDR
// if not tmp then
10868: LD_VAR 0 2
10872: NOT
10873: IFFALSE 10877
// exit ;
10875: GO 10906
// for i in tmp do
10877: LD_ADDR_VAR 0 1
10881: PUSH
10882: LD_VAR 0 2
10886: PUSH
10887: FOR_IN
10888: IFFALSE 10904
// begin SetLives ( i , 0 ) ;
10890: LD_VAR 0 1
10894: PPUSH
10895: LD_INT 0
10897: PPUSH
10898: CALL_OW 234
// end ;
10902: GO 10887
10904: POP
10905: POP
// end ;
10906: PPOPN 2
10908: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10909: LD_EXP 24
10913: IFFALSE 10921
10915: PUSH
10916: LD_EXP 27
10920: AND
10921: IFFALSE 11014
10923: GO 10925
10925: DISABLE
10926: LD_INT 0
10928: PPUSH
// begin enable ;
10929: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10930: LD_ADDR_VAR 0 1
10934: PUSH
10935: LD_INT 22
10937: PUSH
10938: LD_OWVAR 2
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: LD_INT 2
10949: PUSH
10950: LD_INT 25
10952: PUSH
10953: LD_INT 5
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: PUSH
10960: LD_INT 25
10962: PUSH
10963: LD_INT 9
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 25
10972: PUSH
10973: LD_INT 8
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PPUSH
10990: CALL_OW 69
10994: PUSH
10995: FOR_IN
10996: IFFALSE 11012
// begin SetClass ( i , 1 ) ;
10998: LD_VAR 0 1
11002: PPUSH
11003: LD_INT 1
11005: PPUSH
11006: CALL_OW 336
// end ;
11010: GO 10995
11012: POP
11013: POP
// end ;
11014: PPOPN 1
11016: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
11017: LD_EXP 24
11021: IFFALSE 11029
11023: PUSH
11024: LD_EXP 28
11028: AND
11029: IFFALSE 11041
11031: PUSH
11032: LD_OWVAR 65
11036: PUSH
11037: LD_INT 7
11039: LESS
11040: AND
11041: IFFALSE 11055
11043: GO 11045
11045: DISABLE
// begin enable ;
11046: ENABLE
// game_speed := 7 ;
11047: LD_ADDR_OWVAR 65
11051: PUSH
11052: LD_INT 7
11054: ST_TO_ADDR
// end ;
11055: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
11056: LD_EXP 24
11060: IFFALSE 11068
11062: PUSH
11063: LD_EXP 31
11067: AND
11068: IFFALSE 11270
11070: GO 11072
11072: DISABLE
11073: LD_INT 0
11075: PPUSH
11076: PPUSH
11077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11078: LD_ADDR_VAR 0 3
11082: PUSH
11083: LD_INT 81
11085: PUSH
11086: LD_OWVAR 2
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 21
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PPUSH
11109: CALL_OW 69
11113: ST_TO_ADDR
// if not tmp then
11114: LD_VAR 0 3
11118: NOT
11119: IFFALSE 11123
// exit ;
11121: GO 11270
// if tmp > 5 then
11123: LD_VAR 0 3
11127: PUSH
11128: LD_INT 5
11130: GREATER
11131: IFFALSE 11143
// k := 5 else
11133: LD_ADDR_VAR 0 2
11137: PUSH
11138: LD_INT 5
11140: ST_TO_ADDR
11141: GO 11153
// k := tmp ;
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: LD_VAR 0 3
11152: ST_TO_ADDR
// for i := 1 to k do
11153: LD_ADDR_VAR 0 1
11157: PUSH
11158: DOUBLE
11159: LD_INT 1
11161: DEC
11162: ST_TO_ADDR
11163: LD_VAR 0 2
11167: PUSH
11168: FOR_TO
11169: IFFALSE 11268
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11171: LD_VAR 0 3
11175: PUSH
11176: LD_VAR 0 1
11180: ARRAY
11181: PPUSH
11182: LD_VAR 0 1
11186: PUSH
11187: LD_INT 4
11189: MOD
11190: PUSH
11191: LD_INT 1
11193: PLUS
11194: PPUSH
11195: CALL_OW 259
11199: PUSH
11200: LD_INT 10
11202: LESS
11203: IFFALSE 11266
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11205: LD_VAR 0 3
11209: PUSH
11210: LD_VAR 0 1
11214: ARRAY
11215: PPUSH
11216: LD_VAR 0 1
11220: PUSH
11221: LD_INT 4
11223: MOD
11224: PUSH
11225: LD_INT 1
11227: PLUS
11228: PPUSH
11229: LD_VAR 0 3
11233: PUSH
11234: LD_VAR 0 1
11238: ARRAY
11239: PPUSH
11240: LD_VAR 0 1
11244: PUSH
11245: LD_INT 4
11247: MOD
11248: PUSH
11249: LD_INT 1
11251: PLUS
11252: PPUSH
11253: CALL_OW 259
11257: PUSH
11258: LD_INT 1
11260: PLUS
11261: PPUSH
11262: CALL_OW 237
11266: GO 11168
11268: POP
11269: POP
// end ;
11270: PPOPN 3
11272: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11273: LD_EXP 24
11277: IFFALSE 11285
11279: PUSH
11280: LD_EXP 32
11284: AND
11285: IFFALSE 11305
11287: GO 11289
11289: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11290: LD_INT 4
11292: PPUSH
11293: LD_OWVAR 2
11297: PPUSH
11298: LD_INT 0
11300: PPUSH
11301: CALL_OW 324
11305: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11306: LD_EXP 24
11310: IFFALSE 11318
11312: PUSH
11313: LD_EXP 61
11317: AND
11318: IFFALSE 11338
11320: GO 11322
11322: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11323: LD_INT 19
11325: PPUSH
11326: LD_OWVAR 2
11330: PPUSH
11331: LD_INT 0
11333: PPUSH
11334: CALL_OW 324
11338: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11339: LD_EXP 24
11343: IFFALSE 11351
11345: PUSH
11346: LD_EXP 33
11350: AND
11351: IFFALSE 11453
11353: GO 11355
11355: DISABLE
11356: LD_INT 0
11358: PPUSH
11359: PPUSH
// begin enable ;
11360: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11361: LD_ADDR_VAR 0 2
11365: PUSH
11366: LD_INT 22
11368: PUSH
11369: LD_OWVAR 2
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 2
11380: PUSH
11381: LD_INT 34
11383: PUSH
11384: LD_INT 11
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 34
11393: PUSH
11394: LD_INT 30
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PPUSH
11410: CALL_OW 69
11414: ST_TO_ADDR
// if not tmp then
11415: LD_VAR 0 2
11419: NOT
11420: IFFALSE 11424
// exit ;
11422: GO 11453
// for i in tmp do
11424: LD_ADDR_VAR 0 1
11428: PUSH
11429: LD_VAR 0 2
11433: PUSH
11434: FOR_IN
11435: IFFALSE 11451
// begin SetLives ( i , 0 ) ;
11437: LD_VAR 0 1
11441: PPUSH
11442: LD_INT 0
11444: PPUSH
11445: CALL_OW 234
// end ;
11449: GO 11434
11451: POP
11452: POP
// end ;
11453: PPOPN 2
11455: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11456: LD_EXP 24
11460: IFFALSE 11468
11462: PUSH
11463: LD_EXP 34
11467: AND
11468: IFFALSE 11488
11470: GO 11472
11472: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11473: LD_INT 32
11475: PPUSH
11476: LD_OWVAR 2
11480: PPUSH
11481: LD_INT 0
11483: PPUSH
11484: CALL_OW 324
11488: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11489: LD_EXP 24
11493: IFFALSE 11501
11495: PUSH
11496: LD_EXP 35
11500: AND
11501: IFFALSE 11684
11503: GO 11505
11505: DISABLE
11506: LD_INT 0
11508: PPUSH
11509: PPUSH
11510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11511: LD_ADDR_VAR 0 2
11515: PUSH
11516: LD_INT 22
11518: PUSH
11519: LD_OWVAR 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 33
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PPUSH
11542: CALL_OW 69
11546: ST_TO_ADDR
// if not tmp then
11547: LD_VAR 0 2
11551: NOT
11552: IFFALSE 11556
// exit ;
11554: GO 11684
// side := 0 ;
11556: LD_ADDR_VAR 0 3
11560: PUSH
11561: LD_INT 0
11563: ST_TO_ADDR
// for i := 1 to 8 do
11564: LD_ADDR_VAR 0 1
11568: PUSH
11569: DOUBLE
11570: LD_INT 1
11572: DEC
11573: ST_TO_ADDR
11574: LD_INT 8
11576: PUSH
11577: FOR_TO
11578: IFFALSE 11628
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11580: LD_OWVAR 2
11584: PUSH
11585: LD_VAR 0 1
11589: NONEQUAL
11590: IFFALSE 11612
11592: PUSH
11593: LD_OWVAR 2
11597: PPUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: CALL_OW 81
11607: PUSH
11608: LD_INT 2
11610: EQUAL
11611: AND
11612: IFFALSE 11626
// begin side := i ;
11614: LD_ADDR_VAR 0 3
11618: PUSH
11619: LD_VAR 0 1
11623: ST_TO_ADDR
// break ;
11624: GO 11628
// end ;
11626: GO 11577
11628: POP
11629: POP
// if not side then
11630: LD_VAR 0 3
11634: NOT
11635: IFFALSE 11639
// exit ;
11637: GO 11684
// for i := 1 to tmp do
11639: LD_ADDR_VAR 0 1
11643: PUSH
11644: DOUBLE
11645: LD_INT 1
11647: DEC
11648: ST_TO_ADDR
11649: LD_VAR 0 2
11653: PUSH
11654: FOR_TO
11655: IFFALSE 11682
// if Prob ( 60 ) then
11657: LD_INT 60
11659: PPUSH
11660: CALL_OW 13
11664: IFFALSE 11680
// SetSide ( i , side ) ;
11666: LD_VAR 0 1
11670: PPUSH
11671: LD_VAR 0 3
11675: PPUSH
11676: CALL_OW 235
11680: GO 11654
11682: POP
11683: POP
// end ;
11684: PPOPN 3
11686: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11687: LD_EXP 24
11691: IFFALSE 11699
11693: PUSH
11694: LD_EXP 37
11698: AND
11699: IFFALSE 11818
11701: GO 11703
11703: DISABLE
11704: LD_INT 0
11706: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11707: LD_ADDR_VAR 0 1
11711: PUSH
11712: LD_INT 22
11714: PUSH
11715: LD_OWVAR 2
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: PUSH
11724: LD_INT 21
11726: PUSH
11727: LD_INT 1
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 3
11736: PUSH
11737: LD_INT 23
11739: PUSH
11740: LD_INT 0
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: LIST
11755: PPUSH
11756: CALL_OW 69
11760: PUSH
11761: FOR_IN
11762: IFFALSE 11816
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 257
11773: PUSH
11774: LD_INT 1
11776: PUSH
11777: LD_INT 2
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: LD_INT 4
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: IN
11792: IFFALSE 11814
// SetClass ( un , rand ( 1 , 4 ) ) ;
11794: LD_VAR 0 1
11798: PPUSH
11799: LD_INT 1
11801: PPUSH
11802: LD_INT 4
11804: PPUSH
11805: CALL_OW 12
11809: PPUSH
11810: CALL_OW 336
11814: GO 11761
11816: POP
11817: POP
// end ;
11818: PPOPN 1
11820: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11821: LD_EXP 24
11825: IFFALSE 11833
11827: PUSH
11828: LD_EXP 36
11832: AND
11833: IFFALSE 11912
11835: GO 11837
11837: DISABLE
11838: LD_INT 0
11840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: LD_INT 22
11848: PUSH
11849: LD_OWVAR 2
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: LD_INT 21
11860: PUSH
11861: LD_INT 3
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PPUSH
11872: CALL_OW 69
11876: ST_TO_ADDR
// if not tmp then
11877: LD_VAR 0 1
11881: NOT
11882: IFFALSE 11886
// exit ;
11884: GO 11912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11886: LD_VAR 0 1
11890: PUSH
11891: LD_INT 1
11893: PPUSH
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 12
11903: ARRAY
11904: PPUSH
11905: LD_INT 100
11907: PPUSH
11908: CALL_OW 234
// end ;
11912: PPOPN 1
11914: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11915: LD_EXP 24
11919: IFFALSE 11927
11921: PUSH
11922: LD_EXP 38
11926: AND
11927: IFFALSE 12025
11929: GO 11931
11931: DISABLE
11932: LD_INT 0
11934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11935: LD_ADDR_VAR 0 1
11939: PUSH
11940: LD_INT 22
11942: PUSH
11943: LD_OWVAR 2
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 21
11954: PUSH
11955: LD_INT 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PPUSH
11966: CALL_OW 69
11970: ST_TO_ADDR
// if not tmp then
11971: LD_VAR 0 1
11975: NOT
11976: IFFALSE 11980
// exit ;
11978: GO 12025
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11980: LD_VAR 0 1
11984: PUSH
11985: LD_INT 1
11987: PPUSH
11988: LD_VAR 0 1
11992: PPUSH
11993: CALL_OW 12
11997: ARRAY
11998: PPUSH
11999: LD_INT 1
12001: PPUSH
12002: LD_INT 4
12004: PPUSH
12005: CALL_OW 12
12009: PPUSH
12010: LD_INT 3000
12012: PPUSH
12013: LD_INT 9000
12015: PPUSH
12016: CALL_OW 12
12020: PPUSH
12021: CALL_OW 492
// end ;
12025: PPOPN 1
12027: END
// every 0 0$1 trigger StreamModeActive and sDepot do
12028: LD_EXP 24
12032: IFFALSE 12040
12034: PUSH
12035: LD_EXP 39
12039: AND
12040: IFFALSE 12060
12042: GO 12044
12044: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
12045: LD_INT 1
12047: PPUSH
12048: LD_OWVAR 2
12052: PPUSH
12053: LD_INT 0
12055: PPUSH
12056: CALL_OW 324
12060: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
12061: LD_EXP 24
12065: IFFALSE 12073
12067: PUSH
12068: LD_EXP 40
12072: AND
12073: IFFALSE 12156
12075: GO 12077
12077: DISABLE
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
12082: LD_ADDR_VAR 0 2
12086: PUSH
12087: LD_INT 22
12089: PUSH
12090: LD_OWVAR 2
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 21
12101: PUSH
12102: LD_INT 3
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PPUSH
12113: CALL_OW 69
12117: ST_TO_ADDR
// if not tmp then
12118: LD_VAR 0 2
12122: NOT
12123: IFFALSE 12127
// exit ;
12125: GO 12156
// for i in tmp do
12127: LD_ADDR_VAR 0 1
12131: PUSH
12132: LD_VAR 0 2
12136: PUSH
12137: FOR_IN
12138: IFFALSE 12154
// SetBLevel ( i , 10 ) ;
12140: LD_VAR 0 1
12144: PPUSH
12145: LD_INT 10
12147: PPUSH
12148: CALL_OW 241
12152: GO 12137
12154: POP
12155: POP
// end ;
12156: PPOPN 2
12158: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12159: LD_EXP 24
12163: IFFALSE 12171
12165: PUSH
12166: LD_EXP 41
12170: AND
12171: IFFALSE 12282
12173: GO 12175
12175: DISABLE
12176: LD_INT 0
12178: PPUSH
12179: PPUSH
12180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12181: LD_ADDR_VAR 0 3
12185: PUSH
12186: LD_INT 22
12188: PUSH
12189: LD_OWVAR 2
12193: PUSH
12194: EMPTY
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 25
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PPUSH
12212: CALL_OW 69
12216: ST_TO_ADDR
// if not tmp then
12217: LD_VAR 0 3
12221: NOT
12222: IFFALSE 12226
// exit ;
12224: GO 12282
// un := tmp [ rand ( 1 , tmp ) ] ;
12226: LD_ADDR_VAR 0 2
12230: PUSH
12231: LD_VAR 0 3
12235: PUSH
12236: LD_INT 1
12238: PPUSH
12239: LD_VAR 0 3
12243: PPUSH
12244: CALL_OW 12
12248: ARRAY
12249: ST_TO_ADDR
// if Crawls ( un ) then
12250: LD_VAR 0 2
12254: PPUSH
12255: CALL_OW 318
12259: IFFALSE 12270
// ComWalk ( un ) ;
12261: LD_VAR 0 2
12265: PPUSH
12266: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12270: LD_VAR 0 2
12274: PPUSH
12275: LD_INT 5
12277: PPUSH
12278: CALL_OW 336
// end ;
12282: PPOPN 3
12284: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12285: LD_EXP 24
12289: IFFALSE 12297
12291: PUSH
12292: LD_EXP 42
12296: AND
12297: IFFALSE 12309
12299: PUSH
12300: LD_OWVAR 67
12304: PUSH
12305: LD_INT 4
12307: LESS
12308: AND
12309: IFFALSE 12328
12311: GO 12313
12313: DISABLE
// begin Difficulty := Difficulty + 1 ;
12314: LD_ADDR_OWVAR 67
12318: PUSH
12319: LD_OWVAR 67
12323: PUSH
12324: LD_INT 1
12326: PLUS
12327: ST_TO_ADDR
// end ;
12328: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12329: LD_EXP 24
12333: IFFALSE 12341
12335: PUSH
12336: LD_EXP 43
12340: AND
12341: IFFALSE 12444
12343: GO 12345
12345: DISABLE
12346: LD_INT 0
12348: PPUSH
// begin for i := 1 to 5 do
12349: LD_ADDR_VAR 0 1
12353: PUSH
12354: DOUBLE
12355: LD_INT 1
12357: DEC
12358: ST_TO_ADDR
12359: LD_INT 5
12361: PUSH
12362: FOR_TO
12363: IFFALSE 12442
// begin uc_nation := nation_nature ;
12365: LD_ADDR_OWVAR 21
12369: PUSH
12370: LD_INT 0
12372: ST_TO_ADDR
// uc_side := 0 ;
12373: LD_ADDR_OWVAR 20
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12381: LD_ADDR_OWVAR 29
12385: PUSH
12386: LD_INT 12
12388: PUSH
12389: LD_INT 12
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: ST_TO_ADDR
// hc_agressivity := 20 ;
12396: LD_ADDR_OWVAR 35
12400: PUSH
12401: LD_INT 20
12403: ST_TO_ADDR
// hc_class := class_tiger ;
12404: LD_ADDR_OWVAR 28
12408: PUSH
12409: LD_INT 14
12411: ST_TO_ADDR
// hc_gallery :=  ;
12412: LD_ADDR_OWVAR 33
12416: PUSH
12417: LD_STRING 
12419: ST_TO_ADDR
// hc_name :=  ;
12420: LD_ADDR_OWVAR 26
12424: PUSH
12425: LD_STRING 
12427: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12428: CALL_OW 44
12432: PPUSH
12433: LD_INT 0
12435: PPUSH
12436: CALL_OW 51
// end ;
12440: GO 12362
12442: POP
12443: POP
// end ;
12444: PPOPN 1
12446: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12447: LD_EXP 24
12451: IFFALSE 12459
12453: PUSH
12454: LD_EXP 44
12458: AND
12459: IFFALSE 12468
12461: GO 12463
12463: DISABLE
// StreamSibBomb ;
12464: CALL 12469 0 0
12468: END
// export function StreamSibBomb ; var i , x , y ; begin
12469: LD_INT 0
12471: PPUSH
12472: PPUSH
12473: PPUSH
12474: PPUSH
// result := false ;
12475: LD_ADDR_VAR 0 1
12479: PUSH
12480: LD_INT 0
12482: ST_TO_ADDR
// for i := 1 to 16 do
12483: LD_ADDR_VAR 0 2
12487: PUSH
12488: DOUBLE
12489: LD_INT 1
12491: DEC
12492: ST_TO_ADDR
12493: LD_INT 16
12495: PUSH
12496: FOR_TO
12497: IFFALSE 12696
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12499: LD_ADDR_VAR 0 3
12503: PUSH
12504: LD_INT 10
12506: PUSH
12507: LD_INT 20
12509: PUSH
12510: LD_INT 30
12512: PUSH
12513: LD_INT 40
12515: PUSH
12516: LD_INT 50
12518: PUSH
12519: LD_INT 60
12521: PUSH
12522: LD_INT 70
12524: PUSH
12525: LD_INT 80
12527: PUSH
12528: LD_INT 90
12530: PUSH
12531: LD_INT 100
12533: PUSH
12534: LD_INT 110
12536: PUSH
12537: LD_INT 120
12539: PUSH
12540: LD_INT 130
12542: PUSH
12543: LD_INT 140
12545: PUSH
12546: LD_INT 150
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 1
12568: PPUSH
12569: LD_INT 15
12571: PPUSH
12572: CALL_OW 12
12576: ARRAY
12577: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12578: LD_ADDR_VAR 0 4
12582: PUSH
12583: LD_INT 10
12585: PUSH
12586: LD_INT 20
12588: PUSH
12589: LD_INT 30
12591: PUSH
12592: LD_INT 40
12594: PUSH
12595: LD_INT 50
12597: PUSH
12598: LD_INT 60
12600: PUSH
12601: LD_INT 70
12603: PUSH
12604: LD_INT 80
12606: PUSH
12607: LD_INT 90
12609: PUSH
12610: LD_INT 100
12612: PUSH
12613: LD_INT 110
12615: PUSH
12616: LD_INT 120
12618: PUSH
12619: LD_INT 130
12621: PUSH
12622: LD_INT 140
12624: PUSH
12625: LD_INT 150
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 1
12647: PPUSH
12648: LD_INT 15
12650: PPUSH
12651: CALL_OW 12
12655: ARRAY
12656: ST_TO_ADDR
// if ValidHex ( x , y ) then
12657: LD_VAR 0 3
12661: PPUSH
12662: LD_VAR 0 4
12666: PPUSH
12667: CALL_OW 488
12671: IFFALSE 12694
// begin result := [ x , y ] ;
12673: LD_ADDR_VAR 0 1
12677: PUSH
12678: LD_VAR 0 3
12682: PUSH
12683: LD_VAR 0 4
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: ST_TO_ADDR
// break ;
12692: GO 12696
// end ; end ;
12694: GO 12496
12696: POP
12697: POP
// if result then
12698: LD_VAR 0 1
12702: IFFALSE 12762
// begin ToLua ( playSibBomb() ) ;
12704: LD_STRING playSibBomb()
12706: PPUSH
12707: CALL_OW 559
// wait ( 0 0$14 ) ;
12711: LD_INT 490
12713: PPUSH
12714: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12718: LD_VAR 0 1
12722: PUSH
12723: LD_INT 1
12725: ARRAY
12726: PPUSH
12727: LD_VAR 0 1
12731: PUSH
12732: LD_INT 2
12734: ARRAY
12735: PPUSH
12736: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12740: LD_VAR 0 1
12744: PUSH
12745: LD_INT 1
12747: ARRAY
12748: PPUSH
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 2
12756: ARRAY
12757: PPUSH
12758: CALL_OW 429
// end ; end ;
12762: LD_VAR 0 1
12766: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12767: LD_EXP 24
12771: IFFALSE 12779
12773: PUSH
12774: LD_EXP 46
12778: AND
12779: IFFALSE 12791
12781: GO 12783
12783: DISABLE
// YouLost (  ) ;
12784: LD_STRING 
12786: PPUSH
12787: CALL_OW 104
12791: END
// every 0 0$1 trigger StreamModeActive and sFog do
12792: LD_EXP 24
12796: IFFALSE 12804
12798: PUSH
12799: LD_EXP 45
12803: AND
12804: IFFALSE 12818
12806: GO 12808
12808: DISABLE
// FogOff ( your_side ) ;
12809: LD_OWVAR 2
12813: PPUSH
12814: CALL_OW 344
12818: END
// every 0 0$1 trigger StreamModeActive and sSun do
12819: LD_EXP 24
12823: IFFALSE 12831
12825: PUSH
12826: LD_EXP 47
12830: AND
12831: IFFALSE 12859
12833: GO 12835
12835: DISABLE
// begin solar_recharge_percent := 0 ;
12836: LD_ADDR_OWVAR 79
12840: PUSH
12841: LD_INT 0
12843: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12844: LD_INT 10500
12846: PPUSH
12847: CALL_OW 67
// solar_recharge_percent := 100 ;
12851: LD_ADDR_OWVAR 79
12855: PUSH
12856: LD_INT 100
12858: ST_TO_ADDR
// end ;
12859: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12860: LD_EXP 24
12864: IFFALSE 12872
12866: PUSH
12867: LD_EXP 48
12871: AND
12872: IFFALSE 13111
12874: GO 12876
12876: DISABLE
12877: LD_INT 0
12879: PPUSH
12880: PPUSH
12881: PPUSH
// begin tmp := [ ] ;
12882: LD_ADDR_VAR 0 3
12886: PUSH
12887: EMPTY
12888: ST_TO_ADDR
// for i := 1 to 6 do
12889: LD_ADDR_VAR 0 1
12893: PUSH
12894: DOUBLE
12895: LD_INT 1
12897: DEC
12898: ST_TO_ADDR
12899: LD_INT 6
12901: PUSH
12902: FOR_TO
12903: IFFALSE 13008
// begin uc_nation := nation_nature ;
12905: LD_ADDR_OWVAR 21
12909: PUSH
12910: LD_INT 0
12912: ST_TO_ADDR
// uc_side := 0 ;
12913: LD_ADDR_OWVAR 20
12917: PUSH
12918: LD_INT 0
12920: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12921: LD_ADDR_OWVAR 29
12925: PUSH
12926: LD_INT 12
12928: PUSH
12929: LD_INT 12
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: ST_TO_ADDR
// hc_agressivity := 20 ;
12936: LD_ADDR_OWVAR 35
12940: PUSH
12941: LD_INT 20
12943: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12944: LD_ADDR_OWVAR 28
12948: PUSH
12949: LD_INT 17
12951: ST_TO_ADDR
// hc_gallery :=  ;
12952: LD_ADDR_OWVAR 33
12956: PUSH
12957: LD_STRING 
12959: ST_TO_ADDR
// hc_name :=  ;
12960: LD_ADDR_OWVAR 26
12964: PUSH
12965: LD_STRING 
12967: ST_TO_ADDR
// un := CreateHuman ;
12968: LD_ADDR_VAR 0 2
12972: PUSH
12973: CALL_OW 44
12977: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12978: LD_VAR 0 2
12982: PPUSH
12983: LD_INT 1
12985: PPUSH
12986: CALL_OW 51
// tmp := tmp ^ un ;
12990: LD_ADDR_VAR 0 3
12994: PUSH
12995: LD_VAR 0 3
12999: PUSH
13000: LD_VAR 0 2
13004: ADD
13005: ST_TO_ADDR
// end ;
13006: GO 12902
13008: POP
13009: POP
// repeat wait ( 0 0$1 ) ;
13010: LD_INT 35
13012: PPUSH
13013: CALL_OW 67
// for un in tmp do
13017: LD_ADDR_VAR 0 2
13021: PUSH
13022: LD_VAR 0 3
13026: PUSH
13027: FOR_IN
13028: IFFALSE 13102
// begin if IsDead ( un ) then
13030: LD_VAR 0 2
13034: PPUSH
13035: CALL_OW 301
13039: IFFALSE 13059
// begin tmp := tmp diff un ;
13041: LD_ADDR_VAR 0 3
13045: PUSH
13046: LD_VAR 0 3
13050: PUSH
13051: LD_VAR 0 2
13055: DIFF
13056: ST_TO_ADDR
// continue ;
13057: GO 13027
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
13059: LD_VAR 0 2
13063: PPUSH
13064: LD_INT 3
13066: PUSH
13067: LD_INT 22
13069: PUSH
13070: LD_INT 0
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: PPUSH
13086: LD_VAR 0 2
13090: PPUSH
13091: CALL_OW 74
13095: PPUSH
13096: CALL_OW 115
// end ;
13100: GO 13027
13102: POP
13103: POP
// until not tmp ;
13104: LD_VAR 0 3
13108: NOT
13109: IFFALSE 13010
// end ;
13111: PPOPN 3
13113: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13114: LD_EXP 24
13118: IFFALSE 13126
13120: PUSH
13121: LD_EXP 49
13125: AND
13126: IFFALSE 13180
13128: GO 13130
13130: DISABLE
// begin ToLua ( displayTroll(); ) ;
13131: LD_STRING displayTroll();
13133: PPUSH
13134: CALL_OW 559
// wait ( 3 3$00 ) ;
13138: LD_INT 6300
13140: PPUSH
13141: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13145: LD_STRING hideTroll();
13147: PPUSH
13148: CALL_OW 559
// wait ( 1 1$00 ) ;
13152: LD_INT 2100
13154: PPUSH
13155: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13159: LD_STRING displayTroll();
13161: PPUSH
13162: CALL_OW 559
// wait ( 1 1$00 ) ;
13166: LD_INT 2100
13168: PPUSH
13169: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13173: LD_STRING hideTroll();
13175: PPUSH
13176: CALL_OW 559
// end ;
13180: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13181: LD_EXP 24
13185: IFFALSE 13193
13187: PUSH
13188: LD_EXP 50
13192: AND
13193: IFFALSE 13256
13195: GO 13197
13197: DISABLE
13198: LD_INT 0
13200: PPUSH
// begin p := 0 ;
13201: LD_ADDR_VAR 0 1
13205: PUSH
13206: LD_INT 0
13208: ST_TO_ADDR
// repeat game_speed := 1 ;
13209: LD_ADDR_OWVAR 65
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13217: LD_INT 35
13219: PPUSH
13220: CALL_OW 67
// p := p + 1 ;
13224: LD_ADDR_VAR 0 1
13228: PUSH
13229: LD_VAR 0 1
13233: PUSH
13234: LD_INT 1
13236: PLUS
13237: ST_TO_ADDR
// until p >= 60 ;
13238: LD_VAR 0 1
13242: PUSH
13243: LD_INT 60
13245: GREATEREQUAL
13246: IFFALSE 13209
// game_speed := 4 ;
13248: LD_ADDR_OWVAR 65
13252: PUSH
13253: LD_INT 4
13255: ST_TO_ADDR
// end ;
13256: PPOPN 1
13258: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13259: LD_EXP 24
13263: IFFALSE 13271
13265: PUSH
13266: LD_EXP 51
13270: AND
13271: IFFALSE 13417
13273: GO 13275
13275: DISABLE
13276: LD_INT 0
13278: PPUSH
13279: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13280: LD_ADDR_VAR 0 1
13284: PUSH
13285: LD_INT 22
13287: PUSH
13288: LD_OWVAR 2
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 2
13299: PUSH
13300: LD_INT 30
13302: PUSH
13303: LD_INT 0
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: LD_INT 30
13312: PUSH
13313: LD_INT 1
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PPUSH
13329: CALL_OW 69
13333: ST_TO_ADDR
// if not depot then
13334: LD_VAR 0 1
13338: NOT
13339: IFFALSE 13343
// exit ;
13341: GO 13417
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13343: LD_ADDR_VAR 0 2
13347: PUSH
13348: LD_VAR 0 1
13352: PUSH
13353: LD_INT 1
13355: PPUSH
13356: LD_VAR 0 1
13360: PPUSH
13361: CALL_OW 12
13365: ARRAY
13366: PPUSH
13367: CALL_OW 274
13371: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13372: LD_VAR 0 2
13376: PPUSH
13377: LD_INT 1
13379: PPUSH
13380: LD_INT 0
13382: PPUSH
13383: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13387: LD_VAR 0 2
13391: PPUSH
13392: LD_INT 2
13394: PPUSH
13395: LD_INT 0
13397: PPUSH
13398: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13402: LD_VAR 0 2
13406: PPUSH
13407: LD_INT 3
13409: PPUSH
13410: LD_INT 0
13412: PPUSH
13413: CALL_OW 277
// end ;
13417: PPOPN 2
13419: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13420: LD_EXP 24
13424: IFFALSE 13432
13426: PUSH
13427: LD_EXP 52
13431: AND
13432: IFFALSE 13529
13434: GO 13436
13436: DISABLE
13437: LD_INT 0
13439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13440: LD_ADDR_VAR 0 1
13444: PUSH
13445: LD_INT 22
13447: PUSH
13448: LD_OWVAR 2
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 21
13459: PUSH
13460: LD_INT 1
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 3
13469: PUSH
13470: LD_INT 23
13472: PUSH
13473: LD_INT 0
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: ST_TO_ADDR
// if not tmp then
13494: LD_VAR 0 1
13498: NOT
13499: IFFALSE 13503
// exit ;
13501: GO 13529
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13503: LD_VAR 0 1
13507: PUSH
13508: LD_INT 1
13510: PPUSH
13511: LD_VAR 0 1
13515: PPUSH
13516: CALL_OW 12
13520: ARRAY
13521: PPUSH
13522: LD_INT 200
13524: PPUSH
13525: CALL_OW 234
// end ;
13529: PPOPN 1
13531: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13532: LD_EXP 24
13536: IFFALSE 13544
13538: PUSH
13539: LD_EXP 53
13543: AND
13544: IFFALSE 13623
13546: GO 13548
13548: DISABLE
13549: LD_INT 0
13551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13552: LD_ADDR_VAR 0 1
13556: PUSH
13557: LD_INT 22
13559: PUSH
13560: LD_OWVAR 2
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 21
13571: PUSH
13572: LD_INT 2
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PPUSH
13583: CALL_OW 69
13587: ST_TO_ADDR
// if not tmp then
13588: LD_VAR 0 1
13592: NOT
13593: IFFALSE 13597
// exit ;
13595: GO 13623
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13597: LD_VAR 0 1
13601: PUSH
13602: LD_INT 1
13604: PPUSH
13605: LD_VAR 0 1
13609: PPUSH
13610: CALL_OW 12
13614: ARRAY
13615: PPUSH
13616: LD_INT 60
13618: PPUSH
13619: CALL_OW 234
// end ;
13623: PPOPN 1
13625: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13626: LD_EXP 24
13630: IFFALSE 13638
13632: PUSH
13633: LD_EXP 54
13637: AND
13638: IFFALSE 13737
13640: GO 13642
13642: DISABLE
13643: LD_INT 0
13645: PPUSH
13646: PPUSH
// begin enable ;
13647: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13648: LD_ADDR_VAR 0 1
13652: PUSH
13653: LD_INT 22
13655: PUSH
13656: LD_OWVAR 2
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 61
13667: PUSH
13668: EMPTY
13669: LIST
13670: PUSH
13671: LD_INT 33
13673: PUSH
13674: LD_INT 2
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: ST_TO_ADDR
// if not tmp then
13691: LD_VAR 0 1
13695: NOT
13696: IFFALSE 13700
// exit ;
13698: GO 13737
// for i in tmp do
13700: LD_ADDR_VAR 0 2
13704: PUSH
13705: LD_VAR 0 1
13709: PUSH
13710: FOR_IN
13711: IFFALSE 13735
// if IsControledBy ( i ) then
13713: LD_VAR 0 2
13717: PPUSH
13718: CALL_OW 312
13722: IFFALSE 13733
// ComUnlink ( i ) ;
13724: LD_VAR 0 2
13728: PPUSH
13729: CALL_OW 136
13733: GO 13710
13735: POP
13736: POP
// end ;
13737: PPOPN 2
13739: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13740: LD_EXP 24
13744: IFFALSE 13752
13746: PUSH
13747: LD_EXP 55
13751: AND
13752: IFFALSE 13892
13754: GO 13756
13756: DISABLE
13757: LD_INT 0
13759: PPUSH
13760: PPUSH
// begin ToLua ( displayPowell(); ) ;
13761: LD_STRING displayPowell();
13763: PPUSH
13764: CALL_OW 559
// uc_side := 0 ;
13768: LD_ADDR_OWVAR 20
13772: PUSH
13773: LD_INT 0
13775: ST_TO_ADDR
// uc_nation := 2 ;
13776: LD_ADDR_OWVAR 21
13780: PUSH
13781: LD_INT 2
13783: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13784: LD_ADDR_OWVAR 37
13788: PUSH
13789: LD_INT 14
13791: ST_TO_ADDR
// vc_engine := engine_siberite ;
13792: LD_ADDR_OWVAR 39
13796: PUSH
13797: LD_INT 3
13799: ST_TO_ADDR
// vc_control := control_apeman ;
13800: LD_ADDR_OWVAR 38
13804: PUSH
13805: LD_INT 5
13807: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13808: LD_ADDR_OWVAR 40
13812: PUSH
13813: LD_INT 29
13815: ST_TO_ADDR
// un := CreateVehicle ;
13816: LD_ADDR_VAR 0 2
13820: PUSH
13821: CALL_OW 45
13825: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13826: LD_VAR 0 2
13830: PPUSH
13831: LD_INT 1
13833: PPUSH
13834: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13838: LD_INT 35
13840: PPUSH
13841: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13845: LD_VAR 0 2
13849: PPUSH
13850: LD_INT 22
13852: PUSH
13853: LD_OWVAR 2
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 69
13866: PPUSH
13867: LD_VAR 0 2
13871: PPUSH
13872: CALL_OW 74
13876: PPUSH
13877: CALL_OW 115
// until IsDead ( un ) ;
13881: LD_VAR 0 2
13885: PPUSH
13886: CALL_OW 301
13890: IFFALSE 13838
// end ;
13892: PPOPN 2
13894: END
// every 0 0$1 trigger StreamModeActive and sStu do
13895: LD_EXP 24
13899: IFFALSE 13907
13901: PUSH
13902: LD_EXP 63
13906: AND
13907: IFFALSE 13923
13909: GO 13911
13911: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13912: LD_STRING displayStucuk();
13914: PPUSH
13915: CALL_OW 559
// ResetFog ;
13919: CALL_OW 335
// end ;
13923: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13924: LD_EXP 24
13928: IFFALSE 13936
13930: PUSH
13931: LD_EXP 56
13935: AND
13936: IFFALSE 14077
13938: GO 13940
13940: DISABLE
13941: LD_INT 0
13943: PPUSH
13944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13945: LD_ADDR_VAR 0 2
13949: PUSH
13950: LD_INT 22
13952: PUSH
13953: LD_OWVAR 2
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 21
13964: PUSH
13965: LD_INT 1
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 69
13980: ST_TO_ADDR
// if not tmp then
13981: LD_VAR 0 2
13985: NOT
13986: IFFALSE 13990
// exit ;
13988: GO 14077
// un := tmp [ rand ( 1 , tmp ) ] ;
13990: LD_ADDR_VAR 0 1
13994: PUSH
13995: LD_VAR 0 2
13999: PUSH
14000: LD_INT 1
14002: PPUSH
14003: LD_VAR 0 2
14007: PPUSH
14008: CALL_OW 12
14012: ARRAY
14013: ST_TO_ADDR
// SetSide ( un , 0 ) ;
14014: LD_VAR 0 1
14018: PPUSH
14019: LD_INT 0
14021: PPUSH
14022: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
14026: LD_VAR 0 1
14030: PPUSH
14031: LD_OWVAR 3
14035: PUSH
14036: LD_VAR 0 1
14040: DIFF
14041: PPUSH
14042: LD_VAR 0 1
14046: PPUSH
14047: CALL_OW 74
14051: PPUSH
14052: CALL_OW 115
// wait ( 0 0$20 ) ;
14056: LD_INT 700
14058: PPUSH
14059: CALL_OW 67
// SetSide ( un , your_side ) ;
14063: LD_VAR 0 1
14067: PPUSH
14068: LD_OWVAR 2
14072: PPUSH
14073: CALL_OW 235
// end ;
14077: PPOPN 2
14079: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
14080: LD_EXP 24
14084: IFFALSE 14092
14086: PUSH
14087: LD_EXP 57
14091: AND
14092: IFFALSE 14198
14094: GO 14096
14096: DISABLE
14097: LD_INT 0
14099: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14100: LD_ADDR_VAR 0 1
14104: PUSH
14105: LD_INT 22
14107: PUSH
14108: LD_OWVAR 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: LD_INT 30
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 30
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: LIST
14144: PUSH
14145: EMPTY
14146: LIST
14147: LIST
14148: PPUSH
14149: CALL_OW 69
14153: ST_TO_ADDR
// if not depot then
14154: LD_VAR 0 1
14158: NOT
14159: IFFALSE 14163
// exit ;
14161: GO 14198
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14163: LD_VAR 0 1
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PPUSH
14172: CALL_OW 250
14176: PPUSH
14177: LD_VAR 0 1
14181: PUSH
14182: LD_INT 1
14184: ARRAY
14185: PPUSH
14186: CALL_OW 251
14190: PPUSH
14191: LD_INT 70
14193: PPUSH
14194: CALL_OW 495
// end ;
14198: PPOPN 1
14200: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14201: LD_EXP 24
14205: IFFALSE 14213
14207: PUSH
14208: LD_EXP 58
14212: AND
14213: IFFALSE 14424
14215: GO 14217
14217: DISABLE
14218: LD_INT 0
14220: PPUSH
14221: PPUSH
14222: PPUSH
14223: PPUSH
14224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14225: LD_ADDR_VAR 0 5
14229: PUSH
14230: LD_INT 22
14232: PUSH
14233: LD_OWVAR 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 21
14244: PUSH
14245: LD_INT 1
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 69
14260: ST_TO_ADDR
// if not tmp then
14261: LD_VAR 0 5
14265: NOT
14266: IFFALSE 14270
// exit ;
14268: GO 14424
// for i in tmp do
14270: LD_ADDR_VAR 0 1
14274: PUSH
14275: LD_VAR 0 5
14279: PUSH
14280: FOR_IN
14281: IFFALSE 14422
// begin d := rand ( 0 , 5 ) ;
14283: LD_ADDR_VAR 0 4
14287: PUSH
14288: LD_INT 0
14290: PPUSH
14291: LD_INT 5
14293: PPUSH
14294: CALL_OW 12
14298: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14299: LD_ADDR_VAR 0 2
14303: PUSH
14304: LD_VAR 0 1
14308: PPUSH
14309: CALL_OW 250
14313: PPUSH
14314: LD_VAR 0 4
14318: PPUSH
14319: LD_INT 3
14321: PPUSH
14322: LD_INT 12
14324: PPUSH
14325: CALL_OW 12
14329: PPUSH
14330: CALL_OW 272
14334: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14335: LD_ADDR_VAR 0 3
14339: PUSH
14340: LD_VAR 0 1
14344: PPUSH
14345: CALL_OW 251
14349: PPUSH
14350: LD_VAR 0 4
14354: PPUSH
14355: LD_INT 3
14357: PPUSH
14358: LD_INT 12
14360: PPUSH
14361: CALL_OW 12
14365: PPUSH
14366: CALL_OW 273
14370: ST_TO_ADDR
// if ValidHex ( x , y ) then
14371: LD_VAR 0 2
14375: PPUSH
14376: LD_VAR 0 3
14380: PPUSH
14381: CALL_OW 488
14385: IFFALSE 14420
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14387: LD_VAR 0 1
14391: PPUSH
14392: LD_VAR 0 2
14396: PPUSH
14397: LD_VAR 0 3
14401: PPUSH
14402: LD_INT 3
14404: PPUSH
14405: LD_INT 6
14407: PPUSH
14408: CALL_OW 12
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 483
// end ;
14420: GO 14280
14422: POP
14423: POP
// end ;
14424: PPOPN 5
14426: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14427: LD_EXP 24
14431: IFFALSE 14439
14433: PUSH
14434: LD_EXP 59
14438: AND
14439: IFFALSE 14533
14441: GO 14443
14443: DISABLE
14444: LD_INT 0
14446: PPUSH
14447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14448: LD_ADDR_VAR 0 2
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_OWVAR 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 32
14467: PUSH
14468: LD_INT 1
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 21
14477: PUSH
14478: LD_INT 2
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: ST_TO_ADDR
// if not tmp then
14495: LD_VAR 0 2
14499: NOT
14500: IFFALSE 14504
// exit ;
14502: GO 14533
// for i in tmp do
14504: LD_ADDR_VAR 0 1
14508: PUSH
14509: LD_VAR 0 2
14513: PUSH
14514: FOR_IN
14515: IFFALSE 14531
// SetFuel ( i , 0 ) ;
14517: LD_VAR 0 1
14521: PPUSH
14522: LD_INT 0
14524: PPUSH
14525: CALL_OW 240
14529: GO 14514
14531: POP
14532: POP
// end ;
14533: PPOPN 2
14535: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14536: LD_EXP 24
14540: IFFALSE 14548
14542: PUSH
14543: LD_EXP 60
14547: AND
14548: IFFALSE 14614
14550: GO 14552
14552: DISABLE
14553: LD_INT 0
14555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14556: LD_ADDR_VAR 0 1
14560: PUSH
14561: LD_INT 22
14563: PUSH
14564: LD_OWVAR 2
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 30
14575: PUSH
14576: LD_INT 29
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PPUSH
14587: CALL_OW 69
14591: ST_TO_ADDR
// if not tmp then
14592: LD_VAR 0 1
14596: NOT
14597: IFFALSE 14601
// exit ;
14599: GO 14614
// DestroyUnit ( tmp [ 1 ] ) ;
14601: LD_VAR 0 1
14605: PUSH
14606: LD_INT 1
14608: ARRAY
14609: PPUSH
14610: CALL_OW 65
// end ;
14614: PPOPN 1
14616: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14617: LD_EXP 24
14621: IFFALSE 14629
14623: PUSH
14624: LD_EXP 62
14628: AND
14629: IFFALSE 14758
14631: GO 14633
14633: DISABLE
14634: LD_INT 0
14636: PPUSH
// begin uc_side := 0 ;
14637: LD_ADDR_OWVAR 20
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// uc_nation := nation_arabian ;
14645: LD_ADDR_OWVAR 21
14649: PUSH
14650: LD_INT 2
14652: ST_TO_ADDR
// hc_gallery :=  ;
14653: LD_ADDR_OWVAR 33
14657: PUSH
14658: LD_STRING 
14660: ST_TO_ADDR
// hc_name :=  ;
14661: LD_ADDR_OWVAR 26
14665: PUSH
14666: LD_STRING 
14668: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14669: LD_INT 1
14671: PPUSH
14672: LD_INT 11
14674: PPUSH
14675: LD_INT 10
14677: PPUSH
14678: CALL_OW 380
// un := CreateHuman ;
14682: LD_ADDR_VAR 0 1
14686: PUSH
14687: CALL_OW 44
14691: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14692: LD_VAR 0 1
14696: PPUSH
14697: LD_INT 1
14699: PPUSH
14700: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14704: LD_INT 35
14706: PPUSH
14707: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14711: LD_VAR 0 1
14715: PPUSH
14716: LD_INT 22
14718: PUSH
14719: LD_OWVAR 2
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PPUSH
14728: CALL_OW 69
14732: PPUSH
14733: LD_VAR 0 1
14737: PPUSH
14738: CALL_OW 74
14742: PPUSH
14743: CALL_OW 115
// until IsDead ( un ) ;
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 301
14756: IFFALSE 14704
// end ;
14758: PPOPN 1
14760: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14761: LD_EXP 24
14765: IFFALSE 14773
14767: PUSH
14768: LD_EXP 64
14772: AND
14773: IFFALSE 14785
14775: GO 14777
14777: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14778: LD_STRING earthquake(getX(game), 0, 32)
14780: PPUSH
14781: CALL_OW 559
14785: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14786: LD_EXP 24
14790: IFFALSE 14798
14792: PUSH
14793: LD_EXP 65
14797: AND
14798: IFFALSE 14889
14800: GO 14802
14802: DISABLE
14803: LD_INT 0
14805: PPUSH
// begin enable ;
14806: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_INT 22
14814: PUSH
14815: LD_OWVAR 2
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 33
14836: PUSH
14837: LD_INT 3
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: PPUSH
14849: CALL_OW 69
14853: ST_TO_ADDR
// if not tmp then
14854: LD_VAR 0 1
14858: NOT
14859: IFFALSE 14863
// exit ;
14861: GO 14889
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14863: LD_VAR 0 1
14867: PUSH
14868: LD_INT 1
14870: PPUSH
14871: LD_VAR 0 1
14875: PPUSH
14876: CALL_OW 12
14880: ARRAY
14881: PPUSH
14882: LD_INT 1
14884: PPUSH
14885: CALL_OW 234
// end ;
14889: PPOPN 1
14891: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14892: LD_EXP 24
14896: IFFALSE 14904
14898: PUSH
14899: LD_EXP 66
14903: AND
14904: IFFALSE 15045
14906: GO 14908
14908: DISABLE
14909: LD_INT 0
14911: PPUSH
14912: PPUSH
14913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14914: LD_ADDR_VAR 0 3
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_OWVAR 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 25
14933: PUSH
14934: LD_INT 1
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// if not tmp then
14950: LD_VAR 0 3
14954: NOT
14955: IFFALSE 14959
// exit ;
14957: GO 15045
// un := tmp [ rand ( 1 , tmp ) ] ;
14959: LD_ADDR_VAR 0 2
14963: PUSH
14964: LD_VAR 0 3
14968: PUSH
14969: LD_INT 1
14971: PPUSH
14972: LD_VAR 0 3
14976: PPUSH
14977: CALL_OW 12
14981: ARRAY
14982: ST_TO_ADDR
// if Crawls ( un ) then
14983: LD_VAR 0 2
14987: PPUSH
14988: CALL_OW 318
14992: IFFALSE 15003
// ComWalk ( un ) ;
14994: LD_VAR 0 2
14998: PPUSH
14999: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
15003: LD_VAR 0 2
15007: PPUSH
15008: LD_INT 9
15010: PPUSH
15011: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
15015: LD_INT 28
15017: PPUSH
15018: LD_OWVAR 2
15022: PPUSH
15023: LD_INT 2
15025: PPUSH
15026: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
15030: LD_INT 29
15032: PPUSH
15033: LD_OWVAR 2
15037: PPUSH
15038: LD_INT 2
15040: PPUSH
15041: CALL_OW 322
// end ;
15045: PPOPN 3
15047: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
15048: LD_EXP 24
15052: IFFALSE 15060
15054: PUSH
15055: LD_EXP 67
15059: AND
15060: IFFALSE 15171
15062: GO 15064
15064: DISABLE
15065: LD_INT 0
15067: PPUSH
15068: PPUSH
15069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15070: LD_ADDR_VAR 0 3
15074: PUSH
15075: LD_INT 22
15077: PUSH
15078: LD_OWVAR 2
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 25
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: ST_TO_ADDR
// if not tmp then
15106: LD_VAR 0 3
15110: NOT
15111: IFFALSE 15115
// exit ;
15113: GO 15171
// un := tmp [ rand ( 1 , tmp ) ] ;
15115: LD_ADDR_VAR 0 2
15119: PUSH
15120: LD_VAR 0 3
15124: PUSH
15125: LD_INT 1
15127: PPUSH
15128: LD_VAR 0 3
15132: PPUSH
15133: CALL_OW 12
15137: ARRAY
15138: ST_TO_ADDR
// if Crawls ( un ) then
15139: LD_VAR 0 2
15143: PPUSH
15144: CALL_OW 318
15148: IFFALSE 15159
// ComWalk ( un ) ;
15150: LD_VAR 0 2
15154: PPUSH
15155: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15159: LD_VAR 0 2
15163: PPUSH
15164: LD_INT 8
15166: PPUSH
15167: CALL_OW 336
// end ;
15171: PPOPN 3
15173: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15174: LD_EXP 24
15178: IFFALSE 15186
15180: PUSH
15181: LD_EXP 68
15185: AND
15186: IFFALSE 15330
15188: GO 15190
15190: DISABLE
15191: LD_INT 0
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15195: LD_ADDR_VAR 0 2
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 21
15214: PUSH
15215: LD_INT 2
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 2
15224: PUSH
15225: LD_INT 34
15227: PUSH
15228: LD_INT 12
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 34
15237: PUSH
15238: LD_INT 51
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 34
15247: PUSH
15248: LD_INT 32
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 69
15270: ST_TO_ADDR
// if not tmp then
15271: LD_VAR 0 2
15275: NOT
15276: IFFALSE 15280
// exit ;
15278: GO 15330
// for i in tmp do
15280: LD_ADDR_VAR 0 1
15284: PUSH
15285: LD_VAR 0 2
15289: PUSH
15290: FOR_IN
15291: IFFALSE 15328
// if GetCargo ( i , mat_artifact ) = 0 then
15293: LD_VAR 0 1
15297: PPUSH
15298: LD_INT 4
15300: PPUSH
15301: CALL_OW 289
15305: PUSH
15306: LD_INT 0
15308: EQUAL
15309: IFFALSE 15326
// SetCargo ( i , mat_siberit , 100 ) ;
15311: LD_VAR 0 1
15315: PPUSH
15316: LD_INT 3
15318: PPUSH
15319: LD_INT 100
15321: PPUSH
15322: CALL_OW 290
15326: GO 15290
15328: POP
15329: POP
// end ;
15330: PPOPN 2
15332: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15333: LD_EXP 24
15337: IFFALSE 15345
15339: PUSH
15340: LD_EXP 69
15344: AND
15345: IFFALSE 15528
15347: GO 15349
15349: DISABLE
15350: LD_INT 0
15352: PPUSH
15353: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: LD_INT 22
15361: PUSH
15362: LD_OWVAR 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 69
15375: ST_TO_ADDR
// if not tmp then
15376: LD_VAR 0 2
15380: NOT
15381: IFFALSE 15385
// exit ;
15383: GO 15528
// for i := 1 to 2 do
15385: LD_ADDR_VAR 0 1
15389: PUSH
15390: DOUBLE
15391: LD_INT 1
15393: DEC
15394: ST_TO_ADDR
15395: LD_INT 2
15397: PUSH
15398: FOR_TO
15399: IFFALSE 15526
// begin uc_side := your_side ;
15401: LD_ADDR_OWVAR 20
15405: PUSH
15406: LD_OWVAR 2
15410: ST_TO_ADDR
// uc_nation := nation_american ;
15411: LD_ADDR_OWVAR 21
15415: PUSH
15416: LD_INT 1
15418: ST_TO_ADDR
// vc_chassis := us_morphling ;
15419: LD_ADDR_OWVAR 37
15423: PUSH
15424: LD_INT 5
15426: ST_TO_ADDR
// vc_engine := engine_siberite ;
15427: LD_ADDR_OWVAR 39
15431: PUSH
15432: LD_INT 3
15434: ST_TO_ADDR
// vc_control := control_computer ;
15435: LD_ADDR_OWVAR 38
15439: PUSH
15440: LD_INT 3
15442: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15443: LD_ADDR_OWVAR 40
15447: PUSH
15448: LD_INT 10
15450: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15451: LD_VAR 0 2
15455: PUSH
15456: LD_INT 1
15458: ARRAY
15459: PPUSH
15460: CALL_OW 310
15464: NOT
15465: IFFALSE 15512
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15467: CALL_OW 45
15471: PPUSH
15472: LD_VAR 0 2
15476: PUSH
15477: LD_INT 1
15479: ARRAY
15480: PPUSH
15481: CALL_OW 250
15485: PPUSH
15486: LD_VAR 0 2
15490: PUSH
15491: LD_INT 1
15493: ARRAY
15494: PPUSH
15495: CALL_OW 251
15499: PPUSH
15500: LD_INT 12
15502: PPUSH
15503: LD_INT 1
15505: PPUSH
15506: CALL_OW 50
15510: GO 15524
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15512: CALL_OW 45
15516: PPUSH
15517: LD_INT 1
15519: PPUSH
15520: CALL_OW 51
// end ;
15524: GO 15398
15526: POP
15527: POP
// end ;
15528: PPOPN 2
15530: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15531: LD_EXP 24
15535: IFFALSE 15543
15537: PUSH
15538: LD_EXP 70
15542: AND
15543: IFFALSE 15765
15545: GO 15547
15547: DISABLE
15548: LD_INT 0
15550: PPUSH
15551: PPUSH
15552: PPUSH
15553: PPUSH
15554: PPUSH
15555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15556: LD_ADDR_VAR 0 6
15560: PUSH
15561: LD_INT 22
15563: PUSH
15564: LD_OWVAR 2
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: LD_INT 21
15575: PUSH
15576: LD_INT 1
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: LD_INT 23
15588: PUSH
15589: LD_INT 0
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: EMPTY
15601: LIST
15602: LIST
15603: LIST
15604: PPUSH
15605: CALL_OW 69
15609: ST_TO_ADDR
// if not tmp then
15610: LD_VAR 0 6
15614: NOT
15615: IFFALSE 15619
// exit ;
15617: GO 15765
// s1 := rand ( 1 , 4 ) ;
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: LD_INT 1
15626: PPUSH
15627: LD_INT 4
15629: PPUSH
15630: CALL_OW 12
15634: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15635: LD_ADDR_VAR 0 4
15639: PUSH
15640: LD_VAR 0 6
15644: PUSH
15645: LD_INT 1
15647: ARRAY
15648: PPUSH
15649: LD_VAR 0 2
15653: PPUSH
15654: CALL_OW 259
15658: ST_TO_ADDR
// if s1 = 1 then
15659: LD_VAR 0 2
15663: PUSH
15664: LD_INT 1
15666: EQUAL
15667: IFFALSE 15687
// s2 := rand ( 2 , 4 ) else
15669: LD_ADDR_VAR 0 3
15673: PUSH
15674: LD_INT 2
15676: PPUSH
15677: LD_INT 4
15679: PPUSH
15680: CALL_OW 12
15684: ST_TO_ADDR
15685: GO 15695
// s2 := 1 ;
15687: LD_ADDR_VAR 0 3
15691: PUSH
15692: LD_INT 1
15694: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15695: LD_ADDR_VAR 0 5
15699: PUSH
15700: LD_VAR 0 6
15704: PUSH
15705: LD_INT 1
15707: ARRAY
15708: PPUSH
15709: LD_VAR 0 3
15713: PPUSH
15714: CALL_OW 259
15718: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15719: LD_VAR 0 6
15723: PUSH
15724: LD_INT 1
15726: ARRAY
15727: PPUSH
15728: LD_VAR 0 2
15732: PPUSH
15733: LD_VAR 0 5
15737: PPUSH
15738: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15742: LD_VAR 0 6
15746: PUSH
15747: LD_INT 1
15749: ARRAY
15750: PPUSH
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_VAR 0 4
15760: PPUSH
15761: CALL_OW 237
// end ;
15765: PPOPN 6
15767: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15768: LD_EXP 24
15772: IFFALSE 15780
15774: PUSH
15775: LD_EXP 71
15779: AND
15780: IFFALSE 15859
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15788: LD_ADDR_VAR 0 1
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_OWVAR 2
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 30
15807: PUSH
15808: LD_INT 3
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: PUSH
15815: EMPTY
15816: LIST
15817: LIST
15818: PPUSH
15819: CALL_OW 69
15823: ST_TO_ADDR
// if not tmp then
15824: LD_VAR 0 1
15828: NOT
15829: IFFALSE 15833
// exit ;
15831: GO 15859
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15833: LD_VAR 0 1
15837: PUSH
15838: LD_INT 1
15840: PPUSH
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 12
15850: ARRAY
15851: PPUSH
15852: LD_INT 1
15854: PPUSH
15855: CALL_OW 234
// end ;
15859: PPOPN 1
15861: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15862: LD_EXP 24
15866: IFFALSE 15874
15868: PUSH
15869: LD_EXP 72
15873: AND
15874: IFFALSE 15986
15876: GO 15878
15878: DISABLE
15879: LD_INT 0
15881: PPUSH
15882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15883: LD_ADDR_VAR 0 2
15887: PUSH
15888: LD_INT 22
15890: PUSH
15891: LD_OWVAR 2
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PUSH
15900: LD_INT 2
15902: PUSH
15903: LD_INT 30
15905: PUSH
15906: LD_INT 27
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: LD_INT 30
15915: PUSH
15916: LD_INT 26
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 30
15925: PUSH
15926: LD_INT 28
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PPUSH
15943: CALL_OW 69
15947: ST_TO_ADDR
// if not tmp then
15948: LD_VAR 0 2
15952: NOT
15953: IFFALSE 15957
// exit ;
15955: GO 15986
// for i in tmp do
15957: LD_ADDR_VAR 0 1
15961: PUSH
15962: LD_VAR 0 2
15966: PUSH
15967: FOR_IN
15968: IFFALSE 15984
// SetLives ( i , 1 ) ;
15970: LD_VAR 0 1
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: CALL_OW 234
15982: GO 15967
15984: POP
15985: POP
// end ;
15986: PPOPN 2
15988: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15989: LD_EXP 24
15993: IFFALSE 16001
15995: PUSH
15996: LD_EXP 73
16000: AND
16001: IFFALSE 16288
16003: GO 16005
16005: DISABLE
16006: LD_INT 0
16008: PPUSH
16009: PPUSH
16010: PPUSH
// begin i := rand ( 1 , 7 ) ;
16011: LD_ADDR_VAR 0 1
16015: PUSH
16016: LD_INT 1
16018: PPUSH
16019: LD_INT 7
16021: PPUSH
16022: CALL_OW 12
16026: ST_TO_ADDR
// case i of 1 :
16027: LD_VAR 0 1
16031: PUSH
16032: LD_INT 1
16034: DOUBLE
16035: EQUAL
16036: IFTRUE 16040
16038: GO 16050
16040: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
16041: LD_STRING earthquake(getX(game), 0, 32)
16043: PPUSH
16044: CALL_OW 559
16048: GO 16288
16050: LD_INT 2
16052: DOUBLE
16053: EQUAL
16054: IFTRUE 16058
16056: GO 16072
16058: POP
// begin ToLua ( displayStucuk(); ) ;
16059: LD_STRING displayStucuk();
16061: PPUSH
16062: CALL_OW 559
// ResetFog ;
16066: CALL_OW 335
// end ; 3 :
16070: GO 16288
16072: LD_INT 3
16074: DOUBLE
16075: EQUAL
16076: IFTRUE 16080
16078: GO 16184
16080: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16081: LD_ADDR_VAR 0 2
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_OWVAR 2
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 25
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PPUSH
16112: CALL_OW 69
16116: ST_TO_ADDR
// if not tmp then
16117: LD_VAR 0 2
16121: NOT
16122: IFFALSE 16126
// exit ;
16124: GO 16288
// un := tmp [ rand ( 1 , tmp ) ] ;
16126: LD_ADDR_VAR 0 3
16130: PUSH
16131: LD_VAR 0 2
16135: PUSH
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 2
16143: PPUSH
16144: CALL_OW 12
16148: ARRAY
16149: ST_TO_ADDR
// if Crawls ( un ) then
16150: LD_VAR 0 3
16154: PPUSH
16155: CALL_OW 318
16159: IFFALSE 16170
// ComWalk ( un ) ;
16161: LD_VAR 0 3
16165: PPUSH
16166: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16170: LD_VAR 0 3
16174: PPUSH
16175: LD_INT 8
16177: PPUSH
16178: CALL_OW 336
// end ; 4 :
16182: GO 16288
16184: LD_INT 4
16186: DOUBLE
16187: EQUAL
16188: IFTRUE 16192
16190: GO 16266
16192: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16193: LD_ADDR_VAR 0 2
16197: PUSH
16198: LD_INT 22
16200: PUSH
16201: LD_OWVAR 2
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 30
16212: PUSH
16213: LD_INT 29
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PPUSH
16224: CALL_OW 69
16228: ST_TO_ADDR
// if not tmp then
16229: LD_VAR 0 2
16233: NOT
16234: IFFALSE 16238
// exit ;
16236: GO 16288
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16238: LD_VAR 0 2
16242: PUSH
16243: LD_INT 1
16245: ARRAY
16246: PPUSH
16247: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16251: LD_VAR 0 2
16255: PUSH
16256: LD_INT 1
16258: ARRAY
16259: PPUSH
16260: CALL_OW 65
// end ; 5 .. 7 :
16264: GO 16288
16266: LD_INT 5
16268: DOUBLE
16269: GREATEREQUAL
16270: IFFALSE 16278
16272: LD_INT 7
16274: DOUBLE
16275: LESSEQUAL
16276: IFTRUE 16280
16278: GO 16287
16280: POP
// StreamSibBomb ; end ;
16281: CALL 12469 0 0
16285: GO 16288
16287: POP
// end ;
16288: PPOPN 3
16290: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16291: LD_EXP 24
16295: IFFALSE 16303
16297: PUSH
16298: LD_EXP 74
16302: AND
16303: IFFALSE 16459
16305: GO 16307
16307: DISABLE
16308: LD_INT 0
16310: PPUSH
16311: PPUSH
16312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16313: LD_ADDR_VAR 0 2
16317: PUSH
16318: LD_INT 81
16320: PUSH
16321: LD_OWVAR 2
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: LD_INT 2
16332: PUSH
16333: LD_INT 21
16335: PUSH
16336: LD_INT 1
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 21
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 69
16366: ST_TO_ADDR
// if not tmp then
16367: LD_VAR 0 2
16371: NOT
16372: IFFALSE 16376
// exit ;
16374: GO 16459
// p := 0 ;
16376: LD_ADDR_VAR 0 3
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16384: LD_INT 35
16386: PPUSH
16387: CALL_OW 67
// p := p + 1 ;
16391: LD_ADDR_VAR 0 3
16395: PUSH
16396: LD_VAR 0 3
16400: PUSH
16401: LD_INT 1
16403: PLUS
16404: ST_TO_ADDR
// for i in tmp do
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_VAR 0 2
16414: PUSH
16415: FOR_IN
16416: IFFALSE 16447
// if GetLives ( i ) < 1000 then
16418: LD_VAR 0 1
16422: PPUSH
16423: CALL_OW 256
16427: PUSH
16428: LD_INT 1000
16430: LESS
16431: IFFALSE 16445
// SetLives ( i , 1000 ) ;
16433: LD_VAR 0 1
16437: PPUSH
16438: LD_INT 1000
16440: PPUSH
16441: CALL_OW 234
16445: GO 16415
16447: POP
16448: POP
// until p > 20 ;
16449: LD_VAR 0 3
16453: PUSH
16454: LD_INT 20
16456: GREATER
16457: IFFALSE 16384
// end ;
16459: PPOPN 3
16461: END
// every 0 0$1 trigger StreamModeActive and sTime do
16462: LD_EXP 24
16466: IFFALSE 16474
16468: PUSH
16469: LD_EXP 75
16473: AND
16474: IFFALSE 16509
16476: GO 16478
16478: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16479: LD_INT 28
16481: PPUSH
16482: LD_OWVAR 2
16486: PPUSH
16487: LD_INT 2
16489: PPUSH
16490: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16494: LD_INT 30
16496: PPUSH
16497: LD_OWVAR 2
16501: PPUSH
16502: LD_INT 2
16504: PPUSH
16505: CALL_OW 322
// end ;
16509: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16510: LD_EXP 24
16514: IFFALSE 16522
16516: PUSH
16517: LD_EXP 76
16521: AND
16522: IFFALSE 16643
16524: GO 16526
16526: DISABLE
16527: LD_INT 0
16529: PPUSH
16530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16531: LD_ADDR_VAR 0 2
16535: PUSH
16536: LD_INT 22
16538: PUSH
16539: LD_OWVAR 2
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 21
16550: PUSH
16551: LD_INT 1
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 3
16560: PUSH
16561: LD_INT 23
16563: PUSH
16564: LD_INT 0
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: ST_TO_ADDR
// if not tmp then
16585: LD_VAR 0 2
16589: NOT
16590: IFFALSE 16594
// exit ;
16592: GO 16643
// for i in tmp do
16594: LD_ADDR_VAR 0 1
16598: PUSH
16599: LD_VAR 0 2
16603: PUSH
16604: FOR_IN
16605: IFFALSE 16641
// begin if Crawls ( i ) then
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 318
16616: IFFALSE 16627
// ComWalk ( i ) ;
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 138
// SetClass ( i , 2 ) ;
16627: LD_VAR 0 1
16631: PPUSH
16632: LD_INT 2
16634: PPUSH
16635: CALL_OW 336
// end ;
16639: GO 16604
16641: POP
16642: POP
// end ;
16643: PPOPN 2
16645: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16646: LD_EXP 24
16650: IFFALSE 16658
16652: PUSH
16653: LD_EXP 77
16657: AND
16658: IFFALSE 16948
16660: GO 16662
16662: DISABLE
16663: LD_INT 0
16665: PPUSH
16666: PPUSH
16667: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16668: LD_OWVAR 2
16672: PPUSH
16673: LD_INT 9
16675: PPUSH
16676: LD_INT 1
16678: PPUSH
16679: LD_INT 1
16681: PPUSH
16682: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16686: LD_INT 9
16688: PPUSH
16689: LD_OWVAR 2
16693: PPUSH
16694: CALL_OW 343
// uc_side := 9 ;
16698: LD_ADDR_OWVAR 20
16702: PUSH
16703: LD_INT 9
16705: ST_TO_ADDR
// uc_nation := 2 ;
16706: LD_ADDR_OWVAR 21
16710: PUSH
16711: LD_INT 2
16713: ST_TO_ADDR
// hc_name := Dark Warrior ;
16714: LD_ADDR_OWVAR 26
16718: PUSH
16719: LD_STRING Dark Warrior
16721: ST_TO_ADDR
// hc_gallery :=  ;
16722: LD_ADDR_OWVAR 33
16726: PUSH
16727: LD_STRING 
16729: ST_TO_ADDR
// hc_noskilllimit := true ;
16730: LD_ADDR_OWVAR 76
16734: PUSH
16735: LD_INT 1
16737: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16738: LD_ADDR_OWVAR 31
16742: PUSH
16743: LD_INT 30
16745: PUSH
16746: LD_INT 30
16748: PUSH
16749: LD_INT 30
16751: PUSH
16752: LD_INT 30
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: ST_TO_ADDR
// un := CreateHuman ;
16761: LD_ADDR_VAR 0 3
16765: PUSH
16766: CALL_OW 44
16770: ST_TO_ADDR
// hc_noskilllimit := false ;
16771: LD_ADDR_OWVAR 76
16775: PUSH
16776: LD_INT 0
16778: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16779: LD_VAR 0 3
16783: PPUSH
16784: LD_INT 1
16786: PPUSH
16787: CALL_OW 51
// ToLua ( playRanger() ) ;
16791: LD_STRING playRanger()
16793: PPUSH
16794: CALL_OW 559
// p := 0 ;
16798: LD_ADDR_VAR 0 2
16802: PUSH
16803: LD_INT 0
16805: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16806: LD_INT 35
16808: PPUSH
16809: CALL_OW 67
// p := p + 1 ;
16813: LD_ADDR_VAR 0 2
16817: PUSH
16818: LD_VAR 0 2
16822: PUSH
16823: LD_INT 1
16825: PLUS
16826: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16827: LD_VAR 0 3
16831: PPUSH
16832: CALL_OW 256
16836: PUSH
16837: LD_INT 1000
16839: LESS
16840: IFFALSE 16854
// SetLives ( un , 1000 ) ;
16842: LD_VAR 0 3
16846: PPUSH
16847: LD_INT 1000
16849: PPUSH
16850: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16854: LD_VAR 0 3
16858: PPUSH
16859: LD_INT 81
16861: PUSH
16862: LD_OWVAR 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 91
16873: PUSH
16874: LD_VAR 0 3
16878: PUSH
16879: LD_INT 30
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PPUSH
16891: CALL_OW 69
16895: PPUSH
16896: LD_VAR 0 3
16900: PPUSH
16901: CALL_OW 74
16905: PPUSH
16906: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16910: LD_VAR 0 2
16914: PUSH
16915: LD_INT 80
16917: GREATER
16918: IFTRUE 16931
16920: PUSH
16921: LD_VAR 0 3
16925: PPUSH
16926: CALL_OW 301
16930: OR
16931: IFFALSE 16806
// if un then
16933: LD_VAR 0 3
16937: IFFALSE 16948
// RemoveUnit ( un ) ;
16939: LD_VAR 0 3
16943: PPUSH
16944: CALL_OW 64
// end ;
16948: PPOPN 3
16950: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16951: LD_EXP 78
16955: IFFALSE 17071
16957: GO 16959
16959: DISABLE
16960: LD_INT 0
16962: PPUSH
16963: PPUSH
16964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16965: LD_ADDR_VAR 0 2
16969: PUSH
16970: LD_INT 81
16972: PUSH
16973: LD_OWVAR 2
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 21
16984: PUSH
16985: LD_INT 1
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PPUSH
16996: CALL_OW 69
17000: ST_TO_ADDR
// ToLua ( playComputer() ) ;
17001: LD_STRING playComputer()
17003: PPUSH
17004: CALL_OW 559
// if not tmp then
17008: LD_VAR 0 2
17012: NOT
17013: IFFALSE 17017
// exit ;
17015: GO 17071
// for i in tmp do
17017: LD_ADDR_VAR 0 1
17021: PUSH
17022: LD_VAR 0 2
17026: PUSH
17027: FOR_IN
17028: IFFALSE 17069
// for j := 1 to 4 do
17030: LD_ADDR_VAR 0 3
17034: PUSH
17035: DOUBLE
17036: LD_INT 1
17038: DEC
17039: ST_TO_ADDR
17040: LD_INT 4
17042: PUSH
17043: FOR_TO
17044: IFFALSE 17065
// SetSkill ( i , j , 10 ) ;
17046: LD_VAR 0 1
17050: PPUSH
17051: LD_VAR 0 3
17055: PPUSH
17056: LD_INT 10
17058: PPUSH
17059: CALL_OW 237
17063: GO 17043
17065: POP
17066: POP
17067: GO 17027
17069: POP
17070: POP
// end ;
17071: PPOPN 3
17073: END
// every 0 0$1 trigger s30 do var i , tmp ;
17074: LD_EXP 79
17078: IFFALSE 17147
17080: GO 17082
17082: DISABLE
17083: LD_INT 0
17085: PPUSH
17086: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17087: LD_ADDR_VAR 0 2
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_OWVAR 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PPUSH
17104: CALL_OW 69
17108: ST_TO_ADDR
// if not tmp then
17109: LD_VAR 0 2
17113: NOT
17114: IFFALSE 17118
// exit ;
17116: GO 17147
// for i in tmp do
17118: LD_ADDR_VAR 0 1
17122: PUSH
17123: LD_VAR 0 2
17127: PUSH
17128: FOR_IN
17129: IFFALSE 17145
// SetLives ( i , 300 ) ;
17131: LD_VAR 0 1
17135: PPUSH
17136: LD_INT 300
17138: PPUSH
17139: CALL_OW 234
17143: GO 17128
17145: POP
17146: POP
// end ;
17147: PPOPN 2
17149: END
// every 0 0$1 trigger s60 do var i , tmp ;
17150: LD_EXP 80
17154: IFFALSE 17223
17156: GO 17158
17158: DISABLE
17159: LD_INT 0
17161: PPUSH
17162: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17163: LD_ADDR_VAR 0 2
17167: PUSH
17168: LD_INT 22
17170: PUSH
17171: LD_OWVAR 2
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PPUSH
17180: CALL_OW 69
17184: ST_TO_ADDR
// if not tmp then
17185: LD_VAR 0 2
17189: NOT
17190: IFFALSE 17194
// exit ;
17192: GO 17223
// for i in tmp do
17194: LD_ADDR_VAR 0 1
17198: PUSH
17199: LD_VAR 0 2
17203: PUSH
17204: FOR_IN
17205: IFFALSE 17221
// SetLives ( i , 600 ) ;
17207: LD_VAR 0 1
17211: PPUSH
17212: LD_INT 600
17214: PPUSH
17215: CALL_OW 234
17219: GO 17204
17221: POP
17222: POP
// end ;
17223: PPOPN 2
17225: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17226: LD_INT 0
17228: PPUSH
// case cmd of 301 :
17229: LD_VAR 0 1
17233: PUSH
17234: LD_INT 301
17236: DOUBLE
17237: EQUAL
17238: IFTRUE 17242
17240: GO 17274
17242: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17243: LD_VAR 0 6
17247: PPUSH
17248: LD_VAR 0 7
17252: PPUSH
17253: LD_VAR 0 8
17257: PPUSH
17258: LD_VAR 0 4
17262: PPUSH
17263: LD_VAR 0 5
17267: PPUSH
17268: CALL 18487 0 5
17272: GO 17395
17274: LD_INT 302
17276: DOUBLE
17277: EQUAL
17278: IFTRUE 17282
17280: GO 17319
17282: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17283: LD_VAR 0 6
17287: PPUSH
17288: LD_VAR 0 7
17292: PPUSH
17293: LD_VAR 0 8
17297: PPUSH
17298: LD_VAR 0 9
17302: PPUSH
17303: LD_VAR 0 4
17307: PPUSH
17308: LD_VAR 0 5
17312: PPUSH
17313: CALL 18578 0 6
17317: GO 17395
17319: LD_INT 303
17321: DOUBLE
17322: EQUAL
17323: IFTRUE 17327
17325: GO 17364
17327: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17328: LD_VAR 0 6
17332: PPUSH
17333: LD_VAR 0 7
17337: PPUSH
17338: LD_VAR 0 8
17342: PPUSH
17343: LD_VAR 0 9
17347: PPUSH
17348: LD_VAR 0 4
17352: PPUSH
17353: LD_VAR 0 5
17357: PPUSH
17358: CALL 17400 0 6
17362: GO 17395
17364: LD_INT 304
17366: DOUBLE
17367: EQUAL
17368: IFTRUE 17372
17370: GO 17394
17372: POP
// hHackTeleport ( unit , x , y ) ; end ;
17373: LD_VAR 0 2
17377: PPUSH
17378: LD_VAR 0 4
17382: PPUSH
17383: LD_VAR 0 5
17387: PPUSH
17388: CALL 19171 0 3
17392: GO 17395
17394: POP
// end ;
17395: LD_VAR 0 12
17399: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17404: LD_VAR 0 1
17408: PUSH
17409: LD_INT 1
17411: LESS
17412: IFTRUE 17424
17414: PUSH
17415: LD_VAR 0 1
17419: PUSH
17420: LD_INT 3
17422: GREATER
17423: OR
17424: IFTRUE 17442
17426: PUSH
17427: LD_VAR 0 5
17431: PPUSH
17432: LD_VAR 0 6
17436: PPUSH
17437: CALL_OW 428
17441: OR
17442: IFFALSE 17446
// exit ;
17444: GO 18174
// uc_side := your_side ;
17446: LD_ADDR_OWVAR 20
17450: PUSH
17451: LD_OWVAR 2
17455: ST_TO_ADDR
// uc_nation := nation ;
17456: LD_ADDR_OWVAR 21
17460: PUSH
17461: LD_VAR 0 1
17465: ST_TO_ADDR
// bc_level = 1 ;
17466: LD_ADDR_OWVAR 43
17470: PUSH
17471: LD_INT 1
17473: ST_TO_ADDR
// case btype of 1 :
17474: LD_VAR 0 2
17478: PUSH
17479: LD_INT 1
17481: DOUBLE
17482: EQUAL
17483: IFTRUE 17487
17485: GO 17498
17487: POP
// bc_type := b_depot ; 2 :
17488: LD_ADDR_OWVAR 42
17492: PUSH
17493: LD_INT 0
17495: ST_TO_ADDR
17496: GO 18118
17498: LD_INT 2
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17517
17506: POP
// bc_type := b_warehouse ; 3 :
17507: LD_ADDR_OWVAR 42
17511: PUSH
17512: LD_INT 1
17514: ST_TO_ADDR
17515: GO 18118
17517: LD_INT 3
17519: DOUBLE
17520: EQUAL
17521: IFTRUE 17525
17523: GO 17536
17525: POP
// bc_type := b_lab ; 4 .. 9 :
17526: LD_ADDR_OWVAR 42
17530: PUSH
17531: LD_INT 6
17533: ST_TO_ADDR
17534: GO 18118
17536: LD_INT 4
17538: DOUBLE
17539: GREATEREQUAL
17540: IFFALSE 17548
17542: LD_INT 9
17544: DOUBLE
17545: LESSEQUAL
17546: IFTRUE 17550
17548: GO 17610
17550: POP
// begin bc_type := b_lab_half ;
17551: LD_ADDR_OWVAR 42
17555: PUSH
17556: LD_INT 7
17558: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17559: LD_ADDR_OWVAR 44
17563: PUSH
17564: LD_INT 10
17566: PUSH
17567: LD_INT 11
17569: PUSH
17570: LD_INT 12
17572: PUSH
17573: LD_INT 15
17575: PUSH
17576: LD_INT 14
17578: PUSH
17579: LD_INT 13
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: PUSH
17590: LD_VAR 0 2
17594: PUSH
17595: LD_INT 3
17597: MINUS
17598: ARRAY
17599: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17600: LD_ADDR_OWVAR 45
17604: PUSH
17605: LD_INT 9
17607: ST_TO_ADDR
// end ; 10 .. 13 :
17608: GO 18118
17610: LD_INT 10
17612: DOUBLE
17613: GREATEREQUAL
17614: IFFALSE 17622
17616: LD_INT 13
17618: DOUBLE
17619: LESSEQUAL
17620: IFTRUE 17624
17622: GO 17701
17624: POP
// begin bc_type := b_lab_full ;
17625: LD_ADDR_OWVAR 42
17629: PUSH
17630: LD_INT 8
17632: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17633: LD_ADDR_OWVAR 44
17637: PUSH
17638: LD_INT 10
17640: PUSH
17641: LD_INT 12
17643: PUSH
17644: LD_INT 14
17646: PUSH
17647: LD_INT 13
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: PUSH
17656: LD_VAR 0 2
17660: PUSH
17661: LD_INT 9
17663: MINUS
17664: ARRAY
17665: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17666: LD_ADDR_OWVAR 45
17670: PUSH
17671: LD_INT 11
17673: PUSH
17674: LD_INT 15
17676: PUSH
17677: LD_INT 12
17679: PUSH
17680: LD_INT 15
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: PUSH
17689: LD_VAR 0 2
17693: PUSH
17694: LD_INT 9
17696: MINUS
17697: ARRAY
17698: ST_TO_ADDR
// end ; 14 :
17699: GO 18118
17701: LD_INT 14
17703: DOUBLE
17704: EQUAL
17705: IFTRUE 17709
17707: GO 17720
17709: POP
// bc_type := b_workshop ; 15 :
17710: LD_ADDR_OWVAR 42
17714: PUSH
17715: LD_INT 2
17717: ST_TO_ADDR
17718: GO 18118
17720: LD_INT 15
17722: DOUBLE
17723: EQUAL
17724: IFTRUE 17728
17726: GO 17739
17728: POP
// bc_type := b_factory ; 16 :
17729: LD_ADDR_OWVAR 42
17733: PUSH
17734: LD_INT 3
17736: ST_TO_ADDR
17737: GO 18118
17739: LD_INT 16
17741: DOUBLE
17742: EQUAL
17743: IFTRUE 17747
17745: GO 17758
17747: POP
// bc_type := b_ext_gun ; 17 :
17748: LD_ADDR_OWVAR 42
17752: PUSH
17753: LD_INT 17
17755: ST_TO_ADDR
17756: GO 18118
17758: LD_INT 17
17760: DOUBLE
17761: EQUAL
17762: IFTRUE 17766
17764: GO 17794
17766: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17767: LD_ADDR_OWVAR 42
17771: PUSH
17772: LD_INT 19
17774: PUSH
17775: LD_INT 23
17777: PUSH
17778: LD_INT 19
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: LD_VAR 0 1
17790: ARRAY
17791: ST_TO_ADDR
17792: GO 18118
17794: LD_INT 18
17796: DOUBLE
17797: EQUAL
17798: IFTRUE 17802
17800: GO 17813
17802: POP
// bc_type := b_ext_radar ; 19 :
17803: LD_ADDR_OWVAR 42
17807: PUSH
17808: LD_INT 20
17810: ST_TO_ADDR
17811: GO 18118
17813: LD_INT 19
17815: DOUBLE
17816: EQUAL
17817: IFTRUE 17821
17819: GO 17832
17821: POP
// bc_type := b_ext_radio ; 20 :
17822: LD_ADDR_OWVAR 42
17826: PUSH
17827: LD_INT 22
17829: ST_TO_ADDR
17830: GO 18118
17832: LD_INT 20
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 17851
17840: POP
// bc_type := b_ext_siberium ; 21 :
17841: LD_ADDR_OWVAR 42
17845: PUSH
17846: LD_INT 21
17848: ST_TO_ADDR
17849: GO 18118
17851: LD_INT 21
17853: DOUBLE
17854: EQUAL
17855: IFTRUE 17859
17857: GO 17870
17859: POP
// bc_type := b_ext_computer ; 22 :
17860: LD_ADDR_OWVAR 42
17864: PUSH
17865: LD_INT 24
17867: ST_TO_ADDR
17868: GO 18118
17870: LD_INT 22
17872: DOUBLE
17873: EQUAL
17874: IFTRUE 17878
17876: GO 17889
17878: POP
// bc_type := b_ext_track ; 23 :
17879: LD_ADDR_OWVAR 42
17883: PUSH
17884: LD_INT 16
17886: ST_TO_ADDR
17887: GO 18118
17889: LD_INT 23
17891: DOUBLE
17892: EQUAL
17893: IFTRUE 17897
17895: GO 17908
17897: POP
// bc_type := b_ext_laser ; 24 :
17898: LD_ADDR_OWVAR 42
17902: PUSH
17903: LD_INT 25
17905: ST_TO_ADDR
17906: GO 18118
17908: LD_INT 24
17910: DOUBLE
17911: EQUAL
17912: IFTRUE 17916
17914: GO 17927
17916: POP
// bc_type := b_control_tower ; 25 :
17917: LD_ADDR_OWVAR 42
17921: PUSH
17922: LD_INT 36
17924: ST_TO_ADDR
17925: GO 18118
17927: LD_INT 25
17929: DOUBLE
17930: EQUAL
17931: IFTRUE 17935
17933: GO 17946
17935: POP
// bc_type := b_breastwork ; 26 :
17936: LD_ADDR_OWVAR 42
17940: PUSH
17941: LD_INT 31
17943: ST_TO_ADDR
17944: GO 18118
17946: LD_INT 26
17948: DOUBLE
17949: EQUAL
17950: IFTRUE 17954
17952: GO 17965
17954: POP
// bc_type := b_bunker ; 27 :
17955: LD_ADDR_OWVAR 42
17959: PUSH
17960: LD_INT 32
17962: ST_TO_ADDR
17963: GO 18118
17965: LD_INT 27
17967: DOUBLE
17968: EQUAL
17969: IFTRUE 17973
17971: GO 17984
17973: POP
// bc_type := b_turret ; 28 :
17974: LD_ADDR_OWVAR 42
17978: PUSH
17979: LD_INT 33
17981: ST_TO_ADDR
17982: GO 18118
17984: LD_INT 28
17986: DOUBLE
17987: EQUAL
17988: IFTRUE 17992
17990: GO 18003
17992: POP
// bc_type := b_armoury ; 29 :
17993: LD_ADDR_OWVAR 42
17997: PUSH
17998: LD_INT 4
18000: ST_TO_ADDR
18001: GO 18118
18003: LD_INT 29
18005: DOUBLE
18006: EQUAL
18007: IFTRUE 18011
18009: GO 18022
18011: POP
// bc_type := b_barracks ; 30 :
18012: LD_ADDR_OWVAR 42
18016: PUSH
18017: LD_INT 5
18019: ST_TO_ADDR
18020: GO 18118
18022: LD_INT 30
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18041
18030: POP
// bc_type := b_solar_power ; 31 :
18031: LD_ADDR_OWVAR 42
18035: PUSH
18036: LD_INT 27
18038: ST_TO_ADDR
18039: GO 18118
18041: LD_INT 31
18043: DOUBLE
18044: EQUAL
18045: IFTRUE 18049
18047: GO 18060
18049: POP
// bc_type := b_oil_power ; 32 :
18050: LD_ADDR_OWVAR 42
18054: PUSH
18055: LD_INT 26
18057: ST_TO_ADDR
18058: GO 18118
18060: LD_INT 32
18062: DOUBLE
18063: EQUAL
18064: IFTRUE 18068
18066: GO 18079
18068: POP
// bc_type := b_siberite_power ; 33 :
18069: LD_ADDR_OWVAR 42
18073: PUSH
18074: LD_INT 28
18076: ST_TO_ADDR
18077: GO 18118
18079: LD_INT 33
18081: DOUBLE
18082: EQUAL
18083: IFTRUE 18087
18085: GO 18098
18087: POP
// bc_type := b_oil_mine ; 34 :
18088: LD_ADDR_OWVAR 42
18092: PUSH
18093: LD_INT 29
18095: ST_TO_ADDR
18096: GO 18118
18098: LD_INT 34
18100: DOUBLE
18101: EQUAL
18102: IFTRUE 18106
18104: GO 18117
18106: POP
// bc_type := b_siberite_mine ; end ;
18107: LD_ADDR_OWVAR 42
18111: PUSH
18112: LD_INT 30
18114: ST_TO_ADDR
18115: GO 18118
18117: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
18118: LD_ADDR_VAR 0 8
18122: PUSH
18123: LD_VAR 0 5
18127: PPUSH
18128: LD_VAR 0 6
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: CALL_OW 47
18142: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
18143: LD_OWVAR 42
18147: PUSH
18148: LD_INT 32
18150: PUSH
18151: LD_INT 33
18153: PUSH
18154: EMPTY
18155: LIST
18156: LIST
18157: IN
18158: IFFALSE 18174
// PlaceWeaponTurret ( b , weapon ) ;
18160: LD_VAR 0 8
18164: PPUSH
18165: LD_VAR 0 4
18169: PPUSH
18170: CALL_OW 431
// end ;
18174: LD_VAR 0 7
18178: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18179: LD_INT 0
18181: PPUSH
18182: PPUSH
18183: PPUSH
18184: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18185: LD_ADDR_VAR 0 4
18189: PUSH
18190: LD_INT 22
18192: PUSH
18193: LD_OWVAR 2
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: PUSH
18202: LD_INT 2
18204: PUSH
18205: LD_INT 30
18207: PUSH
18208: LD_INT 0
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: LD_INT 30
18217: PUSH
18218: LD_INT 1
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: LIST
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PPUSH
18234: CALL_OW 69
18238: ST_TO_ADDR
// if not tmp then
18239: LD_VAR 0 4
18243: NOT
18244: IFFALSE 18248
// exit ;
18246: GO 18307
// for i in tmp do
18248: LD_ADDR_VAR 0 2
18252: PUSH
18253: LD_VAR 0 4
18257: PUSH
18258: FOR_IN
18259: IFFALSE 18305
// for j = 1 to 3 do
18261: LD_ADDR_VAR 0 3
18265: PUSH
18266: DOUBLE
18267: LD_INT 1
18269: DEC
18270: ST_TO_ADDR
18271: LD_INT 3
18273: PUSH
18274: FOR_TO
18275: IFFALSE 18301
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18277: LD_VAR 0 2
18281: PPUSH
18282: CALL_OW 274
18286: PPUSH
18287: LD_VAR 0 3
18291: PPUSH
18292: LD_INT 99999
18294: PPUSH
18295: CALL_OW 277
18299: GO 18274
18301: POP
18302: POP
18303: GO 18258
18305: POP
18306: POP
// end ;
18307: LD_VAR 0 1
18311: RET
// export function hHackSetLevel10 ; var i , j ; begin
18312: LD_INT 0
18314: PPUSH
18315: PPUSH
18316: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18317: LD_ADDR_VAR 0 2
18321: PUSH
18322: LD_INT 21
18324: PUSH
18325: LD_INT 1
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: PUSH
18337: FOR_IN
18338: IFFALSE 18390
// if IsSelected ( i ) then
18340: LD_VAR 0 2
18344: PPUSH
18345: CALL_OW 306
18349: IFFALSE 18388
// begin for j := 1 to 4 do
18351: LD_ADDR_VAR 0 3
18355: PUSH
18356: DOUBLE
18357: LD_INT 1
18359: DEC
18360: ST_TO_ADDR
18361: LD_INT 4
18363: PUSH
18364: FOR_TO
18365: IFFALSE 18386
// SetSkill ( i , j , 10 ) ;
18367: LD_VAR 0 2
18371: PPUSH
18372: LD_VAR 0 3
18376: PPUSH
18377: LD_INT 10
18379: PPUSH
18380: CALL_OW 237
18384: GO 18364
18386: POP
18387: POP
// end ;
18388: GO 18337
18390: POP
18391: POP
// end ;
18392: LD_VAR 0 1
18396: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18397: LD_INT 0
18399: PPUSH
18400: PPUSH
18401: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18402: LD_ADDR_VAR 0 2
18406: PUSH
18407: LD_INT 22
18409: PUSH
18410: LD_OWVAR 2
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 21
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: PUSH
18438: FOR_IN
18439: IFFALSE 18480
// begin for j := 1 to 4 do
18441: LD_ADDR_VAR 0 3
18445: PUSH
18446: DOUBLE
18447: LD_INT 1
18449: DEC
18450: ST_TO_ADDR
18451: LD_INT 4
18453: PUSH
18454: FOR_TO
18455: IFFALSE 18476
// SetSkill ( i , j , 10 ) ;
18457: LD_VAR 0 2
18461: PPUSH
18462: LD_VAR 0 3
18466: PPUSH
18467: LD_INT 10
18469: PPUSH
18470: CALL_OW 237
18474: GO 18454
18476: POP
18477: POP
// end ;
18478: GO 18438
18480: POP
18481: POP
// end ;
18482: LD_VAR 0 1
18486: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18487: LD_INT 0
18489: PPUSH
// uc_side := your_side ;
18490: LD_ADDR_OWVAR 20
18494: PUSH
18495: LD_OWVAR 2
18499: ST_TO_ADDR
// uc_nation := nation ;
18500: LD_ADDR_OWVAR 21
18504: PUSH
18505: LD_VAR 0 1
18509: ST_TO_ADDR
// InitHc ;
18510: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18514: LD_INT 0
18516: PPUSH
18517: LD_VAR 0 2
18521: PPUSH
18522: LD_VAR 0 3
18526: PPUSH
18527: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18531: LD_VAR 0 4
18535: PPUSH
18536: LD_VAR 0 5
18540: PPUSH
18541: CALL_OW 428
18545: PUSH
18546: LD_INT 0
18548: EQUAL
18549: IFFALSE 18573
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18551: CALL_OW 44
18555: PPUSH
18556: LD_VAR 0 4
18560: PPUSH
18561: LD_VAR 0 5
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: CALL_OW 48
// end ;
18573: LD_VAR 0 6
18577: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18578: LD_INT 0
18580: PPUSH
18581: PPUSH
// uc_side := your_side ;
18582: LD_ADDR_OWVAR 20
18586: PUSH
18587: LD_OWVAR 2
18591: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18592: LD_VAR 0 1
18596: PUSH
18597: LD_INT 1
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: LD_INT 3
18605: PUSH
18606: LD_INT 4
18608: PUSH
18609: LD_INT 5
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: IN
18619: IFFALSE 18631
// uc_nation := nation_american else
18621: LD_ADDR_OWVAR 21
18625: PUSH
18626: LD_INT 1
18628: ST_TO_ADDR
18629: GO 18674
// if chassis in [ 11 , 12 , 13 , 14 ] then
18631: LD_VAR 0 1
18635: PUSH
18636: LD_INT 11
18638: PUSH
18639: LD_INT 12
18641: PUSH
18642: LD_INT 13
18644: PUSH
18645: LD_INT 14
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: IN
18654: IFFALSE 18666
// uc_nation := nation_arabian else
18656: LD_ADDR_OWVAR 21
18660: PUSH
18661: LD_INT 2
18663: ST_TO_ADDR
18664: GO 18674
// uc_nation := nation_russian ;
18666: LD_ADDR_OWVAR 21
18670: PUSH
18671: LD_INT 3
18673: ST_TO_ADDR
// vc_chassis := chassis ;
18674: LD_ADDR_OWVAR 37
18678: PUSH
18679: LD_VAR 0 1
18683: ST_TO_ADDR
// vc_engine := engine ;
18684: LD_ADDR_OWVAR 39
18688: PUSH
18689: LD_VAR 0 2
18693: ST_TO_ADDR
// vc_control := control ;
18694: LD_ADDR_OWVAR 38
18698: PUSH
18699: LD_VAR 0 3
18703: ST_TO_ADDR
// vc_weapon := weapon ;
18704: LD_ADDR_OWVAR 40
18708: PUSH
18709: LD_VAR 0 4
18713: ST_TO_ADDR
// un := CreateVehicle ;
18714: LD_ADDR_VAR 0 8
18718: PUSH
18719: CALL_OW 45
18723: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18724: LD_VAR 0 8
18728: PPUSH
18729: LD_INT 0
18731: PPUSH
18732: LD_INT 5
18734: PPUSH
18735: CALL_OW 12
18739: PPUSH
18740: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18744: LD_VAR 0 8
18748: PPUSH
18749: LD_VAR 0 5
18753: PPUSH
18754: LD_VAR 0 6
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: CALL_OW 48
// end ;
18766: LD_VAR 0 7
18770: RET
// export hInvincible ; every 1 do
18771: GO 18773
18773: DISABLE
// hInvincible := [ ] ;
18774: LD_ADDR_EXP 81
18778: PUSH
18779: EMPTY
18780: ST_TO_ADDR
18781: END
// every 10 do var i ;
18782: GO 18784
18784: DISABLE
18785: LD_INT 0
18787: PPUSH
// begin enable ;
18788: ENABLE
// if not hInvincible then
18789: LD_EXP 81
18793: NOT
18794: IFFALSE 18798
// exit ;
18796: GO 18842
// for i in hInvincible do
18798: LD_ADDR_VAR 0 1
18802: PUSH
18803: LD_EXP 81
18807: PUSH
18808: FOR_IN
18809: IFFALSE 18840
// if GetLives ( i ) < 1000 then
18811: LD_VAR 0 1
18815: PPUSH
18816: CALL_OW 256
18820: PUSH
18821: LD_INT 1000
18823: LESS
18824: IFFALSE 18838
// SetLives ( i , 1000 ) ;
18826: LD_VAR 0 1
18830: PPUSH
18831: LD_INT 1000
18833: PPUSH
18834: CALL_OW 234
18838: GO 18808
18840: POP
18841: POP
// end ;
18842: PPOPN 1
18844: END
// export function hHackInvincible ; var i ; begin
18845: LD_INT 0
18847: PPUSH
18848: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_INT 2
18856: PUSH
18857: LD_INT 21
18859: PUSH
18860: LD_INT 1
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 21
18869: PUSH
18870: LD_INT 2
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 69
18886: PUSH
18887: FOR_IN
18888: IFFALSE 18949
// if IsSelected ( i ) then
18890: LD_VAR 0 2
18894: PPUSH
18895: CALL_OW 306
18899: IFFALSE 18947
// begin if i in hInvincible then
18901: LD_VAR 0 2
18905: PUSH
18906: LD_EXP 81
18910: IN
18911: IFFALSE 18931
// hInvincible := hInvincible diff i else
18913: LD_ADDR_EXP 81
18917: PUSH
18918: LD_EXP 81
18922: PUSH
18923: LD_VAR 0 2
18927: DIFF
18928: ST_TO_ADDR
18929: GO 18947
// hInvincible := hInvincible union i ;
18931: LD_ADDR_EXP 81
18935: PUSH
18936: LD_EXP 81
18940: PUSH
18941: LD_VAR 0 2
18945: UNION
18946: ST_TO_ADDR
// end ;
18947: GO 18887
18949: POP
18950: POP
// end ;
18951: LD_VAR 0 1
18955: RET
// export function hHackInvisible ; var i , j ; begin
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
18960: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18961: LD_ADDR_VAR 0 2
18965: PUSH
18966: LD_INT 21
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: PUSH
18981: FOR_IN
18982: IFFALSE 19006
// if IsSelected ( i ) then
18984: LD_VAR 0 2
18988: PPUSH
18989: CALL_OW 306
18993: IFFALSE 19004
// ComForceInvisible ( i ) ;
18995: LD_VAR 0 2
18999: PPUSH
19000: CALL_OW 496
19004: GO 18981
19006: POP
19007: POP
// end ;
19008: LD_VAR 0 1
19012: RET
// export function hHackChangeYourSide ; begin
19013: LD_INT 0
19015: PPUSH
// if your_side = 8 then
19016: LD_OWVAR 2
19020: PUSH
19021: LD_INT 8
19023: EQUAL
19024: IFFALSE 19036
// your_side := 0 else
19026: LD_ADDR_OWVAR 2
19030: PUSH
19031: LD_INT 0
19033: ST_TO_ADDR
19034: GO 19050
// your_side := your_side + 1 ;
19036: LD_ADDR_OWVAR 2
19040: PUSH
19041: LD_OWVAR 2
19045: PUSH
19046: LD_INT 1
19048: PLUS
19049: ST_TO_ADDR
// end ;
19050: LD_VAR 0 1
19054: RET
// export function hHackChangeUnitSide ; var i , j ; begin
19055: LD_INT 0
19057: PPUSH
19058: PPUSH
19059: PPUSH
// for i in all_units do
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_OWVAR 3
19069: PUSH
19070: FOR_IN
19071: IFFALSE 19149
// if IsSelected ( i ) then
19073: LD_VAR 0 2
19077: PPUSH
19078: CALL_OW 306
19082: IFFALSE 19147
// begin j := GetSide ( i ) ;
19084: LD_ADDR_VAR 0 3
19088: PUSH
19089: LD_VAR 0 2
19093: PPUSH
19094: CALL_OW 255
19098: ST_TO_ADDR
// if j = 8 then
19099: LD_VAR 0 3
19103: PUSH
19104: LD_INT 8
19106: EQUAL
19107: IFFALSE 19119
// j := 0 else
19109: LD_ADDR_VAR 0 3
19113: PUSH
19114: LD_INT 0
19116: ST_TO_ADDR
19117: GO 19133
// j := j + 1 ;
19119: LD_ADDR_VAR 0 3
19123: PUSH
19124: LD_VAR 0 3
19128: PUSH
19129: LD_INT 1
19131: PLUS
19132: ST_TO_ADDR
// SetSide ( i , j ) ;
19133: LD_VAR 0 2
19137: PPUSH
19138: LD_VAR 0 3
19142: PPUSH
19143: CALL_OW 235
// end ;
19147: GO 19070
19149: POP
19150: POP
// end ;
19151: LD_VAR 0 1
19155: RET
// export function hHackFog ; begin
19156: LD_INT 0
19158: PPUSH
// FogOff ( true ) ;
19159: LD_INT 1
19161: PPUSH
19162: CALL_OW 344
// end ;
19166: LD_VAR 0 1
19170: RET
// export function hHackTeleport ( unit , x , y ) ; begin
19171: LD_INT 0
19173: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19174: LD_VAR 0 1
19178: PPUSH
19179: LD_VAR 0 2
19183: PPUSH
19184: LD_VAR 0 3
19188: PPUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_INT 1
19194: PPUSH
19195: CALL_OW 483
// CenterOnXY ( x , y ) ;
19199: LD_VAR 0 2
19203: PPUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: CALL_OW 84
// end ;
19213: LD_VAR 0 4
19217: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19218: LD_INT 0
19220: PPUSH
19221: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19222: LD_VAR 0 1
19226: NOT
19227: IFTRUE 19246
19229: PUSH
19230: LD_VAR 0 2
19234: PPUSH
19235: LD_VAR 0 3
19239: PPUSH
19240: CALL_OW 488
19244: NOT
19245: OR
19246: IFTRUE 19281
19248: PUSH
19249: LD_VAR 0 1
19253: PPUSH
19254: CALL_OW 266
19258: PUSH
19259: LD_INT 3
19261: NONEQUAL
19262: IFFALSE 19280
19264: PUSH
19265: LD_VAR 0 1
19269: PPUSH
19270: CALL_OW 247
19274: PUSH
19275: LD_INT 1
19277: EQUAL
19278: NOT
19279: AND
19280: OR
19281: IFFALSE 19285
// exit ;
19283: GO 19567
// if GetType ( factory ) = unit_human then
19285: LD_VAR 0 1
19289: PPUSH
19290: CALL_OW 247
19294: PUSH
19295: LD_INT 1
19297: EQUAL
19298: IFFALSE 19315
// factory := IsInUnit ( factory ) ;
19300: LD_ADDR_VAR 0 1
19304: PUSH
19305: LD_VAR 0 1
19309: PPUSH
19310: CALL_OW 310
19314: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19315: LD_VAR 0 1
19319: PPUSH
19320: CALL_OW 266
19324: PUSH
19325: LD_INT 3
19327: NONEQUAL
19328: IFFALSE 19332
// exit ;
19330: GO 19567
// for i := 1 to Count ( factoryWaypoints ) do
19332: LD_ADDR_VAR 0 5
19336: PUSH
19337: DOUBLE
19338: LD_INT 1
19340: DEC
19341: ST_TO_ADDR
19342: LD_EXP 82
19346: PPUSH
19347: CALL 29534 0 1
19351: PUSH
19352: FOR_TO
19353: IFFALSE 19515
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
19355: LD_VAR 0 2
19359: PPUSH
19360: LD_VAR 0 3
19364: PPUSH
19365: CALL_OW 428
19369: PUSH
19370: LD_EXP 82
19374: PUSH
19375: LD_VAR 0 5
19379: ARRAY
19380: PUSH
19381: LD_INT 2
19383: ARRAY
19384: EQUAL
19385: IFFALSE 19417
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19387: LD_ADDR_EXP 82
19391: PUSH
19392: LD_EXP 82
19396: PPUSH
19397: LD_VAR 0 5
19401: PPUSH
19402: CALL_OW 3
19406: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19407: CALL 19572 0 0
// exit ;
19411: POP
19412: POP
19413: GO 19567
// end else
19415: GO 19513
// if factory = factoryWaypoints [ i ] [ 2 ] then
19417: LD_VAR 0 1
19421: PUSH
19422: LD_EXP 82
19426: PUSH
19427: LD_VAR 0 5
19431: ARRAY
19432: PUSH
19433: LD_INT 2
19435: ARRAY
19436: EQUAL
19437: IFFALSE 19513
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
19439: LD_ADDR_EXP 82
19443: PUSH
19444: LD_EXP 82
19448: PPUSH
19449: LD_VAR 0 5
19453: PPUSH
19454: CALL_OW 3
19458: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19459: LD_ADDR_EXP 82
19463: PUSH
19464: LD_EXP 82
19468: PPUSH
19469: LD_VAR 0 1
19473: PPUSH
19474: CALL_OW 255
19478: PUSH
19479: LD_VAR 0 1
19483: PUSH
19484: LD_VAR 0 2
19488: PUSH
19489: LD_VAR 0 3
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL 65510 0 2
19504: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19505: CALL 19572 0 0
// exit ;
19509: POP
19510: POP
19511: GO 19567
// end ; end ;
19513: GO 19352
19515: POP
19516: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19517: LD_ADDR_EXP 82
19521: PUSH
19522: LD_EXP 82
19526: PPUSH
19527: LD_VAR 0 1
19531: PPUSH
19532: CALL_OW 255
19536: PUSH
19537: LD_VAR 0 1
19541: PUSH
19542: LD_VAR 0 2
19546: PUSH
19547: LD_VAR 0 3
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL 65510 0 2
19562: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19563: CALL 19572 0 0
// end ;
19567: LD_VAR 0 4
19571: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19572: LD_INT 0
19574: PPUSH
19575: PPUSH
19576: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19577: LD_STRING resetFactoryWaypoint();
19579: PPUSH
19580: CALL_OW 559
// if factoryWaypoints then
19584: LD_EXP 82
19588: IFFALSE 19709
// begin list := factoryWaypoints ;
19590: LD_ADDR_VAR 0 3
19594: PUSH
19595: LD_EXP 82
19599: ST_TO_ADDR
// for i := 1 to list do
19600: LD_ADDR_VAR 0 2
19604: PUSH
19605: DOUBLE
19606: LD_INT 1
19608: DEC
19609: ST_TO_ADDR
19610: LD_VAR 0 3
19614: PUSH
19615: FOR_TO
19616: IFFALSE 19707
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19618: LD_STRING setFactoryWaypointXY(
19620: PUSH
19621: LD_VAR 0 3
19625: PUSH
19626: LD_VAR 0 2
19630: ARRAY
19631: PUSH
19632: LD_INT 1
19634: ARRAY
19635: STR
19636: PUSH
19637: LD_STRING ,
19639: STR
19640: PUSH
19641: LD_VAR 0 3
19645: PUSH
19646: LD_VAR 0 2
19650: ARRAY
19651: PUSH
19652: LD_INT 2
19654: ARRAY
19655: STR
19656: PUSH
19657: LD_STRING ,
19659: STR
19660: PUSH
19661: LD_VAR 0 3
19665: PUSH
19666: LD_VAR 0 2
19670: ARRAY
19671: PUSH
19672: LD_INT 3
19674: ARRAY
19675: STR
19676: PUSH
19677: LD_STRING ,
19679: STR
19680: PUSH
19681: LD_VAR 0 3
19685: PUSH
19686: LD_VAR 0 2
19690: ARRAY
19691: PUSH
19692: LD_INT 4
19694: ARRAY
19695: STR
19696: PUSH
19697: LD_STRING )
19699: STR
19700: PPUSH
19701: CALL_OW 559
19705: GO 19615
19707: POP
19708: POP
// end ; end ;
19709: LD_VAR 0 1
19713: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19714: LD_INT 0
19716: PPUSH
// if HexInfo ( x , y ) = warehouse then
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_VAR 0 3
19726: PPUSH
19727: CALL_OW 428
19731: PUSH
19732: LD_VAR 0 1
19736: EQUAL
19737: IFFALSE 19764
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19739: LD_ADDR_EXP 84
19743: PUSH
19744: LD_EXP 84
19748: PPUSH
19749: LD_VAR 0 1
19753: PPUSH
19754: LD_INT 0
19756: PPUSH
19757: CALL_OW 1
19761: ST_TO_ADDR
19762: GO 19815
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19764: LD_ADDR_EXP 84
19768: PUSH
19769: LD_EXP 84
19773: PPUSH
19774: LD_VAR 0 1
19778: PPUSH
19779: LD_VAR 0 1
19783: PPUSH
19784: CALL_OW 255
19788: PUSH
19789: LD_VAR 0 1
19793: PUSH
19794: LD_VAR 0 2
19798: PUSH
19799: LD_VAR 0 3
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL_OW 1
19814: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19815: CALL 19824 0 0
// end ;
19819: LD_VAR 0 4
19823: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19824: LD_INT 0
19826: PPUSH
19827: PPUSH
19828: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19829: LD_STRING resetWarehouseGatheringPoints();
19831: PPUSH
19832: CALL_OW 559
// if warehouseGatheringPoints then
19836: LD_EXP 84
19840: IFFALSE 19966
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19842: LD_ADDR_VAR 0 3
19846: PUSH
19847: LD_EXP 84
19851: PPUSH
19852: CALL 69444 0 1
19856: ST_TO_ADDR
// for i := 1 to list do
19857: LD_ADDR_VAR 0 2
19861: PUSH
19862: DOUBLE
19863: LD_INT 1
19865: DEC
19866: ST_TO_ADDR
19867: LD_VAR 0 3
19871: PUSH
19872: FOR_TO
19873: IFFALSE 19964
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19875: LD_STRING setWarehouseGatheringPointXY(
19877: PUSH
19878: LD_VAR 0 3
19882: PUSH
19883: LD_VAR 0 2
19887: ARRAY
19888: PUSH
19889: LD_INT 1
19891: ARRAY
19892: STR
19893: PUSH
19894: LD_STRING ,
19896: STR
19897: PUSH
19898: LD_VAR 0 3
19902: PUSH
19903: LD_VAR 0 2
19907: ARRAY
19908: PUSH
19909: LD_INT 2
19911: ARRAY
19912: STR
19913: PUSH
19914: LD_STRING ,
19916: STR
19917: PUSH
19918: LD_VAR 0 3
19922: PUSH
19923: LD_VAR 0 2
19927: ARRAY
19928: PUSH
19929: LD_INT 3
19931: ARRAY
19932: STR
19933: PUSH
19934: LD_STRING ,
19936: STR
19937: PUSH
19938: LD_VAR 0 3
19942: PUSH
19943: LD_VAR 0 2
19947: ARRAY
19948: PUSH
19949: LD_INT 4
19951: ARRAY
19952: STR
19953: PUSH
19954: LD_STRING )
19956: STR
19957: PPUSH
19958: CALL_OW 559
19962: GO 19872
19964: POP
19965: POP
// end ; end ;
19966: LD_VAR 0 1
19970: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19971: LD_EXP 84
19975: IFFALSE 20670
19977: GO 19979
19979: DISABLE
19980: LD_INT 0
19982: PPUSH
19983: PPUSH
19984: PPUSH
19985: PPUSH
19986: PPUSH
19987: PPUSH
19988: PPUSH
19989: PPUSH
19990: PPUSH
// begin enable ;
19991: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19992: LD_ADDR_VAR 0 3
19996: PUSH
19997: LD_EXP 84
20001: PPUSH
20002: CALL 69444 0 1
20006: ST_TO_ADDR
// if not list then
20007: LD_VAR 0 3
20011: NOT
20012: IFFALSE 20016
// exit ;
20014: GO 20670
// for i := 1 to list do
20016: LD_ADDR_VAR 0 1
20020: PUSH
20021: DOUBLE
20022: LD_INT 1
20024: DEC
20025: ST_TO_ADDR
20026: LD_VAR 0 3
20030: PUSH
20031: FOR_TO
20032: IFFALSE 20668
// begin depot := list [ i ] [ 2 ] ;
20034: LD_ADDR_VAR 0 8
20038: PUSH
20039: LD_VAR 0 3
20043: PUSH
20044: LD_VAR 0 1
20048: ARRAY
20049: PUSH
20050: LD_INT 2
20052: ARRAY
20053: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
20054: LD_ADDR_VAR 0 5
20058: PUSH
20059: LD_VAR 0 3
20063: PUSH
20064: LD_VAR 0 1
20068: ARRAY
20069: PUSH
20070: LD_INT 1
20072: ARRAY
20073: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
20074: LD_VAR 0 8
20078: PPUSH
20079: CALL_OW 301
20083: IFTRUE 20102
20085: PUSH
20086: LD_VAR 0 5
20090: PUSH
20091: LD_VAR 0 8
20095: PPUSH
20096: CALL_OW 255
20100: NONEQUAL
20101: OR
20102: IFFALSE 20131
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
20104: LD_ADDR_EXP 84
20108: PUSH
20109: LD_EXP 84
20113: PPUSH
20114: LD_VAR 0 8
20118: PPUSH
20119: LD_INT 0
20121: PPUSH
20122: CALL_OW 1
20126: ST_TO_ADDR
// exit ;
20127: POP
20128: POP
20129: GO 20670
// end ; x := list [ i ] [ 3 ] ;
20131: LD_ADDR_VAR 0 6
20135: PUSH
20136: LD_VAR 0 3
20140: PUSH
20141: LD_VAR 0 1
20145: ARRAY
20146: PUSH
20147: LD_INT 3
20149: ARRAY
20150: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
20151: LD_ADDR_VAR 0 7
20155: PUSH
20156: LD_VAR 0 3
20160: PUSH
20161: LD_VAR 0 1
20165: ARRAY
20166: PUSH
20167: LD_INT 4
20169: ARRAY
20170: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
20171: LD_ADDR_VAR 0 9
20175: PUSH
20176: LD_VAR 0 6
20180: PPUSH
20181: LD_VAR 0 7
20185: PPUSH
20186: LD_INT 16
20188: PPUSH
20189: CALL 68018 0 3
20193: ST_TO_ADDR
// if not cratesNearbyPoint then
20194: LD_VAR 0 9
20198: NOT
20199: IFFALSE 20205
// exit ;
20201: POP
20202: POP
20203: GO 20670
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
20205: LD_ADDR_VAR 0 4
20209: PUSH
20210: LD_INT 22
20212: PUSH
20213: LD_VAR 0 5
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 3
20224: PUSH
20225: LD_INT 60
20227: PUSH
20228: EMPTY
20229: LIST
20230: PUSH
20231: EMPTY
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 91
20237: PUSH
20238: LD_VAR 0 8
20242: PUSH
20243: LD_INT 6
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 2
20253: PUSH
20254: LD_INT 25
20256: PUSH
20257: LD_INT 2
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: LD_INT 25
20266: PUSH
20267: LD_INT 16
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: PPUSH
20285: CALL_OW 69
20289: PUSH
20290: LD_VAR 0 8
20294: PPUSH
20295: CALL_OW 313
20299: PPUSH
20300: LD_INT 3
20302: PUSH
20303: LD_INT 60
20305: PUSH
20306: EMPTY
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 2
20315: PUSH
20316: LD_INT 25
20318: PUSH
20319: LD_INT 2
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: PUSH
20326: LD_INT 25
20328: PUSH
20329: LD_INT 16
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: LIST
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 72
20349: UNION
20350: ST_TO_ADDR
// if tmp then
20351: LD_VAR 0 4
20355: IFFALSE 20435
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20357: LD_ADDR_VAR 0 4
20361: PUSH
20362: LD_VAR 0 4
20366: PPUSH
20367: LD_INT 3
20369: PPUSH
20370: CALL 65825 0 2
20374: ST_TO_ADDR
// for j in tmp do
20375: LD_ADDR_VAR 0 2
20379: PUSH
20380: LD_VAR 0 4
20384: PUSH
20385: FOR_IN
20386: IFFALSE 20429
// begin if IsInUnit ( j ) then
20388: LD_VAR 0 2
20392: PPUSH
20393: CALL_OW 310
20397: IFFALSE 20408
// ComExit ( j ) ;
20399: LD_VAR 0 2
20403: PPUSH
20404: CALL 65908 0 1
// AddComCollect ( j , x , y ) ;
20408: LD_VAR 0 2
20412: PPUSH
20413: LD_VAR 0 6
20417: PPUSH
20418: LD_VAR 0 7
20422: PPUSH
20423: CALL_OW 177
// end ;
20427: GO 20385
20429: POP
20430: POP
// exit ;
20431: POP
20432: POP
20433: GO 20670
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20435: LD_ADDR_VAR 0 4
20439: PUSH
20440: LD_INT 22
20442: PUSH
20443: LD_VAR 0 5
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 91
20454: PUSH
20455: LD_VAR 0 8
20459: PUSH
20460: LD_INT 8
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: LIST
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: LD_INT 34
20473: PUSH
20474: LD_INT 12
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 34
20483: PUSH
20484: LD_INT 51
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 34
20493: PUSH
20494: LD_INT 32
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 34
20503: PUSH
20504: LD_INT 89
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: PPUSH
20523: CALL_OW 69
20527: ST_TO_ADDR
// if tmp then
20528: LD_VAR 0 4
20532: IFFALSE 20666
// begin for j in tmp do
20534: LD_ADDR_VAR 0 2
20538: PUSH
20539: LD_VAR 0 4
20543: PUSH
20544: FOR_IN
20545: IFFALSE 20664
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20547: LD_VAR 0 2
20551: PPUSH
20552: CALL_OW 262
20556: PUSH
20557: LD_INT 3
20559: EQUAL
20560: IFTRUE 20577
20562: PUSH
20563: LD_VAR 0 2
20567: PPUSH
20568: CALL_OW 261
20572: PUSH
20573: LD_INT 20
20575: GREATER
20576: OR
20577: IFFALSE 20591
20579: PUSH
20580: LD_VAR 0 2
20584: PPUSH
20585: CALL_OW 314
20589: NOT
20590: AND
20591: IFFALSE 20621
20593: PUSH
20594: LD_VAR 0 2
20598: PPUSH
20599: CALL_OW 263
20603: PUSH
20604: LD_INT 1
20606: NONEQUAL
20607: IFTRUE 20620
20609: PUSH
20610: LD_VAR 0 2
20614: PPUSH
20615: CALL_OW 311
20619: OR
20620: AND
20621: IFFALSE 20662
// begin ComCollect ( j , x , y ) ;
20623: LD_VAR 0 2
20627: PPUSH
20628: LD_VAR 0 6
20632: PPUSH
20633: LD_VAR 0 7
20637: PPUSH
20638: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20642: LD_VAR 0 2
20646: PPUSH
20647: LD_VAR 0 8
20651: PPUSH
20652: CALL_OW 172
// exit ;
20656: POP
20657: POP
20658: POP
20659: POP
20660: GO 20670
// end ;
20662: GO 20544
20664: POP
20665: POP
// end ; end ;
20666: GO 20031
20668: POP
20669: POP
// end ; end_of_file
20670: PPOPN 9
20672: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20673: LD_VAR 0 1
20677: PUSH
20678: LD_INT 200
20680: DOUBLE
20681: GREATEREQUAL
20682: IFFALSE 20690
20684: LD_INT 299
20686: DOUBLE
20687: LESSEQUAL
20688: IFTRUE 20692
20690: GO 20724
20692: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20693: LD_VAR 0 1
20697: PPUSH
20698: LD_VAR 0 2
20702: PPUSH
20703: LD_VAR 0 3
20707: PPUSH
20708: LD_VAR 0 4
20712: PPUSH
20713: LD_VAR 0 5
20717: PPUSH
20718: CALL 21586 0 5
20722: GO 20801
20724: LD_INT 300
20726: DOUBLE
20727: GREATEREQUAL
20728: IFFALSE 20736
20730: LD_INT 399
20732: DOUBLE
20733: LESSEQUAL
20734: IFTRUE 20738
20736: GO 20800
20738: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20739: LD_VAR 0 1
20743: PPUSH
20744: LD_VAR 0 2
20748: PPUSH
20749: LD_VAR 0 3
20753: PPUSH
20754: LD_VAR 0 4
20758: PPUSH
20759: LD_VAR 0 5
20763: PPUSH
20764: LD_VAR 0 6
20768: PPUSH
20769: LD_VAR 0 7
20773: PPUSH
20774: LD_VAR 0 8
20778: PPUSH
20779: LD_VAR 0 9
20783: PPUSH
20784: LD_VAR 0 10
20788: PPUSH
20789: LD_VAR 0 11
20793: PPUSH
20794: CALL 17226 0 11
20798: GO 20801
20800: POP
// end ;
20801: PPOPN 11
20803: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20804: LD_VAR 0 1
20808: PPUSH
20809: LD_VAR 0 2
20813: PPUSH
20814: LD_VAR 0 3
20818: PPUSH
20819: LD_VAR 0 4
20823: PPUSH
20824: LD_VAR 0 5
20828: PPUSH
20829: CALL 20886 0 5
// end ; end_of_file
20833: PPOPN 5
20835: END
// export function SOS_UnitDestroyed ( un ) ; begin
20836: LD_INT 0
20838: PPUSH
// ComRadiation ( un ) ;
20839: LD_VAR 0 1
20843: PPUSH
20844: CALL 22006 0 1
// end ;
20848: LD_VAR 0 2
20852: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20853: LD_INT 0
20855: PPUSH
// ComRadiation ( un ) ;
20856: LD_VAR 0 1
20860: PPUSH
20861: CALL 22006 0 1
// end ;
20865: LD_VAR 0 2
20869: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20870: LD_INT 0
20872: PPUSH
// end ;
20873: LD_VAR 0 4
20877: RET
// export function SOS_Command ( cmd ) ; begin
20878: LD_INT 0
20880: PPUSH
// end ;
20881: LD_VAR 0 2
20885: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20886: LD_INT 0
20888: PPUSH
// end ;
20889: LD_VAR 0 6
20893: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
20894: LD_INT 0
20896: PPUSH
20897: PPUSH
20898: PPUSH
20899: PPUSH
20900: PPUSH
// if not vehicle or not factory then
20901: LD_VAR 0 1
20905: NOT
20906: IFTRUE 20915
20908: PUSH
20909: LD_VAR 0 2
20913: NOT
20914: OR
20915: IFFALSE 20919
// exit ;
20917: GO 21581
// weapon := GetWeapon ( vehicle ) ;
20919: LD_ADDR_VAR 0 7
20923: PUSH
20924: LD_VAR 0 1
20928: PPUSH
20929: CALL_OW 264
20933: ST_TO_ADDR
// if weapon = ar_miner then
20934: LD_VAR 0 7
20938: PUSH
20939: LD_INT 81
20941: EQUAL
20942: IFFALSE 20999
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
20944: LD_ADDR_EXP 93
20948: PUSH
20949: LD_EXP 93
20953: PPUSH
20954: LD_EXP 93
20958: PUSH
20959: LD_INT 1
20961: PLUS
20962: PPUSH
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 1
20972: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20973: LD_ADDR_EXP 94
20977: PUSH
20978: LD_EXP 94
20982: PPUSH
20983: LD_EXP 94
20987: PUSH
20988: LD_INT 1
20990: PLUS
20991: PPUSH
20992: EMPTY
20993: PPUSH
20994: CALL_OW 1
20998: ST_TO_ADDR
// end ; if not factoryWaypoints then
20999: LD_EXP 82
21003: NOT
21004: IFFALSE 21008
// exit ;
21006: GO 21581
// for i := 1 to Count ( factoryWaypoints ) do
21008: LD_ADDR_VAR 0 4
21012: PUSH
21013: DOUBLE
21014: LD_INT 1
21016: DEC
21017: ST_TO_ADDR
21018: LD_EXP 82
21022: PPUSH
21023: CALL 29534 0 1
21027: PUSH
21028: FOR_TO
21029: IFFALSE 21579
// if factoryWaypoints [ i ] [ 2 ] = factory then
21031: LD_EXP 82
21035: PUSH
21036: LD_VAR 0 4
21040: ARRAY
21041: PUSH
21042: LD_INT 2
21044: ARRAY
21045: PUSH
21046: LD_VAR 0 2
21050: EQUAL
21051: IFFALSE 21577
// begin if GetControl ( vehicle ) = control_manual then
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 263
21062: PUSH
21063: LD_INT 1
21065: EQUAL
21066: IFFALSE 21430
// begin driver := IsDrivenBy ( vehicle ) ;
21068: LD_ADDR_VAR 0 5
21072: PUSH
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 311
21082: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
21083: LD_VAR 0 5
21087: PUSH
21088: LD_EXP 83
21092: IN
21093: IFTRUE 21107
21095: PUSH
21096: LD_VAR 0 1
21100: PUSH
21101: LD_EXP 83
21105: IN
21106: OR
21107: IFFALSE 21113
// exit ;
21109: POP
21110: POP
21111: GO 21581
// if not HasTask ( driver ) then
21113: LD_VAR 0 5
21117: PPUSH
21118: CALL_OW 314
21122: NOT
21123: IFFALSE 21428
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
21125: LD_ADDR_EXP 83
21129: PUSH
21130: LD_EXP 83
21134: PPUSH
21135: LD_VAR 0 5
21139: PPUSH
21140: CALL 65510 0 2
21144: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
21145: LD_ADDR_EXP 83
21149: PUSH
21150: LD_EXP 83
21154: PPUSH
21155: LD_VAR 0 1
21159: PPUSH
21160: CALL 65510 0 2
21164: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21165: LD_ADDR_VAR 0 6
21169: PUSH
21170: LD_EXP 82
21174: PUSH
21175: LD_VAR 0 4
21179: ARRAY
21180: PUSH
21181: LD_INT 3
21183: ARRAY
21184: PPUSH
21185: LD_EXP 82
21189: PUSH
21190: LD_VAR 0 4
21194: ARRAY
21195: PUSH
21196: LD_INT 4
21198: ARRAY
21199: PPUSH
21200: CALL_OW 428
21204: ST_TO_ADDR
// if hex then
21205: LD_VAR 0 6
21209: IFFALSE 21227
// ComMoveUnit ( driver , hex ) else
21211: LD_VAR 0 5
21215: PPUSH
21216: LD_VAR 0 6
21220: PPUSH
21221: CALL_OW 112
21225: GO 21311
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
21227: LD_VAR 0 1
21231: PPUSH
21232: LD_EXP 82
21236: PUSH
21237: LD_VAR 0 4
21241: ARRAY
21242: PUSH
21243: LD_INT 3
21245: ARRAY
21246: PPUSH
21247: LD_EXP 82
21251: PUSH
21252: LD_VAR 0 4
21256: ARRAY
21257: PUSH
21258: LD_INT 4
21260: ARRAY
21261: PPUSH
21262: CALL_OW 297
21266: PUSH
21267: LD_INT 0
21269: GREATER
21270: IFFALSE 21311
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21272: LD_VAR 0 5
21276: PPUSH
21277: LD_EXP 82
21281: PUSH
21282: LD_VAR 0 4
21286: ARRAY
21287: PUSH
21288: LD_INT 3
21290: ARRAY
21291: PPUSH
21292: LD_EXP 82
21296: PUSH
21297: LD_VAR 0 4
21301: ARRAY
21302: PUSH
21303: LD_INT 4
21305: ARRAY
21306: PPUSH
21307: CALL_OW 111
// AddComExitVehicle ( driver ) ;
21311: LD_VAR 0 5
21315: PPUSH
21316: CALL_OW 181
// if Multiplayer then
21320: LD_OWVAR 4
21324: IFFALSE 21373
// begin repeat wait ( 10 ) ;
21326: LD_INT 10
21328: PPUSH
21329: CALL_OW 67
// until not IsInUnit ( driver ) ;
21333: LD_VAR 0 5
21337: PPUSH
21338: CALL_OW 310
21342: NOT
21343: IFFALSE 21326
// if not HasTask ( driver ) then
21345: LD_VAR 0 5
21349: PPUSH
21350: CALL_OW 314
21354: NOT
21355: IFFALSE 21371
// ComEnterUnit ( driver , factory ) ;
21357: LD_VAR 0 5
21361: PPUSH
21362: LD_VAR 0 2
21366: PPUSH
21367: CALL_OW 120
// end else
21371: GO 21387
// AddComEnterUnit ( driver , factory ) ;
21373: LD_VAR 0 5
21377: PPUSH
21378: LD_VAR 0 2
21382: PPUSH
21383: CALL_OW 180
// wait ( 0 0$1 ) ;
21387: LD_INT 35
21389: PPUSH
21390: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
21394: LD_ADDR_EXP 83
21398: PUSH
21399: LD_EXP 83
21403: PUSH
21404: LD_VAR 0 5
21408: DIFF
21409: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
21410: LD_ADDR_EXP 83
21414: PUSH
21415: LD_EXP 83
21419: PUSH
21420: LD_VAR 0 1
21424: DIFF
21425: ST_TO_ADDR
// break ;
21426: GO 21579
// end ; end else
21428: GO 21577
// if GetControl ( vehicle ) = control_remote then
21430: LD_VAR 0 1
21434: PPUSH
21435: CALL_OW 263
21439: PUSH
21440: LD_INT 2
21442: EQUAL
21443: IFFALSE 21529
// begin wait ( 0 0$2 ) ;
21445: LD_INT 70
21447: PPUSH
21448: CALL_OW 67
// repeat wait ( 10 ) ;
21452: LD_INT 10
21454: PPUSH
21455: CALL_OW 67
// Connect ( vehicle ) ;
21459: LD_VAR 0 1
21463: PPUSH
21464: CALL 35812 0 1
// until IsControledBy ( vehicle ) ;
21468: LD_VAR 0 1
21472: PPUSH
21473: CALL_OW 312
21477: IFFALSE 21452
// wait ( 10 ) ;
21479: LD_INT 10
21481: PPUSH
21482: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21486: LD_VAR 0 1
21490: PPUSH
21491: LD_EXP 82
21495: PUSH
21496: LD_VAR 0 4
21500: ARRAY
21501: PUSH
21502: LD_INT 3
21504: ARRAY
21505: PPUSH
21506: LD_EXP 82
21510: PUSH
21511: LD_VAR 0 4
21515: ARRAY
21516: PUSH
21517: LD_INT 4
21519: ARRAY
21520: PPUSH
21521: CALL_OW 111
// break ;
21525: GO 21579
// end else
21527: GO 21577
// begin wait ( 0 0$3 ) ;
21529: LD_INT 105
21531: PPUSH
21532: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
21536: LD_VAR 0 1
21540: PPUSH
21541: LD_EXP 82
21545: PUSH
21546: LD_VAR 0 4
21550: ARRAY
21551: PUSH
21552: LD_INT 3
21554: ARRAY
21555: PPUSH
21556: LD_EXP 82
21560: PUSH
21561: LD_VAR 0 4
21565: ARRAY
21566: PUSH
21567: LD_INT 4
21569: ARRAY
21570: PPUSH
21571: CALL_OW 111
// break ;
21575: GO 21579
// end ; end ;
21577: GO 21028
21579: POP
21580: POP
// end ;
21581: LD_VAR 0 3
21585: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21586: LD_INT 0
21588: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21589: LD_VAR 0 1
21593: PUSH
21594: LD_INT 250
21596: EQUAL
21597: IFFALSE 21614
21599: PUSH
21600: LD_VAR 0 2
21604: PPUSH
21605: CALL_OW 264
21609: PUSH
21610: LD_INT 81
21612: EQUAL
21613: AND
21614: IFFALSE 21635
// MinerPlaceMine ( unit , x , y ) ;
21616: LD_VAR 0 2
21620: PPUSH
21621: LD_VAR 0 4
21625: PPUSH
21626: LD_VAR 0 5
21630: PPUSH
21631: CALL 24981 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21635: LD_VAR 0 1
21639: PUSH
21640: LD_INT 251
21642: EQUAL
21643: IFFALSE 21660
21645: PUSH
21646: LD_VAR 0 2
21650: PPUSH
21651: CALL_OW 264
21655: PUSH
21656: LD_INT 81
21658: EQUAL
21659: AND
21660: IFFALSE 21681
// MinerDetonateMine ( unit , x , y ) ;
21662: LD_VAR 0 2
21666: PPUSH
21667: LD_VAR 0 4
21671: PPUSH
21672: LD_VAR 0 5
21676: PPUSH
21677: CALL 25388 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21681: LD_VAR 0 1
21685: PUSH
21686: LD_INT 252
21688: EQUAL
21689: IFFALSE 21706
21691: PUSH
21692: LD_VAR 0 2
21696: PPUSH
21697: CALL_OW 264
21701: PUSH
21702: LD_INT 81
21704: EQUAL
21705: AND
21706: IFFALSE 21727
// MinerCreateMinefield ( unit , x , y ) ;
21708: LD_VAR 0 2
21712: PPUSH
21713: LD_VAR 0 4
21717: PPUSH
21718: LD_VAR 0 5
21722: PPUSH
21723: CALL 25620 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21727: LD_VAR 0 1
21731: PUSH
21732: LD_INT 253
21734: EQUAL
21735: IFFALSE 21752
21737: PUSH
21738: LD_VAR 0 2
21742: PPUSH
21743: CALL_OW 257
21747: PUSH
21748: LD_INT 5
21750: EQUAL
21751: AND
21752: IFFALSE 21773
// ComBinocular ( unit , x , y ) ;
21754: LD_VAR 0 2
21758: PPUSH
21759: LD_VAR 0 4
21763: PPUSH
21764: LD_VAR 0 5
21768: PPUSH
21769: CALL 25995 0 3
// if selectedUnit then
21773: LD_VAR 0 3
21777: IFFALSE 21837
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21779: LD_VAR 0 1
21783: PUSH
21784: LD_INT 254
21786: EQUAL
21787: IFFALSE 21804
21789: PUSH
21790: LD_VAR 0 2
21794: PPUSH
21795: CALL_OW 264
21799: PUSH
21800: LD_INT 99
21802: EQUAL
21803: AND
21804: IFFALSE 21821
21806: PUSH
21807: LD_VAR 0 3
21811: PPUSH
21812: CALL_OW 263
21816: PUSH
21817: LD_INT 3
21819: EQUAL
21820: AND
21821: IFFALSE 21837
// HackDestroyVehicle ( unit , selectedUnit ) ;
21823: LD_VAR 0 2
21827: PPUSH
21828: LD_VAR 0 3
21832: PPUSH
21833: CALL 24171 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21837: LD_VAR 0 1
21841: PUSH
21842: LD_INT 255
21844: EQUAL
21845: IFFALSE 21869
21847: PUSH
21848: LD_VAR 0 2
21852: PPUSH
21853: CALL_OW 264
21857: PUSH
21858: LD_INT 14
21860: PUSH
21861: LD_INT 53
21863: PUSH
21864: EMPTY
21865: LIST
21866: LIST
21867: IN
21868: AND
21869: IFFALSE 21887
21871: PUSH
21872: LD_VAR 0 4
21876: PPUSH
21877: LD_VAR 0 5
21881: PPUSH
21882: CALL_OW 488
21886: AND
21887: IFFALSE 21911
// CutTreeXYR ( unit , x , y , 12 ) ;
21889: LD_VAR 0 2
21893: PPUSH
21894: LD_VAR 0 4
21898: PPUSH
21899: LD_VAR 0 5
21903: PPUSH
21904: LD_INT 12
21906: PPUSH
21907: CALL 22102 0 4
// if cmd = 256 then
21911: LD_VAR 0 1
21915: PUSH
21916: LD_INT 256
21918: EQUAL
21919: IFFALSE 21940
// SetFactoryWaypoint ( unit , x , y ) ;
21921: LD_VAR 0 2
21925: PPUSH
21926: LD_VAR 0 4
21930: PPUSH
21931: LD_VAR 0 5
21935: PPUSH
21936: CALL 19218 0 3
// if cmd = 257 then
21940: LD_VAR 0 1
21944: PUSH
21945: LD_INT 257
21947: EQUAL
21948: IFFALSE 21969
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21950: LD_VAR 0 2
21954: PPUSH
21955: LD_VAR 0 4
21959: PPUSH
21960: LD_VAR 0 5
21964: PPUSH
21965: CALL 19714 0 3
// if cmd = 258 then
21969: LD_VAR 0 1
21973: PUSH
21974: LD_INT 258
21976: EQUAL
21977: IFFALSE 22001
// BurnTreeXYR ( unit , x , y , 8 ) ;
21979: LD_VAR 0 2
21983: PPUSH
21984: LD_VAR 0 4
21988: PPUSH
21989: LD_VAR 0 5
21993: PPUSH
21994: LD_INT 8
21996: PPUSH
21997: CALL 22524 0 4
// end ;
22001: LD_VAR 0 6
22005: RET
// export function ComRadiation ( un ) ; var eff ; begin
22006: LD_INT 0
22008: PPUSH
22009: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 264
22019: PUSH
22020: LD_INT 91
22022: NONEQUAL
22023: IFFALSE 22027
// exit ;
22025: GO 22097
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22027: LD_INT 68
22029: PPUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 255
22039: PPUSH
22040: CALL_OW 321
22044: PUSH
22045: LD_INT 2
22047: EQUAL
22048: IFFALSE 22060
// eff := 50 else
22050: LD_ADDR_VAR 0 3
22054: PUSH
22055: LD_INT 50
22057: ST_TO_ADDR
22058: GO 22068
// eff := 25 ;
22060: LD_ADDR_VAR 0 3
22064: PUSH
22065: LD_INT 25
22067: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22068: LD_VAR 0 1
22072: PPUSH
22073: CALL_OW 250
22077: PPUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 251
22087: PPUSH
22088: LD_VAR 0 3
22092: PPUSH
22093: CALL_OW 495
// end ;
22097: LD_VAR 0 2
22101: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22102: LD_INT 0
22104: PPUSH
22105: PPUSH
22106: PPUSH
22107: PPUSH
22108: PPUSH
22109: PPUSH
22110: PPUSH
22111: PPUSH
22112: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 302
22122: NOT
22123: IFTRUE 22142
22125: PUSH
22126: LD_VAR 0 2
22130: PPUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: CALL_OW 488
22140: NOT
22141: OR
22142: IFTRUE 22151
22144: PUSH
22145: LD_VAR 0 4
22149: NOT
22150: OR
22151: IFFALSE 22155
// exit ;
22153: GO 22519
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
22155: LD_VAR 0 1
22159: PPUSH
22160: CALL_OW 437
22164: PPUSH
22165: CALL 29534 0 1
22169: PUSH
22170: LD_INT 10
22172: GREATER
22173: IFFALSE 22177
// exit ;
22175: GO 22519
// list := [ ] ;
22177: LD_ADDR_VAR 0 13
22181: PUSH
22182: EMPTY
22183: ST_TO_ADDR
// if x - r < 0 then
22184: LD_VAR 0 2
22188: PUSH
22189: LD_VAR 0 4
22193: MINUS
22194: PUSH
22195: LD_INT 0
22197: LESS
22198: IFFALSE 22210
// min_x := 0 else
22200: LD_ADDR_VAR 0 7
22204: PUSH
22205: LD_INT 0
22207: ST_TO_ADDR
22208: GO 22226
// min_x := x - r ;
22210: LD_ADDR_VAR 0 7
22214: PUSH
22215: LD_VAR 0 2
22219: PUSH
22220: LD_VAR 0 4
22224: MINUS
22225: ST_TO_ADDR
// if y - r < 0 then
22226: LD_VAR 0 3
22230: PUSH
22231: LD_VAR 0 4
22235: MINUS
22236: PUSH
22237: LD_INT 0
22239: LESS
22240: IFFALSE 22252
// min_y := 0 else
22242: LD_ADDR_VAR 0 8
22246: PUSH
22247: LD_INT 0
22249: ST_TO_ADDR
22250: GO 22268
// min_y := y - r ;
22252: LD_ADDR_VAR 0 8
22256: PUSH
22257: LD_VAR 0 3
22261: PUSH
22262: LD_VAR 0 4
22266: MINUS
22267: ST_TO_ADDR
// max_x := x + r ;
22268: LD_ADDR_VAR 0 9
22272: PUSH
22273: LD_VAR 0 2
22277: PUSH
22278: LD_VAR 0 4
22282: PLUS
22283: ST_TO_ADDR
// max_y := y + r ;
22284: LD_ADDR_VAR 0 10
22288: PUSH
22289: LD_VAR 0 3
22293: PUSH
22294: LD_VAR 0 4
22298: PLUS
22299: ST_TO_ADDR
// for _x = min_x to max_x do
22300: LD_ADDR_VAR 0 11
22304: PUSH
22305: DOUBLE
22306: LD_VAR 0 7
22310: DEC
22311: ST_TO_ADDR
22312: LD_VAR 0 9
22316: PUSH
22317: FOR_TO
22318: IFFALSE 22437
// for _y = min_y to max_y do
22320: LD_ADDR_VAR 0 12
22324: PUSH
22325: DOUBLE
22326: LD_VAR 0 8
22330: DEC
22331: ST_TO_ADDR
22332: LD_VAR 0 10
22336: PUSH
22337: FOR_TO
22338: IFFALSE 22433
// begin if not ValidHex ( _x , _y ) then
22340: LD_VAR 0 11
22344: PPUSH
22345: LD_VAR 0 12
22349: PPUSH
22350: CALL_OW 488
22354: NOT
22355: IFFALSE 22359
// continue ;
22357: GO 22337
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22359: LD_VAR 0 11
22363: PPUSH
22364: LD_VAR 0 12
22368: PPUSH
22369: CALL_OW 351
22373: IFFALSE 22391
22375: PUSH
22376: LD_VAR 0 11
22380: PPUSH
22381: LD_VAR 0 12
22385: PPUSH
22386: CALL_OW 554
22390: AND
22391: IFFALSE 22431
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22393: LD_ADDR_VAR 0 13
22397: PUSH
22398: LD_VAR 0 13
22402: PPUSH
22403: LD_VAR 0 13
22407: PUSH
22408: LD_INT 1
22410: PLUS
22411: PPUSH
22412: LD_VAR 0 11
22416: PUSH
22417: LD_VAR 0 12
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PPUSH
22426: CALL_OW 2
22430: ST_TO_ADDR
// end ;
22431: GO 22337
22433: POP
22434: POP
22435: GO 22317
22437: POP
22438: POP
// if not list then
22439: LD_VAR 0 13
22443: NOT
22444: IFFALSE 22448
// exit ;
22446: GO 22519
// for i in list do
22448: LD_ADDR_VAR 0 6
22452: PUSH
22453: LD_VAR 0 13
22457: PUSH
22458: FOR_IN
22459: IFFALSE 22517
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
22461: LD_VAR 0 1
22465: PPUSH
22466: LD_STRING M
22468: PUSH
22469: LD_VAR 0 6
22473: PUSH
22474: LD_INT 1
22476: ARRAY
22477: PUSH
22478: LD_VAR 0 6
22482: PUSH
22483: LD_INT 2
22485: ARRAY
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: LD_INT 0
22492: PUSH
22493: LD_INT 0
22495: PUSH
22496: LD_INT 0
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: PUSH
22508: EMPTY
22509: LIST
22510: PPUSH
22511: CALL_OW 447
22515: GO 22458
22517: POP
22518: POP
// end ;
22519: LD_VAR 0 5
22523: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
22524: LD_INT 0
22526: PPUSH
22527: PPUSH
22528: PPUSH
22529: PPUSH
22530: PPUSH
22531: PPUSH
22532: PPUSH
22533: PPUSH
22534: PPUSH
22535: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
22536: LD_VAR 0 1
22540: PPUSH
22541: CALL_OW 302
22545: NOT
22546: IFTRUE 22565
22548: PUSH
22549: LD_VAR 0 2
22553: PPUSH
22554: LD_VAR 0 3
22558: PPUSH
22559: CALL_OW 488
22563: NOT
22564: OR
22565: IFTRUE 22574
22567: PUSH
22568: LD_VAR 0 4
22572: NOT
22573: OR
22574: IFFALSE 22578
// exit ;
22576: GO 23117
// if Count ( GetTaskList ( flame ) ) > 10 then
22578: LD_VAR 0 1
22582: PPUSH
22583: CALL_OW 437
22587: PPUSH
22588: CALL 29534 0 1
22592: PUSH
22593: LD_INT 10
22595: GREATER
22596: IFFALSE 22600
// exit ;
22598: GO 23117
// list := [ ] ;
22600: LD_ADDR_VAR 0 13
22604: PUSH
22605: EMPTY
22606: ST_TO_ADDR
// if x - r < 0 then
22607: LD_VAR 0 2
22611: PUSH
22612: LD_VAR 0 4
22616: MINUS
22617: PUSH
22618: LD_INT 0
22620: LESS
22621: IFFALSE 22633
// min_x := 0 else
22623: LD_ADDR_VAR 0 7
22627: PUSH
22628: LD_INT 0
22630: ST_TO_ADDR
22631: GO 22649
// min_x := x - r ;
22633: LD_ADDR_VAR 0 7
22637: PUSH
22638: LD_VAR 0 2
22642: PUSH
22643: LD_VAR 0 4
22647: MINUS
22648: ST_TO_ADDR
// if y - r < 0 then
22649: LD_VAR 0 3
22653: PUSH
22654: LD_VAR 0 4
22658: MINUS
22659: PUSH
22660: LD_INT 0
22662: LESS
22663: IFFALSE 22675
// min_y := 0 else
22665: LD_ADDR_VAR 0 8
22669: PUSH
22670: LD_INT 0
22672: ST_TO_ADDR
22673: GO 22691
// min_y := y - r ;
22675: LD_ADDR_VAR 0 8
22679: PUSH
22680: LD_VAR 0 3
22684: PUSH
22685: LD_VAR 0 4
22689: MINUS
22690: ST_TO_ADDR
// max_x := x + r ;
22691: LD_ADDR_VAR 0 9
22695: PUSH
22696: LD_VAR 0 2
22700: PUSH
22701: LD_VAR 0 4
22705: PLUS
22706: ST_TO_ADDR
// max_y := y + r ;
22707: LD_ADDR_VAR 0 10
22711: PUSH
22712: LD_VAR 0 3
22716: PUSH
22717: LD_VAR 0 4
22721: PLUS
22722: ST_TO_ADDR
// for _x = min_x to max_x do
22723: LD_ADDR_VAR 0 11
22727: PUSH
22728: DOUBLE
22729: LD_VAR 0 7
22733: DEC
22734: ST_TO_ADDR
22735: LD_VAR 0 9
22739: PUSH
22740: FOR_TO
22741: IFFALSE 22860
// for _y = min_y to max_y do
22743: LD_ADDR_VAR 0 12
22747: PUSH
22748: DOUBLE
22749: LD_VAR 0 8
22753: DEC
22754: ST_TO_ADDR
22755: LD_VAR 0 10
22759: PUSH
22760: FOR_TO
22761: IFFALSE 22856
// begin if not ValidHex ( _x , _y ) then
22763: LD_VAR 0 11
22767: PPUSH
22768: LD_VAR 0 12
22772: PPUSH
22773: CALL_OW 488
22777: NOT
22778: IFFALSE 22782
// continue ;
22780: GO 22760
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22782: LD_VAR 0 11
22786: PPUSH
22787: LD_VAR 0 12
22791: PPUSH
22792: CALL_OW 351
22796: IFFALSE 22814
22798: PUSH
22799: LD_VAR 0 11
22803: PPUSH
22804: LD_VAR 0 12
22808: PPUSH
22809: CALL_OW 554
22813: AND
22814: IFFALSE 22854
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22816: LD_ADDR_VAR 0 13
22820: PUSH
22821: LD_VAR 0 13
22825: PPUSH
22826: LD_VAR 0 13
22830: PUSH
22831: LD_INT 1
22833: PLUS
22834: PPUSH
22835: LD_VAR 0 11
22839: PUSH
22840: LD_VAR 0 12
22844: PUSH
22845: EMPTY
22846: LIST
22847: LIST
22848: PPUSH
22849: CALL_OW 2
22853: ST_TO_ADDR
// end ;
22854: GO 22760
22856: POP
22857: POP
22858: GO 22740
22860: POP
22861: POP
// if not list then
22862: LD_VAR 0 13
22866: NOT
22867: IFFALSE 22871
// exit ;
22869: GO 23117
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22871: LD_ADDR_VAR 0 13
22875: PUSH
22876: LD_VAR 0 1
22880: PPUSH
22881: LD_VAR 0 13
22885: PPUSH
22886: LD_INT 1
22888: PPUSH
22889: LD_INT 1
22891: PPUSH
22892: CALL 32940 0 4
22896: ST_TO_ADDR
// ComStop ( flame ) ;
22897: LD_VAR 0 1
22901: PPUSH
22902: CALL_OW 141
// for i in list do
22906: LD_ADDR_VAR 0 6
22910: PUSH
22911: LD_VAR 0 13
22915: PUSH
22916: FOR_IN
22917: IFFALSE 22948
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22919: LD_VAR 0 1
22923: PPUSH
22924: LD_VAR 0 6
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PPUSH
22933: LD_VAR 0 6
22937: PUSH
22938: LD_INT 2
22940: ARRAY
22941: PPUSH
22942: CALL_OW 176
22946: GO 22916
22948: POP
22949: POP
// repeat wait ( 0 0$1 ) ;
22950: LD_INT 35
22952: PPUSH
22953: CALL_OW 67
// task := GetTaskList ( flame ) ;
22957: LD_ADDR_VAR 0 14
22961: PUSH
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 437
22971: ST_TO_ADDR
// if not task then
22972: LD_VAR 0 14
22976: NOT
22977: IFFALSE 22981
// exit ;
22979: GO 23117
// if task [ 1 ] [ 1 ] <> | then
22981: LD_VAR 0 14
22985: PUSH
22986: LD_INT 1
22988: ARRAY
22989: PUSH
22990: LD_INT 1
22992: ARRAY
22993: PUSH
22994: LD_STRING |
22996: NONEQUAL
22997: IFFALSE 23001
// exit ;
22999: GO 23117
// _x := task [ 1 ] [ 2 ] ;
23001: LD_ADDR_VAR 0 11
23005: PUSH
23006: LD_VAR 0 14
23010: PUSH
23011: LD_INT 1
23013: ARRAY
23014: PUSH
23015: LD_INT 2
23017: ARRAY
23018: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
23019: LD_ADDR_VAR 0 12
23023: PUSH
23024: LD_VAR 0 14
23028: PUSH
23029: LD_INT 1
23031: ARRAY
23032: PUSH
23033: LD_INT 3
23035: ARRAY
23036: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
23037: LD_VAR 0 11
23041: PPUSH
23042: LD_VAR 0 12
23046: PPUSH
23047: CALL_OW 351
23051: NOT
23052: IFTRUE 23071
23054: PUSH
23055: LD_VAR 0 11
23059: PPUSH
23060: LD_VAR 0 12
23064: PPUSH
23065: CALL_OW 554
23069: NOT
23070: OR
23071: IFFALSE 23105
// begin task := Delete ( task , 1 ) ;
23073: LD_ADDR_VAR 0 14
23077: PUSH
23078: LD_VAR 0 14
23082: PPUSH
23083: LD_INT 1
23085: PPUSH
23086: CALL_OW 3
23090: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
23091: LD_VAR 0 1
23095: PPUSH
23096: LD_VAR 0 14
23100: PPUSH
23101: CALL_OW 446
// end ; until not HasTask ( flame ) ;
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 314
23114: NOT
23115: IFFALSE 22950
// end ;
23117: LD_VAR 0 5
23121: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23122: LD_EXP 86
23126: NOT
23127: IFFALSE 23177
23129: GO 23131
23131: DISABLE
// begin initHack := true ;
23132: LD_ADDR_EXP 86
23136: PUSH
23137: LD_INT 1
23139: ST_TO_ADDR
// hackTanks := [ ] ;
23140: LD_ADDR_EXP 87
23144: PUSH
23145: EMPTY
23146: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23147: LD_ADDR_EXP 88
23151: PUSH
23152: EMPTY
23153: ST_TO_ADDR
// hackLimit := 3 ;
23154: LD_ADDR_EXP 89
23158: PUSH
23159: LD_INT 3
23161: ST_TO_ADDR
// hackDist := 12 ;
23162: LD_ADDR_EXP 90
23166: PUSH
23167: LD_INT 12
23169: ST_TO_ADDR
// hackCounter := [ ] ;
23170: LD_ADDR_EXP 91
23174: PUSH
23175: EMPTY
23176: ST_TO_ADDR
// end ;
23177: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23178: LD_EXP 86
23182: IFFALSE 23200
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 99
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PPUSH
23195: CALL_OW 69
23199: AND
23200: IFFALSE 23453
23202: GO 23204
23204: DISABLE
23205: LD_INT 0
23207: PPUSH
23208: PPUSH
// begin enable ;
23209: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23210: LD_ADDR_VAR 0 1
23214: PUSH
23215: LD_INT 34
23217: PUSH
23218: LD_INT 99
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PPUSH
23225: CALL_OW 69
23229: PUSH
23230: FOR_IN
23231: IFFALSE 23451
// begin if not i in hackTanks then
23233: LD_VAR 0 1
23237: PUSH
23238: LD_EXP 87
23242: IN
23243: NOT
23244: IFFALSE 23327
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23246: LD_ADDR_EXP 87
23250: PUSH
23251: LD_EXP 87
23255: PPUSH
23256: LD_EXP 87
23260: PUSH
23261: LD_INT 1
23263: PLUS
23264: PPUSH
23265: LD_VAR 0 1
23269: PPUSH
23270: CALL_OW 1
23274: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23275: LD_ADDR_EXP 88
23279: PUSH
23280: LD_EXP 88
23284: PPUSH
23285: LD_EXP 88
23289: PUSH
23290: LD_INT 1
23292: PLUS
23293: PPUSH
23294: EMPTY
23295: PPUSH
23296: CALL_OW 1
23300: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23301: LD_ADDR_EXP 91
23305: PUSH
23306: LD_EXP 91
23310: PPUSH
23311: LD_EXP 91
23315: PUSH
23316: LD_INT 1
23318: PLUS
23319: PPUSH
23320: EMPTY
23321: PPUSH
23322: CALL_OW 1
23326: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL_OW 302
23336: NOT
23337: IFFALSE 23350
// begin HackUnlinkAll ( i ) ;
23339: LD_VAR 0 1
23343: PPUSH
23344: CALL 23456 0 1
// continue ;
23348: GO 23230
// end ; HackCheckCapturedStatus ( i ) ;
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL 23901 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23359: LD_ADDR_VAR 0 2
23363: PUSH
23364: LD_INT 81
23366: PUSH
23367: LD_VAR 0 1
23371: PPUSH
23372: CALL_OW 255
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: LD_INT 33
23383: PUSH
23384: LD_INT 3
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 91
23393: PUSH
23394: LD_VAR 0 1
23398: PUSH
23399: LD_EXP 90
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: LIST
23408: PUSH
23409: LD_INT 50
23411: PUSH
23412: EMPTY
23413: LIST
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: PPUSH
23421: CALL_OW 69
23425: ST_TO_ADDR
// if not tmp then
23426: LD_VAR 0 2
23430: NOT
23431: IFFALSE 23435
// continue ;
23433: GO 23230
// HackLink ( i , tmp ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_VAR 0 2
23444: PPUSH
23445: CALL 23592 0 2
// end ;
23449: GO 23230
23451: POP
23452: POP
// end ;
23453: PPOPN 2
23455: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23456: LD_INT 0
23458: PPUSH
23459: PPUSH
23460: PPUSH
// if not hack in hackTanks then
23461: LD_VAR 0 1
23465: PUSH
23466: LD_EXP 87
23470: IN
23471: NOT
23472: IFFALSE 23476
// exit ;
23474: GO 23587
// index := GetElementIndex ( hackTanks , hack ) ;
23476: LD_ADDR_VAR 0 4
23480: PUSH
23481: LD_EXP 87
23485: PPUSH
23486: LD_VAR 0 1
23490: PPUSH
23491: CALL 32235 0 2
23495: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23496: LD_EXP 88
23500: PUSH
23501: LD_VAR 0 4
23505: ARRAY
23506: IFFALSE 23587
// begin for i in hackTanksCaptured [ index ] do
23508: LD_ADDR_VAR 0 3
23512: PUSH
23513: LD_EXP 88
23517: PUSH
23518: LD_VAR 0 4
23522: ARRAY
23523: PUSH
23524: FOR_IN
23525: IFFALSE 23551
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23527: LD_VAR 0 3
23531: PUSH
23532: LD_INT 1
23534: ARRAY
23535: PPUSH
23536: LD_VAR 0 3
23540: PUSH
23541: LD_INT 2
23543: ARRAY
23544: PPUSH
23545: CALL_OW 235
23549: GO 23524
23551: POP
23552: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23553: LD_ADDR_EXP 88
23557: PUSH
23558: LD_EXP 88
23562: PPUSH
23563: LD_VAR 0 4
23567: PPUSH
23568: EMPTY
23569: PPUSH
23570: CALL_OW 1
23574: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_INT 0
23582: PPUSH
23583: CALL_OW 505
// end ; end ;
23587: LD_VAR 0 2
23591: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// if not hack in hackTanks or not vehicles then
23597: LD_VAR 0 1
23601: PUSH
23602: LD_EXP 87
23606: IN
23607: NOT
23608: IFTRUE 23617
23610: PUSH
23611: LD_VAR 0 2
23615: NOT
23616: OR
23617: IFFALSE 23621
// exit ;
23619: GO 23896
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23621: LD_ADDR_VAR 0 2
23625: PUSH
23626: LD_VAR 0 1
23630: PPUSH
23631: LD_VAR 0 2
23635: PPUSH
23636: LD_INT 1
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL 32887 0 4
23646: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23647: LD_ADDR_VAR 0 5
23651: PUSH
23652: LD_EXP 87
23656: PPUSH
23657: LD_VAR 0 1
23661: PPUSH
23662: CALL 32235 0 2
23666: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23667: LD_EXP 88
23671: PUSH
23672: LD_VAR 0 5
23676: ARRAY
23677: PUSH
23678: LD_EXP 89
23682: LESS
23683: IFFALSE 23872
// begin for i := 1 to vehicles do
23685: LD_ADDR_VAR 0 4
23689: PUSH
23690: DOUBLE
23691: LD_INT 1
23693: DEC
23694: ST_TO_ADDR
23695: LD_VAR 0 2
23699: PUSH
23700: FOR_TO
23701: IFFALSE 23870
// begin if hackTanksCaptured [ index ] = hackLimit then
23703: LD_EXP 88
23707: PUSH
23708: LD_VAR 0 5
23712: ARRAY
23713: PUSH
23714: LD_EXP 89
23718: EQUAL
23719: IFFALSE 23723
// break ;
23721: GO 23870
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23723: LD_ADDR_EXP 91
23727: PUSH
23728: LD_EXP 91
23732: PPUSH
23733: LD_VAR 0 5
23737: PPUSH
23738: LD_EXP 91
23742: PUSH
23743: LD_VAR 0 5
23747: ARRAY
23748: PUSH
23749: LD_INT 1
23751: PLUS
23752: PPUSH
23753: CALL_OW 1
23757: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23758: LD_ADDR_EXP 88
23762: PUSH
23763: LD_EXP 88
23767: PPUSH
23768: LD_VAR 0 5
23772: PUSH
23773: LD_EXP 88
23777: PUSH
23778: LD_VAR 0 5
23782: ARRAY
23783: PUSH
23784: LD_INT 1
23786: PLUS
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PPUSH
23792: LD_VAR 0 2
23796: PUSH
23797: LD_VAR 0 4
23801: ARRAY
23802: PUSH
23803: LD_VAR 0 2
23807: PUSH
23808: LD_VAR 0 4
23812: ARRAY
23813: PPUSH
23814: CALL_OW 255
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PPUSH
23823: CALL 32452 0 3
23827: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23828: LD_VAR 0 2
23832: PUSH
23833: LD_VAR 0 4
23837: ARRAY
23838: PPUSH
23839: LD_VAR 0 1
23843: PPUSH
23844: CALL_OW 255
23848: PPUSH
23849: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23853: LD_VAR 0 2
23857: PUSH
23858: LD_VAR 0 4
23862: ARRAY
23863: PPUSH
23864: CALL_OW 141
// end ;
23868: GO 23700
23870: POP
23871: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23872: LD_VAR 0 1
23876: PPUSH
23877: LD_EXP 88
23881: PUSH
23882: LD_VAR 0 5
23886: ARRAY
23887: PUSH
23888: LD_INT 0
23890: PLUS
23891: PPUSH
23892: CALL_OW 505
// end ;
23896: LD_VAR 0 3
23900: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23901: LD_INT 0
23903: PPUSH
23904: PPUSH
23905: PPUSH
23906: PPUSH
// if not hack in hackTanks then
23907: LD_VAR 0 1
23911: PUSH
23912: LD_EXP 87
23916: IN
23917: NOT
23918: IFFALSE 23922
// exit ;
23920: GO 24166
// index := GetElementIndex ( hackTanks , hack ) ;
23922: LD_ADDR_VAR 0 4
23926: PUSH
23927: LD_EXP 87
23931: PPUSH
23932: LD_VAR 0 1
23936: PPUSH
23937: CALL 32235 0 2
23941: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23942: LD_ADDR_VAR 0 3
23946: PUSH
23947: DOUBLE
23948: LD_EXP 88
23952: PUSH
23953: LD_VAR 0 4
23957: ARRAY
23958: INC
23959: ST_TO_ADDR
23960: LD_INT 1
23962: PUSH
23963: FOR_DOWNTO
23964: IFFALSE 24140
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23966: LD_ADDR_VAR 0 5
23970: PUSH
23971: LD_EXP 88
23975: PUSH
23976: LD_VAR 0 4
23980: ARRAY
23981: PUSH
23982: LD_VAR 0 3
23986: ARRAY
23987: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23988: LD_VAR 0 5
23992: PUSH
23993: LD_INT 1
23995: ARRAY
23996: PPUSH
23997: CALL_OW 302
24001: NOT
24002: IFTRUE 24030
24004: PUSH
24005: LD_VAR 0 5
24009: PUSH
24010: LD_INT 1
24012: ARRAY
24013: PPUSH
24014: CALL_OW 255
24018: PUSH
24019: LD_VAR 0 1
24023: PPUSH
24024: CALL_OW 255
24028: NONEQUAL
24029: OR
24030: IFFALSE 24138
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24032: LD_VAR 0 5
24036: PUSH
24037: LD_INT 1
24039: ARRAY
24040: PPUSH
24041: CALL_OW 305
24045: IFFALSE 24073
24047: PUSH
24048: LD_VAR 0 5
24052: PUSH
24053: LD_INT 1
24055: ARRAY
24056: PPUSH
24057: CALL_OW 255
24061: PUSH
24062: LD_VAR 0 1
24066: PPUSH
24067: CALL_OW 255
24071: EQUAL
24072: AND
24073: IFFALSE 24097
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24075: LD_VAR 0 5
24079: PUSH
24080: LD_INT 1
24082: ARRAY
24083: PPUSH
24084: LD_VAR 0 5
24088: PUSH
24089: LD_INT 2
24091: ARRAY
24092: PPUSH
24093: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24097: LD_ADDR_EXP 88
24101: PUSH
24102: LD_EXP 88
24106: PPUSH
24107: LD_VAR 0 4
24111: PPUSH
24112: LD_EXP 88
24116: PUSH
24117: LD_VAR 0 4
24121: ARRAY
24122: PPUSH
24123: LD_VAR 0 3
24127: PPUSH
24128: CALL_OW 3
24132: PPUSH
24133: CALL_OW 1
24137: ST_TO_ADDR
// end ; end ;
24138: GO 23963
24140: POP
24141: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24142: LD_VAR 0 1
24146: PPUSH
24147: LD_EXP 88
24151: PUSH
24152: LD_VAR 0 4
24156: ARRAY
24157: PUSH
24158: LD_INT 0
24160: PLUS
24161: PPUSH
24162: CALL_OW 505
// end ;
24166: LD_VAR 0 2
24170: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24171: LD_INT 0
24173: PPUSH
24174: PPUSH
24175: PPUSH
24176: PPUSH
// if not hack in hackTanks then
24177: LD_VAR 0 1
24181: PUSH
24182: LD_EXP 87
24186: IN
24187: NOT
24188: IFFALSE 24192
// exit ;
24190: GO 24277
// index := GetElementIndex ( hackTanks , hack ) ;
24192: LD_ADDR_VAR 0 5
24196: PUSH
24197: LD_EXP 87
24201: PPUSH
24202: LD_VAR 0 1
24206: PPUSH
24207: CALL 32235 0 2
24211: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24212: LD_ADDR_VAR 0 4
24216: PUSH
24217: DOUBLE
24218: LD_INT 1
24220: DEC
24221: ST_TO_ADDR
24222: LD_EXP 88
24226: PUSH
24227: LD_VAR 0 5
24231: ARRAY
24232: PUSH
24233: FOR_TO
24234: IFFALSE 24275
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24236: LD_EXP 88
24240: PUSH
24241: LD_VAR 0 5
24245: ARRAY
24246: PUSH
24247: LD_VAR 0 4
24251: ARRAY
24252: PUSH
24253: LD_INT 1
24255: ARRAY
24256: PUSH
24257: LD_VAR 0 2
24261: EQUAL
24262: IFFALSE 24273
// KillUnit ( vehicle ) ;
24264: LD_VAR 0 2
24268: PPUSH
24269: CALL_OW 66
24273: GO 24233
24275: POP
24276: POP
// end ;
24277: LD_VAR 0 3
24281: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
24282: LD_EXP 92
24286: NOT
24287: IFFALSE 24420
24289: GO 24291
24291: DISABLE
24292: LD_INT 0
24294: PPUSH
// begin initMiner := true ;
24295: LD_ADDR_EXP 92
24299: PUSH
24300: LD_INT 1
24302: ST_TO_ADDR
// minersList := [ ] ;
24303: LD_ADDR_EXP 93
24307: PUSH
24308: EMPTY
24309: ST_TO_ADDR
// minerMinesList := [ ] ;
24310: LD_ADDR_EXP 94
24314: PUSH
24315: EMPTY
24316: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
24317: LD_ADDR_EXP 95
24321: PUSH
24322: LD_INT 10
24324: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24325: LD_ADDR_VAR 0 1
24329: PUSH
24330: LD_INT 34
24332: PUSH
24333: LD_INT 81
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PPUSH
24340: CALL_OW 69
24344: PUSH
24345: FOR_IN
24346: IFFALSE 24418
// begin if not i in minersList then
24348: LD_VAR 0 1
24352: PUSH
24353: LD_EXP 93
24357: IN
24358: NOT
24359: IFFALSE 24416
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24361: LD_ADDR_EXP 93
24365: PUSH
24366: LD_EXP 93
24370: PPUSH
24371: LD_EXP 93
24375: PUSH
24376: LD_INT 1
24378: PLUS
24379: PPUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 1
24389: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24390: LD_ADDR_EXP 94
24394: PUSH
24395: LD_EXP 94
24399: PPUSH
24400: LD_EXP 94
24404: PUSH
24405: LD_INT 1
24407: PLUS
24408: PPUSH
24409: EMPTY
24410: PPUSH
24411: CALL_OW 1
24415: ST_TO_ADDR
// end end ;
24416: GO 24345
24418: POP
24419: POP
// end ;
24420: PPOPN 1
24422: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
24423: LD_EXP 92
24427: IFFALSE 24458
24429: PUSH
24430: LD_EXP 94
24434: PPUSH
24435: CALL 29534 0 1
24439: IFTRUE 24457
24441: PUSH
24442: LD_INT 34
24444: PUSH
24445: LD_INT 81
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PPUSH
24452: CALL_OW 69
24456: OR
24457: AND
24458: IFFALSE 24978
24460: GO 24462
24462: DISABLE
24463: LD_INT 0
24465: PPUSH
24466: PPUSH
24467: PPUSH
24468: PPUSH
// begin enable ;
24469: ENABLE
// for i := minerMinesList downto 1 do
24470: LD_ADDR_VAR 0 1
24474: PUSH
24475: DOUBLE
24476: LD_EXP 94
24480: INC
24481: ST_TO_ADDR
24482: LD_INT 1
24484: PUSH
24485: FOR_DOWNTO
24486: IFFALSE 24976
// begin side := GetSide ( minersList [ i ] ) ;
24488: LD_ADDR_VAR 0 3
24492: PUSH
24493: LD_EXP 93
24497: PUSH
24498: LD_VAR 0 1
24502: ARRAY
24503: PPUSH
24504: CALL_OW 255
24508: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
24509: LD_EXP 93
24513: PUSH
24514: LD_VAR 0 1
24518: ARRAY
24519: PPUSH
24520: CALL_OW 300
24524: IFFALSE 24545
24526: PUSH
24527: LD_VAR 0 3
24531: PUSH
24532: LD_OWVAR 2
24536: PUSH
24537: LD_INT 9
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: IN
24544: AND
24545: IFFALSE 24578
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
24547: LD_EXP 93
24551: PUSH
24552: LD_VAR 0 1
24556: ARRAY
24557: PPUSH
24558: LD_EXP 94
24562: PUSH
24563: LD_VAR 0 1
24567: ARRAY
24568: PPUSH
24569: CALL 29534 0 1
24573: PPUSH
24574: CALL_OW 505
// if not minerMinesList [ i ] then
24578: LD_EXP 94
24582: PUSH
24583: LD_VAR 0 1
24587: ARRAY
24588: NOT
24589: IFFALSE 24593
// continue ;
24591: GO 24485
// for j := minerMinesList [ i ] downto 1 do
24593: LD_ADDR_VAR 0 2
24597: PUSH
24598: DOUBLE
24599: LD_EXP 94
24603: PUSH
24604: LD_VAR 0 1
24608: ARRAY
24609: INC
24610: ST_TO_ADDR
24611: LD_INT 1
24613: PUSH
24614: FOR_DOWNTO
24615: IFFALSE 24972
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
24617: LD_EXP 93
24621: PUSH
24622: LD_VAR 0 1
24626: ARRAY
24627: PPUSH
24628: CALL_OW 301
24632: IFTRUE 24652
24634: PUSH
24635: LD_EXP 93
24639: PUSH
24640: LD_VAR 0 1
24644: ARRAY
24645: PPUSH
24646: CALL_OW 305
24650: NOT
24651: OR
24652: IFFALSE 24743
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24654: LD_EXP 94
24658: PUSH
24659: LD_VAR 0 1
24663: ARRAY
24664: PUSH
24665: LD_VAR 0 2
24669: ARRAY
24670: PUSH
24671: LD_INT 1
24673: ARRAY
24674: PPUSH
24675: LD_EXP 94
24679: PUSH
24680: LD_VAR 0 1
24684: ARRAY
24685: PUSH
24686: LD_VAR 0 2
24690: ARRAY
24691: PUSH
24692: LD_INT 2
24694: ARRAY
24695: PPUSH
24696: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24700: LD_ADDR_EXP 94
24704: PUSH
24705: LD_EXP 94
24709: PPUSH
24710: LD_VAR 0 1
24714: PPUSH
24715: LD_EXP 94
24719: PUSH
24720: LD_VAR 0 1
24724: ARRAY
24725: PPUSH
24726: LD_VAR 0 2
24730: PPUSH
24731: CALL_OW 3
24735: PPUSH
24736: CALL_OW 1
24740: ST_TO_ADDR
// continue ;
24741: GO 24614
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24743: LD_ADDR_VAR 0 4
24747: PUSH
24748: LD_EXP 94
24752: PUSH
24753: LD_VAR 0 1
24757: ARRAY
24758: PUSH
24759: LD_VAR 0 2
24763: ARRAY
24764: PUSH
24765: LD_INT 1
24767: ARRAY
24768: PPUSH
24769: LD_EXP 94
24773: PUSH
24774: LD_VAR 0 1
24778: ARRAY
24779: PUSH
24780: LD_VAR 0 2
24784: ARRAY
24785: PUSH
24786: LD_INT 2
24788: ARRAY
24789: PPUSH
24790: CALL_OW 428
24794: ST_TO_ADDR
// if not tmp then
24795: LD_VAR 0 4
24799: NOT
24800: IFFALSE 24804
// continue ;
24802: GO 24614
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24804: LD_VAR 0 4
24808: PUSH
24809: LD_INT 81
24811: PUSH
24812: LD_VAR 0 3
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PPUSH
24821: CALL_OW 69
24825: IN
24826: IFFALSE 24876
24828: PUSH
24829: LD_EXP 94
24833: PUSH
24834: LD_VAR 0 1
24838: ARRAY
24839: PUSH
24840: LD_VAR 0 2
24844: ARRAY
24845: PUSH
24846: LD_INT 1
24848: ARRAY
24849: PPUSH
24850: LD_EXP 94
24854: PUSH
24855: LD_VAR 0 1
24859: ARRAY
24860: PUSH
24861: LD_VAR 0 2
24865: ARRAY
24866: PUSH
24867: LD_INT 2
24869: ARRAY
24870: PPUSH
24871: CALL_OW 458
24875: AND
24876: IFFALSE 24970
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24878: LD_EXP 94
24882: PUSH
24883: LD_VAR 0 1
24887: ARRAY
24888: PUSH
24889: LD_VAR 0 2
24893: ARRAY
24894: PUSH
24895: LD_INT 1
24897: ARRAY
24898: PPUSH
24899: LD_EXP 94
24903: PUSH
24904: LD_VAR 0 1
24908: ARRAY
24909: PUSH
24910: LD_VAR 0 2
24914: ARRAY
24915: PUSH
24916: LD_INT 2
24918: ARRAY
24919: PPUSH
24920: LD_VAR 0 3
24924: PPUSH
24925: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24929: LD_ADDR_EXP 94
24933: PUSH
24934: LD_EXP 94
24938: PPUSH
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_EXP 94
24948: PUSH
24949: LD_VAR 0 1
24953: ARRAY
24954: PPUSH
24955: LD_VAR 0 2
24959: PPUSH
24960: CALL_OW 3
24964: PPUSH
24965: CALL_OW 1
24969: ST_TO_ADDR
// end ; end ;
24970: GO 24614
24972: POP
24973: POP
// end ;
24974: GO 24485
24976: POP
24977: POP
// end ;
24978: PPOPN 4
24980: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
24981: LD_INT 0
24983: PPUSH
24984: PPUSH
24985: PPUSH
24986: PPUSH
// result := false ;
24987: LD_ADDR_VAR 0 4
24991: PUSH
24992: LD_INT 0
24994: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24995: LD_VAR 0 1
24999: PPUSH
25000: CALL_OW 264
25004: PUSH
25005: LD_INT 81
25007: EQUAL
25008: NOT
25009: IFFALSE 25013
// exit ;
25011: GO 25383
// side := GetSide ( unit ) ;
25013: LD_ADDR_VAR 0 6
25017: PUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 255
25027: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
25028: LD_ADDR_VAR 0 5
25032: PUSH
25033: LD_EXP 93
25037: PPUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL 32235 0 2
25047: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25048: LD_EXP 94
25052: PUSH
25053: LD_VAR 0 5
25057: ARRAY
25058: PUSH
25059: LD_EXP 95
25063: GREATEREQUAL
25064: IFFALSE 25068
// exit ;
25066: GO 25383
// ComMoveXY ( unit , x , y ) ;
25068: LD_VAR 0 1
25072: PPUSH
25073: LD_VAR 0 2
25077: PPUSH
25078: LD_VAR 0 3
25082: PPUSH
25083: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25087: LD_INT 35
25089: PPUSH
25090: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25094: LD_VAR 0 1
25098: PPUSH
25099: LD_VAR 0 2
25103: PPUSH
25104: LD_VAR 0 3
25108: PPUSH
25109: CALL 64291 0 3
25113: NOT
25114: IFFALSE 25127
25116: PUSH
25117: LD_VAR 0 1
25121: PPUSH
25122: CALL_OW 314
25126: AND
25127: IFFALSE 25131
// exit ;
25129: GO 25383
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25131: LD_VAR 0 2
25135: PPUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: CALL_OW 428
25145: PUSH
25146: LD_VAR 0 1
25150: EQUAL
25151: IFFALSE 25165
25153: PUSH
25154: LD_VAR 0 1
25158: PPUSH
25159: CALL_OW 314
25163: NOT
25164: AND
25165: IFFALSE 25087
// if MineAtPos ( x , y ) then
25167: LD_VAR 0 2
25171: PPUSH
25172: LD_VAR 0 3
25176: PPUSH
25177: CALL_OW 458
25181: IFFALSE 25185
// exit ;
25183: GO 25383
// if your_side = side then
25185: LD_OWVAR 2
25189: PUSH
25190: LD_VAR 0 6
25194: EQUAL
25195: IFFALSE 25214
// PlaySoundXY ( x , y , PlantMine ) ;
25197: LD_VAR 0 2
25201: PPUSH
25202: LD_VAR 0 3
25206: PPUSH
25207: LD_STRING PlantMine
25209: PPUSH
25210: CALL_OW 366
// repeat wait ( 1 ) ;
25214: LD_INT 1
25216: PPUSH
25217: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
25221: LD_VAR 0 2
25225: PPUSH
25226: LD_VAR 0 3
25230: PPUSH
25231: LD_VAR 0 6
25235: PPUSH
25236: LD_INT 0
25238: PPUSH
25239: CALL_OW 454
25243: IFFALSE 25214
// if MineAtPos ( x , y ) then
25245: LD_VAR 0 2
25249: PPUSH
25250: LD_VAR 0 3
25254: PPUSH
25255: CALL_OW 458
25259: IFFALSE 25375
// begin for i in minerMinesList [ index ] do
25261: LD_ADDR_VAR 0 7
25265: PUSH
25266: LD_EXP 94
25270: PUSH
25271: LD_VAR 0 5
25275: ARRAY
25276: PUSH
25277: FOR_IN
25278: IFFALSE 25320
// if i [ 1 ] = x and i [ 2 ] = y then
25280: LD_VAR 0 7
25284: PUSH
25285: LD_INT 1
25287: ARRAY
25288: PUSH
25289: LD_VAR 0 2
25293: EQUAL
25294: IFFALSE 25312
25296: PUSH
25297: LD_VAR 0 7
25301: PUSH
25302: LD_INT 2
25304: ARRAY
25305: PUSH
25306: LD_VAR 0 3
25310: EQUAL
25311: AND
25312: IFFALSE 25318
// exit ;
25314: POP
25315: POP
25316: GO 25383
25318: GO 25277
25320: POP
25321: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25322: LD_ADDR_EXP 94
25326: PUSH
25327: LD_EXP 94
25331: PPUSH
25332: LD_VAR 0 5
25336: PUSH
25337: LD_EXP 94
25341: PUSH
25342: LD_VAR 0 5
25346: ARRAY
25347: PUSH
25348: LD_INT 1
25350: PLUS
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PPUSH
25356: LD_VAR 0 2
25360: PUSH
25361: LD_VAR 0 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PPUSH
25370: CALL 32452 0 3
25374: ST_TO_ADDR
// end ; result := true ;
25375: LD_ADDR_VAR 0 4
25379: PUSH
25380: LD_INT 1
25382: ST_TO_ADDR
// end ;
25383: LD_VAR 0 4
25387: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25388: LD_INT 0
25390: PPUSH
25391: PPUSH
25392: PPUSH
// if not unit in minersList then
25393: LD_VAR 0 1
25397: PUSH
25398: LD_EXP 93
25402: IN
25403: NOT
25404: IFFALSE 25408
// exit ;
25406: GO 25615
// index := GetElementIndex ( minersList , unit ) ;
25408: LD_ADDR_VAR 0 6
25412: PUSH
25413: LD_EXP 93
25417: PPUSH
25418: LD_VAR 0 1
25422: PPUSH
25423: CALL 32235 0 2
25427: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25428: LD_ADDR_VAR 0 5
25432: PUSH
25433: DOUBLE
25434: LD_EXP 94
25438: PUSH
25439: LD_VAR 0 6
25443: ARRAY
25444: INC
25445: ST_TO_ADDR
25446: LD_INT 1
25448: PUSH
25449: FOR_DOWNTO
25450: IFFALSE 25613
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25452: LD_EXP 94
25456: PUSH
25457: LD_VAR 0 6
25461: ARRAY
25462: PUSH
25463: LD_VAR 0 5
25467: ARRAY
25468: PUSH
25469: LD_INT 1
25471: ARRAY
25472: PPUSH
25473: LD_EXP 94
25477: PUSH
25478: LD_VAR 0 6
25482: ARRAY
25483: PUSH
25484: LD_VAR 0 5
25488: ARRAY
25489: PUSH
25490: LD_INT 2
25492: ARRAY
25493: PPUSH
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_VAR 0 3
25503: PPUSH
25504: CALL_OW 298
25508: PUSH
25509: LD_INT 6
25511: LESS
25512: IFFALSE 25611
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25514: LD_EXP 94
25518: PUSH
25519: LD_VAR 0 6
25523: ARRAY
25524: PUSH
25525: LD_VAR 0 5
25529: ARRAY
25530: PUSH
25531: LD_INT 1
25533: ARRAY
25534: PPUSH
25535: LD_EXP 94
25539: PUSH
25540: LD_VAR 0 6
25544: ARRAY
25545: PUSH
25546: LD_VAR 0 5
25550: ARRAY
25551: PUSH
25552: LD_INT 2
25554: ARRAY
25555: PPUSH
25556: LD_VAR 0 1
25560: PPUSH
25561: CALL_OW 255
25565: PPUSH
25566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25570: LD_ADDR_EXP 94
25574: PUSH
25575: LD_EXP 94
25579: PPUSH
25580: LD_VAR 0 6
25584: PPUSH
25585: LD_EXP 94
25589: PUSH
25590: LD_VAR 0 6
25594: ARRAY
25595: PPUSH
25596: LD_VAR 0 5
25600: PPUSH
25601: CALL_OW 3
25605: PPUSH
25606: CALL_OW 1
25610: ST_TO_ADDR
// end ; end ;
25611: GO 25449
25613: POP
25614: POP
// end ;
25615: LD_VAR 0 4
25619: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25620: LD_INT 0
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25631: LD_VAR 0 1
25635: PPUSH
25636: CALL_OW 264
25640: PUSH
25641: LD_INT 81
25643: EQUAL
25644: NOT
25645: IFTRUE 25660
25647: PUSH
25648: LD_VAR 0 1
25652: PUSH
25653: LD_EXP 93
25657: IN
25658: NOT
25659: OR
25660: IFFALSE 25664
// exit ;
25662: GO 25990
// index := GetElementIndex ( minersList , unit ) ;
25664: LD_ADDR_VAR 0 6
25668: PUSH
25669: LD_EXP 93
25673: PPUSH
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL 32235 0 2
25683: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25684: LD_ADDR_VAR 0 8
25688: PUSH
25689: LD_EXP 95
25693: PUSH
25694: LD_EXP 94
25698: PUSH
25699: LD_VAR 0 6
25703: ARRAY
25704: MINUS
25705: ST_TO_ADDR
// if not minesFreeAmount then
25706: LD_VAR 0 8
25710: NOT
25711: IFFALSE 25715
// exit ;
25713: GO 25990
// tmp := [ ] ;
25715: LD_ADDR_VAR 0 7
25719: PUSH
25720: EMPTY
25721: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25722: LD_ADDR_VAR 0 5
25726: PUSH
25727: DOUBLE
25728: LD_INT 1
25730: DEC
25731: ST_TO_ADDR
25732: LD_VAR 0 8
25736: PUSH
25737: FOR_TO
25738: IFFALSE 25937
// begin _d := rand ( 0 , 5 ) ;
25740: LD_ADDR_VAR 0 11
25744: PUSH
25745: LD_INT 0
25747: PPUSH
25748: LD_INT 5
25750: PPUSH
25751: CALL_OW 12
25755: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25756: LD_ADDR_VAR 0 12
25760: PUSH
25761: LD_INT 2
25763: PPUSH
25764: LD_INT 6
25766: PPUSH
25767: CALL_OW 12
25771: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25772: LD_ADDR_VAR 0 9
25776: PUSH
25777: LD_VAR 0 2
25781: PPUSH
25782: LD_VAR 0 11
25786: PPUSH
25787: LD_VAR 0 12
25791: PPUSH
25792: CALL_OW 272
25796: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25797: LD_ADDR_VAR 0 10
25801: PUSH
25802: LD_VAR 0 3
25806: PPUSH
25807: LD_VAR 0 11
25811: PPUSH
25812: LD_VAR 0 12
25816: PPUSH
25817: CALL_OW 273
25821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25822: LD_VAR 0 9
25826: PPUSH
25827: LD_VAR 0 10
25831: PPUSH
25832: CALL_OW 488
25836: IFFALSE 25860
25838: PUSH
25839: LD_VAR 0 9
25843: PUSH
25844: LD_VAR 0 10
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PUSH
25853: LD_VAR 0 7
25857: IN
25858: NOT
25859: AND
25860: IFFALSE 25879
25862: PUSH
25863: LD_VAR 0 9
25867: PPUSH
25868: LD_VAR 0 10
25872: PPUSH
25873: CALL_OW 458
25877: NOT
25878: AND
25879: IFFALSE 25921
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25881: LD_ADDR_VAR 0 7
25885: PUSH
25886: LD_VAR 0 7
25890: PPUSH
25891: LD_VAR 0 7
25895: PUSH
25896: LD_INT 1
25898: PLUS
25899: PPUSH
25900: LD_VAR 0 9
25904: PUSH
25905: LD_VAR 0 10
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PPUSH
25914: CALL_OW 1
25918: ST_TO_ADDR
25919: GO 25935
// i := i - 1 ;
25921: LD_ADDR_VAR 0 5
25925: PUSH
25926: LD_VAR 0 5
25930: PUSH
25931: LD_INT 1
25933: MINUS
25934: ST_TO_ADDR
// end ;
25935: GO 25737
25937: POP
25938: POP
// for i in tmp do
25939: LD_ADDR_VAR 0 5
25943: PUSH
25944: LD_VAR 0 7
25948: PUSH
25949: FOR_IN
25950: IFFALSE 25988
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25952: LD_VAR 0 1
25956: PPUSH
25957: LD_VAR 0 5
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PPUSH
25966: LD_VAR 0 5
25970: PUSH
25971: LD_INT 2
25973: ARRAY
25974: PPUSH
25975: CALL 24981 0 3
25979: NOT
25980: IFFALSE 25986
// exit ;
25982: POP
25983: POP
25984: GO 25990
25986: GO 25949
25988: POP
25989: POP
// end ;
25990: LD_VAR 0 4
25994: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25995: LD_INT 0
25997: PPUSH
25998: PPUSH
25999: PPUSH
26000: PPUSH
26001: PPUSH
26002: PPUSH
26003: PPUSH
26004: PPUSH
26005: PPUSH
// if GetClass ( unit ) <> class_sniper then
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 257
26015: PUSH
26016: LD_INT 5
26018: NONEQUAL
26019: IFFALSE 26023
// exit ;
26021: GO 26493
// dist := 8 ;
26023: LD_ADDR_VAR 0 5
26027: PUSH
26028: LD_INT 8
26030: ST_TO_ADDR
// viewRange := 12 ;
26031: LD_ADDR_VAR 0 8
26035: PUSH
26036: LD_INT 12
26038: ST_TO_ADDR
// side := GetSide ( unit ) ;
26039: LD_ADDR_VAR 0 6
26043: PUSH
26044: LD_VAR 0 1
26048: PPUSH
26049: CALL_OW 255
26053: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26054: LD_INT 61
26056: PPUSH
26057: LD_VAR 0 6
26061: PPUSH
26062: CALL_OW 321
26066: PUSH
26067: LD_INT 2
26069: EQUAL
26070: IFFALSE 26080
// viewRange := 16 ;
26072: LD_ADDR_VAR 0 8
26076: PUSH
26077: LD_INT 16
26079: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26080: LD_VAR 0 1
26084: PPUSH
26085: LD_VAR 0 2
26089: PPUSH
26090: LD_VAR 0 3
26094: PPUSH
26095: CALL_OW 297
26099: PUSH
26100: LD_VAR 0 5
26104: GREATER
26105: IFFALSE 26184
// begin ComMoveXY ( unit , x , y ) ;
26107: LD_VAR 0 1
26111: PPUSH
26112: LD_VAR 0 2
26116: PPUSH
26117: LD_VAR 0 3
26121: PPUSH
26122: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26126: LD_INT 35
26128: PPUSH
26129: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26133: LD_VAR 0 1
26137: PPUSH
26138: LD_VAR 0 2
26142: PPUSH
26143: LD_VAR 0 3
26147: PPUSH
26148: CALL 64291 0 3
26152: NOT
26153: IFFALSE 26157
// exit ;
26155: GO 26493
// until GetDistUnitXY ( unit , x , y ) < dist ;
26157: LD_VAR 0 1
26161: PPUSH
26162: LD_VAR 0 2
26166: PPUSH
26167: LD_VAR 0 3
26171: PPUSH
26172: CALL_OW 297
26176: PUSH
26177: LD_VAR 0 5
26181: LESS
26182: IFFALSE 26126
// end ; ComTurnXY ( unit , x , y ) ;
26184: LD_VAR 0 1
26188: PPUSH
26189: LD_VAR 0 2
26193: PPUSH
26194: LD_VAR 0 3
26198: PPUSH
26199: CALL_OW 118
// repeat if Multiplayer then
26203: LD_OWVAR 4
26207: IFFALSE 26218
// wait ( 35 ) else
26209: LD_INT 35
26211: PPUSH
26212: CALL_OW 67
26216: GO 26225
// wait ( 5 ) ;
26218: LD_INT 5
26220: PPUSH
26221: CALL_OW 67
// _d := GetDir ( unit ) ;
26225: LD_ADDR_VAR 0 11
26229: PUSH
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL_OW 254
26239: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
26240: LD_ADDR_VAR 0 7
26244: PUSH
26245: LD_VAR 0 1
26249: PPUSH
26250: CALL_OW 250
26254: PPUSH
26255: LD_VAR 0 1
26259: PPUSH
26260: CALL_OW 251
26264: PPUSH
26265: LD_VAR 0 2
26269: PPUSH
26270: LD_VAR 0 3
26274: PPUSH
26275: CALL 66927 0 4
26279: ST_TO_ADDR
// until dir = _d ;
26280: LD_VAR 0 7
26284: PUSH
26285: LD_VAR 0 11
26289: EQUAL
26290: IFFALSE 26203
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
26292: LD_ADDR_VAR 0 9
26296: PUSH
26297: LD_VAR 0 1
26301: PPUSH
26302: CALL_OW 250
26306: PPUSH
26307: LD_VAR 0 7
26311: PPUSH
26312: LD_VAR 0 5
26316: PPUSH
26317: CALL_OW 272
26321: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
26322: LD_ADDR_VAR 0 10
26326: PUSH
26327: LD_VAR 0 1
26331: PPUSH
26332: CALL_OW 251
26336: PPUSH
26337: LD_VAR 0 7
26341: PPUSH
26342: LD_VAR 0 5
26346: PPUSH
26347: CALL_OW 273
26351: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26352: LD_VAR 0 9
26356: PPUSH
26357: LD_VAR 0 10
26361: PPUSH
26362: CALL_OW 488
26366: NOT
26367: IFFALSE 26371
// exit ;
26369: GO 26493
// ComAnimCustom ( unit , 1 ) ;
26371: LD_VAR 0 1
26375: PPUSH
26376: LD_INT 1
26378: PPUSH
26379: CALL_OW 592
// p := 0 ;
26383: LD_ADDR_VAR 0 12
26387: PUSH
26388: LD_INT 0
26390: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26391: LD_VAR 0 9
26395: PPUSH
26396: LD_VAR 0 10
26400: PPUSH
26401: LD_VAR 0 6
26405: PPUSH
26406: LD_VAR 0 8
26410: PPUSH
26411: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
26415: LD_INT 35
26417: PPUSH
26418: CALL_OW 67
// p := Inc ( p ) ;
26422: LD_ADDR_VAR 0 12
26426: PUSH
26427: LD_VAR 0 12
26431: PPUSH
26432: CALL 66883 0 1
26436: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
26437: LD_VAR 0 12
26441: PUSH
26442: LD_INT 3
26444: EQUAL
26445: IFTRUE 26459
26447: PUSH
26448: LD_VAR 0 1
26452: PPUSH
26453: CALL_OW 302
26457: NOT
26458: OR
26459: IFTRUE 26472
26461: PUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 301
26471: OR
26472: IFFALSE 26415
// RemoveSeeing ( _x , _y , side ) ;
26474: LD_VAR 0 9
26478: PPUSH
26479: LD_VAR 0 10
26483: PPUSH
26484: LD_VAR 0 6
26488: PPUSH
26489: CALL_OW 331
// end ;
26493: LD_VAR 0 4
26497: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
26498: LD_INT 0
26500: PPUSH
26501: PPUSH
26502: PPUSH
26503: PPUSH
26504: PPUSH
26505: PPUSH
26506: PPUSH
26507: PPUSH
26508: PPUSH
26509: PPUSH
26510: PPUSH
// if not unit then
26511: LD_VAR 0 1
26515: NOT
26516: IFFALSE 26520
// exit ;
26518: GO 26791
// side := GetSide ( unit ) ;
26520: LD_ADDR_VAR 0 3
26524: PUSH
26525: LD_VAR 0 1
26529: PPUSH
26530: CALL_OW 255
26534: ST_TO_ADDR
// x := GetX ( unit ) ;
26535: LD_ADDR_VAR 0 5
26539: PUSH
26540: LD_VAR 0 1
26544: PPUSH
26545: CALL_OW 250
26549: ST_TO_ADDR
// y := GetY ( unit ) ;
26550: LD_ADDR_VAR 0 6
26554: PUSH
26555: LD_VAR 0 1
26559: PPUSH
26560: CALL_OW 251
26564: ST_TO_ADDR
// r := 8 ;
26565: LD_ADDR_VAR 0 4
26569: PUSH
26570: LD_INT 8
26572: ST_TO_ADDR
// if x - r < 0 then
26573: LD_VAR 0 5
26577: PUSH
26578: LD_VAR 0 4
26582: MINUS
26583: PUSH
26584: LD_INT 0
26586: LESS
26587: IFFALSE 26599
// min_x := 0 else
26589: LD_ADDR_VAR 0 7
26593: PUSH
26594: LD_INT 0
26596: ST_TO_ADDR
26597: GO 26615
// min_x := x - r ;
26599: LD_ADDR_VAR 0 7
26603: PUSH
26604: LD_VAR 0 5
26608: PUSH
26609: LD_VAR 0 4
26613: MINUS
26614: ST_TO_ADDR
// if y - r < 0 then
26615: LD_VAR 0 6
26619: PUSH
26620: LD_VAR 0 4
26624: MINUS
26625: PUSH
26626: LD_INT 0
26628: LESS
26629: IFFALSE 26641
// min_y := 0 else
26631: LD_ADDR_VAR 0 8
26635: PUSH
26636: LD_INT 0
26638: ST_TO_ADDR
26639: GO 26657
// min_y := y - r ;
26641: LD_ADDR_VAR 0 8
26645: PUSH
26646: LD_VAR 0 6
26650: PUSH
26651: LD_VAR 0 4
26655: MINUS
26656: ST_TO_ADDR
// max_x := x + r ;
26657: LD_ADDR_VAR 0 9
26661: PUSH
26662: LD_VAR 0 5
26666: PUSH
26667: LD_VAR 0 4
26671: PLUS
26672: ST_TO_ADDR
// max_y := y + r ;
26673: LD_ADDR_VAR 0 10
26677: PUSH
26678: LD_VAR 0 6
26682: PUSH
26683: LD_VAR 0 4
26687: PLUS
26688: ST_TO_ADDR
// for _x = min_x to max_x do
26689: LD_ADDR_VAR 0 11
26693: PUSH
26694: DOUBLE
26695: LD_VAR 0 7
26699: DEC
26700: ST_TO_ADDR
26701: LD_VAR 0 9
26705: PUSH
26706: FOR_TO
26707: IFFALSE 26789
// for _y = min_y to max_y do
26709: LD_ADDR_VAR 0 12
26713: PUSH
26714: DOUBLE
26715: LD_VAR 0 8
26719: DEC
26720: ST_TO_ADDR
26721: LD_VAR 0 10
26725: PUSH
26726: FOR_TO
26727: IFFALSE 26785
// begin if not ValidHex ( _x , _y ) then
26729: LD_VAR 0 11
26733: PPUSH
26734: LD_VAR 0 12
26738: PPUSH
26739: CALL_OW 488
26743: NOT
26744: IFFALSE 26748
// continue ;
26746: GO 26726
// if MineAtPos ( _x , _y ) then
26748: LD_VAR 0 11
26752: PPUSH
26753: LD_VAR 0 12
26757: PPUSH
26758: CALL_OW 458
26762: IFFALSE 26783
// ViewMineAtPos ( _x , _y , side ) ;
26764: LD_VAR 0 11
26768: PPUSH
26769: LD_VAR 0 12
26773: PPUSH
26774: LD_VAR 0 3
26778: PPUSH
26779: CALL_OW 457
// end ;
26783: GO 26726
26785: POP
26786: POP
26787: GO 26706
26789: POP
26790: POP
// end ;
26791: LD_VAR 0 2
26795: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
26796: LD_INT 0
26798: PPUSH
26799: PPUSH
26800: PPUSH
26801: PPUSH
26802: PPUSH
26803: PPUSH
26804: PPUSH
// if not units then
26805: LD_VAR 0 1
26809: NOT
26810: IFFALSE 26814
// exit ;
26812: GO 27278
// scaners := [ ] ;
26814: LD_ADDR_VAR 0 6
26818: PUSH
26819: EMPTY
26820: ST_TO_ADDR
// for i in units do
26821: LD_ADDR_VAR 0 3
26825: PUSH
26826: LD_VAR 0 1
26830: PUSH
26831: FOR_IN
26832: IFFALSE 26989
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
26834: LD_VAR 0 3
26838: PPUSH
26839: CALL_OW 264
26843: PUSH
26844: LD_INT 11
26846: NONEQUAL
26847: IFTRUE 26861
26849: PUSH
26850: LD_VAR 0 3
26854: PPUSH
26855: CALL_OW 302
26859: NOT
26860: OR
26861: IFTRUE 26878
26863: PUSH
26864: LD_VAR 0 3
26868: PPUSH
26869: CALL_OW 110
26873: PUSH
26874: LD_INT 502
26876: EQUAL
26877: OR
26878: IFFALSE 26882
// continue ;
26880: GO 26831
// ComStop ( i ) ;
26882: LD_VAR 0 3
26886: PPUSH
26887: CALL_OW 141
// x := GetX ( i ) ;
26891: LD_ADDR_VAR 0 4
26895: PUSH
26896: LD_VAR 0 3
26900: PPUSH
26901: CALL_OW 250
26905: ST_TO_ADDR
// y := GetY ( i ) ;
26906: LD_ADDR_VAR 0 5
26910: PUSH
26911: LD_VAR 0 3
26915: PPUSH
26916: CALL_OW 251
26920: ST_TO_ADDR
// if GetSide ( i ) = your_side then
26921: LD_VAR 0 3
26925: PPUSH
26926: CALL_OW 255
26930: PUSH
26931: LD_OWVAR 2
26935: EQUAL
26936: IFFALSE 26955
// PlaySoundXY ( x , y , mineDetector ) ;
26938: LD_VAR 0 4
26942: PPUSH
26943: LD_VAR 0 5
26947: PPUSH
26948: LD_STRING mineDetector
26950: PPUSH
26951: CALL_OW 366
// scaners := Join ( scaners , i ) ;
26955: LD_ADDR_VAR 0 6
26959: PUSH
26960: LD_VAR 0 6
26964: PPUSH
26965: LD_VAR 0 3
26969: PPUSH
26970: CALL 65510 0 2
26974: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
26975: LD_VAR 0 3
26979: PPUSH
26980: LD_INT 502
26982: PPUSH
26983: CALL_OW 109
// end ;
26987: GO 26831
26989: POP
26990: POP
// if not scaners then
26991: LD_VAR 0 6
26995: NOT
26996: IFFALSE 27000
// exit ;
26998: GO 27278
// wait ( 3 ) ;
27000: LD_INT 3
27002: PPUSH
27003: CALL_OW 67
// timer := 6 ;
27007: LD_ADDR_VAR 0 7
27011: PUSH
27012: LD_INT 6
27014: ST_TO_ADDR
// repeat for i in scaners do
27015: LD_ADDR_VAR 0 3
27019: PUSH
27020: LD_VAR 0 6
27024: PUSH
27025: FOR_IN
27026: IFFALSE 27176
// begin side := GetSide ( i ) ;
27028: LD_ADDR_VAR 0 8
27032: PUSH
27033: LD_VAR 0 3
27037: PPUSH
27038: CALL_OW 255
27042: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
27043: LD_VAR 0 3
27047: PPUSH
27048: CALL_OW 302
27052: NOT
27053: IFTRUE 27066
27055: PUSH
27056: LD_VAR 0 3
27060: PPUSH
27061: CALL_OW 314
27065: OR
27066: IFTRUE 27097
27068: PUSH
27069: LD_VAR 0 3
27073: PPUSH
27074: CALL_OW 263
27078: PUSH
27079: LD_INT 1
27081: EQUAL
27082: IFFALSE 27096
27084: PUSH
27085: LD_VAR 0 3
27089: PPUSH
27090: CALL_OW 311
27094: NOT
27095: AND
27096: OR
27097: IFFALSE 27141
// begin SetUnitDisplayNumber ( i , 0 ) ;
27099: LD_VAR 0 3
27103: PPUSH
27104: LD_INT 0
27106: PPUSH
27107: CALL_OW 505
// SetTag ( i , 0 ) ;
27111: LD_VAR 0 3
27115: PPUSH
27116: LD_INT 0
27118: PPUSH
27119: CALL_OW 109
// scaners := scaners diff i ;
27123: LD_ADDR_VAR 0 6
27127: PUSH
27128: LD_VAR 0 6
27132: PUSH
27133: LD_VAR 0 3
27137: DIFF
27138: ST_TO_ADDR
// continue ;
27139: GO 27025
// end ; if side in [ your_side , 9 ] then
27141: LD_VAR 0 8
27145: PUSH
27146: LD_OWVAR 2
27150: PUSH
27151: LD_INT 9
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: IN
27158: IFFALSE 27174
// SetUnitDisplayNumber ( i , timer ) ;
27160: LD_VAR 0 3
27164: PPUSH
27165: LD_VAR 0 7
27169: PPUSH
27170: CALL_OW 505
// end ;
27174: GO 27025
27176: POP
27177: POP
// if not scaners then
27178: LD_VAR 0 6
27182: NOT
27183: IFFALSE 27187
// exit ;
27185: GO 27278
// timer := Dec ( timer ) ;
27187: LD_ADDR_VAR 0 7
27191: PUSH
27192: LD_VAR 0 7
27196: PPUSH
27197: CALL 66905 0 1
27201: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27202: LD_INT 35
27204: PPUSH
27205: CALL_OW 67
// until timer = 0 ;
27209: LD_VAR 0 7
27213: PUSH
27214: LD_INT 0
27216: EQUAL
27217: IFFALSE 27015
// if not scaners then
27219: LD_VAR 0 6
27223: NOT
27224: IFFALSE 27228
// exit ;
27226: GO 27278
// for i in scaners do
27228: LD_ADDR_VAR 0 3
27232: PUSH
27233: LD_VAR 0 6
27237: PUSH
27238: FOR_IN
27239: IFFALSE 27276
// begin SetUnitDisplayNumber ( i , 0 ) ;
27241: LD_VAR 0 3
27245: PPUSH
27246: LD_INT 0
27248: PPUSH
27249: CALL_OW 505
// SetTag ( i , 0 ) ;
27253: LD_VAR 0 3
27257: PPUSH
27258: LD_INT 0
27260: PPUSH
27261: CALL_OW 109
// RevealDetectorMine ( i ) ;
27265: LD_VAR 0 3
27269: PPUSH
27270: CALL 26498 0 1
// end ;
27274: GO 27238
27276: POP
27277: POP
// end ;
27278: LD_VAR 0 2
27282: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
27283: LD_INT 0
27285: PPUSH
// if p1 = mine_detector_mode then
27286: LD_VAR 0 2
27290: PUSH
27291: LD_INT 103
27293: EQUAL
27294: IFFALSE 27305
// DetectMine ( units ) ;
27296: LD_VAR 0 1
27300: PPUSH
27301: CALL 26796 0 1
// end ; end_of_file end_of_file
27305: LD_VAR 0 7
27309: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27310: LD_INT 0
27312: PPUSH
27313: PPUSH
// if exist_mode then
27314: LD_VAR 0 2
27318: IFFALSE 27364
// begin unit := CreateCharacter ( prefix & ident ) ;
27320: LD_ADDR_VAR 0 5
27324: PUSH
27325: LD_VAR 0 3
27329: PUSH
27330: LD_VAR 0 1
27334: STR
27335: PPUSH
27336: CALL_OW 34
27340: ST_TO_ADDR
// if unit then
27341: LD_VAR 0 5
27345: IFFALSE 27362
// DeleteCharacters ( prefix & ident ) ;
27347: LD_VAR 0 3
27351: PUSH
27352: LD_VAR 0 1
27356: STR
27357: PPUSH
27358: CALL_OW 40
// end else
27362: GO 27379
// unit := NewCharacter ( ident ) ;
27364: LD_ADDR_VAR 0 5
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 25
27378: ST_TO_ADDR
// result := unit ;
27379: LD_ADDR_VAR 0 4
27383: PUSH
27384: LD_VAR 0 5
27388: ST_TO_ADDR
// end ;
27389: LD_VAR 0 4
27393: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
27394: LD_INT 0
27396: PPUSH
27397: PPUSH
// if exist_mode then
27398: LD_VAR 0 2
27402: IFFALSE 27427
// unit := CreateCharacter ( prefix & ident ) else
27404: LD_ADDR_VAR 0 5
27408: PUSH
27409: LD_VAR 0 3
27413: PUSH
27414: LD_VAR 0 1
27418: STR
27419: PPUSH
27420: CALL_OW 34
27424: ST_TO_ADDR
27425: GO 27442
// unit := NewCharacter ( ident ) ;
27427: LD_ADDR_VAR 0 5
27431: PUSH
27432: LD_VAR 0 1
27436: PPUSH
27437: CALL_OW 25
27441: ST_TO_ADDR
// result := unit ;
27442: LD_ADDR_VAR 0 4
27446: PUSH
27447: LD_VAR 0 5
27451: ST_TO_ADDR
// end ;
27452: LD_VAR 0 4
27456: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27457: LD_INT 0
27459: PPUSH
27460: PPUSH
// if not side or not nation then
27461: LD_VAR 0 1
27465: NOT
27466: IFTRUE 27475
27468: PUSH
27469: LD_VAR 0 2
27473: NOT
27474: OR
27475: IFFALSE 27479
// exit ;
27477: GO 28273
// case nation of nation_american :
27479: LD_VAR 0 2
27483: PUSH
27484: LD_INT 1
27486: DOUBLE
27487: EQUAL
27488: IFTRUE 27492
27490: GO 27714
27492: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
27493: LD_ADDR_VAR 0 4
27497: PUSH
27498: LD_INT 35
27500: PUSH
27501: LD_INT 45
27503: PUSH
27504: LD_INT 46
27506: PUSH
27507: LD_INT 47
27509: PUSH
27510: LD_INT 82
27512: PUSH
27513: LD_INT 83
27515: PUSH
27516: LD_INT 84
27518: PUSH
27519: LD_INT 85
27521: PUSH
27522: LD_INT 86
27524: PUSH
27525: LD_INT 1
27527: PUSH
27528: LD_INT 2
27530: PUSH
27531: LD_INT 6
27533: PUSH
27534: LD_INT 15
27536: PUSH
27537: LD_INT 16
27539: PUSH
27540: LD_INT 7
27542: PUSH
27543: LD_INT 12
27545: PUSH
27546: LD_INT 13
27548: PUSH
27549: LD_INT 10
27551: PUSH
27552: LD_INT 14
27554: PUSH
27555: LD_INT 20
27557: PUSH
27558: LD_INT 21
27560: PUSH
27561: LD_INT 22
27563: PUSH
27564: LD_INT 25
27566: PUSH
27567: LD_INT 32
27569: PUSH
27570: LD_INT 27
27572: PUSH
27573: LD_INT 36
27575: PUSH
27576: LD_INT 69
27578: PUSH
27579: LD_INT 39
27581: PUSH
27582: LD_INT 34
27584: PUSH
27585: LD_INT 40
27587: PUSH
27588: LD_INT 48
27590: PUSH
27591: LD_INT 49
27593: PUSH
27594: LD_INT 50
27596: PUSH
27597: LD_INT 51
27599: PUSH
27600: LD_INT 52
27602: PUSH
27603: LD_INT 53
27605: PUSH
27606: LD_INT 54
27608: PUSH
27609: LD_INT 55
27611: PUSH
27612: LD_INT 56
27614: PUSH
27615: LD_INT 57
27617: PUSH
27618: LD_INT 58
27620: PUSH
27621: LD_INT 59
27623: PUSH
27624: LD_INT 60
27626: PUSH
27627: LD_INT 61
27629: PUSH
27630: LD_INT 62
27632: PUSH
27633: LD_INT 80
27635: PUSH
27636: LD_INT 82
27638: PUSH
27639: LD_INT 83
27641: PUSH
27642: LD_INT 84
27644: PUSH
27645: LD_INT 85
27647: PUSH
27648: LD_INT 86
27650: PUSH
27651: LD_INT 90
27653: PUSH
27654: LD_INT 93
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: ST_TO_ADDR
27712: GO 28195
27714: LD_INT 2
27716: DOUBLE
27717: EQUAL
27718: IFTRUE 27722
27720: GO 27956
27722: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
27723: LD_ADDR_VAR 0 4
27727: PUSH
27728: LD_INT 35
27730: PUSH
27731: LD_INT 45
27733: PUSH
27734: LD_INT 46
27736: PUSH
27737: LD_INT 47
27739: PUSH
27740: LD_INT 82
27742: PUSH
27743: LD_INT 83
27745: PUSH
27746: LD_INT 84
27748: PUSH
27749: LD_INT 85
27751: PUSH
27752: LD_INT 87
27754: PUSH
27755: LD_INT 70
27757: PUSH
27758: LD_INT 1
27760: PUSH
27761: LD_INT 11
27763: PUSH
27764: LD_INT 3
27766: PUSH
27767: LD_INT 4
27769: PUSH
27770: LD_INT 5
27772: PUSH
27773: LD_INT 6
27775: PUSH
27776: LD_INT 15
27778: PUSH
27779: LD_INT 18
27781: PUSH
27782: LD_INT 7
27784: PUSH
27785: LD_INT 17
27787: PUSH
27788: LD_INT 8
27790: PUSH
27791: LD_INT 20
27793: PUSH
27794: LD_INT 21
27796: PUSH
27797: LD_INT 22
27799: PUSH
27800: LD_INT 72
27802: PUSH
27803: LD_INT 26
27805: PUSH
27806: LD_INT 69
27808: PUSH
27809: LD_INT 39
27811: PUSH
27812: LD_INT 40
27814: PUSH
27815: LD_INT 41
27817: PUSH
27818: LD_INT 42
27820: PUSH
27821: LD_INT 43
27823: PUSH
27824: LD_INT 48
27826: PUSH
27827: LD_INT 49
27829: PUSH
27830: LD_INT 50
27832: PUSH
27833: LD_INT 51
27835: PUSH
27836: LD_INT 52
27838: PUSH
27839: LD_INT 53
27841: PUSH
27842: LD_INT 54
27844: PUSH
27845: LD_INT 55
27847: PUSH
27848: LD_INT 56
27850: PUSH
27851: LD_INT 60
27853: PUSH
27854: LD_INT 61
27856: PUSH
27857: LD_INT 62
27859: PUSH
27860: LD_INT 66
27862: PUSH
27863: LD_INT 67
27865: PUSH
27866: LD_INT 68
27868: PUSH
27869: LD_INT 81
27871: PUSH
27872: LD_INT 82
27874: PUSH
27875: LD_INT 83
27877: PUSH
27878: LD_INT 84
27880: PUSH
27881: LD_INT 85
27883: PUSH
27884: LD_INT 87
27886: PUSH
27887: LD_INT 88
27889: PUSH
27890: LD_INT 92
27892: PUSH
27893: LD_INT 94
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: ST_TO_ADDR
27954: GO 28195
27956: LD_INT 3
27958: DOUBLE
27959: EQUAL
27960: IFTRUE 27964
27962: GO 28194
27964: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
27965: LD_ADDR_VAR 0 4
27969: PUSH
27970: LD_INT 46
27972: PUSH
27973: LD_INT 47
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: LD_INT 2
27981: PUSH
27982: LD_INT 82
27984: PUSH
27985: LD_INT 83
27987: PUSH
27988: LD_INT 84
27990: PUSH
27991: LD_INT 85
27993: PUSH
27994: LD_INT 86
27996: PUSH
27997: LD_INT 11
27999: PUSH
28000: LD_INT 9
28002: PUSH
28003: LD_INT 20
28005: PUSH
28006: LD_INT 19
28008: PUSH
28009: LD_INT 21
28011: PUSH
28012: LD_INT 24
28014: PUSH
28015: LD_INT 22
28017: PUSH
28018: LD_INT 25
28020: PUSH
28021: LD_INT 28
28023: PUSH
28024: LD_INT 29
28026: PUSH
28027: LD_INT 30
28029: PUSH
28030: LD_INT 31
28032: PUSH
28033: LD_INT 37
28035: PUSH
28036: LD_INT 38
28038: PUSH
28039: LD_INT 32
28041: PUSH
28042: LD_INT 27
28044: PUSH
28045: LD_INT 33
28047: PUSH
28048: LD_INT 69
28050: PUSH
28051: LD_INT 39
28053: PUSH
28054: LD_INT 34
28056: PUSH
28057: LD_INT 40
28059: PUSH
28060: LD_INT 71
28062: PUSH
28063: LD_INT 23
28065: PUSH
28066: LD_INT 44
28068: PUSH
28069: LD_INT 48
28071: PUSH
28072: LD_INT 49
28074: PUSH
28075: LD_INT 50
28077: PUSH
28078: LD_INT 51
28080: PUSH
28081: LD_INT 52
28083: PUSH
28084: LD_INT 53
28086: PUSH
28087: LD_INT 54
28089: PUSH
28090: LD_INT 55
28092: PUSH
28093: LD_INT 56
28095: PUSH
28096: LD_INT 57
28098: PUSH
28099: LD_INT 58
28101: PUSH
28102: LD_INT 59
28104: PUSH
28105: LD_INT 63
28107: PUSH
28108: LD_INT 64
28110: PUSH
28111: LD_INT 65
28113: PUSH
28114: LD_INT 82
28116: PUSH
28117: LD_INT 83
28119: PUSH
28120: LD_INT 84
28122: PUSH
28123: LD_INT 85
28125: PUSH
28126: LD_INT 86
28128: PUSH
28129: LD_INT 89
28131: PUSH
28132: LD_INT 91
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: ST_TO_ADDR
28192: GO 28195
28194: POP
// if state > - 1 and state < 3 then
28195: LD_VAR 0 3
28199: PUSH
28200: LD_INT 1
28202: NEG
28203: GREATER
28204: IFFALSE 28216
28206: PUSH
28207: LD_VAR 0 3
28211: PUSH
28212: LD_INT 3
28214: LESS
28215: AND
28216: IFFALSE 28273
// for i in result do
28218: LD_ADDR_VAR 0 5
28222: PUSH
28223: LD_VAR 0 4
28227: PUSH
28228: FOR_IN
28229: IFFALSE 28271
// if GetTech ( i , side ) <> state then
28231: LD_VAR 0 5
28235: PPUSH
28236: LD_VAR 0 1
28240: PPUSH
28241: CALL_OW 321
28245: PUSH
28246: LD_VAR 0 3
28250: NONEQUAL
28251: IFFALSE 28269
// result := result diff i ;
28253: LD_ADDR_VAR 0 4
28257: PUSH
28258: LD_VAR 0 4
28262: PUSH
28263: LD_VAR 0 5
28267: DIFF
28268: ST_TO_ADDR
28269: GO 28228
28271: POP
28272: POP
// end ;
28273: LD_VAR 0 4
28277: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28278: LD_INT 0
28280: PPUSH
28281: PPUSH
28282: PPUSH
// result := true ;
28283: LD_ADDR_VAR 0 3
28287: PUSH
28288: LD_INT 1
28290: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28291: LD_ADDR_VAR 0 5
28295: PUSH
28296: LD_VAR 0 2
28300: PPUSH
28301: CALL_OW 480
28305: ST_TO_ADDR
// if not tmp then
28306: LD_VAR 0 5
28310: NOT
28311: IFFALSE 28315
// exit ;
28313: GO 28364
// for i in tmp do
28315: LD_ADDR_VAR 0 4
28319: PUSH
28320: LD_VAR 0 5
28324: PUSH
28325: FOR_IN
28326: IFFALSE 28362
// if GetTech ( i , side ) <> state_researched then
28328: LD_VAR 0 4
28332: PPUSH
28333: LD_VAR 0 1
28337: PPUSH
28338: CALL_OW 321
28342: PUSH
28343: LD_INT 2
28345: NONEQUAL
28346: IFFALSE 28360
// begin result := false ;
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_INT 0
28355: ST_TO_ADDR
// exit ;
28356: POP
28357: POP
28358: GO 28364
// end ;
28360: GO 28325
28362: POP
28363: POP
// end ;
28364: LD_VAR 0 3
28368: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28369: LD_INT 0
28371: PPUSH
28372: PPUSH
28373: PPUSH
28374: PPUSH
28375: PPUSH
28376: PPUSH
28377: PPUSH
28378: PPUSH
28379: PPUSH
28380: PPUSH
28381: PPUSH
28382: PPUSH
28383: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28384: LD_VAR 0 1
28388: NOT
28389: IFTRUE 28406
28391: PUSH
28392: LD_VAR 0 1
28396: PPUSH
28397: CALL_OW 257
28401: PUSH
28402: LD_INT 9
28404: NONEQUAL
28405: OR
28406: IFFALSE 28410
// exit ;
28408: GO 28989
// side := GetSide ( unit ) ;
28410: LD_ADDR_VAR 0 9
28414: PUSH
28415: LD_VAR 0 1
28419: PPUSH
28420: CALL_OW 255
28424: ST_TO_ADDR
// tech_space := tech_spacanom ;
28425: LD_ADDR_VAR 0 12
28429: PUSH
28430: LD_INT 29
28432: ST_TO_ADDR
// tech_time := tech_taurad ;
28433: LD_ADDR_VAR 0 13
28437: PUSH
28438: LD_INT 28
28440: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28441: LD_ADDR_VAR 0 11
28445: PUSH
28446: LD_VAR 0 1
28450: PPUSH
28451: CALL_OW 310
28455: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28456: LD_VAR 0 11
28460: PPUSH
28461: CALL_OW 247
28465: PUSH
28466: LD_INT 2
28468: EQUAL
28469: IFFALSE 28473
// exit ;
28471: GO 28989
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28473: LD_ADDR_VAR 0 8
28477: PUSH
28478: LD_INT 81
28480: PUSH
28481: LD_VAR 0 9
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: PUSH
28490: LD_INT 3
28492: PUSH
28493: LD_INT 21
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PPUSH
28511: CALL_OW 69
28515: ST_TO_ADDR
// if not tmp then
28516: LD_VAR 0 8
28520: NOT
28521: IFFALSE 28525
// exit ;
28523: GO 28989
// if in_unit then
28525: LD_VAR 0 11
28529: IFFALSE 28553
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28531: LD_ADDR_VAR 0 10
28535: PUSH
28536: LD_VAR 0 8
28540: PPUSH
28541: LD_VAR 0 11
28545: PPUSH
28546: CALL_OW 74
28550: ST_TO_ADDR
28551: GO 28573
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28553: LD_ADDR_VAR 0 10
28557: PUSH
28558: LD_VAR 0 8
28562: PPUSH
28563: LD_VAR 0 1
28567: PPUSH
28568: CALL_OW 74
28572: ST_TO_ADDR
// if not enemy then
28573: LD_VAR 0 10
28577: NOT
28578: IFFALSE 28582
// exit ;
28580: GO 28989
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28582: LD_VAR 0 11
28586: IFFALSE 28608
28588: PUSH
28589: LD_VAR 0 11
28593: PPUSH
28594: LD_VAR 0 10
28598: PPUSH
28599: CALL_OW 296
28603: PUSH
28604: LD_INT 13
28606: GREATER
28607: AND
28608: IFTRUE 28630
28610: PUSH
28611: LD_VAR 0 1
28615: PPUSH
28616: LD_VAR 0 10
28620: PPUSH
28621: CALL_OW 296
28625: PUSH
28626: LD_INT 12
28628: GREATER
28629: OR
28630: IFFALSE 28634
// exit ;
28632: GO 28989
// missile := [ 1 ] ;
28634: LD_ADDR_VAR 0 14
28638: PUSH
28639: LD_INT 1
28641: PUSH
28642: EMPTY
28643: LIST
28644: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28645: LD_VAR 0 9
28649: PPUSH
28650: LD_VAR 0 12
28654: PPUSH
28655: CALL_OW 325
28659: IFFALSE 28688
// missile := Replace ( missile , missile + 1 , 2 ) ;
28661: LD_ADDR_VAR 0 14
28665: PUSH
28666: LD_VAR 0 14
28670: PPUSH
28671: LD_VAR 0 14
28675: PUSH
28676: LD_INT 1
28678: PLUS
28679: PPUSH
28680: LD_INT 2
28682: PPUSH
28683: CALL_OW 1
28687: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28688: LD_VAR 0 9
28692: PPUSH
28693: LD_VAR 0 13
28697: PPUSH
28698: CALL_OW 325
28702: IFFALSE 28726
28704: PUSH
28705: LD_VAR 0 10
28709: PPUSH
28710: CALL_OW 255
28714: PPUSH
28715: LD_VAR 0 13
28719: PPUSH
28720: CALL_OW 325
28724: NOT
28725: AND
28726: IFFALSE 28755
// missile := Replace ( missile , missile + 1 , 3 ) ;
28728: LD_ADDR_VAR 0 14
28732: PUSH
28733: LD_VAR 0 14
28737: PPUSH
28738: LD_VAR 0 14
28742: PUSH
28743: LD_INT 1
28745: PLUS
28746: PPUSH
28747: LD_INT 3
28749: PPUSH
28750: CALL_OW 1
28754: ST_TO_ADDR
// if missile < 2 then
28755: LD_VAR 0 14
28759: PUSH
28760: LD_INT 2
28762: LESS
28763: IFFALSE 28767
// exit ;
28765: GO 28989
// x := GetX ( enemy ) ;
28767: LD_ADDR_VAR 0 4
28771: PUSH
28772: LD_VAR 0 10
28776: PPUSH
28777: CALL_OW 250
28781: ST_TO_ADDR
// y := GetY ( enemy ) ;
28782: LD_ADDR_VAR 0 5
28786: PUSH
28787: LD_VAR 0 10
28791: PPUSH
28792: CALL_OW 251
28796: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28797: LD_ADDR_VAR 0 6
28801: PUSH
28802: LD_VAR 0 4
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: PPUSH
28811: LD_INT 1
28813: PPUSH
28814: CALL_OW 12
28818: PLUS
28819: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28820: LD_ADDR_VAR 0 7
28824: PUSH
28825: LD_VAR 0 5
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PPUSH
28834: LD_INT 1
28836: PPUSH
28837: CALL_OW 12
28841: PLUS
28842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28843: LD_VAR 0 6
28847: PPUSH
28848: LD_VAR 0 7
28852: PPUSH
28853: CALL_OW 488
28857: NOT
28858: IFFALSE 28880
// begin _x := x ;
28860: LD_ADDR_VAR 0 6
28864: PUSH
28865: LD_VAR 0 4
28869: ST_TO_ADDR
// _y := y ;
28870: LD_ADDR_VAR 0 7
28874: PUSH
28875: LD_VAR 0 5
28879: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28880: LD_ADDR_VAR 0 3
28884: PUSH
28885: LD_INT 1
28887: PPUSH
28888: LD_VAR 0 14
28892: PPUSH
28893: CALL_OW 12
28897: ST_TO_ADDR
// case i of 1 :
28898: LD_VAR 0 3
28902: PUSH
28903: LD_INT 1
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28928
28911: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28912: LD_VAR 0 1
28916: PPUSH
28917: LD_VAR 0 10
28921: PPUSH
28922: CALL_OW 115
28926: GO 28989
28928: LD_INT 2
28930: DOUBLE
28931: EQUAL
28932: IFTRUE 28936
28934: GO 28958
28936: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28937: LD_VAR 0 1
28941: PPUSH
28942: LD_VAR 0 6
28946: PPUSH
28947: LD_VAR 0 7
28951: PPUSH
28952: CALL_OW 153
28956: GO 28989
28958: LD_INT 3
28960: DOUBLE
28961: EQUAL
28962: IFTRUE 28966
28964: GO 28988
28966: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28967: LD_VAR 0 1
28971: PPUSH
28972: LD_VAR 0 6
28976: PPUSH
28977: LD_VAR 0 7
28981: PPUSH
28982: CALL_OW 154
28986: GO 28989
28988: POP
// end ;
28989: LD_VAR 0 2
28993: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28994: LD_INT 0
28996: PPUSH
28997: PPUSH
28998: PPUSH
28999: PPUSH
29000: PPUSH
29001: PPUSH
// if not unit or not building then
29002: LD_VAR 0 1
29006: NOT
29007: IFTRUE 29016
29009: PUSH
29010: LD_VAR 0 2
29014: NOT
29015: OR
29016: IFFALSE 29020
// exit ;
29018: GO 29178
// x := GetX ( building ) ;
29020: LD_ADDR_VAR 0 5
29024: PUSH
29025: LD_VAR 0 2
29029: PPUSH
29030: CALL_OW 250
29034: ST_TO_ADDR
// y := GetY ( building ) ;
29035: LD_ADDR_VAR 0 6
29039: PUSH
29040: LD_VAR 0 2
29044: PPUSH
29045: CALL_OW 251
29049: ST_TO_ADDR
// for i := 0 to 5 do
29050: LD_ADDR_VAR 0 4
29054: PUSH
29055: DOUBLE
29056: LD_INT 0
29058: DEC
29059: ST_TO_ADDR
29060: LD_INT 5
29062: PUSH
29063: FOR_TO
29064: IFFALSE 29176
// begin _x := ShiftX ( x , i , 3 ) ;
29066: LD_ADDR_VAR 0 7
29070: PUSH
29071: LD_VAR 0 5
29075: PPUSH
29076: LD_VAR 0 4
29080: PPUSH
29081: LD_INT 3
29083: PPUSH
29084: CALL_OW 272
29088: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29089: LD_ADDR_VAR 0 8
29093: PUSH
29094: LD_VAR 0 6
29098: PPUSH
29099: LD_VAR 0 4
29103: PPUSH
29104: LD_INT 3
29106: PPUSH
29107: CALL_OW 273
29111: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29112: LD_VAR 0 7
29116: PPUSH
29117: LD_VAR 0 8
29121: PPUSH
29122: CALL_OW 488
29126: NOT
29127: IFFALSE 29131
// continue ;
29129: GO 29063
// if HexInfo ( _x , _y ) = 0 then
29131: LD_VAR 0 7
29135: PPUSH
29136: LD_VAR 0 8
29140: PPUSH
29141: CALL_OW 428
29145: PUSH
29146: LD_INT 0
29148: EQUAL
29149: IFFALSE 29174
// begin ComMoveXY ( unit , _x , _y ) ;
29151: LD_VAR 0 1
29155: PPUSH
29156: LD_VAR 0 7
29160: PPUSH
29161: LD_VAR 0 8
29165: PPUSH
29166: CALL_OW 111
// exit ;
29170: POP
29171: POP
29172: GO 29178
// end ; end ;
29174: GO 29063
29176: POP
29177: POP
// end ;
29178: LD_VAR 0 3
29182: RET
// export function ScanBase ( side , base_area ) ; begin
29183: LD_INT 0
29185: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29186: LD_ADDR_VAR 0 3
29190: PUSH
29191: LD_VAR 0 2
29195: PPUSH
29196: LD_INT 81
29198: PUSH
29199: LD_VAR 0 1
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PPUSH
29208: CALL_OW 70
29212: ST_TO_ADDR
// end ;
29213: LD_VAR 0 3
29217: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29218: LD_INT 0
29220: PPUSH
29221: PPUSH
29222: PPUSH
29223: PPUSH
// result := false ;
29224: LD_ADDR_VAR 0 2
29228: PUSH
29229: LD_INT 0
29231: ST_TO_ADDR
// side := GetSide ( unit ) ;
29232: LD_ADDR_VAR 0 3
29236: PUSH
29237: LD_VAR 0 1
29241: PPUSH
29242: CALL_OW 255
29246: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29247: LD_ADDR_VAR 0 4
29251: PUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL_OW 248
29261: ST_TO_ADDR
// case nat of 1 :
29262: LD_VAR 0 4
29266: PUSH
29267: LD_INT 1
29269: DOUBLE
29270: EQUAL
29271: IFTRUE 29275
29273: GO 29286
29275: POP
// tech := tech_lassight ; 2 :
29276: LD_ADDR_VAR 0 5
29280: PUSH
29281: LD_INT 12
29283: ST_TO_ADDR
29284: GO 29325
29286: LD_INT 2
29288: DOUBLE
29289: EQUAL
29290: IFTRUE 29294
29292: GO 29305
29294: POP
// tech := tech_mortar ; 3 :
29295: LD_ADDR_VAR 0 5
29299: PUSH
29300: LD_INT 41
29302: ST_TO_ADDR
29303: GO 29325
29305: LD_INT 3
29307: DOUBLE
29308: EQUAL
29309: IFTRUE 29313
29311: GO 29324
29313: POP
// tech := tech_bazooka ; end ;
29314: LD_ADDR_VAR 0 5
29318: PUSH
29319: LD_INT 44
29321: ST_TO_ADDR
29322: GO 29325
29324: POP
// if Researched ( side , tech ) then
29325: LD_VAR 0 3
29329: PPUSH
29330: LD_VAR 0 5
29334: PPUSH
29335: CALL_OW 325
29339: IFFALSE 29366
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29341: LD_ADDR_VAR 0 2
29345: PUSH
29346: LD_INT 5
29348: PUSH
29349: LD_INT 8
29351: PUSH
29352: LD_INT 9
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: PUSH
29360: LD_VAR 0 4
29364: ARRAY
29365: ST_TO_ADDR
// end ;
29366: LD_VAR 0 2
29370: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29371: LD_INT 0
29373: PPUSH
29374: PPUSH
29375: PPUSH
// if not mines then
29376: LD_VAR 0 2
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 29529
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29385: LD_ADDR_VAR 0 5
29389: PUSH
29390: LD_INT 81
29392: PUSH
29393: LD_VAR 0 1
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 3
29404: PUSH
29405: LD_INT 21
29407: PUSH
29408: LD_INT 3
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PPUSH
29423: CALL_OW 69
29427: ST_TO_ADDR
// for i in mines do
29428: LD_ADDR_VAR 0 4
29432: PUSH
29433: LD_VAR 0 2
29437: PUSH
29438: FOR_IN
29439: IFFALSE 29527
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29441: LD_VAR 0 4
29445: PUSH
29446: LD_INT 1
29448: ARRAY
29449: PPUSH
29450: LD_VAR 0 4
29454: PUSH
29455: LD_INT 2
29457: ARRAY
29458: PPUSH
29459: CALL_OW 458
29463: NOT
29464: IFFALSE 29468
// continue ;
29466: GO 29438
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29468: LD_VAR 0 4
29472: PUSH
29473: LD_INT 1
29475: ARRAY
29476: PPUSH
29477: LD_VAR 0 4
29481: PUSH
29482: LD_INT 2
29484: ARRAY
29485: PPUSH
29486: CALL_OW 428
29490: PUSH
29491: LD_VAR 0 5
29495: IN
29496: IFFALSE 29525
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29498: LD_VAR 0 4
29502: PUSH
29503: LD_INT 1
29505: ARRAY
29506: PPUSH
29507: LD_VAR 0 4
29511: PUSH
29512: LD_INT 2
29514: ARRAY
29515: PPUSH
29516: LD_VAR 0 1
29520: PPUSH
29521: CALL_OW 456
// end ;
29525: GO 29438
29527: POP
29528: POP
// end ;
29529: LD_VAR 0 3
29533: RET
// export function Count ( array ) ; begin
29534: LD_INT 0
29536: PPUSH
// result := array + 0 ;
29537: LD_ADDR_VAR 0 2
29541: PUSH
29542: LD_VAR 0 1
29546: PUSH
29547: LD_INT 0
29549: PLUS
29550: ST_TO_ADDR
// end ;
29551: LD_VAR 0 2
29555: RET
// export function IsEmpty ( building ) ; begin
29556: LD_INT 0
29558: PPUSH
// if not building then
29559: LD_VAR 0 1
29563: NOT
29564: IFFALSE 29568
// exit ;
29566: GO 29611
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29568: LD_ADDR_VAR 0 2
29572: PUSH
29573: LD_VAR 0 1
29577: PUSH
29578: LD_INT 22
29580: PUSH
29581: LD_VAR 0 1
29585: PPUSH
29586: CALL_OW 255
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 58
29597: PUSH
29598: EMPTY
29599: LIST
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PPUSH
29605: CALL_OW 69
29609: IN
29610: ST_TO_ADDR
// end ;
29611: LD_VAR 0 2
29615: RET
// export function IsNotFull ( building ) ; var places ; begin
29616: LD_INT 0
29618: PPUSH
29619: PPUSH
// if not building then
29620: LD_VAR 0 1
29624: NOT
29625: IFFALSE 29629
// exit ;
29627: GO 29657
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29629: LD_ADDR_VAR 0 2
29633: PUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: LD_INT 3
29641: PUSH
29642: LD_INT 62
29644: PUSH
29645: EMPTY
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PPUSH
29652: CALL_OW 72
29656: ST_TO_ADDR
// end ;
29657: LD_VAR 0 2
29661: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29662: LD_INT 0
29664: PPUSH
29665: PPUSH
29666: PPUSH
29667: PPUSH
// tmp := [ ] ;
29668: LD_ADDR_VAR 0 3
29672: PUSH
29673: EMPTY
29674: ST_TO_ADDR
// list := [ ] ;
29675: LD_ADDR_VAR 0 5
29679: PUSH
29680: EMPTY
29681: ST_TO_ADDR
// for i = 16 to 25 do
29682: LD_ADDR_VAR 0 4
29686: PUSH
29687: DOUBLE
29688: LD_INT 16
29690: DEC
29691: ST_TO_ADDR
29692: LD_INT 25
29694: PUSH
29695: FOR_TO
29696: IFFALSE 29769
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29698: LD_ADDR_VAR 0 3
29702: PUSH
29703: LD_VAR 0 3
29707: PUSH
29708: LD_INT 22
29710: PUSH
29711: LD_VAR 0 1
29715: PPUSH
29716: CALL_OW 255
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PUSH
29725: LD_INT 91
29727: PUSH
29728: LD_VAR 0 1
29732: PUSH
29733: LD_INT 6
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 30
29743: PUSH
29744: LD_VAR 0 4
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: LIST
29757: PUSH
29758: EMPTY
29759: LIST
29760: PPUSH
29761: CALL_OW 69
29765: ADD
29766: ST_TO_ADDR
29767: GO 29695
29769: POP
29770: POP
// for i = 1 to tmp do
29771: LD_ADDR_VAR 0 4
29775: PUSH
29776: DOUBLE
29777: LD_INT 1
29779: DEC
29780: ST_TO_ADDR
29781: LD_VAR 0 3
29785: PUSH
29786: FOR_TO
29787: IFFALSE 29875
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29789: LD_ADDR_VAR 0 5
29793: PUSH
29794: LD_VAR 0 5
29798: PUSH
29799: LD_VAR 0 3
29803: PUSH
29804: LD_VAR 0 4
29808: ARRAY
29809: PPUSH
29810: CALL_OW 266
29814: PUSH
29815: LD_VAR 0 3
29819: PUSH
29820: LD_VAR 0 4
29824: ARRAY
29825: PPUSH
29826: CALL_OW 250
29830: PUSH
29831: LD_VAR 0 3
29835: PUSH
29836: LD_VAR 0 4
29840: ARRAY
29841: PPUSH
29842: CALL_OW 251
29846: PUSH
29847: LD_VAR 0 3
29851: PUSH
29852: LD_VAR 0 4
29856: ARRAY
29857: PPUSH
29858: CALL_OW 254
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: PUSH
29869: EMPTY
29870: LIST
29871: ADD
29872: ST_TO_ADDR
29873: GO 29786
29875: POP
29876: POP
// result := list ;
29877: LD_ADDR_VAR 0 2
29881: PUSH
29882: LD_VAR 0 5
29886: ST_TO_ADDR
// end ;
29887: LD_VAR 0 2
29891: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29892: LD_INT 0
29894: PPUSH
29895: PPUSH
29896: PPUSH
29897: PPUSH
29898: PPUSH
29899: PPUSH
29900: PPUSH
// if not factory then
29901: LD_VAR 0 1
29905: NOT
29906: IFFALSE 29910
// exit ;
29908: GO 30513
// if control = control_apeman then
29910: LD_VAR 0 4
29914: PUSH
29915: LD_INT 5
29917: EQUAL
29918: IFFALSE 30027
// begin tmp := UnitsInside ( factory ) ;
29920: LD_ADDR_VAR 0 8
29924: PUSH
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 313
29934: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29935: LD_VAR 0 8
29939: PPUSH
29940: LD_INT 25
29942: PUSH
29943: LD_INT 12
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PPUSH
29950: CALL_OW 72
29954: NOT
29955: IFFALSE 29965
// control := control_manual ;
29957: LD_ADDR_VAR 0 4
29961: PUSH
29962: LD_INT 1
29964: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29965: LD_ADDR_VAR 0 8
29969: PUSH
29970: LD_VAR 0 1
29974: PPUSH
29975: CALL 29662 0 1
29979: ST_TO_ADDR
// if tmp then
29980: LD_VAR 0 8
29984: IFFALSE 30027
// begin for i in tmp do
29986: LD_ADDR_VAR 0 7
29990: PUSH
29991: LD_VAR 0 8
29995: PUSH
29996: FOR_IN
29997: IFFALSE 30025
// if i [ 1 ] = b_ext_radio then
29999: LD_VAR 0 7
30003: PUSH
30004: LD_INT 1
30006: ARRAY
30007: PUSH
30008: LD_INT 22
30010: EQUAL
30011: IFFALSE 30023
// begin control := control_remote ;
30013: LD_ADDR_VAR 0 4
30017: PUSH
30018: LD_INT 2
30020: ST_TO_ADDR
// break ;
30021: GO 30025
// end ;
30023: GO 29996
30025: POP
30026: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30027: LD_VAR 0 1
30031: PPUSH
30032: LD_VAR 0 2
30036: PPUSH
30037: LD_VAR 0 3
30041: PPUSH
30042: LD_VAR 0 4
30046: PPUSH
30047: LD_VAR 0 5
30051: PPUSH
30052: CALL_OW 448
30056: IFFALSE 30091
// begin result := [ chassis , engine , control , weapon ] ;
30058: LD_ADDR_VAR 0 6
30062: PUSH
30063: LD_VAR 0 2
30067: PUSH
30068: LD_VAR 0 3
30072: PUSH
30073: LD_VAR 0 4
30077: PUSH
30078: LD_VAR 0 5
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: LIST
30088: ST_TO_ADDR
// exit ;
30089: GO 30513
// end ; _chassis := AvailableChassisList ( factory ) ;
30091: LD_ADDR_VAR 0 9
30095: PUSH
30096: LD_VAR 0 1
30100: PPUSH
30101: CALL_OW 475
30105: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30106: LD_ADDR_VAR 0 11
30110: PUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 476
30120: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30121: LD_ADDR_VAR 0 12
30125: PUSH
30126: LD_VAR 0 1
30130: PPUSH
30131: CALL_OW 477
30135: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30136: LD_ADDR_VAR 0 10
30140: PUSH
30141: LD_VAR 0 1
30145: PPUSH
30146: CALL_OW 478
30150: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30151: LD_VAR 0 9
30155: NOT
30156: IFTRUE 30165
30158: PUSH
30159: LD_VAR 0 11
30163: NOT
30164: OR
30165: IFTRUE 30174
30167: PUSH
30168: LD_VAR 0 12
30172: NOT
30173: OR
30174: IFTRUE 30183
30176: PUSH
30177: LD_VAR 0 10
30181: NOT
30182: OR
30183: IFFALSE 30218
// begin result := [ chassis , engine , control , weapon ] ;
30185: LD_ADDR_VAR 0 6
30189: PUSH
30190: LD_VAR 0 2
30194: PUSH
30195: LD_VAR 0 3
30199: PUSH
30200: LD_VAR 0 4
30204: PUSH
30205: LD_VAR 0 5
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: ST_TO_ADDR
// exit ;
30216: GO 30513
// end ; if not chassis in _chassis then
30218: LD_VAR 0 2
30222: PUSH
30223: LD_VAR 0 9
30227: IN
30228: NOT
30229: IFFALSE 30255
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30231: LD_ADDR_VAR 0 2
30235: PUSH
30236: LD_VAR 0 9
30240: PUSH
30241: LD_INT 1
30243: PPUSH
30244: LD_VAR 0 9
30248: PPUSH
30249: CALL_OW 12
30253: ARRAY
30254: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30255: LD_VAR 0 2
30259: PPUSH
30260: LD_VAR 0 3
30264: PPUSH
30265: CALL 30518 0 2
30269: NOT
30270: IFFALSE 30331
// repeat engine := _engine [ 1 ] ;
30272: LD_ADDR_VAR 0 3
30276: PUSH
30277: LD_VAR 0 11
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30286: LD_ADDR_VAR 0 11
30290: PUSH
30291: LD_VAR 0 11
30295: PPUSH
30296: LD_INT 1
30298: PPUSH
30299: CALL_OW 3
30303: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30304: LD_VAR 0 2
30308: PPUSH
30309: LD_VAR 0 3
30313: PPUSH
30314: CALL 30518 0 2
30318: IFTRUE 30329
30320: PUSH
30321: LD_VAR 0 11
30325: PUSH
30326: EMPTY
30327: EQUAL
30328: OR
30329: IFFALSE 30272
// if not control in _control then
30331: LD_VAR 0 4
30335: PUSH
30336: LD_VAR 0 12
30340: IN
30341: NOT
30342: IFFALSE 30368
// control := _control [ rand ( 1 , _control ) ] ;
30344: LD_ADDR_VAR 0 4
30348: PUSH
30349: LD_VAR 0 12
30353: PUSH
30354: LD_INT 1
30356: PPUSH
30357: LD_VAR 0 12
30361: PPUSH
30362: CALL_OW 12
30366: ARRAY
30367: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30368: LD_VAR 0 2
30372: PPUSH
30373: LD_VAR 0 5
30377: PPUSH
30378: CALL 30740 0 2
30382: NOT
30383: IFFALSE 30444
// repeat weapon := _weapon [ 1 ] ;
30385: LD_ADDR_VAR 0 5
30389: PUSH
30390: LD_VAR 0 10
30394: PUSH
30395: LD_INT 1
30397: ARRAY
30398: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30399: LD_ADDR_VAR 0 10
30403: PUSH
30404: LD_VAR 0 10
30408: PPUSH
30409: LD_INT 1
30411: PPUSH
30412: CALL_OW 3
30416: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30417: LD_VAR 0 2
30421: PPUSH
30422: LD_VAR 0 5
30426: PPUSH
30427: CALL 30740 0 2
30431: IFTRUE 30442
30433: PUSH
30434: LD_VAR 0 10
30438: PUSH
30439: EMPTY
30440: EQUAL
30441: OR
30442: IFFALSE 30385
// result := [ ] ;
30444: LD_ADDR_VAR 0 6
30448: PUSH
30449: EMPTY
30450: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30451: LD_VAR 0 1
30455: PPUSH
30456: LD_VAR 0 2
30460: PPUSH
30461: LD_VAR 0 3
30465: PPUSH
30466: LD_VAR 0 4
30470: PPUSH
30471: LD_VAR 0 5
30475: PPUSH
30476: CALL_OW 448
30480: IFFALSE 30513
// result := [ chassis , engine , control , weapon ] ;
30482: LD_ADDR_VAR 0 6
30486: PUSH
30487: LD_VAR 0 2
30491: PUSH
30492: LD_VAR 0 3
30496: PUSH
30497: LD_VAR 0 4
30501: PUSH
30502: LD_VAR 0 5
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: ST_TO_ADDR
// end ;
30513: LD_VAR 0 6
30517: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30518: LD_INT 0
30520: PPUSH
// if not chassis or not engine then
30521: LD_VAR 0 1
30525: NOT
30526: IFTRUE 30535
30528: PUSH
30529: LD_VAR 0 2
30533: NOT
30534: OR
30535: IFFALSE 30539
// exit ;
30537: GO 30735
// case engine of engine_solar :
30539: LD_VAR 0 2
30543: PUSH
30544: LD_INT 2
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30590
30552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_INT 11
30560: PUSH
30561: LD_INT 12
30563: PUSH
30564: LD_INT 13
30566: PUSH
30567: LD_INT 14
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: LD_INT 3
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: ST_TO_ADDR
30588: GO 30719
30590: LD_INT 1
30592: DOUBLE
30593: EQUAL
30594: IFTRUE 30598
30596: GO 30660
30598: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_INT 11
30606: PUSH
30607: LD_INT 12
30609: PUSH
30610: LD_INT 13
30612: PUSH
30613: LD_INT 14
30615: PUSH
30616: LD_INT 1
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 3
30624: PUSH
30625: LD_INT 4
30627: PUSH
30628: LD_INT 5
30630: PUSH
30631: LD_INT 21
30633: PUSH
30634: LD_INT 23
30636: PUSH
30637: LD_INT 22
30639: PUSH
30640: LD_INT 24
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: ST_TO_ADDR
30658: GO 30719
30660: LD_INT 3
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30718
30668: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 13
30676: PUSH
30677: LD_INT 14
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: LD_INT 3
30685: PUSH
30686: LD_INT 4
30688: PUSH
30689: LD_INT 5
30691: PUSH
30692: LD_INT 21
30694: PUSH
30695: LD_INT 22
30697: PUSH
30698: LD_INT 23
30700: PUSH
30701: LD_INT 24
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: ST_TO_ADDR
30716: GO 30719
30718: POP
// result := ( chassis in result ) ;
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: LD_VAR 0 1
30728: PUSH
30729: LD_VAR 0 3
30733: IN
30734: ST_TO_ADDR
// end ;
30735: LD_VAR 0 3
30739: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30740: LD_INT 0
30742: PPUSH
// if not chassis or not weapon then
30743: LD_VAR 0 1
30747: NOT
30748: IFTRUE 30757
30750: PUSH
30751: LD_VAR 0 2
30755: NOT
30756: OR
30757: IFFALSE 30761
// exit ;
30759: GO 31855
// case weapon of us_machine_gun :
30761: LD_VAR 0 2
30765: PUSH
30766: LD_INT 2
30768: DOUBLE
30769: EQUAL
30770: IFTRUE 30774
30772: GO 30804
30774: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30775: LD_ADDR_VAR 0 3
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: LD_INT 4
30791: PUSH
30792: LD_INT 5
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: ST_TO_ADDR
30802: GO 31839
30804: LD_INT 3
30806: DOUBLE
30807: EQUAL
30808: IFTRUE 30812
30810: GO 30842
30812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30813: LD_ADDR_VAR 0 3
30817: PUSH
30818: LD_INT 1
30820: PUSH
30821: LD_INT 2
30823: PUSH
30824: LD_INT 3
30826: PUSH
30827: LD_INT 4
30829: PUSH
30830: LD_INT 5
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: ST_TO_ADDR
30840: GO 31839
30842: LD_INT 11
30844: DOUBLE
30845: EQUAL
30846: IFTRUE 30850
30848: GO 30880
30850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30851: LD_ADDR_VAR 0 3
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: LD_INT 2
30861: PUSH
30862: LD_INT 3
30864: PUSH
30865: LD_INT 4
30867: PUSH
30868: LD_INT 5
30870: PUSH
30871: EMPTY
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: ST_TO_ADDR
30878: GO 31839
30880: LD_INT 4
30882: DOUBLE
30883: EQUAL
30884: IFTRUE 30888
30886: GO 30914
30888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30889: LD_ADDR_VAR 0 3
30893: PUSH
30894: LD_INT 2
30896: PUSH
30897: LD_INT 3
30899: PUSH
30900: LD_INT 4
30902: PUSH
30903: LD_INT 5
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: ST_TO_ADDR
30912: GO 31839
30914: LD_INT 5
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30948
30922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30923: LD_ADDR_VAR 0 3
30927: PUSH
30928: LD_INT 2
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: LD_INT 4
30936: PUSH
30937: LD_INT 5
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: ST_TO_ADDR
30946: GO 31839
30948: LD_INT 9
30950: DOUBLE
30951: EQUAL
30952: IFTRUE 30956
30954: GO 30982
30956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30957: LD_ADDR_VAR 0 3
30961: PUSH
30962: LD_INT 2
30964: PUSH
30965: LD_INT 3
30967: PUSH
30968: LD_INT 4
30970: PUSH
30971: LD_INT 5
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: ST_TO_ADDR
30980: GO 31839
30982: LD_INT 7
30984: DOUBLE
30985: EQUAL
30986: IFTRUE 30990
30988: GO 31016
30990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30991: LD_ADDR_VAR 0 3
30995: PUSH
30996: LD_INT 2
30998: PUSH
30999: LD_INT 3
31001: PUSH
31002: LD_INT 4
31004: PUSH
31005: LD_INT 5
31007: PUSH
31008: EMPTY
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: ST_TO_ADDR
31014: GO 31839
31016: LD_INT 12
31018: DOUBLE
31019: EQUAL
31020: IFTRUE 31024
31022: GO 31050
31024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 3
31035: PUSH
31036: LD_INT 4
31038: PUSH
31039: LD_INT 5
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: ST_TO_ADDR
31048: GO 31839
31050: LD_INT 13
31052: DOUBLE
31053: EQUAL
31054: IFTRUE 31058
31056: GO 31084
31058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31059: LD_ADDR_VAR 0 3
31063: PUSH
31064: LD_INT 2
31066: PUSH
31067: LD_INT 3
31069: PUSH
31070: LD_INT 4
31072: PUSH
31073: LD_INT 5
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: ST_TO_ADDR
31082: GO 31839
31084: LD_INT 14
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31110
31092: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31093: LD_ADDR_VAR 0 3
31097: PUSH
31098: LD_INT 4
31100: PUSH
31101: LD_INT 5
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: ST_TO_ADDR
31108: GO 31839
31110: LD_INT 6
31112: DOUBLE
31113: EQUAL
31114: IFTRUE 31118
31116: GO 31136
31118: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_INT 4
31126: PUSH
31127: LD_INT 5
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: ST_TO_ADDR
31134: GO 31839
31136: LD_INT 10
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31162
31144: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31145: LD_ADDR_VAR 0 3
31149: PUSH
31150: LD_INT 4
31152: PUSH
31153: LD_INT 5
31155: PUSH
31156: EMPTY
31157: LIST
31158: LIST
31159: ST_TO_ADDR
31160: GO 31839
31162: LD_INT 22
31164: DOUBLE
31165: EQUAL
31166: IFTRUE 31170
31168: GO 31196
31170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31171: LD_ADDR_VAR 0 3
31175: PUSH
31176: LD_INT 11
31178: PUSH
31179: LD_INT 12
31181: PUSH
31182: LD_INT 13
31184: PUSH
31185: LD_INT 14
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: ST_TO_ADDR
31194: GO 31839
31196: LD_INT 23
31198: DOUBLE
31199: EQUAL
31200: IFTRUE 31204
31202: GO 31230
31204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31205: LD_ADDR_VAR 0 3
31209: PUSH
31210: LD_INT 11
31212: PUSH
31213: LD_INT 12
31215: PUSH
31216: LD_INT 13
31218: PUSH
31219: LD_INT 14
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: ST_TO_ADDR
31228: GO 31839
31230: LD_INT 24
31232: DOUBLE
31233: EQUAL
31234: IFTRUE 31238
31236: GO 31264
31238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31239: LD_ADDR_VAR 0 3
31243: PUSH
31244: LD_INT 11
31246: PUSH
31247: LD_INT 12
31249: PUSH
31250: LD_INT 13
31252: PUSH
31253: LD_INT 14
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: ST_TO_ADDR
31262: GO 31839
31264: LD_INT 30
31266: DOUBLE
31267: EQUAL
31268: IFTRUE 31272
31270: GO 31298
31272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31273: LD_ADDR_VAR 0 3
31277: PUSH
31278: LD_INT 11
31280: PUSH
31281: LD_INT 12
31283: PUSH
31284: LD_INT 13
31286: PUSH
31287: LD_INT 14
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: ST_TO_ADDR
31296: GO 31839
31298: LD_INT 25
31300: DOUBLE
31301: EQUAL
31302: IFTRUE 31306
31304: GO 31324
31306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31307: LD_ADDR_VAR 0 3
31311: PUSH
31312: LD_INT 13
31314: PUSH
31315: LD_INT 14
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: ST_TO_ADDR
31322: GO 31839
31324: LD_INT 27
31326: DOUBLE
31327: EQUAL
31328: IFTRUE 31332
31330: GO 31350
31332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31333: LD_ADDR_VAR 0 3
31337: PUSH
31338: LD_INT 13
31340: PUSH
31341: LD_INT 14
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: ST_TO_ADDR
31348: GO 31839
31350: LD_INT 92
31352: DOUBLE
31353: EQUAL
31354: IFTRUE 31358
31356: GO 31384
31358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31359: LD_ADDR_VAR 0 3
31363: PUSH
31364: LD_INT 11
31366: PUSH
31367: LD_INT 12
31369: PUSH
31370: LD_INT 13
31372: PUSH
31373: LD_INT 14
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: ST_TO_ADDR
31382: GO 31839
31384: LD_INT 28
31386: DOUBLE
31387: EQUAL
31388: IFTRUE 31392
31390: GO 31410
31392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: LD_INT 13
31400: PUSH
31401: LD_INT 14
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: ST_TO_ADDR
31408: GO 31839
31410: LD_INT 29
31412: DOUBLE
31413: EQUAL
31414: IFTRUE 31418
31416: GO 31436
31418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31419: LD_ADDR_VAR 0 3
31423: PUSH
31424: LD_INT 13
31426: PUSH
31427: LD_INT 14
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: ST_TO_ADDR
31434: GO 31839
31436: LD_INT 31
31438: DOUBLE
31439: EQUAL
31440: IFTRUE 31444
31442: GO 31462
31444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31445: LD_ADDR_VAR 0 3
31449: PUSH
31450: LD_INT 13
31452: PUSH
31453: LD_INT 14
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: ST_TO_ADDR
31460: GO 31839
31462: LD_INT 26
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31488
31470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31471: LD_ADDR_VAR 0 3
31475: PUSH
31476: LD_INT 13
31478: PUSH
31479: LD_INT 14
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: ST_TO_ADDR
31486: GO 31839
31488: LD_INT 42
31490: DOUBLE
31491: EQUAL
31492: IFTRUE 31496
31494: GO 31522
31496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31497: LD_ADDR_VAR 0 3
31501: PUSH
31502: LD_INT 21
31504: PUSH
31505: LD_INT 22
31507: PUSH
31508: LD_INT 23
31510: PUSH
31511: LD_INT 24
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: ST_TO_ADDR
31520: GO 31839
31522: LD_INT 43
31524: DOUBLE
31525: EQUAL
31526: IFTRUE 31530
31528: GO 31556
31530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31531: LD_ADDR_VAR 0 3
31535: PUSH
31536: LD_INT 21
31538: PUSH
31539: LD_INT 22
31541: PUSH
31542: LD_INT 23
31544: PUSH
31545: LD_INT 24
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: ST_TO_ADDR
31554: GO 31839
31556: LD_INT 44
31558: DOUBLE
31559: EQUAL
31560: IFTRUE 31564
31562: GO 31590
31564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31565: LD_ADDR_VAR 0 3
31569: PUSH
31570: LD_INT 21
31572: PUSH
31573: LD_INT 22
31575: PUSH
31576: LD_INT 23
31578: PUSH
31579: LD_INT 24
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: ST_TO_ADDR
31588: GO 31839
31590: LD_INT 45
31592: DOUBLE
31593: EQUAL
31594: IFTRUE 31598
31596: GO 31624
31598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31599: LD_ADDR_VAR 0 3
31603: PUSH
31604: LD_INT 21
31606: PUSH
31607: LD_INT 22
31609: PUSH
31610: LD_INT 23
31612: PUSH
31613: LD_INT 24
31615: PUSH
31616: EMPTY
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: ST_TO_ADDR
31622: GO 31839
31624: LD_INT 49
31626: DOUBLE
31627: EQUAL
31628: IFTRUE 31632
31630: GO 31658
31632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31633: LD_ADDR_VAR 0 3
31637: PUSH
31638: LD_INT 21
31640: PUSH
31641: LD_INT 22
31643: PUSH
31644: LD_INT 23
31646: PUSH
31647: LD_INT 24
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: ST_TO_ADDR
31656: GO 31839
31658: LD_INT 51
31660: DOUBLE
31661: EQUAL
31662: IFTRUE 31666
31664: GO 31692
31666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31667: LD_ADDR_VAR 0 3
31671: PUSH
31672: LD_INT 21
31674: PUSH
31675: LD_INT 22
31677: PUSH
31678: LD_INT 23
31680: PUSH
31681: LD_INT 24
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: ST_TO_ADDR
31690: GO 31839
31692: LD_INT 52
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31726
31700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31701: LD_ADDR_VAR 0 3
31705: PUSH
31706: LD_INT 21
31708: PUSH
31709: LD_INT 22
31711: PUSH
31712: LD_INT 23
31714: PUSH
31715: LD_INT 24
31717: PUSH
31718: EMPTY
31719: LIST
31720: LIST
31721: LIST
31722: LIST
31723: ST_TO_ADDR
31724: GO 31839
31726: LD_INT 53
31728: DOUBLE
31729: EQUAL
31730: IFTRUE 31734
31732: GO 31752
31734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_INT 23
31742: PUSH
31743: LD_INT 24
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: ST_TO_ADDR
31750: GO 31839
31752: LD_INT 46
31754: DOUBLE
31755: EQUAL
31756: IFTRUE 31760
31758: GO 31778
31760: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31761: LD_ADDR_VAR 0 3
31765: PUSH
31766: LD_INT 23
31768: PUSH
31769: LD_INT 24
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: ST_TO_ADDR
31776: GO 31839
31778: LD_INT 47
31780: DOUBLE
31781: EQUAL
31782: IFTRUE 31786
31784: GO 31804
31786: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
31787: LD_ADDR_VAR 0 3
31791: PUSH
31792: LD_INT 23
31794: PUSH
31795: LD_INT 24
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: ST_TO_ADDR
31802: GO 31839
31804: LD_INT 98
31806: DOUBLE
31807: EQUAL
31808: IFTRUE 31812
31810: GO 31838
31812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31813: LD_ADDR_VAR 0 3
31817: PUSH
31818: LD_INT 21
31820: PUSH
31821: LD_INT 22
31823: PUSH
31824: LD_INT 23
31826: PUSH
31827: LD_INT 24
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: ST_TO_ADDR
31836: GO 31839
31838: POP
// result := ( chassis in result ) ;
31839: LD_ADDR_VAR 0 3
31843: PUSH
31844: LD_VAR 0 1
31848: PUSH
31849: LD_VAR 0 3
31853: IN
31854: ST_TO_ADDR
// end ;
31855: LD_VAR 0 3
31859: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31860: LD_INT 0
31862: PPUSH
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
// result := array ;
31869: LD_ADDR_VAR 0 5
31873: PUSH
31874: LD_VAR 0 1
31878: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31879: LD_VAR 0 1
31883: NOT
31884: IFTRUE 31893
31886: PUSH
31887: LD_VAR 0 2
31891: NOT
31892: OR
31893: IFTRUE 31902
31895: PUSH
31896: LD_VAR 0 3
31900: NOT
31901: OR
31902: IFTRUE 31916
31904: PUSH
31905: LD_VAR 0 2
31909: PUSH
31910: LD_VAR 0 1
31914: GREATER
31915: OR
31916: IFTRUE 31930
31918: PUSH
31919: LD_VAR 0 3
31923: PUSH
31924: LD_VAR 0 1
31928: GREATER
31929: OR
31930: IFFALSE 31934
// exit ;
31932: GO 32230
// if direction then
31934: LD_VAR 0 4
31938: IFFALSE 32002
// begin d := 1 ;
31940: LD_ADDR_VAR 0 9
31944: PUSH
31945: LD_INT 1
31947: ST_TO_ADDR
// if i_from > i_to then
31948: LD_VAR 0 2
31952: PUSH
31953: LD_VAR 0 3
31957: GREATER
31958: IFFALSE 31984
// length := ( array - i_from ) + i_to else
31960: LD_ADDR_VAR 0 11
31964: PUSH
31965: LD_VAR 0 1
31969: PUSH
31970: LD_VAR 0 2
31974: MINUS
31975: PUSH
31976: LD_VAR 0 3
31980: PLUS
31981: ST_TO_ADDR
31982: GO 32000
// length := i_to - i_from ;
31984: LD_ADDR_VAR 0 11
31988: PUSH
31989: LD_VAR 0 3
31993: PUSH
31994: LD_VAR 0 2
31998: MINUS
31999: ST_TO_ADDR
// end else
32000: GO 32063
// begin d := - 1 ;
32002: LD_ADDR_VAR 0 9
32006: PUSH
32007: LD_INT 1
32009: NEG
32010: ST_TO_ADDR
// if i_from > i_to then
32011: LD_VAR 0 2
32015: PUSH
32016: LD_VAR 0 3
32020: GREATER
32021: IFFALSE 32041
// length := i_from - i_to else
32023: LD_ADDR_VAR 0 11
32027: PUSH
32028: LD_VAR 0 2
32032: PUSH
32033: LD_VAR 0 3
32037: MINUS
32038: ST_TO_ADDR
32039: GO 32063
// length := ( array - i_to ) + i_from ;
32041: LD_ADDR_VAR 0 11
32045: PUSH
32046: LD_VAR 0 1
32050: PUSH
32051: LD_VAR 0 3
32055: MINUS
32056: PUSH
32057: LD_VAR 0 2
32061: PLUS
32062: ST_TO_ADDR
// end ; if not length then
32063: LD_VAR 0 11
32067: NOT
32068: IFFALSE 32072
// exit ;
32070: GO 32230
// tmp := array ;
32072: LD_ADDR_VAR 0 10
32076: PUSH
32077: LD_VAR 0 1
32081: ST_TO_ADDR
// for i = 1 to length do
32082: LD_ADDR_VAR 0 6
32086: PUSH
32087: DOUBLE
32088: LD_INT 1
32090: DEC
32091: ST_TO_ADDR
32092: LD_VAR 0 11
32096: PUSH
32097: FOR_TO
32098: IFFALSE 32218
// begin for j = 1 to array do
32100: LD_ADDR_VAR 0 7
32104: PUSH
32105: DOUBLE
32106: LD_INT 1
32108: DEC
32109: ST_TO_ADDR
32110: LD_VAR 0 1
32114: PUSH
32115: FOR_TO
32116: IFFALSE 32204
// begin k := j + d ;
32118: LD_ADDR_VAR 0 8
32122: PUSH
32123: LD_VAR 0 7
32127: PUSH
32128: LD_VAR 0 9
32132: PLUS
32133: ST_TO_ADDR
// if k > array then
32134: LD_VAR 0 8
32138: PUSH
32139: LD_VAR 0 1
32143: GREATER
32144: IFFALSE 32154
// k := 1 ;
32146: LD_ADDR_VAR 0 8
32150: PUSH
32151: LD_INT 1
32153: ST_TO_ADDR
// if not k then
32154: LD_VAR 0 8
32158: NOT
32159: IFFALSE 32171
// k := array ;
32161: LD_ADDR_VAR 0 8
32165: PUSH
32166: LD_VAR 0 1
32170: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32171: LD_ADDR_VAR 0 10
32175: PUSH
32176: LD_VAR 0 10
32180: PPUSH
32181: LD_VAR 0 8
32185: PPUSH
32186: LD_VAR 0 1
32190: PUSH
32191: LD_VAR 0 7
32195: ARRAY
32196: PPUSH
32197: CALL_OW 1
32201: ST_TO_ADDR
// end ;
32202: GO 32115
32204: POP
32205: POP
// array := tmp ;
32206: LD_ADDR_VAR 0 1
32210: PUSH
32211: LD_VAR 0 10
32215: ST_TO_ADDR
// end ;
32216: GO 32097
32218: POP
32219: POP
// result := array ;
32220: LD_ADDR_VAR 0 5
32224: PUSH
32225: LD_VAR 0 1
32229: ST_TO_ADDR
// end ;
32230: LD_VAR 0 5
32234: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32235: LD_INT 0
32237: PPUSH
32238: PPUSH
// result := 0 ;
32239: LD_ADDR_VAR 0 3
32243: PUSH
32244: LD_INT 0
32246: ST_TO_ADDR
// if not array or not value in array then
32247: LD_VAR 0 1
32251: NOT
32252: IFTRUE 32267
32254: PUSH
32255: LD_VAR 0 2
32259: PUSH
32260: LD_VAR 0 1
32264: IN
32265: NOT
32266: OR
32267: IFFALSE 32271
// exit ;
32269: GO 32325
// for i = 1 to array do
32271: LD_ADDR_VAR 0 4
32275: PUSH
32276: DOUBLE
32277: LD_INT 1
32279: DEC
32280: ST_TO_ADDR
32281: LD_VAR 0 1
32285: PUSH
32286: FOR_TO
32287: IFFALSE 32323
// if value = array [ i ] then
32289: LD_VAR 0 2
32293: PUSH
32294: LD_VAR 0 1
32298: PUSH
32299: LD_VAR 0 4
32303: ARRAY
32304: EQUAL
32305: IFFALSE 32321
// begin result := i ;
32307: LD_ADDR_VAR 0 3
32311: PUSH
32312: LD_VAR 0 4
32316: ST_TO_ADDR
// exit ;
32317: POP
32318: POP
32319: GO 32325
// end ;
32321: GO 32286
32323: POP
32324: POP
// end ;
32325: LD_VAR 0 3
32329: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32330: LD_INT 0
32332: PPUSH
// vc_chassis := chassis ;
32333: LD_ADDR_OWVAR 37
32337: PUSH
32338: LD_VAR 0 1
32342: ST_TO_ADDR
// vc_engine := engine ;
32343: LD_ADDR_OWVAR 39
32347: PUSH
32348: LD_VAR 0 2
32352: ST_TO_ADDR
// vc_control := control ;
32353: LD_ADDR_OWVAR 38
32357: PUSH
32358: LD_VAR 0 3
32362: ST_TO_ADDR
// vc_weapon := weapon ;
32363: LD_ADDR_OWVAR 40
32367: PUSH
32368: LD_VAR 0 4
32372: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32373: LD_ADDR_OWVAR 41
32377: PUSH
32378: LD_VAR 0 5
32382: ST_TO_ADDR
// end ;
32383: LD_VAR 0 6
32387: RET
// export function WantPlant ( unit ) ; var task ; begin
32388: LD_INT 0
32390: PPUSH
32391: PPUSH
// result := false ;
32392: LD_ADDR_VAR 0 2
32396: PUSH
32397: LD_INT 0
32399: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32400: LD_ADDR_VAR 0 3
32404: PUSH
32405: LD_VAR 0 1
32409: PPUSH
32410: CALL_OW 437
32414: ST_TO_ADDR
// if task then
32415: LD_VAR 0 3
32419: IFFALSE 32447
// if task [ 1 ] [ 1 ] = p then
32421: LD_VAR 0 3
32425: PUSH
32426: LD_INT 1
32428: ARRAY
32429: PUSH
32430: LD_INT 1
32432: ARRAY
32433: PUSH
32434: LD_STRING p
32436: EQUAL
32437: IFFALSE 32447
// result := true ;
32439: LD_ADDR_VAR 0 2
32443: PUSH
32444: LD_INT 1
32446: ST_TO_ADDR
// end ;
32447: LD_VAR 0 2
32451: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32452: LD_INT 0
32454: PPUSH
32455: PPUSH
32456: PPUSH
32457: PPUSH
// if pos < 1 then
32458: LD_VAR 0 2
32462: PUSH
32463: LD_INT 1
32465: LESS
32466: IFFALSE 32470
// exit ;
32468: GO 32773
// if pos = 1 then
32470: LD_VAR 0 2
32474: PUSH
32475: LD_INT 1
32477: EQUAL
32478: IFFALSE 32511
// result := Replace ( arr , pos [ 1 ] , value ) else
32480: LD_ADDR_VAR 0 4
32484: PUSH
32485: LD_VAR 0 1
32489: PPUSH
32490: LD_VAR 0 2
32494: PUSH
32495: LD_INT 1
32497: ARRAY
32498: PPUSH
32499: LD_VAR 0 3
32503: PPUSH
32504: CALL_OW 1
32508: ST_TO_ADDR
32509: GO 32773
// begin tmp := arr ;
32511: LD_ADDR_VAR 0 6
32515: PUSH
32516: LD_VAR 0 1
32520: ST_TO_ADDR
// s_arr := [ tmp ] ;
32521: LD_ADDR_VAR 0 7
32525: PUSH
32526: LD_VAR 0 6
32530: PUSH
32531: EMPTY
32532: LIST
32533: ST_TO_ADDR
// for i = 1 to pos - 1 do
32534: LD_ADDR_VAR 0 5
32538: PUSH
32539: DOUBLE
32540: LD_INT 1
32542: DEC
32543: ST_TO_ADDR
32544: LD_VAR 0 2
32548: PUSH
32549: LD_INT 1
32551: MINUS
32552: PUSH
32553: FOR_TO
32554: IFFALSE 32599
// begin tmp := tmp [ pos [ i ] ] ;
32556: LD_ADDR_VAR 0 6
32560: PUSH
32561: LD_VAR 0 6
32565: PUSH
32566: LD_VAR 0 2
32570: PUSH
32571: LD_VAR 0 5
32575: ARRAY
32576: ARRAY
32577: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32578: LD_ADDR_VAR 0 7
32582: PUSH
32583: LD_VAR 0 7
32587: PUSH
32588: LD_VAR 0 6
32592: PUSH
32593: EMPTY
32594: LIST
32595: ADD
32596: ST_TO_ADDR
// end ;
32597: GO 32553
32599: POP
32600: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32601: LD_ADDR_VAR 0 6
32605: PUSH
32606: LD_VAR 0 6
32610: PPUSH
32611: LD_VAR 0 2
32615: PUSH
32616: LD_VAR 0 2
32620: ARRAY
32621: PPUSH
32622: LD_VAR 0 3
32626: PPUSH
32627: CALL_OW 1
32631: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32632: LD_ADDR_VAR 0 7
32636: PUSH
32637: LD_VAR 0 7
32641: PPUSH
32642: LD_VAR 0 7
32646: PPUSH
32647: LD_VAR 0 6
32651: PPUSH
32652: CALL_OW 1
32656: ST_TO_ADDR
// for i = s_arr downto 2 do
32657: LD_ADDR_VAR 0 5
32661: PUSH
32662: DOUBLE
32663: LD_VAR 0 7
32667: INC
32668: ST_TO_ADDR
32669: LD_INT 2
32671: PUSH
32672: FOR_DOWNTO
32673: IFFALSE 32757
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32675: LD_ADDR_VAR 0 6
32679: PUSH
32680: LD_VAR 0 7
32684: PUSH
32685: LD_VAR 0 5
32689: PUSH
32690: LD_INT 1
32692: MINUS
32693: ARRAY
32694: PPUSH
32695: LD_VAR 0 2
32699: PUSH
32700: LD_VAR 0 5
32704: PUSH
32705: LD_INT 1
32707: MINUS
32708: ARRAY
32709: PPUSH
32710: LD_VAR 0 7
32714: PUSH
32715: LD_VAR 0 5
32719: ARRAY
32720: PPUSH
32721: CALL_OW 1
32725: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32726: LD_ADDR_VAR 0 7
32730: PUSH
32731: LD_VAR 0 7
32735: PPUSH
32736: LD_VAR 0 5
32740: PUSH
32741: LD_INT 1
32743: MINUS
32744: PPUSH
32745: LD_VAR 0 6
32749: PPUSH
32750: CALL_OW 1
32754: ST_TO_ADDR
// end ;
32755: GO 32672
32757: POP
32758: POP
// result := s_arr [ 1 ] ;
32759: LD_ADDR_VAR 0 4
32763: PUSH
32764: LD_VAR 0 7
32768: PUSH
32769: LD_INT 1
32771: ARRAY
32772: ST_TO_ADDR
// end ; end ;
32773: LD_VAR 0 4
32777: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32778: LD_INT 0
32780: PPUSH
32781: PPUSH
// if not list then
32782: LD_VAR 0 1
32786: NOT
32787: IFFALSE 32791
// exit ;
32789: GO 32882
// i := list [ pos1 ] ;
32791: LD_ADDR_VAR 0 5
32795: PUSH
32796: LD_VAR 0 1
32800: PUSH
32801: LD_VAR 0 2
32805: ARRAY
32806: ST_TO_ADDR
// if not i then
32807: LD_VAR 0 5
32811: NOT
32812: IFFALSE 32816
// exit ;
32814: GO 32882
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32816: LD_ADDR_VAR 0 1
32820: PUSH
32821: LD_VAR 0 1
32825: PPUSH
32826: LD_VAR 0 2
32830: PPUSH
32831: LD_VAR 0 1
32835: PUSH
32836: LD_VAR 0 3
32840: ARRAY
32841: PPUSH
32842: CALL_OW 1
32846: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32847: LD_ADDR_VAR 0 1
32851: PUSH
32852: LD_VAR 0 1
32856: PPUSH
32857: LD_VAR 0 3
32861: PPUSH
32862: LD_VAR 0 5
32866: PPUSH
32867: CALL_OW 1
32871: ST_TO_ADDR
// result := list ;
32872: LD_ADDR_VAR 0 4
32876: PUSH
32877: LD_VAR 0 1
32881: ST_TO_ADDR
// end ;
32882: LD_VAR 0 4
32886: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32887: LD_INT 0
32889: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32890: LD_ADDR_VAR 0 5
32894: PUSH
32895: LD_VAR 0 1
32899: PPUSH
32900: CALL_OW 250
32904: PPUSH
32905: LD_VAR 0 1
32909: PPUSH
32910: CALL_OW 251
32914: PPUSH
32915: LD_VAR 0 2
32919: PPUSH
32920: LD_VAR 0 3
32924: PPUSH
32925: LD_VAR 0 4
32929: PPUSH
32930: CALL 33312 0 5
32934: ST_TO_ADDR
// end ;
32935: LD_VAR 0 5
32939: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32940: LD_INT 0
32942: PPUSH
32943: PPUSH
32944: PPUSH
32945: PPUSH
// if not list or not unit then
32946: LD_VAR 0 2
32950: NOT
32951: IFTRUE 32960
32953: PUSH
32954: LD_VAR 0 1
32958: NOT
32959: OR
32960: IFFALSE 32964
// exit ;
32962: GO 33307
// result := [ ] ;
32964: LD_ADDR_VAR 0 5
32968: PUSH
32969: EMPTY
32970: ST_TO_ADDR
// for i in list do
32971: LD_ADDR_VAR 0 6
32975: PUSH
32976: LD_VAR 0 2
32980: PUSH
32981: FOR_IN
32982: IFFALSE 33200
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32984: LD_ADDR_VAR 0 8
32988: PUSH
32989: LD_VAR 0 1
32993: PPUSH
32994: LD_VAR 0 6
32998: PUSH
32999: LD_INT 1
33001: ARRAY
33002: PPUSH
33003: LD_VAR 0 6
33007: PUSH
33008: LD_INT 2
33010: ARRAY
33011: PPUSH
33012: CALL_OW 297
33016: ST_TO_ADDR
// if not Count ( result ) then
33017: LD_VAR 0 5
33021: PPUSH
33022: CALL 29534 0 1
33026: NOT
33027: IFFALSE 33060
// begin result := Join ( result , [ i , tmp ] ) ;
33029: LD_ADDR_VAR 0 5
33033: PUSH
33034: LD_VAR 0 5
33038: PPUSH
33039: LD_VAR 0 6
33043: PUSH
33044: LD_VAR 0 8
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PPUSH
33053: CALL 65510 0 2
33057: ST_TO_ADDR
// continue ;
33058: GO 32981
// end ; if result [ result ] [ 2 ] <= tmp then
33060: LD_VAR 0 5
33064: PUSH
33065: LD_VAR 0 5
33069: ARRAY
33070: PUSH
33071: LD_INT 2
33073: ARRAY
33074: PUSH
33075: LD_VAR 0 8
33079: LESSEQUAL
33080: IFFALSE 33113
// result := Join ( result , [ i , tmp ] ) else
33082: LD_ADDR_VAR 0 5
33086: PUSH
33087: LD_VAR 0 5
33091: PPUSH
33092: LD_VAR 0 6
33096: PUSH
33097: LD_VAR 0 8
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PPUSH
33106: CALL 65510 0 2
33110: ST_TO_ADDR
33111: GO 33198
// begin for j := 1 to Count ( result ) do
33113: LD_ADDR_VAR 0 7
33117: PUSH
33118: DOUBLE
33119: LD_INT 1
33121: DEC
33122: ST_TO_ADDR
33123: LD_VAR 0 5
33127: PPUSH
33128: CALL 29534 0 1
33132: PUSH
33133: FOR_TO
33134: IFFALSE 33196
// begin if tmp < result [ j ] [ 2 ] then
33136: LD_VAR 0 8
33140: PUSH
33141: LD_VAR 0 5
33145: PUSH
33146: LD_VAR 0 7
33150: ARRAY
33151: PUSH
33152: LD_INT 2
33154: ARRAY
33155: LESS
33156: IFFALSE 33194
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33158: LD_ADDR_VAR 0 5
33162: PUSH
33163: LD_VAR 0 5
33167: PPUSH
33168: LD_VAR 0 7
33172: PPUSH
33173: LD_VAR 0 6
33177: PUSH
33178: LD_VAR 0 8
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PPUSH
33187: CALL_OW 2
33191: ST_TO_ADDR
// break ;
33192: GO 33196
// end ; end ;
33194: GO 33133
33196: POP
33197: POP
// end ; end ;
33198: GO 32981
33200: POP
33201: POP
// if result and not asc then
33202: LD_VAR 0 5
33206: IFFALSE 33215
33208: PUSH
33209: LD_VAR 0 3
33213: NOT
33214: AND
33215: IFFALSE 33232
// result := ReverseArray ( result ) ;
33217: LD_ADDR_VAR 0 5
33221: PUSH
33222: LD_VAR 0 5
33226: PPUSH
33227: CALL 60590 0 1
33231: ST_TO_ADDR
// tmp := [ ] ;
33232: LD_ADDR_VAR 0 8
33236: PUSH
33237: EMPTY
33238: ST_TO_ADDR
// if mode then
33239: LD_VAR 0 4
33243: IFFALSE 33307
// begin for i := 1 to result do
33245: LD_ADDR_VAR 0 6
33249: PUSH
33250: DOUBLE
33251: LD_INT 1
33253: DEC
33254: ST_TO_ADDR
33255: LD_VAR 0 5
33259: PUSH
33260: FOR_TO
33261: IFFALSE 33295
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33263: LD_ADDR_VAR 0 8
33267: PUSH
33268: LD_VAR 0 8
33272: PPUSH
33273: LD_VAR 0 5
33277: PUSH
33278: LD_VAR 0 6
33282: ARRAY
33283: PUSH
33284: LD_INT 1
33286: ARRAY
33287: PPUSH
33288: CALL 65510 0 2
33292: ST_TO_ADDR
33293: GO 33260
33295: POP
33296: POP
// result := tmp ;
33297: LD_ADDR_VAR 0 5
33301: PUSH
33302: LD_VAR 0 8
33306: ST_TO_ADDR
// end ; end ;
33307: LD_VAR 0 5
33311: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33312: LD_INT 0
33314: PPUSH
33315: PPUSH
33316: PPUSH
33317: PPUSH
// if not list then
33318: LD_VAR 0 3
33322: NOT
33323: IFFALSE 33327
// exit ;
33325: GO 33717
// result := [ ] ;
33327: LD_ADDR_VAR 0 6
33331: PUSH
33332: EMPTY
33333: ST_TO_ADDR
// for i in list do
33334: LD_ADDR_VAR 0 7
33338: PUSH
33339: LD_VAR 0 3
33343: PUSH
33344: FOR_IN
33345: IFFALSE 33547
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33347: LD_ADDR_VAR 0 9
33351: PUSH
33352: LD_VAR 0 7
33356: PPUSH
33357: LD_VAR 0 1
33361: PPUSH
33362: LD_VAR 0 2
33366: PPUSH
33367: CALL_OW 297
33371: ST_TO_ADDR
// if not result then
33372: LD_VAR 0 6
33376: NOT
33377: IFFALSE 33403
// result := [ [ i , tmp ] ] else
33379: LD_ADDR_VAR 0 6
33383: PUSH
33384: LD_VAR 0 7
33388: PUSH
33389: LD_VAR 0 9
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: EMPTY
33399: LIST
33400: ST_TO_ADDR
33401: GO 33545
// begin if result [ result ] [ 2 ] <= tmp then
33403: LD_VAR 0 6
33407: PUSH
33408: LD_VAR 0 6
33412: ARRAY
33413: PUSH
33414: LD_INT 2
33416: ARRAY
33417: PUSH
33418: LD_VAR 0 9
33422: LESSEQUAL
33423: IFFALSE 33465
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33425: LD_ADDR_VAR 0 6
33429: PUSH
33430: LD_VAR 0 6
33434: PPUSH
33435: LD_VAR 0 6
33439: PUSH
33440: LD_INT 1
33442: PLUS
33443: PPUSH
33444: LD_VAR 0 7
33448: PUSH
33449: LD_VAR 0 9
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PPUSH
33458: CALL_OW 2
33462: ST_TO_ADDR
33463: GO 33545
// for j := 1 to result do
33465: LD_ADDR_VAR 0 8
33469: PUSH
33470: DOUBLE
33471: LD_INT 1
33473: DEC
33474: ST_TO_ADDR
33475: LD_VAR 0 6
33479: PUSH
33480: FOR_TO
33481: IFFALSE 33543
// begin if tmp < result [ j ] [ 2 ] then
33483: LD_VAR 0 9
33487: PUSH
33488: LD_VAR 0 6
33492: PUSH
33493: LD_VAR 0 8
33497: ARRAY
33498: PUSH
33499: LD_INT 2
33501: ARRAY
33502: LESS
33503: IFFALSE 33541
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33505: LD_ADDR_VAR 0 6
33509: PUSH
33510: LD_VAR 0 6
33514: PPUSH
33515: LD_VAR 0 8
33519: PPUSH
33520: LD_VAR 0 7
33524: PUSH
33525: LD_VAR 0 9
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PPUSH
33534: CALL_OW 2
33538: ST_TO_ADDR
// break ;
33539: GO 33543
// end ; end ;
33541: GO 33480
33543: POP
33544: POP
// end ; end ;
33545: GO 33344
33547: POP
33548: POP
// if result and not asc then
33549: LD_VAR 0 6
33553: IFFALSE 33562
33555: PUSH
33556: LD_VAR 0 4
33560: NOT
33561: AND
33562: IFFALSE 33637
// begin tmp := result ;
33564: LD_ADDR_VAR 0 9
33568: PUSH
33569: LD_VAR 0 6
33573: ST_TO_ADDR
// for i = tmp downto 1 do
33574: LD_ADDR_VAR 0 7
33578: PUSH
33579: DOUBLE
33580: LD_VAR 0 9
33584: INC
33585: ST_TO_ADDR
33586: LD_INT 1
33588: PUSH
33589: FOR_DOWNTO
33590: IFFALSE 33635
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33592: LD_ADDR_VAR 0 6
33596: PUSH
33597: LD_VAR 0 6
33601: PPUSH
33602: LD_VAR 0 9
33606: PUSH
33607: LD_VAR 0 7
33611: MINUS
33612: PUSH
33613: LD_INT 1
33615: PLUS
33616: PPUSH
33617: LD_VAR 0 9
33621: PUSH
33622: LD_VAR 0 7
33626: ARRAY
33627: PPUSH
33628: CALL_OW 1
33632: ST_TO_ADDR
33633: GO 33589
33635: POP
33636: POP
// end ; tmp := [ ] ;
33637: LD_ADDR_VAR 0 9
33641: PUSH
33642: EMPTY
33643: ST_TO_ADDR
// if mode then
33644: LD_VAR 0 5
33648: IFFALSE 33717
// begin for i = 1 to result do
33650: LD_ADDR_VAR 0 7
33654: PUSH
33655: DOUBLE
33656: LD_INT 1
33658: DEC
33659: ST_TO_ADDR
33660: LD_VAR 0 6
33664: PUSH
33665: FOR_TO
33666: IFFALSE 33705
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33668: LD_ADDR_VAR 0 9
33672: PUSH
33673: LD_VAR 0 9
33677: PPUSH
33678: LD_VAR 0 7
33682: PPUSH
33683: LD_VAR 0 6
33687: PUSH
33688: LD_VAR 0 7
33692: ARRAY
33693: PUSH
33694: LD_INT 1
33696: ARRAY
33697: PPUSH
33698: CALL_OW 1
33702: ST_TO_ADDR
33703: GO 33665
33705: POP
33706: POP
// result := tmp ;
33707: LD_ADDR_VAR 0 6
33711: PUSH
33712: LD_VAR 0 9
33716: ST_TO_ADDR
// end ; end ;
33717: LD_VAR 0 6
33721: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33722: LD_INT 0
33724: PPUSH
33725: PPUSH
33726: PPUSH
33727: PPUSH
33728: PPUSH
33729: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33730: LD_ADDR_VAR 0 5
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: LD_INT 0
33740: PUSH
33741: LD_INT 0
33743: PUSH
33744: EMPTY
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
// if not x or not y then
33752: LD_VAR 0 2
33756: NOT
33757: IFTRUE 33766
33759: PUSH
33760: LD_VAR 0 3
33764: NOT
33765: OR
33766: IFFALSE 33770
// exit ;
33768: GO 35426
// if not range then
33770: LD_VAR 0 4
33774: NOT
33775: IFFALSE 33785
// range := 10 ;
33777: LD_ADDR_VAR 0 4
33781: PUSH
33782: LD_INT 10
33784: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33785: LD_ADDR_VAR 0 8
33789: PUSH
33790: LD_INT 81
33792: PUSH
33793: LD_VAR 0 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 92
33804: PUSH
33805: LD_VAR 0 2
33809: PUSH
33810: LD_VAR 0 3
33814: PUSH
33815: LD_VAR 0 4
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 3
33828: PUSH
33829: LD_INT 21
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: LIST
33847: PPUSH
33848: CALL_OW 69
33852: ST_TO_ADDR
// if not tmp then
33853: LD_VAR 0 8
33857: NOT
33858: IFFALSE 33862
// exit ;
33860: GO 35426
// for i in tmp do
33862: LD_ADDR_VAR 0 6
33866: PUSH
33867: LD_VAR 0 8
33871: PUSH
33872: FOR_IN
33873: IFFALSE 35401
// begin points := [ 0 , 0 , 0 ] ;
33875: LD_ADDR_VAR 0 9
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: LD_INT 0
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: ST_TO_ADDR
// bpoints := 1 ;
33894: LD_ADDR_VAR 0 10
33898: PUSH
33899: LD_INT 1
33901: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33902: LD_VAR 0 6
33906: PPUSH
33907: CALL_OW 247
33911: PUSH
33912: LD_INT 1
33914: DOUBLE
33915: EQUAL
33916: IFTRUE 33920
33918: GO 34502
33920: POP
// begin if GetClass ( i ) = 1 then
33921: LD_VAR 0 6
33925: PPUSH
33926: CALL_OW 257
33930: PUSH
33931: LD_INT 1
33933: EQUAL
33934: IFFALSE 33955
// points := [ 10 , 5 , 3 ] ;
33936: LD_ADDR_VAR 0 9
33940: PUSH
33941: LD_INT 10
33943: PUSH
33944: LD_INT 5
33946: PUSH
33947: LD_INT 3
33949: PUSH
33950: EMPTY
33951: LIST
33952: LIST
33953: LIST
33954: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33955: LD_VAR 0 6
33959: PPUSH
33960: CALL_OW 257
33964: PUSH
33965: LD_INT 2
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: LD_INT 4
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: LIST
33978: IN
33979: IFFALSE 34000
// points := [ 3 , 2 , 1 ] ;
33981: LD_ADDR_VAR 0 9
33985: PUSH
33986: LD_INT 3
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: LIST
33999: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34000: LD_VAR 0 6
34004: PPUSH
34005: CALL_OW 257
34009: PUSH
34010: LD_INT 5
34012: EQUAL
34013: IFFALSE 34034
// points := [ 130 , 5 , 2 ] ;
34015: LD_ADDR_VAR 0 9
34019: PUSH
34020: LD_INT 130
34022: PUSH
34023: LD_INT 5
34025: PUSH
34026: LD_INT 2
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34034: LD_VAR 0 6
34038: PPUSH
34039: CALL_OW 257
34043: PUSH
34044: LD_INT 8
34046: EQUAL
34047: IFFALSE 34068
// points := [ 35 , 35 , 30 ] ;
34049: LD_ADDR_VAR 0 9
34053: PUSH
34054: LD_INT 35
34056: PUSH
34057: LD_INT 35
34059: PUSH
34060: LD_INT 30
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: LIST
34067: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34068: LD_VAR 0 6
34072: PPUSH
34073: CALL_OW 257
34077: PUSH
34078: LD_INT 9
34080: EQUAL
34081: IFFALSE 34102
// points := [ 20 , 55 , 40 ] ;
34083: LD_ADDR_VAR 0 9
34087: PUSH
34088: LD_INT 20
34090: PUSH
34091: LD_INT 55
34093: PUSH
34094: LD_INT 40
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: LIST
34101: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34102: LD_VAR 0 6
34106: PPUSH
34107: CALL_OW 257
34111: PUSH
34112: LD_INT 12
34114: PUSH
34115: LD_INT 16
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: IN
34122: IFFALSE 34143
// points := [ 5 , 3 , 2 ] ;
34124: LD_ADDR_VAR 0 9
34128: PUSH
34129: LD_INT 5
34131: PUSH
34132: LD_INT 3
34134: PUSH
34135: LD_INT 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: LIST
34142: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34143: LD_VAR 0 6
34147: PPUSH
34148: CALL_OW 257
34152: PUSH
34153: LD_INT 17
34155: EQUAL
34156: IFFALSE 34177
// points := [ 100 , 50 , 75 ] ;
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_INT 100
34165: PUSH
34166: LD_INT 50
34168: PUSH
34169: LD_INT 75
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 257
34186: PUSH
34187: LD_INT 15
34189: EQUAL
34190: IFFALSE 34211
// points := [ 10 , 5 , 3 ] ;
34192: LD_ADDR_VAR 0 9
34196: PUSH
34197: LD_INT 10
34199: PUSH
34200: LD_INT 5
34202: PUSH
34203: LD_INT 3
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34211: LD_VAR 0 6
34215: PPUSH
34216: CALL_OW 257
34220: PUSH
34221: LD_INT 14
34223: EQUAL
34224: IFFALSE 34245
// points := [ 10 , 0 , 0 ] ;
34226: LD_ADDR_VAR 0 9
34230: PUSH
34231: LD_INT 10
34233: PUSH
34234: LD_INT 0
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: LIST
34244: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34245: LD_VAR 0 6
34249: PPUSH
34250: CALL_OW 257
34254: PUSH
34255: LD_INT 11
34257: EQUAL
34258: IFFALSE 34279
// points := [ 30 , 10 , 5 ] ;
34260: LD_ADDR_VAR 0 9
34264: PUSH
34265: LD_INT 30
34267: PUSH
34268: LD_INT 10
34270: PUSH
34271: LD_INT 5
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: LIST
34278: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34279: LD_VAR 0 1
34283: PPUSH
34284: LD_INT 5
34286: PPUSH
34287: CALL_OW 321
34291: PUSH
34292: LD_INT 2
34294: EQUAL
34295: IFFALSE 34312
// bpoints := bpoints * 1.8 ;
34297: LD_ADDR_VAR 0 10
34301: PUSH
34302: LD_VAR 0 10
34306: PUSH
34307: LD_REAL  1.80000000000000E+0000
34310: MUL
34311: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34312: LD_VAR 0 6
34316: PPUSH
34317: CALL_OW 257
34321: PUSH
34322: LD_INT 1
34324: PUSH
34325: LD_INT 2
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: LD_INT 4
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: IN
34340: IFFALSE 34360
34342: PUSH
34343: LD_VAR 0 1
34347: PPUSH
34348: LD_INT 51
34350: PPUSH
34351: CALL_OW 321
34355: PUSH
34356: LD_INT 2
34358: EQUAL
34359: AND
34360: IFFALSE 34377
// bpoints := bpoints * 1.2 ;
34362: LD_ADDR_VAR 0 10
34366: PUSH
34367: LD_VAR 0 10
34371: PUSH
34372: LD_REAL  1.20000000000000E+0000
34375: MUL
34376: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34377: LD_VAR 0 6
34381: PPUSH
34382: CALL_OW 257
34386: PUSH
34387: LD_INT 5
34389: PUSH
34390: LD_INT 7
34392: PUSH
34393: LD_INT 9
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: IN
34401: IFFALSE 34421
34403: PUSH
34404: LD_VAR 0 1
34408: PPUSH
34409: LD_INT 52
34411: PPUSH
34412: CALL_OW 321
34416: PUSH
34417: LD_INT 2
34419: EQUAL
34420: AND
34421: IFFALSE 34438
// bpoints := bpoints * 1.5 ;
34423: LD_ADDR_VAR 0 10
34427: PUSH
34428: LD_VAR 0 10
34432: PUSH
34433: LD_REAL  1.50000000000000E+0000
34436: MUL
34437: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34438: LD_VAR 0 1
34442: PPUSH
34443: LD_INT 66
34445: PPUSH
34446: CALL_OW 321
34450: PUSH
34451: LD_INT 2
34453: EQUAL
34454: IFFALSE 34471
// bpoints := bpoints * 1.1 ;
34456: LD_ADDR_VAR 0 10
34460: PUSH
34461: LD_VAR 0 10
34465: PUSH
34466: LD_REAL  1.10000000000000E+0000
34469: MUL
34470: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34471: LD_ADDR_VAR 0 10
34475: PUSH
34476: LD_VAR 0 10
34480: PUSH
34481: LD_VAR 0 6
34485: PPUSH
34486: LD_INT 1
34488: PPUSH
34489: CALL_OW 259
34493: PUSH
34494: LD_REAL  1.15000000000000E+0000
34497: MUL
34498: MUL
34499: ST_TO_ADDR
// end ; unit_vehicle :
34500: GO 35330
34502: LD_INT 2
34504: DOUBLE
34505: EQUAL
34506: IFTRUE 34510
34508: GO 35318
34510: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34511: LD_VAR 0 6
34515: PPUSH
34516: CALL_OW 264
34520: PUSH
34521: LD_INT 2
34523: PUSH
34524: LD_INT 42
34526: PUSH
34527: LD_INT 24
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: LIST
34534: IN
34535: IFFALSE 34556
// points := [ 25 , 5 , 3 ] ;
34537: LD_ADDR_VAR 0 9
34541: PUSH
34542: LD_INT 25
34544: PUSH
34545: LD_INT 5
34547: PUSH
34548: LD_INT 3
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34556: LD_VAR 0 6
34560: PPUSH
34561: CALL_OW 264
34565: PUSH
34566: LD_INT 4
34568: PUSH
34569: LD_INT 43
34571: PUSH
34572: LD_INT 25
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: IN
34580: IFFALSE 34601
// points := [ 40 , 15 , 5 ] ;
34582: LD_ADDR_VAR 0 9
34586: PUSH
34587: LD_INT 40
34589: PUSH
34590: LD_INT 15
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34601: LD_VAR 0 6
34605: PPUSH
34606: CALL_OW 264
34610: PUSH
34611: LD_INT 3
34613: PUSH
34614: LD_INT 23
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: IN
34621: IFFALSE 34642
// points := [ 7 , 25 , 8 ] ;
34623: LD_ADDR_VAR 0 9
34627: PUSH
34628: LD_INT 7
34630: PUSH
34631: LD_INT 25
34633: PUSH
34634: LD_INT 8
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: LIST
34641: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34642: LD_VAR 0 6
34646: PPUSH
34647: CALL_OW 264
34651: PUSH
34652: LD_INT 5
34654: PUSH
34655: LD_INT 27
34657: PUSH
34658: LD_INT 44
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: IN
34666: IFFALSE 34687
// points := [ 14 , 50 , 16 ] ;
34668: LD_ADDR_VAR 0 9
34672: PUSH
34673: LD_INT 14
34675: PUSH
34676: LD_INT 50
34678: PUSH
34679: LD_INT 16
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: LIST
34686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34687: LD_VAR 0 6
34691: PPUSH
34692: CALL_OW 264
34696: PUSH
34697: LD_INT 6
34699: PUSH
34700: LD_INT 46
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: IN
34707: IFFALSE 34728
// points := [ 32 , 120 , 70 ] ;
34709: LD_ADDR_VAR 0 9
34713: PUSH
34714: LD_INT 32
34716: PUSH
34717: LD_INT 120
34719: PUSH
34720: LD_INT 70
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: LIST
34727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34728: LD_VAR 0 6
34732: PPUSH
34733: CALL_OW 264
34737: PUSH
34738: LD_INT 7
34740: PUSH
34741: LD_INT 28
34743: PUSH
34744: LD_INT 45
34746: PUSH
34747: LD_INT 92
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: IN
34756: IFFALSE 34777
// points := [ 35 , 20 , 45 ] ;
34758: LD_ADDR_VAR 0 9
34762: PUSH
34763: LD_INT 35
34765: PUSH
34766: LD_INT 20
34768: PUSH
34769: LD_INT 45
34771: PUSH
34772: EMPTY
34773: LIST
34774: LIST
34775: LIST
34776: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34777: LD_VAR 0 6
34781: PPUSH
34782: CALL_OW 264
34786: PUSH
34787: LD_INT 47
34789: PUSH
34790: EMPTY
34791: LIST
34792: IN
34793: IFFALSE 34814
// points := [ 67 , 45 , 75 ] ;
34795: LD_ADDR_VAR 0 9
34799: PUSH
34800: LD_INT 67
34802: PUSH
34803: LD_INT 45
34805: PUSH
34806: LD_INT 75
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34814: LD_VAR 0 6
34818: PPUSH
34819: CALL_OW 264
34823: PUSH
34824: LD_INT 26
34826: PUSH
34827: EMPTY
34828: LIST
34829: IN
34830: IFFALSE 34851
// points := [ 120 , 30 , 80 ] ;
34832: LD_ADDR_VAR 0 9
34836: PUSH
34837: LD_INT 120
34839: PUSH
34840: LD_INT 30
34842: PUSH
34843: LD_INT 80
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: LIST
34850: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34851: LD_VAR 0 6
34855: PPUSH
34856: CALL_OW 264
34860: PUSH
34861: LD_INT 22
34863: PUSH
34864: EMPTY
34865: LIST
34866: IN
34867: IFFALSE 34888
// points := [ 40 , 1 , 1 ] ;
34869: LD_ADDR_VAR 0 9
34873: PUSH
34874: LD_INT 40
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34888: LD_VAR 0 6
34892: PPUSH
34893: CALL_OW 264
34897: PUSH
34898: LD_INT 29
34900: PUSH
34901: EMPTY
34902: LIST
34903: IN
34904: IFFALSE 34925
// points := [ 70 , 200 , 400 ] ;
34906: LD_ADDR_VAR 0 9
34910: PUSH
34911: LD_INT 70
34913: PUSH
34914: LD_INT 200
34916: PUSH
34917: LD_INT 400
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34925: LD_VAR 0 6
34929: PPUSH
34930: CALL_OW 264
34934: PUSH
34935: LD_INT 14
34937: PUSH
34938: LD_INT 53
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: IN
34945: IFFALSE 34966
// points := [ 40 , 10 , 20 ] ;
34947: LD_ADDR_VAR 0 9
34951: PUSH
34952: LD_INT 40
34954: PUSH
34955: LD_INT 10
34957: PUSH
34958: LD_INT 20
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34966: LD_VAR 0 6
34970: PPUSH
34971: CALL_OW 264
34975: PUSH
34976: LD_INT 9
34978: PUSH
34979: EMPTY
34980: LIST
34981: IN
34982: IFFALSE 35003
// points := [ 5 , 70 , 20 ] ;
34984: LD_ADDR_VAR 0 9
34988: PUSH
34989: LD_INT 5
34991: PUSH
34992: LD_INT 70
34994: PUSH
34995: LD_INT 20
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35003: LD_VAR 0 6
35007: PPUSH
35008: CALL_OW 264
35012: PUSH
35013: LD_INT 10
35015: PUSH
35016: EMPTY
35017: LIST
35018: IN
35019: IFFALSE 35040
// points := [ 35 , 110 , 70 ] ;
35021: LD_ADDR_VAR 0 9
35025: PUSH
35026: LD_INT 35
35028: PUSH
35029: LD_INT 110
35031: PUSH
35032: LD_INT 70
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: LIST
35039: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35040: LD_VAR 0 6
35044: PPUSH
35045: CALL_OW 265
35049: PUSH
35050: LD_INT 25
35052: EQUAL
35053: IFFALSE 35074
// points := [ 80 , 65 , 100 ] ;
35055: LD_ADDR_VAR 0 9
35059: PUSH
35060: LD_INT 80
35062: PUSH
35063: LD_INT 65
35065: PUSH
35066: LD_INT 100
35068: PUSH
35069: EMPTY
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35074: LD_VAR 0 6
35078: PPUSH
35079: CALL_OW 263
35083: PUSH
35084: LD_INT 1
35086: EQUAL
35087: IFFALSE 35122
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35089: LD_ADDR_VAR 0 10
35093: PUSH
35094: LD_VAR 0 10
35098: PUSH
35099: LD_VAR 0 6
35103: PPUSH
35104: CALL_OW 311
35108: PPUSH
35109: LD_INT 3
35111: PPUSH
35112: CALL_OW 259
35116: PUSH
35117: LD_INT 4
35119: MUL
35120: MUL
35121: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35122: LD_VAR 0 6
35126: PPUSH
35127: CALL_OW 263
35131: PUSH
35132: LD_INT 2
35134: EQUAL
35135: IFFALSE 35186
// begin j := IsControledBy ( i ) ;
35137: LD_ADDR_VAR 0 7
35141: PUSH
35142: LD_VAR 0 6
35146: PPUSH
35147: CALL_OW 312
35151: ST_TO_ADDR
// if j then
35152: LD_VAR 0 7
35156: IFFALSE 35186
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35158: LD_ADDR_VAR 0 10
35162: PUSH
35163: LD_VAR 0 10
35167: PUSH
35168: LD_VAR 0 7
35172: PPUSH
35173: LD_INT 3
35175: PPUSH
35176: CALL_OW 259
35180: PUSH
35181: LD_INT 3
35183: MUL
35184: MUL
35185: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35186: LD_VAR 0 6
35190: PPUSH
35191: CALL_OW 264
35195: PUSH
35196: LD_INT 5
35198: PUSH
35199: LD_INT 6
35201: PUSH
35202: LD_INT 46
35204: PUSH
35205: LD_INT 44
35207: PUSH
35208: LD_INT 47
35210: PUSH
35211: LD_INT 45
35213: PUSH
35214: LD_INT 28
35216: PUSH
35217: LD_INT 7
35219: PUSH
35220: LD_INT 27
35222: PUSH
35223: LD_INT 29
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: IN
35238: IFFALSE 35258
35240: PUSH
35241: LD_VAR 0 1
35245: PPUSH
35246: LD_INT 52
35248: PPUSH
35249: CALL_OW 321
35253: PUSH
35254: LD_INT 2
35256: EQUAL
35257: AND
35258: IFFALSE 35275
// bpoints := bpoints * 1.2 ;
35260: LD_ADDR_VAR 0 10
35264: PUSH
35265: LD_VAR 0 10
35269: PUSH
35270: LD_REAL  1.20000000000000E+0000
35273: MUL
35274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35275: LD_VAR 0 6
35279: PPUSH
35280: CALL_OW 264
35284: PUSH
35285: LD_INT 6
35287: PUSH
35288: LD_INT 46
35290: PUSH
35291: LD_INT 47
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: IN
35299: IFFALSE 35316
// bpoints := bpoints * 1.2 ;
35301: LD_ADDR_VAR 0 10
35305: PUSH
35306: LD_VAR 0 10
35310: PUSH
35311: LD_REAL  1.20000000000000E+0000
35314: MUL
35315: ST_TO_ADDR
// end ; unit_building :
35316: GO 35330
35318: LD_INT 3
35320: DOUBLE
35321: EQUAL
35322: IFTRUE 35326
35324: GO 35329
35326: POP
// ; end ;
35327: GO 35330
35329: POP
// for j = 1 to 3 do
35330: LD_ADDR_VAR 0 7
35334: PUSH
35335: DOUBLE
35336: LD_INT 1
35338: DEC
35339: ST_TO_ADDR
35340: LD_INT 3
35342: PUSH
35343: FOR_TO
35344: IFFALSE 35397
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35346: LD_ADDR_VAR 0 5
35350: PUSH
35351: LD_VAR 0 5
35355: PPUSH
35356: LD_VAR 0 7
35360: PPUSH
35361: LD_VAR 0 5
35365: PUSH
35366: LD_VAR 0 7
35370: ARRAY
35371: PUSH
35372: LD_VAR 0 9
35376: PUSH
35377: LD_VAR 0 7
35381: ARRAY
35382: PUSH
35383: LD_VAR 0 10
35387: MUL
35388: PLUS
35389: PPUSH
35390: CALL_OW 1
35394: ST_TO_ADDR
35395: GO 35343
35397: POP
35398: POP
// end ;
35399: GO 33872
35401: POP
35402: POP
// result := Replace ( result , 4 , tmp ) ;
35403: LD_ADDR_VAR 0 5
35407: PUSH
35408: LD_VAR 0 5
35412: PPUSH
35413: LD_INT 4
35415: PPUSH
35416: LD_VAR 0 8
35420: PPUSH
35421: CALL_OW 1
35425: ST_TO_ADDR
// end ;
35426: LD_VAR 0 5
35430: RET
// export function DangerAtRange ( unit , range ) ; begin
35431: LD_INT 0
35433: PPUSH
// if not unit then
35434: LD_VAR 0 1
35438: NOT
35439: IFFALSE 35443
// exit ;
35441: GO 35488
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35443: LD_ADDR_VAR 0 3
35447: PUSH
35448: LD_VAR 0 1
35452: PPUSH
35453: CALL_OW 255
35457: PPUSH
35458: LD_VAR 0 1
35462: PPUSH
35463: CALL_OW 250
35467: PPUSH
35468: LD_VAR 0 1
35472: PPUSH
35473: CALL_OW 251
35477: PPUSH
35478: LD_VAR 0 2
35482: PPUSH
35483: CALL 33722 0 4
35487: ST_TO_ADDR
// end ;
35488: LD_VAR 0 3
35492: RET
// export function DangerInArea ( side , area ) ; begin
35493: LD_INT 0
35495: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35496: LD_ADDR_VAR 0 3
35500: PUSH
35501: LD_VAR 0 2
35505: PPUSH
35506: LD_INT 81
35508: PUSH
35509: LD_VAR 0 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PPUSH
35518: CALL_OW 70
35522: ST_TO_ADDR
// end ;
35523: LD_VAR 0 3
35527: RET
// export function IsExtension ( b ) ; begin
35528: LD_INT 0
35530: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35531: LD_ADDR_VAR 0 2
35535: PUSH
35536: LD_VAR 0 1
35540: PUSH
35541: LD_INT 23
35543: PUSH
35544: LD_INT 20
35546: PUSH
35547: LD_INT 22
35549: PUSH
35550: LD_INT 17
35552: PUSH
35553: LD_INT 24
35555: PUSH
35556: LD_INT 21
35558: PUSH
35559: LD_INT 19
35561: PUSH
35562: LD_INT 16
35564: PUSH
35565: LD_INT 25
35567: PUSH
35568: LD_INT 18
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: IN
35583: ST_TO_ADDR
// end ;
35584: LD_VAR 0 2
35588: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35589: LD_INT 0
35591: PPUSH
35592: PPUSH
35593: PPUSH
// result := [ ] ;
35594: LD_ADDR_VAR 0 4
35598: PUSH
35599: EMPTY
35600: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35601: LD_ADDR_VAR 0 5
35605: PUSH
35606: LD_VAR 0 2
35610: PPUSH
35611: LD_INT 21
35613: PUSH
35614: LD_INT 3
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PPUSH
35621: CALL_OW 70
35625: ST_TO_ADDR
// if not tmp then
35626: LD_VAR 0 5
35630: NOT
35631: IFFALSE 35635
// exit ;
35633: GO 35699
// if checkLink then
35635: LD_VAR 0 3
35639: IFFALSE 35689
// begin for i in tmp do
35641: LD_ADDR_VAR 0 6
35645: PUSH
35646: LD_VAR 0 5
35650: PUSH
35651: FOR_IN
35652: IFFALSE 35687
// if GetBase ( i ) <> base then
35654: LD_VAR 0 6
35658: PPUSH
35659: CALL_OW 274
35663: PUSH
35664: LD_VAR 0 1
35668: NONEQUAL
35669: IFFALSE 35685
// ComLinkToBase ( base , i ) ;
35671: LD_VAR 0 1
35675: PPUSH
35676: LD_VAR 0 6
35680: PPUSH
35681: CALL_OW 169
35685: GO 35651
35687: POP
35688: POP
// end ; result := tmp ;
35689: LD_ADDR_VAR 0 4
35693: PUSH
35694: LD_VAR 0 5
35698: ST_TO_ADDR
// end ;
35699: LD_VAR 0 4
35703: RET
// export function ComComplete ( units , b ) ; var i ; begin
35704: LD_INT 0
35706: PPUSH
35707: PPUSH
// if not units then
35708: LD_VAR 0 1
35712: NOT
35713: IFFALSE 35717
// exit ;
35715: GO 35807
// for i in units do
35717: LD_ADDR_VAR 0 4
35721: PUSH
35722: LD_VAR 0 1
35726: PUSH
35727: FOR_IN
35728: IFFALSE 35805
// if BuildingStatus ( b ) = bs_build then
35730: LD_VAR 0 2
35734: PPUSH
35735: CALL_OW 461
35739: PUSH
35740: LD_INT 1
35742: EQUAL
35743: IFFALSE 35803
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35745: LD_VAR 0 4
35749: PPUSH
35750: LD_STRING h
35752: PUSH
35753: LD_VAR 0 2
35757: PPUSH
35758: CALL_OW 250
35762: PUSH
35763: LD_VAR 0 2
35767: PPUSH
35768: CALL_OW 251
35772: PUSH
35773: LD_VAR 0 2
35777: PUSH
35778: LD_INT 0
35780: PUSH
35781: LD_INT 0
35783: PUSH
35784: LD_INT 0
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: PUSH
35796: EMPTY
35797: LIST
35798: PPUSH
35799: CALL_OW 446
35803: GO 35727
35805: POP
35806: POP
// end ;
35807: LD_VAR 0 3
35811: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35812: LD_INT 0
35814: PPUSH
35815: PPUSH
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35820: LD_VAR 0 1
35824: NOT
35825: IFTRUE 35842
35827: PUSH
35828: LD_VAR 0 1
35832: PPUSH
35833: CALL_OW 263
35837: PUSH
35838: LD_INT 2
35840: NONEQUAL
35841: OR
35842: IFFALSE 35846
// exit ;
35844: GO 36162
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35846: LD_ADDR_VAR 0 6
35850: PUSH
35851: LD_INT 22
35853: PUSH
35854: LD_VAR 0 1
35858: PPUSH
35859: CALL_OW 255
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 30
35873: PUSH
35874: LD_INT 36
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: PUSH
35881: LD_INT 34
35883: PUSH
35884: LD_INT 31
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: LIST
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PPUSH
35900: CALL_OW 69
35904: ST_TO_ADDR
// if not tmp then
35905: LD_VAR 0 6
35909: NOT
35910: IFFALSE 35914
// exit ;
35912: GO 36162
// result := [ ] ;
35914: LD_ADDR_VAR 0 2
35918: PUSH
35919: EMPTY
35920: ST_TO_ADDR
// for i in tmp do
35921: LD_ADDR_VAR 0 3
35925: PUSH
35926: LD_VAR 0 6
35930: PUSH
35931: FOR_IN
35932: IFFALSE 36003
// begin t := UnitsInside ( i ) ;
35934: LD_ADDR_VAR 0 4
35938: PUSH
35939: LD_VAR 0 3
35943: PPUSH
35944: CALL_OW 313
35948: ST_TO_ADDR
// if t then
35949: LD_VAR 0 4
35953: IFFALSE 36001
// for j in t do
35955: LD_ADDR_VAR 0 7
35959: PUSH
35960: LD_VAR 0 4
35964: PUSH
35965: FOR_IN
35966: IFFALSE 35999
// result := Replace ( result , result + 1 , j ) ;
35968: LD_ADDR_VAR 0 2
35972: PUSH
35973: LD_VAR 0 2
35977: PPUSH
35978: LD_VAR 0 2
35982: PUSH
35983: LD_INT 1
35985: PLUS
35986: PPUSH
35987: LD_VAR 0 7
35991: PPUSH
35992: CALL_OW 1
35996: ST_TO_ADDR
35997: GO 35965
35999: POP
36000: POP
// end ;
36001: GO 35931
36003: POP
36004: POP
// if not result then
36005: LD_VAR 0 2
36009: NOT
36010: IFFALSE 36014
// exit ;
36012: GO 36162
// mech := result [ 1 ] ;
36014: LD_ADDR_VAR 0 5
36018: PUSH
36019: LD_VAR 0 2
36023: PUSH
36024: LD_INT 1
36026: ARRAY
36027: ST_TO_ADDR
// if result > 1 then
36028: LD_VAR 0 2
36032: PUSH
36033: LD_INT 1
36035: GREATER
36036: IFFALSE 36148
// begin for i = 2 to result do
36038: LD_ADDR_VAR 0 3
36042: PUSH
36043: DOUBLE
36044: LD_INT 2
36046: DEC
36047: ST_TO_ADDR
36048: LD_VAR 0 2
36052: PUSH
36053: FOR_TO
36054: IFFALSE 36146
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36056: LD_ADDR_VAR 0 4
36060: PUSH
36061: LD_VAR 0 2
36065: PUSH
36066: LD_VAR 0 3
36070: ARRAY
36071: PPUSH
36072: LD_INT 3
36074: PPUSH
36075: CALL_OW 259
36079: PUSH
36080: LD_VAR 0 2
36084: PUSH
36085: LD_VAR 0 3
36089: ARRAY
36090: PPUSH
36091: CALL_OW 432
36095: MINUS
36096: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36097: LD_VAR 0 4
36101: PUSH
36102: LD_VAR 0 5
36106: PPUSH
36107: LD_INT 3
36109: PPUSH
36110: CALL_OW 259
36114: PUSH
36115: LD_VAR 0 5
36119: PPUSH
36120: CALL_OW 432
36124: MINUS
36125: GREATEREQUAL
36126: IFFALSE 36144
// mech := result [ i ] ;
36128: LD_ADDR_VAR 0 5
36132: PUSH
36133: LD_VAR 0 2
36137: PUSH
36138: LD_VAR 0 3
36142: ARRAY
36143: ST_TO_ADDR
// end ;
36144: GO 36053
36146: POP
36147: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36148: LD_VAR 0 1
36152: PPUSH
36153: LD_VAR 0 5
36157: PPUSH
36158: CALL_OW 135
// end ;
36162: LD_VAR 0 2
36166: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36167: LD_INT 0
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
36177: PPUSH
36178: PPUSH
36179: PPUSH
36180: PPUSH
36181: PPUSH
// result := [ ] ;
36182: LD_ADDR_VAR 0 7
36186: PUSH
36187: EMPTY
36188: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36189: LD_VAR 0 1
36193: PPUSH
36194: CALL_OW 266
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: IN
36209: NOT
36210: IFFALSE 36214
// exit ;
36212: GO 37854
// if name then
36214: LD_VAR 0 3
36218: IFFALSE 36234
// SetBName ( base_dep , name ) ;
36220: LD_VAR 0 1
36224: PPUSH
36225: LD_VAR 0 3
36229: PPUSH
36230: CALL_OW 500
// base := GetBase ( base_dep ) ;
36234: LD_ADDR_VAR 0 15
36238: PUSH
36239: LD_VAR 0 1
36243: PPUSH
36244: CALL_OW 274
36248: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36249: LD_ADDR_VAR 0 16
36253: PUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL_OW 255
36263: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36264: LD_ADDR_VAR 0 17
36268: PUSH
36269: LD_VAR 0 1
36273: PPUSH
36274: CALL_OW 248
36278: ST_TO_ADDR
// if sources then
36279: LD_VAR 0 5
36283: IFFALSE 36330
// for i = 1 to 3 do
36285: LD_ADDR_VAR 0 8
36289: PUSH
36290: DOUBLE
36291: LD_INT 1
36293: DEC
36294: ST_TO_ADDR
36295: LD_INT 3
36297: PUSH
36298: FOR_TO
36299: IFFALSE 36328
// AddResourceType ( base , i , sources [ i ] ) ;
36301: LD_VAR 0 15
36305: PPUSH
36306: LD_VAR 0 8
36310: PPUSH
36311: LD_VAR 0 5
36315: PUSH
36316: LD_VAR 0 8
36320: ARRAY
36321: PPUSH
36322: CALL_OW 276
36326: GO 36298
36328: POP
36329: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36330: LD_ADDR_VAR 0 18
36334: PUSH
36335: LD_VAR 0 15
36339: PPUSH
36340: LD_VAR 0 2
36344: PPUSH
36345: LD_INT 1
36347: PPUSH
36348: CALL 35589 0 3
36352: ST_TO_ADDR
// InitHc ;
36353: CALL_OW 19
// InitUc ;
36357: CALL_OW 18
// uc_side := side ;
36361: LD_ADDR_OWVAR 20
36365: PUSH
36366: LD_VAR 0 16
36370: ST_TO_ADDR
// uc_nation := nation ;
36371: LD_ADDR_OWVAR 21
36375: PUSH
36376: LD_VAR 0 17
36380: ST_TO_ADDR
// if buildings then
36381: LD_VAR 0 18
36385: IFFALSE 37713
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36387: LD_ADDR_VAR 0 19
36391: PUSH
36392: LD_VAR 0 18
36396: PPUSH
36397: LD_INT 2
36399: PUSH
36400: LD_INT 30
36402: PUSH
36403: LD_INT 29
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 30
36412: PUSH
36413: LD_INT 30
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: LIST
36424: PPUSH
36425: CALL_OW 72
36429: ST_TO_ADDR
// if tmp then
36430: LD_VAR 0 19
36434: IFFALSE 36482
// for i in tmp do
36436: LD_ADDR_VAR 0 8
36440: PUSH
36441: LD_VAR 0 19
36445: PUSH
36446: FOR_IN
36447: IFFALSE 36480
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36449: LD_VAR 0 8
36453: PPUSH
36454: CALL_OW 250
36458: PPUSH
36459: LD_VAR 0 8
36463: PPUSH
36464: CALL_OW 251
36468: PPUSH
36469: LD_VAR 0 16
36473: PPUSH
36474: CALL_OW 441
36478: GO 36446
36480: POP
36481: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36482: LD_VAR 0 18
36486: PPUSH
36487: LD_INT 2
36489: PUSH
36490: LD_INT 30
36492: PUSH
36493: LD_INT 32
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 30
36502: PUSH
36503: LD_INT 33
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: LIST
36514: PPUSH
36515: CALL_OW 72
36519: IFFALSE 36607
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36521: LD_ADDR_VAR 0 8
36525: PUSH
36526: LD_VAR 0 18
36530: PPUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 30
36536: PUSH
36537: LD_INT 32
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 30
36546: PUSH
36547: LD_INT 33
36549: PUSH
36550: EMPTY
36551: LIST
36552: LIST
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: LIST
36558: PPUSH
36559: CALL_OW 72
36563: PUSH
36564: FOR_IN
36565: IFFALSE 36605
// begin if not GetBWeapon ( i ) then
36567: LD_VAR 0 8
36571: PPUSH
36572: CALL_OW 269
36576: NOT
36577: IFFALSE 36603
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36579: LD_VAR 0 8
36583: PPUSH
36584: LD_VAR 0 8
36588: PPUSH
36589: LD_VAR 0 2
36593: PPUSH
36594: CALL 37859 0 2
36598: PPUSH
36599: CALL_OW 431
// end ;
36603: GO 36564
36605: POP
36606: POP
// end ; for i = 1 to personel do
36607: LD_ADDR_VAR 0 8
36611: PUSH
36612: DOUBLE
36613: LD_INT 1
36615: DEC
36616: ST_TO_ADDR
36617: LD_VAR 0 6
36621: PUSH
36622: FOR_TO
36623: IFFALSE 37693
// begin if i > 4 then
36625: LD_VAR 0 8
36629: PUSH
36630: LD_INT 4
36632: GREATER
36633: IFFALSE 36637
// break ;
36635: GO 37693
// case i of 1 :
36637: LD_VAR 0 8
36641: PUSH
36642: LD_INT 1
36644: DOUBLE
36645: EQUAL
36646: IFTRUE 36650
36648: GO 36730
36650: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36651: LD_ADDR_VAR 0 12
36655: PUSH
36656: LD_VAR 0 18
36660: PPUSH
36661: LD_INT 22
36663: PUSH
36664: LD_VAR 0 16
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 58
36675: PUSH
36676: EMPTY
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 30
36684: PUSH
36685: LD_INT 32
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 30
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 30
36704: PUSH
36705: LD_INT 5
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: LIST
36722: PPUSH
36723: CALL_OW 72
36727: ST_TO_ADDR
36728: GO 36952
36730: LD_INT 2
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36800
36738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36739: LD_ADDR_VAR 0 12
36743: PUSH
36744: LD_VAR 0 18
36748: PPUSH
36749: LD_INT 22
36751: PUSH
36752: LD_VAR 0 16
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: LD_INT 30
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 30
36776: PUSH
36777: LD_INT 1
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: LIST
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PPUSH
36793: CALL_OW 72
36797: ST_TO_ADDR
36798: GO 36952
36800: LD_INT 3
36802: DOUBLE
36803: EQUAL
36804: IFTRUE 36808
36806: GO 36870
36808: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36809: LD_ADDR_VAR 0 12
36813: PUSH
36814: LD_VAR 0 18
36818: PPUSH
36819: LD_INT 22
36821: PUSH
36822: LD_VAR 0 16
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 2
36833: PUSH
36834: LD_INT 30
36836: PUSH
36837: LD_INT 2
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 30
36846: PUSH
36847: LD_INT 3
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: LIST
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PPUSH
36863: CALL_OW 72
36867: ST_TO_ADDR
36868: GO 36952
36870: LD_INT 4
36872: DOUBLE
36873: EQUAL
36874: IFTRUE 36878
36876: GO 36951
36878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36879: LD_ADDR_VAR 0 12
36883: PUSH
36884: LD_VAR 0 18
36888: PPUSH
36889: LD_INT 22
36891: PUSH
36892: LD_VAR 0 16
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 2
36903: PUSH
36904: LD_INT 30
36906: PUSH
36907: LD_INT 6
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 30
36916: PUSH
36917: LD_INT 7
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 30
36926: PUSH
36927: LD_INT 8
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PPUSH
36944: CALL_OW 72
36948: ST_TO_ADDR
36949: GO 36952
36951: POP
// if i = 1 then
36952: LD_VAR 0 8
36956: PUSH
36957: LD_INT 1
36959: EQUAL
36960: IFFALSE 37071
// begin tmp := [ ] ;
36962: LD_ADDR_VAR 0 19
36966: PUSH
36967: EMPTY
36968: ST_TO_ADDR
// for j in f do
36969: LD_ADDR_VAR 0 9
36973: PUSH
36974: LD_VAR 0 12
36978: PUSH
36979: FOR_IN
36980: IFFALSE 37053
// if GetBType ( j ) = b_bunker then
36982: LD_VAR 0 9
36986: PPUSH
36987: CALL_OW 266
36991: PUSH
36992: LD_INT 32
36994: EQUAL
36995: IFFALSE 37022
// tmp := Insert ( tmp , 1 , j ) else
36997: LD_ADDR_VAR 0 19
37001: PUSH
37002: LD_VAR 0 19
37006: PPUSH
37007: LD_INT 1
37009: PPUSH
37010: LD_VAR 0 9
37014: PPUSH
37015: CALL_OW 2
37019: ST_TO_ADDR
37020: GO 37051
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37022: LD_ADDR_VAR 0 19
37026: PUSH
37027: LD_VAR 0 19
37031: PPUSH
37032: LD_VAR 0 19
37036: PUSH
37037: LD_INT 1
37039: PLUS
37040: PPUSH
37041: LD_VAR 0 9
37045: PPUSH
37046: CALL_OW 2
37050: ST_TO_ADDR
37051: GO 36979
37053: POP
37054: POP
// if tmp then
37055: LD_VAR 0 19
37059: IFFALSE 37071
// f := tmp ;
37061: LD_ADDR_VAR 0 12
37065: PUSH
37066: LD_VAR 0 19
37070: ST_TO_ADDR
// end ; x := personel [ i ] ;
37071: LD_ADDR_VAR 0 13
37075: PUSH
37076: LD_VAR 0 6
37080: PUSH
37081: LD_VAR 0 8
37085: ARRAY
37086: ST_TO_ADDR
// if x = - 1 then
37087: LD_VAR 0 13
37091: PUSH
37092: LD_INT 1
37094: NEG
37095: EQUAL
37096: IFFALSE 37307
// begin for j in f do
37098: LD_ADDR_VAR 0 9
37102: PUSH
37103: LD_VAR 0 12
37107: PUSH
37108: FOR_IN
37109: IFFALSE 37303
// repeat InitHc ;
37111: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37115: LD_VAR 0 9
37119: PPUSH
37120: CALL_OW 266
37124: PUSH
37125: LD_INT 5
37127: EQUAL
37128: IFFALSE 37198
// begin if UnitsInside ( j ) < 3 then
37130: LD_VAR 0 9
37134: PPUSH
37135: CALL_OW 313
37139: PUSH
37140: LD_INT 3
37142: LESS
37143: IFFALSE 37179
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37145: LD_INT 0
37147: PPUSH
37148: LD_INT 5
37150: PUSH
37151: LD_INT 8
37153: PUSH
37154: LD_INT 9
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: PUSH
37162: LD_VAR 0 17
37166: ARRAY
37167: PPUSH
37168: LD_VAR 0 4
37172: PPUSH
37173: CALL_OW 380
37177: GO 37196
// PrepareHuman ( false , i , skill ) ;
37179: LD_INT 0
37181: PPUSH
37182: LD_VAR 0 8
37186: PPUSH
37187: LD_VAR 0 4
37191: PPUSH
37192: CALL_OW 380
// end else
37196: GO 37215
// PrepareHuman ( false , i , skill ) ;
37198: LD_INT 0
37200: PPUSH
37201: LD_VAR 0 8
37205: PPUSH
37206: LD_VAR 0 4
37210: PPUSH
37211: CALL_OW 380
// un := CreateHuman ;
37215: LD_ADDR_VAR 0 14
37219: PUSH
37220: CALL_OW 44
37224: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37225: LD_ADDR_VAR 0 7
37229: PUSH
37230: LD_VAR 0 7
37234: PPUSH
37235: LD_INT 1
37237: PPUSH
37238: LD_VAR 0 14
37242: PPUSH
37243: CALL_OW 2
37247: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37248: LD_VAR 0 14
37252: PPUSH
37253: LD_VAR 0 9
37257: PPUSH
37258: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37262: LD_VAR 0 9
37266: PPUSH
37267: CALL_OW 313
37271: PUSH
37272: LD_INT 6
37274: EQUAL
37275: IFTRUE 37299
37277: PUSH
37278: LD_VAR 0 9
37282: PPUSH
37283: CALL_OW 266
37287: PUSH
37288: LD_INT 32
37290: PUSH
37291: LD_INT 31
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: IN
37298: OR
37299: IFFALSE 37111
37301: GO 37108
37303: POP
37304: POP
// end else
37305: GO 37691
// for j = 1 to x do
37307: LD_ADDR_VAR 0 9
37311: PUSH
37312: DOUBLE
37313: LD_INT 1
37315: DEC
37316: ST_TO_ADDR
37317: LD_VAR 0 13
37321: PUSH
37322: FOR_TO
37323: IFFALSE 37689
// begin InitHc ;
37325: CALL_OW 19
// if not f then
37329: LD_VAR 0 12
37333: NOT
37334: IFFALSE 37423
// begin PrepareHuman ( false , i , skill ) ;
37336: LD_INT 0
37338: PPUSH
37339: LD_VAR 0 8
37343: PPUSH
37344: LD_VAR 0 4
37348: PPUSH
37349: CALL_OW 380
// un := CreateHuman ;
37353: LD_ADDR_VAR 0 14
37357: PUSH
37358: CALL_OW 44
37362: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37363: LD_ADDR_VAR 0 7
37367: PUSH
37368: LD_VAR 0 7
37372: PPUSH
37373: LD_INT 1
37375: PPUSH
37376: LD_VAR 0 14
37380: PPUSH
37381: CALL_OW 2
37385: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37386: LD_VAR 0 14
37390: PPUSH
37391: LD_VAR 0 1
37395: PPUSH
37396: CALL_OW 250
37400: PPUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 251
37410: PPUSH
37411: LD_INT 10
37413: PPUSH
37414: LD_INT 0
37416: PPUSH
37417: CALL_OW 50
// continue ;
37421: GO 37322
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37423: LD_VAR 0 12
37427: PUSH
37428: LD_INT 1
37430: ARRAY
37431: PPUSH
37432: CALL_OW 313
37436: IFFALSE 37464
37438: PUSH
37439: LD_VAR 0 12
37443: PUSH
37444: LD_INT 1
37446: ARRAY
37447: PPUSH
37448: CALL_OW 266
37452: PUSH
37453: LD_INT 32
37455: PUSH
37456: LD_INT 31
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: IN
37463: AND
37464: IFTRUE 37485
37466: PUSH
37467: LD_VAR 0 12
37471: PUSH
37472: LD_INT 1
37474: ARRAY
37475: PPUSH
37476: CALL_OW 313
37480: PUSH
37481: LD_INT 6
37483: EQUAL
37484: OR
37485: IFFALSE 37505
// f := Delete ( f , 1 ) ;
37487: LD_ADDR_VAR 0 12
37491: PUSH
37492: LD_VAR 0 12
37496: PPUSH
37497: LD_INT 1
37499: PPUSH
37500: CALL_OW 3
37504: ST_TO_ADDR
// if not f then
37505: LD_VAR 0 12
37509: NOT
37510: IFFALSE 37528
// begin x := x + 2 ;
37512: LD_ADDR_VAR 0 13
37516: PUSH
37517: LD_VAR 0 13
37521: PUSH
37522: LD_INT 2
37524: PLUS
37525: ST_TO_ADDR
// continue ;
37526: GO 37322
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37528: LD_VAR 0 12
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: PPUSH
37537: CALL_OW 266
37541: PUSH
37542: LD_INT 5
37544: EQUAL
37545: IFFALSE 37619
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37547: LD_VAR 0 12
37551: PUSH
37552: LD_INT 1
37554: ARRAY
37555: PPUSH
37556: CALL_OW 313
37560: PUSH
37561: LD_INT 3
37563: LESS
37564: IFFALSE 37600
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37566: LD_INT 0
37568: PPUSH
37569: LD_INT 5
37571: PUSH
37572: LD_INT 8
37574: PUSH
37575: LD_INT 9
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: LIST
37582: PUSH
37583: LD_VAR 0 17
37587: ARRAY
37588: PPUSH
37589: LD_VAR 0 4
37593: PPUSH
37594: CALL_OW 380
37598: GO 37617
// PrepareHuman ( false , i , skill ) ;
37600: LD_INT 0
37602: PPUSH
37603: LD_VAR 0 8
37607: PPUSH
37608: LD_VAR 0 4
37612: PPUSH
37613: CALL_OW 380
// end else
37617: GO 37636
// PrepareHuman ( false , i , skill ) ;
37619: LD_INT 0
37621: PPUSH
37622: LD_VAR 0 8
37626: PPUSH
37627: LD_VAR 0 4
37631: PPUSH
37632: CALL_OW 380
// un := CreateHuman ;
37636: LD_ADDR_VAR 0 14
37640: PUSH
37641: CALL_OW 44
37645: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37646: LD_ADDR_VAR 0 7
37650: PUSH
37651: LD_VAR 0 7
37655: PPUSH
37656: LD_INT 1
37658: PPUSH
37659: LD_VAR 0 14
37663: PPUSH
37664: CALL_OW 2
37668: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37669: LD_VAR 0 14
37673: PPUSH
37674: LD_VAR 0 12
37678: PUSH
37679: LD_INT 1
37681: ARRAY
37682: PPUSH
37683: CALL_OW 52
// end ;
37687: GO 37322
37689: POP
37690: POP
// end ;
37691: GO 36622
37693: POP
37694: POP
// result := result ^ buildings ;
37695: LD_ADDR_VAR 0 7
37699: PUSH
37700: LD_VAR 0 7
37704: PUSH
37705: LD_VAR 0 18
37709: ADD
37710: ST_TO_ADDR
// end else
37711: GO 37854
// begin for i = 1 to personel do
37713: LD_ADDR_VAR 0 8
37717: PUSH
37718: DOUBLE
37719: LD_INT 1
37721: DEC
37722: ST_TO_ADDR
37723: LD_VAR 0 6
37727: PUSH
37728: FOR_TO
37729: IFFALSE 37852
// begin if i > 4 then
37731: LD_VAR 0 8
37735: PUSH
37736: LD_INT 4
37738: GREATER
37739: IFFALSE 37743
// break ;
37741: GO 37852
// x := personel [ i ] ;
37743: LD_ADDR_VAR 0 13
37747: PUSH
37748: LD_VAR 0 6
37752: PUSH
37753: LD_VAR 0 8
37757: ARRAY
37758: ST_TO_ADDR
// if x = - 1 then
37759: LD_VAR 0 13
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: EQUAL
37768: IFFALSE 37772
// continue ;
37770: GO 37728
// PrepareHuman ( false , i , skill ) ;
37772: LD_INT 0
37774: PPUSH
37775: LD_VAR 0 8
37779: PPUSH
37780: LD_VAR 0 4
37784: PPUSH
37785: CALL_OW 380
// un := CreateHuman ;
37789: LD_ADDR_VAR 0 14
37793: PUSH
37794: CALL_OW 44
37798: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37799: LD_VAR 0 14
37803: PPUSH
37804: LD_VAR 0 1
37808: PPUSH
37809: CALL_OW 250
37813: PPUSH
37814: LD_VAR 0 1
37818: PPUSH
37819: CALL_OW 251
37823: PPUSH
37824: LD_INT 10
37826: PPUSH
37827: LD_INT 0
37829: PPUSH
37830: CALL_OW 50
// result := result ^ un ;
37834: LD_ADDR_VAR 0 7
37838: PUSH
37839: LD_VAR 0 7
37843: PUSH
37844: LD_VAR 0 14
37848: ADD
37849: ST_TO_ADDR
// end ;
37850: GO 37728
37852: POP
37853: POP
// end ; end ;
37854: LD_VAR 0 7
37858: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37859: LD_INT 0
37861: PPUSH
37862: PPUSH
37863: PPUSH
37864: PPUSH
37865: PPUSH
37866: PPUSH
37867: PPUSH
37868: PPUSH
37869: PPUSH
37870: PPUSH
37871: PPUSH
37872: PPUSH
37873: PPUSH
37874: PPUSH
37875: PPUSH
37876: PPUSH
// result := false ;
37877: LD_ADDR_VAR 0 3
37881: PUSH
37882: LD_INT 0
37884: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37885: LD_VAR 0 1
37889: NOT
37890: IFTRUE 37915
37892: PUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL_OW 266
37902: PUSH
37903: LD_INT 32
37905: PUSH
37906: LD_INT 33
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: IN
37913: NOT
37914: OR
37915: IFFALSE 37919
// exit ;
37917: GO 39054
// nat := GetNation ( tower ) ;
37919: LD_ADDR_VAR 0 12
37923: PUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: CALL_OW 248
37933: ST_TO_ADDR
// side := GetSide ( tower ) ;
37934: LD_ADDR_VAR 0 16
37938: PUSH
37939: LD_VAR 0 1
37943: PPUSH
37944: CALL_OW 255
37948: ST_TO_ADDR
// x := GetX ( tower ) ;
37949: LD_ADDR_VAR 0 10
37953: PUSH
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 250
37963: ST_TO_ADDR
// y := GetY ( tower ) ;
37964: LD_ADDR_VAR 0 11
37968: PUSH
37969: LD_VAR 0 1
37973: PPUSH
37974: CALL_OW 251
37978: ST_TO_ADDR
// if not x or not y then
37979: LD_VAR 0 10
37983: NOT
37984: IFTRUE 37993
37986: PUSH
37987: LD_VAR 0 11
37991: NOT
37992: OR
37993: IFFALSE 37997
// exit ;
37995: GO 39054
// weapon := 0 ;
37997: LD_ADDR_VAR 0 18
38001: PUSH
38002: LD_INT 0
38004: ST_TO_ADDR
// fac_list := [ ] ;
38005: LD_ADDR_VAR 0 17
38009: PUSH
38010: EMPTY
38011: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38012: LD_ADDR_VAR 0 6
38016: PUSH
38017: LD_VAR 0 1
38021: PPUSH
38022: CALL_OW 274
38026: PPUSH
38027: LD_VAR 0 2
38031: PPUSH
38032: LD_INT 0
38034: PPUSH
38035: CALL 35589 0 3
38039: PPUSH
38040: LD_INT 30
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PPUSH
38050: CALL_OW 72
38054: ST_TO_ADDR
// if not factories then
38055: LD_VAR 0 6
38059: NOT
38060: IFFALSE 38064
// exit ;
38062: GO 39054
// for i in factories do
38064: LD_ADDR_VAR 0 8
38068: PUSH
38069: LD_VAR 0 6
38073: PUSH
38074: FOR_IN
38075: IFFALSE 38100
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38077: LD_ADDR_VAR 0 17
38081: PUSH
38082: LD_VAR 0 17
38086: PUSH
38087: LD_VAR 0 8
38091: PPUSH
38092: CALL_OW 478
38096: UNION
38097: ST_TO_ADDR
38098: GO 38074
38100: POP
38101: POP
// if not fac_list then
38102: LD_VAR 0 17
38106: NOT
38107: IFFALSE 38111
// exit ;
38109: GO 39054
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38111: LD_ADDR_VAR 0 5
38115: PUSH
38116: LD_INT 4
38118: PUSH
38119: LD_INT 5
38121: PUSH
38122: LD_INT 9
38124: PUSH
38125: LD_INT 10
38127: PUSH
38128: LD_INT 6
38130: PUSH
38131: LD_INT 7
38133: PUSH
38134: LD_INT 11
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 27
38148: PUSH
38149: LD_INT 28
38151: PUSH
38152: LD_INT 26
38154: PUSH
38155: LD_INT 30
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 43
38166: PUSH
38167: LD_INT 44
38169: PUSH
38170: LD_INT 46
38172: PUSH
38173: LD_INT 45
38175: PUSH
38176: LD_INT 47
38178: PUSH
38179: LD_INT 49
38181: PUSH
38182: EMPTY
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: PUSH
38195: LD_VAR 0 12
38199: ARRAY
38200: ST_TO_ADDR
// list := list isect fac_list ;
38201: LD_ADDR_VAR 0 5
38205: PUSH
38206: LD_VAR 0 5
38210: PUSH
38211: LD_VAR 0 17
38215: ISECT
38216: ST_TO_ADDR
// if not list then
38217: LD_VAR 0 5
38221: NOT
38222: IFFALSE 38226
// exit ;
38224: GO 39054
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38226: LD_VAR 0 12
38230: PUSH
38231: LD_INT 3
38233: EQUAL
38234: IFFALSE 38246
38236: PUSH
38237: LD_INT 49
38239: PUSH
38240: LD_VAR 0 5
38244: IN
38245: AND
38246: IFFALSE 38266
38248: PUSH
38249: LD_INT 31
38251: PPUSH
38252: LD_VAR 0 16
38256: PPUSH
38257: CALL_OW 321
38261: PUSH
38262: LD_INT 2
38264: EQUAL
38265: AND
38266: IFFALSE 38326
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38268: LD_INT 22
38270: PUSH
38271: LD_VAR 0 16
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 35
38282: PUSH
38283: LD_INT 49
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 91
38292: PUSH
38293: LD_VAR 0 1
38297: PUSH
38298: LD_INT 10
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: PPUSH
38311: CALL_OW 69
38315: NOT
38316: IFFALSE 38326
// weapon := ru_time_lapser ;
38318: LD_ADDR_VAR 0 18
38322: PUSH
38323: LD_INT 49
38325: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38326: LD_VAR 0 12
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: IN
38341: IFFALSE 38365
38343: PUSH
38344: LD_INT 11
38346: PUSH
38347: LD_VAR 0 5
38351: IN
38352: IFTRUE 38364
38354: PUSH
38355: LD_INT 30
38357: PUSH
38358: LD_VAR 0 5
38362: IN
38363: OR
38364: AND
38365: IFFALSE 38385
38367: PUSH
38368: LD_INT 6
38370: PPUSH
38371: LD_VAR 0 16
38375: PPUSH
38376: CALL_OW 321
38380: PUSH
38381: LD_INT 2
38383: EQUAL
38384: AND
38385: IFFALSE 38552
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38387: LD_INT 22
38389: PUSH
38390: LD_VAR 0 16
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 2
38401: PUSH
38402: LD_INT 35
38404: PUSH
38405: LD_INT 11
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 35
38414: PUSH
38415: LD_INT 30
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 91
38429: PUSH
38430: LD_VAR 0 1
38434: PUSH
38435: LD_INT 18
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: LIST
38447: PPUSH
38448: CALL_OW 69
38452: NOT
38453: IFFALSE 38529
38455: PUSH
38456: LD_INT 22
38458: PUSH
38459: LD_VAR 0 16
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: LD_INT 30
38473: PUSH
38474: LD_INT 32
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 30
38483: PUSH
38484: LD_INT 33
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 91
38498: PUSH
38499: LD_VAR 0 1
38503: PUSH
38504: LD_INT 12
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: LIST
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: LIST
38516: PUSH
38517: EMPTY
38518: LIST
38519: PPUSH
38520: CALL_OW 69
38524: PUSH
38525: LD_INT 2
38527: GREATER
38528: AND
38529: IFFALSE 38552
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38531: LD_ADDR_VAR 0 18
38535: PUSH
38536: LD_INT 11
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_VAR 0 12
38550: ARRAY
38551: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38552: LD_VAR 0 18
38556: NOT
38557: IFFALSE 38577
38559: PUSH
38560: LD_INT 40
38562: PPUSH
38563: LD_VAR 0 16
38567: PPUSH
38568: CALL_OW 321
38572: PUSH
38573: LD_INT 2
38575: EQUAL
38576: AND
38577: IFFALSE 38613
38579: PUSH
38580: LD_INT 7
38582: PUSH
38583: LD_VAR 0 5
38587: IN
38588: IFTRUE 38600
38590: PUSH
38591: LD_INT 28
38593: PUSH
38594: LD_VAR 0 5
38598: IN
38599: OR
38600: IFTRUE 38612
38602: PUSH
38603: LD_INT 45
38605: PUSH
38606: LD_VAR 0 5
38610: IN
38611: OR
38612: AND
38613: IFFALSE 38867
// begin hex := GetHexInfo ( x , y ) ;
38615: LD_ADDR_VAR 0 4
38619: PUSH
38620: LD_VAR 0 10
38624: PPUSH
38625: LD_VAR 0 11
38629: PPUSH
38630: CALL_OW 546
38634: ST_TO_ADDR
// if hex [ 1 ] then
38635: LD_VAR 0 4
38639: PUSH
38640: LD_INT 1
38642: ARRAY
38643: IFFALSE 38647
// exit ;
38645: GO 39054
// height := hex [ 2 ] ;
38647: LD_ADDR_VAR 0 15
38651: PUSH
38652: LD_VAR 0 4
38656: PUSH
38657: LD_INT 2
38659: ARRAY
38660: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38661: LD_ADDR_VAR 0 14
38665: PUSH
38666: LD_INT 0
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: LD_INT 5
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: ST_TO_ADDR
// for i in tmp do
38684: LD_ADDR_VAR 0 8
38688: PUSH
38689: LD_VAR 0 14
38693: PUSH
38694: FOR_IN
38695: IFFALSE 38865
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38697: LD_ADDR_VAR 0 9
38701: PUSH
38702: LD_VAR 0 10
38706: PPUSH
38707: LD_VAR 0 8
38711: PPUSH
38712: LD_INT 5
38714: PPUSH
38715: CALL_OW 272
38719: PUSH
38720: LD_VAR 0 11
38724: PPUSH
38725: LD_VAR 0 8
38729: PPUSH
38730: LD_INT 5
38732: PPUSH
38733: CALL_OW 273
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38742: LD_VAR 0 9
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: PPUSH
38751: LD_VAR 0 9
38755: PUSH
38756: LD_INT 2
38758: ARRAY
38759: PPUSH
38760: CALL_OW 488
38764: IFFALSE 38863
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38766: LD_ADDR_VAR 0 4
38770: PUSH
38771: LD_VAR 0 9
38775: PUSH
38776: LD_INT 1
38778: ARRAY
38779: PPUSH
38780: LD_VAR 0 9
38784: PUSH
38785: LD_INT 2
38787: ARRAY
38788: PPUSH
38789: CALL_OW 546
38793: ST_TO_ADDR
// if hex [ 1 ] then
38794: LD_VAR 0 4
38798: PUSH
38799: LD_INT 1
38801: ARRAY
38802: IFFALSE 38806
// continue ;
38804: GO 38694
// h := hex [ 2 ] ;
38806: LD_ADDR_VAR 0 13
38810: PUSH
38811: LD_VAR 0 4
38815: PUSH
38816: LD_INT 2
38818: ARRAY
38819: ST_TO_ADDR
// if h + 7 < height then
38820: LD_VAR 0 13
38824: PUSH
38825: LD_INT 7
38827: PLUS
38828: PUSH
38829: LD_VAR 0 15
38833: LESS
38834: IFFALSE 38863
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38836: LD_ADDR_VAR 0 18
38840: PUSH
38841: LD_INT 7
38843: PUSH
38844: LD_INT 28
38846: PUSH
38847: LD_INT 45
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: LIST
38854: PUSH
38855: LD_VAR 0 12
38859: ARRAY
38860: ST_TO_ADDR
// break ;
38861: GO 38865
// end ; end ; end ;
38863: GO 38694
38865: POP
38866: POP
// end ; if not weapon then
38867: LD_VAR 0 18
38871: NOT
38872: IFFALSE 38932
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38874: LD_ADDR_VAR 0 5
38878: PUSH
38879: LD_VAR 0 5
38883: PUSH
38884: LD_INT 11
38886: PUSH
38887: LD_INT 30
38889: PUSH
38890: LD_INT 49
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: DIFF
38898: ST_TO_ADDR
// if not list then
38899: LD_VAR 0 5
38903: NOT
38904: IFFALSE 38908
// exit ;
38906: GO 39054
// weapon := list [ rand ( 1 , list ) ] ;
38908: LD_ADDR_VAR 0 18
38912: PUSH
38913: LD_VAR 0 5
38917: PUSH
38918: LD_INT 1
38920: PPUSH
38921: LD_VAR 0 5
38925: PPUSH
38926: CALL_OW 12
38930: ARRAY
38931: ST_TO_ADDR
// end ; if weapon then
38932: LD_VAR 0 18
38936: IFFALSE 39054
// begin tmp := CostOfWeapon ( weapon ) ;
38938: LD_ADDR_VAR 0 14
38942: PUSH
38943: LD_VAR 0 18
38947: PPUSH
38948: CALL_OW 451
38952: ST_TO_ADDR
// j := GetBase ( tower ) ;
38953: LD_ADDR_VAR 0 9
38957: PUSH
38958: LD_VAR 0 1
38962: PPUSH
38963: CALL_OW 274
38967: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38968: LD_VAR 0 9
38972: PPUSH
38973: LD_INT 1
38975: PPUSH
38976: CALL_OW 275
38980: PUSH
38981: LD_VAR 0 14
38985: PUSH
38986: LD_INT 1
38988: ARRAY
38989: GREATEREQUAL
38990: IFFALSE 39016
38992: PUSH
38993: LD_VAR 0 9
38997: PPUSH
38998: LD_INT 2
39000: PPUSH
39001: CALL_OW 275
39005: PUSH
39006: LD_VAR 0 14
39010: PUSH
39011: LD_INT 2
39013: ARRAY
39014: GREATEREQUAL
39015: AND
39016: IFFALSE 39042
39018: PUSH
39019: LD_VAR 0 9
39023: PPUSH
39024: LD_INT 3
39026: PPUSH
39027: CALL_OW 275
39031: PUSH
39032: LD_VAR 0 14
39036: PUSH
39037: LD_INT 3
39039: ARRAY
39040: GREATEREQUAL
39041: AND
39042: IFFALSE 39054
// result := weapon ;
39044: LD_ADDR_VAR 0 3
39048: PUSH
39049: LD_VAR 0 18
39053: ST_TO_ADDR
// end ; end ;
39054: LD_VAR 0 3
39058: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39059: LD_INT 0
39061: PPUSH
39062: PPUSH
// result := true ;
39063: LD_ADDR_VAR 0 3
39067: PUSH
39068: LD_INT 1
39070: ST_TO_ADDR
// if array1 = array2 then
39071: LD_VAR 0 1
39075: PUSH
39076: LD_VAR 0 2
39080: EQUAL
39081: IFFALSE 39141
// begin for i = 1 to array1 do
39083: LD_ADDR_VAR 0 4
39087: PUSH
39088: DOUBLE
39089: LD_INT 1
39091: DEC
39092: ST_TO_ADDR
39093: LD_VAR 0 1
39097: PUSH
39098: FOR_TO
39099: IFFALSE 39137
// if array1 [ i ] <> array2 [ i ] then
39101: LD_VAR 0 1
39105: PUSH
39106: LD_VAR 0 4
39110: ARRAY
39111: PUSH
39112: LD_VAR 0 2
39116: PUSH
39117: LD_VAR 0 4
39121: ARRAY
39122: NONEQUAL
39123: IFFALSE 39135
// begin result := false ;
39125: LD_ADDR_VAR 0 3
39129: PUSH
39130: LD_INT 0
39132: ST_TO_ADDR
// break ;
39133: GO 39137
// end ;
39135: GO 39098
39137: POP
39138: POP
// end else
39139: GO 39149
// result := false ;
39141: LD_ADDR_VAR 0 3
39145: PUSH
39146: LD_INT 0
39148: ST_TO_ADDR
// end ;
39149: LD_VAR 0 3
39153: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39154: LD_INT 0
39156: PPUSH
39157: PPUSH
// if not array1 or not array2 then
39158: LD_VAR 0 1
39162: NOT
39163: IFTRUE 39172
39165: PUSH
39166: LD_VAR 0 2
39170: NOT
39171: OR
39172: IFFALSE 39176
// exit ;
39174: GO 39240
// result := true ;
39176: LD_ADDR_VAR 0 3
39180: PUSH
39181: LD_INT 1
39183: ST_TO_ADDR
// for i = 1 to array1 do
39184: LD_ADDR_VAR 0 4
39188: PUSH
39189: DOUBLE
39190: LD_INT 1
39192: DEC
39193: ST_TO_ADDR
39194: LD_VAR 0 1
39198: PUSH
39199: FOR_TO
39200: IFFALSE 39238
// if array1 [ i ] <> array2 [ i ] then
39202: LD_VAR 0 1
39206: PUSH
39207: LD_VAR 0 4
39211: ARRAY
39212: PUSH
39213: LD_VAR 0 2
39217: PUSH
39218: LD_VAR 0 4
39222: ARRAY
39223: NONEQUAL
39224: IFFALSE 39236
// begin result := false ;
39226: LD_ADDR_VAR 0 3
39230: PUSH
39231: LD_INT 0
39233: ST_TO_ADDR
// break ;
39234: GO 39238
// end ;
39236: GO 39199
39238: POP
39239: POP
// end ;
39240: LD_VAR 0 3
39244: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39245: LD_INT 0
39247: PPUSH
39248: PPUSH
39249: PPUSH
// pom := GetBase ( fac ) ;
39250: LD_ADDR_VAR 0 5
39254: PUSH
39255: LD_VAR 0 1
39259: PPUSH
39260: CALL_OW 274
39264: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39265: LD_ADDR_VAR 0 4
39269: PUSH
39270: LD_VAR 0 2
39274: PUSH
39275: LD_INT 1
39277: ARRAY
39278: PPUSH
39279: LD_VAR 0 2
39283: PUSH
39284: LD_INT 2
39286: ARRAY
39287: PPUSH
39288: LD_VAR 0 2
39292: PUSH
39293: LD_INT 3
39295: ARRAY
39296: PPUSH
39297: LD_VAR 0 2
39301: PUSH
39302: LD_INT 4
39304: ARRAY
39305: PPUSH
39306: CALL_OW 449
39310: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: LD_VAR 0 5
39320: PPUSH
39321: LD_INT 1
39323: PPUSH
39324: CALL_OW 275
39328: PUSH
39329: LD_VAR 0 4
39333: PUSH
39334: LD_INT 1
39336: ARRAY
39337: GREATEREQUAL
39338: IFFALSE 39364
39340: PUSH
39341: LD_VAR 0 5
39345: PPUSH
39346: LD_INT 2
39348: PPUSH
39349: CALL_OW 275
39353: PUSH
39354: LD_VAR 0 4
39358: PUSH
39359: LD_INT 2
39361: ARRAY
39362: GREATEREQUAL
39363: AND
39364: IFFALSE 39390
39366: PUSH
39367: LD_VAR 0 5
39371: PPUSH
39372: LD_INT 3
39374: PPUSH
39375: CALL_OW 275
39379: PUSH
39380: LD_VAR 0 4
39384: PUSH
39385: LD_INT 3
39387: ARRAY
39388: GREATEREQUAL
39389: AND
39390: ST_TO_ADDR
// end ;
39391: LD_VAR 0 3
39395: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39396: LD_INT 0
39398: PPUSH
39399: PPUSH
39400: PPUSH
39401: PPUSH
// pom := GetBase ( building ) ;
39402: LD_ADDR_VAR 0 3
39406: PUSH
39407: LD_VAR 0 1
39411: PPUSH
39412: CALL_OW 274
39416: ST_TO_ADDR
// if not pom then
39417: LD_VAR 0 3
39421: NOT
39422: IFFALSE 39426
// exit ;
39424: GO 39600
// btype := GetBType ( building ) ;
39426: LD_ADDR_VAR 0 5
39430: PUSH
39431: LD_VAR 0 1
39435: PPUSH
39436: CALL_OW 266
39440: ST_TO_ADDR
// if btype = b_armoury then
39441: LD_VAR 0 5
39445: PUSH
39446: LD_INT 4
39448: EQUAL
39449: IFFALSE 39459
// btype := b_barracks ;
39451: LD_ADDR_VAR 0 5
39455: PUSH
39456: LD_INT 5
39458: ST_TO_ADDR
// if btype = b_depot then
39459: LD_VAR 0 5
39463: PUSH
39464: LD_INT 0
39466: EQUAL
39467: IFFALSE 39477
// btype := b_warehouse ;
39469: LD_ADDR_VAR 0 5
39473: PUSH
39474: LD_INT 1
39476: ST_TO_ADDR
// if btype = b_workshop then
39477: LD_VAR 0 5
39481: PUSH
39482: LD_INT 2
39484: EQUAL
39485: IFFALSE 39495
// btype := b_factory ;
39487: LD_ADDR_VAR 0 5
39491: PUSH
39492: LD_INT 3
39494: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39495: LD_ADDR_VAR 0 4
39499: PUSH
39500: LD_VAR 0 5
39504: PPUSH
39505: LD_VAR 0 1
39509: PPUSH
39510: CALL_OW 248
39514: PPUSH
39515: CALL_OW 450
39519: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39520: LD_ADDR_VAR 0 2
39524: PUSH
39525: LD_VAR 0 3
39529: PPUSH
39530: LD_INT 1
39532: PPUSH
39533: CALL_OW 275
39537: PUSH
39538: LD_VAR 0 4
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: GREATEREQUAL
39547: IFFALSE 39573
39549: PUSH
39550: LD_VAR 0 3
39554: PPUSH
39555: LD_INT 2
39557: PPUSH
39558: CALL_OW 275
39562: PUSH
39563: LD_VAR 0 4
39567: PUSH
39568: LD_INT 2
39570: ARRAY
39571: GREATEREQUAL
39572: AND
39573: IFFALSE 39599
39575: PUSH
39576: LD_VAR 0 3
39580: PPUSH
39581: LD_INT 3
39583: PPUSH
39584: CALL_OW 275
39588: PUSH
39589: LD_VAR 0 4
39593: PUSH
39594: LD_INT 3
39596: ARRAY
39597: GREATEREQUAL
39598: AND
39599: ST_TO_ADDR
// end ;
39600: LD_VAR 0 2
39604: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39605: LD_INT 0
39607: PPUSH
39608: PPUSH
39609: PPUSH
// pom := GetBase ( building ) ;
39610: LD_ADDR_VAR 0 4
39614: PUSH
39615: LD_VAR 0 1
39619: PPUSH
39620: CALL_OW 274
39624: ST_TO_ADDR
// if not pom then
39625: LD_VAR 0 4
39629: NOT
39630: IFFALSE 39634
// exit ;
39632: GO 39739
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39634: LD_ADDR_VAR 0 5
39638: PUSH
39639: LD_VAR 0 2
39643: PPUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: CALL_OW 248
39653: PPUSH
39654: CALL_OW 450
39658: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_VAR 0 4
39668: PPUSH
39669: LD_INT 1
39671: PPUSH
39672: CALL_OW 275
39676: PUSH
39677: LD_VAR 0 5
39681: PUSH
39682: LD_INT 1
39684: ARRAY
39685: GREATEREQUAL
39686: IFFALSE 39712
39688: PUSH
39689: LD_VAR 0 4
39693: PPUSH
39694: LD_INT 2
39696: PPUSH
39697: CALL_OW 275
39701: PUSH
39702: LD_VAR 0 5
39706: PUSH
39707: LD_INT 2
39709: ARRAY
39710: GREATEREQUAL
39711: AND
39712: IFFALSE 39738
39714: PUSH
39715: LD_VAR 0 4
39719: PPUSH
39720: LD_INT 3
39722: PPUSH
39723: CALL_OW 275
39727: PUSH
39728: LD_VAR 0 5
39732: PUSH
39733: LD_INT 3
39735: ARRAY
39736: GREATEREQUAL
39737: AND
39738: ST_TO_ADDR
// end ;
39739: LD_VAR 0 3
39743: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39744: LD_INT 0
39746: PPUSH
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
// result := false ;
39757: LD_ADDR_VAR 0 8
39761: PUSH
39762: LD_INT 0
39764: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39765: LD_VAR 0 5
39769: NOT
39770: IFTRUE 39779
39772: PUSH
39773: LD_VAR 0 1
39777: NOT
39778: OR
39779: IFTRUE 39788
39781: PUSH
39782: LD_VAR 0 2
39786: NOT
39787: OR
39788: IFTRUE 39797
39790: PUSH
39791: LD_VAR 0 3
39795: NOT
39796: OR
39797: IFFALSE 39801
// exit ;
39799: GO 40627
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39801: LD_ADDR_VAR 0 14
39805: PUSH
39806: LD_VAR 0 1
39810: PPUSH
39811: LD_VAR 0 2
39815: PPUSH
39816: LD_VAR 0 3
39820: PPUSH
39821: LD_VAR 0 4
39825: PPUSH
39826: LD_VAR 0 5
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: PPUSH
39835: CALL_OW 248
39839: PPUSH
39840: LD_INT 0
39842: PPUSH
39843: CALL 41908 0 6
39847: ST_TO_ADDR
// if not hexes then
39848: LD_VAR 0 14
39852: NOT
39853: IFFALSE 39857
// exit ;
39855: GO 40627
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39857: LD_ADDR_VAR 0 17
39861: PUSH
39862: LD_VAR 0 5
39866: PPUSH
39867: LD_INT 22
39869: PUSH
39870: LD_VAR 0 13
39874: PPUSH
39875: CALL_OW 255
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 2
39886: PUSH
39887: LD_INT 30
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 30
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: LIST
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PPUSH
39916: CALL_OW 72
39920: ST_TO_ADDR
// for i = 1 to hexes do
39921: LD_ADDR_VAR 0 9
39925: PUSH
39926: DOUBLE
39927: LD_INT 1
39929: DEC
39930: ST_TO_ADDR
39931: LD_VAR 0 14
39935: PUSH
39936: FOR_TO
39937: IFFALSE 40625
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39939: LD_ADDR_VAR 0 13
39943: PUSH
39944: LD_VAR 0 14
39948: PUSH
39949: LD_VAR 0 9
39953: ARRAY
39954: PUSH
39955: LD_INT 1
39957: ARRAY
39958: PPUSH
39959: LD_VAR 0 14
39963: PUSH
39964: LD_VAR 0 9
39968: ARRAY
39969: PUSH
39970: LD_INT 2
39972: ARRAY
39973: PPUSH
39974: CALL_OW 428
39978: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39979: LD_VAR 0 14
39983: PUSH
39984: LD_VAR 0 9
39988: ARRAY
39989: PUSH
39990: LD_INT 1
39992: ARRAY
39993: PPUSH
39994: LD_VAR 0 14
39998: PUSH
39999: LD_VAR 0 9
40003: ARRAY
40004: PUSH
40005: LD_INT 2
40007: ARRAY
40008: PPUSH
40009: CALL_OW 351
40013: IFTRUE 40052
40015: PUSH
40016: LD_VAR 0 14
40020: PUSH
40021: LD_VAR 0 9
40025: ARRAY
40026: PUSH
40027: LD_INT 1
40029: ARRAY
40030: PPUSH
40031: LD_VAR 0 14
40035: PUSH
40036: LD_VAR 0 9
40040: ARRAY
40041: PUSH
40042: LD_INT 2
40044: ARRAY
40045: PPUSH
40046: CALL_OW 488
40050: NOT
40051: OR
40052: IFTRUE 40069
40054: PUSH
40055: LD_VAR 0 13
40059: PPUSH
40060: CALL_OW 247
40064: PUSH
40065: LD_INT 3
40067: EQUAL
40068: OR
40069: IFFALSE 40075
// exit ;
40071: POP
40072: POP
40073: GO 40627
// if not tmp then
40075: LD_VAR 0 13
40079: NOT
40080: IFFALSE 40084
// continue ;
40082: GO 39936
// result := true ;
40084: LD_ADDR_VAR 0 8
40088: PUSH
40089: LD_INT 1
40091: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40092: LD_VAR 0 6
40096: IFFALSE 40113
40098: PUSH
40099: LD_VAR 0 13
40103: PPUSH
40104: CALL_OW 247
40108: PUSH
40109: LD_INT 2
40111: EQUAL
40112: AND
40113: IFFALSE 40130
40115: PUSH
40116: LD_VAR 0 13
40120: PPUSH
40121: CALL_OW 263
40125: PUSH
40126: LD_INT 1
40128: EQUAL
40129: AND
40130: IFFALSE 40294
// begin if IsDrivenBy ( tmp ) then
40132: LD_VAR 0 13
40136: PPUSH
40137: CALL_OW 311
40141: IFFALSE 40145
// continue ;
40143: GO 39936
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40145: LD_VAR 0 6
40149: PPUSH
40150: LD_INT 3
40152: PUSH
40153: LD_INT 60
40155: PUSH
40156: EMPTY
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 3
40165: PUSH
40166: LD_INT 55
40168: PUSH
40169: EMPTY
40170: LIST
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PPUSH
40180: CALL_OW 72
40184: IFFALSE 40292
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40186: LD_ADDR_VAR 0 18
40190: PUSH
40191: LD_VAR 0 6
40195: PPUSH
40196: LD_INT 3
40198: PUSH
40199: LD_INT 60
40201: PUSH
40202: EMPTY
40203: LIST
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 55
40214: PUSH
40215: EMPTY
40216: LIST
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PPUSH
40226: CALL_OW 72
40230: PUSH
40231: LD_INT 1
40233: ARRAY
40234: ST_TO_ADDR
// if IsInUnit ( driver ) then
40235: LD_VAR 0 18
40239: PPUSH
40240: CALL_OW 310
40244: IFFALSE 40255
// ComExit ( driver ) ;
40246: LD_VAR 0 18
40250: PPUSH
40251: CALL 65908 0 1
// AddComEnterUnit ( driver , tmp ) ;
40255: LD_VAR 0 18
40259: PPUSH
40260: LD_VAR 0 13
40264: PPUSH
40265: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40269: LD_VAR 0 18
40273: PPUSH
40274: LD_VAR 0 7
40278: PPUSH
40279: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40283: LD_VAR 0 18
40287: PPUSH
40288: CALL_OW 181
// end ; continue ;
40292: GO 39936
// end ; if not cleaners or not tmp in cleaners then
40294: LD_VAR 0 6
40298: NOT
40299: IFTRUE 40314
40301: PUSH
40302: LD_VAR 0 13
40306: PUSH
40307: LD_VAR 0 6
40311: IN
40312: NOT
40313: OR
40314: IFFALSE 40623
// begin if dep then
40316: LD_VAR 0 17
40320: IFFALSE 40456
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40322: LD_ADDR_VAR 0 16
40326: PUSH
40327: LD_VAR 0 17
40331: PUSH
40332: LD_INT 1
40334: ARRAY
40335: PPUSH
40336: CALL_OW 250
40340: PPUSH
40341: LD_VAR 0 17
40345: PUSH
40346: LD_INT 1
40348: ARRAY
40349: PPUSH
40350: CALL_OW 254
40354: PPUSH
40355: LD_INT 5
40357: PPUSH
40358: CALL_OW 272
40362: PUSH
40363: LD_VAR 0 17
40367: PUSH
40368: LD_INT 1
40370: ARRAY
40371: PPUSH
40372: CALL_OW 251
40376: PPUSH
40377: LD_VAR 0 17
40381: PUSH
40382: LD_INT 1
40384: ARRAY
40385: PPUSH
40386: CALL_OW 254
40390: PPUSH
40391: LD_INT 5
40393: PPUSH
40394: CALL_OW 273
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40403: LD_VAR 0 16
40407: PUSH
40408: LD_INT 1
40410: ARRAY
40411: PPUSH
40412: LD_VAR 0 16
40416: PUSH
40417: LD_INT 2
40419: ARRAY
40420: PPUSH
40421: CALL_OW 488
40425: IFFALSE 40456
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40427: LD_VAR 0 13
40431: PPUSH
40432: LD_VAR 0 16
40436: PUSH
40437: LD_INT 1
40439: ARRAY
40440: PPUSH
40441: LD_VAR 0 16
40445: PUSH
40446: LD_INT 2
40448: ARRAY
40449: PPUSH
40450: CALL_OW 111
// continue ;
40454: GO 39936
// end ; end ; r := GetDir ( tmp ) ;
40456: LD_ADDR_VAR 0 15
40460: PUSH
40461: LD_VAR 0 13
40465: PPUSH
40466: CALL_OW 254
40470: ST_TO_ADDR
// if r = 5 then
40471: LD_VAR 0 15
40475: PUSH
40476: LD_INT 5
40478: EQUAL
40479: IFFALSE 40489
// r := 0 ;
40481: LD_ADDR_VAR 0 15
40485: PUSH
40486: LD_INT 0
40488: ST_TO_ADDR
// for j = r to 5 do
40489: LD_ADDR_VAR 0 10
40493: PUSH
40494: DOUBLE
40495: LD_VAR 0 15
40499: DEC
40500: ST_TO_ADDR
40501: LD_INT 5
40503: PUSH
40504: FOR_TO
40505: IFFALSE 40621
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40507: LD_ADDR_VAR 0 11
40511: PUSH
40512: LD_VAR 0 13
40516: PPUSH
40517: CALL_OW 250
40521: PPUSH
40522: LD_VAR 0 10
40526: PPUSH
40527: LD_INT 2
40529: PPUSH
40530: CALL_OW 272
40534: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40535: LD_ADDR_VAR 0 12
40539: PUSH
40540: LD_VAR 0 13
40544: PPUSH
40545: CALL_OW 251
40549: PPUSH
40550: LD_VAR 0 10
40554: PPUSH
40555: LD_INT 2
40557: PPUSH
40558: CALL_OW 273
40562: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40563: LD_VAR 0 11
40567: PPUSH
40568: LD_VAR 0 12
40572: PPUSH
40573: CALL_OW 488
40577: IFFALSE 40596
40579: PUSH
40580: LD_VAR 0 11
40584: PPUSH
40585: LD_VAR 0 12
40589: PPUSH
40590: CALL_OW 428
40594: NOT
40595: AND
40596: IFFALSE 40619
// begin ComMoveXY ( tmp , _x , _y ) ;
40598: LD_VAR 0 13
40602: PPUSH
40603: LD_VAR 0 11
40607: PPUSH
40608: LD_VAR 0 12
40612: PPUSH
40613: CALL_OW 111
// break ;
40617: GO 40621
// end ; end ;
40619: GO 40504
40621: POP
40622: POP
// end ; end ;
40623: GO 39936
40625: POP
40626: POP
// end ;
40627: LD_VAR 0 8
40631: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40632: LD_INT 0
40634: PPUSH
// result := true ;
40635: LD_ADDR_VAR 0 3
40639: PUSH
40640: LD_INT 1
40642: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40643: LD_VAR 0 2
40647: PUSH
40648: LD_INT 24
40650: DOUBLE
40651: EQUAL
40652: IFTRUE 40662
40654: LD_INT 33
40656: DOUBLE
40657: EQUAL
40658: IFTRUE 40662
40660: GO 40687
40662: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40663: LD_ADDR_VAR 0 3
40667: PUSH
40668: LD_INT 32
40670: PPUSH
40671: LD_VAR 0 1
40675: PPUSH
40676: CALL_OW 321
40680: PUSH
40681: LD_INT 2
40683: EQUAL
40684: ST_TO_ADDR
40685: GO 41003
40687: LD_INT 20
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40720
40695: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40696: LD_ADDR_VAR 0 3
40700: PUSH
40701: LD_INT 6
40703: PPUSH
40704: LD_VAR 0 1
40708: PPUSH
40709: CALL_OW 321
40713: PUSH
40714: LD_INT 2
40716: EQUAL
40717: ST_TO_ADDR
40718: GO 41003
40720: LD_INT 22
40722: DOUBLE
40723: EQUAL
40724: IFTRUE 40734
40726: LD_INT 36
40728: DOUBLE
40729: EQUAL
40730: IFTRUE 40734
40732: GO 40759
40734: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40735: LD_ADDR_VAR 0 3
40739: PUSH
40740: LD_INT 15
40742: PPUSH
40743: LD_VAR 0 1
40747: PPUSH
40748: CALL_OW 321
40752: PUSH
40753: LD_INT 2
40755: EQUAL
40756: ST_TO_ADDR
40757: GO 41003
40759: LD_INT 30
40761: DOUBLE
40762: EQUAL
40763: IFTRUE 40767
40765: GO 40792
40767: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40768: LD_ADDR_VAR 0 3
40772: PUSH
40773: LD_INT 20
40775: PPUSH
40776: LD_VAR 0 1
40780: PPUSH
40781: CALL_OW 321
40785: PUSH
40786: LD_INT 2
40788: EQUAL
40789: ST_TO_ADDR
40790: GO 41003
40792: LD_INT 28
40794: DOUBLE
40795: EQUAL
40796: IFTRUE 40806
40798: LD_INT 21
40800: DOUBLE
40801: EQUAL
40802: IFTRUE 40806
40804: GO 40831
40806: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40807: LD_ADDR_VAR 0 3
40811: PUSH
40812: LD_INT 21
40814: PPUSH
40815: LD_VAR 0 1
40819: PPUSH
40820: CALL_OW 321
40824: PUSH
40825: LD_INT 2
40827: EQUAL
40828: ST_TO_ADDR
40829: GO 41003
40831: LD_INT 16
40833: DOUBLE
40834: EQUAL
40835: IFTRUE 40839
40837: GO 40864
40839: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_INT 84
40847: PPUSH
40848: LD_VAR 0 1
40852: PPUSH
40853: CALL_OW 321
40857: PUSH
40858: LD_INT 2
40860: EQUAL
40861: ST_TO_ADDR
40862: GO 41003
40864: LD_INT 19
40866: DOUBLE
40867: EQUAL
40868: IFTRUE 40878
40870: LD_INT 23
40872: DOUBLE
40873: EQUAL
40874: IFTRUE 40878
40876: GO 40903
40878: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40879: LD_ADDR_VAR 0 3
40883: PUSH
40884: LD_INT 83
40886: PPUSH
40887: LD_VAR 0 1
40891: PPUSH
40892: CALL_OW 321
40896: PUSH
40897: LD_INT 2
40899: EQUAL
40900: ST_TO_ADDR
40901: GO 41003
40903: LD_INT 17
40905: DOUBLE
40906: EQUAL
40907: IFTRUE 40911
40909: GO 40936
40911: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40912: LD_ADDR_VAR 0 3
40916: PUSH
40917: LD_INT 39
40919: PPUSH
40920: LD_VAR 0 1
40924: PPUSH
40925: CALL_OW 321
40929: PUSH
40930: LD_INT 2
40932: EQUAL
40933: ST_TO_ADDR
40934: GO 41003
40936: LD_INT 18
40938: DOUBLE
40939: EQUAL
40940: IFTRUE 40944
40942: GO 40969
40944: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40945: LD_ADDR_VAR 0 3
40949: PUSH
40950: LD_INT 40
40952: PPUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 321
40962: PUSH
40963: LD_INT 2
40965: EQUAL
40966: ST_TO_ADDR
40967: GO 41003
40969: LD_INT 27
40971: DOUBLE
40972: EQUAL
40973: IFTRUE 40977
40975: GO 41002
40977: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40978: LD_ADDR_VAR 0 3
40982: PUSH
40983: LD_INT 35
40985: PPUSH
40986: LD_VAR 0 1
40990: PPUSH
40991: CALL_OW 321
40995: PUSH
40996: LD_INT 2
40998: EQUAL
40999: ST_TO_ADDR
41000: GO 41003
41002: POP
// end ;
41003: LD_VAR 0 3
41007: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41008: LD_INT 0
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
41020: PPUSH
// result := false ;
41021: LD_ADDR_VAR 0 6
41025: PUSH
41026: LD_INT 0
41028: ST_TO_ADDR
// if btype = b_depot then
41029: LD_VAR 0 2
41033: PUSH
41034: LD_INT 0
41036: EQUAL
41037: IFFALSE 41049
// begin result := true ;
41039: LD_ADDR_VAR 0 6
41043: PUSH
41044: LD_INT 1
41046: ST_TO_ADDR
// exit ;
41047: GO 41903
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41049: LD_VAR 0 1
41053: NOT
41054: IFTRUE 41079
41056: PUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: CALL_OW 266
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: IN
41077: NOT
41078: OR
41079: IFTRUE 41088
41081: PUSH
41082: LD_VAR 0 2
41086: NOT
41087: OR
41088: IFTRUE 41124
41090: PUSH
41091: LD_VAR 0 5
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: LD_INT 2
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: LD_INT 4
41110: PUSH
41111: LD_INT 5
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: IN
41122: NOT
41123: OR
41124: IFTRUE 41143
41126: PUSH
41127: LD_VAR 0 3
41131: PPUSH
41132: LD_VAR 0 4
41136: PPUSH
41137: CALL_OW 488
41141: NOT
41142: OR
41143: IFFALSE 41147
// exit ;
41145: GO 41903
// side := GetSide ( depot ) ;
41147: LD_ADDR_VAR 0 9
41151: PUSH
41152: LD_VAR 0 1
41156: PPUSH
41157: CALL_OW 255
41161: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41162: LD_VAR 0 9
41166: PPUSH
41167: LD_VAR 0 2
41171: PPUSH
41172: CALL 40632 0 2
41176: NOT
41177: IFFALSE 41181
// exit ;
41179: GO 41903
// pom := GetBase ( depot ) ;
41181: LD_ADDR_VAR 0 10
41185: PUSH
41186: LD_VAR 0 1
41190: PPUSH
41191: CALL_OW 274
41195: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41196: LD_ADDR_VAR 0 11
41200: PUSH
41201: LD_VAR 0 2
41205: PPUSH
41206: LD_VAR 0 1
41210: PPUSH
41211: CALL_OW 248
41215: PPUSH
41216: CALL_OW 450
41220: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41221: LD_VAR 0 10
41225: PPUSH
41226: LD_INT 1
41228: PPUSH
41229: CALL_OW 275
41233: PUSH
41234: LD_VAR 0 11
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: GREATEREQUAL
41243: IFFALSE 41269
41245: PUSH
41246: LD_VAR 0 10
41250: PPUSH
41251: LD_INT 2
41253: PPUSH
41254: CALL_OW 275
41258: PUSH
41259: LD_VAR 0 11
41263: PUSH
41264: LD_INT 2
41266: ARRAY
41267: GREATEREQUAL
41268: AND
41269: IFFALSE 41295
41271: PUSH
41272: LD_VAR 0 10
41276: PPUSH
41277: LD_INT 3
41279: PPUSH
41280: CALL_OW 275
41284: PUSH
41285: LD_VAR 0 11
41289: PUSH
41290: LD_INT 3
41292: ARRAY
41293: GREATEREQUAL
41294: AND
41295: NOT
41296: IFFALSE 41300
// exit ;
41298: GO 41903
// if GetBType ( depot ) = b_depot then
41300: LD_VAR 0 1
41304: PPUSH
41305: CALL_OW 266
41309: PUSH
41310: LD_INT 0
41312: EQUAL
41313: IFFALSE 41325
// dist := 28 else
41315: LD_ADDR_VAR 0 14
41319: PUSH
41320: LD_INT 28
41322: ST_TO_ADDR
41323: GO 41333
// dist := 36 ;
41325: LD_ADDR_VAR 0 14
41329: PUSH
41330: LD_INT 36
41332: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41333: LD_VAR 0 1
41337: PPUSH
41338: LD_VAR 0 3
41342: PPUSH
41343: LD_VAR 0 4
41347: PPUSH
41348: CALL_OW 297
41352: PUSH
41353: LD_VAR 0 14
41357: GREATER
41358: IFFALSE 41362
// exit ;
41360: GO 41903
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41362: LD_ADDR_VAR 0 12
41366: PUSH
41367: LD_VAR 0 2
41371: PPUSH
41372: LD_VAR 0 3
41376: PPUSH
41377: LD_VAR 0 4
41381: PPUSH
41382: LD_VAR 0 5
41386: PPUSH
41387: LD_VAR 0 1
41391: PPUSH
41392: CALL_OW 248
41396: PPUSH
41397: LD_INT 0
41399: PPUSH
41400: CALL 41908 0 6
41404: ST_TO_ADDR
// if not hexes then
41405: LD_VAR 0 12
41409: NOT
41410: IFFALSE 41414
// exit ;
41412: GO 41903
// hex := GetHexInfo ( x , y ) ;
41414: LD_ADDR_VAR 0 15
41418: PUSH
41419: LD_VAR 0 3
41423: PPUSH
41424: LD_VAR 0 4
41428: PPUSH
41429: CALL_OW 546
41433: ST_TO_ADDR
// if hex [ 1 ] then
41434: LD_VAR 0 15
41438: PUSH
41439: LD_INT 1
41441: ARRAY
41442: IFFALSE 41446
// exit ;
41444: GO 41903
// height := hex [ 2 ] ;
41446: LD_ADDR_VAR 0 13
41450: PUSH
41451: LD_VAR 0 15
41455: PUSH
41456: LD_INT 2
41458: ARRAY
41459: ST_TO_ADDR
// for i = 1 to hexes do
41460: LD_ADDR_VAR 0 7
41464: PUSH
41465: DOUBLE
41466: LD_INT 1
41468: DEC
41469: ST_TO_ADDR
41470: LD_VAR 0 12
41474: PUSH
41475: FOR_TO
41476: IFFALSE 41820
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41478: LD_VAR 0 12
41482: PUSH
41483: LD_VAR 0 7
41487: ARRAY
41488: PUSH
41489: LD_INT 1
41491: ARRAY
41492: PPUSH
41493: LD_VAR 0 12
41497: PUSH
41498: LD_VAR 0 7
41502: ARRAY
41503: PUSH
41504: LD_INT 2
41506: ARRAY
41507: PPUSH
41508: CALL_OW 488
41512: NOT
41513: IFTRUE 41555
41515: PUSH
41516: LD_VAR 0 12
41520: PUSH
41521: LD_VAR 0 7
41525: ARRAY
41526: PUSH
41527: LD_INT 1
41529: ARRAY
41530: PPUSH
41531: LD_VAR 0 12
41535: PUSH
41536: LD_VAR 0 7
41540: ARRAY
41541: PUSH
41542: LD_INT 2
41544: ARRAY
41545: PPUSH
41546: CALL_OW 428
41550: PUSH
41551: LD_INT 0
41553: GREATER
41554: OR
41555: IFTRUE 41593
41557: PUSH
41558: LD_VAR 0 12
41562: PUSH
41563: LD_VAR 0 7
41567: ARRAY
41568: PUSH
41569: LD_INT 1
41571: ARRAY
41572: PPUSH
41573: LD_VAR 0 12
41577: PUSH
41578: LD_VAR 0 7
41582: ARRAY
41583: PUSH
41584: LD_INT 2
41586: ARRAY
41587: PPUSH
41588: CALL_OW 351
41592: OR
41593: IFFALSE 41599
// exit ;
41595: POP
41596: POP
41597: GO 41903
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41599: LD_ADDR_VAR 0 8
41603: PUSH
41604: LD_VAR 0 12
41608: PUSH
41609: LD_VAR 0 7
41613: ARRAY
41614: PUSH
41615: LD_INT 1
41617: ARRAY
41618: PPUSH
41619: LD_VAR 0 12
41623: PUSH
41624: LD_VAR 0 7
41628: ARRAY
41629: PUSH
41630: LD_INT 2
41632: ARRAY
41633: PPUSH
41634: CALL_OW 546
41638: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41639: LD_VAR 0 8
41643: PUSH
41644: LD_INT 1
41646: ARRAY
41647: IFTRUE 41669
41649: PUSH
41650: LD_VAR 0 8
41654: PUSH
41655: LD_INT 2
41657: ARRAY
41658: PUSH
41659: LD_VAR 0 13
41663: PUSH
41664: LD_INT 2
41666: PLUS
41667: GREATER
41668: OR
41669: IFTRUE 41691
41671: PUSH
41672: LD_VAR 0 8
41676: PUSH
41677: LD_INT 2
41679: ARRAY
41680: PUSH
41681: LD_VAR 0 13
41685: PUSH
41686: LD_INT 2
41688: MINUS
41689: LESS
41690: OR
41691: IFTRUE 41759
41693: PUSH
41694: LD_VAR 0 8
41698: PUSH
41699: LD_INT 3
41701: ARRAY
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 8
41708: PUSH
41709: LD_INT 9
41711: PUSH
41712: LD_INT 10
41714: PUSH
41715: LD_INT 11
41717: PUSH
41718: LD_INT 12
41720: PUSH
41721: LD_INT 13
41723: PUSH
41724: LD_INT 16
41726: PUSH
41727: LD_INT 17
41729: PUSH
41730: LD_INT 18
41732: PUSH
41733: LD_INT 19
41735: PUSH
41736: LD_INT 20
41738: PUSH
41739: LD_INT 21
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: IN
41757: NOT
41758: OR
41759: IFTRUE 41772
41761: PUSH
41762: LD_VAR 0 8
41766: PUSH
41767: LD_INT 5
41769: ARRAY
41770: NOT
41771: OR
41772: IFTRUE 41812
41774: PUSH
41775: LD_VAR 0 8
41779: PUSH
41780: LD_INT 6
41782: ARRAY
41783: PUSH
41784: LD_INT 1
41786: PUSH
41787: LD_INT 2
41789: PUSH
41790: LD_INT 7
41792: PUSH
41793: LD_INT 9
41795: PUSH
41796: LD_INT 10
41798: PUSH
41799: LD_INT 11
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: IN
41810: NOT
41811: OR
41812: IFFALSE 41818
// exit ;
41814: POP
41815: POP
41816: GO 41903
// end ;
41818: GO 41475
41820: POP
41821: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41822: LD_VAR 0 9
41826: PPUSH
41827: LD_VAR 0 3
41831: PPUSH
41832: LD_VAR 0 4
41836: PPUSH
41837: LD_INT 20
41839: PPUSH
41840: CALL 33722 0 4
41844: PUSH
41845: LD_INT 4
41847: ARRAY
41848: IFFALSE 41852
// exit ;
41850: GO 41903
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41852: LD_VAR 0 2
41856: PUSH
41857: LD_INT 29
41859: PUSH
41860: LD_INT 30
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: IN
41867: IFFALSE 41891
41869: PUSH
41870: LD_VAR 0 3
41874: PPUSH
41875: LD_VAR 0 4
41879: PPUSH
41880: LD_VAR 0 9
41884: PPUSH
41885: CALL_OW 440
41889: NOT
41890: AND
41891: IFFALSE 41895
// exit ;
41893: GO 41903
// result := true ;
41895: LD_ADDR_VAR 0 6
41899: PUSH
41900: LD_INT 1
41902: ST_TO_ADDR
// end ;
41903: LD_VAR 0 6
41907: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41908: LD_INT 0
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
41915: PPUSH
41916: PPUSH
41917: PPUSH
41918: PPUSH
41919: PPUSH
41920: PPUSH
41921: PPUSH
41922: PPUSH
41923: PPUSH
41924: PPUSH
41925: PPUSH
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
41942: PPUSH
41943: PPUSH
41944: PPUSH
41945: PPUSH
41946: PPUSH
41947: PPUSH
41948: PPUSH
41949: PPUSH
41950: PPUSH
41951: PPUSH
41952: PPUSH
41953: PPUSH
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
41958: PPUSH
41959: PPUSH
41960: PPUSH
41961: PPUSH
41962: PPUSH
41963: PPUSH
41964: PPUSH
41965: PPUSH
41966: PPUSH
41967: PPUSH
// result = [ ] ;
41968: LD_ADDR_VAR 0 7
41972: PUSH
41973: EMPTY
41974: ST_TO_ADDR
// temp_list = [ ] ;
41975: LD_ADDR_VAR 0 9
41979: PUSH
41980: EMPTY
41981: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41982: LD_VAR 0 4
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: LD_INT 2
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 4
42001: PUSH
42002: LD_INT 5
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: IN
42013: NOT
42014: IFTRUE 42057
42016: PUSH
42017: LD_VAR 0 1
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: IN
42032: IFFALSE 42056
42034: PUSH
42035: LD_VAR 0 5
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 3
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: IN
42054: NOT
42055: AND
42056: OR
42057: IFFALSE 42061
// exit ;
42059: GO 60460
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42061: LD_VAR 0 1
42065: PUSH
42066: LD_INT 6
42068: PUSH
42069: LD_INT 7
42071: PUSH
42072: LD_INT 8
42074: PUSH
42075: LD_INT 13
42077: PUSH
42078: LD_INT 12
42080: PUSH
42081: LD_INT 15
42083: PUSH
42084: LD_INT 11
42086: PUSH
42087: LD_INT 14
42089: PUSH
42090: LD_INT 10
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: IN
42104: IFFALSE 42114
// btype = b_lab ;
42106: LD_ADDR_VAR 0 1
42110: PUSH
42111: LD_INT 6
42113: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42114: LD_VAR 0 6
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: IN
42133: NOT
42134: IFTRUE 42202
42136: PUSH
42137: LD_VAR 0 1
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 3
42153: PUSH
42154: LD_INT 6
42156: PUSH
42157: LD_INT 36
42159: PUSH
42160: LD_INT 4
42162: PUSH
42163: LD_INT 5
42165: PUSH
42166: LD_INT 31
42168: PUSH
42169: LD_INT 32
42171: PUSH
42172: LD_INT 33
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: IN
42188: NOT
42189: IFFALSE 42201
42191: PUSH
42192: LD_VAR 0 6
42196: PUSH
42197: LD_INT 1
42199: EQUAL
42200: AND
42201: OR
42202: IFTRUE 42234
42204: PUSH
42205: LD_VAR 0 1
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: LD_INT 3
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: IN
42220: NOT
42221: IFFALSE 42233
42223: PUSH
42224: LD_VAR 0 6
42228: PUSH
42229: LD_INT 2
42231: EQUAL
42232: AND
42233: OR
42234: IFFALSE 42244
// mode = 0 ;
42236: LD_ADDR_VAR 0 6
42240: PUSH
42241: LD_INT 0
42243: ST_TO_ADDR
// case mode of 0 :
42244: LD_VAR 0 6
42248: PUSH
42249: LD_INT 0
42251: DOUBLE
42252: EQUAL
42253: IFTRUE 42257
42255: GO 53710
42257: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42258: LD_ADDR_VAR 0 11
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 1
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 1
42316: NEG
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 1
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 2
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 2
42354: NEG
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 0
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 1
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: LD_INT 3
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 1
42424: NEG
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42451: LD_ADDR_VAR 0 12
42455: PUSH
42456: LD_INT 0
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: LD_INT 0
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: LD_INT 1
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 0
42499: PUSH
42500: LD_INT 1
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 1
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 2
42574: NEG
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: NEG
42586: PUSH
42587: LD_INT 1
42589: NEG
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: NEG
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 3
42608: NEG
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 3
42619: NEG
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42647: LD_ADDR_VAR 0 13
42651: PUSH
42652: LD_INT 0
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 1
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: LD_INT 1
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 1
42720: NEG
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: LD_INT 2
42732: NEG
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 2
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 1
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 1
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 2
42782: NEG
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 2
42794: NEG
42795: PUSH
42796: LD_INT 3
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 3
42806: NEG
42807: PUSH
42808: LD_INT 2
42810: NEG
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 3
42818: NEG
42819: PUSH
42820: LD_INT 3
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42846: LD_ADDR_VAR 0 14
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 0
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 3
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: LD_INT 3
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43042: LD_ADDR_VAR 0 15
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 0
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 0
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: LD_INT 1
43126: NEG
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 2
43144: PUSH
43145: LD_INT 1
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: PUSH
43163: LD_INT 2
43165: NEG
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 2
43176: NEG
43177: PUSH
43178: LD_INT 1
43180: NEG
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 3
43199: PUSH
43200: LD_INT 0
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 3
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43235: LD_ADDR_VAR 0 16
43239: PUSH
43240: LD_INT 0
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 0
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: LD_INT 1
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: LD_INT 1
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 0
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: LD_INT 2
43320: NEG
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: PUSH
43329: LD_INT 1
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 2
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: LD_INT 2
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 1
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 2
43370: NEG
43371: PUSH
43372: LD_INT 2
43374: NEG
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 3
43382: PUSH
43383: LD_INT 2
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 3
43392: PUSH
43393: LD_INT 3
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 3
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43428: LD_ADDR_VAR 0 17
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: LD_INT 0
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: NEG
43487: PUSH
43488: LD_INT 0
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: NEG
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: LD_INT 0
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 2
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 2
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 0
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: NEG
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: LD_INT 1
43619: NEG
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 2
43627: NEG
43628: PUSH
43629: LD_INT 2
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43658: LD_ADDR_VAR 0 18
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 0
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 1
43686: PUSH
43687: LD_INT 0
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 0
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: LD_INT 0
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 2
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 2
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43888: LD_ADDR_VAR 0 19
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 2
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 2
44023: PUSH
44024: LD_INT 2
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: NEG
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 2
44075: NEG
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 2
44091: NEG
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44118: LD_ADDR_VAR 0 20
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 1
44199: NEG
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 2
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: NEG
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 2
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44348: LD_ADDR_VAR 0 21
44352: PUSH
44353: LD_INT 0
44355: PUSH
44356: LD_INT 0
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: LD_INT 1
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 0
44396: PUSH
44397: LD_INT 1
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 2
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 0
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: PUSH
44484: LD_INT 2
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 2
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 0
44503: PUSH
44504: LD_INT 2
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: NEG
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: NEG
44548: PUSH
44549: LD_INT 2
44551: NEG
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44578: LD_ADDR_VAR 0 22
44582: PUSH
44583: LD_INT 0
44585: PUSH
44586: LD_INT 0
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: LD_INT 1
44598: NEG
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: PUSH
44617: LD_INT 1
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 2
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 2
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 0
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 0
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: NEG
44778: PUSH
44779: LD_INT 2
44781: NEG
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44808: LD_ADDR_VAR 0 23
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 0
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 1
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: NEG
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 2
44904: NEG
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 2
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: LD_INT 2
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: NEG
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 2
44984: NEG
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 2
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 3
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45088: LD_ADDR_VAR 0 24
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 0
45105: PUSH
45106: LD_INT 1
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 1
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: NEG
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 1
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 2
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 0
45243: PUSH
45244: LD_INT 2
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: NEG
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 3
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: LD_INT 2
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45364: LD_ADDR_VAR 0 25
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 2
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 1
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 2
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 2
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 0
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: NEG
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 2
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 3
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 3
45585: PUSH
45586: LD_INT 2
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 3
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: LD_INT 3
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45638: LD_ADDR_VAR 0 26
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: LD_INT 0
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: NEG
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: NEG
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: LIST
45902: LIST
45903: LIST
45904: LIST
45905: LIST
45906: LIST
45907: LIST
45908: LIST
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45914: LD_ADDR_VAR 0 27
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 0
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 1
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 2
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 1
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 2
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 2
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: LD_INT 2
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: NEG
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 1
46125: NEG
46126: PUSH
46127: LD_INT 2
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: NEG
46137: PUSH
46138: LD_INT 1
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 3
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46194: LD_ADDR_VAR 0 28
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: NEG
46276: PUSH
46277: LD_INT 2
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 2
46290: NEG
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: LD_INT 1
46301: NEG
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 1
46359: NEG
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 2
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 3
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 3
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 3
46429: NEG
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: NEG
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46476: LD_ADDR_VAR 0 29
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 1
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: LD_INT 1
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 1
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: LD_INT 1
46557: NEG
46558: PUSH
46559: LD_INT 2
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 2
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 2
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 2
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 0
46621: PUSH
46622: LD_INT 2
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 3
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 1
46709: NEG
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 3
46720: NEG
46721: PUSH
46722: LD_INT 2
46724: NEG
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46755: LD_ADDR_VAR 0 30
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 0
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 1
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 1
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: LD_INT 2
46840: NEG
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 2
46851: NEG
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 2
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 2
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 2
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 1
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 2
46921: NEG
46922: PUSH
46923: LD_INT 0
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 2
46932: NEG
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: NEG
46945: PUSH
46946: LD_INT 3
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: LD_INT 2
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 1
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47033: LD_ADDR_VAR 0 31
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 0
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: PUSH
47246: LD_INT 1
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: LD_INT 2
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: NEG
47277: PUSH
47278: LD_INT 2
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47311: LD_ADDR_VAR 0 32
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: LD_INT 1
47331: NEG
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: PUSH
47337: LD_INT 1
47339: PUSH
47340: LD_INT 0
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: LD_INT 1
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 1
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: LD_INT 2
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 2
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 2
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: PUSH
47524: LD_INT 2
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 3
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: NEG
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47589: LD_ADDR_VAR 0 33
47593: PUSH
47594: LD_INT 0
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 0
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 0
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: LD_INT 2
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 2
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 2
47779: NEG
47780: PUSH
47781: LD_INT 3
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: EMPTY
47797: LIST
47798: LIST
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: LD_INT 1
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 3
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 3
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47868: LD_ADDR_VAR 0 34
47872: PUSH
47873: LD_INT 0
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 0
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 0
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 2
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: PUSH
47984: LD_INT 1
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 2
47993: PUSH
47994: LD_INT 2
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 2
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 2
48024: NEG
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: LD_INT 2
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 3
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 2
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 3
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: LD_INT 1
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 3
48113: NEG
48114: PUSH
48115: LD_INT 1
48117: NEG
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48148: LD_ADDR_VAR 0 35
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 0
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: LD_INT 0
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: LD_INT 1
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48260: LD_ADDR_VAR 0 36
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 1
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48372: LD_ADDR_VAR 0 37
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 0
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 1
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 0
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48484: LD_ADDR_VAR 0 38
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 0
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 0
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48596: LD_ADDR_VAR 0 39
48600: PUSH
48601: LD_INT 0
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 1
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 0
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 2
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48708: LD_ADDR_VAR 0 40
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: NEG
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48820: LD_ADDR_VAR 0 41
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 2
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 2
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: PUSH
48945: LD_INT 2
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: NEG
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 2
48998: NEG
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 2
49010: NEG
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 3
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 3
49043: PUSH
49044: LD_INT 1
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 3
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 3
49063: PUSH
49064: LD_INT 3
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 3
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 3
49105: NEG
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: LD_INT 2
49121: NEG
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 3
49129: NEG
49130: PUSH
49131: LD_INT 3
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49170: LD_ADDR_VAR 0 42
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 0
49218: PUSH
49219: LD_INT 1
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: LD_INT 0
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: LD_INT 2
49255: NEG
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 2
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: NEG
49373: PUSH
49374: LD_INT 3
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 3
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: LD_INT 2
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 3
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 3
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 3
49467: NEG
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: NEG
49480: PUSH
49481: LD_INT 3
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: LIST
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: LIST
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49520: LD_ADDR_VAR 0 43
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: LD_INT 3
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: LD_INT 3
49724: NEG
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 3
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 3
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 3
49816: NEG
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49868: LD_ADDR_VAR 0 44
49872: PUSH
49873: LD_INT 0
49875: PUSH
49876: LD_INT 0
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: LD_INT 1
49888: NEG
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 1
49896: PUSH
49897: LD_INT 0
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 1
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 2
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: LD_INT 1
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 2
50023: NEG
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 2
50034: NEG
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 2
50046: NEG
50047: PUSH
50048: LD_INT 2
50050: NEG
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 3
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 3
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 3
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 3
50111: PUSH
50112: LD_INT 3
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: LD_INT 3
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 3
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: LD_INT 3
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50218: LD_ADDR_VAR 0 45
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 1
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 1
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 1
50276: NEG
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: LD_INT 1
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: NEG
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 3
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 0
50432: PUSH
50433: LD_INT 3
50435: NEG
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: LD_INT 3
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: LD_INT 3
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 3
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 3
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 3
50515: NEG
50516: PUSH
50517: LD_INT 2
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 3
50527: NEG
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50568: LD_ADDR_VAR 0 46
50572: PUSH
50573: LD_INT 0
50575: PUSH
50576: LD_INT 0
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 1
50606: PUSH
50607: LD_INT 1
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: LD_INT 1
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 1
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: LD_INT 2
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 0
50661: PUSH
50662: LD_INT 2
50664: NEG
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 2
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 2
50734: NEG
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: NEG
50746: PUSH
50747: LD_INT 1
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: LD_INT 3
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 3
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 3
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 3
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 2
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: NEG
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50916: LD_ADDR_VAR 0 47
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 0
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: LD_INT 1
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: NEG
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 1
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51067: LD_ADDR_VAR 0 48
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51214: LD_ADDR_VAR 0 49
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 0
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 1
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 2
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 2
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: LD_INT 2
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51358: LD_ADDR_VAR 0 50
51362: PUSH
51363: LD_INT 0
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 0
51406: PUSH
51407: LD_INT 1
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: LD_INT 0
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: NEG
51428: PUSH
51429: LD_INT 1
51431: NEG
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: LD_INT 2
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 2
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51502: LD_ADDR_VAR 0 51
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: NEG
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 0
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51649: LD_ADDR_VAR 0 52
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 0
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: NEG
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: NEG
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: NEG
51754: PUSH
51755: LD_INT 0
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: LD_INT 1
51768: NEG
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: LD_INT 2
51780: NEG
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51800: LD_ADDR_VAR 0 53
51804: PUSH
51805: LD_INT 0
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 1
51869: NEG
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: NEG
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 2
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 1
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: LD_INT 0
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 2
51987: NEG
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 2
51999: NEG
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52030: LD_ADDR_VAR 0 54
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 0
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 0
52078: PUSH
52079: LD_INT 1
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 1
52088: NEG
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 2
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 2
52165: PUSH
52166: LD_INT 2
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 2
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 1
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 2
52229: NEG
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52260: LD_ADDR_VAR 0 55
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 2
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: LD_INT 2
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52490: LD_ADDR_VAR 0 56
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: LD_INT 1
52510: NEG
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: LD_INT 0
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 1
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 2
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 1
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: NEG
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 2
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52720: LD_ADDR_VAR 0 57
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 1
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 2
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 1
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 2
52896: NEG
52897: PUSH
52898: LD_INT 0
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52950: LD_ADDR_VAR 0 58
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: NEG
53032: PUSH
53033: LD_INT 2
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: LD_INT 0
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 1
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: NEG
53138: PUSH
53139: LD_INT 1
53141: NEG
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53180: LD_ADDR_VAR 0 59
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 1
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53268: LD_ADDR_VAR 0 60
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 0
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 1
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 0
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 1
53326: NEG
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 1
53337: NEG
53338: PUSH
53339: LD_INT 1
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53356: LD_ADDR_VAR 0 61
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53444: LD_ADDR_VAR 0 62
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 0
53461: PUSH
53462: LD_INT 1
53464: NEG
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 0
53492: PUSH
53493: LD_INT 1
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: NEG
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53532: LD_ADDR_VAR 0 63
53536: PUSH
53537: LD_INT 0
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 1
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53620: LD_ADDR_VAR 0 64
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 1
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: LD_INT 1
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: LD_INT 1
53693: NEG
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: ST_TO_ADDR
// end ; 1 :
53708: GO 59605
53710: LD_INT 1
53712: DOUBLE
53713: EQUAL
53714: IFTRUE 53718
53716: GO 56341
53718: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53719: LD_ADDR_VAR 0 11
53723: PUSH
53724: LD_INT 1
53726: NEG
53727: PUSH
53728: LD_INT 3
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 0
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53763: LD_ADDR_VAR 0 12
53767: PUSH
53768: LD_INT 2
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: LIST
53803: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53804: LD_ADDR_VAR 0 13
53808: PUSH
53809: LD_INT 3
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: LD_INT 3
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 2
53831: PUSH
53832: LD_INT 3
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: LIST
53843: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53844: LD_ADDR_VAR 0 14
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 0
53861: PUSH
53862: LD_INT 3
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53885: LD_ADDR_VAR 0 15
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 3
53903: NEG
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 3
53914: NEG
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: LIST
53928: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53929: LD_ADDR_VAR 0 16
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 3
53948: NEG
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 3
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53975: LD_ADDR_VAR 0 17
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 3
53986: NEG
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 2
54008: NEG
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: LIST
54018: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54019: LD_ADDR_VAR 0 18
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 3
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 3
54047: PUSH
54048: LD_INT 1
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: LIST
54059: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54060: LD_ADDR_VAR 0 19
54064: PUSH
54065: LD_INT 3
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 3
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: LD_INT 3
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: LIST
54099: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54100: LD_ADDR_VAR 0 20
54104: PUSH
54105: LD_INT 1
54107: PUSH
54108: LD_INT 3
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54141: LD_ADDR_VAR 0 21
54145: PUSH
54146: LD_INT 2
54148: NEG
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 3
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: LIST
54184: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54185: LD_ADDR_VAR 0 22
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: LD_INT 3
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 2
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54231: LD_ADDR_VAR 0 23
54235: PUSH
54236: LD_INT 0
54238: PUSH
54239: LD_INT 3
54241: NEG
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 4
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54275: LD_ADDR_VAR 0 24
54279: PUSH
54280: LD_INT 3
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 4
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54316: LD_ADDR_VAR 0 25
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: LD_INT 3
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 4
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: LD_INT 4
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54356: LD_ADDR_VAR 0 26
54360: PUSH
54361: LD_INT 0
54363: PUSH
54364: LD_INT 3
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 1
54373: PUSH
54374: LD_INT 4
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: LIST
54396: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54397: LD_ADDR_VAR 0 27
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: LD_INT 0
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 4
54426: NEG
54427: PUSH
54428: LD_INT 1
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: LIST
54440: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54441: LD_ADDR_VAR 0 28
54445: PUSH
54446: LD_INT 3
54448: NEG
54449: PUSH
54450: LD_INT 3
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 3
54460: NEG
54461: PUSH
54462: LD_INT 4
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 4
54472: NEG
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54487: LD_ADDR_VAR 0 29
54491: PUSH
54492: LD_INT 1
54494: NEG
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 4
54532: NEG
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 4
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 3
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 5
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 5
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 4
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: LD_INT 6
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 6
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: PUSH
54620: LD_INT 5
54622: NEG
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54642: LD_ADDR_VAR 0 30
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: EMPTY
54655: LIST
54656: LIST
54657: PUSH
54658: LD_INT 3
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 3
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: EMPTY
54675: LIST
54676: LIST
54677: PUSH
54678: LD_INT 3
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 4
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 4
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 4
54711: PUSH
54712: LD_INT 1
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 5
54722: PUSH
54723: LD_INT 0
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 5
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 5
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 6
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 6
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54785: LD_ADDR_VAR 0 31
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 2
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 4
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 4
54832: PUSH
54833: LD_INT 4
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: LD_INT 4
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 5
54852: PUSH
54853: LD_INT 4
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 5
54862: PUSH
54863: LD_INT 5
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 4
54872: PUSH
54873: LD_INT 5
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 6
54882: PUSH
54883: LD_INT 5
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 6
54892: PUSH
54893: LD_INT 6
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 5
54902: PUSH
54903: LD_INT 6
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54924: LD_ADDR_VAR 0 32
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: LD_INT 4
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 4
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: PUSH
54994: LD_INT 5
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: LD_INT 5
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: LD_INT 4
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: LD_INT 6
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 0
55034: PUSH
55035: LD_INT 6
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: LD_INT 5
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55067: LD_ADDR_VAR 0 33
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 3
55096: NEG
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: LD_INT 1
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: NEG
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 4
55130: NEG
55131: PUSH
55132: LD_INT 1
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 4
55142: NEG
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 5
55153: NEG
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 5
55164: NEG
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 5
55176: NEG
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 6
55187: NEG
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 6
55198: NEG
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55222: LD_ADDR_VAR 0 34
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 3
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 3
55253: NEG
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: LD_INT 4
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 4
55277: NEG
55278: PUSH
55279: LD_INT 3
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 4
55289: NEG
55290: PUSH
55291: LD_INT 4
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 4
55301: NEG
55302: PUSH
55303: LD_INT 5
55305: NEG
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 5
55313: NEG
55314: PUSH
55315: LD_INT 4
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 5
55325: NEG
55326: PUSH
55327: LD_INT 5
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 5
55337: NEG
55338: PUSH
55339: LD_INT 6
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 6
55349: NEG
55350: PUSH
55351: LD_INT 5
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 6
55361: NEG
55362: PUSH
55363: LD_INT 6
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55385: LD_ADDR_VAR 0 41
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: LD_INT 2
55395: NEG
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: LD_INT 3
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 1
55415: PUSH
55416: LD_INT 2
55418: NEG
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: LIST
55428: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55429: LD_ADDR_VAR 0 42
55433: PUSH
55434: LD_INT 2
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: LIST
55469: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55470: LD_ADDR_VAR 0 43
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55510: LD_ADDR_VAR 0 44
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 1
55537: NEG
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: LIST
55550: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55551: LD_ADDR_VAR 0 45
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 0
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 2
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55595: LD_ADDR_VAR 0 46
55599: PUSH
55600: LD_INT 2
55602: NEG
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 2
55614: NEG
55615: PUSH
55616: LD_INT 3
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: NEG
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: LIST
55640: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55641: LD_ADDR_VAR 0 47
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: LD_INT 3
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: NEG
55661: PUSH
55662: LD_INT 3
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55674: LD_ADDR_VAR 0 48
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55705: LD_ADDR_VAR 0 49
55709: PUSH
55710: LD_INT 3
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 2
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55734: LD_ADDR_VAR 0 50
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 3
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55763: LD_ADDR_VAR 0 51
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55794: LD_ADDR_VAR 0 52
55798: PUSH
55799: LD_INT 3
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 3
55813: NEG
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55827: LD_ADDR_VAR 0 53
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 3
55849: NEG
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 2
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: LIST
55870: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55871: LD_ADDR_VAR 0 54
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: LD_INT 1
55881: NEG
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: LIST
55911: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55912: LD_ADDR_VAR 0 55
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 2
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 2
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55952: LD_ADDR_VAR 0 56
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 3
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 3
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55993: LD_ADDR_VAR 0 57
55997: PUSH
55998: LD_INT 2
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: NEG
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 3
56022: NEG
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: LIST
56036: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56037: LD_ADDR_VAR 0 58
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: LD_INT 3
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 3
56056: NEG
56057: PUSH
56058: LD_INT 2
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: NEG
56069: PUSH
56070: LD_INT 3
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56083: LD_ADDR_VAR 0 59
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56127: LD_ADDR_VAR 0 60
56131: PUSH
56132: LD_INT 1
56134: PUSH
56135: LD_INT 1
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: LD_INT 1
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: LIST
56167: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56168: LD_ADDR_VAR 0 61
56172: PUSH
56173: LD_INT 2
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56208: LD_ADDR_VAR 0 62
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 2
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: LIST
56248: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56249: LD_ADDR_VAR 0 63
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: NEG
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 2
56278: NEG
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: LIST
56292: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56293: LD_ADDR_VAR 0 64
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PUSH
56310: LD_INT 2
56312: NEG
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: LD_INT 2
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: ST_TO_ADDR
// end ; 2 :
56339: GO 59605
56341: LD_INT 2
56343: DOUBLE
56344: EQUAL
56345: IFTRUE 56349
56347: GO 59604
56349: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56350: LD_ADDR_VAR 0 29
56354: PUSH
56355: LD_INT 4
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 4
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 5
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 5
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 4
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 3
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 5
56440: PUSH
56441: LD_INT 2
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: LD_INT 3
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 4
56470: PUSH
56471: LD_INT 3
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 4
56480: PUSH
56481: LD_INT 4
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 3
56490: PUSH
56491: LD_INT 4
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 3
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 4
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 4
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 4
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 3
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 4
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: LD_INT 5
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 5
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: LD_INT 4
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: LD_INT 3
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 5
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 3
56633: NEG
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 3
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 0
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 2
56667: NEG
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 3
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 4
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 4
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 4
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: EMPTY
56730: LIST
56731: LIST
56732: PUSH
56733: LD_INT 4
56735: NEG
56736: PUSH
56737: LD_INT 4
56739: NEG
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 4
56747: NEG
56748: PUSH
56749: LD_INT 5
56751: NEG
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: NEG
56760: PUSH
56761: LD_INT 4
56763: NEG
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 3
56771: NEG
56772: PUSH
56773: LD_INT 3
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 4
56783: NEG
56784: PUSH
56785: LD_INT 3
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 5
56795: NEG
56796: PUSH
56797: LD_INT 4
56799: NEG
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 5
56807: NEG
56808: PUSH
56809: LD_INT 5
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 3
56819: NEG
56820: PUSH
56821: LD_INT 5
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 5
56831: NEG
56832: PUSH
56833: LD_INT 3
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56888: LD_ADDR_VAR 0 30
56892: PUSH
56893: LD_INT 4
56895: PUSH
56896: LD_INT 4
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 4
56905: PUSH
56906: LD_INT 3
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 5
56915: PUSH
56916: LD_INT 4
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 5
56925: PUSH
56926: LD_INT 5
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 4
56935: PUSH
56936: LD_INT 5
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 4
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: LD_INT 3
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 5
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: PUSH
56976: LD_INT 5
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: PUSH
57016: LD_INT 4
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: LD_INT 0
57025: PUSH
57026: LD_INT 4
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: NEG
57036: PUSH
57037: LD_INT 3
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 4
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 2
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 4
57078: NEG
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 4
57089: NEG
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 3
57101: NEG
57102: PUSH
57103: LD_INT 0
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 3
57112: NEG
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 4
57123: NEG
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 5
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 5
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 5
57157: NEG
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 3
57180: NEG
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: NEG
57193: PUSH
57194: LD_INT 4
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: NEG
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 4
57240: NEG
57241: PUSH
57242: LD_INT 3
57244: NEG
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 4
57252: NEG
57253: PUSH
57254: LD_INT 4
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 4
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: LD_INT 4
57276: NEG
57277: PUSH
57278: LD_INT 2
57280: NEG
57281: PUSH
57282: EMPTY
57283: LIST
57284: LIST
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: LD_INT 4
57291: NEG
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 5
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 4
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 3
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 3
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: NEG
57344: PUSH
57345: LD_INT 4
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 5
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 5
57382: NEG
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57435: LD_ADDR_VAR 0 31
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: LD_INT 4
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 5
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 5
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 4
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: PUSH
57515: LD_INT 5
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: LD_INT 3
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 3
57535: NEG
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 3
57546: NEG
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: NEG
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 4
57591: NEG
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 4
57602: NEG
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 4
57614: NEG
57615: PUSH
57616: LD_INT 2
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: LD_INT 2
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 4
57637: NEG
57638: PUSH
57639: LD_INT 4
57641: NEG
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 4
57649: NEG
57650: PUSH
57651: LD_INT 5
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 3
57661: NEG
57662: PUSH
57663: LD_INT 4
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 3
57673: NEG
57674: PUSH
57675: LD_INT 3
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 4
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 5
57697: NEG
57698: PUSH
57699: LD_INT 4
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 5
57709: NEG
57710: PUSH
57711: LD_INT 5
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 3
57721: NEG
57722: PUSH
57723: LD_INT 5
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 5
57733: NEG
57734: PUSH
57735: LD_INT 3
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 3
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 4
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 3
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 4
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 2
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: NEG
57836: PUSH
57837: LD_INT 4
57839: NEG
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 4
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 5
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 5
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 4
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 3
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 5
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57985: LD_ADDR_VAR 0 32
57989: PUSH
57990: LD_INT 4
57992: NEG
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 4
58003: NEG
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 3
58015: NEG
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 3
58026: NEG
58027: PUSH
58028: LD_INT 1
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 4
58037: NEG
58038: PUSH
58039: LD_INT 1
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 5
58048: NEG
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 5
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 5
58071: NEG
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 3
58094: NEG
58095: PUSH
58096: LD_INT 3
58098: NEG
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: LD_INT 4
58110: NEG
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 2
58118: NEG
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: LD_INT 2
58146: NEG
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 4
58154: NEG
58155: PUSH
58156: LD_INT 3
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 4
58166: NEG
58167: PUSH
58168: LD_INT 4
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 2
58178: NEG
58179: PUSH
58180: LD_INT 4
58182: NEG
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 4
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 0
58202: PUSH
58203: LD_INT 4
58205: NEG
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 5
58216: NEG
58217: PUSH
58218: EMPTY
58219: LIST
58220: LIST
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: LD_INT 4
58227: NEG
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 1
58235: PUSH
58236: LD_INT 3
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 0
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: LD_INT 4
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: LD_INT 5
58273: NEG
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: LD_INT 3
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 2
58292: NEG
58293: PUSH
58294: LD_INT 5
58296: NEG
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 3
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 3
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 4
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 4
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 3
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 2
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: LD_INT 1
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 4
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 4
58397: PUSH
58398: LD_INT 4
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 4
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 5
58417: PUSH
58418: LD_INT 4
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 5
58427: PUSH
58428: LD_INT 5
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 4
58437: PUSH
58438: LD_INT 5
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: PUSH
58448: LD_INT 4
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 3
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 5
58467: PUSH
58468: LD_INT 3
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 3
58477: PUSH
58478: LD_INT 5
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58532: LD_ADDR_VAR 0 33
58536: PUSH
58537: LD_INT 4
58539: NEG
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 4
58551: NEG
58552: PUSH
58553: LD_INT 5
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: LD_INT 4
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 4
58587: NEG
58588: PUSH
58589: LD_INT 3
58591: NEG
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 5
58599: NEG
58600: PUSH
58601: LD_INT 4
58603: NEG
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 5
58611: NEG
58612: PUSH
58613: LD_INT 5
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: NEG
58624: PUSH
58625: LD_INT 5
58627: NEG
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: PUSH
58633: LD_INT 5
58635: NEG
58636: PUSH
58637: LD_INT 3
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 3
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 4
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 3
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: LD_INT 2
58683: NEG
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 2
58694: NEG
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: LD_INT 3
58706: NEG
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: LD_INT 4
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 4
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 4
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 4
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 5
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 5
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 4
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 3
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 1
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 5
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 3
58842: PUSH
58843: LD_INT 3
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: PUSH
58863: LD_INT 3
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: LD_INT 4
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 3
58882: PUSH
58883: LD_INT 4
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: PUSH
58893: LD_INT 3
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 2
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 4
58912: PUSH
58913: LD_INT 2
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: LD_INT 4
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: LD_INT 4
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: LD_INT 3
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: PUSH
58953: LD_INT 4
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 5
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 5
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 4
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: NEG
58994: PUSH
58995: LD_INT 3
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 5
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: LD_INT 3
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59070: LD_ADDR_VAR 0 34
59074: PUSH
59075: LD_INT 0
59077: PUSH
59078: LD_INT 4
59080: NEG
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 0
59088: PUSH
59089: LD_INT 5
59091: NEG
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 4
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 3
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: LD_INT 3
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 1
59132: NEG
59133: PUSH
59134: LD_INT 4
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 1
59144: NEG
59145: PUSH
59146: LD_INT 5
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 3
59159: NEG
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 2
59167: NEG
59168: PUSH
59169: LD_INT 5
59171: NEG
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 3
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 3
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 2
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 4
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: LD_INT 4
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 5
59292: PUSH
59293: LD_INT 4
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 5
59302: PUSH
59303: LD_INT 5
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: LD_INT 5
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: LD_INT 4
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 5
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 3
59352: PUSH
59353: LD_INT 5
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 0
59372: PUSH
59373: LD_INT 2
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: LD_INT 3
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 1
59392: PUSH
59393: LD_INT 4
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 4
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: NEG
59413: PUSH
59414: LD_INT 3
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 2
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 2
59434: PUSH
59435: LD_INT 4
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 2
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 4
59455: NEG
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 4
59466: NEG
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 3
59478: NEG
59479: PUSH
59480: LD_INT 0
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 3
59489: NEG
59490: PUSH
59491: LD_INT 1
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: PUSH
59498: LD_INT 4
59500: NEG
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 5
59511: NEG
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: LD_INT 5
59522: NEG
59523: PUSH
59524: LD_INT 1
59526: NEG
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 5
59534: NEG
59535: PUSH
59536: LD_INT 2
59538: NEG
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 3
59546: NEG
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: ST_TO_ADDR
// end ; end ;
59602: GO 59605
59604: POP
// case btype of b_depot , b_warehouse :
59605: LD_VAR 0 1
59609: PUSH
59610: LD_INT 0
59612: DOUBLE
59613: EQUAL
59614: IFTRUE 59624
59616: LD_INT 1
59618: DOUBLE
59619: EQUAL
59620: IFTRUE 59624
59622: GO 59825
59624: POP
// case nation of nation_american :
59625: LD_VAR 0 5
59629: PUSH
59630: LD_INT 1
59632: DOUBLE
59633: EQUAL
59634: IFTRUE 59638
59636: GO 59694
59638: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59639: LD_ADDR_VAR 0 9
59643: PUSH
59644: LD_VAR 0 11
59648: PUSH
59649: LD_VAR 0 12
59653: PUSH
59654: LD_VAR 0 13
59658: PUSH
59659: LD_VAR 0 14
59663: PUSH
59664: LD_VAR 0 15
59668: PUSH
59669: LD_VAR 0 16
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: PUSH
59682: LD_VAR 0 4
59686: PUSH
59687: LD_INT 1
59689: PLUS
59690: ARRAY
59691: ST_TO_ADDR
59692: GO 59823
59694: LD_INT 2
59696: DOUBLE
59697: EQUAL
59698: IFTRUE 59702
59700: GO 59758
59702: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59703: LD_ADDR_VAR 0 9
59707: PUSH
59708: LD_VAR 0 17
59712: PUSH
59713: LD_VAR 0 18
59717: PUSH
59718: LD_VAR 0 19
59722: PUSH
59723: LD_VAR 0 20
59727: PUSH
59728: LD_VAR 0 21
59732: PUSH
59733: LD_VAR 0 22
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: PUSH
59746: LD_VAR 0 4
59750: PUSH
59751: LD_INT 1
59753: PLUS
59754: ARRAY
59755: ST_TO_ADDR
59756: GO 59823
59758: LD_INT 3
59760: DOUBLE
59761: EQUAL
59762: IFTRUE 59766
59764: GO 59822
59766: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59767: LD_ADDR_VAR 0 9
59771: PUSH
59772: LD_VAR 0 23
59776: PUSH
59777: LD_VAR 0 24
59781: PUSH
59782: LD_VAR 0 25
59786: PUSH
59787: LD_VAR 0 26
59791: PUSH
59792: LD_VAR 0 27
59796: PUSH
59797: LD_VAR 0 28
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: PUSH
59810: LD_VAR 0 4
59814: PUSH
59815: LD_INT 1
59817: PLUS
59818: ARRAY
59819: ST_TO_ADDR
59820: GO 59823
59822: POP
59823: GO 60378
59825: LD_INT 2
59827: DOUBLE
59828: EQUAL
59829: IFTRUE 59839
59831: LD_INT 3
59833: DOUBLE
59834: EQUAL
59835: IFTRUE 59839
59837: GO 59895
59839: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59840: LD_ADDR_VAR 0 9
59844: PUSH
59845: LD_VAR 0 29
59849: PUSH
59850: LD_VAR 0 30
59854: PUSH
59855: LD_VAR 0 31
59859: PUSH
59860: LD_VAR 0 32
59864: PUSH
59865: LD_VAR 0 33
59869: PUSH
59870: LD_VAR 0 34
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: LD_VAR 0 4
59887: PUSH
59888: LD_INT 1
59890: PLUS
59891: ARRAY
59892: ST_TO_ADDR
59893: GO 60378
59895: LD_INT 16
59897: DOUBLE
59898: EQUAL
59899: IFTRUE 59957
59901: LD_INT 17
59903: DOUBLE
59904: EQUAL
59905: IFTRUE 59957
59907: LD_INT 18
59909: DOUBLE
59910: EQUAL
59911: IFTRUE 59957
59913: LD_INT 19
59915: DOUBLE
59916: EQUAL
59917: IFTRUE 59957
59919: LD_INT 22
59921: DOUBLE
59922: EQUAL
59923: IFTRUE 59957
59925: LD_INT 20
59927: DOUBLE
59928: EQUAL
59929: IFTRUE 59957
59931: LD_INT 21
59933: DOUBLE
59934: EQUAL
59935: IFTRUE 59957
59937: LD_INT 23
59939: DOUBLE
59940: EQUAL
59941: IFTRUE 59957
59943: LD_INT 24
59945: DOUBLE
59946: EQUAL
59947: IFTRUE 59957
59949: LD_INT 25
59951: DOUBLE
59952: EQUAL
59953: IFTRUE 59957
59955: GO 60013
59957: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59958: LD_ADDR_VAR 0 9
59962: PUSH
59963: LD_VAR 0 35
59967: PUSH
59968: LD_VAR 0 36
59972: PUSH
59973: LD_VAR 0 37
59977: PUSH
59978: LD_VAR 0 38
59982: PUSH
59983: LD_VAR 0 39
59987: PUSH
59988: LD_VAR 0 40
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: PUSH
60001: LD_VAR 0 4
60005: PUSH
60006: LD_INT 1
60008: PLUS
60009: ARRAY
60010: ST_TO_ADDR
60011: GO 60378
60013: LD_INT 6
60015: DOUBLE
60016: EQUAL
60017: IFTRUE 60069
60019: LD_INT 7
60021: DOUBLE
60022: EQUAL
60023: IFTRUE 60069
60025: LD_INT 8
60027: DOUBLE
60028: EQUAL
60029: IFTRUE 60069
60031: LD_INT 13
60033: DOUBLE
60034: EQUAL
60035: IFTRUE 60069
60037: LD_INT 12
60039: DOUBLE
60040: EQUAL
60041: IFTRUE 60069
60043: LD_INT 15
60045: DOUBLE
60046: EQUAL
60047: IFTRUE 60069
60049: LD_INT 11
60051: DOUBLE
60052: EQUAL
60053: IFTRUE 60069
60055: LD_INT 14
60057: DOUBLE
60058: EQUAL
60059: IFTRUE 60069
60061: LD_INT 10
60063: DOUBLE
60064: EQUAL
60065: IFTRUE 60069
60067: GO 60125
60069: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60070: LD_ADDR_VAR 0 9
60074: PUSH
60075: LD_VAR 0 41
60079: PUSH
60080: LD_VAR 0 42
60084: PUSH
60085: LD_VAR 0 43
60089: PUSH
60090: LD_VAR 0 44
60094: PUSH
60095: LD_VAR 0 45
60099: PUSH
60100: LD_VAR 0 46
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: PUSH
60113: LD_VAR 0 4
60117: PUSH
60118: LD_INT 1
60120: PLUS
60121: ARRAY
60122: ST_TO_ADDR
60123: GO 60378
60125: LD_INT 36
60127: DOUBLE
60128: EQUAL
60129: IFTRUE 60133
60131: GO 60189
60133: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60134: LD_ADDR_VAR 0 9
60138: PUSH
60139: LD_VAR 0 47
60143: PUSH
60144: LD_VAR 0 48
60148: PUSH
60149: LD_VAR 0 49
60153: PUSH
60154: LD_VAR 0 50
60158: PUSH
60159: LD_VAR 0 51
60163: PUSH
60164: LD_VAR 0 52
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: PUSH
60177: LD_VAR 0 4
60181: PUSH
60182: LD_INT 1
60184: PLUS
60185: ARRAY
60186: ST_TO_ADDR
60187: GO 60378
60189: LD_INT 4
60191: DOUBLE
60192: EQUAL
60193: IFTRUE 60215
60195: LD_INT 5
60197: DOUBLE
60198: EQUAL
60199: IFTRUE 60215
60201: LD_INT 34
60203: DOUBLE
60204: EQUAL
60205: IFTRUE 60215
60207: LD_INT 37
60209: DOUBLE
60210: EQUAL
60211: IFTRUE 60215
60213: GO 60271
60215: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60216: LD_ADDR_VAR 0 9
60220: PUSH
60221: LD_VAR 0 53
60225: PUSH
60226: LD_VAR 0 54
60230: PUSH
60231: LD_VAR 0 55
60235: PUSH
60236: LD_VAR 0 56
60240: PUSH
60241: LD_VAR 0 57
60245: PUSH
60246: LD_VAR 0 58
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: PUSH
60259: LD_VAR 0 4
60263: PUSH
60264: LD_INT 1
60266: PLUS
60267: ARRAY
60268: ST_TO_ADDR
60269: GO 60378
60271: LD_INT 31
60273: DOUBLE
60274: EQUAL
60275: IFTRUE 60321
60277: LD_INT 32
60279: DOUBLE
60280: EQUAL
60281: IFTRUE 60321
60283: LD_INT 33
60285: DOUBLE
60286: EQUAL
60287: IFTRUE 60321
60289: LD_INT 27
60291: DOUBLE
60292: EQUAL
60293: IFTRUE 60321
60295: LD_INT 26
60297: DOUBLE
60298: EQUAL
60299: IFTRUE 60321
60301: LD_INT 28
60303: DOUBLE
60304: EQUAL
60305: IFTRUE 60321
60307: LD_INT 29
60309: DOUBLE
60310: EQUAL
60311: IFTRUE 60321
60313: LD_INT 30
60315: DOUBLE
60316: EQUAL
60317: IFTRUE 60321
60319: GO 60377
60321: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60322: LD_ADDR_VAR 0 9
60326: PUSH
60327: LD_VAR 0 59
60331: PUSH
60332: LD_VAR 0 60
60336: PUSH
60337: LD_VAR 0 61
60341: PUSH
60342: LD_VAR 0 62
60346: PUSH
60347: LD_VAR 0 63
60351: PUSH
60352: LD_VAR 0 64
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: LIST
60361: LIST
60362: LIST
60363: LIST
60364: PUSH
60365: LD_VAR 0 4
60369: PUSH
60370: LD_INT 1
60372: PLUS
60373: ARRAY
60374: ST_TO_ADDR
60375: GO 60378
60377: POP
// temp_list2 = [ ] ;
60378: LD_ADDR_VAR 0 10
60382: PUSH
60383: EMPTY
60384: ST_TO_ADDR
// for i in temp_list do
60385: LD_ADDR_VAR 0 8
60389: PUSH
60390: LD_VAR 0 9
60394: PUSH
60395: FOR_IN
60396: IFFALSE 60448
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60398: LD_ADDR_VAR 0 10
60402: PUSH
60403: LD_VAR 0 10
60407: PUSH
60408: LD_VAR 0 8
60412: PUSH
60413: LD_INT 1
60415: ARRAY
60416: PUSH
60417: LD_VAR 0 2
60421: PLUS
60422: PUSH
60423: LD_VAR 0 8
60427: PUSH
60428: LD_INT 2
60430: ARRAY
60431: PUSH
60432: LD_VAR 0 3
60436: PLUS
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: EMPTY
60443: LIST
60444: ADD
60445: ST_TO_ADDR
60446: GO 60395
60448: POP
60449: POP
// result = temp_list2 ;
60450: LD_ADDR_VAR 0 7
60454: PUSH
60455: LD_VAR 0 10
60459: ST_TO_ADDR
// end ;
60460: LD_VAR 0 7
60464: RET
// export function EnemyInRange ( unit , dist ) ; begin
60465: LD_INT 0
60467: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60468: LD_ADDR_VAR 0 3
60472: PUSH
60473: LD_VAR 0 1
60477: PPUSH
60478: CALL_OW 255
60482: PPUSH
60483: LD_VAR 0 1
60487: PPUSH
60488: CALL_OW 250
60492: PPUSH
60493: LD_VAR 0 1
60497: PPUSH
60498: CALL_OW 251
60502: PPUSH
60503: LD_VAR 0 2
60507: PPUSH
60508: CALL 33722 0 4
60512: PUSH
60513: LD_INT 4
60515: ARRAY
60516: ST_TO_ADDR
// end ;
60517: LD_VAR 0 3
60521: RET
// export function PlayerSeeMe ( unit ) ; begin
60522: LD_INT 0
60524: PPUSH
// result := See ( your_side , unit ) ;
60525: LD_ADDR_VAR 0 2
60529: PUSH
60530: LD_OWVAR 2
60534: PPUSH
60535: LD_VAR 0 1
60539: PPUSH
60540: CALL_OW 292
60544: ST_TO_ADDR
// end ;
60545: LD_VAR 0 2
60549: RET
// export function ReverseDir ( unit ) ; begin
60550: LD_INT 0
60552: PPUSH
// if not unit then
60553: LD_VAR 0 1
60557: NOT
60558: IFFALSE 60562
// exit ;
60560: GO 60585
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60562: LD_ADDR_VAR 0 2
60566: PUSH
60567: LD_VAR 0 1
60571: PPUSH
60572: CALL_OW 254
60576: PUSH
60577: LD_INT 3
60579: PLUS
60580: PUSH
60581: LD_INT 6
60583: MOD
60584: ST_TO_ADDR
// end ;
60585: LD_VAR 0 2
60589: RET
// export function ReverseArray ( array ) ; var i ; begin
60590: LD_INT 0
60592: PPUSH
60593: PPUSH
// if not array then
60594: LD_VAR 0 1
60598: NOT
60599: IFFALSE 60603
// exit ;
60601: GO 60658
// result := [ ] ;
60603: LD_ADDR_VAR 0 2
60607: PUSH
60608: EMPTY
60609: ST_TO_ADDR
// for i := array downto 1 do
60610: LD_ADDR_VAR 0 3
60614: PUSH
60615: DOUBLE
60616: LD_VAR 0 1
60620: INC
60621: ST_TO_ADDR
60622: LD_INT 1
60624: PUSH
60625: FOR_DOWNTO
60626: IFFALSE 60656
// result := Join ( result , array [ i ] ) ;
60628: LD_ADDR_VAR 0 2
60632: PUSH
60633: LD_VAR 0 2
60637: PPUSH
60638: LD_VAR 0 1
60642: PUSH
60643: LD_VAR 0 3
60647: ARRAY
60648: PPUSH
60649: CALL 65510 0 2
60653: ST_TO_ADDR
60654: GO 60625
60656: POP
60657: POP
// end ;
60658: LD_VAR 0 2
60662: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60663: LD_INT 0
60665: PPUSH
60666: PPUSH
60667: PPUSH
60668: PPUSH
60669: PPUSH
60670: PPUSH
// if not unit or not hexes then
60671: LD_VAR 0 1
60675: NOT
60676: IFTRUE 60685
60678: PUSH
60679: LD_VAR 0 2
60683: NOT
60684: OR
60685: IFFALSE 60689
// exit ;
60687: GO 60812
// dist := 9999 ;
60689: LD_ADDR_VAR 0 5
60693: PUSH
60694: LD_INT 9999
60696: ST_TO_ADDR
// for i = 1 to hexes do
60697: LD_ADDR_VAR 0 4
60701: PUSH
60702: DOUBLE
60703: LD_INT 1
60705: DEC
60706: ST_TO_ADDR
60707: LD_VAR 0 2
60711: PUSH
60712: FOR_TO
60713: IFFALSE 60800
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60715: LD_ADDR_VAR 0 6
60719: PUSH
60720: LD_VAR 0 1
60724: PPUSH
60725: LD_VAR 0 2
60729: PUSH
60730: LD_VAR 0 4
60734: ARRAY
60735: PUSH
60736: LD_INT 1
60738: ARRAY
60739: PPUSH
60740: LD_VAR 0 2
60744: PUSH
60745: LD_VAR 0 4
60749: ARRAY
60750: PUSH
60751: LD_INT 2
60753: ARRAY
60754: PPUSH
60755: CALL_OW 297
60759: ST_TO_ADDR
// if tdist < dist then
60760: LD_VAR 0 6
60764: PUSH
60765: LD_VAR 0 5
60769: LESS
60770: IFFALSE 60798
// begin hex := hexes [ i ] ;
60772: LD_ADDR_VAR 0 8
60776: PUSH
60777: LD_VAR 0 2
60781: PUSH
60782: LD_VAR 0 4
60786: ARRAY
60787: ST_TO_ADDR
// dist := tdist ;
60788: LD_ADDR_VAR 0 5
60792: PUSH
60793: LD_VAR 0 6
60797: ST_TO_ADDR
// end ; end ;
60798: GO 60712
60800: POP
60801: POP
// result := hex ;
60802: LD_ADDR_VAR 0 3
60806: PUSH
60807: LD_VAR 0 8
60811: ST_TO_ADDR
// end ;
60812: LD_VAR 0 3
60816: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60817: LD_INT 0
60819: PPUSH
60820: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60821: LD_VAR 0 1
60825: NOT
60826: IFTRUE 60865
60828: PUSH
60829: LD_VAR 0 1
60833: PUSH
60834: LD_INT 21
60836: PUSH
60837: LD_INT 2
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 23
60846: PUSH
60847: LD_INT 2
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PPUSH
60858: CALL_OW 69
60862: IN
60863: NOT
60864: OR
60865: IFFALSE 60869
// exit ;
60867: GO 60916
// for i = 1 to 3 do
60869: LD_ADDR_VAR 0 3
60873: PUSH
60874: DOUBLE
60875: LD_INT 1
60877: DEC
60878: ST_TO_ADDR
60879: LD_INT 3
60881: PUSH
60882: FOR_TO
60883: IFFALSE 60914
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60885: LD_VAR 0 1
60889: PPUSH
60890: CALL_OW 250
60894: PPUSH
60895: LD_VAR 0 1
60899: PPUSH
60900: CALL_OW 251
60904: PPUSH
60905: LD_INT 1
60907: PPUSH
60908: CALL_OW 453
60912: GO 60882
60914: POP
60915: POP
// end ;
60916: LD_VAR 0 2
60920: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60921: LD_INT 0
60923: PPUSH
60924: PPUSH
60925: PPUSH
60926: PPUSH
60927: PPUSH
60928: PPUSH
// if not unit or not enemy_unit then
60929: LD_VAR 0 1
60933: NOT
60934: IFTRUE 60943
60936: PUSH
60937: LD_VAR 0 2
60941: NOT
60942: OR
60943: IFFALSE 60947
// exit ;
60945: GO 61428
// if GetLives ( i ) < 250 then
60947: LD_VAR 0 4
60951: PPUSH
60952: CALL_OW 256
60956: PUSH
60957: LD_INT 250
60959: LESS
60960: IFFALSE 60973
// begin ComAutodestruct ( i ) ;
60962: LD_VAR 0 4
60966: PPUSH
60967: CALL 60817 0 1
// exit ;
60971: GO 61428
// end ; x := GetX ( enemy_unit ) ;
60973: LD_ADDR_VAR 0 7
60977: PUSH
60978: LD_VAR 0 2
60982: PPUSH
60983: CALL_OW 250
60987: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60988: LD_ADDR_VAR 0 8
60992: PUSH
60993: LD_VAR 0 2
60997: PPUSH
60998: CALL_OW 251
61002: ST_TO_ADDR
// if not x or not y then
61003: LD_VAR 0 7
61007: NOT
61008: IFTRUE 61017
61010: PUSH
61011: LD_VAR 0 8
61015: NOT
61016: OR
61017: IFFALSE 61021
// exit ;
61019: GO 61428
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61021: LD_ADDR_VAR 0 6
61025: PUSH
61026: LD_VAR 0 7
61030: PPUSH
61031: LD_INT 0
61033: PPUSH
61034: LD_INT 4
61036: PPUSH
61037: CALL_OW 272
61041: PUSH
61042: LD_VAR 0 8
61046: PPUSH
61047: LD_INT 0
61049: PPUSH
61050: LD_INT 4
61052: PPUSH
61053: CALL_OW 273
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 7
61066: PPUSH
61067: LD_INT 1
61069: PPUSH
61070: LD_INT 4
61072: PPUSH
61073: CALL_OW 272
61077: PUSH
61078: LD_VAR 0 8
61082: PPUSH
61083: LD_INT 1
61085: PPUSH
61086: LD_INT 4
61088: PPUSH
61089: CALL_OW 273
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_VAR 0 7
61102: PPUSH
61103: LD_INT 2
61105: PPUSH
61106: LD_INT 4
61108: PPUSH
61109: CALL_OW 272
61113: PUSH
61114: LD_VAR 0 8
61118: PPUSH
61119: LD_INT 2
61121: PPUSH
61122: LD_INT 4
61124: PPUSH
61125: CALL_OW 273
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_VAR 0 7
61138: PPUSH
61139: LD_INT 3
61141: PPUSH
61142: LD_INT 4
61144: PPUSH
61145: CALL_OW 272
61149: PUSH
61150: LD_VAR 0 8
61154: PPUSH
61155: LD_INT 3
61157: PPUSH
61158: LD_INT 4
61160: PPUSH
61161: CALL_OW 273
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_VAR 0 7
61174: PPUSH
61175: LD_INT 4
61177: PPUSH
61178: LD_INT 4
61180: PPUSH
61181: CALL_OW 272
61185: PUSH
61186: LD_VAR 0 8
61190: PPUSH
61191: LD_INT 4
61193: PPUSH
61194: LD_INT 4
61196: PPUSH
61197: CALL_OW 273
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_VAR 0 7
61210: PPUSH
61211: LD_INT 5
61213: PPUSH
61214: LD_INT 4
61216: PPUSH
61217: CALL_OW 272
61221: PUSH
61222: LD_VAR 0 8
61226: PPUSH
61227: LD_INT 5
61229: PPUSH
61230: LD_INT 4
61232: PPUSH
61233: CALL_OW 273
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: ST_TO_ADDR
// for i = tmp downto 1 do
61250: LD_ADDR_VAR 0 4
61254: PUSH
61255: DOUBLE
61256: LD_VAR 0 6
61260: INC
61261: ST_TO_ADDR
61262: LD_INT 1
61264: PUSH
61265: FOR_DOWNTO
61266: IFFALSE 61369
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61268: LD_VAR 0 6
61272: PUSH
61273: LD_VAR 0 4
61277: ARRAY
61278: PUSH
61279: LD_INT 1
61281: ARRAY
61282: PPUSH
61283: LD_VAR 0 6
61287: PUSH
61288: LD_VAR 0 4
61292: ARRAY
61293: PUSH
61294: LD_INT 2
61296: ARRAY
61297: PPUSH
61298: CALL_OW 488
61302: NOT
61303: IFTRUE 61345
61305: PUSH
61306: LD_VAR 0 6
61310: PUSH
61311: LD_VAR 0 4
61315: ARRAY
61316: PUSH
61317: LD_INT 1
61319: ARRAY
61320: PPUSH
61321: LD_VAR 0 6
61325: PUSH
61326: LD_VAR 0 4
61330: ARRAY
61331: PUSH
61332: LD_INT 2
61334: ARRAY
61335: PPUSH
61336: CALL_OW 428
61340: PUSH
61341: LD_INT 0
61343: NONEQUAL
61344: OR
61345: IFFALSE 61367
// tmp := Delete ( tmp , i ) ;
61347: LD_ADDR_VAR 0 6
61351: PUSH
61352: LD_VAR 0 6
61356: PPUSH
61357: LD_VAR 0 4
61361: PPUSH
61362: CALL_OW 3
61366: ST_TO_ADDR
61367: GO 61265
61369: POP
61370: POP
// j := GetClosestHex ( unit , tmp ) ;
61371: LD_ADDR_VAR 0 5
61375: PUSH
61376: LD_VAR 0 1
61380: PPUSH
61381: LD_VAR 0 6
61385: PPUSH
61386: CALL 60663 0 2
61390: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61391: LD_VAR 0 1
61395: PPUSH
61396: LD_VAR 0 5
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: PPUSH
61405: LD_VAR 0 5
61409: PUSH
61410: LD_INT 2
61412: ARRAY
61413: PPUSH
61414: CALL_OW 111
// result := j ;
61418: LD_ADDR_VAR 0 3
61422: PUSH
61423: LD_VAR 0 5
61427: ST_TO_ADDR
// end ;
61428: LD_VAR 0 3
61432: RET
// export function PrepareApemanSoldier ( ) ; begin
61433: LD_INT 0
61435: PPUSH
// uc_nation := 0 ;
61436: LD_ADDR_OWVAR 21
61440: PUSH
61441: LD_INT 0
61443: ST_TO_ADDR
// hc_sex := sex_male ;
61444: LD_ADDR_OWVAR 27
61448: PUSH
61449: LD_INT 1
61451: ST_TO_ADDR
// hc_name :=  ;
61452: LD_ADDR_OWVAR 26
61456: PUSH
61457: LD_STRING 
61459: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61460: LD_ADDR_OWVAR 28
61464: PUSH
61465: LD_INT 15
61467: ST_TO_ADDR
// hc_gallery :=  ;
61468: LD_ADDR_OWVAR 33
61472: PUSH
61473: LD_STRING 
61475: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61476: LD_ADDR_OWVAR 31
61480: PUSH
61481: LD_INT 0
61483: PPUSH
61484: LD_INT 3
61486: PPUSH
61487: CALL_OW 12
61491: PUSH
61492: LD_INT 0
61494: PPUSH
61495: LD_INT 3
61497: PPUSH
61498: CALL_OW 12
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: LD_INT 0
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61515: LD_ADDR_OWVAR 29
61519: PUSH
61520: LD_INT 10
61522: PUSH
61523: LD_INT 12
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: ST_TO_ADDR
// end ;
61530: LD_VAR 0 1
61534: RET
// export function PrepareApemanEngineer ( ) ; begin
61535: LD_INT 0
61537: PPUSH
// uc_nation := 0 ;
61538: LD_ADDR_OWVAR 21
61542: PUSH
61543: LD_INT 0
61545: ST_TO_ADDR
// hc_sex := sex_male ;
61546: LD_ADDR_OWVAR 27
61550: PUSH
61551: LD_INT 1
61553: ST_TO_ADDR
// hc_name :=  ;
61554: LD_ADDR_OWVAR 26
61558: PUSH
61559: LD_STRING 
61561: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61562: LD_ADDR_OWVAR 28
61566: PUSH
61567: LD_INT 16
61569: ST_TO_ADDR
// hc_gallery :=  ;
61570: LD_ADDR_OWVAR 33
61574: PUSH
61575: LD_STRING 
61577: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61578: LD_ADDR_OWVAR 31
61582: PUSH
61583: LD_INT 0
61585: PPUSH
61586: LD_INT 3
61588: PPUSH
61589: CALL_OW 12
61593: PUSH
61594: LD_INT 0
61596: PPUSH
61597: LD_INT 3
61599: PPUSH
61600: CALL_OW 12
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61617: LD_ADDR_OWVAR 29
61621: PUSH
61622: LD_INT 10
61624: PUSH
61625: LD_INT 12
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: ST_TO_ADDR
// end ;
61632: LD_VAR 0 1
61636: RET
// export function PrepareApeman ( agressivity ) ; begin
61637: LD_INT 0
61639: PPUSH
// uc_side := 0 ;
61640: LD_ADDR_OWVAR 20
61644: PUSH
61645: LD_INT 0
61647: ST_TO_ADDR
// uc_nation := 0 ;
61648: LD_ADDR_OWVAR 21
61652: PUSH
61653: LD_INT 0
61655: ST_TO_ADDR
// hc_sex := sex_male ;
61656: LD_ADDR_OWVAR 27
61660: PUSH
61661: LD_INT 1
61663: ST_TO_ADDR
// hc_class := class_apeman ;
61664: LD_ADDR_OWVAR 28
61668: PUSH
61669: LD_INT 12
61671: ST_TO_ADDR
// hc_gallery :=  ;
61672: LD_ADDR_OWVAR 33
61676: PUSH
61677: LD_STRING 
61679: ST_TO_ADDR
// hc_name :=  ;
61680: LD_ADDR_OWVAR 26
61684: PUSH
61685: LD_STRING 
61687: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
61688: LD_ADDR_OWVAR 29
61692: PUSH
61693: LD_INT 10
61695: PUSH
61696: LD_INT 12
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: ST_TO_ADDR
// if agressivity = 0 then
61703: LD_VAR 0 1
61707: PUSH
61708: LD_INT 0
61710: EQUAL
61711: IFFALSE 61723
// hc_agressivity := 0 else
61713: LD_ADDR_OWVAR 35
61717: PUSH
61718: LD_INT 0
61720: ST_TO_ADDR
61721: GO 61744
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61723: LD_ADDR_OWVAR 35
61727: PUSH
61728: LD_VAR 0 1
61732: NEG
61733: PPUSH
61734: LD_VAR 0 1
61738: PPUSH
61739: CALL_OW 12
61743: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61744: LD_ADDR_OWVAR 31
61748: PUSH
61749: LD_INT 0
61751: PPUSH
61752: LD_INT 3
61754: PPUSH
61755: CALL_OW 12
61759: PUSH
61760: LD_INT 0
61762: PPUSH
61763: LD_INT 3
61765: PPUSH
61766: CALL_OW 12
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: ST_TO_ADDR
// end ;
61783: LD_VAR 0 2
61787: RET
// export function PrepareTiger ( agressivity ) ; begin
61788: LD_INT 0
61790: PPUSH
// uc_side := 0 ;
61791: LD_ADDR_OWVAR 20
61795: PUSH
61796: LD_INT 0
61798: ST_TO_ADDR
// uc_nation := 0 ;
61799: LD_ADDR_OWVAR 21
61803: PUSH
61804: LD_INT 0
61806: ST_TO_ADDR
// InitHc ;
61807: CALL_OW 19
// hc_class := class_tiger ;
61811: LD_ADDR_OWVAR 28
61815: PUSH
61816: LD_INT 14
61818: ST_TO_ADDR
// hc_gallery :=  ;
61819: LD_ADDR_OWVAR 33
61823: PUSH
61824: LD_STRING 
61826: ST_TO_ADDR
// hc_name :=  ;
61827: LD_ADDR_OWVAR 26
61831: PUSH
61832: LD_STRING 
61834: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61835: LD_ADDR_OWVAR 35
61839: PUSH
61840: LD_VAR 0 1
61844: NEG
61845: PPUSH
61846: LD_VAR 0 1
61850: PPUSH
61851: CALL_OW 12
61855: ST_TO_ADDR
// end ;
61856: LD_VAR 0 2
61860: RET
// export function PrepareEnchidna ( ) ; begin
61861: LD_INT 0
61863: PPUSH
// uc_side := 0 ;
61864: LD_ADDR_OWVAR 20
61868: PUSH
61869: LD_INT 0
61871: ST_TO_ADDR
// uc_nation := 0 ;
61872: LD_ADDR_OWVAR 21
61876: PUSH
61877: LD_INT 0
61879: ST_TO_ADDR
// InitHc ;
61880: CALL_OW 19
// hc_class := class_baggie ;
61884: LD_ADDR_OWVAR 28
61888: PUSH
61889: LD_INT 13
61891: ST_TO_ADDR
// hc_gallery :=  ;
61892: LD_ADDR_OWVAR 33
61896: PUSH
61897: LD_STRING 
61899: ST_TO_ADDR
// hc_name :=  ;
61900: LD_ADDR_OWVAR 26
61904: PUSH
61905: LD_STRING 
61907: ST_TO_ADDR
// end ;
61908: LD_VAR 0 1
61912: RET
// export function PrepareFrog ( ) ; begin
61913: LD_INT 0
61915: PPUSH
// uc_side := 0 ;
61916: LD_ADDR_OWVAR 20
61920: PUSH
61921: LD_INT 0
61923: ST_TO_ADDR
// uc_nation := 0 ;
61924: LD_ADDR_OWVAR 21
61928: PUSH
61929: LD_INT 0
61931: ST_TO_ADDR
// InitHc ;
61932: CALL_OW 19
// hc_class := class_frog ;
61936: LD_ADDR_OWVAR 28
61940: PUSH
61941: LD_INT 19
61943: ST_TO_ADDR
// hc_gallery :=  ;
61944: LD_ADDR_OWVAR 33
61948: PUSH
61949: LD_STRING 
61951: ST_TO_ADDR
// hc_name :=  ;
61952: LD_ADDR_OWVAR 26
61956: PUSH
61957: LD_STRING 
61959: ST_TO_ADDR
// end ;
61960: LD_VAR 0 1
61964: RET
// export function PrepareFish ( ) ; begin
61965: LD_INT 0
61967: PPUSH
// uc_side := 0 ;
61968: LD_ADDR_OWVAR 20
61972: PUSH
61973: LD_INT 0
61975: ST_TO_ADDR
// uc_nation := 0 ;
61976: LD_ADDR_OWVAR 21
61980: PUSH
61981: LD_INT 0
61983: ST_TO_ADDR
// InitHc ;
61984: CALL_OW 19
// hc_class := class_fish ;
61988: LD_ADDR_OWVAR 28
61992: PUSH
61993: LD_INT 20
61995: ST_TO_ADDR
// hc_gallery :=  ;
61996: LD_ADDR_OWVAR 33
62000: PUSH
62001: LD_STRING 
62003: ST_TO_ADDR
// hc_name :=  ;
62004: LD_ADDR_OWVAR 26
62008: PUSH
62009: LD_STRING 
62011: ST_TO_ADDR
// end ;
62012: LD_VAR 0 1
62016: RET
// export function PrepareBird ( ) ; begin
62017: LD_INT 0
62019: PPUSH
// uc_side := 0 ;
62020: LD_ADDR_OWVAR 20
62024: PUSH
62025: LD_INT 0
62027: ST_TO_ADDR
// uc_nation := 0 ;
62028: LD_ADDR_OWVAR 21
62032: PUSH
62033: LD_INT 0
62035: ST_TO_ADDR
// InitHc ;
62036: CALL_OW 19
// hc_class := class_phororhacos ;
62040: LD_ADDR_OWVAR 28
62044: PUSH
62045: LD_INT 18
62047: ST_TO_ADDR
// hc_gallery :=  ;
62048: LD_ADDR_OWVAR 33
62052: PUSH
62053: LD_STRING 
62055: ST_TO_ADDR
// hc_name :=  ;
62056: LD_ADDR_OWVAR 26
62060: PUSH
62061: LD_STRING 
62063: ST_TO_ADDR
// end ;
62064: LD_VAR 0 1
62068: RET
// export function PrepareHorse ( ) ; begin
62069: LD_INT 0
62071: PPUSH
// uc_side := 0 ;
62072: LD_ADDR_OWVAR 20
62076: PUSH
62077: LD_INT 0
62079: ST_TO_ADDR
// uc_nation := 0 ;
62080: LD_ADDR_OWVAR 21
62084: PUSH
62085: LD_INT 0
62087: ST_TO_ADDR
// InitHc ;
62088: CALL_OW 19
// hc_class := class_horse ;
62092: LD_ADDR_OWVAR 28
62096: PUSH
62097: LD_INT 21
62099: ST_TO_ADDR
// hc_gallery :=  ;
62100: LD_ADDR_OWVAR 33
62104: PUSH
62105: LD_STRING 
62107: ST_TO_ADDR
// hc_name :=  ;
62108: LD_ADDR_OWVAR 26
62112: PUSH
62113: LD_STRING 
62115: ST_TO_ADDR
// end ;
62116: LD_VAR 0 1
62120: RET
// export function PrepareMastodont ( ) ; begin
62121: LD_INT 0
62123: PPUSH
// uc_side := 0 ;
62124: LD_ADDR_OWVAR 20
62128: PUSH
62129: LD_INT 0
62131: ST_TO_ADDR
// uc_nation := 0 ;
62132: LD_ADDR_OWVAR 21
62136: PUSH
62137: LD_INT 0
62139: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62140: LD_ADDR_OWVAR 37
62144: PUSH
62145: LD_INT 31
62147: ST_TO_ADDR
// vc_control := control_rider ;
62148: LD_ADDR_OWVAR 38
62152: PUSH
62153: LD_INT 4
62155: ST_TO_ADDR
// end ;
62156: LD_VAR 0 1
62160: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62161: LD_INT 0
62163: PPUSH
62164: PPUSH
62165: PPUSH
// uc_side = 0 ;
62166: LD_ADDR_OWVAR 20
62170: PUSH
62171: LD_INT 0
62173: ST_TO_ADDR
// uc_nation = 0 ;
62174: LD_ADDR_OWVAR 21
62178: PUSH
62179: LD_INT 0
62181: ST_TO_ADDR
// InitHc_All ( ) ;
62182: CALL_OW 584
// InitVc ;
62186: CALL_OW 20
// if mastodonts then
62190: LD_VAR 0 6
62194: IFFALSE 62261
// for i = 1 to mastodonts do
62196: LD_ADDR_VAR 0 11
62200: PUSH
62201: DOUBLE
62202: LD_INT 1
62204: DEC
62205: ST_TO_ADDR
62206: LD_VAR 0 6
62210: PUSH
62211: FOR_TO
62212: IFFALSE 62259
// begin vc_chassis := 31 ;
62214: LD_ADDR_OWVAR 37
62218: PUSH
62219: LD_INT 31
62221: ST_TO_ADDR
// vc_control := control_rider ;
62222: LD_ADDR_OWVAR 38
62226: PUSH
62227: LD_INT 4
62229: ST_TO_ADDR
// animal := CreateVehicle ;
62230: LD_ADDR_VAR 0 12
62234: PUSH
62235: CALL_OW 45
62239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62240: LD_VAR 0 12
62244: PPUSH
62245: LD_VAR 0 8
62249: PPUSH
62250: LD_INT 0
62252: PPUSH
62253: CALL 64403 0 3
// end ;
62257: GO 62211
62259: POP
62260: POP
// if horses then
62261: LD_VAR 0 5
62265: IFFALSE 62332
// for i = 1 to horses do
62267: LD_ADDR_VAR 0 11
62271: PUSH
62272: DOUBLE
62273: LD_INT 1
62275: DEC
62276: ST_TO_ADDR
62277: LD_VAR 0 5
62281: PUSH
62282: FOR_TO
62283: IFFALSE 62330
// begin hc_class := 21 ;
62285: LD_ADDR_OWVAR 28
62289: PUSH
62290: LD_INT 21
62292: ST_TO_ADDR
// hc_gallery :=  ;
62293: LD_ADDR_OWVAR 33
62297: PUSH
62298: LD_STRING 
62300: ST_TO_ADDR
// animal := CreateHuman ;
62301: LD_ADDR_VAR 0 12
62305: PUSH
62306: CALL_OW 44
62310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62311: LD_VAR 0 12
62315: PPUSH
62316: LD_VAR 0 8
62320: PPUSH
62321: LD_INT 0
62323: PPUSH
62324: CALL 64403 0 3
// end ;
62328: GO 62282
62330: POP
62331: POP
// if birds then
62332: LD_VAR 0 1
62336: IFFALSE 62403
// for i = 1 to birds do
62338: LD_ADDR_VAR 0 11
62342: PUSH
62343: DOUBLE
62344: LD_INT 1
62346: DEC
62347: ST_TO_ADDR
62348: LD_VAR 0 1
62352: PUSH
62353: FOR_TO
62354: IFFALSE 62401
// begin hc_class := 18 ;
62356: LD_ADDR_OWVAR 28
62360: PUSH
62361: LD_INT 18
62363: ST_TO_ADDR
// hc_gallery =  ;
62364: LD_ADDR_OWVAR 33
62368: PUSH
62369: LD_STRING 
62371: ST_TO_ADDR
// animal := CreateHuman ;
62372: LD_ADDR_VAR 0 12
62376: PUSH
62377: CALL_OW 44
62381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62382: LD_VAR 0 12
62386: PPUSH
62387: LD_VAR 0 8
62391: PPUSH
62392: LD_INT 0
62394: PPUSH
62395: CALL 64403 0 3
// end ;
62399: GO 62353
62401: POP
62402: POP
// if tigers then
62403: LD_VAR 0 2
62407: IFFALSE 62491
// for i = 1 to tigers do
62409: LD_ADDR_VAR 0 11
62413: PUSH
62414: DOUBLE
62415: LD_INT 1
62417: DEC
62418: ST_TO_ADDR
62419: LD_VAR 0 2
62423: PUSH
62424: FOR_TO
62425: IFFALSE 62489
// begin hc_class = class_tiger ;
62427: LD_ADDR_OWVAR 28
62431: PUSH
62432: LD_INT 14
62434: ST_TO_ADDR
// hc_gallery =  ;
62435: LD_ADDR_OWVAR 33
62439: PUSH
62440: LD_STRING 
62442: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62443: LD_ADDR_OWVAR 35
62447: PUSH
62448: LD_INT 7
62450: NEG
62451: PPUSH
62452: LD_INT 7
62454: PPUSH
62455: CALL_OW 12
62459: ST_TO_ADDR
// animal := CreateHuman ;
62460: LD_ADDR_VAR 0 12
62464: PUSH
62465: CALL_OW 44
62469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62470: LD_VAR 0 12
62474: PPUSH
62475: LD_VAR 0 8
62479: PPUSH
62480: LD_INT 0
62482: PPUSH
62483: CALL 64403 0 3
// end ;
62487: GO 62424
62489: POP
62490: POP
// if apemans then
62491: LD_VAR 0 3
62495: IFFALSE 62618
// for i = 1 to apemans do
62497: LD_ADDR_VAR 0 11
62501: PUSH
62502: DOUBLE
62503: LD_INT 1
62505: DEC
62506: ST_TO_ADDR
62507: LD_VAR 0 3
62511: PUSH
62512: FOR_TO
62513: IFFALSE 62616
// begin hc_class = class_apeman ;
62515: LD_ADDR_OWVAR 28
62519: PUSH
62520: LD_INT 12
62522: ST_TO_ADDR
// hc_gallery =  ;
62523: LD_ADDR_OWVAR 33
62527: PUSH
62528: LD_STRING 
62530: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62531: LD_ADDR_OWVAR 35
62535: PUSH
62536: LD_INT 2
62538: NEG
62539: PPUSH
62540: LD_INT 2
62542: PPUSH
62543: CALL_OW 12
62547: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62548: LD_ADDR_OWVAR 31
62552: PUSH
62553: LD_INT 1
62555: PPUSH
62556: LD_INT 3
62558: PPUSH
62559: CALL_OW 12
62563: PUSH
62564: LD_INT 1
62566: PPUSH
62567: LD_INT 3
62569: PPUSH
62570: CALL_OW 12
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: ST_TO_ADDR
// animal := CreateHuman ;
62587: LD_ADDR_VAR 0 12
62591: PUSH
62592: CALL_OW 44
62596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62597: LD_VAR 0 12
62601: PPUSH
62602: LD_VAR 0 8
62606: PPUSH
62607: LD_INT 0
62609: PPUSH
62610: CALL 64403 0 3
// end ;
62614: GO 62512
62616: POP
62617: POP
// if enchidnas then
62618: LD_VAR 0 4
62622: IFFALSE 62689
// for i = 1 to enchidnas do
62624: LD_ADDR_VAR 0 11
62628: PUSH
62629: DOUBLE
62630: LD_INT 1
62632: DEC
62633: ST_TO_ADDR
62634: LD_VAR 0 4
62638: PUSH
62639: FOR_TO
62640: IFFALSE 62687
// begin hc_class = 13 ;
62642: LD_ADDR_OWVAR 28
62646: PUSH
62647: LD_INT 13
62649: ST_TO_ADDR
// hc_gallery =  ;
62650: LD_ADDR_OWVAR 33
62654: PUSH
62655: LD_STRING 
62657: ST_TO_ADDR
// animal := CreateHuman ;
62658: LD_ADDR_VAR 0 12
62662: PUSH
62663: CALL_OW 44
62667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62668: LD_VAR 0 12
62672: PPUSH
62673: LD_VAR 0 8
62677: PPUSH
62678: LD_INT 0
62680: PPUSH
62681: CALL 64403 0 3
// end ;
62685: GO 62639
62687: POP
62688: POP
// if fishes then
62689: LD_VAR 0 7
62693: IFFALSE 62760
// for i = 1 to fishes do
62695: LD_ADDR_VAR 0 11
62699: PUSH
62700: DOUBLE
62701: LD_INT 1
62703: DEC
62704: ST_TO_ADDR
62705: LD_VAR 0 7
62709: PUSH
62710: FOR_TO
62711: IFFALSE 62758
// begin hc_class = 20 ;
62713: LD_ADDR_OWVAR 28
62717: PUSH
62718: LD_INT 20
62720: ST_TO_ADDR
// hc_gallery =  ;
62721: LD_ADDR_OWVAR 33
62725: PUSH
62726: LD_STRING 
62728: ST_TO_ADDR
// animal := CreateHuman ;
62729: LD_ADDR_VAR 0 12
62733: PUSH
62734: CALL_OW 44
62738: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62739: LD_VAR 0 12
62743: PPUSH
62744: LD_VAR 0 9
62748: PPUSH
62749: LD_INT 0
62751: PPUSH
62752: CALL 64403 0 3
// end ;
62756: GO 62710
62758: POP
62759: POP
// end ;
62760: LD_VAR 0 10
62764: RET
// export function WantHeal ( sci , unit ) ; begin
62765: LD_INT 0
62767: PPUSH
// if GetTaskList ( sci ) > 0 then
62768: LD_VAR 0 1
62772: PPUSH
62773: CALL_OW 437
62777: PUSH
62778: LD_INT 0
62780: GREATER
62781: IFFALSE 62853
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62783: LD_VAR 0 1
62787: PPUSH
62788: CALL_OW 437
62792: PUSH
62793: LD_INT 1
62795: ARRAY
62796: PUSH
62797: LD_INT 1
62799: ARRAY
62800: PUSH
62801: LD_STRING l
62803: EQUAL
62804: IFFALSE 62831
62806: PUSH
62807: LD_VAR 0 1
62811: PPUSH
62812: CALL_OW 437
62816: PUSH
62817: LD_INT 1
62819: ARRAY
62820: PUSH
62821: LD_INT 4
62823: ARRAY
62824: PUSH
62825: LD_VAR 0 2
62829: EQUAL
62830: AND
62831: IFFALSE 62843
// result := true else
62833: LD_ADDR_VAR 0 3
62837: PUSH
62838: LD_INT 1
62840: ST_TO_ADDR
62841: GO 62851
// result := false ;
62843: LD_ADDR_VAR 0 3
62847: PUSH
62848: LD_INT 0
62850: ST_TO_ADDR
// end else
62851: GO 62861
// result := false ;
62853: LD_ADDR_VAR 0 3
62857: PUSH
62858: LD_INT 0
62860: ST_TO_ADDR
// end ;
62861: LD_VAR 0 3
62865: RET
// export function HealTarget ( sci ) ; begin
62866: LD_INT 0
62868: PPUSH
// if not sci then
62869: LD_VAR 0 1
62873: NOT
62874: IFFALSE 62878
// exit ;
62876: GO 62943
// result := 0 ;
62878: LD_ADDR_VAR 0 2
62882: PUSH
62883: LD_INT 0
62885: ST_TO_ADDR
// if GetTaskList ( sci ) then
62886: LD_VAR 0 1
62890: PPUSH
62891: CALL_OW 437
62895: IFFALSE 62943
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62897: LD_VAR 0 1
62901: PPUSH
62902: CALL_OW 437
62906: PUSH
62907: LD_INT 1
62909: ARRAY
62910: PUSH
62911: LD_INT 1
62913: ARRAY
62914: PUSH
62915: LD_STRING l
62917: EQUAL
62918: IFFALSE 62943
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62920: LD_ADDR_VAR 0 2
62924: PUSH
62925: LD_VAR 0 1
62929: PPUSH
62930: CALL_OW 437
62934: PUSH
62935: LD_INT 1
62937: ARRAY
62938: PUSH
62939: LD_INT 4
62941: ARRAY
62942: ST_TO_ADDR
// end ;
62943: LD_VAR 0 2
62947: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62948: LD_INT 0
62950: PPUSH
62951: PPUSH
62952: PPUSH
62953: PPUSH
// if not base_units then
62954: LD_VAR 0 1
62958: NOT
62959: IFFALSE 62963
// exit ;
62961: GO 63050
// result := false ;
62963: LD_ADDR_VAR 0 2
62967: PUSH
62968: LD_INT 0
62970: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62971: LD_ADDR_VAR 0 5
62975: PUSH
62976: LD_VAR 0 1
62980: PPUSH
62981: LD_INT 21
62983: PUSH
62984: LD_INT 3
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PPUSH
62991: CALL_OW 72
62995: ST_TO_ADDR
// if not tmp then
62996: LD_VAR 0 5
63000: NOT
63001: IFFALSE 63005
// exit ;
63003: GO 63050
// for i in tmp do
63005: LD_ADDR_VAR 0 3
63009: PUSH
63010: LD_VAR 0 5
63014: PUSH
63015: FOR_IN
63016: IFFALSE 63048
// begin result := EnemyInRange ( i , 22 ) ;
63018: LD_ADDR_VAR 0 2
63022: PUSH
63023: LD_VAR 0 3
63027: PPUSH
63028: LD_INT 22
63030: PPUSH
63031: CALL 60465 0 2
63035: ST_TO_ADDR
// if result then
63036: LD_VAR 0 2
63040: IFFALSE 63046
// exit ;
63042: POP
63043: POP
63044: GO 63050
// end ;
63046: GO 63015
63048: POP
63049: POP
// end ;
63050: LD_VAR 0 2
63054: RET
// export function FilterByTag ( units , tag ) ; begin
63055: LD_INT 0
63057: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63058: LD_ADDR_VAR 0 3
63062: PUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: LD_INT 120
63070: PUSH
63071: LD_VAR 0 2
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PPUSH
63080: CALL_OW 72
63084: ST_TO_ADDR
// end ;
63085: LD_VAR 0 3
63089: RET
// export function IsDriver ( un ) ; begin
63090: LD_INT 0
63092: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63093: LD_ADDR_VAR 0 2
63097: PUSH
63098: LD_VAR 0 1
63102: PUSH
63103: LD_INT 55
63105: PUSH
63106: EMPTY
63107: LIST
63108: PPUSH
63109: CALL_OW 69
63113: IN
63114: ST_TO_ADDR
// end ;
63115: LD_VAR 0 2
63119: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63120: LD_INT 0
63122: PPUSH
63123: PPUSH
// list := [ ] ;
63124: LD_ADDR_VAR 0 5
63128: PUSH
63129: EMPTY
63130: ST_TO_ADDR
// case d of 0 :
63131: LD_VAR 0 3
63135: PUSH
63136: LD_INT 0
63138: DOUBLE
63139: EQUAL
63140: IFTRUE 63144
63142: GO 63277
63144: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63145: LD_ADDR_VAR 0 5
63149: PUSH
63150: LD_VAR 0 1
63154: PUSH
63155: LD_INT 4
63157: MINUS
63158: PUSH
63159: LD_VAR 0 2
63163: PUSH
63164: LD_INT 4
63166: MINUS
63167: PUSH
63168: LD_INT 2
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: PUSH
63176: LD_VAR 0 1
63180: PUSH
63181: LD_INT 3
63183: MINUS
63184: PUSH
63185: LD_VAR 0 2
63189: PUSH
63190: LD_INT 1
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: PUSH
63198: LD_VAR 0 1
63202: PUSH
63203: LD_INT 4
63205: PLUS
63206: PUSH
63207: LD_VAR 0 2
63211: PUSH
63212: LD_INT 4
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: PUSH
63220: LD_VAR 0 1
63224: PUSH
63225: LD_INT 3
63227: PLUS
63228: PUSH
63229: LD_VAR 0 2
63233: PUSH
63234: LD_INT 3
63236: PLUS
63237: PUSH
63238: LD_INT 5
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: LIST
63245: PUSH
63246: LD_VAR 0 1
63250: PUSH
63251: LD_VAR 0 2
63255: PUSH
63256: LD_INT 4
63258: PLUS
63259: PUSH
63260: LD_INT 0
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: LIST
63267: PUSH
63268: EMPTY
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: ST_TO_ADDR
// end ; 1 :
63275: GO 63975
63277: LD_INT 1
63279: DOUBLE
63280: EQUAL
63281: IFTRUE 63285
63283: GO 63418
63285: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63286: LD_ADDR_VAR 0 5
63290: PUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_VAR 0 2
63300: PUSH
63301: LD_INT 4
63303: MINUS
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: PUSH
63313: LD_VAR 0 1
63317: PUSH
63318: LD_INT 3
63320: MINUS
63321: PUSH
63322: LD_VAR 0 2
63326: PUSH
63327: LD_INT 3
63329: MINUS
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: PUSH
63339: LD_VAR 0 1
63343: PUSH
63344: LD_INT 4
63346: MINUS
63347: PUSH
63348: LD_VAR 0 2
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: PUSH
63361: LD_VAR 0 1
63365: PUSH
63366: LD_VAR 0 2
63370: PUSH
63371: LD_INT 3
63373: PLUS
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: LIST
63382: PUSH
63383: LD_VAR 0 1
63387: PUSH
63388: LD_INT 4
63390: PLUS
63391: PUSH
63392: LD_VAR 0 2
63396: PUSH
63397: LD_INT 4
63399: PLUS
63400: PUSH
63401: LD_INT 5
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: ST_TO_ADDR
// end ; 2 :
63416: GO 63975
63418: LD_INT 2
63420: DOUBLE
63421: EQUAL
63422: IFTRUE 63426
63424: GO 63555
63426: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63427: LD_ADDR_VAR 0 5
63431: PUSH
63432: LD_VAR 0 1
63436: PUSH
63437: LD_VAR 0 2
63441: PUSH
63442: LD_INT 3
63444: MINUS
63445: PUSH
63446: LD_INT 3
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: PUSH
63454: LD_VAR 0 1
63458: PUSH
63459: LD_INT 4
63461: PLUS
63462: PUSH
63463: LD_VAR 0 2
63467: PUSH
63468: LD_INT 4
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: LD_VAR 0 1
63480: PUSH
63481: LD_VAR 0 2
63485: PUSH
63486: LD_INT 4
63488: PLUS
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: PUSH
63498: LD_VAR 0 1
63502: PUSH
63503: LD_INT 3
63505: MINUS
63506: PUSH
63507: LD_VAR 0 2
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: PUSH
63520: LD_VAR 0 1
63524: PUSH
63525: LD_INT 4
63527: MINUS
63528: PUSH
63529: LD_VAR 0 2
63533: PUSH
63534: LD_INT 4
63536: MINUS
63537: PUSH
63538: LD_INT 2
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: LIST
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: ST_TO_ADDR
// end ; 3 :
63553: GO 63975
63555: LD_INT 3
63557: DOUBLE
63558: EQUAL
63559: IFTRUE 63563
63561: GO 63696
63563: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63564: LD_ADDR_VAR 0 5
63568: PUSH
63569: LD_VAR 0 1
63573: PUSH
63574: LD_INT 3
63576: PLUS
63577: PUSH
63578: LD_VAR 0 2
63582: PUSH
63583: LD_INT 4
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: LIST
63590: PUSH
63591: LD_VAR 0 1
63595: PUSH
63596: LD_INT 4
63598: PLUS
63599: PUSH
63600: LD_VAR 0 2
63604: PUSH
63605: LD_INT 4
63607: PLUS
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: PUSH
63617: LD_VAR 0 1
63621: PUSH
63622: LD_INT 4
63624: MINUS
63625: PUSH
63626: LD_VAR 0 2
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: PUSH
63639: LD_VAR 0 1
63643: PUSH
63644: LD_VAR 0 2
63648: PUSH
63649: LD_INT 4
63651: MINUS
63652: PUSH
63653: LD_INT 3
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: LIST
63660: PUSH
63661: LD_VAR 0 1
63665: PUSH
63666: LD_INT 3
63668: MINUS
63669: PUSH
63670: LD_VAR 0 2
63674: PUSH
63675: LD_INT 3
63677: MINUS
63678: PUSH
63679: LD_INT 2
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: LIST
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// end ; 4 :
63694: GO 63975
63696: LD_INT 4
63698: DOUBLE
63699: EQUAL
63700: IFTRUE 63704
63702: GO 63837
63704: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63705: LD_ADDR_VAR 0 5
63709: PUSH
63710: LD_VAR 0 1
63714: PUSH
63715: LD_VAR 0 2
63719: PUSH
63720: LD_INT 4
63722: PLUS
63723: PUSH
63724: LD_INT 0
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: PUSH
63732: LD_VAR 0 1
63736: PUSH
63737: LD_INT 3
63739: PLUS
63740: PUSH
63741: LD_VAR 0 2
63745: PUSH
63746: LD_INT 3
63748: PLUS
63749: PUSH
63750: LD_INT 5
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: LIST
63757: PUSH
63758: LD_VAR 0 1
63762: PUSH
63763: LD_INT 4
63765: PLUS
63766: PUSH
63767: LD_VAR 0 2
63771: PUSH
63772: LD_INT 4
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: PUSH
63780: LD_VAR 0 1
63784: PUSH
63785: LD_VAR 0 2
63789: PUSH
63790: LD_INT 3
63792: MINUS
63793: PUSH
63794: LD_INT 3
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: LIST
63801: PUSH
63802: LD_VAR 0 1
63806: PUSH
63807: LD_INT 4
63809: MINUS
63810: PUSH
63811: LD_VAR 0 2
63815: PUSH
63816: LD_INT 4
63818: MINUS
63819: PUSH
63820: LD_INT 2
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: LIST
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: ST_TO_ADDR
// end ; 5 :
63835: GO 63975
63837: LD_INT 5
63839: DOUBLE
63840: EQUAL
63841: IFTRUE 63845
63843: GO 63974
63845: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63846: LD_ADDR_VAR 0 5
63850: PUSH
63851: LD_VAR 0 1
63855: PUSH
63856: LD_INT 4
63858: MINUS
63859: PUSH
63860: LD_VAR 0 2
63864: PUSH
63865: LD_INT 1
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: LIST
63872: PUSH
63873: LD_VAR 0 1
63877: PUSH
63878: LD_VAR 0 2
63882: PUSH
63883: LD_INT 4
63885: MINUS
63886: PUSH
63887: LD_INT 3
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: LIST
63894: PUSH
63895: LD_VAR 0 1
63899: PUSH
63900: LD_INT 4
63902: PLUS
63903: PUSH
63904: LD_VAR 0 2
63908: PUSH
63909: LD_INT 4
63911: PLUS
63912: PUSH
63913: LD_INT 5
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: PUSH
63921: LD_VAR 0 1
63925: PUSH
63926: LD_INT 3
63928: PLUS
63929: PUSH
63930: LD_VAR 0 2
63934: PUSH
63935: LD_INT 4
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: LIST
63942: PUSH
63943: LD_VAR 0 1
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: LD_INT 3
63955: PLUS
63956: PUSH
63957: LD_INT 0
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: LIST
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: ST_TO_ADDR
// end ; end ;
63972: GO 63975
63974: POP
// result := list ;
63975: LD_ADDR_VAR 0 4
63979: PUSH
63980: LD_VAR 0 5
63984: ST_TO_ADDR
// end ;
63985: LD_VAR 0 4
63989: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63990: LD_INT 0
63992: PPUSH
63993: PPUSH
63994: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63995: LD_VAR 0 1
63999: NOT
64000: IFTRUE 64028
64002: PUSH
64003: LD_VAR 0 2
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: LD_INT 2
64013: PUSH
64014: LD_INT 3
64016: PUSH
64017: LD_INT 4
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: IN
64026: NOT
64027: OR
64028: IFFALSE 64032
// exit ;
64030: GO 64115
// tmp := [ ] ;
64032: LD_ADDR_VAR 0 5
64036: PUSH
64037: EMPTY
64038: ST_TO_ADDR
// for i in units do
64039: LD_ADDR_VAR 0 4
64043: PUSH
64044: LD_VAR 0 1
64048: PUSH
64049: FOR_IN
64050: IFFALSE 64084
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64052: LD_ADDR_VAR 0 5
64056: PUSH
64057: LD_VAR 0 5
64061: PPUSH
64062: LD_VAR 0 4
64066: PPUSH
64067: LD_VAR 0 2
64071: PPUSH
64072: CALL_OW 259
64076: PPUSH
64077: CALL 65510 0 2
64081: ST_TO_ADDR
64082: GO 64049
64084: POP
64085: POP
// if not tmp then
64086: LD_VAR 0 5
64090: NOT
64091: IFFALSE 64095
// exit ;
64093: GO 64115
// result := SortListByListDesc ( units , tmp ) ;
64095: LD_ADDR_VAR 0 3
64099: PUSH
64100: LD_VAR 0 1
64104: PPUSH
64105: LD_VAR 0 5
64109: PPUSH
64110: CALL_OW 77
64114: ST_TO_ADDR
// end ;
64115: LD_VAR 0 3
64119: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64120: LD_INT 0
64122: PPUSH
64123: PPUSH
64124: PPUSH
// result := false ;
64125: LD_ADDR_VAR 0 3
64129: PUSH
64130: LD_INT 0
64132: ST_TO_ADDR
// if not building then
64133: LD_VAR 0 2
64137: NOT
64138: IFFALSE 64142
// exit ;
64140: GO 64286
// x := GetX ( building ) ;
64142: LD_ADDR_VAR 0 4
64146: PUSH
64147: LD_VAR 0 2
64151: PPUSH
64152: CALL_OW 250
64156: ST_TO_ADDR
// y := GetY ( building ) ;
64157: LD_ADDR_VAR 0 5
64161: PUSH
64162: LD_VAR 0 2
64166: PPUSH
64167: CALL_OW 251
64171: ST_TO_ADDR
// if not x or not y then
64172: LD_VAR 0 4
64176: NOT
64177: IFTRUE 64186
64179: PUSH
64180: LD_VAR 0 5
64184: NOT
64185: OR
64186: IFFALSE 64190
// exit ;
64188: GO 64286
// if GetTaskList ( unit ) then
64190: LD_VAR 0 1
64194: PPUSH
64195: CALL_OW 437
64199: IFFALSE 64286
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64201: LD_STRING e
64203: PUSH
64204: LD_VAR 0 1
64208: PPUSH
64209: CALL_OW 437
64213: PUSH
64214: LD_INT 1
64216: ARRAY
64217: PUSH
64218: LD_INT 1
64220: ARRAY
64221: EQUAL
64222: IFFALSE 64249
64224: PUSH
64225: LD_VAR 0 4
64229: PUSH
64230: LD_VAR 0 1
64234: PPUSH
64235: CALL_OW 437
64239: PUSH
64240: LD_INT 1
64242: ARRAY
64243: PUSH
64244: LD_INT 2
64246: ARRAY
64247: EQUAL
64248: AND
64249: IFFALSE 64276
64251: PUSH
64252: LD_VAR 0 5
64256: PUSH
64257: LD_VAR 0 1
64261: PPUSH
64262: CALL_OW 437
64266: PUSH
64267: LD_INT 1
64269: ARRAY
64270: PUSH
64271: LD_INT 3
64273: ARRAY
64274: EQUAL
64275: AND
64276: IFFALSE 64286
// result := true end ;
64278: LD_ADDR_VAR 0 3
64282: PUSH
64283: LD_INT 1
64285: ST_TO_ADDR
// end ;
64286: LD_VAR 0 3
64290: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64291: LD_INT 0
64293: PPUSH
// result := false ;
64294: LD_ADDR_VAR 0 4
64298: PUSH
64299: LD_INT 0
64301: ST_TO_ADDR
// if GetTaskList ( unit ) then
64302: LD_VAR 0 1
64306: PPUSH
64307: CALL_OW 437
64311: IFFALSE 64398
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64313: LD_STRING M
64315: PUSH
64316: LD_VAR 0 1
64320: PPUSH
64321: CALL_OW 437
64325: PUSH
64326: LD_INT 1
64328: ARRAY
64329: PUSH
64330: LD_INT 1
64332: ARRAY
64333: EQUAL
64334: IFFALSE 64361
64336: PUSH
64337: LD_VAR 0 2
64341: PUSH
64342: LD_VAR 0 1
64346: PPUSH
64347: CALL_OW 437
64351: PUSH
64352: LD_INT 1
64354: ARRAY
64355: PUSH
64356: LD_INT 2
64358: ARRAY
64359: EQUAL
64360: AND
64361: IFFALSE 64388
64363: PUSH
64364: LD_VAR 0 3
64368: PUSH
64369: LD_VAR 0 1
64373: PPUSH
64374: CALL_OW 437
64378: PUSH
64379: LD_INT 1
64381: ARRAY
64382: PUSH
64383: LD_INT 3
64385: ARRAY
64386: EQUAL
64387: AND
64388: IFFALSE 64398
// result := true ;
64390: LD_ADDR_VAR 0 4
64394: PUSH
64395: LD_INT 1
64397: ST_TO_ADDR
// end ; end ;
64398: LD_VAR 0 4
64402: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64403: LD_INT 0
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
// if not unit or not area then
64409: LD_VAR 0 1
64413: NOT
64414: IFTRUE 64423
64416: PUSH
64417: LD_VAR 0 2
64421: NOT
64422: OR
64423: IFFALSE 64427
// exit ;
64425: GO 64603
// tmp := AreaToList ( area , i ) ;
64427: LD_ADDR_VAR 0 6
64431: PUSH
64432: LD_VAR 0 2
64436: PPUSH
64437: LD_VAR 0 5
64441: PPUSH
64442: CALL_OW 517
64446: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64447: LD_ADDR_VAR 0 5
64451: PUSH
64452: DOUBLE
64453: LD_INT 1
64455: DEC
64456: ST_TO_ADDR
64457: LD_VAR 0 6
64461: PUSH
64462: LD_INT 1
64464: ARRAY
64465: PUSH
64466: FOR_TO
64467: IFFALSE 64601
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64469: LD_ADDR_VAR 0 7
64473: PUSH
64474: LD_VAR 0 6
64478: PUSH
64479: LD_INT 1
64481: ARRAY
64482: PUSH
64483: LD_VAR 0 5
64487: ARRAY
64488: PUSH
64489: LD_VAR 0 6
64493: PUSH
64494: LD_INT 2
64496: ARRAY
64497: PUSH
64498: LD_VAR 0 5
64502: ARRAY
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64508: LD_INT 92
64510: PUSH
64511: LD_VAR 0 7
64515: PUSH
64516: LD_INT 1
64518: ARRAY
64519: PUSH
64520: LD_VAR 0 7
64524: PUSH
64525: LD_INT 2
64527: ARRAY
64528: PUSH
64529: LD_INT 2
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: PPUSH
64538: CALL_OW 69
64542: PUSH
64543: LD_INT 0
64545: EQUAL
64546: IFFALSE 64599
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64548: LD_VAR 0 1
64552: PPUSH
64553: LD_VAR 0 7
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: PPUSH
64562: LD_VAR 0 7
64566: PUSH
64567: LD_INT 2
64569: ARRAY
64570: PPUSH
64571: LD_VAR 0 3
64575: PPUSH
64576: CALL_OW 48
// result := IsPlaced ( unit ) ;
64580: LD_ADDR_VAR 0 4
64584: PUSH
64585: LD_VAR 0 1
64589: PPUSH
64590: CALL_OW 305
64594: ST_TO_ADDR
// exit ;
64595: POP
64596: POP
64597: GO 64603
// end ; end ;
64599: GO 64466
64601: POP
64602: POP
// end ;
64603: LD_VAR 0 4
64607: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64608: LD_INT 0
64610: PPUSH
64611: PPUSH
64612: PPUSH
// if not side or side > 8 then
64613: LD_VAR 0 1
64617: NOT
64618: IFTRUE 64630
64620: PUSH
64621: LD_VAR 0 1
64625: PUSH
64626: LD_INT 8
64628: GREATER
64629: OR
64630: IFFALSE 64634
// exit ;
64632: GO 64821
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64634: LD_ADDR_VAR 0 4
64638: PUSH
64639: LD_INT 22
64641: PUSH
64642: LD_VAR 0 1
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 21
64653: PUSH
64654: LD_INT 3
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PPUSH
64665: CALL_OW 69
64669: ST_TO_ADDR
// if not tmp then
64670: LD_VAR 0 4
64674: NOT
64675: IFFALSE 64679
// exit ;
64677: GO 64821
// enable_addtolog := true ;
64679: LD_ADDR_OWVAR 81
64683: PUSH
64684: LD_INT 1
64686: ST_TO_ADDR
// AddToLog ( [ ) ;
64687: LD_STRING [
64689: PPUSH
64690: CALL_OW 561
// for i in tmp do
64694: LD_ADDR_VAR 0 3
64698: PUSH
64699: LD_VAR 0 4
64703: PUSH
64704: FOR_IN
64705: IFFALSE 64812
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64707: LD_STRING [
64709: PUSH
64710: LD_VAR 0 3
64714: PPUSH
64715: CALL_OW 266
64719: STR
64720: PUSH
64721: LD_STRING , 
64723: STR
64724: PUSH
64725: LD_VAR 0 3
64729: PPUSH
64730: CALL_OW 250
64734: STR
64735: PUSH
64736: LD_STRING , 
64738: STR
64739: PUSH
64740: LD_VAR 0 3
64744: PPUSH
64745: CALL_OW 251
64749: STR
64750: PUSH
64751: LD_STRING , 
64753: STR
64754: PUSH
64755: LD_VAR 0 3
64759: PPUSH
64760: CALL_OW 254
64764: STR
64765: PUSH
64766: LD_STRING , 
64768: STR
64769: PUSH
64770: LD_VAR 0 3
64774: PPUSH
64775: LD_INT 1
64777: PPUSH
64778: CALL_OW 268
64782: STR
64783: PUSH
64784: LD_STRING , 
64786: STR
64787: PUSH
64788: LD_VAR 0 3
64792: PPUSH
64793: LD_INT 2
64795: PPUSH
64796: CALL_OW 268
64800: STR
64801: PUSH
64802: LD_STRING ],
64804: STR
64805: PPUSH
64806: CALL_OW 561
// end ;
64810: GO 64704
64812: POP
64813: POP
// AddToLog ( ]; ) ;
64814: LD_STRING ];
64816: PPUSH
64817: CALL_OW 561
// end ;
64821: LD_VAR 0 2
64825: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64826: LD_INT 0
64828: PPUSH
64829: PPUSH
64830: PPUSH
64831: PPUSH
64832: PPUSH
// if not area or not rate or not max then
64833: LD_VAR 0 1
64837: NOT
64838: IFTRUE 64847
64840: PUSH
64841: LD_VAR 0 2
64845: NOT
64846: OR
64847: IFTRUE 64856
64849: PUSH
64850: LD_VAR 0 4
64854: NOT
64855: OR
64856: IFFALSE 64860
// exit ;
64858: GO 65049
// while 1 do
64860: LD_INT 1
64862: IFFALSE 65049
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64864: LD_ADDR_VAR 0 9
64868: PUSH
64869: LD_VAR 0 1
64873: PPUSH
64874: LD_INT 1
64876: PPUSH
64877: CALL_OW 287
64881: PUSH
64882: LD_INT 10
64884: MUL
64885: ST_TO_ADDR
// r := rate / 10 ;
64886: LD_ADDR_VAR 0 7
64890: PUSH
64891: LD_VAR 0 2
64895: PUSH
64896: LD_INT 10
64898: DIVREAL
64899: ST_TO_ADDR
// time := 1 1$00 ;
64900: LD_ADDR_VAR 0 8
64904: PUSH
64905: LD_INT 2100
64907: ST_TO_ADDR
// if amount < min then
64908: LD_VAR 0 9
64912: PUSH
64913: LD_VAR 0 3
64917: LESS
64918: IFFALSE 64936
// r := r * 2 else
64920: LD_ADDR_VAR 0 7
64924: PUSH
64925: LD_VAR 0 7
64929: PUSH
64930: LD_INT 2
64932: MUL
64933: ST_TO_ADDR
64934: GO 64962
// if amount > max then
64936: LD_VAR 0 9
64940: PUSH
64941: LD_VAR 0 4
64945: GREATER
64946: IFFALSE 64962
// r := r / 2 ;
64948: LD_ADDR_VAR 0 7
64952: PUSH
64953: LD_VAR 0 7
64957: PUSH
64958: LD_INT 2
64960: DIVREAL
64961: ST_TO_ADDR
// time := time / r ;
64962: LD_ADDR_VAR 0 8
64966: PUSH
64967: LD_VAR 0 8
64971: PUSH
64972: LD_VAR 0 7
64976: DIVREAL
64977: ST_TO_ADDR
// if time < 0 then
64978: LD_VAR 0 8
64982: PUSH
64983: LD_INT 0
64985: LESS
64986: IFFALSE 65003
// time := time * - 1 ;
64988: LD_ADDR_VAR 0 8
64992: PUSH
64993: LD_VAR 0 8
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: MUL
65002: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65003: LD_VAR 0 8
65007: PUSH
65008: LD_INT 35
65010: PPUSH
65011: LD_INT 875
65013: PPUSH
65014: CALL_OW 12
65018: PLUS
65019: PPUSH
65020: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65024: LD_INT 1
65026: PPUSH
65027: LD_INT 5
65029: PPUSH
65030: CALL_OW 12
65034: PPUSH
65035: LD_VAR 0 1
65039: PPUSH
65040: LD_INT 1
65042: PPUSH
65043: CALL_OW 55
// end ;
65047: GO 64860
// end ;
65049: LD_VAR 0 5
65053: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65054: LD_INT 0
65056: PPUSH
65057: PPUSH
65058: PPUSH
65059: PPUSH
65060: PPUSH
65061: PPUSH
65062: PPUSH
65063: PPUSH
// if not turrets or not factories then
65064: LD_VAR 0 1
65068: NOT
65069: IFTRUE 65078
65071: PUSH
65072: LD_VAR 0 2
65076: NOT
65077: OR
65078: IFFALSE 65082
// exit ;
65080: GO 65389
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65082: LD_ADDR_VAR 0 10
65086: PUSH
65087: LD_INT 5
65089: PUSH
65090: LD_INT 6
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: LD_INT 4
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: LD_INT 5
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 24
65124: PUSH
65125: LD_INT 25
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 23
65134: PUSH
65135: LD_INT 27
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 42
65148: PUSH
65149: LD_INT 43
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 44
65158: PUSH
65159: LD_INT 46
65161: PUSH
65162: EMPTY
65163: LIST
65164: LIST
65165: PUSH
65166: LD_INT 45
65168: PUSH
65169: LD_INT 47
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: LIST
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: ST_TO_ADDR
// result := [ ] ;
65186: LD_ADDR_VAR 0 3
65190: PUSH
65191: EMPTY
65192: ST_TO_ADDR
// for i in turrets do
65193: LD_ADDR_VAR 0 4
65197: PUSH
65198: LD_VAR 0 1
65202: PUSH
65203: FOR_IN
65204: IFFALSE 65387
// begin nat := GetNation ( i ) ;
65206: LD_ADDR_VAR 0 7
65210: PUSH
65211: LD_VAR 0 4
65215: PPUSH
65216: CALL_OW 248
65220: ST_TO_ADDR
// weapon := 0 ;
65221: LD_ADDR_VAR 0 8
65225: PUSH
65226: LD_INT 0
65228: ST_TO_ADDR
// if not nat then
65229: LD_VAR 0 7
65233: NOT
65234: IFFALSE 65238
// continue ;
65236: GO 65203
// for j in list [ nat ] do
65238: LD_ADDR_VAR 0 5
65242: PUSH
65243: LD_VAR 0 10
65247: PUSH
65248: LD_VAR 0 7
65252: ARRAY
65253: PUSH
65254: FOR_IN
65255: IFFALSE 65296
// if GetBWeapon ( i ) = j [ 1 ] then
65257: LD_VAR 0 4
65261: PPUSH
65262: CALL_OW 269
65266: PUSH
65267: LD_VAR 0 5
65271: PUSH
65272: LD_INT 1
65274: ARRAY
65275: EQUAL
65276: IFFALSE 65294
// begin weapon := j [ 2 ] ;
65278: LD_ADDR_VAR 0 8
65282: PUSH
65283: LD_VAR 0 5
65287: PUSH
65288: LD_INT 2
65290: ARRAY
65291: ST_TO_ADDR
// break ;
65292: GO 65296
// end ;
65294: GO 65254
65296: POP
65297: POP
// if not weapon then
65298: LD_VAR 0 8
65302: NOT
65303: IFFALSE 65307
// continue ;
65305: GO 65203
// for k in factories do
65307: LD_ADDR_VAR 0 6
65311: PUSH
65312: LD_VAR 0 2
65316: PUSH
65317: FOR_IN
65318: IFFALSE 65383
// begin weapons := AvailableWeaponList ( k ) ;
65320: LD_ADDR_VAR 0 9
65324: PUSH
65325: LD_VAR 0 6
65329: PPUSH
65330: CALL_OW 478
65334: ST_TO_ADDR
// if not weapons then
65335: LD_VAR 0 9
65339: NOT
65340: IFFALSE 65344
// continue ;
65342: GO 65317
// if weapon in weapons then
65344: LD_VAR 0 8
65348: PUSH
65349: LD_VAR 0 9
65353: IN
65354: IFFALSE 65381
// begin result := [ i , weapon ] ;
65356: LD_ADDR_VAR 0 3
65360: PUSH
65361: LD_VAR 0 4
65365: PUSH
65366: LD_VAR 0 8
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: ST_TO_ADDR
// exit ;
65375: POP
65376: POP
65377: POP
65378: POP
65379: GO 65389
// end ; end ;
65381: GO 65317
65383: POP
65384: POP
// end ;
65385: GO 65203
65387: POP
65388: POP
// end ;
65389: LD_VAR 0 3
65393: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65394: LD_INT 0
65396: PPUSH
// if not side or side > 8 then
65397: LD_VAR 0 3
65401: NOT
65402: IFTRUE 65414
65404: PUSH
65405: LD_VAR 0 3
65409: PUSH
65410: LD_INT 8
65412: GREATER
65413: OR
65414: IFFALSE 65418
// exit ;
65416: GO 65477
// if not range then
65418: LD_VAR 0 4
65422: NOT
65423: IFFALSE 65434
// range := - 12 ;
65425: LD_ADDR_VAR 0 4
65429: PUSH
65430: LD_INT 12
65432: NEG
65433: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65434: LD_VAR 0 1
65438: PPUSH
65439: LD_VAR 0 2
65443: PPUSH
65444: LD_VAR 0 3
65448: PPUSH
65449: LD_VAR 0 4
65453: PPUSH
65454: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65458: LD_VAR 0 1
65462: PPUSH
65463: LD_VAR 0 2
65467: PPUSH
65468: LD_VAR 0 3
65472: PPUSH
65473: CALL_OW 331
// end ;
65477: LD_VAR 0 5
65481: RET
// export function Video ( mode ) ; begin
65482: LD_INT 0
65484: PPUSH
// ingame_video = mode ;
65485: LD_ADDR_OWVAR 52
65489: PUSH
65490: LD_VAR 0 1
65494: ST_TO_ADDR
// interface_hidden = mode ;
65495: LD_ADDR_OWVAR 54
65499: PUSH
65500: LD_VAR 0 1
65504: ST_TO_ADDR
// end ;
65505: LD_VAR 0 2
65509: RET
// export function Join ( array , element ) ; begin
65510: LD_INT 0
65512: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65513: LD_ADDR_VAR 0 3
65517: PUSH
65518: LD_VAR 0 1
65522: PPUSH
65523: LD_VAR 0 1
65527: PUSH
65528: LD_INT 1
65530: PLUS
65531: PPUSH
65532: LD_VAR 0 2
65536: PPUSH
65537: CALL_OW 1
65541: ST_TO_ADDR
// end ;
65542: LD_VAR 0 3
65546: RET
// export function JoinUnion ( array , element ) ; begin
65547: LD_INT 0
65549: PPUSH
// result := array union element ;
65550: LD_ADDR_VAR 0 3
65554: PUSH
65555: LD_VAR 0 1
65559: PUSH
65560: LD_VAR 0 2
65564: UNION
65565: ST_TO_ADDR
// end ;
65566: LD_VAR 0 3
65570: RET
// export function GetBehemoths ( side ) ; begin
65571: LD_INT 0
65573: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65574: LD_ADDR_VAR 0 2
65578: PUSH
65579: LD_INT 22
65581: PUSH
65582: LD_VAR 0 1
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 31
65593: PUSH
65594: LD_INT 25
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PPUSH
65605: CALL_OW 69
65609: ST_TO_ADDR
// end ;
65610: LD_VAR 0 2
65614: RET
// export function Shuffle ( array ) ; var i , index ; begin
65615: LD_INT 0
65617: PPUSH
65618: PPUSH
65619: PPUSH
// result := [ ] ;
65620: LD_ADDR_VAR 0 2
65624: PUSH
65625: EMPTY
65626: ST_TO_ADDR
// if not array then
65627: LD_VAR 0 1
65631: NOT
65632: IFFALSE 65636
// exit ;
65634: GO 65735
// Randomize ;
65636: CALL_OW 10
// for i = array downto 1 do
65640: LD_ADDR_VAR 0 3
65644: PUSH
65645: DOUBLE
65646: LD_VAR 0 1
65650: INC
65651: ST_TO_ADDR
65652: LD_INT 1
65654: PUSH
65655: FOR_DOWNTO
65656: IFFALSE 65733
// begin index := rand ( 1 , array ) ;
65658: LD_ADDR_VAR 0 4
65662: PUSH
65663: LD_INT 1
65665: PPUSH
65666: LD_VAR 0 1
65670: PPUSH
65671: CALL_OW 12
65675: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65676: LD_ADDR_VAR 0 2
65680: PUSH
65681: LD_VAR 0 2
65685: PPUSH
65686: LD_VAR 0 2
65690: PUSH
65691: LD_INT 1
65693: PLUS
65694: PPUSH
65695: LD_VAR 0 1
65699: PUSH
65700: LD_VAR 0 4
65704: ARRAY
65705: PPUSH
65706: CALL_OW 2
65710: ST_TO_ADDR
// array := Delete ( array , index ) ;
65711: LD_ADDR_VAR 0 1
65715: PUSH
65716: LD_VAR 0 1
65720: PPUSH
65721: LD_VAR 0 4
65725: PPUSH
65726: CALL_OW 3
65730: ST_TO_ADDR
// end ;
65731: GO 65655
65733: POP
65734: POP
// end ;
65735: LD_VAR 0 2
65739: RET
// export function GetBaseMaterials ( base ) ; begin
65740: LD_INT 0
65742: PPUSH
// result := [ 0 , 0 , 0 ] ;
65743: LD_ADDR_VAR 0 2
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: LD_INT 0
65753: PUSH
65754: LD_INT 0
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// if not base then
65762: LD_VAR 0 1
65766: NOT
65767: IFFALSE 65771
// exit ;
65769: GO 65820
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65771: LD_ADDR_VAR 0 2
65775: PUSH
65776: LD_VAR 0 1
65780: PPUSH
65781: LD_INT 1
65783: PPUSH
65784: CALL_OW 275
65788: PUSH
65789: LD_VAR 0 1
65793: PPUSH
65794: LD_INT 2
65796: PPUSH
65797: CALL_OW 275
65801: PUSH
65802: LD_VAR 0 1
65806: PPUSH
65807: LD_INT 3
65809: PPUSH
65810: CALL_OW 275
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: LIST
65819: ST_TO_ADDR
// end ;
65820: LD_VAR 0 2
65824: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65825: LD_INT 0
65827: PPUSH
65828: PPUSH
// result := array ;
65829: LD_ADDR_VAR 0 3
65833: PUSH
65834: LD_VAR 0 1
65838: ST_TO_ADDR
// if size >= result then
65839: LD_VAR 0 2
65843: PUSH
65844: LD_VAR 0 3
65848: GREATEREQUAL
65849: IFFALSE 65853
// exit ;
65851: GO 65903
// if size then
65853: LD_VAR 0 2
65857: IFFALSE 65903
// for i := array downto size do
65859: LD_ADDR_VAR 0 4
65863: PUSH
65864: DOUBLE
65865: LD_VAR 0 1
65869: INC
65870: ST_TO_ADDR
65871: LD_VAR 0 2
65875: PUSH
65876: FOR_DOWNTO
65877: IFFALSE 65901
// result := Delete ( result , result ) ;
65879: LD_ADDR_VAR 0 3
65883: PUSH
65884: LD_VAR 0 3
65888: PPUSH
65889: LD_VAR 0 3
65893: PPUSH
65894: CALL_OW 3
65898: ST_TO_ADDR
65899: GO 65876
65901: POP
65902: POP
// end ;
65903: LD_VAR 0 3
65907: RET
// export function ComExit ( unit ) ; var tmp ; begin
65908: LD_INT 0
65910: PPUSH
65911: PPUSH
// if not IsInUnit ( unit ) then
65912: LD_VAR 0 1
65916: PPUSH
65917: CALL_OW 310
65921: NOT
65922: IFFALSE 65926
// exit ;
65924: GO 65986
// tmp := IsInUnit ( unit ) ;
65926: LD_ADDR_VAR 0 3
65930: PUSH
65931: LD_VAR 0 1
65935: PPUSH
65936: CALL_OW 310
65940: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65941: LD_VAR 0 3
65945: PPUSH
65946: CALL_OW 247
65950: PUSH
65951: LD_INT 2
65953: EQUAL
65954: IFFALSE 65967
// ComExitVehicle ( unit ) else
65956: LD_VAR 0 1
65960: PPUSH
65961: CALL_OW 121
65965: GO 65976
// ComExitBuilding ( unit ) ;
65967: LD_VAR 0 1
65971: PPUSH
65972: CALL_OW 122
// result := tmp ;
65976: LD_ADDR_VAR 0 2
65980: PUSH
65981: LD_VAR 0 3
65985: ST_TO_ADDR
// end ;
65986: LD_VAR 0 2
65990: RET
// export function ComExitAll ( units ) ; var i ; begin
65991: LD_INT 0
65993: PPUSH
65994: PPUSH
// if not units then
65995: LD_VAR 0 1
65999: NOT
66000: IFFALSE 66004
// exit ;
66002: GO 66030
// for i in units do
66004: LD_ADDR_VAR 0 3
66008: PUSH
66009: LD_VAR 0 1
66013: PUSH
66014: FOR_IN
66015: IFFALSE 66028
// ComExit ( i ) ;
66017: LD_VAR 0 3
66021: PPUSH
66022: CALL 65908 0 1
66026: GO 66014
66028: POP
66029: POP
// end ;
66030: LD_VAR 0 2
66034: RET
// export function ResetHc ; begin
66035: LD_INT 0
66037: PPUSH
// InitHc ;
66038: CALL_OW 19
// hc_importance := 0 ;
66042: LD_ADDR_OWVAR 32
66046: PUSH
66047: LD_INT 0
66049: ST_TO_ADDR
// end ;
66050: LD_VAR 0 1
66054: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66055: LD_INT 0
66057: PPUSH
66058: PPUSH
66059: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66060: LD_ADDR_VAR 0 6
66064: PUSH
66065: LD_VAR 0 1
66069: PUSH
66070: LD_VAR 0 3
66074: PLUS
66075: PUSH
66076: LD_INT 2
66078: DIV
66079: ST_TO_ADDR
// if _x < 0 then
66080: LD_VAR 0 6
66084: PUSH
66085: LD_INT 0
66087: LESS
66088: IFFALSE 66105
// _x := _x * - 1 ;
66090: LD_ADDR_VAR 0 6
66094: PUSH
66095: LD_VAR 0 6
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: MUL
66104: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66105: LD_ADDR_VAR 0 7
66109: PUSH
66110: LD_VAR 0 2
66114: PUSH
66115: LD_VAR 0 4
66119: PLUS
66120: PUSH
66121: LD_INT 2
66123: DIV
66124: ST_TO_ADDR
// if _y < 0 then
66125: LD_VAR 0 7
66129: PUSH
66130: LD_INT 0
66132: LESS
66133: IFFALSE 66150
// _y := _y * - 1 ;
66135: LD_ADDR_VAR 0 7
66139: PUSH
66140: LD_VAR 0 7
66144: PUSH
66145: LD_INT 1
66147: NEG
66148: MUL
66149: ST_TO_ADDR
// result := [ _x , _y ] ;
66150: LD_ADDR_VAR 0 5
66154: PUSH
66155: LD_VAR 0 6
66159: PUSH
66160: LD_VAR 0 7
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: ST_TO_ADDR
// end ;
66169: LD_VAR 0 5
66173: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66174: LD_INT 0
66176: PPUSH
66177: PPUSH
66178: PPUSH
66179: PPUSH
// task := GetTaskList ( unit ) ;
66180: LD_ADDR_VAR 0 7
66184: PUSH
66185: LD_VAR 0 1
66189: PPUSH
66190: CALL_OW 437
66194: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66195: LD_VAR 0 7
66199: NOT
66200: IFFALSE 66219
66202: PUSH
66203: LD_VAR 0 1
66207: PPUSH
66208: LD_VAR 0 2
66212: PPUSH
66213: CALL_OW 308
66217: NOT
66218: AND
66219: IFFALSE 66223
// exit ;
66221: GO 66341
// if IsInArea ( unit , area ) then
66223: LD_VAR 0 1
66227: PPUSH
66228: LD_VAR 0 2
66232: PPUSH
66233: CALL_OW 308
66237: IFFALSE 66255
// begin ComMoveToArea ( unit , goAway ) ;
66239: LD_VAR 0 1
66243: PPUSH
66244: LD_VAR 0 3
66248: PPUSH
66249: CALL_OW 113
// exit ;
66253: GO 66341
// end ; if task [ 1 ] [ 1 ] <> M then
66255: LD_VAR 0 7
66259: PUSH
66260: LD_INT 1
66262: ARRAY
66263: PUSH
66264: LD_INT 1
66266: ARRAY
66267: PUSH
66268: LD_STRING M
66270: NONEQUAL
66271: IFFALSE 66275
// exit ;
66273: GO 66341
// x := task [ 1 ] [ 2 ] ;
66275: LD_ADDR_VAR 0 5
66279: PUSH
66280: LD_VAR 0 7
66284: PUSH
66285: LD_INT 1
66287: ARRAY
66288: PUSH
66289: LD_INT 2
66291: ARRAY
66292: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66293: LD_ADDR_VAR 0 6
66297: PUSH
66298: LD_VAR 0 7
66302: PUSH
66303: LD_INT 1
66305: ARRAY
66306: PUSH
66307: LD_INT 3
66309: ARRAY
66310: ST_TO_ADDR
// if InArea ( x , y , area ) then
66311: LD_VAR 0 5
66315: PPUSH
66316: LD_VAR 0 6
66320: PPUSH
66321: LD_VAR 0 2
66325: PPUSH
66326: CALL_OW 309
66330: IFFALSE 66341
// ComStop ( unit ) ;
66332: LD_VAR 0 1
66336: PPUSH
66337: CALL_OW 141
// end ;
66341: LD_VAR 0 4
66345: RET
// export function Abs ( value ) ; begin
66346: LD_INT 0
66348: PPUSH
// result := value ;
66349: LD_ADDR_VAR 0 2
66353: PUSH
66354: LD_VAR 0 1
66358: ST_TO_ADDR
// if value < 0 then
66359: LD_VAR 0 1
66363: PUSH
66364: LD_INT 0
66366: LESS
66367: IFFALSE 66384
// result := value * - 1 ;
66369: LD_ADDR_VAR 0 2
66373: PUSH
66374: LD_VAR 0 1
66378: PUSH
66379: LD_INT 1
66381: NEG
66382: MUL
66383: ST_TO_ADDR
// end ;
66384: LD_VAR 0 2
66388: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66389: LD_INT 0
66391: PPUSH
66392: PPUSH
66393: PPUSH
66394: PPUSH
66395: PPUSH
66396: PPUSH
66397: PPUSH
66398: PPUSH
// if not unit or not building then
66399: LD_VAR 0 1
66403: NOT
66404: IFTRUE 66413
66406: PUSH
66407: LD_VAR 0 2
66411: NOT
66412: OR
66413: IFFALSE 66417
// exit ;
66415: GO 66645
// x := GetX ( building ) ;
66417: LD_ADDR_VAR 0 4
66421: PUSH
66422: LD_VAR 0 2
66426: PPUSH
66427: CALL_OW 250
66431: ST_TO_ADDR
// y := GetY ( building ) ;
66432: LD_ADDR_VAR 0 6
66436: PUSH
66437: LD_VAR 0 2
66441: PPUSH
66442: CALL_OW 251
66446: ST_TO_ADDR
// d := GetDir ( building ) ;
66447: LD_ADDR_VAR 0 8
66451: PUSH
66452: LD_VAR 0 2
66456: PPUSH
66457: CALL_OW 254
66461: ST_TO_ADDR
// r := 4 ;
66462: LD_ADDR_VAR 0 9
66466: PUSH
66467: LD_INT 4
66469: ST_TO_ADDR
// for i := 1 to 5 do
66470: LD_ADDR_VAR 0 10
66474: PUSH
66475: DOUBLE
66476: LD_INT 1
66478: DEC
66479: ST_TO_ADDR
66480: LD_INT 5
66482: PUSH
66483: FOR_TO
66484: IFFALSE 66643
// begin _x := ShiftX ( x , d , r + i ) ;
66486: LD_ADDR_VAR 0 5
66490: PUSH
66491: LD_VAR 0 4
66495: PPUSH
66496: LD_VAR 0 8
66500: PPUSH
66501: LD_VAR 0 9
66505: PUSH
66506: LD_VAR 0 10
66510: PLUS
66511: PPUSH
66512: CALL_OW 272
66516: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66517: LD_ADDR_VAR 0 7
66521: PUSH
66522: LD_VAR 0 6
66526: PPUSH
66527: LD_VAR 0 8
66531: PPUSH
66532: LD_VAR 0 9
66536: PUSH
66537: LD_VAR 0 10
66541: PLUS
66542: PPUSH
66543: CALL_OW 273
66547: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66548: LD_VAR 0 5
66552: PPUSH
66553: LD_VAR 0 7
66557: PPUSH
66558: CALL_OW 488
66562: IFFALSE 66597
66564: PUSH
66565: LD_VAR 0 5
66569: PPUSH
66570: LD_VAR 0 7
66574: PPUSH
66575: CALL_OW 428
66579: PPUSH
66580: CALL_OW 247
66584: PUSH
66585: LD_INT 3
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: IN
66595: NOT
66596: AND
66597: IFFALSE 66641
// begin ComMoveXY ( unit , _x , _y ) ;
66599: LD_VAR 0 1
66603: PPUSH
66604: LD_VAR 0 5
66608: PPUSH
66609: LD_VAR 0 7
66613: PPUSH
66614: CALL_OW 111
// result := [ _x , _y ] ;
66618: LD_ADDR_VAR 0 3
66622: PUSH
66623: LD_VAR 0 5
66627: PUSH
66628: LD_VAR 0 7
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: ST_TO_ADDR
// exit ;
66637: POP
66638: POP
66639: GO 66645
// end ; end ;
66641: GO 66483
66643: POP
66644: POP
// end ;
66645: LD_VAR 0 3
66649: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66650: LD_INT 0
66652: PPUSH
66653: PPUSH
66654: PPUSH
// result := 0 ;
66655: LD_ADDR_VAR 0 3
66659: PUSH
66660: LD_INT 0
66662: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66663: LD_VAR 0 1
66667: PUSH
66668: LD_INT 0
66670: LESS
66671: IFTRUE 66683
66673: PUSH
66674: LD_VAR 0 1
66678: PUSH
66679: LD_INT 8
66681: GREATER
66682: OR
66683: IFTRUE 66695
66685: PUSH
66686: LD_VAR 0 2
66690: PUSH
66691: LD_INT 0
66693: LESS
66694: OR
66695: IFTRUE 66707
66697: PUSH
66698: LD_VAR 0 2
66702: PUSH
66703: LD_INT 8
66705: GREATER
66706: OR
66707: IFFALSE 66711
// exit ;
66709: GO 66786
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66711: LD_ADDR_VAR 0 4
66715: PUSH
66716: LD_INT 22
66718: PUSH
66719: LD_VAR 0 2
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PPUSH
66728: CALL_OW 69
66732: PUSH
66733: FOR_IN
66734: IFFALSE 66784
// begin un := UnitShoot ( i ) ;
66736: LD_ADDR_VAR 0 5
66740: PUSH
66741: LD_VAR 0 4
66745: PPUSH
66746: CALL_OW 504
66750: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66751: LD_VAR 0 5
66755: PPUSH
66756: CALL_OW 255
66760: PUSH
66761: LD_VAR 0 1
66765: EQUAL
66766: IFFALSE 66782
// begin result := un ;
66768: LD_ADDR_VAR 0 3
66772: PUSH
66773: LD_VAR 0 5
66777: ST_TO_ADDR
// exit ;
66778: POP
66779: POP
66780: GO 66786
// end ; end ;
66782: GO 66733
66784: POP
66785: POP
// end ;
66786: LD_VAR 0 3
66790: RET
// export function GetCargoBay ( units ) ; begin
66791: LD_INT 0
66793: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66794: LD_ADDR_VAR 0 2
66798: PUSH
66799: LD_VAR 0 1
66803: PPUSH
66804: LD_INT 2
66806: PUSH
66807: LD_INT 34
66809: PUSH
66810: LD_INT 12
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 34
66819: PUSH
66820: LD_INT 51
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 34
66829: PUSH
66830: LD_INT 32
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 34
66839: PUSH
66840: LD_INT 89
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: PPUSH
66854: CALL_OW 72
66858: ST_TO_ADDR
// end ;
66859: LD_VAR 0 2
66863: RET
// export function Negate ( value ) ; begin
66864: LD_INT 0
66866: PPUSH
// result := not value ;
66867: LD_ADDR_VAR 0 2
66871: PUSH
66872: LD_VAR 0 1
66876: NOT
66877: ST_TO_ADDR
// end ;
66878: LD_VAR 0 2
66882: RET
// export function Inc ( value ) ; begin
66883: LD_INT 0
66885: PPUSH
// result := value + 1 ;
66886: LD_ADDR_VAR 0 2
66890: PUSH
66891: LD_VAR 0 1
66895: PUSH
66896: LD_INT 1
66898: PLUS
66899: ST_TO_ADDR
// end ;
66900: LD_VAR 0 2
66904: RET
// export function Dec ( value ) ; begin
66905: LD_INT 0
66907: PPUSH
// result := value - 1 ;
66908: LD_ADDR_VAR 0 2
66912: PUSH
66913: LD_VAR 0 1
66917: PUSH
66918: LD_INT 1
66920: MINUS
66921: ST_TO_ADDR
// end ;
66922: LD_VAR 0 2
66926: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66927: LD_INT 0
66929: PPUSH
66930: PPUSH
66931: PPUSH
66932: PPUSH
66933: PPUSH
66934: PPUSH
66935: PPUSH
66936: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66937: LD_VAR 0 1
66941: PPUSH
66942: LD_VAR 0 2
66946: PPUSH
66947: CALL_OW 488
66951: NOT
66952: IFTRUE 66971
66954: PUSH
66955: LD_VAR 0 3
66959: PPUSH
66960: LD_VAR 0 4
66964: PPUSH
66965: CALL_OW 488
66969: NOT
66970: OR
66971: IFFALSE 66984
// begin result := - 1 ;
66973: LD_ADDR_VAR 0 5
66977: PUSH
66978: LD_INT 1
66980: NEG
66981: ST_TO_ADDR
// exit ;
66982: GO 67219
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66984: LD_ADDR_VAR 0 12
66988: PUSH
66989: LD_VAR 0 1
66993: PPUSH
66994: LD_VAR 0 2
66998: PPUSH
66999: LD_VAR 0 3
67003: PPUSH
67004: LD_VAR 0 4
67008: PPUSH
67009: CALL 66055 0 4
67013: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67014: LD_ADDR_VAR 0 11
67018: PUSH
67019: LD_VAR 0 1
67023: PPUSH
67024: LD_VAR 0 2
67028: PPUSH
67029: LD_VAR 0 12
67033: PUSH
67034: LD_INT 1
67036: ARRAY
67037: PPUSH
67038: LD_VAR 0 12
67042: PUSH
67043: LD_INT 2
67045: ARRAY
67046: PPUSH
67047: CALL_OW 298
67051: ST_TO_ADDR
// distance := 9999 ;
67052: LD_ADDR_VAR 0 10
67056: PUSH
67057: LD_INT 9999
67059: ST_TO_ADDR
// for i := 0 to 5 do
67060: LD_ADDR_VAR 0 6
67064: PUSH
67065: DOUBLE
67066: LD_INT 0
67068: DEC
67069: ST_TO_ADDR
67070: LD_INT 5
67072: PUSH
67073: FOR_TO
67074: IFFALSE 67217
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67076: LD_ADDR_VAR 0 7
67080: PUSH
67081: LD_VAR 0 1
67085: PPUSH
67086: LD_VAR 0 6
67090: PPUSH
67091: LD_VAR 0 11
67095: PPUSH
67096: CALL_OW 272
67100: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67101: LD_ADDR_VAR 0 8
67105: PUSH
67106: LD_VAR 0 2
67110: PPUSH
67111: LD_VAR 0 6
67115: PPUSH
67116: LD_VAR 0 11
67120: PPUSH
67121: CALL_OW 273
67125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67126: LD_VAR 0 7
67130: PPUSH
67131: LD_VAR 0 8
67135: PPUSH
67136: CALL_OW 488
67140: NOT
67141: IFFALSE 67145
// continue ;
67143: GO 67073
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67145: LD_ADDR_VAR 0 9
67149: PUSH
67150: LD_VAR 0 12
67154: PUSH
67155: LD_INT 1
67157: ARRAY
67158: PPUSH
67159: LD_VAR 0 12
67163: PUSH
67164: LD_INT 2
67166: ARRAY
67167: PPUSH
67168: LD_VAR 0 7
67172: PPUSH
67173: LD_VAR 0 8
67177: PPUSH
67178: CALL_OW 298
67182: ST_TO_ADDR
// if tmp < distance then
67183: LD_VAR 0 9
67187: PUSH
67188: LD_VAR 0 10
67192: LESS
67193: IFFALSE 67215
// begin result := i ;
67195: LD_ADDR_VAR 0 5
67199: PUSH
67200: LD_VAR 0 6
67204: ST_TO_ADDR
// distance := tmp ;
67205: LD_ADDR_VAR 0 10
67209: PUSH
67210: LD_VAR 0 9
67214: ST_TO_ADDR
// end ; end ;
67215: GO 67073
67217: POP
67218: POP
// end ;
67219: LD_VAR 0 5
67223: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67224: LD_INT 0
67226: PPUSH
67227: PPUSH
// if not driver or not IsInUnit ( driver ) then
67228: LD_VAR 0 1
67232: NOT
67233: IFTRUE 67247
67235: PUSH
67236: LD_VAR 0 1
67240: PPUSH
67241: CALL_OW 310
67245: NOT
67246: OR
67247: IFFALSE 67251
// exit ;
67249: GO 67341
// vehicle := IsInUnit ( driver ) ;
67251: LD_ADDR_VAR 0 3
67255: PUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: CALL_OW 310
67265: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67266: LD_VAR 0 1
67270: PPUSH
67271: LD_STRING \
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: LD_INT 0
67285: PUSH
67286: LD_INT 0
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: LIST
67296: LIST
67297: LIST
67298: LIST
67299: LIST
67300: PUSH
67301: LD_STRING E
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: LD_VAR 0 3
67314: PUSH
67315: LD_INT 0
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 0
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PPUSH
67337: CALL_OW 446
// end ;
67341: LD_VAR 0 2
67345: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67346: LD_INT 0
67348: PPUSH
67349: PPUSH
// if not driver or not IsInUnit ( driver ) then
67350: LD_VAR 0 1
67354: NOT
67355: IFTRUE 67369
67357: PUSH
67358: LD_VAR 0 1
67362: PPUSH
67363: CALL_OW 310
67367: NOT
67368: OR
67369: IFFALSE 67373
// exit ;
67371: GO 67463
// vehicle := IsInUnit ( driver ) ;
67373: LD_ADDR_VAR 0 3
67377: PUSH
67378: LD_VAR 0 1
67382: PPUSH
67383: CALL_OW 310
67387: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67388: LD_VAR 0 1
67392: PPUSH
67393: LD_STRING \
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: LD_INT 0
67404: PUSH
67405: LD_INT 0
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: LIST
67422: PUSH
67423: LD_STRING E
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: LD_INT 0
67431: PUSH
67432: LD_VAR 0 3
67436: PUSH
67437: LD_INT 0
67439: PUSH
67440: LD_INT 0
67442: PUSH
67443: LD_INT 0
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PPUSH
67459: CALL_OW 447
// end ;
67463: LD_VAR 0 2
67467: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67468: LD_INT 0
67470: PPUSH
67471: PPUSH
67472: PPUSH
// tmp := [ ] ;
67473: LD_ADDR_VAR 0 5
67477: PUSH
67478: EMPTY
67479: ST_TO_ADDR
// for i in units do
67480: LD_ADDR_VAR 0 4
67484: PUSH
67485: LD_VAR 0 1
67489: PUSH
67490: FOR_IN
67491: IFFALSE 67529
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67493: LD_ADDR_VAR 0 5
67497: PUSH
67498: LD_VAR 0 5
67502: PPUSH
67503: LD_VAR 0 5
67507: PUSH
67508: LD_INT 1
67510: PLUS
67511: PPUSH
67512: LD_VAR 0 4
67516: PPUSH
67517: CALL_OW 256
67521: PPUSH
67522: CALL_OW 2
67526: ST_TO_ADDR
67527: GO 67490
67529: POP
67530: POP
// if not tmp then
67531: LD_VAR 0 5
67535: NOT
67536: IFFALSE 67540
// exit ;
67538: GO 67588
// if asc then
67540: LD_VAR 0 2
67544: IFFALSE 67568
// result := SortListByListAsc ( units , tmp ) else
67546: LD_ADDR_VAR 0 3
67550: PUSH
67551: LD_VAR 0 1
67555: PPUSH
67556: LD_VAR 0 5
67560: PPUSH
67561: CALL_OW 76
67565: ST_TO_ADDR
67566: GO 67588
// result := SortListByListDesc ( units , tmp ) ;
67568: LD_ADDR_VAR 0 3
67572: PUSH
67573: LD_VAR 0 1
67577: PPUSH
67578: LD_VAR 0 5
67582: PPUSH
67583: CALL_OW 77
67587: ST_TO_ADDR
// end ;
67588: LD_VAR 0 3
67592: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67593: LD_INT 0
67595: PPUSH
67596: PPUSH
// task := GetTaskList ( mech ) ;
67597: LD_ADDR_VAR 0 4
67601: PUSH
67602: LD_VAR 0 1
67606: PPUSH
67607: CALL_OW 437
67611: ST_TO_ADDR
// if not task then
67612: LD_VAR 0 4
67616: NOT
67617: IFFALSE 67621
// exit ;
67619: GO 67665
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67621: LD_ADDR_VAR 0 3
67625: PUSH
67626: LD_VAR 0 4
67630: PUSH
67631: LD_INT 1
67633: ARRAY
67634: PUSH
67635: LD_INT 1
67637: ARRAY
67638: PUSH
67639: LD_STRING r
67641: EQUAL
67642: IFFALSE 67664
67644: PUSH
67645: LD_VAR 0 4
67649: PUSH
67650: LD_INT 1
67652: ARRAY
67653: PUSH
67654: LD_INT 4
67656: ARRAY
67657: PUSH
67658: LD_VAR 0 2
67662: EQUAL
67663: AND
67664: ST_TO_ADDR
// end ;
67665: LD_VAR 0 3
67669: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67670: LD_INT 0
67672: PPUSH
// SetDir ( unit , d ) ;
67673: LD_VAR 0 1
67677: PPUSH
67678: LD_VAR 0 4
67682: PPUSH
67683: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
67687: LD_ADDR_VAR 0 6
67691: PUSH
67692: LD_VAR 0 1
67696: PPUSH
67697: LD_VAR 0 2
67701: PPUSH
67702: LD_VAR 0 3
67706: PPUSH
67707: LD_VAR 0 5
67711: PPUSH
67712: CALL_OW 48
67716: ST_TO_ADDR
// end ;
67717: LD_VAR 0 6
67721: RET
// export function ToNaturalNumber ( number ) ; begin
67722: LD_INT 0
67724: PPUSH
// result := number div 1 ;
67725: LD_ADDR_VAR 0 2
67729: PUSH
67730: LD_VAR 0 1
67734: PUSH
67735: LD_INT 1
67737: DIV
67738: ST_TO_ADDR
// if number < 0 then
67739: LD_VAR 0 1
67743: PUSH
67744: LD_INT 0
67746: LESS
67747: IFFALSE 67757
// result := 0 ;
67749: LD_ADDR_VAR 0 2
67753: PUSH
67754: LD_INT 0
67756: ST_TO_ADDR
// end ;
67757: LD_VAR 0 2
67761: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67762: LD_INT 0
67764: PPUSH
67765: PPUSH
67766: PPUSH
// if not buildings then
67767: LD_VAR 0 1
67771: NOT
67772: IFFALSE 67776
// exit ;
67774: GO 67891
// tmp := [ ] ;
67776: LD_ADDR_VAR 0 5
67780: PUSH
67781: EMPTY
67782: ST_TO_ADDR
// for b in buildings do
67783: LD_ADDR_VAR 0 4
67787: PUSH
67788: LD_VAR 0 1
67792: PUSH
67793: FOR_IN
67794: IFFALSE 67832
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67796: LD_ADDR_VAR 0 5
67800: PUSH
67801: LD_VAR 0 5
67805: PPUSH
67806: LD_VAR 0 5
67810: PUSH
67811: LD_INT 1
67813: PLUS
67814: PPUSH
67815: LD_VAR 0 4
67819: PPUSH
67820: CALL_OW 266
67824: PPUSH
67825: CALL_OW 1
67829: ST_TO_ADDR
67830: GO 67793
67832: POP
67833: POP
// if not tmp then
67834: LD_VAR 0 5
67838: NOT
67839: IFFALSE 67843
// exit ;
67841: GO 67891
// if asc then
67843: LD_VAR 0 2
67847: IFFALSE 67871
// result := SortListByListAsc ( buildings , tmp ) else
67849: LD_ADDR_VAR 0 3
67853: PUSH
67854: LD_VAR 0 1
67858: PPUSH
67859: LD_VAR 0 5
67863: PPUSH
67864: CALL_OW 76
67868: ST_TO_ADDR
67869: GO 67891
// result := SortListByListDesc ( buildings , tmp ) ;
67871: LD_ADDR_VAR 0 3
67875: PUSH
67876: LD_VAR 0 1
67880: PPUSH
67881: LD_VAR 0 5
67885: PPUSH
67886: CALL_OW 77
67890: ST_TO_ADDR
// end ;
67891: LD_VAR 0 3
67895: RET
// export function SortByClass ( units , class ) ; var un ; begin
67896: LD_INT 0
67898: PPUSH
67899: PPUSH
// if not units or not class then
67900: LD_VAR 0 1
67904: NOT
67905: IFTRUE 67914
67907: PUSH
67908: LD_VAR 0 2
67912: NOT
67913: OR
67914: IFFALSE 67918
// exit ;
67916: GO 68013
// result := [ ] ;
67918: LD_ADDR_VAR 0 3
67922: PUSH
67923: EMPTY
67924: ST_TO_ADDR
// for un in units do
67925: LD_ADDR_VAR 0 4
67929: PUSH
67930: LD_VAR 0 1
67934: PUSH
67935: FOR_IN
67936: IFFALSE 68011
// if GetClass ( un ) = class then
67938: LD_VAR 0 4
67942: PPUSH
67943: CALL_OW 257
67947: PUSH
67948: LD_VAR 0 2
67952: EQUAL
67953: IFFALSE 67980
// result := Insert ( result , 1 , un ) else
67955: LD_ADDR_VAR 0 3
67959: PUSH
67960: LD_VAR 0 3
67964: PPUSH
67965: LD_INT 1
67967: PPUSH
67968: LD_VAR 0 4
67972: PPUSH
67973: CALL_OW 2
67977: ST_TO_ADDR
67978: GO 68009
// result := Replace ( result , result + 1 , un ) ;
67980: LD_ADDR_VAR 0 3
67984: PUSH
67985: LD_VAR 0 3
67989: PPUSH
67990: LD_VAR 0 3
67994: PUSH
67995: LD_INT 1
67997: PLUS
67998: PPUSH
67999: LD_VAR 0 4
68003: PPUSH
68004: CALL_OW 1
68008: ST_TO_ADDR
68009: GO 67935
68011: POP
68012: POP
// end ;
68013: LD_VAR 0 3
68017: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68018: LD_INT 0
68020: PPUSH
68021: PPUSH
68022: PPUSH
68023: PPUSH
68024: PPUSH
68025: PPUSH
68026: PPUSH
// result := [ ] ;
68027: LD_ADDR_VAR 0 4
68031: PUSH
68032: EMPTY
68033: ST_TO_ADDR
// if x - r < 0 then
68034: LD_VAR 0 1
68038: PUSH
68039: LD_VAR 0 3
68043: MINUS
68044: PUSH
68045: LD_INT 0
68047: LESS
68048: IFFALSE 68060
// min_x := 0 else
68050: LD_ADDR_VAR 0 8
68054: PUSH
68055: LD_INT 0
68057: ST_TO_ADDR
68058: GO 68076
// min_x := x - r ;
68060: LD_ADDR_VAR 0 8
68064: PUSH
68065: LD_VAR 0 1
68069: PUSH
68070: LD_VAR 0 3
68074: MINUS
68075: ST_TO_ADDR
// if y - r < 0 then
68076: LD_VAR 0 2
68080: PUSH
68081: LD_VAR 0 3
68085: MINUS
68086: PUSH
68087: LD_INT 0
68089: LESS
68090: IFFALSE 68102
// min_y := 0 else
68092: LD_ADDR_VAR 0 7
68096: PUSH
68097: LD_INT 0
68099: ST_TO_ADDR
68100: GO 68118
// min_y := y - r ;
68102: LD_ADDR_VAR 0 7
68106: PUSH
68107: LD_VAR 0 2
68111: PUSH
68112: LD_VAR 0 3
68116: MINUS
68117: ST_TO_ADDR
// max_x := x + r ;
68118: LD_ADDR_VAR 0 9
68122: PUSH
68123: LD_VAR 0 1
68127: PUSH
68128: LD_VAR 0 3
68132: PLUS
68133: ST_TO_ADDR
// max_y := y + r ;
68134: LD_ADDR_VAR 0 10
68138: PUSH
68139: LD_VAR 0 2
68143: PUSH
68144: LD_VAR 0 3
68148: PLUS
68149: ST_TO_ADDR
// for _x = min_x to max_x do
68150: LD_ADDR_VAR 0 5
68154: PUSH
68155: DOUBLE
68156: LD_VAR 0 8
68160: DEC
68161: ST_TO_ADDR
68162: LD_VAR 0 9
68166: PUSH
68167: FOR_TO
68168: IFFALSE 68269
// for _y = min_y to max_y do
68170: LD_ADDR_VAR 0 6
68174: PUSH
68175: DOUBLE
68176: LD_VAR 0 7
68180: DEC
68181: ST_TO_ADDR
68182: LD_VAR 0 10
68186: PUSH
68187: FOR_TO
68188: IFFALSE 68265
// begin if not ValidHex ( _x , _y ) then
68190: LD_VAR 0 5
68194: PPUSH
68195: LD_VAR 0 6
68199: PPUSH
68200: CALL_OW 488
68204: NOT
68205: IFFALSE 68209
// continue ;
68207: GO 68187
// if GetResourceTypeXY ( _x , _y ) then
68209: LD_VAR 0 5
68213: PPUSH
68214: LD_VAR 0 6
68218: PPUSH
68219: CALL_OW 283
68223: IFFALSE 68263
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68225: LD_ADDR_VAR 0 4
68229: PUSH
68230: LD_VAR 0 4
68234: PPUSH
68235: LD_VAR 0 4
68239: PUSH
68240: LD_INT 1
68242: PLUS
68243: PPUSH
68244: LD_VAR 0 5
68248: PUSH
68249: LD_VAR 0 6
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PPUSH
68258: CALL_OW 1
68262: ST_TO_ADDR
// end ;
68263: GO 68187
68265: POP
68266: POP
68267: GO 68167
68269: POP
68270: POP
// end ;
68271: LD_VAR 0 4
68275: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68276: LD_INT 0
68278: PPUSH
68279: PPUSH
68280: PPUSH
68281: PPUSH
68282: PPUSH
68283: PPUSH
68284: PPUSH
68285: PPUSH
// if not units then
68286: LD_VAR 0 1
68290: NOT
68291: IFFALSE 68295
// exit ;
68293: GO 68827
// result := UnitFilter ( units , [ f_ok ] ) ;
68295: LD_ADDR_VAR 0 3
68299: PUSH
68300: LD_VAR 0 1
68304: PPUSH
68305: LD_INT 50
68307: PUSH
68308: EMPTY
68309: LIST
68310: PPUSH
68311: CALL_OW 72
68315: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68316: LD_ADDR_VAR 0 8
68320: PUSH
68321: LD_VAR 0 1
68325: PUSH
68326: LD_INT 1
68328: ARRAY
68329: PPUSH
68330: CALL_OW 255
68334: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68335: LD_ADDR_VAR 0 10
68339: PUSH
68340: LD_INT 29
68342: PUSH
68343: LD_INT 91
68345: PUSH
68346: LD_INT 49
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: ST_TO_ADDR
// if not result then
68354: LD_VAR 0 3
68358: NOT
68359: IFFALSE 68363
// exit ;
68361: GO 68827
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68363: LD_ADDR_VAR 0 5
68367: PUSH
68368: LD_INT 81
68370: PUSH
68371: LD_VAR 0 8
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PPUSH
68380: CALL_OW 69
68384: ST_TO_ADDR
// for i in result do
68385: LD_ADDR_VAR 0 4
68389: PUSH
68390: LD_VAR 0 3
68394: PUSH
68395: FOR_IN
68396: IFFALSE 68825
// begin tag := GetTag ( i ) + 1 ;
68398: LD_ADDR_VAR 0 9
68402: PUSH
68403: LD_VAR 0 4
68407: PPUSH
68408: CALL_OW 110
68412: PUSH
68413: LD_INT 1
68415: PLUS
68416: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
68417: LD_ADDR_VAR 0 7
68421: PUSH
68422: LD_VAR 0 4
68426: PPUSH
68427: CALL_OW 250
68431: PPUSH
68432: LD_VAR 0 4
68436: PPUSH
68437: CALL_OW 251
68441: PPUSH
68442: LD_INT 4
68444: PPUSH
68445: CALL 68018 0 3
68449: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
68450: LD_VAR 0 4
68454: PPUSH
68455: CALL_OW 247
68459: PUSH
68460: LD_INT 2
68462: EQUAL
68463: IFFALSE 68475
68465: PUSH
68466: LD_VAR 0 7
68470: PUSH
68471: LD_INT 2
68473: GREATER
68474: AND
68475: IFFALSE 68495
68477: PUSH
68478: LD_VAR 0 4
68482: PPUSH
68483: CALL_OW 264
68487: PUSH
68488: LD_VAR 0 10
68492: IN
68493: NOT
68494: AND
68495: IFFALSE 68534
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68497: LD_VAR 0 4
68501: PPUSH
68502: LD_VAR 0 7
68506: PUSH
68507: LD_INT 1
68509: ARRAY
68510: PUSH
68511: LD_INT 1
68513: ARRAY
68514: PPUSH
68515: LD_VAR 0 7
68519: PUSH
68520: LD_INT 1
68522: ARRAY
68523: PUSH
68524: LD_INT 2
68526: ARRAY
68527: PPUSH
68528: CALL_OW 116
68532: GO 68823
// if path > tag then
68534: LD_VAR 0 2
68538: PUSH
68539: LD_VAR 0 9
68543: GREATER
68544: IFFALSE 68752
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68546: LD_ADDR_VAR 0 6
68550: PUSH
68551: LD_VAR 0 5
68555: PPUSH
68556: LD_INT 91
68558: PUSH
68559: LD_VAR 0 4
68563: PUSH
68564: LD_INT 8
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: LIST
68571: PPUSH
68572: CALL_OW 72
68576: ST_TO_ADDR
// if nearEnemy then
68577: LD_VAR 0 6
68581: IFFALSE 68650
// begin if GetWeapon ( i ) = ru_time_lapser then
68583: LD_VAR 0 4
68587: PPUSH
68588: CALL_OW 264
68592: PUSH
68593: LD_INT 49
68595: EQUAL
68596: IFFALSE 68624
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68598: LD_VAR 0 4
68602: PPUSH
68603: LD_VAR 0 6
68607: PPUSH
68608: LD_VAR 0 4
68612: PPUSH
68613: CALL_OW 74
68617: PPUSH
68618: CALL_OW 112
68622: GO 68648
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68624: LD_VAR 0 4
68628: PPUSH
68629: LD_VAR 0 6
68633: PPUSH
68634: LD_VAR 0 4
68638: PPUSH
68639: CALL_OW 74
68643: PPUSH
68644: CALL 69908 0 2
// end else
68648: GO 68750
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68650: LD_VAR 0 4
68654: PPUSH
68655: LD_VAR 0 2
68659: PUSH
68660: LD_VAR 0 9
68664: ARRAY
68665: PUSH
68666: LD_INT 1
68668: ARRAY
68669: PPUSH
68670: LD_VAR 0 2
68674: PUSH
68675: LD_VAR 0 9
68679: ARRAY
68680: PUSH
68681: LD_INT 2
68683: ARRAY
68684: PPUSH
68685: CALL_OW 297
68689: PUSH
68690: LD_INT 6
68692: GREATER
68693: IFFALSE 68736
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68695: LD_VAR 0 4
68699: PPUSH
68700: LD_VAR 0 2
68704: PUSH
68705: LD_VAR 0 9
68709: ARRAY
68710: PUSH
68711: LD_INT 1
68713: ARRAY
68714: PPUSH
68715: LD_VAR 0 2
68719: PUSH
68720: LD_VAR 0 9
68724: ARRAY
68725: PUSH
68726: LD_INT 2
68728: ARRAY
68729: PPUSH
68730: CALL_OW 114
68734: GO 68750
// SetTag ( i , tag ) ;
68736: LD_VAR 0 4
68740: PPUSH
68741: LD_VAR 0 9
68745: PPUSH
68746: CALL_OW 109
// end else
68750: GO 68823
// if enemy then
68752: LD_VAR 0 5
68756: IFFALSE 68823
// begin if GetWeapon ( i ) = ru_time_lapser then
68758: LD_VAR 0 4
68762: PPUSH
68763: CALL_OW 264
68767: PUSH
68768: LD_INT 49
68770: EQUAL
68771: IFFALSE 68799
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68773: LD_VAR 0 4
68777: PPUSH
68778: LD_VAR 0 5
68782: PPUSH
68783: LD_VAR 0 4
68787: PPUSH
68788: CALL_OW 74
68792: PPUSH
68793: CALL_OW 112
68797: GO 68823
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68799: LD_VAR 0 4
68803: PPUSH
68804: LD_VAR 0 5
68808: PPUSH
68809: LD_VAR 0 4
68813: PPUSH
68814: CALL_OW 74
68818: PPUSH
68819: CALL 69908 0 2
// end ; end ;
68823: GO 68395
68825: POP
68826: POP
// end ;
68827: LD_VAR 0 3
68831: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68832: LD_INT 0
68834: PPUSH
68835: PPUSH
68836: PPUSH
// if not unit or IsInUnit ( unit ) then
68837: LD_VAR 0 1
68841: NOT
68842: IFTRUE 68855
68844: PUSH
68845: LD_VAR 0 1
68849: PPUSH
68850: CALL_OW 310
68854: OR
68855: IFFALSE 68859
// exit ;
68857: GO 68950
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68859: LD_ADDR_VAR 0 4
68863: PUSH
68864: LD_VAR 0 1
68868: PPUSH
68869: CALL_OW 250
68873: PPUSH
68874: LD_VAR 0 2
68878: PPUSH
68879: LD_INT 1
68881: PPUSH
68882: CALL_OW 272
68886: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68887: LD_ADDR_VAR 0 5
68891: PUSH
68892: LD_VAR 0 1
68896: PPUSH
68897: CALL_OW 251
68901: PPUSH
68902: LD_VAR 0 2
68906: PPUSH
68907: LD_INT 1
68909: PPUSH
68910: CALL_OW 273
68914: ST_TO_ADDR
// if ValidHex ( x , y ) then
68915: LD_VAR 0 4
68919: PPUSH
68920: LD_VAR 0 5
68924: PPUSH
68925: CALL_OW 488
68929: IFFALSE 68950
// ComTurnXY ( unit , x , y ) ;
68931: LD_VAR 0 1
68935: PPUSH
68936: LD_VAR 0 4
68940: PPUSH
68941: LD_VAR 0 5
68945: PPUSH
68946: CALL_OW 118
// end ;
68950: LD_VAR 0 3
68954: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68955: LD_INT 0
68957: PPUSH
68958: PPUSH
// result := false ;
68959: LD_ADDR_VAR 0 3
68963: PUSH
68964: LD_INT 0
68966: ST_TO_ADDR
// if not units then
68967: LD_VAR 0 2
68971: NOT
68972: IFFALSE 68976
// exit ;
68974: GO 69021
// for i in units do
68976: LD_ADDR_VAR 0 4
68980: PUSH
68981: LD_VAR 0 2
68985: PUSH
68986: FOR_IN
68987: IFFALSE 69019
// if See ( side , i ) then
68989: LD_VAR 0 1
68993: PPUSH
68994: LD_VAR 0 4
68998: PPUSH
68999: CALL_OW 292
69003: IFFALSE 69017
// begin result := true ;
69005: LD_ADDR_VAR 0 3
69009: PUSH
69010: LD_INT 1
69012: ST_TO_ADDR
// exit ;
69013: POP
69014: POP
69015: GO 69021
// end ;
69017: GO 68986
69019: POP
69020: POP
// end ;
69021: LD_VAR 0 3
69025: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69026: LD_INT 0
69028: PPUSH
69029: PPUSH
69030: PPUSH
69031: PPUSH
// if not unit or not points then
69032: LD_VAR 0 1
69036: NOT
69037: IFTRUE 69046
69039: PUSH
69040: LD_VAR 0 2
69044: NOT
69045: OR
69046: IFFALSE 69050
// exit ;
69048: GO 69140
// dist := 99999 ;
69050: LD_ADDR_VAR 0 5
69054: PUSH
69055: LD_INT 99999
69057: ST_TO_ADDR
// for i in points do
69058: LD_ADDR_VAR 0 4
69062: PUSH
69063: LD_VAR 0 2
69067: PUSH
69068: FOR_IN
69069: IFFALSE 69138
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69071: LD_ADDR_VAR 0 6
69075: PUSH
69076: LD_VAR 0 1
69080: PPUSH
69081: LD_VAR 0 4
69085: PUSH
69086: LD_INT 1
69088: ARRAY
69089: PPUSH
69090: LD_VAR 0 4
69094: PUSH
69095: LD_INT 2
69097: ARRAY
69098: PPUSH
69099: CALL_OW 297
69103: ST_TO_ADDR
// if tmpDist < dist then
69104: LD_VAR 0 6
69108: PUSH
69109: LD_VAR 0 5
69113: LESS
69114: IFFALSE 69136
// begin result := i ;
69116: LD_ADDR_VAR 0 3
69120: PUSH
69121: LD_VAR 0 4
69125: ST_TO_ADDR
// dist := tmpDist ;
69126: LD_ADDR_VAR 0 5
69130: PUSH
69131: LD_VAR 0 6
69135: ST_TO_ADDR
// end ; end ;
69136: GO 69068
69138: POP
69139: POP
// end ;
69140: LD_VAR 0 3
69144: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69145: LD_INT 0
69147: PPUSH
// uc_side := side ;
69148: LD_ADDR_OWVAR 20
69152: PUSH
69153: LD_VAR 0 1
69157: ST_TO_ADDR
// uc_nation := 3 ;
69158: LD_ADDR_OWVAR 21
69162: PUSH
69163: LD_INT 3
69165: ST_TO_ADDR
// vc_chassis := 25 ;
69166: LD_ADDR_OWVAR 37
69170: PUSH
69171: LD_INT 25
69173: ST_TO_ADDR
// vc_engine := engine_siberite ;
69174: LD_ADDR_OWVAR 39
69178: PUSH
69179: LD_INT 3
69181: ST_TO_ADDR
// vc_control := control_computer ;
69182: LD_ADDR_OWVAR 38
69186: PUSH
69187: LD_INT 3
69189: ST_TO_ADDR
// vc_weapon := 59 ;
69190: LD_ADDR_OWVAR 40
69194: PUSH
69195: LD_INT 59
69197: ST_TO_ADDR
// result := CreateVehicle ;
69198: LD_ADDR_VAR 0 5
69202: PUSH
69203: CALL_OW 45
69207: ST_TO_ADDR
// SetDir ( result , d ) ;
69208: LD_VAR 0 5
69212: PPUSH
69213: LD_VAR 0 4
69217: PPUSH
69218: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69222: LD_VAR 0 5
69226: PPUSH
69227: LD_VAR 0 2
69231: PPUSH
69232: LD_VAR 0 3
69236: PPUSH
69237: LD_INT 0
69239: PPUSH
69240: CALL_OW 48
// end ;
69244: LD_VAR 0 5
69248: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69249: LD_INT 0
69251: PPUSH
69252: PPUSH
69253: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69254: LD_ADDR_VAR 0 2
69258: PUSH
69259: LD_INT 0
69261: PUSH
69262: LD_INT 0
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: LIST
69275: LIST
69276: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69277: LD_VAR 0 1
69281: NOT
69282: IFTRUE 69315
69284: PUSH
69285: LD_VAR 0 1
69289: PPUSH
69290: CALL_OW 264
69294: PUSH
69295: LD_INT 12
69297: PUSH
69298: LD_INT 51
69300: PUSH
69301: LD_INT 32
69303: PUSH
69304: LD_INT 89
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: IN
69313: NOT
69314: OR
69315: IFFALSE 69319
// exit ;
69317: GO 69417
// for i := 1 to 3 do
69319: LD_ADDR_VAR 0 3
69323: PUSH
69324: DOUBLE
69325: LD_INT 1
69327: DEC
69328: ST_TO_ADDR
69329: LD_INT 3
69331: PUSH
69332: FOR_TO
69333: IFFALSE 69415
// begin tmp := GetCargo ( cargo , i ) ;
69335: LD_ADDR_VAR 0 4
69339: PUSH
69340: LD_VAR 0 1
69344: PPUSH
69345: LD_VAR 0 3
69349: PPUSH
69350: CALL_OW 289
69354: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69355: LD_ADDR_VAR 0 2
69359: PUSH
69360: LD_VAR 0 2
69364: PPUSH
69365: LD_VAR 0 3
69369: PPUSH
69370: LD_VAR 0 4
69374: PPUSH
69375: CALL_OW 1
69379: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69380: LD_ADDR_VAR 0 2
69384: PUSH
69385: LD_VAR 0 2
69389: PPUSH
69390: LD_INT 4
69392: PPUSH
69393: LD_VAR 0 2
69397: PUSH
69398: LD_INT 4
69400: ARRAY
69401: PUSH
69402: LD_VAR 0 4
69406: PLUS
69407: PPUSH
69408: CALL_OW 1
69412: ST_TO_ADDR
// end ;
69413: GO 69332
69415: POP
69416: POP
// end ;
69417: LD_VAR 0 2
69421: RET
// export function Length ( array ) ; begin
69422: LD_INT 0
69424: PPUSH
// result := array + 0 ;
69425: LD_ADDR_VAR 0 2
69429: PUSH
69430: LD_VAR 0 1
69434: PUSH
69435: LD_INT 0
69437: PLUS
69438: ST_TO_ADDR
// end ;
69439: LD_VAR 0 2
69443: RET
// export function PrepareArray ( array ) ; begin
69444: LD_INT 0
69446: PPUSH
// result := array diff 0 ;
69447: LD_ADDR_VAR 0 2
69451: PUSH
69452: LD_VAR 0 1
69456: PUSH
69457: LD_INT 0
69459: DIFF
69460: ST_TO_ADDR
// if not result [ 1 ] then
69461: LD_VAR 0 2
69465: PUSH
69466: LD_INT 1
69468: ARRAY
69469: NOT
69470: IFFALSE 69490
// result := Delete ( result , 1 ) ;
69472: LD_ADDR_VAR 0 2
69476: PUSH
69477: LD_VAR 0 2
69481: PPUSH
69482: LD_INT 1
69484: PPUSH
69485: CALL_OW 3
69489: ST_TO_ADDR
// end ;
69490: LD_VAR 0 2
69494: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69495: LD_INT 0
69497: PPUSH
69498: PPUSH
69499: PPUSH
69500: PPUSH
// sibRocketRange := 25 ;
69501: LD_ADDR_VAR 0 6
69505: PUSH
69506: LD_INT 25
69508: ST_TO_ADDR
// result := false ;
69509: LD_ADDR_VAR 0 4
69513: PUSH
69514: LD_INT 0
69516: ST_TO_ADDR
// for i := 0 to 5 do
69517: LD_ADDR_VAR 0 5
69521: PUSH
69522: DOUBLE
69523: LD_INT 0
69525: DEC
69526: ST_TO_ADDR
69527: LD_INT 5
69529: PUSH
69530: FOR_TO
69531: IFFALSE 69598
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69533: LD_VAR 0 1
69537: PPUSH
69538: LD_VAR 0 5
69542: PPUSH
69543: LD_VAR 0 6
69547: PPUSH
69548: CALL_OW 272
69552: PPUSH
69553: LD_VAR 0 2
69557: PPUSH
69558: LD_VAR 0 5
69562: PPUSH
69563: LD_VAR 0 6
69567: PPUSH
69568: CALL_OW 273
69572: PPUSH
69573: LD_VAR 0 3
69577: PPUSH
69578: CALL_OW 309
69582: IFFALSE 69596
// begin result := true ;
69584: LD_ADDR_VAR 0 4
69588: PUSH
69589: LD_INT 1
69591: ST_TO_ADDR
// exit ;
69592: POP
69593: POP
69594: GO 69600
// end ;
69596: GO 69530
69598: POP
69599: POP
// end ;
69600: LD_VAR 0 4
69604: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
69605: LD_INT 0
69607: PPUSH
69608: PPUSH
69609: PPUSH
// if btype = b_depot then
69610: LD_VAR 0 2
69614: PUSH
69615: LD_INT 0
69617: EQUAL
69618: IFFALSE 69630
// begin result := true ;
69620: LD_ADDR_VAR 0 3
69624: PUSH
69625: LD_INT 1
69627: ST_TO_ADDR
// exit ;
69628: GO 69750
// end ; pom := GetBase ( depot ) ;
69630: LD_ADDR_VAR 0 4
69634: PUSH
69635: LD_VAR 0 1
69639: PPUSH
69640: CALL_OW 274
69644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
69645: LD_ADDR_VAR 0 5
69649: PUSH
69650: LD_VAR 0 2
69654: PPUSH
69655: LD_VAR 0 1
69659: PPUSH
69660: CALL_OW 248
69664: PPUSH
69665: CALL_OW 450
69669: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
69670: LD_ADDR_VAR 0 3
69674: PUSH
69675: LD_VAR 0 4
69679: PPUSH
69680: LD_INT 1
69682: PPUSH
69683: CALL_OW 275
69687: PUSH
69688: LD_VAR 0 5
69692: PUSH
69693: LD_INT 1
69695: ARRAY
69696: GREATEREQUAL
69697: IFFALSE 69723
69699: PUSH
69700: LD_VAR 0 4
69704: PPUSH
69705: LD_INT 2
69707: PPUSH
69708: CALL_OW 275
69712: PUSH
69713: LD_VAR 0 5
69717: PUSH
69718: LD_INT 2
69720: ARRAY
69721: GREATEREQUAL
69722: AND
69723: IFFALSE 69749
69725: PUSH
69726: LD_VAR 0 4
69730: PPUSH
69731: LD_INT 3
69733: PPUSH
69734: CALL_OW 275
69738: PUSH
69739: LD_VAR 0 5
69743: PUSH
69744: LD_INT 3
69746: ARRAY
69747: GREATEREQUAL
69748: AND
69749: ST_TO_ADDR
// end ;
69750: LD_VAR 0 3
69754: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69755: LD_INT 0
69757: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69758: LD_VAR 0 1
69762: PPUSH
69763: LD_VAR 0 2
69767: PPUSH
69768: LD_INT 0
69770: PPUSH
69771: LD_INT 0
69773: PPUSH
69774: LD_INT 1
69776: PPUSH
69777: LD_INT 0
69779: PPUSH
69780: CALL_OW 587
// end ;
69784: LD_VAR 0 3
69788: RET
// export function CenterOnNow ( unit ) ; begin
69789: LD_INT 0
69791: PPUSH
// result := IsInUnit ( unit ) ;
69792: LD_ADDR_VAR 0 2
69796: PUSH
69797: LD_VAR 0 1
69801: PPUSH
69802: CALL_OW 310
69806: ST_TO_ADDR
// if not result then
69807: LD_VAR 0 2
69811: NOT
69812: IFFALSE 69824
// result := unit ;
69814: LD_ADDR_VAR 0 2
69818: PUSH
69819: LD_VAR 0 1
69823: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69824: LD_VAR 0 1
69828: PPUSH
69829: CALL_OW 87
// end ;
69833: LD_VAR 0 2
69837: RET
// export function ComMoveHex ( unit , hex ) ; begin
69838: LD_INT 0
69840: PPUSH
// if not hex then
69841: LD_VAR 0 2
69845: NOT
69846: IFFALSE 69850
// exit ;
69848: GO 69903
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69850: LD_VAR 0 2
69854: PUSH
69855: LD_INT 1
69857: ARRAY
69858: PPUSH
69859: LD_VAR 0 2
69863: PUSH
69864: LD_INT 2
69866: ARRAY
69867: PPUSH
69868: CALL_OW 428
69872: IFFALSE 69876
// exit ;
69874: GO 69903
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69876: LD_VAR 0 1
69880: PPUSH
69881: LD_VAR 0 2
69885: PUSH
69886: LD_INT 1
69888: ARRAY
69889: PPUSH
69890: LD_VAR 0 2
69894: PUSH
69895: LD_INT 2
69897: ARRAY
69898: PPUSH
69899: CALL_OW 111
// end ;
69903: LD_VAR 0 3
69907: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69908: LD_INT 0
69910: PPUSH
69911: PPUSH
69912: PPUSH
// if not unit or not enemy then
69913: LD_VAR 0 1
69917: NOT
69918: IFTRUE 69927
69920: PUSH
69921: LD_VAR 0 2
69925: NOT
69926: OR
69927: IFFALSE 69931
// exit ;
69929: GO 70057
// x := GetX ( enemy ) ;
69931: LD_ADDR_VAR 0 4
69935: PUSH
69936: LD_VAR 0 2
69940: PPUSH
69941: CALL_OW 250
69945: ST_TO_ADDR
// y := GetY ( enemy ) ;
69946: LD_ADDR_VAR 0 5
69950: PUSH
69951: LD_VAR 0 2
69955: PPUSH
69956: CALL_OW 251
69960: ST_TO_ADDR
// if ValidHex ( x , y ) then
69961: LD_VAR 0 4
69965: PPUSH
69966: LD_VAR 0 5
69970: PPUSH
69971: CALL_OW 488
69975: IFFALSE 70057
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69977: LD_VAR 0 2
69981: PPUSH
69982: CALL_OW 247
69986: PUSH
69987: LD_INT 3
69989: PUSH
69990: LD_INT 2
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: IN
69997: IFTRUE 70020
69999: PUSH
70000: LD_VAR 0 1
70004: PPUSH
70005: CALL_OW 255
70009: PPUSH
70010: LD_VAR 0 2
70014: PPUSH
70015: CALL_OW 292
70019: OR
70020: IFFALSE 70038
// ComAttackUnit ( unit , enemy ) else
70022: LD_VAR 0 1
70026: PPUSH
70027: LD_VAR 0 2
70031: PPUSH
70032: CALL_OW 115
70036: GO 70057
// ComAgressiveMove ( unit , x , y ) ;
70038: LD_VAR 0 1
70042: PPUSH
70043: LD_VAR 0 4
70047: PPUSH
70048: LD_VAR 0 5
70052: PPUSH
70053: CALL_OW 114
// end ;
70057: LD_VAR 0 3
70061: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70062: LD_INT 0
70064: PPUSH
70065: PPUSH
70066: PPUSH
// list := AreaToList ( area , 0 ) ;
70067: LD_ADDR_VAR 0 5
70071: PUSH
70072: LD_VAR 0 1
70076: PPUSH
70077: LD_INT 0
70079: PPUSH
70080: CALL_OW 517
70084: ST_TO_ADDR
// if not list then
70085: LD_VAR 0 5
70089: NOT
70090: IFFALSE 70094
// exit ;
70092: GO 70224
// if all then
70094: LD_VAR 0 2
70098: IFFALSE 70186
// begin for i := 1 to list [ 1 ] do
70100: LD_ADDR_VAR 0 4
70104: PUSH
70105: DOUBLE
70106: LD_INT 1
70108: DEC
70109: ST_TO_ADDR
70110: LD_VAR 0 5
70114: PUSH
70115: LD_INT 1
70117: ARRAY
70118: PUSH
70119: FOR_TO
70120: IFFALSE 70182
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70122: LD_ADDR_VAR 0 3
70126: PUSH
70127: LD_VAR 0 3
70131: PPUSH
70132: LD_VAR 0 3
70136: PUSH
70137: LD_INT 1
70139: PLUS
70140: PPUSH
70141: LD_VAR 0 5
70145: PUSH
70146: LD_INT 1
70148: ARRAY
70149: PUSH
70150: LD_VAR 0 4
70154: ARRAY
70155: PUSH
70156: LD_VAR 0 5
70160: PUSH
70161: LD_INT 2
70163: ARRAY
70164: PUSH
70165: LD_VAR 0 4
70169: ARRAY
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PPUSH
70175: CALL_OW 1
70179: ST_TO_ADDR
70180: GO 70119
70182: POP
70183: POP
// exit ;
70184: GO 70224
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70186: LD_ADDR_VAR 0 3
70190: PUSH
70191: LD_VAR 0 5
70195: PUSH
70196: LD_INT 1
70198: ARRAY
70199: PUSH
70200: LD_INT 1
70202: ARRAY
70203: PUSH
70204: LD_VAR 0 5
70208: PUSH
70209: LD_INT 2
70211: ARRAY
70212: PUSH
70213: LD_INT 1
70215: ARRAY
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: EMPTY
70222: LIST
70223: ST_TO_ADDR
// end ;
70224: LD_VAR 0 3
70228: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70229: LD_INT 0
70231: PPUSH
70232: PPUSH
// list := AreaToList ( area , 0 ) ;
70233: LD_ADDR_VAR 0 4
70237: PUSH
70238: LD_VAR 0 1
70242: PPUSH
70243: LD_INT 0
70245: PPUSH
70246: CALL_OW 517
70250: ST_TO_ADDR
// if not list then
70251: LD_VAR 0 4
70255: NOT
70256: IFFALSE 70260
// exit ;
70258: GO 70301
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70260: LD_ADDR_VAR 0 3
70264: PUSH
70265: LD_VAR 0 4
70269: PUSH
70270: LD_INT 1
70272: ARRAY
70273: PUSH
70274: LD_INT 1
70276: ARRAY
70277: PUSH
70278: LD_VAR 0 4
70282: PUSH
70283: LD_INT 2
70285: ARRAY
70286: PUSH
70287: LD_INT 1
70289: ARRAY
70290: PUSH
70291: LD_VAR 0 2
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: LIST
70300: ST_TO_ADDR
// end ;
70301: LD_VAR 0 3
70305: RET
// export function First ( array ) ; begin
70306: LD_INT 0
70308: PPUSH
// if not array then
70309: LD_VAR 0 1
70313: NOT
70314: IFFALSE 70318
// exit ;
70316: GO 70332
// result := array [ 1 ] ;
70318: LD_ADDR_VAR 0 2
70322: PUSH
70323: LD_VAR 0 1
70327: PUSH
70328: LD_INT 1
70330: ARRAY
70331: ST_TO_ADDR
// end ;
70332: LD_VAR 0 2
70336: RET
// export function Last ( array ) ; begin
70337: LD_INT 0
70339: PPUSH
// if not array then
70340: LD_VAR 0 1
70344: NOT
70345: IFFALSE 70349
// exit ;
70347: GO 70365
// result := array [ array ] ;
70349: LD_ADDR_VAR 0 2
70353: PUSH
70354: LD_VAR 0 1
70358: PUSH
70359: LD_VAR 0 1
70363: ARRAY
70364: ST_TO_ADDR
// end ;
70365: LD_VAR 0 2
70369: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70370: LD_INT 0
70372: PPUSH
70373: PPUSH
// result := [ ] ;
70374: LD_ADDR_VAR 0 5
70378: PUSH
70379: EMPTY
70380: ST_TO_ADDR
// if not array then
70381: LD_VAR 0 1
70385: NOT
70386: IFFALSE 70390
// exit ;
70388: GO 70502
// for i := 1 to array do
70390: LD_ADDR_VAR 0 6
70394: PUSH
70395: DOUBLE
70396: LD_INT 1
70398: DEC
70399: ST_TO_ADDR
70400: LD_VAR 0 1
70404: PUSH
70405: FOR_TO
70406: IFFALSE 70500
// if array [ i ] [ index ] = value then
70408: LD_VAR 0 1
70412: PUSH
70413: LD_VAR 0 6
70417: ARRAY
70418: PUSH
70419: LD_VAR 0 2
70423: ARRAY
70424: PUSH
70425: LD_VAR 0 3
70429: EQUAL
70430: IFFALSE 70498
// begin if indexColumn then
70432: LD_VAR 0 4
70436: IFFALSE 70472
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70438: LD_ADDR_VAR 0 5
70442: PUSH
70443: LD_VAR 0 5
70447: PPUSH
70448: LD_VAR 0 1
70452: PUSH
70453: LD_VAR 0 6
70457: ARRAY
70458: PUSH
70459: LD_VAR 0 4
70463: ARRAY
70464: PPUSH
70465: CALL 65510 0 2
70469: ST_TO_ADDR
70470: GO 70498
// result := Join ( result , array [ i ] ) ;
70472: LD_ADDR_VAR 0 5
70476: PUSH
70477: LD_VAR 0 5
70481: PPUSH
70482: LD_VAR 0 1
70486: PUSH
70487: LD_VAR 0 6
70491: ARRAY
70492: PPUSH
70493: CALL 65510 0 2
70497: ST_TO_ADDR
// end ;
70498: GO 70405
70500: POP
70501: POP
// end ;
70502: LD_VAR 0 5
70506: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70507: LD_INT 0
70509: PPUSH
// if not vehicles or not parkingPoint then
70510: LD_VAR 0 1
70514: NOT
70515: IFTRUE 70524
70517: PUSH
70518: LD_VAR 0 2
70522: NOT
70523: OR
70524: IFFALSE 70528
// exit ;
70526: GO 70626
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70528: LD_ADDR_VAR 0 1
70532: PUSH
70533: LD_VAR 0 1
70537: PPUSH
70538: LD_INT 50
70540: PUSH
70541: EMPTY
70542: LIST
70543: PUSH
70544: LD_INT 3
70546: PUSH
70547: LD_INT 92
70549: PUSH
70550: LD_VAR 0 2
70554: PUSH
70555: LD_INT 1
70557: ARRAY
70558: PUSH
70559: LD_VAR 0 2
70563: PUSH
70564: LD_INT 2
70566: ARRAY
70567: PUSH
70568: LD_INT 8
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PPUSH
70585: CALL_OW 72
70589: ST_TO_ADDR
// if not vehicles then
70590: LD_VAR 0 1
70594: NOT
70595: IFFALSE 70599
// exit ;
70597: GO 70626
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70599: LD_VAR 0 1
70603: PPUSH
70604: LD_VAR 0 2
70608: PUSH
70609: LD_INT 1
70611: ARRAY
70612: PPUSH
70613: LD_VAR 0 2
70617: PUSH
70618: LD_INT 2
70620: ARRAY
70621: PPUSH
70622: CALL_OW 111
// end ;
70626: LD_VAR 0 3
70630: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70631: LD_INT 0
70633: PPUSH
70634: PPUSH
70635: PPUSH
// if not side or not area then
70636: LD_VAR 0 1
70640: NOT
70641: IFTRUE 70650
70643: PUSH
70644: LD_VAR 0 2
70648: NOT
70649: OR
70650: IFFALSE 70654
// exit ;
70652: GO 70773
// tmp := AreaToList ( area , 0 ) ;
70654: LD_ADDR_VAR 0 5
70658: PUSH
70659: LD_VAR 0 2
70663: PPUSH
70664: LD_INT 0
70666: PPUSH
70667: CALL_OW 517
70671: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70672: LD_ADDR_VAR 0 4
70676: PUSH
70677: DOUBLE
70678: LD_INT 1
70680: DEC
70681: ST_TO_ADDR
70682: LD_VAR 0 5
70686: PUSH
70687: LD_INT 1
70689: ARRAY
70690: PUSH
70691: FOR_TO
70692: IFFALSE 70771
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70694: LD_VAR 0 5
70698: PUSH
70699: LD_INT 1
70701: ARRAY
70702: PUSH
70703: LD_VAR 0 4
70707: ARRAY
70708: PPUSH
70709: LD_VAR 0 5
70713: PUSH
70714: LD_INT 2
70716: ARRAY
70717: PUSH
70718: LD_VAR 0 4
70722: ARRAY
70723: PPUSH
70724: CALL_OW 351
70728: IFFALSE 70769
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70730: LD_VAR 0 5
70734: PUSH
70735: LD_INT 1
70737: ARRAY
70738: PUSH
70739: LD_VAR 0 4
70743: ARRAY
70744: PPUSH
70745: LD_VAR 0 5
70749: PUSH
70750: LD_INT 2
70752: ARRAY
70753: PUSH
70754: LD_VAR 0 4
70758: ARRAY
70759: PPUSH
70760: LD_VAR 0 1
70764: PPUSH
70765: CALL_OW 244
// end ;
70769: GO 70691
70771: POP
70772: POP
// end ;
70773: LD_VAR 0 3
70777: RET
// export function UniqueArray ( array ) ; var i ; begin
70778: LD_INT 0
70780: PPUSH
70781: PPUSH
// result := [ ] ;
70782: LD_ADDR_VAR 0 2
70786: PUSH
70787: EMPTY
70788: ST_TO_ADDR
// if not array then
70789: LD_VAR 0 1
70793: NOT
70794: IFFALSE 70798
// exit ;
70796: GO 70859
// for i := 1 to array do
70798: LD_ADDR_VAR 0 3
70802: PUSH
70803: DOUBLE
70804: LD_INT 1
70806: DEC
70807: ST_TO_ADDR
70808: LD_VAR 0 1
70812: PUSH
70813: FOR_TO
70814: IFFALSE 70857
// if not array [ i ] in result then
70816: LD_VAR 0 1
70820: PUSH
70821: LD_VAR 0 3
70825: ARRAY
70826: PUSH
70827: LD_VAR 0 2
70831: IN
70832: NOT
70833: IFFALSE 70855
// result := Join ( result , i ) ;
70835: LD_ADDR_VAR 0 2
70839: PUSH
70840: LD_VAR 0 2
70844: PPUSH
70845: LD_VAR 0 3
70849: PPUSH
70850: CALL 65510 0 2
70854: ST_TO_ADDR
70855: GO 70813
70857: POP
70858: POP
// end ; end_of_file
70859: LD_VAR 0 2
70863: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70864: LD_VAR 0 1
70868: PPUSH
70869: LD_VAR 0 2
70873: PPUSH
70874: LD_VAR 0 3
70878: PPUSH
70879: LD_VAR 0 4
70883: PPUSH
70884: LD_VAR 0 5
70888: PPUSH
70889: LD_VAR 0 6
70893: PPUSH
70894: CALL 4766 0 6
// end ;
70898: PPOPN 6
70900: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70901: LD_INT 0
70903: PPUSH
// begin if not units then
70904: LD_VAR 0 1
70908: NOT
70909: IFFALSE 70913
// exit ;
70911: GO 70947
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70913: LD_VAR 0 1
70917: PPUSH
70918: LD_VAR 0 2
70922: PPUSH
70923: LD_VAR 0 3
70927: PPUSH
70928: LD_VAR 0 4
70932: PPUSH
70933: LD_VAR 0 5
70937: PPUSH
70938: LD_VAR 0 6
70942: PPUSH
70943: CALL 27283 0 6
// end ;
70947: PPOPN 7
70949: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70950: CALL 4646 0 0
// end ;
70954: PPOPN 1
70956: END
