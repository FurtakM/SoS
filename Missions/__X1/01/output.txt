// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3424 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3271 0 0
// PrepareSheikGroup ;
 123: CALL 2909 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2821 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3672 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// SaveForQuickRestart ;
 431: CALL_OW 22
// end ;
 435: LD_VAR 0 1
 439: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 440: LD_INT 2
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: CALL_OW 81
 450: PUSH
 451: LD_INT 2
 453: EQUAL
 454: IFFALSE 600
 456: GO 458
 458: DISABLE
 459: LD_INT 0
 461: PPUSH
// begin goWithHeike := false ;
 462: LD_ADDR_EXP 18
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// DialogueOn ;
 470: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 474: LD_EXP 1
 478: PPUSH
 479: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 483: LD_EXP 5
 487: PPUSH
 488: LD_STRING DK-betray-1
 490: PPUSH
 491: CALL_OW 88
// DialogueOff ;
 495: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 499: LD_EXP 5
 503: PPUSH
 504: LD_INT 90
 506: PPUSH
 507: LD_INT 46
 509: PPUSH
 510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 521: LD_ADDR_VAR 0 1
 525: PUSH
 526: LD_INT 22
 528: PUSH
 529: LD_INT 5
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 25
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: PUSH
 555: LD_EXP 5
 559: DIFF
 560: PUSH
 561: FOR_IN
 562: IFFALSE 580
// ComAttackUnit ( i , Heike ) ;
 564: LD_VAR 0 1
 568: PPUSH
 569: LD_EXP 1
 573: PPUSH
 574: CALL_OW 115
 578: GO 561
 580: POP
 581: POP
// until IsDead ( Heike ) ;
 582: LD_EXP 1
 586: PPUSH
 587: CALL_OW 301
 591: IFFALSE 514
// YouLost ( Betray ) ;
 593: LD_STRING Betray
 595: PPUSH
 596: CALL_OW 104
// end ;
 600: PPOPN 1
 602: END
// every 0 0$1 trigger goWithHeike do
 603: LD_EXP 18
 607: IFFALSE 662
 609: GO 611
 611: DISABLE
// begin enable ;
 612: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 613: LD_EXP 1
 617: PPUSH
 618: LD_EXP 5
 622: PPUSH
 623: CALL_OW 296
 627: PUSH
 628: LD_INT 3
 630: GREATER
 631: IFFALSE 662
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 633: LD_EXP 5
 637: PPUSH
 638: LD_EXP 1
 642: PPUSH
 643: CALL_OW 250
 647: PPUSH
 648: LD_EXP 1
 652: PPUSH
 653: CALL_OW 251
 657: PPUSH
 658: CALL_OW 111
// end ;
 662: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 663: LD_INT 2
 665: PPUSH
 666: LD_INT 47
 668: PPUSH
 669: LD_INT 68
 671: PPUSH
 672: CALL_OW 293
 676: PUSH
 677: LD_EXP 19
 681: NOT
 682: AND
 683: PUSH
 684: LD_EXP 22
 688: NOT
 689: AND
 690: IFFALSE 751
 692: GO 694
 694: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 695: LD_EXP 1
 699: PPUSH
 700: LD_STRING DH-spot-1
 702: PPUSH
 703: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 707: LD_INT 47
 709: PPUSH
 710: LD_INT 68
 712: PPUSH
 713: CALL_OW 428
 717: PPUSH
 718: CALL_OW 313
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: LD_STRING DRa-spot-1
 729: PPUSH
 730: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 734: LD_INT 90
 736: PPUSH
 737: LD_INT 41
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 6
 745: NEG
 746: PPUSH
 747: CALL_OW 330
// end ;
 751: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 752: LD_INT 2
 754: PPUSH
 755: LD_INT 93
 757: PPUSH
 758: LD_INT 89
 760: PPUSH
 761: CALL_OW 293
 765: PUSH
 766: LD_EXP 19
 770: NOT
 771: AND
 772: PUSH
 773: LD_EXP 22
 777: NOT
 778: AND
 779: IFFALSE 840
 781: GO 783
 783: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING DH-spot-1
 791: PPUSH
 792: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 796: LD_INT 93
 798: PPUSH
 799: LD_INT 89
 801: PPUSH
 802: CALL_OW 428
 806: PPUSH
 807: CALL_OW 313
 811: PUSH
 812: LD_INT 1
 814: ARRAY
 815: PPUSH
 816: LD_STRING DRa-spot-2
 818: PPUSH
 819: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 823: LD_INT 90
 825: PPUSH
 826: LD_INT 41
 828: PPUSH
 829: LD_INT 2
 831: PPUSH
 832: LD_INT 6
 834: NEG
 835: PPUSH
 836: CALL_OW 330
// end ;
 840: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 841: LD_EXP 21
 845: PUSH
 846: LD_EXP 14
 850: PPUSH
 851: LD_INT 101
 853: PUSH
 854: LD_INT 2
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 72
 865: AND
 866: PUSH
 867: LD_EXP 22
 871: NOT
 872: AND
 873: IFFALSE 1197
 875: GO 877
 877: DISABLE
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
 883: PPUSH
 884: PPUSH
// begin enable ;
 885: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_EXP 14
 895: PPUSH
 896: LD_INT 101
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 72
 910: ST_TO_ADDR
// if not tmp then
 911: LD_VAR 0 1
 915: NOT
 916: IFFALSE 920
// exit ;
 918: GO 1197
// InGameOn ;
 920: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 924: LD_EXP 1
 928: PUSH
 929: LD_EXP 5
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: LD_VAR 0 1
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 951: LD_VAR 0 1
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: LD_EXP 1
 964: PPUSH
 965: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 969: LD_VAR 0 1
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: LD_STRING DG-meeting-1
 980: PPUSH
 981: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 81
 992: PUSH
 993: LD_INT 10
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 63
1002: PUSH
1003: LD_INT 25
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 108
1012: PUSH
1013: LD_INT 73
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_INT 9999
1032: PUSH
1033: EMPTY
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// for i := 1 to 3 do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 3
1051: PUSH
1052: FOR_TO
1053: IFFALSE 1137
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1055: LD_ADDR_VAR 0 5
1059: PUSH
1060: LD_EXP 1
1064: PPUSH
1065: LD_VAR 0 3
1069: PUSH
1070: LD_VAR 0 2
1074: ARRAY
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PPUSH
1080: LD_VAR 0 3
1084: PUSH
1085: LD_VAR 0 2
1089: ARRAY
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 297
1099: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1100: LD_VAR 0 4
1104: PUSH
1105: LD_INT 1
1107: ARRAY
1108: PUSH
1109: LD_VAR 0 5
1113: GREATER
1114: IFFALSE 1135
// dist := [ tdist , i ] ;
1116: LD_ADDR_VAR 0 4
1120: PUSH
1121: LD_VAR 0 5
1125: PUSH
1126: LD_VAR 0 2
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: ST_TO_ADDR
// end ;
1135: GO 1052
1137: POP
1138: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1139: LD_EXP 1
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 2
1156: ARRAY
1157: ARRAY
1158: PUSH
1159: LD_INT 1
1161: ARRAY
1162: PPUSH
1163: LD_VAR 0 3
1167: PUSH
1168: LD_VAR 0 4
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: ARRAY
1177: PUSH
1178: LD_INT 2
1180: ARRAY
1181: PPUSH
1182: CALL_OW 111
// wait ( 0 0$3 ) ;
1186: LD_INT 105
1188: PPUSH
1189: CALL_OW 67
// InGameOff ;
1193: CALL_OW 9
// end ;
1197: PPOPN 5
1199: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1200: LD_EXP 1
1204: PPUSH
1205: LD_INT 14
1207: PPUSH
1208: CALL_OW 296
1212: PUSH
1213: LD_INT 40
1215: GREATER
1216: PUSH
1217: LD_EXP 1
1221: PPUSH
1222: CALL_OW 316
1226: AND
1227: PUSH
1228: LD_EXP 22
1232: NOT
1233: AND
1234: IFFALSE 1251
1236: GO 1238
1238: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1239: LD_EXP 5
1243: PPUSH
1244: LD_STRING DK-idle-1
1246: PPUSH
1247: CALL_OW 88
// end ;
1251: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1252: LD_INT 2
1254: PPUSH
1255: LD_INT 59
1257: PPUSH
1258: LD_INT 47
1260: PPUSH
1261: CALL_OW 293
1265: PUSH
1266: LD_EXP 22
1270: NOT
1271: AND
1272: IFFALSE 1429
1274: GO 1276
1276: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1277: LD_INT 59
1279: PPUSH
1280: LD_INT 47
1282: PPUSH
1283: LD_INT 2
1285: PPUSH
1286: LD_INT 10
1288: NEG
1289: PPUSH
1290: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1294: LD_INT 59
1296: PPUSH
1297: LD_INT 47
1299: PPUSH
1300: CALL_OW 86
// goWithHeike := false ;
1304: LD_ADDR_EXP 18
1308: PUSH
1309: LD_INT 0
1311: ST_TO_ADDR
// baseSpotted := true ;
1312: LD_ADDR_EXP 19
1316: PUSH
1317: LD_INT 1
1319: ST_TO_ADDR
// InGameOn ;
1320: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1324: LD_EXP 1
1328: PUSH
1329: LD_EXP 5
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: LD_INT 54
1340: PPUSH
1341: LD_INT 45
1343: PPUSH
1344: CALL_OW 111
// wait ( 0 0$1 ) ;
1348: LD_INT 35
1350: PPUSH
1351: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1355: LD_EXP 1
1359: PUSH
1360: LD_EXP 5
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PPUSH
1369: LD_INT 59
1371: PPUSH
1372: LD_INT 47
1374: PPUSH
1375: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1379: LD_EXP 1
1383: PPUSH
1384: LD_STRING DH-base-1
1386: PPUSH
1387: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1391: LD_EXP 5
1395: PPUSH
1396: LD_STRING DK-base-1
1398: PPUSH
1399: CALL_OW 88
// InGameOff ;
1403: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1407: LD_ADDR_EXP 17
1411: PUSH
1412: LD_EXP 17
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ST_TO_ADDR
// goWithHeike := true ;
1421: LD_ADDR_EXP 18
1425: PUSH
1426: LD_INT 1
1428: ST_TO_ADDR
// end ;
1429: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1430: LD_INT 2
1432: PPUSH
1433: LD_EXP 8
1437: PPUSH
1438: CALL_OW 292
1442: PUSH
1443: LD_EXP 22
1447: NOT
1448: AND
1449: IFFALSE 2791
1451: GO 1453
1453: DISABLE
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
// begin meetingActive := false ;
1460: LD_ADDR_EXP 21
1464: PUSH
1465: LD_INT 0
1467: ST_TO_ADDR
// goWithHeike := false ;
1468: LD_ADDR_EXP 18
1472: PUSH
1473: LD_INT 0
1475: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_INT 6
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 517
1491: ST_TO_ADDR
// for i := 1 to 4 do
1492: LD_ADDR_VAR 0 1
1496: PUSH
1497: DOUBLE
1498: LD_INT 1
1500: DEC
1501: ST_TO_ADDR
1502: LD_INT 4
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1573
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1508: LD_EXP 15
1512: PUSH
1513: LD_VAR 0 1
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_INT 1
1526: ARRAY
1527: PUSH
1528: LD_VAR 0 1
1532: ARRAY
1533: PPUSH
1534: LD_VAR 0 2
1538: PUSH
1539: LD_INT 2
1541: ARRAY
1542: PUSH
1543: LD_VAR 0 1
1547: ARRAY
1548: PPUSH
1549: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1553: LD_EXP 15
1557: PUSH
1558: LD_VAR 0 1
1562: ARRAY
1563: PPUSH
1564: LD_INT 14
1566: PPUSH
1567: CALL_OW 179
// end ;
1571: GO 1505
1573: POP
1574: POP
// InGameOn ;
1575: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1579: LD_EXP 8
1583: PPUSH
1584: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1588: LD_EXP 1
1592: PPUSH
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1602: LD_EXP 5
1606: PPUSH
1607: LD_EXP 1
1611: PPUSH
1612: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1623: LD_EXP 1
1627: PPUSH
1628: LD_EXP 8
1632: PPUSH
1633: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1637: LD_EXP 5
1641: PPUSH
1642: LD_EXP 1
1646: PPUSH
1647: CALL_OW 250
1651: PPUSH
1652: LD_INT 5
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: CALL_OW 272
1662: PPUSH
1663: LD_EXP 1
1667: PPUSH
1668: CALL_OW 251
1672: PPUSH
1673: LD_INT 5
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: CALL_OW 273
1683: PPUSH
1684: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1688: LD_EXP 1
1692: PPUSH
1693: LD_EXP 8
1697: PPUSH
1698: CALL_OW 296
1702: PUSH
1703: LD_INT 5
1705: LESS
1706: PUSH
1707: LD_EXP 5
1711: PPUSH
1712: LD_EXP 8
1716: PPUSH
1717: CALL_OW 296
1721: PUSH
1722: LD_INT 6
1724: LESS
1725: AND
1726: IFFALSE 1616
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1728: LD_EXP 1
1732: PUSH
1733: LD_EXP 5
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: LD_EXP 8
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1751: LD_EXP 8
1755: PUSH
1756: LD_EXP 4
1760: PUSH
1761: LD_EXP 9
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: LD_EXP 1
1775: PPUSH
1776: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1780: LD_INT 7
1782: PPUSH
1783: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1787: LD_EXP 8
1791: PPUSH
1792: LD_STRING DKu-Kurt-1
1794: PPUSH
1795: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1799: LD_EXP 5
1803: PPUSH
1804: LD_STRING DK-Kurt-1
1806: PPUSH
1807: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1811: LD_EXP 8
1815: PPUSH
1816: LD_STRING DKu-Kurt-2
1818: PPUSH
1819: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1823: LD_INT 7
1825: PPUSH
1826: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1830: LD_EXP 1
1834: PPUSH
1835: LD_STRING DH-Kurt-1
1837: PPUSH
1838: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1842: LD_EXP 8
1846: PPUSH
1847: LD_STRING DKu-Kurt-3
1849: PPUSH
1850: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1854: LD_EXP 5
1858: PPUSH
1859: LD_STRING DK-Kurt-3
1861: PPUSH
1862: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1866: LD_EXP 9
1870: PPUSH
1871: LD_STRING DHa-Kurt-3
1873: PPUSH
1874: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1878: LD_EXP 4
1882: PPUSH
1883: LD_STRING DO-Kurt-3
1885: PPUSH
1886: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1890: LD_ADDR_VAR 0 3
1894: PUSH
1895: LD_EXP 8
1899: PUSH
1900: LD_EXP 4
1904: PUSH
1905: LD_EXP 9
1909: PUSH
1910: LD_EXP 5
1914: PUSH
1915: LD_EXP 1
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_EXP 16
1931: UNION
1932: ST_TO_ADDR
// for i = 1 to tmp2 do
1933: LD_ADDR_VAR 0 1
1937: PUSH
1938: DOUBLE
1939: LD_INT 1
1941: DEC
1942: ST_TO_ADDR
1943: LD_VAR 0 3
1947: PUSH
1948: FOR_TO
1949: IFFALSE 2024
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1951: LD_VAR 0 3
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_INT 4
1978: PLUS
1979: ARRAY
1980: PPUSH
1981: LD_VAR 0 2
1985: PUSH
1986: LD_INT 2
1988: ARRAY
1989: PUSH
1990: LD_VAR 0 1
1994: PUSH
1995: LD_INT 4
1997: PLUS
1998: ARRAY
1999: PPUSH
2000: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2004: LD_VAR 0 3
2008: PUSH
2009: LD_VAR 0 1
2013: ARRAY
2014: PPUSH
2015: LD_INT 14
2017: PPUSH
2018: CALL_OW 179
// end ;
2022: GO 1948
2024: POP
2025: POP
// wait ( 0 0$2 ) ;
2026: LD_INT 70
2028: PPUSH
2029: CALL_OW 67
// CenterOnUnits ( eon ) ;
2033: LD_INT 14
2035: PPUSH
2036: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2040: LD_INT 90
2042: PPUSH
2043: LD_INT 43
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 21
2051: NEG
2052: PPUSH
2053: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2057: LD_EXP 2
2061: PPUSH
2062: LD_INT 84
2064: PPUSH
2065: LD_INT 36
2067: PPUSH
2068: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2072: LD_EXP 2
2076: PPUSH
2077: LD_INT 14
2079: PPUSH
2080: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2084: LD_EXP 11
2088: PPUSH
2089: LD_INT 85
2091: PPUSH
2092: LD_INT 36
2094: PPUSH
2095: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2099: LD_EXP 11
2103: PPUSH
2104: LD_INT 14
2106: PPUSH
2107: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2111: LD_EXP 10
2115: PPUSH
2116: LD_INT 86
2118: PPUSH
2119: LD_INT 36
2121: PPUSH
2122: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2126: LD_EXP 10
2130: PPUSH
2131: LD_INT 14
2133: PPUSH
2134: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2138: LD_EXP 7
2142: PPUSH
2143: LD_INT 87
2145: PPUSH
2146: LD_INT 36
2148: PPUSH
2149: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2153: LD_EXP 7
2157: PPUSH
2158: LD_INT 14
2160: PPUSH
2161: CALL_OW 179
// wait ( 0 0$3 ) ;
2165: LD_INT 105
2167: PPUSH
2168: CALL_OW 67
// p := 0 ;
2172: LD_ADDR_VAR 0 4
2176: PUSH
2177: LD_INT 0
2179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2180: LD_INT 35
2182: PPUSH
2183: CALL_OW 67
// p := p + 1 ;
2187: LD_ADDR_VAR 0 4
2191: PUSH
2192: LD_VAR 0 4
2196: PUSH
2197: LD_INT 1
2199: PLUS
2200: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2201: LD_EXP 1
2205: PPUSH
2206: LD_INT 6
2208: PPUSH
2209: CALL_OW 308
2213: PUSH
2214: LD_VAR 0 4
2218: PUSH
2219: LD_INT 10
2221: GREATER
2222: OR
2223: IFFALSE 2180
// heikeNearbyEon := true ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2233: LD_EXP 6
2237: PPUSH
2238: LD_INT 88
2240: PPUSH
2241: LD_INT 37
2243: PPUSH
2244: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2248: LD_EXP 6
2252: PPUSH
2253: LD_EXP 13
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2266: LD_EXP 13
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PPUSH
2275: LD_INT 89
2277: PPUSH
2278: LD_INT 37
2280: PPUSH
2281: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2285: LD_EXP 13
2289: PUSH
2290: LD_INT 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 91
2296: PPUSH
2297: LD_INT 39
2299: PPUSH
2300: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2304: LD_EXP 13
2308: PPUSH
2309: LD_EXP 11
2313: PPUSH
2314: CALL_OW 179
// wait ( 0 0$1 ) ;
2318: LD_INT 35
2320: PPUSH
2321: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2325: LD_EXP 13
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: LD_STRING DS-eon-1
2336: PPUSH
2337: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2341: LD_EXP 6
2345: PPUSH
2346: LD_STRING DSh-eon-1
2348: PPUSH
2349: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2353: LD_EXP 13
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: LD_STRING DS-eon-2
2364: PPUSH
2365: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2369: LD_EXP 6
2373: PPUSH
2374: LD_STRING DSh-eon-1a
2376: PPUSH
2377: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2381: LD_EXP 13
2385: PUSH
2386: LD_INT 1
2388: ARRAY
2389: PPUSH
2390: LD_INT 92
2392: PPUSH
2393: LD_INT 43
2395: PPUSH
2396: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2400: LD_EXP 13
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PPUSH
2409: LD_INT 14
2411: PPUSH
2412: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2416: LD_EXP 13
2420: PUSH
2421: LD_INT 2
2423: ARRAY
2424: PPUSH
2425: LD_INT 93
2427: PPUSH
2428: LD_INT 41
2430: PPUSH
2431: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2435: LD_EXP 13
2439: PUSH
2440: LD_INT 2
2442: ARRAY
2443: PPUSH
2444: LD_INT 93
2446: PPUSH
2447: LD_INT 40
2449: PPUSH
2450: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2454: LD_EXP 6
2458: PPUSH
2459: LD_INT 88
2461: PPUSH
2462: LD_INT 41
2464: PPUSH
2465: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2469: LD_EXP 6
2473: PPUSH
2474: LD_INT 87
2476: PPUSH
2477: LD_INT 41
2479: PPUSH
2480: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2484: LD_INT 35
2486: PPUSH
2487: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2491: LD_EXP 6
2495: PPUSH
2496: LD_INT 88
2498: PPUSH
2499: LD_INT 41
2501: PPUSH
2502: CALL_OW 307
2506: IFFALSE 2484
// wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2515: LD_EXP 6
2519: PPUSH
2520: LD_STRING DSh-eon-2
2522: PPUSH
2523: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2527: LD_EXP 11
2531: PPUSH
2532: LD_INT 87
2534: PPUSH
2535: LD_INT 40
2537: PPUSH
2538: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2542: LD_EXP 11
2546: PPUSH
2547: LD_INT 86
2549: PPUSH
2550: LD_INT 40
2552: PPUSH
2553: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2557: LD_INT 35
2559: PPUSH
2560: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2564: LD_EXP 11
2568: PPUSH
2569: LD_INT 87
2571: PPUSH
2572: LD_INT 40
2574: PPUSH
2575: CALL_OW 307
2579: IFFALSE 2557
// Say ( Shariff , DShar-eon-3 ) ;
2581: LD_EXP 11
2585: PPUSH
2586: LD_STRING DShar-eon-3
2588: PPUSH
2589: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2600: LD_EXP 5
2604: PPUSH
2605: LD_EXP 1
2609: PPUSH
2610: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2614: LD_EXP 11
2618: PPUSH
2619: LD_STRING DShar-eon-4
2621: PPUSH
2622: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2626: LD_EXP 5
2630: PPUSH
2631: LD_STRING DK-eon-4
2633: PPUSH
2634: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2638: LD_EXP 5
2642: PPUSH
2643: LD_INT 14
2645: PPUSH
2646: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2650: LD_INT 35
2652: PPUSH
2653: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2657: LD_EXP 5
2661: PPUSH
2662: CALL_OW 305
2666: NOT
2667: IFFALSE 2650
// ComTurnUnit ( Shariff , Heike ) ;
2669: LD_EXP 11
2673: PPUSH
2674: LD_EXP 1
2678: PPUSH
2679: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_STRING DShar-eon-5
2690: PPUSH
2691: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2695: LD_EXP 1
2699: PPUSH
2700: LD_INT 91
2702: PPUSH
2703: LD_INT 44
2705: PPUSH
2706: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2710: LD_EXP 1
2714: PPUSH
2715: LD_INT 14
2717: PPUSH
2718: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2722: LD_INT 35
2724: PPUSH
2725: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2729: LD_EXP 1
2733: PPUSH
2734: LD_INT 91
2736: PPUSH
2737: LD_INT 44
2739: PPUSH
2740: CALL_OW 307
2744: IFFALSE 2722
// Say ( Heike , DH-eon-5 ) ;
2746: LD_EXP 1
2750: PPUSH
2751: LD_STRING DH-eon-5
2753: PPUSH
2754: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2758: LD_EXP 1
2762: PPUSH
2763: LD_INT 14
2765: PPUSH
2766: CALL_OW 120
// wait ( 0 0$2 ) ;
2770: LD_INT 70
2772: PPUSH
2773: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2777: LD_INT 1
2779: PPUSH
2780: LD_STRING %_cont
2782: PPUSH
2783: CALL_OW 340
// InGameOff ;
2787: CALL_OW 9
// end ;
2791: PPOPN 4
2793: END
// every 3 trigger IsSelected ( Kaia ) do
2794: LD_EXP 5
2798: PPUSH
2799: CALL_OW 306
2803: IFFALSE 2820
2805: GO 2807
2807: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2808: LD_EXP 5
2812: PPUSH
2813: LD_INT 42
2815: PPUSH
2816: CALL_OW 582
2820: END
// export function PrepareHeikeGroup ; begin
2821: LD_INT 0
2823: PPUSH
// uc_side := 2 ;
2824: LD_ADDR_OWVAR 20
2828: PUSH
2829: LD_INT 2
2831: ST_TO_ADDR
// uc_nation := 2 ;
2832: LD_ADDR_OWVAR 21
2836: PUSH
2837: LD_INT 2
2839: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2840: LD_ADDR_EXP 1
2844: PUSH
2845: LD_STRING Heike
2847: PPUSH
2848: CALL_OW 25
2852: ST_TO_ADDR
// uc_side := 5 ;
2853: LD_ADDR_OWVAR 20
2857: PUSH
2858: LD_INT 5
2860: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2861: LD_ADDR_EXP 5
2865: PUSH
2866: LD_STRING Kaia
2868: PPUSH
2869: CALL_OW 25
2873: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2874: LD_EXP 1
2878: PPUSH
2879: LD_INT 3
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2889: LD_EXP 5
2893: PPUSH
2894: LD_INT 3
2896: PPUSH
2897: LD_INT 0
2899: PPUSH
2900: CALL_OW 49
// end ;
2904: LD_VAR 0 1
2908: RET
// export function PrepareSheikGroup ; var un , i ; begin
2909: LD_INT 0
2911: PPUSH
2912: PPUSH
2913: PPUSH
// uc_side := 5 ;
2914: LD_ADDR_OWVAR 20
2918: PUSH
2919: LD_INT 5
2921: ST_TO_ADDR
// uc_nation := 2 ;
2922: LD_ADDR_OWVAR 21
2926: PUSH
2927: LD_INT 2
2929: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2930: LD_ADDR_EXP 10
2934: PUSH
2935: LD_STRING Ali
2937: PPUSH
2938: CALL_OW 25
2942: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2943: LD_ADDR_EXP 11
2947: PUSH
2948: LD_STRING Abdul
2950: PPUSH
2951: CALL_OW 25
2955: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2956: LD_ADDR_EXP 2
2960: PUSH
2961: LD_STRING Omar
2963: PPUSH
2964: CALL_OW 25
2968: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2969: LD_ADDR_EXP 7
2973: PUSH
2974: LD_STRING Mahtab
2976: PPUSH
2977: CALL_OW 25
2981: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2982: LD_ADDR_EXP 6
2986: PUSH
2987: LD_STRING Shahrzad
2989: PPUSH
2990: CALL_OW 25
2994: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2995: LD_EXP 10
2999: PPUSH
3000: LD_INT 85
3002: PPUSH
3003: LD_INT 37
3005: PPUSH
3006: LD_INT 0
3008: PPUSH
3009: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3013: LD_EXP 11
3017: PPUSH
3018: LD_INT 87
3020: PPUSH
3021: LD_INT 37
3023: PPUSH
3024: LD_INT 0
3026: PPUSH
3027: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3031: LD_EXP 2
3035: PPUSH
3036: LD_INT 85
3038: PPUSH
3039: LD_INT 35
3041: PPUSH
3042: LD_INT 0
3044: PPUSH
3045: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3049: LD_EXP 7
3053: PPUSH
3054: LD_INT 86
3056: PPUSH
3057: LD_INT 39
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3067: LD_EXP 6
3071: PPUSH
3072: LD_INT 88
3074: PPUSH
3075: LD_INT 39
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3085: LD_EXP 10
3089: PPUSH
3090: LD_EXP 11
3094: PPUSH
3095: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3099: LD_EXP 11
3103: PPUSH
3104: LD_EXP 10
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3113: LD_EXP 2
3117: PPUSH
3118: LD_EXP 11
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3127: LD_EXP 7
3131: PUSH
3132: LD_EXP 6
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PPUSH
3141: LD_EXP 11
3145: PPUSH
3146: CALL_OW 119
// for i := 1 to 2 do
3150: LD_ADDR_VAR 0 3
3154: PUSH
3155: DOUBLE
3156: LD_INT 1
3158: DEC
3159: ST_TO_ADDR
3160: LD_INT 2
3162: PUSH
3163: FOR_TO
3164: IFFALSE 3250
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3166: LD_INT 2
3168: PPUSH
3169: LD_INT 4
3171: PPUSH
3172: LD_INT 6
3174: PPUSH
3175: CALL_OW 380
// un := CreateHuman ;
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: CALL_OW 44
3188: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3189: LD_VAR 0 2
3193: PPUSH
3194: LD_INT 90
3196: PPUSH
3197: LD_INT 44
3199: PPUSH
3200: LD_INT 3
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3210: LD_VAR 0 2
3214: PPUSH
3215: LD_INT 91
3217: PPUSH
3218: LD_INT 43
3220: PPUSH
3221: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3225: LD_ADDR_EXP 13
3229: PUSH
3230: LD_EXP 13
3234: PPUSH
3235: LD_INT 1
3237: PPUSH
3238: LD_VAR 0 2
3242: PPUSH
3243: CALL_OW 2
3247: ST_TO_ADDR
// end ;
3248: GO 3163
3250: POP
3251: POP
// scientists := scientists diff 0 ;
3252: LD_ADDR_EXP 13
3256: PUSH
3257: LD_EXP 13
3261: PUSH
3262: LD_INT 0
3264: DIFF
3265: ST_TO_ADDR
// end ;
3266: LD_VAR 0 1
3270: RET
// export function PrepareKurtGroup ; var i ; begin
3271: LD_INT 0
3273: PPUSH
3274: PPUSH
// uc_side := 5 ;
3275: LD_ADDR_OWVAR 20
3279: PUSH
3280: LD_INT 5
3282: ST_TO_ADDR
// uc_nation := 2 ;
3283: LD_ADDR_OWVAR 21
3287: PUSH
3288: LD_INT 2
3290: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3291: LD_ADDR_EXP 8
3295: PUSH
3296: LD_STRING Kurt
3298: PPUSH
3299: CALL_OW 25
3303: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3304: LD_ADDR_EXP 4
3308: PUSH
3309: LD_STRING Olaf
3311: PPUSH
3312: CALL_OW 25
3316: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3317: LD_ADDR_EXP 9
3321: PUSH
3322: LD_STRING Hans
3324: PPUSH
3325: CALL_OW 25
3329: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3330: LD_ADDR_VAR 0 2
3334: PUSH
3335: LD_EXP 8
3339: PUSH
3340: LD_EXP 9
3344: PUSH
3345: LD_EXP 4
3349: PUSH
3350: EMPTY
3351: LIST
3352: LIST
3353: LIST
3354: PUSH
3355: FOR_IN
3356: IFFALSE 3375
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3358: LD_VAR 0 2
3362: PPUSH
3363: LD_INT 10
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
3373: GO 3355
3375: POP
3376: POP
// ComTurnUnit ( Kurt , Hans ) ;
3377: LD_EXP 8
3381: PPUSH
3382: LD_EXP 9
3386: PPUSH
3387: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3391: LD_EXP 4
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3405: LD_EXP 9
3409: PPUSH
3410: LD_EXP 4
3414: PPUSH
3415: CALL_OW 119
// end ;
3419: LD_VAR 0 1
3423: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3424: LD_INT 0
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3430: LD_ADDR_VAR 0 2
3434: PUSH
3435: LD_INT 21
3437: PUSH
3438: LD_INT 3
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PPUSH
3445: CALL_OW 69
3449: PUSH
3450: LD_INT 14
3452: DIFF
3453: PUSH
3454: FOR_IN
3455: IFFALSE 3535
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3457: LD_VAR 0 2
3461: PPUSH
3462: CALL_OW 266
3466: PUSH
3467: LD_INT 6
3469: PUSH
3470: LD_INT 31
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: IN
3477: IFFALSE 3501
// SetLives ( i , rand ( 500 , 600 ) ) else
3479: LD_VAR 0 2
3483: PPUSH
3484: LD_INT 500
3486: PPUSH
3487: LD_INT 600
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 234
3499: GO 3521
// SetLives ( i , rand ( 300 , 499 ) ) ;
3501: LD_VAR 0 2
3505: PPUSH
3506: LD_INT 300
3508: PPUSH
3509: LD_INT 499
3511: PPUSH
3512: CALL_OW 12
3516: PPUSH
3517: CALL_OW 234
// SetSide ( i , 5 ) ;
3521: LD_VAR 0 2
3525: PPUSH
3526: LD_INT 5
3528: PPUSH
3529: CALL_OW 235
// end ;
3533: GO 3454
3535: POP
3536: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3537: LD_ADDR_VAR 0 4
3541: PUSH
3542: LD_INT 9
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 517
3552: ST_TO_ADDR
// uc_side := 4 ;
3553: LD_ADDR_OWVAR 20
3557: PUSH
3558: LD_INT 4
3560: ST_TO_ADDR
// uc_nation := 1 ;
3561: LD_ADDR_OWVAR 21
3565: PUSH
3566: LD_INT 1
3568: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: DOUBLE
3575: LD_INT 1
3577: DEC
3578: ST_TO_ADDR
3579: LD_VAR 0 4
3583: PUSH
3584: LD_INT 1
3586: ARRAY
3587: PUSH
3588: FOR_TO
3589: IFFALSE 3665
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3591: LD_INT 0
3593: PPUSH
3594: LD_INT 1
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: LD_INT 4
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: LIST
3607: PUSH
3608: LD_VAR 0 2
3612: PUSH
3613: LD_INT 3
3615: MOD
3616: PUSH
3617: LD_INT 1
3619: PLUS
3620: ARRAY
3621: PPUSH
3622: LD_INT 0
3624: PPUSH
3625: CALL_OW 380
// un := CreateHuman ;
3629: LD_ADDR_VAR 0 3
3633: PUSH
3634: CALL_OW 44
3638: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3639: LD_VAR 0 3
3643: PPUSH
3644: LD_INT 9
3646: PPUSH
3647: LD_INT 0
3649: PPUSH
3650: CALL_OW 49
// KillUnit ( un ) ;
3654: LD_VAR 0 3
3658: PPUSH
3659: CALL_OW 66
// end ;
3663: GO 3588
3665: POP
3666: POP
// end ;
3667: LD_VAR 0 1
3671: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
3677: PPUSH
3678: PPUSH
3679: PPUSH
3680: PPUSH
// uc_side := 5 ;
3681: LD_ADDR_OWVAR 20
3685: PUSH
3686: LD_INT 5
3688: ST_TO_ADDR
// uc_nation := 2 ;
3689: LD_ADDR_OWVAR 21
3693: PUSH
3694: LD_INT 2
3696: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3697: LD_ADDR_VAR 0 6
3701: PUSH
3702: LD_INT 2
3704: PUSH
3705: LD_INT 4
3707: PUSH
3708: LD_INT 5
3710: PUSH
3711: LD_INT 14
3713: PUSH
3714: EMPTY
3715: LIST
3716: LIST
3717: LIST
3718: LIST
3719: ST_TO_ADDR
// InitHc ;
3720: CALL_OW 19
// for i in area do
3724: LD_ADDR_VAR 0 2
3728: PUSH
3729: LD_VAR 0 6
3733: PUSH
3734: FOR_IN
3735: IFFALSE 3899
// begin tmp := AreaToList ( i , 0 ) ;
3737: LD_ADDR_VAR 0 5
3741: PUSH
3742: LD_VAR 0 2
3746: PPUSH
3747: LD_INT 0
3749: PPUSH
3750: CALL_OW 517
3754: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: DOUBLE
3761: LD_INT 1
3763: DEC
3764: ST_TO_ADDR
3765: LD_VAR 0 5
3769: PUSH
3770: LD_INT 1
3772: ARRAY
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3895
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 1
3782: PPUSH
3783: LD_INT 3
3785: PPUSH
3786: CALL_OW 380
// un := CreateHuman ;
3790: LD_ADDR_VAR 0 7
3794: PUSH
3795: CALL_OW 44
3799: ST_TO_ADDR
// if i = spawnBaseArea3 then
3800: LD_VAR 0 2
3804: PUSH
3805: LD_INT 5
3807: EQUAL
3808: IFFALSE 3826
// eonGuards := eonGuards ^ un ;
3810: LD_ADDR_EXP 14
3814: PUSH
3815: LD_EXP 14
3819: PUSH
3820: LD_VAR 0 7
3824: ADD
3825: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3826: LD_VAR 0 7
3830: PPUSH
3831: LD_VAR 0 2
3835: PPUSH
3836: LD_INT 0
3838: PPUSH
3839: CALL_OW 49
// ComHold ( un ) ;
3843: LD_VAR 0 7
3847: PPUSH
3848: CALL_OW 140
// if i = spawnBaseArea4 then
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 14
3859: EQUAL
3860: IFFALSE 3893
// begin firstGroup := firstGroup ^ un ;
3862: LD_ADDR_EXP 15
3866: PUSH
3867: LD_EXP 15
3871: PUSH
3872: LD_VAR 0 7
3876: ADD
3877: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3878: LD_VAR 0 7
3882: PPUSH
3883: LD_INT 108
3885: PPUSH
3886: LD_INT 47
3888: PPUSH
3889: CALL_OW 118
// end ; end ;
3893: GO 3774
3895: POP
3896: POP
// end ;
3897: GO 3734
3899: POP
3900: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3901: LD_ADDR_VAR 0 2
3905: PUSH
3906: DOUBLE
3907: LD_INT 1
3909: DEC
3910: ST_TO_ADDR
3911: LD_INT 30
3913: PUSH
3914: LD_INT 31
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PPUSH
3921: CALL_OW 69
3925: PUSH
3926: FOR_TO
3927: IFFALSE 4021
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_INT 30
3936: PUSH
3937: LD_INT 31
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PPUSH
3944: CALL_OW 69
3948: PUSH
3949: LD_VAR 0 2
3953: ARRAY
3954: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 3
3963: PPUSH
3964: CALL_OW 380
// un := CreateHuman ;
3968: LD_ADDR_VAR 0 7
3972: PUSH
3973: CALL_OW 44
3977: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3978: LD_VAR 0 7
3982: PPUSH
3983: LD_VAR 0 4
3987: PPUSH
3988: CALL_OW 254
3992: PUSH
3993: LD_INT 3
3995: PLUS
3996: PUSH
3997: LD_INT 6
3999: MOD
4000: PPUSH
4001: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4005: LD_VAR 0 7
4009: PPUSH
4010: LD_VAR 0 4
4014: PPUSH
4015: CALL_OW 52
// end ;
4019: GO 3926
4021: POP
4022: POP
// end ; end_of_file
4023: LD_VAR 0 1
4027: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4028: LD_VAR 0 1
4032: PUSH
4033: LD_INT 2
4035: EQUAL
4036: PUSH
4037: LD_VAR 0 2
4041: PUSH
4042: LD_INT 5
4044: EQUAL
4045: AND
4046: IFFALSE 4072
// begin kaiaAttacked := true ;
4048: LD_ADDR_EXP 22
4052: PUSH
4053: LD_INT 1
4055: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4056: LD_INT 2
4058: PPUSH
4059: LD_INT 5
4061: PPUSH
4062: LD_INT 2
4064: PPUSH
4065: LD_INT 1
4067: PPUSH
4068: CALL_OW 80
// end ; end ;
4072: PPOPN 2
4074: END
// every 0 0$1 trigger scientists do var i ;
4075: LD_EXP 13
4079: IFFALSE 4287
4081: GO 4083
4083: DISABLE
4084: LD_INT 0
4086: PPUSH
// begin repeat for i in scientists do
4087: LD_ADDR_VAR 0 1
4091: PUSH
4092: LD_EXP 13
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4272
// begin wait ( 0 0$1 ) ;
4100: LD_INT 35
4102: PPUSH
4103: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4107: LD_VAR 0 1
4111: PPUSH
4112: LD_INT 11
4114: PUSH
4115: LD_INT 13
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_VAR 0 1
4126: PUSH
4127: LD_INT 2
4129: MOD
4130: PUSH
4131: LD_INT 1
4133: PLUS
4134: ARRAY
4135: PPUSH
4136: CALL_OW 308
4140: NOT
4141: IFFALSE 4176
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4143: LD_VAR 0 1
4147: PPUSH
4148: LD_INT 11
4150: PUSH
4151: LD_INT 13
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PUSH
4158: LD_VAR 0 1
4162: PUSH
4163: LD_INT 2
4165: MOD
4166: PUSH
4167: LD_INT 1
4169: PLUS
4170: ARRAY
4171: PPUSH
4172: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4176: LD_VAR 0 1
4180: PPUSH
4181: LD_INT 14
4183: PPUSH
4184: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4188: LD_VAR 0 1
4192: PPUSH
4193: LD_INT 70
4195: PPUSH
4196: CALL_OW 202
// if rand ( 0 , 1 ) then
4200: LD_INT 0
4202: PPUSH
4203: LD_INT 1
4205: PPUSH
4206: CALL_OW 12
4210: IFFALSE 4224
// AddComAnim ( i , 15 ) ;
4212: LD_VAR 0 1
4216: PPUSH
4217: LD_INT 15
4219: PPUSH
4220: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4224: LD_VAR 0 1
4228: PPUSH
4229: LD_INT 35
4231: PPUSH
4232: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4236: LD_VAR 0 1
4240: PPUSH
4241: LD_INT 12
4243: PPUSH
4244: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4248: LD_VAR 0 1
4252: PPUSH
4253: LD_INT 93
4255: PPUSH
4256: LD_INT 40
4258: PPUSH
4259: CALL_OW 178
// wait ( 0 0$1 ) ;
4263: LD_INT 35
4265: PPUSH
4266: CALL_OW 67
// end ;
4270: GO 4097
4272: POP
4273: POP
// wait ( 0 0$10 ) ;
4274: LD_INT 350
4276: PPUSH
4277: CALL_OW 67
// until heikeNearbyEon ;
4281: LD_EXP 20
4285: IFFALSE 4087
// end ; end_of_file
4287: PPOPN 1
4289: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4290: LD_VAR 0 2
4294: PUSH
4295: LD_INT 100
4297: EQUAL
4298: IFFALSE 5247
// begin if not StreamModeActive then
4300: LD_EXP 23
4304: NOT
4305: IFFALSE 4315
// StreamModeActive := true ;
4307: LD_ADDR_EXP 23
4311: PUSH
4312: LD_INT 1
4314: ST_TO_ADDR
// if p3 = 0 then
4315: LD_VAR 0 3
4319: PUSH
4320: LD_INT 0
4322: EQUAL
4323: IFFALSE 4329
// InitStreamMode ;
4325: CALL 5405 0 0
// if p3 = 1 then
4329: LD_VAR 0 3
4333: PUSH
4334: LD_INT 1
4336: EQUAL
4337: IFFALSE 4347
// sRocket := true ;
4339: LD_ADDR_EXP 28
4343: PUSH
4344: LD_INT 1
4346: ST_TO_ADDR
// if p3 = 2 then
4347: LD_VAR 0 3
4351: PUSH
4352: LD_INT 2
4354: EQUAL
4355: IFFALSE 4365
// sSpeed := true ;
4357: LD_ADDR_EXP 27
4361: PUSH
4362: LD_INT 1
4364: ST_TO_ADDR
// if p3 = 3 then
4365: LD_VAR 0 3
4369: PUSH
4370: LD_INT 3
4372: EQUAL
4373: IFFALSE 4383
// sEngine := true ;
4375: LD_ADDR_EXP 29
4379: PUSH
4380: LD_INT 1
4382: ST_TO_ADDR
// if p3 = 4 then
4383: LD_VAR 0 3
4387: PUSH
4388: LD_INT 4
4390: EQUAL
4391: IFFALSE 4401
// sSpec := true ;
4393: LD_ADDR_EXP 26
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// if p3 = 5 then
4401: LD_VAR 0 3
4405: PUSH
4406: LD_INT 5
4408: EQUAL
4409: IFFALSE 4419
// sLevel := true ;
4411: LD_ADDR_EXP 30
4415: PUSH
4416: LD_INT 1
4418: ST_TO_ADDR
// if p3 = 6 then
4419: LD_VAR 0 3
4423: PUSH
4424: LD_INT 6
4426: EQUAL
4427: IFFALSE 4437
// sArmoury := true ;
4429: LD_ADDR_EXP 31
4433: PUSH
4434: LD_INT 1
4436: ST_TO_ADDR
// if p3 = 7 then
4437: LD_VAR 0 3
4441: PUSH
4442: LD_INT 7
4444: EQUAL
4445: IFFALSE 4455
// sRadar := true ;
4447: LD_ADDR_EXP 32
4451: PUSH
4452: LD_INT 1
4454: ST_TO_ADDR
// if p3 = 8 then
4455: LD_VAR 0 3
4459: PUSH
4460: LD_INT 8
4462: EQUAL
4463: IFFALSE 4473
// sBunker := true ;
4465: LD_ADDR_EXP 33
4469: PUSH
4470: LD_INT 1
4472: ST_TO_ADDR
// if p3 = 9 then
4473: LD_VAR 0 3
4477: PUSH
4478: LD_INT 9
4480: EQUAL
4481: IFFALSE 4491
// sHack := true ;
4483: LD_ADDR_EXP 34
4487: PUSH
4488: LD_INT 1
4490: ST_TO_ADDR
// if p3 = 10 then
4491: LD_VAR 0 3
4495: PUSH
4496: LD_INT 10
4498: EQUAL
4499: IFFALSE 4509
// sFire := true ;
4501: LD_ADDR_EXP 35
4505: PUSH
4506: LD_INT 1
4508: ST_TO_ADDR
// if p3 = 11 then
4509: LD_VAR 0 3
4513: PUSH
4514: LD_INT 11
4516: EQUAL
4517: IFFALSE 4527
// sRefresh := true ;
4519: LD_ADDR_EXP 36
4523: PUSH
4524: LD_INT 1
4526: ST_TO_ADDR
// if p3 = 12 then
4527: LD_VAR 0 3
4531: PUSH
4532: LD_INT 12
4534: EQUAL
4535: IFFALSE 4545
// sExp := true ;
4537: LD_ADDR_EXP 37
4541: PUSH
4542: LD_INT 1
4544: ST_TO_ADDR
// if p3 = 13 then
4545: LD_VAR 0 3
4549: PUSH
4550: LD_INT 13
4552: EQUAL
4553: IFFALSE 4563
// sDepot := true ;
4555: LD_ADDR_EXP 38
4559: PUSH
4560: LD_INT 1
4562: ST_TO_ADDR
// if p3 = 14 then
4563: LD_VAR 0 3
4567: PUSH
4568: LD_INT 14
4570: EQUAL
4571: IFFALSE 4581
// sFlag := true ;
4573: LD_ADDR_EXP 39
4577: PUSH
4578: LD_INT 1
4580: ST_TO_ADDR
// if p3 = 15 then
4581: LD_VAR 0 3
4585: PUSH
4586: LD_INT 15
4588: EQUAL
4589: IFFALSE 4599
// sKamikadze := true ;
4591: LD_ADDR_EXP 47
4595: PUSH
4596: LD_INT 1
4598: ST_TO_ADDR
// if p3 = 16 then
4599: LD_VAR 0 3
4603: PUSH
4604: LD_INT 16
4606: EQUAL
4607: IFFALSE 4617
// sTroll := true ;
4609: LD_ADDR_EXP 48
4613: PUSH
4614: LD_INT 1
4616: ST_TO_ADDR
// if p3 = 17 then
4617: LD_VAR 0 3
4621: PUSH
4622: LD_INT 17
4624: EQUAL
4625: IFFALSE 4635
// sSlow := true ;
4627: LD_ADDR_EXP 49
4631: PUSH
4632: LD_INT 1
4634: ST_TO_ADDR
// if p3 = 18 then
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 18
4642: EQUAL
4643: IFFALSE 4653
// sLack := true ;
4645: LD_ADDR_EXP 50
4649: PUSH
4650: LD_INT 1
4652: ST_TO_ADDR
// if p3 = 19 then
4653: LD_VAR 0 3
4657: PUSH
4658: LD_INT 19
4660: EQUAL
4661: IFFALSE 4671
// sTank := true ;
4663: LD_ADDR_EXP 52
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// if p3 = 20 then
4671: LD_VAR 0 3
4675: PUSH
4676: LD_INT 20
4678: EQUAL
4679: IFFALSE 4689
// sRemote := true ;
4681: LD_ADDR_EXP 53
4685: PUSH
4686: LD_INT 1
4688: ST_TO_ADDR
// if p3 = 21 then
4689: LD_VAR 0 3
4693: PUSH
4694: LD_INT 21
4696: EQUAL
4697: IFFALSE 4707
// sPowell := true ;
4699: LD_ADDR_EXP 54
4703: PUSH
4704: LD_INT 1
4706: ST_TO_ADDR
// if p3 = 22 then
4707: LD_VAR 0 3
4711: PUSH
4712: LD_INT 22
4714: EQUAL
4715: IFFALSE 4725
// sTeleport := true ;
4717: LD_ADDR_EXP 57
4721: PUSH
4722: LD_INT 1
4724: ST_TO_ADDR
// if p3 = 23 then
4725: LD_VAR 0 3
4729: PUSH
4730: LD_INT 23
4732: EQUAL
4733: IFFALSE 4743
// sOilTower := true ;
4735: LD_ADDR_EXP 59
4739: PUSH
4740: LD_INT 1
4742: ST_TO_ADDR
// if p3 = 24 then
4743: LD_VAR 0 3
4747: PUSH
4748: LD_INT 24
4750: EQUAL
4751: IFFALSE 4761
// sShovel := true ;
4753: LD_ADDR_EXP 60
4757: PUSH
4758: LD_INT 1
4760: ST_TO_ADDR
// if p3 = 25 then
4761: LD_VAR 0 3
4765: PUSH
4766: LD_INT 25
4768: EQUAL
4769: IFFALSE 4779
// sSheik := true ;
4771: LD_ADDR_EXP 61
4775: PUSH
4776: LD_INT 1
4778: ST_TO_ADDR
// if p3 = 26 then
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 26
4786: EQUAL
4787: IFFALSE 4797
// sEarthquake := true ;
4789: LD_ADDR_EXP 63
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if p3 = 27 then
4797: LD_VAR 0 3
4801: PUSH
4802: LD_INT 27
4804: EQUAL
4805: IFFALSE 4815
// sAI := true ;
4807: LD_ADDR_EXP 64
4811: PUSH
4812: LD_INT 1
4814: ST_TO_ADDR
// if p3 = 28 then
4815: LD_VAR 0 3
4819: PUSH
4820: LD_INT 28
4822: EQUAL
4823: IFFALSE 4833
// sCargo := true ;
4825: LD_ADDR_EXP 67
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// if p3 = 29 then
4833: LD_VAR 0 3
4837: PUSH
4838: LD_INT 29
4840: EQUAL
4841: IFFALSE 4851
// sDLaser := true ;
4843: LD_ADDR_EXP 68
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
// if p3 = 30 then
4851: LD_VAR 0 3
4855: PUSH
4856: LD_INT 30
4858: EQUAL
4859: IFFALSE 4869
// sExchange := true ;
4861: LD_ADDR_EXP 69
4865: PUSH
4866: LD_INT 1
4868: ST_TO_ADDR
// if p3 = 31 then
4869: LD_VAR 0 3
4873: PUSH
4874: LD_INT 31
4876: EQUAL
4877: IFFALSE 4887
// sFac := true ;
4879: LD_ADDR_EXP 70
4883: PUSH
4884: LD_INT 1
4886: ST_TO_ADDR
// if p3 = 32 then
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 32
4894: EQUAL
4895: IFFALSE 4905
// sPower := true ;
4897: LD_ADDR_EXP 71
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// if p3 = 33 then
4905: LD_VAR 0 3
4909: PUSH
4910: LD_INT 33
4912: EQUAL
4913: IFFALSE 4923
// sRandom := true ;
4915: LD_ADDR_EXP 72
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// if p3 = 34 then
4923: LD_VAR 0 3
4927: PUSH
4928: LD_INT 34
4930: EQUAL
4931: IFFALSE 4941
// sShield := true ;
4933: LD_ADDR_EXP 73
4937: PUSH
4938: LD_INT 1
4940: ST_TO_ADDR
// if p3 = 35 then
4941: LD_VAR 0 3
4945: PUSH
4946: LD_INT 35
4948: EQUAL
4949: IFFALSE 4959
// sTime := true ;
4951: LD_ADDR_EXP 74
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// if p3 = 36 then
4959: LD_VAR 0 3
4963: PUSH
4964: LD_INT 36
4966: EQUAL
4967: IFFALSE 4977
// sTools := true ;
4969: LD_ADDR_EXP 75
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// if p3 = 101 then
4977: LD_VAR 0 3
4981: PUSH
4982: LD_INT 101
4984: EQUAL
4985: IFFALSE 4995
// sSold := true ;
4987: LD_ADDR_EXP 40
4991: PUSH
4992: LD_INT 1
4994: ST_TO_ADDR
// if p3 = 102 then
4995: LD_VAR 0 3
4999: PUSH
5000: LD_INT 102
5002: EQUAL
5003: IFFALSE 5013
// sDiff := true ;
5005: LD_ADDR_EXP 41
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// if p3 = 103 then
5013: LD_VAR 0 3
5017: PUSH
5018: LD_INT 103
5020: EQUAL
5021: IFFALSE 5031
// sFog := true ;
5023: LD_ADDR_EXP 44
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// if p3 = 104 then
5031: LD_VAR 0 3
5035: PUSH
5036: LD_INT 104
5038: EQUAL
5039: IFFALSE 5049
// sReset := true ;
5041: LD_ADDR_EXP 45
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if p3 = 105 then
5049: LD_VAR 0 3
5053: PUSH
5054: LD_INT 105
5056: EQUAL
5057: IFFALSE 5067
// sSun := true ;
5059: LD_ADDR_EXP 46
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// if p3 = 106 then
5067: LD_VAR 0 3
5071: PUSH
5072: LD_INT 106
5074: EQUAL
5075: IFFALSE 5085
// sTiger := true ;
5077: LD_ADDR_EXP 42
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// if p3 = 107 then
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 107
5092: EQUAL
5093: IFFALSE 5103
// sBomb := true ;
5095: LD_ADDR_EXP 43
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// if p3 = 108 then
5103: LD_VAR 0 3
5107: PUSH
5108: LD_INT 108
5110: EQUAL
5111: IFFALSE 5121
// sWound := true ;
5113: LD_ADDR_EXP 51
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// if p3 = 109 then
5121: LD_VAR 0 3
5125: PUSH
5126: LD_INT 109
5128: EQUAL
5129: IFFALSE 5139
// sBetray := true ;
5131: LD_ADDR_EXP 55
5135: PUSH
5136: LD_INT 1
5138: ST_TO_ADDR
// if p3 = 110 then
5139: LD_VAR 0 3
5143: PUSH
5144: LD_INT 110
5146: EQUAL
5147: IFFALSE 5157
// sContamin := true ;
5149: LD_ADDR_EXP 56
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// if p3 = 111 then
5157: LD_VAR 0 3
5161: PUSH
5162: LD_INT 111
5164: EQUAL
5165: IFFALSE 5175
// sOil := true ;
5167: LD_ADDR_EXP 58
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// if p3 = 112 then
5175: LD_VAR 0 3
5179: PUSH
5180: LD_INT 112
5182: EQUAL
5183: IFFALSE 5193
// sStu := true ;
5185: LD_ADDR_EXP 62
5189: PUSH
5190: LD_INT 1
5192: ST_TO_ADDR
// if p3 = 113 then
5193: LD_VAR 0 3
5197: PUSH
5198: LD_INT 113
5200: EQUAL
5201: IFFALSE 5211
// sBazooka := true ;
5203: LD_ADDR_EXP 65
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// if p3 = 114 then
5211: LD_VAR 0 3
5215: PUSH
5216: LD_INT 114
5218: EQUAL
5219: IFFALSE 5229
// sMortar := true ;
5221: LD_ADDR_EXP 66
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// if p3 = 115 then
5229: LD_VAR 0 3
5233: PUSH
5234: LD_INT 115
5236: EQUAL
5237: IFFALSE 5247
// sRanger := true ;
5239: LD_ADDR_EXP 76
5243: PUSH
5244: LD_INT 1
5246: ST_TO_ADDR
// end ; if p2 = 101 then
5247: LD_VAR 0 2
5251: PUSH
5252: LD_INT 101
5254: EQUAL
5255: IFFALSE 5383
// begin case p3 of 1 :
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 1
5264: DOUBLE
5265: EQUAL
5266: IFTRUE 5270
5268: GO 5277
5270: POP
// hHackUnlimitedResources ; 2 :
5271: CALL 16418 0 0
5275: GO 5383
5277: LD_INT 2
5279: DOUBLE
5280: EQUAL
5281: IFTRUE 5285
5283: GO 5292
5285: POP
// hHackSetLevel10 ; 3 :
5286: CALL 16551 0 0
5290: GO 5383
5292: LD_INT 3
5294: DOUBLE
5295: EQUAL
5296: IFTRUE 5300
5298: GO 5307
5300: POP
// hHackSetLevel10YourUnits ; 4 :
5301: CALL 16636 0 0
5305: GO 5383
5307: LD_INT 4
5309: DOUBLE
5310: EQUAL
5311: IFTRUE 5315
5313: GO 5322
5315: POP
// hHackInvincible ; 5 :
5316: CALL 17084 0 0
5320: GO 5383
5322: LD_INT 5
5324: DOUBLE
5325: EQUAL
5326: IFTRUE 5330
5328: GO 5337
5330: POP
// hHackInvisible ; 6 :
5331: CALL 17195 0 0
5335: GO 5383
5337: LD_INT 6
5339: DOUBLE
5340: EQUAL
5341: IFTRUE 5345
5343: GO 5352
5345: POP
// hHackChangeYourSide ; 7 :
5346: CALL 17252 0 0
5350: GO 5383
5352: LD_INT 7
5354: DOUBLE
5355: EQUAL
5356: IFTRUE 5360
5358: GO 5367
5360: POP
// hHackChangeUnitSide ; 8 :
5361: CALL 17294 0 0
5365: GO 5383
5367: LD_INT 8
5369: DOUBLE
5370: EQUAL
5371: IFTRUE 5375
5373: GO 5382
5375: POP
// hHackFog ; end ;
5376: CALL 17395 0 0
5380: GO 5383
5382: POP
// end ; end ;
5383: PPOPN 6
5385: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5386: GO 5388
5388: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5389: LD_STRING initStreamRollete();
5391: PPUSH
5392: CALL_OW 559
// InitStreamMode ;
5396: CALL 5405 0 0
// DefineStreamItems ( ) ;
5400: CALL 5845 0 0
// end ;
5404: END
// function InitStreamMode ; begin
5405: LD_INT 0
5407: PPUSH
// streamModeActive := false ;
5408: LD_ADDR_EXP 23
5412: PUSH
5413: LD_INT 0
5415: ST_TO_ADDR
// normalCounter := 36 ;
5416: LD_ADDR_EXP 24
5420: PUSH
5421: LD_INT 36
5423: ST_TO_ADDR
// hardcoreCounter := 16 ;
5424: LD_ADDR_EXP 25
5428: PUSH
5429: LD_INT 16
5431: ST_TO_ADDR
// sRocket := false ;
5432: LD_ADDR_EXP 28
5436: PUSH
5437: LD_INT 0
5439: ST_TO_ADDR
// sSpeed := false ;
5440: LD_ADDR_EXP 27
5444: PUSH
5445: LD_INT 0
5447: ST_TO_ADDR
// sEngine := false ;
5448: LD_ADDR_EXP 29
5452: PUSH
5453: LD_INT 0
5455: ST_TO_ADDR
// sSpec := false ;
5456: LD_ADDR_EXP 26
5460: PUSH
5461: LD_INT 0
5463: ST_TO_ADDR
// sLevel := false ;
5464: LD_ADDR_EXP 30
5468: PUSH
5469: LD_INT 0
5471: ST_TO_ADDR
// sArmoury := false ;
5472: LD_ADDR_EXP 31
5476: PUSH
5477: LD_INT 0
5479: ST_TO_ADDR
// sRadar := false ;
5480: LD_ADDR_EXP 32
5484: PUSH
5485: LD_INT 0
5487: ST_TO_ADDR
// sBunker := false ;
5488: LD_ADDR_EXP 33
5492: PUSH
5493: LD_INT 0
5495: ST_TO_ADDR
// sHack := false ;
5496: LD_ADDR_EXP 34
5500: PUSH
5501: LD_INT 0
5503: ST_TO_ADDR
// sFire := false ;
5504: LD_ADDR_EXP 35
5508: PUSH
5509: LD_INT 0
5511: ST_TO_ADDR
// sRefresh := false ;
5512: LD_ADDR_EXP 36
5516: PUSH
5517: LD_INT 0
5519: ST_TO_ADDR
// sExp := false ;
5520: LD_ADDR_EXP 37
5524: PUSH
5525: LD_INT 0
5527: ST_TO_ADDR
// sDepot := false ;
5528: LD_ADDR_EXP 38
5532: PUSH
5533: LD_INT 0
5535: ST_TO_ADDR
// sFlag := false ;
5536: LD_ADDR_EXP 39
5540: PUSH
5541: LD_INT 0
5543: ST_TO_ADDR
// sKamikadze := false ;
5544: LD_ADDR_EXP 47
5548: PUSH
5549: LD_INT 0
5551: ST_TO_ADDR
// sTroll := false ;
5552: LD_ADDR_EXP 48
5556: PUSH
5557: LD_INT 0
5559: ST_TO_ADDR
// sSlow := false ;
5560: LD_ADDR_EXP 49
5564: PUSH
5565: LD_INT 0
5567: ST_TO_ADDR
// sLack := false ;
5568: LD_ADDR_EXP 50
5572: PUSH
5573: LD_INT 0
5575: ST_TO_ADDR
// sTank := false ;
5576: LD_ADDR_EXP 52
5580: PUSH
5581: LD_INT 0
5583: ST_TO_ADDR
// sRemote := false ;
5584: LD_ADDR_EXP 53
5588: PUSH
5589: LD_INT 0
5591: ST_TO_ADDR
// sPowell := false ;
5592: LD_ADDR_EXP 54
5596: PUSH
5597: LD_INT 0
5599: ST_TO_ADDR
// sTeleport := false ;
5600: LD_ADDR_EXP 57
5604: PUSH
5605: LD_INT 0
5607: ST_TO_ADDR
// sOilTower := false ;
5608: LD_ADDR_EXP 59
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// sShovel := false ;
5616: LD_ADDR_EXP 60
5620: PUSH
5621: LD_INT 0
5623: ST_TO_ADDR
// sSheik := false ;
5624: LD_ADDR_EXP 61
5628: PUSH
5629: LD_INT 0
5631: ST_TO_ADDR
// sEarthquake := false ;
5632: LD_ADDR_EXP 63
5636: PUSH
5637: LD_INT 0
5639: ST_TO_ADDR
// sAI := false ;
5640: LD_ADDR_EXP 64
5644: PUSH
5645: LD_INT 0
5647: ST_TO_ADDR
// sCargo := false ;
5648: LD_ADDR_EXP 67
5652: PUSH
5653: LD_INT 0
5655: ST_TO_ADDR
// sDLaser := false ;
5656: LD_ADDR_EXP 68
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// sExchange := false ;
5664: LD_ADDR_EXP 69
5668: PUSH
5669: LD_INT 0
5671: ST_TO_ADDR
// sFac := false ;
5672: LD_ADDR_EXP 70
5676: PUSH
5677: LD_INT 0
5679: ST_TO_ADDR
// sPower := false ;
5680: LD_ADDR_EXP 71
5684: PUSH
5685: LD_INT 0
5687: ST_TO_ADDR
// sRandom := false ;
5688: LD_ADDR_EXP 72
5692: PUSH
5693: LD_INT 0
5695: ST_TO_ADDR
// sShield := false ;
5696: LD_ADDR_EXP 73
5700: PUSH
5701: LD_INT 0
5703: ST_TO_ADDR
// sTime := false ;
5704: LD_ADDR_EXP 74
5708: PUSH
5709: LD_INT 0
5711: ST_TO_ADDR
// sTools := false ;
5712: LD_ADDR_EXP 75
5716: PUSH
5717: LD_INT 0
5719: ST_TO_ADDR
// sSold := false ;
5720: LD_ADDR_EXP 40
5724: PUSH
5725: LD_INT 0
5727: ST_TO_ADDR
// sDiff := false ;
5728: LD_ADDR_EXP 41
5732: PUSH
5733: LD_INT 0
5735: ST_TO_ADDR
// sFog := false ;
5736: LD_ADDR_EXP 44
5740: PUSH
5741: LD_INT 0
5743: ST_TO_ADDR
// sReset := false ;
5744: LD_ADDR_EXP 45
5748: PUSH
5749: LD_INT 0
5751: ST_TO_ADDR
// sSun := false ;
5752: LD_ADDR_EXP 46
5756: PUSH
5757: LD_INT 0
5759: ST_TO_ADDR
// sTiger := false ;
5760: LD_ADDR_EXP 42
5764: PUSH
5765: LD_INT 0
5767: ST_TO_ADDR
// sBomb := false ;
5768: LD_ADDR_EXP 43
5772: PUSH
5773: LD_INT 0
5775: ST_TO_ADDR
// sWound := false ;
5776: LD_ADDR_EXP 51
5780: PUSH
5781: LD_INT 0
5783: ST_TO_ADDR
// sBetray := false ;
5784: LD_ADDR_EXP 55
5788: PUSH
5789: LD_INT 0
5791: ST_TO_ADDR
// sContamin := false ;
5792: LD_ADDR_EXP 56
5796: PUSH
5797: LD_INT 0
5799: ST_TO_ADDR
// sOil := false ;
5800: LD_ADDR_EXP 58
5804: PUSH
5805: LD_INT 0
5807: ST_TO_ADDR
// sStu := false ;
5808: LD_ADDR_EXP 62
5812: PUSH
5813: LD_INT 0
5815: ST_TO_ADDR
// sBazooka := false ;
5816: LD_ADDR_EXP 65
5820: PUSH
5821: LD_INT 0
5823: ST_TO_ADDR
// sMortar := false ;
5824: LD_ADDR_EXP 66
5828: PUSH
5829: LD_INT 0
5831: ST_TO_ADDR
// sRanger := false ;
5832: LD_ADDR_EXP 76
5836: PUSH
5837: LD_INT 0
5839: ST_TO_ADDR
// end ;
5840: LD_VAR 0 1
5844: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5845: LD_INT 0
5847: PPUSH
5848: PPUSH
5849: PPUSH
5850: PPUSH
5851: PPUSH
// result := [ ] ;
5852: LD_ADDR_VAR 0 1
5856: PUSH
5857: EMPTY
5858: ST_TO_ADDR
// if campaign_id = 1 then
5859: LD_OWVAR 69
5863: PUSH
5864: LD_INT 1
5866: EQUAL
5867: IFFALSE 8805
// begin case mission_number of 1 :
5869: LD_OWVAR 70
5873: PUSH
5874: LD_INT 1
5876: DOUBLE
5877: EQUAL
5878: IFTRUE 5882
5880: GO 5946
5882: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5883: LD_ADDR_VAR 0 1
5887: PUSH
5888: LD_INT 2
5890: PUSH
5891: LD_INT 4
5893: PUSH
5894: LD_INT 11
5896: PUSH
5897: LD_INT 12
5899: PUSH
5900: LD_INT 15
5902: PUSH
5903: LD_INT 16
5905: PUSH
5906: LD_INT 22
5908: PUSH
5909: LD_INT 23
5911: PUSH
5912: LD_INT 26
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 101
5928: PUSH
5929: LD_INT 102
5931: PUSH
5932: LD_INT 106
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: ST_TO_ADDR
5944: GO 8803
5946: LD_INT 2
5948: DOUBLE
5949: EQUAL
5950: IFTRUE 5954
5952: GO 6026
5954: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5955: LD_ADDR_VAR 0 1
5959: PUSH
5960: LD_INT 2
5962: PUSH
5963: LD_INT 4
5965: PUSH
5966: LD_INT 11
5968: PUSH
5969: LD_INT 12
5971: PUSH
5972: LD_INT 15
5974: PUSH
5975: LD_INT 16
5977: PUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 23
5983: PUSH
5984: LD_INT 26
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 101
6000: PUSH
6001: LD_INT 102
6003: PUSH
6004: LD_INT 105
6006: PUSH
6007: LD_INT 106
6009: PUSH
6010: LD_INT 108
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: LIST
6018: LIST
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: ST_TO_ADDR
6024: GO 8803
6026: LD_INT 3
6028: DOUBLE
6029: EQUAL
6030: IFTRUE 6034
6032: GO 6110
6034: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6035: LD_ADDR_VAR 0 1
6039: PUSH
6040: LD_INT 2
6042: PUSH
6043: LD_INT 4
6045: PUSH
6046: LD_INT 5
6048: PUSH
6049: LD_INT 11
6051: PUSH
6052: LD_INT 12
6054: PUSH
6055: LD_INT 15
6057: PUSH
6058: LD_INT 16
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 26
6066: PUSH
6067: LD_INT 36
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: PUSH
6082: LD_INT 101
6084: PUSH
6085: LD_INT 102
6087: PUSH
6088: LD_INT 105
6090: PUSH
6091: LD_INT 106
6093: PUSH
6094: LD_INT 108
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: ST_TO_ADDR
6108: GO 8803
6110: LD_INT 4
6112: DOUBLE
6113: EQUAL
6114: IFTRUE 6118
6116: GO 6202
6118: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6119: LD_ADDR_VAR 0 1
6123: PUSH
6124: LD_INT 2
6126: PUSH
6127: LD_INT 4
6129: PUSH
6130: LD_INT 5
6132: PUSH
6133: LD_INT 8
6135: PUSH
6136: LD_INT 11
6138: PUSH
6139: LD_INT 12
6141: PUSH
6142: LD_INT 15
6144: PUSH
6145: LD_INT 16
6147: PUSH
6148: LD_INT 22
6150: PUSH
6151: LD_INT 23
6153: PUSH
6154: LD_INT 26
6156: PUSH
6157: LD_INT 36
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 101
6176: PUSH
6177: LD_INT 102
6179: PUSH
6180: LD_INT 105
6182: PUSH
6183: LD_INT 106
6185: PUSH
6186: LD_INT 108
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: ST_TO_ADDR
6200: GO 8803
6202: LD_INT 5
6204: DOUBLE
6205: EQUAL
6206: IFTRUE 6210
6208: GO 6310
6210: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6211: LD_ADDR_VAR 0 1
6215: PUSH
6216: LD_INT 2
6218: PUSH
6219: LD_INT 4
6221: PUSH
6222: LD_INT 5
6224: PUSH
6225: LD_INT 6
6227: PUSH
6228: LD_INT 8
6230: PUSH
6231: LD_INT 11
6233: PUSH
6234: LD_INT 12
6236: PUSH
6237: LD_INT 15
6239: PUSH
6240: LD_INT 16
6242: PUSH
6243: LD_INT 22
6245: PUSH
6246: LD_INT 23
6248: PUSH
6249: LD_INT 25
6251: PUSH
6252: LD_INT 26
6254: PUSH
6255: LD_INT 36
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 101
6276: PUSH
6277: LD_INT 102
6279: PUSH
6280: LD_INT 105
6282: PUSH
6283: LD_INT 106
6285: PUSH
6286: LD_INT 108
6288: PUSH
6289: LD_INT 109
6291: PUSH
6292: LD_INT 112
6294: PUSH
6295: EMPTY
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: ST_TO_ADDR
6308: GO 8803
6310: LD_INT 6
6312: DOUBLE
6313: EQUAL
6314: IFTRUE 6318
6316: GO 6438
6318: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6319: LD_ADDR_VAR 0 1
6323: PUSH
6324: LD_INT 2
6326: PUSH
6327: LD_INT 4
6329: PUSH
6330: LD_INT 5
6332: PUSH
6333: LD_INT 6
6335: PUSH
6336: LD_INT 8
6338: PUSH
6339: LD_INT 11
6341: PUSH
6342: LD_INT 12
6344: PUSH
6345: LD_INT 15
6347: PUSH
6348: LD_INT 16
6350: PUSH
6351: LD_INT 20
6353: PUSH
6354: LD_INT 21
6356: PUSH
6357: LD_INT 22
6359: PUSH
6360: LD_INT 23
6362: PUSH
6363: LD_INT 25
6365: PUSH
6366: LD_INT 26
6368: PUSH
6369: LD_INT 30
6371: PUSH
6372: LD_INT 31
6374: PUSH
6375: LD_INT 32
6377: PUSH
6378: LD_INT 36
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 101
6404: PUSH
6405: LD_INT 102
6407: PUSH
6408: LD_INT 105
6410: PUSH
6411: LD_INT 106
6413: PUSH
6414: LD_INT 108
6416: PUSH
6417: LD_INT 109
6419: PUSH
6420: LD_INT 112
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: ST_TO_ADDR
6436: GO 8803
6438: LD_INT 7
6440: DOUBLE
6441: EQUAL
6442: IFTRUE 6446
6444: GO 6546
6446: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6447: LD_ADDR_VAR 0 1
6451: PUSH
6452: LD_INT 2
6454: PUSH
6455: LD_INT 4
6457: PUSH
6458: LD_INT 5
6460: PUSH
6461: LD_INT 7
6463: PUSH
6464: LD_INT 11
6466: PUSH
6467: LD_INT 12
6469: PUSH
6470: LD_INT 15
6472: PUSH
6473: LD_INT 16
6475: PUSH
6476: LD_INT 20
6478: PUSH
6479: LD_INT 21
6481: PUSH
6482: LD_INT 22
6484: PUSH
6485: LD_INT 23
6487: PUSH
6488: LD_INT 25
6490: PUSH
6491: LD_INT 26
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 101
6512: PUSH
6513: LD_INT 102
6515: PUSH
6516: LD_INT 103
6518: PUSH
6519: LD_INT 105
6521: PUSH
6522: LD_INT 106
6524: PUSH
6525: LD_INT 108
6527: PUSH
6528: LD_INT 112
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: PUSH
6540: EMPTY
6541: LIST
6542: LIST
6543: ST_TO_ADDR
6544: GO 8803
6546: LD_INT 8
6548: DOUBLE
6549: EQUAL
6550: IFTRUE 6554
6552: GO 6682
6554: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6555: LD_ADDR_VAR 0 1
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: LD_INT 4
6565: PUSH
6566: LD_INT 5
6568: PUSH
6569: LD_INT 6
6571: PUSH
6572: LD_INT 7
6574: PUSH
6575: LD_INT 8
6577: PUSH
6578: LD_INT 11
6580: PUSH
6581: LD_INT 12
6583: PUSH
6584: LD_INT 15
6586: PUSH
6587: LD_INT 16
6589: PUSH
6590: LD_INT 20
6592: PUSH
6593: LD_INT 21
6595: PUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 23
6601: PUSH
6602: LD_INT 25
6604: PUSH
6605: LD_INT 26
6607: PUSH
6608: LD_INT 30
6610: PUSH
6611: LD_INT 31
6613: PUSH
6614: LD_INT 32
6616: PUSH
6617: LD_INT 36
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: PUSH
6642: LD_INT 101
6644: PUSH
6645: LD_INT 102
6647: PUSH
6648: LD_INT 103
6650: PUSH
6651: LD_INT 105
6653: PUSH
6654: LD_INT 106
6656: PUSH
6657: LD_INT 108
6659: PUSH
6660: LD_INT 109
6662: PUSH
6663: LD_INT 112
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: ST_TO_ADDR
6680: GO 8803
6682: LD_INT 9
6684: DOUBLE
6685: EQUAL
6686: IFTRUE 6690
6688: GO 6826
6690: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6691: LD_ADDR_VAR 0 1
6695: PUSH
6696: LD_INT 2
6698: PUSH
6699: LD_INT 4
6701: PUSH
6702: LD_INT 5
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: LD_INT 7
6710: PUSH
6711: LD_INT 8
6713: PUSH
6714: LD_INT 11
6716: PUSH
6717: LD_INT 12
6719: PUSH
6720: LD_INT 15
6722: PUSH
6723: LD_INT 16
6725: PUSH
6726: LD_INT 20
6728: PUSH
6729: LD_INT 21
6731: PUSH
6732: LD_INT 22
6734: PUSH
6735: LD_INT 23
6737: PUSH
6738: LD_INT 25
6740: PUSH
6741: LD_INT 26
6743: PUSH
6744: LD_INT 28
6746: PUSH
6747: LD_INT 30
6749: PUSH
6750: LD_INT 31
6752: PUSH
6753: LD_INT 32
6755: PUSH
6756: LD_INT 36
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 101
6784: PUSH
6785: LD_INT 102
6787: PUSH
6788: LD_INT 103
6790: PUSH
6791: LD_INT 105
6793: PUSH
6794: LD_INT 106
6796: PUSH
6797: LD_INT 108
6799: PUSH
6800: LD_INT 109
6802: PUSH
6803: LD_INT 112
6805: PUSH
6806: LD_INT 114
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: ST_TO_ADDR
6824: GO 8803
6826: LD_INT 10
6828: DOUBLE
6829: EQUAL
6830: IFTRUE 6834
6832: GO 7018
6834: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6835: LD_ADDR_VAR 0 1
6839: PUSH
6840: LD_INT 2
6842: PUSH
6843: LD_INT 4
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: LD_INT 6
6851: PUSH
6852: LD_INT 7
6854: PUSH
6855: LD_INT 8
6857: PUSH
6858: LD_INT 9
6860: PUSH
6861: LD_INT 10
6863: PUSH
6864: LD_INT 11
6866: PUSH
6867: LD_INT 12
6869: PUSH
6870: LD_INT 13
6872: PUSH
6873: LD_INT 14
6875: PUSH
6876: LD_INT 15
6878: PUSH
6879: LD_INT 16
6881: PUSH
6882: LD_INT 17
6884: PUSH
6885: LD_INT 18
6887: PUSH
6888: LD_INT 19
6890: PUSH
6891: LD_INT 20
6893: PUSH
6894: LD_INT 21
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_INT 23
6902: PUSH
6903: LD_INT 24
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 26
6911: PUSH
6912: LD_INT 28
6914: PUSH
6915: LD_INT 30
6917: PUSH
6918: LD_INT 31
6920: PUSH
6921: LD_INT 32
6923: PUSH
6924: LD_INT 36
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 101
6960: PUSH
6961: LD_INT 102
6963: PUSH
6964: LD_INT 103
6966: PUSH
6967: LD_INT 104
6969: PUSH
6970: LD_INT 105
6972: PUSH
6973: LD_INT 106
6975: PUSH
6976: LD_INT 107
6978: PUSH
6979: LD_INT 108
6981: PUSH
6982: LD_INT 109
6984: PUSH
6985: LD_INT 110
6987: PUSH
6988: LD_INT 111
6990: PUSH
6991: LD_INT 112
6993: PUSH
6994: LD_INT 114
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: ST_TO_ADDR
7016: GO 8803
7018: LD_INT 11
7020: DOUBLE
7021: EQUAL
7022: IFTRUE 7026
7024: GO 7218
7026: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7027: LD_ADDR_VAR 0 1
7031: PUSH
7032: LD_INT 2
7034: PUSH
7035: LD_INT 3
7037: PUSH
7038: LD_INT 4
7040: PUSH
7041: LD_INT 5
7043: PUSH
7044: LD_INT 6
7046: PUSH
7047: LD_INT 7
7049: PUSH
7050: LD_INT 8
7052: PUSH
7053: LD_INT 9
7055: PUSH
7056: LD_INT 10
7058: PUSH
7059: LD_INT 11
7061: PUSH
7062: LD_INT 12
7064: PUSH
7065: LD_INT 13
7067: PUSH
7068: LD_INT 14
7070: PUSH
7071: LD_INT 15
7073: PUSH
7074: LD_INT 16
7076: PUSH
7077: LD_INT 17
7079: PUSH
7080: LD_INT 18
7082: PUSH
7083: LD_INT 19
7085: PUSH
7086: LD_INT 20
7088: PUSH
7089: LD_INT 21
7091: PUSH
7092: LD_INT 22
7094: PUSH
7095: LD_INT 23
7097: PUSH
7098: LD_INT 24
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 26
7106: PUSH
7107: LD_INT 28
7109: PUSH
7110: LD_INT 30
7112: PUSH
7113: LD_INT 31
7115: PUSH
7116: LD_INT 32
7118: PUSH
7119: LD_INT 34
7121: PUSH
7122: LD_INT 36
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 101
7160: PUSH
7161: LD_INT 102
7163: PUSH
7164: LD_INT 103
7166: PUSH
7167: LD_INT 104
7169: PUSH
7170: LD_INT 105
7172: PUSH
7173: LD_INT 106
7175: PUSH
7176: LD_INT 107
7178: PUSH
7179: LD_INT 108
7181: PUSH
7182: LD_INT 109
7184: PUSH
7185: LD_INT 110
7187: PUSH
7188: LD_INT 111
7190: PUSH
7191: LD_INT 112
7193: PUSH
7194: LD_INT 114
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: ST_TO_ADDR
7216: GO 8803
7218: LD_INT 12
7220: DOUBLE
7221: EQUAL
7222: IFTRUE 7226
7224: GO 7434
7226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7227: LD_ADDR_VAR 0 1
7231: PUSH
7232: LD_INT 1
7234: PUSH
7235: LD_INT 2
7237: PUSH
7238: LD_INT 3
7240: PUSH
7241: LD_INT 4
7243: PUSH
7244: LD_INT 5
7246: PUSH
7247: LD_INT 6
7249: PUSH
7250: LD_INT 7
7252: PUSH
7253: LD_INT 8
7255: PUSH
7256: LD_INT 9
7258: PUSH
7259: LD_INT 10
7261: PUSH
7262: LD_INT 11
7264: PUSH
7265: LD_INT 12
7267: PUSH
7268: LD_INT 13
7270: PUSH
7271: LD_INT 14
7273: PUSH
7274: LD_INT 15
7276: PUSH
7277: LD_INT 16
7279: PUSH
7280: LD_INT 17
7282: PUSH
7283: LD_INT 18
7285: PUSH
7286: LD_INT 19
7288: PUSH
7289: LD_INT 20
7291: PUSH
7292: LD_INT 21
7294: PUSH
7295: LD_INT 22
7297: PUSH
7298: LD_INT 23
7300: PUSH
7301: LD_INT 24
7303: PUSH
7304: LD_INT 25
7306: PUSH
7307: LD_INT 26
7309: PUSH
7310: LD_INT 27
7312: PUSH
7313: LD_INT 28
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 31
7321: PUSH
7322: LD_INT 32
7324: PUSH
7325: LD_INT 33
7327: PUSH
7328: LD_INT 34
7330: PUSH
7331: LD_INT 36
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 101
7372: PUSH
7373: LD_INT 102
7375: PUSH
7376: LD_INT 103
7378: PUSH
7379: LD_INT 104
7381: PUSH
7382: LD_INT 105
7384: PUSH
7385: LD_INT 106
7387: PUSH
7388: LD_INT 107
7390: PUSH
7391: LD_INT 108
7393: PUSH
7394: LD_INT 109
7396: PUSH
7397: LD_INT 110
7399: PUSH
7400: LD_INT 111
7402: PUSH
7403: LD_INT 112
7405: PUSH
7406: LD_INT 113
7408: PUSH
7409: LD_INT 114
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: ST_TO_ADDR
7432: GO 8803
7434: LD_INT 13
7436: DOUBLE
7437: EQUAL
7438: IFTRUE 7442
7440: GO 7638
7442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7443: LD_ADDR_VAR 0 1
7447: PUSH
7448: LD_INT 1
7450: PUSH
7451: LD_INT 2
7453: PUSH
7454: LD_INT 3
7456: PUSH
7457: LD_INT 4
7459: PUSH
7460: LD_INT 5
7462: PUSH
7463: LD_INT 8
7465: PUSH
7466: LD_INT 9
7468: PUSH
7469: LD_INT 10
7471: PUSH
7472: LD_INT 11
7474: PUSH
7475: LD_INT 12
7477: PUSH
7478: LD_INT 14
7480: PUSH
7481: LD_INT 15
7483: PUSH
7484: LD_INT 16
7486: PUSH
7487: LD_INT 17
7489: PUSH
7490: LD_INT 18
7492: PUSH
7493: LD_INT 19
7495: PUSH
7496: LD_INT 20
7498: PUSH
7499: LD_INT 21
7501: PUSH
7502: LD_INT 22
7504: PUSH
7505: LD_INT 23
7507: PUSH
7508: LD_INT 24
7510: PUSH
7511: LD_INT 25
7513: PUSH
7514: LD_INT 26
7516: PUSH
7517: LD_INT 27
7519: PUSH
7520: LD_INT 28
7522: PUSH
7523: LD_INT 30
7525: PUSH
7526: LD_INT 31
7528: PUSH
7529: LD_INT 32
7531: PUSH
7532: LD_INT 33
7534: PUSH
7535: LD_INT 34
7537: PUSH
7538: LD_INT 36
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 101
7576: PUSH
7577: LD_INT 102
7579: PUSH
7580: LD_INT 103
7582: PUSH
7583: LD_INT 104
7585: PUSH
7586: LD_INT 105
7588: PUSH
7589: LD_INT 106
7591: PUSH
7592: LD_INT 107
7594: PUSH
7595: LD_INT 108
7597: PUSH
7598: LD_INT 109
7600: PUSH
7601: LD_INT 110
7603: PUSH
7604: LD_INT 111
7606: PUSH
7607: LD_INT 112
7609: PUSH
7610: LD_INT 113
7612: PUSH
7613: LD_INT 114
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: ST_TO_ADDR
7636: GO 8803
7638: LD_INT 14
7640: DOUBLE
7641: EQUAL
7642: IFTRUE 7646
7644: GO 7858
7646: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7647: LD_ADDR_VAR 0 1
7651: PUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: LD_INT 4
7663: PUSH
7664: LD_INT 5
7666: PUSH
7667: LD_INT 6
7669: PUSH
7670: LD_INT 7
7672: PUSH
7673: LD_INT 8
7675: PUSH
7676: LD_INT 9
7678: PUSH
7679: LD_INT 10
7681: PUSH
7682: LD_INT 11
7684: PUSH
7685: LD_INT 12
7687: PUSH
7688: LD_INT 13
7690: PUSH
7691: LD_INT 14
7693: PUSH
7694: LD_INT 15
7696: PUSH
7697: LD_INT 16
7699: PUSH
7700: LD_INT 17
7702: PUSH
7703: LD_INT 18
7705: PUSH
7706: LD_INT 19
7708: PUSH
7709: LD_INT 20
7711: PUSH
7712: LD_INT 21
7714: PUSH
7715: LD_INT 22
7717: PUSH
7718: LD_INT 23
7720: PUSH
7721: LD_INT 24
7723: PUSH
7724: LD_INT 25
7726: PUSH
7727: LD_INT 26
7729: PUSH
7730: LD_INT 27
7732: PUSH
7733: LD_INT 28
7735: PUSH
7736: LD_INT 29
7738: PUSH
7739: LD_INT 30
7741: PUSH
7742: LD_INT 31
7744: PUSH
7745: LD_INT 32
7747: PUSH
7748: LD_INT 33
7750: PUSH
7751: LD_INT 34
7753: PUSH
7754: LD_INT 36
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: LIST
7793: PUSH
7794: LD_INT 101
7796: PUSH
7797: LD_INT 102
7799: PUSH
7800: LD_INT 103
7802: PUSH
7803: LD_INT 104
7805: PUSH
7806: LD_INT 105
7808: PUSH
7809: LD_INT 106
7811: PUSH
7812: LD_INT 107
7814: PUSH
7815: LD_INT 108
7817: PUSH
7818: LD_INT 109
7820: PUSH
7821: LD_INT 110
7823: PUSH
7824: LD_INT 111
7826: PUSH
7827: LD_INT 112
7829: PUSH
7830: LD_INT 113
7832: PUSH
7833: LD_INT 114
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: ST_TO_ADDR
7856: GO 8803
7858: LD_INT 15
7860: DOUBLE
7861: EQUAL
7862: IFTRUE 7866
7864: GO 8078
7866: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7867: LD_ADDR_VAR 0 1
7871: PUSH
7872: LD_INT 1
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: LD_INT 3
7880: PUSH
7881: LD_INT 4
7883: PUSH
7884: LD_INT 5
7886: PUSH
7887: LD_INT 6
7889: PUSH
7890: LD_INT 7
7892: PUSH
7893: LD_INT 8
7895: PUSH
7896: LD_INT 9
7898: PUSH
7899: LD_INT 10
7901: PUSH
7902: LD_INT 11
7904: PUSH
7905: LD_INT 12
7907: PUSH
7908: LD_INT 13
7910: PUSH
7911: LD_INT 14
7913: PUSH
7914: LD_INT 15
7916: PUSH
7917: LD_INT 16
7919: PUSH
7920: LD_INT 17
7922: PUSH
7923: LD_INT 18
7925: PUSH
7926: LD_INT 19
7928: PUSH
7929: LD_INT 20
7931: PUSH
7932: LD_INT 21
7934: PUSH
7935: LD_INT 22
7937: PUSH
7938: LD_INT 23
7940: PUSH
7941: LD_INT 24
7943: PUSH
7944: LD_INT 25
7946: PUSH
7947: LD_INT 26
7949: PUSH
7950: LD_INT 27
7952: PUSH
7953: LD_INT 28
7955: PUSH
7956: LD_INT 29
7958: PUSH
7959: LD_INT 30
7961: PUSH
7962: LD_INT 31
7964: PUSH
7965: LD_INT 32
7967: PUSH
7968: LD_INT 33
7970: PUSH
7971: LD_INT 34
7973: PUSH
7974: LD_INT 36
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 101
8016: PUSH
8017: LD_INT 102
8019: PUSH
8020: LD_INT 103
8022: PUSH
8023: LD_INT 104
8025: PUSH
8026: LD_INT 105
8028: PUSH
8029: LD_INT 106
8031: PUSH
8032: LD_INT 107
8034: PUSH
8035: LD_INT 108
8037: PUSH
8038: LD_INT 109
8040: PUSH
8041: LD_INT 110
8043: PUSH
8044: LD_INT 111
8046: PUSH
8047: LD_INT 112
8049: PUSH
8050: LD_INT 113
8052: PUSH
8053: LD_INT 114
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: ST_TO_ADDR
8076: GO 8803
8078: LD_INT 16
8080: DOUBLE
8081: EQUAL
8082: IFTRUE 8086
8084: GO 8210
8086: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 2
8094: PUSH
8095: LD_INT 4
8097: PUSH
8098: LD_INT 5
8100: PUSH
8101: LD_INT 7
8103: PUSH
8104: LD_INT 11
8106: PUSH
8107: LD_INT 12
8109: PUSH
8110: LD_INT 15
8112: PUSH
8113: LD_INT 16
8115: PUSH
8116: LD_INT 20
8118: PUSH
8119: LD_INT 21
8121: PUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 23
8127: PUSH
8128: LD_INT 25
8130: PUSH
8131: LD_INT 26
8133: PUSH
8134: LD_INT 30
8136: PUSH
8137: LD_INT 31
8139: PUSH
8140: LD_INT 32
8142: PUSH
8143: LD_INT 33
8145: PUSH
8146: LD_INT 34
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 101
8172: PUSH
8173: LD_INT 102
8175: PUSH
8176: LD_INT 103
8178: PUSH
8179: LD_INT 106
8181: PUSH
8182: LD_INT 108
8184: PUSH
8185: LD_INT 112
8187: PUSH
8188: LD_INT 113
8190: PUSH
8191: LD_INT 114
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: ST_TO_ADDR
8208: GO 8803
8210: LD_INT 17
8212: DOUBLE
8213: EQUAL
8214: IFTRUE 8218
8216: GO 8430
8218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8219: LD_ADDR_VAR 0 1
8223: PUSH
8224: LD_INT 1
8226: PUSH
8227: LD_INT 2
8229: PUSH
8230: LD_INT 3
8232: PUSH
8233: LD_INT 4
8235: PUSH
8236: LD_INT 5
8238: PUSH
8239: LD_INT 6
8241: PUSH
8242: LD_INT 7
8244: PUSH
8245: LD_INT 8
8247: PUSH
8248: LD_INT 9
8250: PUSH
8251: LD_INT 10
8253: PUSH
8254: LD_INT 11
8256: PUSH
8257: LD_INT 12
8259: PUSH
8260: LD_INT 13
8262: PUSH
8263: LD_INT 14
8265: PUSH
8266: LD_INT 15
8268: PUSH
8269: LD_INT 16
8271: PUSH
8272: LD_INT 17
8274: PUSH
8275: LD_INT 18
8277: PUSH
8278: LD_INT 19
8280: PUSH
8281: LD_INT 20
8283: PUSH
8284: LD_INT 21
8286: PUSH
8287: LD_INT 22
8289: PUSH
8290: LD_INT 23
8292: PUSH
8293: LD_INT 24
8295: PUSH
8296: LD_INT 25
8298: PUSH
8299: LD_INT 26
8301: PUSH
8302: LD_INT 27
8304: PUSH
8305: LD_INT 28
8307: PUSH
8308: LD_INT 29
8310: PUSH
8311: LD_INT 30
8313: PUSH
8314: LD_INT 31
8316: PUSH
8317: LD_INT 32
8319: PUSH
8320: LD_INT 33
8322: PUSH
8323: LD_INT 34
8325: PUSH
8326: LD_INT 36
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: PUSH
8366: LD_INT 101
8368: PUSH
8369: LD_INT 102
8371: PUSH
8372: LD_INT 103
8374: PUSH
8375: LD_INT 104
8377: PUSH
8378: LD_INT 105
8380: PUSH
8381: LD_INT 106
8383: PUSH
8384: LD_INT 107
8386: PUSH
8387: LD_INT 108
8389: PUSH
8390: LD_INT 109
8392: PUSH
8393: LD_INT 110
8395: PUSH
8396: LD_INT 111
8398: PUSH
8399: LD_INT 112
8401: PUSH
8402: LD_INT 113
8404: PUSH
8405: LD_INT 114
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: ST_TO_ADDR
8428: GO 8803
8430: LD_INT 18
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8574
8438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8439: LD_ADDR_VAR 0 1
8443: PUSH
8444: LD_INT 2
8446: PUSH
8447: LD_INT 4
8449: PUSH
8450: LD_INT 5
8452: PUSH
8453: LD_INT 7
8455: PUSH
8456: LD_INT 11
8458: PUSH
8459: LD_INT 12
8461: PUSH
8462: LD_INT 15
8464: PUSH
8465: LD_INT 16
8467: PUSH
8468: LD_INT 20
8470: PUSH
8471: LD_INT 21
8473: PUSH
8474: LD_INT 22
8476: PUSH
8477: LD_INT 23
8479: PUSH
8480: LD_INT 25
8482: PUSH
8483: LD_INT 26
8485: PUSH
8486: LD_INT 30
8488: PUSH
8489: LD_INT 31
8491: PUSH
8492: LD_INT 32
8494: PUSH
8495: LD_INT 33
8497: PUSH
8498: LD_INT 34
8500: PUSH
8501: LD_INT 35
8503: PUSH
8504: LD_INT 36
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: PUSH
8530: LD_INT 101
8532: PUSH
8533: LD_INT 102
8535: PUSH
8536: LD_INT 103
8538: PUSH
8539: LD_INT 106
8541: PUSH
8542: LD_INT 108
8544: PUSH
8545: LD_INT 112
8547: PUSH
8548: LD_INT 113
8550: PUSH
8551: LD_INT 114
8553: PUSH
8554: LD_INT 115
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: ST_TO_ADDR
8572: GO 8803
8574: LD_INT 19
8576: DOUBLE
8577: EQUAL
8578: IFTRUE 8582
8580: GO 8802
8582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: LD_INT 2
8593: PUSH
8594: LD_INT 3
8596: PUSH
8597: LD_INT 4
8599: PUSH
8600: LD_INT 5
8602: PUSH
8603: LD_INT 6
8605: PUSH
8606: LD_INT 7
8608: PUSH
8609: LD_INT 8
8611: PUSH
8612: LD_INT 9
8614: PUSH
8615: LD_INT 10
8617: PUSH
8618: LD_INT 11
8620: PUSH
8621: LD_INT 12
8623: PUSH
8624: LD_INT 13
8626: PUSH
8627: LD_INT 14
8629: PUSH
8630: LD_INT 15
8632: PUSH
8633: LD_INT 16
8635: PUSH
8636: LD_INT 17
8638: PUSH
8639: LD_INT 18
8641: PUSH
8642: LD_INT 19
8644: PUSH
8645: LD_INT 20
8647: PUSH
8648: LD_INT 21
8650: PUSH
8651: LD_INT 22
8653: PUSH
8654: LD_INT 23
8656: PUSH
8657: LD_INT 24
8659: PUSH
8660: LD_INT 25
8662: PUSH
8663: LD_INT 26
8665: PUSH
8666: LD_INT 27
8668: PUSH
8669: LD_INT 28
8671: PUSH
8672: LD_INT 29
8674: PUSH
8675: LD_INT 30
8677: PUSH
8678: LD_INT 31
8680: PUSH
8681: LD_INT 32
8683: PUSH
8684: LD_INT 33
8686: PUSH
8687: LD_INT 34
8689: PUSH
8690: LD_INT 35
8692: PUSH
8693: LD_INT 36
8695: PUSH
8696: EMPTY
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 101
8736: PUSH
8737: LD_INT 102
8739: PUSH
8740: LD_INT 103
8742: PUSH
8743: LD_INT 104
8745: PUSH
8746: LD_INT 105
8748: PUSH
8749: LD_INT 106
8751: PUSH
8752: LD_INT 107
8754: PUSH
8755: LD_INT 108
8757: PUSH
8758: LD_INT 109
8760: PUSH
8761: LD_INT 110
8763: PUSH
8764: LD_INT 111
8766: PUSH
8767: LD_INT 112
8769: PUSH
8770: LD_INT 113
8772: PUSH
8773: LD_INT 114
8775: PUSH
8776: LD_INT 115
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: ST_TO_ADDR
8800: GO 8803
8802: POP
// end else
8803: GO 9022
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8805: LD_ADDR_VAR 0 1
8809: PUSH
8810: LD_INT 1
8812: PUSH
8813: LD_INT 2
8815: PUSH
8816: LD_INT 3
8818: PUSH
8819: LD_INT 4
8821: PUSH
8822: LD_INT 5
8824: PUSH
8825: LD_INT 6
8827: PUSH
8828: LD_INT 7
8830: PUSH
8831: LD_INT 8
8833: PUSH
8834: LD_INT 9
8836: PUSH
8837: LD_INT 10
8839: PUSH
8840: LD_INT 11
8842: PUSH
8843: LD_INT 12
8845: PUSH
8846: LD_INT 13
8848: PUSH
8849: LD_INT 14
8851: PUSH
8852: LD_INT 15
8854: PUSH
8855: LD_INT 16
8857: PUSH
8858: LD_INT 17
8860: PUSH
8861: LD_INT 18
8863: PUSH
8864: LD_INT 19
8866: PUSH
8867: LD_INT 20
8869: PUSH
8870: LD_INT 21
8872: PUSH
8873: LD_INT 22
8875: PUSH
8876: LD_INT 23
8878: PUSH
8879: LD_INT 24
8881: PUSH
8882: LD_INT 25
8884: PUSH
8885: LD_INT 26
8887: PUSH
8888: LD_INT 27
8890: PUSH
8891: LD_INT 28
8893: PUSH
8894: LD_INT 29
8896: PUSH
8897: LD_INT 30
8899: PUSH
8900: LD_INT 31
8902: PUSH
8903: LD_INT 32
8905: PUSH
8906: LD_INT 33
8908: PUSH
8909: LD_INT 34
8911: PUSH
8912: LD_INT 35
8914: PUSH
8915: LD_INT 36
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 101
8958: PUSH
8959: LD_INT 102
8961: PUSH
8962: LD_INT 103
8964: PUSH
8965: LD_INT 104
8967: PUSH
8968: LD_INT 105
8970: PUSH
8971: LD_INT 106
8973: PUSH
8974: LD_INT 107
8976: PUSH
8977: LD_INT 108
8979: PUSH
8980: LD_INT 109
8982: PUSH
8983: LD_INT 110
8985: PUSH
8986: LD_INT 111
8988: PUSH
8989: LD_INT 112
8991: PUSH
8992: LD_INT 113
8994: PUSH
8995: LD_INT 114
8997: PUSH
8998: LD_INT 115
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: PUSH
9018: EMPTY
9019: LIST
9020: LIST
9021: ST_TO_ADDR
// if result then
9022: LD_VAR 0 1
9026: IFFALSE 9315
// begin normal :=  ;
9028: LD_ADDR_VAR 0 3
9032: PUSH
9033: LD_STRING 
9035: ST_TO_ADDR
// hardcore :=  ;
9036: LD_ADDR_VAR 0 4
9040: PUSH
9041: LD_STRING 
9043: ST_TO_ADDR
// for i = 1 to normalCounter do
9044: LD_ADDR_VAR 0 5
9048: PUSH
9049: DOUBLE
9050: LD_INT 1
9052: DEC
9053: ST_TO_ADDR
9054: LD_EXP 24
9058: PUSH
9059: FOR_TO
9060: IFFALSE 9161
// begin tmp := 0 ;
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: LD_STRING 0
9069: ST_TO_ADDR
// if result [ 1 ] then
9070: LD_VAR 0 1
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: IFFALSE 9143
// if result [ 1 ] [ 1 ] = i then
9080: LD_VAR 0 1
9084: PUSH
9085: LD_INT 1
9087: ARRAY
9088: PUSH
9089: LD_INT 1
9091: ARRAY
9092: PUSH
9093: LD_VAR 0 5
9097: EQUAL
9098: IFFALSE 9143
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9100: LD_ADDR_VAR 0 1
9104: PUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: LD_INT 1
9112: PPUSH
9113: LD_VAR 0 1
9117: PUSH
9118: LD_INT 1
9120: ARRAY
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: CALL_OW 3
9129: PPUSH
9130: CALL_OW 1
9134: ST_TO_ADDR
// tmp := 1 ;
9135: LD_ADDR_VAR 0 2
9139: PUSH
9140: LD_STRING 1
9142: ST_TO_ADDR
// end ; normal := normal & tmp ;
9143: LD_ADDR_VAR 0 3
9147: PUSH
9148: LD_VAR 0 3
9152: PUSH
9153: LD_VAR 0 2
9157: STR
9158: ST_TO_ADDR
// end ;
9159: GO 9059
9161: POP
9162: POP
// for i = 1 to hardcoreCounter do
9163: LD_ADDR_VAR 0 5
9167: PUSH
9168: DOUBLE
9169: LD_INT 1
9171: DEC
9172: ST_TO_ADDR
9173: LD_EXP 25
9177: PUSH
9178: FOR_TO
9179: IFFALSE 9284
// begin tmp := 0 ;
9181: LD_ADDR_VAR 0 2
9185: PUSH
9186: LD_STRING 0
9188: ST_TO_ADDR
// if result [ 2 ] then
9189: LD_VAR 0 1
9193: PUSH
9194: LD_INT 2
9196: ARRAY
9197: IFFALSE 9266
// if result [ 2 ] [ 1 ] = 100 + i then
9199: LD_VAR 0 1
9203: PUSH
9204: LD_INT 2
9206: ARRAY
9207: PUSH
9208: LD_INT 1
9210: ARRAY
9211: PUSH
9212: LD_INT 100
9214: PUSH
9215: LD_VAR 0 5
9219: PLUS
9220: EQUAL
9221: IFFALSE 9266
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9223: LD_ADDR_VAR 0 1
9227: PUSH
9228: LD_VAR 0 1
9232: PPUSH
9233: LD_INT 2
9235: PPUSH
9236: LD_VAR 0 1
9240: PUSH
9241: LD_INT 2
9243: ARRAY
9244: PPUSH
9245: LD_INT 1
9247: PPUSH
9248: CALL_OW 3
9252: PPUSH
9253: CALL_OW 1
9257: ST_TO_ADDR
// tmp := 1 ;
9258: LD_ADDR_VAR 0 2
9262: PUSH
9263: LD_STRING 1
9265: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9266: LD_ADDR_VAR 0 4
9270: PUSH
9271: LD_VAR 0 4
9275: PUSH
9276: LD_VAR 0 2
9280: STR
9281: ST_TO_ADDR
// end ;
9282: GO 9178
9284: POP
9285: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9286: LD_STRING getStreamItemsFromMission("
9288: PUSH
9289: LD_VAR 0 3
9293: STR
9294: PUSH
9295: LD_STRING ","
9297: STR
9298: PUSH
9299: LD_VAR 0 4
9303: STR
9304: PUSH
9305: LD_STRING ")
9307: STR
9308: PPUSH
9309: CALL_OW 559
// end else
9313: GO 9322
// ToLua ( getStreamItemsFromMission("","") ) ;
9315: LD_STRING getStreamItemsFromMission("","")
9317: PPUSH
9318: CALL_OW 559
// end ;
9322: LD_VAR 0 1
9326: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9327: LD_EXP 23
9331: PUSH
9332: LD_EXP 28
9336: AND
9337: IFFALSE 9461
9339: GO 9341
9341: DISABLE
9342: LD_INT 0
9344: PPUSH
9345: PPUSH
// begin enable ;
9346: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9347: LD_ADDR_VAR 0 2
9351: PUSH
9352: LD_INT 22
9354: PUSH
9355: LD_OWVAR 2
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 2
9366: PUSH
9367: LD_INT 34
9369: PUSH
9370: LD_INT 7
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 34
9379: PUSH
9380: LD_INT 45
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 28
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 34
9399: PUSH
9400: LD_INT 47
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: PPUSH
9418: CALL_OW 69
9422: ST_TO_ADDR
// if not tmp then
9423: LD_VAR 0 2
9427: NOT
9428: IFFALSE 9432
// exit ;
9430: GO 9461
// for i in tmp do
9432: LD_ADDR_VAR 0 1
9436: PUSH
9437: LD_VAR 0 2
9441: PUSH
9442: FOR_IN
9443: IFFALSE 9459
// begin SetLives ( i , 0 ) ;
9445: LD_VAR 0 1
9449: PPUSH
9450: LD_INT 0
9452: PPUSH
9453: CALL_OW 234
// end ;
9457: GO 9442
9459: POP
9460: POP
// end ;
9461: PPOPN 2
9463: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9464: LD_EXP 23
9468: PUSH
9469: LD_EXP 29
9473: AND
9474: IFFALSE 9558
9476: GO 9478
9478: DISABLE
9479: LD_INT 0
9481: PPUSH
9482: PPUSH
// begin enable ;
9483: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9484: LD_ADDR_VAR 0 2
9488: PUSH
9489: LD_INT 22
9491: PUSH
9492: LD_OWVAR 2
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 32
9503: PUSH
9504: LD_INT 3
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: PPUSH
9515: CALL_OW 69
9519: ST_TO_ADDR
// if not tmp then
9520: LD_VAR 0 2
9524: NOT
9525: IFFALSE 9529
// exit ;
9527: GO 9558
// for i in tmp do
9529: LD_ADDR_VAR 0 1
9533: PUSH
9534: LD_VAR 0 2
9538: PUSH
9539: FOR_IN
9540: IFFALSE 9556
// begin SetLives ( i , 0 ) ;
9542: LD_VAR 0 1
9546: PPUSH
9547: LD_INT 0
9549: PPUSH
9550: CALL_OW 234
// end ;
9554: GO 9539
9556: POP
9557: POP
// end ;
9558: PPOPN 2
9560: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9561: LD_EXP 23
9565: PUSH
9566: LD_EXP 26
9570: AND
9571: IFFALSE 9664
9573: GO 9575
9575: DISABLE
9576: LD_INT 0
9578: PPUSH
// begin enable ;
9579: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9580: LD_ADDR_VAR 0 1
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_OWVAR 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 2
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 5
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 9
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 25
9622: PUSH
9623: LD_INT 8
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: CALL_OW 69
9644: PUSH
9645: FOR_IN
9646: IFFALSE 9662
// begin SetClass ( i , 1 ) ;
9648: LD_VAR 0 1
9652: PPUSH
9653: LD_INT 1
9655: PPUSH
9656: CALL_OW 336
// end ;
9660: GO 9645
9662: POP
9663: POP
// end ;
9664: PPOPN 1
9666: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9667: LD_EXP 23
9671: PUSH
9672: LD_EXP 27
9676: AND
9677: PUSH
9678: LD_OWVAR 65
9682: PUSH
9683: LD_INT 7
9685: LESS
9686: AND
9687: IFFALSE 9701
9689: GO 9691
9691: DISABLE
// begin enable ;
9692: ENABLE
// game_speed := 7 ;
9693: LD_ADDR_OWVAR 65
9697: PUSH
9698: LD_INT 7
9700: ST_TO_ADDR
// end ;
9701: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9702: LD_EXP 23
9706: PUSH
9707: LD_EXP 30
9711: AND
9712: IFFALSE 9914
9714: GO 9716
9716: DISABLE
9717: LD_INT 0
9719: PPUSH
9720: PPUSH
9721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9722: LD_ADDR_VAR 0 3
9726: PUSH
9727: LD_INT 81
9729: PUSH
9730: LD_OWVAR 2
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: LD_INT 21
9741: PUSH
9742: LD_INT 1
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PPUSH
9753: CALL_OW 69
9757: ST_TO_ADDR
// if not tmp then
9758: LD_VAR 0 3
9762: NOT
9763: IFFALSE 9767
// exit ;
9765: GO 9914
// if tmp > 5 then
9767: LD_VAR 0 3
9771: PUSH
9772: LD_INT 5
9774: GREATER
9775: IFFALSE 9787
// k := 5 else
9777: LD_ADDR_VAR 0 2
9781: PUSH
9782: LD_INT 5
9784: ST_TO_ADDR
9785: GO 9797
// k := tmp ;
9787: LD_ADDR_VAR 0 2
9791: PUSH
9792: LD_VAR 0 3
9796: ST_TO_ADDR
// for i := 1 to k do
9797: LD_ADDR_VAR 0 1
9801: PUSH
9802: DOUBLE
9803: LD_INT 1
9805: DEC
9806: ST_TO_ADDR
9807: LD_VAR 0 2
9811: PUSH
9812: FOR_TO
9813: IFFALSE 9912
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9815: LD_VAR 0 3
9819: PUSH
9820: LD_VAR 0 1
9824: ARRAY
9825: PPUSH
9826: LD_VAR 0 1
9830: PUSH
9831: LD_INT 4
9833: MOD
9834: PUSH
9835: LD_INT 1
9837: PLUS
9838: PPUSH
9839: CALL_OW 259
9843: PUSH
9844: LD_INT 10
9846: LESS
9847: IFFALSE 9910
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9849: LD_VAR 0 3
9853: PUSH
9854: LD_VAR 0 1
9858: ARRAY
9859: PPUSH
9860: LD_VAR 0 1
9864: PUSH
9865: LD_INT 4
9867: MOD
9868: PUSH
9869: LD_INT 1
9871: PLUS
9872: PPUSH
9873: LD_VAR 0 3
9877: PUSH
9878: LD_VAR 0 1
9882: ARRAY
9883: PPUSH
9884: LD_VAR 0 1
9888: PUSH
9889: LD_INT 4
9891: MOD
9892: PUSH
9893: LD_INT 1
9895: PLUS
9896: PPUSH
9897: CALL_OW 259
9901: PUSH
9902: LD_INT 1
9904: PLUS
9905: PPUSH
9906: CALL_OW 237
9910: GO 9812
9912: POP
9913: POP
// end ;
9914: PPOPN 3
9916: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9917: LD_EXP 23
9921: PUSH
9922: LD_EXP 31
9926: AND
9927: IFFALSE 9947
9929: GO 9931
9931: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9932: LD_INT 4
9934: PPUSH
9935: LD_OWVAR 2
9939: PPUSH
9940: LD_INT 0
9942: PPUSH
9943: CALL_OW 324
9947: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9948: LD_EXP 23
9952: PUSH
9953: LD_EXP 60
9957: AND
9958: IFFALSE 9978
9960: GO 9962
9962: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9963: LD_INT 19
9965: PPUSH
9966: LD_OWVAR 2
9970: PPUSH
9971: LD_INT 0
9973: PPUSH
9974: CALL_OW 324
9978: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9979: LD_EXP 23
9983: PUSH
9984: LD_EXP 32
9988: AND
9989: IFFALSE 10091
9991: GO 9993
9993: DISABLE
9994: LD_INT 0
9996: PPUSH
9997: PPUSH
// begin enable ;
9998: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9999: LD_ADDR_VAR 0 2
10003: PUSH
10004: LD_INT 22
10006: PUSH
10007: LD_OWVAR 2
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 2
10018: PUSH
10019: LD_INT 34
10021: PUSH
10022: LD_INT 11
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: LD_INT 34
10031: PUSH
10032: LD_INT 30
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: PPUSH
10048: CALL_OW 69
10052: ST_TO_ADDR
// if not tmp then
10053: LD_VAR 0 2
10057: NOT
10058: IFFALSE 10062
// exit ;
10060: GO 10091
// for i in tmp do
10062: LD_ADDR_VAR 0 1
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: FOR_IN
10073: IFFALSE 10089
// begin SetLives ( i , 0 ) ;
10075: LD_VAR 0 1
10079: PPUSH
10080: LD_INT 0
10082: PPUSH
10083: CALL_OW 234
// end ;
10087: GO 10072
10089: POP
10090: POP
// end ;
10091: PPOPN 2
10093: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10094: LD_EXP 23
10098: PUSH
10099: LD_EXP 33
10103: AND
10104: IFFALSE 10124
10106: GO 10108
10108: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10109: LD_INT 32
10111: PPUSH
10112: LD_OWVAR 2
10116: PPUSH
10117: LD_INT 0
10119: PPUSH
10120: CALL_OW 324
10124: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10125: LD_EXP 23
10129: PUSH
10130: LD_EXP 34
10134: AND
10135: IFFALSE 10316
10137: GO 10139
10139: DISABLE
10140: LD_INT 0
10142: PPUSH
10143: PPUSH
10144: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10145: LD_ADDR_VAR 0 2
10149: PUSH
10150: LD_INT 22
10152: PUSH
10153: LD_OWVAR 2
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 33
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PPUSH
10176: CALL_OW 69
10180: ST_TO_ADDR
// if not tmp then
10181: LD_VAR 0 2
10185: NOT
10186: IFFALSE 10190
// exit ;
10188: GO 10316
// side := 0 ;
10190: LD_ADDR_VAR 0 3
10194: PUSH
10195: LD_INT 0
10197: ST_TO_ADDR
// for i := 1 to 8 do
10198: LD_ADDR_VAR 0 1
10202: PUSH
10203: DOUBLE
10204: LD_INT 1
10206: DEC
10207: ST_TO_ADDR
10208: LD_INT 8
10210: PUSH
10211: FOR_TO
10212: IFFALSE 10260
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10214: LD_OWVAR 2
10218: PUSH
10219: LD_VAR 0 1
10223: NONEQUAL
10224: PUSH
10225: LD_OWVAR 2
10229: PPUSH
10230: LD_VAR 0 1
10234: PPUSH
10235: CALL_OW 81
10239: PUSH
10240: LD_INT 2
10242: EQUAL
10243: AND
10244: IFFALSE 10258
// begin side := i ;
10246: LD_ADDR_VAR 0 3
10250: PUSH
10251: LD_VAR 0 1
10255: ST_TO_ADDR
// break ;
10256: GO 10260
// end ;
10258: GO 10211
10260: POP
10261: POP
// if not side then
10262: LD_VAR 0 3
10266: NOT
10267: IFFALSE 10271
// exit ;
10269: GO 10316
// for i := 1 to tmp do
10271: LD_ADDR_VAR 0 1
10275: PUSH
10276: DOUBLE
10277: LD_INT 1
10279: DEC
10280: ST_TO_ADDR
10281: LD_VAR 0 2
10285: PUSH
10286: FOR_TO
10287: IFFALSE 10314
// if Prob ( 60 ) then
10289: LD_INT 60
10291: PPUSH
10292: CALL_OW 13
10296: IFFALSE 10312
// SetSide ( i , side ) ;
10298: LD_VAR 0 1
10302: PPUSH
10303: LD_VAR 0 3
10307: PPUSH
10308: CALL_OW 235
10312: GO 10286
10314: POP
10315: POP
// end ;
10316: PPOPN 3
10318: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10319: LD_EXP 23
10323: PUSH
10324: LD_EXP 36
10328: AND
10329: IFFALSE 10448
10331: GO 10333
10333: DISABLE
10334: LD_INT 0
10336: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10337: LD_ADDR_VAR 0 1
10341: PUSH
10342: LD_INT 22
10344: PUSH
10345: LD_OWVAR 2
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 21
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 3
10366: PUSH
10367: LD_INT 23
10369: PUSH
10370: LD_INT 0
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: LIST
10385: PPUSH
10386: CALL_OW 69
10390: PUSH
10391: FOR_IN
10392: IFFALSE 10446
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10394: LD_VAR 0 1
10398: PPUSH
10399: CALL_OW 257
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: LD_INT 2
10409: PUSH
10410: LD_INT 3
10412: PUSH
10413: LD_INT 4
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: IN
10422: IFFALSE 10444
// SetClass ( un , rand ( 1 , 4 ) ) ;
10424: LD_VAR 0 1
10428: PPUSH
10429: LD_INT 1
10431: PPUSH
10432: LD_INT 4
10434: PPUSH
10435: CALL_OW 12
10439: PPUSH
10440: CALL_OW 336
10444: GO 10391
10446: POP
10447: POP
// end ;
10448: PPOPN 1
10450: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10451: LD_EXP 23
10455: PUSH
10456: LD_EXP 35
10460: AND
10461: IFFALSE 10540
10463: GO 10465
10465: DISABLE
10466: LD_INT 0
10468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10469: LD_ADDR_VAR 0 1
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_OWVAR 2
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 21
10488: PUSH
10489: LD_INT 3
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PPUSH
10500: CALL_OW 69
10504: ST_TO_ADDR
// if not tmp then
10505: LD_VAR 0 1
10509: NOT
10510: IFFALSE 10514
// exit ;
10512: GO 10540
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10514: LD_VAR 0 1
10518: PUSH
10519: LD_INT 1
10521: PPUSH
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 12
10531: ARRAY
10532: PPUSH
10533: LD_INT 100
10535: PPUSH
10536: CALL_OW 234
// end ;
10540: PPOPN 1
10542: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10543: LD_EXP 23
10547: PUSH
10548: LD_EXP 37
10552: AND
10553: IFFALSE 10651
10555: GO 10557
10557: DISABLE
10558: LD_INT 0
10560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10561: LD_ADDR_VAR 0 1
10565: PUSH
10566: LD_INT 22
10568: PUSH
10569: LD_OWVAR 2
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 21
10580: PUSH
10581: LD_INT 1
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PPUSH
10592: CALL_OW 69
10596: ST_TO_ADDR
// if not tmp then
10597: LD_VAR 0 1
10601: NOT
10602: IFFALSE 10606
// exit ;
10604: GO 10651
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10606: LD_VAR 0 1
10610: PUSH
10611: LD_INT 1
10613: PPUSH
10614: LD_VAR 0 1
10618: PPUSH
10619: CALL_OW 12
10623: ARRAY
10624: PPUSH
10625: LD_INT 1
10627: PPUSH
10628: LD_INT 4
10630: PPUSH
10631: CALL_OW 12
10635: PPUSH
10636: LD_INT 3000
10638: PPUSH
10639: LD_INT 9000
10641: PPUSH
10642: CALL_OW 12
10646: PPUSH
10647: CALL_OW 492
// end ;
10651: PPOPN 1
10653: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10654: LD_EXP 23
10658: PUSH
10659: LD_EXP 38
10663: AND
10664: IFFALSE 10684
10666: GO 10668
10668: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10669: LD_INT 1
10671: PPUSH
10672: LD_OWVAR 2
10676: PPUSH
10677: LD_INT 0
10679: PPUSH
10680: CALL_OW 324
10684: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10685: LD_EXP 23
10689: PUSH
10690: LD_EXP 39
10694: AND
10695: IFFALSE 10778
10697: GO 10699
10699: DISABLE
10700: LD_INT 0
10702: PPUSH
10703: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10704: LD_ADDR_VAR 0 2
10708: PUSH
10709: LD_INT 22
10711: PUSH
10712: LD_OWVAR 2
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 21
10723: PUSH
10724: LD_INT 3
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 69
10739: ST_TO_ADDR
// if not tmp then
10740: LD_VAR 0 2
10744: NOT
10745: IFFALSE 10749
// exit ;
10747: GO 10778
// for i in tmp do
10749: LD_ADDR_VAR 0 1
10753: PUSH
10754: LD_VAR 0 2
10758: PUSH
10759: FOR_IN
10760: IFFALSE 10776
// SetBLevel ( i , 10 ) ;
10762: LD_VAR 0 1
10766: PPUSH
10767: LD_INT 10
10769: PPUSH
10770: CALL_OW 241
10774: GO 10759
10776: POP
10777: POP
// end ;
10778: PPOPN 2
10780: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10781: LD_EXP 23
10785: PUSH
10786: LD_EXP 40
10790: AND
10791: IFFALSE 10902
10793: GO 10795
10795: DISABLE
10796: LD_INT 0
10798: PPUSH
10799: PPUSH
10800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10801: LD_ADDR_VAR 0 3
10805: PUSH
10806: LD_INT 22
10808: PUSH
10809: LD_OWVAR 2
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 25
10820: PUSH
10821: LD_INT 1
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PPUSH
10832: CALL_OW 69
10836: ST_TO_ADDR
// if not tmp then
10837: LD_VAR 0 3
10841: NOT
10842: IFFALSE 10846
// exit ;
10844: GO 10902
// un := tmp [ rand ( 1 , tmp ) ] ;
10846: LD_ADDR_VAR 0 2
10850: PUSH
10851: LD_VAR 0 3
10855: PUSH
10856: LD_INT 1
10858: PPUSH
10859: LD_VAR 0 3
10863: PPUSH
10864: CALL_OW 12
10868: ARRAY
10869: ST_TO_ADDR
// if Crawls ( un ) then
10870: LD_VAR 0 2
10874: PPUSH
10875: CALL_OW 318
10879: IFFALSE 10890
// ComWalk ( un ) ;
10881: LD_VAR 0 2
10885: PPUSH
10886: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10890: LD_VAR 0 2
10894: PPUSH
10895: LD_INT 5
10897: PPUSH
10898: CALL_OW 336
// end ;
10902: PPOPN 3
10904: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10905: LD_EXP 23
10909: PUSH
10910: LD_EXP 41
10914: AND
10915: PUSH
10916: LD_OWVAR 67
10920: PUSH
10921: LD_INT 3
10923: LESS
10924: AND
10925: IFFALSE 10944
10927: GO 10929
10929: DISABLE
// Difficulty := Difficulty + 1 ;
10930: LD_ADDR_OWVAR 67
10934: PUSH
10935: LD_OWVAR 67
10939: PUSH
10940: LD_INT 1
10942: PLUS
10943: ST_TO_ADDR
10944: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10945: LD_EXP 23
10949: PUSH
10950: LD_EXP 42
10954: AND
10955: IFFALSE 11058
10957: GO 10959
10959: DISABLE
10960: LD_INT 0
10962: PPUSH
// begin for i := 1 to 5 do
10963: LD_ADDR_VAR 0 1
10967: PUSH
10968: DOUBLE
10969: LD_INT 1
10971: DEC
10972: ST_TO_ADDR
10973: LD_INT 5
10975: PUSH
10976: FOR_TO
10977: IFFALSE 11056
// begin uc_nation := nation_nature ;
10979: LD_ADDR_OWVAR 21
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// uc_side := 0 ;
10987: LD_ADDR_OWVAR 20
10991: PUSH
10992: LD_INT 0
10994: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10995: LD_ADDR_OWVAR 29
10999: PUSH
11000: LD_INT 12
11002: PUSH
11003: LD_INT 12
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: ST_TO_ADDR
// hc_agressivity := 20 ;
11010: LD_ADDR_OWVAR 35
11014: PUSH
11015: LD_INT 20
11017: ST_TO_ADDR
// hc_class := class_tiger ;
11018: LD_ADDR_OWVAR 28
11022: PUSH
11023: LD_INT 14
11025: ST_TO_ADDR
// hc_gallery :=  ;
11026: LD_ADDR_OWVAR 33
11030: PUSH
11031: LD_STRING 
11033: ST_TO_ADDR
// hc_name :=  ;
11034: LD_ADDR_OWVAR 26
11038: PUSH
11039: LD_STRING 
11041: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11042: CALL_OW 44
11046: PPUSH
11047: LD_INT 0
11049: PPUSH
11050: CALL_OW 51
// end ;
11054: GO 10976
11056: POP
11057: POP
// end ;
11058: PPOPN 1
11060: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11061: LD_EXP 23
11065: PUSH
11066: LD_EXP 43
11070: AND
11071: IFFALSE 11080
11073: GO 11075
11075: DISABLE
// StreamSibBomb ;
11076: CALL 11081 0 0
11080: END
// export function StreamSibBomb ; var i , x , y ; begin
11081: LD_INT 0
11083: PPUSH
11084: PPUSH
11085: PPUSH
11086: PPUSH
// result := false ;
11087: LD_ADDR_VAR 0 1
11091: PUSH
11092: LD_INT 0
11094: ST_TO_ADDR
// for i := 1 to 16 do
11095: LD_ADDR_VAR 0 2
11099: PUSH
11100: DOUBLE
11101: LD_INT 1
11103: DEC
11104: ST_TO_ADDR
11105: LD_INT 16
11107: PUSH
11108: FOR_TO
11109: IFFALSE 11308
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11111: LD_ADDR_VAR 0 3
11115: PUSH
11116: LD_INT 10
11118: PUSH
11119: LD_INT 20
11121: PUSH
11122: LD_INT 30
11124: PUSH
11125: LD_INT 40
11127: PUSH
11128: LD_INT 50
11130: PUSH
11131: LD_INT 60
11133: PUSH
11134: LD_INT 70
11136: PUSH
11137: LD_INT 80
11139: PUSH
11140: LD_INT 90
11142: PUSH
11143: LD_INT 100
11145: PUSH
11146: LD_INT 110
11148: PUSH
11149: LD_INT 120
11151: PUSH
11152: LD_INT 130
11154: PUSH
11155: LD_INT 140
11157: PUSH
11158: LD_INT 150
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 1
11180: PPUSH
11181: LD_INT 15
11183: PPUSH
11184: CALL_OW 12
11188: ARRAY
11189: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11190: LD_ADDR_VAR 0 4
11194: PUSH
11195: LD_INT 10
11197: PUSH
11198: LD_INT 20
11200: PUSH
11201: LD_INT 30
11203: PUSH
11204: LD_INT 40
11206: PUSH
11207: LD_INT 50
11209: PUSH
11210: LD_INT 60
11212: PUSH
11213: LD_INT 70
11215: PUSH
11216: LD_INT 80
11218: PUSH
11219: LD_INT 90
11221: PUSH
11222: LD_INT 100
11224: PUSH
11225: LD_INT 110
11227: PUSH
11228: LD_INT 120
11230: PUSH
11231: LD_INT 130
11233: PUSH
11234: LD_INT 140
11236: PUSH
11237: LD_INT 150
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 1
11259: PPUSH
11260: LD_INT 15
11262: PPUSH
11263: CALL_OW 12
11267: ARRAY
11268: ST_TO_ADDR
// if ValidHex ( x , y ) then
11269: LD_VAR 0 3
11273: PPUSH
11274: LD_VAR 0 4
11278: PPUSH
11279: CALL_OW 488
11283: IFFALSE 11306
// begin result := [ x , y ] ;
11285: LD_ADDR_VAR 0 1
11289: PUSH
11290: LD_VAR 0 3
11294: PUSH
11295: LD_VAR 0 4
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: ST_TO_ADDR
// break ;
11304: GO 11308
// end ; end ;
11306: GO 11108
11308: POP
11309: POP
// if result then
11310: LD_VAR 0 1
11314: IFFALSE 11374
// begin ToLua ( playSibBomb() ) ;
11316: LD_STRING playSibBomb()
11318: PPUSH
11319: CALL_OW 559
// wait ( 0 0$14 ) ;
11323: LD_INT 490
11325: PPUSH
11326: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11330: LD_VAR 0 1
11334: PUSH
11335: LD_INT 1
11337: ARRAY
11338: PPUSH
11339: LD_VAR 0 1
11343: PUSH
11344: LD_INT 2
11346: ARRAY
11347: PPUSH
11348: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11352: LD_VAR 0 1
11356: PUSH
11357: LD_INT 1
11359: ARRAY
11360: PPUSH
11361: LD_VAR 0 1
11365: PUSH
11366: LD_INT 2
11368: ARRAY
11369: PPUSH
11370: CALL_OW 429
// end ; end ;
11374: LD_VAR 0 1
11378: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11379: LD_EXP 23
11383: PUSH
11384: LD_EXP 45
11388: AND
11389: IFFALSE 11401
11391: GO 11393
11393: DISABLE
// YouLost (  ) ;
11394: LD_STRING 
11396: PPUSH
11397: CALL_OW 104
11401: END
// every 0 0$1 trigger StreamModeActive and sFog do
11402: LD_EXP 23
11406: PUSH
11407: LD_EXP 44
11411: AND
11412: IFFALSE 11426
11414: GO 11416
11416: DISABLE
// FogOff ( your_side ) ;
11417: LD_OWVAR 2
11421: PPUSH
11422: CALL_OW 344
11426: END
// every 0 0$1 trigger StreamModeActive and sSun do
11427: LD_EXP 23
11431: PUSH
11432: LD_EXP 46
11436: AND
11437: IFFALSE 11465
11439: GO 11441
11441: DISABLE
// begin solar_recharge_percent := 0 ;
11442: LD_ADDR_OWVAR 79
11446: PUSH
11447: LD_INT 0
11449: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11450: LD_INT 10500
11452: PPUSH
11453: CALL_OW 67
// solar_recharge_percent := 100 ;
11457: LD_ADDR_OWVAR 79
11461: PUSH
11462: LD_INT 100
11464: ST_TO_ADDR
// end ;
11465: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11466: LD_EXP 23
11470: PUSH
11471: LD_EXP 47
11475: AND
11476: IFFALSE 11715
11478: GO 11480
11480: DISABLE
11481: LD_INT 0
11483: PPUSH
11484: PPUSH
11485: PPUSH
// begin tmp := [ ] ;
11486: LD_ADDR_VAR 0 3
11490: PUSH
11491: EMPTY
11492: ST_TO_ADDR
// for i := 1 to 6 do
11493: LD_ADDR_VAR 0 1
11497: PUSH
11498: DOUBLE
11499: LD_INT 1
11501: DEC
11502: ST_TO_ADDR
11503: LD_INT 6
11505: PUSH
11506: FOR_TO
11507: IFFALSE 11612
// begin uc_nation := nation_nature ;
11509: LD_ADDR_OWVAR 21
11513: PUSH
11514: LD_INT 0
11516: ST_TO_ADDR
// uc_side := 0 ;
11517: LD_ADDR_OWVAR 20
11521: PUSH
11522: LD_INT 0
11524: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11525: LD_ADDR_OWVAR 29
11529: PUSH
11530: LD_INT 12
11532: PUSH
11533: LD_INT 12
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: ST_TO_ADDR
// hc_agressivity := 20 ;
11540: LD_ADDR_OWVAR 35
11544: PUSH
11545: LD_INT 20
11547: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11548: LD_ADDR_OWVAR 28
11552: PUSH
11553: LD_INT 17
11555: ST_TO_ADDR
// hc_gallery :=  ;
11556: LD_ADDR_OWVAR 33
11560: PUSH
11561: LD_STRING 
11563: ST_TO_ADDR
// hc_name :=  ;
11564: LD_ADDR_OWVAR 26
11568: PUSH
11569: LD_STRING 
11571: ST_TO_ADDR
// un := CreateHuman ;
11572: LD_ADDR_VAR 0 2
11576: PUSH
11577: CALL_OW 44
11581: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11582: LD_VAR 0 2
11586: PPUSH
11587: LD_INT 1
11589: PPUSH
11590: CALL_OW 51
// tmp := tmp ^ un ;
11594: LD_ADDR_VAR 0 3
11598: PUSH
11599: LD_VAR 0 3
11603: PUSH
11604: LD_VAR 0 2
11608: ADD
11609: ST_TO_ADDR
// end ;
11610: GO 11506
11612: POP
11613: POP
// repeat wait ( 0 0$1 ) ;
11614: LD_INT 35
11616: PPUSH
11617: CALL_OW 67
// for un in tmp do
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_VAR 0 3
11630: PUSH
11631: FOR_IN
11632: IFFALSE 11706
// begin if IsDead ( un ) then
11634: LD_VAR 0 2
11638: PPUSH
11639: CALL_OW 301
11643: IFFALSE 11663
// begin tmp := tmp diff un ;
11645: LD_ADDR_VAR 0 3
11649: PUSH
11650: LD_VAR 0 3
11654: PUSH
11655: LD_VAR 0 2
11659: DIFF
11660: ST_TO_ADDR
// continue ;
11661: GO 11631
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11663: LD_VAR 0 2
11667: PPUSH
11668: LD_INT 3
11670: PUSH
11671: LD_INT 22
11673: PUSH
11674: LD_INT 0
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 69
11689: PPUSH
11690: LD_VAR 0 2
11694: PPUSH
11695: CALL_OW 74
11699: PPUSH
11700: CALL_OW 115
// end ;
11704: GO 11631
11706: POP
11707: POP
// until not tmp ;
11708: LD_VAR 0 3
11712: NOT
11713: IFFALSE 11614
// end ;
11715: PPOPN 3
11717: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11718: LD_EXP 23
11722: PUSH
11723: LD_EXP 48
11727: AND
11728: IFFALSE 11782
11730: GO 11732
11732: DISABLE
// begin ToLua ( displayTroll(); ) ;
11733: LD_STRING displayTroll();
11735: PPUSH
11736: CALL_OW 559
// wait ( 3 3$00 ) ;
11740: LD_INT 6300
11742: PPUSH
11743: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11747: LD_STRING hideTroll();
11749: PPUSH
11750: CALL_OW 559
// wait ( 1 1$00 ) ;
11754: LD_INT 2100
11756: PPUSH
11757: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11761: LD_STRING displayTroll();
11763: PPUSH
11764: CALL_OW 559
// wait ( 1 1$00 ) ;
11768: LD_INT 2100
11770: PPUSH
11771: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11775: LD_STRING hideTroll();
11777: PPUSH
11778: CALL_OW 559
// end ;
11782: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11783: LD_EXP 23
11787: PUSH
11788: LD_EXP 49
11792: AND
11793: IFFALSE 11856
11795: GO 11797
11797: DISABLE
11798: LD_INT 0
11800: PPUSH
// begin p := 0 ;
11801: LD_ADDR_VAR 0 1
11805: PUSH
11806: LD_INT 0
11808: ST_TO_ADDR
// repeat game_speed := 1 ;
11809: LD_ADDR_OWVAR 65
11813: PUSH
11814: LD_INT 1
11816: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11817: LD_INT 35
11819: PPUSH
11820: CALL_OW 67
// p := p + 1 ;
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: LD_VAR 0 1
11833: PUSH
11834: LD_INT 1
11836: PLUS
11837: ST_TO_ADDR
// until p >= 60 ;
11838: LD_VAR 0 1
11842: PUSH
11843: LD_INT 60
11845: GREATEREQUAL
11846: IFFALSE 11809
// game_speed := 4 ;
11848: LD_ADDR_OWVAR 65
11852: PUSH
11853: LD_INT 4
11855: ST_TO_ADDR
// end ;
11856: PPOPN 1
11858: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11859: LD_EXP 23
11863: PUSH
11864: LD_EXP 50
11868: AND
11869: IFFALSE 12015
11871: GO 11873
11873: DISABLE
11874: LD_INT 0
11876: PPUSH
11877: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11878: LD_ADDR_VAR 0 1
11882: PUSH
11883: LD_INT 22
11885: PUSH
11886: LD_OWVAR 2
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: LD_INT 30
11900: PUSH
11901: LD_INT 0
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 30
11910: PUSH
11911: LD_INT 1
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: EMPTY
11924: LIST
11925: LIST
11926: PPUSH
11927: CALL_OW 69
11931: ST_TO_ADDR
// if not depot then
11932: LD_VAR 0 1
11936: NOT
11937: IFFALSE 11941
// exit ;
11939: GO 12015
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11941: LD_ADDR_VAR 0 2
11945: PUSH
11946: LD_VAR 0 1
11950: PUSH
11951: LD_INT 1
11953: PPUSH
11954: LD_VAR 0 1
11958: PPUSH
11959: CALL_OW 12
11963: ARRAY
11964: PPUSH
11965: CALL_OW 274
11969: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11970: LD_VAR 0 2
11974: PPUSH
11975: LD_INT 1
11977: PPUSH
11978: LD_INT 0
11980: PPUSH
11981: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11985: LD_VAR 0 2
11989: PPUSH
11990: LD_INT 2
11992: PPUSH
11993: LD_INT 0
11995: PPUSH
11996: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12000: LD_VAR 0 2
12004: PPUSH
12005: LD_INT 3
12007: PPUSH
12008: LD_INT 0
12010: PPUSH
12011: CALL_OW 277
// end ;
12015: PPOPN 2
12017: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12018: LD_EXP 23
12022: PUSH
12023: LD_EXP 51
12027: AND
12028: IFFALSE 12125
12030: GO 12032
12032: DISABLE
12033: LD_INT 0
12035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12036: LD_ADDR_VAR 0 1
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_OWVAR 2
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 21
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 3
12065: PUSH
12066: LD_INT 23
12068: PUSH
12069: LD_INT 0
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PPUSH
12085: CALL_OW 69
12089: ST_TO_ADDR
// if not tmp then
12090: LD_VAR 0 1
12094: NOT
12095: IFFALSE 12099
// exit ;
12097: GO 12125
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12099: LD_VAR 0 1
12103: PUSH
12104: LD_INT 1
12106: PPUSH
12107: LD_VAR 0 1
12111: PPUSH
12112: CALL_OW 12
12116: ARRAY
12117: PPUSH
12118: LD_INT 200
12120: PPUSH
12121: CALL_OW 234
// end ;
12125: PPOPN 1
12127: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12128: LD_EXP 23
12132: PUSH
12133: LD_EXP 52
12137: AND
12138: IFFALSE 12217
12140: GO 12142
12142: DISABLE
12143: LD_INT 0
12145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12146: LD_ADDR_VAR 0 1
12150: PUSH
12151: LD_INT 22
12153: PUSH
12154: LD_OWVAR 2
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 21
12165: PUSH
12166: LD_INT 2
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PPUSH
12177: CALL_OW 69
12181: ST_TO_ADDR
// if not tmp then
12182: LD_VAR 0 1
12186: NOT
12187: IFFALSE 12191
// exit ;
12189: GO 12217
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12191: LD_VAR 0 1
12195: PUSH
12196: LD_INT 1
12198: PPUSH
12199: LD_VAR 0 1
12203: PPUSH
12204: CALL_OW 12
12208: ARRAY
12209: PPUSH
12210: LD_INT 60
12212: PPUSH
12213: CALL_OW 234
// end ;
12217: PPOPN 1
12219: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12220: LD_EXP 23
12224: PUSH
12225: LD_EXP 53
12229: AND
12230: IFFALSE 12329
12232: GO 12234
12234: DISABLE
12235: LD_INT 0
12237: PPUSH
12238: PPUSH
// begin enable ;
12239: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12240: LD_ADDR_VAR 0 1
12244: PUSH
12245: LD_INT 22
12247: PUSH
12248: LD_OWVAR 2
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: LD_INT 61
12259: PUSH
12260: EMPTY
12261: LIST
12262: PUSH
12263: LD_INT 33
12265: PUSH
12266: LD_INT 2
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: PPUSH
12278: CALL_OW 69
12282: ST_TO_ADDR
// if not tmp then
12283: LD_VAR 0 1
12287: NOT
12288: IFFALSE 12292
// exit ;
12290: GO 12329
// for i in tmp do
12292: LD_ADDR_VAR 0 2
12296: PUSH
12297: LD_VAR 0 1
12301: PUSH
12302: FOR_IN
12303: IFFALSE 12327
// if IsControledBy ( i ) then
12305: LD_VAR 0 2
12309: PPUSH
12310: CALL_OW 312
12314: IFFALSE 12325
// ComUnlink ( i ) ;
12316: LD_VAR 0 2
12320: PPUSH
12321: CALL_OW 136
12325: GO 12302
12327: POP
12328: POP
// end ;
12329: PPOPN 2
12331: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12332: LD_EXP 23
12336: PUSH
12337: LD_EXP 54
12341: AND
12342: IFFALSE 12482
12344: GO 12346
12346: DISABLE
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
// begin ToLua ( displayPowell(); ) ;
12351: LD_STRING displayPowell();
12353: PPUSH
12354: CALL_OW 559
// uc_side := 0 ;
12358: LD_ADDR_OWVAR 20
12362: PUSH
12363: LD_INT 0
12365: ST_TO_ADDR
// uc_nation := 2 ;
12366: LD_ADDR_OWVAR 21
12370: PUSH
12371: LD_INT 2
12373: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12374: LD_ADDR_OWVAR 37
12378: PUSH
12379: LD_INT 14
12381: ST_TO_ADDR
// vc_engine := engine_siberite ;
12382: LD_ADDR_OWVAR 39
12386: PUSH
12387: LD_INT 3
12389: ST_TO_ADDR
// vc_control := control_apeman ;
12390: LD_ADDR_OWVAR 38
12394: PUSH
12395: LD_INT 5
12397: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12398: LD_ADDR_OWVAR 40
12402: PUSH
12403: LD_INT 29
12405: ST_TO_ADDR
// un := CreateVehicle ;
12406: LD_ADDR_VAR 0 2
12410: PUSH
12411: CALL_OW 45
12415: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12416: LD_VAR 0 2
12420: PPUSH
12421: LD_INT 1
12423: PPUSH
12424: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12428: LD_INT 35
12430: PPUSH
12431: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12435: LD_VAR 0 2
12439: PPUSH
12440: LD_INT 22
12442: PUSH
12443: LD_OWVAR 2
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PPUSH
12452: CALL_OW 69
12456: PPUSH
12457: LD_VAR 0 2
12461: PPUSH
12462: CALL_OW 74
12466: PPUSH
12467: CALL_OW 115
// until IsDead ( un ) ;
12471: LD_VAR 0 2
12475: PPUSH
12476: CALL_OW 301
12480: IFFALSE 12428
// end ;
12482: PPOPN 2
12484: END
// every 0 0$1 trigger StreamModeActive and sStu do
12485: LD_EXP 23
12489: PUSH
12490: LD_EXP 62
12494: AND
12495: IFFALSE 12511
12497: GO 12499
12499: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12500: LD_STRING displayStucuk();
12502: PPUSH
12503: CALL_OW 559
// ResetFog ;
12507: CALL_OW 335
// end ;
12511: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12512: LD_EXP 23
12516: PUSH
12517: LD_EXP 55
12521: AND
12522: IFFALSE 12663
12524: GO 12526
12526: DISABLE
12527: LD_INT 0
12529: PPUSH
12530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: LD_INT 22
12538: PUSH
12539: LD_OWVAR 2
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 21
12550: PUSH
12551: LD_INT 1
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PPUSH
12562: CALL_OW 69
12566: ST_TO_ADDR
// if not tmp then
12567: LD_VAR 0 2
12571: NOT
12572: IFFALSE 12576
// exit ;
12574: GO 12663
// un := tmp [ rand ( 1 , tmp ) ] ;
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: LD_VAR 0 2
12585: PUSH
12586: LD_INT 1
12588: PPUSH
12589: LD_VAR 0 2
12593: PPUSH
12594: CALL_OW 12
12598: ARRAY
12599: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12600: LD_VAR 0 1
12604: PPUSH
12605: LD_INT 0
12607: PPUSH
12608: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12612: LD_VAR 0 1
12616: PPUSH
12617: LD_OWVAR 3
12621: PUSH
12622: LD_VAR 0 1
12626: DIFF
12627: PPUSH
12628: LD_VAR 0 1
12632: PPUSH
12633: CALL_OW 74
12637: PPUSH
12638: CALL_OW 115
// wait ( 0 0$20 ) ;
12642: LD_INT 700
12644: PPUSH
12645: CALL_OW 67
// SetSide ( un , your_side ) ;
12649: LD_VAR 0 1
12653: PPUSH
12654: LD_OWVAR 2
12658: PPUSH
12659: CALL_OW 235
// end ;
12663: PPOPN 2
12665: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12666: LD_EXP 23
12670: PUSH
12671: LD_EXP 56
12675: AND
12676: IFFALSE 12782
12678: GO 12680
12680: DISABLE
12681: LD_INT 0
12683: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12684: LD_ADDR_VAR 0 1
12688: PUSH
12689: LD_INT 22
12691: PUSH
12692: LD_OWVAR 2
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: LD_INT 30
12706: PUSH
12707: LD_INT 0
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 30
12716: PUSH
12717: LD_INT 1
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PPUSH
12733: CALL_OW 69
12737: ST_TO_ADDR
// if not depot then
12738: LD_VAR 0 1
12742: NOT
12743: IFFALSE 12747
// exit ;
12745: GO 12782
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12747: LD_VAR 0 1
12751: PUSH
12752: LD_INT 1
12754: ARRAY
12755: PPUSH
12756: CALL_OW 250
12760: PPUSH
12761: LD_VAR 0 1
12765: PUSH
12766: LD_INT 1
12768: ARRAY
12769: PPUSH
12770: CALL_OW 251
12774: PPUSH
12775: LD_INT 70
12777: PPUSH
12778: CALL_OW 495
// end ;
12782: PPOPN 1
12784: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12785: LD_EXP 23
12789: PUSH
12790: LD_EXP 57
12794: AND
12795: IFFALSE 13006
12797: GO 12799
12799: DISABLE
12800: LD_INT 0
12802: PPUSH
12803: PPUSH
12804: PPUSH
12805: PPUSH
12806: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12807: LD_ADDR_VAR 0 5
12811: PUSH
12812: LD_INT 22
12814: PUSH
12815: LD_OWVAR 2
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: LD_INT 21
12826: PUSH
12827: LD_INT 1
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PPUSH
12838: CALL_OW 69
12842: ST_TO_ADDR
// if not tmp then
12843: LD_VAR 0 5
12847: NOT
12848: IFFALSE 12852
// exit ;
12850: GO 13006
// for i in tmp do
12852: LD_ADDR_VAR 0 1
12856: PUSH
12857: LD_VAR 0 5
12861: PUSH
12862: FOR_IN
12863: IFFALSE 13004
// begin d := rand ( 0 , 5 ) ;
12865: LD_ADDR_VAR 0 4
12869: PUSH
12870: LD_INT 0
12872: PPUSH
12873: LD_INT 5
12875: PPUSH
12876: CALL_OW 12
12880: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: LD_VAR 0 1
12890: PPUSH
12891: CALL_OW 250
12895: PPUSH
12896: LD_VAR 0 4
12900: PPUSH
12901: LD_INT 3
12903: PPUSH
12904: LD_INT 12
12906: PPUSH
12907: CALL_OW 12
12911: PPUSH
12912: CALL_OW 272
12916: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12917: LD_ADDR_VAR 0 3
12921: PUSH
12922: LD_VAR 0 1
12926: PPUSH
12927: CALL_OW 251
12931: PPUSH
12932: LD_VAR 0 4
12936: PPUSH
12937: LD_INT 3
12939: PPUSH
12940: LD_INT 12
12942: PPUSH
12943: CALL_OW 12
12947: PPUSH
12948: CALL_OW 273
12952: ST_TO_ADDR
// if ValidHex ( x , y ) then
12953: LD_VAR 0 2
12957: PPUSH
12958: LD_VAR 0 3
12962: PPUSH
12963: CALL_OW 488
12967: IFFALSE 13002
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12969: LD_VAR 0 1
12973: PPUSH
12974: LD_VAR 0 2
12978: PPUSH
12979: LD_VAR 0 3
12983: PPUSH
12984: LD_INT 3
12986: PPUSH
12987: LD_INT 6
12989: PPUSH
12990: CALL_OW 12
12994: PPUSH
12995: LD_INT 1
12997: PPUSH
12998: CALL_OW 483
// end ;
13002: GO 12862
13004: POP
13005: POP
// end ;
13006: PPOPN 5
13008: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13009: LD_EXP 23
13013: PUSH
13014: LD_EXP 58
13018: AND
13019: IFFALSE 13113
13021: GO 13023
13023: DISABLE
13024: LD_INT 0
13026: PPUSH
13027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13028: LD_ADDR_VAR 0 2
13032: PUSH
13033: LD_INT 22
13035: PUSH
13036: LD_OWVAR 2
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 32
13047: PUSH
13048: LD_INT 1
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 21
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: PPUSH
13070: CALL_OW 69
13074: ST_TO_ADDR
// if not tmp then
13075: LD_VAR 0 2
13079: NOT
13080: IFFALSE 13084
// exit ;
13082: GO 13113
// for i in tmp do
13084: LD_ADDR_VAR 0 1
13088: PUSH
13089: LD_VAR 0 2
13093: PUSH
13094: FOR_IN
13095: IFFALSE 13111
// SetFuel ( i , 0 ) ;
13097: LD_VAR 0 1
13101: PPUSH
13102: LD_INT 0
13104: PPUSH
13105: CALL_OW 240
13109: GO 13094
13111: POP
13112: POP
// end ;
13113: PPOPN 2
13115: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13116: LD_EXP 23
13120: PUSH
13121: LD_EXP 59
13125: AND
13126: IFFALSE 13192
13128: GO 13130
13130: DISABLE
13131: LD_INT 0
13133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13134: LD_ADDR_VAR 0 1
13138: PUSH
13139: LD_INT 22
13141: PUSH
13142: LD_OWVAR 2
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 30
13153: PUSH
13154: LD_INT 29
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 69
13169: ST_TO_ADDR
// if not tmp then
13170: LD_VAR 0 1
13174: NOT
13175: IFFALSE 13179
// exit ;
13177: GO 13192
// DestroyUnit ( tmp [ 1 ] ) ;
13179: LD_VAR 0 1
13183: PUSH
13184: LD_INT 1
13186: ARRAY
13187: PPUSH
13188: CALL_OW 65
// end ;
13192: PPOPN 1
13194: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13195: LD_EXP 23
13199: PUSH
13200: LD_EXP 61
13204: AND
13205: IFFALSE 13334
13207: GO 13209
13209: DISABLE
13210: LD_INT 0
13212: PPUSH
// begin uc_side := 0 ;
13213: LD_ADDR_OWVAR 20
13217: PUSH
13218: LD_INT 0
13220: ST_TO_ADDR
// uc_nation := nation_arabian ;
13221: LD_ADDR_OWVAR 21
13225: PUSH
13226: LD_INT 2
13228: ST_TO_ADDR
// hc_gallery :=  ;
13229: LD_ADDR_OWVAR 33
13233: PUSH
13234: LD_STRING 
13236: ST_TO_ADDR
// hc_name :=  ;
13237: LD_ADDR_OWVAR 26
13241: PUSH
13242: LD_STRING 
13244: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13245: LD_INT 1
13247: PPUSH
13248: LD_INT 11
13250: PPUSH
13251: LD_INT 10
13253: PPUSH
13254: CALL_OW 380
// un := CreateHuman ;
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: CALL_OW 44
13267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13268: LD_VAR 0 1
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13280: LD_INT 35
13282: PPUSH
13283: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13287: LD_VAR 0 1
13291: PPUSH
13292: LD_INT 22
13294: PUSH
13295: LD_OWVAR 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: PPUSH
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 74
13318: PPUSH
13319: CALL_OW 115
// until IsDead ( un ) ;
13323: LD_VAR 0 1
13327: PPUSH
13328: CALL_OW 301
13332: IFFALSE 13280
// end ;
13334: PPOPN 1
13336: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13337: LD_EXP 23
13341: PUSH
13342: LD_EXP 63
13346: AND
13347: IFFALSE 13359
13349: GO 13351
13351: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13352: LD_STRING earthquake(getX(game), 0, 32)
13354: PPUSH
13355: CALL_OW 559
13359: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13360: LD_EXP 23
13364: PUSH
13365: LD_EXP 64
13369: AND
13370: IFFALSE 13461
13372: GO 13374
13374: DISABLE
13375: LD_INT 0
13377: PPUSH
// begin enable ;
13378: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13379: LD_ADDR_VAR 0 1
13383: PUSH
13384: LD_INT 22
13386: PUSH
13387: LD_OWVAR 2
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 33
13408: PUSH
13409: LD_INT 3
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: ST_TO_ADDR
// if not tmp then
13426: LD_VAR 0 1
13430: NOT
13431: IFFALSE 13435
// exit ;
13433: GO 13461
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13435: LD_VAR 0 1
13439: PUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_VAR 0 1
13447: PPUSH
13448: CALL_OW 12
13452: ARRAY
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: CALL_OW 234
// end ;
13461: PPOPN 1
13463: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13464: LD_EXP 23
13468: PUSH
13469: LD_EXP 65
13473: AND
13474: IFFALSE 13615
13476: GO 13478
13478: DISABLE
13479: LD_INT 0
13481: PPUSH
13482: PPUSH
13483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13484: LD_ADDR_VAR 0 3
13488: PUSH
13489: LD_INT 22
13491: PUSH
13492: LD_OWVAR 2
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 25
13503: PUSH
13504: LD_INT 1
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PPUSH
13515: CALL_OW 69
13519: ST_TO_ADDR
// if not tmp then
13520: LD_VAR 0 3
13524: NOT
13525: IFFALSE 13529
// exit ;
13527: GO 13615
// un := tmp [ rand ( 1 , tmp ) ] ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_VAR 0 3
13538: PUSH
13539: LD_INT 1
13541: PPUSH
13542: LD_VAR 0 3
13546: PPUSH
13547: CALL_OW 12
13551: ARRAY
13552: ST_TO_ADDR
// if Crawls ( un ) then
13553: LD_VAR 0 2
13557: PPUSH
13558: CALL_OW 318
13562: IFFALSE 13573
// ComWalk ( un ) ;
13564: LD_VAR 0 2
13568: PPUSH
13569: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13573: LD_VAR 0 2
13577: PPUSH
13578: LD_INT 9
13580: PPUSH
13581: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13585: LD_INT 28
13587: PPUSH
13588: LD_OWVAR 2
13592: PPUSH
13593: LD_INT 2
13595: PPUSH
13596: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13600: LD_INT 29
13602: PPUSH
13603: LD_OWVAR 2
13607: PPUSH
13608: LD_INT 2
13610: PPUSH
13611: CALL_OW 322
// end ;
13615: PPOPN 3
13617: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13618: LD_EXP 23
13622: PUSH
13623: LD_EXP 66
13627: AND
13628: IFFALSE 13739
13630: GO 13632
13632: DISABLE
13633: LD_INT 0
13635: PPUSH
13636: PPUSH
13637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13638: LD_ADDR_VAR 0 3
13642: PUSH
13643: LD_INT 22
13645: PUSH
13646: LD_OWVAR 2
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PPUSH
13669: CALL_OW 69
13673: ST_TO_ADDR
// if not tmp then
13674: LD_VAR 0 3
13678: NOT
13679: IFFALSE 13683
// exit ;
13681: GO 13739
// un := tmp [ rand ( 1 , tmp ) ] ;
13683: LD_ADDR_VAR 0 2
13687: PUSH
13688: LD_VAR 0 3
13692: PUSH
13693: LD_INT 1
13695: PPUSH
13696: LD_VAR 0 3
13700: PPUSH
13701: CALL_OW 12
13705: ARRAY
13706: ST_TO_ADDR
// if Crawls ( un ) then
13707: LD_VAR 0 2
13711: PPUSH
13712: CALL_OW 318
13716: IFFALSE 13727
// ComWalk ( un ) ;
13718: LD_VAR 0 2
13722: PPUSH
13723: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13727: LD_VAR 0 2
13731: PPUSH
13732: LD_INT 8
13734: PPUSH
13735: CALL_OW 336
// end ;
13739: PPOPN 3
13741: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13742: LD_EXP 23
13746: PUSH
13747: LD_EXP 67
13751: AND
13752: IFFALSE 13896
13754: GO 13756
13756: DISABLE
13757: LD_INT 0
13759: PPUSH
13760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13761: LD_ADDR_VAR 0 2
13765: PUSH
13766: LD_INT 22
13768: PUSH
13769: LD_OWVAR 2
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 21
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 2
13790: PUSH
13791: LD_INT 34
13793: PUSH
13794: LD_INT 12
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 34
13803: PUSH
13804: LD_INT 51
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: LD_INT 34
13813: PUSH
13814: LD_INT 32
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: PPUSH
13832: CALL_OW 69
13836: ST_TO_ADDR
// if not tmp then
13837: LD_VAR 0 2
13841: NOT
13842: IFFALSE 13846
// exit ;
13844: GO 13896
// for i in tmp do
13846: LD_ADDR_VAR 0 1
13850: PUSH
13851: LD_VAR 0 2
13855: PUSH
13856: FOR_IN
13857: IFFALSE 13894
// if GetCargo ( i , mat_artifact ) = 0 then
13859: LD_VAR 0 1
13863: PPUSH
13864: LD_INT 4
13866: PPUSH
13867: CALL_OW 289
13871: PUSH
13872: LD_INT 0
13874: EQUAL
13875: IFFALSE 13892
// SetCargo ( i , mat_siberit , 100 ) ;
13877: LD_VAR 0 1
13881: PPUSH
13882: LD_INT 3
13884: PPUSH
13885: LD_INT 100
13887: PPUSH
13888: CALL_OW 290
13892: GO 13856
13894: POP
13895: POP
// end ;
13896: PPOPN 2
13898: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13899: LD_EXP 23
13903: PUSH
13904: LD_EXP 68
13908: AND
13909: IFFALSE 14092
13911: GO 13913
13913: DISABLE
13914: LD_INT 0
13916: PPUSH
13917: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13918: LD_ADDR_VAR 0 2
13922: PUSH
13923: LD_INT 22
13925: PUSH
13926: LD_OWVAR 2
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PPUSH
13935: CALL_OW 69
13939: ST_TO_ADDR
// if not tmp then
13940: LD_VAR 0 2
13944: NOT
13945: IFFALSE 13949
// exit ;
13947: GO 14092
// for i := 1 to 2 do
13949: LD_ADDR_VAR 0 1
13953: PUSH
13954: DOUBLE
13955: LD_INT 1
13957: DEC
13958: ST_TO_ADDR
13959: LD_INT 2
13961: PUSH
13962: FOR_TO
13963: IFFALSE 14090
// begin uc_side := your_side ;
13965: LD_ADDR_OWVAR 20
13969: PUSH
13970: LD_OWVAR 2
13974: ST_TO_ADDR
// uc_nation := nation_american ;
13975: LD_ADDR_OWVAR 21
13979: PUSH
13980: LD_INT 1
13982: ST_TO_ADDR
// vc_chassis := us_morphling ;
13983: LD_ADDR_OWVAR 37
13987: PUSH
13988: LD_INT 5
13990: ST_TO_ADDR
// vc_engine := engine_siberite ;
13991: LD_ADDR_OWVAR 39
13995: PUSH
13996: LD_INT 3
13998: ST_TO_ADDR
// vc_control := control_computer ;
13999: LD_ADDR_OWVAR 38
14003: PUSH
14004: LD_INT 3
14006: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14007: LD_ADDR_OWVAR 40
14011: PUSH
14012: LD_INT 10
14014: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14015: LD_VAR 0 2
14019: PUSH
14020: LD_INT 1
14022: ARRAY
14023: PPUSH
14024: CALL_OW 310
14028: NOT
14029: IFFALSE 14076
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14031: CALL_OW 45
14035: PPUSH
14036: LD_VAR 0 2
14040: PUSH
14041: LD_INT 1
14043: ARRAY
14044: PPUSH
14045: CALL_OW 250
14049: PPUSH
14050: LD_VAR 0 2
14054: PUSH
14055: LD_INT 1
14057: ARRAY
14058: PPUSH
14059: CALL_OW 251
14063: PPUSH
14064: LD_INT 12
14066: PPUSH
14067: LD_INT 1
14069: PPUSH
14070: CALL_OW 50
14074: GO 14088
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14076: CALL_OW 45
14080: PPUSH
14081: LD_INT 1
14083: PPUSH
14084: CALL_OW 51
// end ;
14088: GO 13962
14090: POP
14091: POP
// end ;
14092: PPOPN 2
14094: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14095: LD_EXP 23
14099: PUSH
14100: LD_EXP 69
14104: AND
14105: IFFALSE 14327
14107: GO 14109
14109: DISABLE
14110: LD_INT 0
14112: PPUSH
14113: PPUSH
14114: PPUSH
14115: PPUSH
14116: PPUSH
14117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14118: LD_ADDR_VAR 0 6
14122: PUSH
14123: LD_INT 22
14125: PUSH
14126: LD_OWVAR 2
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 21
14137: PUSH
14138: LD_INT 1
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: LD_INT 23
14150: PUSH
14151: LD_INT 0
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: PPUSH
14167: CALL_OW 69
14171: ST_TO_ADDR
// if not tmp then
14172: LD_VAR 0 6
14176: NOT
14177: IFFALSE 14181
// exit ;
14179: GO 14327
// s1 := rand ( 1 , 4 ) ;
14181: LD_ADDR_VAR 0 2
14185: PUSH
14186: LD_INT 1
14188: PPUSH
14189: LD_INT 4
14191: PPUSH
14192: CALL_OW 12
14196: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14197: LD_ADDR_VAR 0 4
14201: PUSH
14202: LD_VAR 0 6
14206: PUSH
14207: LD_INT 1
14209: ARRAY
14210: PPUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: CALL_OW 259
14220: ST_TO_ADDR
// if s1 = 1 then
14221: LD_VAR 0 2
14225: PUSH
14226: LD_INT 1
14228: EQUAL
14229: IFFALSE 14249
// s2 := rand ( 2 , 4 ) else
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_INT 2
14238: PPUSH
14239: LD_INT 4
14241: PPUSH
14242: CALL_OW 12
14246: ST_TO_ADDR
14247: GO 14257
// s2 := 1 ;
14249: LD_ADDR_VAR 0 3
14253: PUSH
14254: LD_INT 1
14256: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14257: LD_ADDR_VAR 0 5
14261: PUSH
14262: LD_VAR 0 6
14266: PUSH
14267: LD_INT 1
14269: ARRAY
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: CALL_OW 259
14280: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14281: LD_VAR 0 6
14285: PUSH
14286: LD_INT 1
14288: ARRAY
14289: PPUSH
14290: LD_VAR 0 2
14294: PPUSH
14295: LD_VAR 0 5
14299: PPUSH
14300: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14304: LD_VAR 0 6
14308: PUSH
14309: LD_INT 1
14311: ARRAY
14312: PPUSH
14313: LD_VAR 0 3
14317: PPUSH
14318: LD_VAR 0 4
14322: PPUSH
14323: CALL_OW 237
// end ;
14327: PPOPN 6
14329: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14330: LD_EXP 23
14334: PUSH
14335: LD_EXP 70
14339: AND
14340: IFFALSE 14419
14342: GO 14344
14344: DISABLE
14345: LD_INT 0
14347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14348: LD_ADDR_VAR 0 1
14352: PUSH
14353: LD_INT 22
14355: PUSH
14356: LD_OWVAR 2
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 30
14367: PUSH
14368: LD_INT 3
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 69
14383: ST_TO_ADDR
// if not tmp then
14384: LD_VAR 0 1
14388: NOT
14389: IFFALSE 14393
// exit ;
14391: GO 14419
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14393: LD_VAR 0 1
14397: PUSH
14398: LD_INT 1
14400: PPUSH
14401: LD_VAR 0 1
14405: PPUSH
14406: CALL_OW 12
14410: ARRAY
14411: PPUSH
14412: LD_INT 1
14414: PPUSH
14415: CALL_OW 234
// end ;
14419: PPOPN 1
14421: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14422: LD_EXP 23
14426: PUSH
14427: LD_EXP 71
14431: AND
14432: IFFALSE 14544
14434: GO 14436
14436: DISABLE
14437: LD_INT 0
14439: PPUSH
14440: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14441: LD_ADDR_VAR 0 2
14445: PUSH
14446: LD_INT 22
14448: PUSH
14449: LD_OWVAR 2
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 2
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 27
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 30
14473: PUSH
14474: LD_INT 26
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: LD_INT 30
14483: PUSH
14484: LD_INT 28
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: LIST
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: PPUSH
14501: CALL_OW 69
14505: ST_TO_ADDR
// if not tmp then
14506: LD_VAR 0 2
14510: NOT
14511: IFFALSE 14515
// exit ;
14513: GO 14544
// for i in tmp do
14515: LD_ADDR_VAR 0 1
14519: PUSH
14520: LD_VAR 0 2
14524: PUSH
14525: FOR_IN
14526: IFFALSE 14542
// SetLives ( i , 1 ) ;
14528: LD_VAR 0 1
14532: PPUSH
14533: LD_INT 1
14535: PPUSH
14536: CALL_OW 234
14540: GO 14525
14542: POP
14543: POP
// end ;
14544: PPOPN 2
14546: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14547: LD_EXP 23
14551: PUSH
14552: LD_EXP 72
14556: AND
14557: IFFALSE 14831
14559: GO 14561
14561: DISABLE
14562: LD_INT 0
14564: PPUSH
14565: PPUSH
14566: PPUSH
// begin i := rand ( 1 , 7 ) ;
14567: LD_ADDR_VAR 0 1
14571: PUSH
14572: LD_INT 1
14574: PPUSH
14575: LD_INT 7
14577: PPUSH
14578: CALL_OW 12
14582: ST_TO_ADDR
// case i of 1 :
14583: LD_VAR 0 1
14587: PUSH
14588: LD_INT 1
14590: DOUBLE
14591: EQUAL
14592: IFTRUE 14596
14594: GO 14606
14596: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14597: LD_STRING earthquake(getX(game), 0, 32)
14599: PPUSH
14600: CALL_OW 559
14604: GO 14831
14606: LD_INT 2
14608: DOUBLE
14609: EQUAL
14610: IFTRUE 14614
14612: GO 14628
14614: POP
// begin ToLua ( displayStucuk(); ) ;
14615: LD_STRING displayStucuk();
14617: PPUSH
14618: CALL_OW 559
// ResetFog ;
14622: CALL_OW 335
// end ; 3 :
14626: GO 14831
14628: LD_INT 3
14630: DOUBLE
14631: EQUAL
14632: IFTRUE 14636
14634: GO 14740
14636: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14637: LD_ADDR_VAR 0 2
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_OWVAR 2
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: LD_INT 25
14656: PUSH
14657: LD_INT 1
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PPUSH
14668: CALL_OW 69
14672: ST_TO_ADDR
// if not tmp then
14673: LD_VAR 0 2
14677: NOT
14678: IFFALSE 14682
// exit ;
14680: GO 14831
// un := tmp [ rand ( 1 , tmp ) ] ;
14682: LD_ADDR_VAR 0 3
14686: PUSH
14687: LD_VAR 0 2
14691: PUSH
14692: LD_INT 1
14694: PPUSH
14695: LD_VAR 0 2
14699: PPUSH
14700: CALL_OW 12
14704: ARRAY
14705: ST_TO_ADDR
// if Crawls ( un ) then
14706: LD_VAR 0 3
14710: PPUSH
14711: CALL_OW 318
14715: IFFALSE 14726
// ComWalk ( un ) ;
14717: LD_VAR 0 3
14721: PPUSH
14722: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14726: LD_VAR 0 3
14730: PPUSH
14731: LD_INT 8
14733: PPUSH
14734: CALL_OW 336
// end ; 4 :
14738: GO 14831
14740: LD_INT 4
14742: DOUBLE
14743: EQUAL
14744: IFTRUE 14748
14746: GO 14809
14748: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14749: LD_ADDR_VAR 0 2
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_OWVAR 2
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 30
14768: PUSH
14769: LD_INT 29
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: ST_TO_ADDR
// if not tmp then
14785: LD_VAR 0 2
14789: NOT
14790: IFFALSE 14794
// exit ;
14792: GO 14831
// DestroyUnit ( tmp [ 1 ] ) ;
14794: LD_VAR 0 2
14798: PUSH
14799: LD_INT 1
14801: ARRAY
14802: PPUSH
14803: CALL_OW 65
// end ; 5 .. 7 :
14807: GO 14831
14809: LD_INT 5
14811: DOUBLE
14812: GREATEREQUAL
14813: IFFALSE 14821
14815: LD_INT 7
14817: DOUBLE
14818: LESSEQUAL
14819: IFTRUE 14823
14821: GO 14830
14823: POP
// StreamSibBomb ; end ;
14824: CALL 11081 0 0
14828: GO 14831
14830: POP
// end ;
14831: PPOPN 3
14833: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14834: LD_EXP 23
14838: PUSH
14839: LD_EXP 73
14843: AND
14844: IFFALSE 15000
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
14853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: LD_INT 81
14861: PUSH
14862: LD_OWVAR 2
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 2
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 1
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: LD_INT 21
14886: PUSH
14887: LD_INT 2
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 69
14907: ST_TO_ADDR
// if not tmp then
14908: LD_VAR 0 2
14912: NOT
14913: IFFALSE 14917
// exit ;
14915: GO 15000
// p := 0 ;
14917: LD_ADDR_VAR 0 3
14921: PUSH
14922: LD_INT 0
14924: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14925: LD_INT 35
14927: PPUSH
14928: CALL_OW 67
// p := p + 1 ;
14932: LD_ADDR_VAR 0 3
14936: PUSH
14937: LD_VAR 0 3
14941: PUSH
14942: LD_INT 1
14944: PLUS
14945: ST_TO_ADDR
// for i in tmp do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 2
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14988
// if GetLives ( i ) < 1000 then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 256
14968: PUSH
14969: LD_INT 1000
14971: LESS
14972: IFFALSE 14986
// SetLives ( i , 1000 ) ;
14974: LD_VAR 0 1
14978: PPUSH
14979: LD_INT 1000
14981: PPUSH
14982: CALL_OW 234
14986: GO 14956
14988: POP
14989: POP
// until p > 20 ;
14990: LD_VAR 0 3
14994: PUSH
14995: LD_INT 20
14997: GREATER
14998: IFFALSE 14925
// end ;
15000: PPOPN 3
15002: END
// every 0 0$1 trigger StreamModeActive and sTime do
15003: LD_EXP 23
15007: PUSH
15008: LD_EXP 74
15012: AND
15013: IFFALSE 15048
15015: GO 15017
15017: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15018: LD_INT 28
15020: PPUSH
15021: LD_OWVAR 2
15025: PPUSH
15026: LD_INT 2
15028: PPUSH
15029: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15033: LD_INT 30
15035: PPUSH
15036: LD_OWVAR 2
15040: PPUSH
15041: LD_INT 2
15043: PPUSH
15044: CALL_OW 322
// end ;
15048: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15049: LD_EXP 23
15053: PUSH
15054: LD_EXP 75
15058: AND
15059: IFFALSE 15180
15061: GO 15063
15063: DISABLE
15064: LD_INT 0
15066: PPUSH
15067: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15068: LD_ADDR_VAR 0 2
15072: PUSH
15073: LD_INT 22
15075: PUSH
15076: LD_OWVAR 2
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 21
15087: PUSH
15088: LD_INT 1
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: LD_INT 3
15097: PUSH
15098: LD_INT 23
15100: PUSH
15101: LD_INT 0
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: PPUSH
15117: CALL_OW 69
15121: ST_TO_ADDR
// if not tmp then
15122: LD_VAR 0 2
15126: NOT
15127: IFFALSE 15131
// exit ;
15129: GO 15180
// for i in tmp do
15131: LD_ADDR_VAR 0 1
15135: PUSH
15136: LD_VAR 0 2
15140: PUSH
15141: FOR_IN
15142: IFFALSE 15178
// begin if Crawls ( i ) then
15144: LD_VAR 0 1
15148: PPUSH
15149: CALL_OW 318
15153: IFFALSE 15164
// ComWalk ( i ) ;
15155: LD_VAR 0 1
15159: PPUSH
15160: CALL_OW 138
// SetClass ( i , 2 ) ;
15164: LD_VAR 0 1
15168: PPUSH
15169: LD_INT 2
15171: PPUSH
15172: CALL_OW 336
// end ;
15176: GO 15141
15178: POP
15179: POP
// end ;
15180: PPOPN 2
15182: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15183: LD_EXP 23
15187: PUSH
15188: LD_EXP 76
15192: AND
15193: IFFALSE 15474
15195: GO 15197
15197: DISABLE
15198: LD_INT 0
15200: PPUSH
15201: PPUSH
15202: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15203: LD_OWVAR 2
15207: PPUSH
15208: LD_INT 9
15210: PPUSH
15211: LD_INT 1
15213: PPUSH
15214: LD_INT 1
15216: PPUSH
15217: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15221: LD_INT 9
15223: PPUSH
15224: LD_OWVAR 2
15228: PPUSH
15229: CALL_OW 343
// uc_side := 9 ;
15233: LD_ADDR_OWVAR 20
15237: PUSH
15238: LD_INT 9
15240: ST_TO_ADDR
// uc_nation := 2 ;
15241: LD_ADDR_OWVAR 21
15245: PUSH
15246: LD_INT 2
15248: ST_TO_ADDR
// hc_name := Dark Warrior ;
15249: LD_ADDR_OWVAR 26
15253: PUSH
15254: LD_STRING Dark Warrior
15256: ST_TO_ADDR
// hc_gallery :=  ;
15257: LD_ADDR_OWVAR 33
15261: PUSH
15262: LD_STRING 
15264: ST_TO_ADDR
// hc_noskilllimit := true ;
15265: LD_ADDR_OWVAR 76
15269: PUSH
15270: LD_INT 1
15272: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15273: LD_ADDR_OWVAR 31
15277: PUSH
15278: LD_INT 30
15280: PUSH
15281: LD_INT 30
15283: PUSH
15284: LD_INT 30
15286: PUSH
15287: LD_INT 30
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: ST_TO_ADDR
// un := CreateHuman ;
15296: LD_ADDR_VAR 0 3
15300: PUSH
15301: CALL_OW 44
15305: ST_TO_ADDR
// hc_noskilllimit := false ;
15306: LD_ADDR_OWVAR 76
15310: PUSH
15311: LD_INT 0
15313: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15314: LD_VAR 0 3
15318: PPUSH
15319: LD_INT 1
15321: PPUSH
15322: CALL_OW 51
// p := 0 ;
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: LD_INT 0
15333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15334: LD_INT 35
15336: PPUSH
15337: CALL_OW 67
// p := p + 1 ;
15341: LD_ADDR_VAR 0 2
15345: PUSH
15346: LD_VAR 0 2
15350: PUSH
15351: LD_INT 1
15353: PLUS
15354: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15355: LD_VAR 0 3
15359: PPUSH
15360: CALL_OW 256
15364: PUSH
15365: LD_INT 1000
15367: LESS
15368: IFFALSE 15382
// SetLives ( un , 1000 ) ;
15370: LD_VAR 0 3
15374: PPUSH
15375: LD_INT 1000
15377: PPUSH
15378: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 81
15389: PUSH
15390: LD_OWVAR 2
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 91
15401: PUSH
15402: LD_VAR 0 3
15406: PUSH
15407: LD_INT 30
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PPUSH
15419: CALL_OW 69
15423: PPUSH
15424: LD_VAR 0 3
15428: PPUSH
15429: CALL_OW 74
15433: PPUSH
15434: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15438: LD_VAR 0 2
15442: PUSH
15443: LD_INT 60
15445: GREATER
15446: PUSH
15447: LD_VAR 0 3
15451: PPUSH
15452: CALL_OW 301
15456: OR
15457: IFFALSE 15334
// if un then
15459: LD_VAR 0 3
15463: IFFALSE 15474
// RemoveUnit ( un ) ;
15465: LD_VAR 0 3
15469: PPUSH
15470: CALL_OW 64
// end ;
15474: PPOPN 3
15476: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15477: LD_INT 0
15479: PPUSH
// case cmd of 301 :
15480: LD_VAR 0 1
15484: PUSH
15485: LD_INT 301
15487: DOUBLE
15488: EQUAL
15489: IFTRUE 15493
15491: GO 15525
15493: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
15494: LD_VAR 0 6
15498: PPUSH
15499: LD_VAR 0 7
15503: PPUSH
15504: LD_VAR 0 8
15508: PPUSH
15509: LD_VAR 0 4
15513: PPUSH
15514: LD_VAR 0 5
15518: PPUSH
15519: CALL 16726 0 5
15523: GO 15646
15525: LD_INT 302
15527: DOUBLE
15528: EQUAL
15529: IFTRUE 15533
15531: GO 15570
15533: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
15534: LD_VAR 0 6
15538: PPUSH
15539: LD_VAR 0 7
15543: PPUSH
15544: LD_VAR 0 8
15548: PPUSH
15549: LD_VAR 0 9
15553: PPUSH
15554: LD_VAR 0 4
15558: PPUSH
15559: LD_VAR 0 5
15563: PPUSH
15564: CALL 16817 0 6
15568: GO 15646
15570: LD_INT 303
15572: DOUBLE
15573: EQUAL
15574: IFTRUE 15578
15576: GO 15615
15578: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
15579: LD_VAR 0 6
15583: PPUSH
15584: LD_VAR 0 7
15588: PPUSH
15589: LD_VAR 0 8
15593: PPUSH
15594: LD_VAR 0 9
15598: PPUSH
15599: LD_VAR 0 4
15603: PPUSH
15604: LD_VAR 0 5
15608: PPUSH
15609: CALL 15651 0 6
15613: GO 15646
15615: LD_INT 304
15617: DOUBLE
15618: EQUAL
15619: IFTRUE 15623
15621: GO 15645
15623: POP
// hHackTeleport ( unit , x , y ) ; end ;
15624: LD_VAR 0 2
15628: PPUSH
15629: LD_VAR 0 4
15633: PPUSH
15634: LD_VAR 0 5
15638: PPUSH
15639: CALL 17410 0 3
15643: GO 15646
15645: POP
// end ;
15646: LD_VAR 0 12
15650: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
15655: LD_VAR 0 1
15659: PUSH
15660: LD_INT 1
15662: LESS
15663: PUSH
15664: LD_VAR 0 1
15668: PUSH
15669: LD_INT 3
15671: GREATER
15672: OR
15673: PUSH
15674: LD_VAR 0 5
15678: PPUSH
15679: LD_VAR 0 6
15683: PPUSH
15684: CALL_OW 428
15688: OR
15689: IFFALSE 15693
// exit ;
15691: GO 16413
// uc_side := your_side ;
15693: LD_ADDR_OWVAR 20
15697: PUSH
15698: LD_OWVAR 2
15702: ST_TO_ADDR
// uc_nation := nation ;
15703: LD_ADDR_OWVAR 21
15707: PUSH
15708: LD_VAR 0 1
15712: ST_TO_ADDR
// bc_level = 1 ;
15713: LD_ADDR_OWVAR 43
15717: PUSH
15718: LD_INT 1
15720: ST_TO_ADDR
// case btype of 1 :
15721: LD_VAR 0 2
15725: PUSH
15726: LD_INT 1
15728: DOUBLE
15729: EQUAL
15730: IFTRUE 15734
15732: GO 15745
15734: POP
// bc_type := b_depot ; 2 :
15735: LD_ADDR_OWVAR 42
15739: PUSH
15740: LD_INT 0
15742: ST_TO_ADDR
15743: GO 16357
15745: LD_INT 2
15747: DOUBLE
15748: EQUAL
15749: IFTRUE 15753
15751: GO 15764
15753: POP
// bc_type := b_warehouse ; 3 :
15754: LD_ADDR_OWVAR 42
15758: PUSH
15759: LD_INT 1
15761: ST_TO_ADDR
15762: GO 16357
15764: LD_INT 3
15766: DOUBLE
15767: EQUAL
15768: IFTRUE 15772
15770: GO 15783
15772: POP
// bc_type := b_lab ; 4 .. 9 :
15773: LD_ADDR_OWVAR 42
15777: PUSH
15778: LD_INT 6
15780: ST_TO_ADDR
15781: GO 16357
15783: LD_INT 4
15785: DOUBLE
15786: GREATEREQUAL
15787: IFFALSE 15795
15789: LD_INT 9
15791: DOUBLE
15792: LESSEQUAL
15793: IFTRUE 15797
15795: GO 15849
15797: POP
// begin bc_type := b_lab_half ;
15798: LD_ADDR_OWVAR 42
15802: PUSH
15803: LD_INT 7
15805: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
15806: LD_ADDR_OWVAR 44
15810: PUSH
15811: LD_INT 10
15813: PUSH
15814: LD_INT 11
15816: PUSH
15817: LD_INT 12
15819: PUSH
15820: LD_INT 15
15822: PUSH
15823: LD_INT 14
15825: PUSH
15826: LD_INT 13
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: PUSH
15837: LD_VAR 0 2
15841: PUSH
15842: LD_INT 3
15844: MINUS
15845: ARRAY
15846: ST_TO_ADDR
// end ; 10 .. 13 :
15847: GO 16357
15849: LD_INT 10
15851: DOUBLE
15852: GREATEREQUAL
15853: IFFALSE 15861
15855: LD_INT 13
15857: DOUBLE
15858: LESSEQUAL
15859: IFTRUE 15863
15861: GO 15940
15863: POP
// begin bc_type := b_lab_full ;
15864: LD_ADDR_OWVAR 42
15868: PUSH
15869: LD_INT 8
15871: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
15872: LD_ADDR_OWVAR 44
15876: PUSH
15877: LD_INT 10
15879: PUSH
15880: LD_INT 12
15882: PUSH
15883: LD_INT 14
15885: PUSH
15886: LD_INT 13
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: LIST
15893: LIST
15894: PUSH
15895: LD_VAR 0 2
15899: PUSH
15900: LD_INT 9
15902: MINUS
15903: ARRAY
15904: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
15905: LD_ADDR_OWVAR 45
15909: PUSH
15910: LD_INT 11
15912: PUSH
15913: LD_INT 15
15915: PUSH
15916: LD_INT 12
15918: PUSH
15919: LD_INT 15
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: PUSH
15928: LD_VAR 0 2
15932: PUSH
15933: LD_INT 9
15935: MINUS
15936: ARRAY
15937: ST_TO_ADDR
// end ; 14 :
15938: GO 16357
15940: LD_INT 14
15942: DOUBLE
15943: EQUAL
15944: IFTRUE 15948
15946: GO 15959
15948: POP
// bc_type := b_workshop ; 15 :
15949: LD_ADDR_OWVAR 42
15953: PUSH
15954: LD_INT 2
15956: ST_TO_ADDR
15957: GO 16357
15959: LD_INT 15
15961: DOUBLE
15962: EQUAL
15963: IFTRUE 15967
15965: GO 15978
15967: POP
// bc_type := b_factory ; 16 :
15968: LD_ADDR_OWVAR 42
15972: PUSH
15973: LD_INT 3
15975: ST_TO_ADDR
15976: GO 16357
15978: LD_INT 16
15980: DOUBLE
15981: EQUAL
15982: IFTRUE 15986
15984: GO 15997
15986: POP
// bc_type := b_ext_gun ; 17 :
15987: LD_ADDR_OWVAR 42
15991: PUSH
15992: LD_INT 17
15994: ST_TO_ADDR
15995: GO 16357
15997: LD_INT 17
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16033
16005: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16006: LD_ADDR_OWVAR 42
16010: PUSH
16011: LD_INT 19
16013: PUSH
16014: LD_INT 23
16016: PUSH
16017: LD_INT 19
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: PUSH
16025: LD_VAR 0 1
16029: ARRAY
16030: ST_TO_ADDR
16031: GO 16357
16033: LD_INT 18
16035: DOUBLE
16036: EQUAL
16037: IFTRUE 16041
16039: GO 16052
16041: POP
// bc_type := b_ext_radar ; 19 :
16042: LD_ADDR_OWVAR 42
16046: PUSH
16047: LD_INT 20
16049: ST_TO_ADDR
16050: GO 16357
16052: LD_INT 19
16054: DOUBLE
16055: EQUAL
16056: IFTRUE 16060
16058: GO 16071
16060: POP
// bc_type := b_ext_radio ; 20 :
16061: LD_ADDR_OWVAR 42
16065: PUSH
16066: LD_INT 22
16068: ST_TO_ADDR
16069: GO 16357
16071: LD_INT 20
16073: DOUBLE
16074: EQUAL
16075: IFTRUE 16079
16077: GO 16090
16079: POP
// bc_type := b_ext_siberium ; 21 :
16080: LD_ADDR_OWVAR 42
16084: PUSH
16085: LD_INT 21
16087: ST_TO_ADDR
16088: GO 16357
16090: LD_INT 21
16092: DOUBLE
16093: EQUAL
16094: IFTRUE 16098
16096: GO 16109
16098: POP
// bc_type := b_ext_computer ; 22 :
16099: LD_ADDR_OWVAR 42
16103: PUSH
16104: LD_INT 24
16106: ST_TO_ADDR
16107: GO 16357
16109: LD_INT 22
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16128
16117: POP
// bc_type := b_ext_track ; 23 :
16118: LD_ADDR_OWVAR 42
16122: PUSH
16123: LD_INT 16
16125: ST_TO_ADDR
16126: GO 16357
16128: LD_INT 23
16130: DOUBLE
16131: EQUAL
16132: IFTRUE 16136
16134: GO 16147
16136: POP
// bc_type := b_ext_laser ; 24 :
16137: LD_ADDR_OWVAR 42
16141: PUSH
16142: LD_INT 25
16144: ST_TO_ADDR
16145: GO 16357
16147: LD_INT 24
16149: DOUBLE
16150: EQUAL
16151: IFTRUE 16155
16153: GO 16166
16155: POP
// bc_type := b_control_tower ; 25 :
16156: LD_ADDR_OWVAR 42
16160: PUSH
16161: LD_INT 36
16163: ST_TO_ADDR
16164: GO 16357
16166: LD_INT 25
16168: DOUBLE
16169: EQUAL
16170: IFTRUE 16174
16172: GO 16185
16174: POP
// bc_type := b_breastwork ; 26 :
16175: LD_ADDR_OWVAR 42
16179: PUSH
16180: LD_INT 31
16182: ST_TO_ADDR
16183: GO 16357
16185: LD_INT 26
16187: DOUBLE
16188: EQUAL
16189: IFTRUE 16193
16191: GO 16204
16193: POP
// bc_type := b_bunker ; 27 :
16194: LD_ADDR_OWVAR 42
16198: PUSH
16199: LD_INT 32
16201: ST_TO_ADDR
16202: GO 16357
16204: LD_INT 27
16206: DOUBLE
16207: EQUAL
16208: IFTRUE 16212
16210: GO 16223
16212: POP
// bc_type := b_turret ; 28 :
16213: LD_ADDR_OWVAR 42
16217: PUSH
16218: LD_INT 33
16220: ST_TO_ADDR
16221: GO 16357
16223: LD_INT 28
16225: DOUBLE
16226: EQUAL
16227: IFTRUE 16231
16229: GO 16242
16231: POP
// bc_type := b_armoury ; 29 :
16232: LD_ADDR_OWVAR 42
16236: PUSH
16237: LD_INT 4
16239: ST_TO_ADDR
16240: GO 16357
16242: LD_INT 29
16244: DOUBLE
16245: EQUAL
16246: IFTRUE 16250
16248: GO 16261
16250: POP
// bc_type := b_barracks ; 30 :
16251: LD_ADDR_OWVAR 42
16255: PUSH
16256: LD_INT 5
16258: ST_TO_ADDR
16259: GO 16357
16261: LD_INT 30
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16280
16269: POP
// bc_type := b_solar_power ; 31 :
16270: LD_ADDR_OWVAR 42
16274: PUSH
16275: LD_INT 27
16277: ST_TO_ADDR
16278: GO 16357
16280: LD_INT 31
16282: DOUBLE
16283: EQUAL
16284: IFTRUE 16288
16286: GO 16299
16288: POP
// bc_type := b_oil_power ; 32 :
16289: LD_ADDR_OWVAR 42
16293: PUSH
16294: LD_INT 26
16296: ST_TO_ADDR
16297: GO 16357
16299: LD_INT 32
16301: DOUBLE
16302: EQUAL
16303: IFTRUE 16307
16305: GO 16318
16307: POP
// bc_type := b_siberite_power ; 33 :
16308: LD_ADDR_OWVAR 42
16312: PUSH
16313: LD_INT 28
16315: ST_TO_ADDR
16316: GO 16357
16318: LD_INT 33
16320: DOUBLE
16321: EQUAL
16322: IFTRUE 16326
16324: GO 16337
16326: POP
// bc_type := b_oil_mine ; 34 :
16327: LD_ADDR_OWVAR 42
16331: PUSH
16332: LD_INT 29
16334: ST_TO_ADDR
16335: GO 16357
16337: LD_INT 34
16339: DOUBLE
16340: EQUAL
16341: IFTRUE 16345
16343: GO 16356
16345: POP
// bc_type := b_siberite_mine ; end ;
16346: LD_ADDR_OWVAR 42
16350: PUSH
16351: LD_INT 30
16353: ST_TO_ADDR
16354: GO 16357
16356: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16357: LD_ADDR_VAR 0 8
16361: PUSH
16362: LD_VAR 0 5
16366: PPUSH
16367: LD_VAR 0 6
16371: PPUSH
16372: LD_VAR 0 3
16376: PPUSH
16377: CALL_OW 47
16381: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16382: LD_OWVAR 42
16386: PUSH
16387: LD_INT 32
16389: PUSH
16390: LD_INT 33
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: IN
16397: IFFALSE 16413
// PlaceWeaponTurret ( b , weapon ) ;
16399: LD_VAR 0 8
16403: PPUSH
16404: LD_VAR 0 4
16408: PPUSH
16409: CALL_OW 431
// end ;
16413: LD_VAR 0 7
16417: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
16418: LD_INT 0
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16424: LD_ADDR_VAR 0 4
16428: PUSH
16429: LD_INT 22
16431: PUSH
16432: LD_OWVAR 2
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 2
16443: PUSH
16444: LD_INT 30
16446: PUSH
16447: LD_INT 0
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: LD_INT 30
16456: PUSH
16457: LD_INT 1
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: PUSH
16469: EMPTY
16470: LIST
16471: LIST
16472: PPUSH
16473: CALL_OW 69
16477: ST_TO_ADDR
// if not tmp then
16478: LD_VAR 0 4
16482: NOT
16483: IFFALSE 16487
// exit ;
16485: GO 16546
// for i in tmp do
16487: LD_ADDR_VAR 0 2
16491: PUSH
16492: LD_VAR 0 4
16496: PUSH
16497: FOR_IN
16498: IFFALSE 16544
// for j = 1 to 3 do
16500: LD_ADDR_VAR 0 3
16504: PUSH
16505: DOUBLE
16506: LD_INT 1
16508: DEC
16509: ST_TO_ADDR
16510: LD_INT 3
16512: PUSH
16513: FOR_TO
16514: IFFALSE 16540
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
16516: LD_VAR 0 2
16520: PPUSH
16521: CALL_OW 274
16525: PPUSH
16526: LD_VAR 0 3
16530: PPUSH
16531: LD_INT 99999
16533: PPUSH
16534: CALL_OW 277
16538: GO 16513
16540: POP
16541: POP
16542: GO 16497
16544: POP
16545: POP
// end ;
16546: LD_VAR 0 1
16550: RET
// export function hHackSetLevel10 ; var i , j ; begin
16551: LD_INT 0
16553: PPUSH
16554: PPUSH
16555: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 21
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: PUSH
16576: FOR_IN
16577: IFFALSE 16629
// if IsSelected ( i ) then
16579: LD_VAR 0 2
16583: PPUSH
16584: CALL_OW 306
16588: IFFALSE 16627
// begin for j := 1 to 4 do
16590: LD_ADDR_VAR 0 3
16594: PUSH
16595: DOUBLE
16596: LD_INT 1
16598: DEC
16599: ST_TO_ADDR
16600: LD_INT 4
16602: PUSH
16603: FOR_TO
16604: IFFALSE 16625
// SetSkill ( i , j , 10 ) ;
16606: LD_VAR 0 2
16610: PPUSH
16611: LD_VAR 0 3
16615: PPUSH
16616: LD_INT 10
16618: PPUSH
16619: CALL_OW 237
16623: GO 16603
16625: POP
16626: POP
// end ;
16627: GO 16576
16629: POP
16630: POP
// end ;
16631: LD_VAR 0 1
16635: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
16636: LD_INT 0
16638: PPUSH
16639: PPUSH
16640: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
16641: LD_ADDR_VAR 0 2
16645: PUSH
16646: LD_INT 22
16648: PUSH
16649: LD_OWVAR 2
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: PUSH
16658: LD_INT 21
16660: PUSH
16661: LD_INT 1
16663: PUSH
16664: EMPTY
16665: LIST
16666: LIST
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PPUSH
16672: CALL_OW 69
16676: PUSH
16677: FOR_IN
16678: IFFALSE 16719
// begin for j := 1 to 4 do
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: DOUBLE
16686: LD_INT 1
16688: DEC
16689: ST_TO_ADDR
16690: LD_INT 4
16692: PUSH
16693: FOR_TO
16694: IFFALSE 16715
// SetSkill ( i , j , 10 ) ;
16696: LD_VAR 0 2
16700: PPUSH
16701: LD_VAR 0 3
16705: PPUSH
16706: LD_INT 10
16708: PPUSH
16709: CALL_OW 237
16713: GO 16693
16715: POP
16716: POP
// end ;
16717: GO 16677
16719: POP
16720: POP
// end ;
16721: LD_VAR 0 1
16725: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
16726: LD_INT 0
16728: PPUSH
// uc_side := your_side ;
16729: LD_ADDR_OWVAR 20
16733: PUSH
16734: LD_OWVAR 2
16738: ST_TO_ADDR
// uc_nation := nation ;
16739: LD_ADDR_OWVAR 21
16743: PUSH
16744: LD_VAR 0 1
16748: ST_TO_ADDR
// InitHc ;
16749: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
16753: LD_INT 0
16755: PPUSH
16756: LD_VAR 0 2
16760: PPUSH
16761: LD_VAR 0 3
16765: PPUSH
16766: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
16770: LD_VAR 0 4
16774: PPUSH
16775: LD_VAR 0 5
16779: PPUSH
16780: CALL_OW 428
16784: PUSH
16785: LD_INT 0
16787: EQUAL
16788: IFFALSE 16812
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
16790: CALL_OW 44
16794: PPUSH
16795: LD_VAR 0 4
16799: PPUSH
16800: LD_VAR 0 5
16804: PPUSH
16805: LD_INT 1
16807: PPUSH
16808: CALL_OW 48
// end ;
16812: LD_VAR 0 6
16816: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
16817: LD_INT 0
16819: PPUSH
16820: PPUSH
// uc_side := your_side ;
16821: LD_ADDR_OWVAR 20
16825: PUSH
16826: LD_OWVAR 2
16830: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
16831: LD_VAR 0 1
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: LD_INT 3
16844: PUSH
16845: LD_INT 4
16847: PUSH
16848: LD_INT 5
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: IN
16858: IFFALSE 16870
// uc_nation := nation_american else
16860: LD_ADDR_OWVAR 21
16864: PUSH
16865: LD_INT 1
16867: ST_TO_ADDR
16868: GO 16913
// if chassis in [ 11 , 12 , 13 , 14 ] then
16870: LD_VAR 0 1
16874: PUSH
16875: LD_INT 11
16877: PUSH
16878: LD_INT 12
16880: PUSH
16881: LD_INT 13
16883: PUSH
16884: LD_INT 14
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: IN
16893: IFFALSE 16905
// uc_nation := nation_arabian else
16895: LD_ADDR_OWVAR 21
16899: PUSH
16900: LD_INT 2
16902: ST_TO_ADDR
16903: GO 16913
// uc_nation := nation_russian ;
16905: LD_ADDR_OWVAR 21
16909: PUSH
16910: LD_INT 3
16912: ST_TO_ADDR
// vc_chassis := chassis ;
16913: LD_ADDR_OWVAR 37
16917: PUSH
16918: LD_VAR 0 1
16922: ST_TO_ADDR
// vc_engine := engine ;
16923: LD_ADDR_OWVAR 39
16927: PUSH
16928: LD_VAR 0 2
16932: ST_TO_ADDR
// vc_control := control ;
16933: LD_ADDR_OWVAR 38
16937: PUSH
16938: LD_VAR 0 3
16942: ST_TO_ADDR
// vc_weapon := weapon ;
16943: LD_ADDR_OWVAR 40
16947: PUSH
16948: LD_VAR 0 4
16952: ST_TO_ADDR
// un := CreateVehicle ;
16953: LD_ADDR_VAR 0 8
16957: PUSH
16958: CALL_OW 45
16962: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
16963: LD_VAR 0 8
16967: PPUSH
16968: LD_INT 0
16970: PPUSH
16971: LD_INT 5
16973: PPUSH
16974: CALL_OW 12
16978: PPUSH
16979: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
16983: LD_VAR 0 8
16987: PPUSH
16988: LD_VAR 0 5
16992: PPUSH
16993: LD_VAR 0 6
16997: PPUSH
16998: LD_INT 1
17000: PPUSH
17001: CALL_OW 48
// end ;
17005: LD_VAR 0 7
17009: RET
// export hInvincible ; every 1 do
17010: GO 17012
17012: DISABLE
// hInvincible := [ ] ;
17013: LD_ADDR_EXP 77
17017: PUSH
17018: EMPTY
17019: ST_TO_ADDR
17020: END
// every 10 do var i ;
17021: GO 17023
17023: DISABLE
17024: LD_INT 0
17026: PPUSH
// begin enable ;
17027: ENABLE
// if not hInvincible then
17028: LD_EXP 77
17032: NOT
17033: IFFALSE 17037
// exit ;
17035: GO 17081
// for i in hInvincible do
17037: LD_ADDR_VAR 0 1
17041: PUSH
17042: LD_EXP 77
17046: PUSH
17047: FOR_IN
17048: IFFALSE 17079
// if GetLives ( i ) < 1000 then
17050: LD_VAR 0 1
17054: PPUSH
17055: CALL_OW 256
17059: PUSH
17060: LD_INT 1000
17062: LESS
17063: IFFALSE 17077
// SetLives ( i , 1000 ) ;
17065: LD_VAR 0 1
17069: PPUSH
17070: LD_INT 1000
17072: PPUSH
17073: CALL_OW 234
17077: GO 17047
17079: POP
17080: POP
// end ;
17081: PPOPN 1
17083: END
// export function hHackInvincible ; var i ; begin
17084: LD_INT 0
17086: PPUSH
17087: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17088: LD_ADDR_VAR 0 2
17092: PUSH
17093: LD_INT 2
17095: PUSH
17096: LD_INT 21
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 21
17108: PUSH
17109: LD_INT 2
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 69
17125: PUSH
17126: FOR_IN
17127: IFFALSE 17188
// if IsSelected ( i ) then
17129: LD_VAR 0 2
17133: PPUSH
17134: CALL_OW 306
17138: IFFALSE 17186
// begin if i in hInvincible then
17140: LD_VAR 0 2
17144: PUSH
17145: LD_EXP 77
17149: IN
17150: IFFALSE 17170
// hInvincible := hInvincible diff i else
17152: LD_ADDR_EXP 77
17156: PUSH
17157: LD_EXP 77
17161: PUSH
17162: LD_VAR 0 2
17166: DIFF
17167: ST_TO_ADDR
17168: GO 17186
// hInvincible := hInvincible union i ;
17170: LD_ADDR_EXP 77
17174: PUSH
17175: LD_EXP 77
17179: PUSH
17180: LD_VAR 0 2
17184: UNION
17185: ST_TO_ADDR
// end ;
17186: GO 17126
17188: POP
17189: POP
// end ;
17190: LD_VAR 0 1
17194: RET
// export function hHackInvisible ; var i , j ; begin
17195: LD_INT 0
17197: PPUSH
17198: PPUSH
17199: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17200: LD_ADDR_VAR 0 2
17204: PUSH
17205: LD_INT 21
17207: PUSH
17208: LD_INT 1
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PPUSH
17215: CALL_OW 69
17219: PUSH
17220: FOR_IN
17221: IFFALSE 17245
// if IsSelected ( i ) then
17223: LD_VAR 0 2
17227: PPUSH
17228: CALL_OW 306
17232: IFFALSE 17243
// ComForceInvisible ( i ) ;
17234: LD_VAR 0 2
17238: PPUSH
17239: CALL_OW 496
17243: GO 17220
17245: POP
17246: POP
// end ;
17247: LD_VAR 0 1
17251: RET
// export function hHackChangeYourSide ; begin
17252: LD_INT 0
17254: PPUSH
// if your_side = 8 then
17255: LD_OWVAR 2
17259: PUSH
17260: LD_INT 8
17262: EQUAL
17263: IFFALSE 17275
// your_side := 0 else
17265: LD_ADDR_OWVAR 2
17269: PUSH
17270: LD_INT 0
17272: ST_TO_ADDR
17273: GO 17289
// your_side := your_side + 1 ;
17275: LD_ADDR_OWVAR 2
17279: PUSH
17280: LD_OWVAR 2
17284: PUSH
17285: LD_INT 1
17287: PLUS
17288: ST_TO_ADDR
// end ;
17289: LD_VAR 0 1
17293: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17294: LD_INT 0
17296: PPUSH
17297: PPUSH
17298: PPUSH
// for i in all_units do
17299: LD_ADDR_VAR 0 2
17303: PUSH
17304: LD_OWVAR 3
17308: PUSH
17309: FOR_IN
17310: IFFALSE 17388
// if IsSelected ( i ) then
17312: LD_VAR 0 2
17316: PPUSH
17317: CALL_OW 306
17321: IFFALSE 17386
// begin j := GetSide ( i ) ;
17323: LD_ADDR_VAR 0 3
17327: PUSH
17328: LD_VAR 0 2
17332: PPUSH
17333: CALL_OW 255
17337: ST_TO_ADDR
// if j = 8 then
17338: LD_VAR 0 3
17342: PUSH
17343: LD_INT 8
17345: EQUAL
17346: IFFALSE 17358
// j := 0 else
17348: LD_ADDR_VAR 0 3
17352: PUSH
17353: LD_INT 0
17355: ST_TO_ADDR
17356: GO 17372
// j := j + 1 ;
17358: LD_ADDR_VAR 0 3
17362: PUSH
17363: LD_VAR 0 3
17367: PUSH
17368: LD_INT 1
17370: PLUS
17371: ST_TO_ADDR
// SetSide ( i , j ) ;
17372: LD_VAR 0 2
17376: PPUSH
17377: LD_VAR 0 3
17381: PPUSH
17382: CALL_OW 235
// end ;
17386: GO 17309
17388: POP
17389: POP
// end ;
17390: LD_VAR 0 1
17394: RET
// export function hHackFog ; begin
17395: LD_INT 0
17397: PPUSH
// FogOff ( true ) ;
17398: LD_INT 1
17400: PPUSH
17401: CALL_OW 344
// end ;
17405: LD_VAR 0 1
17409: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17410: LD_INT 0
17412: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
17413: LD_VAR 0 1
17417: PPUSH
17418: LD_VAR 0 2
17422: PPUSH
17423: LD_VAR 0 3
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: LD_INT 1
17433: PPUSH
17434: CALL_OW 483
// CenterOnXY ( x , y ) ;
17438: LD_VAR 0 2
17442: PPUSH
17443: LD_VAR 0 3
17447: PPUSH
17448: CALL_OW 84
// end ;
17452: LD_VAR 0 4
17456: RET
