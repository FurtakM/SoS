// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3599 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3446 0 0
// PrepareSheikGroup ;
 123: CALL 3084 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2996 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3847 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-3
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 855: LD_INT 2
 857: PPUSH
 858: LD_INT 71
 860: PPUSH
 861: LD_INT 84
 863: PPUSH
 864: CALL_OW 428
 868: PPUSH
 869: CALL_OW 292
 873: PUSH
 874: LD_EXP 19
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 939
 889: GO 891
 891: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 892: LD_EXP 1
 896: PPUSH
 897: LD_STRING DH-spot-1
 899: PPUSH
 900: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 904: LD_INT 71
 906: PPUSH
 907: LD_INT 84
 909: PPUSH
 910: CALL_OW 428
 914: PPUSH
 915: LD_STRING DRa-spot-1
 917: PPUSH
 918: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 922: LD_INT 90
 924: PPUSH
 925: LD_INT 41
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 6
 933: NEG
 934: PPUSH
 935: CALL_OW 330
// end ;
 939: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 35
 945: PPUSH
 946: LD_INT 35
 948: PPUSH
 949: CALL_OW 428
 953: PPUSH
 954: CALL_OW 292
 958: PUSH
 959: LD_EXP 22
 963: NOT
 964: AND
 965: IFFALSE 1015
 967: GO 969
 969: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 970: LD_INT 35
 972: PPUSH
 973: LD_INT 35
 975: PPUSH
 976: CALL_OW 428
 980: PPUSH
 981: LD_EXP 1
 985: PPUSH
 986: CALL_OW 119
// wait ( 0 0$1 ) ;
 990: LD_INT 35
 992: PPUSH
 993: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
 997: LD_INT 35
 999: PPUSH
1000: LD_INT 35
1002: PPUSH
1003: CALL_OW 428
1007: PPUSH
1008: LD_STRING DRa-spot-4
1010: PPUSH
1011: CALL_OW 88
// end ;
1015: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1016: LD_EXP 21
1020: PUSH
1021: LD_EXP 14
1025: PPUSH
1026: LD_INT 101
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 72
1040: AND
1041: PUSH
1042: LD_EXP 22
1046: NOT
1047: AND
1048: IFFALSE 1372
1050: GO 1052
1052: DISABLE
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
// begin enable ;
1060: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1061: LD_ADDR_VAR 0 1
1065: PUSH
1066: LD_EXP 14
1070: PPUSH
1071: LD_INT 101
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 72
1085: ST_TO_ADDR
// if not tmp then
1086: LD_VAR 0 1
1090: NOT
1091: IFFALSE 1095
// exit ;
1093: GO 1372
// InGameOn ;
1095: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1099: LD_EXP 1
1103: PUSH
1104: LD_EXP 5
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: LD_VAR 0 1
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING DG-meeting-1
1155: PPUSH
1156: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 81
1167: PUSH
1168: LD_INT 10
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 25
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 108
1187: PUSH
1188: LD_INT 73
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: LD_INT 9999
1207: PUSH
1208: EMPTY
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// for i := 1 to 3 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 3
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1312
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: LD_EXP 1
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 1
1253: ARRAY
1254: PPUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_VAR 0 2
1264: ARRAY
1265: PUSH
1266: LD_INT 2
1268: ARRAY
1269: PPUSH
1270: CALL_OW 297
1274: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1275: LD_VAR 0 4
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PUSH
1284: LD_VAR 0 5
1288: GREATER
1289: IFFALSE 1310
// dist := [ tdist , i ] ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// end ;
1310: GO 1227
1312: POP
1313: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1314: LD_EXP 1
1318: PPUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 2
1331: ARRAY
1332: ARRAY
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: LD_VAR 0 3
1342: PUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 2
1350: ARRAY
1351: ARRAY
1352: PUSH
1353: LD_INT 2
1355: ARRAY
1356: PPUSH
1357: CALL_OW 111
// wait ( 0 0$3 ) ;
1361: LD_INT 105
1363: PPUSH
1364: CALL_OW 67
// InGameOff ;
1368: CALL_OW 9
// end ;
1372: PPOPN 5
1374: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1375: LD_EXP 1
1379: PPUSH
1380: LD_INT 14
1382: PPUSH
1383: CALL_OW 296
1387: PUSH
1388: LD_INT 40
1390: GREATER
1391: PUSH
1392: LD_EXP 1
1396: PPUSH
1397: CALL_OW 316
1401: AND
1402: PUSH
1403: LD_EXP 22
1407: NOT
1408: AND
1409: IFFALSE 1426
1411: GO 1413
1413: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_STRING DK-idle-1
1421: PPUSH
1422: CALL_OW 88
// end ;
1426: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1427: LD_INT 2
1429: PPUSH
1430: LD_INT 59
1432: PPUSH
1433: LD_INT 47
1435: PPUSH
1436: CALL_OW 293
1440: PUSH
1441: LD_EXP 22
1445: NOT
1446: AND
1447: IFFALSE 1604
1449: GO 1451
1451: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 10
1463: NEG
1464: PPUSH
1465: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1469: LD_INT 59
1471: PPUSH
1472: LD_INT 47
1474: PPUSH
1475: CALL_OW 86
// goWithHeike := false ;
1479: LD_ADDR_EXP 18
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// baseSpotted := true ;
1487: LD_ADDR_EXP 19
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// InGameOn ;
1495: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1499: LD_EXP 1
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: LD_INT 54
1515: PPUSH
1516: LD_INT 45
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$1 ) ;
1523: LD_INT 35
1525: PPUSH
1526: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1530: LD_EXP 1
1534: PUSH
1535: LD_EXP 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: LD_INT 59
1546: PPUSH
1547: LD_INT 47
1549: PPUSH
1550: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1554: LD_EXP 1
1558: PPUSH
1559: LD_STRING DH-base-1
1561: PPUSH
1562: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1566: LD_EXP 5
1570: PPUSH
1571: LD_STRING DK-base-1
1573: PPUSH
1574: CALL_OW 88
// InGameOff ;
1578: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1582: LD_ADDR_EXP 17
1586: PUSH
1587: LD_EXP 17
1591: PUSH
1592: LD_INT 1
1594: PLUS
1595: ST_TO_ADDR
// goWithHeike := true ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// end ;
1604: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1605: LD_INT 2
1607: PPUSH
1608: LD_EXP 8
1612: PPUSH
1613: CALL_OW 292
1617: PUSH
1618: LD_EXP 22
1622: NOT
1623: AND
1624: IFFALSE 2966
1626: GO 1628
1628: DISABLE
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// begin meetingActive := false ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// goWithHeike := false ;
1643: LD_ADDR_EXP 18
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: LD_INT 6
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 517
1666: ST_TO_ADDR
// for i := 1 to 4 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 4
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1748
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1683: LD_EXP 15
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1728: LD_EXP 15
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PPUSH
1742: CALL_OW 179
// end ;
1746: GO 1680
1748: POP
1749: POP
// InGameOn ;
1750: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1754: LD_EXP 8
1758: PPUSH
1759: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1763: LD_EXP 1
1767: PPUSH
1768: LD_EXP 8
1772: PPUSH
1773: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_EXP 1
1786: PPUSH
1787: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1791: LD_INT 10
1793: PPUSH
1794: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 8
1807: PPUSH
1808: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1812: LD_EXP 5
1816: PPUSH
1817: LD_EXP 1
1821: PPUSH
1822: CALL_OW 250
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 272
1837: PPUSH
1838: LD_EXP 1
1842: PPUSH
1843: CALL_OW 251
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 273
1858: PPUSH
1859: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_EXP 8
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: LD_INT 5
1880: LESS
1881: PUSH
1882: LD_EXP 5
1886: PPUSH
1887: LD_EXP 8
1891: PPUSH
1892: CALL_OW 296
1896: PUSH
1897: LD_INT 6
1899: LESS
1900: AND
1901: IFFALSE 1791
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 5
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PPUSH
1917: LD_EXP 8
1921: PPUSH
1922: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1926: LD_EXP 8
1930: PUSH
1931: LD_EXP 4
1935: PUSH
1936: LD_EXP 9
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PPUSH
1946: LD_EXP 1
1950: PPUSH
1951: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1955: LD_INT 7
1957: PPUSH
1958: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1962: LD_EXP 8
1966: PPUSH
1967: LD_STRING DKu-Kurt-1
1969: PPUSH
1970: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1974: LD_EXP 5
1978: PPUSH
1979: LD_STRING DK-Kurt-1
1981: PPUSH
1982: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1986: LD_EXP 8
1990: PPUSH
1991: LD_STRING DKu-Kurt-2
1993: PPUSH
1994: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING DH-Kurt-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DKu-Kurt-3
2024: PPUSH
2025: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2029: LD_EXP 5
2033: PPUSH
2034: LD_STRING DK-Kurt-3
2036: PPUSH
2037: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2041: LD_EXP 9
2045: PPUSH
2046: LD_STRING DHa-Kurt-3
2048: PPUSH
2049: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2053: LD_EXP 4
2057: PPUSH
2058: LD_STRING DO-Kurt-3
2060: PPUSH
2061: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: LD_EXP 8
2074: PUSH
2075: LD_EXP 4
2079: PUSH
2080: LD_EXP 9
2084: PUSH
2085: LD_EXP 5
2089: PUSH
2090: LD_EXP 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_EXP 16
2106: UNION
2107: ST_TO_ADDR
// for i = 1 to tmp2 do
2108: LD_ADDR_VAR 0 1
2112: PUSH
2113: DOUBLE
2114: LD_INT 1
2116: DEC
2117: ST_TO_ADDR
2118: LD_VAR 0 3
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2199
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2126: LD_VAR 0 3
2130: PUSH
2131: LD_VAR 0 1
2135: ARRAY
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 4
2153: PLUS
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PUSH
2165: LD_VAR 0 1
2169: PUSH
2170: LD_INT 4
2172: PLUS
2173: ARRAY
2174: PPUSH
2175: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2179: LD_VAR 0 3
2183: PUSH
2184: LD_VAR 0 1
2188: ARRAY
2189: PPUSH
2190: LD_INT 14
2192: PPUSH
2193: CALL_OW 179
// end ;
2197: GO 2123
2199: POP
2200: POP
// wait ( 0 0$2 ) ;
2201: LD_INT 70
2203: PPUSH
2204: CALL_OW 67
// CenterOnUnits ( eon ) ;
2208: LD_INT 14
2210: PPUSH
2211: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2215: LD_INT 90
2217: PPUSH
2218: LD_INT 43
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 21
2226: NEG
2227: PPUSH
2228: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2232: LD_EXP 2
2236: PPUSH
2237: LD_INT 84
2239: PPUSH
2240: LD_INT 36
2242: PPUSH
2243: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2247: LD_EXP 2
2251: PPUSH
2252: LD_INT 14
2254: PPUSH
2255: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 85
2266: PPUSH
2267: LD_INT 36
2269: PPUSH
2270: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2274: LD_EXP 11
2278: PPUSH
2279: LD_INT 14
2281: PPUSH
2282: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2286: LD_EXP 10
2290: PPUSH
2291: LD_INT 86
2293: PPUSH
2294: LD_INT 36
2296: PPUSH
2297: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2301: LD_EXP 10
2305: PPUSH
2306: LD_INT 14
2308: PPUSH
2309: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2313: LD_EXP 7
2317: PPUSH
2318: LD_INT 87
2320: PPUSH
2321: LD_INT 36
2323: PPUSH
2324: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2328: LD_EXP 7
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// wait ( 0 0$3 ) ;
2340: LD_INT 105
2342: PPUSH
2343: CALL_OW 67
// p := 0 ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// p := p + 1 ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 308
2388: PUSH
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 10
2396: GREATER
2397: OR
2398: IFFALSE 2355
// heikeNearbyEon := true ;
2400: LD_ADDR_EXP 20
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 37
2418: PPUSH
2419: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2423: LD_EXP 6
2427: PPUSH
2428: LD_EXP 13
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2441: LD_EXP 13
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_INT 89
2452: PPUSH
2453: LD_INT 37
2455: PPUSH
2456: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2460: LD_EXP 13
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 91
2471: PPUSH
2472: LD_INT 39
2474: PPUSH
2475: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2479: LD_EXP 13
2483: PPUSH
2484: LD_EXP 11
2488: PPUSH
2489: CALL_OW 179
// wait ( 0 0$1 ) ;
2493: LD_INT 35
2495: PPUSH
2496: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2500: LD_EXP 13
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PPUSH
2509: LD_STRING DS-eon-1
2511: PPUSH
2512: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2516: LD_EXP 6
2520: PPUSH
2521: LD_STRING DSh-eon-1
2523: PPUSH
2524: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2528: LD_EXP 13
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: LD_STRING DS-eon-2
2539: PPUSH
2540: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_STRING DSh-eon-1a
2551: PPUSH
2552: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2556: LD_EXP 13
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_INT 92
2567: PPUSH
2568: LD_INT 43
2570: PPUSH
2571: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2575: LD_EXP 13
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: LD_INT 14
2586: PPUSH
2587: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2591: LD_EXP 13
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_INT 93
2602: PPUSH
2603: LD_INT 41
2605: PPUSH
2606: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2610: LD_EXP 13
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 93
2621: PPUSH
2622: LD_INT 40
2624: PPUSH
2625: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2629: LD_EXP 6
2633: PPUSH
2634: LD_INT 88
2636: PPUSH
2637: LD_INT 41
2639: PPUSH
2640: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2644: LD_EXP 6
2648: PPUSH
2649: LD_INT 87
2651: PPUSH
2652: LD_INT 41
2654: PPUSH
2655: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2659: LD_INT 35
2661: PPUSH
2662: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2666: LD_EXP 6
2670: PPUSH
2671: LD_INT 88
2673: PPUSH
2674: LD_INT 41
2676: PPUSH
2677: CALL_OW 307
2681: IFFALSE 2659
// wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2690: LD_EXP 6
2694: PPUSH
2695: LD_STRING DSh-eon-2
2697: PPUSH
2698: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2702: LD_EXP 11
2706: PPUSH
2707: LD_INT 87
2709: PPUSH
2710: LD_INT 40
2712: PPUSH
2713: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2717: LD_EXP 11
2721: PPUSH
2722: LD_INT 86
2724: PPUSH
2725: LD_INT 40
2727: PPUSH
2728: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2739: LD_EXP 11
2743: PPUSH
2744: LD_INT 87
2746: PPUSH
2747: LD_INT 40
2749: PPUSH
2750: CALL_OW 307
2754: IFFALSE 2732
// Say ( Shariff , DShar-eon-3 ) ;
2756: LD_EXP 11
2760: PPUSH
2761: LD_STRING DShar-eon-3
2763: PPUSH
2764: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2775: LD_EXP 5
2779: PPUSH
2780: LD_EXP 1
2784: PPUSH
2785: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2789: LD_EXP 11
2793: PPUSH
2794: LD_STRING DShar-eon-4
2796: PPUSH
2797: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_STRING DK-eon-4
2808: PPUSH
2809: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2813: LD_EXP 5
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2825: LD_INT 35
2827: PPUSH
2828: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 305
2841: NOT
2842: IFFALSE 2825
// ComTurnUnit ( Shariff , Heike ) ;
2844: LD_EXP 11
2848: PPUSH
2849: LD_EXP 1
2853: PPUSH
2854: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2858: LD_EXP 11
2862: PPUSH
2863: LD_STRING DShar-eon-5
2865: PPUSH
2866: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 91
2877: PPUSH
2878: LD_INT 44
2880: PPUSH
2881: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 14
2892: PPUSH
2893: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2897: LD_INT 35
2899: PPUSH
2900: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 91
2911: PPUSH
2912: LD_INT 44
2914: PPUSH
2915: CALL_OW 307
2919: IFFALSE 2897
// Say ( Heike , DH-eon-5 ) ;
2921: LD_EXP 1
2925: PPUSH
2926: LD_STRING DH-eon-5
2928: PPUSH
2929: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_INT 14
2940: PPUSH
2941: CALL_OW 120
// wait ( 0 0$2 ) ;
2945: LD_INT 70
2947: PPUSH
2948: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2952: LD_INT 1
2954: PPUSH
2955: LD_STRING %_cont
2957: PPUSH
2958: CALL_OW 340
// InGameOff ;
2962: CALL_OW 9
// end ;
2966: PPOPN 4
2968: END
// every 3 trigger IsSelected ( Kaia ) do
2969: LD_EXP 5
2973: PPUSH
2974: CALL_OW 306
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2983: LD_EXP 5
2987: PPUSH
2988: LD_INT 42
2990: PPUSH
2991: CALL_OW 582
2995: END
// export function PrepareHeikeGroup ; begin
2996: LD_INT 0
2998: PPUSH
// uc_side := 2 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 2
3006: ST_TO_ADDR
// uc_nation := 2 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3015: LD_ADDR_EXP 1
3019: PUSH
3020: LD_STRING Heike
3022: PPUSH
3023: CALL_OW 25
3027: ST_TO_ADDR
// uc_side := 5 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 5
3035: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3036: LD_ADDR_EXP 5
3040: PUSH
3041: LD_STRING Kaia
3043: PPUSH
3044: CALL_OW 25
3048: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_INT 3
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 0
3074: PPUSH
3075: CALL_OW 49
// end ;
3079: LD_VAR 0 1
3083: RET
// export function PrepareSheikGroup ; var un , i ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
// uc_side := 5 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 5
3096: ST_TO_ADDR
// uc_nation := 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: LD_STRING Ali
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_STRING Abdul
3125: PPUSH
3126: CALL_OW 25
3130: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3131: LD_ADDR_EXP 2
3135: PUSH
3136: LD_STRING Omar
3138: PPUSH
3139: CALL_OW 25
3143: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_STRING Mahtab
3151: PPUSH
3152: CALL_OW 25
3156: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_STRING Shahrzad
3164: PPUSH
3165: CALL_OW 25
3169: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3170: LD_EXP 10
3174: PPUSH
3175: LD_INT 85
3177: PPUSH
3178: LD_INT 37
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3188: LD_EXP 11
3192: PPUSH
3193: LD_INT 87
3195: PPUSH
3196: LD_INT 37
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3206: LD_EXP 2
3210: PPUSH
3211: LD_INT 85
3213: PPUSH
3214: LD_INT 35
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3224: LD_EXP 7
3228: PPUSH
3229: LD_INT 86
3231: PPUSH
3232: LD_INT 39
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3242: LD_EXP 6
3246: PPUSH
3247: LD_INT 88
3249: PPUSH
3250: LD_INT 39
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3260: LD_EXP 10
3264: PPUSH
3265: LD_EXP 11
3269: PPUSH
3270: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3274: LD_EXP 11
3278: PPUSH
3279: LD_EXP 10
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3288: LD_EXP 2
3292: PPUSH
3293: LD_EXP 11
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3302: LD_EXP 7
3306: PUSH
3307: LD_EXP 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: LD_EXP 11
3320: PPUSH
3321: CALL_OW 119
// for i := 1 to 2 do
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 2
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3425
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 380
// un := CreateHuman ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 90
3371: PPUSH
3372: LD_INT 44
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 91
3392: PPUSH
3393: LD_INT 43
3395: PPUSH
3396: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3400: LD_ADDR_EXP 13
3404: PUSH
3405: LD_EXP 13
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ;
3423: GO 3338
3425: POP
3426: POP
// scientists := scientists diff 0 ;
3427: LD_ADDR_EXP 13
3431: PUSH
3432: LD_EXP 13
3436: PUSH
3437: LD_INT 0
3439: DIFF
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareKurtGroup ; var i ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// uc_side := 5 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 5
3457: ST_TO_ADDR
// uc_nation := 2 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 2
3465: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3466: LD_ADDR_EXP 8
3470: PUSH
3471: LD_STRING Kurt
3473: PPUSH
3474: CALL_OW 25
3478: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_STRING Olaf
3486: PPUSH
3487: CALL_OW 25
3491: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3492: LD_ADDR_EXP 9
3496: PUSH
3497: LD_STRING Hans
3499: PPUSH
3500: CALL_OW 25
3504: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_EXP 8
3514: PUSH
3515: LD_EXP 9
3519: PUSH
3520: LD_EXP 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3550
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3533: LD_VAR 0 2
3537: PPUSH
3538: LD_INT 10
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
3548: GO 3530
3550: POP
3551: POP
// ComTurnUnit ( Kurt , Hans ) ;
3552: LD_EXP 8
3556: PPUSH
3557: LD_EXP 9
3561: PPUSH
3562: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3566: LD_EXP 4
3570: PPUSH
3571: LD_EXP 9
3575: PPUSH
3576: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3580: LD_EXP 9
3584: PPUSH
3585: LD_EXP 4
3589: PPUSH
3590: CALL_OW 119
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
3604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_INT 21
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PUSH
3625: LD_INT 14
3627: DIFF
3628: PUSH
3629: FOR_IN
3630: IFFALSE 3710
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 266
3641: PUSH
3642: LD_INT 6
3644: PUSH
3645: LD_INT 31
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: IN
3652: IFFALSE 3676
// SetLives ( i , rand ( 500 , 600 ) ) else
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 500
3661: PPUSH
3662: LD_INT 600
3664: PPUSH
3665: CALL_OW 12
3669: PPUSH
3670: CALL_OW 234
3674: GO 3696
// SetLives ( i , rand ( 300 , 499 ) ) ;
3676: LD_VAR 0 2
3680: PPUSH
3681: LD_INT 300
3683: PPUSH
3684: LD_INT 499
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: CALL_OW 234
// SetSide ( i , 5 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 235
// end ;
3708: GO 3629
3710: POP
3711: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// uc_side := 4 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 4
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3840
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: LD_INT 0
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 9
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// KillUnit ( un ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: CALL_OW 66
// end ;
3838: GO 3763
3840: POP
3841: POP
// end ;
3842: LD_VAR 0 1
3846: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// uc_side := 5 ;
3856: LD_ADDR_OWVAR 20
3860: PUSH
3861: LD_INT 5
3863: ST_TO_ADDR
// uc_nation := 2 ;
3864: LD_ADDR_OWVAR 21
3868: PUSH
3869: LD_INT 2
3871: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3872: LD_ADDR_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: LD_INT 14
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// InitHc ;
3895: CALL_OW 19
// for i in area do
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: LD_VAR 0 6
3908: PUSH
3909: FOR_IN
3910: IFFALSE 4074
// begin tmp := AreaToList ( i , 0 ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 517
3929: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_VAR 0 5
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4070
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 380
// un := CreateHuman ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// if i = spawnBaseArea3 then
3975: LD_VAR 0 2
3979: PUSH
3980: LD_INT 5
3982: EQUAL
3983: IFFALSE 4001
// eonGuards := eonGuards ^ un ;
3985: LD_ADDR_EXP 14
3989: PUSH
3990: LD_EXP 14
3994: PUSH
3995: LD_VAR 0 7
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4001: LD_VAR 0 7
4005: PPUSH
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// ComHold ( un ) ;
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 140
// if i = spawnBaseArea4 then
4027: LD_VAR 0 2
4031: PUSH
4032: LD_INT 14
4034: EQUAL
4035: IFFALSE 4068
// begin firstGroup := firstGroup ^ un ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_EXP 15
4046: PUSH
4047: LD_VAR 0 7
4051: ADD
4052: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4053: LD_VAR 0 7
4057: PPUSH
4058: LD_INT 108
4060: PPUSH
4061: LD_INT 47
4063: PPUSH
4064: CALL_OW 118
// end ; end ;
4068: GO 3949
4070: POP
4071: POP
// end ;
4072: GO 3909
4074: POP
4075: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 30
4088: PUSH
4089: LD_INT 31
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4196
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4104: LD_ADDR_VAR 0 4
4108: PUSH
4109: LD_INT 30
4111: PUSH
4112: LD_INT 31
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: PUSH
4124: LD_VAR 0 2
4128: ARRAY
4129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: CALL_OW 380
// un := CreateHuman ;
4143: LD_ADDR_VAR 0 7
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: LD_INT 3
4170: PLUS
4171: PUSH
4172: LD_INT 6
4174: MOD
4175: PPUSH
4176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 4
4189: PPUSH
4190: CALL_OW 52
// end ;
4194: GO 4101
4196: POP
4197: POP
// PrepareSoldier ( sex_male , 3 ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 381
// un := CreateHuman ;
4208: LD_ADDR_VAR 0 7
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 71
4225: PPUSH
4226: LD_INT 84
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL 64270 0 5
// ComHold ( un ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: CALL_OW 140
// un := CreateHuman ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: CALL_OW 44
4257: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 35
4265: PPUSH
4266: LD_INT 35
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 64270 0 5
// ComHold ( un ) ;
4279: LD_VAR 0 7
4283: PPUSH
4284: CALL_OW 140
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4293: LD_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: AND
4311: IFFALSE 4337
// begin kaiaAttacked := true ;
4313: LD_ADDR_EXP 22
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 80
// end ; end ;
4337: PPOPN 2
4339: END
// every 0 0$1 trigger scientists do var i ;
4340: LD_EXP 13
4344: IFFALSE 4552
4346: GO 4348
4348: DISABLE
4349: LD_INT 0
4351: PPUSH
// begin repeat for i in scientists do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_EXP 13
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4537
// begin wait ( 0 0$1 ) ;
4365: LD_INT 35
4367: PPUSH
4368: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 2
4394: MOD
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: ARRAY
4400: PPUSH
4401: CALL_OW 308
4405: NOT
4406: IFFALSE 4441
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 13
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 2
4430: MOD
4431: PUSH
4432: LD_INT 1
4434: PLUS
4435: ARRAY
4436: PPUSH
4437: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 202
// if rand ( 0 , 1 ) then
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: IFFALSE 4489
// AddComAnim ( i , 15 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 15
4484: PPUSH
4485: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 12
4508: PPUSH
4509: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 40
4523: PPUSH
4524: CALL_OW 178
// wait ( 0 0$1 ) ;
4528: LD_INT 35
4530: PPUSH
4531: CALL_OW 67
// end ;
4535: GO 4362
4537: POP
4538: POP
// wait ( 0 0$10 ) ;
4539: LD_INT 350
4541: PPUSH
4542: CALL_OW 67
// until heikeNearbyEon ;
4546: LD_EXP 20
4550: IFFALSE 4352
// end ; end_of_file
4552: PPOPN 1
4554: END
// export globalGameSaveCounter ; every 0 0$1 do
4555: GO 4557
4557: DISABLE
// begin enable ;
4558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4559: LD_STRING updateTimer(
4561: PUSH
4562: LD_OWVAR 1
4566: STR
4567: PUSH
4568: LD_STRING );
4570: STR
4571: PPUSH
4572: CALL_OW 559
// end ;
4576: END
// every 0 0$1 do
4577: GO 4579
4579: DISABLE
// begin globalGameSaveCounter := 0 ;
4580: LD_ADDR_EXP 23
4584: PUSH
4585: LD_INT 0
4587: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4588: LD_STRING setGameSaveCounter(0)
4590: PPUSH
4591: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4595: LD_STRING initStreamRollete();
4597: PPUSH
4598: CALL_OW 559
// InitStreamMode ;
4602: CALL 5928 0 0
// DefineStreamItems ( false ) ;
4606: LD_INT 0
4608: PPUSH
4609: CALL 6392 0 1
// end ;
4613: END
// export function SOS_MapStart ( ) ; begin
4614: LD_INT 0
4616: PPUSH
// if streamModeActive then
4617: LD_EXP 24
4621: IFFALSE 4630
// DefineStreamItems ( true ) ;
4623: LD_INT 1
4625: PPUSH
4626: CALL 6392 0 1
// UpdateLuaVariables ( ) ;
4630: CALL 4647 0 0
// UpdateFactoryWaypoints ( ) ;
4634: CALL 19261 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4638: CALL 19518 0 0
// end ;
4642: LD_VAR 0 1
4646: RET
// function UpdateLuaVariables ( ) ; begin
4647: LD_INT 0
4649: PPUSH
// if globalGameSaveCounter then
4650: LD_EXP 23
4654: IFFALSE 4688
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4656: LD_ADDR_EXP 23
4660: PUSH
4661: LD_EXP 23
4665: PPUSH
4666: CALL 63491 0 1
4670: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4671: LD_STRING setGameSaveCounter(
4673: PUSH
4674: LD_EXP 23
4678: STR
4679: PUSH
4680: LD_STRING )
4682: STR
4683: PPUSH
4684: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4688: LD_STRING setGameDifficulty(
4690: PUSH
4691: LD_OWVAR 67
4695: STR
4696: PUSH
4697: LD_STRING )
4699: STR
4700: PPUSH
4701: CALL_OW 559
// end ;
4705: LD_VAR 0 1
4709: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4710: LD_INT 0
4712: PPUSH
// if p2 = stream_mode then
4713: LD_VAR 0 2
4717: PUSH
4718: LD_INT 100
4720: EQUAL
4721: IFFALSE 5724
// begin if not StreamModeActive then
4723: LD_EXP 24
4727: NOT
4728: IFFALSE 4738
// StreamModeActive := true ;
4730: LD_ADDR_EXP 24
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// if p3 = 0 then
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 0
4745: EQUAL
4746: IFFALSE 4752
// InitStreamMode ;
4748: CALL 5928 0 0
// if p3 = 1 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 1
4759: EQUAL
4760: IFFALSE 4770
// sRocket := true ;
4762: LD_ADDR_EXP 29
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 2 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 2
4777: EQUAL
4778: IFFALSE 4788
// sSpeed := true ;
4780: LD_ADDR_EXP 28
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 3 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 3
4795: EQUAL
4796: IFFALSE 4806
// sEngine := true ;
4798: LD_ADDR_EXP 30
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 4 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 4
4813: EQUAL
4814: IFFALSE 4824
// sSpec := true ;
4816: LD_ADDR_EXP 27
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 5 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 5
4831: EQUAL
4832: IFFALSE 4842
// sLevel := true ;
4834: LD_ADDR_EXP 31
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 6 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 6
4849: EQUAL
4850: IFFALSE 4860
// sArmoury := true ;
4852: LD_ADDR_EXP 32
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 7 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 7
4867: EQUAL
4868: IFFALSE 4878
// sRadar := true ;
4870: LD_ADDR_EXP 33
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 8 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 8
4885: EQUAL
4886: IFFALSE 4896
// sBunker := true ;
4888: LD_ADDR_EXP 34
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 9 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 9
4903: EQUAL
4904: IFFALSE 4914
// sHack := true ;
4906: LD_ADDR_EXP 35
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 10 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 10
4921: EQUAL
4922: IFFALSE 4932
// sFire := true ;
4924: LD_ADDR_EXP 36
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 11 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 11
4939: EQUAL
4940: IFFALSE 4950
// sRefresh := true ;
4942: LD_ADDR_EXP 37
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 12 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 12
4957: EQUAL
4958: IFFALSE 4968
// sExp := true ;
4960: LD_ADDR_EXP 38
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 13 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 13
4975: EQUAL
4976: IFFALSE 4986
// sDepot := true ;
4978: LD_ADDR_EXP 39
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 14 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 14
4993: EQUAL
4994: IFFALSE 5004
// sFlag := true ;
4996: LD_ADDR_EXP 40
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 15 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 15
5011: EQUAL
5012: IFFALSE 5022
// sKamikadze := true ;
5014: LD_ADDR_EXP 48
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 16 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 16
5029: EQUAL
5030: IFFALSE 5040
// sTroll := true ;
5032: LD_ADDR_EXP 49
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 17 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 17
5047: EQUAL
5048: IFFALSE 5058
// sSlow := true ;
5050: LD_ADDR_EXP 50
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 18 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 18
5065: EQUAL
5066: IFFALSE 5076
// sLack := true ;
5068: LD_ADDR_EXP 51
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 19 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 19
5083: EQUAL
5084: IFFALSE 5094
// sTank := true ;
5086: LD_ADDR_EXP 53
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 20 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 20
5101: EQUAL
5102: IFFALSE 5112
// sRemote := true ;
5104: LD_ADDR_EXP 54
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 21 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 21
5119: EQUAL
5120: IFFALSE 5130
// sPowell := true ;
5122: LD_ADDR_EXP 55
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 22 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 22
5137: EQUAL
5138: IFFALSE 5148
// sTeleport := true ;
5140: LD_ADDR_EXP 58
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 23 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 23
5155: EQUAL
5156: IFFALSE 5166
// sOilTower := true ;
5158: LD_ADDR_EXP 60
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 24 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 24
5173: EQUAL
5174: IFFALSE 5184
// sShovel := true ;
5176: LD_ADDR_EXP 61
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 25 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 25
5191: EQUAL
5192: IFFALSE 5202
// sSheik := true ;
5194: LD_ADDR_EXP 62
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 26 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 26
5209: EQUAL
5210: IFFALSE 5220
// sEarthquake := true ;
5212: LD_ADDR_EXP 64
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// if p3 = 27 then
5220: LD_VAR 0 3
5224: PUSH
5225: LD_INT 27
5227: EQUAL
5228: IFFALSE 5238
// sAI := true ;
5230: LD_ADDR_EXP 65
5234: PUSH
5235: LD_INT 1
5237: ST_TO_ADDR
// if p3 = 28 then
5238: LD_VAR 0 3
5242: PUSH
5243: LD_INT 28
5245: EQUAL
5246: IFFALSE 5256
// sCargo := true ;
5248: LD_ADDR_EXP 68
5252: PUSH
5253: LD_INT 1
5255: ST_TO_ADDR
// if p3 = 29 then
5256: LD_VAR 0 3
5260: PUSH
5261: LD_INT 29
5263: EQUAL
5264: IFFALSE 5274
// sDLaser := true ;
5266: LD_ADDR_EXP 69
5270: PUSH
5271: LD_INT 1
5273: ST_TO_ADDR
// if p3 = 30 then
5274: LD_VAR 0 3
5278: PUSH
5279: LD_INT 30
5281: EQUAL
5282: IFFALSE 5292
// sExchange := true ;
5284: LD_ADDR_EXP 70
5288: PUSH
5289: LD_INT 1
5291: ST_TO_ADDR
// if p3 = 31 then
5292: LD_VAR 0 3
5296: PUSH
5297: LD_INT 31
5299: EQUAL
5300: IFFALSE 5310
// sFac := true ;
5302: LD_ADDR_EXP 71
5306: PUSH
5307: LD_INT 1
5309: ST_TO_ADDR
// if p3 = 32 then
5310: LD_VAR 0 3
5314: PUSH
5315: LD_INT 32
5317: EQUAL
5318: IFFALSE 5328
// sPower := true ;
5320: LD_ADDR_EXP 72
5324: PUSH
5325: LD_INT 1
5327: ST_TO_ADDR
// if p3 = 33 then
5328: LD_VAR 0 3
5332: PUSH
5333: LD_INT 33
5335: EQUAL
5336: IFFALSE 5346
// sRandom := true ;
5338: LD_ADDR_EXP 73
5342: PUSH
5343: LD_INT 1
5345: ST_TO_ADDR
// if p3 = 34 then
5346: LD_VAR 0 3
5350: PUSH
5351: LD_INT 34
5353: EQUAL
5354: IFFALSE 5364
// sShield := true ;
5356: LD_ADDR_EXP 74
5360: PUSH
5361: LD_INT 1
5363: ST_TO_ADDR
// if p3 = 35 then
5364: LD_VAR 0 3
5368: PUSH
5369: LD_INT 35
5371: EQUAL
5372: IFFALSE 5382
// sTime := true ;
5374: LD_ADDR_EXP 75
5378: PUSH
5379: LD_INT 1
5381: ST_TO_ADDR
// if p3 = 36 then
5382: LD_VAR 0 3
5386: PUSH
5387: LD_INT 36
5389: EQUAL
5390: IFFALSE 5400
// sTools := true ;
5392: LD_ADDR_EXP 76
5396: PUSH
5397: LD_INT 1
5399: ST_TO_ADDR
// if p3 = 101 then
5400: LD_VAR 0 3
5404: PUSH
5405: LD_INT 101
5407: EQUAL
5408: IFFALSE 5418
// sSold := true ;
5410: LD_ADDR_EXP 41
5414: PUSH
5415: LD_INT 1
5417: ST_TO_ADDR
// if p3 = 102 then
5418: LD_VAR 0 3
5422: PUSH
5423: LD_INT 102
5425: EQUAL
5426: IFFALSE 5436
// sDiff := true ;
5428: LD_ADDR_EXP 42
5432: PUSH
5433: LD_INT 1
5435: ST_TO_ADDR
// if p3 = 103 then
5436: LD_VAR 0 3
5440: PUSH
5441: LD_INT 103
5443: EQUAL
5444: IFFALSE 5454
// sFog := true ;
5446: LD_ADDR_EXP 45
5450: PUSH
5451: LD_INT 1
5453: ST_TO_ADDR
// if p3 = 104 then
5454: LD_VAR 0 3
5458: PUSH
5459: LD_INT 104
5461: EQUAL
5462: IFFALSE 5472
// sReset := true ;
5464: LD_ADDR_EXP 46
5468: PUSH
5469: LD_INT 1
5471: ST_TO_ADDR
// if p3 = 105 then
5472: LD_VAR 0 3
5476: PUSH
5477: LD_INT 105
5479: EQUAL
5480: IFFALSE 5490
// sSun := true ;
5482: LD_ADDR_EXP 47
5486: PUSH
5487: LD_INT 1
5489: ST_TO_ADDR
// if p3 = 106 then
5490: LD_VAR 0 3
5494: PUSH
5495: LD_INT 106
5497: EQUAL
5498: IFFALSE 5508
// sTiger := true ;
5500: LD_ADDR_EXP 43
5504: PUSH
5505: LD_INT 1
5507: ST_TO_ADDR
// if p3 = 107 then
5508: LD_VAR 0 3
5512: PUSH
5513: LD_INT 107
5515: EQUAL
5516: IFFALSE 5526
// sBomb := true ;
5518: LD_ADDR_EXP 44
5522: PUSH
5523: LD_INT 1
5525: ST_TO_ADDR
// if p3 = 108 then
5526: LD_VAR 0 3
5530: PUSH
5531: LD_INT 108
5533: EQUAL
5534: IFFALSE 5544
// sWound := true ;
5536: LD_ADDR_EXP 52
5540: PUSH
5541: LD_INT 1
5543: ST_TO_ADDR
// if p3 = 109 then
5544: LD_VAR 0 3
5548: PUSH
5549: LD_INT 109
5551: EQUAL
5552: IFFALSE 5562
// sBetray := true ;
5554: LD_ADDR_EXP 56
5558: PUSH
5559: LD_INT 1
5561: ST_TO_ADDR
// if p3 = 110 then
5562: LD_VAR 0 3
5566: PUSH
5567: LD_INT 110
5569: EQUAL
5570: IFFALSE 5580
// sContamin := true ;
5572: LD_ADDR_EXP 57
5576: PUSH
5577: LD_INT 1
5579: ST_TO_ADDR
// if p3 = 111 then
5580: LD_VAR 0 3
5584: PUSH
5585: LD_INT 111
5587: EQUAL
5588: IFFALSE 5598
// sOil := true ;
5590: LD_ADDR_EXP 59
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// if p3 = 112 then
5598: LD_VAR 0 3
5602: PUSH
5603: LD_INT 112
5605: EQUAL
5606: IFFALSE 5616
// sStu := true ;
5608: LD_ADDR_EXP 63
5612: PUSH
5613: LD_INT 1
5615: ST_TO_ADDR
// if p3 = 113 then
5616: LD_VAR 0 3
5620: PUSH
5621: LD_INT 113
5623: EQUAL
5624: IFFALSE 5634
// sBazooka := true ;
5626: LD_ADDR_EXP 66
5630: PUSH
5631: LD_INT 1
5633: ST_TO_ADDR
// if p3 = 114 then
5634: LD_VAR 0 3
5638: PUSH
5639: LD_INT 114
5641: EQUAL
5642: IFFALSE 5652
// sMortar := true ;
5644: LD_ADDR_EXP 67
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// if p3 = 115 then
5652: LD_VAR 0 3
5656: PUSH
5657: LD_INT 115
5659: EQUAL
5660: IFFALSE 5670
// sRanger := true ;
5662: LD_ADDR_EXP 77
5666: PUSH
5667: LD_INT 1
5669: ST_TO_ADDR
// if p3 = 116 then
5670: LD_VAR 0 3
5674: PUSH
5675: LD_INT 116
5677: EQUAL
5678: IFFALSE 5688
// sComputer := true ;
5680: LD_ADDR_EXP 78
5684: PUSH
5685: LD_INT 1
5687: ST_TO_ADDR
// if p3 = 117 then
5688: LD_VAR 0 3
5692: PUSH
5693: LD_INT 117
5695: EQUAL
5696: IFFALSE 5706
// s30 := true ;
5698: LD_ADDR_EXP 79
5702: PUSH
5703: LD_INT 1
5705: ST_TO_ADDR
// if p3 = 118 then
5706: LD_VAR 0 3
5710: PUSH
5711: LD_INT 118
5713: EQUAL
5714: IFFALSE 5724
// s60 := true ;
5716: LD_ADDR_EXP 80
5720: PUSH
5721: LD_INT 1
5723: ST_TO_ADDR
// end ; if p2 = hack_mode then
5724: LD_VAR 0 2
5728: PUSH
5729: LD_INT 101
5731: EQUAL
5732: IFFALSE 5860
// begin case p3 of 1 :
5734: LD_VAR 0 3
5738: PUSH
5739: LD_INT 1
5741: DOUBLE
5742: EQUAL
5743: IFTRUE 5747
5745: GO 5754
5747: POP
// hHackUnlimitedResources ; 2 :
5748: CALL 18007 0 0
5752: GO 5860
5754: LD_INT 2
5756: DOUBLE
5757: EQUAL
5758: IFTRUE 5762
5760: GO 5769
5762: POP
// hHackSetLevel10 ; 3 :
5763: CALL 18140 0 0
5767: GO 5860
5769: LD_INT 3
5771: DOUBLE
5772: EQUAL
5773: IFTRUE 5777
5775: GO 5784
5777: POP
// hHackSetLevel10YourUnits ; 4 :
5778: CALL 18225 0 0
5782: GO 5860
5784: LD_INT 4
5786: DOUBLE
5787: EQUAL
5788: IFTRUE 5792
5790: GO 5799
5792: POP
// hHackInvincible ; 5 :
5793: CALL 18673 0 0
5797: GO 5860
5799: LD_INT 5
5801: DOUBLE
5802: EQUAL
5803: IFTRUE 5807
5805: GO 5814
5807: POP
// hHackInvisible ; 6 :
5808: CALL 18784 0 0
5812: GO 5860
5814: LD_INT 6
5816: DOUBLE
5817: EQUAL
5818: IFTRUE 5822
5820: GO 5829
5822: POP
// hHackChangeYourSide ; 7 :
5823: CALL 18841 0 0
5827: GO 5860
5829: LD_INT 7
5831: DOUBLE
5832: EQUAL
5833: IFTRUE 5837
5835: GO 5844
5837: POP
// hHackChangeUnitSide ; 8 :
5838: CALL 18883 0 0
5842: GO 5860
5844: LD_INT 8
5846: DOUBLE
5847: EQUAL
5848: IFTRUE 5852
5850: GO 5859
5852: POP
// hHackFog ; end ;
5853: CALL 18984 0 0
5857: GO 5860
5859: POP
// end ; if p2 = game_save_mode then
5860: LD_VAR 0 2
5864: PUSH
5865: LD_INT 102
5867: EQUAL
5868: IFFALSE 5923
// begin if p3 = 1 then
5870: LD_VAR 0 3
5874: PUSH
5875: LD_INT 1
5877: EQUAL
5878: IFFALSE 5890
// globalGameSaveCounter := p4 ;
5880: LD_ADDR_EXP 23
5884: PUSH
5885: LD_VAR 0 4
5889: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 2
5897: EQUAL
5898: PUSH
5899: LD_EXP 23
5903: AND
5904: IFFALSE 5923
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5906: LD_STRING setGameSaveCounter(
5908: PUSH
5909: LD_EXP 23
5913: STR
5914: PUSH
5915: LD_STRING )
5917: STR
5918: PPUSH
5919: CALL_OW 559
// end ; end ;
5923: LD_VAR 0 7
5927: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5928: LD_INT 0
5930: PPUSH
// streamModeActive := false ;
5931: LD_ADDR_EXP 24
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// normalCounter := 36 ;
5939: LD_ADDR_EXP 25
5943: PUSH
5944: LD_INT 36
5946: ST_TO_ADDR
// hardcoreCounter := 18 ;
5947: LD_ADDR_EXP 26
5951: PUSH
5952: LD_INT 18
5954: ST_TO_ADDR
// sRocket := false ;
5955: LD_ADDR_EXP 29
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// sSpeed := false ;
5963: LD_ADDR_EXP 28
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// sEngine := false ;
5971: LD_ADDR_EXP 30
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// sSpec := false ;
5979: LD_ADDR_EXP 27
5983: PUSH
5984: LD_INT 0
5986: ST_TO_ADDR
// sLevel := false ;
5987: LD_ADDR_EXP 31
5991: PUSH
5992: LD_INT 0
5994: ST_TO_ADDR
// sArmoury := false ;
5995: LD_ADDR_EXP 32
5999: PUSH
6000: LD_INT 0
6002: ST_TO_ADDR
// sRadar := false ;
6003: LD_ADDR_EXP 33
6007: PUSH
6008: LD_INT 0
6010: ST_TO_ADDR
// sBunker := false ;
6011: LD_ADDR_EXP 34
6015: PUSH
6016: LD_INT 0
6018: ST_TO_ADDR
// sHack := false ;
6019: LD_ADDR_EXP 35
6023: PUSH
6024: LD_INT 0
6026: ST_TO_ADDR
// sFire := false ;
6027: LD_ADDR_EXP 36
6031: PUSH
6032: LD_INT 0
6034: ST_TO_ADDR
// sRefresh := false ;
6035: LD_ADDR_EXP 37
6039: PUSH
6040: LD_INT 0
6042: ST_TO_ADDR
// sExp := false ;
6043: LD_ADDR_EXP 38
6047: PUSH
6048: LD_INT 0
6050: ST_TO_ADDR
// sDepot := false ;
6051: LD_ADDR_EXP 39
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// sFlag := false ;
6059: LD_ADDR_EXP 40
6063: PUSH
6064: LD_INT 0
6066: ST_TO_ADDR
// sKamikadze := false ;
6067: LD_ADDR_EXP 48
6071: PUSH
6072: LD_INT 0
6074: ST_TO_ADDR
// sTroll := false ;
6075: LD_ADDR_EXP 49
6079: PUSH
6080: LD_INT 0
6082: ST_TO_ADDR
// sSlow := false ;
6083: LD_ADDR_EXP 50
6087: PUSH
6088: LD_INT 0
6090: ST_TO_ADDR
// sLack := false ;
6091: LD_ADDR_EXP 51
6095: PUSH
6096: LD_INT 0
6098: ST_TO_ADDR
// sTank := false ;
6099: LD_ADDR_EXP 53
6103: PUSH
6104: LD_INT 0
6106: ST_TO_ADDR
// sRemote := false ;
6107: LD_ADDR_EXP 54
6111: PUSH
6112: LD_INT 0
6114: ST_TO_ADDR
// sPowell := false ;
6115: LD_ADDR_EXP 55
6119: PUSH
6120: LD_INT 0
6122: ST_TO_ADDR
// sTeleport := false ;
6123: LD_ADDR_EXP 58
6127: PUSH
6128: LD_INT 0
6130: ST_TO_ADDR
// sOilTower := false ;
6131: LD_ADDR_EXP 60
6135: PUSH
6136: LD_INT 0
6138: ST_TO_ADDR
// sShovel := false ;
6139: LD_ADDR_EXP 61
6143: PUSH
6144: LD_INT 0
6146: ST_TO_ADDR
// sSheik := false ;
6147: LD_ADDR_EXP 62
6151: PUSH
6152: LD_INT 0
6154: ST_TO_ADDR
// sEarthquake := false ;
6155: LD_ADDR_EXP 64
6159: PUSH
6160: LD_INT 0
6162: ST_TO_ADDR
// sAI := false ;
6163: LD_ADDR_EXP 65
6167: PUSH
6168: LD_INT 0
6170: ST_TO_ADDR
// sCargo := false ;
6171: LD_ADDR_EXP 68
6175: PUSH
6176: LD_INT 0
6178: ST_TO_ADDR
// sDLaser := false ;
6179: LD_ADDR_EXP 69
6183: PUSH
6184: LD_INT 0
6186: ST_TO_ADDR
// sExchange := false ;
6187: LD_ADDR_EXP 70
6191: PUSH
6192: LD_INT 0
6194: ST_TO_ADDR
// sFac := false ;
6195: LD_ADDR_EXP 71
6199: PUSH
6200: LD_INT 0
6202: ST_TO_ADDR
// sPower := false ;
6203: LD_ADDR_EXP 72
6207: PUSH
6208: LD_INT 0
6210: ST_TO_ADDR
// sRandom := false ;
6211: LD_ADDR_EXP 73
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// sShield := false ;
6219: LD_ADDR_EXP 74
6223: PUSH
6224: LD_INT 0
6226: ST_TO_ADDR
// sTime := false ;
6227: LD_ADDR_EXP 75
6231: PUSH
6232: LD_INT 0
6234: ST_TO_ADDR
// sTools := false ;
6235: LD_ADDR_EXP 76
6239: PUSH
6240: LD_INT 0
6242: ST_TO_ADDR
// sSold := false ;
6243: LD_ADDR_EXP 41
6247: PUSH
6248: LD_INT 0
6250: ST_TO_ADDR
// sDiff := false ;
6251: LD_ADDR_EXP 42
6255: PUSH
6256: LD_INT 0
6258: ST_TO_ADDR
// sFog := false ;
6259: LD_ADDR_EXP 45
6263: PUSH
6264: LD_INT 0
6266: ST_TO_ADDR
// sReset := false ;
6267: LD_ADDR_EXP 46
6271: PUSH
6272: LD_INT 0
6274: ST_TO_ADDR
// sSun := false ;
6275: LD_ADDR_EXP 47
6279: PUSH
6280: LD_INT 0
6282: ST_TO_ADDR
// sTiger := false ;
6283: LD_ADDR_EXP 43
6287: PUSH
6288: LD_INT 0
6290: ST_TO_ADDR
// sBomb := false ;
6291: LD_ADDR_EXP 44
6295: PUSH
6296: LD_INT 0
6298: ST_TO_ADDR
// sWound := false ;
6299: LD_ADDR_EXP 52
6303: PUSH
6304: LD_INT 0
6306: ST_TO_ADDR
// sBetray := false ;
6307: LD_ADDR_EXP 56
6311: PUSH
6312: LD_INT 0
6314: ST_TO_ADDR
// sContamin := false ;
6315: LD_ADDR_EXP 57
6319: PUSH
6320: LD_INT 0
6322: ST_TO_ADDR
// sOil := false ;
6323: LD_ADDR_EXP 59
6327: PUSH
6328: LD_INT 0
6330: ST_TO_ADDR
// sStu := false ;
6331: LD_ADDR_EXP 63
6335: PUSH
6336: LD_INT 0
6338: ST_TO_ADDR
// sBazooka := false ;
6339: LD_ADDR_EXP 66
6343: PUSH
6344: LD_INT 0
6346: ST_TO_ADDR
// sMortar := false ;
6347: LD_ADDR_EXP 67
6351: PUSH
6352: LD_INT 0
6354: ST_TO_ADDR
// sRanger := false ;
6355: LD_ADDR_EXP 77
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// sComputer := false ;
6363: LD_ADDR_EXP 78
6367: PUSH
6368: LD_INT 0
6370: ST_TO_ADDR
// s30 := false ;
6371: LD_ADDR_EXP 79
6375: PUSH
6376: LD_INT 0
6378: ST_TO_ADDR
// s60 := false ;
6379: LD_ADDR_EXP 80
6383: PUSH
6384: LD_INT 0
6386: ST_TO_ADDR
// end ;
6387: LD_VAR 0 1
6391: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6392: LD_INT 0
6394: PPUSH
6395: PPUSH
6396: PPUSH
6397: PPUSH
6398: PPUSH
6399: PPUSH
6400: PPUSH
// result := [ ] ;
6401: LD_ADDR_VAR 0 2
6405: PUSH
6406: EMPTY
6407: ST_TO_ADDR
// if campaign_id = 1 then
6408: LD_OWVAR 69
6412: PUSH
6413: LD_INT 1
6415: EQUAL
6416: IFFALSE 9582
// begin case mission_number of 1 :
6418: LD_OWVAR 70
6422: PUSH
6423: LD_INT 1
6425: DOUBLE
6426: EQUAL
6427: IFTRUE 6431
6429: GO 6507
6431: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6432: LD_ADDR_VAR 0 2
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 4
6442: PUSH
6443: LD_INT 11
6445: PUSH
6446: LD_INT 12
6448: PUSH
6449: LD_INT 15
6451: PUSH
6452: LD_INT 16
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_INT 23
6460: PUSH
6461: LD_INT 26
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 101
6477: PUSH
6478: LD_INT 102
6480: PUSH
6481: LD_INT 106
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: ST_TO_ADDR
6505: GO 9580
6507: LD_INT 2
6509: DOUBLE
6510: EQUAL
6511: IFTRUE 6515
6513: GO 6599
6515: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6516: LD_ADDR_VAR 0 2
6520: PUSH
6521: LD_INT 2
6523: PUSH
6524: LD_INT 4
6526: PUSH
6527: LD_INT 11
6529: PUSH
6530: LD_INT 12
6532: PUSH
6533: LD_INT 15
6535: PUSH
6536: LD_INT 16
6538: PUSH
6539: LD_INT 22
6541: PUSH
6542: LD_INT 23
6544: PUSH
6545: LD_INT 26
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_INT 101
6561: PUSH
6562: LD_INT 102
6564: PUSH
6565: LD_INT 105
6567: PUSH
6568: LD_INT 106
6570: PUSH
6571: LD_INT 108
6573: PUSH
6574: LD_INT 116
6576: PUSH
6577: LD_INT 117
6579: PUSH
6580: LD_INT 118
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: ST_TO_ADDR
6597: GO 9580
6599: LD_INT 3
6601: DOUBLE
6602: EQUAL
6603: IFTRUE 6607
6605: GO 6695
6607: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6608: LD_ADDR_VAR 0 2
6612: PUSH
6613: LD_INT 2
6615: PUSH
6616: LD_INT 4
6618: PUSH
6619: LD_INT 5
6621: PUSH
6622: LD_INT 11
6624: PUSH
6625: LD_INT 12
6627: PUSH
6628: LD_INT 15
6630: PUSH
6631: LD_INT 16
6633: PUSH
6634: LD_INT 22
6636: PUSH
6637: LD_INT 26
6639: PUSH
6640: LD_INT 36
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: PUSH
6655: LD_INT 101
6657: PUSH
6658: LD_INT 102
6660: PUSH
6661: LD_INT 105
6663: PUSH
6664: LD_INT 106
6666: PUSH
6667: LD_INT 108
6669: PUSH
6670: LD_INT 116
6672: PUSH
6673: LD_INT 117
6675: PUSH
6676: LD_INT 118
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: ST_TO_ADDR
6693: GO 9580
6695: LD_INT 4
6697: DOUBLE
6698: EQUAL
6699: IFTRUE 6703
6701: GO 6799
6703: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6704: LD_ADDR_VAR 0 2
6708: PUSH
6709: LD_INT 2
6711: PUSH
6712: LD_INT 4
6714: PUSH
6715: LD_INT 5
6717: PUSH
6718: LD_INT 8
6720: PUSH
6721: LD_INT 11
6723: PUSH
6724: LD_INT 12
6726: PUSH
6727: LD_INT 15
6729: PUSH
6730: LD_INT 16
6732: PUSH
6733: LD_INT 22
6735: PUSH
6736: LD_INT 23
6738: PUSH
6739: LD_INT 26
6741: PUSH
6742: LD_INT 36
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 101
6761: PUSH
6762: LD_INT 102
6764: PUSH
6765: LD_INT 105
6767: PUSH
6768: LD_INT 106
6770: PUSH
6771: LD_INT 108
6773: PUSH
6774: LD_INT 116
6776: PUSH
6777: LD_INT 117
6779: PUSH
6780: LD_INT 118
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: ST_TO_ADDR
6797: GO 9580
6799: LD_INT 5
6801: DOUBLE
6802: EQUAL
6803: IFTRUE 6807
6805: GO 6919
6807: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6808: LD_ADDR_VAR 0 2
6812: PUSH
6813: LD_INT 2
6815: PUSH
6816: LD_INT 4
6818: PUSH
6819: LD_INT 5
6821: PUSH
6822: LD_INT 6
6824: PUSH
6825: LD_INT 8
6827: PUSH
6828: LD_INT 11
6830: PUSH
6831: LD_INT 12
6833: PUSH
6834: LD_INT 15
6836: PUSH
6837: LD_INT 16
6839: PUSH
6840: LD_INT 22
6842: PUSH
6843: LD_INT 23
6845: PUSH
6846: LD_INT 25
6848: PUSH
6849: LD_INT 26
6851: PUSH
6852: LD_INT 36
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 101
6873: PUSH
6874: LD_INT 102
6876: PUSH
6877: LD_INT 105
6879: PUSH
6880: LD_INT 106
6882: PUSH
6883: LD_INT 108
6885: PUSH
6886: LD_INT 109
6888: PUSH
6889: LD_INT 112
6891: PUSH
6892: LD_INT 116
6894: PUSH
6895: LD_INT 117
6897: PUSH
6898: LD_INT 118
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 9580
6919: LD_INT 6
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 7059
6927: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: LD_INT 6
6944: PUSH
6945: LD_INT 8
6947: PUSH
6948: LD_INT 11
6950: PUSH
6951: LD_INT 12
6953: PUSH
6954: LD_INT 15
6956: PUSH
6957: LD_INT 16
6959: PUSH
6960: LD_INT 20
6962: PUSH
6963: LD_INT 21
6965: PUSH
6966: LD_INT 22
6968: PUSH
6969: LD_INT 23
6971: PUSH
6972: LD_INT 25
6974: PUSH
6975: LD_INT 26
6977: PUSH
6978: LD_INT 30
6980: PUSH
6981: LD_INT 31
6983: PUSH
6984: LD_INT 32
6986: PUSH
6987: LD_INT 36
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 101
7013: PUSH
7014: LD_INT 102
7016: PUSH
7017: LD_INT 105
7019: PUSH
7020: LD_INT 106
7022: PUSH
7023: LD_INT 108
7025: PUSH
7026: LD_INT 109
7028: PUSH
7029: LD_INT 112
7031: PUSH
7032: LD_INT 116
7034: PUSH
7035: LD_INT 117
7037: PUSH
7038: LD_INT 118
7040: PUSH
7041: EMPTY
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: ST_TO_ADDR
7057: GO 9580
7059: LD_INT 7
7061: DOUBLE
7062: EQUAL
7063: IFTRUE 7067
7065: GO 7179
7067: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7068: LD_ADDR_VAR 0 2
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: LD_INT 4
7078: PUSH
7079: LD_INT 5
7081: PUSH
7082: LD_INT 7
7084: PUSH
7085: LD_INT 11
7087: PUSH
7088: LD_INT 12
7090: PUSH
7091: LD_INT 15
7093: PUSH
7094: LD_INT 16
7096: PUSH
7097: LD_INT 20
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 22
7105: PUSH
7106: LD_INT 23
7108: PUSH
7109: LD_INT 25
7111: PUSH
7112: LD_INT 26
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 101
7133: PUSH
7134: LD_INT 102
7136: PUSH
7137: LD_INT 103
7139: PUSH
7140: LD_INT 105
7142: PUSH
7143: LD_INT 106
7145: PUSH
7146: LD_INT 108
7148: PUSH
7149: LD_INT 112
7151: PUSH
7152: LD_INT 116
7154: PUSH
7155: LD_INT 117
7157: PUSH
7158: LD_INT 118
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: ST_TO_ADDR
7177: GO 9580
7179: LD_INT 8
7181: DOUBLE
7182: EQUAL
7183: IFTRUE 7187
7185: GO 7327
7187: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7188: LD_ADDR_VAR 0 2
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 4
7198: PUSH
7199: LD_INT 5
7201: PUSH
7202: LD_INT 6
7204: PUSH
7205: LD_INT 7
7207: PUSH
7208: LD_INT 8
7210: PUSH
7211: LD_INT 11
7213: PUSH
7214: LD_INT 12
7216: PUSH
7217: LD_INT 15
7219: PUSH
7220: LD_INT 16
7222: PUSH
7223: LD_INT 20
7225: PUSH
7226: LD_INT 21
7228: PUSH
7229: LD_INT 22
7231: PUSH
7232: LD_INT 23
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 26
7240: PUSH
7241: LD_INT 30
7243: PUSH
7244: LD_INT 31
7246: PUSH
7247: LD_INT 32
7249: PUSH
7250: LD_INT 36
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 101
7277: PUSH
7278: LD_INT 102
7280: PUSH
7281: LD_INT 103
7283: PUSH
7284: LD_INT 105
7286: PUSH
7287: LD_INT 106
7289: PUSH
7290: LD_INT 108
7292: PUSH
7293: LD_INT 109
7295: PUSH
7296: LD_INT 112
7298: PUSH
7299: LD_INT 116
7301: PUSH
7302: LD_INT 117
7304: PUSH
7305: LD_INT 118
7307: PUSH
7308: EMPTY
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: ST_TO_ADDR
7325: GO 9580
7327: LD_INT 9
7329: DOUBLE
7330: EQUAL
7331: IFTRUE 7335
7333: GO 7483
7335: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7336: LD_ADDR_VAR 0 2
7340: PUSH
7341: LD_INT 2
7343: PUSH
7344: LD_INT 4
7346: PUSH
7347: LD_INT 5
7349: PUSH
7350: LD_INT 6
7352: PUSH
7353: LD_INT 7
7355: PUSH
7356: LD_INT 8
7358: PUSH
7359: LD_INT 11
7361: PUSH
7362: LD_INT 12
7364: PUSH
7365: LD_INT 15
7367: PUSH
7368: LD_INT 16
7370: PUSH
7371: LD_INT 20
7373: PUSH
7374: LD_INT 21
7376: PUSH
7377: LD_INT 22
7379: PUSH
7380: LD_INT 23
7382: PUSH
7383: LD_INT 25
7385: PUSH
7386: LD_INT 26
7388: PUSH
7389: LD_INT 28
7391: PUSH
7392: LD_INT 30
7394: PUSH
7395: LD_INT 31
7397: PUSH
7398: LD_INT 32
7400: PUSH
7401: LD_INT 36
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 101
7429: PUSH
7430: LD_INT 102
7432: PUSH
7433: LD_INT 103
7435: PUSH
7436: LD_INT 105
7438: PUSH
7439: LD_INT 106
7441: PUSH
7442: LD_INT 108
7444: PUSH
7445: LD_INT 109
7447: PUSH
7448: LD_INT 112
7450: PUSH
7451: LD_INT 114
7453: PUSH
7454: LD_INT 116
7456: PUSH
7457: LD_INT 117
7459: PUSH
7460: LD_INT 118
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: ST_TO_ADDR
7481: GO 9580
7483: LD_INT 10
7485: DOUBLE
7486: EQUAL
7487: IFTRUE 7491
7489: GO 7687
7491: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7492: LD_ADDR_VAR 0 2
7496: PUSH
7497: LD_INT 2
7499: PUSH
7500: LD_INT 4
7502: PUSH
7503: LD_INT 5
7505: PUSH
7506: LD_INT 6
7508: PUSH
7509: LD_INT 7
7511: PUSH
7512: LD_INT 8
7514: PUSH
7515: LD_INT 9
7517: PUSH
7518: LD_INT 10
7520: PUSH
7521: LD_INT 11
7523: PUSH
7524: LD_INT 12
7526: PUSH
7527: LD_INT 13
7529: PUSH
7530: LD_INT 14
7532: PUSH
7533: LD_INT 15
7535: PUSH
7536: LD_INT 16
7538: PUSH
7539: LD_INT 17
7541: PUSH
7542: LD_INT 18
7544: PUSH
7545: LD_INT 19
7547: PUSH
7548: LD_INT 20
7550: PUSH
7551: LD_INT 21
7553: PUSH
7554: LD_INT 22
7556: PUSH
7557: LD_INT 23
7559: PUSH
7560: LD_INT 24
7562: PUSH
7563: LD_INT 25
7565: PUSH
7566: LD_INT 26
7568: PUSH
7569: LD_INT 28
7571: PUSH
7572: LD_INT 30
7574: PUSH
7575: LD_INT 31
7577: PUSH
7578: LD_INT 32
7580: PUSH
7581: LD_INT 36
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 101
7617: PUSH
7618: LD_INT 102
7620: PUSH
7621: LD_INT 103
7623: PUSH
7624: LD_INT 104
7626: PUSH
7627: LD_INT 105
7629: PUSH
7630: LD_INT 106
7632: PUSH
7633: LD_INT 107
7635: PUSH
7636: LD_INT 108
7638: PUSH
7639: LD_INT 109
7641: PUSH
7642: LD_INT 110
7644: PUSH
7645: LD_INT 111
7647: PUSH
7648: LD_INT 112
7650: PUSH
7651: LD_INT 114
7653: PUSH
7654: LD_INT 116
7656: PUSH
7657: LD_INT 117
7659: PUSH
7660: LD_INT 118
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: ST_TO_ADDR
7685: GO 9580
7687: LD_INT 11
7689: DOUBLE
7690: EQUAL
7691: IFTRUE 7695
7693: GO 7899
7695: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7696: LD_ADDR_VAR 0 2
7700: PUSH
7701: LD_INT 2
7703: PUSH
7704: LD_INT 3
7706: PUSH
7707: LD_INT 4
7709: PUSH
7710: LD_INT 5
7712: PUSH
7713: LD_INT 6
7715: PUSH
7716: LD_INT 7
7718: PUSH
7719: LD_INT 8
7721: PUSH
7722: LD_INT 9
7724: PUSH
7725: LD_INT 10
7727: PUSH
7728: LD_INT 11
7730: PUSH
7731: LD_INT 12
7733: PUSH
7734: LD_INT 13
7736: PUSH
7737: LD_INT 14
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: LD_INT 16
7745: PUSH
7746: LD_INT 17
7748: PUSH
7749: LD_INT 18
7751: PUSH
7752: LD_INT 19
7754: PUSH
7755: LD_INT 20
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_INT 23
7766: PUSH
7767: LD_INT 24
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 26
7775: PUSH
7776: LD_INT 28
7778: PUSH
7779: LD_INT 30
7781: PUSH
7782: LD_INT 31
7784: PUSH
7785: LD_INT 32
7787: PUSH
7788: LD_INT 34
7790: PUSH
7791: LD_INT 36
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: PUSH
7827: LD_INT 101
7829: PUSH
7830: LD_INT 102
7832: PUSH
7833: LD_INT 103
7835: PUSH
7836: LD_INT 104
7838: PUSH
7839: LD_INT 105
7841: PUSH
7842: LD_INT 106
7844: PUSH
7845: LD_INT 107
7847: PUSH
7848: LD_INT 108
7850: PUSH
7851: LD_INT 109
7853: PUSH
7854: LD_INT 110
7856: PUSH
7857: LD_INT 111
7859: PUSH
7860: LD_INT 112
7862: PUSH
7863: LD_INT 114
7865: PUSH
7866: LD_INT 116
7868: PUSH
7869: LD_INT 117
7871: PUSH
7872: LD_INT 118
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: ST_TO_ADDR
7897: GO 9580
7899: LD_INT 12
7901: DOUBLE
7902: EQUAL
7903: IFTRUE 7907
7905: GO 8127
7907: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7908: LD_ADDR_VAR 0 2
7912: PUSH
7913: LD_INT 1
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: LD_INT 3
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: LD_INT 5
7927: PUSH
7928: LD_INT 6
7930: PUSH
7931: LD_INT 7
7933: PUSH
7934: LD_INT 8
7936: PUSH
7937: LD_INT 9
7939: PUSH
7940: LD_INT 10
7942: PUSH
7943: LD_INT 11
7945: PUSH
7946: LD_INT 12
7948: PUSH
7949: LD_INT 13
7951: PUSH
7952: LD_INT 14
7954: PUSH
7955: LD_INT 15
7957: PUSH
7958: LD_INT 16
7960: PUSH
7961: LD_INT 17
7963: PUSH
7964: LD_INT 18
7966: PUSH
7967: LD_INT 19
7969: PUSH
7970: LD_INT 20
7972: PUSH
7973: LD_INT 21
7975: PUSH
7976: LD_INT 22
7978: PUSH
7979: LD_INT 23
7981: PUSH
7982: LD_INT 24
7984: PUSH
7985: LD_INT 25
7987: PUSH
7988: LD_INT 26
7990: PUSH
7991: LD_INT 27
7993: PUSH
7994: LD_INT 28
7996: PUSH
7997: LD_INT 30
7999: PUSH
8000: LD_INT 31
8002: PUSH
8003: LD_INT 32
8005: PUSH
8006: LD_INT 33
8008: PUSH
8009: LD_INT 34
8011: PUSH
8012: LD_INT 36
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 101
8053: PUSH
8054: LD_INT 102
8056: PUSH
8057: LD_INT 103
8059: PUSH
8060: LD_INT 104
8062: PUSH
8063: LD_INT 105
8065: PUSH
8066: LD_INT 106
8068: PUSH
8069: LD_INT 107
8071: PUSH
8072: LD_INT 108
8074: PUSH
8075: LD_INT 109
8077: PUSH
8078: LD_INT 110
8080: PUSH
8081: LD_INT 111
8083: PUSH
8084: LD_INT 112
8086: PUSH
8087: LD_INT 113
8089: PUSH
8090: LD_INT 114
8092: PUSH
8093: LD_INT 116
8095: PUSH
8096: LD_INT 117
8098: PUSH
8099: LD_INT 118
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: ST_TO_ADDR
8125: GO 9580
8127: LD_INT 13
8129: DOUBLE
8130: EQUAL
8131: IFTRUE 8135
8133: GO 8343
8135: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8136: LD_ADDR_VAR 0 2
8140: PUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: LD_INT 5
8155: PUSH
8156: LD_INT 8
8158: PUSH
8159: LD_INT 9
8161: PUSH
8162: LD_INT 10
8164: PUSH
8165: LD_INT 11
8167: PUSH
8168: LD_INT 12
8170: PUSH
8171: LD_INT 14
8173: PUSH
8174: LD_INT 15
8176: PUSH
8177: LD_INT 16
8179: PUSH
8180: LD_INT 17
8182: PUSH
8183: LD_INT 18
8185: PUSH
8186: LD_INT 19
8188: PUSH
8189: LD_INT 20
8191: PUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 22
8197: PUSH
8198: LD_INT 23
8200: PUSH
8201: LD_INT 24
8203: PUSH
8204: LD_INT 25
8206: PUSH
8207: LD_INT 26
8209: PUSH
8210: LD_INT 27
8212: PUSH
8213: LD_INT 28
8215: PUSH
8216: LD_INT 30
8218: PUSH
8219: LD_INT 31
8221: PUSH
8222: LD_INT 32
8224: PUSH
8225: LD_INT 33
8227: PUSH
8228: LD_INT 34
8230: PUSH
8231: LD_INT 36
8233: PUSH
8234: EMPTY
8235: LIST
8236: LIST
8237: LIST
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 101
8269: PUSH
8270: LD_INT 102
8272: PUSH
8273: LD_INT 103
8275: PUSH
8276: LD_INT 104
8278: PUSH
8279: LD_INT 105
8281: PUSH
8282: LD_INT 106
8284: PUSH
8285: LD_INT 107
8287: PUSH
8288: LD_INT 108
8290: PUSH
8291: LD_INT 109
8293: PUSH
8294: LD_INT 110
8296: PUSH
8297: LD_INT 111
8299: PUSH
8300: LD_INT 112
8302: PUSH
8303: LD_INT 113
8305: PUSH
8306: LD_INT 114
8308: PUSH
8309: LD_INT 116
8311: PUSH
8312: LD_INT 117
8314: PUSH
8315: LD_INT 118
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: ST_TO_ADDR
8341: GO 9580
8343: LD_INT 14
8345: DOUBLE
8346: EQUAL
8347: IFTRUE 8351
8349: GO 8575
8351: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8352: LD_ADDR_VAR 0 2
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 2
8362: PUSH
8363: LD_INT 3
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: LD_INT 5
8371: PUSH
8372: LD_INT 6
8374: PUSH
8375: LD_INT 7
8377: PUSH
8378: LD_INT 8
8380: PUSH
8381: LD_INT 9
8383: PUSH
8384: LD_INT 10
8386: PUSH
8387: LD_INT 11
8389: PUSH
8390: LD_INT 12
8392: PUSH
8393: LD_INT 13
8395: PUSH
8396: LD_INT 14
8398: PUSH
8399: LD_INT 15
8401: PUSH
8402: LD_INT 16
8404: PUSH
8405: LD_INT 17
8407: PUSH
8408: LD_INT 18
8410: PUSH
8411: LD_INT 19
8413: PUSH
8414: LD_INT 20
8416: PUSH
8417: LD_INT 21
8419: PUSH
8420: LD_INT 22
8422: PUSH
8423: LD_INT 23
8425: PUSH
8426: LD_INT 24
8428: PUSH
8429: LD_INT 25
8431: PUSH
8432: LD_INT 26
8434: PUSH
8435: LD_INT 27
8437: PUSH
8438: LD_INT 28
8440: PUSH
8441: LD_INT 29
8443: PUSH
8444: LD_INT 30
8446: PUSH
8447: LD_INT 31
8449: PUSH
8450: LD_INT 32
8452: PUSH
8453: LD_INT 33
8455: PUSH
8456: LD_INT 34
8458: PUSH
8459: LD_INT 36
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 101
8501: PUSH
8502: LD_INT 102
8504: PUSH
8505: LD_INT 103
8507: PUSH
8508: LD_INT 104
8510: PUSH
8511: LD_INT 105
8513: PUSH
8514: LD_INT 106
8516: PUSH
8517: LD_INT 107
8519: PUSH
8520: LD_INT 108
8522: PUSH
8523: LD_INT 109
8525: PUSH
8526: LD_INT 110
8528: PUSH
8529: LD_INT 111
8531: PUSH
8532: LD_INT 112
8534: PUSH
8535: LD_INT 113
8537: PUSH
8538: LD_INT 114
8540: PUSH
8541: LD_INT 116
8543: PUSH
8544: LD_INT 117
8546: PUSH
8547: LD_INT 118
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: ST_TO_ADDR
8573: GO 9580
8575: LD_INT 15
8577: DOUBLE
8578: EQUAL
8579: IFTRUE 8583
8581: GO 8807
8583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8584: LD_ADDR_VAR 0 2
8588: PUSH
8589: LD_INT 1
8591: PUSH
8592: LD_INT 2
8594: PUSH
8595: LD_INT 3
8597: PUSH
8598: LD_INT 4
8600: PUSH
8601: LD_INT 5
8603: PUSH
8604: LD_INT 6
8606: PUSH
8607: LD_INT 7
8609: PUSH
8610: LD_INT 8
8612: PUSH
8613: LD_INT 9
8615: PUSH
8616: LD_INT 10
8618: PUSH
8619: LD_INT 11
8621: PUSH
8622: LD_INT 12
8624: PUSH
8625: LD_INT 13
8627: PUSH
8628: LD_INT 14
8630: PUSH
8631: LD_INT 15
8633: PUSH
8634: LD_INT 16
8636: PUSH
8637: LD_INT 17
8639: PUSH
8640: LD_INT 18
8642: PUSH
8643: LD_INT 19
8645: PUSH
8646: LD_INT 20
8648: PUSH
8649: LD_INT 21
8651: PUSH
8652: LD_INT 22
8654: PUSH
8655: LD_INT 23
8657: PUSH
8658: LD_INT 24
8660: PUSH
8661: LD_INT 25
8663: PUSH
8664: LD_INT 26
8666: PUSH
8667: LD_INT 27
8669: PUSH
8670: LD_INT 28
8672: PUSH
8673: LD_INT 29
8675: PUSH
8676: LD_INT 30
8678: PUSH
8679: LD_INT 31
8681: PUSH
8682: LD_INT 32
8684: PUSH
8685: LD_INT 33
8687: PUSH
8688: LD_INT 34
8690: PUSH
8691: LD_INT 36
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 101
8733: PUSH
8734: LD_INT 102
8736: PUSH
8737: LD_INT 103
8739: PUSH
8740: LD_INT 104
8742: PUSH
8743: LD_INT 105
8745: PUSH
8746: LD_INT 106
8748: PUSH
8749: LD_INT 107
8751: PUSH
8752: LD_INT 108
8754: PUSH
8755: LD_INT 109
8757: PUSH
8758: LD_INT 110
8760: PUSH
8761: LD_INT 111
8763: PUSH
8764: LD_INT 112
8766: PUSH
8767: LD_INT 113
8769: PUSH
8770: LD_INT 114
8772: PUSH
8773: LD_INT 116
8775: PUSH
8776: LD_INT 117
8778: PUSH
8779: LD_INT 118
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: LIST
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: ST_TO_ADDR
8805: GO 9580
8807: LD_INT 16
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8951
8815: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8816: LD_ADDR_VAR 0 2
8820: PUSH
8821: LD_INT 2
8823: PUSH
8824: LD_INT 4
8826: PUSH
8827: LD_INT 5
8829: PUSH
8830: LD_INT 7
8832: PUSH
8833: LD_INT 11
8835: PUSH
8836: LD_INT 12
8838: PUSH
8839: LD_INT 15
8841: PUSH
8842: LD_INT 16
8844: PUSH
8845: LD_INT 20
8847: PUSH
8848: LD_INT 21
8850: PUSH
8851: LD_INT 22
8853: PUSH
8854: LD_INT 23
8856: PUSH
8857: LD_INT 25
8859: PUSH
8860: LD_INT 26
8862: PUSH
8863: LD_INT 30
8865: PUSH
8866: LD_INT 31
8868: PUSH
8869: LD_INT 32
8871: PUSH
8872: LD_INT 33
8874: PUSH
8875: LD_INT 34
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: PUSH
8899: LD_INT 101
8901: PUSH
8902: LD_INT 102
8904: PUSH
8905: LD_INT 103
8907: PUSH
8908: LD_INT 106
8910: PUSH
8911: LD_INT 108
8913: PUSH
8914: LD_INT 112
8916: PUSH
8917: LD_INT 113
8919: PUSH
8920: LD_INT 114
8922: PUSH
8923: LD_INT 116
8925: PUSH
8926: LD_INT 117
8928: PUSH
8929: LD_INT 118
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: ST_TO_ADDR
8949: GO 9580
8951: LD_INT 17
8953: DOUBLE
8954: EQUAL
8955: IFTRUE 8959
8957: GO 9183
8959: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8960: LD_ADDR_VAR 0 2
8964: PUSH
8965: LD_INT 1
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: LD_INT 3
8973: PUSH
8974: LD_INT 4
8976: PUSH
8977: LD_INT 5
8979: PUSH
8980: LD_INT 6
8982: PUSH
8983: LD_INT 7
8985: PUSH
8986: LD_INT 8
8988: PUSH
8989: LD_INT 9
8991: PUSH
8992: LD_INT 10
8994: PUSH
8995: LD_INT 11
8997: PUSH
8998: LD_INT 12
9000: PUSH
9001: LD_INT 13
9003: PUSH
9004: LD_INT 14
9006: PUSH
9007: LD_INT 15
9009: PUSH
9010: LD_INT 16
9012: PUSH
9013: LD_INT 17
9015: PUSH
9016: LD_INT 18
9018: PUSH
9019: LD_INT 19
9021: PUSH
9022: LD_INT 20
9024: PUSH
9025: LD_INT 21
9027: PUSH
9028: LD_INT 22
9030: PUSH
9031: LD_INT 23
9033: PUSH
9034: LD_INT 24
9036: PUSH
9037: LD_INT 25
9039: PUSH
9040: LD_INT 26
9042: PUSH
9043: LD_INT 27
9045: PUSH
9046: LD_INT 28
9048: PUSH
9049: LD_INT 29
9051: PUSH
9052: LD_INT 30
9054: PUSH
9055: LD_INT 31
9057: PUSH
9058: LD_INT 32
9060: PUSH
9061: LD_INT 33
9063: PUSH
9064: LD_INT 34
9066: PUSH
9067: LD_INT 36
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: PUSH
9107: LD_INT 101
9109: PUSH
9110: LD_INT 102
9112: PUSH
9113: LD_INT 103
9115: PUSH
9116: LD_INT 104
9118: PUSH
9119: LD_INT 105
9121: PUSH
9122: LD_INT 106
9124: PUSH
9125: LD_INT 107
9127: PUSH
9128: LD_INT 108
9130: PUSH
9131: LD_INT 109
9133: PUSH
9134: LD_INT 110
9136: PUSH
9137: LD_INT 111
9139: PUSH
9140: LD_INT 112
9142: PUSH
9143: LD_INT 113
9145: PUSH
9146: LD_INT 114
9148: PUSH
9149: LD_INT 116
9151: PUSH
9152: LD_INT 117
9154: PUSH
9155: LD_INT 118
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: ST_TO_ADDR
9181: GO 9580
9183: LD_INT 18
9185: DOUBLE
9186: EQUAL
9187: IFTRUE 9191
9189: GO 9339
9191: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9192: LD_ADDR_VAR 0 2
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: LD_INT 4
9202: PUSH
9203: LD_INT 5
9205: PUSH
9206: LD_INT 7
9208: PUSH
9209: LD_INT 11
9211: PUSH
9212: LD_INT 12
9214: PUSH
9215: LD_INT 15
9217: PUSH
9218: LD_INT 16
9220: PUSH
9221: LD_INT 20
9223: PUSH
9224: LD_INT 21
9226: PUSH
9227: LD_INT 22
9229: PUSH
9230: LD_INT 23
9232: PUSH
9233: LD_INT 25
9235: PUSH
9236: LD_INT 26
9238: PUSH
9239: LD_INT 30
9241: PUSH
9242: LD_INT 31
9244: PUSH
9245: LD_INT 32
9247: PUSH
9248: LD_INT 33
9250: PUSH
9251: LD_INT 34
9253: PUSH
9254: LD_INT 35
9256: PUSH
9257: LD_INT 36
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: PUSH
9283: LD_INT 101
9285: PUSH
9286: LD_INT 102
9288: PUSH
9289: LD_INT 103
9291: PUSH
9292: LD_INT 106
9294: PUSH
9295: LD_INT 108
9297: PUSH
9298: LD_INT 112
9300: PUSH
9301: LD_INT 113
9303: PUSH
9304: LD_INT 114
9306: PUSH
9307: LD_INT 115
9309: PUSH
9310: LD_INT 116
9312: PUSH
9313: LD_INT 117
9315: PUSH
9316: LD_INT 118
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: ST_TO_ADDR
9337: GO 9580
9339: LD_INT 19
9341: DOUBLE
9342: EQUAL
9343: IFTRUE 9347
9345: GO 9579
9347: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9348: LD_ADDR_VAR 0 2
9352: PUSH
9353: LD_INT 1
9355: PUSH
9356: LD_INT 2
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 4
9364: PUSH
9365: LD_INT 5
9367: PUSH
9368: LD_INT 6
9370: PUSH
9371: LD_INT 7
9373: PUSH
9374: LD_INT 8
9376: PUSH
9377: LD_INT 9
9379: PUSH
9380: LD_INT 10
9382: PUSH
9383: LD_INT 11
9385: PUSH
9386: LD_INT 12
9388: PUSH
9389: LD_INT 13
9391: PUSH
9392: LD_INT 14
9394: PUSH
9395: LD_INT 15
9397: PUSH
9398: LD_INT 16
9400: PUSH
9401: LD_INT 17
9403: PUSH
9404: LD_INT 18
9406: PUSH
9407: LD_INT 19
9409: PUSH
9410: LD_INT 20
9412: PUSH
9413: LD_INT 21
9415: PUSH
9416: LD_INT 22
9418: PUSH
9419: LD_INT 23
9421: PUSH
9422: LD_INT 24
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 26
9430: PUSH
9431: LD_INT 27
9433: PUSH
9434: LD_INT 28
9436: PUSH
9437: LD_INT 29
9439: PUSH
9440: LD_INT 30
9442: PUSH
9443: LD_INT 31
9445: PUSH
9446: LD_INT 32
9448: PUSH
9449: LD_INT 33
9451: PUSH
9452: LD_INT 34
9454: PUSH
9455: LD_INT 35
9457: PUSH
9458: LD_INT 36
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: PUSH
9499: LD_INT 101
9501: PUSH
9502: LD_INT 102
9504: PUSH
9505: LD_INT 103
9507: PUSH
9508: LD_INT 104
9510: PUSH
9511: LD_INT 105
9513: PUSH
9514: LD_INT 106
9516: PUSH
9517: LD_INT 107
9519: PUSH
9520: LD_INT 108
9522: PUSH
9523: LD_INT 109
9525: PUSH
9526: LD_INT 110
9528: PUSH
9529: LD_INT 111
9531: PUSH
9532: LD_INT 112
9534: PUSH
9535: LD_INT 113
9537: PUSH
9538: LD_INT 114
9540: PUSH
9541: LD_INT 115
9543: PUSH
9544: LD_INT 116
9546: PUSH
9547: LD_INT 117
9549: PUSH
9550: LD_INT 118
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 9580
9579: POP
// end else
9580: GO 9811
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9582: LD_ADDR_VAR 0 2
9586: PUSH
9587: LD_INT 1
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: LD_INT 3
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 7
9607: PUSH
9608: LD_INT 8
9610: PUSH
9611: LD_INT 9
9613: PUSH
9614: LD_INT 10
9616: PUSH
9617: LD_INT 11
9619: PUSH
9620: LD_INT 12
9622: PUSH
9623: LD_INT 13
9625: PUSH
9626: LD_INT 14
9628: PUSH
9629: LD_INT 15
9631: PUSH
9632: LD_INT 16
9634: PUSH
9635: LD_INT 17
9637: PUSH
9638: LD_INT 18
9640: PUSH
9641: LD_INT 19
9643: PUSH
9644: LD_INT 20
9646: PUSH
9647: LD_INT 21
9649: PUSH
9650: LD_INT 22
9652: PUSH
9653: LD_INT 23
9655: PUSH
9656: LD_INT 24
9658: PUSH
9659: LD_INT 25
9661: PUSH
9662: LD_INT 26
9664: PUSH
9665: LD_INT 27
9667: PUSH
9668: LD_INT 28
9670: PUSH
9671: LD_INT 29
9673: PUSH
9674: LD_INT 30
9676: PUSH
9677: LD_INT 31
9679: PUSH
9680: LD_INT 32
9682: PUSH
9683: LD_INT 33
9685: PUSH
9686: LD_INT 34
9688: PUSH
9689: LD_INT 35
9691: PUSH
9692: LD_INT 36
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: PUSH
9733: LD_INT 101
9735: PUSH
9736: LD_INT 102
9738: PUSH
9739: LD_INT 103
9741: PUSH
9742: LD_INT 104
9744: PUSH
9745: LD_INT 105
9747: PUSH
9748: LD_INT 106
9750: PUSH
9751: LD_INT 107
9753: PUSH
9754: LD_INT 108
9756: PUSH
9757: LD_INT 109
9759: PUSH
9760: LD_INT 110
9762: PUSH
9763: LD_INT 111
9765: PUSH
9766: LD_INT 112
9768: PUSH
9769: LD_INT 113
9771: PUSH
9772: LD_INT 114
9774: PUSH
9775: LD_INT 115
9777: PUSH
9778: LD_INT 116
9780: PUSH
9781: LD_INT 117
9783: PUSH
9784: LD_INT 118
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: ST_TO_ADDR
// if result then
9811: LD_VAR 0 2
9815: IFFALSE 10601
// begin normal :=  ;
9817: LD_ADDR_VAR 0 5
9821: PUSH
9822: LD_STRING 
9824: ST_TO_ADDR
// hardcore :=  ;
9825: LD_ADDR_VAR 0 6
9829: PUSH
9830: LD_STRING 
9832: ST_TO_ADDR
// active :=  ;
9833: LD_ADDR_VAR 0 7
9837: PUSH
9838: LD_STRING 
9840: ST_TO_ADDR
// for i = 1 to normalCounter do
9841: LD_ADDR_VAR 0 8
9845: PUSH
9846: DOUBLE
9847: LD_INT 1
9849: DEC
9850: ST_TO_ADDR
9851: LD_EXP 25
9855: PUSH
9856: FOR_TO
9857: IFFALSE 9958
// begin tmp := 0 ;
9859: LD_ADDR_VAR 0 3
9863: PUSH
9864: LD_STRING 0
9866: ST_TO_ADDR
// if result [ 1 ] then
9867: LD_VAR 0 2
9871: PUSH
9872: LD_INT 1
9874: ARRAY
9875: IFFALSE 9940
// if result [ 1 ] [ 1 ] = i then
9877: LD_VAR 0 2
9881: PUSH
9882: LD_INT 1
9884: ARRAY
9885: PUSH
9886: LD_INT 1
9888: ARRAY
9889: PUSH
9890: LD_VAR 0 8
9894: EQUAL
9895: IFFALSE 9940
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9897: LD_ADDR_VAR 0 2
9901: PUSH
9902: LD_VAR 0 2
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: LD_VAR 0 2
9914: PUSH
9915: LD_INT 1
9917: ARRAY
9918: PPUSH
9919: LD_INT 1
9921: PPUSH
9922: CALL_OW 3
9926: PPUSH
9927: CALL_OW 1
9931: ST_TO_ADDR
// tmp := 1 ;
9932: LD_ADDR_VAR 0 3
9936: PUSH
9937: LD_STRING 1
9939: ST_TO_ADDR
// end ; normal := normal & tmp ;
9940: LD_ADDR_VAR 0 5
9944: PUSH
9945: LD_VAR 0 5
9949: PUSH
9950: LD_VAR 0 3
9954: STR
9955: ST_TO_ADDR
// end ;
9956: GO 9856
9958: POP
9959: POP
// for i = 1 to hardcoreCounter do
9960: LD_ADDR_VAR 0 8
9964: PUSH
9965: DOUBLE
9966: LD_INT 1
9968: DEC
9969: ST_TO_ADDR
9970: LD_EXP 26
9974: PUSH
9975: FOR_TO
9976: IFFALSE 10081
// begin tmp := 0 ;
9978: LD_ADDR_VAR 0 3
9982: PUSH
9983: LD_STRING 0
9985: ST_TO_ADDR
// if result [ 2 ] then
9986: LD_VAR 0 2
9990: PUSH
9991: LD_INT 2
9993: ARRAY
9994: IFFALSE 10063
// if result [ 2 ] [ 1 ] = 100 + i then
9996: LD_VAR 0 2
10000: PUSH
10001: LD_INT 2
10003: ARRAY
10004: PUSH
10005: LD_INT 1
10007: ARRAY
10008: PUSH
10009: LD_INT 100
10011: PUSH
10012: LD_VAR 0 8
10016: PLUS
10017: EQUAL
10018: IFFALSE 10063
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10020: LD_ADDR_VAR 0 2
10024: PUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: LD_INT 2
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 2
10040: ARRAY
10041: PPUSH
10042: LD_INT 1
10044: PPUSH
10045: CALL_OW 3
10049: PPUSH
10050: CALL_OW 1
10054: ST_TO_ADDR
// tmp := 1 ;
10055: LD_ADDR_VAR 0 3
10059: PUSH
10060: LD_STRING 1
10062: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10063: LD_ADDR_VAR 0 6
10067: PUSH
10068: LD_VAR 0 6
10072: PUSH
10073: LD_VAR 0 3
10077: STR
10078: ST_TO_ADDR
// end ;
10079: GO 9975
10081: POP
10082: POP
// if isGameLoad then
10083: LD_VAR 0 1
10087: IFFALSE 10562
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10089: LD_ADDR_VAR 0 4
10093: PUSH
10094: LD_EXP 29
10098: PUSH
10099: LD_EXP 28
10103: PUSH
10104: LD_EXP 30
10108: PUSH
10109: LD_EXP 27
10113: PUSH
10114: LD_EXP 31
10118: PUSH
10119: LD_EXP 32
10123: PUSH
10124: LD_EXP 33
10128: PUSH
10129: LD_EXP 34
10133: PUSH
10134: LD_EXP 35
10138: PUSH
10139: LD_EXP 36
10143: PUSH
10144: LD_EXP 37
10148: PUSH
10149: LD_EXP 38
10153: PUSH
10154: LD_EXP 39
10158: PUSH
10159: LD_EXP 40
10163: PUSH
10164: LD_EXP 48
10168: PUSH
10169: LD_EXP 49
10173: PUSH
10174: LD_EXP 50
10178: PUSH
10179: LD_EXP 51
10183: PUSH
10184: LD_EXP 53
10188: PUSH
10189: LD_EXP 54
10193: PUSH
10194: LD_EXP 55
10198: PUSH
10199: LD_EXP 58
10203: PUSH
10204: LD_EXP 60
10208: PUSH
10209: LD_EXP 61
10213: PUSH
10214: LD_EXP 62
10218: PUSH
10219: LD_EXP 64
10223: PUSH
10224: LD_EXP 65
10228: PUSH
10229: LD_EXP 68
10233: PUSH
10234: LD_EXP 69
10238: PUSH
10239: LD_EXP 70
10243: PUSH
10244: LD_EXP 71
10248: PUSH
10249: LD_EXP 72
10253: PUSH
10254: LD_EXP 73
10258: PUSH
10259: LD_EXP 74
10263: PUSH
10264: LD_EXP 75
10268: PUSH
10269: LD_EXP 76
10273: PUSH
10274: LD_EXP 41
10278: PUSH
10279: LD_EXP 42
10283: PUSH
10284: LD_EXP 45
10288: PUSH
10289: LD_EXP 46
10293: PUSH
10294: LD_EXP 47
10298: PUSH
10299: LD_EXP 43
10303: PUSH
10304: LD_EXP 44
10308: PUSH
10309: LD_EXP 52
10313: PUSH
10314: LD_EXP 56
10318: PUSH
10319: LD_EXP 57
10323: PUSH
10324: LD_EXP 59
10328: PUSH
10329: LD_EXP 63
10333: PUSH
10334: LD_EXP 66
10338: PUSH
10339: LD_EXP 67
10343: PUSH
10344: LD_EXP 77
10348: PUSH
10349: LD_EXP 78
10353: PUSH
10354: LD_EXP 79
10358: PUSH
10359: LD_EXP 80
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: ST_TO_ADDR
// tmp :=  ;
10420: LD_ADDR_VAR 0 3
10424: PUSH
10425: LD_STRING 
10427: ST_TO_ADDR
// for i = 1 to normalCounter do
10428: LD_ADDR_VAR 0 8
10432: PUSH
10433: DOUBLE
10434: LD_INT 1
10436: DEC
10437: ST_TO_ADDR
10438: LD_EXP 25
10442: PUSH
10443: FOR_TO
10444: IFFALSE 10480
// begin if flags [ i ] then
10446: LD_VAR 0 4
10450: PUSH
10451: LD_VAR 0 8
10455: ARRAY
10456: IFFALSE 10478
// tmp := tmp & i & ; ;
10458: LD_ADDR_VAR 0 3
10462: PUSH
10463: LD_VAR 0 3
10467: PUSH
10468: LD_VAR 0 8
10472: STR
10473: PUSH
10474: LD_STRING ;
10476: STR
10477: ST_TO_ADDR
// end ;
10478: GO 10443
10480: POP
10481: POP
// for i = 1 to hardcoreCounter do
10482: LD_ADDR_VAR 0 8
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_EXP 26
10496: PUSH
10497: FOR_TO
10498: IFFALSE 10544
// begin if flags [ normalCounter + i ] then
10500: LD_VAR 0 4
10504: PUSH
10505: LD_EXP 25
10509: PUSH
10510: LD_VAR 0 8
10514: PLUS
10515: ARRAY
10516: IFFALSE 10542
// tmp := tmp & ( 100 + i ) & ; ;
10518: LD_ADDR_VAR 0 3
10522: PUSH
10523: LD_VAR 0 3
10527: PUSH
10528: LD_INT 100
10530: PUSH
10531: LD_VAR 0 8
10535: PLUS
10536: STR
10537: PUSH
10538: LD_STRING ;
10540: STR
10541: ST_TO_ADDR
// end ;
10542: GO 10497
10544: POP
10545: POP
// if tmp then
10546: LD_VAR 0 3
10550: IFFALSE 10562
// active := tmp ;
10552: LD_ADDR_VAR 0 7
10556: PUSH
10557: LD_VAR 0 3
10561: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10562: LD_STRING getStreamItemsFromMission("
10564: PUSH
10565: LD_VAR 0 5
10569: STR
10570: PUSH
10571: LD_STRING ","
10573: STR
10574: PUSH
10575: LD_VAR 0 6
10579: STR
10580: PUSH
10581: LD_STRING ","
10583: STR
10584: PUSH
10585: LD_VAR 0 7
10589: STR
10590: PUSH
10591: LD_STRING ")
10593: STR
10594: PPUSH
10595: CALL_OW 559
// end else
10599: GO 10608
// ToLua ( getStreamItemsFromMission("","","") ) ;
10601: LD_STRING getStreamItemsFromMission("","","")
10603: PPUSH
10604: CALL_OW 559
// end ;
10608: LD_VAR 0 2
10612: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10613: LD_EXP 24
10617: PUSH
10618: LD_EXP 29
10622: AND
10623: IFFALSE 10747
10625: GO 10627
10627: DISABLE
10628: LD_INT 0
10630: PPUSH
10631: PPUSH
// begin enable ;
10632: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: LD_INT 22
10640: PUSH
10641: LD_OWVAR 2
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: PUSH
10650: LD_INT 2
10652: PUSH
10653: LD_INT 34
10655: PUSH
10656: LD_INT 7
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 34
10665: PUSH
10666: LD_INT 45
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 34
10675: PUSH
10676: LD_INT 28
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 34
10685: PUSH
10686: LD_INT 47
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PPUSH
10704: CALL_OW 69
10708: ST_TO_ADDR
// if not tmp then
10709: LD_VAR 0 2
10713: NOT
10714: IFFALSE 10718
// exit ;
10716: GO 10747
// for i in tmp do
10718: LD_ADDR_VAR 0 1
10722: PUSH
10723: LD_VAR 0 2
10727: PUSH
10728: FOR_IN
10729: IFFALSE 10745
// begin SetLives ( i , 0 ) ;
10731: LD_VAR 0 1
10735: PPUSH
10736: LD_INT 0
10738: PPUSH
10739: CALL_OW 234
// end ;
10743: GO 10728
10745: POP
10746: POP
// end ;
10747: PPOPN 2
10749: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10750: LD_EXP 24
10754: PUSH
10755: LD_EXP 30
10759: AND
10760: IFFALSE 10844
10762: GO 10764
10764: DISABLE
10765: LD_INT 0
10767: PPUSH
10768: PPUSH
// begin enable ;
10769: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10770: LD_ADDR_VAR 0 2
10774: PUSH
10775: LD_INT 22
10777: PUSH
10778: LD_OWVAR 2
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 32
10789: PUSH
10790: LD_INT 3
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PPUSH
10801: CALL_OW 69
10805: ST_TO_ADDR
// if not tmp then
10806: LD_VAR 0 2
10810: NOT
10811: IFFALSE 10815
// exit ;
10813: GO 10844
// for i in tmp do
10815: LD_ADDR_VAR 0 1
10819: PUSH
10820: LD_VAR 0 2
10824: PUSH
10825: FOR_IN
10826: IFFALSE 10842
// begin SetLives ( i , 0 ) ;
10828: LD_VAR 0 1
10832: PPUSH
10833: LD_INT 0
10835: PPUSH
10836: CALL_OW 234
// end ;
10840: GO 10825
10842: POP
10843: POP
// end ;
10844: PPOPN 2
10846: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10847: LD_EXP 24
10851: PUSH
10852: LD_EXP 27
10856: AND
10857: IFFALSE 10950
10859: GO 10861
10861: DISABLE
10862: LD_INT 0
10864: PPUSH
// begin enable ;
10865: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10866: LD_ADDR_VAR 0 1
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_OWVAR 2
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: LD_INT 25
10888: PUSH
10889: LD_INT 5
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 25
10898: PUSH
10899: LD_INT 9
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: PUSH
10906: LD_INT 25
10908: PUSH
10909: LD_INT 8
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PPUSH
10926: CALL_OW 69
10930: PUSH
10931: FOR_IN
10932: IFFALSE 10948
// begin SetClass ( i , 1 ) ;
10934: LD_VAR 0 1
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 336
// end ;
10946: GO 10931
10948: POP
10949: POP
// end ;
10950: PPOPN 1
10952: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10953: LD_EXP 24
10957: PUSH
10958: LD_EXP 28
10962: AND
10963: PUSH
10964: LD_OWVAR 65
10968: PUSH
10969: LD_INT 7
10971: LESS
10972: AND
10973: IFFALSE 10987
10975: GO 10977
10977: DISABLE
// begin enable ;
10978: ENABLE
// game_speed := 7 ;
10979: LD_ADDR_OWVAR 65
10983: PUSH
10984: LD_INT 7
10986: ST_TO_ADDR
// end ;
10987: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10988: LD_EXP 24
10992: PUSH
10993: LD_EXP 31
10997: AND
10998: IFFALSE 11200
11000: GO 11002
11002: DISABLE
11003: LD_INT 0
11005: PPUSH
11006: PPUSH
11007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11008: LD_ADDR_VAR 0 3
11012: PUSH
11013: LD_INT 81
11015: PUSH
11016: LD_OWVAR 2
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 21
11027: PUSH
11028: LD_INT 1
11030: PUSH
11031: EMPTY
11032: LIST
11033: LIST
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: PPUSH
11039: CALL_OW 69
11043: ST_TO_ADDR
// if not tmp then
11044: LD_VAR 0 3
11048: NOT
11049: IFFALSE 11053
// exit ;
11051: GO 11200
// if tmp > 5 then
11053: LD_VAR 0 3
11057: PUSH
11058: LD_INT 5
11060: GREATER
11061: IFFALSE 11073
// k := 5 else
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_INT 5
11070: ST_TO_ADDR
11071: GO 11083
// k := tmp ;
11073: LD_ADDR_VAR 0 2
11077: PUSH
11078: LD_VAR 0 3
11082: ST_TO_ADDR
// for i := 1 to k do
11083: LD_ADDR_VAR 0 1
11087: PUSH
11088: DOUBLE
11089: LD_INT 1
11091: DEC
11092: ST_TO_ADDR
11093: LD_VAR 0 2
11097: PUSH
11098: FOR_TO
11099: IFFALSE 11198
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11101: LD_VAR 0 3
11105: PUSH
11106: LD_VAR 0 1
11110: ARRAY
11111: PPUSH
11112: LD_VAR 0 1
11116: PUSH
11117: LD_INT 4
11119: MOD
11120: PUSH
11121: LD_INT 1
11123: PLUS
11124: PPUSH
11125: CALL_OW 259
11129: PUSH
11130: LD_INT 10
11132: LESS
11133: IFFALSE 11196
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11135: LD_VAR 0 3
11139: PUSH
11140: LD_VAR 0 1
11144: ARRAY
11145: PPUSH
11146: LD_VAR 0 1
11150: PUSH
11151: LD_INT 4
11153: MOD
11154: PUSH
11155: LD_INT 1
11157: PLUS
11158: PPUSH
11159: LD_VAR 0 3
11163: PUSH
11164: LD_VAR 0 1
11168: ARRAY
11169: PPUSH
11170: LD_VAR 0 1
11174: PUSH
11175: LD_INT 4
11177: MOD
11178: PUSH
11179: LD_INT 1
11181: PLUS
11182: PPUSH
11183: CALL_OW 259
11187: PUSH
11188: LD_INT 1
11190: PLUS
11191: PPUSH
11192: CALL_OW 237
11196: GO 11098
11198: POP
11199: POP
// end ;
11200: PPOPN 3
11202: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11203: LD_EXP 24
11207: PUSH
11208: LD_EXP 32
11212: AND
11213: IFFALSE 11233
11215: GO 11217
11217: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11218: LD_INT 4
11220: PPUSH
11221: LD_OWVAR 2
11225: PPUSH
11226: LD_INT 0
11228: PPUSH
11229: CALL_OW 324
11233: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11234: LD_EXP 24
11238: PUSH
11239: LD_EXP 61
11243: AND
11244: IFFALSE 11264
11246: GO 11248
11248: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11249: LD_INT 19
11251: PPUSH
11252: LD_OWVAR 2
11256: PPUSH
11257: LD_INT 0
11259: PPUSH
11260: CALL_OW 324
11264: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11265: LD_EXP 24
11269: PUSH
11270: LD_EXP 33
11274: AND
11275: IFFALSE 11377
11277: GO 11279
11279: DISABLE
11280: LD_INT 0
11282: PPUSH
11283: PPUSH
// begin enable ;
11284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11285: LD_ADDR_VAR 0 2
11289: PUSH
11290: LD_INT 22
11292: PUSH
11293: LD_OWVAR 2
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 2
11304: PUSH
11305: LD_INT 34
11307: PUSH
11308: LD_INT 11
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 34
11317: PUSH
11318: LD_INT 30
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: PPUSH
11334: CALL_OW 69
11338: ST_TO_ADDR
// if not tmp then
11339: LD_VAR 0 2
11343: NOT
11344: IFFALSE 11348
// exit ;
11346: GO 11377
// for i in tmp do
11348: LD_ADDR_VAR 0 1
11352: PUSH
11353: LD_VAR 0 2
11357: PUSH
11358: FOR_IN
11359: IFFALSE 11375
// begin SetLives ( i , 0 ) ;
11361: LD_VAR 0 1
11365: PPUSH
11366: LD_INT 0
11368: PPUSH
11369: CALL_OW 234
// end ;
11373: GO 11358
11375: POP
11376: POP
// end ;
11377: PPOPN 2
11379: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11380: LD_EXP 24
11384: PUSH
11385: LD_EXP 34
11389: AND
11390: IFFALSE 11410
11392: GO 11394
11394: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11395: LD_INT 32
11397: PPUSH
11398: LD_OWVAR 2
11402: PPUSH
11403: LD_INT 0
11405: PPUSH
11406: CALL_OW 324
11410: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11411: LD_EXP 24
11415: PUSH
11416: LD_EXP 35
11420: AND
11421: IFFALSE 11602
11423: GO 11425
11425: DISABLE
11426: LD_INT 0
11428: PPUSH
11429: PPUSH
11430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11431: LD_ADDR_VAR 0 2
11435: PUSH
11436: LD_INT 22
11438: PUSH
11439: LD_OWVAR 2
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 33
11450: PUSH
11451: LD_INT 3
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PPUSH
11462: CALL_OW 69
11466: ST_TO_ADDR
// if not tmp then
11467: LD_VAR 0 2
11471: NOT
11472: IFFALSE 11476
// exit ;
11474: GO 11602
// side := 0 ;
11476: LD_ADDR_VAR 0 3
11480: PUSH
11481: LD_INT 0
11483: ST_TO_ADDR
// for i := 1 to 8 do
11484: LD_ADDR_VAR 0 1
11488: PUSH
11489: DOUBLE
11490: LD_INT 1
11492: DEC
11493: ST_TO_ADDR
11494: LD_INT 8
11496: PUSH
11497: FOR_TO
11498: IFFALSE 11546
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11500: LD_OWVAR 2
11504: PUSH
11505: LD_VAR 0 1
11509: NONEQUAL
11510: PUSH
11511: LD_OWVAR 2
11515: PPUSH
11516: LD_VAR 0 1
11520: PPUSH
11521: CALL_OW 81
11525: PUSH
11526: LD_INT 2
11528: EQUAL
11529: AND
11530: IFFALSE 11544
// begin side := i ;
11532: LD_ADDR_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: ST_TO_ADDR
// break ;
11542: GO 11546
// end ;
11544: GO 11497
11546: POP
11547: POP
// if not side then
11548: LD_VAR 0 3
11552: NOT
11553: IFFALSE 11557
// exit ;
11555: GO 11602
// for i := 1 to tmp do
11557: LD_ADDR_VAR 0 1
11561: PUSH
11562: DOUBLE
11563: LD_INT 1
11565: DEC
11566: ST_TO_ADDR
11567: LD_VAR 0 2
11571: PUSH
11572: FOR_TO
11573: IFFALSE 11600
// if Prob ( 60 ) then
11575: LD_INT 60
11577: PPUSH
11578: CALL_OW 13
11582: IFFALSE 11598
// SetSide ( i , side ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: CALL_OW 235
11598: GO 11572
11600: POP
11601: POP
// end ;
11602: PPOPN 3
11604: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11605: LD_EXP 24
11609: PUSH
11610: LD_EXP 37
11614: AND
11615: IFFALSE 11734
11617: GO 11619
11619: DISABLE
11620: LD_INT 0
11622: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11623: LD_ADDR_VAR 0 1
11627: PUSH
11628: LD_INT 22
11630: PUSH
11631: LD_OWVAR 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 1
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 3
11652: PUSH
11653: LD_INT 23
11655: PUSH
11656: LD_INT 0
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: PPUSH
11672: CALL_OW 69
11676: PUSH
11677: FOR_IN
11678: IFFALSE 11732
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11680: LD_VAR 0 1
11684: PPUSH
11685: CALL_OW 257
11689: PUSH
11690: LD_INT 1
11692: PUSH
11693: LD_INT 2
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: LD_INT 4
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: IN
11708: IFFALSE 11730
// SetClass ( un , rand ( 1 , 4 ) ) ;
11710: LD_VAR 0 1
11714: PPUSH
11715: LD_INT 1
11717: PPUSH
11718: LD_INT 4
11720: PPUSH
11721: CALL_OW 12
11725: PPUSH
11726: CALL_OW 336
11730: GO 11677
11732: POP
11733: POP
// end ;
11734: PPOPN 1
11736: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11737: LD_EXP 24
11741: PUSH
11742: LD_EXP 36
11746: AND
11747: IFFALSE 11826
11749: GO 11751
11751: DISABLE
11752: LD_INT 0
11754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11755: LD_ADDR_VAR 0 1
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_OWVAR 2
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 21
11774: PUSH
11775: LD_INT 3
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PPUSH
11786: CALL_OW 69
11790: ST_TO_ADDR
// if not tmp then
11791: LD_VAR 0 1
11795: NOT
11796: IFFALSE 11800
// exit ;
11798: GO 11826
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11800: LD_VAR 0 1
11804: PUSH
11805: LD_INT 1
11807: PPUSH
11808: LD_VAR 0 1
11812: PPUSH
11813: CALL_OW 12
11817: ARRAY
11818: PPUSH
11819: LD_INT 100
11821: PPUSH
11822: CALL_OW 234
// end ;
11826: PPOPN 1
11828: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11829: LD_EXP 24
11833: PUSH
11834: LD_EXP 38
11838: AND
11839: IFFALSE 11937
11841: GO 11843
11843: DISABLE
11844: LD_INT 0
11846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_INT 22
11854: PUSH
11855: LD_OWVAR 2
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 21
11866: PUSH
11867: LD_INT 1
11869: PUSH
11870: EMPTY
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: PPUSH
11878: CALL_OW 69
11882: ST_TO_ADDR
// if not tmp then
11883: LD_VAR 0 1
11887: NOT
11888: IFFALSE 11892
// exit ;
11890: GO 11937
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11892: LD_VAR 0 1
11896: PUSH
11897: LD_INT 1
11899: PPUSH
11900: LD_VAR 0 1
11904: PPUSH
11905: CALL_OW 12
11909: ARRAY
11910: PPUSH
11911: LD_INT 1
11913: PPUSH
11914: LD_INT 4
11916: PPUSH
11917: CALL_OW 12
11921: PPUSH
11922: LD_INT 3000
11924: PPUSH
11925: LD_INT 9000
11927: PPUSH
11928: CALL_OW 12
11932: PPUSH
11933: CALL_OW 492
// end ;
11937: PPOPN 1
11939: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11940: LD_EXP 24
11944: PUSH
11945: LD_EXP 39
11949: AND
11950: IFFALSE 11970
11952: GO 11954
11954: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11955: LD_INT 1
11957: PPUSH
11958: LD_OWVAR 2
11962: PPUSH
11963: LD_INT 0
11965: PPUSH
11966: CALL_OW 324
11970: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11971: LD_EXP 24
11975: PUSH
11976: LD_EXP 40
11980: AND
11981: IFFALSE 12064
11983: GO 11985
11985: DISABLE
11986: LD_INT 0
11988: PPUSH
11989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11990: LD_ADDR_VAR 0 2
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_OWVAR 2
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 21
12009: PUSH
12010: LD_INT 3
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: ST_TO_ADDR
// if not tmp then
12026: LD_VAR 0 2
12030: NOT
12031: IFFALSE 12035
// exit ;
12033: GO 12064
// for i in tmp do
12035: LD_ADDR_VAR 0 1
12039: PUSH
12040: LD_VAR 0 2
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12062
// SetBLevel ( i , 10 ) ;
12048: LD_VAR 0 1
12052: PPUSH
12053: LD_INT 10
12055: PPUSH
12056: CALL_OW 241
12060: GO 12045
12062: POP
12063: POP
// end ;
12064: PPOPN 2
12066: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12067: LD_EXP 24
12071: PUSH
12072: LD_EXP 41
12076: AND
12077: IFFALSE 12188
12079: GO 12081
12081: DISABLE
12082: LD_INT 0
12084: PPUSH
12085: PPUSH
12086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12087: LD_ADDR_VAR 0 3
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_OWVAR 2
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PUSH
12104: LD_INT 25
12106: PUSH
12107: LD_INT 1
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PPUSH
12118: CALL_OW 69
12122: ST_TO_ADDR
// if not tmp then
12123: LD_VAR 0 3
12127: NOT
12128: IFFALSE 12132
// exit ;
12130: GO 12188
// un := tmp [ rand ( 1 , tmp ) ] ;
12132: LD_ADDR_VAR 0 2
12136: PUSH
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 1
12144: PPUSH
12145: LD_VAR 0 3
12149: PPUSH
12150: CALL_OW 12
12154: ARRAY
12155: ST_TO_ADDR
// if Crawls ( un ) then
12156: LD_VAR 0 2
12160: PPUSH
12161: CALL_OW 318
12165: IFFALSE 12176
// ComWalk ( un ) ;
12167: LD_VAR 0 2
12171: PPUSH
12172: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12176: LD_VAR 0 2
12180: PPUSH
12181: LD_INT 5
12183: PPUSH
12184: CALL_OW 336
// end ;
12188: PPOPN 3
12190: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12191: LD_EXP 24
12195: PUSH
12196: LD_EXP 42
12200: AND
12201: PUSH
12202: LD_OWVAR 67
12206: PUSH
12207: LD_INT 4
12209: LESS
12210: AND
12211: IFFALSE 12230
12213: GO 12215
12215: DISABLE
// begin Difficulty := Difficulty + 1 ;
12216: LD_ADDR_OWVAR 67
12220: PUSH
12221: LD_OWVAR 67
12225: PUSH
12226: LD_INT 1
12228: PLUS
12229: ST_TO_ADDR
// end ;
12230: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12231: LD_EXP 24
12235: PUSH
12236: LD_EXP 43
12240: AND
12241: IFFALSE 12344
12243: GO 12245
12245: DISABLE
12246: LD_INT 0
12248: PPUSH
// begin for i := 1 to 5 do
12249: LD_ADDR_VAR 0 1
12253: PUSH
12254: DOUBLE
12255: LD_INT 1
12257: DEC
12258: ST_TO_ADDR
12259: LD_INT 5
12261: PUSH
12262: FOR_TO
12263: IFFALSE 12342
// begin uc_nation := nation_nature ;
12265: LD_ADDR_OWVAR 21
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// uc_side := 0 ;
12273: LD_ADDR_OWVAR 20
12277: PUSH
12278: LD_INT 0
12280: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12281: LD_ADDR_OWVAR 29
12285: PUSH
12286: LD_INT 12
12288: PUSH
12289: LD_INT 12
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: ST_TO_ADDR
// hc_agressivity := 20 ;
12296: LD_ADDR_OWVAR 35
12300: PUSH
12301: LD_INT 20
12303: ST_TO_ADDR
// hc_class := class_tiger ;
12304: LD_ADDR_OWVAR 28
12308: PUSH
12309: LD_INT 14
12311: ST_TO_ADDR
// hc_gallery :=  ;
12312: LD_ADDR_OWVAR 33
12316: PUSH
12317: LD_STRING 
12319: ST_TO_ADDR
// hc_name :=  ;
12320: LD_ADDR_OWVAR 26
12324: PUSH
12325: LD_STRING 
12327: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12328: CALL_OW 44
12332: PPUSH
12333: LD_INT 0
12335: PPUSH
12336: CALL_OW 51
// end ;
12340: GO 12262
12342: POP
12343: POP
// end ;
12344: PPOPN 1
12346: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12347: LD_EXP 24
12351: PUSH
12352: LD_EXP 44
12356: AND
12357: IFFALSE 12366
12359: GO 12361
12361: DISABLE
// StreamSibBomb ;
12362: CALL 12367 0 0
12366: END
// export function StreamSibBomb ; var i , x , y ; begin
12367: LD_INT 0
12369: PPUSH
12370: PPUSH
12371: PPUSH
12372: PPUSH
// result := false ;
12373: LD_ADDR_VAR 0 1
12377: PUSH
12378: LD_INT 0
12380: ST_TO_ADDR
// for i := 1 to 16 do
12381: LD_ADDR_VAR 0 2
12385: PUSH
12386: DOUBLE
12387: LD_INT 1
12389: DEC
12390: ST_TO_ADDR
12391: LD_INT 16
12393: PUSH
12394: FOR_TO
12395: IFFALSE 12594
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12397: LD_ADDR_VAR 0 3
12401: PUSH
12402: LD_INT 10
12404: PUSH
12405: LD_INT 20
12407: PUSH
12408: LD_INT 30
12410: PUSH
12411: LD_INT 40
12413: PUSH
12414: LD_INT 50
12416: PUSH
12417: LD_INT 60
12419: PUSH
12420: LD_INT 70
12422: PUSH
12423: LD_INT 80
12425: PUSH
12426: LD_INT 90
12428: PUSH
12429: LD_INT 100
12431: PUSH
12432: LD_INT 110
12434: PUSH
12435: LD_INT 120
12437: PUSH
12438: LD_INT 130
12440: PUSH
12441: LD_INT 140
12443: PUSH
12444: LD_INT 150
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 1
12466: PPUSH
12467: LD_INT 15
12469: PPUSH
12470: CALL_OW 12
12474: ARRAY
12475: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12476: LD_ADDR_VAR 0 4
12480: PUSH
12481: LD_INT 10
12483: PUSH
12484: LD_INT 20
12486: PUSH
12487: LD_INT 30
12489: PUSH
12490: LD_INT 40
12492: PUSH
12493: LD_INT 50
12495: PUSH
12496: LD_INT 60
12498: PUSH
12499: LD_INT 70
12501: PUSH
12502: LD_INT 80
12504: PUSH
12505: LD_INT 90
12507: PUSH
12508: LD_INT 100
12510: PUSH
12511: LD_INT 110
12513: PUSH
12514: LD_INT 120
12516: PUSH
12517: LD_INT 130
12519: PUSH
12520: LD_INT 140
12522: PUSH
12523: LD_INT 150
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 1
12545: PPUSH
12546: LD_INT 15
12548: PPUSH
12549: CALL_OW 12
12553: ARRAY
12554: ST_TO_ADDR
// if ValidHex ( x , y ) then
12555: LD_VAR 0 3
12559: PPUSH
12560: LD_VAR 0 4
12564: PPUSH
12565: CALL_OW 488
12569: IFFALSE 12592
// begin result := [ x , y ] ;
12571: LD_ADDR_VAR 0 1
12575: PUSH
12576: LD_VAR 0 3
12580: PUSH
12581: LD_VAR 0 4
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: ST_TO_ADDR
// break ;
12590: GO 12594
// end ; end ;
12592: GO 12394
12594: POP
12595: POP
// if result then
12596: LD_VAR 0 1
12600: IFFALSE 12660
// begin ToLua ( playSibBomb() ) ;
12602: LD_STRING playSibBomb()
12604: PPUSH
12605: CALL_OW 559
// wait ( 0 0$14 ) ;
12609: LD_INT 490
12611: PPUSH
12612: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12616: LD_VAR 0 1
12620: PUSH
12621: LD_INT 1
12623: ARRAY
12624: PPUSH
12625: LD_VAR 0 1
12629: PUSH
12630: LD_INT 2
12632: ARRAY
12633: PPUSH
12634: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12638: LD_VAR 0 1
12642: PUSH
12643: LD_INT 1
12645: ARRAY
12646: PPUSH
12647: LD_VAR 0 1
12651: PUSH
12652: LD_INT 2
12654: ARRAY
12655: PPUSH
12656: CALL_OW 429
// end ; end ;
12660: LD_VAR 0 1
12664: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12665: LD_EXP 24
12669: PUSH
12670: LD_EXP 46
12674: AND
12675: IFFALSE 12687
12677: GO 12679
12679: DISABLE
// YouLost (  ) ;
12680: LD_STRING 
12682: PPUSH
12683: CALL_OW 104
12687: END
// every 0 0$1 trigger StreamModeActive and sFog do
12688: LD_EXP 24
12692: PUSH
12693: LD_EXP 45
12697: AND
12698: IFFALSE 12712
12700: GO 12702
12702: DISABLE
// FogOff ( your_side ) ;
12703: LD_OWVAR 2
12707: PPUSH
12708: CALL_OW 344
12712: END
// every 0 0$1 trigger StreamModeActive and sSun do
12713: LD_EXP 24
12717: PUSH
12718: LD_EXP 47
12722: AND
12723: IFFALSE 12751
12725: GO 12727
12727: DISABLE
// begin solar_recharge_percent := 0 ;
12728: LD_ADDR_OWVAR 79
12732: PUSH
12733: LD_INT 0
12735: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12736: LD_INT 10500
12738: PPUSH
12739: CALL_OW 67
// solar_recharge_percent := 100 ;
12743: LD_ADDR_OWVAR 79
12747: PUSH
12748: LD_INT 100
12750: ST_TO_ADDR
// end ;
12751: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12752: LD_EXP 24
12756: PUSH
12757: LD_EXP 48
12761: AND
12762: IFFALSE 13001
12764: GO 12766
12766: DISABLE
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin tmp := [ ] ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: EMPTY
12778: ST_TO_ADDR
// for i := 1 to 6 do
12779: LD_ADDR_VAR 0 1
12783: PUSH
12784: DOUBLE
12785: LD_INT 1
12787: DEC
12788: ST_TO_ADDR
12789: LD_INT 6
12791: PUSH
12792: FOR_TO
12793: IFFALSE 12898
// begin uc_nation := nation_nature ;
12795: LD_ADDR_OWVAR 21
12799: PUSH
12800: LD_INT 0
12802: ST_TO_ADDR
// uc_side := 0 ;
12803: LD_ADDR_OWVAR 20
12807: PUSH
12808: LD_INT 0
12810: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12811: LD_ADDR_OWVAR 29
12815: PUSH
12816: LD_INT 12
12818: PUSH
12819: LD_INT 12
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: ST_TO_ADDR
// hc_agressivity := 20 ;
12826: LD_ADDR_OWVAR 35
12830: PUSH
12831: LD_INT 20
12833: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12834: LD_ADDR_OWVAR 28
12838: PUSH
12839: LD_INT 17
12841: ST_TO_ADDR
// hc_gallery :=  ;
12842: LD_ADDR_OWVAR 33
12846: PUSH
12847: LD_STRING 
12849: ST_TO_ADDR
// hc_name :=  ;
12850: LD_ADDR_OWVAR 26
12854: PUSH
12855: LD_STRING 
12857: ST_TO_ADDR
// un := CreateHuman ;
12858: LD_ADDR_VAR 0 2
12862: PUSH
12863: CALL_OW 44
12867: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12868: LD_VAR 0 2
12872: PPUSH
12873: LD_INT 1
12875: PPUSH
12876: CALL_OW 51
// tmp := tmp ^ un ;
12880: LD_ADDR_VAR 0 3
12884: PUSH
12885: LD_VAR 0 3
12889: PUSH
12890: LD_VAR 0 2
12894: ADD
12895: ST_TO_ADDR
// end ;
12896: GO 12792
12898: POP
12899: POP
// repeat wait ( 0 0$1 ) ;
12900: LD_INT 35
12902: PPUSH
12903: CALL_OW 67
// for un in tmp do
12907: LD_ADDR_VAR 0 2
12911: PUSH
12912: LD_VAR 0 3
12916: PUSH
12917: FOR_IN
12918: IFFALSE 12992
// begin if IsDead ( un ) then
12920: LD_VAR 0 2
12924: PPUSH
12925: CALL_OW 301
12929: IFFALSE 12949
// begin tmp := tmp diff un ;
12931: LD_ADDR_VAR 0 3
12935: PUSH
12936: LD_VAR 0 3
12940: PUSH
12941: LD_VAR 0 2
12945: DIFF
12946: ST_TO_ADDR
// continue ;
12947: GO 12917
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12949: LD_VAR 0 2
12953: PPUSH
12954: LD_INT 3
12956: PUSH
12957: LD_INT 22
12959: PUSH
12960: LD_INT 0
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PPUSH
12976: LD_VAR 0 2
12980: PPUSH
12981: CALL_OW 74
12985: PPUSH
12986: CALL_OW 115
// end ;
12990: GO 12917
12992: POP
12993: POP
// until not tmp ;
12994: LD_VAR 0 3
12998: NOT
12999: IFFALSE 12900
// end ;
13001: PPOPN 3
13003: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13004: LD_EXP 24
13008: PUSH
13009: LD_EXP 49
13013: AND
13014: IFFALSE 13068
13016: GO 13018
13018: DISABLE
// begin ToLua ( displayTroll(); ) ;
13019: LD_STRING displayTroll();
13021: PPUSH
13022: CALL_OW 559
// wait ( 3 3$00 ) ;
13026: LD_INT 6300
13028: PPUSH
13029: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13033: LD_STRING hideTroll();
13035: PPUSH
13036: CALL_OW 559
// wait ( 1 1$00 ) ;
13040: LD_INT 2100
13042: PPUSH
13043: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13047: LD_STRING displayTroll();
13049: PPUSH
13050: CALL_OW 559
// wait ( 1 1$00 ) ;
13054: LD_INT 2100
13056: PPUSH
13057: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13061: LD_STRING hideTroll();
13063: PPUSH
13064: CALL_OW 559
// end ;
13068: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13069: LD_EXP 24
13073: PUSH
13074: LD_EXP 50
13078: AND
13079: IFFALSE 13142
13081: GO 13083
13083: DISABLE
13084: LD_INT 0
13086: PPUSH
// begin p := 0 ;
13087: LD_ADDR_VAR 0 1
13091: PUSH
13092: LD_INT 0
13094: ST_TO_ADDR
// repeat game_speed := 1 ;
13095: LD_ADDR_OWVAR 65
13099: PUSH
13100: LD_INT 1
13102: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13103: LD_INT 35
13105: PPUSH
13106: CALL_OW 67
// p := p + 1 ;
13110: LD_ADDR_VAR 0 1
13114: PUSH
13115: LD_VAR 0 1
13119: PUSH
13120: LD_INT 1
13122: PLUS
13123: ST_TO_ADDR
// until p >= 60 ;
13124: LD_VAR 0 1
13128: PUSH
13129: LD_INT 60
13131: GREATEREQUAL
13132: IFFALSE 13095
// game_speed := 4 ;
13134: LD_ADDR_OWVAR 65
13138: PUSH
13139: LD_INT 4
13141: ST_TO_ADDR
// end ;
13142: PPOPN 1
13144: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13145: LD_EXP 24
13149: PUSH
13150: LD_EXP 51
13154: AND
13155: IFFALSE 13301
13157: GO 13159
13159: DISABLE
13160: LD_INT 0
13162: PPUSH
13163: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13164: LD_ADDR_VAR 0 1
13168: PUSH
13169: LD_INT 22
13171: PUSH
13172: LD_OWVAR 2
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 2
13183: PUSH
13184: LD_INT 30
13186: PUSH
13187: LD_INT 0
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 30
13196: PUSH
13197: LD_INT 1
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: ST_TO_ADDR
// if not depot then
13218: LD_VAR 0 1
13222: NOT
13223: IFFALSE 13227
// exit ;
13225: GO 13301
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13227: LD_ADDR_VAR 0 2
13231: PUSH
13232: LD_VAR 0 1
13236: PUSH
13237: LD_INT 1
13239: PPUSH
13240: LD_VAR 0 1
13244: PPUSH
13245: CALL_OW 12
13249: ARRAY
13250: PPUSH
13251: CALL_OW 274
13255: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13256: LD_VAR 0 2
13260: PPUSH
13261: LD_INT 1
13263: PPUSH
13264: LD_INT 0
13266: PPUSH
13267: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13271: LD_VAR 0 2
13275: PPUSH
13276: LD_INT 2
13278: PPUSH
13279: LD_INT 0
13281: PPUSH
13282: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13286: LD_VAR 0 2
13290: PPUSH
13291: LD_INT 3
13293: PPUSH
13294: LD_INT 0
13296: PPUSH
13297: CALL_OW 277
// end ;
13301: PPOPN 2
13303: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13304: LD_EXP 24
13308: PUSH
13309: LD_EXP 52
13313: AND
13314: IFFALSE 13411
13316: GO 13318
13318: DISABLE
13319: LD_INT 0
13321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13322: LD_ADDR_VAR 0 1
13326: PUSH
13327: LD_INT 22
13329: PUSH
13330: LD_OWVAR 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 21
13341: PUSH
13342: LD_INT 1
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: LD_INT 23
13354: PUSH
13355: LD_INT 0
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: ST_TO_ADDR
// if not tmp then
13376: LD_VAR 0 1
13380: NOT
13381: IFFALSE 13385
// exit ;
13383: GO 13411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13385: LD_VAR 0 1
13389: PUSH
13390: LD_INT 1
13392: PPUSH
13393: LD_VAR 0 1
13397: PPUSH
13398: CALL_OW 12
13402: ARRAY
13403: PPUSH
13404: LD_INT 200
13406: PPUSH
13407: CALL_OW 234
// end ;
13411: PPOPN 1
13413: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13414: LD_EXP 24
13418: PUSH
13419: LD_EXP 53
13423: AND
13424: IFFALSE 13503
13426: GO 13428
13428: DISABLE
13429: LD_INT 0
13431: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13432: LD_ADDR_VAR 0 1
13436: PUSH
13437: LD_INT 22
13439: PUSH
13440: LD_OWVAR 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 2
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// if not tmp then
13468: LD_VAR 0 1
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13503
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13477: LD_VAR 0 1
13481: PUSH
13482: LD_INT 1
13484: PPUSH
13485: LD_VAR 0 1
13489: PPUSH
13490: CALL_OW 12
13494: ARRAY
13495: PPUSH
13496: LD_INT 60
13498: PPUSH
13499: CALL_OW 234
// end ;
13503: PPOPN 1
13505: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13506: LD_EXP 24
13510: PUSH
13511: LD_EXP 54
13515: AND
13516: IFFALSE 13615
13518: GO 13520
13520: DISABLE
13521: LD_INT 0
13523: PPUSH
13524: PPUSH
// begin enable ;
13525: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13526: LD_ADDR_VAR 0 1
13530: PUSH
13531: LD_INT 22
13533: PUSH
13534: LD_OWVAR 2
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 61
13545: PUSH
13546: EMPTY
13547: LIST
13548: PUSH
13549: LD_INT 33
13551: PUSH
13552: LD_INT 2
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: PPUSH
13564: CALL_OW 69
13568: ST_TO_ADDR
// if not tmp then
13569: LD_VAR 0 1
13573: NOT
13574: IFFALSE 13578
// exit ;
13576: GO 13615
// for i in tmp do
13578: LD_ADDR_VAR 0 2
13582: PUSH
13583: LD_VAR 0 1
13587: PUSH
13588: FOR_IN
13589: IFFALSE 13613
// if IsControledBy ( i ) then
13591: LD_VAR 0 2
13595: PPUSH
13596: CALL_OW 312
13600: IFFALSE 13611
// ComUnlink ( i ) ;
13602: LD_VAR 0 2
13606: PPUSH
13607: CALL_OW 136
13611: GO 13588
13613: POP
13614: POP
// end ;
13615: PPOPN 2
13617: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13618: LD_EXP 24
13622: PUSH
13623: LD_EXP 55
13627: AND
13628: IFFALSE 13768
13630: GO 13632
13632: DISABLE
13633: LD_INT 0
13635: PPUSH
13636: PPUSH
// begin ToLua ( displayPowell(); ) ;
13637: LD_STRING displayPowell();
13639: PPUSH
13640: CALL_OW 559
// uc_side := 0 ;
13644: LD_ADDR_OWVAR 20
13648: PUSH
13649: LD_INT 0
13651: ST_TO_ADDR
// uc_nation := 2 ;
13652: LD_ADDR_OWVAR 21
13656: PUSH
13657: LD_INT 2
13659: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13660: LD_ADDR_OWVAR 37
13664: PUSH
13665: LD_INT 14
13667: ST_TO_ADDR
// vc_engine := engine_siberite ;
13668: LD_ADDR_OWVAR 39
13672: PUSH
13673: LD_INT 3
13675: ST_TO_ADDR
// vc_control := control_apeman ;
13676: LD_ADDR_OWVAR 38
13680: PUSH
13681: LD_INT 5
13683: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13684: LD_ADDR_OWVAR 40
13688: PUSH
13689: LD_INT 29
13691: ST_TO_ADDR
// un := CreateVehicle ;
13692: LD_ADDR_VAR 0 2
13696: PUSH
13697: CALL_OW 45
13701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13702: LD_VAR 0 2
13706: PPUSH
13707: LD_INT 1
13709: PPUSH
13710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13714: LD_INT 35
13716: PPUSH
13717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13721: LD_VAR 0 2
13725: PPUSH
13726: LD_INT 22
13728: PUSH
13729: LD_OWVAR 2
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PPUSH
13738: CALL_OW 69
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 74
13752: PPUSH
13753: CALL_OW 115
// until IsDead ( un ) ;
13757: LD_VAR 0 2
13761: PPUSH
13762: CALL_OW 301
13766: IFFALSE 13714
// end ;
13768: PPOPN 2
13770: END
// every 0 0$1 trigger StreamModeActive and sStu do
13771: LD_EXP 24
13775: PUSH
13776: LD_EXP 63
13780: AND
13781: IFFALSE 13797
13783: GO 13785
13785: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13786: LD_STRING displayStucuk();
13788: PPUSH
13789: CALL_OW 559
// ResetFog ;
13793: CALL_OW 335
// end ;
13797: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13798: LD_EXP 24
13802: PUSH
13803: LD_EXP 56
13807: AND
13808: IFFALSE 13949
13810: GO 13812
13812: DISABLE
13813: LD_INT 0
13815: PPUSH
13816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13817: LD_ADDR_VAR 0 2
13821: PUSH
13822: LD_INT 22
13824: PUSH
13825: LD_OWVAR 2
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 69
13852: ST_TO_ADDR
// if not tmp then
13853: LD_VAR 0 2
13857: NOT
13858: IFFALSE 13862
// exit ;
13860: GO 13949
// un := tmp [ rand ( 1 , tmp ) ] ;
13862: LD_ADDR_VAR 0 1
13866: PUSH
13867: LD_VAR 0 2
13871: PUSH
13872: LD_INT 1
13874: PPUSH
13875: LD_VAR 0 2
13879: PPUSH
13880: CALL_OW 12
13884: ARRAY
13885: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13886: LD_VAR 0 1
13890: PPUSH
13891: LD_INT 0
13893: PPUSH
13894: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13898: LD_VAR 0 1
13902: PPUSH
13903: LD_OWVAR 3
13907: PUSH
13908: LD_VAR 0 1
13912: DIFF
13913: PPUSH
13914: LD_VAR 0 1
13918: PPUSH
13919: CALL_OW 74
13923: PPUSH
13924: CALL_OW 115
// wait ( 0 0$20 ) ;
13928: LD_INT 700
13930: PPUSH
13931: CALL_OW 67
// SetSide ( un , your_side ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: LD_OWVAR 2
13944: PPUSH
13945: CALL_OW 235
// end ;
13949: PPOPN 2
13951: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13952: LD_EXP 24
13956: PUSH
13957: LD_EXP 57
13961: AND
13962: IFFALSE 14068
13964: GO 13966
13966: DISABLE
13967: LD_INT 0
13969: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13970: LD_ADDR_VAR 0 1
13974: PUSH
13975: LD_INT 22
13977: PUSH
13978: LD_OWVAR 2
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: LD_INT 2
13989: PUSH
13990: LD_INT 30
13992: PUSH
13993: LD_INT 0
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 30
14002: PUSH
14003: LD_INT 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PPUSH
14019: CALL_OW 69
14023: ST_TO_ADDR
// if not depot then
14024: LD_VAR 0 1
14028: NOT
14029: IFFALSE 14033
// exit ;
14031: GO 14068
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14033: LD_VAR 0 1
14037: PUSH
14038: LD_INT 1
14040: ARRAY
14041: PPUSH
14042: CALL_OW 250
14046: PPUSH
14047: LD_VAR 0 1
14051: PUSH
14052: LD_INT 1
14054: ARRAY
14055: PPUSH
14056: CALL_OW 251
14060: PPUSH
14061: LD_INT 70
14063: PPUSH
14064: CALL_OW 495
// end ;
14068: PPOPN 1
14070: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14071: LD_EXP 24
14075: PUSH
14076: LD_EXP 58
14080: AND
14081: IFFALSE 14292
14083: GO 14085
14085: DISABLE
14086: LD_INT 0
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14093: LD_ADDR_VAR 0 5
14097: PUSH
14098: LD_INT 22
14100: PUSH
14101: LD_OWVAR 2
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 21
14112: PUSH
14113: LD_INT 1
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: PPUSH
14124: CALL_OW 69
14128: ST_TO_ADDR
// if not tmp then
14129: LD_VAR 0 5
14133: NOT
14134: IFFALSE 14138
// exit ;
14136: GO 14292
// for i in tmp do
14138: LD_ADDR_VAR 0 1
14142: PUSH
14143: LD_VAR 0 5
14147: PUSH
14148: FOR_IN
14149: IFFALSE 14290
// begin d := rand ( 0 , 5 ) ;
14151: LD_ADDR_VAR 0 4
14155: PUSH
14156: LD_INT 0
14158: PPUSH
14159: LD_INT 5
14161: PPUSH
14162: CALL_OW 12
14166: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14167: LD_ADDR_VAR 0 2
14171: PUSH
14172: LD_VAR 0 1
14176: PPUSH
14177: CALL_OW 250
14181: PPUSH
14182: LD_VAR 0 4
14186: PPUSH
14187: LD_INT 3
14189: PPUSH
14190: LD_INT 12
14192: PPUSH
14193: CALL_OW 12
14197: PPUSH
14198: CALL_OW 272
14202: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14203: LD_ADDR_VAR 0 3
14207: PUSH
14208: LD_VAR 0 1
14212: PPUSH
14213: CALL_OW 251
14217: PPUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: LD_INT 3
14225: PPUSH
14226: LD_INT 12
14228: PPUSH
14229: CALL_OW 12
14233: PPUSH
14234: CALL_OW 273
14238: ST_TO_ADDR
// if ValidHex ( x , y ) then
14239: LD_VAR 0 2
14243: PPUSH
14244: LD_VAR 0 3
14248: PPUSH
14249: CALL_OW 488
14253: IFFALSE 14288
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14255: LD_VAR 0 1
14259: PPUSH
14260: LD_VAR 0 2
14264: PPUSH
14265: LD_VAR 0 3
14269: PPUSH
14270: LD_INT 3
14272: PPUSH
14273: LD_INT 6
14275: PPUSH
14276: CALL_OW 12
14280: PPUSH
14281: LD_INT 1
14283: PPUSH
14284: CALL_OW 483
// end ;
14288: GO 14148
14290: POP
14291: POP
// end ;
14292: PPOPN 5
14294: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14295: LD_EXP 24
14299: PUSH
14300: LD_EXP 59
14304: AND
14305: IFFALSE 14399
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
14313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14314: LD_ADDR_VAR 0 2
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_OWVAR 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 32
14333: PUSH
14334: LD_INT 1
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 21
14343: PUSH
14344: LD_INT 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: LIST
14355: PPUSH
14356: CALL_OW 69
14360: ST_TO_ADDR
// if not tmp then
14361: LD_VAR 0 2
14365: NOT
14366: IFFALSE 14370
// exit ;
14368: GO 14399
// for i in tmp do
14370: LD_ADDR_VAR 0 1
14374: PUSH
14375: LD_VAR 0 2
14379: PUSH
14380: FOR_IN
14381: IFFALSE 14397
// SetFuel ( i , 0 ) ;
14383: LD_VAR 0 1
14387: PPUSH
14388: LD_INT 0
14390: PPUSH
14391: CALL_OW 240
14395: GO 14380
14397: POP
14398: POP
// end ;
14399: PPOPN 2
14401: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14402: LD_EXP 24
14406: PUSH
14407: LD_EXP 60
14411: AND
14412: IFFALSE 14478
14414: GO 14416
14416: DISABLE
14417: LD_INT 0
14419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_OWVAR 2
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 30
14439: PUSH
14440: LD_INT 29
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PPUSH
14451: CALL_OW 69
14455: ST_TO_ADDR
// if not tmp then
14456: LD_VAR 0 1
14460: NOT
14461: IFFALSE 14465
// exit ;
14463: GO 14478
// DestroyUnit ( tmp [ 1 ] ) ;
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: CALL_OW 65
// end ;
14478: PPOPN 1
14480: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14481: LD_EXP 24
14485: PUSH
14486: LD_EXP 62
14490: AND
14491: IFFALSE 14620
14493: GO 14495
14495: DISABLE
14496: LD_INT 0
14498: PPUSH
// begin uc_side := 0 ;
14499: LD_ADDR_OWVAR 20
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// uc_nation := nation_arabian ;
14507: LD_ADDR_OWVAR 21
14511: PUSH
14512: LD_INT 2
14514: ST_TO_ADDR
// hc_gallery :=  ;
14515: LD_ADDR_OWVAR 33
14519: PUSH
14520: LD_STRING 
14522: ST_TO_ADDR
// hc_name :=  ;
14523: LD_ADDR_OWVAR 26
14527: PUSH
14528: LD_STRING 
14530: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14531: LD_INT 1
14533: PPUSH
14534: LD_INT 11
14536: PPUSH
14537: LD_INT 10
14539: PPUSH
14540: CALL_OW 380
// un := CreateHuman ;
14544: LD_ADDR_VAR 0 1
14548: PUSH
14549: CALL_OW 44
14553: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14554: LD_VAR 0 1
14558: PPUSH
14559: LD_INT 1
14561: PPUSH
14562: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14566: LD_INT 35
14568: PPUSH
14569: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14573: LD_VAR 0 1
14577: PPUSH
14578: LD_INT 22
14580: PUSH
14581: LD_OWVAR 2
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: PPUSH
14590: CALL_OW 69
14594: PPUSH
14595: LD_VAR 0 1
14599: PPUSH
14600: CALL_OW 74
14604: PPUSH
14605: CALL_OW 115
// until IsDead ( un ) ;
14609: LD_VAR 0 1
14613: PPUSH
14614: CALL_OW 301
14618: IFFALSE 14566
// end ;
14620: PPOPN 1
14622: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14623: LD_EXP 24
14627: PUSH
14628: LD_EXP 64
14632: AND
14633: IFFALSE 14645
14635: GO 14637
14637: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14638: LD_STRING earthquake(getX(game), 0, 32)
14640: PPUSH
14641: CALL_OW 559
14645: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14646: LD_EXP 24
14650: PUSH
14651: LD_EXP 65
14655: AND
14656: IFFALSE 14747
14658: GO 14660
14660: DISABLE
14661: LD_INT 0
14663: PPUSH
// begin enable ;
14664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14665: LD_ADDR_VAR 0 1
14669: PUSH
14670: LD_INT 22
14672: PUSH
14673: LD_OWVAR 2
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 21
14684: PUSH
14685: LD_INT 2
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: LD_INT 33
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: ST_TO_ADDR
// if not tmp then
14712: LD_VAR 0 1
14716: NOT
14717: IFFALSE 14721
// exit ;
14719: GO 14747
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14721: LD_VAR 0 1
14725: PUSH
14726: LD_INT 1
14728: PPUSH
14729: LD_VAR 0 1
14733: PPUSH
14734: CALL_OW 12
14738: ARRAY
14739: PPUSH
14740: LD_INT 1
14742: PPUSH
14743: CALL_OW 234
// end ;
14747: PPOPN 1
14749: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14750: LD_EXP 24
14754: PUSH
14755: LD_EXP 66
14759: AND
14760: IFFALSE 14901
14762: GO 14764
14764: DISABLE
14765: LD_INT 0
14767: PPUSH
14768: PPUSH
14769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_OWVAR 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 25
14789: PUSH
14790: LD_INT 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PPUSH
14801: CALL_OW 69
14805: ST_TO_ADDR
// if not tmp then
14806: LD_VAR 0 3
14810: NOT
14811: IFFALSE 14815
// exit ;
14813: GO 14901
// un := tmp [ rand ( 1 , tmp ) ] ;
14815: LD_ADDR_VAR 0 2
14819: PUSH
14820: LD_VAR 0 3
14824: PUSH
14825: LD_INT 1
14827: PPUSH
14828: LD_VAR 0 3
14832: PPUSH
14833: CALL_OW 12
14837: ARRAY
14838: ST_TO_ADDR
// if Crawls ( un ) then
14839: LD_VAR 0 2
14843: PPUSH
14844: CALL_OW 318
14848: IFFALSE 14859
// ComWalk ( un ) ;
14850: LD_VAR 0 2
14854: PPUSH
14855: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14859: LD_VAR 0 2
14863: PPUSH
14864: LD_INT 9
14866: PPUSH
14867: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14871: LD_INT 28
14873: PPUSH
14874: LD_OWVAR 2
14878: PPUSH
14879: LD_INT 2
14881: PPUSH
14882: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14886: LD_INT 29
14888: PPUSH
14889: LD_OWVAR 2
14893: PPUSH
14894: LD_INT 2
14896: PPUSH
14897: CALL_OW 322
// end ;
14901: PPOPN 3
14903: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14904: LD_EXP 24
14908: PUSH
14909: LD_EXP 67
14913: AND
14914: IFFALSE 15025
14916: GO 14918
14918: DISABLE
14919: LD_INT 0
14921: PPUSH
14922: PPUSH
14923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: LD_INT 22
14931: PUSH
14932: LD_OWVAR 2
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: LD_INT 25
14943: PUSH
14944: LD_INT 1
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PPUSH
14955: CALL_OW 69
14959: ST_TO_ADDR
// if not tmp then
14960: LD_VAR 0 3
14964: NOT
14965: IFFALSE 14969
// exit ;
14967: GO 15025
// un := tmp [ rand ( 1 , tmp ) ] ;
14969: LD_ADDR_VAR 0 2
14973: PUSH
14974: LD_VAR 0 3
14978: PUSH
14979: LD_INT 1
14981: PPUSH
14982: LD_VAR 0 3
14986: PPUSH
14987: CALL_OW 12
14991: ARRAY
14992: ST_TO_ADDR
// if Crawls ( un ) then
14993: LD_VAR 0 2
14997: PPUSH
14998: CALL_OW 318
15002: IFFALSE 15013
// ComWalk ( un ) ;
15004: LD_VAR 0 2
15008: PPUSH
15009: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15013: LD_VAR 0 2
15017: PPUSH
15018: LD_INT 8
15020: PPUSH
15021: CALL_OW 336
// end ;
15025: PPOPN 3
15027: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15028: LD_EXP 24
15032: PUSH
15033: LD_EXP 68
15037: AND
15038: IFFALSE 15182
15040: GO 15042
15042: DISABLE
15043: LD_INT 0
15045: PPUSH
15046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15047: LD_ADDR_VAR 0 2
15051: PUSH
15052: LD_INT 22
15054: PUSH
15055: LD_OWVAR 2
15059: PUSH
15060: EMPTY
15061: LIST
15062: LIST
15063: PUSH
15064: LD_INT 21
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 34
15079: PUSH
15080: LD_INT 12
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 34
15089: PUSH
15090: LD_INT 51
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 34
15099: PUSH
15100: LD_INT 32
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: LIST
15117: PPUSH
15118: CALL_OW 69
15122: ST_TO_ADDR
// if not tmp then
15123: LD_VAR 0 2
15127: NOT
15128: IFFALSE 15132
// exit ;
15130: GO 15182
// for i in tmp do
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_VAR 0 2
15141: PUSH
15142: FOR_IN
15143: IFFALSE 15180
// if GetCargo ( i , mat_artifact ) = 0 then
15145: LD_VAR 0 1
15149: PPUSH
15150: LD_INT 4
15152: PPUSH
15153: CALL_OW 289
15157: PUSH
15158: LD_INT 0
15160: EQUAL
15161: IFFALSE 15178
// SetCargo ( i , mat_siberit , 100 ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: LD_INT 3
15170: PPUSH
15171: LD_INT 100
15173: PPUSH
15174: CALL_OW 290
15178: GO 15142
15180: POP
15181: POP
// end ;
15182: PPOPN 2
15184: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15185: LD_EXP 24
15189: PUSH
15190: LD_EXP 69
15194: AND
15195: IFFALSE 15378
15197: GO 15199
15199: DISABLE
15200: LD_INT 0
15202: PPUSH
15203: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15204: LD_ADDR_VAR 0 2
15208: PUSH
15209: LD_INT 22
15211: PUSH
15212: LD_OWVAR 2
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PPUSH
15221: CALL_OW 69
15225: ST_TO_ADDR
// if not tmp then
15226: LD_VAR 0 2
15230: NOT
15231: IFFALSE 15235
// exit ;
15233: GO 15378
// for i := 1 to 2 do
15235: LD_ADDR_VAR 0 1
15239: PUSH
15240: DOUBLE
15241: LD_INT 1
15243: DEC
15244: ST_TO_ADDR
15245: LD_INT 2
15247: PUSH
15248: FOR_TO
15249: IFFALSE 15376
// begin uc_side := your_side ;
15251: LD_ADDR_OWVAR 20
15255: PUSH
15256: LD_OWVAR 2
15260: ST_TO_ADDR
// uc_nation := nation_american ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 1
15268: ST_TO_ADDR
// vc_chassis := us_morphling ;
15269: LD_ADDR_OWVAR 37
15273: PUSH
15274: LD_INT 5
15276: ST_TO_ADDR
// vc_engine := engine_siberite ;
15277: LD_ADDR_OWVAR 39
15281: PUSH
15282: LD_INT 3
15284: ST_TO_ADDR
// vc_control := control_computer ;
15285: LD_ADDR_OWVAR 38
15289: PUSH
15290: LD_INT 3
15292: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15293: LD_ADDR_OWVAR 40
15297: PUSH
15298: LD_INT 10
15300: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15301: LD_VAR 0 2
15305: PUSH
15306: LD_INT 1
15308: ARRAY
15309: PPUSH
15310: CALL_OW 310
15314: NOT
15315: IFFALSE 15362
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15317: CALL_OW 45
15321: PPUSH
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: CALL_OW 250
15335: PPUSH
15336: LD_VAR 0 2
15340: PUSH
15341: LD_INT 1
15343: ARRAY
15344: PPUSH
15345: CALL_OW 251
15349: PPUSH
15350: LD_INT 12
15352: PPUSH
15353: LD_INT 1
15355: PPUSH
15356: CALL_OW 50
15360: GO 15374
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15362: CALL_OW 45
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 51
// end ;
15374: GO 15248
15376: POP
15377: POP
// end ;
15378: PPOPN 2
15380: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15381: LD_EXP 24
15385: PUSH
15386: LD_EXP 70
15390: AND
15391: IFFALSE 15613
15393: GO 15395
15395: DISABLE
15396: LD_INT 0
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15404: LD_ADDR_VAR 0 6
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: LD_OWVAR 2
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 21
15423: PUSH
15424: LD_INT 1
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 3
15433: PUSH
15434: LD_INT 23
15436: PUSH
15437: LD_INT 0
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: PPUSH
15453: CALL_OW 69
15457: ST_TO_ADDR
// if not tmp then
15458: LD_VAR 0 6
15462: NOT
15463: IFFALSE 15467
// exit ;
15465: GO 15613
// s1 := rand ( 1 , 4 ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_INT 1
15474: PPUSH
15475: LD_INT 4
15477: PPUSH
15478: CALL_OW 12
15482: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15483: LD_ADDR_VAR 0 4
15487: PUSH
15488: LD_VAR 0 6
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PPUSH
15497: LD_VAR 0 2
15501: PPUSH
15502: CALL_OW 259
15506: ST_TO_ADDR
// if s1 = 1 then
15507: LD_VAR 0 2
15511: PUSH
15512: LD_INT 1
15514: EQUAL
15515: IFFALSE 15535
// s2 := rand ( 2 , 4 ) else
15517: LD_ADDR_VAR 0 3
15521: PUSH
15522: LD_INT 2
15524: PPUSH
15525: LD_INT 4
15527: PPUSH
15528: CALL_OW 12
15532: ST_TO_ADDR
15533: GO 15543
// s2 := 1 ;
15535: LD_ADDR_VAR 0 3
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15543: LD_ADDR_VAR 0 5
15547: PUSH
15548: LD_VAR 0 6
15552: PUSH
15553: LD_INT 1
15555: ARRAY
15556: PPUSH
15557: LD_VAR 0 3
15561: PPUSH
15562: CALL_OW 259
15566: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15567: LD_VAR 0 6
15571: PUSH
15572: LD_INT 1
15574: ARRAY
15575: PPUSH
15576: LD_VAR 0 2
15580: PPUSH
15581: LD_VAR 0 5
15585: PPUSH
15586: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15590: LD_VAR 0 6
15594: PUSH
15595: LD_INT 1
15597: ARRAY
15598: PPUSH
15599: LD_VAR 0 3
15603: PPUSH
15604: LD_VAR 0 4
15608: PPUSH
15609: CALL_OW 237
// end ;
15613: PPOPN 6
15615: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15616: LD_EXP 24
15620: PUSH
15621: LD_EXP 71
15625: AND
15626: IFFALSE 15705
15628: GO 15630
15630: DISABLE
15631: LD_INT 0
15633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15634: LD_ADDR_VAR 0 1
15638: PUSH
15639: LD_INT 22
15641: PUSH
15642: LD_OWVAR 2
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 3
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 1
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15679: LD_VAR 0 1
15683: PUSH
15684: LD_INT 1
15686: PPUSH
15687: LD_VAR 0 1
15691: PPUSH
15692: CALL_OW 12
15696: ARRAY
15697: PPUSH
15698: LD_INT 1
15700: PPUSH
15701: CALL_OW 234
// end ;
15705: PPOPN 1
15707: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15708: LD_EXP 24
15712: PUSH
15713: LD_EXP 72
15717: AND
15718: IFFALSE 15830
15720: GO 15722
15722: DISABLE
15723: LD_INT 0
15725: PPUSH
15726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_OWVAR 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 2
15746: PUSH
15747: LD_INT 30
15749: PUSH
15750: LD_INT 27
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 30
15759: PUSH
15760: LD_INT 26
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 30
15769: PUSH
15770: LD_INT 28
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PPUSH
15787: CALL_OW 69
15791: ST_TO_ADDR
// if not tmp then
15792: LD_VAR 0 2
15796: NOT
15797: IFFALSE 15801
// exit ;
15799: GO 15830
// for i in tmp do
15801: LD_ADDR_VAR 0 1
15805: PUSH
15806: LD_VAR 0 2
15810: PUSH
15811: FOR_IN
15812: IFFALSE 15828
// SetLives ( i , 1 ) ;
15814: LD_VAR 0 1
15818: PPUSH
15819: LD_INT 1
15821: PPUSH
15822: CALL_OW 234
15826: GO 15811
15828: POP
15829: POP
// end ;
15830: PPOPN 2
15832: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15833: LD_EXP 24
15837: PUSH
15838: LD_EXP 73
15842: AND
15843: IFFALSE 16130
15845: GO 15847
15847: DISABLE
15848: LD_INT 0
15850: PPUSH
15851: PPUSH
15852: PPUSH
// begin i := rand ( 1 , 7 ) ;
15853: LD_ADDR_VAR 0 1
15857: PUSH
15858: LD_INT 1
15860: PPUSH
15861: LD_INT 7
15863: PPUSH
15864: CALL_OW 12
15868: ST_TO_ADDR
// case i of 1 :
15869: LD_VAR 0 1
15873: PUSH
15874: LD_INT 1
15876: DOUBLE
15877: EQUAL
15878: IFTRUE 15882
15880: GO 15892
15882: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15883: LD_STRING earthquake(getX(game), 0, 32)
15885: PPUSH
15886: CALL_OW 559
15890: GO 16130
15892: LD_INT 2
15894: DOUBLE
15895: EQUAL
15896: IFTRUE 15900
15898: GO 15914
15900: POP
// begin ToLua ( displayStucuk(); ) ;
15901: LD_STRING displayStucuk();
15903: PPUSH
15904: CALL_OW 559
// ResetFog ;
15908: CALL_OW 335
// end ; 3 :
15912: GO 16130
15914: LD_INT 3
15916: DOUBLE
15917: EQUAL
15918: IFTRUE 15922
15920: GO 16026
15922: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15923: LD_ADDR_VAR 0 2
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 25
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PPUSH
15954: CALL_OW 69
15958: ST_TO_ADDR
// if not tmp then
15959: LD_VAR 0 2
15963: NOT
15964: IFFALSE 15968
// exit ;
15966: GO 16130
// un := tmp [ rand ( 1 , tmp ) ] ;
15968: LD_ADDR_VAR 0 3
15972: PUSH
15973: LD_VAR 0 2
15977: PUSH
15978: LD_INT 1
15980: PPUSH
15981: LD_VAR 0 2
15985: PPUSH
15986: CALL_OW 12
15990: ARRAY
15991: ST_TO_ADDR
// if Crawls ( un ) then
15992: LD_VAR 0 3
15996: PPUSH
15997: CALL_OW 318
16001: IFFALSE 16012
// ComWalk ( un ) ;
16003: LD_VAR 0 3
16007: PPUSH
16008: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16012: LD_VAR 0 3
16016: PPUSH
16017: LD_INT 8
16019: PPUSH
16020: CALL_OW 336
// end ; 4 :
16024: GO 16130
16026: LD_INT 4
16028: DOUBLE
16029: EQUAL
16030: IFTRUE 16034
16032: GO 16108
16034: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16035: LD_ADDR_VAR 0 2
16039: PUSH
16040: LD_INT 22
16042: PUSH
16043: LD_OWVAR 2
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: PUSH
16052: LD_INT 30
16054: PUSH
16055: LD_INT 29
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PPUSH
16066: CALL_OW 69
16070: ST_TO_ADDR
// if not tmp then
16071: LD_VAR 0 2
16075: NOT
16076: IFFALSE 16080
// exit ;
16078: GO 16130
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16080: LD_VAR 0 2
16084: PUSH
16085: LD_INT 1
16087: ARRAY
16088: PPUSH
16089: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16093: LD_VAR 0 2
16097: PUSH
16098: LD_INT 1
16100: ARRAY
16101: PPUSH
16102: CALL_OW 65
// end ; 5 .. 7 :
16106: GO 16130
16108: LD_INT 5
16110: DOUBLE
16111: GREATEREQUAL
16112: IFFALSE 16120
16114: LD_INT 7
16116: DOUBLE
16117: LESSEQUAL
16118: IFTRUE 16122
16120: GO 16129
16122: POP
// StreamSibBomb ; end ;
16123: CALL 12367 0 0
16127: GO 16130
16129: POP
// end ;
16130: PPOPN 3
16132: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16133: LD_EXP 24
16137: PUSH
16138: LD_EXP 74
16142: AND
16143: IFFALSE 16299
16145: GO 16147
16147: DISABLE
16148: LD_INT 0
16150: PPUSH
16151: PPUSH
16152: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16153: LD_ADDR_VAR 0 2
16157: PUSH
16158: LD_INT 81
16160: PUSH
16161: LD_OWVAR 2
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 2
16172: PUSH
16173: LD_INT 21
16175: PUSH
16176: LD_INT 1
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: LD_INT 21
16185: PUSH
16186: LD_INT 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PPUSH
16202: CALL_OW 69
16206: ST_TO_ADDR
// if not tmp then
16207: LD_VAR 0 2
16211: NOT
16212: IFFALSE 16216
// exit ;
16214: GO 16299
// p := 0 ;
16216: LD_ADDR_VAR 0 3
16220: PUSH
16221: LD_INT 0
16223: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16224: LD_INT 35
16226: PPUSH
16227: CALL_OW 67
// p := p + 1 ;
16231: LD_ADDR_VAR 0 3
16235: PUSH
16236: LD_VAR 0 3
16240: PUSH
16241: LD_INT 1
16243: PLUS
16244: ST_TO_ADDR
// for i in tmp do
16245: LD_ADDR_VAR 0 1
16249: PUSH
16250: LD_VAR 0 2
16254: PUSH
16255: FOR_IN
16256: IFFALSE 16287
// if GetLives ( i ) < 1000 then
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 256
16267: PUSH
16268: LD_INT 1000
16270: LESS
16271: IFFALSE 16285
// SetLives ( i , 1000 ) ;
16273: LD_VAR 0 1
16277: PPUSH
16278: LD_INT 1000
16280: PPUSH
16281: CALL_OW 234
16285: GO 16255
16287: POP
16288: POP
// until p > 20 ;
16289: LD_VAR 0 3
16293: PUSH
16294: LD_INT 20
16296: GREATER
16297: IFFALSE 16224
// end ;
16299: PPOPN 3
16301: END
// every 0 0$1 trigger StreamModeActive and sTime do
16302: LD_EXP 24
16306: PUSH
16307: LD_EXP 75
16311: AND
16312: IFFALSE 16347
16314: GO 16316
16316: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16317: LD_INT 28
16319: PPUSH
16320: LD_OWVAR 2
16324: PPUSH
16325: LD_INT 2
16327: PPUSH
16328: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16332: LD_INT 30
16334: PPUSH
16335: LD_OWVAR 2
16339: PPUSH
16340: LD_INT 2
16342: PPUSH
16343: CALL_OW 322
// end ;
16347: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16348: LD_EXP 24
16352: PUSH
16353: LD_EXP 76
16357: AND
16358: IFFALSE 16479
16360: GO 16362
16362: DISABLE
16363: LD_INT 0
16365: PPUSH
16366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16367: LD_ADDR_VAR 0 2
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_OWVAR 2
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: PUSH
16384: LD_INT 21
16386: PUSH
16387: LD_INT 1
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 3
16396: PUSH
16397: LD_INT 23
16399: PUSH
16400: LD_INT 0
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: PPUSH
16416: CALL_OW 69
16420: ST_TO_ADDR
// if not tmp then
16421: LD_VAR 0 2
16425: NOT
16426: IFFALSE 16430
// exit ;
16428: GO 16479
// for i in tmp do
16430: LD_ADDR_VAR 0 1
16434: PUSH
16435: LD_VAR 0 2
16439: PUSH
16440: FOR_IN
16441: IFFALSE 16477
// begin if Crawls ( i ) then
16443: LD_VAR 0 1
16447: PPUSH
16448: CALL_OW 318
16452: IFFALSE 16463
// ComWalk ( i ) ;
16454: LD_VAR 0 1
16458: PPUSH
16459: CALL_OW 138
// SetClass ( i , 2 ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: LD_INT 2
16470: PPUSH
16471: CALL_OW 336
// end ;
16475: GO 16440
16477: POP
16478: POP
// end ;
16479: PPOPN 2
16481: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16482: LD_EXP 24
16486: PUSH
16487: LD_EXP 77
16491: AND
16492: IFFALSE 16780
16494: GO 16496
16496: DISABLE
16497: LD_INT 0
16499: PPUSH
16500: PPUSH
16501: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16502: LD_OWVAR 2
16506: PPUSH
16507: LD_INT 9
16509: PPUSH
16510: LD_INT 1
16512: PPUSH
16513: LD_INT 1
16515: PPUSH
16516: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16520: LD_INT 9
16522: PPUSH
16523: LD_OWVAR 2
16527: PPUSH
16528: CALL_OW 343
// uc_side := 9 ;
16532: LD_ADDR_OWVAR 20
16536: PUSH
16537: LD_INT 9
16539: ST_TO_ADDR
// uc_nation := 2 ;
16540: LD_ADDR_OWVAR 21
16544: PUSH
16545: LD_INT 2
16547: ST_TO_ADDR
// hc_name := Dark Warrior ;
16548: LD_ADDR_OWVAR 26
16552: PUSH
16553: LD_STRING Dark Warrior
16555: ST_TO_ADDR
// hc_gallery :=  ;
16556: LD_ADDR_OWVAR 33
16560: PUSH
16561: LD_STRING 
16563: ST_TO_ADDR
// hc_noskilllimit := true ;
16564: LD_ADDR_OWVAR 76
16568: PUSH
16569: LD_INT 1
16571: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16572: LD_ADDR_OWVAR 31
16576: PUSH
16577: LD_INT 30
16579: PUSH
16580: LD_INT 30
16582: PUSH
16583: LD_INT 30
16585: PUSH
16586: LD_INT 30
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: ST_TO_ADDR
// un := CreateHuman ;
16595: LD_ADDR_VAR 0 3
16599: PUSH
16600: CALL_OW 44
16604: ST_TO_ADDR
// hc_noskilllimit := false ;
16605: LD_ADDR_OWVAR 76
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16613: LD_VAR 0 3
16617: PPUSH
16618: LD_INT 1
16620: PPUSH
16621: CALL_OW 51
// ToLua ( playRanger() ) ;
16625: LD_STRING playRanger()
16627: PPUSH
16628: CALL_OW 559
// p := 0 ;
16632: LD_ADDR_VAR 0 2
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16640: LD_INT 35
16642: PPUSH
16643: CALL_OW 67
// p := p + 1 ;
16647: LD_ADDR_VAR 0 2
16651: PUSH
16652: LD_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: PLUS
16660: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16661: LD_VAR 0 3
16665: PPUSH
16666: CALL_OW 256
16670: PUSH
16671: LD_INT 1000
16673: LESS
16674: IFFALSE 16688
// SetLives ( un , 1000 ) ;
16676: LD_VAR 0 3
16680: PPUSH
16681: LD_INT 1000
16683: PPUSH
16684: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16688: LD_VAR 0 3
16692: PPUSH
16693: LD_INT 81
16695: PUSH
16696: LD_OWVAR 2
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 91
16707: PUSH
16708: LD_VAR 0 3
16712: PUSH
16713: LD_INT 30
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: LIST
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PPUSH
16725: CALL_OW 69
16729: PPUSH
16730: LD_VAR 0 3
16734: PPUSH
16735: CALL_OW 74
16739: PPUSH
16740: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16744: LD_VAR 0 2
16748: PUSH
16749: LD_INT 80
16751: GREATER
16752: PUSH
16753: LD_VAR 0 3
16757: PPUSH
16758: CALL_OW 301
16762: OR
16763: IFFALSE 16640
// if un then
16765: LD_VAR 0 3
16769: IFFALSE 16780
// RemoveUnit ( un ) ;
16771: LD_VAR 0 3
16775: PPUSH
16776: CALL_OW 64
// end ;
16780: PPOPN 3
16782: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16783: LD_EXP 78
16787: IFFALSE 16903
16789: GO 16791
16791: DISABLE
16792: LD_INT 0
16794: PPUSH
16795: PPUSH
16796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_INT 81
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 1
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16833: LD_STRING playComputer()
16835: PPUSH
16836: CALL_OW 559
// if not tmp then
16840: LD_VAR 0 2
16844: NOT
16845: IFFALSE 16849
// exit ;
16847: GO 16903
// for i in tmp do
16849: LD_ADDR_VAR 0 1
16853: PUSH
16854: LD_VAR 0 2
16858: PUSH
16859: FOR_IN
16860: IFFALSE 16901
// for j := 1 to 4 do
16862: LD_ADDR_VAR 0 3
16866: PUSH
16867: DOUBLE
16868: LD_INT 1
16870: DEC
16871: ST_TO_ADDR
16872: LD_INT 4
16874: PUSH
16875: FOR_TO
16876: IFFALSE 16897
// SetSkill ( i , j , 10 ) ;
16878: LD_VAR 0 1
16882: PPUSH
16883: LD_VAR 0 3
16887: PPUSH
16888: LD_INT 10
16890: PPUSH
16891: CALL_OW 237
16895: GO 16875
16897: POP
16898: POP
16899: GO 16859
16901: POP
16902: POP
// end ;
16903: PPOPN 3
16905: END
// every 0 0$1 trigger s30 do var i , tmp ;
16906: LD_EXP 79
16910: IFFALSE 16979
16912: GO 16914
16914: DISABLE
16915: LD_INT 0
16917: PPUSH
16918: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16919: LD_ADDR_VAR 0 2
16923: PUSH
16924: LD_INT 22
16926: PUSH
16927: LD_OWVAR 2
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL_OW 69
16940: ST_TO_ADDR
// if not tmp then
16941: LD_VAR 0 2
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 16979
// for i in tmp do
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: FOR_IN
16961: IFFALSE 16977
// SetLives ( i , 300 ) ;
16963: LD_VAR 0 1
16967: PPUSH
16968: LD_INT 300
16970: PPUSH
16971: CALL_OW 234
16975: GO 16960
16977: POP
16978: POP
// end ;
16979: PPOPN 2
16981: END
// every 0 0$1 trigger s60 do var i , tmp ;
16982: LD_EXP 80
16986: IFFALSE 17055
16988: GO 16990
16990: DISABLE
16991: LD_INT 0
16993: PPUSH
16994: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16995: LD_ADDR_VAR 0 2
16999: PUSH
17000: LD_INT 22
17002: PUSH
17003: LD_OWVAR 2
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PPUSH
17012: CALL_OW 69
17016: ST_TO_ADDR
// if not tmp then
17017: LD_VAR 0 2
17021: NOT
17022: IFFALSE 17026
// exit ;
17024: GO 17055
// for i in tmp do
17026: LD_ADDR_VAR 0 1
17030: PUSH
17031: LD_VAR 0 2
17035: PUSH
17036: FOR_IN
17037: IFFALSE 17053
// SetLives ( i , 600 ) ;
17039: LD_VAR 0 1
17043: PPUSH
17044: LD_INT 600
17046: PPUSH
17047: CALL_OW 234
17051: GO 17036
17053: POP
17054: POP
// end ;
17055: PPOPN 2
17057: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17058: LD_INT 0
17060: PPUSH
// case cmd of 301 :
17061: LD_VAR 0 1
17065: PUSH
17066: LD_INT 301
17068: DOUBLE
17069: EQUAL
17070: IFTRUE 17074
17072: GO 17106
17074: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17075: LD_VAR 0 6
17079: PPUSH
17080: LD_VAR 0 7
17084: PPUSH
17085: LD_VAR 0 8
17089: PPUSH
17090: LD_VAR 0 4
17094: PPUSH
17095: LD_VAR 0 5
17099: PPUSH
17100: CALL 18315 0 5
17104: GO 17227
17106: LD_INT 302
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17151
17114: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17115: LD_VAR 0 6
17119: PPUSH
17120: LD_VAR 0 7
17124: PPUSH
17125: LD_VAR 0 8
17129: PPUSH
17130: LD_VAR 0 9
17134: PPUSH
17135: LD_VAR 0 4
17139: PPUSH
17140: LD_VAR 0 5
17144: PPUSH
17145: CALL 18406 0 6
17149: GO 17227
17151: LD_INT 303
17153: DOUBLE
17154: EQUAL
17155: IFTRUE 17159
17157: GO 17196
17159: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17160: LD_VAR 0 6
17164: PPUSH
17165: LD_VAR 0 7
17169: PPUSH
17170: LD_VAR 0 8
17174: PPUSH
17175: LD_VAR 0 9
17179: PPUSH
17180: LD_VAR 0 4
17184: PPUSH
17185: LD_VAR 0 5
17189: PPUSH
17190: CALL 17232 0 6
17194: GO 17227
17196: LD_INT 304
17198: DOUBLE
17199: EQUAL
17200: IFTRUE 17204
17202: GO 17226
17204: POP
// hHackTeleport ( unit , x , y ) ; end ;
17205: LD_VAR 0 2
17209: PPUSH
17210: LD_VAR 0 4
17214: PPUSH
17215: LD_VAR 0 5
17219: PPUSH
17220: CALL 18999 0 3
17224: GO 17227
17226: POP
// end ;
17227: LD_VAR 0 12
17231: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17232: LD_INT 0
17234: PPUSH
17235: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17236: LD_VAR 0 1
17240: PUSH
17241: LD_INT 1
17243: LESS
17244: PUSH
17245: LD_VAR 0 1
17249: PUSH
17250: LD_INT 3
17252: GREATER
17253: OR
17254: PUSH
17255: LD_VAR 0 5
17259: PPUSH
17260: LD_VAR 0 6
17264: PPUSH
17265: CALL_OW 428
17269: OR
17270: IFFALSE 17274
// exit ;
17272: GO 18002
// uc_side := your_side ;
17274: LD_ADDR_OWVAR 20
17278: PUSH
17279: LD_OWVAR 2
17283: ST_TO_ADDR
// uc_nation := nation ;
17284: LD_ADDR_OWVAR 21
17288: PUSH
17289: LD_VAR 0 1
17293: ST_TO_ADDR
// bc_level = 1 ;
17294: LD_ADDR_OWVAR 43
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
// case btype of 1 :
17302: LD_VAR 0 2
17306: PUSH
17307: LD_INT 1
17309: DOUBLE
17310: EQUAL
17311: IFTRUE 17315
17313: GO 17326
17315: POP
// bc_type := b_depot ; 2 :
17316: LD_ADDR_OWVAR 42
17320: PUSH
17321: LD_INT 0
17323: ST_TO_ADDR
17324: GO 17946
17326: LD_INT 2
17328: DOUBLE
17329: EQUAL
17330: IFTRUE 17334
17332: GO 17345
17334: POP
// bc_type := b_warehouse ; 3 :
17335: LD_ADDR_OWVAR 42
17339: PUSH
17340: LD_INT 1
17342: ST_TO_ADDR
17343: GO 17946
17345: LD_INT 3
17347: DOUBLE
17348: EQUAL
17349: IFTRUE 17353
17351: GO 17364
17353: POP
// bc_type := b_lab ; 4 .. 9 :
17354: LD_ADDR_OWVAR 42
17358: PUSH
17359: LD_INT 6
17361: ST_TO_ADDR
17362: GO 17946
17364: LD_INT 4
17366: DOUBLE
17367: GREATEREQUAL
17368: IFFALSE 17376
17370: LD_INT 9
17372: DOUBLE
17373: LESSEQUAL
17374: IFTRUE 17378
17376: GO 17438
17378: POP
// begin bc_type := b_lab_half ;
17379: LD_ADDR_OWVAR 42
17383: PUSH
17384: LD_INT 7
17386: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17387: LD_ADDR_OWVAR 44
17391: PUSH
17392: LD_INT 10
17394: PUSH
17395: LD_INT 11
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: LD_INT 15
17403: PUSH
17404: LD_INT 14
17406: PUSH
17407: LD_INT 13
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: PUSH
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 3
17425: MINUS
17426: ARRAY
17427: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17428: LD_ADDR_OWVAR 45
17432: PUSH
17433: LD_INT 9
17435: ST_TO_ADDR
// end ; 10 .. 13 :
17436: GO 17946
17438: LD_INT 10
17440: DOUBLE
17441: GREATEREQUAL
17442: IFFALSE 17450
17444: LD_INT 13
17446: DOUBLE
17447: LESSEQUAL
17448: IFTRUE 17452
17450: GO 17529
17452: POP
// begin bc_type := b_lab_full ;
17453: LD_ADDR_OWVAR 42
17457: PUSH
17458: LD_INT 8
17460: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17461: LD_ADDR_OWVAR 44
17465: PUSH
17466: LD_INT 10
17468: PUSH
17469: LD_INT 12
17471: PUSH
17472: LD_INT 14
17474: PUSH
17475: LD_INT 13
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: PUSH
17484: LD_VAR 0 2
17488: PUSH
17489: LD_INT 9
17491: MINUS
17492: ARRAY
17493: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17494: LD_ADDR_OWVAR 45
17498: PUSH
17499: LD_INT 11
17501: PUSH
17502: LD_INT 15
17504: PUSH
17505: LD_INT 12
17507: PUSH
17508: LD_INT 15
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: PUSH
17517: LD_VAR 0 2
17521: PUSH
17522: LD_INT 9
17524: MINUS
17525: ARRAY
17526: ST_TO_ADDR
// end ; 14 :
17527: GO 17946
17529: LD_INT 14
17531: DOUBLE
17532: EQUAL
17533: IFTRUE 17537
17535: GO 17548
17537: POP
// bc_type := b_workshop ; 15 :
17538: LD_ADDR_OWVAR 42
17542: PUSH
17543: LD_INT 2
17545: ST_TO_ADDR
17546: GO 17946
17548: LD_INT 15
17550: DOUBLE
17551: EQUAL
17552: IFTRUE 17556
17554: GO 17567
17556: POP
// bc_type := b_factory ; 16 :
17557: LD_ADDR_OWVAR 42
17561: PUSH
17562: LD_INT 3
17564: ST_TO_ADDR
17565: GO 17946
17567: LD_INT 16
17569: DOUBLE
17570: EQUAL
17571: IFTRUE 17575
17573: GO 17586
17575: POP
// bc_type := b_ext_gun ; 17 :
17576: LD_ADDR_OWVAR 42
17580: PUSH
17581: LD_INT 17
17583: ST_TO_ADDR
17584: GO 17946
17586: LD_INT 17
17588: DOUBLE
17589: EQUAL
17590: IFTRUE 17594
17592: GO 17622
17594: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17595: LD_ADDR_OWVAR 42
17599: PUSH
17600: LD_INT 19
17602: PUSH
17603: LD_INT 23
17605: PUSH
17606: LD_INT 19
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: PUSH
17614: LD_VAR 0 1
17618: ARRAY
17619: ST_TO_ADDR
17620: GO 17946
17622: LD_INT 18
17624: DOUBLE
17625: EQUAL
17626: IFTRUE 17630
17628: GO 17641
17630: POP
// bc_type := b_ext_radar ; 19 :
17631: LD_ADDR_OWVAR 42
17635: PUSH
17636: LD_INT 20
17638: ST_TO_ADDR
17639: GO 17946
17641: LD_INT 19
17643: DOUBLE
17644: EQUAL
17645: IFTRUE 17649
17647: GO 17660
17649: POP
// bc_type := b_ext_radio ; 20 :
17650: LD_ADDR_OWVAR 42
17654: PUSH
17655: LD_INT 22
17657: ST_TO_ADDR
17658: GO 17946
17660: LD_INT 20
17662: DOUBLE
17663: EQUAL
17664: IFTRUE 17668
17666: GO 17679
17668: POP
// bc_type := b_ext_siberium ; 21 :
17669: LD_ADDR_OWVAR 42
17673: PUSH
17674: LD_INT 21
17676: ST_TO_ADDR
17677: GO 17946
17679: LD_INT 21
17681: DOUBLE
17682: EQUAL
17683: IFTRUE 17687
17685: GO 17698
17687: POP
// bc_type := b_ext_computer ; 22 :
17688: LD_ADDR_OWVAR 42
17692: PUSH
17693: LD_INT 24
17695: ST_TO_ADDR
17696: GO 17946
17698: LD_INT 22
17700: DOUBLE
17701: EQUAL
17702: IFTRUE 17706
17704: GO 17717
17706: POP
// bc_type := b_ext_track ; 23 :
17707: LD_ADDR_OWVAR 42
17711: PUSH
17712: LD_INT 16
17714: ST_TO_ADDR
17715: GO 17946
17717: LD_INT 23
17719: DOUBLE
17720: EQUAL
17721: IFTRUE 17725
17723: GO 17736
17725: POP
// bc_type := b_ext_laser ; 24 :
17726: LD_ADDR_OWVAR 42
17730: PUSH
17731: LD_INT 25
17733: ST_TO_ADDR
17734: GO 17946
17736: LD_INT 24
17738: DOUBLE
17739: EQUAL
17740: IFTRUE 17744
17742: GO 17755
17744: POP
// bc_type := b_control_tower ; 25 :
17745: LD_ADDR_OWVAR 42
17749: PUSH
17750: LD_INT 36
17752: ST_TO_ADDR
17753: GO 17946
17755: LD_INT 25
17757: DOUBLE
17758: EQUAL
17759: IFTRUE 17763
17761: GO 17774
17763: POP
// bc_type := b_breastwork ; 26 :
17764: LD_ADDR_OWVAR 42
17768: PUSH
17769: LD_INT 31
17771: ST_TO_ADDR
17772: GO 17946
17774: LD_INT 26
17776: DOUBLE
17777: EQUAL
17778: IFTRUE 17782
17780: GO 17793
17782: POP
// bc_type := b_bunker ; 27 :
17783: LD_ADDR_OWVAR 42
17787: PUSH
17788: LD_INT 32
17790: ST_TO_ADDR
17791: GO 17946
17793: LD_INT 27
17795: DOUBLE
17796: EQUAL
17797: IFTRUE 17801
17799: GO 17812
17801: POP
// bc_type := b_turret ; 28 :
17802: LD_ADDR_OWVAR 42
17806: PUSH
17807: LD_INT 33
17809: ST_TO_ADDR
17810: GO 17946
17812: LD_INT 28
17814: DOUBLE
17815: EQUAL
17816: IFTRUE 17820
17818: GO 17831
17820: POP
// bc_type := b_armoury ; 29 :
17821: LD_ADDR_OWVAR 42
17825: PUSH
17826: LD_INT 4
17828: ST_TO_ADDR
17829: GO 17946
17831: LD_INT 29
17833: DOUBLE
17834: EQUAL
17835: IFTRUE 17839
17837: GO 17850
17839: POP
// bc_type := b_barracks ; 30 :
17840: LD_ADDR_OWVAR 42
17844: PUSH
17845: LD_INT 5
17847: ST_TO_ADDR
17848: GO 17946
17850: LD_INT 30
17852: DOUBLE
17853: EQUAL
17854: IFTRUE 17858
17856: GO 17869
17858: POP
// bc_type := b_solar_power ; 31 :
17859: LD_ADDR_OWVAR 42
17863: PUSH
17864: LD_INT 27
17866: ST_TO_ADDR
17867: GO 17946
17869: LD_INT 31
17871: DOUBLE
17872: EQUAL
17873: IFTRUE 17877
17875: GO 17888
17877: POP
// bc_type := b_oil_power ; 32 :
17878: LD_ADDR_OWVAR 42
17882: PUSH
17883: LD_INT 26
17885: ST_TO_ADDR
17886: GO 17946
17888: LD_INT 32
17890: DOUBLE
17891: EQUAL
17892: IFTRUE 17896
17894: GO 17907
17896: POP
// bc_type := b_siberite_power ; 33 :
17897: LD_ADDR_OWVAR 42
17901: PUSH
17902: LD_INT 28
17904: ST_TO_ADDR
17905: GO 17946
17907: LD_INT 33
17909: DOUBLE
17910: EQUAL
17911: IFTRUE 17915
17913: GO 17926
17915: POP
// bc_type := b_oil_mine ; 34 :
17916: LD_ADDR_OWVAR 42
17920: PUSH
17921: LD_INT 29
17923: ST_TO_ADDR
17924: GO 17946
17926: LD_INT 34
17928: DOUBLE
17929: EQUAL
17930: IFTRUE 17934
17932: GO 17945
17934: POP
// bc_type := b_siberite_mine ; end ;
17935: LD_ADDR_OWVAR 42
17939: PUSH
17940: LD_INT 30
17942: ST_TO_ADDR
17943: GO 17946
17945: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17946: LD_ADDR_VAR 0 8
17950: PUSH
17951: LD_VAR 0 5
17955: PPUSH
17956: LD_VAR 0 6
17960: PPUSH
17961: LD_VAR 0 3
17965: PPUSH
17966: CALL_OW 47
17970: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17971: LD_OWVAR 42
17975: PUSH
17976: LD_INT 32
17978: PUSH
17979: LD_INT 33
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: IN
17986: IFFALSE 18002
// PlaceWeaponTurret ( b , weapon ) ;
17988: LD_VAR 0 8
17992: PPUSH
17993: LD_VAR 0 4
17997: PPUSH
17998: CALL_OW 431
// end ;
18002: LD_VAR 0 7
18006: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18007: LD_INT 0
18009: PPUSH
18010: PPUSH
18011: PPUSH
18012: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18013: LD_ADDR_VAR 0 4
18017: PUSH
18018: LD_INT 22
18020: PUSH
18021: LD_OWVAR 2
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: LD_INT 30
18035: PUSH
18036: LD_INT 0
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 30
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: LIST
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PPUSH
18062: CALL_OW 69
18066: ST_TO_ADDR
// if not tmp then
18067: LD_VAR 0 4
18071: NOT
18072: IFFALSE 18076
// exit ;
18074: GO 18135
// for i in tmp do
18076: LD_ADDR_VAR 0 2
18080: PUSH
18081: LD_VAR 0 4
18085: PUSH
18086: FOR_IN
18087: IFFALSE 18133
// for j = 1 to 3 do
18089: LD_ADDR_VAR 0 3
18093: PUSH
18094: DOUBLE
18095: LD_INT 1
18097: DEC
18098: ST_TO_ADDR
18099: LD_INT 3
18101: PUSH
18102: FOR_TO
18103: IFFALSE 18129
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: CALL_OW 274
18114: PPUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: LD_INT 99999
18122: PPUSH
18123: CALL_OW 277
18127: GO 18102
18129: POP
18130: POP
18131: GO 18086
18133: POP
18134: POP
// end ;
18135: LD_VAR 0 1
18139: RET
// export function hHackSetLevel10 ; var i , j ; begin
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
18144: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18145: LD_ADDR_VAR 0 2
18149: PUSH
18150: LD_INT 21
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL_OW 69
18164: PUSH
18165: FOR_IN
18166: IFFALSE 18218
// if IsSelected ( i ) then
18168: LD_VAR 0 2
18172: PPUSH
18173: CALL_OW 306
18177: IFFALSE 18216
// begin for j := 1 to 4 do
18179: LD_ADDR_VAR 0 3
18183: PUSH
18184: DOUBLE
18185: LD_INT 1
18187: DEC
18188: ST_TO_ADDR
18189: LD_INT 4
18191: PUSH
18192: FOR_TO
18193: IFFALSE 18214
// SetSkill ( i , j , 10 ) ;
18195: LD_VAR 0 2
18199: PPUSH
18200: LD_VAR 0 3
18204: PPUSH
18205: LD_INT 10
18207: PPUSH
18208: CALL_OW 237
18212: GO 18192
18214: POP
18215: POP
// end ;
18216: GO 18165
18218: POP
18219: POP
// end ;
18220: LD_VAR 0 1
18224: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18225: LD_INT 0
18227: PPUSH
18228: PPUSH
18229: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18230: LD_ADDR_VAR 0 2
18234: PUSH
18235: LD_INT 22
18237: PUSH
18238: LD_OWVAR 2
18242: PUSH
18243: EMPTY
18244: LIST
18245: LIST
18246: PUSH
18247: LD_INT 21
18249: PUSH
18250: LD_INT 1
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: PUSH
18257: EMPTY
18258: LIST
18259: LIST
18260: PPUSH
18261: CALL_OW 69
18265: PUSH
18266: FOR_IN
18267: IFFALSE 18308
// begin for j := 1 to 4 do
18269: LD_ADDR_VAR 0 3
18273: PUSH
18274: DOUBLE
18275: LD_INT 1
18277: DEC
18278: ST_TO_ADDR
18279: LD_INT 4
18281: PUSH
18282: FOR_TO
18283: IFFALSE 18304
// SetSkill ( i , j , 10 ) ;
18285: LD_VAR 0 2
18289: PPUSH
18290: LD_VAR 0 3
18294: PPUSH
18295: LD_INT 10
18297: PPUSH
18298: CALL_OW 237
18302: GO 18282
18304: POP
18305: POP
// end ;
18306: GO 18266
18308: POP
18309: POP
// end ;
18310: LD_VAR 0 1
18314: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18315: LD_INT 0
18317: PPUSH
// uc_side := your_side ;
18318: LD_ADDR_OWVAR 20
18322: PUSH
18323: LD_OWVAR 2
18327: ST_TO_ADDR
// uc_nation := nation ;
18328: LD_ADDR_OWVAR 21
18332: PUSH
18333: LD_VAR 0 1
18337: ST_TO_ADDR
// InitHc ;
18338: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18342: LD_INT 0
18344: PPUSH
18345: LD_VAR 0 2
18349: PPUSH
18350: LD_VAR 0 3
18354: PPUSH
18355: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18359: LD_VAR 0 4
18363: PPUSH
18364: LD_VAR 0 5
18368: PPUSH
18369: CALL_OW 428
18373: PUSH
18374: LD_INT 0
18376: EQUAL
18377: IFFALSE 18401
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18379: CALL_OW 44
18383: PPUSH
18384: LD_VAR 0 4
18388: PPUSH
18389: LD_VAR 0 5
18393: PPUSH
18394: LD_INT 1
18396: PPUSH
18397: CALL_OW 48
// end ;
18401: LD_VAR 0 6
18405: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18406: LD_INT 0
18408: PPUSH
18409: PPUSH
// uc_side := your_side ;
18410: LD_ADDR_OWVAR 20
18414: PUSH
18415: LD_OWVAR 2
18419: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18420: LD_VAR 0 1
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: LD_INT 2
18430: PUSH
18431: LD_INT 3
18433: PUSH
18434: LD_INT 4
18436: PUSH
18437: LD_INT 5
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: IN
18447: IFFALSE 18459
// uc_nation := nation_american else
18449: LD_ADDR_OWVAR 21
18453: PUSH
18454: LD_INT 1
18456: ST_TO_ADDR
18457: GO 18502
// if chassis in [ 11 , 12 , 13 , 14 ] then
18459: LD_VAR 0 1
18463: PUSH
18464: LD_INT 11
18466: PUSH
18467: LD_INT 12
18469: PUSH
18470: LD_INT 13
18472: PUSH
18473: LD_INT 14
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: IN
18482: IFFALSE 18494
// uc_nation := nation_arabian else
18484: LD_ADDR_OWVAR 21
18488: PUSH
18489: LD_INT 2
18491: ST_TO_ADDR
18492: GO 18502
// uc_nation := nation_russian ;
18494: LD_ADDR_OWVAR 21
18498: PUSH
18499: LD_INT 3
18501: ST_TO_ADDR
// vc_chassis := chassis ;
18502: LD_ADDR_OWVAR 37
18506: PUSH
18507: LD_VAR 0 1
18511: ST_TO_ADDR
// vc_engine := engine ;
18512: LD_ADDR_OWVAR 39
18516: PUSH
18517: LD_VAR 0 2
18521: ST_TO_ADDR
// vc_control := control ;
18522: LD_ADDR_OWVAR 38
18526: PUSH
18527: LD_VAR 0 3
18531: ST_TO_ADDR
// vc_weapon := weapon ;
18532: LD_ADDR_OWVAR 40
18536: PUSH
18537: LD_VAR 0 4
18541: ST_TO_ADDR
// un := CreateVehicle ;
18542: LD_ADDR_VAR 0 8
18546: PUSH
18547: CALL_OW 45
18551: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18552: LD_VAR 0 8
18556: PPUSH
18557: LD_INT 0
18559: PPUSH
18560: LD_INT 5
18562: PPUSH
18563: CALL_OW 12
18567: PPUSH
18568: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18572: LD_VAR 0 8
18576: PPUSH
18577: LD_VAR 0 5
18581: PPUSH
18582: LD_VAR 0 6
18586: PPUSH
18587: LD_INT 1
18589: PPUSH
18590: CALL_OW 48
// end ;
18594: LD_VAR 0 7
18598: RET
// export hInvincible ; every 1 do
18599: GO 18601
18601: DISABLE
// hInvincible := [ ] ;
18602: LD_ADDR_EXP 81
18606: PUSH
18607: EMPTY
18608: ST_TO_ADDR
18609: END
// every 10 do var i ;
18610: GO 18612
18612: DISABLE
18613: LD_INT 0
18615: PPUSH
// begin enable ;
18616: ENABLE
// if not hInvincible then
18617: LD_EXP 81
18621: NOT
18622: IFFALSE 18626
// exit ;
18624: GO 18670
// for i in hInvincible do
18626: LD_ADDR_VAR 0 1
18630: PUSH
18631: LD_EXP 81
18635: PUSH
18636: FOR_IN
18637: IFFALSE 18668
// if GetLives ( i ) < 1000 then
18639: LD_VAR 0 1
18643: PPUSH
18644: CALL_OW 256
18648: PUSH
18649: LD_INT 1000
18651: LESS
18652: IFFALSE 18666
// SetLives ( i , 1000 ) ;
18654: LD_VAR 0 1
18658: PPUSH
18659: LD_INT 1000
18661: PPUSH
18662: CALL_OW 234
18666: GO 18636
18668: POP
18669: POP
// end ;
18670: PPOPN 1
18672: END
// export function hHackInvincible ; var i ; begin
18673: LD_INT 0
18675: PPUSH
18676: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18677: LD_ADDR_VAR 0 2
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 21
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 21
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: PPUSH
18710: CALL_OW 69
18714: PUSH
18715: FOR_IN
18716: IFFALSE 18777
// if IsSelected ( i ) then
18718: LD_VAR 0 2
18722: PPUSH
18723: CALL_OW 306
18727: IFFALSE 18775
// begin if i in hInvincible then
18729: LD_VAR 0 2
18733: PUSH
18734: LD_EXP 81
18738: IN
18739: IFFALSE 18759
// hInvincible := hInvincible diff i else
18741: LD_ADDR_EXP 81
18745: PUSH
18746: LD_EXP 81
18750: PUSH
18751: LD_VAR 0 2
18755: DIFF
18756: ST_TO_ADDR
18757: GO 18775
// hInvincible := hInvincible union i ;
18759: LD_ADDR_EXP 81
18763: PUSH
18764: LD_EXP 81
18768: PUSH
18769: LD_VAR 0 2
18773: UNION
18774: ST_TO_ADDR
// end ;
18775: GO 18715
18777: POP
18778: POP
// end ;
18779: LD_VAR 0 1
18783: RET
// export function hHackInvisible ; var i , j ; begin
18784: LD_INT 0
18786: PPUSH
18787: PPUSH
18788: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18789: LD_ADDR_VAR 0 2
18793: PUSH
18794: LD_INT 21
18796: PUSH
18797: LD_INT 1
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PPUSH
18804: CALL_OW 69
18808: PUSH
18809: FOR_IN
18810: IFFALSE 18834
// if IsSelected ( i ) then
18812: LD_VAR 0 2
18816: PPUSH
18817: CALL_OW 306
18821: IFFALSE 18832
// ComForceInvisible ( i ) ;
18823: LD_VAR 0 2
18827: PPUSH
18828: CALL_OW 496
18832: GO 18809
18834: POP
18835: POP
// end ;
18836: LD_VAR 0 1
18840: RET
// export function hHackChangeYourSide ; begin
18841: LD_INT 0
18843: PPUSH
// if your_side = 8 then
18844: LD_OWVAR 2
18848: PUSH
18849: LD_INT 8
18851: EQUAL
18852: IFFALSE 18864
// your_side := 0 else
18854: LD_ADDR_OWVAR 2
18858: PUSH
18859: LD_INT 0
18861: ST_TO_ADDR
18862: GO 18878
// your_side := your_side + 1 ;
18864: LD_ADDR_OWVAR 2
18868: PUSH
18869: LD_OWVAR 2
18873: PUSH
18874: LD_INT 1
18876: PLUS
18877: ST_TO_ADDR
// end ;
18878: LD_VAR 0 1
18882: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18883: LD_INT 0
18885: PPUSH
18886: PPUSH
18887: PPUSH
// for i in all_units do
18888: LD_ADDR_VAR 0 2
18892: PUSH
18893: LD_OWVAR 3
18897: PUSH
18898: FOR_IN
18899: IFFALSE 18977
// if IsSelected ( i ) then
18901: LD_VAR 0 2
18905: PPUSH
18906: CALL_OW 306
18910: IFFALSE 18975
// begin j := GetSide ( i ) ;
18912: LD_ADDR_VAR 0 3
18916: PUSH
18917: LD_VAR 0 2
18921: PPUSH
18922: CALL_OW 255
18926: ST_TO_ADDR
// if j = 8 then
18927: LD_VAR 0 3
18931: PUSH
18932: LD_INT 8
18934: EQUAL
18935: IFFALSE 18947
// j := 0 else
18937: LD_ADDR_VAR 0 3
18941: PUSH
18942: LD_INT 0
18944: ST_TO_ADDR
18945: GO 18961
// j := j + 1 ;
18947: LD_ADDR_VAR 0 3
18951: PUSH
18952: LD_VAR 0 3
18956: PUSH
18957: LD_INT 1
18959: PLUS
18960: ST_TO_ADDR
// SetSide ( i , j ) ;
18961: LD_VAR 0 2
18965: PPUSH
18966: LD_VAR 0 3
18970: PPUSH
18971: CALL_OW 235
// end ;
18975: GO 18898
18977: POP
18978: POP
// end ;
18979: LD_VAR 0 1
18983: RET
// export function hHackFog ; begin
18984: LD_INT 0
18986: PPUSH
// FogOff ( true ) ;
18987: LD_INT 1
18989: PPUSH
18990: CALL_OW 344
// end ;
18994: LD_VAR 0 1
18998: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18999: LD_INT 0
19001: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
19002: LD_VAR 0 1
19006: PPUSH
19007: LD_VAR 0 2
19011: PPUSH
19012: LD_VAR 0 3
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: LD_INT 1
19022: PPUSH
19023: CALL_OW 483
// CenterOnXY ( x , y ) ;
19027: LD_VAR 0 2
19031: PPUSH
19032: LD_VAR 0 3
19036: PPUSH
19037: CALL_OW 84
// end ;
19041: LD_VAR 0 4
19045: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19046: LD_INT 0
19048: PPUSH
19049: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19050: LD_VAR 0 1
19054: NOT
19055: PUSH
19056: LD_VAR 0 2
19060: PPUSH
19061: LD_VAR 0 3
19065: PPUSH
19066: CALL_OW 488
19070: NOT
19071: OR
19072: PUSH
19073: LD_VAR 0 1
19077: PPUSH
19078: CALL_OW 266
19082: PUSH
19083: LD_INT 3
19085: NONEQUAL
19086: PUSH
19087: LD_VAR 0 1
19091: PPUSH
19092: CALL_OW 247
19096: PUSH
19097: LD_INT 1
19099: EQUAL
19100: NOT
19101: AND
19102: OR
19103: IFFALSE 19107
// exit ;
19105: GO 19256
// if GetType ( factory ) = unit_human then
19107: LD_VAR 0 1
19111: PPUSH
19112: CALL_OW 247
19116: PUSH
19117: LD_INT 1
19119: EQUAL
19120: IFFALSE 19137
// factory := IsInUnit ( factory ) ;
19122: LD_ADDR_VAR 0 1
19126: PUSH
19127: LD_VAR 0 1
19131: PPUSH
19132: CALL_OW 310
19136: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 266
19146: PUSH
19147: LD_INT 3
19149: NONEQUAL
19150: IFFALSE 19154
// exit ;
19152: GO 19256
// if HexInfo ( x , y ) = factory then
19154: LD_VAR 0 2
19158: PPUSH
19159: LD_VAR 0 3
19163: PPUSH
19164: CALL_OW 428
19168: PUSH
19169: LD_VAR 0 1
19173: EQUAL
19174: IFFALSE 19201
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19176: LD_ADDR_EXP 82
19180: PUSH
19181: LD_EXP 82
19185: PPUSH
19186: LD_VAR 0 1
19190: PPUSH
19191: LD_INT 0
19193: PPUSH
19194: CALL_OW 1
19198: ST_TO_ADDR
19199: GO 19252
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19201: LD_ADDR_EXP 82
19205: PUSH
19206: LD_EXP 82
19210: PPUSH
19211: LD_VAR 0 1
19215: PPUSH
19216: LD_VAR 0 1
19220: PPUSH
19221: CALL_OW 255
19225: PUSH
19226: LD_VAR 0 1
19230: PUSH
19231: LD_VAR 0 2
19235: PUSH
19236: LD_VAR 0 3
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: PPUSH
19247: CALL_OW 1
19251: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19252: CALL 19261 0 0
// end ;
19256: LD_VAR 0 4
19260: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
19265: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19266: LD_STRING resetFactoryWaypoint();
19268: PPUSH
19269: CALL_OW 559
// if factoryWaypoints then
19273: LD_EXP 82
19277: IFFALSE 19403
// begin list := PrepareArray ( factoryWaypoints ) ;
19279: LD_ADDR_VAR 0 3
19283: PUSH
19284: LD_EXP 82
19288: PPUSH
19289: CALL 65888 0 1
19293: ST_TO_ADDR
// for i := 1 to list do
19294: LD_ADDR_VAR 0 2
19298: PUSH
19299: DOUBLE
19300: LD_INT 1
19302: DEC
19303: ST_TO_ADDR
19304: LD_VAR 0 3
19308: PUSH
19309: FOR_TO
19310: IFFALSE 19401
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19312: LD_STRING setFactoryWaypointXY(
19314: PUSH
19315: LD_VAR 0 3
19319: PUSH
19320: LD_VAR 0 2
19324: ARRAY
19325: PUSH
19326: LD_INT 1
19328: ARRAY
19329: STR
19330: PUSH
19331: LD_STRING ,
19333: STR
19334: PUSH
19335: LD_VAR 0 3
19339: PUSH
19340: LD_VAR 0 2
19344: ARRAY
19345: PUSH
19346: LD_INT 2
19348: ARRAY
19349: STR
19350: PUSH
19351: LD_STRING ,
19353: STR
19354: PUSH
19355: LD_VAR 0 3
19359: PUSH
19360: LD_VAR 0 2
19364: ARRAY
19365: PUSH
19366: LD_INT 3
19368: ARRAY
19369: STR
19370: PUSH
19371: LD_STRING ,
19373: STR
19374: PUSH
19375: LD_VAR 0 3
19379: PUSH
19380: LD_VAR 0 2
19384: ARRAY
19385: PUSH
19386: LD_INT 4
19388: ARRAY
19389: STR
19390: PUSH
19391: LD_STRING )
19393: STR
19394: PPUSH
19395: CALL_OW 559
19399: GO 19309
19401: POP
19402: POP
// end ; end ;
19403: LD_VAR 0 1
19407: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19408: LD_INT 0
19410: PPUSH
// if HexInfo ( x , y ) = warehouse then
19411: LD_VAR 0 2
19415: PPUSH
19416: LD_VAR 0 3
19420: PPUSH
19421: CALL_OW 428
19425: PUSH
19426: LD_VAR 0 1
19430: EQUAL
19431: IFFALSE 19458
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19433: LD_ADDR_EXP 83
19437: PUSH
19438: LD_EXP 83
19442: PPUSH
19443: LD_VAR 0 1
19447: PPUSH
19448: LD_INT 0
19450: PPUSH
19451: CALL_OW 1
19455: ST_TO_ADDR
19456: GO 19509
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19458: LD_ADDR_EXP 83
19462: PUSH
19463: LD_EXP 83
19467: PPUSH
19468: LD_VAR 0 1
19472: PPUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 255
19482: PUSH
19483: LD_VAR 0 1
19487: PUSH
19488: LD_VAR 0 2
19492: PUSH
19493: LD_VAR 0 3
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 1
19508: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19509: CALL 19518 0 0
// end ;
19513: LD_VAR 0 4
19517: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19518: LD_INT 0
19520: PPUSH
19521: PPUSH
19522: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19523: LD_STRING resetWarehouseGatheringPoints();
19525: PPUSH
19526: CALL_OW 559
// if warehouseGatheringPoints then
19530: LD_EXP 83
19534: IFFALSE 19660
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: LD_EXP 83
19545: PPUSH
19546: CALL 65888 0 1
19550: ST_TO_ADDR
// for i := 1 to list do
19551: LD_ADDR_VAR 0 2
19555: PUSH
19556: DOUBLE
19557: LD_INT 1
19559: DEC
19560: ST_TO_ADDR
19561: LD_VAR 0 3
19565: PUSH
19566: FOR_TO
19567: IFFALSE 19658
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19569: LD_STRING setWarehouseGatheringPointXY(
19571: PUSH
19572: LD_VAR 0 3
19576: PUSH
19577: LD_VAR 0 2
19581: ARRAY
19582: PUSH
19583: LD_INT 1
19585: ARRAY
19586: STR
19587: PUSH
19588: LD_STRING ,
19590: STR
19591: PUSH
19592: LD_VAR 0 3
19596: PUSH
19597: LD_VAR 0 2
19601: ARRAY
19602: PUSH
19603: LD_INT 2
19605: ARRAY
19606: STR
19607: PUSH
19608: LD_STRING ,
19610: STR
19611: PUSH
19612: LD_VAR 0 3
19616: PUSH
19617: LD_VAR 0 2
19621: ARRAY
19622: PUSH
19623: LD_INT 3
19625: ARRAY
19626: STR
19627: PUSH
19628: LD_STRING ,
19630: STR
19631: PUSH
19632: LD_VAR 0 3
19636: PUSH
19637: LD_VAR 0 2
19641: ARRAY
19642: PUSH
19643: LD_INT 4
19645: ARRAY
19646: STR
19647: PUSH
19648: LD_STRING )
19650: STR
19651: PPUSH
19652: CALL_OW 559
19656: GO 19566
19658: POP
19659: POP
// end ; end ;
19660: LD_VAR 0 1
19664: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19665: LD_EXP 83
19669: IFFALSE 20354
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
19678: PPUSH
19679: PPUSH
19680: PPUSH
19681: PPUSH
19682: PPUSH
19683: PPUSH
19684: PPUSH
// begin enable ;
19685: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19686: LD_ADDR_VAR 0 3
19690: PUSH
19691: LD_EXP 83
19695: PPUSH
19696: CALL 65888 0 1
19700: ST_TO_ADDR
// if not list then
19701: LD_VAR 0 3
19705: NOT
19706: IFFALSE 19710
// exit ;
19708: GO 20354
// for i := 1 to list do
19710: LD_ADDR_VAR 0 1
19714: PUSH
19715: DOUBLE
19716: LD_INT 1
19718: DEC
19719: ST_TO_ADDR
19720: LD_VAR 0 3
19724: PUSH
19725: FOR_TO
19726: IFFALSE 20352
// begin depot := list [ i ] [ 2 ] ;
19728: LD_ADDR_VAR 0 8
19732: PUSH
19733: LD_VAR 0 3
19737: PUSH
19738: LD_VAR 0 1
19742: ARRAY
19743: PUSH
19744: LD_INT 2
19746: ARRAY
19747: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19748: LD_ADDR_VAR 0 5
19752: PUSH
19753: LD_VAR 0 3
19757: PUSH
19758: LD_VAR 0 1
19762: ARRAY
19763: PUSH
19764: LD_INT 1
19766: ARRAY
19767: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19768: LD_VAR 0 8
19772: PPUSH
19773: CALL_OW 301
19777: PUSH
19778: LD_VAR 0 5
19782: PUSH
19783: LD_VAR 0 8
19787: PPUSH
19788: CALL_OW 255
19792: NONEQUAL
19793: OR
19794: IFFALSE 19823
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19796: LD_ADDR_EXP 83
19800: PUSH
19801: LD_EXP 83
19805: PPUSH
19806: LD_VAR 0 8
19810: PPUSH
19811: LD_INT 0
19813: PPUSH
19814: CALL_OW 1
19818: ST_TO_ADDR
// exit ;
19819: POP
19820: POP
19821: GO 20354
// end ; x := list [ i ] [ 3 ] ;
19823: LD_ADDR_VAR 0 6
19827: PUSH
19828: LD_VAR 0 3
19832: PUSH
19833: LD_VAR 0 1
19837: ARRAY
19838: PUSH
19839: LD_INT 3
19841: ARRAY
19842: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19843: LD_ADDR_VAR 0 7
19847: PUSH
19848: LD_VAR 0 3
19852: PUSH
19853: LD_VAR 0 1
19857: ARRAY
19858: PUSH
19859: LD_INT 4
19861: ARRAY
19862: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19863: LD_ADDR_VAR 0 9
19867: PUSH
19868: LD_VAR 0 6
19872: PPUSH
19873: LD_VAR 0 7
19877: PPUSH
19878: LD_INT 16
19880: PPUSH
19881: CALL 64476 0 3
19885: ST_TO_ADDR
// if not cratesNearbyPoint then
19886: LD_VAR 0 9
19890: NOT
19891: IFFALSE 19897
// exit ;
19893: POP
19894: POP
19895: GO 20354
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19897: LD_ADDR_VAR 0 4
19901: PUSH
19902: LD_INT 22
19904: PUSH
19905: LD_VAR 0 5
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 3
19916: PUSH
19917: LD_INT 60
19919: PUSH
19920: EMPTY
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 91
19929: PUSH
19930: LD_VAR 0 8
19934: PUSH
19935: LD_INT 6
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 25
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 25
19958: PUSH
19959: LD_INT 16
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: EMPTY
19967: LIST
19968: LIST
19969: LIST
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: PPUSH
19977: CALL_OW 69
19981: PUSH
19982: LD_VAR 0 8
19986: PPUSH
19987: CALL_OW 313
19991: PPUSH
19992: LD_INT 3
19994: PUSH
19995: LD_INT 60
19997: PUSH
19998: EMPTY
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: LD_INT 25
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 25
20020: PUSH
20021: LD_INT 16
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PPUSH
20037: CALL_OW 72
20041: UNION
20042: ST_TO_ADDR
// if tmp then
20043: LD_VAR 0 4
20047: IFFALSE 20127
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20049: LD_ADDR_VAR 0 4
20053: PUSH
20054: LD_VAR 0 4
20058: PPUSH
20059: LD_INT 3
20061: PPUSH
20062: CALL 62445 0 2
20066: ST_TO_ADDR
// for j in tmp do
20067: LD_ADDR_VAR 0 2
20071: PUSH
20072: LD_VAR 0 4
20076: PUSH
20077: FOR_IN
20078: IFFALSE 20121
// begin if IsInUnit ( j ) then
20080: LD_VAR 0 2
20084: PPUSH
20085: CALL_OW 310
20089: IFFALSE 20100
// ComExit ( j ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: CALL 62528 0 1
// AddComCollect ( j , x , y ) ;
20100: LD_VAR 0 2
20104: PPUSH
20105: LD_VAR 0 6
20109: PPUSH
20110: LD_VAR 0 7
20114: PPUSH
20115: CALL_OW 177
// end ;
20119: GO 20077
20121: POP
20122: POP
// exit ;
20123: POP
20124: POP
20125: GO 20354
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20127: LD_ADDR_VAR 0 4
20131: PUSH
20132: LD_INT 22
20134: PUSH
20135: LD_VAR 0 5
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 91
20146: PUSH
20147: LD_VAR 0 8
20151: PUSH
20152: LD_INT 8
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: PUSH
20160: LD_INT 2
20162: PUSH
20163: LD_INT 34
20165: PUSH
20166: LD_INT 12
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 34
20175: PUSH
20176: LD_INT 51
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 34
20185: PUSH
20186: LD_INT 32
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 34
20195: PUSH
20196: LD_INT 89
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: EMPTY
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: PPUSH
20215: CALL_OW 69
20219: ST_TO_ADDR
// if tmp then
20220: LD_VAR 0 4
20224: IFFALSE 20350
// begin for j in tmp do
20226: LD_ADDR_VAR 0 2
20230: PUSH
20231: LD_VAR 0 4
20235: PUSH
20236: FOR_IN
20237: IFFALSE 20348
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20239: LD_VAR 0 2
20243: PPUSH
20244: CALL_OW 262
20248: PUSH
20249: LD_INT 3
20251: EQUAL
20252: PUSH
20253: LD_VAR 0 2
20257: PPUSH
20258: CALL_OW 261
20262: PUSH
20263: LD_INT 20
20265: GREATER
20266: OR
20267: PUSH
20268: LD_VAR 0 2
20272: PPUSH
20273: CALL_OW 314
20277: NOT
20278: AND
20279: PUSH
20280: LD_VAR 0 2
20284: PPUSH
20285: CALL_OW 263
20289: PUSH
20290: LD_INT 1
20292: NONEQUAL
20293: PUSH
20294: LD_VAR 0 2
20298: PPUSH
20299: CALL_OW 311
20303: OR
20304: AND
20305: IFFALSE 20346
// begin ComCollect ( j , x , y ) ;
20307: LD_VAR 0 2
20311: PPUSH
20312: LD_VAR 0 6
20316: PPUSH
20317: LD_VAR 0 7
20321: PPUSH
20322: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20326: LD_VAR 0 2
20330: PPUSH
20331: LD_VAR 0 8
20335: PPUSH
20336: CALL_OW 172
// exit ;
20340: POP
20341: POP
20342: POP
20343: POP
20344: GO 20354
// end ;
20346: GO 20236
20348: POP
20349: POP
// end ; end ;
20350: GO 19725
20352: POP
20353: POP
// end ; end_of_file
20354: PPOPN 9
20356: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20357: LD_VAR 0 1
20361: PUSH
20362: LD_INT 200
20364: DOUBLE
20365: GREATEREQUAL
20366: IFFALSE 20374
20368: LD_INT 299
20370: DOUBLE
20371: LESSEQUAL
20372: IFTRUE 20376
20374: GO 20408
20376: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20377: LD_VAR 0 1
20381: PPUSH
20382: LD_VAR 0 2
20386: PPUSH
20387: LD_VAR 0 3
20391: PPUSH
20392: LD_VAR 0 4
20396: PPUSH
20397: LD_VAR 0 5
20401: PPUSH
20402: CALL 20896 0 5
20406: GO 20485
20408: LD_INT 300
20410: DOUBLE
20411: GREATEREQUAL
20412: IFFALSE 20420
20414: LD_INT 399
20416: DOUBLE
20417: LESSEQUAL
20418: IFTRUE 20422
20420: GO 20484
20422: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20423: LD_VAR 0 1
20427: PPUSH
20428: LD_VAR 0 2
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: LD_VAR 0 4
20442: PPUSH
20443: LD_VAR 0 5
20447: PPUSH
20448: LD_VAR 0 6
20452: PPUSH
20453: LD_VAR 0 7
20457: PPUSH
20458: LD_VAR 0 8
20462: PPUSH
20463: LD_VAR 0 9
20467: PPUSH
20468: LD_VAR 0 10
20472: PPUSH
20473: LD_VAR 0 11
20477: PPUSH
20478: CALL 17058 0 11
20482: GO 20485
20484: POP
// end ;
20485: PPOPN 11
20487: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20488: LD_VAR 0 1
20492: PPUSH
20493: LD_VAR 0 2
20497: PPUSH
20498: LD_VAR 0 3
20502: PPUSH
20503: LD_VAR 0 4
20507: PPUSH
20508: LD_VAR 0 5
20512: PPUSH
20513: CALL 20632 0 5
// end ; end_of_file
20517: PPOPN 5
20519: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20520: LD_INT 0
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL_OW 264
20535: PUSH
20536: LD_INT 91
20538: EQUAL
20539: IFFALSE 20611
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20541: LD_INT 68
20543: PPUSH
20544: LD_VAR 0 1
20548: PPUSH
20549: CALL_OW 255
20553: PPUSH
20554: CALL_OW 321
20558: PUSH
20559: LD_INT 2
20561: EQUAL
20562: IFFALSE 20574
// eff := 70 else
20564: LD_ADDR_VAR 0 4
20568: PUSH
20569: LD_INT 70
20571: ST_TO_ADDR
20572: GO 20582
// eff := 30 ;
20574: LD_ADDR_VAR 0 4
20578: PUSH
20579: LD_INT 30
20581: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 250
20591: PPUSH
20592: LD_VAR 0 1
20596: PPUSH
20597: CALL_OW 251
20601: PPUSH
20602: LD_VAR 0 4
20606: PPUSH
20607: CALL_OW 495
// end ; end ;
20611: LD_VAR 0 2
20615: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20616: LD_INT 0
20618: PPUSH
// end ;
20619: LD_VAR 0 4
20623: RET
// export function SOS_Command ( cmd ) ; begin
20624: LD_INT 0
20626: PPUSH
// end ;
20627: LD_VAR 0 2
20631: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20632: LD_INT 0
20634: PPUSH
// end ;
20635: LD_VAR 0 6
20639: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20640: LD_INT 0
20642: PPUSH
20643: PPUSH
// if not vehicle or not factory then
20644: LD_VAR 0 1
20648: NOT
20649: PUSH
20650: LD_VAR 0 2
20654: NOT
20655: OR
20656: IFFALSE 20660
// exit ;
20658: GO 20891
// if factoryWaypoints >= factory then
20660: LD_EXP 82
20664: PUSH
20665: LD_VAR 0 2
20669: GREATEREQUAL
20670: IFFALSE 20891
// if factoryWaypoints [ factory ] then
20672: LD_EXP 82
20676: PUSH
20677: LD_VAR 0 2
20681: ARRAY
20682: IFFALSE 20891
// begin if GetControl ( vehicle ) = control_manual then
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 263
20693: PUSH
20694: LD_INT 1
20696: EQUAL
20697: IFFALSE 20778
// begin driver := IsDrivenBy ( vehicle ) ;
20699: LD_ADDR_VAR 0 4
20703: PUSH
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 311
20713: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20714: LD_VAR 0 4
20718: PPUSH
20719: LD_EXP 82
20723: PUSH
20724: LD_VAR 0 2
20728: ARRAY
20729: PUSH
20730: LD_INT 3
20732: ARRAY
20733: PPUSH
20734: LD_EXP 82
20738: PUSH
20739: LD_VAR 0 2
20743: ARRAY
20744: PUSH
20745: LD_INT 4
20747: ARRAY
20748: PPUSH
20749: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20753: LD_VAR 0 4
20757: PPUSH
20758: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20762: LD_VAR 0 4
20766: PPUSH
20767: LD_VAR 0 2
20771: PPUSH
20772: CALL_OW 180
// end else
20776: GO 20891
// if GetControl ( vehicle ) = control_remote then
20778: LD_VAR 0 1
20782: PPUSH
20783: CALL_OW 263
20787: PUSH
20788: LD_INT 2
20790: EQUAL
20791: IFFALSE 20852
// begin wait ( 0 0$2 ) ;
20793: LD_INT 70
20795: PPUSH
20796: CALL_OW 67
// if Connect ( vehicle ) then
20800: LD_VAR 0 1
20804: PPUSH
20805: CALL 32749 0 1
20809: IFFALSE 20850
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20811: LD_VAR 0 1
20815: PPUSH
20816: LD_EXP 82
20820: PUSH
20821: LD_VAR 0 2
20825: ARRAY
20826: PUSH
20827: LD_INT 3
20829: ARRAY
20830: PPUSH
20831: LD_EXP 82
20835: PUSH
20836: LD_VAR 0 2
20840: ARRAY
20841: PUSH
20842: LD_INT 4
20844: ARRAY
20845: PPUSH
20846: CALL_OW 171
// end else
20850: GO 20891
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20852: LD_VAR 0 1
20856: PPUSH
20857: LD_EXP 82
20861: PUSH
20862: LD_VAR 0 2
20866: ARRAY
20867: PUSH
20868: LD_INT 3
20870: ARRAY
20871: PPUSH
20872: LD_EXP 82
20876: PUSH
20877: LD_VAR 0 2
20881: ARRAY
20882: PUSH
20883: LD_INT 4
20885: ARRAY
20886: PPUSH
20887: CALL_OW 171
// end ; end ;
20891: LD_VAR 0 3
20895: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20896: LD_INT 0
20898: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20899: LD_VAR 0 1
20903: PUSH
20904: LD_INT 250
20906: EQUAL
20907: PUSH
20908: LD_VAR 0 2
20912: PPUSH
20913: CALL_OW 264
20917: PUSH
20918: LD_INT 81
20920: EQUAL
20921: AND
20922: IFFALSE 20943
// MinerPlaceMine ( unit , x , y ) ;
20924: LD_VAR 0 2
20928: PPUSH
20929: LD_VAR 0 4
20933: PPUSH
20934: LD_VAR 0 5
20938: PPUSH
20939: CALL 23328 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20943: LD_VAR 0 1
20947: PUSH
20948: LD_INT 251
20950: EQUAL
20951: PUSH
20952: LD_VAR 0 2
20956: PPUSH
20957: CALL_OW 264
20961: PUSH
20962: LD_INT 81
20964: EQUAL
20965: AND
20966: IFFALSE 20987
// MinerDetonateMine ( unit , x , y ) ;
20968: LD_VAR 0 2
20972: PPUSH
20973: LD_VAR 0 4
20977: PPUSH
20978: LD_VAR 0 5
20982: PPUSH
20983: CALL 23603 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20987: LD_VAR 0 1
20991: PUSH
20992: LD_INT 252
20994: EQUAL
20995: PUSH
20996: LD_VAR 0 2
21000: PPUSH
21001: CALL_OW 264
21005: PUSH
21006: LD_INT 81
21008: EQUAL
21009: AND
21010: IFFALSE 21031
// MinerCreateMinefield ( unit , x , y ) ;
21012: LD_VAR 0 2
21016: PPUSH
21017: LD_VAR 0 4
21021: PPUSH
21022: LD_VAR 0 5
21026: PPUSH
21027: CALL 24020 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21031: LD_VAR 0 1
21035: PUSH
21036: LD_INT 253
21038: EQUAL
21039: PUSH
21040: LD_VAR 0 2
21044: PPUSH
21045: CALL_OW 257
21049: PUSH
21050: LD_INT 5
21052: EQUAL
21053: AND
21054: IFFALSE 21075
// ComBinocular ( unit , x , y ) ;
21056: LD_VAR 0 2
21060: PPUSH
21061: LD_VAR 0 4
21065: PPUSH
21066: LD_VAR 0 5
21070: PPUSH
21071: CALL 24389 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21075: LD_VAR 0 1
21079: PUSH
21080: LD_INT 254
21082: EQUAL
21083: PUSH
21084: LD_VAR 0 2
21088: PPUSH
21089: CALL_OW 264
21093: PUSH
21094: LD_INT 99
21096: EQUAL
21097: AND
21098: PUSH
21099: LD_VAR 0 3
21103: PPUSH
21104: CALL_OW 263
21108: PUSH
21109: LD_INT 3
21111: EQUAL
21112: AND
21113: IFFALSE 21129
// HackDestroyVehicle ( unit , selectedUnit ) ;
21115: LD_VAR 0 2
21119: PPUSH
21120: LD_VAR 0 3
21124: PPUSH
21125: CALL 22692 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21129: LD_VAR 0 1
21133: PUSH
21134: LD_INT 255
21136: EQUAL
21137: PUSH
21138: LD_VAR 0 2
21142: PPUSH
21143: CALL_OW 264
21147: PUSH
21148: LD_INT 14
21150: PUSH
21151: LD_INT 53
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: IN
21158: AND
21159: PUSH
21160: LD_VAR 0 4
21164: PPUSH
21165: LD_VAR 0 5
21169: PPUSH
21170: CALL_OW 488
21174: AND
21175: IFFALSE 21199
// CutTreeXYR ( unit , x , y , 12 ) ;
21177: LD_VAR 0 2
21181: PPUSH
21182: LD_VAR 0 4
21186: PPUSH
21187: LD_VAR 0 5
21191: PPUSH
21192: LD_INT 12
21194: PPUSH
21195: CALL 21262 0 4
// if cmd = 256 then
21199: LD_VAR 0 1
21203: PUSH
21204: LD_INT 256
21206: EQUAL
21207: IFFALSE 21228
// SetFactoryWaypoint ( unit , x , y ) ;
21209: LD_VAR 0 2
21213: PPUSH
21214: LD_VAR 0 4
21218: PPUSH
21219: LD_VAR 0 5
21223: PPUSH
21224: CALL 19046 0 3
// if cmd = 257 then
21228: LD_VAR 0 1
21232: PUSH
21233: LD_INT 257
21235: EQUAL
21236: IFFALSE 21257
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21238: LD_VAR 0 2
21242: PPUSH
21243: LD_VAR 0 4
21247: PPUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: CALL 19408 0 3
// end ;
21257: LD_VAR 0 6
21261: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21262: LD_INT 0
21264: PPUSH
21265: PPUSH
21266: PPUSH
21267: PPUSH
21268: PPUSH
21269: PPUSH
21270: PPUSH
21271: PPUSH
21272: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21273: LD_VAR 0 1
21277: NOT
21278: PUSH
21279: LD_VAR 0 2
21283: PPUSH
21284: LD_VAR 0 3
21288: PPUSH
21289: CALL_OW 488
21293: NOT
21294: OR
21295: PUSH
21296: LD_VAR 0 4
21300: NOT
21301: OR
21302: IFFALSE 21306
// exit ;
21304: GO 21646
// list := [ ] ;
21306: LD_ADDR_VAR 0 13
21310: PUSH
21311: EMPTY
21312: ST_TO_ADDR
// if x - r < 0 then
21313: LD_VAR 0 2
21317: PUSH
21318: LD_VAR 0 4
21322: MINUS
21323: PUSH
21324: LD_INT 0
21326: LESS
21327: IFFALSE 21339
// min_x := 0 else
21329: LD_ADDR_VAR 0 7
21333: PUSH
21334: LD_INT 0
21336: ST_TO_ADDR
21337: GO 21355
// min_x := x - r ;
21339: LD_ADDR_VAR 0 7
21343: PUSH
21344: LD_VAR 0 2
21348: PUSH
21349: LD_VAR 0 4
21353: MINUS
21354: ST_TO_ADDR
// if y - r < 0 then
21355: LD_VAR 0 3
21359: PUSH
21360: LD_VAR 0 4
21364: MINUS
21365: PUSH
21366: LD_INT 0
21368: LESS
21369: IFFALSE 21381
// min_y := 0 else
21371: LD_ADDR_VAR 0 8
21375: PUSH
21376: LD_INT 0
21378: ST_TO_ADDR
21379: GO 21397
// min_y := y - r ;
21381: LD_ADDR_VAR 0 8
21385: PUSH
21386: LD_VAR 0 3
21390: PUSH
21391: LD_VAR 0 4
21395: MINUS
21396: ST_TO_ADDR
// max_x := x + r ;
21397: LD_ADDR_VAR 0 9
21401: PUSH
21402: LD_VAR 0 2
21406: PUSH
21407: LD_VAR 0 4
21411: PLUS
21412: ST_TO_ADDR
// max_y := y + r ;
21413: LD_ADDR_VAR 0 10
21417: PUSH
21418: LD_VAR 0 3
21422: PUSH
21423: LD_VAR 0 4
21427: PLUS
21428: ST_TO_ADDR
// for _x = min_x to max_x do
21429: LD_ADDR_VAR 0 11
21433: PUSH
21434: DOUBLE
21435: LD_VAR 0 7
21439: DEC
21440: ST_TO_ADDR
21441: LD_VAR 0 9
21445: PUSH
21446: FOR_TO
21447: IFFALSE 21564
// for _y = min_y to max_y do
21449: LD_ADDR_VAR 0 12
21453: PUSH
21454: DOUBLE
21455: LD_VAR 0 8
21459: DEC
21460: ST_TO_ADDR
21461: LD_VAR 0 10
21465: PUSH
21466: FOR_TO
21467: IFFALSE 21560
// begin if not ValidHex ( _x , _y ) then
21469: LD_VAR 0 11
21473: PPUSH
21474: LD_VAR 0 12
21478: PPUSH
21479: CALL_OW 488
21483: NOT
21484: IFFALSE 21488
// continue ;
21486: GO 21466
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21488: LD_VAR 0 11
21492: PPUSH
21493: LD_VAR 0 12
21497: PPUSH
21498: CALL_OW 351
21502: PUSH
21503: LD_VAR 0 11
21507: PPUSH
21508: LD_VAR 0 12
21512: PPUSH
21513: CALL_OW 554
21517: AND
21518: IFFALSE 21558
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21520: LD_ADDR_VAR 0 13
21524: PUSH
21525: LD_VAR 0 13
21529: PPUSH
21530: LD_VAR 0 13
21534: PUSH
21535: LD_INT 1
21537: PLUS
21538: PPUSH
21539: LD_VAR 0 11
21543: PUSH
21544: LD_VAR 0 12
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PPUSH
21553: CALL_OW 2
21557: ST_TO_ADDR
// end ;
21558: GO 21466
21560: POP
21561: POP
21562: GO 21446
21564: POP
21565: POP
// if not list then
21566: LD_VAR 0 13
21570: NOT
21571: IFFALSE 21575
// exit ;
21573: GO 21646
// for i in list do
21575: LD_ADDR_VAR 0 6
21579: PUSH
21580: LD_VAR 0 13
21584: PUSH
21585: FOR_IN
21586: IFFALSE 21644
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21588: LD_VAR 0 1
21592: PPUSH
21593: LD_STRING M
21595: PUSH
21596: LD_VAR 0 6
21600: PUSH
21601: LD_INT 1
21603: ARRAY
21604: PUSH
21605: LD_VAR 0 6
21609: PUSH
21610: LD_INT 2
21612: ARRAY
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: LD_INT 0
21625: PUSH
21626: EMPTY
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: PPUSH
21638: CALL_OW 447
21642: GO 21585
21644: POP
21645: POP
// end ;
21646: LD_VAR 0 5
21650: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21651: LD_EXP 85
21655: NOT
21656: IFFALSE 21706
21658: GO 21660
21660: DISABLE
// begin initHack := true ;
21661: LD_ADDR_EXP 85
21665: PUSH
21666: LD_INT 1
21668: ST_TO_ADDR
// hackTanks := [ ] ;
21669: LD_ADDR_EXP 86
21673: PUSH
21674: EMPTY
21675: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21676: LD_ADDR_EXP 87
21680: PUSH
21681: EMPTY
21682: ST_TO_ADDR
// hackLimit := 3 ;
21683: LD_ADDR_EXP 88
21687: PUSH
21688: LD_INT 3
21690: ST_TO_ADDR
// hackDist := 12 ;
21691: LD_ADDR_EXP 89
21695: PUSH
21696: LD_INT 12
21698: ST_TO_ADDR
// hackCounter := [ ] ;
21699: LD_ADDR_EXP 90
21703: PUSH
21704: EMPTY
21705: ST_TO_ADDR
// end ;
21706: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21707: LD_EXP 85
21711: PUSH
21712: LD_INT 34
21714: PUSH
21715: LD_INT 99
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PPUSH
21722: CALL_OW 69
21726: AND
21727: IFFALSE 21980
21729: GO 21731
21731: DISABLE
21732: LD_INT 0
21734: PPUSH
21735: PPUSH
// begin enable ;
21736: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21737: LD_ADDR_VAR 0 1
21741: PUSH
21742: LD_INT 34
21744: PUSH
21745: LD_INT 99
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PPUSH
21752: CALL_OW 69
21756: PUSH
21757: FOR_IN
21758: IFFALSE 21978
// begin if not i in hackTanks then
21760: LD_VAR 0 1
21764: PUSH
21765: LD_EXP 86
21769: IN
21770: NOT
21771: IFFALSE 21854
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21773: LD_ADDR_EXP 86
21777: PUSH
21778: LD_EXP 86
21782: PPUSH
21783: LD_EXP 86
21787: PUSH
21788: LD_INT 1
21790: PLUS
21791: PPUSH
21792: LD_VAR 0 1
21796: PPUSH
21797: CALL_OW 1
21801: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21802: LD_ADDR_EXP 87
21806: PUSH
21807: LD_EXP 87
21811: PPUSH
21812: LD_EXP 87
21816: PUSH
21817: LD_INT 1
21819: PLUS
21820: PPUSH
21821: EMPTY
21822: PPUSH
21823: CALL_OW 1
21827: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21828: LD_ADDR_EXP 90
21832: PUSH
21833: LD_EXP 90
21837: PPUSH
21838: LD_EXP 90
21842: PUSH
21843: LD_INT 1
21845: PLUS
21846: PPUSH
21847: EMPTY
21848: PPUSH
21849: CALL_OW 1
21853: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21854: LD_VAR 0 1
21858: PPUSH
21859: CALL_OW 302
21863: NOT
21864: IFFALSE 21877
// begin HackUnlinkAll ( i ) ;
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL 21983 0 1
// continue ;
21875: GO 21757
// end ; HackCheckCapturedStatus ( i ) ;
21877: LD_VAR 0 1
21881: PPUSH
21882: CALL 22426 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21886: LD_ADDR_VAR 0 2
21890: PUSH
21891: LD_INT 81
21893: PUSH
21894: LD_VAR 0 1
21898: PPUSH
21899: CALL_OW 255
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 33
21910: PUSH
21911: LD_INT 3
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: PUSH
21918: LD_INT 91
21920: PUSH
21921: LD_VAR 0 1
21925: PUSH
21926: LD_EXP 89
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 50
21938: PUSH
21939: EMPTY
21940: LIST
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: PPUSH
21948: CALL_OW 69
21952: ST_TO_ADDR
// if not tmp then
21953: LD_VAR 0 2
21957: NOT
21958: IFFALSE 21962
// continue ;
21960: GO 21757
// HackLink ( i , tmp ) ;
21962: LD_VAR 0 1
21966: PPUSH
21967: LD_VAR 0 2
21971: PPUSH
21972: CALL 22119 0 2
// end ;
21976: GO 21757
21978: POP
21979: POP
// end ;
21980: PPOPN 2
21982: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21983: LD_INT 0
21985: PPUSH
21986: PPUSH
21987: PPUSH
// if not hack in hackTanks then
21988: LD_VAR 0 1
21992: PUSH
21993: LD_EXP 86
21997: IN
21998: NOT
21999: IFFALSE 22003
// exit ;
22001: GO 22114
// index := GetElementIndex ( hackTanks , hack ) ;
22003: LD_ADDR_VAR 0 4
22007: PUSH
22008: LD_EXP 86
22012: PPUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL 29556 0 2
22022: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22023: LD_EXP 87
22027: PUSH
22028: LD_VAR 0 4
22032: ARRAY
22033: IFFALSE 22114
// begin for i in hackTanksCaptured [ index ] do
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_EXP 87
22044: PUSH
22045: LD_VAR 0 4
22049: ARRAY
22050: PUSH
22051: FOR_IN
22052: IFFALSE 22078
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22054: LD_VAR 0 3
22058: PUSH
22059: LD_INT 1
22061: ARRAY
22062: PPUSH
22063: LD_VAR 0 3
22067: PUSH
22068: LD_INT 2
22070: ARRAY
22071: PPUSH
22072: CALL_OW 235
22076: GO 22051
22078: POP
22079: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22080: LD_ADDR_EXP 87
22084: PUSH
22085: LD_EXP 87
22089: PPUSH
22090: LD_VAR 0 4
22094: PPUSH
22095: EMPTY
22096: PPUSH
22097: CALL_OW 1
22101: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22102: LD_VAR 0 1
22106: PPUSH
22107: LD_INT 0
22109: PPUSH
22110: CALL_OW 505
// end ; end ;
22114: LD_VAR 0 2
22118: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22119: LD_INT 0
22121: PPUSH
22122: PPUSH
22123: PPUSH
// if not hack in hackTanks or not vehicles then
22124: LD_VAR 0 1
22128: PUSH
22129: LD_EXP 86
22133: IN
22134: NOT
22135: PUSH
22136: LD_VAR 0 2
22140: NOT
22141: OR
22142: IFFALSE 22146
// exit ;
22144: GO 22421
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22146: LD_ADDR_VAR 0 2
22150: PUSH
22151: LD_VAR 0 1
22155: PPUSH
22156: LD_VAR 0 2
22160: PPUSH
22161: LD_INT 1
22163: PPUSH
22164: LD_INT 1
22166: PPUSH
22167: CALL 30206 0 4
22171: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22172: LD_ADDR_VAR 0 5
22176: PUSH
22177: LD_EXP 86
22181: PPUSH
22182: LD_VAR 0 1
22186: PPUSH
22187: CALL 29556 0 2
22191: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22192: LD_EXP 87
22196: PUSH
22197: LD_VAR 0 5
22201: ARRAY
22202: PUSH
22203: LD_EXP 88
22207: LESS
22208: IFFALSE 22397
// begin for i := 1 to vehicles do
22210: LD_ADDR_VAR 0 4
22214: PUSH
22215: DOUBLE
22216: LD_INT 1
22218: DEC
22219: ST_TO_ADDR
22220: LD_VAR 0 2
22224: PUSH
22225: FOR_TO
22226: IFFALSE 22395
// begin if hackTanksCaptured [ index ] = hackLimit then
22228: LD_EXP 87
22232: PUSH
22233: LD_VAR 0 5
22237: ARRAY
22238: PUSH
22239: LD_EXP 88
22243: EQUAL
22244: IFFALSE 22248
// break ;
22246: GO 22395
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22248: LD_ADDR_EXP 90
22252: PUSH
22253: LD_EXP 90
22257: PPUSH
22258: LD_VAR 0 5
22262: PPUSH
22263: LD_EXP 90
22267: PUSH
22268: LD_VAR 0 5
22272: ARRAY
22273: PUSH
22274: LD_INT 1
22276: PLUS
22277: PPUSH
22278: CALL_OW 1
22282: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22283: LD_ADDR_EXP 87
22287: PUSH
22288: LD_EXP 87
22292: PPUSH
22293: LD_VAR 0 5
22297: PUSH
22298: LD_EXP 87
22302: PUSH
22303: LD_VAR 0 5
22307: ARRAY
22308: PUSH
22309: LD_INT 1
22311: PLUS
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PPUSH
22317: LD_VAR 0 2
22321: PUSH
22322: LD_VAR 0 4
22326: ARRAY
22327: PUSH
22328: LD_VAR 0 2
22332: PUSH
22333: LD_VAR 0 4
22337: ARRAY
22338: PPUSH
22339: CALL_OW 255
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PPUSH
22348: CALL 29771 0 3
22352: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22353: LD_VAR 0 2
22357: PUSH
22358: LD_VAR 0 4
22362: ARRAY
22363: PPUSH
22364: LD_VAR 0 1
22368: PPUSH
22369: CALL_OW 255
22373: PPUSH
22374: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22378: LD_VAR 0 2
22382: PUSH
22383: LD_VAR 0 4
22387: ARRAY
22388: PPUSH
22389: CALL_OW 141
// end ;
22393: GO 22225
22395: POP
22396: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22397: LD_VAR 0 1
22401: PPUSH
22402: LD_EXP 87
22406: PUSH
22407: LD_VAR 0 5
22411: ARRAY
22412: PUSH
22413: LD_INT 0
22415: PLUS
22416: PPUSH
22417: CALL_OW 505
// end ;
22421: LD_VAR 0 3
22425: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22426: LD_INT 0
22428: PPUSH
22429: PPUSH
22430: PPUSH
22431: PPUSH
// if not hack in hackTanks then
22432: LD_VAR 0 1
22436: PUSH
22437: LD_EXP 86
22441: IN
22442: NOT
22443: IFFALSE 22447
// exit ;
22445: GO 22687
// index := GetElementIndex ( hackTanks , hack ) ;
22447: LD_ADDR_VAR 0 4
22451: PUSH
22452: LD_EXP 86
22456: PPUSH
22457: LD_VAR 0 1
22461: PPUSH
22462: CALL 29556 0 2
22466: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22467: LD_ADDR_VAR 0 3
22471: PUSH
22472: DOUBLE
22473: LD_EXP 87
22477: PUSH
22478: LD_VAR 0 4
22482: ARRAY
22483: INC
22484: ST_TO_ADDR
22485: LD_INT 1
22487: PUSH
22488: FOR_DOWNTO
22489: IFFALSE 22661
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22491: LD_ADDR_VAR 0 5
22495: PUSH
22496: LD_EXP 87
22500: PUSH
22501: LD_VAR 0 4
22505: ARRAY
22506: PUSH
22507: LD_VAR 0 3
22511: ARRAY
22512: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22513: LD_VAR 0 5
22517: PUSH
22518: LD_INT 1
22520: ARRAY
22521: PPUSH
22522: CALL_OW 302
22526: NOT
22527: PUSH
22528: LD_VAR 0 5
22532: PUSH
22533: LD_INT 1
22535: ARRAY
22536: PPUSH
22537: CALL_OW 255
22541: PUSH
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 255
22551: NONEQUAL
22552: OR
22553: IFFALSE 22659
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22555: LD_VAR 0 5
22559: PUSH
22560: LD_INT 1
22562: ARRAY
22563: PPUSH
22564: CALL_OW 305
22568: PUSH
22569: LD_VAR 0 5
22573: PUSH
22574: LD_INT 1
22576: ARRAY
22577: PPUSH
22578: CALL_OW 255
22582: PUSH
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 255
22592: EQUAL
22593: AND
22594: IFFALSE 22618
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22596: LD_VAR 0 5
22600: PUSH
22601: LD_INT 1
22603: ARRAY
22604: PPUSH
22605: LD_VAR 0 5
22609: PUSH
22610: LD_INT 2
22612: ARRAY
22613: PPUSH
22614: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22618: LD_ADDR_EXP 87
22622: PUSH
22623: LD_EXP 87
22627: PPUSH
22628: LD_VAR 0 4
22632: PPUSH
22633: LD_EXP 87
22637: PUSH
22638: LD_VAR 0 4
22642: ARRAY
22643: PPUSH
22644: LD_VAR 0 3
22648: PPUSH
22649: CALL_OW 3
22653: PPUSH
22654: CALL_OW 1
22658: ST_TO_ADDR
// end ; end ;
22659: GO 22488
22661: POP
22662: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22663: LD_VAR 0 1
22667: PPUSH
22668: LD_EXP 87
22672: PUSH
22673: LD_VAR 0 4
22677: ARRAY
22678: PUSH
22679: LD_INT 0
22681: PLUS
22682: PPUSH
22683: CALL_OW 505
// end ;
22687: LD_VAR 0 2
22691: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22692: LD_INT 0
22694: PPUSH
22695: PPUSH
22696: PPUSH
22697: PPUSH
// if not hack in hackTanks then
22698: LD_VAR 0 1
22702: PUSH
22703: LD_EXP 86
22707: IN
22708: NOT
22709: IFFALSE 22713
// exit ;
22711: GO 22798
// index := GetElementIndex ( hackTanks , hack ) ;
22713: LD_ADDR_VAR 0 5
22717: PUSH
22718: LD_EXP 86
22722: PPUSH
22723: LD_VAR 0 1
22727: PPUSH
22728: CALL 29556 0 2
22732: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22733: LD_ADDR_VAR 0 4
22737: PUSH
22738: DOUBLE
22739: LD_INT 1
22741: DEC
22742: ST_TO_ADDR
22743: LD_EXP 87
22747: PUSH
22748: LD_VAR 0 5
22752: ARRAY
22753: PUSH
22754: FOR_TO
22755: IFFALSE 22796
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22757: LD_EXP 87
22761: PUSH
22762: LD_VAR 0 5
22766: ARRAY
22767: PUSH
22768: LD_VAR 0 4
22772: ARRAY
22773: PUSH
22774: LD_INT 1
22776: ARRAY
22777: PUSH
22778: LD_VAR 0 2
22782: EQUAL
22783: IFFALSE 22794
// KillUnit ( vehicle ) ;
22785: LD_VAR 0 2
22789: PPUSH
22790: CALL_OW 66
22794: GO 22754
22796: POP
22797: POP
// end ;
22798: LD_VAR 0 3
22802: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22803: LD_EXP 91
22807: NOT
22808: IFFALSE 22843
22810: GO 22812
22812: DISABLE
// begin initMiner := true ;
22813: LD_ADDR_EXP 91
22817: PUSH
22818: LD_INT 1
22820: ST_TO_ADDR
// minersList := [ ] ;
22821: LD_ADDR_EXP 92
22825: PUSH
22826: EMPTY
22827: ST_TO_ADDR
// minerMinesList := [ ] ;
22828: LD_ADDR_EXP 93
22832: PUSH
22833: EMPTY
22834: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22835: LD_ADDR_EXP 94
22839: PUSH
22840: LD_INT 5
22842: ST_TO_ADDR
// end ;
22843: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22844: LD_EXP 91
22848: PUSH
22849: LD_INT 34
22851: PUSH
22852: LD_INT 81
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PPUSH
22859: CALL_OW 69
22863: AND
22864: IFFALSE 23325
22866: GO 22868
22868: DISABLE
22869: LD_INT 0
22871: PPUSH
22872: PPUSH
22873: PPUSH
22874: PPUSH
// begin enable ;
22875: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22876: LD_ADDR_VAR 0 1
22880: PUSH
22881: LD_INT 34
22883: PUSH
22884: LD_INT 81
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PPUSH
22891: CALL_OW 69
22895: PUSH
22896: FOR_IN
22897: IFFALSE 22969
// begin if not i in minersList then
22899: LD_VAR 0 1
22903: PUSH
22904: LD_EXP 92
22908: IN
22909: NOT
22910: IFFALSE 22967
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22912: LD_ADDR_EXP 92
22916: PUSH
22917: LD_EXP 92
22921: PPUSH
22922: LD_EXP 92
22926: PUSH
22927: LD_INT 1
22929: PLUS
22930: PPUSH
22931: LD_VAR 0 1
22935: PPUSH
22936: CALL_OW 1
22940: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22941: LD_ADDR_EXP 93
22945: PUSH
22946: LD_EXP 93
22950: PPUSH
22951: LD_EXP 93
22955: PUSH
22956: LD_INT 1
22958: PLUS
22959: PPUSH
22960: EMPTY
22961: PPUSH
22962: CALL_OW 1
22966: ST_TO_ADDR
// end end ;
22967: GO 22896
22969: POP
22970: POP
// for i := minerMinesList downto 1 do
22971: LD_ADDR_VAR 0 1
22975: PUSH
22976: DOUBLE
22977: LD_EXP 93
22981: INC
22982: ST_TO_ADDR
22983: LD_INT 1
22985: PUSH
22986: FOR_DOWNTO
22987: IFFALSE 23323
// begin if IsLive ( minersList [ i ] ) then
22989: LD_EXP 92
22993: PUSH
22994: LD_VAR 0 1
22998: ARRAY
22999: PPUSH
23000: CALL_OW 300
23004: IFFALSE 23032
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23006: LD_EXP 92
23010: PUSH
23011: LD_VAR 0 1
23015: ARRAY
23016: PPUSH
23017: LD_EXP 93
23021: PUSH
23022: LD_VAR 0 1
23026: ARRAY
23027: PPUSH
23028: CALL_OW 505
// if not minerMinesList [ i ] then
23032: LD_EXP 93
23036: PUSH
23037: LD_VAR 0 1
23041: ARRAY
23042: NOT
23043: IFFALSE 23047
// continue ;
23045: GO 22986
// for j := minerMinesList [ i ] downto 1 do
23047: LD_ADDR_VAR 0 2
23051: PUSH
23052: DOUBLE
23053: LD_EXP 93
23057: PUSH
23058: LD_VAR 0 1
23062: ARRAY
23063: INC
23064: ST_TO_ADDR
23065: LD_INT 1
23067: PUSH
23068: FOR_DOWNTO
23069: IFFALSE 23319
// begin side := GetSide ( minersList [ i ] ) ;
23071: LD_ADDR_VAR 0 3
23075: PUSH
23076: LD_EXP 92
23080: PUSH
23081: LD_VAR 0 1
23085: ARRAY
23086: PPUSH
23087: CALL_OW 255
23091: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23092: LD_ADDR_VAR 0 4
23096: PUSH
23097: LD_EXP 93
23101: PUSH
23102: LD_VAR 0 1
23106: ARRAY
23107: PUSH
23108: LD_VAR 0 2
23112: ARRAY
23113: PUSH
23114: LD_INT 1
23116: ARRAY
23117: PPUSH
23118: LD_EXP 93
23122: PUSH
23123: LD_VAR 0 1
23127: ARRAY
23128: PUSH
23129: LD_VAR 0 2
23133: ARRAY
23134: PUSH
23135: LD_INT 2
23137: ARRAY
23138: PPUSH
23139: CALL_OW 428
23143: ST_TO_ADDR
// if not tmp then
23144: LD_VAR 0 4
23148: NOT
23149: IFFALSE 23153
// continue ;
23151: GO 23068
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23153: LD_VAR 0 4
23157: PUSH
23158: LD_INT 81
23160: PUSH
23161: LD_VAR 0 3
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PPUSH
23170: CALL_OW 69
23174: IN
23175: PUSH
23176: LD_EXP 93
23180: PUSH
23181: LD_VAR 0 1
23185: ARRAY
23186: PUSH
23187: LD_VAR 0 2
23191: ARRAY
23192: PUSH
23193: LD_INT 1
23195: ARRAY
23196: PPUSH
23197: LD_EXP 93
23201: PUSH
23202: LD_VAR 0 1
23206: ARRAY
23207: PUSH
23208: LD_VAR 0 2
23212: ARRAY
23213: PUSH
23214: LD_INT 2
23216: ARRAY
23217: PPUSH
23218: CALL_OW 458
23222: AND
23223: IFFALSE 23317
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23225: LD_EXP 93
23229: PUSH
23230: LD_VAR 0 1
23234: ARRAY
23235: PUSH
23236: LD_VAR 0 2
23240: ARRAY
23241: PUSH
23242: LD_INT 1
23244: ARRAY
23245: PPUSH
23246: LD_EXP 93
23250: PUSH
23251: LD_VAR 0 1
23255: ARRAY
23256: PUSH
23257: LD_VAR 0 2
23261: ARRAY
23262: PUSH
23263: LD_INT 2
23265: ARRAY
23266: PPUSH
23267: LD_VAR 0 3
23271: PPUSH
23272: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23276: LD_ADDR_EXP 93
23280: PUSH
23281: LD_EXP 93
23285: PPUSH
23286: LD_VAR 0 1
23290: PPUSH
23291: LD_EXP 93
23295: PUSH
23296: LD_VAR 0 1
23300: ARRAY
23301: PPUSH
23302: LD_VAR 0 2
23306: PPUSH
23307: CALL_OW 3
23311: PPUSH
23312: CALL_OW 1
23316: ST_TO_ADDR
// end ; end ;
23317: GO 23068
23319: POP
23320: POP
// end ;
23321: GO 22986
23323: POP
23324: POP
// end ;
23325: PPOPN 4
23327: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23328: LD_INT 0
23330: PPUSH
23331: PPUSH
// result := false ;
23332: LD_ADDR_VAR 0 4
23336: PUSH
23337: LD_INT 0
23339: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23340: LD_VAR 0 1
23344: PPUSH
23345: CALL_OW 264
23349: PUSH
23350: LD_INT 81
23352: EQUAL
23353: NOT
23354: IFFALSE 23358
// exit ;
23356: GO 23598
// index := GetElementIndex ( minersList , unit ) ;
23358: LD_ADDR_VAR 0 5
23362: PUSH
23363: LD_EXP 92
23367: PPUSH
23368: LD_VAR 0 1
23372: PPUSH
23373: CALL 29556 0 2
23377: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23378: LD_EXP 93
23382: PUSH
23383: LD_VAR 0 5
23387: ARRAY
23388: PUSH
23389: LD_EXP 94
23393: GREATEREQUAL
23394: IFFALSE 23398
// exit ;
23396: GO 23598
// ComMoveXY ( unit , x , y ) ;
23398: LD_VAR 0 1
23402: PPUSH
23403: LD_VAR 0 2
23407: PPUSH
23408: LD_VAR 0 3
23412: PPUSH
23413: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23417: LD_INT 35
23419: PPUSH
23420: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23424: LD_VAR 0 1
23428: PPUSH
23429: LD_VAR 0 2
23433: PPUSH
23434: LD_VAR 0 3
23438: PPUSH
23439: CALL 60940 0 3
23443: NOT
23444: PUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 314
23454: AND
23455: IFFALSE 23459
// exit ;
23457: GO 23598
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23459: LD_VAR 0 2
23463: PPUSH
23464: LD_VAR 0 3
23468: PPUSH
23469: CALL_OW 428
23473: PUSH
23474: LD_VAR 0 1
23478: EQUAL
23479: PUSH
23480: LD_VAR 0 1
23484: PPUSH
23485: CALL_OW 314
23489: NOT
23490: AND
23491: IFFALSE 23417
// PlaySoundXY ( x , y , PlantMine ) ;
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_VAR 0 3
23502: PPUSH
23503: LD_STRING PlantMine
23505: PPUSH
23506: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23510: LD_VAR 0 2
23514: PPUSH
23515: LD_VAR 0 3
23519: PPUSH
23520: LD_VAR 0 1
23524: PPUSH
23525: CALL_OW 255
23529: PPUSH
23530: LD_INT 0
23532: PPUSH
23533: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23537: LD_ADDR_EXP 93
23541: PUSH
23542: LD_EXP 93
23546: PPUSH
23547: LD_VAR 0 5
23551: PUSH
23552: LD_EXP 93
23556: PUSH
23557: LD_VAR 0 5
23561: ARRAY
23562: PUSH
23563: LD_INT 1
23565: PLUS
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PPUSH
23571: LD_VAR 0 2
23575: PUSH
23576: LD_VAR 0 3
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PPUSH
23585: CALL 29771 0 3
23589: ST_TO_ADDR
// result := true ;
23590: LD_ADDR_VAR 0 4
23594: PUSH
23595: LD_INT 1
23597: ST_TO_ADDR
// end ;
23598: LD_VAR 0 4
23602: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23603: LD_INT 0
23605: PPUSH
23606: PPUSH
23607: PPUSH
// if not unit in minersList then
23608: LD_VAR 0 1
23612: PUSH
23613: LD_EXP 92
23617: IN
23618: NOT
23619: IFFALSE 23623
// exit ;
23621: GO 24015
// index := GetElementIndex ( minersList , unit ) ;
23623: LD_ADDR_VAR 0 6
23627: PUSH
23628: LD_EXP 92
23632: PPUSH
23633: LD_VAR 0 1
23637: PPUSH
23638: CALL 29556 0 2
23642: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23643: LD_ADDR_VAR 0 5
23647: PUSH
23648: DOUBLE
23649: LD_EXP 93
23653: PUSH
23654: LD_VAR 0 6
23658: ARRAY
23659: INC
23660: ST_TO_ADDR
23661: LD_INT 1
23663: PUSH
23664: FOR_DOWNTO
23665: IFFALSE 23826
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23667: LD_EXP 93
23671: PUSH
23672: LD_VAR 0 6
23676: ARRAY
23677: PUSH
23678: LD_VAR 0 5
23682: ARRAY
23683: PUSH
23684: LD_INT 1
23686: ARRAY
23687: PUSH
23688: LD_VAR 0 2
23692: EQUAL
23693: PUSH
23694: LD_EXP 93
23698: PUSH
23699: LD_VAR 0 6
23703: ARRAY
23704: PUSH
23705: LD_VAR 0 5
23709: ARRAY
23710: PUSH
23711: LD_INT 2
23713: ARRAY
23714: PUSH
23715: LD_VAR 0 3
23719: EQUAL
23720: AND
23721: IFFALSE 23824
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23723: LD_EXP 93
23727: PUSH
23728: LD_VAR 0 6
23732: ARRAY
23733: PUSH
23734: LD_VAR 0 5
23738: ARRAY
23739: PUSH
23740: LD_INT 1
23742: ARRAY
23743: PPUSH
23744: LD_EXP 93
23748: PUSH
23749: LD_VAR 0 6
23753: ARRAY
23754: PUSH
23755: LD_VAR 0 5
23759: ARRAY
23760: PUSH
23761: LD_INT 2
23763: ARRAY
23764: PPUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 255
23774: PPUSH
23775: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23779: LD_ADDR_EXP 93
23783: PUSH
23784: LD_EXP 93
23788: PPUSH
23789: LD_VAR 0 6
23793: PPUSH
23794: LD_EXP 93
23798: PUSH
23799: LD_VAR 0 6
23803: ARRAY
23804: PPUSH
23805: LD_VAR 0 5
23809: PPUSH
23810: CALL_OW 3
23814: PPUSH
23815: CALL_OW 1
23819: ST_TO_ADDR
// exit ;
23820: POP
23821: POP
23822: GO 24015
// end ; end ;
23824: GO 23664
23826: POP
23827: POP
// for i := minerMinesList [ index ] downto 1 do
23828: LD_ADDR_VAR 0 5
23832: PUSH
23833: DOUBLE
23834: LD_EXP 93
23838: PUSH
23839: LD_VAR 0 6
23843: ARRAY
23844: INC
23845: ST_TO_ADDR
23846: LD_INT 1
23848: PUSH
23849: FOR_DOWNTO
23850: IFFALSE 24013
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23852: LD_EXP 93
23856: PUSH
23857: LD_VAR 0 6
23861: ARRAY
23862: PUSH
23863: LD_VAR 0 5
23867: ARRAY
23868: PUSH
23869: LD_INT 1
23871: ARRAY
23872: PPUSH
23873: LD_EXP 93
23877: PUSH
23878: LD_VAR 0 6
23882: ARRAY
23883: PUSH
23884: LD_VAR 0 5
23888: ARRAY
23889: PUSH
23890: LD_INT 2
23892: ARRAY
23893: PPUSH
23894: LD_VAR 0 2
23898: PPUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: CALL_OW 298
23908: PUSH
23909: LD_INT 6
23911: LESS
23912: IFFALSE 24011
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23914: LD_EXP 93
23918: PUSH
23919: LD_VAR 0 6
23923: ARRAY
23924: PUSH
23925: LD_VAR 0 5
23929: ARRAY
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: PPUSH
23935: LD_EXP 93
23939: PUSH
23940: LD_VAR 0 6
23944: ARRAY
23945: PUSH
23946: LD_VAR 0 5
23950: ARRAY
23951: PUSH
23952: LD_INT 2
23954: ARRAY
23955: PPUSH
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 255
23965: PPUSH
23966: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23970: LD_ADDR_EXP 93
23974: PUSH
23975: LD_EXP 93
23979: PPUSH
23980: LD_VAR 0 6
23984: PPUSH
23985: LD_EXP 93
23989: PUSH
23990: LD_VAR 0 6
23994: ARRAY
23995: PPUSH
23996: LD_VAR 0 5
24000: PPUSH
24001: CALL_OW 3
24005: PPUSH
24006: CALL_OW 1
24010: ST_TO_ADDR
// end ; end ;
24011: GO 23849
24013: POP
24014: POP
// end ;
24015: LD_VAR 0 4
24019: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24020: LD_INT 0
24022: PPUSH
24023: PPUSH
24024: PPUSH
24025: PPUSH
24026: PPUSH
24027: PPUSH
24028: PPUSH
24029: PPUSH
24030: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 264
24040: PUSH
24041: LD_INT 81
24043: EQUAL
24044: NOT
24045: PUSH
24046: LD_VAR 0 1
24050: PUSH
24051: LD_EXP 92
24055: IN
24056: NOT
24057: OR
24058: IFFALSE 24062
// exit ;
24060: GO 24384
// index := GetElementIndex ( minersList , unit ) ;
24062: LD_ADDR_VAR 0 6
24066: PUSH
24067: LD_EXP 92
24071: PPUSH
24072: LD_VAR 0 1
24076: PPUSH
24077: CALL 29556 0 2
24081: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24082: LD_ADDR_VAR 0 8
24086: PUSH
24087: LD_EXP 94
24091: PUSH
24092: LD_EXP 93
24096: PUSH
24097: LD_VAR 0 6
24101: ARRAY
24102: MINUS
24103: ST_TO_ADDR
// if not minesFreeAmount then
24104: LD_VAR 0 8
24108: NOT
24109: IFFALSE 24113
// exit ;
24111: GO 24384
// tmp := [ ] ;
24113: LD_ADDR_VAR 0 7
24117: PUSH
24118: EMPTY
24119: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: DOUBLE
24126: LD_INT 1
24128: DEC
24129: ST_TO_ADDR
24130: LD_VAR 0 8
24134: PUSH
24135: FOR_TO
24136: IFFALSE 24331
// begin _d := rand ( 0 , 5 ) ;
24138: LD_ADDR_VAR 0 11
24142: PUSH
24143: LD_INT 0
24145: PPUSH
24146: LD_INT 5
24148: PPUSH
24149: CALL_OW 12
24153: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24154: LD_ADDR_VAR 0 12
24158: PUSH
24159: LD_INT 2
24161: PPUSH
24162: LD_INT 6
24164: PPUSH
24165: CALL_OW 12
24169: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24170: LD_ADDR_VAR 0 9
24174: PUSH
24175: LD_VAR 0 2
24179: PPUSH
24180: LD_VAR 0 11
24184: PPUSH
24185: LD_VAR 0 12
24189: PPUSH
24190: CALL_OW 272
24194: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24195: LD_ADDR_VAR 0 10
24199: PUSH
24200: LD_VAR 0 3
24204: PPUSH
24205: LD_VAR 0 11
24209: PPUSH
24210: LD_VAR 0 12
24214: PPUSH
24215: CALL_OW 273
24219: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24220: LD_VAR 0 9
24224: PPUSH
24225: LD_VAR 0 10
24229: PPUSH
24230: CALL_OW 488
24234: PUSH
24235: LD_VAR 0 9
24239: PUSH
24240: LD_VAR 0 10
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_VAR 0 7
24253: IN
24254: NOT
24255: AND
24256: PUSH
24257: LD_VAR 0 9
24261: PPUSH
24262: LD_VAR 0 10
24266: PPUSH
24267: CALL_OW 458
24271: NOT
24272: AND
24273: IFFALSE 24315
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24275: LD_ADDR_VAR 0 7
24279: PUSH
24280: LD_VAR 0 7
24284: PPUSH
24285: LD_VAR 0 7
24289: PUSH
24290: LD_INT 1
24292: PLUS
24293: PPUSH
24294: LD_VAR 0 9
24298: PUSH
24299: LD_VAR 0 10
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PPUSH
24308: CALL_OW 1
24312: ST_TO_ADDR
24313: GO 24329
// i := i - 1 ;
24315: LD_ADDR_VAR 0 5
24319: PUSH
24320: LD_VAR 0 5
24324: PUSH
24325: LD_INT 1
24327: MINUS
24328: ST_TO_ADDR
// end ;
24329: GO 24135
24331: POP
24332: POP
// for i in tmp do
24333: LD_ADDR_VAR 0 5
24337: PUSH
24338: LD_VAR 0 7
24342: PUSH
24343: FOR_IN
24344: IFFALSE 24382
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24346: LD_VAR 0 1
24350: PPUSH
24351: LD_VAR 0 5
24355: PUSH
24356: LD_INT 1
24358: ARRAY
24359: PPUSH
24360: LD_VAR 0 5
24364: PUSH
24365: LD_INT 2
24367: ARRAY
24368: PPUSH
24369: CALL 23328 0 3
24373: NOT
24374: IFFALSE 24380
// exit ;
24376: POP
24377: POP
24378: GO 24384
24380: GO 24343
24382: POP
24383: POP
// end ;
24384: LD_VAR 0 4
24388: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24389: LD_INT 0
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
// if not GetClass ( unit ) = class_sniper then
24398: LD_VAR 0 1
24402: PPUSH
24403: CALL_OW 257
24407: PUSH
24408: LD_INT 5
24410: EQUAL
24411: NOT
24412: IFFALSE 24416
// exit ;
24414: GO 24804
// dist := 8 ;
24416: LD_ADDR_VAR 0 5
24420: PUSH
24421: LD_INT 8
24423: ST_TO_ADDR
// viewRange := 12 ;
24424: LD_ADDR_VAR 0 7
24428: PUSH
24429: LD_INT 12
24431: ST_TO_ADDR
// side := GetSide ( unit ) ;
24432: LD_ADDR_VAR 0 6
24436: PUSH
24437: LD_VAR 0 1
24441: PPUSH
24442: CALL_OW 255
24446: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24447: LD_INT 61
24449: PPUSH
24450: LD_VAR 0 6
24454: PPUSH
24455: CALL_OW 321
24459: PUSH
24460: LD_INT 2
24462: EQUAL
24463: IFFALSE 24473
// viewRange := 16 ;
24465: LD_ADDR_VAR 0 7
24469: PUSH
24470: LD_INT 16
24472: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24473: LD_VAR 0 1
24477: PPUSH
24478: LD_VAR 0 2
24482: PPUSH
24483: LD_VAR 0 3
24487: PPUSH
24488: CALL_OW 297
24492: PUSH
24493: LD_VAR 0 5
24497: GREATER
24498: IFFALSE 24577
// begin ComMoveXY ( unit , x , y ) ;
24500: LD_VAR 0 1
24504: PPUSH
24505: LD_VAR 0 2
24509: PPUSH
24510: LD_VAR 0 3
24514: PPUSH
24515: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24519: LD_INT 35
24521: PPUSH
24522: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24526: LD_VAR 0 1
24530: PPUSH
24531: LD_VAR 0 2
24535: PPUSH
24536: LD_VAR 0 3
24540: PPUSH
24541: CALL 60940 0 3
24545: NOT
24546: IFFALSE 24550
// exit ;
24548: GO 24804
// until GetDistUnitXY ( unit , x , y ) < dist ;
24550: LD_VAR 0 1
24554: PPUSH
24555: LD_VAR 0 2
24559: PPUSH
24560: LD_VAR 0 3
24564: PPUSH
24565: CALL_OW 297
24569: PUSH
24570: LD_VAR 0 5
24574: LESS
24575: IFFALSE 24519
// end ; ComTurnXY ( unit , x , y ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_VAR 0 2
24586: PPUSH
24587: LD_VAR 0 3
24591: PPUSH
24592: CALL_OW 118
// wait ( 5 ) ;
24596: LD_INT 5
24598: PPUSH
24599: CALL_OW 67
// _d := GetDir ( unit ) ;
24603: LD_ADDR_VAR 0 10
24607: PUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 254
24617: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24618: LD_ADDR_VAR 0 8
24622: PUSH
24623: LD_VAR 0 1
24627: PPUSH
24628: CALL_OW 250
24632: PPUSH
24633: LD_VAR 0 10
24637: PPUSH
24638: LD_VAR 0 5
24642: PPUSH
24643: CALL_OW 272
24647: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24648: LD_ADDR_VAR 0 9
24652: PUSH
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL_OW 251
24662: PPUSH
24663: LD_VAR 0 10
24667: PPUSH
24668: LD_VAR 0 5
24672: PPUSH
24673: CALL_OW 273
24677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24678: LD_VAR 0 8
24682: PPUSH
24683: LD_VAR 0 9
24687: PPUSH
24688: CALL_OW 488
24692: NOT
24693: IFFALSE 24697
// exit ;
24695: GO 24804
// ComAnimCustom ( unit , 1 ) ;
24697: LD_VAR 0 1
24701: PPUSH
24702: LD_INT 1
24704: PPUSH
24705: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24709: LD_VAR 0 8
24713: PPUSH
24714: LD_VAR 0 9
24718: PPUSH
24719: LD_VAR 0 6
24723: PPUSH
24724: LD_VAR 0 7
24728: PPUSH
24729: CALL_OW 330
// repeat wait ( 1 ) ;
24733: LD_INT 1
24735: PPUSH
24736: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24740: LD_VAR 0 1
24744: PPUSH
24745: CALL_OW 316
24749: PUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: CALL_OW 314
24759: OR
24760: PUSH
24761: LD_VAR 0 1
24765: PPUSH
24766: CALL_OW 302
24770: NOT
24771: OR
24772: PUSH
24773: LD_VAR 0 1
24777: PPUSH
24778: CALL_OW 301
24782: OR
24783: IFFALSE 24733
// RemoveSeeing ( _x , _y , side ) ;
24785: LD_VAR 0 8
24789: PPUSH
24790: LD_VAR 0 9
24794: PPUSH
24795: LD_VAR 0 6
24799: PPUSH
24800: CALL_OW 331
// end ; end_of_file end_of_file
24804: LD_VAR 0 4
24808: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24809: LD_INT 0
24811: PPUSH
24812: PPUSH
// if exist_mode then
24813: LD_VAR 0 2
24817: IFFALSE 24842
// unit := CreateCharacter ( prefix & ident ) else
24819: LD_ADDR_VAR 0 5
24823: PUSH
24824: LD_VAR 0 3
24828: PUSH
24829: LD_VAR 0 1
24833: STR
24834: PPUSH
24835: CALL_OW 34
24839: ST_TO_ADDR
24840: GO 24857
// unit := NewCharacter ( ident ) ;
24842: LD_ADDR_VAR 0 5
24846: PUSH
24847: LD_VAR 0 1
24851: PPUSH
24852: CALL_OW 25
24856: ST_TO_ADDR
// result := unit ;
24857: LD_ADDR_VAR 0 4
24861: PUSH
24862: LD_VAR 0 5
24866: ST_TO_ADDR
// end ;
24867: LD_VAR 0 4
24871: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
// if not side or not nation then
24876: LD_VAR 0 1
24880: NOT
24881: PUSH
24882: LD_VAR 0 2
24886: NOT
24887: OR
24888: IFFALSE 24892
// exit ;
24890: GO 25660
// case nation of nation_american :
24892: LD_VAR 0 2
24896: PUSH
24897: LD_INT 1
24899: DOUBLE
24900: EQUAL
24901: IFTRUE 24905
24903: GO 25119
24905: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24906: LD_ADDR_VAR 0 4
24910: PUSH
24911: LD_INT 35
24913: PUSH
24914: LD_INT 45
24916: PUSH
24917: LD_INT 46
24919: PUSH
24920: LD_INT 47
24922: PUSH
24923: LD_INT 82
24925: PUSH
24926: LD_INT 83
24928: PUSH
24929: LD_INT 84
24931: PUSH
24932: LD_INT 85
24934: PUSH
24935: LD_INT 86
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 2
24943: PUSH
24944: LD_INT 6
24946: PUSH
24947: LD_INT 15
24949: PUSH
24950: LD_INT 16
24952: PUSH
24953: LD_INT 7
24955: PUSH
24956: LD_INT 12
24958: PUSH
24959: LD_INT 13
24961: PUSH
24962: LD_INT 10
24964: PUSH
24965: LD_INT 14
24967: PUSH
24968: LD_INT 20
24970: PUSH
24971: LD_INT 21
24973: PUSH
24974: LD_INT 22
24976: PUSH
24977: LD_INT 25
24979: PUSH
24980: LD_INT 32
24982: PUSH
24983: LD_INT 27
24985: PUSH
24986: LD_INT 36
24988: PUSH
24989: LD_INT 69
24991: PUSH
24992: LD_INT 39
24994: PUSH
24995: LD_INT 34
24997: PUSH
24998: LD_INT 40
25000: PUSH
25001: LD_INT 48
25003: PUSH
25004: LD_INT 49
25006: PUSH
25007: LD_INT 50
25009: PUSH
25010: LD_INT 51
25012: PUSH
25013: LD_INT 52
25015: PUSH
25016: LD_INT 53
25018: PUSH
25019: LD_INT 54
25021: PUSH
25022: LD_INT 55
25024: PUSH
25025: LD_INT 56
25027: PUSH
25028: LD_INT 57
25030: PUSH
25031: LD_INT 58
25033: PUSH
25034: LD_INT 59
25036: PUSH
25037: LD_INT 60
25039: PUSH
25040: LD_INT 61
25042: PUSH
25043: LD_INT 62
25045: PUSH
25046: LD_INT 80
25048: PUSH
25049: LD_INT 82
25051: PUSH
25052: LD_INT 83
25054: PUSH
25055: LD_INT 84
25057: PUSH
25058: LD_INT 85
25060: PUSH
25061: LD_INT 86
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: ST_TO_ADDR
25117: GO 25584
25119: LD_INT 2
25121: DOUBLE
25122: EQUAL
25123: IFTRUE 25127
25125: GO 25353
25127: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25128: LD_ADDR_VAR 0 4
25132: PUSH
25133: LD_INT 35
25135: PUSH
25136: LD_INT 45
25138: PUSH
25139: LD_INT 46
25141: PUSH
25142: LD_INT 47
25144: PUSH
25145: LD_INT 82
25147: PUSH
25148: LD_INT 83
25150: PUSH
25151: LD_INT 84
25153: PUSH
25154: LD_INT 85
25156: PUSH
25157: LD_INT 87
25159: PUSH
25160: LD_INT 70
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: LD_INT 11
25168: PUSH
25169: LD_INT 3
25171: PUSH
25172: LD_INT 4
25174: PUSH
25175: LD_INT 5
25177: PUSH
25178: LD_INT 6
25180: PUSH
25181: LD_INT 15
25183: PUSH
25184: LD_INT 18
25186: PUSH
25187: LD_INT 7
25189: PUSH
25190: LD_INT 17
25192: PUSH
25193: LD_INT 8
25195: PUSH
25196: LD_INT 20
25198: PUSH
25199: LD_INT 21
25201: PUSH
25202: LD_INT 22
25204: PUSH
25205: LD_INT 72
25207: PUSH
25208: LD_INT 26
25210: PUSH
25211: LD_INT 69
25213: PUSH
25214: LD_INT 39
25216: PUSH
25217: LD_INT 40
25219: PUSH
25220: LD_INT 41
25222: PUSH
25223: LD_INT 42
25225: PUSH
25226: LD_INT 43
25228: PUSH
25229: LD_INT 48
25231: PUSH
25232: LD_INT 49
25234: PUSH
25235: LD_INT 50
25237: PUSH
25238: LD_INT 51
25240: PUSH
25241: LD_INT 52
25243: PUSH
25244: LD_INT 53
25246: PUSH
25247: LD_INT 54
25249: PUSH
25250: LD_INT 55
25252: PUSH
25253: LD_INT 56
25255: PUSH
25256: LD_INT 60
25258: PUSH
25259: LD_INT 61
25261: PUSH
25262: LD_INT 62
25264: PUSH
25265: LD_INT 66
25267: PUSH
25268: LD_INT 67
25270: PUSH
25271: LD_INT 68
25273: PUSH
25274: LD_INT 81
25276: PUSH
25277: LD_INT 82
25279: PUSH
25280: LD_INT 83
25282: PUSH
25283: LD_INT 84
25285: PUSH
25286: LD_INT 85
25288: PUSH
25289: LD_INT 87
25291: PUSH
25292: LD_INT 88
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
25351: GO 25584
25353: LD_INT 3
25355: DOUBLE
25356: EQUAL
25357: IFTRUE 25361
25359: GO 25583
25361: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25362: LD_ADDR_VAR 0 4
25366: PUSH
25367: LD_INT 46
25369: PUSH
25370: LD_INT 47
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: LD_INT 82
25381: PUSH
25382: LD_INT 83
25384: PUSH
25385: LD_INT 84
25387: PUSH
25388: LD_INT 85
25390: PUSH
25391: LD_INT 86
25393: PUSH
25394: LD_INT 11
25396: PUSH
25397: LD_INT 9
25399: PUSH
25400: LD_INT 20
25402: PUSH
25403: LD_INT 19
25405: PUSH
25406: LD_INT 21
25408: PUSH
25409: LD_INT 24
25411: PUSH
25412: LD_INT 22
25414: PUSH
25415: LD_INT 25
25417: PUSH
25418: LD_INT 28
25420: PUSH
25421: LD_INT 29
25423: PUSH
25424: LD_INT 30
25426: PUSH
25427: LD_INT 31
25429: PUSH
25430: LD_INT 37
25432: PUSH
25433: LD_INT 38
25435: PUSH
25436: LD_INT 32
25438: PUSH
25439: LD_INT 27
25441: PUSH
25442: LD_INT 33
25444: PUSH
25445: LD_INT 69
25447: PUSH
25448: LD_INT 39
25450: PUSH
25451: LD_INT 34
25453: PUSH
25454: LD_INT 40
25456: PUSH
25457: LD_INT 71
25459: PUSH
25460: LD_INT 23
25462: PUSH
25463: LD_INT 44
25465: PUSH
25466: LD_INT 48
25468: PUSH
25469: LD_INT 49
25471: PUSH
25472: LD_INT 50
25474: PUSH
25475: LD_INT 51
25477: PUSH
25478: LD_INT 52
25480: PUSH
25481: LD_INT 53
25483: PUSH
25484: LD_INT 54
25486: PUSH
25487: LD_INT 55
25489: PUSH
25490: LD_INT 56
25492: PUSH
25493: LD_INT 57
25495: PUSH
25496: LD_INT 58
25498: PUSH
25499: LD_INT 59
25501: PUSH
25502: LD_INT 63
25504: PUSH
25505: LD_INT 64
25507: PUSH
25508: LD_INT 65
25510: PUSH
25511: LD_INT 82
25513: PUSH
25514: LD_INT 83
25516: PUSH
25517: LD_INT 84
25519: PUSH
25520: LD_INT 85
25522: PUSH
25523: LD_INT 86
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: ST_TO_ADDR
25581: GO 25584
25583: POP
// if state > - 1 and state < 3 then
25584: LD_VAR 0 3
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: GREATER
25593: PUSH
25594: LD_VAR 0 3
25598: PUSH
25599: LD_INT 3
25601: LESS
25602: AND
25603: IFFALSE 25660
// for i in result do
25605: LD_ADDR_VAR 0 5
25609: PUSH
25610: LD_VAR 0 4
25614: PUSH
25615: FOR_IN
25616: IFFALSE 25658
// if GetTech ( i , side ) <> state then
25618: LD_VAR 0 5
25622: PPUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 321
25632: PUSH
25633: LD_VAR 0 3
25637: NONEQUAL
25638: IFFALSE 25656
// result := result diff i ;
25640: LD_ADDR_VAR 0 4
25644: PUSH
25645: LD_VAR 0 4
25649: PUSH
25650: LD_VAR 0 5
25654: DIFF
25655: ST_TO_ADDR
25656: GO 25615
25658: POP
25659: POP
// end ;
25660: LD_VAR 0 4
25664: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25665: LD_INT 0
25667: PPUSH
25668: PPUSH
25669: PPUSH
// result := true ;
25670: LD_ADDR_VAR 0 3
25674: PUSH
25675: LD_INT 1
25677: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25678: LD_ADDR_VAR 0 5
25682: PUSH
25683: LD_VAR 0 2
25687: PPUSH
25688: CALL_OW 480
25692: ST_TO_ADDR
// if not tmp then
25693: LD_VAR 0 5
25697: NOT
25698: IFFALSE 25702
// exit ;
25700: GO 25751
// for i in tmp do
25702: LD_ADDR_VAR 0 4
25706: PUSH
25707: LD_VAR 0 5
25711: PUSH
25712: FOR_IN
25713: IFFALSE 25749
// if GetTech ( i , side ) <> state_researched then
25715: LD_VAR 0 4
25719: PPUSH
25720: LD_VAR 0 1
25724: PPUSH
25725: CALL_OW 321
25729: PUSH
25730: LD_INT 2
25732: NONEQUAL
25733: IFFALSE 25747
// begin result := false ;
25735: LD_ADDR_VAR 0 3
25739: PUSH
25740: LD_INT 0
25742: ST_TO_ADDR
// exit ;
25743: POP
25744: POP
25745: GO 25751
// end ;
25747: GO 25712
25749: POP
25750: POP
// end ;
25751: LD_VAR 0 3
25755: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25756: LD_INT 0
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
25764: PPUSH
25765: PPUSH
25766: PPUSH
25767: PPUSH
25768: PPUSH
25769: PPUSH
25770: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25771: LD_VAR 0 1
25775: NOT
25776: PUSH
25777: LD_VAR 0 1
25781: PPUSH
25782: CALL_OW 257
25786: PUSH
25787: LD_INT 9
25789: NONEQUAL
25790: OR
25791: IFFALSE 25795
// exit ;
25793: GO 26368
// side := GetSide ( unit ) ;
25795: LD_ADDR_VAR 0 9
25799: PUSH
25800: LD_VAR 0 1
25804: PPUSH
25805: CALL_OW 255
25809: ST_TO_ADDR
// tech_space := tech_spacanom ;
25810: LD_ADDR_VAR 0 12
25814: PUSH
25815: LD_INT 29
25817: ST_TO_ADDR
// tech_time := tech_taurad ;
25818: LD_ADDR_VAR 0 13
25822: PUSH
25823: LD_INT 28
25825: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25826: LD_ADDR_VAR 0 11
25830: PUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: CALL_OW 310
25840: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25841: LD_VAR 0 11
25845: PPUSH
25846: CALL_OW 247
25850: PUSH
25851: LD_INT 2
25853: EQUAL
25854: IFFALSE 25858
// exit ;
25856: GO 26368
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25858: LD_ADDR_VAR 0 8
25862: PUSH
25863: LD_INT 81
25865: PUSH
25866: LD_VAR 0 9
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: LD_INT 3
25877: PUSH
25878: LD_INT 21
25880: PUSH
25881: LD_INT 3
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PPUSH
25896: CALL_OW 69
25900: ST_TO_ADDR
// if not tmp then
25901: LD_VAR 0 8
25905: NOT
25906: IFFALSE 25910
// exit ;
25908: GO 26368
// if in_unit then
25910: LD_VAR 0 11
25914: IFFALSE 25938
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25916: LD_ADDR_VAR 0 10
25920: PUSH
25921: LD_VAR 0 8
25925: PPUSH
25926: LD_VAR 0 11
25930: PPUSH
25931: CALL_OW 74
25935: ST_TO_ADDR
25936: GO 25958
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25938: LD_ADDR_VAR 0 10
25942: PUSH
25943: LD_VAR 0 8
25947: PPUSH
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 74
25957: ST_TO_ADDR
// if not enemy then
25958: LD_VAR 0 10
25962: NOT
25963: IFFALSE 25967
// exit ;
25965: GO 26368
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25967: LD_VAR 0 11
25971: PUSH
25972: LD_VAR 0 11
25976: PPUSH
25977: LD_VAR 0 10
25981: PPUSH
25982: CALL_OW 296
25986: PUSH
25987: LD_INT 13
25989: GREATER
25990: AND
25991: PUSH
25992: LD_VAR 0 1
25996: PPUSH
25997: LD_VAR 0 10
26001: PPUSH
26002: CALL_OW 296
26006: PUSH
26007: LD_INT 12
26009: GREATER
26010: OR
26011: IFFALSE 26015
// exit ;
26013: GO 26368
// missile := [ 1 ] ;
26015: LD_ADDR_VAR 0 14
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26026: LD_VAR 0 9
26030: PPUSH
26031: LD_VAR 0 12
26035: PPUSH
26036: CALL_OW 325
26040: IFFALSE 26069
// missile := Replace ( missile , missile + 1 , 2 ) ;
26042: LD_ADDR_VAR 0 14
26046: PUSH
26047: LD_VAR 0 14
26051: PPUSH
26052: LD_VAR 0 14
26056: PUSH
26057: LD_INT 1
26059: PLUS
26060: PPUSH
26061: LD_INT 2
26063: PPUSH
26064: CALL_OW 1
26068: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26069: LD_VAR 0 9
26073: PPUSH
26074: LD_VAR 0 13
26078: PPUSH
26079: CALL_OW 325
26083: PUSH
26084: LD_VAR 0 10
26088: PPUSH
26089: CALL_OW 255
26093: PPUSH
26094: LD_VAR 0 13
26098: PPUSH
26099: CALL_OW 325
26103: NOT
26104: AND
26105: IFFALSE 26134
// missile := Replace ( missile , missile + 1 , 3 ) ;
26107: LD_ADDR_VAR 0 14
26111: PUSH
26112: LD_VAR 0 14
26116: PPUSH
26117: LD_VAR 0 14
26121: PUSH
26122: LD_INT 1
26124: PLUS
26125: PPUSH
26126: LD_INT 3
26128: PPUSH
26129: CALL_OW 1
26133: ST_TO_ADDR
// if missile < 2 then
26134: LD_VAR 0 14
26138: PUSH
26139: LD_INT 2
26141: LESS
26142: IFFALSE 26146
// exit ;
26144: GO 26368
// x := GetX ( enemy ) ;
26146: LD_ADDR_VAR 0 4
26150: PUSH
26151: LD_VAR 0 10
26155: PPUSH
26156: CALL_OW 250
26160: ST_TO_ADDR
// y := GetY ( enemy ) ;
26161: LD_ADDR_VAR 0 5
26165: PUSH
26166: LD_VAR 0 10
26170: PPUSH
26171: CALL_OW 251
26175: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26176: LD_ADDR_VAR 0 6
26180: PUSH
26181: LD_VAR 0 4
26185: PUSH
26186: LD_INT 1
26188: NEG
26189: PPUSH
26190: LD_INT 1
26192: PPUSH
26193: CALL_OW 12
26197: PLUS
26198: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26199: LD_ADDR_VAR 0 7
26203: PUSH
26204: LD_VAR 0 5
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PPUSH
26213: LD_INT 1
26215: PPUSH
26216: CALL_OW 12
26220: PLUS
26221: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26222: LD_VAR 0 6
26226: PPUSH
26227: LD_VAR 0 7
26231: PPUSH
26232: CALL_OW 488
26236: NOT
26237: IFFALSE 26259
// begin _x := x ;
26239: LD_ADDR_VAR 0 6
26243: PUSH
26244: LD_VAR 0 4
26248: ST_TO_ADDR
// _y := y ;
26249: LD_ADDR_VAR 0 7
26253: PUSH
26254: LD_VAR 0 5
26258: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26259: LD_ADDR_VAR 0 3
26263: PUSH
26264: LD_INT 1
26266: PPUSH
26267: LD_VAR 0 14
26271: PPUSH
26272: CALL_OW 12
26276: ST_TO_ADDR
// case i of 1 :
26277: LD_VAR 0 3
26281: PUSH
26282: LD_INT 1
26284: DOUBLE
26285: EQUAL
26286: IFTRUE 26290
26288: GO 26307
26290: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26291: LD_VAR 0 1
26295: PPUSH
26296: LD_VAR 0 10
26300: PPUSH
26301: CALL_OW 115
26305: GO 26368
26307: LD_INT 2
26309: DOUBLE
26310: EQUAL
26311: IFTRUE 26315
26313: GO 26337
26315: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26316: LD_VAR 0 1
26320: PPUSH
26321: LD_VAR 0 6
26325: PPUSH
26326: LD_VAR 0 7
26330: PPUSH
26331: CALL_OW 153
26335: GO 26368
26337: LD_INT 3
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26367
26345: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26346: LD_VAR 0 1
26350: PPUSH
26351: LD_VAR 0 6
26355: PPUSH
26356: LD_VAR 0 7
26360: PPUSH
26361: CALL_OW 154
26365: GO 26368
26367: POP
// end ;
26368: LD_VAR 0 2
26372: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26373: LD_INT 0
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
26379: PPUSH
26380: PPUSH
// if not unit or not building then
26381: LD_VAR 0 1
26385: NOT
26386: PUSH
26387: LD_VAR 0 2
26391: NOT
26392: OR
26393: IFFALSE 26397
// exit ;
26395: GO 26555
// x := GetX ( building ) ;
26397: LD_ADDR_VAR 0 5
26401: PUSH
26402: LD_VAR 0 2
26406: PPUSH
26407: CALL_OW 250
26411: ST_TO_ADDR
// y := GetY ( building ) ;
26412: LD_ADDR_VAR 0 6
26416: PUSH
26417: LD_VAR 0 2
26421: PPUSH
26422: CALL_OW 251
26426: ST_TO_ADDR
// for i = 0 to 5 do
26427: LD_ADDR_VAR 0 4
26431: PUSH
26432: DOUBLE
26433: LD_INT 0
26435: DEC
26436: ST_TO_ADDR
26437: LD_INT 5
26439: PUSH
26440: FOR_TO
26441: IFFALSE 26553
// begin _x := ShiftX ( x , i , 3 ) ;
26443: LD_ADDR_VAR 0 7
26447: PUSH
26448: LD_VAR 0 5
26452: PPUSH
26453: LD_VAR 0 4
26457: PPUSH
26458: LD_INT 3
26460: PPUSH
26461: CALL_OW 272
26465: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26466: LD_ADDR_VAR 0 8
26470: PUSH
26471: LD_VAR 0 6
26475: PPUSH
26476: LD_VAR 0 4
26480: PPUSH
26481: LD_INT 3
26483: PPUSH
26484: CALL_OW 273
26488: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26489: LD_VAR 0 7
26493: PPUSH
26494: LD_VAR 0 8
26498: PPUSH
26499: CALL_OW 488
26503: NOT
26504: IFFALSE 26508
// continue ;
26506: GO 26440
// if HexInfo ( _x , _y ) = 0 then
26508: LD_VAR 0 7
26512: PPUSH
26513: LD_VAR 0 8
26517: PPUSH
26518: CALL_OW 428
26522: PUSH
26523: LD_INT 0
26525: EQUAL
26526: IFFALSE 26551
// begin ComMoveXY ( unit , _x , _y ) ;
26528: LD_VAR 0 1
26532: PPUSH
26533: LD_VAR 0 7
26537: PPUSH
26538: LD_VAR 0 8
26542: PPUSH
26543: CALL_OW 111
// exit ;
26547: POP
26548: POP
26549: GO 26555
// end ; end ;
26551: GO 26440
26553: POP
26554: POP
// end ;
26555: LD_VAR 0 3
26559: RET
// export function ScanBase ( side , base_area ) ; begin
26560: LD_INT 0
26562: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26563: LD_ADDR_VAR 0 3
26567: PUSH
26568: LD_VAR 0 2
26572: PPUSH
26573: LD_INT 81
26575: PUSH
26576: LD_VAR 0 1
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PPUSH
26585: CALL_OW 70
26589: ST_TO_ADDR
// end ;
26590: LD_VAR 0 3
26594: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26595: LD_INT 0
26597: PPUSH
26598: PPUSH
26599: PPUSH
26600: PPUSH
// result := false ;
26601: LD_ADDR_VAR 0 2
26605: PUSH
26606: LD_INT 0
26608: ST_TO_ADDR
// side := GetSide ( unit ) ;
26609: LD_ADDR_VAR 0 3
26613: PUSH
26614: LD_VAR 0 1
26618: PPUSH
26619: CALL_OW 255
26623: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26624: LD_ADDR_VAR 0 4
26628: PUSH
26629: LD_VAR 0 1
26633: PPUSH
26634: CALL_OW 248
26638: ST_TO_ADDR
// case nat of 1 :
26639: LD_VAR 0 4
26643: PUSH
26644: LD_INT 1
26646: DOUBLE
26647: EQUAL
26648: IFTRUE 26652
26650: GO 26663
26652: POP
// tech := tech_lassight ; 2 :
26653: LD_ADDR_VAR 0 5
26657: PUSH
26658: LD_INT 12
26660: ST_TO_ADDR
26661: GO 26702
26663: LD_INT 2
26665: DOUBLE
26666: EQUAL
26667: IFTRUE 26671
26669: GO 26682
26671: POP
// tech := tech_mortar ; 3 :
26672: LD_ADDR_VAR 0 5
26676: PUSH
26677: LD_INT 41
26679: ST_TO_ADDR
26680: GO 26702
26682: LD_INT 3
26684: DOUBLE
26685: EQUAL
26686: IFTRUE 26690
26688: GO 26701
26690: POP
// tech := tech_bazooka ; end ;
26691: LD_ADDR_VAR 0 5
26695: PUSH
26696: LD_INT 44
26698: ST_TO_ADDR
26699: GO 26702
26701: POP
// if Researched ( side , tech ) then
26702: LD_VAR 0 3
26706: PPUSH
26707: LD_VAR 0 5
26711: PPUSH
26712: CALL_OW 325
26716: IFFALSE 26743
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26718: LD_ADDR_VAR 0 2
26722: PUSH
26723: LD_INT 5
26725: PUSH
26726: LD_INT 8
26728: PUSH
26729: LD_INT 9
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: PUSH
26737: LD_VAR 0 4
26741: ARRAY
26742: ST_TO_ADDR
// end ;
26743: LD_VAR 0 2
26747: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26748: LD_INT 0
26750: PPUSH
26751: PPUSH
26752: PPUSH
// if not mines then
26753: LD_VAR 0 2
26757: NOT
26758: IFFALSE 26762
// exit ;
26760: GO 26906
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26762: LD_ADDR_VAR 0 5
26766: PUSH
26767: LD_INT 81
26769: PUSH
26770: LD_VAR 0 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 3
26781: PUSH
26782: LD_INT 21
26784: PUSH
26785: LD_INT 3
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PPUSH
26800: CALL_OW 69
26804: ST_TO_ADDR
// for i in mines do
26805: LD_ADDR_VAR 0 4
26809: PUSH
26810: LD_VAR 0 2
26814: PUSH
26815: FOR_IN
26816: IFFALSE 26904
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26818: LD_VAR 0 4
26822: PUSH
26823: LD_INT 1
26825: ARRAY
26826: PPUSH
26827: LD_VAR 0 4
26831: PUSH
26832: LD_INT 2
26834: ARRAY
26835: PPUSH
26836: CALL_OW 458
26840: NOT
26841: IFFALSE 26845
// continue ;
26843: GO 26815
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26845: LD_VAR 0 4
26849: PUSH
26850: LD_INT 1
26852: ARRAY
26853: PPUSH
26854: LD_VAR 0 4
26858: PUSH
26859: LD_INT 2
26861: ARRAY
26862: PPUSH
26863: CALL_OW 428
26867: PUSH
26868: LD_VAR 0 5
26872: IN
26873: IFFALSE 26902
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26875: LD_VAR 0 4
26879: PUSH
26880: LD_INT 1
26882: ARRAY
26883: PPUSH
26884: LD_VAR 0 4
26888: PUSH
26889: LD_INT 2
26891: ARRAY
26892: PPUSH
26893: LD_VAR 0 1
26897: PPUSH
26898: CALL_OW 456
// end ;
26902: GO 26815
26904: POP
26905: POP
// end ;
26906: LD_VAR 0 3
26910: RET
// export function Count ( array ) ; begin
26911: LD_INT 0
26913: PPUSH
// result := array + 0 ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_VAR 0 1
26923: PUSH
26924: LD_INT 0
26926: PLUS
26927: ST_TO_ADDR
// end ;
26928: LD_VAR 0 2
26932: RET
// export function IsEmpty ( building ) ; begin
26933: LD_INT 0
26935: PPUSH
// if not building then
26936: LD_VAR 0 1
26940: NOT
26941: IFFALSE 26945
// exit ;
26943: GO 26988
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26945: LD_ADDR_VAR 0 2
26949: PUSH
26950: LD_VAR 0 1
26954: PUSH
26955: LD_INT 22
26957: PUSH
26958: LD_VAR 0 1
26962: PPUSH
26963: CALL_OW 255
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 58
26974: PUSH
26975: EMPTY
26976: LIST
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PPUSH
26982: CALL_OW 69
26986: IN
26987: ST_TO_ADDR
// end ;
26988: LD_VAR 0 2
26992: RET
// export function IsNotFull ( building ) ; var places ; begin
26993: LD_INT 0
26995: PPUSH
26996: PPUSH
// if not building then
26997: LD_VAR 0 1
27001: NOT
27002: IFFALSE 27006
// exit ;
27004: GO 27034
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
27006: LD_ADDR_VAR 0 2
27010: PUSH
27011: LD_VAR 0 1
27015: PPUSH
27016: LD_INT 3
27018: PUSH
27019: LD_INT 62
27021: PUSH
27022: EMPTY
27023: LIST
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PPUSH
27029: CALL_OW 72
27033: ST_TO_ADDR
// end ;
27034: LD_VAR 0 2
27038: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27039: LD_INT 0
27041: PPUSH
27042: PPUSH
27043: PPUSH
27044: PPUSH
// tmp := [ ] ;
27045: LD_ADDR_VAR 0 3
27049: PUSH
27050: EMPTY
27051: ST_TO_ADDR
// list := [ ] ;
27052: LD_ADDR_VAR 0 5
27056: PUSH
27057: EMPTY
27058: ST_TO_ADDR
// for i = 16 to 25 do
27059: LD_ADDR_VAR 0 4
27063: PUSH
27064: DOUBLE
27065: LD_INT 16
27067: DEC
27068: ST_TO_ADDR
27069: LD_INT 25
27071: PUSH
27072: FOR_TO
27073: IFFALSE 27146
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27075: LD_ADDR_VAR 0 3
27079: PUSH
27080: LD_VAR 0 3
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 255
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: LD_INT 91
27104: PUSH
27105: LD_VAR 0 1
27109: PUSH
27110: LD_INT 6
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 30
27120: PUSH
27121: LD_VAR 0 4
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: PUSH
27135: EMPTY
27136: LIST
27137: PPUSH
27138: CALL_OW 69
27142: ADD
27143: ST_TO_ADDR
27144: GO 27072
27146: POP
27147: POP
// for i = 1 to tmp do
27148: LD_ADDR_VAR 0 4
27152: PUSH
27153: DOUBLE
27154: LD_INT 1
27156: DEC
27157: ST_TO_ADDR
27158: LD_VAR 0 3
27162: PUSH
27163: FOR_TO
27164: IFFALSE 27252
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27166: LD_ADDR_VAR 0 5
27170: PUSH
27171: LD_VAR 0 5
27175: PUSH
27176: LD_VAR 0 3
27180: PUSH
27181: LD_VAR 0 4
27185: ARRAY
27186: PPUSH
27187: CALL_OW 266
27191: PUSH
27192: LD_VAR 0 3
27196: PUSH
27197: LD_VAR 0 4
27201: ARRAY
27202: PPUSH
27203: CALL_OW 250
27207: PUSH
27208: LD_VAR 0 3
27212: PUSH
27213: LD_VAR 0 4
27217: ARRAY
27218: PPUSH
27219: CALL_OW 251
27223: PUSH
27224: LD_VAR 0 3
27228: PUSH
27229: LD_VAR 0 4
27233: ARRAY
27234: PPUSH
27235: CALL_OW 254
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: ADD
27249: ST_TO_ADDR
27250: GO 27163
27252: POP
27253: POP
// result := list ;
27254: LD_ADDR_VAR 0 2
27258: PUSH
27259: LD_VAR 0 5
27263: ST_TO_ADDR
// end ;
27264: LD_VAR 0 2
27268: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27269: LD_INT 0
27271: PPUSH
27272: PPUSH
27273: PPUSH
27274: PPUSH
27275: PPUSH
27276: PPUSH
27277: PPUSH
// if not factory then
27278: LD_VAR 0 1
27282: NOT
27283: IFFALSE 27287
// exit ;
27285: GO 27880
// if control = control_apeman then
27287: LD_VAR 0 4
27291: PUSH
27292: LD_INT 5
27294: EQUAL
27295: IFFALSE 27404
// begin tmp := UnitsInside ( factory ) ;
27297: LD_ADDR_VAR 0 8
27301: PUSH
27302: LD_VAR 0 1
27306: PPUSH
27307: CALL_OW 313
27311: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27312: LD_VAR 0 8
27316: PPUSH
27317: LD_INT 25
27319: PUSH
27320: LD_INT 12
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: PPUSH
27327: CALL_OW 72
27331: NOT
27332: IFFALSE 27342
// control := control_manual ;
27334: LD_ADDR_VAR 0 4
27338: PUSH
27339: LD_INT 1
27341: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27342: LD_ADDR_VAR 0 8
27346: PUSH
27347: LD_VAR 0 1
27351: PPUSH
27352: CALL 27039 0 1
27356: ST_TO_ADDR
// if tmp then
27357: LD_VAR 0 8
27361: IFFALSE 27404
// begin for i in tmp do
27363: LD_ADDR_VAR 0 7
27367: PUSH
27368: LD_VAR 0 8
27372: PUSH
27373: FOR_IN
27374: IFFALSE 27402
// if i [ 1 ] = b_ext_radio then
27376: LD_VAR 0 7
27380: PUSH
27381: LD_INT 1
27383: ARRAY
27384: PUSH
27385: LD_INT 22
27387: EQUAL
27388: IFFALSE 27400
// begin control := control_remote ;
27390: LD_ADDR_VAR 0 4
27394: PUSH
27395: LD_INT 2
27397: ST_TO_ADDR
// break ;
27398: GO 27402
// end ;
27400: GO 27373
27402: POP
27403: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27404: LD_VAR 0 1
27408: PPUSH
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_VAR 0 3
27418: PPUSH
27419: LD_VAR 0 4
27423: PPUSH
27424: LD_VAR 0 5
27428: PPUSH
27429: CALL_OW 448
27433: IFFALSE 27468
// begin result := [ chassis , engine , control , weapon ] ;
27435: LD_ADDR_VAR 0 6
27439: PUSH
27440: LD_VAR 0 2
27444: PUSH
27445: LD_VAR 0 3
27449: PUSH
27450: LD_VAR 0 4
27454: PUSH
27455: LD_VAR 0 5
27459: PUSH
27460: EMPTY
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: ST_TO_ADDR
// exit ;
27466: GO 27880
// end ; _chassis := AvailableChassisList ( factory ) ;
27468: LD_ADDR_VAR 0 9
27472: PUSH
27473: LD_VAR 0 1
27477: PPUSH
27478: CALL_OW 475
27482: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27483: LD_ADDR_VAR 0 11
27487: PUSH
27488: LD_VAR 0 1
27492: PPUSH
27493: CALL_OW 476
27497: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27498: LD_ADDR_VAR 0 12
27502: PUSH
27503: LD_VAR 0 1
27507: PPUSH
27508: CALL_OW 477
27512: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27513: LD_ADDR_VAR 0 10
27517: PUSH
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 478
27527: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27528: LD_VAR 0 9
27532: NOT
27533: PUSH
27534: LD_VAR 0 11
27538: NOT
27539: OR
27540: PUSH
27541: LD_VAR 0 12
27545: NOT
27546: OR
27547: PUSH
27548: LD_VAR 0 10
27552: NOT
27553: OR
27554: IFFALSE 27589
// begin result := [ chassis , engine , control , weapon ] ;
27556: LD_ADDR_VAR 0 6
27560: PUSH
27561: LD_VAR 0 2
27565: PUSH
27566: LD_VAR 0 3
27570: PUSH
27571: LD_VAR 0 4
27575: PUSH
27576: LD_VAR 0 5
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// exit ;
27587: GO 27880
// end ; if not chassis in _chassis then
27589: LD_VAR 0 2
27593: PUSH
27594: LD_VAR 0 9
27598: IN
27599: NOT
27600: IFFALSE 27626
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27602: LD_ADDR_VAR 0 2
27606: PUSH
27607: LD_VAR 0 9
27611: PUSH
27612: LD_INT 1
27614: PPUSH
27615: LD_VAR 0 9
27619: PPUSH
27620: CALL_OW 12
27624: ARRAY
27625: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27626: LD_VAR 0 2
27630: PPUSH
27631: LD_VAR 0 3
27635: PPUSH
27636: CALL 27885 0 2
27640: NOT
27641: IFFALSE 27700
// repeat engine := _engine [ 1 ] ;
27643: LD_ADDR_VAR 0 3
27647: PUSH
27648: LD_VAR 0 11
27652: PUSH
27653: LD_INT 1
27655: ARRAY
27656: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27657: LD_ADDR_VAR 0 11
27661: PUSH
27662: LD_VAR 0 11
27666: PPUSH
27667: LD_INT 1
27669: PPUSH
27670: CALL_OW 3
27674: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27675: LD_VAR 0 2
27679: PPUSH
27680: LD_VAR 0 3
27684: PPUSH
27685: CALL 27885 0 2
27689: PUSH
27690: LD_VAR 0 11
27694: PUSH
27695: EMPTY
27696: EQUAL
27697: OR
27698: IFFALSE 27643
// if not control in _control then
27700: LD_VAR 0 4
27704: PUSH
27705: LD_VAR 0 12
27709: IN
27710: NOT
27711: IFFALSE 27737
// control := _control [ rand ( 1 , _control ) ] ;
27713: LD_ADDR_VAR 0 4
27717: PUSH
27718: LD_VAR 0 12
27722: PUSH
27723: LD_INT 1
27725: PPUSH
27726: LD_VAR 0 12
27730: PPUSH
27731: CALL_OW 12
27735: ARRAY
27736: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27737: LD_VAR 0 2
27741: PPUSH
27742: LD_VAR 0 5
27746: PPUSH
27747: CALL 28105 0 2
27751: NOT
27752: IFFALSE 27811
// repeat weapon := _weapon [ 1 ] ;
27754: LD_ADDR_VAR 0 5
27758: PUSH
27759: LD_VAR 0 10
27763: PUSH
27764: LD_INT 1
27766: ARRAY
27767: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27768: LD_ADDR_VAR 0 10
27772: PUSH
27773: LD_VAR 0 10
27777: PPUSH
27778: LD_INT 1
27780: PPUSH
27781: CALL_OW 3
27785: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27786: LD_VAR 0 2
27790: PPUSH
27791: LD_VAR 0 5
27795: PPUSH
27796: CALL 28105 0 2
27800: PUSH
27801: LD_VAR 0 10
27805: PUSH
27806: EMPTY
27807: EQUAL
27808: OR
27809: IFFALSE 27754
// result := [ ] ;
27811: LD_ADDR_VAR 0 6
27815: PUSH
27816: EMPTY
27817: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27818: LD_VAR 0 1
27822: PPUSH
27823: LD_VAR 0 2
27827: PPUSH
27828: LD_VAR 0 3
27832: PPUSH
27833: LD_VAR 0 4
27837: PPUSH
27838: LD_VAR 0 5
27842: PPUSH
27843: CALL_OW 448
27847: IFFALSE 27880
// result := [ chassis , engine , control , weapon ] ;
27849: LD_ADDR_VAR 0 6
27853: PUSH
27854: LD_VAR 0 2
27858: PUSH
27859: LD_VAR 0 3
27863: PUSH
27864: LD_VAR 0 4
27868: PUSH
27869: LD_VAR 0 5
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: ST_TO_ADDR
// end ;
27880: LD_VAR 0 6
27884: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27885: LD_INT 0
27887: PPUSH
// if not chassis or not engine then
27888: LD_VAR 0 1
27892: NOT
27893: PUSH
27894: LD_VAR 0 2
27898: NOT
27899: OR
27900: IFFALSE 27904
// exit ;
27902: GO 28100
// case engine of engine_solar :
27904: LD_VAR 0 2
27908: PUSH
27909: LD_INT 2
27911: DOUBLE
27912: EQUAL
27913: IFTRUE 27917
27915: GO 27955
27917: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27918: LD_ADDR_VAR 0 3
27922: PUSH
27923: LD_INT 11
27925: PUSH
27926: LD_INT 12
27928: PUSH
27929: LD_INT 13
27931: PUSH
27932: LD_INT 14
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: ST_TO_ADDR
27953: GO 28084
27955: LD_INT 1
27957: DOUBLE
27958: EQUAL
27959: IFTRUE 27963
27961: GO 28025
27963: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27964: LD_ADDR_VAR 0 3
27968: PUSH
27969: LD_INT 11
27971: PUSH
27972: LD_INT 12
27974: PUSH
27975: LD_INT 13
27977: PUSH
27978: LD_INT 14
27980: PUSH
27981: LD_INT 1
27983: PUSH
27984: LD_INT 2
27986: PUSH
27987: LD_INT 3
27989: PUSH
27990: LD_INT 4
27992: PUSH
27993: LD_INT 5
27995: PUSH
27996: LD_INT 21
27998: PUSH
27999: LD_INT 23
28001: PUSH
28002: LD_INT 22
28004: PUSH
28005: LD_INT 24
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: ST_TO_ADDR
28023: GO 28084
28025: LD_INT 3
28027: DOUBLE
28028: EQUAL
28029: IFTRUE 28033
28031: GO 28083
28033: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28034: LD_ADDR_VAR 0 3
28038: PUSH
28039: LD_INT 13
28041: PUSH
28042: LD_INT 14
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: LD_INT 3
28050: PUSH
28051: LD_INT 4
28053: PUSH
28054: LD_INT 5
28056: PUSH
28057: LD_INT 21
28059: PUSH
28060: LD_INT 22
28062: PUSH
28063: LD_INT 23
28065: PUSH
28066: LD_INT 24
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: ST_TO_ADDR
28081: GO 28084
28083: POP
// result := ( chassis in result ) ;
28084: LD_ADDR_VAR 0 3
28088: PUSH
28089: LD_VAR 0 1
28093: PUSH
28094: LD_VAR 0 3
28098: IN
28099: ST_TO_ADDR
// end ;
28100: LD_VAR 0 3
28104: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28105: LD_INT 0
28107: PPUSH
// if not chassis or not weapon then
28108: LD_VAR 0 1
28112: NOT
28113: PUSH
28114: LD_VAR 0 2
28118: NOT
28119: OR
28120: IFFALSE 28124
// exit ;
28122: GO 29184
// case weapon of us_machine_gun :
28124: LD_VAR 0 2
28128: PUSH
28129: LD_INT 2
28131: DOUBLE
28132: EQUAL
28133: IFTRUE 28137
28135: GO 28167
28137: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28138: LD_ADDR_VAR 0 3
28142: PUSH
28143: LD_INT 1
28145: PUSH
28146: LD_INT 2
28148: PUSH
28149: LD_INT 3
28151: PUSH
28152: LD_INT 4
28154: PUSH
28155: LD_INT 5
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: ST_TO_ADDR
28165: GO 29168
28167: LD_INT 3
28169: DOUBLE
28170: EQUAL
28171: IFTRUE 28175
28173: GO 28205
28175: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28176: LD_ADDR_VAR 0 3
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 2
28186: PUSH
28187: LD_INT 3
28189: PUSH
28190: LD_INT 4
28192: PUSH
28193: LD_INT 5
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: LIST
28200: LIST
28201: LIST
28202: ST_TO_ADDR
28203: GO 29168
28205: LD_INT 11
28207: DOUBLE
28208: EQUAL
28209: IFTRUE 28213
28211: GO 28243
28213: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28214: LD_ADDR_VAR 0 3
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: LD_INT 3
28227: PUSH
28228: LD_INT 4
28230: PUSH
28231: LD_INT 5
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
28241: GO 29168
28243: LD_INT 4
28245: DOUBLE
28246: EQUAL
28247: IFTRUE 28251
28249: GO 28277
28251: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28252: LD_ADDR_VAR 0 3
28256: PUSH
28257: LD_INT 2
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: LD_INT 4
28265: PUSH
28266: LD_INT 5
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: ST_TO_ADDR
28275: GO 29168
28277: LD_INT 5
28279: DOUBLE
28280: EQUAL
28281: IFTRUE 28285
28283: GO 28311
28285: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28286: LD_ADDR_VAR 0 3
28290: PUSH
28291: LD_INT 2
28293: PUSH
28294: LD_INT 3
28296: PUSH
28297: LD_INT 4
28299: PUSH
28300: LD_INT 5
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
28309: GO 29168
28311: LD_INT 9
28313: DOUBLE
28314: EQUAL
28315: IFTRUE 28319
28317: GO 28345
28319: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28320: LD_ADDR_VAR 0 3
28324: PUSH
28325: LD_INT 2
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: LD_INT 4
28333: PUSH
28334: LD_INT 5
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: ST_TO_ADDR
28343: GO 29168
28345: LD_INT 7
28347: DOUBLE
28348: EQUAL
28349: IFTRUE 28353
28351: GO 28379
28353: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28354: LD_ADDR_VAR 0 3
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: LD_INT 3
28364: PUSH
28365: LD_INT 4
28367: PUSH
28368: LD_INT 5
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: ST_TO_ADDR
28377: GO 29168
28379: LD_INT 12
28381: DOUBLE
28382: EQUAL
28383: IFTRUE 28387
28385: GO 28413
28387: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28388: LD_ADDR_VAR 0 3
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: LD_INT 3
28398: PUSH
28399: LD_INT 4
28401: PUSH
28402: LD_INT 5
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: ST_TO_ADDR
28411: GO 29168
28413: LD_INT 13
28415: DOUBLE
28416: EQUAL
28417: IFTRUE 28421
28419: GO 28447
28421: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28422: LD_ADDR_VAR 0 3
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 3
28432: PUSH
28433: LD_INT 4
28435: PUSH
28436: LD_INT 5
28438: PUSH
28439: EMPTY
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: ST_TO_ADDR
28445: GO 29168
28447: LD_INT 14
28449: DOUBLE
28450: EQUAL
28451: IFTRUE 28455
28453: GO 28473
28455: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28456: LD_ADDR_VAR 0 3
28460: PUSH
28461: LD_INT 4
28463: PUSH
28464: LD_INT 5
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: ST_TO_ADDR
28471: GO 29168
28473: LD_INT 6
28475: DOUBLE
28476: EQUAL
28477: IFTRUE 28481
28479: GO 28499
28481: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28482: LD_ADDR_VAR 0 3
28486: PUSH
28487: LD_INT 4
28489: PUSH
28490: LD_INT 5
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: ST_TO_ADDR
28497: GO 29168
28499: LD_INT 10
28501: DOUBLE
28502: EQUAL
28503: IFTRUE 28507
28505: GO 28525
28507: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28508: LD_ADDR_VAR 0 3
28512: PUSH
28513: LD_INT 4
28515: PUSH
28516: LD_INT 5
28518: PUSH
28519: EMPTY
28520: LIST
28521: LIST
28522: ST_TO_ADDR
28523: GO 29168
28525: LD_INT 22
28527: DOUBLE
28528: EQUAL
28529: IFTRUE 28533
28531: GO 28559
28533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28534: LD_ADDR_VAR 0 3
28538: PUSH
28539: LD_INT 11
28541: PUSH
28542: LD_INT 12
28544: PUSH
28545: LD_INT 13
28547: PUSH
28548: LD_INT 14
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: ST_TO_ADDR
28557: GO 29168
28559: LD_INT 23
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28593
28567: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28568: LD_ADDR_VAR 0 3
28572: PUSH
28573: LD_INT 11
28575: PUSH
28576: LD_INT 12
28578: PUSH
28579: LD_INT 13
28581: PUSH
28582: LD_INT 14
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: ST_TO_ADDR
28591: GO 29168
28593: LD_INT 24
28595: DOUBLE
28596: EQUAL
28597: IFTRUE 28601
28599: GO 28627
28601: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28602: LD_ADDR_VAR 0 3
28606: PUSH
28607: LD_INT 11
28609: PUSH
28610: LD_INT 12
28612: PUSH
28613: LD_INT 13
28615: PUSH
28616: LD_INT 14
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: ST_TO_ADDR
28625: GO 29168
28627: LD_INT 30
28629: DOUBLE
28630: EQUAL
28631: IFTRUE 28635
28633: GO 28661
28635: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28636: LD_ADDR_VAR 0 3
28640: PUSH
28641: LD_INT 11
28643: PUSH
28644: LD_INT 12
28646: PUSH
28647: LD_INT 13
28649: PUSH
28650: LD_INT 14
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: ST_TO_ADDR
28659: GO 29168
28661: LD_INT 25
28663: DOUBLE
28664: EQUAL
28665: IFTRUE 28669
28667: GO 28687
28669: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28670: LD_ADDR_VAR 0 3
28674: PUSH
28675: LD_INT 13
28677: PUSH
28678: LD_INT 14
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: ST_TO_ADDR
28685: GO 29168
28687: LD_INT 27
28689: DOUBLE
28690: EQUAL
28691: IFTRUE 28695
28693: GO 28713
28695: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28696: LD_ADDR_VAR 0 3
28700: PUSH
28701: LD_INT 13
28703: PUSH
28704: LD_INT 14
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: ST_TO_ADDR
28711: GO 29168
28713: LD_INT 92
28715: DOUBLE
28716: EQUAL
28717: IFTRUE 28721
28719: GO 28747
28721: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28722: LD_ADDR_VAR 0 3
28726: PUSH
28727: LD_INT 11
28729: PUSH
28730: LD_INT 12
28732: PUSH
28733: LD_INT 13
28735: PUSH
28736: LD_INT 14
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: ST_TO_ADDR
28745: GO 29168
28747: LD_INT 28
28749: DOUBLE
28750: EQUAL
28751: IFTRUE 28755
28753: GO 28773
28755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28756: LD_ADDR_VAR 0 3
28760: PUSH
28761: LD_INT 13
28763: PUSH
28764: LD_INT 14
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: ST_TO_ADDR
28771: GO 29168
28773: LD_INT 29
28775: DOUBLE
28776: EQUAL
28777: IFTRUE 28781
28779: GO 28799
28781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28782: LD_ADDR_VAR 0 3
28786: PUSH
28787: LD_INT 13
28789: PUSH
28790: LD_INT 14
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: ST_TO_ADDR
28797: GO 29168
28799: LD_INT 31
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28825
28807: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 13
28815: PUSH
28816: LD_INT 14
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: ST_TO_ADDR
28823: GO 29168
28825: LD_INT 26
28827: DOUBLE
28828: EQUAL
28829: IFTRUE 28833
28831: GO 28851
28833: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28834: LD_ADDR_VAR 0 3
28838: PUSH
28839: LD_INT 13
28841: PUSH
28842: LD_INT 14
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: ST_TO_ADDR
28849: GO 29168
28851: LD_INT 42
28853: DOUBLE
28854: EQUAL
28855: IFTRUE 28859
28857: GO 28885
28859: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28860: LD_ADDR_VAR 0 3
28864: PUSH
28865: LD_INT 21
28867: PUSH
28868: LD_INT 22
28870: PUSH
28871: LD_INT 23
28873: PUSH
28874: LD_INT 24
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: ST_TO_ADDR
28883: GO 29168
28885: LD_INT 43
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28919
28893: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_INT 21
28901: PUSH
28902: LD_INT 22
28904: PUSH
28905: LD_INT 23
28907: PUSH
28908: LD_INT 24
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
28917: GO 29168
28919: LD_INT 44
28921: DOUBLE
28922: EQUAL
28923: IFTRUE 28927
28925: GO 28953
28927: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28928: LD_ADDR_VAR 0 3
28932: PUSH
28933: LD_INT 21
28935: PUSH
28936: LD_INT 22
28938: PUSH
28939: LD_INT 23
28941: PUSH
28942: LD_INT 24
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: ST_TO_ADDR
28951: GO 29168
28953: LD_INT 45
28955: DOUBLE
28956: EQUAL
28957: IFTRUE 28961
28959: GO 28987
28961: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28962: LD_ADDR_VAR 0 3
28966: PUSH
28967: LD_INT 21
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_INT 23
28975: PUSH
28976: LD_INT 24
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
28985: GO 29168
28987: LD_INT 49
28989: DOUBLE
28990: EQUAL
28991: IFTRUE 28995
28993: GO 29021
28995: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28996: LD_ADDR_VAR 0 3
29000: PUSH
29001: LD_INT 21
29003: PUSH
29004: LD_INT 22
29006: PUSH
29007: LD_INT 23
29009: PUSH
29010: LD_INT 24
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: ST_TO_ADDR
29019: GO 29168
29021: LD_INT 51
29023: DOUBLE
29024: EQUAL
29025: IFTRUE 29029
29027: GO 29055
29029: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29030: LD_ADDR_VAR 0 3
29034: PUSH
29035: LD_INT 21
29037: PUSH
29038: LD_INT 22
29040: PUSH
29041: LD_INT 23
29043: PUSH
29044: LD_INT 24
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: ST_TO_ADDR
29053: GO 29168
29055: LD_INT 52
29057: DOUBLE
29058: EQUAL
29059: IFTRUE 29063
29061: GO 29089
29063: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29064: LD_ADDR_VAR 0 3
29068: PUSH
29069: LD_INT 21
29071: PUSH
29072: LD_INT 22
29074: PUSH
29075: LD_INT 23
29077: PUSH
29078: LD_INT 24
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: ST_TO_ADDR
29087: GO 29168
29089: LD_INT 53
29091: DOUBLE
29092: EQUAL
29093: IFTRUE 29097
29095: GO 29115
29097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29098: LD_ADDR_VAR 0 3
29102: PUSH
29103: LD_INT 23
29105: PUSH
29106: LD_INT 24
29108: PUSH
29109: EMPTY
29110: LIST
29111: LIST
29112: ST_TO_ADDR
29113: GO 29168
29115: LD_INT 46
29117: DOUBLE
29118: EQUAL
29119: IFTRUE 29123
29121: GO 29141
29123: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29124: LD_ADDR_VAR 0 3
29128: PUSH
29129: LD_INT 23
29131: PUSH
29132: LD_INT 24
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: ST_TO_ADDR
29139: GO 29168
29141: LD_INT 47
29143: DOUBLE
29144: EQUAL
29145: IFTRUE 29149
29147: GO 29167
29149: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29150: LD_ADDR_VAR 0 3
29154: PUSH
29155: LD_INT 23
29157: PUSH
29158: LD_INT 24
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: ST_TO_ADDR
29165: GO 29168
29167: POP
// result := ( chassis in result ) ;
29168: LD_ADDR_VAR 0 3
29172: PUSH
29173: LD_VAR 0 1
29177: PUSH
29178: LD_VAR 0 3
29182: IN
29183: ST_TO_ADDR
// end ;
29184: LD_VAR 0 3
29188: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
// result := array ;
29198: LD_ADDR_VAR 0 5
29202: PUSH
29203: LD_VAR 0 1
29207: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29208: LD_VAR 0 1
29212: NOT
29213: PUSH
29214: LD_VAR 0 2
29218: NOT
29219: OR
29220: PUSH
29221: LD_VAR 0 3
29225: NOT
29226: OR
29227: PUSH
29228: LD_VAR 0 2
29232: PUSH
29233: LD_VAR 0 1
29237: GREATER
29238: OR
29239: PUSH
29240: LD_VAR 0 3
29244: PUSH
29245: LD_VAR 0 1
29249: GREATER
29250: OR
29251: IFFALSE 29255
// exit ;
29253: GO 29551
// if direction then
29255: LD_VAR 0 4
29259: IFFALSE 29323
// begin d := 1 ;
29261: LD_ADDR_VAR 0 9
29265: PUSH
29266: LD_INT 1
29268: ST_TO_ADDR
// if i_from > i_to then
29269: LD_VAR 0 2
29273: PUSH
29274: LD_VAR 0 3
29278: GREATER
29279: IFFALSE 29305
// length := ( array - i_from ) + i_to else
29281: LD_ADDR_VAR 0 11
29285: PUSH
29286: LD_VAR 0 1
29290: PUSH
29291: LD_VAR 0 2
29295: MINUS
29296: PUSH
29297: LD_VAR 0 3
29301: PLUS
29302: ST_TO_ADDR
29303: GO 29321
// length := i_to - i_from ;
29305: LD_ADDR_VAR 0 11
29309: PUSH
29310: LD_VAR 0 3
29314: PUSH
29315: LD_VAR 0 2
29319: MINUS
29320: ST_TO_ADDR
// end else
29321: GO 29384
// begin d := - 1 ;
29323: LD_ADDR_VAR 0 9
29327: PUSH
29328: LD_INT 1
29330: NEG
29331: ST_TO_ADDR
// if i_from > i_to then
29332: LD_VAR 0 2
29336: PUSH
29337: LD_VAR 0 3
29341: GREATER
29342: IFFALSE 29362
// length := i_from - i_to else
29344: LD_ADDR_VAR 0 11
29348: PUSH
29349: LD_VAR 0 2
29353: PUSH
29354: LD_VAR 0 3
29358: MINUS
29359: ST_TO_ADDR
29360: GO 29384
// length := ( array - i_to ) + i_from ;
29362: LD_ADDR_VAR 0 11
29366: PUSH
29367: LD_VAR 0 1
29371: PUSH
29372: LD_VAR 0 3
29376: MINUS
29377: PUSH
29378: LD_VAR 0 2
29382: PLUS
29383: ST_TO_ADDR
// end ; if not length then
29384: LD_VAR 0 11
29388: NOT
29389: IFFALSE 29393
// exit ;
29391: GO 29551
// tmp := array ;
29393: LD_ADDR_VAR 0 10
29397: PUSH
29398: LD_VAR 0 1
29402: ST_TO_ADDR
// for i = 1 to length do
29403: LD_ADDR_VAR 0 6
29407: PUSH
29408: DOUBLE
29409: LD_INT 1
29411: DEC
29412: ST_TO_ADDR
29413: LD_VAR 0 11
29417: PUSH
29418: FOR_TO
29419: IFFALSE 29539
// begin for j = 1 to array do
29421: LD_ADDR_VAR 0 7
29425: PUSH
29426: DOUBLE
29427: LD_INT 1
29429: DEC
29430: ST_TO_ADDR
29431: LD_VAR 0 1
29435: PUSH
29436: FOR_TO
29437: IFFALSE 29525
// begin k := j + d ;
29439: LD_ADDR_VAR 0 8
29443: PUSH
29444: LD_VAR 0 7
29448: PUSH
29449: LD_VAR 0 9
29453: PLUS
29454: ST_TO_ADDR
// if k > array then
29455: LD_VAR 0 8
29459: PUSH
29460: LD_VAR 0 1
29464: GREATER
29465: IFFALSE 29475
// k := 1 ;
29467: LD_ADDR_VAR 0 8
29471: PUSH
29472: LD_INT 1
29474: ST_TO_ADDR
// if not k then
29475: LD_VAR 0 8
29479: NOT
29480: IFFALSE 29492
// k := array ;
29482: LD_ADDR_VAR 0 8
29486: PUSH
29487: LD_VAR 0 1
29491: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29492: LD_ADDR_VAR 0 10
29496: PUSH
29497: LD_VAR 0 10
29501: PPUSH
29502: LD_VAR 0 8
29506: PPUSH
29507: LD_VAR 0 1
29511: PUSH
29512: LD_VAR 0 7
29516: ARRAY
29517: PPUSH
29518: CALL_OW 1
29522: ST_TO_ADDR
// end ;
29523: GO 29436
29525: POP
29526: POP
// array := tmp ;
29527: LD_ADDR_VAR 0 1
29531: PUSH
29532: LD_VAR 0 10
29536: ST_TO_ADDR
// end ;
29537: GO 29418
29539: POP
29540: POP
// result := array ;
29541: LD_ADDR_VAR 0 5
29545: PUSH
29546: LD_VAR 0 1
29550: ST_TO_ADDR
// end ;
29551: LD_VAR 0 5
29555: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
// result := 0 ;
29560: LD_ADDR_VAR 0 3
29564: PUSH
29565: LD_INT 0
29567: ST_TO_ADDR
// if not array or not value in array then
29568: LD_VAR 0 1
29572: NOT
29573: PUSH
29574: LD_VAR 0 2
29578: PUSH
29579: LD_VAR 0 1
29583: IN
29584: NOT
29585: OR
29586: IFFALSE 29590
// exit ;
29588: GO 29644
// for i = 1 to array do
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: DOUBLE
29596: LD_INT 1
29598: DEC
29599: ST_TO_ADDR
29600: LD_VAR 0 1
29604: PUSH
29605: FOR_TO
29606: IFFALSE 29642
// if value = array [ i ] then
29608: LD_VAR 0 2
29612: PUSH
29613: LD_VAR 0 1
29617: PUSH
29618: LD_VAR 0 4
29622: ARRAY
29623: EQUAL
29624: IFFALSE 29640
// begin result := i ;
29626: LD_ADDR_VAR 0 3
29630: PUSH
29631: LD_VAR 0 4
29635: ST_TO_ADDR
// exit ;
29636: POP
29637: POP
29638: GO 29644
// end ;
29640: GO 29605
29642: POP
29643: POP
// end ;
29644: LD_VAR 0 3
29648: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29649: LD_INT 0
29651: PPUSH
// vc_chassis := chassis ;
29652: LD_ADDR_OWVAR 37
29656: PUSH
29657: LD_VAR 0 1
29661: ST_TO_ADDR
// vc_engine := engine ;
29662: LD_ADDR_OWVAR 39
29666: PUSH
29667: LD_VAR 0 2
29671: ST_TO_ADDR
// vc_control := control ;
29672: LD_ADDR_OWVAR 38
29676: PUSH
29677: LD_VAR 0 3
29681: ST_TO_ADDR
// vc_weapon := weapon ;
29682: LD_ADDR_OWVAR 40
29686: PUSH
29687: LD_VAR 0 4
29691: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29692: LD_ADDR_OWVAR 41
29696: PUSH
29697: LD_VAR 0 5
29701: ST_TO_ADDR
// end ;
29702: LD_VAR 0 6
29706: RET
// export function WantPlant ( unit ) ; var task ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
// result := false ;
29711: LD_ADDR_VAR 0 2
29715: PUSH
29716: LD_INT 0
29718: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29719: LD_ADDR_VAR 0 3
29723: PUSH
29724: LD_VAR 0 1
29728: PPUSH
29729: CALL_OW 437
29733: ST_TO_ADDR
// if task then
29734: LD_VAR 0 3
29738: IFFALSE 29766
// if task [ 1 ] [ 1 ] = p then
29740: LD_VAR 0 3
29744: PUSH
29745: LD_INT 1
29747: ARRAY
29748: PUSH
29749: LD_INT 1
29751: ARRAY
29752: PUSH
29753: LD_STRING p
29755: EQUAL
29756: IFFALSE 29766
// result := true ;
29758: LD_ADDR_VAR 0 2
29762: PUSH
29763: LD_INT 1
29765: ST_TO_ADDR
// end ;
29766: LD_VAR 0 2
29770: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29771: LD_INT 0
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
// if pos < 1 then
29777: LD_VAR 0 2
29781: PUSH
29782: LD_INT 1
29784: LESS
29785: IFFALSE 29789
// exit ;
29787: GO 30092
// if pos = 1 then
29789: LD_VAR 0 2
29793: PUSH
29794: LD_INT 1
29796: EQUAL
29797: IFFALSE 29830
// result := Replace ( arr , pos [ 1 ] , value ) else
29799: LD_ADDR_VAR 0 4
29803: PUSH
29804: LD_VAR 0 1
29808: PPUSH
29809: LD_VAR 0 2
29813: PUSH
29814: LD_INT 1
29816: ARRAY
29817: PPUSH
29818: LD_VAR 0 3
29822: PPUSH
29823: CALL_OW 1
29827: ST_TO_ADDR
29828: GO 30092
// begin tmp := arr ;
29830: LD_ADDR_VAR 0 6
29834: PUSH
29835: LD_VAR 0 1
29839: ST_TO_ADDR
// s_arr := [ tmp ] ;
29840: LD_ADDR_VAR 0 7
29844: PUSH
29845: LD_VAR 0 6
29849: PUSH
29850: EMPTY
29851: LIST
29852: ST_TO_ADDR
// for i = 1 to pos - 1 do
29853: LD_ADDR_VAR 0 5
29857: PUSH
29858: DOUBLE
29859: LD_INT 1
29861: DEC
29862: ST_TO_ADDR
29863: LD_VAR 0 2
29867: PUSH
29868: LD_INT 1
29870: MINUS
29871: PUSH
29872: FOR_TO
29873: IFFALSE 29918
// begin tmp := tmp [ pos [ i ] ] ;
29875: LD_ADDR_VAR 0 6
29879: PUSH
29880: LD_VAR 0 6
29884: PUSH
29885: LD_VAR 0 2
29889: PUSH
29890: LD_VAR 0 5
29894: ARRAY
29895: ARRAY
29896: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29897: LD_ADDR_VAR 0 7
29901: PUSH
29902: LD_VAR 0 7
29906: PUSH
29907: LD_VAR 0 6
29911: PUSH
29912: EMPTY
29913: LIST
29914: ADD
29915: ST_TO_ADDR
// end ;
29916: GO 29872
29918: POP
29919: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29920: LD_ADDR_VAR 0 6
29924: PUSH
29925: LD_VAR 0 6
29929: PPUSH
29930: LD_VAR 0 2
29934: PUSH
29935: LD_VAR 0 2
29939: ARRAY
29940: PPUSH
29941: LD_VAR 0 3
29945: PPUSH
29946: CALL_OW 1
29950: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29951: LD_ADDR_VAR 0 7
29955: PUSH
29956: LD_VAR 0 7
29960: PPUSH
29961: LD_VAR 0 7
29965: PPUSH
29966: LD_VAR 0 6
29970: PPUSH
29971: CALL_OW 1
29975: ST_TO_ADDR
// for i = s_arr downto 2 do
29976: LD_ADDR_VAR 0 5
29980: PUSH
29981: DOUBLE
29982: LD_VAR 0 7
29986: INC
29987: ST_TO_ADDR
29988: LD_INT 2
29990: PUSH
29991: FOR_DOWNTO
29992: IFFALSE 30076
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29994: LD_ADDR_VAR 0 6
29998: PUSH
29999: LD_VAR 0 7
30003: PUSH
30004: LD_VAR 0 5
30008: PUSH
30009: LD_INT 1
30011: MINUS
30012: ARRAY
30013: PPUSH
30014: LD_VAR 0 2
30018: PUSH
30019: LD_VAR 0 5
30023: PUSH
30024: LD_INT 1
30026: MINUS
30027: ARRAY
30028: PPUSH
30029: LD_VAR 0 7
30033: PUSH
30034: LD_VAR 0 5
30038: ARRAY
30039: PPUSH
30040: CALL_OW 1
30044: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30045: LD_ADDR_VAR 0 7
30049: PUSH
30050: LD_VAR 0 7
30054: PPUSH
30055: LD_VAR 0 5
30059: PUSH
30060: LD_INT 1
30062: MINUS
30063: PPUSH
30064: LD_VAR 0 6
30068: PPUSH
30069: CALL_OW 1
30073: ST_TO_ADDR
// end ;
30074: GO 29991
30076: POP
30077: POP
// result := s_arr [ 1 ] ;
30078: LD_ADDR_VAR 0 4
30082: PUSH
30083: LD_VAR 0 7
30087: PUSH
30088: LD_INT 1
30090: ARRAY
30091: ST_TO_ADDR
// end ; end ;
30092: LD_VAR 0 4
30096: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30097: LD_INT 0
30099: PPUSH
30100: PPUSH
// if not list then
30101: LD_VAR 0 1
30105: NOT
30106: IFFALSE 30110
// exit ;
30108: GO 30201
// i := list [ pos1 ] ;
30110: LD_ADDR_VAR 0 5
30114: PUSH
30115: LD_VAR 0 1
30119: PUSH
30120: LD_VAR 0 2
30124: ARRAY
30125: ST_TO_ADDR
// if not i then
30126: LD_VAR 0 5
30130: NOT
30131: IFFALSE 30135
// exit ;
30133: GO 30201
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30135: LD_ADDR_VAR 0 1
30139: PUSH
30140: LD_VAR 0 1
30144: PPUSH
30145: LD_VAR 0 2
30149: PPUSH
30150: LD_VAR 0 1
30154: PUSH
30155: LD_VAR 0 3
30159: ARRAY
30160: PPUSH
30161: CALL_OW 1
30165: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30166: LD_ADDR_VAR 0 1
30170: PUSH
30171: LD_VAR 0 1
30175: PPUSH
30176: LD_VAR 0 3
30180: PPUSH
30181: LD_VAR 0 5
30185: PPUSH
30186: CALL_OW 1
30190: ST_TO_ADDR
// result := list ;
30191: LD_ADDR_VAR 0 4
30195: PUSH
30196: LD_VAR 0 1
30200: ST_TO_ADDR
// end ;
30201: LD_VAR 0 4
30205: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30206: LD_INT 0
30208: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30209: LD_ADDR_VAR 0 5
30213: PUSH
30214: LD_VAR 0 1
30218: PPUSH
30219: CALL_OW 250
30223: PPUSH
30224: LD_VAR 0 1
30228: PPUSH
30229: CALL_OW 251
30233: PPUSH
30234: LD_VAR 0 2
30238: PPUSH
30239: LD_VAR 0 3
30243: PPUSH
30244: LD_VAR 0 4
30248: PPUSH
30249: CALL 30259 0 5
30253: ST_TO_ADDR
// end ;
30254: LD_VAR 0 5
30258: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30259: LD_INT 0
30261: PPUSH
30262: PPUSH
30263: PPUSH
30264: PPUSH
// if not list then
30265: LD_VAR 0 3
30269: NOT
30270: IFFALSE 30274
// exit ;
30272: GO 30662
// result := [ ] ;
30274: LD_ADDR_VAR 0 6
30278: PUSH
30279: EMPTY
30280: ST_TO_ADDR
// for i in list do
30281: LD_ADDR_VAR 0 7
30285: PUSH
30286: LD_VAR 0 3
30290: PUSH
30291: FOR_IN
30292: IFFALSE 30494
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30294: LD_ADDR_VAR 0 9
30298: PUSH
30299: LD_VAR 0 7
30303: PPUSH
30304: LD_VAR 0 1
30308: PPUSH
30309: LD_VAR 0 2
30313: PPUSH
30314: CALL_OW 297
30318: ST_TO_ADDR
// if not result then
30319: LD_VAR 0 6
30323: NOT
30324: IFFALSE 30350
// result := [ [ i , tmp ] ] else
30326: LD_ADDR_VAR 0 6
30330: PUSH
30331: LD_VAR 0 7
30335: PUSH
30336: LD_VAR 0 9
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: EMPTY
30346: LIST
30347: ST_TO_ADDR
30348: GO 30492
// begin if result [ result ] [ 2 ] < tmp then
30350: LD_VAR 0 6
30354: PUSH
30355: LD_VAR 0 6
30359: ARRAY
30360: PUSH
30361: LD_INT 2
30363: ARRAY
30364: PUSH
30365: LD_VAR 0 9
30369: LESS
30370: IFFALSE 30412
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30372: LD_ADDR_VAR 0 6
30376: PUSH
30377: LD_VAR 0 6
30381: PPUSH
30382: LD_VAR 0 6
30386: PUSH
30387: LD_INT 1
30389: PLUS
30390: PPUSH
30391: LD_VAR 0 7
30395: PUSH
30396: LD_VAR 0 9
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: PPUSH
30405: CALL_OW 2
30409: ST_TO_ADDR
30410: GO 30492
// for j = 1 to result do
30412: LD_ADDR_VAR 0 8
30416: PUSH
30417: DOUBLE
30418: LD_INT 1
30420: DEC
30421: ST_TO_ADDR
30422: LD_VAR 0 6
30426: PUSH
30427: FOR_TO
30428: IFFALSE 30490
// begin if tmp < result [ j ] [ 2 ] then
30430: LD_VAR 0 9
30434: PUSH
30435: LD_VAR 0 6
30439: PUSH
30440: LD_VAR 0 8
30444: ARRAY
30445: PUSH
30446: LD_INT 2
30448: ARRAY
30449: LESS
30450: IFFALSE 30488
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30452: LD_ADDR_VAR 0 6
30456: PUSH
30457: LD_VAR 0 6
30461: PPUSH
30462: LD_VAR 0 8
30466: PPUSH
30467: LD_VAR 0 7
30471: PUSH
30472: LD_VAR 0 9
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 2
30485: ST_TO_ADDR
// break ;
30486: GO 30490
// end ; end ;
30488: GO 30427
30490: POP
30491: POP
// end ; end ;
30492: GO 30291
30494: POP
30495: POP
// if result and not asc then
30496: LD_VAR 0 6
30500: PUSH
30501: LD_VAR 0 4
30505: NOT
30506: AND
30507: IFFALSE 30582
// begin tmp := result ;
30509: LD_ADDR_VAR 0 9
30513: PUSH
30514: LD_VAR 0 6
30518: ST_TO_ADDR
// for i = tmp downto 1 do
30519: LD_ADDR_VAR 0 7
30523: PUSH
30524: DOUBLE
30525: LD_VAR 0 9
30529: INC
30530: ST_TO_ADDR
30531: LD_INT 1
30533: PUSH
30534: FOR_DOWNTO
30535: IFFALSE 30580
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30537: LD_ADDR_VAR 0 6
30541: PUSH
30542: LD_VAR 0 6
30546: PPUSH
30547: LD_VAR 0 9
30551: PUSH
30552: LD_VAR 0 7
30556: MINUS
30557: PUSH
30558: LD_INT 1
30560: PLUS
30561: PPUSH
30562: LD_VAR 0 9
30566: PUSH
30567: LD_VAR 0 7
30571: ARRAY
30572: PPUSH
30573: CALL_OW 1
30577: ST_TO_ADDR
30578: GO 30534
30580: POP
30581: POP
// end ; tmp := [ ] ;
30582: LD_ADDR_VAR 0 9
30586: PUSH
30587: EMPTY
30588: ST_TO_ADDR
// if mode then
30589: LD_VAR 0 5
30593: IFFALSE 30662
// begin for i = 1 to result do
30595: LD_ADDR_VAR 0 7
30599: PUSH
30600: DOUBLE
30601: LD_INT 1
30603: DEC
30604: ST_TO_ADDR
30605: LD_VAR 0 6
30609: PUSH
30610: FOR_TO
30611: IFFALSE 30650
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30613: LD_ADDR_VAR 0 9
30617: PUSH
30618: LD_VAR 0 9
30622: PPUSH
30623: LD_VAR 0 7
30627: PPUSH
30628: LD_VAR 0 6
30632: PUSH
30633: LD_VAR 0 7
30637: ARRAY
30638: PUSH
30639: LD_INT 1
30641: ARRAY
30642: PPUSH
30643: CALL_OW 1
30647: ST_TO_ADDR
30648: GO 30610
30650: POP
30651: POP
// result := tmp ;
30652: LD_ADDR_VAR 0 6
30656: PUSH
30657: LD_VAR 0 9
30661: ST_TO_ADDR
// end ; end ;
30662: LD_VAR 0 6
30666: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30667: LD_INT 0
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30675: LD_ADDR_VAR 0 5
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: EMPTY
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: ST_TO_ADDR
// if not x or not y then
30697: LD_VAR 0 2
30701: NOT
30702: PUSH
30703: LD_VAR 0 3
30707: NOT
30708: OR
30709: IFFALSE 30713
// exit ;
30711: GO 32363
// if not range then
30713: LD_VAR 0 4
30717: NOT
30718: IFFALSE 30728
// range := 10 ;
30720: LD_ADDR_VAR 0 4
30724: PUSH
30725: LD_INT 10
30727: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30728: LD_ADDR_VAR 0 8
30732: PUSH
30733: LD_INT 81
30735: PUSH
30736: LD_VAR 0 1
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 92
30747: PUSH
30748: LD_VAR 0 2
30752: PUSH
30753: LD_VAR 0 3
30757: PUSH
30758: LD_VAR 0 4
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: PUSH
30769: LD_INT 3
30771: PUSH
30772: LD_INT 21
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: PPUSH
30791: CALL_OW 69
30795: ST_TO_ADDR
// if not tmp then
30796: LD_VAR 0 8
30800: NOT
30801: IFFALSE 30805
// exit ;
30803: GO 32363
// for i in tmp do
30805: LD_ADDR_VAR 0 6
30809: PUSH
30810: LD_VAR 0 8
30814: PUSH
30815: FOR_IN
30816: IFFALSE 32338
// begin points := [ 0 , 0 , 0 ] ;
30818: LD_ADDR_VAR 0 9
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
// bpoints := 1 ;
30837: LD_ADDR_VAR 0 10
30841: PUSH
30842: LD_INT 1
30844: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30845: LD_VAR 0 6
30849: PPUSH
30850: CALL_OW 247
30854: PUSH
30855: LD_INT 1
30857: DOUBLE
30858: EQUAL
30859: IFTRUE 30863
30861: GO 31441
30863: POP
// begin if GetClass ( i ) = 1 then
30864: LD_VAR 0 6
30868: PPUSH
30869: CALL_OW 257
30873: PUSH
30874: LD_INT 1
30876: EQUAL
30877: IFFALSE 30898
// points := [ 10 , 5 , 3 ] ;
30879: LD_ADDR_VAR 0 9
30883: PUSH
30884: LD_INT 10
30886: PUSH
30887: LD_INT 5
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: LIST
30897: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30898: LD_VAR 0 6
30902: PPUSH
30903: CALL_OW 257
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: LD_INT 4
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: LIST
30921: IN
30922: IFFALSE 30943
// points := [ 3 , 2 , 1 ] ;
30924: LD_ADDR_VAR 0 9
30928: PUSH
30929: LD_INT 3
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: LD_INT 1
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30943: LD_VAR 0 6
30947: PPUSH
30948: CALL_OW 257
30952: PUSH
30953: LD_INT 5
30955: EQUAL
30956: IFFALSE 30977
// points := [ 130 , 5 , 2 ] ;
30958: LD_ADDR_VAR 0 9
30962: PUSH
30963: LD_INT 130
30965: PUSH
30966: LD_INT 5
30968: PUSH
30969: LD_INT 2
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: LIST
30976: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30977: LD_VAR 0 6
30981: PPUSH
30982: CALL_OW 257
30986: PUSH
30987: LD_INT 8
30989: EQUAL
30990: IFFALSE 31011
// points := [ 35 , 35 , 30 ] ;
30992: LD_ADDR_VAR 0 9
30996: PUSH
30997: LD_INT 35
30999: PUSH
31000: LD_INT 35
31002: PUSH
31003: LD_INT 30
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: LIST
31010: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31011: LD_VAR 0 6
31015: PPUSH
31016: CALL_OW 257
31020: PUSH
31021: LD_INT 9
31023: EQUAL
31024: IFFALSE 31045
// points := [ 20 , 55 , 40 ] ;
31026: LD_ADDR_VAR 0 9
31030: PUSH
31031: LD_INT 20
31033: PUSH
31034: LD_INT 55
31036: PUSH
31037: LD_INT 40
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: LIST
31044: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31045: LD_VAR 0 6
31049: PPUSH
31050: CALL_OW 257
31054: PUSH
31055: LD_INT 12
31057: PUSH
31058: LD_INT 16
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: IN
31065: IFFALSE 31086
// points := [ 5 , 3 , 2 ] ;
31067: LD_ADDR_VAR 0 9
31071: PUSH
31072: LD_INT 5
31074: PUSH
31075: LD_INT 3
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31086: LD_VAR 0 6
31090: PPUSH
31091: CALL_OW 257
31095: PUSH
31096: LD_INT 17
31098: EQUAL
31099: IFFALSE 31120
// points := [ 100 , 50 , 75 ] ;
31101: LD_ADDR_VAR 0 9
31105: PUSH
31106: LD_INT 100
31108: PUSH
31109: LD_INT 50
31111: PUSH
31112: LD_INT 75
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31120: LD_VAR 0 6
31124: PPUSH
31125: CALL_OW 257
31129: PUSH
31130: LD_INT 15
31132: EQUAL
31133: IFFALSE 31154
// points := [ 10 , 5 , 3 ] ;
31135: LD_ADDR_VAR 0 9
31139: PUSH
31140: LD_INT 10
31142: PUSH
31143: LD_INT 5
31145: PUSH
31146: LD_INT 3
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: LIST
31153: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31154: LD_VAR 0 6
31158: PPUSH
31159: CALL_OW 257
31163: PUSH
31164: LD_INT 14
31166: EQUAL
31167: IFFALSE 31188
// points := [ 10 , 0 , 0 ] ;
31169: LD_ADDR_VAR 0 9
31173: PUSH
31174: LD_INT 10
31176: PUSH
31177: LD_INT 0
31179: PUSH
31180: LD_INT 0
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31188: LD_VAR 0 6
31192: PPUSH
31193: CALL_OW 257
31197: PUSH
31198: LD_INT 11
31200: EQUAL
31201: IFFALSE 31222
// points := [ 30 , 10 , 5 ] ;
31203: LD_ADDR_VAR 0 9
31207: PUSH
31208: LD_INT 30
31210: PUSH
31211: LD_INT 10
31213: PUSH
31214: LD_INT 5
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: LIST
31221: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31222: LD_VAR 0 1
31226: PPUSH
31227: LD_INT 5
31229: PPUSH
31230: CALL_OW 321
31234: PUSH
31235: LD_INT 2
31237: EQUAL
31238: IFFALSE 31255
// bpoints := bpoints * 1.8 ;
31240: LD_ADDR_VAR 0 10
31244: PUSH
31245: LD_VAR 0 10
31249: PUSH
31250: LD_REAL  1.80000000000000E+0000
31253: MUL
31254: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31255: LD_VAR 0 6
31259: PPUSH
31260: CALL_OW 257
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: LD_INT 2
31270: PUSH
31271: LD_INT 3
31273: PUSH
31274: LD_INT 4
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: IN
31283: PUSH
31284: LD_VAR 0 1
31288: PPUSH
31289: LD_INT 51
31291: PPUSH
31292: CALL_OW 321
31296: PUSH
31297: LD_INT 2
31299: EQUAL
31300: AND
31301: IFFALSE 31318
// bpoints := bpoints * 1.2 ;
31303: LD_ADDR_VAR 0 10
31307: PUSH
31308: LD_VAR 0 10
31312: PUSH
31313: LD_REAL  1.20000000000000E+0000
31316: MUL
31317: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31318: LD_VAR 0 6
31322: PPUSH
31323: CALL_OW 257
31327: PUSH
31328: LD_INT 5
31330: PUSH
31331: LD_INT 7
31333: PUSH
31334: LD_INT 9
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: IN
31342: PUSH
31343: LD_VAR 0 1
31347: PPUSH
31348: LD_INT 52
31350: PPUSH
31351: CALL_OW 321
31355: PUSH
31356: LD_INT 2
31358: EQUAL
31359: AND
31360: IFFALSE 31377
// bpoints := bpoints * 1.5 ;
31362: LD_ADDR_VAR 0 10
31366: PUSH
31367: LD_VAR 0 10
31371: PUSH
31372: LD_REAL  1.50000000000000E+0000
31375: MUL
31376: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31377: LD_VAR 0 1
31381: PPUSH
31382: LD_INT 66
31384: PPUSH
31385: CALL_OW 321
31389: PUSH
31390: LD_INT 2
31392: EQUAL
31393: IFFALSE 31410
// bpoints := bpoints * 1.1 ;
31395: LD_ADDR_VAR 0 10
31399: PUSH
31400: LD_VAR 0 10
31404: PUSH
31405: LD_REAL  1.10000000000000E+0000
31408: MUL
31409: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31410: LD_ADDR_VAR 0 10
31414: PUSH
31415: LD_VAR 0 10
31419: PUSH
31420: LD_VAR 0 6
31424: PPUSH
31425: LD_INT 1
31427: PPUSH
31428: CALL_OW 259
31432: PUSH
31433: LD_REAL  1.15000000000000E+0000
31436: MUL
31437: MUL
31438: ST_TO_ADDR
// end ; unit_vehicle :
31439: GO 32267
31441: LD_INT 2
31443: DOUBLE
31444: EQUAL
31445: IFTRUE 31449
31447: GO 32255
31449: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31450: LD_VAR 0 6
31454: PPUSH
31455: CALL_OW 264
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: LD_INT 42
31465: PUSH
31466: LD_INT 24
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: IN
31474: IFFALSE 31495
// points := [ 25 , 5 , 3 ] ;
31476: LD_ADDR_VAR 0 9
31480: PUSH
31481: LD_INT 25
31483: PUSH
31484: LD_INT 5
31486: PUSH
31487: LD_INT 3
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31495: LD_VAR 0 6
31499: PPUSH
31500: CALL_OW 264
31504: PUSH
31505: LD_INT 4
31507: PUSH
31508: LD_INT 43
31510: PUSH
31511: LD_INT 25
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: LIST
31518: IN
31519: IFFALSE 31540
// points := [ 40 , 15 , 5 ] ;
31521: LD_ADDR_VAR 0 9
31525: PUSH
31526: LD_INT 40
31528: PUSH
31529: LD_INT 15
31531: PUSH
31532: LD_INT 5
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31540: LD_VAR 0 6
31544: PPUSH
31545: CALL_OW 264
31549: PUSH
31550: LD_INT 3
31552: PUSH
31553: LD_INT 23
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: IN
31560: IFFALSE 31581
// points := [ 7 , 25 , 8 ] ;
31562: LD_ADDR_VAR 0 9
31566: PUSH
31567: LD_INT 7
31569: PUSH
31570: LD_INT 25
31572: PUSH
31573: LD_INT 8
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31581: LD_VAR 0 6
31585: PPUSH
31586: CALL_OW 264
31590: PUSH
31591: LD_INT 5
31593: PUSH
31594: LD_INT 27
31596: PUSH
31597: LD_INT 44
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: IN
31605: IFFALSE 31626
// points := [ 14 , 50 , 16 ] ;
31607: LD_ADDR_VAR 0 9
31611: PUSH
31612: LD_INT 14
31614: PUSH
31615: LD_INT 50
31617: PUSH
31618: LD_INT 16
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: LIST
31625: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31626: LD_VAR 0 6
31630: PPUSH
31631: CALL_OW 264
31635: PUSH
31636: LD_INT 6
31638: PUSH
31639: LD_INT 46
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: IN
31646: IFFALSE 31667
// points := [ 32 , 120 , 70 ] ;
31648: LD_ADDR_VAR 0 9
31652: PUSH
31653: LD_INT 32
31655: PUSH
31656: LD_INT 120
31658: PUSH
31659: LD_INT 70
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 264
31676: PUSH
31677: LD_INT 7
31679: PUSH
31680: LD_INT 28
31682: PUSH
31683: LD_INT 45
31685: PUSH
31686: LD_INT 92
31688: PUSH
31689: EMPTY
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: IN
31695: IFFALSE 31716
// points := [ 35 , 20 , 45 ] ;
31697: LD_ADDR_VAR 0 9
31701: PUSH
31702: LD_INT 35
31704: PUSH
31705: LD_INT 20
31707: PUSH
31708: LD_INT 45
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31716: LD_VAR 0 6
31720: PPUSH
31721: CALL_OW 264
31725: PUSH
31726: LD_INT 47
31728: PUSH
31729: EMPTY
31730: LIST
31731: IN
31732: IFFALSE 31753
// points := [ 67 , 45 , 75 ] ;
31734: LD_ADDR_VAR 0 9
31738: PUSH
31739: LD_INT 67
31741: PUSH
31742: LD_INT 45
31744: PUSH
31745: LD_INT 75
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31753: LD_VAR 0 6
31757: PPUSH
31758: CALL_OW 264
31762: PUSH
31763: LD_INT 26
31765: PUSH
31766: EMPTY
31767: LIST
31768: IN
31769: IFFALSE 31790
// points := [ 120 , 30 , 80 ] ;
31771: LD_ADDR_VAR 0 9
31775: PUSH
31776: LD_INT 120
31778: PUSH
31779: LD_INT 30
31781: PUSH
31782: LD_INT 80
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31790: LD_VAR 0 6
31794: PPUSH
31795: CALL_OW 264
31799: PUSH
31800: LD_INT 22
31802: PUSH
31803: EMPTY
31804: LIST
31805: IN
31806: IFFALSE 31827
// points := [ 40 , 1 , 1 ] ;
31808: LD_ADDR_VAR 0 9
31812: PUSH
31813: LD_INT 40
31815: PUSH
31816: LD_INT 1
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: EMPTY
31823: LIST
31824: LIST
31825: LIST
31826: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31827: LD_VAR 0 6
31831: PPUSH
31832: CALL_OW 264
31836: PUSH
31837: LD_INT 29
31839: PUSH
31840: EMPTY
31841: LIST
31842: IN
31843: IFFALSE 31864
// points := [ 70 , 200 , 400 ] ;
31845: LD_ADDR_VAR 0 9
31849: PUSH
31850: LD_INT 70
31852: PUSH
31853: LD_INT 200
31855: PUSH
31856: LD_INT 400
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31864: LD_VAR 0 6
31868: PPUSH
31869: CALL_OW 264
31873: PUSH
31874: LD_INT 14
31876: PUSH
31877: LD_INT 53
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: IN
31884: IFFALSE 31905
// points := [ 40 , 10 , 20 ] ;
31886: LD_ADDR_VAR 0 9
31890: PUSH
31891: LD_INT 40
31893: PUSH
31894: LD_INT 10
31896: PUSH
31897: LD_INT 20
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31905: LD_VAR 0 6
31909: PPUSH
31910: CALL_OW 264
31914: PUSH
31915: LD_INT 9
31917: PUSH
31918: EMPTY
31919: LIST
31920: IN
31921: IFFALSE 31942
// points := [ 5 , 70 , 20 ] ;
31923: LD_ADDR_VAR 0 9
31927: PUSH
31928: LD_INT 5
31930: PUSH
31931: LD_INT 70
31933: PUSH
31934: LD_INT 20
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: LIST
31941: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31942: LD_VAR 0 6
31946: PPUSH
31947: CALL_OW 264
31951: PUSH
31952: LD_INT 10
31954: PUSH
31955: EMPTY
31956: LIST
31957: IN
31958: IFFALSE 31979
// points := [ 35 , 110 , 70 ] ;
31960: LD_ADDR_VAR 0 9
31964: PUSH
31965: LD_INT 35
31967: PUSH
31968: LD_INT 110
31970: PUSH
31971: LD_INT 70
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31979: LD_VAR 0 6
31983: PPUSH
31984: CALL_OW 265
31988: PUSH
31989: LD_INT 25
31991: EQUAL
31992: IFFALSE 32013
// points := [ 80 , 65 , 100 ] ;
31994: LD_ADDR_VAR 0 9
31998: PUSH
31999: LD_INT 80
32001: PUSH
32002: LD_INT 65
32004: PUSH
32005: LD_INT 100
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32013: LD_VAR 0 6
32017: PPUSH
32018: CALL_OW 263
32022: PUSH
32023: LD_INT 1
32025: EQUAL
32026: IFFALSE 32061
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32028: LD_ADDR_VAR 0 10
32032: PUSH
32033: LD_VAR 0 10
32037: PUSH
32038: LD_VAR 0 6
32042: PPUSH
32043: CALL_OW 311
32047: PPUSH
32048: LD_INT 3
32050: PPUSH
32051: CALL_OW 259
32055: PUSH
32056: LD_INT 4
32058: MUL
32059: MUL
32060: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32061: LD_VAR 0 6
32065: PPUSH
32066: CALL_OW 263
32070: PUSH
32071: LD_INT 2
32073: EQUAL
32074: IFFALSE 32125
// begin j := IsControledBy ( i ) ;
32076: LD_ADDR_VAR 0 7
32080: PUSH
32081: LD_VAR 0 6
32085: PPUSH
32086: CALL_OW 312
32090: ST_TO_ADDR
// if j then
32091: LD_VAR 0 7
32095: IFFALSE 32125
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32097: LD_ADDR_VAR 0 10
32101: PUSH
32102: LD_VAR 0 10
32106: PUSH
32107: LD_VAR 0 7
32111: PPUSH
32112: LD_INT 3
32114: PPUSH
32115: CALL_OW 259
32119: PUSH
32120: LD_INT 3
32122: MUL
32123: MUL
32124: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32125: LD_VAR 0 6
32129: PPUSH
32130: CALL_OW 264
32134: PUSH
32135: LD_INT 5
32137: PUSH
32138: LD_INT 6
32140: PUSH
32141: LD_INT 46
32143: PUSH
32144: LD_INT 44
32146: PUSH
32147: LD_INT 47
32149: PUSH
32150: LD_INT 45
32152: PUSH
32153: LD_INT 28
32155: PUSH
32156: LD_INT 7
32158: PUSH
32159: LD_INT 27
32161: PUSH
32162: LD_INT 29
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: IN
32177: PUSH
32178: LD_VAR 0 1
32182: PPUSH
32183: LD_INT 52
32185: PPUSH
32186: CALL_OW 321
32190: PUSH
32191: LD_INT 2
32193: EQUAL
32194: AND
32195: IFFALSE 32212
// bpoints := bpoints * 1.2 ;
32197: LD_ADDR_VAR 0 10
32201: PUSH
32202: LD_VAR 0 10
32206: PUSH
32207: LD_REAL  1.20000000000000E+0000
32210: MUL
32211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32212: LD_VAR 0 6
32216: PPUSH
32217: CALL_OW 264
32221: PUSH
32222: LD_INT 6
32224: PUSH
32225: LD_INT 46
32227: PUSH
32228: LD_INT 47
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: LIST
32235: IN
32236: IFFALSE 32253
// bpoints := bpoints * 1.2 ;
32238: LD_ADDR_VAR 0 10
32242: PUSH
32243: LD_VAR 0 10
32247: PUSH
32248: LD_REAL  1.20000000000000E+0000
32251: MUL
32252: ST_TO_ADDR
// end ; unit_building :
32253: GO 32267
32255: LD_INT 3
32257: DOUBLE
32258: EQUAL
32259: IFTRUE 32263
32261: GO 32266
32263: POP
// ; end ;
32264: GO 32267
32266: POP
// for j = 1 to 3 do
32267: LD_ADDR_VAR 0 7
32271: PUSH
32272: DOUBLE
32273: LD_INT 1
32275: DEC
32276: ST_TO_ADDR
32277: LD_INT 3
32279: PUSH
32280: FOR_TO
32281: IFFALSE 32334
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32283: LD_ADDR_VAR 0 5
32287: PUSH
32288: LD_VAR 0 5
32292: PPUSH
32293: LD_VAR 0 7
32297: PPUSH
32298: LD_VAR 0 5
32302: PUSH
32303: LD_VAR 0 7
32307: ARRAY
32308: PUSH
32309: LD_VAR 0 9
32313: PUSH
32314: LD_VAR 0 7
32318: ARRAY
32319: PUSH
32320: LD_VAR 0 10
32324: MUL
32325: PLUS
32326: PPUSH
32327: CALL_OW 1
32331: ST_TO_ADDR
32332: GO 32280
32334: POP
32335: POP
// end ;
32336: GO 30815
32338: POP
32339: POP
// result := Replace ( result , 4 , tmp ) ;
32340: LD_ADDR_VAR 0 5
32344: PUSH
32345: LD_VAR 0 5
32349: PPUSH
32350: LD_INT 4
32352: PPUSH
32353: LD_VAR 0 8
32357: PPUSH
32358: CALL_OW 1
32362: ST_TO_ADDR
// end ;
32363: LD_VAR 0 5
32367: RET
// export function DangerAtRange ( unit , range ) ; begin
32368: LD_INT 0
32370: PPUSH
// if not unit then
32371: LD_VAR 0 1
32375: NOT
32376: IFFALSE 32380
// exit ;
32378: GO 32425
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_VAR 0 1
32389: PPUSH
32390: CALL_OW 255
32394: PPUSH
32395: LD_VAR 0 1
32399: PPUSH
32400: CALL_OW 250
32404: PPUSH
32405: LD_VAR 0 1
32409: PPUSH
32410: CALL_OW 251
32414: PPUSH
32415: LD_VAR 0 2
32419: PPUSH
32420: CALL 30667 0 4
32424: ST_TO_ADDR
// end ;
32425: LD_VAR 0 3
32429: RET
// export function DangerInArea ( side , area ) ; begin
32430: LD_INT 0
32432: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_VAR 0 2
32442: PPUSH
32443: LD_INT 81
32445: PUSH
32446: LD_VAR 0 1
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PPUSH
32455: CALL_OW 70
32459: ST_TO_ADDR
// end ;
32460: LD_VAR 0 3
32464: RET
// export function IsExtension ( b ) ; begin
32465: LD_INT 0
32467: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32468: LD_ADDR_VAR 0 2
32472: PUSH
32473: LD_VAR 0 1
32477: PUSH
32478: LD_INT 23
32480: PUSH
32481: LD_INT 20
32483: PUSH
32484: LD_INT 22
32486: PUSH
32487: LD_INT 17
32489: PUSH
32490: LD_INT 24
32492: PUSH
32493: LD_INT 21
32495: PUSH
32496: LD_INT 19
32498: PUSH
32499: LD_INT 16
32501: PUSH
32502: LD_INT 25
32504: PUSH
32505: LD_INT 18
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: IN
32520: ST_TO_ADDR
// end ;
32521: LD_VAR 0 2
32525: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32526: LD_INT 0
32528: PPUSH
32529: PPUSH
32530: PPUSH
// result := [ ] ;
32531: LD_ADDR_VAR 0 4
32535: PUSH
32536: EMPTY
32537: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32538: LD_ADDR_VAR 0 5
32542: PUSH
32543: LD_VAR 0 2
32547: PPUSH
32548: LD_INT 21
32550: PUSH
32551: LD_INT 3
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PPUSH
32558: CALL_OW 70
32562: ST_TO_ADDR
// if not tmp then
32563: LD_VAR 0 5
32567: NOT
32568: IFFALSE 32572
// exit ;
32570: GO 32636
// if checkLink then
32572: LD_VAR 0 3
32576: IFFALSE 32626
// begin for i in tmp do
32578: LD_ADDR_VAR 0 6
32582: PUSH
32583: LD_VAR 0 5
32587: PUSH
32588: FOR_IN
32589: IFFALSE 32624
// if GetBase ( i ) <> base then
32591: LD_VAR 0 6
32595: PPUSH
32596: CALL_OW 274
32600: PUSH
32601: LD_VAR 0 1
32605: NONEQUAL
32606: IFFALSE 32622
// ComLinkToBase ( base , i ) ;
32608: LD_VAR 0 1
32612: PPUSH
32613: LD_VAR 0 6
32617: PPUSH
32618: CALL_OW 169
32622: GO 32588
32624: POP
32625: POP
// end ; result := tmp ;
32626: LD_ADDR_VAR 0 4
32630: PUSH
32631: LD_VAR 0 5
32635: ST_TO_ADDR
// end ;
32636: LD_VAR 0 4
32640: RET
// export function ComComplete ( units , b ) ; var i ; begin
32641: LD_INT 0
32643: PPUSH
32644: PPUSH
// if not units then
32645: LD_VAR 0 1
32649: NOT
32650: IFFALSE 32654
// exit ;
32652: GO 32744
// for i in units do
32654: LD_ADDR_VAR 0 4
32658: PUSH
32659: LD_VAR 0 1
32663: PUSH
32664: FOR_IN
32665: IFFALSE 32742
// if BuildingStatus ( b ) = bs_build then
32667: LD_VAR 0 2
32671: PPUSH
32672: CALL_OW 461
32676: PUSH
32677: LD_INT 1
32679: EQUAL
32680: IFFALSE 32740
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32682: LD_VAR 0 4
32686: PPUSH
32687: LD_STRING h
32689: PUSH
32690: LD_VAR 0 2
32694: PPUSH
32695: CALL_OW 250
32699: PUSH
32700: LD_VAR 0 2
32704: PPUSH
32705: CALL_OW 251
32709: PUSH
32710: LD_VAR 0 2
32714: PUSH
32715: LD_INT 0
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: PUSH
32733: EMPTY
32734: LIST
32735: PPUSH
32736: CALL_OW 446
32740: GO 32664
32742: POP
32743: POP
// end ;
32744: LD_VAR 0 3
32748: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32749: LD_INT 0
32751: PPUSH
32752: PPUSH
32753: PPUSH
32754: PPUSH
32755: PPUSH
32756: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32757: LD_VAR 0 1
32761: NOT
32762: PUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 263
32772: PUSH
32773: LD_INT 2
32775: NONEQUAL
32776: OR
32777: IFFALSE 32781
// exit ;
32779: GO 33097
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32781: LD_ADDR_VAR 0 6
32785: PUSH
32786: LD_INT 22
32788: PUSH
32789: LD_VAR 0 1
32793: PPUSH
32794: CALL_OW 255
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: PUSH
32806: LD_INT 30
32808: PUSH
32809: LD_INT 36
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 34
32818: PUSH
32819: LD_INT 31
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PPUSH
32835: CALL_OW 69
32839: ST_TO_ADDR
// if not tmp then
32840: LD_VAR 0 6
32844: NOT
32845: IFFALSE 32849
// exit ;
32847: GO 33097
// result := [ ] ;
32849: LD_ADDR_VAR 0 2
32853: PUSH
32854: EMPTY
32855: ST_TO_ADDR
// for i in tmp do
32856: LD_ADDR_VAR 0 3
32860: PUSH
32861: LD_VAR 0 6
32865: PUSH
32866: FOR_IN
32867: IFFALSE 32938
// begin t := UnitsInside ( i ) ;
32869: LD_ADDR_VAR 0 4
32873: PUSH
32874: LD_VAR 0 3
32878: PPUSH
32879: CALL_OW 313
32883: ST_TO_ADDR
// if t then
32884: LD_VAR 0 4
32888: IFFALSE 32936
// for j in t do
32890: LD_ADDR_VAR 0 7
32894: PUSH
32895: LD_VAR 0 4
32899: PUSH
32900: FOR_IN
32901: IFFALSE 32934
// result := Replace ( result , result + 1 , j ) ;
32903: LD_ADDR_VAR 0 2
32907: PUSH
32908: LD_VAR 0 2
32912: PPUSH
32913: LD_VAR 0 2
32917: PUSH
32918: LD_INT 1
32920: PLUS
32921: PPUSH
32922: LD_VAR 0 7
32926: PPUSH
32927: CALL_OW 1
32931: ST_TO_ADDR
32932: GO 32900
32934: POP
32935: POP
// end ;
32936: GO 32866
32938: POP
32939: POP
// if not result then
32940: LD_VAR 0 2
32944: NOT
32945: IFFALSE 32949
// exit ;
32947: GO 33097
// mech := result [ 1 ] ;
32949: LD_ADDR_VAR 0 5
32953: PUSH
32954: LD_VAR 0 2
32958: PUSH
32959: LD_INT 1
32961: ARRAY
32962: ST_TO_ADDR
// if result > 1 then
32963: LD_VAR 0 2
32967: PUSH
32968: LD_INT 1
32970: GREATER
32971: IFFALSE 33083
// begin for i = 2 to result do
32973: LD_ADDR_VAR 0 3
32977: PUSH
32978: DOUBLE
32979: LD_INT 2
32981: DEC
32982: ST_TO_ADDR
32983: LD_VAR 0 2
32987: PUSH
32988: FOR_TO
32989: IFFALSE 33081
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32991: LD_ADDR_VAR 0 4
32995: PUSH
32996: LD_VAR 0 2
33000: PUSH
33001: LD_VAR 0 3
33005: ARRAY
33006: PPUSH
33007: LD_INT 3
33009: PPUSH
33010: CALL_OW 259
33014: PUSH
33015: LD_VAR 0 2
33019: PUSH
33020: LD_VAR 0 3
33024: ARRAY
33025: PPUSH
33026: CALL_OW 432
33030: MINUS
33031: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33032: LD_VAR 0 4
33036: PUSH
33037: LD_VAR 0 5
33041: PPUSH
33042: LD_INT 3
33044: PPUSH
33045: CALL_OW 259
33049: PUSH
33050: LD_VAR 0 5
33054: PPUSH
33055: CALL_OW 432
33059: MINUS
33060: GREATEREQUAL
33061: IFFALSE 33079
// mech := result [ i ] ;
33063: LD_ADDR_VAR 0 5
33067: PUSH
33068: LD_VAR 0 2
33072: PUSH
33073: LD_VAR 0 3
33077: ARRAY
33078: ST_TO_ADDR
// end ;
33079: GO 32988
33081: POP
33082: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33083: LD_VAR 0 1
33087: PPUSH
33088: LD_VAR 0 5
33092: PPUSH
33093: CALL_OW 135
// end ;
33097: LD_VAR 0 2
33101: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33102: LD_INT 0
33104: PPUSH
33105: PPUSH
33106: PPUSH
33107: PPUSH
33108: PPUSH
33109: PPUSH
33110: PPUSH
33111: PPUSH
33112: PPUSH
33113: PPUSH
33114: PPUSH
33115: PPUSH
33116: PPUSH
// result := [ ] ;
33117: LD_ADDR_VAR 0 7
33121: PUSH
33122: EMPTY
33123: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33124: LD_VAR 0 1
33128: PPUSH
33129: CALL_OW 266
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: LD_INT 1
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: IN
33144: NOT
33145: IFFALSE 33149
// exit ;
33147: GO 34783
// if name then
33149: LD_VAR 0 3
33153: IFFALSE 33169
// SetBName ( base_dep , name ) ;
33155: LD_VAR 0 1
33159: PPUSH
33160: LD_VAR 0 3
33164: PPUSH
33165: CALL_OW 500
// base := GetBase ( base_dep ) ;
33169: LD_ADDR_VAR 0 15
33173: PUSH
33174: LD_VAR 0 1
33178: PPUSH
33179: CALL_OW 274
33183: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33184: LD_ADDR_VAR 0 16
33188: PUSH
33189: LD_VAR 0 1
33193: PPUSH
33194: CALL_OW 255
33198: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33199: LD_ADDR_VAR 0 17
33203: PUSH
33204: LD_VAR 0 1
33208: PPUSH
33209: CALL_OW 248
33213: ST_TO_ADDR
// if sources then
33214: LD_VAR 0 5
33218: IFFALSE 33265
// for i = 1 to 3 do
33220: LD_ADDR_VAR 0 8
33224: PUSH
33225: DOUBLE
33226: LD_INT 1
33228: DEC
33229: ST_TO_ADDR
33230: LD_INT 3
33232: PUSH
33233: FOR_TO
33234: IFFALSE 33263
// AddResourceType ( base , i , sources [ i ] ) ;
33236: LD_VAR 0 15
33240: PPUSH
33241: LD_VAR 0 8
33245: PPUSH
33246: LD_VAR 0 5
33250: PUSH
33251: LD_VAR 0 8
33255: ARRAY
33256: PPUSH
33257: CALL_OW 276
33261: GO 33233
33263: POP
33264: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33265: LD_ADDR_VAR 0 18
33269: PUSH
33270: LD_VAR 0 15
33274: PPUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: LD_INT 1
33282: PPUSH
33283: CALL 32526 0 3
33287: ST_TO_ADDR
// InitHc ;
33288: CALL_OW 19
// InitUc ;
33292: CALL_OW 18
// uc_side := side ;
33296: LD_ADDR_OWVAR 20
33300: PUSH
33301: LD_VAR 0 16
33305: ST_TO_ADDR
// uc_nation := nation ;
33306: LD_ADDR_OWVAR 21
33310: PUSH
33311: LD_VAR 0 17
33315: ST_TO_ADDR
// if buildings then
33316: LD_VAR 0 18
33320: IFFALSE 34642
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33322: LD_ADDR_VAR 0 19
33326: PUSH
33327: LD_VAR 0 18
33331: PPUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 30
33337: PUSH
33338: LD_INT 29
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 30
33347: PUSH
33348: LD_INT 30
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: LIST
33359: PPUSH
33360: CALL_OW 72
33364: ST_TO_ADDR
// if tmp then
33365: LD_VAR 0 19
33369: IFFALSE 33417
// for i in tmp do
33371: LD_ADDR_VAR 0 8
33375: PUSH
33376: LD_VAR 0 19
33380: PUSH
33381: FOR_IN
33382: IFFALSE 33415
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33384: LD_VAR 0 8
33388: PPUSH
33389: CALL_OW 250
33393: PPUSH
33394: LD_VAR 0 8
33398: PPUSH
33399: CALL_OW 251
33403: PPUSH
33404: LD_VAR 0 16
33408: PPUSH
33409: CALL_OW 441
33413: GO 33381
33415: POP
33416: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33417: LD_VAR 0 18
33421: PPUSH
33422: LD_INT 2
33424: PUSH
33425: LD_INT 30
33427: PUSH
33428: LD_INT 32
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 30
33437: PUSH
33438: LD_INT 33
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: LIST
33449: PPUSH
33450: CALL_OW 72
33454: IFFALSE 33542
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33456: LD_ADDR_VAR 0 8
33460: PUSH
33461: LD_VAR 0 18
33465: PPUSH
33466: LD_INT 2
33468: PUSH
33469: LD_INT 30
33471: PUSH
33472: LD_INT 32
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 30
33481: PUSH
33482: LD_INT 33
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: PPUSH
33494: CALL_OW 72
33498: PUSH
33499: FOR_IN
33500: IFFALSE 33540
// begin if not GetBWeapon ( i ) then
33502: LD_VAR 0 8
33506: PPUSH
33507: CALL_OW 269
33511: NOT
33512: IFFALSE 33538
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33514: LD_VAR 0 8
33518: PPUSH
33519: LD_VAR 0 8
33523: PPUSH
33524: LD_VAR 0 2
33528: PPUSH
33529: CALL 34788 0 2
33533: PPUSH
33534: CALL_OW 431
// end ;
33538: GO 33499
33540: POP
33541: POP
// end ; for i = 1 to personel do
33542: LD_ADDR_VAR 0 8
33546: PUSH
33547: DOUBLE
33548: LD_INT 1
33550: DEC
33551: ST_TO_ADDR
33552: LD_VAR 0 6
33556: PUSH
33557: FOR_TO
33558: IFFALSE 34622
// begin if i > 4 then
33560: LD_VAR 0 8
33564: PUSH
33565: LD_INT 4
33567: GREATER
33568: IFFALSE 33572
// break ;
33570: GO 34622
// case i of 1 :
33572: LD_VAR 0 8
33576: PUSH
33577: LD_INT 1
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33665
33585: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33586: LD_ADDR_VAR 0 12
33590: PUSH
33591: LD_VAR 0 18
33595: PPUSH
33596: LD_INT 22
33598: PUSH
33599: LD_VAR 0 16
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 58
33610: PUSH
33611: EMPTY
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 30
33619: PUSH
33620: LD_INT 32
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 30
33629: PUSH
33630: LD_INT 4
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 30
33639: PUSH
33640: LD_INT 5
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PPUSH
33658: CALL_OW 72
33662: ST_TO_ADDR
33663: GO 33887
33665: LD_INT 2
33667: DOUBLE
33668: EQUAL
33669: IFTRUE 33673
33671: GO 33735
33673: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33674: LD_ADDR_VAR 0 12
33678: PUSH
33679: LD_VAR 0 18
33683: PPUSH
33684: LD_INT 22
33686: PUSH
33687: LD_VAR 0 16
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 2
33698: PUSH
33699: LD_INT 30
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 30
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: LIST
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PPUSH
33728: CALL_OW 72
33732: ST_TO_ADDR
33733: GO 33887
33735: LD_INT 3
33737: DOUBLE
33738: EQUAL
33739: IFTRUE 33743
33741: GO 33805
33743: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33744: LD_ADDR_VAR 0 12
33748: PUSH
33749: LD_VAR 0 18
33753: PPUSH
33754: LD_INT 22
33756: PUSH
33757: LD_VAR 0 16
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: LD_INT 30
33771: PUSH
33772: LD_INT 2
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 30
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: LIST
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PPUSH
33798: CALL_OW 72
33802: ST_TO_ADDR
33803: GO 33887
33805: LD_INT 4
33807: DOUBLE
33808: EQUAL
33809: IFTRUE 33813
33811: GO 33886
33813: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33814: LD_ADDR_VAR 0 12
33818: PUSH
33819: LD_VAR 0 18
33823: PPUSH
33824: LD_INT 22
33826: PUSH
33827: LD_VAR 0 16
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 2
33838: PUSH
33839: LD_INT 30
33841: PUSH
33842: LD_INT 6
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 30
33851: PUSH
33852: LD_INT 7
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 30
33861: PUSH
33862: LD_INT 8
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: EMPTY
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PPUSH
33879: CALL_OW 72
33883: ST_TO_ADDR
33884: GO 33887
33886: POP
// if i = 1 then
33887: LD_VAR 0 8
33891: PUSH
33892: LD_INT 1
33894: EQUAL
33895: IFFALSE 34006
// begin tmp := [ ] ;
33897: LD_ADDR_VAR 0 19
33901: PUSH
33902: EMPTY
33903: ST_TO_ADDR
// for j in f do
33904: LD_ADDR_VAR 0 9
33908: PUSH
33909: LD_VAR 0 12
33913: PUSH
33914: FOR_IN
33915: IFFALSE 33988
// if GetBType ( j ) = b_bunker then
33917: LD_VAR 0 9
33921: PPUSH
33922: CALL_OW 266
33926: PUSH
33927: LD_INT 32
33929: EQUAL
33930: IFFALSE 33957
// tmp := Insert ( tmp , 1 , j ) else
33932: LD_ADDR_VAR 0 19
33936: PUSH
33937: LD_VAR 0 19
33941: PPUSH
33942: LD_INT 1
33944: PPUSH
33945: LD_VAR 0 9
33949: PPUSH
33950: CALL_OW 2
33954: ST_TO_ADDR
33955: GO 33986
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33957: LD_ADDR_VAR 0 19
33961: PUSH
33962: LD_VAR 0 19
33966: PPUSH
33967: LD_VAR 0 19
33971: PUSH
33972: LD_INT 1
33974: PLUS
33975: PPUSH
33976: LD_VAR 0 9
33980: PPUSH
33981: CALL_OW 2
33985: ST_TO_ADDR
33986: GO 33914
33988: POP
33989: POP
// if tmp then
33990: LD_VAR 0 19
33994: IFFALSE 34006
// f := tmp ;
33996: LD_ADDR_VAR 0 12
34000: PUSH
34001: LD_VAR 0 19
34005: ST_TO_ADDR
// end ; x := personel [ i ] ;
34006: LD_ADDR_VAR 0 13
34010: PUSH
34011: LD_VAR 0 6
34015: PUSH
34016: LD_VAR 0 8
34020: ARRAY
34021: ST_TO_ADDR
// if x = - 1 then
34022: LD_VAR 0 13
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: EQUAL
34031: IFFALSE 34240
// begin for j in f do
34033: LD_ADDR_VAR 0 9
34037: PUSH
34038: LD_VAR 0 12
34042: PUSH
34043: FOR_IN
34044: IFFALSE 34236
// repeat InitHc ;
34046: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34050: LD_VAR 0 9
34054: PPUSH
34055: CALL_OW 266
34059: PUSH
34060: LD_INT 5
34062: EQUAL
34063: IFFALSE 34133
// begin if UnitsInside ( j ) < 3 then
34065: LD_VAR 0 9
34069: PPUSH
34070: CALL_OW 313
34074: PUSH
34075: LD_INT 3
34077: LESS
34078: IFFALSE 34114
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34080: LD_INT 0
34082: PPUSH
34083: LD_INT 5
34085: PUSH
34086: LD_INT 8
34088: PUSH
34089: LD_INT 9
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: PUSH
34097: LD_VAR 0 17
34101: ARRAY
34102: PPUSH
34103: LD_VAR 0 4
34107: PPUSH
34108: CALL_OW 380
34112: GO 34131
// PrepareHuman ( false , i , skill ) ;
34114: LD_INT 0
34116: PPUSH
34117: LD_VAR 0 8
34121: PPUSH
34122: LD_VAR 0 4
34126: PPUSH
34127: CALL_OW 380
// end else
34131: GO 34150
// PrepareHuman ( false , i , skill ) ;
34133: LD_INT 0
34135: PPUSH
34136: LD_VAR 0 8
34140: PPUSH
34141: LD_VAR 0 4
34145: PPUSH
34146: CALL_OW 380
// un := CreateHuman ;
34150: LD_ADDR_VAR 0 14
34154: PUSH
34155: CALL_OW 44
34159: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34160: LD_ADDR_VAR 0 7
34164: PUSH
34165: LD_VAR 0 7
34169: PPUSH
34170: LD_INT 1
34172: PPUSH
34173: LD_VAR 0 14
34177: PPUSH
34178: CALL_OW 2
34182: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34183: LD_VAR 0 14
34187: PPUSH
34188: LD_VAR 0 9
34192: PPUSH
34193: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34197: LD_VAR 0 9
34201: PPUSH
34202: CALL_OW 313
34206: PUSH
34207: LD_INT 6
34209: EQUAL
34210: PUSH
34211: LD_VAR 0 9
34215: PPUSH
34216: CALL_OW 266
34220: PUSH
34221: LD_INT 32
34223: PUSH
34224: LD_INT 31
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: IN
34231: OR
34232: IFFALSE 34046
34234: GO 34043
34236: POP
34237: POP
// end else
34238: GO 34620
// for j = 1 to x do
34240: LD_ADDR_VAR 0 9
34244: PUSH
34245: DOUBLE
34246: LD_INT 1
34248: DEC
34249: ST_TO_ADDR
34250: LD_VAR 0 13
34254: PUSH
34255: FOR_TO
34256: IFFALSE 34618
// begin InitHc ;
34258: CALL_OW 19
// if not f then
34262: LD_VAR 0 12
34266: NOT
34267: IFFALSE 34356
// begin PrepareHuman ( false , i , skill ) ;
34269: LD_INT 0
34271: PPUSH
34272: LD_VAR 0 8
34276: PPUSH
34277: LD_VAR 0 4
34281: PPUSH
34282: CALL_OW 380
// un := CreateHuman ;
34286: LD_ADDR_VAR 0 14
34290: PUSH
34291: CALL_OW 44
34295: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34296: LD_ADDR_VAR 0 7
34300: PUSH
34301: LD_VAR 0 7
34305: PPUSH
34306: LD_INT 1
34308: PPUSH
34309: LD_VAR 0 14
34313: PPUSH
34314: CALL_OW 2
34318: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34319: LD_VAR 0 14
34323: PPUSH
34324: LD_VAR 0 1
34328: PPUSH
34329: CALL_OW 250
34333: PPUSH
34334: LD_VAR 0 1
34338: PPUSH
34339: CALL_OW 251
34343: PPUSH
34344: LD_INT 10
34346: PPUSH
34347: LD_INT 0
34349: PPUSH
34350: CALL_OW 50
// continue ;
34354: GO 34255
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34356: LD_VAR 0 12
34360: PUSH
34361: LD_INT 1
34363: ARRAY
34364: PPUSH
34365: CALL_OW 313
34369: PUSH
34370: LD_VAR 0 12
34374: PUSH
34375: LD_INT 1
34377: ARRAY
34378: PPUSH
34379: CALL_OW 266
34383: PUSH
34384: LD_INT 32
34386: PUSH
34387: LD_INT 31
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: IN
34394: AND
34395: PUSH
34396: LD_VAR 0 12
34400: PUSH
34401: LD_INT 1
34403: ARRAY
34404: PPUSH
34405: CALL_OW 313
34409: PUSH
34410: LD_INT 6
34412: EQUAL
34413: OR
34414: IFFALSE 34434
// f := Delete ( f , 1 ) ;
34416: LD_ADDR_VAR 0 12
34420: PUSH
34421: LD_VAR 0 12
34425: PPUSH
34426: LD_INT 1
34428: PPUSH
34429: CALL_OW 3
34433: ST_TO_ADDR
// if not f then
34434: LD_VAR 0 12
34438: NOT
34439: IFFALSE 34457
// begin x := x + 2 ;
34441: LD_ADDR_VAR 0 13
34445: PUSH
34446: LD_VAR 0 13
34450: PUSH
34451: LD_INT 2
34453: PLUS
34454: ST_TO_ADDR
// continue ;
34455: GO 34255
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34457: LD_VAR 0 12
34461: PUSH
34462: LD_INT 1
34464: ARRAY
34465: PPUSH
34466: CALL_OW 266
34470: PUSH
34471: LD_INT 5
34473: EQUAL
34474: IFFALSE 34548
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34476: LD_VAR 0 12
34480: PUSH
34481: LD_INT 1
34483: ARRAY
34484: PPUSH
34485: CALL_OW 313
34489: PUSH
34490: LD_INT 3
34492: LESS
34493: IFFALSE 34529
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34495: LD_INT 0
34497: PPUSH
34498: LD_INT 5
34500: PUSH
34501: LD_INT 8
34503: PUSH
34504: LD_INT 9
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: PUSH
34512: LD_VAR 0 17
34516: ARRAY
34517: PPUSH
34518: LD_VAR 0 4
34522: PPUSH
34523: CALL_OW 380
34527: GO 34546
// PrepareHuman ( false , i , skill ) ;
34529: LD_INT 0
34531: PPUSH
34532: LD_VAR 0 8
34536: PPUSH
34537: LD_VAR 0 4
34541: PPUSH
34542: CALL_OW 380
// end else
34546: GO 34565
// PrepareHuman ( false , i , skill ) ;
34548: LD_INT 0
34550: PPUSH
34551: LD_VAR 0 8
34555: PPUSH
34556: LD_VAR 0 4
34560: PPUSH
34561: CALL_OW 380
// un := CreateHuman ;
34565: LD_ADDR_VAR 0 14
34569: PUSH
34570: CALL_OW 44
34574: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34575: LD_ADDR_VAR 0 7
34579: PUSH
34580: LD_VAR 0 7
34584: PPUSH
34585: LD_INT 1
34587: PPUSH
34588: LD_VAR 0 14
34592: PPUSH
34593: CALL_OW 2
34597: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34598: LD_VAR 0 14
34602: PPUSH
34603: LD_VAR 0 12
34607: PUSH
34608: LD_INT 1
34610: ARRAY
34611: PPUSH
34612: CALL_OW 52
// end ;
34616: GO 34255
34618: POP
34619: POP
// end ;
34620: GO 33557
34622: POP
34623: POP
// result := result ^ buildings ;
34624: LD_ADDR_VAR 0 7
34628: PUSH
34629: LD_VAR 0 7
34633: PUSH
34634: LD_VAR 0 18
34638: ADD
34639: ST_TO_ADDR
// end else
34640: GO 34783
// begin for i = 1 to personel do
34642: LD_ADDR_VAR 0 8
34646: PUSH
34647: DOUBLE
34648: LD_INT 1
34650: DEC
34651: ST_TO_ADDR
34652: LD_VAR 0 6
34656: PUSH
34657: FOR_TO
34658: IFFALSE 34781
// begin if i > 4 then
34660: LD_VAR 0 8
34664: PUSH
34665: LD_INT 4
34667: GREATER
34668: IFFALSE 34672
// break ;
34670: GO 34781
// x := personel [ i ] ;
34672: LD_ADDR_VAR 0 13
34676: PUSH
34677: LD_VAR 0 6
34681: PUSH
34682: LD_VAR 0 8
34686: ARRAY
34687: ST_TO_ADDR
// if x = - 1 then
34688: LD_VAR 0 13
34692: PUSH
34693: LD_INT 1
34695: NEG
34696: EQUAL
34697: IFFALSE 34701
// continue ;
34699: GO 34657
// PrepareHuman ( false , i , skill ) ;
34701: LD_INT 0
34703: PPUSH
34704: LD_VAR 0 8
34708: PPUSH
34709: LD_VAR 0 4
34713: PPUSH
34714: CALL_OW 380
// un := CreateHuman ;
34718: LD_ADDR_VAR 0 14
34722: PUSH
34723: CALL_OW 44
34727: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34728: LD_VAR 0 14
34732: PPUSH
34733: LD_VAR 0 1
34737: PPUSH
34738: CALL_OW 250
34742: PPUSH
34743: LD_VAR 0 1
34747: PPUSH
34748: CALL_OW 251
34752: PPUSH
34753: LD_INT 10
34755: PPUSH
34756: LD_INT 0
34758: PPUSH
34759: CALL_OW 50
// result := result ^ un ;
34763: LD_ADDR_VAR 0 7
34767: PUSH
34768: LD_VAR 0 7
34772: PUSH
34773: LD_VAR 0 14
34777: ADD
34778: ST_TO_ADDR
// end ;
34779: GO 34657
34781: POP
34782: POP
// end ; end ;
34783: LD_VAR 0 7
34787: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34788: LD_INT 0
34790: PPUSH
34791: PPUSH
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
// result := false ;
34806: LD_ADDR_VAR 0 3
34810: PUSH
34811: LD_INT 0
34813: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34814: LD_VAR 0 1
34818: NOT
34819: PUSH
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 266
34829: PUSH
34830: LD_INT 32
34832: PUSH
34833: LD_INT 33
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: IN
34840: NOT
34841: OR
34842: IFFALSE 34846
// exit ;
34844: GO 35955
// nat := GetNation ( tower ) ;
34846: LD_ADDR_VAR 0 12
34850: PUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL_OW 248
34860: ST_TO_ADDR
// side := GetSide ( tower ) ;
34861: LD_ADDR_VAR 0 16
34865: PUSH
34866: LD_VAR 0 1
34870: PPUSH
34871: CALL_OW 255
34875: ST_TO_ADDR
// x := GetX ( tower ) ;
34876: LD_ADDR_VAR 0 10
34880: PUSH
34881: LD_VAR 0 1
34885: PPUSH
34886: CALL_OW 250
34890: ST_TO_ADDR
// y := GetY ( tower ) ;
34891: LD_ADDR_VAR 0 11
34895: PUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 251
34905: ST_TO_ADDR
// if not x or not y then
34906: LD_VAR 0 10
34910: NOT
34911: PUSH
34912: LD_VAR 0 11
34916: NOT
34917: OR
34918: IFFALSE 34922
// exit ;
34920: GO 35955
// weapon := 0 ;
34922: LD_ADDR_VAR 0 18
34926: PUSH
34927: LD_INT 0
34929: ST_TO_ADDR
// fac_list := [ ] ;
34930: LD_ADDR_VAR 0 17
34934: PUSH
34935: EMPTY
34936: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34937: LD_ADDR_VAR 0 6
34941: PUSH
34942: LD_VAR 0 1
34946: PPUSH
34947: CALL_OW 274
34951: PPUSH
34952: LD_VAR 0 2
34956: PPUSH
34957: LD_INT 0
34959: PPUSH
34960: CALL 32526 0 3
34964: PPUSH
34965: LD_INT 30
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PPUSH
34975: CALL_OW 72
34979: ST_TO_ADDR
// if not factories then
34980: LD_VAR 0 6
34984: NOT
34985: IFFALSE 34989
// exit ;
34987: GO 35955
// for i in factories do
34989: LD_ADDR_VAR 0 8
34993: PUSH
34994: LD_VAR 0 6
34998: PUSH
34999: FOR_IN
35000: IFFALSE 35025
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35002: LD_ADDR_VAR 0 17
35006: PUSH
35007: LD_VAR 0 17
35011: PUSH
35012: LD_VAR 0 8
35016: PPUSH
35017: CALL_OW 478
35021: UNION
35022: ST_TO_ADDR
35023: GO 34999
35025: POP
35026: POP
// if not fac_list then
35027: LD_VAR 0 17
35031: NOT
35032: IFFALSE 35036
// exit ;
35034: GO 35955
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35036: LD_ADDR_VAR 0 5
35040: PUSH
35041: LD_INT 4
35043: PUSH
35044: LD_INT 5
35046: PUSH
35047: LD_INT 9
35049: PUSH
35050: LD_INT 10
35052: PUSH
35053: LD_INT 6
35055: PUSH
35056: LD_INT 7
35058: PUSH
35059: LD_INT 11
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: LIST
35066: LIST
35067: LIST
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 27
35073: PUSH
35074: LD_INT 28
35076: PUSH
35077: LD_INT 26
35079: PUSH
35080: LD_INT 30
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 43
35091: PUSH
35092: LD_INT 44
35094: PUSH
35095: LD_INT 46
35097: PUSH
35098: LD_INT 45
35100: PUSH
35101: LD_INT 47
35103: PUSH
35104: LD_INT 49
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: PUSH
35120: LD_VAR 0 12
35124: ARRAY
35125: ST_TO_ADDR
// list := list isect fac_list ;
35126: LD_ADDR_VAR 0 5
35130: PUSH
35131: LD_VAR 0 5
35135: PUSH
35136: LD_VAR 0 17
35140: ISECT
35141: ST_TO_ADDR
// if not list then
35142: LD_VAR 0 5
35146: NOT
35147: IFFALSE 35151
// exit ;
35149: GO 35955
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35151: LD_VAR 0 12
35155: PUSH
35156: LD_INT 3
35158: EQUAL
35159: PUSH
35160: LD_INT 49
35162: PUSH
35163: LD_VAR 0 5
35167: IN
35168: AND
35169: PUSH
35170: LD_INT 31
35172: PPUSH
35173: LD_VAR 0 16
35177: PPUSH
35178: CALL_OW 321
35182: PUSH
35183: LD_INT 2
35185: EQUAL
35186: AND
35187: IFFALSE 35247
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35189: LD_INT 22
35191: PUSH
35192: LD_VAR 0 16
35196: PUSH
35197: EMPTY
35198: LIST
35199: LIST
35200: PUSH
35201: LD_INT 35
35203: PUSH
35204: LD_INT 49
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: PUSH
35211: LD_INT 91
35213: PUSH
35214: LD_VAR 0 1
35218: PUSH
35219: LD_INT 10
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: LIST
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: PPUSH
35232: CALL_OW 69
35236: NOT
35237: IFFALSE 35247
// weapon := ru_time_lapser ;
35239: LD_ADDR_VAR 0 18
35243: PUSH
35244: LD_INT 49
35246: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35247: LD_VAR 0 12
35251: PUSH
35252: LD_INT 1
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: IN
35262: PUSH
35263: LD_INT 11
35265: PUSH
35266: LD_VAR 0 5
35270: IN
35271: PUSH
35272: LD_INT 30
35274: PUSH
35275: LD_VAR 0 5
35279: IN
35280: OR
35281: AND
35282: PUSH
35283: LD_INT 6
35285: PPUSH
35286: LD_VAR 0 16
35290: PPUSH
35291: CALL_OW 321
35295: PUSH
35296: LD_INT 2
35298: EQUAL
35299: AND
35300: IFFALSE 35465
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35302: LD_INT 22
35304: PUSH
35305: LD_VAR 0 16
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: PUSH
35317: LD_INT 35
35319: PUSH
35320: LD_INT 11
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 35
35329: PUSH
35330: LD_INT 30
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 91
35344: PUSH
35345: LD_VAR 0 1
35349: PUSH
35350: LD_INT 18
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: LIST
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: LIST
35362: PPUSH
35363: CALL_OW 69
35367: NOT
35368: PUSH
35369: LD_INT 22
35371: PUSH
35372: LD_VAR 0 16
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 2
35383: PUSH
35384: LD_INT 30
35386: PUSH
35387: LD_INT 32
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 30
35396: PUSH
35397: LD_INT 33
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 91
35411: PUSH
35412: LD_VAR 0 1
35416: PUSH
35417: LD_INT 12
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: LIST
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: PUSH
35430: EMPTY
35431: LIST
35432: PPUSH
35433: CALL_OW 69
35437: PUSH
35438: LD_INT 2
35440: GREATER
35441: AND
35442: IFFALSE 35465
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35444: LD_ADDR_VAR 0 18
35448: PUSH
35449: LD_INT 11
35451: PUSH
35452: LD_INT 30
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: LD_VAR 0 12
35463: ARRAY
35464: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35465: LD_VAR 0 18
35469: NOT
35470: PUSH
35471: LD_INT 40
35473: PPUSH
35474: LD_VAR 0 16
35478: PPUSH
35479: CALL_OW 321
35483: PUSH
35484: LD_INT 2
35486: EQUAL
35487: AND
35488: PUSH
35489: LD_INT 7
35491: PUSH
35492: LD_VAR 0 5
35496: IN
35497: PUSH
35498: LD_INT 28
35500: PUSH
35501: LD_VAR 0 5
35505: IN
35506: OR
35507: PUSH
35508: LD_INT 45
35510: PUSH
35511: LD_VAR 0 5
35515: IN
35516: OR
35517: AND
35518: IFFALSE 35772
// begin hex := GetHexInfo ( x , y ) ;
35520: LD_ADDR_VAR 0 4
35524: PUSH
35525: LD_VAR 0 10
35529: PPUSH
35530: LD_VAR 0 11
35534: PPUSH
35535: CALL_OW 546
35539: ST_TO_ADDR
// if hex [ 1 ] then
35540: LD_VAR 0 4
35544: PUSH
35545: LD_INT 1
35547: ARRAY
35548: IFFALSE 35552
// exit ;
35550: GO 35955
// height := hex [ 2 ] ;
35552: LD_ADDR_VAR 0 15
35556: PUSH
35557: LD_VAR 0 4
35561: PUSH
35562: LD_INT 2
35564: ARRAY
35565: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35566: LD_ADDR_VAR 0 14
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 2
35576: PUSH
35577: LD_INT 3
35579: PUSH
35580: LD_INT 5
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: ST_TO_ADDR
// for i in tmp do
35589: LD_ADDR_VAR 0 8
35593: PUSH
35594: LD_VAR 0 14
35598: PUSH
35599: FOR_IN
35600: IFFALSE 35770
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35602: LD_ADDR_VAR 0 9
35606: PUSH
35607: LD_VAR 0 10
35611: PPUSH
35612: LD_VAR 0 8
35616: PPUSH
35617: LD_INT 5
35619: PPUSH
35620: CALL_OW 272
35624: PUSH
35625: LD_VAR 0 11
35629: PPUSH
35630: LD_VAR 0 8
35634: PPUSH
35635: LD_INT 5
35637: PPUSH
35638: CALL_OW 273
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35647: LD_VAR 0 9
35651: PUSH
35652: LD_INT 1
35654: ARRAY
35655: PPUSH
35656: LD_VAR 0 9
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: PPUSH
35665: CALL_OW 488
35669: IFFALSE 35768
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35671: LD_ADDR_VAR 0 4
35675: PUSH
35676: LD_VAR 0 9
35680: PUSH
35681: LD_INT 1
35683: ARRAY
35684: PPUSH
35685: LD_VAR 0 9
35689: PUSH
35690: LD_INT 2
35692: ARRAY
35693: PPUSH
35694: CALL_OW 546
35698: ST_TO_ADDR
// if hex [ 1 ] then
35699: LD_VAR 0 4
35703: PUSH
35704: LD_INT 1
35706: ARRAY
35707: IFFALSE 35711
// continue ;
35709: GO 35599
// h := hex [ 2 ] ;
35711: LD_ADDR_VAR 0 13
35715: PUSH
35716: LD_VAR 0 4
35720: PUSH
35721: LD_INT 2
35723: ARRAY
35724: ST_TO_ADDR
// if h + 7 < height then
35725: LD_VAR 0 13
35729: PUSH
35730: LD_INT 7
35732: PLUS
35733: PUSH
35734: LD_VAR 0 15
35738: LESS
35739: IFFALSE 35768
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35741: LD_ADDR_VAR 0 18
35745: PUSH
35746: LD_INT 7
35748: PUSH
35749: LD_INT 28
35751: PUSH
35752: LD_INT 45
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: PUSH
35760: LD_VAR 0 12
35764: ARRAY
35765: ST_TO_ADDR
// break ;
35766: GO 35770
// end ; end ; end ;
35768: GO 35599
35770: POP
35771: POP
// end ; if not weapon then
35772: LD_VAR 0 18
35776: NOT
35777: IFFALSE 35837
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35779: LD_ADDR_VAR 0 5
35783: PUSH
35784: LD_VAR 0 5
35788: PUSH
35789: LD_INT 11
35791: PUSH
35792: LD_INT 30
35794: PUSH
35795: LD_INT 49
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: LIST
35802: DIFF
35803: ST_TO_ADDR
// if not list then
35804: LD_VAR 0 5
35808: NOT
35809: IFFALSE 35813
// exit ;
35811: GO 35955
// weapon := list [ rand ( 1 , list ) ] ;
35813: LD_ADDR_VAR 0 18
35817: PUSH
35818: LD_VAR 0 5
35822: PUSH
35823: LD_INT 1
35825: PPUSH
35826: LD_VAR 0 5
35830: PPUSH
35831: CALL_OW 12
35835: ARRAY
35836: ST_TO_ADDR
// end ; if weapon then
35837: LD_VAR 0 18
35841: IFFALSE 35955
// begin tmp := CostOfWeapon ( weapon ) ;
35843: LD_ADDR_VAR 0 14
35847: PUSH
35848: LD_VAR 0 18
35852: PPUSH
35853: CALL_OW 451
35857: ST_TO_ADDR
// j := GetBase ( tower ) ;
35858: LD_ADDR_VAR 0 9
35862: PUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 274
35872: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35873: LD_VAR 0 9
35877: PPUSH
35878: LD_INT 1
35880: PPUSH
35881: CALL_OW 275
35885: PUSH
35886: LD_VAR 0 14
35890: PUSH
35891: LD_INT 1
35893: ARRAY
35894: GREATEREQUAL
35895: PUSH
35896: LD_VAR 0 9
35900: PPUSH
35901: LD_INT 2
35903: PPUSH
35904: CALL_OW 275
35908: PUSH
35909: LD_VAR 0 14
35913: PUSH
35914: LD_INT 2
35916: ARRAY
35917: GREATEREQUAL
35918: AND
35919: PUSH
35920: LD_VAR 0 9
35924: PPUSH
35925: LD_INT 3
35927: PPUSH
35928: CALL_OW 275
35932: PUSH
35933: LD_VAR 0 14
35937: PUSH
35938: LD_INT 3
35940: ARRAY
35941: GREATEREQUAL
35942: AND
35943: IFFALSE 35955
// result := weapon ;
35945: LD_ADDR_VAR 0 3
35949: PUSH
35950: LD_VAR 0 18
35954: ST_TO_ADDR
// end ; end ;
35955: LD_VAR 0 3
35959: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35960: LD_INT 0
35962: PPUSH
35963: PPUSH
// result := true ;
35964: LD_ADDR_VAR 0 3
35968: PUSH
35969: LD_INT 1
35971: ST_TO_ADDR
// if array1 = array2 then
35972: LD_VAR 0 1
35976: PUSH
35977: LD_VAR 0 2
35981: EQUAL
35982: IFFALSE 36042
// begin for i = 1 to array1 do
35984: LD_ADDR_VAR 0 4
35988: PUSH
35989: DOUBLE
35990: LD_INT 1
35992: DEC
35993: ST_TO_ADDR
35994: LD_VAR 0 1
35998: PUSH
35999: FOR_TO
36000: IFFALSE 36038
// if array1 [ i ] <> array2 [ i ] then
36002: LD_VAR 0 1
36006: PUSH
36007: LD_VAR 0 4
36011: ARRAY
36012: PUSH
36013: LD_VAR 0 2
36017: PUSH
36018: LD_VAR 0 4
36022: ARRAY
36023: NONEQUAL
36024: IFFALSE 36036
// begin result := false ;
36026: LD_ADDR_VAR 0 3
36030: PUSH
36031: LD_INT 0
36033: ST_TO_ADDR
// break ;
36034: GO 36038
// end ;
36036: GO 35999
36038: POP
36039: POP
// end else
36040: GO 36050
// result := false ;
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// end ;
36050: LD_VAR 0 3
36054: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36055: LD_INT 0
36057: PPUSH
36058: PPUSH
// if not array1 or not array2 then
36059: LD_VAR 0 1
36063: NOT
36064: PUSH
36065: LD_VAR 0 2
36069: NOT
36070: OR
36071: IFFALSE 36075
// exit ;
36073: GO 36139
// result := true ;
36075: LD_ADDR_VAR 0 3
36079: PUSH
36080: LD_INT 1
36082: ST_TO_ADDR
// for i = 1 to array1 do
36083: LD_ADDR_VAR 0 4
36087: PUSH
36088: DOUBLE
36089: LD_INT 1
36091: DEC
36092: ST_TO_ADDR
36093: LD_VAR 0 1
36097: PUSH
36098: FOR_TO
36099: IFFALSE 36137
// if array1 [ i ] <> array2 [ i ] then
36101: LD_VAR 0 1
36105: PUSH
36106: LD_VAR 0 4
36110: ARRAY
36111: PUSH
36112: LD_VAR 0 2
36116: PUSH
36117: LD_VAR 0 4
36121: ARRAY
36122: NONEQUAL
36123: IFFALSE 36135
// begin result := false ;
36125: LD_ADDR_VAR 0 3
36129: PUSH
36130: LD_INT 0
36132: ST_TO_ADDR
// break ;
36133: GO 36137
// end ;
36135: GO 36098
36137: POP
36138: POP
// end ;
36139: LD_VAR 0 3
36143: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36144: LD_INT 0
36146: PPUSH
36147: PPUSH
36148: PPUSH
// pom := GetBase ( fac ) ;
36149: LD_ADDR_VAR 0 5
36153: PUSH
36154: LD_VAR 0 1
36158: PPUSH
36159: CALL_OW 274
36163: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36164: LD_ADDR_VAR 0 4
36168: PUSH
36169: LD_VAR 0 2
36173: PUSH
36174: LD_INT 1
36176: ARRAY
36177: PPUSH
36178: LD_VAR 0 2
36182: PUSH
36183: LD_INT 2
36185: ARRAY
36186: PPUSH
36187: LD_VAR 0 2
36191: PUSH
36192: LD_INT 3
36194: ARRAY
36195: PPUSH
36196: LD_VAR 0 2
36200: PUSH
36201: LD_INT 4
36203: ARRAY
36204: PPUSH
36205: CALL_OW 449
36209: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36210: LD_ADDR_VAR 0 3
36214: PUSH
36215: LD_VAR 0 5
36219: PPUSH
36220: LD_INT 1
36222: PPUSH
36223: CALL_OW 275
36227: PUSH
36228: LD_VAR 0 4
36232: PUSH
36233: LD_INT 1
36235: ARRAY
36236: GREATEREQUAL
36237: PUSH
36238: LD_VAR 0 5
36242: PPUSH
36243: LD_INT 2
36245: PPUSH
36246: CALL_OW 275
36250: PUSH
36251: LD_VAR 0 4
36255: PUSH
36256: LD_INT 2
36258: ARRAY
36259: GREATEREQUAL
36260: AND
36261: PUSH
36262: LD_VAR 0 5
36266: PPUSH
36267: LD_INT 3
36269: PPUSH
36270: CALL_OW 275
36274: PUSH
36275: LD_VAR 0 4
36279: PUSH
36280: LD_INT 3
36282: ARRAY
36283: GREATEREQUAL
36284: AND
36285: ST_TO_ADDR
// end ;
36286: LD_VAR 0 3
36290: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36291: LD_INT 0
36293: PPUSH
36294: PPUSH
36295: PPUSH
36296: PPUSH
// pom := GetBase ( building ) ;
36297: LD_ADDR_VAR 0 3
36301: PUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: CALL_OW 274
36311: ST_TO_ADDR
// if not pom then
36312: LD_VAR 0 3
36316: NOT
36317: IFFALSE 36321
// exit ;
36319: GO 36491
// btype := GetBType ( building ) ;
36321: LD_ADDR_VAR 0 5
36325: PUSH
36326: LD_VAR 0 1
36330: PPUSH
36331: CALL_OW 266
36335: ST_TO_ADDR
// if btype = b_armoury then
36336: LD_VAR 0 5
36340: PUSH
36341: LD_INT 4
36343: EQUAL
36344: IFFALSE 36354
// btype := b_barracks ;
36346: LD_ADDR_VAR 0 5
36350: PUSH
36351: LD_INT 5
36353: ST_TO_ADDR
// if btype = b_depot then
36354: LD_VAR 0 5
36358: PUSH
36359: LD_INT 0
36361: EQUAL
36362: IFFALSE 36372
// btype := b_warehouse ;
36364: LD_ADDR_VAR 0 5
36368: PUSH
36369: LD_INT 1
36371: ST_TO_ADDR
// if btype = b_workshop then
36372: LD_VAR 0 5
36376: PUSH
36377: LD_INT 2
36379: EQUAL
36380: IFFALSE 36390
// btype := b_factory ;
36382: LD_ADDR_VAR 0 5
36386: PUSH
36387: LD_INT 3
36389: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36390: LD_ADDR_VAR 0 4
36394: PUSH
36395: LD_VAR 0 5
36399: PPUSH
36400: LD_VAR 0 1
36404: PPUSH
36405: CALL_OW 248
36409: PPUSH
36410: CALL_OW 450
36414: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36415: LD_ADDR_VAR 0 2
36419: PUSH
36420: LD_VAR 0 3
36424: PPUSH
36425: LD_INT 1
36427: PPUSH
36428: CALL_OW 275
36432: PUSH
36433: LD_VAR 0 4
36437: PUSH
36438: LD_INT 1
36440: ARRAY
36441: GREATEREQUAL
36442: PUSH
36443: LD_VAR 0 3
36447: PPUSH
36448: LD_INT 2
36450: PPUSH
36451: CALL_OW 275
36455: PUSH
36456: LD_VAR 0 4
36460: PUSH
36461: LD_INT 2
36463: ARRAY
36464: GREATEREQUAL
36465: AND
36466: PUSH
36467: LD_VAR 0 3
36471: PPUSH
36472: LD_INT 3
36474: PPUSH
36475: CALL_OW 275
36479: PUSH
36480: LD_VAR 0 4
36484: PUSH
36485: LD_INT 3
36487: ARRAY
36488: GREATEREQUAL
36489: AND
36490: ST_TO_ADDR
// end ;
36491: LD_VAR 0 2
36495: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36496: LD_INT 0
36498: PPUSH
36499: PPUSH
36500: PPUSH
// pom := GetBase ( building ) ;
36501: LD_ADDR_VAR 0 4
36505: PUSH
36506: LD_VAR 0 1
36510: PPUSH
36511: CALL_OW 274
36515: ST_TO_ADDR
// if not pom then
36516: LD_VAR 0 4
36520: NOT
36521: IFFALSE 36525
// exit ;
36523: GO 36626
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36525: LD_ADDR_VAR 0 5
36529: PUSH
36530: LD_VAR 0 2
36534: PPUSH
36535: LD_VAR 0 1
36539: PPUSH
36540: CALL_OW 248
36544: PPUSH
36545: CALL_OW 450
36549: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36550: LD_ADDR_VAR 0 3
36554: PUSH
36555: LD_VAR 0 4
36559: PPUSH
36560: LD_INT 1
36562: PPUSH
36563: CALL_OW 275
36567: PUSH
36568: LD_VAR 0 5
36572: PUSH
36573: LD_INT 1
36575: ARRAY
36576: GREATEREQUAL
36577: PUSH
36578: LD_VAR 0 4
36582: PPUSH
36583: LD_INT 2
36585: PPUSH
36586: CALL_OW 275
36590: PUSH
36591: LD_VAR 0 5
36595: PUSH
36596: LD_INT 2
36598: ARRAY
36599: GREATEREQUAL
36600: AND
36601: PUSH
36602: LD_VAR 0 4
36606: PPUSH
36607: LD_INT 3
36609: PPUSH
36610: CALL_OW 275
36614: PUSH
36615: LD_VAR 0 5
36619: PUSH
36620: LD_INT 3
36622: ARRAY
36623: GREATEREQUAL
36624: AND
36625: ST_TO_ADDR
// end ;
36626: LD_VAR 0 3
36630: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36631: LD_INT 0
36633: PPUSH
36634: PPUSH
36635: PPUSH
36636: PPUSH
36637: PPUSH
36638: PPUSH
36639: PPUSH
36640: PPUSH
36641: PPUSH
36642: PPUSH
36643: PPUSH
// result := false ;
36644: LD_ADDR_VAR 0 8
36648: PUSH
36649: LD_INT 0
36651: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36652: LD_VAR 0 5
36656: NOT
36657: PUSH
36658: LD_VAR 0 1
36662: NOT
36663: OR
36664: PUSH
36665: LD_VAR 0 2
36669: NOT
36670: OR
36671: PUSH
36672: LD_VAR 0 3
36676: NOT
36677: OR
36678: IFFALSE 36682
// exit ;
36680: GO 37496
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36682: LD_ADDR_VAR 0 14
36686: PUSH
36687: LD_VAR 0 1
36691: PPUSH
36692: LD_VAR 0 2
36696: PPUSH
36697: LD_VAR 0 3
36701: PPUSH
36702: LD_VAR 0 4
36706: PPUSH
36707: LD_VAR 0 5
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: CALL_OW 248
36720: PPUSH
36721: LD_INT 0
36723: PPUSH
36724: CALL 38749 0 6
36728: ST_TO_ADDR
// if not hexes then
36729: LD_VAR 0 14
36733: NOT
36734: IFFALSE 36738
// exit ;
36736: GO 37496
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36738: LD_ADDR_VAR 0 17
36742: PUSH
36743: LD_VAR 0 5
36747: PPUSH
36748: LD_INT 22
36750: PUSH
36751: LD_VAR 0 13
36755: PPUSH
36756: CALL_OW 255
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: LD_INT 30
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 30
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: LIST
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PPUSH
36797: CALL_OW 72
36801: ST_TO_ADDR
// for i = 1 to hexes do
36802: LD_ADDR_VAR 0 9
36806: PUSH
36807: DOUBLE
36808: LD_INT 1
36810: DEC
36811: ST_TO_ADDR
36812: LD_VAR 0 14
36816: PUSH
36817: FOR_TO
36818: IFFALSE 37494
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36820: LD_ADDR_VAR 0 13
36824: PUSH
36825: LD_VAR 0 14
36829: PUSH
36830: LD_VAR 0 9
36834: ARRAY
36835: PUSH
36836: LD_INT 1
36838: ARRAY
36839: PPUSH
36840: LD_VAR 0 14
36844: PUSH
36845: LD_VAR 0 9
36849: ARRAY
36850: PUSH
36851: LD_INT 2
36853: ARRAY
36854: PPUSH
36855: CALL_OW 428
36859: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36860: LD_VAR 0 14
36864: PUSH
36865: LD_VAR 0 9
36869: ARRAY
36870: PUSH
36871: LD_INT 1
36873: ARRAY
36874: PPUSH
36875: LD_VAR 0 14
36879: PUSH
36880: LD_VAR 0 9
36884: ARRAY
36885: PUSH
36886: LD_INT 2
36888: ARRAY
36889: PPUSH
36890: CALL_OW 351
36894: PUSH
36895: LD_VAR 0 14
36899: PUSH
36900: LD_VAR 0 9
36904: ARRAY
36905: PUSH
36906: LD_INT 1
36908: ARRAY
36909: PPUSH
36910: LD_VAR 0 14
36914: PUSH
36915: LD_VAR 0 9
36919: ARRAY
36920: PUSH
36921: LD_INT 2
36923: ARRAY
36924: PPUSH
36925: CALL_OW 488
36929: NOT
36930: OR
36931: PUSH
36932: LD_VAR 0 13
36936: PPUSH
36937: CALL_OW 247
36941: PUSH
36942: LD_INT 3
36944: EQUAL
36945: OR
36946: IFFALSE 36952
// exit ;
36948: POP
36949: POP
36950: GO 37496
// if not tmp then
36952: LD_VAR 0 13
36956: NOT
36957: IFFALSE 36961
// continue ;
36959: GO 36817
// result := true ;
36961: LD_ADDR_VAR 0 8
36965: PUSH
36966: LD_INT 1
36968: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36969: LD_VAR 0 6
36973: PUSH
36974: LD_VAR 0 13
36978: PPUSH
36979: CALL_OW 247
36983: PUSH
36984: LD_INT 2
36986: EQUAL
36987: AND
36988: PUSH
36989: LD_VAR 0 13
36993: PPUSH
36994: CALL_OW 263
36998: PUSH
36999: LD_INT 1
37001: EQUAL
37002: AND
37003: IFFALSE 37167
// begin if IsDrivenBy ( tmp ) then
37005: LD_VAR 0 13
37009: PPUSH
37010: CALL_OW 311
37014: IFFALSE 37018
// continue ;
37016: GO 36817
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37018: LD_VAR 0 6
37022: PPUSH
37023: LD_INT 3
37025: PUSH
37026: LD_INT 60
37028: PUSH
37029: EMPTY
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 55
37041: PUSH
37042: EMPTY
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PPUSH
37053: CALL_OW 72
37057: IFFALSE 37165
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37059: LD_ADDR_VAR 0 18
37063: PUSH
37064: LD_VAR 0 6
37068: PPUSH
37069: LD_INT 3
37071: PUSH
37072: LD_INT 60
37074: PUSH
37075: EMPTY
37076: LIST
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 3
37084: PUSH
37085: LD_INT 55
37087: PUSH
37088: EMPTY
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PPUSH
37099: CALL_OW 72
37103: PUSH
37104: LD_INT 1
37106: ARRAY
37107: ST_TO_ADDR
// if IsInUnit ( driver ) then
37108: LD_VAR 0 18
37112: PPUSH
37113: CALL_OW 310
37117: IFFALSE 37128
// ComExit ( driver ) ;
37119: LD_VAR 0 18
37123: PPUSH
37124: CALL 62528 0 1
// AddComEnterUnit ( driver , tmp ) ;
37128: LD_VAR 0 18
37132: PPUSH
37133: LD_VAR 0 13
37137: PPUSH
37138: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37142: LD_VAR 0 18
37146: PPUSH
37147: LD_VAR 0 7
37151: PPUSH
37152: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37156: LD_VAR 0 18
37160: PPUSH
37161: CALL_OW 181
// end ; continue ;
37165: GO 36817
// end ; if not cleaners or not tmp in cleaners then
37167: LD_VAR 0 6
37171: NOT
37172: PUSH
37173: LD_VAR 0 13
37177: PUSH
37178: LD_VAR 0 6
37182: IN
37183: NOT
37184: OR
37185: IFFALSE 37492
// begin if dep then
37187: LD_VAR 0 17
37191: IFFALSE 37327
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37193: LD_ADDR_VAR 0 16
37197: PUSH
37198: LD_VAR 0 17
37202: PUSH
37203: LD_INT 1
37205: ARRAY
37206: PPUSH
37207: CALL_OW 250
37211: PPUSH
37212: LD_VAR 0 17
37216: PUSH
37217: LD_INT 1
37219: ARRAY
37220: PPUSH
37221: CALL_OW 254
37225: PPUSH
37226: LD_INT 5
37228: PPUSH
37229: CALL_OW 272
37233: PUSH
37234: LD_VAR 0 17
37238: PUSH
37239: LD_INT 1
37241: ARRAY
37242: PPUSH
37243: CALL_OW 251
37247: PPUSH
37248: LD_VAR 0 17
37252: PUSH
37253: LD_INT 1
37255: ARRAY
37256: PPUSH
37257: CALL_OW 254
37261: PPUSH
37262: LD_INT 5
37264: PPUSH
37265: CALL_OW 273
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37274: LD_VAR 0 16
37278: PUSH
37279: LD_INT 1
37281: ARRAY
37282: PPUSH
37283: LD_VAR 0 16
37287: PUSH
37288: LD_INT 2
37290: ARRAY
37291: PPUSH
37292: CALL_OW 488
37296: IFFALSE 37327
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37298: LD_VAR 0 13
37302: PPUSH
37303: LD_VAR 0 16
37307: PUSH
37308: LD_INT 1
37310: ARRAY
37311: PPUSH
37312: LD_VAR 0 16
37316: PUSH
37317: LD_INT 2
37319: ARRAY
37320: PPUSH
37321: CALL_OW 111
// continue ;
37325: GO 36817
// end ; end ; r := GetDir ( tmp ) ;
37327: LD_ADDR_VAR 0 15
37331: PUSH
37332: LD_VAR 0 13
37336: PPUSH
37337: CALL_OW 254
37341: ST_TO_ADDR
// if r = 5 then
37342: LD_VAR 0 15
37346: PUSH
37347: LD_INT 5
37349: EQUAL
37350: IFFALSE 37360
// r := 0 ;
37352: LD_ADDR_VAR 0 15
37356: PUSH
37357: LD_INT 0
37359: ST_TO_ADDR
// for j = r to 5 do
37360: LD_ADDR_VAR 0 10
37364: PUSH
37365: DOUBLE
37366: LD_VAR 0 15
37370: DEC
37371: ST_TO_ADDR
37372: LD_INT 5
37374: PUSH
37375: FOR_TO
37376: IFFALSE 37490
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37378: LD_ADDR_VAR 0 11
37382: PUSH
37383: LD_VAR 0 13
37387: PPUSH
37388: CALL_OW 250
37392: PPUSH
37393: LD_VAR 0 10
37397: PPUSH
37398: LD_INT 2
37400: PPUSH
37401: CALL_OW 272
37405: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37406: LD_ADDR_VAR 0 12
37410: PUSH
37411: LD_VAR 0 13
37415: PPUSH
37416: CALL_OW 251
37420: PPUSH
37421: LD_VAR 0 10
37425: PPUSH
37426: LD_INT 2
37428: PPUSH
37429: CALL_OW 273
37433: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37434: LD_VAR 0 11
37438: PPUSH
37439: LD_VAR 0 12
37443: PPUSH
37444: CALL_OW 488
37448: PUSH
37449: LD_VAR 0 11
37453: PPUSH
37454: LD_VAR 0 12
37458: PPUSH
37459: CALL_OW 428
37463: NOT
37464: AND
37465: IFFALSE 37488
// begin ComMoveXY ( tmp , _x , _y ) ;
37467: LD_VAR 0 13
37471: PPUSH
37472: LD_VAR 0 11
37476: PPUSH
37477: LD_VAR 0 12
37481: PPUSH
37482: CALL_OW 111
// break ;
37486: GO 37490
// end ; end ;
37488: GO 37375
37490: POP
37491: POP
// end ; end ;
37492: GO 36817
37494: POP
37495: POP
// end ;
37496: LD_VAR 0 8
37500: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37501: LD_INT 0
37503: PPUSH
// result := true ;
37504: LD_ADDR_VAR 0 3
37508: PUSH
37509: LD_INT 1
37511: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37512: LD_VAR 0 2
37516: PUSH
37517: LD_INT 24
37519: DOUBLE
37520: EQUAL
37521: IFTRUE 37531
37523: LD_INT 33
37525: DOUBLE
37526: EQUAL
37527: IFTRUE 37531
37529: GO 37556
37531: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37532: LD_ADDR_VAR 0 3
37536: PUSH
37537: LD_INT 32
37539: PPUSH
37540: LD_VAR 0 1
37544: PPUSH
37545: CALL_OW 321
37549: PUSH
37550: LD_INT 2
37552: EQUAL
37553: ST_TO_ADDR
37554: GO 37872
37556: LD_INT 20
37558: DOUBLE
37559: EQUAL
37560: IFTRUE 37564
37562: GO 37589
37564: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37565: LD_ADDR_VAR 0 3
37569: PUSH
37570: LD_INT 6
37572: PPUSH
37573: LD_VAR 0 1
37577: PPUSH
37578: CALL_OW 321
37582: PUSH
37583: LD_INT 2
37585: EQUAL
37586: ST_TO_ADDR
37587: GO 37872
37589: LD_INT 22
37591: DOUBLE
37592: EQUAL
37593: IFTRUE 37603
37595: LD_INT 36
37597: DOUBLE
37598: EQUAL
37599: IFTRUE 37603
37601: GO 37628
37603: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37604: LD_ADDR_VAR 0 3
37608: PUSH
37609: LD_INT 15
37611: PPUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 321
37621: PUSH
37622: LD_INT 2
37624: EQUAL
37625: ST_TO_ADDR
37626: GO 37872
37628: LD_INT 30
37630: DOUBLE
37631: EQUAL
37632: IFTRUE 37636
37634: GO 37661
37636: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37637: LD_ADDR_VAR 0 3
37641: PUSH
37642: LD_INT 20
37644: PPUSH
37645: LD_VAR 0 1
37649: PPUSH
37650: CALL_OW 321
37654: PUSH
37655: LD_INT 2
37657: EQUAL
37658: ST_TO_ADDR
37659: GO 37872
37661: LD_INT 28
37663: DOUBLE
37664: EQUAL
37665: IFTRUE 37675
37667: LD_INT 21
37669: DOUBLE
37670: EQUAL
37671: IFTRUE 37675
37673: GO 37700
37675: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37676: LD_ADDR_VAR 0 3
37680: PUSH
37681: LD_INT 21
37683: PPUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 321
37693: PUSH
37694: LD_INT 2
37696: EQUAL
37697: ST_TO_ADDR
37698: GO 37872
37700: LD_INT 16
37702: DOUBLE
37703: EQUAL
37704: IFTRUE 37708
37706: GO 37733
37708: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37709: LD_ADDR_VAR 0 3
37713: PUSH
37714: LD_INT 84
37716: PPUSH
37717: LD_VAR 0 1
37721: PPUSH
37722: CALL_OW 321
37726: PUSH
37727: LD_INT 2
37729: EQUAL
37730: ST_TO_ADDR
37731: GO 37872
37733: LD_INT 19
37735: DOUBLE
37736: EQUAL
37737: IFTRUE 37747
37739: LD_INT 23
37741: DOUBLE
37742: EQUAL
37743: IFTRUE 37747
37745: GO 37772
37747: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37748: LD_ADDR_VAR 0 3
37752: PUSH
37753: LD_INT 83
37755: PPUSH
37756: LD_VAR 0 1
37760: PPUSH
37761: CALL_OW 321
37765: PUSH
37766: LD_INT 2
37768: EQUAL
37769: ST_TO_ADDR
37770: GO 37872
37772: LD_INT 17
37774: DOUBLE
37775: EQUAL
37776: IFTRUE 37780
37778: GO 37805
37780: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37781: LD_ADDR_VAR 0 3
37785: PUSH
37786: LD_INT 39
37788: PPUSH
37789: LD_VAR 0 1
37793: PPUSH
37794: CALL_OW 321
37798: PUSH
37799: LD_INT 2
37801: EQUAL
37802: ST_TO_ADDR
37803: GO 37872
37805: LD_INT 18
37807: DOUBLE
37808: EQUAL
37809: IFTRUE 37813
37811: GO 37838
37813: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37814: LD_ADDR_VAR 0 3
37818: PUSH
37819: LD_INT 40
37821: PPUSH
37822: LD_VAR 0 1
37826: PPUSH
37827: CALL_OW 321
37831: PUSH
37832: LD_INT 2
37834: EQUAL
37835: ST_TO_ADDR
37836: GO 37872
37838: LD_INT 27
37840: DOUBLE
37841: EQUAL
37842: IFTRUE 37846
37844: GO 37871
37846: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37847: LD_ADDR_VAR 0 3
37851: PUSH
37852: LD_INT 35
37854: PPUSH
37855: LD_VAR 0 1
37859: PPUSH
37860: CALL_OW 321
37864: PUSH
37865: LD_INT 2
37867: EQUAL
37868: ST_TO_ADDR
37869: GO 37872
37871: POP
// end ;
37872: LD_VAR 0 3
37876: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37877: LD_INT 0
37879: PPUSH
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
37884: PPUSH
37885: PPUSH
37886: PPUSH
37887: PPUSH
37888: PPUSH
37889: PPUSH
// result := false ;
37890: LD_ADDR_VAR 0 6
37894: PUSH
37895: LD_INT 0
37897: ST_TO_ADDR
// if btype = b_depot then
37898: LD_VAR 0 2
37902: PUSH
37903: LD_INT 0
37905: EQUAL
37906: IFFALSE 37918
// begin result := true ;
37908: LD_ADDR_VAR 0 6
37912: PUSH
37913: LD_INT 1
37915: ST_TO_ADDR
// exit ;
37916: GO 38744
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37918: LD_VAR 0 1
37922: NOT
37923: PUSH
37924: LD_VAR 0 1
37928: PPUSH
37929: CALL_OW 266
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: IN
37944: NOT
37945: OR
37946: PUSH
37947: LD_VAR 0 2
37951: NOT
37952: OR
37953: PUSH
37954: LD_VAR 0 5
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: LD_INT 3
37970: PUSH
37971: LD_INT 4
37973: PUSH
37974: LD_INT 5
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: IN
37985: NOT
37986: OR
37987: PUSH
37988: LD_VAR 0 3
37992: PPUSH
37993: LD_VAR 0 4
37997: PPUSH
37998: CALL_OW 488
38002: NOT
38003: OR
38004: IFFALSE 38008
// exit ;
38006: GO 38744
// side := GetSide ( depot ) ;
38008: LD_ADDR_VAR 0 9
38012: PUSH
38013: LD_VAR 0 1
38017: PPUSH
38018: CALL_OW 255
38022: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38023: LD_VAR 0 9
38027: PPUSH
38028: LD_VAR 0 2
38032: PPUSH
38033: CALL 37501 0 2
38037: NOT
38038: IFFALSE 38042
// exit ;
38040: GO 38744
// pom := GetBase ( depot ) ;
38042: LD_ADDR_VAR 0 10
38046: PUSH
38047: LD_VAR 0 1
38051: PPUSH
38052: CALL_OW 274
38056: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38057: LD_ADDR_VAR 0 11
38061: PUSH
38062: LD_VAR 0 2
38066: PPUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 248
38076: PPUSH
38077: CALL_OW 450
38081: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38082: LD_VAR 0 10
38086: PPUSH
38087: LD_INT 1
38089: PPUSH
38090: CALL_OW 275
38094: PUSH
38095: LD_VAR 0 11
38099: PUSH
38100: LD_INT 1
38102: ARRAY
38103: GREATEREQUAL
38104: PUSH
38105: LD_VAR 0 10
38109: PPUSH
38110: LD_INT 2
38112: PPUSH
38113: CALL_OW 275
38117: PUSH
38118: LD_VAR 0 11
38122: PUSH
38123: LD_INT 2
38125: ARRAY
38126: GREATEREQUAL
38127: AND
38128: PUSH
38129: LD_VAR 0 10
38133: PPUSH
38134: LD_INT 3
38136: PPUSH
38137: CALL_OW 275
38141: PUSH
38142: LD_VAR 0 11
38146: PUSH
38147: LD_INT 3
38149: ARRAY
38150: GREATEREQUAL
38151: AND
38152: NOT
38153: IFFALSE 38157
// exit ;
38155: GO 38744
// if GetBType ( depot ) = b_depot then
38157: LD_VAR 0 1
38161: PPUSH
38162: CALL_OW 266
38166: PUSH
38167: LD_INT 0
38169: EQUAL
38170: IFFALSE 38182
// dist := 28 else
38172: LD_ADDR_VAR 0 14
38176: PUSH
38177: LD_INT 28
38179: ST_TO_ADDR
38180: GO 38190
// dist := 36 ;
38182: LD_ADDR_VAR 0 14
38186: PUSH
38187: LD_INT 36
38189: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38190: LD_VAR 0 1
38194: PPUSH
38195: LD_VAR 0 3
38199: PPUSH
38200: LD_VAR 0 4
38204: PPUSH
38205: CALL_OW 297
38209: PUSH
38210: LD_VAR 0 14
38214: GREATER
38215: IFFALSE 38219
// exit ;
38217: GO 38744
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38219: LD_ADDR_VAR 0 12
38223: PUSH
38224: LD_VAR 0 2
38228: PPUSH
38229: LD_VAR 0 3
38233: PPUSH
38234: LD_VAR 0 4
38238: PPUSH
38239: LD_VAR 0 5
38243: PPUSH
38244: LD_VAR 0 1
38248: PPUSH
38249: CALL_OW 248
38253: PPUSH
38254: LD_INT 0
38256: PPUSH
38257: CALL 38749 0 6
38261: ST_TO_ADDR
// if not hexes then
38262: LD_VAR 0 12
38266: NOT
38267: IFFALSE 38271
// exit ;
38269: GO 38744
// hex := GetHexInfo ( x , y ) ;
38271: LD_ADDR_VAR 0 15
38275: PUSH
38276: LD_VAR 0 3
38280: PPUSH
38281: LD_VAR 0 4
38285: PPUSH
38286: CALL_OW 546
38290: ST_TO_ADDR
// if hex [ 1 ] then
38291: LD_VAR 0 15
38295: PUSH
38296: LD_INT 1
38298: ARRAY
38299: IFFALSE 38303
// exit ;
38301: GO 38744
// height := hex [ 2 ] ;
38303: LD_ADDR_VAR 0 13
38307: PUSH
38308: LD_VAR 0 15
38312: PUSH
38313: LD_INT 2
38315: ARRAY
38316: ST_TO_ADDR
// for i = 1 to hexes do
38317: LD_ADDR_VAR 0 7
38321: PUSH
38322: DOUBLE
38323: LD_INT 1
38325: DEC
38326: ST_TO_ADDR
38327: LD_VAR 0 12
38331: PUSH
38332: FOR_TO
38333: IFFALSE 38663
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38335: LD_VAR 0 12
38339: PUSH
38340: LD_VAR 0 7
38344: ARRAY
38345: PUSH
38346: LD_INT 1
38348: ARRAY
38349: PPUSH
38350: LD_VAR 0 12
38354: PUSH
38355: LD_VAR 0 7
38359: ARRAY
38360: PUSH
38361: LD_INT 2
38363: ARRAY
38364: PPUSH
38365: CALL_OW 488
38369: NOT
38370: PUSH
38371: LD_VAR 0 12
38375: PUSH
38376: LD_VAR 0 7
38380: ARRAY
38381: PUSH
38382: LD_INT 1
38384: ARRAY
38385: PPUSH
38386: LD_VAR 0 12
38390: PUSH
38391: LD_VAR 0 7
38395: ARRAY
38396: PUSH
38397: LD_INT 2
38399: ARRAY
38400: PPUSH
38401: CALL_OW 428
38405: PUSH
38406: LD_INT 0
38408: GREATER
38409: OR
38410: PUSH
38411: LD_VAR 0 12
38415: PUSH
38416: LD_VAR 0 7
38420: ARRAY
38421: PUSH
38422: LD_INT 1
38424: ARRAY
38425: PPUSH
38426: LD_VAR 0 12
38430: PUSH
38431: LD_VAR 0 7
38435: ARRAY
38436: PUSH
38437: LD_INT 2
38439: ARRAY
38440: PPUSH
38441: CALL_OW 351
38445: OR
38446: IFFALSE 38452
// exit ;
38448: POP
38449: POP
38450: GO 38744
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38452: LD_ADDR_VAR 0 8
38456: PUSH
38457: LD_VAR 0 12
38461: PUSH
38462: LD_VAR 0 7
38466: ARRAY
38467: PUSH
38468: LD_INT 1
38470: ARRAY
38471: PPUSH
38472: LD_VAR 0 12
38476: PUSH
38477: LD_VAR 0 7
38481: ARRAY
38482: PUSH
38483: LD_INT 2
38485: ARRAY
38486: PPUSH
38487: CALL_OW 546
38491: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38492: LD_VAR 0 8
38496: PUSH
38497: LD_INT 1
38499: ARRAY
38500: PUSH
38501: LD_VAR 0 8
38505: PUSH
38506: LD_INT 2
38508: ARRAY
38509: PUSH
38510: LD_VAR 0 13
38514: PUSH
38515: LD_INT 2
38517: PLUS
38518: GREATER
38519: OR
38520: PUSH
38521: LD_VAR 0 8
38525: PUSH
38526: LD_INT 2
38528: ARRAY
38529: PUSH
38530: LD_VAR 0 13
38534: PUSH
38535: LD_INT 2
38537: MINUS
38538: LESS
38539: OR
38540: PUSH
38541: LD_VAR 0 8
38545: PUSH
38546: LD_INT 3
38548: ARRAY
38549: PUSH
38550: LD_INT 0
38552: PUSH
38553: LD_INT 8
38555: PUSH
38556: LD_INT 9
38558: PUSH
38559: LD_INT 10
38561: PUSH
38562: LD_INT 11
38564: PUSH
38565: LD_INT 12
38567: PUSH
38568: LD_INT 13
38570: PUSH
38571: LD_INT 16
38573: PUSH
38574: LD_INT 17
38576: PUSH
38577: LD_INT 18
38579: PUSH
38580: LD_INT 19
38582: PUSH
38583: LD_INT 20
38585: PUSH
38586: LD_INT 21
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: IN
38604: NOT
38605: OR
38606: PUSH
38607: LD_VAR 0 8
38611: PUSH
38612: LD_INT 5
38614: ARRAY
38615: NOT
38616: OR
38617: PUSH
38618: LD_VAR 0 8
38622: PUSH
38623: LD_INT 6
38625: ARRAY
38626: PUSH
38627: LD_INT 1
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 7
38635: PUSH
38636: LD_INT 9
38638: PUSH
38639: LD_INT 10
38641: PUSH
38642: LD_INT 11
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: IN
38653: NOT
38654: OR
38655: IFFALSE 38661
// exit ;
38657: POP
38658: POP
38659: GO 38744
// end ;
38661: GO 38332
38663: POP
38664: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38665: LD_VAR 0 9
38669: PPUSH
38670: LD_VAR 0 3
38674: PPUSH
38675: LD_VAR 0 4
38679: PPUSH
38680: LD_INT 20
38682: PPUSH
38683: CALL 30667 0 4
38687: PUSH
38688: LD_INT 4
38690: ARRAY
38691: IFFALSE 38695
// exit ;
38693: GO 38744
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38695: LD_VAR 0 2
38699: PUSH
38700: LD_INT 29
38702: PUSH
38703: LD_INT 30
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: IN
38710: PUSH
38711: LD_VAR 0 3
38715: PPUSH
38716: LD_VAR 0 4
38720: PPUSH
38721: LD_VAR 0 9
38725: PPUSH
38726: CALL_OW 440
38730: NOT
38731: AND
38732: IFFALSE 38736
// exit ;
38734: GO 38744
// result := true ;
38736: LD_ADDR_VAR 0 6
38740: PUSH
38741: LD_INT 1
38743: ST_TO_ADDR
// end ;
38744: LD_VAR 0 6
38748: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38749: LD_INT 0
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
38769: PPUSH
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
38802: PPUSH
38803: PPUSH
38804: PPUSH
38805: PPUSH
38806: PPUSH
38807: PPUSH
38808: PPUSH
// result = [ ] ;
38809: LD_ADDR_VAR 0 7
38813: PUSH
38814: EMPTY
38815: ST_TO_ADDR
// temp_list = [ ] ;
38816: LD_ADDR_VAR 0 9
38820: PUSH
38821: EMPTY
38822: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38823: LD_VAR 0 4
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: LD_INT 3
38839: PUSH
38840: LD_INT 4
38842: PUSH
38843: LD_INT 5
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: IN
38854: NOT
38855: PUSH
38856: LD_VAR 0 1
38860: PUSH
38861: LD_INT 0
38863: PUSH
38864: LD_INT 1
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: IN
38871: PUSH
38872: LD_VAR 0 5
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: LD_INT 3
38885: PUSH
38886: EMPTY
38887: LIST
38888: LIST
38889: LIST
38890: IN
38891: NOT
38892: AND
38893: OR
38894: IFFALSE 38898
// exit ;
38896: GO 57289
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38898: LD_VAR 0 1
38902: PUSH
38903: LD_INT 6
38905: PUSH
38906: LD_INT 7
38908: PUSH
38909: LD_INT 8
38911: PUSH
38912: LD_INT 13
38914: PUSH
38915: LD_INT 12
38917: PUSH
38918: LD_INT 15
38920: PUSH
38921: LD_INT 11
38923: PUSH
38924: LD_INT 14
38926: PUSH
38927: LD_INT 10
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: IN
38941: IFFALSE 38951
// btype = b_lab ;
38943: LD_ADDR_VAR 0 1
38947: PUSH
38948: LD_INT 6
38950: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38951: LD_VAR 0 6
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: IN
38970: NOT
38971: PUSH
38972: LD_VAR 0 1
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 3
38988: PUSH
38989: LD_INT 6
38991: PUSH
38992: LD_INT 36
38994: PUSH
38995: LD_INT 4
38997: PUSH
38998: LD_INT 5
39000: PUSH
39001: LD_INT 31
39003: PUSH
39004: LD_INT 32
39006: PUSH
39007: LD_INT 33
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: LIST
39022: IN
39023: NOT
39024: PUSH
39025: LD_VAR 0 6
39029: PUSH
39030: LD_INT 1
39032: EQUAL
39033: AND
39034: OR
39035: PUSH
39036: LD_VAR 0 1
39040: PUSH
39041: LD_INT 2
39043: PUSH
39044: LD_INT 3
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: IN
39051: NOT
39052: PUSH
39053: LD_VAR 0 6
39057: PUSH
39058: LD_INT 2
39060: EQUAL
39061: AND
39062: OR
39063: IFFALSE 39073
// mode = 0 ;
39065: LD_ADDR_VAR 0 6
39069: PUSH
39070: LD_INT 0
39072: ST_TO_ADDR
// case mode of 0 :
39073: LD_VAR 0 6
39077: PUSH
39078: LD_INT 0
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39086
39084: GO 50539
39086: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39087: LD_ADDR_VAR 0 11
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 0
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 1
39145: NEG
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 2
39172: NEG
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: LD_INT 0
39180: PUSH
39181: LD_INT 2
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: PUSH
39203: LD_INT 2
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 0
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: LD_INT 3
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 3
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: NEG
39254: PUSH
39255: LD_INT 2
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39280: LD_ADDR_VAR 0 12
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: LD_INT 1
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: LD_INT 1
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: PUSH
39336: LD_INT 1
39338: NEG
39339: PUSH
39340: LD_INT 0
39342: PUSH
39343: EMPTY
39344: LIST
39345: LIST
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 2
39403: NEG
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: NEG
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: LD_INT 1
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 3
39437: NEG
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 3
39448: NEG
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39476: LD_ADDR_VAR 0 13
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: NEG
39535: PUSH
39536: LD_INT 0
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 1
39545: NEG
39546: PUSH
39547: LD_INT 1
39549: NEG
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 2
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: NEG
39604: PUSH
39605: EMPTY
39606: LIST
39607: LIST
39608: PUSH
39609: LD_INT 2
39611: NEG
39612: PUSH
39613: LD_INT 2
39615: NEG
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 2
39623: NEG
39624: PUSH
39625: LD_INT 3
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: NEG
39636: PUSH
39637: LD_INT 2
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 3
39647: NEG
39648: PUSH
39649: LD_INT 3
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39675: LD_ADDR_VAR 0 14
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 0
39692: PUSH
39693: LD_INT 1
39695: NEG
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 0
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 1
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: NEG
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 1
39744: NEG
39745: PUSH
39746: LD_INT 1
39748: NEG
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 1
39756: NEG
39757: PUSH
39758: LD_INT 2
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: PUSH
39791: LD_INT 2
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 1
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: NEG
39822: PUSH
39823: LD_INT 3
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 3
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: PUSH
39845: LD_INT 2
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39871: LD_ADDR_VAR 0 15
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: PUSH
39910: LD_INT 1
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: NEG
39930: PUSH
39931: LD_INT 0
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 1
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 2
39963: PUSH
39964: LD_INT 0
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 2
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: NEG
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 2
40005: NEG
40006: PUSH
40007: LD_INT 1
40009: NEG
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: PUSH
40026: LD_INT 3
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: LD_INT 3
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40064: LD_ADDR_VAR 0 16
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 1
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 1
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: PUSH
40143: LD_INT 1
40145: NEG
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: EMPTY
40152: LIST
40153: LIST
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: LD_INT 2
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: LD_INT 1
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 2
40199: NEG
40200: PUSH
40201: LD_INT 2
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 3
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 3
40221: PUSH
40222: LD_INT 3
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 3
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40257: LD_ADDR_VAR 0 17
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 1
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 2
40433: NEG
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: NEG
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 2
40456: NEG
40457: PUSH
40458: LD_INT 2
40460: NEG
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40487: LD_ADDR_VAR 0 18
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 0
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: NEG
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 1
40568: NEG
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 2
40583: NEG
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 1
40594: NEG
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 2
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 2
40686: NEG
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40717: LD_ADDR_VAR 0 19
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: NEG
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: NEG
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: LD_INT 2
40802: NEG
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: LD_INT 2
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 1
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 2
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 1
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: LD_INT 2
40920: NEG
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40947: LD_ADDR_VAR 0 20
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: LD_INT 1
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 1
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 2
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: LD_INT 2
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41177: LD_ADDR_VAR 0 21
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: NEG
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: NEG
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 1
41258: NEG
41259: PUSH
41260: LD_INT 2
41262: NEG
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 2
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 1
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 0
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41407: LD_ADDR_VAR 0 22
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 2
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 1
41511: PUSH
41512: LD_INT 1
41514: NEG
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 2
41606: NEG
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41637: LD_ADDR_VAR 0 23
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: NEG
41707: PUSH
41708: LD_INT 1
41710: NEG
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 1
41718: NEG
41719: PUSH
41720: LD_INT 2
41722: NEG
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: LD_INT 2
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: PUSH
41742: LD_INT 1
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 1
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 1
41802: NEG
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 1
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 2
41836: NEG
41837: PUSH
41838: LD_INT 2
41840: NEG
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 3
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 3
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41917: LD_ADDR_VAR 0 24
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 1
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 2
42002: NEG
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 0
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 1
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 2
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 2
42042: PUSH
42043: LD_INT 1
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 2
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 1
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: LD_INT 0
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 1
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 3
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 3
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42193: LD_ADDR_VAR 0 25
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 1
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 0
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 1
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 2
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 2
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: LD_INT 1
42384: NEG
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 2
42392: NEG
42393: PUSH
42394: LD_INT 2
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 1
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 3
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 3
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42467: LD_ADDR_VAR 0 26
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 1
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: LD_INT 2
42552: NEG
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: LD_INT 2
42563: NEG
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 1
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 2
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 2
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 0
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 1
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: LD_INT 1
42658: NEG
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: PUSH
42679: LD_INT 3
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 1
42698: NEG
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 2
42709: NEG
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42743: LD_ADDR_VAR 0 27
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: LD_INT 2
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 2
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 2
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 2
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: PUSH
42889: LD_INT 2
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: LD_INT 0
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 2
42930: NEG
42931: PUSH
42932: LD_INT 1
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 2
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 3
42976: NEG
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 3
42988: NEG
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43023: LD_ADDR_VAR 0 28
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: LD_INT 1
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: NEG
43093: PUSH
43094: LD_INT 1
43096: NEG
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 1
43130: NEG
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 2
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 2
43199: NEG
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: LD_INT 1
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: LD_INT 3
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 1
43246: NEG
43247: PUSH
43248: LD_INT 3
43250: NEG
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 3
43258: NEG
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 3
43270: NEG
43271: PUSH
43272: LD_INT 2
43274: NEG
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43305: LD_ADDR_VAR 0 29
43309: PUSH
43310: LD_INT 0
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 0
43322: PUSH
43323: LD_INT 1
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 1
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: LD_INT 1
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: NEG
43364: PUSH
43365: LD_INT 0
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 2
43401: NEG
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 1
43409: PUSH
43410: LD_INT 1
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 0
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 3
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: LD_INT 2
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43584: LD_ADDR_VAR 0 30
43588: PUSH
43589: LD_INT 0
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 0
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: NEG
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: LD_INT 1
43657: NEG
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 1
43665: NEG
43666: PUSH
43667: LD_INT 2
43669: NEG
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: LD_INT 2
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 3
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 3
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43862: LD_ADDR_VAR 0 31
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 2
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 2
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 2
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: LD_INT 2
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 3
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 1
44084: PUSH
44085: LD_INT 3
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 2
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 3
44105: NEG
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: LIST
44137: LIST
44138: LIST
44139: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44140: LD_ADDR_VAR 0 32
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: LD_INT 1
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: LD_INT 0
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: NEG
44222: PUSH
44223: LD_INT 2
44225: NEG
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 0
44233: PUSH
44234: LD_INT 2
44236: NEG
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 2
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: NEG
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 3
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: LD_INT 2
44344: NEG
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 3
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 3
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 3
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44418: LD_ADDR_VAR 0 33
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 2
44608: NEG
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 3
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 3
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: LD_INT 2
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44697: LD_ADDR_VAR 0 34
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 0
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: LD_INT 1
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: LD_INT 1
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: NEG
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 2
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: LD_INT 1
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: PUSH
44833: LD_INT 2
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 1
44842: NEG
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 2
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 2
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 3
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: NEG
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 3
44942: NEG
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44977: LD_ADDR_VAR 0 35
44981: PUSH
44982: LD_INT 0
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 1
44997: NEG
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: NEG
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 2
45068: NEG
45069: PUSH
45070: LD_INT 1
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45089: LD_ADDR_VAR 0 36
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: PUSH
45118: LD_INT 0
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 1
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 2
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: PUSH
45183: LD_INT 2
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45201: LD_ADDR_VAR 0 37
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 0
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 1
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: NEG
45271: PUSH
45272: LD_INT 1
45274: NEG
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: LD_INT 1
45285: NEG
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45313: LD_ADDR_VAR 0 38
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: NEG
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: NEG
45405: PUSH
45406: LD_INT 1
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45425: LD_ADDR_VAR 0 39
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: LD_INT 1
45483: NEG
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45537: LD_ADDR_VAR 0 40
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: LD_INT 1
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45649: LD_ADDR_VAR 0 41
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: LD_INT 0
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 1
45707: NEG
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 2
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 2
45763: PUSH
45764: LD_INT 1
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: NEG
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 2
45839: NEG
45840: PUSH
45841: LD_INT 3
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 3
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 3
45892: PUSH
45893: LD_INT 3
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 3
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 3
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 3
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45999: LD_ADDR_VAR 0 42
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 1
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 1
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: NEG
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: LD_INT 2
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 3
46193: NEG
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 3
46205: NEG
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 3
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 3
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 3
46245: PUSH
46246: LD_INT 3
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 2
46255: PUSH
46256: LD_INT 3
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 3
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 3
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 3
46308: NEG
46309: PUSH
46310: LD_INT 3
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46349: LD_ADDR_VAR 0 43
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 1
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: NEG
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 1
46430: NEG
46431: PUSH
46432: LD_INT 2
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 2
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 1
46456: NEG
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 2
46464: PUSH
46465: LD_INT 0
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 1
46484: PUSH
46485: LD_INT 2
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: NEG
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: NEG
46516: PUSH
46517: LD_INT 0
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: NEG
46539: PUSH
46540: LD_INT 3
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 3
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 3
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: LD_INT 3
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 3
46645: NEG
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 3
46656: NEG
46657: PUSH
46658: LD_INT 1
46660: NEG
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46697: LD_ADDR_VAR 0 44
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 2
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: LD_INT 2
46879: NEG
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 3
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 3
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 3
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 3
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: LD_INT 3
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 2
46960: NEG
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: NEG
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: LD_INT 3
46982: NEG
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 3
46994: NEG
46995: PUSH
46996: LD_INT 2
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 3
47006: NEG
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47047: LD_ADDR_VAR 0 45
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 1
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 0
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 1
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 2
47132: NEG
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: LD_INT 2
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 2
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 2
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 1
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 2
47213: NEG
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: LD_INT 2
47229: NEG
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 3
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 3
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 0
47261: PUSH
47262: LD_INT 3
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 3
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 3
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 3
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 3
47344: NEG
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 3
47356: NEG
47357: PUSH
47358: LD_INT 3
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47397: LD_ADDR_VAR 0 46
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: NEG
47575: PUSH
47576: LD_INT 1
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: NEG
47587: PUSH
47588: LD_INT 3
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: LD_INT 3
47601: NEG
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: LD_INT 1
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 3
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 3
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 3
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 0
47661: PUSH
47662: LD_INT 3
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 2
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 3
47693: NEG
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 3
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47745: LD_ADDR_VAR 0 47
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: LD_INT 2
47876: NEG
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47896: LD_ADDR_VAR 0 48
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 0
47913: PUSH
47914: LD_INT 1
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: NEG
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: LD_INT 2
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: LD_INT 1
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48043: LD_ADDR_VAR 0 49
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 0
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 2
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 2
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48187: LD_ADDR_VAR 0 50
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 0
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 0
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: NEG
48246: PUSH
48247: LD_INT 0
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: NEG
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48331: LD_ADDR_VAR 0 51
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: LD_INT 0
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: LD_INT 1
48382: PUSH
48383: EMPTY
48384: LIST
48385: LIST
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 1
48400: NEG
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 2
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: NEG
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 2
48454: NEG
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48478: LD_ADDR_VAR 0 52
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 0
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: LD_INT 1
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: NEG
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 1
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 2
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 2
48605: NEG
48606: PUSH
48607: LD_INT 2
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48629: LD_ADDR_VAR 0 53
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 0
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 1
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: LD_INT 2
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: PUSH
48755: LD_INT 1
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 2
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 1
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 2
48805: NEG
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48859: LD_ADDR_VAR 0 54
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 1
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 0
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 1
48940: NEG
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 1
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 1
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 2
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: LD_INT 2
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 2
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 2
49035: NEG
49036: PUSH
49037: LD_INT 0
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49089: LD_ADDR_VAR 0 55
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 1
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 0
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: LD_INT 0
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: NEG
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 2
49204: PUSH
49205: LD_INT 0
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 2
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 2
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 0
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 2
49265: NEG
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 2
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: NEG
49289: PUSH
49290: LD_INT 2
49292: NEG
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49319: LD_ADDR_VAR 0 56
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: NEG
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 1
49400: NEG
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 0
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: EMPTY
49490: LIST
49491: LIST
49492: PUSH
49493: LD_INT 2
49495: NEG
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 2
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49549: LD_ADDR_VAR 0 57
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 1
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 1
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 1
49630: NEG
49631: PUSH
49632: LD_INT 2
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: LD_INT 2
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 2
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: LD_INT 1
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: LD_INT 2
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: NEG
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 2
49725: NEG
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 2
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49779: LD_ADDR_VAR 0 58
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: LD_INT 1
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: NEG
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 2
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 1
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: LD_INT 2
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 2
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50009: LD_ADDR_VAR 0 59
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: PUSH
50069: LD_INT 0
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50097: LD_ADDR_VAR 0 60
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 0
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50185: LD_ADDR_VAR 0 61
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 1
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 1
50223: PUSH
50224: LD_INT 1
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: NEG
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50273: LD_ADDR_VAR 0 62
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 1
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: LD_INT 1
50346: NEG
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50361: LD_ADDR_VAR 0 63
50365: PUSH
50366: LD_INT 0
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: LD_INT 1
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50449: LD_ADDR_VAR 0 64
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: NEG
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: ST_TO_ADDR
// end ; 1 :
50537: GO 56434
50539: LD_INT 1
50541: DOUBLE
50542: EQUAL
50543: IFTRUE 50547
50545: GO 53170
50547: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50548: LD_ADDR_VAR 0 11
50552: PUSH
50553: LD_INT 1
50555: NEG
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50592: LD_ADDR_VAR 0 12
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50633: LD_ADDR_VAR 0 13
50637: PUSH
50638: LD_INT 3
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 3
50650: PUSH
50651: LD_INT 3
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: LD_INT 3
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50673: LD_ADDR_VAR 0 14
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 3
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: LD_INT 0
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: LD_INT 2
50704: PUSH
50705: EMPTY
50706: LIST
50707: LIST
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: LIST
50713: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50714: LD_ADDR_VAR 0 15
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 1
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 3
50743: NEG
50744: PUSH
50745: LD_INT 1
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: LIST
50757: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50758: LD_ADDR_VAR 0 16
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 3
50777: NEG
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: NEG
50790: PUSH
50791: LD_INT 3
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50804: LD_ADDR_VAR 0 17
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: LD_INT 3
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50848: LD_ADDR_VAR 0 18
50852: PUSH
50853: LD_INT 2
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 3
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50889: LD_ADDR_VAR 0 19
50893: PUSH
50894: LD_INT 3
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 3
50906: PUSH
50907: LD_INT 3
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 2
50916: PUSH
50917: LD_INT 3
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: LIST
50928: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50929: LD_ADDR_VAR 0 20
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 3
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 3
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 2
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: LIST
50969: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50970: LD_ADDR_VAR 0 21
50974: PUSH
50975: LD_INT 2
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: LD_INT 1
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51014: LD_ADDR_VAR 0 22
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: LD_INT 3
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: LD_INT 2
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: NEG
51046: PUSH
51047: LD_INT 3
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51060: LD_ADDR_VAR 0 23
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 3
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: NEG
51079: PUSH
51080: LD_INT 4
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: LD_INT 3
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51104: LD_ADDR_VAR 0 24
51108: PUSH
51109: LD_INT 3
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 3
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 4
51132: PUSH
51133: LD_INT 1
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51145: LD_ADDR_VAR 0 25
51149: PUSH
51150: LD_INT 3
51152: PUSH
51153: LD_INT 3
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 4
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 4
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: LIST
51184: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51185: LD_ADDR_VAR 0 26
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: LD_INT 4
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: LD_INT 3
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: LIST
51225: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51226: LD_ADDR_VAR 0 27
51230: PUSH
51231: LD_INT 3
51233: NEG
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 3
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 4
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: NEG
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51270: LD_ADDR_VAR 0 28
51274: PUSH
51275: LD_INT 3
51277: NEG
51278: PUSH
51279: LD_INT 3
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 3
51289: NEG
51290: PUSH
51291: LD_INT 4
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 4
51301: NEG
51302: PUSH
51303: LD_INT 3
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51316: LD_ADDR_VAR 0 29
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 3
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: LD_INT 2
51349: NEG
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 1
51357: NEG
51358: PUSH
51359: LD_INT 4
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 4
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: NEG
51392: PUSH
51393: LD_INT 5
51395: NEG
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 5
51406: NEG
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: LD_INT 4
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 6
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: LD_INT 6
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: LD_INT 5
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51471: LD_ADDR_VAR 0 30
51475: PUSH
51476: LD_INT 2
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 3
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 4
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 5
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 5
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 5
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 6
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 6
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51614: LD_ADDR_VAR 0 31
51618: PUSH
51619: LD_INT 3
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 3
51631: PUSH
51632: LD_INT 3
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 3
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 4
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 4
51661: PUSH
51662: LD_INT 4
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: LD_INT 4
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 5
51681: PUSH
51682: LD_INT 4
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 5
51691: PUSH
51692: LD_INT 5
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 4
51701: PUSH
51702: LD_INT 5
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 6
51711: PUSH
51712: LD_INT 5
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 6
51721: PUSH
51722: LD_INT 6
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 5
51731: PUSH
51732: LD_INT 6
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51753: LD_ADDR_VAR 0 32
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: NEG
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 4
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 3
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 5
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 4
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 6
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 0
51863: PUSH
51864: LD_INT 6
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: NEG
51874: PUSH
51875: LD_INT 5
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51896: LD_ADDR_VAR 0 33
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 3
51914: NEG
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 3
51925: NEG
51926: PUSH
51927: LD_INT 1
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 3
51937: NEG
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 4
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 4
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 5
51982: NEG
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 5
51993: NEG
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 5
52005: NEG
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 6
52016: NEG
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 6
52027: NEG
52028: PUSH
52029: LD_INT 1
52031: NEG
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52051: LD_ADDR_VAR 0 34
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 3
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 3
52070: NEG
52071: PUSH
52072: LD_INT 2
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: NEG
52083: PUSH
52084: LD_INT 3
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: LD_INT 4
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 4
52106: NEG
52107: PUSH
52108: LD_INT 3
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 4
52118: NEG
52119: PUSH
52120: LD_INT 4
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 4
52130: NEG
52131: PUSH
52132: LD_INT 5
52134: NEG
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 5
52142: NEG
52143: PUSH
52144: LD_INT 4
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 5
52154: NEG
52155: PUSH
52156: LD_INT 5
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 5
52166: NEG
52167: PUSH
52168: LD_INT 6
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 6
52178: NEG
52179: PUSH
52180: LD_INT 5
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 6
52190: NEG
52191: PUSH
52192: LD_INT 6
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52214: LD_ADDR_VAR 0 41
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 3
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: LD_INT 2
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52258: LD_ADDR_VAR 0 42
52262: PUSH
52263: LD_INT 2
52265: PUSH
52266: LD_INT 0
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: LIST
52298: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52299: LD_ADDR_VAR 0 43
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 3
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 3
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: LIST
52338: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52339: LD_ADDR_VAR 0 44
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: LD_INT 3
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52380: LD_ADDR_VAR 0 45
52384: PUSH
52385: LD_INT 2
52387: NEG
52388: PUSH
52389: LD_INT 0
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 2
52398: NEG
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 3
52409: NEG
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52424: LD_ADDR_VAR 0 46
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 2
52443: NEG
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: NEG
52456: PUSH
52457: LD_INT 2
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: LIST
52469: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52470: LD_ADDR_VAR 0 47
52474: PUSH
52475: LD_INT 2
52477: NEG
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: NEG
52490: PUSH
52491: LD_INT 3
52493: NEG
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52503: LD_ADDR_VAR 0 48
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 2
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52534: LD_ADDR_VAR 0 49
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 2
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52563: LD_ADDR_VAR 0 50
52567: PUSH
52568: LD_INT 2
52570: PUSH
52571: LD_INT 3
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52592: LD_ADDR_VAR 0 51
52596: PUSH
52597: LD_INT 1
52599: NEG
52600: PUSH
52601: LD_INT 2
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 2
52610: NEG
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52623: LD_ADDR_VAR 0 52
52627: PUSH
52628: LD_INT 3
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52656: LD_ADDR_VAR 0 53
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 3
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52700: LD_ADDR_VAR 0 54
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: LD_INT 0
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 3
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52741: LD_ADDR_VAR 0 55
52745: PUSH
52746: LD_INT 3
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: LD_INT 3
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 2
52768: PUSH
52769: LD_INT 3
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: LIST
52780: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52781: LD_ADDR_VAR 0 56
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 3
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: LIST
52821: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52822: LD_ADDR_VAR 0 57
52826: PUSH
52827: LD_INT 2
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 3
52840: NEG
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: LD_INT 1
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: LIST
52865: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52866: LD_ADDR_VAR 0 58
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 3
52885: NEG
52886: PUSH
52887: LD_INT 2
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 3
52897: NEG
52898: PUSH
52899: LD_INT 3
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: LIST
52911: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52912: LD_ADDR_VAR 0 59
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: LD_INT 2
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52956: LD_ADDR_VAR 0 60
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52997: LD_ADDR_VAR 0 61
53001: PUSH
53002: LD_INT 2
53004: PUSH
53005: LD_INT 1
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 2
53014: PUSH
53015: LD_INT 2
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53037: LD_ADDR_VAR 0 62
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 2
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53078: LD_ADDR_VAR 0 63
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: LIST
53121: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53122: LD_ADDR_VAR 0 64
53126: PUSH
53127: LD_INT 1
53129: NEG
53130: PUSH
53131: LD_INT 2
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 2
53141: NEG
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 2
53153: NEG
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// end ; 2 :
53168: GO 56434
53170: LD_INT 2
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53178
53176: GO 56433
53178: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53179: LD_ADDR_VAR 0 29
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: LD_INT 0
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 4
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 5
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 5
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 4
53227: PUSH
53228: LD_INT 1
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 1
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 3
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 5
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 3
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 4
53299: PUSH
53300: LD_INT 3
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 4
53309: PUSH
53310: LD_INT 4
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 4
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: LD_INT 4
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 3
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 4
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_INT 1
53399: PUSH
53400: LD_INT 5
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 5
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: NEG
53420: PUSH
53421: LD_INT 4
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 3
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: LD_INT 5
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: NEG
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: LD_INT 1
53477: NEG
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 3
53507: NEG
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 4
53518: NEG
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 4
53529: NEG
53530: PUSH
53531: LD_INT 1
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 4
53541: NEG
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 4
53564: NEG
53565: PUSH
53566: LD_INT 4
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 4
53576: NEG
53577: PUSH
53578: LD_INT 5
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 3
53588: NEG
53589: PUSH
53590: LD_INT 4
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 3
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 4
53612: NEG
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 5
53624: NEG
53625: PUSH
53626: LD_INT 4
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 5
53636: NEG
53637: PUSH
53638: LD_INT 5
53640: NEG
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 3
53648: NEG
53649: PUSH
53650: LD_INT 5
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 5
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53717: LD_ADDR_VAR 0 30
53721: PUSH
53722: LD_INT 4
53724: PUSH
53725: LD_INT 4
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 4
53734: PUSH
53735: LD_INT 3
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 5
53744: PUSH
53745: LD_INT 4
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 5
53754: PUSH
53755: LD_INT 5
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 4
53764: PUSH
53765: LD_INT 5
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 3
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 5
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: LD_INT 5
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 0
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 3
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: PUSH
53845: LD_INT 4
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: LD_INT 4
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: LD_INT 3
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: LD_INT 4
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 2
53896: NEG
53897: PUSH
53898: LD_INT 2
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: NEG
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 4
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 3
53930: NEG
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 4
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 5
53963: NEG
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: PUSH
53972: LD_INT 5
53974: NEG
53975: PUSH
53976: LD_INT 1
53978: NEG
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 5
53986: NEG
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 3
53998: NEG
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 3
54009: NEG
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: LD_INT 4
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 4
54069: NEG
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: LD_INT 4
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 4
54097: NEG
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 4
54105: NEG
54106: PUSH
54107: LD_INT 2
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 4
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 5
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 4
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: LD_INT 3
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: LD_INT 4
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 5
54188: NEG
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 2
54196: PUSH
54197: LD_INT 3
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 5
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54264: LD_ADDR_VAR 0 31
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 4
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 5
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 5
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 4
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 2
54343: PUSH
54344: LD_INT 5
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: NEG
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 4
54420: NEG
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 4
54431: NEG
54432: PUSH
54433: LD_INT 1
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 4
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: LD_INT 2
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 4
54466: NEG
54467: PUSH
54468: LD_INT 4
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 4
54478: NEG
54479: PUSH
54480: LD_INT 5
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 3
54490: NEG
54491: PUSH
54492: LD_INT 4
54494: NEG
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 3
54502: NEG
54503: PUSH
54504: LD_INT 3
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 4
54514: NEG
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 5
54526: NEG
54527: PUSH
54528: LD_INT 4
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 5
54538: NEG
54539: PUSH
54540: LD_INT 5
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 3
54550: NEG
54551: PUSH
54552: LD_INT 5
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 5
54562: NEG
54563: PUSH
54564: LD_INT 3
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: LD_INT 3
54577: NEG
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: LD_INT 4
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 3
54599: NEG
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 2
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 4
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 4
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 4
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 5
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 5
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 4
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 3
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: LD_INT 2
54751: NEG
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 5
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54814: LD_ADDR_VAR 0 32
54818: PUSH
54819: LD_INT 4
54821: NEG
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 4
54832: NEG
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: EMPTY
54839: LIST
54840: LIST
54841: PUSH
54842: LD_INT 3
54844: NEG
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 4
54866: NEG
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 5
54877: NEG
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 5
54888: NEG
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 5
54900: NEG
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 3
54912: NEG
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: LD_INT 4
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: LD_INT 3
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 2
54959: NEG
54960: PUSH
54961: LD_INT 2
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 3
54971: NEG
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 4
54983: NEG
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 4
54995: NEG
54996: PUSH
54997: LD_INT 4
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: LD_INT 4
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 4
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: LD_INT 4
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: LD_INT 5
55045: NEG
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 4
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 1
55064: PUSH
55065: LD_INT 3
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: NEG
55087: PUSH
55088: LD_INT 4
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 5
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 5
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 3
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 3
55143: PUSH
55144: LD_INT 1
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 4
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 2
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: LD_INT 4
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 4
55226: PUSH
55227: LD_INT 4
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 4
55236: PUSH
55237: LD_INT 3
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 5
55246: PUSH
55247: LD_INT 4
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 5
55256: PUSH
55257: LD_INT 5
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 4
55266: PUSH
55267: LD_INT 5
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 4
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 5
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: LD_INT 5
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55361: LD_ADDR_VAR 0 33
55365: PUSH
55366: LD_INT 4
55368: NEG
55369: PUSH
55370: LD_INT 4
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 4
55380: NEG
55381: PUSH
55382: LD_INT 5
55384: NEG
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: LD_INT 4
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: LD_INT 3
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 4
55416: NEG
55417: PUSH
55418: LD_INT 3
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 5
55428: NEG
55429: PUSH
55430: LD_INT 4
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 5
55440: NEG
55441: PUSH
55442: LD_INT 5
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 5
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 5
55464: NEG
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: LD_INT 4
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: LD_INT 3
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 4
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 4
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 4
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 4
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 5
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 5
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 4
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 3
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 5
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 4
55691: PUSH
55692: LD_INT 3
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 4
55701: PUSH
55702: LD_INT 4
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 3
55711: PUSH
55712: LD_INT 4
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 0
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: LD_INT 4
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 5
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 0
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 1
55811: NEG
55812: PUSH
55813: LD_INT 4
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 2
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 2
55843: NEG
55844: PUSH
55845: LD_INT 3
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55899: LD_ADDR_VAR 0 34
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: LD_INT 4
55909: NEG
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 5
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 4
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: NEG
55962: PUSH
55963: LD_INT 4
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: NEG
55974: PUSH
55975: LD_INT 5
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 3
55988: NEG
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 5
56000: NEG
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 3
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 3
56018: PUSH
56019: LD_INT 1
56021: NEG
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 4
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 4
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 2
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 2
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 4
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 4
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 4
56111: PUSH
56112: LD_INT 3
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 5
56121: PUSH
56122: LD_INT 4
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 5
56131: PUSH
56132: LD_INT 5
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 4
56141: PUSH
56142: LD_INT 5
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 4
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: LD_INT 3
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 5
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: LD_INT 5
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: LD_INT 3
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 0
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 4
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 3
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 4
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 2
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: NEG
56285: PUSH
56286: LD_INT 0
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 4
56295: NEG
56296: PUSH
56297: LD_INT 1
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 4
56329: NEG
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 5
56340: NEG
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 5
56351: NEG
56352: PUSH
56353: LD_INT 1
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 5
56363: NEG
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: ST_TO_ADDR
// end ; end ;
56431: GO 56434
56433: POP
// case btype of b_depot , b_warehouse :
56434: LD_VAR 0 1
56438: PUSH
56439: LD_INT 0
56441: DOUBLE
56442: EQUAL
56443: IFTRUE 56453
56445: LD_INT 1
56447: DOUBLE
56448: EQUAL
56449: IFTRUE 56453
56451: GO 56654
56453: POP
// case nation of nation_american :
56454: LD_VAR 0 5
56458: PUSH
56459: LD_INT 1
56461: DOUBLE
56462: EQUAL
56463: IFTRUE 56467
56465: GO 56523
56467: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56468: LD_ADDR_VAR 0 9
56472: PUSH
56473: LD_VAR 0 11
56477: PUSH
56478: LD_VAR 0 12
56482: PUSH
56483: LD_VAR 0 13
56487: PUSH
56488: LD_VAR 0 14
56492: PUSH
56493: LD_VAR 0 15
56497: PUSH
56498: LD_VAR 0 16
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: PUSH
56511: LD_VAR 0 4
56515: PUSH
56516: LD_INT 1
56518: PLUS
56519: ARRAY
56520: ST_TO_ADDR
56521: GO 56652
56523: LD_INT 2
56525: DOUBLE
56526: EQUAL
56527: IFTRUE 56531
56529: GO 56587
56531: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56532: LD_ADDR_VAR 0 9
56536: PUSH
56537: LD_VAR 0 17
56541: PUSH
56542: LD_VAR 0 18
56546: PUSH
56547: LD_VAR 0 19
56551: PUSH
56552: LD_VAR 0 20
56556: PUSH
56557: LD_VAR 0 21
56561: PUSH
56562: LD_VAR 0 22
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: PUSH
56575: LD_VAR 0 4
56579: PUSH
56580: LD_INT 1
56582: PLUS
56583: ARRAY
56584: ST_TO_ADDR
56585: GO 56652
56587: LD_INT 3
56589: DOUBLE
56590: EQUAL
56591: IFTRUE 56595
56593: GO 56651
56595: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56596: LD_ADDR_VAR 0 9
56600: PUSH
56601: LD_VAR 0 23
56605: PUSH
56606: LD_VAR 0 24
56610: PUSH
56611: LD_VAR 0 25
56615: PUSH
56616: LD_VAR 0 26
56620: PUSH
56621: LD_VAR 0 27
56625: PUSH
56626: LD_VAR 0 28
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: PUSH
56639: LD_VAR 0 4
56643: PUSH
56644: LD_INT 1
56646: PLUS
56647: ARRAY
56648: ST_TO_ADDR
56649: GO 56652
56651: POP
56652: GO 57207
56654: LD_INT 2
56656: DOUBLE
56657: EQUAL
56658: IFTRUE 56668
56660: LD_INT 3
56662: DOUBLE
56663: EQUAL
56664: IFTRUE 56668
56666: GO 56724
56668: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56669: LD_ADDR_VAR 0 9
56673: PUSH
56674: LD_VAR 0 29
56678: PUSH
56679: LD_VAR 0 30
56683: PUSH
56684: LD_VAR 0 31
56688: PUSH
56689: LD_VAR 0 32
56693: PUSH
56694: LD_VAR 0 33
56698: PUSH
56699: LD_VAR 0 34
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: PUSH
56712: LD_VAR 0 4
56716: PUSH
56717: LD_INT 1
56719: PLUS
56720: ARRAY
56721: ST_TO_ADDR
56722: GO 57207
56724: LD_INT 16
56726: DOUBLE
56727: EQUAL
56728: IFTRUE 56786
56730: LD_INT 17
56732: DOUBLE
56733: EQUAL
56734: IFTRUE 56786
56736: LD_INT 18
56738: DOUBLE
56739: EQUAL
56740: IFTRUE 56786
56742: LD_INT 19
56744: DOUBLE
56745: EQUAL
56746: IFTRUE 56786
56748: LD_INT 22
56750: DOUBLE
56751: EQUAL
56752: IFTRUE 56786
56754: LD_INT 20
56756: DOUBLE
56757: EQUAL
56758: IFTRUE 56786
56760: LD_INT 21
56762: DOUBLE
56763: EQUAL
56764: IFTRUE 56786
56766: LD_INT 23
56768: DOUBLE
56769: EQUAL
56770: IFTRUE 56786
56772: LD_INT 24
56774: DOUBLE
56775: EQUAL
56776: IFTRUE 56786
56778: LD_INT 25
56780: DOUBLE
56781: EQUAL
56782: IFTRUE 56786
56784: GO 56842
56786: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56787: LD_ADDR_VAR 0 9
56791: PUSH
56792: LD_VAR 0 35
56796: PUSH
56797: LD_VAR 0 36
56801: PUSH
56802: LD_VAR 0 37
56806: PUSH
56807: LD_VAR 0 38
56811: PUSH
56812: LD_VAR 0 39
56816: PUSH
56817: LD_VAR 0 40
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: PUSH
56830: LD_VAR 0 4
56834: PUSH
56835: LD_INT 1
56837: PLUS
56838: ARRAY
56839: ST_TO_ADDR
56840: GO 57207
56842: LD_INT 6
56844: DOUBLE
56845: EQUAL
56846: IFTRUE 56898
56848: LD_INT 7
56850: DOUBLE
56851: EQUAL
56852: IFTRUE 56898
56854: LD_INT 8
56856: DOUBLE
56857: EQUAL
56858: IFTRUE 56898
56860: LD_INT 13
56862: DOUBLE
56863: EQUAL
56864: IFTRUE 56898
56866: LD_INT 12
56868: DOUBLE
56869: EQUAL
56870: IFTRUE 56898
56872: LD_INT 15
56874: DOUBLE
56875: EQUAL
56876: IFTRUE 56898
56878: LD_INT 11
56880: DOUBLE
56881: EQUAL
56882: IFTRUE 56898
56884: LD_INT 14
56886: DOUBLE
56887: EQUAL
56888: IFTRUE 56898
56890: LD_INT 10
56892: DOUBLE
56893: EQUAL
56894: IFTRUE 56898
56896: GO 56954
56898: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56899: LD_ADDR_VAR 0 9
56903: PUSH
56904: LD_VAR 0 41
56908: PUSH
56909: LD_VAR 0 42
56913: PUSH
56914: LD_VAR 0 43
56918: PUSH
56919: LD_VAR 0 44
56923: PUSH
56924: LD_VAR 0 45
56928: PUSH
56929: LD_VAR 0 46
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: PUSH
56942: LD_VAR 0 4
56946: PUSH
56947: LD_INT 1
56949: PLUS
56950: ARRAY
56951: ST_TO_ADDR
56952: GO 57207
56954: LD_INT 36
56956: DOUBLE
56957: EQUAL
56958: IFTRUE 56962
56960: GO 57018
56962: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56963: LD_ADDR_VAR 0 9
56967: PUSH
56968: LD_VAR 0 47
56972: PUSH
56973: LD_VAR 0 48
56977: PUSH
56978: LD_VAR 0 49
56982: PUSH
56983: LD_VAR 0 50
56987: PUSH
56988: LD_VAR 0 51
56992: PUSH
56993: LD_VAR 0 52
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: PUSH
57006: LD_VAR 0 4
57010: PUSH
57011: LD_INT 1
57013: PLUS
57014: ARRAY
57015: ST_TO_ADDR
57016: GO 57207
57018: LD_INT 4
57020: DOUBLE
57021: EQUAL
57022: IFTRUE 57044
57024: LD_INT 5
57026: DOUBLE
57027: EQUAL
57028: IFTRUE 57044
57030: LD_INT 34
57032: DOUBLE
57033: EQUAL
57034: IFTRUE 57044
57036: LD_INT 37
57038: DOUBLE
57039: EQUAL
57040: IFTRUE 57044
57042: GO 57100
57044: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57045: LD_ADDR_VAR 0 9
57049: PUSH
57050: LD_VAR 0 53
57054: PUSH
57055: LD_VAR 0 54
57059: PUSH
57060: LD_VAR 0 55
57064: PUSH
57065: LD_VAR 0 56
57069: PUSH
57070: LD_VAR 0 57
57074: PUSH
57075: LD_VAR 0 58
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: PUSH
57088: LD_VAR 0 4
57092: PUSH
57093: LD_INT 1
57095: PLUS
57096: ARRAY
57097: ST_TO_ADDR
57098: GO 57207
57100: LD_INT 31
57102: DOUBLE
57103: EQUAL
57104: IFTRUE 57150
57106: LD_INT 32
57108: DOUBLE
57109: EQUAL
57110: IFTRUE 57150
57112: LD_INT 33
57114: DOUBLE
57115: EQUAL
57116: IFTRUE 57150
57118: LD_INT 27
57120: DOUBLE
57121: EQUAL
57122: IFTRUE 57150
57124: LD_INT 26
57126: DOUBLE
57127: EQUAL
57128: IFTRUE 57150
57130: LD_INT 28
57132: DOUBLE
57133: EQUAL
57134: IFTRUE 57150
57136: LD_INT 29
57138: DOUBLE
57139: EQUAL
57140: IFTRUE 57150
57142: LD_INT 30
57144: DOUBLE
57145: EQUAL
57146: IFTRUE 57150
57148: GO 57206
57150: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57151: LD_ADDR_VAR 0 9
57155: PUSH
57156: LD_VAR 0 59
57160: PUSH
57161: LD_VAR 0 60
57165: PUSH
57166: LD_VAR 0 61
57170: PUSH
57171: LD_VAR 0 62
57175: PUSH
57176: LD_VAR 0 63
57180: PUSH
57181: LD_VAR 0 64
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: PUSH
57194: LD_VAR 0 4
57198: PUSH
57199: LD_INT 1
57201: PLUS
57202: ARRAY
57203: ST_TO_ADDR
57204: GO 57207
57206: POP
// temp_list2 = [ ] ;
57207: LD_ADDR_VAR 0 10
57211: PUSH
57212: EMPTY
57213: ST_TO_ADDR
// for i in temp_list do
57214: LD_ADDR_VAR 0 8
57218: PUSH
57219: LD_VAR 0 9
57223: PUSH
57224: FOR_IN
57225: IFFALSE 57277
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57227: LD_ADDR_VAR 0 10
57231: PUSH
57232: LD_VAR 0 10
57236: PUSH
57237: LD_VAR 0 8
57241: PUSH
57242: LD_INT 1
57244: ARRAY
57245: PUSH
57246: LD_VAR 0 2
57250: PLUS
57251: PUSH
57252: LD_VAR 0 8
57256: PUSH
57257: LD_INT 2
57259: ARRAY
57260: PUSH
57261: LD_VAR 0 3
57265: PLUS
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: ADD
57274: ST_TO_ADDR
57275: GO 57224
57277: POP
57278: POP
// result = temp_list2 ;
57279: LD_ADDR_VAR 0 7
57283: PUSH
57284: LD_VAR 0 10
57288: ST_TO_ADDR
// end ;
57289: LD_VAR 0 7
57293: RET
// export function EnemyInRange ( unit , dist ) ; begin
57294: LD_INT 0
57296: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57297: LD_ADDR_VAR 0 3
57301: PUSH
57302: LD_VAR 0 1
57306: PPUSH
57307: CALL_OW 255
57311: PPUSH
57312: LD_VAR 0 1
57316: PPUSH
57317: CALL_OW 250
57321: PPUSH
57322: LD_VAR 0 1
57326: PPUSH
57327: CALL_OW 251
57331: PPUSH
57332: LD_VAR 0 2
57336: PPUSH
57337: CALL 30667 0 4
57341: PUSH
57342: LD_INT 4
57344: ARRAY
57345: ST_TO_ADDR
// end ;
57346: LD_VAR 0 3
57350: RET
// export function PlayerSeeMe ( unit ) ; begin
57351: LD_INT 0
57353: PPUSH
// result := See ( your_side , unit ) ;
57354: LD_ADDR_VAR 0 2
57358: PUSH
57359: LD_OWVAR 2
57363: PPUSH
57364: LD_VAR 0 1
57368: PPUSH
57369: CALL_OW 292
57373: ST_TO_ADDR
// end ;
57374: LD_VAR 0 2
57378: RET
// export function ReverseDir ( unit ) ; begin
57379: LD_INT 0
57381: PPUSH
// if not unit then
57382: LD_VAR 0 1
57386: NOT
57387: IFFALSE 57391
// exit ;
57389: GO 57414
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57391: LD_ADDR_VAR 0 2
57395: PUSH
57396: LD_VAR 0 1
57400: PPUSH
57401: CALL_OW 254
57405: PUSH
57406: LD_INT 3
57408: PLUS
57409: PUSH
57410: LD_INT 6
57412: MOD
57413: ST_TO_ADDR
// end ;
57414: LD_VAR 0 2
57418: RET
// export function ReverseArray ( array ) ; var i ; begin
57419: LD_INT 0
57421: PPUSH
57422: PPUSH
// if not array then
57423: LD_VAR 0 1
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57487
// result := [ ] ;
57432: LD_ADDR_VAR 0 2
57436: PUSH
57437: EMPTY
57438: ST_TO_ADDR
// for i := array downto 1 do
57439: LD_ADDR_VAR 0 3
57443: PUSH
57444: DOUBLE
57445: LD_VAR 0 1
57449: INC
57450: ST_TO_ADDR
57451: LD_INT 1
57453: PUSH
57454: FOR_DOWNTO
57455: IFFALSE 57485
// result := Join ( result , array [ i ] ) ;
57457: LD_ADDR_VAR 0 2
57461: PUSH
57462: LD_VAR 0 2
57466: PPUSH
57467: LD_VAR 0 1
57471: PUSH
57472: LD_VAR 0 3
57476: ARRAY
57477: PPUSH
57478: CALL 62130 0 2
57482: ST_TO_ADDR
57483: GO 57454
57485: POP
57486: POP
// end ;
57487: LD_VAR 0 2
57491: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57492: LD_INT 0
57494: PPUSH
57495: PPUSH
57496: PPUSH
57497: PPUSH
57498: PPUSH
57499: PPUSH
// if not unit or not hexes then
57500: LD_VAR 0 1
57504: NOT
57505: PUSH
57506: LD_VAR 0 2
57510: NOT
57511: OR
57512: IFFALSE 57516
// exit ;
57514: GO 57639
// dist := 9999 ;
57516: LD_ADDR_VAR 0 5
57520: PUSH
57521: LD_INT 9999
57523: ST_TO_ADDR
// for i = 1 to hexes do
57524: LD_ADDR_VAR 0 4
57528: PUSH
57529: DOUBLE
57530: LD_INT 1
57532: DEC
57533: ST_TO_ADDR
57534: LD_VAR 0 2
57538: PUSH
57539: FOR_TO
57540: IFFALSE 57627
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57542: LD_ADDR_VAR 0 6
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: LD_VAR 0 2
57556: PUSH
57557: LD_VAR 0 4
57561: ARRAY
57562: PUSH
57563: LD_INT 1
57565: ARRAY
57566: PPUSH
57567: LD_VAR 0 2
57571: PUSH
57572: LD_VAR 0 4
57576: ARRAY
57577: PUSH
57578: LD_INT 2
57580: ARRAY
57581: PPUSH
57582: CALL_OW 297
57586: ST_TO_ADDR
// if tdist < dist then
57587: LD_VAR 0 6
57591: PUSH
57592: LD_VAR 0 5
57596: LESS
57597: IFFALSE 57625
// begin hex := hexes [ i ] ;
57599: LD_ADDR_VAR 0 8
57603: PUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_VAR 0 4
57613: ARRAY
57614: ST_TO_ADDR
// dist := tdist ;
57615: LD_ADDR_VAR 0 5
57619: PUSH
57620: LD_VAR 0 6
57624: ST_TO_ADDR
// end ; end ;
57625: GO 57539
57627: POP
57628: POP
// result := hex ;
57629: LD_ADDR_VAR 0 3
57633: PUSH
57634: LD_VAR 0 8
57638: ST_TO_ADDR
// end ;
57639: LD_VAR 0 3
57643: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57644: LD_INT 0
57646: PPUSH
57647: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57648: LD_VAR 0 1
57652: NOT
57653: PUSH
57654: LD_VAR 0 1
57658: PUSH
57659: LD_INT 21
57661: PUSH
57662: LD_INT 2
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 23
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PPUSH
57683: CALL_OW 69
57687: IN
57688: NOT
57689: OR
57690: IFFALSE 57694
// exit ;
57692: GO 57741
// for i = 1 to 3 do
57694: LD_ADDR_VAR 0 3
57698: PUSH
57699: DOUBLE
57700: LD_INT 1
57702: DEC
57703: ST_TO_ADDR
57704: LD_INT 3
57706: PUSH
57707: FOR_TO
57708: IFFALSE 57739
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57710: LD_VAR 0 1
57714: PPUSH
57715: CALL_OW 250
57719: PPUSH
57720: LD_VAR 0 1
57724: PPUSH
57725: CALL_OW 251
57729: PPUSH
57730: LD_INT 1
57732: PPUSH
57733: CALL_OW 453
57737: GO 57707
57739: POP
57740: POP
// end ;
57741: LD_VAR 0 2
57745: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57746: LD_INT 0
57748: PPUSH
57749: PPUSH
57750: PPUSH
57751: PPUSH
57752: PPUSH
57753: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57754: LD_VAR 0 1
57758: NOT
57759: PUSH
57760: LD_VAR 0 2
57764: NOT
57765: OR
57766: PUSH
57767: LD_VAR 0 1
57771: PPUSH
57772: CALL_OW 314
57776: OR
57777: IFFALSE 57781
// exit ;
57779: GO 58248
// if GetLives ( i ) < 250 then
57781: LD_VAR 0 4
57785: PPUSH
57786: CALL_OW 256
57790: PUSH
57791: LD_INT 250
57793: LESS
57794: IFFALSE 57807
// begin ComAutodestruct ( i ) ;
57796: LD_VAR 0 4
57800: PPUSH
57801: CALL 57644 0 1
// exit ;
57805: GO 58248
// end ; x := GetX ( enemy_unit ) ;
57807: LD_ADDR_VAR 0 7
57811: PUSH
57812: LD_VAR 0 2
57816: PPUSH
57817: CALL_OW 250
57821: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57822: LD_ADDR_VAR 0 8
57826: PUSH
57827: LD_VAR 0 2
57831: PPUSH
57832: CALL_OW 251
57836: ST_TO_ADDR
// if not x or not y then
57837: LD_VAR 0 7
57841: NOT
57842: PUSH
57843: LD_VAR 0 8
57847: NOT
57848: OR
57849: IFFALSE 57853
// exit ;
57851: GO 58248
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57853: LD_ADDR_VAR 0 6
57857: PUSH
57858: LD_VAR 0 7
57862: PPUSH
57863: LD_INT 0
57865: PPUSH
57866: LD_INT 4
57868: PPUSH
57869: CALL_OW 272
57873: PUSH
57874: LD_VAR 0 8
57878: PPUSH
57879: LD_INT 0
57881: PPUSH
57882: LD_INT 4
57884: PPUSH
57885: CALL_OW 273
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_VAR 0 7
57898: PPUSH
57899: LD_INT 1
57901: PPUSH
57902: LD_INT 4
57904: PPUSH
57905: CALL_OW 272
57909: PUSH
57910: LD_VAR 0 8
57914: PPUSH
57915: LD_INT 1
57917: PPUSH
57918: LD_INT 4
57920: PPUSH
57921: CALL_OW 273
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_VAR 0 7
57934: PPUSH
57935: LD_INT 2
57937: PPUSH
57938: LD_INT 4
57940: PPUSH
57941: CALL_OW 272
57945: PUSH
57946: LD_VAR 0 8
57950: PPUSH
57951: LD_INT 2
57953: PPUSH
57954: LD_INT 4
57956: PPUSH
57957: CALL_OW 273
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_VAR 0 7
57970: PPUSH
57971: LD_INT 3
57973: PPUSH
57974: LD_INT 4
57976: PPUSH
57977: CALL_OW 272
57981: PUSH
57982: LD_VAR 0 8
57986: PPUSH
57987: LD_INT 3
57989: PPUSH
57990: LD_INT 4
57992: PPUSH
57993: CALL_OW 273
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_VAR 0 7
58006: PPUSH
58007: LD_INT 4
58009: PPUSH
58010: LD_INT 4
58012: PPUSH
58013: CALL_OW 272
58017: PUSH
58018: LD_VAR 0 8
58022: PPUSH
58023: LD_INT 4
58025: PPUSH
58026: LD_INT 4
58028: PPUSH
58029: CALL_OW 273
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_VAR 0 7
58042: PPUSH
58043: LD_INT 5
58045: PPUSH
58046: LD_INT 4
58048: PPUSH
58049: CALL_OW 272
58053: PUSH
58054: LD_VAR 0 8
58058: PPUSH
58059: LD_INT 5
58061: PPUSH
58062: LD_INT 4
58064: PPUSH
58065: CALL_OW 273
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// for i = tmp downto 1 do
58082: LD_ADDR_VAR 0 4
58086: PUSH
58087: DOUBLE
58088: LD_VAR 0 6
58092: INC
58093: ST_TO_ADDR
58094: LD_INT 1
58096: PUSH
58097: FOR_DOWNTO
58098: IFFALSE 58199
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58100: LD_VAR 0 6
58104: PUSH
58105: LD_VAR 0 4
58109: ARRAY
58110: PUSH
58111: LD_INT 1
58113: ARRAY
58114: PPUSH
58115: LD_VAR 0 6
58119: PUSH
58120: LD_VAR 0 4
58124: ARRAY
58125: PUSH
58126: LD_INT 2
58128: ARRAY
58129: PPUSH
58130: CALL_OW 488
58134: NOT
58135: PUSH
58136: LD_VAR 0 6
58140: PUSH
58141: LD_VAR 0 4
58145: ARRAY
58146: PUSH
58147: LD_INT 1
58149: ARRAY
58150: PPUSH
58151: LD_VAR 0 6
58155: PUSH
58156: LD_VAR 0 4
58160: ARRAY
58161: PUSH
58162: LD_INT 2
58164: ARRAY
58165: PPUSH
58166: CALL_OW 428
58170: PUSH
58171: LD_INT 0
58173: NONEQUAL
58174: OR
58175: IFFALSE 58197
// tmp := Delete ( tmp , i ) ;
58177: LD_ADDR_VAR 0 6
58181: PUSH
58182: LD_VAR 0 6
58186: PPUSH
58187: LD_VAR 0 4
58191: PPUSH
58192: CALL_OW 3
58196: ST_TO_ADDR
58197: GO 58097
58199: POP
58200: POP
// j := GetClosestHex ( unit , tmp ) ;
58201: LD_ADDR_VAR 0 5
58205: PUSH
58206: LD_VAR 0 1
58210: PPUSH
58211: LD_VAR 0 6
58215: PPUSH
58216: CALL 57492 0 2
58220: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58221: LD_VAR 0 1
58225: PPUSH
58226: LD_VAR 0 5
58230: PUSH
58231: LD_INT 1
58233: ARRAY
58234: PPUSH
58235: LD_VAR 0 5
58239: PUSH
58240: LD_INT 2
58242: ARRAY
58243: PPUSH
58244: CALL_OW 111
// end ;
58248: LD_VAR 0 3
58252: RET
// export function PrepareApemanSoldier ( ) ; begin
58253: LD_INT 0
58255: PPUSH
// uc_nation := 0 ;
58256: LD_ADDR_OWVAR 21
58260: PUSH
58261: LD_INT 0
58263: ST_TO_ADDR
// hc_sex := sex_male ;
58264: LD_ADDR_OWVAR 27
58268: PUSH
58269: LD_INT 1
58271: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58272: LD_ADDR_OWVAR 28
58276: PUSH
58277: LD_INT 15
58279: ST_TO_ADDR
// hc_gallery :=  ;
58280: LD_ADDR_OWVAR 33
58284: PUSH
58285: LD_STRING 
58287: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58288: LD_ADDR_OWVAR 31
58292: PUSH
58293: LD_INT 0
58295: PPUSH
58296: LD_INT 3
58298: PPUSH
58299: CALL_OW 12
58303: PUSH
58304: LD_INT 0
58306: PPUSH
58307: LD_INT 3
58309: PPUSH
58310: CALL_OW 12
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// end ;
58327: LD_VAR 0 1
58331: RET
// export function PrepareApemanEngineer ( ) ; begin
58332: LD_INT 0
58334: PPUSH
// uc_nation := 0 ;
58335: LD_ADDR_OWVAR 21
58339: PUSH
58340: LD_INT 0
58342: ST_TO_ADDR
// hc_sex := sex_male ;
58343: LD_ADDR_OWVAR 27
58347: PUSH
58348: LD_INT 1
58350: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58351: LD_ADDR_OWVAR 28
58355: PUSH
58356: LD_INT 16
58358: ST_TO_ADDR
// hc_gallery :=  ;
58359: LD_ADDR_OWVAR 33
58363: PUSH
58364: LD_STRING 
58366: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58367: LD_ADDR_OWVAR 31
58371: PUSH
58372: LD_INT 0
58374: PPUSH
58375: LD_INT 3
58377: PPUSH
58378: CALL_OW 12
58382: PUSH
58383: LD_INT 0
58385: PPUSH
58386: LD_INT 3
58388: PPUSH
58389: CALL_OW 12
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: ST_TO_ADDR
// end ;
58406: LD_VAR 0 1
58410: RET
// export function PrepareApeman ( agressivity ) ; begin
58411: LD_INT 0
58413: PPUSH
// uc_side := 0 ;
58414: LD_ADDR_OWVAR 20
58418: PUSH
58419: LD_INT 0
58421: ST_TO_ADDR
// uc_nation := 0 ;
58422: LD_ADDR_OWVAR 21
58426: PUSH
58427: LD_INT 0
58429: ST_TO_ADDR
// hc_sex := sex_male ;
58430: LD_ADDR_OWVAR 27
58434: PUSH
58435: LD_INT 1
58437: ST_TO_ADDR
// hc_class := class_apeman ;
58438: LD_ADDR_OWVAR 28
58442: PUSH
58443: LD_INT 12
58445: ST_TO_ADDR
// hc_gallery :=  ;
58446: LD_ADDR_OWVAR 33
58450: PUSH
58451: LD_STRING 
58453: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58454: LD_ADDR_OWVAR 35
58458: PUSH
58459: LD_VAR 0 1
58463: NEG
58464: PPUSH
58465: LD_VAR 0 1
58469: PPUSH
58470: CALL_OW 12
58474: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58475: LD_ADDR_OWVAR 31
58479: PUSH
58480: LD_INT 0
58482: PPUSH
58483: LD_INT 3
58485: PPUSH
58486: CALL_OW 12
58490: PUSH
58491: LD_INT 0
58493: PPUSH
58494: LD_INT 3
58496: PPUSH
58497: CALL_OW 12
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: ST_TO_ADDR
// end ;
58514: LD_VAR 0 2
58518: RET
// export function PrepareTiger ( agressivity ) ; begin
58519: LD_INT 0
58521: PPUSH
// uc_side := 0 ;
58522: LD_ADDR_OWVAR 20
58526: PUSH
58527: LD_INT 0
58529: ST_TO_ADDR
// uc_nation := 0 ;
58530: LD_ADDR_OWVAR 21
58534: PUSH
58535: LD_INT 0
58537: ST_TO_ADDR
// hc_class := class_tiger ;
58538: LD_ADDR_OWVAR 28
58542: PUSH
58543: LD_INT 14
58545: ST_TO_ADDR
// hc_gallery :=  ;
58546: LD_ADDR_OWVAR 33
58550: PUSH
58551: LD_STRING 
58553: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58554: LD_ADDR_OWVAR 35
58558: PUSH
58559: LD_VAR 0 1
58563: NEG
58564: PPUSH
58565: LD_VAR 0 1
58569: PPUSH
58570: CALL_OW 12
58574: ST_TO_ADDR
// end ;
58575: LD_VAR 0 2
58579: RET
// export function PrepareEnchidna ( ) ; begin
58580: LD_INT 0
58582: PPUSH
// uc_side := 0 ;
58583: LD_ADDR_OWVAR 20
58587: PUSH
58588: LD_INT 0
58590: ST_TO_ADDR
// uc_nation := 0 ;
58591: LD_ADDR_OWVAR 21
58595: PUSH
58596: LD_INT 0
58598: ST_TO_ADDR
// hc_class := class_baggie ;
58599: LD_ADDR_OWVAR 28
58603: PUSH
58604: LD_INT 13
58606: ST_TO_ADDR
// hc_gallery :=  ;
58607: LD_ADDR_OWVAR 33
58611: PUSH
58612: LD_STRING 
58614: ST_TO_ADDR
// end ;
58615: LD_VAR 0 1
58619: RET
// export function PrepareFrog ( ) ; begin
58620: LD_INT 0
58622: PPUSH
// uc_side := 0 ;
58623: LD_ADDR_OWVAR 20
58627: PUSH
58628: LD_INT 0
58630: ST_TO_ADDR
// uc_nation := 0 ;
58631: LD_ADDR_OWVAR 21
58635: PUSH
58636: LD_INT 0
58638: ST_TO_ADDR
// hc_class := class_frog ;
58639: LD_ADDR_OWVAR 28
58643: PUSH
58644: LD_INT 19
58646: ST_TO_ADDR
// hc_gallery :=  ;
58647: LD_ADDR_OWVAR 33
58651: PUSH
58652: LD_STRING 
58654: ST_TO_ADDR
// end ;
58655: LD_VAR 0 1
58659: RET
// export function PrepareFish ( ) ; begin
58660: LD_INT 0
58662: PPUSH
// uc_side := 0 ;
58663: LD_ADDR_OWVAR 20
58667: PUSH
58668: LD_INT 0
58670: ST_TO_ADDR
// uc_nation := 0 ;
58671: LD_ADDR_OWVAR 21
58675: PUSH
58676: LD_INT 0
58678: ST_TO_ADDR
// hc_class := class_fish ;
58679: LD_ADDR_OWVAR 28
58683: PUSH
58684: LD_INT 20
58686: ST_TO_ADDR
// hc_gallery :=  ;
58687: LD_ADDR_OWVAR 33
58691: PUSH
58692: LD_STRING 
58694: ST_TO_ADDR
// end ;
58695: LD_VAR 0 1
58699: RET
// export function PrepareBird ( ) ; begin
58700: LD_INT 0
58702: PPUSH
// uc_side := 0 ;
58703: LD_ADDR_OWVAR 20
58707: PUSH
58708: LD_INT 0
58710: ST_TO_ADDR
// uc_nation := 0 ;
58711: LD_ADDR_OWVAR 21
58715: PUSH
58716: LD_INT 0
58718: ST_TO_ADDR
// hc_class := class_phororhacos ;
58719: LD_ADDR_OWVAR 28
58723: PUSH
58724: LD_INT 18
58726: ST_TO_ADDR
// hc_gallery :=  ;
58727: LD_ADDR_OWVAR 33
58731: PUSH
58732: LD_STRING 
58734: ST_TO_ADDR
// end ;
58735: LD_VAR 0 1
58739: RET
// export function PrepareHorse ( ) ; begin
58740: LD_INT 0
58742: PPUSH
// uc_side := 0 ;
58743: LD_ADDR_OWVAR 20
58747: PUSH
58748: LD_INT 0
58750: ST_TO_ADDR
// uc_nation := 0 ;
58751: LD_ADDR_OWVAR 21
58755: PUSH
58756: LD_INT 0
58758: ST_TO_ADDR
// hc_class := class_horse ;
58759: LD_ADDR_OWVAR 28
58763: PUSH
58764: LD_INT 21
58766: ST_TO_ADDR
// hc_gallery :=  ;
58767: LD_ADDR_OWVAR 33
58771: PUSH
58772: LD_STRING 
58774: ST_TO_ADDR
// end ;
58775: LD_VAR 0 1
58779: RET
// export function PrepareMastodont ( ) ; begin
58780: LD_INT 0
58782: PPUSH
// uc_side := 0 ;
58783: LD_ADDR_OWVAR 20
58787: PUSH
58788: LD_INT 0
58790: ST_TO_ADDR
// uc_nation := 0 ;
58791: LD_ADDR_OWVAR 21
58795: PUSH
58796: LD_INT 0
58798: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58799: LD_ADDR_OWVAR 37
58803: PUSH
58804: LD_INT 31
58806: ST_TO_ADDR
// vc_control := control_rider ;
58807: LD_ADDR_OWVAR 38
58811: PUSH
58812: LD_INT 4
58814: ST_TO_ADDR
// end ;
58815: LD_VAR 0 1
58819: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58820: LD_INT 0
58822: PPUSH
58823: PPUSH
58824: PPUSH
// uc_side = 0 ;
58825: LD_ADDR_OWVAR 20
58829: PUSH
58830: LD_INT 0
58832: ST_TO_ADDR
// uc_nation = 0 ;
58833: LD_ADDR_OWVAR 21
58837: PUSH
58838: LD_INT 0
58840: ST_TO_ADDR
// InitHc_All ( ) ;
58841: CALL_OW 584
// InitVc ;
58845: CALL_OW 20
// if mastodonts then
58849: LD_VAR 0 6
58853: IFFALSE 58920
// for i = 1 to mastodonts do
58855: LD_ADDR_VAR 0 11
58859: PUSH
58860: DOUBLE
58861: LD_INT 1
58863: DEC
58864: ST_TO_ADDR
58865: LD_VAR 0 6
58869: PUSH
58870: FOR_TO
58871: IFFALSE 58918
// begin vc_chassis := 31 ;
58873: LD_ADDR_OWVAR 37
58877: PUSH
58878: LD_INT 31
58880: ST_TO_ADDR
// vc_control := control_rider ;
58881: LD_ADDR_OWVAR 38
58885: PUSH
58886: LD_INT 4
58888: ST_TO_ADDR
// animal := CreateVehicle ;
58889: LD_ADDR_VAR 0 12
58893: PUSH
58894: CALL_OW 45
58898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58899: LD_VAR 0 12
58903: PPUSH
58904: LD_VAR 0 8
58908: PPUSH
58909: LD_INT 0
58911: PPUSH
58912: CALL 61048 0 3
// end ;
58916: GO 58870
58918: POP
58919: POP
// if horses then
58920: LD_VAR 0 5
58924: IFFALSE 58991
// for i = 1 to horses do
58926: LD_ADDR_VAR 0 11
58930: PUSH
58931: DOUBLE
58932: LD_INT 1
58934: DEC
58935: ST_TO_ADDR
58936: LD_VAR 0 5
58940: PUSH
58941: FOR_TO
58942: IFFALSE 58989
// begin hc_class := 21 ;
58944: LD_ADDR_OWVAR 28
58948: PUSH
58949: LD_INT 21
58951: ST_TO_ADDR
// hc_gallery :=  ;
58952: LD_ADDR_OWVAR 33
58956: PUSH
58957: LD_STRING 
58959: ST_TO_ADDR
// animal := CreateHuman ;
58960: LD_ADDR_VAR 0 12
58964: PUSH
58965: CALL_OW 44
58969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58970: LD_VAR 0 12
58974: PPUSH
58975: LD_VAR 0 8
58979: PPUSH
58980: LD_INT 0
58982: PPUSH
58983: CALL 61048 0 3
// end ;
58987: GO 58941
58989: POP
58990: POP
// if birds then
58991: LD_VAR 0 1
58995: IFFALSE 59062
// for i = 1 to birds do
58997: LD_ADDR_VAR 0 11
59001: PUSH
59002: DOUBLE
59003: LD_INT 1
59005: DEC
59006: ST_TO_ADDR
59007: LD_VAR 0 1
59011: PUSH
59012: FOR_TO
59013: IFFALSE 59060
// begin hc_class := 18 ;
59015: LD_ADDR_OWVAR 28
59019: PUSH
59020: LD_INT 18
59022: ST_TO_ADDR
// hc_gallery =  ;
59023: LD_ADDR_OWVAR 33
59027: PUSH
59028: LD_STRING 
59030: ST_TO_ADDR
// animal := CreateHuman ;
59031: LD_ADDR_VAR 0 12
59035: PUSH
59036: CALL_OW 44
59040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59041: LD_VAR 0 12
59045: PPUSH
59046: LD_VAR 0 8
59050: PPUSH
59051: LD_INT 0
59053: PPUSH
59054: CALL 61048 0 3
// end ;
59058: GO 59012
59060: POP
59061: POP
// if tigers then
59062: LD_VAR 0 2
59066: IFFALSE 59150
// for i = 1 to tigers do
59068: LD_ADDR_VAR 0 11
59072: PUSH
59073: DOUBLE
59074: LD_INT 1
59076: DEC
59077: ST_TO_ADDR
59078: LD_VAR 0 2
59082: PUSH
59083: FOR_TO
59084: IFFALSE 59148
// begin hc_class = class_tiger ;
59086: LD_ADDR_OWVAR 28
59090: PUSH
59091: LD_INT 14
59093: ST_TO_ADDR
// hc_gallery =  ;
59094: LD_ADDR_OWVAR 33
59098: PUSH
59099: LD_STRING 
59101: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59102: LD_ADDR_OWVAR 35
59106: PUSH
59107: LD_INT 7
59109: NEG
59110: PPUSH
59111: LD_INT 7
59113: PPUSH
59114: CALL_OW 12
59118: ST_TO_ADDR
// animal := CreateHuman ;
59119: LD_ADDR_VAR 0 12
59123: PUSH
59124: CALL_OW 44
59128: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59129: LD_VAR 0 12
59133: PPUSH
59134: LD_VAR 0 8
59138: PPUSH
59139: LD_INT 0
59141: PPUSH
59142: CALL 61048 0 3
// end ;
59146: GO 59083
59148: POP
59149: POP
// if apemans then
59150: LD_VAR 0 3
59154: IFFALSE 59277
// for i = 1 to apemans do
59156: LD_ADDR_VAR 0 11
59160: PUSH
59161: DOUBLE
59162: LD_INT 1
59164: DEC
59165: ST_TO_ADDR
59166: LD_VAR 0 3
59170: PUSH
59171: FOR_TO
59172: IFFALSE 59275
// begin hc_class = class_apeman ;
59174: LD_ADDR_OWVAR 28
59178: PUSH
59179: LD_INT 12
59181: ST_TO_ADDR
// hc_gallery =  ;
59182: LD_ADDR_OWVAR 33
59186: PUSH
59187: LD_STRING 
59189: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59190: LD_ADDR_OWVAR 35
59194: PUSH
59195: LD_INT 2
59197: NEG
59198: PPUSH
59199: LD_INT 2
59201: PPUSH
59202: CALL_OW 12
59206: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59207: LD_ADDR_OWVAR 31
59211: PUSH
59212: LD_INT 1
59214: PPUSH
59215: LD_INT 3
59217: PPUSH
59218: CALL_OW 12
59222: PUSH
59223: LD_INT 1
59225: PPUSH
59226: LD_INT 3
59228: PPUSH
59229: CALL_OW 12
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: ST_TO_ADDR
// animal := CreateHuman ;
59246: LD_ADDR_VAR 0 12
59250: PUSH
59251: CALL_OW 44
59255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59256: LD_VAR 0 12
59260: PPUSH
59261: LD_VAR 0 8
59265: PPUSH
59266: LD_INT 0
59268: PPUSH
59269: CALL 61048 0 3
// end ;
59273: GO 59171
59275: POP
59276: POP
// if enchidnas then
59277: LD_VAR 0 4
59281: IFFALSE 59348
// for i = 1 to enchidnas do
59283: LD_ADDR_VAR 0 11
59287: PUSH
59288: DOUBLE
59289: LD_INT 1
59291: DEC
59292: ST_TO_ADDR
59293: LD_VAR 0 4
59297: PUSH
59298: FOR_TO
59299: IFFALSE 59346
// begin hc_class = 13 ;
59301: LD_ADDR_OWVAR 28
59305: PUSH
59306: LD_INT 13
59308: ST_TO_ADDR
// hc_gallery =  ;
59309: LD_ADDR_OWVAR 33
59313: PUSH
59314: LD_STRING 
59316: ST_TO_ADDR
// animal := CreateHuman ;
59317: LD_ADDR_VAR 0 12
59321: PUSH
59322: CALL_OW 44
59326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59327: LD_VAR 0 12
59331: PPUSH
59332: LD_VAR 0 8
59336: PPUSH
59337: LD_INT 0
59339: PPUSH
59340: CALL 61048 0 3
// end ;
59344: GO 59298
59346: POP
59347: POP
// if fishes then
59348: LD_VAR 0 7
59352: IFFALSE 59419
// for i = 1 to fishes do
59354: LD_ADDR_VAR 0 11
59358: PUSH
59359: DOUBLE
59360: LD_INT 1
59362: DEC
59363: ST_TO_ADDR
59364: LD_VAR 0 7
59368: PUSH
59369: FOR_TO
59370: IFFALSE 59417
// begin hc_class = 20 ;
59372: LD_ADDR_OWVAR 28
59376: PUSH
59377: LD_INT 20
59379: ST_TO_ADDR
// hc_gallery =  ;
59380: LD_ADDR_OWVAR 33
59384: PUSH
59385: LD_STRING 
59387: ST_TO_ADDR
// animal := CreateHuman ;
59388: LD_ADDR_VAR 0 12
59392: PUSH
59393: CALL_OW 44
59397: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59398: LD_VAR 0 12
59402: PPUSH
59403: LD_VAR 0 9
59407: PPUSH
59408: LD_INT 0
59410: PPUSH
59411: CALL 61048 0 3
// end ;
59415: GO 59369
59417: POP
59418: POP
// end ;
59419: LD_VAR 0 10
59423: RET
// export function WantHeal ( sci , unit ) ; begin
59424: LD_INT 0
59426: PPUSH
// if GetTaskList ( sci ) > 0 then
59427: LD_VAR 0 1
59431: PPUSH
59432: CALL_OW 437
59436: PUSH
59437: LD_INT 0
59439: GREATER
59440: IFFALSE 59510
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59442: LD_VAR 0 1
59446: PPUSH
59447: CALL_OW 437
59451: PUSH
59452: LD_INT 1
59454: ARRAY
59455: PUSH
59456: LD_INT 1
59458: ARRAY
59459: PUSH
59460: LD_STRING l
59462: EQUAL
59463: PUSH
59464: LD_VAR 0 1
59468: PPUSH
59469: CALL_OW 437
59473: PUSH
59474: LD_INT 1
59476: ARRAY
59477: PUSH
59478: LD_INT 4
59480: ARRAY
59481: PUSH
59482: LD_VAR 0 2
59486: EQUAL
59487: AND
59488: IFFALSE 59500
// result := true else
59490: LD_ADDR_VAR 0 3
59494: PUSH
59495: LD_INT 1
59497: ST_TO_ADDR
59498: GO 59508
// result := false ;
59500: LD_ADDR_VAR 0 3
59504: PUSH
59505: LD_INT 0
59507: ST_TO_ADDR
// end else
59508: GO 59518
// result := false ;
59510: LD_ADDR_VAR 0 3
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// end ;
59518: LD_VAR 0 3
59522: RET
// export function HealTarget ( sci ) ; begin
59523: LD_INT 0
59525: PPUSH
// if not sci then
59526: LD_VAR 0 1
59530: NOT
59531: IFFALSE 59535
// exit ;
59533: GO 59600
// result := 0 ;
59535: LD_ADDR_VAR 0 2
59539: PUSH
59540: LD_INT 0
59542: ST_TO_ADDR
// if GetTaskList ( sci ) then
59543: LD_VAR 0 1
59547: PPUSH
59548: CALL_OW 437
59552: IFFALSE 59600
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59554: LD_VAR 0 1
59558: PPUSH
59559: CALL_OW 437
59563: PUSH
59564: LD_INT 1
59566: ARRAY
59567: PUSH
59568: LD_INT 1
59570: ARRAY
59571: PUSH
59572: LD_STRING l
59574: EQUAL
59575: IFFALSE 59600
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59577: LD_ADDR_VAR 0 2
59581: PUSH
59582: LD_VAR 0 1
59586: PPUSH
59587: CALL_OW 437
59591: PUSH
59592: LD_INT 1
59594: ARRAY
59595: PUSH
59596: LD_INT 4
59598: ARRAY
59599: ST_TO_ADDR
// end ;
59600: LD_VAR 0 2
59604: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59605: LD_INT 0
59607: PPUSH
59608: PPUSH
59609: PPUSH
59610: PPUSH
// if not base_units then
59611: LD_VAR 0 1
59615: NOT
59616: IFFALSE 59620
// exit ;
59618: GO 59707
// result := false ;
59620: LD_ADDR_VAR 0 2
59624: PUSH
59625: LD_INT 0
59627: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59628: LD_ADDR_VAR 0 5
59632: PUSH
59633: LD_VAR 0 1
59637: PPUSH
59638: LD_INT 21
59640: PUSH
59641: LD_INT 3
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PPUSH
59648: CALL_OW 72
59652: ST_TO_ADDR
// if not tmp then
59653: LD_VAR 0 5
59657: NOT
59658: IFFALSE 59662
// exit ;
59660: GO 59707
// for i in tmp do
59662: LD_ADDR_VAR 0 3
59666: PUSH
59667: LD_VAR 0 5
59671: PUSH
59672: FOR_IN
59673: IFFALSE 59705
// begin result := EnemyInRange ( i , 22 ) ;
59675: LD_ADDR_VAR 0 2
59679: PUSH
59680: LD_VAR 0 3
59684: PPUSH
59685: LD_INT 22
59687: PPUSH
59688: CALL 57294 0 2
59692: ST_TO_ADDR
// if result then
59693: LD_VAR 0 2
59697: IFFALSE 59703
// exit ;
59699: POP
59700: POP
59701: GO 59707
// end ;
59703: GO 59672
59705: POP
59706: POP
// end ;
59707: LD_VAR 0 2
59711: RET
// export function FilterByTag ( units , tag ) ; begin
59712: LD_INT 0
59714: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59715: LD_ADDR_VAR 0 3
59719: PUSH
59720: LD_VAR 0 1
59724: PPUSH
59725: LD_INT 120
59727: PUSH
59728: LD_VAR 0 2
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PPUSH
59737: CALL_OW 72
59741: ST_TO_ADDR
// end ;
59742: LD_VAR 0 3
59746: RET
// export function IsDriver ( un ) ; begin
59747: LD_INT 0
59749: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59750: LD_ADDR_VAR 0 2
59754: PUSH
59755: LD_VAR 0 1
59759: PUSH
59760: LD_INT 55
59762: PUSH
59763: EMPTY
59764: LIST
59765: PPUSH
59766: CALL_OW 69
59770: IN
59771: ST_TO_ADDR
// end ;
59772: LD_VAR 0 2
59776: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59777: LD_INT 0
59779: PPUSH
59780: PPUSH
// list := [ ] ;
59781: LD_ADDR_VAR 0 5
59785: PUSH
59786: EMPTY
59787: ST_TO_ADDR
// case d of 0 :
59788: LD_VAR 0 3
59792: PUSH
59793: LD_INT 0
59795: DOUBLE
59796: EQUAL
59797: IFTRUE 59801
59799: GO 59934
59801: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59802: LD_ADDR_VAR 0 5
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_INT 4
59814: MINUS
59815: PUSH
59816: LD_VAR 0 2
59820: PUSH
59821: LD_INT 4
59823: MINUS
59824: PUSH
59825: LD_INT 2
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: LIST
59832: PUSH
59833: LD_VAR 0 1
59837: PUSH
59838: LD_INT 3
59840: MINUS
59841: PUSH
59842: LD_VAR 0 2
59846: PUSH
59847: LD_INT 1
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: PUSH
59855: LD_VAR 0 1
59859: PUSH
59860: LD_INT 4
59862: PLUS
59863: PUSH
59864: LD_VAR 0 2
59868: PUSH
59869: LD_INT 4
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: LIST
59876: PUSH
59877: LD_VAR 0 1
59881: PUSH
59882: LD_INT 3
59884: PLUS
59885: PUSH
59886: LD_VAR 0 2
59890: PUSH
59891: LD_INT 3
59893: PLUS
59894: PUSH
59895: LD_INT 5
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: PUSH
59903: LD_VAR 0 1
59907: PUSH
59908: LD_VAR 0 2
59912: PUSH
59913: LD_INT 4
59915: PLUS
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: ST_TO_ADDR
// end ; 1 :
59932: GO 60632
59934: LD_INT 1
59936: DOUBLE
59937: EQUAL
59938: IFTRUE 59942
59940: GO 60075
59942: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59943: LD_ADDR_VAR 0 5
59947: PUSH
59948: LD_VAR 0 1
59952: PUSH
59953: LD_VAR 0 2
59957: PUSH
59958: LD_INT 4
59960: MINUS
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: LIST
59969: PUSH
59970: LD_VAR 0 1
59974: PUSH
59975: LD_INT 3
59977: MINUS
59978: PUSH
59979: LD_VAR 0 2
59983: PUSH
59984: LD_INT 3
59986: MINUS
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: LIST
59995: PUSH
59996: LD_VAR 0 1
60000: PUSH
60001: LD_INT 4
60003: MINUS
60004: PUSH
60005: LD_VAR 0 2
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: LIST
60017: PUSH
60018: LD_VAR 0 1
60022: PUSH
60023: LD_VAR 0 2
60027: PUSH
60028: LD_INT 3
60030: PLUS
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: LIST
60039: PUSH
60040: LD_VAR 0 1
60044: PUSH
60045: LD_INT 4
60047: PLUS
60048: PUSH
60049: LD_VAR 0 2
60053: PUSH
60054: LD_INT 4
60056: PLUS
60057: PUSH
60058: LD_INT 5
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// end ; 2 :
60073: GO 60632
60075: LD_INT 2
60077: DOUBLE
60078: EQUAL
60079: IFTRUE 60083
60081: GO 60212
60083: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60084: LD_ADDR_VAR 0 5
60088: PUSH
60089: LD_VAR 0 1
60093: PUSH
60094: LD_VAR 0 2
60098: PUSH
60099: LD_INT 3
60101: MINUS
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: PUSH
60111: LD_VAR 0 1
60115: PUSH
60116: LD_INT 4
60118: PLUS
60119: PUSH
60120: LD_VAR 0 2
60124: PUSH
60125: LD_INT 4
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: LIST
60132: PUSH
60133: LD_VAR 0 1
60137: PUSH
60138: LD_VAR 0 2
60142: PUSH
60143: LD_INT 4
60145: PLUS
60146: PUSH
60147: LD_INT 0
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: LIST
60154: PUSH
60155: LD_VAR 0 1
60159: PUSH
60160: LD_INT 3
60162: MINUS
60163: PUSH
60164: LD_VAR 0 2
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: PUSH
60177: LD_VAR 0 1
60181: PUSH
60182: LD_INT 4
60184: MINUS
60185: PUSH
60186: LD_VAR 0 2
60190: PUSH
60191: LD_INT 4
60193: MINUS
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: LIST
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: ST_TO_ADDR
// end ; 3 :
60210: GO 60632
60212: LD_INT 3
60214: DOUBLE
60215: EQUAL
60216: IFTRUE 60220
60218: GO 60353
60220: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60221: LD_ADDR_VAR 0 5
60225: PUSH
60226: LD_VAR 0 1
60230: PUSH
60231: LD_INT 3
60233: PLUS
60234: PUSH
60235: LD_VAR 0 2
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: LIST
60247: PUSH
60248: LD_VAR 0 1
60252: PUSH
60253: LD_INT 4
60255: PLUS
60256: PUSH
60257: LD_VAR 0 2
60261: PUSH
60262: LD_INT 4
60264: PLUS
60265: PUSH
60266: LD_INT 5
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: LIST
60273: PUSH
60274: LD_VAR 0 1
60278: PUSH
60279: LD_INT 4
60281: MINUS
60282: PUSH
60283: LD_VAR 0 2
60287: PUSH
60288: LD_INT 1
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: LIST
60295: PUSH
60296: LD_VAR 0 1
60300: PUSH
60301: LD_VAR 0 2
60305: PUSH
60306: LD_INT 4
60308: MINUS
60309: PUSH
60310: LD_INT 3
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: PUSH
60318: LD_VAR 0 1
60322: PUSH
60323: LD_INT 3
60325: MINUS
60326: PUSH
60327: LD_VAR 0 2
60331: PUSH
60332: LD_INT 3
60334: MINUS
60335: PUSH
60336: LD_INT 2
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: ST_TO_ADDR
// end ; 4 :
60351: GO 60632
60353: LD_INT 4
60355: DOUBLE
60356: EQUAL
60357: IFTRUE 60361
60359: GO 60494
60361: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60362: LD_ADDR_VAR 0 5
60366: PUSH
60367: LD_VAR 0 1
60371: PUSH
60372: LD_VAR 0 2
60376: PUSH
60377: LD_INT 4
60379: PLUS
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 1
60393: PUSH
60394: LD_INT 3
60396: PLUS
60397: PUSH
60398: LD_VAR 0 2
60402: PUSH
60403: LD_INT 3
60405: PLUS
60406: PUSH
60407: LD_INT 5
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: LIST
60414: PUSH
60415: LD_VAR 0 1
60419: PUSH
60420: LD_INT 4
60422: PLUS
60423: PUSH
60424: LD_VAR 0 2
60428: PUSH
60429: LD_INT 4
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: LIST
60436: PUSH
60437: LD_VAR 0 1
60441: PUSH
60442: LD_VAR 0 2
60446: PUSH
60447: LD_INT 3
60449: MINUS
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PUSH
60459: LD_VAR 0 1
60463: PUSH
60464: LD_INT 4
60466: MINUS
60467: PUSH
60468: LD_VAR 0 2
60472: PUSH
60473: LD_INT 4
60475: MINUS
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: LIST
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: ST_TO_ADDR
// end ; 5 :
60492: GO 60632
60494: LD_INT 5
60496: DOUBLE
60497: EQUAL
60498: IFTRUE 60502
60500: GO 60631
60502: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60503: LD_ADDR_VAR 0 5
60507: PUSH
60508: LD_VAR 0 1
60512: PUSH
60513: LD_INT 4
60515: MINUS
60516: PUSH
60517: LD_VAR 0 2
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: PUSH
60530: LD_VAR 0 1
60534: PUSH
60535: LD_VAR 0 2
60539: PUSH
60540: LD_INT 4
60542: MINUS
60543: PUSH
60544: LD_INT 3
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: LIST
60551: PUSH
60552: LD_VAR 0 1
60556: PUSH
60557: LD_INT 4
60559: PLUS
60560: PUSH
60561: LD_VAR 0 2
60565: PUSH
60566: LD_INT 4
60568: PLUS
60569: PUSH
60570: LD_INT 5
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: PUSH
60578: LD_VAR 0 1
60582: PUSH
60583: LD_INT 3
60585: PLUS
60586: PUSH
60587: LD_VAR 0 2
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: LIST
60599: PUSH
60600: LD_VAR 0 1
60604: PUSH
60605: LD_VAR 0 2
60609: PUSH
60610: LD_INT 3
60612: PLUS
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: LIST
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: ST_TO_ADDR
// end ; end ;
60629: GO 60632
60631: POP
// result := list ;
60632: LD_ADDR_VAR 0 4
60636: PUSH
60637: LD_VAR 0 5
60641: ST_TO_ADDR
// end ;
60642: LD_VAR 0 4
60646: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60647: LD_INT 0
60649: PPUSH
60650: PPUSH
60651: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60652: LD_VAR 0 1
60656: NOT
60657: PUSH
60658: LD_VAR 0 2
60662: PUSH
60663: LD_INT 1
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: LD_INT 3
60671: PUSH
60672: LD_INT 4
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: IN
60681: NOT
60682: OR
60683: IFFALSE 60687
// exit ;
60685: GO 60770
// tmp := [ ] ;
60687: LD_ADDR_VAR 0 5
60691: PUSH
60692: EMPTY
60693: ST_TO_ADDR
// for i in units do
60694: LD_ADDR_VAR 0 4
60698: PUSH
60699: LD_VAR 0 1
60703: PUSH
60704: FOR_IN
60705: IFFALSE 60739
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60707: LD_ADDR_VAR 0 5
60711: PUSH
60712: LD_VAR 0 5
60716: PPUSH
60717: LD_VAR 0 4
60721: PPUSH
60722: LD_VAR 0 2
60726: PPUSH
60727: CALL_OW 259
60731: PPUSH
60732: CALL 62130 0 2
60736: ST_TO_ADDR
60737: GO 60704
60739: POP
60740: POP
// if not tmp then
60741: LD_VAR 0 5
60745: NOT
60746: IFFALSE 60750
// exit ;
60748: GO 60770
// result := SortListByListDesc ( units , tmp ) ;
60750: LD_ADDR_VAR 0 3
60754: PUSH
60755: LD_VAR 0 1
60759: PPUSH
60760: LD_VAR 0 5
60764: PPUSH
60765: CALL_OW 77
60769: ST_TO_ADDR
// end ;
60770: LD_VAR 0 3
60774: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60775: LD_INT 0
60777: PPUSH
60778: PPUSH
60779: PPUSH
// result := false ;
60780: LD_ADDR_VAR 0 3
60784: PUSH
60785: LD_INT 0
60787: ST_TO_ADDR
// if not building then
60788: LD_VAR 0 2
60792: NOT
60793: IFFALSE 60797
// exit ;
60795: GO 60935
// x := GetX ( building ) ;
60797: LD_ADDR_VAR 0 4
60801: PUSH
60802: LD_VAR 0 2
60806: PPUSH
60807: CALL_OW 250
60811: ST_TO_ADDR
// y := GetY ( building ) ;
60812: LD_ADDR_VAR 0 5
60816: PUSH
60817: LD_VAR 0 2
60821: PPUSH
60822: CALL_OW 251
60826: ST_TO_ADDR
// if not x or not y then
60827: LD_VAR 0 4
60831: NOT
60832: PUSH
60833: LD_VAR 0 5
60837: NOT
60838: OR
60839: IFFALSE 60843
// exit ;
60841: GO 60935
// if GetTaskList ( unit ) then
60843: LD_VAR 0 1
60847: PPUSH
60848: CALL_OW 437
60852: IFFALSE 60935
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60854: LD_STRING e
60856: PUSH
60857: LD_VAR 0 1
60861: PPUSH
60862: CALL_OW 437
60866: PUSH
60867: LD_INT 1
60869: ARRAY
60870: PUSH
60871: LD_INT 1
60873: ARRAY
60874: EQUAL
60875: PUSH
60876: LD_VAR 0 4
60880: PUSH
60881: LD_VAR 0 1
60885: PPUSH
60886: CALL_OW 437
60890: PUSH
60891: LD_INT 1
60893: ARRAY
60894: PUSH
60895: LD_INT 2
60897: ARRAY
60898: EQUAL
60899: AND
60900: PUSH
60901: LD_VAR 0 5
60905: PUSH
60906: LD_VAR 0 1
60910: PPUSH
60911: CALL_OW 437
60915: PUSH
60916: LD_INT 1
60918: ARRAY
60919: PUSH
60920: LD_INT 3
60922: ARRAY
60923: EQUAL
60924: AND
60925: IFFALSE 60935
// result := true end ;
60927: LD_ADDR_VAR 0 3
60931: PUSH
60932: LD_INT 1
60934: ST_TO_ADDR
// end ;
60935: LD_VAR 0 3
60939: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60940: LD_INT 0
60942: PPUSH
// result := false ;
60943: LD_ADDR_VAR 0 4
60947: PUSH
60948: LD_INT 0
60950: ST_TO_ADDR
// if GetTaskList ( unit ) then
60951: LD_VAR 0 1
60955: PPUSH
60956: CALL_OW 437
60960: IFFALSE 61043
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60962: LD_STRING M
60964: PUSH
60965: LD_VAR 0 1
60969: PPUSH
60970: CALL_OW 437
60974: PUSH
60975: LD_INT 1
60977: ARRAY
60978: PUSH
60979: LD_INT 1
60981: ARRAY
60982: EQUAL
60983: PUSH
60984: LD_VAR 0 2
60988: PUSH
60989: LD_VAR 0 1
60993: PPUSH
60994: CALL_OW 437
60998: PUSH
60999: LD_INT 1
61001: ARRAY
61002: PUSH
61003: LD_INT 2
61005: ARRAY
61006: EQUAL
61007: AND
61008: PUSH
61009: LD_VAR 0 3
61013: PUSH
61014: LD_VAR 0 1
61018: PPUSH
61019: CALL_OW 437
61023: PUSH
61024: LD_INT 1
61026: ARRAY
61027: PUSH
61028: LD_INT 3
61030: ARRAY
61031: EQUAL
61032: AND
61033: IFFALSE 61043
// result := true ;
61035: LD_ADDR_VAR 0 4
61039: PUSH
61040: LD_INT 1
61042: ST_TO_ADDR
// end ; end ;
61043: LD_VAR 0 4
61047: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61048: LD_INT 0
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
// if not unit or not area then
61054: LD_VAR 0 1
61058: NOT
61059: PUSH
61060: LD_VAR 0 2
61064: NOT
61065: OR
61066: IFFALSE 61070
// exit ;
61068: GO 61233
// tmp := AreaToList ( area , i ) ;
61070: LD_ADDR_VAR 0 6
61074: PUSH
61075: LD_VAR 0 2
61079: PPUSH
61080: LD_VAR 0 5
61084: PPUSH
61085: CALL_OW 517
61089: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61090: LD_ADDR_VAR 0 5
61094: PUSH
61095: DOUBLE
61096: LD_INT 1
61098: DEC
61099: ST_TO_ADDR
61100: LD_VAR 0 6
61104: PUSH
61105: LD_INT 1
61107: ARRAY
61108: PUSH
61109: FOR_TO
61110: IFFALSE 61231
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61112: LD_ADDR_VAR 0 7
61116: PUSH
61117: LD_VAR 0 6
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: PUSH
61126: LD_VAR 0 5
61130: ARRAY
61131: PUSH
61132: LD_VAR 0 6
61136: PUSH
61137: LD_INT 2
61139: ARRAY
61140: PUSH
61141: LD_VAR 0 5
61145: ARRAY
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
61151: LD_INT 92
61153: PUSH
61154: LD_VAR 0 7
61158: PUSH
61159: LD_INT 1
61161: ARRAY
61162: PUSH
61163: LD_VAR 0 7
61167: PUSH
61168: LD_INT 2
61170: ARRAY
61171: PUSH
61172: LD_INT 3
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: PPUSH
61181: CALL_OW 69
61185: PUSH
61186: LD_INT 0
61188: EQUAL
61189: IFFALSE 61229
// begin PlaceUnitArea ( unit , area , mode ) ;
61191: LD_VAR 0 1
61195: PPUSH
61196: LD_VAR 0 2
61200: PPUSH
61201: LD_VAR 0 3
61205: PPUSH
61206: CALL_OW 49
// result := IsPlaced ( unit ) ;
61210: LD_ADDR_VAR 0 4
61214: PUSH
61215: LD_VAR 0 1
61219: PPUSH
61220: CALL_OW 305
61224: ST_TO_ADDR
// exit ;
61225: POP
61226: POP
61227: GO 61233
// end ; end ;
61229: GO 61109
61231: POP
61232: POP
// end ;
61233: LD_VAR 0 4
61237: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61238: LD_INT 0
61240: PPUSH
61241: PPUSH
61242: PPUSH
// if not side or side > 8 then
61243: LD_VAR 0 1
61247: NOT
61248: PUSH
61249: LD_VAR 0 1
61253: PUSH
61254: LD_INT 8
61256: GREATER
61257: OR
61258: IFFALSE 61262
// exit ;
61260: GO 61449
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61262: LD_ADDR_VAR 0 4
61266: PUSH
61267: LD_INT 22
61269: PUSH
61270: LD_VAR 0 1
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 21
61281: PUSH
61282: LD_INT 3
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PPUSH
61293: CALL_OW 69
61297: ST_TO_ADDR
// if not tmp then
61298: LD_VAR 0 4
61302: NOT
61303: IFFALSE 61307
// exit ;
61305: GO 61449
// enable_addtolog := true ;
61307: LD_ADDR_OWVAR 81
61311: PUSH
61312: LD_INT 1
61314: ST_TO_ADDR
// AddToLog ( [ ) ;
61315: LD_STRING [
61317: PPUSH
61318: CALL_OW 561
// for i in tmp do
61322: LD_ADDR_VAR 0 3
61326: PUSH
61327: LD_VAR 0 4
61331: PUSH
61332: FOR_IN
61333: IFFALSE 61440
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61335: LD_STRING [
61337: PUSH
61338: LD_VAR 0 3
61342: PPUSH
61343: CALL_OW 266
61347: STR
61348: PUSH
61349: LD_STRING , 
61351: STR
61352: PUSH
61353: LD_VAR 0 3
61357: PPUSH
61358: CALL_OW 250
61362: STR
61363: PUSH
61364: LD_STRING , 
61366: STR
61367: PUSH
61368: LD_VAR 0 3
61372: PPUSH
61373: CALL_OW 251
61377: STR
61378: PUSH
61379: LD_STRING , 
61381: STR
61382: PUSH
61383: LD_VAR 0 3
61387: PPUSH
61388: CALL_OW 254
61392: STR
61393: PUSH
61394: LD_STRING , 
61396: STR
61397: PUSH
61398: LD_VAR 0 3
61402: PPUSH
61403: LD_INT 1
61405: PPUSH
61406: CALL_OW 268
61410: STR
61411: PUSH
61412: LD_STRING , 
61414: STR
61415: PUSH
61416: LD_VAR 0 3
61420: PPUSH
61421: LD_INT 2
61423: PPUSH
61424: CALL_OW 268
61428: STR
61429: PUSH
61430: LD_STRING ],
61432: STR
61433: PPUSH
61434: CALL_OW 561
// end ;
61438: GO 61332
61440: POP
61441: POP
// AddToLog ( ]; ) ;
61442: LD_STRING ];
61444: PPUSH
61445: CALL_OW 561
// end ;
61449: LD_VAR 0 2
61453: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61454: LD_INT 0
61456: PPUSH
61457: PPUSH
61458: PPUSH
61459: PPUSH
61460: PPUSH
// if not area or not rate or not max then
61461: LD_VAR 0 1
61465: NOT
61466: PUSH
61467: LD_VAR 0 2
61471: NOT
61472: OR
61473: PUSH
61474: LD_VAR 0 4
61478: NOT
61479: OR
61480: IFFALSE 61484
// exit ;
61482: GO 61673
// while 1 do
61484: LD_INT 1
61486: IFFALSE 61673
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61488: LD_ADDR_VAR 0 9
61492: PUSH
61493: LD_VAR 0 1
61497: PPUSH
61498: LD_INT 1
61500: PPUSH
61501: CALL_OW 287
61505: PUSH
61506: LD_INT 10
61508: MUL
61509: ST_TO_ADDR
// r := rate / 10 ;
61510: LD_ADDR_VAR 0 7
61514: PUSH
61515: LD_VAR 0 2
61519: PUSH
61520: LD_INT 10
61522: DIVREAL
61523: ST_TO_ADDR
// time := 1 1$00 ;
61524: LD_ADDR_VAR 0 8
61528: PUSH
61529: LD_INT 2100
61531: ST_TO_ADDR
// if amount < min then
61532: LD_VAR 0 9
61536: PUSH
61537: LD_VAR 0 3
61541: LESS
61542: IFFALSE 61560
// r := r * 2 else
61544: LD_ADDR_VAR 0 7
61548: PUSH
61549: LD_VAR 0 7
61553: PUSH
61554: LD_INT 2
61556: MUL
61557: ST_TO_ADDR
61558: GO 61586
// if amount > max then
61560: LD_VAR 0 9
61564: PUSH
61565: LD_VAR 0 4
61569: GREATER
61570: IFFALSE 61586
// r := r / 2 ;
61572: LD_ADDR_VAR 0 7
61576: PUSH
61577: LD_VAR 0 7
61581: PUSH
61582: LD_INT 2
61584: DIVREAL
61585: ST_TO_ADDR
// time := time / r ;
61586: LD_ADDR_VAR 0 8
61590: PUSH
61591: LD_VAR 0 8
61595: PUSH
61596: LD_VAR 0 7
61600: DIVREAL
61601: ST_TO_ADDR
// if time < 0 then
61602: LD_VAR 0 8
61606: PUSH
61607: LD_INT 0
61609: LESS
61610: IFFALSE 61627
// time := time * - 1 ;
61612: LD_ADDR_VAR 0 8
61616: PUSH
61617: LD_VAR 0 8
61621: PUSH
61622: LD_INT 1
61624: NEG
61625: MUL
61626: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61627: LD_VAR 0 8
61631: PUSH
61632: LD_INT 35
61634: PPUSH
61635: LD_INT 875
61637: PPUSH
61638: CALL_OW 12
61642: PLUS
61643: PPUSH
61644: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61648: LD_INT 1
61650: PPUSH
61651: LD_INT 5
61653: PPUSH
61654: CALL_OW 12
61658: PPUSH
61659: LD_VAR 0 1
61663: PPUSH
61664: LD_INT 1
61666: PPUSH
61667: CALL_OW 55
// end ;
61671: GO 61484
// end ;
61673: LD_VAR 0 5
61677: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61678: LD_INT 0
61680: PPUSH
61681: PPUSH
61682: PPUSH
61683: PPUSH
61684: PPUSH
61685: PPUSH
61686: PPUSH
61687: PPUSH
// if not turrets or not factories then
61688: LD_VAR 0 1
61692: NOT
61693: PUSH
61694: LD_VAR 0 2
61698: NOT
61699: OR
61700: IFFALSE 61704
// exit ;
61702: GO 62011
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61704: LD_ADDR_VAR 0 10
61708: PUSH
61709: LD_INT 5
61711: PUSH
61712: LD_INT 6
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: PUSH
61722: LD_INT 4
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 3
61731: PUSH
61732: LD_INT 5
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 24
61746: PUSH
61747: LD_INT 25
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 23
61756: PUSH
61757: LD_INT 27
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 42
61770: PUSH
61771: LD_INT 43
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 44
61780: PUSH
61781: LD_INT 46
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 45
61790: PUSH
61791: LD_INT 47
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: LIST
61807: ST_TO_ADDR
// result := [ ] ;
61808: LD_ADDR_VAR 0 3
61812: PUSH
61813: EMPTY
61814: ST_TO_ADDR
// for i in turrets do
61815: LD_ADDR_VAR 0 4
61819: PUSH
61820: LD_VAR 0 1
61824: PUSH
61825: FOR_IN
61826: IFFALSE 62009
// begin nat := GetNation ( i ) ;
61828: LD_ADDR_VAR 0 7
61832: PUSH
61833: LD_VAR 0 4
61837: PPUSH
61838: CALL_OW 248
61842: ST_TO_ADDR
// weapon := 0 ;
61843: LD_ADDR_VAR 0 8
61847: PUSH
61848: LD_INT 0
61850: ST_TO_ADDR
// if not nat then
61851: LD_VAR 0 7
61855: NOT
61856: IFFALSE 61860
// continue ;
61858: GO 61825
// for j in list [ nat ] do
61860: LD_ADDR_VAR 0 5
61864: PUSH
61865: LD_VAR 0 10
61869: PUSH
61870: LD_VAR 0 7
61874: ARRAY
61875: PUSH
61876: FOR_IN
61877: IFFALSE 61918
// if GetBWeapon ( i ) = j [ 1 ] then
61879: LD_VAR 0 4
61883: PPUSH
61884: CALL_OW 269
61888: PUSH
61889: LD_VAR 0 5
61893: PUSH
61894: LD_INT 1
61896: ARRAY
61897: EQUAL
61898: IFFALSE 61916
// begin weapon := j [ 2 ] ;
61900: LD_ADDR_VAR 0 8
61904: PUSH
61905: LD_VAR 0 5
61909: PUSH
61910: LD_INT 2
61912: ARRAY
61913: ST_TO_ADDR
// break ;
61914: GO 61918
// end ;
61916: GO 61876
61918: POP
61919: POP
// if not weapon then
61920: LD_VAR 0 8
61924: NOT
61925: IFFALSE 61929
// continue ;
61927: GO 61825
// for k in factories do
61929: LD_ADDR_VAR 0 6
61933: PUSH
61934: LD_VAR 0 2
61938: PUSH
61939: FOR_IN
61940: IFFALSE 62005
// begin weapons := AvailableWeaponList ( k ) ;
61942: LD_ADDR_VAR 0 9
61946: PUSH
61947: LD_VAR 0 6
61951: PPUSH
61952: CALL_OW 478
61956: ST_TO_ADDR
// if not weapons then
61957: LD_VAR 0 9
61961: NOT
61962: IFFALSE 61966
// continue ;
61964: GO 61939
// if weapon in weapons then
61966: LD_VAR 0 8
61970: PUSH
61971: LD_VAR 0 9
61975: IN
61976: IFFALSE 62003
// begin result := [ i , weapon ] ;
61978: LD_ADDR_VAR 0 3
61982: PUSH
61983: LD_VAR 0 4
61987: PUSH
61988: LD_VAR 0 8
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: ST_TO_ADDR
// exit ;
61997: POP
61998: POP
61999: POP
62000: POP
62001: GO 62011
// end ; end ;
62003: GO 61939
62005: POP
62006: POP
// end ;
62007: GO 61825
62009: POP
62010: POP
// end ;
62011: LD_VAR 0 3
62015: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62016: LD_INT 0
62018: PPUSH
// if not side or side > 8 then
62019: LD_VAR 0 3
62023: NOT
62024: PUSH
62025: LD_VAR 0 3
62029: PUSH
62030: LD_INT 8
62032: GREATER
62033: OR
62034: IFFALSE 62038
// exit ;
62036: GO 62097
// if not range then
62038: LD_VAR 0 4
62042: NOT
62043: IFFALSE 62054
// range := - 12 ;
62045: LD_ADDR_VAR 0 4
62049: PUSH
62050: LD_INT 12
62052: NEG
62053: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62054: LD_VAR 0 1
62058: PPUSH
62059: LD_VAR 0 2
62063: PPUSH
62064: LD_VAR 0 3
62068: PPUSH
62069: LD_VAR 0 4
62073: PPUSH
62074: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62078: LD_VAR 0 1
62082: PPUSH
62083: LD_VAR 0 2
62087: PPUSH
62088: LD_VAR 0 3
62092: PPUSH
62093: CALL_OW 331
// end ;
62097: LD_VAR 0 5
62101: RET
// export function Video ( mode ) ; begin
62102: LD_INT 0
62104: PPUSH
// ingame_video = mode ;
62105: LD_ADDR_OWVAR 52
62109: PUSH
62110: LD_VAR 0 1
62114: ST_TO_ADDR
// interface_hidden = mode ;
62115: LD_ADDR_OWVAR 54
62119: PUSH
62120: LD_VAR 0 1
62124: ST_TO_ADDR
// end ;
62125: LD_VAR 0 2
62129: RET
// export function Join ( array , element ) ; begin
62130: LD_INT 0
62132: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62133: LD_ADDR_VAR 0 3
62137: PUSH
62138: LD_VAR 0 1
62142: PPUSH
62143: LD_VAR 0 1
62147: PUSH
62148: LD_INT 1
62150: PLUS
62151: PPUSH
62152: LD_VAR 0 2
62156: PPUSH
62157: CALL_OW 1
62161: ST_TO_ADDR
// end ;
62162: LD_VAR 0 3
62166: RET
// export function JoinUnion ( array , element ) ; begin
62167: LD_INT 0
62169: PPUSH
// result := array union element ;
62170: LD_ADDR_VAR 0 3
62174: PUSH
62175: LD_VAR 0 1
62179: PUSH
62180: LD_VAR 0 2
62184: UNION
62185: ST_TO_ADDR
// end ;
62186: LD_VAR 0 3
62190: RET
// export function GetBehemoths ( side ) ; begin
62191: LD_INT 0
62193: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62194: LD_ADDR_VAR 0 2
62198: PUSH
62199: LD_INT 22
62201: PUSH
62202: LD_VAR 0 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 31
62213: PUSH
62214: LD_INT 25
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PPUSH
62225: CALL_OW 69
62229: ST_TO_ADDR
// end ;
62230: LD_VAR 0 2
62234: RET
// export function Shuffle ( array ) ; var i , index ; begin
62235: LD_INT 0
62237: PPUSH
62238: PPUSH
62239: PPUSH
// result := [ ] ;
62240: LD_ADDR_VAR 0 2
62244: PUSH
62245: EMPTY
62246: ST_TO_ADDR
// if not array then
62247: LD_VAR 0 1
62251: NOT
62252: IFFALSE 62256
// exit ;
62254: GO 62355
// Randomize ;
62256: CALL_OW 10
// for i = array downto 1 do
62260: LD_ADDR_VAR 0 3
62264: PUSH
62265: DOUBLE
62266: LD_VAR 0 1
62270: INC
62271: ST_TO_ADDR
62272: LD_INT 1
62274: PUSH
62275: FOR_DOWNTO
62276: IFFALSE 62353
// begin index := rand ( 1 , array ) ;
62278: LD_ADDR_VAR 0 4
62282: PUSH
62283: LD_INT 1
62285: PPUSH
62286: LD_VAR 0 1
62290: PPUSH
62291: CALL_OW 12
62295: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62296: LD_ADDR_VAR 0 2
62300: PUSH
62301: LD_VAR 0 2
62305: PPUSH
62306: LD_VAR 0 2
62310: PUSH
62311: LD_INT 1
62313: PLUS
62314: PPUSH
62315: LD_VAR 0 1
62319: PUSH
62320: LD_VAR 0 4
62324: ARRAY
62325: PPUSH
62326: CALL_OW 2
62330: ST_TO_ADDR
// array := Delete ( array , index ) ;
62331: LD_ADDR_VAR 0 1
62335: PUSH
62336: LD_VAR 0 1
62340: PPUSH
62341: LD_VAR 0 4
62345: PPUSH
62346: CALL_OW 3
62350: ST_TO_ADDR
// end ;
62351: GO 62275
62353: POP
62354: POP
// end ;
62355: LD_VAR 0 2
62359: RET
// export function GetBaseMaterials ( base ) ; begin
62360: LD_INT 0
62362: PPUSH
// result := [ 0 , 0 , 0 ] ;
62363: LD_ADDR_VAR 0 2
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: LIST
62381: ST_TO_ADDR
// if not base then
62382: LD_VAR 0 1
62386: NOT
62387: IFFALSE 62391
// exit ;
62389: GO 62440
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62391: LD_ADDR_VAR 0 2
62395: PUSH
62396: LD_VAR 0 1
62400: PPUSH
62401: LD_INT 1
62403: PPUSH
62404: CALL_OW 275
62408: PUSH
62409: LD_VAR 0 1
62413: PPUSH
62414: LD_INT 2
62416: PPUSH
62417: CALL_OW 275
62421: PUSH
62422: LD_VAR 0 1
62426: PPUSH
62427: LD_INT 3
62429: PPUSH
62430: CALL_OW 275
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: LIST
62439: ST_TO_ADDR
// end ;
62440: LD_VAR 0 2
62444: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62445: LD_INT 0
62447: PPUSH
62448: PPUSH
// result := array ;
62449: LD_ADDR_VAR 0 3
62453: PUSH
62454: LD_VAR 0 1
62458: ST_TO_ADDR
// if size >= result then
62459: LD_VAR 0 2
62463: PUSH
62464: LD_VAR 0 3
62468: GREATEREQUAL
62469: IFFALSE 62473
// exit ;
62471: GO 62523
// if size then
62473: LD_VAR 0 2
62477: IFFALSE 62523
// for i := array downto size do
62479: LD_ADDR_VAR 0 4
62483: PUSH
62484: DOUBLE
62485: LD_VAR 0 1
62489: INC
62490: ST_TO_ADDR
62491: LD_VAR 0 2
62495: PUSH
62496: FOR_DOWNTO
62497: IFFALSE 62521
// result := Delete ( result , result ) ;
62499: LD_ADDR_VAR 0 3
62503: PUSH
62504: LD_VAR 0 3
62508: PPUSH
62509: LD_VAR 0 3
62513: PPUSH
62514: CALL_OW 3
62518: ST_TO_ADDR
62519: GO 62496
62521: POP
62522: POP
// end ;
62523: LD_VAR 0 3
62527: RET
// export function ComExit ( unit ) ; var tmp ; begin
62528: LD_INT 0
62530: PPUSH
62531: PPUSH
// if not IsInUnit ( unit ) then
62532: LD_VAR 0 1
62536: PPUSH
62537: CALL_OW 310
62541: NOT
62542: IFFALSE 62546
// exit ;
62544: GO 62606
// tmp := IsInUnit ( unit ) ;
62546: LD_ADDR_VAR 0 3
62550: PUSH
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 310
62560: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62561: LD_VAR 0 3
62565: PPUSH
62566: CALL_OW 247
62570: PUSH
62571: LD_INT 2
62573: EQUAL
62574: IFFALSE 62587
// ComExitVehicle ( unit ) else
62576: LD_VAR 0 1
62580: PPUSH
62581: CALL_OW 121
62585: GO 62596
// ComExitBuilding ( unit ) ;
62587: LD_VAR 0 1
62591: PPUSH
62592: CALL_OW 122
// result := tmp ;
62596: LD_ADDR_VAR 0 2
62600: PUSH
62601: LD_VAR 0 3
62605: ST_TO_ADDR
// end ;
62606: LD_VAR 0 2
62610: RET
// export function ComExitAll ( units ) ; var i ; begin
62611: LD_INT 0
62613: PPUSH
62614: PPUSH
// if not units then
62615: LD_VAR 0 1
62619: NOT
62620: IFFALSE 62624
// exit ;
62622: GO 62650
// for i in units do
62624: LD_ADDR_VAR 0 3
62628: PUSH
62629: LD_VAR 0 1
62633: PUSH
62634: FOR_IN
62635: IFFALSE 62648
// ComExit ( i ) ;
62637: LD_VAR 0 3
62641: PPUSH
62642: CALL 62528 0 1
62646: GO 62634
62648: POP
62649: POP
// end ;
62650: LD_VAR 0 2
62654: RET
// export function ResetHc ; begin
62655: LD_INT 0
62657: PPUSH
// InitHc ;
62658: CALL_OW 19
// hc_importance := 0 ;
62662: LD_ADDR_OWVAR 32
62666: PUSH
62667: LD_INT 0
62669: ST_TO_ADDR
// end ;
62670: LD_VAR 0 1
62674: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62675: LD_INT 0
62677: PPUSH
62678: PPUSH
62679: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62680: LD_ADDR_VAR 0 6
62684: PUSH
62685: LD_VAR 0 1
62689: PUSH
62690: LD_VAR 0 3
62694: PLUS
62695: PUSH
62696: LD_INT 2
62698: DIV
62699: ST_TO_ADDR
// if _x < 0 then
62700: LD_VAR 0 6
62704: PUSH
62705: LD_INT 0
62707: LESS
62708: IFFALSE 62725
// _x := _x * - 1 ;
62710: LD_ADDR_VAR 0 6
62714: PUSH
62715: LD_VAR 0 6
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: MUL
62724: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62725: LD_ADDR_VAR 0 7
62729: PUSH
62730: LD_VAR 0 2
62734: PUSH
62735: LD_VAR 0 4
62739: PLUS
62740: PUSH
62741: LD_INT 2
62743: DIV
62744: ST_TO_ADDR
// if _y < 0 then
62745: LD_VAR 0 7
62749: PUSH
62750: LD_INT 0
62752: LESS
62753: IFFALSE 62770
// _y := _y * - 1 ;
62755: LD_ADDR_VAR 0 7
62759: PUSH
62760: LD_VAR 0 7
62764: PUSH
62765: LD_INT 1
62767: NEG
62768: MUL
62769: ST_TO_ADDR
// result := [ _x , _y ] ;
62770: LD_ADDR_VAR 0 5
62774: PUSH
62775: LD_VAR 0 6
62779: PUSH
62780: LD_VAR 0 7
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// end ;
62789: LD_VAR 0 5
62793: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62794: LD_INT 0
62796: PPUSH
62797: PPUSH
62798: PPUSH
62799: PPUSH
// task := GetTaskList ( unit ) ;
62800: LD_ADDR_VAR 0 7
62804: PUSH
62805: LD_VAR 0 1
62809: PPUSH
62810: CALL_OW 437
62814: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62815: LD_VAR 0 7
62819: NOT
62820: PUSH
62821: LD_VAR 0 1
62825: PPUSH
62826: LD_VAR 0 2
62830: PPUSH
62831: CALL_OW 308
62835: NOT
62836: AND
62837: IFFALSE 62841
// exit ;
62839: GO 62959
// if IsInArea ( unit , area ) then
62841: LD_VAR 0 1
62845: PPUSH
62846: LD_VAR 0 2
62850: PPUSH
62851: CALL_OW 308
62855: IFFALSE 62873
// begin ComMoveToArea ( unit , goAway ) ;
62857: LD_VAR 0 1
62861: PPUSH
62862: LD_VAR 0 3
62866: PPUSH
62867: CALL_OW 113
// exit ;
62871: GO 62959
// end ; if task [ 1 ] [ 1 ] <> M then
62873: LD_VAR 0 7
62877: PUSH
62878: LD_INT 1
62880: ARRAY
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PUSH
62886: LD_STRING M
62888: NONEQUAL
62889: IFFALSE 62893
// exit ;
62891: GO 62959
// x := task [ 1 ] [ 2 ] ;
62893: LD_ADDR_VAR 0 5
62897: PUSH
62898: LD_VAR 0 7
62902: PUSH
62903: LD_INT 1
62905: ARRAY
62906: PUSH
62907: LD_INT 2
62909: ARRAY
62910: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62911: LD_ADDR_VAR 0 6
62915: PUSH
62916: LD_VAR 0 7
62920: PUSH
62921: LD_INT 1
62923: ARRAY
62924: PUSH
62925: LD_INT 3
62927: ARRAY
62928: ST_TO_ADDR
// if InArea ( x , y , area ) then
62929: LD_VAR 0 5
62933: PPUSH
62934: LD_VAR 0 6
62938: PPUSH
62939: LD_VAR 0 2
62943: PPUSH
62944: CALL_OW 309
62948: IFFALSE 62959
// ComStop ( unit ) ;
62950: LD_VAR 0 1
62954: PPUSH
62955: CALL_OW 141
// end ;
62959: LD_VAR 0 4
62963: RET
// export function Abs ( value ) ; begin
62964: LD_INT 0
62966: PPUSH
// result := value ;
62967: LD_ADDR_VAR 0 2
62971: PUSH
62972: LD_VAR 0 1
62976: ST_TO_ADDR
// if value < 0 then
62977: LD_VAR 0 1
62981: PUSH
62982: LD_INT 0
62984: LESS
62985: IFFALSE 63002
// result := value * - 1 ;
62987: LD_ADDR_VAR 0 2
62991: PUSH
62992: LD_VAR 0 1
62996: PUSH
62997: LD_INT 1
62999: NEG
63000: MUL
63001: ST_TO_ADDR
// end ;
63002: LD_VAR 0 2
63006: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
63014: PPUSH
63015: PPUSH
63016: PPUSH
// if not unit or not building then
63017: LD_VAR 0 1
63021: NOT
63022: PUSH
63023: LD_VAR 0 2
63027: NOT
63028: OR
63029: IFFALSE 63033
// exit ;
63031: GO 63259
// x := GetX ( building ) ;
63033: LD_ADDR_VAR 0 4
63037: PUSH
63038: LD_VAR 0 2
63042: PPUSH
63043: CALL_OW 250
63047: ST_TO_ADDR
// y := GetY ( building ) ;
63048: LD_ADDR_VAR 0 6
63052: PUSH
63053: LD_VAR 0 2
63057: PPUSH
63058: CALL_OW 251
63062: ST_TO_ADDR
// d := GetDir ( building ) ;
63063: LD_ADDR_VAR 0 8
63067: PUSH
63068: LD_VAR 0 2
63072: PPUSH
63073: CALL_OW 254
63077: ST_TO_ADDR
// r := 4 ;
63078: LD_ADDR_VAR 0 9
63082: PUSH
63083: LD_INT 4
63085: ST_TO_ADDR
// for i := 1 to 5 do
63086: LD_ADDR_VAR 0 10
63090: PUSH
63091: DOUBLE
63092: LD_INT 1
63094: DEC
63095: ST_TO_ADDR
63096: LD_INT 5
63098: PUSH
63099: FOR_TO
63100: IFFALSE 63257
// begin _x := ShiftX ( x , d , r + i ) ;
63102: LD_ADDR_VAR 0 5
63106: PUSH
63107: LD_VAR 0 4
63111: PPUSH
63112: LD_VAR 0 8
63116: PPUSH
63117: LD_VAR 0 9
63121: PUSH
63122: LD_VAR 0 10
63126: PLUS
63127: PPUSH
63128: CALL_OW 272
63132: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63133: LD_ADDR_VAR 0 7
63137: PUSH
63138: LD_VAR 0 6
63142: PPUSH
63143: LD_VAR 0 8
63147: PPUSH
63148: LD_VAR 0 9
63152: PUSH
63153: LD_VAR 0 10
63157: PLUS
63158: PPUSH
63159: CALL_OW 273
63163: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63164: LD_VAR 0 5
63168: PPUSH
63169: LD_VAR 0 7
63173: PPUSH
63174: CALL_OW 488
63178: PUSH
63179: LD_VAR 0 5
63183: PPUSH
63184: LD_VAR 0 7
63188: PPUSH
63189: CALL_OW 428
63193: PPUSH
63194: CALL_OW 247
63198: PUSH
63199: LD_INT 3
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: IN
63209: NOT
63210: AND
63211: IFFALSE 63255
// begin ComMoveXY ( unit , _x , _y ) ;
63213: LD_VAR 0 1
63217: PPUSH
63218: LD_VAR 0 5
63222: PPUSH
63223: LD_VAR 0 7
63227: PPUSH
63228: CALL_OW 111
// result := [ _x , _y ] ;
63232: LD_ADDR_VAR 0 3
63236: PUSH
63237: LD_VAR 0 5
63241: PUSH
63242: LD_VAR 0 7
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: ST_TO_ADDR
// exit ;
63251: POP
63252: POP
63253: GO 63259
// end ; end ;
63255: GO 63099
63257: POP
63258: POP
// end ;
63259: LD_VAR 0 3
63263: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63264: LD_INT 0
63266: PPUSH
63267: PPUSH
63268: PPUSH
// result := 0 ;
63269: LD_ADDR_VAR 0 3
63273: PUSH
63274: LD_INT 0
63276: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63277: LD_VAR 0 1
63281: PUSH
63282: LD_INT 0
63284: LESS
63285: PUSH
63286: LD_VAR 0 1
63290: PUSH
63291: LD_INT 8
63293: GREATER
63294: OR
63295: PUSH
63296: LD_VAR 0 2
63300: PUSH
63301: LD_INT 0
63303: LESS
63304: OR
63305: PUSH
63306: LD_VAR 0 2
63310: PUSH
63311: LD_INT 8
63313: GREATER
63314: OR
63315: IFFALSE 63319
// exit ;
63317: GO 63394
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63319: LD_ADDR_VAR 0 4
63323: PUSH
63324: LD_INT 22
63326: PUSH
63327: LD_VAR 0 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PPUSH
63336: CALL_OW 69
63340: PUSH
63341: FOR_IN
63342: IFFALSE 63392
// begin un := UnitShoot ( i ) ;
63344: LD_ADDR_VAR 0 5
63348: PUSH
63349: LD_VAR 0 4
63353: PPUSH
63354: CALL_OW 504
63358: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63359: LD_VAR 0 5
63363: PPUSH
63364: CALL_OW 255
63368: PUSH
63369: LD_VAR 0 1
63373: EQUAL
63374: IFFALSE 63390
// begin result := un ;
63376: LD_ADDR_VAR 0 3
63380: PUSH
63381: LD_VAR 0 5
63385: ST_TO_ADDR
// exit ;
63386: POP
63387: POP
63388: GO 63394
// end ; end ;
63390: GO 63341
63392: POP
63393: POP
// end ;
63394: LD_VAR 0 3
63398: RET
// export function GetCargoBay ( units ) ; begin
63399: LD_INT 0
63401: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63402: LD_ADDR_VAR 0 2
63406: PUSH
63407: LD_VAR 0 1
63411: PPUSH
63412: LD_INT 2
63414: PUSH
63415: LD_INT 34
63417: PUSH
63418: LD_INT 12
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 34
63427: PUSH
63428: LD_INT 51
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 34
63437: PUSH
63438: LD_INT 32
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 34
63447: PUSH
63448: LD_INT 89
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: PPUSH
63462: CALL_OW 72
63466: ST_TO_ADDR
// end ;
63467: LD_VAR 0 2
63471: RET
// export function Negate ( value ) ; begin
63472: LD_INT 0
63474: PPUSH
// result := not value ;
63475: LD_ADDR_VAR 0 2
63479: PUSH
63480: LD_VAR 0 1
63484: NOT
63485: ST_TO_ADDR
// end ;
63486: LD_VAR 0 2
63490: RET
// export function Inc ( value ) ; begin
63491: LD_INT 0
63493: PPUSH
// result := value + 1 ;
63494: LD_ADDR_VAR 0 2
63498: PUSH
63499: LD_VAR 0 1
63503: PUSH
63504: LD_INT 1
63506: PLUS
63507: ST_TO_ADDR
// end ;
63508: LD_VAR 0 2
63512: RET
// export function Dec ( value ) ; begin
63513: LD_INT 0
63515: PPUSH
// result := value - 1 ;
63516: LD_ADDR_VAR 0 2
63520: PUSH
63521: LD_VAR 0 1
63525: PUSH
63526: LD_INT 1
63528: MINUS
63529: ST_TO_ADDR
// end ;
63530: LD_VAR 0 2
63534: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63535: LD_INT 0
63537: PPUSH
63538: PPUSH
63539: PPUSH
63540: PPUSH
63541: PPUSH
63542: PPUSH
63543: PPUSH
63544: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63545: LD_VAR 0 1
63549: PPUSH
63550: LD_VAR 0 2
63554: PPUSH
63555: CALL_OW 488
63559: NOT
63560: PUSH
63561: LD_VAR 0 3
63565: PPUSH
63566: LD_VAR 0 4
63570: PPUSH
63571: CALL_OW 488
63575: NOT
63576: OR
63577: IFFALSE 63590
// begin result := - 1 ;
63579: LD_ADDR_VAR 0 5
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: ST_TO_ADDR
// exit ;
63588: GO 63825
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63590: LD_ADDR_VAR 0 12
63594: PUSH
63595: LD_VAR 0 1
63599: PPUSH
63600: LD_VAR 0 2
63604: PPUSH
63605: LD_VAR 0 3
63609: PPUSH
63610: LD_VAR 0 4
63614: PPUSH
63615: CALL 62675 0 4
63619: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63620: LD_ADDR_VAR 0 11
63624: PUSH
63625: LD_VAR 0 1
63629: PPUSH
63630: LD_VAR 0 2
63634: PPUSH
63635: LD_VAR 0 12
63639: PUSH
63640: LD_INT 1
63642: ARRAY
63643: PPUSH
63644: LD_VAR 0 12
63648: PUSH
63649: LD_INT 2
63651: ARRAY
63652: PPUSH
63653: CALL_OW 298
63657: ST_TO_ADDR
// distance := 9999 ;
63658: LD_ADDR_VAR 0 10
63662: PUSH
63663: LD_INT 9999
63665: ST_TO_ADDR
// for i := 0 to 5 do
63666: LD_ADDR_VAR 0 6
63670: PUSH
63671: DOUBLE
63672: LD_INT 0
63674: DEC
63675: ST_TO_ADDR
63676: LD_INT 5
63678: PUSH
63679: FOR_TO
63680: IFFALSE 63823
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63682: LD_ADDR_VAR 0 7
63686: PUSH
63687: LD_VAR 0 1
63691: PPUSH
63692: LD_VAR 0 6
63696: PPUSH
63697: LD_VAR 0 11
63701: PPUSH
63702: CALL_OW 272
63706: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63707: LD_ADDR_VAR 0 8
63711: PUSH
63712: LD_VAR 0 2
63716: PPUSH
63717: LD_VAR 0 6
63721: PPUSH
63722: LD_VAR 0 11
63726: PPUSH
63727: CALL_OW 273
63731: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63732: LD_VAR 0 7
63736: PPUSH
63737: LD_VAR 0 8
63741: PPUSH
63742: CALL_OW 488
63746: NOT
63747: IFFALSE 63751
// continue ;
63749: GO 63679
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63751: LD_ADDR_VAR 0 9
63755: PUSH
63756: LD_VAR 0 12
63760: PUSH
63761: LD_INT 1
63763: ARRAY
63764: PPUSH
63765: LD_VAR 0 12
63769: PUSH
63770: LD_INT 2
63772: ARRAY
63773: PPUSH
63774: LD_VAR 0 7
63778: PPUSH
63779: LD_VAR 0 8
63783: PPUSH
63784: CALL_OW 298
63788: ST_TO_ADDR
// if tmp < distance then
63789: LD_VAR 0 9
63793: PUSH
63794: LD_VAR 0 10
63798: LESS
63799: IFFALSE 63821
// begin result := i ;
63801: LD_ADDR_VAR 0 5
63805: PUSH
63806: LD_VAR 0 6
63810: ST_TO_ADDR
// distance := tmp ;
63811: LD_ADDR_VAR 0 10
63815: PUSH
63816: LD_VAR 0 9
63820: ST_TO_ADDR
// end ; end ;
63821: GO 63679
63823: POP
63824: POP
// end ;
63825: LD_VAR 0 5
63829: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63830: LD_INT 0
63832: PPUSH
63833: PPUSH
// if not driver or not IsInUnit ( driver ) then
63834: LD_VAR 0 1
63838: NOT
63839: PUSH
63840: LD_VAR 0 1
63844: PPUSH
63845: CALL_OW 310
63849: NOT
63850: OR
63851: IFFALSE 63855
// exit ;
63853: GO 63945
// vehicle := IsInUnit ( driver ) ;
63855: LD_ADDR_VAR 0 3
63859: PUSH
63860: LD_VAR 0 1
63864: PPUSH
63865: CALL_OW 310
63869: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63870: LD_VAR 0 1
63874: PPUSH
63875: LD_STRING \
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 0
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: PUSH
63905: LD_STRING E
63907: PUSH
63908: LD_INT 0
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_VAR 0 3
63918: PUSH
63919: LD_INT 0
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PPUSH
63941: CALL_OW 446
// end ;
63945: LD_VAR 0 2
63949: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63950: LD_INT 0
63952: PPUSH
63953: PPUSH
// if not driver or not IsInUnit ( driver ) then
63954: LD_VAR 0 1
63958: NOT
63959: PUSH
63960: LD_VAR 0 1
63964: PPUSH
63965: CALL_OW 310
63969: NOT
63970: OR
63971: IFFALSE 63975
// exit ;
63973: GO 64065
// vehicle := IsInUnit ( driver ) ;
63975: LD_ADDR_VAR 0 3
63979: PUSH
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 310
63989: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63990: LD_VAR 0 1
63994: PPUSH
63995: LD_STRING \
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: LD_INT 0
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: PUSH
64025: LD_STRING E
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_VAR 0 3
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: LD_INT 0
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: PPUSH
64061: CALL_OW 447
// end ;
64065: LD_VAR 0 2
64069: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64070: LD_INT 0
64072: PPUSH
64073: PPUSH
64074: PPUSH
// tmp := [ ] ;
64075: LD_ADDR_VAR 0 5
64079: PUSH
64080: EMPTY
64081: ST_TO_ADDR
// for i in units do
64082: LD_ADDR_VAR 0 4
64086: PUSH
64087: LD_VAR 0 1
64091: PUSH
64092: FOR_IN
64093: IFFALSE 64131
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64095: LD_ADDR_VAR 0 5
64099: PUSH
64100: LD_VAR 0 5
64104: PPUSH
64105: LD_VAR 0 5
64109: PUSH
64110: LD_INT 1
64112: PLUS
64113: PPUSH
64114: LD_VAR 0 4
64118: PPUSH
64119: CALL_OW 256
64123: PPUSH
64124: CALL_OW 2
64128: ST_TO_ADDR
64129: GO 64092
64131: POP
64132: POP
// if not tmp then
64133: LD_VAR 0 5
64137: NOT
64138: IFFALSE 64142
// exit ;
64140: GO 64190
// if asc then
64142: LD_VAR 0 2
64146: IFFALSE 64170
// result := SortListByListAsc ( units , tmp ) else
64148: LD_ADDR_VAR 0 3
64152: PUSH
64153: LD_VAR 0 1
64157: PPUSH
64158: LD_VAR 0 5
64162: PPUSH
64163: CALL_OW 76
64167: ST_TO_ADDR
64168: GO 64190
// result := SortListByListDesc ( units , tmp ) ;
64170: LD_ADDR_VAR 0 3
64174: PUSH
64175: LD_VAR 0 1
64179: PPUSH
64180: LD_VAR 0 5
64184: PPUSH
64185: CALL_OW 77
64189: ST_TO_ADDR
// end ;
64190: LD_VAR 0 3
64194: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64195: LD_INT 0
64197: PPUSH
64198: PPUSH
// task := GetTaskList ( mech ) ;
64199: LD_ADDR_VAR 0 4
64203: PUSH
64204: LD_VAR 0 1
64208: PPUSH
64209: CALL_OW 437
64213: ST_TO_ADDR
// if not task then
64214: LD_VAR 0 4
64218: NOT
64219: IFFALSE 64223
// exit ;
64221: GO 64265
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64223: LD_ADDR_VAR 0 3
64227: PUSH
64228: LD_VAR 0 4
64232: PUSH
64233: LD_INT 1
64235: ARRAY
64236: PUSH
64237: LD_INT 1
64239: ARRAY
64240: PUSH
64241: LD_STRING r
64243: EQUAL
64244: PUSH
64245: LD_VAR 0 4
64249: PUSH
64250: LD_INT 1
64252: ARRAY
64253: PUSH
64254: LD_INT 4
64256: ARRAY
64257: PUSH
64258: LD_VAR 0 2
64262: EQUAL
64263: AND
64264: ST_TO_ADDR
// end ;
64265: LD_VAR 0 3
64269: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64270: LD_INT 0
64272: PPUSH
// SetDir ( unit , d ) ;
64273: LD_VAR 0 1
64277: PPUSH
64278: LD_VAR 0 4
64282: PPUSH
64283: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64287: LD_VAR 0 1
64291: PPUSH
64292: LD_VAR 0 2
64296: PPUSH
64297: LD_VAR 0 3
64301: PPUSH
64302: LD_VAR 0 5
64306: PPUSH
64307: CALL_OW 48
// end ;
64311: LD_VAR 0 6
64315: RET
// export function ToNaturalNumber ( number ) ; begin
64316: LD_INT 0
64318: PPUSH
// result := number div 1 ;
64319: LD_ADDR_VAR 0 2
64323: PUSH
64324: LD_VAR 0 1
64328: PUSH
64329: LD_INT 1
64331: DIV
64332: ST_TO_ADDR
// if number < 0 then
64333: LD_VAR 0 1
64337: PUSH
64338: LD_INT 0
64340: LESS
64341: IFFALSE 64351
// result := 0 ;
64343: LD_ADDR_VAR 0 2
64347: PUSH
64348: LD_INT 0
64350: ST_TO_ADDR
// end ;
64351: LD_VAR 0 2
64355: RET
// export function SortByClass ( units , class ) ; var un ; begin
64356: LD_INT 0
64358: PPUSH
64359: PPUSH
// if not units or not class then
64360: LD_VAR 0 1
64364: NOT
64365: PUSH
64366: LD_VAR 0 2
64370: NOT
64371: OR
64372: IFFALSE 64376
// exit ;
64374: GO 64471
// result := [ ] ;
64376: LD_ADDR_VAR 0 3
64380: PUSH
64381: EMPTY
64382: ST_TO_ADDR
// for un in units do
64383: LD_ADDR_VAR 0 4
64387: PUSH
64388: LD_VAR 0 1
64392: PUSH
64393: FOR_IN
64394: IFFALSE 64469
// if GetClass ( un ) = class then
64396: LD_VAR 0 4
64400: PPUSH
64401: CALL_OW 257
64405: PUSH
64406: LD_VAR 0 2
64410: EQUAL
64411: IFFALSE 64438
// result := Insert ( result , 1 , un ) else
64413: LD_ADDR_VAR 0 3
64417: PUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: LD_INT 1
64425: PPUSH
64426: LD_VAR 0 4
64430: PPUSH
64431: CALL_OW 2
64435: ST_TO_ADDR
64436: GO 64467
// result := Replace ( result , result + 1 , un ) ;
64438: LD_ADDR_VAR 0 3
64442: PUSH
64443: LD_VAR 0 3
64447: PPUSH
64448: LD_VAR 0 3
64452: PUSH
64453: LD_INT 1
64455: PLUS
64456: PPUSH
64457: LD_VAR 0 4
64461: PPUSH
64462: CALL_OW 1
64466: ST_TO_ADDR
64467: GO 64393
64469: POP
64470: POP
// end ;
64471: LD_VAR 0 3
64475: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64476: LD_INT 0
64478: PPUSH
64479: PPUSH
64480: PPUSH
64481: PPUSH
64482: PPUSH
64483: PPUSH
64484: PPUSH
// result := [ ] ;
64485: LD_ADDR_VAR 0 4
64489: PUSH
64490: EMPTY
64491: ST_TO_ADDR
// if x - r < 0 then
64492: LD_VAR 0 1
64496: PUSH
64497: LD_VAR 0 3
64501: MINUS
64502: PUSH
64503: LD_INT 0
64505: LESS
64506: IFFALSE 64518
// min_x := 0 else
64508: LD_ADDR_VAR 0 8
64512: PUSH
64513: LD_INT 0
64515: ST_TO_ADDR
64516: GO 64534
// min_x := x - r ;
64518: LD_ADDR_VAR 0 8
64522: PUSH
64523: LD_VAR 0 1
64527: PUSH
64528: LD_VAR 0 3
64532: MINUS
64533: ST_TO_ADDR
// if y - r < 0 then
64534: LD_VAR 0 2
64538: PUSH
64539: LD_VAR 0 3
64543: MINUS
64544: PUSH
64545: LD_INT 0
64547: LESS
64548: IFFALSE 64560
// min_y := 0 else
64550: LD_ADDR_VAR 0 7
64554: PUSH
64555: LD_INT 0
64557: ST_TO_ADDR
64558: GO 64576
// min_y := y - r ;
64560: LD_ADDR_VAR 0 7
64564: PUSH
64565: LD_VAR 0 2
64569: PUSH
64570: LD_VAR 0 3
64574: MINUS
64575: ST_TO_ADDR
// max_x := x + r ;
64576: LD_ADDR_VAR 0 9
64580: PUSH
64581: LD_VAR 0 1
64585: PUSH
64586: LD_VAR 0 3
64590: PLUS
64591: ST_TO_ADDR
// max_y := y + r ;
64592: LD_ADDR_VAR 0 10
64596: PUSH
64597: LD_VAR 0 2
64601: PUSH
64602: LD_VAR 0 3
64606: PLUS
64607: ST_TO_ADDR
// for _x = min_x to max_x do
64608: LD_ADDR_VAR 0 5
64612: PUSH
64613: DOUBLE
64614: LD_VAR 0 8
64618: DEC
64619: ST_TO_ADDR
64620: LD_VAR 0 9
64624: PUSH
64625: FOR_TO
64626: IFFALSE 64727
// for _y = min_y to max_y do
64628: LD_ADDR_VAR 0 6
64632: PUSH
64633: DOUBLE
64634: LD_VAR 0 7
64638: DEC
64639: ST_TO_ADDR
64640: LD_VAR 0 10
64644: PUSH
64645: FOR_TO
64646: IFFALSE 64723
// begin if not ValidHex ( _x , _y ) then
64648: LD_VAR 0 5
64652: PPUSH
64653: LD_VAR 0 6
64657: PPUSH
64658: CALL_OW 488
64662: NOT
64663: IFFALSE 64667
// continue ;
64665: GO 64645
// if GetResourceTypeXY ( _x , _y ) then
64667: LD_VAR 0 5
64671: PPUSH
64672: LD_VAR 0 6
64676: PPUSH
64677: CALL_OW 283
64681: IFFALSE 64721
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64683: LD_ADDR_VAR 0 4
64687: PUSH
64688: LD_VAR 0 4
64692: PPUSH
64693: LD_VAR 0 4
64697: PUSH
64698: LD_INT 1
64700: PLUS
64701: PPUSH
64702: LD_VAR 0 5
64706: PUSH
64707: LD_VAR 0 6
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PPUSH
64716: CALL_OW 1
64720: ST_TO_ADDR
// end ;
64721: GO 64645
64723: POP
64724: POP
64725: GO 64625
64727: POP
64728: POP
// end ;
64729: LD_VAR 0 4
64733: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64734: LD_INT 0
64736: PPUSH
64737: PPUSH
64738: PPUSH
64739: PPUSH
64740: PPUSH
64741: PPUSH
64742: PPUSH
64743: PPUSH
// if not units then
64744: LD_VAR 0 1
64748: NOT
64749: IFFALSE 64753
// exit ;
64751: GO 65277
// result := UnitFilter ( units , [ f_ok ] ) ;
64753: LD_ADDR_VAR 0 3
64757: PUSH
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_INT 50
64765: PUSH
64766: EMPTY
64767: LIST
64768: PPUSH
64769: CALL_OW 72
64773: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64774: LD_ADDR_VAR 0 8
64778: PUSH
64779: LD_VAR 0 1
64783: PUSH
64784: LD_INT 1
64786: ARRAY
64787: PPUSH
64788: CALL_OW 255
64792: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64793: LD_ADDR_VAR 0 10
64797: PUSH
64798: LD_INT 29
64800: PUSH
64801: LD_INT 91
64803: PUSH
64804: LD_INT 49
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: LIST
64811: ST_TO_ADDR
// if not result then
64812: LD_VAR 0 3
64816: NOT
64817: IFFALSE 64821
// exit ;
64819: GO 65277
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64821: LD_ADDR_VAR 0 5
64825: PUSH
64826: LD_INT 81
64828: PUSH
64829: LD_VAR 0 8
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PPUSH
64838: CALL_OW 69
64842: ST_TO_ADDR
// for i in result do
64843: LD_ADDR_VAR 0 4
64847: PUSH
64848: LD_VAR 0 3
64852: PUSH
64853: FOR_IN
64854: IFFALSE 65275
// begin tag := GetTag ( i ) + 1 ;
64856: LD_ADDR_VAR 0 9
64860: PUSH
64861: LD_VAR 0 4
64865: PPUSH
64866: CALL_OW 110
64870: PUSH
64871: LD_INT 1
64873: PLUS
64874: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64875: LD_ADDR_VAR 0 7
64879: PUSH
64880: LD_VAR 0 4
64884: PPUSH
64885: CALL_OW 250
64889: PPUSH
64890: LD_VAR 0 4
64894: PPUSH
64895: CALL_OW 251
64899: PPUSH
64900: LD_INT 6
64902: PPUSH
64903: CALL 64476 0 3
64907: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64908: LD_VAR 0 4
64912: PPUSH
64913: CALL_OW 247
64917: PUSH
64918: LD_INT 2
64920: EQUAL
64921: PUSH
64922: LD_VAR 0 7
64926: AND
64927: PUSH
64928: LD_VAR 0 4
64932: PPUSH
64933: CALL_OW 264
64937: PUSH
64938: LD_VAR 0 10
64942: IN
64943: NOT
64944: AND
64945: IFFALSE 64984
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64947: LD_VAR 0 4
64951: PPUSH
64952: LD_VAR 0 7
64956: PUSH
64957: LD_INT 1
64959: ARRAY
64960: PUSH
64961: LD_INT 1
64963: ARRAY
64964: PPUSH
64965: LD_VAR 0 7
64969: PUSH
64970: LD_INT 1
64972: ARRAY
64973: PUSH
64974: LD_INT 2
64976: ARRAY
64977: PPUSH
64978: CALL_OW 116
64982: GO 65273
// if path > tag then
64984: LD_VAR 0 2
64988: PUSH
64989: LD_VAR 0 9
64993: GREATER
64994: IFFALSE 65202
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64996: LD_ADDR_VAR 0 6
65000: PUSH
65001: LD_VAR 0 5
65005: PPUSH
65006: LD_INT 91
65008: PUSH
65009: LD_VAR 0 4
65013: PUSH
65014: LD_INT 8
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: LIST
65021: PPUSH
65022: CALL_OW 72
65026: ST_TO_ADDR
// if nearEnemy then
65027: LD_VAR 0 6
65031: IFFALSE 65100
// begin if GetWeapon ( i ) = ru_time_lapser then
65033: LD_VAR 0 4
65037: PPUSH
65038: CALL_OW 264
65042: PUSH
65043: LD_INT 49
65045: EQUAL
65046: IFFALSE 65074
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65048: LD_VAR 0 4
65052: PPUSH
65053: LD_VAR 0 6
65057: PPUSH
65058: LD_VAR 0 4
65062: PPUSH
65063: CALL_OW 74
65067: PPUSH
65068: CALL_OW 112
65072: GO 65098
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65074: LD_VAR 0 4
65078: PPUSH
65079: LD_VAR 0 6
65083: PPUSH
65084: LD_VAR 0 4
65088: PPUSH
65089: CALL_OW 74
65093: PPUSH
65094: CALL 66202 0 2
// end else
65098: GO 65200
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65100: LD_VAR 0 4
65104: PPUSH
65105: LD_VAR 0 2
65109: PUSH
65110: LD_VAR 0 9
65114: ARRAY
65115: PUSH
65116: LD_INT 1
65118: ARRAY
65119: PPUSH
65120: LD_VAR 0 2
65124: PUSH
65125: LD_VAR 0 9
65129: ARRAY
65130: PUSH
65131: LD_INT 2
65133: ARRAY
65134: PPUSH
65135: CALL_OW 297
65139: PUSH
65140: LD_INT 6
65142: GREATER
65143: IFFALSE 65186
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65145: LD_VAR 0 4
65149: PPUSH
65150: LD_VAR 0 2
65154: PUSH
65155: LD_VAR 0 9
65159: ARRAY
65160: PUSH
65161: LD_INT 1
65163: ARRAY
65164: PPUSH
65165: LD_VAR 0 2
65169: PUSH
65170: LD_VAR 0 9
65174: ARRAY
65175: PUSH
65176: LD_INT 2
65178: ARRAY
65179: PPUSH
65180: CALL_OW 114
65184: GO 65200
// SetTag ( i , tag ) ;
65186: LD_VAR 0 4
65190: PPUSH
65191: LD_VAR 0 9
65195: PPUSH
65196: CALL_OW 109
// end else
65200: GO 65273
// if enemy then
65202: LD_VAR 0 5
65206: IFFALSE 65273
// begin if GetWeapon ( i ) = ru_time_lapser then
65208: LD_VAR 0 4
65212: PPUSH
65213: CALL_OW 264
65217: PUSH
65218: LD_INT 49
65220: EQUAL
65221: IFFALSE 65249
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65223: LD_VAR 0 4
65227: PPUSH
65228: LD_VAR 0 5
65232: PPUSH
65233: LD_VAR 0 4
65237: PPUSH
65238: CALL_OW 74
65242: PPUSH
65243: CALL_OW 112
65247: GO 65273
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65249: LD_VAR 0 4
65253: PPUSH
65254: LD_VAR 0 5
65258: PPUSH
65259: LD_VAR 0 4
65263: PPUSH
65264: CALL_OW 74
65268: PPUSH
65269: CALL 66202 0 2
// end ; end ;
65273: GO 64853
65275: POP
65276: POP
// end ;
65277: LD_VAR 0 3
65281: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65282: LD_INT 0
65284: PPUSH
65285: PPUSH
65286: PPUSH
// if not unit or IsInUnit ( unit ) then
65287: LD_VAR 0 1
65291: NOT
65292: PUSH
65293: LD_VAR 0 1
65297: PPUSH
65298: CALL_OW 310
65302: OR
65303: IFFALSE 65307
// exit ;
65305: GO 65398
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65307: LD_ADDR_VAR 0 4
65311: PUSH
65312: LD_VAR 0 1
65316: PPUSH
65317: CALL_OW 250
65321: PPUSH
65322: LD_VAR 0 2
65326: PPUSH
65327: LD_INT 1
65329: PPUSH
65330: CALL_OW 272
65334: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65335: LD_ADDR_VAR 0 5
65339: PUSH
65340: LD_VAR 0 1
65344: PPUSH
65345: CALL_OW 251
65349: PPUSH
65350: LD_VAR 0 2
65354: PPUSH
65355: LD_INT 1
65357: PPUSH
65358: CALL_OW 273
65362: ST_TO_ADDR
// if ValidHex ( x , y ) then
65363: LD_VAR 0 4
65367: PPUSH
65368: LD_VAR 0 5
65372: PPUSH
65373: CALL_OW 488
65377: IFFALSE 65398
// ComTurnXY ( unit , x , y ) ;
65379: LD_VAR 0 1
65383: PPUSH
65384: LD_VAR 0 4
65388: PPUSH
65389: LD_VAR 0 5
65393: PPUSH
65394: CALL_OW 118
// end ;
65398: LD_VAR 0 3
65402: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65403: LD_INT 0
65405: PPUSH
65406: PPUSH
// result := false ;
65407: LD_ADDR_VAR 0 3
65411: PUSH
65412: LD_INT 0
65414: ST_TO_ADDR
// if not units then
65415: LD_VAR 0 2
65419: NOT
65420: IFFALSE 65424
// exit ;
65422: GO 65469
// for i in units do
65424: LD_ADDR_VAR 0 4
65428: PUSH
65429: LD_VAR 0 2
65433: PUSH
65434: FOR_IN
65435: IFFALSE 65467
// if See ( side , i ) then
65437: LD_VAR 0 1
65441: PPUSH
65442: LD_VAR 0 4
65446: PPUSH
65447: CALL_OW 292
65451: IFFALSE 65465
// begin result := true ;
65453: LD_ADDR_VAR 0 3
65457: PUSH
65458: LD_INT 1
65460: ST_TO_ADDR
// exit ;
65461: POP
65462: POP
65463: GO 65469
// end ;
65465: GO 65434
65467: POP
65468: POP
// end ;
65469: LD_VAR 0 3
65473: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65474: LD_INT 0
65476: PPUSH
65477: PPUSH
65478: PPUSH
65479: PPUSH
// if not unit or not points then
65480: LD_VAR 0 1
65484: NOT
65485: PUSH
65486: LD_VAR 0 2
65490: NOT
65491: OR
65492: IFFALSE 65496
// exit ;
65494: GO 65586
// dist := 99999 ;
65496: LD_ADDR_VAR 0 5
65500: PUSH
65501: LD_INT 99999
65503: ST_TO_ADDR
// for i in points do
65504: LD_ADDR_VAR 0 4
65508: PUSH
65509: LD_VAR 0 2
65513: PUSH
65514: FOR_IN
65515: IFFALSE 65584
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65517: LD_ADDR_VAR 0 6
65521: PUSH
65522: LD_VAR 0 1
65526: PPUSH
65527: LD_VAR 0 4
65531: PUSH
65532: LD_INT 1
65534: ARRAY
65535: PPUSH
65536: LD_VAR 0 4
65540: PUSH
65541: LD_INT 2
65543: ARRAY
65544: PPUSH
65545: CALL_OW 297
65549: ST_TO_ADDR
// if tmpDist < dist then
65550: LD_VAR 0 6
65554: PUSH
65555: LD_VAR 0 5
65559: LESS
65560: IFFALSE 65582
// begin result := i ;
65562: LD_ADDR_VAR 0 3
65566: PUSH
65567: LD_VAR 0 4
65571: ST_TO_ADDR
// dist := tmpDist ;
65572: LD_ADDR_VAR 0 5
65576: PUSH
65577: LD_VAR 0 6
65581: ST_TO_ADDR
// end ; end ;
65582: GO 65514
65584: POP
65585: POP
// end ;
65586: LD_VAR 0 3
65590: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65591: LD_INT 0
65593: PPUSH
// uc_side := side ;
65594: LD_ADDR_OWVAR 20
65598: PUSH
65599: LD_VAR 0 1
65603: ST_TO_ADDR
// uc_nation := 3 ;
65604: LD_ADDR_OWVAR 21
65608: PUSH
65609: LD_INT 3
65611: ST_TO_ADDR
// vc_chassis := 25 ;
65612: LD_ADDR_OWVAR 37
65616: PUSH
65617: LD_INT 25
65619: ST_TO_ADDR
// vc_engine := engine_siberite ;
65620: LD_ADDR_OWVAR 39
65624: PUSH
65625: LD_INT 3
65627: ST_TO_ADDR
// vc_control := control_computer ;
65628: LD_ADDR_OWVAR 38
65632: PUSH
65633: LD_INT 3
65635: ST_TO_ADDR
// vc_weapon := 59 ;
65636: LD_ADDR_OWVAR 40
65640: PUSH
65641: LD_INT 59
65643: ST_TO_ADDR
// result := CreateVehicle ;
65644: LD_ADDR_VAR 0 5
65648: PUSH
65649: CALL_OW 45
65653: ST_TO_ADDR
// SetDir ( result , d ) ;
65654: LD_VAR 0 5
65658: PPUSH
65659: LD_VAR 0 4
65663: PPUSH
65664: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65668: LD_VAR 0 5
65672: PPUSH
65673: LD_VAR 0 2
65677: PPUSH
65678: LD_VAR 0 3
65682: PPUSH
65683: LD_INT 0
65685: PPUSH
65686: CALL_OW 48
// end ;
65690: LD_VAR 0 5
65694: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65695: LD_INT 0
65697: PPUSH
65698: PPUSH
65699: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65700: LD_ADDR_VAR 0 2
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: LD_INT 0
65710: PUSH
65711: LD_INT 0
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65723: LD_VAR 0 1
65727: NOT
65728: PUSH
65729: LD_VAR 0 1
65733: PPUSH
65734: CALL_OW 264
65738: PUSH
65739: LD_INT 12
65741: PUSH
65742: LD_INT 51
65744: PUSH
65745: LD_INT 32
65747: PUSH
65748: LD_INT 89
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: IN
65757: NOT
65758: OR
65759: IFFALSE 65763
// exit ;
65761: GO 65861
// for i := 1 to 3 do
65763: LD_ADDR_VAR 0 3
65767: PUSH
65768: DOUBLE
65769: LD_INT 1
65771: DEC
65772: ST_TO_ADDR
65773: LD_INT 3
65775: PUSH
65776: FOR_TO
65777: IFFALSE 65859
// begin tmp := GetCargo ( cargo , i ) ;
65779: LD_ADDR_VAR 0 4
65783: PUSH
65784: LD_VAR 0 1
65788: PPUSH
65789: LD_VAR 0 3
65793: PPUSH
65794: CALL_OW 289
65798: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65799: LD_ADDR_VAR 0 2
65803: PUSH
65804: LD_VAR 0 2
65808: PPUSH
65809: LD_VAR 0 3
65813: PPUSH
65814: LD_VAR 0 4
65818: PPUSH
65819: CALL_OW 1
65823: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65824: LD_ADDR_VAR 0 2
65828: PUSH
65829: LD_VAR 0 2
65833: PPUSH
65834: LD_INT 4
65836: PPUSH
65837: LD_VAR 0 2
65841: PUSH
65842: LD_INT 4
65844: ARRAY
65845: PUSH
65846: LD_VAR 0 4
65850: PLUS
65851: PPUSH
65852: CALL_OW 1
65856: ST_TO_ADDR
// end ;
65857: GO 65776
65859: POP
65860: POP
// end ;
65861: LD_VAR 0 2
65865: RET
// export function Length ( array ) ; begin
65866: LD_INT 0
65868: PPUSH
// result := array + 0 ;
65869: LD_ADDR_VAR 0 2
65873: PUSH
65874: LD_VAR 0 1
65878: PUSH
65879: LD_INT 0
65881: PLUS
65882: ST_TO_ADDR
// end ;
65883: LD_VAR 0 2
65887: RET
// export function PrepareArray ( array ) ; begin
65888: LD_INT 0
65890: PPUSH
// result := array diff 0 ;
65891: LD_ADDR_VAR 0 2
65895: PUSH
65896: LD_VAR 0 1
65900: PUSH
65901: LD_INT 0
65903: DIFF
65904: ST_TO_ADDR
// if not result [ 1 ] then
65905: LD_VAR 0 2
65909: PUSH
65910: LD_INT 1
65912: ARRAY
65913: NOT
65914: IFFALSE 65934
// result := Delete ( result , 1 ) ;
65916: LD_ADDR_VAR 0 2
65920: PUSH
65921: LD_VAR 0 2
65925: PPUSH
65926: LD_INT 1
65928: PPUSH
65929: CALL_OW 3
65933: ST_TO_ADDR
// end ;
65934: LD_VAR 0 2
65938: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65939: LD_INT 0
65941: PPUSH
65942: PPUSH
65943: PPUSH
65944: PPUSH
// sibRocketRange := 25 ;
65945: LD_ADDR_VAR 0 6
65949: PUSH
65950: LD_INT 25
65952: ST_TO_ADDR
// result := false ;
65953: LD_ADDR_VAR 0 4
65957: PUSH
65958: LD_INT 0
65960: ST_TO_ADDR
// for i := 0 to 5 do
65961: LD_ADDR_VAR 0 5
65965: PUSH
65966: DOUBLE
65967: LD_INT 0
65969: DEC
65970: ST_TO_ADDR
65971: LD_INT 5
65973: PUSH
65974: FOR_TO
65975: IFFALSE 66042
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65977: LD_VAR 0 1
65981: PPUSH
65982: LD_VAR 0 5
65986: PPUSH
65987: LD_VAR 0 6
65991: PPUSH
65992: CALL_OW 272
65996: PPUSH
65997: LD_VAR 0 2
66001: PPUSH
66002: LD_VAR 0 5
66006: PPUSH
66007: LD_VAR 0 6
66011: PPUSH
66012: CALL_OW 273
66016: PPUSH
66017: LD_VAR 0 3
66021: PPUSH
66022: CALL_OW 309
66026: IFFALSE 66040
// begin result := true ;
66028: LD_ADDR_VAR 0 4
66032: PUSH
66033: LD_INT 1
66035: ST_TO_ADDR
// exit ;
66036: POP
66037: POP
66038: GO 66044
// end ;
66040: GO 65974
66042: POP
66043: POP
// end ;
66044: LD_VAR 0 4
66048: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66049: LD_INT 0
66051: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66052: LD_VAR 0 1
66056: PPUSH
66057: LD_VAR 0 2
66061: PPUSH
66062: LD_INT 0
66064: PPUSH
66065: LD_INT 0
66067: PPUSH
66068: LD_INT 1
66070: PPUSH
66071: LD_INT 0
66073: PPUSH
66074: CALL_OW 587
// end ;
66078: LD_VAR 0 3
66082: RET
// export function CenterOnNow ( unit ) ; begin
66083: LD_INT 0
66085: PPUSH
// result := IsInUnit ( unit ) ;
66086: LD_ADDR_VAR 0 2
66090: PUSH
66091: LD_VAR 0 1
66095: PPUSH
66096: CALL_OW 310
66100: ST_TO_ADDR
// if not result then
66101: LD_VAR 0 2
66105: NOT
66106: IFFALSE 66118
// result := unit ;
66108: LD_ADDR_VAR 0 2
66112: PUSH
66113: LD_VAR 0 1
66117: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
66118: LD_VAR 0 1
66122: PPUSH
66123: CALL_OW 87
// end ;
66127: LD_VAR 0 2
66131: RET
// export function ComMoveHex ( unit , hex ) ; begin
66132: LD_INT 0
66134: PPUSH
// if not hex then
66135: LD_VAR 0 2
66139: NOT
66140: IFFALSE 66144
// exit ;
66142: GO 66197
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
66144: LD_VAR 0 2
66148: PUSH
66149: LD_INT 1
66151: ARRAY
66152: PPUSH
66153: LD_VAR 0 2
66157: PUSH
66158: LD_INT 2
66160: ARRAY
66161: PPUSH
66162: CALL_OW 428
66166: IFFALSE 66170
// exit ;
66168: GO 66197
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
66170: LD_VAR 0 1
66174: PPUSH
66175: LD_VAR 0 2
66179: PUSH
66180: LD_INT 1
66182: ARRAY
66183: PPUSH
66184: LD_VAR 0 2
66188: PUSH
66189: LD_INT 2
66191: ARRAY
66192: PPUSH
66193: CALL_OW 111
// end ;
66197: LD_VAR 0 3
66201: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
66202: LD_INT 0
66204: PPUSH
66205: PPUSH
66206: PPUSH
// if not unit or not enemy then
66207: LD_VAR 0 1
66211: NOT
66212: PUSH
66213: LD_VAR 0 2
66217: NOT
66218: OR
66219: IFFALSE 66223
// exit ;
66221: GO 66347
// x := GetX ( enemy ) ;
66223: LD_ADDR_VAR 0 4
66227: PUSH
66228: LD_VAR 0 2
66232: PPUSH
66233: CALL_OW 250
66237: ST_TO_ADDR
// y := GetY ( enemy ) ;
66238: LD_ADDR_VAR 0 5
66242: PUSH
66243: LD_VAR 0 2
66247: PPUSH
66248: CALL_OW 251
66252: ST_TO_ADDR
// if ValidHex ( x , y ) then
66253: LD_VAR 0 4
66257: PPUSH
66258: LD_VAR 0 5
66262: PPUSH
66263: CALL_OW 488
66267: IFFALSE 66347
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
66269: LD_VAR 0 2
66273: PPUSH
66274: CALL_OW 247
66278: PUSH
66279: LD_INT 3
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: IN
66289: PUSH
66290: LD_VAR 0 1
66294: PPUSH
66295: CALL_OW 255
66299: PPUSH
66300: LD_VAR 0 2
66304: PPUSH
66305: CALL_OW 292
66309: AND
66310: IFFALSE 66328
// ComAttackUnit ( unit , enemy ) else
66312: LD_VAR 0 1
66316: PPUSH
66317: LD_VAR 0 2
66321: PPUSH
66322: CALL_OW 115
66326: GO 66347
// ComAgressiveMove ( unit , x , y ) ;
66328: LD_VAR 0 1
66332: PPUSH
66333: LD_VAR 0 4
66337: PPUSH
66338: LD_VAR 0 5
66342: PPUSH
66343: CALL_OW 114
// end ; end_of_file
66347: LD_VAR 0 3
66351: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66352: LD_VAR 0 1
66356: PPUSH
66357: LD_VAR 0 2
66361: PPUSH
66362: LD_VAR 0 3
66366: PPUSH
66367: LD_VAR 0 4
66371: PPUSH
66372: LD_VAR 0 5
66376: PPUSH
66377: LD_VAR 0 6
66381: PPUSH
66382: CALL 4710 0 6
// end ;
66386: PPOPN 6
66388: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66389: LD_INT 0
66391: PPUSH
// begin if not units then
66392: LD_VAR 0 1
66396: NOT
66397: IFFALSE 66401
// exit ;
66399: GO 66401
// end ;
66401: PPOPN 7
66403: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66404: CALL 4614 0 0
// end ;
66408: PPOPN 1
66410: END
