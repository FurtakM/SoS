// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3347 0 0
// Action ;
  28: CALL 102 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// end ; end_of_file
  97: LD_VAR 0 1
 101: RET
// export function Action ; var i , un ; begin
 102: LD_INT 0
 104: PPUSH
 105: PPUSH
 106: PPUSH
// InGameOn ;
 107: CALL_OW 8
// PrepareKurtGroup ;
 111: CALL 3194 0 0
// PrepareSheikGroup ;
 115: CALL 2832 0 0
// specGroup := [ ] ;
 119: LD_ADDR_EXP 16
 123: PUSH
 124: EMPTY
 125: ST_TO_ADDR
// for i := 1 to 3 do
 126: LD_ADDR_VAR 0 2
 130: PUSH
 131: DOUBLE
 132: LD_INT 1
 134: DEC
 135: ST_TO_ADDR
 136: LD_INT 3
 138: PUSH
 139: FOR_TO
 140: IFFALSE 258
// begin uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := 2 ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 158: LD_INT 0
 160: PPUSH
 161: LD_INT 1
 163: PPUSH
 164: LD_INT 3
 166: PPUSH
 167: CALL_OW 380
// un := CreateHuman ;
 171: LD_ADDR_VAR 0 3
 175: PUSH
 176: CALL_OW 44
 180: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 181: LD_VAR 0 3
 185: PPUSH
 186: LD_INT 3
 188: PPUSH
 189: LD_INT 0
 191: PPUSH
 192: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 196: LD_ADDR_EXP 16
 200: PUSH
 201: LD_EXP 16
 205: PPUSH
 206: LD_EXP 16
 210: PUSH
 211: LD_INT 1
 213: PLUS
 214: PPUSH
 215: LD_VAR 0 3
 219: PPUSH
 220: CALL_OW 1
 224: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 225: LD_VAR 0 3
 229: PPUSH
 230: LD_INT 92
 232: PPUSH
 233: LD_INT 66
 235: PPUSH
 236: CALL_OW 111
// AddComHold ( un ) ;
 240: LD_VAR 0 3
 244: PPUSH
 245: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 249: LD_INT 18
 251: PPUSH
 252: CALL_OW 67
// end ;
 256: GO 139
 258: POP
 259: POP
// PrepareHeikeGroup ;
 260: CALL 2744 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 264: LD_INT 51
 266: PPUSH
 267: LD_INT 85
 269: PPUSH
 270: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 274: LD_INT 1
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 5
 282: PPUSH
 283: LD_INT 32763
 285: NEG
 286: PPUSH
 287: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 1
 296: PPUSH
 297: LD_INT 5
 299: PPUSH
 300: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 304: LD_EXP 1
 308: PPUSH
 309: LD_INT 50
 311: PPUSH
 312: LD_INT 86
 314: PPUSH
 315: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 319: LD_EXP 5
 323: PPUSH
 324: LD_INT 51
 326: PPUSH
 327: LD_INT 90
 329: PPUSH
 330: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 334: LD_EXP 1
 338: PPUSH
 339: LD_EXP 5
 343: PPUSH
 344: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 348: LD_EXP 5
 352: PPUSH
 353: LD_EXP 1
 357: PPUSH
 358: CALL_OW 179
// wait ( 0 0$3 ) ;
 362: LD_INT 105
 364: PPUSH
 365: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 369: LD_EXP 5
 373: PPUSH
 374: LD_STRING DK-1
 376: PPUSH
 377: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 381: LD_EXP 1
 385: PPUSH
 386: LD_STRING DH-1
 388: PPUSH
 389: CALL_OW 88
// wait ( 0 0$2 ) ;
 393: LD_INT 70
 395: PPUSH
 396: CALL_OW 67
// PrepareArabian ;
 400: CALL 3595 0 0
// InGameOff ;
 404: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 408: LD_STRING O1
 410: PPUSH
 411: CALL_OW 337
// goWithHeike := true ;
 415: LD_ADDR_EXP 18
 419: PUSH
 420: LD_INT 1
 422: ST_TO_ADDR
// SaveForQuickRestart ;
 423: CALL_OW 22
// end ;
 427: LD_VAR 0 1
 431: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 432: LD_INT 2
 434: PPUSH
 435: LD_INT 5
 437: PPUSH
 438: CALL_OW 81
 442: PUSH
 443: LD_INT 2
 445: EQUAL
 446: IFFALSE 592
 448: GO 450
 450: DISABLE
 451: LD_INT 0
 453: PPUSH
// begin goWithHeike := false ;
 454: LD_ADDR_EXP 18
 458: PUSH
 459: LD_INT 0
 461: ST_TO_ADDR
// DialogueOn ;
 462: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 466: LD_EXP 1
 470: PPUSH
 471: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 475: LD_EXP 5
 479: PPUSH
 480: LD_STRING DK-betray-1
 482: PPUSH
 483: CALL_OW 88
// DialogueOff ;
 487: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 491: LD_EXP 5
 495: PPUSH
 496: LD_INT 90
 498: PPUSH
 499: LD_INT 46
 501: PPUSH
 502: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 506: LD_INT 35
 508: PPUSH
 509: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 513: LD_ADDR_VAR 0 1
 517: PUSH
 518: LD_INT 22
 520: PUSH
 521: LD_INT 5
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: PUSH
 528: LD_INT 25
 530: PUSH
 531: LD_INT 1
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PPUSH
 542: CALL_OW 69
 546: PUSH
 547: LD_EXP 5
 551: DIFF
 552: PUSH
 553: FOR_IN
 554: IFFALSE 572
// ComAttackUnit ( i , Heike ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: LD_EXP 1
 565: PPUSH
 566: CALL_OW 115
 570: GO 553
 572: POP
 573: POP
// until IsDead ( Heike ) ;
 574: LD_EXP 1
 578: PPUSH
 579: CALL_OW 301
 583: IFFALSE 506
// YouLost ( Betray ) ;
 585: LD_STRING Betray
 587: PPUSH
 588: CALL_OW 104
// end ;
 592: PPOPN 1
 594: END
// every 0 0$1 trigger goWithHeike do
 595: LD_EXP 18
 599: IFFALSE 654
 601: GO 603
 603: DISABLE
// begin enable ;
 604: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 605: LD_EXP 1
 609: PPUSH
 610: LD_EXP 5
 614: PPUSH
 615: CALL_OW 296
 619: PUSH
 620: LD_INT 3
 622: GREATER
 623: IFFALSE 654
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 625: LD_EXP 5
 629: PPUSH
 630: LD_EXP 1
 634: PPUSH
 635: CALL_OW 250
 639: PPUSH
 640: LD_EXP 1
 644: PPUSH
 645: CALL_OW 251
 649: PPUSH
 650: CALL_OW 111
// end ;
 654: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 655: LD_INT 2
 657: PPUSH
 658: LD_INT 47
 660: PPUSH
 661: LD_INT 68
 663: PPUSH
 664: CALL_OW 293
 668: PUSH
 669: LD_EXP 19
 673: NOT
 674: AND
 675: IFFALSE 736
 677: GO 679
 679: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 680: LD_EXP 1
 684: PPUSH
 685: LD_STRING DH-spot-1
 687: PPUSH
 688: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 692: LD_INT 47
 694: PPUSH
 695: LD_INT 68
 697: PPUSH
 698: CALL_OW 428
 702: PPUSH
 703: CALL_OW 313
 707: PUSH
 708: LD_INT 1
 710: ARRAY
 711: PPUSH
 712: LD_STRING DRa-spot-1
 714: PPUSH
 715: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 719: LD_INT 90
 721: PPUSH
 722: LD_INT 41
 724: PPUSH
 725: LD_INT 2
 727: PPUSH
 728: LD_INT 6
 730: NEG
 731: PPUSH
 732: CALL_OW 330
// end ;
 736: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 93
 742: PPUSH
 743: LD_INT 89
 745: PPUSH
 746: CALL_OW 293
 750: PUSH
 751: LD_EXP 19
 755: NOT
 756: AND
 757: IFFALSE 818
 759: GO 761
 761: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 762: LD_EXP 1
 766: PPUSH
 767: LD_STRING DH-spot-1
 769: PPUSH
 770: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 774: LD_INT 93
 776: PPUSH
 777: LD_INT 89
 779: PPUSH
 780: CALL_OW 428
 784: PPUSH
 785: CALL_OW 313
 789: PUSH
 790: LD_INT 1
 792: ARRAY
 793: PPUSH
 794: LD_STRING DRa-spot-2
 796: PPUSH
 797: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 801: LD_INT 90
 803: PPUSH
 804: LD_INT 41
 806: PPUSH
 807: LD_INT 2
 809: PPUSH
 810: LD_INT 6
 812: NEG
 813: PPUSH
 814: CALL_OW 330
// end ;
 818: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 819: LD_EXP 21
 823: PUSH
 824: LD_EXP 14
 828: PPUSH
 829: LD_INT 101
 831: PUSH
 832: LD_INT 2
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PPUSH
 839: CALL_OW 72
 843: AND
 844: IFFALSE 1168
 846: GO 848
 848: DISABLE
 849: LD_INT 0
 851: PPUSH
 852: PPUSH
 853: PPUSH
 854: PPUSH
 855: PPUSH
// begin enable ;
 856: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 857: LD_ADDR_VAR 0 1
 861: PUSH
 862: LD_EXP 14
 866: PPUSH
 867: LD_INT 101
 869: PUSH
 870: LD_INT 2
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PPUSH
 877: CALL_OW 72
 881: ST_TO_ADDR
// if not tmp then
 882: LD_VAR 0 1
 886: NOT
 887: IFFALSE 891
// exit ;
 889: GO 1168
// InGameOn ;
 891: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 895: LD_EXP 1
 899: PUSH
 900: LD_EXP 5
 904: PUSH
 905: EMPTY
 906: LIST
 907: LIST
 908: PPUSH
 909: LD_VAR 0 1
 913: PUSH
 914: LD_INT 1
 916: ARRAY
 917: PPUSH
 918: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 922: LD_VAR 0 1
 926: PUSH
 927: LD_INT 1
 929: ARRAY
 930: PPUSH
 931: LD_EXP 1
 935: PPUSH
 936: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 940: LD_VAR 0 1
 944: PUSH
 945: LD_INT 1
 947: ARRAY
 948: PPUSH
 949: LD_STRING DG-meeting-1
 951: PPUSH
 952: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 956: LD_ADDR_VAR 0 3
 960: PUSH
 961: LD_INT 81
 963: PUSH
 964: LD_INT 10
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 63
 973: PUSH
 974: LD_INT 25
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 108
 983: PUSH
 984: LD_INT 73
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 996: LD_ADDR_VAR 0 4
1000: PUSH
1001: LD_INT 9999
1003: PUSH
1004: EMPTY
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: ST_TO_ADDR
// for i := 1 to 3 do
1010: LD_ADDR_VAR 0 2
1014: PUSH
1015: DOUBLE
1016: LD_INT 1
1018: DEC
1019: ST_TO_ADDR
1020: LD_INT 3
1022: PUSH
1023: FOR_TO
1024: IFFALSE 1108
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1026: LD_ADDR_VAR 0 5
1030: PUSH
1031: LD_EXP 1
1035: PPUSH
1036: LD_VAR 0 3
1040: PUSH
1041: LD_VAR 0 2
1045: ARRAY
1046: PUSH
1047: LD_INT 1
1049: ARRAY
1050: PPUSH
1051: LD_VAR 0 3
1055: PUSH
1056: LD_VAR 0 2
1060: ARRAY
1061: PUSH
1062: LD_INT 2
1064: ARRAY
1065: PPUSH
1066: CALL_OW 297
1070: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1071: LD_VAR 0 4
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PUSH
1080: LD_VAR 0 5
1084: GREATER
1085: IFFALSE 1106
// dist := [ tdist , i ] ;
1087: LD_ADDR_VAR 0 4
1091: PUSH
1092: LD_VAR 0 5
1096: PUSH
1097: LD_VAR 0 2
1101: PUSH
1102: EMPTY
1103: LIST
1104: LIST
1105: ST_TO_ADDR
// end ;
1106: GO 1023
1108: POP
1109: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1110: LD_EXP 1
1114: PPUSH
1115: LD_VAR 0 3
1119: PUSH
1120: LD_VAR 0 4
1124: PUSH
1125: LD_INT 2
1127: ARRAY
1128: ARRAY
1129: PUSH
1130: LD_INT 1
1132: ARRAY
1133: PPUSH
1134: LD_VAR 0 3
1138: PUSH
1139: LD_VAR 0 4
1143: PUSH
1144: LD_INT 2
1146: ARRAY
1147: ARRAY
1148: PUSH
1149: LD_INT 2
1151: ARRAY
1152: PPUSH
1153: CALL_OW 111
// wait ( 0 0$3 ) ;
1157: LD_INT 105
1159: PPUSH
1160: CALL_OW 67
// InGameOff ;
1164: CALL_OW 9
// end ;
1168: PPOPN 5
1170: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
1171: LD_EXP 1
1175: PPUSH
1176: LD_INT 14
1178: PPUSH
1179: CALL_OW 296
1183: PUSH
1184: LD_INT 40
1186: GREATER
1187: PUSH
1188: LD_EXP 1
1192: PPUSH
1193: CALL_OW 316
1197: AND
1198: IFFALSE 1215
1200: GO 1202
1202: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1203: LD_EXP 5
1207: PPUSH
1208: LD_STRING DK-idle-1
1210: PPUSH
1211: CALL_OW 88
// end ;
1215: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1216: LD_INT 2
1218: PPUSH
1219: LD_INT 59
1221: PPUSH
1222: LD_INT 47
1224: PPUSH
1225: CALL_OW 293
1229: IFFALSE 1386
1231: GO 1233
1233: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1234: LD_INT 59
1236: PPUSH
1237: LD_INT 47
1239: PPUSH
1240: LD_INT 2
1242: PPUSH
1243: LD_INT 10
1245: NEG
1246: PPUSH
1247: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1251: LD_INT 59
1253: PPUSH
1254: LD_INT 47
1256: PPUSH
1257: CALL_OW 86
// goWithHeike := false ;
1261: LD_ADDR_EXP 18
1265: PUSH
1266: LD_INT 0
1268: ST_TO_ADDR
// baseSpotted := true ;
1269: LD_ADDR_EXP 19
1273: PUSH
1274: LD_INT 1
1276: ST_TO_ADDR
// InGameOn ;
1277: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1281: LD_EXP 1
1285: PUSH
1286: LD_EXP 5
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PPUSH
1295: LD_INT 54
1297: PPUSH
1298: LD_INT 45
1300: PPUSH
1301: CALL_OW 111
// wait ( 0 0$1 ) ;
1305: LD_INT 35
1307: PPUSH
1308: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1312: LD_EXP 1
1316: PUSH
1317: LD_EXP 5
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PPUSH
1326: LD_INT 59
1328: PPUSH
1329: LD_INT 47
1331: PPUSH
1332: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1336: LD_EXP 1
1340: PPUSH
1341: LD_STRING DH-base-1
1343: PPUSH
1344: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1348: LD_EXP 5
1352: PPUSH
1353: LD_STRING DK-base-1
1355: PPUSH
1356: CALL_OW 88
// InGameOff ;
1360: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1364: LD_ADDR_EXP 17
1368: PUSH
1369: LD_EXP 17
1373: PUSH
1374: LD_INT 1
1376: PLUS
1377: ST_TO_ADDR
// goWithHeike := true ;
1378: LD_ADDR_EXP 18
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// end ;
1386: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 , p ;
1387: LD_INT 2
1389: PPUSH
1390: LD_EXP 8
1394: PPUSH
1395: CALL_OW 292
1399: IFFALSE 2741
1401: GO 1403
1403: DISABLE
1404: LD_INT 0
1406: PPUSH
1407: PPUSH
1408: PPUSH
1409: PPUSH
// begin meetingActive := false ;
1410: LD_ADDR_EXP 21
1414: PUSH
1415: LD_INT 0
1417: ST_TO_ADDR
// goWithHeike := false ;
1418: LD_ADDR_EXP 18
1422: PUSH
1423: LD_INT 0
1425: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1426: LD_ADDR_VAR 0 2
1430: PUSH
1431: LD_INT 6
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 517
1441: ST_TO_ADDR
// for i := 1 to 4 do
1442: LD_ADDR_VAR 0 1
1446: PUSH
1447: DOUBLE
1448: LD_INT 1
1450: DEC
1451: ST_TO_ADDR
1452: LD_INT 4
1454: PUSH
1455: FOR_TO
1456: IFFALSE 1523
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1458: LD_EXP 15
1462: PUSH
1463: LD_VAR 0 1
1467: ARRAY
1468: PPUSH
1469: LD_VAR 0 2
1473: PUSH
1474: LD_INT 1
1476: ARRAY
1477: PUSH
1478: LD_VAR 0 1
1482: ARRAY
1483: PPUSH
1484: LD_VAR 0 2
1488: PUSH
1489: LD_INT 2
1491: ARRAY
1492: PUSH
1493: LD_VAR 0 1
1497: ARRAY
1498: PPUSH
1499: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1503: LD_EXP 15
1507: PUSH
1508: LD_VAR 0 1
1512: ARRAY
1513: PPUSH
1514: LD_INT 14
1516: PPUSH
1517: CALL_OW 179
// end ;
1521: GO 1455
1523: POP
1524: POP
// InGameOn ;
1525: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1529: LD_EXP 8
1533: PPUSH
1534: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1538: LD_EXP 1
1542: PPUSH
1543: LD_EXP 8
1547: PPUSH
1548: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1552: LD_EXP 5
1556: PPUSH
1557: LD_EXP 1
1561: PPUSH
1562: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1566: LD_INT 10
1568: PPUSH
1569: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1573: LD_EXP 1
1577: PPUSH
1578: LD_EXP 8
1582: PPUSH
1583: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1587: LD_EXP 5
1591: PPUSH
1592: LD_EXP 1
1596: PPUSH
1597: CALL_OW 250
1601: PPUSH
1602: LD_INT 5
1604: PPUSH
1605: LD_INT 1
1607: PPUSH
1608: CALL_OW 272
1612: PPUSH
1613: LD_EXP 1
1617: PPUSH
1618: CALL_OW 251
1622: PPUSH
1623: LD_INT 5
1625: PPUSH
1626: LD_INT 1
1628: PPUSH
1629: CALL_OW 273
1633: PPUSH
1634: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1638: LD_EXP 1
1642: PPUSH
1643: LD_EXP 8
1647: PPUSH
1648: CALL_OW 296
1652: PUSH
1653: LD_INT 5
1655: LESS
1656: PUSH
1657: LD_EXP 5
1661: PPUSH
1662: LD_EXP 8
1666: PPUSH
1667: CALL_OW 296
1671: PUSH
1672: LD_INT 6
1674: LESS
1675: AND
1676: IFFALSE 1566
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1678: LD_EXP 1
1682: PUSH
1683: LD_EXP 5
1687: PUSH
1688: EMPTY
1689: LIST
1690: LIST
1691: PPUSH
1692: LD_EXP 8
1696: PPUSH
1697: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1701: LD_EXP 8
1705: PUSH
1706: LD_EXP 4
1710: PUSH
1711: LD_EXP 9
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: LIST
1720: PPUSH
1721: LD_EXP 1
1725: PPUSH
1726: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1730: LD_INT 7
1732: PPUSH
1733: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1737: LD_EXP 8
1741: PPUSH
1742: LD_STRING DKu-Kurt-1
1744: PPUSH
1745: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1749: LD_EXP 5
1753: PPUSH
1754: LD_STRING DK-Kurt-1
1756: PPUSH
1757: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1761: LD_EXP 8
1765: PPUSH
1766: LD_STRING DKu-Kurt-2
1768: PPUSH
1769: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1773: LD_INT 7
1775: PPUSH
1776: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1780: LD_EXP 1
1784: PPUSH
1785: LD_STRING DH-Kurt-1
1787: PPUSH
1788: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1792: LD_EXP 8
1796: PPUSH
1797: LD_STRING DKu-Kurt-3
1799: PPUSH
1800: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1804: LD_EXP 5
1808: PPUSH
1809: LD_STRING DK-Kurt-3
1811: PPUSH
1812: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1816: LD_EXP 9
1820: PPUSH
1821: LD_STRING DHa-Kurt-3
1823: PPUSH
1824: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1828: LD_EXP 4
1832: PPUSH
1833: LD_STRING DO-Kurt-3
1835: PPUSH
1836: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1840: LD_ADDR_VAR 0 3
1844: PUSH
1845: LD_EXP 8
1849: PUSH
1850: LD_EXP 4
1854: PUSH
1855: LD_EXP 9
1859: PUSH
1860: LD_EXP 5
1864: PUSH
1865: LD_EXP 1
1869: PUSH
1870: EMPTY
1871: LIST
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: PUSH
1877: LD_EXP 16
1881: UNION
1882: ST_TO_ADDR
// for i = 1 to tmp2 do
1883: LD_ADDR_VAR 0 1
1887: PUSH
1888: DOUBLE
1889: LD_INT 1
1891: DEC
1892: ST_TO_ADDR
1893: LD_VAR 0 3
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1974
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1901: LD_VAR 0 3
1905: PUSH
1906: LD_VAR 0 1
1910: ARRAY
1911: PPUSH
1912: LD_VAR 0 2
1916: PUSH
1917: LD_INT 1
1919: ARRAY
1920: PUSH
1921: LD_VAR 0 1
1925: PUSH
1926: LD_INT 4
1928: PLUS
1929: ARRAY
1930: PPUSH
1931: LD_VAR 0 2
1935: PUSH
1936: LD_INT 2
1938: ARRAY
1939: PUSH
1940: LD_VAR 0 1
1944: PUSH
1945: LD_INT 4
1947: PLUS
1948: ARRAY
1949: PPUSH
1950: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1954: LD_VAR 0 3
1958: PUSH
1959: LD_VAR 0 1
1963: ARRAY
1964: PPUSH
1965: LD_INT 14
1967: PPUSH
1968: CALL_OW 179
// end ;
1972: GO 1898
1974: POP
1975: POP
// wait ( 0 0$2 ) ;
1976: LD_INT 70
1978: PPUSH
1979: CALL_OW 67
// CenterOnUnits ( eon ) ;
1983: LD_INT 14
1985: PPUSH
1986: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1990: LD_INT 90
1992: PPUSH
1993: LD_INT 43
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: LD_INT 21
2001: NEG
2002: PPUSH
2003: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2007: LD_EXP 2
2011: PPUSH
2012: LD_INT 84
2014: PPUSH
2015: LD_INT 36
2017: PPUSH
2018: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2022: LD_EXP 2
2026: PPUSH
2027: LD_INT 14
2029: PPUSH
2030: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2034: LD_EXP 11
2038: PPUSH
2039: LD_INT 85
2041: PPUSH
2042: LD_INT 36
2044: PPUSH
2045: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2049: LD_EXP 11
2053: PPUSH
2054: LD_INT 14
2056: PPUSH
2057: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2061: LD_EXP 10
2065: PPUSH
2066: LD_INT 86
2068: PPUSH
2069: LD_INT 36
2071: PPUSH
2072: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2076: LD_EXP 10
2080: PPUSH
2081: LD_INT 14
2083: PPUSH
2084: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2088: LD_EXP 7
2092: PPUSH
2093: LD_INT 87
2095: PPUSH
2096: LD_INT 36
2098: PPUSH
2099: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2103: LD_EXP 7
2107: PPUSH
2108: LD_INT 14
2110: PPUSH
2111: CALL_OW 179
// wait ( 0 0$3 ) ;
2115: LD_INT 105
2117: PPUSH
2118: CALL_OW 67
// p := 0 ;
2122: LD_ADDR_VAR 0 4
2126: PUSH
2127: LD_INT 0
2129: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2130: LD_INT 35
2132: PPUSH
2133: CALL_OW 67
// p := p + 1 ;
2137: LD_ADDR_VAR 0 4
2141: PUSH
2142: LD_VAR 0 4
2146: PUSH
2147: LD_INT 1
2149: PLUS
2150: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2151: LD_EXP 1
2155: PPUSH
2156: LD_INT 6
2158: PPUSH
2159: CALL_OW 308
2163: PUSH
2164: LD_VAR 0 4
2168: PUSH
2169: LD_INT 10
2171: GREATER
2172: OR
2173: IFFALSE 2130
// heikeNearbyEon := true ;
2175: LD_ADDR_EXP 20
2179: PUSH
2180: LD_INT 1
2182: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2183: LD_EXP 6
2187: PPUSH
2188: LD_INT 88
2190: PPUSH
2191: LD_INT 37
2193: PPUSH
2194: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2198: LD_EXP 6
2202: PPUSH
2203: LD_EXP 13
2207: PUSH
2208: LD_INT 1
2210: ARRAY
2211: PPUSH
2212: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2216: LD_EXP 13
2220: PUSH
2221: LD_INT 1
2223: ARRAY
2224: PPUSH
2225: LD_INT 89
2227: PPUSH
2228: LD_INT 37
2230: PPUSH
2231: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2235: LD_EXP 13
2239: PUSH
2240: LD_INT 2
2242: ARRAY
2243: PPUSH
2244: LD_INT 91
2246: PPUSH
2247: LD_INT 39
2249: PPUSH
2250: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2254: LD_EXP 13
2258: PPUSH
2259: LD_EXP 11
2263: PPUSH
2264: CALL_OW 179
// wait ( 0 0$1 ) ;
2268: LD_INT 35
2270: PPUSH
2271: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2275: LD_EXP 13
2279: PUSH
2280: LD_INT 1
2282: ARRAY
2283: PPUSH
2284: LD_STRING DS-eon-1
2286: PPUSH
2287: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2291: LD_EXP 6
2295: PPUSH
2296: LD_STRING DSh-eon-1
2298: PPUSH
2299: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2303: LD_EXP 13
2307: PUSH
2308: LD_INT 1
2310: ARRAY
2311: PPUSH
2312: LD_STRING DS-eon-2
2314: PPUSH
2315: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2319: LD_EXP 6
2323: PPUSH
2324: LD_STRING DSh-eon-1a
2326: PPUSH
2327: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2331: LD_EXP 13
2335: PUSH
2336: LD_INT 1
2338: ARRAY
2339: PPUSH
2340: LD_INT 92
2342: PPUSH
2343: LD_INT 43
2345: PPUSH
2346: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2350: LD_EXP 13
2354: PUSH
2355: LD_INT 1
2357: ARRAY
2358: PPUSH
2359: LD_INT 14
2361: PPUSH
2362: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2366: LD_EXP 13
2370: PUSH
2371: LD_INT 2
2373: ARRAY
2374: PPUSH
2375: LD_INT 93
2377: PPUSH
2378: LD_INT 41
2380: PPUSH
2381: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2385: LD_EXP 13
2389: PUSH
2390: LD_INT 2
2392: ARRAY
2393: PPUSH
2394: LD_INT 93
2396: PPUSH
2397: LD_INT 40
2399: PPUSH
2400: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2404: LD_EXP 6
2408: PPUSH
2409: LD_INT 88
2411: PPUSH
2412: LD_INT 41
2414: PPUSH
2415: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2419: LD_EXP 6
2423: PPUSH
2424: LD_INT 87
2426: PPUSH
2427: LD_INT 41
2429: PPUSH
2430: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2434: LD_INT 35
2436: PPUSH
2437: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2441: LD_EXP 6
2445: PPUSH
2446: LD_INT 88
2448: PPUSH
2449: LD_INT 41
2451: PPUSH
2452: CALL_OW 307
2456: IFFALSE 2434
// wait ( 0 0$1 ) ;
2458: LD_INT 35
2460: PPUSH
2461: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2465: LD_EXP 6
2469: PPUSH
2470: LD_STRING DSh-eon-2
2472: PPUSH
2473: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2477: LD_EXP 11
2481: PPUSH
2482: LD_INT 87
2484: PPUSH
2485: LD_INT 40
2487: PPUSH
2488: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2492: LD_EXP 11
2496: PPUSH
2497: LD_INT 86
2499: PPUSH
2500: LD_INT 40
2502: PPUSH
2503: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2507: LD_INT 35
2509: PPUSH
2510: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2514: LD_EXP 11
2518: PPUSH
2519: LD_INT 87
2521: PPUSH
2522: LD_INT 40
2524: PPUSH
2525: CALL_OW 307
2529: IFFALSE 2507
// Say ( Shariff , DShar-eon-3 ) ;
2531: LD_EXP 11
2535: PPUSH
2536: LD_STRING DShar-eon-3
2538: PPUSH
2539: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2543: LD_INT 10
2545: PPUSH
2546: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2550: LD_EXP 5
2554: PPUSH
2555: LD_EXP 1
2559: PPUSH
2560: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2564: LD_EXP 11
2568: PPUSH
2569: LD_STRING DShar-eon-4
2571: PPUSH
2572: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2576: LD_EXP 5
2580: PPUSH
2581: LD_STRING DK-eon-4
2583: PPUSH
2584: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2588: LD_EXP 5
2592: PPUSH
2593: LD_INT 14
2595: PPUSH
2596: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2600: LD_INT 35
2602: PPUSH
2603: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2607: LD_EXP 5
2611: PPUSH
2612: CALL_OW 305
2616: NOT
2617: IFFALSE 2600
// ComTurnUnit ( Shariff , Heike ) ;
2619: LD_EXP 11
2623: PPUSH
2624: LD_EXP 1
2628: PPUSH
2629: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2633: LD_EXP 11
2637: PPUSH
2638: LD_STRING DShar-eon-5
2640: PPUSH
2641: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2645: LD_EXP 1
2649: PPUSH
2650: LD_INT 91
2652: PPUSH
2653: LD_INT 44
2655: PPUSH
2656: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2660: LD_EXP 1
2664: PPUSH
2665: LD_INT 14
2667: PPUSH
2668: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2672: LD_INT 35
2674: PPUSH
2675: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2679: LD_EXP 1
2683: PPUSH
2684: LD_INT 91
2686: PPUSH
2687: LD_INT 44
2689: PPUSH
2690: CALL_OW 307
2694: IFFALSE 2672
// Say ( Heike , DH-eon-5 ) ;
2696: LD_EXP 1
2700: PPUSH
2701: LD_STRING DH-eon-5
2703: PPUSH
2704: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2708: LD_EXP 1
2712: PPUSH
2713: LD_INT 14
2715: PPUSH
2716: CALL_OW 120
// wait ( 0 0$2 ) ;
2720: LD_INT 70
2722: PPUSH
2723: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2727: LD_INT 1
2729: PPUSH
2730: LD_STRING %_cont
2732: PPUSH
2733: CALL_OW 340
// InGameOff ;
2737: CALL_OW 9
// end ; end_of_file
2741: PPOPN 4
2743: END
// export function PrepareHeikeGroup ; begin
2744: LD_INT 0
2746: PPUSH
// uc_side := 2 ;
2747: LD_ADDR_OWVAR 20
2751: PUSH
2752: LD_INT 2
2754: ST_TO_ADDR
// uc_nation := 2 ;
2755: LD_ADDR_OWVAR 21
2759: PUSH
2760: LD_INT 2
2762: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2763: LD_ADDR_EXP 1
2767: PUSH
2768: LD_STRING Heike
2770: PPUSH
2771: CALL_OW 25
2775: ST_TO_ADDR
// uc_side := 5 ;
2776: LD_ADDR_OWVAR 20
2780: PUSH
2781: LD_INT 5
2783: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2784: LD_ADDR_EXP 5
2788: PUSH
2789: LD_STRING Kaia
2791: PPUSH
2792: CALL_OW 25
2796: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2797: LD_EXP 1
2801: PPUSH
2802: LD_INT 3
2804: PPUSH
2805: LD_INT 0
2807: PPUSH
2808: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2812: LD_EXP 5
2816: PPUSH
2817: LD_INT 3
2819: PPUSH
2820: LD_INT 0
2822: PPUSH
2823: CALL_OW 49
// end ;
2827: LD_VAR 0 1
2831: RET
// export function PrepareSheikGroup ; var un , i ; begin
2832: LD_INT 0
2834: PPUSH
2835: PPUSH
2836: PPUSH
// uc_side := 5 ;
2837: LD_ADDR_OWVAR 20
2841: PUSH
2842: LD_INT 5
2844: ST_TO_ADDR
// uc_nation := 2 ;
2845: LD_ADDR_OWVAR 21
2849: PUSH
2850: LD_INT 2
2852: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2853: LD_ADDR_EXP 10
2857: PUSH
2858: LD_STRING Ali
2860: PPUSH
2861: CALL_OW 25
2865: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2866: LD_ADDR_EXP 11
2870: PUSH
2871: LD_STRING Abdul
2873: PPUSH
2874: CALL_OW 25
2878: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2879: LD_ADDR_EXP 2
2883: PUSH
2884: LD_STRING Omar
2886: PPUSH
2887: CALL_OW 25
2891: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2892: LD_ADDR_EXP 7
2896: PUSH
2897: LD_STRING Mahtab
2899: PPUSH
2900: CALL_OW 25
2904: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2905: LD_ADDR_EXP 6
2909: PUSH
2910: LD_STRING Shahrzad
2912: PPUSH
2913: CALL_OW 25
2917: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2918: LD_EXP 10
2922: PPUSH
2923: LD_INT 85
2925: PPUSH
2926: LD_INT 37
2928: PPUSH
2929: LD_INT 0
2931: PPUSH
2932: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2936: LD_EXP 11
2940: PPUSH
2941: LD_INT 87
2943: PPUSH
2944: LD_INT 37
2946: PPUSH
2947: LD_INT 0
2949: PPUSH
2950: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2954: LD_EXP 2
2958: PPUSH
2959: LD_INT 85
2961: PPUSH
2962: LD_INT 35
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2972: LD_EXP 7
2976: PPUSH
2977: LD_INT 86
2979: PPUSH
2980: LD_INT 39
2982: PPUSH
2983: LD_INT 0
2985: PPUSH
2986: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2990: LD_EXP 6
2994: PPUSH
2995: LD_INT 88
2997: PPUSH
2998: LD_INT 39
3000: PPUSH
3001: LD_INT 0
3003: PPUSH
3004: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3008: LD_EXP 10
3012: PPUSH
3013: LD_EXP 11
3017: PPUSH
3018: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3022: LD_EXP 11
3026: PPUSH
3027: LD_EXP 10
3031: PPUSH
3032: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3036: LD_EXP 2
3040: PPUSH
3041: LD_EXP 11
3045: PPUSH
3046: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3050: LD_EXP 7
3054: PUSH
3055: LD_EXP 6
3059: PUSH
3060: EMPTY
3061: LIST
3062: LIST
3063: PPUSH
3064: LD_EXP 11
3068: PPUSH
3069: CALL_OW 119
// for i := 1 to 2 do
3073: LD_ADDR_VAR 0 3
3077: PUSH
3078: DOUBLE
3079: LD_INT 1
3081: DEC
3082: ST_TO_ADDR
3083: LD_INT 2
3085: PUSH
3086: FOR_TO
3087: IFFALSE 3173
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3089: LD_INT 2
3091: PPUSH
3092: LD_INT 4
3094: PPUSH
3095: LD_INT 6
3097: PPUSH
3098: CALL_OW 380
// un := CreateHuman ;
3102: LD_ADDR_VAR 0 2
3106: PUSH
3107: CALL_OW 44
3111: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3112: LD_VAR 0 2
3116: PPUSH
3117: LD_INT 90
3119: PPUSH
3120: LD_INT 44
3122: PPUSH
3123: LD_INT 3
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3133: LD_VAR 0 2
3137: PPUSH
3138: LD_INT 91
3140: PPUSH
3141: LD_INT 43
3143: PPUSH
3144: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3148: LD_ADDR_EXP 13
3152: PUSH
3153: LD_EXP 13
3157: PPUSH
3158: LD_INT 1
3160: PPUSH
3161: LD_VAR 0 2
3165: PPUSH
3166: CALL_OW 2
3170: ST_TO_ADDR
// end ;
3171: GO 3086
3173: POP
3174: POP
// scientists := scientists diff 0 ;
3175: LD_ADDR_EXP 13
3179: PUSH
3180: LD_EXP 13
3184: PUSH
3185: LD_INT 0
3187: DIFF
3188: ST_TO_ADDR
// end ;
3189: LD_VAR 0 1
3193: RET
// export function PrepareKurtGroup ; var i ; begin
3194: LD_INT 0
3196: PPUSH
3197: PPUSH
// uc_side := 5 ;
3198: LD_ADDR_OWVAR 20
3202: PUSH
3203: LD_INT 5
3205: ST_TO_ADDR
// uc_nation := 2 ;
3206: LD_ADDR_OWVAR 21
3210: PUSH
3211: LD_INT 2
3213: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3214: LD_ADDR_EXP 8
3218: PUSH
3219: LD_STRING Kurt
3221: PPUSH
3222: CALL_OW 25
3226: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3227: LD_ADDR_EXP 4
3231: PUSH
3232: LD_STRING Olaf
3234: PPUSH
3235: CALL_OW 25
3239: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3240: LD_ADDR_EXP 9
3244: PUSH
3245: LD_STRING Hans
3247: PPUSH
3248: CALL_OW 25
3252: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3253: LD_ADDR_VAR 0 2
3257: PUSH
3258: LD_EXP 8
3262: PUSH
3263: LD_EXP 9
3267: PUSH
3268: LD_EXP 4
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: FOR_IN
3279: IFFALSE 3298
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3281: LD_VAR 0 2
3285: PPUSH
3286: LD_INT 10
3288: PPUSH
3289: LD_INT 0
3291: PPUSH
3292: CALL_OW 49
3296: GO 3278
3298: POP
3299: POP
// ComTurnUnit ( Kurt , Hans ) ;
3300: LD_EXP 8
3304: PPUSH
3305: LD_EXP 9
3309: PPUSH
3310: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3314: LD_EXP 4
3318: PPUSH
3319: LD_EXP 9
3323: PPUSH
3324: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3328: LD_EXP 9
3332: PPUSH
3333: LD_EXP 4
3337: PPUSH
3338: CALL_OW 119
// end ;
3342: LD_VAR 0 1
3346: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3347: LD_INT 0
3349: PPUSH
3350: PPUSH
3351: PPUSH
3352: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3353: LD_ADDR_VAR 0 2
3357: PUSH
3358: LD_INT 21
3360: PUSH
3361: LD_INT 3
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PPUSH
3368: CALL_OW 69
3372: PUSH
3373: LD_INT 14
3375: DIFF
3376: PUSH
3377: FOR_IN
3378: IFFALSE 3458
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3380: LD_VAR 0 2
3384: PPUSH
3385: CALL_OW 266
3389: PUSH
3390: LD_INT 6
3392: PUSH
3393: LD_INT 31
3395: PUSH
3396: EMPTY
3397: LIST
3398: LIST
3399: IN
3400: IFFALSE 3424
// SetLives ( i , rand ( 500 , 600 ) ) else
3402: LD_VAR 0 2
3406: PPUSH
3407: LD_INT 500
3409: PPUSH
3410: LD_INT 600
3412: PPUSH
3413: CALL_OW 12
3417: PPUSH
3418: CALL_OW 234
3422: GO 3444
// SetLives ( i , rand ( 300 , 499 ) ) ;
3424: LD_VAR 0 2
3428: PPUSH
3429: LD_INT 300
3431: PPUSH
3432: LD_INT 499
3434: PPUSH
3435: CALL_OW 12
3439: PPUSH
3440: CALL_OW 234
// SetSide ( i , 5 ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 5
3451: PPUSH
3452: CALL_OW 235
// end ;
3456: GO 3377
3458: POP
3459: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3460: LD_ADDR_VAR 0 4
3464: PUSH
3465: LD_INT 9
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 517
3475: ST_TO_ADDR
// uc_side := 4 ;
3476: LD_ADDR_OWVAR 20
3480: PUSH
3481: LD_INT 4
3483: ST_TO_ADDR
// uc_nation := 1 ;
3484: LD_ADDR_OWVAR 21
3488: PUSH
3489: LD_INT 1
3491: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_VAR 0 4
3506: PUSH
3507: LD_INT 1
3509: ARRAY
3510: PUSH
3511: FOR_TO
3512: IFFALSE 3588
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3514: LD_INT 0
3516: PPUSH
3517: LD_INT 1
3519: PUSH
3520: LD_INT 1
3522: PUSH
3523: LD_INT 4
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: LIST
3530: PUSH
3531: LD_VAR 0 2
3535: PUSH
3536: LD_INT 3
3538: MOD
3539: PUSH
3540: LD_INT 1
3542: PLUS
3543: ARRAY
3544: PPUSH
3545: LD_INT 0
3547: PPUSH
3548: CALL_OW 380
// un := CreateHuman ;
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: CALL_OW 44
3561: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3562: LD_VAR 0 3
3566: PPUSH
3567: LD_INT 9
3569: PPUSH
3570: LD_INT 0
3572: PPUSH
3573: CALL_OW 49
// KillUnit ( un ) ;
3577: LD_VAR 0 3
3581: PPUSH
3582: CALL_OW 66
// end ;
3586: GO 3511
3588: POP
3589: POP
// end ;
3590: LD_VAR 0 1
3594: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3595: LD_INT 0
3597: PPUSH
3598: PPUSH
3599: PPUSH
3600: PPUSH
3601: PPUSH
3602: PPUSH
3603: PPUSH
// uc_side := 5 ;
3604: LD_ADDR_OWVAR 20
3608: PUSH
3609: LD_INT 5
3611: ST_TO_ADDR
// uc_nation := 2 ;
3612: LD_ADDR_OWVAR 21
3616: PUSH
3617: LD_INT 2
3619: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3620: LD_ADDR_VAR 0 6
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 5
3633: PUSH
3634: LD_INT 14
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: ST_TO_ADDR
// InitHc ;
3643: CALL_OW 19
// for i in area do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: LD_VAR 0 6
3656: PUSH
3657: FOR_IN
3658: IFFALSE 3822
// begin tmp := AreaToList ( i , 0 ) ;
3660: LD_ADDR_VAR 0 5
3664: PUSH
3665: LD_VAR 0 2
3669: PPUSH
3670: LD_INT 0
3672: PPUSH
3673: CALL_OW 517
3677: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3678: LD_ADDR_VAR 0 3
3682: PUSH
3683: DOUBLE
3684: LD_INT 1
3686: DEC
3687: ST_TO_ADDR
3688: LD_VAR 0 5
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: PUSH
3697: FOR_TO
3698: IFFALSE 3818
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3700: LD_INT 1
3702: PPUSH
3703: LD_INT 1
3705: PPUSH
3706: LD_INT 3
3708: PPUSH
3709: CALL_OW 380
// un := CreateHuman ;
3713: LD_ADDR_VAR 0 7
3717: PUSH
3718: CALL_OW 44
3722: ST_TO_ADDR
// if i = spawnBaseArea3 then
3723: LD_VAR 0 2
3727: PUSH
3728: LD_INT 5
3730: EQUAL
3731: IFFALSE 3749
// eonGuards := eonGuards ^ un ;
3733: LD_ADDR_EXP 14
3737: PUSH
3738: LD_EXP 14
3742: PUSH
3743: LD_VAR 0 7
3747: ADD
3748: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3749: LD_VAR 0 7
3753: PPUSH
3754: LD_VAR 0 2
3758: PPUSH
3759: LD_INT 0
3761: PPUSH
3762: CALL_OW 49
// ComHold ( un ) ;
3766: LD_VAR 0 7
3770: PPUSH
3771: CALL_OW 140
// if i = spawnBaseArea4 then
3775: LD_VAR 0 2
3779: PUSH
3780: LD_INT 14
3782: EQUAL
3783: IFFALSE 3816
// begin firstGroup := firstGroup ^ un ;
3785: LD_ADDR_EXP 15
3789: PUSH
3790: LD_EXP 15
3794: PUSH
3795: LD_VAR 0 7
3799: ADD
3800: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3801: LD_VAR 0 7
3805: PPUSH
3806: LD_INT 108
3808: PPUSH
3809: LD_INT 47
3811: PPUSH
3812: CALL_OW 118
// end ; end ;
3816: GO 3697
3818: POP
3819: POP
// end ;
3820: GO 3657
3822: POP
3823: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3824: LD_ADDR_VAR 0 2
3828: PUSH
3829: DOUBLE
3830: LD_INT 1
3832: DEC
3833: ST_TO_ADDR
3834: LD_INT 30
3836: PUSH
3837: LD_INT 31
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL_OW 69
3848: PUSH
3849: FOR_TO
3850: IFFALSE 3944
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3852: LD_ADDR_VAR 0 4
3856: PUSH
3857: LD_INT 30
3859: PUSH
3860: LD_INT 31
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: PPUSH
3867: CALL_OW 69
3871: PUSH
3872: LD_VAR 0 2
3876: ARRAY
3877: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3878: LD_INT 1
3880: PPUSH
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 3
3886: PPUSH
3887: CALL_OW 380
// un := CreateHuman ;
3891: LD_ADDR_VAR 0 7
3895: PUSH
3896: CALL_OW 44
3900: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3901: LD_VAR 0 7
3905: PPUSH
3906: LD_VAR 0 4
3910: PPUSH
3911: CALL_OW 254
3915: PUSH
3916: LD_INT 3
3918: PLUS
3919: PUSH
3920: LD_INT 6
3922: MOD
3923: PPUSH
3924: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3928: LD_VAR 0 7
3932: PPUSH
3933: LD_VAR 0 4
3937: PPUSH
3938: CALL_OW 52
// end ;
3942: GO 3849
3944: POP
3945: POP
// end ; end_of_file
3946: LD_VAR 0 1
3950: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3951: LD_VAR 0 1
3955: PUSH
3956: LD_INT 2
3958: EQUAL
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_INT 5
3967: EQUAL
3968: AND
3969: IFFALSE 3987
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3971: LD_INT 2
3973: PPUSH
3974: LD_INT 5
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: CALL_OW 80
// end ;
3987: PPOPN 2
3989: END
// every 0 0$1 trigger scientists do var i ;
3990: LD_EXP 13
3994: IFFALSE 4202
3996: GO 3998
3998: DISABLE
3999: LD_INT 0
4001: PPUSH
// begin repeat for i in scientists do
4002: LD_ADDR_VAR 0 1
4006: PUSH
4007: LD_EXP 13
4011: PUSH
4012: FOR_IN
4013: IFFALSE 4187
// begin wait ( 0 0$1 ) ;
4015: LD_INT 35
4017: PPUSH
4018: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4022: LD_VAR 0 1
4026: PPUSH
4027: LD_INT 11
4029: PUSH
4030: LD_INT 13
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PUSH
4037: LD_VAR 0 1
4041: PUSH
4042: LD_INT 2
4044: MOD
4045: PUSH
4046: LD_INT 1
4048: PLUS
4049: ARRAY
4050: PPUSH
4051: CALL_OW 308
4055: NOT
4056: IFFALSE 4091
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4058: LD_VAR 0 1
4062: PPUSH
4063: LD_INT 11
4065: PUSH
4066: LD_INT 13
4068: PUSH
4069: EMPTY
4070: LIST
4071: LIST
4072: PUSH
4073: LD_VAR 0 1
4077: PUSH
4078: LD_INT 2
4080: MOD
4081: PUSH
4082: LD_INT 1
4084: PLUS
4085: ARRAY
4086: PPUSH
4087: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4091: LD_VAR 0 1
4095: PPUSH
4096: LD_INT 14
4098: PPUSH
4099: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4103: LD_VAR 0 1
4107: PPUSH
4108: LD_INT 70
4110: PPUSH
4111: CALL_OW 202
// if rand ( 0 , 1 ) then
4115: LD_INT 0
4117: PPUSH
4118: LD_INT 1
4120: PPUSH
4121: CALL_OW 12
4125: IFFALSE 4139
// AddComAnim ( i , 15 ) ;
4127: LD_VAR 0 1
4131: PPUSH
4132: LD_INT 15
4134: PPUSH
4135: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4139: LD_VAR 0 1
4143: PPUSH
4144: LD_INT 35
4146: PPUSH
4147: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4151: LD_VAR 0 1
4155: PPUSH
4156: LD_INT 12
4158: PPUSH
4159: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4163: LD_VAR 0 1
4167: PPUSH
4168: LD_INT 93
4170: PPUSH
4171: LD_INT 40
4173: PPUSH
4174: CALL_OW 178
// wait ( 0 0$1 ) ;
4178: LD_INT 35
4180: PPUSH
4181: CALL_OW 67
// end ;
4185: GO 4012
4187: POP
4188: POP
// wait ( 0 0$10 ) ;
4189: LD_INT 350
4191: PPUSH
4192: CALL_OW 67
// until heikeNearbyEon ;
4196: LD_EXP 20
4200: IFFALSE 4002
// end ; end_of_file
4202: PPOPN 1
4204: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4205: LD_VAR 0 2
4209: PUSH
4210: LD_INT 100
4212: EQUAL
4213: IFFALSE 5162
// begin if not StreamModeActive then
4215: LD_EXP 22
4219: NOT
4220: IFFALSE 4230
// StreamModeActive := true ;
4222: LD_ADDR_EXP 22
4226: PUSH
4227: LD_INT 1
4229: ST_TO_ADDR
// if p3 = 0 then
4230: LD_VAR 0 3
4234: PUSH
4235: LD_INT 0
4237: EQUAL
4238: IFFALSE 4244
// InitStreamMode ;
4240: CALL 5395 0 0
// if p3 = 1 then
4244: LD_VAR 0 3
4248: PUSH
4249: LD_INT 1
4251: EQUAL
4252: IFFALSE 4262
// sRocket := true ;
4254: LD_ADDR_EXP 27
4258: PUSH
4259: LD_INT 1
4261: ST_TO_ADDR
// if p3 = 2 then
4262: LD_VAR 0 3
4266: PUSH
4267: LD_INT 2
4269: EQUAL
4270: IFFALSE 4280
// sSpeed := true ;
4272: LD_ADDR_EXP 26
4276: PUSH
4277: LD_INT 1
4279: ST_TO_ADDR
// if p3 = 3 then
4280: LD_VAR 0 3
4284: PUSH
4285: LD_INT 3
4287: EQUAL
4288: IFFALSE 4298
// sEngine := true ;
4290: LD_ADDR_EXP 28
4294: PUSH
4295: LD_INT 1
4297: ST_TO_ADDR
// if p3 = 4 then
4298: LD_VAR 0 3
4302: PUSH
4303: LD_INT 4
4305: EQUAL
4306: IFFALSE 4316
// sSpec := true ;
4308: LD_ADDR_EXP 25
4312: PUSH
4313: LD_INT 1
4315: ST_TO_ADDR
// if p3 = 5 then
4316: LD_VAR 0 3
4320: PUSH
4321: LD_INT 5
4323: EQUAL
4324: IFFALSE 4334
// sLevel := true ;
4326: LD_ADDR_EXP 29
4330: PUSH
4331: LD_INT 1
4333: ST_TO_ADDR
// if p3 = 6 then
4334: LD_VAR 0 3
4338: PUSH
4339: LD_INT 6
4341: EQUAL
4342: IFFALSE 4352
// sArmoury := true ;
4344: LD_ADDR_EXP 30
4348: PUSH
4349: LD_INT 1
4351: ST_TO_ADDR
// if p3 = 7 then
4352: LD_VAR 0 3
4356: PUSH
4357: LD_INT 7
4359: EQUAL
4360: IFFALSE 4370
// sRadar := true ;
4362: LD_ADDR_EXP 31
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// if p3 = 8 then
4370: LD_VAR 0 3
4374: PUSH
4375: LD_INT 8
4377: EQUAL
4378: IFFALSE 4388
// sBunker := true ;
4380: LD_ADDR_EXP 32
4384: PUSH
4385: LD_INT 1
4387: ST_TO_ADDR
// if p3 = 9 then
4388: LD_VAR 0 3
4392: PUSH
4393: LD_INT 9
4395: EQUAL
4396: IFFALSE 4406
// sHack := true ;
4398: LD_ADDR_EXP 33
4402: PUSH
4403: LD_INT 1
4405: ST_TO_ADDR
// if p3 = 10 then
4406: LD_VAR 0 3
4410: PUSH
4411: LD_INT 10
4413: EQUAL
4414: IFFALSE 4424
// sFire := true ;
4416: LD_ADDR_EXP 34
4420: PUSH
4421: LD_INT 1
4423: ST_TO_ADDR
// if p3 = 11 then
4424: LD_VAR 0 3
4428: PUSH
4429: LD_INT 11
4431: EQUAL
4432: IFFALSE 4442
// sRefresh := true ;
4434: LD_ADDR_EXP 35
4438: PUSH
4439: LD_INT 1
4441: ST_TO_ADDR
// if p3 = 12 then
4442: LD_VAR 0 3
4446: PUSH
4447: LD_INT 12
4449: EQUAL
4450: IFFALSE 4460
// sExp := true ;
4452: LD_ADDR_EXP 36
4456: PUSH
4457: LD_INT 1
4459: ST_TO_ADDR
// if p3 = 13 then
4460: LD_VAR 0 3
4464: PUSH
4465: LD_INT 13
4467: EQUAL
4468: IFFALSE 4478
// sDepot := true ;
4470: LD_ADDR_EXP 37
4474: PUSH
4475: LD_INT 1
4477: ST_TO_ADDR
// if p3 = 14 then
4478: LD_VAR 0 3
4482: PUSH
4483: LD_INT 14
4485: EQUAL
4486: IFFALSE 4496
// sFlag := true ;
4488: LD_ADDR_EXP 38
4492: PUSH
4493: LD_INT 1
4495: ST_TO_ADDR
// if p3 = 15 then
4496: LD_VAR 0 3
4500: PUSH
4501: LD_INT 15
4503: EQUAL
4504: IFFALSE 4514
// sKamikadze := true ;
4506: LD_ADDR_EXP 46
4510: PUSH
4511: LD_INT 1
4513: ST_TO_ADDR
// if p3 = 16 then
4514: LD_VAR 0 3
4518: PUSH
4519: LD_INT 16
4521: EQUAL
4522: IFFALSE 4532
// sTroll := true ;
4524: LD_ADDR_EXP 47
4528: PUSH
4529: LD_INT 1
4531: ST_TO_ADDR
// if p3 = 17 then
4532: LD_VAR 0 3
4536: PUSH
4537: LD_INT 17
4539: EQUAL
4540: IFFALSE 4550
// sSlow := true ;
4542: LD_ADDR_EXP 48
4546: PUSH
4547: LD_INT 1
4549: ST_TO_ADDR
// if p3 = 18 then
4550: LD_VAR 0 3
4554: PUSH
4555: LD_INT 18
4557: EQUAL
4558: IFFALSE 4568
// sLack := true ;
4560: LD_ADDR_EXP 49
4564: PUSH
4565: LD_INT 1
4567: ST_TO_ADDR
// if p3 = 19 then
4568: LD_VAR 0 3
4572: PUSH
4573: LD_INT 19
4575: EQUAL
4576: IFFALSE 4586
// sTank := true ;
4578: LD_ADDR_EXP 51
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// if p3 = 20 then
4586: LD_VAR 0 3
4590: PUSH
4591: LD_INT 20
4593: EQUAL
4594: IFFALSE 4604
// sRemote := true ;
4596: LD_ADDR_EXP 52
4600: PUSH
4601: LD_INT 1
4603: ST_TO_ADDR
// if p3 = 21 then
4604: LD_VAR 0 3
4608: PUSH
4609: LD_INT 21
4611: EQUAL
4612: IFFALSE 4622
// sPowell := true ;
4614: LD_ADDR_EXP 53
4618: PUSH
4619: LD_INT 1
4621: ST_TO_ADDR
// if p3 = 22 then
4622: LD_VAR 0 3
4626: PUSH
4627: LD_INT 22
4629: EQUAL
4630: IFFALSE 4640
// sTeleport := true ;
4632: LD_ADDR_EXP 56
4636: PUSH
4637: LD_INT 1
4639: ST_TO_ADDR
// if p3 = 23 then
4640: LD_VAR 0 3
4644: PUSH
4645: LD_INT 23
4647: EQUAL
4648: IFFALSE 4658
// sOilTower := true ;
4650: LD_ADDR_EXP 58
4654: PUSH
4655: LD_INT 1
4657: ST_TO_ADDR
// if p3 = 24 then
4658: LD_VAR 0 3
4662: PUSH
4663: LD_INT 24
4665: EQUAL
4666: IFFALSE 4676
// sShovel := true ;
4668: LD_ADDR_EXP 59
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// if p3 = 25 then
4676: LD_VAR 0 3
4680: PUSH
4681: LD_INT 25
4683: EQUAL
4684: IFFALSE 4694
// sSheik := true ;
4686: LD_ADDR_EXP 60
4690: PUSH
4691: LD_INT 1
4693: ST_TO_ADDR
// if p3 = 26 then
4694: LD_VAR 0 3
4698: PUSH
4699: LD_INT 26
4701: EQUAL
4702: IFFALSE 4712
// sEarthquake := true ;
4704: LD_ADDR_EXP 62
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// if p3 = 27 then
4712: LD_VAR 0 3
4716: PUSH
4717: LD_INT 27
4719: EQUAL
4720: IFFALSE 4730
// sAI := true ;
4722: LD_ADDR_EXP 63
4726: PUSH
4727: LD_INT 1
4729: ST_TO_ADDR
// if p3 = 28 then
4730: LD_VAR 0 3
4734: PUSH
4735: LD_INT 28
4737: EQUAL
4738: IFFALSE 4748
// sCargo := true ;
4740: LD_ADDR_EXP 66
4744: PUSH
4745: LD_INT 1
4747: ST_TO_ADDR
// if p3 = 29 then
4748: LD_VAR 0 3
4752: PUSH
4753: LD_INT 29
4755: EQUAL
4756: IFFALSE 4766
// sDLaser := true ;
4758: LD_ADDR_EXP 67
4762: PUSH
4763: LD_INT 1
4765: ST_TO_ADDR
// if p3 = 30 then
4766: LD_VAR 0 3
4770: PUSH
4771: LD_INT 30
4773: EQUAL
4774: IFFALSE 4784
// sExchange := true ;
4776: LD_ADDR_EXP 68
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// if p3 = 31 then
4784: LD_VAR 0 3
4788: PUSH
4789: LD_INT 31
4791: EQUAL
4792: IFFALSE 4802
// sFac := true ;
4794: LD_ADDR_EXP 69
4798: PUSH
4799: LD_INT 1
4801: ST_TO_ADDR
// if p3 = 32 then
4802: LD_VAR 0 3
4806: PUSH
4807: LD_INT 32
4809: EQUAL
4810: IFFALSE 4820
// sPower := true ;
4812: LD_ADDR_EXP 70
4816: PUSH
4817: LD_INT 1
4819: ST_TO_ADDR
// if p3 = 33 then
4820: LD_VAR 0 3
4824: PUSH
4825: LD_INT 33
4827: EQUAL
4828: IFFALSE 4838
// sRandom := true ;
4830: LD_ADDR_EXP 71
4834: PUSH
4835: LD_INT 1
4837: ST_TO_ADDR
// if p3 = 34 then
4838: LD_VAR 0 3
4842: PUSH
4843: LD_INT 34
4845: EQUAL
4846: IFFALSE 4856
// sShield := true ;
4848: LD_ADDR_EXP 72
4852: PUSH
4853: LD_INT 1
4855: ST_TO_ADDR
// if p3 = 35 then
4856: LD_VAR 0 3
4860: PUSH
4861: LD_INT 35
4863: EQUAL
4864: IFFALSE 4874
// sTime := true ;
4866: LD_ADDR_EXP 73
4870: PUSH
4871: LD_INT 1
4873: ST_TO_ADDR
// if p3 = 36 then
4874: LD_VAR 0 3
4878: PUSH
4879: LD_INT 36
4881: EQUAL
4882: IFFALSE 4892
// sTools := true ;
4884: LD_ADDR_EXP 74
4888: PUSH
4889: LD_INT 1
4891: ST_TO_ADDR
// if p3 = 101 then
4892: LD_VAR 0 3
4896: PUSH
4897: LD_INT 101
4899: EQUAL
4900: IFFALSE 4910
// sSold := true ;
4902: LD_ADDR_EXP 39
4906: PUSH
4907: LD_INT 1
4909: ST_TO_ADDR
// if p3 = 102 then
4910: LD_VAR 0 3
4914: PUSH
4915: LD_INT 102
4917: EQUAL
4918: IFFALSE 4928
// sDiff := true ;
4920: LD_ADDR_EXP 40
4924: PUSH
4925: LD_INT 1
4927: ST_TO_ADDR
// if p3 = 103 then
4928: LD_VAR 0 3
4932: PUSH
4933: LD_INT 103
4935: EQUAL
4936: IFFALSE 4946
// sFog := true ;
4938: LD_ADDR_EXP 43
4942: PUSH
4943: LD_INT 1
4945: ST_TO_ADDR
// if p3 = 104 then
4946: LD_VAR 0 3
4950: PUSH
4951: LD_INT 104
4953: EQUAL
4954: IFFALSE 4964
// sReset := true ;
4956: LD_ADDR_EXP 44
4960: PUSH
4961: LD_INT 1
4963: ST_TO_ADDR
// if p3 = 105 then
4964: LD_VAR 0 3
4968: PUSH
4969: LD_INT 105
4971: EQUAL
4972: IFFALSE 4982
// sSun := true ;
4974: LD_ADDR_EXP 45
4978: PUSH
4979: LD_INT 1
4981: ST_TO_ADDR
// if p3 = 106 then
4982: LD_VAR 0 3
4986: PUSH
4987: LD_INT 106
4989: EQUAL
4990: IFFALSE 5000
// sTiger := true ;
4992: LD_ADDR_EXP 41
4996: PUSH
4997: LD_INT 1
4999: ST_TO_ADDR
// if p3 = 107 then
5000: LD_VAR 0 3
5004: PUSH
5005: LD_INT 107
5007: EQUAL
5008: IFFALSE 5018
// sBomb := true ;
5010: LD_ADDR_EXP 42
5014: PUSH
5015: LD_INT 1
5017: ST_TO_ADDR
// if p3 = 108 then
5018: LD_VAR 0 3
5022: PUSH
5023: LD_INT 108
5025: EQUAL
5026: IFFALSE 5036
// sWound := true ;
5028: LD_ADDR_EXP 50
5032: PUSH
5033: LD_INT 1
5035: ST_TO_ADDR
// if p3 = 109 then
5036: LD_VAR 0 3
5040: PUSH
5041: LD_INT 109
5043: EQUAL
5044: IFFALSE 5054
// sBetray := true ;
5046: LD_ADDR_EXP 54
5050: PUSH
5051: LD_INT 1
5053: ST_TO_ADDR
// if p3 = 110 then
5054: LD_VAR 0 3
5058: PUSH
5059: LD_INT 110
5061: EQUAL
5062: IFFALSE 5072
// sContamin := true ;
5064: LD_ADDR_EXP 55
5068: PUSH
5069: LD_INT 1
5071: ST_TO_ADDR
// if p3 = 111 then
5072: LD_VAR 0 3
5076: PUSH
5077: LD_INT 111
5079: EQUAL
5080: IFFALSE 5090
// sOil := true ;
5082: LD_ADDR_EXP 57
5086: PUSH
5087: LD_INT 1
5089: ST_TO_ADDR
// if p3 = 112 then
5090: LD_VAR 0 3
5094: PUSH
5095: LD_INT 112
5097: EQUAL
5098: IFFALSE 5108
// sStu := true ;
5100: LD_ADDR_EXP 61
5104: PUSH
5105: LD_INT 1
5107: ST_TO_ADDR
// if p3 = 113 then
5108: LD_VAR 0 3
5112: PUSH
5113: LD_INT 113
5115: EQUAL
5116: IFFALSE 5126
// sBazooka := true ;
5118: LD_ADDR_EXP 64
5122: PUSH
5123: LD_INT 1
5125: ST_TO_ADDR
// if p3 = 114 then
5126: LD_VAR 0 3
5130: PUSH
5131: LD_INT 114
5133: EQUAL
5134: IFFALSE 5144
// sMortar := true ;
5136: LD_ADDR_EXP 65
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// if p3 = 115 then
5144: LD_VAR 0 3
5148: PUSH
5149: LD_INT 115
5151: EQUAL
5152: IFFALSE 5162
// sRanger := true ;
5154: LD_ADDR_EXP 75
5158: PUSH
5159: LD_INT 1
5161: ST_TO_ADDR
// end ; if p2 = 101 then
5162: LD_VAR 0 2
5166: PUSH
5167: LD_INT 101
5169: EQUAL
5170: IFFALSE 5373
// begin case p3 of 1 :
5172: LD_VAR 0 3
5176: PUSH
5177: LD_INT 1
5179: DOUBLE
5180: EQUAL
5181: IFTRUE 5185
5183: GO 5192
5185: POP
// hHackUnlimitedResources ; 2 :
5186: CALL 15467 0 0
5190: GO 5373
5192: LD_INT 2
5194: DOUBLE
5195: EQUAL
5196: IFTRUE 5200
5198: GO 5207
5200: POP
// hHackSetLevel10 ; 3 :
5201: CALL 15600 0 0
5205: GO 5373
5207: LD_INT 3
5209: DOUBLE
5210: EQUAL
5211: IFTRUE 5215
5213: GO 5222
5215: POP
// hHackSetLevel10YourUnits ; 4 :
5216: CALL 15685 0 0
5220: GO 5373
5222: LD_INT 4
5224: DOUBLE
5225: EQUAL
5226: IFTRUE 5230
5228: GO 5252
5230: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
5231: LD_VAR 0 4
5235: PPUSH
5236: LD_VAR 0 5
5240: PPUSH
5241: LD_VAR 0 6
5245: PPUSH
5246: CALL 15775 0 3
5250: GO 5373
5252: LD_INT 5
5254: DOUBLE
5255: EQUAL
5256: IFTRUE 5260
5258: GO 5267
5260: POP
// hHackSpawnVehicle ; 6 :
5261: CALL 15836 0 0
5265: GO 5373
5267: LD_INT 6
5269: DOUBLE
5270: EQUAL
5271: IFTRUE 5275
5273: GO 5282
5275: POP
// hHackInvincible ; 7 :
5276: CALL 16382 0 0
5280: GO 5373
5282: LD_INT 7
5284: DOUBLE
5285: EQUAL
5286: IFTRUE 5290
5288: GO 5297
5290: POP
// hHackInvisible ; 8 :
5291: CALL 16493 0 0
5295: GO 5373
5297: LD_INT 8
5299: DOUBLE
5300: EQUAL
5301: IFTRUE 5305
5303: GO 5312
5305: POP
// hHackChangeYourSide ; 9 :
5306: CALL 16550 0 0
5310: GO 5373
5312: LD_INT 9
5314: DOUBLE
5315: EQUAL
5316: IFTRUE 5320
5318: GO 5327
5320: POP
// hHackChangeUnitSide ; 10 :
5321: CALL 16592 0 0
5325: GO 5373
5327: LD_INT 10
5329: DOUBLE
5330: EQUAL
5331: IFTRUE 5335
5333: GO 5342
5335: POP
// hHackFog ; 11 :
5336: CALL 16693 0 0
5340: GO 5373
5342: LD_INT 11
5344: DOUBLE
5345: EQUAL
5346: IFTRUE 5350
5348: GO 5357
5350: POP
// hHackApeman ; 12 :
5351: CALL 16708 0 0
5355: GO 5373
5357: LD_INT 12
5359: DOUBLE
5360: EQUAL
5361: IFTRUE 5365
5363: GO 5372
5365: POP
// hHackBoom ; end ;
5366: CALL 16793 0 0
5370: GO 5373
5372: POP
// end ; end ;
5373: PPOPN 6
5375: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5376: GO 5378
5378: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5379: LD_STRING initStreamRollete();
5381: PPUSH
5382: CALL_OW 559
// InitStreamMode ;
5386: CALL 5395 0 0
// DefineStreamItems ( ) ;
5390: CALL 5835 0 0
// end ;
5394: END
// function InitStreamMode ; begin
5395: LD_INT 0
5397: PPUSH
// streamModeActive := false ;
5398: LD_ADDR_EXP 22
5402: PUSH
5403: LD_INT 0
5405: ST_TO_ADDR
// normalCounter := 36 ;
5406: LD_ADDR_EXP 23
5410: PUSH
5411: LD_INT 36
5413: ST_TO_ADDR
// hardcoreCounter := 16 ;
5414: LD_ADDR_EXP 24
5418: PUSH
5419: LD_INT 16
5421: ST_TO_ADDR
// sRocket := false ;
5422: LD_ADDR_EXP 27
5426: PUSH
5427: LD_INT 0
5429: ST_TO_ADDR
// sSpeed := false ;
5430: LD_ADDR_EXP 26
5434: PUSH
5435: LD_INT 0
5437: ST_TO_ADDR
// sEngine := false ;
5438: LD_ADDR_EXP 28
5442: PUSH
5443: LD_INT 0
5445: ST_TO_ADDR
// sSpec := false ;
5446: LD_ADDR_EXP 25
5450: PUSH
5451: LD_INT 0
5453: ST_TO_ADDR
// sLevel := false ;
5454: LD_ADDR_EXP 29
5458: PUSH
5459: LD_INT 0
5461: ST_TO_ADDR
// sArmoury := false ;
5462: LD_ADDR_EXP 30
5466: PUSH
5467: LD_INT 0
5469: ST_TO_ADDR
// sRadar := false ;
5470: LD_ADDR_EXP 31
5474: PUSH
5475: LD_INT 0
5477: ST_TO_ADDR
// sBunker := false ;
5478: LD_ADDR_EXP 32
5482: PUSH
5483: LD_INT 0
5485: ST_TO_ADDR
// sHack := false ;
5486: LD_ADDR_EXP 33
5490: PUSH
5491: LD_INT 0
5493: ST_TO_ADDR
// sFire := false ;
5494: LD_ADDR_EXP 34
5498: PUSH
5499: LD_INT 0
5501: ST_TO_ADDR
// sRefresh := false ;
5502: LD_ADDR_EXP 35
5506: PUSH
5507: LD_INT 0
5509: ST_TO_ADDR
// sExp := false ;
5510: LD_ADDR_EXP 36
5514: PUSH
5515: LD_INT 0
5517: ST_TO_ADDR
// sDepot := false ;
5518: LD_ADDR_EXP 37
5522: PUSH
5523: LD_INT 0
5525: ST_TO_ADDR
// sFlag := false ;
5526: LD_ADDR_EXP 38
5530: PUSH
5531: LD_INT 0
5533: ST_TO_ADDR
// sKamikadze := false ;
5534: LD_ADDR_EXP 46
5538: PUSH
5539: LD_INT 0
5541: ST_TO_ADDR
// sTroll := false ;
5542: LD_ADDR_EXP 47
5546: PUSH
5547: LD_INT 0
5549: ST_TO_ADDR
// sSlow := false ;
5550: LD_ADDR_EXP 48
5554: PUSH
5555: LD_INT 0
5557: ST_TO_ADDR
// sLack := false ;
5558: LD_ADDR_EXP 49
5562: PUSH
5563: LD_INT 0
5565: ST_TO_ADDR
// sTank := false ;
5566: LD_ADDR_EXP 51
5570: PUSH
5571: LD_INT 0
5573: ST_TO_ADDR
// sRemote := false ;
5574: LD_ADDR_EXP 52
5578: PUSH
5579: LD_INT 0
5581: ST_TO_ADDR
// sPowell := false ;
5582: LD_ADDR_EXP 53
5586: PUSH
5587: LD_INT 0
5589: ST_TO_ADDR
// sTeleport := false ;
5590: LD_ADDR_EXP 56
5594: PUSH
5595: LD_INT 0
5597: ST_TO_ADDR
// sOilTower := false ;
5598: LD_ADDR_EXP 58
5602: PUSH
5603: LD_INT 0
5605: ST_TO_ADDR
// sShovel := false ;
5606: LD_ADDR_EXP 59
5610: PUSH
5611: LD_INT 0
5613: ST_TO_ADDR
// sSheik := false ;
5614: LD_ADDR_EXP 60
5618: PUSH
5619: LD_INT 0
5621: ST_TO_ADDR
// sEarthquake := false ;
5622: LD_ADDR_EXP 62
5626: PUSH
5627: LD_INT 0
5629: ST_TO_ADDR
// sAI := false ;
5630: LD_ADDR_EXP 63
5634: PUSH
5635: LD_INT 0
5637: ST_TO_ADDR
// sCargo := false ;
5638: LD_ADDR_EXP 66
5642: PUSH
5643: LD_INT 0
5645: ST_TO_ADDR
// sDLaser := false ;
5646: LD_ADDR_EXP 67
5650: PUSH
5651: LD_INT 0
5653: ST_TO_ADDR
// sExchange := false ;
5654: LD_ADDR_EXP 68
5658: PUSH
5659: LD_INT 0
5661: ST_TO_ADDR
// sFac := false ;
5662: LD_ADDR_EXP 69
5666: PUSH
5667: LD_INT 0
5669: ST_TO_ADDR
// sPower := false ;
5670: LD_ADDR_EXP 70
5674: PUSH
5675: LD_INT 0
5677: ST_TO_ADDR
// sRandom := false ;
5678: LD_ADDR_EXP 71
5682: PUSH
5683: LD_INT 0
5685: ST_TO_ADDR
// sShield := false ;
5686: LD_ADDR_EXP 72
5690: PUSH
5691: LD_INT 0
5693: ST_TO_ADDR
// sTime := false ;
5694: LD_ADDR_EXP 73
5698: PUSH
5699: LD_INT 0
5701: ST_TO_ADDR
// sTools := false ;
5702: LD_ADDR_EXP 74
5706: PUSH
5707: LD_INT 0
5709: ST_TO_ADDR
// sSold := false ;
5710: LD_ADDR_EXP 39
5714: PUSH
5715: LD_INT 0
5717: ST_TO_ADDR
// sDiff := false ;
5718: LD_ADDR_EXP 40
5722: PUSH
5723: LD_INT 0
5725: ST_TO_ADDR
// sFog := false ;
5726: LD_ADDR_EXP 43
5730: PUSH
5731: LD_INT 0
5733: ST_TO_ADDR
// sReset := false ;
5734: LD_ADDR_EXP 44
5738: PUSH
5739: LD_INT 0
5741: ST_TO_ADDR
// sSun := false ;
5742: LD_ADDR_EXP 45
5746: PUSH
5747: LD_INT 0
5749: ST_TO_ADDR
// sTiger := false ;
5750: LD_ADDR_EXP 41
5754: PUSH
5755: LD_INT 0
5757: ST_TO_ADDR
// sBomb := false ;
5758: LD_ADDR_EXP 42
5762: PUSH
5763: LD_INT 0
5765: ST_TO_ADDR
// sWound := false ;
5766: LD_ADDR_EXP 50
5770: PUSH
5771: LD_INT 0
5773: ST_TO_ADDR
// sBetray := false ;
5774: LD_ADDR_EXP 54
5778: PUSH
5779: LD_INT 0
5781: ST_TO_ADDR
// sContamin := false ;
5782: LD_ADDR_EXP 55
5786: PUSH
5787: LD_INT 0
5789: ST_TO_ADDR
// sOil := false ;
5790: LD_ADDR_EXP 57
5794: PUSH
5795: LD_INT 0
5797: ST_TO_ADDR
// sStu := false ;
5798: LD_ADDR_EXP 61
5802: PUSH
5803: LD_INT 0
5805: ST_TO_ADDR
// sBazooka := false ;
5806: LD_ADDR_EXP 64
5810: PUSH
5811: LD_INT 0
5813: ST_TO_ADDR
// sMortar := false ;
5814: LD_ADDR_EXP 65
5818: PUSH
5819: LD_INT 0
5821: ST_TO_ADDR
// sRanger := false ;
5822: LD_ADDR_EXP 75
5826: PUSH
5827: LD_INT 0
5829: ST_TO_ADDR
// end ;
5830: LD_VAR 0 1
5834: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
// result := [ ] ;
5842: LD_ADDR_VAR 0 1
5846: PUSH
5847: EMPTY
5848: ST_TO_ADDR
// if campaign_id = 1 then
5849: LD_OWVAR 69
5853: PUSH
5854: LD_INT 1
5856: EQUAL
5857: IFFALSE 8795
// begin case mission_number of 1 :
5859: LD_OWVAR 70
5863: PUSH
5864: LD_INT 1
5866: DOUBLE
5867: EQUAL
5868: IFTRUE 5872
5870: GO 5936
5872: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5873: LD_ADDR_VAR 0 1
5877: PUSH
5878: LD_INT 2
5880: PUSH
5881: LD_INT 4
5883: PUSH
5884: LD_INT 11
5886: PUSH
5887: LD_INT 12
5889: PUSH
5890: LD_INT 15
5892: PUSH
5893: LD_INT 16
5895: PUSH
5896: LD_INT 22
5898: PUSH
5899: LD_INT 23
5901: PUSH
5902: LD_INT 26
5904: PUSH
5905: EMPTY
5906: LIST
5907: LIST
5908: LIST
5909: LIST
5910: LIST
5911: LIST
5912: LIST
5913: LIST
5914: LIST
5915: PUSH
5916: LD_INT 101
5918: PUSH
5919: LD_INT 102
5921: PUSH
5922: LD_INT 106
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: LIST
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: ST_TO_ADDR
5934: GO 8793
5936: LD_INT 2
5938: DOUBLE
5939: EQUAL
5940: IFTRUE 5944
5942: GO 6016
5944: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5945: LD_ADDR_VAR 0 1
5949: PUSH
5950: LD_INT 2
5952: PUSH
5953: LD_INT 4
5955: PUSH
5956: LD_INT 11
5958: PUSH
5959: LD_INT 12
5961: PUSH
5962: LD_INT 15
5964: PUSH
5965: LD_INT 16
5967: PUSH
5968: LD_INT 22
5970: PUSH
5971: LD_INT 23
5973: PUSH
5974: LD_INT 26
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 101
5990: PUSH
5991: LD_INT 102
5993: PUSH
5994: LD_INT 105
5996: PUSH
5997: LD_INT 106
5999: PUSH
6000: LD_INT 108
6002: PUSH
6003: EMPTY
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: ST_TO_ADDR
6014: GO 8793
6016: LD_INT 3
6018: DOUBLE
6019: EQUAL
6020: IFTRUE 6024
6022: GO 6100
6024: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6025: LD_ADDR_VAR 0 1
6029: PUSH
6030: LD_INT 2
6032: PUSH
6033: LD_INT 4
6035: PUSH
6036: LD_INT 5
6038: PUSH
6039: LD_INT 11
6041: PUSH
6042: LD_INT 12
6044: PUSH
6045: LD_INT 15
6047: PUSH
6048: LD_INT 16
6050: PUSH
6051: LD_INT 22
6053: PUSH
6054: LD_INT 26
6056: PUSH
6057: LD_INT 36
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: PUSH
6072: LD_INT 101
6074: PUSH
6075: LD_INT 102
6077: PUSH
6078: LD_INT 105
6080: PUSH
6081: LD_INT 106
6083: PUSH
6084: LD_INT 108
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: ST_TO_ADDR
6098: GO 8793
6100: LD_INT 4
6102: DOUBLE
6103: EQUAL
6104: IFTRUE 6108
6106: GO 6192
6108: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6109: LD_ADDR_VAR 0 1
6113: PUSH
6114: LD_INT 2
6116: PUSH
6117: LD_INT 4
6119: PUSH
6120: LD_INT 5
6122: PUSH
6123: LD_INT 8
6125: PUSH
6126: LD_INT 11
6128: PUSH
6129: LD_INT 12
6131: PUSH
6132: LD_INT 15
6134: PUSH
6135: LD_INT 16
6137: PUSH
6138: LD_INT 22
6140: PUSH
6141: LD_INT 23
6143: PUSH
6144: LD_INT 26
6146: PUSH
6147: LD_INT 36
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 101
6166: PUSH
6167: LD_INT 102
6169: PUSH
6170: LD_INT 105
6172: PUSH
6173: LD_INT 106
6175: PUSH
6176: LD_INT 108
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: ST_TO_ADDR
6190: GO 8793
6192: LD_INT 5
6194: DOUBLE
6195: EQUAL
6196: IFTRUE 6200
6198: GO 6300
6200: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6201: LD_ADDR_VAR 0 1
6205: PUSH
6206: LD_INT 2
6208: PUSH
6209: LD_INT 4
6211: PUSH
6212: LD_INT 5
6214: PUSH
6215: LD_INT 6
6217: PUSH
6218: LD_INT 8
6220: PUSH
6221: LD_INT 11
6223: PUSH
6224: LD_INT 12
6226: PUSH
6227: LD_INT 15
6229: PUSH
6230: LD_INT 16
6232: PUSH
6233: LD_INT 22
6235: PUSH
6236: LD_INT 23
6238: PUSH
6239: LD_INT 25
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_INT 36
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: PUSH
6264: LD_INT 101
6266: PUSH
6267: LD_INT 102
6269: PUSH
6270: LD_INT 105
6272: PUSH
6273: LD_INT 106
6275: PUSH
6276: LD_INT 108
6278: PUSH
6279: LD_INT 109
6281: PUSH
6282: LD_INT 112
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: ST_TO_ADDR
6298: GO 8793
6300: LD_INT 6
6302: DOUBLE
6303: EQUAL
6304: IFTRUE 6308
6306: GO 6428
6308: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6309: LD_ADDR_VAR 0 1
6313: PUSH
6314: LD_INT 2
6316: PUSH
6317: LD_INT 4
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: LD_INT 6
6325: PUSH
6326: LD_INT 8
6328: PUSH
6329: LD_INT 11
6331: PUSH
6332: LD_INT 12
6334: PUSH
6335: LD_INT 15
6337: PUSH
6338: LD_INT 16
6340: PUSH
6341: LD_INT 20
6343: PUSH
6344: LD_INT 21
6346: PUSH
6347: LD_INT 22
6349: PUSH
6350: LD_INT 23
6352: PUSH
6353: LD_INT 25
6355: PUSH
6356: LD_INT 26
6358: PUSH
6359: LD_INT 30
6361: PUSH
6362: LD_INT 31
6364: PUSH
6365: LD_INT 32
6367: PUSH
6368: LD_INT 36
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 101
6394: PUSH
6395: LD_INT 102
6397: PUSH
6398: LD_INT 105
6400: PUSH
6401: LD_INT 106
6403: PUSH
6404: LD_INT 108
6406: PUSH
6407: LD_INT 109
6409: PUSH
6410: LD_INT 112
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: ST_TO_ADDR
6426: GO 8793
6428: LD_INT 7
6430: DOUBLE
6431: EQUAL
6432: IFTRUE 6436
6434: GO 6536
6436: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6437: LD_ADDR_VAR 0 1
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 4
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: LD_INT 7
6453: PUSH
6454: LD_INT 11
6456: PUSH
6457: LD_INT 12
6459: PUSH
6460: LD_INT 15
6462: PUSH
6463: LD_INT 16
6465: PUSH
6466: LD_INT 20
6468: PUSH
6469: LD_INT 21
6471: PUSH
6472: LD_INT 22
6474: PUSH
6475: LD_INT 23
6477: PUSH
6478: LD_INT 25
6480: PUSH
6481: LD_INT 26
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 101
6502: PUSH
6503: LD_INT 102
6505: PUSH
6506: LD_INT 103
6508: PUSH
6509: LD_INT 105
6511: PUSH
6512: LD_INT 106
6514: PUSH
6515: LD_INT 108
6517: PUSH
6518: LD_INT 112
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: ST_TO_ADDR
6534: GO 8793
6536: LD_INT 8
6538: DOUBLE
6539: EQUAL
6540: IFTRUE 6544
6542: GO 6672
6544: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6545: LD_ADDR_VAR 0 1
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: LD_INT 6
6561: PUSH
6562: LD_INT 7
6564: PUSH
6565: LD_INT 8
6567: PUSH
6568: LD_INT 11
6570: PUSH
6571: LD_INT 12
6573: PUSH
6574: LD_INT 15
6576: PUSH
6577: LD_INT 16
6579: PUSH
6580: LD_INT 20
6582: PUSH
6583: LD_INT 21
6585: PUSH
6586: LD_INT 22
6588: PUSH
6589: LD_INT 23
6591: PUSH
6592: LD_INT 25
6594: PUSH
6595: LD_INT 26
6597: PUSH
6598: LD_INT 30
6600: PUSH
6601: LD_INT 31
6603: PUSH
6604: LD_INT 32
6606: PUSH
6607: LD_INT 36
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 101
6634: PUSH
6635: LD_INT 102
6637: PUSH
6638: LD_INT 103
6640: PUSH
6641: LD_INT 105
6643: PUSH
6644: LD_INT 106
6646: PUSH
6647: LD_INT 108
6649: PUSH
6650: LD_INT 109
6652: PUSH
6653: LD_INT 112
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: ST_TO_ADDR
6670: GO 8793
6672: LD_INT 9
6674: DOUBLE
6675: EQUAL
6676: IFTRUE 6680
6678: GO 6816
6680: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6681: LD_ADDR_VAR 0 1
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: LD_INT 4
6691: PUSH
6692: LD_INT 5
6694: PUSH
6695: LD_INT 6
6697: PUSH
6698: LD_INT 7
6700: PUSH
6701: LD_INT 8
6703: PUSH
6704: LD_INT 11
6706: PUSH
6707: LD_INT 12
6709: PUSH
6710: LD_INT 15
6712: PUSH
6713: LD_INT 16
6715: PUSH
6716: LD_INT 20
6718: PUSH
6719: LD_INT 21
6721: PUSH
6722: LD_INT 22
6724: PUSH
6725: LD_INT 23
6727: PUSH
6728: LD_INT 25
6730: PUSH
6731: LD_INT 26
6733: PUSH
6734: LD_INT 28
6736: PUSH
6737: LD_INT 30
6739: PUSH
6740: LD_INT 31
6742: PUSH
6743: LD_INT 32
6745: PUSH
6746: LD_INT 36
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 101
6774: PUSH
6775: LD_INT 102
6777: PUSH
6778: LD_INT 103
6780: PUSH
6781: LD_INT 105
6783: PUSH
6784: LD_INT 106
6786: PUSH
6787: LD_INT 108
6789: PUSH
6790: LD_INT 109
6792: PUSH
6793: LD_INT 112
6795: PUSH
6796: LD_INT 114
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: ST_TO_ADDR
6814: GO 8793
6816: LD_INT 10
6818: DOUBLE
6819: EQUAL
6820: IFTRUE 6824
6822: GO 7008
6824: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6825: LD_ADDR_VAR 0 1
6829: PUSH
6830: LD_INT 2
6832: PUSH
6833: LD_INT 4
6835: PUSH
6836: LD_INT 5
6838: PUSH
6839: LD_INT 6
6841: PUSH
6842: LD_INT 7
6844: PUSH
6845: LD_INT 8
6847: PUSH
6848: LD_INT 9
6850: PUSH
6851: LD_INT 10
6853: PUSH
6854: LD_INT 11
6856: PUSH
6857: LD_INT 12
6859: PUSH
6860: LD_INT 13
6862: PUSH
6863: LD_INT 14
6865: PUSH
6866: LD_INT 15
6868: PUSH
6869: LD_INT 16
6871: PUSH
6872: LD_INT 17
6874: PUSH
6875: LD_INT 18
6877: PUSH
6878: LD_INT 19
6880: PUSH
6881: LD_INT 20
6883: PUSH
6884: LD_INT 21
6886: PUSH
6887: LD_INT 22
6889: PUSH
6890: LD_INT 23
6892: PUSH
6893: LD_INT 24
6895: PUSH
6896: LD_INT 25
6898: PUSH
6899: LD_INT 26
6901: PUSH
6902: LD_INT 28
6904: PUSH
6905: LD_INT 30
6907: PUSH
6908: LD_INT 31
6910: PUSH
6911: LD_INT 32
6913: PUSH
6914: LD_INT 36
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 101
6950: PUSH
6951: LD_INT 102
6953: PUSH
6954: LD_INT 103
6956: PUSH
6957: LD_INT 104
6959: PUSH
6960: LD_INT 105
6962: PUSH
6963: LD_INT 106
6965: PUSH
6966: LD_INT 107
6968: PUSH
6969: LD_INT 108
6971: PUSH
6972: LD_INT 109
6974: PUSH
6975: LD_INT 110
6977: PUSH
6978: LD_INT 111
6980: PUSH
6981: LD_INT 112
6983: PUSH
6984: LD_INT 114
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: ST_TO_ADDR
7006: GO 8793
7008: LD_INT 11
7010: DOUBLE
7011: EQUAL
7012: IFTRUE 7016
7014: GO 7208
7016: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7017: LD_ADDR_VAR 0 1
7021: PUSH
7022: LD_INT 2
7024: PUSH
7025: LD_INT 3
7027: PUSH
7028: LD_INT 4
7030: PUSH
7031: LD_INT 5
7033: PUSH
7034: LD_INT 6
7036: PUSH
7037: LD_INT 7
7039: PUSH
7040: LD_INT 8
7042: PUSH
7043: LD_INT 9
7045: PUSH
7046: LD_INT 10
7048: PUSH
7049: LD_INT 11
7051: PUSH
7052: LD_INT 12
7054: PUSH
7055: LD_INT 13
7057: PUSH
7058: LD_INT 14
7060: PUSH
7061: LD_INT 15
7063: PUSH
7064: LD_INT 16
7066: PUSH
7067: LD_INT 17
7069: PUSH
7070: LD_INT 18
7072: PUSH
7073: LD_INT 19
7075: PUSH
7076: LD_INT 20
7078: PUSH
7079: LD_INT 21
7081: PUSH
7082: LD_INT 22
7084: PUSH
7085: LD_INT 23
7087: PUSH
7088: LD_INT 24
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 26
7096: PUSH
7097: LD_INT 28
7099: PUSH
7100: LD_INT 30
7102: PUSH
7103: LD_INT 31
7105: PUSH
7106: LD_INT 32
7108: PUSH
7109: LD_INT 34
7111: PUSH
7112: LD_INT 36
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 101
7150: PUSH
7151: LD_INT 102
7153: PUSH
7154: LD_INT 103
7156: PUSH
7157: LD_INT 104
7159: PUSH
7160: LD_INT 105
7162: PUSH
7163: LD_INT 106
7165: PUSH
7166: LD_INT 107
7168: PUSH
7169: LD_INT 108
7171: PUSH
7172: LD_INT 109
7174: PUSH
7175: LD_INT 110
7177: PUSH
7178: LD_INT 111
7180: PUSH
7181: LD_INT 112
7183: PUSH
7184: LD_INT 114
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: ST_TO_ADDR
7206: GO 8793
7208: LD_INT 12
7210: DOUBLE
7211: EQUAL
7212: IFTRUE 7216
7214: GO 7424
7216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7217: LD_ADDR_VAR 0 1
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: LD_INT 2
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: LD_INT 4
7233: PUSH
7234: LD_INT 5
7236: PUSH
7237: LD_INT 6
7239: PUSH
7240: LD_INT 7
7242: PUSH
7243: LD_INT 8
7245: PUSH
7246: LD_INT 9
7248: PUSH
7249: LD_INT 10
7251: PUSH
7252: LD_INT 11
7254: PUSH
7255: LD_INT 12
7257: PUSH
7258: LD_INT 13
7260: PUSH
7261: LD_INT 14
7263: PUSH
7264: LD_INT 15
7266: PUSH
7267: LD_INT 16
7269: PUSH
7270: LD_INT 17
7272: PUSH
7273: LD_INT 18
7275: PUSH
7276: LD_INT 19
7278: PUSH
7279: LD_INT 20
7281: PUSH
7282: LD_INT 21
7284: PUSH
7285: LD_INT 22
7287: PUSH
7288: LD_INT 23
7290: PUSH
7291: LD_INT 24
7293: PUSH
7294: LD_INT 25
7296: PUSH
7297: LD_INT 26
7299: PUSH
7300: LD_INT 27
7302: PUSH
7303: LD_INT 28
7305: PUSH
7306: LD_INT 30
7308: PUSH
7309: LD_INT 31
7311: PUSH
7312: LD_INT 32
7314: PUSH
7315: LD_INT 33
7317: PUSH
7318: LD_INT 34
7320: PUSH
7321: LD_INT 36
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: LIST
7334: LIST
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: PUSH
7360: LD_INT 101
7362: PUSH
7363: LD_INT 102
7365: PUSH
7366: LD_INT 103
7368: PUSH
7369: LD_INT 104
7371: PUSH
7372: LD_INT 105
7374: PUSH
7375: LD_INT 106
7377: PUSH
7378: LD_INT 107
7380: PUSH
7381: LD_INT 108
7383: PUSH
7384: LD_INT 109
7386: PUSH
7387: LD_INT 110
7389: PUSH
7390: LD_INT 111
7392: PUSH
7393: LD_INT 112
7395: PUSH
7396: LD_INT 113
7398: PUSH
7399: LD_INT 114
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: ST_TO_ADDR
7422: GO 8793
7424: LD_INT 13
7426: DOUBLE
7427: EQUAL
7428: IFTRUE 7432
7430: GO 7628
7432: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7433: LD_ADDR_VAR 0 1
7437: PUSH
7438: LD_INT 1
7440: PUSH
7441: LD_INT 2
7443: PUSH
7444: LD_INT 3
7446: PUSH
7447: LD_INT 4
7449: PUSH
7450: LD_INT 5
7452: PUSH
7453: LD_INT 8
7455: PUSH
7456: LD_INT 9
7458: PUSH
7459: LD_INT 10
7461: PUSH
7462: LD_INT 11
7464: PUSH
7465: LD_INT 12
7467: PUSH
7468: LD_INT 14
7470: PUSH
7471: LD_INT 15
7473: PUSH
7474: LD_INT 16
7476: PUSH
7477: LD_INT 17
7479: PUSH
7480: LD_INT 18
7482: PUSH
7483: LD_INT 19
7485: PUSH
7486: LD_INT 20
7488: PUSH
7489: LD_INT 21
7491: PUSH
7492: LD_INT 22
7494: PUSH
7495: LD_INT 23
7497: PUSH
7498: LD_INT 24
7500: PUSH
7501: LD_INT 25
7503: PUSH
7504: LD_INT 26
7506: PUSH
7507: LD_INT 27
7509: PUSH
7510: LD_INT 28
7512: PUSH
7513: LD_INT 30
7515: PUSH
7516: LD_INT 31
7518: PUSH
7519: LD_INT 32
7521: PUSH
7522: LD_INT 33
7524: PUSH
7525: LD_INT 34
7527: PUSH
7528: LD_INT 36
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: LIST
7560: LIST
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 101
7566: PUSH
7567: LD_INT 102
7569: PUSH
7570: LD_INT 103
7572: PUSH
7573: LD_INT 104
7575: PUSH
7576: LD_INT 105
7578: PUSH
7579: LD_INT 106
7581: PUSH
7582: LD_INT 107
7584: PUSH
7585: LD_INT 108
7587: PUSH
7588: LD_INT 109
7590: PUSH
7591: LD_INT 110
7593: PUSH
7594: LD_INT 111
7596: PUSH
7597: LD_INT 112
7599: PUSH
7600: LD_INT 113
7602: PUSH
7603: LD_INT 114
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: ST_TO_ADDR
7626: GO 8793
7628: LD_INT 14
7630: DOUBLE
7631: EQUAL
7632: IFTRUE 7636
7634: GO 7848
7636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7637: LD_ADDR_VAR 0 1
7641: PUSH
7642: LD_INT 1
7644: PUSH
7645: LD_INT 2
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: LD_INT 5
7656: PUSH
7657: LD_INT 6
7659: PUSH
7660: LD_INT 7
7662: PUSH
7663: LD_INT 8
7665: PUSH
7666: LD_INT 9
7668: PUSH
7669: LD_INT 10
7671: PUSH
7672: LD_INT 11
7674: PUSH
7675: LD_INT 12
7677: PUSH
7678: LD_INT 13
7680: PUSH
7681: LD_INT 14
7683: PUSH
7684: LD_INT 15
7686: PUSH
7687: LD_INT 16
7689: PUSH
7690: LD_INT 17
7692: PUSH
7693: LD_INT 18
7695: PUSH
7696: LD_INT 19
7698: PUSH
7699: LD_INT 20
7701: PUSH
7702: LD_INT 21
7704: PUSH
7705: LD_INT 22
7707: PUSH
7708: LD_INT 23
7710: PUSH
7711: LD_INT 24
7713: PUSH
7714: LD_INT 25
7716: PUSH
7717: LD_INT 26
7719: PUSH
7720: LD_INT 27
7722: PUSH
7723: LD_INT 28
7725: PUSH
7726: LD_INT 29
7728: PUSH
7729: LD_INT 30
7731: PUSH
7732: LD_INT 31
7734: PUSH
7735: LD_INT 32
7737: PUSH
7738: LD_INT 33
7740: PUSH
7741: LD_INT 34
7743: PUSH
7744: LD_INT 36
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: LIST
7775: LIST
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: LD_INT 101
7786: PUSH
7787: LD_INT 102
7789: PUSH
7790: LD_INT 103
7792: PUSH
7793: LD_INT 104
7795: PUSH
7796: LD_INT 105
7798: PUSH
7799: LD_INT 106
7801: PUSH
7802: LD_INT 107
7804: PUSH
7805: LD_INT 108
7807: PUSH
7808: LD_INT 109
7810: PUSH
7811: LD_INT 110
7813: PUSH
7814: LD_INT 111
7816: PUSH
7817: LD_INT 112
7819: PUSH
7820: LD_INT 113
7822: PUSH
7823: LD_INT 114
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: ST_TO_ADDR
7846: GO 8793
7848: LD_INT 15
7850: DOUBLE
7851: EQUAL
7852: IFTRUE 7856
7854: GO 8068
7856: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7857: LD_ADDR_VAR 0 1
7861: PUSH
7862: LD_INT 1
7864: PUSH
7865: LD_INT 2
7867: PUSH
7868: LD_INT 3
7870: PUSH
7871: LD_INT 4
7873: PUSH
7874: LD_INT 5
7876: PUSH
7877: LD_INT 6
7879: PUSH
7880: LD_INT 7
7882: PUSH
7883: LD_INT 8
7885: PUSH
7886: LD_INT 9
7888: PUSH
7889: LD_INT 10
7891: PUSH
7892: LD_INT 11
7894: PUSH
7895: LD_INT 12
7897: PUSH
7898: LD_INT 13
7900: PUSH
7901: LD_INT 14
7903: PUSH
7904: LD_INT 15
7906: PUSH
7907: LD_INT 16
7909: PUSH
7910: LD_INT 17
7912: PUSH
7913: LD_INT 18
7915: PUSH
7916: LD_INT 19
7918: PUSH
7919: LD_INT 20
7921: PUSH
7922: LD_INT 21
7924: PUSH
7925: LD_INT 22
7927: PUSH
7928: LD_INT 23
7930: PUSH
7931: LD_INT 24
7933: PUSH
7934: LD_INT 25
7936: PUSH
7937: LD_INT 26
7939: PUSH
7940: LD_INT 27
7942: PUSH
7943: LD_INT 28
7945: PUSH
7946: LD_INT 29
7948: PUSH
7949: LD_INT 30
7951: PUSH
7952: LD_INT 31
7954: PUSH
7955: LD_INT 32
7957: PUSH
7958: LD_INT 33
7960: PUSH
7961: LD_INT 34
7963: PUSH
7964: LD_INT 36
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: LD_INT 101
8006: PUSH
8007: LD_INT 102
8009: PUSH
8010: LD_INT 103
8012: PUSH
8013: LD_INT 104
8015: PUSH
8016: LD_INT 105
8018: PUSH
8019: LD_INT 106
8021: PUSH
8022: LD_INT 107
8024: PUSH
8025: LD_INT 108
8027: PUSH
8028: LD_INT 109
8030: PUSH
8031: LD_INT 110
8033: PUSH
8034: LD_INT 111
8036: PUSH
8037: LD_INT 112
8039: PUSH
8040: LD_INT 113
8042: PUSH
8043: LD_INT 114
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: ST_TO_ADDR
8066: GO 8793
8068: LD_INT 16
8070: DOUBLE
8071: EQUAL
8072: IFTRUE 8076
8074: GO 8200
8076: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8077: LD_ADDR_VAR 0 1
8081: PUSH
8082: LD_INT 2
8084: PUSH
8085: LD_INT 4
8087: PUSH
8088: LD_INT 5
8090: PUSH
8091: LD_INT 7
8093: PUSH
8094: LD_INT 11
8096: PUSH
8097: LD_INT 12
8099: PUSH
8100: LD_INT 15
8102: PUSH
8103: LD_INT 16
8105: PUSH
8106: LD_INT 20
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 22
8114: PUSH
8115: LD_INT 23
8117: PUSH
8118: LD_INT 25
8120: PUSH
8121: LD_INT 26
8123: PUSH
8124: LD_INT 30
8126: PUSH
8127: LD_INT 31
8129: PUSH
8130: LD_INT 32
8132: PUSH
8133: LD_INT 33
8135: PUSH
8136: LD_INT 34
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 101
8162: PUSH
8163: LD_INT 102
8165: PUSH
8166: LD_INT 103
8168: PUSH
8169: LD_INT 106
8171: PUSH
8172: LD_INT 108
8174: PUSH
8175: LD_INT 112
8177: PUSH
8178: LD_INT 113
8180: PUSH
8181: LD_INT 114
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: ST_TO_ADDR
8198: GO 8793
8200: LD_INT 17
8202: DOUBLE
8203: EQUAL
8204: IFTRUE 8208
8206: GO 8420
8208: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8209: LD_ADDR_VAR 0 1
8213: PUSH
8214: LD_INT 1
8216: PUSH
8217: LD_INT 2
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: LD_INT 4
8225: PUSH
8226: LD_INT 5
8228: PUSH
8229: LD_INT 6
8231: PUSH
8232: LD_INT 7
8234: PUSH
8235: LD_INT 8
8237: PUSH
8238: LD_INT 9
8240: PUSH
8241: LD_INT 10
8243: PUSH
8244: LD_INT 11
8246: PUSH
8247: LD_INT 12
8249: PUSH
8250: LD_INT 13
8252: PUSH
8253: LD_INT 14
8255: PUSH
8256: LD_INT 15
8258: PUSH
8259: LD_INT 16
8261: PUSH
8262: LD_INT 17
8264: PUSH
8265: LD_INT 18
8267: PUSH
8268: LD_INT 19
8270: PUSH
8271: LD_INT 20
8273: PUSH
8274: LD_INT 21
8276: PUSH
8277: LD_INT 22
8279: PUSH
8280: LD_INT 23
8282: PUSH
8283: LD_INT 24
8285: PUSH
8286: LD_INT 25
8288: PUSH
8289: LD_INT 26
8291: PUSH
8292: LD_INT 27
8294: PUSH
8295: LD_INT 28
8297: PUSH
8298: LD_INT 29
8300: PUSH
8301: LD_INT 30
8303: PUSH
8304: LD_INT 31
8306: PUSH
8307: LD_INT 32
8309: PUSH
8310: LD_INT 33
8312: PUSH
8313: LD_INT 34
8315: PUSH
8316: LD_INT 36
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 101
8358: PUSH
8359: LD_INT 102
8361: PUSH
8362: LD_INT 103
8364: PUSH
8365: LD_INT 104
8367: PUSH
8368: LD_INT 105
8370: PUSH
8371: LD_INT 106
8373: PUSH
8374: LD_INT 107
8376: PUSH
8377: LD_INT 108
8379: PUSH
8380: LD_INT 109
8382: PUSH
8383: LD_INT 110
8385: PUSH
8386: LD_INT 111
8388: PUSH
8389: LD_INT 112
8391: PUSH
8392: LD_INT 113
8394: PUSH
8395: LD_INT 114
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: ST_TO_ADDR
8418: GO 8793
8420: LD_INT 18
8422: DOUBLE
8423: EQUAL
8424: IFTRUE 8428
8426: GO 8564
8428: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8429: LD_ADDR_VAR 0 1
8433: PUSH
8434: LD_INT 2
8436: PUSH
8437: LD_INT 4
8439: PUSH
8440: LD_INT 5
8442: PUSH
8443: LD_INT 7
8445: PUSH
8446: LD_INT 11
8448: PUSH
8449: LD_INT 12
8451: PUSH
8452: LD_INT 15
8454: PUSH
8455: LD_INT 16
8457: PUSH
8458: LD_INT 20
8460: PUSH
8461: LD_INT 21
8463: PUSH
8464: LD_INT 22
8466: PUSH
8467: LD_INT 23
8469: PUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 26
8475: PUSH
8476: LD_INT 30
8478: PUSH
8479: LD_INT 31
8481: PUSH
8482: LD_INT 32
8484: PUSH
8485: LD_INT 33
8487: PUSH
8488: LD_INT 34
8490: PUSH
8491: LD_INT 35
8493: PUSH
8494: LD_INT 36
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 101
8522: PUSH
8523: LD_INT 102
8525: PUSH
8526: LD_INT 103
8528: PUSH
8529: LD_INT 106
8531: PUSH
8532: LD_INT 108
8534: PUSH
8535: LD_INT 112
8537: PUSH
8538: LD_INT 113
8540: PUSH
8541: LD_INT 114
8543: PUSH
8544: LD_INT 115
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: ST_TO_ADDR
8562: GO 8793
8564: LD_INT 19
8566: DOUBLE
8567: EQUAL
8568: IFTRUE 8572
8570: GO 8792
8572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8573: LD_ADDR_VAR 0 1
8577: PUSH
8578: LD_INT 1
8580: PUSH
8581: LD_INT 2
8583: PUSH
8584: LD_INT 3
8586: PUSH
8587: LD_INT 4
8589: PUSH
8590: LD_INT 5
8592: PUSH
8593: LD_INT 6
8595: PUSH
8596: LD_INT 7
8598: PUSH
8599: LD_INT 8
8601: PUSH
8602: LD_INT 9
8604: PUSH
8605: LD_INT 10
8607: PUSH
8608: LD_INT 11
8610: PUSH
8611: LD_INT 12
8613: PUSH
8614: LD_INT 13
8616: PUSH
8617: LD_INT 14
8619: PUSH
8620: LD_INT 15
8622: PUSH
8623: LD_INT 16
8625: PUSH
8626: LD_INT 17
8628: PUSH
8629: LD_INT 18
8631: PUSH
8632: LD_INT 19
8634: PUSH
8635: LD_INT 20
8637: PUSH
8638: LD_INT 21
8640: PUSH
8641: LD_INT 22
8643: PUSH
8644: LD_INT 23
8646: PUSH
8647: LD_INT 24
8649: PUSH
8650: LD_INT 25
8652: PUSH
8653: LD_INT 26
8655: PUSH
8656: LD_INT 27
8658: PUSH
8659: LD_INT 28
8661: PUSH
8662: LD_INT 29
8664: PUSH
8665: LD_INT 30
8667: PUSH
8668: LD_INT 31
8670: PUSH
8671: LD_INT 32
8673: PUSH
8674: LD_INT 33
8676: PUSH
8677: LD_INT 34
8679: PUSH
8680: LD_INT 35
8682: PUSH
8683: LD_INT 36
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 101
8726: PUSH
8727: LD_INT 102
8729: PUSH
8730: LD_INT 103
8732: PUSH
8733: LD_INT 104
8735: PUSH
8736: LD_INT 105
8738: PUSH
8739: LD_INT 106
8741: PUSH
8742: LD_INT 107
8744: PUSH
8745: LD_INT 108
8747: PUSH
8748: LD_INT 109
8750: PUSH
8751: LD_INT 110
8753: PUSH
8754: LD_INT 111
8756: PUSH
8757: LD_INT 112
8759: PUSH
8760: LD_INT 113
8762: PUSH
8763: LD_INT 114
8765: PUSH
8766: LD_INT 115
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: ST_TO_ADDR
8790: GO 8793
8792: POP
// end else
8793: GO 9012
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8795: LD_ADDR_VAR 0 1
8799: PUSH
8800: LD_INT 1
8802: PUSH
8803: LD_INT 2
8805: PUSH
8806: LD_INT 3
8808: PUSH
8809: LD_INT 4
8811: PUSH
8812: LD_INT 5
8814: PUSH
8815: LD_INT 6
8817: PUSH
8818: LD_INT 7
8820: PUSH
8821: LD_INT 8
8823: PUSH
8824: LD_INT 9
8826: PUSH
8827: LD_INT 10
8829: PUSH
8830: LD_INT 11
8832: PUSH
8833: LD_INT 12
8835: PUSH
8836: LD_INT 13
8838: PUSH
8839: LD_INT 14
8841: PUSH
8842: LD_INT 15
8844: PUSH
8845: LD_INT 16
8847: PUSH
8848: LD_INT 17
8850: PUSH
8851: LD_INT 18
8853: PUSH
8854: LD_INT 19
8856: PUSH
8857: LD_INT 20
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 22
8865: PUSH
8866: LD_INT 23
8868: PUSH
8869: LD_INT 24
8871: PUSH
8872: LD_INT 25
8874: PUSH
8875: LD_INT 26
8877: PUSH
8878: LD_INT 27
8880: PUSH
8881: LD_INT 28
8883: PUSH
8884: LD_INT 29
8886: PUSH
8887: LD_INT 30
8889: PUSH
8890: LD_INT 31
8892: PUSH
8893: LD_INT 32
8895: PUSH
8896: LD_INT 33
8898: PUSH
8899: LD_INT 34
8901: PUSH
8902: LD_INT 35
8904: PUSH
8905: LD_INT 36
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: LIST
8925: LIST
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 101
8948: PUSH
8949: LD_INT 102
8951: PUSH
8952: LD_INT 103
8954: PUSH
8955: LD_INT 104
8957: PUSH
8958: LD_INT 105
8960: PUSH
8961: LD_INT 106
8963: PUSH
8964: LD_INT 107
8966: PUSH
8967: LD_INT 108
8969: PUSH
8970: LD_INT 109
8972: PUSH
8973: LD_INT 110
8975: PUSH
8976: LD_INT 111
8978: PUSH
8979: LD_INT 112
8981: PUSH
8982: LD_INT 113
8984: PUSH
8985: LD_INT 114
8987: PUSH
8988: LD_INT 115
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: ST_TO_ADDR
// if result then
9012: LD_VAR 0 1
9016: IFFALSE 9305
// begin normal :=  ;
9018: LD_ADDR_VAR 0 3
9022: PUSH
9023: LD_STRING 
9025: ST_TO_ADDR
// hardcore :=  ;
9026: LD_ADDR_VAR 0 4
9030: PUSH
9031: LD_STRING 
9033: ST_TO_ADDR
// for i = 1 to normalCounter do
9034: LD_ADDR_VAR 0 5
9038: PUSH
9039: DOUBLE
9040: LD_INT 1
9042: DEC
9043: ST_TO_ADDR
9044: LD_EXP 23
9048: PUSH
9049: FOR_TO
9050: IFFALSE 9151
// begin tmp := 0 ;
9052: LD_ADDR_VAR 0 2
9056: PUSH
9057: LD_STRING 0
9059: ST_TO_ADDR
// if result [ 1 ] then
9060: LD_VAR 0 1
9064: PUSH
9065: LD_INT 1
9067: ARRAY
9068: IFFALSE 9133
// if result [ 1 ] [ 1 ] = i then
9070: LD_VAR 0 1
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: PUSH
9079: LD_INT 1
9081: ARRAY
9082: PUSH
9083: LD_VAR 0 5
9087: EQUAL
9088: IFFALSE 9133
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9090: LD_ADDR_VAR 0 1
9094: PUSH
9095: LD_VAR 0 1
9099: PPUSH
9100: LD_INT 1
9102: PPUSH
9103: LD_VAR 0 1
9107: PUSH
9108: LD_INT 1
9110: ARRAY
9111: PPUSH
9112: LD_INT 1
9114: PPUSH
9115: CALL_OW 3
9119: PPUSH
9120: CALL_OW 1
9124: ST_TO_ADDR
// tmp := 1 ;
9125: LD_ADDR_VAR 0 2
9129: PUSH
9130: LD_STRING 1
9132: ST_TO_ADDR
// end ; normal := normal & tmp ;
9133: LD_ADDR_VAR 0 3
9137: PUSH
9138: LD_VAR 0 3
9142: PUSH
9143: LD_VAR 0 2
9147: STR
9148: ST_TO_ADDR
// end ;
9149: GO 9049
9151: POP
9152: POP
// for i = 1 to hardcoreCounter do
9153: LD_ADDR_VAR 0 5
9157: PUSH
9158: DOUBLE
9159: LD_INT 1
9161: DEC
9162: ST_TO_ADDR
9163: LD_EXP 24
9167: PUSH
9168: FOR_TO
9169: IFFALSE 9274
// begin tmp := 0 ;
9171: LD_ADDR_VAR 0 2
9175: PUSH
9176: LD_STRING 0
9178: ST_TO_ADDR
// if result [ 2 ] then
9179: LD_VAR 0 1
9183: PUSH
9184: LD_INT 2
9186: ARRAY
9187: IFFALSE 9256
// if result [ 2 ] [ 1 ] = 100 + i then
9189: LD_VAR 0 1
9193: PUSH
9194: LD_INT 2
9196: ARRAY
9197: PUSH
9198: LD_INT 1
9200: ARRAY
9201: PUSH
9202: LD_INT 100
9204: PUSH
9205: LD_VAR 0 5
9209: PLUS
9210: EQUAL
9211: IFFALSE 9256
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9213: LD_ADDR_VAR 0 1
9217: PUSH
9218: LD_VAR 0 1
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: LD_VAR 0 1
9230: PUSH
9231: LD_INT 2
9233: ARRAY
9234: PPUSH
9235: LD_INT 1
9237: PPUSH
9238: CALL_OW 3
9242: PPUSH
9243: CALL_OW 1
9247: ST_TO_ADDR
// tmp := 1 ;
9248: LD_ADDR_VAR 0 2
9252: PUSH
9253: LD_STRING 1
9255: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9256: LD_ADDR_VAR 0 4
9260: PUSH
9261: LD_VAR 0 4
9265: PUSH
9266: LD_VAR 0 2
9270: STR
9271: ST_TO_ADDR
// end ;
9272: GO 9168
9274: POP
9275: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9276: LD_STRING getStreamItemsFromMission("
9278: PUSH
9279: LD_VAR 0 3
9283: STR
9284: PUSH
9285: LD_STRING ","
9287: STR
9288: PUSH
9289: LD_VAR 0 4
9293: STR
9294: PUSH
9295: LD_STRING ")
9297: STR
9298: PPUSH
9299: CALL_OW 559
// end else
9303: GO 9312
// ToLua ( getStreamItemsFromMission("","") ) ;
9305: LD_STRING getStreamItemsFromMission("","")
9307: PPUSH
9308: CALL_OW 559
// end ;
9312: LD_VAR 0 1
9316: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9317: LD_EXP 22
9321: PUSH
9322: LD_EXP 27
9326: AND
9327: IFFALSE 9451
9329: GO 9331
9331: DISABLE
9332: LD_INT 0
9334: PPUSH
9335: PPUSH
// begin enable ;
9336: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9337: LD_ADDR_VAR 0 2
9341: PUSH
9342: LD_INT 22
9344: PUSH
9345: LD_OWVAR 2
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 2
9356: PUSH
9357: LD_INT 34
9359: PUSH
9360: LD_INT 7
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: PUSH
9367: LD_INT 34
9369: PUSH
9370: LD_INT 45
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: PUSH
9377: LD_INT 34
9379: PUSH
9380: LD_INT 28
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: PUSH
9387: LD_INT 34
9389: PUSH
9390: LD_INT 47
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: PPUSH
9408: CALL_OW 69
9412: ST_TO_ADDR
// if not tmp then
9413: LD_VAR 0 2
9417: NOT
9418: IFFALSE 9422
// exit ;
9420: GO 9451
// for i in tmp do
9422: LD_ADDR_VAR 0 1
9426: PUSH
9427: LD_VAR 0 2
9431: PUSH
9432: FOR_IN
9433: IFFALSE 9449
// begin SetLives ( i , 0 ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: LD_INT 0
9442: PPUSH
9443: CALL_OW 234
// end ;
9447: GO 9432
9449: POP
9450: POP
// end ;
9451: PPOPN 2
9453: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9454: LD_EXP 22
9458: PUSH
9459: LD_EXP 28
9463: AND
9464: IFFALSE 9548
9466: GO 9468
9468: DISABLE
9469: LD_INT 0
9471: PPUSH
9472: PPUSH
// begin enable ;
9473: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9474: LD_ADDR_VAR 0 2
9478: PUSH
9479: LD_INT 22
9481: PUSH
9482: LD_OWVAR 2
9486: PUSH
9487: EMPTY
9488: LIST
9489: LIST
9490: PUSH
9491: LD_INT 32
9493: PUSH
9494: LD_INT 3
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: PUSH
9501: EMPTY
9502: LIST
9503: LIST
9504: PPUSH
9505: CALL_OW 69
9509: ST_TO_ADDR
// if not tmp then
9510: LD_VAR 0 2
9514: NOT
9515: IFFALSE 9519
// exit ;
9517: GO 9548
// for i in tmp do
9519: LD_ADDR_VAR 0 1
9523: PUSH
9524: LD_VAR 0 2
9528: PUSH
9529: FOR_IN
9530: IFFALSE 9546
// begin SetLives ( i , 0 ) ;
9532: LD_VAR 0 1
9536: PPUSH
9537: LD_INT 0
9539: PPUSH
9540: CALL_OW 234
// end ;
9544: GO 9529
9546: POP
9547: POP
// end ;
9548: PPOPN 2
9550: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9551: LD_EXP 22
9555: PUSH
9556: LD_EXP 25
9560: AND
9561: IFFALSE 9654
9563: GO 9565
9565: DISABLE
9566: LD_INT 0
9568: PPUSH
// begin enable ;
9569: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9570: LD_ADDR_VAR 0 1
9574: PUSH
9575: LD_INT 22
9577: PUSH
9578: LD_OWVAR 2
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 2
9589: PUSH
9590: LD_INT 25
9592: PUSH
9593: LD_INT 5
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 25
9602: PUSH
9603: LD_INT 9
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 25
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: EMPTY
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: PUSH
9626: EMPTY
9627: LIST
9628: LIST
9629: PPUSH
9630: CALL_OW 69
9634: PUSH
9635: FOR_IN
9636: IFFALSE 9652
// begin SetClass ( i , 1 ) ;
9638: LD_VAR 0 1
9642: PPUSH
9643: LD_INT 1
9645: PPUSH
9646: CALL_OW 336
// end ;
9650: GO 9635
9652: POP
9653: POP
// end ;
9654: PPOPN 1
9656: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9657: LD_EXP 22
9661: PUSH
9662: LD_EXP 26
9666: AND
9667: PUSH
9668: LD_OWVAR 65
9672: PUSH
9673: LD_INT 7
9675: LESS
9676: AND
9677: IFFALSE 9691
9679: GO 9681
9681: DISABLE
// begin enable ;
9682: ENABLE
// game_speed := 7 ;
9683: LD_ADDR_OWVAR 65
9687: PUSH
9688: LD_INT 7
9690: ST_TO_ADDR
// end ;
9691: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9692: LD_EXP 22
9696: PUSH
9697: LD_EXP 29
9701: AND
9702: IFFALSE 9904
9704: GO 9706
9706: DISABLE
9707: LD_INT 0
9709: PPUSH
9710: PPUSH
9711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9712: LD_ADDR_VAR 0 3
9716: PUSH
9717: LD_INT 81
9719: PUSH
9720: LD_OWVAR 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 21
9731: PUSH
9732: LD_INT 1
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: PPUSH
9743: CALL_OW 69
9747: ST_TO_ADDR
// if not tmp then
9748: LD_VAR 0 3
9752: NOT
9753: IFFALSE 9757
// exit ;
9755: GO 9904
// if tmp > 5 then
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 5
9764: GREATER
9765: IFFALSE 9777
// k := 5 else
9767: LD_ADDR_VAR 0 2
9771: PUSH
9772: LD_INT 5
9774: ST_TO_ADDR
9775: GO 9787
// k := tmp ;
9777: LD_ADDR_VAR 0 2
9781: PUSH
9782: LD_VAR 0 3
9786: ST_TO_ADDR
// for i := 1 to k do
9787: LD_ADDR_VAR 0 1
9791: PUSH
9792: DOUBLE
9793: LD_INT 1
9795: DEC
9796: ST_TO_ADDR
9797: LD_VAR 0 2
9801: PUSH
9802: FOR_TO
9803: IFFALSE 9902
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9805: LD_VAR 0 3
9809: PUSH
9810: LD_VAR 0 1
9814: ARRAY
9815: PPUSH
9816: LD_VAR 0 1
9820: PUSH
9821: LD_INT 4
9823: MOD
9824: PUSH
9825: LD_INT 1
9827: PLUS
9828: PPUSH
9829: CALL_OW 259
9833: PUSH
9834: LD_INT 10
9836: LESS
9837: IFFALSE 9900
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9839: LD_VAR 0 3
9843: PUSH
9844: LD_VAR 0 1
9848: ARRAY
9849: PPUSH
9850: LD_VAR 0 1
9854: PUSH
9855: LD_INT 4
9857: MOD
9858: PUSH
9859: LD_INT 1
9861: PLUS
9862: PPUSH
9863: LD_VAR 0 3
9867: PUSH
9868: LD_VAR 0 1
9872: ARRAY
9873: PPUSH
9874: LD_VAR 0 1
9878: PUSH
9879: LD_INT 4
9881: MOD
9882: PUSH
9883: LD_INT 1
9885: PLUS
9886: PPUSH
9887: CALL_OW 259
9891: PUSH
9892: LD_INT 1
9894: PLUS
9895: PPUSH
9896: CALL_OW 237
9900: GO 9802
9902: POP
9903: POP
// end ;
9904: PPOPN 3
9906: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9907: LD_EXP 22
9911: PUSH
9912: LD_EXP 30
9916: AND
9917: IFFALSE 9937
9919: GO 9921
9921: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9922: LD_INT 4
9924: PPUSH
9925: LD_OWVAR 2
9929: PPUSH
9930: LD_INT 0
9932: PPUSH
9933: CALL_OW 324
9937: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9938: LD_EXP 22
9942: PUSH
9943: LD_EXP 59
9947: AND
9948: IFFALSE 9968
9950: GO 9952
9952: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9953: LD_INT 19
9955: PPUSH
9956: LD_OWVAR 2
9960: PPUSH
9961: LD_INT 0
9963: PPUSH
9964: CALL_OW 324
9968: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9969: LD_EXP 22
9973: PUSH
9974: LD_EXP 31
9978: AND
9979: IFFALSE 10081
9981: GO 9983
9983: DISABLE
9984: LD_INT 0
9986: PPUSH
9987: PPUSH
// begin enable ;
9988: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9989: LD_ADDR_VAR 0 2
9993: PUSH
9994: LD_INT 22
9996: PUSH
9997: LD_OWVAR 2
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: LD_INT 34
10011: PUSH
10012: LD_INT 11
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 34
10021: PUSH
10022: LD_INT 30
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: PPUSH
10038: CALL_OW 69
10042: ST_TO_ADDR
// if not tmp then
10043: LD_VAR 0 2
10047: NOT
10048: IFFALSE 10052
// exit ;
10050: GO 10081
// for i in tmp do
10052: LD_ADDR_VAR 0 1
10056: PUSH
10057: LD_VAR 0 2
10061: PUSH
10062: FOR_IN
10063: IFFALSE 10079
// begin SetLives ( i , 0 ) ;
10065: LD_VAR 0 1
10069: PPUSH
10070: LD_INT 0
10072: PPUSH
10073: CALL_OW 234
// end ;
10077: GO 10062
10079: POP
10080: POP
// end ;
10081: PPOPN 2
10083: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10084: LD_EXP 22
10088: PUSH
10089: LD_EXP 32
10093: AND
10094: IFFALSE 10114
10096: GO 10098
10098: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10099: LD_INT 32
10101: PPUSH
10102: LD_OWVAR 2
10106: PPUSH
10107: LD_INT 0
10109: PPUSH
10110: CALL_OW 324
10114: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10115: LD_EXP 22
10119: PUSH
10120: LD_EXP 33
10124: AND
10125: IFFALSE 10306
10127: GO 10129
10129: DISABLE
10130: LD_INT 0
10132: PPUSH
10133: PPUSH
10134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10135: LD_ADDR_VAR 0 2
10139: PUSH
10140: LD_INT 22
10142: PUSH
10143: LD_OWVAR 2
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: PUSH
10152: LD_INT 33
10154: PUSH
10155: LD_INT 3
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PPUSH
10166: CALL_OW 69
10170: ST_TO_ADDR
// if not tmp then
10171: LD_VAR 0 2
10175: NOT
10176: IFFALSE 10180
// exit ;
10178: GO 10306
// side := 0 ;
10180: LD_ADDR_VAR 0 3
10184: PUSH
10185: LD_INT 0
10187: ST_TO_ADDR
// for i := 1 to 8 do
10188: LD_ADDR_VAR 0 1
10192: PUSH
10193: DOUBLE
10194: LD_INT 1
10196: DEC
10197: ST_TO_ADDR
10198: LD_INT 8
10200: PUSH
10201: FOR_TO
10202: IFFALSE 10250
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10204: LD_OWVAR 2
10208: PUSH
10209: LD_VAR 0 1
10213: NONEQUAL
10214: PUSH
10215: LD_OWVAR 2
10219: PPUSH
10220: LD_VAR 0 1
10224: PPUSH
10225: CALL_OW 81
10229: PUSH
10230: LD_INT 2
10232: EQUAL
10233: AND
10234: IFFALSE 10248
// begin side := i ;
10236: LD_ADDR_VAR 0 3
10240: PUSH
10241: LD_VAR 0 1
10245: ST_TO_ADDR
// break ;
10246: GO 10250
// end ;
10248: GO 10201
10250: POP
10251: POP
// if not side then
10252: LD_VAR 0 3
10256: NOT
10257: IFFALSE 10261
// exit ;
10259: GO 10306
// for i := 1 to tmp do
10261: LD_ADDR_VAR 0 1
10265: PUSH
10266: DOUBLE
10267: LD_INT 1
10269: DEC
10270: ST_TO_ADDR
10271: LD_VAR 0 2
10275: PUSH
10276: FOR_TO
10277: IFFALSE 10304
// if Prob ( 60 ) then
10279: LD_INT 60
10281: PPUSH
10282: CALL_OW 13
10286: IFFALSE 10302
// SetSide ( i , side ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: LD_VAR 0 3
10297: PPUSH
10298: CALL_OW 235
10302: GO 10276
10304: POP
10305: POP
// end ;
10306: PPOPN 3
10308: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10309: LD_EXP 22
10313: PUSH
10314: LD_EXP 35
10318: AND
10319: IFFALSE 10438
10321: GO 10323
10323: DISABLE
10324: LD_INT 0
10326: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10327: LD_ADDR_VAR 0 1
10331: PUSH
10332: LD_INT 22
10334: PUSH
10335: LD_OWVAR 2
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 21
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 3
10356: PUSH
10357: LD_INT 23
10359: PUSH
10360: LD_INT 0
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: LIST
10375: PPUSH
10376: CALL_OW 69
10380: PUSH
10381: FOR_IN
10382: IFFALSE 10436
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10384: LD_VAR 0 1
10388: PPUSH
10389: CALL_OW 257
10393: PUSH
10394: LD_INT 1
10396: PUSH
10397: LD_INT 2
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: LD_INT 4
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: IN
10412: IFFALSE 10434
// SetClass ( un , rand ( 1 , 4 ) ) ;
10414: LD_VAR 0 1
10418: PPUSH
10419: LD_INT 1
10421: PPUSH
10422: LD_INT 4
10424: PPUSH
10425: CALL_OW 12
10429: PPUSH
10430: CALL_OW 336
10434: GO 10381
10436: POP
10437: POP
// end ;
10438: PPOPN 1
10440: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10441: LD_EXP 22
10445: PUSH
10446: LD_EXP 34
10450: AND
10451: IFFALSE 10530
10453: GO 10455
10455: DISABLE
10456: LD_INT 0
10458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10459: LD_ADDR_VAR 0 1
10463: PUSH
10464: LD_INT 22
10466: PUSH
10467: LD_OWVAR 2
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 21
10478: PUSH
10479: LD_INT 3
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PPUSH
10490: CALL_OW 69
10494: ST_TO_ADDR
// if not tmp then
10495: LD_VAR 0 1
10499: NOT
10500: IFFALSE 10504
// exit ;
10502: GO 10530
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10504: LD_VAR 0 1
10508: PUSH
10509: LD_INT 1
10511: PPUSH
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 12
10521: ARRAY
10522: PPUSH
10523: LD_INT 100
10525: PPUSH
10526: CALL_OW 234
// end ;
10530: PPOPN 1
10532: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10533: LD_EXP 22
10537: PUSH
10538: LD_EXP 36
10542: AND
10543: IFFALSE 10641
10545: GO 10547
10547: DISABLE
10548: LD_INT 0
10550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10551: LD_ADDR_VAR 0 1
10555: PUSH
10556: LD_INT 22
10558: PUSH
10559: LD_OWVAR 2
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 21
10570: PUSH
10571: LD_INT 1
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PPUSH
10582: CALL_OW 69
10586: ST_TO_ADDR
// if not tmp then
10587: LD_VAR 0 1
10591: NOT
10592: IFFALSE 10596
// exit ;
10594: GO 10641
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10596: LD_VAR 0 1
10600: PUSH
10601: LD_INT 1
10603: PPUSH
10604: LD_VAR 0 1
10608: PPUSH
10609: CALL_OW 12
10613: ARRAY
10614: PPUSH
10615: LD_INT 1
10617: PPUSH
10618: LD_INT 4
10620: PPUSH
10621: CALL_OW 12
10625: PPUSH
10626: LD_INT 3000
10628: PPUSH
10629: LD_INT 9000
10631: PPUSH
10632: CALL_OW 12
10636: PPUSH
10637: CALL_OW 492
// end ;
10641: PPOPN 1
10643: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10644: LD_EXP 22
10648: PUSH
10649: LD_EXP 37
10653: AND
10654: IFFALSE 10674
10656: GO 10658
10658: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10659: LD_INT 1
10661: PPUSH
10662: LD_OWVAR 2
10666: PPUSH
10667: LD_INT 0
10669: PPUSH
10670: CALL_OW 324
10674: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10675: LD_EXP 22
10679: PUSH
10680: LD_EXP 38
10684: AND
10685: IFFALSE 10768
10687: GO 10689
10689: DISABLE
10690: LD_INT 0
10692: PPUSH
10693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10694: LD_ADDR_VAR 0 2
10698: PUSH
10699: LD_INT 22
10701: PUSH
10702: LD_OWVAR 2
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 21
10713: PUSH
10714: LD_INT 3
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PPUSH
10725: CALL_OW 69
10729: ST_TO_ADDR
// if not tmp then
10730: LD_VAR 0 2
10734: NOT
10735: IFFALSE 10739
// exit ;
10737: GO 10768
// for i in tmp do
10739: LD_ADDR_VAR 0 1
10743: PUSH
10744: LD_VAR 0 2
10748: PUSH
10749: FOR_IN
10750: IFFALSE 10766
// SetBLevel ( i , 10 ) ;
10752: LD_VAR 0 1
10756: PPUSH
10757: LD_INT 10
10759: PPUSH
10760: CALL_OW 241
10764: GO 10749
10766: POP
10767: POP
// end ;
10768: PPOPN 2
10770: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10771: LD_EXP 22
10775: PUSH
10776: LD_EXP 39
10780: AND
10781: IFFALSE 10892
10783: GO 10785
10785: DISABLE
10786: LD_INT 0
10788: PPUSH
10789: PPUSH
10790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10791: LD_ADDR_VAR 0 3
10795: PUSH
10796: LD_INT 22
10798: PUSH
10799: LD_OWVAR 2
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 25
10810: PUSH
10811: LD_INT 1
10813: PUSH
10814: EMPTY
10815: LIST
10816: LIST
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PPUSH
10822: CALL_OW 69
10826: ST_TO_ADDR
// if not tmp then
10827: LD_VAR 0 3
10831: NOT
10832: IFFALSE 10836
// exit ;
10834: GO 10892
// un := tmp [ rand ( 1 , tmp ) ] ;
10836: LD_ADDR_VAR 0 2
10840: PUSH
10841: LD_VAR 0 3
10845: PUSH
10846: LD_INT 1
10848: PPUSH
10849: LD_VAR 0 3
10853: PPUSH
10854: CALL_OW 12
10858: ARRAY
10859: ST_TO_ADDR
// if Crawls ( un ) then
10860: LD_VAR 0 2
10864: PPUSH
10865: CALL_OW 318
10869: IFFALSE 10880
// ComWalk ( un ) ;
10871: LD_VAR 0 2
10875: PPUSH
10876: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10880: LD_VAR 0 2
10884: PPUSH
10885: LD_INT 5
10887: PPUSH
10888: CALL_OW 336
// end ;
10892: PPOPN 3
10894: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10895: LD_EXP 22
10899: PUSH
10900: LD_EXP 40
10904: AND
10905: PUSH
10906: LD_OWVAR 67
10910: PUSH
10911: LD_INT 3
10913: LESS
10914: AND
10915: IFFALSE 10934
10917: GO 10919
10919: DISABLE
// Difficulty := Difficulty + 1 ;
10920: LD_ADDR_OWVAR 67
10924: PUSH
10925: LD_OWVAR 67
10929: PUSH
10930: LD_INT 1
10932: PLUS
10933: ST_TO_ADDR
10934: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10935: LD_EXP 22
10939: PUSH
10940: LD_EXP 41
10944: AND
10945: IFFALSE 11048
10947: GO 10949
10949: DISABLE
10950: LD_INT 0
10952: PPUSH
// begin for i := 1 to 5 do
10953: LD_ADDR_VAR 0 1
10957: PUSH
10958: DOUBLE
10959: LD_INT 1
10961: DEC
10962: ST_TO_ADDR
10963: LD_INT 5
10965: PUSH
10966: FOR_TO
10967: IFFALSE 11046
// begin uc_nation := nation_nature ;
10969: LD_ADDR_OWVAR 21
10973: PUSH
10974: LD_INT 0
10976: ST_TO_ADDR
// uc_side := 0 ;
10977: LD_ADDR_OWVAR 20
10981: PUSH
10982: LD_INT 0
10984: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10985: LD_ADDR_OWVAR 29
10989: PUSH
10990: LD_INT 12
10992: PUSH
10993: LD_INT 12
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: ST_TO_ADDR
// hc_agressivity := 20 ;
11000: LD_ADDR_OWVAR 35
11004: PUSH
11005: LD_INT 20
11007: ST_TO_ADDR
// hc_class := class_tiger ;
11008: LD_ADDR_OWVAR 28
11012: PUSH
11013: LD_INT 14
11015: ST_TO_ADDR
// hc_gallery :=  ;
11016: LD_ADDR_OWVAR 33
11020: PUSH
11021: LD_STRING 
11023: ST_TO_ADDR
// hc_name :=  ;
11024: LD_ADDR_OWVAR 26
11028: PUSH
11029: LD_STRING 
11031: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11032: CALL_OW 44
11036: PPUSH
11037: LD_INT 0
11039: PPUSH
11040: CALL_OW 51
// end ;
11044: GO 10966
11046: POP
11047: POP
// end ;
11048: PPOPN 1
11050: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11051: LD_EXP 22
11055: PUSH
11056: LD_EXP 42
11060: AND
11061: IFFALSE 11070
11063: GO 11065
11065: DISABLE
// StreamSibBomb ;
11066: CALL 11071 0 0
11070: END
// export function StreamSibBomb ; var i , x , y ; begin
11071: LD_INT 0
11073: PPUSH
11074: PPUSH
11075: PPUSH
11076: PPUSH
// result := false ;
11077: LD_ADDR_VAR 0 1
11081: PUSH
11082: LD_INT 0
11084: ST_TO_ADDR
// for i := 1 to 16 do
11085: LD_ADDR_VAR 0 2
11089: PUSH
11090: DOUBLE
11091: LD_INT 1
11093: DEC
11094: ST_TO_ADDR
11095: LD_INT 16
11097: PUSH
11098: FOR_TO
11099: IFFALSE 11298
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11101: LD_ADDR_VAR 0 3
11105: PUSH
11106: LD_INT 10
11108: PUSH
11109: LD_INT 20
11111: PUSH
11112: LD_INT 30
11114: PUSH
11115: LD_INT 40
11117: PUSH
11118: LD_INT 50
11120: PUSH
11121: LD_INT 60
11123: PUSH
11124: LD_INT 70
11126: PUSH
11127: LD_INT 80
11129: PUSH
11130: LD_INT 90
11132: PUSH
11133: LD_INT 100
11135: PUSH
11136: LD_INT 110
11138: PUSH
11139: LD_INT 120
11141: PUSH
11142: LD_INT 130
11144: PUSH
11145: LD_INT 140
11147: PUSH
11148: LD_INT 150
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 1
11170: PPUSH
11171: LD_INT 15
11173: PPUSH
11174: CALL_OW 12
11178: ARRAY
11179: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11180: LD_ADDR_VAR 0 4
11184: PUSH
11185: LD_INT 10
11187: PUSH
11188: LD_INT 20
11190: PUSH
11191: LD_INT 30
11193: PUSH
11194: LD_INT 40
11196: PUSH
11197: LD_INT 50
11199: PUSH
11200: LD_INT 60
11202: PUSH
11203: LD_INT 70
11205: PUSH
11206: LD_INT 80
11208: PUSH
11209: LD_INT 90
11211: PUSH
11212: LD_INT 100
11214: PUSH
11215: LD_INT 110
11217: PUSH
11218: LD_INT 120
11220: PUSH
11221: LD_INT 130
11223: PUSH
11224: LD_INT 140
11226: PUSH
11227: LD_INT 150
11229: PUSH
11230: EMPTY
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 1
11249: PPUSH
11250: LD_INT 15
11252: PPUSH
11253: CALL_OW 12
11257: ARRAY
11258: ST_TO_ADDR
// if ValidHex ( x , y ) then
11259: LD_VAR 0 3
11263: PPUSH
11264: LD_VAR 0 4
11268: PPUSH
11269: CALL_OW 488
11273: IFFALSE 11296
// begin result := [ x , y ] ;
11275: LD_ADDR_VAR 0 1
11279: PUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_VAR 0 4
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: ST_TO_ADDR
// break ;
11294: GO 11298
// end ; end ;
11296: GO 11098
11298: POP
11299: POP
// if result then
11300: LD_VAR 0 1
11304: IFFALSE 11364
// begin ToLua ( playSibBomb() ) ;
11306: LD_STRING playSibBomb()
11308: PPUSH
11309: CALL_OW 559
// wait ( 0 0$14 ) ;
11313: LD_INT 490
11315: PPUSH
11316: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 1
11327: ARRAY
11328: PPUSH
11329: LD_VAR 0 1
11333: PUSH
11334: LD_INT 2
11336: ARRAY
11337: PPUSH
11338: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11342: LD_VAR 0 1
11346: PUSH
11347: LD_INT 1
11349: ARRAY
11350: PPUSH
11351: LD_VAR 0 1
11355: PUSH
11356: LD_INT 2
11358: ARRAY
11359: PPUSH
11360: CALL_OW 429
// end ; end ;
11364: LD_VAR 0 1
11368: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11369: LD_EXP 22
11373: PUSH
11374: LD_EXP 44
11378: AND
11379: IFFALSE 11391
11381: GO 11383
11383: DISABLE
// YouLost (  ) ;
11384: LD_STRING 
11386: PPUSH
11387: CALL_OW 104
11391: END
// every 0 0$1 trigger StreamModeActive and sFog do
11392: LD_EXP 22
11396: PUSH
11397: LD_EXP 43
11401: AND
11402: IFFALSE 11416
11404: GO 11406
11406: DISABLE
// FogOff ( your_side ) ;
11407: LD_OWVAR 2
11411: PPUSH
11412: CALL_OW 344
11416: END
// every 0 0$1 trigger StreamModeActive and sSun do
11417: LD_EXP 22
11421: PUSH
11422: LD_EXP 45
11426: AND
11427: IFFALSE 11455
11429: GO 11431
11431: DISABLE
// begin solar_recharge_percent := 0 ;
11432: LD_ADDR_OWVAR 79
11436: PUSH
11437: LD_INT 0
11439: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11440: LD_INT 10500
11442: PPUSH
11443: CALL_OW 67
// solar_recharge_percent := 100 ;
11447: LD_ADDR_OWVAR 79
11451: PUSH
11452: LD_INT 100
11454: ST_TO_ADDR
// end ;
11455: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11456: LD_EXP 22
11460: PUSH
11461: LD_EXP 46
11465: AND
11466: IFFALSE 11705
11468: GO 11470
11470: DISABLE
11471: LD_INT 0
11473: PPUSH
11474: PPUSH
11475: PPUSH
// begin tmp := [ ] ;
11476: LD_ADDR_VAR 0 3
11480: PUSH
11481: EMPTY
11482: ST_TO_ADDR
// for i := 1 to 6 do
11483: LD_ADDR_VAR 0 1
11487: PUSH
11488: DOUBLE
11489: LD_INT 1
11491: DEC
11492: ST_TO_ADDR
11493: LD_INT 6
11495: PUSH
11496: FOR_TO
11497: IFFALSE 11602
// begin uc_nation := nation_nature ;
11499: LD_ADDR_OWVAR 21
11503: PUSH
11504: LD_INT 0
11506: ST_TO_ADDR
// uc_side := 0 ;
11507: LD_ADDR_OWVAR 20
11511: PUSH
11512: LD_INT 0
11514: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11515: LD_ADDR_OWVAR 29
11519: PUSH
11520: LD_INT 12
11522: PUSH
11523: LD_INT 12
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: ST_TO_ADDR
// hc_agressivity := 20 ;
11530: LD_ADDR_OWVAR 35
11534: PUSH
11535: LD_INT 20
11537: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11538: LD_ADDR_OWVAR 28
11542: PUSH
11543: LD_INT 17
11545: ST_TO_ADDR
// hc_gallery :=  ;
11546: LD_ADDR_OWVAR 33
11550: PUSH
11551: LD_STRING 
11553: ST_TO_ADDR
// hc_name :=  ;
11554: LD_ADDR_OWVAR 26
11558: PUSH
11559: LD_STRING 
11561: ST_TO_ADDR
// un := CreateHuman ;
11562: LD_ADDR_VAR 0 2
11566: PUSH
11567: CALL_OW 44
11571: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11572: LD_VAR 0 2
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: CALL_OW 51
// tmp := tmp ^ un ;
11584: LD_ADDR_VAR 0 3
11588: PUSH
11589: LD_VAR 0 3
11593: PUSH
11594: LD_VAR 0 2
11598: ADD
11599: ST_TO_ADDR
// end ;
11600: GO 11496
11602: POP
11603: POP
// repeat wait ( 0 0$1 ) ;
11604: LD_INT 35
11606: PPUSH
11607: CALL_OW 67
// for un in tmp do
11611: LD_ADDR_VAR 0 2
11615: PUSH
11616: LD_VAR 0 3
11620: PUSH
11621: FOR_IN
11622: IFFALSE 11696
// begin if IsDead ( un ) then
11624: LD_VAR 0 2
11628: PPUSH
11629: CALL_OW 301
11633: IFFALSE 11653
// begin tmp := tmp diff un ;
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: LD_VAR 0 3
11644: PUSH
11645: LD_VAR 0 2
11649: DIFF
11650: ST_TO_ADDR
// continue ;
11651: GO 11621
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11653: LD_VAR 0 2
11657: PPUSH
11658: LD_INT 3
11660: PUSH
11661: LD_INT 22
11663: PUSH
11664: LD_INT 0
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PPUSH
11675: CALL_OW 69
11679: PPUSH
11680: LD_VAR 0 2
11684: PPUSH
11685: CALL_OW 74
11689: PPUSH
11690: CALL_OW 115
// end ;
11694: GO 11621
11696: POP
11697: POP
// until not tmp ;
11698: LD_VAR 0 3
11702: NOT
11703: IFFALSE 11604
// end ;
11705: PPOPN 3
11707: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11708: LD_EXP 22
11712: PUSH
11713: LD_EXP 47
11717: AND
11718: IFFALSE 11772
11720: GO 11722
11722: DISABLE
// begin ToLua ( displayTroll(); ) ;
11723: LD_STRING displayTroll();
11725: PPUSH
11726: CALL_OW 559
// wait ( 3 3$00 ) ;
11730: LD_INT 6300
11732: PPUSH
11733: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11737: LD_STRING hideTroll();
11739: PPUSH
11740: CALL_OW 559
// wait ( 1 1$00 ) ;
11744: LD_INT 2100
11746: PPUSH
11747: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11751: LD_STRING displayTroll();
11753: PPUSH
11754: CALL_OW 559
// wait ( 1 1$00 ) ;
11758: LD_INT 2100
11760: PPUSH
11761: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11765: LD_STRING hideTroll();
11767: PPUSH
11768: CALL_OW 559
// end ;
11772: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11773: LD_EXP 22
11777: PUSH
11778: LD_EXP 48
11782: AND
11783: IFFALSE 11846
11785: GO 11787
11787: DISABLE
11788: LD_INT 0
11790: PPUSH
// begin p := 0 ;
11791: LD_ADDR_VAR 0 1
11795: PUSH
11796: LD_INT 0
11798: ST_TO_ADDR
// repeat game_speed := 1 ;
11799: LD_ADDR_OWVAR 65
11803: PUSH
11804: LD_INT 1
11806: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11807: LD_INT 35
11809: PPUSH
11810: CALL_OW 67
// p := p + 1 ;
11814: LD_ADDR_VAR 0 1
11818: PUSH
11819: LD_VAR 0 1
11823: PUSH
11824: LD_INT 1
11826: PLUS
11827: ST_TO_ADDR
// until p >= 60 ;
11828: LD_VAR 0 1
11832: PUSH
11833: LD_INT 60
11835: GREATEREQUAL
11836: IFFALSE 11799
// game_speed := 4 ;
11838: LD_ADDR_OWVAR 65
11842: PUSH
11843: LD_INT 4
11845: ST_TO_ADDR
// end ;
11846: PPOPN 1
11848: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11849: LD_EXP 22
11853: PUSH
11854: LD_EXP 49
11858: AND
11859: IFFALSE 12005
11861: GO 11863
11863: DISABLE
11864: LD_INT 0
11866: PPUSH
11867: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11868: LD_ADDR_VAR 0 1
11872: PUSH
11873: LD_INT 22
11875: PUSH
11876: LD_OWVAR 2
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 2
11887: PUSH
11888: LD_INT 30
11890: PUSH
11891: LD_INT 0
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 30
11900: PUSH
11901: LD_INT 1
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: LIST
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 69
11921: ST_TO_ADDR
// if not depot then
11922: LD_VAR 0 1
11926: NOT
11927: IFFALSE 11931
// exit ;
11929: GO 12005
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11931: LD_ADDR_VAR 0 2
11935: PUSH
11936: LD_VAR 0 1
11940: PUSH
11941: LD_INT 1
11943: PPUSH
11944: LD_VAR 0 1
11948: PPUSH
11949: CALL_OW 12
11953: ARRAY
11954: PPUSH
11955: CALL_OW 274
11959: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11960: LD_VAR 0 2
11964: PPUSH
11965: LD_INT 1
11967: PPUSH
11968: LD_INT 0
11970: PPUSH
11971: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11975: LD_VAR 0 2
11979: PPUSH
11980: LD_INT 2
11982: PPUSH
11983: LD_INT 0
11985: PPUSH
11986: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11990: LD_VAR 0 2
11994: PPUSH
11995: LD_INT 3
11997: PPUSH
11998: LD_INT 0
12000: PPUSH
12001: CALL_OW 277
// end ;
12005: PPOPN 2
12007: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12008: LD_EXP 22
12012: PUSH
12013: LD_EXP 50
12017: AND
12018: IFFALSE 12115
12020: GO 12022
12022: DISABLE
12023: LD_INT 0
12025: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12026: LD_ADDR_VAR 0 1
12030: PUSH
12031: LD_INT 22
12033: PUSH
12034: LD_OWVAR 2
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 21
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: LD_INT 23
12058: PUSH
12059: LD_INT 0
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: PPUSH
12075: CALL_OW 69
12079: ST_TO_ADDR
// if not tmp then
12080: LD_VAR 0 1
12084: NOT
12085: IFFALSE 12089
// exit ;
12087: GO 12115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12089: LD_VAR 0 1
12093: PUSH
12094: LD_INT 1
12096: PPUSH
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 12
12106: ARRAY
12107: PPUSH
12108: LD_INT 200
12110: PPUSH
12111: CALL_OW 234
// end ;
12115: PPOPN 1
12117: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12118: LD_EXP 22
12122: PUSH
12123: LD_EXP 51
12127: AND
12128: IFFALSE 12207
12130: GO 12132
12132: DISABLE
12133: LD_INT 0
12135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12136: LD_ADDR_VAR 0 1
12140: PUSH
12141: LD_INT 22
12143: PUSH
12144: LD_OWVAR 2
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 21
12155: PUSH
12156: LD_INT 2
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PPUSH
12167: CALL_OW 69
12171: ST_TO_ADDR
// if not tmp then
12172: LD_VAR 0 1
12176: NOT
12177: IFFALSE 12181
// exit ;
12179: GO 12207
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12181: LD_VAR 0 1
12185: PUSH
12186: LD_INT 1
12188: PPUSH
12189: LD_VAR 0 1
12193: PPUSH
12194: CALL_OW 12
12198: ARRAY
12199: PPUSH
12200: LD_INT 60
12202: PPUSH
12203: CALL_OW 234
// end ;
12207: PPOPN 1
12209: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12210: LD_EXP 22
12214: PUSH
12215: LD_EXP 52
12219: AND
12220: IFFALSE 12319
12222: GO 12224
12224: DISABLE
12225: LD_INT 0
12227: PPUSH
12228: PPUSH
// begin enable ;
12229: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12230: LD_ADDR_VAR 0 1
12234: PUSH
12235: LD_INT 22
12237: PUSH
12238: LD_OWVAR 2
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 61
12249: PUSH
12250: EMPTY
12251: LIST
12252: PUSH
12253: LD_INT 33
12255: PUSH
12256: LD_INT 2
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: PPUSH
12268: CALL_OW 69
12272: ST_TO_ADDR
// if not tmp then
12273: LD_VAR 0 1
12277: NOT
12278: IFFALSE 12282
// exit ;
12280: GO 12319
// for i in tmp do
12282: LD_ADDR_VAR 0 2
12286: PUSH
12287: LD_VAR 0 1
12291: PUSH
12292: FOR_IN
12293: IFFALSE 12317
// if IsControledBy ( i ) then
12295: LD_VAR 0 2
12299: PPUSH
12300: CALL_OW 312
12304: IFFALSE 12315
// ComUnlink ( i ) ;
12306: LD_VAR 0 2
12310: PPUSH
12311: CALL_OW 136
12315: GO 12292
12317: POP
12318: POP
// end ;
12319: PPOPN 2
12321: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12322: LD_EXP 22
12326: PUSH
12327: LD_EXP 53
12331: AND
12332: IFFALSE 12472
12334: GO 12336
12336: DISABLE
12337: LD_INT 0
12339: PPUSH
12340: PPUSH
// begin ToLua ( displayPowell(); ) ;
12341: LD_STRING displayPowell();
12343: PPUSH
12344: CALL_OW 559
// uc_side := 0 ;
12348: LD_ADDR_OWVAR 20
12352: PUSH
12353: LD_INT 0
12355: ST_TO_ADDR
// uc_nation := 2 ;
12356: LD_ADDR_OWVAR 21
12360: PUSH
12361: LD_INT 2
12363: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12364: LD_ADDR_OWVAR 37
12368: PUSH
12369: LD_INT 14
12371: ST_TO_ADDR
// vc_engine := engine_siberite ;
12372: LD_ADDR_OWVAR 39
12376: PUSH
12377: LD_INT 3
12379: ST_TO_ADDR
// vc_control := control_apeman ;
12380: LD_ADDR_OWVAR 38
12384: PUSH
12385: LD_INT 5
12387: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12388: LD_ADDR_OWVAR 40
12392: PUSH
12393: LD_INT 29
12395: ST_TO_ADDR
// un := CreateVehicle ;
12396: LD_ADDR_VAR 0 2
12400: PUSH
12401: CALL_OW 45
12405: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12406: LD_VAR 0 2
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12418: LD_INT 35
12420: PPUSH
12421: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12425: LD_VAR 0 2
12429: PPUSH
12430: LD_INT 22
12432: PUSH
12433: LD_OWVAR 2
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PPUSH
12442: CALL_OW 69
12446: PPUSH
12447: LD_VAR 0 2
12451: PPUSH
12452: CALL_OW 74
12456: PPUSH
12457: CALL_OW 115
// until IsDead ( un ) ;
12461: LD_VAR 0 2
12465: PPUSH
12466: CALL_OW 301
12470: IFFALSE 12418
// end ;
12472: PPOPN 2
12474: END
// every 0 0$1 trigger StreamModeActive and sStu do
12475: LD_EXP 22
12479: PUSH
12480: LD_EXP 61
12484: AND
12485: IFFALSE 12501
12487: GO 12489
12489: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12490: LD_STRING displayStucuk();
12492: PPUSH
12493: CALL_OW 559
// ResetFog ;
12497: CALL_OW 335
// end ;
12501: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12502: LD_EXP 22
12506: PUSH
12507: LD_EXP 54
12511: AND
12512: IFFALSE 12653
12514: GO 12516
12516: DISABLE
12517: LD_INT 0
12519: PPUSH
12520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12521: LD_ADDR_VAR 0 2
12525: PUSH
12526: LD_INT 22
12528: PUSH
12529: LD_OWVAR 2
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: PUSH
12538: LD_INT 21
12540: PUSH
12541: LD_INT 1
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PUSH
12548: EMPTY
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: ST_TO_ADDR
// if not tmp then
12557: LD_VAR 0 2
12561: NOT
12562: IFFALSE 12566
// exit ;
12564: GO 12653
// un := tmp [ rand ( 1 , tmp ) ] ;
12566: LD_ADDR_VAR 0 1
12570: PUSH
12571: LD_VAR 0 2
12575: PUSH
12576: LD_INT 1
12578: PPUSH
12579: LD_VAR 0 2
12583: PPUSH
12584: CALL_OW 12
12588: ARRAY
12589: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12590: LD_VAR 0 1
12594: PPUSH
12595: LD_INT 0
12597: PPUSH
12598: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12602: LD_VAR 0 1
12606: PPUSH
12607: LD_OWVAR 3
12611: PUSH
12612: LD_VAR 0 1
12616: DIFF
12617: PPUSH
12618: LD_VAR 0 1
12622: PPUSH
12623: CALL_OW 74
12627: PPUSH
12628: CALL_OW 115
// wait ( 0 0$20 ) ;
12632: LD_INT 700
12634: PPUSH
12635: CALL_OW 67
// SetSide ( un , your_side ) ;
12639: LD_VAR 0 1
12643: PPUSH
12644: LD_OWVAR 2
12648: PPUSH
12649: CALL_OW 235
// end ;
12653: PPOPN 2
12655: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12656: LD_EXP 22
12660: PUSH
12661: LD_EXP 55
12665: AND
12666: IFFALSE 12772
12668: GO 12670
12670: DISABLE
12671: LD_INT 0
12673: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12674: LD_ADDR_VAR 0 1
12678: PUSH
12679: LD_INT 22
12681: PUSH
12682: LD_OWVAR 2
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: PUSH
12691: LD_INT 2
12693: PUSH
12694: LD_INT 30
12696: PUSH
12697: LD_INT 0
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 30
12706: PUSH
12707: LD_INT 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: ST_TO_ADDR
// if not depot then
12728: LD_VAR 0 1
12732: NOT
12733: IFFALSE 12737
// exit ;
12735: GO 12772
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12737: LD_VAR 0 1
12741: PUSH
12742: LD_INT 1
12744: ARRAY
12745: PPUSH
12746: CALL_OW 250
12750: PPUSH
12751: LD_VAR 0 1
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: PPUSH
12760: CALL_OW 251
12764: PPUSH
12765: LD_INT 70
12767: PPUSH
12768: CALL_OW 495
// end ;
12772: PPOPN 1
12774: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12775: LD_EXP 22
12779: PUSH
12780: LD_EXP 56
12784: AND
12785: IFFALSE 12996
12787: GO 12789
12789: DISABLE
12790: LD_INT 0
12792: PPUSH
12793: PPUSH
12794: PPUSH
12795: PPUSH
12796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12797: LD_ADDR_VAR 0 5
12801: PUSH
12802: LD_INT 22
12804: PUSH
12805: LD_OWVAR 2
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: PUSH
12814: LD_INT 21
12816: PUSH
12817: LD_INT 1
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: PPUSH
12828: CALL_OW 69
12832: ST_TO_ADDR
// if not tmp then
12833: LD_VAR 0 5
12837: NOT
12838: IFFALSE 12842
// exit ;
12840: GO 12996
// for i in tmp do
12842: LD_ADDR_VAR 0 1
12846: PUSH
12847: LD_VAR 0 5
12851: PUSH
12852: FOR_IN
12853: IFFALSE 12994
// begin d := rand ( 0 , 5 ) ;
12855: LD_ADDR_VAR 0 4
12859: PUSH
12860: LD_INT 0
12862: PPUSH
12863: LD_INT 5
12865: PPUSH
12866: CALL_OW 12
12870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_VAR 0 1
12880: PPUSH
12881: CALL_OW 250
12885: PPUSH
12886: LD_VAR 0 4
12890: PPUSH
12891: LD_INT 3
12893: PPUSH
12894: LD_INT 12
12896: PPUSH
12897: CALL_OW 12
12901: PPUSH
12902: CALL_OW 272
12906: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12907: LD_ADDR_VAR 0 3
12911: PUSH
12912: LD_VAR 0 1
12916: PPUSH
12917: CALL_OW 251
12921: PPUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: LD_INT 3
12929: PPUSH
12930: LD_INT 12
12932: PPUSH
12933: CALL_OW 12
12937: PPUSH
12938: CALL_OW 273
12942: ST_TO_ADDR
// if ValidHex ( x , y ) then
12943: LD_VAR 0 2
12947: PPUSH
12948: LD_VAR 0 3
12952: PPUSH
12953: CALL_OW 488
12957: IFFALSE 12992
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12959: LD_VAR 0 1
12963: PPUSH
12964: LD_VAR 0 2
12968: PPUSH
12969: LD_VAR 0 3
12973: PPUSH
12974: LD_INT 3
12976: PPUSH
12977: LD_INT 6
12979: PPUSH
12980: CALL_OW 12
12984: PPUSH
12985: LD_INT 1
12987: PPUSH
12988: CALL_OW 483
// end ;
12992: GO 12852
12994: POP
12995: POP
// end ;
12996: PPOPN 5
12998: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12999: LD_EXP 22
13003: PUSH
13004: LD_EXP 57
13008: AND
13009: IFFALSE 13103
13011: GO 13013
13013: DISABLE
13014: LD_INT 0
13016: PPUSH
13017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13018: LD_ADDR_VAR 0 2
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_OWVAR 2
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 32
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: LD_INT 21
13047: PUSH
13048: LD_INT 2
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: PPUSH
13060: CALL_OW 69
13064: ST_TO_ADDR
// if not tmp then
13065: LD_VAR 0 2
13069: NOT
13070: IFFALSE 13074
// exit ;
13072: GO 13103
// for i in tmp do
13074: LD_ADDR_VAR 0 1
13078: PUSH
13079: LD_VAR 0 2
13083: PUSH
13084: FOR_IN
13085: IFFALSE 13101
// SetFuel ( i , 0 ) ;
13087: LD_VAR 0 1
13091: PPUSH
13092: LD_INT 0
13094: PPUSH
13095: CALL_OW 240
13099: GO 13084
13101: POP
13102: POP
// end ;
13103: PPOPN 2
13105: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13106: LD_EXP 22
13110: PUSH
13111: LD_EXP 58
13115: AND
13116: IFFALSE 13182
13118: GO 13120
13120: DISABLE
13121: LD_INT 0
13123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13124: LD_ADDR_VAR 0 1
13128: PUSH
13129: LD_INT 22
13131: PUSH
13132: LD_OWVAR 2
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 30
13143: PUSH
13144: LD_INT 29
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: ST_TO_ADDR
// if not tmp then
13160: LD_VAR 0 1
13164: NOT
13165: IFFALSE 13169
// exit ;
13167: GO 13182
// DestroyUnit ( tmp [ 1 ] ) ;
13169: LD_VAR 0 1
13173: PUSH
13174: LD_INT 1
13176: ARRAY
13177: PPUSH
13178: CALL_OW 65
// end ;
13182: PPOPN 1
13184: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13185: LD_EXP 22
13189: PUSH
13190: LD_EXP 60
13194: AND
13195: IFFALSE 13324
13197: GO 13199
13199: DISABLE
13200: LD_INT 0
13202: PPUSH
// begin uc_side := 0 ;
13203: LD_ADDR_OWVAR 20
13207: PUSH
13208: LD_INT 0
13210: ST_TO_ADDR
// uc_nation := nation_arabian ;
13211: LD_ADDR_OWVAR 21
13215: PUSH
13216: LD_INT 2
13218: ST_TO_ADDR
// hc_gallery :=  ;
13219: LD_ADDR_OWVAR 33
13223: PUSH
13224: LD_STRING 
13226: ST_TO_ADDR
// hc_name :=  ;
13227: LD_ADDR_OWVAR 26
13231: PUSH
13232: LD_STRING 
13234: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13235: LD_INT 1
13237: PPUSH
13238: LD_INT 11
13240: PPUSH
13241: LD_INT 10
13243: PPUSH
13244: CALL_OW 380
// un := CreateHuman ;
13248: LD_ADDR_VAR 0 1
13252: PUSH
13253: CALL_OW 44
13257: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13258: LD_VAR 0 1
13262: PPUSH
13263: LD_INT 1
13265: PPUSH
13266: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13270: LD_INT 35
13272: PPUSH
13273: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13277: LD_VAR 0 1
13281: PPUSH
13282: LD_INT 22
13284: PUSH
13285: LD_OWVAR 2
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PPUSH
13294: CALL_OW 69
13298: PPUSH
13299: LD_VAR 0 1
13303: PPUSH
13304: CALL_OW 74
13308: PPUSH
13309: CALL_OW 115
// until IsDead ( un ) ;
13313: LD_VAR 0 1
13317: PPUSH
13318: CALL_OW 301
13322: IFFALSE 13270
// end ;
13324: PPOPN 1
13326: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13327: LD_EXP 22
13331: PUSH
13332: LD_EXP 62
13336: AND
13337: IFFALSE 13349
13339: GO 13341
13341: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13342: LD_STRING earthquake(getX(game), 0, 32)
13344: PPUSH
13345: CALL_OW 559
13349: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13350: LD_EXP 22
13354: PUSH
13355: LD_EXP 63
13359: AND
13360: IFFALSE 13451
13362: GO 13364
13364: DISABLE
13365: LD_INT 0
13367: PPUSH
// begin enable ;
13368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13369: LD_ADDR_VAR 0 1
13373: PUSH
13374: LD_INT 22
13376: PUSH
13377: LD_OWVAR 2
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 21
13388: PUSH
13389: LD_INT 2
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 33
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 69
13415: ST_TO_ADDR
// if not tmp then
13416: LD_VAR 0 1
13420: NOT
13421: IFFALSE 13425
// exit ;
13423: GO 13451
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13425: LD_VAR 0 1
13429: PUSH
13430: LD_INT 1
13432: PPUSH
13433: LD_VAR 0 1
13437: PPUSH
13438: CALL_OW 12
13442: ARRAY
13443: PPUSH
13444: LD_INT 1
13446: PPUSH
13447: CALL_OW 234
// end ;
13451: PPOPN 1
13453: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13454: LD_EXP 22
13458: PUSH
13459: LD_EXP 64
13463: AND
13464: IFFALSE 13605
13466: GO 13468
13468: DISABLE
13469: LD_INT 0
13471: PPUSH
13472: PPUSH
13473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13474: LD_ADDR_VAR 0 3
13478: PUSH
13479: LD_INT 22
13481: PUSH
13482: LD_OWVAR 2
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 1
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PPUSH
13505: CALL_OW 69
13509: ST_TO_ADDR
// if not tmp then
13510: LD_VAR 0 3
13514: NOT
13515: IFFALSE 13519
// exit ;
13517: GO 13605
// un := tmp [ rand ( 1 , tmp ) ] ;
13519: LD_ADDR_VAR 0 2
13523: PUSH
13524: LD_VAR 0 3
13528: PUSH
13529: LD_INT 1
13531: PPUSH
13532: LD_VAR 0 3
13536: PPUSH
13537: CALL_OW 12
13541: ARRAY
13542: ST_TO_ADDR
// if Crawls ( un ) then
13543: LD_VAR 0 2
13547: PPUSH
13548: CALL_OW 318
13552: IFFALSE 13563
// ComWalk ( un ) ;
13554: LD_VAR 0 2
13558: PPUSH
13559: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13563: LD_VAR 0 2
13567: PPUSH
13568: LD_INT 9
13570: PPUSH
13571: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13575: LD_INT 28
13577: PPUSH
13578: LD_OWVAR 2
13582: PPUSH
13583: LD_INT 2
13585: PPUSH
13586: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13590: LD_INT 29
13592: PPUSH
13593: LD_OWVAR 2
13597: PPUSH
13598: LD_INT 2
13600: PPUSH
13601: CALL_OW 322
// end ;
13605: PPOPN 3
13607: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13608: LD_EXP 22
13612: PUSH
13613: LD_EXP 65
13617: AND
13618: IFFALSE 13729
13620: GO 13622
13622: DISABLE
13623: LD_INT 0
13625: PPUSH
13626: PPUSH
13627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13628: LD_ADDR_VAR 0 3
13632: PUSH
13633: LD_INT 22
13635: PUSH
13636: LD_OWVAR 2
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 1
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PPUSH
13659: CALL_OW 69
13663: ST_TO_ADDR
// if not tmp then
13664: LD_VAR 0 3
13668: NOT
13669: IFFALSE 13673
// exit ;
13671: GO 13729
// un := tmp [ rand ( 1 , tmp ) ] ;
13673: LD_ADDR_VAR 0 2
13677: PUSH
13678: LD_VAR 0 3
13682: PUSH
13683: LD_INT 1
13685: PPUSH
13686: LD_VAR 0 3
13690: PPUSH
13691: CALL_OW 12
13695: ARRAY
13696: ST_TO_ADDR
// if Crawls ( un ) then
13697: LD_VAR 0 2
13701: PPUSH
13702: CALL_OW 318
13706: IFFALSE 13717
// ComWalk ( un ) ;
13708: LD_VAR 0 2
13712: PPUSH
13713: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13717: LD_VAR 0 2
13721: PPUSH
13722: LD_INT 8
13724: PPUSH
13725: CALL_OW 336
// end ;
13729: PPOPN 3
13731: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13732: LD_EXP 22
13736: PUSH
13737: LD_EXP 66
13741: AND
13742: IFFALSE 13886
13744: GO 13746
13746: DISABLE
13747: LD_INT 0
13749: PPUSH
13750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_OWVAR 2
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 21
13770: PUSH
13771: LD_INT 2
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 2
13780: PUSH
13781: LD_INT 34
13783: PUSH
13784: LD_INT 12
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 34
13793: PUSH
13794: LD_INT 51
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 34
13803: PUSH
13804: LD_INT 32
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: PPUSH
13822: CALL_OW 69
13826: ST_TO_ADDR
// if not tmp then
13827: LD_VAR 0 2
13831: NOT
13832: IFFALSE 13836
// exit ;
13834: GO 13886
// for i in tmp do
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_VAR 0 2
13845: PUSH
13846: FOR_IN
13847: IFFALSE 13884
// if GetCargo ( i , mat_artifact ) = 0 then
13849: LD_VAR 0 1
13853: PPUSH
13854: LD_INT 4
13856: PPUSH
13857: CALL_OW 289
13861: PUSH
13862: LD_INT 0
13864: EQUAL
13865: IFFALSE 13882
// SetCargo ( i , mat_siberit , 100 ) ;
13867: LD_VAR 0 1
13871: PPUSH
13872: LD_INT 3
13874: PPUSH
13875: LD_INT 100
13877: PPUSH
13878: CALL_OW 290
13882: GO 13846
13884: POP
13885: POP
// end ;
13886: PPOPN 2
13888: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13889: LD_EXP 22
13893: PUSH
13894: LD_EXP 67
13898: AND
13899: IFFALSE 14082
13901: GO 13903
13903: DISABLE
13904: LD_INT 0
13906: PPUSH
13907: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13908: LD_ADDR_VAR 0 2
13912: PUSH
13913: LD_INT 22
13915: PUSH
13916: LD_OWVAR 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PPUSH
13925: CALL_OW 69
13929: ST_TO_ADDR
// if not tmp then
13930: LD_VAR 0 2
13934: NOT
13935: IFFALSE 13939
// exit ;
13937: GO 14082
// for i := 1 to 2 do
13939: LD_ADDR_VAR 0 1
13943: PUSH
13944: DOUBLE
13945: LD_INT 1
13947: DEC
13948: ST_TO_ADDR
13949: LD_INT 2
13951: PUSH
13952: FOR_TO
13953: IFFALSE 14080
// begin uc_side := your_side ;
13955: LD_ADDR_OWVAR 20
13959: PUSH
13960: LD_OWVAR 2
13964: ST_TO_ADDR
// uc_nation := nation_american ;
13965: LD_ADDR_OWVAR 21
13969: PUSH
13970: LD_INT 1
13972: ST_TO_ADDR
// vc_chassis := us_morphling ;
13973: LD_ADDR_OWVAR 37
13977: PUSH
13978: LD_INT 5
13980: ST_TO_ADDR
// vc_engine := engine_siberite ;
13981: LD_ADDR_OWVAR 39
13985: PUSH
13986: LD_INT 3
13988: ST_TO_ADDR
// vc_control := control_computer ;
13989: LD_ADDR_OWVAR 38
13993: PUSH
13994: LD_INT 3
13996: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13997: LD_ADDR_OWVAR 40
14001: PUSH
14002: LD_INT 10
14004: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14005: LD_VAR 0 2
14009: PUSH
14010: LD_INT 1
14012: ARRAY
14013: PPUSH
14014: CALL_OW 310
14018: NOT
14019: IFFALSE 14066
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14021: CALL_OW 45
14025: PPUSH
14026: LD_VAR 0 2
14030: PUSH
14031: LD_INT 1
14033: ARRAY
14034: PPUSH
14035: CALL_OW 250
14039: PPUSH
14040: LD_VAR 0 2
14044: PUSH
14045: LD_INT 1
14047: ARRAY
14048: PPUSH
14049: CALL_OW 251
14053: PPUSH
14054: LD_INT 12
14056: PPUSH
14057: LD_INT 1
14059: PPUSH
14060: CALL_OW 50
14064: GO 14078
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14066: CALL_OW 45
14070: PPUSH
14071: LD_INT 1
14073: PPUSH
14074: CALL_OW 51
// end ;
14078: GO 13952
14080: POP
14081: POP
// end ;
14082: PPOPN 2
14084: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14085: LD_EXP 22
14089: PUSH
14090: LD_EXP 68
14094: AND
14095: IFFALSE 14317
14097: GO 14099
14099: DISABLE
14100: LD_INT 0
14102: PPUSH
14103: PPUSH
14104: PPUSH
14105: PPUSH
14106: PPUSH
14107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14108: LD_ADDR_VAR 0 6
14112: PUSH
14113: LD_INT 22
14115: PUSH
14116: LD_OWVAR 2
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 21
14127: PUSH
14128: LD_INT 1
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: LD_INT 3
14137: PUSH
14138: LD_INT 23
14140: PUSH
14141: LD_INT 0
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 69
14161: ST_TO_ADDR
// if not tmp then
14162: LD_VAR 0 6
14166: NOT
14167: IFFALSE 14171
// exit ;
14169: GO 14317
// s1 := rand ( 1 , 4 ) ;
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: LD_INT 1
14178: PPUSH
14179: LD_INT 4
14181: PPUSH
14182: CALL_OW 12
14186: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14187: LD_ADDR_VAR 0 4
14191: PUSH
14192: LD_VAR 0 6
14196: PUSH
14197: LD_INT 1
14199: ARRAY
14200: PPUSH
14201: LD_VAR 0 2
14205: PPUSH
14206: CALL_OW 259
14210: ST_TO_ADDR
// if s1 = 1 then
14211: LD_VAR 0 2
14215: PUSH
14216: LD_INT 1
14218: EQUAL
14219: IFFALSE 14239
// s2 := rand ( 2 , 4 ) else
14221: LD_ADDR_VAR 0 3
14225: PUSH
14226: LD_INT 2
14228: PPUSH
14229: LD_INT 4
14231: PPUSH
14232: CALL_OW 12
14236: ST_TO_ADDR
14237: GO 14247
// s2 := 1 ;
14239: LD_ADDR_VAR 0 3
14243: PUSH
14244: LD_INT 1
14246: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14247: LD_ADDR_VAR 0 5
14251: PUSH
14252: LD_VAR 0 6
14256: PUSH
14257: LD_INT 1
14259: ARRAY
14260: PPUSH
14261: LD_VAR 0 3
14265: PPUSH
14266: CALL_OW 259
14270: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14271: LD_VAR 0 6
14275: PUSH
14276: LD_INT 1
14278: ARRAY
14279: PPUSH
14280: LD_VAR 0 2
14284: PPUSH
14285: LD_VAR 0 5
14289: PPUSH
14290: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14294: LD_VAR 0 6
14298: PUSH
14299: LD_INT 1
14301: ARRAY
14302: PPUSH
14303: LD_VAR 0 3
14307: PPUSH
14308: LD_VAR 0 4
14312: PPUSH
14313: CALL_OW 237
// end ;
14317: PPOPN 6
14319: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14320: LD_EXP 22
14324: PUSH
14325: LD_EXP 69
14329: AND
14330: IFFALSE 14409
14332: GO 14334
14334: DISABLE
14335: LD_INT 0
14337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14338: LD_ADDR_VAR 0 1
14342: PUSH
14343: LD_INT 22
14345: PUSH
14346: LD_OWVAR 2
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 30
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PPUSH
14369: CALL_OW 69
14373: ST_TO_ADDR
// if not tmp then
14374: LD_VAR 0 1
14378: NOT
14379: IFFALSE 14383
// exit ;
14381: GO 14409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 1
14390: PPUSH
14391: LD_VAR 0 1
14395: PPUSH
14396: CALL_OW 12
14400: ARRAY
14401: PPUSH
14402: LD_INT 1
14404: PPUSH
14405: CALL_OW 234
// end ;
14409: PPOPN 1
14411: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14412: LD_EXP 22
14416: PUSH
14417: LD_EXP 70
14421: AND
14422: IFFALSE 14534
14424: GO 14426
14426: DISABLE
14427: LD_INT 0
14429: PPUSH
14430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14431: LD_ADDR_VAR 0 2
14435: PUSH
14436: LD_INT 22
14438: PUSH
14439: LD_OWVAR 2
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 2
14450: PUSH
14451: LD_INT 30
14453: PUSH
14454: LD_INT 27
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 26
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: LD_INT 30
14473: PUSH
14474: LD_INT 28
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PPUSH
14491: CALL_OW 69
14495: ST_TO_ADDR
// if not tmp then
14496: LD_VAR 0 2
14500: NOT
14501: IFFALSE 14505
// exit ;
14503: GO 14534
// for i in tmp do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: LD_VAR 0 2
14514: PUSH
14515: FOR_IN
14516: IFFALSE 14532
// SetLives ( i , 1 ) ;
14518: LD_VAR 0 1
14522: PPUSH
14523: LD_INT 1
14525: PPUSH
14526: CALL_OW 234
14530: GO 14515
14532: POP
14533: POP
// end ;
14534: PPOPN 2
14536: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14537: LD_EXP 22
14541: PUSH
14542: LD_EXP 71
14546: AND
14547: IFFALSE 14821
14549: GO 14551
14551: DISABLE
14552: LD_INT 0
14554: PPUSH
14555: PPUSH
14556: PPUSH
// begin i := rand ( 1 , 7 ) ;
14557: LD_ADDR_VAR 0 1
14561: PUSH
14562: LD_INT 1
14564: PPUSH
14565: LD_INT 7
14567: PPUSH
14568: CALL_OW 12
14572: ST_TO_ADDR
// case i of 1 :
14573: LD_VAR 0 1
14577: PUSH
14578: LD_INT 1
14580: DOUBLE
14581: EQUAL
14582: IFTRUE 14586
14584: GO 14596
14586: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14587: LD_STRING earthquake(getX(game), 0, 32)
14589: PPUSH
14590: CALL_OW 559
14594: GO 14821
14596: LD_INT 2
14598: DOUBLE
14599: EQUAL
14600: IFTRUE 14604
14602: GO 14618
14604: POP
// begin ToLua ( displayStucuk(); ) ;
14605: LD_STRING displayStucuk();
14607: PPUSH
14608: CALL_OW 559
// ResetFog ;
14612: CALL_OW 335
// end ; 3 :
14616: GO 14821
14618: LD_INT 3
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14730
14626: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14627: LD_ADDR_VAR 0 2
14631: PUSH
14632: LD_INT 22
14634: PUSH
14635: LD_OWVAR 2
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 25
14646: PUSH
14647: LD_INT 1
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PPUSH
14658: CALL_OW 69
14662: ST_TO_ADDR
// if not tmp then
14663: LD_VAR 0 2
14667: NOT
14668: IFFALSE 14672
// exit ;
14670: GO 14821
// un := tmp [ rand ( 1 , tmp ) ] ;
14672: LD_ADDR_VAR 0 3
14676: PUSH
14677: LD_VAR 0 2
14681: PUSH
14682: LD_INT 1
14684: PPUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: CALL_OW 12
14694: ARRAY
14695: ST_TO_ADDR
// if Crawls ( un ) then
14696: LD_VAR 0 3
14700: PPUSH
14701: CALL_OW 318
14705: IFFALSE 14716
// ComWalk ( un ) ;
14707: LD_VAR 0 3
14711: PPUSH
14712: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14716: LD_VAR 0 3
14720: PPUSH
14721: LD_INT 8
14723: PPUSH
14724: CALL_OW 336
// end ; 4 :
14728: GO 14821
14730: LD_INT 4
14732: DOUBLE
14733: EQUAL
14734: IFTRUE 14738
14736: GO 14799
14738: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14739: LD_ADDR_VAR 0 2
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_OWVAR 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 30
14758: PUSH
14759: LD_INT 29
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PPUSH
14770: CALL_OW 69
14774: ST_TO_ADDR
// if not tmp then
14775: LD_VAR 0 2
14779: NOT
14780: IFFALSE 14784
// exit ;
14782: GO 14821
// DestroyUnit ( tmp [ 1 ] ) ;
14784: LD_VAR 0 2
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PPUSH
14793: CALL_OW 65
// end ; 5 .. 7 :
14797: GO 14821
14799: LD_INT 5
14801: DOUBLE
14802: GREATEREQUAL
14803: IFFALSE 14811
14805: LD_INT 7
14807: DOUBLE
14808: LESSEQUAL
14809: IFTRUE 14813
14811: GO 14820
14813: POP
// StreamSibBomb ; end ;
14814: CALL 11071 0 0
14818: GO 14821
14820: POP
// end ;
14821: PPOPN 3
14823: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14824: LD_EXP 22
14828: PUSH
14829: LD_EXP 72
14833: AND
14834: IFFALSE 14990
14836: GO 14838
14838: DISABLE
14839: LD_INT 0
14841: PPUSH
14842: PPUSH
14843: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14844: LD_ADDR_VAR 0 2
14848: PUSH
14849: LD_INT 81
14851: PUSH
14852: LD_OWVAR 2
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 2
14863: PUSH
14864: LD_INT 21
14866: PUSH
14867: LD_INT 1
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 2
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: LIST
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: ST_TO_ADDR
// if not tmp then
14898: LD_VAR 0 2
14902: NOT
14903: IFFALSE 14907
// exit ;
14905: GO 14990
// p := 0 ;
14907: LD_ADDR_VAR 0 3
14911: PUSH
14912: LD_INT 0
14914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14915: LD_INT 35
14917: PPUSH
14918: CALL_OW 67
// p := p + 1 ;
14922: LD_ADDR_VAR 0 3
14926: PUSH
14927: LD_VAR 0 3
14931: PUSH
14932: LD_INT 1
14934: PLUS
14935: ST_TO_ADDR
// for i in tmp do
14936: LD_ADDR_VAR 0 1
14940: PUSH
14941: LD_VAR 0 2
14945: PUSH
14946: FOR_IN
14947: IFFALSE 14978
// if GetLives ( i ) < 1000 then
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 256
14958: PUSH
14959: LD_INT 1000
14961: LESS
14962: IFFALSE 14976
// SetLives ( i , 1000 ) ;
14964: LD_VAR 0 1
14968: PPUSH
14969: LD_INT 1000
14971: PPUSH
14972: CALL_OW 234
14976: GO 14946
14978: POP
14979: POP
// until p > 20 ;
14980: LD_VAR 0 3
14984: PUSH
14985: LD_INT 20
14987: GREATER
14988: IFFALSE 14915
// end ;
14990: PPOPN 3
14992: END
// every 0 0$1 trigger StreamModeActive and sTime do
14993: LD_EXP 22
14997: PUSH
14998: LD_EXP 73
15002: AND
15003: IFFALSE 15038
15005: GO 15007
15007: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15008: LD_INT 28
15010: PPUSH
15011: LD_OWVAR 2
15015: PPUSH
15016: LD_INT 2
15018: PPUSH
15019: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15023: LD_INT 30
15025: PPUSH
15026: LD_OWVAR 2
15030: PPUSH
15031: LD_INT 2
15033: PPUSH
15034: CALL_OW 322
// end ;
15038: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15039: LD_EXP 22
15043: PUSH
15044: LD_EXP 74
15048: AND
15049: IFFALSE 15170
15051: GO 15053
15053: DISABLE
15054: LD_INT 0
15056: PPUSH
15057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15058: LD_ADDR_VAR 0 2
15062: PUSH
15063: LD_INT 22
15065: PUSH
15066: LD_OWVAR 2
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 21
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 3
15087: PUSH
15088: LD_INT 23
15090: PUSH
15091: LD_INT 0
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: PPUSH
15107: CALL_OW 69
15111: ST_TO_ADDR
// if not tmp then
15112: LD_VAR 0 2
15116: NOT
15117: IFFALSE 15121
// exit ;
15119: GO 15170
// for i in tmp do
15121: LD_ADDR_VAR 0 1
15125: PUSH
15126: LD_VAR 0 2
15130: PUSH
15131: FOR_IN
15132: IFFALSE 15168
// begin if Crawls ( i ) then
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 318
15143: IFFALSE 15154
// ComWalk ( i ) ;
15145: LD_VAR 0 1
15149: PPUSH
15150: CALL_OW 138
// SetClass ( i , 2 ) ;
15154: LD_VAR 0 1
15158: PPUSH
15159: LD_INT 2
15161: PPUSH
15162: CALL_OW 336
// end ;
15166: GO 15131
15168: POP
15169: POP
// end ;
15170: PPOPN 2
15172: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15173: LD_EXP 22
15177: PUSH
15178: LD_EXP 75
15182: AND
15183: IFFALSE 15464
15185: GO 15187
15187: DISABLE
15188: LD_INT 0
15190: PPUSH
15191: PPUSH
15192: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15193: LD_OWVAR 2
15197: PPUSH
15198: LD_INT 9
15200: PPUSH
15201: LD_INT 1
15203: PPUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15211: LD_INT 9
15213: PPUSH
15214: LD_OWVAR 2
15218: PPUSH
15219: CALL_OW 343
// uc_side := 9 ;
15223: LD_ADDR_OWVAR 20
15227: PUSH
15228: LD_INT 9
15230: ST_TO_ADDR
// uc_nation := 2 ;
15231: LD_ADDR_OWVAR 21
15235: PUSH
15236: LD_INT 2
15238: ST_TO_ADDR
// hc_name := Dark Warrior ;
15239: LD_ADDR_OWVAR 26
15243: PUSH
15244: LD_STRING Dark Warrior
15246: ST_TO_ADDR
// hc_gallery :=  ;
15247: LD_ADDR_OWVAR 33
15251: PUSH
15252: LD_STRING 
15254: ST_TO_ADDR
// hc_noskilllimit := true ;
15255: LD_ADDR_OWVAR 76
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15263: LD_ADDR_OWVAR 31
15267: PUSH
15268: LD_INT 30
15270: PUSH
15271: LD_INT 30
15273: PUSH
15274: LD_INT 30
15276: PUSH
15277: LD_INT 30
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: ST_TO_ADDR
// un := CreateHuman ;
15286: LD_ADDR_VAR 0 3
15290: PUSH
15291: CALL_OW 44
15295: ST_TO_ADDR
// hc_noskilllimit := false ;
15296: LD_ADDR_OWVAR 76
15300: PUSH
15301: LD_INT 0
15303: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15304: LD_VAR 0 3
15308: PPUSH
15309: LD_INT 1
15311: PPUSH
15312: CALL_OW 51
// p := 0 ;
15316: LD_ADDR_VAR 0 2
15320: PUSH
15321: LD_INT 0
15323: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15324: LD_INT 35
15326: PPUSH
15327: CALL_OW 67
// p := p + 1 ;
15331: LD_ADDR_VAR 0 2
15335: PUSH
15336: LD_VAR 0 2
15340: PUSH
15341: LD_INT 1
15343: PLUS
15344: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15345: LD_VAR 0 3
15349: PPUSH
15350: CALL_OW 256
15354: PUSH
15355: LD_INT 1000
15357: LESS
15358: IFFALSE 15372
// SetLives ( un , 1000 ) ;
15360: LD_VAR 0 3
15364: PPUSH
15365: LD_INT 1000
15367: PPUSH
15368: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15372: LD_VAR 0 3
15376: PPUSH
15377: LD_INT 81
15379: PUSH
15380: LD_OWVAR 2
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 91
15391: PUSH
15392: LD_VAR 0 3
15396: PUSH
15397: LD_INT 30
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PPUSH
15409: CALL_OW 69
15413: PPUSH
15414: LD_VAR 0 3
15418: PPUSH
15419: CALL_OW 74
15423: PPUSH
15424: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15428: LD_VAR 0 2
15432: PUSH
15433: LD_INT 60
15435: GREATER
15436: PUSH
15437: LD_VAR 0 3
15441: PPUSH
15442: CALL_OW 301
15446: OR
15447: IFFALSE 15324
// if un then
15449: LD_VAR 0 3
15453: IFFALSE 15464
// RemoveUnit ( un ) ;
15455: LD_VAR 0 3
15459: PPUSH
15460: CALL_OW 64
// end ;
15464: PPOPN 3
15466: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15467: LD_INT 0
15469: PPUSH
15470: PPUSH
15471: PPUSH
15472: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15473: LD_ADDR_VAR 0 4
15477: PUSH
15478: LD_INT 22
15480: PUSH
15481: LD_OWVAR 2
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: PUSH
15490: LD_INT 2
15492: PUSH
15493: LD_INT 30
15495: PUSH
15496: LD_INT 0
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 30
15505: PUSH
15506: LD_INT 1
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: EMPTY
15514: LIST
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PPUSH
15522: CALL_OW 69
15526: ST_TO_ADDR
// if not tmp then
15527: LD_VAR 0 4
15531: NOT
15532: IFFALSE 15536
// exit ;
15534: GO 15595
// for i in tmp do
15536: LD_ADDR_VAR 0 2
15540: PUSH
15541: LD_VAR 0 4
15545: PUSH
15546: FOR_IN
15547: IFFALSE 15593
// for j = 1 to 3 do
15549: LD_ADDR_VAR 0 3
15553: PUSH
15554: DOUBLE
15555: LD_INT 1
15557: DEC
15558: ST_TO_ADDR
15559: LD_INT 3
15561: PUSH
15562: FOR_TO
15563: IFFALSE 15589
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15565: LD_VAR 0 2
15569: PPUSH
15570: CALL_OW 274
15574: PPUSH
15575: LD_VAR 0 3
15579: PPUSH
15580: LD_INT 99999
15582: PPUSH
15583: CALL_OW 277
15587: GO 15562
15589: POP
15590: POP
15591: GO 15546
15593: POP
15594: POP
// end ;
15595: LD_VAR 0 1
15599: RET
// export function hHackSetLevel10 ; var i , j ; begin
15600: LD_INT 0
15602: PPUSH
15603: PPUSH
15604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_INT 21
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PPUSH
15620: CALL_OW 69
15624: PUSH
15625: FOR_IN
15626: IFFALSE 15678
// if IsSelected ( i ) then
15628: LD_VAR 0 2
15632: PPUSH
15633: CALL_OW 306
15637: IFFALSE 15676
// begin for j := 1 to 4 do
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: DOUBLE
15645: LD_INT 1
15647: DEC
15648: ST_TO_ADDR
15649: LD_INT 4
15651: PUSH
15652: FOR_TO
15653: IFFALSE 15674
// SetSkill ( i , j , 10 ) ;
15655: LD_VAR 0 2
15659: PPUSH
15660: LD_VAR 0 3
15664: PPUSH
15665: LD_INT 10
15667: PPUSH
15668: CALL_OW 237
15672: GO 15652
15674: POP
15675: POP
// end ;
15676: GO 15625
15678: POP
15679: POP
// end ;
15680: LD_VAR 0 1
15684: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15685: LD_INT 0
15687: PPUSH
15688: PPUSH
15689: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15690: LD_ADDR_VAR 0 2
15694: PUSH
15695: LD_INT 22
15697: PUSH
15698: LD_OWVAR 2
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 21
15709: PUSH
15710: LD_INT 1
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 69
15725: PUSH
15726: FOR_IN
15727: IFFALSE 15768
// begin for j := 1 to 4 do
15729: LD_ADDR_VAR 0 3
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_INT 4
15741: PUSH
15742: FOR_TO
15743: IFFALSE 15764
// SetSkill ( i , j , 10 ) ;
15745: LD_VAR 0 2
15749: PPUSH
15750: LD_VAR 0 3
15754: PPUSH
15755: LD_INT 10
15757: PPUSH
15758: CALL_OW 237
15762: GO 15742
15764: POP
15765: POP
// end ;
15766: GO 15726
15768: POP
15769: POP
// end ;
15770: LD_VAR 0 1
15774: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
15775: LD_INT 0
15777: PPUSH
// uc_side := your_side ;
15778: LD_ADDR_OWVAR 20
15782: PUSH
15783: LD_OWVAR 2
15787: ST_TO_ADDR
// uc_nation := nation ;
15788: LD_ADDR_OWVAR 21
15792: PUSH
15793: LD_VAR 0 1
15797: ST_TO_ADDR
// InitHc ;
15798: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15802: LD_INT 0
15804: PPUSH
15805: LD_VAR 0 2
15809: PPUSH
15810: LD_VAR 0 3
15814: PPUSH
15815: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15819: CALL_OW 44
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 51
// end ;
15831: LD_VAR 0 4
15835: RET
// export function hHackSpawnVehicle ; begin
15836: LD_INT 0
15838: PPUSH
// uc_side := your_side ;
15839: LD_ADDR_OWVAR 20
15843: PUSH
15844: LD_OWVAR 2
15848: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
15849: LD_ADDR_OWVAR 21
15853: PUSH
15854: LD_INT 1
15856: PPUSH
15857: LD_INT 3
15859: PPUSH
15860: CALL_OW 12
15864: ST_TO_ADDR
// InitVc ;
15865: CALL_OW 20
// case uc_nation of 1 :
15869: LD_OWVAR 21
15873: PUSH
15874: LD_INT 1
15876: DOUBLE
15877: EQUAL
15878: IFTRUE 15882
15880: GO 16026
15882: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
15883: LD_ADDR_OWVAR 37
15887: PUSH
15888: LD_INT 1
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: LD_INT 3
15896: PUSH
15897: LD_INT 4
15899: PUSH
15900: LD_INT 5
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 1
15912: PPUSH
15913: LD_INT 5
15915: PPUSH
15916: CALL_OW 12
15920: ARRAY
15921: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
15922: LD_ADDR_OWVAR 39
15926: PUSH
15927: LD_INT 1
15929: PPUSH
15930: LD_INT 3
15932: PPUSH
15933: CALL_OW 12
15937: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
15938: LD_ADDR_OWVAR 38
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 3
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 1
15959: PPUSH
15960: LD_INT 3
15962: PPUSH
15963: CALL_OW 12
15967: ARRAY
15968: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
15969: LD_ADDR_OWVAR 40
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: LD_INT 4
15979: PUSH
15980: LD_INT 5
15982: PUSH
15983: LD_INT 3
15985: PUSH
15986: LD_INT 7
15988: PUSH
15989: LD_INT 8
15991: PUSH
15992: LD_INT 9
15994: PUSH
15995: LD_INT 10
15997: PUSH
15998: LD_INT 6
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: PUSH
16012: LD_INT 1
16014: PPUSH
16015: LD_INT 9
16017: PPUSH
16018: CALL_OW 12
16022: ARRAY
16023: ST_TO_ADDR
// end ; 2 :
16024: GO 16291
16026: LD_INT 2
16028: DOUBLE
16029: EQUAL
16030: IFTRUE 16034
16032: GO 16158
16034: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
16035: LD_ADDR_OWVAR 37
16039: PUSH
16040: LD_INT 11
16042: PUSH
16043: LD_INT 12
16045: PUSH
16046: LD_INT 13
16048: PUSH
16049: LD_INT 14
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 1
16060: PPUSH
16061: LD_INT 4
16063: PPUSH
16064: CALL_OW 12
16068: ARRAY
16069: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16070: LD_ADDR_OWVAR 39
16074: PUSH
16075: LD_INT 1
16077: PPUSH
16078: LD_INT 3
16080: PPUSH
16081: CALL_OW 12
16085: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
16086: LD_ADDR_OWVAR 38
16090: PUSH
16091: LD_INT 1
16093: PUSH
16094: LD_INT 2
16096: PUSH
16097: LD_INT 5
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 1
16107: PPUSH
16108: LD_INT 3
16110: PPUSH
16111: CALL_OW 12
16115: ARRAY
16116: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
16117: LD_ADDR_OWVAR 40
16121: PUSH
16122: LD_INT 24
16124: PUSH
16125: LD_INT 26
16127: PUSH
16128: LD_INT 27
16130: PUSH
16131: LD_INT 28
16133: PUSH
16134: LD_INT 29
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 1
16146: PPUSH
16147: LD_INT 5
16149: PPUSH
16150: CALL_OW 12
16154: ARRAY
16155: ST_TO_ADDR
// end ; 3 :
16156: GO 16291
16158: LD_INT 3
16160: DOUBLE
16161: EQUAL
16162: IFTRUE 16166
16164: GO 16290
16166: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
16167: LD_ADDR_OWVAR 37
16171: PUSH
16172: LD_INT 21
16174: PUSH
16175: LD_INT 23
16177: PUSH
16178: LD_INT 22
16180: PUSH
16181: LD_INT 24
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: PUSH
16190: LD_INT 1
16192: PPUSH
16193: LD_INT 4
16195: PPUSH
16196: CALL_OW 12
16200: ARRAY
16201: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16202: LD_ADDR_OWVAR 39
16206: PUSH
16207: LD_INT 1
16209: PPUSH
16210: LD_INT 3
16212: PPUSH
16213: CALL_OW 12
16217: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
16218: LD_ADDR_OWVAR 38
16222: PUSH
16223: LD_INT 1
16225: PUSH
16226: LD_INT 3
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 1
16235: PPUSH
16236: LD_INT 2
16238: PPUSH
16239: CALL_OW 12
16243: ARRAY
16244: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
16245: LD_ADDR_OWVAR 40
16249: PUSH
16250: LD_INT 42
16252: PUSH
16253: LD_INT 43
16255: PUSH
16256: LD_INT 44
16258: PUSH
16259: LD_INT 46
16261: PUSH
16262: LD_INT 48
16264: PUSH
16265: LD_INT 47
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 1
16278: PPUSH
16279: LD_INT 6
16281: PPUSH
16282: CALL_OW 12
16286: ARRAY
16287: ST_TO_ADDR
// end ; end ;
16288: GO 16291
16290: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16291: CALL_OW 45
16295: PPUSH
16296: LD_INT 1
16298: PPUSH
16299: CALL_OW 51
// end ;
16303: LD_VAR 0 1
16307: RET
// export hInvincible ; every 1 do
16308: GO 16310
16310: DISABLE
// hInvincible := [ ] ;
16311: LD_ADDR_EXP 76
16315: PUSH
16316: EMPTY
16317: ST_TO_ADDR
16318: END
// every 10 do var i ;
16319: GO 16321
16321: DISABLE
16322: LD_INT 0
16324: PPUSH
// begin enable ;
16325: ENABLE
// if not hInvincible then
16326: LD_EXP 76
16330: NOT
16331: IFFALSE 16335
// exit ;
16333: GO 16379
// for i in hInvincible do
16335: LD_ADDR_VAR 0 1
16339: PUSH
16340: LD_EXP 76
16344: PUSH
16345: FOR_IN
16346: IFFALSE 16377
// if GetLives ( i ) < 1000 then
16348: LD_VAR 0 1
16352: PPUSH
16353: CALL_OW 256
16357: PUSH
16358: LD_INT 1000
16360: LESS
16361: IFFALSE 16375
// SetLives ( i , 1000 ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: LD_INT 1000
16370: PPUSH
16371: CALL_OW 234
16375: GO 16345
16377: POP
16378: POP
// end ;
16379: PPOPN 1
16381: END
// export function hHackInvincible ; var i ; begin
16382: LD_INT 0
16384: PPUSH
16385: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16386: LD_ADDR_VAR 0 2
16390: PUSH
16391: LD_INT 2
16393: PUSH
16394: LD_INT 21
16396: PUSH
16397: LD_INT 1
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 21
16406: PUSH
16407: LD_INT 2
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: PPUSH
16419: CALL_OW 69
16423: PUSH
16424: FOR_IN
16425: IFFALSE 16486
// if IsSelected ( i ) then
16427: LD_VAR 0 2
16431: PPUSH
16432: CALL_OW 306
16436: IFFALSE 16484
// begin if i in hInvincible then
16438: LD_VAR 0 2
16442: PUSH
16443: LD_EXP 76
16447: IN
16448: IFFALSE 16468
// hInvincible := hInvincible diff i else
16450: LD_ADDR_EXP 76
16454: PUSH
16455: LD_EXP 76
16459: PUSH
16460: LD_VAR 0 2
16464: DIFF
16465: ST_TO_ADDR
16466: GO 16484
// hInvincible := hInvincible union i ;
16468: LD_ADDR_EXP 76
16472: PUSH
16473: LD_EXP 76
16477: PUSH
16478: LD_VAR 0 2
16482: UNION
16483: ST_TO_ADDR
// end ;
16484: GO 16424
16486: POP
16487: POP
// end ;
16488: LD_VAR 0 1
16492: RET
// export function hHackInvisible ; var i , j ; begin
16493: LD_INT 0
16495: PPUSH
16496: PPUSH
16497: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16498: LD_ADDR_VAR 0 2
16502: PUSH
16503: LD_INT 21
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: PUSH
16518: FOR_IN
16519: IFFALSE 16543
// if IsSelected ( i ) then
16521: LD_VAR 0 2
16525: PPUSH
16526: CALL_OW 306
16530: IFFALSE 16541
// ComForceInvisible ( i ) ;
16532: LD_VAR 0 2
16536: PPUSH
16537: CALL_OW 496
16541: GO 16518
16543: POP
16544: POP
// end ;
16545: LD_VAR 0 1
16549: RET
// export function hHackChangeYourSide ; begin
16550: LD_INT 0
16552: PPUSH
// if your_side = 8 then
16553: LD_OWVAR 2
16557: PUSH
16558: LD_INT 8
16560: EQUAL
16561: IFFALSE 16573
// your_side := 0 else
16563: LD_ADDR_OWVAR 2
16567: PUSH
16568: LD_INT 0
16570: ST_TO_ADDR
16571: GO 16587
// your_side := your_side + 1 ;
16573: LD_ADDR_OWVAR 2
16577: PUSH
16578: LD_OWVAR 2
16582: PUSH
16583: LD_INT 1
16585: PLUS
16586: ST_TO_ADDR
// end ;
16587: LD_VAR 0 1
16591: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16592: LD_INT 0
16594: PPUSH
16595: PPUSH
16596: PPUSH
// for i in all_units do
16597: LD_ADDR_VAR 0 2
16601: PUSH
16602: LD_OWVAR 3
16606: PUSH
16607: FOR_IN
16608: IFFALSE 16686
// if IsSelected ( i ) then
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 306
16619: IFFALSE 16684
// begin j := GetSide ( i ) ;
16621: LD_ADDR_VAR 0 3
16625: PUSH
16626: LD_VAR 0 2
16630: PPUSH
16631: CALL_OW 255
16635: ST_TO_ADDR
// if j = 8 then
16636: LD_VAR 0 3
16640: PUSH
16641: LD_INT 8
16643: EQUAL
16644: IFFALSE 16656
// j := 0 else
16646: LD_ADDR_VAR 0 3
16650: PUSH
16651: LD_INT 0
16653: ST_TO_ADDR
16654: GO 16670
// j := j + 1 ;
16656: LD_ADDR_VAR 0 3
16660: PUSH
16661: LD_VAR 0 3
16665: PUSH
16666: LD_INT 1
16668: PLUS
16669: ST_TO_ADDR
// SetSide ( i , j ) ;
16670: LD_VAR 0 2
16674: PPUSH
16675: LD_VAR 0 3
16679: PPUSH
16680: CALL_OW 235
// end ;
16684: GO 16607
16686: POP
16687: POP
// end ;
16688: LD_VAR 0 1
16692: RET
// export function hHackFog ; begin
16693: LD_INT 0
16695: PPUSH
// FogOff ( true ) ;
16696: LD_INT 1
16698: PPUSH
16699: CALL_OW 344
// end ;
16703: LD_VAR 0 1
16707: RET
// export function hHackApeman ; begin
16708: LD_INT 0
16710: PPUSH
// uc_side := your_side ;
16711: LD_ADDR_OWVAR 20
16715: PUSH
16716: LD_OWVAR 2
16720: ST_TO_ADDR
// uc_nation := 0 ;
16721: LD_ADDR_OWVAR 21
16725: PUSH
16726: LD_INT 0
16728: ST_TO_ADDR
// hc_name :=  ;
16729: LD_ADDR_OWVAR 26
16733: PUSH
16734: LD_STRING 
16736: ST_TO_ADDR
// hc_gallery :=  ;
16737: LD_ADDR_OWVAR 33
16741: PUSH
16742: LD_STRING 
16744: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
16745: LD_ADDR_OWVAR 31
16749: PUSH
16750: LD_INT 0
16752: PUSH
16753: LD_INT 0
16755: PUSH
16756: LD_INT 0
16758: PUSH
16759: LD_INT 0
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: ST_TO_ADDR
// hc_class := class_apeman ;
16768: LD_ADDR_OWVAR 28
16772: PUSH
16773: LD_INT 12
16775: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
16776: CALL_OW 44
16780: PPUSH
16781: LD_INT 1
16783: PPUSH
16784: CALL_OW 51
// end ;
16788: LD_VAR 0 1
16792: RET
// export function hHackBoom ; begin
16793: LD_INT 0
16795: PPUSH
// uc_side := your_side ;
16796: LD_ADDR_OWVAR 20
16800: PUSH
16801: LD_OWVAR 2
16805: ST_TO_ADDR
// uc_nation := 1 ;
16806: LD_ADDR_OWVAR 21
16810: PUSH
16811: LD_INT 1
16813: ST_TO_ADDR
// vc_chassis := us_morphling ;
16814: LD_ADDR_OWVAR 37
16818: PUSH
16819: LD_INT 5
16821: ST_TO_ADDR
// vc_engine := engine_siberite ;
16822: LD_ADDR_OWVAR 39
16826: PUSH
16827: LD_INT 3
16829: ST_TO_ADDR
// vc_control := control_computer ;
16830: LD_ADDR_OWVAR 38
16834: PUSH
16835: LD_INT 3
16837: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
16838: LD_ADDR_OWVAR 40
16842: PUSH
16843: LD_INT 8
16845: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16846: CALL_OW 45
16850: PPUSH
16851: LD_INT 1
16853: PPUSH
16854: CALL_OW 51
// end ;
16858: LD_VAR 0 1
16862: RET
