// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 51 0 0
// PrepareAmericanBase ;
  31: CALL 1438 0 0
// PrepareHeikeGroup ;
  35: CALL 790 0 0
// FogOff ( 1 ) ;
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 344
// PrepareArabian ;
  46: CALL 1686 0 0
// end ;
  50: END
// export Heike , Omar , Schulz , Abdul , Olaf , Kaia ; export Kurt , Hans , Ali , Shariff , Gensher , Farmer ; export scientists ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon ; function InitVariables ; begin
  51: LD_INT 0
  53: PPUSH
// foundPoints := 0 ;
  54: LD_ADDR_EXP 14
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// goWithHeike := false ;
  62: LD_ADDR_EXP 15
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// baseSpotted := false ;
  70: LD_ADDR_EXP 16
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// heikeNearbyEon := false ;
  78: LD_ADDR_EXP 17
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// scientists := [ ] ;
  86: LD_ADDR_EXP 13
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ; end_of_file
  93: LD_VAR 0 1
  97: RET
// export function Action ; begin
  98: LD_INT 0
 100: PPUSH
// InGameOn ;
 101: CALL_OW 8
// CenterNowOnXY ( 51 , 85 ) ;
 105: LD_INT 51
 107: PPUSH
 108: LD_INT 85
 110: PPUSH
 111: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 115: LD_INT 1
 117: PPUSH
 118: LD_INT 1
 120: PPUSH
 121: LD_INT 5
 123: PPUSH
 124: LD_INT 32763
 126: NEG
 127: PPUSH
 128: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 132: LD_INT 1
 134: PPUSH
 135: LD_INT 1
 137: PPUSH
 138: LD_INT 5
 140: PPUSH
 141: CALL_OW 331
// ComMoveXY ( [ Heike , Kaia ] , 53 , 88 ) ;
 145: LD_EXP 1
 149: PUSH
 150: LD_EXP 6
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: PPUSH
 159: LD_INT 53
 161: PPUSH
 162: LD_INT 88
 164: PPUSH
 165: CALL_OW 111
// wait ( 0 0$1 ) ;
 169: LD_INT 35
 171: PPUSH
 172: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 176: LD_EXP 6
 180: PPUSH
 181: LD_STRING DK-1
 183: PPUSH
 184: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 188: LD_EXP 1
 192: PPUSH
 193: LD_STRING DH-1
 195: PPUSH
 196: CALL_OW 88
// wait ( 0 0$2 ) ;
 200: LD_INT 70
 202: PPUSH
 203: CALL_OW 67
// PrepareArabian ;
 207: CALL 1686 0 0
// InGameOff ;
 211: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 215: LD_STRING O1
 217: PPUSH
 218: CALL_OW 337
// goWithHeike := true ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 1
 229: ST_TO_ADDR
// SaveForQuickRestart ;
 230: CALL_OW 22
// end ;
 234: LD_VAR 0 1
 238: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 239: LD_INT 2
 241: PPUSH
 242: LD_INT 5
 244: PPUSH
 245: CALL_OW 81
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 399
 255: GO 257
 257: DISABLE
 258: LD_INT 0
 260: PPUSH
// begin goWithHeike := false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// DialogueOn ;
 269: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 273: LD_EXP 1
 277: PPUSH
 278: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 282: LD_EXP 6
 286: PPUSH
 287: LD_STRING DK-betray-1
 289: PPUSH
 290: CALL_OW 88
// DialogueOff ;
 294: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 298: LD_EXP 6
 302: PPUSH
 303: LD_INT 90
 305: PPUSH
 306: LD_INT 46
 308: PPUSH
 309: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 313: LD_INT 35
 315: PPUSH
 316: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 320: LD_ADDR_VAR 0 1
 324: PUSH
 325: LD_INT 22
 327: PUSH
 328: LD_INT 5
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: LD_INT 25
 337: PUSH
 338: LD_INT 1
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: EMPTY
 346: LIST
 347: LIST
 348: PPUSH
 349: CALL_OW 69
 353: PUSH
 354: LD_EXP 6
 358: DIFF
 359: PUSH
 360: FOR_IN
 361: IFFALSE 379
// ComAttackUnit ( i , Heike ) ;
 363: LD_VAR 0 1
 367: PPUSH
 368: LD_EXP 1
 372: PPUSH
 373: CALL_OW 115
 377: GO 360
 379: POP
 380: POP
// until IsDead ( Heike ) ;
 381: LD_EXP 1
 385: PPUSH
 386: CALL_OW 301
 390: IFFALSE 313
// YouLost ( Betray ) ;
 392: LD_STRING Betray
 394: PPUSH
 395: CALL_OW 104
// end ;
 399: PPOPN 1
 401: END
// every 0 0$1 trigger goWithHeike do
 402: LD_EXP 15
 406: IFFALSE 461
 408: GO 410
 410: DISABLE
// begin enable ;
 411: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 412: LD_EXP 1
 416: PPUSH
 417: LD_EXP 6
 421: PPUSH
 422: CALL_OW 296
 426: PUSH
 427: LD_INT 3
 429: GREATER
 430: IFFALSE 461
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 432: LD_EXP 6
 436: PPUSH
 437: LD_EXP 1
 441: PPUSH
 442: CALL_OW 250
 446: PPUSH
 447: LD_EXP 1
 451: PPUSH
 452: CALL_OW 251
 456: PPUSH
 457: CALL_OW 111
// end ;
 461: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 462: LD_INT 2
 464: PPUSH
 465: LD_INT 47
 467: PPUSH
 468: LD_INT 68
 470: PPUSH
 471: CALL_OW 293
 475: PUSH
 476: LD_EXP 16
 480: NOT
 481: AND
 482: IFFALSE 526
 484: GO 486
 486: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 487: LD_EXP 1
 491: PPUSH
 492: LD_STRING DH-spot-1
 494: PPUSH
 495: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DR-spot-1 ) ;
 499: LD_INT 47
 501: PPUSH
 502: LD_INT 68
 504: PPUSH
 505: CALL_OW 428
 509: PPUSH
 510: CALL_OW 313
 514: PUSH
 515: LD_INT 1
 517: ARRAY
 518: PPUSH
 519: LD_STRING DR-spot-1
 521: PPUSH
 522: CALL_OW 88
// end ;
 526: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 527: LD_INT 2
 529: PPUSH
 530: LD_INT 93
 532: PPUSH
 533: LD_INT 89
 535: PPUSH
 536: CALL_OW 293
 540: PUSH
 541: LD_EXP 16
 545: NOT
 546: AND
 547: IFFALSE 591
 549: GO 551
 551: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 552: LD_EXP 1
 556: PPUSH
 557: LD_STRING DH-spot-1
 559: PPUSH
 560: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DR-spot-2 ) ;
 564: LD_INT 93
 566: PPUSH
 567: LD_INT 89
 569: PPUSH
 570: CALL_OW 428
 574: PPUSH
 575: CALL_OW 313
 579: PUSH
 580: LD_INT 1
 582: ARRAY
 583: PPUSH
 584: LD_STRING DR-spot-2
 586: PPUSH
 587: CALL_OW 88
// end ;
 591: END
// every 0 0$2 trigger GetDistUnits ( Heike , eon ) > 40 do
 592: LD_EXP 1
 596: PPUSH
 597: LD_INT 14
 599: PPUSH
 600: CALL_OW 296
 604: PUSH
 605: LD_INT 40
 607: GREATER
 608: IFFALSE 625
 610: GO 612
 612: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
 613: LD_EXP 6
 617: PPUSH
 618: LD_STRING DK-idle-1
 620: PPUSH
 621: CALL_OW 88
// end ;
 625: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
 626: LD_INT 2
 628: PPUSH
 629: LD_INT 59
 631: PPUSH
 632: LD_INT 47
 634: PPUSH
 635: CALL_OW 293
 639: IFFALSE 789
 641: GO 643
 643: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
 644: LD_INT 59
 646: PPUSH
 647: LD_INT 47
 649: PPUSH
 650: LD_INT 2
 652: PPUSH
 653: LD_INT 10
 655: NEG
 656: PPUSH
 657: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
 661: LD_INT 59
 663: PPUSH
 664: LD_INT 47
 666: PPUSH
 667: CALL_OW 86
// goWithHeike := false ;
 671: LD_ADDR_EXP 15
 675: PUSH
 676: LD_INT 0
 678: ST_TO_ADDR
// baseSpotted := true ;
 679: LD_ADDR_EXP 16
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// InGameOn ;
 687: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
 691: LD_EXP 1
 695: PUSH
 696: LD_EXP 6
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PPUSH
 705: LD_INT 54
 707: PPUSH
 708: LD_INT 45
 710: PPUSH
 711: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
 715: LD_EXP 1
 719: PUSH
 720: LD_EXP 6
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: PPUSH
 729: LD_INT 59
 731: PPUSH
 732: LD_INT 47
 734: PPUSH
 735: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
 739: LD_EXP 1
 743: PPUSH
 744: LD_STRING DH-base-1
 746: PPUSH
 747: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
 751: LD_EXP 6
 755: PPUSH
 756: LD_STRING DK-base-1
 758: PPUSH
 759: CALL_OW 88
// InGameOff ;
 763: CALL_OW 9
// foundPoints := foundPoints + 1 ;
 767: LD_ADDR_EXP 14
 771: PUSH
 772: LD_EXP 14
 776: PUSH
 777: LD_INT 1
 779: PLUS
 780: ST_TO_ADDR
// goWithHeike := true ;
 781: LD_ADDR_EXP 15
 785: PUSH
 786: LD_INT 1
 788: ST_TO_ADDR
// end ; end_of_file
 789: END
// export function PrepareHeikeGroup ; begin
 790: LD_INT 0
 792: PPUSH
// uc_side := 2 ;
 793: LD_ADDR_OWVAR 20
 797: PUSH
 798: LD_INT 2
 800: ST_TO_ADDR
// uc_nation := 2 ;
 801: LD_ADDR_OWVAR 21
 805: PUSH
 806: LD_INT 2
 808: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
 809: LD_ADDR_EXP 1
 813: PUSH
 814: LD_STRING Heike
 816: PPUSH
 817: CALL_OW 25
 821: ST_TO_ADDR
// uc_side := 5 ;
 822: LD_ADDR_OWVAR 20
 826: PUSH
 827: LD_INT 5
 829: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
 830: LD_ADDR_EXP 6
 834: PUSH
 835: LD_STRING Kaia
 837: PPUSH
 838: CALL_OW 25
 842: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
 843: LD_EXP 1
 847: PPUSH
 848: LD_INT 3
 850: PPUSH
 851: LD_INT 0
 853: PPUSH
 854: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
 858: LD_EXP 6
 862: PPUSH
 863: LD_INT 3
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// end ;
 873: LD_VAR 0 1
 877: RET
// export function PrepareSheikGroup ; var un , i ; begin
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
// uc_side := 5 ;
 883: LD_ADDR_OWVAR 20
 887: PUSH
 888: LD_INT 5
 890: ST_TO_ADDR
// uc_nation := 2 ;
 891: LD_ADDR_OWVAR 21
 895: PUSH
 896: LD_INT 2
 898: ST_TO_ADDR
// Ali := NewCharacter ( Ali ) ;
 899: LD_ADDR_EXP 9
 903: PUSH
 904: LD_STRING Ali
 906: PPUSH
 907: CALL_OW 25
 911: ST_TO_ADDR
// Gensher := NewCharacter ( Dietrich ) ;
 912: LD_ADDR_EXP 11
 916: PUSH
 917: LD_STRING Dietrich
 919: PPUSH
 920: CALL_OW 25
 924: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
 925: LD_ADDR_EXP 10
 929: PUSH
 930: LD_STRING Abdul
 932: PPUSH
 933: CALL_OW 25
 937: ST_TO_ADDR
// Schulz := NewCharacter ( Schulz ) ;
 938: LD_ADDR_EXP 3
 942: PUSH
 943: LD_STRING Schulz
 945: PPUSH
 946: CALL_OW 25
 950: ST_TO_ADDR
// Farmer := NewCharacter ( Farmer ) ;
 951: LD_ADDR_EXP 12
 955: PUSH
 956: LD_STRING Farmer
 958: PPUSH
 959: CALL_OW 25
 963: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
 964: LD_ADDR_EXP 2
 968: PUSH
 969: LD_STRING Omar
 971: PPUSH
 972: CALL_OW 25
 976: ST_TO_ADDR
// PlaceUnitXY ( Schulz , 101 , 53 , false ) ;
 977: LD_EXP 3
 981: PPUSH
 982: LD_INT 101
 984: PPUSH
 985: LD_INT 53
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: CALL_OW 48
// PlaceUnitXY ( Farmer , 99 , 50 , false ) ;
 995: LD_EXP 12
 999: PPUSH
1000: LD_INT 99
1002: PPUSH
1003: LD_INT 50
1005: PPUSH
1006: LD_INT 0
1008: PPUSH
1009: CALL_OW 48
// ComTurnUnit ( Schulz , Farmer ) ;
1013: LD_EXP 3
1017: PPUSH
1018: LD_EXP 12
1022: PPUSH
1023: CALL_OW 119
// ComTurnUnit ( Farmer , Schulz ) ;
1027: LD_EXP 12
1031: PPUSH
1032: LD_EXP 3
1036: PPUSH
1037: CALL_OW 119
// PlaceUnitXY ( Gensher , 80 , 36 , false ) ;
1041: LD_EXP 11
1045: PPUSH
1046: LD_INT 80
1048: PPUSH
1049: LD_INT 36
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL_OW 48
// ComHold ( Gensher ) ;
1059: LD_EXP 11
1063: PPUSH
1064: CALL_OW 140
// PlaceUnitXY ( Ali , 85 , 37 , false ) ;
1068: LD_EXP 9
1072: PPUSH
1073: LD_INT 85
1075: PPUSH
1076: LD_INT 37
1078: PPUSH
1079: LD_INT 0
1081: PPUSH
1082: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
1086: LD_EXP 10
1090: PPUSH
1091: LD_INT 87
1093: PPUSH
1094: LD_INT 37
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
1104: LD_EXP 2
1108: PPUSH
1109: LD_INT 85
1111: PPUSH
1112: LD_INT 35
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 48
// ComTurnUnit ( Ali , Shariff ) ;
1122: LD_EXP 9
1126: PPUSH
1127: LD_EXP 10
1131: PPUSH
1132: CALL_OW 119
// ComTurnUnit ( Shariff , Ali ) ;
1136: LD_EXP 10
1140: PPUSH
1141: LD_EXP 9
1145: PPUSH
1146: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
1150: LD_EXP 2
1154: PPUSH
1155: LD_EXP 10
1159: PPUSH
1160: CALL_OW 119
// for i := 1 to 2 do
1164: LD_ADDR_VAR 0 3
1168: PUSH
1169: DOUBLE
1170: LD_INT 1
1172: DEC
1173: ST_TO_ADDR
1174: LD_INT 2
1176: PUSH
1177: FOR_TO
1178: IFFALSE 1264
// begin PrepareHuman ( false , 4 , 6 ) ;
1180: LD_INT 0
1182: PPUSH
1183: LD_INT 4
1185: PPUSH
1186: LD_INT 6
1188: PPUSH
1189: CALL_OW 380
// un := CreateHuman ;
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: CALL_OW 44
1202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
1203: LD_VAR 0 2
1207: PPUSH
1208: LD_INT 90
1210: PPUSH
1211: LD_INT 44
1213: PPUSH
1214: LD_INT 3
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
1224: LD_VAR 0 2
1228: PPUSH
1229: LD_INT 91
1231: PPUSH
1232: LD_INT 43
1234: PPUSH
1235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
1239: LD_ADDR_EXP 13
1243: PUSH
1244: LD_EXP 13
1248: PPUSH
1249: LD_INT 1
1251: PPUSH
1252: LD_VAR 0 2
1256: PPUSH
1257: CALL_OW 2
1261: ST_TO_ADDR
// end ;
1262: GO 1177
1264: POP
1265: POP
// scientists := scientists diff 0 ;
1266: LD_ADDR_EXP 13
1270: PUSH
1271: LD_EXP 13
1275: PUSH
1276: LD_INT 0
1278: DIFF
1279: ST_TO_ADDR
// end ;
1280: LD_VAR 0 1
1284: RET
// export function PrepareKurtGroup ; var i ; begin
1285: LD_INT 0
1287: PPUSH
1288: PPUSH
// uc_side := 5 ;
1289: LD_ADDR_OWVAR 20
1293: PUSH
1294: LD_INT 5
1296: ST_TO_ADDR
// uc_nation := 2 ;
1297: LD_ADDR_OWVAR 21
1301: PUSH
1302: LD_INT 2
1304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
1305: LD_ADDR_EXP 7
1309: PUSH
1310: LD_STRING Kurt
1312: PPUSH
1313: CALL_OW 25
1317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
1318: LD_ADDR_EXP 5
1322: PUSH
1323: LD_STRING Olaf
1325: PPUSH
1326: CALL_OW 25
1330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
1331: LD_ADDR_EXP 8
1335: PUSH
1336: LD_STRING Hans
1338: PPUSH
1339: CALL_OW 25
1343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
1344: LD_ADDR_VAR 0 2
1348: PUSH
1349: LD_EXP 7
1353: PUSH
1354: LD_EXP 8
1358: PUSH
1359: LD_EXP 5
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: LIST
1368: PUSH
1369: FOR_IN
1370: IFFALSE 1389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
1372: LD_VAR 0 2
1376: PPUSH
1377: LD_INT 10
1379: PPUSH
1380: LD_INT 0
1382: PPUSH
1383: CALL_OW 49
1387: GO 1369
1389: POP
1390: POP
// ComTurnUnit ( Kurt , Hans ) ;
1391: LD_EXP 7
1395: PPUSH
1396: LD_EXP 8
1400: PPUSH
1401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_EXP 8
1414: PPUSH
1415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
1419: LD_EXP 8
1423: PPUSH
1424: LD_EXP 5
1428: PPUSH
1429: CALL_OW 119
// end ;
1433: LD_VAR 0 1
1437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
1438: LD_INT 0
1440: PPUSH
1441: PPUSH
1442: PPUSH
1443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
1444: LD_ADDR_VAR 0 2
1448: PUSH
1449: LD_INT 21
1451: PUSH
1452: LD_INT 3
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PPUSH
1459: CALL_OW 69
1463: PUSH
1464: LD_INT 14
1466: DIFF
1467: PUSH
1468: FOR_IN
1469: IFFALSE 1549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
1471: LD_VAR 0 2
1475: PPUSH
1476: CALL_OW 266
1480: PUSH
1481: LD_INT 6
1483: PUSH
1484: LD_INT 31
1486: PUSH
1487: EMPTY
1488: LIST
1489: LIST
1490: IN
1491: IFFALSE 1515
// SetLives ( i , rand ( 500 , 600 ) ) else
1493: LD_VAR 0 2
1497: PPUSH
1498: LD_INT 500
1500: PPUSH
1501: LD_INT 600
1503: PPUSH
1504: CALL_OW 12
1508: PPUSH
1509: CALL_OW 234
1513: GO 1535
// SetLives ( i , rand ( 300 , 499 ) ) ;
1515: LD_VAR 0 2
1519: PPUSH
1520: LD_INT 300
1522: PPUSH
1523: LD_INT 499
1525: PPUSH
1526: CALL_OW 12
1530: PPUSH
1531: CALL_OW 234
// SetSide ( i , 5 ) ;
1535: LD_VAR 0 2
1539: PPUSH
1540: LD_INT 5
1542: PPUSH
1543: CALL_OW 235
// end ;
1547: GO 1468
1549: POP
1550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
1551: LD_ADDR_VAR 0 4
1555: PUSH
1556: LD_INT 9
1558: PPUSH
1559: LD_INT 0
1561: PPUSH
1562: CALL_OW 517
1566: ST_TO_ADDR
// uc_side := 4 ;
1567: LD_ADDR_OWVAR 20
1571: PUSH
1572: LD_INT 4
1574: ST_TO_ADDR
// uc_nation := 1 ;
1575: LD_ADDR_OWVAR 21
1579: PUSH
1580: LD_INT 1
1582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
1583: LD_ADDR_VAR 0 2
1587: PUSH
1588: DOUBLE
1589: LD_INT 1
1591: DEC
1592: ST_TO_ADDR
1593: LD_VAR 0 4
1597: PUSH
1598: LD_INT 1
1600: ARRAY
1601: PUSH
1602: FOR_TO
1603: IFFALSE 1679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
1605: LD_INT 0
1607: PPUSH
1608: LD_INT 1
1610: PUSH
1611: LD_INT 1
1613: PUSH
1614: LD_INT 4
1616: PUSH
1617: EMPTY
1618: LIST
1619: LIST
1620: LIST
1621: PUSH
1622: LD_VAR 0 2
1626: PUSH
1627: LD_INT 3
1629: MOD
1630: PUSH
1631: LD_INT 1
1633: PLUS
1634: ARRAY
1635: PPUSH
1636: LD_INT 0
1638: PPUSH
1639: CALL_OW 380
// un := CreateHuman ;
1643: LD_ADDR_VAR 0 3
1647: PUSH
1648: CALL_OW 44
1652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
1653: LD_VAR 0 3
1657: PPUSH
1658: LD_INT 9
1660: PPUSH
1661: LD_INT 0
1663: PPUSH
1664: CALL_OW 49
// KillUnit ( un ) ;
1668: LD_VAR 0 3
1672: PPUSH
1673: CALL_OW 66
// end ;
1677: GO 1602
1679: POP
1680: POP
// end ;
1681: LD_VAR 0 1
1685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
1686: LD_INT 0
1688: PPUSH
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
1693: PPUSH
1694: PPUSH
// uc_side := 5 ;
1695: LD_ADDR_OWVAR 20
1699: PUSH
1700: LD_INT 5
1702: ST_TO_ADDR
// uc_nation := 2 ;
1703: LD_ADDR_OWVAR 21
1707: PUSH
1708: LD_INT 2
1710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 ] ;
1711: LD_ADDR_VAR 0 6
1715: PUSH
1716: LD_INT 2
1718: PUSH
1719: LD_INT 4
1721: PUSH
1722: LD_INT 5
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: ST_TO_ADDR
// InitHc ;
1730: CALL_OW 19
// for i in area do
1734: LD_ADDR_VAR 0 2
1738: PUSH
1739: LD_VAR 0 6
1743: PUSH
1744: FOR_IN
1745: IFFALSE 1842
// begin tmp := AreaToList ( i , 0 ) ;
1747: LD_ADDR_VAR 0 5
1751: PUSH
1752: LD_VAR 0 2
1756: PPUSH
1757: LD_INT 0
1759: PPUSH
1760: CALL_OW 517
1764: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
1765: LD_ADDR_VAR 0 3
1769: PUSH
1770: DOUBLE
1771: LD_INT 1
1773: DEC
1774: ST_TO_ADDR
1775: LD_VAR 0 5
1779: PUSH
1780: LD_INT 1
1782: ARRAY
1783: PUSH
1784: FOR_TO
1785: IFFALSE 1838
// begin PrepareHuman ( false , 1 , 3 ) ;
1787: LD_INT 0
1789: PPUSH
1790: LD_INT 1
1792: PPUSH
1793: LD_INT 3
1795: PPUSH
1796: CALL_OW 380
// un := CreateHuman ;
1800: LD_ADDR_VAR 0 7
1804: PUSH
1805: CALL_OW 44
1809: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
1810: LD_VAR 0 7
1814: PPUSH
1815: LD_VAR 0 2
1819: PPUSH
1820: LD_INT 0
1822: PPUSH
1823: CALL_OW 49
// ComHold ( un ) ;
1827: LD_VAR 0 7
1831: PPUSH
1832: CALL_OW 140
// end ;
1836: GO 1784
1838: POP
1839: POP
// end ;
1840: GO 1744
1842: POP
1843: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
1844: LD_ADDR_VAR 0 2
1848: PUSH
1849: DOUBLE
1850: LD_INT 1
1852: DEC
1853: ST_TO_ADDR
1854: LD_INT 30
1856: PUSH
1857: LD_INT 31
1859: PUSH
1860: EMPTY
1861: LIST
1862: LIST
1863: PPUSH
1864: CALL_OW 69
1868: PUSH
1869: FOR_TO
1870: IFFALSE 1964
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
1872: LD_ADDR_VAR 0 4
1876: PUSH
1877: LD_INT 30
1879: PUSH
1880: LD_INT 31
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PPUSH
1887: CALL_OW 69
1891: PUSH
1892: LD_VAR 0 2
1896: ARRAY
1897: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 3
1906: PPUSH
1907: CALL_OW 380
// un := CreateHuman ;
1911: LD_ADDR_VAR 0 7
1915: PUSH
1916: CALL_OW 44
1920: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
1921: LD_VAR 0 7
1925: PPUSH
1926: LD_VAR 0 4
1930: PPUSH
1931: CALL_OW 254
1935: PUSH
1936: LD_INT 3
1938: PLUS
1939: PUSH
1940: LD_INT 6
1942: MOD
1943: PPUSH
1944: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
1948: LD_VAR 0 7
1952: PPUSH
1953: LD_VAR 0 4
1957: PPUSH
1958: CALL_OW 52
// end ;
1962: GO 1869
1964: POP
1965: POP
// PrepareKurtGroup ;
1966: CALL 1285 0 0
// PrepareSheikGroup ;
1970: CALL 878 0 0
// end ; end_of_file
1974: LD_VAR 0 1
1978: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
1979: LD_VAR 0 1
1983: PUSH
1984: LD_INT 2
1986: EQUAL
1987: PUSH
1988: LD_VAR 0 2
1992: PUSH
1993: LD_INT 5
1995: EQUAL
1996: AND
1997: IFFALSE 2015
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
1999: LD_INT 2
2001: PPUSH
2002: LD_INT 5
2004: PPUSH
2005: LD_INT 2
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: CALL_OW 80
// end ;
2015: PPOPN 2
2017: END
// every 0 0$1 trigger scientists do var i ;
2018: LD_EXP 13
2022: IFFALSE 2230
2024: GO 2026
2026: DISABLE
2027: LD_INT 0
2029: PPUSH
// begin repeat for i in scientists do
2030: LD_ADDR_VAR 0 1
2034: PUSH
2035: LD_EXP 13
2039: PUSH
2040: FOR_IN
2041: IFFALSE 2215
// begin wait ( 0 0$1 ) ;
2043: LD_INT 35
2045: PPUSH
2046: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
2050: LD_VAR 0 1
2054: PPUSH
2055: LD_INT 11
2057: PUSH
2058: LD_INT 13
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_VAR 0 1
2069: PUSH
2070: LD_INT 2
2072: MOD
2073: PUSH
2074: LD_INT 1
2076: PLUS
2077: ARRAY
2078: PPUSH
2079: CALL_OW 308
2083: NOT
2084: IFFALSE 2119
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
2086: LD_VAR 0 1
2090: PPUSH
2091: LD_INT 11
2093: PUSH
2094: LD_INT 13
2096: PUSH
2097: EMPTY
2098: LIST
2099: LIST
2100: PUSH
2101: LD_VAR 0 1
2105: PUSH
2106: LD_INT 2
2108: MOD
2109: PUSH
2110: LD_INT 1
2112: PLUS
2113: ARRAY
2114: PPUSH
2115: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
2119: LD_VAR 0 1
2123: PPUSH
2124: LD_INT 14
2126: PPUSH
2127: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
2131: LD_VAR 0 1
2135: PPUSH
2136: LD_INT 70
2138: PPUSH
2139: CALL_OW 202
// if rand ( 0 , 1 ) then
2143: LD_INT 0
2145: PPUSH
2146: LD_INT 1
2148: PPUSH
2149: CALL_OW 12
2153: IFFALSE 2167
// AddComAnim ( i , 15 ) ;
2155: LD_VAR 0 1
2159: PPUSH
2160: LD_INT 15
2162: PPUSH
2163: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
2167: LD_VAR 0 1
2171: PPUSH
2172: LD_INT 35
2174: PPUSH
2175: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
2179: LD_VAR 0 1
2183: PPUSH
2184: LD_INT 12
2186: PPUSH
2187: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
2191: LD_VAR 0 1
2195: PPUSH
2196: LD_INT 93
2198: PPUSH
2199: LD_INT 40
2201: PPUSH
2202: CALL_OW 178
// wait ( 0 0$1 ) ;
2206: LD_INT 35
2208: PPUSH
2209: CALL_OW 67
// end ;
2213: GO 2040
2215: POP
2216: POP
// wait ( 0 0$10 ) ;
2217: LD_INT 350
2219: PPUSH
2220: CALL_OW 67
// until heikeNearbyEon ;
2224: LD_EXP 17
2228: IFFALSE 2030
// end ; end_of_file
2230: PPOPN 1
2232: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun ; every 0 0$1 do
2233: GO 2235
2235: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
2236: LD_STRING initStreamRollete();
2238: PPUSH
2239: CALL_OW 559
// InitStreamMode ;
2243: CALL 2248 0 0
// end ;
2247: END
// function InitStreamMode ; begin
2248: LD_INT 0
2250: PPUSH
// streamModeActive := false ;
2251: LD_ADDR_EXP 18
2255: PUSH
2256: LD_INT 0
2258: ST_TO_ADDR
// sRocket := false ;
2259: LD_ADDR_EXP 21
2263: PUSH
2264: LD_INT 0
2266: ST_TO_ADDR
// sSpeed := false ;
2267: LD_ADDR_EXP 20
2271: PUSH
2272: LD_INT 0
2274: ST_TO_ADDR
// sEngine := false ;
2275: LD_ADDR_EXP 22
2279: PUSH
2280: LD_INT 0
2282: ST_TO_ADDR
// sSpec := false ;
2283: LD_ADDR_EXP 19
2287: PUSH
2288: LD_INT 0
2290: ST_TO_ADDR
// sLevel := false ;
2291: LD_ADDR_EXP 23
2295: PUSH
2296: LD_INT 0
2298: ST_TO_ADDR
// sArmoury := false ;
2299: LD_ADDR_EXP 24
2303: PUSH
2304: LD_INT 0
2306: ST_TO_ADDR
// sRadar := false ;
2307: LD_ADDR_EXP 25
2311: PUSH
2312: LD_INT 0
2314: ST_TO_ADDR
// sBunker := false ;
2315: LD_ADDR_EXP 26
2319: PUSH
2320: LD_INT 0
2322: ST_TO_ADDR
// sHack := false ;
2323: LD_ADDR_EXP 27
2327: PUSH
2328: LD_INT 0
2330: ST_TO_ADDR
// sFire := false ;
2331: LD_ADDR_EXP 28
2335: PUSH
2336: LD_INT 0
2338: ST_TO_ADDR
// sRefresh := false ;
2339: LD_ADDR_EXP 29
2343: PUSH
2344: LD_INT 0
2346: ST_TO_ADDR
// sExp := false ;
2347: LD_ADDR_EXP 30
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// sDepot := false ;
2355: LD_ADDR_EXP 31
2359: PUSH
2360: LD_INT 0
2362: ST_TO_ADDR
// sFlag := false ;
2363: LD_ADDR_EXP 32
2367: PUSH
2368: LD_INT 0
2370: ST_TO_ADDR
// sSold := false ;
2371: LD_ADDR_EXP 33
2375: PUSH
2376: LD_INT 0
2378: ST_TO_ADDR
// sDiff := false ;
2379: LD_ADDR_EXP 34
2383: PUSH
2384: LD_INT 0
2386: ST_TO_ADDR
// sTiger := false ;
2387: LD_ADDR_EXP 35
2391: PUSH
2392: LD_INT 0
2394: ST_TO_ADDR
// sBomb := false ;
2395: LD_ADDR_EXP 36
2399: PUSH
2400: LD_INT 0
2402: ST_TO_ADDR
// sFog := false ;
2403: LD_ADDR_EXP 37
2407: PUSH
2408: LD_INT 0
2410: ST_TO_ADDR
// sReset := false ;
2411: LD_ADDR_EXP 38
2415: PUSH
2416: LD_INT 0
2418: ST_TO_ADDR
// sSun := false ;
2419: LD_ADDR_EXP 39
2423: PUSH
2424: LD_INT 0
2426: ST_TO_ADDR
// end ;
2427: LD_VAR 0 1
2431: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
2432: LD_VAR 0 2
2436: PUSH
2437: LD_INT 100
2439: EQUAL
2440: IFFALSE 2849
// begin if not StreamModeActive then
2442: LD_EXP 18
2446: NOT
2447: IFFALSE 2457
// StreamModeActive := true ;
2449: LD_ADDR_EXP 18
2453: PUSH
2454: LD_INT 1
2456: ST_TO_ADDR
// if p3 = 0 then
2457: LD_VAR 0 3
2461: PUSH
2462: LD_INT 0
2464: EQUAL
2465: IFFALSE 2471
// InitStreamMode ;
2467: CALL 2248 0 0
// if p3 = 1 then
2471: LD_VAR 0 3
2475: PUSH
2476: LD_INT 1
2478: EQUAL
2479: IFFALSE 2489
// sRocket := true ;
2481: LD_ADDR_EXP 21
2485: PUSH
2486: LD_INT 1
2488: ST_TO_ADDR
// if p3 = 2 then
2489: LD_VAR 0 3
2493: PUSH
2494: LD_INT 2
2496: EQUAL
2497: IFFALSE 2507
// sSpeed := true ;
2499: LD_ADDR_EXP 20
2503: PUSH
2504: LD_INT 1
2506: ST_TO_ADDR
// if p3 = 3 then
2507: LD_VAR 0 3
2511: PUSH
2512: LD_INT 3
2514: EQUAL
2515: IFFALSE 2525
// sEngine := true ;
2517: LD_ADDR_EXP 22
2521: PUSH
2522: LD_INT 1
2524: ST_TO_ADDR
// if p3 = 4 then
2525: LD_VAR 0 3
2529: PUSH
2530: LD_INT 4
2532: EQUAL
2533: IFFALSE 2543
// sSpec := true ;
2535: LD_ADDR_EXP 19
2539: PUSH
2540: LD_INT 1
2542: ST_TO_ADDR
// if p3 = 5 then
2543: LD_VAR 0 3
2547: PUSH
2548: LD_INT 5
2550: EQUAL
2551: IFFALSE 2561
// sLevel := true ;
2553: LD_ADDR_EXP 23
2557: PUSH
2558: LD_INT 1
2560: ST_TO_ADDR
// if p3 = 6 then
2561: LD_VAR 0 3
2565: PUSH
2566: LD_INT 6
2568: EQUAL
2569: IFFALSE 2579
// sArmoury := true ;
2571: LD_ADDR_EXP 24
2575: PUSH
2576: LD_INT 1
2578: ST_TO_ADDR
// if p3 = 7 then
2579: LD_VAR 0 3
2583: PUSH
2584: LD_INT 7
2586: EQUAL
2587: IFFALSE 2597
// sRadar := true ;
2589: LD_ADDR_EXP 25
2593: PUSH
2594: LD_INT 1
2596: ST_TO_ADDR
// if p3 = 8 then
2597: LD_VAR 0 3
2601: PUSH
2602: LD_INT 8
2604: EQUAL
2605: IFFALSE 2615
// sBunker := true ;
2607: LD_ADDR_EXP 26
2611: PUSH
2612: LD_INT 1
2614: ST_TO_ADDR
// if p3 = 9 then
2615: LD_VAR 0 3
2619: PUSH
2620: LD_INT 9
2622: EQUAL
2623: IFFALSE 2633
// sHack := true ;
2625: LD_ADDR_EXP 27
2629: PUSH
2630: LD_INT 1
2632: ST_TO_ADDR
// if p3 = 10 then
2633: LD_VAR 0 3
2637: PUSH
2638: LD_INT 10
2640: EQUAL
2641: IFFALSE 2651
// sFire := true ;
2643: LD_ADDR_EXP 28
2647: PUSH
2648: LD_INT 1
2650: ST_TO_ADDR
// if p3 = 11 then
2651: LD_VAR 0 3
2655: PUSH
2656: LD_INT 11
2658: EQUAL
2659: IFFALSE 2669
// sRefresh := true ;
2661: LD_ADDR_EXP 29
2665: PUSH
2666: LD_INT 1
2668: ST_TO_ADDR
// if p3 = 12 then
2669: LD_VAR 0 3
2673: PUSH
2674: LD_INT 12
2676: EQUAL
2677: IFFALSE 2687
// sExp := true ;
2679: LD_ADDR_EXP 30
2683: PUSH
2684: LD_INT 1
2686: ST_TO_ADDR
// if p3 = 13 then
2687: LD_VAR 0 3
2691: PUSH
2692: LD_INT 13
2694: EQUAL
2695: IFFALSE 2705
// sDepot := true ;
2697: LD_ADDR_EXP 31
2701: PUSH
2702: LD_INT 1
2704: ST_TO_ADDR
// if p3 = 14 then
2705: LD_VAR 0 3
2709: PUSH
2710: LD_INT 14
2712: EQUAL
2713: IFFALSE 2723
// sFlag := true ;
2715: LD_ADDR_EXP 32
2719: PUSH
2720: LD_INT 1
2722: ST_TO_ADDR
// if p3 = 101 then
2723: LD_VAR 0 3
2727: PUSH
2728: LD_INT 101
2730: EQUAL
2731: IFFALSE 2741
// sSold := true ;
2733: LD_ADDR_EXP 33
2737: PUSH
2738: LD_INT 1
2740: ST_TO_ADDR
// if p3 = 102 then
2741: LD_VAR 0 3
2745: PUSH
2746: LD_INT 102
2748: EQUAL
2749: IFFALSE 2759
// sDiff := true ;
2751: LD_ADDR_EXP 34
2755: PUSH
2756: LD_INT 1
2758: ST_TO_ADDR
// if p3 = 103 then
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 103
2766: EQUAL
2767: IFFALSE 2777
// sFog := true ;
2769: LD_ADDR_EXP 37
2773: PUSH
2774: LD_INT 1
2776: ST_TO_ADDR
// if p3 = 104 then
2777: LD_VAR 0 3
2781: PUSH
2782: LD_INT 104
2784: EQUAL
2785: IFFALSE 2795
// sReset := true ;
2787: LD_ADDR_EXP 38
2791: PUSH
2792: LD_INT 1
2794: ST_TO_ADDR
// if p3 = 105 then
2795: LD_VAR 0 3
2799: PUSH
2800: LD_INT 105
2802: EQUAL
2803: IFFALSE 2813
// sSun := true ;
2805: LD_ADDR_EXP 39
2809: PUSH
2810: LD_INT 1
2812: ST_TO_ADDR
// if p3 = 106 then
2813: LD_VAR 0 3
2817: PUSH
2818: LD_INT 106
2820: EQUAL
2821: IFFALSE 2831
// sTiger := true ;
2823: LD_ADDR_EXP 35
2827: PUSH
2828: LD_INT 1
2830: ST_TO_ADDR
// if p3 = 107 then
2831: LD_VAR 0 3
2835: PUSH
2836: LD_INT 107
2838: EQUAL
2839: IFFALSE 2849
// sBomb := true ;
2841: LD_ADDR_EXP 36
2845: PUSH
2846: LD_INT 1
2848: ST_TO_ADDR
// end ; end ;
2849: PPOPN 6
2851: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
2852: LD_EXP 18
2856: PUSH
2857: LD_EXP 21
2861: AND
2862: IFFALSE 2983
2864: GO 2866
2866: DISABLE
2867: LD_INT 0
2869: PPUSH
2870: PPUSH
// begin enable ;
2871: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: LD_INT 22
2879: PUSH
2880: LD_OWVAR 2
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PUSH
2889: LD_INT 2
2891: PUSH
2892: LD_INT 34
2894: PUSH
2895: LD_INT 7
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: LD_INT 34
2904: PUSH
2905: LD_INT 45
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 34
2914: PUSH
2915: LD_INT 28
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 34
2924: PUSH
2925: LD_INT 47
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: LIST
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: PPUSH
2943: CALL_OW 69
2947: ST_TO_ADDR
// if not tmp then
2948: LD_VAR 0 2
2952: NOT
2953: IFFALSE 2957
// exit ;
2955: GO 2983
// for i in tmp do
2957: LD_ADDR_VAR 0 1
2961: PUSH
2962: LD_VAR 0 2
2966: PUSH
2967: FOR_IN
2968: IFFALSE 2981
// begin DestroyUnit ( i ) ;
2970: LD_VAR 0 1
2974: PPUSH
2975: CALL_OW 65
// end ;
2979: GO 2967
2981: POP
2982: POP
// end ;
2983: PPOPN 2
2985: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
2986: LD_EXP 18
2990: PUSH
2991: LD_EXP 22
2995: AND
2996: IFFALSE 3077
2998: GO 3000
3000: DISABLE
3001: LD_INT 0
3003: PPUSH
3004: PPUSH
// begin enable ;
3005: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: LD_INT 22
3013: PUSH
3014: LD_OWVAR 2
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 32
3025: PUSH
3026: LD_INT 3
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 69
3041: ST_TO_ADDR
// if not tmp then
3042: LD_VAR 0 2
3046: NOT
3047: IFFALSE 3051
// exit ;
3049: GO 3077
// for i in tmp do
3051: LD_ADDR_VAR 0 1
3055: PUSH
3056: LD_VAR 0 2
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3075
// begin DestroyUnit ( i ) ;
3064: LD_VAR 0 1
3068: PPUSH
3069: CALL_OW 65
// end ;
3073: GO 3061
3075: POP
3076: POP
// end ;
3077: PPOPN 2
3079: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
3080: LD_EXP 18
3084: PUSH
3085: LD_EXP 19
3089: AND
3090: IFFALSE 3183
3092: GO 3094
3094: DISABLE
3095: LD_INT 0
3097: PPUSH
// begin enable ;
3098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
3099: LD_ADDR_VAR 0 1
3103: PUSH
3104: LD_INT 22
3106: PUSH
3107: LD_OWVAR 2
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 2
3118: PUSH
3119: LD_INT 25
3121: PUSH
3122: LD_INT 5
3124: PUSH
3125: EMPTY
3126: LIST
3127: LIST
3128: PUSH
3129: LD_INT 25
3131: PUSH
3132: LD_INT 9
3134: PUSH
3135: EMPTY
3136: LIST
3137: LIST
3138: PUSH
3139: LD_INT 25
3141: PUSH
3142: LD_INT 8
3144: PUSH
3145: EMPTY
3146: LIST
3147: LIST
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: PPUSH
3159: CALL_OW 69
3163: PUSH
3164: FOR_IN
3165: IFFALSE 3181
// begin SetClass ( i , 1 ) ;
3167: LD_VAR 0 1
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: CALL_OW 336
// end ;
3179: GO 3164
3181: POP
3182: POP
// end ;
3183: PPOPN 1
3185: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
3186: LD_EXP 18
3190: PUSH
3191: LD_EXP 20
3195: AND
3196: PUSH
3197: LD_OWVAR 65
3201: PUSH
3202: LD_INT 7
3204: LESS
3205: AND
3206: IFFALSE 3220
3208: GO 3210
3210: DISABLE
// begin enable ;
3211: ENABLE
// game_speed := 7 ;
3212: LD_ADDR_OWVAR 65
3216: PUSH
3217: LD_INT 7
3219: ST_TO_ADDR
// end ;
3220: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
3221: LD_EXP 18
3225: PUSH
3226: LD_EXP 23
3230: AND
3231: IFFALSE 3433
3233: GO 3235
3235: DISABLE
3236: LD_INT 0
3238: PPUSH
3239: PPUSH
3240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
3241: LD_ADDR_VAR 0 3
3245: PUSH
3246: LD_INT 81
3248: PUSH
3249: LD_OWVAR 2
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 21
3260: PUSH
3261: LD_INT 1
3263: PUSH
3264: EMPTY
3265: LIST
3266: LIST
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PPUSH
3272: CALL_OW 69
3276: ST_TO_ADDR
// if not tmp then
3277: LD_VAR 0 3
3281: NOT
3282: IFFALSE 3286
// exit ;
3284: GO 3433
// if tmp > 5 then
3286: LD_VAR 0 3
3290: PUSH
3291: LD_INT 5
3293: GREATER
3294: IFFALSE 3306
// k := 5 else
3296: LD_ADDR_VAR 0 2
3300: PUSH
3301: LD_INT 5
3303: ST_TO_ADDR
3304: GO 3316
// k := tmp ;
3306: LD_ADDR_VAR 0 2
3310: PUSH
3311: LD_VAR 0 3
3315: ST_TO_ADDR
// for i := 1 to k do
3316: LD_ADDR_VAR 0 1
3320: PUSH
3321: DOUBLE
3322: LD_INT 1
3324: DEC
3325: ST_TO_ADDR
3326: LD_VAR 0 2
3330: PUSH
3331: FOR_TO
3332: IFFALSE 3431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
3334: LD_VAR 0 3
3338: PUSH
3339: LD_VAR 0 1
3343: ARRAY
3344: PPUSH
3345: LD_VAR 0 1
3349: PUSH
3350: LD_INT 4
3352: MOD
3353: PUSH
3354: LD_INT 1
3356: PLUS
3357: PPUSH
3358: CALL_OW 259
3362: PUSH
3363: LD_INT 10
3365: LESS
3366: IFFALSE 3429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
3368: LD_VAR 0 3
3372: PUSH
3373: LD_VAR 0 1
3377: ARRAY
3378: PPUSH
3379: LD_VAR 0 1
3383: PUSH
3384: LD_INT 4
3386: MOD
3387: PUSH
3388: LD_INT 1
3390: PLUS
3391: PPUSH
3392: LD_VAR 0 3
3396: PUSH
3397: LD_VAR 0 1
3401: ARRAY
3402: PPUSH
3403: LD_VAR 0 1
3407: PUSH
3408: LD_INT 4
3410: MOD
3411: PUSH
3412: LD_INT 1
3414: PLUS
3415: PPUSH
3416: CALL_OW 259
3420: PUSH
3421: LD_INT 1
3423: PLUS
3424: PPUSH
3425: CALL_OW 237
3429: GO 3331
3431: POP
3432: POP
// end ;
3433: PPOPN 3
3435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
3436: LD_EXP 18
3440: PUSH
3441: LD_EXP 24
3445: AND
3446: IFFALSE 3466
3448: GO 3450
3450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
3451: LD_INT 4
3453: PPUSH
3454: LD_OWVAR 2
3458: PPUSH
3459: LD_INT 0
3461: PPUSH
3462: CALL_OW 324
3466: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
3467: LD_EXP 18
3471: PUSH
3472: LD_EXP 25
3476: AND
3477: IFFALSE 3576
3479: GO 3481
3481: DISABLE
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
// begin enable ;
3486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
3487: LD_ADDR_VAR 0 2
3491: PUSH
3492: LD_INT 22
3494: PUSH
3495: LD_OWVAR 2
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: LD_INT 2
3506: PUSH
3507: LD_INT 34
3509: PUSH
3510: LD_INT 11
3512: PUSH
3513: EMPTY
3514: LIST
3515: LIST
3516: PUSH
3517: LD_INT 34
3519: PUSH
3520: LD_INT 30
3522: PUSH
3523: EMPTY
3524: LIST
3525: LIST
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: LIST
3531: PUSH
3532: EMPTY
3533: LIST
3534: LIST
3535: PPUSH
3536: CALL_OW 69
3540: ST_TO_ADDR
// if not tmp then
3541: LD_VAR 0 2
3545: NOT
3546: IFFALSE 3550
// exit ;
3548: GO 3576
// for i in tmp do
3550: LD_ADDR_VAR 0 1
3554: PUSH
3555: LD_VAR 0 2
3559: PUSH
3560: FOR_IN
3561: IFFALSE 3574
// begin DestroyUnit ( i ) ;
3563: LD_VAR 0 1
3567: PPUSH
3568: CALL_OW 65
// end ;
3572: GO 3560
3574: POP
3575: POP
// end ;
3576: PPOPN 2
3578: END
// every 0 0$1 trigger StreamModeActive and sBunker do
3579: LD_EXP 18
3583: PUSH
3584: LD_EXP 26
3588: AND
3589: IFFALSE 3609
3591: GO 3593
3593: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
3594: LD_INT 32
3596: PPUSH
3597: LD_OWVAR 2
3601: PPUSH
3602: LD_INT 0
3604: PPUSH
3605: CALL_OW 324
3609: END
// every 0 0$1 trigger StreamModeActive and sHack do
3610: LD_EXP 18
3614: PUSH
3615: LD_EXP 27
3619: AND
3620: IFFALSE 3640
3622: GO 3624
3624: DISABLE
// SetTech ( tech_Virus , your_side , state_disabled ) ;
3625: LD_INT 33
3627: PPUSH
3628: LD_OWVAR 2
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 322
3640: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
3641: LD_EXP 18
3645: PUSH
3646: LD_EXP 28
3650: AND
3651: IFFALSE 3730
3653: GO 3655
3655: DISABLE
3656: LD_INT 0
3658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
3659: LD_ADDR_VAR 0 1
3663: PUSH
3664: LD_INT 22
3666: PUSH
3667: LD_OWVAR 2
3671: PUSH
3672: EMPTY
3673: LIST
3674: LIST
3675: PUSH
3676: LD_INT 21
3678: PUSH
3679: LD_INT 3
3681: PUSH
3682: EMPTY
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PPUSH
3690: CALL_OW 69
3694: ST_TO_ADDR
// if not tmp then
3695: LD_VAR 0 1
3699: NOT
3700: IFFALSE 3704
// exit ;
3702: GO 3730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
3704: LD_VAR 0 1
3708: PUSH
3709: LD_INT 1
3711: PPUSH
3712: LD_VAR 0 1
3716: PPUSH
3717: CALL_OW 12
3721: ARRAY
3722: PPUSH
3723: LD_INT 100
3725: PPUSH
3726: CALL_OW 234
// end ;
3730: PPOPN 1
3732: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
3733: LD_EXP 18
3737: PUSH
3738: LD_EXP 30
3742: AND
3743: IFFALSE 3841
3745: GO 3747
3747: DISABLE
3748: LD_INT 0
3750: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
3751: LD_ADDR_VAR 0 1
3755: PUSH
3756: LD_INT 22
3758: PUSH
3759: LD_OWVAR 2
3763: PUSH
3764: EMPTY
3765: LIST
3766: LIST
3767: PUSH
3768: LD_INT 21
3770: PUSH
3771: LD_INT 1
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: PPUSH
3782: CALL_OW 69
3786: ST_TO_ADDR
// if not tmp then
3787: LD_VAR 0 1
3791: NOT
3792: IFFALSE 3796
// exit ;
3794: GO 3841
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
3796: LD_VAR 0 1
3800: PUSH
3801: LD_INT 1
3803: PPUSH
3804: LD_VAR 0 1
3808: PPUSH
3809: CALL_OW 12
3813: ARRAY
3814: PPUSH
3815: LD_INT 1
3817: PPUSH
3818: LD_INT 4
3820: PPUSH
3821: CALL_OW 12
3825: PPUSH
3826: LD_INT 3000
3828: PPUSH
3829: LD_INT 9000
3831: PPUSH
3832: CALL_OW 12
3836: PPUSH
3837: CALL_OW 492
// end ;
3841: PPOPN 1
3843: END
// every 0 0$1 trigger StreamModeActive and sDepot do
3844: LD_EXP 18
3848: PUSH
3849: LD_EXP 31
3853: AND
3854: IFFALSE 3874
3856: GO 3858
3858: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
3859: LD_INT 1
3861: PPUSH
3862: LD_OWVAR 2
3866: PPUSH
3867: LD_INT 0
3869: PPUSH
3870: CALL_OW 324
3874: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
3875: LD_EXP 18
3879: PUSH
3880: LD_EXP 32
3884: AND
3885: IFFALSE 3968
3887: GO 3889
3889: DISABLE
3890: LD_INT 0
3892: PPUSH
3893: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
3894: LD_ADDR_VAR 0 2
3898: PUSH
3899: LD_INT 22
3901: PUSH
3902: LD_OWVAR 2
3906: PUSH
3907: EMPTY
3908: LIST
3909: LIST
3910: PUSH
3911: LD_INT 21
3913: PUSH
3914: LD_INT 3
3916: PUSH
3917: EMPTY
3918: LIST
3919: LIST
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PPUSH
3925: CALL_OW 69
3929: ST_TO_ADDR
// if not tmp then
3930: LD_VAR 0 2
3934: NOT
3935: IFFALSE 3939
// exit ;
3937: GO 3968
// for i in tmp do
3939: LD_ADDR_VAR 0 1
3943: PUSH
3944: LD_VAR 0 2
3948: PUSH
3949: FOR_IN
3950: IFFALSE 3966
// SetBLevel ( i , 10 ) ;
3952: LD_VAR 0 1
3956: PPUSH
3957: LD_INT 10
3959: PPUSH
3960: CALL_OW 241
3964: GO 3949
3966: POP
3967: POP
// end ;
3968: PPOPN 2
3970: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , tmp ;
3971: LD_EXP 18
3975: PUSH
3976: LD_EXP 33
3980: AND
3981: IFFALSE 4064
3983: GO 3985
3985: DISABLE
3986: LD_INT 0
3988: PPUSH
3989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
3990: LD_ADDR_VAR 0 2
3994: PUSH
3995: LD_INT 22
3997: PUSH
3998: LD_OWVAR 2
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: LD_INT 25
4009: PUSH
4010: LD_INT 1
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: EMPTY
4018: LIST
4019: LIST
4020: PPUSH
4021: CALL_OW 69
4025: ST_TO_ADDR
// if not tmp then
4026: LD_VAR 0 2
4030: NOT
4031: IFFALSE 4035
// exit ;
4033: GO 4064
// for i in tmp do
4035: LD_ADDR_VAR 0 1
4039: PUSH
4040: LD_VAR 0 2
4044: PUSH
4045: FOR_IN
4046: IFFALSE 4062
// SetClass ( i , 4 ) ;
4048: LD_VAR 0 1
4052: PPUSH
4053: LD_INT 4
4055: PPUSH
4056: CALL_OW 336
4060: GO 4045
4062: POP
4063: POP
// end ;
4064: PPOPN 2
4066: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
4067: LD_EXP 18
4071: PUSH
4072: LD_EXP 34
4076: AND
4077: PUSH
4078: LD_OWVAR 67
4082: PUSH
4083: LD_INT 3
4085: LESS
4086: AND
4087: IFFALSE 4106
4089: GO 4091
4091: DISABLE
// Difficulty := Difficulty + 1 ;
4092: LD_ADDR_OWVAR 67
4096: PUSH
4097: LD_OWVAR 67
4101: PUSH
4102: LD_INT 1
4104: PLUS
4105: ST_TO_ADDR
4106: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
4107: LD_EXP 18
4111: PUSH
4112: LD_EXP 35
4116: AND
4117: IFFALSE 4220
4119: GO 4121
4121: DISABLE
4122: LD_INT 0
4124: PPUSH
// begin for i := 1 to 5 do
4125: LD_ADDR_VAR 0 1
4129: PUSH
4130: DOUBLE
4131: LD_INT 1
4133: DEC
4134: ST_TO_ADDR
4135: LD_INT 5
4137: PUSH
4138: FOR_TO
4139: IFFALSE 4218
// begin uc_nation := nation_nature ;
4141: LD_ADDR_OWVAR 21
4145: PUSH
4146: LD_INT 0
4148: ST_TO_ADDR
// uc_side := 0 ;
4149: LD_ADDR_OWVAR 20
4153: PUSH
4154: LD_INT 0
4156: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
4157: LD_ADDR_OWVAR 29
4161: PUSH
4162: LD_INT 12
4164: PUSH
4165: LD_INT 12
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: ST_TO_ADDR
// hc_agressivity := 20 ;
4172: LD_ADDR_OWVAR 35
4176: PUSH
4177: LD_INT 20
4179: ST_TO_ADDR
// hc_class := class_tiger ;
4180: LD_ADDR_OWVAR 28
4184: PUSH
4185: LD_INT 14
4187: ST_TO_ADDR
// hc_gallery :=  ;
4188: LD_ADDR_OWVAR 33
4192: PUSH
4193: LD_STRING 
4195: ST_TO_ADDR
// hc_name :=  ;
4196: LD_ADDR_OWVAR 26
4200: PUSH
4201: LD_STRING 
4203: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
4204: CALL_OW 44
4208: PPUSH
4209: LD_INT 0
4211: PPUSH
4212: CALL_OW 51
// end ;
4216: GO 4138
4218: POP
4219: POP
// end ;
4220: PPOPN 1
4222: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
4223: LD_EXP 18
4227: PUSH
4228: LD_EXP 36
4232: AND
4233: IFFALSE 4407
4235: GO 4237
4237: DISABLE
4238: LD_INT 0
4240: PPUSH
4241: PPUSH
4242: PPUSH
4243: PPUSH
// begin result := false ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// for i := 1 to 8 do
4252: LD_ADDR_VAR 0 1
4256: PUSH
4257: DOUBLE
4258: LD_INT 1
4260: DEC
4261: ST_TO_ADDR
4262: LD_INT 8
4264: PUSH
4265: FOR_TO
4266: IFFALSE 4377
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
4268: LD_ADDR_VAR 0 2
4272: PUSH
4273: LD_INT 10
4275: PUSH
4276: LD_INT 50
4278: PUSH
4279: LD_INT 90
4281: PUSH
4282: LD_INT 140
4284: PUSH
4285: EMPTY
4286: LIST
4287: LIST
4288: LIST
4289: LIST
4290: PUSH
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 4
4296: PPUSH
4297: CALL_OW 12
4301: ARRAY
4302: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
4303: LD_ADDR_VAR 0 3
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 50
4313: PUSH
4314: LD_INT 90
4316: PUSH
4317: LD_INT 140
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: LD_INT 1
4328: PPUSH
4329: LD_INT 4
4331: PPUSH
4332: CALL_OW 12
4336: ARRAY
4337: ST_TO_ADDR
// if ValidHex ( x , y ) then
4338: LD_VAR 0 2
4342: PPUSH
4343: LD_VAR 0 3
4347: PPUSH
4348: CALL_OW 488
4352: IFFALSE 4375
// begin result := [ x , y ] ;
4354: LD_ADDR_VAR 0 4
4358: PUSH
4359: LD_VAR 0 2
4363: PUSH
4364: LD_VAR 0 3
4368: PUSH
4369: EMPTY
4370: LIST
4371: LIST
4372: ST_TO_ADDR
// break ;
4373: GO 4377
// end ; end ;
4375: GO 4265
4377: POP
4378: POP
// if result then
4379: LD_VAR 0 4
4383: IFFALSE 4407
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
4385: LD_VAR 0 4
4389: PUSH
4390: LD_INT 1
4392: ARRAY
4393: PPUSH
4394: LD_VAR 0 4
4398: PUSH
4399: LD_INT 2
4401: ARRAY
4402: PPUSH
4403: CALL_OW 429
// end ;
4407: PPOPN 4
4409: END
// every 0 0$1 trigger StreamModeActive and sReset do
4410: LD_EXP 18
4414: PUSH
4415: LD_EXP 38
4419: AND
4420: IFFALSE 4432
4422: GO 4424
4424: DISABLE
// YouLost (  ) ;
4425: LD_STRING 
4427: PPUSH
4428: CALL_OW 104
4432: END
// every 0 0$1 trigger StreamModeActive and sFog do
4433: LD_EXP 18
4437: PUSH
4438: LD_EXP 37
4442: AND
4443: IFFALSE 4457
4445: GO 4447
4447: DISABLE
// FogOff ( your_side ) ;
4448: LD_OWVAR 2
4452: PPUSH
4453: CALL_OW 344
4457: END
// every 0 0$1 trigger StreamModeActive and sSun do
4458: LD_EXP 18
4462: PUSH
4463: LD_EXP 39
4467: AND
4468: IFFALSE 4496
4470: GO 4472
4472: DISABLE
// begin solar_recharge_percent := 0 ;
4473: LD_ADDR_OWVAR 79
4477: PUSH
4478: LD_INT 0
4480: ST_TO_ADDR
// wait ( 5 5$00 ) ;
4481: LD_INT 10500
4483: PPUSH
4484: CALL_OW 67
// solar_recharge_percent := 100 ;
4488: LD_ADDR_OWVAR 79
4492: PUSH
4493: LD_INT 100
4495: ST_TO_ADDR
// end ;
4496: END
