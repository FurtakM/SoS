// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3397 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3244 0 0
// PrepareSheikGroup ;
 123: CALL 2882 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2794 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3645 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// SaveForQuickRestart ;
 431: CALL_OW 22
// end ;
 435: LD_VAR 0 1
 439: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 440: LD_INT 2
 442: PPUSH
 443: LD_INT 5
 445: PPUSH
 446: CALL_OW 81
 450: PUSH
 451: LD_INT 2
 453: EQUAL
 454: IFFALSE 600
 456: GO 458
 458: DISABLE
 459: LD_INT 0
 461: PPUSH
// begin goWithHeike := false ;
 462: LD_ADDR_EXP 18
 466: PUSH
 467: LD_INT 0
 469: ST_TO_ADDR
// DialogueOn ;
 470: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 474: LD_EXP 1
 478: PPUSH
 479: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 483: LD_EXP 5
 487: PPUSH
 488: LD_STRING DK-betray-1
 490: PPUSH
 491: CALL_OW 88
// DialogueOff ;
 495: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 499: LD_EXP 5
 503: PPUSH
 504: LD_INT 90
 506: PPUSH
 507: LD_INT 46
 509: PPUSH
 510: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 514: LD_INT 35
 516: PPUSH
 517: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 521: LD_ADDR_VAR 0 1
 525: PUSH
 526: LD_INT 22
 528: PUSH
 529: LD_INT 5
 531: PUSH
 532: EMPTY
 533: LIST
 534: LIST
 535: PUSH
 536: LD_INT 25
 538: PUSH
 539: LD_INT 1
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PPUSH
 550: CALL_OW 69
 554: PUSH
 555: LD_EXP 5
 559: DIFF
 560: PUSH
 561: FOR_IN
 562: IFFALSE 580
// ComAttackUnit ( i , Heike ) ;
 564: LD_VAR 0 1
 568: PPUSH
 569: LD_EXP 1
 573: PPUSH
 574: CALL_OW 115
 578: GO 561
 580: POP
 581: POP
// until IsDead ( Heike ) ;
 582: LD_EXP 1
 586: PPUSH
 587: CALL_OW 301
 591: IFFALSE 514
// YouLost ( Betray ) ;
 593: LD_STRING Betray
 595: PPUSH
 596: CALL_OW 104
// end ;
 600: PPOPN 1
 602: END
// every 0 0$1 trigger goWithHeike do
 603: LD_EXP 18
 607: IFFALSE 662
 609: GO 611
 611: DISABLE
// begin enable ;
 612: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 613: LD_EXP 1
 617: PPUSH
 618: LD_EXP 5
 622: PPUSH
 623: CALL_OW 296
 627: PUSH
 628: LD_INT 3
 630: GREATER
 631: IFFALSE 662
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 633: LD_EXP 5
 637: PPUSH
 638: LD_EXP 1
 642: PPUSH
 643: CALL_OW 250
 647: PPUSH
 648: LD_EXP 1
 652: PPUSH
 653: CALL_OW 251
 657: PPUSH
 658: CALL_OW 111
// end ;
 662: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 663: LD_INT 2
 665: PPUSH
 666: LD_INT 47
 668: PPUSH
 669: LD_INT 68
 671: PPUSH
 672: CALL_OW 293
 676: PUSH
 677: LD_EXP 19
 681: NOT
 682: AND
 683: PUSH
 684: LD_EXP 22
 688: NOT
 689: AND
 690: IFFALSE 751
 692: GO 694
 694: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 695: LD_EXP 1
 699: PPUSH
 700: LD_STRING DH-spot-1
 702: PPUSH
 703: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 707: LD_INT 47
 709: PPUSH
 710: LD_INT 68
 712: PPUSH
 713: CALL_OW 428
 717: PPUSH
 718: CALL_OW 313
 722: PUSH
 723: LD_INT 1
 725: ARRAY
 726: PPUSH
 727: LD_STRING DRa-spot-1
 729: PPUSH
 730: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 734: LD_INT 90
 736: PPUSH
 737: LD_INT 41
 739: PPUSH
 740: LD_INT 2
 742: PPUSH
 743: LD_INT 6
 745: NEG
 746: PPUSH
 747: CALL_OW 330
// end ;
 751: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 752: LD_INT 2
 754: PPUSH
 755: LD_INT 93
 757: PPUSH
 758: LD_INT 89
 760: PPUSH
 761: CALL_OW 293
 765: PUSH
 766: LD_EXP 19
 770: NOT
 771: AND
 772: PUSH
 773: LD_EXP 22
 777: NOT
 778: AND
 779: IFFALSE 840
 781: GO 783
 783: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_STRING DH-spot-1
 791: PPUSH
 792: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 796: LD_INT 93
 798: PPUSH
 799: LD_INT 89
 801: PPUSH
 802: CALL_OW 428
 806: PPUSH
 807: CALL_OW 313
 811: PUSH
 812: LD_INT 1
 814: ARRAY
 815: PPUSH
 816: LD_STRING DRa-spot-2
 818: PPUSH
 819: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 823: LD_INT 90
 825: PPUSH
 826: LD_INT 41
 828: PPUSH
 829: LD_INT 2
 831: PPUSH
 832: LD_INT 6
 834: NEG
 835: PPUSH
 836: CALL_OW 330
// end ;
 840: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 841: LD_EXP 21
 845: PUSH
 846: LD_EXP 14
 850: PPUSH
 851: LD_INT 101
 853: PUSH
 854: LD_INT 2
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 72
 865: AND
 866: PUSH
 867: LD_EXP 22
 871: NOT
 872: AND
 873: IFFALSE 1197
 875: GO 877
 877: DISABLE
 878: LD_INT 0
 880: PPUSH
 881: PPUSH
 882: PPUSH
 883: PPUSH
 884: PPUSH
// begin enable ;
 885: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 886: LD_ADDR_VAR 0 1
 890: PUSH
 891: LD_EXP 14
 895: PPUSH
 896: LD_INT 101
 898: PUSH
 899: LD_INT 2
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 72
 910: ST_TO_ADDR
// if not tmp then
 911: LD_VAR 0 1
 915: NOT
 916: IFFALSE 920
// exit ;
 918: GO 1197
// InGameOn ;
 920: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 924: LD_EXP 1
 928: PUSH
 929: LD_EXP 5
 933: PUSH
 934: EMPTY
 935: LIST
 936: LIST
 937: PPUSH
 938: LD_VAR 0 1
 942: PUSH
 943: LD_INT 1
 945: ARRAY
 946: PPUSH
 947: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 951: LD_VAR 0 1
 955: PUSH
 956: LD_INT 1
 958: ARRAY
 959: PPUSH
 960: LD_EXP 1
 964: PPUSH
 965: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 969: LD_VAR 0 1
 973: PUSH
 974: LD_INT 1
 976: ARRAY
 977: PPUSH
 978: LD_STRING DG-meeting-1
 980: PPUSH
 981: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 985: LD_ADDR_VAR 0 3
 989: PUSH
 990: LD_INT 81
 992: PUSH
 993: LD_INT 10
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 63
1002: PUSH
1003: LD_INT 25
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 108
1012: PUSH
1013: LD_INT 73
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_INT 9999
1032: PUSH
1033: EMPTY
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// for i := 1 to 3 do
1039: LD_ADDR_VAR 0 2
1043: PUSH
1044: DOUBLE
1045: LD_INT 1
1047: DEC
1048: ST_TO_ADDR
1049: LD_INT 3
1051: PUSH
1052: FOR_TO
1053: IFFALSE 1137
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1055: LD_ADDR_VAR 0 5
1059: PUSH
1060: LD_EXP 1
1064: PPUSH
1065: LD_VAR 0 3
1069: PUSH
1070: LD_VAR 0 2
1074: ARRAY
1075: PUSH
1076: LD_INT 1
1078: ARRAY
1079: PPUSH
1080: LD_VAR 0 3
1084: PUSH
1085: LD_VAR 0 2
1089: ARRAY
1090: PUSH
1091: LD_INT 2
1093: ARRAY
1094: PPUSH
1095: CALL_OW 297
1099: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1100: LD_VAR 0 4
1104: PUSH
1105: LD_INT 1
1107: ARRAY
1108: PUSH
1109: LD_VAR 0 5
1113: GREATER
1114: IFFALSE 1135
// dist := [ tdist , i ] ;
1116: LD_ADDR_VAR 0 4
1120: PUSH
1121: LD_VAR 0 5
1125: PUSH
1126: LD_VAR 0 2
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: ST_TO_ADDR
// end ;
1135: GO 1052
1137: POP
1138: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1139: LD_EXP 1
1143: PPUSH
1144: LD_VAR 0 3
1148: PUSH
1149: LD_VAR 0 4
1153: PUSH
1154: LD_INT 2
1156: ARRAY
1157: ARRAY
1158: PUSH
1159: LD_INT 1
1161: ARRAY
1162: PPUSH
1163: LD_VAR 0 3
1167: PUSH
1168: LD_VAR 0 4
1172: PUSH
1173: LD_INT 2
1175: ARRAY
1176: ARRAY
1177: PUSH
1178: LD_INT 2
1180: ARRAY
1181: PPUSH
1182: CALL_OW 111
// wait ( 0 0$3 ) ;
1186: LD_INT 105
1188: PPUSH
1189: CALL_OW 67
// InGameOff ;
1193: CALL_OW 9
// end ;
1197: PPOPN 5
1199: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1200: LD_EXP 1
1204: PPUSH
1205: LD_INT 14
1207: PPUSH
1208: CALL_OW 296
1212: PUSH
1213: LD_INT 40
1215: GREATER
1216: PUSH
1217: LD_EXP 1
1221: PPUSH
1222: CALL_OW 316
1226: AND
1227: PUSH
1228: LD_EXP 22
1232: NOT
1233: AND
1234: IFFALSE 1251
1236: GO 1238
1238: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1239: LD_EXP 5
1243: PPUSH
1244: LD_STRING DK-idle-1
1246: PPUSH
1247: CALL_OW 88
// end ;
1251: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1252: LD_INT 2
1254: PPUSH
1255: LD_INT 59
1257: PPUSH
1258: LD_INT 47
1260: PPUSH
1261: CALL_OW 293
1265: PUSH
1266: LD_EXP 22
1270: NOT
1271: AND
1272: IFFALSE 1429
1274: GO 1276
1276: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1277: LD_INT 59
1279: PPUSH
1280: LD_INT 47
1282: PPUSH
1283: LD_INT 2
1285: PPUSH
1286: LD_INT 10
1288: NEG
1289: PPUSH
1290: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1294: LD_INT 59
1296: PPUSH
1297: LD_INT 47
1299: PPUSH
1300: CALL_OW 86
// goWithHeike := false ;
1304: LD_ADDR_EXP 18
1308: PUSH
1309: LD_INT 0
1311: ST_TO_ADDR
// baseSpotted := true ;
1312: LD_ADDR_EXP 19
1316: PUSH
1317: LD_INT 1
1319: ST_TO_ADDR
// InGameOn ;
1320: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1324: LD_EXP 1
1328: PUSH
1329: LD_EXP 5
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PPUSH
1338: LD_INT 54
1340: PPUSH
1341: LD_INT 45
1343: PPUSH
1344: CALL_OW 111
// wait ( 0 0$1 ) ;
1348: LD_INT 35
1350: PPUSH
1351: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1355: LD_EXP 1
1359: PUSH
1360: LD_EXP 5
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PPUSH
1369: LD_INT 59
1371: PPUSH
1372: LD_INT 47
1374: PPUSH
1375: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1379: LD_EXP 1
1383: PPUSH
1384: LD_STRING DH-base-1
1386: PPUSH
1387: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1391: LD_EXP 5
1395: PPUSH
1396: LD_STRING DK-base-1
1398: PPUSH
1399: CALL_OW 88
// InGameOff ;
1403: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1407: LD_ADDR_EXP 17
1411: PUSH
1412: LD_EXP 17
1416: PUSH
1417: LD_INT 1
1419: PLUS
1420: ST_TO_ADDR
// goWithHeike := true ;
1421: LD_ADDR_EXP 18
1425: PUSH
1426: LD_INT 1
1428: ST_TO_ADDR
// end ;
1429: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1430: LD_INT 2
1432: PPUSH
1433: LD_EXP 8
1437: PPUSH
1438: CALL_OW 292
1442: PUSH
1443: LD_EXP 22
1447: NOT
1448: AND
1449: IFFALSE 2791
1451: GO 1453
1453: DISABLE
1454: LD_INT 0
1456: PPUSH
1457: PPUSH
1458: PPUSH
1459: PPUSH
// begin meetingActive := false ;
1460: LD_ADDR_EXP 21
1464: PUSH
1465: LD_INT 0
1467: ST_TO_ADDR
// goWithHeike := false ;
1468: LD_ADDR_EXP 18
1472: PUSH
1473: LD_INT 0
1475: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1476: LD_ADDR_VAR 0 2
1480: PUSH
1481: LD_INT 6
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 517
1491: ST_TO_ADDR
// for i := 1 to 4 do
1492: LD_ADDR_VAR 0 1
1496: PUSH
1497: DOUBLE
1498: LD_INT 1
1500: DEC
1501: ST_TO_ADDR
1502: LD_INT 4
1504: PUSH
1505: FOR_TO
1506: IFFALSE 1573
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1508: LD_EXP 15
1512: PUSH
1513: LD_VAR 0 1
1517: ARRAY
1518: PPUSH
1519: LD_VAR 0 2
1523: PUSH
1524: LD_INT 1
1526: ARRAY
1527: PUSH
1528: LD_VAR 0 1
1532: ARRAY
1533: PPUSH
1534: LD_VAR 0 2
1538: PUSH
1539: LD_INT 2
1541: ARRAY
1542: PUSH
1543: LD_VAR 0 1
1547: ARRAY
1548: PPUSH
1549: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1553: LD_EXP 15
1557: PUSH
1558: LD_VAR 0 1
1562: ARRAY
1563: PPUSH
1564: LD_INT 14
1566: PPUSH
1567: CALL_OW 179
// end ;
1571: GO 1505
1573: POP
1574: POP
// InGameOn ;
1575: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1579: LD_EXP 8
1583: PPUSH
1584: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1588: LD_EXP 1
1592: PPUSH
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1602: LD_EXP 5
1606: PPUSH
1607: LD_EXP 1
1611: PPUSH
1612: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1616: LD_INT 10
1618: PPUSH
1619: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1623: LD_EXP 1
1627: PPUSH
1628: LD_EXP 8
1632: PPUSH
1633: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1637: LD_EXP 5
1641: PPUSH
1642: LD_EXP 1
1646: PPUSH
1647: CALL_OW 250
1651: PPUSH
1652: LD_INT 5
1654: PPUSH
1655: LD_INT 1
1657: PPUSH
1658: CALL_OW 272
1662: PPUSH
1663: LD_EXP 1
1667: PPUSH
1668: CALL_OW 251
1672: PPUSH
1673: LD_INT 5
1675: PPUSH
1676: LD_INT 1
1678: PPUSH
1679: CALL_OW 273
1683: PPUSH
1684: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1688: LD_EXP 1
1692: PPUSH
1693: LD_EXP 8
1697: PPUSH
1698: CALL_OW 296
1702: PUSH
1703: LD_INT 5
1705: LESS
1706: PUSH
1707: LD_EXP 5
1711: PPUSH
1712: LD_EXP 8
1716: PPUSH
1717: CALL_OW 296
1721: PUSH
1722: LD_INT 6
1724: LESS
1725: AND
1726: IFFALSE 1616
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1728: LD_EXP 1
1732: PUSH
1733: LD_EXP 5
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: PPUSH
1742: LD_EXP 8
1746: PPUSH
1747: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1751: LD_EXP 8
1755: PUSH
1756: LD_EXP 4
1760: PUSH
1761: LD_EXP 9
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: LIST
1770: PPUSH
1771: LD_EXP 1
1775: PPUSH
1776: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1780: LD_INT 7
1782: PPUSH
1783: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1787: LD_EXP 8
1791: PPUSH
1792: LD_STRING DKu-Kurt-1
1794: PPUSH
1795: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1799: LD_EXP 5
1803: PPUSH
1804: LD_STRING DK-Kurt-1
1806: PPUSH
1807: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1811: LD_EXP 8
1815: PPUSH
1816: LD_STRING DKu-Kurt-2
1818: PPUSH
1819: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1823: LD_INT 7
1825: PPUSH
1826: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1830: LD_EXP 1
1834: PPUSH
1835: LD_STRING DH-Kurt-1
1837: PPUSH
1838: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1842: LD_EXP 8
1846: PPUSH
1847: LD_STRING DKu-Kurt-3
1849: PPUSH
1850: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1854: LD_EXP 5
1858: PPUSH
1859: LD_STRING DK-Kurt-3
1861: PPUSH
1862: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1866: LD_EXP 9
1870: PPUSH
1871: LD_STRING DHa-Kurt-3
1873: PPUSH
1874: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1878: LD_EXP 4
1882: PPUSH
1883: LD_STRING DO-Kurt-3
1885: PPUSH
1886: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1890: LD_ADDR_VAR 0 3
1894: PUSH
1895: LD_EXP 8
1899: PUSH
1900: LD_EXP 4
1904: PUSH
1905: LD_EXP 9
1909: PUSH
1910: LD_EXP 5
1914: PUSH
1915: LD_EXP 1
1919: PUSH
1920: EMPTY
1921: LIST
1922: LIST
1923: LIST
1924: LIST
1925: LIST
1926: PUSH
1927: LD_EXP 16
1931: UNION
1932: ST_TO_ADDR
// for i = 1 to tmp2 do
1933: LD_ADDR_VAR 0 1
1937: PUSH
1938: DOUBLE
1939: LD_INT 1
1941: DEC
1942: ST_TO_ADDR
1943: LD_VAR 0 3
1947: PUSH
1948: FOR_TO
1949: IFFALSE 2024
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1951: LD_VAR 0 3
1955: PUSH
1956: LD_VAR 0 1
1960: ARRAY
1961: PPUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_INT 1
1969: ARRAY
1970: PUSH
1971: LD_VAR 0 1
1975: PUSH
1976: LD_INT 4
1978: PLUS
1979: ARRAY
1980: PPUSH
1981: LD_VAR 0 2
1985: PUSH
1986: LD_INT 2
1988: ARRAY
1989: PUSH
1990: LD_VAR 0 1
1994: PUSH
1995: LD_INT 4
1997: PLUS
1998: ARRAY
1999: PPUSH
2000: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2004: LD_VAR 0 3
2008: PUSH
2009: LD_VAR 0 1
2013: ARRAY
2014: PPUSH
2015: LD_INT 14
2017: PPUSH
2018: CALL_OW 179
// end ;
2022: GO 1948
2024: POP
2025: POP
// wait ( 0 0$2 ) ;
2026: LD_INT 70
2028: PPUSH
2029: CALL_OW 67
// CenterOnUnits ( eon ) ;
2033: LD_INT 14
2035: PPUSH
2036: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2040: LD_INT 90
2042: PPUSH
2043: LD_INT 43
2045: PPUSH
2046: LD_INT 2
2048: PPUSH
2049: LD_INT 21
2051: NEG
2052: PPUSH
2053: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2057: LD_EXP 2
2061: PPUSH
2062: LD_INT 84
2064: PPUSH
2065: LD_INT 36
2067: PPUSH
2068: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2072: LD_EXP 2
2076: PPUSH
2077: LD_INT 14
2079: PPUSH
2080: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2084: LD_EXP 11
2088: PPUSH
2089: LD_INT 85
2091: PPUSH
2092: LD_INT 36
2094: PPUSH
2095: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2099: LD_EXP 11
2103: PPUSH
2104: LD_INT 14
2106: PPUSH
2107: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2111: LD_EXP 10
2115: PPUSH
2116: LD_INT 86
2118: PPUSH
2119: LD_INT 36
2121: PPUSH
2122: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2126: LD_EXP 10
2130: PPUSH
2131: LD_INT 14
2133: PPUSH
2134: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2138: LD_EXP 7
2142: PPUSH
2143: LD_INT 87
2145: PPUSH
2146: LD_INT 36
2148: PPUSH
2149: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2153: LD_EXP 7
2157: PPUSH
2158: LD_INT 14
2160: PPUSH
2161: CALL_OW 179
// wait ( 0 0$3 ) ;
2165: LD_INT 105
2167: PPUSH
2168: CALL_OW 67
// p := 0 ;
2172: LD_ADDR_VAR 0 4
2176: PUSH
2177: LD_INT 0
2179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2180: LD_INT 35
2182: PPUSH
2183: CALL_OW 67
// p := p + 1 ;
2187: LD_ADDR_VAR 0 4
2191: PUSH
2192: LD_VAR 0 4
2196: PUSH
2197: LD_INT 1
2199: PLUS
2200: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2201: LD_EXP 1
2205: PPUSH
2206: LD_INT 6
2208: PPUSH
2209: CALL_OW 308
2213: PUSH
2214: LD_VAR 0 4
2218: PUSH
2219: LD_INT 10
2221: GREATER
2222: OR
2223: IFFALSE 2180
// heikeNearbyEon := true ;
2225: LD_ADDR_EXP 20
2229: PUSH
2230: LD_INT 1
2232: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2233: LD_EXP 6
2237: PPUSH
2238: LD_INT 88
2240: PPUSH
2241: LD_INT 37
2243: PPUSH
2244: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2248: LD_EXP 6
2252: PPUSH
2253: LD_EXP 13
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2266: LD_EXP 13
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PPUSH
2275: LD_INT 89
2277: PPUSH
2278: LD_INT 37
2280: PPUSH
2281: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2285: LD_EXP 13
2289: PUSH
2290: LD_INT 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 91
2296: PPUSH
2297: LD_INT 39
2299: PPUSH
2300: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2304: LD_EXP 13
2308: PPUSH
2309: LD_EXP 11
2313: PPUSH
2314: CALL_OW 179
// wait ( 0 0$1 ) ;
2318: LD_INT 35
2320: PPUSH
2321: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2325: LD_EXP 13
2329: PUSH
2330: LD_INT 1
2332: ARRAY
2333: PPUSH
2334: LD_STRING DS-eon-1
2336: PPUSH
2337: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2341: LD_EXP 6
2345: PPUSH
2346: LD_STRING DSh-eon-1
2348: PPUSH
2349: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2353: LD_EXP 13
2357: PUSH
2358: LD_INT 1
2360: ARRAY
2361: PPUSH
2362: LD_STRING DS-eon-2
2364: PPUSH
2365: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2369: LD_EXP 6
2373: PPUSH
2374: LD_STRING DSh-eon-1a
2376: PPUSH
2377: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2381: LD_EXP 13
2385: PUSH
2386: LD_INT 1
2388: ARRAY
2389: PPUSH
2390: LD_INT 92
2392: PPUSH
2393: LD_INT 43
2395: PPUSH
2396: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2400: LD_EXP 13
2404: PUSH
2405: LD_INT 1
2407: ARRAY
2408: PPUSH
2409: LD_INT 14
2411: PPUSH
2412: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2416: LD_EXP 13
2420: PUSH
2421: LD_INT 2
2423: ARRAY
2424: PPUSH
2425: LD_INT 93
2427: PPUSH
2428: LD_INT 41
2430: PPUSH
2431: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2435: LD_EXP 13
2439: PUSH
2440: LD_INT 2
2442: ARRAY
2443: PPUSH
2444: LD_INT 93
2446: PPUSH
2447: LD_INT 40
2449: PPUSH
2450: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2454: LD_EXP 6
2458: PPUSH
2459: LD_INT 88
2461: PPUSH
2462: LD_INT 41
2464: PPUSH
2465: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2469: LD_EXP 6
2473: PPUSH
2474: LD_INT 87
2476: PPUSH
2477: LD_INT 41
2479: PPUSH
2480: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2484: LD_INT 35
2486: PPUSH
2487: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2491: LD_EXP 6
2495: PPUSH
2496: LD_INT 88
2498: PPUSH
2499: LD_INT 41
2501: PPUSH
2502: CALL_OW 307
2506: IFFALSE 2484
// wait ( 0 0$1 ) ;
2508: LD_INT 35
2510: PPUSH
2511: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2515: LD_EXP 6
2519: PPUSH
2520: LD_STRING DSh-eon-2
2522: PPUSH
2523: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2527: LD_EXP 11
2531: PPUSH
2532: LD_INT 87
2534: PPUSH
2535: LD_INT 40
2537: PPUSH
2538: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2542: LD_EXP 11
2546: PPUSH
2547: LD_INT 86
2549: PPUSH
2550: LD_INT 40
2552: PPUSH
2553: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2557: LD_INT 35
2559: PPUSH
2560: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2564: LD_EXP 11
2568: PPUSH
2569: LD_INT 87
2571: PPUSH
2572: LD_INT 40
2574: PPUSH
2575: CALL_OW 307
2579: IFFALSE 2557
// Say ( Shariff , DShar-eon-3 ) ;
2581: LD_EXP 11
2585: PPUSH
2586: LD_STRING DShar-eon-3
2588: PPUSH
2589: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2593: LD_INT 10
2595: PPUSH
2596: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2600: LD_EXP 5
2604: PPUSH
2605: LD_EXP 1
2609: PPUSH
2610: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2614: LD_EXP 11
2618: PPUSH
2619: LD_STRING DShar-eon-4
2621: PPUSH
2622: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2626: LD_EXP 5
2630: PPUSH
2631: LD_STRING DK-eon-4
2633: PPUSH
2634: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2638: LD_EXP 5
2642: PPUSH
2643: LD_INT 14
2645: PPUSH
2646: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2650: LD_INT 35
2652: PPUSH
2653: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2657: LD_EXP 5
2661: PPUSH
2662: CALL_OW 305
2666: NOT
2667: IFFALSE 2650
// ComTurnUnit ( Shariff , Heike ) ;
2669: LD_EXP 11
2673: PPUSH
2674: LD_EXP 1
2678: PPUSH
2679: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_STRING DShar-eon-5
2690: PPUSH
2691: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2695: LD_EXP 1
2699: PPUSH
2700: LD_INT 91
2702: PPUSH
2703: LD_INT 44
2705: PPUSH
2706: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2710: LD_EXP 1
2714: PPUSH
2715: LD_INT 14
2717: PPUSH
2718: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2722: LD_INT 35
2724: PPUSH
2725: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2729: LD_EXP 1
2733: PPUSH
2734: LD_INT 91
2736: PPUSH
2737: LD_INT 44
2739: PPUSH
2740: CALL_OW 307
2744: IFFALSE 2722
// Say ( Heike , DH-eon-5 ) ;
2746: LD_EXP 1
2750: PPUSH
2751: LD_STRING DH-eon-5
2753: PPUSH
2754: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2758: LD_EXP 1
2762: PPUSH
2763: LD_INT 14
2765: PPUSH
2766: CALL_OW 120
// wait ( 0 0$2 ) ;
2770: LD_INT 70
2772: PPUSH
2773: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2777: LD_INT 1
2779: PPUSH
2780: LD_STRING %_cont
2782: PPUSH
2783: CALL_OW 340
// InGameOff ;
2787: CALL_OW 9
// end ; end_of_file
2791: PPOPN 4
2793: END
// export function PrepareHeikeGroup ; begin
2794: LD_INT 0
2796: PPUSH
// uc_side := 2 ;
2797: LD_ADDR_OWVAR 20
2801: PUSH
2802: LD_INT 2
2804: ST_TO_ADDR
// uc_nation := 2 ;
2805: LD_ADDR_OWVAR 21
2809: PUSH
2810: LD_INT 2
2812: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2813: LD_ADDR_EXP 1
2817: PUSH
2818: LD_STRING Heike
2820: PPUSH
2821: CALL_OW 25
2825: ST_TO_ADDR
// uc_side := 5 ;
2826: LD_ADDR_OWVAR 20
2830: PUSH
2831: LD_INT 5
2833: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2834: LD_ADDR_EXP 5
2838: PUSH
2839: LD_STRING Kaia
2841: PPUSH
2842: CALL_OW 25
2846: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2847: LD_EXP 1
2851: PPUSH
2852: LD_INT 3
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2862: LD_EXP 5
2866: PPUSH
2867: LD_INT 3
2869: PPUSH
2870: LD_INT 0
2872: PPUSH
2873: CALL_OW 49
// end ;
2877: LD_VAR 0 1
2881: RET
// export function PrepareSheikGroup ; var un , i ; begin
2882: LD_INT 0
2884: PPUSH
2885: PPUSH
2886: PPUSH
// uc_side := 5 ;
2887: LD_ADDR_OWVAR 20
2891: PUSH
2892: LD_INT 5
2894: ST_TO_ADDR
// uc_nation := 2 ;
2895: LD_ADDR_OWVAR 21
2899: PUSH
2900: LD_INT 2
2902: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2903: LD_ADDR_EXP 10
2907: PUSH
2908: LD_STRING Ali
2910: PPUSH
2911: CALL_OW 25
2915: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2916: LD_ADDR_EXP 11
2920: PUSH
2921: LD_STRING Abdul
2923: PPUSH
2924: CALL_OW 25
2928: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2929: LD_ADDR_EXP 2
2933: PUSH
2934: LD_STRING Omar
2936: PPUSH
2937: CALL_OW 25
2941: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2942: LD_ADDR_EXP 7
2946: PUSH
2947: LD_STRING Mahtab
2949: PPUSH
2950: CALL_OW 25
2954: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2955: LD_ADDR_EXP 6
2959: PUSH
2960: LD_STRING Shahrzad
2962: PPUSH
2963: CALL_OW 25
2967: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2968: LD_EXP 10
2972: PPUSH
2973: LD_INT 85
2975: PPUSH
2976: LD_INT 37
2978: PPUSH
2979: LD_INT 0
2981: PPUSH
2982: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2986: LD_EXP 11
2990: PPUSH
2991: LD_INT 87
2993: PPUSH
2994: LD_INT 37
2996: PPUSH
2997: LD_INT 0
2999: PPUSH
3000: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3004: LD_EXP 2
3008: PPUSH
3009: LD_INT 85
3011: PPUSH
3012: LD_INT 35
3014: PPUSH
3015: LD_INT 0
3017: PPUSH
3018: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3022: LD_EXP 7
3026: PPUSH
3027: LD_INT 86
3029: PPUSH
3030: LD_INT 39
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3040: LD_EXP 6
3044: PPUSH
3045: LD_INT 88
3047: PPUSH
3048: LD_INT 39
3050: PPUSH
3051: LD_INT 0
3053: PPUSH
3054: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3058: LD_EXP 10
3062: PPUSH
3063: LD_EXP 11
3067: PPUSH
3068: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3072: LD_EXP 11
3076: PPUSH
3077: LD_EXP 10
3081: PPUSH
3082: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3086: LD_EXP 2
3090: PPUSH
3091: LD_EXP 11
3095: PPUSH
3096: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3100: LD_EXP 7
3104: PUSH
3105: LD_EXP 6
3109: PUSH
3110: EMPTY
3111: LIST
3112: LIST
3113: PPUSH
3114: LD_EXP 11
3118: PPUSH
3119: CALL_OW 119
// for i := 1 to 2 do
3123: LD_ADDR_VAR 0 3
3127: PUSH
3128: DOUBLE
3129: LD_INT 1
3131: DEC
3132: ST_TO_ADDR
3133: LD_INT 2
3135: PUSH
3136: FOR_TO
3137: IFFALSE 3223
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3139: LD_INT 2
3141: PPUSH
3142: LD_INT 4
3144: PPUSH
3145: LD_INT 6
3147: PPUSH
3148: CALL_OW 380
// un := CreateHuman ;
3152: LD_ADDR_VAR 0 2
3156: PUSH
3157: CALL_OW 44
3161: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3162: LD_VAR 0 2
3166: PPUSH
3167: LD_INT 90
3169: PPUSH
3170: LD_INT 44
3172: PPUSH
3173: LD_INT 3
3175: PPUSH
3176: LD_INT 0
3178: PPUSH
3179: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3183: LD_VAR 0 2
3187: PPUSH
3188: LD_INT 91
3190: PPUSH
3191: LD_INT 43
3193: PPUSH
3194: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3198: LD_ADDR_EXP 13
3202: PUSH
3203: LD_EXP 13
3207: PPUSH
3208: LD_INT 1
3210: PPUSH
3211: LD_VAR 0 2
3215: PPUSH
3216: CALL_OW 2
3220: ST_TO_ADDR
// end ;
3221: GO 3136
3223: POP
3224: POP
// scientists := scientists diff 0 ;
3225: LD_ADDR_EXP 13
3229: PUSH
3230: LD_EXP 13
3234: PUSH
3235: LD_INT 0
3237: DIFF
3238: ST_TO_ADDR
// end ;
3239: LD_VAR 0 1
3243: RET
// export function PrepareKurtGroup ; var i ; begin
3244: LD_INT 0
3246: PPUSH
3247: PPUSH
// uc_side := 5 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 5
3255: ST_TO_ADDR
// uc_nation := 2 ;
3256: LD_ADDR_OWVAR 21
3260: PUSH
3261: LD_INT 2
3263: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3264: LD_ADDR_EXP 8
3268: PUSH
3269: LD_STRING Kurt
3271: PPUSH
3272: CALL_OW 25
3276: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3277: LD_ADDR_EXP 4
3281: PUSH
3282: LD_STRING Olaf
3284: PPUSH
3285: CALL_OW 25
3289: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3290: LD_ADDR_EXP 9
3294: PUSH
3295: LD_STRING Hans
3297: PPUSH
3298: CALL_OW 25
3302: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3303: LD_ADDR_VAR 0 2
3307: PUSH
3308: LD_EXP 8
3312: PUSH
3313: LD_EXP 9
3317: PUSH
3318: LD_EXP 4
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: FOR_IN
3329: IFFALSE 3348
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 10
3338: PPUSH
3339: LD_INT 0
3341: PPUSH
3342: CALL_OW 49
3346: GO 3328
3348: POP
3349: POP
// ComTurnUnit ( Kurt , Hans ) ;
3350: LD_EXP 8
3354: PPUSH
3355: LD_EXP 9
3359: PPUSH
3360: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3364: LD_EXP 4
3368: PPUSH
3369: LD_EXP 9
3373: PPUSH
3374: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3378: LD_EXP 9
3382: PPUSH
3383: LD_EXP 4
3387: PPUSH
3388: CALL_OW 119
// end ;
3392: LD_VAR 0 1
3396: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3397: LD_INT 0
3399: PPUSH
3400: PPUSH
3401: PPUSH
3402: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3403: LD_ADDR_VAR 0 2
3407: PUSH
3408: LD_INT 21
3410: PUSH
3411: LD_INT 3
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PPUSH
3418: CALL_OW 69
3422: PUSH
3423: LD_INT 14
3425: DIFF
3426: PUSH
3427: FOR_IN
3428: IFFALSE 3508
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3430: LD_VAR 0 2
3434: PPUSH
3435: CALL_OW 266
3439: PUSH
3440: LD_INT 6
3442: PUSH
3443: LD_INT 31
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: IN
3450: IFFALSE 3474
// SetLives ( i , rand ( 500 , 600 ) ) else
3452: LD_VAR 0 2
3456: PPUSH
3457: LD_INT 500
3459: PPUSH
3460: LD_INT 600
3462: PPUSH
3463: CALL_OW 12
3467: PPUSH
3468: CALL_OW 234
3472: GO 3494
// SetLives ( i , rand ( 300 , 499 ) ) ;
3474: LD_VAR 0 2
3478: PPUSH
3479: LD_INT 300
3481: PPUSH
3482: LD_INT 499
3484: PPUSH
3485: CALL_OW 12
3489: PPUSH
3490: CALL_OW 234
// SetSide ( i , 5 ) ;
3494: LD_VAR 0 2
3498: PPUSH
3499: LD_INT 5
3501: PPUSH
3502: CALL_OW 235
// end ;
3506: GO 3427
3508: POP
3509: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3510: LD_ADDR_VAR 0 4
3514: PUSH
3515: LD_INT 9
3517: PPUSH
3518: LD_INT 0
3520: PPUSH
3521: CALL_OW 517
3525: ST_TO_ADDR
// uc_side := 4 ;
3526: LD_ADDR_OWVAR 20
3530: PUSH
3531: LD_INT 4
3533: ST_TO_ADDR
// uc_nation := 1 ;
3534: LD_ADDR_OWVAR 21
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3542: LD_ADDR_VAR 0 2
3546: PUSH
3547: DOUBLE
3548: LD_INT 1
3550: DEC
3551: ST_TO_ADDR
3552: LD_VAR 0 4
3556: PUSH
3557: LD_INT 1
3559: ARRAY
3560: PUSH
3561: FOR_TO
3562: IFFALSE 3638
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3564: LD_INT 0
3566: PPUSH
3567: LD_INT 1
3569: PUSH
3570: LD_INT 1
3572: PUSH
3573: LD_INT 4
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: LIST
3580: PUSH
3581: LD_VAR 0 2
3585: PUSH
3586: LD_INT 3
3588: MOD
3589: PUSH
3590: LD_INT 1
3592: PLUS
3593: ARRAY
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL_OW 380
// un := CreateHuman ;
3602: LD_ADDR_VAR 0 3
3606: PUSH
3607: CALL_OW 44
3611: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3612: LD_VAR 0 3
3616: PPUSH
3617: LD_INT 9
3619: PPUSH
3620: LD_INT 0
3622: PPUSH
3623: CALL_OW 49
// KillUnit ( un ) ;
3627: LD_VAR 0 3
3631: PPUSH
3632: CALL_OW 66
// end ;
3636: GO 3561
3638: POP
3639: POP
// end ;
3640: LD_VAR 0 1
3644: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3645: LD_INT 0
3647: PPUSH
3648: PPUSH
3649: PPUSH
3650: PPUSH
3651: PPUSH
3652: PPUSH
3653: PPUSH
// uc_side := 5 ;
3654: LD_ADDR_OWVAR 20
3658: PUSH
3659: LD_INT 5
3661: ST_TO_ADDR
// uc_nation := 2 ;
3662: LD_ADDR_OWVAR 21
3666: PUSH
3667: LD_INT 2
3669: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3670: LD_ADDR_VAR 0 6
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: LD_INT 4
3680: PUSH
3681: LD_INT 5
3683: PUSH
3684: LD_INT 14
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: LIST
3691: LIST
3692: ST_TO_ADDR
// InitHc ;
3693: CALL_OW 19
// for i in area do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: LD_VAR 0 6
3706: PUSH
3707: FOR_IN
3708: IFFALSE 3872
// begin tmp := AreaToList ( i , 0 ) ;
3710: LD_ADDR_VAR 0 5
3714: PUSH
3715: LD_VAR 0 2
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3728: LD_ADDR_VAR 0 3
3732: PUSH
3733: DOUBLE
3734: LD_INT 1
3736: DEC
3737: ST_TO_ADDR
3738: LD_VAR 0 5
3742: PUSH
3743: LD_INT 1
3745: ARRAY
3746: PUSH
3747: FOR_TO
3748: IFFALSE 3868
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3750: LD_INT 1
3752: PPUSH
3753: LD_INT 1
3755: PPUSH
3756: LD_INT 3
3758: PPUSH
3759: CALL_OW 380
// un := CreateHuman ;
3763: LD_ADDR_VAR 0 7
3767: PUSH
3768: CALL_OW 44
3772: ST_TO_ADDR
// if i = spawnBaseArea3 then
3773: LD_VAR 0 2
3777: PUSH
3778: LD_INT 5
3780: EQUAL
3781: IFFALSE 3799
// eonGuards := eonGuards ^ un ;
3783: LD_ADDR_EXP 14
3787: PUSH
3788: LD_EXP 14
3792: PUSH
3793: LD_VAR 0 7
3797: ADD
3798: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3799: LD_VAR 0 7
3803: PPUSH
3804: LD_VAR 0 2
3808: PPUSH
3809: LD_INT 0
3811: PPUSH
3812: CALL_OW 49
// ComHold ( un ) ;
3816: LD_VAR 0 7
3820: PPUSH
3821: CALL_OW 140
// if i = spawnBaseArea4 then
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 14
3832: EQUAL
3833: IFFALSE 3866
// begin firstGroup := firstGroup ^ un ;
3835: LD_ADDR_EXP 15
3839: PUSH
3840: LD_EXP 15
3844: PUSH
3845: LD_VAR 0 7
3849: ADD
3850: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3851: LD_VAR 0 7
3855: PPUSH
3856: LD_INT 108
3858: PPUSH
3859: LD_INT 47
3861: PPUSH
3862: CALL_OW 118
// end ; end ;
3866: GO 3747
3868: POP
3869: POP
// end ;
3870: GO 3707
3872: POP
3873: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3874: LD_ADDR_VAR 0 2
3878: PUSH
3879: DOUBLE
3880: LD_INT 1
3882: DEC
3883: ST_TO_ADDR
3884: LD_INT 30
3886: PUSH
3887: LD_INT 31
3889: PUSH
3890: EMPTY
3891: LIST
3892: LIST
3893: PPUSH
3894: CALL_OW 69
3898: PUSH
3899: FOR_TO
3900: IFFALSE 3994
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3902: LD_ADDR_VAR 0 4
3906: PUSH
3907: LD_INT 30
3909: PUSH
3910: LD_INT 31
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: PPUSH
3917: CALL_OW 69
3921: PUSH
3922: LD_VAR 0 2
3926: ARRAY
3927: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 3
3936: PPUSH
3937: CALL_OW 380
// un := CreateHuman ;
3941: LD_ADDR_VAR 0 7
3945: PUSH
3946: CALL_OW 44
3950: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3951: LD_VAR 0 7
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: CALL_OW 254
3965: PUSH
3966: LD_INT 3
3968: PLUS
3969: PUSH
3970: LD_INT 6
3972: MOD
3973: PPUSH
3974: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3978: LD_VAR 0 7
3982: PPUSH
3983: LD_VAR 0 4
3987: PPUSH
3988: CALL_OW 52
// end ;
3992: GO 3899
3994: POP
3995: POP
// end ; end_of_file
3996: LD_VAR 0 1
4000: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4001: LD_VAR 0 1
4005: PUSH
4006: LD_INT 2
4008: EQUAL
4009: PUSH
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 5
4017: EQUAL
4018: AND
4019: IFFALSE 4045
// begin kaiaAttacked := true ;
4021: LD_ADDR_EXP 22
4025: PUSH
4026: LD_INT 1
4028: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4029: LD_INT 2
4031: PPUSH
4032: LD_INT 5
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 1
4040: PPUSH
4041: CALL_OW 80
// end ; end ;
4045: PPOPN 2
4047: END
// every 0 0$1 trigger scientists do var i ;
4048: LD_EXP 13
4052: IFFALSE 4260
4054: GO 4056
4056: DISABLE
4057: LD_INT 0
4059: PPUSH
// begin repeat for i in scientists do
4060: LD_ADDR_VAR 0 1
4064: PUSH
4065: LD_EXP 13
4069: PUSH
4070: FOR_IN
4071: IFFALSE 4245
// begin wait ( 0 0$1 ) ;
4073: LD_INT 35
4075: PPUSH
4076: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4080: LD_VAR 0 1
4084: PPUSH
4085: LD_INT 11
4087: PUSH
4088: LD_INT 13
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PUSH
4095: LD_VAR 0 1
4099: PUSH
4100: LD_INT 2
4102: MOD
4103: PUSH
4104: LD_INT 1
4106: PLUS
4107: ARRAY
4108: PPUSH
4109: CALL_OW 308
4113: NOT
4114: IFFALSE 4149
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4116: LD_VAR 0 1
4120: PPUSH
4121: LD_INT 11
4123: PUSH
4124: LD_INT 13
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_VAR 0 1
4135: PUSH
4136: LD_INT 2
4138: MOD
4139: PUSH
4140: LD_INT 1
4142: PLUS
4143: ARRAY
4144: PPUSH
4145: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4149: LD_VAR 0 1
4153: PPUSH
4154: LD_INT 14
4156: PPUSH
4157: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4161: LD_VAR 0 1
4165: PPUSH
4166: LD_INT 70
4168: PPUSH
4169: CALL_OW 202
// if rand ( 0 , 1 ) then
4173: LD_INT 0
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: CALL_OW 12
4183: IFFALSE 4197
// AddComAnim ( i , 15 ) ;
4185: LD_VAR 0 1
4189: PPUSH
4190: LD_INT 15
4192: PPUSH
4193: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4197: LD_VAR 0 1
4201: PPUSH
4202: LD_INT 35
4204: PPUSH
4205: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4209: LD_VAR 0 1
4213: PPUSH
4214: LD_INT 12
4216: PPUSH
4217: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4221: LD_VAR 0 1
4225: PPUSH
4226: LD_INT 93
4228: PPUSH
4229: LD_INT 40
4231: PPUSH
4232: CALL_OW 178
// wait ( 0 0$1 ) ;
4236: LD_INT 35
4238: PPUSH
4239: CALL_OW 67
// end ;
4243: GO 4070
4245: POP
4246: POP
// wait ( 0 0$10 ) ;
4247: LD_INT 350
4249: PPUSH
4250: CALL_OW 67
// until heikeNearbyEon ;
4254: LD_EXP 20
4258: IFFALSE 4060
// end ; end_of_file
4260: PPOPN 1
4262: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
4263: LD_VAR 0 2
4267: PUSH
4268: LD_INT 100
4270: EQUAL
4271: IFFALSE 5220
// begin if not StreamModeActive then
4273: LD_EXP 23
4277: NOT
4278: IFFALSE 4288
// StreamModeActive := true ;
4280: LD_ADDR_EXP 23
4284: PUSH
4285: LD_INT 1
4287: ST_TO_ADDR
// if p3 = 0 then
4288: LD_VAR 0 3
4292: PUSH
4293: LD_INT 0
4295: EQUAL
4296: IFFALSE 4302
// InitStreamMode ;
4298: CALL 5453 0 0
// if p3 = 1 then
4302: LD_VAR 0 3
4306: PUSH
4307: LD_INT 1
4309: EQUAL
4310: IFFALSE 4320
// sRocket := true ;
4312: LD_ADDR_EXP 28
4316: PUSH
4317: LD_INT 1
4319: ST_TO_ADDR
// if p3 = 2 then
4320: LD_VAR 0 3
4324: PUSH
4325: LD_INT 2
4327: EQUAL
4328: IFFALSE 4338
// sSpeed := true ;
4330: LD_ADDR_EXP 27
4334: PUSH
4335: LD_INT 1
4337: ST_TO_ADDR
// if p3 = 3 then
4338: LD_VAR 0 3
4342: PUSH
4343: LD_INT 3
4345: EQUAL
4346: IFFALSE 4356
// sEngine := true ;
4348: LD_ADDR_EXP 29
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// if p3 = 4 then
4356: LD_VAR 0 3
4360: PUSH
4361: LD_INT 4
4363: EQUAL
4364: IFFALSE 4374
// sSpec := true ;
4366: LD_ADDR_EXP 26
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// if p3 = 5 then
4374: LD_VAR 0 3
4378: PUSH
4379: LD_INT 5
4381: EQUAL
4382: IFFALSE 4392
// sLevel := true ;
4384: LD_ADDR_EXP 30
4388: PUSH
4389: LD_INT 1
4391: ST_TO_ADDR
// if p3 = 6 then
4392: LD_VAR 0 3
4396: PUSH
4397: LD_INT 6
4399: EQUAL
4400: IFFALSE 4410
// sArmoury := true ;
4402: LD_ADDR_EXP 31
4406: PUSH
4407: LD_INT 1
4409: ST_TO_ADDR
// if p3 = 7 then
4410: LD_VAR 0 3
4414: PUSH
4415: LD_INT 7
4417: EQUAL
4418: IFFALSE 4428
// sRadar := true ;
4420: LD_ADDR_EXP 32
4424: PUSH
4425: LD_INT 1
4427: ST_TO_ADDR
// if p3 = 8 then
4428: LD_VAR 0 3
4432: PUSH
4433: LD_INT 8
4435: EQUAL
4436: IFFALSE 4446
// sBunker := true ;
4438: LD_ADDR_EXP 33
4442: PUSH
4443: LD_INT 1
4445: ST_TO_ADDR
// if p3 = 9 then
4446: LD_VAR 0 3
4450: PUSH
4451: LD_INT 9
4453: EQUAL
4454: IFFALSE 4464
// sHack := true ;
4456: LD_ADDR_EXP 34
4460: PUSH
4461: LD_INT 1
4463: ST_TO_ADDR
// if p3 = 10 then
4464: LD_VAR 0 3
4468: PUSH
4469: LD_INT 10
4471: EQUAL
4472: IFFALSE 4482
// sFire := true ;
4474: LD_ADDR_EXP 35
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// if p3 = 11 then
4482: LD_VAR 0 3
4486: PUSH
4487: LD_INT 11
4489: EQUAL
4490: IFFALSE 4500
// sRefresh := true ;
4492: LD_ADDR_EXP 36
4496: PUSH
4497: LD_INT 1
4499: ST_TO_ADDR
// if p3 = 12 then
4500: LD_VAR 0 3
4504: PUSH
4505: LD_INT 12
4507: EQUAL
4508: IFFALSE 4518
// sExp := true ;
4510: LD_ADDR_EXP 37
4514: PUSH
4515: LD_INT 1
4517: ST_TO_ADDR
// if p3 = 13 then
4518: LD_VAR 0 3
4522: PUSH
4523: LD_INT 13
4525: EQUAL
4526: IFFALSE 4536
// sDepot := true ;
4528: LD_ADDR_EXP 38
4532: PUSH
4533: LD_INT 1
4535: ST_TO_ADDR
// if p3 = 14 then
4536: LD_VAR 0 3
4540: PUSH
4541: LD_INT 14
4543: EQUAL
4544: IFFALSE 4554
// sFlag := true ;
4546: LD_ADDR_EXP 39
4550: PUSH
4551: LD_INT 1
4553: ST_TO_ADDR
// if p3 = 15 then
4554: LD_VAR 0 3
4558: PUSH
4559: LD_INT 15
4561: EQUAL
4562: IFFALSE 4572
// sKamikadze := true ;
4564: LD_ADDR_EXP 47
4568: PUSH
4569: LD_INT 1
4571: ST_TO_ADDR
// if p3 = 16 then
4572: LD_VAR 0 3
4576: PUSH
4577: LD_INT 16
4579: EQUAL
4580: IFFALSE 4590
// sTroll := true ;
4582: LD_ADDR_EXP 48
4586: PUSH
4587: LD_INT 1
4589: ST_TO_ADDR
// if p3 = 17 then
4590: LD_VAR 0 3
4594: PUSH
4595: LD_INT 17
4597: EQUAL
4598: IFFALSE 4608
// sSlow := true ;
4600: LD_ADDR_EXP 49
4604: PUSH
4605: LD_INT 1
4607: ST_TO_ADDR
// if p3 = 18 then
4608: LD_VAR 0 3
4612: PUSH
4613: LD_INT 18
4615: EQUAL
4616: IFFALSE 4626
// sLack := true ;
4618: LD_ADDR_EXP 50
4622: PUSH
4623: LD_INT 1
4625: ST_TO_ADDR
// if p3 = 19 then
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 19
4633: EQUAL
4634: IFFALSE 4644
// sTank := true ;
4636: LD_ADDR_EXP 52
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// if p3 = 20 then
4644: LD_VAR 0 3
4648: PUSH
4649: LD_INT 20
4651: EQUAL
4652: IFFALSE 4662
// sRemote := true ;
4654: LD_ADDR_EXP 53
4658: PUSH
4659: LD_INT 1
4661: ST_TO_ADDR
// if p3 = 21 then
4662: LD_VAR 0 3
4666: PUSH
4667: LD_INT 21
4669: EQUAL
4670: IFFALSE 4680
// sPowell := true ;
4672: LD_ADDR_EXP 54
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// if p3 = 22 then
4680: LD_VAR 0 3
4684: PUSH
4685: LD_INT 22
4687: EQUAL
4688: IFFALSE 4698
// sTeleport := true ;
4690: LD_ADDR_EXP 57
4694: PUSH
4695: LD_INT 1
4697: ST_TO_ADDR
// if p3 = 23 then
4698: LD_VAR 0 3
4702: PUSH
4703: LD_INT 23
4705: EQUAL
4706: IFFALSE 4716
// sOilTower := true ;
4708: LD_ADDR_EXP 59
4712: PUSH
4713: LD_INT 1
4715: ST_TO_ADDR
// if p3 = 24 then
4716: LD_VAR 0 3
4720: PUSH
4721: LD_INT 24
4723: EQUAL
4724: IFFALSE 4734
// sShovel := true ;
4726: LD_ADDR_EXP 60
4730: PUSH
4731: LD_INT 1
4733: ST_TO_ADDR
// if p3 = 25 then
4734: LD_VAR 0 3
4738: PUSH
4739: LD_INT 25
4741: EQUAL
4742: IFFALSE 4752
// sSheik := true ;
4744: LD_ADDR_EXP 61
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// if p3 = 26 then
4752: LD_VAR 0 3
4756: PUSH
4757: LD_INT 26
4759: EQUAL
4760: IFFALSE 4770
// sEarthquake := true ;
4762: LD_ADDR_EXP 63
4766: PUSH
4767: LD_INT 1
4769: ST_TO_ADDR
// if p3 = 27 then
4770: LD_VAR 0 3
4774: PUSH
4775: LD_INT 27
4777: EQUAL
4778: IFFALSE 4788
// sAI := true ;
4780: LD_ADDR_EXP 64
4784: PUSH
4785: LD_INT 1
4787: ST_TO_ADDR
// if p3 = 28 then
4788: LD_VAR 0 3
4792: PUSH
4793: LD_INT 28
4795: EQUAL
4796: IFFALSE 4806
// sCargo := true ;
4798: LD_ADDR_EXP 67
4802: PUSH
4803: LD_INT 1
4805: ST_TO_ADDR
// if p3 = 29 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_INT 29
4813: EQUAL
4814: IFFALSE 4824
// sDLaser := true ;
4816: LD_ADDR_EXP 68
4820: PUSH
4821: LD_INT 1
4823: ST_TO_ADDR
// if p3 = 30 then
4824: LD_VAR 0 3
4828: PUSH
4829: LD_INT 30
4831: EQUAL
4832: IFFALSE 4842
// sExchange := true ;
4834: LD_ADDR_EXP 69
4838: PUSH
4839: LD_INT 1
4841: ST_TO_ADDR
// if p3 = 31 then
4842: LD_VAR 0 3
4846: PUSH
4847: LD_INT 31
4849: EQUAL
4850: IFFALSE 4860
// sFac := true ;
4852: LD_ADDR_EXP 70
4856: PUSH
4857: LD_INT 1
4859: ST_TO_ADDR
// if p3 = 32 then
4860: LD_VAR 0 3
4864: PUSH
4865: LD_INT 32
4867: EQUAL
4868: IFFALSE 4878
// sPower := true ;
4870: LD_ADDR_EXP 71
4874: PUSH
4875: LD_INT 1
4877: ST_TO_ADDR
// if p3 = 33 then
4878: LD_VAR 0 3
4882: PUSH
4883: LD_INT 33
4885: EQUAL
4886: IFFALSE 4896
// sRandom := true ;
4888: LD_ADDR_EXP 72
4892: PUSH
4893: LD_INT 1
4895: ST_TO_ADDR
// if p3 = 34 then
4896: LD_VAR 0 3
4900: PUSH
4901: LD_INT 34
4903: EQUAL
4904: IFFALSE 4914
// sShield := true ;
4906: LD_ADDR_EXP 73
4910: PUSH
4911: LD_INT 1
4913: ST_TO_ADDR
// if p3 = 35 then
4914: LD_VAR 0 3
4918: PUSH
4919: LD_INT 35
4921: EQUAL
4922: IFFALSE 4932
// sTime := true ;
4924: LD_ADDR_EXP 74
4928: PUSH
4929: LD_INT 1
4931: ST_TO_ADDR
// if p3 = 36 then
4932: LD_VAR 0 3
4936: PUSH
4937: LD_INT 36
4939: EQUAL
4940: IFFALSE 4950
// sTools := true ;
4942: LD_ADDR_EXP 75
4946: PUSH
4947: LD_INT 1
4949: ST_TO_ADDR
// if p3 = 101 then
4950: LD_VAR 0 3
4954: PUSH
4955: LD_INT 101
4957: EQUAL
4958: IFFALSE 4968
// sSold := true ;
4960: LD_ADDR_EXP 40
4964: PUSH
4965: LD_INT 1
4967: ST_TO_ADDR
// if p3 = 102 then
4968: LD_VAR 0 3
4972: PUSH
4973: LD_INT 102
4975: EQUAL
4976: IFFALSE 4986
// sDiff := true ;
4978: LD_ADDR_EXP 41
4982: PUSH
4983: LD_INT 1
4985: ST_TO_ADDR
// if p3 = 103 then
4986: LD_VAR 0 3
4990: PUSH
4991: LD_INT 103
4993: EQUAL
4994: IFFALSE 5004
// sFog := true ;
4996: LD_ADDR_EXP 44
5000: PUSH
5001: LD_INT 1
5003: ST_TO_ADDR
// if p3 = 104 then
5004: LD_VAR 0 3
5008: PUSH
5009: LD_INT 104
5011: EQUAL
5012: IFFALSE 5022
// sReset := true ;
5014: LD_ADDR_EXP 45
5018: PUSH
5019: LD_INT 1
5021: ST_TO_ADDR
// if p3 = 105 then
5022: LD_VAR 0 3
5026: PUSH
5027: LD_INT 105
5029: EQUAL
5030: IFFALSE 5040
// sSun := true ;
5032: LD_ADDR_EXP 46
5036: PUSH
5037: LD_INT 1
5039: ST_TO_ADDR
// if p3 = 106 then
5040: LD_VAR 0 3
5044: PUSH
5045: LD_INT 106
5047: EQUAL
5048: IFFALSE 5058
// sTiger := true ;
5050: LD_ADDR_EXP 42
5054: PUSH
5055: LD_INT 1
5057: ST_TO_ADDR
// if p3 = 107 then
5058: LD_VAR 0 3
5062: PUSH
5063: LD_INT 107
5065: EQUAL
5066: IFFALSE 5076
// sBomb := true ;
5068: LD_ADDR_EXP 43
5072: PUSH
5073: LD_INT 1
5075: ST_TO_ADDR
// if p3 = 108 then
5076: LD_VAR 0 3
5080: PUSH
5081: LD_INT 108
5083: EQUAL
5084: IFFALSE 5094
// sWound := true ;
5086: LD_ADDR_EXP 51
5090: PUSH
5091: LD_INT 1
5093: ST_TO_ADDR
// if p3 = 109 then
5094: LD_VAR 0 3
5098: PUSH
5099: LD_INT 109
5101: EQUAL
5102: IFFALSE 5112
// sBetray := true ;
5104: LD_ADDR_EXP 55
5108: PUSH
5109: LD_INT 1
5111: ST_TO_ADDR
// if p3 = 110 then
5112: LD_VAR 0 3
5116: PUSH
5117: LD_INT 110
5119: EQUAL
5120: IFFALSE 5130
// sContamin := true ;
5122: LD_ADDR_EXP 56
5126: PUSH
5127: LD_INT 1
5129: ST_TO_ADDR
// if p3 = 111 then
5130: LD_VAR 0 3
5134: PUSH
5135: LD_INT 111
5137: EQUAL
5138: IFFALSE 5148
// sOil := true ;
5140: LD_ADDR_EXP 58
5144: PUSH
5145: LD_INT 1
5147: ST_TO_ADDR
// if p3 = 112 then
5148: LD_VAR 0 3
5152: PUSH
5153: LD_INT 112
5155: EQUAL
5156: IFFALSE 5166
// sStu := true ;
5158: LD_ADDR_EXP 62
5162: PUSH
5163: LD_INT 1
5165: ST_TO_ADDR
// if p3 = 113 then
5166: LD_VAR 0 3
5170: PUSH
5171: LD_INT 113
5173: EQUAL
5174: IFFALSE 5184
// sBazooka := true ;
5176: LD_ADDR_EXP 65
5180: PUSH
5181: LD_INT 1
5183: ST_TO_ADDR
// if p3 = 114 then
5184: LD_VAR 0 3
5188: PUSH
5189: LD_INT 114
5191: EQUAL
5192: IFFALSE 5202
// sMortar := true ;
5194: LD_ADDR_EXP 66
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// if p3 = 115 then
5202: LD_VAR 0 3
5206: PUSH
5207: LD_INT 115
5209: EQUAL
5210: IFFALSE 5220
// sRanger := true ;
5212: LD_ADDR_EXP 76
5216: PUSH
5217: LD_INT 1
5219: ST_TO_ADDR
// end ; if p2 = 101 then
5220: LD_VAR 0 2
5224: PUSH
5225: LD_INT 101
5227: EQUAL
5228: IFFALSE 5431
// begin case p3 of 1 :
5230: LD_VAR 0 3
5234: PUSH
5235: LD_INT 1
5237: DOUBLE
5238: EQUAL
5239: IFTRUE 5243
5241: GO 5250
5243: POP
// hHackUnlimitedResources ; 2 :
5244: CALL 15525 0 0
5248: GO 5431
5250: LD_INT 2
5252: DOUBLE
5253: EQUAL
5254: IFTRUE 5258
5256: GO 5265
5258: POP
// hHackSetLevel10 ; 3 :
5259: CALL 15658 0 0
5263: GO 5431
5265: LD_INT 3
5267: DOUBLE
5268: EQUAL
5269: IFTRUE 5273
5271: GO 5280
5273: POP
// hHackSetLevel10YourUnits ; 4 :
5274: CALL 15743 0 0
5278: GO 5431
5280: LD_INT 4
5282: DOUBLE
5283: EQUAL
5284: IFTRUE 5288
5286: GO 5310
5288: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
5289: LD_VAR 0 4
5293: PPUSH
5294: LD_VAR 0 5
5298: PPUSH
5299: LD_VAR 0 6
5303: PPUSH
5304: CALL 15833 0 3
5308: GO 5431
5310: LD_INT 5
5312: DOUBLE
5313: EQUAL
5314: IFTRUE 5318
5316: GO 5325
5318: POP
// hHackSpawnVehicle ; 6 :
5319: CALL 15894 0 0
5323: GO 5431
5325: LD_INT 6
5327: DOUBLE
5328: EQUAL
5329: IFTRUE 5333
5331: GO 5340
5333: POP
// hHackInvincible ; 7 :
5334: CALL 16440 0 0
5338: GO 5431
5340: LD_INT 7
5342: DOUBLE
5343: EQUAL
5344: IFTRUE 5348
5346: GO 5355
5348: POP
// hHackInvisible ; 8 :
5349: CALL 16551 0 0
5353: GO 5431
5355: LD_INT 8
5357: DOUBLE
5358: EQUAL
5359: IFTRUE 5363
5361: GO 5370
5363: POP
// hHackChangeYourSide ; 9 :
5364: CALL 16608 0 0
5368: GO 5431
5370: LD_INT 9
5372: DOUBLE
5373: EQUAL
5374: IFTRUE 5378
5376: GO 5385
5378: POP
// hHackChangeUnitSide ; 10 :
5379: CALL 16650 0 0
5383: GO 5431
5385: LD_INT 10
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5393
5391: GO 5400
5393: POP
// hHackFog ; 11 :
5394: CALL 16751 0 0
5398: GO 5431
5400: LD_INT 11
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5415
5408: POP
// hHackApeman ; 12 :
5409: CALL 16766 0 0
5413: GO 5431
5415: LD_INT 12
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5430
5423: POP
// hHackBoom ; end ;
5424: CALL 16851 0 0
5428: GO 5431
5430: POP
// end ; end ;
5431: PPOPN 6
5433: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
5434: GO 5436
5436: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5437: LD_STRING initStreamRollete();
5439: PPUSH
5440: CALL_OW 559
// InitStreamMode ;
5444: CALL 5453 0 0
// DefineStreamItems ( ) ;
5448: CALL 5893 0 0
// end ;
5452: END
// function InitStreamMode ; begin
5453: LD_INT 0
5455: PPUSH
// streamModeActive := false ;
5456: LD_ADDR_EXP 23
5460: PUSH
5461: LD_INT 0
5463: ST_TO_ADDR
// normalCounter := 36 ;
5464: LD_ADDR_EXP 24
5468: PUSH
5469: LD_INT 36
5471: ST_TO_ADDR
// hardcoreCounter := 16 ;
5472: LD_ADDR_EXP 25
5476: PUSH
5477: LD_INT 16
5479: ST_TO_ADDR
// sRocket := false ;
5480: LD_ADDR_EXP 28
5484: PUSH
5485: LD_INT 0
5487: ST_TO_ADDR
// sSpeed := false ;
5488: LD_ADDR_EXP 27
5492: PUSH
5493: LD_INT 0
5495: ST_TO_ADDR
// sEngine := false ;
5496: LD_ADDR_EXP 29
5500: PUSH
5501: LD_INT 0
5503: ST_TO_ADDR
// sSpec := false ;
5504: LD_ADDR_EXP 26
5508: PUSH
5509: LD_INT 0
5511: ST_TO_ADDR
// sLevel := false ;
5512: LD_ADDR_EXP 30
5516: PUSH
5517: LD_INT 0
5519: ST_TO_ADDR
// sArmoury := false ;
5520: LD_ADDR_EXP 31
5524: PUSH
5525: LD_INT 0
5527: ST_TO_ADDR
// sRadar := false ;
5528: LD_ADDR_EXP 32
5532: PUSH
5533: LD_INT 0
5535: ST_TO_ADDR
// sBunker := false ;
5536: LD_ADDR_EXP 33
5540: PUSH
5541: LD_INT 0
5543: ST_TO_ADDR
// sHack := false ;
5544: LD_ADDR_EXP 34
5548: PUSH
5549: LD_INT 0
5551: ST_TO_ADDR
// sFire := false ;
5552: LD_ADDR_EXP 35
5556: PUSH
5557: LD_INT 0
5559: ST_TO_ADDR
// sRefresh := false ;
5560: LD_ADDR_EXP 36
5564: PUSH
5565: LD_INT 0
5567: ST_TO_ADDR
// sExp := false ;
5568: LD_ADDR_EXP 37
5572: PUSH
5573: LD_INT 0
5575: ST_TO_ADDR
// sDepot := false ;
5576: LD_ADDR_EXP 38
5580: PUSH
5581: LD_INT 0
5583: ST_TO_ADDR
// sFlag := false ;
5584: LD_ADDR_EXP 39
5588: PUSH
5589: LD_INT 0
5591: ST_TO_ADDR
// sKamikadze := false ;
5592: LD_ADDR_EXP 47
5596: PUSH
5597: LD_INT 0
5599: ST_TO_ADDR
// sTroll := false ;
5600: LD_ADDR_EXP 48
5604: PUSH
5605: LD_INT 0
5607: ST_TO_ADDR
// sSlow := false ;
5608: LD_ADDR_EXP 49
5612: PUSH
5613: LD_INT 0
5615: ST_TO_ADDR
// sLack := false ;
5616: LD_ADDR_EXP 50
5620: PUSH
5621: LD_INT 0
5623: ST_TO_ADDR
// sTank := false ;
5624: LD_ADDR_EXP 52
5628: PUSH
5629: LD_INT 0
5631: ST_TO_ADDR
// sRemote := false ;
5632: LD_ADDR_EXP 53
5636: PUSH
5637: LD_INT 0
5639: ST_TO_ADDR
// sPowell := false ;
5640: LD_ADDR_EXP 54
5644: PUSH
5645: LD_INT 0
5647: ST_TO_ADDR
// sTeleport := false ;
5648: LD_ADDR_EXP 57
5652: PUSH
5653: LD_INT 0
5655: ST_TO_ADDR
// sOilTower := false ;
5656: LD_ADDR_EXP 59
5660: PUSH
5661: LD_INT 0
5663: ST_TO_ADDR
// sShovel := false ;
5664: LD_ADDR_EXP 60
5668: PUSH
5669: LD_INT 0
5671: ST_TO_ADDR
// sSheik := false ;
5672: LD_ADDR_EXP 61
5676: PUSH
5677: LD_INT 0
5679: ST_TO_ADDR
// sEarthquake := false ;
5680: LD_ADDR_EXP 63
5684: PUSH
5685: LD_INT 0
5687: ST_TO_ADDR
// sAI := false ;
5688: LD_ADDR_EXP 64
5692: PUSH
5693: LD_INT 0
5695: ST_TO_ADDR
// sCargo := false ;
5696: LD_ADDR_EXP 67
5700: PUSH
5701: LD_INT 0
5703: ST_TO_ADDR
// sDLaser := false ;
5704: LD_ADDR_EXP 68
5708: PUSH
5709: LD_INT 0
5711: ST_TO_ADDR
// sExchange := false ;
5712: LD_ADDR_EXP 69
5716: PUSH
5717: LD_INT 0
5719: ST_TO_ADDR
// sFac := false ;
5720: LD_ADDR_EXP 70
5724: PUSH
5725: LD_INT 0
5727: ST_TO_ADDR
// sPower := false ;
5728: LD_ADDR_EXP 71
5732: PUSH
5733: LD_INT 0
5735: ST_TO_ADDR
// sRandom := false ;
5736: LD_ADDR_EXP 72
5740: PUSH
5741: LD_INT 0
5743: ST_TO_ADDR
// sShield := false ;
5744: LD_ADDR_EXP 73
5748: PUSH
5749: LD_INT 0
5751: ST_TO_ADDR
// sTime := false ;
5752: LD_ADDR_EXP 74
5756: PUSH
5757: LD_INT 0
5759: ST_TO_ADDR
// sTools := false ;
5760: LD_ADDR_EXP 75
5764: PUSH
5765: LD_INT 0
5767: ST_TO_ADDR
// sSold := false ;
5768: LD_ADDR_EXP 40
5772: PUSH
5773: LD_INT 0
5775: ST_TO_ADDR
// sDiff := false ;
5776: LD_ADDR_EXP 41
5780: PUSH
5781: LD_INT 0
5783: ST_TO_ADDR
// sFog := false ;
5784: LD_ADDR_EXP 44
5788: PUSH
5789: LD_INT 0
5791: ST_TO_ADDR
// sReset := false ;
5792: LD_ADDR_EXP 45
5796: PUSH
5797: LD_INT 0
5799: ST_TO_ADDR
// sSun := false ;
5800: LD_ADDR_EXP 46
5804: PUSH
5805: LD_INT 0
5807: ST_TO_ADDR
// sTiger := false ;
5808: LD_ADDR_EXP 42
5812: PUSH
5813: LD_INT 0
5815: ST_TO_ADDR
// sBomb := false ;
5816: LD_ADDR_EXP 43
5820: PUSH
5821: LD_INT 0
5823: ST_TO_ADDR
// sWound := false ;
5824: LD_ADDR_EXP 51
5828: PUSH
5829: LD_INT 0
5831: ST_TO_ADDR
// sBetray := false ;
5832: LD_ADDR_EXP 55
5836: PUSH
5837: LD_INT 0
5839: ST_TO_ADDR
// sContamin := false ;
5840: LD_ADDR_EXP 56
5844: PUSH
5845: LD_INT 0
5847: ST_TO_ADDR
// sOil := false ;
5848: LD_ADDR_EXP 58
5852: PUSH
5853: LD_INT 0
5855: ST_TO_ADDR
// sStu := false ;
5856: LD_ADDR_EXP 62
5860: PUSH
5861: LD_INT 0
5863: ST_TO_ADDR
// sBazooka := false ;
5864: LD_ADDR_EXP 65
5868: PUSH
5869: LD_INT 0
5871: ST_TO_ADDR
// sMortar := false ;
5872: LD_ADDR_EXP 66
5876: PUSH
5877: LD_INT 0
5879: ST_TO_ADDR
// sRanger := false ;
5880: LD_ADDR_EXP 76
5884: PUSH
5885: LD_INT 0
5887: ST_TO_ADDR
// end ;
5888: LD_VAR 0 1
5892: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5893: LD_INT 0
5895: PPUSH
5896: PPUSH
5897: PPUSH
5898: PPUSH
5899: PPUSH
// result := [ ] ;
5900: LD_ADDR_VAR 0 1
5904: PUSH
5905: EMPTY
5906: ST_TO_ADDR
// if campaign_id = 1 then
5907: LD_OWVAR 69
5911: PUSH
5912: LD_INT 1
5914: EQUAL
5915: IFFALSE 8853
// begin case mission_number of 1 :
5917: LD_OWVAR 70
5921: PUSH
5922: LD_INT 1
5924: DOUBLE
5925: EQUAL
5926: IFTRUE 5930
5928: GO 5994
5930: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5931: LD_ADDR_VAR 0 1
5935: PUSH
5936: LD_INT 2
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: LD_INT 11
5944: PUSH
5945: LD_INT 12
5947: PUSH
5948: LD_INT 15
5950: PUSH
5951: LD_INT 16
5953: PUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 23
5959: PUSH
5960: LD_INT 26
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 101
5976: PUSH
5977: LD_INT 102
5979: PUSH
5980: LD_INT 106
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: ST_TO_ADDR
5992: GO 8851
5994: LD_INT 2
5996: DOUBLE
5997: EQUAL
5998: IFTRUE 6002
6000: GO 6074
6002: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_INT 2
6010: PUSH
6011: LD_INT 4
6013: PUSH
6014: LD_INT 11
6016: PUSH
6017: LD_INT 12
6019: PUSH
6020: LD_INT 15
6022: PUSH
6023: LD_INT 16
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 23
6031: PUSH
6032: LD_INT 26
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: PUSH
6046: LD_INT 101
6048: PUSH
6049: LD_INT 102
6051: PUSH
6052: LD_INT 105
6054: PUSH
6055: LD_INT 106
6057: PUSH
6058: LD_INT 108
6060: PUSH
6061: EMPTY
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: PUSH
6068: EMPTY
6069: LIST
6070: LIST
6071: ST_TO_ADDR
6072: GO 8851
6074: LD_INT 3
6076: DOUBLE
6077: EQUAL
6078: IFTRUE 6082
6080: GO 6158
6082: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
6083: LD_ADDR_VAR 0 1
6087: PUSH
6088: LD_INT 2
6090: PUSH
6091: LD_INT 4
6093: PUSH
6094: LD_INT 5
6096: PUSH
6097: LD_INT 11
6099: PUSH
6100: LD_INT 12
6102: PUSH
6103: LD_INT 15
6105: PUSH
6106: LD_INT 16
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_INT 26
6114: PUSH
6115: LD_INT 36
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: LD_INT 101
6132: PUSH
6133: LD_INT 102
6135: PUSH
6136: LD_INT 105
6138: PUSH
6139: LD_INT 106
6141: PUSH
6142: LD_INT 108
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: ST_TO_ADDR
6156: GO 8851
6158: LD_INT 4
6160: DOUBLE
6161: EQUAL
6162: IFTRUE 6166
6164: GO 6250
6166: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: LD_INT 4
6177: PUSH
6178: LD_INT 5
6180: PUSH
6181: LD_INT 8
6183: PUSH
6184: LD_INT 11
6186: PUSH
6187: LD_INT 12
6189: PUSH
6190: LD_INT 15
6192: PUSH
6193: LD_INT 16
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_INT 23
6201: PUSH
6202: LD_INT 26
6204: PUSH
6205: LD_INT 36
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 101
6224: PUSH
6225: LD_INT 102
6227: PUSH
6228: LD_INT 105
6230: PUSH
6231: LD_INT 106
6233: PUSH
6234: LD_INT 108
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: ST_TO_ADDR
6248: GO 8851
6250: LD_INT 5
6252: DOUBLE
6253: EQUAL
6254: IFTRUE 6258
6256: GO 6358
6258: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
6259: LD_ADDR_VAR 0 1
6263: PUSH
6264: LD_INT 2
6266: PUSH
6267: LD_INT 4
6269: PUSH
6270: LD_INT 5
6272: PUSH
6273: LD_INT 6
6275: PUSH
6276: LD_INT 8
6278: PUSH
6279: LD_INT 11
6281: PUSH
6282: LD_INT 12
6284: PUSH
6285: LD_INT 15
6287: PUSH
6288: LD_INT 16
6290: PUSH
6291: LD_INT 22
6293: PUSH
6294: LD_INT 23
6296: PUSH
6297: LD_INT 25
6299: PUSH
6300: LD_INT 26
6302: PUSH
6303: LD_INT 36
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: PUSH
6322: LD_INT 101
6324: PUSH
6325: LD_INT 102
6327: PUSH
6328: LD_INT 105
6330: PUSH
6331: LD_INT 106
6333: PUSH
6334: LD_INT 108
6336: PUSH
6337: LD_INT 109
6339: PUSH
6340: LD_INT 112
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: ST_TO_ADDR
6356: GO 8851
6358: LD_INT 6
6360: DOUBLE
6361: EQUAL
6362: IFTRUE 6366
6364: GO 6486
6366: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_INT 2
6374: PUSH
6375: LD_INT 4
6377: PUSH
6378: LD_INT 5
6380: PUSH
6381: LD_INT 6
6383: PUSH
6384: LD_INT 8
6386: PUSH
6387: LD_INT 11
6389: PUSH
6390: LD_INT 12
6392: PUSH
6393: LD_INT 15
6395: PUSH
6396: LD_INT 16
6398: PUSH
6399: LD_INT 20
6401: PUSH
6402: LD_INT 21
6404: PUSH
6405: LD_INT 22
6407: PUSH
6408: LD_INT 23
6410: PUSH
6411: LD_INT 25
6413: PUSH
6414: LD_INT 26
6416: PUSH
6417: LD_INT 30
6419: PUSH
6420: LD_INT 31
6422: PUSH
6423: LD_INT 32
6425: PUSH
6426: LD_INT 36
6428: PUSH
6429: EMPTY
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: LIST
6449: PUSH
6450: LD_INT 101
6452: PUSH
6453: LD_INT 102
6455: PUSH
6456: LD_INT 105
6458: PUSH
6459: LD_INT 106
6461: PUSH
6462: LD_INT 108
6464: PUSH
6465: LD_INT 109
6467: PUSH
6468: LD_INT 112
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: ST_TO_ADDR
6484: GO 8851
6486: LD_INT 7
6488: DOUBLE
6489: EQUAL
6490: IFTRUE 6494
6492: GO 6594
6494: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6495: LD_ADDR_VAR 0 1
6499: PUSH
6500: LD_INT 2
6502: PUSH
6503: LD_INT 4
6505: PUSH
6506: LD_INT 5
6508: PUSH
6509: LD_INT 7
6511: PUSH
6512: LD_INT 11
6514: PUSH
6515: LD_INT 12
6517: PUSH
6518: LD_INT 15
6520: PUSH
6521: LD_INT 16
6523: PUSH
6524: LD_INT 20
6526: PUSH
6527: LD_INT 21
6529: PUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 23
6535: PUSH
6536: LD_INT 25
6538: PUSH
6539: LD_INT 26
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 101
6560: PUSH
6561: LD_INT 102
6563: PUSH
6564: LD_INT 103
6566: PUSH
6567: LD_INT 105
6569: PUSH
6570: LD_INT 106
6572: PUSH
6573: LD_INT 108
6575: PUSH
6576: LD_INT 112
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: ST_TO_ADDR
6592: GO 8851
6594: LD_INT 8
6596: DOUBLE
6597: EQUAL
6598: IFTRUE 6602
6600: GO 6730
6602: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6603: LD_ADDR_VAR 0 1
6607: PUSH
6608: LD_INT 2
6610: PUSH
6611: LD_INT 4
6613: PUSH
6614: LD_INT 5
6616: PUSH
6617: LD_INT 6
6619: PUSH
6620: LD_INT 7
6622: PUSH
6623: LD_INT 8
6625: PUSH
6626: LD_INT 11
6628: PUSH
6629: LD_INT 12
6631: PUSH
6632: LD_INT 15
6634: PUSH
6635: LD_INT 16
6637: PUSH
6638: LD_INT 20
6640: PUSH
6641: LD_INT 21
6643: PUSH
6644: LD_INT 22
6646: PUSH
6647: LD_INT 23
6649: PUSH
6650: LD_INT 25
6652: PUSH
6653: LD_INT 26
6655: PUSH
6656: LD_INT 30
6658: PUSH
6659: LD_INT 31
6661: PUSH
6662: LD_INT 32
6664: PUSH
6665: LD_INT 36
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 101
6692: PUSH
6693: LD_INT 102
6695: PUSH
6696: LD_INT 103
6698: PUSH
6699: LD_INT 105
6701: PUSH
6702: LD_INT 106
6704: PUSH
6705: LD_INT 108
6707: PUSH
6708: LD_INT 109
6710: PUSH
6711: LD_INT 112
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: ST_TO_ADDR
6728: GO 8851
6730: LD_INT 9
6732: DOUBLE
6733: EQUAL
6734: IFTRUE 6738
6736: GO 6874
6738: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6739: LD_ADDR_VAR 0 1
6743: PUSH
6744: LD_INT 2
6746: PUSH
6747: LD_INT 4
6749: PUSH
6750: LD_INT 5
6752: PUSH
6753: LD_INT 6
6755: PUSH
6756: LD_INT 7
6758: PUSH
6759: LD_INT 8
6761: PUSH
6762: LD_INT 11
6764: PUSH
6765: LD_INT 12
6767: PUSH
6768: LD_INT 15
6770: PUSH
6771: LD_INT 16
6773: PUSH
6774: LD_INT 20
6776: PUSH
6777: LD_INT 21
6779: PUSH
6780: LD_INT 22
6782: PUSH
6783: LD_INT 23
6785: PUSH
6786: LD_INT 25
6788: PUSH
6789: LD_INT 26
6791: PUSH
6792: LD_INT 28
6794: PUSH
6795: LD_INT 30
6797: PUSH
6798: LD_INT 31
6800: PUSH
6801: LD_INT 32
6803: PUSH
6804: LD_INT 36
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 101
6832: PUSH
6833: LD_INT 102
6835: PUSH
6836: LD_INT 103
6838: PUSH
6839: LD_INT 105
6841: PUSH
6842: LD_INT 106
6844: PUSH
6845: LD_INT 108
6847: PUSH
6848: LD_INT 109
6850: PUSH
6851: LD_INT 112
6853: PUSH
6854: LD_INT 114
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: PUSH
6868: EMPTY
6869: LIST
6870: LIST
6871: ST_TO_ADDR
6872: GO 8851
6874: LD_INT 10
6876: DOUBLE
6877: EQUAL
6878: IFTRUE 6882
6880: GO 7066
6882: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6883: LD_ADDR_VAR 0 1
6887: PUSH
6888: LD_INT 2
6890: PUSH
6891: LD_INT 4
6893: PUSH
6894: LD_INT 5
6896: PUSH
6897: LD_INT 6
6899: PUSH
6900: LD_INT 7
6902: PUSH
6903: LD_INT 8
6905: PUSH
6906: LD_INT 9
6908: PUSH
6909: LD_INT 10
6911: PUSH
6912: LD_INT 11
6914: PUSH
6915: LD_INT 12
6917: PUSH
6918: LD_INT 13
6920: PUSH
6921: LD_INT 14
6923: PUSH
6924: LD_INT 15
6926: PUSH
6927: LD_INT 16
6929: PUSH
6930: LD_INT 17
6932: PUSH
6933: LD_INT 18
6935: PUSH
6936: LD_INT 19
6938: PUSH
6939: LD_INT 20
6941: PUSH
6942: LD_INT 21
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 23
6950: PUSH
6951: LD_INT 24
6953: PUSH
6954: LD_INT 25
6956: PUSH
6957: LD_INT 26
6959: PUSH
6960: LD_INT 28
6962: PUSH
6963: LD_INT 30
6965: PUSH
6966: LD_INT 31
6968: PUSH
6969: LD_INT 32
6971: PUSH
6972: LD_INT 36
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 101
7008: PUSH
7009: LD_INT 102
7011: PUSH
7012: LD_INT 103
7014: PUSH
7015: LD_INT 104
7017: PUSH
7018: LD_INT 105
7020: PUSH
7021: LD_INT 106
7023: PUSH
7024: LD_INT 107
7026: PUSH
7027: LD_INT 108
7029: PUSH
7030: LD_INT 109
7032: PUSH
7033: LD_INT 110
7035: PUSH
7036: LD_INT 111
7038: PUSH
7039: LD_INT 112
7041: PUSH
7042: LD_INT 114
7044: PUSH
7045: EMPTY
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: ST_TO_ADDR
7064: GO 8851
7066: LD_INT 11
7068: DOUBLE
7069: EQUAL
7070: IFTRUE 7074
7072: GO 7266
7074: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
7075: LD_ADDR_VAR 0 1
7079: PUSH
7080: LD_INT 2
7082: PUSH
7083: LD_INT 3
7085: PUSH
7086: LD_INT 4
7088: PUSH
7089: LD_INT 5
7091: PUSH
7092: LD_INT 6
7094: PUSH
7095: LD_INT 7
7097: PUSH
7098: LD_INT 8
7100: PUSH
7101: LD_INT 9
7103: PUSH
7104: LD_INT 10
7106: PUSH
7107: LD_INT 11
7109: PUSH
7110: LD_INT 12
7112: PUSH
7113: LD_INT 13
7115: PUSH
7116: LD_INT 14
7118: PUSH
7119: LD_INT 15
7121: PUSH
7122: LD_INT 16
7124: PUSH
7125: LD_INT 17
7127: PUSH
7128: LD_INT 18
7130: PUSH
7131: LD_INT 19
7133: PUSH
7134: LD_INT 20
7136: PUSH
7137: LD_INT 21
7139: PUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 23
7145: PUSH
7146: LD_INT 24
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 26
7154: PUSH
7155: LD_INT 28
7157: PUSH
7158: LD_INT 30
7160: PUSH
7161: LD_INT 31
7163: PUSH
7164: LD_INT 32
7166: PUSH
7167: LD_INT 34
7169: PUSH
7170: LD_INT 36
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 101
7208: PUSH
7209: LD_INT 102
7211: PUSH
7212: LD_INT 103
7214: PUSH
7215: LD_INT 104
7217: PUSH
7218: LD_INT 105
7220: PUSH
7221: LD_INT 106
7223: PUSH
7224: LD_INT 107
7226: PUSH
7227: LD_INT 108
7229: PUSH
7230: LD_INT 109
7232: PUSH
7233: LD_INT 110
7235: PUSH
7236: LD_INT 111
7238: PUSH
7239: LD_INT 112
7241: PUSH
7242: LD_INT 114
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: LIST
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: ST_TO_ADDR
7264: GO 8851
7266: LD_INT 12
7268: DOUBLE
7269: EQUAL
7270: IFTRUE 7274
7272: GO 7482
7274: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_INT 1
7282: PUSH
7283: LD_INT 2
7285: PUSH
7286: LD_INT 3
7288: PUSH
7289: LD_INT 4
7291: PUSH
7292: LD_INT 5
7294: PUSH
7295: LD_INT 6
7297: PUSH
7298: LD_INT 7
7300: PUSH
7301: LD_INT 8
7303: PUSH
7304: LD_INT 9
7306: PUSH
7307: LD_INT 10
7309: PUSH
7310: LD_INT 11
7312: PUSH
7313: LD_INT 12
7315: PUSH
7316: LD_INT 13
7318: PUSH
7319: LD_INT 14
7321: PUSH
7322: LD_INT 15
7324: PUSH
7325: LD_INT 16
7327: PUSH
7328: LD_INT 17
7330: PUSH
7331: LD_INT 18
7333: PUSH
7334: LD_INT 19
7336: PUSH
7337: LD_INT 20
7339: PUSH
7340: LD_INT 21
7342: PUSH
7343: LD_INT 22
7345: PUSH
7346: LD_INT 23
7348: PUSH
7349: LD_INT 24
7351: PUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 26
7357: PUSH
7358: LD_INT 27
7360: PUSH
7361: LD_INT 28
7363: PUSH
7364: LD_INT 30
7366: PUSH
7367: LD_INT 31
7369: PUSH
7370: LD_INT 32
7372: PUSH
7373: LD_INT 33
7375: PUSH
7376: LD_INT 34
7378: PUSH
7379: LD_INT 36
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: PUSH
7418: LD_INT 101
7420: PUSH
7421: LD_INT 102
7423: PUSH
7424: LD_INT 103
7426: PUSH
7427: LD_INT 104
7429: PUSH
7430: LD_INT 105
7432: PUSH
7433: LD_INT 106
7435: PUSH
7436: LD_INT 107
7438: PUSH
7439: LD_INT 108
7441: PUSH
7442: LD_INT 109
7444: PUSH
7445: LD_INT 110
7447: PUSH
7448: LD_INT 111
7450: PUSH
7451: LD_INT 112
7453: PUSH
7454: LD_INT 113
7456: PUSH
7457: LD_INT 114
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: ST_TO_ADDR
7480: GO 8851
7482: LD_INT 13
7484: DOUBLE
7485: EQUAL
7486: IFTRUE 7490
7488: GO 7686
7490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7491: LD_ADDR_VAR 0 1
7495: PUSH
7496: LD_INT 1
7498: PUSH
7499: LD_INT 2
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: LD_INT 5
7510: PUSH
7511: LD_INT 8
7513: PUSH
7514: LD_INT 9
7516: PUSH
7517: LD_INT 10
7519: PUSH
7520: LD_INT 11
7522: PUSH
7523: LD_INT 12
7525: PUSH
7526: LD_INT 14
7528: PUSH
7529: LD_INT 15
7531: PUSH
7532: LD_INT 16
7534: PUSH
7535: LD_INT 17
7537: PUSH
7538: LD_INT 18
7540: PUSH
7541: LD_INT 19
7543: PUSH
7544: LD_INT 20
7546: PUSH
7547: LD_INT 21
7549: PUSH
7550: LD_INT 22
7552: PUSH
7553: LD_INT 23
7555: PUSH
7556: LD_INT 24
7558: PUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 26
7564: PUSH
7565: LD_INT 27
7567: PUSH
7568: LD_INT 28
7570: PUSH
7571: LD_INT 30
7573: PUSH
7574: LD_INT 31
7576: PUSH
7577: LD_INT 32
7579: PUSH
7580: LD_INT 33
7582: PUSH
7583: LD_INT 34
7585: PUSH
7586: LD_INT 36
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 101
7624: PUSH
7625: LD_INT 102
7627: PUSH
7628: LD_INT 103
7630: PUSH
7631: LD_INT 104
7633: PUSH
7634: LD_INT 105
7636: PUSH
7637: LD_INT 106
7639: PUSH
7640: LD_INT 107
7642: PUSH
7643: LD_INT 108
7645: PUSH
7646: LD_INT 109
7648: PUSH
7649: LD_INT 110
7651: PUSH
7652: LD_INT 111
7654: PUSH
7655: LD_INT 112
7657: PUSH
7658: LD_INT 113
7660: PUSH
7661: LD_INT 114
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: ST_TO_ADDR
7684: GO 8851
7686: LD_INT 14
7688: DOUBLE
7689: EQUAL
7690: IFTRUE 7694
7692: GO 7906
7694: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7695: LD_ADDR_VAR 0 1
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: LD_INT 2
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: LD_INT 4
7711: PUSH
7712: LD_INT 5
7714: PUSH
7715: LD_INT 6
7717: PUSH
7718: LD_INT 7
7720: PUSH
7721: LD_INT 8
7723: PUSH
7724: LD_INT 9
7726: PUSH
7727: LD_INT 10
7729: PUSH
7730: LD_INT 11
7732: PUSH
7733: LD_INT 12
7735: PUSH
7736: LD_INT 13
7738: PUSH
7739: LD_INT 14
7741: PUSH
7742: LD_INT 15
7744: PUSH
7745: LD_INT 16
7747: PUSH
7748: LD_INT 17
7750: PUSH
7751: LD_INT 18
7753: PUSH
7754: LD_INT 19
7756: PUSH
7757: LD_INT 20
7759: PUSH
7760: LD_INT 21
7762: PUSH
7763: LD_INT 22
7765: PUSH
7766: LD_INT 23
7768: PUSH
7769: LD_INT 24
7771: PUSH
7772: LD_INT 25
7774: PUSH
7775: LD_INT 26
7777: PUSH
7778: LD_INT 27
7780: PUSH
7781: LD_INT 28
7783: PUSH
7784: LD_INT 29
7786: PUSH
7787: LD_INT 30
7789: PUSH
7790: LD_INT 31
7792: PUSH
7793: LD_INT 32
7795: PUSH
7796: LD_INT 33
7798: PUSH
7799: LD_INT 34
7801: PUSH
7802: LD_INT 36
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 101
7844: PUSH
7845: LD_INT 102
7847: PUSH
7848: LD_INT 103
7850: PUSH
7851: LD_INT 104
7853: PUSH
7854: LD_INT 105
7856: PUSH
7857: LD_INT 106
7859: PUSH
7860: LD_INT 107
7862: PUSH
7863: LD_INT 108
7865: PUSH
7866: LD_INT 109
7868: PUSH
7869: LD_INT 110
7871: PUSH
7872: LD_INT 111
7874: PUSH
7875: LD_INT 112
7877: PUSH
7878: LD_INT 113
7880: PUSH
7881: LD_INT 114
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: ST_TO_ADDR
7904: GO 8851
7906: LD_INT 15
7908: DOUBLE
7909: EQUAL
7910: IFTRUE 7914
7912: GO 8126
7914: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7915: LD_ADDR_VAR 0 1
7919: PUSH
7920: LD_INT 1
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: LD_INT 3
7928: PUSH
7929: LD_INT 4
7931: PUSH
7932: LD_INT 5
7934: PUSH
7935: LD_INT 6
7937: PUSH
7938: LD_INT 7
7940: PUSH
7941: LD_INT 8
7943: PUSH
7944: LD_INT 9
7946: PUSH
7947: LD_INT 10
7949: PUSH
7950: LD_INT 11
7952: PUSH
7953: LD_INT 12
7955: PUSH
7956: LD_INT 13
7958: PUSH
7959: LD_INT 14
7961: PUSH
7962: LD_INT 15
7964: PUSH
7965: LD_INT 16
7967: PUSH
7968: LD_INT 17
7970: PUSH
7971: LD_INT 18
7973: PUSH
7974: LD_INT 19
7976: PUSH
7977: LD_INT 20
7979: PUSH
7980: LD_INT 21
7982: PUSH
7983: LD_INT 22
7985: PUSH
7986: LD_INT 23
7988: PUSH
7989: LD_INT 24
7991: PUSH
7992: LD_INT 25
7994: PUSH
7995: LD_INT 26
7997: PUSH
7998: LD_INT 27
8000: PUSH
8001: LD_INT 28
8003: PUSH
8004: LD_INT 29
8006: PUSH
8007: LD_INT 30
8009: PUSH
8010: LD_INT 31
8012: PUSH
8013: LD_INT 32
8015: PUSH
8016: LD_INT 33
8018: PUSH
8019: LD_INT 34
8021: PUSH
8022: LD_INT 36
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 101
8064: PUSH
8065: LD_INT 102
8067: PUSH
8068: LD_INT 103
8070: PUSH
8071: LD_INT 104
8073: PUSH
8074: LD_INT 105
8076: PUSH
8077: LD_INT 106
8079: PUSH
8080: LD_INT 107
8082: PUSH
8083: LD_INT 108
8085: PUSH
8086: LD_INT 109
8088: PUSH
8089: LD_INT 110
8091: PUSH
8092: LD_INT 111
8094: PUSH
8095: LD_INT 112
8097: PUSH
8098: LD_INT 113
8100: PUSH
8101: LD_INT 114
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: ST_TO_ADDR
8124: GO 8851
8126: LD_INT 16
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8258
8134: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
8135: LD_ADDR_VAR 0 1
8139: PUSH
8140: LD_INT 2
8142: PUSH
8143: LD_INT 4
8145: PUSH
8146: LD_INT 5
8148: PUSH
8149: LD_INT 7
8151: PUSH
8152: LD_INT 11
8154: PUSH
8155: LD_INT 12
8157: PUSH
8158: LD_INT 15
8160: PUSH
8161: LD_INT 16
8163: PUSH
8164: LD_INT 20
8166: PUSH
8167: LD_INT 21
8169: PUSH
8170: LD_INT 22
8172: PUSH
8173: LD_INT 23
8175: PUSH
8176: LD_INT 25
8178: PUSH
8179: LD_INT 26
8181: PUSH
8182: LD_INT 30
8184: PUSH
8185: LD_INT 31
8187: PUSH
8188: LD_INT 32
8190: PUSH
8191: LD_INT 33
8193: PUSH
8194: LD_INT 34
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: LD_INT 101
8220: PUSH
8221: LD_INT 102
8223: PUSH
8224: LD_INT 103
8226: PUSH
8227: LD_INT 106
8229: PUSH
8230: LD_INT 108
8232: PUSH
8233: LD_INT 112
8235: PUSH
8236: LD_INT 113
8238: PUSH
8239: LD_INT 114
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: ST_TO_ADDR
8256: GO 8851
8258: LD_INT 17
8260: DOUBLE
8261: EQUAL
8262: IFTRUE 8266
8264: GO 8478
8266: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
8267: LD_ADDR_VAR 0 1
8271: PUSH
8272: LD_INT 1
8274: PUSH
8275: LD_INT 2
8277: PUSH
8278: LD_INT 3
8280: PUSH
8281: LD_INT 4
8283: PUSH
8284: LD_INT 5
8286: PUSH
8287: LD_INT 6
8289: PUSH
8290: LD_INT 7
8292: PUSH
8293: LD_INT 8
8295: PUSH
8296: LD_INT 9
8298: PUSH
8299: LD_INT 10
8301: PUSH
8302: LD_INT 11
8304: PUSH
8305: LD_INT 12
8307: PUSH
8308: LD_INT 13
8310: PUSH
8311: LD_INT 14
8313: PUSH
8314: LD_INT 15
8316: PUSH
8317: LD_INT 16
8319: PUSH
8320: LD_INT 17
8322: PUSH
8323: LD_INT 18
8325: PUSH
8326: LD_INT 19
8328: PUSH
8329: LD_INT 20
8331: PUSH
8332: LD_INT 21
8334: PUSH
8335: LD_INT 22
8337: PUSH
8338: LD_INT 23
8340: PUSH
8341: LD_INT 24
8343: PUSH
8344: LD_INT 25
8346: PUSH
8347: LD_INT 26
8349: PUSH
8350: LD_INT 27
8352: PUSH
8353: LD_INT 28
8355: PUSH
8356: LD_INT 29
8358: PUSH
8359: LD_INT 30
8361: PUSH
8362: LD_INT 31
8364: PUSH
8365: LD_INT 32
8367: PUSH
8368: LD_INT 33
8370: PUSH
8371: LD_INT 34
8373: PUSH
8374: LD_INT 36
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: PUSH
8414: LD_INT 101
8416: PUSH
8417: LD_INT 102
8419: PUSH
8420: LD_INT 103
8422: PUSH
8423: LD_INT 104
8425: PUSH
8426: LD_INT 105
8428: PUSH
8429: LD_INT 106
8431: PUSH
8432: LD_INT 107
8434: PUSH
8435: LD_INT 108
8437: PUSH
8438: LD_INT 109
8440: PUSH
8441: LD_INT 110
8443: PUSH
8444: LD_INT 111
8446: PUSH
8447: LD_INT 112
8449: PUSH
8450: LD_INT 113
8452: PUSH
8453: LD_INT 114
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PUSH
8472: EMPTY
8473: LIST
8474: LIST
8475: ST_TO_ADDR
8476: GO 8851
8478: LD_INT 18
8480: DOUBLE
8481: EQUAL
8482: IFTRUE 8486
8484: GO 8622
8486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8487: LD_ADDR_VAR 0 1
8491: PUSH
8492: LD_INT 2
8494: PUSH
8495: LD_INT 4
8497: PUSH
8498: LD_INT 5
8500: PUSH
8501: LD_INT 7
8503: PUSH
8504: LD_INT 11
8506: PUSH
8507: LD_INT 12
8509: PUSH
8510: LD_INT 15
8512: PUSH
8513: LD_INT 16
8515: PUSH
8516: LD_INT 20
8518: PUSH
8519: LD_INT 21
8521: PUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 23
8527: PUSH
8528: LD_INT 25
8530: PUSH
8531: LD_INT 26
8533: PUSH
8534: LD_INT 30
8536: PUSH
8537: LD_INT 31
8539: PUSH
8540: LD_INT 32
8542: PUSH
8543: LD_INT 33
8545: PUSH
8546: LD_INT 34
8548: PUSH
8549: LD_INT 35
8551: PUSH
8552: LD_INT 36
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: PUSH
8578: LD_INT 101
8580: PUSH
8581: LD_INT 102
8583: PUSH
8584: LD_INT 103
8586: PUSH
8587: LD_INT 106
8589: PUSH
8590: LD_INT 108
8592: PUSH
8593: LD_INT 112
8595: PUSH
8596: LD_INT 113
8598: PUSH
8599: LD_INT 114
8601: PUSH
8602: LD_INT 115
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: PUSH
8616: EMPTY
8617: LIST
8618: LIST
8619: ST_TO_ADDR
8620: GO 8851
8622: LD_INT 19
8624: DOUBLE
8625: EQUAL
8626: IFTRUE 8630
8628: GO 8850
8630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8631: LD_ADDR_VAR 0 1
8635: PUSH
8636: LD_INT 1
8638: PUSH
8639: LD_INT 2
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: LD_INT 4
8647: PUSH
8648: LD_INT 5
8650: PUSH
8651: LD_INT 6
8653: PUSH
8654: LD_INT 7
8656: PUSH
8657: LD_INT 8
8659: PUSH
8660: LD_INT 9
8662: PUSH
8663: LD_INT 10
8665: PUSH
8666: LD_INT 11
8668: PUSH
8669: LD_INT 12
8671: PUSH
8672: LD_INT 13
8674: PUSH
8675: LD_INT 14
8677: PUSH
8678: LD_INT 15
8680: PUSH
8681: LD_INT 16
8683: PUSH
8684: LD_INT 17
8686: PUSH
8687: LD_INT 18
8689: PUSH
8690: LD_INT 19
8692: PUSH
8693: LD_INT 20
8695: PUSH
8696: LD_INT 21
8698: PUSH
8699: LD_INT 22
8701: PUSH
8702: LD_INT 23
8704: PUSH
8705: LD_INT 24
8707: PUSH
8708: LD_INT 25
8710: PUSH
8711: LD_INT 26
8713: PUSH
8714: LD_INT 27
8716: PUSH
8717: LD_INT 28
8719: PUSH
8720: LD_INT 29
8722: PUSH
8723: LD_INT 30
8725: PUSH
8726: LD_INT 31
8728: PUSH
8729: LD_INT 32
8731: PUSH
8732: LD_INT 33
8734: PUSH
8735: LD_INT 34
8737: PUSH
8738: LD_INT 35
8740: PUSH
8741: LD_INT 36
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: PUSH
8782: LD_INT 101
8784: PUSH
8785: LD_INT 102
8787: PUSH
8788: LD_INT 103
8790: PUSH
8791: LD_INT 104
8793: PUSH
8794: LD_INT 105
8796: PUSH
8797: LD_INT 106
8799: PUSH
8800: LD_INT 107
8802: PUSH
8803: LD_INT 108
8805: PUSH
8806: LD_INT 109
8808: PUSH
8809: LD_INT 110
8811: PUSH
8812: LD_INT 111
8814: PUSH
8815: LD_INT 112
8817: PUSH
8818: LD_INT 113
8820: PUSH
8821: LD_INT 114
8823: PUSH
8824: LD_INT 115
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: ST_TO_ADDR
8848: GO 8851
8850: POP
// end else
8851: GO 9070
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8853: LD_ADDR_VAR 0 1
8857: PUSH
8858: LD_INT 1
8860: PUSH
8861: LD_INT 2
8863: PUSH
8864: LD_INT 3
8866: PUSH
8867: LD_INT 4
8869: PUSH
8870: LD_INT 5
8872: PUSH
8873: LD_INT 6
8875: PUSH
8876: LD_INT 7
8878: PUSH
8879: LD_INT 8
8881: PUSH
8882: LD_INT 9
8884: PUSH
8885: LD_INT 10
8887: PUSH
8888: LD_INT 11
8890: PUSH
8891: LD_INT 12
8893: PUSH
8894: LD_INT 13
8896: PUSH
8897: LD_INT 14
8899: PUSH
8900: LD_INT 15
8902: PUSH
8903: LD_INT 16
8905: PUSH
8906: LD_INT 17
8908: PUSH
8909: LD_INT 18
8911: PUSH
8912: LD_INT 19
8914: PUSH
8915: LD_INT 20
8917: PUSH
8918: LD_INT 21
8920: PUSH
8921: LD_INT 22
8923: PUSH
8924: LD_INT 23
8926: PUSH
8927: LD_INT 24
8929: PUSH
8930: LD_INT 25
8932: PUSH
8933: LD_INT 26
8935: PUSH
8936: LD_INT 27
8938: PUSH
8939: LD_INT 28
8941: PUSH
8942: LD_INT 29
8944: PUSH
8945: LD_INT 30
8947: PUSH
8948: LD_INT 31
8950: PUSH
8951: LD_INT 32
8953: PUSH
8954: LD_INT 33
8956: PUSH
8957: LD_INT 34
8959: PUSH
8960: LD_INT 35
8962: PUSH
8963: LD_INT 36
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 101
9006: PUSH
9007: LD_INT 102
9009: PUSH
9010: LD_INT 103
9012: PUSH
9013: LD_INT 104
9015: PUSH
9016: LD_INT 105
9018: PUSH
9019: LD_INT 106
9021: PUSH
9022: LD_INT 107
9024: PUSH
9025: LD_INT 108
9027: PUSH
9028: LD_INT 109
9030: PUSH
9031: LD_INT 110
9033: PUSH
9034: LD_INT 111
9036: PUSH
9037: LD_INT 112
9039: PUSH
9040: LD_INT 113
9042: PUSH
9043: LD_INT 114
9045: PUSH
9046: LD_INT 115
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: ST_TO_ADDR
// if result then
9070: LD_VAR 0 1
9074: IFFALSE 9363
// begin normal :=  ;
9076: LD_ADDR_VAR 0 3
9080: PUSH
9081: LD_STRING 
9083: ST_TO_ADDR
// hardcore :=  ;
9084: LD_ADDR_VAR 0 4
9088: PUSH
9089: LD_STRING 
9091: ST_TO_ADDR
// for i = 1 to normalCounter do
9092: LD_ADDR_VAR 0 5
9096: PUSH
9097: DOUBLE
9098: LD_INT 1
9100: DEC
9101: ST_TO_ADDR
9102: LD_EXP 24
9106: PUSH
9107: FOR_TO
9108: IFFALSE 9209
// begin tmp := 0 ;
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_STRING 0
9117: ST_TO_ADDR
// if result [ 1 ] then
9118: LD_VAR 0 1
9122: PUSH
9123: LD_INT 1
9125: ARRAY
9126: IFFALSE 9191
// if result [ 1 ] [ 1 ] = i then
9128: LD_VAR 0 1
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PUSH
9137: LD_INT 1
9139: ARRAY
9140: PUSH
9141: LD_VAR 0 5
9145: EQUAL
9146: IFFALSE 9191
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9148: LD_ADDR_VAR 0 1
9152: PUSH
9153: LD_VAR 0 1
9157: PPUSH
9158: LD_INT 1
9160: PPUSH
9161: LD_VAR 0 1
9165: PUSH
9166: LD_INT 1
9168: ARRAY
9169: PPUSH
9170: LD_INT 1
9172: PPUSH
9173: CALL_OW 3
9177: PPUSH
9178: CALL_OW 1
9182: ST_TO_ADDR
// tmp := 1 ;
9183: LD_ADDR_VAR 0 2
9187: PUSH
9188: LD_STRING 1
9190: ST_TO_ADDR
// end ; normal := normal & tmp ;
9191: LD_ADDR_VAR 0 3
9195: PUSH
9196: LD_VAR 0 3
9200: PUSH
9201: LD_VAR 0 2
9205: STR
9206: ST_TO_ADDR
// end ;
9207: GO 9107
9209: POP
9210: POP
// for i = 1 to hardcoreCounter do
9211: LD_ADDR_VAR 0 5
9215: PUSH
9216: DOUBLE
9217: LD_INT 1
9219: DEC
9220: ST_TO_ADDR
9221: LD_EXP 25
9225: PUSH
9226: FOR_TO
9227: IFFALSE 9332
// begin tmp := 0 ;
9229: LD_ADDR_VAR 0 2
9233: PUSH
9234: LD_STRING 0
9236: ST_TO_ADDR
// if result [ 2 ] then
9237: LD_VAR 0 1
9241: PUSH
9242: LD_INT 2
9244: ARRAY
9245: IFFALSE 9314
// if result [ 2 ] [ 1 ] = 100 + i then
9247: LD_VAR 0 1
9251: PUSH
9252: LD_INT 2
9254: ARRAY
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PUSH
9260: LD_INT 100
9262: PUSH
9263: LD_VAR 0 5
9267: PLUS
9268: EQUAL
9269: IFFALSE 9314
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9271: LD_ADDR_VAR 0 1
9275: PUSH
9276: LD_VAR 0 1
9280: PPUSH
9281: LD_INT 2
9283: PPUSH
9284: LD_VAR 0 1
9288: PUSH
9289: LD_INT 2
9291: ARRAY
9292: PPUSH
9293: LD_INT 1
9295: PPUSH
9296: CALL_OW 3
9300: PPUSH
9301: CALL_OW 1
9305: ST_TO_ADDR
// tmp := 1 ;
9306: LD_ADDR_VAR 0 2
9310: PUSH
9311: LD_STRING 1
9313: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9314: LD_ADDR_VAR 0 4
9318: PUSH
9319: LD_VAR 0 4
9323: PUSH
9324: LD_VAR 0 2
9328: STR
9329: ST_TO_ADDR
// end ;
9330: GO 9226
9332: POP
9333: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9334: LD_STRING getStreamItemsFromMission("
9336: PUSH
9337: LD_VAR 0 3
9341: STR
9342: PUSH
9343: LD_STRING ","
9345: STR
9346: PUSH
9347: LD_VAR 0 4
9351: STR
9352: PUSH
9353: LD_STRING ")
9355: STR
9356: PPUSH
9357: CALL_OW 559
// end else
9361: GO 9370
// ToLua ( getStreamItemsFromMission("","") ) ;
9363: LD_STRING getStreamItemsFromMission("","")
9365: PPUSH
9366: CALL_OW 559
// end ;
9370: LD_VAR 0 1
9374: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9375: LD_EXP 23
9379: PUSH
9380: LD_EXP 28
9384: AND
9385: IFFALSE 9509
9387: GO 9389
9389: DISABLE
9390: LD_INT 0
9392: PPUSH
9393: PPUSH
// begin enable ;
9394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9395: LD_ADDR_VAR 0 2
9399: PUSH
9400: LD_INT 22
9402: PUSH
9403: LD_OWVAR 2
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 2
9414: PUSH
9415: LD_INT 34
9417: PUSH
9418: LD_INT 7
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 34
9427: PUSH
9428: LD_INT 45
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 34
9437: PUSH
9438: LD_INT 28
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: LD_INT 34
9447: PUSH
9448: LD_INT 47
9450: PUSH
9451: EMPTY
9452: LIST
9453: LIST
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PPUSH
9466: CALL_OW 69
9470: ST_TO_ADDR
// if not tmp then
9471: LD_VAR 0 2
9475: NOT
9476: IFFALSE 9480
// exit ;
9478: GO 9509
// for i in tmp do
9480: LD_ADDR_VAR 0 1
9484: PUSH
9485: LD_VAR 0 2
9489: PUSH
9490: FOR_IN
9491: IFFALSE 9507
// begin SetLives ( i , 0 ) ;
9493: LD_VAR 0 1
9497: PPUSH
9498: LD_INT 0
9500: PPUSH
9501: CALL_OW 234
// end ;
9505: GO 9490
9507: POP
9508: POP
// end ;
9509: PPOPN 2
9511: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9512: LD_EXP 23
9516: PUSH
9517: LD_EXP 29
9521: AND
9522: IFFALSE 9606
9524: GO 9526
9526: DISABLE
9527: LD_INT 0
9529: PPUSH
9530: PPUSH
// begin enable ;
9531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9532: LD_ADDR_VAR 0 2
9536: PUSH
9537: LD_INT 22
9539: PUSH
9540: LD_OWVAR 2
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: LD_INT 32
9551: PUSH
9552: LD_INT 3
9554: PUSH
9555: EMPTY
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 69
9567: ST_TO_ADDR
// if not tmp then
9568: LD_VAR 0 2
9572: NOT
9573: IFFALSE 9577
// exit ;
9575: GO 9606
// for i in tmp do
9577: LD_ADDR_VAR 0 1
9581: PUSH
9582: LD_VAR 0 2
9586: PUSH
9587: FOR_IN
9588: IFFALSE 9604
// begin SetLives ( i , 0 ) ;
9590: LD_VAR 0 1
9594: PPUSH
9595: LD_INT 0
9597: PPUSH
9598: CALL_OW 234
// end ;
9602: GO 9587
9604: POP
9605: POP
// end ;
9606: PPOPN 2
9608: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9609: LD_EXP 23
9613: PUSH
9614: LD_EXP 26
9618: AND
9619: IFFALSE 9712
9621: GO 9623
9623: DISABLE
9624: LD_INT 0
9626: PPUSH
// begin enable ;
9627: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9628: LD_ADDR_VAR 0 1
9632: PUSH
9633: LD_INT 22
9635: PUSH
9636: LD_OWVAR 2
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 2
9647: PUSH
9648: LD_INT 25
9650: PUSH
9651: LD_INT 5
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PUSH
9658: LD_INT 25
9660: PUSH
9661: LD_INT 9
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: PUSH
9668: LD_INT 25
9670: PUSH
9671: LD_INT 8
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PPUSH
9688: CALL_OW 69
9692: PUSH
9693: FOR_IN
9694: IFFALSE 9710
// begin SetClass ( i , 1 ) ;
9696: LD_VAR 0 1
9700: PPUSH
9701: LD_INT 1
9703: PPUSH
9704: CALL_OW 336
// end ;
9708: GO 9693
9710: POP
9711: POP
// end ;
9712: PPOPN 1
9714: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9715: LD_EXP 23
9719: PUSH
9720: LD_EXP 27
9724: AND
9725: PUSH
9726: LD_OWVAR 65
9730: PUSH
9731: LD_INT 7
9733: LESS
9734: AND
9735: IFFALSE 9749
9737: GO 9739
9739: DISABLE
// begin enable ;
9740: ENABLE
// game_speed := 7 ;
9741: LD_ADDR_OWVAR 65
9745: PUSH
9746: LD_INT 7
9748: ST_TO_ADDR
// end ;
9749: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9750: LD_EXP 23
9754: PUSH
9755: LD_EXP 30
9759: AND
9760: IFFALSE 9962
9762: GO 9764
9764: DISABLE
9765: LD_INT 0
9767: PPUSH
9768: PPUSH
9769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9770: LD_ADDR_VAR 0 3
9774: PUSH
9775: LD_INT 81
9777: PUSH
9778: LD_OWVAR 2
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 21
9789: PUSH
9790: LD_INT 1
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: PPUSH
9801: CALL_OW 69
9805: ST_TO_ADDR
// if not tmp then
9806: LD_VAR 0 3
9810: NOT
9811: IFFALSE 9815
// exit ;
9813: GO 9962
// if tmp > 5 then
9815: LD_VAR 0 3
9819: PUSH
9820: LD_INT 5
9822: GREATER
9823: IFFALSE 9835
// k := 5 else
9825: LD_ADDR_VAR 0 2
9829: PUSH
9830: LD_INT 5
9832: ST_TO_ADDR
9833: GO 9845
// k := tmp ;
9835: LD_ADDR_VAR 0 2
9839: PUSH
9840: LD_VAR 0 3
9844: ST_TO_ADDR
// for i := 1 to k do
9845: LD_ADDR_VAR 0 1
9849: PUSH
9850: DOUBLE
9851: LD_INT 1
9853: DEC
9854: ST_TO_ADDR
9855: LD_VAR 0 2
9859: PUSH
9860: FOR_TO
9861: IFFALSE 9960
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9863: LD_VAR 0 3
9867: PUSH
9868: LD_VAR 0 1
9872: ARRAY
9873: PPUSH
9874: LD_VAR 0 1
9878: PUSH
9879: LD_INT 4
9881: MOD
9882: PUSH
9883: LD_INT 1
9885: PLUS
9886: PPUSH
9887: CALL_OW 259
9891: PUSH
9892: LD_INT 10
9894: LESS
9895: IFFALSE 9958
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9897: LD_VAR 0 3
9901: PUSH
9902: LD_VAR 0 1
9906: ARRAY
9907: PPUSH
9908: LD_VAR 0 1
9912: PUSH
9913: LD_INT 4
9915: MOD
9916: PUSH
9917: LD_INT 1
9919: PLUS
9920: PPUSH
9921: LD_VAR 0 3
9925: PUSH
9926: LD_VAR 0 1
9930: ARRAY
9931: PPUSH
9932: LD_VAR 0 1
9936: PUSH
9937: LD_INT 4
9939: MOD
9940: PUSH
9941: LD_INT 1
9943: PLUS
9944: PPUSH
9945: CALL_OW 259
9949: PUSH
9950: LD_INT 1
9952: PLUS
9953: PPUSH
9954: CALL_OW 237
9958: GO 9860
9960: POP
9961: POP
// end ;
9962: PPOPN 3
9964: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9965: LD_EXP 23
9969: PUSH
9970: LD_EXP 31
9974: AND
9975: IFFALSE 9995
9977: GO 9979
9979: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9980: LD_INT 4
9982: PPUSH
9983: LD_OWVAR 2
9987: PPUSH
9988: LD_INT 0
9990: PPUSH
9991: CALL_OW 324
9995: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9996: LD_EXP 23
10000: PUSH
10001: LD_EXP 60
10005: AND
10006: IFFALSE 10026
10008: GO 10010
10010: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10011: LD_INT 19
10013: PPUSH
10014: LD_OWVAR 2
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL_OW 324
10026: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10027: LD_EXP 23
10031: PUSH
10032: LD_EXP 32
10036: AND
10037: IFFALSE 10139
10039: GO 10041
10041: DISABLE
10042: LD_INT 0
10044: PPUSH
10045: PPUSH
// begin enable ;
10046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10047: LD_ADDR_VAR 0 2
10051: PUSH
10052: LD_INT 22
10054: PUSH
10055: LD_OWVAR 2
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: LD_INT 34
10069: PUSH
10070: LD_INT 11
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 34
10079: PUSH
10080: LD_INT 30
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 69
10100: ST_TO_ADDR
// if not tmp then
10101: LD_VAR 0 2
10105: NOT
10106: IFFALSE 10110
// exit ;
10108: GO 10139
// for i in tmp do
10110: LD_ADDR_VAR 0 1
10114: PUSH
10115: LD_VAR 0 2
10119: PUSH
10120: FOR_IN
10121: IFFALSE 10137
// begin SetLives ( i , 0 ) ;
10123: LD_VAR 0 1
10127: PPUSH
10128: LD_INT 0
10130: PPUSH
10131: CALL_OW 234
// end ;
10135: GO 10120
10137: POP
10138: POP
// end ;
10139: PPOPN 2
10141: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10142: LD_EXP 23
10146: PUSH
10147: LD_EXP 33
10151: AND
10152: IFFALSE 10172
10154: GO 10156
10156: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10157: LD_INT 32
10159: PPUSH
10160: LD_OWVAR 2
10164: PPUSH
10165: LD_INT 0
10167: PPUSH
10168: CALL_OW 324
10172: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10173: LD_EXP 23
10177: PUSH
10178: LD_EXP 34
10182: AND
10183: IFFALSE 10364
10185: GO 10187
10187: DISABLE
10188: LD_INT 0
10190: PPUSH
10191: PPUSH
10192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10193: LD_ADDR_VAR 0 2
10197: PUSH
10198: LD_INT 22
10200: PUSH
10201: LD_OWVAR 2
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 33
10212: PUSH
10213: LD_INT 3
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PPUSH
10224: CALL_OW 69
10228: ST_TO_ADDR
// if not tmp then
10229: LD_VAR 0 2
10233: NOT
10234: IFFALSE 10238
// exit ;
10236: GO 10364
// side := 0 ;
10238: LD_ADDR_VAR 0 3
10242: PUSH
10243: LD_INT 0
10245: ST_TO_ADDR
// for i := 1 to 8 do
10246: LD_ADDR_VAR 0 1
10250: PUSH
10251: DOUBLE
10252: LD_INT 1
10254: DEC
10255: ST_TO_ADDR
10256: LD_INT 8
10258: PUSH
10259: FOR_TO
10260: IFFALSE 10308
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10262: LD_OWVAR 2
10266: PUSH
10267: LD_VAR 0 1
10271: NONEQUAL
10272: PUSH
10273: LD_OWVAR 2
10277: PPUSH
10278: LD_VAR 0 1
10282: PPUSH
10283: CALL_OW 81
10287: PUSH
10288: LD_INT 2
10290: EQUAL
10291: AND
10292: IFFALSE 10306
// begin side := i ;
10294: LD_ADDR_VAR 0 3
10298: PUSH
10299: LD_VAR 0 1
10303: ST_TO_ADDR
// break ;
10304: GO 10308
// end ;
10306: GO 10259
10308: POP
10309: POP
// if not side then
10310: LD_VAR 0 3
10314: NOT
10315: IFFALSE 10319
// exit ;
10317: GO 10364
// for i := 1 to tmp do
10319: LD_ADDR_VAR 0 1
10323: PUSH
10324: DOUBLE
10325: LD_INT 1
10327: DEC
10328: ST_TO_ADDR
10329: LD_VAR 0 2
10333: PUSH
10334: FOR_TO
10335: IFFALSE 10362
// if Prob ( 60 ) then
10337: LD_INT 60
10339: PPUSH
10340: CALL_OW 13
10344: IFFALSE 10360
// SetSide ( i , side ) ;
10346: LD_VAR 0 1
10350: PPUSH
10351: LD_VAR 0 3
10355: PPUSH
10356: CALL_OW 235
10360: GO 10334
10362: POP
10363: POP
// end ;
10364: PPOPN 3
10366: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10367: LD_EXP 23
10371: PUSH
10372: LD_EXP 36
10376: AND
10377: IFFALSE 10496
10379: GO 10381
10381: DISABLE
10382: LD_INT 0
10384: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10385: LD_ADDR_VAR 0 1
10389: PUSH
10390: LD_INT 22
10392: PUSH
10393: LD_OWVAR 2
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PUSH
10402: LD_INT 21
10404: PUSH
10405: LD_INT 1
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 3
10414: PUSH
10415: LD_INT 23
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: PUSH
10439: FOR_IN
10440: IFFALSE 10494
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10442: LD_VAR 0 1
10446: PPUSH
10447: CALL_OW 257
10451: PUSH
10452: LD_INT 1
10454: PUSH
10455: LD_INT 2
10457: PUSH
10458: LD_INT 3
10460: PUSH
10461: LD_INT 4
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: IN
10470: IFFALSE 10492
// SetClass ( un , rand ( 1 , 4 ) ) ;
10472: LD_VAR 0 1
10476: PPUSH
10477: LD_INT 1
10479: PPUSH
10480: LD_INT 4
10482: PPUSH
10483: CALL_OW 12
10487: PPUSH
10488: CALL_OW 336
10492: GO 10439
10494: POP
10495: POP
// end ;
10496: PPOPN 1
10498: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10499: LD_EXP 23
10503: PUSH
10504: LD_EXP 35
10508: AND
10509: IFFALSE 10588
10511: GO 10513
10513: DISABLE
10514: LD_INT 0
10516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10517: LD_ADDR_VAR 0 1
10521: PUSH
10522: LD_INT 22
10524: PUSH
10525: LD_OWVAR 2
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 21
10536: PUSH
10537: LD_INT 3
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PPUSH
10548: CALL_OW 69
10552: ST_TO_ADDR
// if not tmp then
10553: LD_VAR 0 1
10557: NOT
10558: IFFALSE 10562
// exit ;
10560: GO 10588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10562: LD_VAR 0 1
10566: PUSH
10567: LD_INT 1
10569: PPUSH
10570: LD_VAR 0 1
10574: PPUSH
10575: CALL_OW 12
10579: ARRAY
10580: PPUSH
10581: LD_INT 100
10583: PPUSH
10584: CALL_OW 234
// end ;
10588: PPOPN 1
10590: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10591: LD_EXP 23
10595: PUSH
10596: LD_EXP 37
10600: AND
10601: IFFALSE 10699
10603: GO 10605
10605: DISABLE
10606: LD_INT 0
10608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10609: LD_ADDR_VAR 0 1
10613: PUSH
10614: LD_INT 22
10616: PUSH
10617: LD_OWVAR 2
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 1
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PPUSH
10640: CALL_OW 69
10644: ST_TO_ADDR
// if not tmp then
10645: LD_VAR 0 1
10649: NOT
10650: IFFALSE 10654
// exit ;
10652: GO 10699
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10654: LD_VAR 0 1
10658: PUSH
10659: LD_INT 1
10661: PPUSH
10662: LD_VAR 0 1
10666: PPUSH
10667: CALL_OW 12
10671: ARRAY
10672: PPUSH
10673: LD_INT 1
10675: PPUSH
10676: LD_INT 4
10678: PPUSH
10679: CALL_OW 12
10683: PPUSH
10684: LD_INT 3000
10686: PPUSH
10687: LD_INT 9000
10689: PPUSH
10690: CALL_OW 12
10694: PPUSH
10695: CALL_OW 492
// end ;
10699: PPOPN 1
10701: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10702: LD_EXP 23
10706: PUSH
10707: LD_EXP 38
10711: AND
10712: IFFALSE 10732
10714: GO 10716
10716: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10717: LD_INT 1
10719: PPUSH
10720: LD_OWVAR 2
10724: PPUSH
10725: LD_INT 0
10727: PPUSH
10728: CALL_OW 324
10732: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10733: LD_EXP 23
10737: PUSH
10738: LD_EXP 39
10742: AND
10743: IFFALSE 10826
10745: GO 10747
10747: DISABLE
10748: LD_INT 0
10750: PPUSH
10751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10752: LD_ADDR_VAR 0 2
10756: PUSH
10757: LD_INT 22
10759: PUSH
10760: LD_OWVAR 2
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 21
10771: PUSH
10772: LD_INT 3
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PPUSH
10783: CALL_OW 69
10787: ST_TO_ADDR
// if not tmp then
10788: LD_VAR 0 2
10792: NOT
10793: IFFALSE 10797
// exit ;
10795: GO 10826
// for i in tmp do
10797: LD_ADDR_VAR 0 1
10801: PUSH
10802: LD_VAR 0 2
10806: PUSH
10807: FOR_IN
10808: IFFALSE 10824
// SetBLevel ( i , 10 ) ;
10810: LD_VAR 0 1
10814: PPUSH
10815: LD_INT 10
10817: PPUSH
10818: CALL_OW 241
10822: GO 10807
10824: POP
10825: POP
// end ;
10826: PPOPN 2
10828: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10829: LD_EXP 23
10833: PUSH
10834: LD_EXP 40
10838: AND
10839: IFFALSE 10950
10841: GO 10843
10843: DISABLE
10844: LD_INT 0
10846: PPUSH
10847: PPUSH
10848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10849: LD_ADDR_VAR 0 3
10853: PUSH
10854: LD_INT 22
10856: PUSH
10857: LD_OWVAR 2
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 25
10868: PUSH
10869: LD_INT 1
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PPUSH
10880: CALL_OW 69
10884: ST_TO_ADDR
// if not tmp then
10885: LD_VAR 0 3
10889: NOT
10890: IFFALSE 10894
// exit ;
10892: GO 10950
// un := tmp [ rand ( 1 , tmp ) ] ;
10894: LD_ADDR_VAR 0 2
10898: PUSH
10899: LD_VAR 0 3
10903: PUSH
10904: LD_INT 1
10906: PPUSH
10907: LD_VAR 0 3
10911: PPUSH
10912: CALL_OW 12
10916: ARRAY
10917: ST_TO_ADDR
// if Crawls ( un ) then
10918: LD_VAR 0 2
10922: PPUSH
10923: CALL_OW 318
10927: IFFALSE 10938
// ComWalk ( un ) ;
10929: LD_VAR 0 2
10933: PPUSH
10934: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10938: LD_VAR 0 2
10942: PPUSH
10943: LD_INT 5
10945: PPUSH
10946: CALL_OW 336
// end ;
10950: PPOPN 3
10952: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10953: LD_EXP 23
10957: PUSH
10958: LD_EXP 41
10962: AND
10963: PUSH
10964: LD_OWVAR 67
10968: PUSH
10969: LD_INT 3
10971: LESS
10972: AND
10973: IFFALSE 10992
10975: GO 10977
10977: DISABLE
// Difficulty := Difficulty + 1 ;
10978: LD_ADDR_OWVAR 67
10982: PUSH
10983: LD_OWVAR 67
10987: PUSH
10988: LD_INT 1
10990: PLUS
10991: ST_TO_ADDR
10992: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10993: LD_EXP 23
10997: PUSH
10998: LD_EXP 42
11002: AND
11003: IFFALSE 11106
11005: GO 11007
11007: DISABLE
11008: LD_INT 0
11010: PPUSH
// begin for i := 1 to 5 do
11011: LD_ADDR_VAR 0 1
11015: PUSH
11016: DOUBLE
11017: LD_INT 1
11019: DEC
11020: ST_TO_ADDR
11021: LD_INT 5
11023: PUSH
11024: FOR_TO
11025: IFFALSE 11104
// begin uc_nation := nation_nature ;
11027: LD_ADDR_OWVAR 21
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// uc_side := 0 ;
11035: LD_ADDR_OWVAR 20
11039: PUSH
11040: LD_INT 0
11042: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11043: LD_ADDR_OWVAR 29
11047: PUSH
11048: LD_INT 12
11050: PUSH
11051: LD_INT 12
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: ST_TO_ADDR
// hc_agressivity := 20 ;
11058: LD_ADDR_OWVAR 35
11062: PUSH
11063: LD_INT 20
11065: ST_TO_ADDR
// hc_class := class_tiger ;
11066: LD_ADDR_OWVAR 28
11070: PUSH
11071: LD_INT 14
11073: ST_TO_ADDR
// hc_gallery :=  ;
11074: LD_ADDR_OWVAR 33
11078: PUSH
11079: LD_STRING 
11081: ST_TO_ADDR
// hc_name :=  ;
11082: LD_ADDR_OWVAR 26
11086: PUSH
11087: LD_STRING 
11089: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11090: CALL_OW 44
11094: PPUSH
11095: LD_INT 0
11097: PPUSH
11098: CALL_OW 51
// end ;
11102: GO 11024
11104: POP
11105: POP
// end ;
11106: PPOPN 1
11108: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11109: LD_EXP 23
11113: PUSH
11114: LD_EXP 43
11118: AND
11119: IFFALSE 11128
11121: GO 11123
11123: DISABLE
// StreamSibBomb ;
11124: CALL 11129 0 0
11128: END
// export function StreamSibBomb ; var i , x , y ; begin
11129: LD_INT 0
11131: PPUSH
11132: PPUSH
11133: PPUSH
11134: PPUSH
// result := false ;
11135: LD_ADDR_VAR 0 1
11139: PUSH
11140: LD_INT 0
11142: ST_TO_ADDR
// for i := 1 to 16 do
11143: LD_ADDR_VAR 0 2
11147: PUSH
11148: DOUBLE
11149: LD_INT 1
11151: DEC
11152: ST_TO_ADDR
11153: LD_INT 16
11155: PUSH
11156: FOR_TO
11157: IFFALSE 11356
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11159: LD_ADDR_VAR 0 3
11163: PUSH
11164: LD_INT 10
11166: PUSH
11167: LD_INT 20
11169: PUSH
11170: LD_INT 30
11172: PUSH
11173: LD_INT 40
11175: PUSH
11176: LD_INT 50
11178: PUSH
11179: LD_INT 60
11181: PUSH
11182: LD_INT 70
11184: PUSH
11185: LD_INT 80
11187: PUSH
11188: LD_INT 90
11190: PUSH
11191: LD_INT 100
11193: PUSH
11194: LD_INT 110
11196: PUSH
11197: LD_INT 120
11199: PUSH
11200: LD_INT 130
11202: PUSH
11203: LD_INT 140
11205: PUSH
11206: LD_INT 150
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 1
11228: PPUSH
11229: LD_INT 15
11231: PPUSH
11232: CALL_OW 12
11236: ARRAY
11237: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11238: LD_ADDR_VAR 0 4
11242: PUSH
11243: LD_INT 10
11245: PUSH
11246: LD_INT 20
11248: PUSH
11249: LD_INT 30
11251: PUSH
11252: LD_INT 40
11254: PUSH
11255: LD_INT 50
11257: PUSH
11258: LD_INT 60
11260: PUSH
11261: LD_INT 70
11263: PUSH
11264: LD_INT 80
11266: PUSH
11267: LD_INT 90
11269: PUSH
11270: LD_INT 100
11272: PUSH
11273: LD_INT 110
11275: PUSH
11276: LD_INT 120
11278: PUSH
11279: LD_INT 130
11281: PUSH
11282: LD_INT 140
11284: PUSH
11285: LD_INT 150
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 1
11307: PPUSH
11308: LD_INT 15
11310: PPUSH
11311: CALL_OW 12
11315: ARRAY
11316: ST_TO_ADDR
// if ValidHex ( x , y ) then
11317: LD_VAR 0 3
11321: PPUSH
11322: LD_VAR 0 4
11326: PPUSH
11327: CALL_OW 488
11331: IFFALSE 11354
// begin result := [ x , y ] ;
11333: LD_ADDR_VAR 0 1
11337: PUSH
11338: LD_VAR 0 3
11342: PUSH
11343: LD_VAR 0 4
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: ST_TO_ADDR
// break ;
11352: GO 11356
// end ; end ;
11354: GO 11156
11356: POP
11357: POP
// if result then
11358: LD_VAR 0 1
11362: IFFALSE 11422
// begin ToLua ( playSibBomb() ) ;
11364: LD_STRING playSibBomb()
11366: PPUSH
11367: CALL_OW 559
// wait ( 0 0$14 ) ;
11371: LD_INT 490
11373: PPUSH
11374: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11378: LD_VAR 0 1
11382: PUSH
11383: LD_INT 1
11385: ARRAY
11386: PPUSH
11387: LD_VAR 0 1
11391: PUSH
11392: LD_INT 2
11394: ARRAY
11395: PPUSH
11396: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11400: LD_VAR 0 1
11404: PUSH
11405: LD_INT 1
11407: ARRAY
11408: PPUSH
11409: LD_VAR 0 1
11413: PUSH
11414: LD_INT 2
11416: ARRAY
11417: PPUSH
11418: CALL_OW 429
// end ; end ;
11422: LD_VAR 0 1
11426: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11427: LD_EXP 23
11431: PUSH
11432: LD_EXP 45
11436: AND
11437: IFFALSE 11449
11439: GO 11441
11441: DISABLE
// YouLost (  ) ;
11442: LD_STRING 
11444: PPUSH
11445: CALL_OW 104
11449: END
// every 0 0$1 trigger StreamModeActive and sFog do
11450: LD_EXP 23
11454: PUSH
11455: LD_EXP 44
11459: AND
11460: IFFALSE 11474
11462: GO 11464
11464: DISABLE
// FogOff ( your_side ) ;
11465: LD_OWVAR 2
11469: PPUSH
11470: CALL_OW 344
11474: END
// every 0 0$1 trigger StreamModeActive and sSun do
11475: LD_EXP 23
11479: PUSH
11480: LD_EXP 46
11484: AND
11485: IFFALSE 11513
11487: GO 11489
11489: DISABLE
// begin solar_recharge_percent := 0 ;
11490: LD_ADDR_OWVAR 79
11494: PUSH
11495: LD_INT 0
11497: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11498: LD_INT 10500
11500: PPUSH
11501: CALL_OW 67
// solar_recharge_percent := 100 ;
11505: LD_ADDR_OWVAR 79
11509: PUSH
11510: LD_INT 100
11512: ST_TO_ADDR
// end ;
11513: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11514: LD_EXP 23
11518: PUSH
11519: LD_EXP 47
11523: AND
11524: IFFALSE 11763
11526: GO 11528
11528: DISABLE
11529: LD_INT 0
11531: PPUSH
11532: PPUSH
11533: PPUSH
// begin tmp := [ ] ;
11534: LD_ADDR_VAR 0 3
11538: PUSH
11539: EMPTY
11540: ST_TO_ADDR
// for i := 1 to 6 do
11541: LD_ADDR_VAR 0 1
11545: PUSH
11546: DOUBLE
11547: LD_INT 1
11549: DEC
11550: ST_TO_ADDR
11551: LD_INT 6
11553: PUSH
11554: FOR_TO
11555: IFFALSE 11660
// begin uc_nation := nation_nature ;
11557: LD_ADDR_OWVAR 21
11561: PUSH
11562: LD_INT 0
11564: ST_TO_ADDR
// uc_side := 0 ;
11565: LD_ADDR_OWVAR 20
11569: PUSH
11570: LD_INT 0
11572: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11573: LD_ADDR_OWVAR 29
11577: PUSH
11578: LD_INT 12
11580: PUSH
11581: LD_INT 12
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: ST_TO_ADDR
// hc_agressivity := 20 ;
11588: LD_ADDR_OWVAR 35
11592: PUSH
11593: LD_INT 20
11595: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11596: LD_ADDR_OWVAR 28
11600: PUSH
11601: LD_INT 17
11603: ST_TO_ADDR
// hc_gallery :=  ;
11604: LD_ADDR_OWVAR 33
11608: PUSH
11609: LD_STRING 
11611: ST_TO_ADDR
// hc_name :=  ;
11612: LD_ADDR_OWVAR 26
11616: PUSH
11617: LD_STRING 
11619: ST_TO_ADDR
// un := CreateHuman ;
11620: LD_ADDR_VAR 0 2
11624: PUSH
11625: CALL_OW 44
11629: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11630: LD_VAR 0 2
11634: PPUSH
11635: LD_INT 1
11637: PPUSH
11638: CALL_OW 51
// tmp := tmp ^ un ;
11642: LD_ADDR_VAR 0 3
11646: PUSH
11647: LD_VAR 0 3
11651: PUSH
11652: LD_VAR 0 2
11656: ADD
11657: ST_TO_ADDR
// end ;
11658: GO 11554
11660: POP
11661: POP
// repeat wait ( 0 0$1 ) ;
11662: LD_INT 35
11664: PPUSH
11665: CALL_OW 67
// for un in tmp do
11669: LD_ADDR_VAR 0 2
11673: PUSH
11674: LD_VAR 0 3
11678: PUSH
11679: FOR_IN
11680: IFFALSE 11754
// begin if IsDead ( un ) then
11682: LD_VAR 0 2
11686: PPUSH
11687: CALL_OW 301
11691: IFFALSE 11711
// begin tmp := tmp diff un ;
11693: LD_ADDR_VAR 0 3
11697: PUSH
11698: LD_VAR 0 3
11702: PUSH
11703: LD_VAR 0 2
11707: DIFF
11708: ST_TO_ADDR
// continue ;
11709: GO 11679
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11711: LD_VAR 0 2
11715: PPUSH
11716: LD_INT 3
11718: PUSH
11719: LD_INT 22
11721: PUSH
11722: LD_INT 0
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PPUSH
11733: CALL_OW 69
11737: PPUSH
11738: LD_VAR 0 2
11742: PPUSH
11743: CALL_OW 74
11747: PPUSH
11748: CALL_OW 115
// end ;
11752: GO 11679
11754: POP
11755: POP
// until not tmp ;
11756: LD_VAR 0 3
11760: NOT
11761: IFFALSE 11662
// end ;
11763: PPOPN 3
11765: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11766: LD_EXP 23
11770: PUSH
11771: LD_EXP 48
11775: AND
11776: IFFALSE 11830
11778: GO 11780
11780: DISABLE
// begin ToLua ( displayTroll(); ) ;
11781: LD_STRING displayTroll();
11783: PPUSH
11784: CALL_OW 559
// wait ( 3 3$00 ) ;
11788: LD_INT 6300
11790: PPUSH
11791: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11795: LD_STRING hideTroll();
11797: PPUSH
11798: CALL_OW 559
// wait ( 1 1$00 ) ;
11802: LD_INT 2100
11804: PPUSH
11805: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11809: LD_STRING displayTroll();
11811: PPUSH
11812: CALL_OW 559
// wait ( 1 1$00 ) ;
11816: LD_INT 2100
11818: PPUSH
11819: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11823: LD_STRING hideTroll();
11825: PPUSH
11826: CALL_OW 559
// end ;
11830: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11831: LD_EXP 23
11835: PUSH
11836: LD_EXP 49
11840: AND
11841: IFFALSE 11904
11843: GO 11845
11845: DISABLE
11846: LD_INT 0
11848: PPUSH
// begin p := 0 ;
11849: LD_ADDR_VAR 0 1
11853: PUSH
11854: LD_INT 0
11856: ST_TO_ADDR
// repeat game_speed := 1 ;
11857: LD_ADDR_OWVAR 65
11861: PUSH
11862: LD_INT 1
11864: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11865: LD_INT 35
11867: PPUSH
11868: CALL_OW 67
// p := p + 1 ;
11872: LD_ADDR_VAR 0 1
11876: PUSH
11877: LD_VAR 0 1
11881: PUSH
11882: LD_INT 1
11884: PLUS
11885: ST_TO_ADDR
// until p >= 60 ;
11886: LD_VAR 0 1
11890: PUSH
11891: LD_INT 60
11893: GREATEREQUAL
11894: IFFALSE 11857
// game_speed := 4 ;
11896: LD_ADDR_OWVAR 65
11900: PUSH
11901: LD_INT 4
11903: ST_TO_ADDR
// end ;
11904: PPOPN 1
11906: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11907: LD_EXP 23
11911: PUSH
11912: LD_EXP 50
11916: AND
11917: IFFALSE 12063
11919: GO 11921
11921: DISABLE
11922: LD_INT 0
11924: PPUSH
11925: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11926: LD_ADDR_VAR 0 1
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_OWVAR 2
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: LD_INT 30
11948: PUSH
11949: LD_INT 0
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 30
11958: PUSH
11959: LD_INT 1
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: EMPTY
11967: LIST
11968: LIST
11969: LIST
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PPUSH
11975: CALL_OW 69
11979: ST_TO_ADDR
// if not depot then
11980: LD_VAR 0 1
11984: NOT
11985: IFFALSE 11989
// exit ;
11987: GO 12063
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11989: LD_ADDR_VAR 0 2
11993: PUSH
11994: LD_VAR 0 1
11998: PUSH
11999: LD_INT 1
12001: PPUSH
12002: LD_VAR 0 1
12006: PPUSH
12007: CALL_OW 12
12011: ARRAY
12012: PPUSH
12013: CALL_OW 274
12017: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12018: LD_VAR 0 2
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12033: LD_VAR 0 2
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: LD_INT 0
12043: PPUSH
12044: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12048: LD_VAR 0 2
12052: PPUSH
12053: LD_INT 3
12055: PPUSH
12056: LD_INT 0
12058: PPUSH
12059: CALL_OW 277
// end ;
12063: PPOPN 2
12065: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12066: LD_EXP 23
12070: PUSH
12071: LD_EXP 51
12075: AND
12076: IFFALSE 12173
12078: GO 12080
12080: DISABLE
12081: LD_INT 0
12083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12084: LD_ADDR_VAR 0 1
12088: PUSH
12089: LD_INT 22
12091: PUSH
12092: LD_OWVAR 2
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 21
12103: PUSH
12104: LD_INT 1
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 3
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 0
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PPUSH
12133: CALL_OW 69
12137: ST_TO_ADDR
// if not tmp then
12138: LD_VAR 0 1
12142: NOT
12143: IFFALSE 12147
// exit ;
12145: GO 12173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12147: LD_VAR 0 1
12151: PUSH
12152: LD_INT 1
12154: PPUSH
12155: LD_VAR 0 1
12159: PPUSH
12160: CALL_OW 12
12164: ARRAY
12165: PPUSH
12166: LD_INT 200
12168: PPUSH
12169: CALL_OW 234
// end ;
12173: PPOPN 1
12175: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12176: LD_EXP 23
12180: PUSH
12181: LD_EXP 52
12185: AND
12186: IFFALSE 12265
12188: GO 12190
12190: DISABLE
12191: LD_INT 0
12193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12194: LD_ADDR_VAR 0 1
12198: PUSH
12199: LD_INT 22
12201: PUSH
12202: LD_OWVAR 2
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 21
12213: PUSH
12214: LD_INT 2
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 69
12229: ST_TO_ADDR
// if not tmp then
12230: LD_VAR 0 1
12234: NOT
12235: IFFALSE 12239
// exit ;
12237: GO 12265
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12239: LD_VAR 0 1
12243: PUSH
12244: LD_INT 1
12246: PPUSH
12247: LD_VAR 0 1
12251: PPUSH
12252: CALL_OW 12
12256: ARRAY
12257: PPUSH
12258: LD_INT 60
12260: PPUSH
12261: CALL_OW 234
// end ;
12265: PPOPN 1
12267: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12268: LD_EXP 23
12272: PUSH
12273: LD_EXP 53
12277: AND
12278: IFFALSE 12377
12280: GO 12282
12282: DISABLE
12283: LD_INT 0
12285: PPUSH
12286: PPUSH
// begin enable ;
12287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12288: LD_ADDR_VAR 0 1
12292: PUSH
12293: LD_INT 22
12295: PUSH
12296: LD_OWVAR 2
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 61
12307: PUSH
12308: EMPTY
12309: LIST
12310: PUSH
12311: LD_INT 33
12313: PUSH
12314: LD_INT 2
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: LIST
12325: PPUSH
12326: CALL_OW 69
12330: ST_TO_ADDR
// if not tmp then
12331: LD_VAR 0 1
12335: NOT
12336: IFFALSE 12340
// exit ;
12338: GO 12377
// for i in tmp do
12340: LD_ADDR_VAR 0 2
12344: PUSH
12345: LD_VAR 0 1
12349: PUSH
12350: FOR_IN
12351: IFFALSE 12375
// if IsControledBy ( i ) then
12353: LD_VAR 0 2
12357: PPUSH
12358: CALL_OW 312
12362: IFFALSE 12373
// ComUnlink ( i ) ;
12364: LD_VAR 0 2
12368: PPUSH
12369: CALL_OW 136
12373: GO 12350
12375: POP
12376: POP
// end ;
12377: PPOPN 2
12379: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12380: LD_EXP 23
12384: PUSH
12385: LD_EXP 54
12389: AND
12390: IFFALSE 12530
12392: GO 12394
12394: DISABLE
12395: LD_INT 0
12397: PPUSH
12398: PPUSH
// begin ToLua ( displayPowell(); ) ;
12399: LD_STRING displayPowell();
12401: PPUSH
12402: CALL_OW 559
// uc_side := 0 ;
12406: LD_ADDR_OWVAR 20
12410: PUSH
12411: LD_INT 0
12413: ST_TO_ADDR
// uc_nation := 2 ;
12414: LD_ADDR_OWVAR 21
12418: PUSH
12419: LD_INT 2
12421: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12422: LD_ADDR_OWVAR 37
12426: PUSH
12427: LD_INT 14
12429: ST_TO_ADDR
// vc_engine := engine_siberite ;
12430: LD_ADDR_OWVAR 39
12434: PUSH
12435: LD_INT 3
12437: ST_TO_ADDR
// vc_control := control_apeman ;
12438: LD_ADDR_OWVAR 38
12442: PUSH
12443: LD_INT 5
12445: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12446: LD_ADDR_OWVAR 40
12450: PUSH
12451: LD_INT 29
12453: ST_TO_ADDR
// un := CreateVehicle ;
12454: LD_ADDR_VAR 0 2
12458: PUSH
12459: CALL_OW 45
12463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12464: LD_VAR 0 2
12468: PPUSH
12469: LD_INT 1
12471: PPUSH
12472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12476: LD_INT 35
12478: PPUSH
12479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12483: LD_VAR 0 2
12487: PPUSH
12488: LD_INT 22
12490: PUSH
12491: LD_OWVAR 2
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: PPUSH
12500: CALL_OW 69
12504: PPUSH
12505: LD_VAR 0 2
12509: PPUSH
12510: CALL_OW 74
12514: PPUSH
12515: CALL_OW 115
// until IsDead ( un ) ;
12519: LD_VAR 0 2
12523: PPUSH
12524: CALL_OW 301
12528: IFFALSE 12476
// end ;
12530: PPOPN 2
12532: END
// every 0 0$1 trigger StreamModeActive and sStu do
12533: LD_EXP 23
12537: PUSH
12538: LD_EXP 62
12542: AND
12543: IFFALSE 12559
12545: GO 12547
12547: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12548: LD_STRING displayStucuk();
12550: PPUSH
12551: CALL_OW 559
// ResetFog ;
12555: CALL_OW 335
// end ;
12559: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12560: LD_EXP 23
12564: PUSH
12565: LD_EXP 55
12569: AND
12570: IFFALSE 12711
12572: GO 12574
12574: DISABLE
12575: LD_INT 0
12577: PPUSH
12578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: LD_INT 22
12586: PUSH
12587: LD_OWVAR 2
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 21
12598: PUSH
12599: LD_INT 1
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PPUSH
12610: CALL_OW 69
12614: ST_TO_ADDR
// if not tmp then
12615: LD_VAR 0 2
12619: NOT
12620: IFFALSE 12624
// exit ;
12622: GO 12711
// un := tmp [ rand ( 1 , tmp ) ] ;
12624: LD_ADDR_VAR 0 1
12628: PUSH
12629: LD_VAR 0 2
12633: PUSH
12634: LD_INT 1
12636: PPUSH
12637: LD_VAR 0 2
12641: PPUSH
12642: CALL_OW 12
12646: ARRAY
12647: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12648: LD_VAR 0 1
12652: PPUSH
12653: LD_INT 0
12655: PPUSH
12656: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12660: LD_VAR 0 1
12664: PPUSH
12665: LD_OWVAR 3
12669: PUSH
12670: LD_VAR 0 1
12674: DIFF
12675: PPUSH
12676: LD_VAR 0 1
12680: PPUSH
12681: CALL_OW 74
12685: PPUSH
12686: CALL_OW 115
// wait ( 0 0$20 ) ;
12690: LD_INT 700
12692: PPUSH
12693: CALL_OW 67
// SetSide ( un , your_side ) ;
12697: LD_VAR 0 1
12701: PPUSH
12702: LD_OWVAR 2
12706: PPUSH
12707: CALL_OW 235
// end ;
12711: PPOPN 2
12713: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12714: LD_EXP 23
12718: PUSH
12719: LD_EXP 56
12723: AND
12724: IFFALSE 12830
12726: GO 12728
12728: DISABLE
12729: LD_INT 0
12731: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12732: LD_ADDR_VAR 0 1
12736: PUSH
12737: LD_INT 22
12739: PUSH
12740: LD_OWVAR 2
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: PUSH
12749: LD_INT 2
12751: PUSH
12752: LD_INT 30
12754: PUSH
12755: LD_INT 0
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 30
12764: PUSH
12765: LD_INT 1
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PPUSH
12781: CALL_OW 69
12785: ST_TO_ADDR
// if not depot then
12786: LD_VAR 0 1
12790: NOT
12791: IFFALSE 12795
// exit ;
12793: GO 12830
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12795: LD_VAR 0 1
12799: PUSH
12800: LD_INT 1
12802: ARRAY
12803: PPUSH
12804: CALL_OW 250
12808: PPUSH
12809: LD_VAR 0 1
12813: PUSH
12814: LD_INT 1
12816: ARRAY
12817: PPUSH
12818: CALL_OW 251
12822: PPUSH
12823: LD_INT 70
12825: PPUSH
12826: CALL_OW 495
// end ;
12830: PPOPN 1
12832: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12833: LD_EXP 23
12837: PUSH
12838: LD_EXP 57
12842: AND
12843: IFFALSE 13054
12845: GO 12847
12847: DISABLE
12848: LD_INT 0
12850: PPUSH
12851: PPUSH
12852: PPUSH
12853: PPUSH
12854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12855: LD_ADDR_VAR 0 5
12859: PUSH
12860: LD_INT 22
12862: PUSH
12863: LD_OWVAR 2
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 21
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PPUSH
12886: CALL_OW 69
12890: ST_TO_ADDR
// if not tmp then
12891: LD_VAR 0 5
12895: NOT
12896: IFFALSE 12900
// exit ;
12898: GO 13054
// for i in tmp do
12900: LD_ADDR_VAR 0 1
12904: PUSH
12905: LD_VAR 0 5
12909: PUSH
12910: FOR_IN
12911: IFFALSE 13052
// begin d := rand ( 0 , 5 ) ;
12913: LD_ADDR_VAR 0 4
12917: PUSH
12918: LD_INT 0
12920: PPUSH
12921: LD_INT 5
12923: PPUSH
12924: CALL_OW 12
12928: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_VAR 0 1
12938: PPUSH
12939: CALL_OW 250
12943: PPUSH
12944: LD_VAR 0 4
12948: PPUSH
12949: LD_INT 3
12951: PPUSH
12952: LD_INT 12
12954: PPUSH
12955: CALL_OW 12
12959: PPUSH
12960: CALL_OW 272
12964: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12965: LD_ADDR_VAR 0 3
12969: PUSH
12970: LD_VAR 0 1
12974: PPUSH
12975: CALL_OW 251
12979: PPUSH
12980: LD_VAR 0 4
12984: PPUSH
12985: LD_INT 3
12987: PPUSH
12988: LD_INT 12
12990: PPUSH
12991: CALL_OW 12
12995: PPUSH
12996: CALL_OW 273
13000: ST_TO_ADDR
// if ValidHex ( x , y ) then
13001: LD_VAR 0 2
13005: PPUSH
13006: LD_VAR 0 3
13010: PPUSH
13011: CALL_OW 488
13015: IFFALSE 13050
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13017: LD_VAR 0 1
13021: PPUSH
13022: LD_VAR 0 2
13026: PPUSH
13027: LD_VAR 0 3
13031: PPUSH
13032: LD_INT 3
13034: PPUSH
13035: LD_INT 6
13037: PPUSH
13038: CALL_OW 12
13042: PPUSH
13043: LD_INT 1
13045: PPUSH
13046: CALL_OW 483
// end ;
13050: GO 12910
13052: POP
13053: POP
// end ;
13054: PPOPN 5
13056: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13057: LD_EXP 23
13061: PUSH
13062: LD_EXP 58
13066: AND
13067: IFFALSE 13161
13069: GO 13071
13071: DISABLE
13072: LD_INT 0
13074: PPUSH
13075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13076: LD_ADDR_VAR 0 2
13080: PUSH
13081: LD_INT 22
13083: PUSH
13084: LD_OWVAR 2
13088: PUSH
13089: EMPTY
13090: LIST
13091: LIST
13092: PUSH
13093: LD_INT 32
13095: PUSH
13096: LD_INT 1
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 2
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: ST_TO_ADDR
// if not tmp then
13123: LD_VAR 0 2
13127: NOT
13128: IFFALSE 13132
// exit ;
13130: GO 13161
// for i in tmp do
13132: LD_ADDR_VAR 0 1
13136: PUSH
13137: LD_VAR 0 2
13141: PUSH
13142: FOR_IN
13143: IFFALSE 13159
// SetFuel ( i , 0 ) ;
13145: LD_VAR 0 1
13149: PPUSH
13150: LD_INT 0
13152: PPUSH
13153: CALL_OW 240
13157: GO 13142
13159: POP
13160: POP
// end ;
13161: PPOPN 2
13163: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13164: LD_EXP 23
13168: PUSH
13169: LD_EXP 59
13173: AND
13174: IFFALSE 13240
13176: GO 13178
13178: DISABLE
13179: LD_INT 0
13181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13182: LD_ADDR_VAR 0 1
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_OWVAR 2
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 30
13201: PUSH
13202: LD_INT 29
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PPUSH
13213: CALL_OW 69
13217: ST_TO_ADDR
// if not tmp then
13218: LD_VAR 0 1
13222: NOT
13223: IFFALSE 13227
// exit ;
13225: GO 13240
// DestroyUnit ( tmp [ 1 ] ) ;
13227: LD_VAR 0 1
13231: PUSH
13232: LD_INT 1
13234: ARRAY
13235: PPUSH
13236: CALL_OW 65
// end ;
13240: PPOPN 1
13242: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13243: LD_EXP 23
13247: PUSH
13248: LD_EXP 61
13252: AND
13253: IFFALSE 13382
13255: GO 13257
13257: DISABLE
13258: LD_INT 0
13260: PPUSH
// begin uc_side := 0 ;
13261: LD_ADDR_OWVAR 20
13265: PUSH
13266: LD_INT 0
13268: ST_TO_ADDR
// uc_nation := nation_arabian ;
13269: LD_ADDR_OWVAR 21
13273: PUSH
13274: LD_INT 2
13276: ST_TO_ADDR
// hc_gallery :=  ;
13277: LD_ADDR_OWVAR 33
13281: PUSH
13282: LD_STRING 
13284: ST_TO_ADDR
// hc_name :=  ;
13285: LD_ADDR_OWVAR 26
13289: PUSH
13290: LD_STRING 
13292: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13293: LD_INT 1
13295: PPUSH
13296: LD_INT 11
13298: PPUSH
13299: LD_INT 10
13301: PPUSH
13302: CALL_OW 380
// un := CreateHuman ;
13306: LD_ADDR_VAR 0 1
13310: PUSH
13311: CALL_OW 44
13315: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13316: LD_VAR 0 1
13320: PPUSH
13321: LD_INT 1
13323: PPUSH
13324: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13328: LD_INT 35
13330: PPUSH
13331: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13335: LD_VAR 0 1
13339: PPUSH
13340: LD_INT 22
13342: PUSH
13343: LD_OWVAR 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 69
13356: PPUSH
13357: LD_VAR 0 1
13361: PPUSH
13362: CALL_OW 74
13366: PPUSH
13367: CALL_OW 115
// until IsDead ( un ) ;
13371: LD_VAR 0 1
13375: PPUSH
13376: CALL_OW 301
13380: IFFALSE 13328
// end ;
13382: PPOPN 1
13384: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13385: LD_EXP 23
13389: PUSH
13390: LD_EXP 63
13394: AND
13395: IFFALSE 13407
13397: GO 13399
13399: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13400: LD_STRING earthquake(getX(game), 0, 32)
13402: PPUSH
13403: CALL_OW 559
13407: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13408: LD_EXP 23
13412: PUSH
13413: LD_EXP 64
13417: AND
13418: IFFALSE 13509
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
// begin enable ;
13426: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13427: LD_ADDR_VAR 0 1
13431: PUSH
13432: LD_INT 22
13434: PUSH
13435: LD_OWVAR 2
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 21
13446: PUSH
13447: LD_INT 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 33
13456: PUSH
13457: LD_INT 3
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: ST_TO_ADDR
// if not tmp then
13474: LD_VAR 0 1
13478: NOT
13479: IFFALSE 13483
// exit ;
13481: GO 13509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13483: LD_VAR 0 1
13487: PUSH
13488: LD_INT 1
13490: PPUSH
13491: LD_VAR 0 1
13495: PPUSH
13496: CALL_OW 12
13500: ARRAY
13501: PPUSH
13502: LD_INT 1
13504: PPUSH
13505: CALL_OW 234
// end ;
13509: PPOPN 1
13511: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13512: LD_EXP 23
13516: PUSH
13517: LD_EXP 65
13521: AND
13522: IFFALSE 13663
13524: GO 13526
13526: DISABLE
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
13531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13532: LD_ADDR_VAR 0 3
13536: PUSH
13537: LD_INT 22
13539: PUSH
13540: LD_OWVAR 2
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 25
13551: PUSH
13552: LD_INT 1
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PPUSH
13563: CALL_OW 69
13567: ST_TO_ADDR
// if not tmp then
13568: LD_VAR 0 3
13572: NOT
13573: IFFALSE 13577
// exit ;
13575: GO 13663
// un := tmp [ rand ( 1 , tmp ) ] ;
13577: LD_ADDR_VAR 0 2
13581: PUSH
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 1
13589: PPUSH
13590: LD_VAR 0 3
13594: PPUSH
13595: CALL_OW 12
13599: ARRAY
13600: ST_TO_ADDR
// if Crawls ( un ) then
13601: LD_VAR 0 2
13605: PPUSH
13606: CALL_OW 318
13610: IFFALSE 13621
// ComWalk ( un ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13621: LD_VAR 0 2
13625: PPUSH
13626: LD_INT 9
13628: PPUSH
13629: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13633: LD_INT 28
13635: PPUSH
13636: LD_OWVAR 2
13640: PPUSH
13641: LD_INT 2
13643: PPUSH
13644: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13648: LD_INT 29
13650: PPUSH
13651: LD_OWVAR 2
13655: PPUSH
13656: LD_INT 2
13658: PPUSH
13659: CALL_OW 322
// end ;
13663: PPOPN 3
13665: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13666: LD_EXP 23
13670: PUSH
13671: LD_EXP 66
13675: AND
13676: IFFALSE 13787
13678: GO 13680
13680: DISABLE
13681: LD_INT 0
13683: PPUSH
13684: PPUSH
13685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: LD_INT 22
13693: PUSH
13694: LD_OWVAR 2
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 25
13705: PUSH
13706: LD_INT 1
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PPUSH
13717: CALL_OW 69
13721: ST_TO_ADDR
// if not tmp then
13722: LD_VAR 0 3
13726: NOT
13727: IFFALSE 13731
// exit ;
13729: GO 13787
// un := tmp [ rand ( 1 , tmp ) ] ;
13731: LD_ADDR_VAR 0 2
13735: PUSH
13736: LD_VAR 0 3
13740: PUSH
13741: LD_INT 1
13743: PPUSH
13744: LD_VAR 0 3
13748: PPUSH
13749: CALL_OW 12
13753: ARRAY
13754: ST_TO_ADDR
// if Crawls ( un ) then
13755: LD_VAR 0 2
13759: PPUSH
13760: CALL_OW 318
13764: IFFALSE 13775
// ComWalk ( un ) ;
13766: LD_VAR 0 2
13770: PPUSH
13771: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13775: LD_VAR 0 2
13779: PPUSH
13780: LD_INT 8
13782: PPUSH
13783: CALL_OW 336
// end ;
13787: PPOPN 3
13789: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13790: LD_EXP 23
13794: PUSH
13795: LD_EXP 67
13799: AND
13800: IFFALSE 13944
13802: GO 13804
13804: DISABLE
13805: LD_INT 0
13807: PPUSH
13808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13809: LD_ADDR_VAR 0 2
13813: PUSH
13814: LD_INT 22
13816: PUSH
13817: LD_OWVAR 2
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: LD_INT 21
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: LD_INT 34
13841: PUSH
13842: LD_INT 12
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 34
13851: PUSH
13852: LD_INT 51
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 34
13861: PUSH
13862: LD_INT 32
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: LIST
13879: PPUSH
13880: CALL_OW 69
13884: ST_TO_ADDR
// if not tmp then
13885: LD_VAR 0 2
13889: NOT
13890: IFFALSE 13894
// exit ;
13892: GO 13944
// for i in tmp do
13894: LD_ADDR_VAR 0 1
13898: PUSH
13899: LD_VAR 0 2
13903: PUSH
13904: FOR_IN
13905: IFFALSE 13942
// if GetCargo ( i , mat_artifact ) = 0 then
13907: LD_VAR 0 1
13911: PPUSH
13912: LD_INT 4
13914: PPUSH
13915: CALL_OW 289
13919: PUSH
13920: LD_INT 0
13922: EQUAL
13923: IFFALSE 13940
// SetCargo ( i , mat_siberit , 100 ) ;
13925: LD_VAR 0 1
13929: PPUSH
13930: LD_INT 3
13932: PPUSH
13933: LD_INT 100
13935: PPUSH
13936: CALL_OW 290
13940: GO 13904
13942: POP
13943: POP
// end ;
13944: PPOPN 2
13946: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13947: LD_EXP 23
13951: PUSH
13952: LD_EXP 68
13956: AND
13957: IFFALSE 14140
13959: GO 13961
13961: DISABLE
13962: LD_INT 0
13964: PPUSH
13965: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 22
13973: PUSH
13974: LD_OWVAR 2
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 69
13987: ST_TO_ADDR
// if not tmp then
13988: LD_VAR 0 2
13992: NOT
13993: IFFALSE 13997
// exit ;
13995: GO 14140
// for i := 1 to 2 do
13997: LD_ADDR_VAR 0 1
14001: PUSH
14002: DOUBLE
14003: LD_INT 1
14005: DEC
14006: ST_TO_ADDR
14007: LD_INT 2
14009: PUSH
14010: FOR_TO
14011: IFFALSE 14138
// begin uc_side := your_side ;
14013: LD_ADDR_OWVAR 20
14017: PUSH
14018: LD_OWVAR 2
14022: ST_TO_ADDR
// uc_nation := nation_american ;
14023: LD_ADDR_OWVAR 21
14027: PUSH
14028: LD_INT 1
14030: ST_TO_ADDR
// vc_chassis := us_morphling ;
14031: LD_ADDR_OWVAR 37
14035: PUSH
14036: LD_INT 5
14038: ST_TO_ADDR
// vc_engine := engine_siberite ;
14039: LD_ADDR_OWVAR 39
14043: PUSH
14044: LD_INT 3
14046: ST_TO_ADDR
// vc_control := control_computer ;
14047: LD_ADDR_OWVAR 38
14051: PUSH
14052: LD_INT 3
14054: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14055: LD_ADDR_OWVAR 40
14059: PUSH
14060: LD_INT 10
14062: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14063: LD_VAR 0 2
14067: PUSH
14068: LD_INT 1
14070: ARRAY
14071: PPUSH
14072: CALL_OW 310
14076: NOT
14077: IFFALSE 14124
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14079: CALL_OW 45
14083: PPUSH
14084: LD_VAR 0 2
14088: PUSH
14089: LD_INT 1
14091: ARRAY
14092: PPUSH
14093: CALL_OW 250
14097: PPUSH
14098: LD_VAR 0 2
14102: PUSH
14103: LD_INT 1
14105: ARRAY
14106: PPUSH
14107: CALL_OW 251
14111: PPUSH
14112: LD_INT 12
14114: PPUSH
14115: LD_INT 1
14117: PPUSH
14118: CALL_OW 50
14122: GO 14136
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14124: CALL_OW 45
14128: PPUSH
14129: LD_INT 1
14131: PPUSH
14132: CALL_OW 51
// end ;
14136: GO 14010
14138: POP
14139: POP
// end ;
14140: PPOPN 2
14142: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14143: LD_EXP 23
14147: PUSH
14148: LD_EXP 69
14152: AND
14153: IFFALSE 14375
14155: GO 14157
14157: DISABLE
14158: LD_INT 0
14160: PPUSH
14161: PPUSH
14162: PPUSH
14163: PPUSH
14164: PPUSH
14165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14166: LD_ADDR_VAR 0 6
14170: PUSH
14171: LD_INT 22
14173: PUSH
14174: LD_OWVAR 2
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 21
14185: PUSH
14186: LD_INT 1
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 3
14195: PUSH
14196: LD_INT 23
14198: PUSH
14199: LD_INT 0
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: PPUSH
14215: CALL_OW 69
14219: ST_TO_ADDR
// if not tmp then
14220: LD_VAR 0 6
14224: NOT
14225: IFFALSE 14229
// exit ;
14227: GO 14375
// s1 := rand ( 1 , 4 ) ;
14229: LD_ADDR_VAR 0 2
14233: PUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_INT 4
14239: PPUSH
14240: CALL_OW 12
14244: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14245: LD_ADDR_VAR 0 4
14249: PUSH
14250: LD_VAR 0 6
14254: PUSH
14255: LD_INT 1
14257: ARRAY
14258: PPUSH
14259: LD_VAR 0 2
14263: PPUSH
14264: CALL_OW 259
14268: ST_TO_ADDR
// if s1 = 1 then
14269: LD_VAR 0 2
14273: PUSH
14274: LD_INT 1
14276: EQUAL
14277: IFFALSE 14297
// s2 := rand ( 2 , 4 ) else
14279: LD_ADDR_VAR 0 3
14283: PUSH
14284: LD_INT 2
14286: PPUSH
14287: LD_INT 4
14289: PPUSH
14290: CALL_OW 12
14294: ST_TO_ADDR
14295: GO 14305
// s2 := 1 ;
14297: LD_ADDR_VAR 0 3
14301: PUSH
14302: LD_INT 1
14304: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14305: LD_ADDR_VAR 0 5
14309: PUSH
14310: LD_VAR 0 6
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: PPUSH
14319: LD_VAR 0 3
14323: PPUSH
14324: CALL_OW 259
14328: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14329: LD_VAR 0 6
14333: PUSH
14334: LD_INT 1
14336: ARRAY
14337: PPUSH
14338: LD_VAR 0 2
14342: PPUSH
14343: LD_VAR 0 5
14347: PPUSH
14348: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14352: LD_VAR 0 6
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: LD_VAR 0 3
14365: PPUSH
14366: LD_VAR 0 4
14370: PPUSH
14371: CALL_OW 237
// end ;
14375: PPOPN 6
14377: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14378: LD_EXP 23
14382: PUSH
14383: LD_EXP 70
14387: AND
14388: IFFALSE 14467
14390: GO 14392
14392: DISABLE
14393: LD_INT 0
14395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14396: LD_ADDR_VAR 0 1
14400: PUSH
14401: LD_INT 22
14403: PUSH
14404: LD_OWVAR 2
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 30
14415: PUSH
14416: LD_INT 3
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PPUSH
14427: CALL_OW 69
14431: ST_TO_ADDR
// if not tmp then
14432: LD_VAR 0 1
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14467
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14441: LD_VAR 0 1
14445: PUSH
14446: LD_INT 1
14448: PPUSH
14449: LD_VAR 0 1
14453: PPUSH
14454: CALL_OW 12
14458: ARRAY
14459: PPUSH
14460: LD_INT 1
14462: PPUSH
14463: CALL_OW 234
// end ;
14467: PPOPN 1
14469: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14470: LD_EXP 23
14474: PUSH
14475: LD_EXP 71
14479: AND
14480: IFFALSE 14592
14482: GO 14484
14484: DISABLE
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14489: LD_ADDR_VAR 0 2
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_OWVAR 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: LD_INT 30
14511: PUSH
14512: LD_INT 27
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 30
14521: PUSH
14522: LD_INT 26
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 30
14531: PUSH
14532: LD_INT 28
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: ST_TO_ADDR
// if not tmp then
14554: LD_VAR 0 2
14558: NOT
14559: IFFALSE 14563
// exit ;
14561: GO 14592
// for i in tmp do
14563: LD_ADDR_VAR 0 1
14567: PUSH
14568: LD_VAR 0 2
14572: PUSH
14573: FOR_IN
14574: IFFALSE 14590
// SetLives ( i , 1 ) ;
14576: LD_VAR 0 1
14580: PPUSH
14581: LD_INT 1
14583: PPUSH
14584: CALL_OW 234
14588: GO 14573
14590: POP
14591: POP
// end ;
14592: PPOPN 2
14594: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14595: LD_EXP 23
14599: PUSH
14600: LD_EXP 72
14604: AND
14605: IFFALSE 14879
14607: GO 14609
14609: DISABLE
14610: LD_INT 0
14612: PPUSH
14613: PPUSH
14614: PPUSH
// begin i := rand ( 1 , 7 ) ;
14615: LD_ADDR_VAR 0 1
14619: PUSH
14620: LD_INT 1
14622: PPUSH
14623: LD_INT 7
14625: PPUSH
14626: CALL_OW 12
14630: ST_TO_ADDR
// case i of 1 :
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 1
14638: DOUBLE
14639: EQUAL
14640: IFTRUE 14644
14642: GO 14654
14644: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14645: LD_STRING earthquake(getX(game), 0, 32)
14647: PPUSH
14648: CALL_OW 559
14652: GO 14879
14654: LD_INT 2
14656: DOUBLE
14657: EQUAL
14658: IFTRUE 14662
14660: GO 14676
14662: POP
// begin ToLua ( displayStucuk(); ) ;
14663: LD_STRING displayStucuk();
14665: PPUSH
14666: CALL_OW 559
// ResetFog ;
14670: CALL_OW 335
// end ; 3 :
14674: GO 14879
14676: LD_INT 3
14678: DOUBLE
14679: EQUAL
14680: IFTRUE 14684
14682: GO 14788
14684: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14685: LD_ADDR_VAR 0 2
14689: PUSH
14690: LD_INT 22
14692: PUSH
14693: LD_OWVAR 2
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 25
14704: PUSH
14705: LD_INT 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 69
14720: ST_TO_ADDR
// if not tmp then
14721: LD_VAR 0 2
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 14879
// un := tmp [ rand ( 1 , tmp ) ] ;
14730: LD_ADDR_VAR 0 3
14734: PUSH
14735: LD_VAR 0 2
14739: PUSH
14740: LD_INT 1
14742: PPUSH
14743: LD_VAR 0 2
14747: PPUSH
14748: CALL_OW 12
14752: ARRAY
14753: ST_TO_ADDR
// if Crawls ( un ) then
14754: LD_VAR 0 3
14758: PPUSH
14759: CALL_OW 318
14763: IFFALSE 14774
// ComWalk ( un ) ;
14765: LD_VAR 0 3
14769: PPUSH
14770: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14774: LD_VAR 0 3
14778: PPUSH
14779: LD_INT 8
14781: PPUSH
14782: CALL_OW 336
// end ; 4 :
14786: GO 14879
14788: LD_INT 4
14790: DOUBLE
14791: EQUAL
14792: IFTRUE 14796
14794: GO 14857
14796: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14797: LD_ADDR_VAR 0 2
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_OWVAR 2
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 30
14816: PUSH
14817: LD_INT 29
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 69
14832: ST_TO_ADDR
// if not tmp then
14833: LD_VAR 0 2
14837: NOT
14838: IFFALSE 14842
// exit ;
14840: GO 14879
// DestroyUnit ( tmp [ 1 ] ) ;
14842: LD_VAR 0 2
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: PPUSH
14851: CALL_OW 65
// end ; 5 .. 7 :
14855: GO 14879
14857: LD_INT 5
14859: DOUBLE
14860: GREATEREQUAL
14861: IFFALSE 14869
14863: LD_INT 7
14865: DOUBLE
14866: LESSEQUAL
14867: IFTRUE 14871
14869: GO 14878
14871: POP
// StreamSibBomb ; end ;
14872: CALL 11129 0 0
14876: GO 14879
14878: POP
// end ;
14879: PPOPN 3
14881: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14882: LD_EXP 23
14886: PUSH
14887: LD_EXP 73
14891: AND
14892: IFFALSE 15048
14894: GO 14896
14896: DISABLE
14897: LD_INT 0
14899: PPUSH
14900: PPUSH
14901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_INT 81
14909: PUSH
14910: LD_OWVAR 2
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: LD_INT 21
14924: PUSH
14925: LD_INT 1
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 21
14934: PUSH
14935: LD_INT 2
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: LIST
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PPUSH
14951: CALL_OW 69
14955: ST_TO_ADDR
// if not tmp then
14956: LD_VAR 0 2
14960: NOT
14961: IFFALSE 14965
// exit ;
14963: GO 15048
// p := 0 ;
14965: LD_ADDR_VAR 0 3
14969: PUSH
14970: LD_INT 0
14972: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14973: LD_INT 35
14975: PPUSH
14976: CALL_OW 67
// p := p + 1 ;
14980: LD_ADDR_VAR 0 3
14984: PUSH
14985: LD_VAR 0 3
14989: PUSH
14990: LD_INT 1
14992: PLUS
14993: ST_TO_ADDR
// for i in tmp do
14994: LD_ADDR_VAR 0 1
14998: PUSH
14999: LD_VAR 0 2
15003: PUSH
15004: FOR_IN
15005: IFFALSE 15036
// if GetLives ( i ) < 1000 then
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 256
15016: PUSH
15017: LD_INT 1000
15019: LESS
15020: IFFALSE 15034
// SetLives ( i , 1000 ) ;
15022: LD_VAR 0 1
15026: PPUSH
15027: LD_INT 1000
15029: PPUSH
15030: CALL_OW 234
15034: GO 15004
15036: POP
15037: POP
// until p > 20 ;
15038: LD_VAR 0 3
15042: PUSH
15043: LD_INT 20
15045: GREATER
15046: IFFALSE 14973
// end ;
15048: PPOPN 3
15050: END
// every 0 0$1 trigger StreamModeActive and sTime do
15051: LD_EXP 23
15055: PUSH
15056: LD_EXP 74
15060: AND
15061: IFFALSE 15096
15063: GO 15065
15065: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15066: LD_INT 28
15068: PPUSH
15069: LD_OWVAR 2
15073: PPUSH
15074: LD_INT 2
15076: PPUSH
15077: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15081: LD_INT 30
15083: PPUSH
15084: LD_OWVAR 2
15088: PPUSH
15089: LD_INT 2
15091: PPUSH
15092: CALL_OW 322
// end ;
15096: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15097: LD_EXP 23
15101: PUSH
15102: LD_EXP 75
15106: AND
15107: IFFALSE 15228
15109: GO 15111
15111: DISABLE
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15116: LD_ADDR_VAR 0 2
15120: PUSH
15121: LD_INT 22
15123: PUSH
15124: LD_OWVAR 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PUSH
15133: LD_INT 21
15135: PUSH
15136: LD_INT 1
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: PUSH
15143: LD_INT 3
15145: PUSH
15146: LD_INT 23
15148: PUSH
15149: LD_INT 0
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 69
15169: ST_TO_ADDR
// if not tmp then
15170: LD_VAR 0 2
15174: NOT
15175: IFFALSE 15179
// exit ;
15177: GO 15228
// for i in tmp do
15179: LD_ADDR_VAR 0 1
15183: PUSH
15184: LD_VAR 0 2
15188: PUSH
15189: FOR_IN
15190: IFFALSE 15226
// begin if Crawls ( i ) then
15192: LD_VAR 0 1
15196: PPUSH
15197: CALL_OW 318
15201: IFFALSE 15212
// ComWalk ( i ) ;
15203: LD_VAR 0 1
15207: PPUSH
15208: CALL_OW 138
// SetClass ( i , 2 ) ;
15212: LD_VAR 0 1
15216: PPUSH
15217: LD_INT 2
15219: PPUSH
15220: CALL_OW 336
// end ;
15224: GO 15189
15226: POP
15227: POP
// end ;
15228: PPOPN 2
15230: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15231: LD_EXP 23
15235: PUSH
15236: LD_EXP 76
15240: AND
15241: IFFALSE 15522
15243: GO 15245
15245: DISABLE
15246: LD_INT 0
15248: PPUSH
15249: PPUSH
15250: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15251: LD_OWVAR 2
15255: PPUSH
15256: LD_INT 9
15258: PPUSH
15259: LD_INT 1
15261: PPUSH
15262: LD_INT 1
15264: PPUSH
15265: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15269: LD_INT 9
15271: PPUSH
15272: LD_OWVAR 2
15276: PPUSH
15277: CALL_OW 343
// uc_side := 9 ;
15281: LD_ADDR_OWVAR 20
15285: PUSH
15286: LD_INT 9
15288: ST_TO_ADDR
// uc_nation := 2 ;
15289: LD_ADDR_OWVAR 21
15293: PUSH
15294: LD_INT 2
15296: ST_TO_ADDR
// hc_name := Dark Warrior ;
15297: LD_ADDR_OWVAR 26
15301: PUSH
15302: LD_STRING Dark Warrior
15304: ST_TO_ADDR
// hc_gallery :=  ;
15305: LD_ADDR_OWVAR 33
15309: PUSH
15310: LD_STRING 
15312: ST_TO_ADDR
// hc_noskilllimit := true ;
15313: LD_ADDR_OWVAR 76
15317: PUSH
15318: LD_INT 1
15320: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15321: LD_ADDR_OWVAR 31
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 30
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 30
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: ST_TO_ADDR
// un := CreateHuman ;
15344: LD_ADDR_VAR 0 3
15348: PUSH
15349: CALL_OW 44
15353: ST_TO_ADDR
// hc_noskilllimit := false ;
15354: LD_ADDR_OWVAR 76
15358: PUSH
15359: LD_INT 0
15361: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15362: LD_VAR 0 3
15366: PPUSH
15367: LD_INT 1
15369: PPUSH
15370: CALL_OW 51
// p := 0 ;
15374: LD_ADDR_VAR 0 2
15378: PUSH
15379: LD_INT 0
15381: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15382: LD_INT 35
15384: PPUSH
15385: CALL_OW 67
// p := p + 1 ;
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_VAR 0 2
15398: PUSH
15399: LD_INT 1
15401: PLUS
15402: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15403: LD_VAR 0 3
15407: PPUSH
15408: CALL_OW 256
15412: PUSH
15413: LD_INT 1000
15415: LESS
15416: IFFALSE 15430
// SetLives ( un , 1000 ) ;
15418: LD_VAR 0 3
15422: PPUSH
15423: LD_INT 1000
15425: PPUSH
15426: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15430: LD_VAR 0 3
15434: PPUSH
15435: LD_INT 81
15437: PUSH
15438: LD_OWVAR 2
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 91
15449: PUSH
15450: LD_VAR 0 3
15454: PUSH
15455: LD_INT 30
15457: PUSH
15458: EMPTY
15459: LIST
15460: LIST
15461: LIST
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: PPUSH
15472: LD_VAR 0 3
15476: PPUSH
15477: CALL_OW 74
15481: PPUSH
15482: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15486: LD_VAR 0 2
15490: PUSH
15491: LD_INT 60
15493: GREATER
15494: PUSH
15495: LD_VAR 0 3
15499: PPUSH
15500: CALL_OW 301
15504: OR
15505: IFFALSE 15382
// if un then
15507: LD_VAR 0 3
15511: IFFALSE 15522
// RemoveUnit ( un ) ;
15513: LD_VAR 0 3
15517: PPUSH
15518: CALL_OW 64
// end ;
15522: PPOPN 3
15524: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
15525: LD_INT 0
15527: PPUSH
15528: PPUSH
15529: PPUSH
15530: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15531: LD_ADDR_VAR 0 4
15535: PUSH
15536: LD_INT 22
15538: PUSH
15539: LD_OWVAR 2
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: LD_INT 30
15553: PUSH
15554: LD_INT 0
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: PUSH
15561: LD_INT 30
15563: PUSH
15564: LD_INT 1
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PPUSH
15580: CALL_OW 69
15584: ST_TO_ADDR
// if not tmp then
15585: LD_VAR 0 4
15589: NOT
15590: IFFALSE 15594
// exit ;
15592: GO 15653
// for i in tmp do
15594: LD_ADDR_VAR 0 2
15598: PUSH
15599: LD_VAR 0 4
15603: PUSH
15604: FOR_IN
15605: IFFALSE 15651
// for j = 1 to 3 do
15607: LD_ADDR_VAR 0 3
15611: PUSH
15612: DOUBLE
15613: LD_INT 1
15615: DEC
15616: ST_TO_ADDR
15617: LD_INT 3
15619: PUSH
15620: FOR_TO
15621: IFFALSE 15647
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
15623: LD_VAR 0 2
15627: PPUSH
15628: CALL_OW 274
15632: PPUSH
15633: LD_VAR 0 3
15637: PPUSH
15638: LD_INT 99999
15640: PPUSH
15641: CALL_OW 277
15645: GO 15620
15647: POP
15648: POP
15649: GO 15604
15651: POP
15652: POP
// end ;
15653: LD_VAR 0 1
15657: RET
// export function hHackSetLevel10 ; var i , j ; begin
15658: LD_INT 0
15660: PPUSH
15661: PPUSH
15662: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15663: LD_ADDR_VAR 0 2
15667: PUSH
15668: LD_INT 21
15670: PUSH
15671: LD_INT 1
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: PPUSH
15678: CALL_OW 69
15682: PUSH
15683: FOR_IN
15684: IFFALSE 15736
// if IsSelected ( i ) then
15686: LD_VAR 0 2
15690: PPUSH
15691: CALL_OW 306
15695: IFFALSE 15734
// begin for j := 1 to 4 do
15697: LD_ADDR_VAR 0 3
15701: PUSH
15702: DOUBLE
15703: LD_INT 1
15705: DEC
15706: ST_TO_ADDR
15707: LD_INT 4
15709: PUSH
15710: FOR_TO
15711: IFFALSE 15732
// SetSkill ( i , j , 10 ) ;
15713: LD_VAR 0 2
15717: PPUSH
15718: LD_VAR 0 3
15722: PPUSH
15723: LD_INT 10
15725: PPUSH
15726: CALL_OW 237
15730: GO 15710
15732: POP
15733: POP
// end ;
15734: GO 15683
15736: POP
15737: POP
// end ;
15738: LD_VAR 0 1
15742: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
15743: LD_INT 0
15745: PPUSH
15746: PPUSH
15747: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
15748: LD_ADDR_VAR 0 2
15752: PUSH
15753: LD_INT 22
15755: PUSH
15756: LD_OWVAR 2
15760: PUSH
15761: EMPTY
15762: LIST
15763: LIST
15764: PUSH
15765: LD_INT 21
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PPUSH
15779: CALL_OW 69
15783: PUSH
15784: FOR_IN
15785: IFFALSE 15826
// begin for j := 1 to 4 do
15787: LD_ADDR_VAR 0 3
15791: PUSH
15792: DOUBLE
15793: LD_INT 1
15795: DEC
15796: ST_TO_ADDR
15797: LD_INT 4
15799: PUSH
15800: FOR_TO
15801: IFFALSE 15822
// SetSkill ( i , j , 10 ) ;
15803: LD_VAR 0 2
15807: PPUSH
15808: LD_VAR 0 3
15812: PPUSH
15813: LD_INT 10
15815: PPUSH
15816: CALL_OW 237
15820: GO 15800
15822: POP
15823: POP
// end ;
15824: GO 15784
15826: POP
15827: POP
// end ;
15828: LD_VAR 0 1
15832: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
15833: LD_INT 0
15835: PPUSH
// uc_side := your_side ;
15836: LD_ADDR_OWVAR 20
15840: PUSH
15841: LD_OWVAR 2
15845: ST_TO_ADDR
// uc_nation := nation ;
15846: LD_ADDR_OWVAR 21
15850: PUSH
15851: LD_VAR 0 1
15855: ST_TO_ADDR
// InitHc ;
15856: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
15860: LD_INT 0
15862: PPUSH
15863: LD_VAR 0 2
15867: PPUSH
15868: LD_VAR 0 3
15872: PPUSH
15873: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15877: CALL_OW 44
15881: PPUSH
15882: LD_INT 1
15884: PPUSH
15885: CALL_OW 51
// end ;
15889: LD_VAR 0 4
15893: RET
// export function hHackSpawnVehicle ; begin
15894: LD_INT 0
15896: PPUSH
// uc_side := your_side ;
15897: LD_ADDR_OWVAR 20
15901: PUSH
15902: LD_OWVAR 2
15906: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
15907: LD_ADDR_OWVAR 21
15911: PUSH
15912: LD_INT 1
15914: PPUSH
15915: LD_INT 3
15917: PPUSH
15918: CALL_OW 12
15922: ST_TO_ADDR
// InitVc ;
15923: CALL_OW 20
// case uc_nation of 1 :
15927: LD_OWVAR 21
15931: PUSH
15932: LD_INT 1
15934: DOUBLE
15935: EQUAL
15936: IFTRUE 15940
15938: GO 16084
15940: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
15941: LD_ADDR_OWVAR 37
15945: PUSH
15946: LD_INT 1
15948: PUSH
15949: LD_INT 2
15951: PUSH
15952: LD_INT 3
15954: PUSH
15955: LD_INT 4
15957: PUSH
15958: LD_INT 5
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: PUSH
15968: LD_INT 1
15970: PPUSH
15971: LD_INT 5
15973: PPUSH
15974: CALL_OW 12
15978: ARRAY
15979: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
15980: LD_ADDR_OWVAR 39
15984: PUSH
15985: LD_INT 1
15987: PPUSH
15988: LD_INT 3
15990: PPUSH
15991: CALL_OW 12
15995: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
15996: LD_ADDR_OWVAR 38
16000: PUSH
16001: LD_INT 1
16003: PUSH
16004: LD_INT 2
16006: PUSH
16007: LD_INT 3
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 1
16017: PPUSH
16018: LD_INT 3
16020: PPUSH
16021: CALL_OW 12
16025: ARRAY
16026: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
16027: LD_ADDR_OWVAR 40
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: LD_INT 4
16037: PUSH
16038: LD_INT 5
16040: PUSH
16041: LD_INT 3
16043: PUSH
16044: LD_INT 7
16046: PUSH
16047: LD_INT 8
16049: PUSH
16050: LD_INT 9
16052: PUSH
16053: LD_INT 10
16055: PUSH
16056: LD_INT 6
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: LIST
16063: LIST
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 1
16072: PPUSH
16073: LD_INT 9
16075: PPUSH
16076: CALL_OW 12
16080: ARRAY
16081: ST_TO_ADDR
// end ; 2 :
16082: GO 16349
16084: LD_INT 2
16086: DOUBLE
16087: EQUAL
16088: IFTRUE 16092
16090: GO 16216
16092: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
16093: LD_ADDR_OWVAR 37
16097: PUSH
16098: LD_INT 11
16100: PUSH
16101: LD_INT 12
16103: PUSH
16104: LD_INT 13
16106: PUSH
16107: LD_INT 14
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: PUSH
16116: LD_INT 1
16118: PPUSH
16119: LD_INT 4
16121: PPUSH
16122: CALL_OW 12
16126: ARRAY
16127: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16128: LD_ADDR_OWVAR 39
16132: PUSH
16133: LD_INT 1
16135: PPUSH
16136: LD_INT 3
16138: PPUSH
16139: CALL_OW 12
16143: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
16144: LD_ADDR_OWVAR 38
16148: PUSH
16149: LD_INT 1
16151: PUSH
16152: LD_INT 2
16154: PUSH
16155: LD_INT 5
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 1
16165: PPUSH
16166: LD_INT 3
16168: PPUSH
16169: CALL_OW 12
16173: ARRAY
16174: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
16175: LD_ADDR_OWVAR 40
16179: PUSH
16180: LD_INT 24
16182: PUSH
16183: LD_INT 26
16185: PUSH
16186: LD_INT 27
16188: PUSH
16189: LD_INT 28
16191: PUSH
16192: LD_INT 29
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: PUSH
16202: LD_INT 1
16204: PPUSH
16205: LD_INT 5
16207: PPUSH
16208: CALL_OW 12
16212: ARRAY
16213: ST_TO_ADDR
// end ; 3 :
16214: GO 16349
16216: LD_INT 3
16218: DOUBLE
16219: EQUAL
16220: IFTRUE 16224
16222: GO 16348
16224: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
16225: LD_ADDR_OWVAR 37
16229: PUSH
16230: LD_INT 21
16232: PUSH
16233: LD_INT 23
16235: PUSH
16236: LD_INT 22
16238: PUSH
16239: LD_INT 24
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: PUSH
16248: LD_INT 1
16250: PPUSH
16251: LD_INT 4
16253: PPUSH
16254: CALL_OW 12
16258: ARRAY
16259: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
16260: LD_ADDR_OWVAR 39
16264: PUSH
16265: LD_INT 1
16267: PPUSH
16268: LD_INT 3
16270: PPUSH
16271: CALL_OW 12
16275: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
16276: LD_ADDR_OWVAR 38
16280: PUSH
16281: LD_INT 1
16283: PUSH
16284: LD_INT 3
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PUSH
16291: LD_INT 1
16293: PPUSH
16294: LD_INT 2
16296: PPUSH
16297: CALL_OW 12
16301: ARRAY
16302: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
16303: LD_ADDR_OWVAR 40
16307: PUSH
16308: LD_INT 42
16310: PUSH
16311: LD_INT 43
16313: PUSH
16314: LD_INT 44
16316: PUSH
16317: LD_INT 46
16319: PUSH
16320: LD_INT 48
16322: PUSH
16323: LD_INT 47
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 1
16336: PPUSH
16337: LD_INT 6
16339: PPUSH
16340: CALL_OW 12
16344: ARRAY
16345: ST_TO_ADDR
// end ; end ;
16346: GO 16349
16348: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16349: CALL_OW 45
16353: PPUSH
16354: LD_INT 1
16356: PPUSH
16357: CALL_OW 51
// end ;
16361: LD_VAR 0 1
16365: RET
// export hInvincible ; every 1 do
16366: GO 16368
16368: DISABLE
// hInvincible := [ ] ;
16369: LD_ADDR_EXP 77
16373: PUSH
16374: EMPTY
16375: ST_TO_ADDR
16376: END
// every 10 do var i ;
16377: GO 16379
16379: DISABLE
16380: LD_INT 0
16382: PPUSH
// begin enable ;
16383: ENABLE
// if not hInvincible then
16384: LD_EXP 77
16388: NOT
16389: IFFALSE 16393
// exit ;
16391: GO 16437
// for i in hInvincible do
16393: LD_ADDR_VAR 0 1
16397: PUSH
16398: LD_EXP 77
16402: PUSH
16403: FOR_IN
16404: IFFALSE 16435
// if GetLives ( i ) < 1000 then
16406: LD_VAR 0 1
16410: PPUSH
16411: CALL_OW 256
16415: PUSH
16416: LD_INT 1000
16418: LESS
16419: IFFALSE 16433
// SetLives ( i , 1000 ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 1000
16428: PPUSH
16429: CALL_OW 234
16433: GO 16403
16435: POP
16436: POP
// end ;
16437: PPOPN 1
16439: END
// export function hHackInvincible ; var i ; begin
16440: LD_INT 0
16442: PPUSH
16443: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
16444: LD_ADDR_VAR 0 2
16448: PUSH
16449: LD_INT 2
16451: PUSH
16452: LD_INT 21
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 21
16464: PUSH
16465: LD_INT 2
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 69
16481: PUSH
16482: FOR_IN
16483: IFFALSE 16544
// if IsSelected ( i ) then
16485: LD_VAR 0 2
16489: PPUSH
16490: CALL_OW 306
16494: IFFALSE 16542
// begin if i in hInvincible then
16496: LD_VAR 0 2
16500: PUSH
16501: LD_EXP 77
16505: IN
16506: IFFALSE 16526
// hInvincible := hInvincible diff i else
16508: LD_ADDR_EXP 77
16512: PUSH
16513: LD_EXP 77
16517: PUSH
16518: LD_VAR 0 2
16522: DIFF
16523: ST_TO_ADDR
16524: GO 16542
// hInvincible := hInvincible union i ;
16526: LD_ADDR_EXP 77
16530: PUSH
16531: LD_EXP 77
16535: PUSH
16536: LD_VAR 0 2
16540: UNION
16541: ST_TO_ADDR
// end ;
16542: GO 16482
16544: POP
16545: POP
// end ;
16546: LD_VAR 0 1
16550: RET
// export function hHackInvisible ; var i , j ; begin
16551: LD_INT 0
16553: PPUSH
16554: PPUSH
16555: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 21
16563: PUSH
16564: LD_INT 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: PUSH
16576: FOR_IN
16577: IFFALSE 16601
// if IsSelected ( i ) then
16579: LD_VAR 0 2
16583: PPUSH
16584: CALL_OW 306
16588: IFFALSE 16599
// ComForceInvisible ( i ) ;
16590: LD_VAR 0 2
16594: PPUSH
16595: CALL_OW 496
16599: GO 16576
16601: POP
16602: POP
// end ;
16603: LD_VAR 0 1
16607: RET
// export function hHackChangeYourSide ; begin
16608: LD_INT 0
16610: PPUSH
// if your_side = 8 then
16611: LD_OWVAR 2
16615: PUSH
16616: LD_INT 8
16618: EQUAL
16619: IFFALSE 16631
// your_side := 0 else
16621: LD_ADDR_OWVAR 2
16625: PUSH
16626: LD_INT 0
16628: ST_TO_ADDR
16629: GO 16645
// your_side := your_side + 1 ;
16631: LD_ADDR_OWVAR 2
16635: PUSH
16636: LD_OWVAR 2
16640: PUSH
16641: LD_INT 1
16643: PLUS
16644: ST_TO_ADDR
// end ;
16645: LD_VAR 0 1
16649: RET
// export function hHackChangeUnitSide ; var i , j ; begin
16650: LD_INT 0
16652: PPUSH
16653: PPUSH
16654: PPUSH
// for i in all_units do
16655: LD_ADDR_VAR 0 2
16659: PUSH
16660: LD_OWVAR 3
16664: PUSH
16665: FOR_IN
16666: IFFALSE 16744
// if IsSelected ( i ) then
16668: LD_VAR 0 2
16672: PPUSH
16673: CALL_OW 306
16677: IFFALSE 16742
// begin j := GetSide ( i ) ;
16679: LD_ADDR_VAR 0 3
16683: PUSH
16684: LD_VAR 0 2
16688: PPUSH
16689: CALL_OW 255
16693: ST_TO_ADDR
// if j = 8 then
16694: LD_VAR 0 3
16698: PUSH
16699: LD_INT 8
16701: EQUAL
16702: IFFALSE 16714
// j := 0 else
16704: LD_ADDR_VAR 0 3
16708: PUSH
16709: LD_INT 0
16711: ST_TO_ADDR
16712: GO 16728
// j := j + 1 ;
16714: LD_ADDR_VAR 0 3
16718: PUSH
16719: LD_VAR 0 3
16723: PUSH
16724: LD_INT 1
16726: PLUS
16727: ST_TO_ADDR
// SetSide ( i , j ) ;
16728: LD_VAR 0 2
16732: PPUSH
16733: LD_VAR 0 3
16737: PPUSH
16738: CALL_OW 235
// end ;
16742: GO 16665
16744: POP
16745: POP
// end ;
16746: LD_VAR 0 1
16750: RET
// export function hHackFog ; begin
16751: LD_INT 0
16753: PPUSH
// FogOff ( true ) ;
16754: LD_INT 1
16756: PPUSH
16757: CALL_OW 344
// end ;
16761: LD_VAR 0 1
16765: RET
// export function hHackApeman ; begin
16766: LD_INT 0
16768: PPUSH
// uc_side := your_side ;
16769: LD_ADDR_OWVAR 20
16773: PUSH
16774: LD_OWVAR 2
16778: ST_TO_ADDR
// uc_nation := 0 ;
16779: LD_ADDR_OWVAR 21
16783: PUSH
16784: LD_INT 0
16786: ST_TO_ADDR
// hc_name :=  ;
16787: LD_ADDR_OWVAR 26
16791: PUSH
16792: LD_STRING 
16794: ST_TO_ADDR
// hc_gallery :=  ;
16795: LD_ADDR_OWVAR 33
16799: PUSH
16800: LD_STRING 
16802: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
16803: LD_ADDR_OWVAR 31
16807: PUSH
16808: LD_INT 0
16810: PUSH
16811: LD_INT 0
16813: PUSH
16814: LD_INT 0
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: ST_TO_ADDR
// hc_class := class_apeman ;
16826: LD_ADDR_OWVAR 28
16830: PUSH
16831: LD_INT 12
16833: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
16834: CALL_OW 44
16838: PPUSH
16839: LD_INT 1
16841: PPUSH
16842: CALL_OW 51
// end ;
16846: LD_VAR 0 1
16850: RET
// export function hHackBoom ; begin
16851: LD_INT 0
16853: PPUSH
// uc_side := your_side ;
16854: LD_ADDR_OWVAR 20
16858: PUSH
16859: LD_OWVAR 2
16863: ST_TO_ADDR
// uc_nation := 1 ;
16864: LD_ADDR_OWVAR 21
16868: PUSH
16869: LD_INT 1
16871: ST_TO_ADDR
// vc_chassis := us_morphling ;
16872: LD_ADDR_OWVAR 37
16876: PUSH
16877: LD_INT 5
16879: ST_TO_ADDR
// vc_engine := engine_siberite ;
16880: LD_ADDR_OWVAR 39
16884: PUSH
16885: LD_INT 3
16887: ST_TO_ADDR
// vc_control := control_computer ;
16888: LD_ADDR_OWVAR 38
16892: PUSH
16893: LD_INT 3
16895: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
16896: LD_ADDR_OWVAR 40
16900: PUSH
16901: LD_INT 8
16903: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16904: CALL_OW 45
16908: PPUSH
16909: LD_INT 1
16911: PPUSH
16912: CALL_OW 51
// end ;
16916: LD_VAR 0 1
16920: RET
