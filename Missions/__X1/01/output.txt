// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 2 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 2
  11: ST_TO_ADDR
// music_class := 5 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 5
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3599 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3446 0 0
// PrepareSheikGroup ;
 123: CALL 3084 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2996 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3847 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-3
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 855: LD_INT 2
 857: PPUSH
 858: LD_INT 71
 860: PPUSH
 861: LD_INT 84
 863: PPUSH
 864: CALL_OW 428
 868: PPUSH
 869: CALL_OW 292
 873: PUSH
 874: LD_EXP 19
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 939
 889: GO 891
 891: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 892: LD_EXP 1
 896: PPUSH
 897: LD_STRING DH-spot-1
 899: PPUSH
 900: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 904: LD_INT 71
 906: PPUSH
 907: LD_INT 84
 909: PPUSH
 910: CALL_OW 428
 914: PPUSH
 915: LD_STRING DRa-spot-1
 917: PPUSH
 918: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 922: LD_INT 90
 924: PPUSH
 925: LD_INT 41
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 6
 933: NEG
 934: PPUSH
 935: CALL_OW 330
// end ;
 939: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 35
 945: PPUSH
 946: LD_INT 35
 948: PPUSH
 949: CALL_OW 428
 953: PPUSH
 954: CALL_OW 292
 958: PUSH
 959: LD_EXP 22
 963: NOT
 964: AND
 965: IFFALSE 1015
 967: GO 969
 969: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 970: LD_INT 35
 972: PPUSH
 973: LD_INT 35
 975: PPUSH
 976: CALL_OW 428
 980: PPUSH
 981: LD_EXP 1
 985: PPUSH
 986: CALL_OW 119
// wait ( 0 0$1 ) ;
 990: LD_INT 35
 992: PPUSH
 993: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
 997: LD_INT 35
 999: PPUSH
1000: LD_INT 35
1002: PPUSH
1003: CALL_OW 428
1007: PPUSH
1008: LD_STRING DRa-spot-4
1010: PPUSH
1011: CALL_OW 88
// end ;
1015: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1016: LD_EXP 21
1020: PUSH
1021: LD_EXP 14
1025: PPUSH
1026: LD_INT 101
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 72
1040: AND
1041: PUSH
1042: LD_EXP 22
1046: NOT
1047: AND
1048: IFFALSE 1372
1050: GO 1052
1052: DISABLE
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
// begin enable ;
1060: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1061: LD_ADDR_VAR 0 1
1065: PUSH
1066: LD_EXP 14
1070: PPUSH
1071: LD_INT 101
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 72
1085: ST_TO_ADDR
// if not tmp then
1086: LD_VAR 0 1
1090: NOT
1091: IFFALSE 1095
// exit ;
1093: GO 1372
// InGameOn ;
1095: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1099: LD_EXP 1
1103: PUSH
1104: LD_EXP 5
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: LD_VAR 0 1
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING DG-meeting-1
1155: PPUSH
1156: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 81
1167: PUSH
1168: LD_INT 10
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 25
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 108
1187: PUSH
1188: LD_INT 73
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: LD_INT 9999
1207: PUSH
1208: EMPTY
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// for i := 1 to 3 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 3
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1312
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: LD_EXP 1
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 1
1253: ARRAY
1254: PPUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_VAR 0 2
1264: ARRAY
1265: PUSH
1266: LD_INT 2
1268: ARRAY
1269: PPUSH
1270: CALL_OW 297
1274: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1275: LD_VAR 0 4
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PUSH
1284: LD_VAR 0 5
1288: GREATER
1289: IFFALSE 1310
// dist := [ tdist , i ] ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// end ;
1310: GO 1227
1312: POP
1313: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1314: LD_EXP 1
1318: PPUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 2
1331: ARRAY
1332: ARRAY
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: LD_VAR 0 3
1342: PUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 2
1350: ARRAY
1351: ARRAY
1352: PUSH
1353: LD_INT 2
1355: ARRAY
1356: PPUSH
1357: CALL_OW 111
// wait ( 0 0$3 ) ;
1361: LD_INT 105
1363: PPUSH
1364: CALL_OW 67
// InGameOff ;
1368: CALL_OW 9
// end ;
1372: PPOPN 5
1374: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1375: LD_EXP 1
1379: PPUSH
1380: LD_INT 14
1382: PPUSH
1383: CALL_OW 296
1387: PUSH
1388: LD_INT 40
1390: GREATER
1391: PUSH
1392: LD_EXP 1
1396: PPUSH
1397: CALL_OW 316
1401: AND
1402: PUSH
1403: LD_EXP 22
1407: NOT
1408: AND
1409: IFFALSE 1426
1411: GO 1413
1413: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_STRING DK-idle-1
1421: PPUSH
1422: CALL_OW 88
// end ;
1426: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1427: LD_INT 2
1429: PPUSH
1430: LD_INT 59
1432: PPUSH
1433: LD_INT 47
1435: PPUSH
1436: CALL_OW 293
1440: PUSH
1441: LD_EXP 22
1445: NOT
1446: AND
1447: IFFALSE 1604
1449: GO 1451
1451: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 10
1463: NEG
1464: PPUSH
1465: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1469: LD_INT 59
1471: PPUSH
1472: LD_INT 47
1474: PPUSH
1475: CALL_OW 86
// goWithHeike := false ;
1479: LD_ADDR_EXP 18
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// baseSpotted := true ;
1487: LD_ADDR_EXP 19
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// InGameOn ;
1495: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1499: LD_EXP 1
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: LD_INT 54
1515: PPUSH
1516: LD_INT 45
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$1 ) ;
1523: LD_INT 35
1525: PPUSH
1526: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1530: LD_EXP 1
1534: PUSH
1535: LD_EXP 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: LD_INT 59
1546: PPUSH
1547: LD_INT 47
1549: PPUSH
1550: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1554: LD_EXP 1
1558: PPUSH
1559: LD_STRING DH-base-1
1561: PPUSH
1562: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1566: LD_EXP 5
1570: PPUSH
1571: LD_STRING DK-base-1
1573: PPUSH
1574: CALL_OW 88
// InGameOff ;
1578: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1582: LD_ADDR_EXP 17
1586: PUSH
1587: LD_EXP 17
1591: PUSH
1592: LD_INT 1
1594: PLUS
1595: ST_TO_ADDR
// goWithHeike := true ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// end ;
1604: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1605: LD_INT 2
1607: PPUSH
1608: LD_EXP 8
1612: PPUSH
1613: CALL_OW 292
1617: PUSH
1618: LD_EXP 22
1622: NOT
1623: AND
1624: IFFALSE 2966
1626: GO 1628
1628: DISABLE
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// begin meetingActive := false ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// goWithHeike := false ;
1643: LD_ADDR_EXP 18
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: LD_INT 6
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 517
1666: ST_TO_ADDR
// for i := 1 to 4 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 4
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1748
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1683: LD_EXP 15
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1728: LD_EXP 15
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PPUSH
1742: CALL_OW 179
// end ;
1746: GO 1680
1748: POP
1749: POP
// InGameOn ;
1750: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1754: LD_EXP 8
1758: PPUSH
1759: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1763: LD_EXP 1
1767: PPUSH
1768: LD_EXP 8
1772: PPUSH
1773: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_EXP 1
1786: PPUSH
1787: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1791: LD_INT 10
1793: PPUSH
1794: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 8
1807: PPUSH
1808: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1812: LD_EXP 5
1816: PPUSH
1817: LD_EXP 1
1821: PPUSH
1822: CALL_OW 250
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 272
1837: PPUSH
1838: LD_EXP 1
1842: PPUSH
1843: CALL_OW 251
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 273
1858: PPUSH
1859: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_EXP 8
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: LD_INT 5
1880: LESS
1881: PUSH
1882: LD_EXP 5
1886: PPUSH
1887: LD_EXP 8
1891: PPUSH
1892: CALL_OW 296
1896: PUSH
1897: LD_INT 6
1899: LESS
1900: AND
1901: IFFALSE 1791
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 5
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PPUSH
1917: LD_EXP 8
1921: PPUSH
1922: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1926: LD_EXP 8
1930: PUSH
1931: LD_EXP 4
1935: PUSH
1936: LD_EXP 9
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PPUSH
1946: LD_EXP 1
1950: PPUSH
1951: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1955: LD_INT 7
1957: PPUSH
1958: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1962: LD_EXP 8
1966: PPUSH
1967: LD_STRING DKu-Kurt-1
1969: PPUSH
1970: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1974: LD_EXP 5
1978: PPUSH
1979: LD_STRING DK-Kurt-1
1981: PPUSH
1982: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1986: LD_EXP 8
1990: PPUSH
1991: LD_STRING DKu-Kurt-2
1993: PPUSH
1994: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING DH-Kurt-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DKu-Kurt-3
2024: PPUSH
2025: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2029: LD_EXP 5
2033: PPUSH
2034: LD_STRING DK-Kurt-3
2036: PPUSH
2037: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2041: LD_EXP 9
2045: PPUSH
2046: LD_STRING DHa-Kurt-3
2048: PPUSH
2049: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2053: LD_EXP 4
2057: PPUSH
2058: LD_STRING DO-Kurt-3
2060: PPUSH
2061: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: LD_EXP 8
2074: PUSH
2075: LD_EXP 4
2079: PUSH
2080: LD_EXP 9
2084: PUSH
2085: LD_EXP 5
2089: PUSH
2090: LD_EXP 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_EXP 16
2106: UNION
2107: ST_TO_ADDR
// for i = 1 to tmp2 do
2108: LD_ADDR_VAR 0 1
2112: PUSH
2113: DOUBLE
2114: LD_INT 1
2116: DEC
2117: ST_TO_ADDR
2118: LD_VAR 0 3
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2199
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2126: LD_VAR 0 3
2130: PUSH
2131: LD_VAR 0 1
2135: ARRAY
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 4
2153: PLUS
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PUSH
2165: LD_VAR 0 1
2169: PUSH
2170: LD_INT 4
2172: PLUS
2173: ARRAY
2174: PPUSH
2175: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2179: LD_VAR 0 3
2183: PUSH
2184: LD_VAR 0 1
2188: ARRAY
2189: PPUSH
2190: LD_INT 14
2192: PPUSH
2193: CALL_OW 179
// end ;
2197: GO 2123
2199: POP
2200: POP
// wait ( 0 0$2 ) ;
2201: LD_INT 70
2203: PPUSH
2204: CALL_OW 67
// CenterOnUnits ( eon ) ;
2208: LD_INT 14
2210: PPUSH
2211: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2215: LD_INT 90
2217: PPUSH
2218: LD_INT 43
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 21
2226: NEG
2227: PPUSH
2228: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2232: LD_EXP 2
2236: PPUSH
2237: LD_INT 84
2239: PPUSH
2240: LD_INT 36
2242: PPUSH
2243: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2247: LD_EXP 2
2251: PPUSH
2252: LD_INT 14
2254: PPUSH
2255: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 85
2266: PPUSH
2267: LD_INT 36
2269: PPUSH
2270: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2274: LD_EXP 11
2278: PPUSH
2279: LD_INT 14
2281: PPUSH
2282: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2286: LD_EXP 10
2290: PPUSH
2291: LD_INT 86
2293: PPUSH
2294: LD_INT 36
2296: PPUSH
2297: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2301: LD_EXP 10
2305: PPUSH
2306: LD_INT 14
2308: PPUSH
2309: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2313: LD_EXP 7
2317: PPUSH
2318: LD_INT 87
2320: PPUSH
2321: LD_INT 36
2323: PPUSH
2324: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2328: LD_EXP 7
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// wait ( 0 0$3 ) ;
2340: LD_INT 105
2342: PPUSH
2343: CALL_OW 67
// p := 0 ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// p := p + 1 ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 308
2388: PUSH
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 10
2396: GREATER
2397: OR
2398: IFFALSE 2355
// heikeNearbyEon := true ;
2400: LD_ADDR_EXP 20
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 37
2418: PPUSH
2419: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2423: LD_EXP 6
2427: PPUSH
2428: LD_EXP 13
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2441: LD_EXP 13
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_INT 89
2452: PPUSH
2453: LD_INT 37
2455: PPUSH
2456: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2460: LD_EXP 13
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 91
2471: PPUSH
2472: LD_INT 39
2474: PPUSH
2475: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2479: LD_EXP 13
2483: PPUSH
2484: LD_EXP 11
2488: PPUSH
2489: CALL_OW 179
// wait ( 0 0$1 ) ;
2493: LD_INT 35
2495: PPUSH
2496: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2500: LD_EXP 13
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PPUSH
2509: LD_STRING DS-eon-1
2511: PPUSH
2512: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2516: LD_EXP 6
2520: PPUSH
2521: LD_STRING DSh-eon-1
2523: PPUSH
2524: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2528: LD_EXP 13
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: LD_STRING DS-eon-2
2539: PPUSH
2540: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_STRING DSh-eon-1a
2551: PPUSH
2552: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2556: LD_EXP 13
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_INT 92
2567: PPUSH
2568: LD_INT 43
2570: PPUSH
2571: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2575: LD_EXP 13
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: LD_INT 14
2586: PPUSH
2587: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2591: LD_EXP 13
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_INT 93
2602: PPUSH
2603: LD_INT 41
2605: PPUSH
2606: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2610: LD_EXP 13
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 93
2621: PPUSH
2622: LD_INT 40
2624: PPUSH
2625: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2629: LD_EXP 6
2633: PPUSH
2634: LD_INT 88
2636: PPUSH
2637: LD_INT 41
2639: PPUSH
2640: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2644: LD_EXP 6
2648: PPUSH
2649: LD_INT 87
2651: PPUSH
2652: LD_INT 41
2654: PPUSH
2655: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2659: LD_INT 35
2661: PPUSH
2662: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2666: LD_EXP 6
2670: PPUSH
2671: LD_INT 88
2673: PPUSH
2674: LD_INT 41
2676: PPUSH
2677: CALL_OW 307
2681: IFFALSE 2659
// wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2690: LD_EXP 6
2694: PPUSH
2695: LD_STRING DSh-eon-2
2697: PPUSH
2698: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2702: LD_EXP 11
2706: PPUSH
2707: LD_INT 87
2709: PPUSH
2710: LD_INT 40
2712: PPUSH
2713: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2717: LD_EXP 11
2721: PPUSH
2722: LD_INT 86
2724: PPUSH
2725: LD_INT 40
2727: PPUSH
2728: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2739: LD_EXP 11
2743: PPUSH
2744: LD_INT 87
2746: PPUSH
2747: LD_INT 40
2749: PPUSH
2750: CALL_OW 307
2754: IFFALSE 2732
// Say ( Shariff , DShar-eon-3 ) ;
2756: LD_EXP 11
2760: PPUSH
2761: LD_STRING DShar-eon-3
2763: PPUSH
2764: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2775: LD_EXP 5
2779: PPUSH
2780: LD_EXP 1
2784: PPUSH
2785: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2789: LD_EXP 11
2793: PPUSH
2794: LD_STRING DShar-eon-4
2796: PPUSH
2797: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_STRING DK-eon-4
2808: PPUSH
2809: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2813: LD_EXP 5
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2825: LD_INT 35
2827: PPUSH
2828: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 305
2841: NOT
2842: IFFALSE 2825
// ComTurnUnit ( Shariff , Heike ) ;
2844: LD_EXP 11
2848: PPUSH
2849: LD_EXP 1
2853: PPUSH
2854: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2858: LD_EXP 11
2862: PPUSH
2863: LD_STRING DShar-eon-5
2865: PPUSH
2866: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 91
2877: PPUSH
2878: LD_INT 44
2880: PPUSH
2881: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 14
2892: PPUSH
2893: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2897: LD_INT 35
2899: PPUSH
2900: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 91
2911: PPUSH
2912: LD_INT 44
2914: PPUSH
2915: CALL_OW 307
2919: IFFALSE 2897
// Say ( Heike , DH-eon-5 ) ;
2921: LD_EXP 1
2925: PPUSH
2926: LD_STRING DH-eon-5
2928: PPUSH
2929: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_INT 14
2940: PPUSH
2941: CALL_OW 120
// wait ( 0 0$2 ) ;
2945: LD_INT 70
2947: PPUSH
2948: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2952: LD_INT 1
2954: PPUSH
2955: LD_STRING %_cont
2957: PPUSH
2958: CALL_OW 340
// InGameOff ;
2962: CALL_OW 9
// end ;
2966: PPOPN 4
2968: END
// every 3 trigger IsSelected ( Kaia ) do
2969: LD_EXP 5
2973: PPUSH
2974: CALL_OW 306
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2983: LD_EXP 5
2987: PPUSH
2988: LD_INT 42
2990: PPUSH
2991: CALL_OW 582
2995: END
// export function PrepareHeikeGroup ; begin
2996: LD_INT 0
2998: PPUSH
// uc_side := 2 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 2
3006: ST_TO_ADDR
// uc_nation := 2 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3015: LD_ADDR_EXP 1
3019: PUSH
3020: LD_STRING Heike
3022: PPUSH
3023: CALL_OW 25
3027: ST_TO_ADDR
// uc_side := 5 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 5
3035: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3036: LD_ADDR_EXP 5
3040: PUSH
3041: LD_STRING Kaia
3043: PPUSH
3044: CALL_OW 25
3048: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_INT 3
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 0
3074: PPUSH
3075: CALL_OW 49
// end ;
3079: LD_VAR 0 1
3083: RET
// export function PrepareSheikGroup ; var un , i ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
// uc_side := 5 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 5
3096: ST_TO_ADDR
// uc_nation := 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: LD_STRING Ali
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_STRING Abdul
3125: PPUSH
3126: CALL_OW 25
3130: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3131: LD_ADDR_EXP 2
3135: PUSH
3136: LD_STRING Omar
3138: PPUSH
3139: CALL_OW 25
3143: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_STRING Mahtab
3151: PPUSH
3152: CALL_OW 25
3156: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_STRING Shahrzad
3164: PPUSH
3165: CALL_OW 25
3169: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3170: LD_EXP 10
3174: PPUSH
3175: LD_INT 85
3177: PPUSH
3178: LD_INT 37
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3188: LD_EXP 11
3192: PPUSH
3193: LD_INT 87
3195: PPUSH
3196: LD_INT 37
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3206: LD_EXP 2
3210: PPUSH
3211: LD_INT 85
3213: PPUSH
3214: LD_INT 35
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3224: LD_EXP 7
3228: PPUSH
3229: LD_INT 86
3231: PPUSH
3232: LD_INT 39
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3242: LD_EXP 6
3246: PPUSH
3247: LD_INT 88
3249: PPUSH
3250: LD_INT 39
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3260: LD_EXP 10
3264: PPUSH
3265: LD_EXP 11
3269: PPUSH
3270: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3274: LD_EXP 11
3278: PPUSH
3279: LD_EXP 10
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3288: LD_EXP 2
3292: PPUSH
3293: LD_EXP 11
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3302: LD_EXP 7
3306: PUSH
3307: LD_EXP 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: LD_EXP 11
3320: PPUSH
3321: CALL_OW 119
// for i := 1 to 2 do
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 2
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3425
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 380
// un := CreateHuman ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 90
3371: PPUSH
3372: LD_INT 44
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 91
3392: PPUSH
3393: LD_INT 43
3395: PPUSH
3396: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3400: LD_ADDR_EXP 13
3404: PUSH
3405: LD_EXP 13
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ;
3423: GO 3338
3425: POP
3426: POP
// scientists := scientists diff 0 ;
3427: LD_ADDR_EXP 13
3431: PUSH
3432: LD_EXP 13
3436: PUSH
3437: LD_INT 0
3439: DIFF
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareKurtGroup ; var i ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// uc_side := 5 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 5
3457: ST_TO_ADDR
// uc_nation := 2 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 2
3465: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3466: LD_ADDR_EXP 8
3470: PUSH
3471: LD_STRING Kurt
3473: PPUSH
3474: CALL_OW 25
3478: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_STRING Olaf
3486: PPUSH
3487: CALL_OW 25
3491: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3492: LD_ADDR_EXP 9
3496: PUSH
3497: LD_STRING Hans
3499: PPUSH
3500: CALL_OW 25
3504: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_EXP 8
3514: PUSH
3515: LD_EXP 9
3519: PUSH
3520: LD_EXP 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3550
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3533: LD_VAR 0 2
3537: PPUSH
3538: LD_INT 10
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
3548: GO 3530
3550: POP
3551: POP
// ComTurnUnit ( Kurt , Hans ) ;
3552: LD_EXP 8
3556: PPUSH
3557: LD_EXP 9
3561: PPUSH
3562: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3566: LD_EXP 4
3570: PPUSH
3571: LD_EXP 9
3575: PPUSH
3576: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3580: LD_EXP 9
3584: PPUSH
3585: LD_EXP 4
3589: PPUSH
3590: CALL_OW 119
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
3604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_INT 21
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PUSH
3625: LD_INT 14
3627: DIFF
3628: PUSH
3629: FOR_IN
3630: IFFALSE 3710
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 266
3641: PUSH
3642: LD_INT 6
3644: PUSH
3645: LD_INT 31
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: IN
3652: IFFALSE 3676
// SetLives ( i , rand ( 500 , 600 ) ) else
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 500
3661: PPUSH
3662: LD_INT 600
3664: PPUSH
3665: CALL_OW 12
3669: PPUSH
3670: CALL_OW 234
3674: GO 3696
// SetLives ( i , rand ( 300 , 499 ) ) ;
3676: LD_VAR 0 2
3680: PPUSH
3681: LD_INT 300
3683: PPUSH
3684: LD_INT 499
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: CALL_OW 234
// SetSide ( i , 5 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 235
// end ;
3708: GO 3629
3710: POP
3711: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// uc_side := 4 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 4
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3840
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: LD_INT 0
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 9
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// KillUnit ( un ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: CALL_OW 66
// end ;
3838: GO 3763
3840: POP
3841: POP
// end ;
3842: LD_VAR 0 1
3846: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// uc_side := 5 ;
3856: LD_ADDR_OWVAR 20
3860: PUSH
3861: LD_INT 5
3863: ST_TO_ADDR
// uc_nation := 2 ;
3864: LD_ADDR_OWVAR 21
3868: PUSH
3869: LD_INT 2
3871: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3872: LD_ADDR_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: LD_INT 14
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// InitHc ;
3895: CALL_OW 19
// for i in area do
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: LD_VAR 0 6
3908: PUSH
3909: FOR_IN
3910: IFFALSE 4074
// begin tmp := AreaToList ( i , 0 ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 517
3929: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_VAR 0 5
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4070
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 380
// un := CreateHuman ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// if i = spawnBaseArea3 then
3975: LD_VAR 0 2
3979: PUSH
3980: LD_INT 5
3982: EQUAL
3983: IFFALSE 4001
// eonGuards := eonGuards ^ un ;
3985: LD_ADDR_EXP 14
3989: PUSH
3990: LD_EXP 14
3994: PUSH
3995: LD_VAR 0 7
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4001: LD_VAR 0 7
4005: PPUSH
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// ComHold ( un ) ;
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 140
// if i = spawnBaseArea4 then
4027: LD_VAR 0 2
4031: PUSH
4032: LD_INT 14
4034: EQUAL
4035: IFFALSE 4068
// begin firstGroup := firstGroup ^ un ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_EXP 15
4046: PUSH
4047: LD_VAR 0 7
4051: ADD
4052: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4053: LD_VAR 0 7
4057: PPUSH
4058: LD_INT 108
4060: PPUSH
4061: LD_INT 47
4063: PPUSH
4064: CALL_OW 118
// end ; end ;
4068: GO 3949
4070: POP
4071: POP
// end ;
4072: GO 3909
4074: POP
4075: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 30
4088: PUSH
4089: LD_INT 31
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4196
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4104: LD_ADDR_VAR 0 4
4108: PUSH
4109: LD_INT 30
4111: PUSH
4112: LD_INT 31
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: PUSH
4124: LD_VAR 0 2
4128: ARRAY
4129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: CALL_OW 380
// un := CreateHuman ;
4143: LD_ADDR_VAR 0 7
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: LD_INT 3
4170: PLUS
4171: PUSH
4172: LD_INT 6
4174: MOD
4175: PPUSH
4176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 4
4189: PPUSH
4190: CALL_OW 52
// end ;
4194: GO 4101
4196: POP
4197: POP
// PrepareSoldier ( sex_male , 3 ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 381
// un := CreateHuman ;
4208: LD_ADDR_VAR 0 7
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 71
4225: PPUSH
4226: LD_INT 84
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL 64414 0 5
// ComHold ( un ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: CALL_OW 140
// un := CreateHuman ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: CALL_OW 44
4257: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 35
4265: PPUSH
4266: LD_INT 35
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 64414 0 5
// ComHold ( un ) ;
4279: LD_VAR 0 7
4283: PPUSH
4284: CALL_OW 140
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4293: LD_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: AND
4311: IFFALSE 4337
// begin kaiaAttacked := true ;
4313: LD_ADDR_EXP 22
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 80
// end ; end ;
4337: PPOPN 2
4339: END
// every 0 0$1 trigger scientists do var i ;
4340: LD_EXP 13
4344: IFFALSE 4552
4346: GO 4348
4348: DISABLE
4349: LD_INT 0
4351: PPUSH
// begin repeat for i in scientists do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_EXP 13
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4537
// begin wait ( 0 0$1 ) ;
4365: LD_INT 35
4367: PPUSH
4368: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 2
4394: MOD
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: ARRAY
4400: PPUSH
4401: CALL_OW 308
4405: NOT
4406: IFFALSE 4441
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 13
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 2
4430: MOD
4431: PUSH
4432: LD_INT 1
4434: PLUS
4435: ARRAY
4436: PPUSH
4437: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 202
// if rand ( 0 , 1 ) then
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: IFFALSE 4489
// AddComAnim ( i , 15 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 15
4484: PPUSH
4485: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 12
4508: PPUSH
4509: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 40
4523: PPUSH
4524: CALL_OW 178
// wait ( 0 0$1 ) ;
4528: LD_INT 35
4530: PPUSH
4531: CALL_OW 67
// end ;
4535: GO 4362
4537: POP
4538: POP
// wait ( 0 0$10 ) ;
4539: LD_INT 350
4541: PPUSH
4542: CALL_OW 67
// until heikeNearbyEon ;
4546: LD_EXP 20
4550: IFFALSE 4352
// end ; end_of_file
4552: PPOPN 1
4554: END
// every 0 0$1 do
4555: GO 4557
4557: DISABLE
// begin enable ;
4558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4559: LD_STRING updateTimer(
4561: PUSH
4562: LD_OWVAR 1
4566: STR
4567: PUSH
4568: LD_STRING );
4570: STR
4571: PPUSH
4572: CALL_OW 559
// end ;
4576: END
// export function SOS_MapStart ( ) ; begin
4577: LD_INT 0
4579: PPUSH
// if streamModeActive then
4580: LD_EXP 24
4584: IFFALSE 4593
// DefineStreamItems ( true ) ;
4586: LD_INT 1
4588: PPUSH
4589: CALL 6397 0 1
// UpdateLuaVariables ( ) ;
4593: CALL 4610 0 0
// UpdateFactoryWaypoints ( ) ;
4597: CALL 19258 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4601: CALL 19515 0 0
// end ;
4605: LD_VAR 0 1
4609: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
4610: LD_INT 0
4612: PPUSH
// if not globalGameSaveCounter then
4613: LD_EXP 23
4617: NOT
4618: IFFALSE 4629
// ToLua ( setGameSaveCounter(0) ) else
4620: LD_STRING setGameSaveCounter(0)
4622: PPUSH
4623: CALL_OW 559
4627: GO 4661
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4629: LD_ADDR_EXP 23
4633: PUSH
4634: LD_EXP 23
4638: PPUSH
4639: CALL 63635 0 1
4643: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4644: LD_STRING setGameSaveCounter(
4646: PUSH
4647: LD_EXP 23
4651: STR
4652: PUSH
4653: LD_STRING )
4655: STR
4656: PPUSH
4657: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4661: LD_STRING setGameDifficulty(
4663: PUSH
4664: LD_OWVAR 67
4668: STR
4669: PUSH
4670: LD_STRING )
4672: STR
4673: PPUSH
4674: CALL_OW 559
// end ;
4678: LD_VAR 0 1
4682: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4683: LD_INT 0
4685: PPUSH
// if p2 = stream_mode then
4686: LD_VAR 0 2
4690: PUSH
4691: LD_INT 100
4693: EQUAL
4694: IFFALSE 5697
// begin if not StreamModeActive then
4696: LD_EXP 24
4700: NOT
4701: IFFALSE 4711
// StreamModeActive := true ;
4703: LD_ADDR_EXP 24
4707: PUSH
4708: LD_INT 1
4710: ST_TO_ADDR
// if p3 = 0 then
4711: LD_VAR 0 3
4715: PUSH
4716: LD_INT 0
4718: EQUAL
4719: IFFALSE 4725
// InitStreamMode ;
4721: CALL 5933 0 0
// if p3 = 1 then
4725: LD_VAR 0 3
4729: PUSH
4730: LD_INT 1
4732: EQUAL
4733: IFFALSE 4743
// sRocket := true ;
4735: LD_ADDR_EXP 29
4739: PUSH
4740: LD_INT 1
4742: ST_TO_ADDR
// if p3 = 2 then
4743: LD_VAR 0 3
4747: PUSH
4748: LD_INT 2
4750: EQUAL
4751: IFFALSE 4761
// sSpeed := true ;
4753: LD_ADDR_EXP 28
4757: PUSH
4758: LD_INT 1
4760: ST_TO_ADDR
// if p3 = 3 then
4761: LD_VAR 0 3
4765: PUSH
4766: LD_INT 3
4768: EQUAL
4769: IFFALSE 4779
// sEngine := true ;
4771: LD_ADDR_EXP 30
4775: PUSH
4776: LD_INT 1
4778: ST_TO_ADDR
// if p3 = 4 then
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 4
4786: EQUAL
4787: IFFALSE 4797
// sSpec := true ;
4789: LD_ADDR_EXP 27
4793: PUSH
4794: LD_INT 1
4796: ST_TO_ADDR
// if p3 = 5 then
4797: LD_VAR 0 3
4801: PUSH
4802: LD_INT 5
4804: EQUAL
4805: IFFALSE 4815
// sLevel := true ;
4807: LD_ADDR_EXP 31
4811: PUSH
4812: LD_INT 1
4814: ST_TO_ADDR
// if p3 = 6 then
4815: LD_VAR 0 3
4819: PUSH
4820: LD_INT 6
4822: EQUAL
4823: IFFALSE 4833
// sArmoury := true ;
4825: LD_ADDR_EXP 32
4829: PUSH
4830: LD_INT 1
4832: ST_TO_ADDR
// if p3 = 7 then
4833: LD_VAR 0 3
4837: PUSH
4838: LD_INT 7
4840: EQUAL
4841: IFFALSE 4851
// sRadar := true ;
4843: LD_ADDR_EXP 33
4847: PUSH
4848: LD_INT 1
4850: ST_TO_ADDR
// if p3 = 8 then
4851: LD_VAR 0 3
4855: PUSH
4856: LD_INT 8
4858: EQUAL
4859: IFFALSE 4869
// sBunker := true ;
4861: LD_ADDR_EXP 34
4865: PUSH
4866: LD_INT 1
4868: ST_TO_ADDR
// if p3 = 9 then
4869: LD_VAR 0 3
4873: PUSH
4874: LD_INT 9
4876: EQUAL
4877: IFFALSE 4887
// sHack := true ;
4879: LD_ADDR_EXP 35
4883: PUSH
4884: LD_INT 1
4886: ST_TO_ADDR
// if p3 = 10 then
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 10
4894: EQUAL
4895: IFFALSE 4905
// sFire := true ;
4897: LD_ADDR_EXP 36
4901: PUSH
4902: LD_INT 1
4904: ST_TO_ADDR
// if p3 = 11 then
4905: LD_VAR 0 3
4909: PUSH
4910: LD_INT 11
4912: EQUAL
4913: IFFALSE 4923
// sRefresh := true ;
4915: LD_ADDR_EXP 37
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// if p3 = 12 then
4923: LD_VAR 0 3
4927: PUSH
4928: LD_INT 12
4930: EQUAL
4931: IFFALSE 4941
// sExp := true ;
4933: LD_ADDR_EXP 38
4937: PUSH
4938: LD_INT 1
4940: ST_TO_ADDR
// if p3 = 13 then
4941: LD_VAR 0 3
4945: PUSH
4946: LD_INT 13
4948: EQUAL
4949: IFFALSE 4959
// sDepot := true ;
4951: LD_ADDR_EXP 39
4955: PUSH
4956: LD_INT 1
4958: ST_TO_ADDR
// if p3 = 14 then
4959: LD_VAR 0 3
4963: PUSH
4964: LD_INT 14
4966: EQUAL
4967: IFFALSE 4977
// sFlag := true ;
4969: LD_ADDR_EXP 40
4973: PUSH
4974: LD_INT 1
4976: ST_TO_ADDR
// if p3 = 15 then
4977: LD_VAR 0 3
4981: PUSH
4982: LD_INT 15
4984: EQUAL
4985: IFFALSE 4995
// sKamikadze := true ;
4987: LD_ADDR_EXP 48
4991: PUSH
4992: LD_INT 1
4994: ST_TO_ADDR
// if p3 = 16 then
4995: LD_VAR 0 3
4999: PUSH
5000: LD_INT 16
5002: EQUAL
5003: IFFALSE 5013
// sTroll := true ;
5005: LD_ADDR_EXP 49
5009: PUSH
5010: LD_INT 1
5012: ST_TO_ADDR
// if p3 = 17 then
5013: LD_VAR 0 3
5017: PUSH
5018: LD_INT 17
5020: EQUAL
5021: IFFALSE 5031
// sSlow := true ;
5023: LD_ADDR_EXP 50
5027: PUSH
5028: LD_INT 1
5030: ST_TO_ADDR
// if p3 = 18 then
5031: LD_VAR 0 3
5035: PUSH
5036: LD_INT 18
5038: EQUAL
5039: IFFALSE 5049
// sLack := true ;
5041: LD_ADDR_EXP 51
5045: PUSH
5046: LD_INT 1
5048: ST_TO_ADDR
// if p3 = 19 then
5049: LD_VAR 0 3
5053: PUSH
5054: LD_INT 19
5056: EQUAL
5057: IFFALSE 5067
// sTank := true ;
5059: LD_ADDR_EXP 53
5063: PUSH
5064: LD_INT 1
5066: ST_TO_ADDR
// if p3 = 20 then
5067: LD_VAR 0 3
5071: PUSH
5072: LD_INT 20
5074: EQUAL
5075: IFFALSE 5085
// sRemote := true ;
5077: LD_ADDR_EXP 54
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// if p3 = 21 then
5085: LD_VAR 0 3
5089: PUSH
5090: LD_INT 21
5092: EQUAL
5093: IFFALSE 5103
// sPowell := true ;
5095: LD_ADDR_EXP 55
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// if p3 = 22 then
5103: LD_VAR 0 3
5107: PUSH
5108: LD_INT 22
5110: EQUAL
5111: IFFALSE 5121
// sTeleport := true ;
5113: LD_ADDR_EXP 58
5117: PUSH
5118: LD_INT 1
5120: ST_TO_ADDR
// if p3 = 23 then
5121: LD_VAR 0 3
5125: PUSH
5126: LD_INT 23
5128: EQUAL
5129: IFFALSE 5139
// sOilTower := true ;
5131: LD_ADDR_EXP 60
5135: PUSH
5136: LD_INT 1
5138: ST_TO_ADDR
// if p3 = 24 then
5139: LD_VAR 0 3
5143: PUSH
5144: LD_INT 24
5146: EQUAL
5147: IFFALSE 5157
// sShovel := true ;
5149: LD_ADDR_EXP 61
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// if p3 = 25 then
5157: LD_VAR 0 3
5161: PUSH
5162: LD_INT 25
5164: EQUAL
5165: IFFALSE 5175
// sSheik := true ;
5167: LD_ADDR_EXP 62
5171: PUSH
5172: LD_INT 1
5174: ST_TO_ADDR
// if p3 = 26 then
5175: LD_VAR 0 3
5179: PUSH
5180: LD_INT 26
5182: EQUAL
5183: IFFALSE 5193
// sEarthquake := true ;
5185: LD_ADDR_EXP 64
5189: PUSH
5190: LD_INT 1
5192: ST_TO_ADDR
// if p3 = 27 then
5193: LD_VAR 0 3
5197: PUSH
5198: LD_INT 27
5200: EQUAL
5201: IFFALSE 5211
// sAI := true ;
5203: LD_ADDR_EXP 65
5207: PUSH
5208: LD_INT 1
5210: ST_TO_ADDR
// if p3 = 28 then
5211: LD_VAR 0 3
5215: PUSH
5216: LD_INT 28
5218: EQUAL
5219: IFFALSE 5229
// sCargo := true ;
5221: LD_ADDR_EXP 68
5225: PUSH
5226: LD_INT 1
5228: ST_TO_ADDR
// if p3 = 29 then
5229: LD_VAR 0 3
5233: PUSH
5234: LD_INT 29
5236: EQUAL
5237: IFFALSE 5247
// sDLaser := true ;
5239: LD_ADDR_EXP 69
5243: PUSH
5244: LD_INT 1
5246: ST_TO_ADDR
// if p3 = 30 then
5247: LD_VAR 0 3
5251: PUSH
5252: LD_INT 30
5254: EQUAL
5255: IFFALSE 5265
// sExchange := true ;
5257: LD_ADDR_EXP 70
5261: PUSH
5262: LD_INT 1
5264: ST_TO_ADDR
// if p3 = 31 then
5265: LD_VAR 0 3
5269: PUSH
5270: LD_INT 31
5272: EQUAL
5273: IFFALSE 5283
// sFac := true ;
5275: LD_ADDR_EXP 71
5279: PUSH
5280: LD_INT 1
5282: ST_TO_ADDR
// if p3 = 32 then
5283: LD_VAR 0 3
5287: PUSH
5288: LD_INT 32
5290: EQUAL
5291: IFFALSE 5301
// sPower := true ;
5293: LD_ADDR_EXP 72
5297: PUSH
5298: LD_INT 1
5300: ST_TO_ADDR
// if p3 = 33 then
5301: LD_VAR 0 3
5305: PUSH
5306: LD_INT 33
5308: EQUAL
5309: IFFALSE 5319
// sRandom := true ;
5311: LD_ADDR_EXP 73
5315: PUSH
5316: LD_INT 1
5318: ST_TO_ADDR
// if p3 = 34 then
5319: LD_VAR 0 3
5323: PUSH
5324: LD_INT 34
5326: EQUAL
5327: IFFALSE 5337
// sShield := true ;
5329: LD_ADDR_EXP 74
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// if p3 = 35 then
5337: LD_VAR 0 3
5341: PUSH
5342: LD_INT 35
5344: EQUAL
5345: IFFALSE 5355
// sTime := true ;
5347: LD_ADDR_EXP 75
5351: PUSH
5352: LD_INT 1
5354: ST_TO_ADDR
// if p3 = 36 then
5355: LD_VAR 0 3
5359: PUSH
5360: LD_INT 36
5362: EQUAL
5363: IFFALSE 5373
// sTools := true ;
5365: LD_ADDR_EXP 76
5369: PUSH
5370: LD_INT 1
5372: ST_TO_ADDR
// if p3 = 101 then
5373: LD_VAR 0 3
5377: PUSH
5378: LD_INT 101
5380: EQUAL
5381: IFFALSE 5391
// sSold := true ;
5383: LD_ADDR_EXP 41
5387: PUSH
5388: LD_INT 1
5390: ST_TO_ADDR
// if p3 = 102 then
5391: LD_VAR 0 3
5395: PUSH
5396: LD_INT 102
5398: EQUAL
5399: IFFALSE 5409
// sDiff := true ;
5401: LD_ADDR_EXP 42
5405: PUSH
5406: LD_INT 1
5408: ST_TO_ADDR
// if p3 = 103 then
5409: LD_VAR 0 3
5413: PUSH
5414: LD_INT 103
5416: EQUAL
5417: IFFALSE 5427
// sFog := true ;
5419: LD_ADDR_EXP 45
5423: PUSH
5424: LD_INT 1
5426: ST_TO_ADDR
// if p3 = 104 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_INT 104
5434: EQUAL
5435: IFFALSE 5445
// sReset := true ;
5437: LD_ADDR_EXP 46
5441: PUSH
5442: LD_INT 1
5444: ST_TO_ADDR
// if p3 = 105 then
5445: LD_VAR 0 3
5449: PUSH
5450: LD_INT 105
5452: EQUAL
5453: IFFALSE 5463
// sSun := true ;
5455: LD_ADDR_EXP 47
5459: PUSH
5460: LD_INT 1
5462: ST_TO_ADDR
// if p3 = 106 then
5463: LD_VAR 0 3
5467: PUSH
5468: LD_INT 106
5470: EQUAL
5471: IFFALSE 5481
// sTiger := true ;
5473: LD_ADDR_EXP 43
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// if p3 = 107 then
5481: LD_VAR 0 3
5485: PUSH
5486: LD_INT 107
5488: EQUAL
5489: IFFALSE 5499
// sBomb := true ;
5491: LD_ADDR_EXP 44
5495: PUSH
5496: LD_INT 1
5498: ST_TO_ADDR
// if p3 = 108 then
5499: LD_VAR 0 3
5503: PUSH
5504: LD_INT 108
5506: EQUAL
5507: IFFALSE 5517
// sWound := true ;
5509: LD_ADDR_EXP 52
5513: PUSH
5514: LD_INT 1
5516: ST_TO_ADDR
// if p3 = 109 then
5517: LD_VAR 0 3
5521: PUSH
5522: LD_INT 109
5524: EQUAL
5525: IFFALSE 5535
// sBetray := true ;
5527: LD_ADDR_EXP 56
5531: PUSH
5532: LD_INT 1
5534: ST_TO_ADDR
// if p3 = 110 then
5535: LD_VAR 0 3
5539: PUSH
5540: LD_INT 110
5542: EQUAL
5543: IFFALSE 5553
// sContamin := true ;
5545: LD_ADDR_EXP 57
5549: PUSH
5550: LD_INT 1
5552: ST_TO_ADDR
// if p3 = 111 then
5553: LD_VAR 0 3
5557: PUSH
5558: LD_INT 111
5560: EQUAL
5561: IFFALSE 5571
// sOil := true ;
5563: LD_ADDR_EXP 59
5567: PUSH
5568: LD_INT 1
5570: ST_TO_ADDR
// if p3 = 112 then
5571: LD_VAR 0 3
5575: PUSH
5576: LD_INT 112
5578: EQUAL
5579: IFFALSE 5589
// sStu := true ;
5581: LD_ADDR_EXP 63
5585: PUSH
5586: LD_INT 1
5588: ST_TO_ADDR
// if p3 = 113 then
5589: LD_VAR 0 3
5593: PUSH
5594: LD_INT 113
5596: EQUAL
5597: IFFALSE 5607
// sBazooka := true ;
5599: LD_ADDR_EXP 66
5603: PUSH
5604: LD_INT 1
5606: ST_TO_ADDR
// if p3 = 114 then
5607: LD_VAR 0 3
5611: PUSH
5612: LD_INT 114
5614: EQUAL
5615: IFFALSE 5625
// sMortar := true ;
5617: LD_ADDR_EXP 67
5621: PUSH
5622: LD_INT 1
5624: ST_TO_ADDR
// if p3 = 115 then
5625: LD_VAR 0 3
5629: PUSH
5630: LD_INT 115
5632: EQUAL
5633: IFFALSE 5643
// sRanger := true ;
5635: LD_ADDR_EXP 77
5639: PUSH
5640: LD_INT 1
5642: ST_TO_ADDR
// if p3 = 116 then
5643: LD_VAR 0 3
5647: PUSH
5648: LD_INT 116
5650: EQUAL
5651: IFFALSE 5661
// sComputer := true ;
5653: LD_ADDR_EXP 78
5657: PUSH
5658: LD_INT 1
5660: ST_TO_ADDR
// if p3 = 117 then
5661: LD_VAR 0 3
5665: PUSH
5666: LD_INT 117
5668: EQUAL
5669: IFFALSE 5679
// s30 := true ;
5671: LD_ADDR_EXP 79
5675: PUSH
5676: LD_INT 1
5678: ST_TO_ADDR
// if p3 = 118 then
5679: LD_VAR 0 3
5683: PUSH
5684: LD_INT 118
5686: EQUAL
5687: IFFALSE 5697
// s60 := true ;
5689: LD_ADDR_EXP 80
5693: PUSH
5694: LD_INT 1
5696: ST_TO_ADDR
// end ; if p2 = hack_mode then
5697: LD_VAR 0 2
5701: PUSH
5702: LD_INT 101
5704: EQUAL
5705: IFFALSE 5833
// begin case p3 of 1 :
5707: LD_VAR 0 3
5711: PUSH
5712: LD_INT 1
5714: DOUBLE
5715: EQUAL
5716: IFTRUE 5720
5718: GO 5727
5720: POP
// hHackUnlimitedResources ; 2 :
5721: CALL 18004 0 0
5725: GO 5833
5727: LD_INT 2
5729: DOUBLE
5730: EQUAL
5731: IFTRUE 5735
5733: GO 5742
5735: POP
// hHackSetLevel10 ; 3 :
5736: CALL 18137 0 0
5740: GO 5833
5742: LD_INT 3
5744: DOUBLE
5745: EQUAL
5746: IFTRUE 5750
5748: GO 5757
5750: POP
// hHackSetLevel10YourUnits ; 4 :
5751: CALL 18222 0 0
5755: GO 5833
5757: LD_INT 4
5759: DOUBLE
5760: EQUAL
5761: IFTRUE 5765
5763: GO 5772
5765: POP
// hHackInvincible ; 5 :
5766: CALL 18670 0 0
5770: GO 5833
5772: LD_INT 5
5774: DOUBLE
5775: EQUAL
5776: IFTRUE 5780
5778: GO 5787
5780: POP
// hHackInvisible ; 6 :
5781: CALL 18781 0 0
5785: GO 5833
5787: LD_INT 6
5789: DOUBLE
5790: EQUAL
5791: IFTRUE 5795
5793: GO 5802
5795: POP
// hHackChangeYourSide ; 7 :
5796: CALL 18838 0 0
5800: GO 5833
5802: LD_INT 7
5804: DOUBLE
5805: EQUAL
5806: IFTRUE 5810
5808: GO 5817
5810: POP
// hHackChangeUnitSide ; 8 :
5811: CALL 18880 0 0
5815: GO 5833
5817: LD_INT 8
5819: DOUBLE
5820: EQUAL
5821: IFTRUE 5825
5823: GO 5832
5825: POP
// hHackFog ; end ;
5826: CALL 18981 0 0
5830: GO 5833
5832: POP
// end ; if p2 = game_save_mode then
5833: LD_VAR 0 2
5837: PUSH
5838: LD_INT 102
5840: EQUAL
5841: IFFALSE 5906
// begin if p3 = 1 then
5843: LD_VAR 0 3
5847: PUSH
5848: LD_INT 1
5850: EQUAL
5851: IFFALSE 5863
// globalGameSaveCounter := p4 ;
5853: LD_ADDR_EXP 23
5857: PUSH
5858: LD_VAR 0 4
5862: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5863: LD_VAR 0 3
5867: PUSH
5868: LD_INT 2
5870: EQUAL
5871: PUSH
5872: LD_EXP 23
5876: AND
5877: IFFALSE 5896
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5879: LD_STRING setGameSaveCounter(
5881: PUSH
5882: LD_EXP 23
5886: STR
5887: PUSH
5888: LD_STRING )
5890: STR
5891: PPUSH
5892: CALL_OW 559
// display_strings := globalGameSaveCounter ;
5896: LD_ADDR_OWVAR 47
5900: PUSH
5901: LD_EXP 23
5905: ST_TO_ADDR
// end ; end ;
5906: LD_VAR 0 7
5910: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5911: GO 5913
5913: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5914: LD_STRING initStreamRollete();
5916: PPUSH
5917: CALL_OW 559
// InitStreamMode ;
5921: CALL 5933 0 0
// DefineStreamItems ( false ) ;
5925: LD_INT 0
5927: PPUSH
5928: CALL 6397 0 1
// end ;
5932: END
// function InitStreamMode ; begin
5933: LD_INT 0
5935: PPUSH
// streamModeActive := false ;
5936: LD_ADDR_EXP 24
5940: PUSH
5941: LD_INT 0
5943: ST_TO_ADDR
// normalCounter := 36 ;
5944: LD_ADDR_EXP 25
5948: PUSH
5949: LD_INT 36
5951: ST_TO_ADDR
// hardcoreCounter := 18 ;
5952: LD_ADDR_EXP 26
5956: PUSH
5957: LD_INT 18
5959: ST_TO_ADDR
// sRocket := false ;
5960: LD_ADDR_EXP 29
5964: PUSH
5965: LD_INT 0
5967: ST_TO_ADDR
// sSpeed := false ;
5968: LD_ADDR_EXP 28
5972: PUSH
5973: LD_INT 0
5975: ST_TO_ADDR
// sEngine := false ;
5976: LD_ADDR_EXP 30
5980: PUSH
5981: LD_INT 0
5983: ST_TO_ADDR
// sSpec := false ;
5984: LD_ADDR_EXP 27
5988: PUSH
5989: LD_INT 0
5991: ST_TO_ADDR
// sLevel := false ;
5992: LD_ADDR_EXP 31
5996: PUSH
5997: LD_INT 0
5999: ST_TO_ADDR
// sArmoury := false ;
6000: LD_ADDR_EXP 32
6004: PUSH
6005: LD_INT 0
6007: ST_TO_ADDR
// sRadar := false ;
6008: LD_ADDR_EXP 33
6012: PUSH
6013: LD_INT 0
6015: ST_TO_ADDR
// sBunker := false ;
6016: LD_ADDR_EXP 34
6020: PUSH
6021: LD_INT 0
6023: ST_TO_ADDR
// sHack := false ;
6024: LD_ADDR_EXP 35
6028: PUSH
6029: LD_INT 0
6031: ST_TO_ADDR
// sFire := false ;
6032: LD_ADDR_EXP 36
6036: PUSH
6037: LD_INT 0
6039: ST_TO_ADDR
// sRefresh := false ;
6040: LD_ADDR_EXP 37
6044: PUSH
6045: LD_INT 0
6047: ST_TO_ADDR
// sExp := false ;
6048: LD_ADDR_EXP 38
6052: PUSH
6053: LD_INT 0
6055: ST_TO_ADDR
// sDepot := false ;
6056: LD_ADDR_EXP 39
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// sFlag := false ;
6064: LD_ADDR_EXP 40
6068: PUSH
6069: LD_INT 0
6071: ST_TO_ADDR
// sKamikadze := false ;
6072: LD_ADDR_EXP 48
6076: PUSH
6077: LD_INT 0
6079: ST_TO_ADDR
// sTroll := false ;
6080: LD_ADDR_EXP 49
6084: PUSH
6085: LD_INT 0
6087: ST_TO_ADDR
// sSlow := false ;
6088: LD_ADDR_EXP 50
6092: PUSH
6093: LD_INT 0
6095: ST_TO_ADDR
// sLack := false ;
6096: LD_ADDR_EXP 51
6100: PUSH
6101: LD_INT 0
6103: ST_TO_ADDR
// sTank := false ;
6104: LD_ADDR_EXP 53
6108: PUSH
6109: LD_INT 0
6111: ST_TO_ADDR
// sRemote := false ;
6112: LD_ADDR_EXP 54
6116: PUSH
6117: LD_INT 0
6119: ST_TO_ADDR
// sPowell := false ;
6120: LD_ADDR_EXP 55
6124: PUSH
6125: LD_INT 0
6127: ST_TO_ADDR
// sTeleport := false ;
6128: LD_ADDR_EXP 58
6132: PUSH
6133: LD_INT 0
6135: ST_TO_ADDR
// sOilTower := false ;
6136: LD_ADDR_EXP 60
6140: PUSH
6141: LD_INT 0
6143: ST_TO_ADDR
// sShovel := false ;
6144: LD_ADDR_EXP 61
6148: PUSH
6149: LD_INT 0
6151: ST_TO_ADDR
// sSheik := false ;
6152: LD_ADDR_EXP 62
6156: PUSH
6157: LD_INT 0
6159: ST_TO_ADDR
// sEarthquake := false ;
6160: LD_ADDR_EXP 64
6164: PUSH
6165: LD_INT 0
6167: ST_TO_ADDR
// sAI := false ;
6168: LD_ADDR_EXP 65
6172: PUSH
6173: LD_INT 0
6175: ST_TO_ADDR
// sCargo := false ;
6176: LD_ADDR_EXP 68
6180: PUSH
6181: LD_INT 0
6183: ST_TO_ADDR
// sDLaser := false ;
6184: LD_ADDR_EXP 69
6188: PUSH
6189: LD_INT 0
6191: ST_TO_ADDR
// sExchange := false ;
6192: LD_ADDR_EXP 70
6196: PUSH
6197: LD_INT 0
6199: ST_TO_ADDR
// sFac := false ;
6200: LD_ADDR_EXP 71
6204: PUSH
6205: LD_INT 0
6207: ST_TO_ADDR
// sPower := false ;
6208: LD_ADDR_EXP 72
6212: PUSH
6213: LD_INT 0
6215: ST_TO_ADDR
// sRandom := false ;
6216: LD_ADDR_EXP 73
6220: PUSH
6221: LD_INT 0
6223: ST_TO_ADDR
// sShield := false ;
6224: LD_ADDR_EXP 74
6228: PUSH
6229: LD_INT 0
6231: ST_TO_ADDR
// sTime := false ;
6232: LD_ADDR_EXP 75
6236: PUSH
6237: LD_INT 0
6239: ST_TO_ADDR
// sTools := false ;
6240: LD_ADDR_EXP 76
6244: PUSH
6245: LD_INT 0
6247: ST_TO_ADDR
// sSold := false ;
6248: LD_ADDR_EXP 41
6252: PUSH
6253: LD_INT 0
6255: ST_TO_ADDR
// sDiff := false ;
6256: LD_ADDR_EXP 42
6260: PUSH
6261: LD_INT 0
6263: ST_TO_ADDR
// sFog := false ;
6264: LD_ADDR_EXP 45
6268: PUSH
6269: LD_INT 0
6271: ST_TO_ADDR
// sReset := false ;
6272: LD_ADDR_EXP 46
6276: PUSH
6277: LD_INT 0
6279: ST_TO_ADDR
// sSun := false ;
6280: LD_ADDR_EXP 47
6284: PUSH
6285: LD_INT 0
6287: ST_TO_ADDR
// sTiger := false ;
6288: LD_ADDR_EXP 43
6292: PUSH
6293: LD_INT 0
6295: ST_TO_ADDR
// sBomb := false ;
6296: LD_ADDR_EXP 44
6300: PUSH
6301: LD_INT 0
6303: ST_TO_ADDR
// sWound := false ;
6304: LD_ADDR_EXP 52
6308: PUSH
6309: LD_INT 0
6311: ST_TO_ADDR
// sBetray := false ;
6312: LD_ADDR_EXP 56
6316: PUSH
6317: LD_INT 0
6319: ST_TO_ADDR
// sContamin := false ;
6320: LD_ADDR_EXP 57
6324: PUSH
6325: LD_INT 0
6327: ST_TO_ADDR
// sOil := false ;
6328: LD_ADDR_EXP 59
6332: PUSH
6333: LD_INT 0
6335: ST_TO_ADDR
// sStu := false ;
6336: LD_ADDR_EXP 63
6340: PUSH
6341: LD_INT 0
6343: ST_TO_ADDR
// sBazooka := false ;
6344: LD_ADDR_EXP 66
6348: PUSH
6349: LD_INT 0
6351: ST_TO_ADDR
// sMortar := false ;
6352: LD_ADDR_EXP 67
6356: PUSH
6357: LD_INT 0
6359: ST_TO_ADDR
// sRanger := false ;
6360: LD_ADDR_EXP 77
6364: PUSH
6365: LD_INT 0
6367: ST_TO_ADDR
// sComputer := false ;
6368: LD_ADDR_EXP 78
6372: PUSH
6373: LD_INT 0
6375: ST_TO_ADDR
// s30 := false ;
6376: LD_ADDR_EXP 79
6380: PUSH
6381: LD_INT 0
6383: ST_TO_ADDR
// s60 := false ;
6384: LD_ADDR_EXP 80
6388: PUSH
6389: LD_INT 0
6391: ST_TO_ADDR
// end ;
6392: LD_VAR 0 1
6396: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6397: LD_INT 0
6399: PPUSH
6400: PPUSH
6401: PPUSH
6402: PPUSH
6403: PPUSH
6404: PPUSH
6405: PPUSH
// result := [ ] ;
6406: LD_ADDR_VAR 0 2
6410: PUSH
6411: EMPTY
6412: ST_TO_ADDR
// if campaign_id = 1 then
6413: LD_OWVAR 69
6417: PUSH
6418: LD_INT 1
6420: EQUAL
6421: IFFALSE 9587
// begin case mission_number of 1 :
6423: LD_OWVAR 70
6427: PUSH
6428: LD_INT 1
6430: DOUBLE
6431: EQUAL
6432: IFTRUE 6436
6434: GO 6512
6436: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6437: LD_ADDR_VAR 0 2
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 4
6447: PUSH
6448: LD_INT 11
6450: PUSH
6451: LD_INT 12
6453: PUSH
6454: LD_INT 15
6456: PUSH
6457: LD_INT 16
6459: PUSH
6460: LD_INT 22
6462: PUSH
6463: LD_INT 23
6465: PUSH
6466: LD_INT 26
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 101
6482: PUSH
6483: LD_INT 102
6485: PUSH
6486: LD_INT 106
6488: PUSH
6489: LD_INT 116
6491: PUSH
6492: LD_INT 117
6494: PUSH
6495: LD_INT 118
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: ST_TO_ADDR
6510: GO 9585
6512: LD_INT 2
6514: DOUBLE
6515: EQUAL
6516: IFTRUE 6520
6518: GO 6604
6520: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6521: LD_ADDR_VAR 0 2
6525: PUSH
6526: LD_INT 2
6528: PUSH
6529: LD_INT 4
6531: PUSH
6532: LD_INT 11
6534: PUSH
6535: LD_INT 12
6537: PUSH
6538: LD_INT 15
6540: PUSH
6541: LD_INT 16
6543: PUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 23
6549: PUSH
6550: LD_INT 26
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: PUSH
6564: LD_INT 101
6566: PUSH
6567: LD_INT 102
6569: PUSH
6570: LD_INT 105
6572: PUSH
6573: LD_INT 106
6575: PUSH
6576: LD_INT 108
6578: PUSH
6579: LD_INT 116
6581: PUSH
6582: LD_INT 117
6584: PUSH
6585: LD_INT 118
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: ST_TO_ADDR
6602: GO 9585
6604: LD_INT 3
6606: DOUBLE
6607: EQUAL
6608: IFTRUE 6612
6610: GO 6700
6612: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6613: LD_ADDR_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: LD_INT 4
6623: PUSH
6624: LD_INT 5
6626: PUSH
6627: LD_INT 11
6629: PUSH
6630: LD_INT 12
6632: PUSH
6633: LD_INT 15
6635: PUSH
6636: LD_INT 16
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_INT 26
6644: PUSH
6645: LD_INT 36
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 101
6662: PUSH
6663: LD_INT 102
6665: PUSH
6666: LD_INT 105
6668: PUSH
6669: LD_INT 106
6671: PUSH
6672: LD_INT 108
6674: PUSH
6675: LD_INT 116
6677: PUSH
6678: LD_INT 117
6680: PUSH
6681: LD_INT 118
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: ST_TO_ADDR
6698: GO 9585
6700: LD_INT 4
6702: DOUBLE
6703: EQUAL
6704: IFTRUE 6708
6706: GO 6804
6708: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6709: LD_ADDR_VAR 0 2
6713: PUSH
6714: LD_INT 2
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: LD_INT 5
6722: PUSH
6723: LD_INT 8
6725: PUSH
6726: LD_INT 11
6728: PUSH
6729: LD_INT 12
6731: PUSH
6732: LD_INT 15
6734: PUSH
6735: LD_INT 16
6737: PUSH
6738: LD_INT 22
6740: PUSH
6741: LD_INT 23
6743: PUSH
6744: LD_INT 26
6746: PUSH
6747: LD_INT 36
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 101
6766: PUSH
6767: LD_INT 102
6769: PUSH
6770: LD_INT 105
6772: PUSH
6773: LD_INT 106
6775: PUSH
6776: LD_INT 108
6778: PUSH
6779: LD_INT 116
6781: PUSH
6782: LD_INT 117
6784: PUSH
6785: LD_INT 118
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: ST_TO_ADDR
6802: GO 9585
6804: LD_INT 5
6806: DOUBLE
6807: EQUAL
6808: IFTRUE 6812
6810: GO 6924
6812: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6813: LD_ADDR_VAR 0 2
6817: PUSH
6818: LD_INT 2
6820: PUSH
6821: LD_INT 4
6823: PUSH
6824: LD_INT 5
6826: PUSH
6827: LD_INT 6
6829: PUSH
6830: LD_INT 8
6832: PUSH
6833: LD_INT 11
6835: PUSH
6836: LD_INT 12
6838: PUSH
6839: LD_INT 15
6841: PUSH
6842: LD_INT 16
6844: PUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 23
6850: PUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 26
6856: PUSH
6857: LD_INT 36
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: PUSH
6876: LD_INT 101
6878: PUSH
6879: LD_INT 102
6881: PUSH
6882: LD_INT 105
6884: PUSH
6885: LD_INT 106
6887: PUSH
6888: LD_INT 108
6890: PUSH
6891: LD_INT 109
6893: PUSH
6894: LD_INT 112
6896: PUSH
6897: LD_INT 116
6899: PUSH
6900: LD_INT 117
6902: PUSH
6903: LD_INT 118
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: ST_TO_ADDR
6922: GO 9585
6924: LD_INT 6
6926: DOUBLE
6927: EQUAL
6928: IFTRUE 6932
6930: GO 7064
6932: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6933: LD_ADDR_VAR 0 2
6937: PUSH
6938: LD_INT 2
6940: PUSH
6941: LD_INT 4
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: LD_INT 6
6949: PUSH
6950: LD_INT 8
6952: PUSH
6953: LD_INT 11
6955: PUSH
6956: LD_INT 12
6958: PUSH
6959: LD_INT 15
6961: PUSH
6962: LD_INT 16
6964: PUSH
6965: LD_INT 20
6967: PUSH
6968: LD_INT 21
6970: PUSH
6971: LD_INT 22
6973: PUSH
6974: LD_INT 23
6976: PUSH
6977: LD_INT 25
6979: PUSH
6980: LD_INT 26
6982: PUSH
6983: LD_INT 30
6985: PUSH
6986: LD_INT 31
6988: PUSH
6989: LD_INT 32
6991: PUSH
6992: LD_INT 36
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 101
7018: PUSH
7019: LD_INT 102
7021: PUSH
7022: LD_INT 105
7024: PUSH
7025: LD_INT 106
7027: PUSH
7028: LD_INT 108
7030: PUSH
7031: LD_INT 109
7033: PUSH
7034: LD_INT 112
7036: PUSH
7037: LD_INT 116
7039: PUSH
7040: LD_INT 117
7042: PUSH
7043: LD_INT 118
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: ST_TO_ADDR
7062: GO 9585
7064: LD_INT 7
7066: DOUBLE
7067: EQUAL
7068: IFTRUE 7072
7070: GO 7184
7072: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
7073: LD_ADDR_VAR 0 2
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: LD_INT 4
7083: PUSH
7084: LD_INT 5
7086: PUSH
7087: LD_INT 7
7089: PUSH
7090: LD_INT 11
7092: PUSH
7093: LD_INT 12
7095: PUSH
7096: LD_INT 15
7098: PUSH
7099: LD_INT 16
7101: PUSH
7102: LD_INT 20
7104: PUSH
7105: LD_INT 21
7107: PUSH
7108: LD_INT 22
7110: PUSH
7111: LD_INT 23
7113: PUSH
7114: LD_INT 25
7116: PUSH
7117: LD_INT 26
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: LIST
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 101
7138: PUSH
7139: LD_INT 102
7141: PUSH
7142: LD_INT 103
7144: PUSH
7145: LD_INT 105
7147: PUSH
7148: LD_INT 106
7150: PUSH
7151: LD_INT 108
7153: PUSH
7154: LD_INT 112
7156: PUSH
7157: LD_INT 116
7159: PUSH
7160: LD_INT 117
7162: PUSH
7163: LD_INT 118
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: ST_TO_ADDR
7182: GO 9585
7184: LD_INT 8
7186: DOUBLE
7187: EQUAL
7188: IFTRUE 7192
7190: GO 7332
7192: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7193: LD_ADDR_VAR 0 2
7197: PUSH
7198: LD_INT 2
7200: PUSH
7201: LD_INT 4
7203: PUSH
7204: LD_INT 5
7206: PUSH
7207: LD_INT 6
7209: PUSH
7210: LD_INT 7
7212: PUSH
7213: LD_INT 8
7215: PUSH
7216: LD_INT 11
7218: PUSH
7219: LD_INT 12
7221: PUSH
7222: LD_INT 15
7224: PUSH
7225: LD_INT 16
7227: PUSH
7228: LD_INT 20
7230: PUSH
7231: LD_INT 21
7233: PUSH
7234: LD_INT 22
7236: PUSH
7237: LD_INT 23
7239: PUSH
7240: LD_INT 25
7242: PUSH
7243: LD_INT 26
7245: PUSH
7246: LD_INT 30
7248: PUSH
7249: LD_INT 31
7251: PUSH
7252: LD_INT 32
7254: PUSH
7255: LD_INT 36
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 101
7282: PUSH
7283: LD_INT 102
7285: PUSH
7286: LD_INT 103
7288: PUSH
7289: LD_INT 105
7291: PUSH
7292: LD_INT 106
7294: PUSH
7295: LD_INT 108
7297: PUSH
7298: LD_INT 109
7300: PUSH
7301: LD_INT 112
7303: PUSH
7304: LD_INT 116
7306: PUSH
7307: LD_INT 117
7309: PUSH
7310: LD_INT 118
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: ST_TO_ADDR
7330: GO 9585
7332: LD_INT 9
7334: DOUBLE
7335: EQUAL
7336: IFTRUE 7340
7338: GO 7488
7340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7341: LD_ADDR_VAR 0 2
7345: PUSH
7346: LD_INT 2
7348: PUSH
7349: LD_INT 4
7351: PUSH
7352: LD_INT 5
7354: PUSH
7355: LD_INT 6
7357: PUSH
7358: LD_INT 7
7360: PUSH
7361: LD_INT 8
7363: PUSH
7364: LD_INT 11
7366: PUSH
7367: LD_INT 12
7369: PUSH
7370: LD_INT 15
7372: PUSH
7373: LD_INT 16
7375: PUSH
7376: LD_INT 20
7378: PUSH
7379: LD_INT 21
7381: PUSH
7382: LD_INT 22
7384: PUSH
7385: LD_INT 23
7387: PUSH
7388: LD_INT 25
7390: PUSH
7391: LD_INT 26
7393: PUSH
7394: LD_INT 28
7396: PUSH
7397: LD_INT 30
7399: PUSH
7400: LD_INT 31
7402: PUSH
7403: LD_INT 32
7405: PUSH
7406: LD_INT 36
7408: PUSH
7409: EMPTY
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 101
7434: PUSH
7435: LD_INT 102
7437: PUSH
7438: LD_INT 103
7440: PUSH
7441: LD_INT 105
7443: PUSH
7444: LD_INT 106
7446: PUSH
7447: LD_INT 108
7449: PUSH
7450: LD_INT 109
7452: PUSH
7453: LD_INT 112
7455: PUSH
7456: LD_INT 114
7458: PUSH
7459: LD_INT 116
7461: PUSH
7462: LD_INT 117
7464: PUSH
7465: LD_INT 118
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: PUSH
7482: EMPTY
7483: LIST
7484: LIST
7485: ST_TO_ADDR
7486: GO 9585
7488: LD_INT 10
7490: DOUBLE
7491: EQUAL
7492: IFTRUE 7496
7494: GO 7692
7496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7497: LD_ADDR_VAR 0 2
7501: PUSH
7502: LD_INT 2
7504: PUSH
7505: LD_INT 4
7507: PUSH
7508: LD_INT 5
7510: PUSH
7511: LD_INT 6
7513: PUSH
7514: LD_INT 7
7516: PUSH
7517: LD_INT 8
7519: PUSH
7520: LD_INT 9
7522: PUSH
7523: LD_INT 10
7525: PUSH
7526: LD_INT 11
7528: PUSH
7529: LD_INT 12
7531: PUSH
7532: LD_INT 13
7534: PUSH
7535: LD_INT 14
7537: PUSH
7538: LD_INT 15
7540: PUSH
7541: LD_INT 16
7543: PUSH
7544: LD_INT 17
7546: PUSH
7547: LD_INT 18
7549: PUSH
7550: LD_INT 19
7552: PUSH
7553: LD_INT 20
7555: PUSH
7556: LD_INT 21
7558: PUSH
7559: LD_INT 22
7561: PUSH
7562: LD_INT 23
7564: PUSH
7565: LD_INT 24
7567: PUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 26
7573: PUSH
7574: LD_INT 28
7576: PUSH
7577: LD_INT 30
7579: PUSH
7580: LD_INT 31
7582: PUSH
7583: LD_INT 32
7585: PUSH
7586: LD_INT 36
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 101
7622: PUSH
7623: LD_INT 102
7625: PUSH
7626: LD_INT 103
7628: PUSH
7629: LD_INT 104
7631: PUSH
7632: LD_INT 105
7634: PUSH
7635: LD_INT 106
7637: PUSH
7638: LD_INT 107
7640: PUSH
7641: LD_INT 108
7643: PUSH
7644: LD_INT 109
7646: PUSH
7647: LD_INT 110
7649: PUSH
7650: LD_INT 111
7652: PUSH
7653: LD_INT 112
7655: PUSH
7656: LD_INT 114
7658: PUSH
7659: LD_INT 116
7661: PUSH
7662: LD_INT 117
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: ST_TO_ADDR
7690: GO 9585
7692: LD_INT 11
7694: DOUBLE
7695: EQUAL
7696: IFTRUE 7700
7698: GO 7904
7700: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7701: LD_ADDR_VAR 0 2
7705: PUSH
7706: LD_INT 2
7708: PUSH
7709: LD_INT 3
7711: PUSH
7712: LD_INT 4
7714: PUSH
7715: LD_INT 5
7717: PUSH
7718: LD_INT 6
7720: PUSH
7721: LD_INT 7
7723: PUSH
7724: LD_INT 8
7726: PUSH
7727: LD_INT 9
7729: PUSH
7730: LD_INT 10
7732: PUSH
7733: LD_INT 11
7735: PUSH
7736: LD_INT 12
7738: PUSH
7739: LD_INT 13
7741: PUSH
7742: LD_INT 14
7744: PUSH
7745: LD_INT 15
7747: PUSH
7748: LD_INT 16
7750: PUSH
7751: LD_INT 17
7753: PUSH
7754: LD_INT 18
7756: PUSH
7757: LD_INT 19
7759: PUSH
7760: LD_INT 20
7762: PUSH
7763: LD_INT 21
7765: PUSH
7766: LD_INT 22
7768: PUSH
7769: LD_INT 23
7771: PUSH
7772: LD_INT 24
7774: PUSH
7775: LD_INT 25
7777: PUSH
7778: LD_INT 26
7780: PUSH
7781: LD_INT 28
7783: PUSH
7784: LD_INT 30
7786: PUSH
7787: LD_INT 31
7789: PUSH
7790: LD_INT 32
7792: PUSH
7793: LD_INT 34
7795: PUSH
7796: LD_INT 36
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 101
7834: PUSH
7835: LD_INT 102
7837: PUSH
7838: LD_INT 103
7840: PUSH
7841: LD_INT 104
7843: PUSH
7844: LD_INT 105
7846: PUSH
7847: LD_INT 106
7849: PUSH
7850: LD_INT 107
7852: PUSH
7853: LD_INT 108
7855: PUSH
7856: LD_INT 109
7858: PUSH
7859: LD_INT 110
7861: PUSH
7862: LD_INT 111
7864: PUSH
7865: LD_INT 112
7867: PUSH
7868: LD_INT 114
7870: PUSH
7871: LD_INT 116
7873: PUSH
7874: LD_INT 117
7876: PUSH
7877: LD_INT 118
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: ST_TO_ADDR
7902: GO 9585
7904: LD_INT 12
7906: DOUBLE
7907: EQUAL
7908: IFTRUE 7912
7910: GO 8132
7912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7913: LD_ADDR_VAR 0 2
7917: PUSH
7918: LD_INT 1
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 3
7926: PUSH
7927: LD_INT 4
7929: PUSH
7930: LD_INT 5
7932: PUSH
7933: LD_INT 6
7935: PUSH
7936: LD_INT 7
7938: PUSH
7939: LD_INT 8
7941: PUSH
7942: LD_INT 9
7944: PUSH
7945: LD_INT 10
7947: PUSH
7948: LD_INT 11
7950: PUSH
7951: LD_INT 12
7953: PUSH
7954: LD_INT 13
7956: PUSH
7957: LD_INT 14
7959: PUSH
7960: LD_INT 15
7962: PUSH
7963: LD_INT 16
7965: PUSH
7966: LD_INT 17
7968: PUSH
7969: LD_INT 18
7971: PUSH
7972: LD_INT 19
7974: PUSH
7975: LD_INT 20
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 22
7983: PUSH
7984: LD_INT 23
7986: PUSH
7987: LD_INT 24
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 26
7995: PUSH
7996: LD_INT 27
7998: PUSH
7999: LD_INT 28
8001: PUSH
8002: LD_INT 30
8004: PUSH
8005: LD_INT 31
8007: PUSH
8008: LD_INT 32
8010: PUSH
8011: LD_INT 33
8013: PUSH
8014: LD_INT 34
8016: PUSH
8017: LD_INT 36
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: LIST
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: PUSH
8056: LD_INT 101
8058: PUSH
8059: LD_INT 102
8061: PUSH
8062: LD_INT 103
8064: PUSH
8065: LD_INT 104
8067: PUSH
8068: LD_INT 105
8070: PUSH
8071: LD_INT 106
8073: PUSH
8074: LD_INT 107
8076: PUSH
8077: LD_INT 108
8079: PUSH
8080: LD_INT 109
8082: PUSH
8083: LD_INT 110
8085: PUSH
8086: LD_INT 111
8088: PUSH
8089: LD_INT 112
8091: PUSH
8092: LD_INT 113
8094: PUSH
8095: LD_INT 114
8097: PUSH
8098: LD_INT 116
8100: PUSH
8101: LD_INT 117
8103: PUSH
8104: LD_INT 118
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: ST_TO_ADDR
8130: GO 9585
8132: LD_INT 13
8134: DOUBLE
8135: EQUAL
8136: IFTRUE 8140
8138: GO 8348
8140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: LD_INT 1
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: LD_INT 3
8154: PUSH
8155: LD_INT 4
8157: PUSH
8158: LD_INT 5
8160: PUSH
8161: LD_INT 8
8163: PUSH
8164: LD_INT 9
8166: PUSH
8167: LD_INT 10
8169: PUSH
8170: LD_INT 11
8172: PUSH
8173: LD_INT 12
8175: PUSH
8176: LD_INT 14
8178: PUSH
8179: LD_INT 15
8181: PUSH
8182: LD_INT 16
8184: PUSH
8185: LD_INT 17
8187: PUSH
8188: LD_INT 18
8190: PUSH
8191: LD_INT 19
8193: PUSH
8194: LD_INT 20
8196: PUSH
8197: LD_INT 21
8199: PUSH
8200: LD_INT 22
8202: PUSH
8203: LD_INT 23
8205: PUSH
8206: LD_INT 24
8208: PUSH
8209: LD_INT 25
8211: PUSH
8212: LD_INT 26
8214: PUSH
8215: LD_INT 27
8217: PUSH
8218: LD_INT 28
8220: PUSH
8221: LD_INT 30
8223: PUSH
8224: LD_INT 31
8226: PUSH
8227: LD_INT 32
8229: PUSH
8230: LD_INT 33
8232: PUSH
8233: LD_INT 34
8235: PUSH
8236: LD_INT 36
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: PUSH
8272: LD_INT 101
8274: PUSH
8275: LD_INT 102
8277: PUSH
8278: LD_INT 103
8280: PUSH
8281: LD_INT 104
8283: PUSH
8284: LD_INT 105
8286: PUSH
8287: LD_INT 106
8289: PUSH
8290: LD_INT 107
8292: PUSH
8293: LD_INT 108
8295: PUSH
8296: LD_INT 109
8298: PUSH
8299: LD_INT 110
8301: PUSH
8302: LD_INT 111
8304: PUSH
8305: LD_INT 112
8307: PUSH
8308: LD_INT 113
8310: PUSH
8311: LD_INT 114
8313: PUSH
8314: LD_INT 116
8316: PUSH
8317: LD_INT 117
8319: PUSH
8320: LD_INT 118
8322: PUSH
8323: EMPTY
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: ST_TO_ADDR
8346: GO 9585
8348: LD_INT 14
8350: DOUBLE
8351: EQUAL
8352: IFTRUE 8356
8354: GO 8580
8356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: LD_INT 1
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 3
8370: PUSH
8371: LD_INT 4
8373: PUSH
8374: LD_INT 5
8376: PUSH
8377: LD_INT 6
8379: PUSH
8380: LD_INT 7
8382: PUSH
8383: LD_INT 8
8385: PUSH
8386: LD_INT 9
8388: PUSH
8389: LD_INT 10
8391: PUSH
8392: LD_INT 11
8394: PUSH
8395: LD_INT 12
8397: PUSH
8398: LD_INT 13
8400: PUSH
8401: LD_INT 14
8403: PUSH
8404: LD_INT 15
8406: PUSH
8407: LD_INT 16
8409: PUSH
8410: LD_INT 17
8412: PUSH
8413: LD_INT 18
8415: PUSH
8416: LD_INT 19
8418: PUSH
8419: LD_INT 20
8421: PUSH
8422: LD_INT 21
8424: PUSH
8425: LD_INT 22
8427: PUSH
8428: LD_INT 23
8430: PUSH
8431: LD_INT 24
8433: PUSH
8434: LD_INT 25
8436: PUSH
8437: LD_INT 26
8439: PUSH
8440: LD_INT 27
8442: PUSH
8443: LD_INT 28
8445: PUSH
8446: LD_INT 29
8448: PUSH
8449: LD_INT 30
8451: PUSH
8452: LD_INT 31
8454: PUSH
8455: LD_INT 32
8457: PUSH
8458: LD_INT 33
8460: PUSH
8461: LD_INT 34
8463: PUSH
8464: LD_INT 36
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 101
8506: PUSH
8507: LD_INT 102
8509: PUSH
8510: LD_INT 103
8512: PUSH
8513: LD_INT 104
8515: PUSH
8516: LD_INT 105
8518: PUSH
8519: LD_INT 106
8521: PUSH
8522: LD_INT 107
8524: PUSH
8525: LD_INT 108
8527: PUSH
8528: LD_INT 109
8530: PUSH
8531: LD_INT 110
8533: PUSH
8534: LD_INT 111
8536: PUSH
8537: LD_INT 112
8539: PUSH
8540: LD_INT 113
8542: PUSH
8543: LD_INT 114
8545: PUSH
8546: LD_INT 116
8548: PUSH
8549: LD_INT 117
8551: PUSH
8552: LD_INT 118
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: ST_TO_ADDR
8578: GO 9585
8580: LD_INT 15
8582: DOUBLE
8583: EQUAL
8584: IFTRUE 8588
8586: GO 8812
8588: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8589: LD_ADDR_VAR 0 2
8593: PUSH
8594: LD_INT 1
8596: PUSH
8597: LD_INT 2
8599: PUSH
8600: LD_INT 3
8602: PUSH
8603: LD_INT 4
8605: PUSH
8606: LD_INT 5
8608: PUSH
8609: LD_INT 6
8611: PUSH
8612: LD_INT 7
8614: PUSH
8615: LD_INT 8
8617: PUSH
8618: LD_INT 9
8620: PUSH
8621: LD_INT 10
8623: PUSH
8624: LD_INT 11
8626: PUSH
8627: LD_INT 12
8629: PUSH
8630: LD_INT 13
8632: PUSH
8633: LD_INT 14
8635: PUSH
8636: LD_INT 15
8638: PUSH
8639: LD_INT 16
8641: PUSH
8642: LD_INT 17
8644: PUSH
8645: LD_INT 18
8647: PUSH
8648: LD_INT 19
8650: PUSH
8651: LD_INT 20
8653: PUSH
8654: LD_INT 21
8656: PUSH
8657: LD_INT 22
8659: PUSH
8660: LD_INT 23
8662: PUSH
8663: LD_INT 24
8665: PUSH
8666: LD_INT 25
8668: PUSH
8669: LD_INT 26
8671: PUSH
8672: LD_INT 27
8674: PUSH
8675: LD_INT 28
8677: PUSH
8678: LD_INT 29
8680: PUSH
8681: LD_INT 30
8683: PUSH
8684: LD_INT 31
8686: PUSH
8687: LD_INT 32
8689: PUSH
8690: LD_INT 33
8692: PUSH
8693: LD_INT 34
8695: PUSH
8696: LD_INT 36
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 101
8738: PUSH
8739: LD_INT 102
8741: PUSH
8742: LD_INT 103
8744: PUSH
8745: LD_INT 104
8747: PUSH
8748: LD_INT 105
8750: PUSH
8751: LD_INT 106
8753: PUSH
8754: LD_INT 107
8756: PUSH
8757: LD_INT 108
8759: PUSH
8760: LD_INT 109
8762: PUSH
8763: LD_INT 110
8765: PUSH
8766: LD_INT 111
8768: PUSH
8769: LD_INT 112
8771: PUSH
8772: LD_INT 113
8774: PUSH
8775: LD_INT 114
8777: PUSH
8778: LD_INT 116
8780: PUSH
8781: LD_INT 117
8783: PUSH
8784: LD_INT 118
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: ST_TO_ADDR
8810: GO 9585
8812: LD_INT 16
8814: DOUBLE
8815: EQUAL
8816: IFTRUE 8820
8818: GO 8956
8820: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8821: LD_ADDR_VAR 0 2
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: LD_INT 4
8831: PUSH
8832: LD_INT 5
8834: PUSH
8835: LD_INT 7
8837: PUSH
8838: LD_INT 11
8840: PUSH
8841: LD_INT 12
8843: PUSH
8844: LD_INT 15
8846: PUSH
8847: LD_INT 16
8849: PUSH
8850: LD_INT 20
8852: PUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 22
8858: PUSH
8859: LD_INT 23
8861: PUSH
8862: LD_INT 25
8864: PUSH
8865: LD_INT 26
8867: PUSH
8868: LD_INT 30
8870: PUSH
8871: LD_INT 31
8873: PUSH
8874: LD_INT 32
8876: PUSH
8877: LD_INT 33
8879: PUSH
8880: LD_INT 34
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 101
8906: PUSH
8907: LD_INT 102
8909: PUSH
8910: LD_INT 103
8912: PUSH
8913: LD_INT 106
8915: PUSH
8916: LD_INT 108
8918: PUSH
8919: LD_INT 112
8921: PUSH
8922: LD_INT 113
8924: PUSH
8925: LD_INT 114
8927: PUSH
8928: LD_INT 116
8930: PUSH
8931: LD_INT 117
8933: PUSH
8934: LD_INT 118
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: ST_TO_ADDR
8954: GO 9585
8956: LD_INT 17
8958: DOUBLE
8959: EQUAL
8960: IFTRUE 8964
8962: GO 9188
8964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8965: LD_ADDR_VAR 0 2
8969: PUSH
8970: LD_INT 1
8972: PUSH
8973: LD_INT 2
8975: PUSH
8976: LD_INT 3
8978: PUSH
8979: LD_INT 4
8981: PUSH
8982: LD_INT 5
8984: PUSH
8985: LD_INT 6
8987: PUSH
8988: LD_INT 7
8990: PUSH
8991: LD_INT 8
8993: PUSH
8994: LD_INT 9
8996: PUSH
8997: LD_INT 10
8999: PUSH
9000: LD_INT 11
9002: PUSH
9003: LD_INT 12
9005: PUSH
9006: LD_INT 13
9008: PUSH
9009: LD_INT 14
9011: PUSH
9012: LD_INT 15
9014: PUSH
9015: LD_INT 16
9017: PUSH
9018: LD_INT 17
9020: PUSH
9021: LD_INT 18
9023: PUSH
9024: LD_INT 19
9026: PUSH
9027: LD_INT 20
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 22
9035: PUSH
9036: LD_INT 23
9038: PUSH
9039: LD_INT 24
9041: PUSH
9042: LD_INT 25
9044: PUSH
9045: LD_INT 26
9047: PUSH
9048: LD_INT 27
9050: PUSH
9051: LD_INT 28
9053: PUSH
9054: LD_INT 29
9056: PUSH
9057: LD_INT 30
9059: PUSH
9060: LD_INT 31
9062: PUSH
9063: LD_INT 32
9065: PUSH
9066: LD_INT 33
9068: PUSH
9069: LD_INT 34
9071: PUSH
9072: LD_INT 36
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 101
9114: PUSH
9115: LD_INT 102
9117: PUSH
9118: LD_INT 103
9120: PUSH
9121: LD_INT 104
9123: PUSH
9124: LD_INT 105
9126: PUSH
9127: LD_INT 106
9129: PUSH
9130: LD_INT 107
9132: PUSH
9133: LD_INT 108
9135: PUSH
9136: LD_INT 109
9138: PUSH
9139: LD_INT 110
9141: PUSH
9142: LD_INT 111
9144: PUSH
9145: LD_INT 112
9147: PUSH
9148: LD_INT 113
9150: PUSH
9151: LD_INT 114
9153: PUSH
9154: LD_INT 116
9156: PUSH
9157: LD_INT 117
9159: PUSH
9160: LD_INT 118
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: ST_TO_ADDR
9186: GO 9585
9188: LD_INT 18
9190: DOUBLE
9191: EQUAL
9192: IFTRUE 9196
9194: GO 9344
9196: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_INT 2
9204: PUSH
9205: LD_INT 4
9207: PUSH
9208: LD_INT 5
9210: PUSH
9211: LD_INT 7
9213: PUSH
9214: LD_INT 11
9216: PUSH
9217: LD_INT 12
9219: PUSH
9220: LD_INT 15
9222: PUSH
9223: LD_INT 16
9225: PUSH
9226: LD_INT 20
9228: PUSH
9229: LD_INT 21
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 23
9237: PUSH
9238: LD_INT 25
9240: PUSH
9241: LD_INT 26
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 31
9249: PUSH
9250: LD_INT 32
9252: PUSH
9253: LD_INT 33
9255: PUSH
9256: LD_INT 34
9258: PUSH
9259: LD_INT 35
9261: PUSH
9262: LD_INT 36
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: PUSH
9288: LD_INT 101
9290: PUSH
9291: LD_INT 102
9293: PUSH
9294: LD_INT 103
9296: PUSH
9297: LD_INT 106
9299: PUSH
9300: LD_INT 108
9302: PUSH
9303: LD_INT 112
9305: PUSH
9306: LD_INT 113
9308: PUSH
9309: LD_INT 114
9311: PUSH
9312: LD_INT 115
9314: PUSH
9315: LD_INT 116
9317: PUSH
9318: LD_INT 117
9320: PUSH
9321: LD_INT 118
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: ST_TO_ADDR
9342: GO 9585
9344: LD_INT 19
9346: DOUBLE
9347: EQUAL
9348: IFTRUE 9352
9350: GO 9584
9352: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9353: LD_ADDR_VAR 0 2
9357: PUSH
9358: LD_INT 1
9360: PUSH
9361: LD_INT 2
9363: PUSH
9364: LD_INT 3
9366: PUSH
9367: LD_INT 4
9369: PUSH
9370: LD_INT 5
9372: PUSH
9373: LD_INT 6
9375: PUSH
9376: LD_INT 7
9378: PUSH
9379: LD_INT 8
9381: PUSH
9382: LD_INT 9
9384: PUSH
9385: LD_INT 10
9387: PUSH
9388: LD_INT 11
9390: PUSH
9391: LD_INT 12
9393: PUSH
9394: LD_INT 13
9396: PUSH
9397: LD_INT 14
9399: PUSH
9400: LD_INT 15
9402: PUSH
9403: LD_INT 16
9405: PUSH
9406: LD_INT 17
9408: PUSH
9409: LD_INT 18
9411: PUSH
9412: LD_INT 19
9414: PUSH
9415: LD_INT 20
9417: PUSH
9418: LD_INT 21
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 23
9426: PUSH
9427: LD_INT 24
9429: PUSH
9430: LD_INT 25
9432: PUSH
9433: LD_INT 26
9435: PUSH
9436: LD_INT 27
9438: PUSH
9439: LD_INT 28
9441: PUSH
9442: LD_INT 29
9444: PUSH
9445: LD_INT 30
9447: PUSH
9448: LD_INT 31
9450: PUSH
9451: LD_INT 32
9453: PUSH
9454: LD_INT 33
9456: PUSH
9457: LD_INT 34
9459: PUSH
9460: LD_INT 35
9462: PUSH
9463: LD_INT 36
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 101
9506: PUSH
9507: LD_INT 102
9509: PUSH
9510: LD_INT 103
9512: PUSH
9513: LD_INT 104
9515: PUSH
9516: LD_INT 105
9518: PUSH
9519: LD_INT 106
9521: PUSH
9522: LD_INT 107
9524: PUSH
9525: LD_INT 108
9527: PUSH
9528: LD_INT 109
9530: PUSH
9531: LD_INT 110
9533: PUSH
9534: LD_INT 111
9536: PUSH
9537: LD_INT 112
9539: PUSH
9540: LD_INT 113
9542: PUSH
9543: LD_INT 114
9545: PUSH
9546: LD_INT 115
9548: PUSH
9549: LD_INT 116
9551: PUSH
9552: LD_INT 117
9554: PUSH
9555: LD_INT 118
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: ST_TO_ADDR
9582: GO 9585
9584: POP
// end else
9585: GO 9816
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9587: LD_ADDR_VAR 0 2
9591: PUSH
9592: LD_INT 1
9594: PUSH
9595: LD_INT 2
9597: PUSH
9598: LD_INT 3
9600: PUSH
9601: LD_INT 4
9603: PUSH
9604: LD_INT 5
9606: PUSH
9607: LD_INT 6
9609: PUSH
9610: LD_INT 7
9612: PUSH
9613: LD_INT 8
9615: PUSH
9616: LD_INT 9
9618: PUSH
9619: LD_INT 10
9621: PUSH
9622: LD_INT 11
9624: PUSH
9625: LD_INT 12
9627: PUSH
9628: LD_INT 13
9630: PUSH
9631: LD_INT 14
9633: PUSH
9634: LD_INT 15
9636: PUSH
9637: LD_INT 16
9639: PUSH
9640: LD_INT 17
9642: PUSH
9643: LD_INT 18
9645: PUSH
9646: LD_INT 19
9648: PUSH
9649: LD_INT 20
9651: PUSH
9652: LD_INT 21
9654: PUSH
9655: LD_INT 22
9657: PUSH
9658: LD_INT 23
9660: PUSH
9661: LD_INT 24
9663: PUSH
9664: LD_INT 25
9666: PUSH
9667: LD_INT 26
9669: PUSH
9670: LD_INT 27
9672: PUSH
9673: LD_INT 28
9675: PUSH
9676: LD_INT 29
9678: PUSH
9679: LD_INT 30
9681: PUSH
9682: LD_INT 31
9684: PUSH
9685: LD_INT 32
9687: PUSH
9688: LD_INT 33
9690: PUSH
9691: LD_INT 34
9693: PUSH
9694: LD_INT 35
9696: PUSH
9697: LD_INT 36
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 101
9740: PUSH
9741: LD_INT 102
9743: PUSH
9744: LD_INT 103
9746: PUSH
9747: LD_INT 104
9749: PUSH
9750: LD_INT 105
9752: PUSH
9753: LD_INT 106
9755: PUSH
9756: LD_INT 107
9758: PUSH
9759: LD_INT 108
9761: PUSH
9762: LD_INT 109
9764: PUSH
9765: LD_INT 110
9767: PUSH
9768: LD_INT 111
9770: PUSH
9771: LD_INT 112
9773: PUSH
9774: LD_INT 113
9776: PUSH
9777: LD_INT 114
9779: PUSH
9780: LD_INT 115
9782: PUSH
9783: LD_INT 116
9785: PUSH
9786: LD_INT 117
9788: PUSH
9789: LD_INT 118
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: ST_TO_ADDR
// if result then
9816: LD_VAR 0 2
9820: IFFALSE 10606
// begin normal :=  ;
9822: LD_ADDR_VAR 0 5
9826: PUSH
9827: LD_STRING 
9829: ST_TO_ADDR
// hardcore :=  ;
9830: LD_ADDR_VAR 0 6
9834: PUSH
9835: LD_STRING 
9837: ST_TO_ADDR
// active :=  ;
9838: LD_ADDR_VAR 0 7
9842: PUSH
9843: LD_STRING 
9845: ST_TO_ADDR
// for i = 1 to normalCounter do
9846: LD_ADDR_VAR 0 8
9850: PUSH
9851: DOUBLE
9852: LD_INT 1
9854: DEC
9855: ST_TO_ADDR
9856: LD_EXP 25
9860: PUSH
9861: FOR_TO
9862: IFFALSE 9963
// begin tmp := 0 ;
9864: LD_ADDR_VAR 0 3
9868: PUSH
9869: LD_STRING 0
9871: ST_TO_ADDR
// if result [ 1 ] then
9872: LD_VAR 0 2
9876: PUSH
9877: LD_INT 1
9879: ARRAY
9880: IFFALSE 9945
// if result [ 1 ] [ 1 ] = i then
9882: LD_VAR 0 2
9886: PUSH
9887: LD_INT 1
9889: ARRAY
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PUSH
9895: LD_VAR 0 8
9899: EQUAL
9900: IFFALSE 9945
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9902: LD_ADDR_VAR 0 2
9906: PUSH
9907: LD_VAR 0 2
9911: PPUSH
9912: LD_INT 1
9914: PPUSH
9915: LD_VAR 0 2
9919: PUSH
9920: LD_INT 1
9922: ARRAY
9923: PPUSH
9924: LD_INT 1
9926: PPUSH
9927: CALL_OW 3
9931: PPUSH
9932: CALL_OW 1
9936: ST_TO_ADDR
// tmp := 1 ;
9937: LD_ADDR_VAR 0 3
9941: PUSH
9942: LD_STRING 1
9944: ST_TO_ADDR
// end ; normal := normal & tmp ;
9945: LD_ADDR_VAR 0 5
9949: PUSH
9950: LD_VAR 0 5
9954: PUSH
9955: LD_VAR 0 3
9959: STR
9960: ST_TO_ADDR
// end ;
9961: GO 9861
9963: POP
9964: POP
// for i = 1 to hardcoreCounter do
9965: LD_ADDR_VAR 0 8
9969: PUSH
9970: DOUBLE
9971: LD_INT 1
9973: DEC
9974: ST_TO_ADDR
9975: LD_EXP 26
9979: PUSH
9980: FOR_TO
9981: IFFALSE 10086
// begin tmp := 0 ;
9983: LD_ADDR_VAR 0 3
9987: PUSH
9988: LD_STRING 0
9990: ST_TO_ADDR
// if result [ 2 ] then
9991: LD_VAR 0 2
9995: PUSH
9996: LD_INT 2
9998: ARRAY
9999: IFFALSE 10068
// if result [ 2 ] [ 1 ] = 100 + i then
10001: LD_VAR 0 2
10005: PUSH
10006: LD_INT 2
10008: ARRAY
10009: PUSH
10010: LD_INT 1
10012: ARRAY
10013: PUSH
10014: LD_INT 100
10016: PUSH
10017: LD_VAR 0 8
10021: PLUS
10022: EQUAL
10023: IFFALSE 10068
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
10025: LD_ADDR_VAR 0 2
10029: PUSH
10030: LD_VAR 0 2
10034: PPUSH
10035: LD_INT 2
10037: PPUSH
10038: LD_VAR 0 2
10042: PUSH
10043: LD_INT 2
10045: ARRAY
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: CALL_OW 3
10054: PPUSH
10055: CALL_OW 1
10059: ST_TO_ADDR
// tmp := 1 ;
10060: LD_ADDR_VAR 0 3
10064: PUSH
10065: LD_STRING 1
10067: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
10068: LD_ADDR_VAR 0 6
10072: PUSH
10073: LD_VAR 0 6
10077: PUSH
10078: LD_VAR 0 3
10082: STR
10083: ST_TO_ADDR
// end ;
10084: GO 9980
10086: POP
10087: POP
// if isGameLoad then
10088: LD_VAR 0 1
10092: IFFALSE 10567
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
10094: LD_ADDR_VAR 0 4
10098: PUSH
10099: LD_EXP 29
10103: PUSH
10104: LD_EXP 28
10108: PUSH
10109: LD_EXP 30
10113: PUSH
10114: LD_EXP 27
10118: PUSH
10119: LD_EXP 31
10123: PUSH
10124: LD_EXP 32
10128: PUSH
10129: LD_EXP 33
10133: PUSH
10134: LD_EXP 34
10138: PUSH
10139: LD_EXP 35
10143: PUSH
10144: LD_EXP 36
10148: PUSH
10149: LD_EXP 37
10153: PUSH
10154: LD_EXP 38
10158: PUSH
10159: LD_EXP 39
10163: PUSH
10164: LD_EXP 40
10168: PUSH
10169: LD_EXP 48
10173: PUSH
10174: LD_EXP 49
10178: PUSH
10179: LD_EXP 50
10183: PUSH
10184: LD_EXP 51
10188: PUSH
10189: LD_EXP 53
10193: PUSH
10194: LD_EXP 54
10198: PUSH
10199: LD_EXP 55
10203: PUSH
10204: LD_EXP 58
10208: PUSH
10209: LD_EXP 60
10213: PUSH
10214: LD_EXP 61
10218: PUSH
10219: LD_EXP 62
10223: PUSH
10224: LD_EXP 64
10228: PUSH
10229: LD_EXP 65
10233: PUSH
10234: LD_EXP 68
10238: PUSH
10239: LD_EXP 69
10243: PUSH
10244: LD_EXP 70
10248: PUSH
10249: LD_EXP 71
10253: PUSH
10254: LD_EXP 72
10258: PUSH
10259: LD_EXP 73
10263: PUSH
10264: LD_EXP 74
10268: PUSH
10269: LD_EXP 75
10273: PUSH
10274: LD_EXP 76
10278: PUSH
10279: LD_EXP 41
10283: PUSH
10284: LD_EXP 42
10288: PUSH
10289: LD_EXP 45
10293: PUSH
10294: LD_EXP 46
10298: PUSH
10299: LD_EXP 47
10303: PUSH
10304: LD_EXP 43
10308: PUSH
10309: LD_EXP 44
10313: PUSH
10314: LD_EXP 52
10318: PUSH
10319: LD_EXP 56
10323: PUSH
10324: LD_EXP 57
10328: PUSH
10329: LD_EXP 59
10333: PUSH
10334: LD_EXP 63
10338: PUSH
10339: LD_EXP 66
10343: PUSH
10344: LD_EXP 67
10348: PUSH
10349: LD_EXP 77
10353: PUSH
10354: LD_EXP 78
10358: PUSH
10359: LD_EXP 79
10363: PUSH
10364: LD_EXP 80
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
// tmp :=  ;
10425: LD_ADDR_VAR 0 3
10429: PUSH
10430: LD_STRING 
10432: ST_TO_ADDR
// for i = 1 to normalCounter do
10433: LD_ADDR_VAR 0 8
10437: PUSH
10438: DOUBLE
10439: LD_INT 1
10441: DEC
10442: ST_TO_ADDR
10443: LD_EXP 25
10447: PUSH
10448: FOR_TO
10449: IFFALSE 10485
// begin if flags [ i ] then
10451: LD_VAR 0 4
10455: PUSH
10456: LD_VAR 0 8
10460: ARRAY
10461: IFFALSE 10483
// tmp := tmp & i & ; ;
10463: LD_ADDR_VAR 0 3
10467: PUSH
10468: LD_VAR 0 3
10472: PUSH
10473: LD_VAR 0 8
10477: STR
10478: PUSH
10479: LD_STRING ;
10481: STR
10482: ST_TO_ADDR
// end ;
10483: GO 10448
10485: POP
10486: POP
// for i = 1 to hardcoreCounter do
10487: LD_ADDR_VAR 0 8
10491: PUSH
10492: DOUBLE
10493: LD_INT 1
10495: DEC
10496: ST_TO_ADDR
10497: LD_EXP 26
10501: PUSH
10502: FOR_TO
10503: IFFALSE 10549
// begin if flags [ normalCounter + i ] then
10505: LD_VAR 0 4
10509: PUSH
10510: LD_EXP 25
10514: PUSH
10515: LD_VAR 0 8
10519: PLUS
10520: ARRAY
10521: IFFALSE 10547
// tmp := tmp & ( 100 + i ) & ; ;
10523: LD_ADDR_VAR 0 3
10527: PUSH
10528: LD_VAR 0 3
10532: PUSH
10533: LD_INT 100
10535: PUSH
10536: LD_VAR 0 8
10540: PLUS
10541: STR
10542: PUSH
10543: LD_STRING ;
10545: STR
10546: ST_TO_ADDR
// end ;
10547: GO 10502
10549: POP
10550: POP
// if tmp then
10551: LD_VAR 0 3
10555: IFFALSE 10567
// active := tmp ;
10557: LD_ADDR_VAR 0 7
10561: PUSH
10562: LD_VAR 0 3
10566: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10567: LD_STRING getStreamItemsFromMission("
10569: PUSH
10570: LD_VAR 0 5
10574: STR
10575: PUSH
10576: LD_STRING ","
10578: STR
10579: PUSH
10580: LD_VAR 0 6
10584: STR
10585: PUSH
10586: LD_STRING ","
10588: STR
10589: PUSH
10590: LD_VAR 0 7
10594: STR
10595: PUSH
10596: LD_STRING ")
10598: STR
10599: PPUSH
10600: CALL_OW 559
// end else
10604: GO 10613
// ToLua ( getStreamItemsFromMission("","","") ) ;
10606: LD_STRING getStreamItemsFromMission("","","")
10608: PPUSH
10609: CALL_OW 559
// end ;
10613: LD_VAR 0 2
10617: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10618: LD_EXP 24
10622: PUSH
10623: LD_EXP 29
10627: AND
10628: IFFALSE 10752
10630: GO 10632
10632: DISABLE
10633: LD_INT 0
10635: PPUSH
10636: PPUSH
// begin enable ;
10637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10638: LD_ADDR_VAR 0 2
10642: PUSH
10643: LD_INT 22
10645: PUSH
10646: LD_OWVAR 2
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: LD_INT 34
10660: PUSH
10661: LD_INT 7
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 34
10670: PUSH
10671: LD_INT 45
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 34
10680: PUSH
10681: LD_INT 28
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 34
10690: PUSH
10691: LD_INT 47
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 69
10713: ST_TO_ADDR
// if not tmp then
10714: LD_VAR 0 2
10718: NOT
10719: IFFALSE 10723
// exit ;
10721: GO 10752
// for i in tmp do
10723: LD_ADDR_VAR 0 1
10727: PUSH
10728: LD_VAR 0 2
10732: PUSH
10733: FOR_IN
10734: IFFALSE 10750
// begin SetLives ( i , 0 ) ;
10736: LD_VAR 0 1
10740: PPUSH
10741: LD_INT 0
10743: PPUSH
10744: CALL_OW 234
// end ;
10748: GO 10733
10750: POP
10751: POP
// end ;
10752: PPOPN 2
10754: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10755: LD_EXP 24
10759: PUSH
10760: LD_EXP 30
10764: AND
10765: IFFALSE 10849
10767: GO 10769
10769: DISABLE
10770: LD_INT 0
10772: PPUSH
10773: PPUSH
// begin enable ;
10774: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10775: LD_ADDR_VAR 0 2
10779: PUSH
10780: LD_INT 22
10782: PUSH
10783: LD_OWVAR 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 32
10794: PUSH
10795: LD_INT 3
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PPUSH
10806: CALL_OW 69
10810: ST_TO_ADDR
// if not tmp then
10811: LD_VAR 0 2
10815: NOT
10816: IFFALSE 10820
// exit ;
10818: GO 10849
// for i in tmp do
10820: LD_ADDR_VAR 0 1
10824: PUSH
10825: LD_VAR 0 2
10829: PUSH
10830: FOR_IN
10831: IFFALSE 10847
// begin SetLives ( i , 0 ) ;
10833: LD_VAR 0 1
10837: PPUSH
10838: LD_INT 0
10840: PPUSH
10841: CALL_OW 234
// end ;
10845: GO 10830
10847: POP
10848: POP
// end ;
10849: PPOPN 2
10851: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10852: LD_EXP 24
10856: PUSH
10857: LD_EXP 27
10861: AND
10862: IFFALSE 10955
10864: GO 10866
10866: DISABLE
10867: LD_INT 0
10869: PPUSH
// begin enable ;
10870: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10871: LD_ADDR_VAR 0 1
10875: PUSH
10876: LD_INT 22
10878: PUSH
10879: LD_OWVAR 2
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 25
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 9
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: LD_INT 25
10913: PUSH
10914: LD_INT 8
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PPUSH
10931: CALL_OW 69
10935: PUSH
10936: FOR_IN
10937: IFFALSE 10953
// begin SetClass ( i , 1 ) ;
10939: LD_VAR 0 1
10943: PPUSH
10944: LD_INT 1
10946: PPUSH
10947: CALL_OW 336
// end ;
10951: GO 10936
10953: POP
10954: POP
// end ;
10955: PPOPN 1
10957: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10958: LD_EXP 24
10962: PUSH
10963: LD_EXP 28
10967: AND
10968: PUSH
10969: LD_OWVAR 65
10973: PUSH
10974: LD_INT 7
10976: LESS
10977: AND
10978: IFFALSE 10992
10980: GO 10982
10982: DISABLE
// begin enable ;
10983: ENABLE
// game_speed := 7 ;
10984: LD_ADDR_OWVAR 65
10988: PUSH
10989: LD_INT 7
10991: ST_TO_ADDR
// end ;
10992: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10993: LD_EXP 24
10997: PUSH
10998: LD_EXP 31
11002: AND
11003: IFFALSE 11205
11005: GO 11007
11007: DISABLE
11008: LD_INT 0
11010: PPUSH
11011: PPUSH
11012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
11013: LD_ADDR_VAR 0 3
11017: PUSH
11018: LD_INT 81
11020: PUSH
11021: LD_OWVAR 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 21
11032: PUSH
11033: LD_INT 1
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 69
11048: ST_TO_ADDR
// if not tmp then
11049: LD_VAR 0 3
11053: NOT
11054: IFFALSE 11058
// exit ;
11056: GO 11205
// if tmp > 5 then
11058: LD_VAR 0 3
11062: PUSH
11063: LD_INT 5
11065: GREATER
11066: IFFALSE 11078
// k := 5 else
11068: LD_ADDR_VAR 0 2
11072: PUSH
11073: LD_INT 5
11075: ST_TO_ADDR
11076: GO 11088
// k := tmp ;
11078: LD_ADDR_VAR 0 2
11082: PUSH
11083: LD_VAR 0 3
11087: ST_TO_ADDR
// for i := 1 to k do
11088: LD_ADDR_VAR 0 1
11092: PUSH
11093: DOUBLE
11094: LD_INT 1
11096: DEC
11097: ST_TO_ADDR
11098: LD_VAR 0 2
11102: PUSH
11103: FOR_TO
11104: IFFALSE 11203
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
11106: LD_VAR 0 3
11110: PUSH
11111: LD_VAR 0 1
11115: ARRAY
11116: PPUSH
11117: LD_VAR 0 1
11121: PUSH
11122: LD_INT 4
11124: MOD
11125: PUSH
11126: LD_INT 1
11128: PLUS
11129: PPUSH
11130: CALL_OW 259
11134: PUSH
11135: LD_INT 10
11137: LESS
11138: IFFALSE 11201
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
11140: LD_VAR 0 3
11144: PUSH
11145: LD_VAR 0 1
11149: ARRAY
11150: PPUSH
11151: LD_VAR 0 1
11155: PUSH
11156: LD_INT 4
11158: MOD
11159: PUSH
11160: LD_INT 1
11162: PLUS
11163: PPUSH
11164: LD_VAR 0 3
11168: PUSH
11169: LD_VAR 0 1
11173: ARRAY
11174: PPUSH
11175: LD_VAR 0 1
11179: PUSH
11180: LD_INT 4
11182: MOD
11183: PUSH
11184: LD_INT 1
11186: PLUS
11187: PPUSH
11188: CALL_OW 259
11192: PUSH
11193: LD_INT 1
11195: PLUS
11196: PPUSH
11197: CALL_OW 237
11201: GO 11103
11203: POP
11204: POP
// end ;
11205: PPOPN 3
11207: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11208: LD_EXP 24
11212: PUSH
11213: LD_EXP 32
11217: AND
11218: IFFALSE 11238
11220: GO 11222
11222: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11223: LD_INT 4
11225: PPUSH
11226: LD_OWVAR 2
11230: PPUSH
11231: LD_INT 0
11233: PPUSH
11234: CALL_OW 324
11238: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11239: LD_EXP 24
11243: PUSH
11244: LD_EXP 61
11248: AND
11249: IFFALSE 11269
11251: GO 11253
11253: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11254: LD_INT 19
11256: PPUSH
11257: LD_OWVAR 2
11261: PPUSH
11262: LD_INT 0
11264: PPUSH
11265: CALL_OW 324
11269: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11270: LD_EXP 24
11274: PUSH
11275: LD_EXP 33
11279: AND
11280: IFFALSE 11382
11282: GO 11284
11284: DISABLE
11285: LD_INT 0
11287: PPUSH
11288: PPUSH
// begin enable ;
11289: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11290: LD_ADDR_VAR 0 2
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_OWVAR 2
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 2
11309: PUSH
11310: LD_INT 34
11312: PUSH
11313: LD_INT 11
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 34
11322: PUSH
11323: LD_INT 30
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PPUSH
11339: CALL_OW 69
11343: ST_TO_ADDR
// if not tmp then
11344: LD_VAR 0 2
11348: NOT
11349: IFFALSE 11353
// exit ;
11351: GO 11382
// for i in tmp do
11353: LD_ADDR_VAR 0 1
11357: PUSH
11358: LD_VAR 0 2
11362: PUSH
11363: FOR_IN
11364: IFFALSE 11380
// begin SetLives ( i , 0 ) ;
11366: LD_VAR 0 1
11370: PPUSH
11371: LD_INT 0
11373: PPUSH
11374: CALL_OW 234
// end ;
11378: GO 11363
11380: POP
11381: POP
// end ;
11382: PPOPN 2
11384: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11385: LD_EXP 24
11389: PUSH
11390: LD_EXP 34
11394: AND
11395: IFFALSE 11415
11397: GO 11399
11399: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11400: LD_INT 32
11402: PPUSH
11403: LD_OWVAR 2
11407: PPUSH
11408: LD_INT 0
11410: PPUSH
11411: CALL_OW 324
11415: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11416: LD_EXP 24
11420: PUSH
11421: LD_EXP 35
11425: AND
11426: IFFALSE 11607
11428: GO 11430
11430: DISABLE
11431: LD_INT 0
11433: PPUSH
11434: PPUSH
11435: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11436: LD_ADDR_VAR 0 2
11440: PUSH
11441: LD_INT 22
11443: PUSH
11444: LD_OWVAR 2
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 33
11455: PUSH
11456: LD_INT 3
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PPUSH
11467: CALL_OW 69
11471: ST_TO_ADDR
// if not tmp then
11472: LD_VAR 0 2
11476: NOT
11477: IFFALSE 11481
// exit ;
11479: GO 11607
// side := 0 ;
11481: LD_ADDR_VAR 0 3
11485: PUSH
11486: LD_INT 0
11488: ST_TO_ADDR
// for i := 1 to 8 do
11489: LD_ADDR_VAR 0 1
11493: PUSH
11494: DOUBLE
11495: LD_INT 1
11497: DEC
11498: ST_TO_ADDR
11499: LD_INT 8
11501: PUSH
11502: FOR_TO
11503: IFFALSE 11551
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11505: LD_OWVAR 2
11509: PUSH
11510: LD_VAR 0 1
11514: NONEQUAL
11515: PUSH
11516: LD_OWVAR 2
11520: PPUSH
11521: LD_VAR 0 1
11525: PPUSH
11526: CALL_OW 81
11530: PUSH
11531: LD_INT 2
11533: EQUAL
11534: AND
11535: IFFALSE 11549
// begin side := i ;
11537: LD_ADDR_VAR 0 3
11541: PUSH
11542: LD_VAR 0 1
11546: ST_TO_ADDR
// break ;
11547: GO 11551
// end ;
11549: GO 11502
11551: POP
11552: POP
// if not side then
11553: LD_VAR 0 3
11557: NOT
11558: IFFALSE 11562
// exit ;
11560: GO 11607
// for i := 1 to tmp do
11562: LD_ADDR_VAR 0 1
11566: PUSH
11567: DOUBLE
11568: LD_INT 1
11570: DEC
11571: ST_TO_ADDR
11572: LD_VAR 0 2
11576: PUSH
11577: FOR_TO
11578: IFFALSE 11605
// if Prob ( 60 ) then
11580: LD_INT 60
11582: PPUSH
11583: CALL_OW 13
11587: IFFALSE 11603
// SetSide ( i , side ) ;
11589: LD_VAR 0 1
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: CALL_OW 235
11603: GO 11577
11605: POP
11606: POP
// end ;
11607: PPOPN 3
11609: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11610: LD_EXP 24
11614: PUSH
11615: LD_EXP 37
11619: AND
11620: IFFALSE 11739
11622: GO 11624
11624: DISABLE
11625: LD_INT 0
11627: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11628: LD_ADDR_VAR 0 1
11632: PUSH
11633: LD_INT 22
11635: PUSH
11636: LD_OWVAR 2
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 21
11647: PUSH
11648: LD_INT 1
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 3
11657: PUSH
11658: LD_INT 23
11660: PUSH
11661: LD_INT 0
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: PPUSH
11677: CALL_OW 69
11681: PUSH
11682: FOR_IN
11683: IFFALSE 11737
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11685: LD_VAR 0 1
11689: PPUSH
11690: CALL_OW 257
11694: PUSH
11695: LD_INT 1
11697: PUSH
11698: LD_INT 2
11700: PUSH
11701: LD_INT 3
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: IN
11713: IFFALSE 11735
// SetClass ( un , rand ( 1 , 4 ) ) ;
11715: LD_VAR 0 1
11719: PPUSH
11720: LD_INT 1
11722: PPUSH
11723: LD_INT 4
11725: PPUSH
11726: CALL_OW 12
11730: PPUSH
11731: CALL_OW 336
11735: GO 11682
11737: POP
11738: POP
// end ;
11739: PPOPN 1
11741: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11742: LD_EXP 24
11746: PUSH
11747: LD_EXP 36
11751: AND
11752: IFFALSE 11831
11754: GO 11756
11756: DISABLE
11757: LD_INT 0
11759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11760: LD_ADDR_VAR 0 1
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_OWVAR 2
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 21
11779: PUSH
11780: LD_INT 3
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PPUSH
11791: CALL_OW 69
11795: ST_TO_ADDR
// if not tmp then
11796: LD_VAR 0 1
11800: NOT
11801: IFFALSE 11805
// exit ;
11803: GO 11831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11805: LD_VAR 0 1
11809: PUSH
11810: LD_INT 1
11812: PPUSH
11813: LD_VAR 0 1
11817: PPUSH
11818: CALL_OW 12
11822: ARRAY
11823: PPUSH
11824: LD_INT 100
11826: PPUSH
11827: CALL_OW 234
// end ;
11831: PPOPN 1
11833: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11834: LD_EXP 24
11838: PUSH
11839: LD_EXP 38
11843: AND
11844: IFFALSE 11942
11846: GO 11848
11848: DISABLE
11849: LD_INT 0
11851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11852: LD_ADDR_VAR 0 1
11856: PUSH
11857: LD_INT 22
11859: PUSH
11860: LD_OWVAR 2
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 21
11871: PUSH
11872: LD_INT 1
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PPUSH
11883: CALL_OW 69
11887: ST_TO_ADDR
// if not tmp then
11888: LD_VAR 0 1
11892: NOT
11893: IFFALSE 11897
// exit ;
11895: GO 11942
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11897: LD_VAR 0 1
11901: PUSH
11902: LD_INT 1
11904: PPUSH
11905: LD_VAR 0 1
11909: PPUSH
11910: CALL_OW 12
11914: ARRAY
11915: PPUSH
11916: LD_INT 1
11918: PPUSH
11919: LD_INT 4
11921: PPUSH
11922: CALL_OW 12
11926: PPUSH
11927: LD_INT 3000
11929: PPUSH
11930: LD_INT 9000
11932: PPUSH
11933: CALL_OW 12
11937: PPUSH
11938: CALL_OW 492
// end ;
11942: PPOPN 1
11944: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11945: LD_EXP 24
11949: PUSH
11950: LD_EXP 39
11954: AND
11955: IFFALSE 11975
11957: GO 11959
11959: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11960: LD_INT 1
11962: PPUSH
11963: LD_OWVAR 2
11967: PPUSH
11968: LD_INT 0
11970: PPUSH
11971: CALL_OW 324
11975: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11976: LD_EXP 24
11980: PUSH
11981: LD_EXP 40
11985: AND
11986: IFFALSE 12069
11988: GO 11990
11990: DISABLE
11991: LD_INT 0
11993: PPUSH
11994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11995: LD_ADDR_VAR 0 2
11999: PUSH
12000: LD_INT 22
12002: PUSH
12003: LD_OWVAR 2
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 21
12014: PUSH
12015: LD_INT 3
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PPUSH
12026: CALL_OW 69
12030: ST_TO_ADDR
// if not tmp then
12031: LD_VAR 0 2
12035: NOT
12036: IFFALSE 12040
// exit ;
12038: GO 12069
// for i in tmp do
12040: LD_ADDR_VAR 0 1
12044: PUSH
12045: LD_VAR 0 2
12049: PUSH
12050: FOR_IN
12051: IFFALSE 12067
// SetBLevel ( i , 10 ) ;
12053: LD_VAR 0 1
12057: PPUSH
12058: LD_INT 10
12060: PPUSH
12061: CALL_OW 241
12065: GO 12050
12067: POP
12068: POP
// end ;
12069: PPOPN 2
12071: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
12072: LD_EXP 24
12076: PUSH
12077: LD_EXP 41
12081: AND
12082: IFFALSE 12193
12084: GO 12086
12086: DISABLE
12087: LD_INT 0
12089: PPUSH
12090: PPUSH
12091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12092: LD_ADDR_VAR 0 3
12096: PUSH
12097: LD_INT 22
12099: PUSH
12100: LD_OWVAR 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 25
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PPUSH
12123: CALL_OW 69
12127: ST_TO_ADDR
// if not tmp then
12128: LD_VAR 0 3
12132: NOT
12133: IFFALSE 12137
// exit ;
12135: GO 12193
// un := tmp [ rand ( 1 , tmp ) ] ;
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_VAR 0 3
12146: PUSH
12147: LD_INT 1
12149: PPUSH
12150: LD_VAR 0 3
12154: PPUSH
12155: CALL_OW 12
12159: ARRAY
12160: ST_TO_ADDR
// if Crawls ( un ) then
12161: LD_VAR 0 2
12165: PPUSH
12166: CALL_OW 318
12170: IFFALSE 12181
// ComWalk ( un ) ;
12172: LD_VAR 0 2
12176: PPUSH
12177: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12181: LD_VAR 0 2
12185: PPUSH
12186: LD_INT 5
12188: PPUSH
12189: CALL_OW 336
// end ;
12193: PPOPN 3
12195: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12196: LD_EXP 24
12200: PUSH
12201: LD_EXP 42
12205: AND
12206: PUSH
12207: LD_OWVAR 67
12211: PUSH
12212: LD_INT 4
12214: LESS
12215: AND
12216: IFFALSE 12235
12218: GO 12220
12220: DISABLE
// begin Difficulty := Difficulty + 1 ;
12221: LD_ADDR_OWVAR 67
12225: PUSH
12226: LD_OWVAR 67
12230: PUSH
12231: LD_INT 1
12233: PLUS
12234: ST_TO_ADDR
// end ;
12235: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12236: LD_EXP 24
12240: PUSH
12241: LD_EXP 43
12245: AND
12246: IFFALSE 12349
12248: GO 12250
12250: DISABLE
12251: LD_INT 0
12253: PPUSH
// begin for i := 1 to 5 do
12254: LD_ADDR_VAR 0 1
12258: PUSH
12259: DOUBLE
12260: LD_INT 1
12262: DEC
12263: ST_TO_ADDR
12264: LD_INT 5
12266: PUSH
12267: FOR_TO
12268: IFFALSE 12347
// begin uc_nation := nation_nature ;
12270: LD_ADDR_OWVAR 21
12274: PUSH
12275: LD_INT 0
12277: ST_TO_ADDR
// uc_side := 0 ;
12278: LD_ADDR_OWVAR 20
12282: PUSH
12283: LD_INT 0
12285: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12286: LD_ADDR_OWVAR 29
12290: PUSH
12291: LD_INT 12
12293: PUSH
12294: LD_INT 12
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: ST_TO_ADDR
// hc_agressivity := 20 ;
12301: LD_ADDR_OWVAR 35
12305: PUSH
12306: LD_INT 20
12308: ST_TO_ADDR
// hc_class := class_tiger ;
12309: LD_ADDR_OWVAR 28
12313: PUSH
12314: LD_INT 14
12316: ST_TO_ADDR
// hc_gallery :=  ;
12317: LD_ADDR_OWVAR 33
12321: PUSH
12322: LD_STRING 
12324: ST_TO_ADDR
// hc_name :=  ;
12325: LD_ADDR_OWVAR 26
12329: PUSH
12330: LD_STRING 
12332: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12333: CALL_OW 44
12337: PPUSH
12338: LD_INT 0
12340: PPUSH
12341: CALL_OW 51
// end ;
12345: GO 12267
12347: POP
12348: POP
// end ;
12349: PPOPN 1
12351: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12352: LD_EXP 24
12356: PUSH
12357: LD_EXP 44
12361: AND
12362: IFFALSE 12371
12364: GO 12366
12366: DISABLE
// StreamSibBomb ;
12367: CALL 12372 0 0
12371: END
// export function StreamSibBomb ; var i , x , y ; begin
12372: LD_INT 0
12374: PPUSH
12375: PPUSH
12376: PPUSH
12377: PPUSH
// result := false ;
12378: LD_ADDR_VAR 0 1
12382: PUSH
12383: LD_INT 0
12385: ST_TO_ADDR
// for i := 1 to 16 do
12386: LD_ADDR_VAR 0 2
12390: PUSH
12391: DOUBLE
12392: LD_INT 1
12394: DEC
12395: ST_TO_ADDR
12396: LD_INT 16
12398: PUSH
12399: FOR_TO
12400: IFFALSE 12599
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12402: LD_ADDR_VAR 0 3
12406: PUSH
12407: LD_INT 10
12409: PUSH
12410: LD_INT 20
12412: PUSH
12413: LD_INT 30
12415: PUSH
12416: LD_INT 40
12418: PUSH
12419: LD_INT 50
12421: PUSH
12422: LD_INT 60
12424: PUSH
12425: LD_INT 70
12427: PUSH
12428: LD_INT 80
12430: PUSH
12431: LD_INT 90
12433: PUSH
12434: LD_INT 100
12436: PUSH
12437: LD_INT 110
12439: PUSH
12440: LD_INT 120
12442: PUSH
12443: LD_INT 130
12445: PUSH
12446: LD_INT 140
12448: PUSH
12449: LD_INT 150
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 1
12471: PPUSH
12472: LD_INT 15
12474: PPUSH
12475: CALL_OW 12
12479: ARRAY
12480: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12481: LD_ADDR_VAR 0 4
12485: PUSH
12486: LD_INT 10
12488: PUSH
12489: LD_INT 20
12491: PUSH
12492: LD_INT 30
12494: PUSH
12495: LD_INT 40
12497: PUSH
12498: LD_INT 50
12500: PUSH
12501: LD_INT 60
12503: PUSH
12504: LD_INT 70
12506: PUSH
12507: LD_INT 80
12509: PUSH
12510: LD_INT 90
12512: PUSH
12513: LD_INT 100
12515: PUSH
12516: LD_INT 110
12518: PUSH
12519: LD_INT 120
12521: PUSH
12522: LD_INT 130
12524: PUSH
12525: LD_INT 140
12527: PUSH
12528: LD_INT 150
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 1
12550: PPUSH
12551: LD_INT 15
12553: PPUSH
12554: CALL_OW 12
12558: ARRAY
12559: ST_TO_ADDR
// if ValidHex ( x , y ) then
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_VAR 0 4
12569: PPUSH
12570: CALL_OW 488
12574: IFFALSE 12597
// begin result := [ x , y ] ;
12576: LD_ADDR_VAR 0 1
12580: PUSH
12581: LD_VAR 0 3
12585: PUSH
12586: LD_VAR 0 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: ST_TO_ADDR
// break ;
12595: GO 12599
// end ; end ;
12597: GO 12399
12599: POP
12600: POP
// if result then
12601: LD_VAR 0 1
12605: IFFALSE 12665
// begin ToLua ( playSibBomb() ) ;
12607: LD_STRING playSibBomb()
12609: PPUSH
12610: CALL_OW 559
// wait ( 0 0$14 ) ;
12614: LD_INT 490
12616: PPUSH
12617: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12621: LD_VAR 0 1
12625: PUSH
12626: LD_INT 1
12628: ARRAY
12629: PPUSH
12630: LD_VAR 0 1
12634: PUSH
12635: LD_INT 2
12637: ARRAY
12638: PPUSH
12639: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12643: LD_VAR 0 1
12647: PUSH
12648: LD_INT 1
12650: ARRAY
12651: PPUSH
12652: LD_VAR 0 1
12656: PUSH
12657: LD_INT 2
12659: ARRAY
12660: PPUSH
12661: CALL_OW 429
// end ; end ;
12665: LD_VAR 0 1
12669: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12670: LD_EXP 24
12674: PUSH
12675: LD_EXP 46
12679: AND
12680: IFFALSE 12692
12682: GO 12684
12684: DISABLE
// YouLost (  ) ;
12685: LD_STRING 
12687: PPUSH
12688: CALL_OW 104
12692: END
// every 0 0$1 trigger StreamModeActive and sFog do
12693: LD_EXP 24
12697: PUSH
12698: LD_EXP 45
12702: AND
12703: IFFALSE 12717
12705: GO 12707
12707: DISABLE
// FogOff ( your_side ) ;
12708: LD_OWVAR 2
12712: PPUSH
12713: CALL_OW 344
12717: END
// every 0 0$1 trigger StreamModeActive and sSun do
12718: LD_EXP 24
12722: PUSH
12723: LD_EXP 47
12727: AND
12728: IFFALSE 12756
12730: GO 12732
12732: DISABLE
// begin solar_recharge_percent := 0 ;
12733: LD_ADDR_OWVAR 79
12737: PUSH
12738: LD_INT 0
12740: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12741: LD_INT 10500
12743: PPUSH
12744: CALL_OW 67
// solar_recharge_percent := 100 ;
12748: LD_ADDR_OWVAR 79
12752: PUSH
12753: LD_INT 100
12755: ST_TO_ADDR
// end ;
12756: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12757: LD_EXP 24
12761: PUSH
12762: LD_EXP 48
12766: AND
12767: IFFALSE 13006
12769: GO 12771
12771: DISABLE
12772: LD_INT 0
12774: PPUSH
12775: PPUSH
12776: PPUSH
// begin tmp := [ ] ;
12777: LD_ADDR_VAR 0 3
12781: PUSH
12782: EMPTY
12783: ST_TO_ADDR
// for i := 1 to 6 do
12784: LD_ADDR_VAR 0 1
12788: PUSH
12789: DOUBLE
12790: LD_INT 1
12792: DEC
12793: ST_TO_ADDR
12794: LD_INT 6
12796: PUSH
12797: FOR_TO
12798: IFFALSE 12903
// begin uc_nation := nation_nature ;
12800: LD_ADDR_OWVAR 21
12804: PUSH
12805: LD_INT 0
12807: ST_TO_ADDR
// uc_side := 0 ;
12808: LD_ADDR_OWVAR 20
12812: PUSH
12813: LD_INT 0
12815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12816: LD_ADDR_OWVAR 29
12820: PUSH
12821: LD_INT 12
12823: PUSH
12824: LD_INT 12
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: ST_TO_ADDR
// hc_agressivity := 20 ;
12831: LD_ADDR_OWVAR 35
12835: PUSH
12836: LD_INT 20
12838: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12839: LD_ADDR_OWVAR 28
12843: PUSH
12844: LD_INT 17
12846: ST_TO_ADDR
// hc_gallery :=  ;
12847: LD_ADDR_OWVAR 33
12851: PUSH
12852: LD_STRING 
12854: ST_TO_ADDR
// hc_name :=  ;
12855: LD_ADDR_OWVAR 26
12859: PUSH
12860: LD_STRING 
12862: ST_TO_ADDR
// un := CreateHuman ;
12863: LD_ADDR_VAR 0 2
12867: PUSH
12868: CALL_OW 44
12872: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12873: LD_VAR 0 2
12877: PPUSH
12878: LD_INT 1
12880: PPUSH
12881: CALL_OW 51
// tmp := tmp ^ un ;
12885: LD_ADDR_VAR 0 3
12889: PUSH
12890: LD_VAR 0 3
12894: PUSH
12895: LD_VAR 0 2
12899: ADD
12900: ST_TO_ADDR
// end ;
12901: GO 12797
12903: POP
12904: POP
// repeat wait ( 0 0$1 ) ;
12905: LD_INT 35
12907: PPUSH
12908: CALL_OW 67
// for un in tmp do
12912: LD_ADDR_VAR 0 2
12916: PUSH
12917: LD_VAR 0 3
12921: PUSH
12922: FOR_IN
12923: IFFALSE 12997
// begin if IsDead ( un ) then
12925: LD_VAR 0 2
12929: PPUSH
12930: CALL_OW 301
12934: IFFALSE 12954
// begin tmp := tmp diff un ;
12936: LD_ADDR_VAR 0 3
12940: PUSH
12941: LD_VAR 0 3
12945: PUSH
12946: LD_VAR 0 2
12950: DIFF
12951: ST_TO_ADDR
// continue ;
12952: GO 12922
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12954: LD_VAR 0 2
12958: PPUSH
12959: LD_INT 3
12961: PUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 0
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PPUSH
12976: CALL_OW 69
12980: PPUSH
12981: LD_VAR 0 2
12985: PPUSH
12986: CALL_OW 74
12990: PPUSH
12991: CALL_OW 115
// end ;
12995: GO 12922
12997: POP
12998: POP
// until not tmp ;
12999: LD_VAR 0 3
13003: NOT
13004: IFFALSE 12905
// end ;
13006: PPOPN 3
13008: END
// every 0 0$1 trigger StreamModeActive and sTroll do
13009: LD_EXP 24
13013: PUSH
13014: LD_EXP 49
13018: AND
13019: IFFALSE 13073
13021: GO 13023
13023: DISABLE
// begin ToLua ( displayTroll(); ) ;
13024: LD_STRING displayTroll();
13026: PPUSH
13027: CALL_OW 559
// wait ( 3 3$00 ) ;
13031: LD_INT 6300
13033: PPUSH
13034: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13038: LD_STRING hideTroll();
13040: PPUSH
13041: CALL_OW 559
// wait ( 1 1$00 ) ;
13045: LD_INT 2100
13047: PPUSH
13048: CALL_OW 67
// ToLua ( displayTroll(); ) ;
13052: LD_STRING displayTroll();
13054: PPUSH
13055: CALL_OW 559
// wait ( 1 1$00 ) ;
13059: LD_INT 2100
13061: PPUSH
13062: CALL_OW 67
// ToLua ( hideTroll(); ) ;
13066: LD_STRING hideTroll();
13068: PPUSH
13069: CALL_OW 559
// end ;
13073: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
13074: LD_EXP 24
13078: PUSH
13079: LD_EXP 50
13083: AND
13084: IFFALSE 13147
13086: GO 13088
13088: DISABLE
13089: LD_INT 0
13091: PPUSH
// begin p := 0 ;
13092: LD_ADDR_VAR 0 1
13096: PUSH
13097: LD_INT 0
13099: ST_TO_ADDR
// repeat game_speed := 1 ;
13100: LD_ADDR_OWVAR 65
13104: PUSH
13105: LD_INT 1
13107: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13108: LD_INT 35
13110: PPUSH
13111: CALL_OW 67
// p := p + 1 ;
13115: LD_ADDR_VAR 0 1
13119: PUSH
13120: LD_VAR 0 1
13124: PUSH
13125: LD_INT 1
13127: PLUS
13128: ST_TO_ADDR
// until p >= 60 ;
13129: LD_VAR 0 1
13133: PUSH
13134: LD_INT 60
13136: GREATEREQUAL
13137: IFFALSE 13100
// game_speed := 4 ;
13139: LD_ADDR_OWVAR 65
13143: PUSH
13144: LD_INT 4
13146: ST_TO_ADDR
// end ;
13147: PPOPN 1
13149: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13150: LD_EXP 24
13154: PUSH
13155: LD_EXP 51
13159: AND
13160: IFFALSE 13306
13162: GO 13164
13164: DISABLE
13165: LD_INT 0
13167: PPUSH
13168: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13169: LD_ADDR_VAR 0 1
13173: PUSH
13174: LD_INT 22
13176: PUSH
13177: LD_OWVAR 2
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 2
13188: PUSH
13189: LD_INT 30
13191: PUSH
13192: LD_INT 0
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 30
13201: PUSH
13202: LD_INT 1
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PPUSH
13218: CALL_OW 69
13222: ST_TO_ADDR
// if not depot then
13223: LD_VAR 0 1
13227: NOT
13228: IFFALSE 13232
// exit ;
13230: GO 13306
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13232: LD_ADDR_VAR 0 2
13236: PUSH
13237: LD_VAR 0 1
13241: PUSH
13242: LD_INT 1
13244: PPUSH
13245: LD_VAR 0 1
13249: PPUSH
13250: CALL_OW 12
13254: ARRAY
13255: PPUSH
13256: CALL_OW 274
13260: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13261: LD_VAR 0 2
13265: PPUSH
13266: LD_INT 1
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13276: LD_VAR 0 2
13280: PPUSH
13281: LD_INT 2
13283: PPUSH
13284: LD_INT 0
13286: PPUSH
13287: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13291: LD_VAR 0 2
13295: PPUSH
13296: LD_INT 3
13298: PPUSH
13299: LD_INT 0
13301: PPUSH
13302: CALL_OW 277
// end ;
13306: PPOPN 2
13308: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13309: LD_EXP 24
13313: PUSH
13314: LD_EXP 52
13318: AND
13319: IFFALSE 13416
13321: GO 13323
13323: DISABLE
13324: LD_INT 0
13326: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13327: LD_ADDR_VAR 0 1
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_OWVAR 2
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 21
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 3
13356: PUSH
13357: LD_INT 23
13359: PUSH
13360: LD_INT 0
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: PPUSH
13376: CALL_OW 69
13380: ST_TO_ADDR
// if not tmp then
13381: LD_VAR 0 1
13385: NOT
13386: IFFALSE 13390
// exit ;
13388: GO 13416
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13390: LD_VAR 0 1
13394: PUSH
13395: LD_INT 1
13397: PPUSH
13398: LD_VAR 0 1
13402: PPUSH
13403: CALL_OW 12
13407: ARRAY
13408: PPUSH
13409: LD_INT 200
13411: PPUSH
13412: CALL_OW 234
// end ;
13416: PPOPN 1
13418: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13419: LD_EXP 24
13423: PUSH
13424: LD_EXP 53
13428: AND
13429: IFFALSE 13508
13431: GO 13433
13433: DISABLE
13434: LD_INT 0
13436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13437: LD_ADDR_VAR 0 1
13441: PUSH
13442: LD_INT 22
13444: PUSH
13445: LD_OWVAR 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 21
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PPUSH
13468: CALL_OW 69
13472: ST_TO_ADDR
// if not tmp then
13473: LD_VAR 0 1
13477: NOT
13478: IFFALSE 13482
// exit ;
13480: GO 13508
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13482: LD_VAR 0 1
13486: PUSH
13487: LD_INT 1
13489: PPUSH
13490: LD_VAR 0 1
13494: PPUSH
13495: CALL_OW 12
13499: ARRAY
13500: PPUSH
13501: LD_INT 60
13503: PPUSH
13504: CALL_OW 234
// end ;
13508: PPOPN 1
13510: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13511: LD_EXP 24
13515: PUSH
13516: LD_EXP 54
13520: AND
13521: IFFALSE 13620
13523: GO 13525
13525: DISABLE
13526: LD_INT 0
13528: PPUSH
13529: PPUSH
// begin enable ;
13530: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13531: LD_ADDR_VAR 0 1
13535: PUSH
13536: LD_INT 22
13538: PUSH
13539: LD_OWVAR 2
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 61
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: LD_INT 33
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 69
13573: ST_TO_ADDR
// if not tmp then
13574: LD_VAR 0 1
13578: NOT
13579: IFFALSE 13583
// exit ;
13581: GO 13620
// for i in tmp do
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_VAR 0 1
13592: PUSH
13593: FOR_IN
13594: IFFALSE 13618
// if IsControledBy ( i ) then
13596: LD_VAR 0 2
13600: PPUSH
13601: CALL_OW 312
13605: IFFALSE 13616
// ComUnlink ( i ) ;
13607: LD_VAR 0 2
13611: PPUSH
13612: CALL_OW 136
13616: GO 13593
13618: POP
13619: POP
// end ;
13620: PPOPN 2
13622: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13623: LD_EXP 24
13627: PUSH
13628: LD_EXP 55
13632: AND
13633: IFFALSE 13773
13635: GO 13637
13637: DISABLE
13638: LD_INT 0
13640: PPUSH
13641: PPUSH
// begin ToLua ( displayPowell(); ) ;
13642: LD_STRING displayPowell();
13644: PPUSH
13645: CALL_OW 559
// uc_side := 0 ;
13649: LD_ADDR_OWVAR 20
13653: PUSH
13654: LD_INT 0
13656: ST_TO_ADDR
// uc_nation := 2 ;
13657: LD_ADDR_OWVAR 21
13661: PUSH
13662: LD_INT 2
13664: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13665: LD_ADDR_OWVAR 37
13669: PUSH
13670: LD_INT 14
13672: ST_TO_ADDR
// vc_engine := engine_siberite ;
13673: LD_ADDR_OWVAR 39
13677: PUSH
13678: LD_INT 3
13680: ST_TO_ADDR
// vc_control := control_apeman ;
13681: LD_ADDR_OWVAR 38
13685: PUSH
13686: LD_INT 5
13688: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13689: LD_ADDR_OWVAR 40
13693: PUSH
13694: LD_INT 29
13696: ST_TO_ADDR
// un := CreateVehicle ;
13697: LD_ADDR_VAR 0 2
13701: PUSH
13702: CALL_OW 45
13706: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13707: LD_VAR 0 2
13711: PPUSH
13712: LD_INT 1
13714: PPUSH
13715: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13719: LD_INT 35
13721: PPUSH
13722: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13726: LD_VAR 0 2
13730: PPUSH
13731: LD_INT 22
13733: PUSH
13734: LD_OWVAR 2
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PPUSH
13743: CALL_OW 69
13747: PPUSH
13748: LD_VAR 0 2
13752: PPUSH
13753: CALL_OW 74
13757: PPUSH
13758: CALL_OW 115
// until IsDead ( un ) ;
13762: LD_VAR 0 2
13766: PPUSH
13767: CALL_OW 301
13771: IFFALSE 13719
// end ;
13773: PPOPN 2
13775: END
// every 0 0$1 trigger StreamModeActive and sStu do
13776: LD_EXP 24
13780: PUSH
13781: LD_EXP 63
13785: AND
13786: IFFALSE 13802
13788: GO 13790
13790: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13791: LD_STRING displayStucuk();
13793: PPUSH
13794: CALL_OW 559
// ResetFog ;
13798: CALL_OW 335
// end ;
13802: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13803: LD_EXP 24
13807: PUSH
13808: LD_EXP 56
13812: AND
13813: IFFALSE 13954
13815: GO 13817
13817: DISABLE
13818: LD_INT 0
13820: PPUSH
13821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 22
13829: PUSH
13830: LD_OWVAR 2
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 21
13841: PUSH
13842: LD_INT 1
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PPUSH
13853: CALL_OW 69
13857: ST_TO_ADDR
// if not tmp then
13858: LD_VAR 0 2
13862: NOT
13863: IFFALSE 13867
// exit ;
13865: GO 13954
// un := tmp [ rand ( 1 , tmp ) ] ;
13867: LD_ADDR_VAR 0 1
13871: PUSH
13872: LD_VAR 0 2
13876: PUSH
13877: LD_INT 1
13879: PPUSH
13880: LD_VAR 0 2
13884: PPUSH
13885: CALL_OW 12
13889: ARRAY
13890: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13891: LD_VAR 0 1
13895: PPUSH
13896: LD_INT 0
13898: PPUSH
13899: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13903: LD_VAR 0 1
13907: PPUSH
13908: LD_OWVAR 3
13912: PUSH
13913: LD_VAR 0 1
13917: DIFF
13918: PPUSH
13919: LD_VAR 0 1
13923: PPUSH
13924: CALL_OW 74
13928: PPUSH
13929: CALL_OW 115
// wait ( 0 0$20 ) ;
13933: LD_INT 700
13935: PPUSH
13936: CALL_OW 67
// SetSide ( un , your_side ) ;
13940: LD_VAR 0 1
13944: PPUSH
13945: LD_OWVAR 2
13949: PPUSH
13950: CALL_OW 235
// end ;
13954: PPOPN 2
13956: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13957: LD_EXP 24
13961: PUSH
13962: LD_EXP 57
13966: AND
13967: IFFALSE 14073
13969: GO 13971
13971: DISABLE
13972: LD_INT 0
13974: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13975: LD_ADDR_VAR 0 1
13979: PUSH
13980: LD_INT 22
13982: PUSH
13983: LD_OWVAR 2
13987: PUSH
13988: EMPTY
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 2
13994: PUSH
13995: LD_INT 30
13997: PUSH
13998: LD_INT 0
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: LD_INT 30
14007: PUSH
14008: LD_INT 1
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: ST_TO_ADDR
// if not depot then
14029: LD_VAR 0 1
14033: NOT
14034: IFFALSE 14038
// exit ;
14036: GO 14073
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
14038: LD_VAR 0 1
14042: PUSH
14043: LD_INT 1
14045: ARRAY
14046: PPUSH
14047: CALL_OW 250
14051: PPUSH
14052: LD_VAR 0 1
14056: PUSH
14057: LD_INT 1
14059: ARRAY
14060: PPUSH
14061: CALL_OW 251
14065: PPUSH
14066: LD_INT 70
14068: PPUSH
14069: CALL_OW 495
// end ;
14073: PPOPN 1
14075: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
14076: LD_EXP 24
14080: PUSH
14081: LD_EXP 58
14085: AND
14086: IFFALSE 14297
14088: GO 14090
14090: DISABLE
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14098: LD_ADDR_VAR 0 5
14102: PUSH
14103: LD_INT 22
14105: PUSH
14106: LD_OWVAR 2
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PUSH
14115: LD_INT 21
14117: PUSH
14118: LD_INT 1
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: PPUSH
14129: CALL_OW 69
14133: ST_TO_ADDR
// if not tmp then
14134: LD_VAR 0 5
14138: NOT
14139: IFFALSE 14143
// exit ;
14141: GO 14297
// for i in tmp do
14143: LD_ADDR_VAR 0 1
14147: PUSH
14148: LD_VAR 0 5
14152: PUSH
14153: FOR_IN
14154: IFFALSE 14295
// begin d := rand ( 0 , 5 ) ;
14156: LD_ADDR_VAR 0 4
14160: PUSH
14161: LD_INT 0
14163: PPUSH
14164: LD_INT 5
14166: PPUSH
14167: CALL_OW 12
14171: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14172: LD_ADDR_VAR 0 2
14176: PUSH
14177: LD_VAR 0 1
14181: PPUSH
14182: CALL_OW 250
14186: PPUSH
14187: LD_VAR 0 4
14191: PPUSH
14192: LD_INT 3
14194: PPUSH
14195: LD_INT 12
14197: PPUSH
14198: CALL_OW 12
14202: PPUSH
14203: CALL_OW 272
14207: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14208: LD_ADDR_VAR 0 3
14212: PUSH
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 251
14222: PPUSH
14223: LD_VAR 0 4
14227: PPUSH
14228: LD_INT 3
14230: PPUSH
14231: LD_INT 12
14233: PPUSH
14234: CALL_OW 12
14238: PPUSH
14239: CALL_OW 273
14243: ST_TO_ADDR
// if ValidHex ( x , y ) then
14244: LD_VAR 0 2
14248: PPUSH
14249: LD_VAR 0 3
14253: PPUSH
14254: CALL_OW 488
14258: IFFALSE 14293
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14260: LD_VAR 0 1
14264: PPUSH
14265: LD_VAR 0 2
14269: PPUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: LD_INT 3
14277: PPUSH
14278: LD_INT 6
14280: PPUSH
14281: CALL_OW 12
14285: PPUSH
14286: LD_INT 1
14288: PPUSH
14289: CALL_OW 483
// end ;
14293: GO 14153
14295: POP
14296: POP
// end ;
14297: PPOPN 5
14299: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14300: LD_EXP 24
14304: PUSH
14305: LD_EXP 59
14309: AND
14310: IFFALSE 14404
14312: GO 14314
14314: DISABLE
14315: LD_INT 0
14317: PPUSH
14318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14319: LD_ADDR_VAR 0 2
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_OWVAR 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 32
14338: PUSH
14339: LD_INT 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 21
14348: PUSH
14349: LD_INT 2
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: PPUSH
14361: CALL_OW 69
14365: ST_TO_ADDR
// if not tmp then
14366: LD_VAR 0 2
14370: NOT
14371: IFFALSE 14375
// exit ;
14373: GO 14404
// for i in tmp do
14375: LD_ADDR_VAR 0 1
14379: PUSH
14380: LD_VAR 0 2
14384: PUSH
14385: FOR_IN
14386: IFFALSE 14402
// SetFuel ( i , 0 ) ;
14388: LD_VAR 0 1
14392: PPUSH
14393: LD_INT 0
14395: PPUSH
14396: CALL_OW 240
14400: GO 14385
14402: POP
14403: POP
// end ;
14404: PPOPN 2
14406: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14407: LD_EXP 24
14411: PUSH
14412: LD_EXP 60
14416: AND
14417: IFFALSE 14483
14419: GO 14421
14421: DISABLE
14422: LD_INT 0
14424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14425: LD_ADDR_VAR 0 1
14429: PUSH
14430: LD_INT 22
14432: PUSH
14433: LD_OWVAR 2
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 30
14444: PUSH
14445: LD_INT 29
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 69
14460: ST_TO_ADDR
// if not tmp then
14461: LD_VAR 0 1
14465: NOT
14466: IFFALSE 14470
// exit ;
14468: GO 14483
// DestroyUnit ( tmp [ 1 ] ) ;
14470: LD_VAR 0 1
14474: PUSH
14475: LD_INT 1
14477: ARRAY
14478: PPUSH
14479: CALL_OW 65
// end ;
14483: PPOPN 1
14485: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14486: LD_EXP 24
14490: PUSH
14491: LD_EXP 62
14495: AND
14496: IFFALSE 14625
14498: GO 14500
14500: DISABLE
14501: LD_INT 0
14503: PPUSH
// begin uc_side := 0 ;
14504: LD_ADDR_OWVAR 20
14508: PUSH
14509: LD_INT 0
14511: ST_TO_ADDR
// uc_nation := nation_arabian ;
14512: LD_ADDR_OWVAR 21
14516: PUSH
14517: LD_INT 2
14519: ST_TO_ADDR
// hc_gallery :=  ;
14520: LD_ADDR_OWVAR 33
14524: PUSH
14525: LD_STRING 
14527: ST_TO_ADDR
// hc_name :=  ;
14528: LD_ADDR_OWVAR 26
14532: PUSH
14533: LD_STRING 
14535: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14536: LD_INT 1
14538: PPUSH
14539: LD_INT 11
14541: PPUSH
14542: LD_INT 10
14544: PPUSH
14545: CALL_OW 380
// un := CreateHuman ;
14549: LD_ADDR_VAR 0 1
14553: PUSH
14554: CALL_OW 44
14558: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14559: LD_VAR 0 1
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14571: LD_INT 35
14573: PPUSH
14574: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14578: LD_VAR 0 1
14582: PPUSH
14583: LD_INT 22
14585: PUSH
14586: LD_OWVAR 2
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PPUSH
14595: CALL_OW 69
14599: PPUSH
14600: LD_VAR 0 1
14604: PPUSH
14605: CALL_OW 74
14609: PPUSH
14610: CALL_OW 115
// until IsDead ( un ) ;
14614: LD_VAR 0 1
14618: PPUSH
14619: CALL_OW 301
14623: IFFALSE 14571
// end ;
14625: PPOPN 1
14627: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14628: LD_EXP 24
14632: PUSH
14633: LD_EXP 64
14637: AND
14638: IFFALSE 14650
14640: GO 14642
14642: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14643: LD_STRING earthquake(getX(game), 0, 32)
14645: PPUSH
14646: CALL_OW 559
14650: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14651: LD_EXP 24
14655: PUSH
14656: LD_EXP 65
14660: AND
14661: IFFALSE 14752
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
// begin enable ;
14669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14670: LD_ADDR_VAR 0 1
14674: PUSH
14675: LD_INT 22
14677: PUSH
14678: LD_OWVAR 2
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 21
14689: PUSH
14690: LD_INT 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 33
14699: PUSH
14700: LD_INT 3
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: LIST
14711: PPUSH
14712: CALL_OW 69
14716: ST_TO_ADDR
// if not tmp then
14717: LD_VAR 0 1
14721: NOT
14722: IFFALSE 14726
// exit ;
14724: GO 14752
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14726: LD_VAR 0 1
14730: PUSH
14731: LD_INT 1
14733: PPUSH
14734: LD_VAR 0 1
14738: PPUSH
14739: CALL_OW 12
14743: ARRAY
14744: PPUSH
14745: LD_INT 1
14747: PPUSH
14748: CALL_OW 234
// end ;
14752: PPOPN 1
14754: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14755: LD_EXP 24
14759: PUSH
14760: LD_EXP 66
14764: AND
14765: IFFALSE 14906
14767: GO 14769
14769: DISABLE
14770: LD_INT 0
14772: PPUSH
14773: PPUSH
14774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_OWVAR 2
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: ST_TO_ADDR
// if not tmp then
14811: LD_VAR 0 3
14815: NOT
14816: IFFALSE 14820
// exit ;
14818: GO 14906
// un := tmp [ rand ( 1 , tmp ) ] ;
14820: LD_ADDR_VAR 0 2
14824: PUSH
14825: LD_VAR 0 3
14829: PUSH
14830: LD_INT 1
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: CALL_OW 12
14842: ARRAY
14843: ST_TO_ADDR
// if Crawls ( un ) then
14844: LD_VAR 0 2
14848: PPUSH
14849: CALL_OW 318
14853: IFFALSE 14864
// ComWalk ( un ) ;
14855: LD_VAR 0 2
14859: PPUSH
14860: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14864: LD_VAR 0 2
14868: PPUSH
14869: LD_INT 9
14871: PPUSH
14872: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14876: LD_INT 28
14878: PPUSH
14879: LD_OWVAR 2
14883: PPUSH
14884: LD_INT 2
14886: PPUSH
14887: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14891: LD_INT 29
14893: PPUSH
14894: LD_OWVAR 2
14898: PPUSH
14899: LD_INT 2
14901: PPUSH
14902: CALL_OW 322
// end ;
14906: PPOPN 3
14908: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14909: LD_EXP 24
14913: PUSH
14914: LD_EXP 67
14918: AND
14919: IFFALSE 15030
14921: GO 14923
14923: DISABLE
14924: LD_INT 0
14926: PPUSH
14927: PPUSH
14928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14929: LD_ADDR_VAR 0 3
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_OWVAR 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 25
14948: PUSH
14949: LD_INT 1
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 69
14964: ST_TO_ADDR
// if not tmp then
14965: LD_VAR 0 3
14969: NOT
14970: IFFALSE 14974
// exit ;
14972: GO 15030
// un := tmp [ rand ( 1 , tmp ) ] ;
14974: LD_ADDR_VAR 0 2
14978: PUSH
14979: LD_VAR 0 3
14983: PUSH
14984: LD_INT 1
14986: PPUSH
14987: LD_VAR 0 3
14991: PPUSH
14992: CALL_OW 12
14996: ARRAY
14997: ST_TO_ADDR
// if Crawls ( un ) then
14998: LD_VAR 0 2
15002: PPUSH
15003: CALL_OW 318
15007: IFFALSE 15018
// ComWalk ( un ) ;
15009: LD_VAR 0 2
15013: PPUSH
15014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15018: LD_VAR 0 2
15022: PPUSH
15023: LD_INT 8
15025: PPUSH
15026: CALL_OW 336
// end ;
15030: PPOPN 3
15032: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
15033: LD_EXP 24
15037: PUSH
15038: LD_EXP 68
15042: AND
15043: IFFALSE 15187
15045: GO 15047
15047: DISABLE
15048: LD_INT 0
15050: PPUSH
15051: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
15052: LD_ADDR_VAR 0 2
15056: PUSH
15057: LD_INT 22
15059: PUSH
15060: LD_OWVAR 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 21
15071: PUSH
15072: LD_INT 2
15074: PUSH
15075: EMPTY
15076: LIST
15077: LIST
15078: PUSH
15079: LD_INT 2
15081: PUSH
15082: LD_INT 34
15084: PUSH
15085: LD_INT 12
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 34
15094: PUSH
15095: LD_INT 51
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 34
15104: PUSH
15105: LD_INT 32
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: PPUSH
15123: CALL_OW 69
15127: ST_TO_ADDR
// if not tmp then
15128: LD_VAR 0 2
15132: NOT
15133: IFFALSE 15137
// exit ;
15135: GO 15187
// for i in tmp do
15137: LD_ADDR_VAR 0 1
15141: PUSH
15142: LD_VAR 0 2
15146: PUSH
15147: FOR_IN
15148: IFFALSE 15185
// if GetCargo ( i , mat_artifact ) = 0 then
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 4
15157: PPUSH
15158: CALL_OW 289
15162: PUSH
15163: LD_INT 0
15165: EQUAL
15166: IFFALSE 15183
// SetCargo ( i , mat_siberit , 100 ) ;
15168: LD_VAR 0 1
15172: PPUSH
15173: LD_INT 3
15175: PPUSH
15176: LD_INT 100
15178: PPUSH
15179: CALL_OW 290
15183: GO 15147
15185: POP
15186: POP
// end ;
15187: PPOPN 2
15189: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15190: LD_EXP 24
15194: PUSH
15195: LD_EXP 69
15199: AND
15200: IFFALSE 15383
15202: GO 15204
15204: DISABLE
15205: LD_INT 0
15207: PPUSH
15208: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15209: LD_ADDR_VAR 0 2
15213: PUSH
15214: LD_INT 22
15216: PUSH
15217: LD_OWVAR 2
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 2
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15383
// for i := 1 to 2 do
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: DOUBLE
15246: LD_INT 1
15248: DEC
15249: ST_TO_ADDR
15250: LD_INT 2
15252: PUSH
15253: FOR_TO
15254: IFFALSE 15381
// begin uc_side := your_side ;
15256: LD_ADDR_OWVAR 20
15260: PUSH
15261: LD_OWVAR 2
15265: ST_TO_ADDR
// uc_nation := nation_american ;
15266: LD_ADDR_OWVAR 21
15270: PUSH
15271: LD_INT 1
15273: ST_TO_ADDR
// vc_chassis := us_morphling ;
15274: LD_ADDR_OWVAR 37
15278: PUSH
15279: LD_INT 5
15281: ST_TO_ADDR
// vc_engine := engine_siberite ;
15282: LD_ADDR_OWVAR 39
15286: PUSH
15287: LD_INT 3
15289: ST_TO_ADDR
// vc_control := control_computer ;
15290: LD_ADDR_OWVAR 38
15294: PUSH
15295: LD_INT 3
15297: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15298: LD_ADDR_OWVAR 40
15302: PUSH
15303: LD_INT 10
15305: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15306: LD_VAR 0 2
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PPUSH
15315: CALL_OW 310
15319: NOT
15320: IFFALSE 15367
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15322: CALL_OW 45
15326: PPUSH
15327: LD_VAR 0 2
15331: PUSH
15332: LD_INT 1
15334: ARRAY
15335: PPUSH
15336: CALL_OW 250
15340: PPUSH
15341: LD_VAR 0 2
15345: PUSH
15346: LD_INT 1
15348: ARRAY
15349: PPUSH
15350: CALL_OW 251
15354: PPUSH
15355: LD_INT 12
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 50
15365: GO 15379
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15367: CALL_OW 45
15371: PPUSH
15372: LD_INT 1
15374: PPUSH
15375: CALL_OW 51
// end ;
15379: GO 15253
15381: POP
15382: POP
// end ;
15383: PPOPN 2
15385: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15386: LD_EXP 24
15390: PUSH
15391: LD_EXP 70
15395: AND
15396: IFFALSE 15618
15398: GO 15400
15400: DISABLE
15401: LD_INT 0
15403: PPUSH
15404: PPUSH
15405: PPUSH
15406: PPUSH
15407: PPUSH
15408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15409: LD_ADDR_VAR 0 6
15413: PUSH
15414: LD_INT 22
15416: PUSH
15417: LD_OWVAR 2
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: LD_INT 23
15441: PUSH
15442: LD_INT 0
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: PPUSH
15458: CALL_OW 69
15462: ST_TO_ADDR
// if not tmp then
15463: LD_VAR 0 6
15467: NOT
15468: IFFALSE 15472
// exit ;
15470: GO 15618
// s1 := rand ( 1 , 4 ) ;
15472: LD_ADDR_VAR 0 2
15476: PUSH
15477: LD_INT 1
15479: PPUSH
15480: LD_INT 4
15482: PPUSH
15483: CALL_OW 12
15487: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15488: LD_ADDR_VAR 0 4
15492: PUSH
15493: LD_VAR 0 6
15497: PUSH
15498: LD_INT 1
15500: ARRAY
15501: PPUSH
15502: LD_VAR 0 2
15506: PPUSH
15507: CALL_OW 259
15511: ST_TO_ADDR
// if s1 = 1 then
15512: LD_VAR 0 2
15516: PUSH
15517: LD_INT 1
15519: EQUAL
15520: IFFALSE 15540
// s2 := rand ( 2 , 4 ) else
15522: LD_ADDR_VAR 0 3
15526: PUSH
15527: LD_INT 2
15529: PPUSH
15530: LD_INT 4
15532: PPUSH
15533: CALL_OW 12
15537: ST_TO_ADDR
15538: GO 15548
// s2 := 1 ;
15540: LD_ADDR_VAR 0 3
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15548: LD_ADDR_VAR 0 5
15552: PUSH
15553: LD_VAR 0 6
15557: PUSH
15558: LD_INT 1
15560: ARRAY
15561: PPUSH
15562: LD_VAR 0 3
15566: PPUSH
15567: CALL_OW 259
15571: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15572: LD_VAR 0 6
15576: PUSH
15577: LD_INT 1
15579: ARRAY
15580: PPUSH
15581: LD_VAR 0 2
15585: PPUSH
15586: LD_VAR 0 5
15590: PPUSH
15591: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15595: LD_VAR 0 6
15599: PUSH
15600: LD_INT 1
15602: ARRAY
15603: PPUSH
15604: LD_VAR 0 3
15608: PPUSH
15609: LD_VAR 0 4
15613: PPUSH
15614: CALL_OW 237
// end ;
15618: PPOPN 6
15620: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15621: LD_EXP 24
15625: PUSH
15626: LD_EXP 71
15630: AND
15631: IFFALSE 15710
15633: GO 15635
15635: DISABLE
15636: LD_INT 0
15638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15639: LD_ADDR_VAR 0 1
15643: PUSH
15644: LD_INT 22
15646: PUSH
15647: LD_OWVAR 2
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 30
15658: PUSH
15659: LD_INT 3
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PPUSH
15670: CALL_OW 69
15674: ST_TO_ADDR
// if not tmp then
15675: LD_VAR 0 1
15679: NOT
15680: IFFALSE 15684
// exit ;
15682: GO 15710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15684: LD_VAR 0 1
15688: PUSH
15689: LD_INT 1
15691: PPUSH
15692: LD_VAR 0 1
15696: PPUSH
15697: CALL_OW 12
15701: ARRAY
15702: PPUSH
15703: LD_INT 1
15705: PPUSH
15706: CALL_OW 234
// end ;
15710: PPOPN 1
15712: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15713: LD_EXP 24
15717: PUSH
15718: LD_EXP 72
15722: AND
15723: IFFALSE 15835
15725: GO 15727
15727: DISABLE
15728: LD_INT 0
15730: PPUSH
15731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15732: LD_ADDR_VAR 0 2
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_OWVAR 2
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 2
15751: PUSH
15752: LD_INT 30
15754: PUSH
15755: LD_INT 27
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 30
15764: PUSH
15765: LD_INT 26
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: PUSH
15772: LD_INT 30
15774: PUSH
15775: LD_INT 28
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PPUSH
15792: CALL_OW 69
15796: ST_TO_ADDR
// if not tmp then
15797: LD_VAR 0 2
15801: NOT
15802: IFFALSE 15806
// exit ;
15804: GO 15835
// for i in tmp do
15806: LD_ADDR_VAR 0 1
15810: PUSH
15811: LD_VAR 0 2
15815: PUSH
15816: FOR_IN
15817: IFFALSE 15833
// SetLives ( i , 1 ) ;
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 1
15826: PPUSH
15827: CALL_OW 234
15831: GO 15816
15833: POP
15834: POP
// end ;
15835: PPOPN 2
15837: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15838: LD_EXP 24
15842: PUSH
15843: LD_EXP 73
15847: AND
15848: IFFALSE 16135
15850: GO 15852
15852: DISABLE
15853: LD_INT 0
15855: PPUSH
15856: PPUSH
15857: PPUSH
// begin i := rand ( 1 , 7 ) ;
15858: LD_ADDR_VAR 0 1
15862: PUSH
15863: LD_INT 1
15865: PPUSH
15866: LD_INT 7
15868: PPUSH
15869: CALL_OW 12
15873: ST_TO_ADDR
// case i of 1 :
15874: LD_VAR 0 1
15878: PUSH
15879: LD_INT 1
15881: DOUBLE
15882: EQUAL
15883: IFTRUE 15887
15885: GO 15897
15887: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15888: LD_STRING earthquake(getX(game), 0, 32)
15890: PPUSH
15891: CALL_OW 559
15895: GO 16135
15897: LD_INT 2
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 15919
15905: POP
// begin ToLua ( displayStucuk(); ) ;
15906: LD_STRING displayStucuk();
15908: PPUSH
15909: CALL_OW 559
// ResetFog ;
15913: CALL_OW 335
// end ; 3 :
15917: GO 16135
15919: LD_INT 3
15921: DOUBLE
15922: EQUAL
15923: IFTRUE 15927
15925: GO 16031
15927: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: LD_INT 22
15935: PUSH
15936: LD_OWVAR 2
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 25
15947: PUSH
15948: LD_INT 1
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PPUSH
15959: CALL_OW 69
15963: ST_TO_ADDR
// if not tmp then
15964: LD_VAR 0 2
15968: NOT
15969: IFFALSE 15973
// exit ;
15971: GO 16135
// un := tmp [ rand ( 1 , tmp ) ] ;
15973: LD_ADDR_VAR 0 3
15977: PUSH
15978: LD_VAR 0 2
15982: PUSH
15983: LD_INT 1
15985: PPUSH
15986: LD_VAR 0 2
15990: PPUSH
15991: CALL_OW 12
15995: ARRAY
15996: ST_TO_ADDR
// if Crawls ( un ) then
15997: LD_VAR 0 3
16001: PPUSH
16002: CALL_OW 318
16006: IFFALSE 16017
// ComWalk ( un ) ;
16008: LD_VAR 0 3
16012: PPUSH
16013: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16017: LD_VAR 0 3
16021: PPUSH
16022: LD_INT 8
16024: PPUSH
16025: CALL_OW 336
// end ; 4 :
16029: GO 16135
16031: LD_INT 4
16033: DOUBLE
16034: EQUAL
16035: IFTRUE 16039
16037: GO 16113
16039: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16040: LD_ADDR_VAR 0 2
16044: PUSH
16045: LD_INT 22
16047: PUSH
16048: LD_OWVAR 2
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 30
16059: PUSH
16060: LD_INT 29
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PPUSH
16071: CALL_OW 69
16075: ST_TO_ADDR
// if not tmp then
16076: LD_VAR 0 2
16080: NOT
16081: IFFALSE 16085
// exit ;
16083: GO 16135
// CenterNowOnUnits ( tmp [ 1 ] ) ;
16085: LD_VAR 0 2
16089: PUSH
16090: LD_INT 1
16092: ARRAY
16093: PPUSH
16094: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
16098: LD_VAR 0 2
16102: PUSH
16103: LD_INT 1
16105: ARRAY
16106: PPUSH
16107: CALL_OW 65
// end ; 5 .. 7 :
16111: GO 16135
16113: LD_INT 5
16115: DOUBLE
16116: GREATEREQUAL
16117: IFFALSE 16125
16119: LD_INT 7
16121: DOUBLE
16122: LESSEQUAL
16123: IFTRUE 16127
16125: GO 16134
16127: POP
// StreamSibBomb ; end ;
16128: CALL 12372 0 0
16132: GO 16135
16134: POP
// end ;
16135: PPOPN 3
16137: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
16138: LD_EXP 24
16142: PUSH
16143: LD_EXP 74
16147: AND
16148: IFFALSE 16304
16150: GO 16152
16152: DISABLE
16153: LD_INT 0
16155: PPUSH
16156: PPUSH
16157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16158: LD_ADDR_VAR 0 2
16162: PUSH
16163: LD_INT 81
16165: PUSH
16166: LD_OWVAR 2
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 21
16190: PUSH
16191: LD_INT 2
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: ST_TO_ADDR
// if not tmp then
16212: LD_VAR 0 2
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16304
// p := 0 ;
16221: LD_ADDR_VAR 0 3
16225: PUSH
16226: LD_INT 0
16228: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16229: LD_INT 35
16231: PPUSH
16232: CALL_OW 67
// p := p + 1 ;
16236: LD_ADDR_VAR 0 3
16240: PUSH
16241: LD_VAR 0 3
16245: PUSH
16246: LD_INT 1
16248: PLUS
16249: ST_TO_ADDR
// for i in tmp do
16250: LD_ADDR_VAR 0 1
16254: PUSH
16255: LD_VAR 0 2
16259: PUSH
16260: FOR_IN
16261: IFFALSE 16292
// if GetLives ( i ) < 1000 then
16263: LD_VAR 0 1
16267: PPUSH
16268: CALL_OW 256
16272: PUSH
16273: LD_INT 1000
16275: LESS
16276: IFFALSE 16290
// SetLives ( i , 1000 ) ;
16278: LD_VAR 0 1
16282: PPUSH
16283: LD_INT 1000
16285: PPUSH
16286: CALL_OW 234
16290: GO 16260
16292: POP
16293: POP
// until p > 20 ;
16294: LD_VAR 0 3
16298: PUSH
16299: LD_INT 20
16301: GREATER
16302: IFFALSE 16229
// end ;
16304: PPOPN 3
16306: END
// every 0 0$1 trigger StreamModeActive and sTime do
16307: LD_EXP 24
16311: PUSH
16312: LD_EXP 75
16316: AND
16317: IFFALSE 16352
16319: GO 16321
16321: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16322: LD_INT 28
16324: PPUSH
16325: LD_OWVAR 2
16329: PPUSH
16330: LD_INT 2
16332: PPUSH
16333: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16337: LD_INT 30
16339: PPUSH
16340: LD_OWVAR 2
16344: PPUSH
16345: LD_INT 2
16347: PPUSH
16348: CALL_OW 322
// end ;
16352: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16353: LD_EXP 24
16357: PUSH
16358: LD_EXP 76
16362: AND
16363: IFFALSE 16484
16365: GO 16367
16367: DISABLE
16368: LD_INT 0
16370: PPUSH
16371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16372: LD_ADDR_VAR 0 2
16376: PUSH
16377: LD_INT 22
16379: PUSH
16380: LD_OWVAR 2
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 1
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 3
16401: PUSH
16402: LD_INT 23
16404: PUSH
16405: LD_INT 0
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: PPUSH
16421: CALL_OW 69
16425: ST_TO_ADDR
// if not tmp then
16426: LD_VAR 0 2
16430: NOT
16431: IFFALSE 16435
// exit ;
16433: GO 16484
// for i in tmp do
16435: LD_ADDR_VAR 0 1
16439: PUSH
16440: LD_VAR 0 2
16444: PUSH
16445: FOR_IN
16446: IFFALSE 16482
// begin if Crawls ( i ) then
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 318
16457: IFFALSE 16468
// ComWalk ( i ) ;
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 138
// SetClass ( i , 2 ) ;
16468: LD_VAR 0 1
16472: PPUSH
16473: LD_INT 2
16475: PPUSH
16476: CALL_OW 336
// end ;
16480: GO 16445
16482: POP
16483: POP
// end ;
16484: PPOPN 2
16486: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16487: LD_EXP 24
16491: PUSH
16492: LD_EXP 77
16496: AND
16497: IFFALSE 16785
16499: GO 16501
16501: DISABLE
16502: LD_INT 0
16504: PPUSH
16505: PPUSH
16506: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16507: LD_OWVAR 2
16511: PPUSH
16512: LD_INT 9
16514: PPUSH
16515: LD_INT 1
16517: PPUSH
16518: LD_INT 1
16520: PPUSH
16521: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16525: LD_INT 9
16527: PPUSH
16528: LD_OWVAR 2
16532: PPUSH
16533: CALL_OW 343
// uc_side := 9 ;
16537: LD_ADDR_OWVAR 20
16541: PUSH
16542: LD_INT 9
16544: ST_TO_ADDR
// uc_nation := 2 ;
16545: LD_ADDR_OWVAR 21
16549: PUSH
16550: LD_INT 2
16552: ST_TO_ADDR
// hc_name := Dark Warrior ;
16553: LD_ADDR_OWVAR 26
16557: PUSH
16558: LD_STRING Dark Warrior
16560: ST_TO_ADDR
// hc_gallery :=  ;
16561: LD_ADDR_OWVAR 33
16565: PUSH
16566: LD_STRING 
16568: ST_TO_ADDR
// hc_noskilllimit := true ;
16569: LD_ADDR_OWVAR 76
16573: PUSH
16574: LD_INT 1
16576: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16577: LD_ADDR_OWVAR 31
16581: PUSH
16582: LD_INT 30
16584: PUSH
16585: LD_INT 30
16587: PUSH
16588: LD_INT 30
16590: PUSH
16591: LD_INT 30
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: ST_TO_ADDR
// un := CreateHuman ;
16600: LD_ADDR_VAR 0 3
16604: PUSH
16605: CALL_OW 44
16609: ST_TO_ADDR
// hc_noskilllimit := false ;
16610: LD_ADDR_OWVAR 76
16614: PUSH
16615: LD_INT 0
16617: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16618: LD_VAR 0 3
16622: PPUSH
16623: LD_INT 1
16625: PPUSH
16626: CALL_OW 51
// ToLua ( playRanger() ) ;
16630: LD_STRING playRanger()
16632: PPUSH
16633: CALL_OW 559
// p := 0 ;
16637: LD_ADDR_VAR 0 2
16641: PUSH
16642: LD_INT 0
16644: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16645: LD_INT 35
16647: PPUSH
16648: CALL_OW 67
// p := p + 1 ;
16652: LD_ADDR_VAR 0 2
16656: PUSH
16657: LD_VAR 0 2
16661: PUSH
16662: LD_INT 1
16664: PLUS
16665: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16666: LD_VAR 0 3
16670: PPUSH
16671: CALL_OW 256
16675: PUSH
16676: LD_INT 1000
16678: LESS
16679: IFFALSE 16693
// SetLives ( un , 1000 ) ;
16681: LD_VAR 0 3
16685: PPUSH
16686: LD_INT 1000
16688: PPUSH
16689: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_INT 81
16700: PUSH
16701: LD_OWVAR 2
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 91
16712: PUSH
16713: LD_VAR 0 3
16717: PUSH
16718: LD_INT 30
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: PPUSH
16730: CALL_OW 69
16734: PPUSH
16735: LD_VAR 0 3
16739: PPUSH
16740: CALL_OW 74
16744: PPUSH
16745: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16749: LD_VAR 0 2
16753: PUSH
16754: LD_INT 80
16756: GREATER
16757: PUSH
16758: LD_VAR 0 3
16762: PPUSH
16763: CALL_OW 301
16767: OR
16768: IFFALSE 16645
// if un then
16770: LD_VAR 0 3
16774: IFFALSE 16785
// RemoveUnit ( un ) ;
16776: LD_VAR 0 3
16780: PPUSH
16781: CALL_OW 64
// end ;
16785: PPOPN 3
16787: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16788: LD_EXP 78
16792: IFFALSE 16908
16794: GO 16796
16796: DISABLE
16797: LD_INT 0
16799: PPUSH
16800: PPUSH
16801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16802: LD_ADDR_VAR 0 2
16806: PUSH
16807: LD_INT 81
16809: PUSH
16810: LD_OWVAR 2
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 21
16821: PUSH
16822: LD_INT 1
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PPUSH
16833: CALL_OW 69
16837: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16838: LD_STRING playComputer()
16840: PPUSH
16841: CALL_OW 559
// if not tmp then
16845: LD_VAR 0 2
16849: NOT
16850: IFFALSE 16854
// exit ;
16852: GO 16908
// for i in tmp do
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_VAR 0 2
16863: PUSH
16864: FOR_IN
16865: IFFALSE 16906
// for j := 1 to 4 do
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: DOUBLE
16873: LD_INT 1
16875: DEC
16876: ST_TO_ADDR
16877: LD_INT 4
16879: PUSH
16880: FOR_TO
16881: IFFALSE 16902
// SetSkill ( i , j , 10 ) ;
16883: LD_VAR 0 1
16887: PPUSH
16888: LD_VAR 0 3
16892: PPUSH
16893: LD_INT 10
16895: PPUSH
16896: CALL_OW 237
16900: GO 16880
16902: POP
16903: POP
16904: GO 16864
16906: POP
16907: POP
// end ;
16908: PPOPN 3
16910: END
// every 0 0$1 trigger s30 do var i , tmp ;
16911: LD_EXP 79
16915: IFFALSE 16984
16917: GO 16919
16919: DISABLE
16920: LD_INT 0
16922: PPUSH
16923: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16924: LD_ADDR_VAR 0 2
16928: PUSH
16929: LD_INT 22
16931: PUSH
16932: LD_OWVAR 2
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PPUSH
16941: CALL_OW 69
16945: ST_TO_ADDR
// if not tmp then
16946: LD_VAR 0 2
16950: NOT
16951: IFFALSE 16955
// exit ;
16953: GO 16984
// for i in tmp do
16955: LD_ADDR_VAR 0 1
16959: PUSH
16960: LD_VAR 0 2
16964: PUSH
16965: FOR_IN
16966: IFFALSE 16982
// SetLives ( i , 300 ) ;
16968: LD_VAR 0 1
16972: PPUSH
16973: LD_INT 300
16975: PPUSH
16976: CALL_OW 234
16980: GO 16965
16982: POP
16983: POP
// end ;
16984: PPOPN 2
16986: END
// every 0 0$1 trigger s60 do var i , tmp ;
16987: LD_EXP 80
16991: IFFALSE 17060
16993: GO 16995
16995: DISABLE
16996: LD_INT 0
16998: PPUSH
16999: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17000: LD_ADDR_VAR 0 2
17004: PUSH
17005: LD_INT 22
17007: PUSH
17008: LD_OWVAR 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PPUSH
17017: CALL_OW 69
17021: ST_TO_ADDR
// if not tmp then
17022: LD_VAR 0 2
17026: NOT
17027: IFFALSE 17031
// exit ;
17029: GO 17060
// for i in tmp do
17031: LD_ADDR_VAR 0 1
17035: PUSH
17036: LD_VAR 0 2
17040: PUSH
17041: FOR_IN
17042: IFFALSE 17058
// SetLives ( i , 600 ) ;
17044: LD_VAR 0 1
17048: PPUSH
17049: LD_INT 600
17051: PPUSH
17052: CALL_OW 234
17056: GO 17041
17058: POP
17059: POP
// end ;
17060: PPOPN 2
17062: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
17063: LD_INT 0
17065: PPUSH
// case cmd of 301 :
17066: LD_VAR 0 1
17070: PUSH
17071: LD_INT 301
17073: DOUBLE
17074: EQUAL
17075: IFTRUE 17079
17077: GO 17111
17079: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
17080: LD_VAR 0 6
17084: PPUSH
17085: LD_VAR 0 7
17089: PPUSH
17090: LD_VAR 0 8
17094: PPUSH
17095: LD_VAR 0 4
17099: PPUSH
17100: LD_VAR 0 5
17104: PPUSH
17105: CALL 18312 0 5
17109: GO 17232
17111: LD_INT 302
17113: DOUBLE
17114: EQUAL
17115: IFTRUE 17119
17117: GO 17156
17119: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
17120: LD_VAR 0 6
17124: PPUSH
17125: LD_VAR 0 7
17129: PPUSH
17130: LD_VAR 0 8
17134: PPUSH
17135: LD_VAR 0 9
17139: PPUSH
17140: LD_VAR 0 4
17144: PPUSH
17145: LD_VAR 0 5
17149: PPUSH
17150: CALL 18403 0 6
17154: GO 17232
17156: LD_INT 303
17158: DOUBLE
17159: EQUAL
17160: IFTRUE 17164
17162: GO 17201
17164: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17165: LD_VAR 0 6
17169: PPUSH
17170: LD_VAR 0 7
17174: PPUSH
17175: LD_VAR 0 8
17179: PPUSH
17180: LD_VAR 0 9
17184: PPUSH
17185: LD_VAR 0 4
17189: PPUSH
17190: LD_VAR 0 5
17194: PPUSH
17195: CALL 17237 0 6
17199: GO 17232
17201: LD_INT 304
17203: DOUBLE
17204: EQUAL
17205: IFTRUE 17209
17207: GO 17231
17209: POP
// hHackTeleport ( unit , x , y ) ; end ;
17210: LD_VAR 0 2
17214: PPUSH
17215: LD_VAR 0 4
17219: PPUSH
17220: LD_VAR 0 5
17224: PPUSH
17225: CALL 18996 0 3
17229: GO 17232
17231: POP
// end ;
17232: LD_VAR 0 12
17236: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17237: LD_INT 0
17239: PPUSH
17240: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17241: LD_VAR 0 1
17245: PUSH
17246: LD_INT 1
17248: LESS
17249: PUSH
17250: LD_VAR 0 1
17254: PUSH
17255: LD_INT 3
17257: GREATER
17258: OR
17259: PUSH
17260: LD_VAR 0 5
17264: PPUSH
17265: LD_VAR 0 6
17269: PPUSH
17270: CALL_OW 428
17274: OR
17275: IFFALSE 17279
// exit ;
17277: GO 17999
// uc_side := your_side ;
17279: LD_ADDR_OWVAR 20
17283: PUSH
17284: LD_OWVAR 2
17288: ST_TO_ADDR
// uc_nation := nation ;
17289: LD_ADDR_OWVAR 21
17293: PUSH
17294: LD_VAR 0 1
17298: ST_TO_ADDR
// bc_level = 1 ;
17299: LD_ADDR_OWVAR 43
17303: PUSH
17304: LD_INT 1
17306: ST_TO_ADDR
// case btype of 1 :
17307: LD_VAR 0 2
17311: PUSH
17312: LD_INT 1
17314: DOUBLE
17315: EQUAL
17316: IFTRUE 17320
17318: GO 17331
17320: POP
// bc_type := b_depot ; 2 :
17321: LD_ADDR_OWVAR 42
17325: PUSH
17326: LD_INT 0
17328: ST_TO_ADDR
17329: GO 17943
17331: LD_INT 2
17333: DOUBLE
17334: EQUAL
17335: IFTRUE 17339
17337: GO 17350
17339: POP
// bc_type := b_warehouse ; 3 :
17340: LD_ADDR_OWVAR 42
17344: PUSH
17345: LD_INT 1
17347: ST_TO_ADDR
17348: GO 17943
17350: LD_INT 3
17352: DOUBLE
17353: EQUAL
17354: IFTRUE 17358
17356: GO 17369
17358: POP
// bc_type := b_lab ; 4 .. 9 :
17359: LD_ADDR_OWVAR 42
17363: PUSH
17364: LD_INT 6
17366: ST_TO_ADDR
17367: GO 17943
17369: LD_INT 4
17371: DOUBLE
17372: GREATEREQUAL
17373: IFFALSE 17381
17375: LD_INT 9
17377: DOUBLE
17378: LESSEQUAL
17379: IFTRUE 17383
17381: GO 17435
17383: POP
// begin bc_type := b_lab_half ;
17384: LD_ADDR_OWVAR 42
17388: PUSH
17389: LD_INT 7
17391: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17392: LD_ADDR_OWVAR 44
17396: PUSH
17397: LD_INT 10
17399: PUSH
17400: LD_INT 11
17402: PUSH
17403: LD_INT 12
17405: PUSH
17406: LD_INT 15
17408: PUSH
17409: LD_INT 14
17411: PUSH
17412: LD_INT 13
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PUSH
17423: LD_VAR 0 2
17427: PUSH
17428: LD_INT 3
17430: MINUS
17431: ARRAY
17432: ST_TO_ADDR
// end ; 10 .. 13 :
17433: GO 17943
17435: LD_INT 10
17437: DOUBLE
17438: GREATEREQUAL
17439: IFFALSE 17447
17441: LD_INT 13
17443: DOUBLE
17444: LESSEQUAL
17445: IFTRUE 17449
17447: GO 17526
17449: POP
// begin bc_type := b_lab_full ;
17450: LD_ADDR_OWVAR 42
17454: PUSH
17455: LD_INT 8
17457: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17458: LD_ADDR_OWVAR 44
17462: PUSH
17463: LD_INT 10
17465: PUSH
17466: LD_INT 12
17468: PUSH
17469: LD_INT 14
17471: PUSH
17472: LD_INT 13
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: PUSH
17481: LD_VAR 0 2
17485: PUSH
17486: LD_INT 9
17488: MINUS
17489: ARRAY
17490: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17491: LD_ADDR_OWVAR 45
17495: PUSH
17496: LD_INT 11
17498: PUSH
17499: LD_INT 15
17501: PUSH
17502: LD_INT 12
17504: PUSH
17505: LD_INT 15
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: LD_VAR 0 2
17518: PUSH
17519: LD_INT 9
17521: MINUS
17522: ARRAY
17523: ST_TO_ADDR
// end ; 14 :
17524: GO 17943
17526: LD_INT 14
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17545
17534: POP
// bc_type := b_workshop ; 15 :
17535: LD_ADDR_OWVAR 42
17539: PUSH
17540: LD_INT 2
17542: ST_TO_ADDR
17543: GO 17943
17545: LD_INT 15
17547: DOUBLE
17548: EQUAL
17549: IFTRUE 17553
17551: GO 17564
17553: POP
// bc_type := b_factory ; 16 :
17554: LD_ADDR_OWVAR 42
17558: PUSH
17559: LD_INT 3
17561: ST_TO_ADDR
17562: GO 17943
17564: LD_INT 16
17566: DOUBLE
17567: EQUAL
17568: IFTRUE 17572
17570: GO 17583
17572: POP
// bc_type := b_ext_gun ; 17 :
17573: LD_ADDR_OWVAR 42
17577: PUSH
17578: LD_INT 17
17580: ST_TO_ADDR
17581: GO 17943
17583: LD_INT 17
17585: DOUBLE
17586: EQUAL
17587: IFTRUE 17591
17589: GO 17619
17591: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17592: LD_ADDR_OWVAR 42
17596: PUSH
17597: LD_INT 19
17599: PUSH
17600: LD_INT 23
17602: PUSH
17603: LD_INT 19
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: PUSH
17611: LD_VAR 0 1
17615: ARRAY
17616: ST_TO_ADDR
17617: GO 17943
17619: LD_INT 18
17621: DOUBLE
17622: EQUAL
17623: IFTRUE 17627
17625: GO 17638
17627: POP
// bc_type := b_ext_radar ; 19 :
17628: LD_ADDR_OWVAR 42
17632: PUSH
17633: LD_INT 20
17635: ST_TO_ADDR
17636: GO 17943
17638: LD_INT 19
17640: DOUBLE
17641: EQUAL
17642: IFTRUE 17646
17644: GO 17657
17646: POP
// bc_type := b_ext_radio ; 20 :
17647: LD_ADDR_OWVAR 42
17651: PUSH
17652: LD_INT 22
17654: ST_TO_ADDR
17655: GO 17943
17657: LD_INT 20
17659: DOUBLE
17660: EQUAL
17661: IFTRUE 17665
17663: GO 17676
17665: POP
// bc_type := b_ext_siberium ; 21 :
17666: LD_ADDR_OWVAR 42
17670: PUSH
17671: LD_INT 21
17673: ST_TO_ADDR
17674: GO 17943
17676: LD_INT 21
17678: DOUBLE
17679: EQUAL
17680: IFTRUE 17684
17682: GO 17695
17684: POP
// bc_type := b_ext_computer ; 22 :
17685: LD_ADDR_OWVAR 42
17689: PUSH
17690: LD_INT 24
17692: ST_TO_ADDR
17693: GO 17943
17695: LD_INT 22
17697: DOUBLE
17698: EQUAL
17699: IFTRUE 17703
17701: GO 17714
17703: POP
// bc_type := b_ext_track ; 23 :
17704: LD_ADDR_OWVAR 42
17708: PUSH
17709: LD_INT 16
17711: ST_TO_ADDR
17712: GO 17943
17714: LD_INT 23
17716: DOUBLE
17717: EQUAL
17718: IFTRUE 17722
17720: GO 17733
17722: POP
// bc_type := b_ext_laser ; 24 :
17723: LD_ADDR_OWVAR 42
17727: PUSH
17728: LD_INT 25
17730: ST_TO_ADDR
17731: GO 17943
17733: LD_INT 24
17735: DOUBLE
17736: EQUAL
17737: IFTRUE 17741
17739: GO 17752
17741: POP
// bc_type := b_control_tower ; 25 :
17742: LD_ADDR_OWVAR 42
17746: PUSH
17747: LD_INT 36
17749: ST_TO_ADDR
17750: GO 17943
17752: LD_INT 25
17754: DOUBLE
17755: EQUAL
17756: IFTRUE 17760
17758: GO 17771
17760: POP
// bc_type := b_breastwork ; 26 :
17761: LD_ADDR_OWVAR 42
17765: PUSH
17766: LD_INT 31
17768: ST_TO_ADDR
17769: GO 17943
17771: LD_INT 26
17773: DOUBLE
17774: EQUAL
17775: IFTRUE 17779
17777: GO 17790
17779: POP
// bc_type := b_bunker ; 27 :
17780: LD_ADDR_OWVAR 42
17784: PUSH
17785: LD_INT 32
17787: ST_TO_ADDR
17788: GO 17943
17790: LD_INT 27
17792: DOUBLE
17793: EQUAL
17794: IFTRUE 17798
17796: GO 17809
17798: POP
// bc_type := b_turret ; 28 :
17799: LD_ADDR_OWVAR 42
17803: PUSH
17804: LD_INT 33
17806: ST_TO_ADDR
17807: GO 17943
17809: LD_INT 28
17811: DOUBLE
17812: EQUAL
17813: IFTRUE 17817
17815: GO 17828
17817: POP
// bc_type := b_armoury ; 29 :
17818: LD_ADDR_OWVAR 42
17822: PUSH
17823: LD_INT 4
17825: ST_TO_ADDR
17826: GO 17943
17828: LD_INT 29
17830: DOUBLE
17831: EQUAL
17832: IFTRUE 17836
17834: GO 17847
17836: POP
// bc_type := b_barracks ; 30 :
17837: LD_ADDR_OWVAR 42
17841: PUSH
17842: LD_INT 5
17844: ST_TO_ADDR
17845: GO 17943
17847: LD_INT 30
17849: DOUBLE
17850: EQUAL
17851: IFTRUE 17855
17853: GO 17866
17855: POP
// bc_type := b_solar_power ; 31 :
17856: LD_ADDR_OWVAR 42
17860: PUSH
17861: LD_INT 27
17863: ST_TO_ADDR
17864: GO 17943
17866: LD_INT 31
17868: DOUBLE
17869: EQUAL
17870: IFTRUE 17874
17872: GO 17885
17874: POP
// bc_type := b_oil_power ; 32 :
17875: LD_ADDR_OWVAR 42
17879: PUSH
17880: LD_INT 26
17882: ST_TO_ADDR
17883: GO 17943
17885: LD_INT 32
17887: DOUBLE
17888: EQUAL
17889: IFTRUE 17893
17891: GO 17904
17893: POP
// bc_type := b_siberite_power ; 33 :
17894: LD_ADDR_OWVAR 42
17898: PUSH
17899: LD_INT 28
17901: ST_TO_ADDR
17902: GO 17943
17904: LD_INT 33
17906: DOUBLE
17907: EQUAL
17908: IFTRUE 17912
17910: GO 17923
17912: POP
// bc_type := b_oil_mine ; 34 :
17913: LD_ADDR_OWVAR 42
17917: PUSH
17918: LD_INT 29
17920: ST_TO_ADDR
17921: GO 17943
17923: LD_INT 34
17925: DOUBLE
17926: EQUAL
17927: IFTRUE 17931
17929: GO 17942
17931: POP
// bc_type := b_siberite_mine ; end ;
17932: LD_ADDR_OWVAR 42
17936: PUSH
17937: LD_INT 30
17939: ST_TO_ADDR
17940: GO 17943
17942: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17943: LD_ADDR_VAR 0 8
17947: PUSH
17948: LD_VAR 0 5
17952: PPUSH
17953: LD_VAR 0 6
17957: PPUSH
17958: LD_VAR 0 3
17962: PPUSH
17963: CALL_OW 47
17967: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17968: LD_OWVAR 42
17972: PUSH
17973: LD_INT 32
17975: PUSH
17976: LD_INT 33
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: IN
17983: IFFALSE 17999
// PlaceWeaponTurret ( b , weapon ) ;
17985: LD_VAR 0 8
17989: PPUSH
17990: LD_VAR 0 4
17994: PPUSH
17995: CALL_OW 431
// end ;
17999: LD_VAR 0 7
18003: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
18004: LD_INT 0
18006: PPUSH
18007: PPUSH
18008: PPUSH
18009: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18010: LD_ADDR_VAR 0 4
18014: PUSH
18015: LD_INT 22
18017: PUSH
18018: LD_OWVAR 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 2
18029: PUSH
18030: LD_INT 30
18032: PUSH
18033: LD_INT 0
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 30
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: LIST
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PPUSH
18059: CALL_OW 69
18063: ST_TO_ADDR
// if not tmp then
18064: LD_VAR 0 4
18068: NOT
18069: IFFALSE 18073
// exit ;
18071: GO 18132
// for i in tmp do
18073: LD_ADDR_VAR 0 2
18077: PUSH
18078: LD_VAR 0 4
18082: PUSH
18083: FOR_IN
18084: IFFALSE 18130
// for j = 1 to 3 do
18086: LD_ADDR_VAR 0 3
18090: PUSH
18091: DOUBLE
18092: LD_INT 1
18094: DEC
18095: ST_TO_ADDR
18096: LD_INT 3
18098: PUSH
18099: FOR_TO
18100: IFFALSE 18126
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
18102: LD_VAR 0 2
18106: PPUSH
18107: CALL_OW 274
18111: PPUSH
18112: LD_VAR 0 3
18116: PPUSH
18117: LD_INT 99999
18119: PPUSH
18120: CALL_OW 277
18124: GO 18099
18126: POP
18127: POP
18128: GO 18083
18130: POP
18131: POP
// end ;
18132: LD_VAR 0 1
18136: RET
// export function hHackSetLevel10 ; var i , j ; begin
18137: LD_INT 0
18139: PPUSH
18140: PPUSH
18141: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18142: LD_ADDR_VAR 0 2
18146: PUSH
18147: LD_INT 21
18149: PUSH
18150: LD_INT 1
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PPUSH
18157: CALL_OW 69
18161: PUSH
18162: FOR_IN
18163: IFFALSE 18215
// if IsSelected ( i ) then
18165: LD_VAR 0 2
18169: PPUSH
18170: CALL_OW 306
18174: IFFALSE 18213
// begin for j := 1 to 4 do
18176: LD_ADDR_VAR 0 3
18180: PUSH
18181: DOUBLE
18182: LD_INT 1
18184: DEC
18185: ST_TO_ADDR
18186: LD_INT 4
18188: PUSH
18189: FOR_TO
18190: IFFALSE 18211
// SetSkill ( i , j , 10 ) ;
18192: LD_VAR 0 2
18196: PPUSH
18197: LD_VAR 0 3
18201: PPUSH
18202: LD_INT 10
18204: PPUSH
18205: CALL_OW 237
18209: GO 18189
18211: POP
18212: POP
// end ;
18213: GO 18162
18215: POP
18216: POP
// end ;
18217: LD_VAR 0 1
18221: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18222: LD_INT 0
18224: PPUSH
18225: PPUSH
18226: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18227: LD_ADDR_VAR 0 2
18231: PUSH
18232: LD_INT 22
18234: PUSH
18235: LD_OWVAR 2
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 21
18246: PUSH
18247: LD_INT 1
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: PUSH
18263: FOR_IN
18264: IFFALSE 18305
// begin for j := 1 to 4 do
18266: LD_ADDR_VAR 0 3
18270: PUSH
18271: DOUBLE
18272: LD_INT 1
18274: DEC
18275: ST_TO_ADDR
18276: LD_INT 4
18278: PUSH
18279: FOR_TO
18280: IFFALSE 18301
// SetSkill ( i , j , 10 ) ;
18282: LD_VAR 0 2
18286: PPUSH
18287: LD_VAR 0 3
18291: PPUSH
18292: LD_INT 10
18294: PPUSH
18295: CALL_OW 237
18299: GO 18279
18301: POP
18302: POP
// end ;
18303: GO 18263
18305: POP
18306: POP
// end ;
18307: LD_VAR 0 1
18311: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18312: LD_INT 0
18314: PPUSH
// uc_side := your_side ;
18315: LD_ADDR_OWVAR 20
18319: PUSH
18320: LD_OWVAR 2
18324: ST_TO_ADDR
// uc_nation := nation ;
18325: LD_ADDR_OWVAR 21
18329: PUSH
18330: LD_VAR 0 1
18334: ST_TO_ADDR
// InitHc ;
18335: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18339: LD_INT 0
18341: PPUSH
18342: LD_VAR 0 2
18346: PPUSH
18347: LD_VAR 0 3
18351: PPUSH
18352: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18356: LD_VAR 0 4
18360: PPUSH
18361: LD_VAR 0 5
18365: PPUSH
18366: CALL_OW 428
18370: PUSH
18371: LD_INT 0
18373: EQUAL
18374: IFFALSE 18398
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18376: CALL_OW 44
18380: PPUSH
18381: LD_VAR 0 4
18385: PPUSH
18386: LD_VAR 0 5
18390: PPUSH
18391: LD_INT 1
18393: PPUSH
18394: CALL_OW 48
// end ;
18398: LD_VAR 0 6
18402: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18403: LD_INT 0
18405: PPUSH
18406: PPUSH
// uc_side := your_side ;
18407: LD_ADDR_OWVAR 20
18411: PUSH
18412: LD_OWVAR 2
18416: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18417: LD_VAR 0 1
18421: PUSH
18422: LD_INT 1
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: LD_INT 4
18433: PUSH
18434: LD_INT 5
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: LIST
18443: IN
18444: IFFALSE 18456
// uc_nation := nation_american else
18446: LD_ADDR_OWVAR 21
18450: PUSH
18451: LD_INT 1
18453: ST_TO_ADDR
18454: GO 18499
// if chassis in [ 11 , 12 , 13 , 14 ] then
18456: LD_VAR 0 1
18460: PUSH
18461: LD_INT 11
18463: PUSH
18464: LD_INT 12
18466: PUSH
18467: LD_INT 13
18469: PUSH
18470: LD_INT 14
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: IN
18479: IFFALSE 18491
// uc_nation := nation_arabian else
18481: LD_ADDR_OWVAR 21
18485: PUSH
18486: LD_INT 2
18488: ST_TO_ADDR
18489: GO 18499
// uc_nation := nation_russian ;
18491: LD_ADDR_OWVAR 21
18495: PUSH
18496: LD_INT 3
18498: ST_TO_ADDR
// vc_chassis := chassis ;
18499: LD_ADDR_OWVAR 37
18503: PUSH
18504: LD_VAR 0 1
18508: ST_TO_ADDR
// vc_engine := engine ;
18509: LD_ADDR_OWVAR 39
18513: PUSH
18514: LD_VAR 0 2
18518: ST_TO_ADDR
// vc_control := control ;
18519: LD_ADDR_OWVAR 38
18523: PUSH
18524: LD_VAR 0 3
18528: ST_TO_ADDR
// vc_weapon := weapon ;
18529: LD_ADDR_OWVAR 40
18533: PUSH
18534: LD_VAR 0 4
18538: ST_TO_ADDR
// un := CreateVehicle ;
18539: LD_ADDR_VAR 0 8
18543: PUSH
18544: CALL_OW 45
18548: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18549: LD_VAR 0 8
18553: PPUSH
18554: LD_INT 0
18556: PPUSH
18557: LD_INT 5
18559: PPUSH
18560: CALL_OW 12
18564: PPUSH
18565: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18569: LD_VAR 0 8
18573: PPUSH
18574: LD_VAR 0 5
18578: PPUSH
18579: LD_VAR 0 6
18583: PPUSH
18584: LD_INT 1
18586: PPUSH
18587: CALL_OW 48
// end ;
18591: LD_VAR 0 7
18595: RET
// export hInvincible ; every 1 do
18596: GO 18598
18598: DISABLE
// hInvincible := [ ] ;
18599: LD_ADDR_EXP 81
18603: PUSH
18604: EMPTY
18605: ST_TO_ADDR
18606: END
// every 10 do var i ;
18607: GO 18609
18609: DISABLE
18610: LD_INT 0
18612: PPUSH
// begin enable ;
18613: ENABLE
// if not hInvincible then
18614: LD_EXP 81
18618: NOT
18619: IFFALSE 18623
// exit ;
18621: GO 18667
// for i in hInvincible do
18623: LD_ADDR_VAR 0 1
18627: PUSH
18628: LD_EXP 81
18632: PUSH
18633: FOR_IN
18634: IFFALSE 18665
// if GetLives ( i ) < 1000 then
18636: LD_VAR 0 1
18640: PPUSH
18641: CALL_OW 256
18645: PUSH
18646: LD_INT 1000
18648: LESS
18649: IFFALSE 18663
// SetLives ( i , 1000 ) ;
18651: LD_VAR 0 1
18655: PPUSH
18656: LD_INT 1000
18658: PPUSH
18659: CALL_OW 234
18663: GO 18633
18665: POP
18666: POP
// end ;
18667: PPOPN 1
18669: END
// export function hHackInvincible ; var i ; begin
18670: LD_INT 0
18672: PPUSH
18673: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18674: LD_ADDR_VAR 0 2
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: LD_INT 21
18684: PUSH
18685: LD_INT 1
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 21
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 69
18711: PUSH
18712: FOR_IN
18713: IFFALSE 18774
// if IsSelected ( i ) then
18715: LD_VAR 0 2
18719: PPUSH
18720: CALL_OW 306
18724: IFFALSE 18772
// begin if i in hInvincible then
18726: LD_VAR 0 2
18730: PUSH
18731: LD_EXP 81
18735: IN
18736: IFFALSE 18756
// hInvincible := hInvincible diff i else
18738: LD_ADDR_EXP 81
18742: PUSH
18743: LD_EXP 81
18747: PUSH
18748: LD_VAR 0 2
18752: DIFF
18753: ST_TO_ADDR
18754: GO 18772
// hInvincible := hInvincible union i ;
18756: LD_ADDR_EXP 81
18760: PUSH
18761: LD_EXP 81
18765: PUSH
18766: LD_VAR 0 2
18770: UNION
18771: ST_TO_ADDR
// end ;
18772: GO 18712
18774: POP
18775: POP
// end ;
18776: LD_VAR 0 1
18780: RET
// export function hHackInvisible ; var i , j ; begin
18781: LD_INT 0
18783: PPUSH
18784: PPUSH
18785: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18786: LD_ADDR_VAR 0 2
18790: PUSH
18791: LD_INT 21
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PPUSH
18801: CALL_OW 69
18805: PUSH
18806: FOR_IN
18807: IFFALSE 18831
// if IsSelected ( i ) then
18809: LD_VAR 0 2
18813: PPUSH
18814: CALL_OW 306
18818: IFFALSE 18829
// ComForceInvisible ( i ) ;
18820: LD_VAR 0 2
18824: PPUSH
18825: CALL_OW 496
18829: GO 18806
18831: POP
18832: POP
// end ;
18833: LD_VAR 0 1
18837: RET
// export function hHackChangeYourSide ; begin
18838: LD_INT 0
18840: PPUSH
// if your_side = 8 then
18841: LD_OWVAR 2
18845: PUSH
18846: LD_INT 8
18848: EQUAL
18849: IFFALSE 18861
// your_side := 0 else
18851: LD_ADDR_OWVAR 2
18855: PUSH
18856: LD_INT 0
18858: ST_TO_ADDR
18859: GO 18875
// your_side := your_side + 1 ;
18861: LD_ADDR_OWVAR 2
18865: PUSH
18866: LD_OWVAR 2
18870: PUSH
18871: LD_INT 1
18873: PLUS
18874: ST_TO_ADDR
// end ;
18875: LD_VAR 0 1
18879: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18880: LD_INT 0
18882: PPUSH
18883: PPUSH
18884: PPUSH
// for i in all_units do
18885: LD_ADDR_VAR 0 2
18889: PUSH
18890: LD_OWVAR 3
18894: PUSH
18895: FOR_IN
18896: IFFALSE 18974
// if IsSelected ( i ) then
18898: LD_VAR 0 2
18902: PPUSH
18903: CALL_OW 306
18907: IFFALSE 18972
// begin j := GetSide ( i ) ;
18909: LD_ADDR_VAR 0 3
18913: PUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: CALL_OW 255
18923: ST_TO_ADDR
// if j = 8 then
18924: LD_VAR 0 3
18928: PUSH
18929: LD_INT 8
18931: EQUAL
18932: IFFALSE 18944
// j := 0 else
18934: LD_ADDR_VAR 0 3
18938: PUSH
18939: LD_INT 0
18941: ST_TO_ADDR
18942: GO 18958
// j := j + 1 ;
18944: LD_ADDR_VAR 0 3
18948: PUSH
18949: LD_VAR 0 3
18953: PUSH
18954: LD_INT 1
18956: PLUS
18957: ST_TO_ADDR
// SetSide ( i , j ) ;
18958: LD_VAR 0 2
18962: PPUSH
18963: LD_VAR 0 3
18967: PPUSH
18968: CALL_OW 235
// end ;
18972: GO 18895
18974: POP
18975: POP
// end ;
18976: LD_VAR 0 1
18980: RET
// export function hHackFog ; begin
18981: LD_INT 0
18983: PPUSH
// FogOff ( true ) ;
18984: LD_INT 1
18986: PPUSH
18987: CALL_OW 344
// end ;
18991: LD_VAR 0 1
18995: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18996: LD_INT 0
18998: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18999: LD_VAR 0 1
19003: PPUSH
19004: LD_VAR 0 2
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_INT 1
19016: PPUSH
19017: LD_INT 1
19019: PPUSH
19020: CALL_OW 483
// CenterOnXY ( x , y ) ;
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_VAR 0 3
19033: PPUSH
19034: CALL_OW 84
// end ;
19038: LD_VAR 0 4
19042: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
19043: LD_INT 0
19045: PPUSH
19046: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
19047: LD_VAR 0 1
19051: NOT
19052: PUSH
19053: LD_VAR 0 2
19057: PPUSH
19058: LD_VAR 0 3
19062: PPUSH
19063: CALL_OW 488
19067: NOT
19068: OR
19069: PUSH
19070: LD_VAR 0 1
19074: PPUSH
19075: CALL_OW 266
19079: PUSH
19080: LD_INT 3
19082: NONEQUAL
19083: PUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 247
19093: PUSH
19094: LD_INT 1
19096: EQUAL
19097: NOT
19098: AND
19099: OR
19100: IFFALSE 19104
// exit ;
19102: GO 19253
// if GetType ( factory ) = unit_human then
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 247
19113: PUSH
19114: LD_INT 1
19116: EQUAL
19117: IFFALSE 19134
// factory := IsInUnit ( factory ) ;
19119: LD_ADDR_VAR 0 1
19123: PUSH
19124: LD_VAR 0 1
19128: PPUSH
19129: CALL_OW 310
19133: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
19134: LD_VAR 0 1
19138: PPUSH
19139: CALL_OW 266
19143: PUSH
19144: LD_INT 3
19146: NONEQUAL
19147: IFFALSE 19151
// exit ;
19149: GO 19253
// if HexInfo ( x , y ) = factory then
19151: LD_VAR 0 2
19155: PPUSH
19156: LD_VAR 0 3
19160: PPUSH
19161: CALL_OW 428
19165: PUSH
19166: LD_VAR 0 1
19170: EQUAL
19171: IFFALSE 19198
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19173: LD_ADDR_EXP 82
19177: PUSH
19178: LD_EXP 82
19182: PPUSH
19183: LD_VAR 0 1
19187: PPUSH
19188: LD_INT 0
19190: PPUSH
19191: CALL_OW 1
19195: ST_TO_ADDR
19196: GO 19249
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19198: LD_ADDR_EXP 82
19202: PUSH
19203: LD_EXP 82
19207: PPUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: LD_VAR 0 1
19217: PPUSH
19218: CALL_OW 255
19222: PUSH
19223: LD_VAR 0 1
19227: PUSH
19228: LD_VAR 0 2
19232: PUSH
19233: LD_VAR 0 3
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: PPUSH
19244: CALL_OW 1
19248: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19249: CALL 19258 0 0
// end ;
19253: LD_VAR 0 4
19257: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19258: LD_INT 0
19260: PPUSH
19261: PPUSH
19262: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19263: LD_STRING resetFactoryWaypoint();
19265: PPUSH
19266: CALL_OW 559
// if factoryWaypoints then
19270: LD_EXP 82
19274: IFFALSE 19400
// begin list := PrepareArray ( factoryWaypoints ) ;
19276: LD_ADDR_VAR 0 3
19280: PUSH
19281: LD_EXP 82
19285: PPUSH
19286: CALL 66032 0 1
19290: ST_TO_ADDR
// for i := 1 to list do
19291: LD_ADDR_VAR 0 2
19295: PUSH
19296: DOUBLE
19297: LD_INT 1
19299: DEC
19300: ST_TO_ADDR
19301: LD_VAR 0 3
19305: PUSH
19306: FOR_TO
19307: IFFALSE 19398
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19309: LD_STRING setFactoryWaypointXY(
19311: PUSH
19312: LD_VAR 0 3
19316: PUSH
19317: LD_VAR 0 2
19321: ARRAY
19322: PUSH
19323: LD_INT 1
19325: ARRAY
19326: STR
19327: PUSH
19328: LD_STRING ,
19330: STR
19331: PUSH
19332: LD_VAR 0 3
19336: PUSH
19337: LD_VAR 0 2
19341: ARRAY
19342: PUSH
19343: LD_INT 2
19345: ARRAY
19346: STR
19347: PUSH
19348: LD_STRING ,
19350: STR
19351: PUSH
19352: LD_VAR 0 3
19356: PUSH
19357: LD_VAR 0 2
19361: ARRAY
19362: PUSH
19363: LD_INT 3
19365: ARRAY
19366: STR
19367: PUSH
19368: LD_STRING ,
19370: STR
19371: PUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_VAR 0 2
19381: ARRAY
19382: PUSH
19383: LD_INT 4
19385: ARRAY
19386: STR
19387: PUSH
19388: LD_STRING )
19390: STR
19391: PPUSH
19392: CALL_OW 559
19396: GO 19306
19398: POP
19399: POP
// end ; end ;
19400: LD_VAR 0 1
19404: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19405: LD_INT 0
19407: PPUSH
// if HexInfo ( x , y ) = warehouse then
19408: LD_VAR 0 2
19412: PPUSH
19413: LD_VAR 0 3
19417: PPUSH
19418: CALL_OW 428
19422: PUSH
19423: LD_VAR 0 1
19427: EQUAL
19428: IFFALSE 19455
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19430: LD_ADDR_EXP 83
19434: PUSH
19435: LD_EXP 83
19439: PPUSH
19440: LD_VAR 0 1
19444: PPUSH
19445: LD_INT 0
19447: PPUSH
19448: CALL_OW 1
19452: ST_TO_ADDR
19453: GO 19506
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19455: LD_ADDR_EXP 83
19459: PUSH
19460: LD_EXP 83
19464: PPUSH
19465: LD_VAR 0 1
19469: PPUSH
19470: LD_VAR 0 1
19474: PPUSH
19475: CALL_OW 255
19479: PUSH
19480: LD_VAR 0 1
19484: PUSH
19485: LD_VAR 0 2
19489: PUSH
19490: LD_VAR 0 3
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: PPUSH
19501: CALL_OW 1
19505: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19506: CALL 19515 0 0
// end ;
19510: LD_VAR 0 4
19514: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19515: LD_INT 0
19517: PPUSH
19518: PPUSH
19519: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19520: LD_STRING resetWarehouseGatheringPoints();
19522: PPUSH
19523: CALL_OW 559
// if warehouseGatheringPoints then
19527: LD_EXP 83
19531: IFFALSE 19657
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_EXP 83
19542: PPUSH
19543: CALL 66032 0 1
19547: ST_TO_ADDR
// for i := 1 to list do
19548: LD_ADDR_VAR 0 2
19552: PUSH
19553: DOUBLE
19554: LD_INT 1
19556: DEC
19557: ST_TO_ADDR
19558: LD_VAR 0 3
19562: PUSH
19563: FOR_TO
19564: IFFALSE 19655
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19566: LD_STRING setWarehouseGatheringPointXY(
19568: PUSH
19569: LD_VAR 0 3
19573: PUSH
19574: LD_VAR 0 2
19578: ARRAY
19579: PUSH
19580: LD_INT 1
19582: ARRAY
19583: STR
19584: PUSH
19585: LD_STRING ,
19587: STR
19588: PUSH
19589: LD_VAR 0 3
19593: PUSH
19594: LD_VAR 0 2
19598: ARRAY
19599: PUSH
19600: LD_INT 2
19602: ARRAY
19603: STR
19604: PUSH
19605: LD_STRING ,
19607: STR
19608: PUSH
19609: LD_VAR 0 3
19613: PUSH
19614: LD_VAR 0 2
19618: ARRAY
19619: PUSH
19620: LD_INT 3
19622: ARRAY
19623: STR
19624: PUSH
19625: LD_STRING ,
19627: STR
19628: PUSH
19629: LD_VAR 0 3
19633: PUSH
19634: LD_VAR 0 2
19638: ARRAY
19639: PUSH
19640: LD_INT 4
19642: ARRAY
19643: STR
19644: PUSH
19645: LD_STRING )
19647: STR
19648: PPUSH
19649: CALL_OW 559
19653: GO 19563
19655: POP
19656: POP
// end ; end ;
19657: LD_VAR 0 1
19661: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19662: LD_EXP 83
19666: IFFALSE 20351
19668: GO 19670
19670: DISABLE
19671: LD_INT 0
19673: PPUSH
19674: PPUSH
19675: PPUSH
19676: PPUSH
19677: PPUSH
19678: PPUSH
19679: PPUSH
19680: PPUSH
19681: PPUSH
// begin enable ;
19682: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19683: LD_ADDR_VAR 0 3
19687: PUSH
19688: LD_EXP 83
19692: PPUSH
19693: CALL 66032 0 1
19697: ST_TO_ADDR
// if not list then
19698: LD_VAR 0 3
19702: NOT
19703: IFFALSE 19707
// exit ;
19705: GO 20351
// for i := 1 to list do
19707: LD_ADDR_VAR 0 1
19711: PUSH
19712: DOUBLE
19713: LD_INT 1
19715: DEC
19716: ST_TO_ADDR
19717: LD_VAR 0 3
19721: PUSH
19722: FOR_TO
19723: IFFALSE 20349
// begin depot := list [ i ] [ 2 ] ;
19725: LD_ADDR_VAR 0 8
19729: PUSH
19730: LD_VAR 0 3
19734: PUSH
19735: LD_VAR 0 1
19739: ARRAY
19740: PUSH
19741: LD_INT 2
19743: ARRAY
19744: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19745: LD_ADDR_VAR 0 5
19749: PUSH
19750: LD_VAR 0 3
19754: PUSH
19755: LD_VAR 0 1
19759: ARRAY
19760: PUSH
19761: LD_INT 1
19763: ARRAY
19764: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19765: LD_VAR 0 8
19769: PPUSH
19770: CALL_OW 301
19774: PUSH
19775: LD_VAR 0 5
19779: PUSH
19780: LD_VAR 0 8
19784: PPUSH
19785: CALL_OW 255
19789: NONEQUAL
19790: OR
19791: IFFALSE 19820
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19793: LD_ADDR_EXP 83
19797: PUSH
19798: LD_EXP 83
19802: PPUSH
19803: LD_VAR 0 8
19807: PPUSH
19808: LD_INT 0
19810: PPUSH
19811: CALL_OW 1
19815: ST_TO_ADDR
// exit ;
19816: POP
19817: POP
19818: GO 20351
// end ; x := list [ i ] [ 3 ] ;
19820: LD_ADDR_VAR 0 6
19824: PUSH
19825: LD_VAR 0 3
19829: PUSH
19830: LD_VAR 0 1
19834: ARRAY
19835: PUSH
19836: LD_INT 3
19838: ARRAY
19839: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19840: LD_ADDR_VAR 0 7
19844: PUSH
19845: LD_VAR 0 3
19849: PUSH
19850: LD_VAR 0 1
19854: ARRAY
19855: PUSH
19856: LD_INT 4
19858: ARRAY
19859: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19860: LD_ADDR_VAR 0 9
19864: PUSH
19865: LD_VAR 0 6
19869: PPUSH
19870: LD_VAR 0 7
19874: PPUSH
19875: LD_INT 16
19877: PPUSH
19878: CALL 64620 0 3
19882: ST_TO_ADDR
// if not cratesNearbyPoint then
19883: LD_VAR 0 9
19887: NOT
19888: IFFALSE 19894
// exit ;
19890: POP
19891: POP
19892: GO 20351
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19894: LD_ADDR_VAR 0 4
19898: PUSH
19899: LD_INT 22
19901: PUSH
19902: LD_VAR 0 5
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: LD_INT 60
19916: PUSH
19917: EMPTY
19918: LIST
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 91
19926: PUSH
19927: LD_VAR 0 8
19931: PUSH
19932: LD_INT 6
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 2
19942: PUSH
19943: LD_INT 25
19945: PUSH
19946: LD_INT 2
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 25
19955: PUSH
19956: LD_INT 16
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: PPUSH
19974: CALL_OW 69
19978: PUSH
19979: LD_VAR 0 8
19983: PPUSH
19984: CALL_OW 313
19988: PPUSH
19989: LD_INT 3
19991: PUSH
19992: LD_INT 60
19994: PUSH
19995: EMPTY
19996: LIST
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 25
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 25
20017: PUSH
20018: LD_INT 16
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PPUSH
20034: CALL_OW 72
20038: UNION
20039: ST_TO_ADDR
// if tmp then
20040: LD_VAR 0 4
20044: IFFALSE 20124
// begin tmp := ShrinkArray ( tmp , 3 ) ;
20046: LD_ADDR_VAR 0 4
20050: PUSH
20051: LD_VAR 0 4
20055: PPUSH
20056: LD_INT 3
20058: PPUSH
20059: CALL 62589 0 2
20063: ST_TO_ADDR
// for j in tmp do
20064: LD_ADDR_VAR 0 2
20068: PUSH
20069: LD_VAR 0 4
20073: PUSH
20074: FOR_IN
20075: IFFALSE 20118
// begin if IsInUnit ( j ) then
20077: LD_VAR 0 2
20081: PPUSH
20082: CALL_OW 310
20086: IFFALSE 20097
// ComExit ( j ) ;
20088: LD_VAR 0 2
20092: PPUSH
20093: CALL 62672 0 1
// AddComCollect ( j , x , y ) ;
20097: LD_VAR 0 2
20101: PPUSH
20102: LD_VAR 0 6
20106: PPUSH
20107: LD_VAR 0 7
20111: PPUSH
20112: CALL_OW 177
// end ;
20116: GO 20074
20118: POP
20119: POP
// exit ;
20120: POP
20121: POP
20122: GO 20351
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
20124: LD_ADDR_VAR 0 4
20128: PUSH
20129: LD_INT 22
20131: PUSH
20132: LD_VAR 0 5
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: PUSH
20141: LD_INT 91
20143: PUSH
20144: LD_VAR 0 8
20148: PUSH
20149: LD_INT 8
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: LIST
20156: PUSH
20157: LD_INT 2
20159: PUSH
20160: LD_INT 34
20162: PUSH
20163: LD_INT 12
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 34
20172: PUSH
20173: LD_INT 51
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 34
20182: PUSH
20183: LD_INT 32
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: PUSH
20190: LD_INT 34
20192: PUSH
20193: LD_INT 89
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: PPUSH
20212: CALL_OW 69
20216: ST_TO_ADDR
// if tmp then
20217: LD_VAR 0 4
20221: IFFALSE 20347
// begin for j in tmp do
20223: LD_ADDR_VAR 0 2
20227: PUSH
20228: LD_VAR 0 4
20232: PUSH
20233: FOR_IN
20234: IFFALSE 20345
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20236: LD_VAR 0 2
20240: PPUSH
20241: CALL_OW 262
20245: PUSH
20246: LD_INT 3
20248: EQUAL
20249: PUSH
20250: LD_VAR 0 2
20254: PPUSH
20255: CALL_OW 261
20259: PUSH
20260: LD_INT 20
20262: GREATER
20263: OR
20264: PUSH
20265: LD_VAR 0 2
20269: PPUSH
20270: CALL_OW 314
20274: NOT
20275: AND
20276: PUSH
20277: LD_VAR 0 2
20281: PPUSH
20282: CALL_OW 263
20286: PUSH
20287: LD_INT 1
20289: NONEQUAL
20290: PUSH
20291: LD_VAR 0 2
20295: PPUSH
20296: CALL_OW 311
20300: OR
20301: AND
20302: IFFALSE 20343
// begin ComCollect ( j , x , y ) ;
20304: LD_VAR 0 2
20308: PPUSH
20309: LD_VAR 0 6
20313: PPUSH
20314: LD_VAR 0 7
20318: PPUSH
20319: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20323: LD_VAR 0 2
20327: PPUSH
20328: LD_VAR 0 8
20332: PPUSH
20333: CALL_OW 172
// exit ;
20337: POP
20338: POP
20339: POP
20340: POP
20341: GO 20351
// end ;
20343: GO 20233
20345: POP
20346: POP
// end ; end ;
20347: GO 19722
20349: POP
20350: POP
// end ; end_of_file
20351: PPOPN 9
20353: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20354: LD_VAR 0 1
20358: PUSH
20359: LD_INT 200
20361: DOUBLE
20362: GREATEREQUAL
20363: IFFALSE 20371
20365: LD_INT 299
20367: DOUBLE
20368: LESSEQUAL
20369: IFTRUE 20373
20371: GO 20405
20373: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20374: LD_VAR 0 1
20378: PPUSH
20379: LD_VAR 0 2
20383: PPUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: LD_VAR 0 4
20393: PPUSH
20394: LD_VAR 0 5
20398: PPUSH
20399: CALL 20893 0 5
20403: GO 20482
20405: LD_INT 300
20407: DOUBLE
20408: GREATEREQUAL
20409: IFFALSE 20417
20411: LD_INT 399
20413: DOUBLE
20414: LESSEQUAL
20415: IFTRUE 20419
20417: GO 20481
20419: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20420: LD_VAR 0 1
20424: PPUSH
20425: LD_VAR 0 2
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: LD_VAR 0 4
20439: PPUSH
20440: LD_VAR 0 5
20444: PPUSH
20445: LD_VAR 0 6
20449: PPUSH
20450: LD_VAR 0 7
20454: PPUSH
20455: LD_VAR 0 8
20459: PPUSH
20460: LD_VAR 0 9
20464: PPUSH
20465: LD_VAR 0 10
20469: PPUSH
20470: LD_VAR 0 11
20474: PPUSH
20475: CALL 17063 0 11
20479: GO 20482
20481: POP
// end ;
20482: PPOPN 11
20484: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20485: LD_VAR 0 1
20489: PPUSH
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_VAR 0 3
20499: PPUSH
20500: LD_VAR 0 4
20504: PPUSH
20505: LD_VAR 0 5
20509: PPUSH
20510: CALL 20629 0 5
// end ; end_of_file
20514: PPOPN 5
20516: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20517: LD_INT 0
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20523: LD_VAR 0 1
20527: PPUSH
20528: CALL_OW 264
20532: PUSH
20533: LD_INT 91
20535: EQUAL
20536: IFFALSE 20608
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20538: LD_INT 68
20540: PPUSH
20541: LD_VAR 0 1
20545: PPUSH
20546: CALL_OW 255
20550: PPUSH
20551: CALL_OW 321
20555: PUSH
20556: LD_INT 2
20558: EQUAL
20559: IFFALSE 20571
// eff := 70 else
20561: LD_ADDR_VAR 0 4
20565: PUSH
20566: LD_INT 70
20568: ST_TO_ADDR
20569: GO 20579
// eff := 30 ;
20571: LD_ADDR_VAR 0 4
20575: PUSH
20576: LD_INT 30
20578: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20579: LD_VAR 0 1
20583: PPUSH
20584: CALL_OW 250
20588: PPUSH
20589: LD_VAR 0 1
20593: PPUSH
20594: CALL_OW 251
20598: PPUSH
20599: LD_VAR 0 4
20603: PPUSH
20604: CALL_OW 495
// end ; end ;
20608: LD_VAR 0 2
20612: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20613: LD_INT 0
20615: PPUSH
// end ;
20616: LD_VAR 0 4
20620: RET
// export function SOS_Command ( cmd ) ; begin
20621: LD_INT 0
20623: PPUSH
// end ;
20624: LD_VAR 0 2
20628: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20629: LD_INT 0
20631: PPUSH
// end ;
20632: LD_VAR 0 6
20636: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20637: LD_INT 0
20639: PPUSH
20640: PPUSH
// if not vehicle or not factory then
20641: LD_VAR 0 1
20645: NOT
20646: PUSH
20647: LD_VAR 0 2
20651: NOT
20652: OR
20653: IFFALSE 20657
// exit ;
20655: GO 20888
// if factoryWaypoints >= factory then
20657: LD_EXP 82
20661: PUSH
20662: LD_VAR 0 2
20666: GREATEREQUAL
20667: IFFALSE 20888
// if factoryWaypoints [ factory ] then
20669: LD_EXP 82
20673: PUSH
20674: LD_VAR 0 2
20678: ARRAY
20679: IFFALSE 20888
// begin if GetControl ( vehicle ) = control_manual then
20681: LD_VAR 0 1
20685: PPUSH
20686: CALL_OW 263
20690: PUSH
20691: LD_INT 1
20693: EQUAL
20694: IFFALSE 20775
// begin driver := IsDrivenBy ( vehicle ) ;
20696: LD_ADDR_VAR 0 4
20700: PUSH
20701: LD_VAR 0 1
20705: PPUSH
20706: CALL_OW 311
20710: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20711: LD_VAR 0 4
20715: PPUSH
20716: LD_EXP 82
20720: PUSH
20721: LD_VAR 0 2
20725: ARRAY
20726: PUSH
20727: LD_INT 3
20729: ARRAY
20730: PPUSH
20731: LD_EXP 82
20735: PUSH
20736: LD_VAR 0 2
20740: ARRAY
20741: PUSH
20742: LD_INT 4
20744: ARRAY
20745: PPUSH
20746: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20750: LD_VAR 0 4
20754: PPUSH
20755: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20759: LD_VAR 0 4
20763: PPUSH
20764: LD_VAR 0 2
20768: PPUSH
20769: CALL_OW 180
// end else
20773: GO 20888
// if GetControl ( vehicle ) = control_remote then
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 263
20784: PUSH
20785: LD_INT 2
20787: EQUAL
20788: IFFALSE 20849
// begin wait ( 0 0$2 ) ;
20790: LD_INT 70
20792: PPUSH
20793: CALL_OW 67
// if Connect ( vehicle ) then
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL 32912 0 1
20806: IFFALSE 20847
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20808: LD_VAR 0 1
20812: PPUSH
20813: LD_EXP 82
20817: PUSH
20818: LD_VAR 0 2
20822: ARRAY
20823: PUSH
20824: LD_INT 3
20826: ARRAY
20827: PPUSH
20828: LD_EXP 82
20832: PUSH
20833: LD_VAR 0 2
20837: ARRAY
20838: PUSH
20839: LD_INT 4
20841: ARRAY
20842: PPUSH
20843: CALL_OW 171
// end else
20847: GO 20888
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20849: LD_VAR 0 1
20853: PPUSH
20854: LD_EXP 82
20858: PUSH
20859: LD_VAR 0 2
20863: ARRAY
20864: PUSH
20865: LD_INT 3
20867: ARRAY
20868: PPUSH
20869: LD_EXP 82
20873: PUSH
20874: LD_VAR 0 2
20878: ARRAY
20879: PUSH
20880: LD_INT 4
20882: ARRAY
20883: PPUSH
20884: CALL_OW 171
// end ; end ;
20888: LD_VAR 0 3
20892: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20893: LD_INT 0
20895: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20896: LD_VAR 0 1
20900: PUSH
20901: LD_INT 250
20903: EQUAL
20904: PUSH
20905: LD_VAR 0 2
20909: PPUSH
20910: CALL_OW 264
20914: PUSH
20915: LD_INT 81
20917: EQUAL
20918: AND
20919: IFFALSE 20940
// MinerPlaceMine ( unit , x , y ) ;
20921: LD_VAR 0 2
20925: PPUSH
20926: LD_VAR 0 4
20930: PPUSH
20931: LD_VAR 0 5
20935: PPUSH
20936: CALL 23325 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20940: LD_VAR 0 1
20944: PUSH
20945: LD_INT 251
20947: EQUAL
20948: PUSH
20949: LD_VAR 0 2
20953: PPUSH
20954: CALL_OW 264
20958: PUSH
20959: LD_INT 81
20961: EQUAL
20962: AND
20963: IFFALSE 20984
// MinerDetonateMine ( unit , x , y ) ;
20965: LD_VAR 0 2
20969: PPUSH
20970: LD_VAR 0 4
20974: PPUSH
20975: LD_VAR 0 5
20979: PPUSH
20980: CALL 23600 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20984: LD_VAR 0 1
20988: PUSH
20989: LD_INT 252
20991: EQUAL
20992: PUSH
20993: LD_VAR 0 2
20997: PPUSH
20998: CALL_OW 264
21002: PUSH
21003: LD_INT 81
21005: EQUAL
21006: AND
21007: IFFALSE 21028
// MinerCreateMinefield ( unit , x , y ) ;
21009: LD_VAR 0 2
21013: PPUSH
21014: LD_VAR 0 4
21018: PPUSH
21019: LD_VAR 0 5
21023: PPUSH
21024: CALL 24017 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21028: LD_VAR 0 1
21032: PUSH
21033: LD_INT 253
21035: EQUAL
21036: PUSH
21037: LD_VAR 0 2
21041: PPUSH
21042: CALL_OW 257
21046: PUSH
21047: LD_INT 5
21049: EQUAL
21050: AND
21051: IFFALSE 21072
// ComBinocular ( unit , x , y ) ;
21053: LD_VAR 0 2
21057: PPUSH
21058: LD_VAR 0 4
21062: PPUSH
21063: LD_VAR 0 5
21067: PPUSH
21068: CALL 24386 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21072: LD_VAR 0 1
21076: PUSH
21077: LD_INT 254
21079: EQUAL
21080: PUSH
21081: LD_VAR 0 2
21085: PPUSH
21086: CALL_OW 264
21090: PUSH
21091: LD_INT 99
21093: EQUAL
21094: AND
21095: PUSH
21096: LD_VAR 0 3
21100: PPUSH
21101: CALL_OW 263
21105: PUSH
21106: LD_INT 3
21108: EQUAL
21109: AND
21110: IFFALSE 21126
// HackDestroyVehicle ( unit , selectedUnit ) ;
21112: LD_VAR 0 2
21116: PPUSH
21117: LD_VAR 0 3
21121: PPUSH
21122: CALL 22689 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21126: LD_VAR 0 1
21130: PUSH
21131: LD_INT 255
21133: EQUAL
21134: PUSH
21135: LD_VAR 0 2
21139: PPUSH
21140: CALL_OW 264
21144: PUSH
21145: LD_INT 14
21147: PUSH
21148: LD_INT 53
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: IN
21155: AND
21156: PUSH
21157: LD_VAR 0 4
21161: PPUSH
21162: LD_VAR 0 5
21166: PPUSH
21167: CALL_OW 488
21171: AND
21172: IFFALSE 21196
// CutTreeXYR ( unit , x , y , 12 ) ;
21174: LD_VAR 0 2
21178: PPUSH
21179: LD_VAR 0 4
21183: PPUSH
21184: LD_VAR 0 5
21188: PPUSH
21189: LD_INT 12
21191: PPUSH
21192: CALL 21259 0 4
// if cmd = 256 then
21196: LD_VAR 0 1
21200: PUSH
21201: LD_INT 256
21203: EQUAL
21204: IFFALSE 21225
// SetFactoryWaypoint ( unit , x , y ) ;
21206: LD_VAR 0 2
21210: PPUSH
21211: LD_VAR 0 4
21215: PPUSH
21216: LD_VAR 0 5
21220: PPUSH
21221: CALL 19043 0 3
// if cmd = 257 then
21225: LD_VAR 0 1
21229: PUSH
21230: LD_INT 257
21232: EQUAL
21233: IFFALSE 21254
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21235: LD_VAR 0 2
21239: PPUSH
21240: LD_VAR 0 4
21244: PPUSH
21245: LD_VAR 0 5
21249: PPUSH
21250: CALL 19405 0 3
// end ;
21254: LD_VAR 0 6
21258: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21259: LD_INT 0
21261: PPUSH
21262: PPUSH
21263: PPUSH
21264: PPUSH
21265: PPUSH
21266: PPUSH
21267: PPUSH
21268: PPUSH
21269: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21270: LD_VAR 0 1
21274: NOT
21275: PUSH
21276: LD_VAR 0 2
21280: PPUSH
21281: LD_VAR 0 3
21285: PPUSH
21286: CALL_OW 488
21290: NOT
21291: OR
21292: PUSH
21293: LD_VAR 0 4
21297: NOT
21298: OR
21299: IFFALSE 21303
// exit ;
21301: GO 21643
// list := [ ] ;
21303: LD_ADDR_VAR 0 13
21307: PUSH
21308: EMPTY
21309: ST_TO_ADDR
// if x - r < 0 then
21310: LD_VAR 0 2
21314: PUSH
21315: LD_VAR 0 4
21319: MINUS
21320: PUSH
21321: LD_INT 0
21323: LESS
21324: IFFALSE 21336
// min_x := 0 else
21326: LD_ADDR_VAR 0 7
21330: PUSH
21331: LD_INT 0
21333: ST_TO_ADDR
21334: GO 21352
// min_x := x - r ;
21336: LD_ADDR_VAR 0 7
21340: PUSH
21341: LD_VAR 0 2
21345: PUSH
21346: LD_VAR 0 4
21350: MINUS
21351: ST_TO_ADDR
// if y - r < 0 then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_VAR 0 4
21361: MINUS
21362: PUSH
21363: LD_INT 0
21365: LESS
21366: IFFALSE 21378
// min_y := 0 else
21368: LD_ADDR_VAR 0 8
21372: PUSH
21373: LD_INT 0
21375: ST_TO_ADDR
21376: GO 21394
// min_y := y - r ;
21378: LD_ADDR_VAR 0 8
21382: PUSH
21383: LD_VAR 0 3
21387: PUSH
21388: LD_VAR 0 4
21392: MINUS
21393: ST_TO_ADDR
// max_x := x + r ;
21394: LD_ADDR_VAR 0 9
21398: PUSH
21399: LD_VAR 0 2
21403: PUSH
21404: LD_VAR 0 4
21408: PLUS
21409: ST_TO_ADDR
// max_y := y + r ;
21410: LD_ADDR_VAR 0 10
21414: PUSH
21415: LD_VAR 0 3
21419: PUSH
21420: LD_VAR 0 4
21424: PLUS
21425: ST_TO_ADDR
// for _x = min_x to max_x do
21426: LD_ADDR_VAR 0 11
21430: PUSH
21431: DOUBLE
21432: LD_VAR 0 7
21436: DEC
21437: ST_TO_ADDR
21438: LD_VAR 0 9
21442: PUSH
21443: FOR_TO
21444: IFFALSE 21561
// for _y = min_y to max_y do
21446: LD_ADDR_VAR 0 12
21450: PUSH
21451: DOUBLE
21452: LD_VAR 0 8
21456: DEC
21457: ST_TO_ADDR
21458: LD_VAR 0 10
21462: PUSH
21463: FOR_TO
21464: IFFALSE 21557
// begin if not ValidHex ( _x , _y ) then
21466: LD_VAR 0 11
21470: PPUSH
21471: LD_VAR 0 12
21475: PPUSH
21476: CALL_OW 488
21480: NOT
21481: IFFALSE 21485
// continue ;
21483: GO 21463
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21485: LD_VAR 0 11
21489: PPUSH
21490: LD_VAR 0 12
21494: PPUSH
21495: CALL_OW 351
21499: PUSH
21500: LD_VAR 0 11
21504: PPUSH
21505: LD_VAR 0 12
21509: PPUSH
21510: CALL_OW 554
21514: AND
21515: IFFALSE 21555
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21517: LD_ADDR_VAR 0 13
21521: PUSH
21522: LD_VAR 0 13
21526: PPUSH
21527: LD_VAR 0 13
21531: PUSH
21532: LD_INT 1
21534: PLUS
21535: PPUSH
21536: LD_VAR 0 11
21540: PUSH
21541: LD_VAR 0 12
21545: PUSH
21546: EMPTY
21547: LIST
21548: LIST
21549: PPUSH
21550: CALL_OW 2
21554: ST_TO_ADDR
// end ;
21555: GO 21463
21557: POP
21558: POP
21559: GO 21443
21561: POP
21562: POP
// if not list then
21563: LD_VAR 0 13
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21643
// for i in list do
21572: LD_ADDR_VAR 0 6
21576: PUSH
21577: LD_VAR 0 13
21581: PUSH
21582: FOR_IN
21583: IFFALSE 21641
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_STRING M
21592: PUSH
21593: LD_VAR 0 6
21597: PUSH
21598: LD_INT 1
21600: ARRAY
21601: PUSH
21602: LD_VAR 0 6
21606: PUSH
21607: LD_INT 2
21609: ARRAY
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: LD_INT 0
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: LD_INT 0
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: PPUSH
21635: CALL_OW 447
21639: GO 21582
21641: POP
21642: POP
// end ;
21643: LD_VAR 0 5
21647: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21648: LD_EXP 85
21652: NOT
21653: IFFALSE 21703
21655: GO 21657
21657: DISABLE
// begin initHack := true ;
21658: LD_ADDR_EXP 85
21662: PUSH
21663: LD_INT 1
21665: ST_TO_ADDR
// hackTanks := [ ] ;
21666: LD_ADDR_EXP 86
21670: PUSH
21671: EMPTY
21672: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21673: LD_ADDR_EXP 87
21677: PUSH
21678: EMPTY
21679: ST_TO_ADDR
// hackLimit := 3 ;
21680: LD_ADDR_EXP 88
21684: PUSH
21685: LD_INT 3
21687: ST_TO_ADDR
// hackDist := 12 ;
21688: LD_ADDR_EXP 89
21692: PUSH
21693: LD_INT 12
21695: ST_TO_ADDR
// hackCounter := [ ] ;
21696: LD_ADDR_EXP 90
21700: PUSH
21701: EMPTY
21702: ST_TO_ADDR
// end ;
21703: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21704: LD_EXP 85
21708: PUSH
21709: LD_INT 34
21711: PUSH
21712: LD_INT 99
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PPUSH
21719: CALL_OW 69
21723: AND
21724: IFFALSE 21977
21726: GO 21728
21728: DISABLE
21729: LD_INT 0
21731: PPUSH
21732: PPUSH
// begin enable ;
21733: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21734: LD_ADDR_VAR 0 1
21738: PUSH
21739: LD_INT 34
21741: PUSH
21742: LD_INT 99
21744: PUSH
21745: EMPTY
21746: LIST
21747: LIST
21748: PPUSH
21749: CALL_OW 69
21753: PUSH
21754: FOR_IN
21755: IFFALSE 21975
// begin if not i in hackTanks then
21757: LD_VAR 0 1
21761: PUSH
21762: LD_EXP 86
21766: IN
21767: NOT
21768: IFFALSE 21851
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21770: LD_ADDR_EXP 86
21774: PUSH
21775: LD_EXP 86
21779: PPUSH
21780: LD_EXP 86
21784: PUSH
21785: LD_INT 1
21787: PLUS
21788: PPUSH
21789: LD_VAR 0 1
21793: PPUSH
21794: CALL_OW 1
21798: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21799: LD_ADDR_EXP 87
21803: PUSH
21804: LD_EXP 87
21808: PPUSH
21809: LD_EXP 87
21813: PUSH
21814: LD_INT 1
21816: PLUS
21817: PPUSH
21818: EMPTY
21819: PPUSH
21820: CALL_OW 1
21824: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21825: LD_ADDR_EXP 90
21829: PUSH
21830: LD_EXP 90
21834: PPUSH
21835: LD_EXP 90
21839: PUSH
21840: LD_INT 1
21842: PLUS
21843: PPUSH
21844: EMPTY
21845: PPUSH
21846: CALL_OW 1
21850: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21851: LD_VAR 0 1
21855: PPUSH
21856: CALL_OW 302
21860: NOT
21861: IFFALSE 21874
// begin HackUnlinkAll ( i ) ;
21863: LD_VAR 0 1
21867: PPUSH
21868: CALL 21980 0 1
// continue ;
21872: GO 21754
// end ; HackCheckCapturedStatus ( i ) ;
21874: LD_VAR 0 1
21878: PPUSH
21879: CALL 22423 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21883: LD_ADDR_VAR 0 2
21887: PUSH
21888: LD_INT 81
21890: PUSH
21891: LD_VAR 0 1
21895: PPUSH
21896: CALL_OW 255
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: LD_INT 33
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PUSH
21915: LD_INT 91
21917: PUSH
21918: LD_VAR 0 1
21922: PUSH
21923: LD_EXP 89
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 50
21935: PUSH
21936: EMPTY
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PPUSH
21945: CALL_OW 69
21949: ST_TO_ADDR
// if not tmp then
21950: LD_VAR 0 2
21954: NOT
21955: IFFALSE 21959
// continue ;
21957: GO 21754
// HackLink ( i , tmp ) ;
21959: LD_VAR 0 1
21963: PPUSH
21964: LD_VAR 0 2
21968: PPUSH
21969: CALL 22116 0 2
// end ;
21973: GO 21754
21975: POP
21976: POP
// end ;
21977: PPOPN 2
21979: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21980: LD_INT 0
21982: PPUSH
21983: PPUSH
21984: PPUSH
// if not hack in hackTanks then
21985: LD_VAR 0 1
21989: PUSH
21990: LD_EXP 86
21994: IN
21995: NOT
21996: IFFALSE 22000
// exit ;
21998: GO 22111
// index := GetElementIndex ( hackTanks , hack ) ;
22000: LD_ADDR_VAR 0 4
22004: PUSH
22005: LD_EXP 86
22009: PPUSH
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL 29728 0 2
22019: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22020: LD_EXP 87
22024: PUSH
22025: LD_VAR 0 4
22029: ARRAY
22030: IFFALSE 22111
// begin for i in hackTanksCaptured [ index ] do
22032: LD_ADDR_VAR 0 3
22036: PUSH
22037: LD_EXP 87
22041: PUSH
22042: LD_VAR 0 4
22046: ARRAY
22047: PUSH
22048: FOR_IN
22049: IFFALSE 22075
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22051: LD_VAR 0 3
22055: PUSH
22056: LD_INT 1
22058: ARRAY
22059: PPUSH
22060: LD_VAR 0 3
22064: PUSH
22065: LD_INT 2
22067: ARRAY
22068: PPUSH
22069: CALL_OW 235
22073: GO 22048
22075: POP
22076: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22077: LD_ADDR_EXP 87
22081: PUSH
22082: LD_EXP 87
22086: PPUSH
22087: LD_VAR 0 4
22091: PPUSH
22092: EMPTY
22093: PPUSH
22094: CALL_OW 1
22098: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22099: LD_VAR 0 1
22103: PPUSH
22104: LD_INT 0
22106: PPUSH
22107: CALL_OW 505
// end ; end ;
22111: LD_VAR 0 2
22115: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22116: LD_INT 0
22118: PPUSH
22119: PPUSH
22120: PPUSH
// if not hack in hackTanks or not vehicles then
22121: LD_VAR 0 1
22125: PUSH
22126: LD_EXP 86
22130: IN
22131: NOT
22132: PUSH
22133: LD_VAR 0 2
22137: NOT
22138: OR
22139: IFFALSE 22143
// exit ;
22141: GO 22418
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22143: LD_ADDR_VAR 0 2
22147: PUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: LD_VAR 0 2
22157: PPUSH
22158: LD_INT 1
22160: PPUSH
22161: LD_INT 1
22163: PPUSH
22164: CALL 30378 0 4
22168: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22169: LD_ADDR_VAR 0 5
22173: PUSH
22174: LD_EXP 86
22178: PPUSH
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL 29728 0 2
22188: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22189: LD_EXP 87
22193: PUSH
22194: LD_VAR 0 5
22198: ARRAY
22199: PUSH
22200: LD_EXP 88
22204: LESS
22205: IFFALSE 22394
// begin for i := 1 to vehicles do
22207: LD_ADDR_VAR 0 4
22211: PUSH
22212: DOUBLE
22213: LD_INT 1
22215: DEC
22216: ST_TO_ADDR
22217: LD_VAR 0 2
22221: PUSH
22222: FOR_TO
22223: IFFALSE 22392
// begin if hackTanksCaptured [ index ] = hackLimit then
22225: LD_EXP 87
22229: PUSH
22230: LD_VAR 0 5
22234: ARRAY
22235: PUSH
22236: LD_EXP 88
22240: EQUAL
22241: IFFALSE 22245
// break ;
22243: GO 22392
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22245: LD_ADDR_EXP 90
22249: PUSH
22250: LD_EXP 90
22254: PPUSH
22255: LD_VAR 0 5
22259: PPUSH
22260: LD_EXP 90
22264: PUSH
22265: LD_VAR 0 5
22269: ARRAY
22270: PUSH
22271: LD_INT 1
22273: PLUS
22274: PPUSH
22275: CALL_OW 1
22279: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22280: LD_ADDR_EXP 87
22284: PUSH
22285: LD_EXP 87
22289: PPUSH
22290: LD_VAR 0 5
22294: PUSH
22295: LD_EXP 87
22299: PUSH
22300: LD_VAR 0 5
22304: ARRAY
22305: PUSH
22306: LD_INT 1
22308: PLUS
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PPUSH
22314: LD_VAR 0 2
22318: PUSH
22319: LD_VAR 0 4
22323: ARRAY
22324: PUSH
22325: LD_VAR 0 2
22329: PUSH
22330: LD_VAR 0 4
22334: ARRAY
22335: PPUSH
22336: CALL_OW 255
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL 29943 0 3
22349: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22350: LD_VAR 0 2
22354: PUSH
22355: LD_VAR 0 4
22359: ARRAY
22360: PPUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 255
22370: PPUSH
22371: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22375: LD_VAR 0 2
22379: PUSH
22380: LD_VAR 0 4
22384: ARRAY
22385: PPUSH
22386: CALL_OW 141
// end ;
22390: GO 22222
22392: POP
22393: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22394: LD_VAR 0 1
22398: PPUSH
22399: LD_EXP 87
22403: PUSH
22404: LD_VAR 0 5
22408: ARRAY
22409: PUSH
22410: LD_INT 0
22412: PLUS
22413: PPUSH
22414: CALL_OW 505
// end ;
22418: LD_VAR 0 3
22422: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22423: LD_INT 0
22425: PPUSH
22426: PPUSH
22427: PPUSH
22428: PPUSH
// if not hack in hackTanks then
22429: LD_VAR 0 1
22433: PUSH
22434: LD_EXP 86
22438: IN
22439: NOT
22440: IFFALSE 22444
// exit ;
22442: GO 22684
// index := GetElementIndex ( hackTanks , hack ) ;
22444: LD_ADDR_VAR 0 4
22448: PUSH
22449: LD_EXP 86
22453: PPUSH
22454: LD_VAR 0 1
22458: PPUSH
22459: CALL 29728 0 2
22463: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22464: LD_ADDR_VAR 0 3
22468: PUSH
22469: DOUBLE
22470: LD_EXP 87
22474: PUSH
22475: LD_VAR 0 4
22479: ARRAY
22480: INC
22481: ST_TO_ADDR
22482: LD_INT 1
22484: PUSH
22485: FOR_DOWNTO
22486: IFFALSE 22658
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22488: LD_ADDR_VAR 0 5
22492: PUSH
22493: LD_EXP 87
22497: PUSH
22498: LD_VAR 0 4
22502: ARRAY
22503: PUSH
22504: LD_VAR 0 3
22508: ARRAY
22509: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22510: LD_VAR 0 5
22514: PUSH
22515: LD_INT 1
22517: ARRAY
22518: PPUSH
22519: CALL_OW 302
22523: NOT
22524: PUSH
22525: LD_VAR 0 5
22529: PUSH
22530: LD_INT 1
22532: ARRAY
22533: PPUSH
22534: CALL_OW 255
22538: PUSH
22539: LD_VAR 0 1
22543: PPUSH
22544: CALL_OW 255
22548: NONEQUAL
22549: OR
22550: IFFALSE 22656
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22552: LD_VAR 0 5
22556: PUSH
22557: LD_INT 1
22559: ARRAY
22560: PPUSH
22561: CALL_OW 305
22565: PUSH
22566: LD_VAR 0 5
22570: PUSH
22571: LD_INT 1
22573: ARRAY
22574: PPUSH
22575: CALL_OW 255
22579: PUSH
22580: LD_VAR 0 1
22584: PPUSH
22585: CALL_OW 255
22589: EQUAL
22590: AND
22591: IFFALSE 22615
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22593: LD_VAR 0 5
22597: PUSH
22598: LD_INT 1
22600: ARRAY
22601: PPUSH
22602: LD_VAR 0 5
22606: PUSH
22607: LD_INT 2
22609: ARRAY
22610: PPUSH
22611: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22615: LD_ADDR_EXP 87
22619: PUSH
22620: LD_EXP 87
22624: PPUSH
22625: LD_VAR 0 4
22629: PPUSH
22630: LD_EXP 87
22634: PUSH
22635: LD_VAR 0 4
22639: ARRAY
22640: PPUSH
22641: LD_VAR 0 3
22645: PPUSH
22646: CALL_OW 3
22650: PPUSH
22651: CALL_OW 1
22655: ST_TO_ADDR
// end ; end ;
22656: GO 22485
22658: POP
22659: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22660: LD_VAR 0 1
22664: PPUSH
22665: LD_EXP 87
22669: PUSH
22670: LD_VAR 0 4
22674: ARRAY
22675: PUSH
22676: LD_INT 0
22678: PLUS
22679: PPUSH
22680: CALL_OW 505
// end ;
22684: LD_VAR 0 2
22688: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
// if not hack in hackTanks then
22695: LD_VAR 0 1
22699: PUSH
22700: LD_EXP 86
22704: IN
22705: NOT
22706: IFFALSE 22710
// exit ;
22708: GO 22795
// index := GetElementIndex ( hackTanks , hack ) ;
22710: LD_ADDR_VAR 0 5
22714: PUSH
22715: LD_EXP 86
22719: PPUSH
22720: LD_VAR 0 1
22724: PPUSH
22725: CALL 29728 0 2
22729: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22730: LD_ADDR_VAR 0 4
22734: PUSH
22735: DOUBLE
22736: LD_INT 1
22738: DEC
22739: ST_TO_ADDR
22740: LD_EXP 87
22744: PUSH
22745: LD_VAR 0 5
22749: ARRAY
22750: PUSH
22751: FOR_TO
22752: IFFALSE 22793
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22754: LD_EXP 87
22758: PUSH
22759: LD_VAR 0 5
22763: ARRAY
22764: PUSH
22765: LD_VAR 0 4
22769: ARRAY
22770: PUSH
22771: LD_INT 1
22773: ARRAY
22774: PUSH
22775: LD_VAR 0 2
22779: EQUAL
22780: IFFALSE 22791
// KillUnit ( vehicle ) ;
22782: LD_VAR 0 2
22786: PPUSH
22787: CALL_OW 66
22791: GO 22751
22793: POP
22794: POP
// end ;
22795: LD_VAR 0 3
22799: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22800: LD_EXP 91
22804: NOT
22805: IFFALSE 22840
22807: GO 22809
22809: DISABLE
// begin initMiner := true ;
22810: LD_ADDR_EXP 91
22814: PUSH
22815: LD_INT 1
22817: ST_TO_ADDR
// minersList := [ ] ;
22818: LD_ADDR_EXP 92
22822: PUSH
22823: EMPTY
22824: ST_TO_ADDR
// minerMinesList := [ ] ;
22825: LD_ADDR_EXP 93
22829: PUSH
22830: EMPTY
22831: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22832: LD_ADDR_EXP 94
22836: PUSH
22837: LD_INT 5
22839: ST_TO_ADDR
// end ;
22840: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22841: LD_EXP 91
22845: PUSH
22846: LD_INT 34
22848: PUSH
22849: LD_INT 81
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PPUSH
22856: CALL_OW 69
22860: AND
22861: IFFALSE 23322
22863: GO 22865
22865: DISABLE
22866: LD_INT 0
22868: PPUSH
22869: PPUSH
22870: PPUSH
22871: PPUSH
// begin enable ;
22872: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22873: LD_ADDR_VAR 0 1
22877: PUSH
22878: LD_INT 34
22880: PUSH
22881: LD_INT 81
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: PUSH
22893: FOR_IN
22894: IFFALSE 22966
// begin if not i in minersList then
22896: LD_VAR 0 1
22900: PUSH
22901: LD_EXP 92
22905: IN
22906: NOT
22907: IFFALSE 22964
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22909: LD_ADDR_EXP 92
22913: PUSH
22914: LD_EXP 92
22918: PPUSH
22919: LD_EXP 92
22923: PUSH
22924: LD_INT 1
22926: PLUS
22927: PPUSH
22928: LD_VAR 0 1
22932: PPUSH
22933: CALL_OW 1
22937: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22938: LD_ADDR_EXP 93
22942: PUSH
22943: LD_EXP 93
22947: PPUSH
22948: LD_EXP 93
22952: PUSH
22953: LD_INT 1
22955: PLUS
22956: PPUSH
22957: EMPTY
22958: PPUSH
22959: CALL_OW 1
22963: ST_TO_ADDR
// end end ;
22964: GO 22893
22966: POP
22967: POP
// for i := minerMinesList downto 1 do
22968: LD_ADDR_VAR 0 1
22972: PUSH
22973: DOUBLE
22974: LD_EXP 93
22978: INC
22979: ST_TO_ADDR
22980: LD_INT 1
22982: PUSH
22983: FOR_DOWNTO
22984: IFFALSE 23320
// begin if IsLive ( minersList [ i ] ) then
22986: LD_EXP 92
22990: PUSH
22991: LD_VAR 0 1
22995: ARRAY
22996: PPUSH
22997: CALL_OW 300
23001: IFFALSE 23029
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23003: LD_EXP 92
23007: PUSH
23008: LD_VAR 0 1
23012: ARRAY
23013: PPUSH
23014: LD_EXP 93
23018: PUSH
23019: LD_VAR 0 1
23023: ARRAY
23024: PPUSH
23025: CALL_OW 505
// if not minerMinesList [ i ] then
23029: LD_EXP 93
23033: PUSH
23034: LD_VAR 0 1
23038: ARRAY
23039: NOT
23040: IFFALSE 23044
// continue ;
23042: GO 22983
// for j := minerMinesList [ i ] downto 1 do
23044: LD_ADDR_VAR 0 2
23048: PUSH
23049: DOUBLE
23050: LD_EXP 93
23054: PUSH
23055: LD_VAR 0 1
23059: ARRAY
23060: INC
23061: ST_TO_ADDR
23062: LD_INT 1
23064: PUSH
23065: FOR_DOWNTO
23066: IFFALSE 23316
// begin side := GetSide ( minersList [ i ] ) ;
23068: LD_ADDR_VAR 0 3
23072: PUSH
23073: LD_EXP 92
23077: PUSH
23078: LD_VAR 0 1
23082: ARRAY
23083: PPUSH
23084: CALL_OW 255
23088: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23089: LD_ADDR_VAR 0 4
23093: PUSH
23094: LD_EXP 93
23098: PUSH
23099: LD_VAR 0 1
23103: ARRAY
23104: PUSH
23105: LD_VAR 0 2
23109: ARRAY
23110: PUSH
23111: LD_INT 1
23113: ARRAY
23114: PPUSH
23115: LD_EXP 93
23119: PUSH
23120: LD_VAR 0 1
23124: ARRAY
23125: PUSH
23126: LD_VAR 0 2
23130: ARRAY
23131: PUSH
23132: LD_INT 2
23134: ARRAY
23135: PPUSH
23136: CALL_OW 428
23140: ST_TO_ADDR
// if not tmp then
23141: LD_VAR 0 4
23145: NOT
23146: IFFALSE 23150
// continue ;
23148: GO 23065
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23150: LD_VAR 0 4
23154: PUSH
23155: LD_INT 81
23157: PUSH
23158: LD_VAR 0 3
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 69
23171: IN
23172: PUSH
23173: LD_EXP 93
23177: PUSH
23178: LD_VAR 0 1
23182: ARRAY
23183: PUSH
23184: LD_VAR 0 2
23188: ARRAY
23189: PUSH
23190: LD_INT 1
23192: ARRAY
23193: PPUSH
23194: LD_EXP 93
23198: PUSH
23199: LD_VAR 0 1
23203: ARRAY
23204: PUSH
23205: LD_VAR 0 2
23209: ARRAY
23210: PUSH
23211: LD_INT 2
23213: ARRAY
23214: PPUSH
23215: CALL_OW 458
23219: AND
23220: IFFALSE 23314
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23222: LD_EXP 93
23226: PUSH
23227: LD_VAR 0 1
23231: ARRAY
23232: PUSH
23233: LD_VAR 0 2
23237: ARRAY
23238: PUSH
23239: LD_INT 1
23241: ARRAY
23242: PPUSH
23243: LD_EXP 93
23247: PUSH
23248: LD_VAR 0 1
23252: ARRAY
23253: PUSH
23254: LD_VAR 0 2
23258: ARRAY
23259: PUSH
23260: LD_INT 2
23262: ARRAY
23263: PPUSH
23264: LD_VAR 0 3
23268: PPUSH
23269: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23273: LD_ADDR_EXP 93
23277: PUSH
23278: LD_EXP 93
23282: PPUSH
23283: LD_VAR 0 1
23287: PPUSH
23288: LD_EXP 93
23292: PUSH
23293: LD_VAR 0 1
23297: ARRAY
23298: PPUSH
23299: LD_VAR 0 2
23303: PPUSH
23304: CALL_OW 3
23308: PPUSH
23309: CALL_OW 1
23313: ST_TO_ADDR
// end ; end ;
23314: GO 23065
23316: POP
23317: POP
// end ;
23318: GO 22983
23320: POP
23321: POP
// end ;
23322: PPOPN 4
23324: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23325: LD_INT 0
23327: PPUSH
23328: PPUSH
// result := false ;
23329: LD_ADDR_VAR 0 4
23333: PUSH
23334: LD_INT 0
23336: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23337: LD_VAR 0 1
23341: PPUSH
23342: CALL_OW 264
23346: PUSH
23347: LD_INT 81
23349: EQUAL
23350: NOT
23351: IFFALSE 23355
// exit ;
23353: GO 23595
// index := GetElementIndex ( minersList , unit ) ;
23355: LD_ADDR_VAR 0 5
23359: PUSH
23360: LD_EXP 92
23364: PPUSH
23365: LD_VAR 0 1
23369: PPUSH
23370: CALL 29728 0 2
23374: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23375: LD_EXP 93
23379: PUSH
23380: LD_VAR 0 5
23384: ARRAY
23385: PUSH
23386: LD_EXP 94
23390: GREATEREQUAL
23391: IFFALSE 23395
// exit ;
23393: GO 23595
// ComMoveXY ( unit , x , y ) ;
23395: LD_VAR 0 1
23399: PPUSH
23400: LD_VAR 0 2
23404: PPUSH
23405: LD_VAR 0 3
23409: PPUSH
23410: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23414: LD_INT 35
23416: PPUSH
23417: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23421: LD_VAR 0 1
23425: PPUSH
23426: LD_VAR 0 2
23430: PPUSH
23431: LD_VAR 0 3
23435: PPUSH
23436: CALL 61083 0 3
23440: NOT
23441: PUSH
23442: LD_VAR 0 1
23446: PPUSH
23447: CALL_OW 314
23451: AND
23452: IFFALSE 23456
// exit ;
23454: GO 23595
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23456: LD_VAR 0 2
23460: PPUSH
23461: LD_VAR 0 3
23465: PPUSH
23466: CALL_OW 428
23470: PUSH
23471: LD_VAR 0 1
23475: EQUAL
23476: PUSH
23477: LD_VAR 0 1
23481: PPUSH
23482: CALL_OW 314
23486: NOT
23487: AND
23488: IFFALSE 23414
// PlaySoundXY ( x , y , PlantMine ) ;
23490: LD_VAR 0 2
23494: PPUSH
23495: LD_VAR 0 3
23499: PPUSH
23500: LD_STRING PlantMine
23502: PPUSH
23503: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23507: LD_VAR 0 2
23511: PPUSH
23512: LD_VAR 0 3
23516: PPUSH
23517: LD_VAR 0 1
23521: PPUSH
23522: CALL_OW 255
23526: PPUSH
23527: LD_INT 0
23529: PPUSH
23530: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23534: LD_ADDR_EXP 93
23538: PUSH
23539: LD_EXP 93
23543: PPUSH
23544: LD_VAR 0 5
23548: PUSH
23549: LD_EXP 93
23553: PUSH
23554: LD_VAR 0 5
23558: ARRAY
23559: PUSH
23560: LD_INT 1
23562: PLUS
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PPUSH
23568: LD_VAR 0 2
23572: PUSH
23573: LD_VAR 0 3
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PPUSH
23582: CALL 29943 0 3
23586: ST_TO_ADDR
// result := true ;
23587: LD_ADDR_VAR 0 4
23591: PUSH
23592: LD_INT 1
23594: ST_TO_ADDR
// end ;
23595: LD_VAR 0 4
23599: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23600: LD_INT 0
23602: PPUSH
23603: PPUSH
23604: PPUSH
// if not unit in minersList then
23605: LD_VAR 0 1
23609: PUSH
23610: LD_EXP 92
23614: IN
23615: NOT
23616: IFFALSE 23620
// exit ;
23618: GO 24012
// index := GetElementIndex ( minersList , unit ) ;
23620: LD_ADDR_VAR 0 6
23624: PUSH
23625: LD_EXP 92
23629: PPUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL 29728 0 2
23639: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23640: LD_ADDR_VAR 0 5
23644: PUSH
23645: DOUBLE
23646: LD_EXP 93
23650: PUSH
23651: LD_VAR 0 6
23655: ARRAY
23656: INC
23657: ST_TO_ADDR
23658: LD_INT 1
23660: PUSH
23661: FOR_DOWNTO
23662: IFFALSE 23823
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23664: LD_EXP 93
23668: PUSH
23669: LD_VAR 0 6
23673: ARRAY
23674: PUSH
23675: LD_VAR 0 5
23679: ARRAY
23680: PUSH
23681: LD_INT 1
23683: ARRAY
23684: PUSH
23685: LD_VAR 0 2
23689: EQUAL
23690: PUSH
23691: LD_EXP 93
23695: PUSH
23696: LD_VAR 0 6
23700: ARRAY
23701: PUSH
23702: LD_VAR 0 5
23706: ARRAY
23707: PUSH
23708: LD_INT 2
23710: ARRAY
23711: PUSH
23712: LD_VAR 0 3
23716: EQUAL
23717: AND
23718: IFFALSE 23821
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23720: LD_EXP 93
23724: PUSH
23725: LD_VAR 0 6
23729: ARRAY
23730: PUSH
23731: LD_VAR 0 5
23735: ARRAY
23736: PUSH
23737: LD_INT 1
23739: ARRAY
23740: PPUSH
23741: LD_EXP 93
23745: PUSH
23746: LD_VAR 0 6
23750: ARRAY
23751: PUSH
23752: LD_VAR 0 5
23756: ARRAY
23757: PUSH
23758: LD_INT 2
23760: ARRAY
23761: PPUSH
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 255
23771: PPUSH
23772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23776: LD_ADDR_EXP 93
23780: PUSH
23781: LD_EXP 93
23785: PPUSH
23786: LD_VAR 0 6
23790: PPUSH
23791: LD_EXP 93
23795: PUSH
23796: LD_VAR 0 6
23800: ARRAY
23801: PPUSH
23802: LD_VAR 0 5
23806: PPUSH
23807: CALL_OW 3
23811: PPUSH
23812: CALL_OW 1
23816: ST_TO_ADDR
// exit ;
23817: POP
23818: POP
23819: GO 24012
// end ; end ;
23821: GO 23661
23823: POP
23824: POP
// for i := minerMinesList [ index ] downto 1 do
23825: LD_ADDR_VAR 0 5
23829: PUSH
23830: DOUBLE
23831: LD_EXP 93
23835: PUSH
23836: LD_VAR 0 6
23840: ARRAY
23841: INC
23842: ST_TO_ADDR
23843: LD_INT 1
23845: PUSH
23846: FOR_DOWNTO
23847: IFFALSE 24010
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23849: LD_EXP 93
23853: PUSH
23854: LD_VAR 0 6
23858: ARRAY
23859: PUSH
23860: LD_VAR 0 5
23864: ARRAY
23865: PUSH
23866: LD_INT 1
23868: ARRAY
23869: PPUSH
23870: LD_EXP 93
23874: PUSH
23875: LD_VAR 0 6
23879: ARRAY
23880: PUSH
23881: LD_VAR 0 5
23885: ARRAY
23886: PUSH
23887: LD_INT 2
23889: ARRAY
23890: PPUSH
23891: LD_VAR 0 2
23895: PPUSH
23896: LD_VAR 0 3
23900: PPUSH
23901: CALL_OW 298
23905: PUSH
23906: LD_INT 6
23908: LESS
23909: IFFALSE 24008
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23911: LD_EXP 93
23915: PUSH
23916: LD_VAR 0 6
23920: ARRAY
23921: PUSH
23922: LD_VAR 0 5
23926: ARRAY
23927: PUSH
23928: LD_INT 1
23930: ARRAY
23931: PPUSH
23932: LD_EXP 93
23936: PUSH
23937: LD_VAR 0 6
23941: ARRAY
23942: PUSH
23943: LD_VAR 0 5
23947: ARRAY
23948: PUSH
23949: LD_INT 2
23951: ARRAY
23952: PPUSH
23953: LD_VAR 0 1
23957: PPUSH
23958: CALL_OW 255
23962: PPUSH
23963: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23967: LD_ADDR_EXP 93
23971: PUSH
23972: LD_EXP 93
23976: PPUSH
23977: LD_VAR 0 6
23981: PPUSH
23982: LD_EXP 93
23986: PUSH
23987: LD_VAR 0 6
23991: ARRAY
23992: PPUSH
23993: LD_VAR 0 5
23997: PPUSH
23998: CALL_OW 3
24002: PPUSH
24003: CALL_OW 1
24007: ST_TO_ADDR
// end ; end ;
24008: GO 23846
24010: POP
24011: POP
// end ;
24012: LD_VAR 0 4
24016: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24017: LD_INT 0
24019: PPUSH
24020: PPUSH
24021: PPUSH
24022: PPUSH
24023: PPUSH
24024: PPUSH
24025: PPUSH
24026: PPUSH
24027: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 264
24037: PUSH
24038: LD_INT 81
24040: EQUAL
24041: NOT
24042: PUSH
24043: LD_VAR 0 1
24047: PUSH
24048: LD_EXP 92
24052: IN
24053: NOT
24054: OR
24055: IFFALSE 24059
// exit ;
24057: GO 24381
// index := GetElementIndex ( minersList , unit ) ;
24059: LD_ADDR_VAR 0 6
24063: PUSH
24064: LD_EXP 92
24068: PPUSH
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL 29728 0 2
24078: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24079: LD_ADDR_VAR 0 8
24083: PUSH
24084: LD_EXP 94
24088: PUSH
24089: LD_EXP 93
24093: PUSH
24094: LD_VAR 0 6
24098: ARRAY
24099: MINUS
24100: ST_TO_ADDR
// if not minesFreeAmount then
24101: LD_VAR 0 8
24105: NOT
24106: IFFALSE 24110
// exit ;
24108: GO 24381
// tmp := [ ] ;
24110: LD_ADDR_VAR 0 7
24114: PUSH
24115: EMPTY
24116: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24117: LD_ADDR_VAR 0 5
24121: PUSH
24122: DOUBLE
24123: LD_INT 1
24125: DEC
24126: ST_TO_ADDR
24127: LD_VAR 0 8
24131: PUSH
24132: FOR_TO
24133: IFFALSE 24328
// begin _d := rand ( 0 , 5 ) ;
24135: LD_ADDR_VAR 0 11
24139: PUSH
24140: LD_INT 0
24142: PPUSH
24143: LD_INT 5
24145: PPUSH
24146: CALL_OW 12
24150: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24151: LD_ADDR_VAR 0 12
24155: PUSH
24156: LD_INT 2
24158: PPUSH
24159: LD_INT 6
24161: PPUSH
24162: CALL_OW 12
24166: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24167: LD_ADDR_VAR 0 9
24171: PUSH
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_VAR 0 11
24181: PPUSH
24182: LD_VAR 0 12
24186: PPUSH
24187: CALL_OW 272
24191: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24192: LD_ADDR_VAR 0 10
24196: PUSH
24197: LD_VAR 0 3
24201: PPUSH
24202: LD_VAR 0 11
24206: PPUSH
24207: LD_VAR 0 12
24211: PPUSH
24212: CALL_OW 273
24216: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24217: LD_VAR 0 9
24221: PPUSH
24222: LD_VAR 0 10
24226: PPUSH
24227: CALL_OW 488
24231: PUSH
24232: LD_VAR 0 9
24236: PUSH
24237: LD_VAR 0 10
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_VAR 0 7
24250: IN
24251: NOT
24252: AND
24253: PUSH
24254: LD_VAR 0 9
24258: PPUSH
24259: LD_VAR 0 10
24263: PPUSH
24264: CALL_OW 458
24268: NOT
24269: AND
24270: IFFALSE 24312
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24272: LD_ADDR_VAR 0 7
24276: PUSH
24277: LD_VAR 0 7
24281: PPUSH
24282: LD_VAR 0 7
24286: PUSH
24287: LD_INT 1
24289: PLUS
24290: PPUSH
24291: LD_VAR 0 9
24295: PUSH
24296: LD_VAR 0 10
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PPUSH
24305: CALL_OW 1
24309: ST_TO_ADDR
24310: GO 24326
// i := i - 1 ;
24312: LD_ADDR_VAR 0 5
24316: PUSH
24317: LD_VAR 0 5
24321: PUSH
24322: LD_INT 1
24324: MINUS
24325: ST_TO_ADDR
// end ;
24326: GO 24132
24328: POP
24329: POP
// for i in tmp do
24330: LD_ADDR_VAR 0 5
24334: PUSH
24335: LD_VAR 0 7
24339: PUSH
24340: FOR_IN
24341: IFFALSE 24379
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24343: LD_VAR 0 1
24347: PPUSH
24348: LD_VAR 0 5
24352: PUSH
24353: LD_INT 1
24355: ARRAY
24356: PPUSH
24357: LD_VAR 0 5
24361: PUSH
24362: LD_INT 2
24364: ARRAY
24365: PPUSH
24366: CALL 23325 0 3
24370: NOT
24371: IFFALSE 24377
// exit ;
24373: POP
24374: POP
24375: GO 24381
24377: GO 24340
24379: POP
24380: POP
// end ;
24381: LD_VAR 0 4
24385: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24386: LD_INT 0
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
24393: PPUSH
24394: PPUSH
// if not GetClass ( unit ) = class_sniper then
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL_OW 257
24404: PUSH
24405: LD_INT 5
24407: EQUAL
24408: NOT
24409: IFFALSE 24413
// exit ;
24411: GO 24801
// dist := 8 ;
24413: LD_ADDR_VAR 0 5
24417: PUSH
24418: LD_INT 8
24420: ST_TO_ADDR
// viewRange := 12 ;
24421: LD_ADDR_VAR 0 7
24425: PUSH
24426: LD_INT 12
24428: ST_TO_ADDR
// side := GetSide ( unit ) ;
24429: LD_ADDR_VAR 0 6
24433: PUSH
24434: LD_VAR 0 1
24438: PPUSH
24439: CALL_OW 255
24443: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24444: LD_INT 61
24446: PPUSH
24447: LD_VAR 0 6
24451: PPUSH
24452: CALL_OW 321
24456: PUSH
24457: LD_INT 2
24459: EQUAL
24460: IFFALSE 24470
// viewRange := 16 ;
24462: LD_ADDR_VAR 0 7
24466: PUSH
24467: LD_INT 16
24469: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24470: LD_VAR 0 1
24474: PPUSH
24475: LD_VAR 0 2
24479: PPUSH
24480: LD_VAR 0 3
24484: PPUSH
24485: CALL_OW 297
24489: PUSH
24490: LD_VAR 0 5
24494: GREATER
24495: IFFALSE 24574
// begin ComMoveXY ( unit , x , y ) ;
24497: LD_VAR 0 1
24501: PPUSH
24502: LD_VAR 0 2
24506: PPUSH
24507: LD_VAR 0 3
24511: PPUSH
24512: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24516: LD_INT 35
24518: PPUSH
24519: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24523: LD_VAR 0 1
24527: PPUSH
24528: LD_VAR 0 2
24532: PPUSH
24533: LD_VAR 0 3
24537: PPUSH
24538: CALL 61083 0 3
24542: NOT
24543: IFFALSE 24547
// exit ;
24545: GO 24801
// until GetDistUnitXY ( unit , x , y ) < dist ;
24547: LD_VAR 0 1
24551: PPUSH
24552: LD_VAR 0 2
24556: PPUSH
24557: LD_VAR 0 3
24561: PPUSH
24562: CALL_OW 297
24566: PUSH
24567: LD_VAR 0 5
24571: LESS
24572: IFFALSE 24516
// end ; ComTurnXY ( unit , x , y ) ;
24574: LD_VAR 0 1
24578: PPUSH
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_VAR 0 3
24588: PPUSH
24589: CALL_OW 118
// wait ( 5 ) ;
24593: LD_INT 5
24595: PPUSH
24596: CALL_OW 67
// _d := GetDir ( unit ) ;
24600: LD_ADDR_VAR 0 10
24604: PUSH
24605: LD_VAR 0 1
24609: PPUSH
24610: CALL_OW 254
24614: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24615: LD_ADDR_VAR 0 8
24619: PUSH
24620: LD_VAR 0 1
24624: PPUSH
24625: CALL_OW 250
24629: PPUSH
24630: LD_VAR 0 10
24634: PPUSH
24635: LD_VAR 0 5
24639: PPUSH
24640: CALL_OW 272
24644: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24645: LD_ADDR_VAR 0 9
24649: PUSH
24650: LD_VAR 0 1
24654: PPUSH
24655: CALL_OW 251
24659: PPUSH
24660: LD_VAR 0 10
24664: PPUSH
24665: LD_VAR 0 5
24669: PPUSH
24670: CALL_OW 273
24674: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24675: LD_VAR 0 8
24679: PPUSH
24680: LD_VAR 0 9
24684: PPUSH
24685: CALL_OW 488
24689: NOT
24690: IFFALSE 24694
// exit ;
24692: GO 24801
// ComAnimCustom ( unit , 1 ) ;
24694: LD_VAR 0 1
24698: PPUSH
24699: LD_INT 1
24701: PPUSH
24702: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24706: LD_VAR 0 8
24710: PPUSH
24711: LD_VAR 0 9
24715: PPUSH
24716: LD_VAR 0 6
24720: PPUSH
24721: LD_VAR 0 7
24725: PPUSH
24726: CALL_OW 330
// repeat wait ( 1 ) ;
24730: LD_INT 1
24732: PPUSH
24733: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL_OW 316
24746: PUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: CALL_OW 314
24756: OR
24757: PUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 302
24767: NOT
24768: OR
24769: PUSH
24770: LD_VAR 0 1
24774: PPUSH
24775: CALL_OW 301
24779: OR
24780: IFFALSE 24730
// RemoveSeeing ( _x , _y , side ) ;
24782: LD_VAR 0 8
24786: PPUSH
24787: LD_VAR 0 9
24791: PPUSH
24792: LD_VAR 0 6
24796: PPUSH
24797: CALL_OW 331
// end ; end_of_file end_of_file
24801: LD_VAR 0 4
24805: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24806: LD_INT 0
24808: PPUSH
24809: PPUSH
// if exist_mode then
24810: LD_VAR 0 2
24814: IFFALSE 24839
// unit := CreateCharacter ( prefix & ident ) else
24816: LD_ADDR_VAR 0 5
24820: PUSH
24821: LD_VAR 0 3
24825: PUSH
24826: LD_VAR 0 1
24830: STR
24831: PPUSH
24832: CALL_OW 34
24836: ST_TO_ADDR
24837: GO 24854
// unit := NewCharacter ( ident ) ;
24839: LD_ADDR_VAR 0 5
24843: PUSH
24844: LD_VAR 0 1
24848: PPUSH
24849: CALL_OW 25
24853: ST_TO_ADDR
// result := unit ;
24854: LD_ADDR_VAR 0 4
24858: PUSH
24859: LD_VAR 0 5
24863: ST_TO_ADDR
// end ;
24864: LD_VAR 0 4
24868: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24869: LD_INT 0
24871: PPUSH
24872: PPUSH
// if not side or not nation then
24873: LD_VAR 0 1
24877: NOT
24878: PUSH
24879: LD_VAR 0 2
24883: NOT
24884: OR
24885: IFFALSE 24889
// exit ;
24887: GO 25657
// case nation of nation_american :
24889: LD_VAR 0 2
24893: PUSH
24894: LD_INT 1
24896: DOUBLE
24897: EQUAL
24898: IFTRUE 24902
24900: GO 25116
24902: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24903: LD_ADDR_VAR 0 4
24907: PUSH
24908: LD_INT 35
24910: PUSH
24911: LD_INT 45
24913: PUSH
24914: LD_INT 46
24916: PUSH
24917: LD_INT 47
24919: PUSH
24920: LD_INT 82
24922: PUSH
24923: LD_INT 83
24925: PUSH
24926: LD_INT 84
24928: PUSH
24929: LD_INT 85
24931: PUSH
24932: LD_INT 86
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 6
24943: PUSH
24944: LD_INT 15
24946: PUSH
24947: LD_INT 16
24949: PUSH
24950: LD_INT 7
24952: PUSH
24953: LD_INT 12
24955: PUSH
24956: LD_INT 13
24958: PUSH
24959: LD_INT 10
24961: PUSH
24962: LD_INT 14
24964: PUSH
24965: LD_INT 20
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 22
24973: PUSH
24974: LD_INT 25
24976: PUSH
24977: LD_INT 32
24979: PUSH
24980: LD_INT 27
24982: PUSH
24983: LD_INT 36
24985: PUSH
24986: LD_INT 69
24988: PUSH
24989: LD_INT 39
24991: PUSH
24992: LD_INT 34
24994: PUSH
24995: LD_INT 40
24997: PUSH
24998: LD_INT 48
25000: PUSH
25001: LD_INT 49
25003: PUSH
25004: LD_INT 50
25006: PUSH
25007: LD_INT 51
25009: PUSH
25010: LD_INT 52
25012: PUSH
25013: LD_INT 53
25015: PUSH
25016: LD_INT 54
25018: PUSH
25019: LD_INT 55
25021: PUSH
25022: LD_INT 56
25024: PUSH
25025: LD_INT 57
25027: PUSH
25028: LD_INT 58
25030: PUSH
25031: LD_INT 59
25033: PUSH
25034: LD_INT 60
25036: PUSH
25037: LD_INT 61
25039: PUSH
25040: LD_INT 62
25042: PUSH
25043: LD_INT 80
25045: PUSH
25046: LD_INT 82
25048: PUSH
25049: LD_INT 83
25051: PUSH
25052: LD_INT 84
25054: PUSH
25055: LD_INT 85
25057: PUSH
25058: LD_INT 86
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: LIST
25112: LIST
25113: ST_TO_ADDR
25114: GO 25581
25116: LD_INT 2
25118: DOUBLE
25119: EQUAL
25120: IFTRUE 25124
25122: GO 25350
25124: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25125: LD_ADDR_VAR 0 4
25129: PUSH
25130: LD_INT 35
25132: PUSH
25133: LD_INT 45
25135: PUSH
25136: LD_INT 46
25138: PUSH
25139: LD_INT 47
25141: PUSH
25142: LD_INT 82
25144: PUSH
25145: LD_INT 83
25147: PUSH
25148: LD_INT 84
25150: PUSH
25151: LD_INT 85
25153: PUSH
25154: LD_INT 87
25156: PUSH
25157: LD_INT 70
25159: PUSH
25160: LD_INT 1
25162: PUSH
25163: LD_INT 11
25165: PUSH
25166: LD_INT 3
25168: PUSH
25169: LD_INT 4
25171: PUSH
25172: LD_INT 5
25174: PUSH
25175: LD_INT 6
25177: PUSH
25178: LD_INT 15
25180: PUSH
25181: LD_INT 18
25183: PUSH
25184: LD_INT 7
25186: PUSH
25187: LD_INT 17
25189: PUSH
25190: LD_INT 8
25192: PUSH
25193: LD_INT 20
25195: PUSH
25196: LD_INT 21
25198: PUSH
25199: LD_INT 22
25201: PUSH
25202: LD_INT 72
25204: PUSH
25205: LD_INT 26
25207: PUSH
25208: LD_INT 69
25210: PUSH
25211: LD_INT 39
25213: PUSH
25214: LD_INT 40
25216: PUSH
25217: LD_INT 41
25219: PUSH
25220: LD_INT 42
25222: PUSH
25223: LD_INT 43
25225: PUSH
25226: LD_INT 48
25228: PUSH
25229: LD_INT 49
25231: PUSH
25232: LD_INT 50
25234: PUSH
25235: LD_INT 51
25237: PUSH
25238: LD_INT 52
25240: PUSH
25241: LD_INT 53
25243: PUSH
25244: LD_INT 54
25246: PUSH
25247: LD_INT 55
25249: PUSH
25250: LD_INT 56
25252: PUSH
25253: LD_INT 60
25255: PUSH
25256: LD_INT 61
25258: PUSH
25259: LD_INT 62
25261: PUSH
25262: LD_INT 66
25264: PUSH
25265: LD_INT 67
25267: PUSH
25268: LD_INT 68
25270: PUSH
25271: LD_INT 81
25273: PUSH
25274: LD_INT 82
25276: PUSH
25277: LD_INT 83
25279: PUSH
25280: LD_INT 84
25282: PUSH
25283: LD_INT 85
25285: PUSH
25286: LD_INT 87
25288: PUSH
25289: LD_INT 88
25291: PUSH
25292: EMPTY
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: LIST
25345: LIST
25346: LIST
25347: ST_TO_ADDR
25348: GO 25581
25350: LD_INT 3
25352: DOUBLE
25353: EQUAL
25354: IFTRUE 25358
25356: GO 25580
25358: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25359: LD_ADDR_VAR 0 4
25363: PUSH
25364: LD_INT 46
25366: PUSH
25367: LD_INT 47
25369: PUSH
25370: LD_INT 1
25372: PUSH
25373: LD_INT 2
25375: PUSH
25376: LD_INT 82
25378: PUSH
25379: LD_INT 83
25381: PUSH
25382: LD_INT 84
25384: PUSH
25385: LD_INT 85
25387: PUSH
25388: LD_INT 86
25390: PUSH
25391: LD_INT 11
25393: PUSH
25394: LD_INT 9
25396: PUSH
25397: LD_INT 20
25399: PUSH
25400: LD_INT 19
25402: PUSH
25403: LD_INT 21
25405: PUSH
25406: LD_INT 24
25408: PUSH
25409: LD_INT 22
25411: PUSH
25412: LD_INT 25
25414: PUSH
25415: LD_INT 28
25417: PUSH
25418: LD_INT 29
25420: PUSH
25421: LD_INT 30
25423: PUSH
25424: LD_INT 31
25426: PUSH
25427: LD_INT 37
25429: PUSH
25430: LD_INT 38
25432: PUSH
25433: LD_INT 32
25435: PUSH
25436: LD_INT 27
25438: PUSH
25439: LD_INT 33
25441: PUSH
25442: LD_INT 69
25444: PUSH
25445: LD_INT 39
25447: PUSH
25448: LD_INT 34
25450: PUSH
25451: LD_INT 40
25453: PUSH
25454: LD_INT 71
25456: PUSH
25457: LD_INT 23
25459: PUSH
25460: LD_INT 44
25462: PUSH
25463: LD_INT 48
25465: PUSH
25466: LD_INT 49
25468: PUSH
25469: LD_INT 50
25471: PUSH
25472: LD_INT 51
25474: PUSH
25475: LD_INT 52
25477: PUSH
25478: LD_INT 53
25480: PUSH
25481: LD_INT 54
25483: PUSH
25484: LD_INT 55
25486: PUSH
25487: LD_INT 56
25489: PUSH
25490: LD_INT 57
25492: PUSH
25493: LD_INT 58
25495: PUSH
25496: LD_INT 59
25498: PUSH
25499: LD_INT 63
25501: PUSH
25502: LD_INT 64
25504: PUSH
25505: LD_INT 65
25507: PUSH
25508: LD_INT 82
25510: PUSH
25511: LD_INT 83
25513: PUSH
25514: LD_INT 84
25516: PUSH
25517: LD_INT 85
25519: PUSH
25520: LD_INT 86
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: ST_TO_ADDR
25578: GO 25581
25580: POP
// if state > - 1 and state < 3 then
25581: LD_VAR 0 3
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: GREATER
25590: PUSH
25591: LD_VAR 0 3
25595: PUSH
25596: LD_INT 3
25598: LESS
25599: AND
25600: IFFALSE 25657
// for i in result do
25602: LD_ADDR_VAR 0 5
25606: PUSH
25607: LD_VAR 0 4
25611: PUSH
25612: FOR_IN
25613: IFFALSE 25655
// if GetTech ( i , side ) <> state then
25615: LD_VAR 0 5
25619: PPUSH
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL_OW 321
25629: PUSH
25630: LD_VAR 0 3
25634: NONEQUAL
25635: IFFALSE 25653
// result := result diff i ;
25637: LD_ADDR_VAR 0 4
25641: PUSH
25642: LD_VAR 0 4
25646: PUSH
25647: LD_VAR 0 5
25651: DIFF
25652: ST_TO_ADDR
25653: GO 25612
25655: POP
25656: POP
// end ;
25657: LD_VAR 0 4
25661: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25662: LD_INT 0
25664: PPUSH
25665: PPUSH
25666: PPUSH
// result := true ;
25667: LD_ADDR_VAR 0 3
25671: PUSH
25672: LD_INT 1
25674: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25675: LD_ADDR_VAR 0 5
25679: PUSH
25680: LD_VAR 0 2
25684: PPUSH
25685: CALL_OW 480
25689: ST_TO_ADDR
// if not tmp then
25690: LD_VAR 0 5
25694: NOT
25695: IFFALSE 25699
// exit ;
25697: GO 25748
// for i in tmp do
25699: LD_ADDR_VAR 0 4
25703: PUSH
25704: LD_VAR 0 5
25708: PUSH
25709: FOR_IN
25710: IFFALSE 25746
// if GetTech ( i , side ) <> state_researched then
25712: LD_VAR 0 4
25716: PPUSH
25717: LD_VAR 0 1
25721: PPUSH
25722: CALL_OW 321
25726: PUSH
25727: LD_INT 2
25729: NONEQUAL
25730: IFFALSE 25744
// begin result := false ;
25732: LD_ADDR_VAR 0 3
25736: PUSH
25737: LD_INT 0
25739: ST_TO_ADDR
// exit ;
25740: POP
25741: POP
25742: GO 25748
// end ;
25744: GO 25709
25746: POP
25747: POP
// end ;
25748: LD_VAR 0 3
25752: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25753: LD_INT 0
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
25764: PPUSH
25765: PPUSH
25766: PPUSH
25767: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25768: LD_VAR 0 1
25772: NOT
25773: PUSH
25774: LD_VAR 0 1
25778: PPUSH
25779: CALL_OW 257
25783: PUSH
25784: LD_INT 9
25786: NONEQUAL
25787: OR
25788: IFFALSE 25792
// exit ;
25790: GO 26365
// side := GetSide ( unit ) ;
25792: LD_ADDR_VAR 0 9
25796: PUSH
25797: LD_VAR 0 1
25801: PPUSH
25802: CALL_OW 255
25806: ST_TO_ADDR
// tech_space := tech_spacanom ;
25807: LD_ADDR_VAR 0 12
25811: PUSH
25812: LD_INT 29
25814: ST_TO_ADDR
// tech_time := tech_taurad ;
25815: LD_ADDR_VAR 0 13
25819: PUSH
25820: LD_INT 28
25822: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25823: LD_ADDR_VAR 0 11
25827: PUSH
25828: LD_VAR 0 1
25832: PPUSH
25833: CALL_OW 310
25837: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25838: LD_VAR 0 11
25842: PPUSH
25843: CALL_OW 247
25847: PUSH
25848: LD_INT 2
25850: EQUAL
25851: IFFALSE 25855
// exit ;
25853: GO 26365
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25855: LD_ADDR_VAR 0 8
25859: PUSH
25860: LD_INT 81
25862: PUSH
25863: LD_VAR 0 9
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 3
25874: PUSH
25875: LD_INT 21
25877: PUSH
25878: LD_INT 3
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PPUSH
25893: CALL_OW 69
25897: ST_TO_ADDR
// if not tmp then
25898: LD_VAR 0 8
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 26365
// if in_unit then
25907: LD_VAR 0 11
25911: IFFALSE 25935
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25913: LD_ADDR_VAR 0 10
25917: PUSH
25918: LD_VAR 0 8
25922: PPUSH
25923: LD_VAR 0 11
25927: PPUSH
25928: CALL_OW 74
25932: ST_TO_ADDR
25933: GO 25955
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25935: LD_ADDR_VAR 0 10
25939: PUSH
25940: LD_VAR 0 8
25944: PPUSH
25945: LD_VAR 0 1
25949: PPUSH
25950: CALL_OW 74
25954: ST_TO_ADDR
// if not enemy then
25955: LD_VAR 0 10
25959: NOT
25960: IFFALSE 25964
// exit ;
25962: GO 26365
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25964: LD_VAR 0 11
25968: PUSH
25969: LD_VAR 0 11
25973: PPUSH
25974: LD_VAR 0 10
25978: PPUSH
25979: CALL_OW 296
25983: PUSH
25984: LD_INT 13
25986: GREATER
25987: AND
25988: PUSH
25989: LD_VAR 0 1
25993: PPUSH
25994: LD_VAR 0 10
25998: PPUSH
25999: CALL_OW 296
26003: PUSH
26004: LD_INT 12
26006: GREATER
26007: OR
26008: IFFALSE 26012
// exit ;
26010: GO 26365
// missile := [ 1 ] ;
26012: LD_ADDR_VAR 0 14
26016: PUSH
26017: LD_INT 1
26019: PUSH
26020: EMPTY
26021: LIST
26022: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26023: LD_VAR 0 9
26027: PPUSH
26028: LD_VAR 0 12
26032: PPUSH
26033: CALL_OW 325
26037: IFFALSE 26066
// missile := Replace ( missile , missile + 1 , 2 ) ;
26039: LD_ADDR_VAR 0 14
26043: PUSH
26044: LD_VAR 0 14
26048: PPUSH
26049: LD_VAR 0 14
26053: PUSH
26054: LD_INT 1
26056: PLUS
26057: PPUSH
26058: LD_INT 2
26060: PPUSH
26061: CALL_OW 1
26065: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26066: LD_VAR 0 9
26070: PPUSH
26071: LD_VAR 0 13
26075: PPUSH
26076: CALL_OW 325
26080: PUSH
26081: LD_VAR 0 10
26085: PPUSH
26086: CALL_OW 255
26090: PPUSH
26091: LD_VAR 0 13
26095: PPUSH
26096: CALL_OW 325
26100: NOT
26101: AND
26102: IFFALSE 26131
// missile := Replace ( missile , missile + 1 , 3 ) ;
26104: LD_ADDR_VAR 0 14
26108: PUSH
26109: LD_VAR 0 14
26113: PPUSH
26114: LD_VAR 0 14
26118: PUSH
26119: LD_INT 1
26121: PLUS
26122: PPUSH
26123: LD_INT 3
26125: PPUSH
26126: CALL_OW 1
26130: ST_TO_ADDR
// if missile < 2 then
26131: LD_VAR 0 14
26135: PUSH
26136: LD_INT 2
26138: LESS
26139: IFFALSE 26143
// exit ;
26141: GO 26365
// x := GetX ( enemy ) ;
26143: LD_ADDR_VAR 0 4
26147: PUSH
26148: LD_VAR 0 10
26152: PPUSH
26153: CALL_OW 250
26157: ST_TO_ADDR
// y := GetY ( enemy ) ;
26158: LD_ADDR_VAR 0 5
26162: PUSH
26163: LD_VAR 0 10
26167: PPUSH
26168: CALL_OW 251
26172: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26173: LD_ADDR_VAR 0 6
26177: PUSH
26178: LD_VAR 0 4
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PPUSH
26187: LD_INT 1
26189: PPUSH
26190: CALL_OW 12
26194: PLUS
26195: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26196: LD_ADDR_VAR 0 7
26200: PUSH
26201: LD_VAR 0 5
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PPUSH
26210: LD_INT 1
26212: PPUSH
26213: CALL_OW 12
26217: PLUS
26218: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26219: LD_VAR 0 6
26223: PPUSH
26224: LD_VAR 0 7
26228: PPUSH
26229: CALL_OW 488
26233: NOT
26234: IFFALSE 26256
// begin _x := x ;
26236: LD_ADDR_VAR 0 6
26240: PUSH
26241: LD_VAR 0 4
26245: ST_TO_ADDR
// _y := y ;
26246: LD_ADDR_VAR 0 7
26250: PUSH
26251: LD_VAR 0 5
26255: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26256: LD_ADDR_VAR 0 3
26260: PUSH
26261: LD_INT 1
26263: PPUSH
26264: LD_VAR 0 14
26268: PPUSH
26269: CALL_OW 12
26273: ST_TO_ADDR
// case i of 1 :
26274: LD_VAR 0 3
26278: PUSH
26279: LD_INT 1
26281: DOUBLE
26282: EQUAL
26283: IFTRUE 26287
26285: GO 26304
26287: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26288: LD_VAR 0 1
26292: PPUSH
26293: LD_VAR 0 10
26297: PPUSH
26298: CALL_OW 115
26302: GO 26365
26304: LD_INT 2
26306: DOUBLE
26307: EQUAL
26308: IFTRUE 26312
26310: GO 26334
26312: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26313: LD_VAR 0 1
26317: PPUSH
26318: LD_VAR 0 6
26322: PPUSH
26323: LD_VAR 0 7
26327: PPUSH
26328: CALL_OW 153
26332: GO 26365
26334: LD_INT 3
26336: DOUBLE
26337: EQUAL
26338: IFTRUE 26342
26340: GO 26364
26342: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26343: LD_VAR 0 1
26347: PPUSH
26348: LD_VAR 0 6
26352: PPUSH
26353: LD_VAR 0 7
26357: PPUSH
26358: CALL_OW 154
26362: GO 26365
26364: POP
// end ;
26365: LD_VAR 0 2
26369: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26370: LD_INT 0
26372: PPUSH
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
// if not unit or not building then
26378: LD_VAR 0 1
26382: NOT
26383: PUSH
26384: LD_VAR 0 2
26388: NOT
26389: OR
26390: IFFALSE 26394
// exit ;
26392: GO 26552
// x := GetX ( building ) ;
26394: LD_ADDR_VAR 0 5
26398: PUSH
26399: LD_VAR 0 2
26403: PPUSH
26404: CALL_OW 250
26408: ST_TO_ADDR
// y := GetY ( building ) ;
26409: LD_ADDR_VAR 0 6
26413: PUSH
26414: LD_VAR 0 2
26418: PPUSH
26419: CALL_OW 251
26423: ST_TO_ADDR
// for i = 0 to 5 do
26424: LD_ADDR_VAR 0 4
26428: PUSH
26429: DOUBLE
26430: LD_INT 0
26432: DEC
26433: ST_TO_ADDR
26434: LD_INT 5
26436: PUSH
26437: FOR_TO
26438: IFFALSE 26550
// begin _x := ShiftX ( x , i , 3 ) ;
26440: LD_ADDR_VAR 0 7
26444: PUSH
26445: LD_VAR 0 5
26449: PPUSH
26450: LD_VAR 0 4
26454: PPUSH
26455: LD_INT 3
26457: PPUSH
26458: CALL_OW 272
26462: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26463: LD_ADDR_VAR 0 8
26467: PUSH
26468: LD_VAR 0 6
26472: PPUSH
26473: LD_VAR 0 4
26477: PPUSH
26478: LD_INT 3
26480: PPUSH
26481: CALL_OW 273
26485: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26486: LD_VAR 0 7
26490: PPUSH
26491: LD_VAR 0 8
26495: PPUSH
26496: CALL_OW 488
26500: NOT
26501: IFFALSE 26505
// continue ;
26503: GO 26437
// if HexInfo ( _x , _y ) = 0 then
26505: LD_VAR 0 7
26509: PPUSH
26510: LD_VAR 0 8
26514: PPUSH
26515: CALL_OW 428
26519: PUSH
26520: LD_INT 0
26522: EQUAL
26523: IFFALSE 26548
// begin ComMoveXY ( unit , _x , _y ) ;
26525: LD_VAR 0 1
26529: PPUSH
26530: LD_VAR 0 7
26534: PPUSH
26535: LD_VAR 0 8
26539: PPUSH
26540: CALL_OW 111
// exit ;
26544: POP
26545: POP
26546: GO 26552
// end ; end ;
26548: GO 26437
26550: POP
26551: POP
// end ;
26552: LD_VAR 0 3
26556: RET
// export function ScanBase ( side , base_area ) ; begin
26557: LD_INT 0
26559: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: LD_VAR 0 2
26569: PPUSH
26570: LD_INT 81
26572: PUSH
26573: LD_VAR 0 1
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL_OW 70
26586: ST_TO_ADDR
// end ;
26587: LD_VAR 0 3
26591: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26592: LD_INT 0
26594: PPUSH
26595: PPUSH
26596: PPUSH
26597: PPUSH
// result := false ;
26598: LD_ADDR_VAR 0 2
26602: PUSH
26603: LD_INT 0
26605: ST_TO_ADDR
// side := GetSide ( unit ) ;
26606: LD_ADDR_VAR 0 3
26610: PUSH
26611: LD_VAR 0 1
26615: PPUSH
26616: CALL_OW 255
26620: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26621: LD_ADDR_VAR 0 4
26625: PUSH
26626: LD_VAR 0 1
26630: PPUSH
26631: CALL_OW 248
26635: ST_TO_ADDR
// case nat of 1 :
26636: LD_VAR 0 4
26640: PUSH
26641: LD_INT 1
26643: DOUBLE
26644: EQUAL
26645: IFTRUE 26649
26647: GO 26660
26649: POP
// tech := tech_lassight ; 2 :
26650: LD_ADDR_VAR 0 5
26654: PUSH
26655: LD_INT 12
26657: ST_TO_ADDR
26658: GO 26699
26660: LD_INT 2
26662: DOUBLE
26663: EQUAL
26664: IFTRUE 26668
26666: GO 26679
26668: POP
// tech := tech_mortar ; 3 :
26669: LD_ADDR_VAR 0 5
26673: PUSH
26674: LD_INT 41
26676: ST_TO_ADDR
26677: GO 26699
26679: LD_INT 3
26681: DOUBLE
26682: EQUAL
26683: IFTRUE 26687
26685: GO 26698
26687: POP
// tech := tech_bazooka ; end ;
26688: LD_ADDR_VAR 0 5
26692: PUSH
26693: LD_INT 44
26695: ST_TO_ADDR
26696: GO 26699
26698: POP
// if Researched ( side , tech ) then
26699: LD_VAR 0 3
26703: PPUSH
26704: LD_VAR 0 5
26708: PPUSH
26709: CALL_OW 325
26713: IFFALSE 26740
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26715: LD_ADDR_VAR 0 2
26719: PUSH
26720: LD_INT 5
26722: PUSH
26723: LD_INT 8
26725: PUSH
26726: LD_INT 9
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: PUSH
26734: LD_VAR 0 4
26738: ARRAY
26739: ST_TO_ADDR
// end ;
26740: LD_VAR 0 2
26744: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
26749: PPUSH
// if not mines then
26750: LD_VAR 0 2
26754: NOT
26755: IFFALSE 26759
// exit ;
26757: GO 26903
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26759: LD_ADDR_VAR 0 5
26763: PUSH
26764: LD_INT 81
26766: PUSH
26767: LD_VAR 0 1
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 3
26778: PUSH
26779: LD_INT 21
26781: PUSH
26782: LD_INT 3
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PPUSH
26797: CALL_OW 69
26801: ST_TO_ADDR
// for i in mines do
26802: LD_ADDR_VAR 0 4
26806: PUSH
26807: LD_VAR 0 2
26811: PUSH
26812: FOR_IN
26813: IFFALSE 26901
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26815: LD_VAR 0 4
26819: PUSH
26820: LD_INT 1
26822: ARRAY
26823: PPUSH
26824: LD_VAR 0 4
26828: PUSH
26829: LD_INT 2
26831: ARRAY
26832: PPUSH
26833: CALL_OW 458
26837: NOT
26838: IFFALSE 26842
// continue ;
26840: GO 26812
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26842: LD_VAR 0 4
26846: PUSH
26847: LD_INT 1
26849: ARRAY
26850: PPUSH
26851: LD_VAR 0 4
26855: PUSH
26856: LD_INT 2
26858: ARRAY
26859: PPUSH
26860: CALL_OW 428
26864: PUSH
26865: LD_VAR 0 5
26869: IN
26870: IFFALSE 26899
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26872: LD_VAR 0 4
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: PPUSH
26881: LD_VAR 0 4
26885: PUSH
26886: LD_INT 2
26888: ARRAY
26889: PPUSH
26890: LD_VAR 0 1
26894: PPUSH
26895: CALL_OW 456
// end ;
26899: GO 26812
26901: POP
26902: POP
// end ;
26903: LD_VAR 0 3
26907: RET
// export function Count ( array ) ; var i ; begin
26908: LD_INT 0
26910: PPUSH
26911: PPUSH
// result := 0 ;
26912: LD_ADDR_VAR 0 2
26916: PUSH
26917: LD_INT 0
26919: ST_TO_ADDR
// for i in array do
26920: LD_ADDR_VAR 0 3
26924: PUSH
26925: LD_VAR 0 1
26929: PUSH
26930: FOR_IN
26931: IFFALSE 26955
// if i then
26933: LD_VAR 0 3
26937: IFFALSE 26953
// result := result + 1 ;
26939: LD_ADDR_VAR 0 2
26943: PUSH
26944: LD_VAR 0 2
26948: PUSH
26949: LD_INT 1
26951: PLUS
26952: ST_TO_ADDR
26953: GO 26930
26955: POP
26956: POP
// end ;
26957: LD_VAR 0 2
26961: RET
// export function IsEmpty ( building ) ; begin
26962: LD_INT 0
26964: PPUSH
// if not building then
26965: LD_VAR 0 1
26969: NOT
26970: IFFALSE 26974
// exit ;
26972: GO 27017
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26974: LD_ADDR_VAR 0 2
26978: PUSH
26979: LD_VAR 0 1
26983: PUSH
26984: LD_INT 22
26986: PUSH
26987: LD_VAR 0 1
26991: PPUSH
26992: CALL_OW 255
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 58
27003: PUSH
27004: EMPTY
27005: LIST
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PPUSH
27011: CALL_OW 69
27015: IN
27016: ST_TO_ADDR
// end ;
27017: LD_VAR 0 2
27021: RET
// export function IsNotFull ( building ) ; var places ; begin
27022: LD_INT 0
27024: PPUSH
27025: PPUSH
// if not building then
27026: LD_VAR 0 1
27030: NOT
27031: IFFALSE 27035
// exit ;
27033: GO 27206
// result := false ;
27035: LD_ADDR_VAR 0 2
27039: PUSH
27040: LD_INT 0
27042: ST_TO_ADDR
// places := 0 ;
27043: LD_ADDR_VAR 0 3
27047: PUSH
27048: LD_INT 0
27050: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
27051: LD_VAR 0 1
27055: PPUSH
27056: CALL_OW 266
27060: PUSH
27061: LD_INT 0
27063: DOUBLE
27064: EQUAL
27065: IFTRUE 27123
27067: LD_INT 1
27069: DOUBLE
27070: EQUAL
27071: IFTRUE 27123
27073: LD_INT 6
27075: DOUBLE
27076: EQUAL
27077: IFTRUE 27123
27079: LD_INT 7
27081: DOUBLE
27082: EQUAL
27083: IFTRUE 27123
27085: LD_INT 8
27087: DOUBLE
27088: EQUAL
27089: IFTRUE 27123
27091: LD_INT 4
27093: DOUBLE
27094: EQUAL
27095: IFTRUE 27123
27097: LD_INT 5
27099: DOUBLE
27100: EQUAL
27101: IFTRUE 27123
27103: LD_INT 2
27105: DOUBLE
27106: EQUAL
27107: IFTRUE 27123
27109: LD_INT 3
27111: DOUBLE
27112: EQUAL
27113: IFTRUE 27123
27115: LD_INT 35
27117: DOUBLE
27118: EQUAL
27119: IFTRUE 27123
27121: GO 27134
27123: POP
// places := 6 ; b_bunker , b_breastwork :
27124: LD_ADDR_VAR 0 3
27128: PUSH
27129: LD_INT 6
27131: ST_TO_ADDR
27132: GO 27179
27134: LD_INT 32
27136: DOUBLE
27137: EQUAL
27138: IFTRUE 27148
27140: LD_INT 31
27142: DOUBLE
27143: EQUAL
27144: IFTRUE 27148
27146: GO 27159
27148: POP
// places := 1 ; b_control_tower :
27149: LD_ADDR_VAR 0 3
27153: PUSH
27154: LD_INT 1
27156: ST_TO_ADDR
27157: GO 27179
27159: LD_INT 36
27161: DOUBLE
27162: EQUAL
27163: IFTRUE 27167
27165: GO 27178
27167: POP
// places := 3 ; end ;
27168: LD_ADDR_VAR 0 3
27172: PUSH
27173: LD_INT 3
27175: ST_TO_ADDR
27176: GO 27179
27178: POP
// if places then
27179: LD_VAR 0 3
27183: IFFALSE 27206
// result := UnitsInside ( building ) < places ;
27185: LD_ADDR_VAR 0 2
27189: PUSH
27190: LD_VAR 0 1
27194: PPUSH
27195: CALL_OW 313
27199: PUSH
27200: LD_VAR 0 3
27204: LESS
27205: ST_TO_ADDR
// end ;
27206: LD_VAR 0 2
27210: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27211: LD_INT 0
27213: PPUSH
27214: PPUSH
27215: PPUSH
27216: PPUSH
// tmp := [ ] ;
27217: LD_ADDR_VAR 0 3
27221: PUSH
27222: EMPTY
27223: ST_TO_ADDR
// list := [ ] ;
27224: LD_ADDR_VAR 0 5
27228: PUSH
27229: EMPTY
27230: ST_TO_ADDR
// for i = 16 to 25 do
27231: LD_ADDR_VAR 0 4
27235: PUSH
27236: DOUBLE
27237: LD_INT 16
27239: DEC
27240: ST_TO_ADDR
27241: LD_INT 25
27243: PUSH
27244: FOR_TO
27245: IFFALSE 27318
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27247: LD_ADDR_VAR 0 3
27251: PUSH
27252: LD_VAR 0 3
27256: PUSH
27257: LD_INT 22
27259: PUSH
27260: LD_VAR 0 1
27264: PPUSH
27265: CALL_OW 255
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: PUSH
27274: LD_INT 91
27276: PUSH
27277: LD_VAR 0 1
27281: PUSH
27282: LD_INT 6
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: LIST
27289: PUSH
27290: LD_INT 30
27292: PUSH
27293: LD_VAR 0 4
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: PPUSH
27310: CALL_OW 69
27314: ADD
27315: ST_TO_ADDR
27316: GO 27244
27318: POP
27319: POP
// for i = 1 to tmp do
27320: LD_ADDR_VAR 0 4
27324: PUSH
27325: DOUBLE
27326: LD_INT 1
27328: DEC
27329: ST_TO_ADDR
27330: LD_VAR 0 3
27334: PUSH
27335: FOR_TO
27336: IFFALSE 27424
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27338: LD_ADDR_VAR 0 5
27342: PUSH
27343: LD_VAR 0 5
27347: PUSH
27348: LD_VAR 0 3
27352: PUSH
27353: LD_VAR 0 4
27357: ARRAY
27358: PPUSH
27359: CALL_OW 266
27363: PUSH
27364: LD_VAR 0 3
27368: PUSH
27369: LD_VAR 0 4
27373: ARRAY
27374: PPUSH
27375: CALL_OW 250
27379: PUSH
27380: LD_VAR 0 3
27384: PUSH
27385: LD_VAR 0 4
27389: ARRAY
27390: PPUSH
27391: CALL_OW 251
27395: PUSH
27396: LD_VAR 0 3
27400: PUSH
27401: LD_VAR 0 4
27405: ARRAY
27406: PPUSH
27407: CALL_OW 254
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: PUSH
27418: EMPTY
27419: LIST
27420: ADD
27421: ST_TO_ADDR
27422: GO 27335
27424: POP
27425: POP
// result := list ;
27426: LD_ADDR_VAR 0 2
27430: PUSH
27431: LD_VAR 0 5
27435: ST_TO_ADDR
// end ;
27436: LD_VAR 0 2
27440: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27441: LD_INT 0
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
27448: PPUSH
27449: PPUSH
// if not factory then
27450: LD_VAR 0 1
27454: NOT
27455: IFFALSE 27459
// exit ;
27457: GO 28052
// if control = control_apeman then
27459: LD_VAR 0 4
27463: PUSH
27464: LD_INT 5
27466: EQUAL
27467: IFFALSE 27576
// begin tmp := UnitsInside ( factory ) ;
27469: LD_ADDR_VAR 0 8
27473: PUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 313
27483: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27484: LD_VAR 0 8
27488: PPUSH
27489: LD_INT 25
27491: PUSH
27492: LD_INT 12
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PPUSH
27499: CALL_OW 72
27503: NOT
27504: IFFALSE 27514
// control := control_manual ;
27506: LD_ADDR_VAR 0 4
27510: PUSH
27511: LD_INT 1
27513: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27514: LD_ADDR_VAR 0 8
27518: PUSH
27519: LD_VAR 0 1
27523: PPUSH
27524: CALL 27211 0 1
27528: ST_TO_ADDR
// if tmp then
27529: LD_VAR 0 8
27533: IFFALSE 27576
// begin for i in tmp do
27535: LD_ADDR_VAR 0 7
27539: PUSH
27540: LD_VAR 0 8
27544: PUSH
27545: FOR_IN
27546: IFFALSE 27574
// if i [ 1 ] = b_ext_radio then
27548: LD_VAR 0 7
27552: PUSH
27553: LD_INT 1
27555: ARRAY
27556: PUSH
27557: LD_INT 22
27559: EQUAL
27560: IFFALSE 27572
// begin control := control_remote ;
27562: LD_ADDR_VAR 0 4
27566: PUSH
27567: LD_INT 2
27569: ST_TO_ADDR
// break ;
27570: GO 27574
// end ;
27572: GO 27545
27574: POP
27575: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27576: LD_VAR 0 1
27580: PPUSH
27581: LD_VAR 0 2
27585: PPUSH
27586: LD_VAR 0 3
27590: PPUSH
27591: LD_VAR 0 4
27595: PPUSH
27596: LD_VAR 0 5
27600: PPUSH
27601: CALL_OW 448
27605: IFFALSE 27640
// begin result := [ chassis , engine , control , weapon ] ;
27607: LD_ADDR_VAR 0 6
27611: PUSH
27612: LD_VAR 0 2
27616: PUSH
27617: LD_VAR 0 3
27621: PUSH
27622: LD_VAR 0 4
27626: PUSH
27627: LD_VAR 0 5
27631: PUSH
27632: EMPTY
27633: LIST
27634: LIST
27635: LIST
27636: LIST
27637: ST_TO_ADDR
// exit ;
27638: GO 28052
// end ; _chassis := AvailableChassisList ( factory ) ;
27640: LD_ADDR_VAR 0 9
27644: PUSH
27645: LD_VAR 0 1
27649: PPUSH
27650: CALL_OW 475
27654: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27655: LD_ADDR_VAR 0 11
27659: PUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 476
27669: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27670: LD_ADDR_VAR 0 12
27674: PUSH
27675: LD_VAR 0 1
27679: PPUSH
27680: CALL_OW 477
27684: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27685: LD_ADDR_VAR 0 10
27689: PUSH
27690: LD_VAR 0 1
27694: PPUSH
27695: CALL_OW 478
27699: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27700: LD_VAR 0 9
27704: NOT
27705: PUSH
27706: LD_VAR 0 11
27710: NOT
27711: OR
27712: PUSH
27713: LD_VAR 0 12
27717: NOT
27718: OR
27719: PUSH
27720: LD_VAR 0 10
27724: NOT
27725: OR
27726: IFFALSE 27761
// begin result := [ chassis , engine , control , weapon ] ;
27728: LD_ADDR_VAR 0 6
27732: PUSH
27733: LD_VAR 0 2
27737: PUSH
27738: LD_VAR 0 3
27742: PUSH
27743: LD_VAR 0 4
27747: PUSH
27748: LD_VAR 0 5
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: ST_TO_ADDR
// exit ;
27759: GO 28052
// end ; if not chassis in _chassis then
27761: LD_VAR 0 2
27765: PUSH
27766: LD_VAR 0 9
27770: IN
27771: NOT
27772: IFFALSE 27798
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27774: LD_ADDR_VAR 0 2
27778: PUSH
27779: LD_VAR 0 9
27783: PUSH
27784: LD_INT 1
27786: PPUSH
27787: LD_VAR 0 9
27791: PPUSH
27792: CALL_OW 12
27796: ARRAY
27797: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27798: LD_VAR 0 2
27802: PPUSH
27803: LD_VAR 0 3
27807: PPUSH
27808: CALL 28057 0 2
27812: NOT
27813: IFFALSE 27872
// repeat engine := _engine [ 1 ] ;
27815: LD_ADDR_VAR 0 3
27819: PUSH
27820: LD_VAR 0 11
27824: PUSH
27825: LD_INT 1
27827: ARRAY
27828: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27829: LD_ADDR_VAR 0 11
27833: PUSH
27834: LD_VAR 0 11
27838: PPUSH
27839: LD_INT 1
27841: PPUSH
27842: CALL_OW 3
27846: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27847: LD_VAR 0 2
27851: PPUSH
27852: LD_VAR 0 3
27856: PPUSH
27857: CALL 28057 0 2
27861: PUSH
27862: LD_VAR 0 11
27866: PUSH
27867: EMPTY
27868: EQUAL
27869: OR
27870: IFFALSE 27815
// if not control in _control then
27872: LD_VAR 0 4
27876: PUSH
27877: LD_VAR 0 12
27881: IN
27882: NOT
27883: IFFALSE 27909
// control := _control [ rand ( 1 , _control ) ] ;
27885: LD_ADDR_VAR 0 4
27889: PUSH
27890: LD_VAR 0 12
27894: PUSH
27895: LD_INT 1
27897: PPUSH
27898: LD_VAR 0 12
27902: PPUSH
27903: CALL_OW 12
27907: ARRAY
27908: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27909: LD_VAR 0 2
27913: PPUSH
27914: LD_VAR 0 5
27918: PPUSH
27919: CALL 28277 0 2
27923: NOT
27924: IFFALSE 27983
// repeat weapon := _weapon [ 1 ] ;
27926: LD_ADDR_VAR 0 5
27930: PUSH
27931: LD_VAR 0 10
27935: PUSH
27936: LD_INT 1
27938: ARRAY
27939: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27940: LD_ADDR_VAR 0 10
27944: PUSH
27945: LD_VAR 0 10
27949: PPUSH
27950: LD_INT 1
27952: PPUSH
27953: CALL_OW 3
27957: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27958: LD_VAR 0 2
27962: PPUSH
27963: LD_VAR 0 5
27967: PPUSH
27968: CALL 28277 0 2
27972: PUSH
27973: LD_VAR 0 10
27977: PUSH
27978: EMPTY
27979: EQUAL
27980: OR
27981: IFFALSE 27926
// result := [ ] ;
27983: LD_ADDR_VAR 0 6
27987: PUSH
27988: EMPTY
27989: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27990: LD_VAR 0 1
27994: PPUSH
27995: LD_VAR 0 2
27999: PPUSH
28000: LD_VAR 0 3
28004: PPUSH
28005: LD_VAR 0 4
28009: PPUSH
28010: LD_VAR 0 5
28014: PPUSH
28015: CALL_OW 448
28019: IFFALSE 28052
// result := [ chassis , engine , control , weapon ] ;
28021: LD_ADDR_VAR 0 6
28025: PUSH
28026: LD_VAR 0 2
28030: PUSH
28031: LD_VAR 0 3
28035: PUSH
28036: LD_VAR 0 4
28040: PUSH
28041: LD_VAR 0 5
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: ST_TO_ADDR
// end ;
28052: LD_VAR 0 6
28056: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28057: LD_INT 0
28059: PPUSH
// if not chassis or not engine then
28060: LD_VAR 0 1
28064: NOT
28065: PUSH
28066: LD_VAR 0 2
28070: NOT
28071: OR
28072: IFFALSE 28076
// exit ;
28074: GO 28272
// case engine of engine_solar :
28076: LD_VAR 0 2
28080: PUSH
28081: LD_INT 2
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28127
28089: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_INT 11
28097: PUSH
28098: LD_INT 12
28100: PUSH
28101: LD_INT 13
28103: PUSH
28104: LD_INT 14
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 2
28112: PUSH
28113: LD_INT 3
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: ST_TO_ADDR
28125: GO 28256
28127: LD_INT 1
28129: DOUBLE
28130: EQUAL
28131: IFTRUE 28135
28133: GO 28197
28135: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28136: LD_ADDR_VAR 0 3
28140: PUSH
28141: LD_INT 11
28143: PUSH
28144: LD_INT 12
28146: PUSH
28147: LD_INT 13
28149: PUSH
28150: LD_INT 14
28152: PUSH
28153: LD_INT 1
28155: PUSH
28156: LD_INT 2
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: LD_INT 4
28164: PUSH
28165: LD_INT 5
28167: PUSH
28168: LD_INT 21
28170: PUSH
28171: LD_INT 23
28173: PUSH
28174: LD_INT 22
28176: PUSH
28177: LD_INT 24
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: LIST
28187: LIST
28188: LIST
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
28195: GO 28256
28197: LD_INT 3
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28255
28205: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: LD_INT 13
28213: PUSH
28214: LD_INT 14
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: LD_INT 3
28222: PUSH
28223: LD_INT 4
28225: PUSH
28226: LD_INT 5
28228: PUSH
28229: LD_INT 21
28231: PUSH
28232: LD_INT 22
28234: PUSH
28235: LD_INT 23
28237: PUSH
28238: LD_INT 24
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: ST_TO_ADDR
28253: GO 28256
28255: POP
// result := ( chassis in result ) ;
28256: LD_ADDR_VAR 0 3
28260: PUSH
28261: LD_VAR 0 1
28265: PUSH
28266: LD_VAR 0 3
28270: IN
28271: ST_TO_ADDR
// end ;
28272: LD_VAR 0 3
28276: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28277: LD_INT 0
28279: PPUSH
// if not chassis or not weapon then
28280: LD_VAR 0 1
28284: NOT
28285: PUSH
28286: LD_VAR 0 2
28290: NOT
28291: OR
28292: IFFALSE 28296
// exit ;
28294: GO 29356
// case weapon of us_machine_gun :
28296: LD_VAR 0 2
28300: PUSH
28301: LD_INT 2
28303: DOUBLE
28304: EQUAL
28305: IFTRUE 28309
28307: GO 28339
28309: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28310: LD_ADDR_VAR 0 3
28314: PUSH
28315: LD_INT 1
28317: PUSH
28318: LD_INT 2
28320: PUSH
28321: LD_INT 3
28323: PUSH
28324: LD_INT 4
28326: PUSH
28327: LD_INT 5
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: ST_TO_ADDR
28337: GO 29340
28339: LD_INT 3
28341: DOUBLE
28342: EQUAL
28343: IFTRUE 28347
28345: GO 28377
28347: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28348: LD_ADDR_VAR 0 3
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: LD_INT 2
28358: PUSH
28359: LD_INT 3
28361: PUSH
28362: LD_INT 4
28364: PUSH
28365: LD_INT 5
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: LIST
28374: ST_TO_ADDR
28375: GO 29340
28377: LD_INT 11
28379: DOUBLE
28380: EQUAL
28381: IFTRUE 28385
28383: GO 28415
28385: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28386: LD_ADDR_VAR 0 3
28390: PUSH
28391: LD_INT 1
28393: PUSH
28394: LD_INT 2
28396: PUSH
28397: LD_INT 3
28399: PUSH
28400: LD_INT 4
28402: PUSH
28403: LD_INT 5
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: ST_TO_ADDR
28413: GO 29340
28415: LD_INT 4
28417: DOUBLE
28418: EQUAL
28419: IFTRUE 28423
28421: GO 28449
28423: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28424: LD_ADDR_VAR 0 3
28428: PUSH
28429: LD_INT 2
28431: PUSH
28432: LD_INT 3
28434: PUSH
28435: LD_INT 4
28437: PUSH
28438: LD_INT 5
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: ST_TO_ADDR
28447: GO 29340
28449: LD_INT 5
28451: DOUBLE
28452: EQUAL
28453: IFTRUE 28457
28455: GO 28483
28457: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28458: LD_ADDR_VAR 0 3
28462: PUSH
28463: LD_INT 2
28465: PUSH
28466: LD_INT 3
28468: PUSH
28469: LD_INT 4
28471: PUSH
28472: LD_INT 5
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: LIST
28479: LIST
28480: ST_TO_ADDR
28481: GO 29340
28483: LD_INT 9
28485: DOUBLE
28486: EQUAL
28487: IFTRUE 28491
28489: GO 28517
28491: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: LD_INT 3
28502: PUSH
28503: LD_INT 4
28505: PUSH
28506: LD_INT 5
28508: PUSH
28509: EMPTY
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: ST_TO_ADDR
28515: GO 29340
28517: LD_INT 7
28519: DOUBLE
28520: EQUAL
28521: IFTRUE 28525
28523: GO 28551
28525: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28526: LD_ADDR_VAR 0 3
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: LD_INT 3
28536: PUSH
28537: LD_INT 4
28539: PUSH
28540: LD_INT 5
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: ST_TO_ADDR
28549: GO 29340
28551: LD_INT 12
28553: DOUBLE
28554: EQUAL
28555: IFTRUE 28559
28557: GO 28585
28559: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28560: LD_ADDR_VAR 0 3
28564: PUSH
28565: LD_INT 2
28567: PUSH
28568: LD_INT 3
28570: PUSH
28571: LD_INT 4
28573: PUSH
28574: LD_INT 5
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: LIST
28581: LIST
28582: ST_TO_ADDR
28583: GO 29340
28585: LD_INT 13
28587: DOUBLE
28588: EQUAL
28589: IFTRUE 28593
28591: GO 28619
28593: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28594: LD_ADDR_VAR 0 3
28598: PUSH
28599: LD_INT 2
28601: PUSH
28602: LD_INT 3
28604: PUSH
28605: LD_INT 4
28607: PUSH
28608: LD_INT 5
28610: PUSH
28611: EMPTY
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: ST_TO_ADDR
28617: GO 29340
28619: LD_INT 14
28621: DOUBLE
28622: EQUAL
28623: IFTRUE 28627
28625: GO 28645
28627: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28628: LD_ADDR_VAR 0 3
28632: PUSH
28633: LD_INT 4
28635: PUSH
28636: LD_INT 5
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: ST_TO_ADDR
28643: GO 29340
28645: LD_INT 6
28647: DOUBLE
28648: EQUAL
28649: IFTRUE 28653
28651: GO 28671
28653: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28654: LD_ADDR_VAR 0 3
28658: PUSH
28659: LD_INT 4
28661: PUSH
28662: LD_INT 5
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: ST_TO_ADDR
28669: GO 29340
28671: LD_INT 10
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28697
28679: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28680: LD_ADDR_VAR 0 3
28684: PUSH
28685: LD_INT 4
28687: PUSH
28688: LD_INT 5
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: ST_TO_ADDR
28695: GO 29340
28697: LD_INT 22
28699: DOUBLE
28700: EQUAL
28701: IFTRUE 28705
28703: GO 28731
28705: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: LD_INT 11
28713: PUSH
28714: LD_INT 12
28716: PUSH
28717: LD_INT 13
28719: PUSH
28720: LD_INT 14
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
28729: GO 29340
28731: LD_INT 23
28733: DOUBLE
28734: EQUAL
28735: IFTRUE 28739
28737: GO 28765
28739: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: LD_INT 11
28747: PUSH
28748: LD_INT 12
28750: PUSH
28751: LD_INT 13
28753: PUSH
28754: LD_INT 14
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
28763: GO 29340
28765: LD_INT 24
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28799
28773: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28774: LD_ADDR_VAR 0 3
28778: PUSH
28779: LD_INT 11
28781: PUSH
28782: LD_INT 12
28784: PUSH
28785: LD_INT 13
28787: PUSH
28788: LD_INT 14
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
28797: GO 29340
28799: LD_INT 30
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28833
28807: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 11
28815: PUSH
28816: LD_INT 12
28818: PUSH
28819: LD_INT 13
28821: PUSH
28822: LD_INT 14
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
28831: GO 29340
28833: LD_INT 25
28835: DOUBLE
28836: EQUAL
28837: IFTRUE 28841
28839: GO 28859
28841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: LD_INT 13
28849: PUSH
28850: LD_INT 14
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: ST_TO_ADDR
28857: GO 29340
28859: LD_INT 27
28861: DOUBLE
28862: EQUAL
28863: IFTRUE 28867
28865: GO 28885
28867: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28868: LD_ADDR_VAR 0 3
28872: PUSH
28873: LD_INT 13
28875: PUSH
28876: LD_INT 14
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: ST_TO_ADDR
28883: GO 29340
28885: LD_INT 92
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28919
28893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_INT 11
28901: PUSH
28902: LD_INT 12
28904: PUSH
28905: LD_INT 13
28907: PUSH
28908: LD_INT 14
28910: PUSH
28911: EMPTY
28912: LIST
28913: LIST
28914: LIST
28915: LIST
28916: ST_TO_ADDR
28917: GO 29340
28919: LD_INT 28
28921: DOUBLE
28922: EQUAL
28923: IFTRUE 28927
28925: GO 28945
28927: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28928: LD_ADDR_VAR 0 3
28932: PUSH
28933: LD_INT 13
28935: PUSH
28936: LD_INT 14
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: ST_TO_ADDR
28943: GO 29340
28945: LD_INT 29
28947: DOUBLE
28948: EQUAL
28949: IFTRUE 28953
28951: GO 28971
28953: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28954: LD_ADDR_VAR 0 3
28958: PUSH
28959: LD_INT 13
28961: PUSH
28962: LD_INT 14
28964: PUSH
28965: EMPTY
28966: LIST
28967: LIST
28968: ST_TO_ADDR
28969: GO 29340
28971: LD_INT 31
28973: DOUBLE
28974: EQUAL
28975: IFTRUE 28979
28977: GO 28997
28979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28980: LD_ADDR_VAR 0 3
28984: PUSH
28985: LD_INT 13
28987: PUSH
28988: LD_INT 14
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: ST_TO_ADDR
28995: GO 29340
28997: LD_INT 26
28999: DOUBLE
29000: EQUAL
29001: IFTRUE 29005
29003: GO 29023
29005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29006: LD_ADDR_VAR 0 3
29010: PUSH
29011: LD_INT 13
29013: PUSH
29014: LD_INT 14
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: ST_TO_ADDR
29021: GO 29340
29023: LD_INT 42
29025: DOUBLE
29026: EQUAL
29027: IFTRUE 29031
29029: GO 29057
29031: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29032: LD_ADDR_VAR 0 3
29036: PUSH
29037: LD_INT 21
29039: PUSH
29040: LD_INT 22
29042: PUSH
29043: LD_INT 23
29045: PUSH
29046: LD_INT 24
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: ST_TO_ADDR
29055: GO 29340
29057: LD_INT 43
29059: DOUBLE
29060: EQUAL
29061: IFTRUE 29065
29063: GO 29091
29065: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29066: LD_ADDR_VAR 0 3
29070: PUSH
29071: LD_INT 21
29073: PUSH
29074: LD_INT 22
29076: PUSH
29077: LD_INT 23
29079: PUSH
29080: LD_INT 24
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: ST_TO_ADDR
29089: GO 29340
29091: LD_INT 44
29093: DOUBLE
29094: EQUAL
29095: IFTRUE 29099
29097: GO 29125
29099: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29100: LD_ADDR_VAR 0 3
29104: PUSH
29105: LD_INT 21
29107: PUSH
29108: LD_INT 22
29110: PUSH
29111: LD_INT 23
29113: PUSH
29114: LD_INT 24
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: ST_TO_ADDR
29123: GO 29340
29125: LD_INT 45
29127: DOUBLE
29128: EQUAL
29129: IFTRUE 29133
29131: GO 29159
29133: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29134: LD_ADDR_VAR 0 3
29138: PUSH
29139: LD_INT 21
29141: PUSH
29142: LD_INT 22
29144: PUSH
29145: LD_INT 23
29147: PUSH
29148: LD_INT 24
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: LIST
29156: ST_TO_ADDR
29157: GO 29340
29159: LD_INT 49
29161: DOUBLE
29162: EQUAL
29163: IFTRUE 29167
29165: GO 29193
29167: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29168: LD_ADDR_VAR 0 3
29172: PUSH
29173: LD_INT 21
29175: PUSH
29176: LD_INT 22
29178: PUSH
29179: LD_INT 23
29181: PUSH
29182: LD_INT 24
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: ST_TO_ADDR
29191: GO 29340
29193: LD_INT 51
29195: DOUBLE
29196: EQUAL
29197: IFTRUE 29201
29199: GO 29227
29201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29202: LD_ADDR_VAR 0 3
29206: PUSH
29207: LD_INT 21
29209: PUSH
29210: LD_INT 22
29212: PUSH
29213: LD_INT 23
29215: PUSH
29216: LD_INT 24
29218: PUSH
29219: EMPTY
29220: LIST
29221: LIST
29222: LIST
29223: LIST
29224: ST_TO_ADDR
29225: GO 29340
29227: LD_INT 52
29229: DOUBLE
29230: EQUAL
29231: IFTRUE 29235
29233: GO 29261
29235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29236: LD_ADDR_VAR 0 3
29240: PUSH
29241: LD_INT 21
29243: PUSH
29244: LD_INT 22
29246: PUSH
29247: LD_INT 23
29249: PUSH
29250: LD_INT 24
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: ST_TO_ADDR
29259: GO 29340
29261: LD_INT 53
29263: DOUBLE
29264: EQUAL
29265: IFTRUE 29269
29267: GO 29287
29269: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29270: LD_ADDR_VAR 0 3
29274: PUSH
29275: LD_INT 23
29277: PUSH
29278: LD_INT 24
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: ST_TO_ADDR
29285: GO 29340
29287: LD_INT 46
29289: DOUBLE
29290: EQUAL
29291: IFTRUE 29295
29293: GO 29313
29295: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29296: LD_ADDR_VAR 0 3
29300: PUSH
29301: LD_INT 23
29303: PUSH
29304: LD_INT 24
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: ST_TO_ADDR
29311: GO 29340
29313: LD_INT 47
29315: DOUBLE
29316: EQUAL
29317: IFTRUE 29321
29319: GO 29339
29321: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29322: LD_ADDR_VAR 0 3
29326: PUSH
29327: LD_INT 23
29329: PUSH
29330: LD_INT 24
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: ST_TO_ADDR
29337: GO 29340
29339: POP
// result := ( chassis in result ) ;
29340: LD_ADDR_VAR 0 3
29344: PUSH
29345: LD_VAR 0 1
29349: PUSH
29350: LD_VAR 0 3
29354: IN
29355: ST_TO_ADDR
// end ;
29356: LD_VAR 0 3
29360: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29361: LD_INT 0
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
// result := array ;
29370: LD_ADDR_VAR 0 5
29374: PUSH
29375: LD_VAR 0 1
29379: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29380: LD_VAR 0 1
29384: NOT
29385: PUSH
29386: LD_VAR 0 2
29390: NOT
29391: OR
29392: PUSH
29393: LD_VAR 0 3
29397: NOT
29398: OR
29399: PUSH
29400: LD_VAR 0 2
29404: PUSH
29405: LD_VAR 0 1
29409: GREATER
29410: OR
29411: PUSH
29412: LD_VAR 0 3
29416: PUSH
29417: LD_VAR 0 1
29421: GREATER
29422: OR
29423: IFFALSE 29427
// exit ;
29425: GO 29723
// if direction then
29427: LD_VAR 0 4
29431: IFFALSE 29495
// begin d := 1 ;
29433: LD_ADDR_VAR 0 9
29437: PUSH
29438: LD_INT 1
29440: ST_TO_ADDR
// if i_from > i_to then
29441: LD_VAR 0 2
29445: PUSH
29446: LD_VAR 0 3
29450: GREATER
29451: IFFALSE 29477
// length := ( array - i_from ) + i_to else
29453: LD_ADDR_VAR 0 11
29457: PUSH
29458: LD_VAR 0 1
29462: PUSH
29463: LD_VAR 0 2
29467: MINUS
29468: PUSH
29469: LD_VAR 0 3
29473: PLUS
29474: ST_TO_ADDR
29475: GO 29493
// length := i_to - i_from ;
29477: LD_ADDR_VAR 0 11
29481: PUSH
29482: LD_VAR 0 3
29486: PUSH
29487: LD_VAR 0 2
29491: MINUS
29492: ST_TO_ADDR
// end else
29493: GO 29556
// begin d := - 1 ;
29495: LD_ADDR_VAR 0 9
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: ST_TO_ADDR
// if i_from > i_to then
29504: LD_VAR 0 2
29508: PUSH
29509: LD_VAR 0 3
29513: GREATER
29514: IFFALSE 29534
// length := i_from - i_to else
29516: LD_ADDR_VAR 0 11
29520: PUSH
29521: LD_VAR 0 2
29525: PUSH
29526: LD_VAR 0 3
29530: MINUS
29531: ST_TO_ADDR
29532: GO 29556
// length := ( array - i_to ) + i_from ;
29534: LD_ADDR_VAR 0 11
29538: PUSH
29539: LD_VAR 0 1
29543: PUSH
29544: LD_VAR 0 3
29548: MINUS
29549: PUSH
29550: LD_VAR 0 2
29554: PLUS
29555: ST_TO_ADDR
// end ; if not length then
29556: LD_VAR 0 11
29560: NOT
29561: IFFALSE 29565
// exit ;
29563: GO 29723
// tmp := array ;
29565: LD_ADDR_VAR 0 10
29569: PUSH
29570: LD_VAR 0 1
29574: ST_TO_ADDR
// for i = 1 to length do
29575: LD_ADDR_VAR 0 6
29579: PUSH
29580: DOUBLE
29581: LD_INT 1
29583: DEC
29584: ST_TO_ADDR
29585: LD_VAR 0 11
29589: PUSH
29590: FOR_TO
29591: IFFALSE 29711
// begin for j = 1 to array do
29593: LD_ADDR_VAR 0 7
29597: PUSH
29598: DOUBLE
29599: LD_INT 1
29601: DEC
29602: ST_TO_ADDR
29603: LD_VAR 0 1
29607: PUSH
29608: FOR_TO
29609: IFFALSE 29697
// begin k := j + d ;
29611: LD_ADDR_VAR 0 8
29615: PUSH
29616: LD_VAR 0 7
29620: PUSH
29621: LD_VAR 0 9
29625: PLUS
29626: ST_TO_ADDR
// if k > array then
29627: LD_VAR 0 8
29631: PUSH
29632: LD_VAR 0 1
29636: GREATER
29637: IFFALSE 29647
// k := 1 ;
29639: LD_ADDR_VAR 0 8
29643: PUSH
29644: LD_INT 1
29646: ST_TO_ADDR
// if not k then
29647: LD_VAR 0 8
29651: NOT
29652: IFFALSE 29664
// k := array ;
29654: LD_ADDR_VAR 0 8
29658: PUSH
29659: LD_VAR 0 1
29663: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29664: LD_ADDR_VAR 0 10
29668: PUSH
29669: LD_VAR 0 10
29673: PPUSH
29674: LD_VAR 0 8
29678: PPUSH
29679: LD_VAR 0 1
29683: PUSH
29684: LD_VAR 0 7
29688: ARRAY
29689: PPUSH
29690: CALL_OW 1
29694: ST_TO_ADDR
// end ;
29695: GO 29608
29697: POP
29698: POP
// array := tmp ;
29699: LD_ADDR_VAR 0 1
29703: PUSH
29704: LD_VAR 0 10
29708: ST_TO_ADDR
// end ;
29709: GO 29590
29711: POP
29712: POP
// result := array ;
29713: LD_ADDR_VAR 0 5
29717: PUSH
29718: LD_VAR 0 1
29722: ST_TO_ADDR
// end ;
29723: LD_VAR 0 5
29727: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29728: LD_INT 0
29730: PPUSH
29731: PPUSH
// result := 0 ;
29732: LD_ADDR_VAR 0 3
29736: PUSH
29737: LD_INT 0
29739: ST_TO_ADDR
// if not array or not value in array then
29740: LD_VAR 0 1
29744: NOT
29745: PUSH
29746: LD_VAR 0 2
29750: PUSH
29751: LD_VAR 0 1
29755: IN
29756: NOT
29757: OR
29758: IFFALSE 29762
// exit ;
29760: GO 29816
// for i = 1 to array do
29762: LD_ADDR_VAR 0 4
29766: PUSH
29767: DOUBLE
29768: LD_INT 1
29770: DEC
29771: ST_TO_ADDR
29772: LD_VAR 0 1
29776: PUSH
29777: FOR_TO
29778: IFFALSE 29814
// if value = array [ i ] then
29780: LD_VAR 0 2
29784: PUSH
29785: LD_VAR 0 1
29789: PUSH
29790: LD_VAR 0 4
29794: ARRAY
29795: EQUAL
29796: IFFALSE 29812
// begin result := i ;
29798: LD_ADDR_VAR 0 3
29802: PUSH
29803: LD_VAR 0 4
29807: ST_TO_ADDR
// exit ;
29808: POP
29809: POP
29810: GO 29816
// end ;
29812: GO 29777
29814: POP
29815: POP
// end ;
29816: LD_VAR 0 3
29820: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29821: LD_INT 0
29823: PPUSH
// vc_chassis := chassis ;
29824: LD_ADDR_OWVAR 37
29828: PUSH
29829: LD_VAR 0 1
29833: ST_TO_ADDR
// vc_engine := engine ;
29834: LD_ADDR_OWVAR 39
29838: PUSH
29839: LD_VAR 0 2
29843: ST_TO_ADDR
// vc_control := control ;
29844: LD_ADDR_OWVAR 38
29848: PUSH
29849: LD_VAR 0 3
29853: ST_TO_ADDR
// vc_weapon := weapon ;
29854: LD_ADDR_OWVAR 40
29858: PUSH
29859: LD_VAR 0 4
29863: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29864: LD_ADDR_OWVAR 41
29868: PUSH
29869: LD_VAR 0 5
29873: ST_TO_ADDR
// end ;
29874: LD_VAR 0 6
29878: RET
// export function WantPlant ( unit ) ; var task ; begin
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
// result := false ;
29883: LD_ADDR_VAR 0 2
29887: PUSH
29888: LD_INT 0
29890: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29891: LD_ADDR_VAR 0 3
29895: PUSH
29896: LD_VAR 0 1
29900: PPUSH
29901: CALL_OW 437
29905: ST_TO_ADDR
// if task then
29906: LD_VAR 0 3
29910: IFFALSE 29938
// if task [ 1 ] [ 1 ] = p then
29912: LD_VAR 0 3
29916: PUSH
29917: LD_INT 1
29919: ARRAY
29920: PUSH
29921: LD_INT 1
29923: ARRAY
29924: PUSH
29925: LD_STRING p
29927: EQUAL
29928: IFFALSE 29938
// result := true ;
29930: LD_ADDR_VAR 0 2
29934: PUSH
29935: LD_INT 1
29937: ST_TO_ADDR
// end ;
29938: LD_VAR 0 2
29942: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29943: LD_INT 0
29945: PPUSH
29946: PPUSH
29947: PPUSH
29948: PPUSH
// if pos < 1 then
29949: LD_VAR 0 2
29953: PUSH
29954: LD_INT 1
29956: LESS
29957: IFFALSE 29961
// exit ;
29959: GO 30264
// if pos = 1 then
29961: LD_VAR 0 2
29965: PUSH
29966: LD_INT 1
29968: EQUAL
29969: IFFALSE 30002
// result := Replace ( arr , pos [ 1 ] , value ) else
29971: LD_ADDR_VAR 0 4
29975: PUSH
29976: LD_VAR 0 1
29980: PPUSH
29981: LD_VAR 0 2
29985: PUSH
29986: LD_INT 1
29988: ARRAY
29989: PPUSH
29990: LD_VAR 0 3
29994: PPUSH
29995: CALL_OW 1
29999: ST_TO_ADDR
30000: GO 30264
// begin tmp := arr ;
30002: LD_ADDR_VAR 0 6
30006: PUSH
30007: LD_VAR 0 1
30011: ST_TO_ADDR
// s_arr := [ tmp ] ;
30012: LD_ADDR_VAR 0 7
30016: PUSH
30017: LD_VAR 0 6
30021: PUSH
30022: EMPTY
30023: LIST
30024: ST_TO_ADDR
// for i = 1 to pos - 1 do
30025: LD_ADDR_VAR 0 5
30029: PUSH
30030: DOUBLE
30031: LD_INT 1
30033: DEC
30034: ST_TO_ADDR
30035: LD_VAR 0 2
30039: PUSH
30040: LD_INT 1
30042: MINUS
30043: PUSH
30044: FOR_TO
30045: IFFALSE 30090
// begin tmp := tmp [ pos [ i ] ] ;
30047: LD_ADDR_VAR 0 6
30051: PUSH
30052: LD_VAR 0 6
30056: PUSH
30057: LD_VAR 0 2
30061: PUSH
30062: LD_VAR 0 5
30066: ARRAY
30067: ARRAY
30068: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30069: LD_ADDR_VAR 0 7
30073: PUSH
30074: LD_VAR 0 7
30078: PUSH
30079: LD_VAR 0 6
30083: PUSH
30084: EMPTY
30085: LIST
30086: ADD
30087: ST_TO_ADDR
// end ;
30088: GO 30044
30090: POP
30091: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30092: LD_ADDR_VAR 0 6
30096: PUSH
30097: LD_VAR 0 6
30101: PPUSH
30102: LD_VAR 0 2
30106: PUSH
30107: LD_VAR 0 2
30111: ARRAY
30112: PPUSH
30113: LD_VAR 0 3
30117: PPUSH
30118: CALL_OW 1
30122: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30123: LD_ADDR_VAR 0 7
30127: PUSH
30128: LD_VAR 0 7
30132: PPUSH
30133: LD_VAR 0 7
30137: PPUSH
30138: LD_VAR 0 6
30142: PPUSH
30143: CALL_OW 1
30147: ST_TO_ADDR
// for i = s_arr downto 2 do
30148: LD_ADDR_VAR 0 5
30152: PUSH
30153: DOUBLE
30154: LD_VAR 0 7
30158: INC
30159: ST_TO_ADDR
30160: LD_INT 2
30162: PUSH
30163: FOR_DOWNTO
30164: IFFALSE 30248
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30166: LD_ADDR_VAR 0 6
30170: PUSH
30171: LD_VAR 0 7
30175: PUSH
30176: LD_VAR 0 5
30180: PUSH
30181: LD_INT 1
30183: MINUS
30184: ARRAY
30185: PPUSH
30186: LD_VAR 0 2
30190: PUSH
30191: LD_VAR 0 5
30195: PUSH
30196: LD_INT 1
30198: MINUS
30199: ARRAY
30200: PPUSH
30201: LD_VAR 0 7
30205: PUSH
30206: LD_VAR 0 5
30210: ARRAY
30211: PPUSH
30212: CALL_OW 1
30216: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30217: LD_ADDR_VAR 0 7
30221: PUSH
30222: LD_VAR 0 7
30226: PPUSH
30227: LD_VAR 0 5
30231: PUSH
30232: LD_INT 1
30234: MINUS
30235: PPUSH
30236: LD_VAR 0 6
30240: PPUSH
30241: CALL_OW 1
30245: ST_TO_ADDR
// end ;
30246: GO 30163
30248: POP
30249: POP
// result := s_arr [ 1 ] ;
30250: LD_ADDR_VAR 0 4
30254: PUSH
30255: LD_VAR 0 7
30259: PUSH
30260: LD_INT 1
30262: ARRAY
30263: ST_TO_ADDR
// end ; end ;
30264: LD_VAR 0 4
30268: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30269: LD_INT 0
30271: PPUSH
30272: PPUSH
// if not list then
30273: LD_VAR 0 1
30277: NOT
30278: IFFALSE 30282
// exit ;
30280: GO 30373
// i := list [ pos1 ] ;
30282: LD_ADDR_VAR 0 5
30286: PUSH
30287: LD_VAR 0 1
30291: PUSH
30292: LD_VAR 0 2
30296: ARRAY
30297: ST_TO_ADDR
// if not i then
30298: LD_VAR 0 5
30302: NOT
30303: IFFALSE 30307
// exit ;
30305: GO 30373
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30307: LD_ADDR_VAR 0 1
30311: PUSH
30312: LD_VAR 0 1
30316: PPUSH
30317: LD_VAR 0 2
30321: PPUSH
30322: LD_VAR 0 1
30326: PUSH
30327: LD_VAR 0 3
30331: ARRAY
30332: PPUSH
30333: CALL_OW 1
30337: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30338: LD_ADDR_VAR 0 1
30342: PUSH
30343: LD_VAR 0 1
30347: PPUSH
30348: LD_VAR 0 3
30352: PPUSH
30353: LD_VAR 0 5
30357: PPUSH
30358: CALL_OW 1
30362: ST_TO_ADDR
// result := list ;
30363: LD_ADDR_VAR 0 4
30367: PUSH
30368: LD_VAR 0 1
30372: ST_TO_ADDR
// end ;
30373: LD_VAR 0 4
30377: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30378: LD_INT 0
30380: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30381: LD_ADDR_VAR 0 5
30385: PUSH
30386: LD_VAR 0 1
30390: PPUSH
30391: CALL_OW 250
30395: PPUSH
30396: LD_VAR 0 1
30400: PPUSH
30401: CALL_OW 251
30405: PPUSH
30406: LD_VAR 0 2
30410: PPUSH
30411: LD_VAR 0 3
30415: PPUSH
30416: LD_VAR 0 4
30420: PPUSH
30421: CALL 30431 0 5
30425: ST_TO_ADDR
// end ;
30426: LD_VAR 0 5
30430: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30431: LD_INT 0
30433: PPUSH
30434: PPUSH
30435: PPUSH
30436: PPUSH
// if not list then
30437: LD_VAR 0 3
30441: NOT
30442: IFFALSE 30446
// exit ;
30444: GO 30834
// result := [ ] ;
30446: LD_ADDR_VAR 0 6
30450: PUSH
30451: EMPTY
30452: ST_TO_ADDR
// for i in list do
30453: LD_ADDR_VAR 0 7
30457: PUSH
30458: LD_VAR 0 3
30462: PUSH
30463: FOR_IN
30464: IFFALSE 30666
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30466: LD_ADDR_VAR 0 9
30470: PUSH
30471: LD_VAR 0 7
30475: PPUSH
30476: LD_VAR 0 1
30480: PPUSH
30481: LD_VAR 0 2
30485: PPUSH
30486: CALL_OW 297
30490: ST_TO_ADDR
// if not result then
30491: LD_VAR 0 6
30495: NOT
30496: IFFALSE 30522
// result := [ [ i , tmp ] ] else
30498: LD_ADDR_VAR 0 6
30502: PUSH
30503: LD_VAR 0 7
30507: PUSH
30508: LD_VAR 0 9
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: PUSH
30517: EMPTY
30518: LIST
30519: ST_TO_ADDR
30520: GO 30664
// begin if result [ result ] [ 2 ] < tmp then
30522: LD_VAR 0 6
30526: PUSH
30527: LD_VAR 0 6
30531: ARRAY
30532: PUSH
30533: LD_INT 2
30535: ARRAY
30536: PUSH
30537: LD_VAR 0 9
30541: LESS
30542: IFFALSE 30584
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30544: LD_ADDR_VAR 0 6
30548: PUSH
30549: LD_VAR 0 6
30553: PPUSH
30554: LD_VAR 0 6
30558: PUSH
30559: LD_INT 1
30561: PLUS
30562: PPUSH
30563: LD_VAR 0 7
30567: PUSH
30568: LD_VAR 0 9
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PPUSH
30577: CALL_OW 2
30581: ST_TO_ADDR
30582: GO 30664
// for j = 1 to result do
30584: LD_ADDR_VAR 0 8
30588: PUSH
30589: DOUBLE
30590: LD_INT 1
30592: DEC
30593: ST_TO_ADDR
30594: LD_VAR 0 6
30598: PUSH
30599: FOR_TO
30600: IFFALSE 30662
// begin if tmp < result [ j ] [ 2 ] then
30602: LD_VAR 0 9
30606: PUSH
30607: LD_VAR 0 6
30611: PUSH
30612: LD_VAR 0 8
30616: ARRAY
30617: PUSH
30618: LD_INT 2
30620: ARRAY
30621: LESS
30622: IFFALSE 30660
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30624: LD_ADDR_VAR 0 6
30628: PUSH
30629: LD_VAR 0 6
30633: PPUSH
30634: LD_VAR 0 8
30638: PPUSH
30639: LD_VAR 0 7
30643: PUSH
30644: LD_VAR 0 9
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PPUSH
30653: CALL_OW 2
30657: ST_TO_ADDR
// break ;
30658: GO 30662
// end ; end ;
30660: GO 30599
30662: POP
30663: POP
// end ; end ;
30664: GO 30463
30666: POP
30667: POP
// if result and not asc then
30668: LD_VAR 0 6
30672: PUSH
30673: LD_VAR 0 4
30677: NOT
30678: AND
30679: IFFALSE 30754
// begin tmp := result ;
30681: LD_ADDR_VAR 0 9
30685: PUSH
30686: LD_VAR 0 6
30690: ST_TO_ADDR
// for i = tmp downto 1 do
30691: LD_ADDR_VAR 0 7
30695: PUSH
30696: DOUBLE
30697: LD_VAR 0 9
30701: INC
30702: ST_TO_ADDR
30703: LD_INT 1
30705: PUSH
30706: FOR_DOWNTO
30707: IFFALSE 30752
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30709: LD_ADDR_VAR 0 6
30713: PUSH
30714: LD_VAR 0 6
30718: PPUSH
30719: LD_VAR 0 9
30723: PUSH
30724: LD_VAR 0 7
30728: MINUS
30729: PUSH
30730: LD_INT 1
30732: PLUS
30733: PPUSH
30734: LD_VAR 0 9
30738: PUSH
30739: LD_VAR 0 7
30743: ARRAY
30744: PPUSH
30745: CALL_OW 1
30749: ST_TO_ADDR
30750: GO 30706
30752: POP
30753: POP
// end ; tmp := [ ] ;
30754: LD_ADDR_VAR 0 9
30758: PUSH
30759: EMPTY
30760: ST_TO_ADDR
// if mode then
30761: LD_VAR 0 5
30765: IFFALSE 30834
// begin for i = 1 to result do
30767: LD_ADDR_VAR 0 7
30771: PUSH
30772: DOUBLE
30773: LD_INT 1
30775: DEC
30776: ST_TO_ADDR
30777: LD_VAR 0 6
30781: PUSH
30782: FOR_TO
30783: IFFALSE 30822
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30785: LD_ADDR_VAR 0 9
30789: PUSH
30790: LD_VAR 0 9
30794: PPUSH
30795: LD_VAR 0 7
30799: PPUSH
30800: LD_VAR 0 6
30804: PUSH
30805: LD_VAR 0 7
30809: ARRAY
30810: PUSH
30811: LD_INT 1
30813: ARRAY
30814: PPUSH
30815: CALL_OW 1
30819: ST_TO_ADDR
30820: GO 30782
30822: POP
30823: POP
// result := tmp ;
30824: LD_ADDR_VAR 0 6
30828: PUSH
30829: LD_VAR 0 9
30833: ST_TO_ADDR
// end ; end ;
30834: LD_VAR 0 6
30838: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30839: LD_INT 0
30841: PPUSH
30842: PPUSH
30843: PPUSH
30844: PPUSH
30845: PPUSH
30846: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30847: LD_ADDR_VAR 0 5
30851: PUSH
30852: LD_INT 0
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: EMPTY
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: ST_TO_ADDR
// if not x or not y then
30869: LD_VAR 0 2
30873: NOT
30874: PUSH
30875: LD_VAR 0 3
30879: NOT
30880: OR
30881: IFFALSE 30885
// exit ;
30883: GO 32535
// if not range then
30885: LD_VAR 0 4
30889: NOT
30890: IFFALSE 30900
// range := 10 ;
30892: LD_ADDR_VAR 0 4
30896: PUSH
30897: LD_INT 10
30899: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30900: LD_ADDR_VAR 0 8
30904: PUSH
30905: LD_INT 81
30907: PUSH
30908: LD_VAR 0 1
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 92
30919: PUSH
30920: LD_VAR 0 2
30924: PUSH
30925: LD_VAR 0 3
30929: PUSH
30930: LD_VAR 0 4
30934: PUSH
30935: EMPTY
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 3
30943: PUSH
30944: LD_INT 21
30946: PUSH
30947: LD_INT 3
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: EMPTY
30955: LIST
30956: LIST
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: LIST
30962: PPUSH
30963: CALL_OW 69
30967: ST_TO_ADDR
// if not tmp then
30968: LD_VAR 0 8
30972: NOT
30973: IFFALSE 30977
// exit ;
30975: GO 32535
// for i in tmp do
30977: LD_ADDR_VAR 0 6
30981: PUSH
30982: LD_VAR 0 8
30986: PUSH
30987: FOR_IN
30988: IFFALSE 32510
// begin points := [ 0 , 0 , 0 ] ;
30990: LD_ADDR_VAR 0 9
30994: PUSH
30995: LD_INT 0
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: LIST
31008: ST_TO_ADDR
// bpoints := 1 ;
31009: LD_ADDR_VAR 0 10
31013: PUSH
31014: LD_INT 1
31016: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31017: LD_VAR 0 6
31021: PPUSH
31022: CALL_OW 247
31026: PUSH
31027: LD_INT 1
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 31613
31035: POP
// begin if GetClass ( i ) = 1 then
31036: LD_VAR 0 6
31040: PPUSH
31041: CALL_OW 257
31045: PUSH
31046: LD_INT 1
31048: EQUAL
31049: IFFALSE 31070
// points := [ 10 , 5 , 3 ] ;
31051: LD_ADDR_VAR 0 9
31055: PUSH
31056: LD_INT 10
31058: PUSH
31059: LD_INT 5
31061: PUSH
31062: LD_INT 3
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: LIST
31069: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31070: LD_VAR 0 6
31074: PPUSH
31075: CALL_OW 257
31079: PUSH
31080: LD_INT 2
31082: PUSH
31083: LD_INT 3
31085: PUSH
31086: LD_INT 4
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: IN
31094: IFFALSE 31115
// points := [ 3 , 2 , 1 ] ;
31096: LD_ADDR_VAR 0 9
31100: PUSH
31101: LD_INT 3
31103: PUSH
31104: LD_INT 2
31106: PUSH
31107: LD_INT 1
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: LIST
31114: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31115: LD_VAR 0 6
31119: PPUSH
31120: CALL_OW 257
31124: PUSH
31125: LD_INT 5
31127: EQUAL
31128: IFFALSE 31149
// points := [ 130 , 5 , 2 ] ;
31130: LD_ADDR_VAR 0 9
31134: PUSH
31135: LD_INT 130
31137: PUSH
31138: LD_INT 5
31140: PUSH
31141: LD_INT 2
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31149: LD_VAR 0 6
31153: PPUSH
31154: CALL_OW 257
31158: PUSH
31159: LD_INT 8
31161: EQUAL
31162: IFFALSE 31183
// points := [ 35 , 35 , 30 ] ;
31164: LD_ADDR_VAR 0 9
31168: PUSH
31169: LD_INT 35
31171: PUSH
31172: LD_INT 35
31174: PUSH
31175: LD_INT 30
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31183: LD_VAR 0 6
31187: PPUSH
31188: CALL_OW 257
31192: PUSH
31193: LD_INT 9
31195: EQUAL
31196: IFFALSE 31217
// points := [ 20 , 55 , 40 ] ;
31198: LD_ADDR_VAR 0 9
31202: PUSH
31203: LD_INT 20
31205: PUSH
31206: LD_INT 55
31208: PUSH
31209: LD_INT 40
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31217: LD_VAR 0 6
31221: PPUSH
31222: CALL_OW 257
31226: PUSH
31227: LD_INT 12
31229: PUSH
31230: LD_INT 16
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: IN
31237: IFFALSE 31258
// points := [ 5 , 3 , 2 ] ;
31239: LD_ADDR_VAR 0 9
31243: PUSH
31244: LD_INT 5
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: LIST
31257: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31258: LD_VAR 0 6
31262: PPUSH
31263: CALL_OW 257
31267: PUSH
31268: LD_INT 17
31270: EQUAL
31271: IFFALSE 31292
// points := [ 100 , 50 , 75 ] ;
31273: LD_ADDR_VAR 0 9
31277: PUSH
31278: LD_INT 100
31280: PUSH
31281: LD_INT 50
31283: PUSH
31284: LD_INT 75
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: LIST
31291: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31292: LD_VAR 0 6
31296: PPUSH
31297: CALL_OW 257
31301: PUSH
31302: LD_INT 15
31304: EQUAL
31305: IFFALSE 31326
// points := [ 10 , 5 , 3 ] ;
31307: LD_ADDR_VAR 0 9
31311: PUSH
31312: LD_INT 10
31314: PUSH
31315: LD_INT 5
31317: PUSH
31318: LD_INT 3
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31326: LD_VAR 0 6
31330: PPUSH
31331: CALL_OW 257
31335: PUSH
31336: LD_INT 14
31338: EQUAL
31339: IFFALSE 31360
// points := [ 10 , 0 , 0 ] ;
31341: LD_ADDR_VAR 0 9
31345: PUSH
31346: LD_INT 10
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31360: LD_VAR 0 6
31364: PPUSH
31365: CALL_OW 257
31369: PUSH
31370: LD_INT 11
31372: EQUAL
31373: IFFALSE 31394
// points := [ 30 , 10 , 5 ] ;
31375: LD_ADDR_VAR 0 9
31379: PUSH
31380: LD_INT 30
31382: PUSH
31383: LD_INT 10
31385: PUSH
31386: LD_INT 5
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: LIST
31393: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31394: LD_VAR 0 1
31398: PPUSH
31399: LD_INT 5
31401: PPUSH
31402: CALL_OW 321
31406: PUSH
31407: LD_INT 2
31409: EQUAL
31410: IFFALSE 31427
// bpoints := bpoints * 1.8 ;
31412: LD_ADDR_VAR 0 10
31416: PUSH
31417: LD_VAR 0 10
31421: PUSH
31422: LD_REAL  1.80000000000000E+0000
31425: MUL
31426: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31427: LD_VAR 0 6
31431: PPUSH
31432: CALL_OW 257
31436: PUSH
31437: LD_INT 1
31439: PUSH
31440: LD_INT 2
31442: PUSH
31443: LD_INT 3
31445: PUSH
31446: LD_INT 4
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: IN
31455: PUSH
31456: LD_VAR 0 1
31460: PPUSH
31461: LD_INT 51
31463: PPUSH
31464: CALL_OW 321
31468: PUSH
31469: LD_INT 2
31471: EQUAL
31472: AND
31473: IFFALSE 31490
// bpoints := bpoints * 1.2 ;
31475: LD_ADDR_VAR 0 10
31479: PUSH
31480: LD_VAR 0 10
31484: PUSH
31485: LD_REAL  1.20000000000000E+0000
31488: MUL
31489: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31490: LD_VAR 0 6
31494: PPUSH
31495: CALL_OW 257
31499: PUSH
31500: LD_INT 5
31502: PUSH
31503: LD_INT 7
31505: PUSH
31506: LD_INT 9
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: IN
31514: PUSH
31515: LD_VAR 0 1
31519: PPUSH
31520: LD_INT 52
31522: PPUSH
31523: CALL_OW 321
31527: PUSH
31528: LD_INT 2
31530: EQUAL
31531: AND
31532: IFFALSE 31549
// bpoints := bpoints * 1.5 ;
31534: LD_ADDR_VAR 0 10
31538: PUSH
31539: LD_VAR 0 10
31543: PUSH
31544: LD_REAL  1.50000000000000E+0000
31547: MUL
31548: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31549: LD_VAR 0 1
31553: PPUSH
31554: LD_INT 66
31556: PPUSH
31557: CALL_OW 321
31561: PUSH
31562: LD_INT 2
31564: EQUAL
31565: IFFALSE 31582
// bpoints := bpoints * 1.1 ;
31567: LD_ADDR_VAR 0 10
31571: PUSH
31572: LD_VAR 0 10
31576: PUSH
31577: LD_REAL  1.10000000000000E+0000
31580: MUL
31581: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31582: LD_ADDR_VAR 0 10
31586: PUSH
31587: LD_VAR 0 10
31591: PUSH
31592: LD_VAR 0 6
31596: PPUSH
31597: LD_INT 1
31599: PPUSH
31600: CALL_OW 259
31604: PUSH
31605: LD_REAL  1.15000000000000E+0000
31608: MUL
31609: MUL
31610: ST_TO_ADDR
// end ; unit_vehicle :
31611: GO 32439
31613: LD_INT 2
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 32427
31621: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31622: LD_VAR 0 6
31626: PPUSH
31627: CALL_OW 264
31631: PUSH
31632: LD_INT 2
31634: PUSH
31635: LD_INT 42
31637: PUSH
31638: LD_INT 24
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: LIST
31645: IN
31646: IFFALSE 31667
// points := [ 25 , 5 , 3 ] ;
31648: LD_ADDR_VAR 0 9
31652: PUSH
31653: LD_INT 25
31655: PUSH
31656: LD_INT 5
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31667: LD_VAR 0 6
31671: PPUSH
31672: CALL_OW 264
31676: PUSH
31677: LD_INT 4
31679: PUSH
31680: LD_INT 43
31682: PUSH
31683: LD_INT 25
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: LIST
31690: IN
31691: IFFALSE 31712
// points := [ 40 , 15 , 5 ] ;
31693: LD_ADDR_VAR 0 9
31697: PUSH
31698: LD_INT 40
31700: PUSH
31701: LD_INT 15
31703: PUSH
31704: LD_INT 5
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: LIST
31711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31712: LD_VAR 0 6
31716: PPUSH
31717: CALL_OW 264
31721: PUSH
31722: LD_INT 3
31724: PUSH
31725: LD_INT 23
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: IN
31732: IFFALSE 31753
// points := [ 7 , 25 , 8 ] ;
31734: LD_ADDR_VAR 0 9
31738: PUSH
31739: LD_INT 7
31741: PUSH
31742: LD_INT 25
31744: PUSH
31745: LD_INT 8
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31753: LD_VAR 0 6
31757: PPUSH
31758: CALL_OW 264
31762: PUSH
31763: LD_INT 5
31765: PUSH
31766: LD_INT 27
31768: PUSH
31769: LD_INT 44
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: IN
31777: IFFALSE 31798
// points := [ 14 , 50 , 16 ] ;
31779: LD_ADDR_VAR 0 9
31783: PUSH
31784: LD_INT 14
31786: PUSH
31787: LD_INT 50
31789: PUSH
31790: LD_INT 16
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: LIST
31797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31798: LD_VAR 0 6
31802: PPUSH
31803: CALL_OW 264
31807: PUSH
31808: LD_INT 6
31810: PUSH
31811: LD_INT 46
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: IN
31818: IFFALSE 31839
// points := [ 32 , 120 , 70 ] ;
31820: LD_ADDR_VAR 0 9
31824: PUSH
31825: LD_INT 32
31827: PUSH
31828: LD_INT 120
31830: PUSH
31831: LD_INT 70
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: LIST
31838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31839: LD_VAR 0 6
31843: PPUSH
31844: CALL_OW 264
31848: PUSH
31849: LD_INT 7
31851: PUSH
31852: LD_INT 28
31854: PUSH
31855: LD_INT 45
31857: PUSH
31858: LD_INT 92
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: IN
31867: IFFALSE 31888
// points := [ 35 , 20 , 45 ] ;
31869: LD_ADDR_VAR 0 9
31873: PUSH
31874: LD_INT 35
31876: PUSH
31877: LD_INT 20
31879: PUSH
31880: LD_INT 45
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31888: LD_VAR 0 6
31892: PPUSH
31893: CALL_OW 264
31897: PUSH
31898: LD_INT 47
31900: PUSH
31901: EMPTY
31902: LIST
31903: IN
31904: IFFALSE 31925
// points := [ 67 , 45 , 75 ] ;
31906: LD_ADDR_VAR 0 9
31910: PUSH
31911: LD_INT 67
31913: PUSH
31914: LD_INT 45
31916: PUSH
31917: LD_INT 75
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31925: LD_VAR 0 6
31929: PPUSH
31930: CALL_OW 264
31934: PUSH
31935: LD_INT 26
31937: PUSH
31938: EMPTY
31939: LIST
31940: IN
31941: IFFALSE 31962
// points := [ 120 , 30 , 80 ] ;
31943: LD_ADDR_VAR 0 9
31947: PUSH
31948: LD_INT 120
31950: PUSH
31951: LD_INT 30
31953: PUSH
31954: LD_INT 80
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31962: LD_VAR 0 6
31966: PPUSH
31967: CALL_OW 264
31971: PUSH
31972: LD_INT 22
31974: PUSH
31975: EMPTY
31976: LIST
31977: IN
31978: IFFALSE 31999
// points := [ 40 , 1 , 1 ] ;
31980: LD_ADDR_VAR 0 9
31984: PUSH
31985: LD_INT 40
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 1
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31999: LD_VAR 0 6
32003: PPUSH
32004: CALL_OW 264
32008: PUSH
32009: LD_INT 29
32011: PUSH
32012: EMPTY
32013: LIST
32014: IN
32015: IFFALSE 32036
// points := [ 70 , 200 , 400 ] ;
32017: LD_ADDR_VAR 0 9
32021: PUSH
32022: LD_INT 70
32024: PUSH
32025: LD_INT 200
32027: PUSH
32028: LD_INT 400
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32036: LD_VAR 0 6
32040: PPUSH
32041: CALL_OW 264
32045: PUSH
32046: LD_INT 14
32048: PUSH
32049: LD_INT 53
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: IN
32056: IFFALSE 32077
// points := [ 40 , 10 , 20 ] ;
32058: LD_ADDR_VAR 0 9
32062: PUSH
32063: LD_INT 40
32065: PUSH
32066: LD_INT 10
32068: PUSH
32069: LD_INT 20
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32077: LD_VAR 0 6
32081: PPUSH
32082: CALL_OW 264
32086: PUSH
32087: LD_INT 9
32089: PUSH
32090: EMPTY
32091: LIST
32092: IN
32093: IFFALSE 32114
// points := [ 5 , 70 , 20 ] ;
32095: LD_ADDR_VAR 0 9
32099: PUSH
32100: LD_INT 5
32102: PUSH
32103: LD_INT 70
32105: PUSH
32106: LD_INT 20
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: LIST
32113: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32114: LD_VAR 0 6
32118: PPUSH
32119: CALL_OW 264
32123: PUSH
32124: LD_INT 10
32126: PUSH
32127: EMPTY
32128: LIST
32129: IN
32130: IFFALSE 32151
// points := [ 35 , 110 , 70 ] ;
32132: LD_ADDR_VAR 0 9
32136: PUSH
32137: LD_INT 35
32139: PUSH
32140: LD_INT 110
32142: PUSH
32143: LD_INT 70
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32151: LD_VAR 0 6
32155: PPUSH
32156: CALL_OW 265
32160: PUSH
32161: LD_INT 25
32163: EQUAL
32164: IFFALSE 32185
// points := [ 80 , 65 , 100 ] ;
32166: LD_ADDR_VAR 0 9
32170: PUSH
32171: LD_INT 80
32173: PUSH
32174: LD_INT 65
32176: PUSH
32177: LD_INT 100
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: LIST
32184: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32185: LD_VAR 0 6
32189: PPUSH
32190: CALL_OW 263
32194: PUSH
32195: LD_INT 1
32197: EQUAL
32198: IFFALSE 32233
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32200: LD_ADDR_VAR 0 10
32204: PUSH
32205: LD_VAR 0 10
32209: PUSH
32210: LD_VAR 0 6
32214: PPUSH
32215: CALL_OW 311
32219: PPUSH
32220: LD_INT 3
32222: PPUSH
32223: CALL_OW 259
32227: PUSH
32228: LD_INT 4
32230: MUL
32231: MUL
32232: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32233: LD_VAR 0 6
32237: PPUSH
32238: CALL_OW 263
32242: PUSH
32243: LD_INT 2
32245: EQUAL
32246: IFFALSE 32297
// begin j := IsControledBy ( i ) ;
32248: LD_ADDR_VAR 0 7
32252: PUSH
32253: LD_VAR 0 6
32257: PPUSH
32258: CALL_OW 312
32262: ST_TO_ADDR
// if j then
32263: LD_VAR 0 7
32267: IFFALSE 32297
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32269: LD_ADDR_VAR 0 10
32273: PUSH
32274: LD_VAR 0 10
32278: PUSH
32279: LD_VAR 0 7
32283: PPUSH
32284: LD_INT 3
32286: PPUSH
32287: CALL_OW 259
32291: PUSH
32292: LD_INT 3
32294: MUL
32295: MUL
32296: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32297: LD_VAR 0 6
32301: PPUSH
32302: CALL_OW 264
32306: PUSH
32307: LD_INT 5
32309: PUSH
32310: LD_INT 6
32312: PUSH
32313: LD_INT 46
32315: PUSH
32316: LD_INT 44
32318: PUSH
32319: LD_INT 47
32321: PUSH
32322: LD_INT 45
32324: PUSH
32325: LD_INT 28
32327: PUSH
32328: LD_INT 7
32330: PUSH
32331: LD_INT 27
32333: PUSH
32334: LD_INT 29
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: IN
32349: PUSH
32350: LD_VAR 0 1
32354: PPUSH
32355: LD_INT 52
32357: PPUSH
32358: CALL_OW 321
32362: PUSH
32363: LD_INT 2
32365: EQUAL
32366: AND
32367: IFFALSE 32384
// bpoints := bpoints * 1.2 ;
32369: LD_ADDR_VAR 0 10
32373: PUSH
32374: LD_VAR 0 10
32378: PUSH
32379: LD_REAL  1.20000000000000E+0000
32382: MUL
32383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32384: LD_VAR 0 6
32388: PPUSH
32389: CALL_OW 264
32393: PUSH
32394: LD_INT 6
32396: PUSH
32397: LD_INT 46
32399: PUSH
32400: LD_INT 47
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: LIST
32407: IN
32408: IFFALSE 32425
// bpoints := bpoints * 1.2 ;
32410: LD_ADDR_VAR 0 10
32414: PUSH
32415: LD_VAR 0 10
32419: PUSH
32420: LD_REAL  1.20000000000000E+0000
32423: MUL
32424: ST_TO_ADDR
// end ; unit_building :
32425: GO 32439
32427: LD_INT 3
32429: DOUBLE
32430: EQUAL
32431: IFTRUE 32435
32433: GO 32438
32435: POP
// ; end ;
32436: GO 32439
32438: POP
// for j = 1 to 3 do
32439: LD_ADDR_VAR 0 7
32443: PUSH
32444: DOUBLE
32445: LD_INT 1
32447: DEC
32448: ST_TO_ADDR
32449: LD_INT 3
32451: PUSH
32452: FOR_TO
32453: IFFALSE 32506
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32455: LD_ADDR_VAR 0 5
32459: PUSH
32460: LD_VAR 0 5
32464: PPUSH
32465: LD_VAR 0 7
32469: PPUSH
32470: LD_VAR 0 5
32474: PUSH
32475: LD_VAR 0 7
32479: ARRAY
32480: PUSH
32481: LD_VAR 0 9
32485: PUSH
32486: LD_VAR 0 7
32490: ARRAY
32491: PUSH
32492: LD_VAR 0 10
32496: MUL
32497: PLUS
32498: PPUSH
32499: CALL_OW 1
32503: ST_TO_ADDR
32504: GO 32452
32506: POP
32507: POP
// end ;
32508: GO 30987
32510: POP
32511: POP
// result := Replace ( result , 4 , tmp ) ;
32512: LD_ADDR_VAR 0 5
32516: PUSH
32517: LD_VAR 0 5
32521: PPUSH
32522: LD_INT 4
32524: PPUSH
32525: LD_VAR 0 8
32529: PPUSH
32530: CALL_OW 1
32534: ST_TO_ADDR
// end ;
32535: LD_VAR 0 5
32539: RET
// export function DangerAtRange ( unit , range ) ; begin
32540: LD_INT 0
32542: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32543: LD_ADDR_VAR 0 3
32547: PUSH
32548: LD_VAR 0 1
32552: PPUSH
32553: CALL_OW 255
32557: PPUSH
32558: LD_VAR 0 1
32562: PPUSH
32563: CALL_OW 250
32567: PPUSH
32568: LD_VAR 0 1
32572: PPUSH
32573: CALL_OW 251
32577: PPUSH
32578: LD_VAR 0 2
32582: PPUSH
32583: CALL 30839 0 4
32587: ST_TO_ADDR
// end ;
32588: LD_VAR 0 3
32592: RET
// export function DangerInArea ( side , area ) ; begin
32593: LD_INT 0
32595: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32596: LD_ADDR_VAR 0 3
32600: PUSH
32601: LD_VAR 0 2
32605: PPUSH
32606: LD_INT 81
32608: PUSH
32609: LD_VAR 0 1
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PPUSH
32618: CALL_OW 70
32622: ST_TO_ADDR
// end ;
32623: LD_VAR 0 3
32627: RET
// export function IsExtension ( b ) ; begin
32628: LD_INT 0
32630: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32631: LD_ADDR_VAR 0 2
32635: PUSH
32636: LD_VAR 0 1
32640: PUSH
32641: LD_INT 23
32643: PUSH
32644: LD_INT 20
32646: PUSH
32647: LD_INT 22
32649: PUSH
32650: LD_INT 17
32652: PUSH
32653: LD_INT 24
32655: PUSH
32656: LD_INT 21
32658: PUSH
32659: LD_INT 19
32661: PUSH
32662: LD_INT 16
32664: PUSH
32665: LD_INT 25
32667: PUSH
32668: LD_INT 18
32670: PUSH
32671: EMPTY
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: IN
32683: ST_TO_ADDR
// end ;
32684: LD_VAR 0 2
32688: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32689: LD_INT 0
32691: PPUSH
32692: PPUSH
32693: PPUSH
// result := [ ] ;
32694: LD_ADDR_VAR 0 4
32698: PUSH
32699: EMPTY
32700: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32701: LD_ADDR_VAR 0 5
32705: PUSH
32706: LD_VAR 0 2
32710: PPUSH
32711: LD_INT 21
32713: PUSH
32714: LD_INT 3
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: PPUSH
32721: CALL_OW 70
32725: ST_TO_ADDR
// if not tmp then
32726: LD_VAR 0 5
32730: NOT
32731: IFFALSE 32735
// exit ;
32733: GO 32799
// if checkLink then
32735: LD_VAR 0 3
32739: IFFALSE 32789
// begin for i in tmp do
32741: LD_ADDR_VAR 0 6
32745: PUSH
32746: LD_VAR 0 5
32750: PUSH
32751: FOR_IN
32752: IFFALSE 32787
// if GetBase ( i ) <> base then
32754: LD_VAR 0 6
32758: PPUSH
32759: CALL_OW 274
32763: PUSH
32764: LD_VAR 0 1
32768: NONEQUAL
32769: IFFALSE 32785
// ComLinkToBase ( base , i ) ;
32771: LD_VAR 0 1
32775: PPUSH
32776: LD_VAR 0 6
32780: PPUSH
32781: CALL_OW 169
32785: GO 32751
32787: POP
32788: POP
// end ; result := tmp ;
32789: LD_ADDR_VAR 0 4
32793: PUSH
32794: LD_VAR 0 5
32798: ST_TO_ADDR
// end ;
32799: LD_VAR 0 4
32803: RET
// export function ComComplete ( units , b ) ; var i ; begin
32804: LD_INT 0
32806: PPUSH
32807: PPUSH
// if not units then
32808: LD_VAR 0 1
32812: NOT
32813: IFFALSE 32817
// exit ;
32815: GO 32907
// for i in units do
32817: LD_ADDR_VAR 0 4
32821: PUSH
32822: LD_VAR 0 1
32826: PUSH
32827: FOR_IN
32828: IFFALSE 32905
// if BuildingStatus ( b ) = bs_build then
32830: LD_VAR 0 2
32834: PPUSH
32835: CALL_OW 461
32839: PUSH
32840: LD_INT 1
32842: EQUAL
32843: IFFALSE 32903
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32845: LD_VAR 0 4
32849: PPUSH
32850: LD_STRING h
32852: PUSH
32853: LD_VAR 0 2
32857: PPUSH
32858: CALL_OW 250
32862: PUSH
32863: LD_VAR 0 2
32867: PPUSH
32868: CALL_OW 251
32872: PUSH
32873: LD_VAR 0 2
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: LD_INT 0
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: PPUSH
32899: CALL_OW 446
32903: GO 32827
32905: POP
32906: POP
// end ;
32907: LD_VAR 0 3
32911: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32912: LD_INT 0
32914: PPUSH
32915: PPUSH
32916: PPUSH
32917: PPUSH
32918: PPUSH
32919: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32920: LD_VAR 0 1
32924: NOT
32925: PUSH
32926: LD_VAR 0 1
32930: PPUSH
32931: CALL_OW 263
32935: PUSH
32936: LD_INT 2
32938: NONEQUAL
32939: OR
32940: IFFALSE 32944
// exit ;
32942: GO 33260
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32944: LD_ADDR_VAR 0 6
32948: PUSH
32949: LD_INT 22
32951: PUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 255
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 2
32968: PUSH
32969: LD_INT 30
32971: PUSH
32972: LD_INT 36
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 34
32981: PUSH
32982: LD_INT 31
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PPUSH
32998: CALL_OW 69
33002: ST_TO_ADDR
// if not tmp then
33003: LD_VAR 0 6
33007: NOT
33008: IFFALSE 33012
// exit ;
33010: GO 33260
// result := [ ] ;
33012: LD_ADDR_VAR 0 2
33016: PUSH
33017: EMPTY
33018: ST_TO_ADDR
// for i in tmp do
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: LD_VAR 0 6
33028: PUSH
33029: FOR_IN
33030: IFFALSE 33101
// begin t := UnitsInside ( i ) ;
33032: LD_ADDR_VAR 0 4
33036: PUSH
33037: LD_VAR 0 3
33041: PPUSH
33042: CALL_OW 313
33046: ST_TO_ADDR
// if t then
33047: LD_VAR 0 4
33051: IFFALSE 33099
// for j in t do
33053: LD_ADDR_VAR 0 7
33057: PUSH
33058: LD_VAR 0 4
33062: PUSH
33063: FOR_IN
33064: IFFALSE 33097
// result := Replace ( result , result + 1 , j ) ;
33066: LD_ADDR_VAR 0 2
33070: PUSH
33071: LD_VAR 0 2
33075: PPUSH
33076: LD_VAR 0 2
33080: PUSH
33081: LD_INT 1
33083: PLUS
33084: PPUSH
33085: LD_VAR 0 7
33089: PPUSH
33090: CALL_OW 1
33094: ST_TO_ADDR
33095: GO 33063
33097: POP
33098: POP
// end ;
33099: GO 33029
33101: POP
33102: POP
// if not result then
33103: LD_VAR 0 2
33107: NOT
33108: IFFALSE 33112
// exit ;
33110: GO 33260
// mech := result [ 1 ] ;
33112: LD_ADDR_VAR 0 5
33116: PUSH
33117: LD_VAR 0 2
33121: PUSH
33122: LD_INT 1
33124: ARRAY
33125: ST_TO_ADDR
// if result > 1 then
33126: LD_VAR 0 2
33130: PUSH
33131: LD_INT 1
33133: GREATER
33134: IFFALSE 33246
// begin for i = 2 to result do
33136: LD_ADDR_VAR 0 3
33140: PUSH
33141: DOUBLE
33142: LD_INT 2
33144: DEC
33145: ST_TO_ADDR
33146: LD_VAR 0 2
33150: PUSH
33151: FOR_TO
33152: IFFALSE 33244
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33154: LD_ADDR_VAR 0 4
33158: PUSH
33159: LD_VAR 0 2
33163: PUSH
33164: LD_VAR 0 3
33168: ARRAY
33169: PPUSH
33170: LD_INT 3
33172: PPUSH
33173: CALL_OW 259
33177: PUSH
33178: LD_VAR 0 2
33182: PUSH
33183: LD_VAR 0 3
33187: ARRAY
33188: PPUSH
33189: CALL_OW 432
33193: MINUS
33194: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33195: LD_VAR 0 4
33199: PUSH
33200: LD_VAR 0 5
33204: PPUSH
33205: LD_INT 3
33207: PPUSH
33208: CALL_OW 259
33212: PUSH
33213: LD_VAR 0 5
33217: PPUSH
33218: CALL_OW 432
33222: MINUS
33223: GREATEREQUAL
33224: IFFALSE 33242
// mech := result [ i ] ;
33226: LD_ADDR_VAR 0 5
33230: PUSH
33231: LD_VAR 0 2
33235: PUSH
33236: LD_VAR 0 3
33240: ARRAY
33241: ST_TO_ADDR
// end ;
33242: GO 33151
33244: POP
33245: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33246: LD_VAR 0 1
33250: PPUSH
33251: LD_VAR 0 5
33255: PPUSH
33256: CALL_OW 135
// end ;
33260: LD_VAR 0 2
33264: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33265: LD_INT 0
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
33271: PPUSH
33272: PPUSH
33273: PPUSH
33274: PPUSH
33275: PPUSH
33276: PPUSH
33277: PPUSH
33278: PPUSH
33279: PPUSH
// result := [ ] ;
33280: LD_ADDR_VAR 0 7
33284: PUSH
33285: EMPTY
33286: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33287: LD_VAR 0 1
33291: PPUSH
33292: CALL_OW 266
33296: PUSH
33297: LD_INT 0
33299: PUSH
33300: LD_INT 1
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: IN
33307: NOT
33308: IFFALSE 33312
// exit ;
33310: GO 34946
// if name then
33312: LD_VAR 0 3
33316: IFFALSE 33332
// SetBName ( base_dep , name ) ;
33318: LD_VAR 0 1
33322: PPUSH
33323: LD_VAR 0 3
33327: PPUSH
33328: CALL_OW 500
// base := GetBase ( base_dep ) ;
33332: LD_ADDR_VAR 0 15
33336: PUSH
33337: LD_VAR 0 1
33341: PPUSH
33342: CALL_OW 274
33346: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33347: LD_ADDR_VAR 0 16
33351: PUSH
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 255
33361: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33362: LD_ADDR_VAR 0 17
33366: PUSH
33367: LD_VAR 0 1
33371: PPUSH
33372: CALL_OW 248
33376: ST_TO_ADDR
// if sources then
33377: LD_VAR 0 5
33381: IFFALSE 33428
// for i = 1 to 3 do
33383: LD_ADDR_VAR 0 8
33387: PUSH
33388: DOUBLE
33389: LD_INT 1
33391: DEC
33392: ST_TO_ADDR
33393: LD_INT 3
33395: PUSH
33396: FOR_TO
33397: IFFALSE 33426
// AddResourceType ( base , i , sources [ i ] ) ;
33399: LD_VAR 0 15
33403: PPUSH
33404: LD_VAR 0 8
33408: PPUSH
33409: LD_VAR 0 5
33413: PUSH
33414: LD_VAR 0 8
33418: ARRAY
33419: PPUSH
33420: CALL_OW 276
33424: GO 33396
33426: POP
33427: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33428: LD_ADDR_VAR 0 18
33432: PUSH
33433: LD_VAR 0 15
33437: PPUSH
33438: LD_VAR 0 2
33442: PPUSH
33443: LD_INT 1
33445: PPUSH
33446: CALL 32689 0 3
33450: ST_TO_ADDR
// InitHc ;
33451: CALL_OW 19
// InitUc ;
33455: CALL_OW 18
// uc_side := side ;
33459: LD_ADDR_OWVAR 20
33463: PUSH
33464: LD_VAR 0 16
33468: ST_TO_ADDR
// uc_nation := nation ;
33469: LD_ADDR_OWVAR 21
33473: PUSH
33474: LD_VAR 0 17
33478: ST_TO_ADDR
// if buildings then
33479: LD_VAR 0 18
33483: IFFALSE 34805
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33485: LD_ADDR_VAR 0 19
33489: PUSH
33490: LD_VAR 0 18
33494: PPUSH
33495: LD_INT 2
33497: PUSH
33498: LD_INT 30
33500: PUSH
33501: LD_INT 29
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 30
33510: PUSH
33511: LD_INT 30
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: LIST
33522: PPUSH
33523: CALL_OW 72
33527: ST_TO_ADDR
// if tmp then
33528: LD_VAR 0 19
33532: IFFALSE 33580
// for i in tmp do
33534: LD_ADDR_VAR 0 8
33538: PUSH
33539: LD_VAR 0 19
33543: PUSH
33544: FOR_IN
33545: IFFALSE 33578
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33547: LD_VAR 0 8
33551: PPUSH
33552: CALL_OW 250
33556: PPUSH
33557: LD_VAR 0 8
33561: PPUSH
33562: CALL_OW 251
33566: PPUSH
33567: LD_VAR 0 16
33571: PPUSH
33572: CALL_OW 441
33576: GO 33544
33578: POP
33579: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33580: LD_VAR 0 18
33584: PPUSH
33585: LD_INT 2
33587: PUSH
33588: LD_INT 30
33590: PUSH
33591: LD_INT 32
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 30
33600: PUSH
33601: LD_INT 33
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: LIST
33612: PPUSH
33613: CALL_OW 72
33617: IFFALSE 33705
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33619: LD_ADDR_VAR 0 8
33623: PUSH
33624: LD_VAR 0 18
33628: PPUSH
33629: LD_INT 2
33631: PUSH
33632: LD_INT 30
33634: PUSH
33635: LD_INT 32
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 30
33644: PUSH
33645: LD_INT 33
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: PPUSH
33657: CALL_OW 72
33661: PUSH
33662: FOR_IN
33663: IFFALSE 33703
// begin if not GetBWeapon ( i ) then
33665: LD_VAR 0 8
33669: PPUSH
33670: CALL_OW 269
33674: NOT
33675: IFFALSE 33701
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33677: LD_VAR 0 8
33681: PPUSH
33682: LD_VAR 0 8
33686: PPUSH
33687: LD_VAR 0 2
33691: PPUSH
33692: CALL 34951 0 2
33696: PPUSH
33697: CALL_OW 431
// end ;
33701: GO 33662
33703: POP
33704: POP
// end ; for i = 1 to personel do
33705: LD_ADDR_VAR 0 8
33709: PUSH
33710: DOUBLE
33711: LD_INT 1
33713: DEC
33714: ST_TO_ADDR
33715: LD_VAR 0 6
33719: PUSH
33720: FOR_TO
33721: IFFALSE 34785
// begin if i > 4 then
33723: LD_VAR 0 8
33727: PUSH
33728: LD_INT 4
33730: GREATER
33731: IFFALSE 33735
// break ;
33733: GO 34785
// case i of 1 :
33735: LD_VAR 0 8
33739: PUSH
33740: LD_INT 1
33742: DOUBLE
33743: EQUAL
33744: IFTRUE 33748
33746: GO 33828
33748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33749: LD_ADDR_VAR 0 12
33753: PUSH
33754: LD_VAR 0 18
33758: PPUSH
33759: LD_INT 22
33761: PUSH
33762: LD_VAR 0 16
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 58
33773: PUSH
33774: EMPTY
33775: LIST
33776: PUSH
33777: LD_INT 2
33779: PUSH
33780: LD_INT 30
33782: PUSH
33783: LD_INT 32
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 30
33792: PUSH
33793: LD_INT 4
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 30
33802: PUSH
33803: LD_INT 5
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: LIST
33820: PPUSH
33821: CALL_OW 72
33825: ST_TO_ADDR
33826: GO 34050
33828: LD_INT 2
33830: DOUBLE
33831: EQUAL
33832: IFTRUE 33836
33834: GO 33898
33836: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33837: LD_ADDR_VAR 0 12
33841: PUSH
33842: LD_VAR 0 18
33846: PPUSH
33847: LD_INT 22
33849: PUSH
33850: LD_VAR 0 16
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 30
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 30
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PPUSH
33891: CALL_OW 72
33895: ST_TO_ADDR
33896: GO 34050
33898: LD_INT 3
33900: DOUBLE
33901: EQUAL
33902: IFTRUE 33906
33904: GO 33968
33906: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33907: LD_ADDR_VAR 0 12
33911: PUSH
33912: LD_VAR 0 18
33916: PPUSH
33917: LD_INT 22
33919: PUSH
33920: LD_VAR 0 16
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: PUSH
33932: LD_INT 30
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 30
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: LIST
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PPUSH
33961: CALL_OW 72
33965: ST_TO_ADDR
33966: GO 34050
33968: LD_INT 4
33970: DOUBLE
33971: EQUAL
33972: IFTRUE 33976
33974: GO 34049
33976: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33977: LD_ADDR_VAR 0 12
33981: PUSH
33982: LD_VAR 0 18
33986: PPUSH
33987: LD_INT 22
33989: PUSH
33990: LD_VAR 0 16
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 30
34004: PUSH
34005: LD_INT 6
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 30
34014: PUSH
34015: LD_INT 7
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 30
34024: PUSH
34025: LD_INT 8
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PPUSH
34042: CALL_OW 72
34046: ST_TO_ADDR
34047: GO 34050
34049: POP
// if i = 1 then
34050: LD_VAR 0 8
34054: PUSH
34055: LD_INT 1
34057: EQUAL
34058: IFFALSE 34169
// begin tmp := [ ] ;
34060: LD_ADDR_VAR 0 19
34064: PUSH
34065: EMPTY
34066: ST_TO_ADDR
// for j in f do
34067: LD_ADDR_VAR 0 9
34071: PUSH
34072: LD_VAR 0 12
34076: PUSH
34077: FOR_IN
34078: IFFALSE 34151
// if GetBType ( j ) = b_bunker then
34080: LD_VAR 0 9
34084: PPUSH
34085: CALL_OW 266
34089: PUSH
34090: LD_INT 32
34092: EQUAL
34093: IFFALSE 34120
// tmp := Insert ( tmp , 1 , j ) else
34095: LD_ADDR_VAR 0 19
34099: PUSH
34100: LD_VAR 0 19
34104: PPUSH
34105: LD_INT 1
34107: PPUSH
34108: LD_VAR 0 9
34112: PPUSH
34113: CALL_OW 2
34117: ST_TO_ADDR
34118: GO 34149
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34120: LD_ADDR_VAR 0 19
34124: PUSH
34125: LD_VAR 0 19
34129: PPUSH
34130: LD_VAR 0 19
34134: PUSH
34135: LD_INT 1
34137: PLUS
34138: PPUSH
34139: LD_VAR 0 9
34143: PPUSH
34144: CALL_OW 2
34148: ST_TO_ADDR
34149: GO 34077
34151: POP
34152: POP
// if tmp then
34153: LD_VAR 0 19
34157: IFFALSE 34169
// f := tmp ;
34159: LD_ADDR_VAR 0 12
34163: PUSH
34164: LD_VAR 0 19
34168: ST_TO_ADDR
// end ; x := personel [ i ] ;
34169: LD_ADDR_VAR 0 13
34173: PUSH
34174: LD_VAR 0 6
34178: PUSH
34179: LD_VAR 0 8
34183: ARRAY
34184: ST_TO_ADDR
// if x = - 1 then
34185: LD_VAR 0 13
34189: PUSH
34190: LD_INT 1
34192: NEG
34193: EQUAL
34194: IFFALSE 34403
// begin for j in f do
34196: LD_ADDR_VAR 0 9
34200: PUSH
34201: LD_VAR 0 12
34205: PUSH
34206: FOR_IN
34207: IFFALSE 34399
// repeat InitHc ;
34209: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34213: LD_VAR 0 9
34217: PPUSH
34218: CALL_OW 266
34222: PUSH
34223: LD_INT 5
34225: EQUAL
34226: IFFALSE 34296
// begin if UnitsInside ( j ) < 3 then
34228: LD_VAR 0 9
34232: PPUSH
34233: CALL_OW 313
34237: PUSH
34238: LD_INT 3
34240: LESS
34241: IFFALSE 34277
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34243: LD_INT 0
34245: PPUSH
34246: LD_INT 5
34248: PUSH
34249: LD_INT 8
34251: PUSH
34252: LD_INT 9
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: LIST
34259: PUSH
34260: LD_VAR 0 17
34264: ARRAY
34265: PPUSH
34266: LD_VAR 0 4
34270: PPUSH
34271: CALL_OW 380
34275: GO 34294
// PrepareHuman ( false , i , skill ) ;
34277: LD_INT 0
34279: PPUSH
34280: LD_VAR 0 8
34284: PPUSH
34285: LD_VAR 0 4
34289: PPUSH
34290: CALL_OW 380
// end else
34294: GO 34313
// PrepareHuman ( false , i , skill ) ;
34296: LD_INT 0
34298: PPUSH
34299: LD_VAR 0 8
34303: PPUSH
34304: LD_VAR 0 4
34308: PPUSH
34309: CALL_OW 380
// un := CreateHuman ;
34313: LD_ADDR_VAR 0 14
34317: PUSH
34318: CALL_OW 44
34322: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34323: LD_ADDR_VAR 0 7
34327: PUSH
34328: LD_VAR 0 7
34332: PPUSH
34333: LD_INT 1
34335: PPUSH
34336: LD_VAR 0 14
34340: PPUSH
34341: CALL_OW 2
34345: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34346: LD_VAR 0 14
34350: PPUSH
34351: LD_VAR 0 9
34355: PPUSH
34356: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34360: LD_VAR 0 9
34364: PPUSH
34365: CALL_OW 313
34369: PUSH
34370: LD_INT 6
34372: EQUAL
34373: PUSH
34374: LD_VAR 0 9
34378: PPUSH
34379: CALL_OW 266
34383: PUSH
34384: LD_INT 32
34386: PUSH
34387: LD_INT 31
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: IN
34394: OR
34395: IFFALSE 34209
34397: GO 34206
34399: POP
34400: POP
// end else
34401: GO 34783
// for j = 1 to x do
34403: LD_ADDR_VAR 0 9
34407: PUSH
34408: DOUBLE
34409: LD_INT 1
34411: DEC
34412: ST_TO_ADDR
34413: LD_VAR 0 13
34417: PUSH
34418: FOR_TO
34419: IFFALSE 34781
// begin InitHc ;
34421: CALL_OW 19
// if not f then
34425: LD_VAR 0 12
34429: NOT
34430: IFFALSE 34519
// begin PrepareHuman ( false , i , skill ) ;
34432: LD_INT 0
34434: PPUSH
34435: LD_VAR 0 8
34439: PPUSH
34440: LD_VAR 0 4
34444: PPUSH
34445: CALL_OW 380
// un := CreateHuman ;
34449: LD_ADDR_VAR 0 14
34453: PUSH
34454: CALL_OW 44
34458: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34459: LD_ADDR_VAR 0 7
34463: PUSH
34464: LD_VAR 0 7
34468: PPUSH
34469: LD_INT 1
34471: PPUSH
34472: LD_VAR 0 14
34476: PPUSH
34477: CALL_OW 2
34481: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34482: LD_VAR 0 14
34486: PPUSH
34487: LD_VAR 0 1
34491: PPUSH
34492: CALL_OW 250
34496: PPUSH
34497: LD_VAR 0 1
34501: PPUSH
34502: CALL_OW 251
34506: PPUSH
34507: LD_INT 10
34509: PPUSH
34510: LD_INT 0
34512: PPUSH
34513: CALL_OW 50
// continue ;
34517: GO 34418
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34519: LD_VAR 0 12
34523: PUSH
34524: LD_INT 1
34526: ARRAY
34527: PPUSH
34528: CALL_OW 313
34532: PUSH
34533: LD_VAR 0 12
34537: PUSH
34538: LD_INT 1
34540: ARRAY
34541: PPUSH
34542: CALL_OW 266
34546: PUSH
34547: LD_INT 32
34549: PUSH
34550: LD_INT 31
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: IN
34557: AND
34558: PUSH
34559: LD_VAR 0 12
34563: PUSH
34564: LD_INT 1
34566: ARRAY
34567: PPUSH
34568: CALL_OW 313
34572: PUSH
34573: LD_INT 6
34575: EQUAL
34576: OR
34577: IFFALSE 34597
// f := Delete ( f , 1 ) ;
34579: LD_ADDR_VAR 0 12
34583: PUSH
34584: LD_VAR 0 12
34588: PPUSH
34589: LD_INT 1
34591: PPUSH
34592: CALL_OW 3
34596: ST_TO_ADDR
// if not f then
34597: LD_VAR 0 12
34601: NOT
34602: IFFALSE 34620
// begin x := x + 2 ;
34604: LD_ADDR_VAR 0 13
34608: PUSH
34609: LD_VAR 0 13
34613: PUSH
34614: LD_INT 2
34616: PLUS
34617: ST_TO_ADDR
// continue ;
34618: GO 34418
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34620: LD_VAR 0 12
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: PPUSH
34629: CALL_OW 266
34633: PUSH
34634: LD_INT 5
34636: EQUAL
34637: IFFALSE 34711
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34639: LD_VAR 0 12
34643: PUSH
34644: LD_INT 1
34646: ARRAY
34647: PPUSH
34648: CALL_OW 313
34652: PUSH
34653: LD_INT 3
34655: LESS
34656: IFFALSE 34692
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34658: LD_INT 0
34660: PPUSH
34661: LD_INT 5
34663: PUSH
34664: LD_INT 8
34666: PUSH
34667: LD_INT 9
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: LIST
34674: PUSH
34675: LD_VAR 0 17
34679: ARRAY
34680: PPUSH
34681: LD_VAR 0 4
34685: PPUSH
34686: CALL_OW 380
34690: GO 34709
// PrepareHuman ( false , i , skill ) ;
34692: LD_INT 0
34694: PPUSH
34695: LD_VAR 0 8
34699: PPUSH
34700: LD_VAR 0 4
34704: PPUSH
34705: CALL_OW 380
// end else
34709: GO 34728
// PrepareHuman ( false , i , skill ) ;
34711: LD_INT 0
34713: PPUSH
34714: LD_VAR 0 8
34718: PPUSH
34719: LD_VAR 0 4
34723: PPUSH
34724: CALL_OW 380
// un := CreateHuman ;
34728: LD_ADDR_VAR 0 14
34732: PUSH
34733: CALL_OW 44
34737: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34738: LD_ADDR_VAR 0 7
34742: PUSH
34743: LD_VAR 0 7
34747: PPUSH
34748: LD_INT 1
34750: PPUSH
34751: LD_VAR 0 14
34755: PPUSH
34756: CALL_OW 2
34760: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34761: LD_VAR 0 14
34765: PPUSH
34766: LD_VAR 0 12
34770: PUSH
34771: LD_INT 1
34773: ARRAY
34774: PPUSH
34775: CALL_OW 52
// end ;
34779: GO 34418
34781: POP
34782: POP
// end ;
34783: GO 33720
34785: POP
34786: POP
// result := result ^ buildings ;
34787: LD_ADDR_VAR 0 7
34791: PUSH
34792: LD_VAR 0 7
34796: PUSH
34797: LD_VAR 0 18
34801: ADD
34802: ST_TO_ADDR
// end else
34803: GO 34946
// begin for i = 1 to personel do
34805: LD_ADDR_VAR 0 8
34809: PUSH
34810: DOUBLE
34811: LD_INT 1
34813: DEC
34814: ST_TO_ADDR
34815: LD_VAR 0 6
34819: PUSH
34820: FOR_TO
34821: IFFALSE 34944
// begin if i > 4 then
34823: LD_VAR 0 8
34827: PUSH
34828: LD_INT 4
34830: GREATER
34831: IFFALSE 34835
// break ;
34833: GO 34944
// x := personel [ i ] ;
34835: LD_ADDR_VAR 0 13
34839: PUSH
34840: LD_VAR 0 6
34844: PUSH
34845: LD_VAR 0 8
34849: ARRAY
34850: ST_TO_ADDR
// if x = - 1 then
34851: LD_VAR 0 13
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: EQUAL
34860: IFFALSE 34864
// continue ;
34862: GO 34820
// PrepareHuman ( false , i , skill ) ;
34864: LD_INT 0
34866: PPUSH
34867: LD_VAR 0 8
34871: PPUSH
34872: LD_VAR 0 4
34876: PPUSH
34877: CALL_OW 380
// un := CreateHuman ;
34881: LD_ADDR_VAR 0 14
34885: PUSH
34886: CALL_OW 44
34890: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34891: LD_VAR 0 14
34895: PPUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 250
34905: PPUSH
34906: LD_VAR 0 1
34910: PPUSH
34911: CALL_OW 251
34915: PPUSH
34916: LD_INT 10
34918: PPUSH
34919: LD_INT 0
34921: PPUSH
34922: CALL_OW 50
// result := result ^ un ;
34926: LD_ADDR_VAR 0 7
34930: PUSH
34931: LD_VAR 0 7
34935: PUSH
34936: LD_VAR 0 14
34940: ADD
34941: ST_TO_ADDR
// end ;
34942: GO 34820
34944: POP
34945: POP
// end ; end ;
34946: LD_VAR 0 7
34950: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34951: LD_INT 0
34953: PPUSH
34954: PPUSH
34955: PPUSH
34956: PPUSH
34957: PPUSH
34958: PPUSH
34959: PPUSH
34960: PPUSH
34961: PPUSH
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
34966: PPUSH
34967: PPUSH
34968: PPUSH
// result := false ;
34969: LD_ADDR_VAR 0 3
34973: PUSH
34974: LD_INT 0
34976: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34977: LD_VAR 0 1
34981: NOT
34982: PUSH
34983: LD_VAR 0 1
34987: PPUSH
34988: CALL_OW 266
34992: PUSH
34993: LD_INT 32
34995: PUSH
34996: LD_INT 33
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: IN
35003: NOT
35004: OR
35005: IFFALSE 35009
// exit ;
35007: GO 36118
// nat := GetNation ( tower ) ;
35009: LD_ADDR_VAR 0 12
35013: PUSH
35014: LD_VAR 0 1
35018: PPUSH
35019: CALL_OW 248
35023: ST_TO_ADDR
// side := GetSide ( tower ) ;
35024: LD_ADDR_VAR 0 16
35028: PUSH
35029: LD_VAR 0 1
35033: PPUSH
35034: CALL_OW 255
35038: ST_TO_ADDR
// x := GetX ( tower ) ;
35039: LD_ADDR_VAR 0 10
35043: PUSH
35044: LD_VAR 0 1
35048: PPUSH
35049: CALL_OW 250
35053: ST_TO_ADDR
// y := GetY ( tower ) ;
35054: LD_ADDR_VAR 0 11
35058: PUSH
35059: LD_VAR 0 1
35063: PPUSH
35064: CALL_OW 251
35068: ST_TO_ADDR
// if not x or not y then
35069: LD_VAR 0 10
35073: NOT
35074: PUSH
35075: LD_VAR 0 11
35079: NOT
35080: OR
35081: IFFALSE 35085
// exit ;
35083: GO 36118
// weapon := 0 ;
35085: LD_ADDR_VAR 0 18
35089: PUSH
35090: LD_INT 0
35092: ST_TO_ADDR
// fac_list := [ ] ;
35093: LD_ADDR_VAR 0 17
35097: PUSH
35098: EMPTY
35099: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35100: LD_ADDR_VAR 0 6
35104: PUSH
35105: LD_VAR 0 1
35109: PPUSH
35110: CALL_OW 274
35114: PPUSH
35115: LD_VAR 0 2
35119: PPUSH
35120: LD_INT 0
35122: PPUSH
35123: CALL 32689 0 3
35127: PPUSH
35128: LD_INT 30
35130: PUSH
35131: LD_INT 3
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PPUSH
35138: CALL_OW 72
35142: ST_TO_ADDR
// if not factories then
35143: LD_VAR 0 6
35147: NOT
35148: IFFALSE 35152
// exit ;
35150: GO 36118
// for i in factories do
35152: LD_ADDR_VAR 0 8
35156: PUSH
35157: LD_VAR 0 6
35161: PUSH
35162: FOR_IN
35163: IFFALSE 35188
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35165: LD_ADDR_VAR 0 17
35169: PUSH
35170: LD_VAR 0 17
35174: PUSH
35175: LD_VAR 0 8
35179: PPUSH
35180: CALL_OW 478
35184: UNION
35185: ST_TO_ADDR
35186: GO 35162
35188: POP
35189: POP
// if not fac_list then
35190: LD_VAR 0 17
35194: NOT
35195: IFFALSE 35199
// exit ;
35197: GO 36118
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35199: LD_ADDR_VAR 0 5
35203: PUSH
35204: LD_INT 4
35206: PUSH
35207: LD_INT 5
35209: PUSH
35210: LD_INT 9
35212: PUSH
35213: LD_INT 10
35215: PUSH
35216: LD_INT 6
35218: PUSH
35219: LD_INT 7
35221: PUSH
35222: LD_INT 11
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 27
35236: PUSH
35237: LD_INT 28
35239: PUSH
35240: LD_INT 26
35242: PUSH
35243: LD_INT 30
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 43
35254: PUSH
35255: LD_INT 44
35257: PUSH
35258: LD_INT 46
35260: PUSH
35261: LD_INT 45
35263: PUSH
35264: LD_INT 47
35266: PUSH
35267: LD_INT 49
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: PUSH
35283: LD_VAR 0 12
35287: ARRAY
35288: ST_TO_ADDR
// list := list isect fac_list ;
35289: LD_ADDR_VAR 0 5
35293: PUSH
35294: LD_VAR 0 5
35298: PUSH
35299: LD_VAR 0 17
35303: ISECT
35304: ST_TO_ADDR
// if not list then
35305: LD_VAR 0 5
35309: NOT
35310: IFFALSE 35314
// exit ;
35312: GO 36118
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35314: LD_VAR 0 12
35318: PUSH
35319: LD_INT 3
35321: EQUAL
35322: PUSH
35323: LD_INT 49
35325: PUSH
35326: LD_VAR 0 5
35330: IN
35331: AND
35332: PUSH
35333: LD_INT 31
35335: PPUSH
35336: LD_VAR 0 16
35340: PPUSH
35341: CALL_OW 321
35345: PUSH
35346: LD_INT 2
35348: EQUAL
35349: AND
35350: IFFALSE 35410
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35352: LD_INT 22
35354: PUSH
35355: LD_VAR 0 16
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 35
35366: PUSH
35367: LD_INT 49
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 91
35376: PUSH
35377: LD_VAR 0 1
35381: PUSH
35382: LD_INT 10
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: LIST
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: LIST
35394: PPUSH
35395: CALL_OW 69
35399: NOT
35400: IFFALSE 35410
// weapon := ru_time_lapser ;
35402: LD_ADDR_VAR 0 18
35406: PUSH
35407: LD_INT 49
35409: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35410: LD_VAR 0 12
35414: PUSH
35415: LD_INT 1
35417: PUSH
35418: LD_INT 2
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: IN
35425: PUSH
35426: LD_INT 11
35428: PUSH
35429: LD_VAR 0 5
35433: IN
35434: PUSH
35435: LD_INT 30
35437: PUSH
35438: LD_VAR 0 5
35442: IN
35443: OR
35444: AND
35445: PUSH
35446: LD_INT 6
35448: PPUSH
35449: LD_VAR 0 16
35453: PPUSH
35454: CALL_OW 321
35458: PUSH
35459: LD_INT 2
35461: EQUAL
35462: AND
35463: IFFALSE 35628
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35465: LD_INT 22
35467: PUSH
35468: LD_VAR 0 16
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 2
35479: PUSH
35480: LD_INT 35
35482: PUSH
35483: LD_INT 11
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 35
35492: PUSH
35493: LD_INT 30
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 91
35507: PUSH
35508: LD_VAR 0 1
35512: PUSH
35513: LD_INT 18
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: PPUSH
35526: CALL_OW 69
35530: NOT
35531: PUSH
35532: LD_INT 22
35534: PUSH
35535: LD_VAR 0 16
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: PUSH
35547: LD_INT 30
35549: PUSH
35550: LD_INT 32
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 30
35559: PUSH
35560: LD_INT 33
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 91
35574: PUSH
35575: LD_VAR 0 1
35579: PUSH
35580: LD_INT 12
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: LIST
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: PUSH
35593: EMPTY
35594: LIST
35595: PPUSH
35596: CALL_OW 69
35600: PUSH
35601: LD_INT 2
35603: GREATER
35604: AND
35605: IFFALSE 35628
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35607: LD_ADDR_VAR 0 18
35611: PUSH
35612: LD_INT 11
35614: PUSH
35615: LD_INT 30
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_VAR 0 12
35626: ARRAY
35627: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35628: LD_VAR 0 18
35632: NOT
35633: PUSH
35634: LD_INT 40
35636: PPUSH
35637: LD_VAR 0 16
35641: PPUSH
35642: CALL_OW 321
35646: PUSH
35647: LD_INT 2
35649: EQUAL
35650: AND
35651: PUSH
35652: LD_INT 7
35654: PUSH
35655: LD_VAR 0 5
35659: IN
35660: PUSH
35661: LD_INT 28
35663: PUSH
35664: LD_VAR 0 5
35668: IN
35669: OR
35670: PUSH
35671: LD_INT 45
35673: PUSH
35674: LD_VAR 0 5
35678: IN
35679: OR
35680: AND
35681: IFFALSE 35935
// begin hex := GetHexInfo ( x , y ) ;
35683: LD_ADDR_VAR 0 4
35687: PUSH
35688: LD_VAR 0 10
35692: PPUSH
35693: LD_VAR 0 11
35697: PPUSH
35698: CALL_OW 546
35702: ST_TO_ADDR
// if hex [ 1 ] then
35703: LD_VAR 0 4
35707: PUSH
35708: LD_INT 1
35710: ARRAY
35711: IFFALSE 35715
// exit ;
35713: GO 36118
// height := hex [ 2 ] ;
35715: LD_ADDR_VAR 0 15
35719: PUSH
35720: LD_VAR 0 4
35724: PUSH
35725: LD_INT 2
35727: ARRAY
35728: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35729: LD_ADDR_VAR 0 14
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: LD_INT 5
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: ST_TO_ADDR
// for i in tmp do
35752: LD_ADDR_VAR 0 8
35756: PUSH
35757: LD_VAR 0 14
35761: PUSH
35762: FOR_IN
35763: IFFALSE 35933
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35765: LD_ADDR_VAR 0 9
35769: PUSH
35770: LD_VAR 0 10
35774: PPUSH
35775: LD_VAR 0 8
35779: PPUSH
35780: LD_INT 5
35782: PPUSH
35783: CALL_OW 272
35787: PUSH
35788: LD_VAR 0 11
35792: PPUSH
35793: LD_VAR 0 8
35797: PPUSH
35798: LD_INT 5
35800: PPUSH
35801: CALL_OW 273
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35810: LD_VAR 0 9
35814: PUSH
35815: LD_INT 1
35817: ARRAY
35818: PPUSH
35819: LD_VAR 0 9
35823: PUSH
35824: LD_INT 2
35826: ARRAY
35827: PPUSH
35828: CALL_OW 488
35832: IFFALSE 35931
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35834: LD_ADDR_VAR 0 4
35838: PUSH
35839: LD_VAR 0 9
35843: PUSH
35844: LD_INT 1
35846: ARRAY
35847: PPUSH
35848: LD_VAR 0 9
35852: PUSH
35853: LD_INT 2
35855: ARRAY
35856: PPUSH
35857: CALL_OW 546
35861: ST_TO_ADDR
// if hex [ 1 ] then
35862: LD_VAR 0 4
35866: PUSH
35867: LD_INT 1
35869: ARRAY
35870: IFFALSE 35874
// continue ;
35872: GO 35762
// h := hex [ 2 ] ;
35874: LD_ADDR_VAR 0 13
35878: PUSH
35879: LD_VAR 0 4
35883: PUSH
35884: LD_INT 2
35886: ARRAY
35887: ST_TO_ADDR
// if h + 7 < height then
35888: LD_VAR 0 13
35892: PUSH
35893: LD_INT 7
35895: PLUS
35896: PUSH
35897: LD_VAR 0 15
35901: LESS
35902: IFFALSE 35931
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35904: LD_ADDR_VAR 0 18
35908: PUSH
35909: LD_INT 7
35911: PUSH
35912: LD_INT 28
35914: PUSH
35915: LD_INT 45
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_VAR 0 12
35927: ARRAY
35928: ST_TO_ADDR
// break ;
35929: GO 35933
// end ; end ; end ;
35931: GO 35762
35933: POP
35934: POP
// end ; if not weapon then
35935: LD_VAR 0 18
35939: NOT
35940: IFFALSE 36000
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35942: LD_ADDR_VAR 0 5
35946: PUSH
35947: LD_VAR 0 5
35951: PUSH
35952: LD_INT 11
35954: PUSH
35955: LD_INT 30
35957: PUSH
35958: LD_INT 49
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: LIST
35965: DIFF
35966: ST_TO_ADDR
// if not list then
35967: LD_VAR 0 5
35971: NOT
35972: IFFALSE 35976
// exit ;
35974: GO 36118
// weapon := list [ rand ( 1 , list ) ] ;
35976: LD_ADDR_VAR 0 18
35980: PUSH
35981: LD_VAR 0 5
35985: PUSH
35986: LD_INT 1
35988: PPUSH
35989: LD_VAR 0 5
35993: PPUSH
35994: CALL_OW 12
35998: ARRAY
35999: ST_TO_ADDR
// end ; if weapon then
36000: LD_VAR 0 18
36004: IFFALSE 36118
// begin tmp := CostOfWeapon ( weapon ) ;
36006: LD_ADDR_VAR 0 14
36010: PUSH
36011: LD_VAR 0 18
36015: PPUSH
36016: CALL_OW 451
36020: ST_TO_ADDR
// j := GetBase ( tower ) ;
36021: LD_ADDR_VAR 0 9
36025: PUSH
36026: LD_VAR 0 1
36030: PPUSH
36031: CALL_OW 274
36035: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36036: LD_VAR 0 9
36040: PPUSH
36041: LD_INT 1
36043: PPUSH
36044: CALL_OW 275
36048: PUSH
36049: LD_VAR 0 14
36053: PUSH
36054: LD_INT 1
36056: ARRAY
36057: GREATEREQUAL
36058: PUSH
36059: LD_VAR 0 9
36063: PPUSH
36064: LD_INT 2
36066: PPUSH
36067: CALL_OW 275
36071: PUSH
36072: LD_VAR 0 14
36076: PUSH
36077: LD_INT 2
36079: ARRAY
36080: GREATEREQUAL
36081: AND
36082: PUSH
36083: LD_VAR 0 9
36087: PPUSH
36088: LD_INT 3
36090: PPUSH
36091: CALL_OW 275
36095: PUSH
36096: LD_VAR 0 14
36100: PUSH
36101: LD_INT 3
36103: ARRAY
36104: GREATEREQUAL
36105: AND
36106: IFFALSE 36118
// result := weapon ;
36108: LD_ADDR_VAR 0 3
36112: PUSH
36113: LD_VAR 0 18
36117: ST_TO_ADDR
// end ; end ;
36118: LD_VAR 0 3
36122: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36123: LD_INT 0
36125: PPUSH
36126: PPUSH
// result := true ;
36127: LD_ADDR_VAR 0 3
36131: PUSH
36132: LD_INT 1
36134: ST_TO_ADDR
// if array1 = array2 then
36135: LD_VAR 0 1
36139: PUSH
36140: LD_VAR 0 2
36144: EQUAL
36145: IFFALSE 36205
// begin for i = 1 to array1 do
36147: LD_ADDR_VAR 0 4
36151: PUSH
36152: DOUBLE
36153: LD_INT 1
36155: DEC
36156: ST_TO_ADDR
36157: LD_VAR 0 1
36161: PUSH
36162: FOR_TO
36163: IFFALSE 36201
// if array1 [ i ] <> array2 [ i ] then
36165: LD_VAR 0 1
36169: PUSH
36170: LD_VAR 0 4
36174: ARRAY
36175: PUSH
36176: LD_VAR 0 2
36180: PUSH
36181: LD_VAR 0 4
36185: ARRAY
36186: NONEQUAL
36187: IFFALSE 36199
// begin result := false ;
36189: LD_ADDR_VAR 0 3
36193: PUSH
36194: LD_INT 0
36196: ST_TO_ADDR
// break ;
36197: GO 36201
// end ;
36199: GO 36162
36201: POP
36202: POP
// end else
36203: GO 36213
// result := false ;
36205: LD_ADDR_VAR 0 3
36209: PUSH
36210: LD_INT 0
36212: ST_TO_ADDR
// end ;
36213: LD_VAR 0 3
36217: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36218: LD_INT 0
36220: PPUSH
36221: PPUSH
// if not array1 or not array2 then
36222: LD_VAR 0 1
36226: NOT
36227: PUSH
36228: LD_VAR 0 2
36232: NOT
36233: OR
36234: IFFALSE 36238
// exit ;
36236: GO 36302
// result := true ;
36238: LD_ADDR_VAR 0 3
36242: PUSH
36243: LD_INT 1
36245: ST_TO_ADDR
// for i = 1 to array1 do
36246: LD_ADDR_VAR 0 4
36250: PUSH
36251: DOUBLE
36252: LD_INT 1
36254: DEC
36255: ST_TO_ADDR
36256: LD_VAR 0 1
36260: PUSH
36261: FOR_TO
36262: IFFALSE 36300
// if array1 [ i ] <> array2 [ i ] then
36264: LD_VAR 0 1
36268: PUSH
36269: LD_VAR 0 4
36273: ARRAY
36274: PUSH
36275: LD_VAR 0 2
36279: PUSH
36280: LD_VAR 0 4
36284: ARRAY
36285: NONEQUAL
36286: IFFALSE 36298
// begin result := false ;
36288: LD_ADDR_VAR 0 3
36292: PUSH
36293: LD_INT 0
36295: ST_TO_ADDR
// break ;
36296: GO 36300
// end ;
36298: GO 36261
36300: POP
36301: POP
// end ;
36302: LD_VAR 0 3
36306: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36307: LD_INT 0
36309: PPUSH
36310: PPUSH
36311: PPUSH
// pom := GetBase ( fac ) ;
36312: LD_ADDR_VAR 0 5
36316: PUSH
36317: LD_VAR 0 1
36321: PPUSH
36322: CALL_OW 274
36326: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36327: LD_ADDR_VAR 0 4
36331: PUSH
36332: LD_VAR 0 2
36336: PUSH
36337: LD_INT 1
36339: ARRAY
36340: PPUSH
36341: LD_VAR 0 2
36345: PUSH
36346: LD_INT 2
36348: ARRAY
36349: PPUSH
36350: LD_VAR 0 2
36354: PUSH
36355: LD_INT 3
36357: ARRAY
36358: PPUSH
36359: LD_VAR 0 2
36363: PUSH
36364: LD_INT 4
36366: ARRAY
36367: PPUSH
36368: CALL_OW 449
36372: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36373: LD_ADDR_VAR 0 3
36377: PUSH
36378: LD_VAR 0 5
36382: PPUSH
36383: LD_INT 1
36385: PPUSH
36386: CALL_OW 275
36390: PUSH
36391: LD_VAR 0 4
36395: PUSH
36396: LD_INT 1
36398: ARRAY
36399: GREATEREQUAL
36400: PUSH
36401: LD_VAR 0 5
36405: PPUSH
36406: LD_INT 2
36408: PPUSH
36409: CALL_OW 275
36413: PUSH
36414: LD_VAR 0 4
36418: PUSH
36419: LD_INT 2
36421: ARRAY
36422: GREATEREQUAL
36423: AND
36424: PUSH
36425: LD_VAR 0 5
36429: PPUSH
36430: LD_INT 3
36432: PPUSH
36433: CALL_OW 275
36437: PUSH
36438: LD_VAR 0 4
36442: PUSH
36443: LD_INT 3
36445: ARRAY
36446: GREATEREQUAL
36447: AND
36448: ST_TO_ADDR
// end ;
36449: LD_VAR 0 3
36453: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36454: LD_INT 0
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
// pom := GetBase ( building ) ;
36460: LD_ADDR_VAR 0 3
36464: PUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: CALL_OW 274
36474: ST_TO_ADDR
// if not pom then
36475: LD_VAR 0 3
36479: NOT
36480: IFFALSE 36484
// exit ;
36482: GO 36654
// btype := GetBType ( building ) ;
36484: LD_ADDR_VAR 0 5
36488: PUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 266
36498: ST_TO_ADDR
// if btype = b_armoury then
36499: LD_VAR 0 5
36503: PUSH
36504: LD_INT 4
36506: EQUAL
36507: IFFALSE 36517
// btype := b_barracks ;
36509: LD_ADDR_VAR 0 5
36513: PUSH
36514: LD_INT 5
36516: ST_TO_ADDR
// if btype = b_depot then
36517: LD_VAR 0 5
36521: PUSH
36522: LD_INT 0
36524: EQUAL
36525: IFFALSE 36535
// btype := b_warehouse ;
36527: LD_ADDR_VAR 0 5
36531: PUSH
36532: LD_INT 1
36534: ST_TO_ADDR
// if btype = b_workshop then
36535: LD_VAR 0 5
36539: PUSH
36540: LD_INT 2
36542: EQUAL
36543: IFFALSE 36553
// btype := b_factory ;
36545: LD_ADDR_VAR 0 5
36549: PUSH
36550: LD_INT 3
36552: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36553: LD_ADDR_VAR 0 4
36557: PUSH
36558: LD_VAR 0 5
36562: PPUSH
36563: LD_VAR 0 1
36567: PPUSH
36568: CALL_OW 248
36572: PPUSH
36573: CALL_OW 450
36577: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36578: LD_ADDR_VAR 0 2
36582: PUSH
36583: LD_VAR 0 3
36587: PPUSH
36588: LD_INT 1
36590: PPUSH
36591: CALL_OW 275
36595: PUSH
36596: LD_VAR 0 4
36600: PUSH
36601: LD_INT 1
36603: ARRAY
36604: GREATEREQUAL
36605: PUSH
36606: LD_VAR 0 3
36610: PPUSH
36611: LD_INT 2
36613: PPUSH
36614: CALL_OW 275
36618: PUSH
36619: LD_VAR 0 4
36623: PUSH
36624: LD_INT 2
36626: ARRAY
36627: GREATEREQUAL
36628: AND
36629: PUSH
36630: LD_VAR 0 3
36634: PPUSH
36635: LD_INT 3
36637: PPUSH
36638: CALL_OW 275
36642: PUSH
36643: LD_VAR 0 4
36647: PUSH
36648: LD_INT 3
36650: ARRAY
36651: GREATEREQUAL
36652: AND
36653: ST_TO_ADDR
// end ;
36654: LD_VAR 0 2
36658: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36659: LD_INT 0
36661: PPUSH
36662: PPUSH
36663: PPUSH
// pom := GetBase ( building ) ;
36664: LD_ADDR_VAR 0 4
36668: PUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 274
36678: ST_TO_ADDR
// if not pom then
36679: LD_VAR 0 4
36683: NOT
36684: IFFALSE 36688
// exit ;
36686: GO 36789
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36688: LD_ADDR_VAR 0 5
36692: PUSH
36693: LD_VAR 0 2
36697: PPUSH
36698: LD_VAR 0 1
36702: PPUSH
36703: CALL_OW 248
36707: PPUSH
36708: CALL_OW 450
36712: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36713: LD_ADDR_VAR 0 3
36717: PUSH
36718: LD_VAR 0 4
36722: PPUSH
36723: LD_INT 1
36725: PPUSH
36726: CALL_OW 275
36730: PUSH
36731: LD_VAR 0 5
36735: PUSH
36736: LD_INT 1
36738: ARRAY
36739: GREATEREQUAL
36740: PUSH
36741: LD_VAR 0 4
36745: PPUSH
36746: LD_INT 2
36748: PPUSH
36749: CALL_OW 275
36753: PUSH
36754: LD_VAR 0 5
36758: PUSH
36759: LD_INT 2
36761: ARRAY
36762: GREATEREQUAL
36763: AND
36764: PUSH
36765: LD_VAR 0 4
36769: PPUSH
36770: LD_INT 3
36772: PPUSH
36773: CALL_OW 275
36777: PUSH
36778: LD_VAR 0 5
36782: PUSH
36783: LD_INT 3
36785: ARRAY
36786: GREATEREQUAL
36787: AND
36788: ST_TO_ADDR
// end ;
36789: LD_VAR 0 3
36793: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36794: LD_INT 0
36796: PPUSH
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
36802: PPUSH
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
// result := false ;
36807: LD_ADDR_VAR 0 8
36811: PUSH
36812: LD_INT 0
36814: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36815: LD_VAR 0 5
36819: NOT
36820: PUSH
36821: LD_VAR 0 1
36825: NOT
36826: OR
36827: PUSH
36828: LD_VAR 0 2
36832: NOT
36833: OR
36834: PUSH
36835: LD_VAR 0 3
36839: NOT
36840: OR
36841: IFFALSE 36845
// exit ;
36843: GO 37659
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36845: LD_ADDR_VAR 0 14
36849: PUSH
36850: LD_VAR 0 1
36854: PPUSH
36855: LD_VAR 0 2
36859: PPUSH
36860: LD_VAR 0 3
36864: PPUSH
36865: LD_VAR 0 4
36869: PPUSH
36870: LD_VAR 0 5
36874: PUSH
36875: LD_INT 1
36877: ARRAY
36878: PPUSH
36879: CALL_OW 248
36883: PPUSH
36884: LD_INT 0
36886: PPUSH
36887: CALL 38892 0 6
36891: ST_TO_ADDR
// if not hexes then
36892: LD_VAR 0 14
36896: NOT
36897: IFFALSE 36901
// exit ;
36899: GO 37659
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36901: LD_ADDR_VAR 0 17
36905: PUSH
36906: LD_VAR 0 5
36910: PPUSH
36911: LD_INT 22
36913: PUSH
36914: LD_VAR 0 13
36918: PPUSH
36919: CALL_OW 255
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 30
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 30
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PPUSH
36960: CALL_OW 72
36964: ST_TO_ADDR
// for i = 1 to hexes do
36965: LD_ADDR_VAR 0 9
36969: PUSH
36970: DOUBLE
36971: LD_INT 1
36973: DEC
36974: ST_TO_ADDR
36975: LD_VAR 0 14
36979: PUSH
36980: FOR_TO
36981: IFFALSE 37657
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36983: LD_ADDR_VAR 0 13
36987: PUSH
36988: LD_VAR 0 14
36992: PUSH
36993: LD_VAR 0 9
36997: ARRAY
36998: PUSH
36999: LD_INT 1
37001: ARRAY
37002: PPUSH
37003: LD_VAR 0 14
37007: PUSH
37008: LD_VAR 0 9
37012: ARRAY
37013: PUSH
37014: LD_INT 2
37016: ARRAY
37017: PPUSH
37018: CALL_OW 428
37022: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37023: LD_VAR 0 14
37027: PUSH
37028: LD_VAR 0 9
37032: ARRAY
37033: PUSH
37034: LD_INT 1
37036: ARRAY
37037: PPUSH
37038: LD_VAR 0 14
37042: PUSH
37043: LD_VAR 0 9
37047: ARRAY
37048: PUSH
37049: LD_INT 2
37051: ARRAY
37052: PPUSH
37053: CALL_OW 351
37057: PUSH
37058: LD_VAR 0 14
37062: PUSH
37063: LD_VAR 0 9
37067: ARRAY
37068: PUSH
37069: LD_INT 1
37071: ARRAY
37072: PPUSH
37073: LD_VAR 0 14
37077: PUSH
37078: LD_VAR 0 9
37082: ARRAY
37083: PUSH
37084: LD_INT 2
37086: ARRAY
37087: PPUSH
37088: CALL_OW 488
37092: NOT
37093: OR
37094: PUSH
37095: LD_VAR 0 13
37099: PPUSH
37100: CALL_OW 247
37104: PUSH
37105: LD_INT 3
37107: EQUAL
37108: OR
37109: IFFALSE 37115
// exit ;
37111: POP
37112: POP
37113: GO 37659
// if not tmp then
37115: LD_VAR 0 13
37119: NOT
37120: IFFALSE 37124
// continue ;
37122: GO 36980
// result := true ;
37124: LD_ADDR_VAR 0 8
37128: PUSH
37129: LD_INT 1
37131: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37132: LD_VAR 0 6
37136: PUSH
37137: LD_VAR 0 13
37141: PPUSH
37142: CALL_OW 247
37146: PUSH
37147: LD_INT 2
37149: EQUAL
37150: AND
37151: PUSH
37152: LD_VAR 0 13
37156: PPUSH
37157: CALL_OW 263
37161: PUSH
37162: LD_INT 1
37164: EQUAL
37165: AND
37166: IFFALSE 37330
// begin if IsDrivenBy ( tmp ) then
37168: LD_VAR 0 13
37172: PPUSH
37173: CALL_OW 311
37177: IFFALSE 37181
// continue ;
37179: GO 36980
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37181: LD_VAR 0 6
37185: PPUSH
37186: LD_INT 3
37188: PUSH
37189: LD_INT 60
37191: PUSH
37192: EMPTY
37193: LIST
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 3
37201: PUSH
37202: LD_INT 55
37204: PUSH
37205: EMPTY
37206: LIST
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PPUSH
37216: CALL_OW 72
37220: IFFALSE 37328
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37222: LD_ADDR_VAR 0 18
37226: PUSH
37227: LD_VAR 0 6
37231: PPUSH
37232: LD_INT 3
37234: PUSH
37235: LD_INT 60
37237: PUSH
37238: EMPTY
37239: LIST
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 55
37250: PUSH
37251: EMPTY
37252: LIST
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: EMPTY
37259: LIST
37260: LIST
37261: PPUSH
37262: CALL_OW 72
37266: PUSH
37267: LD_INT 1
37269: ARRAY
37270: ST_TO_ADDR
// if IsInUnit ( driver ) then
37271: LD_VAR 0 18
37275: PPUSH
37276: CALL_OW 310
37280: IFFALSE 37291
// ComExit ( driver ) ;
37282: LD_VAR 0 18
37286: PPUSH
37287: CALL 62672 0 1
// AddComEnterUnit ( driver , tmp ) ;
37291: LD_VAR 0 18
37295: PPUSH
37296: LD_VAR 0 13
37300: PPUSH
37301: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37305: LD_VAR 0 18
37309: PPUSH
37310: LD_VAR 0 7
37314: PPUSH
37315: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37319: LD_VAR 0 18
37323: PPUSH
37324: CALL_OW 181
// end ; continue ;
37328: GO 36980
// end ; if not cleaners or not tmp in cleaners then
37330: LD_VAR 0 6
37334: NOT
37335: PUSH
37336: LD_VAR 0 13
37340: PUSH
37341: LD_VAR 0 6
37345: IN
37346: NOT
37347: OR
37348: IFFALSE 37655
// begin if dep then
37350: LD_VAR 0 17
37354: IFFALSE 37490
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37356: LD_ADDR_VAR 0 16
37360: PUSH
37361: LD_VAR 0 17
37365: PUSH
37366: LD_INT 1
37368: ARRAY
37369: PPUSH
37370: CALL_OW 250
37374: PPUSH
37375: LD_VAR 0 17
37379: PUSH
37380: LD_INT 1
37382: ARRAY
37383: PPUSH
37384: CALL_OW 254
37388: PPUSH
37389: LD_INT 5
37391: PPUSH
37392: CALL_OW 272
37396: PUSH
37397: LD_VAR 0 17
37401: PUSH
37402: LD_INT 1
37404: ARRAY
37405: PPUSH
37406: CALL_OW 251
37410: PPUSH
37411: LD_VAR 0 17
37415: PUSH
37416: LD_INT 1
37418: ARRAY
37419: PPUSH
37420: CALL_OW 254
37424: PPUSH
37425: LD_INT 5
37427: PPUSH
37428: CALL_OW 273
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37437: LD_VAR 0 16
37441: PUSH
37442: LD_INT 1
37444: ARRAY
37445: PPUSH
37446: LD_VAR 0 16
37450: PUSH
37451: LD_INT 2
37453: ARRAY
37454: PPUSH
37455: CALL_OW 488
37459: IFFALSE 37490
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37461: LD_VAR 0 13
37465: PPUSH
37466: LD_VAR 0 16
37470: PUSH
37471: LD_INT 1
37473: ARRAY
37474: PPUSH
37475: LD_VAR 0 16
37479: PUSH
37480: LD_INT 2
37482: ARRAY
37483: PPUSH
37484: CALL_OW 111
// continue ;
37488: GO 36980
// end ; end ; r := GetDir ( tmp ) ;
37490: LD_ADDR_VAR 0 15
37494: PUSH
37495: LD_VAR 0 13
37499: PPUSH
37500: CALL_OW 254
37504: ST_TO_ADDR
// if r = 5 then
37505: LD_VAR 0 15
37509: PUSH
37510: LD_INT 5
37512: EQUAL
37513: IFFALSE 37523
// r := 0 ;
37515: LD_ADDR_VAR 0 15
37519: PUSH
37520: LD_INT 0
37522: ST_TO_ADDR
// for j = r to 5 do
37523: LD_ADDR_VAR 0 10
37527: PUSH
37528: DOUBLE
37529: LD_VAR 0 15
37533: DEC
37534: ST_TO_ADDR
37535: LD_INT 5
37537: PUSH
37538: FOR_TO
37539: IFFALSE 37653
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37541: LD_ADDR_VAR 0 11
37545: PUSH
37546: LD_VAR 0 13
37550: PPUSH
37551: CALL_OW 250
37555: PPUSH
37556: LD_VAR 0 10
37560: PPUSH
37561: LD_INT 2
37563: PPUSH
37564: CALL_OW 272
37568: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37569: LD_ADDR_VAR 0 12
37573: PUSH
37574: LD_VAR 0 13
37578: PPUSH
37579: CALL_OW 251
37583: PPUSH
37584: LD_VAR 0 10
37588: PPUSH
37589: LD_INT 2
37591: PPUSH
37592: CALL_OW 273
37596: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37597: LD_VAR 0 11
37601: PPUSH
37602: LD_VAR 0 12
37606: PPUSH
37607: CALL_OW 488
37611: PUSH
37612: LD_VAR 0 11
37616: PPUSH
37617: LD_VAR 0 12
37621: PPUSH
37622: CALL_OW 428
37626: NOT
37627: AND
37628: IFFALSE 37651
// begin ComMoveXY ( tmp , _x , _y ) ;
37630: LD_VAR 0 13
37634: PPUSH
37635: LD_VAR 0 11
37639: PPUSH
37640: LD_VAR 0 12
37644: PPUSH
37645: CALL_OW 111
// break ;
37649: GO 37653
// end ; end ;
37651: GO 37538
37653: POP
37654: POP
// end ; end ;
37655: GO 36980
37657: POP
37658: POP
// end ;
37659: LD_VAR 0 8
37663: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37664: LD_INT 0
37666: PPUSH
// result := true ;
37667: LD_ADDR_VAR 0 3
37671: PUSH
37672: LD_INT 1
37674: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37675: LD_VAR 0 2
37679: PUSH
37680: LD_INT 24
37682: DOUBLE
37683: EQUAL
37684: IFTRUE 37694
37686: LD_INT 33
37688: DOUBLE
37689: EQUAL
37690: IFTRUE 37694
37692: GO 37719
37694: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37695: LD_ADDR_VAR 0 3
37699: PUSH
37700: LD_INT 32
37702: PPUSH
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 321
37712: PUSH
37713: LD_INT 2
37715: EQUAL
37716: ST_TO_ADDR
37717: GO 38035
37719: LD_INT 20
37721: DOUBLE
37722: EQUAL
37723: IFTRUE 37727
37725: GO 37752
37727: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37728: LD_ADDR_VAR 0 3
37732: PUSH
37733: LD_INT 6
37735: PPUSH
37736: LD_VAR 0 1
37740: PPUSH
37741: CALL_OW 321
37745: PUSH
37746: LD_INT 2
37748: EQUAL
37749: ST_TO_ADDR
37750: GO 38035
37752: LD_INT 22
37754: DOUBLE
37755: EQUAL
37756: IFTRUE 37766
37758: LD_INT 36
37760: DOUBLE
37761: EQUAL
37762: IFTRUE 37766
37764: GO 37791
37766: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37767: LD_ADDR_VAR 0 3
37771: PUSH
37772: LD_INT 15
37774: PPUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 321
37784: PUSH
37785: LD_INT 2
37787: EQUAL
37788: ST_TO_ADDR
37789: GO 38035
37791: LD_INT 30
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 37824
37799: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37800: LD_ADDR_VAR 0 3
37804: PUSH
37805: LD_INT 20
37807: PPUSH
37808: LD_VAR 0 1
37812: PPUSH
37813: CALL_OW 321
37817: PUSH
37818: LD_INT 2
37820: EQUAL
37821: ST_TO_ADDR
37822: GO 38035
37824: LD_INT 28
37826: DOUBLE
37827: EQUAL
37828: IFTRUE 37838
37830: LD_INT 21
37832: DOUBLE
37833: EQUAL
37834: IFTRUE 37838
37836: GO 37863
37838: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37839: LD_ADDR_VAR 0 3
37843: PUSH
37844: LD_INT 21
37846: PPUSH
37847: LD_VAR 0 1
37851: PPUSH
37852: CALL_OW 321
37856: PUSH
37857: LD_INT 2
37859: EQUAL
37860: ST_TO_ADDR
37861: GO 38035
37863: LD_INT 16
37865: DOUBLE
37866: EQUAL
37867: IFTRUE 37871
37869: GO 37896
37871: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37872: LD_ADDR_VAR 0 3
37876: PUSH
37877: LD_INT 84
37879: PPUSH
37880: LD_VAR 0 1
37884: PPUSH
37885: CALL_OW 321
37889: PUSH
37890: LD_INT 2
37892: EQUAL
37893: ST_TO_ADDR
37894: GO 38035
37896: LD_INT 19
37898: DOUBLE
37899: EQUAL
37900: IFTRUE 37910
37902: LD_INT 23
37904: DOUBLE
37905: EQUAL
37906: IFTRUE 37910
37908: GO 37935
37910: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37911: LD_ADDR_VAR 0 3
37915: PUSH
37916: LD_INT 83
37918: PPUSH
37919: LD_VAR 0 1
37923: PPUSH
37924: CALL_OW 321
37928: PUSH
37929: LD_INT 2
37931: EQUAL
37932: ST_TO_ADDR
37933: GO 38035
37935: LD_INT 17
37937: DOUBLE
37938: EQUAL
37939: IFTRUE 37943
37941: GO 37968
37943: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37944: LD_ADDR_VAR 0 3
37948: PUSH
37949: LD_INT 39
37951: PPUSH
37952: LD_VAR 0 1
37956: PPUSH
37957: CALL_OW 321
37961: PUSH
37962: LD_INT 2
37964: EQUAL
37965: ST_TO_ADDR
37966: GO 38035
37968: LD_INT 18
37970: DOUBLE
37971: EQUAL
37972: IFTRUE 37976
37974: GO 38001
37976: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37977: LD_ADDR_VAR 0 3
37981: PUSH
37982: LD_INT 40
37984: PPUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 321
37994: PUSH
37995: LD_INT 2
37997: EQUAL
37998: ST_TO_ADDR
37999: GO 38035
38001: LD_INT 27
38003: DOUBLE
38004: EQUAL
38005: IFTRUE 38009
38007: GO 38034
38009: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38010: LD_ADDR_VAR 0 3
38014: PUSH
38015: LD_INT 35
38017: PPUSH
38018: LD_VAR 0 1
38022: PPUSH
38023: CALL_OW 321
38027: PUSH
38028: LD_INT 2
38030: EQUAL
38031: ST_TO_ADDR
38032: GO 38035
38034: POP
// end ;
38035: LD_VAR 0 3
38039: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38040: LD_INT 0
38042: PPUSH
38043: PPUSH
38044: PPUSH
38045: PPUSH
38046: PPUSH
38047: PPUSH
38048: PPUSH
38049: PPUSH
38050: PPUSH
38051: PPUSH
38052: PPUSH
// result := false ;
38053: LD_ADDR_VAR 0 6
38057: PUSH
38058: LD_INT 0
38060: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38061: LD_VAR 0 1
38065: NOT
38066: PUSH
38067: LD_VAR 0 1
38071: PPUSH
38072: CALL_OW 266
38076: PUSH
38077: LD_INT 0
38079: PUSH
38080: LD_INT 1
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: IN
38087: NOT
38088: OR
38089: PUSH
38090: LD_VAR 0 2
38094: NOT
38095: OR
38096: PUSH
38097: LD_VAR 0 5
38101: PUSH
38102: LD_INT 0
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 2
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: LD_INT 4
38116: PUSH
38117: LD_INT 5
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: IN
38128: NOT
38129: OR
38130: PUSH
38131: LD_VAR 0 3
38135: PPUSH
38136: LD_VAR 0 4
38140: PPUSH
38141: CALL_OW 488
38145: NOT
38146: OR
38147: IFFALSE 38151
// exit ;
38149: GO 38887
// side := GetSide ( depot ) ;
38151: LD_ADDR_VAR 0 9
38155: PUSH
38156: LD_VAR 0 1
38160: PPUSH
38161: CALL_OW 255
38165: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38166: LD_VAR 0 9
38170: PPUSH
38171: LD_VAR 0 2
38175: PPUSH
38176: CALL 37664 0 2
38180: NOT
38181: IFFALSE 38185
// exit ;
38183: GO 38887
// pom := GetBase ( depot ) ;
38185: LD_ADDR_VAR 0 10
38189: PUSH
38190: LD_VAR 0 1
38194: PPUSH
38195: CALL_OW 274
38199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38200: LD_ADDR_VAR 0 11
38204: PUSH
38205: LD_VAR 0 2
38209: PPUSH
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 248
38219: PPUSH
38220: CALL_OW 450
38224: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38225: LD_VAR 0 10
38229: PPUSH
38230: LD_INT 1
38232: PPUSH
38233: CALL_OW 275
38237: PUSH
38238: LD_VAR 0 11
38242: PUSH
38243: LD_INT 1
38245: ARRAY
38246: GREATEREQUAL
38247: PUSH
38248: LD_VAR 0 10
38252: PPUSH
38253: LD_INT 2
38255: PPUSH
38256: CALL_OW 275
38260: PUSH
38261: LD_VAR 0 11
38265: PUSH
38266: LD_INT 2
38268: ARRAY
38269: GREATEREQUAL
38270: AND
38271: PUSH
38272: LD_VAR 0 10
38276: PPUSH
38277: LD_INT 3
38279: PPUSH
38280: CALL_OW 275
38284: PUSH
38285: LD_VAR 0 11
38289: PUSH
38290: LD_INT 3
38292: ARRAY
38293: GREATEREQUAL
38294: AND
38295: NOT
38296: IFFALSE 38300
// exit ;
38298: GO 38887
// if GetBType ( depot ) = b_depot then
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL_OW 266
38309: PUSH
38310: LD_INT 0
38312: EQUAL
38313: IFFALSE 38325
// dist := 28 else
38315: LD_ADDR_VAR 0 14
38319: PUSH
38320: LD_INT 28
38322: ST_TO_ADDR
38323: GO 38333
// dist := 36 ;
38325: LD_ADDR_VAR 0 14
38329: PUSH
38330: LD_INT 36
38332: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38333: LD_VAR 0 1
38337: PPUSH
38338: LD_VAR 0 3
38342: PPUSH
38343: LD_VAR 0 4
38347: PPUSH
38348: CALL_OW 297
38352: PUSH
38353: LD_VAR 0 14
38357: GREATER
38358: IFFALSE 38362
// exit ;
38360: GO 38887
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38362: LD_ADDR_VAR 0 12
38366: PUSH
38367: LD_VAR 0 2
38371: PPUSH
38372: LD_VAR 0 3
38376: PPUSH
38377: LD_VAR 0 4
38381: PPUSH
38382: LD_VAR 0 5
38386: PPUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL_OW 248
38396: PPUSH
38397: LD_INT 0
38399: PPUSH
38400: CALL 38892 0 6
38404: ST_TO_ADDR
// if not hexes then
38405: LD_VAR 0 12
38409: NOT
38410: IFFALSE 38414
// exit ;
38412: GO 38887
// hex := GetHexInfo ( x , y ) ;
38414: LD_ADDR_VAR 0 15
38418: PUSH
38419: LD_VAR 0 3
38423: PPUSH
38424: LD_VAR 0 4
38428: PPUSH
38429: CALL_OW 546
38433: ST_TO_ADDR
// if hex [ 1 ] then
38434: LD_VAR 0 15
38438: PUSH
38439: LD_INT 1
38441: ARRAY
38442: IFFALSE 38446
// exit ;
38444: GO 38887
// height := hex [ 2 ] ;
38446: LD_ADDR_VAR 0 13
38450: PUSH
38451: LD_VAR 0 15
38455: PUSH
38456: LD_INT 2
38458: ARRAY
38459: ST_TO_ADDR
// for i = 1 to hexes do
38460: LD_ADDR_VAR 0 7
38464: PUSH
38465: DOUBLE
38466: LD_INT 1
38468: DEC
38469: ST_TO_ADDR
38470: LD_VAR 0 12
38474: PUSH
38475: FOR_TO
38476: IFFALSE 38806
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38478: LD_VAR 0 12
38482: PUSH
38483: LD_VAR 0 7
38487: ARRAY
38488: PUSH
38489: LD_INT 1
38491: ARRAY
38492: PPUSH
38493: LD_VAR 0 12
38497: PUSH
38498: LD_VAR 0 7
38502: ARRAY
38503: PUSH
38504: LD_INT 2
38506: ARRAY
38507: PPUSH
38508: CALL_OW 488
38512: NOT
38513: PUSH
38514: LD_VAR 0 12
38518: PUSH
38519: LD_VAR 0 7
38523: ARRAY
38524: PUSH
38525: LD_INT 1
38527: ARRAY
38528: PPUSH
38529: LD_VAR 0 12
38533: PUSH
38534: LD_VAR 0 7
38538: ARRAY
38539: PUSH
38540: LD_INT 2
38542: ARRAY
38543: PPUSH
38544: CALL_OW 428
38548: PUSH
38549: LD_INT 0
38551: GREATER
38552: OR
38553: PUSH
38554: LD_VAR 0 12
38558: PUSH
38559: LD_VAR 0 7
38563: ARRAY
38564: PUSH
38565: LD_INT 1
38567: ARRAY
38568: PPUSH
38569: LD_VAR 0 12
38573: PUSH
38574: LD_VAR 0 7
38578: ARRAY
38579: PUSH
38580: LD_INT 2
38582: ARRAY
38583: PPUSH
38584: CALL_OW 351
38588: OR
38589: IFFALSE 38595
// exit ;
38591: POP
38592: POP
38593: GO 38887
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38595: LD_ADDR_VAR 0 8
38599: PUSH
38600: LD_VAR 0 12
38604: PUSH
38605: LD_VAR 0 7
38609: ARRAY
38610: PUSH
38611: LD_INT 1
38613: ARRAY
38614: PPUSH
38615: LD_VAR 0 12
38619: PUSH
38620: LD_VAR 0 7
38624: ARRAY
38625: PUSH
38626: LD_INT 2
38628: ARRAY
38629: PPUSH
38630: CALL_OW 546
38634: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38635: LD_VAR 0 8
38639: PUSH
38640: LD_INT 1
38642: ARRAY
38643: PUSH
38644: LD_VAR 0 8
38648: PUSH
38649: LD_INT 2
38651: ARRAY
38652: PUSH
38653: LD_VAR 0 13
38657: PUSH
38658: LD_INT 2
38660: PLUS
38661: GREATER
38662: OR
38663: PUSH
38664: LD_VAR 0 8
38668: PUSH
38669: LD_INT 2
38671: ARRAY
38672: PUSH
38673: LD_VAR 0 13
38677: PUSH
38678: LD_INT 2
38680: MINUS
38681: LESS
38682: OR
38683: PUSH
38684: LD_VAR 0 8
38688: PUSH
38689: LD_INT 3
38691: ARRAY
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: LD_INT 8
38698: PUSH
38699: LD_INT 9
38701: PUSH
38702: LD_INT 10
38704: PUSH
38705: LD_INT 11
38707: PUSH
38708: LD_INT 12
38710: PUSH
38711: LD_INT 13
38713: PUSH
38714: LD_INT 16
38716: PUSH
38717: LD_INT 17
38719: PUSH
38720: LD_INT 18
38722: PUSH
38723: LD_INT 19
38725: PUSH
38726: LD_INT 20
38728: PUSH
38729: LD_INT 21
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: IN
38747: NOT
38748: OR
38749: PUSH
38750: LD_VAR 0 8
38754: PUSH
38755: LD_INT 5
38757: ARRAY
38758: NOT
38759: OR
38760: PUSH
38761: LD_VAR 0 8
38765: PUSH
38766: LD_INT 6
38768: ARRAY
38769: PUSH
38770: LD_INT 1
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 7
38778: PUSH
38779: LD_INT 9
38781: PUSH
38782: LD_INT 10
38784: PUSH
38785: LD_INT 11
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: IN
38796: NOT
38797: OR
38798: IFFALSE 38804
// exit ;
38800: POP
38801: POP
38802: GO 38887
// end ;
38804: GO 38475
38806: POP
38807: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38808: LD_VAR 0 9
38812: PPUSH
38813: LD_VAR 0 3
38817: PPUSH
38818: LD_VAR 0 4
38822: PPUSH
38823: LD_INT 20
38825: PPUSH
38826: CALL 30839 0 4
38830: PUSH
38831: LD_INT 4
38833: ARRAY
38834: IFFALSE 38838
// exit ;
38836: GO 38887
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38838: LD_VAR 0 2
38842: PUSH
38843: LD_INT 29
38845: PUSH
38846: LD_INT 30
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: IN
38853: PUSH
38854: LD_VAR 0 3
38858: PPUSH
38859: LD_VAR 0 4
38863: PPUSH
38864: LD_VAR 0 9
38868: PPUSH
38869: CALL_OW 440
38873: NOT
38874: AND
38875: IFFALSE 38879
// exit ;
38877: GO 38887
// result := true ;
38879: LD_ADDR_VAR 0 6
38883: PUSH
38884: LD_INT 1
38886: ST_TO_ADDR
// end ;
38887: LD_VAR 0 6
38891: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38892: LD_INT 0
38894: PPUSH
38895: PPUSH
38896: PPUSH
38897: PPUSH
38898: PPUSH
38899: PPUSH
38900: PPUSH
38901: PPUSH
38902: PPUSH
38903: PPUSH
38904: PPUSH
38905: PPUSH
38906: PPUSH
38907: PPUSH
38908: PPUSH
38909: PPUSH
38910: PPUSH
38911: PPUSH
38912: PPUSH
38913: PPUSH
38914: PPUSH
38915: PPUSH
38916: PPUSH
38917: PPUSH
38918: PPUSH
38919: PPUSH
38920: PPUSH
38921: PPUSH
38922: PPUSH
38923: PPUSH
38924: PPUSH
38925: PPUSH
38926: PPUSH
38927: PPUSH
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
38941: PPUSH
38942: PPUSH
38943: PPUSH
38944: PPUSH
38945: PPUSH
38946: PPUSH
38947: PPUSH
38948: PPUSH
38949: PPUSH
38950: PPUSH
38951: PPUSH
// result = [ ] ;
38952: LD_ADDR_VAR 0 7
38956: PUSH
38957: EMPTY
38958: ST_TO_ADDR
// temp_list = [ ] ;
38959: LD_ADDR_VAR 0 9
38963: PUSH
38964: EMPTY
38965: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38966: LD_VAR 0 4
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: LD_INT 3
38982: PUSH
38983: LD_INT 4
38985: PUSH
38986: LD_INT 5
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: IN
38997: NOT
38998: PUSH
38999: LD_VAR 0 1
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 1
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: IN
39014: PUSH
39015: LD_VAR 0 5
39019: PUSH
39020: LD_INT 1
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 3
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: LIST
39033: IN
39034: NOT
39035: AND
39036: OR
39037: IFFALSE 39041
// exit ;
39039: GO 57432
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39041: LD_VAR 0 1
39045: PUSH
39046: LD_INT 6
39048: PUSH
39049: LD_INT 7
39051: PUSH
39052: LD_INT 8
39054: PUSH
39055: LD_INT 13
39057: PUSH
39058: LD_INT 12
39060: PUSH
39061: LD_INT 15
39063: PUSH
39064: LD_INT 11
39066: PUSH
39067: LD_INT 14
39069: PUSH
39070: LD_INT 10
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: IN
39084: IFFALSE 39094
// btype = b_lab ;
39086: LD_ADDR_VAR 0 1
39090: PUSH
39091: LD_INT 6
39093: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39094: LD_VAR 0 6
39098: PUSH
39099: LD_INT 0
39101: PUSH
39102: LD_INT 1
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: LIST
39112: IN
39113: NOT
39114: PUSH
39115: LD_VAR 0 1
39119: PUSH
39120: LD_INT 0
39122: PUSH
39123: LD_INT 1
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 3
39131: PUSH
39132: LD_INT 6
39134: PUSH
39135: LD_INT 36
39137: PUSH
39138: LD_INT 4
39140: PUSH
39141: LD_INT 5
39143: PUSH
39144: LD_INT 31
39146: PUSH
39147: LD_INT 32
39149: PUSH
39150: LD_INT 33
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: IN
39166: NOT
39167: PUSH
39168: LD_VAR 0 6
39172: PUSH
39173: LD_INT 1
39175: EQUAL
39176: AND
39177: OR
39178: PUSH
39179: LD_VAR 0 1
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 3
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: IN
39194: NOT
39195: PUSH
39196: LD_VAR 0 6
39200: PUSH
39201: LD_INT 2
39203: EQUAL
39204: AND
39205: OR
39206: IFFALSE 39216
// mode = 0 ;
39208: LD_ADDR_VAR 0 6
39212: PUSH
39213: LD_INT 0
39215: ST_TO_ADDR
// case mode of 0 :
39216: LD_VAR 0 6
39220: PUSH
39221: LD_INT 0
39223: DOUBLE
39224: EQUAL
39225: IFTRUE 39229
39227: GO 50682
39229: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39230: LD_ADDR_VAR 0 11
39234: PUSH
39235: LD_INT 0
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 1
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: NEG
39289: PUSH
39290: LD_INT 0
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: LD_INT 1
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: LD_INT 2
39315: NEG
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 2
39326: NEG
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: LD_INT 1
39337: NEG
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: PUSH
39346: LD_INT 2
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: LD_INT 2
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 1
39376: PUSH
39377: LD_INT 3
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PUSH
39384: LD_INT 0
39386: PUSH
39387: LD_INT 3
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: LD_INT 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39423: LD_ADDR_VAR 0 12
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 0
39440: PUSH
39441: LD_INT 1
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 2
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: PUSH
39523: LD_INT 2
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: LD_INT 0
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 2
39557: NEG
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: LD_INT 1
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: NEG
39581: PUSH
39582: LD_INT 0
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 3
39591: NEG
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39619: LD_ADDR_VAR 0 13
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 1
39639: NEG
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 1
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: NEG
39701: PUSH
39702: LD_INT 2
39704: NEG
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 1
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: NEG
39743: PUSH
39744: LD_INT 1
39746: NEG
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 2
39766: NEG
39767: PUSH
39768: LD_INT 3
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 3
39790: NEG
39791: PUSH
39792: LD_INT 3
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39818: LD_ADDR_VAR 0 14
39822: PUSH
39823: LD_INT 0
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: NEG
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: LD_INT 1
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 3
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 3
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40014: LD_ADDR_VAR 0 15
40018: PUSH
40019: LD_INT 0
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 0
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: LD_INT 1
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 3
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 3
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40207: LD_ADDR_VAR 0 16
40211: PUSH
40212: LD_INT 0
40214: PUSH
40215: LD_INT 0
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: LD_INT 1
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 1
40235: PUSH
40236: LD_INT 0
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 1
40245: PUSH
40246: LD_INT 1
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 1
40265: NEG
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 1
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 2
40300: PUSH
40301: LD_INT 1
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 2
40310: PUSH
40311: LD_INT 2
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 1
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 3
40354: PUSH
40355: LD_INT 2
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 3
40364: PUSH
40365: LD_INT 3
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 3
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40400: LD_ADDR_VAR 0 17
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 0
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: NEG
40470: PUSH
40471: LD_INT 1
40473: NEG
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: PUSH
40505: LD_INT 1
40507: NEG
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 1
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 0
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 1
40565: NEG
40566: PUSH
40567: LD_INT 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: LD_INT 1
40591: NEG
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 2
40599: NEG
40600: PUSH
40601: LD_INT 2
40603: NEG
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40630: LD_ADDR_VAR 0 18
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 1
40650: NEG
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 0
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: NEG
40712: PUSH
40713: LD_INT 2
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 2
40726: NEG
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 1
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 2
40817: NEG
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40860: LD_ADDR_VAR 0 19
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 1
40880: NEG
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 0
40953: PUSH
40954: LD_INT 2
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: PUSH
40976: LD_INT 0
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41090: LD_ADDR_VAR 0 20
41094: PUSH
41095: LD_INT 0
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 1
41110: NEG
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 1
41148: NEG
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 1
41159: NEG
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 1
41171: NEG
41172: PUSH
41173: LD_INT 2
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 0
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: LD_INT 0
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: LD_INT 2
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 1
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 0
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: NEG
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 2
41289: NEG
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41320: LD_ADDR_VAR 0 21
41324: PUSH
41325: LD_INT 0
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 0
41337: PUSH
41338: LD_INT 1
41340: NEG
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 1
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 0
41368: PUSH
41369: LD_INT 1
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 1
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 2
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 0
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: LD_INT 0
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 2
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 2
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 2
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41550: LD_ADDR_VAR 0 22
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 0
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: EMPTY
41614: LIST
41615: LIST
41616: PUSH
41617: LD_INT 1
41619: NEG
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 2
41635: NEG
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 2
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: LD_INT 1
41657: NEG
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 2
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 0
41705: PUSH
41706: LD_INT 2
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PUSH
41713: LD_INT 1
41715: NEG
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 2
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 2
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41780: LD_ADDR_VAR 0 23
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: NEG
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: LD_INT 1
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: NEG
41862: PUSH
41863: LD_INT 2
41865: NEG
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: LD_INT 2
41876: NEG
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 2
41895: PUSH
41896: LD_INT 0
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 1
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 1
41925: PUSH
41926: LD_INT 2
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 2
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 2
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 2
41991: NEG
41992: PUSH
41993: LD_INT 3
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: LD_INT 3
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: LD_INT 2
42018: NEG
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 2
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42060: LD_ADDR_VAR 0 24
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: LD_INT 1
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 2
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 0
42153: PUSH
42154: LD_INT 2
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 2
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 2
42185: PUSH
42186: LD_INT 1
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 2
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: NEG
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: LD_INT 2
42263: NEG
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 3
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 3
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42336: LD_ADDR_VAR 0 25
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: PUSH
42482: LD_INT 2
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: LD_INT 2
42494: PUSH
42495: EMPTY
42496: LIST
42497: LIST
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: LD_INT 1
42505: PUSH
42506: EMPTY
42507: LIST
42508: LIST
42509: PUSH
42510: LD_INT 2
42512: NEG
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 2
42535: NEG
42536: PUSH
42537: LD_INT 2
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 3
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: PUSH
42568: LD_INT 3
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 3
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42610: LD_ADDR_VAR 0 26
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 0
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 1
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 0
42658: PUSH
42659: LD_INT 1
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: NEG
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: PUSH
42715: LD_INT 1
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 2
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: PUSH
42736: LD_INT 1
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 2
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 2
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 0
42765: PUSH
42766: LD_INT 2
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 2
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 2
42809: NEG
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: LD_INT 2
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: NEG
42853: PUSH
42854: LD_INT 1
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42886: LD_ADDR_VAR 0 27
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 1
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 0
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: NEG
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 2
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 1
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: LD_INT 2
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 1
43031: PUSH
43032: LD_INT 2
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 2
43062: NEG
43063: PUSH
43064: LD_INT 0
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 2
43085: NEG
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 2
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 3
43119: NEG
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: NEG
43132: PUSH
43133: LD_INT 2
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43166: LD_ADDR_VAR 0 28
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: PUSH
43233: LD_INT 1
43235: NEG
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: NEG
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 0
43259: PUSH
43260: LD_INT 2
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 2
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 2
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: LD_INT 3
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 3
43401: NEG
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 3
43413: NEG
43414: PUSH
43415: LD_INT 2
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43448: LD_ADDR_VAR 0 29
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 0
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 2
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 2
43638: NEG
43639: PUSH
43640: LD_INT 3
43642: NEG
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 3
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: NEG
43682: PUSH
43683: LD_INT 2
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: LD_INT 2
43696: NEG
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: LIST
43710: LIST
43711: LIST
43712: LIST
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43727: LD_ADDR_VAR 0 30
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: EMPTY
43803: LIST
43804: LIST
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: LD_INT 2
43812: NEG
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 0
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 2
43904: NEG
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: LD_INT 3
43920: NEG
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 2
43949: PUSH
43950: LD_INT 3
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: NEG
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 3
43970: NEG
43971: PUSH
43972: LD_INT 1
43974: NEG
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44005: LD_ADDR_VAR 0 31
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 0
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: NEG
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: LD_INT 2
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 2
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 2
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 2
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: NEG
44195: PUSH
44196: LD_INT 3
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: LD_INT 1
44209: NEG
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: LD_INT 3
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 3
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44283: LD_ADDR_VAR 0 32
44287: PUSH
44288: LD_INT 0
44290: PUSH
44291: LD_INT 0
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 1
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: PUSH
44322: LD_INT 1
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 1
44341: NEG
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 1
44352: NEG
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 2
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 1
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 1
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: LD_INT 2
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 2
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 2
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 2
44449: NEG
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: LD_INT 3
44476: NEG
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 2
44505: PUSH
44506: LD_INT 3
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: NEG
44516: PUSH
44517: LD_INT 1
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 3
44526: NEG
44527: PUSH
44528: LD_INT 1
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44561: LD_ADDR_VAR 0 33
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 3
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 3
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: PUSH
44796: LD_INT 2
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: NEG
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44840: LD_ADDR_VAR 0 34
44844: PUSH
44845: LD_INT 0
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 0
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: LD_INT 1
44878: PUSH
44879: LD_INT 1
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: NEG
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 2
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 2
44965: PUSH
44966: LD_INT 2
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: LD_INT 0
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: LD_INT 1
45011: NEG
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 2
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: NEG
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 1
45031: NEG
45032: PUSH
45033: LD_INT 3
45035: NEG
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 2
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 3
45085: NEG
45086: PUSH
45087: LD_INT 1
45089: NEG
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45120: LD_ADDR_VAR 0 35
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 1
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 1
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 1
45178: NEG
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 1
45189: NEG
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 2
45211: NEG
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45232: LD_ADDR_VAR 0 36
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: NEG
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: NEG
45302: PUSH
45303: LD_INT 1
45305: NEG
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: LD_INT 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45344: LD_ADDR_VAR 0 37
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: LD_INT 0
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 0
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: NEG
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: LD_INT 1
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: NEG
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45456: LD_ADDR_VAR 0 38
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 1
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: NEG
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 2
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45568: LD_ADDR_VAR 0 39
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: PUSH
45597: LD_INT 0
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: LD_INT 1
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: NEG
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: NEG
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45680: LD_ADDR_VAR 0 40
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 1
45708: PUSH
45709: LD_INT 0
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: LD_INT 0
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 1
45749: NEG
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45792: LD_ADDR_VAR 0 41
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 1
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 2
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 2
45947: NEG
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 1
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 2
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 3
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: LD_INT 3
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: NEG
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: NEG
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 3
46089: NEG
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: NEG
46102: PUSH
46103: LD_INT 3
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46142: LD_ADDR_VAR 0 42
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: LD_INT 0
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 1
46200: NEG
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 2
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: LD_INT 2
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: LD_INT 2
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 0
46287: PUSH
46288: LD_INT 2
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: LD_INT 1
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 1
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: LD_INT 3
46336: NEG
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: PUSH
46368: LD_INT 2
46370: NEG
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 3
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 3
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 2
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: LD_INT 2
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46492: LD_ADDR_VAR 0 43
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: LD_INT 0
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: NEG
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 1
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 1
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: NEG
46574: PUSH
46575: LD_INT 2
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 2
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 1
46647: NEG
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: PUSH
46705: LD_INT 2
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: LD_INT 1
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 3
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 3
46736: PUSH
46737: LD_INT 1
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 0
46756: PUSH
46757: LD_INT 3
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: NEG
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: NEG
46789: PUSH
46790: LD_INT 0
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 3
46799: NEG
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46840: LD_ADDR_VAR 0 44
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: PUSH
46975: LD_INT 2
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 2
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: NEG
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 3
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 3
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 3
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 3
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 3
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 3
47114: NEG
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 3
47125: NEG
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 3
47137: NEG
47138: PUSH
47139: LD_INT 2
47141: NEG
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: LD_INT 3
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47190: LD_ADDR_VAR 0 45
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: NEG
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: LD_INT 2
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: LD_INT 2
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: LD_INT 1
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 0
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: NEG
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: LD_INT 2
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: LD_INT 3
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 3
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 3
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 2
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: LD_INT 2
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 3
47499: NEG
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47540: LD_ADDR_VAR 0 46
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 1
47560: NEG
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 0
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 1
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 2
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 3
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 1
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 3
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 3
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 2
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: NEG
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 3
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47888: LD_ADDR_VAR 0 47
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: NEG
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: LD_INT 2
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48039: LD_ADDR_VAR 0 48
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 0
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 2
48135: NEG
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 2
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48186: LD_ADDR_VAR 0 49
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: LD_INT 0
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 1
48224: PUSH
48225: LD_INT 1
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: LD_INT 0
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: LD_INT 1
48270: NEG
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: LD_INT 2
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 2
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48330: LD_ADDR_VAR 0 50
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: LD_INT 0
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 0
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 0
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: NEG
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 2
48421: PUSH
48422: LD_INT 2
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 2
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 2
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48474: LD_ADDR_VAR 0 51
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 0
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 0
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 0
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: LD_INT 1
48547: NEG
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 0
48565: PUSH
48566: LD_INT 2
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48621: LD_ADDR_VAR 0 52
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: NEG
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48772: LD_ADDR_VAR 0 53
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: LD_INT 0
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 1
48800: PUSH
48801: LD_INT 0
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 1
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 1
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 2
48887: PUSH
48888: LD_INT 0
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 1
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: LD_INT 1
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 2
48971: NEG
48972: PUSH
48973: LD_INT 2
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49002: LD_ADDR_VAR 0 54
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 1
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 1
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 2
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 2
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49232: LD_ADDR_VAR 0 55
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 0
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 1
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 1
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 1
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49462: LD_ADDR_VAR 0 56
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: LD_INT 2
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: LD_INT 2
49558: NEG
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: LD_INT 1
49569: NEG
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: LD_INT 0
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 2
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49692: LD_ADDR_VAR 0 57
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49922: LD_ADDR_VAR 0 58
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 0
49939: PUSH
49940: LD_INT 1
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 1
49980: NEG
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 2
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: LD_INT 1
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 2
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: LD_INT 2
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 2
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: LD_INT 0
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 2
50121: NEG
50122: PUSH
50123: LD_INT 2
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50152: LD_ADDR_VAR 0 59
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 0
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 1
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50240: LD_ADDR_VAR 0 60
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 1
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50328: LD_ADDR_VAR 0 61
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50416: LD_ADDR_VAR 0 62
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 0
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 0
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50504: LD_ADDR_VAR 0 63
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 0
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: PUSH
50533: LD_INT 0
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 1
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50592: LD_ADDR_VAR 0 64
50596: PUSH
50597: LD_INT 0
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 0
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 1
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: NEG
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: ST_TO_ADDR
// end ; 1 :
50680: GO 56577
50682: LD_INT 1
50684: DOUBLE
50685: EQUAL
50686: IFTRUE 50690
50688: GO 53313
50690: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50691: LD_ADDR_VAR 0 11
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 3
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 1
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50735: LD_ADDR_VAR 0 12
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50776: LD_ADDR_VAR 0 13
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 3
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: PUSH
50804: LD_INT 3
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: LIST
50815: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50816: LD_ADDR_VAR 0 14
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: LD_INT 3
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50857: LD_ADDR_VAR 0 15
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: LD_INT 1
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 3
50875: NEG
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: NEG
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50901: LD_ADDR_VAR 0 16
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: LD_INT 3
50912: NEG
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 3
50920: NEG
50921: PUSH
50922: LD_INT 2
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 3
50932: NEG
50933: PUSH
50934: LD_INT 3
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50947: LD_ADDR_VAR 0 17
50951: PUSH
50952: LD_INT 1
50954: NEG
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 3
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 1
50977: PUSH
50978: LD_INT 2
50980: NEG
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: LIST
50990: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50991: LD_ADDR_VAR 0 18
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51032: LD_ADDR_VAR 0 19
51036: PUSH
51037: LD_INT 3
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 3
51049: PUSH
51050: LD_INT 3
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 3
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51072: LD_ADDR_VAR 0 20
51076: PUSH
51077: LD_INT 1
51079: PUSH
51080: LD_INT 3
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: LD_INT 3
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51113: LD_ADDR_VAR 0 21
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: NEG
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51157: LD_ADDR_VAR 0 22
51161: PUSH
51162: LD_INT 2
51164: NEG
51165: PUSH
51166: LD_INT 3
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: LD_INT 3
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51203: LD_ADDR_VAR 0 23
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: LD_INT 4
51225: NEG
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: LD_INT 3
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: LIST
51246: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51247: LD_ADDR_VAR 0 24
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: LD_INT 0
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: LD_INT 1
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 4
51275: PUSH
51276: LD_INT 1
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: LIST
51287: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51288: LD_ADDR_VAR 0 25
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 3
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 3
51315: PUSH
51316: LD_INT 4
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51328: LD_ADDR_VAR 0 26
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 4
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 3
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: LIST
51368: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51369: LD_ADDR_VAR 0 27
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 4
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51413: LD_ADDR_VAR 0 28
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: LD_INT 4
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 4
51444: NEG
51445: PUSH
51446: LD_INT 3
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51459: LD_ADDR_VAR 0 29
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 3
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 4
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 4
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 5
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 5
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 4
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 6
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 6
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 5
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51614: LD_ADDR_VAR 0 30
51618: PUSH
51619: LD_INT 2
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 3
51642: PUSH
51643: LD_INT 1
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 3
51652: PUSH
51653: LD_INT 1
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 4
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 4
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 4
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 5
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 5
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 5
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 6
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 6
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51757: LD_ADDR_VAR 0 31
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: LD_INT 3
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: LD_INT 3
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 4
51794: PUSH
51795: LD_INT 3
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 4
51804: PUSH
51805: LD_INT 4
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 3
51814: PUSH
51815: LD_INT 4
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 5
51824: PUSH
51825: LD_INT 4
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 5
51834: PUSH
51835: LD_INT 5
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 4
51844: PUSH
51845: LD_INT 5
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 6
51854: PUSH
51855: LD_INT 5
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 6
51864: PUSH
51865: LD_INT 6
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 5
51874: PUSH
51875: LD_INT 6
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51896: LD_ADDR_VAR 0 32
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 3
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 0
51913: PUSH
51914: LD_INT 3
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 2
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: LD_INT 4
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 4
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 5
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 5
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 4
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 6
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 0
52006: PUSH
52007: LD_INT 6
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 5
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52039: LD_ADDR_VAR 0 33
52043: PUSH
52044: LD_INT 2
52046: NEG
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: NEG
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: NEG
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 4
52091: NEG
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 4
52102: NEG
52103: PUSH
52104: LD_INT 1
52106: NEG
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 4
52114: NEG
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 5
52125: NEG
52126: PUSH
52127: LD_INT 0
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 5
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 5
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 6
52159: NEG
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 6
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52194: LD_ADDR_VAR 0 34
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 4
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 4
52249: NEG
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: LD_INT 4
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 4
52273: NEG
52274: PUSH
52275: LD_INT 5
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 5
52285: NEG
52286: PUSH
52287: LD_INT 4
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 5
52297: NEG
52298: PUSH
52299: LD_INT 5
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 5
52309: NEG
52310: PUSH
52311: LD_INT 6
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 6
52321: NEG
52322: PUSH
52323: LD_INT 5
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 6
52333: NEG
52334: PUSH
52335: LD_INT 6
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52357: LD_ADDR_VAR 0 41
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 3
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52401: LD_ADDR_VAR 0 42
52405: PUSH
52406: LD_INT 2
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 3
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52442: LD_ADDR_VAR 0 43
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 3
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: LIST
52481: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52482: LD_ADDR_VAR 0 44
52486: PUSH
52487: LD_INT 0
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 3
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: LIST
52522: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52523: LD_ADDR_VAR 0 45
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: LD_INT 1
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 3
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52567: LD_ADDR_VAR 0 46
52571: PUSH
52572: LD_INT 2
52574: NEG
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: NEG
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52613: LD_ADDR_VAR 0 47
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: LD_INT 3
52624: NEG
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 3
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52646: LD_ADDR_VAR 0 48
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52677: LD_ADDR_VAR 0 49
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52706: LD_ADDR_VAR 0 50
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 3
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52735: LD_ADDR_VAR 0 51
52739: PUSH
52740: LD_INT 1
52742: NEG
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52766: LD_ADDR_VAR 0 52
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 3
52785: NEG
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52799: LD_ADDR_VAR 0 53
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 3
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52843: LD_ADDR_VAR 0 54
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 1
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52884: LD_ADDR_VAR 0 55
52888: PUSH
52889: LD_INT 3
52891: PUSH
52892: LD_INT 2
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: LD_INT 3
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 2
52911: PUSH
52912: LD_INT 3
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52924: LD_ADDR_VAR 0 56
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: LD_INT 3
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 3
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 2
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52965: LD_ADDR_VAR 0 57
52969: PUSH
52970: LD_INT 2
52972: NEG
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 3
52983: NEG
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 3
52994: NEG
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: LIST
53008: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53009: LD_ADDR_VAR 0 58
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: LD_INT 3
53020: NEG
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 3
53028: NEG
53029: PUSH
53030: LD_INT 2
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 3
53040: NEG
53041: PUSH
53042: LD_INT 3
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53055: LD_ADDR_VAR 0 59
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 2
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 0
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53099: LD_ADDR_VAR 0 60
53103: PUSH
53104: LD_INT 1
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: LIST
53139: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53140: LD_ADDR_VAR 0 61
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: PUSH
53158: LD_INT 2
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53180: LD_ADDR_VAR 0 62
53184: PUSH
53185: LD_INT 1
53187: PUSH
53188: LD_INT 2
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 0
53197: PUSH
53198: LD_INT 2
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 1
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53221: LD_ADDR_VAR 0 63
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: LIST
53264: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53265: LD_ADDR_VAR 0 64
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 2
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: LIST
53310: ST_TO_ADDR
// end ; 2 :
53311: GO 56577
53313: LD_INT 2
53315: DOUBLE
53316: EQUAL
53317: IFTRUE 53321
53319: GO 56576
53321: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53322: LD_ADDR_VAR 0 29
53326: PUSH
53327: LD_INT 4
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 4
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 5
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 5
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 4
53370: PUSH
53371: LD_INT 1
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 3
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 3
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 5
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 3
53422: PUSH
53423: LD_INT 3
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 3
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 4
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 4
53452: PUSH
53453: LD_INT 4
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 3
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 4
53492: PUSH
53493: LD_INT 2
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 4
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 0
53512: PUSH
53513: LD_INT 4
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 3
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 4
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: LD_INT 5
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 5
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: LD_INT 4
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 3
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 5
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: LD_INT 3
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 3
53605: NEG
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 2
53639: NEG
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: LD_INT 1
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 4
53661: NEG
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 4
53672: NEG
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 4
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 4
53707: NEG
53708: PUSH
53709: LD_INT 4
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 4
53719: NEG
53720: PUSH
53721: LD_INT 5
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 3
53743: NEG
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 4
53755: NEG
53756: PUSH
53757: LD_INT 3
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 5
53767: NEG
53768: PUSH
53769: LD_INT 4
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 5
53779: NEG
53780: PUSH
53781: LD_INT 5
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 3
53791: NEG
53792: PUSH
53793: LD_INT 5
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 5
53803: NEG
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: EMPTY
53810: LIST
53811: LIST
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53860: LD_ADDR_VAR 0 30
53864: PUSH
53865: LD_INT 4
53867: PUSH
53868: LD_INT 4
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 4
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 5
53887: PUSH
53888: LD_INT 4
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 5
53897: PUSH
53898: LD_INT 5
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: PUSH
53908: LD_INT 5
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: LD_INT 4
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 3
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 5
53937: PUSH
53938: LD_INT 3
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 5
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 2
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: LD_INT 3
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 4
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 0
53997: PUSH
53998: LD_INT 4
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 1
54007: NEG
54008: PUSH
54009: LD_INT 3
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 4
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: LD_INT 2
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 4
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 4
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: NEG
54074: PUSH
54075: LD_INT 0
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 3
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 4
54095: NEG
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 5
54106: NEG
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 5
54117: NEG
54118: PUSH
54119: LD_INT 1
54121: NEG
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 5
54129: NEG
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: LD_INT 2
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: NEG
54153: PUSH
54154: LD_INT 3
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 3
54164: NEG
54165: PUSH
54166: LD_INT 4
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: NEG
54177: PUSH
54178: LD_INT 3
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 2
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: NEG
54201: PUSH
54202: LD_INT 2
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 4
54212: NEG
54213: PUSH
54214: LD_INT 3
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 4
54224: NEG
54225: PUSH
54226: LD_INT 4
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: LD_INT 4
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 4
54248: NEG
54249: PUSH
54250: LD_INT 2
54252: NEG
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 0
54260: PUSH
54261: LD_INT 4
54263: NEG
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: LD_INT 5
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 4
54285: NEG
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 1
54293: PUSH
54294: LD_INT 3
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 3
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 4
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 5
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: LD_INT 3
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 2
54350: NEG
54351: PUSH
54352: LD_INT 5
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54407: LD_ADDR_VAR 0 31
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 4
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 3
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 4
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 5
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 5
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 4
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 1
54475: NEG
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 5
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 3
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 4
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 4
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: NEG
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 4
54586: NEG
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: NEG
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 4
54609: NEG
54610: PUSH
54611: LD_INT 4
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: LD_INT 5
54625: NEG
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 3
54633: NEG
54634: PUSH
54635: LD_INT 4
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: NEG
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 4
54657: NEG
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 5
54669: NEG
54670: PUSH
54671: LD_INT 4
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 5
54681: NEG
54682: PUSH
54683: LD_INT 5
54685: NEG
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: LD_INT 5
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 5
54705: NEG
54706: PUSH
54707: LD_INT 3
54709: NEG
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 3
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 4
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 3
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: NEG
54785: PUSH
54786: LD_INT 4
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: LD_INT 4
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 4
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 4
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 5
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 5
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 4
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 3
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 5
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54957: LD_ADDR_VAR 0 32
54961: PUSH
54962: LD_INT 4
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 4
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 3
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 4
55009: NEG
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 5
55020: NEG
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 5
55031: NEG
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 5
55043: NEG
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 3
55055: NEG
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 3
55066: NEG
55067: PUSH
55068: LD_INT 3
55070: NEG
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 3
55078: NEG
55079: PUSH
55080: LD_INT 4
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 3
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: NEG
55115: PUSH
55116: LD_INT 2
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 4
55126: NEG
55127: PUSH
55128: LD_INT 3
55130: NEG
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 4
55138: NEG
55139: PUSH
55140: LD_INT 4
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: LD_INT 4
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 4
55162: NEG
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 4
55177: NEG
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: LD_INT 5
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: LD_INT 4
55199: NEG
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: LD_INT 3
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 3
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 4
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: LD_INT 5
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 2
55253: PUSH
55254: LD_INT 3
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 2
55264: NEG
55265: PUSH
55266: LD_INT 5
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 3
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 4
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 4
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 3
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 2
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 4
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 4
55369: PUSH
55370: LD_INT 4
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 4
55379: PUSH
55380: LD_INT 3
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 5
55389: PUSH
55390: LD_INT 4
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 5
55399: PUSH
55400: LD_INT 5
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: PUSH
55410: LD_INT 5
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 3
55419: PUSH
55420: LD_INT 4
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 3
55429: PUSH
55430: LD_INT 3
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 5
55439: PUSH
55440: LD_INT 3
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 3
55449: PUSH
55450: LD_INT 5
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: LIST
55465: LIST
55466: LIST
55467: LIST
55468: LIST
55469: LIST
55470: LIST
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55504: LD_ADDR_VAR 0 33
55508: PUSH
55509: LD_INT 4
55511: NEG
55512: PUSH
55513: LD_INT 4
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 4
55523: NEG
55524: PUSH
55525: LD_INT 5
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: LD_INT 4
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: LD_INT 3
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 4
55559: NEG
55560: PUSH
55561: LD_INT 3
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 5
55571: NEG
55572: PUSH
55573: LD_INT 4
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 5
55583: NEG
55584: PUSH
55585: LD_INT 5
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 3
55595: NEG
55596: PUSH
55597: LD_INT 5
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 5
55607: NEG
55608: PUSH
55609: LD_INT 3
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 4
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 2
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 2
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: LD_INT 3
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 1
55686: NEG
55687: PUSH
55688: LD_INT 4
55690: NEG
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 2
55709: NEG
55710: PUSH
55711: LD_INT 4
55713: NEG
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 4
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 4
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 5
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 5
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 4
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 3
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 5
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: LD_INT 3
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 4
55844: PUSH
55845: LD_INT 4
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: PUSH
55852: LD_INT 3
55854: PUSH
55855: LD_INT 4
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 2
55864: PUSH
55865: LD_INT 3
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 2
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 4
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 4
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 3
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 4
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 5
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 5
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 4
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 3
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: LD_INT 5
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 2
55986: NEG
55987: PUSH
55988: LD_INT 3
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56042: LD_ADDR_VAR 0 34
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: LD_INT 4
56052: NEG
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 5
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 4
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: PUSH
56083: LD_INT 3
56085: NEG
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: LD_INT 3
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 5
56120: NEG
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 2
56128: PUSH
56129: LD_INT 3
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 2
56139: NEG
56140: PUSH
56141: LD_INT 5
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 3
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 4
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 4
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 1
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 2
56202: PUSH
56203: LD_INT 0
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: LD_INT 1
56215: NEG
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 4
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 4
56244: PUSH
56245: LD_INT 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 4
56254: PUSH
56255: LD_INT 3
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 5
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 5
56274: PUSH
56275: LD_INT 5
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 4
56284: PUSH
56285: LD_INT 5
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 3
56294: PUSH
56295: LD_INT 4
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: LD_INT 3
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 5
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 3
56324: PUSH
56325: LD_INT 5
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 3
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: LD_INT 3
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: LD_INT 4
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 0
56374: PUSH
56375: LD_INT 4
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 3
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 2
56406: PUSH
56407: LD_INT 4
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 2
56416: NEG
56417: PUSH
56418: LD_INT 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 4
56427: NEG
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 3
56450: NEG
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 4
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 5
56483: NEG
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 5
56494: NEG
56495: PUSH
56496: LD_INT 1
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 5
56506: NEG
56507: PUSH
56508: LD_INT 2
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 3
56518: NEG
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: LIST
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: ST_TO_ADDR
// end ; end ;
56574: GO 56577
56576: POP
// case btype of b_depot , b_warehouse :
56577: LD_VAR 0 1
56581: PUSH
56582: LD_INT 0
56584: DOUBLE
56585: EQUAL
56586: IFTRUE 56596
56588: LD_INT 1
56590: DOUBLE
56591: EQUAL
56592: IFTRUE 56596
56594: GO 56797
56596: POP
// case nation of nation_american :
56597: LD_VAR 0 5
56601: PUSH
56602: LD_INT 1
56604: DOUBLE
56605: EQUAL
56606: IFTRUE 56610
56608: GO 56666
56610: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56611: LD_ADDR_VAR 0 9
56615: PUSH
56616: LD_VAR 0 11
56620: PUSH
56621: LD_VAR 0 12
56625: PUSH
56626: LD_VAR 0 13
56630: PUSH
56631: LD_VAR 0 14
56635: PUSH
56636: LD_VAR 0 15
56640: PUSH
56641: LD_VAR 0 16
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: PUSH
56654: LD_VAR 0 4
56658: PUSH
56659: LD_INT 1
56661: PLUS
56662: ARRAY
56663: ST_TO_ADDR
56664: GO 56795
56666: LD_INT 2
56668: DOUBLE
56669: EQUAL
56670: IFTRUE 56674
56672: GO 56730
56674: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56675: LD_ADDR_VAR 0 9
56679: PUSH
56680: LD_VAR 0 17
56684: PUSH
56685: LD_VAR 0 18
56689: PUSH
56690: LD_VAR 0 19
56694: PUSH
56695: LD_VAR 0 20
56699: PUSH
56700: LD_VAR 0 21
56704: PUSH
56705: LD_VAR 0 22
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: PUSH
56718: LD_VAR 0 4
56722: PUSH
56723: LD_INT 1
56725: PLUS
56726: ARRAY
56727: ST_TO_ADDR
56728: GO 56795
56730: LD_INT 3
56732: DOUBLE
56733: EQUAL
56734: IFTRUE 56738
56736: GO 56794
56738: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56739: LD_ADDR_VAR 0 9
56743: PUSH
56744: LD_VAR 0 23
56748: PUSH
56749: LD_VAR 0 24
56753: PUSH
56754: LD_VAR 0 25
56758: PUSH
56759: LD_VAR 0 26
56763: PUSH
56764: LD_VAR 0 27
56768: PUSH
56769: LD_VAR 0 28
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: PUSH
56782: LD_VAR 0 4
56786: PUSH
56787: LD_INT 1
56789: PLUS
56790: ARRAY
56791: ST_TO_ADDR
56792: GO 56795
56794: POP
56795: GO 57350
56797: LD_INT 2
56799: DOUBLE
56800: EQUAL
56801: IFTRUE 56811
56803: LD_INT 3
56805: DOUBLE
56806: EQUAL
56807: IFTRUE 56811
56809: GO 56867
56811: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56812: LD_ADDR_VAR 0 9
56816: PUSH
56817: LD_VAR 0 29
56821: PUSH
56822: LD_VAR 0 30
56826: PUSH
56827: LD_VAR 0 31
56831: PUSH
56832: LD_VAR 0 32
56836: PUSH
56837: LD_VAR 0 33
56841: PUSH
56842: LD_VAR 0 34
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: PUSH
56855: LD_VAR 0 4
56859: PUSH
56860: LD_INT 1
56862: PLUS
56863: ARRAY
56864: ST_TO_ADDR
56865: GO 57350
56867: LD_INT 16
56869: DOUBLE
56870: EQUAL
56871: IFTRUE 56929
56873: LD_INT 17
56875: DOUBLE
56876: EQUAL
56877: IFTRUE 56929
56879: LD_INT 18
56881: DOUBLE
56882: EQUAL
56883: IFTRUE 56929
56885: LD_INT 19
56887: DOUBLE
56888: EQUAL
56889: IFTRUE 56929
56891: LD_INT 22
56893: DOUBLE
56894: EQUAL
56895: IFTRUE 56929
56897: LD_INT 20
56899: DOUBLE
56900: EQUAL
56901: IFTRUE 56929
56903: LD_INT 21
56905: DOUBLE
56906: EQUAL
56907: IFTRUE 56929
56909: LD_INT 23
56911: DOUBLE
56912: EQUAL
56913: IFTRUE 56929
56915: LD_INT 24
56917: DOUBLE
56918: EQUAL
56919: IFTRUE 56929
56921: LD_INT 25
56923: DOUBLE
56924: EQUAL
56925: IFTRUE 56929
56927: GO 56985
56929: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56930: LD_ADDR_VAR 0 9
56934: PUSH
56935: LD_VAR 0 35
56939: PUSH
56940: LD_VAR 0 36
56944: PUSH
56945: LD_VAR 0 37
56949: PUSH
56950: LD_VAR 0 38
56954: PUSH
56955: LD_VAR 0 39
56959: PUSH
56960: LD_VAR 0 40
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: PUSH
56973: LD_VAR 0 4
56977: PUSH
56978: LD_INT 1
56980: PLUS
56981: ARRAY
56982: ST_TO_ADDR
56983: GO 57350
56985: LD_INT 6
56987: DOUBLE
56988: EQUAL
56989: IFTRUE 57041
56991: LD_INT 7
56993: DOUBLE
56994: EQUAL
56995: IFTRUE 57041
56997: LD_INT 8
56999: DOUBLE
57000: EQUAL
57001: IFTRUE 57041
57003: LD_INT 13
57005: DOUBLE
57006: EQUAL
57007: IFTRUE 57041
57009: LD_INT 12
57011: DOUBLE
57012: EQUAL
57013: IFTRUE 57041
57015: LD_INT 15
57017: DOUBLE
57018: EQUAL
57019: IFTRUE 57041
57021: LD_INT 11
57023: DOUBLE
57024: EQUAL
57025: IFTRUE 57041
57027: LD_INT 14
57029: DOUBLE
57030: EQUAL
57031: IFTRUE 57041
57033: LD_INT 10
57035: DOUBLE
57036: EQUAL
57037: IFTRUE 57041
57039: GO 57097
57041: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57042: LD_ADDR_VAR 0 9
57046: PUSH
57047: LD_VAR 0 41
57051: PUSH
57052: LD_VAR 0 42
57056: PUSH
57057: LD_VAR 0 43
57061: PUSH
57062: LD_VAR 0 44
57066: PUSH
57067: LD_VAR 0 45
57071: PUSH
57072: LD_VAR 0 46
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: PUSH
57085: LD_VAR 0 4
57089: PUSH
57090: LD_INT 1
57092: PLUS
57093: ARRAY
57094: ST_TO_ADDR
57095: GO 57350
57097: LD_INT 36
57099: DOUBLE
57100: EQUAL
57101: IFTRUE 57105
57103: GO 57161
57105: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57106: LD_ADDR_VAR 0 9
57110: PUSH
57111: LD_VAR 0 47
57115: PUSH
57116: LD_VAR 0 48
57120: PUSH
57121: LD_VAR 0 49
57125: PUSH
57126: LD_VAR 0 50
57130: PUSH
57131: LD_VAR 0 51
57135: PUSH
57136: LD_VAR 0 52
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: PUSH
57149: LD_VAR 0 4
57153: PUSH
57154: LD_INT 1
57156: PLUS
57157: ARRAY
57158: ST_TO_ADDR
57159: GO 57350
57161: LD_INT 4
57163: DOUBLE
57164: EQUAL
57165: IFTRUE 57187
57167: LD_INT 5
57169: DOUBLE
57170: EQUAL
57171: IFTRUE 57187
57173: LD_INT 34
57175: DOUBLE
57176: EQUAL
57177: IFTRUE 57187
57179: LD_INT 37
57181: DOUBLE
57182: EQUAL
57183: IFTRUE 57187
57185: GO 57243
57187: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57188: LD_ADDR_VAR 0 9
57192: PUSH
57193: LD_VAR 0 53
57197: PUSH
57198: LD_VAR 0 54
57202: PUSH
57203: LD_VAR 0 55
57207: PUSH
57208: LD_VAR 0 56
57212: PUSH
57213: LD_VAR 0 57
57217: PUSH
57218: LD_VAR 0 58
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: PUSH
57231: LD_VAR 0 4
57235: PUSH
57236: LD_INT 1
57238: PLUS
57239: ARRAY
57240: ST_TO_ADDR
57241: GO 57350
57243: LD_INT 31
57245: DOUBLE
57246: EQUAL
57247: IFTRUE 57293
57249: LD_INT 32
57251: DOUBLE
57252: EQUAL
57253: IFTRUE 57293
57255: LD_INT 33
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57293
57261: LD_INT 27
57263: DOUBLE
57264: EQUAL
57265: IFTRUE 57293
57267: LD_INT 26
57269: DOUBLE
57270: EQUAL
57271: IFTRUE 57293
57273: LD_INT 28
57275: DOUBLE
57276: EQUAL
57277: IFTRUE 57293
57279: LD_INT 29
57281: DOUBLE
57282: EQUAL
57283: IFTRUE 57293
57285: LD_INT 30
57287: DOUBLE
57288: EQUAL
57289: IFTRUE 57293
57291: GO 57349
57293: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57294: LD_ADDR_VAR 0 9
57298: PUSH
57299: LD_VAR 0 59
57303: PUSH
57304: LD_VAR 0 60
57308: PUSH
57309: LD_VAR 0 61
57313: PUSH
57314: LD_VAR 0 62
57318: PUSH
57319: LD_VAR 0 63
57323: PUSH
57324: LD_VAR 0 64
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: PUSH
57337: LD_VAR 0 4
57341: PUSH
57342: LD_INT 1
57344: PLUS
57345: ARRAY
57346: ST_TO_ADDR
57347: GO 57350
57349: POP
// temp_list2 = [ ] ;
57350: LD_ADDR_VAR 0 10
57354: PUSH
57355: EMPTY
57356: ST_TO_ADDR
// for i in temp_list do
57357: LD_ADDR_VAR 0 8
57361: PUSH
57362: LD_VAR 0 9
57366: PUSH
57367: FOR_IN
57368: IFFALSE 57420
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57370: LD_ADDR_VAR 0 10
57374: PUSH
57375: LD_VAR 0 10
57379: PUSH
57380: LD_VAR 0 8
57384: PUSH
57385: LD_INT 1
57387: ARRAY
57388: PUSH
57389: LD_VAR 0 2
57393: PLUS
57394: PUSH
57395: LD_VAR 0 8
57399: PUSH
57400: LD_INT 2
57402: ARRAY
57403: PUSH
57404: LD_VAR 0 3
57408: PLUS
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: EMPTY
57415: LIST
57416: ADD
57417: ST_TO_ADDR
57418: GO 57367
57420: POP
57421: POP
// result = temp_list2 ;
57422: LD_ADDR_VAR 0 7
57426: PUSH
57427: LD_VAR 0 10
57431: ST_TO_ADDR
// end ;
57432: LD_VAR 0 7
57436: RET
// export function EnemyInRange ( unit , dist ) ; begin
57437: LD_INT 0
57439: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57440: LD_ADDR_VAR 0 3
57444: PUSH
57445: LD_VAR 0 1
57449: PPUSH
57450: CALL_OW 255
57454: PPUSH
57455: LD_VAR 0 1
57459: PPUSH
57460: CALL_OW 250
57464: PPUSH
57465: LD_VAR 0 1
57469: PPUSH
57470: CALL_OW 251
57474: PPUSH
57475: LD_VAR 0 2
57479: PPUSH
57480: CALL 30839 0 4
57484: PUSH
57485: LD_INT 4
57487: ARRAY
57488: ST_TO_ADDR
// end ;
57489: LD_VAR 0 3
57493: RET
// export function PlayerSeeMe ( unit ) ; begin
57494: LD_INT 0
57496: PPUSH
// result := See ( your_side , unit ) ;
57497: LD_ADDR_VAR 0 2
57501: PUSH
57502: LD_OWVAR 2
57506: PPUSH
57507: LD_VAR 0 1
57511: PPUSH
57512: CALL_OW 292
57516: ST_TO_ADDR
// end ;
57517: LD_VAR 0 2
57521: RET
// export function ReverseDir ( unit ) ; begin
57522: LD_INT 0
57524: PPUSH
// if not unit then
57525: LD_VAR 0 1
57529: NOT
57530: IFFALSE 57534
// exit ;
57532: GO 57557
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57534: LD_ADDR_VAR 0 2
57538: PUSH
57539: LD_VAR 0 1
57543: PPUSH
57544: CALL_OW 254
57548: PUSH
57549: LD_INT 3
57551: PLUS
57552: PUSH
57553: LD_INT 6
57555: MOD
57556: ST_TO_ADDR
// end ;
57557: LD_VAR 0 2
57561: RET
// export function ReverseArray ( array ) ; var i ; begin
57562: LD_INT 0
57564: PPUSH
57565: PPUSH
// if not array then
57566: LD_VAR 0 1
57570: NOT
57571: IFFALSE 57575
// exit ;
57573: GO 57630
// result := [ ] ;
57575: LD_ADDR_VAR 0 2
57579: PUSH
57580: EMPTY
57581: ST_TO_ADDR
// for i := array downto 1 do
57582: LD_ADDR_VAR 0 3
57586: PUSH
57587: DOUBLE
57588: LD_VAR 0 1
57592: INC
57593: ST_TO_ADDR
57594: LD_INT 1
57596: PUSH
57597: FOR_DOWNTO
57598: IFFALSE 57628
// result := Join ( result , array [ i ] ) ;
57600: LD_ADDR_VAR 0 2
57604: PUSH
57605: LD_VAR 0 2
57609: PPUSH
57610: LD_VAR 0 1
57614: PUSH
57615: LD_VAR 0 3
57619: ARRAY
57620: PPUSH
57621: CALL 62274 0 2
57625: ST_TO_ADDR
57626: GO 57597
57628: POP
57629: POP
// end ;
57630: LD_VAR 0 2
57634: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57635: LD_INT 0
57637: PPUSH
57638: PPUSH
57639: PPUSH
57640: PPUSH
57641: PPUSH
57642: PPUSH
// if not unit or not hexes then
57643: LD_VAR 0 1
57647: NOT
57648: PUSH
57649: LD_VAR 0 2
57653: NOT
57654: OR
57655: IFFALSE 57659
// exit ;
57657: GO 57782
// dist := 9999 ;
57659: LD_ADDR_VAR 0 5
57663: PUSH
57664: LD_INT 9999
57666: ST_TO_ADDR
// for i = 1 to hexes do
57667: LD_ADDR_VAR 0 4
57671: PUSH
57672: DOUBLE
57673: LD_INT 1
57675: DEC
57676: ST_TO_ADDR
57677: LD_VAR 0 2
57681: PUSH
57682: FOR_TO
57683: IFFALSE 57770
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57685: LD_ADDR_VAR 0 6
57689: PUSH
57690: LD_VAR 0 1
57694: PPUSH
57695: LD_VAR 0 2
57699: PUSH
57700: LD_VAR 0 4
57704: ARRAY
57705: PUSH
57706: LD_INT 1
57708: ARRAY
57709: PPUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_VAR 0 4
57719: ARRAY
57720: PUSH
57721: LD_INT 2
57723: ARRAY
57724: PPUSH
57725: CALL_OW 297
57729: ST_TO_ADDR
// if tdist < dist then
57730: LD_VAR 0 6
57734: PUSH
57735: LD_VAR 0 5
57739: LESS
57740: IFFALSE 57768
// begin hex := hexes [ i ] ;
57742: LD_ADDR_VAR 0 8
57746: PUSH
57747: LD_VAR 0 2
57751: PUSH
57752: LD_VAR 0 4
57756: ARRAY
57757: ST_TO_ADDR
// dist := tdist ;
57758: LD_ADDR_VAR 0 5
57762: PUSH
57763: LD_VAR 0 6
57767: ST_TO_ADDR
// end ; end ;
57768: GO 57682
57770: POP
57771: POP
// result := hex ;
57772: LD_ADDR_VAR 0 3
57776: PUSH
57777: LD_VAR 0 8
57781: ST_TO_ADDR
// end ;
57782: LD_VAR 0 3
57786: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57787: LD_INT 0
57789: PPUSH
57790: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57791: LD_VAR 0 1
57795: NOT
57796: PUSH
57797: LD_VAR 0 1
57801: PUSH
57802: LD_INT 21
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 23
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PPUSH
57826: CALL_OW 69
57830: IN
57831: NOT
57832: OR
57833: IFFALSE 57837
// exit ;
57835: GO 57884
// for i = 1 to 3 do
57837: LD_ADDR_VAR 0 3
57841: PUSH
57842: DOUBLE
57843: LD_INT 1
57845: DEC
57846: ST_TO_ADDR
57847: LD_INT 3
57849: PUSH
57850: FOR_TO
57851: IFFALSE 57882
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57853: LD_VAR 0 1
57857: PPUSH
57858: CALL_OW 250
57862: PPUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 251
57872: PPUSH
57873: LD_INT 1
57875: PPUSH
57876: CALL_OW 453
57880: GO 57850
57882: POP
57883: POP
// end ;
57884: LD_VAR 0 2
57888: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57889: LD_INT 0
57891: PPUSH
57892: PPUSH
57893: PPUSH
57894: PPUSH
57895: PPUSH
57896: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57897: LD_VAR 0 1
57901: NOT
57902: PUSH
57903: LD_VAR 0 2
57907: NOT
57908: OR
57909: PUSH
57910: LD_VAR 0 1
57914: PPUSH
57915: CALL_OW 314
57919: OR
57920: IFFALSE 57924
// exit ;
57922: GO 58391
// if GetLives ( i ) < 250 then
57924: LD_VAR 0 4
57928: PPUSH
57929: CALL_OW 256
57933: PUSH
57934: LD_INT 250
57936: LESS
57937: IFFALSE 57950
// begin ComAutodestruct ( i ) ;
57939: LD_VAR 0 4
57943: PPUSH
57944: CALL 57787 0 1
// exit ;
57948: GO 58391
// end ; x := GetX ( enemy_unit ) ;
57950: LD_ADDR_VAR 0 7
57954: PUSH
57955: LD_VAR 0 2
57959: PPUSH
57960: CALL_OW 250
57964: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57965: LD_ADDR_VAR 0 8
57969: PUSH
57970: LD_VAR 0 2
57974: PPUSH
57975: CALL_OW 251
57979: ST_TO_ADDR
// if not x or not y then
57980: LD_VAR 0 7
57984: NOT
57985: PUSH
57986: LD_VAR 0 8
57990: NOT
57991: OR
57992: IFFALSE 57996
// exit ;
57994: GO 58391
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57996: LD_ADDR_VAR 0 6
58000: PUSH
58001: LD_VAR 0 7
58005: PPUSH
58006: LD_INT 0
58008: PPUSH
58009: LD_INT 4
58011: PPUSH
58012: CALL_OW 272
58016: PUSH
58017: LD_VAR 0 8
58021: PPUSH
58022: LD_INT 0
58024: PPUSH
58025: LD_INT 4
58027: PPUSH
58028: CALL_OW 273
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_VAR 0 7
58041: PPUSH
58042: LD_INT 1
58044: PPUSH
58045: LD_INT 4
58047: PPUSH
58048: CALL_OW 272
58052: PUSH
58053: LD_VAR 0 8
58057: PPUSH
58058: LD_INT 1
58060: PPUSH
58061: LD_INT 4
58063: PPUSH
58064: CALL_OW 273
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_VAR 0 7
58077: PPUSH
58078: LD_INT 2
58080: PPUSH
58081: LD_INT 4
58083: PPUSH
58084: CALL_OW 272
58088: PUSH
58089: LD_VAR 0 8
58093: PPUSH
58094: LD_INT 2
58096: PPUSH
58097: LD_INT 4
58099: PPUSH
58100: CALL_OW 273
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_VAR 0 7
58113: PPUSH
58114: LD_INT 3
58116: PPUSH
58117: LD_INT 4
58119: PPUSH
58120: CALL_OW 272
58124: PUSH
58125: LD_VAR 0 8
58129: PPUSH
58130: LD_INT 3
58132: PPUSH
58133: LD_INT 4
58135: PPUSH
58136: CALL_OW 273
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_VAR 0 7
58149: PPUSH
58150: LD_INT 4
58152: PPUSH
58153: LD_INT 4
58155: PPUSH
58156: CALL_OW 272
58160: PUSH
58161: LD_VAR 0 8
58165: PPUSH
58166: LD_INT 4
58168: PPUSH
58169: LD_INT 4
58171: PPUSH
58172: CALL_OW 273
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_VAR 0 7
58185: PPUSH
58186: LD_INT 5
58188: PPUSH
58189: LD_INT 4
58191: PPUSH
58192: CALL_OW 272
58196: PUSH
58197: LD_VAR 0 8
58201: PPUSH
58202: LD_INT 5
58204: PPUSH
58205: LD_INT 4
58207: PPUSH
58208: CALL_OW 273
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// for i = tmp downto 1 do
58225: LD_ADDR_VAR 0 4
58229: PUSH
58230: DOUBLE
58231: LD_VAR 0 6
58235: INC
58236: ST_TO_ADDR
58237: LD_INT 1
58239: PUSH
58240: FOR_DOWNTO
58241: IFFALSE 58342
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58243: LD_VAR 0 6
58247: PUSH
58248: LD_VAR 0 4
58252: ARRAY
58253: PUSH
58254: LD_INT 1
58256: ARRAY
58257: PPUSH
58258: LD_VAR 0 6
58262: PUSH
58263: LD_VAR 0 4
58267: ARRAY
58268: PUSH
58269: LD_INT 2
58271: ARRAY
58272: PPUSH
58273: CALL_OW 488
58277: NOT
58278: PUSH
58279: LD_VAR 0 6
58283: PUSH
58284: LD_VAR 0 4
58288: ARRAY
58289: PUSH
58290: LD_INT 1
58292: ARRAY
58293: PPUSH
58294: LD_VAR 0 6
58298: PUSH
58299: LD_VAR 0 4
58303: ARRAY
58304: PUSH
58305: LD_INT 2
58307: ARRAY
58308: PPUSH
58309: CALL_OW 428
58313: PUSH
58314: LD_INT 0
58316: NONEQUAL
58317: OR
58318: IFFALSE 58340
// tmp := Delete ( tmp , i ) ;
58320: LD_ADDR_VAR 0 6
58324: PUSH
58325: LD_VAR 0 6
58329: PPUSH
58330: LD_VAR 0 4
58334: PPUSH
58335: CALL_OW 3
58339: ST_TO_ADDR
58340: GO 58240
58342: POP
58343: POP
// j := GetClosestHex ( unit , tmp ) ;
58344: LD_ADDR_VAR 0 5
58348: PUSH
58349: LD_VAR 0 1
58353: PPUSH
58354: LD_VAR 0 6
58358: PPUSH
58359: CALL 57635 0 2
58363: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58364: LD_VAR 0 1
58368: PPUSH
58369: LD_VAR 0 5
58373: PUSH
58374: LD_INT 1
58376: ARRAY
58377: PPUSH
58378: LD_VAR 0 5
58382: PUSH
58383: LD_INT 2
58385: ARRAY
58386: PPUSH
58387: CALL_OW 111
// end ;
58391: LD_VAR 0 3
58395: RET
// export function PrepareApemanSoldier ( ) ; begin
58396: LD_INT 0
58398: PPUSH
// uc_nation := 0 ;
58399: LD_ADDR_OWVAR 21
58403: PUSH
58404: LD_INT 0
58406: ST_TO_ADDR
// hc_sex := sex_male ;
58407: LD_ADDR_OWVAR 27
58411: PUSH
58412: LD_INT 1
58414: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58415: LD_ADDR_OWVAR 28
58419: PUSH
58420: LD_INT 15
58422: ST_TO_ADDR
// hc_gallery :=  ;
58423: LD_ADDR_OWVAR 33
58427: PUSH
58428: LD_STRING 
58430: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58431: LD_ADDR_OWVAR 31
58435: PUSH
58436: LD_INT 0
58438: PPUSH
58439: LD_INT 3
58441: PPUSH
58442: CALL_OW 12
58446: PUSH
58447: LD_INT 0
58449: PPUSH
58450: LD_INT 3
58452: PPUSH
58453: CALL_OW 12
58457: PUSH
58458: LD_INT 0
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: ST_TO_ADDR
// end ;
58470: LD_VAR 0 1
58474: RET
// export function PrepareApemanEngineer ( ) ; begin
58475: LD_INT 0
58477: PPUSH
// uc_nation := 0 ;
58478: LD_ADDR_OWVAR 21
58482: PUSH
58483: LD_INT 0
58485: ST_TO_ADDR
// hc_sex := sex_male ;
58486: LD_ADDR_OWVAR 27
58490: PUSH
58491: LD_INT 1
58493: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58494: LD_ADDR_OWVAR 28
58498: PUSH
58499: LD_INT 16
58501: ST_TO_ADDR
// hc_gallery :=  ;
58502: LD_ADDR_OWVAR 33
58506: PUSH
58507: LD_STRING 
58509: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58510: LD_ADDR_OWVAR 31
58514: PUSH
58515: LD_INT 0
58517: PPUSH
58518: LD_INT 3
58520: PPUSH
58521: CALL_OW 12
58525: PUSH
58526: LD_INT 0
58528: PPUSH
58529: LD_INT 3
58531: PPUSH
58532: CALL_OW 12
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: ST_TO_ADDR
// end ;
58549: LD_VAR 0 1
58553: RET
// export function PrepareApeman ( agressivity ) ; begin
58554: LD_INT 0
58556: PPUSH
// uc_side := 0 ;
58557: LD_ADDR_OWVAR 20
58561: PUSH
58562: LD_INT 0
58564: ST_TO_ADDR
// uc_nation := 0 ;
58565: LD_ADDR_OWVAR 21
58569: PUSH
58570: LD_INT 0
58572: ST_TO_ADDR
// hc_sex := sex_male ;
58573: LD_ADDR_OWVAR 27
58577: PUSH
58578: LD_INT 1
58580: ST_TO_ADDR
// hc_class := class_apeman ;
58581: LD_ADDR_OWVAR 28
58585: PUSH
58586: LD_INT 12
58588: ST_TO_ADDR
// hc_gallery :=  ;
58589: LD_ADDR_OWVAR 33
58593: PUSH
58594: LD_STRING 
58596: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58597: LD_ADDR_OWVAR 35
58601: PUSH
58602: LD_VAR 0 1
58606: NEG
58607: PPUSH
58608: LD_VAR 0 1
58612: PPUSH
58613: CALL_OW 12
58617: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58618: LD_ADDR_OWVAR 31
58622: PUSH
58623: LD_INT 0
58625: PPUSH
58626: LD_INT 3
58628: PPUSH
58629: CALL_OW 12
58633: PUSH
58634: LD_INT 0
58636: PPUSH
58637: LD_INT 3
58639: PPUSH
58640: CALL_OW 12
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: ST_TO_ADDR
// end ;
58657: LD_VAR 0 2
58661: RET
// export function PrepareTiger ( agressivity ) ; begin
58662: LD_INT 0
58664: PPUSH
// uc_side := 0 ;
58665: LD_ADDR_OWVAR 20
58669: PUSH
58670: LD_INT 0
58672: ST_TO_ADDR
// uc_nation := 0 ;
58673: LD_ADDR_OWVAR 21
58677: PUSH
58678: LD_INT 0
58680: ST_TO_ADDR
// hc_class := class_tiger ;
58681: LD_ADDR_OWVAR 28
58685: PUSH
58686: LD_INT 14
58688: ST_TO_ADDR
// hc_gallery :=  ;
58689: LD_ADDR_OWVAR 33
58693: PUSH
58694: LD_STRING 
58696: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58697: LD_ADDR_OWVAR 35
58701: PUSH
58702: LD_VAR 0 1
58706: NEG
58707: PPUSH
58708: LD_VAR 0 1
58712: PPUSH
58713: CALL_OW 12
58717: ST_TO_ADDR
// end ;
58718: LD_VAR 0 2
58722: RET
// export function PrepareEnchidna ( ) ; begin
58723: LD_INT 0
58725: PPUSH
// uc_side := 0 ;
58726: LD_ADDR_OWVAR 20
58730: PUSH
58731: LD_INT 0
58733: ST_TO_ADDR
// uc_nation := 0 ;
58734: LD_ADDR_OWVAR 21
58738: PUSH
58739: LD_INT 0
58741: ST_TO_ADDR
// hc_class := class_baggie ;
58742: LD_ADDR_OWVAR 28
58746: PUSH
58747: LD_INT 13
58749: ST_TO_ADDR
// hc_gallery :=  ;
58750: LD_ADDR_OWVAR 33
58754: PUSH
58755: LD_STRING 
58757: ST_TO_ADDR
// end ;
58758: LD_VAR 0 1
58762: RET
// export function PrepareFrog ( ) ; begin
58763: LD_INT 0
58765: PPUSH
// uc_side := 0 ;
58766: LD_ADDR_OWVAR 20
58770: PUSH
58771: LD_INT 0
58773: ST_TO_ADDR
// uc_nation := 0 ;
58774: LD_ADDR_OWVAR 21
58778: PUSH
58779: LD_INT 0
58781: ST_TO_ADDR
// hc_class := class_frog ;
58782: LD_ADDR_OWVAR 28
58786: PUSH
58787: LD_INT 19
58789: ST_TO_ADDR
// hc_gallery :=  ;
58790: LD_ADDR_OWVAR 33
58794: PUSH
58795: LD_STRING 
58797: ST_TO_ADDR
// end ;
58798: LD_VAR 0 1
58802: RET
// export function PrepareFish ( ) ; begin
58803: LD_INT 0
58805: PPUSH
// uc_side := 0 ;
58806: LD_ADDR_OWVAR 20
58810: PUSH
58811: LD_INT 0
58813: ST_TO_ADDR
// uc_nation := 0 ;
58814: LD_ADDR_OWVAR 21
58818: PUSH
58819: LD_INT 0
58821: ST_TO_ADDR
// hc_class := class_fish ;
58822: LD_ADDR_OWVAR 28
58826: PUSH
58827: LD_INT 20
58829: ST_TO_ADDR
// hc_gallery :=  ;
58830: LD_ADDR_OWVAR 33
58834: PUSH
58835: LD_STRING 
58837: ST_TO_ADDR
// end ;
58838: LD_VAR 0 1
58842: RET
// export function PrepareBird ( ) ; begin
58843: LD_INT 0
58845: PPUSH
// uc_side := 0 ;
58846: LD_ADDR_OWVAR 20
58850: PUSH
58851: LD_INT 0
58853: ST_TO_ADDR
// uc_nation := 0 ;
58854: LD_ADDR_OWVAR 21
58858: PUSH
58859: LD_INT 0
58861: ST_TO_ADDR
// hc_class := class_phororhacos ;
58862: LD_ADDR_OWVAR 28
58866: PUSH
58867: LD_INT 18
58869: ST_TO_ADDR
// hc_gallery :=  ;
58870: LD_ADDR_OWVAR 33
58874: PUSH
58875: LD_STRING 
58877: ST_TO_ADDR
// end ;
58878: LD_VAR 0 1
58882: RET
// export function PrepareHorse ( ) ; begin
58883: LD_INT 0
58885: PPUSH
// uc_side := 0 ;
58886: LD_ADDR_OWVAR 20
58890: PUSH
58891: LD_INT 0
58893: ST_TO_ADDR
// uc_nation := 0 ;
58894: LD_ADDR_OWVAR 21
58898: PUSH
58899: LD_INT 0
58901: ST_TO_ADDR
// hc_class := class_horse ;
58902: LD_ADDR_OWVAR 28
58906: PUSH
58907: LD_INT 21
58909: ST_TO_ADDR
// hc_gallery :=  ;
58910: LD_ADDR_OWVAR 33
58914: PUSH
58915: LD_STRING 
58917: ST_TO_ADDR
// end ;
58918: LD_VAR 0 1
58922: RET
// export function PrepareMastodont ( ) ; begin
58923: LD_INT 0
58925: PPUSH
// uc_side := 0 ;
58926: LD_ADDR_OWVAR 20
58930: PUSH
58931: LD_INT 0
58933: ST_TO_ADDR
// uc_nation := 0 ;
58934: LD_ADDR_OWVAR 21
58938: PUSH
58939: LD_INT 0
58941: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58942: LD_ADDR_OWVAR 37
58946: PUSH
58947: LD_INT 31
58949: ST_TO_ADDR
// vc_control := control_rider ;
58950: LD_ADDR_OWVAR 38
58954: PUSH
58955: LD_INT 4
58957: ST_TO_ADDR
// end ;
58958: LD_VAR 0 1
58962: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58963: LD_INT 0
58965: PPUSH
58966: PPUSH
58967: PPUSH
// uc_side = 0 ;
58968: LD_ADDR_OWVAR 20
58972: PUSH
58973: LD_INT 0
58975: ST_TO_ADDR
// uc_nation = 0 ;
58976: LD_ADDR_OWVAR 21
58980: PUSH
58981: LD_INT 0
58983: ST_TO_ADDR
// InitHc_All ( ) ;
58984: CALL_OW 584
// InitVc ;
58988: CALL_OW 20
// if mastodonts then
58992: LD_VAR 0 6
58996: IFFALSE 59063
// for i = 1 to mastodonts do
58998: LD_ADDR_VAR 0 11
59002: PUSH
59003: DOUBLE
59004: LD_INT 1
59006: DEC
59007: ST_TO_ADDR
59008: LD_VAR 0 6
59012: PUSH
59013: FOR_TO
59014: IFFALSE 59061
// begin vc_chassis := 31 ;
59016: LD_ADDR_OWVAR 37
59020: PUSH
59021: LD_INT 31
59023: ST_TO_ADDR
// vc_control := control_rider ;
59024: LD_ADDR_OWVAR 38
59028: PUSH
59029: LD_INT 4
59031: ST_TO_ADDR
// animal := CreateVehicle ;
59032: LD_ADDR_VAR 0 12
59036: PUSH
59037: CALL_OW 45
59041: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59042: LD_VAR 0 12
59046: PPUSH
59047: LD_VAR 0 8
59051: PPUSH
59052: LD_INT 0
59054: PPUSH
59055: CALL 61191 0 3
// end ;
59059: GO 59013
59061: POP
59062: POP
// if horses then
59063: LD_VAR 0 5
59067: IFFALSE 59134
// for i = 1 to horses do
59069: LD_ADDR_VAR 0 11
59073: PUSH
59074: DOUBLE
59075: LD_INT 1
59077: DEC
59078: ST_TO_ADDR
59079: LD_VAR 0 5
59083: PUSH
59084: FOR_TO
59085: IFFALSE 59132
// begin hc_class := 21 ;
59087: LD_ADDR_OWVAR 28
59091: PUSH
59092: LD_INT 21
59094: ST_TO_ADDR
// hc_gallery :=  ;
59095: LD_ADDR_OWVAR 33
59099: PUSH
59100: LD_STRING 
59102: ST_TO_ADDR
// animal := CreateHuman ;
59103: LD_ADDR_VAR 0 12
59107: PUSH
59108: CALL_OW 44
59112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59113: LD_VAR 0 12
59117: PPUSH
59118: LD_VAR 0 8
59122: PPUSH
59123: LD_INT 0
59125: PPUSH
59126: CALL 61191 0 3
// end ;
59130: GO 59084
59132: POP
59133: POP
// if birds then
59134: LD_VAR 0 1
59138: IFFALSE 59205
// for i = 1 to birds do
59140: LD_ADDR_VAR 0 11
59144: PUSH
59145: DOUBLE
59146: LD_INT 1
59148: DEC
59149: ST_TO_ADDR
59150: LD_VAR 0 1
59154: PUSH
59155: FOR_TO
59156: IFFALSE 59203
// begin hc_class = 18 ;
59158: LD_ADDR_OWVAR 28
59162: PUSH
59163: LD_INT 18
59165: ST_TO_ADDR
// hc_gallery =  ;
59166: LD_ADDR_OWVAR 33
59170: PUSH
59171: LD_STRING 
59173: ST_TO_ADDR
// animal := CreateHuman ;
59174: LD_ADDR_VAR 0 12
59178: PUSH
59179: CALL_OW 44
59183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59184: LD_VAR 0 12
59188: PPUSH
59189: LD_VAR 0 8
59193: PPUSH
59194: LD_INT 0
59196: PPUSH
59197: CALL 61191 0 3
// end ;
59201: GO 59155
59203: POP
59204: POP
// if tigers then
59205: LD_VAR 0 2
59209: IFFALSE 59293
// for i = 1 to tigers do
59211: LD_ADDR_VAR 0 11
59215: PUSH
59216: DOUBLE
59217: LD_INT 1
59219: DEC
59220: ST_TO_ADDR
59221: LD_VAR 0 2
59225: PUSH
59226: FOR_TO
59227: IFFALSE 59291
// begin hc_class = class_tiger ;
59229: LD_ADDR_OWVAR 28
59233: PUSH
59234: LD_INT 14
59236: ST_TO_ADDR
// hc_gallery =  ;
59237: LD_ADDR_OWVAR 33
59241: PUSH
59242: LD_STRING 
59244: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59245: LD_ADDR_OWVAR 35
59249: PUSH
59250: LD_INT 7
59252: NEG
59253: PPUSH
59254: LD_INT 7
59256: PPUSH
59257: CALL_OW 12
59261: ST_TO_ADDR
// animal := CreateHuman ;
59262: LD_ADDR_VAR 0 12
59266: PUSH
59267: CALL_OW 44
59271: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59272: LD_VAR 0 12
59276: PPUSH
59277: LD_VAR 0 8
59281: PPUSH
59282: LD_INT 0
59284: PPUSH
59285: CALL 61191 0 3
// end ;
59289: GO 59226
59291: POP
59292: POP
// if apemans then
59293: LD_VAR 0 3
59297: IFFALSE 59420
// for i = 1 to apemans do
59299: LD_ADDR_VAR 0 11
59303: PUSH
59304: DOUBLE
59305: LD_INT 1
59307: DEC
59308: ST_TO_ADDR
59309: LD_VAR 0 3
59313: PUSH
59314: FOR_TO
59315: IFFALSE 59418
// begin hc_class = class_apeman ;
59317: LD_ADDR_OWVAR 28
59321: PUSH
59322: LD_INT 12
59324: ST_TO_ADDR
// hc_gallery =  ;
59325: LD_ADDR_OWVAR 33
59329: PUSH
59330: LD_STRING 
59332: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59333: LD_ADDR_OWVAR 35
59337: PUSH
59338: LD_INT 2
59340: NEG
59341: PPUSH
59342: LD_INT 2
59344: PPUSH
59345: CALL_OW 12
59349: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59350: LD_ADDR_OWVAR 31
59354: PUSH
59355: LD_INT 1
59357: PPUSH
59358: LD_INT 3
59360: PPUSH
59361: CALL_OW 12
59365: PUSH
59366: LD_INT 1
59368: PPUSH
59369: LD_INT 3
59371: PPUSH
59372: CALL_OW 12
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: ST_TO_ADDR
// animal := CreateHuman ;
59389: LD_ADDR_VAR 0 12
59393: PUSH
59394: CALL_OW 44
59398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59399: LD_VAR 0 12
59403: PPUSH
59404: LD_VAR 0 8
59408: PPUSH
59409: LD_INT 0
59411: PPUSH
59412: CALL 61191 0 3
// end ;
59416: GO 59314
59418: POP
59419: POP
// if enchidnas then
59420: LD_VAR 0 4
59424: IFFALSE 59491
// for i = 1 to enchidnas do
59426: LD_ADDR_VAR 0 11
59430: PUSH
59431: DOUBLE
59432: LD_INT 1
59434: DEC
59435: ST_TO_ADDR
59436: LD_VAR 0 4
59440: PUSH
59441: FOR_TO
59442: IFFALSE 59489
// begin hc_class = 13 ;
59444: LD_ADDR_OWVAR 28
59448: PUSH
59449: LD_INT 13
59451: ST_TO_ADDR
// hc_gallery =  ;
59452: LD_ADDR_OWVAR 33
59456: PUSH
59457: LD_STRING 
59459: ST_TO_ADDR
// animal := CreateHuman ;
59460: LD_ADDR_VAR 0 12
59464: PUSH
59465: CALL_OW 44
59469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59470: LD_VAR 0 12
59474: PPUSH
59475: LD_VAR 0 8
59479: PPUSH
59480: LD_INT 0
59482: PPUSH
59483: CALL 61191 0 3
// end ;
59487: GO 59441
59489: POP
59490: POP
// if fishes then
59491: LD_VAR 0 7
59495: IFFALSE 59562
// for i = 1 to fishes do
59497: LD_ADDR_VAR 0 11
59501: PUSH
59502: DOUBLE
59503: LD_INT 1
59505: DEC
59506: ST_TO_ADDR
59507: LD_VAR 0 7
59511: PUSH
59512: FOR_TO
59513: IFFALSE 59560
// begin hc_class = 20 ;
59515: LD_ADDR_OWVAR 28
59519: PUSH
59520: LD_INT 20
59522: ST_TO_ADDR
// hc_gallery =  ;
59523: LD_ADDR_OWVAR 33
59527: PUSH
59528: LD_STRING 
59530: ST_TO_ADDR
// animal := CreateHuman ;
59531: LD_ADDR_VAR 0 12
59535: PUSH
59536: CALL_OW 44
59540: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59541: LD_VAR 0 12
59545: PPUSH
59546: LD_VAR 0 9
59550: PPUSH
59551: LD_INT 0
59553: PPUSH
59554: CALL 61191 0 3
// end ;
59558: GO 59512
59560: POP
59561: POP
// end ;
59562: LD_VAR 0 10
59566: RET
// export function WantHeal ( sci , unit ) ; begin
59567: LD_INT 0
59569: PPUSH
// if GetTaskList ( sci ) > 0 then
59570: LD_VAR 0 1
59574: PPUSH
59575: CALL_OW 437
59579: PUSH
59580: LD_INT 0
59582: GREATER
59583: IFFALSE 59653
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59585: LD_VAR 0 1
59589: PPUSH
59590: CALL_OW 437
59594: PUSH
59595: LD_INT 1
59597: ARRAY
59598: PUSH
59599: LD_INT 1
59601: ARRAY
59602: PUSH
59603: LD_STRING l
59605: EQUAL
59606: PUSH
59607: LD_VAR 0 1
59611: PPUSH
59612: CALL_OW 437
59616: PUSH
59617: LD_INT 1
59619: ARRAY
59620: PUSH
59621: LD_INT 4
59623: ARRAY
59624: PUSH
59625: LD_VAR 0 2
59629: EQUAL
59630: AND
59631: IFFALSE 59643
// result := true else
59633: LD_ADDR_VAR 0 3
59637: PUSH
59638: LD_INT 1
59640: ST_TO_ADDR
59641: GO 59651
// result := false ;
59643: LD_ADDR_VAR 0 3
59647: PUSH
59648: LD_INT 0
59650: ST_TO_ADDR
// end else
59651: GO 59661
// result := false ;
59653: LD_ADDR_VAR 0 3
59657: PUSH
59658: LD_INT 0
59660: ST_TO_ADDR
// end ;
59661: LD_VAR 0 3
59665: RET
// export function HealTarget ( sci ) ; begin
59666: LD_INT 0
59668: PPUSH
// if not sci then
59669: LD_VAR 0 1
59673: NOT
59674: IFFALSE 59678
// exit ;
59676: GO 59743
// result := 0 ;
59678: LD_ADDR_VAR 0 2
59682: PUSH
59683: LD_INT 0
59685: ST_TO_ADDR
// if GetTaskList ( sci ) then
59686: LD_VAR 0 1
59690: PPUSH
59691: CALL_OW 437
59695: IFFALSE 59743
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59697: LD_VAR 0 1
59701: PPUSH
59702: CALL_OW 437
59706: PUSH
59707: LD_INT 1
59709: ARRAY
59710: PUSH
59711: LD_INT 1
59713: ARRAY
59714: PUSH
59715: LD_STRING l
59717: EQUAL
59718: IFFALSE 59743
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59720: LD_ADDR_VAR 0 2
59724: PUSH
59725: LD_VAR 0 1
59729: PPUSH
59730: CALL_OW 437
59734: PUSH
59735: LD_INT 1
59737: ARRAY
59738: PUSH
59739: LD_INT 4
59741: ARRAY
59742: ST_TO_ADDR
// end ;
59743: LD_VAR 0 2
59747: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59748: LD_INT 0
59750: PPUSH
59751: PPUSH
59752: PPUSH
59753: PPUSH
// if not base_units then
59754: LD_VAR 0 1
59758: NOT
59759: IFFALSE 59763
// exit ;
59761: GO 59850
// result := false ;
59763: LD_ADDR_VAR 0 2
59767: PUSH
59768: LD_INT 0
59770: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59771: LD_ADDR_VAR 0 5
59775: PUSH
59776: LD_VAR 0 1
59780: PPUSH
59781: LD_INT 21
59783: PUSH
59784: LD_INT 3
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PPUSH
59791: CALL_OW 72
59795: ST_TO_ADDR
// if not tmp then
59796: LD_VAR 0 5
59800: NOT
59801: IFFALSE 59805
// exit ;
59803: GO 59850
// for i in tmp do
59805: LD_ADDR_VAR 0 3
59809: PUSH
59810: LD_VAR 0 5
59814: PUSH
59815: FOR_IN
59816: IFFALSE 59848
// begin result := EnemyInRange ( i , 22 ) ;
59818: LD_ADDR_VAR 0 2
59822: PUSH
59823: LD_VAR 0 3
59827: PPUSH
59828: LD_INT 22
59830: PPUSH
59831: CALL 57437 0 2
59835: ST_TO_ADDR
// if result then
59836: LD_VAR 0 2
59840: IFFALSE 59846
// exit ;
59842: POP
59843: POP
59844: GO 59850
// end ;
59846: GO 59815
59848: POP
59849: POP
// end ;
59850: LD_VAR 0 2
59854: RET
// export function FilterByTag ( units , tag ) ; begin
59855: LD_INT 0
59857: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59858: LD_ADDR_VAR 0 3
59862: PUSH
59863: LD_VAR 0 1
59867: PPUSH
59868: LD_INT 120
59870: PUSH
59871: LD_VAR 0 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PPUSH
59880: CALL_OW 72
59884: ST_TO_ADDR
// end ;
59885: LD_VAR 0 3
59889: RET
// export function IsDriver ( un ) ; begin
59890: LD_INT 0
59892: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59893: LD_ADDR_VAR 0 2
59897: PUSH
59898: LD_VAR 0 1
59902: PUSH
59903: LD_INT 55
59905: PUSH
59906: EMPTY
59907: LIST
59908: PPUSH
59909: CALL_OW 69
59913: IN
59914: ST_TO_ADDR
// end ;
59915: LD_VAR 0 2
59919: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59920: LD_INT 0
59922: PPUSH
59923: PPUSH
// list := [ ] ;
59924: LD_ADDR_VAR 0 5
59928: PUSH
59929: EMPTY
59930: ST_TO_ADDR
// case d of 0 :
59931: LD_VAR 0 3
59935: PUSH
59936: LD_INT 0
59938: DOUBLE
59939: EQUAL
59940: IFTRUE 59944
59942: GO 60077
59944: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59945: LD_ADDR_VAR 0 5
59949: PUSH
59950: LD_VAR 0 1
59954: PUSH
59955: LD_INT 4
59957: MINUS
59958: PUSH
59959: LD_VAR 0 2
59963: PUSH
59964: LD_INT 4
59966: MINUS
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: LIST
59975: PUSH
59976: LD_VAR 0 1
59980: PUSH
59981: LD_INT 3
59983: MINUS
59984: PUSH
59985: LD_VAR 0 2
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: PUSH
59998: LD_VAR 0 1
60002: PUSH
60003: LD_INT 4
60005: PLUS
60006: PUSH
60007: LD_VAR 0 2
60011: PUSH
60012: LD_INT 4
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: PUSH
60020: LD_VAR 0 1
60024: PUSH
60025: LD_INT 3
60027: PLUS
60028: PUSH
60029: LD_VAR 0 2
60033: PUSH
60034: LD_INT 3
60036: PLUS
60037: PUSH
60038: LD_INT 5
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: LIST
60045: PUSH
60046: LD_VAR 0 1
60050: PUSH
60051: LD_VAR 0 2
60055: PUSH
60056: LD_INT 4
60058: PLUS
60059: PUSH
60060: LD_INT 0
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: ST_TO_ADDR
// end ; 1 :
60075: GO 60775
60077: LD_INT 1
60079: DOUBLE
60080: EQUAL
60081: IFTRUE 60085
60083: GO 60218
60085: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60086: LD_ADDR_VAR 0 5
60090: PUSH
60091: LD_VAR 0 1
60095: PUSH
60096: LD_VAR 0 2
60100: PUSH
60101: LD_INT 4
60103: MINUS
60104: PUSH
60105: LD_INT 3
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: PUSH
60113: LD_VAR 0 1
60117: PUSH
60118: LD_INT 3
60120: MINUS
60121: PUSH
60122: LD_VAR 0 2
60126: PUSH
60127: LD_INT 3
60129: MINUS
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: LIST
60138: PUSH
60139: LD_VAR 0 1
60143: PUSH
60144: LD_INT 4
60146: MINUS
60147: PUSH
60148: LD_VAR 0 2
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: LIST
60160: PUSH
60161: LD_VAR 0 1
60165: PUSH
60166: LD_VAR 0 2
60170: PUSH
60171: LD_INT 3
60173: PLUS
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: LIST
60182: PUSH
60183: LD_VAR 0 1
60187: PUSH
60188: LD_INT 4
60190: PLUS
60191: PUSH
60192: LD_VAR 0 2
60196: PUSH
60197: LD_INT 4
60199: PLUS
60200: PUSH
60201: LD_INT 5
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: ST_TO_ADDR
// end ; 2 :
60216: GO 60775
60218: LD_INT 2
60220: DOUBLE
60221: EQUAL
60222: IFTRUE 60226
60224: GO 60355
60226: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60227: LD_ADDR_VAR 0 5
60231: PUSH
60232: LD_VAR 0 1
60236: PUSH
60237: LD_VAR 0 2
60241: PUSH
60242: LD_INT 3
60244: MINUS
60245: PUSH
60246: LD_INT 3
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: PUSH
60254: LD_VAR 0 1
60258: PUSH
60259: LD_INT 4
60261: PLUS
60262: PUSH
60263: LD_VAR 0 2
60267: PUSH
60268: LD_INT 4
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: PUSH
60276: LD_VAR 0 1
60280: PUSH
60281: LD_VAR 0 2
60285: PUSH
60286: LD_INT 4
60288: PLUS
60289: PUSH
60290: LD_INT 0
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: LIST
60297: PUSH
60298: LD_VAR 0 1
60302: PUSH
60303: LD_INT 3
60305: MINUS
60306: PUSH
60307: LD_VAR 0 2
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: PUSH
60320: LD_VAR 0 1
60324: PUSH
60325: LD_INT 4
60327: MINUS
60328: PUSH
60329: LD_VAR 0 2
60333: PUSH
60334: LD_INT 4
60336: MINUS
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: LIST
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: ST_TO_ADDR
// end ; 3 :
60353: GO 60775
60355: LD_INT 3
60357: DOUBLE
60358: EQUAL
60359: IFTRUE 60363
60361: GO 60496
60363: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60364: LD_ADDR_VAR 0 5
60368: PUSH
60369: LD_VAR 0 1
60373: PUSH
60374: LD_INT 3
60376: PLUS
60377: PUSH
60378: LD_VAR 0 2
60382: PUSH
60383: LD_INT 4
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: LD_VAR 0 1
60395: PUSH
60396: LD_INT 4
60398: PLUS
60399: PUSH
60400: LD_VAR 0 2
60404: PUSH
60405: LD_INT 4
60407: PLUS
60408: PUSH
60409: LD_INT 5
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: PUSH
60417: LD_VAR 0 1
60421: PUSH
60422: LD_INT 4
60424: MINUS
60425: PUSH
60426: LD_VAR 0 2
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: LIST
60438: PUSH
60439: LD_VAR 0 1
60443: PUSH
60444: LD_VAR 0 2
60448: PUSH
60449: LD_INT 4
60451: MINUS
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: LIST
60460: PUSH
60461: LD_VAR 0 1
60465: PUSH
60466: LD_INT 3
60468: MINUS
60469: PUSH
60470: LD_VAR 0 2
60474: PUSH
60475: LD_INT 3
60477: MINUS
60478: PUSH
60479: LD_INT 2
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: ST_TO_ADDR
// end ; 4 :
60494: GO 60775
60496: LD_INT 4
60498: DOUBLE
60499: EQUAL
60500: IFTRUE 60504
60502: GO 60637
60504: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60505: LD_ADDR_VAR 0 5
60509: PUSH
60510: LD_VAR 0 1
60514: PUSH
60515: LD_VAR 0 2
60519: PUSH
60520: LD_INT 4
60522: PLUS
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: PUSH
60532: LD_VAR 0 1
60536: PUSH
60537: LD_INT 3
60539: PLUS
60540: PUSH
60541: LD_VAR 0 2
60545: PUSH
60546: LD_INT 3
60548: PLUS
60549: PUSH
60550: LD_INT 5
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: PUSH
60558: LD_VAR 0 1
60562: PUSH
60563: LD_INT 4
60565: PLUS
60566: PUSH
60567: LD_VAR 0 2
60571: PUSH
60572: LD_INT 4
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: LIST
60579: PUSH
60580: LD_VAR 0 1
60584: PUSH
60585: LD_VAR 0 2
60589: PUSH
60590: LD_INT 3
60592: MINUS
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: LIST
60601: PUSH
60602: LD_VAR 0 1
60606: PUSH
60607: LD_INT 4
60609: MINUS
60610: PUSH
60611: LD_VAR 0 2
60615: PUSH
60616: LD_INT 4
60618: MINUS
60619: PUSH
60620: LD_INT 2
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: LIST
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: ST_TO_ADDR
// end ; 5 :
60635: GO 60775
60637: LD_INT 5
60639: DOUBLE
60640: EQUAL
60641: IFTRUE 60645
60643: GO 60774
60645: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60646: LD_ADDR_VAR 0 5
60650: PUSH
60651: LD_VAR 0 1
60655: PUSH
60656: LD_INT 4
60658: MINUS
60659: PUSH
60660: LD_VAR 0 2
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: LD_VAR 0 1
60677: PUSH
60678: LD_VAR 0 2
60682: PUSH
60683: LD_INT 4
60685: MINUS
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: LIST
60694: PUSH
60695: LD_VAR 0 1
60699: PUSH
60700: LD_INT 4
60702: PLUS
60703: PUSH
60704: LD_VAR 0 2
60708: PUSH
60709: LD_INT 4
60711: PLUS
60712: PUSH
60713: LD_INT 5
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: LIST
60720: PUSH
60721: LD_VAR 0 1
60725: PUSH
60726: LD_INT 3
60728: PLUS
60729: PUSH
60730: LD_VAR 0 2
60734: PUSH
60735: LD_INT 4
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: PUSH
60743: LD_VAR 0 1
60747: PUSH
60748: LD_VAR 0 2
60752: PUSH
60753: LD_INT 3
60755: PLUS
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: ST_TO_ADDR
// end ; end ;
60772: GO 60775
60774: POP
// result := list ;
60775: LD_ADDR_VAR 0 4
60779: PUSH
60780: LD_VAR 0 5
60784: ST_TO_ADDR
// end ;
60785: LD_VAR 0 4
60789: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60790: LD_INT 0
60792: PPUSH
60793: PPUSH
60794: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60795: LD_VAR 0 1
60799: NOT
60800: PUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_INT 1
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 3
60814: PUSH
60815: LD_INT 4
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: IN
60824: NOT
60825: OR
60826: IFFALSE 60830
// exit ;
60828: GO 60913
// tmp := [ ] ;
60830: LD_ADDR_VAR 0 5
60834: PUSH
60835: EMPTY
60836: ST_TO_ADDR
// for i in units do
60837: LD_ADDR_VAR 0 4
60841: PUSH
60842: LD_VAR 0 1
60846: PUSH
60847: FOR_IN
60848: IFFALSE 60882
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60850: LD_ADDR_VAR 0 5
60854: PUSH
60855: LD_VAR 0 5
60859: PPUSH
60860: LD_VAR 0 4
60864: PPUSH
60865: LD_VAR 0 2
60869: PPUSH
60870: CALL_OW 259
60874: PPUSH
60875: CALL 62274 0 2
60879: ST_TO_ADDR
60880: GO 60847
60882: POP
60883: POP
// if not tmp then
60884: LD_VAR 0 5
60888: NOT
60889: IFFALSE 60893
// exit ;
60891: GO 60913
// result := SortListByListDesc ( units , tmp ) ;
60893: LD_ADDR_VAR 0 3
60897: PUSH
60898: LD_VAR 0 1
60902: PPUSH
60903: LD_VAR 0 5
60907: PPUSH
60908: CALL_OW 77
60912: ST_TO_ADDR
// end ;
60913: LD_VAR 0 3
60917: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60918: LD_INT 0
60920: PPUSH
60921: PPUSH
60922: PPUSH
// result := false ;
60923: LD_ADDR_VAR 0 3
60927: PUSH
60928: LD_INT 0
60930: ST_TO_ADDR
// if not building then
60931: LD_VAR 0 2
60935: NOT
60936: IFFALSE 60940
// exit ;
60938: GO 61078
// x := GetX ( building ) ;
60940: LD_ADDR_VAR 0 4
60944: PUSH
60945: LD_VAR 0 2
60949: PPUSH
60950: CALL_OW 250
60954: ST_TO_ADDR
// y := GetY ( building ) ;
60955: LD_ADDR_VAR 0 5
60959: PUSH
60960: LD_VAR 0 2
60964: PPUSH
60965: CALL_OW 251
60969: ST_TO_ADDR
// if not x or not y then
60970: LD_VAR 0 4
60974: NOT
60975: PUSH
60976: LD_VAR 0 5
60980: NOT
60981: OR
60982: IFFALSE 60986
// exit ;
60984: GO 61078
// if GetTaskList ( unit ) then
60986: LD_VAR 0 1
60990: PPUSH
60991: CALL_OW 437
60995: IFFALSE 61078
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60997: LD_STRING e
60999: PUSH
61000: LD_VAR 0 1
61004: PPUSH
61005: CALL_OW 437
61009: PUSH
61010: LD_INT 1
61012: ARRAY
61013: PUSH
61014: LD_INT 1
61016: ARRAY
61017: EQUAL
61018: PUSH
61019: LD_VAR 0 4
61023: PUSH
61024: LD_VAR 0 1
61028: PPUSH
61029: CALL_OW 437
61033: PUSH
61034: LD_INT 1
61036: ARRAY
61037: PUSH
61038: LD_INT 2
61040: ARRAY
61041: EQUAL
61042: AND
61043: PUSH
61044: LD_VAR 0 5
61048: PUSH
61049: LD_VAR 0 1
61053: PPUSH
61054: CALL_OW 437
61058: PUSH
61059: LD_INT 1
61061: ARRAY
61062: PUSH
61063: LD_INT 3
61065: ARRAY
61066: EQUAL
61067: AND
61068: IFFALSE 61078
// result := true end ;
61070: LD_ADDR_VAR 0 3
61074: PUSH
61075: LD_INT 1
61077: ST_TO_ADDR
// end ;
61078: LD_VAR 0 3
61082: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61083: LD_INT 0
61085: PPUSH
// result := false ;
61086: LD_ADDR_VAR 0 4
61090: PUSH
61091: LD_INT 0
61093: ST_TO_ADDR
// if GetTaskList ( unit ) then
61094: LD_VAR 0 1
61098: PPUSH
61099: CALL_OW 437
61103: IFFALSE 61186
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61105: LD_STRING M
61107: PUSH
61108: LD_VAR 0 1
61112: PPUSH
61113: CALL_OW 437
61117: PUSH
61118: LD_INT 1
61120: ARRAY
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: EQUAL
61126: PUSH
61127: LD_VAR 0 2
61131: PUSH
61132: LD_VAR 0 1
61136: PPUSH
61137: CALL_OW 437
61141: PUSH
61142: LD_INT 1
61144: ARRAY
61145: PUSH
61146: LD_INT 2
61148: ARRAY
61149: EQUAL
61150: AND
61151: PUSH
61152: LD_VAR 0 3
61156: PUSH
61157: LD_VAR 0 1
61161: PPUSH
61162: CALL_OW 437
61166: PUSH
61167: LD_INT 1
61169: ARRAY
61170: PUSH
61171: LD_INT 3
61173: ARRAY
61174: EQUAL
61175: AND
61176: IFFALSE 61186
// result := true ;
61178: LD_ADDR_VAR 0 4
61182: PUSH
61183: LD_INT 1
61185: ST_TO_ADDR
// end ; end ;
61186: LD_VAR 0 4
61190: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61191: LD_INT 0
61193: PPUSH
61194: PPUSH
61195: PPUSH
61196: PPUSH
// if not unit or not area then
61197: LD_VAR 0 1
61201: NOT
61202: PUSH
61203: LD_VAR 0 2
61207: NOT
61208: OR
61209: IFFALSE 61213
// exit ;
61211: GO 61377
// tmp := AreaToList ( area , i ) ;
61213: LD_ADDR_VAR 0 6
61217: PUSH
61218: LD_VAR 0 2
61222: PPUSH
61223: LD_VAR 0 5
61227: PPUSH
61228: CALL_OW 517
61232: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61233: LD_ADDR_VAR 0 5
61237: PUSH
61238: DOUBLE
61239: LD_INT 1
61241: DEC
61242: ST_TO_ADDR
61243: LD_VAR 0 6
61247: PUSH
61248: LD_INT 1
61250: ARRAY
61251: PUSH
61252: FOR_TO
61253: IFFALSE 61375
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61255: LD_ADDR_VAR 0 7
61259: PUSH
61260: LD_VAR 0 6
61264: PUSH
61265: LD_INT 1
61267: ARRAY
61268: PUSH
61269: LD_VAR 0 5
61273: ARRAY
61274: PUSH
61275: LD_VAR 0 6
61279: PUSH
61280: LD_INT 2
61282: ARRAY
61283: PUSH
61284: LD_VAR 0 5
61288: ARRAY
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61294: LD_VAR 0 7
61298: PUSH
61299: LD_INT 1
61301: ARRAY
61302: PPUSH
61303: LD_VAR 0 7
61307: PUSH
61308: LD_INT 2
61310: ARRAY
61311: PPUSH
61312: CALL_OW 428
61316: PUSH
61317: LD_INT 0
61319: EQUAL
61320: IFFALSE 61373
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61322: LD_VAR 0 1
61326: PPUSH
61327: LD_VAR 0 7
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PPUSH
61336: LD_VAR 0 7
61340: PUSH
61341: LD_INT 2
61343: ARRAY
61344: PPUSH
61345: LD_VAR 0 3
61349: PPUSH
61350: CALL_OW 48
// result := IsPlaced ( unit ) ;
61354: LD_ADDR_VAR 0 4
61358: PUSH
61359: LD_VAR 0 1
61363: PPUSH
61364: CALL_OW 305
61368: ST_TO_ADDR
// exit ;
61369: POP
61370: POP
61371: GO 61377
// end ; end ;
61373: GO 61252
61375: POP
61376: POP
// end ;
61377: LD_VAR 0 4
61381: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61382: LD_INT 0
61384: PPUSH
61385: PPUSH
61386: PPUSH
// if not side or side > 8 then
61387: LD_VAR 0 1
61391: NOT
61392: PUSH
61393: LD_VAR 0 1
61397: PUSH
61398: LD_INT 8
61400: GREATER
61401: OR
61402: IFFALSE 61406
// exit ;
61404: GO 61593
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61406: LD_ADDR_VAR 0 4
61410: PUSH
61411: LD_INT 22
61413: PUSH
61414: LD_VAR 0 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 21
61425: PUSH
61426: LD_INT 3
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PPUSH
61437: CALL_OW 69
61441: ST_TO_ADDR
// if not tmp then
61442: LD_VAR 0 4
61446: NOT
61447: IFFALSE 61451
// exit ;
61449: GO 61593
// enable_addtolog := true ;
61451: LD_ADDR_OWVAR 81
61455: PUSH
61456: LD_INT 1
61458: ST_TO_ADDR
// AddToLog ( [ ) ;
61459: LD_STRING [
61461: PPUSH
61462: CALL_OW 561
// for i in tmp do
61466: LD_ADDR_VAR 0 3
61470: PUSH
61471: LD_VAR 0 4
61475: PUSH
61476: FOR_IN
61477: IFFALSE 61584
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61479: LD_STRING [
61481: PUSH
61482: LD_VAR 0 3
61486: PPUSH
61487: CALL_OW 266
61491: STR
61492: PUSH
61493: LD_STRING , 
61495: STR
61496: PUSH
61497: LD_VAR 0 3
61501: PPUSH
61502: CALL_OW 250
61506: STR
61507: PUSH
61508: LD_STRING , 
61510: STR
61511: PUSH
61512: LD_VAR 0 3
61516: PPUSH
61517: CALL_OW 251
61521: STR
61522: PUSH
61523: LD_STRING , 
61525: STR
61526: PUSH
61527: LD_VAR 0 3
61531: PPUSH
61532: CALL_OW 254
61536: STR
61537: PUSH
61538: LD_STRING , 
61540: STR
61541: PUSH
61542: LD_VAR 0 3
61546: PPUSH
61547: LD_INT 1
61549: PPUSH
61550: CALL_OW 268
61554: STR
61555: PUSH
61556: LD_STRING , 
61558: STR
61559: PUSH
61560: LD_VAR 0 3
61564: PPUSH
61565: LD_INT 2
61567: PPUSH
61568: CALL_OW 268
61572: STR
61573: PUSH
61574: LD_STRING ],
61576: STR
61577: PPUSH
61578: CALL_OW 561
// end ;
61582: GO 61476
61584: POP
61585: POP
// AddToLog ( ]; ) ;
61586: LD_STRING ];
61588: PPUSH
61589: CALL_OW 561
// end ;
61593: LD_VAR 0 2
61597: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61598: LD_INT 0
61600: PPUSH
61601: PPUSH
61602: PPUSH
61603: PPUSH
61604: PPUSH
// if not area or not rate or not max then
61605: LD_VAR 0 1
61609: NOT
61610: PUSH
61611: LD_VAR 0 2
61615: NOT
61616: OR
61617: PUSH
61618: LD_VAR 0 4
61622: NOT
61623: OR
61624: IFFALSE 61628
// exit ;
61626: GO 61817
// while 1 do
61628: LD_INT 1
61630: IFFALSE 61817
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61632: LD_ADDR_VAR 0 9
61636: PUSH
61637: LD_VAR 0 1
61641: PPUSH
61642: LD_INT 1
61644: PPUSH
61645: CALL_OW 287
61649: PUSH
61650: LD_INT 10
61652: MUL
61653: ST_TO_ADDR
// r := rate / 10 ;
61654: LD_ADDR_VAR 0 7
61658: PUSH
61659: LD_VAR 0 2
61663: PUSH
61664: LD_INT 10
61666: DIVREAL
61667: ST_TO_ADDR
// time := 1 1$00 ;
61668: LD_ADDR_VAR 0 8
61672: PUSH
61673: LD_INT 2100
61675: ST_TO_ADDR
// if amount < min then
61676: LD_VAR 0 9
61680: PUSH
61681: LD_VAR 0 3
61685: LESS
61686: IFFALSE 61704
// r := r * 2 else
61688: LD_ADDR_VAR 0 7
61692: PUSH
61693: LD_VAR 0 7
61697: PUSH
61698: LD_INT 2
61700: MUL
61701: ST_TO_ADDR
61702: GO 61730
// if amount > max then
61704: LD_VAR 0 9
61708: PUSH
61709: LD_VAR 0 4
61713: GREATER
61714: IFFALSE 61730
// r := r / 2 ;
61716: LD_ADDR_VAR 0 7
61720: PUSH
61721: LD_VAR 0 7
61725: PUSH
61726: LD_INT 2
61728: DIVREAL
61729: ST_TO_ADDR
// time := time / r ;
61730: LD_ADDR_VAR 0 8
61734: PUSH
61735: LD_VAR 0 8
61739: PUSH
61740: LD_VAR 0 7
61744: DIVREAL
61745: ST_TO_ADDR
// if time < 0 then
61746: LD_VAR 0 8
61750: PUSH
61751: LD_INT 0
61753: LESS
61754: IFFALSE 61771
// time := time * - 1 ;
61756: LD_ADDR_VAR 0 8
61760: PUSH
61761: LD_VAR 0 8
61765: PUSH
61766: LD_INT 1
61768: NEG
61769: MUL
61770: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61771: LD_VAR 0 8
61775: PUSH
61776: LD_INT 35
61778: PPUSH
61779: LD_INT 875
61781: PPUSH
61782: CALL_OW 12
61786: PLUS
61787: PPUSH
61788: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61792: LD_INT 1
61794: PPUSH
61795: LD_INT 5
61797: PPUSH
61798: CALL_OW 12
61802: PPUSH
61803: LD_VAR 0 1
61807: PPUSH
61808: LD_INT 1
61810: PPUSH
61811: CALL_OW 55
// end ;
61815: GO 61628
// end ;
61817: LD_VAR 0 5
61821: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61822: LD_INT 0
61824: PPUSH
61825: PPUSH
61826: PPUSH
61827: PPUSH
61828: PPUSH
61829: PPUSH
61830: PPUSH
61831: PPUSH
// if not turrets or not factories then
61832: LD_VAR 0 1
61836: NOT
61837: PUSH
61838: LD_VAR 0 2
61842: NOT
61843: OR
61844: IFFALSE 61848
// exit ;
61846: GO 62155
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61848: LD_ADDR_VAR 0 10
61852: PUSH
61853: LD_INT 5
61855: PUSH
61856: LD_INT 6
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: LD_INT 4
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: LD_INT 5
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 24
61890: PUSH
61891: LD_INT 25
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 23
61900: PUSH
61901: LD_INT 27
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 42
61914: PUSH
61915: LD_INT 43
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 44
61924: PUSH
61925: LD_INT 46
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 45
61934: PUSH
61935: LD_INT 47
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: LIST
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: LIST
61951: ST_TO_ADDR
// result := [ ] ;
61952: LD_ADDR_VAR 0 3
61956: PUSH
61957: EMPTY
61958: ST_TO_ADDR
// for i in turrets do
61959: LD_ADDR_VAR 0 4
61963: PUSH
61964: LD_VAR 0 1
61968: PUSH
61969: FOR_IN
61970: IFFALSE 62153
// begin nat := GetNation ( i ) ;
61972: LD_ADDR_VAR 0 7
61976: PUSH
61977: LD_VAR 0 4
61981: PPUSH
61982: CALL_OW 248
61986: ST_TO_ADDR
// weapon := 0 ;
61987: LD_ADDR_VAR 0 8
61991: PUSH
61992: LD_INT 0
61994: ST_TO_ADDR
// if not nat then
61995: LD_VAR 0 7
61999: NOT
62000: IFFALSE 62004
// continue ;
62002: GO 61969
// for j in list [ nat ] do
62004: LD_ADDR_VAR 0 5
62008: PUSH
62009: LD_VAR 0 10
62013: PUSH
62014: LD_VAR 0 7
62018: ARRAY
62019: PUSH
62020: FOR_IN
62021: IFFALSE 62062
// if GetBWeapon ( i ) = j [ 1 ] then
62023: LD_VAR 0 4
62027: PPUSH
62028: CALL_OW 269
62032: PUSH
62033: LD_VAR 0 5
62037: PUSH
62038: LD_INT 1
62040: ARRAY
62041: EQUAL
62042: IFFALSE 62060
// begin weapon := j [ 2 ] ;
62044: LD_ADDR_VAR 0 8
62048: PUSH
62049: LD_VAR 0 5
62053: PUSH
62054: LD_INT 2
62056: ARRAY
62057: ST_TO_ADDR
// break ;
62058: GO 62062
// end ;
62060: GO 62020
62062: POP
62063: POP
// if not weapon then
62064: LD_VAR 0 8
62068: NOT
62069: IFFALSE 62073
// continue ;
62071: GO 61969
// for k in factories do
62073: LD_ADDR_VAR 0 6
62077: PUSH
62078: LD_VAR 0 2
62082: PUSH
62083: FOR_IN
62084: IFFALSE 62149
// begin weapons := AvailableWeaponList ( k ) ;
62086: LD_ADDR_VAR 0 9
62090: PUSH
62091: LD_VAR 0 6
62095: PPUSH
62096: CALL_OW 478
62100: ST_TO_ADDR
// if not weapons then
62101: LD_VAR 0 9
62105: NOT
62106: IFFALSE 62110
// continue ;
62108: GO 62083
// if weapon in weapons then
62110: LD_VAR 0 8
62114: PUSH
62115: LD_VAR 0 9
62119: IN
62120: IFFALSE 62147
// begin result := [ i , weapon ] ;
62122: LD_ADDR_VAR 0 3
62126: PUSH
62127: LD_VAR 0 4
62131: PUSH
62132: LD_VAR 0 8
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: ST_TO_ADDR
// exit ;
62141: POP
62142: POP
62143: POP
62144: POP
62145: GO 62155
// end ; end ;
62147: GO 62083
62149: POP
62150: POP
// end ;
62151: GO 61969
62153: POP
62154: POP
// end ;
62155: LD_VAR 0 3
62159: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62160: LD_INT 0
62162: PPUSH
// if not side or side > 8 then
62163: LD_VAR 0 3
62167: NOT
62168: PUSH
62169: LD_VAR 0 3
62173: PUSH
62174: LD_INT 8
62176: GREATER
62177: OR
62178: IFFALSE 62182
// exit ;
62180: GO 62241
// if not range then
62182: LD_VAR 0 4
62186: NOT
62187: IFFALSE 62198
// range := - 12 ;
62189: LD_ADDR_VAR 0 4
62193: PUSH
62194: LD_INT 12
62196: NEG
62197: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62198: LD_VAR 0 1
62202: PPUSH
62203: LD_VAR 0 2
62207: PPUSH
62208: LD_VAR 0 3
62212: PPUSH
62213: LD_VAR 0 4
62217: PPUSH
62218: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62222: LD_VAR 0 1
62226: PPUSH
62227: LD_VAR 0 2
62231: PPUSH
62232: LD_VAR 0 3
62236: PPUSH
62237: CALL_OW 331
// end ;
62241: LD_VAR 0 5
62245: RET
// export function Video ( mode ) ; begin
62246: LD_INT 0
62248: PPUSH
// ingame_video = mode ;
62249: LD_ADDR_OWVAR 52
62253: PUSH
62254: LD_VAR 0 1
62258: ST_TO_ADDR
// interface_hidden = mode ;
62259: LD_ADDR_OWVAR 54
62263: PUSH
62264: LD_VAR 0 1
62268: ST_TO_ADDR
// end ;
62269: LD_VAR 0 2
62273: RET
// export function Join ( array , element ) ; begin
62274: LD_INT 0
62276: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62277: LD_ADDR_VAR 0 3
62281: PUSH
62282: LD_VAR 0 1
62286: PPUSH
62287: LD_VAR 0 1
62291: PUSH
62292: LD_INT 1
62294: PLUS
62295: PPUSH
62296: LD_VAR 0 2
62300: PPUSH
62301: CALL_OW 1
62305: ST_TO_ADDR
// end ;
62306: LD_VAR 0 3
62310: RET
// export function JoinUnion ( array , element ) ; begin
62311: LD_INT 0
62313: PPUSH
// result := array union element ;
62314: LD_ADDR_VAR 0 3
62318: PUSH
62319: LD_VAR 0 1
62323: PUSH
62324: LD_VAR 0 2
62328: UNION
62329: ST_TO_ADDR
// end ;
62330: LD_VAR 0 3
62334: RET
// export function GetBehemoths ( side ) ; begin
62335: LD_INT 0
62337: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62338: LD_ADDR_VAR 0 2
62342: PUSH
62343: LD_INT 22
62345: PUSH
62346: LD_VAR 0 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 31
62357: PUSH
62358: LD_INT 25
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PPUSH
62369: CALL_OW 69
62373: ST_TO_ADDR
// end ;
62374: LD_VAR 0 2
62378: RET
// export function Shuffle ( array ) ; var i , index ; begin
62379: LD_INT 0
62381: PPUSH
62382: PPUSH
62383: PPUSH
// result := [ ] ;
62384: LD_ADDR_VAR 0 2
62388: PUSH
62389: EMPTY
62390: ST_TO_ADDR
// if not array then
62391: LD_VAR 0 1
62395: NOT
62396: IFFALSE 62400
// exit ;
62398: GO 62499
// Randomize ;
62400: CALL_OW 10
// for i = array downto 1 do
62404: LD_ADDR_VAR 0 3
62408: PUSH
62409: DOUBLE
62410: LD_VAR 0 1
62414: INC
62415: ST_TO_ADDR
62416: LD_INT 1
62418: PUSH
62419: FOR_DOWNTO
62420: IFFALSE 62497
// begin index := rand ( 1 , array ) ;
62422: LD_ADDR_VAR 0 4
62426: PUSH
62427: LD_INT 1
62429: PPUSH
62430: LD_VAR 0 1
62434: PPUSH
62435: CALL_OW 12
62439: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62440: LD_ADDR_VAR 0 2
62444: PUSH
62445: LD_VAR 0 2
62449: PPUSH
62450: LD_VAR 0 2
62454: PUSH
62455: LD_INT 1
62457: PLUS
62458: PPUSH
62459: LD_VAR 0 1
62463: PUSH
62464: LD_VAR 0 4
62468: ARRAY
62469: PPUSH
62470: CALL_OW 2
62474: ST_TO_ADDR
// array := Delete ( array , index ) ;
62475: LD_ADDR_VAR 0 1
62479: PUSH
62480: LD_VAR 0 1
62484: PPUSH
62485: LD_VAR 0 4
62489: PPUSH
62490: CALL_OW 3
62494: ST_TO_ADDR
// end ;
62495: GO 62419
62497: POP
62498: POP
// end ;
62499: LD_VAR 0 2
62503: RET
// export function GetBaseMaterials ( base ) ; begin
62504: LD_INT 0
62506: PPUSH
// result := [ 0 , 0 , 0 ] ;
62507: LD_ADDR_VAR 0 2
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: ST_TO_ADDR
// if not base then
62526: LD_VAR 0 1
62530: NOT
62531: IFFALSE 62535
// exit ;
62533: GO 62584
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62535: LD_ADDR_VAR 0 2
62539: PUSH
62540: LD_VAR 0 1
62544: PPUSH
62545: LD_INT 1
62547: PPUSH
62548: CALL_OW 275
62552: PUSH
62553: LD_VAR 0 1
62557: PPUSH
62558: LD_INT 2
62560: PPUSH
62561: CALL_OW 275
62565: PUSH
62566: LD_VAR 0 1
62570: PPUSH
62571: LD_INT 3
62573: PPUSH
62574: CALL_OW 275
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: LIST
62583: ST_TO_ADDR
// end ;
62584: LD_VAR 0 2
62588: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62589: LD_INT 0
62591: PPUSH
62592: PPUSH
// result := array ;
62593: LD_ADDR_VAR 0 3
62597: PUSH
62598: LD_VAR 0 1
62602: ST_TO_ADDR
// if size >= result then
62603: LD_VAR 0 2
62607: PUSH
62608: LD_VAR 0 3
62612: GREATEREQUAL
62613: IFFALSE 62617
// exit ;
62615: GO 62667
// if size then
62617: LD_VAR 0 2
62621: IFFALSE 62667
// for i := array downto size do
62623: LD_ADDR_VAR 0 4
62627: PUSH
62628: DOUBLE
62629: LD_VAR 0 1
62633: INC
62634: ST_TO_ADDR
62635: LD_VAR 0 2
62639: PUSH
62640: FOR_DOWNTO
62641: IFFALSE 62665
// result := Delete ( result , result ) ;
62643: LD_ADDR_VAR 0 3
62647: PUSH
62648: LD_VAR 0 3
62652: PPUSH
62653: LD_VAR 0 3
62657: PPUSH
62658: CALL_OW 3
62662: ST_TO_ADDR
62663: GO 62640
62665: POP
62666: POP
// end ;
62667: LD_VAR 0 3
62671: RET
// export function ComExit ( unit ) ; var tmp ; begin
62672: LD_INT 0
62674: PPUSH
62675: PPUSH
// if not IsInUnit ( unit ) then
62676: LD_VAR 0 1
62680: PPUSH
62681: CALL_OW 310
62685: NOT
62686: IFFALSE 62690
// exit ;
62688: GO 62750
// tmp := IsInUnit ( unit ) ;
62690: LD_ADDR_VAR 0 3
62694: PUSH
62695: LD_VAR 0 1
62699: PPUSH
62700: CALL_OW 310
62704: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62705: LD_VAR 0 3
62709: PPUSH
62710: CALL_OW 247
62714: PUSH
62715: LD_INT 2
62717: EQUAL
62718: IFFALSE 62731
// ComExitVehicle ( unit ) else
62720: LD_VAR 0 1
62724: PPUSH
62725: CALL_OW 121
62729: GO 62740
// ComExitBuilding ( unit ) ;
62731: LD_VAR 0 1
62735: PPUSH
62736: CALL_OW 122
// result := tmp ;
62740: LD_ADDR_VAR 0 2
62744: PUSH
62745: LD_VAR 0 3
62749: ST_TO_ADDR
// end ;
62750: LD_VAR 0 2
62754: RET
// export function ComExitAll ( units ) ; var i ; begin
62755: LD_INT 0
62757: PPUSH
62758: PPUSH
// if not units then
62759: LD_VAR 0 1
62763: NOT
62764: IFFALSE 62768
// exit ;
62766: GO 62794
// for i in units do
62768: LD_ADDR_VAR 0 3
62772: PUSH
62773: LD_VAR 0 1
62777: PUSH
62778: FOR_IN
62779: IFFALSE 62792
// ComExit ( i ) ;
62781: LD_VAR 0 3
62785: PPUSH
62786: CALL 62672 0 1
62790: GO 62778
62792: POP
62793: POP
// end ;
62794: LD_VAR 0 2
62798: RET
// export function ResetHc ; begin
62799: LD_INT 0
62801: PPUSH
// InitHc ;
62802: CALL_OW 19
// hc_importance := 0 ;
62806: LD_ADDR_OWVAR 32
62810: PUSH
62811: LD_INT 0
62813: ST_TO_ADDR
// end ;
62814: LD_VAR 0 1
62818: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62819: LD_INT 0
62821: PPUSH
62822: PPUSH
62823: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62824: LD_ADDR_VAR 0 6
62828: PUSH
62829: LD_VAR 0 1
62833: PUSH
62834: LD_VAR 0 3
62838: PLUS
62839: PUSH
62840: LD_INT 2
62842: DIV
62843: ST_TO_ADDR
// if _x < 0 then
62844: LD_VAR 0 6
62848: PUSH
62849: LD_INT 0
62851: LESS
62852: IFFALSE 62869
// _x := _x * - 1 ;
62854: LD_ADDR_VAR 0 6
62858: PUSH
62859: LD_VAR 0 6
62863: PUSH
62864: LD_INT 1
62866: NEG
62867: MUL
62868: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62869: LD_ADDR_VAR 0 7
62873: PUSH
62874: LD_VAR 0 2
62878: PUSH
62879: LD_VAR 0 4
62883: PLUS
62884: PUSH
62885: LD_INT 2
62887: DIV
62888: ST_TO_ADDR
// if _y < 0 then
62889: LD_VAR 0 7
62893: PUSH
62894: LD_INT 0
62896: LESS
62897: IFFALSE 62914
// _y := _y * - 1 ;
62899: LD_ADDR_VAR 0 7
62903: PUSH
62904: LD_VAR 0 7
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: MUL
62913: ST_TO_ADDR
// result := [ _x , _y ] ;
62914: LD_ADDR_VAR 0 5
62918: PUSH
62919: LD_VAR 0 6
62923: PUSH
62924: LD_VAR 0 7
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// end ;
62933: LD_VAR 0 5
62937: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62938: LD_INT 0
62940: PPUSH
62941: PPUSH
62942: PPUSH
62943: PPUSH
// task := GetTaskList ( unit ) ;
62944: LD_ADDR_VAR 0 7
62948: PUSH
62949: LD_VAR 0 1
62953: PPUSH
62954: CALL_OW 437
62958: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62959: LD_VAR 0 7
62963: NOT
62964: PUSH
62965: LD_VAR 0 1
62969: PPUSH
62970: LD_VAR 0 2
62974: PPUSH
62975: CALL_OW 308
62979: NOT
62980: AND
62981: IFFALSE 62985
// exit ;
62983: GO 63103
// if IsInArea ( unit , area ) then
62985: LD_VAR 0 1
62989: PPUSH
62990: LD_VAR 0 2
62994: PPUSH
62995: CALL_OW 308
62999: IFFALSE 63017
// begin ComMoveToArea ( unit , goAway ) ;
63001: LD_VAR 0 1
63005: PPUSH
63006: LD_VAR 0 3
63010: PPUSH
63011: CALL_OW 113
// exit ;
63015: GO 63103
// end ; if task [ 1 ] [ 1 ] <> M then
63017: LD_VAR 0 7
63021: PUSH
63022: LD_INT 1
63024: ARRAY
63025: PUSH
63026: LD_INT 1
63028: ARRAY
63029: PUSH
63030: LD_STRING M
63032: NONEQUAL
63033: IFFALSE 63037
// exit ;
63035: GO 63103
// x := task [ 1 ] [ 2 ] ;
63037: LD_ADDR_VAR 0 5
63041: PUSH
63042: LD_VAR 0 7
63046: PUSH
63047: LD_INT 1
63049: ARRAY
63050: PUSH
63051: LD_INT 2
63053: ARRAY
63054: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63055: LD_ADDR_VAR 0 6
63059: PUSH
63060: LD_VAR 0 7
63064: PUSH
63065: LD_INT 1
63067: ARRAY
63068: PUSH
63069: LD_INT 3
63071: ARRAY
63072: ST_TO_ADDR
// if InArea ( x , y , area ) then
63073: LD_VAR 0 5
63077: PPUSH
63078: LD_VAR 0 6
63082: PPUSH
63083: LD_VAR 0 2
63087: PPUSH
63088: CALL_OW 309
63092: IFFALSE 63103
// ComStop ( unit ) ;
63094: LD_VAR 0 1
63098: PPUSH
63099: CALL_OW 141
// end ;
63103: LD_VAR 0 4
63107: RET
// export function Abs ( value ) ; begin
63108: LD_INT 0
63110: PPUSH
// result := value ;
63111: LD_ADDR_VAR 0 2
63115: PUSH
63116: LD_VAR 0 1
63120: ST_TO_ADDR
// if value < 0 then
63121: LD_VAR 0 1
63125: PUSH
63126: LD_INT 0
63128: LESS
63129: IFFALSE 63146
// result := value * - 1 ;
63131: LD_ADDR_VAR 0 2
63135: PUSH
63136: LD_VAR 0 1
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: MUL
63145: ST_TO_ADDR
// end ;
63146: LD_VAR 0 2
63150: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63151: LD_INT 0
63153: PPUSH
63154: PPUSH
63155: PPUSH
63156: PPUSH
63157: PPUSH
63158: PPUSH
63159: PPUSH
63160: PPUSH
// if not unit or not building then
63161: LD_VAR 0 1
63165: NOT
63166: PUSH
63167: LD_VAR 0 2
63171: NOT
63172: OR
63173: IFFALSE 63177
// exit ;
63175: GO 63403
// x := GetX ( building ) ;
63177: LD_ADDR_VAR 0 4
63181: PUSH
63182: LD_VAR 0 2
63186: PPUSH
63187: CALL_OW 250
63191: ST_TO_ADDR
// y := GetY ( building ) ;
63192: LD_ADDR_VAR 0 6
63196: PUSH
63197: LD_VAR 0 2
63201: PPUSH
63202: CALL_OW 251
63206: ST_TO_ADDR
// d := GetDir ( building ) ;
63207: LD_ADDR_VAR 0 8
63211: PUSH
63212: LD_VAR 0 2
63216: PPUSH
63217: CALL_OW 254
63221: ST_TO_ADDR
// r := 4 ;
63222: LD_ADDR_VAR 0 9
63226: PUSH
63227: LD_INT 4
63229: ST_TO_ADDR
// for i := 1 to 5 do
63230: LD_ADDR_VAR 0 10
63234: PUSH
63235: DOUBLE
63236: LD_INT 1
63238: DEC
63239: ST_TO_ADDR
63240: LD_INT 5
63242: PUSH
63243: FOR_TO
63244: IFFALSE 63401
// begin _x := ShiftX ( x , d , r + i ) ;
63246: LD_ADDR_VAR 0 5
63250: PUSH
63251: LD_VAR 0 4
63255: PPUSH
63256: LD_VAR 0 8
63260: PPUSH
63261: LD_VAR 0 9
63265: PUSH
63266: LD_VAR 0 10
63270: PLUS
63271: PPUSH
63272: CALL_OW 272
63276: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63277: LD_ADDR_VAR 0 7
63281: PUSH
63282: LD_VAR 0 6
63286: PPUSH
63287: LD_VAR 0 8
63291: PPUSH
63292: LD_VAR 0 9
63296: PUSH
63297: LD_VAR 0 10
63301: PLUS
63302: PPUSH
63303: CALL_OW 273
63307: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63308: LD_VAR 0 5
63312: PPUSH
63313: LD_VAR 0 7
63317: PPUSH
63318: CALL_OW 488
63322: PUSH
63323: LD_VAR 0 5
63327: PPUSH
63328: LD_VAR 0 7
63332: PPUSH
63333: CALL_OW 428
63337: PPUSH
63338: CALL_OW 247
63342: PUSH
63343: LD_INT 3
63345: PUSH
63346: LD_INT 2
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: IN
63353: NOT
63354: AND
63355: IFFALSE 63399
// begin ComMoveXY ( unit , _x , _y ) ;
63357: LD_VAR 0 1
63361: PPUSH
63362: LD_VAR 0 5
63366: PPUSH
63367: LD_VAR 0 7
63371: PPUSH
63372: CALL_OW 111
// result := [ _x , _y ] ;
63376: LD_ADDR_VAR 0 3
63380: PUSH
63381: LD_VAR 0 5
63385: PUSH
63386: LD_VAR 0 7
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: ST_TO_ADDR
// exit ;
63395: POP
63396: POP
63397: GO 63403
// end ; end ;
63399: GO 63243
63401: POP
63402: POP
// end ;
63403: LD_VAR 0 3
63407: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63408: LD_INT 0
63410: PPUSH
63411: PPUSH
63412: PPUSH
// result := 0 ;
63413: LD_ADDR_VAR 0 3
63417: PUSH
63418: LD_INT 0
63420: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63421: LD_VAR 0 1
63425: PUSH
63426: LD_INT 0
63428: LESS
63429: PUSH
63430: LD_VAR 0 1
63434: PUSH
63435: LD_INT 8
63437: GREATER
63438: OR
63439: PUSH
63440: LD_VAR 0 2
63444: PUSH
63445: LD_INT 0
63447: LESS
63448: OR
63449: PUSH
63450: LD_VAR 0 2
63454: PUSH
63455: LD_INT 8
63457: GREATER
63458: OR
63459: IFFALSE 63463
// exit ;
63461: GO 63538
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63463: LD_ADDR_VAR 0 4
63467: PUSH
63468: LD_INT 22
63470: PUSH
63471: LD_VAR 0 2
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PPUSH
63480: CALL_OW 69
63484: PUSH
63485: FOR_IN
63486: IFFALSE 63536
// begin un := UnitShoot ( i ) ;
63488: LD_ADDR_VAR 0 5
63492: PUSH
63493: LD_VAR 0 4
63497: PPUSH
63498: CALL_OW 504
63502: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63503: LD_VAR 0 5
63507: PPUSH
63508: CALL_OW 255
63512: PUSH
63513: LD_VAR 0 1
63517: EQUAL
63518: IFFALSE 63534
// begin result := un ;
63520: LD_ADDR_VAR 0 3
63524: PUSH
63525: LD_VAR 0 5
63529: ST_TO_ADDR
// exit ;
63530: POP
63531: POP
63532: GO 63538
// end ; end ;
63534: GO 63485
63536: POP
63537: POP
// end ;
63538: LD_VAR 0 3
63542: RET
// export function GetCargoBay ( units ) ; begin
63543: LD_INT 0
63545: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63546: LD_ADDR_VAR 0 2
63550: PUSH
63551: LD_VAR 0 1
63555: PPUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 34
63561: PUSH
63562: LD_INT 12
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 34
63571: PUSH
63572: LD_INT 51
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 34
63581: PUSH
63582: LD_INT 32
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 34
63591: PUSH
63592: LD_INT 89
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: PPUSH
63606: CALL_OW 72
63610: ST_TO_ADDR
// end ;
63611: LD_VAR 0 2
63615: RET
// export function Negate ( value ) ; begin
63616: LD_INT 0
63618: PPUSH
// result := not value ;
63619: LD_ADDR_VAR 0 2
63623: PUSH
63624: LD_VAR 0 1
63628: NOT
63629: ST_TO_ADDR
// end ;
63630: LD_VAR 0 2
63634: RET
// export function Inc ( value ) ; begin
63635: LD_INT 0
63637: PPUSH
// result := value + 1 ;
63638: LD_ADDR_VAR 0 2
63642: PUSH
63643: LD_VAR 0 1
63647: PUSH
63648: LD_INT 1
63650: PLUS
63651: ST_TO_ADDR
// end ;
63652: LD_VAR 0 2
63656: RET
// export function Dec ( value ) ; begin
63657: LD_INT 0
63659: PPUSH
// result := value - 1 ;
63660: LD_ADDR_VAR 0 2
63664: PUSH
63665: LD_VAR 0 1
63669: PUSH
63670: LD_INT 1
63672: MINUS
63673: ST_TO_ADDR
// end ;
63674: LD_VAR 0 2
63678: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63679: LD_INT 0
63681: PPUSH
63682: PPUSH
63683: PPUSH
63684: PPUSH
63685: PPUSH
63686: PPUSH
63687: PPUSH
63688: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63689: LD_VAR 0 1
63693: PPUSH
63694: LD_VAR 0 2
63698: PPUSH
63699: CALL_OW 488
63703: NOT
63704: PUSH
63705: LD_VAR 0 3
63709: PPUSH
63710: LD_VAR 0 4
63714: PPUSH
63715: CALL_OW 488
63719: NOT
63720: OR
63721: IFFALSE 63734
// begin result := - 1 ;
63723: LD_ADDR_VAR 0 5
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: ST_TO_ADDR
// exit ;
63732: GO 63969
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63734: LD_ADDR_VAR 0 12
63738: PUSH
63739: LD_VAR 0 1
63743: PPUSH
63744: LD_VAR 0 2
63748: PPUSH
63749: LD_VAR 0 3
63753: PPUSH
63754: LD_VAR 0 4
63758: PPUSH
63759: CALL 62819 0 4
63763: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63764: LD_ADDR_VAR 0 11
63768: PUSH
63769: LD_VAR 0 1
63773: PPUSH
63774: LD_VAR 0 2
63778: PPUSH
63779: LD_VAR 0 12
63783: PUSH
63784: LD_INT 1
63786: ARRAY
63787: PPUSH
63788: LD_VAR 0 12
63792: PUSH
63793: LD_INT 2
63795: ARRAY
63796: PPUSH
63797: CALL_OW 298
63801: ST_TO_ADDR
// distance := 9999 ;
63802: LD_ADDR_VAR 0 10
63806: PUSH
63807: LD_INT 9999
63809: ST_TO_ADDR
// for i := 0 to 5 do
63810: LD_ADDR_VAR 0 6
63814: PUSH
63815: DOUBLE
63816: LD_INT 0
63818: DEC
63819: ST_TO_ADDR
63820: LD_INT 5
63822: PUSH
63823: FOR_TO
63824: IFFALSE 63967
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63826: LD_ADDR_VAR 0 7
63830: PUSH
63831: LD_VAR 0 1
63835: PPUSH
63836: LD_VAR 0 6
63840: PPUSH
63841: LD_VAR 0 11
63845: PPUSH
63846: CALL_OW 272
63850: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63851: LD_ADDR_VAR 0 8
63855: PUSH
63856: LD_VAR 0 2
63860: PPUSH
63861: LD_VAR 0 6
63865: PPUSH
63866: LD_VAR 0 11
63870: PPUSH
63871: CALL_OW 273
63875: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63876: LD_VAR 0 7
63880: PPUSH
63881: LD_VAR 0 8
63885: PPUSH
63886: CALL_OW 488
63890: NOT
63891: IFFALSE 63895
// continue ;
63893: GO 63823
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63895: LD_ADDR_VAR 0 9
63899: PUSH
63900: LD_VAR 0 12
63904: PUSH
63905: LD_INT 1
63907: ARRAY
63908: PPUSH
63909: LD_VAR 0 12
63913: PUSH
63914: LD_INT 2
63916: ARRAY
63917: PPUSH
63918: LD_VAR 0 7
63922: PPUSH
63923: LD_VAR 0 8
63927: PPUSH
63928: CALL_OW 298
63932: ST_TO_ADDR
// if tmp < distance then
63933: LD_VAR 0 9
63937: PUSH
63938: LD_VAR 0 10
63942: LESS
63943: IFFALSE 63965
// begin result := i ;
63945: LD_ADDR_VAR 0 5
63949: PUSH
63950: LD_VAR 0 6
63954: ST_TO_ADDR
// distance := tmp ;
63955: LD_ADDR_VAR 0 10
63959: PUSH
63960: LD_VAR 0 9
63964: ST_TO_ADDR
// end ; end ;
63965: GO 63823
63967: POP
63968: POP
// end ;
63969: LD_VAR 0 5
63973: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63974: LD_INT 0
63976: PPUSH
63977: PPUSH
// if not driver or not IsInUnit ( driver ) then
63978: LD_VAR 0 1
63982: NOT
63983: PUSH
63984: LD_VAR 0 1
63988: PPUSH
63989: CALL_OW 310
63993: NOT
63994: OR
63995: IFFALSE 63999
// exit ;
63997: GO 64089
// vehicle := IsInUnit ( driver ) ;
63999: LD_ADDR_VAR 0 3
64003: PUSH
64004: LD_VAR 0 1
64008: PPUSH
64009: CALL_OW 310
64013: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64014: LD_VAR 0 1
64018: PPUSH
64019: LD_STRING \
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: PUSH
64049: LD_STRING E
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: LD_INT 0
64057: PUSH
64058: LD_VAR 0 3
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 0
64068: PUSH
64069: LD_INT 0
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PPUSH
64085: CALL_OW 446
// end ;
64089: LD_VAR 0 2
64093: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64094: LD_INT 0
64096: PPUSH
64097: PPUSH
// if not driver or not IsInUnit ( driver ) then
64098: LD_VAR 0 1
64102: NOT
64103: PUSH
64104: LD_VAR 0 1
64108: PPUSH
64109: CALL_OW 310
64113: NOT
64114: OR
64115: IFFALSE 64119
// exit ;
64117: GO 64209
// vehicle := IsInUnit ( driver ) ;
64119: LD_ADDR_VAR 0 3
64123: PUSH
64124: LD_VAR 0 1
64128: PPUSH
64129: CALL_OW 310
64133: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64134: LD_VAR 0 1
64138: PPUSH
64139: LD_STRING \
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: LD_INT 0
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: LD_INT 0
64159: PUSH
64160: EMPTY
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: PUSH
64169: LD_STRING E
64171: PUSH
64172: LD_INT 0
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_VAR 0 3
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PPUSH
64205: CALL_OW 447
// end ;
64209: LD_VAR 0 2
64213: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64214: LD_INT 0
64216: PPUSH
64217: PPUSH
64218: PPUSH
// tmp := [ ] ;
64219: LD_ADDR_VAR 0 5
64223: PUSH
64224: EMPTY
64225: ST_TO_ADDR
// for i in units do
64226: LD_ADDR_VAR 0 4
64230: PUSH
64231: LD_VAR 0 1
64235: PUSH
64236: FOR_IN
64237: IFFALSE 64275
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64239: LD_ADDR_VAR 0 5
64243: PUSH
64244: LD_VAR 0 5
64248: PPUSH
64249: LD_VAR 0 5
64253: PUSH
64254: LD_INT 1
64256: PLUS
64257: PPUSH
64258: LD_VAR 0 4
64262: PPUSH
64263: CALL_OW 256
64267: PPUSH
64268: CALL_OW 2
64272: ST_TO_ADDR
64273: GO 64236
64275: POP
64276: POP
// if not tmp then
64277: LD_VAR 0 5
64281: NOT
64282: IFFALSE 64286
// exit ;
64284: GO 64334
// if asc then
64286: LD_VAR 0 2
64290: IFFALSE 64314
// result := SortListByListAsc ( units , tmp ) else
64292: LD_ADDR_VAR 0 3
64296: PUSH
64297: LD_VAR 0 1
64301: PPUSH
64302: LD_VAR 0 5
64306: PPUSH
64307: CALL_OW 76
64311: ST_TO_ADDR
64312: GO 64334
// result := SortListByListDesc ( units , tmp ) ;
64314: LD_ADDR_VAR 0 3
64318: PUSH
64319: LD_VAR 0 1
64323: PPUSH
64324: LD_VAR 0 5
64328: PPUSH
64329: CALL_OW 77
64333: ST_TO_ADDR
// end ;
64334: LD_VAR 0 3
64338: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64339: LD_INT 0
64341: PPUSH
64342: PPUSH
// task := GetTaskList ( mech ) ;
64343: LD_ADDR_VAR 0 4
64347: PUSH
64348: LD_VAR 0 1
64352: PPUSH
64353: CALL_OW 437
64357: ST_TO_ADDR
// if not task then
64358: LD_VAR 0 4
64362: NOT
64363: IFFALSE 64367
// exit ;
64365: GO 64409
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64367: LD_ADDR_VAR 0 3
64371: PUSH
64372: LD_VAR 0 4
64376: PUSH
64377: LD_INT 1
64379: ARRAY
64380: PUSH
64381: LD_INT 1
64383: ARRAY
64384: PUSH
64385: LD_STRING r
64387: EQUAL
64388: PUSH
64389: LD_VAR 0 4
64393: PUSH
64394: LD_INT 1
64396: ARRAY
64397: PUSH
64398: LD_INT 4
64400: ARRAY
64401: PUSH
64402: LD_VAR 0 2
64406: EQUAL
64407: AND
64408: ST_TO_ADDR
// end ;
64409: LD_VAR 0 3
64413: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64414: LD_INT 0
64416: PPUSH
// SetDir ( unit , d ) ;
64417: LD_VAR 0 1
64421: PPUSH
64422: LD_VAR 0 4
64426: PPUSH
64427: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64431: LD_VAR 0 1
64435: PPUSH
64436: LD_VAR 0 2
64440: PPUSH
64441: LD_VAR 0 3
64445: PPUSH
64446: LD_VAR 0 5
64450: PPUSH
64451: CALL_OW 48
// end ;
64455: LD_VAR 0 6
64459: RET
// export function ToNaturalNumber ( number ) ; begin
64460: LD_INT 0
64462: PPUSH
// result := number div 1 ;
64463: LD_ADDR_VAR 0 2
64467: PUSH
64468: LD_VAR 0 1
64472: PUSH
64473: LD_INT 1
64475: DIV
64476: ST_TO_ADDR
// if number < 0 then
64477: LD_VAR 0 1
64481: PUSH
64482: LD_INT 0
64484: LESS
64485: IFFALSE 64495
// result := 0 ;
64487: LD_ADDR_VAR 0 2
64491: PUSH
64492: LD_INT 0
64494: ST_TO_ADDR
// end ;
64495: LD_VAR 0 2
64499: RET
// export function SortByClass ( units , class ) ; var un ; begin
64500: LD_INT 0
64502: PPUSH
64503: PPUSH
// if not units or not class then
64504: LD_VAR 0 1
64508: NOT
64509: PUSH
64510: LD_VAR 0 2
64514: NOT
64515: OR
64516: IFFALSE 64520
// exit ;
64518: GO 64615
// result := [ ] ;
64520: LD_ADDR_VAR 0 3
64524: PUSH
64525: EMPTY
64526: ST_TO_ADDR
// for un in units do
64527: LD_ADDR_VAR 0 4
64531: PUSH
64532: LD_VAR 0 1
64536: PUSH
64537: FOR_IN
64538: IFFALSE 64613
// if GetClass ( un ) = class then
64540: LD_VAR 0 4
64544: PPUSH
64545: CALL_OW 257
64549: PUSH
64550: LD_VAR 0 2
64554: EQUAL
64555: IFFALSE 64582
// result := Insert ( result , 1 , un ) else
64557: LD_ADDR_VAR 0 3
64561: PUSH
64562: LD_VAR 0 3
64566: PPUSH
64567: LD_INT 1
64569: PPUSH
64570: LD_VAR 0 4
64574: PPUSH
64575: CALL_OW 2
64579: ST_TO_ADDR
64580: GO 64611
// result := Replace ( result , result + 1 , un ) ;
64582: LD_ADDR_VAR 0 3
64586: PUSH
64587: LD_VAR 0 3
64591: PPUSH
64592: LD_VAR 0 3
64596: PUSH
64597: LD_INT 1
64599: PLUS
64600: PPUSH
64601: LD_VAR 0 4
64605: PPUSH
64606: CALL_OW 1
64610: ST_TO_ADDR
64611: GO 64537
64613: POP
64614: POP
// end ;
64615: LD_VAR 0 3
64619: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64620: LD_INT 0
64622: PPUSH
64623: PPUSH
64624: PPUSH
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
// result := [ ] ;
64629: LD_ADDR_VAR 0 4
64633: PUSH
64634: EMPTY
64635: ST_TO_ADDR
// if x - r < 0 then
64636: LD_VAR 0 1
64640: PUSH
64641: LD_VAR 0 3
64645: MINUS
64646: PUSH
64647: LD_INT 0
64649: LESS
64650: IFFALSE 64662
// min_x := 0 else
64652: LD_ADDR_VAR 0 8
64656: PUSH
64657: LD_INT 0
64659: ST_TO_ADDR
64660: GO 64678
// min_x := x - r ;
64662: LD_ADDR_VAR 0 8
64666: PUSH
64667: LD_VAR 0 1
64671: PUSH
64672: LD_VAR 0 3
64676: MINUS
64677: ST_TO_ADDR
// if y - r < 0 then
64678: LD_VAR 0 2
64682: PUSH
64683: LD_VAR 0 3
64687: MINUS
64688: PUSH
64689: LD_INT 0
64691: LESS
64692: IFFALSE 64704
// min_y := 0 else
64694: LD_ADDR_VAR 0 7
64698: PUSH
64699: LD_INT 0
64701: ST_TO_ADDR
64702: GO 64720
// min_y := y - r ;
64704: LD_ADDR_VAR 0 7
64708: PUSH
64709: LD_VAR 0 2
64713: PUSH
64714: LD_VAR 0 3
64718: MINUS
64719: ST_TO_ADDR
// max_x := x + r ;
64720: LD_ADDR_VAR 0 9
64724: PUSH
64725: LD_VAR 0 1
64729: PUSH
64730: LD_VAR 0 3
64734: PLUS
64735: ST_TO_ADDR
// max_y := y + r ;
64736: LD_ADDR_VAR 0 10
64740: PUSH
64741: LD_VAR 0 2
64745: PUSH
64746: LD_VAR 0 3
64750: PLUS
64751: ST_TO_ADDR
// for _x = min_x to max_x do
64752: LD_ADDR_VAR 0 5
64756: PUSH
64757: DOUBLE
64758: LD_VAR 0 8
64762: DEC
64763: ST_TO_ADDR
64764: LD_VAR 0 9
64768: PUSH
64769: FOR_TO
64770: IFFALSE 64871
// for _y = min_y to max_y do
64772: LD_ADDR_VAR 0 6
64776: PUSH
64777: DOUBLE
64778: LD_VAR 0 7
64782: DEC
64783: ST_TO_ADDR
64784: LD_VAR 0 10
64788: PUSH
64789: FOR_TO
64790: IFFALSE 64867
// begin if not ValidHex ( _x , _y ) then
64792: LD_VAR 0 5
64796: PPUSH
64797: LD_VAR 0 6
64801: PPUSH
64802: CALL_OW 488
64806: NOT
64807: IFFALSE 64811
// continue ;
64809: GO 64789
// if GetResourceTypeXY ( _x , _y ) then
64811: LD_VAR 0 5
64815: PPUSH
64816: LD_VAR 0 6
64820: PPUSH
64821: CALL_OW 283
64825: IFFALSE 64865
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64827: LD_ADDR_VAR 0 4
64831: PUSH
64832: LD_VAR 0 4
64836: PPUSH
64837: LD_VAR 0 4
64841: PUSH
64842: LD_INT 1
64844: PLUS
64845: PPUSH
64846: LD_VAR 0 5
64850: PUSH
64851: LD_VAR 0 6
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PPUSH
64860: CALL_OW 1
64864: ST_TO_ADDR
// end ;
64865: GO 64789
64867: POP
64868: POP
64869: GO 64769
64871: POP
64872: POP
// end ;
64873: LD_VAR 0 4
64877: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64878: LD_INT 0
64880: PPUSH
64881: PPUSH
64882: PPUSH
64883: PPUSH
64884: PPUSH
64885: PPUSH
64886: PPUSH
64887: PPUSH
// if not units then
64888: LD_VAR 0 1
64892: NOT
64893: IFFALSE 64897
// exit ;
64895: GO 65421
// result := UnitFilter ( units , [ f_ok ] ) ;
64897: LD_ADDR_VAR 0 3
64901: PUSH
64902: LD_VAR 0 1
64906: PPUSH
64907: LD_INT 50
64909: PUSH
64910: EMPTY
64911: LIST
64912: PPUSH
64913: CALL_OW 72
64917: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64918: LD_ADDR_VAR 0 8
64922: PUSH
64923: LD_VAR 0 1
64927: PUSH
64928: LD_INT 1
64930: ARRAY
64931: PPUSH
64932: CALL_OW 255
64936: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64937: LD_ADDR_VAR 0 10
64941: PUSH
64942: LD_INT 29
64944: PUSH
64945: LD_INT 91
64947: PUSH
64948: LD_INT 49
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: LIST
64955: ST_TO_ADDR
// if not result then
64956: LD_VAR 0 3
64960: NOT
64961: IFFALSE 64965
// exit ;
64963: GO 65421
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64965: LD_ADDR_VAR 0 5
64969: PUSH
64970: LD_INT 81
64972: PUSH
64973: LD_VAR 0 8
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PPUSH
64982: CALL_OW 69
64986: ST_TO_ADDR
// for i in result do
64987: LD_ADDR_VAR 0 4
64991: PUSH
64992: LD_VAR 0 3
64996: PUSH
64997: FOR_IN
64998: IFFALSE 65419
// begin tag := GetTag ( i ) + 1 ;
65000: LD_ADDR_VAR 0 9
65004: PUSH
65005: LD_VAR 0 4
65009: PPUSH
65010: CALL_OW 110
65014: PUSH
65015: LD_INT 1
65017: PLUS
65018: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65019: LD_ADDR_VAR 0 7
65023: PUSH
65024: LD_VAR 0 4
65028: PPUSH
65029: CALL_OW 250
65033: PPUSH
65034: LD_VAR 0 4
65038: PPUSH
65039: CALL_OW 251
65043: PPUSH
65044: LD_INT 6
65046: PPUSH
65047: CALL 64620 0 3
65051: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65052: LD_VAR 0 4
65056: PPUSH
65057: CALL_OW 247
65061: PUSH
65062: LD_INT 2
65064: EQUAL
65065: PUSH
65066: LD_VAR 0 7
65070: AND
65071: PUSH
65072: LD_VAR 0 4
65076: PPUSH
65077: CALL_OW 264
65081: PUSH
65082: LD_VAR 0 10
65086: IN
65087: NOT
65088: AND
65089: IFFALSE 65128
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65091: LD_VAR 0 4
65095: PPUSH
65096: LD_VAR 0 7
65100: PUSH
65101: LD_INT 1
65103: ARRAY
65104: PUSH
65105: LD_INT 1
65107: ARRAY
65108: PPUSH
65109: LD_VAR 0 7
65113: PUSH
65114: LD_INT 1
65116: ARRAY
65117: PUSH
65118: LD_INT 2
65120: ARRAY
65121: PPUSH
65122: CALL_OW 116
65126: GO 65417
// if path > tag then
65128: LD_VAR 0 2
65132: PUSH
65133: LD_VAR 0 9
65137: GREATER
65138: IFFALSE 65346
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
65140: LD_ADDR_VAR 0 6
65144: PUSH
65145: LD_VAR 0 5
65149: PPUSH
65150: LD_INT 91
65152: PUSH
65153: LD_VAR 0 4
65157: PUSH
65158: LD_INT 8
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: LIST
65165: PPUSH
65166: CALL_OW 72
65170: ST_TO_ADDR
// if nearEnemy then
65171: LD_VAR 0 6
65175: IFFALSE 65244
// begin if GetWeapon ( i ) = ru_time_lapser then
65177: LD_VAR 0 4
65181: PPUSH
65182: CALL_OW 264
65186: PUSH
65187: LD_INT 49
65189: EQUAL
65190: IFFALSE 65218
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65192: LD_VAR 0 4
65196: PPUSH
65197: LD_VAR 0 6
65201: PPUSH
65202: LD_VAR 0 4
65206: PPUSH
65207: CALL_OW 74
65211: PPUSH
65212: CALL_OW 112
65216: GO 65242
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65218: LD_VAR 0 4
65222: PPUSH
65223: LD_VAR 0 6
65227: PPUSH
65228: LD_VAR 0 4
65232: PPUSH
65233: CALL_OW 74
65237: PPUSH
65238: CALL_OW 115
// end else
65242: GO 65344
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65244: LD_VAR 0 4
65248: PPUSH
65249: LD_VAR 0 2
65253: PUSH
65254: LD_VAR 0 9
65258: ARRAY
65259: PUSH
65260: LD_INT 1
65262: ARRAY
65263: PPUSH
65264: LD_VAR 0 2
65268: PUSH
65269: LD_VAR 0 9
65273: ARRAY
65274: PUSH
65275: LD_INT 2
65277: ARRAY
65278: PPUSH
65279: CALL_OW 297
65283: PUSH
65284: LD_INT 6
65286: GREATER
65287: IFFALSE 65330
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65289: LD_VAR 0 4
65293: PPUSH
65294: LD_VAR 0 2
65298: PUSH
65299: LD_VAR 0 9
65303: ARRAY
65304: PUSH
65305: LD_INT 1
65307: ARRAY
65308: PPUSH
65309: LD_VAR 0 2
65313: PUSH
65314: LD_VAR 0 9
65318: ARRAY
65319: PUSH
65320: LD_INT 2
65322: ARRAY
65323: PPUSH
65324: CALL_OW 114
65328: GO 65344
// SetTag ( i , tag ) ;
65330: LD_VAR 0 4
65334: PPUSH
65335: LD_VAR 0 9
65339: PPUSH
65340: CALL_OW 109
// end else
65344: GO 65417
// if enemy then
65346: LD_VAR 0 5
65350: IFFALSE 65417
// begin if GetWeapon ( i ) = ru_time_lapser then
65352: LD_VAR 0 4
65356: PPUSH
65357: CALL_OW 264
65361: PUSH
65362: LD_INT 49
65364: EQUAL
65365: IFFALSE 65393
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65367: LD_VAR 0 4
65371: PPUSH
65372: LD_VAR 0 5
65376: PPUSH
65377: LD_VAR 0 4
65381: PPUSH
65382: CALL_OW 74
65386: PPUSH
65387: CALL_OW 112
65391: GO 65417
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65393: LD_VAR 0 4
65397: PPUSH
65398: LD_VAR 0 5
65402: PPUSH
65403: LD_VAR 0 4
65407: PPUSH
65408: CALL_OW 74
65412: PPUSH
65413: CALL_OW 115
// end ; end ;
65417: GO 64997
65419: POP
65420: POP
// end ;
65421: LD_VAR 0 3
65425: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65426: LD_INT 0
65428: PPUSH
65429: PPUSH
65430: PPUSH
// if not unit or IsInUnit ( unit ) then
65431: LD_VAR 0 1
65435: NOT
65436: PUSH
65437: LD_VAR 0 1
65441: PPUSH
65442: CALL_OW 310
65446: OR
65447: IFFALSE 65451
// exit ;
65449: GO 65542
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65451: LD_ADDR_VAR 0 4
65455: PUSH
65456: LD_VAR 0 1
65460: PPUSH
65461: CALL_OW 250
65465: PPUSH
65466: LD_VAR 0 2
65470: PPUSH
65471: LD_INT 1
65473: PPUSH
65474: CALL_OW 272
65478: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65479: LD_ADDR_VAR 0 5
65483: PUSH
65484: LD_VAR 0 1
65488: PPUSH
65489: CALL_OW 251
65493: PPUSH
65494: LD_VAR 0 2
65498: PPUSH
65499: LD_INT 1
65501: PPUSH
65502: CALL_OW 273
65506: ST_TO_ADDR
// if ValidHex ( x , y ) then
65507: LD_VAR 0 4
65511: PPUSH
65512: LD_VAR 0 5
65516: PPUSH
65517: CALL_OW 488
65521: IFFALSE 65542
// ComTurnXY ( unit , x , y ) ;
65523: LD_VAR 0 1
65527: PPUSH
65528: LD_VAR 0 4
65532: PPUSH
65533: LD_VAR 0 5
65537: PPUSH
65538: CALL_OW 118
// end ;
65542: LD_VAR 0 3
65546: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65547: LD_INT 0
65549: PPUSH
65550: PPUSH
// result := false ;
65551: LD_ADDR_VAR 0 3
65555: PUSH
65556: LD_INT 0
65558: ST_TO_ADDR
// if not units then
65559: LD_VAR 0 2
65563: NOT
65564: IFFALSE 65568
// exit ;
65566: GO 65613
// for i in units do
65568: LD_ADDR_VAR 0 4
65572: PUSH
65573: LD_VAR 0 2
65577: PUSH
65578: FOR_IN
65579: IFFALSE 65611
// if See ( side , i ) then
65581: LD_VAR 0 1
65585: PPUSH
65586: LD_VAR 0 4
65590: PPUSH
65591: CALL_OW 292
65595: IFFALSE 65609
// begin result := true ;
65597: LD_ADDR_VAR 0 3
65601: PUSH
65602: LD_INT 1
65604: ST_TO_ADDR
// exit ;
65605: POP
65606: POP
65607: GO 65613
// end ;
65609: GO 65578
65611: POP
65612: POP
// end ;
65613: LD_VAR 0 3
65617: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65618: LD_INT 0
65620: PPUSH
65621: PPUSH
65622: PPUSH
65623: PPUSH
// if not unit or not points then
65624: LD_VAR 0 1
65628: NOT
65629: PUSH
65630: LD_VAR 0 2
65634: NOT
65635: OR
65636: IFFALSE 65640
// exit ;
65638: GO 65730
// dist := 99999 ;
65640: LD_ADDR_VAR 0 5
65644: PUSH
65645: LD_INT 99999
65647: ST_TO_ADDR
// for i in points do
65648: LD_ADDR_VAR 0 4
65652: PUSH
65653: LD_VAR 0 2
65657: PUSH
65658: FOR_IN
65659: IFFALSE 65728
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65661: LD_ADDR_VAR 0 6
65665: PUSH
65666: LD_VAR 0 1
65670: PPUSH
65671: LD_VAR 0 4
65675: PUSH
65676: LD_INT 1
65678: ARRAY
65679: PPUSH
65680: LD_VAR 0 4
65684: PUSH
65685: LD_INT 2
65687: ARRAY
65688: PPUSH
65689: CALL_OW 297
65693: ST_TO_ADDR
// if tmpDist < dist then
65694: LD_VAR 0 6
65698: PUSH
65699: LD_VAR 0 5
65703: LESS
65704: IFFALSE 65726
// begin result := i ;
65706: LD_ADDR_VAR 0 3
65710: PUSH
65711: LD_VAR 0 4
65715: ST_TO_ADDR
// dist := tmpDist ;
65716: LD_ADDR_VAR 0 5
65720: PUSH
65721: LD_VAR 0 6
65725: ST_TO_ADDR
// end ; end ;
65726: GO 65658
65728: POP
65729: POP
// end ;
65730: LD_VAR 0 3
65734: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65735: LD_INT 0
65737: PPUSH
// uc_side := side ;
65738: LD_ADDR_OWVAR 20
65742: PUSH
65743: LD_VAR 0 1
65747: ST_TO_ADDR
// uc_nation := 3 ;
65748: LD_ADDR_OWVAR 21
65752: PUSH
65753: LD_INT 3
65755: ST_TO_ADDR
// vc_chassis := 25 ;
65756: LD_ADDR_OWVAR 37
65760: PUSH
65761: LD_INT 25
65763: ST_TO_ADDR
// vc_engine := engine_siberite ;
65764: LD_ADDR_OWVAR 39
65768: PUSH
65769: LD_INT 3
65771: ST_TO_ADDR
// vc_control := control_computer ;
65772: LD_ADDR_OWVAR 38
65776: PUSH
65777: LD_INT 3
65779: ST_TO_ADDR
// vc_weapon := 59 ;
65780: LD_ADDR_OWVAR 40
65784: PUSH
65785: LD_INT 59
65787: ST_TO_ADDR
// result := CreateVehicle ;
65788: LD_ADDR_VAR 0 5
65792: PUSH
65793: CALL_OW 45
65797: ST_TO_ADDR
// SetDir ( result , d ) ;
65798: LD_VAR 0 5
65802: PPUSH
65803: LD_VAR 0 4
65807: PPUSH
65808: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65812: LD_VAR 0 5
65816: PPUSH
65817: LD_VAR 0 2
65821: PPUSH
65822: LD_VAR 0 3
65826: PPUSH
65827: LD_INT 0
65829: PPUSH
65830: CALL_OW 48
// end ;
65834: LD_VAR 0 5
65838: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65839: LD_INT 0
65841: PPUSH
65842: PPUSH
65843: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65844: LD_ADDR_VAR 0 2
65848: PUSH
65849: LD_INT 0
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: LIST
65865: LIST
65866: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65867: LD_VAR 0 1
65871: NOT
65872: PUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: CALL_OW 264
65882: PUSH
65883: LD_INT 12
65885: PUSH
65886: LD_INT 51
65888: PUSH
65889: LD_INT 32
65891: PUSH
65892: LD_INT 89
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: IN
65901: NOT
65902: OR
65903: IFFALSE 65907
// exit ;
65905: GO 66005
// for i := 1 to 3 do
65907: LD_ADDR_VAR 0 3
65911: PUSH
65912: DOUBLE
65913: LD_INT 1
65915: DEC
65916: ST_TO_ADDR
65917: LD_INT 3
65919: PUSH
65920: FOR_TO
65921: IFFALSE 66003
// begin tmp := GetCargo ( cargo , i ) ;
65923: LD_ADDR_VAR 0 4
65927: PUSH
65928: LD_VAR 0 1
65932: PPUSH
65933: LD_VAR 0 3
65937: PPUSH
65938: CALL_OW 289
65942: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65943: LD_ADDR_VAR 0 2
65947: PUSH
65948: LD_VAR 0 2
65952: PPUSH
65953: LD_VAR 0 3
65957: PPUSH
65958: LD_VAR 0 4
65962: PPUSH
65963: CALL_OW 1
65967: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65968: LD_ADDR_VAR 0 2
65972: PUSH
65973: LD_VAR 0 2
65977: PPUSH
65978: LD_INT 4
65980: PPUSH
65981: LD_VAR 0 2
65985: PUSH
65986: LD_INT 4
65988: ARRAY
65989: PUSH
65990: LD_VAR 0 4
65994: PLUS
65995: PPUSH
65996: CALL_OW 1
66000: ST_TO_ADDR
// end ;
66001: GO 65920
66003: POP
66004: POP
// end ;
66005: LD_VAR 0 2
66009: RET
// export function Length ( array ) ; begin
66010: LD_INT 0
66012: PPUSH
// result := array + 0 ;
66013: LD_ADDR_VAR 0 2
66017: PUSH
66018: LD_VAR 0 1
66022: PUSH
66023: LD_INT 0
66025: PLUS
66026: ST_TO_ADDR
// end ;
66027: LD_VAR 0 2
66031: RET
// export function PrepareArray ( array ) ; begin
66032: LD_INT 0
66034: PPUSH
// result := array diff 0 ;
66035: LD_ADDR_VAR 0 2
66039: PUSH
66040: LD_VAR 0 1
66044: PUSH
66045: LD_INT 0
66047: DIFF
66048: ST_TO_ADDR
// if not result [ 1 ] then
66049: LD_VAR 0 2
66053: PUSH
66054: LD_INT 1
66056: ARRAY
66057: NOT
66058: IFFALSE 66078
// result := Delete ( result , 1 ) ;
66060: LD_ADDR_VAR 0 2
66064: PUSH
66065: LD_VAR 0 2
66069: PPUSH
66070: LD_INT 1
66072: PPUSH
66073: CALL_OW 3
66077: ST_TO_ADDR
// end ;
66078: LD_VAR 0 2
66082: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
66083: LD_INT 0
66085: PPUSH
66086: PPUSH
66087: PPUSH
66088: PPUSH
// sibRocketRange := 25 ;
66089: LD_ADDR_VAR 0 6
66093: PUSH
66094: LD_INT 25
66096: ST_TO_ADDR
// result := false ;
66097: LD_ADDR_VAR 0 4
66101: PUSH
66102: LD_INT 0
66104: ST_TO_ADDR
// for i := 0 to 5 do
66105: LD_ADDR_VAR 0 5
66109: PUSH
66110: DOUBLE
66111: LD_INT 0
66113: DEC
66114: ST_TO_ADDR
66115: LD_INT 5
66117: PUSH
66118: FOR_TO
66119: IFFALSE 66186
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
66121: LD_VAR 0 1
66125: PPUSH
66126: LD_VAR 0 5
66130: PPUSH
66131: LD_VAR 0 6
66135: PPUSH
66136: CALL_OW 272
66140: PPUSH
66141: LD_VAR 0 2
66145: PPUSH
66146: LD_VAR 0 5
66150: PPUSH
66151: LD_VAR 0 6
66155: PPUSH
66156: CALL_OW 273
66160: PPUSH
66161: LD_VAR 0 3
66165: PPUSH
66166: CALL_OW 309
66170: IFFALSE 66184
// begin result := true ;
66172: LD_ADDR_VAR 0 4
66176: PUSH
66177: LD_INT 1
66179: ST_TO_ADDR
// exit ;
66180: POP
66181: POP
66182: GO 66188
// end ;
66184: GO 66118
66186: POP
66187: POP
// end ;
66188: LD_VAR 0 4
66192: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
66193: LD_INT 0
66195: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
66196: LD_VAR 0 1
66200: PPUSH
66201: LD_VAR 0 2
66205: PPUSH
66206: LD_INT 0
66208: PPUSH
66209: LD_INT 0
66211: PPUSH
66212: LD_INT 1
66214: PPUSH
66215: LD_INT 0
66217: PPUSH
66218: CALL_OW 587
// end ; end_of_file
66222: LD_VAR 0 3
66226: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66227: LD_VAR 0 1
66231: PPUSH
66232: LD_VAR 0 2
66236: PPUSH
66237: LD_VAR 0 3
66241: PPUSH
66242: LD_VAR 0 4
66246: PPUSH
66247: LD_VAR 0 5
66251: PPUSH
66252: LD_VAR 0 6
66256: PPUSH
66257: CALL 4683 0 6
// end ;
66261: PPOPN 6
66263: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66264: LD_INT 0
66266: PPUSH
// begin if not units then
66267: LD_VAR 0 1
66271: NOT
66272: IFFALSE 66276
// exit ;
66274: GO 66276
// end ;
66276: PPOPN 7
66278: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66279: CALL 4577 0 0
// end ;
66283: PPOPN 1
66285: END
