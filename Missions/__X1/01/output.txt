// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 40 0 0
// PrepareAmericanBase ;
  31: CALL 3034 0 0
// Action ;
  35: CALL 109 0 0
// end ;
  39: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  40: LD_INT 0
  42: PPUSH
// foundPoints := 0 ;
  43: LD_ADDR_EXP 16
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// goWithHeike := false ;
  51: LD_ADDR_EXP 17
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// baseSpotted := false ;
  59: LD_ADDR_EXP 18
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// heikeNearbyEon := false ;
  67: LD_ADDR_EXP 19
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// meetingActive := true ;
  75: LD_ADDR_EXP 20
  79: PUSH
  80: LD_INT 1
  82: ST_TO_ADDR
// scientists := [ ] ;
  83: LD_ADDR_EXP 13
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// eonGuards := [ ] ;
  90: LD_ADDR_EXP 14
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// firstGroup := [ ] ;
  97: LD_ADDR_EXP 15
 101: PUSH
 102: EMPTY
 103: ST_TO_ADDR
// end ; end_of_file
 104: LD_VAR 0 1
 108: RET
// export function Action ; begin
 109: LD_INT 0
 111: PPUSH
// InGameOn ;
 112: CALL_OW 8
// wait ( 0 0$2 ) ;
 116: LD_INT 70
 118: PPUSH
 119: CALL_OW 67
// PrepareArabian ;
 123: CALL 3282 0 0
// PrepareKurtGroup ;
 127: CALL 2881 0 0
// PrepareSheikGroup ;
 131: CALL 2519 0 0
// PrepareHeikeGroup ;
 135: CALL 2431 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 139: LD_INT 51
 141: PPUSH
 142: LD_INT 85
 144: PPUSH
 145: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 149: LD_INT 1
 151: PPUSH
 152: LD_INT 1
 154: PPUSH
 155: LD_INT 5
 157: PPUSH
 158: LD_INT 32763
 160: NEG
 161: PPUSH
 162: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 166: LD_INT 1
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 5
 174: PPUSH
 175: CALL_OW 331
// ComMoveXY ( [ Heike , Kaia ] , 53 , 88 ) ;
 179: LD_EXP 1
 183: PUSH
 184: LD_EXP 5
 188: PUSH
 189: EMPTY
 190: LIST
 191: LIST
 192: PPUSH
 193: LD_INT 53
 195: PPUSH
 196: LD_INT 88
 198: PPUSH
 199: CALL_OW 111
// wait ( 0 0$1 ) ;
 203: LD_INT 35
 205: PPUSH
 206: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 210: LD_EXP 5
 214: PPUSH
 215: LD_STRING DK-1
 217: PPUSH
 218: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 222: LD_EXP 1
 226: PPUSH
 227: LD_STRING DH-1
 229: PPUSH
 230: CALL_OW 88
// wait ( 0 0$2 ) ;
 234: LD_INT 70
 236: PPUSH
 237: CALL_OW 67
// PrepareArabian ;
 241: CALL 3282 0 0
// InGameOff ;
 245: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 249: LD_STRING O1
 251: PPUSH
 252: CALL_OW 337
// goWithHeike := true ;
 256: LD_ADDR_EXP 17
 260: PUSH
 261: LD_INT 1
 263: ST_TO_ADDR
// SaveForQuickRestart ;
 264: CALL_OW 22
// end ;
 268: LD_VAR 0 1
 272: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 273: LD_INT 2
 275: PPUSH
 276: LD_INT 5
 278: PPUSH
 279: CALL_OW 81
 283: PUSH
 284: LD_INT 2
 286: EQUAL
 287: IFFALSE 433
 289: GO 291
 291: DISABLE
 292: LD_INT 0
 294: PPUSH
// begin goWithHeike := false ;
 295: LD_ADDR_EXP 17
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// DialogueOn ;
 303: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 307: LD_EXP 1
 311: PPUSH
 312: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 316: LD_EXP 5
 320: PPUSH
 321: LD_STRING DK-betray-1
 323: PPUSH
 324: CALL_OW 88
// DialogueOff ;
 328: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 332: LD_EXP 5
 336: PPUSH
 337: LD_INT 90
 339: PPUSH
 340: LD_INT 46
 342: PPUSH
 343: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 347: LD_INT 35
 349: PPUSH
 350: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_INT 22
 361: PUSH
 362: LD_INT 5
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 25
 371: PUSH
 372: LD_INT 1
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PPUSH
 383: CALL_OW 69
 387: PUSH
 388: LD_EXP 5
 392: DIFF
 393: PUSH
 394: FOR_IN
 395: IFFALSE 413
// ComAttackUnit ( i , Heike ) ;
 397: LD_VAR 0 1
 401: PPUSH
 402: LD_EXP 1
 406: PPUSH
 407: CALL_OW 115
 411: GO 394
 413: POP
 414: POP
// until IsDead ( Heike ) ;
 415: LD_EXP 1
 419: PPUSH
 420: CALL_OW 301
 424: IFFALSE 347
// YouLost ( Betray ) ;
 426: LD_STRING Betray
 428: PPUSH
 429: CALL_OW 104
// end ;
 433: PPOPN 1
 435: END
// every 0 0$1 trigger goWithHeike do
 436: LD_EXP 17
 440: IFFALSE 495
 442: GO 444
 444: DISABLE
// begin enable ;
 445: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 446: LD_EXP 1
 450: PPUSH
 451: LD_EXP 5
 455: PPUSH
 456: CALL_OW 296
 460: PUSH
 461: LD_INT 3
 463: GREATER
 464: IFFALSE 495
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 466: LD_EXP 5
 470: PPUSH
 471: LD_EXP 1
 475: PPUSH
 476: CALL_OW 250
 480: PPUSH
 481: LD_EXP 1
 485: PPUSH
 486: CALL_OW 251
 490: PPUSH
 491: CALL_OW 111
// end ;
 495: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 47
 501: PPUSH
 502: LD_INT 68
 504: PPUSH
 505: CALL_OW 293
 509: PUSH
 510: LD_EXP 18
 514: NOT
 515: AND
 516: IFFALSE 560
 518: GO 520
 520: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 521: LD_EXP 1
 525: PPUSH
 526: LD_STRING DH-spot-1
 528: PPUSH
 529: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DR-spot-1 ) ;
 533: LD_INT 47
 535: PPUSH
 536: LD_INT 68
 538: PPUSH
 539: CALL_OW 428
 543: PPUSH
 544: CALL_OW 313
 548: PUSH
 549: LD_INT 1
 551: ARRAY
 552: PPUSH
 553: LD_STRING DR-spot-1
 555: PPUSH
 556: CALL_OW 88
// end ;
 560: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 561: LD_INT 2
 563: PPUSH
 564: LD_INT 93
 566: PPUSH
 567: LD_INT 89
 569: PPUSH
 570: CALL_OW 293
 574: PUSH
 575: LD_EXP 18
 579: NOT
 580: AND
 581: IFFALSE 625
 583: GO 585
 585: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 586: LD_EXP 1
 590: PPUSH
 591: LD_STRING DH-spot-1
 593: PPUSH
 594: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DR-spot-2 ) ;
 598: LD_INT 93
 600: PPUSH
 601: LD_INT 89
 603: PPUSH
 604: CALL_OW 428
 608: PPUSH
 609: CALL_OW 313
 613: PUSH
 614: LD_INT 1
 616: ARRAY
 617: PPUSH
 618: LD_STRING DR-spot-2
 620: PPUSH
 621: CALL_OW 88
// end ;
 625: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 626: LD_EXP 20
 630: PUSH
 631: LD_EXP 14
 635: PPUSH
 636: LD_INT 101
 638: PUSH
 639: LD_INT 2
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: PPUSH
 646: CALL_OW 72
 650: AND
 651: IFFALSE 975
 653: GO 655
 655: DISABLE
 656: LD_INT 0
 658: PPUSH
 659: PPUSH
 660: PPUSH
 661: PPUSH
 662: PPUSH
// begin enable ;
 663: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 664: LD_ADDR_VAR 0 1
 668: PUSH
 669: LD_EXP 14
 673: PPUSH
 674: LD_INT 101
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PPUSH
 684: CALL_OW 72
 688: ST_TO_ADDR
// if not tmp then
 689: LD_VAR 0 1
 693: NOT
 694: IFFALSE 698
// exit ;
 696: GO 975
// InGameOn ;
 698: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 702: LD_EXP 1
 706: PUSH
 707: LD_EXP 5
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PPUSH
 716: LD_VAR 0 1
 720: PUSH
 721: LD_INT 1
 723: ARRAY
 724: PPUSH
 725: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 729: LD_VAR 0 1
 733: PUSH
 734: LD_INT 1
 736: ARRAY
 737: PPUSH
 738: LD_EXP 1
 742: PPUSH
 743: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 747: LD_VAR 0 1
 751: PUSH
 752: LD_INT 1
 754: ARRAY
 755: PPUSH
 756: LD_STRING DG-meeting-1
 758: PPUSH
 759: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 763: LD_ADDR_VAR 0 3
 767: PUSH
 768: LD_INT 81
 770: PUSH
 771: LD_INT 10
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: PUSH
 778: LD_INT 63
 780: PUSH
 781: LD_INT 25
 783: PUSH
 784: EMPTY
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 108
 790: PUSH
 791: LD_INT 73
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 803: LD_ADDR_VAR 0 4
 807: PUSH
 808: LD_INT 9999
 810: PUSH
 811: EMPTY
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: ST_TO_ADDR
// for i := 1 to 3 do
 817: LD_ADDR_VAR 0 2
 821: PUSH
 822: DOUBLE
 823: LD_INT 1
 825: DEC
 826: ST_TO_ADDR
 827: LD_INT 3
 829: PUSH
 830: FOR_TO
 831: IFFALSE 915
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
 833: LD_ADDR_VAR 0 5
 837: PUSH
 838: LD_EXP 1
 842: PPUSH
 843: LD_VAR 0 3
 847: PUSH
 848: LD_VAR 0 2
 852: ARRAY
 853: PUSH
 854: LD_INT 1
 856: ARRAY
 857: PPUSH
 858: LD_VAR 0 3
 862: PUSH
 863: LD_VAR 0 2
 867: ARRAY
 868: PUSH
 869: LD_INT 2
 871: ARRAY
 872: PPUSH
 873: CALL_OW 297
 877: ST_TO_ADDR
// if dist [ 1 ] > tdist then
 878: LD_VAR 0 4
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PUSH
 887: LD_VAR 0 5
 891: GREATER
 892: IFFALSE 913
// dist := [ tdist , i ] ;
 894: LD_ADDR_VAR 0 4
 898: PUSH
 899: LD_VAR 0 5
 903: PUSH
 904: LD_VAR 0 2
 908: PUSH
 909: EMPTY
 910: LIST
 911: LIST
 912: ST_TO_ADDR
// end ;
 913: GO 830
 915: POP
 916: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
 917: LD_EXP 1
 921: PPUSH
 922: LD_VAR 0 3
 926: PUSH
 927: LD_VAR 0 4
 931: PUSH
 932: LD_INT 2
 934: ARRAY
 935: ARRAY
 936: PUSH
 937: LD_INT 1
 939: ARRAY
 940: PPUSH
 941: LD_VAR 0 3
 945: PUSH
 946: LD_VAR 0 4
 950: PUSH
 951: LD_INT 2
 953: ARRAY
 954: ARRAY
 955: PUSH
 956: LD_INT 2
 958: ARRAY
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$3 ) ;
 964: LD_INT 105
 966: PPUSH
 967: CALL_OW 67
// InGameOff ;
 971: CALL_OW 9
// end ;
 975: PPOPN 5
 977: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
 978: LD_EXP 1
 982: PPUSH
 983: LD_INT 14
 985: PPUSH
 986: CALL_OW 296
 990: PUSH
 991: LD_INT 40
 993: GREATER
 994: PUSH
 995: LD_EXP 1
 999: PPUSH
1000: CALL_OW 316
1004: AND
1005: IFFALSE 1022
1007: GO 1009
1009: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1010: LD_EXP 5
1014: PPUSH
1015: LD_STRING DK-idle-1
1017: PPUSH
1018: CALL_OW 88
// end ;
1022: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1023: LD_INT 2
1025: PPUSH
1026: LD_INT 59
1028: PPUSH
1029: LD_INT 47
1031: PPUSH
1032: CALL_OW 293
1036: IFFALSE 1186
1038: GO 1040
1040: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1041: LD_INT 59
1043: PPUSH
1044: LD_INT 47
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 10
1052: NEG
1053: PPUSH
1054: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1058: LD_INT 59
1060: PPUSH
1061: LD_INT 47
1063: PPUSH
1064: CALL_OW 86
// goWithHeike := false ;
1068: LD_ADDR_EXP 17
1072: PUSH
1073: LD_INT 0
1075: ST_TO_ADDR
// baseSpotted := true ;
1076: LD_ADDR_EXP 18
1080: PUSH
1081: LD_INT 1
1083: ST_TO_ADDR
// InGameOn ;
1084: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1088: LD_EXP 1
1092: PUSH
1093: LD_EXP 5
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: PPUSH
1102: LD_INT 54
1104: PPUSH
1105: LD_INT 45
1107: PPUSH
1108: CALL_OW 111
// AddComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1112: LD_EXP 1
1116: PUSH
1117: LD_EXP 5
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PPUSH
1126: LD_INT 59
1128: PPUSH
1129: LD_INT 47
1131: PPUSH
1132: CALL_OW 178
// Say ( Heike , DH-base-1 ) ;
1136: LD_EXP 1
1140: PPUSH
1141: LD_STRING DH-base-1
1143: PPUSH
1144: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1148: LD_EXP 5
1152: PPUSH
1153: LD_STRING DK-base-1
1155: PPUSH
1156: CALL_OW 88
// InGameOff ;
1160: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1164: LD_ADDR_EXP 16
1168: PUSH
1169: LD_EXP 16
1173: PUSH
1174: LD_INT 1
1176: PLUS
1177: ST_TO_ADDR
// goWithHeike := true ;
1178: LD_ADDR_EXP 17
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// end ;
1186: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1187: LD_INT 2
1189: PPUSH
1190: LD_EXP 8
1194: PPUSH
1195: CALL_OW 292
1199: IFFALSE 2428
1201: GO 1203
1203: DISABLE
1204: LD_INT 0
1206: PPUSH
1207: PPUSH
1208: PPUSH
// begin meetingActive := false ;
1209: LD_ADDR_EXP 20
1213: PUSH
1214: LD_INT 0
1216: ST_TO_ADDR
// goWithHeike := false ;
1217: LD_ADDR_EXP 17
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: LD_INT 6
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 517
1240: ST_TO_ADDR
// for i := 1 to 4 do
1241: LD_ADDR_VAR 0 1
1245: PUSH
1246: DOUBLE
1247: LD_INT 1
1249: DEC
1250: ST_TO_ADDR
1251: LD_INT 4
1253: PUSH
1254: FOR_TO
1255: IFFALSE 1322
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1257: LD_EXP 15
1261: PUSH
1262: LD_VAR 0 1
1266: ARRAY
1267: PPUSH
1268: LD_VAR 0 2
1272: PUSH
1273: LD_INT 1
1275: ARRAY
1276: PUSH
1277: LD_VAR 0 1
1281: ARRAY
1282: PPUSH
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 2
1290: ARRAY
1291: PUSH
1292: LD_VAR 0 1
1296: ARRAY
1297: PPUSH
1298: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1302: LD_EXP 15
1306: PUSH
1307: LD_VAR 0 1
1311: ARRAY
1312: PPUSH
1313: LD_INT 14
1315: PPUSH
1316: CALL_OW 179
// end ;
1320: GO 1254
1322: POP
1323: POP
// InGameOn ;
1324: CALL_OW 8
// ComMoveUnit ( Heike , Kurt ) ;
1328: LD_EXP 1
1332: PPUSH
1333: LD_EXP 8
1337: PPUSH
1338: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1342: LD_EXP 5
1346: PPUSH
1347: LD_EXP 1
1351: PPUSH
1352: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1356: LD_INT 10
1358: PPUSH
1359: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1363: LD_EXP 1
1367: PPUSH
1368: LD_EXP 8
1372: PPUSH
1373: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1377: LD_EXP 5
1381: PPUSH
1382: LD_EXP 1
1386: PPUSH
1387: CALL_OW 250
1391: PPUSH
1392: LD_INT 5
1394: PPUSH
1395: LD_INT 1
1397: PPUSH
1398: CALL_OW 272
1402: PPUSH
1403: LD_EXP 1
1407: PPUSH
1408: CALL_OW 251
1412: PPUSH
1413: LD_INT 5
1415: PPUSH
1416: LD_INT 1
1418: PPUSH
1419: CALL_OW 273
1423: PPUSH
1424: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1428: LD_EXP 1
1432: PPUSH
1433: LD_EXP 8
1437: PPUSH
1438: CALL_OW 296
1442: PUSH
1443: LD_INT 5
1445: LESS
1446: PUSH
1447: LD_EXP 5
1451: PPUSH
1452: LD_EXP 8
1456: PPUSH
1457: CALL_OW 296
1461: PUSH
1462: LD_INT 6
1464: LESS
1465: AND
1466: IFFALSE 1356
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1468: LD_EXP 1
1472: PUSH
1473: LD_EXP 5
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PPUSH
1482: LD_EXP 8
1486: PPUSH
1487: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1491: LD_EXP 8
1495: PUSH
1496: LD_EXP 4
1500: PUSH
1501: LD_EXP 9
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: LIST
1510: PPUSH
1511: LD_EXP 1
1515: PPUSH
1516: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1520: LD_INT 7
1522: PPUSH
1523: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1527: LD_EXP 8
1531: PPUSH
1532: LD_STRING DKu-Kurt-1
1534: PPUSH
1535: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1539: LD_EXP 5
1543: PPUSH
1544: LD_STRING DK-Kurt-1
1546: PPUSH
1547: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1551: LD_EXP 8
1555: PPUSH
1556: LD_STRING DKu-Kurt-2
1558: PPUSH
1559: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1563: LD_INT 7
1565: PPUSH
1566: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1570: LD_EXP 1
1574: PPUSH
1575: LD_STRING DH-Kurt-1
1577: PPUSH
1578: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1582: LD_EXP 8
1586: PPUSH
1587: LD_STRING DKu-Kurt-3
1589: PPUSH
1590: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1594: LD_EXP 5
1598: PPUSH
1599: LD_STRING DK-Kurt-3
1601: PPUSH
1602: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1606: LD_EXP 9
1610: PPUSH
1611: LD_STRING DHa-Kurt-3
1613: PPUSH
1614: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1618: LD_EXP 4
1622: PPUSH
1623: LD_STRING DO-Kurt-3
1625: PPUSH
1626: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] ;
1630: LD_ADDR_VAR 0 3
1634: PUSH
1635: LD_EXP 8
1639: PUSH
1640: LD_EXP 4
1644: PUSH
1645: LD_EXP 9
1649: PUSH
1650: LD_EXP 5
1654: PUSH
1655: LD_EXP 1
1659: PUSH
1660: EMPTY
1661: LIST
1662: LIST
1663: LIST
1664: LIST
1665: LIST
1666: ST_TO_ADDR
// for i = 1 to 5 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 5
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1756
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1683: LD_VAR 0 3
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: PUSH
1708: LD_INT 4
1710: PLUS
1711: ARRAY
1712: PPUSH
1713: LD_VAR 0 2
1717: PUSH
1718: LD_INT 2
1720: ARRAY
1721: PUSH
1722: LD_VAR 0 1
1726: PUSH
1727: LD_INT 4
1729: PLUS
1730: ARRAY
1731: PPUSH
1732: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1736: LD_VAR 0 3
1740: PUSH
1741: LD_VAR 0 1
1745: ARRAY
1746: PPUSH
1747: LD_INT 14
1749: PPUSH
1750: CALL_OW 179
// end ;
1754: GO 1680
1756: POP
1757: POP
// wait ( 0 0$2 ) ;
1758: LD_INT 70
1760: PPUSH
1761: CALL_OW 67
// CenterOnUnits ( eon ) ;
1765: LD_INT 14
1767: PPUSH
1768: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1772: LD_INT 90
1774: PPUSH
1775: LD_INT 43
1777: PPUSH
1778: LD_INT 2
1780: PPUSH
1781: LD_INT 21
1783: NEG
1784: PPUSH
1785: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
1789: LD_EXP 2
1793: PPUSH
1794: LD_INT 84
1796: PPUSH
1797: LD_INT 36
1799: PPUSH
1800: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
1804: LD_EXP 2
1808: PPUSH
1809: LD_INT 14
1811: PPUSH
1812: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
1816: LD_EXP 11
1820: PPUSH
1821: LD_INT 85
1823: PPUSH
1824: LD_INT 36
1826: PPUSH
1827: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
1831: LD_EXP 11
1835: PPUSH
1836: LD_INT 14
1838: PPUSH
1839: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
1843: LD_EXP 10
1847: PPUSH
1848: LD_INT 86
1850: PPUSH
1851: LD_INT 36
1853: PPUSH
1854: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
1858: LD_EXP 10
1862: PPUSH
1863: LD_INT 14
1865: PPUSH
1866: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
1870: LD_EXP 7
1874: PPUSH
1875: LD_INT 87
1877: PPUSH
1878: LD_INT 36
1880: PPUSH
1881: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
1885: LD_EXP 7
1889: PPUSH
1890: LD_INT 14
1892: PPUSH
1893: CALL_OW 179
// wait ( 0 0$3 ) ;
1897: LD_INT 105
1899: PPUSH
1900: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1904: LD_INT 35
1906: PPUSH
1907: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
1911: LD_EXP 1
1915: PPUSH
1916: LD_INT 6
1918: PPUSH
1919: CALL_OW 308
1923: IFFALSE 1904
// heikeNearbyEon := true ;
1925: LD_ADDR_EXP 19
1929: PUSH
1930: LD_INT 1
1932: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
1933: LD_EXP 6
1937: PPUSH
1938: LD_INT 88
1940: PPUSH
1941: LD_INT 37
1943: PPUSH
1944: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
1948: LD_EXP 6
1952: PPUSH
1953: LD_EXP 13
1957: PUSH
1958: LD_INT 1
1960: ARRAY
1961: PPUSH
1962: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
1966: LD_EXP 13
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: PPUSH
1975: LD_INT 89
1977: PPUSH
1978: LD_INT 37
1980: PPUSH
1981: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
1985: LD_EXP 13
1989: PUSH
1990: LD_INT 2
1992: ARRAY
1993: PPUSH
1994: LD_INT 91
1996: PPUSH
1997: LD_INT 39
1999: PPUSH
2000: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2004: LD_EXP 13
2008: PPUSH
2009: LD_EXP 11
2013: PPUSH
2014: CALL_OW 179
// wait ( 0 0$1 ) ;
2018: LD_INT 35
2020: PPUSH
2021: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2025: LD_EXP 13
2029: PUSH
2030: LD_INT 1
2032: ARRAY
2033: PPUSH
2034: LD_STRING DS-eon-1
2036: PPUSH
2037: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2041: LD_EXP 6
2045: PPUSH
2046: LD_STRING DSh-eon-1
2048: PPUSH
2049: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2053: LD_EXP 13
2057: PUSH
2058: LD_INT 1
2060: ARRAY
2061: PPUSH
2062: LD_INT 92
2064: PPUSH
2065: LD_INT 43
2067: PPUSH
2068: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2072: LD_EXP 13
2076: PUSH
2077: LD_INT 1
2079: ARRAY
2080: PPUSH
2081: LD_INT 14
2083: PPUSH
2084: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2088: LD_EXP 13
2092: PUSH
2093: LD_INT 2
2095: ARRAY
2096: PPUSH
2097: LD_INT 93
2099: PPUSH
2100: LD_INT 41
2102: PPUSH
2103: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2107: LD_EXP 13
2111: PUSH
2112: LD_INT 2
2114: ARRAY
2115: PPUSH
2116: LD_INT 93
2118: PPUSH
2119: LD_INT 40
2121: PPUSH
2122: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2126: LD_EXP 6
2130: PPUSH
2131: LD_INT 88
2133: PPUSH
2134: LD_INT 41
2136: PPUSH
2137: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2141: LD_EXP 6
2145: PPUSH
2146: LD_INT 87
2148: PPUSH
2149: LD_INT 41
2151: PPUSH
2152: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2163: LD_EXP 6
2167: PPUSH
2168: LD_INT 88
2170: PPUSH
2171: LD_INT 41
2173: PPUSH
2174: CALL_OW 307
2178: IFFALSE 2156
// wait ( 0 0$1 ) ;
2180: LD_INT 35
2182: PPUSH
2183: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2187: LD_EXP 6
2191: PPUSH
2192: LD_STRING DSh-eon-2
2194: PPUSH
2195: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2199: LD_EXP 11
2203: PPUSH
2204: LD_INT 87
2206: PPUSH
2207: LD_INT 40
2209: PPUSH
2210: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2214: LD_EXP 11
2218: PPUSH
2219: LD_INT 86
2221: PPUSH
2222: LD_INT 40
2224: PPUSH
2225: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2229: LD_INT 35
2231: PPUSH
2232: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2236: LD_EXP 11
2240: PPUSH
2241: LD_INT 87
2243: PPUSH
2244: LD_INT 40
2246: PPUSH
2247: CALL_OW 307
2251: IFFALSE 2229
// Say ( Shariff , DShar-eon-3 ) ;
2253: LD_EXP 11
2257: PPUSH
2258: LD_STRING DShar-eon-3
2260: PPUSH
2261: CALL_OW 88
// Say ( Shariff , DShar-eon-4 ) ;
2265: LD_EXP 11
2269: PPUSH
2270: LD_STRING DShar-eon-4
2272: PPUSH
2273: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2277: LD_EXP 5
2281: PPUSH
2282: LD_STRING DK-eon-4
2284: PPUSH
2285: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2289: LD_EXP 5
2293: PPUSH
2294: LD_INT 14
2296: PPUSH
2297: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2301: LD_INT 35
2303: PPUSH
2304: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2308: LD_EXP 5
2312: PPUSH
2313: CALL_OW 305
2317: NOT
2318: IFFALSE 2301
// Say ( Shariff , DShar-eon-5 ) ;
2320: LD_EXP 11
2324: PPUSH
2325: LD_STRING DShar-eon-5
2327: PPUSH
2328: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2332: LD_EXP 1
2336: PPUSH
2337: LD_INT 91
2339: PPUSH
2340: LD_INT 44
2342: PPUSH
2343: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2347: LD_EXP 1
2351: PPUSH
2352: LD_INT 14
2354: PPUSH
2355: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2359: LD_INT 35
2361: PPUSH
2362: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2366: LD_EXP 1
2370: PPUSH
2371: LD_INT 91
2373: PPUSH
2374: LD_INT 44
2376: PPUSH
2377: CALL_OW 307
2381: IFFALSE 2359
// Say ( Heike , DH-eon-5 ) ;
2383: LD_EXP 1
2387: PPUSH
2388: LD_STRING DH-eon-5
2390: PPUSH
2391: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2395: LD_EXP 1
2399: PPUSH
2400: LD_INT 14
2402: PPUSH
2403: CALL_OW 120
// wait ( 0 0$2 ) ;
2407: LD_INT 70
2409: PPUSH
2410: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2414: LD_INT 1
2416: PPUSH
2417: LD_STRING %_cont
2419: PPUSH
2420: CALL_OW 340
// InGameOff ;
2424: CALL_OW 9
// end ; end_of_file
2428: PPOPN 3
2430: END
// export function PrepareHeikeGroup ; begin
2431: LD_INT 0
2433: PPUSH
// uc_side := 2 ;
2434: LD_ADDR_OWVAR 20
2438: PUSH
2439: LD_INT 2
2441: ST_TO_ADDR
// uc_nation := 2 ;
2442: LD_ADDR_OWVAR 21
2446: PUSH
2447: LD_INT 2
2449: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2450: LD_ADDR_EXP 1
2454: PUSH
2455: LD_STRING Heike
2457: PPUSH
2458: CALL_OW 25
2462: ST_TO_ADDR
// uc_side := 5 ;
2463: LD_ADDR_OWVAR 20
2467: PUSH
2468: LD_INT 5
2470: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2471: LD_ADDR_EXP 5
2475: PUSH
2476: LD_STRING Kaia
2478: PPUSH
2479: CALL_OW 25
2483: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2484: LD_EXP 1
2488: PPUSH
2489: LD_INT 3
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2499: LD_EXP 5
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 0
2509: PPUSH
2510: CALL_OW 49
// end ;
2514: LD_VAR 0 1
2518: RET
// export function PrepareSheikGroup ; var un , i ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
2523: PPUSH
// uc_side := 5 ;
2524: LD_ADDR_OWVAR 20
2528: PUSH
2529: LD_INT 5
2531: ST_TO_ADDR
// uc_nation := 2 ;
2532: LD_ADDR_OWVAR 21
2536: PUSH
2537: LD_INT 2
2539: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2540: LD_ADDR_EXP 10
2544: PUSH
2545: LD_STRING Ali
2547: PPUSH
2548: CALL_OW 25
2552: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2553: LD_ADDR_EXP 11
2557: PUSH
2558: LD_STRING Abdul
2560: PPUSH
2561: CALL_OW 25
2565: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2566: LD_ADDR_EXP 2
2570: PUSH
2571: LD_STRING Omar
2573: PPUSH
2574: CALL_OW 25
2578: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2579: LD_ADDR_EXP 7
2583: PUSH
2584: LD_STRING Mahtab
2586: PPUSH
2587: CALL_OW 25
2591: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2592: LD_ADDR_EXP 6
2596: PUSH
2597: LD_STRING Shahrzad
2599: PPUSH
2600: CALL_OW 25
2604: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2605: LD_EXP 10
2609: PPUSH
2610: LD_INT 85
2612: PPUSH
2613: LD_INT 37
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2623: LD_EXP 11
2627: PPUSH
2628: LD_INT 87
2630: PPUSH
2631: LD_INT 37
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2641: LD_EXP 2
2645: PPUSH
2646: LD_INT 85
2648: PPUSH
2649: LD_INT 35
2651: PPUSH
2652: LD_INT 0
2654: PPUSH
2655: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2659: LD_EXP 7
2663: PPUSH
2664: LD_INT 86
2666: PPUSH
2667: LD_INT 39
2669: PPUSH
2670: LD_INT 0
2672: PPUSH
2673: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2677: LD_EXP 6
2681: PPUSH
2682: LD_INT 88
2684: PPUSH
2685: LD_INT 39
2687: PPUSH
2688: LD_INT 0
2690: PPUSH
2691: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2695: LD_EXP 10
2699: PPUSH
2700: LD_EXP 11
2704: PPUSH
2705: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2709: LD_EXP 11
2713: PPUSH
2714: LD_EXP 10
2718: PPUSH
2719: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
2723: LD_EXP 2
2727: PPUSH
2728: LD_EXP 11
2732: PPUSH
2733: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
2737: LD_EXP 7
2741: PUSH
2742: LD_EXP 6
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: LD_EXP 11
2755: PPUSH
2756: CALL_OW 119
// for i := 1 to 2 do
2760: LD_ADDR_VAR 0 3
2764: PUSH
2765: DOUBLE
2766: LD_INT 1
2768: DEC
2769: ST_TO_ADDR
2770: LD_INT 2
2772: PUSH
2773: FOR_TO
2774: IFFALSE 2860
// begin PrepareHuman ( false , 4 , 6 ) ;
2776: LD_INT 0
2778: PPUSH
2779: LD_INT 4
2781: PPUSH
2782: LD_INT 6
2784: PPUSH
2785: CALL_OW 380
// un := CreateHuman ;
2789: LD_ADDR_VAR 0 2
2793: PUSH
2794: CALL_OW 44
2798: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
2799: LD_VAR 0 2
2803: PPUSH
2804: LD_INT 90
2806: PPUSH
2807: LD_INT 44
2809: PPUSH
2810: LD_INT 3
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
2820: LD_VAR 0 2
2824: PPUSH
2825: LD_INT 91
2827: PPUSH
2828: LD_INT 43
2830: PPUSH
2831: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
2835: LD_ADDR_EXP 13
2839: PUSH
2840: LD_EXP 13
2844: PPUSH
2845: LD_INT 1
2847: PPUSH
2848: LD_VAR 0 2
2852: PPUSH
2853: CALL_OW 2
2857: ST_TO_ADDR
// end ;
2858: GO 2773
2860: POP
2861: POP
// scientists := scientists diff 0 ;
2862: LD_ADDR_EXP 13
2866: PUSH
2867: LD_EXP 13
2871: PUSH
2872: LD_INT 0
2874: DIFF
2875: ST_TO_ADDR
// end ;
2876: LD_VAR 0 1
2880: RET
// export function PrepareKurtGroup ; var i ; begin
2881: LD_INT 0
2883: PPUSH
2884: PPUSH
// uc_side := 5 ;
2885: LD_ADDR_OWVAR 20
2889: PUSH
2890: LD_INT 5
2892: ST_TO_ADDR
// uc_nation := 2 ;
2893: LD_ADDR_OWVAR 21
2897: PUSH
2898: LD_INT 2
2900: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
2901: LD_ADDR_EXP 8
2905: PUSH
2906: LD_STRING Kurt
2908: PPUSH
2909: CALL_OW 25
2913: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
2914: LD_ADDR_EXP 4
2918: PUSH
2919: LD_STRING Olaf
2921: PPUSH
2922: CALL_OW 25
2926: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
2927: LD_ADDR_EXP 9
2931: PUSH
2932: LD_STRING Hans
2934: PPUSH
2935: CALL_OW 25
2939: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: LD_EXP 8
2949: PUSH
2950: LD_EXP 9
2954: PUSH
2955: LD_EXP 4
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: LIST
2964: PUSH
2965: FOR_IN
2966: IFFALSE 2985
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
2968: LD_VAR 0 2
2972: PPUSH
2973: LD_INT 10
2975: PPUSH
2976: LD_INT 0
2978: PPUSH
2979: CALL_OW 49
2983: GO 2965
2985: POP
2986: POP
// ComTurnUnit ( Kurt , Hans ) ;
2987: LD_EXP 8
2991: PPUSH
2992: LD_EXP 9
2996: PPUSH
2997: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3001: LD_EXP 4
3005: PPUSH
3006: LD_EXP 9
3010: PPUSH
3011: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3015: LD_EXP 9
3019: PPUSH
3020: LD_EXP 4
3024: PPUSH
3025: CALL_OW 119
// end ;
3029: LD_VAR 0 1
3033: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3040: LD_ADDR_VAR 0 2
3044: PUSH
3045: LD_INT 21
3047: PUSH
3048: LD_INT 3
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PPUSH
3055: CALL_OW 69
3059: PUSH
3060: LD_INT 14
3062: DIFF
3063: PUSH
3064: FOR_IN
3065: IFFALSE 3145
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3067: LD_VAR 0 2
3071: PPUSH
3072: CALL_OW 266
3076: PUSH
3077: LD_INT 6
3079: PUSH
3080: LD_INT 31
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: IN
3087: IFFALSE 3111
// SetLives ( i , rand ( 500 , 600 ) ) else
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 500
3096: PPUSH
3097: LD_INT 600
3099: PPUSH
3100: CALL_OW 12
3104: PPUSH
3105: CALL_OW 234
3109: GO 3131
// SetLives ( i , rand ( 300 , 499 ) ) ;
3111: LD_VAR 0 2
3115: PPUSH
3116: LD_INT 300
3118: PPUSH
3119: LD_INT 499
3121: PPUSH
3122: CALL_OW 12
3126: PPUSH
3127: CALL_OW 234
// SetSide ( i , 5 ) ;
3131: LD_VAR 0 2
3135: PPUSH
3136: LD_INT 5
3138: PPUSH
3139: CALL_OW 235
// end ;
3143: GO 3064
3145: POP
3146: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: LD_INT 9
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 517
3162: ST_TO_ADDR
// uc_side := 4 ;
3163: LD_ADDR_OWVAR 20
3167: PUSH
3168: LD_INT 4
3170: ST_TO_ADDR
// uc_nation := 1 ;
3171: LD_ADDR_OWVAR 21
3175: PUSH
3176: LD_INT 1
3178: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3179: LD_ADDR_VAR 0 2
3183: PUSH
3184: DOUBLE
3185: LD_INT 1
3187: DEC
3188: ST_TO_ADDR
3189: LD_VAR 0 4
3193: PUSH
3194: LD_INT 1
3196: ARRAY
3197: PUSH
3198: FOR_TO
3199: IFFALSE 3275
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3201: LD_INT 0
3203: PPUSH
3204: LD_INT 1
3206: PUSH
3207: LD_INT 1
3209: PUSH
3210: LD_INT 4
3212: PUSH
3213: EMPTY
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_VAR 0 2
3222: PUSH
3223: LD_INT 3
3225: MOD
3226: PUSH
3227: LD_INT 1
3229: PLUS
3230: ARRAY
3231: PPUSH
3232: LD_INT 0
3234: PPUSH
3235: CALL_OW 380
// un := CreateHuman ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: CALL_OW 44
3248: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3249: LD_VAR 0 3
3253: PPUSH
3254: LD_INT 9
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 49
// KillUnit ( un ) ;
3264: LD_VAR 0 3
3268: PPUSH
3269: CALL_OW 66
// end ;
3273: GO 3198
3275: POP
3276: POP
// end ;
3277: LD_VAR 0 1
3281: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3282: LD_INT 0
3284: PPUSH
3285: PPUSH
3286: PPUSH
3287: PPUSH
3288: PPUSH
3289: PPUSH
3290: PPUSH
// uc_side := 5 ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_INT 5
3298: ST_TO_ADDR
// uc_nation := 2 ;
3299: LD_ADDR_OWVAR 21
3303: PUSH
3304: LD_INT 2
3306: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3307: LD_ADDR_VAR 0 6
3311: PUSH
3312: LD_INT 2
3314: PUSH
3315: LD_INT 4
3317: PUSH
3318: LD_INT 5
3320: PUSH
3321: LD_INT 14
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: LIST
3328: LIST
3329: ST_TO_ADDR
// InitHc ;
3330: CALL_OW 19
// for i in area do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: LD_VAR 0 6
3343: PUSH
3344: FOR_IN
3345: IFFALSE 3509
// begin tmp := AreaToList ( i , 0 ) ;
3347: LD_ADDR_VAR 0 5
3351: PUSH
3352: LD_VAR 0 2
3356: PPUSH
3357: LD_INT 0
3359: PPUSH
3360: CALL_OW 517
3364: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3365: LD_ADDR_VAR 0 3
3369: PUSH
3370: DOUBLE
3371: LD_INT 1
3373: DEC
3374: ST_TO_ADDR
3375: LD_VAR 0 5
3379: PUSH
3380: LD_INT 1
3382: ARRAY
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3505
// begin PrepareHuman ( false , 1 , 3 ) ;
3387: LD_INT 0
3389: PPUSH
3390: LD_INT 1
3392: PPUSH
3393: LD_INT 3
3395: PPUSH
3396: CALL_OW 380
// un := CreateHuman ;
3400: LD_ADDR_VAR 0 7
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// if i = spawnBaseArea3 then
3410: LD_VAR 0 2
3414: PUSH
3415: LD_INT 5
3417: EQUAL
3418: IFFALSE 3436
// eonGuards := eonGuards ^ un ;
3420: LD_ADDR_EXP 14
3424: PUSH
3425: LD_EXP 14
3429: PUSH
3430: LD_VAR 0 7
3434: ADD
3435: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3436: LD_VAR 0 7
3440: PPUSH
3441: LD_VAR 0 2
3445: PPUSH
3446: LD_INT 0
3448: PPUSH
3449: CALL_OW 49
// ComHold ( un ) ;
3453: LD_VAR 0 7
3457: PPUSH
3458: CALL_OW 140
// if i = spawnBaseArea4 then
3462: LD_VAR 0 2
3466: PUSH
3467: LD_INT 14
3469: EQUAL
3470: IFFALSE 3503
// begin firstGroup := firstGroup ^ un ;
3472: LD_ADDR_EXP 15
3476: PUSH
3477: LD_EXP 15
3481: PUSH
3482: LD_VAR 0 7
3486: ADD
3487: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3488: LD_VAR 0 7
3492: PPUSH
3493: LD_INT 108
3495: PPUSH
3496: LD_INT 47
3498: PPUSH
3499: CALL_OW 118
// end ; end ;
3503: GO 3384
3505: POP
3506: POP
// end ;
3507: GO 3344
3509: POP
3510: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 30
3523: PUSH
3524: LD_INT 31
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PPUSH
3531: CALL_OW 69
3535: PUSH
3536: FOR_TO
3537: IFFALSE 3631
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3539: LD_ADDR_VAR 0 4
3543: PUSH
3544: LD_INT 30
3546: PUSH
3547: LD_INT 31
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PPUSH
3554: CALL_OW 69
3558: PUSH
3559: LD_VAR 0 2
3563: ARRAY
3564: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3565: LD_INT 1
3567: PPUSH
3568: LD_INT 1
3570: PPUSH
3571: LD_INT 3
3573: PPUSH
3574: CALL_OW 380
// un := CreateHuman ;
3578: LD_ADDR_VAR 0 7
3582: PUSH
3583: CALL_OW 44
3587: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3588: LD_VAR 0 7
3592: PPUSH
3593: LD_VAR 0 4
3597: PPUSH
3598: CALL_OW 254
3602: PUSH
3603: LD_INT 3
3605: PLUS
3606: PUSH
3607: LD_INT 6
3609: MOD
3610: PPUSH
3611: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3615: LD_VAR 0 7
3619: PPUSH
3620: LD_VAR 0 4
3624: PPUSH
3625: CALL_OW 52
// end ;
3629: GO 3536
3631: POP
3632: POP
// end ; end_of_file
3633: LD_VAR 0 1
3637: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3638: LD_VAR 0 1
3642: PUSH
3643: LD_INT 2
3645: EQUAL
3646: PUSH
3647: LD_VAR 0 2
3651: PUSH
3652: LD_INT 5
3654: EQUAL
3655: AND
3656: IFFALSE 3674
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 5
3663: PPUSH
3664: LD_INT 2
3666: PPUSH
3667: LD_INT 1
3669: PPUSH
3670: CALL_OW 80
// end ;
3674: PPOPN 2
3676: END
// every 0 0$1 trigger scientists do var i ;
3677: LD_EXP 13
3681: IFFALSE 3889
3683: GO 3685
3685: DISABLE
3686: LD_INT 0
3688: PPUSH
// begin repeat for i in scientists do
3689: LD_ADDR_VAR 0 1
3693: PUSH
3694: LD_EXP 13
3698: PUSH
3699: FOR_IN
3700: IFFALSE 3874
// begin wait ( 0 0$1 ) ;
3702: LD_INT 35
3704: PPUSH
3705: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3709: LD_VAR 0 1
3713: PPUSH
3714: LD_INT 11
3716: PUSH
3717: LD_INT 13
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_VAR 0 1
3728: PUSH
3729: LD_INT 2
3731: MOD
3732: PUSH
3733: LD_INT 1
3735: PLUS
3736: ARRAY
3737: PPUSH
3738: CALL_OW 308
3742: NOT
3743: IFFALSE 3778
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
3745: LD_VAR 0 1
3749: PPUSH
3750: LD_INT 11
3752: PUSH
3753: LD_INT 13
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_VAR 0 1
3764: PUSH
3765: LD_INT 2
3767: MOD
3768: PUSH
3769: LD_INT 1
3771: PLUS
3772: ARRAY
3773: PPUSH
3774: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
3778: LD_VAR 0 1
3782: PPUSH
3783: LD_INT 14
3785: PPUSH
3786: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
3790: LD_VAR 0 1
3794: PPUSH
3795: LD_INT 70
3797: PPUSH
3798: CALL_OW 202
// if rand ( 0 , 1 ) then
3802: LD_INT 0
3804: PPUSH
3805: LD_INT 1
3807: PPUSH
3808: CALL_OW 12
3812: IFFALSE 3826
// AddComAnim ( i , 15 ) ;
3814: LD_VAR 0 1
3818: PPUSH
3819: LD_INT 15
3821: PPUSH
3822: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
3826: LD_VAR 0 1
3830: PPUSH
3831: LD_INT 35
3833: PPUSH
3834: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
3838: LD_VAR 0 1
3842: PPUSH
3843: LD_INT 12
3845: PPUSH
3846: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
3850: LD_VAR 0 1
3854: PPUSH
3855: LD_INT 93
3857: PPUSH
3858: LD_INT 40
3860: PPUSH
3861: CALL_OW 178
// wait ( 0 0$1 ) ;
3865: LD_INT 35
3867: PPUSH
3868: CALL_OW 67
// end ;
3872: GO 3699
3874: POP
3875: POP
// wait ( 0 0$10 ) ;
3876: LD_INT 350
3878: PPUSH
3879: CALL_OW 67
// until heikeNearbyEon ;
3883: LD_EXP 19
3887: IFFALSE 3689
// end ; end_of_file
3889: PPOPN 1
3891: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
3892: GO 3894
3894: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
3895: LD_STRING initStreamRollete();
3897: PPUSH
3898: CALL_OW 559
// InitStreamMode ;
3902: CALL 3911 0 0
// DefineStreamItems ( ) ;
3906: CALL 4351 0 0
// end ;
3910: END
// function InitStreamMode ; begin
3911: LD_INT 0
3913: PPUSH
// streamModeActive := false ;
3914: LD_ADDR_EXP 21
3918: PUSH
3919: LD_INT 0
3921: ST_TO_ADDR
// normalCounter := 26 ;
3922: LD_ADDR_EXP 22
3926: PUSH
3927: LD_INT 26
3929: ST_TO_ADDR
// hardcoreCounter := 12 ;
3930: LD_ADDR_EXP 23
3934: PUSH
3935: LD_INT 12
3937: ST_TO_ADDR
// sRocket := false ;
3938: LD_ADDR_EXP 26
3942: PUSH
3943: LD_INT 0
3945: ST_TO_ADDR
// sSpeed := false ;
3946: LD_ADDR_EXP 25
3950: PUSH
3951: LD_INT 0
3953: ST_TO_ADDR
// sEngine := false ;
3954: LD_ADDR_EXP 27
3958: PUSH
3959: LD_INT 0
3961: ST_TO_ADDR
// sSpec := false ;
3962: LD_ADDR_EXP 24
3966: PUSH
3967: LD_INT 0
3969: ST_TO_ADDR
// sLevel := false ;
3970: LD_ADDR_EXP 28
3974: PUSH
3975: LD_INT 0
3977: ST_TO_ADDR
// sArmoury := false ;
3978: LD_ADDR_EXP 29
3982: PUSH
3983: LD_INT 0
3985: ST_TO_ADDR
// sRadar := false ;
3986: LD_ADDR_EXP 30
3990: PUSH
3991: LD_INT 0
3993: ST_TO_ADDR
// sBunker := false ;
3994: LD_ADDR_EXP 31
3998: PUSH
3999: LD_INT 0
4001: ST_TO_ADDR
// sHack := false ;
4002: LD_ADDR_EXP 32
4006: PUSH
4007: LD_INT 0
4009: ST_TO_ADDR
// sFire := false ;
4010: LD_ADDR_EXP 33
4014: PUSH
4015: LD_INT 0
4017: ST_TO_ADDR
// sRefresh := false ;
4018: LD_ADDR_EXP 34
4022: PUSH
4023: LD_INT 0
4025: ST_TO_ADDR
// sExp := false ;
4026: LD_ADDR_EXP 35
4030: PUSH
4031: LD_INT 0
4033: ST_TO_ADDR
// sDepot := false ;
4034: LD_ADDR_EXP 36
4038: PUSH
4039: LD_INT 0
4041: ST_TO_ADDR
// sFlag := false ;
4042: LD_ADDR_EXP 37
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// sKamikadze := false ;
4050: LD_ADDR_EXP 45
4054: PUSH
4055: LD_INT 0
4057: ST_TO_ADDR
// sTroll := false ;
4058: LD_ADDR_EXP 46
4062: PUSH
4063: LD_INT 0
4065: ST_TO_ADDR
// sSlow := false ;
4066: LD_ADDR_EXP 47
4070: PUSH
4071: LD_INT 0
4073: ST_TO_ADDR
// sLack := false ;
4074: LD_ADDR_EXP 48
4078: PUSH
4079: LD_INT 0
4081: ST_TO_ADDR
// sTank := false ;
4082: LD_ADDR_EXP 50
4086: PUSH
4087: LD_INT 0
4089: ST_TO_ADDR
// sRemote := false ;
4090: LD_ADDR_EXP 51
4094: PUSH
4095: LD_INT 0
4097: ST_TO_ADDR
// sPowell := false ;
4098: LD_ADDR_EXP 52
4102: PUSH
4103: LD_INT 0
4105: ST_TO_ADDR
// sTeleport := false ;
4106: LD_ADDR_EXP 55
4110: PUSH
4111: LD_INT 0
4113: ST_TO_ADDR
// sOilTower := false ;
4114: LD_ADDR_EXP 57
4118: PUSH
4119: LD_INT 0
4121: ST_TO_ADDR
// sShovel := false ;
4122: LD_ADDR_EXP 58
4126: PUSH
4127: LD_INT 0
4129: ST_TO_ADDR
// sSheik := false ;
4130: LD_ADDR_EXP 59
4134: PUSH
4135: LD_INT 0
4137: ST_TO_ADDR
// sEarthquake := false ;
4138: LD_ADDR_EXP 61
4142: PUSH
4143: LD_INT 0
4145: ST_TO_ADDR
// sAI := false ;
4146: LD_ADDR_EXP 62
4150: PUSH
4151: LD_INT 0
4153: ST_TO_ADDR
// sCargo := false ;
4154: LD_ADDR_EXP 65
4158: PUSH
4159: LD_INT 0
4161: ST_TO_ADDR
// sDLaser := false ;
4162: LD_ADDR_EXP 66
4166: PUSH
4167: LD_INT 0
4169: ST_TO_ADDR
// sExchange := false ;
4170: LD_ADDR_EXP 67
4174: PUSH
4175: LD_INT 0
4177: ST_TO_ADDR
// sFac := false ;
4178: LD_ADDR_EXP 68
4182: PUSH
4183: LD_INT 0
4185: ST_TO_ADDR
// sPower := false ;
4186: LD_ADDR_EXP 69
4190: PUSH
4191: LD_INT 0
4193: ST_TO_ADDR
// sRandom := false ;
4194: LD_ADDR_EXP 70
4198: PUSH
4199: LD_INT 0
4201: ST_TO_ADDR
// sShield := false ;
4202: LD_ADDR_EXP 71
4206: PUSH
4207: LD_INT 0
4209: ST_TO_ADDR
// sTime := false ;
4210: LD_ADDR_EXP 72
4214: PUSH
4215: LD_INT 0
4217: ST_TO_ADDR
// sTools := false ;
4218: LD_ADDR_EXP 73
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// sSold := false ;
4226: LD_ADDR_EXP 38
4230: PUSH
4231: LD_INT 0
4233: ST_TO_ADDR
// sDiff := false ;
4234: LD_ADDR_EXP 39
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// sFog := false ;
4242: LD_ADDR_EXP 42
4246: PUSH
4247: LD_INT 0
4249: ST_TO_ADDR
// sReset := false ;
4250: LD_ADDR_EXP 43
4254: PUSH
4255: LD_INT 0
4257: ST_TO_ADDR
// sSun := false ;
4258: LD_ADDR_EXP 44
4262: PUSH
4263: LD_INT 0
4265: ST_TO_ADDR
// sTiger := false ;
4266: LD_ADDR_EXP 40
4270: PUSH
4271: LD_INT 0
4273: ST_TO_ADDR
// sBomb := false ;
4274: LD_ADDR_EXP 41
4278: PUSH
4279: LD_INT 0
4281: ST_TO_ADDR
// sWound := false ;
4282: LD_ADDR_EXP 49
4286: PUSH
4287: LD_INT 0
4289: ST_TO_ADDR
// sBetray := false ;
4290: LD_ADDR_EXP 53
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// sContamin := false ;
4298: LD_ADDR_EXP 54
4302: PUSH
4303: LD_INT 0
4305: ST_TO_ADDR
// sOil := false ;
4306: LD_ADDR_EXP 56
4310: PUSH
4311: LD_INT 0
4313: ST_TO_ADDR
// sStu := false ;
4314: LD_ADDR_EXP 60
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// sBazooka := false ;
4322: LD_ADDR_EXP 63
4326: PUSH
4327: LD_INT 0
4329: ST_TO_ADDR
// sMortar := false ;
4330: LD_ADDR_EXP 64
4334: PUSH
4335: LD_INT 0
4337: ST_TO_ADDR
// sRanger := false ;
4338: LD_ADDR_EXP 74
4342: PUSH
4343: LD_INT 0
4345: ST_TO_ADDR
// end ;
4346: LD_VAR 0 1
4350: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4351: LD_INT 0
4353: PPUSH
4354: PPUSH
4355: PPUSH
4356: PPUSH
4357: PPUSH
// result := [ ] ;
4358: LD_ADDR_VAR 0 1
4362: PUSH
4363: EMPTY
4364: ST_TO_ADDR
// if campaign_id = 1 then
4365: LD_OWVAR 69
4369: PUSH
4370: LD_INT 1
4372: EQUAL
4373: IFFALSE 7311
// begin case mission_number of 1 :
4375: LD_OWVAR 70
4379: PUSH
4380: LD_INT 1
4382: DOUBLE
4383: EQUAL
4384: IFTRUE 4388
4386: GO 4452
4388: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4389: LD_ADDR_VAR 0 1
4393: PUSH
4394: LD_INT 2
4396: PUSH
4397: LD_INT 4
4399: PUSH
4400: LD_INT 11
4402: PUSH
4403: LD_INT 12
4405: PUSH
4406: LD_INT 15
4408: PUSH
4409: LD_INT 16
4411: PUSH
4412: LD_INT 22
4414: PUSH
4415: LD_INT 23
4417: PUSH
4418: LD_INT 26
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: LIST
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 101
4434: PUSH
4435: LD_INT 102
4437: PUSH
4438: LD_INT 106
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: ST_TO_ADDR
4450: GO 7309
4452: LD_INT 2
4454: DOUBLE
4455: EQUAL
4456: IFTRUE 4460
4458: GO 4532
4460: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4461: LD_ADDR_VAR 0 1
4465: PUSH
4466: LD_INT 2
4468: PUSH
4469: LD_INT 4
4471: PUSH
4472: LD_INT 11
4474: PUSH
4475: LD_INT 12
4477: PUSH
4478: LD_INT 15
4480: PUSH
4481: LD_INT 16
4483: PUSH
4484: LD_INT 22
4486: PUSH
4487: LD_INT 23
4489: PUSH
4490: LD_INT 26
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: PUSH
4504: LD_INT 101
4506: PUSH
4507: LD_INT 102
4509: PUSH
4510: LD_INT 105
4512: PUSH
4513: LD_INT 106
4515: PUSH
4516: LD_INT 108
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: LIST
4529: ST_TO_ADDR
4530: GO 7309
4532: LD_INT 3
4534: DOUBLE
4535: EQUAL
4536: IFTRUE 4540
4538: GO 4616
4540: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4541: LD_ADDR_VAR 0 1
4545: PUSH
4546: LD_INT 2
4548: PUSH
4549: LD_INT 4
4551: PUSH
4552: LD_INT 5
4554: PUSH
4555: LD_INT 11
4557: PUSH
4558: LD_INT 12
4560: PUSH
4561: LD_INT 15
4563: PUSH
4564: LD_INT 16
4566: PUSH
4567: LD_INT 22
4569: PUSH
4570: LD_INT 26
4572: PUSH
4573: LD_INT 36
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 101
4590: PUSH
4591: LD_INT 102
4593: PUSH
4594: LD_INT 105
4596: PUSH
4597: LD_INT 106
4599: PUSH
4600: LD_INT 108
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: ST_TO_ADDR
4614: GO 7309
4616: LD_INT 4
4618: DOUBLE
4619: EQUAL
4620: IFTRUE 4624
4622: GO 4708
4624: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4625: LD_ADDR_VAR 0 1
4629: PUSH
4630: LD_INT 2
4632: PUSH
4633: LD_INT 4
4635: PUSH
4636: LD_INT 5
4638: PUSH
4639: LD_INT 8
4641: PUSH
4642: LD_INT 11
4644: PUSH
4645: LD_INT 12
4647: PUSH
4648: LD_INT 15
4650: PUSH
4651: LD_INT 16
4653: PUSH
4654: LD_INT 22
4656: PUSH
4657: LD_INT 23
4659: PUSH
4660: LD_INT 26
4662: PUSH
4663: LD_INT 36
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: LIST
4674: LIST
4675: LIST
4676: LIST
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 101
4682: PUSH
4683: LD_INT 102
4685: PUSH
4686: LD_INT 105
4688: PUSH
4689: LD_INT 106
4691: PUSH
4692: LD_INT 108
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: PUSH
4702: EMPTY
4703: LIST
4704: LIST
4705: ST_TO_ADDR
4706: GO 7309
4708: LD_INT 5
4710: DOUBLE
4711: EQUAL
4712: IFTRUE 4716
4714: GO 4816
4716: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
4717: LD_ADDR_VAR 0 1
4721: PUSH
4722: LD_INT 2
4724: PUSH
4725: LD_INT 4
4727: PUSH
4728: LD_INT 5
4730: PUSH
4731: LD_INT 6
4733: PUSH
4734: LD_INT 8
4736: PUSH
4737: LD_INT 11
4739: PUSH
4740: LD_INT 12
4742: PUSH
4743: LD_INT 15
4745: PUSH
4746: LD_INT 16
4748: PUSH
4749: LD_INT 22
4751: PUSH
4752: LD_INT 23
4754: PUSH
4755: LD_INT 25
4757: PUSH
4758: LD_INT 26
4760: PUSH
4761: LD_INT 36
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: LIST
4777: LIST
4778: LIST
4779: PUSH
4780: LD_INT 101
4782: PUSH
4783: LD_INT 102
4785: PUSH
4786: LD_INT 105
4788: PUSH
4789: LD_INT 106
4791: PUSH
4792: LD_INT 108
4794: PUSH
4795: LD_INT 109
4797: PUSH
4798: LD_INT 112
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: ST_TO_ADDR
4814: GO 7309
4816: LD_INT 6
4818: DOUBLE
4819: EQUAL
4820: IFTRUE 4824
4822: GO 4944
4824: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4825: LD_ADDR_VAR 0 1
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: LD_INT 4
4835: PUSH
4836: LD_INT 5
4838: PUSH
4839: LD_INT 6
4841: PUSH
4842: LD_INT 8
4844: PUSH
4845: LD_INT 11
4847: PUSH
4848: LD_INT 12
4850: PUSH
4851: LD_INT 15
4853: PUSH
4854: LD_INT 16
4856: PUSH
4857: LD_INT 20
4859: PUSH
4860: LD_INT 21
4862: PUSH
4863: LD_INT 22
4865: PUSH
4866: LD_INT 23
4868: PUSH
4869: LD_INT 25
4871: PUSH
4872: LD_INT 26
4874: PUSH
4875: LD_INT 30
4877: PUSH
4878: LD_INT 31
4880: PUSH
4881: LD_INT 32
4883: PUSH
4884: LD_INT 36
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 101
4910: PUSH
4911: LD_INT 102
4913: PUSH
4914: LD_INT 105
4916: PUSH
4917: LD_INT 106
4919: PUSH
4920: LD_INT 108
4922: PUSH
4923: LD_INT 109
4925: PUSH
4926: LD_INT 112
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: ST_TO_ADDR
4942: GO 7309
4944: LD_INT 7
4946: DOUBLE
4947: EQUAL
4948: IFTRUE 4952
4950: GO 5052
4952: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
4953: LD_ADDR_VAR 0 1
4957: PUSH
4958: LD_INT 2
4960: PUSH
4961: LD_INT 4
4963: PUSH
4964: LD_INT 5
4966: PUSH
4967: LD_INT 7
4969: PUSH
4970: LD_INT 11
4972: PUSH
4973: LD_INT 12
4975: PUSH
4976: LD_INT 15
4978: PUSH
4979: LD_INT 16
4981: PUSH
4982: LD_INT 20
4984: PUSH
4985: LD_INT 21
4987: PUSH
4988: LD_INT 22
4990: PUSH
4991: LD_INT 23
4993: PUSH
4994: LD_INT 25
4996: PUSH
4997: LD_INT 26
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 101
5018: PUSH
5019: LD_INT 102
5021: PUSH
5022: LD_INT 103
5024: PUSH
5025: LD_INT 105
5027: PUSH
5028: LD_INT 106
5030: PUSH
5031: LD_INT 108
5033: PUSH
5034: LD_INT 112
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: LIST
5044: LIST
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: ST_TO_ADDR
5050: GO 7309
5052: LD_INT 8
5054: DOUBLE
5055: EQUAL
5056: IFTRUE 5060
5058: GO 5188
5060: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5061: LD_ADDR_VAR 0 1
5065: PUSH
5066: LD_INT 2
5068: PUSH
5069: LD_INT 4
5071: PUSH
5072: LD_INT 5
5074: PUSH
5075: LD_INT 6
5077: PUSH
5078: LD_INT 7
5080: PUSH
5081: LD_INT 8
5083: PUSH
5084: LD_INT 11
5086: PUSH
5087: LD_INT 12
5089: PUSH
5090: LD_INT 15
5092: PUSH
5093: LD_INT 16
5095: PUSH
5096: LD_INT 20
5098: PUSH
5099: LD_INT 21
5101: PUSH
5102: LD_INT 22
5104: PUSH
5105: LD_INT 23
5107: PUSH
5108: LD_INT 25
5110: PUSH
5111: LD_INT 26
5113: PUSH
5114: LD_INT 30
5116: PUSH
5117: LD_INT 31
5119: PUSH
5120: LD_INT 32
5122: PUSH
5123: LD_INT 36
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 101
5150: PUSH
5151: LD_INT 102
5153: PUSH
5154: LD_INT 103
5156: PUSH
5157: LD_INT 105
5159: PUSH
5160: LD_INT 106
5162: PUSH
5163: LD_INT 108
5165: PUSH
5166: LD_INT 109
5168: PUSH
5169: LD_INT 112
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: ST_TO_ADDR
5186: GO 7309
5188: LD_INT 9
5190: DOUBLE
5191: EQUAL
5192: IFTRUE 5196
5194: GO 5332
5196: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5197: LD_ADDR_VAR 0 1
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 4
5207: PUSH
5208: LD_INT 5
5210: PUSH
5211: LD_INT 6
5213: PUSH
5214: LD_INT 7
5216: PUSH
5217: LD_INT 8
5219: PUSH
5220: LD_INT 11
5222: PUSH
5223: LD_INT 12
5225: PUSH
5226: LD_INT 15
5228: PUSH
5229: LD_INT 16
5231: PUSH
5232: LD_INT 20
5234: PUSH
5235: LD_INT 21
5237: PUSH
5238: LD_INT 22
5240: PUSH
5241: LD_INT 23
5243: PUSH
5244: LD_INT 25
5246: PUSH
5247: LD_INT 26
5249: PUSH
5250: LD_INT 28
5252: PUSH
5253: LD_INT 30
5255: PUSH
5256: LD_INT 31
5258: PUSH
5259: LD_INT 32
5261: PUSH
5262: LD_INT 36
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_INT 101
5290: PUSH
5291: LD_INT 102
5293: PUSH
5294: LD_INT 103
5296: PUSH
5297: LD_INT 105
5299: PUSH
5300: LD_INT 106
5302: PUSH
5303: LD_INT 108
5305: PUSH
5306: LD_INT 109
5308: PUSH
5309: LD_INT 112
5311: PUSH
5312: LD_INT 114
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: ST_TO_ADDR
5330: GO 7309
5332: LD_INT 10
5334: DOUBLE
5335: EQUAL
5336: IFTRUE 5340
5338: GO 5524
5340: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 2
5348: PUSH
5349: LD_INT 4
5351: PUSH
5352: LD_INT 5
5354: PUSH
5355: LD_INT 6
5357: PUSH
5358: LD_INT 7
5360: PUSH
5361: LD_INT 8
5363: PUSH
5364: LD_INT 9
5366: PUSH
5367: LD_INT 10
5369: PUSH
5370: LD_INT 11
5372: PUSH
5373: LD_INT 12
5375: PUSH
5376: LD_INT 13
5378: PUSH
5379: LD_INT 14
5381: PUSH
5382: LD_INT 15
5384: PUSH
5385: LD_INT 16
5387: PUSH
5388: LD_INT 17
5390: PUSH
5391: LD_INT 18
5393: PUSH
5394: LD_INT 19
5396: PUSH
5397: LD_INT 20
5399: PUSH
5400: LD_INT 21
5402: PUSH
5403: LD_INT 22
5405: PUSH
5406: LD_INT 23
5408: PUSH
5409: LD_INT 24
5411: PUSH
5412: LD_INT 25
5414: PUSH
5415: LD_INT 26
5417: PUSH
5418: LD_INT 28
5420: PUSH
5421: LD_INT 30
5423: PUSH
5424: LD_INT 31
5426: PUSH
5427: LD_INT 32
5429: PUSH
5430: LD_INT 36
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: LIST
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: LIST
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 101
5466: PUSH
5467: LD_INT 102
5469: PUSH
5470: LD_INT 103
5472: PUSH
5473: LD_INT 104
5475: PUSH
5476: LD_INT 105
5478: PUSH
5479: LD_INT 106
5481: PUSH
5482: LD_INT 107
5484: PUSH
5485: LD_INT 108
5487: PUSH
5488: LD_INT 109
5490: PUSH
5491: LD_INT 110
5493: PUSH
5494: LD_INT 111
5496: PUSH
5497: LD_INT 112
5499: PUSH
5500: LD_INT 114
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: LIST
5514: LIST
5515: LIST
5516: LIST
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: ST_TO_ADDR
5522: GO 7309
5524: LD_INT 11
5526: DOUBLE
5527: EQUAL
5528: IFTRUE 5532
5530: GO 5724
5532: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5533: LD_ADDR_VAR 0 1
5537: PUSH
5538: LD_INT 2
5540: PUSH
5541: LD_INT 3
5543: PUSH
5544: LD_INT 4
5546: PUSH
5547: LD_INT 5
5549: PUSH
5550: LD_INT 6
5552: PUSH
5553: LD_INT 7
5555: PUSH
5556: LD_INT 8
5558: PUSH
5559: LD_INT 9
5561: PUSH
5562: LD_INT 10
5564: PUSH
5565: LD_INT 11
5567: PUSH
5568: LD_INT 12
5570: PUSH
5571: LD_INT 13
5573: PUSH
5574: LD_INT 14
5576: PUSH
5577: LD_INT 15
5579: PUSH
5580: LD_INT 16
5582: PUSH
5583: LD_INT 17
5585: PUSH
5586: LD_INT 18
5588: PUSH
5589: LD_INT 19
5591: PUSH
5592: LD_INT 20
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 22
5600: PUSH
5601: LD_INT 23
5603: PUSH
5604: LD_INT 24
5606: PUSH
5607: LD_INT 25
5609: PUSH
5610: LD_INT 26
5612: PUSH
5613: LD_INT 28
5615: PUSH
5616: LD_INT 30
5618: PUSH
5619: LD_INT 31
5621: PUSH
5622: LD_INT 32
5624: PUSH
5625: LD_INT 34
5627: PUSH
5628: LD_INT 36
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: LIST
5658: LIST
5659: LIST
5660: LIST
5661: LIST
5662: LIST
5663: PUSH
5664: LD_INT 101
5666: PUSH
5667: LD_INT 102
5669: PUSH
5670: LD_INT 103
5672: PUSH
5673: LD_INT 104
5675: PUSH
5676: LD_INT 105
5678: PUSH
5679: LD_INT 106
5681: PUSH
5682: LD_INT 107
5684: PUSH
5685: LD_INT 108
5687: PUSH
5688: LD_INT 109
5690: PUSH
5691: LD_INT 110
5693: PUSH
5694: LD_INT 111
5696: PUSH
5697: LD_INT 112
5699: PUSH
5700: LD_INT 114
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: ST_TO_ADDR
5722: GO 7309
5724: LD_INT 12
5726: DOUBLE
5727: EQUAL
5728: IFTRUE 5732
5730: GO 5940
5732: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
5733: LD_ADDR_VAR 0 1
5737: PUSH
5738: LD_INT 1
5740: PUSH
5741: LD_INT 2
5743: PUSH
5744: LD_INT 3
5746: PUSH
5747: LD_INT 4
5749: PUSH
5750: LD_INT 5
5752: PUSH
5753: LD_INT 6
5755: PUSH
5756: LD_INT 7
5758: PUSH
5759: LD_INT 8
5761: PUSH
5762: LD_INT 9
5764: PUSH
5765: LD_INT 10
5767: PUSH
5768: LD_INT 11
5770: PUSH
5771: LD_INT 12
5773: PUSH
5774: LD_INT 13
5776: PUSH
5777: LD_INT 14
5779: PUSH
5780: LD_INT 15
5782: PUSH
5783: LD_INT 16
5785: PUSH
5786: LD_INT 17
5788: PUSH
5789: LD_INT 18
5791: PUSH
5792: LD_INT 19
5794: PUSH
5795: LD_INT 20
5797: PUSH
5798: LD_INT 21
5800: PUSH
5801: LD_INT 22
5803: PUSH
5804: LD_INT 23
5806: PUSH
5807: LD_INT 24
5809: PUSH
5810: LD_INT 25
5812: PUSH
5813: LD_INT 26
5815: PUSH
5816: LD_INT 27
5818: PUSH
5819: LD_INT 28
5821: PUSH
5822: LD_INT 30
5824: PUSH
5825: LD_INT 31
5827: PUSH
5828: LD_INT 32
5830: PUSH
5831: LD_INT 33
5833: PUSH
5834: LD_INT 34
5836: PUSH
5837: LD_INT 36
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 101
5878: PUSH
5879: LD_INT 102
5881: PUSH
5882: LD_INT 103
5884: PUSH
5885: LD_INT 104
5887: PUSH
5888: LD_INT 105
5890: PUSH
5891: LD_INT 106
5893: PUSH
5894: LD_INT 107
5896: PUSH
5897: LD_INT 108
5899: PUSH
5900: LD_INT 109
5902: PUSH
5903: LD_INT 110
5905: PUSH
5906: LD_INT 111
5908: PUSH
5909: LD_INT 112
5911: PUSH
5912: LD_INT 113
5914: PUSH
5915: LD_INT 114
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: LIST
5932: LIST
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: ST_TO_ADDR
5938: GO 7309
5940: LD_INT 13
5942: DOUBLE
5943: EQUAL
5944: IFTRUE 5948
5946: GO 6144
5948: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
5949: LD_ADDR_VAR 0 1
5953: PUSH
5954: LD_INT 1
5956: PUSH
5957: LD_INT 2
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: LD_INT 4
5965: PUSH
5966: LD_INT 5
5968: PUSH
5969: LD_INT 8
5971: PUSH
5972: LD_INT 9
5974: PUSH
5975: LD_INT 10
5977: PUSH
5978: LD_INT 11
5980: PUSH
5981: LD_INT 12
5983: PUSH
5984: LD_INT 14
5986: PUSH
5987: LD_INT 15
5989: PUSH
5990: LD_INT 16
5992: PUSH
5993: LD_INT 17
5995: PUSH
5996: LD_INT 18
5998: PUSH
5999: LD_INT 19
6001: PUSH
6002: LD_INT 20
6004: PUSH
6005: LD_INT 21
6007: PUSH
6008: LD_INT 22
6010: PUSH
6011: LD_INT 23
6013: PUSH
6014: LD_INT 24
6016: PUSH
6017: LD_INT 25
6019: PUSH
6020: LD_INT 26
6022: PUSH
6023: LD_INT 27
6025: PUSH
6026: LD_INT 28
6028: PUSH
6029: LD_INT 30
6031: PUSH
6032: LD_INT 31
6034: PUSH
6035: LD_INT 32
6037: PUSH
6038: LD_INT 33
6040: PUSH
6041: LD_INT 34
6043: PUSH
6044: LD_INT 36
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: LIST
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 101
6082: PUSH
6083: LD_INT 102
6085: PUSH
6086: LD_INT 103
6088: PUSH
6089: LD_INT 104
6091: PUSH
6092: LD_INT 105
6094: PUSH
6095: LD_INT 106
6097: PUSH
6098: LD_INT 107
6100: PUSH
6101: LD_INT 108
6103: PUSH
6104: LD_INT 109
6106: PUSH
6107: LD_INT 110
6109: PUSH
6110: LD_INT 111
6112: PUSH
6113: LD_INT 112
6115: PUSH
6116: LD_INT 113
6118: PUSH
6119: LD_INT 114
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: ST_TO_ADDR
6142: GO 7309
6144: LD_INT 14
6146: DOUBLE
6147: EQUAL
6148: IFTRUE 6152
6150: GO 6364
6152: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6153: LD_ADDR_VAR 0 1
6157: PUSH
6158: LD_INT 1
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 3
6166: PUSH
6167: LD_INT 4
6169: PUSH
6170: LD_INT 5
6172: PUSH
6173: LD_INT 6
6175: PUSH
6176: LD_INT 7
6178: PUSH
6179: LD_INT 8
6181: PUSH
6182: LD_INT 9
6184: PUSH
6185: LD_INT 10
6187: PUSH
6188: LD_INT 11
6190: PUSH
6191: LD_INT 12
6193: PUSH
6194: LD_INT 13
6196: PUSH
6197: LD_INT 14
6199: PUSH
6200: LD_INT 15
6202: PUSH
6203: LD_INT 16
6205: PUSH
6206: LD_INT 17
6208: PUSH
6209: LD_INT 18
6211: PUSH
6212: LD_INT 19
6214: PUSH
6215: LD_INT 20
6217: PUSH
6218: LD_INT 21
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 23
6226: PUSH
6227: LD_INT 24
6229: PUSH
6230: LD_INT 25
6232: PUSH
6233: LD_INT 26
6235: PUSH
6236: LD_INT 27
6238: PUSH
6239: LD_INT 28
6241: PUSH
6242: LD_INT 29
6244: PUSH
6245: LD_INT 30
6247: PUSH
6248: LD_INT 31
6250: PUSH
6251: LD_INT 32
6253: PUSH
6254: LD_INT 33
6256: PUSH
6257: LD_INT 34
6259: PUSH
6260: LD_INT 36
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: PUSH
6300: LD_INT 101
6302: PUSH
6303: LD_INT 102
6305: PUSH
6306: LD_INT 103
6308: PUSH
6309: LD_INT 104
6311: PUSH
6312: LD_INT 105
6314: PUSH
6315: LD_INT 106
6317: PUSH
6318: LD_INT 107
6320: PUSH
6321: LD_INT 108
6323: PUSH
6324: LD_INT 109
6326: PUSH
6327: LD_INT 110
6329: PUSH
6330: LD_INT 111
6332: PUSH
6333: LD_INT 112
6335: PUSH
6336: LD_INT 113
6338: PUSH
6339: LD_INT 114
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: ST_TO_ADDR
6362: GO 7309
6364: LD_INT 15
6366: DOUBLE
6367: EQUAL
6368: IFTRUE 6372
6370: GO 6584
6372: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6373: LD_ADDR_VAR 0 1
6377: PUSH
6378: LD_INT 1
6380: PUSH
6381: LD_INT 2
6383: PUSH
6384: LD_INT 3
6386: PUSH
6387: LD_INT 4
6389: PUSH
6390: LD_INT 5
6392: PUSH
6393: LD_INT 6
6395: PUSH
6396: LD_INT 7
6398: PUSH
6399: LD_INT 8
6401: PUSH
6402: LD_INT 9
6404: PUSH
6405: LD_INT 10
6407: PUSH
6408: LD_INT 11
6410: PUSH
6411: LD_INT 12
6413: PUSH
6414: LD_INT 13
6416: PUSH
6417: LD_INT 14
6419: PUSH
6420: LD_INT 15
6422: PUSH
6423: LD_INT 16
6425: PUSH
6426: LD_INT 17
6428: PUSH
6429: LD_INT 18
6431: PUSH
6432: LD_INT 19
6434: PUSH
6435: LD_INT 20
6437: PUSH
6438: LD_INT 21
6440: PUSH
6441: LD_INT 22
6443: PUSH
6444: LD_INT 23
6446: PUSH
6447: LD_INT 24
6449: PUSH
6450: LD_INT 25
6452: PUSH
6453: LD_INT 26
6455: PUSH
6456: LD_INT 27
6458: PUSH
6459: LD_INT 28
6461: PUSH
6462: LD_INT 29
6464: PUSH
6465: LD_INT 30
6467: PUSH
6468: LD_INT 31
6470: PUSH
6471: LD_INT 32
6473: PUSH
6474: LD_INT 33
6476: PUSH
6477: LD_INT 34
6479: PUSH
6480: LD_INT 36
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: LIST
6517: LIST
6518: LIST
6519: PUSH
6520: LD_INT 101
6522: PUSH
6523: LD_INT 102
6525: PUSH
6526: LD_INT 103
6528: PUSH
6529: LD_INT 104
6531: PUSH
6532: LD_INT 105
6534: PUSH
6535: LD_INT 106
6537: PUSH
6538: LD_INT 107
6540: PUSH
6541: LD_INT 108
6543: PUSH
6544: LD_INT 109
6546: PUSH
6547: LD_INT 110
6549: PUSH
6550: LD_INT 111
6552: PUSH
6553: LD_INT 112
6555: PUSH
6556: LD_INT 113
6558: PUSH
6559: LD_INT 114
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: ST_TO_ADDR
6582: GO 7309
6584: LD_INT 16
6586: DOUBLE
6587: EQUAL
6588: IFTRUE 6592
6590: GO 6716
6592: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6593: LD_ADDR_VAR 0 1
6597: PUSH
6598: LD_INT 2
6600: PUSH
6601: LD_INT 4
6603: PUSH
6604: LD_INT 5
6606: PUSH
6607: LD_INT 7
6609: PUSH
6610: LD_INT 11
6612: PUSH
6613: LD_INT 12
6615: PUSH
6616: LD_INT 15
6618: PUSH
6619: LD_INT 16
6621: PUSH
6622: LD_INT 20
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 22
6630: PUSH
6631: LD_INT 23
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 26
6639: PUSH
6640: LD_INT 30
6642: PUSH
6643: LD_INT 31
6645: PUSH
6646: LD_INT 32
6648: PUSH
6649: LD_INT 33
6651: PUSH
6652: LD_INT 34
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 101
6678: PUSH
6679: LD_INT 102
6681: PUSH
6682: LD_INT 103
6684: PUSH
6685: LD_INT 106
6687: PUSH
6688: LD_INT 108
6690: PUSH
6691: LD_INT 112
6693: PUSH
6694: LD_INT 113
6696: PUSH
6697: LD_INT 114
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: ST_TO_ADDR
6714: GO 7309
6716: LD_INT 17
6718: DOUBLE
6719: EQUAL
6720: IFTRUE 6724
6722: GO 6936
6724: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
6725: LD_ADDR_VAR 0 1
6729: PUSH
6730: LD_INT 1
6732: PUSH
6733: LD_INT 2
6735: PUSH
6736: LD_INT 3
6738: PUSH
6739: LD_INT 4
6741: PUSH
6742: LD_INT 5
6744: PUSH
6745: LD_INT 6
6747: PUSH
6748: LD_INT 7
6750: PUSH
6751: LD_INT 8
6753: PUSH
6754: LD_INT 9
6756: PUSH
6757: LD_INT 10
6759: PUSH
6760: LD_INT 11
6762: PUSH
6763: LD_INT 12
6765: PUSH
6766: LD_INT 13
6768: PUSH
6769: LD_INT 14
6771: PUSH
6772: LD_INT 15
6774: PUSH
6775: LD_INT 16
6777: PUSH
6778: LD_INT 17
6780: PUSH
6781: LD_INT 18
6783: PUSH
6784: LD_INT 19
6786: PUSH
6787: LD_INT 20
6789: PUSH
6790: LD_INT 21
6792: PUSH
6793: LD_INT 22
6795: PUSH
6796: LD_INT 23
6798: PUSH
6799: LD_INT 24
6801: PUSH
6802: LD_INT 25
6804: PUSH
6805: LD_INT 26
6807: PUSH
6808: LD_INT 27
6810: PUSH
6811: LD_INT 28
6813: PUSH
6814: LD_INT 29
6816: PUSH
6817: LD_INT 30
6819: PUSH
6820: LD_INT 31
6822: PUSH
6823: LD_INT 32
6825: PUSH
6826: LD_INT 33
6828: PUSH
6829: LD_INT 34
6831: PUSH
6832: LD_INT 36
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: PUSH
6872: LD_INT 101
6874: PUSH
6875: LD_INT 102
6877: PUSH
6878: LD_INT 103
6880: PUSH
6881: LD_INT 104
6883: PUSH
6884: LD_INT 105
6886: PUSH
6887: LD_INT 106
6889: PUSH
6890: LD_INT 107
6892: PUSH
6893: LD_INT 108
6895: PUSH
6896: LD_INT 109
6898: PUSH
6899: LD_INT 110
6901: PUSH
6902: LD_INT 111
6904: PUSH
6905: LD_INT 112
6907: PUSH
6908: LD_INT 113
6910: PUSH
6911: LD_INT 114
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: ST_TO_ADDR
6934: GO 7309
6936: LD_INT 18
6938: DOUBLE
6939: EQUAL
6940: IFTRUE 6944
6942: GO 7080
6944: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
6945: LD_ADDR_VAR 0 1
6949: PUSH
6950: LD_INT 2
6952: PUSH
6953: LD_INT 4
6955: PUSH
6956: LD_INT 5
6958: PUSH
6959: LD_INT 7
6961: PUSH
6962: LD_INT 11
6964: PUSH
6965: LD_INT 12
6967: PUSH
6968: LD_INT 15
6970: PUSH
6971: LD_INT 16
6973: PUSH
6974: LD_INT 20
6976: PUSH
6977: LD_INT 21
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 23
6985: PUSH
6986: LD_INT 25
6988: PUSH
6989: LD_INT 26
6991: PUSH
6992: LD_INT 30
6994: PUSH
6995: LD_INT 31
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: LD_INT 33
7003: PUSH
7004: LD_INT 34
7006: PUSH
7007: LD_INT 35
7009: PUSH
7010: LD_INT 36
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 101
7038: PUSH
7039: LD_INT 102
7041: PUSH
7042: LD_INT 103
7044: PUSH
7045: LD_INT 106
7047: PUSH
7048: LD_INT 108
7050: PUSH
7051: LD_INT 112
7053: PUSH
7054: LD_INT 113
7056: PUSH
7057: LD_INT 114
7059: PUSH
7060: LD_INT 115
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: ST_TO_ADDR
7078: GO 7309
7080: LD_INT 19
7082: DOUBLE
7083: EQUAL
7084: IFTRUE 7088
7086: GO 7308
7088: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7089: LD_ADDR_VAR 0 1
7093: PUSH
7094: LD_INT 1
7096: PUSH
7097: LD_INT 2
7099: PUSH
7100: LD_INT 3
7102: PUSH
7103: LD_INT 4
7105: PUSH
7106: LD_INT 5
7108: PUSH
7109: LD_INT 6
7111: PUSH
7112: LD_INT 7
7114: PUSH
7115: LD_INT 8
7117: PUSH
7118: LD_INT 9
7120: PUSH
7121: LD_INT 10
7123: PUSH
7124: LD_INT 11
7126: PUSH
7127: LD_INT 12
7129: PUSH
7130: LD_INT 13
7132: PUSH
7133: LD_INT 14
7135: PUSH
7136: LD_INT 15
7138: PUSH
7139: LD_INT 16
7141: PUSH
7142: LD_INT 17
7144: PUSH
7145: LD_INT 18
7147: PUSH
7148: LD_INT 19
7150: PUSH
7151: LD_INT 20
7153: PUSH
7154: LD_INT 21
7156: PUSH
7157: LD_INT 22
7159: PUSH
7160: LD_INT 23
7162: PUSH
7163: LD_INT 24
7165: PUSH
7166: LD_INT 25
7168: PUSH
7169: LD_INT 26
7171: PUSH
7172: LD_INT 27
7174: PUSH
7175: LD_INT 28
7177: PUSH
7178: LD_INT 29
7180: PUSH
7181: LD_INT 30
7183: PUSH
7184: LD_INT 31
7186: PUSH
7187: LD_INT 32
7189: PUSH
7190: LD_INT 33
7192: PUSH
7193: LD_INT 34
7195: PUSH
7196: LD_INT 35
7198: PUSH
7199: LD_INT 36
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 101
7242: PUSH
7243: LD_INT 102
7245: PUSH
7246: LD_INT 103
7248: PUSH
7249: LD_INT 104
7251: PUSH
7252: LD_INT 105
7254: PUSH
7255: LD_INT 106
7257: PUSH
7258: LD_INT 107
7260: PUSH
7261: LD_INT 108
7263: PUSH
7264: LD_INT 109
7266: PUSH
7267: LD_INT 110
7269: PUSH
7270: LD_INT 111
7272: PUSH
7273: LD_INT 112
7275: PUSH
7276: LD_INT 113
7278: PUSH
7279: LD_INT 114
7281: PUSH
7282: LD_INT 115
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: ST_TO_ADDR
7306: GO 7309
7308: POP
// end else
7309: GO 7346
// if campaign_id = 5 then
7311: LD_OWVAR 69
7315: PUSH
7316: LD_INT 5
7318: EQUAL
7319: IFFALSE 7346
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
7321: LD_ADDR_VAR 0 1
7325: PUSH
7326: LD_INT 1
7328: PUSH
7329: LD_INT 2
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 100
7338: PUSH
7339: EMPTY
7340: LIST
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: ST_TO_ADDR
// end ; if result then
7346: LD_VAR 0 1
7350: IFFALSE 7639
// begin normal :=  ;
7352: LD_ADDR_VAR 0 3
7356: PUSH
7357: LD_STRING 
7359: ST_TO_ADDR
// hardcore :=  ;
7360: LD_ADDR_VAR 0 4
7364: PUSH
7365: LD_STRING 
7367: ST_TO_ADDR
// for i = 1 to normalCounter do
7368: LD_ADDR_VAR 0 5
7372: PUSH
7373: DOUBLE
7374: LD_INT 1
7376: DEC
7377: ST_TO_ADDR
7378: LD_EXP 22
7382: PUSH
7383: FOR_TO
7384: IFFALSE 7485
// begin tmp := 0 ;
7386: LD_ADDR_VAR 0 2
7390: PUSH
7391: LD_STRING 0
7393: ST_TO_ADDR
// if result [ 1 ] then
7394: LD_VAR 0 1
7398: PUSH
7399: LD_INT 1
7401: ARRAY
7402: IFFALSE 7467
// if result [ 1 ] [ 1 ] = i then
7404: LD_VAR 0 1
7408: PUSH
7409: LD_INT 1
7411: ARRAY
7412: PUSH
7413: LD_INT 1
7415: ARRAY
7416: PUSH
7417: LD_VAR 0 5
7421: EQUAL
7422: IFFALSE 7467
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7424: LD_ADDR_VAR 0 1
7428: PUSH
7429: LD_VAR 0 1
7433: PPUSH
7434: LD_INT 1
7436: PPUSH
7437: LD_VAR 0 1
7441: PUSH
7442: LD_INT 1
7444: ARRAY
7445: PPUSH
7446: LD_INT 1
7448: PPUSH
7449: CALL_OW 3
7453: PPUSH
7454: CALL_OW 1
7458: ST_TO_ADDR
// tmp := 1 ;
7459: LD_ADDR_VAR 0 2
7463: PUSH
7464: LD_STRING 1
7466: ST_TO_ADDR
// end ; normal := normal & tmp ;
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: LD_VAR 0 3
7476: PUSH
7477: LD_VAR 0 2
7481: STR
7482: ST_TO_ADDR
// end ;
7483: GO 7383
7485: POP
7486: POP
// for i = 1 to hardcoreCounter do
7487: LD_ADDR_VAR 0 5
7491: PUSH
7492: DOUBLE
7493: LD_INT 1
7495: DEC
7496: ST_TO_ADDR
7497: LD_EXP 23
7501: PUSH
7502: FOR_TO
7503: IFFALSE 7608
// begin tmp := 0 ;
7505: LD_ADDR_VAR 0 2
7509: PUSH
7510: LD_STRING 0
7512: ST_TO_ADDR
// if result [ 2 ] then
7513: LD_VAR 0 1
7517: PUSH
7518: LD_INT 2
7520: ARRAY
7521: IFFALSE 7590
// if result [ 2 ] [ 1 ] = 100 + i then
7523: LD_VAR 0 1
7527: PUSH
7528: LD_INT 2
7530: ARRAY
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PUSH
7536: LD_INT 100
7538: PUSH
7539: LD_VAR 0 5
7543: PLUS
7544: EQUAL
7545: IFFALSE 7590
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_VAR 0 1
7556: PPUSH
7557: LD_INT 2
7559: PPUSH
7560: LD_VAR 0 1
7564: PUSH
7565: LD_INT 2
7567: ARRAY
7568: PPUSH
7569: LD_INT 1
7571: PPUSH
7572: CALL_OW 3
7576: PPUSH
7577: CALL_OW 1
7581: ST_TO_ADDR
// tmp := 1 ;
7582: LD_ADDR_VAR 0 2
7586: PUSH
7587: LD_STRING 1
7589: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7590: LD_ADDR_VAR 0 4
7594: PUSH
7595: LD_VAR 0 4
7599: PUSH
7600: LD_VAR 0 2
7604: STR
7605: ST_TO_ADDR
// end ;
7606: GO 7502
7608: POP
7609: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7610: LD_STRING getStreamItemsFromMission("
7612: PUSH
7613: LD_VAR 0 3
7617: STR
7618: PUSH
7619: LD_STRING ","
7621: STR
7622: PUSH
7623: LD_VAR 0 4
7627: STR
7628: PUSH
7629: LD_STRING ")
7631: STR
7632: PPUSH
7633: CALL_OW 559
// end else
7637: GO 7646
// ToLua ( getStreamItemsFromMission("","") ) ;
7639: LD_STRING getStreamItemsFromMission("","")
7641: PPUSH
7642: CALL_OW 559
// end ;
7646: LD_VAR 0 1
7650: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7651: LD_VAR 0 2
7655: PUSH
7656: LD_INT 100
7658: EQUAL
7659: IFFALSE 8608
// begin if not StreamModeActive then
7661: LD_EXP 21
7665: NOT
7666: IFFALSE 7676
// StreamModeActive := true ;
7668: LD_ADDR_EXP 21
7672: PUSH
7673: LD_INT 1
7675: ST_TO_ADDR
// if p3 = 0 then
7676: LD_VAR 0 3
7680: PUSH
7681: LD_INT 0
7683: EQUAL
7684: IFFALSE 7690
// InitStreamMode ;
7686: CALL 3911 0 0
// if p3 = 1 then
7690: LD_VAR 0 3
7694: PUSH
7695: LD_INT 1
7697: EQUAL
7698: IFFALSE 7708
// sRocket := true ;
7700: LD_ADDR_EXP 26
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// if p3 = 2 then
7708: LD_VAR 0 3
7712: PUSH
7713: LD_INT 2
7715: EQUAL
7716: IFFALSE 7726
// sSpeed := true ;
7718: LD_ADDR_EXP 25
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
// if p3 = 3 then
7726: LD_VAR 0 3
7730: PUSH
7731: LD_INT 3
7733: EQUAL
7734: IFFALSE 7744
// sEngine := true ;
7736: LD_ADDR_EXP 27
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// if p3 = 4 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 4
7751: EQUAL
7752: IFFALSE 7762
// sSpec := true ;
7754: LD_ADDR_EXP 24
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// if p3 = 5 then
7762: LD_VAR 0 3
7766: PUSH
7767: LD_INT 5
7769: EQUAL
7770: IFFALSE 7780
// sLevel := true ;
7772: LD_ADDR_EXP 28
7776: PUSH
7777: LD_INT 1
7779: ST_TO_ADDR
// if p3 = 6 then
7780: LD_VAR 0 3
7784: PUSH
7785: LD_INT 6
7787: EQUAL
7788: IFFALSE 7798
// sArmoury := true ;
7790: LD_ADDR_EXP 29
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// if p3 = 7 then
7798: LD_VAR 0 3
7802: PUSH
7803: LD_INT 7
7805: EQUAL
7806: IFFALSE 7816
// sRadar := true ;
7808: LD_ADDR_EXP 30
7812: PUSH
7813: LD_INT 1
7815: ST_TO_ADDR
// if p3 = 8 then
7816: LD_VAR 0 3
7820: PUSH
7821: LD_INT 8
7823: EQUAL
7824: IFFALSE 7834
// sBunker := true ;
7826: LD_ADDR_EXP 31
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// if p3 = 9 then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 9
7841: EQUAL
7842: IFFALSE 7852
// sHack := true ;
7844: LD_ADDR_EXP 32
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// if p3 = 10 then
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 10
7859: EQUAL
7860: IFFALSE 7870
// sFire := true ;
7862: LD_ADDR_EXP 33
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if p3 = 11 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 11
7877: EQUAL
7878: IFFALSE 7888
// sRefresh := true ;
7880: LD_ADDR_EXP 34
7884: PUSH
7885: LD_INT 1
7887: ST_TO_ADDR
// if p3 = 12 then
7888: LD_VAR 0 3
7892: PUSH
7893: LD_INT 12
7895: EQUAL
7896: IFFALSE 7906
// sExp := true ;
7898: LD_ADDR_EXP 35
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 13 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 13
7913: EQUAL
7914: IFFALSE 7924
// sDepot := true ;
7916: LD_ADDR_EXP 36
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if p3 = 14 then
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 14
7931: EQUAL
7932: IFFALSE 7942
// sFlag := true ;
7934: LD_ADDR_EXP 37
7938: PUSH
7939: LD_INT 1
7941: ST_TO_ADDR
// if p3 = 15 then
7942: LD_VAR 0 3
7946: PUSH
7947: LD_INT 15
7949: EQUAL
7950: IFFALSE 7960
// sKamikadze := true ;
7952: LD_ADDR_EXP 45
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// if p3 = 16 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 16
7967: EQUAL
7968: IFFALSE 7978
// sTroll := true ;
7970: LD_ADDR_EXP 46
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if p3 = 17 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 17
7985: EQUAL
7986: IFFALSE 7996
// sSlow := true ;
7988: LD_ADDR_EXP 47
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 18 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 18
8003: EQUAL
8004: IFFALSE 8014
// sLack := true ;
8006: LD_ADDR_EXP 48
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 19 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 19
8021: EQUAL
8022: IFFALSE 8032
// sTank := true ;
8024: LD_ADDR_EXP 50
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 20 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 20
8039: EQUAL
8040: IFFALSE 8050
// sRemote := true ;
8042: LD_ADDR_EXP 51
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 21 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 21
8057: EQUAL
8058: IFFALSE 8068
// sPowell := true ;
8060: LD_ADDR_EXP 52
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 22 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 22
8075: EQUAL
8076: IFFALSE 8086
// sTeleport := true ;
8078: LD_ADDR_EXP 55
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 23 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 23
8093: EQUAL
8094: IFFALSE 8104
// sOilTower := true ;
8096: LD_ADDR_EXP 57
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 24 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 24
8111: EQUAL
8112: IFFALSE 8122
// sShovel := true ;
8114: LD_ADDR_EXP 58
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 25 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 25
8129: EQUAL
8130: IFFALSE 8140
// sSheik := true ;
8132: LD_ADDR_EXP 59
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 26 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 26
8147: EQUAL
8148: IFFALSE 8158
// sEarthquake := true ;
8150: LD_ADDR_EXP 61
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 27 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 27
8165: EQUAL
8166: IFFALSE 8176
// sAI := true ;
8168: LD_ADDR_EXP 62
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 28 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 28
8183: EQUAL
8184: IFFALSE 8194
// sCargo := true ;
8186: LD_ADDR_EXP 65
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 29 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 29
8201: EQUAL
8202: IFFALSE 8212
// sDLaser := true ;
8204: LD_ADDR_EXP 66
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 30 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 30
8219: EQUAL
8220: IFFALSE 8230
// sExchange := true ;
8222: LD_ADDR_EXP 67
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 31 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 31
8237: EQUAL
8238: IFFALSE 8248
// sFac := true ;
8240: LD_ADDR_EXP 68
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 32 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 32
8255: EQUAL
8256: IFFALSE 8266
// sPower := true ;
8258: LD_ADDR_EXP 69
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 33 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 33
8273: EQUAL
8274: IFFALSE 8284
// sRandom := true ;
8276: LD_ADDR_EXP 70
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 34 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 34
8291: EQUAL
8292: IFFALSE 8302
// sShield := true ;
8294: LD_ADDR_EXP 71
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 35 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 35
8309: EQUAL
8310: IFFALSE 8320
// sTime := true ;
8312: LD_ADDR_EXP 72
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 36 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 36
8327: EQUAL
8328: IFFALSE 8338
// sTools := true ;
8330: LD_ADDR_EXP 73
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 101 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 101
8345: EQUAL
8346: IFFALSE 8356
// sSold := true ;
8348: LD_ADDR_EXP 38
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 102 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 102
8363: EQUAL
8364: IFFALSE 8374
// sDiff := true ;
8366: LD_ADDR_EXP 39
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 103 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 103
8381: EQUAL
8382: IFFALSE 8392
// sFog := true ;
8384: LD_ADDR_EXP 42
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 104 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 104
8399: EQUAL
8400: IFFALSE 8410
// sReset := true ;
8402: LD_ADDR_EXP 43
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 105 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 105
8417: EQUAL
8418: IFFALSE 8428
// sSun := true ;
8420: LD_ADDR_EXP 44
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 106 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 106
8435: EQUAL
8436: IFFALSE 8446
// sTiger := true ;
8438: LD_ADDR_EXP 40
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 107 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 107
8453: EQUAL
8454: IFFALSE 8464
// sBomb := true ;
8456: LD_ADDR_EXP 41
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 108 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 108
8471: EQUAL
8472: IFFALSE 8482
// sWound := true ;
8474: LD_ADDR_EXP 49
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 109 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 109
8489: EQUAL
8490: IFFALSE 8500
// sBetray := true ;
8492: LD_ADDR_EXP 53
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 110 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 110
8507: EQUAL
8508: IFFALSE 8518
// sContamin := true ;
8510: LD_ADDR_EXP 54
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 111 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 111
8525: EQUAL
8526: IFFALSE 8536
// sOil := true ;
8528: LD_ADDR_EXP 56
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 112 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 112
8543: EQUAL
8544: IFFALSE 8554
// sStu := true ;
8546: LD_ADDR_EXP 60
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 113 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 113
8561: EQUAL
8562: IFFALSE 8572
// sBazooka := true ;
8564: LD_ADDR_EXP 63
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 114 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 114
8579: EQUAL
8580: IFFALSE 8590
// sMortar := true ;
8582: LD_ADDR_EXP 64
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 115 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 115
8597: EQUAL
8598: IFFALSE 8608
// sRanger := true ;
8600: LD_ADDR_EXP 74
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// end ; end ;
8608: PPOPN 6
8610: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8611: LD_EXP 21
8615: PUSH
8616: LD_EXP 26
8620: AND
8621: IFFALSE 8745
8623: GO 8625
8625: DISABLE
8626: LD_INT 0
8628: PPUSH
8629: PPUSH
// begin enable ;
8630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_OWVAR 2
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 2
8650: PUSH
8651: LD_INT 34
8653: PUSH
8654: LD_INT 7
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PUSH
8661: LD_INT 34
8663: PUSH
8664: LD_INT 45
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: PUSH
8671: LD_INT 34
8673: PUSH
8674: LD_INT 28
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PUSH
8681: LD_INT 34
8683: PUSH
8684: LD_INT 47
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 69
8706: ST_TO_ADDR
// if not tmp then
8707: LD_VAR 0 2
8711: NOT
8712: IFFALSE 8716
// exit ;
8714: GO 8745
// for i in tmp do
8716: LD_ADDR_VAR 0 1
8720: PUSH
8721: LD_VAR 0 2
8725: PUSH
8726: FOR_IN
8727: IFFALSE 8743
// begin SetLives ( i , 0 ) ;
8729: LD_VAR 0 1
8733: PPUSH
8734: LD_INT 0
8736: PPUSH
8737: CALL_OW 234
// end ;
8741: GO 8726
8743: POP
8744: POP
// end ;
8745: PPOPN 2
8747: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
8748: LD_EXP 21
8752: PUSH
8753: LD_EXP 27
8757: AND
8758: IFFALSE 8842
8760: GO 8762
8762: DISABLE
8763: LD_INT 0
8765: PPUSH
8766: PPUSH
// begin enable ;
8767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
8768: LD_ADDR_VAR 0 2
8772: PUSH
8773: LD_INT 22
8775: PUSH
8776: LD_OWVAR 2
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 32
8787: PUSH
8788: LD_INT 3
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PPUSH
8799: CALL_OW 69
8803: ST_TO_ADDR
// if not tmp then
8804: LD_VAR 0 2
8808: NOT
8809: IFFALSE 8813
// exit ;
8811: GO 8842
// for i in tmp do
8813: LD_ADDR_VAR 0 1
8817: PUSH
8818: LD_VAR 0 2
8822: PUSH
8823: FOR_IN
8824: IFFALSE 8840
// begin SetLives ( i , 0 ) ;
8826: LD_VAR 0 1
8830: PPUSH
8831: LD_INT 0
8833: PPUSH
8834: CALL_OW 234
// end ;
8838: GO 8823
8840: POP
8841: POP
// end ;
8842: PPOPN 2
8844: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
8845: LD_EXP 21
8849: PUSH
8850: LD_EXP 24
8854: AND
8855: IFFALSE 8948
8857: GO 8859
8859: DISABLE
8860: LD_INT 0
8862: PPUSH
// begin enable ;
8863: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
8864: LD_ADDR_VAR 0 1
8868: PUSH
8869: LD_INT 22
8871: PUSH
8872: LD_OWVAR 2
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: PUSH
8881: LD_INT 2
8883: PUSH
8884: LD_INT 25
8886: PUSH
8887: LD_INT 5
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 25
8896: PUSH
8897: LD_INT 9
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 25
8906: PUSH
8907: LD_INT 8
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: PUSH
8920: EMPTY
8921: LIST
8922: LIST
8923: PPUSH
8924: CALL_OW 69
8928: PUSH
8929: FOR_IN
8930: IFFALSE 8946
// begin SetClass ( i , 1 ) ;
8932: LD_VAR 0 1
8936: PPUSH
8937: LD_INT 1
8939: PPUSH
8940: CALL_OW 336
// end ;
8944: GO 8929
8946: POP
8947: POP
// end ;
8948: PPOPN 1
8950: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
8951: LD_EXP 21
8955: PUSH
8956: LD_EXP 25
8960: AND
8961: PUSH
8962: LD_OWVAR 65
8966: PUSH
8967: LD_INT 7
8969: LESS
8970: AND
8971: IFFALSE 8985
8973: GO 8975
8975: DISABLE
// begin enable ;
8976: ENABLE
// game_speed := 7 ;
8977: LD_ADDR_OWVAR 65
8981: PUSH
8982: LD_INT 7
8984: ST_TO_ADDR
// end ;
8985: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
8986: LD_EXP 21
8990: PUSH
8991: LD_EXP 28
8995: AND
8996: IFFALSE 9198
8998: GO 9000
9000: DISABLE
9001: LD_INT 0
9003: PPUSH
9004: PPUSH
9005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9006: LD_ADDR_VAR 0 3
9010: PUSH
9011: LD_INT 81
9013: PUSH
9014: LD_OWVAR 2
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 21
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: EMPTY
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PPUSH
9037: CALL_OW 69
9041: ST_TO_ADDR
// if not tmp then
9042: LD_VAR 0 3
9046: NOT
9047: IFFALSE 9051
// exit ;
9049: GO 9198
// if tmp > 5 then
9051: LD_VAR 0 3
9055: PUSH
9056: LD_INT 5
9058: GREATER
9059: IFFALSE 9071
// k := 5 else
9061: LD_ADDR_VAR 0 2
9065: PUSH
9066: LD_INT 5
9068: ST_TO_ADDR
9069: GO 9081
// k := tmp ;
9071: LD_ADDR_VAR 0 2
9075: PUSH
9076: LD_VAR 0 3
9080: ST_TO_ADDR
// for i := 1 to k do
9081: LD_ADDR_VAR 0 1
9085: PUSH
9086: DOUBLE
9087: LD_INT 1
9089: DEC
9090: ST_TO_ADDR
9091: LD_VAR 0 2
9095: PUSH
9096: FOR_TO
9097: IFFALSE 9196
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9099: LD_VAR 0 3
9103: PUSH
9104: LD_VAR 0 1
9108: ARRAY
9109: PPUSH
9110: LD_VAR 0 1
9114: PUSH
9115: LD_INT 4
9117: MOD
9118: PUSH
9119: LD_INT 1
9121: PLUS
9122: PPUSH
9123: CALL_OW 259
9127: PUSH
9128: LD_INT 10
9130: LESS
9131: IFFALSE 9194
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9133: LD_VAR 0 3
9137: PUSH
9138: LD_VAR 0 1
9142: ARRAY
9143: PPUSH
9144: LD_VAR 0 1
9148: PUSH
9149: LD_INT 4
9151: MOD
9152: PUSH
9153: LD_INT 1
9155: PLUS
9156: PPUSH
9157: LD_VAR 0 3
9161: PUSH
9162: LD_VAR 0 1
9166: ARRAY
9167: PPUSH
9168: LD_VAR 0 1
9172: PUSH
9173: LD_INT 4
9175: MOD
9176: PUSH
9177: LD_INT 1
9179: PLUS
9180: PPUSH
9181: CALL_OW 259
9185: PUSH
9186: LD_INT 1
9188: PLUS
9189: PPUSH
9190: CALL_OW 237
9194: GO 9096
9196: POP
9197: POP
// end ;
9198: PPOPN 3
9200: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9201: LD_EXP 21
9205: PUSH
9206: LD_EXP 29
9210: AND
9211: IFFALSE 9231
9213: GO 9215
9215: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9216: LD_INT 4
9218: PPUSH
9219: LD_OWVAR 2
9223: PPUSH
9224: LD_INT 0
9226: PPUSH
9227: CALL_OW 324
9231: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9232: LD_EXP 21
9236: PUSH
9237: LD_EXP 58
9241: AND
9242: IFFALSE 9262
9244: GO 9246
9246: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9247: LD_INT 19
9249: PPUSH
9250: LD_OWVAR 2
9254: PPUSH
9255: LD_INT 0
9257: PPUSH
9258: CALL_OW 324
9262: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9263: LD_EXP 21
9267: PUSH
9268: LD_EXP 30
9272: AND
9273: IFFALSE 9375
9275: GO 9277
9277: DISABLE
9278: LD_INT 0
9280: PPUSH
9281: PPUSH
// begin enable ;
9282: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9283: LD_ADDR_VAR 0 2
9287: PUSH
9288: LD_INT 22
9290: PUSH
9291: LD_OWVAR 2
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 2
9302: PUSH
9303: LD_INT 34
9305: PUSH
9306: LD_INT 11
9308: PUSH
9309: EMPTY
9310: LIST
9311: LIST
9312: PUSH
9313: LD_INT 34
9315: PUSH
9316: LD_INT 30
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: PUSH
9323: EMPTY
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: ST_TO_ADDR
// if not tmp then
9337: LD_VAR 0 2
9341: NOT
9342: IFFALSE 9346
// exit ;
9344: GO 9375
// for i in tmp do
9346: LD_ADDR_VAR 0 1
9350: PUSH
9351: LD_VAR 0 2
9355: PUSH
9356: FOR_IN
9357: IFFALSE 9373
// begin SetLives ( i , 0 ) ;
9359: LD_VAR 0 1
9363: PPUSH
9364: LD_INT 0
9366: PPUSH
9367: CALL_OW 234
// end ;
9371: GO 9356
9373: POP
9374: POP
// end ;
9375: PPOPN 2
9377: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9378: LD_EXP 21
9382: PUSH
9383: LD_EXP 31
9387: AND
9388: IFFALSE 9408
9390: GO 9392
9392: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9393: LD_INT 32
9395: PPUSH
9396: LD_OWVAR 2
9400: PPUSH
9401: LD_INT 0
9403: PPUSH
9404: CALL_OW 324
9408: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9409: LD_EXP 21
9413: PUSH
9414: LD_EXP 32
9418: AND
9419: IFFALSE 9600
9421: GO 9423
9423: DISABLE
9424: LD_INT 0
9426: PPUSH
9427: PPUSH
9428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9429: LD_ADDR_VAR 0 2
9433: PUSH
9434: LD_INT 22
9436: PUSH
9437: LD_OWVAR 2
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PUSH
9446: LD_INT 33
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: PPUSH
9460: CALL_OW 69
9464: ST_TO_ADDR
// if not tmp then
9465: LD_VAR 0 2
9469: NOT
9470: IFFALSE 9474
// exit ;
9472: GO 9600
// side := 0 ;
9474: LD_ADDR_VAR 0 3
9478: PUSH
9479: LD_INT 0
9481: ST_TO_ADDR
// for i := 1 to 8 do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: DOUBLE
9488: LD_INT 1
9490: DEC
9491: ST_TO_ADDR
9492: LD_INT 8
9494: PUSH
9495: FOR_TO
9496: IFFALSE 9544
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9498: LD_OWVAR 2
9502: PUSH
9503: LD_VAR 0 1
9507: NONEQUAL
9508: PUSH
9509: LD_OWVAR 2
9513: PPUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 81
9523: PUSH
9524: LD_INT 2
9526: EQUAL
9527: AND
9528: IFFALSE 9542
// begin side := i ;
9530: LD_ADDR_VAR 0 3
9534: PUSH
9535: LD_VAR 0 1
9539: ST_TO_ADDR
// break ;
9540: GO 9544
// end ;
9542: GO 9495
9544: POP
9545: POP
// if not side then
9546: LD_VAR 0 3
9550: NOT
9551: IFFALSE 9555
// exit ;
9553: GO 9600
// for i := 1 to tmp do
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: DOUBLE
9561: LD_INT 1
9563: DEC
9564: ST_TO_ADDR
9565: LD_VAR 0 2
9569: PUSH
9570: FOR_TO
9571: IFFALSE 9598
// if Prob ( 60 ) then
9573: LD_INT 60
9575: PPUSH
9576: CALL_OW 13
9580: IFFALSE 9596
// SetSide ( i , side ) ;
9582: LD_VAR 0 1
9586: PPUSH
9587: LD_VAR 0 3
9591: PPUSH
9592: CALL_OW 235
9596: GO 9570
9598: POP
9599: POP
// end ;
9600: PPOPN 3
9602: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9603: LD_EXP 21
9607: PUSH
9608: LD_EXP 34
9612: AND
9613: IFFALSE 9732
9615: GO 9617
9617: DISABLE
9618: LD_INT 0
9620: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: LD_INT 22
9628: PUSH
9629: LD_OWVAR 2
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 21
9640: PUSH
9641: LD_INT 1
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 3
9650: PUSH
9651: LD_INT 23
9653: PUSH
9654: LD_INT 0
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 69
9674: PUSH
9675: FOR_IN
9676: IFFALSE 9730
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9678: LD_VAR 0 1
9682: PPUSH
9683: CALL_OW 257
9687: PUSH
9688: LD_INT 1
9690: PUSH
9691: LD_INT 2
9693: PUSH
9694: LD_INT 3
9696: PUSH
9697: LD_INT 4
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: IN
9706: IFFALSE 9728
// SetClass ( un , rand ( 1 , 4 ) ) ;
9708: LD_VAR 0 1
9712: PPUSH
9713: LD_INT 1
9715: PPUSH
9716: LD_INT 4
9718: PPUSH
9719: CALL_OW 12
9723: PPUSH
9724: CALL_OW 336
9728: GO 9675
9730: POP
9731: POP
// end ;
9732: PPOPN 1
9734: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
9735: LD_EXP 21
9739: PUSH
9740: LD_EXP 33
9744: AND
9745: IFFALSE 9824
9747: GO 9749
9749: DISABLE
9750: LD_INT 0
9752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9753: LD_ADDR_VAR 0 1
9757: PUSH
9758: LD_INT 22
9760: PUSH
9761: LD_OWVAR 2
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 21
9772: PUSH
9773: LD_INT 3
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PPUSH
9784: CALL_OW 69
9788: ST_TO_ADDR
// if not tmp then
9789: LD_VAR 0 1
9793: NOT
9794: IFFALSE 9798
// exit ;
9796: GO 9824
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
9798: LD_VAR 0 1
9802: PUSH
9803: LD_INT 1
9805: PPUSH
9806: LD_VAR 0 1
9810: PPUSH
9811: CALL_OW 12
9815: ARRAY
9816: PPUSH
9817: LD_INT 100
9819: PPUSH
9820: CALL_OW 234
// end ;
9824: PPOPN 1
9826: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
9827: LD_EXP 21
9831: PUSH
9832: LD_EXP 35
9836: AND
9837: IFFALSE 9935
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
9845: LD_ADDR_VAR 0 1
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_OWVAR 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 21
9864: PUSH
9865: LD_INT 1
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PPUSH
9876: CALL_OW 69
9880: ST_TO_ADDR
// if not tmp then
9881: LD_VAR 0 1
9885: NOT
9886: IFFALSE 9890
// exit ;
9888: GO 9935
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
9890: LD_VAR 0 1
9894: PUSH
9895: LD_INT 1
9897: PPUSH
9898: LD_VAR 0 1
9902: PPUSH
9903: CALL_OW 12
9907: ARRAY
9908: PPUSH
9909: LD_INT 1
9911: PPUSH
9912: LD_INT 4
9914: PPUSH
9915: CALL_OW 12
9919: PPUSH
9920: LD_INT 3000
9922: PPUSH
9923: LD_INT 9000
9925: PPUSH
9926: CALL_OW 12
9930: PPUSH
9931: CALL_OW 492
// end ;
9935: PPOPN 1
9937: END
// every 0 0$1 trigger StreamModeActive and sDepot do
9938: LD_EXP 21
9942: PUSH
9943: LD_EXP 36
9947: AND
9948: IFFALSE 9968
9950: GO 9952
9952: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
9953: LD_INT 1
9955: PPUSH
9956: LD_OWVAR 2
9960: PPUSH
9961: LD_INT 0
9963: PPUSH
9964: CALL_OW 324
9968: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
9969: LD_EXP 21
9973: PUSH
9974: LD_EXP 37
9978: AND
9979: IFFALSE 10062
9981: GO 9983
9983: DISABLE
9984: LD_INT 0
9986: PPUSH
9987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
9988: LD_ADDR_VAR 0 2
9992: PUSH
9993: LD_INT 22
9995: PUSH
9996: LD_OWVAR 2
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: PUSH
10005: LD_INT 21
10007: PUSH
10008: LD_INT 3
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PPUSH
10019: CALL_OW 69
10023: ST_TO_ADDR
// if not tmp then
10024: LD_VAR 0 2
10028: NOT
10029: IFFALSE 10033
// exit ;
10031: GO 10062
// for i in tmp do
10033: LD_ADDR_VAR 0 1
10037: PUSH
10038: LD_VAR 0 2
10042: PUSH
10043: FOR_IN
10044: IFFALSE 10060
// SetBLevel ( i , 10 ) ;
10046: LD_VAR 0 1
10050: PPUSH
10051: LD_INT 10
10053: PPUSH
10054: CALL_OW 241
10058: GO 10043
10060: POP
10061: POP
// end ;
10062: PPOPN 2
10064: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10065: LD_EXP 21
10069: PUSH
10070: LD_EXP 38
10074: AND
10075: IFFALSE 10186
10077: GO 10079
10079: DISABLE
10080: LD_INT 0
10082: PPUSH
10083: PPUSH
10084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10085: LD_ADDR_VAR 0 3
10089: PUSH
10090: LD_INT 22
10092: PUSH
10093: LD_OWVAR 2
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 25
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PPUSH
10116: CALL_OW 69
10120: ST_TO_ADDR
// if not tmp then
10121: LD_VAR 0 3
10125: NOT
10126: IFFALSE 10130
// exit ;
10128: GO 10186
// un := tmp [ rand ( 1 , tmp ) ] ;
10130: LD_ADDR_VAR 0 2
10134: PUSH
10135: LD_VAR 0 3
10139: PUSH
10140: LD_INT 1
10142: PPUSH
10143: LD_VAR 0 3
10147: PPUSH
10148: CALL_OW 12
10152: ARRAY
10153: ST_TO_ADDR
// if Crawls ( un ) then
10154: LD_VAR 0 2
10158: PPUSH
10159: CALL_OW 318
10163: IFFALSE 10174
// ComWalk ( un ) ;
10165: LD_VAR 0 2
10169: PPUSH
10170: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10174: LD_VAR 0 2
10178: PPUSH
10179: LD_INT 5
10181: PPUSH
10182: CALL_OW 336
// end ;
10186: PPOPN 3
10188: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10189: LD_EXP 21
10193: PUSH
10194: LD_EXP 39
10198: AND
10199: PUSH
10200: LD_OWVAR 67
10204: PUSH
10205: LD_INT 3
10207: LESS
10208: AND
10209: IFFALSE 10228
10211: GO 10213
10213: DISABLE
// Difficulty := Difficulty + 1 ;
10214: LD_ADDR_OWVAR 67
10218: PUSH
10219: LD_OWVAR 67
10223: PUSH
10224: LD_INT 1
10226: PLUS
10227: ST_TO_ADDR
10228: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10229: LD_EXP 21
10233: PUSH
10234: LD_EXP 40
10238: AND
10239: IFFALSE 10342
10241: GO 10243
10243: DISABLE
10244: LD_INT 0
10246: PPUSH
// begin for i := 1 to 5 do
10247: LD_ADDR_VAR 0 1
10251: PUSH
10252: DOUBLE
10253: LD_INT 1
10255: DEC
10256: ST_TO_ADDR
10257: LD_INT 5
10259: PUSH
10260: FOR_TO
10261: IFFALSE 10340
// begin uc_nation := nation_nature ;
10263: LD_ADDR_OWVAR 21
10267: PUSH
10268: LD_INT 0
10270: ST_TO_ADDR
// uc_side := 0 ;
10271: LD_ADDR_OWVAR 20
10275: PUSH
10276: LD_INT 0
10278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10279: LD_ADDR_OWVAR 29
10283: PUSH
10284: LD_INT 12
10286: PUSH
10287: LD_INT 12
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: ST_TO_ADDR
// hc_agressivity := 20 ;
10294: LD_ADDR_OWVAR 35
10298: PUSH
10299: LD_INT 20
10301: ST_TO_ADDR
// hc_class := class_tiger ;
10302: LD_ADDR_OWVAR 28
10306: PUSH
10307: LD_INT 14
10309: ST_TO_ADDR
// hc_gallery :=  ;
10310: LD_ADDR_OWVAR 33
10314: PUSH
10315: LD_STRING 
10317: ST_TO_ADDR
// hc_name :=  ;
10318: LD_ADDR_OWVAR 26
10322: PUSH
10323: LD_STRING 
10325: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10326: CALL_OW 44
10330: PPUSH
10331: LD_INT 0
10333: PPUSH
10334: CALL_OW 51
// end ;
10338: GO 10260
10340: POP
10341: POP
// end ;
10342: PPOPN 1
10344: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10345: LD_EXP 21
10349: PUSH
10350: LD_EXP 41
10354: AND
10355: IFFALSE 10364
10357: GO 10359
10359: DISABLE
// StreamSibBomb ;
10360: CALL 10365 0 0
10364: END
// export function StreamSibBomb ; var i , x , y ; begin
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
10369: PPUSH
10370: PPUSH
// result := false ;
10371: LD_ADDR_VAR 0 1
10375: PUSH
10376: LD_INT 0
10378: ST_TO_ADDR
// for i := 1 to 16 do
10379: LD_ADDR_VAR 0 2
10383: PUSH
10384: DOUBLE
10385: LD_INT 1
10387: DEC
10388: ST_TO_ADDR
10389: LD_INT 16
10391: PUSH
10392: FOR_TO
10393: IFFALSE 10592
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10395: LD_ADDR_VAR 0 3
10399: PUSH
10400: LD_INT 10
10402: PUSH
10403: LD_INT 20
10405: PUSH
10406: LD_INT 30
10408: PUSH
10409: LD_INT 40
10411: PUSH
10412: LD_INT 50
10414: PUSH
10415: LD_INT 60
10417: PUSH
10418: LD_INT 70
10420: PUSH
10421: LD_INT 80
10423: PUSH
10424: LD_INT 90
10426: PUSH
10427: LD_INT 100
10429: PUSH
10430: LD_INT 110
10432: PUSH
10433: LD_INT 120
10435: PUSH
10436: LD_INT 130
10438: PUSH
10439: LD_INT 140
10441: PUSH
10442: LD_INT 150
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 1
10464: PPUSH
10465: LD_INT 15
10467: PPUSH
10468: CALL_OW 12
10472: ARRAY
10473: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10474: LD_ADDR_VAR 0 4
10478: PUSH
10479: LD_INT 10
10481: PUSH
10482: LD_INT 20
10484: PUSH
10485: LD_INT 30
10487: PUSH
10488: LD_INT 40
10490: PUSH
10491: LD_INT 50
10493: PUSH
10494: LD_INT 60
10496: PUSH
10497: LD_INT 70
10499: PUSH
10500: LD_INT 80
10502: PUSH
10503: LD_INT 90
10505: PUSH
10506: LD_INT 100
10508: PUSH
10509: LD_INT 110
10511: PUSH
10512: LD_INT 120
10514: PUSH
10515: LD_INT 130
10517: PUSH
10518: LD_INT 140
10520: PUSH
10521: LD_INT 150
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: PUSH
10541: LD_INT 1
10543: PPUSH
10544: LD_INT 15
10546: PPUSH
10547: CALL_OW 12
10551: ARRAY
10552: ST_TO_ADDR
// if ValidHex ( x , y ) then
10553: LD_VAR 0 3
10557: PPUSH
10558: LD_VAR 0 4
10562: PPUSH
10563: CALL_OW 488
10567: IFFALSE 10590
// begin result := [ x , y ] ;
10569: LD_ADDR_VAR 0 1
10573: PUSH
10574: LD_VAR 0 3
10578: PUSH
10579: LD_VAR 0 4
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: ST_TO_ADDR
// break ;
10588: GO 10592
// end ; end ;
10590: GO 10392
10592: POP
10593: POP
// if result then
10594: LD_VAR 0 1
10598: IFFALSE 10658
// begin ToLua ( playSibBomb() ) ;
10600: LD_STRING playSibBomb()
10602: PPUSH
10603: CALL_OW 559
// wait ( 0 0$14 ) ;
10607: LD_INT 490
10609: PPUSH
10610: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10614: LD_VAR 0 1
10618: PUSH
10619: LD_INT 1
10621: ARRAY
10622: PPUSH
10623: LD_VAR 0 1
10627: PUSH
10628: LD_INT 2
10630: ARRAY
10631: PPUSH
10632: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10636: LD_VAR 0 1
10640: PUSH
10641: LD_INT 1
10643: ARRAY
10644: PPUSH
10645: LD_VAR 0 1
10649: PUSH
10650: LD_INT 2
10652: ARRAY
10653: PPUSH
10654: CALL_OW 429
// end ; end ;
10658: LD_VAR 0 1
10662: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10663: LD_EXP 21
10667: PUSH
10668: LD_EXP 43
10672: AND
10673: IFFALSE 10685
10675: GO 10677
10677: DISABLE
// YouLost (  ) ;
10678: LD_STRING 
10680: PPUSH
10681: CALL_OW 104
10685: END
// every 0 0$1 trigger StreamModeActive and sFog do
10686: LD_EXP 21
10690: PUSH
10691: LD_EXP 42
10695: AND
10696: IFFALSE 10710
10698: GO 10700
10700: DISABLE
// FogOff ( your_side ) ;
10701: LD_OWVAR 2
10705: PPUSH
10706: CALL_OW 344
10710: END
// every 0 0$1 trigger StreamModeActive and sSun do
10711: LD_EXP 21
10715: PUSH
10716: LD_EXP 44
10720: AND
10721: IFFALSE 10749
10723: GO 10725
10725: DISABLE
// begin solar_recharge_percent := 0 ;
10726: LD_ADDR_OWVAR 79
10730: PUSH
10731: LD_INT 0
10733: ST_TO_ADDR
// wait ( 5 5$00 ) ;
10734: LD_INT 10500
10736: PPUSH
10737: CALL_OW 67
// solar_recharge_percent := 100 ;
10741: LD_ADDR_OWVAR 79
10745: PUSH
10746: LD_INT 100
10748: ST_TO_ADDR
// end ;
10749: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
10750: LD_EXP 21
10754: PUSH
10755: LD_EXP 45
10759: AND
10760: IFFALSE 10999
10762: GO 10764
10764: DISABLE
10765: LD_INT 0
10767: PPUSH
10768: PPUSH
10769: PPUSH
// begin tmp := [ ] ;
10770: LD_ADDR_VAR 0 3
10774: PUSH
10775: EMPTY
10776: ST_TO_ADDR
// for i := 1 to 6 do
10777: LD_ADDR_VAR 0 1
10781: PUSH
10782: DOUBLE
10783: LD_INT 1
10785: DEC
10786: ST_TO_ADDR
10787: LD_INT 6
10789: PUSH
10790: FOR_TO
10791: IFFALSE 10896
// begin uc_nation := nation_nature ;
10793: LD_ADDR_OWVAR 21
10797: PUSH
10798: LD_INT 0
10800: ST_TO_ADDR
// uc_side := 0 ;
10801: LD_ADDR_OWVAR 20
10805: PUSH
10806: LD_INT 0
10808: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10809: LD_ADDR_OWVAR 29
10813: PUSH
10814: LD_INT 12
10816: PUSH
10817: LD_INT 12
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: ST_TO_ADDR
// hc_agressivity := 20 ;
10824: LD_ADDR_OWVAR 35
10828: PUSH
10829: LD_INT 20
10831: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
10832: LD_ADDR_OWVAR 28
10836: PUSH
10837: LD_INT 17
10839: ST_TO_ADDR
// hc_gallery :=  ;
10840: LD_ADDR_OWVAR 33
10844: PUSH
10845: LD_STRING 
10847: ST_TO_ADDR
// hc_name :=  ;
10848: LD_ADDR_OWVAR 26
10852: PUSH
10853: LD_STRING 
10855: ST_TO_ADDR
// un := CreateHuman ;
10856: LD_ADDR_VAR 0 2
10860: PUSH
10861: CALL_OW 44
10865: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
10866: LD_VAR 0 2
10870: PPUSH
10871: LD_INT 1
10873: PPUSH
10874: CALL_OW 51
// tmp := tmp ^ un ;
10878: LD_ADDR_VAR 0 3
10882: PUSH
10883: LD_VAR 0 3
10887: PUSH
10888: LD_VAR 0 2
10892: ADD
10893: ST_TO_ADDR
// end ;
10894: GO 10790
10896: POP
10897: POP
// repeat wait ( 0 0$1 ) ;
10898: LD_INT 35
10900: PPUSH
10901: CALL_OW 67
// for un in tmp do
10905: LD_ADDR_VAR 0 2
10909: PUSH
10910: LD_VAR 0 3
10914: PUSH
10915: FOR_IN
10916: IFFALSE 10990
// begin if IsDead ( un ) then
10918: LD_VAR 0 2
10922: PPUSH
10923: CALL_OW 301
10927: IFFALSE 10947
// begin tmp := tmp diff un ;
10929: LD_ADDR_VAR 0 3
10933: PUSH
10934: LD_VAR 0 3
10938: PUSH
10939: LD_VAR 0 2
10943: DIFF
10944: ST_TO_ADDR
// continue ;
10945: GO 10915
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
10947: LD_VAR 0 2
10951: PPUSH
10952: LD_INT 3
10954: PUSH
10955: LD_INT 22
10957: PUSH
10958: LD_INT 0
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PPUSH
10969: CALL_OW 69
10973: PPUSH
10974: LD_VAR 0 2
10978: PPUSH
10979: CALL_OW 74
10983: PPUSH
10984: CALL_OW 115
// end ;
10988: GO 10915
10990: POP
10991: POP
// until not tmp ;
10992: LD_VAR 0 3
10996: NOT
10997: IFFALSE 10898
// end ;
10999: PPOPN 3
11001: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11002: LD_EXP 21
11006: PUSH
11007: LD_EXP 46
11011: AND
11012: IFFALSE 11066
11014: GO 11016
11016: DISABLE
// begin ToLua ( displayTroll(); ) ;
11017: LD_STRING displayTroll();
11019: PPUSH
11020: CALL_OW 559
// wait ( 3 3$00 ) ;
11024: LD_INT 6300
11026: PPUSH
11027: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11031: LD_STRING hideTroll();
11033: PPUSH
11034: CALL_OW 559
// wait ( 1 1$00 ) ;
11038: LD_INT 2100
11040: PPUSH
11041: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11045: LD_STRING displayTroll();
11047: PPUSH
11048: CALL_OW 559
// wait ( 1 1$00 ) ;
11052: LD_INT 2100
11054: PPUSH
11055: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11059: LD_STRING hideTroll();
11061: PPUSH
11062: CALL_OW 559
// end ;
11066: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11067: LD_EXP 21
11071: PUSH
11072: LD_EXP 47
11076: AND
11077: IFFALSE 11140
11079: GO 11081
11081: DISABLE
11082: LD_INT 0
11084: PPUSH
// begin p := 0 ;
11085: LD_ADDR_VAR 0 1
11089: PUSH
11090: LD_INT 0
11092: ST_TO_ADDR
// repeat game_speed := 1 ;
11093: LD_ADDR_OWVAR 65
11097: PUSH
11098: LD_INT 1
11100: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11101: LD_INT 35
11103: PPUSH
11104: CALL_OW 67
// p := p + 1 ;
11108: LD_ADDR_VAR 0 1
11112: PUSH
11113: LD_VAR 0 1
11117: PUSH
11118: LD_INT 1
11120: PLUS
11121: ST_TO_ADDR
// until p >= 60 ;
11122: LD_VAR 0 1
11126: PUSH
11127: LD_INT 60
11129: GREATEREQUAL
11130: IFFALSE 11093
// game_speed := 4 ;
11132: LD_ADDR_OWVAR 65
11136: PUSH
11137: LD_INT 4
11139: ST_TO_ADDR
// end ;
11140: PPOPN 1
11142: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11143: LD_EXP 21
11147: PUSH
11148: LD_EXP 48
11152: AND
11153: IFFALSE 11299
11155: GO 11157
11157: DISABLE
11158: LD_INT 0
11160: PPUSH
11161: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11162: LD_ADDR_VAR 0 1
11166: PUSH
11167: LD_INT 22
11169: PUSH
11170: LD_OWVAR 2
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 2
11181: PUSH
11182: LD_INT 30
11184: PUSH
11185: LD_INT 0
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 30
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: PPUSH
11211: CALL_OW 69
11215: ST_TO_ADDR
// if not depot then
11216: LD_VAR 0 1
11220: NOT
11221: IFFALSE 11225
// exit ;
11223: GO 11299
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11225: LD_ADDR_VAR 0 2
11229: PUSH
11230: LD_VAR 0 1
11234: PUSH
11235: LD_INT 1
11237: PPUSH
11238: LD_VAR 0 1
11242: PPUSH
11243: CALL_OW 12
11247: ARRAY
11248: PPUSH
11249: CALL_OW 274
11253: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11254: LD_VAR 0 2
11258: PPUSH
11259: LD_INT 1
11261: PPUSH
11262: LD_INT 0
11264: PPUSH
11265: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11269: LD_VAR 0 2
11273: PPUSH
11274: LD_INT 2
11276: PPUSH
11277: LD_INT 0
11279: PPUSH
11280: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11284: LD_VAR 0 2
11288: PPUSH
11289: LD_INT 3
11291: PPUSH
11292: LD_INT 0
11294: PPUSH
11295: CALL_OW 277
// end ;
11299: PPOPN 2
11301: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11302: LD_EXP 21
11306: PUSH
11307: LD_EXP 49
11311: AND
11312: IFFALSE 11409
11314: GO 11316
11316: DISABLE
11317: LD_INT 0
11319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11320: LD_ADDR_VAR 0 1
11324: PUSH
11325: LD_INT 22
11327: PUSH
11328: LD_OWVAR 2
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: LD_INT 21
11339: PUSH
11340: LD_INT 1
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 3
11349: PUSH
11350: LD_INT 23
11352: PUSH
11353: LD_INT 0
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PPUSH
11369: CALL_OW 69
11373: ST_TO_ADDR
// if not tmp then
11374: LD_VAR 0 1
11378: NOT
11379: IFFALSE 11383
// exit ;
11381: GO 11409
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11383: LD_VAR 0 1
11387: PUSH
11388: LD_INT 1
11390: PPUSH
11391: LD_VAR 0 1
11395: PPUSH
11396: CALL_OW 12
11400: ARRAY
11401: PPUSH
11402: LD_INT 200
11404: PPUSH
11405: CALL_OW 234
// end ;
11409: PPOPN 1
11411: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11412: LD_EXP 21
11416: PUSH
11417: LD_EXP 50
11421: AND
11422: IFFALSE 11501
11424: GO 11426
11426: DISABLE
11427: LD_INT 0
11429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11430: LD_ADDR_VAR 0 1
11434: PUSH
11435: LD_INT 22
11437: PUSH
11438: LD_OWVAR 2
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 21
11449: PUSH
11450: LD_INT 2
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 69
11465: ST_TO_ADDR
// if not tmp then
11466: LD_VAR 0 1
11470: NOT
11471: IFFALSE 11475
// exit ;
11473: GO 11501
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11475: LD_VAR 0 1
11479: PUSH
11480: LD_INT 1
11482: PPUSH
11483: LD_VAR 0 1
11487: PPUSH
11488: CALL_OW 12
11492: ARRAY
11493: PPUSH
11494: LD_INT 60
11496: PPUSH
11497: CALL_OW 234
// end ;
11501: PPOPN 1
11503: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11504: LD_EXP 21
11508: PUSH
11509: LD_EXP 51
11513: AND
11514: IFFALSE 11613
11516: GO 11518
11518: DISABLE
11519: LD_INT 0
11521: PPUSH
11522: PPUSH
// begin enable ;
11523: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11524: LD_ADDR_VAR 0 1
11528: PUSH
11529: LD_INT 22
11531: PUSH
11532: LD_OWVAR 2
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: PUSH
11541: LD_INT 61
11543: PUSH
11544: EMPTY
11545: LIST
11546: PUSH
11547: LD_INT 33
11549: PUSH
11550: LD_INT 2
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 69
11566: ST_TO_ADDR
// if not tmp then
11567: LD_VAR 0 1
11571: NOT
11572: IFFALSE 11576
// exit ;
11574: GO 11613
// for i in tmp do
11576: LD_ADDR_VAR 0 2
11580: PUSH
11581: LD_VAR 0 1
11585: PUSH
11586: FOR_IN
11587: IFFALSE 11611
// if IsControledBy ( i ) then
11589: LD_VAR 0 2
11593: PPUSH
11594: CALL_OW 312
11598: IFFALSE 11609
// ComUnlink ( i ) ;
11600: LD_VAR 0 2
11604: PPUSH
11605: CALL_OW 136
11609: GO 11586
11611: POP
11612: POP
// end ;
11613: PPOPN 2
11615: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11616: LD_EXP 21
11620: PUSH
11621: LD_EXP 52
11625: AND
11626: IFFALSE 11766
11628: GO 11630
11630: DISABLE
11631: LD_INT 0
11633: PPUSH
11634: PPUSH
// begin ToLua ( displayPowell(); ) ;
11635: LD_STRING displayPowell();
11637: PPUSH
11638: CALL_OW 559
// uc_side := 0 ;
11642: LD_ADDR_OWVAR 20
11646: PUSH
11647: LD_INT 0
11649: ST_TO_ADDR
// uc_nation := 2 ;
11650: LD_ADDR_OWVAR 21
11654: PUSH
11655: LD_INT 2
11657: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11658: LD_ADDR_OWVAR 37
11662: PUSH
11663: LD_INT 14
11665: ST_TO_ADDR
// vc_engine := engine_siberite ;
11666: LD_ADDR_OWVAR 39
11670: PUSH
11671: LD_INT 3
11673: ST_TO_ADDR
// vc_control := control_apeman ;
11674: LD_ADDR_OWVAR 38
11678: PUSH
11679: LD_INT 5
11681: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
11682: LD_ADDR_OWVAR 40
11686: PUSH
11687: LD_INT 29
11689: ST_TO_ADDR
// un := CreateVehicle ;
11690: LD_ADDR_VAR 0 2
11694: PUSH
11695: CALL_OW 45
11699: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
11700: LD_VAR 0 2
11704: PPUSH
11705: LD_INT 1
11707: PPUSH
11708: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
11712: LD_INT 35
11714: PPUSH
11715: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
11719: LD_VAR 0 2
11723: PPUSH
11724: LD_INT 22
11726: PUSH
11727: LD_OWVAR 2
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: PPUSH
11736: CALL_OW 69
11740: PPUSH
11741: LD_VAR 0 2
11745: PPUSH
11746: CALL_OW 74
11750: PPUSH
11751: CALL_OW 115
// until IsDead ( un ) ;
11755: LD_VAR 0 2
11759: PPUSH
11760: CALL_OW 301
11764: IFFALSE 11712
// end ;
11766: PPOPN 2
11768: END
// every 0 0$1 trigger StreamModeActive and sStu do
11769: LD_EXP 21
11773: PUSH
11774: LD_EXP 60
11778: AND
11779: IFFALSE 11795
11781: GO 11783
11783: DISABLE
// begin ToLua ( displayStucuk(); ) ;
11784: LD_STRING displayStucuk();
11786: PPUSH
11787: CALL_OW 559
// ResetFog ;
11791: CALL_OW 335
// end ;
11795: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
11796: LD_EXP 21
11800: PUSH
11801: LD_EXP 53
11805: AND
11806: IFFALSE 11947
11808: GO 11810
11810: DISABLE
11811: LD_INT 0
11813: PPUSH
11814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11815: LD_ADDR_VAR 0 2
11819: PUSH
11820: LD_INT 22
11822: PUSH
11823: LD_OWVAR 2
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 21
11834: PUSH
11835: LD_INT 1
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PPUSH
11846: CALL_OW 69
11850: ST_TO_ADDR
// if not tmp then
11851: LD_VAR 0 2
11855: NOT
11856: IFFALSE 11860
// exit ;
11858: GO 11947
// un := tmp [ rand ( 1 , tmp ) ] ;
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: LD_VAR 0 2
11869: PUSH
11870: LD_INT 1
11872: PPUSH
11873: LD_VAR 0 2
11877: PPUSH
11878: CALL_OW 12
11882: ARRAY
11883: ST_TO_ADDR
// SetSide ( un , 0 ) ;
11884: LD_VAR 0 1
11888: PPUSH
11889: LD_INT 0
11891: PPUSH
11892: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
11896: LD_VAR 0 1
11900: PPUSH
11901: LD_OWVAR 3
11905: PUSH
11906: LD_VAR 0 1
11910: DIFF
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: CALL_OW 74
11921: PPUSH
11922: CALL_OW 115
// wait ( 0 0$20 ) ;
11926: LD_INT 700
11928: PPUSH
11929: CALL_OW 67
// SetSide ( un , your_side ) ;
11933: LD_VAR 0 1
11937: PPUSH
11938: LD_OWVAR 2
11942: PPUSH
11943: CALL_OW 235
// end ;
11947: PPOPN 2
11949: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
11950: LD_EXP 21
11954: PUSH
11955: LD_EXP 54
11959: AND
11960: IFFALSE 12066
11962: GO 11964
11964: DISABLE
11965: LD_INT 0
11967: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11968: LD_ADDR_VAR 0 1
11972: PUSH
11973: LD_INT 22
11975: PUSH
11976: LD_OWVAR 2
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 2
11987: PUSH
11988: LD_INT 30
11990: PUSH
11991: LD_INT 0
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 30
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PPUSH
12017: CALL_OW 69
12021: ST_TO_ADDR
// if not depot then
12022: LD_VAR 0 1
12026: NOT
12027: IFFALSE 12031
// exit ;
12029: GO 12066
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12031: LD_VAR 0 1
12035: PUSH
12036: LD_INT 1
12038: ARRAY
12039: PPUSH
12040: CALL_OW 250
12044: PPUSH
12045: LD_VAR 0 1
12049: PUSH
12050: LD_INT 1
12052: ARRAY
12053: PPUSH
12054: CALL_OW 251
12058: PPUSH
12059: LD_INT 70
12061: PPUSH
12062: CALL_OW 495
// end ;
12066: PPOPN 1
12068: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12069: LD_EXP 21
12073: PUSH
12074: LD_EXP 55
12078: AND
12079: IFFALSE 12290
12081: GO 12083
12083: DISABLE
12084: LD_INT 0
12086: PPUSH
12087: PPUSH
12088: PPUSH
12089: PPUSH
12090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: LD_INT 22
12098: PUSH
12099: LD_OWVAR 2
12103: PUSH
12104: EMPTY
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 1
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PPUSH
12122: CALL_OW 69
12126: ST_TO_ADDR
// if not tmp then
12127: LD_VAR 0 5
12131: NOT
12132: IFFALSE 12136
// exit ;
12134: GO 12290
// for i in tmp do
12136: LD_ADDR_VAR 0 1
12140: PUSH
12141: LD_VAR 0 5
12145: PUSH
12146: FOR_IN
12147: IFFALSE 12288
// begin d := rand ( 0 , 5 ) ;
12149: LD_ADDR_VAR 0 4
12153: PUSH
12154: LD_INT 0
12156: PPUSH
12157: LD_INT 5
12159: PPUSH
12160: CALL_OW 12
12164: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12165: LD_ADDR_VAR 0 2
12169: PUSH
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 250
12179: PPUSH
12180: LD_VAR 0 4
12184: PPUSH
12185: LD_INT 3
12187: PPUSH
12188: LD_INT 12
12190: PPUSH
12191: CALL_OW 12
12195: PPUSH
12196: CALL_OW 272
12200: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12201: LD_ADDR_VAR 0 3
12205: PUSH
12206: LD_VAR 0 1
12210: PPUSH
12211: CALL_OW 251
12215: PPUSH
12216: LD_VAR 0 4
12220: PPUSH
12221: LD_INT 3
12223: PPUSH
12224: LD_INT 12
12226: PPUSH
12227: CALL_OW 12
12231: PPUSH
12232: CALL_OW 273
12236: ST_TO_ADDR
// if ValidHex ( x , y ) then
12237: LD_VAR 0 2
12241: PPUSH
12242: LD_VAR 0 3
12246: PPUSH
12247: CALL_OW 488
12251: IFFALSE 12286
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12253: LD_VAR 0 1
12257: PPUSH
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_VAR 0 3
12267: PPUSH
12268: LD_INT 3
12270: PPUSH
12271: LD_INT 6
12273: PPUSH
12274: CALL_OW 12
12278: PPUSH
12279: LD_INT 1
12281: PPUSH
12282: CALL_OW 483
// end ;
12286: GO 12146
12288: POP
12289: POP
// end ;
12290: PPOPN 5
12292: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12293: LD_EXP 21
12297: PUSH
12298: LD_EXP 56
12302: AND
12303: IFFALSE 12397
12305: GO 12307
12307: DISABLE
12308: LD_INT 0
12310: PPUSH
12311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12312: LD_ADDR_VAR 0 2
12316: PUSH
12317: LD_INT 22
12319: PUSH
12320: LD_OWVAR 2
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 32
12331: PUSH
12332: LD_INT 1
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 21
12341: PUSH
12342: LD_INT 2
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PPUSH
12354: CALL_OW 69
12358: ST_TO_ADDR
// if not tmp then
12359: LD_VAR 0 2
12363: NOT
12364: IFFALSE 12368
// exit ;
12366: GO 12397
// for i in tmp do
12368: LD_ADDR_VAR 0 1
12372: PUSH
12373: LD_VAR 0 2
12377: PUSH
12378: FOR_IN
12379: IFFALSE 12395
// SetFuel ( i , 0 ) ;
12381: LD_VAR 0 1
12385: PPUSH
12386: LD_INT 0
12388: PPUSH
12389: CALL_OW 240
12393: GO 12378
12395: POP
12396: POP
// end ;
12397: PPOPN 2
12399: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12400: LD_EXP 21
12404: PUSH
12405: LD_EXP 57
12409: AND
12410: IFFALSE 12476
12412: GO 12414
12414: DISABLE
12415: LD_INT 0
12417: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12418: LD_ADDR_VAR 0 1
12422: PUSH
12423: LD_INT 22
12425: PUSH
12426: LD_OWVAR 2
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: LD_INT 30
12437: PUSH
12438: LD_INT 29
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PPUSH
12449: CALL_OW 69
12453: ST_TO_ADDR
// if not tmp then
12454: LD_VAR 0 1
12458: NOT
12459: IFFALSE 12463
// exit ;
12461: GO 12476
// DestroyUnit ( tmp [ 1 ] ) ;
12463: LD_VAR 0 1
12467: PUSH
12468: LD_INT 1
12470: ARRAY
12471: PPUSH
12472: CALL_OW 65
// end ;
12476: PPOPN 1
12478: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12479: LD_EXP 21
12483: PUSH
12484: LD_EXP 59
12488: AND
12489: IFFALSE 12618
12491: GO 12493
12493: DISABLE
12494: LD_INT 0
12496: PPUSH
// begin uc_side := 0 ;
12497: LD_ADDR_OWVAR 20
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// uc_nation := nation_arabian ;
12505: LD_ADDR_OWVAR 21
12509: PUSH
12510: LD_INT 2
12512: ST_TO_ADDR
// hc_gallery :=  ;
12513: LD_ADDR_OWVAR 33
12517: PUSH
12518: LD_STRING 
12520: ST_TO_ADDR
// hc_name :=  ;
12521: LD_ADDR_OWVAR 26
12525: PUSH
12526: LD_STRING 
12528: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12529: LD_INT 1
12531: PPUSH
12532: LD_INT 11
12534: PPUSH
12535: LD_INT 10
12537: PPUSH
12538: CALL_OW 380
// un := CreateHuman ;
12542: LD_ADDR_VAR 0 1
12546: PUSH
12547: CALL_OW 44
12551: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12552: LD_VAR 0 1
12556: PPUSH
12557: LD_INT 1
12559: PPUSH
12560: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12564: LD_INT 35
12566: PPUSH
12567: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12571: LD_VAR 0 1
12575: PPUSH
12576: LD_INT 22
12578: PUSH
12579: LD_OWVAR 2
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PPUSH
12588: CALL_OW 69
12592: PPUSH
12593: LD_VAR 0 1
12597: PPUSH
12598: CALL_OW 74
12602: PPUSH
12603: CALL_OW 115
// until IsDead ( un ) ;
12607: LD_VAR 0 1
12611: PPUSH
12612: CALL_OW 301
12616: IFFALSE 12564
// end ;
12618: PPOPN 1
12620: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12621: LD_EXP 21
12625: PUSH
12626: LD_EXP 61
12630: AND
12631: IFFALSE 12643
12633: GO 12635
12635: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12636: LD_STRING earthquake(getX(game), 0, 32)
12638: PPUSH
12639: CALL_OW 559
12643: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12644: LD_EXP 21
12648: PUSH
12649: LD_EXP 62
12653: AND
12654: IFFALSE 12745
12656: GO 12658
12658: DISABLE
12659: LD_INT 0
12661: PPUSH
// begin enable ;
12662: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12663: LD_ADDR_VAR 0 1
12667: PUSH
12668: LD_INT 22
12670: PUSH
12671: LD_OWVAR 2
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: LD_INT 21
12682: PUSH
12683: LD_INT 2
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 33
12692: PUSH
12693: LD_INT 3
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: LIST
12704: PPUSH
12705: CALL_OW 69
12709: ST_TO_ADDR
// if not tmp then
12710: LD_VAR 0 1
12714: NOT
12715: IFFALSE 12719
// exit ;
12717: GO 12745
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
12719: LD_VAR 0 1
12723: PUSH
12724: LD_INT 1
12726: PPUSH
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 12
12736: ARRAY
12737: PPUSH
12738: LD_INT 1
12740: PPUSH
12741: CALL_OW 234
// end ;
12745: PPOPN 1
12747: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
12748: LD_EXP 21
12752: PUSH
12753: LD_EXP 63
12757: AND
12758: IFFALSE 12899
12760: GO 12762
12762: DISABLE
12763: LD_INT 0
12765: PPUSH
12766: PPUSH
12767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12768: LD_ADDR_VAR 0 3
12772: PUSH
12773: LD_INT 22
12775: PUSH
12776: LD_OWVAR 2
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 25
12787: PUSH
12788: LD_INT 1
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PPUSH
12799: CALL_OW 69
12803: ST_TO_ADDR
// if not tmp then
12804: LD_VAR 0 3
12808: NOT
12809: IFFALSE 12813
// exit ;
12811: GO 12899
// un := tmp [ rand ( 1 , tmp ) ] ;
12813: LD_ADDR_VAR 0 2
12817: PUSH
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 1
12825: PPUSH
12826: LD_VAR 0 3
12830: PPUSH
12831: CALL_OW 12
12835: ARRAY
12836: ST_TO_ADDR
// if Crawls ( un ) then
12837: LD_VAR 0 2
12841: PPUSH
12842: CALL_OW 318
12846: IFFALSE 12857
// ComWalk ( un ) ;
12848: LD_VAR 0 2
12852: PPUSH
12853: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
12857: LD_VAR 0 2
12861: PPUSH
12862: LD_INT 9
12864: PPUSH
12865: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
12869: LD_INT 28
12871: PPUSH
12872: LD_OWVAR 2
12876: PPUSH
12877: LD_INT 2
12879: PPUSH
12880: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
12884: LD_INT 29
12886: PPUSH
12887: LD_OWVAR 2
12891: PPUSH
12892: LD_INT 2
12894: PPUSH
12895: CALL_OW 322
// end ;
12899: PPOPN 3
12901: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
12902: LD_EXP 21
12906: PUSH
12907: LD_EXP 64
12911: AND
12912: IFFALSE 13023
12914: GO 12916
12916: DISABLE
12917: LD_INT 0
12919: PPUSH
12920: PPUSH
12921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
12922: LD_ADDR_VAR 0 3
12926: PUSH
12927: LD_INT 22
12929: PUSH
12930: LD_OWVAR 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 25
12941: PUSH
12942: LD_INT 1
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PPUSH
12953: CALL_OW 69
12957: ST_TO_ADDR
// if not tmp then
12958: LD_VAR 0 3
12962: NOT
12963: IFFALSE 12967
// exit ;
12965: GO 13023
// un := tmp [ rand ( 1 , tmp ) ] ;
12967: LD_ADDR_VAR 0 2
12971: PUSH
12972: LD_VAR 0 3
12976: PUSH
12977: LD_INT 1
12979: PPUSH
12980: LD_VAR 0 3
12984: PPUSH
12985: CALL_OW 12
12989: ARRAY
12990: ST_TO_ADDR
// if Crawls ( un ) then
12991: LD_VAR 0 2
12995: PPUSH
12996: CALL_OW 318
13000: IFFALSE 13011
// ComWalk ( un ) ;
13002: LD_VAR 0 2
13006: PPUSH
13007: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13011: LD_VAR 0 2
13015: PPUSH
13016: LD_INT 8
13018: PPUSH
13019: CALL_OW 336
// end ;
13023: PPOPN 3
13025: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13026: LD_EXP 21
13030: PUSH
13031: LD_EXP 65
13035: AND
13036: IFFALSE 13180
13038: GO 13040
13040: DISABLE
13041: LD_INT 0
13043: PPUSH
13044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13045: LD_ADDR_VAR 0 2
13049: PUSH
13050: LD_INT 22
13052: PUSH
13053: LD_OWVAR 2
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 21
13064: PUSH
13065: LD_INT 2
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: PUSH
13072: LD_INT 2
13074: PUSH
13075: LD_INT 34
13077: PUSH
13078: LD_INT 12
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 34
13087: PUSH
13088: LD_INT 51
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 34
13097: PUSH
13098: LD_INT 32
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: LIST
13115: PPUSH
13116: CALL_OW 69
13120: ST_TO_ADDR
// if not tmp then
13121: LD_VAR 0 2
13125: NOT
13126: IFFALSE 13130
// exit ;
13128: GO 13180
// for i in tmp do
13130: LD_ADDR_VAR 0 1
13134: PUSH
13135: LD_VAR 0 2
13139: PUSH
13140: FOR_IN
13141: IFFALSE 13178
// if GetCargo ( i , mat_artifact ) = 0 then
13143: LD_VAR 0 1
13147: PPUSH
13148: LD_INT 4
13150: PPUSH
13151: CALL_OW 289
13155: PUSH
13156: LD_INT 0
13158: EQUAL
13159: IFFALSE 13176
// SetCargo ( i , mat_siberit , 100 ) ;
13161: LD_VAR 0 1
13165: PPUSH
13166: LD_INT 3
13168: PPUSH
13169: LD_INT 100
13171: PPUSH
13172: CALL_OW 290
13176: GO 13140
13178: POP
13179: POP
// end ;
13180: PPOPN 2
13182: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13183: LD_EXP 21
13187: PUSH
13188: LD_EXP 66
13192: AND
13193: IFFALSE 13346
13195: GO 13197
13197: DISABLE
13198: LD_INT 0
13200: PPUSH
13201: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13202: LD_ADDR_VAR 0 2
13206: PUSH
13207: LD_INT 22
13209: PUSH
13210: LD_OWVAR 2
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PPUSH
13219: CALL_OW 69
13223: ST_TO_ADDR
// if not tmp then
13224: LD_VAR 0 2
13228: NOT
13229: IFFALSE 13233
// exit ;
13231: GO 13346
// for i := 1 to 2 do
13233: LD_ADDR_VAR 0 1
13237: PUSH
13238: DOUBLE
13239: LD_INT 1
13241: DEC
13242: ST_TO_ADDR
13243: LD_INT 2
13245: PUSH
13246: FOR_TO
13247: IFFALSE 13344
// begin uc_side := your_side ;
13249: LD_ADDR_OWVAR 20
13253: PUSH
13254: LD_OWVAR 2
13258: ST_TO_ADDR
// uc_nation := nation_american ;
13259: LD_ADDR_OWVAR 21
13263: PUSH
13264: LD_INT 1
13266: ST_TO_ADDR
// vc_chassis := us_morphling ;
13267: LD_ADDR_OWVAR 37
13271: PUSH
13272: LD_INT 5
13274: ST_TO_ADDR
// vc_engine := engine_siberite ;
13275: LD_ADDR_OWVAR 39
13279: PUSH
13280: LD_INT 3
13282: ST_TO_ADDR
// vc_control := control_computer ;
13283: LD_ADDR_OWVAR 38
13287: PUSH
13288: LD_INT 3
13290: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13291: LD_ADDR_OWVAR 40
13295: PUSH
13296: LD_INT 10
13298: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
13299: CALL_OW 45
13303: PPUSH
13304: LD_VAR 0 2
13308: PUSH
13309: LD_INT 1
13311: ARRAY
13312: PPUSH
13313: CALL_OW 250
13317: PPUSH
13318: LD_VAR 0 2
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: CALL_OW 251
13331: PPUSH
13332: LD_INT 12
13334: PPUSH
13335: LD_INT 1
13337: PPUSH
13338: CALL_OW 50
// end ;
13342: GO 13246
13344: POP
13345: POP
// end ;
13346: PPOPN 2
13348: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13349: LD_EXP 21
13353: PUSH
13354: LD_EXP 67
13358: AND
13359: IFFALSE 13581
13361: GO 13363
13363: DISABLE
13364: LD_INT 0
13366: PPUSH
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13372: LD_ADDR_VAR 0 6
13376: PUSH
13377: LD_INT 22
13379: PUSH
13380: LD_OWVAR 2
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 21
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: LD_INT 23
13404: PUSH
13405: LD_INT 0
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: PPUSH
13421: CALL_OW 69
13425: ST_TO_ADDR
// if not tmp then
13426: LD_VAR 0 6
13430: NOT
13431: IFFALSE 13435
// exit ;
13433: GO 13581
// s1 := rand ( 1 , 4 ) ;
13435: LD_ADDR_VAR 0 2
13439: PUSH
13440: LD_INT 1
13442: PPUSH
13443: LD_INT 4
13445: PPUSH
13446: CALL_OW 12
13450: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13451: LD_ADDR_VAR 0 4
13455: PUSH
13456: LD_VAR 0 6
13460: PUSH
13461: LD_INT 1
13463: ARRAY
13464: PPUSH
13465: LD_VAR 0 2
13469: PPUSH
13470: CALL_OW 259
13474: ST_TO_ADDR
// if s1 = 1 then
13475: LD_VAR 0 2
13479: PUSH
13480: LD_INT 1
13482: EQUAL
13483: IFFALSE 13503
// s2 := rand ( 2 , 4 ) else
13485: LD_ADDR_VAR 0 3
13489: PUSH
13490: LD_INT 2
13492: PPUSH
13493: LD_INT 4
13495: PPUSH
13496: CALL_OW 12
13500: ST_TO_ADDR
13501: GO 13511
// s2 := 1 ;
13503: LD_ADDR_VAR 0 3
13507: PUSH
13508: LD_INT 1
13510: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13511: LD_ADDR_VAR 0 5
13515: PUSH
13516: LD_VAR 0 6
13520: PUSH
13521: LD_INT 1
13523: ARRAY
13524: PPUSH
13525: LD_VAR 0 3
13529: PPUSH
13530: CALL_OW 259
13534: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13535: LD_VAR 0 6
13539: PUSH
13540: LD_INT 1
13542: ARRAY
13543: PPUSH
13544: LD_VAR 0 2
13548: PPUSH
13549: LD_VAR 0 5
13553: PPUSH
13554: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13558: LD_VAR 0 6
13562: PUSH
13563: LD_INT 1
13565: ARRAY
13566: PPUSH
13567: LD_VAR 0 3
13571: PPUSH
13572: LD_VAR 0 4
13576: PPUSH
13577: CALL_OW 237
// end ;
13581: PPOPN 6
13583: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13584: LD_EXP 21
13588: PUSH
13589: LD_EXP 68
13593: AND
13594: IFFALSE 13673
13596: GO 13598
13598: DISABLE
13599: LD_INT 0
13601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_INT 22
13609: PUSH
13610: LD_OWVAR 2
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 30
13621: PUSH
13622: LD_INT 3
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: ST_TO_ADDR
// if not tmp then
13638: LD_VAR 0 1
13642: NOT
13643: IFFALSE 13647
// exit ;
13645: GO 13673
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13647: LD_VAR 0 1
13651: PUSH
13652: LD_INT 1
13654: PPUSH
13655: LD_VAR 0 1
13659: PPUSH
13660: CALL_OW 12
13664: ARRAY
13665: PPUSH
13666: LD_INT 1
13668: PPUSH
13669: CALL_OW 234
// end ;
13673: PPOPN 1
13675: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
13676: LD_EXP 21
13680: PUSH
13681: LD_EXP 69
13685: AND
13686: IFFALSE 13798
13688: GO 13690
13690: DISABLE
13691: LD_INT 0
13693: PPUSH
13694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
13695: LD_ADDR_VAR 0 2
13699: PUSH
13700: LD_INT 22
13702: PUSH
13703: LD_OWVAR 2
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 2
13714: PUSH
13715: LD_INT 30
13717: PUSH
13718: LD_INT 27
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 30
13727: PUSH
13728: LD_INT 26
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: PUSH
13735: LD_INT 30
13737: PUSH
13738: LD_INT 28
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PPUSH
13755: CALL_OW 69
13759: ST_TO_ADDR
// if not tmp then
13760: LD_VAR 0 2
13764: NOT
13765: IFFALSE 13769
// exit ;
13767: GO 13798
// for i in tmp do
13769: LD_ADDR_VAR 0 1
13773: PUSH
13774: LD_VAR 0 2
13778: PUSH
13779: FOR_IN
13780: IFFALSE 13796
// SetLives ( i , 1 ) ;
13782: LD_VAR 0 1
13786: PPUSH
13787: LD_INT 1
13789: PPUSH
13790: CALL_OW 234
13794: GO 13779
13796: POP
13797: POP
// end ;
13798: PPOPN 2
13800: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
13801: LD_EXP 21
13805: PUSH
13806: LD_EXP 70
13810: AND
13811: IFFALSE 14085
13813: GO 13815
13815: DISABLE
13816: LD_INT 0
13818: PPUSH
13819: PPUSH
13820: PPUSH
// begin i := rand ( 1 , 7 ) ;
13821: LD_ADDR_VAR 0 1
13825: PUSH
13826: LD_INT 1
13828: PPUSH
13829: LD_INT 7
13831: PPUSH
13832: CALL_OW 12
13836: ST_TO_ADDR
// case i of 1 :
13837: LD_VAR 0 1
13841: PUSH
13842: LD_INT 1
13844: DOUBLE
13845: EQUAL
13846: IFTRUE 13850
13848: GO 13860
13850: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
13851: LD_STRING earthquake(getX(game), 0, 32)
13853: PPUSH
13854: CALL_OW 559
13858: GO 14085
13860: LD_INT 2
13862: DOUBLE
13863: EQUAL
13864: IFTRUE 13868
13866: GO 13882
13868: POP
// begin ToLua ( displayStucuk(); ) ;
13869: LD_STRING displayStucuk();
13871: PPUSH
13872: CALL_OW 559
// ResetFog ;
13876: CALL_OW 335
// end ; 3 :
13880: GO 14085
13882: LD_INT 3
13884: DOUBLE
13885: EQUAL
13886: IFTRUE 13890
13888: GO 13994
13890: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13891: LD_ADDR_VAR 0 2
13895: PUSH
13896: LD_INT 22
13898: PUSH
13899: LD_OWVAR 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 25
13910: PUSH
13911: LD_INT 1
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PPUSH
13922: CALL_OW 69
13926: ST_TO_ADDR
// if not tmp then
13927: LD_VAR 0 2
13931: NOT
13932: IFFALSE 13936
// exit ;
13934: GO 14085
// un := tmp [ rand ( 1 , tmp ) ] ;
13936: LD_ADDR_VAR 0 3
13940: PUSH
13941: LD_VAR 0 2
13945: PUSH
13946: LD_INT 1
13948: PPUSH
13949: LD_VAR 0 2
13953: PPUSH
13954: CALL_OW 12
13958: ARRAY
13959: ST_TO_ADDR
// if Crawls ( un ) then
13960: LD_VAR 0 3
13964: PPUSH
13965: CALL_OW 318
13969: IFFALSE 13980
// ComWalk ( un ) ;
13971: LD_VAR 0 3
13975: PPUSH
13976: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13980: LD_VAR 0 3
13984: PPUSH
13985: LD_INT 8
13987: PPUSH
13988: CALL_OW 336
// end ; 4 :
13992: GO 14085
13994: LD_INT 4
13996: DOUBLE
13997: EQUAL
13998: IFTRUE 14002
14000: GO 14063
14002: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14003: LD_ADDR_VAR 0 2
14007: PUSH
14008: LD_INT 22
14010: PUSH
14011: LD_OWVAR 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: LD_INT 30
14022: PUSH
14023: LD_INT 29
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: ST_TO_ADDR
// if not tmp then
14039: LD_VAR 0 2
14043: NOT
14044: IFFALSE 14048
// exit ;
14046: GO 14085
// DestroyUnit ( tmp [ 1 ] ) ;
14048: LD_VAR 0 2
14052: PUSH
14053: LD_INT 1
14055: ARRAY
14056: PPUSH
14057: CALL_OW 65
// end ; 5 .. 7 :
14061: GO 14085
14063: LD_INT 5
14065: DOUBLE
14066: GREATEREQUAL
14067: IFFALSE 14075
14069: LD_INT 7
14071: DOUBLE
14072: LESSEQUAL
14073: IFTRUE 14077
14075: GO 14084
14077: POP
// StreamSibBomb ; end ;
14078: CALL 10365 0 0
14082: GO 14085
14084: POP
// end ;
14085: PPOPN 3
14087: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14088: LD_EXP 21
14092: PUSH
14093: LD_EXP 71
14097: AND
14098: IFFALSE 14254
14100: GO 14102
14102: DISABLE
14103: LD_INT 0
14105: PPUSH
14106: PPUSH
14107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14108: LD_ADDR_VAR 0 2
14112: PUSH
14113: LD_INT 81
14115: PUSH
14116: LD_OWVAR 2
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: LD_INT 21
14130: PUSH
14131: LD_INT 1
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 2
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 69
14161: ST_TO_ADDR
// if not tmp then
14162: LD_VAR 0 2
14166: NOT
14167: IFFALSE 14171
// exit ;
14169: GO 14254
// p := 0 ;
14171: LD_ADDR_VAR 0 3
14175: PUSH
14176: LD_INT 0
14178: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14179: LD_INT 35
14181: PPUSH
14182: CALL_OW 67
// p := p + 1 ;
14186: LD_ADDR_VAR 0 3
14190: PUSH
14191: LD_VAR 0 3
14195: PUSH
14196: LD_INT 1
14198: PLUS
14199: ST_TO_ADDR
// for i in tmp do
14200: LD_ADDR_VAR 0 1
14204: PUSH
14205: LD_VAR 0 2
14209: PUSH
14210: FOR_IN
14211: IFFALSE 14242
// if GetLives ( i ) < 1000 then
14213: LD_VAR 0 1
14217: PPUSH
14218: CALL_OW 256
14222: PUSH
14223: LD_INT 1000
14225: LESS
14226: IFFALSE 14240
// SetLives ( i , 1000 ) ;
14228: LD_VAR 0 1
14232: PPUSH
14233: LD_INT 1000
14235: PPUSH
14236: CALL_OW 234
14240: GO 14210
14242: POP
14243: POP
// until p > 20 ;
14244: LD_VAR 0 3
14248: PUSH
14249: LD_INT 20
14251: GREATER
14252: IFFALSE 14179
// end ;
14254: PPOPN 3
14256: END
// every 0 0$1 trigger StreamModeActive and sTime do
14257: LD_EXP 21
14261: PUSH
14262: LD_EXP 72
14266: AND
14267: IFFALSE 14302
14269: GO 14271
14271: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14272: LD_INT 28
14274: PPUSH
14275: LD_OWVAR 2
14279: PPUSH
14280: LD_INT 2
14282: PPUSH
14283: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14287: LD_INT 30
14289: PPUSH
14290: LD_OWVAR 2
14294: PPUSH
14295: LD_INT 2
14297: PPUSH
14298: CALL_OW 322
// end ;
14302: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14303: LD_EXP 21
14307: PUSH
14308: LD_EXP 73
14312: AND
14313: IFFALSE 14434
14315: GO 14317
14317: DISABLE
14318: LD_INT 0
14320: PPUSH
14321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14322: LD_ADDR_VAR 0 2
14326: PUSH
14327: LD_INT 22
14329: PUSH
14330: LD_OWVAR 2
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 21
14341: PUSH
14342: LD_INT 1
14344: PUSH
14345: EMPTY
14346: LIST
14347: LIST
14348: PUSH
14349: LD_INT 3
14351: PUSH
14352: LD_INT 23
14354: PUSH
14355: LD_INT 0
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 69
14375: ST_TO_ADDR
// if not tmp then
14376: LD_VAR 0 2
14380: NOT
14381: IFFALSE 14385
// exit ;
14383: GO 14434
// for i in tmp do
14385: LD_ADDR_VAR 0 1
14389: PUSH
14390: LD_VAR 0 2
14394: PUSH
14395: FOR_IN
14396: IFFALSE 14432
// begin if Crawls ( i ) then
14398: LD_VAR 0 1
14402: PPUSH
14403: CALL_OW 318
14407: IFFALSE 14418
// ComWalk ( i ) ;
14409: LD_VAR 0 1
14413: PPUSH
14414: CALL_OW 138
// SetClass ( i , 2 ) ;
14418: LD_VAR 0 1
14422: PPUSH
14423: LD_INT 2
14425: PPUSH
14426: CALL_OW 336
// end ;
14430: GO 14395
14432: POP
14433: POP
// end ;
14434: PPOPN 2
14436: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14437: LD_EXP 21
14441: PUSH
14442: LD_EXP 74
14446: AND
14447: IFFALSE 14668
14449: GO 14451
14451: DISABLE
14452: LD_INT 0
14454: PPUSH
14455: PPUSH
14456: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14457: LD_OWVAR 2
14461: PPUSH
14462: LD_INT 9
14464: PPUSH
14465: LD_INT 1
14467: PPUSH
14468: LD_INT 1
14470: PPUSH
14471: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14475: LD_INT 9
14477: PPUSH
14478: LD_OWVAR 2
14482: PPUSH
14483: CALL_OW 343
// uc_side := 9 ;
14487: LD_ADDR_OWVAR 20
14491: PUSH
14492: LD_INT 9
14494: ST_TO_ADDR
// uc_nation := 2 ;
14495: LD_ADDR_OWVAR 21
14499: PUSH
14500: LD_INT 2
14502: ST_TO_ADDR
// hc_name := Dark Warrior ;
14503: LD_ADDR_OWVAR 26
14507: PUSH
14508: LD_STRING Dark Warrior
14510: ST_TO_ADDR
// hc_gallery :=  ;
14511: LD_ADDR_OWVAR 33
14515: PUSH
14516: LD_STRING 
14518: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 10 ) ;
14519: LD_INT 1
14521: PPUSH
14522: LD_INT 1
14524: PPUSH
14525: LD_INT 10
14527: PPUSH
14528: CALL_OW 380
// un := CreateHuman ;
14532: LD_ADDR_VAR 0 3
14536: PUSH
14537: CALL_OW 44
14541: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14542: LD_VAR 0 3
14546: PPUSH
14547: LD_INT 1
14549: PPUSH
14550: CALL_OW 51
// p := 0 ;
14554: LD_ADDR_VAR 0 2
14558: PUSH
14559: LD_INT 0
14561: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14562: LD_INT 35
14564: PPUSH
14565: CALL_OW 67
// if GetLives ( un ) < 1000 then
14569: LD_VAR 0 3
14573: PPUSH
14574: CALL_OW 256
14578: PUSH
14579: LD_INT 1000
14581: LESS
14582: IFFALSE 14596
// SetLives ( un , 1000 ) ;
14584: LD_VAR 0 3
14588: PPUSH
14589: LD_INT 1000
14591: PPUSH
14592: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , your_side ] ) , un ) ) ;
14596: LD_VAR 0 3
14600: PPUSH
14601: LD_INT 81
14603: PUSH
14604: LD_OWVAR 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 69
14617: PPUSH
14618: LD_VAR 0 3
14622: PPUSH
14623: CALL_OW 74
14627: PPUSH
14628: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
14632: LD_VAR 0 2
14636: PUSH
14637: LD_INT 60
14639: GREATER
14640: PUSH
14641: LD_VAR 0 3
14645: PPUSH
14646: CALL_OW 301
14650: OR
14651: IFFALSE 14562
// if un then
14653: LD_VAR 0 3
14657: IFFALSE 14668
// RemoveUnit ( un ) ;
14659: LD_VAR 0 3
14663: PPUSH
14664: CALL_OW 64
// end ;
14668: PPOPN 3
14670: END
