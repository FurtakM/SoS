// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3599 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3446 0 0
// PrepareSheikGroup ;
 123: CALL 3084 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2996 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3847 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-3 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-3
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 71 , 84 ) ) and not baseSpotted and not kaiaAttacked do
 855: LD_INT 2
 857: PPUSH
 858: LD_INT 71
 860: PPUSH
 861: LD_INT 84
 863: PPUSH
 864: CALL_OW 428
 868: PPUSH
 869: CALL_OW 292
 873: PUSH
 874: LD_EXP 19
 878: NOT
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 939
 889: GO 891
 891: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 892: LD_EXP 1
 896: PPUSH
 897: LD_STRING DH-spot-1
 899: PPUSH
 900: CALL_OW 88
// Say ( HexInfo ( 71 , 84 ) , DRa-spot-1 ) ;
 904: LD_INT 71
 906: PPUSH
 907: LD_INT 84
 909: PPUSH
 910: CALL_OW 428
 914: PPUSH
 915: LD_STRING DRa-spot-1
 917: PPUSH
 918: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 922: LD_INT 90
 924: PPUSH
 925: LD_INT 41
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 6
 933: NEG
 934: PPUSH
 935: CALL_OW 330
// end ;
 939: END
// every 0 0$2 trigger See ( 2 , HexInfo ( 35 , 35 ) ) and not kaiaAttacked do
 940: LD_INT 2
 942: PPUSH
 943: LD_INT 35
 945: PPUSH
 946: LD_INT 35
 948: PPUSH
 949: CALL_OW 428
 953: PPUSH
 954: CALL_OW 292
 958: PUSH
 959: LD_EXP 22
 963: NOT
 964: AND
 965: IFFALSE 1015
 967: GO 969
 969: DISABLE
// begin ComTurnUnit ( HexInfo ( 35 , 35 ) , Heike ) ;
 970: LD_INT 35
 972: PPUSH
 973: LD_INT 35
 975: PPUSH
 976: CALL_OW 428
 980: PPUSH
 981: LD_EXP 1
 985: PPUSH
 986: CALL_OW 119
// wait ( 0 0$1 ) ;
 990: LD_INT 35
 992: PPUSH
 993: CALL_OW 67
// Say ( HexInfo ( 35 , 35 ) , DRa-spot-4 ) ;
 997: LD_INT 35
 999: PPUSH
1000: LD_INT 35
1002: PPUSH
1003: CALL_OW 428
1007: PPUSH
1008: LD_STRING DRa-spot-4
1010: PPUSH
1011: CALL_OW 88
// end ;
1015: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
1016: LD_EXP 21
1020: PUSH
1021: LD_EXP 14
1025: PPUSH
1026: LD_INT 101
1028: PUSH
1029: LD_INT 2
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 72
1040: AND
1041: PUSH
1042: LD_EXP 22
1046: NOT
1047: AND
1048: IFFALSE 1372
1050: GO 1052
1052: DISABLE
1053: LD_INT 0
1055: PPUSH
1056: PPUSH
1057: PPUSH
1058: PPUSH
1059: PPUSH
// begin enable ;
1060: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
1061: LD_ADDR_VAR 0 1
1065: PUSH
1066: LD_EXP 14
1070: PPUSH
1071: LD_INT 101
1073: PUSH
1074: LD_INT 2
1076: PUSH
1077: EMPTY
1078: LIST
1079: LIST
1080: PPUSH
1081: CALL_OW 72
1085: ST_TO_ADDR
// if not tmp then
1086: LD_VAR 0 1
1090: NOT
1091: IFFALSE 1095
// exit ;
1093: GO 1372
// InGameOn ;
1095: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
1099: LD_EXP 1
1103: PUSH
1104: LD_EXP 5
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PPUSH
1113: LD_VAR 0 1
1117: PUSH
1118: LD_INT 1
1120: ARRAY
1121: PPUSH
1122: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
1126: LD_VAR 0 1
1130: PUSH
1131: LD_INT 1
1133: ARRAY
1134: PPUSH
1135: LD_EXP 1
1139: PPUSH
1140: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
1144: LD_VAR 0 1
1148: PUSH
1149: LD_INT 1
1151: ARRAY
1152: PPUSH
1153: LD_STRING DG-meeting-1
1155: PPUSH
1156: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
1160: LD_ADDR_VAR 0 3
1164: PUSH
1165: LD_INT 81
1167: PUSH
1168: LD_INT 10
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: PUSH
1175: LD_INT 63
1177: PUSH
1178: LD_INT 25
1180: PUSH
1181: EMPTY
1182: LIST
1183: LIST
1184: PUSH
1185: LD_INT 108
1187: PUSH
1188: LD_INT 73
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PUSH
1195: EMPTY
1196: LIST
1197: LIST
1198: LIST
1199: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1200: LD_ADDR_VAR 0 4
1204: PUSH
1205: LD_INT 9999
1207: PUSH
1208: EMPTY
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// for i := 1 to 3 do
1214: LD_ADDR_VAR 0 2
1218: PUSH
1219: DOUBLE
1220: LD_INT 1
1222: DEC
1223: ST_TO_ADDR
1224: LD_INT 3
1226: PUSH
1227: FOR_TO
1228: IFFALSE 1312
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1230: LD_ADDR_VAR 0 5
1234: PUSH
1235: LD_EXP 1
1239: PPUSH
1240: LD_VAR 0 3
1244: PUSH
1245: LD_VAR 0 2
1249: ARRAY
1250: PUSH
1251: LD_INT 1
1253: ARRAY
1254: PPUSH
1255: LD_VAR 0 3
1259: PUSH
1260: LD_VAR 0 2
1264: ARRAY
1265: PUSH
1266: LD_INT 2
1268: ARRAY
1269: PPUSH
1270: CALL_OW 297
1274: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1275: LD_VAR 0 4
1279: PUSH
1280: LD_INT 1
1282: ARRAY
1283: PUSH
1284: LD_VAR 0 5
1288: GREATER
1289: IFFALSE 1310
// dist := [ tdist , i ] ;
1291: LD_ADDR_VAR 0 4
1295: PUSH
1296: LD_VAR 0 5
1300: PUSH
1301: LD_VAR 0 2
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: ST_TO_ADDR
// end ;
1310: GO 1227
1312: POP
1313: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1314: LD_EXP 1
1318: PPUSH
1319: LD_VAR 0 3
1323: PUSH
1324: LD_VAR 0 4
1328: PUSH
1329: LD_INT 2
1331: ARRAY
1332: ARRAY
1333: PUSH
1334: LD_INT 1
1336: ARRAY
1337: PPUSH
1338: LD_VAR 0 3
1342: PUSH
1343: LD_VAR 0 4
1347: PUSH
1348: LD_INT 2
1350: ARRAY
1351: ARRAY
1352: PUSH
1353: LD_INT 2
1355: ARRAY
1356: PPUSH
1357: CALL_OW 111
// wait ( 0 0$3 ) ;
1361: LD_INT 105
1363: PPUSH
1364: CALL_OW 67
// InGameOff ;
1368: CALL_OW 9
// end ;
1372: PPOPN 5
1374: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1375: LD_EXP 1
1379: PPUSH
1380: LD_INT 14
1382: PPUSH
1383: CALL_OW 296
1387: PUSH
1388: LD_INT 40
1390: GREATER
1391: PUSH
1392: LD_EXP 1
1396: PPUSH
1397: CALL_OW 316
1401: AND
1402: PUSH
1403: LD_EXP 22
1407: NOT
1408: AND
1409: IFFALSE 1426
1411: GO 1413
1413: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1414: LD_EXP 5
1418: PPUSH
1419: LD_STRING DK-idle-1
1421: PPUSH
1422: CALL_OW 88
// end ;
1426: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1427: LD_INT 2
1429: PPUSH
1430: LD_INT 59
1432: PPUSH
1433: LD_INT 47
1435: PPUSH
1436: CALL_OW 293
1440: PUSH
1441: LD_EXP 22
1445: NOT
1446: AND
1447: IFFALSE 1604
1449: GO 1451
1451: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1452: LD_INT 59
1454: PPUSH
1455: LD_INT 47
1457: PPUSH
1458: LD_INT 2
1460: PPUSH
1461: LD_INT 10
1463: NEG
1464: PPUSH
1465: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1469: LD_INT 59
1471: PPUSH
1472: LD_INT 47
1474: PPUSH
1475: CALL_OW 86
// goWithHeike := false ;
1479: LD_ADDR_EXP 18
1483: PUSH
1484: LD_INT 0
1486: ST_TO_ADDR
// baseSpotted := true ;
1487: LD_ADDR_EXP 19
1491: PUSH
1492: LD_INT 1
1494: ST_TO_ADDR
// InGameOn ;
1495: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1499: LD_EXP 1
1503: PUSH
1504: LD_EXP 5
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: PPUSH
1513: LD_INT 54
1515: PPUSH
1516: LD_INT 45
1518: PPUSH
1519: CALL_OW 111
// wait ( 0 0$1 ) ;
1523: LD_INT 35
1525: PPUSH
1526: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1530: LD_EXP 1
1534: PUSH
1535: LD_EXP 5
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: LD_INT 59
1546: PPUSH
1547: LD_INT 47
1549: PPUSH
1550: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1554: LD_EXP 1
1558: PPUSH
1559: LD_STRING DH-base-1
1561: PPUSH
1562: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1566: LD_EXP 5
1570: PPUSH
1571: LD_STRING DK-base-1
1573: PPUSH
1574: CALL_OW 88
// InGameOff ;
1578: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1582: LD_ADDR_EXP 17
1586: PUSH
1587: LD_EXP 17
1591: PUSH
1592: LD_INT 1
1594: PLUS
1595: ST_TO_ADDR
// goWithHeike := true ;
1596: LD_ADDR_EXP 18
1600: PUSH
1601: LD_INT 1
1603: ST_TO_ADDR
// end ;
1604: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1605: LD_INT 2
1607: PPUSH
1608: LD_EXP 8
1612: PPUSH
1613: CALL_OW 292
1617: PUSH
1618: LD_EXP 22
1622: NOT
1623: AND
1624: IFFALSE 2966
1626: GO 1628
1628: DISABLE
1629: LD_INT 0
1631: PPUSH
1632: PPUSH
1633: PPUSH
1634: PPUSH
// begin meetingActive := false ;
1635: LD_ADDR_EXP 21
1639: PUSH
1640: LD_INT 0
1642: ST_TO_ADDR
// goWithHeike := false ;
1643: LD_ADDR_EXP 18
1647: PUSH
1648: LD_INT 0
1650: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1651: LD_ADDR_VAR 0 2
1655: PUSH
1656: LD_INT 6
1658: PPUSH
1659: LD_INT 0
1661: PPUSH
1662: CALL_OW 517
1666: ST_TO_ADDR
// for i := 1 to 4 do
1667: LD_ADDR_VAR 0 1
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_INT 4
1679: PUSH
1680: FOR_TO
1681: IFFALSE 1748
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1683: LD_EXP 15
1687: PUSH
1688: LD_VAR 0 1
1692: ARRAY
1693: PPUSH
1694: LD_VAR 0 2
1698: PUSH
1699: LD_INT 1
1701: ARRAY
1702: PUSH
1703: LD_VAR 0 1
1707: ARRAY
1708: PPUSH
1709: LD_VAR 0 2
1713: PUSH
1714: LD_INT 2
1716: ARRAY
1717: PUSH
1718: LD_VAR 0 1
1722: ARRAY
1723: PPUSH
1724: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1728: LD_EXP 15
1732: PUSH
1733: LD_VAR 0 1
1737: ARRAY
1738: PPUSH
1739: LD_INT 14
1741: PPUSH
1742: CALL_OW 179
// end ;
1746: GO 1680
1748: POP
1749: POP
// InGameOn ;
1750: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1754: LD_EXP 8
1758: PPUSH
1759: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1763: LD_EXP 1
1767: PPUSH
1768: LD_EXP 8
1772: PPUSH
1773: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1777: LD_EXP 5
1781: PPUSH
1782: LD_EXP 1
1786: PPUSH
1787: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1791: LD_INT 10
1793: PPUSH
1794: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1798: LD_EXP 1
1802: PPUSH
1803: LD_EXP 8
1807: PPUSH
1808: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1812: LD_EXP 5
1816: PPUSH
1817: LD_EXP 1
1821: PPUSH
1822: CALL_OW 250
1826: PPUSH
1827: LD_INT 5
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL_OW 272
1837: PPUSH
1838: LD_EXP 1
1842: PPUSH
1843: CALL_OW 251
1847: PPUSH
1848: LD_INT 5
1850: PPUSH
1851: LD_INT 1
1853: PPUSH
1854: CALL_OW 273
1858: PPUSH
1859: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1863: LD_EXP 1
1867: PPUSH
1868: LD_EXP 8
1872: PPUSH
1873: CALL_OW 296
1877: PUSH
1878: LD_INT 5
1880: LESS
1881: PUSH
1882: LD_EXP 5
1886: PPUSH
1887: LD_EXP 8
1891: PPUSH
1892: CALL_OW 296
1896: PUSH
1897: LD_INT 6
1899: LESS
1900: AND
1901: IFFALSE 1791
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1903: LD_EXP 1
1907: PUSH
1908: LD_EXP 5
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PPUSH
1917: LD_EXP 8
1921: PPUSH
1922: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1926: LD_EXP 8
1930: PUSH
1931: LD_EXP 4
1935: PUSH
1936: LD_EXP 9
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: LIST
1945: PPUSH
1946: LD_EXP 1
1950: PPUSH
1951: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1955: LD_INT 7
1957: PPUSH
1958: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1962: LD_EXP 8
1966: PPUSH
1967: LD_STRING DKu-Kurt-1
1969: PPUSH
1970: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1974: LD_EXP 5
1978: PPUSH
1979: LD_STRING DK-Kurt-1
1981: PPUSH
1982: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1986: LD_EXP 8
1990: PPUSH
1991: LD_STRING DKu-Kurt-2
1993: PPUSH
1994: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1998: LD_INT 7
2000: PPUSH
2001: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
2005: LD_EXP 1
2009: PPUSH
2010: LD_STRING DH-Kurt-1
2012: PPUSH
2013: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
2017: LD_EXP 8
2021: PPUSH
2022: LD_STRING DKu-Kurt-3
2024: PPUSH
2025: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
2029: LD_EXP 5
2033: PPUSH
2034: LD_STRING DK-Kurt-3
2036: PPUSH
2037: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
2041: LD_EXP 9
2045: PPUSH
2046: LD_STRING DHa-Kurt-3
2048: PPUSH
2049: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
2053: LD_EXP 4
2057: PPUSH
2058: LD_STRING DO-Kurt-3
2060: PPUSH
2061: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
2065: LD_ADDR_VAR 0 3
2069: PUSH
2070: LD_EXP 8
2074: PUSH
2075: LD_EXP 4
2079: PUSH
2080: LD_EXP 9
2084: PUSH
2085: LD_EXP 5
2089: PUSH
2090: LD_EXP 1
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: LIST
2100: LIST
2101: PUSH
2102: LD_EXP 16
2106: UNION
2107: ST_TO_ADDR
// for i = 1 to tmp2 do
2108: LD_ADDR_VAR 0 1
2112: PUSH
2113: DOUBLE
2114: LD_INT 1
2116: DEC
2117: ST_TO_ADDR
2118: LD_VAR 0 3
2122: PUSH
2123: FOR_TO
2124: IFFALSE 2199
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
2126: LD_VAR 0 3
2130: PUSH
2131: LD_VAR 0 1
2135: ARRAY
2136: PPUSH
2137: LD_VAR 0 2
2141: PUSH
2142: LD_INT 1
2144: ARRAY
2145: PUSH
2146: LD_VAR 0 1
2150: PUSH
2151: LD_INT 4
2153: PLUS
2154: ARRAY
2155: PPUSH
2156: LD_VAR 0 2
2160: PUSH
2161: LD_INT 2
2163: ARRAY
2164: PUSH
2165: LD_VAR 0 1
2169: PUSH
2170: LD_INT 4
2172: PLUS
2173: ARRAY
2174: PPUSH
2175: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2179: LD_VAR 0 3
2183: PUSH
2184: LD_VAR 0 1
2188: ARRAY
2189: PPUSH
2190: LD_INT 14
2192: PPUSH
2193: CALL_OW 179
// end ;
2197: GO 2123
2199: POP
2200: POP
// wait ( 0 0$2 ) ;
2201: LD_INT 70
2203: PPUSH
2204: CALL_OW 67
// CenterOnUnits ( eon ) ;
2208: LD_INT 14
2210: PPUSH
2211: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2215: LD_INT 90
2217: PPUSH
2218: LD_INT 43
2220: PPUSH
2221: LD_INT 2
2223: PPUSH
2224: LD_INT 21
2226: NEG
2227: PPUSH
2228: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2232: LD_EXP 2
2236: PPUSH
2237: LD_INT 84
2239: PPUSH
2240: LD_INT 36
2242: PPUSH
2243: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2247: LD_EXP 2
2251: PPUSH
2252: LD_INT 14
2254: PPUSH
2255: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2259: LD_EXP 11
2263: PPUSH
2264: LD_INT 85
2266: PPUSH
2267: LD_INT 36
2269: PPUSH
2270: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2274: LD_EXP 11
2278: PPUSH
2279: LD_INT 14
2281: PPUSH
2282: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2286: LD_EXP 10
2290: PPUSH
2291: LD_INT 86
2293: PPUSH
2294: LD_INT 36
2296: PPUSH
2297: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2301: LD_EXP 10
2305: PPUSH
2306: LD_INT 14
2308: PPUSH
2309: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2313: LD_EXP 7
2317: PPUSH
2318: LD_INT 87
2320: PPUSH
2321: LD_INT 36
2323: PPUSH
2324: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2328: LD_EXP 7
2332: PPUSH
2333: LD_INT 14
2335: PPUSH
2336: CALL_OW 179
// wait ( 0 0$3 ) ;
2340: LD_INT 105
2342: PPUSH
2343: CALL_OW 67
// p := 0 ;
2347: LD_ADDR_VAR 0 4
2351: PUSH
2352: LD_INT 0
2354: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2355: LD_INT 35
2357: PPUSH
2358: CALL_OW 67
// p := p + 1 ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_VAR 0 4
2371: PUSH
2372: LD_INT 1
2374: PLUS
2375: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2376: LD_EXP 1
2380: PPUSH
2381: LD_INT 6
2383: PPUSH
2384: CALL_OW 308
2388: PUSH
2389: LD_VAR 0 4
2393: PUSH
2394: LD_INT 10
2396: GREATER
2397: OR
2398: IFFALSE 2355
// heikeNearbyEon := true ;
2400: LD_ADDR_EXP 20
2404: PUSH
2405: LD_INT 1
2407: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2408: LD_EXP 6
2412: PPUSH
2413: LD_INT 88
2415: PPUSH
2416: LD_INT 37
2418: PPUSH
2419: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2423: LD_EXP 6
2427: PPUSH
2428: LD_EXP 13
2432: PUSH
2433: LD_INT 1
2435: ARRAY
2436: PPUSH
2437: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2441: LD_EXP 13
2445: PUSH
2446: LD_INT 1
2448: ARRAY
2449: PPUSH
2450: LD_INT 89
2452: PPUSH
2453: LD_INT 37
2455: PPUSH
2456: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2460: LD_EXP 13
2464: PUSH
2465: LD_INT 2
2467: ARRAY
2468: PPUSH
2469: LD_INT 91
2471: PPUSH
2472: LD_INT 39
2474: PPUSH
2475: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2479: LD_EXP 13
2483: PPUSH
2484: LD_EXP 11
2488: PPUSH
2489: CALL_OW 179
// wait ( 0 0$1 ) ;
2493: LD_INT 35
2495: PPUSH
2496: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2500: LD_EXP 13
2504: PUSH
2505: LD_INT 1
2507: ARRAY
2508: PPUSH
2509: LD_STRING DS-eon-1
2511: PPUSH
2512: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2516: LD_EXP 6
2520: PPUSH
2521: LD_STRING DSh-eon-1
2523: PPUSH
2524: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2528: LD_EXP 13
2532: PUSH
2533: LD_INT 1
2535: ARRAY
2536: PPUSH
2537: LD_STRING DS-eon-2
2539: PPUSH
2540: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2544: LD_EXP 6
2548: PPUSH
2549: LD_STRING DSh-eon-1a
2551: PPUSH
2552: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2556: LD_EXP 13
2560: PUSH
2561: LD_INT 1
2563: ARRAY
2564: PPUSH
2565: LD_INT 92
2567: PPUSH
2568: LD_INT 43
2570: PPUSH
2571: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2575: LD_EXP 13
2579: PUSH
2580: LD_INT 1
2582: ARRAY
2583: PPUSH
2584: LD_INT 14
2586: PPUSH
2587: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2591: LD_EXP 13
2595: PUSH
2596: LD_INT 2
2598: ARRAY
2599: PPUSH
2600: LD_INT 93
2602: PPUSH
2603: LD_INT 41
2605: PPUSH
2606: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2610: LD_EXP 13
2614: PUSH
2615: LD_INT 2
2617: ARRAY
2618: PPUSH
2619: LD_INT 93
2621: PPUSH
2622: LD_INT 40
2624: PPUSH
2625: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2629: LD_EXP 6
2633: PPUSH
2634: LD_INT 88
2636: PPUSH
2637: LD_INT 41
2639: PPUSH
2640: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2644: LD_EXP 6
2648: PPUSH
2649: LD_INT 87
2651: PPUSH
2652: LD_INT 41
2654: PPUSH
2655: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2659: LD_INT 35
2661: PPUSH
2662: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2666: LD_EXP 6
2670: PPUSH
2671: LD_INT 88
2673: PPUSH
2674: LD_INT 41
2676: PPUSH
2677: CALL_OW 307
2681: IFFALSE 2659
// wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2690: LD_EXP 6
2694: PPUSH
2695: LD_STRING DSh-eon-2
2697: PPUSH
2698: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2702: LD_EXP 11
2706: PPUSH
2707: LD_INT 87
2709: PPUSH
2710: LD_INT 40
2712: PPUSH
2713: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2717: LD_EXP 11
2721: PPUSH
2722: LD_INT 86
2724: PPUSH
2725: LD_INT 40
2727: PPUSH
2728: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2732: LD_INT 35
2734: PPUSH
2735: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2739: LD_EXP 11
2743: PPUSH
2744: LD_INT 87
2746: PPUSH
2747: LD_INT 40
2749: PPUSH
2750: CALL_OW 307
2754: IFFALSE 2732
// Say ( Shariff , DShar-eon-3 ) ;
2756: LD_EXP 11
2760: PPUSH
2761: LD_STRING DShar-eon-3
2763: PPUSH
2764: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2768: LD_INT 10
2770: PPUSH
2771: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2775: LD_EXP 5
2779: PPUSH
2780: LD_EXP 1
2784: PPUSH
2785: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2789: LD_EXP 11
2793: PPUSH
2794: LD_STRING DShar-eon-4
2796: PPUSH
2797: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2801: LD_EXP 5
2805: PPUSH
2806: LD_STRING DK-eon-4
2808: PPUSH
2809: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2813: LD_EXP 5
2817: PPUSH
2818: LD_INT 14
2820: PPUSH
2821: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2825: LD_INT 35
2827: PPUSH
2828: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2832: LD_EXP 5
2836: PPUSH
2837: CALL_OW 305
2841: NOT
2842: IFFALSE 2825
// ComTurnUnit ( Shariff , Heike ) ;
2844: LD_EXP 11
2848: PPUSH
2849: LD_EXP 1
2853: PPUSH
2854: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2858: LD_EXP 11
2862: PPUSH
2863: LD_STRING DShar-eon-5
2865: PPUSH
2866: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2870: LD_EXP 1
2874: PPUSH
2875: LD_INT 91
2877: PPUSH
2878: LD_INT 44
2880: PPUSH
2881: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2885: LD_EXP 1
2889: PPUSH
2890: LD_INT 14
2892: PPUSH
2893: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2897: LD_INT 35
2899: PPUSH
2900: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2904: LD_EXP 1
2908: PPUSH
2909: LD_INT 91
2911: PPUSH
2912: LD_INT 44
2914: PPUSH
2915: CALL_OW 307
2919: IFFALSE 2897
// Say ( Heike , DH-eon-5 ) ;
2921: LD_EXP 1
2925: PPUSH
2926: LD_STRING DH-eon-5
2928: PPUSH
2929: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2933: LD_EXP 1
2937: PPUSH
2938: LD_INT 14
2940: PPUSH
2941: CALL_OW 120
// wait ( 0 0$2 ) ;
2945: LD_INT 70
2947: PPUSH
2948: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2952: LD_INT 1
2954: PPUSH
2955: LD_STRING %_cont
2957: PPUSH
2958: CALL_OW 340
// InGameOff ;
2962: CALL_OW 9
// end ;
2966: PPOPN 4
2968: END
// every 3 trigger IsSelected ( Kaia ) do
2969: LD_EXP 5
2973: PPUSH
2974: CALL_OW 306
2978: IFFALSE 2995
2980: GO 2982
2982: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2983: LD_EXP 5
2987: PPUSH
2988: LD_INT 42
2990: PPUSH
2991: CALL_OW 582
2995: END
// export function PrepareHeikeGroup ; begin
2996: LD_INT 0
2998: PPUSH
// uc_side := 2 ;
2999: LD_ADDR_OWVAR 20
3003: PUSH
3004: LD_INT 2
3006: ST_TO_ADDR
// uc_nation := 2 ;
3007: LD_ADDR_OWVAR 21
3011: PUSH
3012: LD_INT 2
3014: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
3015: LD_ADDR_EXP 1
3019: PUSH
3020: LD_STRING Heike
3022: PPUSH
3023: CALL_OW 25
3027: ST_TO_ADDR
// uc_side := 5 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 5
3035: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
3036: LD_ADDR_EXP 5
3040: PUSH
3041: LD_STRING Kaia
3043: PPUSH
3044: CALL_OW 25
3048: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
3049: LD_EXP 1
3053: PPUSH
3054: LD_INT 3
3056: PPUSH
3057: LD_INT 0
3059: PPUSH
3060: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
3064: LD_EXP 5
3068: PPUSH
3069: LD_INT 3
3071: PPUSH
3072: LD_INT 0
3074: PPUSH
3075: CALL_OW 49
// end ;
3079: LD_VAR 0 1
3083: RET
// export function PrepareSheikGroup ; var un , i ; begin
3084: LD_INT 0
3086: PPUSH
3087: PPUSH
3088: PPUSH
// uc_side := 5 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 5
3096: ST_TO_ADDR
// uc_nation := 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
3105: LD_ADDR_EXP 10
3109: PUSH
3110: LD_STRING Ali
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
3118: LD_ADDR_EXP 11
3122: PUSH
3123: LD_STRING Abdul
3125: PPUSH
3126: CALL_OW 25
3130: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
3131: LD_ADDR_EXP 2
3135: PUSH
3136: LD_STRING Omar
3138: PPUSH
3139: CALL_OW 25
3143: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
3144: LD_ADDR_EXP 7
3148: PUSH
3149: LD_STRING Mahtab
3151: PPUSH
3152: CALL_OW 25
3156: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
3157: LD_ADDR_EXP 6
3161: PUSH
3162: LD_STRING Shahrzad
3164: PPUSH
3165: CALL_OW 25
3169: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3170: LD_EXP 10
3174: PPUSH
3175: LD_INT 85
3177: PPUSH
3178: LD_INT 37
3180: PPUSH
3181: LD_INT 0
3183: PPUSH
3184: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3188: LD_EXP 11
3192: PPUSH
3193: LD_INT 87
3195: PPUSH
3196: LD_INT 37
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3206: LD_EXP 2
3210: PPUSH
3211: LD_INT 85
3213: PPUSH
3214: LD_INT 35
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3224: LD_EXP 7
3228: PPUSH
3229: LD_INT 86
3231: PPUSH
3232: LD_INT 39
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3242: LD_EXP 6
3246: PPUSH
3247: LD_INT 88
3249: PPUSH
3250: LD_INT 39
3252: PPUSH
3253: LD_INT 0
3255: PPUSH
3256: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3260: LD_EXP 10
3264: PPUSH
3265: LD_EXP 11
3269: PPUSH
3270: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3274: LD_EXP 11
3278: PPUSH
3279: LD_EXP 10
3283: PPUSH
3284: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3288: LD_EXP 2
3292: PPUSH
3293: LD_EXP 11
3297: PPUSH
3298: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3302: LD_EXP 7
3306: PUSH
3307: LD_EXP 6
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PPUSH
3316: LD_EXP 11
3320: PPUSH
3321: CALL_OW 119
// for i := 1 to 2 do
3325: LD_ADDR_VAR 0 3
3329: PUSH
3330: DOUBLE
3331: LD_INT 1
3333: DEC
3334: ST_TO_ADDR
3335: LD_INT 2
3337: PUSH
3338: FOR_TO
3339: IFFALSE 3425
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3341: LD_INT 2
3343: PPUSH
3344: LD_INT 4
3346: PPUSH
3347: LD_INT 6
3349: PPUSH
3350: CALL_OW 380
// un := CreateHuman ;
3354: LD_ADDR_VAR 0 2
3358: PUSH
3359: CALL_OW 44
3363: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3364: LD_VAR 0 2
3368: PPUSH
3369: LD_INT 90
3371: PPUSH
3372: LD_INT 44
3374: PPUSH
3375: LD_INT 3
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3385: LD_VAR 0 2
3389: PPUSH
3390: LD_INT 91
3392: PPUSH
3393: LD_INT 43
3395: PPUSH
3396: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3400: LD_ADDR_EXP 13
3404: PUSH
3405: LD_EXP 13
3409: PPUSH
3410: LD_INT 1
3412: PPUSH
3413: LD_VAR 0 2
3417: PPUSH
3418: CALL_OW 2
3422: ST_TO_ADDR
// end ;
3423: GO 3338
3425: POP
3426: POP
// scientists := scientists diff 0 ;
3427: LD_ADDR_EXP 13
3431: PUSH
3432: LD_EXP 13
3436: PUSH
3437: LD_INT 0
3439: DIFF
3440: ST_TO_ADDR
// end ;
3441: LD_VAR 0 1
3445: RET
// export function PrepareKurtGroup ; var i ; begin
3446: LD_INT 0
3448: PPUSH
3449: PPUSH
// uc_side := 5 ;
3450: LD_ADDR_OWVAR 20
3454: PUSH
3455: LD_INT 5
3457: ST_TO_ADDR
// uc_nation := 2 ;
3458: LD_ADDR_OWVAR 21
3462: PUSH
3463: LD_INT 2
3465: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3466: LD_ADDR_EXP 8
3470: PUSH
3471: LD_STRING Kurt
3473: PPUSH
3474: CALL_OW 25
3478: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3479: LD_ADDR_EXP 4
3483: PUSH
3484: LD_STRING Olaf
3486: PPUSH
3487: CALL_OW 25
3491: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3492: LD_ADDR_EXP 9
3496: PUSH
3497: LD_STRING Hans
3499: PPUSH
3500: CALL_OW 25
3504: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3505: LD_ADDR_VAR 0 2
3509: PUSH
3510: LD_EXP 8
3514: PUSH
3515: LD_EXP 9
3519: PUSH
3520: LD_EXP 4
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: LIST
3529: PUSH
3530: FOR_IN
3531: IFFALSE 3550
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3533: LD_VAR 0 2
3537: PPUSH
3538: LD_INT 10
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
3548: GO 3530
3550: POP
3551: POP
// ComTurnUnit ( Kurt , Hans ) ;
3552: LD_EXP 8
3556: PPUSH
3557: LD_EXP 9
3561: PPUSH
3562: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3566: LD_EXP 4
3570: PPUSH
3571: LD_EXP 9
3575: PPUSH
3576: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3580: LD_EXP 9
3584: PPUSH
3585: LD_EXP 4
3589: PPUSH
3590: CALL_OW 119
// end ;
3594: LD_VAR 0 1
3598: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3599: LD_INT 0
3601: PPUSH
3602: PPUSH
3603: PPUSH
3604: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3605: LD_ADDR_VAR 0 2
3609: PUSH
3610: LD_INT 21
3612: PUSH
3613: LD_INT 3
3615: PUSH
3616: EMPTY
3617: LIST
3618: LIST
3619: PPUSH
3620: CALL_OW 69
3624: PUSH
3625: LD_INT 14
3627: DIFF
3628: PUSH
3629: FOR_IN
3630: IFFALSE 3710
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3632: LD_VAR 0 2
3636: PPUSH
3637: CALL_OW 266
3641: PUSH
3642: LD_INT 6
3644: PUSH
3645: LD_INT 31
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: IN
3652: IFFALSE 3676
// SetLives ( i , rand ( 500 , 600 ) ) else
3654: LD_VAR 0 2
3658: PPUSH
3659: LD_INT 500
3661: PPUSH
3662: LD_INT 600
3664: PPUSH
3665: CALL_OW 12
3669: PPUSH
3670: CALL_OW 234
3674: GO 3696
// SetLives ( i , rand ( 300 , 499 ) ) ;
3676: LD_VAR 0 2
3680: PPUSH
3681: LD_INT 300
3683: PPUSH
3684: LD_INT 499
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: CALL_OW 234
// SetSide ( i , 5 ) ;
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_INT 5
3703: PPUSH
3704: CALL_OW 235
// end ;
3708: GO 3629
3710: POP
3711: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: LD_INT 9
3719: PPUSH
3720: LD_INT 0
3722: PPUSH
3723: CALL_OW 517
3727: ST_TO_ADDR
// uc_side := 4 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 4
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_VAR 0 4
3758: PUSH
3759: LD_INT 1
3761: ARRAY
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3840
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 1
3771: PUSH
3772: LD_INT 1
3774: PUSH
3775: LD_INT 4
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 3
3790: MOD
3791: PUSH
3792: LD_INT 1
3794: PLUS
3795: ARRAY
3796: PPUSH
3797: LD_INT 0
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 3
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3814: LD_VAR 0 3
3818: PPUSH
3819: LD_INT 9
3821: PPUSH
3822: LD_INT 0
3824: PPUSH
3825: CALL_OW 49
// KillUnit ( un ) ;
3829: LD_VAR 0 3
3833: PPUSH
3834: CALL_OW 66
// end ;
3838: GO 3763
3840: POP
3841: POP
// end ;
3842: LD_VAR 0 1
3846: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3847: LD_INT 0
3849: PPUSH
3850: PPUSH
3851: PPUSH
3852: PPUSH
3853: PPUSH
3854: PPUSH
3855: PPUSH
// uc_side := 5 ;
3856: LD_ADDR_OWVAR 20
3860: PUSH
3861: LD_INT 5
3863: ST_TO_ADDR
// uc_nation := 2 ;
3864: LD_ADDR_OWVAR 21
3868: PUSH
3869: LD_INT 2
3871: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3872: LD_ADDR_VAR 0 6
3876: PUSH
3877: LD_INT 2
3879: PUSH
3880: LD_INT 4
3882: PUSH
3883: LD_INT 5
3885: PUSH
3886: LD_INT 14
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: LIST
3893: LIST
3894: ST_TO_ADDR
// InitHc ;
3895: CALL_OW 19
// for i in area do
3899: LD_ADDR_VAR 0 2
3903: PUSH
3904: LD_VAR 0 6
3908: PUSH
3909: FOR_IN
3910: IFFALSE 4074
// begin tmp := AreaToList ( i , 0 ) ;
3912: LD_ADDR_VAR 0 5
3916: PUSH
3917: LD_VAR 0 2
3921: PPUSH
3922: LD_INT 0
3924: PPUSH
3925: CALL_OW 517
3929: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3930: LD_ADDR_VAR 0 3
3934: PUSH
3935: DOUBLE
3936: LD_INT 1
3938: DEC
3939: ST_TO_ADDR
3940: LD_VAR 0 5
3944: PUSH
3945: LD_INT 1
3947: ARRAY
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4070
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 1
3957: PPUSH
3958: LD_INT 3
3960: PPUSH
3961: CALL_OW 380
// un := CreateHuman ;
3965: LD_ADDR_VAR 0 7
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// if i = spawnBaseArea3 then
3975: LD_VAR 0 2
3979: PUSH
3980: LD_INT 5
3982: EQUAL
3983: IFFALSE 4001
// eonGuards := eonGuards ^ un ;
3985: LD_ADDR_EXP 14
3989: PUSH
3990: LD_EXP 14
3994: PUSH
3995: LD_VAR 0 7
3999: ADD
4000: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
4001: LD_VAR 0 7
4005: PPUSH
4006: LD_VAR 0 2
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// ComHold ( un ) ;
4018: LD_VAR 0 7
4022: PPUSH
4023: CALL_OW 140
// if i = spawnBaseArea4 then
4027: LD_VAR 0 2
4031: PUSH
4032: LD_INT 14
4034: EQUAL
4035: IFFALSE 4068
// begin firstGroup := firstGroup ^ un ;
4037: LD_ADDR_EXP 15
4041: PUSH
4042: LD_EXP 15
4046: PUSH
4047: LD_VAR 0 7
4051: ADD
4052: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
4053: LD_VAR 0 7
4057: PPUSH
4058: LD_INT 108
4060: PPUSH
4061: LD_INT 47
4063: PPUSH
4064: CALL_OW 118
// end ; end ;
4068: GO 3949
4070: POP
4071: POP
// end ;
4072: GO 3909
4074: POP
4075: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 30
4088: PUSH
4089: LD_INT 31
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: FOR_TO
4102: IFFALSE 4196
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
4104: LD_ADDR_VAR 0 4
4108: PUSH
4109: LD_INT 30
4111: PUSH
4112: LD_INT 31
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: PPUSH
4119: CALL_OW 69
4123: PUSH
4124: LD_VAR 0 2
4128: ARRAY
4129: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
4130: LD_INT 1
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 3
4138: PPUSH
4139: CALL_OW 380
// un := CreateHuman ;
4143: LD_ADDR_VAR 0 7
4147: PUSH
4148: CALL_OW 44
4152: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
4153: LD_VAR 0 7
4157: PPUSH
4158: LD_VAR 0 4
4162: PPUSH
4163: CALL_OW 254
4167: PUSH
4168: LD_INT 3
4170: PLUS
4171: PUSH
4172: LD_INT 6
4174: MOD
4175: PPUSH
4176: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 4
4189: PPUSH
4190: CALL_OW 52
// end ;
4194: GO 4101
4196: POP
4197: POP
// PrepareSoldier ( sex_male , 3 ) ;
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 3
4203: PPUSH
4204: CALL_OW 381
// un := CreateHuman ;
4208: LD_ADDR_VAR 0 7
4212: PUSH
4213: CALL_OW 44
4217: ST_TO_ADDR
// PlaceUnitXYD ( un , 71 , 84 , 3 , false ) ;
4218: LD_VAR 0 7
4222: PPUSH
4223: LD_INT 71
4225: PPUSH
4226: LD_INT 84
4228: PPUSH
4229: LD_INT 3
4231: PPUSH
4232: LD_INT 0
4234: PPUSH
4235: CALL 64245 0 5
// ComHold ( un ) ;
4239: LD_VAR 0 7
4243: PPUSH
4244: CALL_OW 140
// un := CreateHuman ;
4248: LD_ADDR_VAR 0 7
4252: PUSH
4253: CALL_OW 44
4257: ST_TO_ADDR
// PlaceUnitXYD ( un , 35 , 35 , 3 , false ) ;
4258: LD_VAR 0 7
4262: PPUSH
4263: LD_INT 35
4265: PPUSH
4266: LD_INT 35
4268: PPUSH
4269: LD_INT 3
4271: PPUSH
4272: LD_INT 0
4274: PPUSH
4275: CALL 64245 0 5
// ComHold ( un ) ;
4279: LD_VAR 0 7
4283: PPUSH
4284: CALL_OW 140
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4293: LD_VAR 0 1
4297: PUSH
4298: LD_INT 2
4300: EQUAL
4301: PUSH
4302: LD_VAR 0 2
4306: PUSH
4307: LD_INT 5
4309: EQUAL
4310: AND
4311: IFFALSE 4337
// begin kaiaAttacked := true ;
4313: LD_ADDR_EXP 22
4317: PUSH
4318: LD_INT 1
4320: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4321: LD_INT 2
4323: PPUSH
4324: LD_INT 5
4326: PPUSH
4327: LD_INT 2
4329: PPUSH
4330: LD_INT 1
4332: PPUSH
4333: CALL_OW 80
// end ; end ;
4337: PPOPN 2
4339: END
// every 0 0$1 trigger scientists do var i ;
4340: LD_EXP 13
4344: IFFALSE 4552
4346: GO 4348
4348: DISABLE
4349: LD_INT 0
4351: PPUSH
// begin repeat for i in scientists do
4352: LD_ADDR_VAR 0 1
4356: PUSH
4357: LD_EXP 13
4361: PUSH
4362: FOR_IN
4363: IFFALSE 4537
// begin wait ( 0 0$1 ) ;
4365: LD_INT 35
4367: PPUSH
4368: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4372: LD_VAR 0 1
4376: PPUSH
4377: LD_INT 11
4379: PUSH
4380: LD_INT 13
4382: PUSH
4383: EMPTY
4384: LIST
4385: LIST
4386: PUSH
4387: LD_VAR 0 1
4391: PUSH
4392: LD_INT 2
4394: MOD
4395: PUSH
4396: LD_INT 1
4398: PLUS
4399: ARRAY
4400: PPUSH
4401: CALL_OW 308
4405: NOT
4406: IFFALSE 4441
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4408: LD_VAR 0 1
4412: PPUSH
4413: LD_INT 11
4415: PUSH
4416: LD_INT 13
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_VAR 0 1
4427: PUSH
4428: LD_INT 2
4430: MOD
4431: PUSH
4432: LD_INT 1
4434: PLUS
4435: ARRAY
4436: PPUSH
4437: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4441: LD_VAR 0 1
4445: PPUSH
4446: LD_INT 14
4448: PPUSH
4449: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4453: LD_VAR 0 1
4457: PPUSH
4458: LD_INT 70
4460: PPUSH
4461: CALL_OW 202
// if rand ( 0 , 1 ) then
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 12
4475: IFFALSE 4489
// AddComAnim ( i , 15 ) ;
4477: LD_VAR 0 1
4481: PPUSH
4482: LD_INT 15
4484: PPUSH
4485: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4489: LD_VAR 0 1
4493: PPUSH
4494: LD_INT 35
4496: PPUSH
4497: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4501: LD_VAR 0 1
4505: PPUSH
4506: LD_INT 12
4508: PPUSH
4509: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4513: LD_VAR 0 1
4517: PPUSH
4518: LD_INT 93
4520: PPUSH
4521: LD_INT 40
4523: PPUSH
4524: CALL_OW 178
// wait ( 0 0$1 ) ;
4528: LD_INT 35
4530: PPUSH
4531: CALL_OW 67
// end ;
4535: GO 4362
4537: POP
4538: POP
// wait ( 0 0$10 ) ;
4539: LD_INT 350
4541: PPUSH
4542: CALL_OW 67
// until heikeNearbyEon ;
4546: LD_EXP 20
4550: IFFALSE 4352
// end ; end_of_file
4552: PPOPN 1
4554: END
// every 0 0$1 do
4555: GO 4557
4557: DISABLE
// begin enable ;
4558: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4559: LD_STRING updateTimer(
4561: PUSH
4562: LD_OWVAR 1
4566: STR
4567: PUSH
4568: LD_STRING );
4570: STR
4571: PPUSH
4572: CALL_OW 559
// end ;
4576: END
// export function SOS_MapStart ( ) ; begin
4577: LD_INT 0
4579: PPUSH
// if streamModeActive then
4580: LD_EXP 23
4584: IFFALSE 4593
// DefineStreamItems ( true ) ;
4586: LD_INT 1
4588: PPUSH
4589: CALL 6247 0 1
// UpdateFactoryWaypoints ( ) ;
4593: CALL 19108 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4597: CALL 19365 0 0
// end ;
4601: LD_VAR 0 1
4605: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4606: LD_INT 0
4608: PPUSH
// if p2 = 100 then
4609: LD_VAR 0 2
4613: PUSH
4614: LD_INT 100
4616: EQUAL
4617: IFFALSE 5620
// begin if not StreamModeActive then
4619: LD_EXP 23
4623: NOT
4624: IFFALSE 4634
// StreamModeActive := true ;
4626: LD_ADDR_EXP 23
4630: PUSH
4631: LD_INT 1
4633: ST_TO_ADDR
// if p3 = 0 then
4634: LD_VAR 0 3
4638: PUSH
4639: LD_INT 0
4641: EQUAL
4642: IFFALSE 4648
// InitStreamMode ;
4644: CALL 5783 0 0
// if p3 = 1 then
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: EQUAL
4656: IFFALSE 4666
// sRocket := true ;
4658: LD_ADDR_EXP 28
4662: PUSH
4663: LD_INT 1
4665: ST_TO_ADDR
// if p3 = 2 then
4666: LD_VAR 0 3
4670: PUSH
4671: LD_INT 2
4673: EQUAL
4674: IFFALSE 4684
// sSpeed := true ;
4676: LD_ADDR_EXP 27
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// if p3 = 3 then
4684: LD_VAR 0 3
4688: PUSH
4689: LD_INT 3
4691: EQUAL
4692: IFFALSE 4702
// sEngine := true ;
4694: LD_ADDR_EXP 29
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// if p3 = 4 then
4702: LD_VAR 0 3
4706: PUSH
4707: LD_INT 4
4709: EQUAL
4710: IFFALSE 4720
// sSpec := true ;
4712: LD_ADDR_EXP 26
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// if p3 = 5 then
4720: LD_VAR 0 3
4724: PUSH
4725: LD_INT 5
4727: EQUAL
4728: IFFALSE 4738
// sLevel := true ;
4730: LD_ADDR_EXP 30
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// if p3 = 6 then
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 6
4745: EQUAL
4746: IFFALSE 4756
// sArmoury := true ;
4748: LD_ADDR_EXP 31
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// if p3 = 7 then
4756: LD_VAR 0 3
4760: PUSH
4761: LD_INT 7
4763: EQUAL
4764: IFFALSE 4774
// sRadar := true ;
4766: LD_ADDR_EXP 32
4770: PUSH
4771: LD_INT 1
4773: ST_TO_ADDR
// if p3 = 8 then
4774: LD_VAR 0 3
4778: PUSH
4779: LD_INT 8
4781: EQUAL
4782: IFFALSE 4792
// sBunker := true ;
4784: LD_ADDR_EXP 33
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// if p3 = 9 then
4792: LD_VAR 0 3
4796: PUSH
4797: LD_INT 9
4799: EQUAL
4800: IFFALSE 4810
// sHack := true ;
4802: LD_ADDR_EXP 34
4806: PUSH
4807: LD_INT 1
4809: ST_TO_ADDR
// if p3 = 10 then
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 10
4817: EQUAL
4818: IFFALSE 4828
// sFire := true ;
4820: LD_ADDR_EXP 35
4824: PUSH
4825: LD_INT 1
4827: ST_TO_ADDR
// if p3 = 11 then
4828: LD_VAR 0 3
4832: PUSH
4833: LD_INT 11
4835: EQUAL
4836: IFFALSE 4846
// sRefresh := true ;
4838: LD_ADDR_EXP 36
4842: PUSH
4843: LD_INT 1
4845: ST_TO_ADDR
// if p3 = 12 then
4846: LD_VAR 0 3
4850: PUSH
4851: LD_INT 12
4853: EQUAL
4854: IFFALSE 4864
// sExp := true ;
4856: LD_ADDR_EXP 37
4860: PUSH
4861: LD_INT 1
4863: ST_TO_ADDR
// if p3 = 13 then
4864: LD_VAR 0 3
4868: PUSH
4869: LD_INT 13
4871: EQUAL
4872: IFFALSE 4882
// sDepot := true ;
4874: LD_ADDR_EXP 38
4878: PUSH
4879: LD_INT 1
4881: ST_TO_ADDR
// if p3 = 14 then
4882: LD_VAR 0 3
4886: PUSH
4887: LD_INT 14
4889: EQUAL
4890: IFFALSE 4900
// sFlag := true ;
4892: LD_ADDR_EXP 39
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// if p3 = 15 then
4900: LD_VAR 0 3
4904: PUSH
4905: LD_INT 15
4907: EQUAL
4908: IFFALSE 4918
// sKamikadze := true ;
4910: LD_ADDR_EXP 47
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// if p3 = 16 then
4918: LD_VAR 0 3
4922: PUSH
4923: LD_INT 16
4925: EQUAL
4926: IFFALSE 4936
// sTroll := true ;
4928: LD_ADDR_EXP 48
4932: PUSH
4933: LD_INT 1
4935: ST_TO_ADDR
// if p3 = 17 then
4936: LD_VAR 0 3
4940: PUSH
4941: LD_INT 17
4943: EQUAL
4944: IFFALSE 4954
// sSlow := true ;
4946: LD_ADDR_EXP 49
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// if p3 = 18 then
4954: LD_VAR 0 3
4958: PUSH
4959: LD_INT 18
4961: EQUAL
4962: IFFALSE 4972
// sLack := true ;
4964: LD_ADDR_EXP 50
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// if p3 = 19 then
4972: LD_VAR 0 3
4976: PUSH
4977: LD_INT 19
4979: EQUAL
4980: IFFALSE 4990
// sTank := true ;
4982: LD_ADDR_EXP 52
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// if p3 = 20 then
4990: LD_VAR 0 3
4994: PUSH
4995: LD_INT 20
4997: EQUAL
4998: IFFALSE 5008
// sRemote := true ;
5000: LD_ADDR_EXP 53
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// if p3 = 21 then
5008: LD_VAR 0 3
5012: PUSH
5013: LD_INT 21
5015: EQUAL
5016: IFFALSE 5026
// sPowell := true ;
5018: LD_ADDR_EXP 54
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// if p3 = 22 then
5026: LD_VAR 0 3
5030: PUSH
5031: LD_INT 22
5033: EQUAL
5034: IFFALSE 5044
// sTeleport := true ;
5036: LD_ADDR_EXP 57
5040: PUSH
5041: LD_INT 1
5043: ST_TO_ADDR
// if p3 = 23 then
5044: LD_VAR 0 3
5048: PUSH
5049: LD_INT 23
5051: EQUAL
5052: IFFALSE 5062
// sOilTower := true ;
5054: LD_ADDR_EXP 59
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// if p3 = 24 then
5062: LD_VAR 0 3
5066: PUSH
5067: LD_INT 24
5069: EQUAL
5070: IFFALSE 5080
// sShovel := true ;
5072: LD_ADDR_EXP 60
5076: PUSH
5077: LD_INT 1
5079: ST_TO_ADDR
// if p3 = 25 then
5080: LD_VAR 0 3
5084: PUSH
5085: LD_INT 25
5087: EQUAL
5088: IFFALSE 5098
// sSheik := true ;
5090: LD_ADDR_EXP 61
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
// if p3 = 26 then
5098: LD_VAR 0 3
5102: PUSH
5103: LD_INT 26
5105: EQUAL
5106: IFFALSE 5116
// sEarthquake := true ;
5108: LD_ADDR_EXP 63
5112: PUSH
5113: LD_INT 1
5115: ST_TO_ADDR
// if p3 = 27 then
5116: LD_VAR 0 3
5120: PUSH
5121: LD_INT 27
5123: EQUAL
5124: IFFALSE 5134
// sAI := true ;
5126: LD_ADDR_EXP 64
5130: PUSH
5131: LD_INT 1
5133: ST_TO_ADDR
// if p3 = 28 then
5134: LD_VAR 0 3
5138: PUSH
5139: LD_INT 28
5141: EQUAL
5142: IFFALSE 5152
// sCargo := true ;
5144: LD_ADDR_EXP 67
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// if p3 = 29 then
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 29
5159: EQUAL
5160: IFFALSE 5170
// sDLaser := true ;
5162: LD_ADDR_EXP 68
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// if p3 = 30 then
5170: LD_VAR 0 3
5174: PUSH
5175: LD_INT 30
5177: EQUAL
5178: IFFALSE 5188
// sExchange := true ;
5180: LD_ADDR_EXP 69
5184: PUSH
5185: LD_INT 1
5187: ST_TO_ADDR
// if p3 = 31 then
5188: LD_VAR 0 3
5192: PUSH
5193: LD_INT 31
5195: EQUAL
5196: IFFALSE 5206
// sFac := true ;
5198: LD_ADDR_EXP 70
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// if p3 = 32 then
5206: LD_VAR 0 3
5210: PUSH
5211: LD_INT 32
5213: EQUAL
5214: IFFALSE 5224
// sPower := true ;
5216: LD_ADDR_EXP 71
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// if p3 = 33 then
5224: LD_VAR 0 3
5228: PUSH
5229: LD_INT 33
5231: EQUAL
5232: IFFALSE 5242
// sRandom := true ;
5234: LD_ADDR_EXP 72
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if p3 = 34 then
5242: LD_VAR 0 3
5246: PUSH
5247: LD_INT 34
5249: EQUAL
5250: IFFALSE 5260
// sShield := true ;
5252: LD_ADDR_EXP 73
5256: PUSH
5257: LD_INT 1
5259: ST_TO_ADDR
// if p3 = 35 then
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 35
5267: EQUAL
5268: IFFALSE 5278
// sTime := true ;
5270: LD_ADDR_EXP 74
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// if p3 = 36 then
5278: LD_VAR 0 3
5282: PUSH
5283: LD_INT 36
5285: EQUAL
5286: IFFALSE 5296
// sTools := true ;
5288: LD_ADDR_EXP 75
5292: PUSH
5293: LD_INT 1
5295: ST_TO_ADDR
// if p3 = 101 then
5296: LD_VAR 0 3
5300: PUSH
5301: LD_INT 101
5303: EQUAL
5304: IFFALSE 5314
// sSold := true ;
5306: LD_ADDR_EXP 40
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// if p3 = 102 then
5314: LD_VAR 0 3
5318: PUSH
5319: LD_INT 102
5321: EQUAL
5322: IFFALSE 5332
// sDiff := true ;
5324: LD_ADDR_EXP 41
5328: PUSH
5329: LD_INT 1
5331: ST_TO_ADDR
// if p3 = 103 then
5332: LD_VAR 0 3
5336: PUSH
5337: LD_INT 103
5339: EQUAL
5340: IFFALSE 5350
// sFog := true ;
5342: LD_ADDR_EXP 44
5346: PUSH
5347: LD_INT 1
5349: ST_TO_ADDR
// if p3 = 104 then
5350: LD_VAR 0 3
5354: PUSH
5355: LD_INT 104
5357: EQUAL
5358: IFFALSE 5368
// sReset := true ;
5360: LD_ADDR_EXP 45
5364: PUSH
5365: LD_INT 1
5367: ST_TO_ADDR
// if p3 = 105 then
5368: LD_VAR 0 3
5372: PUSH
5373: LD_INT 105
5375: EQUAL
5376: IFFALSE 5386
// sSun := true ;
5378: LD_ADDR_EXP 46
5382: PUSH
5383: LD_INT 1
5385: ST_TO_ADDR
// if p3 = 106 then
5386: LD_VAR 0 3
5390: PUSH
5391: LD_INT 106
5393: EQUAL
5394: IFFALSE 5404
// sTiger := true ;
5396: LD_ADDR_EXP 42
5400: PUSH
5401: LD_INT 1
5403: ST_TO_ADDR
// if p3 = 107 then
5404: LD_VAR 0 3
5408: PUSH
5409: LD_INT 107
5411: EQUAL
5412: IFFALSE 5422
// sBomb := true ;
5414: LD_ADDR_EXP 43
5418: PUSH
5419: LD_INT 1
5421: ST_TO_ADDR
// if p3 = 108 then
5422: LD_VAR 0 3
5426: PUSH
5427: LD_INT 108
5429: EQUAL
5430: IFFALSE 5440
// sWound := true ;
5432: LD_ADDR_EXP 51
5436: PUSH
5437: LD_INT 1
5439: ST_TO_ADDR
// if p3 = 109 then
5440: LD_VAR 0 3
5444: PUSH
5445: LD_INT 109
5447: EQUAL
5448: IFFALSE 5458
// sBetray := true ;
5450: LD_ADDR_EXP 55
5454: PUSH
5455: LD_INT 1
5457: ST_TO_ADDR
// if p3 = 110 then
5458: LD_VAR 0 3
5462: PUSH
5463: LD_INT 110
5465: EQUAL
5466: IFFALSE 5476
// sContamin := true ;
5468: LD_ADDR_EXP 56
5472: PUSH
5473: LD_INT 1
5475: ST_TO_ADDR
// if p3 = 111 then
5476: LD_VAR 0 3
5480: PUSH
5481: LD_INT 111
5483: EQUAL
5484: IFFALSE 5494
// sOil := true ;
5486: LD_ADDR_EXP 58
5490: PUSH
5491: LD_INT 1
5493: ST_TO_ADDR
// if p3 = 112 then
5494: LD_VAR 0 3
5498: PUSH
5499: LD_INT 112
5501: EQUAL
5502: IFFALSE 5512
// sStu := true ;
5504: LD_ADDR_EXP 62
5508: PUSH
5509: LD_INT 1
5511: ST_TO_ADDR
// if p3 = 113 then
5512: LD_VAR 0 3
5516: PUSH
5517: LD_INT 113
5519: EQUAL
5520: IFFALSE 5530
// sBazooka := true ;
5522: LD_ADDR_EXP 65
5526: PUSH
5527: LD_INT 1
5529: ST_TO_ADDR
// if p3 = 114 then
5530: LD_VAR 0 3
5534: PUSH
5535: LD_INT 114
5537: EQUAL
5538: IFFALSE 5548
// sMortar := true ;
5540: LD_ADDR_EXP 66
5544: PUSH
5545: LD_INT 1
5547: ST_TO_ADDR
// if p3 = 115 then
5548: LD_VAR 0 3
5552: PUSH
5553: LD_INT 115
5555: EQUAL
5556: IFFALSE 5566
// sRanger := true ;
5558: LD_ADDR_EXP 76
5562: PUSH
5563: LD_INT 1
5565: ST_TO_ADDR
// if p3 = 116 then
5566: LD_VAR 0 3
5570: PUSH
5571: LD_INT 116
5573: EQUAL
5574: IFFALSE 5584
// sComputer := true ;
5576: LD_ADDR_EXP 77
5580: PUSH
5581: LD_INT 1
5583: ST_TO_ADDR
// if p3 = 117 then
5584: LD_VAR 0 3
5588: PUSH
5589: LD_INT 117
5591: EQUAL
5592: IFFALSE 5602
// s30 := true ;
5594: LD_ADDR_EXP 78
5598: PUSH
5599: LD_INT 1
5601: ST_TO_ADDR
// if p3 = 118 then
5602: LD_VAR 0 3
5606: PUSH
5607: LD_INT 118
5609: EQUAL
5610: IFFALSE 5620
// s60 := true ;
5612: LD_ADDR_EXP 79
5616: PUSH
5617: LD_INT 1
5619: ST_TO_ADDR
// end ; if p2 = 101 then
5620: LD_VAR 0 2
5624: PUSH
5625: LD_INT 101
5627: EQUAL
5628: IFFALSE 5756
// begin case p3 of 1 :
5630: LD_VAR 0 3
5634: PUSH
5635: LD_INT 1
5637: DOUBLE
5638: EQUAL
5639: IFTRUE 5643
5641: GO 5650
5643: POP
// hHackUnlimitedResources ; 2 :
5644: CALL 17854 0 0
5648: GO 5756
5650: LD_INT 2
5652: DOUBLE
5653: EQUAL
5654: IFTRUE 5658
5656: GO 5665
5658: POP
// hHackSetLevel10 ; 3 :
5659: CALL 17987 0 0
5663: GO 5756
5665: LD_INT 3
5667: DOUBLE
5668: EQUAL
5669: IFTRUE 5673
5671: GO 5680
5673: POP
// hHackSetLevel10YourUnits ; 4 :
5674: CALL 18072 0 0
5678: GO 5756
5680: LD_INT 4
5682: DOUBLE
5683: EQUAL
5684: IFTRUE 5688
5686: GO 5695
5688: POP
// hHackInvincible ; 5 :
5689: CALL 18520 0 0
5693: GO 5756
5695: LD_INT 5
5697: DOUBLE
5698: EQUAL
5699: IFTRUE 5703
5701: GO 5710
5703: POP
// hHackInvisible ; 6 :
5704: CALL 18631 0 0
5708: GO 5756
5710: LD_INT 6
5712: DOUBLE
5713: EQUAL
5714: IFTRUE 5718
5716: GO 5725
5718: POP
// hHackChangeYourSide ; 7 :
5719: CALL 18688 0 0
5723: GO 5756
5725: LD_INT 7
5727: DOUBLE
5728: EQUAL
5729: IFTRUE 5733
5731: GO 5740
5733: POP
// hHackChangeUnitSide ; 8 :
5734: CALL 18730 0 0
5738: GO 5756
5740: LD_INT 8
5742: DOUBLE
5743: EQUAL
5744: IFTRUE 5748
5746: GO 5755
5748: POP
// hHackFog ; end ;
5749: CALL 18831 0 0
5753: GO 5756
5755: POP
// end ; end ;
5756: LD_VAR 0 7
5760: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5761: GO 5763
5763: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5764: LD_STRING initStreamRollete();
5766: PPUSH
5767: CALL_OW 559
// InitStreamMode ;
5771: CALL 5783 0 0
// DefineStreamItems ( false ) ;
5775: LD_INT 0
5777: PPUSH
5778: CALL 6247 0 1
// end ;
5782: END
// function InitStreamMode ; begin
5783: LD_INT 0
5785: PPUSH
// streamModeActive := false ;
5786: LD_ADDR_EXP 23
5790: PUSH
5791: LD_INT 0
5793: ST_TO_ADDR
// normalCounter := 36 ;
5794: LD_ADDR_EXP 24
5798: PUSH
5799: LD_INT 36
5801: ST_TO_ADDR
// hardcoreCounter := 18 ;
5802: LD_ADDR_EXP 25
5806: PUSH
5807: LD_INT 18
5809: ST_TO_ADDR
// sRocket := false ;
5810: LD_ADDR_EXP 28
5814: PUSH
5815: LD_INT 0
5817: ST_TO_ADDR
// sSpeed := false ;
5818: LD_ADDR_EXP 27
5822: PUSH
5823: LD_INT 0
5825: ST_TO_ADDR
// sEngine := false ;
5826: LD_ADDR_EXP 29
5830: PUSH
5831: LD_INT 0
5833: ST_TO_ADDR
// sSpec := false ;
5834: LD_ADDR_EXP 26
5838: PUSH
5839: LD_INT 0
5841: ST_TO_ADDR
// sLevel := false ;
5842: LD_ADDR_EXP 30
5846: PUSH
5847: LD_INT 0
5849: ST_TO_ADDR
// sArmoury := false ;
5850: LD_ADDR_EXP 31
5854: PUSH
5855: LD_INT 0
5857: ST_TO_ADDR
// sRadar := false ;
5858: LD_ADDR_EXP 32
5862: PUSH
5863: LD_INT 0
5865: ST_TO_ADDR
// sBunker := false ;
5866: LD_ADDR_EXP 33
5870: PUSH
5871: LD_INT 0
5873: ST_TO_ADDR
// sHack := false ;
5874: LD_ADDR_EXP 34
5878: PUSH
5879: LD_INT 0
5881: ST_TO_ADDR
// sFire := false ;
5882: LD_ADDR_EXP 35
5886: PUSH
5887: LD_INT 0
5889: ST_TO_ADDR
// sRefresh := false ;
5890: LD_ADDR_EXP 36
5894: PUSH
5895: LD_INT 0
5897: ST_TO_ADDR
// sExp := false ;
5898: LD_ADDR_EXP 37
5902: PUSH
5903: LD_INT 0
5905: ST_TO_ADDR
// sDepot := false ;
5906: LD_ADDR_EXP 38
5910: PUSH
5911: LD_INT 0
5913: ST_TO_ADDR
// sFlag := false ;
5914: LD_ADDR_EXP 39
5918: PUSH
5919: LD_INT 0
5921: ST_TO_ADDR
// sKamikadze := false ;
5922: LD_ADDR_EXP 47
5926: PUSH
5927: LD_INT 0
5929: ST_TO_ADDR
// sTroll := false ;
5930: LD_ADDR_EXP 48
5934: PUSH
5935: LD_INT 0
5937: ST_TO_ADDR
// sSlow := false ;
5938: LD_ADDR_EXP 49
5942: PUSH
5943: LD_INT 0
5945: ST_TO_ADDR
// sLack := false ;
5946: LD_ADDR_EXP 50
5950: PUSH
5951: LD_INT 0
5953: ST_TO_ADDR
// sTank := false ;
5954: LD_ADDR_EXP 52
5958: PUSH
5959: LD_INT 0
5961: ST_TO_ADDR
// sRemote := false ;
5962: LD_ADDR_EXP 53
5966: PUSH
5967: LD_INT 0
5969: ST_TO_ADDR
// sPowell := false ;
5970: LD_ADDR_EXP 54
5974: PUSH
5975: LD_INT 0
5977: ST_TO_ADDR
// sTeleport := false ;
5978: LD_ADDR_EXP 57
5982: PUSH
5983: LD_INT 0
5985: ST_TO_ADDR
// sOilTower := false ;
5986: LD_ADDR_EXP 59
5990: PUSH
5991: LD_INT 0
5993: ST_TO_ADDR
// sShovel := false ;
5994: LD_ADDR_EXP 60
5998: PUSH
5999: LD_INT 0
6001: ST_TO_ADDR
// sSheik := false ;
6002: LD_ADDR_EXP 61
6006: PUSH
6007: LD_INT 0
6009: ST_TO_ADDR
// sEarthquake := false ;
6010: LD_ADDR_EXP 63
6014: PUSH
6015: LD_INT 0
6017: ST_TO_ADDR
// sAI := false ;
6018: LD_ADDR_EXP 64
6022: PUSH
6023: LD_INT 0
6025: ST_TO_ADDR
// sCargo := false ;
6026: LD_ADDR_EXP 67
6030: PUSH
6031: LD_INT 0
6033: ST_TO_ADDR
// sDLaser := false ;
6034: LD_ADDR_EXP 68
6038: PUSH
6039: LD_INT 0
6041: ST_TO_ADDR
// sExchange := false ;
6042: LD_ADDR_EXP 69
6046: PUSH
6047: LD_INT 0
6049: ST_TO_ADDR
// sFac := false ;
6050: LD_ADDR_EXP 70
6054: PUSH
6055: LD_INT 0
6057: ST_TO_ADDR
// sPower := false ;
6058: LD_ADDR_EXP 71
6062: PUSH
6063: LD_INT 0
6065: ST_TO_ADDR
// sRandom := false ;
6066: LD_ADDR_EXP 72
6070: PUSH
6071: LD_INT 0
6073: ST_TO_ADDR
// sShield := false ;
6074: LD_ADDR_EXP 73
6078: PUSH
6079: LD_INT 0
6081: ST_TO_ADDR
// sTime := false ;
6082: LD_ADDR_EXP 74
6086: PUSH
6087: LD_INT 0
6089: ST_TO_ADDR
// sTools := false ;
6090: LD_ADDR_EXP 75
6094: PUSH
6095: LD_INT 0
6097: ST_TO_ADDR
// sSold := false ;
6098: LD_ADDR_EXP 40
6102: PUSH
6103: LD_INT 0
6105: ST_TO_ADDR
// sDiff := false ;
6106: LD_ADDR_EXP 41
6110: PUSH
6111: LD_INT 0
6113: ST_TO_ADDR
// sFog := false ;
6114: LD_ADDR_EXP 44
6118: PUSH
6119: LD_INT 0
6121: ST_TO_ADDR
// sReset := false ;
6122: LD_ADDR_EXP 45
6126: PUSH
6127: LD_INT 0
6129: ST_TO_ADDR
// sSun := false ;
6130: LD_ADDR_EXP 46
6134: PUSH
6135: LD_INT 0
6137: ST_TO_ADDR
// sTiger := false ;
6138: LD_ADDR_EXP 42
6142: PUSH
6143: LD_INT 0
6145: ST_TO_ADDR
// sBomb := false ;
6146: LD_ADDR_EXP 43
6150: PUSH
6151: LD_INT 0
6153: ST_TO_ADDR
// sWound := false ;
6154: LD_ADDR_EXP 51
6158: PUSH
6159: LD_INT 0
6161: ST_TO_ADDR
// sBetray := false ;
6162: LD_ADDR_EXP 55
6166: PUSH
6167: LD_INT 0
6169: ST_TO_ADDR
// sContamin := false ;
6170: LD_ADDR_EXP 56
6174: PUSH
6175: LD_INT 0
6177: ST_TO_ADDR
// sOil := false ;
6178: LD_ADDR_EXP 58
6182: PUSH
6183: LD_INT 0
6185: ST_TO_ADDR
// sStu := false ;
6186: LD_ADDR_EXP 62
6190: PUSH
6191: LD_INT 0
6193: ST_TO_ADDR
// sBazooka := false ;
6194: LD_ADDR_EXP 65
6198: PUSH
6199: LD_INT 0
6201: ST_TO_ADDR
// sMortar := false ;
6202: LD_ADDR_EXP 66
6206: PUSH
6207: LD_INT 0
6209: ST_TO_ADDR
// sRanger := false ;
6210: LD_ADDR_EXP 76
6214: PUSH
6215: LD_INT 0
6217: ST_TO_ADDR
// sComputer := false ;
6218: LD_ADDR_EXP 77
6222: PUSH
6223: LD_INT 0
6225: ST_TO_ADDR
// s30 := false ;
6226: LD_ADDR_EXP 78
6230: PUSH
6231: LD_INT 0
6233: ST_TO_ADDR
// s60 := false ;
6234: LD_ADDR_EXP 79
6238: PUSH
6239: LD_INT 0
6241: ST_TO_ADDR
// end ;
6242: LD_VAR 0 1
6246: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
6247: LD_INT 0
6249: PPUSH
6250: PPUSH
6251: PPUSH
6252: PPUSH
6253: PPUSH
6254: PPUSH
6255: PPUSH
// result := [ ] ;
6256: LD_ADDR_VAR 0 2
6260: PUSH
6261: EMPTY
6262: ST_TO_ADDR
// if campaign_id = 1 then
6263: LD_OWVAR 69
6267: PUSH
6268: LD_INT 1
6270: EQUAL
6271: IFFALSE 9437
// begin case mission_number of 1 :
6273: LD_OWVAR 70
6277: PUSH
6278: LD_INT 1
6280: DOUBLE
6281: EQUAL
6282: IFTRUE 6286
6284: GO 6362
6286: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6287: LD_ADDR_VAR 0 2
6291: PUSH
6292: LD_INT 2
6294: PUSH
6295: LD_INT 4
6297: PUSH
6298: LD_INT 11
6300: PUSH
6301: LD_INT 12
6303: PUSH
6304: LD_INT 15
6306: PUSH
6307: LD_INT 16
6309: PUSH
6310: LD_INT 22
6312: PUSH
6313: LD_INT 23
6315: PUSH
6316: LD_INT 26
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: PUSH
6330: LD_INT 101
6332: PUSH
6333: LD_INT 102
6335: PUSH
6336: LD_INT 106
6338: PUSH
6339: LD_INT 116
6341: PUSH
6342: LD_INT 117
6344: PUSH
6345: LD_INT 118
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: ST_TO_ADDR
6360: GO 9435
6362: LD_INT 2
6364: DOUBLE
6365: EQUAL
6366: IFTRUE 6370
6368: GO 6454
6370: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6371: LD_ADDR_VAR 0 2
6375: PUSH
6376: LD_INT 2
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 11
6384: PUSH
6385: LD_INT 12
6387: PUSH
6388: LD_INT 15
6390: PUSH
6391: LD_INT 16
6393: PUSH
6394: LD_INT 22
6396: PUSH
6397: LD_INT 23
6399: PUSH
6400: LD_INT 26
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: PUSH
6414: LD_INT 101
6416: PUSH
6417: LD_INT 102
6419: PUSH
6420: LD_INT 105
6422: PUSH
6423: LD_INT 106
6425: PUSH
6426: LD_INT 108
6428: PUSH
6429: LD_INT 116
6431: PUSH
6432: LD_INT 117
6434: PUSH
6435: LD_INT 118
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: EMPTY
6449: LIST
6450: LIST
6451: ST_TO_ADDR
6452: GO 9435
6454: LD_INT 3
6456: DOUBLE
6457: EQUAL
6458: IFTRUE 6462
6460: GO 6550
6462: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6463: LD_ADDR_VAR 0 2
6467: PUSH
6468: LD_INT 2
6470: PUSH
6471: LD_INT 4
6473: PUSH
6474: LD_INT 5
6476: PUSH
6477: LD_INT 11
6479: PUSH
6480: LD_INT 12
6482: PUSH
6483: LD_INT 15
6485: PUSH
6486: LD_INT 16
6488: PUSH
6489: LD_INT 22
6491: PUSH
6492: LD_INT 26
6494: PUSH
6495: LD_INT 36
6497: PUSH
6498: EMPTY
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: PUSH
6510: LD_INT 101
6512: PUSH
6513: LD_INT 102
6515: PUSH
6516: LD_INT 105
6518: PUSH
6519: LD_INT 106
6521: PUSH
6522: LD_INT 108
6524: PUSH
6525: LD_INT 116
6527: PUSH
6528: LD_INT 117
6530: PUSH
6531: LD_INT 118
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: ST_TO_ADDR
6548: GO 9435
6550: LD_INT 4
6552: DOUBLE
6553: EQUAL
6554: IFTRUE 6558
6556: GO 6654
6558: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6559: LD_ADDR_VAR 0 2
6563: PUSH
6564: LD_INT 2
6566: PUSH
6567: LD_INT 4
6569: PUSH
6570: LD_INT 5
6572: PUSH
6573: LD_INT 8
6575: PUSH
6576: LD_INT 11
6578: PUSH
6579: LD_INT 12
6581: PUSH
6582: LD_INT 15
6584: PUSH
6585: LD_INT 16
6587: PUSH
6588: LD_INT 22
6590: PUSH
6591: LD_INT 23
6593: PUSH
6594: LD_INT 26
6596: PUSH
6597: LD_INT 36
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 101
6616: PUSH
6617: LD_INT 102
6619: PUSH
6620: LD_INT 105
6622: PUSH
6623: LD_INT 106
6625: PUSH
6626: LD_INT 108
6628: PUSH
6629: LD_INT 116
6631: PUSH
6632: LD_INT 117
6634: PUSH
6635: LD_INT 118
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: ST_TO_ADDR
6652: GO 9435
6654: LD_INT 5
6656: DOUBLE
6657: EQUAL
6658: IFTRUE 6662
6660: GO 6774
6662: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6663: LD_ADDR_VAR 0 2
6667: PUSH
6668: LD_INT 2
6670: PUSH
6671: LD_INT 4
6673: PUSH
6674: LD_INT 5
6676: PUSH
6677: LD_INT 6
6679: PUSH
6680: LD_INT 8
6682: PUSH
6683: LD_INT 11
6685: PUSH
6686: LD_INT 12
6688: PUSH
6689: LD_INT 15
6691: PUSH
6692: LD_INT 16
6694: PUSH
6695: LD_INT 22
6697: PUSH
6698: LD_INT 23
6700: PUSH
6701: LD_INT 25
6703: PUSH
6704: LD_INT 26
6706: PUSH
6707: LD_INT 36
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 101
6728: PUSH
6729: LD_INT 102
6731: PUSH
6732: LD_INT 105
6734: PUSH
6735: LD_INT 106
6737: PUSH
6738: LD_INT 108
6740: PUSH
6741: LD_INT 109
6743: PUSH
6744: LD_INT 112
6746: PUSH
6747: LD_INT 116
6749: PUSH
6750: LD_INT 117
6752: PUSH
6753: LD_INT 118
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: ST_TO_ADDR
6772: GO 9435
6774: LD_INT 6
6776: DOUBLE
6777: EQUAL
6778: IFTRUE 6782
6780: GO 6914
6782: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6783: LD_ADDR_VAR 0 2
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: LD_INT 4
6793: PUSH
6794: LD_INT 5
6796: PUSH
6797: LD_INT 6
6799: PUSH
6800: LD_INT 8
6802: PUSH
6803: LD_INT 11
6805: PUSH
6806: LD_INT 12
6808: PUSH
6809: LD_INT 15
6811: PUSH
6812: LD_INT 16
6814: PUSH
6815: LD_INT 20
6817: PUSH
6818: LD_INT 21
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 26
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 31
6838: PUSH
6839: LD_INT 32
6841: PUSH
6842: LD_INT 36
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 101
6868: PUSH
6869: LD_INT 102
6871: PUSH
6872: LD_INT 105
6874: PUSH
6875: LD_INT 106
6877: PUSH
6878: LD_INT 108
6880: PUSH
6881: LD_INT 109
6883: PUSH
6884: LD_INT 112
6886: PUSH
6887: LD_INT 116
6889: PUSH
6890: LD_INT 117
6892: PUSH
6893: LD_INT 118
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: ST_TO_ADDR
6912: GO 9435
6914: LD_INT 7
6916: DOUBLE
6917: EQUAL
6918: IFTRUE 6922
6920: GO 7034
6922: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6923: LD_ADDR_VAR 0 2
6927: PUSH
6928: LD_INT 2
6930: PUSH
6931: LD_INT 4
6933: PUSH
6934: LD_INT 5
6936: PUSH
6937: LD_INT 7
6939: PUSH
6940: LD_INT 11
6942: PUSH
6943: LD_INT 12
6945: PUSH
6946: LD_INT 15
6948: PUSH
6949: LD_INT 16
6951: PUSH
6952: LD_INT 20
6954: PUSH
6955: LD_INT 21
6957: PUSH
6958: LD_INT 22
6960: PUSH
6961: LD_INT 23
6963: PUSH
6964: LD_INT 25
6966: PUSH
6967: LD_INT 26
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 101
6988: PUSH
6989: LD_INT 102
6991: PUSH
6992: LD_INT 103
6994: PUSH
6995: LD_INT 105
6997: PUSH
6998: LD_INT 106
7000: PUSH
7001: LD_INT 108
7003: PUSH
7004: LD_INT 112
7006: PUSH
7007: LD_INT 116
7009: PUSH
7010: LD_INT 117
7012: PUSH
7013: LD_INT 118
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: ST_TO_ADDR
7032: GO 9435
7034: LD_INT 8
7036: DOUBLE
7037: EQUAL
7038: IFTRUE 7042
7040: GO 7182
7042: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
7043: LD_ADDR_VAR 0 2
7047: PUSH
7048: LD_INT 2
7050: PUSH
7051: LD_INT 4
7053: PUSH
7054: LD_INT 5
7056: PUSH
7057: LD_INT 6
7059: PUSH
7060: LD_INT 7
7062: PUSH
7063: LD_INT 8
7065: PUSH
7066: LD_INT 11
7068: PUSH
7069: LD_INT 12
7071: PUSH
7072: LD_INT 15
7074: PUSH
7075: LD_INT 16
7077: PUSH
7078: LD_INT 20
7080: PUSH
7081: LD_INT 21
7083: PUSH
7084: LD_INT 22
7086: PUSH
7087: LD_INT 23
7089: PUSH
7090: LD_INT 25
7092: PUSH
7093: LD_INT 26
7095: PUSH
7096: LD_INT 30
7098: PUSH
7099: LD_INT 31
7101: PUSH
7102: LD_INT 32
7104: PUSH
7105: LD_INT 36
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: LIST
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: LIST
7125: LIST
7126: LIST
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 101
7132: PUSH
7133: LD_INT 102
7135: PUSH
7136: LD_INT 103
7138: PUSH
7139: LD_INT 105
7141: PUSH
7142: LD_INT 106
7144: PUSH
7145: LD_INT 108
7147: PUSH
7148: LD_INT 109
7150: PUSH
7151: LD_INT 112
7153: PUSH
7154: LD_INT 116
7156: PUSH
7157: LD_INT 117
7159: PUSH
7160: LD_INT 118
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: ST_TO_ADDR
7180: GO 9435
7182: LD_INT 9
7184: DOUBLE
7185: EQUAL
7186: IFTRUE 7190
7188: GO 7338
7190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
7191: LD_ADDR_VAR 0 2
7195: PUSH
7196: LD_INT 2
7198: PUSH
7199: LD_INT 4
7201: PUSH
7202: LD_INT 5
7204: PUSH
7205: LD_INT 6
7207: PUSH
7208: LD_INT 7
7210: PUSH
7211: LD_INT 8
7213: PUSH
7214: LD_INT 11
7216: PUSH
7217: LD_INT 12
7219: PUSH
7220: LD_INT 15
7222: PUSH
7223: LD_INT 16
7225: PUSH
7226: LD_INT 20
7228: PUSH
7229: LD_INT 21
7231: PUSH
7232: LD_INT 22
7234: PUSH
7235: LD_INT 23
7237: PUSH
7238: LD_INT 25
7240: PUSH
7241: LD_INT 26
7243: PUSH
7244: LD_INT 28
7246: PUSH
7247: LD_INT 30
7249: PUSH
7250: LD_INT 31
7252: PUSH
7253: LD_INT 32
7255: PUSH
7256: LD_INT 36
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 101
7284: PUSH
7285: LD_INT 102
7287: PUSH
7288: LD_INT 103
7290: PUSH
7291: LD_INT 105
7293: PUSH
7294: LD_INT 106
7296: PUSH
7297: LD_INT 108
7299: PUSH
7300: LD_INT 109
7302: PUSH
7303: LD_INT 112
7305: PUSH
7306: LD_INT 114
7308: PUSH
7309: LD_INT 116
7311: PUSH
7312: LD_INT 117
7314: PUSH
7315: LD_INT 118
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: ST_TO_ADDR
7336: GO 9435
7338: LD_INT 10
7340: DOUBLE
7341: EQUAL
7342: IFTRUE 7346
7344: GO 7542
7346: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7347: LD_ADDR_VAR 0 2
7351: PUSH
7352: LD_INT 2
7354: PUSH
7355: LD_INT 4
7357: PUSH
7358: LD_INT 5
7360: PUSH
7361: LD_INT 6
7363: PUSH
7364: LD_INT 7
7366: PUSH
7367: LD_INT 8
7369: PUSH
7370: LD_INT 9
7372: PUSH
7373: LD_INT 10
7375: PUSH
7376: LD_INT 11
7378: PUSH
7379: LD_INT 12
7381: PUSH
7382: LD_INT 13
7384: PUSH
7385: LD_INT 14
7387: PUSH
7388: LD_INT 15
7390: PUSH
7391: LD_INT 16
7393: PUSH
7394: LD_INT 17
7396: PUSH
7397: LD_INT 18
7399: PUSH
7400: LD_INT 19
7402: PUSH
7403: LD_INT 20
7405: PUSH
7406: LD_INT 21
7408: PUSH
7409: LD_INT 22
7411: PUSH
7412: LD_INT 23
7414: PUSH
7415: LD_INT 24
7417: PUSH
7418: LD_INT 25
7420: PUSH
7421: LD_INT 26
7423: PUSH
7424: LD_INT 28
7426: PUSH
7427: LD_INT 30
7429: PUSH
7430: LD_INT 31
7432: PUSH
7433: LD_INT 32
7435: PUSH
7436: LD_INT 36
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: LIST
7465: LIST
7466: LIST
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 101
7472: PUSH
7473: LD_INT 102
7475: PUSH
7476: LD_INT 103
7478: PUSH
7479: LD_INT 104
7481: PUSH
7482: LD_INT 105
7484: PUSH
7485: LD_INT 106
7487: PUSH
7488: LD_INT 107
7490: PUSH
7491: LD_INT 108
7493: PUSH
7494: LD_INT 109
7496: PUSH
7497: LD_INT 110
7499: PUSH
7500: LD_INT 111
7502: PUSH
7503: LD_INT 112
7505: PUSH
7506: LD_INT 114
7508: PUSH
7509: LD_INT 116
7511: PUSH
7512: LD_INT 117
7514: PUSH
7515: LD_INT 118
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: ST_TO_ADDR
7540: GO 9435
7542: LD_INT 11
7544: DOUBLE
7545: EQUAL
7546: IFTRUE 7550
7548: GO 7754
7550: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7551: LD_ADDR_VAR 0 2
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: LD_INT 3
7561: PUSH
7562: LD_INT 4
7564: PUSH
7565: LD_INT 5
7567: PUSH
7568: LD_INT 6
7570: PUSH
7571: LD_INT 7
7573: PUSH
7574: LD_INT 8
7576: PUSH
7577: LD_INT 9
7579: PUSH
7580: LD_INT 10
7582: PUSH
7583: LD_INT 11
7585: PUSH
7586: LD_INT 12
7588: PUSH
7589: LD_INT 13
7591: PUSH
7592: LD_INT 14
7594: PUSH
7595: LD_INT 15
7597: PUSH
7598: LD_INT 16
7600: PUSH
7601: LD_INT 17
7603: PUSH
7604: LD_INT 18
7606: PUSH
7607: LD_INT 19
7609: PUSH
7610: LD_INT 20
7612: PUSH
7613: LD_INT 21
7615: PUSH
7616: LD_INT 22
7618: PUSH
7619: LD_INT 23
7621: PUSH
7622: LD_INT 24
7624: PUSH
7625: LD_INT 25
7627: PUSH
7628: LD_INT 26
7630: PUSH
7631: LD_INT 28
7633: PUSH
7634: LD_INT 30
7636: PUSH
7637: LD_INT 31
7639: PUSH
7640: LD_INT 32
7642: PUSH
7643: LD_INT 34
7645: PUSH
7646: LD_INT 36
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: LD_INT 101
7684: PUSH
7685: LD_INT 102
7687: PUSH
7688: LD_INT 103
7690: PUSH
7691: LD_INT 104
7693: PUSH
7694: LD_INT 105
7696: PUSH
7697: LD_INT 106
7699: PUSH
7700: LD_INT 107
7702: PUSH
7703: LD_INT 108
7705: PUSH
7706: LD_INT 109
7708: PUSH
7709: LD_INT 110
7711: PUSH
7712: LD_INT 111
7714: PUSH
7715: LD_INT 112
7717: PUSH
7718: LD_INT 114
7720: PUSH
7721: LD_INT 116
7723: PUSH
7724: LD_INT 117
7726: PUSH
7727: LD_INT 118
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PUSH
7748: EMPTY
7749: LIST
7750: LIST
7751: ST_TO_ADDR
7752: GO 9435
7754: LD_INT 12
7756: DOUBLE
7757: EQUAL
7758: IFTRUE 7762
7760: GO 7982
7762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7763: LD_ADDR_VAR 0 2
7767: PUSH
7768: LD_INT 1
7770: PUSH
7771: LD_INT 2
7773: PUSH
7774: LD_INT 3
7776: PUSH
7777: LD_INT 4
7779: PUSH
7780: LD_INT 5
7782: PUSH
7783: LD_INT 6
7785: PUSH
7786: LD_INT 7
7788: PUSH
7789: LD_INT 8
7791: PUSH
7792: LD_INT 9
7794: PUSH
7795: LD_INT 10
7797: PUSH
7798: LD_INT 11
7800: PUSH
7801: LD_INT 12
7803: PUSH
7804: LD_INT 13
7806: PUSH
7807: LD_INT 14
7809: PUSH
7810: LD_INT 15
7812: PUSH
7813: LD_INT 16
7815: PUSH
7816: LD_INT 17
7818: PUSH
7819: LD_INT 18
7821: PUSH
7822: LD_INT 19
7824: PUSH
7825: LD_INT 20
7827: PUSH
7828: LD_INT 21
7830: PUSH
7831: LD_INT 22
7833: PUSH
7834: LD_INT 23
7836: PUSH
7837: LD_INT 24
7839: PUSH
7840: LD_INT 25
7842: PUSH
7843: LD_INT 26
7845: PUSH
7846: LD_INT 27
7848: PUSH
7849: LD_INT 28
7851: PUSH
7852: LD_INT 30
7854: PUSH
7855: LD_INT 31
7857: PUSH
7858: LD_INT 32
7860: PUSH
7861: LD_INT 33
7863: PUSH
7864: LD_INT 34
7866: PUSH
7867: LD_INT 36
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 101
7908: PUSH
7909: LD_INT 102
7911: PUSH
7912: LD_INT 103
7914: PUSH
7915: LD_INT 104
7917: PUSH
7918: LD_INT 105
7920: PUSH
7921: LD_INT 106
7923: PUSH
7924: LD_INT 107
7926: PUSH
7927: LD_INT 108
7929: PUSH
7930: LD_INT 109
7932: PUSH
7933: LD_INT 110
7935: PUSH
7936: LD_INT 111
7938: PUSH
7939: LD_INT 112
7941: PUSH
7942: LD_INT 113
7944: PUSH
7945: LD_INT 114
7947: PUSH
7948: LD_INT 116
7950: PUSH
7951: LD_INT 117
7953: PUSH
7954: LD_INT 118
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: PUSH
7976: EMPTY
7977: LIST
7978: LIST
7979: ST_TO_ADDR
7980: GO 9435
7982: LD_INT 13
7984: DOUBLE
7985: EQUAL
7986: IFTRUE 7990
7988: GO 8198
7990: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7991: LD_ADDR_VAR 0 2
7995: PUSH
7996: LD_INT 1
7998: PUSH
7999: LD_INT 2
8001: PUSH
8002: LD_INT 3
8004: PUSH
8005: LD_INT 4
8007: PUSH
8008: LD_INT 5
8010: PUSH
8011: LD_INT 8
8013: PUSH
8014: LD_INT 9
8016: PUSH
8017: LD_INT 10
8019: PUSH
8020: LD_INT 11
8022: PUSH
8023: LD_INT 12
8025: PUSH
8026: LD_INT 14
8028: PUSH
8029: LD_INT 15
8031: PUSH
8032: LD_INT 16
8034: PUSH
8035: LD_INT 17
8037: PUSH
8038: LD_INT 18
8040: PUSH
8041: LD_INT 19
8043: PUSH
8044: LD_INT 20
8046: PUSH
8047: LD_INT 21
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_INT 23
8055: PUSH
8056: LD_INT 24
8058: PUSH
8059: LD_INT 25
8061: PUSH
8062: LD_INT 26
8064: PUSH
8065: LD_INT 27
8067: PUSH
8068: LD_INT 28
8070: PUSH
8071: LD_INT 30
8073: PUSH
8074: LD_INT 31
8076: PUSH
8077: LD_INT 32
8079: PUSH
8080: LD_INT 33
8082: PUSH
8083: LD_INT 34
8085: PUSH
8086: LD_INT 36
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 101
8124: PUSH
8125: LD_INT 102
8127: PUSH
8128: LD_INT 103
8130: PUSH
8131: LD_INT 104
8133: PUSH
8134: LD_INT 105
8136: PUSH
8137: LD_INT 106
8139: PUSH
8140: LD_INT 107
8142: PUSH
8143: LD_INT 108
8145: PUSH
8146: LD_INT 109
8148: PUSH
8149: LD_INT 110
8151: PUSH
8152: LD_INT 111
8154: PUSH
8155: LD_INT 112
8157: PUSH
8158: LD_INT 113
8160: PUSH
8161: LD_INT 114
8163: PUSH
8164: LD_INT 116
8166: PUSH
8167: LD_INT 117
8169: PUSH
8170: LD_INT 118
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: ST_TO_ADDR
8196: GO 9435
8198: LD_INT 14
8200: DOUBLE
8201: EQUAL
8202: IFTRUE 8206
8204: GO 8430
8206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
8207: LD_ADDR_VAR 0 2
8211: PUSH
8212: LD_INT 1
8214: PUSH
8215: LD_INT 2
8217: PUSH
8218: LD_INT 3
8220: PUSH
8221: LD_INT 4
8223: PUSH
8224: LD_INT 5
8226: PUSH
8227: LD_INT 6
8229: PUSH
8230: LD_INT 7
8232: PUSH
8233: LD_INT 8
8235: PUSH
8236: LD_INT 9
8238: PUSH
8239: LD_INT 10
8241: PUSH
8242: LD_INT 11
8244: PUSH
8245: LD_INT 12
8247: PUSH
8248: LD_INT 13
8250: PUSH
8251: LD_INT 14
8253: PUSH
8254: LD_INT 15
8256: PUSH
8257: LD_INT 16
8259: PUSH
8260: LD_INT 17
8262: PUSH
8263: LD_INT 18
8265: PUSH
8266: LD_INT 19
8268: PUSH
8269: LD_INT 20
8271: PUSH
8272: LD_INT 21
8274: PUSH
8275: LD_INT 22
8277: PUSH
8278: LD_INT 23
8280: PUSH
8281: LD_INT 24
8283: PUSH
8284: LD_INT 25
8286: PUSH
8287: LD_INT 26
8289: PUSH
8290: LD_INT 27
8292: PUSH
8293: LD_INT 28
8295: PUSH
8296: LD_INT 29
8298: PUSH
8299: LD_INT 30
8301: PUSH
8302: LD_INT 31
8304: PUSH
8305: LD_INT 32
8307: PUSH
8308: LD_INT 33
8310: PUSH
8311: LD_INT 34
8313: PUSH
8314: LD_INT 36
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: LIST
8339: LIST
8340: LIST
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: PUSH
8354: LD_INT 101
8356: PUSH
8357: LD_INT 102
8359: PUSH
8360: LD_INT 103
8362: PUSH
8363: LD_INT 104
8365: PUSH
8366: LD_INT 105
8368: PUSH
8369: LD_INT 106
8371: PUSH
8372: LD_INT 107
8374: PUSH
8375: LD_INT 108
8377: PUSH
8378: LD_INT 109
8380: PUSH
8381: LD_INT 110
8383: PUSH
8384: LD_INT 111
8386: PUSH
8387: LD_INT 112
8389: PUSH
8390: LD_INT 113
8392: PUSH
8393: LD_INT 114
8395: PUSH
8396: LD_INT 116
8398: PUSH
8399: LD_INT 117
8401: PUSH
8402: LD_INT 118
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: LIST
8418: LIST
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: ST_TO_ADDR
8428: GO 9435
8430: LD_INT 15
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8662
8438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8439: LD_ADDR_VAR 0 2
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: LD_INT 3
8452: PUSH
8453: LD_INT 4
8455: PUSH
8456: LD_INT 5
8458: PUSH
8459: LD_INT 6
8461: PUSH
8462: LD_INT 7
8464: PUSH
8465: LD_INT 8
8467: PUSH
8468: LD_INT 9
8470: PUSH
8471: LD_INT 10
8473: PUSH
8474: LD_INT 11
8476: PUSH
8477: LD_INT 12
8479: PUSH
8480: LD_INT 13
8482: PUSH
8483: LD_INT 14
8485: PUSH
8486: LD_INT 15
8488: PUSH
8489: LD_INT 16
8491: PUSH
8492: LD_INT 17
8494: PUSH
8495: LD_INT 18
8497: PUSH
8498: LD_INT 19
8500: PUSH
8501: LD_INT 20
8503: PUSH
8504: LD_INT 21
8506: PUSH
8507: LD_INT 22
8509: PUSH
8510: LD_INT 23
8512: PUSH
8513: LD_INT 24
8515: PUSH
8516: LD_INT 25
8518: PUSH
8519: LD_INT 26
8521: PUSH
8522: LD_INT 27
8524: PUSH
8525: LD_INT 28
8527: PUSH
8528: LD_INT 29
8530: PUSH
8531: LD_INT 30
8533: PUSH
8534: LD_INT 31
8536: PUSH
8537: LD_INT 32
8539: PUSH
8540: LD_INT 33
8542: PUSH
8543: LD_INT 34
8545: PUSH
8546: LD_INT 36
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: LIST
8571: LIST
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 101
8588: PUSH
8589: LD_INT 102
8591: PUSH
8592: LD_INT 103
8594: PUSH
8595: LD_INT 104
8597: PUSH
8598: LD_INT 105
8600: PUSH
8601: LD_INT 106
8603: PUSH
8604: LD_INT 107
8606: PUSH
8607: LD_INT 108
8609: PUSH
8610: LD_INT 109
8612: PUSH
8613: LD_INT 110
8615: PUSH
8616: LD_INT 111
8618: PUSH
8619: LD_INT 112
8621: PUSH
8622: LD_INT 113
8624: PUSH
8625: LD_INT 114
8627: PUSH
8628: LD_INT 116
8630: PUSH
8631: LD_INT 117
8633: PUSH
8634: LD_INT 118
8636: PUSH
8637: EMPTY
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: ST_TO_ADDR
8660: GO 9435
8662: LD_INT 16
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8806
8670: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8671: LD_ADDR_VAR 0 2
8675: PUSH
8676: LD_INT 2
8678: PUSH
8679: LD_INT 4
8681: PUSH
8682: LD_INT 5
8684: PUSH
8685: LD_INT 7
8687: PUSH
8688: LD_INT 11
8690: PUSH
8691: LD_INT 12
8693: PUSH
8694: LD_INT 15
8696: PUSH
8697: LD_INT 16
8699: PUSH
8700: LD_INT 20
8702: PUSH
8703: LD_INT 21
8705: PUSH
8706: LD_INT 22
8708: PUSH
8709: LD_INT 23
8711: PUSH
8712: LD_INT 25
8714: PUSH
8715: LD_INT 26
8717: PUSH
8718: LD_INT 30
8720: PUSH
8721: LD_INT 31
8723: PUSH
8724: LD_INT 32
8726: PUSH
8727: LD_INT 33
8729: PUSH
8730: LD_INT 34
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: PUSH
8754: LD_INT 101
8756: PUSH
8757: LD_INT 102
8759: PUSH
8760: LD_INT 103
8762: PUSH
8763: LD_INT 106
8765: PUSH
8766: LD_INT 108
8768: PUSH
8769: LD_INT 112
8771: PUSH
8772: LD_INT 113
8774: PUSH
8775: LD_INT 114
8777: PUSH
8778: LD_INT 116
8780: PUSH
8781: LD_INT 117
8783: PUSH
8784: LD_INT 118
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: LIST
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: ST_TO_ADDR
8804: GO 9435
8806: LD_INT 17
8808: DOUBLE
8809: EQUAL
8810: IFTRUE 8814
8812: GO 9038
8814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8815: LD_ADDR_VAR 0 2
8819: PUSH
8820: LD_INT 1
8822: PUSH
8823: LD_INT 2
8825: PUSH
8826: LD_INT 3
8828: PUSH
8829: LD_INT 4
8831: PUSH
8832: LD_INT 5
8834: PUSH
8835: LD_INT 6
8837: PUSH
8838: LD_INT 7
8840: PUSH
8841: LD_INT 8
8843: PUSH
8844: LD_INT 9
8846: PUSH
8847: LD_INT 10
8849: PUSH
8850: LD_INT 11
8852: PUSH
8853: LD_INT 12
8855: PUSH
8856: LD_INT 13
8858: PUSH
8859: LD_INT 14
8861: PUSH
8862: LD_INT 15
8864: PUSH
8865: LD_INT 16
8867: PUSH
8868: LD_INT 17
8870: PUSH
8871: LD_INT 18
8873: PUSH
8874: LD_INT 19
8876: PUSH
8877: LD_INT 20
8879: PUSH
8880: LD_INT 21
8882: PUSH
8883: LD_INT 22
8885: PUSH
8886: LD_INT 23
8888: PUSH
8889: LD_INT 24
8891: PUSH
8892: LD_INT 25
8894: PUSH
8895: LD_INT 26
8897: PUSH
8898: LD_INT 27
8900: PUSH
8901: LD_INT 28
8903: PUSH
8904: LD_INT 29
8906: PUSH
8907: LD_INT 30
8909: PUSH
8910: LD_INT 31
8912: PUSH
8913: LD_INT 32
8915: PUSH
8916: LD_INT 33
8918: PUSH
8919: LD_INT 34
8921: PUSH
8922: LD_INT 36
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: LIST
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: LIST
8951: LIST
8952: LIST
8953: LIST
8954: LIST
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: LD_INT 101
8964: PUSH
8965: LD_INT 102
8967: PUSH
8968: LD_INT 103
8970: PUSH
8971: LD_INT 104
8973: PUSH
8974: LD_INT 105
8976: PUSH
8977: LD_INT 106
8979: PUSH
8980: LD_INT 107
8982: PUSH
8983: LD_INT 108
8985: PUSH
8986: LD_INT 109
8988: PUSH
8989: LD_INT 110
8991: PUSH
8992: LD_INT 111
8994: PUSH
8995: LD_INT 112
8997: PUSH
8998: LD_INT 113
9000: PUSH
9001: LD_INT 114
9003: PUSH
9004: LD_INT 116
9006: PUSH
9007: LD_INT 117
9009: PUSH
9010: LD_INT 118
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: PUSH
9032: EMPTY
9033: LIST
9034: LIST
9035: ST_TO_ADDR
9036: GO 9435
9038: LD_INT 18
9040: DOUBLE
9041: EQUAL
9042: IFTRUE 9046
9044: GO 9194
9046: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
9047: LD_ADDR_VAR 0 2
9051: PUSH
9052: LD_INT 2
9054: PUSH
9055: LD_INT 4
9057: PUSH
9058: LD_INT 5
9060: PUSH
9061: LD_INT 7
9063: PUSH
9064: LD_INT 11
9066: PUSH
9067: LD_INT 12
9069: PUSH
9070: LD_INT 15
9072: PUSH
9073: LD_INT 16
9075: PUSH
9076: LD_INT 20
9078: PUSH
9079: LD_INT 21
9081: PUSH
9082: LD_INT 22
9084: PUSH
9085: LD_INT 23
9087: PUSH
9088: LD_INT 25
9090: PUSH
9091: LD_INT 26
9093: PUSH
9094: LD_INT 30
9096: PUSH
9097: LD_INT 31
9099: PUSH
9100: LD_INT 32
9102: PUSH
9103: LD_INT 33
9105: PUSH
9106: LD_INT 34
9108: PUSH
9109: LD_INT 35
9111: PUSH
9112: LD_INT 36
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 101
9140: PUSH
9141: LD_INT 102
9143: PUSH
9144: LD_INT 103
9146: PUSH
9147: LD_INT 106
9149: PUSH
9150: LD_INT 108
9152: PUSH
9153: LD_INT 112
9155: PUSH
9156: LD_INT 113
9158: PUSH
9159: LD_INT 114
9161: PUSH
9162: LD_INT 115
9164: PUSH
9165: LD_INT 116
9167: PUSH
9168: LD_INT 117
9170: PUSH
9171: LD_INT 118
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: ST_TO_ADDR
9192: GO 9435
9194: LD_INT 19
9196: DOUBLE
9197: EQUAL
9198: IFTRUE 9202
9200: GO 9434
9202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
9203: LD_ADDR_VAR 0 2
9207: PUSH
9208: LD_INT 1
9210: PUSH
9211: LD_INT 2
9213: PUSH
9214: LD_INT 3
9216: PUSH
9217: LD_INT 4
9219: PUSH
9220: LD_INT 5
9222: PUSH
9223: LD_INT 6
9225: PUSH
9226: LD_INT 7
9228: PUSH
9229: LD_INT 8
9231: PUSH
9232: LD_INT 9
9234: PUSH
9235: LD_INT 10
9237: PUSH
9238: LD_INT 11
9240: PUSH
9241: LD_INT 12
9243: PUSH
9244: LD_INT 13
9246: PUSH
9247: LD_INT 14
9249: PUSH
9250: LD_INT 15
9252: PUSH
9253: LD_INT 16
9255: PUSH
9256: LD_INT 17
9258: PUSH
9259: LD_INT 18
9261: PUSH
9262: LD_INT 19
9264: PUSH
9265: LD_INT 20
9267: PUSH
9268: LD_INT 21
9270: PUSH
9271: LD_INT 22
9273: PUSH
9274: LD_INT 23
9276: PUSH
9277: LD_INT 24
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 26
9285: PUSH
9286: LD_INT 27
9288: PUSH
9289: LD_INT 28
9291: PUSH
9292: LD_INT 29
9294: PUSH
9295: LD_INT 30
9297: PUSH
9298: LD_INT 31
9300: PUSH
9301: LD_INT 32
9303: PUSH
9304: LD_INT 33
9306: PUSH
9307: LD_INT 34
9309: PUSH
9310: LD_INT 35
9312: PUSH
9313: LD_INT 36
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 101
9356: PUSH
9357: LD_INT 102
9359: PUSH
9360: LD_INT 103
9362: PUSH
9363: LD_INT 104
9365: PUSH
9366: LD_INT 105
9368: PUSH
9369: LD_INT 106
9371: PUSH
9372: LD_INT 107
9374: PUSH
9375: LD_INT 108
9377: PUSH
9378: LD_INT 109
9380: PUSH
9381: LD_INT 110
9383: PUSH
9384: LD_INT 111
9386: PUSH
9387: LD_INT 112
9389: PUSH
9390: LD_INT 113
9392: PUSH
9393: LD_INT 114
9395: PUSH
9396: LD_INT 115
9398: PUSH
9399: LD_INT 116
9401: PUSH
9402: LD_INT 117
9404: PUSH
9405: LD_INT 118
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: ST_TO_ADDR
9432: GO 9435
9434: POP
// end else
9435: GO 9666
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9437: LD_ADDR_VAR 0 2
9441: PUSH
9442: LD_INT 1
9444: PUSH
9445: LD_INT 2
9447: PUSH
9448: LD_INT 3
9450: PUSH
9451: LD_INT 4
9453: PUSH
9454: LD_INT 5
9456: PUSH
9457: LD_INT 6
9459: PUSH
9460: LD_INT 7
9462: PUSH
9463: LD_INT 8
9465: PUSH
9466: LD_INT 9
9468: PUSH
9469: LD_INT 10
9471: PUSH
9472: LD_INT 11
9474: PUSH
9475: LD_INT 12
9477: PUSH
9478: LD_INT 13
9480: PUSH
9481: LD_INT 14
9483: PUSH
9484: LD_INT 15
9486: PUSH
9487: LD_INT 16
9489: PUSH
9490: LD_INT 17
9492: PUSH
9493: LD_INT 18
9495: PUSH
9496: LD_INT 19
9498: PUSH
9499: LD_INT 20
9501: PUSH
9502: LD_INT 21
9504: PUSH
9505: LD_INT 22
9507: PUSH
9508: LD_INT 23
9510: PUSH
9511: LD_INT 24
9513: PUSH
9514: LD_INT 25
9516: PUSH
9517: LD_INT 26
9519: PUSH
9520: LD_INT 27
9522: PUSH
9523: LD_INT 28
9525: PUSH
9526: LD_INT 29
9528: PUSH
9529: LD_INT 30
9531: PUSH
9532: LD_INT 31
9534: PUSH
9535: LD_INT 32
9537: PUSH
9538: LD_INT 33
9540: PUSH
9541: LD_INT 34
9543: PUSH
9544: LD_INT 35
9546: PUSH
9547: LD_INT 36
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 101
9590: PUSH
9591: LD_INT 102
9593: PUSH
9594: LD_INT 103
9596: PUSH
9597: LD_INT 104
9599: PUSH
9600: LD_INT 105
9602: PUSH
9603: LD_INT 106
9605: PUSH
9606: LD_INT 107
9608: PUSH
9609: LD_INT 108
9611: PUSH
9612: LD_INT 109
9614: PUSH
9615: LD_INT 110
9617: PUSH
9618: LD_INT 111
9620: PUSH
9621: LD_INT 112
9623: PUSH
9624: LD_INT 113
9626: PUSH
9627: LD_INT 114
9629: PUSH
9630: LD_INT 115
9632: PUSH
9633: LD_INT 116
9635: PUSH
9636: LD_INT 117
9638: PUSH
9639: LD_INT 118
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: ST_TO_ADDR
// if result then
9666: LD_VAR 0 2
9670: IFFALSE 10456
// begin normal :=  ;
9672: LD_ADDR_VAR 0 5
9676: PUSH
9677: LD_STRING 
9679: ST_TO_ADDR
// hardcore :=  ;
9680: LD_ADDR_VAR 0 6
9684: PUSH
9685: LD_STRING 
9687: ST_TO_ADDR
// active :=  ;
9688: LD_ADDR_VAR 0 7
9692: PUSH
9693: LD_STRING 
9695: ST_TO_ADDR
// for i = 1 to normalCounter do
9696: LD_ADDR_VAR 0 8
9700: PUSH
9701: DOUBLE
9702: LD_INT 1
9704: DEC
9705: ST_TO_ADDR
9706: LD_EXP 24
9710: PUSH
9711: FOR_TO
9712: IFFALSE 9813
// begin tmp := 0 ;
9714: LD_ADDR_VAR 0 3
9718: PUSH
9719: LD_STRING 0
9721: ST_TO_ADDR
// if result [ 1 ] then
9722: LD_VAR 0 2
9726: PUSH
9727: LD_INT 1
9729: ARRAY
9730: IFFALSE 9795
// if result [ 1 ] [ 1 ] = i then
9732: LD_VAR 0 2
9736: PUSH
9737: LD_INT 1
9739: ARRAY
9740: PUSH
9741: LD_INT 1
9743: ARRAY
9744: PUSH
9745: LD_VAR 0 8
9749: EQUAL
9750: IFFALSE 9795
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9752: LD_ADDR_VAR 0 2
9756: PUSH
9757: LD_VAR 0 2
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: LD_VAR 0 2
9769: PUSH
9770: LD_INT 1
9772: ARRAY
9773: PPUSH
9774: LD_INT 1
9776: PPUSH
9777: CALL_OW 3
9781: PPUSH
9782: CALL_OW 1
9786: ST_TO_ADDR
// tmp := 1 ;
9787: LD_ADDR_VAR 0 3
9791: PUSH
9792: LD_STRING 1
9794: ST_TO_ADDR
// end ; normal := normal & tmp ;
9795: LD_ADDR_VAR 0 5
9799: PUSH
9800: LD_VAR 0 5
9804: PUSH
9805: LD_VAR 0 3
9809: STR
9810: ST_TO_ADDR
// end ;
9811: GO 9711
9813: POP
9814: POP
// for i = 1 to hardcoreCounter do
9815: LD_ADDR_VAR 0 8
9819: PUSH
9820: DOUBLE
9821: LD_INT 1
9823: DEC
9824: ST_TO_ADDR
9825: LD_EXP 25
9829: PUSH
9830: FOR_TO
9831: IFFALSE 9936
// begin tmp := 0 ;
9833: LD_ADDR_VAR 0 3
9837: PUSH
9838: LD_STRING 0
9840: ST_TO_ADDR
// if result [ 2 ] then
9841: LD_VAR 0 2
9845: PUSH
9846: LD_INT 2
9848: ARRAY
9849: IFFALSE 9918
// if result [ 2 ] [ 1 ] = 100 + i then
9851: LD_VAR 0 2
9855: PUSH
9856: LD_INT 2
9858: ARRAY
9859: PUSH
9860: LD_INT 1
9862: ARRAY
9863: PUSH
9864: LD_INT 100
9866: PUSH
9867: LD_VAR 0 8
9871: PLUS
9872: EQUAL
9873: IFFALSE 9918
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9875: LD_ADDR_VAR 0 2
9879: PUSH
9880: LD_VAR 0 2
9884: PPUSH
9885: LD_INT 2
9887: PPUSH
9888: LD_VAR 0 2
9892: PUSH
9893: LD_INT 2
9895: ARRAY
9896: PPUSH
9897: LD_INT 1
9899: PPUSH
9900: CALL_OW 3
9904: PPUSH
9905: CALL_OW 1
9909: ST_TO_ADDR
// tmp := 1 ;
9910: LD_ADDR_VAR 0 3
9914: PUSH
9915: LD_STRING 1
9917: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9918: LD_ADDR_VAR 0 6
9922: PUSH
9923: LD_VAR 0 6
9927: PUSH
9928: LD_VAR 0 3
9932: STR
9933: ST_TO_ADDR
// end ;
9934: GO 9830
9936: POP
9937: POP
// if isGameLoad then
9938: LD_VAR 0 1
9942: IFFALSE 10417
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9944: LD_ADDR_VAR 0 4
9948: PUSH
9949: LD_EXP 28
9953: PUSH
9954: LD_EXP 27
9958: PUSH
9959: LD_EXP 29
9963: PUSH
9964: LD_EXP 26
9968: PUSH
9969: LD_EXP 30
9973: PUSH
9974: LD_EXP 31
9978: PUSH
9979: LD_EXP 32
9983: PUSH
9984: LD_EXP 33
9988: PUSH
9989: LD_EXP 34
9993: PUSH
9994: LD_EXP 35
9998: PUSH
9999: LD_EXP 36
10003: PUSH
10004: LD_EXP 37
10008: PUSH
10009: LD_EXP 38
10013: PUSH
10014: LD_EXP 39
10018: PUSH
10019: LD_EXP 47
10023: PUSH
10024: LD_EXP 48
10028: PUSH
10029: LD_EXP 49
10033: PUSH
10034: LD_EXP 50
10038: PUSH
10039: LD_EXP 52
10043: PUSH
10044: LD_EXP 53
10048: PUSH
10049: LD_EXP 54
10053: PUSH
10054: LD_EXP 57
10058: PUSH
10059: LD_EXP 59
10063: PUSH
10064: LD_EXP 60
10068: PUSH
10069: LD_EXP 61
10073: PUSH
10074: LD_EXP 63
10078: PUSH
10079: LD_EXP 64
10083: PUSH
10084: LD_EXP 67
10088: PUSH
10089: LD_EXP 68
10093: PUSH
10094: LD_EXP 69
10098: PUSH
10099: LD_EXP 70
10103: PUSH
10104: LD_EXP 71
10108: PUSH
10109: LD_EXP 72
10113: PUSH
10114: LD_EXP 73
10118: PUSH
10119: LD_EXP 74
10123: PUSH
10124: LD_EXP 75
10128: PUSH
10129: LD_EXP 40
10133: PUSH
10134: LD_EXP 41
10138: PUSH
10139: LD_EXP 44
10143: PUSH
10144: LD_EXP 45
10148: PUSH
10149: LD_EXP 46
10153: PUSH
10154: LD_EXP 42
10158: PUSH
10159: LD_EXP 43
10163: PUSH
10164: LD_EXP 51
10168: PUSH
10169: LD_EXP 55
10173: PUSH
10174: LD_EXP 56
10178: PUSH
10179: LD_EXP 58
10183: PUSH
10184: LD_EXP 62
10188: PUSH
10189: LD_EXP 65
10193: PUSH
10194: LD_EXP 66
10198: PUSH
10199: LD_EXP 76
10203: PUSH
10204: LD_EXP 77
10208: PUSH
10209: LD_EXP 78
10213: PUSH
10214: LD_EXP 79
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
// tmp :=  ;
10275: LD_ADDR_VAR 0 3
10279: PUSH
10280: LD_STRING 
10282: ST_TO_ADDR
// for i = 1 to normalCounter do
10283: LD_ADDR_VAR 0 8
10287: PUSH
10288: DOUBLE
10289: LD_INT 1
10291: DEC
10292: ST_TO_ADDR
10293: LD_EXP 24
10297: PUSH
10298: FOR_TO
10299: IFFALSE 10335
// begin if flags [ i ] then
10301: LD_VAR 0 4
10305: PUSH
10306: LD_VAR 0 8
10310: ARRAY
10311: IFFALSE 10333
// tmp := tmp & i & ; ;
10313: LD_ADDR_VAR 0 3
10317: PUSH
10318: LD_VAR 0 3
10322: PUSH
10323: LD_VAR 0 8
10327: STR
10328: PUSH
10329: LD_STRING ;
10331: STR
10332: ST_TO_ADDR
// end ;
10333: GO 10298
10335: POP
10336: POP
// for i = 1 to hardcoreCounter do
10337: LD_ADDR_VAR 0 8
10341: PUSH
10342: DOUBLE
10343: LD_INT 1
10345: DEC
10346: ST_TO_ADDR
10347: LD_EXP 25
10351: PUSH
10352: FOR_TO
10353: IFFALSE 10399
// begin if flags [ normalCounter + i ] then
10355: LD_VAR 0 4
10359: PUSH
10360: LD_EXP 24
10364: PUSH
10365: LD_VAR 0 8
10369: PLUS
10370: ARRAY
10371: IFFALSE 10397
// tmp := tmp & ( 100 + i ) & ; ;
10373: LD_ADDR_VAR 0 3
10377: PUSH
10378: LD_VAR 0 3
10382: PUSH
10383: LD_INT 100
10385: PUSH
10386: LD_VAR 0 8
10390: PLUS
10391: STR
10392: PUSH
10393: LD_STRING ;
10395: STR
10396: ST_TO_ADDR
// end ;
10397: GO 10352
10399: POP
10400: POP
// if tmp then
10401: LD_VAR 0 3
10405: IFFALSE 10417
// active := tmp ;
10407: LD_ADDR_VAR 0 7
10411: PUSH
10412: LD_VAR 0 3
10416: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10417: LD_STRING getStreamItemsFromMission("
10419: PUSH
10420: LD_VAR 0 5
10424: STR
10425: PUSH
10426: LD_STRING ","
10428: STR
10429: PUSH
10430: LD_VAR 0 6
10434: STR
10435: PUSH
10436: LD_STRING ","
10438: STR
10439: PUSH
10440: LD_VAR 0 7
10444: STR
10445: PUSH
10446: LD_STRING ")
10448: STR
10449: PPUSH
10450: CALL_OW 559
// end else
10454: GO 10463
// ToLua ( getStreamItemsFromMission("","","") ) ;
10456: LD_STRING getStreamItemsFromMission("","","")
10458: PPUSH
10459: CALL_OW 559
// end ;
10463: LD_VAR 0 2
10467: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10468: LD_EXP 23
10472: PUSH
10473: LD_EXP 28
10477: AND
10478: IFFALSE 10602
10480: GO 10482
10482: DISABLE
10483: LD_INT 0
10485: PPUSH
10486: PPUSH
// begin enable ;
10487: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10488: LD_ADDR_VAR 0 2
10492: PUSH
10493: LD_INT 22
10495: PUSH
10496: LD_OWVAR 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: LD_INT 2
10507: PUSH
10508: LD_INT 34
10510: PUSH
10511: LD_INT 7
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: LD_INT 34
10520: PUSH
10521: LD_INT 45
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 34
10530: PUSH
10531: LD_INT 28
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 34
10540: PUSH
10541: LD_INT 47
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PPUSH
10559: CALL_OW 69
10563: ST_TO_ADDR
// if not tmp then
10564: LD_VAR 0 2
10568: NOT
10569: IFFALSE 10573
// exit ;
10571: GO 10602
// for i in tmp do
10573: LD_ADDR_VAR 0 1
10577: PUSH
10578: LD_VAR 0 2
10582: PUSH
10583: FOR_IN
10584: IFFALSE 10600
// begin SetLives ( i , 0 ) ;
10586: LD_VAR 0 1
10590: PPUSH
10591: LD_INT 0
10593: PPUSH
10594: CALL_OW 234
// end ;
10598: GO 10583
10600: POP
10601: POP
// end ;
10602: PPOPN 2
10604: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10605: LD_EXP 23
10609: PUSH
10610: LD_EXP 29
10614: AND
10615: IFFALSE 10699
10617: GO 10619
10619: DISABLE
10620: LD_INT 0
10622: PPUSH
10623: PPUSH
// begin enable ;
10624: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10625: LD_ADDR_VAR 0 2
10629: PUSH
10630: LD_INT 22
10632: PUSH
10633: LD_OWVAR 2
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: LD_INT 32
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PPUSH
10656: CALL_OW 69
10660: ST_TO_ADDR
// if not tmp then
10661: LD_VAR 0 2
10665: NOT
10666: IFFALSE 10670
// exit ;
10668: GO 10699
// for i in tmp do
10670: LD_ADDR_VAR 0 1
10674: PUSH
10675: LD_VAR 0 2
10679: PUSH
10680: FOR_IN
10681: IFFALSE 10697
// begin SetLives ( i , 0 ) ;
10683: LD_VAR 0 1
10687: PPUSH
10688: LD_INT 0
10690: PPUSH
10691: CALL_OW 234
// end ;
10695: GO 10680
10697: POP
10698: POP
// end ;
10699: PPOPN 2
10701: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10702: LD_EXP 23
10706: PUSH
10707: LD_EXP 26
10711: AND
10712: IFFALSE 10805
10714: GO 10716
10716: DISABLE
10717: LD_INT 0
10719: PPUSH
// begin enable ;
10720: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10721: LD_ADDR_VAR 0 1
10725: PUSH
10726: LD_INT 22
10728: PUSH
10729: LD_OWVAR 2
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 5
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 9
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 8
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PPUSH
10781: CALL_OW 69
10785: PUSH
10786: FOR_IN
10787: IFFALSE 10803
// begin SetClass ( i , 1 ) ;
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_INT 1
10796: PPUSH
10797: CALL_OW 336
// end ;
10801: GO 10786
10803: POP
10804: POP
// end ;
10805: PPOPN 1
10807: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10808: LD_EXP 23
10812: PUSH
10813: LD_EXP 27
10817: AND
10818: PUSH
10819: LD_OWVAR 65
10823: PUSH
10824: LD_INT 7
10826: LESS
10827: AND
10828: IFFALSE 10842
10830: GO 10832
10832: DISABLE
// begin enable ;
10833: ENABLE
// game_speed := 7 ;
10834: LD_ADDR_OWVAR 65
10838: PUSH
10839: LD_INT 7
10841: ST_TO_ADDR
// end ;
10842: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10843: LD_EXP 23
10847: PUSH
10848: LD_EXP 30
10852: AND
10853: IFFALSE 11055
10855: GO 10857
10857: DISABLE
10858: LD_INT 0
10860: PPUSH
10861: PPUSH
10862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10863: LD_ADDR_VAR 0 3
10867: PUSH
10868: LD_INT 81
10870: PUSH
10871: LD_OWVAR 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 21
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PPUSH
10894: CALL_OW 69
10898: ST_TO_ADDR
// if not tmp then
10899: LD_VAR 0 3
10903: NOT
10904: IFFALSE 10908
// exit ;
10906: GO 11055
// if tmp > 5 then
10908: LD_VAR 0 3
10912: PUSH
10913: LD_INT 5
10915: GREATER
10916: IFFALSE 10928
// k := 5 else
10918: LD_ADDR_VAR 0 2
10922: PUSH
10923: LD_INT 5
10925: ST_TO_ADDR
10926: GO 10938
// k := tmp ;
10928: LD_ADDR_VAR 0 2
10932: PUSH
10933: LD_VAR 0 3
10937: ST_TO_ADDR
// for i := 1 to k do
10938: LD_ADDR_VAR 0 1
10942: PUSH
10943: DOUBLE
10944: LD_INT 1
10946: DEC
10947: ST_TO_ADDR
10948: LD_VAR 0 2
10952: PUSH
10953: FOR_TO
10954: IFFALSE 11053
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10956: LD_VAR 0 3
10960: PUSH
10961: LD_VAR 0 1
10965: ARRAY
10966: PPUSH
10967: LD_VAR 0 1
10971: PUSH
10972: LD_INT 4
10974: MOD
10975: PUSH
10976: LD_INT 1
10978: PLUS
10979: PPUSH
10980: CALL_OW 259
10984: PUSH
10985: LD_INT 10
10987: LESS
10988: IFFALSE 11051
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10990: LD_VAR 0 3
10994: PUSH
10995: LD_VAR 0 1
10999: ARRAY
11000: PPUSH
11001: LD_VAR 0 1
11005: PUSH
11006: LD_INT 4
11008: MOD
11009: PUSH
11010: LD_INT 1
11012: PLUS
11013: PPUSH
11014: LD_VAR 0 3
11018: PUSH
11019: LD_VAR 0 1
11023: ARRAY
11024: PPUSH
11025: LD_VAR 0 1
11029: PUSH
11030: LD_INT 4
11032: MOD
11033: PUSH
11034: LD_INT 1
11036: PLUS
11037: PPUSH
11038: CALL_OW 259
11042: PUSH
11043: LD_INT 1
11045: PLUS
11046: PPUSH
11047: CALL_OW 237
11051: GO 10953
11053: POP
11054: POP
// end ;
11055: PPOPN 3
11057: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
11058: LD_EXP 23
11062: PUSH
11063: LD_EXP 31
11067: AND
11068: IFFALSE 11088
11070: GO 11072
11072: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
11073: LD_INT 4
11075: PPUSH
11076: LD_OWVAR 2
11080: PPUSH
11081: LD_INT 0
11083: PPUSH
11084: CALL_OW 324
11088: END
// every 0 0$1 trigger StreamModeActive and sShovel do
11089: LD_EXP 23
11093: PUSH
11094: LD_EXP 60
11098: AND
11099: IFFALSE 11119
11101: GO 11103
11103: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
11104: LD_INT 19
11106: PPUSH
11107: LD_OWVAR 2
11111: PPUSH
11112: LD_INT 0
11114: PPUSH
11115: CALL_OW 324
11119: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
11120: LD_EXP 23
11124: PUSH
11125: LD_EXP 32
11129: AND
11130: IFFALSE 11232
11132: GO 11134
11134: DISABLE
11135: LD_INT 0
11137: PPUSH
11138: PPUSH
// begin enable ;
11139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
11140: LD_ADDR_VAR 0 2
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_OWVAR 2
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 2
11159: PUSH
11160: LD_INT 34
11162: PUSH
11163: LD_INT 11
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 34
11172: PUSH
11173: LD_INT 30
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 69
11193: ST_TO_ADDR
// if not tmp then
11194: LD_VAR 0 2
11198: NOT
11199: IFFALSE 11203
// exit ;
11201: GO 11232
// for i in tmp do
11203: LD_ADDR_VAR 0 1
11207: PUSH
11208: LD_VAR 0 2
11212: PUSH
11213: FOR_IN
11214: IFFALSE 11230
// begin SetLives ( i , 0 ) ;
11216: LD_VAR 0 1
11220: PPUSH
11221: LD_INT 0
11223: PPUSH
11224: CALL_OW 234
// end ;
11228: GO 11213
11230: POP
11231: POP
// end ;
11232: PPOPN 2
11234: END
// every 0 0$1 trigger StreamModeActive and sBunker do
11235: LD_EXP 23
11239: PUSH
11240: LD_EXP 33
11244: AND
11245: IFFALSE 11265
11247: GO 11249
11249: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11250: LD_INT 32
11252: PPUSH
11253: LD_OWVAR 2
11257: PPUSH
11258: LD_INT 0
11260: PPUSH
11261: CALL_OW 324
11265: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11266: LD_EXP 23
11270: PUSH
11271: LD_EXP 34
11275: AND
11276: IFFALSE 11457
11278: GO 11280
11280: DISABLE
11281: LD_INT 0
11283: PPUSH
11284: PPUSH
11285: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11286: LD_ADDR_VAR 0 2
11290: PUSH
11291: LD_INT 22
11293: PUSH
11294: LD_OWVAR 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 33
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PPUSH
11317: CALL_OW 69
11321: ST_TO_ADDR
// if not tmp then
11322: LD_VAR 0 2
11326: NOT
11327: IFFALSE 11331
// exit ;
11329: GO 11457
// side := 0 ;
11331: LD_ADDR_VAR 0 3
11335: PUSH
11336: LD_INT 0
11338: ST_TO_ADDR
// for i := 1 to 8 do
11339: LD_ADDR_VAR 0 1
11343: PUSH
11344: DOUBLE
11345: LD_INT 1
11347: DEC
11348: ST_TO_ADDR
11349: LD_INT 8
11351: PUSH
11352: FOR_TO
11353: IFFALSE 11401
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11355: LD_OWVAR 2
11359: PUSH
11360: LD_VAR 0 1
11364: NONEQUAL
11365: PUSH
11366: LD_OWVAR 2
11370: PPUSH
11371: LD_VAR 0 1
11375: PPUSH
11376: CALL_OW 81
11380: PUSH
11381: LD_INT 2
11383: EQUAL
11384: AND
11385: IFFALSE 11399
// begin side := i ;
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: LD_VAR 0 1
11396: ST_TO_ADDR
// break ;
11397: GO 11401
// end ;
11399: GO 11352
11401: POP
11402: POP
// if not side then
11403: LD_VAR 0 3
11407: NOT
11408: IFFALSE 11412
// exit ;
11410: GO 11457
// for i := 1 to tmp do
11412: LD_ADDR_VAR 0 1
11416: PUSH
11417: DOUBLE
11418: LD_INT 1
11420: DEC
11421: ST_TO_ADDR
11422: LD_VAR 0 2
11426: PUSH
11427: FOR_TO
11428: IFFALSE 11455
// if Prob ( 60 ) then
11430: LD_INT 60
11432: PPUSH
11433: CALL_OW 13
11437: IFFALSE 11453
// SetSide ( i , side ) ;
11439: LD_VAR 0 1
11443: PPUSH
11444: LD_VAR 0 3
11448: PPUSH
11449: CALL_OW 235
11453: GO 11427
11455: POP
11456: POP
// end ;
11457: PPOPN 3
11459: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11460: LD_EXP 23
11464: PUSH
11465: LD_EXP 36
11469: AND
11470: IFFALSE 11589
11472: GO 11474
11474: DISABLE
11475: LD_INT 0
11477: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11478: LD_ADDR_VAR 0 1
11482: PUSH
11483: LD_INT 22
11485: PUSH
11486: LD_OWVAR 2
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 21
11497: PUSH
11498: LD_INT 1
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 3
11507: PUSH
11508: LD_INT 23
11510: PUSH
11511: LD_INT 0
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: EMPTY
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: PUSH
11532: FOR_IN
11533: IFFALSE 11587
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11535: LD_VAR 0 1
11539: PPUSH
11540: CALL_OW 257
11544: PUSH
11545: LD_INT 1
11547: PUSH
11548: LD_INT 2
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: LD_INT 4
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: IN
11563: IFFALSE 11585
// SetClass ( un , rand ( 1 , 4 ) ) ;
11565: LD_VAR 0 1
11569: PPUSH
11570: LD_INT 1
11572: PPUSH
11573: LD_INT 4
11575: PPUSH
11576: CALL_OW 12
11580: PPUSH
11581: CALL_OW 336
11585: GO 11532
11587: POP
11588: POP
// end ;
11589: PPOPN 1
11591: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11592: LD_EXP 23
11596: PUSH
11597: LD_EXP 35
11601: AND
11602: IFFALSE 11681
11604: GO 11606
11606: DISABLE
11607: LD_INT 0
11609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11610: LD_ADDR_VAR 0 1
11614: PUSH
11615: LD_INT 22
11617: PUSH
11618: LD_OWVAR 2
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 21
11629: PUSH
11630: LD_INT 3
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: ST_TO_ADDR
// if not tmp then
11646: LD_VAR 0 1
11650: NOT
11651: IFFALSE 11655
// exit ;
11653: GO 11681
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11655: LD_VAR 0 1
11659: PUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_VAR 0 1
11667: PPUSH
11668: CALL_OW 12
11672: ARRAY
11673: PPUSH
11674: LD_INT 100
11676: PPUSH
11677: CALL_OW 234
// end ;
11681: PPOPN 1
11683: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11684: LD_EXP 23
11688: PUSH
11689: LD_EXP 37
11693: AND
11694: IFFALSE 11792
11696: GO 11698
11698: DISABLE
11699: LD_INT 0
11701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11702: LD_ADDR_VAR 0 1
11706: PUSH
11707: LD_INT 22
11709: PUSH
11710: LD_OWVAR 2
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: LD_INT 21
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PPUSH
11733: CALL_OW 69
11737: ST_TO_ADDR
// if not tmp then
11738: LD_VAR 0 1
11742: NOT
11743: IFFALSE 11747
// exit ;
11745: GO 11792
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11747: LD_VAR 0 1
11751: PUSH
11752: LD_INT 1
11754: PPUSH
11755: LD_VAR 0 1
11759: PPUSH
11760: CALL_OW 12
11764: ARRAY
11765: PPUSH
11766: LD_INT 1
11768: PPUSH
11769: LD_INT 4
11771: PPUSH
11772: CALL_OW 12
11776: PPUSH
11777: LD_INT 3000
11779: PPUSH
11780: LD_INT 9000
11782: PPUSH
11783: CALL_OW 12
11787: PPUSH
11788: CALL_OW 492
// end ;
11792: PPOPN 1
11794: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11795: LD_EXP 23
11799: PUSH
11800: LD_EXP 38
11804: AND
11805: IFFALSE 11825
11807: GO 11809
11809: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11810: LD_INT 1
11812: PPUSH
11813: LD_OWVAR 2
11817: PPUSH
11818: LD_INT 0
11820: PPUSH
11821: CALL_OW 324
11825: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11826: LD_EXP 23
11830: PUSH
11831: LD_EXP 39
11835: AND
11836: IFFALSE 11919
11838: GO 11840
11840: DISABLE
11841: LD_INT 0
11843: PPUSH
11844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11845: LD_ADDR_VAR 0 2
11849: PUSH
11850: LD_INT 22
11852: PUSH
11853: LD_OWVAR 2
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 21
11864: PUSH
11865: LD_INT 3
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: PUSH
11872: EMPTY
11873: LIST
11874: LIST
11875: PPUSH
11876: CALL_OW 69
11880: ST_TO_ADDR
// if not tmp then
11881: LD_VAR 0 2
11885: NOT
11886: IFFALSE 11890
// exit ;
11888: GO 11919
// for i in tmp do
11890: LD_ADDR_VAR 0 1
11894: PUSH
11895: LD_VAR 0 2
11899: PUSH
11900: FOR_IN
11901: IFFALSE 11917
// SetBLevel ( i , 10 ) ;
11903: LD_VAR 0 1
11907: PPUSH
11908: LD_INT 10
11910: PPUSH
11911: CALL_OW 241
11915: GO 11900
11917: POP
11918: POP
// end ;
11919: PPOPN 2
11921: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11922: LD_EXP 23
11926: PUSH
11927: LD_EXP 40
11931: AND
11932: IFFALSE 12043
11934: GO 11936
11936: DISABLE
11937: LD_INT 0
11939: PPUSH
11940: PPUSH
11941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11942: LD_ADDR_VAR 0 3
11946: PUSH
11947: LD_INT 22
11949: PUSH
11950: LD_OWVAR 2
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 25
11961: PUSH
11962: LD_INT 1
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PPUSH
11973: CALL_OW 69
11977: ST_TO_ADDR
// if not tmp then
11978: LD_VAR 0 3
11982: NOT
11983: IFFALSE 11987
// exit ;
11985: GO 12043
// un := tmp [ rand ( 1 , tmp ) ] ;
11987: LD_ADDR_VAR 0 2
11991: PUSH
11992: LD_VAR 0 3
11996: PUSH
11997: LD_INT 1
11999: PPUSH
12000: LD_VAR 0 3
12004: PPUSH
12005: CALL_OW 12
12009: ARRAY
12010: ST_TO_ADDR
// if Crawls ( un ) then
12011: LD_VAR 0 2
12015: PPUSH
12016: CALL_OW 318
12020: IFFALSE 12031
// ComWalk ( un ) ;
12022: LD_VAR 0 2
12026: PPUSH
12027: CALL_OW 138
// SetClass ( un , class_sniper ) ;
12031: LD_VAR 0 2
12035: PPUSH
12036: LD_INT 5
12038: PPUSH
12039: CALL_OW 336
// end ;
12043: PPOPN 3
12045: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
12046: LD_EXP 23
12050: PUSH
12051: LD_EXP 41
12055: AND
12056: PUSH
12057: LD_OWVAR 67
12061: PUSH
12062: LD_INT 4
12064: LESS
12065: AND
12066: IFFALSE 12085
12068: GO 12070
12070: DISABLE
// begin Difficulty := Difficulty + 1 ;
12071: LD_ADDR_OWVAR 67
12075: PUSH
12076: LD_OWVAR 67
12080: PUSH
12081: LD_INT 1
12083: PLUS
12084: ST_TO_ADDR
// end ;
12085: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
12086: LD_EXP 23
12090: PUSH
12091: LD_EXP 42
12095: AND
12096: IFFALSE 12199
12098: GO 12100
12100: DISABLE
12101: LD_INT 0
12103: PPUSH
// begin for i := 1 to 5 do
12104: LD_ADDR_VAR 0 1
12108: PUSH
12109: DOUBLE
12110: LD_INT 1
12112: DEC
12113: ST_TO_ADDR
12114: LD_INT 5
12116: PUSH
12117: FOR_TO
12118: IFFALSE 12197
// begin uc_nation := nation_nature ;
12120: LD_ADDR_OWVAR 21
12124: PUSH
12125: LD_INT 0
12127: ST_TO_ADDR
// uc_side := 0 ;
12128: LD_ADDR_OWVAR 20
12132: PUSH
12133: LD_INT 0
12135: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12136: LD_ADDR_OWVAR 29
12140: PUSH
12141: LD_INT 12
12143: PUSH
12144: LD_INT 12
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: ST_TO_ADDR
// hc_agressivity := 20 ;
12151: LD_ADDR_OWVAR 35
12155: PUSH
12156: LD_INT 20
12158: ST_TO_ADDR
// hc_class := class_tiger ;
12159: LD_ADDR_OWVAR 28
12163: PUSH
12164: LD_INT 14
12166: ST_TO_ADDR
// hc_gallery :=  ;
12167: LD_ADDR_OWVAR 33
12171: PUSH
12172: LD_STRING 
12174: ST_TO_ADDR
// hc_name :=  ;
12175: LD_ADDR_OWVAR 26
12179: PUSH
12180: LD_STRING 
12182: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
12183: CALL_OW 44
12187: PPUSH
12188: LD_INT 0
12190: PPUSH
12191: CALL_OW 51
// end ;
12195: GO 12117
12197: POP
12198: POP
// end ;
12199: PPOPN 1
12201: END
// every 0 0$1 trigger StreamModeActive and sBomb do
12202: LD_EXP 23
12206: PUSH
12207: LD_EXP 43
12211: AND
12212: IFFALSE 12221
12214: GO 12216
12216: DISABLE
// StreamSibBomb ;
12217: CALL 12222 0 0
12221: END
// export function StreamSibBomb ; var i , x , y ; begin
12222: LD_INT 0
12224: PPUSH
12225: PPUSH
12226: PPUSH
12227: PPUSH
// result := false ;
12228: LD_ADDR_VAR 0 1
12232: PUSH
12233: LD_INT 0
12235: ST_TO_ADDR
// for i := 1 to 16 do
12236: LD_ADDR_VAR 0 2
12240: PUSH
12241: DOUBLE
12242: LD_INT 1
12244: DEC
12245: ST_TO_ADDR
12246: LD_INT 16
12248: PUSH
12249: FOR_TO
12250: IFFALSE 12449
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12252: LD_ADDR_VAR 0 3
12256: PUSH
12257: LD_INT 10
12259: PUSH
12260: LD_INT 20
12262: PUSH
12263: LD_INT 30
12265: PUSH
12266: LD_INT 40
12268: PUSH
12269: LD_INT 50
12271: PUSH
12272: LD_INT 60
12274: PUSH
12275: LD_INT 70
12277: PUSH
12278: LD_INT 80
12280: PUSH
12281: LD_INT 90
12283: PUSH
12284: LD_INT 100
12286: PUSH
12287: LD_INT 110
12289: PUSH
12290: LD_INT 120
12292: PUSH
12293: LD_INT 130
12295: PUSH
12296: LD_INT 140
12298: PUSH
12299: LD_INT 150
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 1
12321: PPUSH
12322: LD_INT 15
12324: PPUSH
12325: CALL_OW 12
12329: ARRAY
12330: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12331: LD_ADDR_VAR 0 4
12335: PUSH
12336: LD_INT 10
12338: PUSH
12339: LD_INT 20
12341: PUSH
12342: LD_INT 30
12344: PUSH
12345: LD_INT 40
12347: PUSH
12348: LD_INT 50
12350: PUSH
12351: LD_INT 60
12353: PUSH
12354: LD_INT 70
12356: PUSH
12357: LD_INT 80
12359: PUSH
12360: LD_INT 90
12362: PUSH
12363: LD_INT 100
12365: PUSH
12366: LD_INT 110
12368: PUSH
12369: LD_INT 120
12371: PUSH
12372: LD_INT 130
12374: PUSH
12375: LD_INT 140
12377: PUSH
12378: LD_INT 150
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 1
12400: PPUSH
12401: LD_INT 15
12403: PPUSH
12404: CALL_OW 12
12408: ARRAY
12409: ST_TO_ADDR
// if ValidHex ( x , y ) then
12410: LD_VAR 0 3
12414: PPUSH
12415: LD_VAR 0 4
12419: PPUSH
12420: CALL_OW 488
12424: IFFALSE 12447
// begin result := [ x , y ] ;
12426: LD_ADDR_VAR 0 1
12430: PUSH
12431: LD_VAR 0 3
12435: PUSH
12436: LD_VAR 0 4
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: ST_TO_ADDR
// break ;
12445: GO 12449
// end ; end ;
12447: GO 12249
12449: POP
12450: POP
// if result then
12451: LD_VAR 0 1
12455: IFFALSE 12515
// begin ToLua ( playSibBomb() ) ;
12457: LD_STRING playSibBomb()
12459: PPUSH
12460: CALL_OW 559
// wait ( 0 0$14 ) ;
12464: LD_INT 490
12466: PPUSH
12467: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12471: LD_VAR 0 1
12475: PUSH
12476: LD_INT 1
12478: ARRAY
12479: PPUSH
12480: LD_VAR 0 1
12484: PUSH
12485: LD_INT 2
12487: ARRAY
12488: PPUSH
12489: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12493: LD_VAR 0 1
12497: PUSH
12498: LD_INT 1
12500: ARRAY
12501: PPUSH
12502: LD_VAR 0 1
12506: PUSH
12507: LD_INT 2
12509: ARRAY
12510: PPUSH
12511: CALL_OW 429
// end ; end ;
12515: LD_VAR 0 1
12519: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12520: LD_EXP 23
12524: PUSH
12525: LD_EXP 45
12529: AND
12530: IFFALSE 12542
12532: GO 12534
12534: DISABLE
// YouLost (  ) ;
12535: LD_STRING 
12537: PPUSH
12538: CALL_OW 104
12542: END
// every 0 0$1 trigger StreamModeActive and sFog do
12543: LD_EXP 23
12547: PUSH
12548: LD_EXP 44
12552: AND
12553: IFFALSE 12567
12555: GO 12557
12557: DISABLE
// FogOff ( your_side ) ;
12558: LD_OWVAR 2
12562: PPUSH
12563: CALL_OW 344
12567: END
// every 0 0$1 trigger StreamModeActive and sSun do
12568: LD_EXP 23
12572: PUSH
12573: LD_EXP 46
12577: AND
12578: IFFALSE 12606
12580: GO 12582
12582: DISABLE
// begin solar_recharge_percent := 0 ;
12583: LD_ADDR_OWVAR 79
12587: PUSH
12588: LD_INT 0
12590: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12591: LD_INT 10500
12593: PPUSH
12594: CALL_OW 67
// solar_recharge_percent := 100 ;
12598: LD_ADDR_OWVAR 79
12602: PUSH
12603: LD_INT 100
12605: ST_TO_ADDR
// end ;
12606: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12607: LD_EXP 23
12611: PUSH
12612: LD_EXP 47
12616: AND
12617: IFFALSE 12856
12619: GO 12621
12621: DISABLE
12622: LD_INT 0
12624: PPUSH
12625: PPUSH
12626: PPUSH
// begin tmp := [ ] ;
12627: LD_ADDR_VAR 0 3
12631: PUSH
12632: EMPTY
12633: ST_TO_ADDR
// for i := 1 to 6 do
12634: LD_ADDR_VAR 0 1
12638: PUSH
12639: DOUBLE
12640: LD_INT 1
12642: DEC
12643: ST_TO_ADDR
12644: LD_INT 6
12646: PUSH
12647: FOR_TO
12648: IFFALSE 12753
// begin uc_nation := nation_nature ;
12650: LD_ADDR_OWVAR 21
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// uc_side := 0 ;
12658: LD_ADDR_OWVAR 20
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12666: LD_ADDR_OWVAR 29
12670: PUSH
12671: LD_INT 12
12673: PUSH
12674: LD_INT 12
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: ST_TO_ADDR
// hc_agressivity := 20 ;
12681: LD_ADDR_OWVAR 35
12685: PUSH
12686: LD_INT 20
12688: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12689: LD_ADDR_OWVAR 28
12693: PUSH
12694: LD_INT 17
12696: ST_TO_ADDR
// hc_gallery :=  ;
12697: LD_ADDR_OWVAR 33
12701: PUSH
12702: LD_STRING 
12704: ST_TO_ADDR
// hc_name :=  ;
12705: LD_ADDR_OWVAR 26
12709: PUSH
12710: LD_STRING 
12712: ST_TO_ADDR
// un := CreateHuman ;
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: CALL_OW 44
12722: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12723: LD_VAR 0 2
12727: PPUSH
12728: LD_INT 1
12730: PPUSH
12731: CALL_OW 51
// tmp := tmp ^ un ;
12735: LD_ADDR_VAR 0 3
12739: PUSH
12740: LD_VAR 0 3
12744: PUSH
12745: LD_VAR 0 2
12749: ADD
12750: ST_TO_ADDR
// end ;
12751: GO 12647
12753: POP
12754: POP
// repeat wait ( 0 0$1 ) ;
12755: LD_INT 35
12757: PPUSH
12758: CALL_OW 67
// for un in tmp do
12762: LD_ADDR_VAR 0 2
12766: PUSH
12767: LD_VAR 0 3
12771: PUSH
12772: FOR_IN
12773: IFFALSE 12847
// begin if IsDead ( un ) then
12775: LD_VAR 0 2
12779: PPUSH
12780: CALL_OW 301
12784: IFFALSE 12804
// begin tmp := tmp diff un ;
12786: LD_ADDR_VAR 0 3
12790: PUSH
12791: LD_VAR 0 3
12795: PUSH
12796: LD_VAR 0 2
12800: DIFF
12801: ST_TO_ADDR
// continue ;
12802: GO 12772
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12804: LD_VAR 0 2
12808: PPUSH
12809: LD_INT 3
12811: PUSH
12812: LD_INT 22
12814: PUSH
12815: LD_INT 0
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PPUSH
12826: CALL_OW 69
12830: PPUSH
12831: LD_VAR 0 2
12835: PPUSH
12836: CALL_OW 74
12840: PPUSH
12841: CALL_OW 115
// end ;
12845: GO 12772
12847: POP
12848: POP
// until not tmp ;
12849: LD_VAR 0 3
12853: NOT
12854: IFFALSE 12755
// end ;
12856: PPOPN 3
12858: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12859: LD_EXP 23
12863: PUSH
12864: LD_EXP 48
12868: AND
12869: IFFALSE 12923
12871: GO 12873
12873: DISABLE
// begin ToLua ( displayTroll(); ) ;
12874: LD_STRING displayTroll();
12876: PPUSH
12877: CALL_OW 559
// wait ( 3 3$00 ) ;
12881: LD_INT 6300
12883: PPUSH
12884: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12888: LD_STRING hideTroll();
12890: PPUSH
12891: CALL_OW 559
// wait ( 1 1$00 ) ;
12895: LD_INT 2100
12897: PPUSH
12898: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12902: LD_STRING displayTroll();
12904: PPUSH
12905: CALL_OW 559
// wait ( 1 1$00 ) ;
12909: LD_INT 2100
12911: PPUSH
12912: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12916: LD_STRING hideTroll();
12918: PPUSH
12919: CALL_OW 559
// end ;
12923: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12924: LD_EXP 23
12928: PUSH
12929: LD_EXP 49
12933: AND
12934: IFFALSE 12997
12936: GO 12938
12938: DISABLE
12939: LD_INT 0
12941: PPUSH
// begin p := 0 ;
12942: LD_ADDR_VAR 0 1
12946: PUSH
12947: LD_INT 0
12949: ST_TO_ADDR
// repeat game_speed := 1 ;
12950: LD_ADDR_OWVAR 65
12954: PUSH
12955: LD_INT 1
12957: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12958: LD_INT 35
12960: PPUSH
12961: CALL_OW 67
// p := p + 1 ;
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: LD_VAR 0 1
12974: PUSH
12975: LD_INT 1
12977: PLUS
12978: ST_TO_ADDR
// until p >= 60 ;
12979: LD_VAR 0 1
12983: PUSH
12984: LD_INT 60
12986: GREATEREQUAL
12987: IFFALSE 12950
// game_speed := 4 ;
12989: LD_ADDR_OWVAR 65
12993: PUSH
12994: LD_INT 4
12996: ST_TO_ADDR
// end ;
12997: PPOPN 1
12999: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
13000: LD_EXP 23
13004: PUSH
13005: LD_EXP 50
13009: AND
13010: IFFALSE 13156
13012: GO 13014
13014: DISABLE
13015: LD_INT 0
13017: PPUSH
13018: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13019: LD_ADDR_VAR 0 1
13023: PUSH
13024: LD_INT 22
13026: PUSH
13027: LD_OWVAR 2
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 2
13038: PUSH
13039: LD_INT 30
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 1
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PPUSH
13068: CALL_OW 69
13072: ST_TO_ADDR
// if not depot then
13073: LD_VAR 0 1
13077: NOT
13078: IFFALSE 13082
// exit ;
13080: GO 13156
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
13082: LD_ADDR_VAR 0 2
13086: PUSH
13087: LD_VAR 0 1
13091: PUSH
13092: LD_INT 1
13094: PPUSH
13095: LD_VAR 0 1
13099: PPUSH
13100: CALL_OW 12
13104: ARRAY
13105: PPUSH
13106: CALL_OW 274
13110: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
13111: LD_VAR 0 2
13115: PPUSH
13116: LD_INT 1
13118: PPUSH
13119: LD_INT 0
13121: PPUSH
13122: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
13126: LD_VAR 0 2
13130: PPUSH
13131: LD_INT 2
13133: PPUSH
13134: LD_INT 0
13136: PPUSH
13137: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
13141: LD_VAR 0 2
13145: PPUSH
13146: LD_INT 3
13148: PPUSH
13149: LD_INT 0
13151: PPUSH
13152: CALL_OW 277
// end ;
13156: PPOPN 2
13158: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
13159: LD_EXP 23
13163: PUSH
13164: LD_EXP 51
13168: AND
13169: IFFALSE 13266
13171: GO 13173
13173: DISABLE
13174: LD_INT 0
13176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13177: LD_ADDR_VAR 0 1
13181: PUSH
13182: LD_INT 22
13184: PUSH
13185: LD_OWVAR 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 21
13196: PUSH
13197: LD_INT 1
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 3
13206: PUSH
13207: LD_INT 23
13209: PUSH
13210: LD_INT 0
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: LIST
13225: PPUSH
13226: CALL_OW 69
13230: ST_TO_ADDR
// if not tmp then
13231: LD_VAR 0 1
13235: NOT
13236: IFFALSE 13240
// exit ;
13238: GO 13266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13240: LD_VAR 0 1
13244: PUSH
13245: LD_INT 1
13247: PPUSH
13248: LD_VAR 0 1
13252: PPUSH
13253: CALL_OW 12
13257: ARRAY
13258: PPUSH
13259: LD_INT 200
13261: PPUSH
13262: CALL_OW 234
// end ;
13266: PPOPN 1
13268: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13269: LD_EXP 23
13273: PUSH
13274: LD_EXP 52
13278: AND
13279: IFFALSE 13358
13281: GO 13283
13283: DISABLE
13284: LD_INT 0
13286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13287: LD_ADDR_VAR 0 1
13291: PUSH
13292: LD_INT 22
13294: PUSH
13295: LD_OWVAR 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 21
13306: PUSH
13307: LD_INT 2
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: ST_TO_ADDR
// if not tmp then
13323: LD_VAR 0 1
13327: NOT
13328: IFFALSE 13332
// exit ;
13330: GO 13358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13332: LD_VAR 0 1
13336: PUSH
13337: LD_INT 1
13339: PPUSH
13340: LD_VAR 0 1
13344: PPUSH
13345: CALL_OW 12
13349: ARRAY
13350: PPUSH
13351: LD_INT 60
13353: PPUSH
13354: CALL_OW 234
// end ;
13358: PPOPN 1
13360: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13361: LD_EXP 23
13365: PUSH
13366: LD_EXP 53
13370: AND
13371: IFFALSE 13470
13373: GO 13375
13375: DISABLE
13376: LD_INT 0
13378: PPUSH
13379: PPUSH
// begin enable ;
13380: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13381: LD_ADDR_VAR 0 1
13385: PUSH
13386: LD_INT 22
13388: PUSH
13389: LD_OWVAR 2
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 61
13400: PUSH
13401: EMPTY
13402: LIST
13403: PUSH
13404: LD_INT 33
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: LIST
13418: PPUSH
13419: CALL_OW 69
13423: ST_TO_ADDR
// if not tmp then
13424: LD_VAR 0 1
13428: NOT
13429: IFFALSE 13433
// exit ;
13431: GO 13470
// for i in tmp do
13433: LD_ADDR_VAR 0 2
13437: PUSH
13438: LD_VAR 0 1
13442: PUSH
13443: FOR_IN
13444: IFFALSE 13468
// if IsControledBy ( i ) then
13446: LD_VAR 0 2
13450: PPUSH
13451: CALL_OW 312
13455: IFFALSE 13466
// ComUnlink ( i ) ;
13457: LD_VAR 0 2
13461: PPUSH
13462: CALL_OW 136
13466: GO 13443
13468: POP
13469: POP
// end ;
13470: PPOPN 2
13472: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13473: LD_EXP 23
13477: PUSH
13478: LD_EXP 54
13482: AND
13483: IFFALSE 13623
13485: GO 13487
13487: DISABLE
13488: LD_INT 0
13490: PPUSH
13491: PPUSH
// begin ToLua ( displayPowell(); ) ;
13492: LD_STRING displayPowell();
13494: PPUSH
13495: CALL_OW 559
// uc_side := 0 ;
13499: LD_ADDR_OWVAR 20
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// uc_nation := 2 ;
13507: LD_ADDR_OWVAR 21
13511: PUSH
13512: LD_INT 2
13514: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13515: LD_ADDR_OWVAR 37
13519: PUSH
13520: LD_INT 14
13522: ST_TO_ADDR
// vc_engine := engine_siberite ;
13523: LD_ADDR_OWVAR 39
13527: PUSH
13528: LD_INT 3
13530: ST_TO_ADDR
// vc_control := control_apeman ;
13531: LD_ADDR_OWVAR 38
13535: PUSH
13536: LD_INT 5
13538: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13539: LD_ADDR_OWVAR 40
13543: PUSH
13544: LD_INT 29
13546: ST_TO_ADDR
// un := CreateVehicle ;
13547: LD_ADDR_VAR 0 2
13551: PUSH
13552: CALL_OW 45
13556: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13557: LD_VAR 0 2
13561: PPUSH
13562: LD_INT 1
13564: PPUSH
13565: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13569: LD_INT 35
13571: PPUSH
13572: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13576: LD_VAR 0 2
13580: PPUSH
13581: LD_INT 22
13583: PUSH
13584: LD_OWVAR 2
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PPUSH
13593: CALL_OW 69
13597: PPUSH
13598: LD_VAR 0 2
13602: PPUSH
13603: CALL_OW 74
13607: PPUSH
13608: CALL_OW 115
// until IsDead ( un ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 301
13621: IFFALSE 13569
// end ;
13623: PPOPN 2
13625: END
// every 0 0$1 trigger StreamModeActive and sStu do
13626: LD_EXP 23
13630: PUSH
13631: LD_EXP 62
13635: AND
13636: IFFALSE 13652
13638: GO 13640
13640: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13641: LD_STRING displayStucuk();
13643: PPUSH
13644: CALL_OW 559
// ResetFog ;
13648: CALL_OW 335
// end ;
13652: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13653: LD_EXP 23
13657: PUSH
13658: LD_EXP 55
13662: AND
13663: IFFALSE 13804
13665: GO 13667
13667: DISABLE
13668: LD_INT 0
13670: PPUSH
13671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13672: LD_ADDR_VAR 0 2
13676: PUSH
13677: LD_INT 22
13679: PUSH
13680: LD_OWVAR 2
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PPUSH
13703: CALL_OW 69
13707: ST_TO_ADDR
// if not tmp then
13708: LD_VAR 0 2
13712: NOT
13713: IFFALSE 13717
// exit ;
13715: GO 13804
// un := tmp [ rand ( 1 , tmp ) ] ;
13717: LD_ADDR_VAR 0 1
13721: PUSH
13722: LD_VAR 0 2
13726: PUSH
13727: LD_INT 1
13729: PPUSH
13730: LD_VAR 0 2
13734: PPUSH
13735: CALL_OW 12
13739: ARRAY
13740: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13741: LD_VAR 0 1
13745: PPUSH
13746: LD_INT 0
13748: PPUSH
13749: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13753: LD_VAR 0 1
13757: PPUSH
13758: LD_OWVAR 3
13762: PUSH
13763: LD_VAR 0 1
13767: DIFF
13768: PPUSH
13769: LD_VAR 0 1
13773: PPUSH
13774: CALL_OW 74
13778: PPUSH
13779: CALL_OW 115
// wait ( 0 0$20 ) ;
13783: LD_INT 700
13785: PPUSH
13786: CALL_OW 67
// SetSide ( un , your_side ) ;
13790: LD_VAR 0 1
13794: PPUSH
13795: LD_OWVAR 2
13799: PPUSH
13800: CALL_OW 235
// end ;
13804: PPOPN 2
13806: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13807: LD_EXP 23
13811: PUSH
13812: LD_EXP 56
13816: AND
13817: IFFALSE 13923
13819: GO 13821
13821: DISABLE
13822: LD_INT 0
13824: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13825: LD_ADDR_VAR 0 1
13829: PUSH
13830: LD_INT 22
13832: PUSH
13833: LD_OWVAR 2
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 2
13844: PUSH
13845: LD_INT 30
13847: PUSH
13848: LD_INT 0
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 30
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: ST_TO_ADDR
// if not depot then
13879: LD_VAR 0 1
13883: NOT
13884: IFFALSE 13888
// exit ;
13886: GO 13923
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13888: LD_VAR 0 1
13892: PUSH
13893: LD_INT 1
13895: ARRAY
13896: PPUSH
13897: CALL_OW 250
13901: PPUSH
13902: LD_VAR 0 1
13906: PUSH
13907: LD_INT 1
13909: ARRAY
13910: PPUSH
13911: CALL_OW 251
13915: PPUSH
13916: LD_INT 70
13918: PPUSH
13919: CALL_OW 495
// end ;
13923: PPOPN 1
13925: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13926: LD_EXP 23
13930: PUSH
13931: LD_EXP 57
13935: AND
13936: IFFALSE 14147
13938: GO 13940
13940: DISABLE
13941: LD_INT 0
13943: PPUSH
13944: PPUSH
13945: PPUSH
13946: PPUSH
13947: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13948: LD_ADDR_VAR 0 5
13952: PUSH
13953: LD_INT 22
13955: PUSH
13956: LD_OWVAR 2
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 21
13967: PUSH
13968: LD_INT 1
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PPUSH
13979: CALL_OW 69
13983: ST_TO_ADDR
// if not tmp then
13984: LD_VAR 0 5
13988: NOT
13989: IFFALSE 13993
// exit ;
13991: GO 14147
// for i in tmp do
13993: LD_ADDR_VAR 0 1
13997: PUSH
13998: LD_VAR 0 5
14002: PUSH
14003: FOR_IN
14004: IFFALSE 14145
// begin d := rand ( 0 , 5 ) ;
14006: LD_ADDR_VAR 0 4
14010: PUSH
14011: LD_INT 0
14013: PPUSH
14014: LD_INT 5
14016: PPUSH
14017: CALL_OW 12
14021: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
14022: LD_ADDR_VAR 0 2
14026: PUSH
14027: LD_VAR 0 1
14031: PPUSH
14032: CALL_OW 250
14036: PPUSH
14037: LD_VAR 0 4
14041: PPUSH
14042: LD_INT 3
14044: PPUSH
14045: LD_INT 12
14047: PPUSH
14048: CALL_OW 12
14052: PPUSH
14053: CALL_OW 272
14057: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
14058: LD_ADDR_VAR 0 3
14062: PUSH
14063: LD_VAR 0 1
14067: PPUSH
14068: CALL_OW 251
14072: PPUSH
14073: LD_VAR 0 4
14077: PPUSH
14078: LD_INT 3
14080: PPUSH
14081: LD_INT 12
14083: PPUSH
14084: CALL_OW 12
14088: PPUSH
14089: CALL_OW 273
14093: ST_TO_ADDR
// if ValidHex ( x , y ) then
14094: LD_VAR 0 2
14098: PPUSH
14099: LD_VAR 0 3
14103: PPUSH
14104: CALL_OW 488
14108: IFFALSE 14143
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
14110: LD_VAR 0 1
14114: PPUSH
14115: LD_VAR 0 2
14119: PPUSH
14120: LD_VAR 0 3
14124: PPUSH
14125: LD_INT 3
14127: PPUSH
14128: LD_INT 6
14130: PPUSH
14131: CALL_OW 12
14135: PPUSH
14136: LD_INT 1
14138: PPUSH
14139: CALL_OW 483
// end ;
14143: GO 14003
14145: POP
14146: POP
// end ;
14147: PPOPN 5
14149: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
14150: LD_EXP 23
14154: PUSH
14155: LD_EXP 58
14159: AND
14160: IFFALSE 14254
14162: GO 14164
14164: DISABLE
14165: LD_INT 0
14167: PPUSH
14168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
14169: LD_ADDR_VAR 0 2
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_OWVAR 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 32
14188: PUSH
14189: LD_INT 1
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 21
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: LIST
14210: PPUSH
14211: CALL_OW 69
14215: ST_TO_ADDR
// if not tmp then
14216: LD_VAR 0 2
14220: NOT
14221: IFFALSE 14225
// exit ;
14223: GO 14254
// for i in tmp do
14225: LD_ADDR_VAR 0 1
14229: PUSH
14230: LD_VAR 0 2
14234: PUSH
14235: FOR_IN
14236: IFFALSE 14252
// SetFuel ( i , 0 ) ;
14238: LD_VAR 0 1
14242: PPUSH
14243: LD_INT 0
14245: PPUSH
14246: CALL_OW 240
14250: GO 14235
14252: POP
14253: POP
// end ;
14254: PPOPN 2
14256: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14257: LD_EXP 23
14261: PUSH
14262: LD_EXP 59
14266: AND
14267: IFFALSE 14333
14269: GO 14271
14271: DISABLE
14272: LD_INT 0
14274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14275: LD_ADDR_VAR 0 1
14279: PUSH
14280: LD_INT 22
14282: PUSH
14283: LD_OWVAR 2
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: LD_INT 30
14294: PUSH
14295: LD_INT 29
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PPUSH
14306: CALL_OW 69
14310: ST_TO_ADDR
// if not tmp then
14311: LD_VAR 0 1
14315: NOT
14316: IFFALSE 14320
// exit ;
14318: GO 14333
// DestroyUnit ( tmp [ 1 ] ) ;
14320: LD_VAR 0 1
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: PPUSH
14329: CALL_OW 65
// end ;
14333: PPOPN 1
14335: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14336: LD_EXP 23
14340: PUSH
14341: LD_EXP 61
14345: AND
14346: IFFALSE 14475
14348: GO 14350
14350: DISABLE
14351: LD_INT 0
14353: PPUSH
// begin uc_side := 0 ;
14354: LD_ADDR_OWVAR 20
14358: PUSH
14359: LD_INT 0
14361: ST_TO_ADDR
// uc_nation := nation_arabian ;
14362: LD_ADDR_OWVAR 21
14366: PUSH
14367: LD_INT 2
14369: ST_TO_ADDR
// hc_gallery :=  ;
14370: LD_ADDR_OWVAR 33
14374: PUSH
14375: LD_STRING 
14377: ST_TO_ADDR
// hc_name :=  ;
14378: LD_ADDR_OWVAR 26
14382: PUSH
14383: LD_STRING 
14385: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14386: LD_INT 1
14388: PPUSH
14389: LD_INT 11
14391: PPUSH
14392: LD_INT 10
14394: PPUSH
14395: CALL_OW 380
// un := CreateHuman ;
14399: LD_ADDR_VAR 0 1
14403: PUSH
14404: CALL_OW 44
14408: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14409: LD_VAR 0 1
14413: PPUSH
14414: LD_INT 1
14416: PPUSH
14417: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14421: LD_INT 35
14423: PPUSH
14424: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14428: LD_VAR 0 1
14432: PPUSH
14433: LD_INT 22
14435: PUSH
14436: LD_OWVAR 2
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: PPUSH
14450: LD_VAR 0 1
14454: PPUSH
14455: CALL_OW 74
14459: PPUSH
14460: CALL_OW 115
// until IsDead ( un ) ;
14464: LD_VAR 0 1
14468: PPUSH
14469: CALL_OW 301
14473: IFFALSE 14421
// end ;
14475: PPOPN 1
14477: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14478: LD_EXP 23
14482: PUSH
14483: LD_EXP 63
14487: AND
14488: IFFALSE 14500
14490: GO 14492
14492: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14493: LD_STRING earthquake(getX(game), 0, 32)
14495: PPUSH
14496: CALL_OW 559
14500: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14501: LD_EXP 23
14505: PUSH
14506: LD_EXP 64
14510: AND
14511: IFFALSE 14602
14513: GO 14515
14515: DISABLE
14516: LD_INT 0
14518: PPUSH
// begin enable ;
14519: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14520: LD_ADDR_VAR 0 1
14524: PUSH
14525: LD_INT 22
14527: PUSH
14528: LD_OWVAR 2
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 21
14539: PUSH
14540: LD_INT 2
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: LD_INT 33
14549: PUSH
14550: LD_INT 3
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: LIST
14561: PPUSH
14562: CALL_OW 69
14566: ST_TO_ADDR
// if not tmp then
14567: LD_VAR 0 1
14571: NOT
14572: IFFALSE 14576
// exit ;
14574: GO 14602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14576: LD_VAR 0 1
14580: PUSH
14581: LD_INT 1
14583: PPUSH
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 12
14593: ARRAY
14594: PPUSH
14595: LD_INT 1
14597: PPUSH
14598: CALL_OW 234
// end ;
14602: PPOPN 1
14604: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14605: LD_EXP 23
14609: PUSH
14610: LD_EXP 65
14614: AND
14615: IFFALSE 14756
14617: GO 14619
14619: DISABLE
14620: LD_INT 0
14622: PPUSH
14623: PPUSH
14624: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14625: LD_ADDR_VAR 0 3
14629: PUSH
14630: LD_INT 22
14632: PUSH
14633: LD_OWVAR 2
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 25
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 69
14660: ST_TO_ADDR
// if not tmp then
14661: LD_VAR 0 3
14665: NOT
14666: IFFALSE 14670
// exit ;
14668: GO 14756
// un := tmp [ rand ( 1 , tmp ) ] ;
14670: LD_ADDR_VAR 0 2
14674: PUSH
14675: LD_VAR 0 3
14679: PUSH
14680: LD_INT 1
14682: PPUSH
14683: LD_VAR 0 3
14687: PPUSH
14688: CALL_OW 12
14692: ARRAY
14693: ST_TO_ADDR
// if Crawls ( un ) then
14694: LD_VAR 0 2
14698: PPUSH
14699: CALL_OW 318
14703: IFFALSE 14714
// ComWalk ( un ) ;
14705: LD_VAR 0 2
14709: PPUSH
14710: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14714: LD_VAR 0 2
14718: PPUSH
14719: LD_INT 9
14721: PPUSH
14722: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14726: LD_INT 28
14728: PPUSH
14729: LD_OWVAR 2
14733: PPUSH
14734: LD_INT 2
14736: PPUSH
14737: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14741: LD_INT 29
14743: PPUSH
14744: LD_OWVAR 2
14748: PPUSH
14749: LD_INT 2
14751: PPUSH
14752: CALL_OW 322
// end ;
14756: PPOPN 3
14758: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14759: LD_EXP 23
14763: PUSH
14764: LD_EXP 66
14768: AND
14769: IFFALSE 14880
14771: GO 14773
14773: DISABLE
14774: LD_INT 0
14776: PPUSH
14777: PPUSH
14778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14779: LD_ADDR_VAR 0 3
14783: PUSH
14784: LD_INT 22
14786: PUSH
14787: LD_OWVAR 2
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 25
14798: PUSH
14799: LD_INT 1
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PPUSH
14810: CALL_OW 69
14814: ST_TO_ADDR
// if not tmp then
14815: LD_VAR 0 3
14819: NOT
14820: IFFALSE 14824
// exit ;
14822: GO 14880
// un := tmp [ rand ( 1 , tmp ) ] ;
14824: LD_ADDR_VAR 0 2
14828: PUSH
14829: LD_VAR 0 3
14833: PUSH
14834: LD_INT 1
14836: PPUSH
14837: LD_VAR 0 3
14841: PPUSH
14842: CALL_OW 12
14846: ARRAY
14847: ST_TO_ADDR
// if Crawls ( un ) then
14848: LD_VAR 0 2
14852: PPUSH
14853: CALL_OW 318
14857: IFFALSE 14868
// ComWalk ( un ) ;
14859: LD_VAR 0 2
14863: PPUSH
14864: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14868: LD_VAR 0 2
14872: PPUSH
14873: LD_INT 8
14875: PPUSH
14876: CALL_OW 336
// end ;
14880: PPOPN 3
14882: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14883: LD_EXP 23
14887: PUSH
14888: LD_EXP 67
14892: AND
14893: IFFALSE 15037
14895: GO 14897
14897: DISABLE
14898: LD_INT 0
14900: PPUSH
14901: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14902: LD_ADDR_VAR 0 2
14906: PUSH
14907: LD_INT 22
14909: PUSH
14910: LD_OWVAR 2
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 21
14921: PUSH
14922: LD_INT 2
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PUSH
14929: LD_INT 2
14931: PUSH
14932: LD_INT 34
14934: PUSH
14935: LD_INT 12
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: LD_INT 34
14944: PUSH
14945: LD_INT 51
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: PUSH
14952: LD_INT 34
14954: PUSH
14955: LD_INT 32
14957: PUSH
14958: EMPTY
14959: LIST
14960: LIST
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 69
14977: ST_TO_ADDR
// if not tmp then
14978: LD_VAR 0 2
14982: NOT
14983: IFFALSE 14987
// exit ;
14985: GO 15037
// for i in tmp do
14987: LD_ADDR_VAR 0 1
14991: PUSH
14992: LD_VAR 0 2
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15035
// if GetCargo ( i , mat_artifact ) = 0 then
15000: LD_VAR 0 1
15004: PPUSH
15005: LD_INT 4
15007: PPUSH
15008: CALL_OW 289
15012: PUSH
15013: LD_INT 0
15015: EQUAL
15016: IFFALSE 15033
// SetCargo ( i , mat_siberit , 100 ) ;
15018: LD_VAR 0 1
15022: PPUSH
15023: LD_INT 3
15025: PPUSH
15026: LD_INT 100
15028: PPUSH
15029: CALL_OW 290
15033: GO 14997
15035: POP
15036: POP
// end ;
15037: PPOPN 2
15039: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
15040: LD_EXP 23
15044: PUSH
15045: LD_EXP 68
15049: AND
15050: IFFALSE 15233
15052: GO 15054
15054: DISABLE
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_INT 22
15066: PUSH
15067: LD_OWVAR 2
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PPUSH
15076: CALL_OW 69
15080: ST_TO_ADDR
// if not tmp then
15081: LD_VAR 0 2
15085: NOT
15086: IFFALSE 15090
// exit ;
15088: GO 15233
// for i := 1 to 2 do
15090: LD_ADDR_VAR 0 1
15094: PUSH
15095: DOUBLE
15096: LD_INT 1
15098: DEC
15099: ST_TO_ADDR
15100: LD_INT 2
15102: PUSH
15103: FOR_TO
15104: IFFALSE 15231
// begin uc_side := your_side ;
15106: LD_ADDR_OWVAR 20
15110: PUSH
15111: LD_OWVAR 2
15115: ST_TO_ADDR
// uc_nation := nation_american ;
15116: LD_ADDR_OWVAR 21
15120: PUSH
15121: LD_INT 1
15123: ST_TO_ADDR
// vc_chassis := us_morphling ;
15124: LD_ADDR_OWVAR 37
15128: PUSH
15129: LD_INT 5
15131: ST_TO_ADDR
// vc_engine := engine_siberite ;
15132: LD_ADDR_OWVAR 39
15136: PUSH
15137: LD_INT 3
15139: ST_TO_ADDR
// vc_control := control_computer ;
15140: LD_ADDR_OWVAR 38
15144: PUSH
15145: LD_INT 3
15147: ST_TO_ADDR
// vc_weapon := us_double_laser ;
15148: LD_ADDR_OWVAR 40
15152: PUSH
15153: LD_INT 10
15155: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
15156: LD_VAR 0 2
15160: PUSH
15161: LD_INT 1
15163: ARRAY
15164: PPUSH
15165: CALL_OW 310
15169: NOT
15170: IFFALSE 15217
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15172: CALL_OW 45
15176: PPUSH
15177: LD_VAR 0 2
15181: PUSH
15182: LD_INT 1
15184: ARRAY
15185: PPUSH
15186: CALL_OW 250
15190: PPUSH
15191: LD_VAR 0 2
15195: PUSH
15196: LD_INT 1
15198: ARRAY
15199: PPUSH
15200: CALL_OW 251
15204: PPUSH
15205: LD_INT 12
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 50
15215: GO 15229
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15217: CALL_OW 45
15221: PPUSH
15222: LD_INT 1
15224: PPUSH
15225: CALL_OW 51
// end ;
15229: GO 15103
15231: POP
15232: POP
// end ;
15233: PPOPN 2
15235: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15236: LD_EXP 23
15240: PUSH
15241: LD_EXP 69
15245: AND
15246: IFFALSE 15468
15248: GO 15250
15250: DISABLE
15251: LD_INT 0
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
15257: PPUSH
15258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15259: LD_ADDR_VAR 0 6
15263: PUSH
15264: LD_INT 22
15266: PUSH
15267: LD_OWVAR 2
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 21
15278: PUSH
15279: LD_INT 1
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 3
15288: PUSH
15289: LD_INT 23
15291: PUSH
15292: LD_INT 0
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: LIST
15307: PPUSH
15308: CALL_OW 69
15312: ST_TO_ADDR
// if not tmp then
15313: LD_VAR 0 6
15317: NOT
15318: IFFALSE 15322
// exit ;
15320: GO 15468
// s1 := rand ( 1 , 4 ) ;
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_INT 1
15329: PPUSH
15330: LD_INT 4
15332: PPUSH
15333: CALL_OW 12
15337: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15338: LD_ADDR_VAR 0 4
15342: PUSH
15343: LD_VAR 0 6
15347: PUSH
15348: LD_INT 1
15350: ARRAY
15351: PPUSH
15352: LD_VAR 0 2
15356: PPUSH
15357: CALL_OW 259
15361: ST_TO_ADDR
// if s1 = 1 then
15362: LD_VAR 0 2
15366: PUSH
15367: LD_INT 1
15369: EQUAL
15370: IFFALSE 15390
// s2 := rand ( 2 , 4 ) else
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_INT 2
15379: PPUSH
15380: LD_INT 4
15382: PPUSH
15383: CALL_OW 12
15387: ST_TO_ADDR
15388: GO 15398
// s2 := 1 ;
15390: LD_ADDR_VAR 0 3
15394: PUSH
15395: LD_INT 1
15397: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15398: LD_ADDR_VAR 0 5
15402: PUSH
15403: LD_VAR 0 6
15407: PUSH
15408: LD_INT 1
15410: ARRAY
15411: PPUSH
15412: LD_VAR 0 3
15416: PPUSH
15417: CALL_OW 259
15421: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15422: LD_VAR 0 6
15426: PUSH
15427: LD_INT 1
15429: ARRAY
15430: PPUSH
15431: LD_VAR 0 2
15435: PPUSH
15436: LD_VAR 0 5
15440: PPUSH
15441: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15445: LD_VAR 0 6
15449: PUSH
15450: LD_INT 1
15452: ARRAY
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: LD_VAR 0 4
15463: PPUSH
15464: CALL_OW 237
// end ;
15468: PPOPN 6
15470: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15471: LD_EXP 23
15475: PUSH
15476: LD_EXP 70
15480: AND
15481: IFFALSE 15560
15483: GO 15485
15485: DISABLE
15486: LD_INT 0
15488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15489: LD_ADDR_VAR 0 1
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_OWVAR 2
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 30
15508: PUSH
15509: LD_INT 3
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: ST_TO_ADDR
// if not tmp then
15525: LD_VAR 0 1
15529: NOT
15530: IFFALSE 15534
// exit ;
15532: GO 15560
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15534: LD_VAR 0 1
15538: PUSH
15539: LD_INT 1
15541: PPUSH
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 12
15551: ARRAY
15552: PPUSH
15553: LD_INT 1
15555: PPUSH
15556: CALL_OW 234
// end ;
15560: PPOPN 1
15562: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15563: LD_EXP 23
15567: PUSH
15568: LD_EXP 71
15572: AND
15573: IFFALSE 15685
15575: GO 15577
15577: DISABLE
15578: LD_INT 0
15580: PPUSH
15581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15582: LD_ADDR_VAR 0 2
15586: PUSH
15587: LD_INT 22
15589: PUSH
15590: LD_OWVAR 2
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 2
15601: PUSH
15602: LD_INT 30
15604: PUSH
15605: LD_INT 27
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: LD_INT 30
15614: PUSH
15615: LD_INT 26
15617: PUSH
15618: EMPTY
15619: LIST
15620: LIST
15621: PUSH
15622: LD_INT 30
15624: PUSH
15625: LD_INT 28
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PPUSH
15642: CALL_OW 69
15646: ST_TO_ADDR
// if not tmp then
15647: LD_VAR 0 2
15651: NOT
15652: IFFALSE 15656
// exit ;
15654: GO 15685
// for i in tmp do
15656: LD_ADDR_VAR 0 1
15660: PUSH
15661: LD_VAR 0 2
15665: PUSH
15666: FOR_IN
15667: IFFALSE 15683
// SetLives ( i , 1 ) ;
15669: LD_VAR 0 1
15673: PPUSH
15674: LD_INT 1
15676: PPUSH
15677: CALL_OW 234
15681: GO 15666
15683: POP
15684: POP
// end ;
15685: PPOPN 2
15687: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15688: LD_EXP 23
15692: PUSH
15693: LD_EXP 72
15697: AND
15698: IFFALSE 15985
15700: GO 15702
15702: DISABLE
15703: LD_INT 0
15705: PPUSH
15706: PPUSH
15707: PPUSH
// begin i := rand ( 1 , 7 ) ;
15708: LD_ADDR_VAR 0 1
15712: PUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 7
15718: PPUSH
15719: CALL_OW 12
15723: ST_TO_ADDR
// case i of 1 :
15724: LD_VAR 0 1
15728: PUSH
15729: LD_INT 1
15731: DOUBLE
15732: EQUAL
15733: IFTRUE 15737
15735: GO 15747
15737: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15738: LD_STRING earthquake(getX(game), 0, 32)
15740: PPUSH
15741: CALL_OW 559
15745: GO 15985
15747: LD_INT 2
15749: DOUBLE
15750: EQUAL
15751: IFTRUE 15755
15753: GO 15769
15755: POP
// begin ToLua ( displayStucuk(); ) ;
15756: LD_STRING displayStucuk();
15758: PPUSH
15759: CALL_OW 559
// ResetFog ;
15763: CALL_OW 335
// end ; 3 :
15767: GO 15985
15769: LD_INT 3
15771: DOUBLE
15772: EQUAL
15773: IFTRUE 15777
15775: GO 15881
15777: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15778: LD_ADDR_VAR 0 2
15782: PUSH
15783: LD_INT 22
15785: PUSH
15786: LD_OWVAR 2
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: LD_INT 25
15797: PUSH
15798: LD_INT 1
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: EMPTY
15806: LIST
15807: LIST
15808: PPUSH
15809: CALL_OW 69
15813: ST_TO_ADDR
// if not tmp then
15814: LD_VAR 0 2
15818: NOT
15819: IFFALSE 15823
// exit ;
15821: GO 15985
// un := tmp [ rand ( 1 , tmp ) ] ;
15823: LD_ADDR_VAR 0 3
15827: PUSH
15828: LD_VAR 0 2
15832: PUSH
15833: LD_INT 1
15835: PPUSH
15836: LD_VAR 0 2
15840: PPUSH
15841: CALL_OW 12
15845: ARRAY
15846: ST_TO_ADDR
// if Crawls ( un ) then
15847: LD_VAR 0 3
15851: PPUSH
15852: CALL_OW 318
15856: IFFALSE 15867
// ComWalk ( un ) ;
15858: LD_VAR 0 3
15862: PPUSH
15863: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15867: LD_VAR 0 3
15871: PPUSH
15872: LD_INT 8
15874: PPUSH
15875: CALL_OW 336
// end ; 4 :
15879: GO 15985
15881: LD_INT 4
15883: DOUBLE
15884: EQUAL
15885: IFTRUE 15889
15887: GO 15963
15889: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15890: LD_ADDR_VAR 0 2
15894: PUSH
15895: LD_INT 22
15897: PUSH
15898: LD_OWVAR 2
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 30
15909: PUSH
15910: LD_INT 29
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL_OW 69
15925: ST_TO_ADDR
// if not tmp then
15926: LD_VAR 0 2
15930: NOT
15931: IFFALSE 15935
// exit ;
15933: GO 15985
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15935: LD_VAR 0 2
15939: PUSH
15940: LD_INT 1
15942: ARRAY
15943: PPUSH
15944: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15948: LD_VAR 0 2
15952: PUSH
15953: LD_INT 1
15955: ARRAY
15956: PPUSH
15957: CALL_OW 65
// end ; 5 .. 7 :
15961: GO 15985
15963: LD_INT 5
15965: DOUBLE
15966: GREATEREQUAL
15967: IFFALSE 15975
15969: LD_INT 7
15971: DOUBLE
15972: LESSEQUAL
15973: IFTRUE 15977
15975: GO 15984
15977: POP
// StreamSibBomb ; end ;
15978: CALL 12222 0 0
15982: GO 15985
15984: POP
// end ;
15985: PPOPN 3
15987: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15988: LD_EXP 23
15992: PUSH
15993: LD_EXP 73
15997: AND
15998: IFFALSE 16154
16000: GO 16002
16002: DISABLE
16003: LD_INT 0
16005: PPUSH
16006: PPUSH
16007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
16008: LD_ADDR_VAR 0 2
16012: PUSH
16013: LD_INT 81
16015: PUSH
16016: LD_OWVAR 2
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: LD_INT 21
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 21
16040: PUSH
16041: LD_INT 2
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: EMPTY
16049: LIST
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: ST_TO_ADDR
// if not tmp then
16062: LD_VAR 0 2
16066: NOT
16067: IFFALSE 16071
// exit ;
16069: GO 16154
// p := 0 ;
16071: LD_ADDR_VAR 0 3
16075: PUSH
16076: LD_INT 0
16078: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16079: LD_INT 35
16081: PPUSH
16082: CALL_OW 67
// p := p + 1 ;
16086: LD_ADDR_VAR 0 3
16090: PUSH
16091: LD_VAR 0 3
16095: PUSH
16096: LD_INT 1
16098: PLUS
16099: ST_TO_ADDR
// for i in tmp do
16100: LD_ADDR_VAR 0 1
16104: PUSH
16105: LD_VAR 0 2
16109: PUSH
16110: FOR_IN
16111: IFFALSE 16142
// if GetLives ( i ) < 1000 then
16113: LD_VAR 0 1
16117: PPUSH
16118: CALL_OW 256
16122: PUSH
16123: LD_INT 1000
16125: LESS
16126: IFFALSE 16140
// SetLives ( i , 1000 ) ;
16128: LD_VAR 0 1
16132: PPUSH
16133: LD_INT 1000
16135: PPUSH
16136: CALL_OW 234
16140: GO 16110
16142: POP
16143: POP
// until p > 20 ;
16144: LD_VAR 0 3
16148: PUSH
16149: LD_INT 20
16151: GREATER
16152: IFFALSE 16079
// end ;
16154: PPOPN 3
16156: END
// every 0 0$1 trigger StreamModeActive and sTime do
16157: LD_EXP 23
16161: PUSH
16162: LD_EXP 74
16166: AND
16167: IFFALSE 16202
16169: GO 16171
16171: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16172: LD_INT 28
16174: PPUSH
16175: LD_OWVAR 2
16179: PPUSH
16180: LD_INT 2
16182: PPUSH
16183: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16187: LD_INT 30
16189: PPUSH
16190: LD_OWVAR 2
16194: PPUSH
16195: LD_INT 2
16197: PPUSH
16198: CALL_OW 322
// end ;
16202: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16203: LD_EXP 23
16207: PUSH
16208: LD_EXP 75
16212: AND
16213: IFFALSE 16334
16215: GO 16217
16217: DISABLE
16218: LD_INT 0
16220: PPUSH
16221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16222: LD_ADDR_VAR 0 2
16226: PUSH
16227: LD_INT 22
16229: PUSH
16230: LD_OWVAR 2
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 21
16241: PUSH
16242: LD_INT 1
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 3
16251: PUSH
16252: LD_INT 23
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: LIST
16270: PPUSH
16271: CALL_OW 69
16275: ST_TO_ADDR
// if not tmp then
16276: LD_VAR 0 2
16280: NOT
16281: IFFALSE 16285
// exit ;
16283: GO 16334
// for i in tmp do
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_VAR 0 2
16294: PUSH
16295: FOR_IN
16296: IFFALSE 16332
// begin if Crawls ( i ) then
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 318
16307: IFFALSE 16318
// ComWalk ( i ) ;
16309: LD_VAR 0 1
16313: PPUSH
16314: CALL_OW 138
// SetClass ( i , 2 ) ;
16318: LD_VAR 0 1
16322: PPUSH
16323: LD_INT 2
16325: PPUSH
16326: CALL_OW 336
// end ;
16330: GO 16295
16332: POP
16333: POP
// end ;
16334: PPOPN 2
16336: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16337: LD_EXP 23
16341: PUSH
16342: LD_EXP 76
16346: AND
16347: IFFALSE 16635
16349: GO 16351
16351: DISABLE
16352: LD_INT 0
16354: PPUSH
16355: PPUSH
16356: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16357: LD_OWVAR 2
16361: PPUSH
16362: LD_INT 9
16364: PPUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_INT 1
16370: PPUSH
16371: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16375: LD_INT 9
16377: PPUSH
16378: LD_OWVAR 2
16382: PPUSH
16383: CALL_OW 343
// uc_side := 9 ;
16387: LD_ADDR_OWVAR 20
16391: PUSH
16392: LD_INT 9
16394: ST_TO_ADDR
// uc_nation := 2 ;
16395: LD_ADDR_OWVAR 21
16399: PUSH
16400: LD_INT 2
16402: ST_TO_ADDR
// hc_name := Dark Warrior ;
16403: LD_ADDR_OWVAR 26
16407: PUSH
16408: LD_STRING Dark Warrior
16410: ST_TO_ADDR
// hc_gallery :=  ;
16411: LD_ADDR_OWVAR 33
16415: PUSH
16416: LD_STRING 
16418: ST_TO_ADDR
// hc_noskilllimit := true ;
16419: LD_ADDR_OWVAR 76
16423: PUSH
16424: LD_INT 1
16426: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16427: LD_ADDR_OWVAR 31
16431: PUSH
16432: LD_INT 30
16434: PUSH
16435: LD_INT 30
16437: PUSH
16438: LD_INT 30
16440: PUSH
16441: LD_INT 30
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: ST_TO_ADDR
// un := CreateHuman ;
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: CALL_OW 44
16459: ST_TO_ADDR
// hc_noskilllimit := false ;
16460: LD_ADDR_OWVAR 76
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16468: LD_VAR 0 3
16472: PPUSH
16473: LD_INT 1
16475: PPUSH
16476: CALL_OW 51
// ToLua ( playRanger() ) ;
16480: LD_STRING playRanger()
16482: PPUSH
16483: CALL_OW 559
// p := 0 ;
16487: LD_ADDR_VAR 0 2
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16495: LD_INT 35
16497: PPUSH
16498: CALL_OW 67
// p := p + 1 ;
16502: LD_ADDR_VAR 0 2
16506: PUSH
16507: LD_VAR 0 2
16511: PUSH
16512: LD_INT 1
16514: PLUS
16515: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16516: LD_VAR 0 3
16520: PPUSH
16521: CALL_OW 256
16525: PUSH
16526: LD_INT 1000
16528: LESS
16529: IFFALSE 16543
// SetLives ( un , 1000 ) ;
16531: LD_VAR 0 3
16535: PPUSH
16536: LD_INT 1000
16538: PPUSH
16539: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16543: LD_VAR 0 3
16547: PPUSH
16548: LD_INT 81
16550: PUSH
16551: LD_OWVAR 2
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 91
16562: PUSH
16563: LD_VAR 0 3
16567: PUSH
16568: LD_INT 30
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: LIST
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PPUSH
16580: CALL_OW 69
16584: PPUSH
16585: LD_VAR 0 3
16589: PPUSH
16590: CALL_OW 74
16594: PPUSH
16595: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16599: LD_VAR 0 2
16603: PUSH
16604: LD_INT 80
16606: GREATER
16607: PUSH
16608: LD_VAR 0 3
16612: PPUSH
16613: CALL_OW 301
16617: OR
16618: IFFALSE 16495
// if un then
16620: LD_VAR 0 3
16624: IFFALSE 16635
// RemoveUnit ( un ) ;
16626: LD_VAR 0 3
16630: PPUSH
16631: CALL_OW 64
// end ;
16635: PPOPN 3
16637: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16638: LD_EXP 77
16642: IFFALSE 16758
16644: GO 16646
16646: DISABLE
16647: LD_INT 0
16649: PPUSH
16650: PPUSH
16651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16652: LD_ADDR_VAR 0 2
16656: PUSH
16657: LD_INT 81
16659: PUSH
16660: LD_OWVAR 2
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 21
16671: PUSH
16672: LD_INT 1
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16688: LD_STRING playComputer()
16690: PPUSH
16691: CALL_OW 559
// if not tmp then
16695: LD_VAR 0 2
16699: NOT
16700: IFFALSE 16704
// exit ;
16702: GO 16758
// for i in tmp do
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_VAR 0 2
16713: PUSH
16714: FOR_IN
16715: IFFALSE 16756
// for j := 1 to 4 do
16717: LD_ADDR_VAR 0 3
16721: PUSH
16722: DOUBLE
16723: LD_INT 1
16725: DEC
16726: ST_TO_ADDR
16727: LD_INT 4
16729: PUSH
16730: FOR_TO
16731: IFFALSE 16752
// SetSkill ( i , j , 10 ) ;
16733: LD_VAR 0 1
16737: PPUSH
16738: LD_VAR 0 3
16742: PPUSH
16743: LD_INT 10
16745: PPUSH
16746: CALL_OW 237
16750: GO 16730
16752: POP
16753: POP
16754: GO 16714
16756: POP
16757: POP
// end ;
16758: PPOPN 3
16760: END
// every 0 0$1 trigger s30 do var i , tmp ;
16761: LD_EXP 78
16765: IFFALSE 16834
16767: GO 16769
16769: DISABLE
16770: LD_INT 0
16772: PPUSH
16773: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: LD_INT 22
16781: PUSH
16782: LD_OWVAR 2
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PPUSH
16791: CALL_OW 69
16795: ST_TO_ADDR
// if not tmp then
16796: LD_VAR 0 2
16800: NOT
16801: IFFALSE 16805
// exit ;
16803: GO 16834
// for i in tmp do
16805: LD_ADDR_VAR 0 1
16809: PUSH
16810: LD_VAR 0 2
16814: PUSH
16815: FOR_IN
16816: IFFALSE 16832
// SetLives ( i , 300 ) ;
16818: LD_VAR 0 1
16822: PPUSH
16823: LD_INT 300
16825: PPUSH
16826: CALL_OW 234
16830: GO 16815
16832: POP
16833: POP
// end ;
16834: PPOPN 2
16836: END
// every 0 0$1 trigger s60 do var i , tmp ;
16837: LD_EXP 79
16841: IFFALSE 16910
16843: GO 16845
16845: DISABLE
16846: LD_INT 0
16848: PPUSH
16849: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16850: LD_ADDR_VAR 0 2
16854: PUSH
16855: LD_INT 22
16857: PUSH
16858: LD_OWVAR 2
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PPUSH
16867: CALL_OW 69
16871: ST_TO_ADDR
// if not tmp then
16872: LD_VAR 0 2
16876: NOT
16877: IFFALSE 16881
// exit ;
16879: GO 16910
// for i in tmp do
16881: LD_ADDR_VAR 0 1
16885: PUSH
16886: LD_VAR 0 2
16890: PUSH
16891: FOR_IN
16892: IFFALSE 16908
// SetLives ( i , 600 ) ;
16894: LD_VAR 0 1
16898: PPUSH
16899: LD_INT 600
16901: PPUSH
16902: CALL_OW 234
16906: GO 16891
16908: POP
16909: POP
// end ;
16910: PPOPN 2
16912: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16913: LD_INT 0
16915: PPUSH
// case cmd of 301 :
16916: LD_VAR 0 1
16920: PUSH
16921: LD_INT 301
16923: DOUBLE
16924: EQUAL
16925: IFTRUE 16929
16927: GO 16961
16929: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16930: LD_VAR 0 6
16934: PPUSH
16935: LD_VAR 0 7
16939: PPUSH
16940: LD_VAR 0 8
16944: PPUSH
16945: LD_VAR 0 4
16949: PPUSH
16950: LD_VAR 0 5
16954: PPUSH
16955: CALL 18162 0 5
16959: GO 17082
16961: LD_INT 302
16963: DOUBLE
16964: EQUAL
16965: IFTRUE 16969
16967: GO 17006
16969: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16970: LD_VAR 0 6
16974: PPUSH
16975: LD_VAR 0 7
16979: PPUSH
16980: LD_VAR 0 8
16984: PPUSH
16985: LD_VAR 0 9
16989: PPUSH
16990: LD_VAR 0 4
16994: PPUSH
16995: LD_VAR 0 5
16999: PPUSH
17000: CALL 18253 0 6
17004: GO 17082
17006: LD_INT 303
17008: DOUBLE
17009: EQUAL
17010: IFTRUE 17014
17012: GO 17051
17014: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
17015: LD_VAR 0 6
17019: PPUSH
17020: LD_VAR 0 7
17024: PPUSH
17025: LD_VAR 0 8
17029: PPUSH
17030: LD_VAR 0 9
17034: PPUSH
17035: LD_VAR 0 4
17039: PPUSH
17040: LD_VAR 0 5
17044: PPUSH
17045: CALL 17087 0 6
17049: GO 17082
17051: LD_INT 304
17053: DOUBLE
17054: EQUAL
17055: IFTRUE 17059
17057: GO 17081
17059: POP
// hHackTeleport ( unit , x , y ) ; end ;
17060: LD_VAR 0 2
17064: PPUSH
17065: LD_VAR 0 4
17069: PPUSH
17070: LD_VAR 0 5
17074: PPUSH
17075: CALL 18846 0 3
17079: GO 17082
17081: POP
// end ;
17082: LD_VAR 0 12
17086: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
17087: LD_INT 0
17089: PPUSH
17090: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
17091: LD_VAR 0 1
17095: PUSH
17096: LD_INT 1
17098: LESS
17099: PUSH
17100: LD_VAR 0 1
17104: PUSH
17105: LD_INT 3
17107: GREATER
17108: OR
17109: PUSH
17110: LD_VAR 0 5
17114: PPUSH
17115: LD_VAR 0 6
17119: PPUSH
17120: CALL_OW 428
17124: OR
17125: IFFALSE 17129
// exit ;
17127: GO 17849
// uc_side := your_side ;
17129: LD_ADDR_OWVAR 20
17133: PUSH
17134: LD_OWVAR 2
17138: ST_TO_ADDR
// uc_nation := nation ;
17139: LD_ADDR_OWVAR 21
17143: PUSH
17144: LD_VAR 0 1
17148: ST_TO_ADDR
// bc_level = 1 ;
17149: LD_ADDR_OWVAR 43
17153: PUSH
17154: LD_INT 1
17156: ST_TO_ADDR
// case btype of 1 :
17157: LD_VAR 0 2
17161: PUSH
17162: LD_INT 1
17164: DOUBLE
17165: EQUAL
17166: IFTRUE 17170
17168: GO 17181
17170: POP
// bc_type := b_depot ; 2 :
17171: LD_ADDR_OWVAR 42
17175: PUSH
17176: LD_INT 0
17178: ST_TO_ADDR
17179: GO 17793
17181: LD_INT 2
17183: DOUBLE
17184: EQUAL
17185: IFTRUE 17189
17187: GO 17200
17189: POP
// bc_type := b_warehouse ; 3 :
17190: LD_ADDR_OWVAR 42
17194: PUSH
17195: LD_INT 1
17197: ST_TO_ADDR
17198: GO 17793
17200: LD_INT 3
17202: DOUBLE
17203: EQUAL
17204: IFTRUE 17208
17206: GO 17219
17208: POP
// bc_type := b_lab ; 4 .. 9 :
17209: LD_ADDR_OWVAR 42
17213: PUSH
17214: LD_INT 6
17216: ST_TO_ADDR
17217: GO 17793
17219: LD_INT 4
17221: DOUBLE
17222: GREATEREQUAL
17223: IFFALSE 17231
17225: LD_INT 9
17227: DOUBLE
17228: LESSEQUAL
17229: IFTRUE 17233
17231: GO 17285
17233: POP
// begin bc_type := b_lab_half ;
17234: LD_ADDR_OWVAR 42
17238: PUSH
17239: LD_INT 7
17241: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17242: LD_ADDR_OWVAR 44
17246: PUSH
17247: LD_INT 10
17249: PUSH
17250: LD_INT 11
17252: PUSH
17253: LD_INT 12
17255: PUSH
17256: LD_INT 15
17258: PUSH
17259: LD_INT 14
17261: PUSH
17262: LD_INT 13
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: PUSH
17273: LD_VAR 0 2
17277: PUSH
17278: LD_INT 3
17280: MINUS
17281: ARRAY
17282: ST_TO_ADDR
// end ; 10 .. 13 :
17283: GO 17793
17285: LD_INT 10
17287: DOUBLE
17288: GREATEREQUAL
17289: IFFALSE 17297
17291: LD_INT 13
17293: DOUBLE
17294: LESSEQUAL
17295: IFTRUE 17299
17297: GO 17376
17299: POP
// begin bc_type := b_lab_full ;
17300: LD_ADDR_OWVAR 42
17304: PUSH
17305: LD_INT 8
17307: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17308: LD_ADDR_OWVAR 44
17312: PUSH
17313: LD_INT 10
17315: PUSH
17316: LD_INT 12
17318: PUSH
17319: LD_INT 14
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: PUSH
17331: LD_VAR 0 2
17335: PUSH
17336: LD_INT 9
17338: MINUS
17339: ARRAY
17340: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17341: LD_ADDR_OWVAR 45
17345: PUSH
17346: LD_INT 11
17348: PUSH
17349: LD_INT 15
17351: PUSH
17352: LD_INT 12
17354: PUSH
17355: LD_INT 15
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: PUSH
17364: LD_VAR 0 2
17368: PUSH
17369: LD_INT 9
17371: MINUS
17372: ARRAY
17373: ST_TO_ADDR
// end ; 14 :
17374: GO 17793
17376: LD_INT 14
17378: DOUBLE
17379: EQUAL
17380: IFTRUE 17384
17382: GO 17395
17384: POP
// bc_type := b_workshop ; 15 :
17385: LD_ADDR_OWVAR 42
17389: PUSH
17390: LD_INT 2
17392: ST_TO_ADDR
17393: GO 17793
17395: LD_INT 15
17397: DOUBLE
17398: EQUAL
17399: IFTRUE 17403
17401: GO 17414
17403: POP
// bc_type := b_factory ; 16 :
17404: LD_ADDR_OWVAR 42
17408: PUSH
17409: LD_INT 3
17411: ST_TO_ADDR
17412: GO 17793
17414: LD_INT 16
17416: DOUBLE
17417: EQUAL
17418: IFTRUE 17422
17420: GO 17433
17422: POP
// bc_type := b_ext_gun ; 17 :
17423: LD_ADDR_OWVAR 42
17427: PUSH
17428: LD_INT 17
17430: ST_TO_ADDR
17431: GO 17793
17433: LD_INT 17
17435: DOUBLE
17436: EQUAL
17437: IFTRUE 17441
17439: GO 17469
17441: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17442: LD_ADDR_OWVAR 42
17446: PUSH
17447: LD_INT 19
17449: PUSH
17450: LD_INT 23
17452: PUSH
17453: LD_INT 19
17455: PUSH
17456: EMPTY
17457: LIST
17458: LIST
17459: LIST
17460: PUSH
17461: LD_VAR 0 1
17465: ARRAY
17466: ST_TO_ADDR
17467: GO 17793
17469: LD_INT 18
17471: DOUBLE
17472: EQUAL
17473: IFTRUE 17477
17475: GO 17488
17477: POP
// bc_type := b_ext_radar ; 19 :
17478: LD_ADDR_OWVAR 42
17482: PUSH
17483: LD_INT 20
17485: ST_TO_ADDR
17486: GO 17793
17488: LD_INT 19
17490: DOUBLE
17491: EQUAL
17492: IFTRUE 17496
17494: GO 17507
17496: POP
// bc_type := b_ext_radio ; 20 :
17497: LD_ADDR_OWVAR 42
17501: PUSH
17502: LD_INT 22
17504: ST_TO_ADDR
17505: GO 17793
17507: LD_INT 20
17509: DOUBLE
17510: EQUAL
17511: IFTRUE 17515
17513: GO 17526
17515: POP
// bc_type := b_ext_siberium ; 21 :
17516: LD_ADDR_OWVAR 42
17520: PUSH
17521: LD_INT 21
17523: ST_TO_ADDR
17524: GO 17793
17526: LD_INT 21
17528: DOUBLE
17529: EQUAL
17530: IFTRUE 17534
17532: GO 17545
17534: POP
// bc_type := b_ext_computer ; 22 :
17535: LD_ADDR_OWVAR 42
17539: PUSH
17540: LD_INT 24
17542: ST_TO_ADDR
17543: GO 17793
17545: LD_INT 22
17547: DOUBLE
17548: EQUAL
17549: IFTRUE 17553
17551: GO 17564
17553: POP
// bc_type := b_ext_track ; 23 :
17554: LD_ADDR_OWVAR 42
17558: PUSH
17559: LD_INT 16
17561: ST_TO_ADDR
17562: GO 17793
17564: LD_INT 23
17566: DOUBLE
17567: EQUAL
17568: IFTRUE 17572
17570: GO 17583
17572: POP
// bc_type := b_ext_laser ; 24 :
17573: LD_ADDR_OWVAR 42
17577: PUSH
17578: LD_INT 25
17580: ST_TO_ADDR
17581: GO 17793
17583: LD_INT 24
17585: DOUBLE
17586: EQUAL
17587: IFTRUE 17591
17589: GO 17602
17591: POP
// bc_type := b_control_tower ; 25 :
17592: LD_ADDR_OWVAR 42
17596: PUSH
17597: LD_INT 36
17599: ST_TO_ADDR
17600: GO 17793
17602: LD_INT 25
17604: DOUBLE
17605: EQUAL
17606: IFTRUE 17610
17608: GO 17621
17610: POP
// bc_type := b_breastwork ; 26 :
17611: LD_ADDR_OWVAR 42
17615: PUSH
17616: LD_INT 31
17618: ST_TO_ADDR
17619: GO 17793
17621: LD_INT 26
17623: DOUBLE
17624: EQUAL
17625: IFTRUE 17629
17627: GO 17640
17629: POP
// bc_type := b_bunker ; 27 :
17630: LD_ADDR_OWVAR 42
17634: PUSH
17635: LD_INT 32
17637: ST_TO_ADDR
17638: GO 17793
17640: LD_INT 27
17642: DOUBLE
17643: EQUAL
17644: IFTRUE 17648
17646: GO 17659
17648: POP
// bc_type := b_turret ; 28 :
17649: LD_ADDR_OWVAR 42
17653: PUSH
17654: LD_INT 33
17656: ST_TO_ADDR
17657: GO 17793
17659: LD_INT 28
17661: DOUBLE
17662: EQUAL
17663: IFTRUE 17667
17665: GO 17678
17667: POP
// bc_type := b_armoury ; 29 :
17668: LD_ADDR_OWVAR 42
17672: PUSH
17673: LD_INT 4
17675: ST_TO_ADDR
17676: GO 17793
17678: LD_INT 29
17680: DOUBLE
17681: EQUAL
17682: IFTRUE 17686
17684: GO 17697
17686: POP
// bc_type := b_barracks ; 30 :
17687: LD_ADDR_OWVAR 42
17691: PUSH
17692: LD_INT 5
17694: ST_TO_ADDR
17695: GO 17793
17697: LD_INT 30
17699: DOUBLE
17700: EQUAL
17701: IFTRUE 17705
17703: GO 17716
17705: POP
// bc_type := b_solar_power ; 31 :
17706: LD_ADDR_OWVAR 42
17710: PUSH
17711: LD_INT 27
17713: ST_TO_ADDR
17714: GO 17793
17716: LD_INT 31
17718: DOUBLE
17719: EQUAL
17720: IFTRUE 17724
17722: GO 17735
17724: POP
// bc_type := b_oil_power ; 32 :
17725: LD_ADDR_OWVAR 42
17729: PUSH
17730: LD_INT 26
17732: ST_TO_ADDR
17733: GO 17793
17735: LD_INT 32
17737: DOUBLE
17738: EQUAL
17739: IFTRUE 17743
17741: GO 17754
17743: POP
// bc_type := b_siberite_power ; 33 :
17744: LD_ADDR_OWVAR 42
17748: PUSH
17749: LD_INT 28
17751: ST_TO_ADDR
17752: GO 17793
17754: LD_INT 33
17756: DOUBLE
17757: EQUAL
17758: IFTRUE 17762
17760: GO 17773
17762: POP
// bc_type := b_oil_mine ; 34 :
17763: LD_ADDR_OWVAR 42
17767: PUSH
17768: LD_INT 29
17770: ST_TO_ADDR
17771: GO 17793
17773: LD_INT 34
17775: DOUBLE
17776: EQUAL
17777: IFTRUE 17781
17779: GO 17792
17781: POP
// bc_type := b_siberite_mine ; end ;
17782: LD_ADDR_OWVAR 42
17786: PUSH
17787: LD_INT 30
17789: ST_TO_ADDR
17790: GO 17793
17792: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17793: LD_ADDR_VAR 0 8
17797: PUSH
17798: LD_VAR 0 5
17802: PPUSH
17803: LD_VAR 0 6
17807: PPUSH
17808: LD_VAR 0 3
17812: PPUSH
17813: CALL_OW 47
17817: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17818: LD_OWVAR 42
17822: PUSH
17823: LD_INT 32
17825: PUSH
17826: LD_INT 33
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: IN
17833: IFFALSE 17849
// PlaceWeaponTurret ( b , weapon ) ;
17835: LD_VAR 0 8
17839: PPUSH
17840: LD_VAR 0 4
17844: PPUSH
17845: CALL_OW 431
// end ;
17849: LD_VAR 0 7
17853: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17854: LD_INT 0
17856: PPUSH
17857: PPUSH
17858: PPUSH
17859: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17860: LD_ADDR_VAR 0 4
17864: PUSH
17865: LD_INT 22
17867: PUSH
17868: LD_OWVAR 2
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: LD_INT 2
17879: PUSH
17880: LD_INT 30
17882: PUSH
17883: LD_INT 0
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 30
17892: PUSH
17893: LD_INT 1
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 4
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 17982
// for i in tmp do
17923: LD_ADDR_VAR 0 2
17927: PUSH
17928: LD_VAR 0 4
17932: PUSH
17933: FOR_IN
17934: IFFALSE 17980
// for j = 1 to 3 do
17936: LD_ADDR_VAR 0 3
17940: PUSH
17941: DOUBLE
17942: LD_INT 1
17944: DEC
17945: ST_TO_ADDR
17946: LD_INT 3
17948: PUSH
17949: FOR_TO
17950: IFFALSE 17976
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17952: LD_VAR 0 2
17956: PPUSH
17957: CALL_OW 274
17961: PPUSH
17962: LD_VAR 0 3
17966: PPUSH
17967: LD_INT 99999
17969: PPUSH
17970: CALL_OW 277
17974: GO 17949
17976: POP
17977: POP
17978: GO 17933
17980: POP
17981: POP
// end ;
17982: LD_VAR 0 1
17986: RET
// export function hHackSetLevel10 ; var i , j ; begin
17987: LD_INT 0
17989: PPUSH
17990: PPUSH
17991: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17992: LD_ADDR_VAR 0 2
17996: PUSH
17997: LD_INT 21
17999: PUSH
18000: LD_INT 1
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PPUSH
18007: CALL_OW 69
18011: PUSH
18012: FOR_IN
18013: IFFALSE 18065
// if IsSelected ( i ) then
18015: LD_VAR 0 2
18019: PPUSH
18020: CALL_OW 306
18024: IFFALSE 18063
// begin for j := 1 to 4 do
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: DOUBLE
18032: LD_INT 1
18034: DEC
18035: ST_TO_ADDR
18036: LD_INT 4
18038: PUSH
18039: FOR_TO
18040: IFFALSE 18061
// SetSkill ( i , j , 10 ) ;
18042: LD_VAR 0 2
18046: PPUSH
18047: LD_VAR 0 3
18051: PPUSH
18052: LD_INT 10
18054: PPUSH
18055: CALL_OW 237
18059: GO 18039
18061: POP
18062: POP
// end ;
18063: GO 18012
18065: POP
18066: POP
// end ;
18067: LD_VAR 0 1
18071: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
18072: LD_INT 0
18074: PPUSH
18075: PPUSH
18076: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
18077: LD_ADDR_VAR 0 2
18081: PUSH
18082: LD_INT 22
18084: PUSH
18085: LD_OWVAR 2
18089: PUSH
18090: EMPTY
18091: LIST
18092: LIST
18093: PUSH
18094: LD_INT 21
18096: PUSH
18097: LD_INT 1
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PPUSH
18108: CALL_OW 69
18112: PUSH
18113: FOR_IN
18114: IFFALSE 18155
// begin for j := 1 to 4 do
18116: LD_ADDR_VAR 0 3
18120: PUSH
18121: DOUBLE
18122: LD_INT 1
18124: DEC
18125: ST_TO_ADDR
18126: LD_INT 4
18128: PUSH
18129: FOR_TO
18130: IFFALSE 18151
// SetSkill ( i , j , 10 ) ;
18132: LD_VAR 0 2
18136: PPUSH
18137: LD_VAR 0 3
18141: PPUSH
18142: LD_INT 10
18144: PPUSH
18145: CALL_OW 237
18149: GO 18129
18151: POP
18152: POP
// end ;
18153: GO 18113
18155: POP
18156: POP
// end ;
18157: LD_VAR 0 1
18161: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18162: LD_INT 0
18164: PPUSH
// uc_side := your_side ;
18165: LD_ADDR_OWVAR 20
18169: PUSH
18170: LD_OWVAR 2
18174: ST_TO_ADDR
// uc_nation := nation ;
18175: LD_ADDR_OWVAR 21
18179: PUSH
18180: LD_VAR 0 1
18184: ST_TO_ADDR
// InitHc ;
18185: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18189: LD_INT 0
18191: PPUSH
18192: LD_VAR 0 2
18196: PPUSH
18197: LD_VAR 0 3
18201: PPUSH
18202: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18206: LD_VAR 0 4
18210: PPUSH
18211: LD_VAR 0 5
18215: PPUSH
18216: CALL_OW 428
18220: PUSH
18221: LD_INT 0
18223: EQUAL
18224: IFFALSE 18248
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18226: CALL_OW 44
18230: PPUSH
18231: LD_VAR 0 4
18235: PPUSH
18236: LD_VAR 0 5
18240: PPUSH
18241: LD_INT 1
18243: PPUSH
18244: CALL_OW 48
// end ;
18248: LD_VAR 0 6
18252: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18253: LD_INT 0
18255: PPUSH
18256: PPUSH
// uc_side := your_side ;
18257: LD_ADDR_OWVAR 20
18261: PUSH
18262: LD_OWVAR 2
18266: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18267: LD_VAR 0 1
18271: PUSH
18272: LD_INT 1
18274: PUSH
18275: LD_INT 2
18277: PUSH
18278: LD_INT 3
18280: PUSH
18281: LD_INT 4
18283: PUSH
18284: LD_INT 5
18286: PUSH
18287: EMPTY
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: IN
18294: IFFALSE 18306
// uc_nation := nation_american else
18296: LD_ADDR_OWVAR 21
18300: PUSH
18301: LD_INT 1
18303: ST_TO_ADDR
18304: GO 18349
// if chassis in [ 11 , 12 , 13 , 14 ] then
18306: LD_VAR 0 1
18310: PUSH
18311: LD_INT 11
18313: PUSH
18314: LD_INT 12
18316: PUSH
18317: LD_INT 13
18319: PUSH
18320: LD_INT 14
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: LIST
18328: IN
18329: IFFALSE 18341
// uc_nation := nation_arabian else
18331: LD_ADDR_OWVAR 21
18335: PUSH
18336: LD_INT 2
18338: ST_TO_ADDR
18339: GO 18349
// uc_nation := nation_russian ;
18341: LD_ADDR_OWVAR 21
18345: PUSH
18346: LD_INT 3
18348: ST_TO_ADDR
// vc_chassis := chassis ;
18349: LD_ADDR_OWVAR 37
18353: PUSH
18354: LD_VAR 0 1
18358: ST_TO_ADDR
// vc_engine := engine ;
18359: LD_ADDR_OWVAR 39
18363: PUSH
18364: LD_VAR 0 2
18368: ST_TO_ADDR
// vc_control := control ;
18369: LD_ADDR_OWVAR 38
18373: PUSH
18374: LD_VAR 0 3
18378: ST_TO_ADDR
// vc_weapon := weapon ;
18379: LD_ADDR_OWVAR 40
18383: PUSH
18384: LD_VAR 0 4
18388: ST_TO_ADDR
// un := CreateVehicle ;
18389: LD_ADDR_VAR 0 8
18393: PUSH
18394: CALL_OW 45
18398: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18399: LD_VAR 0 8
18403: PPUSH
18404: LD_INT 0
18406: PPUSH
18407: LD_INT 5
18409: PPUSH
18410: CALL_OW 12
18414: PPUSH
18415: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18419: LD_VAR 0 8
18423: PPUSH
18424: LD_VAR 0 5
18428: PPUSH
18429: LD_VAR 0 6
18433: PPUSH
18434: LD_INT 1
18436: PPUSH
18437: CALL_OW 48
// end ;
18441: LD_VAR 0 7
18445: RET
// export hInvincible ; every 1 do
18446: GO 18448
18448: DISABLE
// hInvincible := [ ] ;
18449: LD_ADDR_EXP 80
18453: PUSH
18454: EMPTY
18455: ST_TO_ADDR
18456: END
// every 10 do var i ;
18457: GO 18459
18459: DISABLE
18460: LD_INT 0
18462: PPUSH
// begin enable ;
18463: ENABLE
// if not hInvincible then
18464: LD_EXP 80
18468: NOT
18469: IFFALSE 18473
// exit ;
18471: GO 18517
// for i in hInvincible do
18473: LD_ADDR_VAR 0 1
18477: PUSH
18478: LD_EXP 80
18482: PUSH
18483: FOR_IN
18484: IFFALSE 18515
// if GetLives ( i ) < 1000 then
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 256
18495: PUSH
18496: LD_INT 1000
18498: LESS
18499: IFFALSE 18513
// SetLives ( i , 1000 ) ;
18501: LD_VAR 0 1
18505: PPUSH
18506: LD_INT 1000
18508: PPUSH
18509: CALL_OW 234
18513: GO 18483
18515: POP
18516: POP
// end ;
18517: PPOPN 1
18519: END
// export function hHackInvincible ; var i ; begin
18520: LD_INT 0
18522: PPUSH
18523: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18524: LD_ADDR_VAR 0 2
18528: PUSH
18529: LD_INT 2
18531: PUSH
18532: LD_INT 21
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 21
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: LIST
18556: PPUSH
18557: CALL_OW 69
18561: PUSH
18562: FOR_IN
18563: IFFALSE 18624
// if IsSelected ( i ) then
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL_OW 306
18574: IFFALSE 18622
// begin if i in hInvincible then
18576: LD_VAR 0 2
18580: PUSH
18581: LD_EXP 80
18585: IN
18586: IFFALSE 18606
// hInvincible := hInvincible diff i else
18588: LD_ADDR_EXP 80
18592: PUSH
18593: LD_EXP 80
18597: PUSH
18598: LD_VAR 0 2
18602: DIFF
18603: ST_TO_ADDR
18604: GO 18622
// hInvincible := hInvincible union i ;
18606: LD_ADDR_EXP 80
18610: PUSH
18611: LD_EXP 80
18615: PUSH
18616: LD_VAR 0 2
18620: UNION
18621: ST_TO_ADDR
// end ;
18622: GO 18562
18624: POP
18625: POP
// end ;
18626: LD_VAR 0 1
18630: RET
// export function hHackInvisible ; var i , j ; begin
18631: LD_INT 0
18633: PPUSH
18634: PPUSH
18635: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18636: LD_ADDR_VAR 0 2
18640: PUSH
18641: LD_INT 21
18643: PUSH
18644: LD_INT 1
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PPUSH
18651: CALL_OW 69
18655: PUSH
18656: FOR_IN
18657: IFFALSE 18681
// if IsSelected ( i ) then
18659: LD_VAR 0 2
18663: PPUSH
18664: CALL_OW 306
18668: IFFALSE 18679
// ComForceInvisible ( i ) ;
18670: LD_VAR 0 2
18674: PPUSH
18675: CALL_OW 496
18679: GO 18656
18681: POP
18682: POP
// end ;
18683: LD_VAR 0 1
18687: RET
// export function hHackChangeYourSide ; begin
18688: LD_INT 0
18690: PPUSH
// if your_side = 8 then
18691: LD_OWVAR 2
18695: PUSH
18696: LD_INT 8
18698: EQUAL
18699: IFFALSE 18711
// your_side := 0 else
18701: LD_ADDR_OWVAR 2
18705: PUSH
18706: LD_INT 0
18708: ST_TO_ADDR
18709: GO 18725
// your_side := your_side + 1 ;
18711: LD_ADDR_OWVAR 2
18715: PUSH
18716: LD_OWVAR 2
18720: PUSH
18721: LD_INT 1
18723: PLUS
18724: ST_TO_ADDR
// end ;
18725: LD_VAR 0 1
18729: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18730: LD_INT 0
18732: PPUSH
18733: PPUSH
18734: PPUSH
// for i in all_units do
18735: LD_ADDR_VAR 0 2
18739: PUSH
18740: LD_OWVAR 3
18744: PUSH
18745: FOR_IN
18746: IFFALSE 18824
// if IsSelected ( i ) then
18748: LD_VAR 0 2
18752: PPUSH
18753: CALL_OW 306
18757: IFFALSE 18822
// begin j := GetSide ( i ) ;
18759: LD_ADDR_VAR 0 3
18763: PUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: CALL_OW 255
18773: ST_TO_ADDR
// if j = 8 then
18774: LD_VAR 0 3
18778: PUSH
18779: LD_INT 8
18781: EQUAL
18782: IFFALSE 18794
// j := 0 else
18784: LD_ADDR_VAR 0 3
18788: PUSH
18789: LD_INT 0
18791: ST_TO_ADDR
18792: GO 18808
// j := j + 1 ;
18794: LD_ADDR_VAR 0 3
18798: PUSH
18799: LD_VAR 0 3
18803: PUSH
18804: LD_INT 1
18806: PLUS
18807: ST_TO_ADDR
// SetSide ( i , j ) ;
18808: LD_VAR 0 2
18812: PPUSH
18813: LD_VAR 0 3
18817: PPUSH
18818: CALL_OW 235
// end ;
18822: GO 18745
18824: POP
18825: POP
// end ;
18826: LD_VAR 0 1
18830: RET
// export function hHackFog ; begin
18831: LD_INT 0
18833: PPUSH
// FogOff ( true ) ;
18834: LD_INT 1
18836: PPUSH
18837: CALL_OW 344
// end ;
18841: LD_VAR 0 1
18845: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18846: LD_INT 0
18848: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_VAR 0 2
18858: PPUSH
18859: LD_VAR 0 3
18863: PPUSH
18864: LD_INT 1
18866: PPUSH
18867: LD_INT 1
18869: PPUSH
18870: CALL_OW 483
// CenterOnXY ( x , y ) ;
18874: LD_VAR 0 2
18878: PPUSH
18879: LD_VAR 0 3
18883: PPUSH
18884: CALL_OW 84
// end ;
18888: LD_VAR 0 4
18892: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18893: LD_INT 0
18895: PPUSH
18896: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18897: LD_VAR 0 1
18901: NOT
18902: PUSH
18903: LD_VAR 0 2
18907: PPUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: CALL_OW 488
18917: NOT
18918: OR
18919: PUSH
18920: LD_VAR 0 1
18924: PPUSH
18925: CALL_OW 266
18929: PUSH
18930: LD_INT 3
18932: NONEQUAL
18933: PUSH
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL_OW 247
18943: PUSH
18944: LD_INT 1
18946: EQUAL
18947: NOT
18948: AND
18949: OR
18950: IFFALSE 18954
// exit ;
18952: GO 19103
// if GetType ( factory ) = unit_human then
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 247
18963: PUSH
18964: LD_INT 1
18966: EQUAL
18967: IFFALSE 18984
// factory := IsInUnit ( factory ) ;
18969: LD_ADDR_VAR 0 1
18973: PUSH
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 310
18983: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18984: LD_VAR 0 1
18988: PPUSH
18989: CALL_OW 266
18993: PUSH
18994: LD_INT 3
18996: NONEQUAL
18997: IFFALSE 19001
// exit ;
18999: GO 19103
// if HexInfo ( x , y ) = factory then
19001: LD_VAR 0 2
19005: PPUSH
19006: LD_VAR 0 3
19010: PPUSH
19011: CALL_OW 428
19015: PUSH
19016: LD_VAR 0 1
19020: EQUAL
19021: IFFALSE 19048
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
19023: LD_ADDR_EXP 81
19027: PUSH
19028: LD_EXP 81
19032: PPUSH
19033: LD_VAR 0 1
19037: PPUSH
19038: LD_INT 0
19040: PPUSH
19041: CALL_OW 1
19045: ST_TO_ADDR
19046: GO 19099
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
19048: LD_ADDR_EXP 81
19052: PUSH
19053: LD_EXP 81
19057: PPUSH
19058: LD_VAR 0 1
19062: PPUSH
19063: LD_VAR 0 1
19067: PPUSH
19068: CALL_OW 255
19072: PUSH
19073: LD_VAR 0 1
19077: PUSH
19078: LD_VAR 0 2
19082: PUSH
19083: LD_VAR 0 3
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: PPUSH
19094: CALL_OW 1
19098: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19099: CALL 19108 0 0
// end ;
19103: LD_VAR 0 4
19107: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19108: LD_INT 0
19110: PPUSH
19111: PPUSH
19112: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19113: LD_STRING resetFactoryWaypoint();
19115: PPUSH
19116: CALL_OW 559
// if factoryWaypoints then
19120: LD_EXP 81
19124: IFFALSE 19250
// begin list := PrepareArray ( factoryWaypoints ) ;
19126: LD_ADDR_VAR 0 3
19130: PUSH
19131: LD_EXP 81
19135: PPUSH
19136: CALL 65863 0 1
19140: ST_TO_ADDR
// for i := 1 to list do
19141: LD_ADDR_VAR 0 2
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_VAR 0 3
19155: PUSH
19156: FOR_TO
19157: IFFALSE 19248
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19159: LD_STRING setFactoryWaypointXY(
19161: PUSH
19162: LD_VAR 0 3
19166: PUSH
19167: LD_VAR 0 2
19171: ARRAY
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: STR
19177: PUSH
19178: LD_STRING ,
19180: STR
19181: PUSH
19182: LD_VAR 0 3
19186: PUSH
19187: LD_VAR 0 2
19191: ARRAY
19192: PUSH
19193: LD_INT 2
19195: ARRAY
19196: STR
19197: PUSH
19198: LD_STRING ,
19200: STR
19201: PUSH
19202: LD_VAR 0 3
19206: PUSH
19207: LD_VAR 0 2
19211: ARRAY
19212: PUSH
19213: LD_INT 3
19215: ARRAY
19216: STR
19217: PUSH
19218: LD_STRING ,
19220: STR
19221: PUSH
19222: LD_VAR 0 3
19226: PUSH
19227: LD_VAR 0 2
19231: ARRAY
19232: PUSH
19233: LD_INT 4
19235: ARRAY
19236: STR
19237: PUSH
19238: LD_STRING )
19240: STR
19241: PPUSH
19242: CALL_OW 559
19246: GO 19156
19248: POP
19249: POP
// end ; end ;
19250: LD_VAR 0 1
19254: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19255: LD_INT 0
19257: PPUSH
// if HexInfo ( x , y ) = warehouse then
19258: LD_VAR 0 2
19262: PPUSH
19263: LD_VAR 0 3
19267: PPUSH
19268: CALL_OW 428
19272: PUSH
19273: LD_VAR 0 1
19277: EQUAL
19278: IFFALSE 19305
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19280: LD_ADDR_EXP 82
19284: PUSH
19285: LD_EXP 82
19289: PPUSH
19290: LD_VAR 0 1
19294: PPUSH
19295: LD_INT 0
19297: PPUSH
19298: CALL_OW 1
19302: ST_TO_ADDR
19303: GO 19356
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19305: LD_ADDR_EXP 82
19309: PUSH
19310: LD_EXP 82
19314: PPUSH
19315: LD_VAR 0 1
19319: PPUSH
19320: LD_VAR 0 1
19324: PPUSH
19325: CALL_OW 255
19329: PUSH
19330: LD_VAR 0 1
19334: PUSH
19335: LD_VAR 0 2
19339: PUSH
19340: LD_VAR 0 3
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: PPUSH
19351: CALL_OW 1
19355: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19356: CALL 19365 0 0
// end ;
19360: LD_VAR 0 4
19364: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19365: LD_INT 0
19367: PPUSH
19368: PPUSH
19369: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19370: LD_STRING resetWarehouseGatheringPoints();
19372: PPUSH
19373: CALL_OW 559
// if warehouseGatheringPoints then
19377: LD_EXP 82
19381: IFFALSE 19507
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19383: LD_ADDR_VAR 0 3
19387: PUSH
19388: LD_EXP 82
19392: PPUSH
19393: CALL 65863 0 1
19397: ST_TO_ADDR
// for i := 1 to list do
19398: LD_ADDR_VAR 0 2
19402: PUSH
19403: DOUBLE
19404: LD_INT 1
19406: DEC
19407: ST_TO_ADDR
19408: LD_VAR 0 3
19412: PUSH
19413: FOR_TO
19414: IFFALSE 19505
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19416: LD_STRING setWarehouseGatheringPointXY(
19418: PUSH
19419: LD_VAR 0 3
19423: PUSH
19424: LD_VAR 0 2
19428: ARRAY
19429: PUSH
19430: LD_INT 1
19432: ARRAY
19433: STR
19434: PUSH
19435: LD_STRING ,
19437: STR
19438: PUSH
19439: LD_VAR 0 3
19443: PUSH
19444: LD_VAR 0 2
19448: ARRAY
19449: PUSH
19450: LD_INT 2
19452: ARRAY
19453: STR
19454: PUSH
19455: LD_STRING ,
19457: STR
19458: PUSH
19459: LD_VAR 0 3
19463: PUSH
19464: LD_VAR 0 2
19468: ARRAY
19469: PUSH
19470: LD_INT 3
19472: ARRAY
19473: STR
19474: PUSH
19475: LD_STRING ,
19477: STR
19478: PUSH
19479: LD_VAR 0 3
19483: PUSH
19484: LD_VAR 0 2
19488: ARRAY
19489: PUSH
19490: LD_INT 4
19492: ARRAY
19493: STR
19494: PUSH
19495: LD_STRING )
19497: STR
19498: PPUSH
19499: CALL_OW 559
19503: GO 19413
19505: POP
19506: POP
// end ; end ;
19507: LD_VAR 0 1
19511: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19512: LD_EXP 82
19516: IFFALSE 20201
19518: GO 19520
19520: DISABLE
19521: LD_INT 0
19523: PPUSH
19524: PPUSH
19525: PPUSH
19526: PPUSH
19527: PPUSH
19528: PPUSH
19529: PPUSH
19530: PPUSH
19531: PPUSH
// begin enable ;
19532: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_EXP 82
19542: PPUSH
19543: CALL 65863 0 1
19547: ST_TO_ADDR
// if not list then
19548: LD_VAR 0 3
19552: NOT
19553: IFFALSE 19557
// exit ;
19555: GO 20201
// for i := 1 to list do
19557: LD_ADDR_VAR 0 1
19561: PUSH
19562: DOUBLE
19563: LD_INT 1
19565: DEC
19566: ST_TO_ADDR
19567: LD_VAR 0 3
19571: PUSH
19572: FOR_TO
19573: IFFALSE 20199
// begin depot := list [ i ] [ 2 ] ;
19575: LD_ADDR_VAR 0 8
19579: PUSH
19580: LD_VAR 0 3
19584: PUSH
19585: LD_VAR 0 1
19589: ARRAY
19590: PUSH
19591: LD_INT 2
19593: ARRAY
19594: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19595: LD_ADDR_VAR 0 5
19599: PUSH
19600: LD_VAR 0 3
19604: PUSH
19605: LD_VAR 0 1
19609: ARRAY
19610: PUSH
19611: LD_INT 1
19613: ARRAY
19614: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19615: LD_VAR 0 8
19619: PPUSH
19620: CALL_OW 301
19624: PUSH
19625: LD_VAR 0 5
19629: PUSH
19630: LD_VAR 0 8
19634: PPUSH
19635: CALL_OW 255
19639: NONEQUAL
19640: OR
19641: IFFALSE 19670
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19643: LD_ADDR_EXP 82
19647: PUSH
19648: LD_EXP 82
19652: PPUSH
19653: LD_VAR 0 8
19657: PPUSH
19658: LD_INT 0
19660: PPUSH
19661: CALL_OW 1
19665: ST_TO_ADDR
// exit ;
19666: POP
19667: POP
19668: GO 20201
// end ; x := list [ i ] [ 3 ] ;
19670: LD_ADDR_VAR 0 6
19674: PUSH
19675: LD_VAR 0 3
19679: PUSH
19680: LD_VAR 0 1
19684: ARRAY
19685: PUSH
19686: LD_INT 3
19688: ARRAY
19689: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19690: LD_ADDR_VAR 0 7
19694: PUSH
19695: LD_VAR 0 3
19699: PUSH
19700: LD_VAR 0 1
19704: ARRAY
19705: PUSH
19706: LD_INT 4
19708: ARRAY
19709: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19710: LD_ADDR_VAR 0 9
19714: PUSH
19715: LD_VAR 0 6
19719: PPUSH
19720: LD_VAR 0 7
19724: PPUSH
19725: LD_INT 16
19727: PPUSH
19728: CALL 64451 0 3
19732: ST_TO_ADDR
// if not cratesNearbyPoint then
19733: LD_VAR 0 9
19737: NOT
19738: IFFALSE 19744
// exit ;
19740: POP
19741: POP
19742: GO 20201
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19744: LD_ADDR_VAR 0 4
19748: PUSH
19749: LD_INT 22
19751: PUSH
19752: LD_VAR 0 5
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 3
19763: PUSH
19764: LD_INT 60
19766: PUSH
19767: EMPTY
19768: LIST
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: LD_INT 91
19776: PUSH
19777: LD_VAR 0 8
19781: PUSH
19782: LD_INT 6
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 2
19792: PUSH
19793: LD_INT 25
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 25
19805: PUSH
19806: LD_INT 16
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: PPUSH
19824: CALL_OW 69
19828: PUSH
19829: LD_VAR 0 8
19833: PPUSH
19834: CALL_OW 313
19838: PPUSH
19839: LD_INT 3
19841: PUSH
19842: LD_INT 60
19844: PUSH
19845: EMPTY
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 2
19854: PUSH
19855: LD_INT 25
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PUSH
19865: LD_INT 25
19867: PUSH
19868: LD_INT 16
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: LIST
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 72
19888: UNION
19889: ST_TO_ADDR
// if tmp then
19890: LD_VAR 0 4
19894: IFFALSE 19974
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19896: LD_ADDR_VAR 0 4
19900: PUSH
19901: LD_VAR 0 4
19905: PPUSH
19906: LD_INT 3
19908: PPUSH
19909: CALL 62420 0 2
19913: ST_TO_ADDR
// for j in tmp do
19914: LD_ADDR_VAR 0 2
19918: PUSH
19919: LD_VAR 0 4
19923: PUSH
19924: FOR_IN
19925: IFFALSE 19968
// begin if IsInUnit ( j ) then
19927: LD_VAR 0 2
19931: PPUSH
19932: CALL_OW 310
19936: IFFALSE 19947
// ComExit ( j ) ;
19938: LD_VAR 0 2
19942: PPUSH
19943: CALL 62503 0 1
// AddComCollect ( j , x , y ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: LD_VAR 0 6
19956: PPUSH
19957: LD_VAR 0 7
19961: PPUSH
19962: CALL_OW 177
// end ;
19966: GO 19924
19968: POP
19969: POP
// exit ;
19970: POP
19971: POP
19972: GO 20201
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19974: LD_ADDR_VAR 0 4
19978: PUSH
19979: LD_INT 22
19981: PUSH
19982: LD_VAR 0 5
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 91
19993: PUSH
19994: LD_VAR 0 8
19998: PUSH
19999: LD_INT 8
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 2
20009: PUSH
20010: LD_INT 34
20012: PUSH
20013: LD_INT 12
20015: PUSH
20016: EMPTY
20017: LIST
20018: LIST
20019: PUSH
20020: LD_INT 34
20022: PUSH
20023: LD_INT 51
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: LD_INT 34
20032: PUSH
20033: LD_INT 32
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: PUSH
20040: LD_INT 34
20042: PUSH
20043: LD_INT 89
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PUSH
20050: EMPTY
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: LIST
20061: PPUSH
20062: CALL_OW 69
20066: ST_TO_ADDR
// if tmp then
20067: LD_VAR 0 4
20071: IFFALSE 20197
// begin for j in tmp do
20073: LD_ADDR_VAR 0 2
20077: PUSH
20078: LD_VAR 0 4
20082: PUSH
20083: FOR_IN
20084: IFFALSE 20195
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20086: LD_VAR 0 2
20090: PPUSH
20091: CALL_OW 262
20095: PUSH
20096: LD_INT 3
20098: EQUAL
20099: PUSH
20100: LD_VAR 0 2
20104: PPUSH
20105: CALL_OW 261
20109: PUSH
20110: LD_INT 20
20112: GREATER
20113: OR
20114: PUSH
20115: LD_VAR 0 2
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: AND
20126: PUSH
20127: LD_VAR 0 2
20131: PPUSH
20132: CALL_OW 263
20136: PUSH
20137: LD_INT 1
20139: NONEQUAL
20140: PUSH
20141: LD_VAR 0 2
20145: PPUSH
20146: CALL_OW 311
20150: OR
20151: AND
20152: IFFALSE 20193
// begin ComCollect ( j , x , y ) ;
20154: LD_VAR 0 2
20158: PPUSH
20159: LD_VAR 0 6
20163: PPUSH
20164: LD_VAR 0 7
20168: PPUSH
20169: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20173: LD_VAR 0 2
20177: PPUSH
20178: LD_VAR 0 8
20182: PPUSH
20183: CALL_OW 172
// exit ;
20187: POP
20188: POP
20189: POP
20190: POP
20191: GO 20201
// end ;
20193: GO 20083
20195: POP
20196: POP
// end ; end ;
20197: GO 19572
20199: POP
20200: POP
// end ; end_of_file
20201: PPOPN 9
20203: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
20204: LD_VAR 0 1
20208: PUSH
20209: LD_INT 200
20211: DOUBLE
20212: GREATEREQUAL
20213: IFFALSE 20221
20215: LD_INT 299
20217: DOUBLE
20218: LESSEQUAL
20219: IFTRUE 20223
20221: GO 20255
20223: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
20224: LD_VAR 0 1
20228: PPUSH
20229: LD_VAR 0 2
20233: PPUSH
20234: LD_VAR 0 3
20238: PPUSH
20239: LD_VAR 0 4
20243: PPUSH
20244: LD_VAR 0 5
20248: PPUSH
20249: CALL 20743 0 5
20253: GO 20332
20255: LD_INT 300
20257: DOUBLE
20258: GREATEREQUAL
20259: IFFALSE 20267
20261: LD_INT 399
20263: DOUBLE
20264: LESSEQUAL
20265: IFTRUE 20269
20267: GO 20331
20269: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
20270: LD_VAR 0 1
20274: PPUSH
20275: LD_VAR 0 2
20279: PPUSH
20280: LD_VAR 0 3
20284: PPUSH
20285: LD_VAR 0 4
20289: PPUSH
20290: LD_VAR 0 5
20294: PPUSH
20295: LD_VAR 0 6
20299: PPUSH
20300: LD_VAR 0 7
20304: PPUSH
20305: LD_VAR 0 8
20309: PPUSH
20310: LD_VAR 0 9
20314: PPUSH
20315: LD_VAR 0 10
20319: PPUSH
20320: LD_VAR 0 11
20324: PPUSH
20325: CALL 16913 0 11
20329: GO 20332
20331: POP
// end ;
20332: PPOPN 11
20334: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
20335: LD_VAR 0 1
20339: PPUSH
20340: LD_VAR 0 2
20344: PPUSH
20345: LD_VAR 0 3
20349: PPUSH
20350: LD_VAR 0 4
20354: PPUSH
20355: LD_VAR 0 5
20359: PPUSH
20360: CALL 20479 0 5
// end ; end_of_file
20364: PPOPN 5
20366: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20367: LD_INT 0
20369: PPUSH
20370: PPUSH
20371: PPUSH
20372: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20373: LD_VAR 0 1
20377: PPUSH
20378: CALL_OW 264
20382: PUSH
20383: LD_INT 91
20385: EQUAL
20386: IFFALSE 20458
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20388: LD_INT 68
20390: PPUSH
20391: LD_VAR 0 1
20395: PPUSH
20396: CALL_OW 255
20400: PPUSH
20401: CALL_OW 321
20405: PUSH
20406: LD_INT 2
20408: EQUAL
20409: IFFALSE 20421
// eff := 70 else
20411: LD_ADDR_VAR 0 4
20415: PUSH
20416: LD_INT 70
20418: ST_TO_ADDR
20419: GO 20429
// eff := 30 ;
20421: LD_ADDR_VAR 0 4
20425: PUSH
20426: LD_INT 30
20428: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20429: LD_VAR 0 1
20433: PPUSH
20434: CALL_OW 250
20438: PPUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 251
20448: PPUSH
20449: LD_VAR 0 4
20453: PPUSH
20454: CALL_OW 495
// end ; end ;
20458: LD_VAR 0 2
20462: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20463: LD_INT 0
20465: PPUSH
// end ;
20466: LD_VAR 0 4
20470: RET
// export function SOS_Command ( cmd ) ; begin
20471: LD_INT 0
20473: PPUSH
// end ;
20474: LD_VAR 0 2
20478: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20479: LD_INT 0
20481: PPUSH
// end ;
20482: LD_VAR 0 6
20486: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20487: LD_INT 0
20489: PPUSH
20490: PPUSH
// if not vehicle or not factory then
20491: LD_VAR 0 1
20495: NOT
20496: PUSH
20497: LD_VAR 0 2
20501: NOT
20502: OR
20503: IFFALSE 20507
// exit ;
20505: GO 20738
// if factoryWaypoints >= factory then
20507: LD_EXP 81
20511: PUSH
20512: LD_VAR 0 2
20516: GREATEREQUAL
20517: IFFALSE 20738
// if factoryWaypoints [ factory ] then
20519: LD_EXP 81
20523: PUSH
20524: LD_VAR 0 2
20528: ARRAY
20529: IFFALSE 20738
// begin if GetControl ( vehicle ) = control_manual then
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 263
20540: PUSH
20541: LD_INT 1
20543: EQUAL
20544: IFFALSE 20625
// begin driver := IsDrivenBy ( vehicle ) ;
20546: LD_ADDR_VAR 0 4
20550: PUSH
20551: LD_VAR 0 1
20555: PPUSH
20556: CALL_OW 311
20560: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20561: LD_VAR 0 4
20565: PPUSH
20566: LD_EXP 81
20570: PUSH
20571: LD_VAR 0 2
20575: ARRAY
20576: PUSH
20577: LD_INT 3
20579: ARRAY
20580: PPUSH
20581: LD_EXP 81
20585: PUSH
20586: LD_VAR 0 2
20590: ARRAY
20591: PUSH
20592: LD_INT 4
20594: ARRAY
20595: PPUSH
20596: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20600: LD_VAR 0 4
20604: PPUSH
20605: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20609: LD_VAR 0 4
20613: PPUSH
20614: LD_VAR 0 2
20618: PPUSH
20619: CALL_OW 180
// end else
20623: GO 20738
// if GetControl ( vehicle ) = control_remote then
20625: LD_VAR 0 1
20629: PPUSH
20630: CALL_OW 263
20634: PUSH
20635: LD_INT 2
20637: EQUAL
20638: IFFALSE 20699
// begin wait ( 0 0$2 ) ;
20640: LD_INT 70
20642: PPUSH
20643: CALL_OW 67
// if Connect ( vehicle ) then
20647: LD_VAR 0 1
20651: PPUSH
20652: CALL 32762 0 1
20656: IFFALSE 20697
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20658: LD_VAR 0 1
20662: PPUSH
20663: LD_EXP 81
20667: PUSH
20668: LD_VAR 0 2
20672: ARRAY
20673: PUSH
20674: LD_INT 3
20676: ARRAY
20677: PPUSH
20678: LD_EXP 81
20682: PUSH
20683: LD_VAR 0 2
20687: ARRAY
20688: PUSH
20689: LD_INT 4
20691: ARRAY
20692: PPUSH
20693: CALL_OW 171
// end else
20697: GO 20738
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20699: LD_VAR 0 1
20703: PPUSH
20704: LD_EXP 81
20708: PUSH
20709: LD_VAR 0 2
20713: ARRAY
20714: PUSH
20715: LD_INT 3
20717: ARRAY
20718: PPUSH
20719: LD_EXP 81
20723: PUSH
20724: LD_VAR 0 2
20728: ARRAY
20729: PUSH
20730: LD_INT 4
20732: ARRAY
20733: PPUSH
20734: CALL_OW 171
// end ; end ;
20738: LD_VAR 0 3
20742: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20743: LD_INT 0
20745: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20746: LD_VAR 0 1
20750: PUSH
20751: LD_INT 250
20753: EQUAL
20754: PUSH
20755: LD_VAR 0 2
20759: PPUSH
20760: CALL_OW 264
20764: PUSH
20765: LD_INT 81
20767: EQUAL
20768: AND
20769: IFFALSE 20790
// MinerPlaceMine ( unit , x , y ) ;
20771: LD_VAR 0 2
20775: PPUSH
20776: LD_VAR 0 4
20780: PPUSH
20781: LD_VAR 0 5
20785: PPUSH
20786: CALL 23175 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20790: LD_VAR 0 1
20794: PUSH
20795: LD_INT 251
20797: EQUAL
20798: PUSH
20799: LD_VAR 0 2
20803: PPUSH
20804: CALL_OW 264
20808: PUSH
20809: LD_INT 81
20811: EQUAL
20812: AND
20813: IFFALSE 20834
// MinerDetonateMine ( unit , x , y ) ;
20815: LD_VAR 0 2
20819: PPUSH
20820: LD_VAR 0 4
20824: PPUSH
20825: LD_VAR 0 5
20829: PPUSH
20830: CALL 23450 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20834: LD_VAR 0 1
20838: PUSH
20839: LD_INT 252
20841: EQUAL
20842: PUSH
20843: LD_VAR 0 2
20847: PPUSH
20848: CALL_OW 264
20852: PUSH
20853: LD_INT 81
20855: EQUAL
20856: AND
20857: IFFALSE 20878
// MinerCreateMinefield ( unit , x , y ) ;
20859: LD_VAR 0 2
20863: PPUSH
20864: LD_VAR 0 4
20868: PPUSH
20869: LD_VAR 0 5
20873: PPUSH
20874: CALL 23867 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20878: LD_VAR 0 1
20882: PUSH
20883: LD_INT 253
20885: EQUAL
20886: PUSH
20887: LD_VAR 0 2
20891: PPUSH
20892: CALL_OW 257
20896: PUSH
20897: LD_INT 5
20899: EQUAL
20900: AND
20901: IFFALSE 20922
// ComBinocular ( unit , x , y ) ;
20903: LD_VAR 0 2
20907: PPUSH
20908: LD_VAR 0 4
20912: PPUSH
20913: LD_VAR 0 5
20917: PPUSH
20918: CALL 24236 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20922: LD_VAR 0 1
20926: PUSH
20927: LD_INT 254
20929: EQUAL
20930: PUSH
20931: LD_VAR 0 2
20935: PPUSH
20936: CALL_OW 264
20940: PUSH
20941: LD_INT 99
20943: EQUAL
20944: AND
20945: PUSH
20946: LD_VAR 0 3
20950: PPUSH
20951: CALL_OW 263
20955: PUSH
20956: LD_INT 3
20958: EQUAL
20959: AND
20960: IFFALSE 20976
// HackDestroyVehicle ( unit , selectedUnit ) ;
20962: LD_VAR 0 2
20966: PPUSH
20967: LD_VAR 0 3
20971: PPUSH
20972: CALL 22539 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20976: LD_VAR 0 1
20980: PUSH
20981: LD_INT 255
20983: EQUAL
20984: PUSH
20985: LD_VAR 0 2
20989: PPUSH
20990: CALL_OW 264
20994: PUSH
20995: LD_INT 14
20997: PUSH
20998: LD_INT 53
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: IN
21005: AND
21006: PUSH
21007: LD_VAR 0 4
21011: PPUSH
21012: LD_VAR 0 5
21016: PPUSH
21017: CALL_OW 488
21021: AND
21022: IFFALSE 21046
// CutTreeXYR ( unit , x , y , 12 ) ;
21024: LD_VAR 0 2
21028: PPUSH
21029: LD_VAR 0 4
21033: PPUSH
21034: LD_VAR 0 5
21038: PPUSH
21039: LD_INT 12
21041: PPUSH
21042: CALL 21109 0 4
// if cmd = 256 then
21046: LD_VAR 0 1
21050: PUSH
21051: LD_INT 256
21053: EQUAL
21054: IFFALSE 21075
// SetFactoryWaypoint ( unit , x , y ) ;
21056: LD_VAR 0 2
21060: PPUSH
21061: LD_VAR 0 4
21065: PPUSH
21066: LD_VAR 0 5
21070: PPUSH
21071: CALL 18893 0 3
// if cmd = 257 then
21075: LD_VAR 0 1
21079: PUSH
21080: LD_INT 257
21082: EQUAL
21083: IFFALSE 21104
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21085: LD_VAR 0 2
21089: PPUSH
21090: LD_VAR 0 4
21094: PPUSH
21095: LD_VAR 0 5
21099: PPUSH
21100: CALL 19255 0 3
// end ;
21104: LD_VAR 0 6
21108: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21109: LD_INT 0
21111: PPUSH
21112: PPUSH
21113: PPUSH
21114: PPUSH
21115: PPUSH
21116: PPUSH
21117: PPUSH
21118: PPUSH
21119: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21120: LD_VAR 0 1
21124: NOT
21125: PUSH
21126: LD_VAR 0 2
21130: PPUSH
21131: LD_VAR 0 3
21135: PPUSH
21136: CALL_OW 488
21140: NOT
21141: OR
21142: PUSH
21143: LD_VAR 0 4
21147: NOT
21148: OR
21149: IFFALSE 21153
// exit ;
21151: GO 21493
// list := [ ] ;
21153: LD_ADDR_VAR 0 13
21157: PUSH
21158: EMPTY
21159: ST_TO_ADDR
// if x - r < 0 then
21160: LD_VAR 0 2
21164: PUSH
21165: LD_VAR 0 4
21169: MINUS
21170: PUSH
21171: LD_INT 0
21173: LESS
21174: IFFALSE 21186
// min_x := 0 else
21176: LD_ADDR_VAR 0 7
21180: PUSH
21181: LD_INT 0
21183: ST_TO_ADDR
21184: GO 21202
// min_x := x - r ;
21186: LD_ADDR_VAR 0 7
21190: PUSH
21191: LD_VAR 0 2
21195: PUSH
21196: LD_VAR 0 4
21200: MINUS
21201: ST_TO_ADDR
// if y - r < 0 then
21202: LD_VAR 0 3
21206: PUSH
21207: LD_VAR 0 4
21211: MINUS
21212: PUSH
21213: LD_INT 0
21215: LESS
21216: IFFALSE 21228
// min_y := 0 else
21218: LD_ADDR_VAR 0 8
21222: PUSH
21223: LD_INT 0
21225: ST_TO_ADDR
21226: GO 21244
// min_y := y - r ;
21228: LD_ADDR_VAR 0 8
21232: PUSH
21233: LD_VAR 0 3
21237: PUSH
21238: LD_VAR 0 4
21242: MINUS
21243: ST_TO_ADDR
// max_x := x + r ;
21244: LD_ADDR_VAR 0 9
21248: PUSH
21249: LD_VAR 0 2
21253: PUSH
21254: LD_VAR 0 4
21258: PLUS
21259: ST_TO_ADDR
// max_y := y + r ;
21260: LD_ADDR_VAR 0 10
21264: PUSH
21265: LD_VAR 0 3
21269: PUSH
21270: LD_VAR 0 4
21274: PLUS
21275: ST_TO_ADDR
// for _x = min_x to max_x do
21276: LD_ADDR_VAR 0 11
21280: PUSH
21281: DOUBLE
21282: LD_VAR 0 7
21286: DEC
21287: ST_TO_ADDR
21288: LD_VAR 0 9
21292: PUSH
21293: FOR_TO
21294: IFFALSE 21411
// for _y = min_y to max_y do
21296: LD_ADDR_VAR 0 12
21300: PUSH
21301: DOUBLE
21302: LD_VAR 0 8
21306: DEC
21307: ST_TO_ADDR
21308: LD_VAR 0 10
21312: PUSH
21313: FOR_TO
21314: IFFALSE 21407
// begin if not ValidHex ( _x , _y ) then
21316: LD_VAR 0 11
21320: PPUSH
21321: LD_VAR 0 12
21325: PPUSH
21326: CALL_OW 488
21330: NOT
21331: IFFALSE 21335
// continue ;
21333: GO 21313
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21335: LD_VAR 0 11
21339: PPUSH
21340: LD_VAR 0 12
21344: PPUSH
21345: CALL_OW 351
21349: PUSH
21350: LD_VAR 0 11
21354: PPUSH
21355: LD_VAR 0 12
21359: PPUSH
21360: CALL_OW 554
21364: AND
21365: IFFALSE 21405
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21367: LD_ADDR_VAR 0 13
21371: PUSH
21372: LD_VAR 0 13
21376: PPUSH
21377: LD_VAR 0 13
21381: PUSH
21382: LD_INT 1
21384: PLUS
21385: PPUSH
21386: LD_VAR 0 11
21390: PUSH
21391: LD_VAR 0 12
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PPUSH
21400: CALL_OW 2
21404: ST_TO_ADDR
// end ;
21405: GO 21313
21407: POP
21408: POP
21409: GO 21293
21411: POP
21412: POP
// if not list then
21413: LD_VAR 0 13
21417: NOT
21418: IFFALSE 21422
// exit ;
21420: GO 21493
// for i in list do
21422: LD_ADDR_VAR 0 6
21426: PUSH
21427: LD_VAR 0 13
21431: PUSH
21432: FOR_IN
21433: IFFALSE 21491
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_STRING M
21442: PUSH
21443: LD_VAR 0 6
21447: PUSH
21448: LD_INT 1
21450: ARRAY
21451: PUSH
21452: LD_VAR 0 6
21456: PUSH
21457: LD_INT 2
21459: ARRAY
21460: PUSH
21461: LD_INT 0
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: LD_INT 0
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: PPUSH
21485: CALL_OW 447
21489: GO 21432
21491: POP
21492: POP
// end ;
21493: LD_VAR 0 5
21497: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21498: LD_EXP 84
21502: NOT
21503: IFFALSE 21553
21505: GO 21507
21507: DISABLE
// begin initHack := true ;
21508: LD_ADDR_EXP 84
21512: PUSH
21513: LD_INT 1
21515: ST_TO_ADDR
// hackTanks := [ ] ;
21516: LD_ADDR_EXP 85
21520: PUSH
21521: EMPTY
21522: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21523: LD_ADDR_EXP 86
21527: PUSH
21528: EMPTY
21529: ST_TO_ADDR
// hackLimit := 3 ;
21530: LD_ADDR_EXP 87
21534: PUSH
21535: LD_INT 3
21537: ST_TO_ADDR
// hackDist := 12 ;
21538: LD_ADDR_EXP 88
21542: PUSH
21543: LD_INT 12
21545: ST_TO_ADDR
// hackCounter := [ ] ;
21546: LD_ADDR_EXP 89
21550: PUSH
21551: EMPTY
21552: ST_TO_ADDR
// end ;
21553: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21554: LD_EXP 84
21558: PUSH
21559: LD_INT 34
21561: PUSH
21562: LD_INT 99
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PPUSH
21569: CALL_OW 69
21573: AND
21574: IFFALSE 21827
21576: GO 21578
21578: DISABLE
21579: LD_INT 0
21581: PPUSH
21582: PPUSH
// begin enable ;
21583: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21584: LD_ADDR_VAR 0 1
21588: PUSH
21589: LD_INT 34
21591: PUSH
21592: LD_INT 99
21594: PUSH
21595: EMPTY
21596: LIST
21597: LIST
21598: PPUSH
21599: CALL_OW 69
21603: PUSH
21604: FOR_IN
21605: IFFALSE 21825
// begin if not i in hackTanks then
21607: LD_VAR 0 1
21611: PUSH
21612: LD_EXP 85
21616: IN
21617: NOT
21618: IFFALSE 21701
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21620: LD_ADDR_EXP 85
21624: PUSH
21625: LD_EXP 85
21629: PPUSH
21630: LD_EXP 85
21634: PUSH
21635: LD_INT 1
21637: PLUS
21638: PPUSH
21639: LD_VAR 0 1
21643: PPUSH
21644: CALL_OW 1
21648: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21649: LD_ADDR_EXP 86
21653: PUSH
21654: LD_EXP 86
21658: PPUSH
21659: LD_EXP 86
21663: PUSH
21664: LD_INT 1
21666: PLUS
21667: PPUSH
21668: EMPTY
21669: PPUSH
21670: CALL_OW 1
21674: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21675: LD_ADDR_EXP 89
21679: PUSH
21680: LD_EXP 89
21684: PPUSH
21685: LD_EXP 89
21689: PUSH
21690: LD_INT 1
21692: PLUS
21693: PPUSH
21694: EMPTY
21695: PPUSH
21696: CALL_OW 1
21700: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21701: LD_VAR 0 1
21705: PPUSH
21706: CALL_OW 302
21710: NOT
21711: IFFALSE 21724
// begin HackUnlinkAll ( i ) ;
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL 21830 0 1
// continue ;
21722: GO 21604
// end ; HackCheckCapturedStatus ( i ) ;
21724: LD_VAR 0 1
21728: PPUSH
21729: CALL 22273 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21733: LD_ADDR_VAR 0 2
21737: PUSH
21738: LD_INT 81
21740: PUSH
21741: LD_VAR 0 1
21745: PPUSH
21746: CALL_OW 255
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PUSH
21755: LD_INT 33
21757: PUSH
21758: LD_INT 3
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 91
21767: PUSH
21768: LD_VAR 0 1
21772: PUSH
21773: LD_EXP 88
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 50
21785: PUSH
21786: EMPTY
21787: LIST
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: PPUSH
21795: CALL_OW 69
21799: ST_TO_ADDR
// if not tmp then
21800: LD_VAR 0 2
21804: NOT
21805: IFFALSE 21809
// continue ;
21807: GO 21604
// HackLink ( i , tmp ) ;
21809: LD_VAR 0 1
21813: PPUSH
21814: LD_VAR 0 2
21818: PPUSH
21819: CALL 21966 0 2
// end ;
21823: GO 21604
21825: POP
21826: POP
// end ;
21827: PPOPN 2
21829: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21830: LD_INT 0
21832: PPUSH
21833: PPUSH
21834: PPUSH
// if not hack in hackTanks then
21835: LD_VAR 0 1
21839: PUSH
21840: LD_EXP 85
21844: IN
21845: NOT
21846: IFFALSE 21850
// exit ;
21848: GO 21961
// index := GetElementIndex ( hackTanks , hack ) ;
21850: LD_ADDR_VAR 0 4
21854: PUSH
21855: LD_EXP 85
21859: PPUSH
21860: LD_VAR 0 1
21864: PPUSH
21865: CALL 29578 0 2
21869: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21870: LD_EXP 86
21874: PUSH
21875: LD_VAR 0 4
21879: ARRAY
21880: IFFALSE 21961
// begin for i in hackTanksCaptured [ index ] do
21882: LD_ADDR_VAR 0 3
21886: PUSH
21887: LD_EXP 86
21891: PUSH
21892: LD_VAR 0 4
21896: ARRAY
21897: PUSH
21898: FOR_IN
21899: IFFALSE 21925
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21901: LD_VAR 0 3
21905: PUSH
21906: LD_INT 1
21908: ARRAY
21909: PPUSH
21910: LD_VAR 0 3
21914: PUSH
21915: LD_INT 2
21917: ARRAY
21918: PPUSH
21919: CALL_OW 235
21923: GO 21898
21925: POP
21926: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21927: LD_ADDR_EXP 86
21931: PUSH
21932: LD_EXP 86
21936: PPUSH
21937: LD_VAR 0 4
21941: PPUSH
21942: EMPTY
21943: PPUSH
21944: CALL_OW 1
21948: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21949: LD_VAR 0 1
21953: PPUSH
21954: LD_INT 0
21956: PPUSH
21957: CALL_OW 505
// end ; end ;
21961: LD_VAR 0 2
21965: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21966: LD_INT 0
21968: PPUSH
21969: PPUSH
21970: PPUSH
// if not hack in hackTanks or not vehicles then
21971: LD_VAR 0 1
21975: PUSH
21976: LD_EXP 85
21980: IN
21981: NOT
21982: PUSH
21983: LD_VAR 0 2
21987: NOT
21988: OR
21989: IFFALSE 21993
// exit ;
21991: GO 22268
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21993: LD_ADDR_VAR 0 2
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: LD_VAR 0 2
22007: PPUSH
22008: LD_INT 1
22010: PPUSH
22011: LD_INT 1
22013: PPUSH
22014: CALL 30228 0 4
22018: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22019: LD_ADDR_VAR 0 5
22023: PUSH
22024: LD_EXP 85
22028: PPUSH
22029: LD_VAR 0 1
22033: PPUSH
22034: CALL 29578 0 2
22038: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22039: LD_EXP 86
22043: PUSH
22044: LD_VAR 0 5
22048: ARRAY
22049: PUSH
22050: LD_EXP 87
22054: LESS
22055: IFFALSE 22244
// begin for i := 1 to vehicles do
22057: LD_ADDR_VAR 0 4
22061: PUSH
22062: DOUBLE
22063: LD_INT 1
22065: DEC
22066: ST_TO_ADDR
22067: LD_VAR 0 2
22071: PUSH
22072: FOR_TO
22073: IFFALSE 22242
// begin if hackTanksCaptured [ index ] = hackLimit then
22075: LD_EXP 86
22079: PUSH
22080: LD_VAR 0 5
22084: ARRAY
22085: PUSH
22086: LD_EXP 87
22090: EQUAL
22091: IFFALSE 22095
// break ;
22093: GO 22242
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22095: LD_ADDR_EXP 89
22099: PUSH
22100: LD_EXP 89
22104: PPUSH
22105: LD_VAR 0 5
22109: PPUSH
22110: LD_EXP 89
22114: PUSH
22115: LD_VAR 0 5
22119: ARRAY
22120: PUSH
22121: LD_INT 1
22123: PLUS
22124: PPUSH
22125: CALL_OW 1
22129: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22130: LD_ADDR_EXP 86
22134: PUSH
22135: LD_EXP 86
22139: PPUSH
22140: LD_VAR 0 5
22144: PUSH
22145: LD_EXP 86
22149: PUSH
22150: LD_VAR 0 5
22154: ARRAY
22155: PUSH
22156: LD_INT 1
22158: PLUS
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: PPUSH
22164: LD_VAR 0 2
22168: PUSH
22169: LD_VAR 0 4
22173: ARRAY
22174: PUSH
22175: LD_VAR 0 2
22179: PUSH
22180: LD_VAR 0 4
22184: ARRAY
22185: PPUSH
22186: CALL_OW 255
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PPUSH
22195: CALL 29793 0 3
22199: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22200: LD_VAR 0 2
22204: PUSH
22205: LD_VAR 0 4
22209: ARRAY
22210: PPUSH
22211: LD_VAR 0 1
22215: PPUSH
22216: CALL_OW 255
22220: PPUSH
22221: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22225: LD_VAR 0 2
22229: PUSH
22230: LD_VAR 0 4
22234: ARRAY
22235: PPUSH
22236: CALL_OW 141
// end ;
22240: GO 22072
22242: POP
22243: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22244: LD_VAR 0 1
22248: PPUSH
22249: LD_EXP 86
22253: PUSH
22254: LD_VAR 0 5
22258: ARRAY
22259: PUSH
22260: LD_INT 0
22262: PLUS
22263: PPUSH
22264: CALL_OW 505
// end ;
22268: LD_VAR 0 3
22272: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22273: LD_INT 0
22275: PPUSH
22276: PPUSH
22277: PPUSH
22278: PPUSH
// if not hack in hackTanks then
22279: LD_VAR 0 1
22283: PUSH
22284: LD_EXP 85
22288: IN
22289: NOT
22290: IFFALSE 22294
// exit ;
22292: GO 22534
// index := GetElementIndex ( hackTanks , hack ) ;
22294: LD_ADDR_VAR 0 4
22298: PUSH
22299: LD_EXP 85
22303: PPUSH
22304: LD_VAR 0 1
22308: PPUSH
22309: CALL 29578 0 2
22313: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22314: LD_ADDR_VAR 0 3
22318: PUSH
22319: DOUBLE
22320: LD_EXP 86
22324: PUSH
22325: LD_VAR 0 4
22329: ARRAY
22330: INC
22331: ST_TO_ADDR
22332: LD_INT 1
22334: PUSH
22335: FOR_DOWNTO
22336: IFFALSE 22508
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22338: LD_ADDR_VAR 0 5
22342: PUSH
22343: LD_EXP 86
22347: PUSH
22348: LD_VAR 0 4
22352: ARRAY
22353: PUSH
22354: LD_VAR 0 3
22358: ARRAY
22359: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22360: LD_VAR 0 5
22364: PUSH
22365: LD_INT 1
22367: ARRAY
22368: PPUSH
22369: CALL_OW 302
22373: NOT
22374: PUSH
22375: LD_VAR 0 5
22379: PUSH
22380: LD_INT 1
22382: ARRAY
22383: PPUSH
22384: CALL_OW 255
22388: PUSH
22389: LD_VAR 0 1
22393: PPUSH
22394: CALL_OW 255
22398: NONEQUAL
22399: OR
22400: IFFALSE 22506
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22402: LD_VAR 0 5
22406: PUSH
22407: LD_INT 1
22409: ARRAY
22410: PPUSH
22411: CALL_OW 305
22415: PUSH
22416: LD_VAR 0 5
22420: PUSH
22421: LD_INT 1
22423: ARRAY
22424: PPUSH
22425: CALL_OW 255
22429: PUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL_OW 255
22439: EQUAL
22440: AND
22441: IFFALSE 22465
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22443: LD_VAR 0 5
22447: PUSH
22448: LD_INT 1
22450: ARRAY
22451: PPUSH
22452: LD_VAR 0 5
22456: PUSH
22457: LD_INT 2
22459: ARRAY
22460: PPUSH
22461: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22465: LD_ADDR_EXP 86
22469: PUSH
22470: LD_EXP 86
22474: PPUSH
22475: LD_VAR 0 4
22479: PPUSH
22480: LD_EXP 86
22484: PUSH
22485: LD_VAR 0 4
22489: ARRAY
22490: PPUSH
22491: LD_VAR 0 3
22495: PPUSH
22496: CALL_OW 3
22500: PPUSH
22501: CALL_OW 1
22505: ST_TO_ADDR
// end ; end ;
22506: GO 22335
22508: POP
22509: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22510: LD_VAR 0 1
22514: PPUSH
22515: LD_EXP 86
22519: PUSH
22520: LD_VAR 0 4
22524: ARRAY
22525: PUSH
22526: LD_INT 0
22528: PLUS
22529: PPUSH
22530: CALL_OW 505
// end ;
22534: LD_VAR 0 2
22538: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22539: LD_INT 0
22541: PPUSH
22542: PPUSH
22543: PPUSH
22544: PPUSH
// if not hack in hackTanks then
22545: LD_VAR 0 1
22549: PUSH
22550: LD_EXP 85
22554: IN
22555: NOT
22556: IFFALSE 22560
// exit ;
22558: GO 22645
// index := GetElementIndex ( hackTanks , hack ) ;
22560: LD_ADDR_VAR 0 5
22564: PUSH
22565: LD_EXP 85
22569: PPUSH
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL 29578 0 2
22579: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22580: LD_ADDR_VAR 0 4
22584: PUSH
22585: DOUBLE
22586: LD_INT 1
22588: DEC
22589: ST_TO_ADDR
22590: LD_EXP 86
22594: PUSH
22595: LD_VAR 0 5
22599: ARRAY
22600: PUSH
22601: FOR_TO
22602: IFFALSE 22643
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22604: LD_EXP 86
22608: PUSH
22609: LD_VAR 0 5
22613: ARRAY
22614: PUSH
22615: LD_VAR 0 4
22619: ARRAY
22620: PUSH
22621: LD_INT 1
22623: ARRAY
22624: PUSH
22625: LD_VAR 0 2
22629: EQUAL
22630: IFFALSE 22641
// KillUnit ( vehicle ) ;
22632: LD_VAR 0 2
22636: PPUSH
22637: CALL_OW 66
22641: GO 22601
22643: POP
22644: POP
// end ;
22645: LD_VAR 0 3
22649: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22650: LD_EXP 90
22654: NOT
22655: IFFALSE 22690
22657: GO 22659
22659: DISABLE
// begin initMiner := true ;
22660: LD_ADDR_EXP 90
22664: PUSH
22665: LD_INT 1
22667: ST_TO_ADDR
// minersList := [ ] ;
22668: LD_ADDR_EXP 91
22672: PUSH
22673: EMPTY
22674: ST_TO_ADDR
// minerMinesList := [ ] ;
22675: LD_ADDR_EXP 92
22679: PUSH
22680: EMPTY
22681: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22682: LD_ADDR_EXP 93
22686: PUSH
22687: LD_INT 5
22689: ST_TO_ADDR
// end ;
22690: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22691: LD_EXP 90
22695: PUSH
22696: LD_INT 34
22698: PUSH
22699: LD_INT 81
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: PPUSH
22706: CALL_OW 69
22710: AND
22711: IFFALSE 23172
22713: GO 22715
22715: DISABLE
22716: LD_INT 0
22718: PPUSH
22719: PPUSH
22720: PPUSH
22721: PPUSH
// begin enable ;
22722: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22723: LD_ADDR_VAR 0 1
22727: PUSH
22728: LD_INT 34
22730: PUSH
22731: LD_INT 81
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PPUSH
22738: CALL_OW 69
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22816
// begin if not i in minersList then
22746: LD_VAR 0 1
22750: PUSH
22751: LD_EXP 91
22755: IN
22756: NOT
22757: IFFALSE 22814
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22759: LD_ADDR_EXP 91
22763: PUSH
22764: LD_EXP 91
22768: PPUSH
22769: LD_EXP 91
22773: PUSH
22774: LD_INT 1
22776: PLUS
22777: PPUSH
22778: LD_VAR 0 1
22782: PPUSH
22783: CALL_OW 1
22787: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22788: LD_ADDR_EXP 92
22792: PUSH
22793: LD_EXP 92
22797: PPUSH
22798: LD_EXP 92
22802: PUSH
22803: LD_INT 1
22805: PLUS
22806: PPUSH
22807: EMPTY
22808: PPUSH
22809: CALL_OW 1
22813: ST_TO_ADDR
// end end ;
22814: GO 22743
22816: POP
22817: POP
// for i := minerMinesList downto 1 do
22818: LD_ADDR_VAR 0 1
22822: PUSH
22823: DOUBLE
22824: LD_EXP 92
22828: INC
22829: ST_TO_ADDR
22830: LD_INT 1
22832: PUSH
22833: FOR_DOWNTO
22834: IFFALSE 23170
// begin if IsLive ( minersList [ i ] ) then
22836: LD_EXP 91
22840: PUSH
22841: LD_VAR 0 1
22845: ARRAY
22846: PPUSH
22847: CALL_OW 300
22851: IFFALSE 22879
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22853: LD_EXP 91
22857: PUSH
22858: LD_VAR 0 1
22862: ARRAY
22863: PPUSH
22864: LD_EXP 92
22868: PUSH
22869: LD_VAR 0 1
22873: ARRAY
22874: PPUSH
22875: CALL_OW 505
// if not minerMinesList [ i ] then
22879: LD_EXP 92
22883: PUSH
22884: LD_VAR 0 1
22888: ARRAY
22889: NOT
22890: IFFALSE 22894
// continue ;
22892: GO 22833
// for j := minerMinesList [ i ] downto 1 do
22894: LD_ADDR_VAR 0 2
22898: PUSH
22899: DOUBLE
22900: LD_EXP 92
22904: PUSH
22905: LD_VAR 0 1
22909: ARRAY
22910: INC
22911: ST_TO_ADDR
22912: LD_INT 1
22914: PUSH
22915: FOR_DOWNTO
22916: IFFALSE 23166
// begin side := GetSide ( minersList [ i ] ) ;
22918: LD_ADDR_VAR 0 3
22922: PUSH
22923: LD_EXP 91
22927: PUSH
22928: LD_VAR 0 1
22932: ARRAY
22933: PPUSH
22934: CALL_OW 255
22938: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22939: LD_ADDR_VAR 0 4
22943: PUSH
22944: LD_EXP 92
22948: PUSH
22949: LD_VAR 0 1
22953: ARRAY
22954: PUSH
22955: LD_VAR 0 2
22959: ARRAY
22960: PUSH
22961: LD_INT 1
22963: ARRAY
22964: PPUSH
22965: LD_EXP 92
22969: PUSH
22970: LD_VAR 0 1
22974: ARRAY
22975: PUSH
22976: LD_VAR 0 2
22980: ARRAY
22981: PUSH
22982: LD_INT 2
22984: ARRAY
22985: PPUSH
22986: CALL_OW 428
22990: ST_TO_ADDR
// if not tmp then
22991: LD_VAR 0 4
22995: NOT
22996: IFFALSE 23000
// continue ;
22998: GO 22915
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23000: LD_VAR 0 4
23004: PUSH
23005: LD_INT 81
23007: PUSH
23008: LD_VAR 0 3
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PPUSH
23017: CALL_OW 69
23021: IN
23022: PUSH
23023: LD_EXP 92
23027: PUSH
23028: LD_VAR 0 1
23032: ARRAY
23033: PUSH
23034: LD_VAR 0 2
23038: ARRAY
23039: PUSH
23040: LD_INT 1
23042: ARRAY
23043: PPUSH
23044: LD_EXP 92
23048: PUSH
23049: LD_VAR 0 1
23053: ARRAY
23054: PUSH
23055: LD_VAR 0 2
23059: ARRAY
23060: PUSH
23061: LD_INT 2
23063: ARRAY
23064: PPUSH
23065: CALL_OW 458
23069: AND
23070: IFFALSE 23164
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23072: LD_EXP 92
23076: PUSH
23077: LD_VAR 0 1
23081: ARRAY
23082: PUSH
23083: LD_VAR 0 2
23087: ARRAY
23088: PUSH
23089: LD_INT 1
23091: ARRAY
23092: PPUSH
23093: LD_EXP 92
23097: PUSH
23098: LD_VAR 0 1
23102: ARRAY
23103: PUSH
23104: LD_VAR 0 2
23108: ARRAY
23109: PUSH
23110: LD_INT 2
23112: ARRAY
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23123: LD_ADDR_EXP 92
23127: PUSH
23128: LD_EXP 92
23132: PPUSH
23133: LD_VAR 0 1
23137: PPUSH
23138: LD_EXP 92
23142: PUSH
23143: LD_VAR 0 1
23147: ARRAY
23148: PPUSH
23149: LD_VAR 0 2
23153: PPUSH
23154: CALL_OW 3
23158: PPUSH
23159: CALL_OW 1
23163: ST_TO_ADDR
// end ; end ;
23164: GO 22915
23166: POP
23167: POP
// end ;
23168: GO 22833
23170: POP
23171: POP
// end ;
23172: PPOPN 4
23174: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23175: LD_INT 0
23177: PPUSH
23178: PPUSH
// result := false ;
23179: LD_ADDR_VAR 0 4
23183: PUSH
23184: LD_INT 0
23186: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23187: LD_VAR 0 1
23191: PPUSH
23192: CALL_OW 264
23196: PUSH
23197: LD_INT 81
23199: EQUAL
23200: NOT
23201: IFFALSE 23205
// exit ;
23203: GO 23445
// index := GetElementIndex ( minersList , unit ) ;
23205: LD_ADDR_VAR 0 5
23209: PUSH
23210: LD_EXP 91
23214: PPUSH
23215: LD_VAR 0 1
23219: PPUSH
23220: CALL 29578 0 2
23224: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23225: LD_EXP 92
23229: PUSH
23230: LD_VAR 0 5
23234: ARRAY
23235: PUSH
23236: LD_EXP 93
23240: GREATEREQUAL
23241: IFFALSE 23245
// exit ;
23243: GO 23445
// ComMoveXY ( unit , x , y ) ;
23245: LD_VAR 0 1
23249: PPUSH
23250: LD_VAR 0 2
23254: PPUSH
23255: LD_VAR 0 3
23259: PPUSH
23260: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23264: LD_INT 35
23266: PPUSH
23267: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23271: LD_VAR 0 1
23275: PPUSH
23276: LD_VAR 0 2
23280: PPUSH
23281: LD_VAR 0 3
23285: PPUSH
23286: CALL 60914 0 3
23290: NOT
23291: PUSH
23292: LD_VAR 0 1
23296: PPUSH
23297: CALL_OW 314
23301: AND
23302: IFFALSE 23306
// exit ;
23304: GO 23445
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23306: LD_VAR 0 2
23310: PPUSH
23311: LD_VAR 0 3
23315: PPUSH
23316: CALL_OW 428
23320: PUSH
23321: LD_VAR 0 1
23325: EQUAL
23326: PUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL_OW 314
23336: NOT
23337: AND
23338: IFFALSE 23264
// PlaySoundXY ( x , y , PlantMine ) ;
23340: LD_VAR 0 2
23344: PPUSH
23345: LD_VAR 0 3
23349: PPUSH
23350: LD_STRING PlantMine
23352: PPUSH
23353: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23357: LD_VAR 0 2
23361: PPUSH
23362: LD_VAR 0 3
23366: PPUSH
23367: LD_VAR 0 1
23371: PPUSH
23372: CALL_OW 255
23376: PPUSH
23377: LD_INT 0
23379: PPUSH
23380: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23384: LD_ADDR_EXP 92
23388: PUSH
23389: LD_EXP 92
23393: PPUSH
23394: LD_VAR 0 5
23398: PUSH
23399: LD_EXP 92
23403: PUSH
23404: LD_VAR 0 5
23408: ARRAY
23409: PUSH
23410: LD_INT 1
23412: PLUS
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PPUSH
23418: LD_VAR 0 2
23422: PUSH
23423: LD_VAR 0 3
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PPUSH
23432: CALL 29793 0 3
23436: ST_TO_ADDR
// result := true ;
23437: LD_ADDR_VAR 0 4
23441: PUSH
23442: LD_INT 1
23444: ST_TO_ADDR
// end ;
23445: LD_VAR 0 4
23449: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23450: LD_INT 0
23452: PPUSH
23453: PPUSH
23454: PPUSH
// if not unit in minersList then
23455: LD_VAR 0 1
23459: PUSH
23460: LD_EXP 91
23464: IN
23465: NOT
23466: IFFALSE 23470
// exit ;
23468: GO 23862
// index := GetElementIndex ( minersList , unit ) ;
23470: LD_ADDR_VAR 0 6
23474: PUSH
23475: LD_EXP 91
23479: PPUSH
23480: LD_VAR 0 1
23484: PPUSH
23485: CALL 29578 0 2
23489: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23490: LD_ADDR_VAR 0 5
23494: PUSH
23495: DOUBLE
23496: LD_EXP 92
23500: PUSH
23501: LD_VAR 0 6
23505: ARRAY
23506: INC
23507: ST_TO_ADDR
23508: LD_INT 1
23510: PUSH
23511: FOR_DOWNTO
23512: IFFALSE 23673
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23514: LD_EXP 92
23518: PUSH
23519: LD_VAR 0 6
23523: ARRAY
23524: PUSH
23525: LD_VAR 0 5
23529: ARRAY
23530: PUSH
23531: LD_INT 1
23533: ARRAY
23534: PUSH
23535: LD_VAR 0 2
23539: EQUAL
23540: PUSH
23541: LD_EXP 92
23545: PUSH
23546: LD_VAR 0 6
23550: ARRAY
23551: PUSH
23552: LD_VAR 0 5
23556: ARRAY
23557: PUSH
23558: LD_INT 2
23560: ARRAY
23561: PUSH
23562: LD_VAR 0 3
23566: EQUAL
23567: AND
23568: IFFALSE 23671
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23570: LD_EXP 92
23574: PUSH
23575: LD_VAR 0 6
23579: ARRAY
23580: PUSH
23581: LD_VAR 0 5
23585: ARRAY
23586: PUSH
23587: LD_INT 1
23589: ARRAY
23590: PPUSH
23591: LD_EXP 92
23595: PUSH
23596: LD_VAR 0 6
23600: ARRAY
23601: PUSH
23602: LD_VAR 0 5
23606: ARRAY
23607: PUSH
23608: LD_INT 2
23610: ARRAY
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: CALL_OW 255
23621: PPUSH
23622: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23626: LD_ADDR_EXP 92
23630: PUSH
23631: LD_EXP 92
23635: PPUSH
23636: LD_VAR 0 6
23640: PPUSH
23641: LD_EXP 92
23645: PUSH
23646: LD_VAR 0 6
23650: ARRAY
23651: PPUSH
23652: LD_VAR 0 5
23656: PPUSH
23657: CALL_OW 3
23661: PPUSH
23662: CALL_OW 1
23666: ST_TO_ADDR
// exit ;
23667: POP
23668: POP
23669: GO 23862
// end ; end ;
23671: GO 23511
23673: POP
23674: POP
// for i := minerMinesList [ index ] downto 1 do
23675: LD_ADDR_VAR 0 5
23679: PUSH
23680: DOUBLE
23681: LD_EXP 92
23685: PUSH
23686: LD_VAR 0 6
23690: ARRAY
23691: INC
23692: ST_TO_ADDR
23693: LD_INT 1
23695: PUSH
23696: FOR_DOWNTO
23697: IFFALSE 23860
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23699: LD_EXP 92
23703: PUSH
23704: LD_VAR 0 6
23708: ARRAY
23709: PUSH
23710: LD_VAR 0 5
23714: ARRAY
23715: PUSH
23716: LD_INT 1
23718: ARRAY
23719: PPUSH
23720: LD_EXP 92
23724: PUSH
23725: LD_VAR 0 6
23729: ARRAY
23730: PUSH
23731: LD_VAR 0 5
23735: ARRAY
23736: PUSH
23737: LD_INT 2
23739: ARRAY
23740: PPUSH
23741: LD_VAR 0 2
23745: PPUSH
23746: LD_VAR 0 3
23750: PPUSH
23751: CALL_OW 298
23755: PUSH
23756: LD_INT 6
23758: LESS
23759: IFFALSE 23858
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23761: LD_EXP 92
23765: PUSH
23766: LD_VAR 0 6
23770: ARRAY
23771: PUSH
23772: LD_VAR 0 5
23776: ARRAY
23777: PUSH
23778: LD_INT 1
23780: ARRAY
23781: PPUSH
23782: LD_EXP 92
23786: PUSH
23787: LD_VAR 0 6
23791: ARRAY
23792: PUSH
23793: LD_VAR 0 5
23797: ARRAY
23798: PUSH
23799: LD_INT 2
23801: ARRAY
23802: PPUSH
23803: LD_VAR 0 1
23807: PPUSH
23808: CALL_OW 255
23812: PPUSH
23813: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23817: LD_ADDR_EXP 92
23821: PUSH
23822: LD_EXP 92
23826: PPUSH
23827: LD_VAR 0 6
23831: PPUSH
23832: LD_EXP 92
23836: PUSH
23837: LD_VAR 0 6
23841: ARRAY
23842: PPUSH
23843: LD_VAR 0 5
23847: PPUSH
23848: CALL_OW 3
23852: PPUSH
23853: CALL_OW 1
23857: ST_TO_ADDR
// end ; end ;
23858: GO 23696
23860: POP
23861: POP
// end ;
23862: LD_VAR 0 4
23866: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23867: LD_INT 0
23869: PPUSH
23870: PPUSH
23871: PPUSH
23872: PPUSH
23873: PPUSH
23874: PPUSH
23875: PPUSH
23876: PPUSH
23877: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 264
23887: PUSH
23888: LD_INT 81
23890: EQUAL
23891: NOT
23892: PUSH
23893: LD_VAR 0 1
23897: PUSH
23898: LD_EXP 91
23902: IN
23903: NOT
23904: OR
23905: IFFALSE 23909
// exit ;
23907: GO 24231
// index := GetElementIndex ( minersList , unit ) ;
23909: LD_ADDR_VAR 0 6
23913: PUSH
23914: LD_EXP 91
23918: PPUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL 29578 0 2
23928: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23929: LD_ADDR_VAR 0 8
23933: PUSH
23934: LD_EXP 93
23938: PUSH
23939: LD_EXP 92
23943: PUSH
23944: LD_VAR 0 6
23948: ARRAY
23949: MINUS
23950: ST_TO_ADDR
// if not minesFreeAmount then
23951: LD_VAR 0 8
23955: NOT
23956: IFFALSE 23960
// exit ;
23958: GO 24231
// tmp := [ ] ;
23960: LD_ADDR_VAR 0 7
23964: PUSH
23965: EMPTY
23966: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23967: LD_ADDR_VAR 0 5
23971: PUSH
23972: DOUBLE
23973: LD_INT 1
23975: DEC
23976: ST_TO_ADDR
23977: LD_VAR 0 8
23981: PUSH
23982: FOR_TO
23983: IFFALSE 24178
// begin _d := rand ( 0 , 5 ) ;
23985: LD_ADDR_VAR 0 11
23989: PUSH
23990: LD_INT 0
23992: PPUSH
23993: LD_INT 5
23995: PPUSH
23996: CALL_OW 12
24000: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24001: LD_ADDR_VAR 0 12
24005: PUSH
24006: LD_INT 2
24008: PPUSH
24009: LD_INT 6
24011: PPUSH
24012: CALL_OW 12
24016: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24017: LD_ADDR_VAR 0 9
24021: PUSH
24022: LD_VAR 0 2
24026: PPUSH
24027: LD_VAR 0 11
24031: PPUSH
24032: LD_VAR 0 12
24036: PPUSH
24037: CALL_OW 272
24041: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24042: LD_ADDR_VAR 0 10
24046: PUSH
24047: LD_VAR 0 3
24051: PPUSH
24052: LD_VAR 0 11
24056: PPUSH
24057: LD_VAR 0 12
24061: PPUSH
24062: CALL_OW 273
24066: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24067: LD_VAR 0 9
24071: PPUSH
24072: LD_VAR 0 10
24076: PPUSH
24077: CALL_OW 488
24081: PUSH
24082: LD_VAR 0 9
24086: PUSH
24087: LD_VAR 0 10
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_VAR 0 7
24100: IN
24101: NOT
24102: AND
24103: PUSH
24104: LD_VAR 0 9
24108: PPUSH
24109: LD_VAR 0 10
24113: PPUSH
24114: CALL_OW 458
24118: NOT
24119: AND
24120: IFFALSE 24162
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24122: LD_ADDR_VAR 0 7
24126: PUSH
24127: LD_VAR 0 7
24131: PPUSH
24132: LD_VAR 0 7
24136: PUSH
24137: LD_INT 1
24139: PLUS
24140: PPUSH
24141: LD_VAR 0 9
24145: PUSH
24146: LD_VAR 0 10
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PPUSH
24155: CALL_OW 1
24159: ST_TO_ADDR
24160: GO 24176
// i := i - 1 ;
24162: LD_ADDR_VAR 0 5
24166: PUSH
24167: LD_VAR 0 5
24171: PUSH
24172: LD_INT 1
24174: MINUS
24175: ST_TO_ADDR
// end ;
24176: GO 23982
24178: POP
24179: POP
// for i in tmp do
24180: LD_ADDR_VAR 0 5
24184: PUSH
24185: LD_VAR 0 7
24189: PUSH
24190: FOR_IN
24191: IFFALSE 24229
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24193: LD_VAR 0 1
24197: PPUSH
24198: LD_VAR 0 5
24202: PUSH
24203: LD_INT 1
24205: ARRAY
24206: PPUSH
24207: LD_VAR 0 5
24211: PUSH
24212: LD_INT 2
24214: ARRAY
24215: PPUSH
24216: CALL 23175 0 3
24220: NOT
24221: IFFALSE 24227
// exit ;
24223: POP
24224: POP
24225: GO 24231
24227: GO 24190
24229: POP
24230: POP
// end ;
24231: LD_VAR 0 4
24235: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24236: LD_INT 0
24238: PPUSH
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
// if not GetClass ( unit ) = class_sniper then
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 257
24254: PUSH
24255: LD_INT 5
24257: EQUAL
24258: NOT
24259: IFFALSE 24263
// exit ;
24261: GO 24651
// dist := 8 ;
24263: LD_ADDR_VAR 0 5
24267: PUSH
24268: LD_INT 8
24270: ST_TO_ADDR
// viewRange := 12 ;
24271: LD_ADDR_VAR 0 7
24275: PUSH
24276: LD_INT 12
24278: ST_TO_ADDR
// side := GetSide ( unit ) ;
24279: LD_ADDR_VAR 0 6
24283: PUSH
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL_OW 255
24293: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24294: LD_INT 61
24296: PPUSH
24297: LD_VAR 0 6
24301: PPUSH
24302: CALL_OW 321
24306: PUSH
24307: LD_INT 2
24309: EQUAL
24310: IFFALSE 24320
// viewRange := 16 ;
24312: LD_ADDR_VAR 0 7
24316: PUSH
24317: LD_INT 16
24319: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24320: LD_VAR 0 1
24324: PPUSH
24325: LD_VAR 0 2
24329: PPUSH
24330: LD_VAR 0 3
24334: PPUSH
24335: CALL_OW 297
24339: PUSH
24340: LD_VAR 0 5
24344: GREATER
24345: IFFALSE 24424
// begin ComMoveXY ( unit , x , y ) ;
24347: LD_VAR 0 1
24351: PPUSH
24352: LD_VAR 0 2
24356: PPUSH
24357: LD_VAR 0 3
24361: PPUSH
24362: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24366: LD_INT 35
24368: PPUSH
24369: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24373: LD_VAR 0 1
24377: PPUSH
24378: LD_VAR 0 2
24382: PPUSH
24383: LD_VAR 0 3
24387: PPUSH
24388: CALL 60914 0 3
24392: NOT
24393: IFFALSE 24397
// exit ;
24395: GO 24651
// until GetDistUnitXY ( unit , x , y ) < dist ;
24397: LD_VAR 0 1
24401: PPUSH
24402: LD_VAR 0 2
24406: PPUSH
24407: LD_VAR 0 3
24411: PPUSH
24412: CALL_OW 297
24416: PUSH
24417: LD_VAR 0 5
24421: LESS
24422: IFFALSE 24366
// end ; ComTurnXY ( unit , x , y ) ;
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_VAR 0 2
24433: PPUSH
24434: LD_VAR 0 3
24438: PPUSH
24439: CALL_OW 118
// wait ( 5 ) ;
24443: LD_INT 5
24445: PPUSH
24446: CALL_OW 67
// _d := GetDir ( unit ) ;
24450: LD_ADDR_VAR 0 10
24454: PUSH
24455: LD_VAR 0 1
24459: PPUSH
24460: CALL_OW 254
24464: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24465: LD_ADDR_VAR 0 8
24469: PUSH
24470: LD_VAR 0 1
24474: PPUSH
24475: CALL_OW 250
24479: PPUSH
24480: LD_VAR 0 10
24484: PPUSH
24485: LD_VAR 0 5
24489: PPUSH
24490: CALL_OW 272
24494: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24495: LD_ADDR_VAR 0 9
24499: PUSH
24500: LD_VAR 0 1
24504: PPUSH
24505: CALL_OW 251
24509: PPUSH
24510: LD_VAR 0 10
24514: PPUSH
24515: LD_VAR 0 5
24519: PPUSH
24520: CALL_OW 273
24524: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24525: LD_VAR 0 8
24529: PPUSH
24530: LD_VAR 0 9
24534: PPUSH
24535: CALL_OW 488
24539: NOT
24540: IFFALSE 24544
// exit ;
24542: GO 24651
// ComAnimCustom ( unit , 1 ) ;
24544: LD_VAR 0 1
24548: PPUSH
24549: LD_INT 1
24551: PPUSH
24552: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24556: LD_VAR 0 8
24560: PPUSH
24561: LD_VAR 0 9
24565: PPUSH
24566: LD_VAR 0 6
24570: PPUSH
24571: LD_VAR 0 7
24575: PPUSH
24576: CALL_OW 330
// repeat wait ( 1 ) ;
24580: LD_INT 1
24582: PPUSH
24583: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24587: LD_VAR 0 1
24591: PPUSH
24592: CALL_OW 316
24596: PUSH
24597: LD_VAR 0 1
24601: PPUSH
24602: CALL_OW 314
24606: OR
24607: PUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 302
24617: NOT
24618: OR
24619: PUSH
24620: LD_VAR 0 1
24624: PPUSH
24625: CALL_OW 301
24629: OR
24630: IFFALSE 24580
// RemoveSeeing ( _x , _y , side ) ;
24632: LD_VAR 0 8
24636: PPUSH
24637: LD_VAR 0 9
24641: PPUSH
24642: LD_VAR 0 6
24646: PPUSH
24647: CALL_OW 331
// end ; end_of_file end_of_file
24651: LD_VAR 0 4
24655: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24656: LD_INT 0
24658: PPUSH
24659: PPUSH
// if exist_mode then
24660: LD_VAR 0 2
24664: IFFALSE 24689
// unit := CreateCharacter ( prefix & ident ) else
24666: LD_ADDR_VAR 0 5
24670: PUSH
24671: LD_VAR 0 3
24675: PUSH
24676: LD_VAR 0 1
24680: STR
24681: PPUSH
24682: CALL_OW 34
24686: ST_TO_ADDR
24687: GO 24704
// unit := NewCharacter ( ident ) ;
24689: LD_ADDR_VAR 0 5
24693: PUSH
24694: LD_VAR 0 1
24698: PPUSH
24699: CALL_OW 25
24703: ST_TO_ADDR
// result := unit ;
24704: LD_ADDR_VAR 0 4
24708: PUSH
24709: LD_VAR 0 5
24713: ST_TO_ADDR
// end ;
24714: LD_VAR 0 4
24718: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24719: LD_INT 0
24721: PPUSH
24722: PPUSH
// if not side or not nation then
24723: LD_VAR 0 1
24727: NOT
24728: PUSH
24729: LD_VAR 0 2
24733: NOT
24734: OR
24735: IFFALSE 24739
// exit ;
24737: GO 25507
// case nation of nation_american :
24739: LD_VAR 0 2
24743: PUSH
24744: LD_INT 1
24746: DOUBLE
24747: EQUAL
24748: IFTRUE 24752
24750: GO 24966
24752: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24753: LD_ADDR_VAR 0 4
24757: PUSH
24758: LD_INT 35
24760: PUSH
24761: LD_INT 45
24763: PUSH
24764: LD_INT 46
24766: PUSH
24767: LD_INT 47
24769: PUSH
24770: LD_INT 82
24772: PUSH
24773: LD_INT 83
24775: PUSH
24776: LD_INT 84
24778: PUSH
24779: LD_INT 85
24781: PUSH
24782: LD_INT 86
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: LD_INT 2
24790: PUSH
24791: LD_INT 6
24793: PUSH
24794: LD_INT 15
24796: PUSH
24797: LD_INT 16
24799: PUSH
24800: LD_INT 7
24802: PUSH
24803: LD_INT 12
24805: PUSH
24806: LD_INT 13
24808: PUSH
24809: LD_INT 10
24811: PUSH
24812: LD_INT 14
24814: PUSH
24815: LD_INT 20
24817: PUSH
24818: LD_INT 21
24820: PUSH
24821: LD_INT 22
24823: PUSH
24824: LD_INT 25
24826: PUSH
24827: LD_INT 32
24829: PUSH
24830: LD_INT 27
24832: PUSH
24833: LD_INT 36
24835: PUSH
24836: LD_INT 69
24838: PUSH
24839: LD_INT 39
24841: PUSH
24842: LD_INT 34
24844: PUSH
24845: LD_INT 40
24847: PUSH
24848: LD_INT 48
24850: PUSH
24851: LD_INT 49
24853: PUSH
24854: LD_INT 50
24856: PUSH
24857: LD_INT 51
24859: PUSH
24860: LD_INT 52
24862: PUSH
24863: LD_INT 53
24865: PUSH
24866: LD_INT 54
24868: PUSH
24869: LD_INT 55
24871: PUSH
24872: LD_INT 56
24874: PUSH
24875: LD_INT 57
24877: PUSH
24878: LD_INT 58
24880: PUSH
24881: LD_INT 59
24883: PUSH
24884: LD_INT 60
24886: PUSH
24887: LD_INT 61
24889: PUSH
24890: LD_INT 62
24892: PUSH
24893: LD_INT 80
24895: PUSH
24896: LD_INT 82
24898: PUSH
24899: LD_INT 83
24901: PUSH
24902: LD_INT 84
24904: PUSH
24905: LD_INT 85
24907: PUSH
24908: LD_INT 86
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: ST_TO_ADDR
24964: GO 25431
24966: LD_INT 2
24968: DOUBLE
24969: EQUAL
24970: IFTRUE 24974
24972: GO 25200
24974: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24975: LD_ADDR_VAR 0 4
24979: PUSH
24980: LD_INT 35
24982: PUSH
24983: LD_INT 45
24985: PUSH
24986: LD_INT 46
24988: PUSH
24989: LD_INT 47
24991: PUSH
24992: LD_INT 82
24994: PUSH
24995: LD_INT 83
24997: PUSH
24998: LD_INT 84
25000: PUSH
25001: LD_INT 85
25003: PUSH
25004: LD_INT 87
25006: PUSH
25007: LD_INT 70
25009: PUSH
25010: LD_INT 1
25012: PUSH
25013: LD_INT 11
25015: PUSH
25016: LD_INT 3
25018: PUSH
25019: LD_INT 4
25021: PUSH
25022: LD_INT 5
25024: PUSH
25025: LD_INT 6
25027: PUSH
25028: LD_INT 15
25030: PUSH
25031: LD_INT 18
25033: PUSH
25034: LD_INT 7
25036: PUSH
25037: LD_INT 17
25039: PUSH
25040: LD_INT 8
25042: PUSH
25043: LD_INT 20
25045: PUSH
25046: LD_INT 21
25048: PUSH
25049: LD_INT 22
25051: PUSH
25052: LD_INT 72
25054: PUSH
25055: LD_INT 26
25057: PUSH
25058: LD_INT 69
25060: PUSH
25061: LD_INT 39
25063: PUSH
25064: LD_INT 40
25066: PUSH
25067: LD_INT 41
25069: PUSH
25070: LD_INT 42
25072: PUSH
25073: LD_INT 43
25075: PUSH
25076: LD_INT 48
25078: PUSH
25079: LD_INT 49
25081: PUSH
25082: LD_INT 50
25084: PUSH
25085: LD_INT 51
25087: PUSH
25088: LD_INT 52
25090: PUSH
25091: LD_INT 53
25093: PUSH
25094: LD_INT 54
25096: PUSH
25097: LD_INT 55
25099: PUSH
25100: LD_INT 56
25102: PUSH
25103: LD_INT 60
25105: PUSH
25106: LD_INT 61
25108: PUSH
25109: LD_INT 62
25111: PUSH
25112: LD_INT 66
25114: PUSH
25115: LD_INT 67
25117: PUSH
25118: LD_INT 68
25120: PUSH
25121: LD_INT 81
25123: PUSH
25124: LD_INT 82
25126: PUSH
25127: LD_INT 83
25129: PUSH
25130: LD_INT 84
25132: PUSH
25133: LD_INT 85
25135: PUSH
25136: LD_INT 87
25138: PUSH
25139: LD_INT 88
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: ST_TO_ADDR
25198: GO 25431
25200: LD_INT 3
25202: DOUBLE
25203: EQUAL
25204: IFTRUE 25208
25206: GO 25430
25208: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25209: LD_ADDR_VAR 0 4
25213: PUSH
25214: LD_INT 46
25216: PUSH
25217: LD_INT 47
25219: PUSH
25220: LD_INT 1
25222: PUSH
25223: LD_INT 2
25225: PUSH
25226: LD_INT 82
25228: PUSH
25229: LD_INT 83
25231: PUSH
25232: LD_INT 84
25234: PUSH
25235: LD_INT 85
25237: PUSH
25238: LD_INT 86
25240: PUSH
25241: LD_INT 11
25243: PUSH
25244: LD_INT 9
25246: PUSH
25247: LD_INT 20
25249: PUSH
25250: LD_INT 19
25252: PUSH
25253: LD_INT 21
25255: PUSH
25256: LD_INT 24
25258: PUSH
25259: LD_INT 22
25261: PUSH
25262: LD_INT 25
25264: PUSH
25265: LD_INT 28
25267: PUSH
25268: LD_INT 29
25270: PUSH
25271: LD_INT 30
25273: PUSH
25274: LD_INT 31
25276: PUSH
25277: LD_INT 37
25279: PUSH
25280: LD_INT 38
25282: PUSH
25283: LD_INT 32
25285: PUSH
25286: LD_INT 27
25288: PUSH
25289: LD_INT 33
25291: PUSH
25292: LD_INT 69
25294: PUSH
25295: LD_INT 39
25297: PUSH
25298: LD_INT 34
25300: PUSH
25301: LD_INT 40
25303: PUSH
25304: LD_INT 71
25306: PUSH
25307: LD_INT 23
25309: PUSH
25310: LD_INT 44
25312: PUSH
25313: LD_INT 48
25315: PUSH
25316: LD_INT 49
25318: PUSH
25319: LD_INT 50
25321: PUSH
25322: LD_INT 51
25324: PUSH
25325: LD_INT 52
25327: PUSH
25328: LD_INT 53
25330: PUSH
25331: LD_INT 54
25333: PUSH
25334: LD_INT 55
25336: PUSH
25337: LD_INT 56
25339: PUSH
25340: LD_INT 57
25342: PUSH
25343: LD_INT 58
25345: PUSH
25346: LD_INT 59
25348: PUSH
25349: LD_INT 63
25351: PUSH
25352: LD_INT 64
25354: PUSH
25355: LD_INT 65
25357: PUSH
25358: LD_INT 82
25360: PUSH
25361: LD_INT 83
25363: PUSH
25364: LD_INT 84
25366: PUSH
25367: LD_INT 85
25369: PUSH
25370: LD_INT 86
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: LIST
25391: LIST
25392: LIST
25393: LIST
25394: LIST
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: LIST
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: ST_TO_ADDR
25428: GO 25431
25430: POP
// if state > - 1 and state < 3 then
25431: LD_VAR 0 3
25435: PUSH
25436: LD_INT 1
25438: NEG
25439: GREATER
25440: PUSH
25441: LD_VAR 0 3
25445: PUSH
25446: LD_INT 3
25448: LESS
25449: AND
25450: IFFALSE 25507
// for i in result do
25452: LD_ADDR_VAR 0 5
25456: PUSH
25457: LD_VAR 0 4
25461: PUSH
25462: FOR_IN
25463: IFFALSE 25505
// if GetTech ( i , side ) <> state then
25465: LD_VAR 0 5
25469: PPUSH
25470: LD_VAR 0 1
25474: PPUSH
25475: CALL_OW 321
25479: PUSH
25480: LD_VAR 0 3
25484: NONEQUAL
25485: IFFALSE 25503
// result := result diff i ;
25487: LD_ADDR_VAR 0 4
25491: PUSH
25492: LD_VAR 0 4
25496: PUSH
25497: LD_VAR 0 5
25501: DIFF
25502: ST_TO_ADDR
25503: GO 25462
25505: POP
25506: POP
// end ;
25507: LD_VAR 0 4
25511: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25512: LD_INT 0
25514: PPUSH
25515: PPUSH
25516: PPUSH
// result := true ;
25517: LD_ADDR_VAR 0 3
25521: PUSH
25522: LD_INT 1
25524: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25525: LD_ADDR_VAR 0 5
25529: PUSH
25530: LD_VAR 0 2
25534: PPUSH
25535: CALL_OW 480
25539: ST_TO_ADDR
// if not tmp then
25540: LD_VAR 0 5
25544: NOT
25545: IFFALSE 25549
// exit ;
25547: GO 25598
// for i in tmp do
25549: LD_ADDR_VAR 0 4
25553: PUSH
25554: LD_VAR 0 5
25558: PUSH
25559: FOR_IN
25560: IFFALSE 25596
// if GetTech ( i , side ) <> state_researched then
25562: LD_VAR 0 4
25566: PPUSH
25567: LD_VAR 0 1
25571: PPUSH
25572: CALL_OW 321
25576: PUSH
25577: LD_INT 2
25579: NONEQUAL
25580: IFFALSE 25594
// begin result := false ;
25582: LD_ADDR_VAR 0 3
25586: PUSH
25587: LD_INT 0
25589: ST_TO_ADDR
// exit ;
25590: POP
25591: POP
25592: GO 25598
// end ;
25594: GO 25559
25596: POP
25597: POP
// end ;
25598: LD_VAR 0 3
25602: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25603: LD_INT 0
25605: PPUSH
25606: PPUSH
25607: PPUSH
25608: PPUSH
25609: PPUSH
25610: PPUSH
25611: PPUSH
25612: PPUSH
25613: PPUSH
25614: PPUSH
25615: PPUSH
25616: PPUSH
25617: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25618: LD_VAR 0 1
25622: NOT
25623: PUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: CALL_OW 257
25633: PUSH
25634: LD_INT 9
25636: NONEQUAL
25637: OR
25638: IFFALSE 25642
// exit ;
25640: GO 26215
// side := GetSide ( unit ) ;
25642: LD_ADDR_VAR 0 9
25646: PUSH
25647: LD_VAR 0 1
25651: PPUSH
25652: CALL_OW 255
25656: ST_TO_ADDR
// tech_space := tech_spacanom ;
25657: LD_ADDR_VAR 0 12
25661: PUSH
25662: LD_INT 29
25664: ST_TO_ADDR
// tech_time := tech_taurad ;
25665: LD_ADDR_VAR 0 13
25669: PUSH
25670: LD_INT 28
25672: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25673: LD_ADDR_VAR 0 11
25677: PUSH
25678: LD_VAR 0 1
25682: PPUSH
25683: CALL_OW 310
25687: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25688: LD_VAR 0 11
25692: PPUSH
25693: CALL_OW 247
25697: PUSH
25698: LD_INT 2
25700: EQUAL
25701: IFFALSE 25705
// exit ;
25703: GO 26215
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25705: LD_ADDR_VAR 0 8
25709: PUSH
25710: LD_INT 81
25712: PUSH
25713: LD_VAR 0 9
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: PUSH
25725: LD_INT 21
25727: PUSH
25728: LD_INT 3
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PPUSH
25743: CALL_OW 69
25747: ST_TO_ADDR
// if not tmp then
25748: LD_VAR 0 8
25752: NOT
25753: IFFALSE 25757
// exit ;
25755: GO 26215
// if in_unit then
25757: LD_VAR 0 11
25761: IFFALSE 25785
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25763: LD_ADDR_VAR 0 10
25767: PUSH
25768: LD_VAR 0 8
25772: PPUSH
25773: LD_VAR 0 11
25777: PPUSH
25778: CALL_OW 74
25782: ST_TO_ADDR
25783: GO 25805
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25785: LD_ADDR_VAR 0 10
25789: PUSH
25790: LD_VAR 0 8
25794: PPUSH
25795: LD_VAR 0 1
25799: PPUSH
25800: CALL_OW 74
25804: ST_TO_ADDR
// if not enemy then
25805: LD_VAR 0 10
25809: NOT
25810: IFFALSE 25814
// exit ;
25812: GO 26215
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25814: LD_VAR 0 11
25818: PUSH
25819: LD_VAR 0 11
25823: PPUSH
25824: LD_VAR 0 10
25828: PPUSH
25829: CALL_OW 296
25833: PUSH
25834: LD_INT 13
25836: GREATER
25837: AND
25838: PUSH
25839: LD_VAR 0 1
25843: PPUSH
25844: LD_VAR 0 10
25848: PPUSH
25849: CALL_OW 296
25853: PUSH
25854: LD_INT 12
25856: GREATER
25857: OR
25858: IFFALSE 25862
// exit ;
25860: GO 26215
// missile := [ 1 ] ;
25862: LD_ADDR_VAR 0 14
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: EMPTY
25871: LIST
25872: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25873: LD_VAR 0 9
25877: PPUSH
25878: LD_VAR 0 12
25882: PPUSH
25883: CALL_OW 325
25887: IFFALSE 25916
// missile := Replace ( missile , missile + 1 , 2 ) ;
25889: LD_ADDR_VAR 0 14
25893: PUSH
25894: LD_VAR 0 14
25898: PPUSH
25899: LD_VAR 0 14
25903: PUSH
25904: LD_INT 1
25906: PLUS
25907: PPUSH
25908: LD_INT 2
25910: PPUSH
25911: CALL_OW 1
25915: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25916: LD_VAR 0 9
25920: PPUSH
25921: LD_VAR 0 13
25925: PPUSH
25926: CALL_OW 325
25930: PUSH
25931: LD_VAR 0 10
25935: PPUSH
25936: CALL_OW 255
25940: PPUSH
25941: LD_VAR 0 13
25945: PPUSH
25946: CALL_OW 325
25950: NOT
25951: AND
25952: IFFALSE 25981
// missile := Replace ( missile , missile + 1 , 3 ) ;
25954: LD_ADDR_VAR 0 14
25958: PUSH
25959: LD_VAR 0 14
25963: PPUSH
25964: LD_VAR 0 14
25968: PUSH
25969: LD_INT 1
25971: PLUS
25972: PPUSH
25973: LD_INT 3
25975: PPUSH
25976: CALL_OW 1
25980: ST_TO_ADDR
// if missile < 2 then
25981: LD_VAR 0 14
25985: PUSH
25986: LD_INT 2
25988: LESS
25989: IFFALSE 25993
// exit ;
25991: GO 26215
// x := GetX ( enemy ) ;
25993: LD_ADDR_VAR 0 4
25997: PUSH
25998: LD_VAR 0 10
26002: PPUSH
26003: CALL_OW 250
26007: ST_TO_ADDR
// y := GetY ( enemy ) ;
26008: LD_ADDR_VAR 0 5
26012: PUSH
26013: LD_VAR 0 10
26017: PPUSH
26018: CALL_OW 251
26022: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26023: LD_ADDR_VAR 0 6
26027: PUSH
26028: LD_VAR 0 4
26032: PUSH
26033: LD_INT 1
26035: NEG
26036: PPUSH
26037: LD_INT 1
26039: PPUSH
26040: CALL_OW 12
26044: PLUS
26045: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26046: LD_ADDR_VAR 0 7
26050: PUSH
26051: LD_VAR 0 5
26055: PUSH
26056: LD_INT 1
26058: NEG
26059: PPUSH
26060: LD_INT 1
26062: PPUSH
26063: CALL_OW 12
26067: PLUS
26068: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26069: LD_VAR 0 6
26073: PPUSH
26074: LD_VAR 0 7
26078: PPUSH
26079: CALL_OW 488
26083: NOT
26084: IFFALSE 26106
// begin _x := x ;
26086: LD_ADDR_VAR 0 6
26090: PUSH
26091: LD_VAR 0 4
26095: ST_TO_ADDR
// _y := y ;
26096: LD_ADDR_VAR 0 7
26100: PUSH
26101: LD_VAR 0 5
26105: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26106: LD_ADDR_VAR 0 3
26110: PUSH
26111: LD_INT 1
26113: PPUSH
26114: LD_VAR 0 14
26118: PPUSH
26119: CALL_OW 12
26123: ST_TO_ADDR
// case i of 1 :
26124: LD_VAR 0 3
26128: PUSH
26129: LD_INT 1
26131: DOUBLE
26132: EQUAL
26133: IFTRUE 26137
26135: GO 26154
26137: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26138: LD_VAR 0 1
26142: PPUSH
26143: LD_VAR 0 10
26147: PPUSH
26148: CALL_OW 115
26152: GO 26215
26154: LD_INT 2
26156: DOUBLE
26157: EQUAL
26158: IFTRUE 26162
26160: GO 26184
26162: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26163: LD_VAR 0 1
26167: PPUSH
26168: LD_VAR 0 6
26172: PPUSH
26173: LD_VAR 0 7
26177: PPUSH
26178: CALL_OW 153
26182: GO 26215
26184: LD_INT 3
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26214
26192: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_VAR 0 6
26202: PPUSH
26203: LD_VAR 0 7
26207: PPUSH
26208: CALL_OW 154
26212: GO 26215
26214: POP
// end ;
26215: LD_VAR 0 2
26219: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26220: LD_INT 0
26222: PPUSH
26223: PPUSH
26224: PPUSH
26225: PPUSH
26226: PPUSH
26227: PPUSH
// if not unit or not building then
26228: LD_VAR 0 1
26232: NOT
26233: PUSH
26234: LD_VAR 0 2
26238: NOT
26239: OR
26240: IFFALSE 26244
// exit ;
26242: GO 26402
// x := GetX ( building ) ;
26244: LD_ADDR_VAR 0 5
26248: PUSH
26249: LD_VAR 0 2
26253: PPUSH
26254: CALL_OW 250
26258: ST_TO_ADDR
// y := GetY ( building ) ;
26259: LD_ADDR_VAR 0 6
26263: PUSH
26264: LD_VAR 0 2
26268: PPUSH
26269: CALL_OW 251
26273: ST_TO_ADDR
// for i = 0 to 5 do
26274: LD_ADDR_VAR 0 4
26278: PUSH
26279: DOUBLE
26280: LD_INT 0
26282: DEC
26283: ST_TO_ADDR
26284: LD_INT 5
26286: PUSH
26287: FOR_TO
26288: IFFALSE 26400
// begin _x := ShiftX ( x , i , 3 ) ;
26290: LD_ADDR_VAR 0 7
26294: PUSH
26295: LD_VAR 0 5
26299: PPUSH
26300: LD_VAR 0 4
26304: PPUSH
26305: LD_INT 3
26307: PPUSH
26308: CALL_OW 272
26312: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26313: LD_ADDR_VAR 0 8
26317: PUSH
26318: LD_VAR 0 6
26322: PPUSH
26323: LD_VAR 0 4
26327: PPUSH
26328: LD_INT 3
26330: PPUSH
26331: CALL_OW 273
26335: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26336: LD_VAR 0 7
26340: PPUSH
26341: LD_VAR 0 8
26345: PPUSH
26346: CALL_OW 488
26350: NOT
26351: IFFALSE 26355
// continue ;
26353: GO 26287
// if HexInfo ( _x , _y ) = 0 then
26355: LD_VAR 0 7
26359: PPUSH
26360: LD_VAR 0 8
26364: PPUSH
26365: CALL_OW 428
26369: PUSH
26370: LD_INT 0
26372: EQUAL
26373: IFFALSE 26398
// begin ComMoveXY ( unit , _x , _y ) ;
26375: LD_VAR 0 1
26379: PPUSH
26380: LD_VAR 0 7
26384: PPUSH
26385: LD_VAR 0 8
26389: PPUSH
26390: CALL_OW 111
// exit ;
26394: POP
26395: POP
26396: GO 26402
// end ; end ;
26398: GO 26287
26400: POP
26401: POP
// end ;
26402: LD_VAR 0 3
26406: RET
// export function ScanBase ( side , base_area ) ; begin
26407: LD_INT 0
26409: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26410: LD_ADDR_VAR 0 3
26414: PUSH
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_INT 81
26422: PUSH
26423: LD_VAR 0 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PPUSH
26432: CALL_OW 70
26436: ST_TO_ADDR
// end ;
26437: LD_VAR 0 3
26441: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26442: LD_INT 0
26444: PPUSH
26445: PPUSH
26446: PPUSH
26447: PPUSH
// result := false ;
26448: LD_ADDR_VAR 0 2
26452: PUSH
26453: LD_INT 0
26455: ST_TO_ADDR
// side := GetSide ( unit ) ;
26456: LD_ADDR_VAR 0 3
26460: PUSH
26461: LD_VAR 0 1
26465: PPUSH
26466: CALL_OW 255
26470: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26471: LD_ADDR_VAR 0 4
26475: PUSH
26476: LD_VAR 0 1
26480: PPUSH
26481: CALL_OW 248
26485: ST_TO_ADDR
// case nat of 1 :
26486: LD_VAR 0 4
26490: PUSH
26491: LD_INT 1
26493: DOUBLE
26494: EQUAL
26495: IFTRUE 26499
26497: GO 26510
26499: POP
// tech := tech_lassight ; 2 :
26500: LD_ADDR_VAR 0 5
26504: PUSH
26505: LD_INT 12
26507: ST_TO_ADDR
26508: GO 26549
26510: LD_INT 2
26512: DOUBLE
26513: EQUAL
26514: IFTRUE 26518
26516: GO 26529
26518: POP
// tech := tech_mortar ; 3 :
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: LD_INT 41
26526: ST_TO_ADDR
26527: GO 26549
26529: LD_INT 3
26531: DOUBLE
26532: EQUAL
26533: IFTRUE 26537
26535: GO 26548
26537: POP
// tech := tech_bazooka ; end ;
26538: LD_ADDR_VAR 0 5
26542: PUSH
26543: LD_INT 44
26545: ST_TO_ADDR
26546: GO 26549
26548: POP
// if Researched ( side , tech ) then
26549: LD_VAR 0 3
26553: PPUSH
26554: LD_VAR 0 5
26558: PPUSH
26559: CALL_OW 325
26563: IFFALSE 26590
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26565: LD_ADDR_VAR 0 2
26569: PUSH
26570: LD_INT 5
26572: PUSH
26573: LD_INT 8
26575: PUSH
26576: LD_INT 9
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: LIST
26583: PUSH
26584: LD_VAR 0 4
26588: ARRAY
26589: ST_TO_ADDR
// end ;
26590: LD_VAR 0 2
26594: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26595: LD_INT 0
26597: PPUSH
26598: PPUSH
26599: PPUSH
// if not mines then
26600: LD_VAR 0 2
26604: NOT
26605: IFFALSE 26609
// exit ;
26607: GO 26753
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26609: LD_ADDR_VAR 0 5
26613: PUSH
26614: LD_INT 81
26616: PUSH
26617: LD_VAR 0 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 3
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PPUSH
26647: CALL_OW 69
26651: ST_TO_ADDR
// for i in mines do
26652: LD_ADDR_VAR 0 4
26656: PUSH
26657: LD_VAR 0 2
26661: PUSH
26662: FOR_IN
26663: IFFALSE 26751
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26665: LD_VAR 0 4
26669: PUSH
26670: LD_INT 1
26672: ARRAY
26673: PPUSH
26674: LD_VAR 0 4
26678: PUSH
26679: LD_INT 2
26681: ARRAY
26682: PPUSH
26683: CALL_OW 458
26687: NOT
26688: IFFALSE 26692
// continue ;
26690: GO 26662
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26692: LD_VAR 0 4
26696: PUSH
26697: LD_INT 1
26699: ARRAY
26700: PPUSH
26701: LD_VAR 0 4
26705: PUSH
26706: LD_INT 2
26708: ARRAY
26709: PPUSH
26710: CALL_OW 428
26714: PUSH
26715: LD_VAR 0 5
26719: IN
26720: IFFALSE 26749
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26722: LD_VAR 0 4
26726: PUSH
26727: LD_INT 1
26729: ARRAY
26730: PPUSH
26731: LD_VAR 0 4
26735: PUSH
26736: LD_INT 2
26738: ARRAY
26739: PPUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 456
// end ;
26749: GO 26662
26751: POP
26752: POP
// end ;
26753: LD_VAR 0 3
26757: RET
// export function Count ( array ) ; var i ; begin
26758: LD_INT 0
26760: PPUSH
26761: PPUSH
// result := 0 ;
26762: LD_ADDR_VAR 0 2
26766: PUSH
26767: LD_INT 0
26769: ST_TO_ADDR
// for i in array do
26770: LD_ADDR_VAR 0 3
26774: PUSH
26775: LD_VAR 0 1
26779: PUSH
26780: FOR_IN
26781: IFFALSE 26805
// if i then
26783: LD_VAR 0 3
26787: IFFALSE 26803
// result := result + 1 ;
26789: LD_ADDR_VAR 0 2
26793: PUSH
26794: LD_VAR 0 2
26798: PUSH
26799: LD_INT 1
26801: PLUS
26802: ST_TO_ADDR
26803: GO 26780
26805: POP
26806: POP
// end ;
26807: LD_VAR 0 2
26811: RET
// export function IsEmpty ( building ) ; begin
26812: LD_INT 0
26814: PPUSH
// if not building then
26815: LD_VAR 0 1
26819: NOT
26820: IFFALSE 26824
// exit ;
26822: GO 26867
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26824: LD_ADDR_VAR 0 2
26828: PUSH
26829: LD_VAR 0 1
26833: PUSH
26834: LD_INT 22
26836: PUSH
26837: LD_VAR 0 1
26841: PPUSH
26842: CALL_OW 255
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: PUSH
26851: LD_INT 58
26853: PUSH
26854: EMPTY
26855: LIST
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PPUSH
26861: CALL_OW 69
26865: IN
26866: ST_TO_ADDR
// end ;
26867: LD_VAR 0 2
26871: RET
// export function IsNotFull ( building ) ; var places ; begin
26872: LD_INT 0
26874: PPUSH
26875: PPUSH
// if not building then
26876: LD_VAR 0 1
26880: NOT
26881: IFFALSE 26885
// exit ;
26883: GO 27056
// result := false ;
26885: LD_ADDR_VAR 0 2
26889: PUSH
26890: LD_INT 0
26892: ST_TO_ADDR
// places := 0 ;
26893: LD_ADDR_VAR 0 3
26897: PUSH
26898: LD_INT 0
26900: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26901: LD_VAR 0 1
26905: PPUSH
26906: CALL_OW 266
26910: PUSH
26911: LD_INT 0
26913: DOUBLE
26914: EQUAL
26915: IFTRUE 26973
26917: LD_INT 1
26919: DOUBLE
26920: EQUAL
26921: IFTRUE 26973
26923: LD_INT 6
26925: DOUBLE
26926: EQUAL
26927: IFTRUE 26973
26929: LD_INT 7
26931: DOUBLE
26932: EQUAL
26933: IFTRUE 26973
26935: LD_INT 8
26937: DOUBLE
26938: EQUAL
26939: IFTRUE 26973
26941: LD_INT 4
26943: DOUBLE
26944: EQUAL
26945: IFTRUE 26973
26947: LD_INT 5
26949: DOUBLE
26950: EQUAL
26951: IFTRUE 26973
26953: LD_INT 2
26955: DOUBLE
26956: EQUAL
26957: IFTRUE 26973
26959: LD_INT 3
26961: DOUBLE
26962: EQUAL
26963: IFTRUE 26973
26965: LD_INT 35
26967: DOUBLE
26968: EQUAL
26969: IFTRUE 26973
26971: GO 26984
26973: POP
// places := 6 ; b_bunker , b_breastwork :
26974: LD_ADDR_VAR 0 3
26978: PUSH
26979: LD_INT 6
26981: ST_TO_ADDR
26982: GO 27029
26984: LD_INT 32
26986: DOUBLE
26987: EQUAL
26988: IFTRUE 26998
26990: LD_INT 31
26992: DOUBLE
26993: EQUAL
26994: IFTRUE 26998
26996: GO 27009
26998: POP
// places := 1 ; b_control_tower :
26999: LD_ADDR_VAR 0 3
27003: PUSH
27004: LD_INT 1
27006: ST_TO_ADDR
27007: GO 27029
27009: LD_INT 36
27011: DOUBLE
27012: EQUAL
27013: IFTRUE 27017
27015: GO 27028
27017: POP
// places := 3 ; end ;
27018: LD_ADDR_VAR 0 3
27022: PUSH
27023: LD_INT 3
27025: ST_TO_ADDR
27026: GO 27029
27028: POP
// if places then
27029: LD_VAR 0 3
27033: IFFALSE 27056
// result := UnitsInside ( building ) < places ;
27035: LD_ADDR_VAR 0 2
27039: PUSH
27040: LD_VAR 0 1
27044: PPUSH
27045: CALL_OW 313
27049: PUSH
27050: LD_VAR 0 3
27054: LESS
27055: ST_TO_ADDR
// end ;
27056: LD_VAR 0 2
27060: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27061: LD_INT 0
27063: PPUSH
27064: PPUSH
27065: PPUSH
27066: PPUSH
// tmp := [ ] ;
27067: LD_ADDR_VAR 0 3
27071: PUSH
27072: EMPTY
27073: ST_TO_ADDR
// list := [ ] ;
27074: LD_ADDR_VAR 0 5
27078: PUSH
27079: EMPTY
27080: ST_TO_ADDR
// for i = 16 to 25 do
27081: LD_ADDR_VAR 0 4
27085: PUSH
27086: DOUBLE
27087: LD_INT 16
27089: DEC
27090: ST_TO_ADDR
27091: LD_INT 25
27093: PUSH
27094: FOR_TO
27095: IFFALSE 27168
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27097: LD_ADDR_VAR 0 3
27101: PUSH
27102: LD_VAR 0 3
27106: PUSH
27107: LD_INT 22
27109: PUSH
27110: LD_VAR 0 1
27114: PPUSH
27115: CALL_OW 255
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 91
27126: PUSH
27127: LD_VAR 0 1
27131: PUSH
27132: LD_INT 6
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 30
27142: PUSH
27143: LD_VAR 0 4
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: LIST
27156: PUSH
27157: EMPTY
27158: LIST
27159: PPUSH
27160: CALL_OW 69
27164: ADD
27165: ST_TO_ADDR
27166: GO 27094
27168: POP
27169: POP
// for i = 1 to tmp do
27170: LD_ADDR_VAR 0 4
27174: PUSH
27175: DOUBLE
27176: LD_INT 1
27178: DEC
27179: ST_TO_ADDR
27180: LD_VAR 0 3
27184: PUSH
27185: FOR_TO
27186: IFFALSE 27274
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27188: LD_ADDR_VAR 0 5
27192: PUSH
27193: LD_VAR 0 5
27197: PUSH
27198: LD_VAR 0 3
27202: PUSH
27203: LD_VAR 0 4
27207: ARRAY
27208: PPUSH
27209: CALL_OW 266
27213: PUSH
27214: LD_VAR 0 3
27218: PUSH
27219: LD_VAR 0 4
27223: ARRAY
27224: PPUSH
27225: CALL_OW 250
27229: PUSH
27230: LD_VAR 0 3
27234: PUSH
27235: LD_VAR 0 4
27239: ARRAY
27240: PPUSH
27241: CALL_OW 251
27245: PUSH
27246: LD_VAR 0 3
27250: PUSH
27251: LD_VAR 0 4
27255: ARRAY
27256: PPUSH
27257: CALL_OW 254
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: PUSH
27268: EMPTY
27269: LIST
27270: ADD
27271: ST_TO_ADDR
27272: GO 27185
27274: POP
27275: POP
// result := list ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_VAR 0 5
27285: ST_TO_ADDR
// end ;
27286: LD_VAR 0 2
27290: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27291: LD_INT 0
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
27297: PPUSH
27298: PPUSH
27299: PPUSH
// if not factory then
27300: LD_VAR 0 1
27304: NOT
27305: IFFALSE 27309
// exit ;
27307: GO 27902
// if control = control_apeman then
27309: LD_VAR 0 4
27313: PUSH
27314: LD_INT 5
27316: EQUAL
27317: IFFALSE 27426
// begin tmp := UnitsInside ( factory ) ;
27319: LD_ADDR_VAR 0 8
27323: PUSH
27324: LD_VAR 0 1
27328: PPUSH
27329: CALL_OW 313
27333: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27334: LD_VAR 0 8
27338: PPUSH
27339: LD_INT 25
27341: PUSH
27342: LD_INT 12
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PPUSH
27349: CALL_OW 72
27353: NOT
27354: IFFALSE 27364
// control := control_manual ;
27356: LD_ADDR_VAR 0 4
27360: PUSH
27361: LD_INT 1
27363: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27364: LD_ADDR_VAR 0 8
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL 27061 0 1
27378: ST_TO_ADDR
// if tmp then
27379: LD_VAR 0 8
27383: IFFALSE 27426
// begin for i in tmp do
27385: LD_ADDR_VAR 0 7
27389: PUSH
27390: LD_VAR 0 8
27394: PUSH
27395: FOR_IN
27396: IFFALSE 27424
// if i [ 1 ] = b_ext_radio then
27398: LD_VAR 0 7
27402: PUSH
27403: LD_INT 1
27405: ARRAY
27406: PUSH
27407: LD_INT 22
27409: EQUAL
27410: IFFALSE 27422
// begin control := control_remote ;
27412: LD_ADDR_VAR 0 4
27416: PUSH
27417: LD_INT 2
27419: ST_TO_ADDR
// break ;
27420: GO 27424
// end ;
27422: GO 27395
27424: POP
27425: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27426: LD_VAR 0 1
27430: PPUSH
27431: LD_VAR 0 2
27435: PPUSH
27436: LD_VAR 0 3
27440: PPUSH
27441: LD_VAR 0 4
27445: PPUSH
27446: LD_VAR 0 5
27450: PPUSH
27451: CALL_OW 448
27455: IFFALSE 27490
// begin result := [ chassis , engine , control , weapon ] ;
27457: LD_ADDR_VAR 0 6
27461: PUSH
27462: LD_VAR 0 2
27466: PUSH
27467: LD_VAR 0 3
27471: PUSH
27472: LD_VAR 0 4
27476: PUSH
27477: LD_VAR 0 5
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: LIST
27486: LIST
27487: ST_TO_ADDR
// exit ;
27488: GO 27902
// end ; _chassis := AvailableChassisList ( factory ) ;
27490: LD_ADDR_VAR 0 9
27494: PUSH
27495: LD_VAR 0 1
27499: PPUSH
27500: CALL_OW 475
27504: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27505: LD_ADDR_VAR 0 11
27509: PUSH
27510: LD_VAR 0 1
27514: PPUSH
27515: CALL_OW 476
27519: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27520: LD_ADDR_VAR 0 12
27524: PUSH
27525: LD_VAR 0 1
27529: PPUSH
27530: CALL_OW 477
27534: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27535: LD_ADDR_VAR 0 10
27539: PUSH
27540: LD_VAR 0 1
27544: PPUSH
27545: CALL_OW 478
27549: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27550: LD_VAR 0 9
27554: NOT
27555: PUSH
27556: LD_VAR 0 11
27560: NOT
27561: OR
27562: PUSH
27563: LD_VAR 0 12
27567: NOT
27568: OR
27569: PUSH
27570: LD_VAR 0 10
27574: NOT
27575: OR
27576: IFFALSE 27611
// begin result := [ chassis , engine , control , weapon ] ;
27578: LD_ADDR_VAR 0 6
27582: PUSH
27583: LD_VAR 0 2
27587: PUSH
27588: LD_VAR 0 3
27592: PUSH
27593: LD_VAR 0 4
27597: PUSH
27598: LD_VAR 0 5
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: ST_TO_ADDR
// exit ;
27609: GO 27902
// end ; if not chassis in _chassis then
27611: LD_VAR 0 2
27615: PUSH
27616: LD_VAR 0 9
27620: IN
27621: NOT
27622: IFFALSE 27648
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27624: LD_ADDR_VAR 0 2
27628: PUSH
27629: LD_VAR 0 9
27633: PUSH
27634: LD_INT 1
27636: PPUSH
27637: LD_VAR 0 9
27641: PPUSH
27642: CALL_OW 12
27646: ARRAY
27647: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27648: LD_VAR 0 2
27652: PPUSH
27653: LD_VAR 0 3
27657: PPUSH
27658: CALL 27907 0 2
27662: NOT
27663: IFFALSE 27722
// repeat engine := _engine [ 1 ] ;
27665: LD_ADDR_VAR 0 3
27669: PUSH
27670: LD_VAR 0 11
27674: PUSH
27675: LD_INT 1
27677: ARRAY
27678: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27679: LD_ADDR_VAR 0 11
27683: PUSH
27684: LD_VAR 0 11
27688: PPUSH
27689: LD_INT 1
27691: PPUSH
27692: CALL_OW 3
27696: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27697: LD_VAR 0 2
27701: PPUSH
27702: LD_VAR 0 3
27706: PPUSH
27707: CALL 27907 0 2
27711: PUSH
27712: LD_VAR 0 11
27716: PUSH
27717: EMPTY
27718: EQUAL
27719: OR
27720: IFFALSE 27665
// if not control in _control then
27722: LD_VAR 0 4
27726: PUSH
27727: LD_VAR 0 12
27731: IN
27732: NOT
27733: IFFALSE 27759
// control := _control [ rand ( 1 , _control ) ] ;
27735: LD_ADDR_VAR 0 4
27739: PUSH
27740: LD_VAR 0 12
27744: PUSH
27745: LD_INT 1
27747: PPUSH
27748: LD_VAR 0 12
27752: PPUSH
27753: CALL_OW 12
27757: ARRAY
27758: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27759: LD_VAR 0 2
27763: PPUSH
27764: LD_VAR 0 5
27768: PPUSH
27769: CALL 28127 0 2
27773: NOT
27774: IFFALSE 27833
// repeat weapon := _weapon [ 1 ] ;
27776: LD_ADDR_VAR 0 5
27780: PUSH
27781: LD_VAR 0 10
27785: PUSH
27786: LD_INT 1
27788: ARRAY
27789: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27790: LD_ADDR_VAR 0 10
27794: PUSH
27795: LD_VAR 0 10
27799: PPUSH
27800: LD_INT 1
27802: PPUSH
27803: CALL_OW 3
27807: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27808: LD_VAR 0 2
27812: PPUSH
27813: LD_VAR 0 5
27817: PPUSH
27818: CALL 28127 0 2
27822: PUSH
27823: LD_VAR 0 10
27827: PUSH
27828: EMPTY
27829: EQUAL
27830: OR
27831: IFFALSE 27776
// result := [ ] ;
27833: LD_ADDR_VAR 0 6
27837: PUSH
27838: EMPTY
27839: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27840: LD_VAR 0 1
27844: PPUSH
27845: LD_VAR 0 2
27849: PPUSH
27850: LD_VAR 0 3
27854: PPUSH
27855: LD_VAR 0 4
27859: PPUSH
27860: LD_VAR 0 5
27864: PPUSH
27865: CALL_OW 448
27869: IFFALSE 27902
// result := [ chassis , engine , control , weapon ] ;
27871: LD_ADDR_VAR 0 6
27875: PUSH
27876: LD_VAR 0 2
27880: PUSH
27881: LD_VAR 0 3
27885: PUSH
27886: LD_VAR 0 4
27890: PUSH
27891: LD_VAR 0 5
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: ST_TO_ADDR
// end ;
27902: LD_VAR 0 6
27906: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27907: LD_INT 0
27909: PPUSH
// if not chassis or not engine then
27910: LD_VAR 0 1
27914: NOT
27915: PUSH
27916: LD_VAR 0 2
27920: NOT
27921: OR
27922: IFFALSE 27926
// exit ;
27924: GO 28122
// case engine of engine_solar :
27926: LD_VAR 0 2
27930: PUSH
27931: LD_INT 2
27933: DOUBLE
27934: EQUAL
27935: IFTRUE 27939
27937: GO 27977
27939: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27940: LD_ADDR_VAR 0 3
27944: PUSH
27945: LD_INT 11
27947: PUSH
27948: LD_INT 12
27950: PUSH
27951: LD_INT 13
27953: PUSH
27954: LD_INT 14
27956: PUSH
27957: LD_INT 1
27959: PUSH
27960: LD_INT 2
27962: PUSH
27963: LD_INT 3
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: ST_TO_ADDR
27975: GO 28106
27977: LD_INT 1
27979: DOUBLE
27980: EQUAL
27981: IFTRUE 27985
27983: GO 28047
27985: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27986: LD_ADDR_VAR 0 3
27990: PUSH
27991: LD_INT 11
27993: PUSH
27994: LD_INT 12
27996: PUSH
27997: LD_INT 13
27999: PUSH
28000: LD_INT 14
28002: PUSH
28003: LD_INT 1
28005: PUSH
28006: LD_INT 2
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: LD_INT 4
28014: PUSH
28015: LD_INT 5
28017: PUSH
28018: LD_INT 21
28020: PUSH
28021: LD_INT 23
28023: PUSH
28024: LD_INT 22
28026: PUSH
28027: LD_INT 24
28029: PUSH
28030: EMPTY
28031: LIST
28032: LIST
28033: LIST
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: ST_TO_ADDR
28045: GO 28106
28047: LD_INT 3
28049: DOUBLE
28050: EQUAL
28051: IFTRUE 28055
28053: GO 28105
28055: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28056: LD_ADDR_VAR 0 3
28060: PUSH
28061: LD_INT 13
28063: PUSH
28064: LD_INT 14
28066: PUSH
28067: LD_INT 2
28069: PUSH
28070: LD_INT 3
28072: PUSH
28073: LD_INT 4
28075: PUSH
28076: LD_INT 5
28078: PUSH
28079: LD_INT 21
28081: PUSH
28082: LD_INT 22
28084: PUSH
28085: LD_INT 23
28087: PUSH
28088: LD_INT 24
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: LIST
28098: LIST
28099: LIST
28100: LIST
28101: LIST
28102: ST_TO_ADDR
28103: GO 28106
28105: POP
// result := ( chassis in result ) ;
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: LD_VAR 0 1
28115: PUSH
28116: LD_VAR 0 3
28120: IN
28121: ST_TO_ADDR
// end ;
28122: LD_VAR 0 3
28126: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28127: LD_INT 0
28129: PPUSH
// if not chassis or not weapon then
28130: LD_VAR 0 1
28134: NOT
28135: PUSH
28136: LD_VAR 0 2
28140: NOT
28141: OR
28142: IFFALSE 28146
// exit ;
28144: GO 29206
// case weapon of us_machine_gun :
28146: LD_VAR 0 2
28150: PUSH
28151: LD_INT 2
28153: DOUBLE
28154: EQUAL
28155: IFTRUE 28159
28157: GO 28189
28159: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28160: LD_ADDR_VAR 0 3
28164: PUSH
28165: LD_INT 1
28167: PUSH
28168: LD_INT 2
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: LD_INT 4
28176: PUSH
28177: LD_INT 5
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: LIST
28184: LIST
28185: LIST
28186: ST_TO_ADDR
28187: GO 29190
28189: LD_INT 3
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 28227
28197: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28198: LD_ADDR_VAR 0 3
28202: PUSH
28203: LD_INT 1
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 3
28211: PUSH
28212: LD_INT 4
28214: PUSH
28215: LD_INT 5
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: ST_TO_ADDR
28225: GO 29190
28227: LD_INT 11
28229: DOUBLE
28230: EQUAL
28231: IFTRUE 28235
28233: GO 28265
28235: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28236: LD_ADDR_VAR 0 3
28240: PUSH
28241: LD_INT 1
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 3
28249: PUSH
28250: LD_INT 4
28252: PUSH
28253: LD_INT 5
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: ST_TO_ADDR
28263: GO 29190
28265: LD_INT 4
28267: DOUBLE
28268: EQUAL
28269: IFTRUE 28273
28271: GO 28299
28273: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28274: LD_ADDR_VAR 0 3
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 3
28284: PUSH
28285: LD_INT 4
28287: PUSH
28288: LD_INT 5
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: ST_TO_ADDR
28297: GO 29190
28299: LD_INT 5
28301: DOUBLE
28302: EQUAL
28303: IFTRUE 28307
28305: GO 28333
28307: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28308: LD_ADDR_VAR 0 3
28312: PUSH
28313: LD_INT 2
28315: PUSH
28316: LD_INT 3
28318: PUSH
28319: LD_INT 4
28321: PUSH
28322: LD_INT 5
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: ST_TO_ADDR
28331: GO 29190
28333: LD_INT 9
28335: DOUBLE
28336: EQUAL
28337: IFTRUE 28341
28339: GO 28367
28341: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28342: LD_ADDR_VAR 0 3
28346: PUSH
28347: LD_INT 2
28349: PUSH
28350: LD_INT 3
28352: PUSH
28353: LD_INT 4
28355: PUSH
28356: LD_INT 5
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: ST_TO_ADDR
28365: GO 29190
28367: LD_INT 7
28369: DOUBLE
28370: EQUAL
28371: IFTRUE 28375
28373: GO 28401
28375: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28376: LD_ADDR_VAR 0 3
28380: PUSH
28381: LD_INT 2
28383: PUSH
28384: LD_INT 3
28386: PUSH
28387: LD_INT 4
28389: PUSH
28390: LD_INT 5
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: ST_TO_ADDR
28399: GO 29190
28401: LD_INT 12
28403: DOUBLE
28404: EQUAL
28405: IFTRUE 28409
28407: GO 28435
28409: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28410: LD_ADDR_VAR 0 3
28414: PUSH
28415: LD_INT 2
28417: PUSH
28418: LD_INT 3
28420: PUSH
28421: LD_INT 4
28423: PUSH
28424: LD_INT 5
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: ST_TO_ADDR
28433: GO 29190
28435: LD_INT 13
28437: DOUBLE
28438: EQUAL
28439: IFTRUE 28443
28441: GO 28469
28443: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28444: LD_ADDR_VAR 0 3
28448: PUSH
28449: LD_INT 2
28451: PUSH
28452: LD_INT 3
28454: PUSH
28455: LD_INT 4
28457: PUSH
28458: LD_INT 5
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: ST_TO_ADDR
28467: GO 29190
28469: LD_INT 14
28471: DOUBLE
28472: EQUAL
28473: IFTRUE 28477
28475: GO 28495
28477: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28478: LD_ADDR_VAR 0 3
28482: PUSH
28483: LD_INT 4
28485: PUSH
28486: LD_INT 5
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: ST_TO_ADDR
28493: GO 29190
28495: LD_INT 6
28497: DOUBLE
28498: EQUAL
28499: IFTRUE 28503
28501: GO 28521
28503: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28504: LD_ADDR_VAR 0 3
28508: PUSH
28509: LD_INT 4
28511: PUSH
28512: LD_INT 5
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: ST_TO_ADDR
28519: GO 29190
28521: LD_INT 10
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28547
28529: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28530: LD_ADDR_VAR 0 3
28534: PUSH
28535: LD_INT 4
28537: PUSH
28538: LD_INT 5
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: ST_TO_ADDR
28545: GO 29190
28547: LD_INT 22
28549: DOUBLE
28550: EQUAL
28551: IFTRUE 28555
28553: GO 28581
28555: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28556: LD_ADDR_VAR 0 3
28560: PUSH
28561: LD_INT 11
28563: PUSH
28564: LD_INT 12
28566: PUSH
28567: LD_INT 13
28569: PUSH
28570: LD_INT 14
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: LIST
28578: ST_TO_ADDR
28579: GO 29190
28581: LD_INT 23
28583: DOUBLE
28584: EQUAL
28585: IFTRUE 28589
28587: GO 28615
28589: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28590: LD_ADDR_VAR 0 3
28594: PUSH
28595: LD_INT 11
28597: PUSH
28598: LD_INT 12
28600: PUSH
28601: LD_INT 13
28603: PUSH
28604: LD_INT 14
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: ST_TO_ADDR
28613: GO 29190
28615: LD_INT 24
28617: DOUBLE
28618: EQUAL
28619: IFTRUE 28623
28621: GO 28649
28623: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28624: LD_ADDR_VAR 0 3
28628: PUSH
28629: LD_INT 11
28631: PUSH
28632: LD_INT 12
28634: PUSH
28635: LD_INT 13
28637: PUSH
28638: LD_INT 14
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: ST_TO_ADDR
28647: GO 29190
28649: LD_INT 30
28651: DOUBLE
28652: EQUAL
28653: IFTRUE 28657
28655: GO 28683
28657: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28658: LD_ADDR_VAR 0 3
28662: PUSH
28663: LD_INT 11
28665: PUSH
28666: LD_INT 12
28668: PUSH
28669: LD_INT 13
28671: PUSH
28672: LD_INT 14
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
28681: GO 29190
28683: LD_INT 25
28685: DOUBLE
28686: EQUAL
28687: IFTRUE 28691
28689: GO 28709
28691: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28692: LD_ADDR_VAR 0 3
28696: PUSH
28697: LD_INT 13
28699: PUSH
28700: LD_INT 14
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: ST_TO_ADDR
28707: GO 29190
28709: LD_INT 27
28711: DOUBLE
28712: EQUAL
28713: IFTRUE 28717
28715: GO 28735
28717: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28718: LD_ADDR_VAR 0 3
28722: PUSH
28723: LD_INT 13
28725: PUSH
28726: LD_INT 14
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: ST_TO_ADDR
28733: GO 29190
28735: LD_INT 92
28737: DOUBLE
28738: EQUAL
28739: IFTRUE 28743
28741: GO 28769
28743: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_INT 11
28751: PUSH
28752: LD_INT 12
28754: PUSH
28755: LD_INT 13
28757: PUSH
28758: LD_INT 14
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: ST_TO_ADDR
28767: GO 29190
28769: LD_INT 28
28771: DOUBLE
28772: EQUAL
28773: IFTRUE 28777
28775: GO 28795
28777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28778: LD_ADDR_VAR 0 3
28782: PUSH
28783: LD_INT 13
28785: PUSH
28786: LD_INT 14
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: ST_TO_ADDR
28793: GO 29190
28795: LD_INT 29
28797: DOUBLE
28798: EQUAL
28799: IFTRUE 28803
28801: GO 28821
28803: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28804: LD_ADDR_VAR 0 3
28808: PUSH
28809: LD_INT 13
28811: PUSH
28812: LD_INT 14
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: ST_TO_ADDR
28819: GO 29190
28821: LD_INT 31
28823: DOUBLE
28824: EQUAL
28825: IFTRUE 28829
28827: GO 28847
28829: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_INT 13
28837: PUSH
28838: LD_INT 14
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: ST_TO_ADDR
28845: GO 29190
28847: LD_INT 26
28849: DOUBLE
28850: EQUAL
28851: IFTRUE 28855
28853: GO 28873
28855: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28856: LD_ADDR_VAR 0 3
28860: PUSH
28861: LD_INT 13
28863: PUSH
28864: LD_INT 14
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: ST_TO_ADDR
28871: GO 29190
28873: LD_INT 42
28875: DOUBLE
28876: EQUAL
28877: IFTRUE 28881
28879: GO 28907
28881: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28882: LD_ADDR_VAR 0 3
28886: PUSH
28887: LD_INT 21
28889: PUSH
28890: LD_INT 22
28892: PUSH
28893: LD_INT 23
28895: PUSH
28896: LD_INT 24
28898: PUSH
28899: EMPTY
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: ST_TO_ADDR
28905: GO 29190
28907: LD_INT 43
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28941
28915: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28916: LD_ADDR_VAR 0 3
28920: PUSH
28921: LD_INT 21
28923: PUSH
28924: LD_INT 22
28926: PUSH
28927: LD_INT 23
28929: PUSH
28930: LD_INT 24
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: ST_TO_ADDR
28939: GO 29190
28941: LD_INT 44
28943: DOUBLE
28944: EQUAL
28945: IFTRUE 28949
28947: GO 28975
28949: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28950: LD_ADDR_VAR 0 3
28954: PUSH
28955: LD_INT 21
28957: PUSH
28958: LD_INT 22
28960: PUSH
28961: LD_INT 23
28963: PUSH
28964: LD_INT 24
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: ST_TO_ADDR
28973: GO 29190
28975: LD_INT 45
28977: DOUBLE
28978: EQUAL
28979: IFTRUE 28983
28981: GO 29009
28983: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28984: LD_ADDR_VAR 0 3
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 22
28994: PUSH
28995: LD_INT 23
28997: PUSH
28998: LD_INT 24
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: ST_TO_ADDR
29007: GO 29190
29009: LD_INT 49
29011: DOUBLE
29012: EQUAL
29013: IFTRUE 29017
29015: GO 29043
29017: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29018: LD_ADDR_VAR 0 3
29022: PUSH
29023: LD_INT 21
29025: PUSH
29026: LD_INT 22
29028: PUSH
29029: LD_INT 23
29031: PUSH
29032: LD_INT 24
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: ST_TO_ADDR
29041: GO 29190
29043: LD_INT 51
29045: DOUBLE
29046: EQUAL
29047: IFTRUE 29051
29049: GO 29077
29051: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29052: LD_ADDR_VAR 0 3
29056: PUSH
29057: LD_INT 21
29059: PUSH
29060: LD_INT 22
29062: PUSH
29063: LD_INT 23
29065: PUSH
29066: LD_INT 24
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: LIST
29073: LIST
29074: ST_TO_ADDR
29075: GO 29190
29077: LD_INT 52
29079: DOUBLE
29080: EQUAL
29081: IFTRUE 29085
29083: GO 29111
29085: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29086: LD_ADDR_VAR 0 3
29090: PUSH
29091: LD_INT 21
29093: PUSH
29094: LD_INT 22
29096: PUSH
29097: LD_INT 23
29099: PUSH
29100: LD_INT 24
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: ST_TO_ADDR
29109: GO 29190
29111: LD_INT 53
29113: DOUBLE
29114: EQUAL
29115: IFTRUE 29119
29117: GO 29137
29119: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29120: LD_ADDR_VAR 0 3
29124: PUSH
29125: LD_INT 23
29127: PUSH
29128: LD_INT 24
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: ST_TO_ADDR
29135: GO 29190
29137: LD_INT 46
29139: DOUBLE
29140: EQUAL
29141: IFTRUE 29145
29143: GO 29163
29145: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29146: LD_ADDR_VAR 0 3
29150: PUSH
29151: LD_INT 23
29153: PUSH
29154: LD_INT 24
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: ST_TO_ADDR
29161: GO 29190
29163: LD_INT 47
29165: DOUBLE
29166: EQUAL
29167: IFTRUE 29171
29169: GO 29189
29171: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29172: LD_ADDR_VAR 0 3
29176: PUSH
29177: LD_INT 23
29179: PUSH
29180: LD_INT 24
29182: PUSH
29183: EMPTY
29184: LIST
29185: LIST
29186: ST_TO_ADDR
29187: GO 29190
29189: POP
// result := ( chassis in result ) ;
29190: LD_ADDR_VAR 0 3
29194: PUSH
29195: LD_VAR 0 1
29199: PUSH
29200: LD_VAR 0 3
29204: IN
29205: ST_TO_ADDR
// end ;
29206: LD_VAR 0 3
29210: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29211: LD_INT 0
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
// result := array ;
29220: LD_ADDR_VAR 0 5
29224: PUSH
29225: LD_VAR 0 1
29229: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29230: LD_VAR 0 1
29234: NOT
29235: PUSH
29236: LD_VAR 0 2
29240: NOT
29241: OR
29242: PUSH
29243: LD_VAR 0 3
29247: NOT
29248: OR
29249: PUSH
29250: LD_VAR 0 2
29254: PUSH
29255: LD_VAR 0 1
29259: GREATER
29260: OR
29261: PUSH
29262: LD_VAR 0 3
29266: PUSH
29267: LD_VAR 0 1
29271: GREATER
29272: OR
29273: IFFALSE 29277
// exit ;
29275: GO 29573
// if direction then
29277: LD_VAR 0 4
29281: IFFALSE 29345
// begin d := 1 ;
29283: LD_ADDR_VAR 0 9
29287: PUSH
29288: LD_INT 1
29290: ST_TO_ADDR
// if i_from > i_to then
29291: LD_VAR 0 2
29295: PUSH
29296: LD_VAR 0 3
29300: GREATER
29301: IFFALSE 29327
// length := ( array - i_from ) + i_to else
29303: LD_ADDR_VAR 0 11
29307: PUSH
29308: LD_VAR 0 1
29312: PUSH
29313: LD_VAR 0 2
29317: MINUS
29318: PUSH
29319: LD_VAR 0 3
29323: PLUS
29324: ST_TO_ADDR
29325: GO 29343
// length := i_to - i_from ;
29327: LD_ADDR_VAR 0 11
29331: PUSH
29332: LD_VAR 0 3
29336: PUSH
29337: LD_VAR 0 2
29341: MINUS
29342: ST_TO_ADDR
// end else
29343: GO 29406
// begin d := - 1 ;
29345: LD_ADDR_VAR 0 9
29349: PUSH
29350: LD_INT 1
29352: NEG
29353: ST_TO_ADDR
// if i_from > i_to then
29354: LD_VAR 0 2
29358: PUSH
29359: LD_VAR 0 3
29363: GREATER
29364: IFFALSE 29384
// length := i_from - i_to else
29366: LD_ADDR_VAR 0 11
29370: PUSH
29371: LD_VAR 0 2
29375: PUSH
29376: LD_VAR 0 3
29380: MINUS
29381: ST_TO_ADDR
29382: GO 29406
// length := ( array - i_to ) + i_from ;
29384: LD_ADDR_VAR 0 11
29388: PUSH
29389: LD_VAR 0 1
29393: PUSH
29394: LD_VAR 0 3
29398: MINUS
29399: PUSH
29400: LD_VAR 0 2
29404: PLUS
29405: ST_TO_ADDR
// end ; if not length then
29406: LD_VAR 0 11
29410: NOT
29411: IFFALSE 29415
// exit ;
29413: GO 29573
// tmp := array ;
29415: LD_ADDR_VAR 0 10
29419: PUSH
29420: LD_VAR 0 1
29424: ST_TO_ADDR
// for i = 1 to length do
29425: LD_ADDR_VAR 0 6
29429: PUSH
29430: DOUBLE
29431: LD_INT 1
29433: DEC
29434: ST_TO_ADDR
29435: LD_VAR 0 11
29439: PUSH
29440: FOR_TO
29441: IFFALSE 29561
// begin for j = 1 to array do
29443: LD_ADDR_VAR 0 7
29447: PUSH
29448: DOUBLE
29449: LD_INT 1
29451: DEC
29452: ST_TO_ADDR
29453: LD_VAR 0 1
29457: PUSH
29458: FOR_TO
29459: IFFALSE 29547
// begin k := j + d ;
29461: LD_ADDR_VAR 0 8
29465: PUSH
29466: LD_VAR 0 7
29470: PUSH
29471: LD_VAR 0 9
29475: PLUS
29476: ST_TO_ADDR
// if k > array then
29477: LD_VAR 0 8
29481: PUSH
29482: LD_VAR 0 1
29486: GREATER
29487: IFFALSE 29497
// k := 1 ;
29489: LD_ADDR_VAR 0 8
29493: PUSH
29494: LD_INT 1
29496: ST_TO_ADDR
// if not k then
29497: LD_VAR 0 8
29501: NOT
29502: IFFALSE 29514
// k := array ;
29504: LD_ADDR_VAR 0 8
29508: PUSH
29509: LD_VAR 0 1
29513: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29514: LD_ADDR_VAR 0 10
29518: PUSH
29519: LD_VAR 0 10
29523: PPUSH
29524: LD_VAR 0 8
29528: PPUSH
29529: LD_VAR 0 1
29533: PUSH
29534: LD_VAR 0 7
29538: ARRAY
29539: PPUSH
29540: CALL_OW 1
29544: ST_TO_ADDR
// end ;
29545: GO 29458
29547: POP
29548: POP
// array := tmp ;
29549: LD_ADDR_VAR 0 1
29553: PUSH
29554: LD_VAR 0 10
29558: ST_TO_ADDR
// end ;
29559: GO 29440
29561: POP
29562: POP
// result := array ;
29563: LD_ADDR_VAR 0 5
29567: PUSH
29568: LD_VAR 0 1
29572: ST_TO_ADDR
// end ;
29573: LD_VAR 0 5
29577: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29578: LD_INT 0
29580: PPUSH
29581: PPUSH
// result := 0 ;
29582: LD_ADDR_VAR 0 3
29586: PUSH
29587: LD_INT 0
29589: ST_TO_ADDR
// if not array or not value in array then
29590: LD_VAR 0 1
29594: NOT
29595: PUSH
29596: LD_VAR 0 2
29600: PUSH
29601: LD_VAR 0 1
29605: IN
29606: NOT
29607: OR
29608: IFFALSE 29612
// exit ;
29610: GO 29666
// for i = 1 to array do
29612: LD_ADDR_VAR 0 4
29616: PUSH
29617: DOUBLE
29618: LD_INT 1
29620: DEC
29621: ST_TO_ADDR
29622: LD_VAR 0 1
29626: PUSH
29627: FOR_TO
29628: IFFALSE 29664
// if value = array [ i ] then
29630: LD_VAR 0 2
29634: PUSH
29635: LD_VAR 0 1
29639: PUSH
29640: LD_VAR 0 4
29644: ARRAY
29645: EQUAL
29646: IFFALSE 29662
// begin result := i ;
29648: LD_ADDR_VAR 0 3
29652: PUSH
29653: LD_VAR 0 4
29657: ST_TO_ADDR
// exit ;
29658: POP
29659: POP
29660: GO 29666
// end ;
29662: GO 29627
29664: POP
29665: POP
// end ;
29666: LD_VAR 0 3
29670: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29671: LD_INT 0
29673: PPUSH
// vc_chassis := chassis ;
29674: LD_ADDR_OWVAR 37
29678: PUSH
29679: LD_VAR 0 1
29683: ST_TO_ADDR
// vc_engine := engine ;
29684: LD_ADDR_OWVAR 39
29688: PUSH
29689: LD_VAR 0 2
29693: ST_TO_ADDR
// vc_control := control ;
29694: LD_ADDR_OWVAR 38
29698: PUSH
29699: LD_VAR 0 3
29703: ST_TO_ADDR
// vc_weapon := weapon ;
29704: LD_ADDR_OWVAR 40
29708: PUSH
29709: LD_VAR 0 4
29713: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29714: LD_ADDR_OWVAR 41
29718: PUSH
29719: LD_VAR 0 5
29723: ST_TO_ADDR
// end ;
29724: LD_VAR 0 6
29728: RET
// export function WantPlant ( unit ) ; var task ; begin
29729: LD_INT 0
29731: PPUSH
29732: PPUSH
// result := false ;
29733: LD_ADDR_VAR 0 2
29737: PUSH
29738: LD_INT 0
29740: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_VAR 0 1
29750: PPUSH
29751: CALL_OW 437
29755: ST_TO_ADDR
// if task then
29756: LD_VAR 0 3
29760: IFFALSE 29788
// if task [ 1 ] [ 1 ] = p then
29762: LD_VAR 0 3
29766: PUSH
29767: LD_INT 1
29769: ARRAY
29770: PUSH
29771: LD_INT 1
29773: ARRAY
29774: PUSH
29775: LD_STRING p
29777: EQUAL
29778: IFFALSE 29788
// result := true ;
29780: LD_ADDR_VAR 0 2
29784: PUSH
29785: LD_INT 1
29787: ST_TO_ADDR
// end ;
29788: LD_VAR 0 2
29792: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29793: LD_INT 0
29795: PPUSH
29796: PPUSH
29797: PPUSH
29798: PPUSH
// if pos < 1 then
29799: LD_VAR 0 2
29803: PUSH
29804: LD_INT 1
29806: LESS
29807: IFFALSE 29811
// exit ;
29809: GO 30114
// if pos = 1 then
29811: LD_VAR 0 2
29815: PUSH
29816: LD_INT 1
29818: EQUAL
29819: IFFALSE 29852
// result := Replace ( arr , pos [ 1 ] , value ) else
29821: LD_ADDR_VAR 0 4
29825: PUSH
29826: LD_VAR 0 1
29830: PPUSH
29831: LD_VAR 0 2
29835: PUSH
29836: LD_INT 1
29838: ARRAY
29839: PPUSH
29840: LD_VAR 0 3
29844: PPUSH
29845: CALL_OW 1
29849: ST_TO_ADDR
29850: GO 30114
// begin tmp := arr ;
29852: LD_ADDR_VAR 0 6
29856: PUSH
29857: LD_VAR 0 1
29861: ST_TO_ADDR
// s_arr := [ tmp ] ;
29862: LD_ADDR_VAR 0 7
29866: PUSH
29867: LD_VAR 0 6
29871: PUSH
29872: EMPTY
29873: LIST
29874: ST_TO_ADDR
// for i = 1 to pos - 1 do
29875: LD_ADDR_VAR 0 5
29879: PUSH
29880: DOUBLE
29881: LD_INT 1
29883: DEC
29884: ST_TO_ADDR
29885: LD_VAR 0 2
29889: PUSH
29890: LD_INT 1
29892: MINUS
29893: PUSH
29894: FOR_TO
29895: IFFALSE 29940
// begin tmp := tmp [ pos [ i ] ] ;
29897: LD_ADDR_VAR 0 6
29901: PUSH
29902: LD_VAR 0 6
29906: PUSH
29907: LD_VAR 0 2
29911: PUSH
29912: LD_VAR 0 5
29916: ARRAY
29917: ARRAY
29918: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29919: LD_ADDR_VAR 0 7
29923: PUSH
29924: LD_VAR 0 7
29928: PUSH
29929: LD_VAR 0 6
29933: PUSH
29934: EMPTY
29935: LIST
29936: ADD
29937: ST_TO_ADDR
// end ;
29938: GO 29894
29940: POP
29941: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29942: LD_ADDR_VAR 0 6
29946: PUSH
29947: LD_VAR 0 6
29951: PPUSH
29952: LD_VAR 0 2
29956: PUSH
29957: LD_VAR 0 2
29961: ARRAY
29962: PPUSH
29963: LD_VAR 0 3
29967: PPUSH
29968: CALL_OW 1
29972: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29973: LD_ADDR_VAR 0 7
29977: PUSH
29978: LD_VAR 0 7
29982: PPUSH
29983: LD_VAR 0 7
29987: PPUSH
29988: LD_VAR 0 6
29992: PPUSH
29993: CALL_OW 1
29997: ST_TO_ADDR
// for i = s_arr downto 2 do
29998: LD_ADDR_VAR 0 5
30002: PUSH
30003: DOUBLE
30004: LD_VAR 0 7
30008: INC
30009: ST_TO_ADDR
30010: LD_INT 2
30012: PUSH
30013: FOR_DOWNTO
30014: IFFALSE 30098
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30016: LD_ADDR_VAR 0 6
30020: PUSH
30021: LD_VAR 0 7
30025: PUSH
30026: LD_VAR 0 5
30030: PUSH
30031: LD_INT 1
30033: MINUS
30034: ARRAY
30035: PPUSH
30036: LD_VAR 0 2
30040: PUSH
30041: LD_VAR 0 5
30045: PUSH
30046: LD_INT 1
30048: MINUS
30049: ARRAY
30050: PPUSH
30051: LD_VAR 0 7
30055: PUSH
30056: LD_VAR 0 5
30060: ARRAY
30061: PPUSH
30062: CALL_OW 1
30066: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30067: LD_ADDR_VAR 0 7
30071: PUSH
30072: LD_VAR 0 7
30076: PPUSH
30077: LD_VAR 0 5
30081: PUSH
30082: LD_INT 1
30084: MINUS
30085: PPUSH
30086: LD_VAR 0 6
30090: PPUSH
30091: CALL_OW 1
30095: ST_TO_ADDR
// end ;
30096: GO 30013
30098: POP
30099: POP
// result := s_arr [ 1 ] ;
30100: LD_ADDR_VAR 0 4
30104: PUSH
30105: LD_VAR 0 7
30109: PUSH
30110: LD_INT 1
30112: ARRAY
30113: ST_TO_ADDR
// end ; end ;
30114: LD_VAR 0 4
30118: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30119: LD_INT 0
30121: PPUSH
30122: PPUSH
// if not list then
30123: LD_VAR 0 1
30127: NOT
30128: IFFALSE 30132
// exit ;
30130: GO 30223
// i := list [ pos1 ] ;
30132: LD_ADDR_VAR 0 5
30136: PUSH
30137: LD_VAR 0 1
30141: PUSH
30142: LD_VAR 0 2
30146: ARRAY
30147: ST_TO_ADDR
// if not i then
30148: LD_VAR 0 5
30152: NOT
30153: IFFALSE 30157
// exit ;
30155: GO 30223
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30157: LD_ADDR_VAR 0 1
30161: PUSH
30162: LD_VAR 0 1
30166: PPUSH
30167: LD_VAR 0 2
30171: PPUSH
30172: LD_VAR 0 1
30176: PUSH
30177: LD_VAR 0 3
30181: ARRAY
30182: PPUSH
30183: CALL_OW 1
30187: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30188: LD_ADDR_VAR 0 1
30192: PUSH
30193: LD_VAR 0 1
30197: PPUSH
30198: LD_VAR 0 3
30202: PPUSH
30203: LD_VAR 0 5
30207: PPUSH
30208: CALL_OW 1
30212: ST_TO_ADDR
// result := list ;
30213: LD_ADDR_VAR 0 4
30217: PUSH
30218: LD_VAR 0 1
30222: ST_TO_ADDR
// end ;
30223: LD_VAR 0 4
30227: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30228: LD_INT 0
30230: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30231: LD_ADDR_VAR 0 5
30235: PUSH
30236: LD_VAR 0 1
30240: PPUSH
30241: CALL_OW 250
30245: PPUSH
30246: LD_VAR 0 1
30250: PPUSH
30251: CALL_OW 251
30255: PPUSH
30256: LD_VAR 0 2
30260: PPUSH
30261: LD_VAR 0 3
30265: PPUSH
30266: LD_VAR 0 4
30270: PPUSH
30271: CALL 30281 0 5
30275: ST_TO_ADDR
// end ;
30276: LD_VAR 0 5
30280: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30281: LD_INT 0
30283: PPUSH
30284: PPUSH
30285: PPUSH
30286: PPUSH
// if not list then
30287: LD_VAR 0 3
30291: NOT
30292: IFFALSE 30296
// exit ;
30294: GO 30684
// result := [ ] ;
30296: LD_ADDR_VAR 0 6
30300: PUSH
30301: EMPTY
30302: ST_TO_ADDR
// for i in list do
30303: LD_ADDR_VAR 0 7
30307: PUSH
30308: LD_VAR 0 3
30312: PUSH
30313: FOR_IN
30314: IFFALSE 30516
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30316: LD_ADDR_VAR 0 9
30320: PUSH
30321: LD_VAR 0 7
30325: PPUSH
30326: LD_VAR 0 1
30330: PPUSH
30331: LD_VAR 0 2
30335: PPUSH
30336: CALL_OW 297
30340: ST_TO_ADDR
// if not result then
30341: LD_VAR 0 6
30345: NOT
30346: IFFALSE 30372
// result := [ [ i , tmp ] ] else
30348: LD_ADDR_VAR 0 6
30352: PUSH
30353: LD_VAR 0 7
30357: PUSH
30358: LD_VAR 0 9
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: PUSH
30367: EMPTY
30368: LIST
30369: ST_TO_ADDR
30370: GO 30514
// begin if result [ result ] [ 2 ] < tmp then
30372: LD_VAR 0 6
30376: PUSH
30377: LD_VAR 0 6
30381: ARRAY
30382: PUSH
30383: LD_INT 2
30385: ARRAY
30386: PUSH
30387: LD_VAR 0 9
30391: LESS
30392: IFFALSE 30434
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30394: LD_ADDR_VAR 0 6
30398: PUSH
30399: LD_VAR 0 6
30403: PPUSH
30404: LD_VAR 0 6
30408: PUSH
30409: LD_INT 1
30411: PLUS
30412: PPUSH
30413: LD_VAR 0 7
30417: PUSH
30418: LD_VAR 0 9
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PPUSH
30427: CALL_OW 2
30431: ST_TO_ADDR
30432: GO 30514
// for j = 1 to result do
30434: LD_ADDR_VAR 0 8
30438: PUSH
30439: DOUBLE
30440: LD_INT 1
30442: DEC
30443: ST_TO_ADDR
30444: LD_VAR 0 6
30448: PUSH
30449: FOR_TO
30450: IFFALSE 30512
// begin if tmp < result [ j ] [ 2 ] then
30452: LD_VAR 0 9
30456: PUSH
30457: LD_VAR 0 6
30461: PUSH
30462: LD_VAR 0 8
30466: ARRAY
30467: PUSH
30468: LD_INT 2
30470: ARRAY
30471: LESS
30472: IFFALSE 30510
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30474: LD_ADDR_VAR 0 6
30478: PUSH
30479: LD_VAR 0 6
30483: PPUSH
30484: LD_VAR 0 8
30488: PPUSH
30489: LD_VAR 0 7
30493: PUSH
30494: LD_VAR 0 9
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PPUSH
30503: CALL_OW 2
30507: ST_TO_ADDR
// break ;
30508: GO 30512
// end ; end ;
30510: GO 30449
30512: POP
30513: POP
// end ; end ;
30514: GO 30313
30516: POP
30517: POP
// if result and not asc then
30518: LD_VAR 0 6
30522: PUSH
30523: LD_VAR 0 4
30527: NOT
30528: AND
30529: IFFALSE 30604
// begin tmp := result ;
30531: LD_ADDR_VAR 0 9
30535: PUSH
30536: LD_VAR 0 6
30540: ST_TO_ADDR
// for i = tmp downto 1 do
30541: LD_ADDR_VAR 0 7
30545: PUSH
30546: DOUBLE
30547: LD_VAR 0 9
30551: INC
30552: ST_TO_ADDR
30553: LD_INT 1
30555: PUSH
30556: FOR_DOWNTO
30557: IFFALSE 30602
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30559: LD_ADDR_VAR 0 6
30563: PUSH
30564: LD_VAR 0 6
30568: PPUSH
30569: LD_VAR 0 9
30573: PUSH
30574: LD_VAR 0 7
30578: MINUS
30579: PUSH
30580: LD_INT 1
30582: PLUS
30583: PPUSH
30584: LD_VAR 0 9
30588: PUSH
30589: LD_VAR 0 7
30593: ARRAY
30594: PPUSH
30595: CALL_OW 1
30599: ST_TO_ADDR
30600: GO 30556
30602: POP
30603: POP
// end ; tmp := [ ] ;
30604: LD_ADDR_VAR 0 9
30608: PUSH
30609: EMPTY
30610: ST_TO_ADDR
// if mode then
30611: LD_VAR 0 5
30615: IFFALSE 30684
// begin for i = 1 to result do
30617: LD_ADDR_VAR 0 7
30621: PUSH
30622: DOUBLE
30623: LD_INT 1
30625: DEC
30626: ST_TO_ADDR
30627: LD_VAR 0 6
30631: PUSH
30632: FOR_TO
30633: IFFALSE 30672
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30635: LD_ADDR_VAR 0 9
30639: PUSH
30640: LD_VAR 0 9
30644: PPUSH
30645: LD_VAR 0 7
30649: PPUSH
30650: LD_VAR 0 6
30654: PUSH
30655: LD_VAR 0 7
30659: ARRAY
30660: PUSH
30661: LD_INT 1
30663: ARRAY
30664: PPUSH
30665: CALL_OW 1
30669: ST_TO_ADDR
30670: GO 30632
30672: POP
30673: POP
// result := tmp ;
30674: LD_ADDR_VAR 0 6
30678: PUSH
30679: LD_VAR 0 9
30683: ST_TO_ADDR
// end ; end ;
30684: LD_VAR 0 6
30688: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30689: LD_INT 0
30691: PPUSH
30692: PPUSH
30693: PPUSH
30694: PPUSH
30695: PPUSH
30696: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30697: LD_ADDR_VAR 0 5
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: EMPTY
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: ST_TO_ADDR
// if not x or not y then
30719: LD_VAR 0 2
30723: NOT
30724: PUSH
30725: LD_VAR 0 3
30729: NOT
30730: OR
30731: IFFALSE 30735
// exit ;
30733: GO 32385
// if not range then
30735: LD_VAR 0 4
30739: NOT
30740: IFFALSE 30750
// range := 10 ;
30742: LD_ADDR_VAR 0 4
30746: PUSH
30747: LD_INT 10
30749: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30750: LD_ADDR_VAR 0 8
30754: PUSH
30755: LD_INT 81
30757: PUSH
30758: LD_VAR 0 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 92
30769: PUSH
30770: LD_VAR 0 2
30774: PUSH
30775: LD_VAR 0 3
30779: PUSH
30780: LD_VAR 0 4
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: PUSH
30791: LD_INT 3
30793: PUSH
30794: LD_INT 21
30796: PUSH
30797: LD_INT 3
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: LIST
30812: PPUSH
30813: CALL_OW 69
30817: ST_TO_ADDR
// if not tmp then
30818: LD_VAR 0 8
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 32385
// for i in tmp do
30827: LD_ADDR_VAR 0 6
30831: PUSH
30832: LD_VAR 0 8
30836: PUSH
30837: FOR_IN
30838: IFFALSE 32360
// begin points := [ 0 , 0 , 0 ] ;
30840: LD_ADDR_VAR 0 9
30844: PUSH
30845: LD_INT 0
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: ST_TO_ADDR
// bpoints := 1 ;
30859: LD_ADDR_VAR 0 10
30863: PUSH
30864: LD_INT 1
30866: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30867: LD_VAR 0 6
30871: PPUSH
30872: CALL_OW 247
30876: PUSH
30877: LD_INT 1
30879: DOUBLE
30880: EQUAL
30881: IFTRUE 30885
30883: GO 31463
30885: POP
// begin if GetClass ( i ) = 1 then
30886: LD_VAR 0 6
30890: PPUSH
30891: CALL_OW 257
30895: PUSH
30896: LD_INT 1
30898: EQUAL
30899: IFFALSE 30920
// points := [ 10 , 5 , 3 ] ;
30901: LD_ADDR_VAR 0 9
30905: PUSH
30906: LD_INT 10
30908: PUSH
30909: LD_INT 5
30911: PUSH
30912: LD_INT 3
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30920: LD_VAR 0 6
30924: PPUSH
30925: CALL_OW 257
30929: PUSH
30930: LD_INT 2
30932: PUSH
30933: LD_INT 3
30935: PUSH
30936: LD_INT 4
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: IN
30944: IFFALSE 30965
// points := [ 3 , 2 , 1 ] ;
30946: LD_ADDR_VAR 0 9
30950: PUSH
30951: LD_INT 3
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: LD_INT 1
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30965: LD_VAR 0 6
30969: PPUSH
30970: CALL_OW 257
30974: PUSH
30975: LD_INT 5
30977: EQUAL
30978: IFFALSE 30999
// points := [ 130 , 5 , 2 ] ;
30980: LD_ADDR_VAR 0 9
30984: PUSH
30985: LD_INT 130
30987: PUSH
30988: LD_INT 5
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: LIST
30998: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30999: LD_VAR 0 6
31003: PPUSH
31004: CALL_OW 257
31008: PUSH
31009: LD_INT 8
31011: EQUAL
31012: IFFALSE 31033
// points := [ 35 , 35 , 30 ] ;
31014: LD_ADDR_VAR 0 9
31018: PUSH
31019: LD_INT 35
31021: PUSH
31022: LD_INT 35
31024: PUSH
31025: LD_INT 30
31027: PUSH
31028: EMPTY
31029: LIST
31030: LIST
31031: LIST
31032: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31033: LD_VAR 0 6
31037: PPUSH
31038: CALL_OW 257
31042: PUSH
31043: LD_INT 9
31045: EQUAL
31046: IFFALSE 31067
// points := [ 20 , 55 , 40 ] ;
31048: LD_ADDR_VAR 0 9
31052: PUSH
31053: LD_INT 20
31055: PUSH
31056: LD_INT 55
31058: PUSH
31059: LD_INT 40
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31067: LD_VAR 0 6
31071: PPUSH
31072: CALL_OW 257
31076: PUSH
31077: LD_INT 12
31079: PUSH
31080: LD_INT 16
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: IN
31087: IFFALSE 31108
// points := [ 5 , 3 , 2 ] ;
31089: LD_ADDR_VAR 0 9
31093: PUSH
31094: LD_INT 5
31096: PUSH
31097: LD_INT 3
31099: PUSH
31100: LD_INT 2
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: LIST
31107: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31108: LD_VAR 0 6
31112: PPUSH
31113: CALL_OW 257
31117: PUSH
31118: LD_INT 17
31120: EQUAL
31121: IFFALSE 31142
// points := [ 100 , 50 , 75 ] ;
31123: LD_ADDR_VAR 0 9
31127: PUSH
31128: LD_INT 100
31130: PUSH
31131: LD_INT 50
31133: PUSH
31134: LD_INT 75
31136: PUSH
31137: EMPTY
31138: LIST
31139: LIST
31140: LIST
31141: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31142: LD_VAR 0 6
31146: PPUSH
31147: CALL_OW 257
31151: PUSH
31152: LD_INT 15
31154: EQUAL
31155: IFFALSE 31176
// points := [ 10 , 5 , 3 ] ;
31157: LD_ADDR_VAR 0 9
31161: PUSH
31162: LD_INT 10
31164: PUSH
31165: LD_INT 5
31167: PUSH
31168: LD_INT 3
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: LIST
31175: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31176: LD_VAR 0 6
31180: PPUSH
31181: CALL_OW 257
31185: PUSH
31186: LD_INT 14
31188: EQUAL
31189: IFFALSE 31210
// points := [ 10 , 0 , 0 ] ;
31191: LD_ADDR_VAR 0 9
31195: PUSH
31196: LD_INT 10
31198: PUSH
31199: LD_INT 0
31201: PUSH
31202: LD_INT 0
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: LIST
31209: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31210: LD_VAR 0 6
31214: PPUSH
31215: CALL_OW 257
31219: PUSH
31220: LD_INT 11
31222: EQUAL
31223: IFFALSE 31244
// points := [ 30 , 10 , 5 ] ;
31225: LD_ADDR_VAR 0 9
31229: PUSH
31230: LD_INT 30
31232: PUSH
31233: LD_INT 10
31235: PUSH
31236: LD_INT 5
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: LIST
31243: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31244: LD_VAR 0 1
31248: PPUSH
31249: LD_INT 5
31251: PPUSH
31252: CALL_OW 321
31256: PUSH
31257: LD_INT 2
31259: EQUAL
31260: IFFALSE 31277
// bpoints := bpoints * 1.8 ;
31262: LD_ADDR_VAR 0 10
31266: PUSH
31267: LD_VAR 0 10
31271: PUSH
31272: LD_REAL  1.80000000000000E+0000
31275: MUL
31276: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31277: LD_VAR 0 6
31281: PPUSH
31282: CALL_OW 257
31286: PUSH
31287: LD_INT 1
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 3
31295: PUSH
31296: LD_INT 4
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: IN
31305: PUSH
31306: LD_VAR 0 1
31310: PPUSH
31311: LD_INT 51
31313: PPUSH
31314: CALL_OW 321
31318: PUSH
31319: LD_INT 2
31321: EQUAL
31322: AND
31323: IFFALSE 31340
// bpoints := bpoints * 1.2 ;
31325: LD_ADDR_VAR 0 10
31329: PUSH
31330: LD_VAR 0 10
31334: PUSH
31335: LD_REAL  1.20000000000000E+0000
31338: MUL
31339: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31340: LD_VAR 0 6
31344: PPUSH
31345: CALL_OW 257
31349: PUSH
31350: LD_INT 5
31352: PUSH
31353: LD_INT 7
31355: PUSH
31356: LD_INT 9
31358: PUSH
31359: EMPTY
31360: LIST
31361: LIST
31362: LIST
31363: IN
31364: PUSH
31365: LD_VAR 0 1
31369: PPUSH
31370: LD_INT 52
31372: PPUSH
31373: CALL_OW 321
31377: PUSH
31378: LD_INT 2
31380: EQUAL
31381: AND
31382: IFFALSE 31399
// bpoints := bpoints * 1.5 ;
31384: LD_ADDR_VAR 0 10
31388: PUSH
31389: LD_VAR 0 10
31393: PUSH
31394: LD_REAL  1.50000000000000E+0000
31397: MUL
31398: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_INT 66
31406: PPUSH
31407: CALL_OW 321
31411: PUSH
31412: LD_INT 2
31414: EQUAL
31415: IFFALSE 31432
// bpoints := bpoints * 1.1 ;
31417: LD_ADDR_VAR 0 10
31421: PUSH
31422: LD_VAR 0 10
31426: PUSH
31427: LD_REAL  1.10000000000000E+0000
31430: MUL
31431: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31432: LD_ADDR_VAR 0 10
31436: PUSH
31437: LD_VAR 0 10
31441: PUSH
31442: LD_VAR 0 6
31446: PPUSH
31447: LD_INT 1
31449: PPUSH
31450: CALL_OW 259
31454: PUSH
31455: LD_REAL  1.15000000000000E+0000
31458: MUL
31459: MUL
31460: ST_TO_ADDR
// end ; unit_vehicle :
31461: GO 32289
31463: LD_INT 2
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 32277
31471: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31472: LD_VAR 0 6
31476: PPUSH
31477: CALL_OW 264
31481: PUSH
31482: LD_INT 2
31484: PUSH
31485: LD_INT 42
31487: PUSH
31488: LD_INT 24
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: IN
31496: IFFALSE 31517
// points := [ 25 , 5 , 3 ] ;
31498: LD_ADDR_VAR 0 9
31502: PUSH
31503: LD_INT 25
31505: PUSH
31506: LD_INT 5
31508: PUSH
31509: LD_INT 3
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31517: LD_VAR 0 6
31521: PPUSH
31522: CALL_OW 264
31526: PUSH
31527: LD_INT 4
31529: PUSH
31530: LD_INT 43
31532: PUSH
31533: LD_INT 25
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: LIST
31540: IN
31541: IFFALSE 31562
// points := [ 40 , 15 , 5 ] ;
31543: LD_ADDR_VAR 0 9
31547: PUSH
31548: LD_INT 40
31550: PUSH
31551: LD_INT 15
31553: PUSH
31554: LD_INT 5
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: LIST
31561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31562: LD_VAR 0 6
31566: PPUSH
31567: CALL_OW 264
31571: PUSH
31572: LD_INT 3
31574: PUSH
31575: LD_INT 23
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: IN
31582: IFFALSE 31603
// points := [ 7 , 25 , 8 ] ;
31584: LD_ADDR_VAR 0 9
31588: PUSH
31589: LD_INT 7
31591: PUSH
31592: LD_INT 25
31594: PUSH
31595: LD_INT 8
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31603: LD_VAR 0 6
31607: PPUSH
31608: CALL_OW 264
31612: PUSH
31613: LD_INT 5
31615: PUSH
31616: LD_INT 27
31618: PUSH
31619: LD_INT 44
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: LIST
31626: IN
31627: IFFALSE 31648
// points := [ 14 , 50 , 16 ] ;
31629: LD_ADDR_VAR 0 9
31633: PUSH
31634: LD_INT 14
31636: PUSH
31637: LD_INT 50
31639: PUSH
31640: LD_INT 16
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31648: LD_VAR 0 6
31652: PPUSH
31653: CALL_OW 264
31657: PUSH
31658: LD_INT 6
31660: PUSH
31661: LD_INT 46
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: IN
31668: IFFALSE 31689
// points := [ 32 , 120 , 70 ] ;
31670: LD_ADDR_VAR 0 9
31674: PUSH
31675: LD_INT 32
31677: PUSH
31678: LD_INT 120
31680: PUSH
31681: LD_INT 70
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31689: LD_VAR 0 6
31693: PPUSH
31694: CALL_OW 264
31698: PUSH
31699: LD_INT 7
31701: PUSH
31702: LD_INT 28
31704: PUSH
31705: LD_INT 45
31707: PUSH
31708: LD_INT 92
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: IN
31717: IFFALSE 31738
// points := [ 35 , 20 , 45 ] ;
31719: LD_ADDR_VAR 0 9
31723: PUSH
31724: LD_INT 35
31726: PUSH
31727: LD_INT 20
31729: PUSH
31730: LD_INT 45
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: LIST
31737: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31738: LD_VAR 0 6
31742: PPUSH
31743: CALL_OW 264
31747: PUSH
31748: LD_INT 47
31750: PUSH
31751: EMPTY
31752: LIST
31753: IN
31754: IFFALSE 31775
// points := [ 67 , 45 , 75 ] ;
31756: LD_ADDR_VAR 0 9
31760: PUSH
31761: LD_INT 67
31763: PUSH
31764: LD_INT 45
31766: PUSH
31767: LD_INT 75
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: LIST
31774: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31775: LD_VAR 0 6
31779: PPUSH
31780: CALL_OW 264
31784: PUSH
31785: LD_INT 26
31787: PUSH
31788: EMPTY
31789: LIST
31790: IN
31791: IFFALSE 31812
// points := [ 120 , 30 , 80 ] ;
31793: LD_ADDR_VAR 0 9
31797: PUSH
31798: LD_INT 120
31800: PUSH
31801: LD_INT 30
31803: PUSH
31804: LD_INT 80
31806: PUSH
31807: EMPTY
31808: LIST
31809: LIST
31810: LIST
31811: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31812: LD_VAR 0 6
31816: PPUSH
31817: CALL_OW 264
31821: PUSH
31822: LD_INT 22
31824: PUSH
31825: EMPTY
31826: LIST
31827: IN
31828: IFFALSE 31849
// points := [ 40 , 1 , 1 ] ;
31830: LD_ADDR_VAR 0 9
31834: PUSH
31835: LD_INT 40
31837: PUSH
31838: LD_INT 1
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31849: LD_VAR 0 6
31853: PPUSH
31854: CALL_OW 264
31858: PUSH
31859: LD_INT 29
31861: PUSH
31862: EMPTY
31863: LIST
31864: IN
31865: IFFALSE 31886
// points := [ 70 , 200 , 400 ] ;
31867: LD_ADDR_VAR 0 9
31871: PUSH
31872: LD_INT 70
31874: PUSH
31875: LD_INT 200
31877: PUSH
31878: LD_INT 400
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31886: LD_VAR 0 6
31890: PPUSH
31891: CALL_OW 264
31895: PUSH
31896: LD_INT 14
31898: PUSH
31899: LD_INT 53
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: IN
31906: IFFALSE 31927
// points := [ 40 , 10 , 20 ] ;
31908: LD_ADDR_VAR 0 9
31912: PUSH
31913: LD_INT 40
31915: PUSH
31916: LD_INT 10
31918: PUSH
31919: LD_INT 20
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31927: LD_VAR 0 6
31931: PPUSH
31932: CALL_OW 264
31936: PUSH
31937: LD_INT 9
31939: PUSH
31940: EMPTY
31941: LIST
31942: IN
31943: IFFALSE 31964
// points := [ 5 , 70 , 20 ] ;
31945: LD_ADDR_VAR 0 9
31949: PUSH
31950: LD_INT 5
31952: PUSH
31953: LD_INT 70
31955: PUSH
31956: LD_INT 20
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: LIST
31963: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31964: LD_VAR 0 6
31968: PPUSH
31969: CALL_OW 264
31973: PUSH
31974: LD_INT 10
31976: PUSH
31977: EMPTY
31978: LIST
31979: IN
31980: IFFALSE 32001
// points := [ 35 , 110 , 70 ] ;
31982: LD_ADDR_VAR 0 9
31986: PUSH
31987: LD_INT 35
31989: PUSH
31990: LD_INT 110
31992: PUSH
31993: LD_INT 70
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32001: LD_VAR 0 6
32005: PPUSH
32006: CALL_OW 265
32010: PUSH
32011: LD_INT 25
32013: EQUAL
32014: IFFALSE 32035
// points := [ 80 , 65 , 100 ] ;
32016: LD_ADDR_VAR 0 9
32020: PUSH
32021: LD_INT 80
32023: PUSH
32024: LD_INT 65
32026: PUSH
32027: LD_INT 100
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: LIST
32034: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32035: LD_VAR 0 6
32039: PPUSH
32040: CALL_OW 263
32044: PUSH
32045: LD_INT 1
32047: EQUAL
32048: IFFALSE 32083
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32050: LD_ADDR_VAR 0 10
32054: PUSH
32055: LD_VAR 0 10
32059: PUSH
32060: LD_VAR 0 6
32064: PPUSH
32065: CALL_OW 311
32069: PPUSH
32070: LD_INT 3
32072: PPUSH
32073: CALL_OW 259
32077: PUSH
32078: LD_INT 4
32080: MUL
32081: MUL
32082: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32083: LD_VAR 0 6
32087: PPUSH
32088: CALL_OW 263
32092: PUSH
32093: LD_INT 2
32095: EQUAL
32096: IFFALSE 32147
// begin j := IsControledBy ( i ) ;
32098: LD_ADDR_VAR 0 7
32102: PUSH
32103: LD_VAR 0 6
32107: PPUSH
32108: CALL_OW 312
32112: ST_TO_ADDR
// if j then
32113: LD_VAR 0 7
32117: IFFALSE 32147
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32119: LD_ADDR_VAR 0 10
32123: PUSH
32124: LD_VAR 0 10
32128: PUSH
32129: LD_VAR 0 7
32133: PPUSH
32134: LD_INT 3
32136: PPUSH
32137: CALL_OW 259
32141: PUSH
32142: LD_INT 3
32144: MUL
32145: MUL
32146: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32147: LD_VAR 0 6
32151: PPUSH
32152: CALL_OW 264
32156: PUSH
32157: LD_INT 5
32159: PUSH
32160: LD_INT 6
32162: PUSH
32163: LD_INT 46
32165: PUSH
32166: LD_INT 44
32168: PUSH
32169: LD_INT 47
32171: PUSH
32172: LD_INT 45
32174: PUSH
32175: LD_INT 28
32177: PUSH
32178: LD_INT 7
32180: PUSH
32181: LD_INT 27
32183: PUSH
32184: LD_INT 29
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: IN
32199: PUSH
32200: LD_VAR 0 1
32204: PPUSH
32205: LD_INT 52
32207: PPUSH
32208: CALL_OW 321
32212: PUSH
32213: LD_INT 2
32215: EQUAL
32216: AND
32217: IFFALSE 32234
// bpoints := bpoints * 1.2 ;
32219: LD_ADDR_VAR 0 10
32223: PUSH
32224: LD_VAR 0 10
32228: PUSH
32229: LD_REAL  1.20000000000000E+0000
32232: MUL
32233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32234: LD_VAR 0 6
32238: PPUSH
32239: CALL_OW 264
32243: PUSH
32244: LD_INT 6
32246: PUSH
32247: LD_INT 46
32249: PUSH
32250: LD_INT 47
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: LIST
32257: IN
32258: IFFALSE 32275
// bpoints := bpoints * 1.2 ;
32260: LD_ADDR_VAR 0 10
32264: PUSH
32265: LD_VAR 0 10
32269: PUSH
32270: LD_REAL  1.20000000000000E+0000
32273: MUL
32274: ST_TO_ADDR
// end ; unit_building :
32275: GO 32289
32277: LD_INT 3
32279: DOUBLE
32280: EQUAL
32281: IFTRUE 32285
32283: GO 32288
32285: POP
// ; end ;
32286: GO 32289
32288: POP
// for j = 1 to 3 do
32289: LD_ADDR_VAR 0 7
32293: PUSH
32294: DOUBLE
32295: LD_INT 1
32297: DEC
32298: ST_TO_ADDR
32299: LD_INT 3
32301: PUSH
32302: FOR_TO
32303: IFFALSE 32356
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32305: LD_ADDR_VAR 0 5
32309: PUSH
32310: LD_VAR 0 5
32314: PPUSH
32315: LD_VAR 0 7
32319: PPUSH
32320: LD_VAR 0 5
32324: PUSH
32325: LD_VAR 0 7
32329: ARRAY
32330: PUSH
32331: LD_VAR 0 9
32335: PUSH
32336: LD_VAR 0 7
32340: ARRAY
32341: PUSH
32342: LD_VAR 0 10
32346: MUL
32347: PLUS
32348: PPUSH
32349: CALL_OW 1
32353: ST_TO_ADDR
32354: GO 32302
32356: POP
32357: POP
// end ;
32358: GO 30837
32360: POP
32361: POP
// result := Replace ( result , 4 , tmp ) ;
32362: LD_ADDR_VAR 0 5
32366: PUSH
32367: LD_VAR 0 5
32371: PPUSH
32372: LD_INT 4
32374: PPUSH
32375: LD_VAR 0 8
32379: PPUSH
32380: CALL_OW 1
32384: ST_TO_ADDR
// end ;
32385: LD_VAR 0 5
32389: RET
// export function DangerAtRange ( unit , range ) ; begin
32390: LD_INT 0
32392: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32393: LD_ADDR_VAR 0 3
32397: PUSH
32398: LD_VAR 0 1
32402: PPUSH
32403: CALL_OW 255
32407: PPUSH
32408: LD_VAR 0 1
32412: PPUSH
32413: CALL_OW 250
32417: PPUSH
32418: LD_VAR 0 1
32422: PPUSH
32423: CALL_OW 251
32427: PPUSH
32428: LD_VAR 0 2
32432: PPUSH
32433: CALL 30689 0 4
32437: ST_TO_ADDR
// end ;
32438: LD_VAR 0 3
32442: RET
// export function DangerInArea ( side , area ) ; begin
32443: LD_INT 0
32445: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32446: LD_ADDR_VAR 0 3
32450: PUSH
32451: LD_VAR 0 2
32455: PPUSH
32456: LD_INT 81
32458: PUSH
32459: LD_VAR 0 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PPUSH
32468: CALL_OW 70
32472: ST_TO_ADDR
// end ;
32473: LD_VAR 0 3
32477: RET
// export function IsExtension ( b ) ; begin
32478: LD_INT 0
32480: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32481: LD_ADDR_VAR 0 2
32485: PUSH
32486: LD_VAR 0 1
32490: PUSH
32491: LD_INT 23
32493: PUSH
32494: LD_INT 20
32496: PUSH
32497: LD_INT 22
32499: PUSH
32500: LD_INT 17
32502: PUSH
32503: LD_INT 24
32505: PUSH
32506: LD_INT 21
32508: PUSH
32509: LD_INT 19
32511: PUSH
32512: LD_INT 16
32514: PUSH
32515: LD_INT 25
32517: PUSH
32518: LD_INT 18
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: IN
32533: ST_TO_ADDR
// end ;
32534: LD_VAR 0 2
32538: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32539: LD_INT 0
32541: PPUSH
32542: PPUSH
32543: PPUSH
// result := [ ] ;
32544: LD_ADDR_VAR 0 4
32548: PUSH
32549: EMPTY
32550: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32551: LD_ADDR_VAR 0 5
32555: PUSH
32556: LD_VAR 0 2
32560: PPUSH
32561: LD_INT 21
32563: PUSH
32564: LD_INT 3
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PPUSH
32571: CALL_OW 70
32575: ST_TO_ADDR
// if not tmp then
32576: LD_VAR 0 5
32580: NOT
32581: IFFALSE 32585
// exit ;
32583: GO 32649
// if checkLink then
32585: LD_VAR 0 3
32589: IFFALSE 32639
// begin for i in tmp do
32591: LD_ADDR_VAR 0 6
32595: PUSH
32596: LD_VAR 0 5
32600: PUSH
32601: FOR_IN
32602: IFFALSE 32637
// if GetBase ( i ) <> base then
32604: LD_VAR 0 6
32608: PPUSH
32609: CALL_OW 274
32613: PUSH
32614: LD_VAR 0 1
32618: NONEQUAL
32619: IFFALSE 32635
// ComLinkToBase ( base , i ) ;
32621: LD_VAR 0 1
32625: PPUSH
32626: LD_VAR 0 6
32630: PPUSH
32631: CALL_OW 169
32635: GO 32601
32637: POP
32638: POP
// end ; result := tmp ;
32639: LD_ADDR_VAR 0 4
32643: PUSH
32644: LD_VAR 0 5
32648: ST_TO_ADDR
// end ;
32649: LD_VAR 0 4
32653: RET
// export function ComComplete ( units , b ) ; var i ; begin
32654: LD_INT 0
32656: PPUSH
32657: PPUSH
// if not units then
32658: LD_VAR 0 1
32662: NOT
32663: IFFALSE 32667
// exit ;
32665: GO 32757
// for i in units do
32667: LD_ADDR_VAR 0 4
32671: PUSH
32672: LD_VAR 0 1
32676: PUSH
32677: FOR_IN
32678: IFFALSE 32755
// if BuildingStatus ( b ) = bs_build then
32680: LD_VAR 0 2
32684: PPUSH
32685: CALL_OW 461
32689: PUSH
32690: LD_INT 1
32692: EQUAL
32693: IFFALSE 32753
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32695: LD_VAR 0 4
32699: PPUSH
32700: LD_STRING h
32702: PUSH
32703: LD_VAR 0 2
32707: PPUSH
32708: CALL_OW 250
32712: PUSH
32713: LD_VAR 0 2
32717: PPUSH
32718: CALL_OW 251
32722: PUSH
32723: LD_VAR 0 2
32727: PUSH
32728: LD_INT 0
32730: PUSH
32731: LD_INT 0
32733: PUSH
32734: LD_INT 0
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: PPUSH
32749: CALL_OW 446
32753: GO 32677
32755: POP
32756: POP
// end ;
32757: LD_VAR 0 3
32761: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32762: LD_INT 0
32764: PPUSH
32765: PPUSH
32766: PPUSH
32767: PPUSH
32768: PPUSH
32769: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32770: LD_VAR 0 1
32774: NOT
32775: PUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 263
32785: PUSH
32786: LD_INT 2
32788: NONEQUAL
32789: OR
32790: IFFALSE 32794
// exit ;
32792: GO 33110
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32794: LD_ADDR_VAR 0 6
32798: PUSH
32799: LD_INT 22
32801: PUSH
32802: LD_VAR 0 1
32806: PPUSH
32807: CALL_OW 255
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: LD_INT 30
32821: PUSH
32822: LD_INT 36
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 34
32831: PUSH
32832: LD_INT 31
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: LIST
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PPUSH
32848: CALL_OW 69
32852: ST_TO_ADDR
// if not tmp then
32853: LD_VAR 0 6
32857: NOT
32858: IFFALSE 32862
// exit ;
32860: GO 33110
// result := [ ] ;
32862: LD_ADDR_VAR 0 2
32866: PUSH
32867: EMPTY
32868: ST_TO_ADDR
// for i in tmp do
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_VAR 0 6
32878: PUSH
32879: FOR_IN
32880: IFFALSE 32951
// begin t := UnitsInside ( i ) ;
32882: LD_ADDR_VAR 0 4
32886: PUSH
32887: LD_VAR 0 3
32891: PPUSH
32892: CALL_OW 313
32896: ST_TO_ADDR
// if t then
32897: LD_VAR 0 4
32901: IFFALSE 32949
// for j in t do
32903: LD_ADDR_VAR 0 7
32907: PUSH
32908: LD_VAR 0 4
32912: PUSH
32913: FOR_IN
32914: IFFALSE 32947
// result := Replace ( result , result + 1 , j ) ;
32916: LD_ADDR_VAR 0 2
32920: PUSH
32921: LD_VAR 0 2
32925: PPUSH
32926: LD_VAR 0 2
32930: PUSH
32931: LD_INT 1
32933: PLUS
32934: PPUSH
32935: LD_VAR 0 7
32939: PPUSH
32940: CALL_OW 1
32944: ST_TO_ADDR
32945: GO 32913
32947: POP
32948: POP
// end ;
32949: GO 32879
32951: POP
32952: POP
// if not result then
32953: LD_VAR 0 2
32957: NOT
32958: IFFALSE 32962
// exit ;
32960: GO 33110
// mech := result [ 1 ] ;
32962: LD_ADDR_VAR 0 5
32966: PUSH
32967: LD_VAR 0 2
32971: PUSH
32972: LD_INT 1
32974: ARRAY
32975: ST_TO_ADDR
// if result > 1 then
32976: LD_VAR 0 2
32980: PUSH
32981: LD_INT 1
32983: GREATER
32984: IFFALSE 33096
// begin for i = 2 to result do
32986: LD_ADDR_VAR 0 3
32990: PUSH
32991: DOUBLE
32992: LD_INT 2
32994: DEC
32995: ST_TO_ADDR
32996: LD_VAR 0 2
33000: PUSH
33001: FOR_TO
33002: IFFALSE 33094
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33004: LD_ADDR_VAR 0 4
33008: PUSH
33009: LD_VAR 0 2
33013: PUSH
33014: LD_VAR 0 3
33018: ARRAY
33019: PPUSH
33020: LD_INT 3
33022: PPUSH
33023: CALL_OW 259
33027: PUSH
33028: LD_VAR 0 2
33032: PUSH
33033: LD_VAR 0 3
33037: ARRAY
33038: PPUSH
33039: CALL_OW 432
33043: MINUS
33044: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33045: LD_VAR 0 4
33049: PUSH
33050: LD_VAR 0 5
33054: PPUSH
33055: LD_INT 3
33057: PPUSH
33058: CALL_OW 259
33062: PUSH
33063: LD_VAR 0 5
33067: PPUSH
33068: CALL_OW 432
33072: MINUS
33073: GREATEREQUAL
33074: IFFALSE 33092
// mech := result [ i ] ;
33076: LD_ADDR_VAR 0 5
33080: PUSH
33081: LD_VAR 0 2
33085: PUSH
33086: LD_VAR 0 3
33090: ARRAY
33091: ST_TO_ADDR
// end ;
33092: GO 33001
33094: POP
33095: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33096: LD_VAR 0 1
33100: PPUSH
33101: LD_VAR 0 5
33105: PPUSH
33106: CALL_OW 135
// end ;
33110: LD_VAR 0 2
33114: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33115: LD_INT 0
33117: PPUSH
33118: PPUSH
33119: PPUSH
33120: PPUSH
33121: PPUSH
33122: PPUSH
33123: PPUSH
33124: PPUSH
33125: PPUSH
33126: PPUSH
33127: PPUSH
33128: PPUSH
33129: PPUSH
// result := [ ] ;
33130: LD_ADDR_VAR 0 7
33134: PUSH
33135: EMPTY
33136: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33137: LD_VAR 0 1
33141: PPUSH
33142: CALL_OW 266
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: IN
33157: NOT
33158: IFFALSE 33162
// exit ;
33160: GO 34796
// if name then
33162: LD_VAR 0 3
33166: IFFALSE 33182
// SetBName ( base_dep , name ) ;
33168: LD_VAR 0 1
33172: PPUSH
33173: LD_VAR 0 3
33177: PPUSH
33178: CALL_OW 500
// base := GetBase ( base_dep ) ;
33182: LD_ADDR_VAR 0 15
33186: PUSH
33187: LD_VAR 0 1
33191: PPUSH
33192: CALL_OW 274
33196: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33197: LD_ADDR_VAR 0 16
33201: PUSH
33202: LD_VAR 0 1
33206: PPUSH
33207: CALL_OW 255
33211: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33212: LD_ADDR_VAR 0 17
33216: PUSH
33217: LD_VAR 0 1
33221: PPUSH
33222: CALL_OW 248
33226: ST_TO_ADDR
// if sources then
33227: LD_VAR 0 5
33231: IFFALSE 33278
// for i = 1 to 3 do
33233: LD_ADDR_VAR 0 8
33237: PUSH
33238: DOUBLE
33239: LD_INT 1
33241: DEC
33242: ST_TO_ADDR
33243: LD_INT 3
33245: PUSH
33246: FOR_TO
33247: IFFALSE 33276
// AddResourceType ( base , i , sources [ i ] ) ;
33249: LD_VAR 0 15
33253: PPUSH
33254: LD_VAR 0 8
33258: PPUSH
33259: LD_VAR 0 5
33263: PUSH
33264: LD_VAR 0 8
33268: ARRAY
33269: PPUSH
33270: CALL_OW 276
33274: GO 33246
33276: POP
33277: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33278: LD_ADDR_VAR 0 18
33282: PUSH
33283: LD_VAR 0 15
33287: PPUSH
33288: LD_VAR 0 2
33292: PPUSH
33293: LD_INT 1
33295: PPUSH
33296: CALL 32539 0 3
33300: ST_TO_ADDR
// InitHc ;
33301: CALL_OW 19
// InitUc ;
33305: CALL_OW 18
// uc_side := side ;
33309: LD_ADDR_OWVAR 20
33313: PUSH
33314: LD_VAR 0 16
33318: ST_TO_ADDR
// uc_nation := nation ;
33319: LD_ADDR_OWVAR 21
33323: PUSH
33324: LD_VAR 0 17
33328: ST_TO_ADDR
// if buildings then
33329: LD_VAR 0 18
33333: IFFALSE 34655
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33335: LD_ADDR_VAR 0 19
33339: PUSH
33340: LD_VAR 0 18
33344: PPUSH
33345: LD_INT 2
33347: PUSH
33348: LD_INT 30
33350: PUSH
33351: LD_INT 29
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: PUSH
33358: LD_INT 30
33360: PUSH
33361: LD_INT 30
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: LIST
33372: PPUSH
33373: CALL_OW 72
33377: ST_TO_ADDR
// if tmp then
33378: LD_VAR 0 19
33382: IFFALSE 33430
// for i in tmp do
33384: LD_ADDR_VAR 0 8
33388: PUSH
33389: LD_VAR 0 19
33393: PUSH
33394: FOR_IN
33395: IFFALSE 33428
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33397: LD_VAR 0 8
33401: PPUSH
33402: CALL_OW 250
33406: PPUSH
33407: LD_VAR 0 8
33411: PPUSH
33412: CALL_OW 251
33416: PPUSH
33417: LD_VAR 0 16
33421: PPUSH
33422: CALL_OW 441
33426: GO 33394
33428: POP
33429: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33430: LD_VAR 0 18
33434: PPUSH
33435: LD_INT 2
33437: PUSH
33438: LD_INT 30
33440: PUSH
33441: LD_INT 32
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 30
33450: PUSH
33451: LD_INT 33
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: LIST
33462: PPUSH
33463: CALL_OW 72
33467: IFFALSE 33555
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33469: LD_ADDR_VAR 0 8
33473: PUSH
33474: LD_VAR 0 18
33478: PPUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 30
33484: PUSH
33485: LD_INT 32
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 30
33494: PUSH
33495: LD_INT 33
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL_OW 72
33511: PUSH
33512: FOR_IN
33513: IFFALSE 33553
// begin if not GetBWeapon ( i ) then
33515: LD_VAR 0 8
33519: PPUSH
33520: CALL_OW 269
33524: NOT
33525: IFFALSE 33551
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33527: LD_VAR 0 8
33531: PPUSH
33532: LD_VAR 0 8
33536: PPUSH
33537: LD_VAR 0 2
33541: PPUSH
33542: CALL 34801 0 2
33546: PPUSH
33547: CALL_OW 431
// end ;
33551: GO 33512
33553: POP
33554: POP
// end ; for i = 1 to personel do
33555: LD_ADDR_VAR 0 8
33559: PUSH
33560: DOUBLE
33561: LD_INT 1
33563: DEC
33564: ST_TO_ADDR
33565: LD_VAR 0 6
33569: PUSH
33570: FOR_TO
33571: IFFALSE 34635
// begin if i > 4 then
33573: LD_VAR 0 8
33577: PUSH
33578: LD_INT 4
33580: GREATER
33581: IFFALSE 33585
// break ;
33583: GO 34635
// case i of 1 :
33585: LD_VAR 0 8
33589: PUSH
33590: LD_INT 1
33592: DOUBLE
33593: EQUAL
33594: IFTRUE 33598
33596: GO 33678
33598: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33599: LD_ADDR_VAR 0 12
33603: PUSH
33604: LD_VAR 0 18
33608: PPUSH
33609: LD_INT 22
33611: PUSH
33612: LD_VAR 0 16
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 58
33623: PUSH
33624: EMPTY
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 30
33632: PUSH
33633: LD_INT 32
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: PUSH
33640: LD_INT 30
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: EMPTY
33647: LIST
33648: LIST
33649: PUSH
33650: LD_INT 30
33652: PUSH
33653: LD_INT 5
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: LIST
33670: PPUSH
33671: CALL_OW 72
33675: ST_TO_ADDR
33676: GO 33900
33678: LD_INT 2
33680: DOUBLE
33681: EQUAL
33682: IFTRUE 33686
33684: GO 33748
33686: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33687: LD_ADDR_VAR 0 12
33691: PUSH
33692: LD_VAR 0 18
33696: PPUSH
33697: LD_INT 22
33699: PUSH
33700: LD_VAR 0 16
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 30
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 30
33724: PUSH
33725: LD_INT 1
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PPUSH
33741: CALL_OW 72
33745: ST_TO_ADDR
33746: GO 33900
33748: LD_INT 3
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33756
33754: GO 33818
33756: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33757: LD_ADDR_VAR 0 12
33761: PUSH
33762: LD_VAR 0 18
33766: PPUSH
33767: LD_INT 22
33769: PUSH
33770: LD_VAR 0 16
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 2
33781: PUSH
33782: LD_INT 30
33784: PUSH
33785: LD_INT 2
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 30
33794: PUSH
33795: LD_INT 3
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: LIST
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PPUSH
33811: CALL_OW 72
33815: ST_TO_ADDR
33816: GO 33900
33818: LD_INT 4
33820: DOUBLE
33821: EQUAL
33822: IFTRUE 33826
33824: GO 33899
33826: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33827: LD_ADDR_VAR 0 12
33831: PUSH
33832: LD_VAR 0 18
33836: PPUSH
33837: LD_INT 22
33839: PUSH
33840: LD_VAR 0 16
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 30
33854: PUSH
33855: LD_INT 6
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 30
33864: PUSH
33865: LD_INT 7
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 30
33874: PUSH
33875: LD_INT 8
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PPUSH
33892: CALL_OW 72
33896: ST_TO_ADDR
33897: GO 33900
33899: POP
// if i = 1 then
33900: LD_VAR 0 8
33904: PUSH
33905: LD_INT 1
33907: EQUAL
33908: IFFALSE 34019
// begin tmp := [ ] ;
33910: LD_ADDR_VAR 0 19
33914: PUSH
33915: EMPTY
33916: ST_TO_ADDR
// for j in f do
33917: LD_ADDR_VAR 0 9
33921: PUSH
33922: LD_VAR 0 12
33926: PUSH
33927: FOR_IN
33928: IFFALSE 34001
// if GetBType ( j ) = b_bunker then
33930: LD_VAR 0 9
33934: PPUSH
33935: CALL_OW 266
33939: PUSH
33940: LD_INT 32
33942: EQUAL
33943: IFFALSE 33970
// tmp := Insert ( tmp , 1 , j ) else
33945: LD_ADDR_VAR 0 19
33949: PUSH
33950: LD_VAR 0 19
33954: PPUSH
33955: LD_INT 1
33957: PPUSH
33958: LD_VAR 0 9
33962: PPUSH
33963: CALL_OW 2
33967: ST_TO_ADDR
33968: GO 33999
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33970: LD_ADDR_VAR 0 19
33974: PUSH
33975: LD_VAR 0 19
33979: PPUSH
33980: LD_VAR 0 19
33984: PUSH
33985: LD_INT 1
33987: PLUS
33988: PPUSH
33989: LD_VAR 0 9
33993: PPUSH
33994: CALL_OW 2
33998: ST_TO_ADDR
33999: GO 33927
34001: POP
34002: POP
// if tmp then
34003: LD_VAR 0 19
34007: IFFALSE 34019
// f := tmp ;
34009: LD_ADDR_VAR 0 12
34013: PUSH
34014: LD_VAR 0 19
34018: ST_TO_ADDR
// end ; x := personel [ i ] ;
34019: LD_ADDR_VAR 0 13
34023: PUSH
34024: LD_VAR 0 6
34028: PUSH
34029: LD_VAR 0 8
34033: ARRAY
34034: ST_TO_ADDR
// if x = - 1 then
34035: LD_VAR 0 13
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: EQUAL
34044: IFFALSE 34253
// begin for j in f do
34046: LD_ADDR_VAR 0 9
34050: PUSH
34051: LD_VAR 0 12
34055: PUSH
34056: FOR_IN
34057: IFFALSE 34249
// repeat InitHc ;
34059: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34063: LD_VAR 0 9
34067: PPUSH
34068: CALL_OW 266
34072: PUSH
34073: LD_INT 5
34075: EQUAL
34076: IFFALSE 34146
// begin if UnitsInside ( j ) < 3 then
34078: LD_VAR 0 9
34082: PPUSH
34083: CALL_OW 313
34087: PUSH
34088: LD_INT 3
34090: LESS
34091: IFFALSE 34127
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34093: LD_INT 0
34095: PPUSH
34096: LD_INT 5
34098: PUSH
34099: LD_INT 8
34101: PUSH
34102: LD_INT 9
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: LIST
34109: PUSH
34110: LD_VAR 0 17
34114: ARRAY
34115: PPUSH
34116: LD_VAR 0 4
34120: PPUSH
34121: CALL_OW 380
34125: GO 34144
// PrepareHuman ( false , i , skill ) ;
34127: LD_INT 0
34129: PPUSH
34130: LD_VAR 0 8
34134: PPUSH
34135: LD_VAR 0 4
34139: PPUSH
34140: CALL_OW 380
// end else
34144: GO 34163
// PrepareHuman ( false , i , skill ) ;
34146: LD_INT 0
34148: PPUSH
34149: LD_VAR 0 8
34153: PPUSH
34154: LD_VAR 0 4
34158: PPUSH
34159: CALL_OW 380
// un := CreateHuman ;
34163: LD_ADDR_VAR 0 14
34167: PUSH
34168: CALL_OW 44
34172: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34173: LD_ADDR_VAR 0 7
34177: PUSH
34178: LD_VAR 0 7
34182: PPUSH
34183: LD_INT 1
34185: PPUSH
34186: LD_VAR 0 14
34190: PPUSH
34191: CALL_OW 2
34195: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34196: LD_VAR 0 14
34200: PPUSH
34201: LD_VAR 0 9
34205: PPUSH
34206: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34210: LD_VAR 0 9
34214: PPUSH
34215: CALL_OW 313
34219: PUSH
34220: LD_INT 6
34222: EQUAL
34223: PUSH
34224: LD_VAR 0 9
34228: PPUSH
34229: CALL_OW 266
34233: PUSH
34234: LD_INT 32
34236: PUSH
34237: LD_INT 31
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: IN
34244: OR
34245: IFFALSE 34059
34247: GO 34056
34249: POP
34250: POP
// end else
34251: GO 34633
// for j = 1 to x do
34253: LD_ADDR_VAR 0 9
34257: PUSH
34258: DOUBLE
34259: LD_INT 1
34261: DEC
34262: ST_TO_ADDR
34263: LD_VAR 0 13
34267: PUSH
34268: FOR_TO
34269: IFFALSE 34631
// begin InitHc ;
34271: CALL_OW 19
// if not f then
34275: LD_VAR 0 12
34279: NOT
34280: IFFALSE 34369
// begin PrepareHuman ( false , i , skill ) ;
34282: LD_INT 0
34284: PPUSH
34285: LD_VAR 0 8
34289: PPUSH
34290: LD_VAR 0 4
34294: PPUSH
34295: CALL_OW 380
// un := CreateHuman ;
34299: LD_ADDR_VAR 0 14
34303: PUSH
34304: CALL_OW 44
34308: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34309: LD_ADDR_VAR 0 7
34313: PUSH
34314: LD_VAR 0 7
34318: PPUSH
34319: LD_INT 1
34321: PPUSH
34322: LD_VAR 0 14
34326: PPUSH
34327: CALL_OW 2
34331: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34332: LD_VAR 0 14
34336: PPUSH
34337: LD_VAR 0 1
34341: PPUSH
34342: CALL_OW 250
34346: PPUSH
34347: LD_VAR 0 1
34351: PPUSH
34352: CALL_OW 251
34356: PPUSH
34357: LD_INT 10
34359: PPUSH
34360: LD_INT 0
34362: PPUSH
34363: CALL_OW 50
// continue ;
34367: GO 34268
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34369: LD_VAR 0 12
34373: PUSH
34374: LD_INT 1
34376: ARRAY
34377: PPUSH
34378: CALL_OW 313
34382: PUSH
34383: LD_VAR 0 12
34387: PUSH
34388: LD_INT 1
34390: ARRAY
34391: PPUSH
34392: CALL_OW 266
34396: PUSH
34397: LD_INT 32
34399: PUSH
34400: LD_INT 31
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: IN
34407: AND
34408: PUSH
34409: LD_VAR 0 12
34413: PUSH
34414: LD_INT 1
34416: ARRAY
34417: PPUSH
34418: CALL_OW 313
34422: PUSH
34423: LD_INT 6
34425: EQUAL
34426: OR
34427: IFFALSE 34447
// f := Delete ( f , 1 ) ;
34429: LD_ADDR_VAR 0 12
34433: PUSH
34434: LD_VAR 0 12
34438: PPUSH
34439: LD_INT 1
34441: PPUSH
34442: CALL_OW 3
34446: ST_TO_ADDR
// if not f then
34447: LD_VAR 0 12
34451: NOT
34452: IFFALSE 34470
// begin x := x + 2 ;
34454: LD_ADDR_VAR 0 13
34458: PUSH
34459: LD_VAR 0 13
34463: PUSH
34464: LD_INT 2
34466: PLUS
34467: ST_TO_ADDR
// continue ;
34468: GO 34268
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34470: LD_VAR 0 12
34474: PUSH
34475: LD_INT 1
34477: ARRAY
34478: PPUSH
34479: CALL_OW 266
34483: PUSH
34484: LD_INT 5
34486: EQUAL
34487: IFFALSE 34561
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34489: LD_VAR 0 12
34493: PUSH
34494: LD_INT 1
34496: ARRAY
34497: PPUSH
34498: CALL_OW 313
34502: PUSH
34503: LD_INT 3
34505: LESS
34506: IFFALSE 34542
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34508: LD_INT 0
34510: PPUSH
34511: LD_INT 5
34513: PUSH
34514: LD_INT 8
34516: PUSH
34517: LD_INT 9
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: PUSH
34525: LD_VAR 0 17
34529: ARRAY
34530: PPUSH
34531: LD_VAR 0 4
34535: PPUSH
34536: CALL_OW 380
34540: GO 34559
// PrepareHuman ( false , i , skill ) ;
34542: LD_INT 0
34544: PPUSH
34545: LD_VAR 0 8
34549: PPUSH
34550: LD_VAR 0 4
34554: PPUSH
34555: CALL_OW 380
// end else
34559: GO 34578
// PrepareHuman ( false , i , skill ) ;
34561: LD_INT 0
34563: PPUSH
34564: LD_VAR 0 8
34568: PPUSH
34569: LD_VAR 0 4
34573: PPUSH
34574: CALL_OW 380
// un := CreateHuman ;
34578: LD_ADDR_VAR 0 14
34582: PUSH
34583: CALL_OW 44
34587: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34588: LD_ADDR_VAR 0 7
34592: PUSH
34593: LD_VAR 0 7
34597: PPUSH
34598: LD_INT 1
34600: PPUSH
34601: LD_VAR 0 14
34605: PPUSH
34606: CALL_OW 2
34610: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34611: LD_VAR 0 14
34615: PPUSH
34616: LD_VAR 0 12
34620: PUSH
34621: LD_INT 1
34623: ARRAY
34624: PPUSH
34625: CALL_OW 52
// end ;
34629: GO 34268
34631: POP
34632: POP
// end ;
34633: GO 33570
34635: POP
34636: POP
// result := result ^ buildings ;
34637: LD_ADDR_VAR 0 7
34641: PUSH
34642: LD_VAR 0 7
34646: PUSH
34647: LD_VAR 0 18
34651: ADD
34652: ST_TO_ADDR
// end else
34653: GO 34796
// begin for i = 1 to personel do
34655: LD_ADDR_VAR 0 8
34659: PUSH
34660: DOUBLE
34661: LD_INT 1
34663: DEC
34664: ST_TO_ADDR
34665: LD_VAR 0 6
34669: PUSH
34670: FOR_TO
34671: IFFALSE 34794
// begin if i > 4 then
34673: LD_VAR 0 8
34677: PUSH
34678: LD_INT 4
34680: GREATER
34681: IFFALSE 34685
// break ;
34683: GO 34794
// x := personel [ i ] ;
34685: LD_ADDR_VAR 0 13
34689: PUSH
34690: LD_VAR 0 6
34694: PUSH
34695: LD_VAR 0 8
34699: ARRAY
34700: ST_TO_ADDR
// if x = - 1 then
34701: LD_VAR 0 13
34705: PUSH
34706: LD_INT 1
34708: NEG
34709: EQUAL
34710: IFFALSE 34714
// continue ;
34712: GO 34670
// PrepareHuman ( false , i , skill ) ;
34714: LD_INT 0
34716: PPUSH
34717: LD_VAR 0 8
34721: PPUSH
34722: LD_VAR 0 4
34726: PPUSH
34727: CALL_OW 380
// un := CreateHuman ;
34731: LD_ADDR_VAR 0 14
34735: PUSH
34736: CALL_OW 44
34740: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34741: LD_VAR 0 14
34745: PPUSH
34746: LD_VAR 0 1
34750: PPUSH
34751: CALL_OW 250
34755: PPUSH
34756: LD_VAR 0 1
34760: PPUSH
34761: CALL_OW 251
34765: PPUSH
34766: LD_INT 10
34768: PPUSH
34769: LD_INT 0
34771: PPUSH
34772: CALL_OW 50
// result := result ^ un ;
34776: LD_ADDR_VAR 0 7
34780: PUSH
34781: LD_VAR 0 7
34785: PUSH
34786: LD_VAR 0 14
34790: ADD
34791: ST_TO_ADDR
// end ;
34792: GO 34670
34794: POP
34795: POP
// end ; end ;
34796: LD_VAR 0 7
34800: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34801: LD_INT 0
34803: PPUSH
34804: PPUSH
34805: PPUSH
34806: PPUSH
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
34814: PPUSH
34815: PPUSH
34816: PPUSH
34817: PPUSH
34818: PPUSH
// result := false ;
34819: LD_ADDR_VAR 0 3
34823: PUSH
34824: LD_INT 0
34826: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34827: LD_VAR 0 1
34831: NOT
34832: PUSH
34833: LD_VAR 0 1
34837: PPUSH
34838: CALL_OW 266
34842: PUSH
34843: LD_INT 32
34845: PUSH
34846: LD_INT 33
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: IN
34853: NOT
34854: OR
34855: IFFALSE 34859
// exit ;
34857: GO 35968
// nat := GetNation ( tower ) ;
34859: LD_ADDR_VAR 0 12
34863: PUSH
34864: LD_VAR 0 1
34868: PPUSH
34869: CALL_OW 248
34873: ST_TO_ADDR
// side := GetSide ( tower ) ;
34874: LD_ADDR_VAR 0 16
34878: PUSH
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 255
34888: ST_TO_ADDR
// x := GetX ( tower ) ;
34889: LD_ADDR_VAR 0 10
34893: PUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: CALL_OW 250
34903: ST_TO_ADDR
// y := GetY ( tower ) ;
34904: LD_ADDR_VAR 0 11
34908: PUSH
34909: LD_VAR 0 1
34913: PPUSH
34914: CALL_OW 251
34918: ST_TO_ADDR
// if not x or not y then
34919: LD_VAR 0 10
34923: NOT
34924: PUSH
34925: LD_VAR 0 11
34929: NOT
34930: OR
34931: IFFALSE 34935
// exit ;
34933: GO 35968
// weapon := 0 ;
34935: LD_ADDR_VAR 0 18
34939: PUSH
34940: LD_INT 0
34942: ST_TO_ADDR
// fac_list := [ ] ;
34943: LD_ADDR_VAR 0 17
34947: PUSH
34948: EMPTY
34949: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34950: LD_ADDR_VAR 0 6
34954: PUSH
34955: LD_VAR 0 1
34959: PPUSH
34960: CALL_OW 274
34964: PPUSH
34965: LD_VAR 0 2
34969: PPUSH
34970: LD_INT 0
34972: PPUSH
34973: CALL 32539 0 3
34977: PPUSH
34978: LD_INT 30
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PPUSH
34988: CALL_OW 72
34992: ST_TO_ADDR
// if not factories then
34993: LD_VAR 0 6
34997: NOT
34998: IFFALSE 35002
// exit ;
35000: GO 35968
// for i in factories do
35002: LD_ADDR_VAR 0 8
35006: PUSH
35007: LD_VAR 0 6
35011: PUSH
35012: FOR_IN
35013: IFFALSE 35038
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35015: LD_ADDR_VAR 0 17
35019: PUSH
35020: LD_VAR 0 17
35024: PUSH
35025: LD_VAR 0 8
35029: PPUSH
35030: CALL_OW 478
35034: UNION
35035: ST_TO_ADDR
35036: GO 35012
35038: POP
35039: POP
// if not fac_list then
35040: LD_VAR 0 17
35044: NOT
35045: IFFALSE 35049
// exit ;
35047: GO 35968
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35049: LD_ADDR_VAR 0 5
35053: PUSH
35054: LD_INT 4
35056: PUSH
35057: LD_INT 5
35059: PUSH
35060: LD_INT 9
35062: PUSH
35063: LD_INT 10
35065: PUSH
35066: LD_INT 6
35068: PUSH
35069: LD_INT 7
35071: PUSH
35072: LD_INT 11
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: LIST
35079: LIST
35080: LIST
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 27
35086: PUSH
35087: LD_INT 28
35089: PUSH
35090: LD_INT 26
35092: PUSH
35093: LD_INT 30
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 43
35104: PUSH
35105: LD_INT 44
35107: PUSH
35108: LD_INT 46
35110: PUSH
35111: LD_INT 45
35113: PUSH
35114: LD_INT 47
35116: PUSH
35117: LD_INT 49
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: PUSH
35133: LD_VAR 0 12
35137: ARRAY
35138: ST_TO_ADDR
// list := list isect fac_list ;
35139: LD_ADDR_VAR 0 5
35143: PUSH
35144: LD_VAR 0 5
35148: PUSH
35149: LD_VAR 0 17
35153: ISECT
35154: ST_TO_ADDR
// if not list then
35155: LD_VAR 0 5
35159: NOT
35160: IFFALSE 35164
// exit ;
35162: GO 35968
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35164: LD_VAR 0 12
35168: PUSH
35169: LD_INT 3
35171: EQUAL
35172: PUSH
35173: LD_INT 49
35175: PUSH
35176: LD_VAR 0 5
35180: IN
35181: AND
35182: PUSH
35183: LD_INT 31
35185: PPUSH
35186: LD_VAR 0 16
35190: PPUSH
35191: CALL_OW 321
35195: PUSH
35196: LD_INT 2
35198: EQUAL
35199: AND
35200: IFFALSE 35260
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35202: LD_INT 22
35204: PUSH
35205: LD_VAR 0 16
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 35
35216: PUSH
35217: LD_INT 49
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: PUSH
35224: LD_INT 91
35226: PUSH
35227: LD_VAR 0 1
35231: PUSH
35232: LD_INT 10
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: PPUSH
35245: CALL_OW 69
35249: NOT
35250: IFFALSE 35260
// weapon := ru_time_lapser ;
35252: LD_ADDR_VAR 0 18
35256: PUSH
35257: LD_INT 49
35259: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35260: LD_VAR 0 12
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: IN
35275: PUSH
35276: LD_INT 11
35278: PUSH
35279: LD_VAR 0 5
35283: IN
35284: PUSH
35285: LD_INT 30
35287: PUSH
35288: LD_VAR 0 5
35292: IN
35293: OR
35294: AND
35295: PUSH
35296: LD_INT 6
35298: PPUSH
35299: LD_VAR 0 16
35303: PPUSH
35304: CALL_OW 321
35308: PUSH
35309: LD_INT 2
35311: EQUAL
35312: AND
35313: IFFALSE 35478
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35315: LD_INT 22
35317: PUSH
35318: LD_VAR 0 16
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: PUSH
35330: LD_INT 35
35332: PUSH
35333: LD_INT 11
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 35
35342: PUSH
35343: LD_INT 30
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 91
35357: PUSH
35358: LD_VAR 0 1
35362: PUSH
35363: LD_INT 18
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: PPUSH
35376: CALL_OW 69
35380: NOT
35381: PUSH
35382: LD_INT 22
35384: PUSH
35385: LD_VAR 0 16
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: PUSH
35397: LD_INT 30
35399: PUSH
35400: LD_INT 32
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 30
35409: PUSH
35410: LD_INT 33
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 91
35424: PUSH
35425: LD_VAR 0 1
35429: PUSH
35430: LD_INT 12
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: LIST
35442: PUSH
35443: EMPTY
35444: LIST
35445: PPUSH
35446: CALL_OW 69
35450: PUSH
35451: LD_INT 2
35453: GREATER
35454: AND
35455: IFFALSE 35478
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35457: LD_ADDR_VAR 0 18
35461: PUSH
35462: LD_INT 11
35464: PUSH
35465: LD_INT 30
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_VAR 0 12
35476: ARRAY
35477: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35478: LD_VAR 0 18
35482: NOT
35483: PUSH
35484: LD_INT 40
35486: PPUSH
35487: LD_VAR 0 16
35491: PPUSH
35492: CALL_OW 321
35496: PUSH
35497: LD_INT 2
35499: EQUAL
35500: AND
35501: PUSH
35502: LD_INT 7
35504: PUSH
35505: LD_VAR 0 5
35509: IN
35510: PUSH
35511: LD_INT 28
35513: PUSH
35514: LD_VAR 0 5
35518: IN
35519: OR
35520: PUSH
35521: LD_INT 45
35523: PUSH
35524: LD_VAR 0 5
35528: IN
35529: OR
35530: AND
35531: IFFALSE 35785
// begin hex := GetHexInfo ( x , y ) ;
35533: LD_ADDR_VAR 0 4
35537: PUSH
35538: LD_VAR 0 10
35542: PPUSH
35543: LD_VAR 0 11
35547: PPUSH
35548: CALL_OW 546
35552: ST_TO_ADDR
// if hex [ 1 ] then
35553: LD_VAR 0 4
35557: PUSH
35558: LD_INT 1
35560: ARRAY
35561: IFFALSE 35565
// exit ;
35563: GO 35968
// height := hex [ 2 ] ;
35565: LD_ADDR_VAR 0 15
35569: PUSH
35570: LD_VAR 0 4
35574: PUSH
35575: LD_INT 2
35577: ARRAY
35578: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35579: LD_ADDR_VAR 0 14
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 2
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: LD_INT 5
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: ST_TO_ADDR
// for i in tmp do
35602: LD_ADDR_VAR 0 8
35606: PUSH
35607: LD_VAR 0 14
35611: PUSH
35612: FOR_IN
35613: IFFALSE 35783
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35615: LD_ADDR_VAR 0 9
35619: PUSH
35620: LD_VAR 0 10
35624: PPUSH
35625: LD_VAR 0 8
35629: PPUSH
35630: LD_INT 5
35632: PPUSH
35633: CALL_OW 272
35637: PUSH
35638: LD_VAR 0 11
35642: PPUSH
35643: LD_VAR 0 8
35647: PPUSH
35648: LD_INT 5
35650: PPUSH
35651: CALL_OW 273
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35660: LD_VAR 0 9
35664: PUSH
35665: LD_INT 1
35667: ARRAY
35668: PPUSH
35669: LD_VAR 0 9
35673: PUSH
35674: LD_INT 2
35676: ARRAY
35677: PPUSH
35678: CALL_OW 488
35682: IFFALSE 35781
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35684: LD_ADDR_VAR 0 4
35688: PUSH
35689: LD_VAR 0 9
35693: PUSH
35694: LD_INT 1
35696: ARRAY
35697: PPUSH
35698: LD_VAR 0 9
35702: PUSH
35703: LD_INT 2
35705: ARRAY
35706: PPUSH
35707: CALL_OW 546
35711: ST_TO_ADDR
// if hex [ 1 ] then
35712: LD_VAR 0 4
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: IFFALSE 35724
// continue ;
35722: GO 35612
// h := hex [ 2 ] ;
35724: LD_ADDR_VAR 0 13
35728: PUSH
35729: LD_VAR 0 4
35733: PUSH
35734: LD_INT 2
35736: ARRAY
35737: ST_TO_ADDR
// if h + 7 < height then
35738: LD_VAR 0 13
35742: PUSH
35743: LD_INT 7
35745: PLUS
35746: PUSH
35747: LD_VAR 0 15
35751: LESS
35752: IFFALSE 35781
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35754: LD_ADDR_VAR 0 18
35758: PUSH
35759: LD_INT 7
35761: PUSH
35762: LD_INT 28
35764: PUSH
35765: LD_INT 45
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: PUSH
35773: LD_VAR 0 12
35777: ARRAY
35778: ST_TO_ADDR
// break ;
35779: GO 35783
// end ; end ; end ;
35781: GO 35612
35783: POP
35784: POP
// end ; if not weapon then
35785: LD_VAR 0 18
35789: NOT
35790: IFFALSE 35850
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35792: LD_ADDR_VAR 0 5
35796: PUSH
35797: LD_VAR 0 5
35801: PUSH
35802: LD_INT 11
35804: PUSH
35805: LD_INT 30
35807: PUSH
35808: LD_INT 49
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: LIST
35815: DIFF
35816: ST_TO_ADDR
// if not list then
35817: LD_VAR 0 5
35821: NOT
35822: IFFALSE 35826
// exit ;
35824: GO 35968
// weapon := list [ rand ( 1 , list ) ] ;
35826: LD_ADDR_VAR 0 18
35830: PUSH
35831: LD_VAR 0 5
35835: PUSH
35836: LD_INT 1
35838: PPUSH
35839: LD_VAR 0 5
35843: PPUSH
35844: CALL_OW 12
35848: ARRAY
35849: ST_TO_ADDR
// end ; if weapon then
35850: LD_VAR 0 18
35854: IFFALSE 35968
// begin tmp := CostOfWeapon ( weapon ) ;
35856: LD_ADDR_VAR 0 14
35860: PUSH
35861: LD_VAR 0 18
35865: PPUSH
35866: CALL_OW 451
35870: ST_TO_ADDR
// j := GetBase ( tower ) ;
35871: LD_ADDR_VAR 0 9
35875: PUSH
35876: LD_VAR 0 1
35880: PPUSH
35881: CALL_OW 274
35885: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35886: LD_VAR 0 9
35890: PPUSH
35891: LD_INT 1
35893: PPUSH
35894: CALL_OW 275
35898: PUSH
35899: LD_VAR 0 14
35903: PUSH
35904: LD_INT 1
35906: ARRAY
35907: GREATEREQUAL
35908: PUSH
35909: LD_VAR 0 9
35913: PPUSH
35914: LD_INT 2
35916: PPUSH
35917: CALL_OW 275
35921: PUSH
35922: LD_VAR 0 14
35926: PUSH
35927: LD_INT 2
35929: ARRAY
35930: GREATEREQUAL
35931: AND
35932: PUSH
35933: LD_VAR 0 9
35937: PPUSH
35938: LD_INT 3
35940: PPUSH
35941: CALL_OW 275
35945: PUSH
35946: LD_VAR 0 14
35950: PUSH
35951: LD_INT 3
35953: ARRAY
35954: GREATEREQUAL
35955: AND
35956: IFFALSE 35968
// result := weapon ;
35958: LD_ADDR_VAR 0 3
35962: PUSH
35963: LD_VAR 0 18
35967: ST_TO_ADDR
// end ; end ;
35968: LD_VAR 0 3
35972: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35973: LD_INT 0
35975: PPUSH
35976: PPUSH
// result := true ;
35977: LD_ADDR_VAR 0 3
35981: PUSH
35982: LD_INT 1
35984: ST_TO_ADDR
// if array1 = array2 then
35985: LD_VAR 0 1
35989: PUSH
35990: LD_VAR 0 2
35994: EQUAL
35995: IFFALSE 36055
// begin for i = 1 to array1 do
35997: LD_ADDR_VAR 0 4
36001: PUSH
36002: DOUBLE
36003: LD_INT 1
36005: DEC
36006: ST_TO_ADDR
36007: LD_VAR 0 1
36011: PUSH
36012: FOR_TO
36013: IFFALSE 36051
// if array1 [ i ] <> array2 [ i ] then
36015: LD_VAR 0 1
36019: PUSH
36020: LD_VAR 0 4
36024: ARRAY
36025: PUSH
36026: LD_VAR 0 2
36030: PUSH
36031: LD_VAR 0 4
36035: ARRAY
36036: NONEQUAL
36037: IFFALSE 36049
// begin result := false ;
36039: LD_ADDR_VAR 0 3
36043: PUSH
36044: LD_INT 0
36046: ST_TO_ADDR
// break ;
36047: GO 36051
// end ;
36049: GO 36012
36051: POP
36052: POP
// end else
36053: GO 36063
// result := false ;
36055: LD_ADDR_VAR 0 3
36059: PUSH
36060: LD_INT 0
36062: ST_TO_ADDR
// end ;
36063: LD_VAR 0 3
36067: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36068: LD_INT 0
36070: PPUSH
36071: PPUSH
// if not array1 or not array2 then
36072: LD_VAR 0 1
36076: NOT
36077: PUSH
36078: LD_VAR 0 2
36082: NOT
36083: OR
36084: IFFALSE 36088
// exit ;
36086: GO 36152
// result := true ;
36088: LD_ADDR_VAR 0 3
36092: PUSH
36093: LD_INT 1
36095: ST_TO_ADDR
// for i = 1 to array1 do
36096: LD_ADDR_VAR 0 4
36100: PUSH
36101: DOUBLE
36102: LD_INT 1
36104: DEC
36105: ST_TO_ADDR
36106: LD_VAR 0 1
36110: PUSH
36111: FOR_TO
36112: IFFALSE 36150
// if array1 [ i ] <> array2 [ i ] then
36114: LD_VAR 0 1
36118: PUSH
36119: LD_VAR 0 4
36123: ARRAY
36124: PUSH
36125: LD_VAR 0 2
36129: PUSH
36130: LD_VAR 0 4
36134: ARRAY
36135: NONEQUAL
36136: IFFALSE 36148
// begin result := false ;
36138: LD_ADDR_VAR 0 3
36142: PUSH
36143: LD_INT 0
36145: ST_TO_ADDR
// break ;
36146: GO 36150
// end ;
36148: GO 36111
36150: POP
36151: POP
// end ;
36152: LD_VAR 0 3
36156: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36157: LD_INT 0
36159: PPUSH
36160: PPUSH
36161: PPUSH
// pom := GetBase ( fac ) ;
36162: LD_ADDR_VAR 0 5
36166: PUSH
36167: LD_VAR 0 1
36171: PPUSH
36172: CALL_OW 274
36176: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36177: LD_ADDR_VAR 0 4
36181: PUSH
36182: LD_VAR 0 2
36186: PUSH
36187: LD_INT 1
36189: ARRAY
36190: PPUSH
36191: LD_VAR 0 2
36195: PUSH
36196: LD_INT 2
36198: ARRAY
36199: PPUSH
36200: LD_VAR 0 2
36204: PUSH
36205: LD_INT 3
36207: ARRAY
36208: PPUSH
36209: LD_VAR 0 2
36213: PUSH
36214: LD_INT 4
36216: ARRAY
36217: PPUSH
36218: CALL_OW 449
36222: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36223: LD_ADDR_VAR 0 3
36227: PUSH
36228: LD_VAR 0 5
36232: PPUSH
36233: LD_INT 1
36235: PPUSH
36236: CALL_OW 275
36240: PUSH
36241: LD_VAR 0 4
36245: PUSH
36246: LD_INT 1
36248: ARRAY
36249: GREATEREQUAL
36250: PUSH
36251: LD_VAR 0 5
36255: PPUSH
36256: LD_INT 2
36258: PPUSH
36259: CALL_OW 275
36263: PUSH
36264: LD_VAR 0 4
36268: PUSH
36269: LD_INT 2
36271: ARRAY
36272: GREATEREQUAL
36273: AND
36274: PUSH
36275: LD_VAR 0 5
36279: PPUSH
36280: LD_INT 3
36282: PPUSH
36283: CALL_OW 275
36287: PUSH
36288: LD_VAR 0 4
36292: PUSH
36293: LD_INT 3
36295: ARRAY
36296: GREATEREQUAL
36297: AND
36298: ST_TO_ADDR
// end ;
36299: LD_VAR 0 3
36303: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36304: LD_INT 0
36306: PPUSH
36307: PPUSH
36308: PPUSH
36309: PPUSH
// pom := GetBase ( building ) ;
36310: LD_ADDR_VAR 0 3
36314: PUSH
36315: LD_VAR 0 1
36319: PPUSH
36320: CALL_OW 274
36324: ST_TO_ADDR
// if not pom then
36325: LD_VAR 0 3
36329: NOT
36330: IFFALSE 36334
// exit ;
36332: GO 36504
// btype := GetBType ( building ) ;
36334: LD_ADDR_VAR 0 5
36338: PUSH
36339: LD_VAR 0 1
36343: PPUSH
36344: CALL_OW 266
36348: ST_TO_ADDR
// if btype = b_armoury then
36349: LD_VAR 0 5
36353: PUSH
36354: LD_INT 4
36356: EQUAL
36357: IFFALSE 36367
// btype := b_barracks ;
36359: LD_ADDR_VAR 0 5
36363: PUSH
36364: LD_INT 5
36366: ST_TO_ADDR
// if btype = b_depot then
36367: LD_VAR 0 5
36371: PUSH
36372: LD_INT 0
36374: EQUAL
36375: IFFALSE 36385
// btype := b_warehouse ;
36377: LD_ADDR_VAR 0 5
36381: PUSH
36382: LD_INT 1
36384: ST_TO_ADDR
// if btype = b_workshop then
36385: LD_VAR 0 5
36389: PUSH
36390: LD_INT 2
36392: EQUAL
36393: IFFALSE 36403
// btype := b_factory ;
36395: LD_ADDR_VAR 0 5
36399: PUSH
36400: LD_INT 3
36402: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36403: LD_ADDR_VAR 0 4
36407: PUSH
36408: LD_VAR 0 5
36412: PPUSH
36413: LD_VAR 0 1
36417: PPUSH
36418: CALL_OW 248
36422: PPUSH
36423: CALL_OW 450
36427: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36428: LD_ADDR_VAR 0 2
36432: PUSH
36433: LD_VAR 0 3
36437: PPUSH
36438: LD_INT 1
36440: PPUSH
36441: CALL_OW 275
36445: PUSH
36446: LD_VAR 0 4
36450: PUSH
36451: LD_INT 1
36453: ARRAY
36454: GREATEREQUAL
36455: PUSH
36456: LD_VAR 0 3
36460: PPUSH
36461: LD_INT 2
36463: PPUSH
36464: CALL_OW 275
36468: PUSH
36469: LD_VAR 0 4
36473: PUSH
36474: LD_INT 2
36476: ARRAY
36477: GREATEREQUAL
36478: AND
36479: PUSH
36480: LD_VAR 0 3
36484: PPUSH
36485: LD_INT 3
36487: PPUSH
36488: CALL_OW 275
36492: PUSH
36493: LD_VAR 0 4
36497: PUSH
36498: LD_INT 3
36500: ARRAY
36501: GREATEREQUAL
36502: AND
36503: ST_TO_ADDR
// end ;
36504: LD_VAR 0 2
36508: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36509: LD_INT 0
36511: PPUSH
36512: PPUSH
36513: PPUSH
// pom := GetBase ( building ) ;
36514: LD_ADDR_VAR 0 4
36518: PUSH
36519: LD_VAR 0 1
36523: PPUSH
36524: CALL_OW 274
36528: ST_TO_ADDR
// if not pom then
36529: LD_VAR 0 4
36533: NOT
36534: IFFALSE 36538
// exit ;
36536: GO 36639
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36538: LD_ADDR_VAR 0 5
36542: PUSH
36543: LD_VAR 0 2
36547: PPUSH
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL_OW 248
36557: PPUSH
36558: CALL_OW 450
36562: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36563: LD_ADDR_VAR 0 3
36567: PUSH
36568: LD_VAR 0 4
36572: PPUSH
36573: LD_INT 1
36575: PPUSH
36576: CALL_OW 275
36580: PUSH
36581: LD_VAR 0 5
36585: PUSH
36586: LD_INT 1
36588: ARRAY
36589: GREATEREQUAL
36590: PUSH
36591: LD_VAR 0 4
36595: PPUSH
36596: LD_INT 2
36598: PPUSH
36599: CALL_OW 275
36603: PUSH
36604: LD_VAR 0 5
36608: PUSH
36609: LD_INT 2
36611: ARRAY
36612: GREATEREQUAL
36613: AND
36614: PUSH
36615: LD_VAR 0 4
36619: PPUSH
36620: LD_INT 3
36622: PPUSH
36623: CALL_OW 275
36627: PUSH
36628: LD_VAR 0 5
36632: PUSH
36633: LD_INT 3
36635: ARRAY
36636: GREATEREQUAL
36637: AND
36638: ST_TO_ADDR
// end ;
36639: LD_VAR 0 3
36643: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36644: LD_INT 0
36646: PPUSH
36647: PPUSH
36648: PPUSH
36649: PPUSH
36650: PPUSH
36651: PPUSH
36652: PPUSH
36653: PPUSH
36654: PPUSH
36655: PPUSH
36656: PPUSH
// result := false ;
36657: LD_ADDR_VAR 0 8
36661: PUSH
36662: LD_INT 0
36664: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36665: LD_VAR 0 5
36669: NOT
36670: PUSH
36671: LD_VAR 0 1
36675: NOT
36676: OR
36677: PUSH
36678: LD_VAR 0 2
36682: NOT
36683: OR
36684: PUSH
36685: LD_VAR 0 3
36689: NOT
36690: OR
36691: IFFALSE 36695
// exit ;
36693: GO 37509
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36695: LD_ADDR_VAR 0 14
36699: PUSH
36700: LD_VAR 0 1
36704: PPUSH
36705: LD_VAR 0 2
36709: PPUSH
36710: LD_VAR 0 3
36714: PPUSH
36715: LD_VAR 0 4
36719: PPUSH
36720: LD_VAR 0 5
36724: PUSH
36725: LD_INT 1
36727: ARRAY
36728: PPUSH
36729: CALL_OW 248
36733: PPUSH
36734: LD_INT 0
36736: PPUSH
36737: CALL 38742 0 6
36741: ST_TO_ADDR
// if not hexes then
36742: LD_VAR 0 14
36746: NOT
36747: IFFALSE 36751
// exit ;
36749: GO 37509
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36751: LD_ADDR_VAR 0 17
36755: PUSH
36756: LD_VAR 0 5
36760: PPUSH
36761: LD_INT 22
36763: PUSH
36764: LD_VAR 0 13
36768: PPUSH
36769: CALL_OW 255
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 2
36780: PUSH
36781: LD_INT 30
36783: PUSH
36784: LD_INT 0
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 30
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: LIST
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PPUSH
36810: CALL_OW 72
36814: ST_TO_ADDR
// for i = 1 to hexes do
36815: LD_ADDR_VAR 0 9
36819: PUSH
36820: DOUBLE
36821: LD_INT 1
36823: DEC
36824: ST_TO_ADDR
36825: LD_VAR 0 14
36829: PUSH
36830: FOR_TO
36831: IFFALSE 37507
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36833: LD_ADDR_VAR 0 13
36837: PUSH
36838: LD_VAR 0 14
36842: PUSH
36843: LD_VAR 0 9
36847: ARRAY
36848: PUSH
36849: LD_INT 1
36851: ARRAY
36852: PPUSH
36853: LD_VAR 0 14
36857: PUSH
36858: LD_VAR 0 9
36862: ARRAY
36863: PUSH
36864: LD_INT 2
36866: ARRAY
36867: PPUSH
36868: CALL_OW 428
36872: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36873: LD_VAR 0 14
36877: PUSH
36878: LD_VAR 0 9
36882: ARRAY
36883: PUSH
36884: LD_INT 1
36886: ARRAY
36887: PPUSH
36888: LD_VAR 0 14
36892: PUSH
36893: LD_VAR 0 9
36897: ARRAY
36898: PUSH
36899: LD_INT 2
36901: ARRAY
36902: PPUSH
36903: CALL_OW 351
36907: PUSH
36908: LD_VAR 0 14
36912: PUSH
36913: LD_VAR 0 9
36917: ARRAY
36918: PUSH
36919: LD_INT 1
36921: ARRAY
36922: PPUSH
36923: LD_VAR 0 14
36927: PUSH
36928: LD_VAR 0 9
36932: ARRAY
36933: PUSH
36934: LD_INT 2
36936: ARRAY
36937: PPUSH
36938: CALL_OW 488
36942: NOT
36943: OR
36944: PUSH
36945: LD_VAR 0 13
36949: PPUSH
36950: CALL_OW 247
36954: PUSH
36955: LD_INT 3
36957: EQUAL
36958: OR
36959: IFFALSE 36965
// exit ;
36961: POP
36962: POP
36963: GO 37509
// if not tmp then
36965: LD_VAR 0 13
36969: NOT
36970: IFFALSE 36974
// continue ;
36972: GO 36830
// result := true ;
36974: LD_ADDR_VAR 0 8
36978: PUSH
36979: LD_INT 1
36981: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36982: LD_VAR 0 6
36986: PUSH
36987: LD_VAR 0 13
36991: PPUSH
36992: CALL_OW 247
36996: PUSH
36997: LD_INT 2
36999: EQUAL
37000: AND
37001: PUSH
37002: LD_VAR 0 13
37006: PPUSH
37007: CALL_OW 263
37011: PUSH
37012: LD_INT 1
37014: EQUAL
37015: AND
37016: IFFALSE 37180
// begin if IsDrivenBy ( tmp ) then
37018: LD_VAR 0 13
37022: PPUSH
37023: CALL_OW 311
37027: IFFALSE 37031
// continue ;
37029: GO 36830
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37031: LD_VAR 0 6
37035: PPUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 60
37041: PUSH
37042: EMPTY
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 3
37051: PUSH
37052: LD_INT 55
37054: PUSH
37055: EMPTY
37056: LIST
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: EMPTY
37063: LIST
37064: LIST
37065: PPUSH
37066: CALL_OW 72
37070: IFFALSE 37178
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37072: LD_ADDR_VAR 0 18
37076: PUSH
37077: LD_VAR 0 6
37081: PPUSH
37082: LD_INT 3
37084: PUSH
37085: LD_INT 60
37087: PUSH
37088: EMPTY
37089: LIST
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 3
37097: PUSH
37098: LD_INT 55
37100: PUSH
37101: EMPTY
37102: LIST
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PPUSH
37112: CALL_OW 72
37116: PUSH
37117: LD_INT 1
37119: ARRAY
37120: ST_TO_ADDR
// if IsInUnit ( driver ) then
37121: LD_VAR 0 18
37125: PPUSH
37126: CALL_OW 310
37130: IFFALSE 37141
// ComExit ( driver ) ;
37132: LD_VAR 0 18
37136: PPUSH
37137: CALL 62503 0 1
// AddComEnterUnit ( driver , tmp ) ;
37141: LD_VAR 0 18
37145: PPUSH
37146: LD_VAR 0 13
37150: PPUSH
37151: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37155: LD_VAR 0 18
37159: PPUSH
37160: LD_VAR 0 7
37164: PPUSH
37165: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37169: LD_VAR 0 18
37173: PPUSH
37174: CALL_OW 181
// end ; continue ;
37178: GO 36830
// end ; if not cleaners or not tmp in cleaners then
37180: LD_VAR 0 6
37184: NOT
37185: PUSH
37186: LD_VAR 0 13
37190: PUSH
37191: LD_VAR 0 6
37195: IN
37196: NOT
37197: OR
37198: IFFALSE 37505
// begin if dep then
37200: LD_VAR 0 17
37204: IFFALSE 37340
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37206: LD_ADDR_VAR 0 16
37210: PUSH
37211: LD_VAR 0 17
37215: PUSH
37216: LD_INT 1
37218: ARRAY
37219: PPUSH
37220: CALL_OW 250
37224: PPUSH
37225: LD_VAR 0 17
37229: PUSH
37230: LD_INT 1
37232: ARRAY
37233: PPUSH
37234: CALL_OW 254
37238: PPUSH
37239: LD_INT 5
37241: PPUSH
37242: CALL_OW 272
37246: PUSH
37247: LD_VAR 0 17
37251: PUSH
37252: LD_INT 1
37254: ARRAY
37255: PPUSH
37256: CALL_OW 251
37260: PPUSH
37261: LD_VAR 0 17
37265: PUSH
37266: LD_INT 1
37268: ARRAY
37269: PPUSH
37270: CALL_OW 254
37274: PPUSH
37275: LD_INT 5
37277: PPUSH
37278: CALL_OW 273
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37287: LD_VAR 0 16
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: LD_VAR 0 16
37300: PUSH
37301: LD_INT 2
37303: ARRAY
37304: PPUSH
37305: CALL_OW 488
37309: IFFALSE 37340
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37311: LD_VAR 0 13
37315: PPUSH
37316: LD_VAR 0 16
37320: PUSH
37321: LD_INT 1
37323: ARRAY
37324: PPUSH
37325: LD_VAR 0 16
37329: PUSH
37330: LD_INT 2
37332: ARRAY
37333: PPUSH
37334: CALL_OW 111
// continue ;
37338: GO 36830
// end ; end ; r := GetDir ( tmp ) ;
37340: LD_ADDR_VAR 0 15
37344: PUSH
37345: LD_VAR 0 13
37349: PPUSH
37350: CALL_OW 254
37354: ST_TO_ADDR
// if r = 5 then
37355: LD_VAR 0 15
37359: PUSH
37360: LD_INT 5
37362: EQUAL
37363: IFFALSE 37373
// r := 0 ;
37365: LD_ADDR_VAR 0 15
37369: PUSH
37370: LD_INT 0
37372: ST_TO_ADDR
// for j = r to 5 do
37373: LD_ADDR_VAR 0 10
37377: PUSH
37378: DOUBLE
37379: LD_VAR 0 15
37383: DEC
37384: ST_TO_ADDR
37385: LD_INT 5
37387: PUSH
37388: FOR_TO
37389: IFFALSE 37503
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37391: LD_ADDR_VAR 0 11
37395: PUSH
37396: LD_VAR 0 13
37400: PPUSH
37401: CALL_OW 250
37405: PPUSH
37406: LD_VAR 0 10
37410: PPUSH
37411: LD_INT 2
37413: PPUSH
37414: CALL_OW 272
37418: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37419: LD_ADDR_VAR 0 12
37423: PUSH
37424: LD_VAR 0 13
37428: PPUSH
37429: CALL_OW 251
37433: PPUSH
37434: LD_VAR 0 10
37438: PPUSH
37439: LD_INT 2
37441: PPUSH
37442: CALL_OW 273
37446: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37447: LD_VAR 0 11
37451: PPUSH
37452: LD_VAR 0 12
37456: PPUSH
37457: CALL_OW 488
37461: PUSH
37462: LD_VAR 0 11
37466: PPUSH
37467: LD_VAR 0 12
37471: PPUSH
37472: CALL_OW 428
37476: NOT
37477: AND
37478: IFFALSE 37501
// begin ComMoveXY ( tmp , _x , _y ) ;
37480: LD_VAR 0 13
37484: PPUSH
37485: LD_VAR 0 11
37489: PPUSH
37490: LD_VAR 0 12
37494: PPUSH
37495: CALL_OW 111
// break ;
37499: GO 37503
// end ; end ;
37501: GO 37388
37503: POP
37504: POP
// end ; end ;
37505: GO 36830
37507: POP
37508: POP
// end ;
37509: LD_VAR 0 8
37513: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37514: LD_INT 0
37516: PPUSH
// result := true ;
37517: LD_ADDR_VAR 0 3
37521: PUSH
37522: LD_INT 1
37524: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37525: LD_VAR 0 2
37529: PUSH
37530: LD_INT 24
37532: DOUBLE
37533: EQUAL
37534: IFTRUE 37544
37536: LD_INT 33
37538: DOUBLE
37539: EQUAL
37540: IFTRUE 37544
37542: GO 37569
37544: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37545: LD_ADDR_VAR 0 3
37549: PUSH
37550: LD_INT 32
37552: PPUSH
37553: LD_VAR 0 1
37557: PPUSH
37558: CALL_OW 321
37562: PUSH
37563: LD_INT 2
37565: EQUAL
37566: ST_TO_ADDR
37567: GO 37885
37569: LD_INT 20
37571: DOUBLE
37572: EQUAL
37573: IFTRUE 37577
37575: GO 37602
37577: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37578: LD_ADDR_VAR 0 3
37582: PUSH
37583: LD_INT 6
37585: PPUSH
37586: LD_VAR 0 1
37590: PPUSH
37591: CALL_OW 321
37595: PUSH
37596: LD_INT 2
37598: EQUAL
37599: ST_TO_ADDR
37600: GO 37885
37602: LD_INT 22
37604: DOUBLE
37605: EQUAL
37606: IFTRUE 37616
37608: LD_INT 36
37610: DOUBLE
37611: EQUAL
37612: IFTRUE 37616
37614: GO 37641
37616: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37617: LD_ADDR_VAR 0 3
37621: PUSH
37622: LD_INT 15
37624: PPUSH
37625: LD_VAR 0 1
37629: PPUSH
37630: CALL_OW 321
37634: PUSH
37635: LD_INT 2
37637: EQUAL
37638: ST_TO_ADDR
37639: GO 37885
37641: LD_INT 30
37643: DOUBLE
37644: EQUAL
37645: IFTRUE 37649
37647: GO 37674
37649: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37650: LD_ADDR_VAR 0 3
37654: PUSH
37655: LD_INT 20
37657: PPUSH
37658: LD_VAR 0 1
37662: PPUSH
37663: CALL_OW 321
37667: PUSH
37668: LD_INT 2
37670: EQUAL
37671: ST_TO_ADDR
37672: GO 37885
37674: LD_INT 28
37676: DOUBLE
37677: EQUAL
37678: IFTRUE 37688
37680: LD_INT 21
37682: DOUBLE
37683: EQUAL
37684: IFTRUE 37688
37686: GO 37713
37688: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37689: LD_ADDR_VAR 0 3
37693: PUSH
37694: LD_INT 21
37696: PPUSH
37697: LD_VAR 0 1
37701: PPUSH
37702: CALL_OW 321
37706: PUSH
37707: LD_INT 2
37709: EQUAL
37710: ST_TO_ADDR
37711: GO 37885
37713: LD_INT 16
37715: DOUBLE
37716: EQUAL
37717: IFTRUE 37721
37719: GO 37746
37721: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37722: LD_ADDR_VAR 0 3
37726: PUSH
37727: LD_INT 84
37729: PPUSH
37730: LD_VAR 0 1
37734: PPUSH
37735: CALL_OW 321
37739: PUSH
37740: LD_INT 2
37742: EQUAL
37743: ST_TO_ADDR
37744: GO 37885
37746: LD_INT 19
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37760
37752: LD_INT 23
37754: DOUBLE
37755: EQUAL
37756: IFTRUE 37760
37758: GO 37785
37760: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37761: LD_ADDR_VAR 0 3
37765: PUSH
37766: LD_INT 83
37768: PPUSH
37769: LD_VAR 0 1
37773: PPUSH
37774: CALL_OW 321
37778: PUSH
37779: LD_INT 2
37781: EQUAL
37782: ST_TO_ADDR
37783: GO 37885
37785: LD_INT 17
37787: DOUBLE
37788: EQUAL
37789: IFTRUE 37793
37791: GO 37818
37793: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37794: LD_ADDR_VAR 0 3
37798: PUSH
37799: LD_INT 39
37801: PPUSH
37802: LD_VAR 0 1
37806: PPUSH
37807: CALL_OW 321
37811: PUSH
37812: LD_INT 2
37814: EQUAL
37815: ST_TO_ADDR
37816: GO 37885
37818: LD_INT 18
37820: DOUBLE
37821: EQUAL
37822: IFTRUE 37826
37824: GO 37851
37826: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37827: LD_ADDR_VAR 0 3
37831: PUSH
37832: LD_INT 40
37834: PPUSH
37835: LD_VAR 0 1
37839: PPUSH
37840: CALL_OW 321
37844: PUSH
37845: LD_INT 2
37847: EQUAL
37848: ST_TO_ADDR
37849: GO 37885
37851: LD_INT 27
37853: DOUBLE
37854: EQUAL
37855: IFTRUE 37859
37857: GO 37884
37859: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_INT 35
37867: PPUSH
37868: LD_VAR 0 1
37872: PPUSH
37873: CALL_OW 321
37877: PUSH
37878: LD_INT 2
37880: EQUAL
37881: ST_TO_ADDR
37882: GO 37885
37884: POP
// end ;
37885: LD_VAR 0 3
37889: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37890: LD_INT 0
37892: PPUSH
37893: PPUSH
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
37900: PPUSH
37901: PPUSH
37902: PPUSH
// result := false ;
37903: LD_ADDR_VAR 0 6
37907: PUSH
37908: LD_INT 0
37910: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37911: LD_VAR 0 1
37915: NOT
37916: PUSH
37917: LD_VAR 0 1
37921: PPUSH
37922: CALL_OW 266
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: IN
37937: NOT
37938: OR
37939: PUSH
37940: LD_VAR 0 2
37944: NOT
37945: OR
37946: PUSH
37947: LD_VAR 0 5
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: LD_INT 3
37963: PUSH
37964: LD_INT 4
37966: PUSH
37967: LD_INT 5
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: IN
37978: NOT
37979: OR
37980: PUSH
37981: LD_VAR 0 3
37985: PPUSH
37986: LD_VAR 0 4
37990: PPUSH
37991: CALL_OW 488
37995: NOT
37996: OR
37997: IFFALSE 38001
// exit ;
37999: GO 38737
// side := GetSide ( depot ) ;
38001: LD_ADDR_VAR 0 9
38005: PUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 255
38015: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38016: LD_VAR 0 9
38020: PPUSH
38021: LD_VAR 0 2
38025: PPUSH
38026: CALL 37514 0 2
38030: NOT
38031: IFFALSE 38035
// exit ;
38033: GO 38737
// pom := GetBase ( depot ) ;
38035: LD_ADDR_VAR 0 10
38039: PUSH
38040: LD_VAR 0 1
38044: PPUSH
38045: CALL_OW 274
38049: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38050: LD_ADDR_VAR 0 11
38054: PUSH
38055: LD_VAR 0 2
38059: PPUSH
38060: LD_VAR 0 1
38064: PPUSH
38065: CALL_OW 248
38069: PPUSH
38070: CALL_OW 450
38074: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38075: LD_VAR 0 10
38079: PPUSH
38080: LD_INT 1
38082: PPUSH
38083: CALL_OW 275
38087: PUSH
38088: LD_VAR 0 11
38092: PUSH
38093: LD_INT 1
38095: ARRAY
38096: GREATEREQUAL
38097: PUSH
38098: LD_VAR 0 10
38102: PPUSH
38103: LD_INT 2
38105: PPUSH
38106: CALL_OW 275
38110: PUSH
38111: LD_VAR 0 11
38115: PUSH
38116: LD_INT 2
38118: ARRAY
38119: GREATEREQUAL
38120: AND
38121: PUSH
38122: LD_VAR 0 10
38126: PPUSH
38127: LD_INT 3
38129: PPUSH
38130: CALL_OW 275
38134: PUSH
38135: LD_VAR 0 11
38139: PUSH
38140: LD_INT 3
38142: ARRAY
38143: GREATEREQUAL
38144: AND
38145: NOT
38146: IFFALSE 38150
// exit ;
38148: GO 38737
// if GetBType ( depot ) = b_depot then
38150: LD_VAR 0 1
38154: PPUSH
38155: CALL_OW 266
38159: PUSH
38160: LD_INT 0
38162: EQUAL
38163: IFFALSE 38175
// dist := 28 else
38165: LD_ADDR_VAR 0 14
38169: PUSH
38170: LD_INT 28
38172: ST_TO_ADDR
38173: GO 38183
// dist := 36 ;
38175: LD_ADDR_VAR 0 14
38179: PUSH
38180: LD_INT 36
38182: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38183: LD_VAR 0 1
38187: PPUSH
38188: LD_VAR 0 3
38192: PPUSH
38193: LD_VAR 0 4
38197: PPUSH
38198: CALL_OW 297
38202: PUSH
38203: LD_VAR 0 14
38207: GREATER
38208: IFFALSE 38212
// exit ;
38210: GO 38737
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38212: LD_ADDR_VAR 0 12
38216: PUSH
38217: LD_VAR 0 2
38221: PPUSH
38222: LD_VAR 0 3
38226: PPUSH
38227: LD_VAR 0 4
38231: PPUSH
38232: LD_VAR 0 5
38236: PPUSH
38237: LD_VAR 0 1
38241: PPUSH
38242: CALL_OW 248
38246: PPUSH
38247: LD_INT 0
38249: PPUSH
38250: CALL 38742 0 6
38254: ST_TO_ADDR
// if not hexes then
38255: LD_VAR 0 12
38259: NOT
38260: IFFALSE 38264
// exit ;
38262: GO 38737
// hex := GetHexInfo ( x , y ) ;
38264: LD_ADDR_VAR 0 15
38268: PUSH
38269: LD_VAR 0 3
38273: PPUSH
38274: LD_VAR 0 4
38278: PPUSH
38279: CALL_OW 546
38283: ST_TO_ADDR
// if hex [ 1 ] then
38284: LD_VAR 0 15
38288: PUSH
38289: LD_INT 1
38291: ARRAY
38292: IFFALSE 38296
// exit ;
38294: GO 38737
// height := hex [ 2 ] ;
38296: LD_ADDR_VAR 0 13
38300: PUSH
38301: LD_VAR 0 15
38305: PUSH
38306: LD_INT 2
38308: ARRAY
38309: ST_TO_ADDR
// for i = 1 to hexes do
38310: LD_ADDR_VAR 0 7
38314: PUSH
38315: DOUBLE
38316: LD_INT 1
38318: DEC
38319: ST_TO_ADDR
38320: LD_VAR 0 12
38324: PUSH
38325: FOR_TO
38326: IFFALSE 38656
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38328: LD_VAR 0 12
38332: PUSH
38333: LD_VAR 0 7
38337: ARRAY
38338: PUSH
38339: LD_INT 1
38341: ARRAY
38342: PPUSH
38343: LD_VAR 0 12
38347: PUSH
38348: LD_VAR 0 7
38352: ARRAY
38353: PUSH
38354: LD_INT 2
38356: ARRAY
38357: PPUSH
38358: CALL_OW 488
38362: NOT
38363: PUSH
38364: LD_VAR 0 12
38368: PUSH
38369: LD_VAR 0 7
38373: ARRAY
38374: PUSH
38375: LD_INT 1
38377: ARRAY
38378: PPUSH
38379: LD_VAR 0 12
38383: PUSH
38384: LD_VAR 0 7
38388: ARRAY
38389: PUSH
38390: LD_INT 2
38392: ARRAY
38393: PPUSH
38394: CALL_OW 428
38398: PUSH
38399: LD_INT 0
38401: GREATER
38402: OR
38403: PUSH
38404: LD_VAR 0 12
38408: PUSH
38409: LD_VAR 0 7
38413: ARRAY
38414: PUSH
38415: LD_INT 1
38417: ARRAY
38418: PPUSH
38419: LD_VAR 0 12
38423: PUSH
38424: LD_VAR 0 7
38428: ARRAY
38429: PUSH
38430: LD_INT 2
38432: ARRAY
38433: PPUSH
38434: CALL_OW 351
38438: OR
38439: IFFALSE 38445
// exit ;
38441: POP
38442: POP
38443: GO 38737
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38445: LD_ADDR_VAR 0 8
38449: PUSH
38450: LD_VAR 0 12
38454: PUSH
38455: LD_VAR 0 7
38459: ARRAY
38460: PUSH
38461: LD_INT 1
38463: ARRAY
38464: PPUSH
38465: LD_VAR 0 12
38469: PUSH
38470: LD_VAR 0 7
38474: ARRAY
38475: PUSH
38476: LD_INT 2
38478: ARRAY
38479: PPUSH
38480: CALL_OW 546
38484: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38485: LD_VAR 0 8
38489: PUSH
38490: LD_INT 1
38492: ARRAY
38493: PUSH
38494: LD_VAR 0 8
38498: PUSH
38499: LD_INT 2
38501: ARRAY
38502: PUSH
38503: LD_VAR 0 13
38507: PUSH
38508: LD_INT 2
38510: PLUS
38511: GREATER
38512: OR
38513: PUSH
38514: LD_VAR 0 8
38518: PUSH
38519: LD_INT 2
38521: ARRAY
38522: PUSH
38523: LD_VAR 0 13
38527: PUSH
38528: LD_INT 2
38530: MINUS
38531: LESS
38532: OR
38533: PUSH
38534: LD_VAR 0 8
38538: PUSH
38539: LD_INT 3
38541: ARRAY
38542: PUSH
38543: LD_INT 0
38545: PUSH
38546: LD_INT 8
38548: PUSH
38549: LD_INT 9
38551: PUSH
38552: LD_INT 10
38554: PUSH
38555: LD_INT 11
38557: PUSH
38558: LD_INT 12
38560: PUSH
38561: LD_INT 13
38563: PUSH
38564: LD_INT 16
38566: PUSH
38567: LD_INT 17
38569: PUSH
38570: LD_INT 18
38572: PUSH
38573: LD_INT 19
38575: PUSH
38576: LD_INT 20
38578: PUSH
38579: LD_INT 21
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: IN
38597: NOT
38598: OR
38599: PUSH
38600: LD_VAR 0 8
38604: PUSH
38605: LD_INT 5
38607: ARRAY
38608: NOT
38609: OR
38610: PUSH
38611: LD_VAR 0 8
38615: PUSH
38616: LD_INT 6
38618: ARRAY
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 7
38628: PUSH
38629: LD_INT 9
38631: PUSH
38632: LD_INT 10
38634: PUSH
38635: LD_INT 11
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: IN
38646: NOT
38647: OR
38648: IFFALSE 38654
// exit ;
38650: POP
38651: POP
38652: GO 38737
// end ;
38654: GO 38325
38656: POP
38657: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38658: LD_VAR 0 9
38662: PPUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: LD_VAR 0 4
38672: PPUSH
38673: LD_INT 20
38675: PPUSH
38676: CALL 30689 0 4
38680: PUSH
38681: LD_INT 4
38683: ARRAY
38684: IFFALSE 38688
// exit ;
38686: GO 38737
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38688: LD_VAR 0 2
38692: PUSH
38693: LD_INT 29
38695: PUSH
38696: LD_INT 30
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: IN
38703: PUSH
38704: LD_VAR 0 3
38708: PPUSH
38709: LD_VAR 0 4
38713: PPUSH
38714: LD_VAR 0 9
38718: PPUSH
38719: CALL_OW 440
38723: NOT
38724: AND
38725: IFFALSE 38729
// exit ;
38727: GO 38737
// result := true ;
38729: LD_ADDR_VAR 0 6
38733: PUSH
38734: LD_INT 1
38736: ST_TO_ADDR
// end ;
38737: LD_VAR 0 6
38741: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38742: LD_INT 0
38744: PPUSH
38745: PPUSH
38746: PPUSH
38747: PPUSH
38748: PPUSH
38749: PPUSH
38750: PPUSH
38751: PPUSH
38752: PPUSH
38753: PPUSH
38754: PPUSH
38755: PPUSH
38756: PPUSH
38757: PPUSH
38758: PPUSH
38759: PPUSH
38760: PPUSH
38761: PPUSH
38762: PPUSH
38763: PPUSH
38764: PPUSH
38765: PPUSH
38766: PPUSH
38767: PPUSH
38768: PPUSH
38769: PPUSH
38770: PPUSH
38771: PPUSH
38772: PPUSH
38773: PPUSH
38774: PPUSH
38775: PPUSH
38776: PPUSH
38777: PPUSH
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
38790: PPUSH
38791: PPUSH
38792: PPUSH
38793: PPUSH
38794: PPUSH
38795: PPUSH
38796: PPUSH
38797: PPUSH
38798: PPUSH
38799: PPUSH
38800: PPUSH
38801: PPUSH
// result = [ ] ;
38802: LD_ADDR_VAR 0 7
38806: PUSH
38807: EMPTY
38808: ST_TO_ADDR
// temp_list = [ ] ;
38809: LD_ADDR_VAR 0 9
38813: PUSH
38814: EMPTY
38815: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38816: LD_VAR 0 4
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 4
38835: PUSH
38836: LD_INT 5
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: IN
38847: NOT
38848: PUSH
38849: LD_VAR 0 1
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: IN
38864: PUSH
38865: LD_VAR 0 5
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 3
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: IN
38884: NOT
38885: AND
38886: OR
38887: IFFALSE 38891
// exit ;
38889: GO 57282
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38891: LD_VAR 0 1
38895: PUSH
38896: LD_INT 6
38898: PUSH
38899: LD_INT 7
38901: PUSH
38902: LD_INT 8
38904: PUSH
38905: LD_INT 13
38907: PUSH
38908: LD_INT 12
38910: PUSH
38911: LD_INT 15
38913: PUSH
38914: LD_INT 11
38916: PUSH
38917: LD_INT 14
38919: PUSH
38920: LD_INT 10
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: IN
38934: IFFALSE 38944
// btype = b_lab ;
38936: LD_ADDR_VAR 0 1
38940: PUSH
38941: LD_INT 6
38943: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38944: LD_VAR 0 6
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: LD_INT 2
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: IN
38963: NOT
38964: PUSH
38965: LD_VAR 0 1
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: LD_INT 1
38975: PUSH
38976: LD_INT 2
38978: PUSH
38979: LD_INT 3
38981: PUSH
38982: LD_INT 6
38984: PUSH
38985: LD_INT 36
38987: PUSH
38988: LD_INT 4
38990: PUSH
38991: LD_INT 5
38993: PUSH
38994: LD_INT 31
38996: PUSH
38997: LD_INT 32
38999: PUSH
39000: LD_INT 33
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: IN
39016: NOT
39017: PUSH
39018: LD_VAR 0 6
39022: PUSH
39023: LD_INT 1
39025: EQUAL
39026: AND
39027: OR
39028: PUSH
39029: LD_VAR 0 1
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: IN
39044: NOT
39045: PUSH
39046: LD_VAR 0 6
39050: PUSH
39051: LD_INT 2
39053: EQUAL
39054: AND
39055: OR
39056: IFFALSE 39066
// mode = 0 ;
39058: LD_ADDR_VAR 0 6
39062: PUSH
39063: LD_INT 0
39065: ST_TO_ADDR
// case mode of 0 :
39066: LD_VAR 0 6
39070: PUSH
39071: LD_INT 0
39073: DOUBLE
39074: EQUAL
39075: IFTRUE 39079
39077: GO 50532
39079: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39080: LD_ADDR_VAR 0 11
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: PUSH
39095: LD_INT 0
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 1
39108: PUSH
39109: LD_INT 0
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: PUSH
39119: LD_INT 1
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 0
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: NEG
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 1
39149: NEG
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: NEG
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: LD_INT 1
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: LD_INT 1
39195: PUSH
39196: LD_INT 2
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: LD_INT 2
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 1
39215: NEG
39216: PUSH
39217: LD_INT 1
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 1
39226: PUSH
39227: LD_INT 3
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 3
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: LD_INT 2
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39273: LD_ADDR_VAR 0 12
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: LD_INT 1
39293: NEG
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 0
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 1
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 0
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: LD_INT 0
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 1
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: NEG
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: NEG
39397: PUSH
39398: LD_INT 0
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 2
39407: NEG
39408: PUSH
39409: LD_INT 1
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 2
39419: NEG
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: NEG
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 3
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39469: LD_ADDR_VAR 0 13
39473: PUSH
39474: LD_INT 0
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: PUSH
39484: LD_INT 0
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 1
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: NEG
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: LD_INT 2
39608: NEG
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: LD_INT 3
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 3
39628: NEG
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 3
39640: NEG
39641: PUSH
39642: LD_INT 3
39644: NEG
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39668: LD_ADDR_VAR 0 14
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 0
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: LD_INT 0
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 0
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: NEG
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 1
39737: NEG
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: LD_INT 2
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_INT 2
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: LD_INT 2
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 2
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 1
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: LD_INT 3
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 1
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39864: LD_ADDR_VAR 0 15
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 1
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 2
39987: NEG
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: LD_INT 1
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 3
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 3
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40057: LD_ADDR_VAR 0 16
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 0
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 1
40138: NEG
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 2
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: NEG
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: LD_INT 2
40192: NEG
40193: PUSH
40194: LD_INT 2
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: LD_INT 3
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 3
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40250: LD_ADDR_VAR 0 17
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: LD_INT 1
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 2
40335: NEG
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: LD_INT 0
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 2
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 2
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: LD_INT 1
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 0
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 1
40415: NEG
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 2
40426: NEG
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 2
40437: NEG
40438: PUSH
40439: LD_INT 1
40441: NEG
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 2
40449: NEG
40450: PUSH
40451: LD_INT 2
40453: NEG
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40480: LD_ADDR_VAR 0 18
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 0
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 0
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: LD_INT 0
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: LD_INT 2
40565: NEG
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 2
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 2
40595: PUSH
40596: LD_INT 0
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 2
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 2
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 2
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: NEG
40646: PUSH
40647: LD_INT 1
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: NEG
40657: PUSH
40658: LD_INT 0
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 2
40667: NEG
40668: PUSH
40669: LD_INT 1
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: LD_INT 2
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40710: LD_ADDR_VAR 0 19
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 0
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: LD_INT 0
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 0
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 1
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: LD_INT 2
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 2
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 2
40825: PUSH
40826: LD_INT 0
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: LD_INT 1
40838: PUSH
40839: EMPTY
40840: LIST
40841: LIST
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: LD_INT 2
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: LD_INT 2
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 1
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: NEG
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 2
40897: NEG
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40940: LD_ADDR_VAR 0 20
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 0
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: LD_INT 1
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 1
41009: NEG
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: EMPTY
41016: LIST
41017: LIST
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 0
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 2
41065: PUSH
41066: LD_INT 1
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 1
41085: PUSH
41086: LD_INT 2
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 0
41095: PUSH
41096: LD_INT 2
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 2
41116: NEG
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: NEG
41128: PUSH
41129: LD_INT 1
41131: NEG
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 2
41139: NEG
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41170: LD_ADDR_VAR 0 21
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 1
41198: PUSH
41199: LD_INT 0
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 1
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 1
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: LD_INT 0
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 0
41263: PUSH
41264: LD_INT 2
41266: NEG
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 2
41285: PUSH
41286: LD_INT 0
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: LD_INT 2
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 2
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: LD_INT 0
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: LD_INT 1
41361: NEG
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41400: LD_ADDR_VAR 0 22
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 0
41417: PUSH
41418: LD_INT 1
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: LD_INT 0
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: LD_INT 1
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: LD_INT 0
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: NEG
41482: PUSH
41483: LD_INT 2
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 2
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: LD_INT 2
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: LD_INT 2
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 2
41576: NEG
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 2
41587: NEG
41588: PUSH
41589: LD_INT 1
41591: NEG
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 2
41599: NEG
41600: PUSH
41601: LD_INT 2
41603: NEG
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41630: LD_ADDR_VAR 0 23
41634: PUSH
41635: LD_INT 0
41637: PUSH
41638: LD_INT 0
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 1
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 1
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: LD_INT 1
41703: NEG
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 1
41711: NEG
41712: PUSH
41713: LD_INT 2
41715: NEG
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: LD_INT 2
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 2
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: LD_INT 2
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 2
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: LD_INT 1
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: NEG
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 2
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 2
41829: NEG
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: LD_INT 3
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 3
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41910: LD_ADDR_VAR 0 24
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 0
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 1
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 1
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 0
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 1
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: LD_INT 2
41995: NEG
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 2
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 1
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 2
42113: NEG
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 3
42143: PUSH
42144: LD_INT 1
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 3
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42186: LD_ADDR_VAR 0 25
42190: PUSH
42191: LD_INT 0
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 0
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: NEG
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 2
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 1
42331: PUSH
42332: LD_INT 2
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 2
42362: NEG
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 3
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 3
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42460: LD_ADDR_VAR 0 26
42464: PUSH
42465: LD_INT 0
42467: PUSH
42468: LD_INT 0
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: PUSH
42475: LD_INT 0
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 1
42488: PUSH
42489: LD_INT 0
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: LD_INT 1
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: NEG
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 1
42541: NEG
42542: PUSH
42543: LD_INT 2
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 2
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 2
42585: PUSH
42586: LD_INT 1
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 2
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 2
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 2
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: NEG
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: EMPTY
42642: LIST
42643: LIST
42644: PUSH
42645: LD_INT 2
42647: NEG
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 2
42659: NEG
42660: PUSH
42661: LD_INT 2
42663: NEG
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 1
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42736: LD_ADDR_VAR 0 27
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: LD_INT 1
42756: NEG
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: LD_INT 0
42767: PUSH
42768: EMPTY
42769: LIST
42770: LIST
42771: PUSH
42772: LD_INT 1
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: NEG
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 2
42832: NEG
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 2
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: NEG
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 2
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 2
42935: NEG
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 3
42969: NEG
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: NEG
42982: PUSH
42983: LD_INT 2
42985: NEG
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43016: LD_ADDR_VAR 0 28
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 1
43097: NEG
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 2
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PUSH
43139: LD_INT 2
43141: PUSH
43142: LD_INT 1
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: PUSH
43162: LD_INT 2
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 2
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: NEG
43193: PUSH
43194: LD_INT 0
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 2
43227: NEG
43228: PUSH
43229: LD_INT 3
43231: NEG
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 3
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 3
43251: NEG
43252: PUSH
43253: LD_INT 1
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 3
43263: NEG
43264: PUSH
43265: LD_INT 2
43267: NEG
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: LIST
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43298: LD_ADDR_VAR 0 29
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 0
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 1
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 0
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 1
43379: NEG
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 0
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 1
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: LD_INT 2
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 2
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: LD_INT 2
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: LD_INT 3
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: LD_INT 1
43503: NEG
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 3
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 1
43531: NEG
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 3
43542: NEG
43543: PUSH
43544: LD_INT 2
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43577: LD_ADDR_VAR 0 30
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 0
43594: PUSH
43595: LD_INT 1
43597: NEG
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 1
43605: PUSH
43606: LD_INT 0
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 1
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: LD_INT 2
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 0
43670: PUSH
43671: LD_INT 2
43673: NEG
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 2
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 2
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 2
43743: NEG
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: NEG
43767: PUSH
43768: LD_INT 3
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 3
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 3
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: LD_INT 1
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 3
43820: NEG
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43855: LD_ADDR_VAR 0 31
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: LD_INT 2
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: LD_INT 3
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: PUSH
44068: LD_INT 1
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 3
44098: NEG
44099: PUSH
44100: LD_INT 2
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: LIST
44127: LIST
44128: LIST
44129: LIST
44130: LIST
44131: LIST
44132: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44133: LD_ADDR_VAR 0 32
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 0
44150: PUSH
44151: LD_INT 1
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: LD_INT 0
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: NEG
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 2
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: EMPTY
44253: LIST
44254: LIST
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: LD_INT 2
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: LD_INT 2
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 0
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: LD_INT 1
44314: NEG
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: LD_INT 3
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 3
44345: PUSH
44346: LD_INT 2
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 2
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 3
44376: NEG
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44411: LD_ADDR_VAR 0 33
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 2
44515: PUSH
44516: LD_INT 0
44518: PUSH
44519: EMPTY
44520: LIST
44521: LIST
44522: PUSH
44523: LD_INT 2
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: LD_INT 2
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: LD_INT 0
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: LD_INT 3
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 3
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: EMPTY
44629: LIST
44630: LIST
44631: PUSH
44632: LD_INT 1
44634: PUSH
44635: LD_INT 3
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: LD_INT 2
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44690: LD_ADDR_VAR 0 34
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 0
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 0
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 1
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: LD_INT 2
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 2
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 1
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: LD_INT 2
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: PUSH
44823: LD_INT 1
44825: PUSH
44826: LD_INT 2
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 1
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: NEG
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 2
44869: NEG
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 1
44881: NEG
44882: PUSH
44883: LD_INT 3
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 2
44896: NEG
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 2
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 3
44935: NEG
44936: PUSH
44937: LD_INT 1
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44970: LD_ADDR_VAR 0 35
44974: PUSH
44975: LD_INT 0
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 0
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: PUSH
44999: LD_INT 0
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 1
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 0
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: LD_INT 1
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: LD_INT 1
45065: NEG
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45082: LD_ADDR_VAR 0 36
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: LD_INT 1
45102: NEG
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: LD_INT 2
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 2
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45194: LD_ADDR_VAR 0 37
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 1
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45306: LD_ADDR_VAR 0 38
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 1
45364: NEG
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 2
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45418: LD_ADDR_VAR 0 39
45422: PUSH
45423: LD_INT 0
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 0
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: NEG
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: NEG
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: LD_INT 2
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45530: LD_ADDR_VAR 0 40
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: LD_INT 0
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 1
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 1
45599: NEG
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45642: LD_ADDR_VAR 0 41
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 1
45662: NEG
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 1
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: PUSH
45681: LD_INT 1
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 0
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 1
45711: NEG
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 2
45820: NEG
45821: PUSH
45822: LD_INT 2
45824: NEG
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: LD_INT 3
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: LD_INT 1
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 3
45875: PUSH
45876: LD_INT 2
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 3
45885: PUSH
45886: LD_INT 3
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 3
45916: NEG
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 3
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 3
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 3
45951: NEG
45952: PUSH
45953: LD_INT 3
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45992: LD_ADDR_VAR 0 42
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 0
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 1
46012: NEG
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: PUSH
46031: LD_INT 1
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: LD_INT 1
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 0
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 0
46085: PUSH
46086: LD_INT 2
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: LD_INT 2
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: LD_INT 2
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 2
46182: NEG
46183: PUSH
46184: LD_INT 3
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 1
46194: NEG
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: LD_INT 3
46209: NEG
46210: PUSH
46211: EMPTY
46212: LIST
46213: LIST
46214: PUSH
46215: LD_INT 1
46217: PUSH
46218: LD_INT 2
46220: NEG
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 3
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: LD_INT 3
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: LD_INT 1
46278: NEG
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 3
46289: NEG
46290: PUSH
46291: LD_INT 2
46293: NEG
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 3
46301: NEG
46302: PUSH
46303: LD_INT 3
46305: NEG
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46342: LD_ADDR_VAR 0 43
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 1
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: NEG
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 2
46438: NEG
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 3
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: LD_INT 2
46557: NEG
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 2
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 3
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 3
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: LD_INT 3
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 2
46627: NEG
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 3
46638: NEG
46639: PUSH
46640: LD_INT 0
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: NEG
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46690: LD_ADDR_VAR 0 44
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 2
46845: NEG
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 2
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: LD_INT 3
46884: NEG
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 2
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 3
46923: PUSH
46924: LD_INT 2
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: PUSH
46934: LD_INT 3
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 3
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 3
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 3
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 3
46999: NEG
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47040: LD_ADDR_VAR 0 45
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 1
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 1
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: NEG
47099: PUSH
47100: LD_INT 0
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 1
47121: NEG
47122: PUSH
47123: LD_INT 2
47125: NEG
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 0
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 1
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 0
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 1
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 2
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 1
47242: NEG
47243: PUSH
47244: LD_INT 3
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 3
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 2
47268: NEG
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 3
47276: PUSH
47277: LD_INT 2
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 3
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 3
47337: NEG
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 3
47349: NEG
47350: PUSH
47351: LD_INT 3
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47390: LD_ADDR_VAR 0 46
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 0
47483: PUSH
47484: LD_INT 2
47486: NEG
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: LD_INT 2
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 0
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: NEG
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 3
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 3
47624: PUSH
47625: LD_INT 0
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: PUSH
47645: LD_INT 3
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 2
47675: NEG
47676: PUSH
47677: LD_INT 1
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: LD_INT 0
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47738: LD_ADDR_VAR 0 47
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 2
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47889: LD_ADDR_VAR 0 48
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: LD_INT 1
47909: NEG
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 2
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 2
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 2
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: LIST
48026: LIST
48027: LIST
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48036: LD_ADDR_VAR 0 49
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 0
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: NEG
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: NEG
48106: PUSH
48107: LD_INT 1
48109: NEG
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 1
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48180: LD_ADDR_VAR 0 50
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 0
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 2
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 1
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48324: LD_ADDR_VAR 0 51
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 1
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 0
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 1
48382: NEG
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: NEG
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48471: LD_ADDR_VAR 0 52
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 0
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 0
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: NEG
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 1
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 2
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 1
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 2
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48622: LD_ADDR_VAR 0 53
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: LD_INT 0
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: LD_INT 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: LD_INT 2
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 2
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: LD_INT 2
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: LD_INT 0
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 1
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: NEG
48822: PUSH
48823: LD_INT 2
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48852: LD_ADDR_VAR 0 54
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 0
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 0
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 1
48921: NEG
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: LD_INT 2
48948: NEG
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 2
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 2
48987: PUSH
48988: LD_INT 2
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 2
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 2
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49082: LD_ADDR_VAR 0 55
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 2
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 0
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: LD_INT 0
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 2
49217: PUSH
49218: LD_INT 2
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 2
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: LD_INT 1
49273: NEG
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 2
49281: NEG
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49312: LD_ADDR_VAR 0 56
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 1
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: LD_INT 2
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 2
49427: PUSH
49428: LD_INT 0
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 1
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: LD_INT 2
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: NEG
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49542: LD_ADDR_VAR 0 57
49546: PUSH
49547: LD_INT 0
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 0
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 1
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 2
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: LD_INT 2
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: PUSH
49688: LD_INT 2
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 0
49697: PUSH
49698: LD_INT 2
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 0
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: NEG
49730: PUSH
49731: LD_INT 1
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 2
49741: NEG
49742: PUSH
49743: LD_INT 2
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49772: LD_ADDR_VAR 0 58
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 0
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 0
49789: PUSH
49790: LD_INT 1
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 0
49820: PUSH
49821: LD_INT 1
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: NEG
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 0
49927: PUSH
49928: LD_INT 2
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 1
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 2
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 2
49971: NEG
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50002: LD_ADDR_VAR 0 59
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50090: LD_ADDR_VAR 0 60
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 1
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50178: LD_ADDR_VAR 0 61
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 0
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50266: LD_ADDR_VAR 0 62
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50354: LD_ADDR_VAR 0 63
50358: PUSH
50359: LD_INT 0
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: LD_INT 1
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50442: LD_ADDR_VAR 0 64
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: LD_INT 1
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: ST_TO_ADDR
// end ; 1 :
50530: GO 56427
50532: LD_INT 1
50534: DOUBLE
50535: EQUAL
50536: IFTRUE 50540
50538: GO 53163
50540: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50541: LD_ADDR_VAR 0 11
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 3
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: PUSH
50572: LD_INT 2
50574: NEG
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: LIST
50584: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50585: LD_ADDR_VAR 0 12
50589: PUSH
50590: LD_INT 2
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 3
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50626: LD_ADDR_VAR 0 13
50630: PUSH
50631: LD_INT 3
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: PUSH
50644: LD_INT 3
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 3
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: LIST
50665: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50666: LD_ADDR_VAR 0 14
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: LD_INT 3
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 0
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50707: LD_ADDR_VAR 0 15
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 3
50725: NEG
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50751: LD_ADDR_VAR 0 16
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 3
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 3
50770: NEG
50771: PUSH
50772: LD_INT 2
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 3
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50797: LD_ADDR_VAR 0 17
50801: PUSH
50802: LD_INT 1
50804: NEG
50805: PUSH
50806: LD_INT 3
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 3
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50841: LD_ADDR_VAR 0 18
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: LD_INT 1
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 3
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: LIST
50881: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50882: LD_ADDR_VAR 0 19
50886: PUSH
50887: LD_INT 3
50889: PUSH
50890: LD_INT 2
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 3
50899: PUSH
50900: LD_INT 3
50902: PUSH
50903: EMPTY
50904: LIST
50905: LIST
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: LD_INT 3
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: LIST
50921: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50922: LD_ADDR_VAR 0 20
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 3
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 2
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50963: LD_ADDR_VAR 0 21
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 3
50981: NEG
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: NEG
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: LIST
51006: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51007: LD_ADDR_VAR 0 22
51011: PUSH
51012: LD_INT 2
51014: NEG
51015: PUSH
51016: LD_INT 3
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 2
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51053: LD_ADDR_VAR 0 23
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: LD_INT 3
51063: NEG
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: LD_INT 4
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 3
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: LIST
51096: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51097: LD_ADDR_VAR 0 24
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 3
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 4
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51138: LD_ADDR_VAR 0 25
51142: PUSH
51143: LD_INT 3
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: LIST
51177: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51178: LD_ADDR_VAR 0 26
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 4
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 3
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51219: LD_ADDR_VAR 0 27
51223: PUSH
51224: LD_INT 3
51226: NEG
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 3
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 4
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51263: LD_ADDR_VAR 0 28
51267: PUSH
51268: LD_INT 3
51270: NEG
51271: PUSH
51272: LD_INT 3
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 3
51282: NEG
51283: PUSH
51284: LD_INT 4
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 4
51294: NEG
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51309: LD_ADDR_VAR 0 29
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 4
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 0
51362: PUSH
51363: LD_INT 4
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: LD_INT 3
51376: NEG
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 1
51384: NEG
51385: PUSH
51386: LD_INT 5
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 0
51396: PUSH
51397: LD_INT 5
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: LD_INT 4
51410: NEG
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: LD_INT 6
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 6
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 5
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51464: LD_ADDR_VAR 0 30
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 3
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 3
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 4
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 4
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 5
51544: PUSH
51545: LD_INT 0
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 5
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 5
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 6
51575: PUSH
51576: LD_INT 0
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 6
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51607: LD_ADDR_VAR 0 31
51611: PUSH
51612: LD_INT 3
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 3
51624: PUSH
51625: LD_INT 3
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 3
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 4
51644: PUSH
51645: LD_INT 3
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 4
51654: PUSH
51655: LD_INT 4
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: LD_INT 4
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 5
51674: PUSH
51675: LD_INT 4
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 5
51684: PUSH
51685: LD_INT 5
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 4
51694: PUSH
51695: LD_INT 5
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 6
51704: PUSH
51705: LD_INT 5
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 6
51714: PUSH
51715: LD_INT 6
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 5
51724: PUSH
51725: LD_INT 6
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51746: LD_ADDR_VAR 0 32
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 3
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 4
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 4
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 3
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: LD_INT 5
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 0
51825: PUSH
51826: LD_INT 5
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: LD_INT 4
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: LD_INT 6
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 6
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: NEG
51867: PUSH
51868: LD_INT 5
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51889: LD_ADDR_VAR 0 33
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 1
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 3
51930: NEG
51931: PUSH
51932: LD_INT 1
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: PUSH
51939: LD_INT 4
51941: NEG
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 4
51952: NEG
51953: PUSH
51954: LD_INT 1
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 4
51964: NEG
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 5
51975: NEG
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 5
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 5
51998: NEG
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 6
52009: NEG
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 6
52020: NEG
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52044: LD_ADDR_VAR 0 34
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: LD_INT 3
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 3
52075: NEG
52076: PUSH
52077: LD_INT 3
52079: NEG
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 3
52087: NEG
52088: PUSH
52089: LD_INT 4
52091: NEG
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 4
52099: NEG
52100: PUSH
52101: LD_INT 3
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 4
52111: NEG
52112: PUSH
52113: LD_INT 4
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 4
52123: NEG
52124: PUSH
52125: LD_INT 5
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 5
52135: NEG
52136: PUSH
52137: LD_INT 4
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 5
52147: NEG
52148: PUSH
52149: LD_INT 5
52151: NEG
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 5
52159: NEG
52160: PUSH
52161: LD_INT 6
52163: NEG
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 6
52171: NEG
52172: PUSH
52173: LD_INT 5
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 6
52183: NEG
52184: PUSH
52185: LD_INT 6
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52207: LD_ADDR_VAR 0 41
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52251: LD_ADDR_VAR 0 42
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: LIST
52291: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52292: LD_ADDR_VAR 0 43
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 3
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 3
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: LIST
52331: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52332: LD_ADDR_VAR 0 44
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: LD_INT 3
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 2
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52373: LD_ADDR_VAR 0 45
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 3
52402: NEG
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52417: LD_ADDR_VAR 0 46
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: LD_INT 2
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 2
52436: NEG
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52463: LD_ADDR_VAR 0 47
52467: PUSH
52468: LD_INT 2
52470: NEG
52471: PUSH
52472: LD_INT 3
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: LD_INT 3
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52496: LD_ADDR_VAR 0 48
52500: PUSH
52501: LD_INT 1
52503: PUSH
52504: LD_INT 2
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 2
52514: PUSH
52515: LD_INT 1
52517: NEG
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52527: LD_ADDR_VAR 0 49
52531: PUSH
52532: LD_INT 3
52534: PUSH
52535: LD_INT 1
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 3
52544: PUSH
52545: LD_INT 2
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52556: LD_ADDR_VAR 0 50
52560: PUSH
52561: LD_INT 2
52563: PUSH
52564: LD_INT 3
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: LD_INT 3
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52585: LD_ADDR_VAR 0 51
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 2
52603: NEG
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52616: LD_ADDR_VAR 0 52
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 3
52635: NEG
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52649: LD_ADDR_VAR 0 53
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 3
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 3
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52693: LD_ADDR_VAR 0 54
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: LD_INT 1
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: LD_INT 1
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: LIST
52733: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52734: LD_ADDR_VAR 0 55
52738: PUSH
52739: LD_INT 3
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 3
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: LIST
52773: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52774: LD_ADDR_VAR 0 56
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 3
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: LD_INT 3
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52815: LD_ADDR_VAR 0 57
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: LD_INT 1
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 3
52844: NEG
52845: PUSH
52846: LD_INT 1
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52859: LD_ADDR_VAR 0 58
52863: PUSH
52864: LD_INT 2
52866: NEG
52867: PUSH
52868: LD_INT 3
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 3
52878: NEG
52879: PUSH
52880: LD_INT 2
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: NEG
52891: PUSH
52892: LD_INT 3
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52905: LD_ADDR_VAR 0 59
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: LD_INT 1
52938: NEG
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: LIST
52948: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52949: LD_ADDR_VAR 0 60
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 1
52959: NEG
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 0
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: LD_INT 1
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: LIST
52989: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52990: LD_ADDR_VAR 0 61
52994: PUSH
52995: LD_INT 2
52997: PUSH
52998: LD_INT 1
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 2
53007: PUSH
53008: LD_INT 2
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53030: LD_ADDR_VAR 0 62
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 1
53057: NEG
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: LIST
53070: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53071: LD_ADDR_VAR 0 63
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 2
53089: NEG
53090: PUSH
53091: LD_INT 0
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 2
53100: NEG
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53115: LD_ADDR_VAR 0 64
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 2
53134: NEG
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// end ; 2 :
53161: GO 56427
53163: LD_INT 2
53165: DOUBLE
53166: EQUAL
53167: IFTRUE 53171
53169: GO 56426
53171: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53172: LD_ADDR_VAR 0 29
53176: PUSH
53177: LD_INT 4
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 4
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 5
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 5
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 4
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 3
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 3
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 5
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: PUSH
53273: LD_INT 3
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 3
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 4
53292: PUSH
53293: LD_INT 3
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 4
53302: PUSH
53303: LD_INT 4
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: PUSH
53313: LD_INT 4
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 4
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 2
53352: PUSH
53353: LD_INT 4
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 4
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 0
53372: PUSH
53373: LD_INT 3
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: PUSH
53383: LD_INT 4
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 1
53392: PUSH
53393: LD_INT 5
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 0
53402: PUSH
53403: LD_INT 5
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: LD_INT 4
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 5
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: NEG
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: PUSH
53464: LD_INT 3
53466: NEG
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: NEG
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: EMPTY
53484: LIST
53485: LIST
53486: PUSH
53487: LD_INT 2
53489: NEG
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 4
53511: NEG
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 4
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 4
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 4
53557: NEG
53558: PUSH
53559: LD_INT 4
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 4
53569: NEG
53570: PUSH
53571: LD_INT 5
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: LD_INT 4
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 3
53593: NEG
53594: PUSH
53595: LD_INT 3
53597: NEG
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 4
53605: NEG
53606: PUSH
53607: LD_INT 3
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 5
53617: NEG
53618: PUSH
53619: LD_INT 4
53621: NEG
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 5
53629: NEG
53630: PUSH
53631: LD_INT 5
53633: NEG
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: LD_INT 5
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 5
53653: NEG
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53710: LD_ADDR_VAR 0 30
53714: PUSH
53715: LD_INT 4
53717: PUSH
53718: LD_INT 4
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 4
53727: PUSH
53728: LD_INT 3
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 5
53737: PUSH
53738: LD_INT 4
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 5
53747: PUSH
53748: LD_INT 5
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 4
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 4
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: LD_INT 3
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 5
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: LD_INT 5
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 4
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 0
53847: PUSH
53848: LD_INT 4
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: LD_INT 3
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 2
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: PUSH
53880: LD_INT 4
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: NEG
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 4
53900: NEG
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 4
53911: NEG
53912: PUSH
53913: LD_INT 1
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 3
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 3
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 4
53945: NEG
53946: PUSH
53947: LD_INT 1
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: PUSH
53954: LD_INT 5
53956: NEG
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 5
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 5
53979: NEG
53980: PUSH
53981: LD_INT 2
53983: NEG
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: LD_INT 2
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 3
54002: NEG
54003: PUSH
54004: LD_INT 3
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: LD_INT 4
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: NEG
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 2
54038: NEG
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 3
54050: NEG
54051: PUSH
54052: LD_INT 2
54054: NEG
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 4
54062: NEG
54063: PUSH
54064: LD_INT 3
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 4
54074: NEG
54075: PUSH
54076: LD_INT 4
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 4
54090: NEG
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: PUSH
54096: LD_INT 4
54098: NEG
54099: PUSH
54100: LD_INT 2
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 0
54110: PUSH
54111: LD_INT 4
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 5
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 4
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 1
54143: PUSH
54144: LD_INT 3
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: NEG
54166: PUSH
54167: LD_INT 4
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 5
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 2
54200: NEG
54201: PUSH
54202: LD_INT 5
54204: NEG
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54257: LD_ADDR_VAR 0 31
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 4
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 3
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: LD_INT 4
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 5
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 5
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 4
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 3
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 5
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: NEG
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: NEG
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 3
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 1
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 4
54413: NEG
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 4
54424: NEG
54425: PUSH
54426: LD_INT 1
54428: NEG
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 4
54436: NEG
54437: PUSH
54438: LD_INT 2
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 4
54459: NEG
54460: PUSH
54461: LD_INT 4
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 4
54471: NEG
54472: PUSH
54473: LD_INT 5
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: LD_INT 4
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 3
54495: NEG
54496: PUSH
54497: LD_INT 3
54499: NEG
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 4
54507: NEG
54508: PUSH
54509: LD_INT 3
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 5
54519: NEG
54520: PUSH
54521: LD_INT 4
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 5
54531: NEG
54532: PUSH
54533: LD_INT 5
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 3
54543: NEG
54544: PUSH
54545: LD_INT 5
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 5
54555: NEG
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: LD_INT 3
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 4
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 3
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 2
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 3
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: LD_INT 4
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: LD_INT 4
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 4
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 4
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 5
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 5
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 4
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 3
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 3
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: LD_INT 2
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 5
54752: PUSH
54753: LD_INT 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54807: LD_ADDR_VAR 0 32
54811: PUSH
54812: LD_INT 4
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 4
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: NEG
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 4
54859: NEG
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 5
54870: NEG
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 5
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 5
54893: NEG
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: LD_INT 2
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 3
54916: NEG
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 3
54928: NEG
54929: PUSH
54930: LD_INT 4
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: LD_INT 3
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 2
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: LD_INT 2
54968: NEG
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 4
54976: NEG
54977: PUSH
54978: LD_INT 3
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: NEG
54989: PUSH
54990: LD_INT 4
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 2
55000: NEG
55001: PUSH
55002: LD_INT 4
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 4
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 4
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 5
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 4
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 3
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: LD_INT 4
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 5
55095: NEG
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: LD_INT 5
55118: NEG
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 4
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 4
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 2
55187: PUSH
55188: LD_INT 1
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 2
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 4
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 4
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 4
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 5
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 5
55249: PUSH
55250: LD_INT 5
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: LD_INT 5
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 4
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 3
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 5
55289: PUSH
55290: LD_INT 3
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: PUSH
55300: LD_INT 5
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55354: LD_ADDR_VAR 0 33
55358: PUSH
55359: LD_INT 4
55361: NEG
55362: PUSH
55363: LD_INT 4
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 4
55373: NEG
55374: PUSH
55375: LD_INT 5
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 3
55385: NEG
55386: PUSH
55387: LD_INT 4
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 3
55397: NEG
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 4
55409: NEG
55410: PUSH
55411: LD_INT 3
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 5
55421: NEG
55422: PUSH
55423: LD_INT 4
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 5
55433: NEG
55434: PUSH
55435: LD_INT 5
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: NEG
55446: PUSH
55447: LD_INT 5
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 5
55457: NEG
55458: PUSH
55459: LD_INT 3
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: LD_INT 3
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 4
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: NEG
55525: PUSH
55526: LD_INT 3
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 4
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: NEG
55560: PUSH
55561: LD_INT 4
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 4
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 4
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 5
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 5
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 4
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 3
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 3
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 3
55643: PUSH
55644: LD_INT 2
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 5
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: LD_INT 3
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 3
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 4
55684: PUSH
55685: LD_INT 3
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 4
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 3
55704: PUSH
55705: LD_INT 4
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: LD_INT 3
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 2
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 4
55734: PUSH
55735: LD_INT 2
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 4
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 4
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: LD_INT 4
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 5
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: LD_INT 5
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 4
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PUSH
55817: LD_INT 3
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 5
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: LD_INT 3
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55892: LD_ADDR_VAR 0 34
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: LD_INT 4
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: LD_INT 5
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 4
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 3
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: LD_INT 3
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 4
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: LD_INT 5
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 2
55989: NEG
55990: PUSH
55991: LD_INT 5
55993: NEG
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 3
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 4
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 4
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 2
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 2
56076: NEG
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: PUSH
56082: LD_INT 4
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 4
56094: PUSH
56095: LD_INT 4
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 4
56104: PUSH
56105: LD_INT 3
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 5
56114: PUSH
56115: LD_INT 4
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 5
56124: PUSH
56125: LD_INT 5
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 4
56134: PUSH
56135: LD_INT 5
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 3
56144: PUSH
56145: LD_INT 4
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 3
56154: PUSH
56155: LD_INT 3
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 5
56164: PUSH
56165: LD_INT 3
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 3
56174: PUSH
56175: LD_INT 5
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 0
56184: PUSH
56185: LD_INT 3
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 3
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 4
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 4
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: NEG
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: PUSH
56257: LD_INT 4
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 2
56266: NEG
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: NEG
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: PUSH
56286: LD_INT 4
56288: NEG
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 3
56300: NEG
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 4
56322: NEG
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 5
56333: NEG
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 5
56344: NEG
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 5
56356: NEG
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 3
56368: NEG
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: ST_TO_ADDR
// end ; end ;
56424: GO 56427
56426: POP
// case btype of b_depot , b_warehouse :
56427: LD_VAR 0 1
56431: PUSH
56432: LD_INT 0
56434: DOUBLE
56435: EQUAL
56436: IFTRUE 56446
56438: LD_INT 1
56440: DOUBLE
56441: EQUAL
56442: IFTRUE 56446
56444: GO 56647
56446: POP
// case nation of nation_american :
56447: LD_VAR 0 5
56451: PUSH
56452: LD_INT 1
56454: DOUBLE
56455: EQUAL
56456: IFTRUE 56460
56458: GO 56516
56460: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56461: LD_ADDR_VAR 0 9
56465: PUSH
56466: LD_VAR 0 11
56470: PUSH
56471: LD_VAR 0 12
56475: PUSH
56476: LD_VAR 0 13
56480: PUSH
56481: LD_VAR 0 14
56485: PUSH
56486: LD_VAR 0 15
56490: PUSH
56491: LD_VAR 0 16
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: PUSH
56504: LD_VAR 0 4
56508: PUSH
56509: LD_INT 1
56511: PLUS
56512: ARRAY
56513: ST_TO_ADDR
56514: GO 56645
56516: LD_INT 2
56518: DOUBLE
56519: EQUAL
56520: IFTRUE 56524
56522: GO 56580
56524: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56525: LD_ADDR_VAR 0 9
56529: PUSH
56530: LD_VAR 0 17
56534: PUSH
56535: LD_VAR 0 18
56539: PUSH
56540: LD_VAR 0 19
56544: PUSH
56545: LD_VAR 0 20
56549: PUSH
56550: LD_VAR 0 21
56554: PUSH
56555: LD_VAR 0 22
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: LIST
56565: LIST
56566: LIST
56567: PUSH
56568: LD_VAR 0 4
56572: PUSH
56573: LD_INT 1
56575: PLUS
56576: ARRAY
56577: ST_TO_ADDR
56578: GO 56645
56580: LD_INT 3
56582: DOUBLE
56583: EQUAL
56584: IFTRUE 56588
56586: GO 56644
56588: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56589: LD_ADDR_VAR 0 9
56593: PUSH
56594: LD_VAR 0 23
56598: PUSH
56599: LD_VAR 0 24
56603: PUSH
56604: LD_VAR 0 25
56608: PUSH
56609: LD_VAR 0 26
56613: PUSH
56614: LD_VAR 0 27
56618: PUSH
56619: LD_VAR 0 28
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: PUSH
56632: LD_VAR 0 4
56636: PUSH
56637: LD_INT 1
56639: PLUS
56640: ARRAY
56641: ST_TO_ADDR
56642: GO 56645
56644: POP
56645: GO 57200
56647: LD_INT 2
56649: DOUBLE
56650: EQUAL
56651: IFTRUE 56661
56653: LD_INT 3
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56661
56659: GO 56717
56661: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56662: LD_ADDR_VAR 0 9
56666: PUSH
56667: LD_VAR 0 29
56671: PUSH
56672: LD_VAR 0 30
56676: PUSH
56677: LD_VAR 0 31
56681: PUSH
56682: LD_VAR 0 32
56686: PUSH
56687: LD_VAR 0 33
56691: PUSH
56692: LD_VAR 0 34
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: PUSH
56705: LD_VAR 0 4
56709: PUSH
56710: LD_INT 1
56712: PLUS
56713: ARRAY
56714: ST_TO_ADDR
56715: GO 57200
56717: LD_INT 16
56719: DOUBLE
56720: EQUAL
56721: IFTRUE 56779
56723: LD_INT 17
56725: DOUBLE
56726: EQUAL
56727: IFTRUE 56779
56729: LD_INT 18
56731: DOUBLE
56732: EQUAL
56733: IFTRUE 56779
56735: LD_INT 19
56737: DOUBLE
56738: EQUAL
56739: IFTRUE 56779
56741: LD_INT 22
56743: DOUBLE
56744: EQUAL
56745: IFTRUE 56779
56747: LD_INT 20
56749: DOUBLE
56750: EQUAL
56751: IFTRUE 56779
56753: LD_INT 21
56755: DOUBLE
56756: EQUAL
56757: IFTRUE 56779
56759: LD_INT 23
56761: DOUBLE
56762: EQUAL
56763: IFTRUE 56779
56765: LD_INT 24
56767: DOUBLE
56768: EQUAL
56769: IFTRUE 56779
56771: LD_INT 25
56773: DOUBLE
56774: EQUAL
56775: IFTRUE 56779
56777: GO 56835
56779: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56780: LD_ADDR_VAR 0 9
56784: PUSH
56785: LD_VAR 0 35
56789: PUSH
56790: LD_VAR 0 36
56794: PUSH
56795: LD_VAR 0 37
56799: PUSH
56800: LD_VAR 0 38
56804: PUSH
56805: LD_VAR 0 39
56809: PUSH
56810: LD_VAR 0 40
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: PUSH
56823: LD_VAR 0 4
56827: PUSH
56828: LD_INT 1
56830: PLUS
56831: ARRAY
56832: ST_TO_ADDR
56833: GO 57200
56835: LD_INT 6
56837: DOUBLE
56838: EQUAL
56839: IFTRUE 56891
56841: LD_INT 7
56843: DOUBLE
56844: EQUAL
56845: IFTRUE 56891
56847: LD_INT 8
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56891
56853: LD_INT 13
56855: DOUBLE
56856: EQUAL
56857: IFTRUE 56891
56859: LD_INT 12
56861: DOUBLE
56862: EQUAL
56863: IFTRUE 56891
56865: LD_INT 15
56867: DOUBLE
56868: EQUAL
56869: IFTRUE 56891
56871: LD_INT 11
56873: DOUBLE
56874: EQUAL
56875: IFTRUE 56891
56877: LD_INT 14
56879: DOUBLE
56880: EQUAL
56881: IFTRUE 56891
56883: LD_INT 10
56885: DOUBLE
56886: EQUAL
56887: IFTRUE 56891
56889: GO 56947
56891: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56892: LD_ADDR_VAR 0 9
56896: PUSH
56897: LD_VAR 0 41
56901: PUSH
56902: LD_VAR 0 42
56906: PUSH
56907: LD_VAR 0 43
56911: PUSH
56912: LD_VAR 0 44
56916: PUSH
56917: LD_VAR 0 45
56921: PUSH
56922: LD_VAR 0 46
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: PUSH
56935: LD_VAR 0 4
56939: PUSH
56940: LD_INT 1
56942: PLUS
56943: ARRAY
56944: ST_TO_ADDR
56945: GO 57200
56947: LD_INT 36
56949: DOUBLE
56950: EQUAL
56951: IFTRUE 56955
56953: GO 57011
56955: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56956: LD_ADDR_VAR 0 9
56960: PUSH
56961: LD_VAR 0 47
56965: PUSH
56966: LD_VAR 0 48
56970: PUSH
56971: LD_VAR 0 49
56975: PUSH
56976: LD_VAR 0 50
56980: PUSH
56981: LD_VAR 0 51
56985: PUSH
56986: LD_VAR 0 52
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: PUSH
56999: LD_VAR 0 4
57003: PUSH
57004: LD_INT 1
57006: PLUS
57007: ARRAY
57008: ST_TO_ADDR
57009: GO 57200
57011: LD_INT 4
57013: DOUBLE
57014: EQUAL
57015: IFTRUE 57037
57017: LD_INT 5
57019: DOUBLE
57020: EQUAL
57021: IFTRUE 57037
57023: LD_INT 34
57025: DOUBLE
57026: EQUAL
57027: IFTRUE 57037
57029: LD_INT 37
57031: DOUBLE
57032: EQUAL
57033: IFTRUE 57037
57035: GO 57093
57037: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57038: LD_ADDR_VAR 0 9
57042: PUSH
57043: LD_VAR 0 53
57047: PUSH
57048: LD_VAR 0 54
57052: PUSH
57053: LD_VAR 0 55
57057: PUSH
57058: LD_VAR 0 56
57062: PUSH
57063: LD_VAR 0 57
57067: PUSH
57068: LD_VAR 0 58
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: PUSH
57081: LD_VAR 0 4
57085: PUSH
57086: LD_INT 1
57088: PLUS
57089: ARRAY
57090: ST_TO_ADDR
57091: GO 57200
57093: LD_INT 31
57095: DOUBLE
57096: EQUAL
57097: IFTRUE 57143
57099: LD_INT 32
57101: DOUBLE
57102: EQUAL
57103: IFTRUE 57143
57105: LD_INT 33
57107: DOUBLE
57108: EQUAL
57109: IFTRUE 57143
57111: LD_INT 27
57113: DOUBLE
57114: EQUAL
57115: IFTRUE 57143
57117: LD_INT 26
57119: DOUBLE
57120: EQUAL
57121: IFTRUE 57143
57123: LD_INT 28
57125: DOUBLE
57126: EQUAL
57127: IFTRUE 57143
57129: LD_INT 29
57131: DOUBLE
57132: EQUAL
57133: IFTRUE 57143
57135: LD_INT 30
57137: DOUBLE
57138: EQUAL
57139: IFTRUE 57143
57141: GO 57199
57143: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57144: LD_ADDR_VAR 0 9
57148: PUSH
57149: LD_VAR 0 59
57153: PUSH
57154: LD_VAR 0 60
57158: PUSH
57159: LD_VAR 0 61
57163: PUSH
57164: LD_VAR 0 62
57168: PUSH
57169: LD_VAR 0 63
57173: PUSH
57174: LD_VAR 0 64
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: PUSH
57187: LD_VAR 0 4
57191: PUSH
57192: LD_INT 1
57194: PLUS
57195: ARRAY
57196: ST_TO_ADDR
57197: GO 57200
57199: POP
// temp_list2 = [ ] ;
57200: LD_ADDR_VAR 0 10
57204: PUSH
57205: EMPTY
57206: ST_TO_ADDR
// for i in temp_list do
57207: LD_ADDR_VAR 0 8
57211: PUSH
57212: LD_VAR 0 9
57216: PUSH
57217: FOR_IN
57218: IFFALSE 57270
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57220: LD_ADDR_VAR 0 10
57224: PUSH
57225: LD_VAR 0 10
57229: PUSH
57230: LD_VAR 0 8
57234: PUSH
57235: LD_INT 1
57237: ARRAY
57238: PUSH
57239: LD_VAR 0 2
57243: PLUS
57244: PUSH
57245: LD_VAR 0 8
57249: PUSH
57250: LD_INT 2
57252: ARRAY
57253: PUSH
57254: LD_VAR 0 3
57258: PLUS
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: EMPTY
57265: LIST
57266: ADD
57267: ST_TO_ADDR
57268: GO 57217
57270: POP
57271: POP
// result = temp_list2 ;
57272: LD_ADDR_VAR 0 7
57276: PUSH
57277: LD_VAR 0 10
57281: ST_TO_ADDR
// end ;
57282: LD_VAR 0 7
57286: RET
// export function EnemyInRange ( unit , dist ) ; begin
57287: LD_INT 0
57289: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57290: LD_ADDR_VAR 0 3
57294: PUSH
57295: LD_VAR 0 1
57299: PPUSH
57300: CALL_OW 255
57304: PPUSH
57305: LD_VAR 0 1
57309: PPUSH
57310: CALL_OW 250
57314: PPUSH
57315: LD_VAR 0 1
57319: PPUSH
57320: CALL_OW 251
57324: PPUSH
57325: LD_VAR 0 2
57329: PPUSH
57330: CALL 30689 0 4
57334: PUSH
57335: LD_INT 4
57337: ARRAY
57338: ST_TO_ADDR
// end ;
57339: LD_VAR 0 3
57343: RET
// export function PlayerSeeMe ( unit ) ; begin
57344: LD_INT 0
57346: PPUSH
// result := See ( your_side , unit ) ;
57347: LD_ADDR_VAR 0 2
57351: PUSH
57352: LD_OWVAR 2
57356: PPUSH
57357: LD_VAR 0 1
57361: PPUSH
57362: CALL_OW 292
57366: ST_TO_ADDR
// end ;
57367: LD_VAR 0 2
57371: RET
// export function ReverseDir ( unit ) ; begin
57372: LD_INT 0
57374: PPUSH
// if not unit then
57375: LD_VAR 0 1
57379: NOT
57380: IFFALSE 57384
// exit ;
57382: GO 57407
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57384: LD_ADDR_VAR 0 2
57388: PUSH
57389: LD_VAR 0 1
57393: PPUSH
57394: CALL_OW 254
57398: PUSH
57399: LD_INT 3
57401: PLUS
57402: PUSH
57403: LD_INT 6
57405: MOD
57406: ST_TO_ADDR
// end ;
57407: LD_VAR 0 2
57411: RET
// export function ReverseArray ( array ) ; var i ; begin
57412: LD_INT 0
57414: PPUSH
57415: PPUSH
// if not array then
57416: LD_VAR 0 1
57420: NOT
57421: IFFALSE 57425
// exit ;
57423: GO 57480
// result := [ ] ;
57425: LD_ADDR_VAR 0 2
57429: PUSH
57430: EMPTY
57431: ST_TO_ADDR
// for i := array downto 1 do
57432: LD_ADDR_VAR 0 3
57436: PUSH
57437: DOUBLE
57438: LD_VAR 0 1
57442: INC
57443: ST_TO_ADDR
57444: LD_INT 1
57446: PUSH
57447: FOR_DOWNTO
57448: IFFALSE 57478
// result := Join ( result , array [ i ] ) ;
57450: LD_ADDR_VAR 0 2
57454: PUSH
57455: LD_VAR 0 2
57459: PPUSH
57460: LD_VAR 0 1
57464: PUSH
57465: LD_VAR 0 3
57469: ARRAY
57470: PPUSH
57471: CALL 62105 0 2
57475: ST_TO_ADDR
57476: GO 57447
57478: POP
57479: POP
// end ;
57480: LD_VAR 0 2
57484: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57485: LD_INT 0
57487: PPUSH
57488: PPUSH
57489: PPUSH
57490: PPUSH
57491: PPUSH
57492: PPUSH
// if not unit or not hexes then
57493: LD_VAR 0 1
57497: NOT
57498: PUSH
57499: LD_VAR 0 2
57503: NOT
57504: OR
57505: IFFALSE 57509
// exit ;
57507: GO 57632
// dist := 9999 ;
57509: LD_ADDR_VAR 0 5
57513: PUSH
57514: LD_INT 9999
57516: ST_TO_ADDR
// for i = 1 to hexes do
57517: LD_ADDR_VAR 0 4
57521: PUSH
57522: DOUBLE
57523: LD_INT 1
57525: DEC
57526: ST_TO_ADDR
57527: LD_VAR 0 2
57531: PUSH
57532: FOR_TO
57533: IFFALSE 57620
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57535: LD_ADDR_VAR 0 6
57539: PUSH
57540: LD_VAR 0 1
57544: PPUSH
57545: LD_VAR 0 2
57549: PUSH
57550: LD_VAR 0 4
57554: ARRAY
57555: PUSH
57556: LD_INT 1
57558: ARRAY
57559: PPUSH
57560: LD_VAR 0 2
57564: PUSH
57565: LD_VAR 0 4
57569: ARRAY
57570: PUSH
57571: LD_INT 2
57573: ARRAY
57574: PPUSH
57575: CALL_OW 297
57579: ST_TO_ADDR
// if tdist < dist then
57580: LD_VAR 0 6
57584: PUSH
57585: LD_VAR 0 5
57589: LESS
57590: IFFALSE 57618
// begin hex := hexes [ i ] ;
57592: LD_ADDR_VAR 0 8
57596: PUSH
57597: LD_VAR 0 2
57601: PUSH
57602: LD_VAR 0 4
57606: ARRAY
57607: ST_TO_ADDR
// dist := tdist ;
57608: LD_ADDR_VAR 0 5
57612: PUSH
57613: LD_VAR 0 6
57617: ST_TO_ADDR
// end ; end ;
57618: GO 57532
57620: POP
57621: POP
// result := hex ;
57622: LD_ADDR_VAR 0 3
57626: PUSH
57627: LD_VAR 0 8
57631: ST_TO_ADDR
// end ;
57632: LD_VAR 0 3
57636: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57637: LD_INT 0
57639: PPUSH
57640: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57641: LD_VAR 0 1
57645: NOT
57646: PUSH
57647: LD_VAR 0 1
57651: PUSH
57652: LD_INT 21
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 23
57664: PUSH
57665: LD_INT 2
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PPUSH
57676: CALL_OW 69
57680: IN
57681: NOT
57682: OR
57683: IFFALSE 57687
// exit ;
57685: GO 57734
// for i = 1 to 3 do
57687: LD_ADDR_VAR 0 3
57691: PUSH
57692: DOUBLE
57693: LD_INT 1
57695: DEC
57696: ST_TO_ADDR
57697: LD_INT 3
57699: PUSH
57700: FOR_TO
57701: IFFALSE 57732
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57703: LD_VAR 0 1
57707: PPUSH
57708: CALL_OW 250
57712: PPUSH
57713: LD_VAR 0 1
57717: PPUSH
57718: CALL_OW 251
57722: PPUSH
57723: LD_INT 1
57725: PPUSH
57726: CALL_OW 453
57730: GO 57700
57732: POP
57733: POP
// end ;
57734: LD_VAR 0 2
57738: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57739: LD_INT 0
57741: PPUSH
57742: PPUSH
57743: PPUSH
57744: PPUSH
57745: PPUSH
57746: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57747: LD_VAR 0 1
57751: NOT
57752: PUSH
57753: LD_VAR 0 2
57757: NOT
57758: OR
57759: PUSH
57760: LD_VAR 0 1
57764: PPUSH
57765: CALL_OW 314
57769: OR
57770: IFFALSE 57774
// exit ;
57772: GO 58215
// x := GetX ( enemy_unit ) ;
57774: LD_ADDR_VAR 0 7
57778: PUSH
57779: LD_VAR 0 2
57783: PPUSH
57784: CALL_OW 250
57788: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57789: LD_ADDR_VAR 0 8
57793: PUSH
57794: LD_VAR 0 2
57798: PPUSH
57799: CALL_OW 251
57803: ST_TO_ADDR
// if not x or not y then
57804: LD_VAR 0 7
57808: NOT
57809: PUSH
57810: LD_VAR 0 8
57814: NOT
57815: OR
57816: IFFALSE 57820
// exit ;
57818: GO 58215
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57820: LD_ADDR_VAR 0 6
57824: PUSH
57825: LD_VAR 0 7
57829: PPUSH
57830: LD_INT 0
57832: PPUSH
57833: LD_INT 4
57835: PPUSH
57836: CALL_OW 272
57840: PUSH
57841: LD_VAR 0 8
57845: PPUSH
57846: LD_INT 0
57848: PPUSH
57849: LD_INT 4
57851: PPUSH
57852: CALL_OW 273
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_VAR 0 7
57865: PPUSH
57866: LD_INT 1
57868: PPUSH
57869: LD_INT 4
57871: PPUSH
57872: CALL_OW 272
57876: PUSH
57877: LD_VAR 0 8
57881: PPUSH
57882: LD_INT 1
57884: PPUSH
57885: LD_INT 4
57887: PPUSH
57888: CALL_OW 273
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_VAR 0 7
57901: PPUSH
57902: LD_INT 2
57904: PPUSH
57905: LD_INT 4
57907: PPUSH
57908: CALL_OW 272
57912: PUSH
57913: LD_VAR 0 8
57917: PPUSH
57918: LD_INT 2
57920: PPUSH
57921: LD_INT 4
57923: PPUSH
57924: CALL_OW 273
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_VAR 0 7
57937: PPUSH
57938: LD_INT 3
57940: PPUSH
57941: LD_INT 4
57943: PPUSH
57944: CALL_OW 272
57948: PUSH
57949: LD_VAR 0 8
57953: PPUSH
57954: LD_INT 3
57956: PPUSH
57957: LD_INT 4
57959: PPUSH
57960: CALL_OW 273
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_VAR 0 7
57973: PPUSH
57974: LD_INT 4
57976: PPUSH
57977: LD_INT 4
57979: PPUSH
57980: CALL_OW 272
57984: PUSH
57985: LD_VAR 0 8
57989: PPUSH
57990: LD_INT 4
57992: PPUSH
57993: LD_INT 4
57995: PPUSH
57996: CALL_OW 273
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_VAR 0 7
58009: PPUSH
58010: LD_INT 5
58012: PPUSH
58013: LD_INT 4
58015: PPUSH
58016: CALL_OW 272
58020: PUSH
58021: LD_VAR 0 8
58025: PPUSH
58026: LD_INT 5
58028: PPUSH
58029: LD_INT 4
58031: PPUSH
58032: CALL_OW 273
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: ST_TO_ADDR
// for i = tmp downto 1 do
58049: LD_ADDR_VAR 0 4
58053: PUSH
58054: DOUBLE
58055: LD_VAR 0 6
58059: INC
58060: ST_TO_ADDR
58061: LD_INT 1
58063: PUSH
58064: FOR_DOWNTO
58065: IFFALSE 58166
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58067: LD_VAR 0 6
58071: PUSH
58072: LD_VAR 0 4
58076: ARRAY
58077: PUSH
58078: LD_INT 1
58080: ARRAY
58081: PPUSH
58082: LD_VAR 0 6
58086: PUSH
58087: LD_VAR 0 4
58091: ARRAY
58092: PUSH
58093: LD_INT 2
58095: ARRAY
58096: PPUSH
58097: CALL_OW 488
58101: NOT
58102: PUSH
58103: LD_VAR 0 6
58107: PUSH
58108: LD_VAR 0 4
58112: ARRAY
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: PPUSH
58118: LD_VAR 0 6
58122: PUSH
58123: LD_VAR 0 4
58127: ARRAY
58128: PUSH
58129: LD_INT 2
58131: ARRAY
58132: PPUSH
58133: CALL_OW 428
58137: PUSH
58138: LD_INT 0
58140: NONEQUAL
58141: OR
58142: IFFALSE 58164
// tmp := Delete ( tmp , i ) ;
58144: LD_ADDR_VAR 0 6
58148: PUSH
58149: LD_VAR 0 6
58153: PPUSH
58154: LD_VAR 0 4
58158: PPUSH
58159: CALL_OW 3
58163: ST_TO_ADDR
58164: GO 58064
58166: POP
58167: POP
// j := GetClosestHex ( unit , tmp ) ;
58168: LD_ADDR_VAR 0 5
58172: PUSH
58173: LD_VAR 0 1
58177: PPUSH
58178: LD_VAR 0 6
58182: PPUSH
58183: CALL 57485 0 2
58187: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58188: LD_VAR 0 1
58192: PPUSH
58193: LD_VAR 0 5
58197: PUSH
58198: LD_INT 1
58200: ARRAY
58201: PPUSH
58202: LD_VAR 0 5
58206: PUSH
58207: LD_INT 2
58209: ARRAY
58210: PPUSH
58211: CALL_OW 111
// end ;
58215: LD_VAR 0 3
58219: RET
// export function PrepareApemanSoldier ( ) ; begin
58220: LD_INT 0
58222: PPUSH
// uc_nation := 0 ;
58223: LD_ADDR_OWVAR 21
58227: PUSH
58228: LD_INT 0
58230: ST_TO_ADDR
// hc_sex := sex_male ;
58231: LD_ADDR_OWVAR 27
58235: PUSH
58236: LD_INT 1
58238: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
58239: LD_ADDR_OWVAR 28
58243: PUSH
58244: LD_INT 15
58246: ST_TO_ADDR
// hc_gallery :=  ;
58247: LD_ADDR_OWVAR 33
58251: PUSH
58252: LD_STRING 
58254: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58255: LD_ADDR_OWVAR 31
58259: PUSH
58260: LD_INT 0
58262: PPUSH
58263: LD_INT 3
58265: PPUSH
58266: CALL_OW 12
58270: PUSH
58271: LD_INT 0
58273: PPUSH
58274: LD_INT 3
58276: PPUSH
58277: CALL_OW 12
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// end ;
58294: LD_VAR 0 1
58298: RET
// export function PrepareApemanEngineer ( ) ; begin
58299: LD_INT 0
58301: PPUSH
// uc_nation := 0 ;
58302: LD_ADDR_OWVAR 21
58306: PUSH
58307: LD_INT 0
58309: ST_TO_ADDR
// hc_sex := sex_male ;
58310: LD_ADDR_OWVAR 27
58314: PUSH
58315: LD_INT 1
58317: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
58318: LD_ADDR_OWVAR 28
58322: PUSH
58323: LD_INT 16
58325: ST_TO_ADDR
// hc_gallery :=  ;
58326: LD_ADDR_OWVAR 33
58330: PUSH
58331: LD_STRING 
58333: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58334: LD_ADDR_OWVAR 31
58338: PUSH
58339: LD_INT 0
58341: PPUSH
58342: LD_INT 3
58344: PPUSH
58345: CALL_OW 12
58349: PUSH
58350: LD_INT 0
58352: PPUSH
58353: LD_INT 3
58355: PPUSH
58356: CALL_OW 12
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: ST_TO_ADDR
// end ;
58373: LD_VAR 0 1
58377: RET
// export function PrepareApeman ( agressivity ) ; begin
58378: LD_INT 0
58380: PPUSH
// uc_side := 0 ;
58381: LD_ADDR_OWVAR 20
58385: PUSH
58386: LD_INT 0
58388: ST_TO_ADDR
// uc_nation := 0 ;
58389: LD_ADDR_OWVAR 21
58393: PUSH
58394: LD_INT 0
58396: ST_TO_ADDR
// hc_sex := sex_male ;
58397: LD_ADDR_OWVAR 27
58401: PUSH
58402: LD_INT 1
58404: ST_TO_ADDR
// hc_class := class_apeman ;
58405: LD_ADDR_OWVAR 28
58409: PUSH
58410: LD_INT 12
58412: ST_TO_ADDR
// hc_gallery :=  ;
58413: LD_ADDR_OWVAR 33
58417: PUSH
58418: LD_STRING 
58420: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58421: LD_ADDR_OWVAR 35
58425: PUSH
58426: LD_VAR 0 1
58430: NEG
58431: PPUSH
58432: LD_VAR 0 1
58436: PPUSH
58437: CALL_OW 12
58441: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58442: LD_ADDR_OWVAR 31
58446: PUSH
58447: LD_INT 0
58449: PPUSH
58450: LD_INT 3
58452: PPUSH
58453: CALL_OW 12
58457: PUSH
58458: LD_INT 0
58460: PPUSH
58461: LD_INT 3
58463: PPUSH
58464: CALL_OW 12
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: ST_TO_ADDR
// end ;
58481: LD_VAR 0 2
58485: RET
// export function PrepareTiger ( agressivity ) ; begin
58486: LD_INT 0
58488: PPUSH
// uc_side := 0 ;
58489: LD_ADDR_OWVAR 20
58493: PUSH
58494: LD_INT 0
58496: ST_TO_ADDR
// uc_nation := 0 ;
58497: LD_ADDR_OWVAR 21
58501: PUSH
58502: LD_INT 0
58504: ST_TO_ADDR
// hc_class := class_tiger ;
58505: LD_ADDR_OWVAR 28
58509: PUSH
58510: LD_INT 14
58512: ST_TO_ADDR
// hc_gallery :=  ;
58513: LD_ADDR_OWVAR 33
58517: PUSH
58518: LD_STRING 
58520: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58521: LD_ADDR_OWVAR 35
58525: PUSH
58526: LD_VAR 0 1
58530: NEG
58531: PPUSH
58532: LD_VAR 0 1
58536: PPUSH
58537: CALL_OW 12
58541: ST_TO_ADDR
// end ;
58542: LD_VAR 0 2
58546: RET
// export function PrepareEnchidna ( ) ; begin
58547: LD_INT 0
58549: PPUSH
// uc_side := 0 ;
58550: LD_ADDR_OWVAR 20
58554: PUSH
58555: LD_INT 0
58557: ST_TO_ADDR
// uc_nation := 0 ;
58558: LD_ADDR_OWVAR 21
58562: PUSH
58563: LD_INT 0
58565: ST_TO_ADDR
// hc_class := class_baggie ;
58566: LD_ADDR_OWVAR 28
58570: PUSH
58571: LD_INT 13
58573: ST_TO_ADDR
// hc_gallery :=  ;
58574: LD_ADDR_OWVAR 33
58578: PUSH
58579: LD_STRING 
58581: ST_TO_ADDR
// end ;
58582: LD_VAR 0 1
58586: RET
// export function PrepareFrog ( ) ; begin
58587: LD_INT 0
58589: PPUSH
// uc_side := 0 ;
58590: LD_ADDR_OWVAR 20
58594: PUSH
58595: LD_INT 0
58597: ST_TO_ADDR
// uc_nation := 0 ;
58598: LD_ADDR_OWVAR 21
58602: PUSH
58603: LD_INT 0
58605: ST_TO_ADDR
// hc_class := class_frog ;
58606: LD_ADDR_OWVAR 28
58610: PUSH
58611: LD_INT 19
58613: ST_TO_ADDR
// hc_gallery :=  ;
58614: LD_ADDR_OWVAR 33
58618: PUSH
58619: LD_STRING 
58621: ST_TO_ADDR
// end ;
58622: LD_VAR 0 1
58626: RET
// export function PrepareFish ( ) ; begin
58627: LD_INT 0
58629: PPUSH
// uc_side := 0 ;
58630: LD_ADDR_OWVAR 20
58634: PUSH
58635: LD_INT 0
58637: ST_TO_ADDR
// uc_nation := 0 ;
58638: LD_ADDR_OWVAR 21
58642: PUSH
58643: LD_INT 0
58645: ST_TO_ADDR
// hc_class := class_fish ;
58646: LD_ADDR_OWVAR 28
58650: PUSH
58651: LD_INT 20
58653: ST_TO_ADDR
// hc_gallery :=  ;
58654: LD_ADDR_OWVAR 33
58658: PUSH
58659: LD_STRING 
58661: ST_TO_ADDR
// end ;
58662: LD_VAR 0 1
58666: RET
// export function PrepareBird ( ) ; begin
58667: LD_INT 0
58669: PPUSH
// uc_side := 0 ;
58670: LD_ADDR_OWVAR 20
58674: PUSH
58675: LD_INT 0
58677: ST_TO_ADDR
// uc_nation := 0 ;
58678: LD_ADDR_OWVAR 21
58682: PUSH
58683: LD_INT 0
58685: ST_TO_ADDR
// hc_class := class_phororhacos ;
58686: LD_ADDR_OWVAR 28
58690: PUSH
58691: LD_INT 18
58693: ST_TO_ADDR
// hc_gallery :=  ;
58694: LD_ADDR_OWVAR 33
58698: PUSH
58699: LD_STRING 
58701: ST_TO_ADDR
// end ;
58702: LD_VAR 0 1
58706: RET
// export function PrepareHorse ( ) ; begin
58707: LD_INT 0
58709: PPUSH
// uc_side := 0 ;
58710: LD_ADDR_OWVAR 20
58714: PUSH
58715: LD_INT 0
58717: ST_TO_ADDR
// uc_nation := 0 ;
58718: LD_ADDR_OWVAR 21
58722: PUSH
58723: LD_INT 0
58725: ST_TO_ADDR
// hc_class := class_horse ;
58726: LD_ADDR_OWVAR 28
58730: PUSH
58731: LD_INT 21
58733: ST_TO_ADDR
// hc_gallery :=  ;
58734: LD_ADDR_OWVAR 33
58738: PUSH
58739: LD_STRING 
58741: ST_TO_ADDR
// end ;
58742: LD_VAR 0 1
58746: RET
// export function PrepareMastodont ( ) ; begin
58747: LD_INT 0
58749: PPUSH
// uc_side := 0 ;
58750: LD_ADDR_OWVAR 20
58754: PUSH
58755: LD_INT 0
58757: ST_TO_ADDR
// uc_nation := 0 ;
58758: LD_ADDR_OWVAR 21
58762: PUSH
58763: LD_INT 0
58765: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58766: LD_ADDR_OWVAR 37
58770: PUSH
58771: LD_INT 31
58773: ST_TO_ADDR
// vc_control := control_rider ;
58774: LD_ADDR_OWVAR 38
58778: PUSH
58779: LD_INT 4
58781: ST_TO_ADDR
// end ;
58782: LD_VAR 0 1
58786: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58787: LD_INT 0
58789: PPUSH
58790: PPUSH
58791: PPUSH
// uc_side = 0 ;
58792: LD_ADDR_OWVAR 20
58796: PUSH
58797: LD_INT 0
58799: ST_TO_ADDR
// uc_nation = 0 ;
58800: LD_ADDR_OWVAR 21
58804: PUSH
58805: LD_INT 0
58807: ST_TO_ADDR
// InitHc_All ( ) ;
58808: CALL_OW 584
// InitVc ;
58812: CALL_OW 20
// if mastodonts then
58816: LD_VAR 0 6
58820: IFFALSE 58887
// for i = 1 to mastodonts do
58822: LD_ADDR_VAR 0 11
58826: PUSH
58827: DOUBLE
58828: LD_INT 1
58830: DEC
58831: ST_TO_ADDR
58832: LD_VAR 0 6
58836: PUSH
58837: FOR_TO
58838: IFFALSE 58885
// begin vc_chassis := 31 ;
58840: LD_ADDR_OWVAR 37
58844: PUSH
58845: LD_INT 31
58847: ST_TO_ADDR
// vc_control := control_rider ;
58848: LD_ADDR_OWVAR 38
58852: PUSH
58853: LD_INT 4
58855: ST_TO_ADDR
// animal := CreateVehicle ;
58856: LD_ADDR_VAR 0 12
58860: PUSH
58861: CALL_OW 45
58865: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58866: LD_VAR 0 12
58870: PPUSH
58871: LD_VAR 0 8
58875: PPUSH
58876: LD_INT 0
58878: PPUSH
58879: CALL 61022 0 3
// end ;
58883: GO 58837
58885: POP
58886: POP
// if horses then
58887: LD_VAR 0 5
58891: IFFALSE 58958
// for i = 1 to horses do
58893: LD_ADDR_VAR 0 11
58897: PUSH
58898: DOUBLE
58899: LD_INT 1
58901: DEC
58902: ST_TO_ADDR
58903: LD_VAR 0 5
58907: PUSH
58908: FOR_TO
58909: IFFALSE 58956
// begin hc_class := 21 ;
58911: LD_ADDR_OWVAR 28
58915: PUSH
58916: LD_INT 21
58918: ST_TO_ADDR
// hc_gallery :=  ;
58919: LD_ADDR_OWVAR 33
58923: PUSH
58924: LD_STRING 
58926: ST_TO_ADDR
// animal := CreateHuman ;
58927: LD_ADDR_VAR 0 12
58931: PUSH
58932: CALL_OW 44
58936: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58937: LD_VAR 0 12
58941: PPUSH
58942: LD_VAR 0 8
58946: PPUSH
58947: LD_INT 0
58949: PPUSH
58950: CALL 61022 0 3
// end ;
58954: GO 58908
58956: POP
58957: POP
// if birds then
58958: LD_VAR 0 1
58962: IFFALSE 59029
// for i = 1 to birds do
58964: LD_ADDR_VAR 0 11
58968: PUSH
58969: DOUBLE
58970: LD_INT 1
58972: DEC
58973: ST_TO_ADDR
58974: LD_VAR 0 1
58978: PUSH
58979: FOR_TO
58980: IFFALSE 59027
// begin hc_class = 18 ;
58982: LD_ADDR_OWVAR 28
58986: PUSH
58987: LD_INT 18
58989: ST_TO_ADDR
// hc_gallery =  ;
58990: LD_ADDR_OWVAR 33
58994: PUSH
58995: LD_STRING 
58997: ST_TO_ADDR
// animal := CreateHuman ;
58998: LD_ADDR_VAR 0 12
59002: PUSH
59003: CALL_OW 44
59007: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59008: LD_VAR 0 12
59012: PPUSH
59013: LD_VAR 0 8
59017: PPUSH
59018: LD_INT 0
59020: PPUSH
59021: CALL 61022 0 3
// end ;
59025: GO 58979
59027: POP
59028: POP
// if tigers then
59029: LD_VAR 0 2
59033: IFFALSE 59117
// for i = 1 to tigers do
59035: LD_ADDR_VAR 0 11
59039: PUSH
59040: DOUBLE
59041: LD_INT 1
59043: DEC
59044: ST_TO_ADDR
59045: LD_VAR 0 2
59049: PUSH
59050: FOR_TO
59051: IFFALSE 59115
// begin hc_class = class_tiger ;
59053: LD_ADDR_OWVAR 28
59057: PUSH
59058: LD_INT 14
59060: ST_TO_ADDR
// hc_gallery =  ;
59061: LD_ADDR_OWVAR 33
59065: PUSH
59066: LD_STRING 
59068: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59069: LD_ADDR_OWVAR 35
59073: PUSH
59074: LD_INT 7
59076: NEG
59077: PPUSH
59078: LD_INT 7
59080: PPUSH
59081: CALL_OW 12
59085: ST_TO_ADDR
// animal := CreateHuman ;
59086: LD_ADDR_VAR 0 12
59090: PUSH
59091: CALL_OW 44
59095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59096: LD_VAR 0 12
59100: PPUSH
59101: LD_VAR 0 8
59105: PPUSH
59106: LD_INT 0
59108: PPUSH
59109: CALL 61022 0 3
// end ;
59113: GO 59050
59115: POP
59116: POP
// if apemans then
59117: LD_VAR 0 3
59121: IFFALSE 59244
// for i = 1 to apemans do
59123: LD_ADDR_VAR 0 11
59127: PUSH
59128: DOUBLE
59129: LD_INT 1
59131: DEC
59132: ST_TO_ADDR
59133: LD_VAR 0 3
59137: PUSH
59138: FOR_TO
59139: IFFALSE 59242
// begin hc_class = class_apeman ;
59141: LD_ADDR_OWVAR 28
59145: PUSH
59146: LD_INT 12
59148: ST_TO_ADDR
// hc_gallery =  ;
59149: LD_ADDR_OWVAR 33
59153: PUSH
59154: LD_STRING 
59156: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
59157: LD_ADDR_OWVAR 35
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PPUSH
59166: LD_INT 2
59168: PPUSH
59169: CALL_OW 12
59173: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59174: LD_ADDR_OWVAR 31
59178: PUSH
59179: LD_INT 1
59181: PPUSH
59182: LD_INT 3
59184: PPUSH
59185: CALL_OW 12
59189: PUSH
59190: LD_INT 1
59192: PPUSH
59193: LD_INT 3
59195: PPUSH
59196: CALL_OW 12
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: ST_TO_ADDR
// animal := CreateHuman ;
59213: LD_ADDR_VAR 0 12
59217: PUSH
59218: CALL_OW 44
59222: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59223: LD_VAR 0 12
59227: PPUSH
59228: LD_VAR 0 8
59232: PPUSH
59233: LD_INT 0
59235: PPUSH
59236: CALL 61022 0 3
// end ;
59240: GO 59138
59242: POP
59243: POP
// if enchidnas then
59244: LD_VAR 0 4
59248: IFFALSE 59315
// for i = 1 to enchidnas do
59250: LD_ADDR_VAR 0 11
59254: PUSH
59255: DOUBLE
59256: LD_INT 1
59258: DEC
59259: ST_TO_ADDR
59260: LD_VAR 0 4
59264: PUSH
59265: FOR_TO
59266: IFFALSE 59313
// begin hc_class = 13 ;
59268: LD_ADDR_OWVAR 28
59272: PUSH
59273: LD_INT 13
59275: ST_TO_ADDR
// hc_gallery =  ;
59276: LD_ADDR_OWVAR 33
59280: PUSH
59281: LD_STRING 
59283: ST_TO_ADDR
// animal := CreateHuman ;
59284: LD_ADDR_VAR 0 12
59288: PUSH
59289: CALL_OW 44
59293: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59294: LD_VAR 0 12
59298: PPUSH
59299: LD_VAR 0 8
59303: PPUSH
59304: LD_INT 0
59306: PPUSH
59307: CALL 61022 0 3
// end ;
59311: GO 59265
59313: POP
59314: POP
// if fishes then
59315: LD_VAR 0 7
59319: IFFALSE 59386
// for i = 1 to fishes do
59321: LD_ADDR_VAR 0 11
59325: PUSH
59326: DOUBLE
59327: LD_INT 1
59329: DEC
59330: ST_TO_ADDR
59331: LD_VAR 0 7
59335: PUSH
59336: FOR_TO
59337: IFFALSE 59384
// begin hc_class = 20 ;
59339: LD_ADDR_OWVAR 28
59343: PUSH
59344: LD_INT 20
59346: ST_TO_ADDR
// hc_gallery =  ;
59347: LD_ADDR_OWVAR 33
59351: PUSH
59352: LD_STRING 
59354: ST_TO_ADDR
// animal := CreateHuman ;
59355: LD_ADDR_VAR 0 12
59359: PUSH
59360: CALL_OW 44
59364: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59365: LD_VAR 0 12
59369: PPUSH
59370: LD_VAR 0 9
59374: PPUSH
59375: LD_INT 0
59377: PPUSH
59378: CALL 61022 0 3
// end ;
59382: GO 59336
59384: POP
59385: POP
// end ;
59386: LD_VAR 0 10
59390: RET
// export function WantHeal ( sci , unit ) ; begin
59391: LD_INT 0
59393: PPUSH
// if GetTaskList ( sci ) > 0 then
59394: LD_VAR 0 1
59398: PPUSH
59399: CALL_OW 437
59403: PUSH
59404: LD_INT 0
59406: GREATER
59407: IFFALSE 59477
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59409: LD_VAR 0 1
59413: PPUSH
59414: CALL_OW 437
59418: PUSH
59419: LD_INT 1
59421: ARRAY
59422: PUSH
59423: LD_INT 1
59425: ARRAY
59426: PUSH
59427: LD_STRING l
59429: EQUAL
59430: PUSH
59431: LD_VAR 0 1
59435: PPUSH
59436: CALL_OW 437
59440: PUSH
59441: LD_INT 1
59443: ARRAY
59444: PUSH
59445: LD_INT 4
59447: ARRAY
59448: PUSH
59449: LD_VAR 0 2
59453: EQUAL
59454: AND
59455: IFFALSE 59467
// result := true else
59457: LD_ADDR_VAR 0 3
59461: PUSH
59462: LD_INT 1
59464: ST_TO_ADDR
59465: GO 59475
// result := false ;
59467: LD_ADDR_VAR 0 3
59471: PUSH
59472: LD_INT 0
59474: ST_TO_ADDR
// end else
59475: GO 59485
// result := false ;
59477: LD_ADDR_VAR 0 3
59481: PUSH
59482: LD_INT 0
59484: ST_TO_ADDR
// end ;
59485: LD_VAR 0 3
59489: RET
// export function HealTarget ( sci ) ; begin
59490: LD_INT 0
59492: PPUSH
// if not sci then
59493: LD_VAR 0 1
59497: NOT
59498: IFFALSE 59502
// exit ;
59500: GO 59567
// result := 0 ;
59502: LD_ADDR_VAR 0 2
59506: PUSH
59507: LD_INT 0
59509: ST_TO_ADDR
// if GetTaskList ( sci ) then
59510: LD_VAR 0 1
59514: PPUSH
59515: CALL_OW 437
59519: IFFALSE 59567
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59521: LD_VAR 0 1
59525: PPUSH
59526: CALL_OW 437
59530: PUSH
59531: LD_INT 1
59533: ARRAY
59534: PUSH
59535: LD_INT 1
59537: ARRAY
59538: PUSH
59539: LD_STRING l
59541: EQUAL
59542: IFFALSE 59567
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59544: LD_ADDR_VAR 0 2
59548: PUSH
59549: LD_VAR 0 1
59553: PPUSH
59554: CALL_OW 437
59558: PUSH
59559: LD_INT 1
59561: ARRAY
59562: PUSH
59563: LD_INT 4
59565: ARRAY
59566: ST_TO_ADDR
// end ;
59567: LD_VAR 0 2
59571: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59572: LD_INT 0
59574: PPUSH
59575: PPUSH
59576: PPUSH
59577: PPUSH
// if not base_units then
59578: LD_VAR 0 1
59582: NOT
59583: IFFALSE 59587
// exit ;
59585: GO 59674
// result := false ;
59587: LD_ADDR_VAR 0 2
59591: PUSH
59592: LD_INT 0
59594: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59595: LD_ADDR_VAR 0 5
59599: PUSH
59600: LD_VAR 0 1
59604: PPUSH
59605: LD_INT 21
59607: PUSH
59608: LD_INT 3
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PPUSH
59615: CALL_OW 72
59619: ST_TO_ADDR
// if not tmp then
59620: LD_VAR 0 5
59624: NOT
59625: IFFALSE 59629
// exit ;
59627: GO 59674
// for i in tmp do
59629: LD_ADDR_VAR 0 3
59633: PUSH
59634: LD_VAR 0 5
59638: PUSH
59639: FOR_IN
59640: IFFALSE 59672
// begin result := EnemyInRange ( i , 22 ) ;
59642: LD_ADDR_VAR 0 2
59646: PUSH
59647: LD_VAR 0 3
59651: PPUSH
59652: LD_INT 22
59654: PPUSH
59655: CALL 57287 0 2
59659: ST_TO_ADDR
// if result then
59660: LD_VAR 0 2
59664: IFFALSE 59670
// exit ;
59666: POP
59667: POP
59668: GO 59674
// end ;
59670: GO 59639
59672: POP
59673: POP
// end ;
59674: LD_VAR 0 2
59678: RET
// export function FilterByTag ( units , tag ) ; begin
59679: LD_INT 0
59681: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59682: LD_ADDR_VAR 0 3
59686: PUSH
59687: LD_VAR 0 1
59691: PPUSH
59692: LD_INT 120
59694: PUSH
59695: LD_VAR 0 2
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PPUSH
59704: CALL_OW 72
59708: ST_TO_ADDR
// end ;
59709: LD_VAR 0 3
59713: RET
// export function IsDriver ( un ) ; begin
59714: LD_INT 0
59716: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59717: LD_ADDR_VAR 0 2
59721: PUSH
59722: LD_VAR 0 1
59726: PUSH
59727: LD_INT 55
59729: PUSH
59730: EMPTY
59731: LIST
59732: PPUSH
59733: CALL_OW 69
59737: IN
59738: ST_TO_ADDR
// end ;
59739: LD_VAR 0 2
59743: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59744: LD_INT 0
59746: PPUSH
59747: PPUSH
// list := [ ] ;
59748: LD_ADDR_VAR 0 5
59752: PUSH
59753: EMPTY
59754: ST_TO_ADDR
// case d of 0 :
59755: LD_VAR 0 3
59759: PUSH
59760: LD_INT 0
59762: DOUBLE
59763: EQUAL
59764: IFTRUE 59768
59766: GO 59901
59768: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59769: LD_ADDR_VAR 0 5
59773: PUSH
59774: LD_VAR 0 1
59778: PUSH
59779: LD_INT 4
59781: MINUS
59782: PUSH
59783: LD_VAR 0 2
59787: PUSH
59788: LD_INT 4
59790: MINUS
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: LIST
59799: PUSH
59800: LD_VAR 0 1
59804: PUSH
59805: LD_INT 3
59807: MINUS
59808: PUSH
59809: LD_VAR 0 2
59813: PUSH
59814: LD_INT 1
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: LD_VAR 0 1
59826: PUSH
59827: LD_INT 4
59829: PLUS
59830: PUSH
59831: LD_VAR 0 2
59835: PUSH
59836: LD_INT 4
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: LIST
59843: PUSH
59844: LD_VAR 0 1
59848: PUSH
59849: LD_INT 3
59851: PLUS
59852: PUSH
59853: LD_VAR 0 2
59857: PUSH
59858: LD_INT 3
59860: PLUS
59861: PUSH
59862: LD_INT 5
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: LIST
59869: PUSH
59870: LD_VAR 0 1
59874: PUSH
59875: LD_VAR 0 2
59879: PUSH
59880: LD_INT 4
59882: PLUS
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: LIST
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: ST_TO_ADDR
// end ; 1 :
59899: GO 60599
59901: LD_INT 1
59903: DOUBLE
59904: EQUAL
59905: IFTRUE 59909
59907: GO 60042
59909: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59910: LD_ADDR_VAR 0 5
59914: PUSH
59915: LD_VAR 0 1
59919: PUSH
59920: LD_VAR 0 2
59924: PUSH
59925: LD_INT 4
59927: MINUS
59928: PUSH
59929: LD_INT 3
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: LIST
59936: PUSH
59937: LD_VAR 0 1
59941: PUSH
59942: LD_INT 3
59944: MINUS
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 3
59953: MINUS
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: PUSH
59963: LD_VAR 0 1
59967: PUSH
59968: LD_INT 4
59970: MINUS
59971: PUSH
59972: LD_VAR 0 2
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: PUSH
59985: LD_VAR 0 1
59989: PUSH
59990: LD_VAR 0 2
59994: PUSH
59995: LD_INT 3
59997: PLUS
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: LIST
60006: PUSH
60007: LD_VAR 0 1
60011: PUSH
60012: LD_INT 4
60014: PLUS
60015: PUSH
60016: LD_VAR 0 2
60020: PUSH
60021: LD_INT 4
60023: PLUS
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: ST_TO_ADDR
// end ; 2 :
60040: GO 60599
60042: LD_INT 2
60044: DOUBLE
60045: EQUAL
60046: IFTRUE 60050
60048: GO 60179
60050: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60051: LD_ADDR_VAR 0 5
60055: PUSH
60056: LD_VAR 0 1
60060: PUSH
60061: LD_VAR 0 2
60065: PUSH
60066: LD_INT 3
60068: MINUS
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: LIST
60077: PUSH
60078: LD_VAR 0 1
60082: PUSH
60083: LD_INT 4
60085: PLUS
60086: PUSH
60087: LD_VAR 0 2
60091: PUSH
60092: LD_INT 4
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: LIST
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_VAR 0 2
60109: PUSH
60110: LD_INT 4
60112: PLUS
60113: PUSH
60114: LD_INT 0
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: PUSH
60122: LD_VAR 0 1
60126: PUSH
60127: LD_INT 3
60129: MINUS
60130: PUSH
60131: LD_VAR 0 2
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: PUSH
60144: LD_VAR 0 1
60148: PUSH
60149: LD_INT 4
60151: MINUS
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: LD_INT 4
60160: MINUS
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: ST_TO_ADDR
// end ; 3 :
60177: GO 60599
60179: LD_INT 3
60181: DOUBLE
60182: EQUAL
60183: IFTRUE 60187
60185: GO 60320
60187: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60188: LD_ADDR_VAR 0 5
60192: PUSH
60193: LD_VAR 0 1
60197: PUSH
60198: LD_INT 3
60200: PLUS
60201: PUSH
60202: LD_VAR 0 2
60206: PUSH
60207: LD_INT 4
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: LIST
60214: PUSH
60215: LD_VAR 0 1
60219: PUSH
60220: LD_INT 4
60222: PLUS
60223: PUSH
60224: LD_VAR 0 2
60228: PUSH
60229: LD_INT 4
60231: PLUS
60232: PUSH
60233: LD_INT 5
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: LIST
60240: PUSH
60241: LD_VAR 0 1
60245: PUSH
60246: LD_INT 4
60248: MINUS
60249: PUSH
60250: LD_VAR 0 2
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: PUSH
60263: LD_VAR 0 1
60267: PUSH
60268: LD_VAR 0 2
60272: PUSH
60273: LD_INT 4
60275: MINUS
60276: PUSH
60277: LD_INT 3
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: PUSH
60285: LD_VAR 0 1
60289: PUSH
60290: LD_INT 3
60292: MINUS
60293: PUSH
60294: LD_VAR 0 2
60298: PUSH
60299: LD_INT 3
60301: MINUS
60302: PUSH
60303: LD_INT 2
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: ST_TO_ADDR
// end ; 4 :
60318: GO 60599
60320: LD_INT 4
60322: DOUBLE
60323: EQUAL
60324: IFTRUE 60328
60326: GO 60461
60328: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60329: LD_ADDR_VAR 0 5
60333: PUSH
60334: LD_VAR 0 1
60338: PUSH
60339: LD_VAR 0 2
60343: PUSH
60344: LD_INT 4
60346: PLUS
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: LIST
60355: PUSH
60356: LD_VAR 0 1
60360: PUSH
60361: LD_INT 3
60363: PLUS
60364: PUSH
60365: LD_VAR 0 2
60369: PUSH
60370: LD_INT 3
60372: PLUS
60373: PUSH
60374: LD_INT 5
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: PUSH
60382: LD_VAR 0 1
60386: PUSH
60387: LD_INT 4
60389: PLUS
60390: PUSH
60391: LD_VAR 0 2
60395: PUSH
60396: LD_INT 4
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: LIST
60403: PUSH
60404: LD_VAR 0 1
60408: PUSH
60409: LD_VAR 0 2
60413: PUSH
60414: LD_INT 3
60416: MINUS
60417: PUSH
60418: LD_INT 3
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: LIST
60425: PUSH
60426: LD_VAR 0 1
60430: PUSH
60431: LD_INT 4
60433: MINUS
60434: PUSH
60435: LD_VAR 0 2
60439: PUSH
60440: LD_INT 4
60442: MINUS
60443: PUSH
60444: LD_INT 2
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: ST_TO_ADDR
// end ; 5 :
60459: GO 60599
60461: LD_INT 5
60463: DOUBLE
60464: EQUAL
60465: IFTRUE 60469
60467: GO 60598
60469: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60470: LD_ADDR_VAR 0 5
60474: PUSH
60475: LD_VAR 0 1
60479: PUSH
60480: LD_INT 4
60482: MINUS
60483: PUSH
60484: LD_VAR 0 2
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: PUSH
60497: LD_VAR 0 1
60501: PUSH
60502: LD_VAR 0 2
60506: PUSH
60507: LD_INT 4
60509: MINUS
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: LIST
60518: PUSH
60519: LD_VAR 0 1
60523: PUSH
60524: LD_INT 4
60526: PLUS
60527: PUSH
60528: LD_VAR 0 2
60532: PUSH
60533: LD_INT 4
60535: PLUS
60536: PUSH
60537: LD_INT 5
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: PUSH
60545: LD_VAR 0 1
60549: PUSH
60550: LD_INT 3
60552: PLUS
60553: PUSH
60554: LD_VAR 0 2
60558: PUSH
60559: LD_INT 4
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: LIST
60566: PUSH
60567: LD_VAR 0 1
60571: PUSH
60572: LD_VAR 0 2
60576: PUSH
60577: LD_INT 3
60579: PLUS
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: ST_TO_ADDR
// end ; end ;
60596: GO 60599
60598: POP
// result := list ;
60599: LD_ADDR_VAR 0 4
60603: PUSH
60604: LD_VAR 0 5
60608: ST_TO_ADDR
// end ;
60609: LD_VAR 0 4
60613: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60614: LD_INT 0
60616: PPUSH
60617: PPUSH
60618: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60619: LD_VAR 0 1
60623: NOT
60624: PUSH
60625: LD_VAR 0 2
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 3
60638: PUSH
60639: LD_INT 4
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: IN
60648: NOT
60649: OR
60650: IFFALSE 60654
// exit ;
60652: GO 60746
// tmp := [ ] ;
60654: LD_ADDR_VAR 0 5
60658: PUSH
60659: EMPTY
60660: ST_TO_ADDR
// for i in units do
60661: LD_ADDR_VAR 0 4
60665: PUSH
60666: LD_VAR 0 1
60670: PUSH
60671: FOR_IN
60672: IFFALSE 60715
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60674: LD_ADDR_VAR 0 5
60678: PUSH
60679: LD_VAR 0 5
60683: PPUSH
60684: LD_VAR 0 5
60688: PUSH
60689: LD_INT 1
60691: PLUS
60692: PPUSH
60693: LD_VAR 0 4
60697: PPUSH
60698: LD_VAR 0 2
60702: PPUSH
60703: CALL_OW 259
60707: PPUSH
60708: CALL_OW 2
60712: ST_TO_ADDR
60713: GO 60671
60715: POP
60716: POP
// if not tmp then
60717: LD_VAR 0 5
60721: NOT
60722: IFFALSE 60726
// exit ;
60724: GO 60746
// result := SortListByListDesc ( units , tmp ) ;
60726: LD_ADDR_VAR 0 3
60730: PUSH
60731: LD_VAR 0 1
60735: PPUSH
60736: LD_VAR 0 5
60740: PPUSH
60741: CALL_OW 77
60745: ST_TO_ADDR
// end ;
60746: LD_VAR 0 3
60750: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60751: LD_INT 0
60753: PPUSH
60754: PPUSH
60755: PPUSH
// result := false ;
60756: LD_ADDR_VAR 0 3
60760: PUSH
60761: LD_INT 0
60763: ST_TO_ADDR
// x := GetX ( building ) ;
60764: LD_ADDR_VAR 0 4
60768: PUSH
60769: LD_VAR 0 2
60773: PPUSH
60774: CALL_OW 250
60778: ST_TO_ADDR
// y := GetY ( building ) ;
60779: LD_ADDR_VAR 0 5
60783: PUSH
60784: LD_VAR 0 2
60788: PPUSH
60789: CALL_OW 251
60793: ST_TO_ADDR
// if not building or not x or not y then
60794: LD_VAR 0 2
60798: NOT
60799: PUSH
60800: LD_VAR 0 4
60804: NOT
60805: OR
60806: PUSH
60807: LD_VAR 0 5
60811: NOT
60812: OR
60813: IFFALSE 60817
// exit ;
60815: GO 60909
// if GetTaskList ( unit ) then
60817: LD_VAR 0 1
60821: PPUSH
60822: CALL_OW 437
60826: IFFALSE 60909
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60828: LD_STRING e
60830: PUSH
60831: LD_VAR 0 1
60835: PPUSH
60836: CALL_OW 437
60840: PUSH
60841: LD_INT 1
60843: ARRAY
60844: PUSH
60845: LD_INT 1
60847: ARRAY
60848: EQUAL
60849: PUSH
60850: LD_VAR 0 4
60854: PUSH
60855: LD_VAR 0 1
60859: PPUSH
60860: CALL_OW 437
60864: PUSH
60865: LD_INT 1
60867: ARRAY
60868: PUSH
60869: LD_INT 2
60871: ARRAY
60872: EQUAL
60873: AND
60874: PUSH
60875: LD_VAR 0 5
60879: PUSH
60880: LD_VAR 0 1
60884: PPUSH
60885: CALL_OW 437
60889: PUSH
60890: LD_INT 1
60892: ARRAY
60893: PUSH
60894: LD_INT 3
60896: ARRAY
60897: EQUAL
60898: AND
60899: IFFALSE 60909
// result := true end ;
60901: LD_ADDR_VAR 0 3
60905: PUSH
60906: LD_INT 1
60908: ST_TO_ADDR
// end ;
60909: LD_VAR 0 3
60913: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60914: LD_INT 0
60916: PPUSH
// result := false ;
60917: LD_ADDR_VAR 0 4
60921: PUSH
60922: LD_INT 0
60924: ST_TO_ADDR
// if GetTaskList ( unit ) then
60925: LD_VAR 0 1
60929: PPUSH
60930: CALL_OW 437
60934: IFFALSE 61017
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60936: LD_STRING M
60938: PUSH
60939: LD_VAR 0 1
60943: PPUSH
60944: CALL_OW 437
60948: PUSH
60949: LD_INT 1
60951: ARRAY
60952: PUSH
60953: LD_INT 1
60955: ARRAY
60956: EQUAL
60957: PUSH
60958: LD_VAR 0 2
60962: PUSH
60963: LD_VAR 0 1
60967: PPUSH
60968: CALL_OW 437
60972: PUSH
60973: LD_INT 1
60975: ARRAY
60976: PUSH
60977: LD_INT 2
60979: ARRAY
60980: EQUAL
60981: AND
60982: PUSH
60983: LD_VAR 0 3
60987: PUSH
60988: LD_VAR 0 1
60992: PPUSH
60993: CALL_OW 437
60997: PUSH
60998: LD_INT 1
61000: ARRAY
61001: PUSH
61002: LD_INT 3
61004: ARRAY
61005: EQUAL
61006: AND
61007: IFFALSE 61017
// result := true ;
61009: LD_ADDR_VAR 0 4
61013: PUSH
61014: LD_INT 1
61016: ST_TO_ADDR
// end ; end ;
61017: LD_VAR 0 4
61021: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61022: LD_INT 0
61024: PPUSH
61025: PPUSH
61026: PPUSH
61027: PPUSH
// if not unit or not area then
61028: LD_VAR 0 1
61032: NOT
61033: PUSH
61034: LD_VAR 0 2
61038: NOT
61039: OR
61040: IFFALSE 61044
// exit ;
61042: GO 61208
// tmp := AreaToList ( area , i ) ;
61044: LD_ADDR_VAR 0 6
61048: PUSH
61049: LD_VAR 0 2
61053: PPUSH
61054: LD_VAR 0 5
61058: PPUSH
61059: CALL_OW 517
61063: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61064: LD_ADDR_VAR 0 5
61068: PUSH
61069: DOUBLE
61070: LD_INT 1
61072: DEC
61073: ST_TO_ADDR
61074: LD_VAR 0 6
61078: PUSH
61079: LD_INT 1
61081: ARRAY
61082: PUSH
61083: FOR_TO
61084: IFFALSE 61206
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61086: LD_ADDR_VAR 0 7
61090: PUSH
61091: LD_VAR 0 6
61095: PUSH
61096: LD_INT 1
61098: ARRAY
61099: PUSH
61100: LD_VAR 0 5
61104: ARRAY
61105: PUSH
61106: LD_VAR 0 6
61110: PUSH
61111: LD_INT 2
61113: ARRAY
61114: PUSH
61115: LD_VAR 0 5
61119: ARRAY
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61125: LD_VAR 0 7
61129: PUSH
61130: LD_INT 1
61132: ARRAY
61133: PPUSH
61134: LD_VAR 0 7
61138: PUSH
61139: LD_INT 2
61141: ARRAY
61142: PPUSH
61143: CALL_OW 428
61147: PUSH
61148: LD_INT 0
61150: EQUAL
61151: IFFALSE 61204
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61153: LD_VAR 0 1
61157: PPUSH
61158: LD_VAR 0 7
61162: PUSH
61163: LD_INT 1
61165: ARRAY
61166: PPUSH
61167: LD_VAR 0 7
61171: PUSH
61172: LD_INT 2
61174: ARRAY
61175: PPUSH
61176: LD_VAR 0 3
61180: PPUSH
61181: CALL_OW 48
// result := IsPlaced ( unit ) ;
61185: LD_ADDR_VAR 0 4
61189: PUSH
61190: LD_VAR 0 1
61194: PPUSH
61195: CALL_OW 305
61199: ST_TO_ADDR
// exit ;
61200: POP
61201: POP
61202: GO 61208
// end ; end ;
61204: GO 61083
61206: POP
61207: POP
// end ;
61208: LD_VAR 0 4
61212: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61213: LD_INT 0
61215: PPUSH
61216: PPUSH
61217: PPUSH
// if not side or side > 8 then
61218: LD_VAR 0 1
61222: NOT
61223: PUSH
61224: LD_VAR 0 1
61228: PUSH
61229: LD_INT 8
61231: GREATER
61232: OR
61233: IFFALSE 61237
// exit ;
61235: GO 61424
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61237: LD_ADDR_VAR 0 4
61241: PUSH
61242: LD_INT 22
61244: PUSH
61245: LD_VAR 0 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 21
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PPUSH
61268: CALL_OW 69
61272: ST_TO_ADDR
// if not tmp then
61273: LD_VAR 0 4
61277: NOT
61278: IFFALSE 61282
// exit ;
61280: GO 61424
// enable_addtolog := true ;
61282: LD_ADDR_OWVAR 81
61286: PUSH
61287: LD_INT 1
61289: ST_TO_ADDR
// AddToLog ( [ ) ;
61290: LD_STRING [
61292: PPUSH
61293: CALL_OW 561
// for i in tmp do
61297: LD_ADDR_VAR 0 3
61301: PUSH
61302: LD_VAR 0 4
61306: PUSH
61307: FOR_IN
61308: IFFALSE 61415
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61310: LD_STRING [
61312: PUSH
61313: LD_VAR 0 3
61317: PPUSH
61318: CALL_OW 266
61322: STR
61323: PUSH
61324: LD_STRING , 
61326: STR
61327: PUSH
61328: LD_VAR 0 3
61332: PPUSH
61333: CALL_OW 250
61337: STR
61338: PUSH
61339: LD_STRING , 
61341: STR
61342: PUSH
61343: LD_VAR 0 3
61347: PPUSH
61348: CALL_OW 251
61352: STR
61353: PUSH
61354: LD_STRING , 
61356: STR
61357: PUSH
61358: LD_VAR 0 3
61362: PPUSH
61363: CALL_OW 254
61367: STR
61368: PUSH
61369: LD_STRING , 
61371: STR
61372: PUSH
61373: LD_VAR 0 3
61377: PPUSH
61378: LD_INT 1
61380: PPUSH
61381: CALL_OW 268
61385: STR
61386: PUSH
61387: LD_STRING , 
61389: STR
61390: PUSH
61391: LD_VAR 0 3
61395: PPUSH
61396: LD_INT 2
61398: PPUSH
61399: CALL_OW 268
61403: STR
61404: PUSH
61405: LD_STRING ],
61407: STR
61408: PPUSH
61409: CALL_OW 561
// end ;
61413: GO 61307
61415: POP
61416: POP
// AddToLog ( ]; ) ;
61417: LD_STRING ];
61419: PPUSH
61420: CALL_OW 561
// end ;
61424: LD_VAR 0 2
61428: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61429: LD_INT 0
61431: PPUSH
61432: PPUSH
61433: PPUSH
61434: PPUSH
61435: PPUSH
// if not area or not rate or not max then
61436: LD_VAR 0 1
61440: NOT
61441: PUSH
61442: LD_VAR 0 2
61446: NOT
61447: OR
61448: PUSH
61449: LD_VAR 0 4
61453: NOT
61454: OR
61455: IFFALSE 61459
// exit ;
61457: GO 61648
// while 1 do
61459: LD_INT 1
61461: IFFALSE 61648
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61463: LD_ADDR_VAR 0 9
61467: PUSH
61468: LD_VAR 0 1
61472: PPUSH
61473: LD_INT 1
61475: PPUSH
61476: CALL_OW 287
61480: PUSH
61481: LD_INT 10
61483: MUL
61484: ST_TO_ADDR
// r := rate / 10 ;
61485: LD_ADDR_VAR 0 7
61489: PUSH
61490: LD_VAR 0 2
61494: PUSH
61495: LD_INT 10
61497: DIVREAL
61498: ST_TO_ADDR
// time := 1 1$00 ;
61499: LD_ADDR_VAR 0 8
61503: PUSH
61504: LD_INT 2100
61506: ST_TO_ADDR
// if amount < min then
61507: LD_VAR 0 9
61511: PUSH
61512: LD_VAR 0 3
61516: LESS
61517: IFFALSE 61535
// r := r * 2 else
61519: LD_ADDR_VAR 0 7
61523: PUSH
61524: LD_VAR 0 7
61528: PUSH
61529: LD_INT 2
61531: MUL
61532: ST_TO_ADDR
61533: GO 61561
// if amount > max then
61535: LD_VAR 0 9
61539: PUSH
61540: LD_VAR 0 4
61544: GREATER
61545: IFFALSE 61561
// r := r / 2 ;
61547: LD_ADDR_VAR 0 7
61551: PUSH
61552: LD_VAR 0 7
61556: PUSH
61557: LD_INT 2
61559: DIVREAL
61560: ST_TO_ADDR
// time := time / r ;
61561: LD_ADDR_VAR 0 8
61565: PUSH
61566: LD_VAR 0 8
61570: PUSH
61571: LD_VAR 0 7
61575: DIVREAL
61576: ST_TO_ADDR
// if time < 0 then
61577: LD_VAR 0 8
61581: PUSH
61582: LD_INT 0
61584: LESS
61585: IFFALSE 61602
// time := time * - 1 ;
61587: LD_ADDR_VAR 0 8
61591: PUSH
61592: LD_VAR 0 8
61596: PUSH
61597: LD_INT 1
61599: NEG
61600: MUL
61601: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61602: LD_VAR 0 8
61606: PUSH
61607: LD_INT 35
61609: PPUSH
61610: LD_INT 875
61612: PPUSH
61613: CALL_OW 12
61617: PLUS
61618: PPUSH
61619: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61623: LD_INT 1
61625: PPUSH
61626: LD_INT 5
61628: PPUSH
61629: CALL_OW 12
61633: PPUSH
61634: LD_VAR 0 1
61638: PPUSH
61639: LD_INT 1
61641: PPUSH
61642: CALL_OW 55
// end ;
61646: GO 61459
// end ;
61648: LD_VAR 0 5
61652: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61653: LD_INT 0
61655: PPUSH
61656: PPUSH
61657: PPUSH
61658: PPUSH
61659: PPUSH
61660: PPUSH
61661: PPUSH
61662: PPUSH
// if not turrets or not factories then
61663: LD_VAR 0 1
61667: NOT
61668: PUSH
61669: LD_VAR 0 2
61673: NOT
61674: OR
61675: IFFALSE 61679
// exit ;
61677: GO 61986
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61679: LD_ADDR_VAR 0 10
61683: PUSH
61684: LD_INT 5
61686: PUSH
61687: LD_INT 6
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 2
61696: PUSH
61697: LD_INT 4
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 3
61706: PUSH
61707: LD_INT 5
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 24
61721: PUSH
61722: LD_INT 25
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 23
61731: PUSH
61732: LD_INT 27
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 42
61745: PUSH
61746: LD_INT 43
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 44
61755: PUSH
61756: LD_INT 46
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 45
61765: PUSH
61766: LD_INT 47
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: LIST
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: LIST
61782: ST_TO_ADDR
// result := [ ] ;
61783: LD_ADDR_VAR 0 3
61787: PUSH
61788: EMPTY
61789: ST_TO_ADDR
// for i in turrets do
61790: LD_ADDR_VAR 0 4
61794: PUSH
61795: LD_VAR 0 1
61799: PUSH
61800: FOR_IN
61801: IFFALSE 61984
// begin nat := GetNation ( i ) ;
61803: LD_ADDR_VAR 0 7
61807: PUSH
61808: LD_VAR 0 4
61812: PPUSH
61813: CALL_OW 248
61817: ST_TO_ADDR
// weapon := 0 ;
61818: LD_ADDR_VAR 0 8
61822: PUSH
61823: LD_INT 0
61825: ST_TO_ADDR
// if not nat then
61826: LD_VAR 0 7
61830: NOT
61831: IFFALSE 61835
// continue ;
61833: GO 61800
// for j in list [ nat ] do
61835: LD_ADDR_VAR 0 5
61839: PUSH
61840: LD_VAR 0 10
61844: PUSH
61845: LD_VAR 0 7
61849: ARRAY
61850: PUSH
61851: FOR_IN
61852: IFFALSE 61893
// if GetBWeapon ( i ) = j [ 1 ] then
61854: LD_VAR 0 4
61858: PPUSH
61859: CALL_OW 269
61863: PUSH
61864: LD_VAR 0 5
61868: PUSH
61869: LD_INT 1
61871: ARRAY
61872: EQUAL
61873: IFFALSE 61891
// begin weapon := j [ 2 ] ;
61875: LD_ADDR_VAR 0 8
61879: PUSH
61880: LD_VAR 0 5
61884: PUSH
61885: LD_INT 2
61887: ARRAY
61888: ST_TO_ADDR
// break ;
61889: GO 61893
// end ;
61891: GO 61851
61893: POP
61894: POP
// if not weapon then
61895: LD_VAR 0 8
61899: NOT
61900: IFFALSE 61904
// continue ;
61902: GO 61800
// for k in factories do
61904: LD_ADDR_VAR 0 6
61908: PUSH
61909: LD_VAR 0 2
61913: PUSH
61914: FOR_IN
61915: IFFALSE 61980
// begin weapons := AvailableWeaponList ( k ) ;
61917: LD_ADDR_VAR 0 9
61921: PUSH
61922: LD_VAR 0 6
61926: PPUSH
61927: CALL_OW 478
61931: ST_TO_ADDR
// if not weapons then
61932: LD_VAR 0 9
61936: NOT
61937: IFFALSE 61941
// continue ;
61939: GO 61914
// if weapon in weapons then
61941: LD_VAR 0 8
61945: PUSH
61946: LD_VAR 0 9
61950: IN
61951: IFFALSE 61978
// begin result := [ i , weapon ] ;
61953: LD_ADDR_VAR 0 3
61957: PUSH
61958: LD_VAR 0 4
61962: PUSH
61963: LD_VAR 0 8
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: ST_TO_ADDR
// exit ;
61972: POP
61973: POP
61974: POP
61975: POP
61976: GO 61986
// end ; end ;
61978: GO 61914
61980: POP
61981: POP
// end ;
61982: GO 61800
61984: POP
61985: POP
// end ;
61986: LD_VAR 0 3
61990: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61991: LD_INT 0
61993: PPUSH
// if not side or side > 8 then
61994: LD_VAR 0 3
61998: NOT
61999: PUSH
62000: LD_VAR 0 3
62004: PUSH
62005: LD_INT 8
62007: GREATER
62008: OR
62009: IFFALSE 62013
// exit ;
62011: GO 62072
// if not range then
62013: LD_VAR 0 4
62017: NOT
62018: IFFALSE 62029
// range := - 12 ;
62020: LD_ADDR_VAR 0 4
62024: PUSH
62025: LD_INT 12
62027: NEG
62028: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62029: LD_VAR 0 1
62033: PPUSH
62034: LD_VAR 0 2
62038: PPUSH
62039: LD_VAR 0 3
62043: PPUSH
62044: LD_VAR 0 4
62048: PPUSH
62049: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62053: LD_VAR 0 1
62057: PPUSH
62058: LD_VAR 0 2
62062: PPUSH
62063: LD_VAR 0 3
62067: PPUSH
62068: CALL_OW 331
// end ;
62072: LD_VAR 0 5
62076: RET
// export function Video ( mode ) ; begin
62077: LD_INT 0
62079: PPUSH
// ingame_video = mode ;
62080: LD_ADDR_OWVAR 52
62084: PUSH
62085: LD_VAR 0 1
62089: ST_TO_ADDR
// interface_hidden = mode ;
62090: LD_ADDR_OWVAR 54
62094: PUSH
62095: LD_VAR 0 1
62099: ST_TO_ADDR
// end ;
62100: LD_VAR 0 2
62104: RET
// export function Join ( array , element ) ; begin
62105: LD_INT 0
62107: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62108: LD_ADDR_VAR 0 3
62112: PUSH
62113: LD_VAR 0 1
62117: PPUSH
62118: LD_VAR 0 1
62122: PUSH
62123: LD_INT 1
62125: PLUS
62126: PPUSH
62127: LD_VAR 0 2
62131: PPUSH
62132: CALL_OW 1
62136: ST_TO_ADDR
// end ;
62137: LD_VAR 0 3
62141: RET
// export function JoinUnion ( array , element ) ; begin
62142: LD_INT 0
62144: PPUSH
// result := array union element ;
62145: LD_ADDR_VAR 0 3
62149: PUSH
62150: LD_VAR 0 1
62154: PUSH
62155: LD_VAR 0 2
62159: UNION
62160: ST_TO_ADDR
// end ;
62161: LD_VAR 0 3
62165: RET
// export function GetBehemoths ( side ) ; begin
62166: LD_INT 0
62168: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
62169: LD_ADDR_VAR 0 2
62173: PUSH
62174: LD_INT 22
62176: PUSH
62177: LD_VAR 0 1
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: LD_INT 31
62188: PUSH
62189: LD_INT 25
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PPUSH
62200: CALL_OW 69
62204: ST_TO_ADDR
// end ;
62205: LD_VAR 0 2
62209: RET
// export function Shuffle ( array ) ; var i , index ; begin
62210: LD_INT 0
62212: PPUSH
62213: PPUSH
62214: PPUSH
// result := [ ] ;
62215: LD_ADDR_VAR 0 2
62219: PUSH
62220: EMPTY
62221: ST_TO_ADDR
// if not array then
62222: LD_VAR 0 1
62226: NOT
62227: IFFALSE 62231
// exit ;
62229: GO 62330
// Randomize ;
62231: CALL_OW 10
// for i = array downto 1 do
62235: LD_ADDR_VAR 0 3
62239: PUSH
62240: DOUBLE
62241: LD_VAR 0 1
62245: INC
62246: ST_TO_ADDR
62247: LD_INT 1
62249: PUSH
62250: FOR_DOWNTO
62251: IFFALSE 62328
// begin index := rand ( 1 , array ) ;
62253: LD_ADDR_VAR 0 4
62257: PUSH
62258: LD_INT 1
62260: PPUSH
62261: LD_VAR 0 1
62265: PPUSH
62266: CALL_OW 12
62270: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62271: LD_ADDR_VAR 0 2
62275: PUSH
62276: LD_VAR 0 2
62280: PPUSH
62281: LD_VAR 0 2
62285: PUSH
62286: LD_INT 1
62288: PLUS
62289: PPUSH
62290: LD_VAR 0 1
62294: PUSH
62295: LD_VAR 0 4
62299: ARRAY
62300: PPUSH
62301: CALL_OW 2
62305: ST_TO_ADDR
// array := Delete ( array , index ) ;
62306: LD_ADDR_VAR 0 1
62310: PUSH
62311: LD_VAR 0 1
62315: PPUSH
62316: LD_VAR 0 4
62320: PPUSH
62321: CALL_OW 3
62325: ST_TO_ADDR
// end ;
62326: GO 62250
62328: POP
62329: POP
// end ;
62330: LD_VAR 0 2
62334: RET
// export function GetBaseMaterials ( base ) ; begin
62335: LD_INT 0
62337: PPUSH
// result := [ 0 , 0 , 0 ] ;
62338: LD_ADDR_VAR 0 2
62342: PUSH
62343: LD_INT 0
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// if not base then
62357: LD_VAR 0 1
62361: NOT
62362: IFFALSE 62366
// exit ;
62364: GO 62415
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62366: LD_ADDR_VAR 0 2
62370: PUSH
62371: LD_VAR 0 1
62375: PPUSH
62376: LD_INT 1
62378: PPUSH
62379: CALL_OW 275
62383: PUSH
62384: LD_VAR 0 1
62388: PPUSH
62389: LD_INT 2
62391: PPUSH
62392: CALL_OW 275
62396: PUSH
62397: LD_VAR 0 1
62401: PPUSH
62402: LD_INT 3
62404: PPUSH
62405: CALL_OW 275
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: LIST
62414: ST_TO_ADDR
// end ;
62415: LD_VAR 0 2
62419: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62420: LD_INT 0
62422: PPUSH
62423: PPUSH
// result := array ;
62424: LD_ADDR_VAR 0 3
62428: PUSH
62429: LD_VAR 0 1
62433: ST_TO_ADDR
// if size >= result then
62434: LD_VAR 0 2
62438: PUSH
62439: LD_VAR 0 3
62443: GREATEREQUAL
62444: IFFALSE 62448
// exit ;
62446: GO 62498
// if size then
62448: LD_VAR 0 2
62452: IFFALSE 62498
// for i := array downto size do
62454: LD_ADDR_VAR 0 4
62458: PUSH
62459: DOUBLE
62460: LD_VAR 0 1
62464: INC
62465: ST_TO_ADDR
62466: LD_VAR 0 2
62470: PUSH
62471: FOR_DOWNTO
62472: IFFALSE 62496
// result := Delete ( result , result ) ;
62474: LD_ADDR_VAR 0 3
62478: PUSH
62479: LD_VAR 0 3
62483: PPUSH
62484: LD_VAR 0 3
62488: PPUSH
62489: CALL_OW 3
62493: ST_TO_ADDR
62494: GO 62471
62496: POP
62497: POP
// end ;
62498: LD_VAR 0 3
62502: RET
// export function ComExit ( unit ) ; var tmp ; begin
62503: LD_INT 0
62505: PPUSH
62506: PPUSH
// if not IsInUnit ( unit ) then
62507: LD_VAR 0 1
62511: PPUSH
62512: CALL_OW 310
62516: NOT
62517: IFFALSE 62521
// exit ;
62519: GO 62581
// tmp := IsInUnit ( unit ) ;
62521: LD_ADDR_VAR 0 3
62525: PUSH
62526: LD_VAR 0 1
62530: PPUSH
62531: CALL_OW 310
62535: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62536: LD_VAR 0 3
62540: PPUSH
62541: CALL_OW 247
62545: PUSH
62546: LD_INT 2
62548: EQUAL
62549: IFFALSE 62562
// ComExitVehicle ( unit ) else
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 121
62560: GO 62571
// ComExitBuilding ( unit ) ;
62562: LD_VAR 0 1
62566: PPUSH
62567: CALL_OW 122
// result := tmp ;
62571: LD_ADDR_VAR 0 2
62575: PUSH
62576: LD_VAR 0 3
62580: ST_TO_ADDR
// end ;
62581: LD_VAR 0 2
62585: RET
// export function ComExitAll ( units ) ; var i ; begin
62586: LD_INT 0
62588: PPUSH
62589: PPUSH
// if not units then
62590: LD_VAR 0 1
62594: NOT
62595: IFFALSE 62599
// exit ;
62597: GO 62625
// for i in units do
62599: LD_ADDR_VAR 0 3
62603: PUSH
62604: LD_VAR 0 1
62608: PUSH
62609: FOR_IN
62610: IFFALSE 62623
// ComExit ( i ) ;
62612: LD_VAR 0 3
62616: PPUSH
62617: CALL 62503 0 1
62621: GO 62609
62623: POP
62624: POP
// end ;
62625: LD_VAR 0 2
62629: RET
// export function ResetHc ; begin
62630: LD_INT 0
62632: PPUSH
// InitHc ;
62633: CALL_OW 19
// hc_importance := 0 ;
62637: LD_ADDR_OWVAR 32
62641: PUSH
62642: LD_INT 0
62644: ST_TO_ADDR
// end ;
62645: LD_VAR 0 1
62649: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62650: LD_INT 0
62652: PPUSH
62653: PPUSH
62654: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62655: LD_ADDR_VAR 0 6
62659: PUSH
62660: LD_VAR 0 1
62664: PUSH
62665: LD_VAR 0 3
62669: PLUS
62670: PUSH
62671: LD_INT 2
62673: DIV
62674: ST_TO_ADDR
// if _x < 0 then
62675: LD_VAR 0 6
62679: PUSH
62680: LD_INT 0
62682: LESS
62683: IFFALSE 62700
// _x := _x * - 1 ;
62685: LD_ADDR_VAR 0 6
62689: PUSH
62690: LD_VAR 0 6
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: MUL
62699: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62700: LD_ADDR_VAR 0 7
62704: PUSH
62705: LD_VAR 0 2
62709: PUSH
62710: LD_VAR 0 4
62714: PLUS
62715: PUSH
62716: LD_INT 2
62718: DIV
62719: ST_TO_ADDR
// if _y < 0 then
62720: LD_VAR 0 7
62724: PUSH
62725: LD_INT 0
62727: LESS
62728: IFFALSE 62745
// _y := _y * - 1 ;
62730: LD_ADDR_VAR 0 7
62734: PUSH
62735: LD_VAR 0 7
62739: PUSH
62740: LD_INT 1
62742: NEG
62743: MUL
62744: ST_TO_ADDR
// result := [ _x , _y ] ;
62745: LD_ADDR_VAR 0 5
62749: PUSH
62750: LD_VAR 0 6
62754: PUSH
62755: LD_VAR 0 7
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: ST_TO_ADDR
// end ;
62764: LD_VAR 0 5
62768: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62769: LD_INT 0
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
// task := GetTaskList ( unit ) ;
62775: LD_ADDR_VAR 0 7
62779: PUSH
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 437
62789: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62790: LD_VAR 0 7
62794: NOT
62795: PUSH
62796: LD_VAR 0 1
62800: PPUSH
62801: LD_VAR 0 2
62805: PPUSH
62806: CALL_OW 308
62810: NOT
62811: AND
62812: IFFALSE 62816
// exit ;
62814: GO 62934
// if IsInArea ( unit , area ) then
62816: LD_VAR 0 1
62820: PPUSH
62821: LD_VAR 0 2
62825: PPUSH
62826: CALL_OW 308
62830: IFFALSE 62848
// begin ComMoveToArea ( unit , goAway ) ;
62832: LD_VAR 0 1
62836: PPUSH
62837: LD_VAR 0 3
62841: PPUSH
62842: CALL_OW 113
// exit ;
62846: GO 62934
// end ; if task [ 1 ] [ 1 ] <> M then
62848: LD_VAR 0 7
62852: PUSH
62853: LD_INT 1
62855: ARRAY
62856: PUSH
62857: LD_INT 1
62859: ARRAY
62860: PUSH
62861: LD_STRING M
62863: NONEQUAL
62864: IFFALSE 62868
// exit ;
62866: GO 62934
// x := task [ 1 ] [ 2 ] ;
62868: LD_ADDR_VAR 0 5
62872: PUSH
62873: LD_VAR 0 7
62877: PUSH
62878: LD_INT 1
62880: ARRAY
62881: PUSH
62882: LD_INT 2
62884: ARRAY
62885: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62886: LD_ADDR_VAR 0 6
62890: PUSH
62891: LD_VAR 0 7
62895: PUSH
62896: LD_INT 1
62898: ARRAY
62899: PUSH
62900: LD_INT 3
62902: ARRAY
62903: ST_TO_ADDR
// if InArea ( x , y , area ) then
62904: LD_VAR 0 5
62908: PPUSH
62909: LD_VAR 0 6
62913: PPUSH
62914: LD_VAR 0 2
62918: PPUSH
62919: CALL_OW 309
62923: IFFALSE 62934
// ComStop ( unit ) ;
62925: LD_VAR 0 1
62929: PPUSH
62930: CALL_OW 141
// end ;
62934: LD_VAR 0 4
62938: RET
// export function Abs ( value ) ; begin
62939: LD_INT 0
62941: PPUSH
// result := value ;
62942: LD_ADDR_VAR 0 2
62946: PUSH
62947: LD_VAR 0 1
62951: ST_TO_ADDR
// if value < 0 then
62952: LD_VAR 0 1
62956: PUSH
62957: LD_INT 0
62959: LESS
62960: IFFALSE 62977
// result := value * - 1 ;
62962: LD_ADDR_VAR 0 2
62966: PUSH
62967: LD_VAR 0 1
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: MUL
62976: ST_TO_ADDR
// end ;
62977: LD_VAR 0 2
62981: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62982: LD_INT 0
62984: PPUSH
62985: PPUSH
62986: PPUSH
62987: PPUSH
62988: PPUSH
62989: PPUSH
62990: PPUSH
62991: PPUSH
// if not unit or not building then
62992: LD_VAR 0 1
62996: NOT
62997: PUSH
62998: LD_VAR 0 2
63002: NOT
63003: OR
63004: IFFALSE 63008
// exit ;
63006: GO 63234
// x := GetX ( building ) ;
63008: LD_ADDR_VAR 0 4
63012: PUSH
63013: LD_VAR 0 2
63017: PPUSH
63018: CALL_OW 250
63022: ST_TO_ADDR
// y := GetY ( building ) ;
63023: LD_ADDR_VAR 0 6
63027: PUSH
63028: LD_VAR 0 2
63032: PPUSH
63033: CALL_OW 251
63037: ST_TO_ADDR
// d := GetDir ( building ) ;
63038: LD_ADDR_VAR 0 8
63042: PUSH
63043: LD_VAR 0 2
63047: PPUSH
63048: CALL_OW 254
63052: ST_TO_ADDR
// r := 4 ;
63053: LD_ADDR_VAR 0 9
63057: PUSH
63058: LD_INT 4
63060: ST_TO_ADDR
// for i := 1 to 5 do
63061: LD_ADDR_VAR 0 10
63065: PUSH
63066: DOUBLE
63067: LD_INT 1
63069: DEC
63070: ST_TO_ADDR
63071: LD_INT 5
63073: PUSH
63074: FOR_TO
63075: IFFALSE 63232
// begin _x := ShiftX ( x , d , r + i ) ;
63077: LD_ADDR_VAR 0 5
63081: PUSH
63082: LD_VAR 0 4
63086: PPUSH
63087: LD_VAR 0 8
63091: PPUSH
63092: LD_VAR 0 9
63096: PUSH
63097: LD_VAR 0 10
63101: PLUS
63102: PPUSH
63103: CALL_OW 272
63107: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
63108: LD_ADDR_VAR 0 7
63112: PUSH
63113: LD_VAR 0 6
63117: PPUSH
63118: LD_VAR 0 8
63122: PPUSH
63123: LD_VAR 0 9
63127: PUSH
63128: LD_VAR 0 10
63132: PLUS
63133: PPUSH
63134: CALL_OW 273
63138: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
63139: LD_VAR 0 5
63143: PPUSH
63144: LD_VAR 0 7
63148: PPUSH
63149: CALL_OW 488
63153: PUSH
63154: LD_VAR 0 5
63158: PPUSH
63159: LD_VAR 0 7
63163: PPUSH
63164: CALL_OW 428
63168: PPUSH
63169: CALL_OW 247
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: IN
63184: NOT
63185: AND
63186: IFFALSE 63230
// begin ComMoveXY ( unit , _x , _y ) ;
63188: LD_VAR 0 1
63192: PPUSH
63193: LD_VAR 0 5
63197: PPUSH
63198: LD_VAR 0 7
63202: PPUSH
63203: CALL_OW 111
// result := [ _x , _y ] ;
63207: LD_ADDR_VAR 0 3
63211: PUSH
63212: LD_VAR 0 5
63216: PUSH
63217: LD_VAR 0 7
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: ST_TO_ADDR
// exit ;
63226: POP
63227: POP
63228: GO 63234
// end ; end ;
63230: GO 63074
63232: POP
63233: POP
// end ;
63234: LD_VAR 0 3
63238: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63239: LD_INT 0
63241: PPUSH
63242: PPUSH
63243: PPUSH
// result := 0 ;
63244: LD_ADDR_VAR 0 3
63248: PUSH
63249: LD_INT 0
63251: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63252: LD_VAR 0 1
63256: PUSH
63257: LD_INT 0
63259: LESS
63260: PUSH
63261: LD_VAR 0 1
63265: PUSH
63266: LD_INT 8
63268: GREATER
63269: OR
63270: PUSH
63271: LD_VAR 0 2
63275: PUSH
63276: LD_INT 0
63278: LESS
63279: OR
63280: PUSH
63281: LD_VAR 0 2
63285: PUSH
63286: LD_INT 8
63288: GREATER
63289: OR
63290: IFFALSE 63294
// exit ;
63292: GO 63369
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63294: LD_ADDR_VAR 0 4
63298: PUSH
63299: LD_INT 22
63301: PUSH
63302: LD_VAR 0 2
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PPUSH
63311: CALL_OW 69
63315: PUSH
63316: FOR_IN
63317: IFFALSE 63367
// begin un := UnitShoot ( i ) ;
63319: LD_ADDR_VAR 0 5
63323: PUSH
63324: LD_VAR 0 4
63328: PPUSH
63329: CALL_OW 504
63333: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63334: LD_VAR 0 5
63338: PPUSH
63339: CALL_OW 255
63343: PUSH
63344: LD_VAR 0 1
63348: EQUAL
63349: IFFALSE 63365
// begin result := un ;
63351: LD_ADDR_VAR 0 3
63355: PUSH
63356: LD_VAR 0 5
63360: ST_TO_ADDR
// exit ;
63361: POP
63362: POP
63363: GO 63369
// end ; end ;
63365: GO 63316
63367: POP
63368: POP
// end ;
63369: LD_VAR 0 3
63373: RET
// export function GetCargoBay ( units ) ; begin
63374: LD_INT 0
63376: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63377: LD_ADDR_VAR 0 2
63381: PUSH
63382: LD_VAR 0 1
63386: PPUSH
63387: LD_INT 2
63389: PUSH
63390: LD_INT 34
63392: PUSH
63393: LD_INT 12
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 34
63402: PUSH
63403: LD_INT 51
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 34
63412: PUSH
63413: LD_INT 32
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 34
63422: PUSH
63423: LD_INT 89
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: PPUSH
63437: CALL_OW 72
63441: ST_TO_ADDR
// end ;
63442: LD_VAR 0 2
63446: RET
// export function Negate ( value ) ; begin
63447: LD_INT 0
63449: PPUSH
// result := not value ;
63450: LD_ADDR_VAR 0 2
63454: PUSH
63455: LD_VAR 0 1
63459: NOT
63460: ST_TO_ADDR
// end ;
63461: LD_VAR 0 2
63465: RET
// export function Inc ( value ) ; begin
63466: LD_INT 0
63468: PPUSH
// result := value + 1 ;
63469: LD_ADDR_VAR 0 2
63473: PUSH
63474: LD_VAR 0 1
63478: PUSH
63479: LD_INT 1
63481: PLUS
63482: ST_TO_ADDR
// end ;
63483: LD_VAR 0 2
63487: RET
// export function Dec ( value ) ; begin
63488: LD_INT 0
63490: PPUSH
// result := value - 1 ;
63491: LD_ADDR_VAR 0 2
63495: PUSH
63496: LD_VAR 0 1
63500: PUSH
63501: LD_INT 1
63503: MINUS
63504: ST_TO_ADDR
// end ;
63505: LD_VAR 0 2
63509: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63510: LD_INT 0
63512: PPUSH
63513: PPUSH
63514: PPUSH
63515: PPUSH
63516: PPUSH
63517: PPUSH
63518: PPUSH
63519: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63520: LD_VAR 0 1
63524: PPUSH
63525: LD_VAR 0 2
63529: PPUSH
63530: CALL_OW 488
63534: NOT
63535: PUSH
63536: LD_VAR 0 3
63540: PPUSH
63541: LD_VAR 0 4
63545: PPUSH
63546: CALL_OW 488
63550: NOT
63551: OR
63552: IFFALSE 63565
// begin result := - 1 ;
63554: LD_ADDR_VAR 0 5
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: ST_TO_ADDR
// exit ;
63563: GO 63800
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63565: LD_ADDR_VAR 0 12
63569: PUSH
63570: LD_VAR 0 1
63574: PPUSH
63575: LD_VAR 0 2
63579: PPUSH
63580: LD_VAR 0 3
63584: PPUSH
63585: LD_VAR 0 4
63589: PPUSH
63590: CALL 62650 0 4
63594: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63595: LD_ADDR_VAR 0 11
63599: PUSH
63600: LD_VAR 0 1
63604: PPUSH
63605: LD_VAR 0 2
63609: PPUSH
63610: LD_VAR 0 12
63614: PUSH
63615: LD_INT 1
63617: ARRAY
63618: PPUSH
63619: LD_VAR 0 12
63623: PUSH
63624: LD_INT 2
63626: ARRAY
63627: PPUSH
63628: CALL_OW 298
63632: ST_TO_ADDR
// distance := 9999 ;
63633: LD_ADDR_VAR 0 10
63637: PUSH
63638: LD_INT 9999
63640: ST_TO_ADDR
// for i := 0 to 5 do
63641: LD_ADDR_VAR 0 6
63645: PUSH
63646: DOUBLE
63647: LD_INT 0
63649: DEC
63650: ST_TO_ADDR
63651: LD_INT 5
63653: PUSH
63654: FOR_TO
63655: IFFALSE 63798
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63657: LD_ADDR_VAR 0 7
63661: PUSH
63662: LD_VAR 0 1
63666: PPUSH
63667: LD_VAR 0 6
63671: PPUSH
63672: LD_VAR 0 11
63676: PPUSH
63677: CALL_OW 272
63681: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63682: LD_ADDR_VAR 0 8
63686: PUSH
63687: LD_VAR 0 2
63691: PPUSH
63692: LD_VAR 0 6
63696: PPUSH
63697: LD_VAR 0 11
63701: PPUSH
63702: CALL_OW 273
63706: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63707: LD_VAR 0 7
63711: PPUSH
63712: LD_VAR 0 8
63716: PPUSH
63717: CALL_OW 488
63721: NOT
63722: IFFALSE 63726
// continue ;
63724: GO 63654
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63726: LD_ADDR_VAR 0 9
63730: PUSH
63731: LD_VAR 0 12
63735: PUSH
63736: LD_INT 1
63738: ARRAY
63739: PPUSH
63740: LD_VAR 0 12
63744: PUSH
63745: LD_INT 2
63747: ARRAY
63748: PPUSH
63749: LD_VAR 0 7
63753: PPUSH
63754: LD_VAR 0 8
63758: PPUSH
63759: CALL_OW 298
63763: ST_TO_ADDR
// if tmp < distance then
63764: LD_VAR 0 9
63768: PUSH
63769: LD_VAR 0 10
63773: LESS
63774: IFFALSE 63796
// begin result := i ;
63776: LD_ADDR_VAR 0 5
63780: PUSH
63781: LD_VAR 0 6
63785: ST_TO_ADDR
// distance := tmp ;
63786: LD_ADDR_VAR 0 10
63790: PUSH
63791: LD_VAR 0 9
63795: ST_TO_ADDR
// end ; end ;
63796: GO 63654
63798: POP
63799: POP
// end ;
63800: LD_VAR 0 5
63804: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63805: LD_INT 0
63807: PPUSH
63808: PPUSH
// if not driver or not IsInUnit ( driver ) then
63809: LD_VAR 0 1
63813: NOT
63814: PUSH
63815: LD_VAR 0 1
63819: PPUSH
63820: CALL_OW 310
63824: NOT
63825: OR
63826: IFFALSE 63830
// exit ;
63828: GO 63920
// vehicle := IsInUnit ( driver ) ;
63830: LD_ADDR_VAR 0 3
63834: PUSH
63835: LD_VAR 0 1
63839: PPUSH
63840: CALL_OW 310
63844: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63845: LD_VAR 0 1
63849: PPUSH
63850: LD_STRING \
63852: PUSH
63853: LD_INT 0
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: LD_INT 0
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: PUSH
63880: LD_STRING E
63882: PUSH
63883: LD_INT 0
63885: PUSH
63886: LD_INT 0
63888: PUSH
63889: LD_VAR 0 3
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PPUSH
63916: CALL_OW 446
// end ;
63920: LD_VAR 0 2
63924: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63925: LD_INT 0
63927: PPUSH
63928: PPUSH
// if not driver or not IsInUnit ( driver ) then
63929: LD_VAR 0 1
63933: NOT
63934: PUSH
63935: LD_VAR 0 1
63939: PPUSH
63940: CALL_OW 310
63944: NOT
63945: OR
63946: IFFALSE 63950
// exit ;
63948: GO 64040
// vehicle := IsInUnit ( driver ) ;
63950: LD_ADDR_VAR 0 3
63954: PUSH
63955: LD_VAR 0 1
63959: PPUSH
63960: CALL_OW 310
63964: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63965: LD_VAR 0 1
63969: PPUSH
63970: LD_STRING \
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: PUSH
64000: LD_STRING E
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: LD_INT 0
64008: PUSH
64009: LD_VAR 0 3
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 0
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PPUSH
64036: CALL_OW 447
// end ;
64040: LD_VAR 0 2
64044: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64045: LD_INT 0
64047: PPUSH
64048: PPUSH
64049: PPUSH
// tmp := [ ] ;
64050: LD_ADDR_VAR 0 5
64054: PUSH
64055: EMPTY
64056: ST_TO_ADDR
// for i in units do
64057: LD_ADDR_VAR 0 4
64061: PUSH
64062: LD_VAR 0 1
64066: PUSH
64067: FOR_IN
64068: IFFALSE 64106
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
64070: LD_ADDR_VAR 0 5
64074: PUSH
64075: LD_VAR 0 5
64079: PPUSH
64080: LD_VAR 0 5
64084: PUSH
64085: LD_INT 1
64087: PLUS
64088: PPUSH
64089: LD_VAR 0 4
64093: PPUSH
64094: CALL_OW 256
64098: PPUSH
64099: CALL_OW 2
64103: ST_TO_ADDR
64104: GO 64067
64106: POP
64107: POP
// if not tmp then
64108: LD_VAR 0 5
64112: NOT
64113: IFFALSE 64117
// exit ;
64115: GO 64165
// if asc then
64117: LD_VAR 0 2
64121: IFFALSE 64145
// result := SortListByListAsc ( units , tmp ) else
64123: LD_ADDR_VAR 0 3
64127: PUSH
64128: LD_VAR 0 1
64132: PPUSH
64133: LD_VAR 0 5
64137: PPUSH
64138: CALL_OW 76
64142: ST_TO_ADDR
64143: GO 64165
// result := SortListByListDesc ( units , tmp ) ;
64145: LD_ADDR_VAR 0 3
64149: PUSH
64150: LD_VAR 0 1
64154: PPUSH
64155: LD_VAR 0 5
64159: PPUSH
64160: CALL_OW 77
64164: ST_TO_ADDR
// end ;
64165: LD_VAR 0 3
64169: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
64170: LD_INT 0
64172: PPUSH
64173: PPUSH
// task := GetTaskList ( mech ) ;
64174: LD_ADDR_VAR 0 4
64178: PUSH
64179: LD_VAR 0 1
64183: PPUSH
64184: CALL_OW 437
64188: ST_TO_ADDR
// if not task then
64189: LD_VAR 0 4
64193: NOT
64194: IFFALSE 64198
// exit ;
64196: GO 64240
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64198: LD_ADDR_VAR 0 3
64202: PUSH
64203: LD_VAR 0 4
64207: PUSH
64208: LD_INT 1
64210: ARRAY
64211: PUSH
64212: LD_INT 1
64214: ARRAY
64215: PUSH
64216: LD_STRING r
64218: EQUAL
64219: PUSH
64220: LD_VAR 0 4
64224: PUSH
64225: LD_INT 1
64227: ARRAY
64228: PUSH
64229: LD_INT 4
64231: ARRAY
64232: PUSH
64233: LD_VAR 0 2
64237: EQUAL
64238: AND
64239: ST_TO_ADDR
// end ;
64240: LD_VAR 0 3
64244: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64245: LD_INT 0
64247: PPUSH
// SetDir ( unit , d ) ;
64248: LD_VAR 0 1
64252: PPUSH
64253: LD_VAR 0 4
64257: PPUSH
64258: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64262: LD_VAR 0 1
64266: PPUSH
64267: LD_VAR 0 2
64271: PPUSH
64272: LD_VAR 0 3
64276: PPUSH
64277: LD_VAR 0 5
64281: PPUSH
64282: CALL_OW 48
// end ;
64286: LD_VAR 0 6
64290: RET
// export function ToNaturalNumber ( number ) ; begin
64291: LD_INT 0
64293: PPUSH
// result := number div 1 ;
64294: LD_ADDR_VAR 0 2
64298: PUSH
64299: LD_VAR 0 1
64303: PUSH
64304: LD_INT 1
64306: DIV
64307: ST_TO_ADDR
// if number < 0 then
64308: LD_VAR 0 1
64312: PUSH
64313: LD_INT 0
64315: LESS
64316: IFFALSE 64326
// result := 0 ;
64318: LD_ADDR_VAR 0 2
64322: PUSH
64323: LD_INT 0
64325: ST_TO_ADDR
// end ;
64326: LD_VAR 0 2
64330: RET
// export function SortByClass ( units , class ) ; var un ; begin
64331: LD_INT 0
64333: PPUSH
64334: PPUSH
// if not units or not class then
64335: LD_VAR 0 1
64339: NOT
64340: PUSH
64341: LD_VAR 0 2
64345: NOT
64346: OR
64347: IFFALSE 64351
// exit ;
64349: GO 64446
// result := [ ] ;
64351: LD_ADDR_VAR 0 3
64355: PUSH
64356: EMPTY
64357: ST_TO_ADDR
// for un in units do
64358: LD_ADDR_VAR 0 4
64362: PUSH
64363: LD_VAR 0 1
64367: PUSH
64368: FOR_IN
64369: IFFALSE 64444
// if GetClass ( un ) = class then
64371: LD_VAR 0 4
64375: PPUSH
64376: CALL_OW 257
64380: PUSH
64381: LD_VAR 0 2
64385: EQUAL
64386: IFFALSE 64413
// result := Insert ( result , 1 , un ) else
64388: LD_ADDR_VAR 0 3
64392: PUSH
64393: LD_VAR 0 3
64397: PPUSH
64398: LD_INT 1
64400: PPUSH
64401: LD_VAR 0 4
64405: PPUSH
64406: CALL_OW 2
64410: ST_TO_ADDR
64411: GO 64442
// result := Replace ( result , result + 1 , un ) ;
64413: LD_ADDR_VAR 0 3
64417: PUSH
64418: LD_VAR 0 3
64422: PPUSH
64423: LD_VAR 0 3
64427: PUSH
64428: LD_INT 1
64430: PLUS
64431: PPUSH
64432: LD_VAR 0 4
64436: PPUSH
64437: CALL_OW 1
64441: ST_TO_ADDR
64442: GO 64368
64444: POP
64445: POP
// end ;
64446: LD_VAR 0 3
64450: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64451: LD_INT 0
64453: PPUSH
64454: PPUSH
64455: PPUSH
64456: PPUSH
64457: PPUSH
64458: PPUSH
64459: PPUSH
// result := [ ] ;
64460: LD_ADDR_VAR 0 4
64464: PUSH
64465: EMPTY
64466: ST_TO_ADDR
// if x - r < 0 then
64467: LD_VAR 0 1
64471: PUSH
64472: LD_VAR 0 3
64476: MINUS
64477: PUSH
64478: LD_INT 0
64480: LESS
64481: IFFALSE 64493
// min_x := 0 else
64483: LD_ADDR_VAR 0 8
64487: PUSH
64488: LD_INT 0
64490: ST_TO_ADDR
64491: GO 64509
// min_x := x - r ;
64493: LD_ADDR_VAR 0 8
64497: PUSH
64498: LD_VAR 0 1
64502: PUSH
64503: LD_VAR 0 3
64507: MINUS
64508: ST_TO_ADDR
// if y - r < 0 then
64509: LD_VAR 0 2
64513: PUSH
64514: LD_VAR 0 3
64518: MINUS
64519: PUSH
64520: LD_INT 0
64522: LESS
64523: IFFALSE 64535
// min_y := 0 else
64525: LD_ADDR_VAR 0 7
64529: PUSH
64530: LD_INT 0
64532: ST_TO_ADDR
64533: GO 64551
// min_y := y - r ;
64535: LD_ADDR_VAR 0 7
64539: PUSH
64540: LD_VAR 0 2
64544: PUSH
64545: LD_VAR 0 3
64549: MINUS
64550: ST_TO_ADDR
// max_x := x + r ;
64551: LD_ADDR_VAR 0 9
64555: PUSH
64556: LD_VAR 0 1
64560: PUSH
64561: LD_VAR 0 3
64565: PLUS
64566: ST_TO_ADDR
// max_y := y + r ;
64567: LD_ADDR_VAR 0 10
64571: PUSH
64572: LD_VAR 0 2
64576: PUSH
64577: LD_VAR 0 3
64581: PLUS
64582: ST_TO_ADDR
// for _x = min_x to max_x do
64583: LD_ADDR_VAR 0 5
64587: PUSH
64588: DOUBLE
64589: LD_VAR 0 8
64593: DEC
64594: ST_TO_ADDR
64595: LD_VAR 0 9
64599: PUSH
64600: FOR_TO
64601: IFFALSE 64702
// for _y = min_y to max_y do
64603: LD_ADDR_VAR 0 6
64607: PUSH
64608: DOUBLE
64609: LD_VAR 0 7
64613: DEC
64614: ST_TO_ADDR
64615: LD_VAR 0 10
64619: PUSH
64620: FOR_TO
64621: IFFALSE 64698
// begin if not ValidHex ( _x , _y ) then
64623: LD_VAR 0 5
64627: PPUSH
64628: LD_VAR 0 6
64632: PPUSH
64633: CALL_OW 488
64637: NOT
64638: IFFALSE 64642
// continue ;
64640: GO 64620
// if GetResourceTypeXY ( _x , _y ) then
64642: LD_VAR 0 5
64646: PPUSH
64647: LD_VAR 0 6
64651: PPUSH
64652: CALL_OW 283
64656: IFFALSE 64696
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64658: LD_ADDR_VAR 0 4
64662: PUSH
64663: LD_VAR 0 4
64667: PPUSH
64668: LD_VAR 0 4
64672: PUSH
64673: LD_INT 1
64675: PLUS
64676: PPUSH
64677: LD_VAR 0 5
64681: PUSH
64682: LD_VAR 0 6
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PPUSH
64691: CALL_OW 1
64695: ST_TO_ADDR
// end ;
64696: GO 64620
64698: POP
64699: POP
64700: GO 64600
64702: POP
64703: POP
// end ;
64704: LD_VAR 0 4
64708: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64709: LD_INT 0
64711: PPUSH
64712: PPUSH
64713: PPUSH
64714: PPUSH
64715: PPUSH
64716: PPUSH
64717: PPUSH
64718: PPUSH
// if not units then
64719: LD_VAR 0 1
64723: NOT
64724: IFFALSE 64728
// exit ;
64726: GO 65252
// result := UnitFilter ( units , [ f_ok ] ) ;
64728: LD_ADDR_VAR 0 3
64732: PUSH
64733: LD_VAR 0 1
64737: PPUSH
64738: LD_INT 50
64740: PUSH
64741: EMPTY
64742: LIST
64743: PPUSH
64744: CALL_OW 72
64748: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64749: LD_ADDR_VAR 0 8
64753: PUSH
64754: LD_VAR 0 1
64758: PUSH
64759: LD_INT 1
64761: ARRAY
64762: PPUSH
64763: CALL_OW 255
64767: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64768: LD_ADDR_VAR 0 10
64772: PUSH
64773: LD_INT 29
64775: PUSH
64776: LD_INT 91
64778: PUSH
64779: LD_INT 49
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: LIST
64786: ST_TO_ADDR
// if not result then
64787: LD_VAR 0 3
64791: NOT
64792: IFFALSE 64796
// exit ;
64794: GO 65252
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64796: LD_ADDR_VAR 0 5
64800: PUSH
64801: LD_INT 81
64803: PUSH
64804: LD_VAR 0 8
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PPUSH
64813: CALL_OW 69
64817: ST_TO_ADDR
// for i in result do
64818: LD_ADDR_VAR 0 4
64822: PUSH
64823: LD_VAR 0 3
64827: PUSH
64828: FOR_IN
64829: IFFALSE 65250
// begin tag := GetTag ( i ) + 1 ;
64831: LD_ADDR_VAR 0 9
64835: PUSH
64836: LD_VAR 0 4
64840: PPUSH
64841: CALL_OW 110
64845: PUSH
64846: LD_INT 1
64848: PLUS
64849: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64850: LD_ADDR_VAR 0 7
64854: PUSH
64855: LD_VAR 0 4
64859: PPUSH
64860: CALL_OW 250
64864: PPUSH
64865: LD_VAR 0 4
64869: PPUSH
64870: CALL_OW 251
64874: PPUSH
64875: LD_INT 6
64877: PPUSH
64878: CALL 64451 0 3
64882: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64883: LD_VAR 0 4
64887: PPUSH
64888: CALL_OW 247
64892: PUSH
64893: LD_INT 2
64895: EQUAL
64896: PUSH
64897: LD_VAR 0 7
64901: AND
64902: PUSH
64903: LD_VAR 0 4
64907: PPUSH
64908: CALL_OW 264
64912: PUSH
64913: LD_VAR 0 10
64917: IN
64918: NOT
64919: AND
64920: IFFALSE 64959
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64922: LD_VAR 0 4
64926: PPUSH
64927: LD_VAR 0 7
64931: PUSH
64932: LD_INT 1
64934: ARRAY
64935: PUSH
64936: LD_INT 1
64938: ARRAY
64939: PPUSH
64940: LD_VAR 0 7
64944: PUSH
64945: LD_INT 1
64947: ARRAY
64948: PUSH
64949: LD_INT 2
64951: ARRAY
64952: PPUSH
64953: CALL_OW 116
64957: GO 65248
// if path > tag then
64959: LD_VAR 0 2
64963: PUSH
64964: LD_VAR 0 9
64968: GREATER
64969: IFFALSE 65177
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64971: LD_ADDR_VAR 0 6
64975: PUSH
64976: LD_VAR 0 5
64980: PPUSH
64981: LD_INT 91
64983: PUSH
64984: LD_VAR 0 4
64988: PUSH
64989: LD_INT 8
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: LIST
64996: PPUSH
64997: CALL_OW 72
65001: ST_TO_ADDR
// if nearEnemy then
65002: LD_VAR 0 6
65006: IFFALSE 65075
// begin if GetWeapon ( i ) = ru_time_lapser then
65008: LD_VAR 0 4
65012: PPUSH
65013: CALL_OW 264
65017: PUSH
65018: LD_INT 49
65020: EQUAL
65021: IFFALSE 65049
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65023: LD_VAR 0 4
65027: PPUSH
65028: LD_VAR 0 6
65032: PPUSH
65033: LD_VAR 0 4
65037: PPUSH
65038: CALL_OW 74
65042: PPUSH
65043: CALL_OW 112
65047: GO 65073
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
65049: LD_VAR 0 4
65053: PPUSH
65054: LD_VAR 0 6
65058: PPUSH
65059: LD_VAR 0 4
65063: PPUSH
65064: CALL_OW 74
65068: PPUSH
65069: CALL_OW 115
// end else
65073: GO 65175
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65075: LD_VAR 0 4
65079: PPUSH
65080: LD_VAR 0 2
65084: PUSH
65085: LD_VAR 0 9
65089: ARRAY
65090: PUSH
65091: LD_INT 1
65093: ARRAY
65094: PPUSH
65095: LD_VAR 0 2
65099: PUSH
65100: LD_VAR 0 9
65104: ARRAY
65105: PUSH
65106: LD_INT 2
65108: ARRAY
65109: PPUSH
65110: CALL_OW 297
65114: PUSH
65115: LD_INT 6
65117: GREATER
65118: IFFALSE 65161
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
65120: LD_VAR 0 4
65124: PPUSH
65125: LD_VAR 0 2
65129: PUSH
65130: LD_VAR 0 9
65134: ARRAY
65135: PUSH
65136: LD_INT 1
65138: ARRAY
65139: PPUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_VAR 0 9
65149: ARRAY
65150: PUSH
65151: LD_INT 2
65153: ARRAY
65154: PPUSH
65155: CALL_OW 114
65159: GO 65175
// SetTag ( i , tag ) ;
65161: LD_VAR 0 4
65165: PPUSH
65166: LD_VAR 0 9
65170: PPUSH
65171: CALL_OW 109
// end else
65175: GO 65248
// if enemy then
65177: LD_VAR 0 5
65181: IFFALSE 65248
// begin if GetWeapon ( i ) = ru_time_lapser then
65183: LD_VAR 0 4
65187: PPUSH
65188: CALL_OW 264
65192: PUSH
65193: LD_INT 49
65195: EQUAL
65196: IFFALSE 65224
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
65198: LD_VAR 0 4
65202: PPUSH
65203: LD_VAR 0 5
65207: PPUSH
65208: LD_VAR 0 4
65212: PPUSH
65213: CALL_OW 74
65217: PPUSH
65218: CALL_OW 112
65222: GO 65248
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
65224: LD_VAR 0 4
65228: PPUSH
65229: LD_VAR 0 5
65233: PPUSH
65234: LD_VAR 0 4
65238: PPUSH
65239: CALL_OW 74
65243: PPUSH
65244: CALL_OW 115
// end ; end ;
65248: GO 64828
65250: POP
65251: POP
// end ;
65252: LD_VAR 0 3
65256: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
65257: LD_INT 0
65259: PPUSH
65260: PPUSH
65261: PPUSH
// if not unit or IsInUnit ( unit ) then
65262: LD_VAR 0 1
65266: NOT
65267: PUSH
65268: LD_VAR 0 1
65272: PPUSH
65273: CALL_OW 310
65277: OR
65278: IFFALSE 65282
// exit ;
65280: GO 65373
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65282: LD_ADDR_VAR 0 4
65286: PUSH
65287: LD_VAR 0 1
65291: PPUSH
65292: CALL_OW 250
65296: PPUSH
65297: LD_VAR 0 2
65301: PPUSH
65302: LD_INT 1
65304: PPUSH
65305: CALL_OW 272
65309: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65310: LD_ADDR_VAR 0 5
65314: PUSH
65315: LD_VAR 0 1
65319: PPUSH
65320: CALL_OW 251
65324: PPUSH
65325: LD_VAR 0 2
65329: PPUSH
65330: LD_INT 1
65332: PPUSH
65333: CALL_OW 273
65337: ST_TO_ADDR
// if ValidHex ( x , y ) then
65338: LD_VAR 0 4
65342: PPUSH
65343: LD_VAR 0 5
65347: PPUSH
65348: CALL_OW 488
65352: IFFALSE 65373
// ComTurnXY ( unit , x , y ) ;
65354: LD_VAR 0 1
65358: PPUSH
65359: LD_VAR 0 4
65363: PPUSH
65364: LD_VAR 0 5
65368: PPUSH
65369: CALL_OW 118
// end ;
65373: LD_VAR 0 3
65377: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65378: LD_INT 0
65380: PPUSH
65381: PPUSH
// result := false ;
65382: LD_ADDR_VAR 0 3
65386: PUSH
65387: LD_INT 0
65389: ST_TO_ADDR
// if not units then
65390: LD_VAR 0 2
65394: NOT
65395: IFFALSE 65399
// exit ;
65397: GO 65444
// for i in units do
65399: LD_ADDR_VAR 0 4
65403: PUSH
65404: LD_VAR 0 2
65408: PUSH
65409: FOR_IN
65410: IFFALSE 65442
// if See ( side , i ) then
65412: LD_VAR 0 1
65416: PPUSH
65417: LD_VAR 0 4
65421: PPUSH
65422: CALL_OW 292
65426: IFFALSE 65440
// begin result := true ;
65428: LD_ADDR_VAR 0 3
65432: PUSH
65433: LD_INT 1
65435: ST_TO_ADDR
// exit ;
65436: POP
65437: POP
65438: GO 65444
// end ;
65440: GO 65409
65442: POP
65443: POP
// end ;
65444: LD_VAR 0 3
65448: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65449: LD_INT 0
65451: PPUSH
65452: PPUSH
65453: PPUSH
65454: PPUSH
// if not unit or not points then
65455: LD_VAR 0 1
65459: NOT
65460: PUSH
65461: LD_VAR 0 2
65465: NOT
65466: OR
65467: IFFALSE 65471
// exit ;
65469: GO 65561
// dist := 99999 ;
65471: LD_ADDR_VAR 0 5
65475: PUSH
65476: LD_INT 99999
65478: ST_TO_ADDR
// for i in points do
65479: LD_ADDR_VAR 0 4
65483: PUSH
65484: LD_VAR 0 2
65488: PUSH
65489: FOR_IN
65490: IFFALSE 65559
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65492: LD_ADDR_VAR 0 6
65496: PUSH
65497: LD_VAR 0 1
65501: PPUSH
65502: LD_VAR 0 4
65506: PUSH
65507: LD_INT 1
65509: ARRAY
65510: PPUSH
65511: LD_VAR 0 4
65515: PUSH
65516: LD_INT 2
65518: ARRAY
65519: PPUSH
65520: CALL_OW 297
65524: ST_TO_ADDR
// if tmpDist < dist then
65525: LD_VAR 0 6
65529: PUSH
65530: LD_VAR 0 5
65534: LESS
65535: IFFALSE 65557
// begin result := i ;
65537: LD_ADDR_VAR 0 3
65541: PUSH
65542: LD_VAR 0 4
65546: ST_TO_ADDR
// dist := tmpDist ;
65547: LD_ADDR_VAR 0 5
65551: PUSH
65552: LD_VAR 0 6
65556: ST_TO_ADDR
// end ; end ;
65557: GO 65489
65559: POP
65560: POP
// end ;
65561: LD_VAR 0 3
65565: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65566: LD_INT 0
65568: PPUSH
// uc_side := side ;
65569: LD_ADDR_OWVAR 20
65573: PUSH
65574: LD_VAR 0 1
65578: ST_TO_ADDR
// uc_nation := 3 ;
65579: LD_ADDR_OWVAR 21
65583: PUSH
65584: LD_INT 3
65586: ST_TO_ADDR
// vc_chassis := 25 ;
65587: LD_ADDR_OWVAR 37
65591: PUSH
65592: LD_INT 25
65594: ST_TO_ADDR
// vc_engine := engine_siberite ;
65595: LD_ADDR_OWVAR 39
65599: PUSH
65600: LD_INT 3
65602: ST_TO_ADDR
// vc_control := control_computer ;
65603: LD_ADDR_OWVAR 38
65607: PUSH
65608: LD_INT 3
65610: ST_TO_ADDR
// vc_weapon := 59 ;
65611: LD_ADDR_OWVAR 40
65615: PUSH
65616: LD_INT 59
65618: ST_TO_ADDR
// result := CreateVehicle ;
65619: LD_ADDR_VAR 0 5
65623: PUSH
65624: CALL_OW 45
65628: ST_TO_ADDR
// SetDir ( result , d ) ;
65629: LD_VAR 0 5
65633: PPUSH
65634: LD_VAR 0 4
65638: PPUSH
65639: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65643: LD_VAR 0 5
65647: PPUSH
65648: LD_VAR 0 2
65652: PPUSH
65653: LD_VAR 0 3
65657: PPUSH
65658: LD_INT 0
65660: PPUSH
65661: CALL_OW 48
// end ;
65665: LD_VAR 0 5
65669: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65670: LD_INT 0
65672: PPUSH
65673: PPUSH
65674: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65675: LD_ADDR_VAR 0 2
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: LD_INT 0
65688: PUSH
65689: LD_INT 0
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65698: LD_VAR 0 1
65702: NOT
65703: PUSH
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL_OW 264
65713: PUSH
65714: LD_INT 12
65716: PUSH
65717: LD_INT 51
65719: PUSH
65720: LD_INT 32
65722: PUSH
65723: LD_INT 89
65725: PUSH
65726: EMPTY
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: IN
65732: NOT
65733: OR
65734: IFFALSE 65738
// exit ;
65736: GO 65836
// for i := 1 to 3 do
65738: LD_ADDR_VAR 0 3
65742: PUSH
65743: DOUBLE
65744: LD_INT 1
65746: DEC
65747: ST_TO_ADDR
65748: LD_INT 3
65750: PUSH
65751: FOR_TO
65752: IFFALSE 65834
// begin tmp := GetCargo ( cargo , i ) ;
65754: LD_ADDR_VAR 0 4
65758: PUSH
65759: LD_VAR 0 1
65763: PPUSH
65764: LD_VAR 0 3
65768: PPUSH
65769: CALL_OW 289
65773: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65774: LD_ADDR_VAR 0 2
65778: PUSH
65779: LD_VAR 0 2
65783: PPUSH
65784: LD_VAR 0 3
65788: PPUSH
65789: LD_VAR 0 4
65793: PPUSH
65794: CALL_OW 1
65798: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65799: LD_ADDR_VAR 0 2
65803: PUSH
65804: LD_VAR 0 2
65808: PPUSH
65809: LD_INT 4
65811: PPUSH
65812: LD_VAR 0 2
65816: PUSH
65817: LD_INT 4
65819: ARRAY
65820: PUSH
65821: LD_VAR 0 4
65825: PLUS
65826: PPUSH
65827: CALL_OW 1
65831: ST_TO_ADDR
// end ;
65832: GO 65751
65834: POP
65835: POP
// end ;
65836: LD_VAR 0 2
65840: RET
// export function Length ( array ) ; begin
65841: LD_INT 0
65843: PPUSH
// result := array + 0 ;
65844: LD_ADDR_VAR 0 2
65848: PUSH
65849: LD_VAR 0 1
65853: PUSH
65854: LD_INT 0
65856: PLUS
65857: ST_TO_ADDR
// end ;
65858: LD_VAR 0 2
65862: RET
// export function PrepareArray ( array ) ; begin
65863: LD_INT 0
65865: PPUSH
// result := array diff 0 ;
65866: LD_ADDR_VAR 0 2
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_INT 0
65878: DIFF
65879: ST_TO_ADDR
// if not result [ 1 ] then
65880: LD_VAR 0 2
65884: PUSH
65885: LD_INT 1
65887: ARRAY
65888: NOT
65889: IFFALSE 65909
// result := Delete ( result , 1 ) ;
65891: LD_ADDR_VAR 0 2
65895: PUSH
65896: LD_VAR 0 2
65900: PPUSH
65901: LD_INT 1
65903: PPUSH
65904: CALL_OW 3
65908: ST_TO_ADDR
// end ; end_of_file
65909: LD_VAR 0 2
65913: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65914: LD_VAR 0 1
65918: PPUSH
65919: LD_VAR 0 2
65923: PPUSH
65924: LD_VAR 0 3
65928: PPUSH
65929: LD_VAR 0 4
65933: PPUSH
65934: LD_VAR 0 5
65938: PPUSH
65939: LD_VAR 0 6
65943: PPUSH
65944: CALL 4606 0 6
// end ;
65948: PPOPN 6
65950: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65951: LD_INT 0
65953: PPUSH
// begin if not units then
65954: LD_VAR 0 1
65958: NOT
65959: IFFALSE 65963
// exit ;
65961: GO 65963
// end ;
65963: PPOPN 7
65965: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65966: CALL 4577 0 0
// end ;
65970: PPOPN 1
65972: END
