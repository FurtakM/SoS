// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// InitVariables ;
  20: CALL 33 0 0
// PrepareAmericanBase ;
  24: CALL 3438 0 0
// Action ;
  28: CALL 110 0 0
// end ;
  32: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup , specGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive , kaiaAttacked ; function InitVariables ; begin
  33: LD_INT 0
  35: PPUSH
// foundPoints := 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// goWithHeike := false ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// baseSpotted := false ;
  52: LD_ADDR_EXP 19
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// heikeNearbyEon := false ;
  60: LD_ADDR_EXP 20
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// meetingActive := true ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 1
  75: ST_TO_ADDR
// scientists := [ ] ;
  76: LD_ADDR_EXP 13
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// eonGuards := [ ] ;
  83: LD_ADDR_EXP 14
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// firstGroup := [ ] ;
  90: LD_ADDR_EXP 15
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// kaiaAttacked := false ;
  97: LD_ADDR_EXP 22
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// end ; end_of_file
 105: LD_VAR 0 1
 109: RET
// export function Action ; var i , un ; begin
 110: LD_INT 0
 112: PPUSH
 113: PPUSH
 114: PPUSH
// InGameOn ;
 115: CALL_OW 8
// PrepareKurtGroup ;
 119: CALL 3285 0 0
// PrepareSheikGroup ;
 123: CALL 2923 0 0
// specGroup := [ ] ;
 127: LD_ADDR_EXP 16
 131: PUSH
 132: EMPTY
 133: ST_TO_ADDR
// for i := 1 to 3 do
 134: LD_ADDR_VAR 0 2
 138: PUSH
 139: DOUBLE
 140: LD_INT 1
 142: DEC
 143: ST_TO_ADDR
 144: LD_INT 3
 146: PUSH
 147: FOR_TO
 148: IFFALSE 266
// begin uc_side := 5 ;
 150: LD_ADDR_OWVAR 20
 154: PUSH
 155: LD_INT 5
 157: ST_TO_ADDR
// uc_nation := 2 ;
 158: LD_ADDR_OWVAR 21
 162: PUSH
 163: LD_INT 2
 165: ST_TO_ADDR
// PrepareHuman ( false , 1 , 3 ) ;
 166: LD_INT 0
 168: PPUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 3
 174: PPUSH
 175: CALL_OW 380
// un := CreateHuman ;
 179: LD_ADDR_VAR 0 3
 183: PUSH
 184: CALL_OW 44
 188: ST_TO_ADDR
// PlaceUnitArea ( un , startArea , false ) ;
 189: LD_VAR 0 3
 193: PPUSH
 194: LD_INT 3
 196: PPUSH
 197: LD_INT 0
 199: PPUSH
 200: CALL_OW 49
// specGroup := Replace ( specGroup , specGroup + 1 , un ) ;
 204: LD_ADDR_EXP 16
 208: PUSH
 209: LD_EXP 16
 213: PPUSH
 214: LD_EXP 16
 218: PUSH
 219: LD_INT 1
 221: PLUS
 222: PPUSH
 223: LD_VAR 0 3
 227: PPUSH
 228: CALL_OW 1
 232: ST_TO_ADDR
// ComMoveXY ( un , 92 , 66 ) ;
 233: LD_VAR 0 3
 237: PPUSH
 238: LD_INT 92
 240: PPUSH
 241: LD_INT 66
 243: PPUSH
 244: CALL_OW 111
// AddComHold ( un ) ;
 248: LD_VAR 0 3
 252: PPUSH
 253: CALL_OW 200
// wait ( 0 0$0.5 ) ;
 257: LD_INT 18
 259: PPUSH
 260: CALL_OW 67
// end ;
 264: GO 147
 266: POP
 267: POP
// PrepareHeikeGroup ;
 268: CALL 2835 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 272: LD_INT 51
 274: PPUSH
 275: LD_INT 85
 277: PPUSH
 278: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 282: LD_INT 1
 284: PPUSH
 285: LD_INT 1
 287: PPUSH
 288: LD_INT 5
 290: PPUSH
 291: LD_INT 32763
 293: NEG
 294: PPUSH
 295: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 299: LD_INT 1
 301: PPUSH
 302: LD_INT 1
 304: PPUSH
 305: LD_INT 5
 307: PPUSH
 308: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 312: LD_EXP 1
 316: PPUSH
 317: LD_INT 50
 319: PPUSH
 320: LD_INT 86
 322: PPUSH
 323: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 327: LD_EXP 5
 331: PPUSH
 332: LD_INT 51
 334: PPUSH
 335: LD_INT 90
 337: PPUSH
 338: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 342: LD_EXP 1
 346: PPUSH
 347: LD_EXP 5
 351: PPUSH
 352: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 356: LD_EXP 5
 360: PPUSH
 361: LD_EXP 1
 365: PPUSH
 366: CALL_OW 179
// wait ( 0 0$3 ) ;
 370: LD_INT 105
 372: PPUSH
 373: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 377: LD_EXP 5
 381: PPUSH
 382: LD_STRING DK-1
 384: PPUSH
 385: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 389: LD_EXP 1
 393: PPUSH
 394: LD_STRING DH-1
 396: PPUSH
 397: CALL_OW 88
// wait ( 0 0$2 ) ;
 401: LD_INT 70
 403: PPUSH
 404: CALL_OW 67
// PrepareArabian ;
 408: CALL 3686 0 0
// InGameOff ;
 412: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 416: LD_STRING O1
 418: PPUSH
 419: CALL_OW 337
// goWithHeike := true ;
 423: LD_ADDR_EXP 18
 427: PUSH
 428: LD_INT 1
 430: ST_TO_ADDR
// ToLua ( enableBioCharacter(BIO_HEIKE) ) ;
 431: LD_STRING enableBioCharacter(BIO_HEIKE)
 433: PPUSH
 434: CALL_OW 559
// ToLua ( enableBioCharacter(BIO_KAIA) ) ;
 438: LD_STRING enableBioCharacter(BIO_KAIA)
 440: PPUSH
 441: CALL_OW 559
// SaveForQuickRestart ;
 445: CALL_OW 22
// end ;
 449: LD_VAR 0 1
 453: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 454: LD_INT 2
 456: PPUSH
 457: LD_INT 5
 459: PPUSH
 460: CALL_OW 81
 464: PUSH
 465: LD_INT 2
 467: EQUAL
 468: IFFALSE 614
 470: GO 472
 472: DISABLE
 473: LD_INT 0
 475: PPUSH
// begin goWithHeike := false ;
 476: LD_ADDR_EXP 18
 480: PUSH
 481: LD_INT 0
 483: ST_TO_ADDR
// DialogueOn ;
 484: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 488: LD_EXP 1
 492: PPUSH
 493: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 497: LD_EXP 5
 501: PPUSH
 502: LD_STRING DK-betray-1
 504: PPUSH
 505: CALL_OW 88
// DialogueOff ;
 509: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 513: LD_EXP 5
 517: PPUSH
 518: LD_INT 90
 520: PPUSH
 521: LD_INT 46
 523: PPUSH
 524: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 528: LD_INT 35
 530: PPUSH
 531: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 5
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 25
 552: PUSH
 553: LD_INT 1
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PPUSH
 564: CALL_OW 69
 568: PUSH
 569: LD_EXP 5
 573: DIFF
 574: PUSH
 575: FOR_IN
 576: IFFALSE 594
// ComAttackUnit ( i , Heike ) ;
 578: LD_VAR 0 1
 582: PPUSH
 583: LD_EXP 1
 587: PPUSH
 588: CALL_OW 115
 592: GO 575
 594: POP
 595: POP
// until IsDead ( Heike ) ;
 596: LD_EXP 1
 600: PPUSH
 601: CALL_OW 301
 605: IFFALSE 528
// YouLost ( Betray ) ;
 607: LD_STRING Betray
 609: PPUSH
 610: CALL_OW 104
// end ;
 614: PPOPN 1
 616: END
// every 0 0$1 trigger goWithHeike do
 617: LD_EXP 18
 621: IFFALSE 676
 623: GO 625
 625: DISABLE
// begin enable ;
 626: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 627: LD_EXP 1
 631: PPUSH
 632: LD_EXP 5
 636: PPUSH
 637: CALL_OW 296
 641: PUSH
 642: LD_INT 3
 644: GREATER
 645: IFFALSE 676
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 647: LD_EXP 5
 651: PPUSH
 652: LD_EXP 1
 656: PPUSH
 657: CALL_OW 250
 661: PPUSH
 662: LD_EXP 1
 666: PPUSH
 667: CALL_OW 251
 671: PPUSH
 672: CALL_OW 111
// end ;
 676: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted and not kaiaAttacked do
 677: LD_INT 2
 679: PPUSH
 680: LD_INT 47
 682: PPUSH
 683: LD_INT 68
 685: PPUSH
 686: CALL_OW 293
 690: PUSH
 691: LD_EXP 19
 695: NOT
 696: AND
 697: PUSH
 698: LD_EXP 22
 702: NOT
 703: AND
 704: IFFALSE 765
 706: GO 708
 708: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 709: LD_EXP 1
 713: PPUSH
 714: LD_STRING DH-spot-1
 716: PPUSH
 717: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 721: LD_INT 47
 723: PPUSH
 724: LD_INT 68
 726: PPUSH
 727: CALL_OW 428
 731: PPUSH
 732: CALL_OW 313
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_STRING DRa-spot-1
 743: PPUSH
 744: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 748: LD_INT 90
 750: PPUSH
 751: LD_INT 41
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 6
 759: NEG
 760: PPUSH
 761: CALL_OW 330
// end ;
 765: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted and not kaiaAttacked do
 766: LD_INT 2
 768: PPUSH
 769: LD_INT 93
 771: PPUSH
 772: LD_INT 89
 774: PPUSH
 775: CALL_OW 293
 779: PUSH
 780: LD_EXP 19
 784: NOT
 785: AND
 786: PUSH
 787: LD_EXP 22
 791: NOT
 792: AND
 793: IFFALSE 854
 795: GO 797
 797: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 798: LD_EXP 1
 802: PPUSH
 803: LD_STRING DH-spot-1
 805: PPUSH
 806: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 810: LD_INT 93
 812: PPUSH
 813: LD_INT 89
 815: PPUSH
 816: CALL_OW 428
 820: PPUSH
 821: CALL_OW 313
 825: PUSH
 826: LD_INT 1
 828: ARRAY
 829: PPUSH
 830: LD_STRING DRa-spot-2
 832: PPUSH
 833: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 837: LD_INT 90
 839: PPUSH
 840: LD_INT 41
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 6
 848: NEG
 849: PPUSH
 850: CALL_OW 330
// end ;
 854: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) and not kaiaAttacked do var tmp , i , points , dist , tdist ;
 855: LD_EXP 21
 859: PUSH
 860: LD_EXP 14
 864: PPUSH
 865: LD_INT 101
 867: PUSH
 868: LD_INT 2
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 72
 879: AND
 880: PUSH
 881: LD_EXP 22
 885: NOT
 886: AND
 887: IFFALSE 1211
 889: GO 891
 891: DISABLE
 892: LD_INT 0
 894: PPUSH
 895: PPUSH
 896: PPUSH
 897: PPUSH
 898: PPUSH
// begin enable ;
 899: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 900: LD_ADDR_VAR 0 1
 904: PUSH
 905: LD_EXP 14
 909: PPUSH
 910: LD_INT 101
 912: PUSH
 913: LD_INT 2
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 72
 924: ST_TO_ADDR
// if not tmp then
 925: LD_VAR 0 1
 929: NOT
 930: IFFALSE 934
// exit ;
 932: GO 1211
// InGameOn ;
 934: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 938: LD_EXP 1
 942: PUSH
 943: LD_EXP 5
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: LD_VAR 0 1
 956: PUSH
 957: LD_INT 1
 959: ARRAY
 960: PPUSH
 961: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 965: LD_VAR 0 1
 969: PUSH
 970: LD_INT 1
 972: ARRAY
 973: PPUSH
 974: LD_EXP 1
 978: PPUSH
 979: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 983: LD_VAR 0 1
 987: PUSH
 988: LD_INT 1
 990: ARRAY
 991: PPUSH
 992: LD_STRING DG-meeting-1
 994: PPUSH
 995: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 999: LD_ADDR_VAR 0 3
1003: PUSH
1004: LD_INT 81
1006: PUSH
1007: LD_INT 10
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 63
1016: PUSH
1017: LD_INT 25
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 108
1026: PUSH
1027: LD_INT 73
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
1039: LD_ADDR_VAR 0 4
1043: PUSH
1044: LD_INT 9999
1046: PUSH
1047: EMPTY
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: ST_TO_ADDR
// for i := 1 to 3 do
1053: LD_ADDR_VAR 0 2
1057: PUSH
1058: DOUBLE
1059: LD_INT 1
1061: DEC
1062: ST_TO_ADDR
1063: LD_INT 3
1065: PUSH
1066: FOR_TO
1067: IFFALSE 1151
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
1069: LD_ADDR_VAR 0 5
1073: PUSH
1074: LD_EXP 1
1078: PPUSH
1079: LD_VAR 0 3
1083: PUSH
1084: LD_VAR 0 2
1088: ARRAY
1089: PUSH
1090: LD_INT 1
1092: ARRAY
1093: PPUSH
1094: LD_VAR 0 3
1098: PUSH
1099: LD_VAR 0 2
1103: ARRAY
1104: PUSH
1105: LD_INT 2
1107: ARRAY
1108: PPUSH
1109: CALL_OW 297
1113: ST_TO_ADDR
// if dist [ 1 ] > tdist then
1114: LD_VAR 0 4
1118: PUSH
1119: LD_INT 1
1121: ARRAY
1122: PUSH
1123: LD_VAR 0 5
1127: GREATER
1128: IFFALSE 1149
// dist := [ tdist , i ] ;
1130: LD_ADDR_VAR 0 4
1134: PUSH
1135: LD_VAR 0 5
1139: PUSH
1140: LD_VAR 0 2
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: ST_TO_ADDR
// end ;
1149: GO 1066
1151: POP
1152: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
1153: LD_EXP 1
1157: PPUSH
1158: LD_VAR 0 3
1162: PUSH
1163: LD_VAR 0 4
1167: PUSH
1168: LD_INT 2
1170: ARRAY
1171: ARRAY
1172: PUSH
1173: LD_INT 1
1175: ARRAY
1176: PPUSH
1177: LD_VAR 0 3
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: LD_INT 2
1189: ARRAY
1190: ARRAY
1191: PUSH
1192: LD_INT 2
1194: ARRAY
1195: PPUSH
1196: CALL_OW 111
// wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// InGameOff ;
1207: CALL_OW 9
// end ;
1211: PPOPN 5
1213: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) and not kaiaAttacked do
1214: LD_EXP 1
1218: PPUSH
1219: LD_INT 14
1221: PPUSH
1222: CALL_OW 296
1226: PUSH
1227: LD_INT 40
1229: GREATER
1230: PUSH
1231: LD_EXP 1
1235: PPUSH
1236: CALL_OW 316
1240: AND
1241: PUSH
1242: LD_EXP 22
1246: NOT
1247: AND
1248: IFFALSE 1265
1250: GO 1252
1252: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1253: LD_EXP 5
1257: PPUSH
1258: LD_STRING DK-idle-1
1260: PPUSH
1261: CALL_OW 88
// end ;
1265: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) and not kaiaAttacked do
1266: LD_INT 2
1268: PPUSH
1269: LD_INT 59
1271: PPUSH
1272: LD_INT 47
1274: PPUSH
1275: CALL_OW 293
1279: PUSH
1280: LD_EXP 22
1284: NOT
1285: AND
1286: IFFALSE 1443
1288: GO 1290
1290: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1291: LD_INT 59
1293: PPUSH
1294: LD_INT 47
1296: PPUSH
1297: LD_INT 2
1299: PPUSH
1300: LD_INT 10
1302: NEG
1303: PPUSH
1304: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1308: LD_INT 59
1310: PPUSH
1311: LD_INT 47
1313: PPUSH
1314: CALL_OW 86
// goWithHeike := false ;
1318: LD_ADDR_EXP 18
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// baseSpotted := true ;
1326: LD_ADDR_EXP 19
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// InGameOn ;
1334: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1338: LD_EXP 1
1342: PUSH
1343: LD_EXP 5
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: LD_INT 54
1354: PPUSH
1355: LD_INT 45
1357: PPUSH
1358: CALL_OW 111
// wait ( 0 0$1 ) ;
1362: LD_INT 35
1364: PPUSH
1365: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1369: LD_EXP 1
1373: PUSH
1374: LD_EXP 5
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: LD_INT 59
1385: PPUSH
1386: LD_INT 47
1388: PPUSH
1389: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1393: LD_EXP 1
1397: PPUSH
1398: LD_STRING DH-base-1
1400: PPUSH
1401: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1405: LD_EXP 5
1409: PPUSH
1410: LD_STRING DK-base-1
1412: PPUSH
1413: CALL_OW 88
// InGameOff ;
1417: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1421: LD_ADDR_EXP 17
1425: PUSH
1426: LD_EXP 17
1430: PUSH
1431: LD_INT 1
1433: PLUS
1434: ST_TO_ADDR
// goWithHeike := true ;
1435: LD_ADDR_EXP 18
1439: PUSH
1440: LD_INT 1
1442: ST_TO_ADDR
// end ;
1443: END
// every 0 0$2 trigger See ( 2 , Kurt ) and not kaiaAttacked do var i , tmp , tmp2 , p ;
1444: LD_INT 2
1446: PPUSH
1447: LD_EXP 8
1451: PPUSH
1452: CALL_OW 292
1456: PUSH
1457: LD_EXP 22
1461: NOT
1462: AND
1463: IFFALSE 2805
1465: GO 1467
1467: DISABLE
1468: LD_INT 0
1470: PPUSH
1471: PPUSH
1472: PPUSH
1473: PPUSH
// begin meetingActive := false ;
1474: LD_ADDR_EXP 21
1478: PUSH
1479: LD_INT 0
1481: ST_TO_ADDR
// goWithHeike := false ;
1482: LD_ADDR_EXP 18
1486: PUSH
1487: LD_INT 0
1489: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 6
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: CALL_OW 517
1505: ST_TO_ADDR
// for i := 1 to 4 do
1506: LD_ADDR_VAR 0 1
1510: PUSH
1511: DOUBLE
1512: LD_INT 1
1514: DEC
1515: ST_TO_ADDR
1516: LD_INT 4
1518: PUSH
1519: FOR_TO
1520: IFFALSE 1587
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1522: LD_EXP 15
1526: PUSH
1527: LD_VAR 0 1
1531: ARRAY
1532: PPUSH
1533: LD_VAR 0 2
1537: PUSH
1538: LD_INT 1
1540: ARRAY
1541: PUSH
1542: LD_VAR 0 1
1546: ARRAY
1547: PPUSH
1548: LD_VAR 0 2
1552: PUSH
1553: LD_INT 2
1555: ARRAY
1556: PUSH
1557: LD_VAR 0 1
1561: ARRAY
1562: PPUSH
1563: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1567: LD_EXP 15
1571: PUSH
1572: LD_VAR 0 1
1576: ARRAY
1577: PPUSH
1578: LD_INT 14
1580: PPUSH
1581: CALL_OW 179
// end ;
1585: GO 1519
1587: POP
1588: POP
// InGameOn ;
1589: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1593: LD_EXP 8
1597: PPUSH
1598: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1602: LD_EXP 1
1606: PPUSH
1607: LD_EXP 8
1611: PPUSH
1612: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1616: LD_EXP 5
1620: PPUSH
1621: LD_EXP 1
1625: PPUSH
1626: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1630: LD_INT 10
1632: PPUSH
1633: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1637: LD_EXP 1
1641: PPUSH
1642: LD_EXP 8
1646: PPUSH
1647: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1651: LD_EXP 5
1655: PPUSH
1656: LD_EXP 1
1660: PPUSH
1661: CALL_OW 250
1665: PPUSH
1666: LD_INT 5
1668: PPUSH
1669: LD_INT 1
1671: PPUSH
1672: CALL_OW 272
1676: PPUSH
1677: LD_EXP 1
1681: PPUSH
1682: CALL_OW 251
1686: PPUSH
1687: LD_INT 5
1689: PPUSH
1690: LD_INT 1
1692: PPUSH
1693: CALL_OW 273
1697: PPUSH
1698: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1702: LD_EXP 1
1706: PPUSH
1707: LD_EXP 8
1711: PPUSH
1712: CALL_OW 296
1716: PUSH
1717: LD_INT 5
1719: LESS
1720: PUSH
1721: LD_EXP 5
1725: PPUSH
1726: LD_EXP 8
1730: PPUSH
1731: CALL_OW 296
1735: PUSH
1736: LD_INT 6
1738: LESS
1739: AND
1740: IFFALSE 1630
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1742: LD_EXP 1
1746: PUSH
1747: LD_EXP 5
1751: PUSH
1752: EMPTY
1753: LIST
1754: LIST
1755: PPUSH
1756: LD_EXP 8
1760: PPUSH
1761: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1765: LD_EXP 8
1769: PUSH
1770: LD_EXP 4
1774: PUSH
1775: LD_EXP 9
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: LIST
1784: PPUSH
1785: LD_EXP 1
1789: PPUSH
1790: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1794: LD_INT 7
1796: PPUSH
1797: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1801: LD_EXP 8
1805: PPUSH
1806: LD_STRING DKu-Kurt-1
1808: PPUSH
1809: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1813: LD_EXP 5
1817: PPUSH
1818: LD_STRING DK-Kurt-1
1820: PPUSH
1821: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1825: LD_EXP 8
1829: PPUSH
1830: LD_STRING DKu-Kurt-2
1832: PPUSH
1833: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1837: LD_INT 7
1839: PPUSH
1840: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1844: LD_EXP 1
1848: PPUSH
1849: LD_STRING DH-Kurt-1
1851: PPUSH
1852: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1856: LD_EXP 8
1860: PPUSH
1861: LD_STRING DKu-Kurt-3
1863: PPUSH
1864: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1868: LD_EXP 5
1872: PPUSH
1873: LD_STRING DK-Kurt-3
1875: PPUSH
1876: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1880: LD_EXP 9
1884: PPUSH
1885: LD_STRING DHa-Kurt-3
1887: PPUSH
1888: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1892: LD_EXP 4
1896: PPUSH
1897: LD_STRING DO-Kurt-3
1899: PPUSH
1900: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] union specGroup ;
1904: LD_ADDR_VAR 0 3
1908: PUSH
1909: LD_EXP 8
1913: PUSH
1914: LD_EXP 4
1918: PUSH
1919: LD_EXP 9
1923: PUSH
1924: LD_EXP 5
1928: PUSH
1929: LD_EXP 1
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_EXP 16
1945: UNION
1946: ST_TO_ADDR
// for i = 1 to tmp2 do
1947: LD_ADDR_VAR 0 1
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_VAR 0 3
1961: PUSH
1962: FOR_TO
1963: IFFALSE 2038
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1965: LD_VAR 0 3
1969: PUSH
1970: LD_VAR 0 1
1974: ARRAY
1975: PPUSH
1976: LD_VAR 0 2
1980: PUSH
1981: LD_INT 1
1983: ARRAY
1984: PUSH
1985: LD_VAR 0 1
1989: PUSH
1990: LD_INT 4
1992: PLUS
1993: ARRAY
1994: PPUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: ARRAY
2003: PUSH
2004: LD_VAR 0 1
2008: PUSH
2009: LD_INT 4
2011: PLUS
2012: ARRAY
2013: PPUSH
2014: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
2018: LD_VAR 0 3
2022: PUSH
2023: LD_VAR 0 1
2027: ARRAY
2028: PPUSH
2029: LD_INT 14
2031: PPUSH
2032: CALL_OW 179
// end ;
2036: GO 1962
2038: POP
2039: POP
// wait ( 0 0$2 ) ;
2040: LD_INT 70
2042: PPUSH
2043: CALL_OW 67
// CenterOnUnits ( eon ) ;
2047: LD_INT 14
2049: PPUSH
2050: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
2054: LD_INT 90
2056: PPUSH
2057: LD_INT 43
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: LD_INT 21
2065: NEG
2066: PPUSH
2067: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
2071: LD_EXP 2
2075: PPUSH
2076: LD_INT 84
2078: PPUSH
2079: LD_INT 36
2081: PPUSH
2082: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
2086: LD_EXP 2
2090: PPUSH
2091: LD_INT 14
2093: PPUSH
2094: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
2098: LD_EXP 11
2102: PPUSH
2103: LD_INT 85
2105: PPUSH
2106: LD_INT 36
2108: PPUSH
2109: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
2113: LD_EXP 11
2117: PPUSH
2118: LD_INT 14
2120: PPUSH
2121: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
2125: LD_EXP 10
2129: PPUSH
2130: LD_INT 86
2132: PPUSH
2133: LD_INT 36
2135: PPUSH
2136: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
2140: LD_EXP 10
2144: PPUSH
2145: LD_INT 14
2147: PPUSH
2148: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
2152: LD_EXP 7
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: LD_INT 36
2162: PPUSH
2163: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
2167: LD_EXP 7
2171: PPUSH
2172: LD_INT 14
2174: PPUSH
2175: CALL_OW 179
// wait ( 0 0$3 ) ;
2179: LD_INT 105
2181: PPUSH
2182: CALL_OW 67
// p := 0 ;
2186: LD_ADDR_VAR 0 4
2190: PUSH
2191: LD_INT 0
2193: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2194: LD_INT 35
2196: PPUSH
2197: CALL_OW 67
// p := p + 1 ;
2201: LD_ADDR_VAR 0 4
2205: PUSH
2206: LD_VAR 0 4
2210: PUSH
2211: LD_INT 1
2213: PLUS
2214: ST_TO_ADDR
// until IsInArea ( Heike , eonSpawn ) or p > 10 ;
2215: LD_EXP 1
2219: PPUSH
2220: LD_INT 6
2222: PPUSH
2223: CALL_OW 308
2227: PUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 10
2235: GREATER
2236: OR
2237: IFFALSE 2194
// heikeNearbyEon := true ;
2239: LD_ADDR_EXP 20
2243: PUSH
2244: LD_INT 1
2246: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2247: LD_EXP 6
2251: PPUSH
2252: LD_INT 88
2254: PPUSH
2255: LD_INT 37
2257: PPUSH
2258: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2262: LD_EXP 6
2266: PPUSH
2267: LD_EXP 13
2271: PUSH
2272: LD_INT 1
2274: ARRAY
2275: PPUSH
2276: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2280: LD_EXP 13
2284: PUSH
2285: LD_INT 1
2287: ARRAY
2288: PPUSH
2289: LD_INT 89
2291: PPUSH
2292: LD_INT 37
2294: PPUSH
2295: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2299: LD_EXP 13
2303: PUSH
2304: LD_INT 2
2306: ARRAY
2307: PPUSH
2308: LD_INT 91
2310: PPUSH
2311: LD_INT 39
2313: PPUSH
2314: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2318: LD_EXP 13
2322: PPUSH
2323: LD_EXP 11
2327: PPUSH
2328: CALL_OW 179
// wait ( 0 0$1 ) ;
2332: LD_INT 35
2334: PPUSH
2335: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2339: LD_EXP 13
2343: PUSH
2344: LD_INT 1
2346: ARRAY
2347: PPUSH
2348: LD_STRING DS-eon-1
2350: PPUSH
2351: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2355: LD_EXP 6
2359: PPUSH
2360: LD_STRING DSh-eon-1
2362: PPUSH
2363: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2367: LD_EXP 13
2371: PUSH
2372: LD_INT 1
2374: ARRAY
2375: PPUSH
2376: LD_STRING DS-eon-2
2378: PPUSH
2379: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2383: LD_EXP 6
2387: PPUSH
2388: LD_STRING DSh-eon-1a
2390: PPUSH
2391: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2395: LD_EXP 13
2399: PUSH
2400: LD_INT 1
2402: ARRAY
2403: PPUSH
2404: LD_INT 92
2406: PPUSH
2407: LD_INT 43
2409: PPUSH
2410: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2414: LD_EXP 13
2418: PUSH
2419: LD_INT 1
2421: ARRAY
2422: PPUSH
2423: LD_INT 14
2425: PPUSH
2426: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2430: LD_EXP 13
2434: PUSH
2435: LD_INT 2
2437: ARRAY
2438: PPUSH
2439: LD_INT 93
2441: PPUSH
2442: LD_INT 41
2444: PPUSH
2445: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2449: LD_EXP 13
2453: PUSH
2454: LD_INT 2
2456: ARRAY
2457: PPUSH
2458: LD_INT 93
2460: PPUSH
2461: LD_INT 40
2463: PPUSH
2464: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2468: LD_EXP 6
2472: PPUSH
2473: LD_INT 88
2475: PPUSH
2476: LD_INT 41
2478: PPUSH
2479: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2483: LD_EXP 6
2487: PPUSH
2488: LD_INT 87
2490: PPUSH
2491: LD_INT 41
2493: PPUSH
2494: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2498: LD_INT 35
2500: PPUSH
2501: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2505: LD_EXP 6
2509: PPUSH
2510: LD_INT 88
2512: PPUSH
2513: LD_INT 41
2515: PPUSH
2516: CALL_OW 307
2520: IFFALSE 2498
// wait ( 0 0$1 ) ;
2522: LD_INT 35
2524: PPUSH
2525: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2529: LD_EXP 6
2533: PPUSH
2534: LD_STRING DSh-eon-2
2536: PPUSH
2537: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2541: LD_EXP 11
2545: PPUSH
2546: LD_INT 87
2548: PPUSH
2549: LD_INT 40
2551: PPUSH
2552: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2556: LD_EXP 11
2560: PPUSH
2561: LD_INT 86
2563: PPUSH
2564: LD_INT 40
2566: PPUSH
2567: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2571: LD_INT 35
2573: PPUSH
2574: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2578: LD_EXP 11
2582: PPUSH
2583: LD_INT 87
2585: PPUSH
2586: LD_INT 40
2588: PPUSH
2589: CALL_OW 307
2593: IFFALSE 2571
// Say ( Shariff , DShar-eon-3 ) ;
2595: LD_EXP 11
2599: PPUSH
2600: LD_STRING DShar-eon-3
2602: PPUSH
2603: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2607: LD_INT 10
2609: PPUSH
2610: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2614: LD_EXP 5
2618: PPUSH
2619: LD_EXP 1
2623: PPUSH
2624: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2628: LD_EXP 11
2632: PPUSH
2633: LD_STRING DShar-eon-4
2635: PPUSH
2636: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2640: LD_EXP 5
2644: PPUSH
2645: LD_STRING DK-eon-4
2647: PPUSH
2648: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2652: LD_EXP 5
2656: PPUSH
2657: LD_INT 14
2659: PPUSH
2660: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2664: LD_INT 35
2666: PPUSH
2667: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2671: LD_EXP 5
2675: PPUSH
2676: CALL_OW 305
2680: NOT
2681: IFFALSE 2664
// ComTurnUnit ( Shariff , Heike ) ;
2683: LD_EXP 11
2687: PPUSH
2688: LD_EXP 1
2692: PPUSH
2693: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2697: LD_EXP 11
2701: PPUSH
2702: LD_STRING DShar-eon-5
2704: PPUSH
2705: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2709: LD_EXP 1
2713: PPUSH
2714: LD_INT 91
2716: PPUSH
2717: LD_INT 44
2719: PPUSH
2720: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2724: LD_EXP 1
2728: PPUSH
2729: LD_INT 14
2731: PPUSH
2732: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2736: LD_INT 35
2738: PPUSH
2739: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2743: LD_EXP 1
2747: PPUSH
2748: LD_INT 91
2750: PPUSH
2751: LD_INT 44
2753: PPUSH
2754: CALL_OW 307
2758: IFFALSE 2736
// Say ( Heike , DH-eon-5 ) ;
2760: LD_EXP 1
2764: PPUSH
2765: LD_STRING DH-eon-5
2767: PPUSH
2768: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2772: LD_EXP 1
2776: PPUSH
2777: LD_INT 14
2779: PPUSH
2780: CALL_OW 120
// wait ( 0 0$2 ) ;
2784: LD_INT 70
2786: PPUSH
2787: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2791: LD_INT 1
2793: PPUSH
2794: LD_STRING %_cont
2796: PPUSH
2797: CALL_OW 340
// InGameOff ;
2801: CALL_OW 9
// end ;
2805: PPOPN 4
2807: END
// every 3 trigger IsSelected ( Kaia ) do
2808: LD_EXP 5
2812: PPUSH
2813: CALL_OW 306
2817: IFFALSE 2834
2819: GO 2821
2821: DISABLE
// ForceExclamation ( Kaia , 42 ) ; end_of_file
2822: LD_EXP 5
2826: PPUSH
2827: LD_INT 42
2829: PPUSH
2830: CALL_OW 582
2834: END
// export function PrepareHeikeGroup ; begin
2835: LD_INT 0
2837: PPUSH
// uc_side := 2 ;
2838: LD_ADDR_OWVAR 20
2842: PUSH
2843: LD_INT 2
2845: ST_TO_ADDR
// uc_nation := 2 ;
2846: LD_ADDR_OWVAR 21
2850: PUSH
2851: LD_INT 2
2853: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2854: LD_ADDR_EXP 1
2858: PUSH
2859: LD_STRING Heike
2861: PPUSH
2862: CALL_OW 25
2866: ST_TO_ADDR
// uc_side := 5 ;
2867: LD_ADDR_OWVAR 20
2871: PUSH
2872: LD_INT 5
2874: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2875: LD_ADDR_EXP 5
2879: PUSH
2880: LD_STRING Kaia
2882: PPUSH
2883: CALL_OW 25
2887: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_INT 0
2898: PPUSH
2899: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2903: LD_EXP 5
2907: PPUSH
2908: LD_INT 3
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// end ;
2918: LD_VAR 0 1
2922: RET
// export function PrepareSheikGroup ; var un , i ; begin
2923: LD_INT 0
2925: PPUSH
2926: PPUSH
2927: PPUSH
// uc_side := 5 ;
2928: LD_ADDR_OWVAR 20
2932: PUSH
2933: LD_INT 5
2935: ST_TO_ADDR
// uc_nation := 2 ;
2936: LD_ADDR_OWVAR 21
2940: PUSH
2941: LD_INT 2
2943: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2944: LD_ADDR_EXP 10
2948: PUSH
2949: LD_STRING Ali
2951: PPUSH
2952: CALL_OW 25
2956: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2957: LD_ADDR_EXP 11
2961: PUSH
2962: LD_STRING Abdul
2964: PPUSH
2965: CALL_OW 25
2969: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2970: LD_ADDR_EXP 2
2974: PUSH
2975: LD_STRING Omar
2977: PPUSH
2978: CALL_OW 25
2982: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2983: LD_ADDR_EXP 7
2987: PUSH
2988: LD_STRING Mahtab
2990: PPUSH
2991: CALL_OW 25
2995: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2996: LD_ADDR_EXP 6
3000: PUSH
3001: LD_STRING Shahrzad
3003: PPUSH
3004: CALL_OW 25
3008: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
3009: LD_EXP 10
3013: PPUSH
3014: LD_INT 85
3016: PPUSH
3017: LD_INT 37
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
3027: LD_EXP 11
3031: PPUSH
3032: LD_INT 87
3034: PPUSH
3035: LD_INT 37
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
3045: LD_EXP 2
3049: PPUSH
3050: LD_INT 85
3052: PPUSH
3053: LD_INT 35
3055: PPUSH
3056: LD_INT 0
3058: PPUSH
3059: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
3063: LD_EXP 7
3067: PPUSH
3068: LD_INT 86
3070: PPUSH
3071: LD_INT 39
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
3081: LD_EXP 6
3085: PPUSH
3086: LD_INT 88
3088: PPUSH
3089: LD_INT 39
3091: PPUSH
3092: LD_INT 0
3094: PPUSH
3095: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
3099: LD_EXP 10
3103: PPUSH
3104: LD_EXP 11
3108: PPUSH
3109: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
3113: LD_EXP 11
3117: PPUSH
3118: LD_EXP 10
3122: PPUSH
3123: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
3127: LD_EXP 2
3131: PPUSH
3132: LD_EXP 11
3136: PPUSH
3137: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
3141: LD_EXP 7
3145: PUSH
3146: LD_EXP 6
3150: PUSH
3151: EMPTY
3152: LIST
3153: LIST
3154: PPUSH
3155: LD_EXP 11
3159: PPUSH
3160: CALL_OW 119
// for i := 1 to 2 do
3164: LD_ADDR_VAR 0 3
3168: PUSH
3169: DOUBLE
3170: LD_INT 1
3172: DEC
3173: ST_TO_ADDR
3174: LD_INT 2
3176: PUSH
3177: FOR_TO
3178: IFFALSE 3264
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
3180: LD_INT 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 6
3188: PPUSH
3189: CALL_OW 380
// un := CreateHuman ;
3193: LD_ADDR_VAR 0 2
3197: PUSH
3198: CALL_OW 44
3202: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
3203: LD_VAR 0 2
3207: PPUSH
3208: LD_INT 90
3210: PPUSH
3211: LD_INT 44
3213: PPUSH
3214: LD_INT 3
3216: PPUSH
3217: LD_INT 0
3219: PPUSH
3220: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
3224: LD_VAR 0 2
3228: PPUSH
3229: LD_INT 91
3231: PPUSH
3232: LD_INT 43
3234: PPUSH
3235: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
3239: LD_ADDR_EXP 13
3243: PUSH
3244: LD_EXP 13
3248: PPUSH
3249: LD_INT 1
3251: PPUSH
3252: LD_VAR 0 2
3256: PPUSH
3257: CALL_OW 2
3261: ST_TO_ADDR
// end ;
3262: GO 3177
3264: POP
3265: POP
// scientists := scientists diff 0 ;
3266: LD_ADDR_EXP 13
3270: PUSH
3271: LD_EXP 13
3275: PUSH
3276: LD_INT 0
3278: DIFF
3279: ST_TO_ADDR
// end ;
3280: LD_VAR 0 1
3284: RET
// export function PrepareKurtGroup ; var i ; begin
3285: LD_INT 0
3287: PPUSH
3288: PPUSH
// uc_side := 5 ;
3289: LD_ADDR_OWVAR 20
3293: PUSH
3294: LD_INT 5
3296: ST_TO_ADDR
// uc_nation := 2 ;
3297: LD_ADDR_OWVAR 21
3301: PUSH
3302: LD_INT 2
3304: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3305: LD_ADDR_EXP 8
3309: PUSH
3310: LD_STRING Kurt
3312: PPUSH
3313: CALL_OW 25
3317: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_STRING Olaf
3325: PPUSH
3326: CALL_OW 25
3330: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3331: LD_ADDR_EXP 9
3335: PUSH
3336: LD_STRING Hans
3338: PPUSH
3339: CALL_OW 25
3343: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3344: LD_ADDR_VAR 0 2
3348: PUSH
3349: LD_EXP 8
3353: PUSH
3354: LD_EXP 9
3358: PUSH
3359: LD_EXP 4
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: LIST
3368: PUSH
3369: FOR_IN
3370: IFFALSE 3389
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3372: LD_VAR 0 2
3376: PPUSH
3377: LD_INT 10
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
3387: GO 3369
3389: POP
3390: POP
// ComTurnUnit ( Kurt , Hans ) ;
3391: LD_EXP 8
3395: PPUSH
3396: LD_EXP 9
3400: PPUSH
3401: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3405: LD_EXP 4
3409: PPUSH
3410: LD_EXP 9
3414: PPUSH
3415: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3419: LD_EXP 9
3423: PPUSH
3424: LD_EXP 4
3428: PPUSH
3429: CALL_OW 119
// end ;
3433: LD_VAR 0 1
3437: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3438: LD_INT 0
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_INT 21
3451: PUSH
3452: LD_INT 3
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PPUSH
3459: CALL_OW 69
3463: PUSH
3464: LD_INT 14
3466: DIFF
3467: PUSH
3468: FOR_IN
3469: IFFALSE 3549
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3471: LD_VAR 0 2
3475: PPUSH
3476: CALL_OW 266
3480: PUSH
3481: LD_INT 6
3483: PUSH
3484: LD_INT 31
3486: PUSH
3487: EMPTY
3488: LIST
3489: LIST
3490: IN
3491: IFFALSE 3515
// SetLives ( i , rand ( 500 , 600 ) ) else
3493: LD_VAR 0 2
3497: PPUSH
3498: LD_INT 500
3500: PPUSH
3501: LD_INT 600
3503: PPUSH
3504: CALL_OW 12
3508: PPUSH
3509: CALL_OW 234
3513: GO 3535
// SetLives ( i , rand ( 300 , 499 ) ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 300
3522: PPUSH
3523: LD_INT 499
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: CALL_OW 234
// SetSide ( i , 5 ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 5
3542: PPUSH
3543: CALL_OW 235
// end ;
3547: GO 3468
3549: POP
3550: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 9
3558: PPUSH
3559: LD_INT 0
3561: PPUSH
3562: CALL_OW 517
3566: ST_TO_ADDR
// uc_side := 4 ;
3567: LD_ADDR_OWVAR 20
3571: PUSH
3572: LD_INT 4
3574: ST_TO_ADDR
// uc_nation := 1 ;
3575: LD_ADDR_OWVAR 21
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3583: LD_ADDR_VAR 0 2
3587: PUSH
3588: DOUBLE
3589: LD_INT 1
3591: DEC
3592: ST_TO_ADDR
3593: LD_VAR 0 4
3597: PUSH
3598: LD_INT 1
3600: ARRAY
3601: PUSH
3602: FOR_TO
3603: IFFALSE 3679
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3605: LD_INT 0
3607: PPUSH
3608: LD_INT 1
3610: PUSH
3611: LD_INT 1
3613: PUSH
3614: LD_INT 4
3616: PUSH
3617: EMPTY
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_VAR 0 2
3626: PUSH
3627: LD_INT 3
3629: MOD
3630: PUSH
3631: LD_INT 1
3633: PLUS
3634: ARRAY
3635: PPUSH
3636: LD_INT 0
3638: PPUSH
3639: CALL_OW 380
// un := CreateHuman ;
3643: LD_ADDR_VAR 0 3
3647: PUSH
3648: CALL_OW 44
3652: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3653: LD_VAR 0 3
3657: PPUSH
3658: LD_INT 9
3660: PPUSH
3661: LD_INT 0
3663: PPUSH
3664: CALL_OW 49
// KillUnit ( un ) ;
3668: LD_VAR 0 3
3672: PPUSH
3673: CALL_OW 66
// end ;
3677: GO 3602
3679: POP
3680: POP
// end ;
3681: LD_VAR 0 1
3685: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3686: LD_INT 0
3688: PPUSH
3689: PPUSH
3690: PPUSH
3691: PPUSH
3692: PPUSH
3693: PPUSH
3694: PPUSH
// uc_side := 5 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 5
3702: ST_TO_ADDR
// uc_nation := 2 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 2
3710: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3711: LD_ADDR_VAR 0 6
3715: PUSH
3716: LD_INT 2
3718: PUSH
3719: LD_INT 4
3721: PUSH
3722: LD_INT 5
3724: PUSH
3725: LD_INT 14
3727: PUSH
3728: EMPTY
3729: LIST
3730: LIST
3731: LIST
3732: LIST
3733: ST_TO_ADDR
// InitHc ;
3734: CALL_OW 19
// for i in area do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: LD_VAR 0 6
3747: PUSH
3748: FOR_IN
3749: IFFALSE 3913
// begin tmp := AreaToList ( i , 0 ) ;
3751: LD_ADDR_VAR 0 5
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: LD_INT 0
3763: PPUSH
3764: CALL_OW 517
3768: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: DOUBLE
3775: LD_INT 1
3777: DEC
3778: ST_TO_ADDR
3779: LD_VAR 0 5
3783: PUSH
3784: LD_INT 1
3786: ARRAY
3787: PUSH
3788: FOR_TO
3789: IFFALSE 3909
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3791: LD_INT 1
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: LD_INT 3
3799: PPUSH
3800: CALL_OW 380
// un := CreateHuman ;
3804: LD_ADDR_VAR 0 7
3808: PUSH
3809: CALL_OW 44
3813: ST_TO_ADDR
// if i = spawnBaseArea3 then
3814: LD_VAR 0 2
3818: PUSH
3819: LD_INT 5
3821: EQUAL
3822: IFFALSE 3840
// eonGuards := eonGuards ^ un ;
3824: LD_ADDR_EXP 14
3828: PUSH
3829: LD_EXP 14
3833: PUSH
3834: LD_VAR 0 7
3838: ADD
3839: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3840: LD_VAR 0 7
3844: PPUSH
3845: LD_VAR 0 2
3849: PPUSH
3850: LD_INT 0
3852: PPUSH
3853: CALL_OW 49
// ComHold ( un ) ;
3857: LD_VAR 0 7
3861: PPUSH
3862: CALL_OW 140
// if i = spawnBaseArea4 then
3866: LD_VAR 0 2
3870: PUSH
3871: LD_INT 14
3873: EQUAL
3874: IFFALSE 3907
// begin firstGroup := firstGroup ^ un ;
3876: LD_ADDR_EXP 15
3880: PUSH
3881: LD_EXP 15
3885: PUSH
3886: LD_VAR 0 7
3890: ADD
3891: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3892: LD_VAR 0 7
3896: PPUSH
3897: LD_INT 108
3899: PPUSH
3900: LD_INT 47
3902: PPUSH
3903: CALL_OW 118
// end ; end ;
3907: GO 3788
3909: POP
3910: POP
// end ;
3911: GO 3748
3913: POP
3914: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3915: LD_ADDR_VAR 0 2
3919: PUSH
3920: DOUBLE
3921: LD_INT 1
3923: DEC
3924: ST_TO_ADDR
3925: LD_INT 30
3927: PUSH
3928: LD_INT 31
3930: PUSH
3931: EMPTY
3932: LIST
3933: LIST
3934: PPUSH
3935: CALL_OW 69
3939: PUSH
3940: FOR_TO
3941: IFFALSE 4035
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3943: LD_ADDR_VAR 0 4
3947: PUSH
3948: LD_INT 30
3950: PUSH
3951: LD_INT 31
3953: PUSH
3954: EMPTY
3955: LIST
3956: LIST
3957: PPUSH
3958: CALL_OW 69
3962: PUSH
3963: LD_VAR 0 2
3967: ARRAY
3968: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3969: LD_INT 1
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: LD_INT 3
3977: PPUSH
3978: CALL_OW 380
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 7
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3992: LD_VAR 0 7
3996: PPUSH
3997: LD_VAR 0 4
4001: PPUSH
4002: CALL_OW 254
4006: PUSH
4007: LD_INT 3
4009: PLUS
4010: PUSH
4011: LD_INT 6
4013: MOD
4014: PPUSH
4015: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4019: LD_VAR 0 7
4023: PPUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: CALL_OW 52
// end ;
4033: GO 3940
4035: POP
4036: POP
// end ; end_of_file
4037: LD_VAR 0 1
4041: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 2
4049: EQUAL
4050: PUSH
4051: LD_VAR 0 2
4055: PUSH
4056: LD_INT 5
4058: EQUAL
4059: AND
4060: IFFALSE 4086
// begin kaiaAttacked := true ;
4062: LD_ADDR_EXP 22
4066: PUSH
4067: LD_INT 1
4069: ST_TO_ADDR
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
4070: LD_INT 2
4072: PPUSH
4073: LD_INT 5
4075: PPUSH
4076: LD_INT 2
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 80
// end ; end ;
4086: PPOPN 2
4088: END
// every 0 0$1 trigger scientists do var i ;
4089: LD_EXP 13
4093: IFFALSE 4301
4095: GO 4097
4097: DISABLE
4098: LD_INT 0
4100: PPUSH
// begin repeat for i in scientists do
4101: LD_ADDR_VAR 0 1
4105: PUSH
4106: LD_EXP 13
4110: PUSH
4111: FOR_IN
4112: IFFALSE 4286
// begin wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
4121: LD_VAR 0 1
4125: PPUSH
4126: LD_INT 11
4128: PUSH
4129: LD_INT 13
4131: PUSH
4132: EMPTY
4133: LIST
4134: LIST
4135: PUSH
4136: LD_VAR 0 1
4140: PUSH
4141: LD_INT 2
4143: MOD
4144: PUSH
4145: LD_INT 1
4147: PLUS
4148: ARRAY
4149: PPUSH
4150: CALL_OW 308
4154: NOT
4155: IFFALSE 4190
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
4157: LD_VAR 0 1
4161: PPUSH
4162: LD_INT 11
4164: PUSH
4165: LD_INT 13
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: LD_VAR 0 1
4176: PUSH
4177: LD_INT 2
4179: MOD
4180: PUSH
4181: LD_INT 1
4183: PLUS
4184: ARRAY
4185: PPUSH
4186: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
4190: LD_VAR 0 1
4194: PPUSH
4195: LD_INT 14
4197: PPUSH
4198: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
4202: LD_VAR 0 1
4206: PPUSH
4207: LD_INT 70
4209: PPUSH
4210: CALL_OW 202
// if rand ( 0 , 1 ) then
4214: LD_INT 0
4216: PPUSH
4217: LD_INT 1
4219: PPUSH
4220: CALL_OW 12
4224: IFFALSE 4238
// AddComAnim ( i , 15 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 15
4233: PPUSH
4234: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
4238: LD_VAR 0 1
4242: PPUSH
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
4250: LD_VAR 0 1
4254: PPUSH
4255: LD_INT 12
4257: PPUSH
4258: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_INT 93
4269: PPUSH
4270: LD_INT 40
4272: PPUSH
4273: CALL_OW 178
// wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// end ;
4284: GO 4111
4286: POP
4287: POP
// wait ( 0 0$10 ) ;
4288: LD_INT 350
4290: PPUSH
4291: CALL_OW 67
// until heikeNearbyEon ;
4295: LD_EXP 20
4299: IFFALSE 4101
// end ; end_of_file
4301: PPOPN 1
4303: END
// every 0 0$1 do
4304: GO 4306
4306: DISABLE
// begin enable ;
4307: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4308: LD_STRING updateTimer(
4310: PUSH
4311: LD_OWVAR 1
4315: STR
4316: PUSH
4317: LD_STRING );
4319: STR
4320: PPUSH
4321: CALL_OW 559
// end ;
4325: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4326: LD_INT 0
4328: PPUSH
// if p2 = 100 then
4329: LD_VAR 0 2
4333: PUSH
4334: LD_INT 100
4336: EQUAL
4337: IFFALSE 5340
// begin if not StreamModeActive then
4339: LD_EXP 23
4343: NOT
4344: IFFALSE 4354
// StreamModeActive := true ;
4346: LD_ADDR_EXP 23
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// if p3 = 0 then
4354: LD_VAR 0 3
4358: PUSH
4359: LD_INT 0
4361: EQUAL
4362: IFFALSE 4368
// InitStreamMode ;
4364: CALL 5500 0 0
// if p3 = 1 then
4368: LD_VAR 0 3
4372: PUSH
4373: LD_INT 1
4375: EQUAL
4376: IFFALSE 4386
// sRocket := true ;
4378: LD_ADDR_EXP 28
4382: PUSH
4383: LD_INT 1
4385: ST_TO_ADDR
// if p3 = 2 then
4386: LD_VAR 0 3
4390: PUSH
4391: LD_INT 2
4393: EQUAL
4394: IFFALSE 4404
// sSpeed := true ;
4396: LD_ADDR_EXP 27
4400: PUSH
4401: LD_INT 1
4403: ST_TO_ADDR
// if p3 = 3 then
4404: LD_VAR 0 3
4408: PUSH
4409: LD_INT 3
4411: EQUAL
4412: IFFALSE 4422
// sEngine := true ;
4414: LD_ADDR_EXP 29
4418: PUSH
4419: LD_INT 1
4421: ST_TO_ADDR
// if p3 = 4 then
4422: LD_VAR 0 3
4426: PUSH
4427: LD_INT 4
4429: EQUAL
4430: IFFALSE 4440
// sSpec := true ;
4432: LD_ADDR_EXP 26
4436: PUSH
4437: LD_INT 1
4439: ST_TO_ADDR
// if p3 = 5 then
4440: LD_VAR 0 3
4444: PUSH
4445: LD_INT 5
4447: EQUAL
4448: IFFALSE 4458
// sLevel := true ;
4450: LD_ADDR_EXP 30
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// if p3 = 6 then
4458: LD_VAR 0 3
4462: PUSH
4463: LD_INT 6
4465: EQUAL
4466: IFFALSE 4476
// sArmoury := true ;
4468: LD_ADDR_EXP 31
4472: PUSH
4473: LD_INT 1
4475: ST_TO_ADDR
// if p3 = 7 then
4476: LD_VAR 0 3
4480: PUSH
4481: LD_INT 7
4483: EQUAL
4484: IFFALSE 4494
// sRadar := true ;
4486: LD_ADDR_EXP 32
4490: PUSH
4491: LD_INT 1
4493: ST_TO_ADDR
// if p3 = 8 then
4494: LD_VAR 0 3
4498: PUSH
4499: LD_INT 8
4501: EQUAL
4502: IFFALSE 4512
// sBunker := true ;
4504: LD_ADDR_EXP 33
4508: PUSH
4509: LD_INT 1
4511: ST_TO_ADDR
// if p3 = 9 then
4512: LD_VAR 0 3
4516: PUSH
4517: LD_INT 9
4519: EQUAL
4520: IFFALSE 4530
// sHack := true ;
4522: LD_ADDR_EXP 34
4526: PUSH
4527: LD_INT 1
4529: ST_TO_ADDR
// if p3 = 10 then
4530: LD_VAR 0 3
4534: PUSH
4535: LD_INT 10
4537: EQUAL
4538: IFFALSE 4548
// sFire := true ;
4540: LD_ADDR_EXP 35
4544: PUSH
4545: LD_INT 1
4547: ST_TO_ADDR
// if p3 = 11 then
4548: LD_VAR 0 3
4552: PUSH
4553: LD_INT 11
4555: EQUAL
4556: IFFALSE 4566
// sRefresh := true ;
4558: LD_ADDR_EXP 36
4562: PUSH
4563: LD_INT 1
4565: ST_TO_ADDR
// if p3 = 12 then
4566: LD_VAR 0 3
4570: PUSH
4571: LD_INT 12
4573: EQUAL
4574: IFFALSE 4584
// sExp := true ;
4576: LD_ADDR_EXP 37
4580: PUSH
4581: LD_INT 1
4583: ST_TO_ADDR
// if p3 = 13 then
4584: LD_VAR 0 3
4588: PUSH
4589: LD_INT 13
4591: EQUAL
4592: IFFALSE 4602
// sDepot := true ;
4594: LD_ADDR_EXP 38
4598: PUSH
4599: LD_INT 1
4601: ST_TO_ADDR
// if p3 = 14 then
4602: LD_VAR 0 3
4606: PUSH
4607: LD_INT 14
4609: EQUAL
4610: IFFALSE 4620
// sFlag := true ;
4612: LD_ADDR_EXP 39
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// if p3 = 15 then
4620: LD_VAR 0 3
4624: PUSH
4625: LD_INT 15
4627: EQUAL
4628: IFFALSE 4638
// sKamikadze := true ;
4630: LD_ADDR_EXP 47
4634: PUSH
4635: LD_INT 1
4637: ST_TO_ADDR
// if p3 = 16 then
4638: LD_VAR 0 3
4642: PUSH
4643: LD_INT 16
4645: EQUAL
4646: IFFALSE 4656
// sTroll := true ;
4648: LD_ADDR_EXP 48
4652: PUSH
4653: LD_INT 1
4655: ST_TO_ADDR
// if p3 = 17 then
4656: LD_VAR 0 3
4660: PUSH
4661: LD_INT 17
4663: EQUAL
4664: IFFALSE 4674
// sSlow := true ;
4666: LD_ADDR_EXP 49
4670: PUSH
4671: LD_INT 1
4673: ST_TO_ADDR
// if p3 = 18 then
4674: LD_VAR 0 3
4678: PUSH
4679: LD_INT 18
4681: EQUAL
4682: IFFALSE 4692
// sLack := true ;
4684: LD_ADDR_EXP 50
4688: PUSH
4689: LD_INT 1
4691: ST_TO_ADDR
// if p3 = 19 then
4692: LD_VAR 0 3
4696: PUSH
4697: LD_INT 19
4699: EQUAL
4700: IFFALSE 4710
// sTank := true ;
4702: LD_ADDR_EXP 52
4706: PUSH
4707: LD_INT 1
4709: ST_TO_ADDR
// if p3 = 20 then
4710: LD_VAR 0 3
4714: PUSH
4715: LD_INT 20
4717: EQUAL
4718: IFFALSE 4728
// sRemote := true ;
4720: LD_ADDR_EXP 53
4724: PUSH
4725: LD_INT 1
4727: ST_TO_ADDR
// if p3 = 21 then
4728: LD_VAR 0 3
4732: PUSH
4733: LD_INT 21
4735: EQUAL
4736: IFFALSE 4746
// sPowell := true ;
4738: LD_ADDR_EXP 54
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// if p3 = 22 then
4746: LD_VAR 0 3
4750: PUSH
4751: LD_INT 22
4753: EQUAL
4754: IFFALSE 4764
// sTeleport := true ;
4756: LD_ADDR_EXP 57
4760: PUSH
4761: LD_INT 1
4763: ST_TO_ADDR
// if p3 = 23 then
4764: LD_VAR 0 3
4768: PUSH
4769: LD_INT 23
4771: EQUAL
4772: IFFALSE 4782
// sOilTower := true ;
4774: LD_ADDR_EXP 59
4778: PUSH
4779: LD_INT 1
4781: ST_TO_ADDR
// if p3 = 24 then
4782: LD_VAR 0 3
4786: PUSH
4787: LD_INT 24
4789: EQUAL
4790: IFFALSE 4800
// sShovel := true ;
4792: LD_ADDR_EXP 60
4796: PUSH
4797: LD_INT 1
4799: ST_TO_ADDR
// if p3 = 25 then
4800: LD_VAR 0 3
4804: PUSH
4805: LD_INT 25
4807: EQUAL
4808: IFFALSE 4818
// sSheik := true ;
4810: LD_ADDR_EXP 61
4814: PUSH
4815: LD_INT 1
4817: ST_TO_ADDR
// if p3 = 26 then
4818: LD_VAR 0 3
4822: PUSH
4823: LD_INT 26
4825: EQUAL
4826: IFFALSE 4836
// sEarthquake := true ;
4828: LD_ADDR_EXP 63
4832: PUSH
4833: LD_INT 1
4835: ST_TO_ADDR
// if p3 = 27 then
4836: LD_VAR 0 3
4840: PUSH
4841: LD_INT 27
4843: EQUAL
4844: IFFALSE 4854
// sAI := true ;
4846: LD_ADDR_EXP 64
4850: PUSH
4851: LD_INT 1
4853: ST_TO_ADDR
// if p3 = 28 then
4854: LD_VAR 0 3
4858: PUSH
4859: LD_INT 28
4861: EQUAL
4862: IFFALSE 4872
// sCargo := true ;
4864: LD_ADDR_EXP 67
4868: PUSH
4869: LD_INT 1
4871: ST_TO_ADDR
// if p3 = 29 then
4872: LD_VAR 0 3
4876: PUSH
4877: LD_INT 29
4879: EQUAL
4880: IFFALSE 4890
// sDLaser := true ;
4882: LD_ADDR_EXP 68
4886: PUSH
4887: LD_INT 1
4889: ST_TO_ADDR
// if p3 = 30 then
4890: LD_VAR 0 3
4894: PUSH
4895: LD_INT 30
4897: EQUAL
4898: IFFALSE 4908
// sExchange := true ;
4900: LD_ADDR_EXP 69
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// if p3 = 31 then
4908: LD_VAR 0 3
4912: PUSH
4913: LD_INT 31
4915: EQUAL
4916: IFFALSE 4926
// sFac := true ;
4918: LD_ADDR_EXP 70
4922: PUSH
4923: LD_INT 1
4925: ST_TO_ADDR
// if p3 = 32 then
4926: LD_VAR 0 3
4930: PUSH
4931: LD_INT 32
4933: EQUAL
4934: IFFALSE 4944
// sPower := true ;
4936: LD_ADDR_EXP 71
4940: PUSH
4941: LD_INT 1
4943: ST_TO_ADDR
// if p3 = 33 then
4944: LD_VAR 0 3
4948: PUSH
4949: LD_INT 33
4951: EQUAL
4952: IFFALSE 4962
// sRandom := true ;
4954: LD_ADDR_EXP 72
4958: PUSH
4959: LD_INT 1
4961: ST_TO_ADDR
// if p3 = 34 then
4962: LD_VAR 0 3
4966: PUSH
4967: LD_INT 34
4969: EQUAL
4970: IFFALSE 4980
// sShield := true ;
4972: LD_ADDR_EXP 73
4976: PUSH
4977: LD_INT 1
4979: ST_TO_ADDR
// if p3 = 35 then
4980: LD_VAR 0 3
4984: PUSH
4985: LD_INT 35
4987: EQUAL
4988: IFFALSE 4998
// sTime := true ;
4990: LD_ADDR_EXP 74
4994: PUSH
4995: LD_INT 1
4997: ST_TO_ADDR
// if p3 = 36 then
4998: LD_VAR 0 3
5002: PUSH
5003: LD_INT 36
5005: EQUAL
5006: IFFALSE 5016
// sTools := true ;
5008: LD_ADDR_EXP 75
5012: PUSH
5013: LD_INT 1
5015: ST_TO_ADDR
// if p3 = 101 then
5016: LD_VAR 0 3
5020: PUSH
5021: LD_INT 101
5023: EQUAL
5024: IFFALSE 5034
// sSold := true ;
5026: LD_ADDR_EXP 40
5030: PUSH
5031: LD_INT 1
5033: ST_TO_ADDR
// if p3 = 102 then
5034: LD_VAR 0 3
5038: PUSH
5039: LD_INT 102
5041: EQUAL
5042: IFFALSE 5052
// sDiff := true ;
5044: LD_ADDR_EXP 41
5048: PUSH
5049: LD_INT 1
5051: ST_TO_ADDR
// if p3 = 103 then
5052: LD_VAR 0 3
5056: PUSH
5057: LD_INT 103
5059: EQUAL
5060: IFFALSE 5070
// sFog := true ;
5062: LD_ADDR_EXP 44
5066: PUSH
5067: LD_INT 1
5069: ST_TO_ADDR
// if p3 = 104 then
5070: LD_VAR 0 3
5074: PUSH
5075: LD_INT 104
5077: EQUAL
5078: IFFALSE 5088
// sReset := true ;
5080: LD_ADDR_EXP 45
5084: PUSH
5085: LD_INT 1
5087: ST_TO_ADDR
// if p3 = 105 then
5088: LD_VAR 0 3
5092: PUSH
5093: LD_INT 105
5095: EQUAL
5096: IFFALSE 5106
// sSun := true ;
5098: LD_ADDR_EXP 46
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// if p3 = 106 then
5106: LD_VAR 0 3
5110: PUSH
5111: LD_INT 106
5113: EQUAL
5114: IFFALSE 5124
// sTiger := true ;
5116: LD_ADDR_EXP 42
5120: PUSH
5121: LD_INT 1
5123: ST_TO_ADDR
// if p3 = 107 then
5124: LD_VAR 0 3
5128: PUSH
5129: LD_INT 107
5131: EQUAL
5132: IFFALSE 5142
// sBomb := true ;
5134: LD_ADDR_EXP 43
5138: PUSH
5139: LD_INT 1
5141: ST_TO_ADDR
// if p3 = 108 then
5142: LD_VAR 0 3
5146: PUSH
5147: LD_INT 108
5149: EQUAL
5150: IFFALSE 5160
// sWound := true ;
5152: LD_ADDR_EXP 51
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// if p3 = 109 then
5160: LD_VAR 0 3
5164: PUSH
5165: LD_INT 109
5167: EQUAL
5168: IFFALSE 5178
// sBetray := true ;
5170: LD_ADDR_EXP 55
5174: PUSH
5175: LD_INT 1
5177: ST_TO_ADDR
// if p3 = 110 then
5178: LD_VAR 0 3
5182: PUSH
5183: LD_INT 110
5185: EQUAL
5186: IFFALSE 5196
// sContamin := true ;
5188: LD_ADDR_EXP 56
5192: PUSH
5193: LD_INT 1
5195: ST_TO_ADDR
// if p3 = 111 then
5196: LD_VAR 0 3
5200: PUSH
5201: LD_INT 111
5203: EQUAL
5204: IFFALSE 5214
// sOil := true ;
5206: LD_ADDR_EXP 58
5210: PUSH
5211: LD_INT 1
5213: ST_TO_ADDR
// if p3 = 112 then
5214: LD_VAR 0 3
5218: PUSH
5219: LD_INT 112
5221: EQUAL
5222: IFFALSE 5232
// sStu := true ;
5224: LD_ADDR_EXP 62
5228: PUSH
5229: LD_INT 1
5231: ST_TO_ADDR
// if p3 = 113 then
5232: LD_VAR 0 3
5236: PUSH
5237: LD_INT 113
5239: EQUAL
5240: IFFALSE 5250
// sBazooka := true ;
5242: LD_ADDR_EXP 65
5246: PUSH
5247: LD_INT 1
5249: ST_TO_ADDR
// if p3 = 114 then
5250: LD_VAR 0 3
5254: PUSH
5255: LD_INT 114
5257: EQUAL
5258: IFFALSE 5268
// sMortar := true ;
5260: LD_ADDR_EXP 66
5264: PUSH
5265: LD_INT 1
5267: ST_TO_ADDR
// if p3 = 115 then
5268: LD_VAR 0 3
5272: PUSH
5273: LD_INT 115
5275: EQUAL
5276: IFFALSE 5286
// sRanger := true ;
5278: LD_ADDR_EXP 76
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// if p3 = 116 then
5286: LD_VAR 0 3
5290: PUSH
5291: LD_INT 116
5293: EQUAL
5294: IFFALSE 5304
// sComputer := true ;
5296: LD_ADDR_EXP 77
5300: PUSH
5301: LD_INT 1
5303: ST_TO_ADDR
// if p3 = 117 then
5304: LD_VAR 0 3
5308: PUSH
5309: LD_INT 117
5311: EQUAL
5312: IFFALSE 5322
// s30 := true ;
5314: LD_ADDR_EXP 78
5318: PUSH
5319: LD_INT 1
5321: ST_TO_ADDR
// if p3 = 118 then
5322: LD_VAR 0 3
5326: PUSH
5327: LD_INT 118
5329: EQUAL
5330: IFFALSE 5340
// s60 := true ;
5332: LD_ADDR_EXP 79
5336: PUSH
5337: LD_INT 1
5339: ST_TO_ADDR
// end ; if p2 = 101 then
5340: LD_VAR 0 2
5344: PUSH
5345: LD_INT 101
5347: EQUAL
5348: IFFALSE 5476
// begin case p3 of 1 :
5350: LD_VAR 0 3
5354: PUSH
5355: LD_INT 1
5357: DOUBLE
5358: EQUAL
5359: IFTRUE 5363
5361: GO 5370
5363: POP
// hHackUnlimitedResources ; 2 :
5364: CALL 17072 0 0
5368: GO 5476
5370: LD_INT 2
5372: DOUBLE
5373: EQUAL
5374: IFTRUE 5378
5376: GO 5385
5378: POP
// hHackSetLevel10 ; 3 :
5379: CALL 17205 0 0
5383: GO 5476
5385: LD_INT 3
5387: DOUBLE
5388: EQUAL
5389: IFTRUE 5393
5391: GO 5400
5393: POP
// hHackSetLevel10YourUnits ; 4 :
5394: CALL 17290 0 0
5398: GO 5476
5400: LD_INT 4
5402: DOUBLE
5403: EQUAL
5404: IFTRUE 5408
5406: GO 5415
5408: POP
// hHackInvincible ; 5 :
5409: CALL 17738 0 0
5413: GO 5476
5415: LD_INT 5
5417: DOUBLE
5418: EQUAL
5419: IFTRUE 5423
5421: GO 5430
5423: POP
// hHackInvisible ; 6 :
5424: CALL 17849 0 0
5428: GO 5476
5430: LD_INT 6
5432: DOUBLE
5433: EQUAL
5434: IFTRUE 5438
5436: GO 5445
5438: POP
// hHackChangeYourSide ; 7 :
5439: CALL 17906 0 0
5443: GO 5476
5445: LD_INT 7
5447: DOUBLE
5448: EQUAL
5449: IFTRUE 5453
5451: GO 5460
5453: POP
// hHackChangeUnitSide ; 8 :
5454: CALL 17948 0 0
5458: GO 5476
5460: LD_INT 8
5462: DOUBLE
5463: EQUAL
5464: IFTRUE 5468
5466: GO 5475
5468: POP
// hHackFog ; end ;
5469: CALL 18049 0 0
5473: GO 5476
5475: POP
// end ; end ;
5476: LD_VAR 0 7
5480: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5481: GO 5483
5483: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5484: LD_STRING initStreamRollete();
5486: PPUSH
5487: CALL_OW 559
// InitStreamMode ;
5491: CALL 5500 0 0
// DefineStreamItems ( ) ;
5495: CALL 5964 0 0
// end ;
5499: END
// function InitStreamMode ; begin
5500: LD_INT 0
5502: PPUSH
// streamModeActive := false ;
5503: LD_ADDR_EXP 23
5507: PUSH
5508: LD_INT 0
5510: ST_TO_ADDR
// normalCounter := 36 ;
5511: LD_ADDR_EXP 24
5515: PUSH
5516: LD_INT 36
5518: ST_TO_ADDR
// hardcoreCounter := 16 ;
5519: LD_ADDR_EXP 25
5523: PUSH
5524: LD_INT 16
5526: ST_TO_ADDR
// sRocket := false ;
5527: LD_ADDR_EXP 28
5531: PUSH
5532: LD_INT 0
5534: ST_TO_ADDR
// sSpeed := false ;
5535: LD_ADDR_EXP 27
5539: PUSH
5540: LD_INT 0
5542: ST_TO_ADDR
// sEngine := false ;
5543: LD_ADDR_EXP 29
5547: PUSH
5548: LD_INT 0
5550: ST_TO_ADDR
// sSpec := false ;
5551: LD_ADDR_EXP 26
5555: PUSH
5556: LD_INT 0
5558: ST_TO_ADDR
// sLevel := false ;
5559: LD_ADDR_EXP 30
5563: PUSH
5564: LD_INT 0
5566: ST_TO_ADDR
// sArmoury := false ;
5567: LD_ADDR_EXP 31
5571: PUSH
5572: LD_INT 0
5574: ST_TO_ADDR
// sRadar := false ;
5575: LD_ADDR_EXP 32
5579: PUSH
5580: LD_INT 0
5582: ST_TO_ADDR
// sBunker := false ;
5583: LD_ADDR_EXP 33
5587: PUSH
5588: LD_INT 0
5590: ST_TO_ADDR
// sHack := false ;
5591: LD_ADDR_EXP 34
5595: PUSH
5596: LD_INT 0
5598: ST_TO_ADDR
// sFire := false ;
5599: LD_ADDR_EXP 35
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// sRefresh := false ;
5607: LD_ADDR_EXP 36
5611: PUSH
5612: LD_INT 0
5614: ST_TO_ADDR
// sExp := false ;
5615: LD_ADDR_EXP 37
5619: PUSH
5620: LD_INT 0
5622: ST_TO_ADDR
// sDepot := false ;
5623: LD_ADDR_EXP 38
5627: PUSH
5628: LD_INT 0
5630: ST_TO_ADDR
// sFlag := false ;
5631: LD_ADDR_EXP 39
5635: PUSH
5636: LD_INT 0
5638: ST_TO_ADDR
// sKamikadze := false ;
5639: LD_ADDR_EXP 47
5643: PUSH
5644: LD_INT 0
5646: ST_TO_ADDR
// sTroll := false ;
5647: LD_ADDR_EXP 48
5651: PUSH
5652: LD_INT 0
5654: ST_TO_ADDR
// sSlow := false ;
5655: LD_ADDR_EXP 49
5659: PUSH
5660: LD_INT 0
5662: ST_TO_ADDR
// sLack := false ;
5663: LD_ADDR_EXP 50
5667: PUSH
5668: LD_INT 0
5670: ST_TO_ADDR
// sTank := false ;
5671: LD_ADDR_EXP 52
5675: PUSH
5676: LD_INT 0
5678: ST_TO_ADDR
// sRemote := false ;
5679: LD_ADDR_EXP 53
5683: PUSH
5684: LD_INT 0
5686: ST_TO_ADDR
// sPowell := false ;
5687: LD_ADDR_EXP 54
5691: PUSH
5692: LD_INT 0
5694: ST_TO_ADDR
// sTeleport := false ;
5695: LD_ADDR_EXP 57
5699: PUSH
5700: LD_INT 0
5702: ST_TO_ADDR
// sOilTower := false ;
5703: LD_ADDR_EXP 59
5707: PUSH
5708: LD_INT 0
5710: ST_TO_ADDR
// sShovel := false ;
5711: LD_ADDR_EXP 60
5715: PUSH
5716: LD_INT 0
5718: ST_TO_ADDR
// sSheik := false ;
5719: LD_ADDR_EXP 61
5723: PUSH
5724: LD_INT 0
5726: ST_TO_ADDR
// sEarthquake := false ;
5727: LD_ADDR_EXP 63
5731: PUSH
5732: LD_INT 0
5734: ST_TO_ADDR
// sAI := false ;
5735: LD_ADDR_EXP 64
5739: PUSH
5740: LD_INT 0
5742: ST_TO_ADDR
// sCargo := false ;
5743: LD_ADDR_EXP 67
5747: PUSH
5748: LD_INT 0
5750: ST_TO_ADDR
// sDLaser := false ;
5751: LD_ADDR_EXP 68
5755: PUSH
5756: LD_INT 0
5758: ST_TO_ADDR
// sExchange := false ;
5759: LD_ADDR_EXP 69
5763: PUSH
5764: LD_INT 0
5766: ST_TO_ADDR
// sFac := false ;
5767: LD_ADDR_EXP 70
5771: PUSH
5772: LD_INT 0
5774: ST_TO_ADDR
// sPower := false ;
5775: LD_ADDR_EXP 71
5779: PUSH
5780: LD_INT 0
5782: ST_TO_ADDR
// sRandom := false ;
5783: LD_ADDR_EXP 72
5787: PUSH
5788: LD_INT 0
5790: ST_TO_ADDR
// sShield := false ;
5791: LD_ADDR_EXP 73
5795: PUSH
5796: LD_INT 0
5798: ST_TO_ADDR
// sTime := false ;
5799: LD_ADDR_EXP 74
5803: PUSH
5804: LD_INT 0
5806: ST_TO_ADDR
// sTools := false ;
5807: LD_ADDR_EXP 75
5811: PUSH
5812: LD_INT 0
5814: ST_TO_ADDR
// sSold := false ;
5815: LD_ADDR_EXP 40
5819: PUSH
5820: LD_INT 0
5822: ST_TO_ADDR
// sDiff := false ;
5823: LD_ADDR_EXP 41
5827: PUSH
5828: LD_INT 0
5830: ST_TO_ADDR
// sFog := false ;
5831: LD_ADDR_EXP 44
5835: PUSH
5836: LD_INT 0
5838: ST_TO_ADDR
// sReset := false ;
5839: LD_ADDR_EXP 45
5843: PUSH
5844: LD_INT 0
5846: ST_TO_ADDR
// sSun := false ;
5847: LD_ADDR_EXP 46
5851: PUSH
5852: LD_INT 0
5854: ST_TO_ADDR
// sTiger := false ;
5855: LD_ADDR_EXP 42
5859: PUSH
5860: LD_INT 0
5862: ST_TO_ADDR
// sBomb := false ;
5863: LD_ADDR_EXP 43
5867: PUSH
5868: LD_INT 0
5870: ST_TO_ADDR
// sWound := false ;
5871: LD_ADDR_EXP 51
5875: PUSH
5876: LD_INT 0
5878: ST_TO_ADDR
// sBetray := false ;
5879: LD_ADDR_EXP 55
5883: PUSH
5884: LD_INT 0
5886: ST_TO_ADDR
// sContamin := false ;
5887: LD_ADDR_EXP 56
5891: PUSH
5892: LD_INT 0
5894: ST_TO_ADDR
// sOil := false ;
5895: LD_ADDR_EXP 58
5899: PUSH
5900: LD_INT 0
5902: ST_TO_ADDR
// sStu := false ;
5903: LD_ADDR_EXP 62
5907: PUSH
5908: LD_INT 0
5910: ST_TO_ADDR
// sBazooka := false ;
5911: LD_ADDR_EXP 65
5915: PUSH
5916: LD_INT 0
5918: ST_TO_ADDR
// sMortar := false ;
5919: LD_ADDR_EXP 66
5923: PUSH
5924: LD_INT 0
5926: ST_TO_ADDR
// sRanger := false ;
5927: LD_ADDR_EXP 76
5931: PUSH
5932: LD_INT 0
5934: ST_TO_ADDR
// sComputer := false ;
5935: LD_ADDR_EXP 77
5939: PUSH
5940: LD_INT 0
5942: ST_TO_ADDR
// s30 := false ;
5943: LD_ADDR_EXP 78
5947: PUSH
5948: LD_INT 0
5950: ST_TO_ADDR
// s60 := false ;
5951: LD_ADDR_EXP 79
5955: PUSH
5956: LD_INT 0
5958: ST_TO_ADDR
// end ;
5959: LD_VAR 0 1
5963: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5964: LD_INT 0
5966: PPUSH
5967: PPUSH
5968: PPUSH
5969: PPUSH
5970: PPUSH
// result := [ ] ;
5971: LD_ADDR_VAR 0 1
5975: PUSH
5976: EMPTY
5977: ST_TO_ADDR
// if campaign_id = 1 then
5978: LD_OWVAR 69
5982: PUSH
5983: LD_INT 1
5985: EQUAL
5986: IFFALSE 9152
// begin case mission_number of 1 :
5988: LD_OWVAR 70
5992: PUSH
5993: LD_INT 1
5995: DOUBLE
5996: EQUAL
5997: IFTRUE 6001
5999: GO 6077
6001: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6002: LD_ADDR_VAR 0 1
6006: PUSH
6007: LD_INT 2
6009: PUSH
6010: LD_INT 4
6012: PUSH
6013: LD_INT 11
6015: PUSH
6016: LD_INT 12
6018: PUSH
6019: LD_INT 15
6021: PUSH
6022: LD_INT 16
6024: PUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 23
6030: PUSH
6031: LD_INT 26
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 101
6047: PUSH
6048: LD_INT 102
6050: PUSH
6051: LD_INT 106
6053: PUSH
6054: LD_INT 116
6056: PUSH
6057: LD_INT 117
6059: PUSH
6060: LD_INT 118
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: EMPTY
6072: LIST
6073: LIST
6074: ST_TO_ADDR
6075: GO 9150
6077: LD_INT 2
6079: DOUBLE
6080: EQUAL
6081: IFTRUE 6085
6083: GO 6169
6085: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6086: LD_ADDR_VAR 0 1
6090: PUSH
6091: LD_INT 2
6093: PUSH
6094: LD_INT 4
6096: PUSH
6097: LD_INT 11
6099: PUSH
6100: LD_INT 12
6102: PUSH
6103: LD_INT 15
6105: PUSH
6106: LD_INT 16
6108: PUSH
6109: LD_INT 22
6111: PUSH
6112: LD_INT 23
6114: PUSH
6115: LD_INT 26
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: LIST
6125: LIST
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 101
6131: PUSH
6132: LD_INT 102
6134: PUSH
6135: LD_INT 105
6137: PUSH
6138: LD_INT 106
6140: PUSH
6141: LD_INT 108
6143: PUSH
6144: LD_INT 116
6146: PUSH
6147: LD_INT 117
6149: PUSH
6150: LD_INT 118
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: LIST
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: ST_TO_ADDR
6167: GO 9150
6169: LD_INT 3
6171: DOUBLE
6172: EQUAL
6173: IFTRUE 6177
6175: GO 6265
6177: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6178: LD_ADDR_VAR 0 1
6182: PUSH
6183: LD_INT 2
6185: PUSH
6186: LD_INT 4
6188: PUSH
6189: LD_INT 5
6191: PUSH
6192: LD_INT 11
6194: PUSH
6195: LD_INT 12
6197: PUSH
6198: LD_INT 15
6200: PUSH
6201: LD_INT 16
6203: PUSH
6204: LD_INT 22
6206: PUSH
6207: LD_INT 26
6209: PUSH
6210: LD_INT 36
6212: PUSH
6213: EMPTY
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: LIST
6221: LIST
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 101
6227: PUSH
6228: LD_INT 102
6230: PUSH
6231: LD_INT 105
6233: PUSH
6234: LD_INT 106
6236: PUSH
6237: LD_INT 108
6239: PUSH
6240: LD_INT 116
6242: PUSH
6243: LD_INT 117
6245: PUSH
6246: LD_INT 118
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: ST_TO_ADDR
6263: GO 9150
6265: LD_INT 4
6267: DOUBLE
6268: EQUAL
6269: IFTRUE 6273
6271: GO 6369
6273: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6274: LD_ADDR_VAR 0 1
6278: PUSH
6279: LD_INT 2
6281: PUSH
6282: LD_INT 4
6284: PUSH
6285: LD_INT 5
6287: PUSH
6288: LD_INT 8
6290: PUSH
6291: LD_INT 11
6293: PUSH
6294: LD_INT 12
6296: PUSH
6297: LD_INT 15
6299: PUSH
6300: LD_INT 16
6302: PUSH
6303: LD_INT 22
6305: PUSH
6306: LD_INT 23
6308: PUSH
6309: LD_INT 26
6311: PUSH
6312: LD_INT 36
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 101
6331: PUSH
6332: LD_INT 102
6334: PUSH
6335: LD_INT 105
6337: PUSH
6338: LD_INT 106
6340: PUSH
6341: LD_INT 108
6343: PUSH
6344: LD_INT 116
6346: PUSH
6347: LD_INT 117
6349: PUSH
6350: LD_INT 118
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: ST_TO_ADDR
6367: GO 9150
6369: LD_INT 5
6371: DOUBLE
6372: EQUAL
6373: IFTRUE 6377
6375: GO 6489
6377: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: LD_INT 2
6385: PUSH
6386: LD_INT 4
6388: PUSH
6389: LD_INT 5
6391: PUSH
6392: LD_INT 6
6394: PUSH
6395: LD_INT 8
6397: PUSH
6398: LD_INT 11
6400: PUSH
6401: LD_INT 12
6403: PUSH
6404: LD_INT 15
6406: PUSH
6407: LD_INT 16
6409: PUSH
6410: LD_INT 22
6412: PUSH
6413: LD_INT 23
6415: PUSH
6416: LD_INT 25
6418: PUSH
6419: LD_INT 26
6421: PUSH
6422: LD_INT 36
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 101
6443: PUSH
6444: LD_INT 102
6446: PUSH
6447: LD_INT 105
6449: PUSH
6450: LD_INT 106
6452: PUSH
6453: LD_INT 108
6455: PUSH
6456: LD_INT 109
6458: PUSH
6459: LD_INT 112
6461: PUSH
6462: LD_INT 116
6464: PUSH
6465: LD_INT 117
6467: PUSH
6468: LD_INT 118
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: LIST
6479: LIST
6480: LIST
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: ST_TO_ADDR
6487: GO 9150
6489: LD_INT 6
6491: DOUBLE
6492: EQUAL
6493: IFTRUE 6497
6495: GO 6629
6497: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6498: LD_ADDR_VAR 0 1
6502: PUSH
6503: LD_INT 2
6505: PUSH
6506: LD_INT 4
6508: PUSH
6509: LD_INT 5
6511: PUSH
6512: LD_INT 6
6514: PUSH
6515: LD_INT 8
6517: PUSH
6518: LD_INT 11
6520: PUSH
6521: LD_INT 12
6523: PUSH
6524: LD_INT 15
6526: PUSH
6527: LD_INT 16
6529: PUSH
6530: LD_INT 20
6532: PUSH
6533: LD_INT 21
6535: PUSH
6536: LD_INT 22
6538: PUSH
6539: LD_INT 23
6541: PUSH
6542: LD_INT 25
6544: PUSH
6545: LD_INT 26
6547: PUSH
6548: LD_INT 30
6550: PUSH
6551: LD_INT 31
6553: PUSH
6554: LD_INT 32
6556: PUSH
6557: LD_INT 36
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 101
6583: PUSH
6584: LD_INT 102
6586: PUSH
6587: LD_INT 105
6589: PUSH
6590: LD_INT 106
6592: PUSH
6593: LD_INT 108
6595: PUSH
6596: LD_INT 109
6598: PUSH
6599: LD_INT 112
6601: PUSH
6602: LD_INT 116
6604: PUSH
6605: LD_INT 117
6607: PUSH
6608: LD_INT 118
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: PUSH
6623: EMPTY
6624: LIST
6625: LIST
6626: ST_TO_ADDR
6627: GO 9150
6629: LD_INT 7
6631: DOUBLE
6632: EQUAL
6633: IFTRUE 6637
6635: GO 6749
6637: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6638: LD_ADDR_VAR 0 1
6642: PUSH
6643: LD_INT 2
6645: PUSH
6646: LD_INT 4
6648: PUSH
6649: LD_INT 5
6651: PUSH
6652: LD_INT 7
6654: PUSH
6655: LD_INT 11
6657: PUSH
6658: LD_INT 12
6660: PUSH
6661: LD_INT 15
6663: PUSH
6664: LD_INT 16
6666: PUSH
6667: LD_INT 20
6669: PUSH
6670: LD_INT 21
6672: PUSH
6673: LD_INT 22
6675: PUSH
6676: LD_INT 23
6678: PUSH
6679: LD_INT 25
6681: PUSH
6682: LD_INT 26
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: PUSH
6701: LD_INT 101
6703: PUSH
6704: LD_INT 102
6706: PUSH
6707: LD_INT 103
6709: PUSH
6710: LD_INT 105
6712: PUSH
6713: LD_INT 106
6715: PUSH
6716: LD_INT 108
6718: PUSH
6719: LD_INT 112
6721: PUSH
6722: LD_INT 116
6724: PUSH
6725: LD_INT 117
6727: PUSH
6728: LD_INT 118
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: ST_TO_ADDR
6747: GO 9150
6749: LD_INT 8
6751: DOUBLE
6752: EQUAL
6753: IFTRUE 6757
6755: GO 6897
6757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6758: LD_ADDR_VAR 0 1
6762: PUSH
6763: LD_INT 2
6765: PUSH
6766: LD_INT 4
6768: PUSH
6769: LD_INT 5
6771: PUSH
6772: LD_INT 6
6774: PUSH
6775: LD_INT 7
6777: PUSH
6778: LD_INT 8
6780: PUSH
6781: LD_INT 11
6783: PUSH
6784: LD_INT 12
6786: PUSH
6787: LD_INT 15
6789: PUSH
6790: LD_INT 16
6792: PUSH
6793: LD_INT 20
6795: PUSH
6796: LD_INT 21
6798: PUSH
6799: LD_INT 22
6801: PUSH
6802: LD_INT 23
6804: PUSH
6805: LD_INT 25
6807: PUSH
6808: LD_INT 26
6810: PUSH
6811: LD_INT 30
6813: PUSH
6814: LD_INT 31
6816: PUSH
6817: LD_INT 32
6819: PUSH
6820: LD_INT 36
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 101
6847: PUSH
6848: LD_INT 102
6850: PUSH
6851: LD_INT 103
6853: PUSH
6854: LD_INT 105
6856: PUSH
6857: LD_INT 106
6859: PUSH
6860: LD_INT 108
6862: PUSH
6863: LD_INT 109
6865: PUSH
6866: LD_INT 112
6868: PUSH
6869: LD_INT 116
6871: PUSH
6872: LD_INT 117
6874: PUSH
6875: LD_INT 118
6877: PUSH
6878: EMPTY
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: LIST
6887: LIST
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: ST_TO_ADDR
6895: GO 9150
6897: LD_INT 9
6899: DOUBLE
6900: EQUAL
6901: IFTRUE 6905
6903: GO 7053
6905: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6906: LD_ADDR_VAR 0 1
6910: PUSH
6911: LD_INT 2
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 6
6922: PUSH
6923: LD_INT 7
6925: PUSH
6926: LD_INT 8
6928: PUSH
6929: LD_INT 11
6931: PUSH
6932: LD_INT 12
6934: PUSH
6935: LD_INT 15
6937: PUSH
6938: LD_INT 16
6940: PUSH
6941: LD_INT 20
6943: PUSH
6944: LD_INT 21
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 23
6952: PUSH
6953: LD_INT 25
6955: PUSH
6956: LD_INT 26
6958: PUSH
6959: LD_INT 28
6961: PUSH
6962: LD_INT 30
6964: PUSH
6965: LD_INT 31
6967: PUSH
6968: LD_INT 32
6970: PUSH
6971: LD_INT 36
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 101
6999: PUSH
7000: LD_INT 102
7002: PUSH
7003: LD_INT 103
7005: PUSH
7006: LD_INT 105
7008: PUSH
7009: LD_INT 106
7011: PUSH
7012: LD_INT 108
7014: PUSH
7015: LD_INT 109
7017: PUSH
7018: LD_INT 112
7020: PUSH
7021: LD_INT 114
7023: PUSH
7024: LD_INT 116
7026: PUSH
7027: LD_INT 117
7029: PUSH
7030: LD_INT 118
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: PUSH
7047: EMPTY
7048: LIST
7049: LIST
7050: ST_TO_ADDR
7051: GO 9150
7053: LD_INT 10
7055: DOUBLE
7056: EQUAL
7057: IFTRUE 7061
7059: GO 7257
7061: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7062: LD_ADDR_VAR 0 1
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 4
7072: PUSH
7073: LD_INT 5
7075: PUSH
7076: LD_INT 6
7078: PUSH
7079: LD_INT 7
7081: PUSH
7082: LD_INT 8
7084: PUSH
7085: LD_INT 9
7087: PUSH
7088: LD_INT 10
7090: PUSH
7091: LD_INT 11
7093: PUSH
7094: LD_INT 12
7096: PUSH
7097: LD_INT 13
7099: PUSH
7100: LD_INT 14
7102: PUSH
7103: LD_INT 15
7105: PUSH
7106: LD_INT 16
7108: PUSH
7109: LD_INT 17
7111: PUSH
7112: LD_INT 18
7114: PUSH
7115: LD_INT 19
7117: PUSH
7118: LD_INT 20
7120: PUSH
7121: LD_INT 21
7123: PUSH
7124: LD_INT 22
7126: PUSH
7127: LD_INT 23
7129: PUSH
7130: LD_INT 24
7132: PUSH
7133: LD_INT 25
7135: PUSH
7136: LD_INT 26
7138: PUSH
7139: LD_INT 28
7141: PUSH
7142: LD_INT 30
7144: PUSH
7145: LD_INT 31
7147: PUSH
7148: LD_INT 32
7150: PUSH
7151: LD_INT 36
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 101
7187: PUSH
7188: LD_INT 102
7190: PUSH
7191: LD_INT 103
7193: PUSH
7194: LD_INT 104
7196: PUSH
7197: LD_INT 105
7199: PUSH
7200: LD_INT 106
7202: PUSH
7203: LD_INT 107
7205: PUSH
7206: LD_INT 108
7208: PUSH
7209: LD_INT 109
7211: PUSH
7212: LD_INT 110
7214: PUSH
7215: LD_INT 111
7217: PUSH
7218: LD_INT 112
7220: PUSH
7221: LD_INT 114
7223: PUSH
7224: LD_INT 116
7226: PUSH
7227: LD_INT 117
7229: PUSH
7230: LD_INT 118
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: LIST
7247: LIST
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: ST_TO_ADDR
7255: GO 9150
7257: LD_INT 11
7259: DOUBLE
7260: EQUAL
7261: IFTRUE 7265
7263: GO 7469
7265: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7266: LD_ADDR_VAR 0 1
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: LD_INT 3
7276: PUSH
7277: LD_INT 4
7279: PUSH
7280: LD_INT 5
7282: PUSH
7283: LD_INT 6
7285: PUSH
7286: LD_INT 7
7288: PUSH
7289: LD_INT 8
7291: PUSH
7292: LD_INT 9
7294: PUSH
7295: LD_INT 10
7297: PUSH
7298: LD_INT 11
7300: PUSH
7301: LD_INT 12
7303: PUSH
7304: LD_INT 13
7306: PUSH
7307: LD_INT 14
7309: PUSH
7310: LD_INT 15
7312: PUSH
7313: LD_INT 16
7315: PUSH
7316: LD_INT 17
7318: PUSH
7319: LD_INT 18
7321: PUSH
7322: LD_INT 19
7324: PUSH
7325: LD_INT 20
7327: PUSH
7328: LD_INT 21
7330: PUSH
7331: LD_INT 22
7333: PUSH
7334: LD_INT 23
7336: PUSH
7337: LD_INT 24
7339: PUSH
7340: LD_INT 25
7342: PUSH
7343: LD_INT 26
7345: PUSH
7346: LD_INT 28
7348: PUSH
7349: LD_INT 30
7351: PUSH
7352: LD_INT 31
7354: PUSH
7355: LD_INT 32
7357: PUSH
7358: LD_INT 34
7360: PUSH
7361: LD_INT 36
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 101
7399: PUSH
7400: LD_INT 102
7402: PUSH
7403: LD_INT 103
7405: PUSH
7406: LD_INT 104
7408: PUSH
7409: LD_INT 105
7411: PUSH
7412: LD_INT 106
7414: PUSH
7415: LD_INT 107
7417: PUSH
7418: LD_INT 108
7420: PUSH
7421: LD_INT 109
7423: PUSH
7424: LD_INT 110
7426: PUSH
7427: LD_INT 111
7429: PUSH
7430: LD_INT 112
7432: PUSH
7433: LD_INT 114
7435: PUSH
7436: LD_INT 116
7438: PUSH
7439: LD_INT 117
7441: PUSH
7442: LD_INT 118
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: ST_TO_ADDR
7467: GO 9150
7469: LD_INT 12
7471: DOUBLE
7472: EQUAL
7473: IFTRUE 7477
7475: GO 7697
7477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7478: LD_ADDR_VAR 0 1
7482: PUSH
7483: LD_INT 1
7485: PUSH
7486: LD_INT 2
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: LD_INT 4
7494: PUSH
7495: LD_INT 5
7497: PUSH
7498: LD_INT 6
7500: PUSH
7501: LD_INT 7
7503: PUSH
7504: LD_INT 8
7506: PUSH
7507: LD_INT 9
7509: PUSH
7510: LD_INT 10
7512: PUSH
7513: LD_INT 11
7515: PUSH
7516: LD_INT 12
7518: PUSH
7519: LD_INT 13
7521: PUSH
7522: LD_INT 14
7524: PUSH
7525: LD_INT 15
7527: PUSH
7528: LD_INT 16
7530: PUSH
7531: LD_INT 17
7533: PUSH
7534: LD_INT 18
7536: PUSH
7537: LD_INT 19
7539: PUSH
7540: LD_INT 20
7542: PUSH
7543: LD_INT 21
7545: PUSH
7546: LD_INT 22
7548: PUSH
7549: LD_INT 23
7551: PUSH
7552: LD_INT 24
7554: PUSH
7555: LD_INT 25
7557: PUSH
7558: LD_INT 26
7560: PUSH
7561: LD_INT 27
7563: PUSH
7564: LD_INT 28
7566: PUSH
7567: LD_INT 30
7569: PUSH
7570: LD_INT 31
7572: PUSH
7573: LD_INT 32
7575: PUSH
7576: LD_INT 33
7578: PUSH
7579: LD_INT 34
7581: PUSH
7582: LD_INT 36
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: PUSH
7621: LD_INT 101
7623: PUSH
7624: LD_INT 102
7626: PUSH
7627: LD_INT 103
7629: PUSH
7630: LD_INT 104
7632: PUSH
7633: LD_INT 105
7635: PUSH
7636: LD_INT 106
7638: PUSH
7639: LD_INT 107
7641: PUSH
7642: LD_INT 108
7644: PUSH
7645: LD_INT 109
7647: PUSH
7648: LD_INT 110
7650: PUSH
7651: LD_INT 111
7653: PUSH
7654: LD_INT 112
7656: PUSH
7657: LD_INT 113
7659: PUSH
7660: LD_INT 114
7662: PUSH
7663: LD_INT 116
7665: PUSH
7666: LD_INT 117
7668: PUSH
7669: LD_INT 118
7671: PUSH
7672: EMPTY
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: ST_TO_ADDR
7695: GO 9150
7697: LD_INT 13
7699: DOUBLE
7700: EQUAL
7701: IFTRUE 7705
7703: GO 7913
7705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7706: LD_ADDR_VAR 0 1
7710: PUSH
7711: LD_INT 1
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: LD_INT 3
7719: PUSH
7720: LD_INT 4
7722: PUSH
7723: LD_INT 5
7725: PUSH
7726: LD_INT 8
7728: PUSH
7729: LD_INT 9
7731: PUSH
7732: LD_INT 10
7734: PUSH
7735: LD_INT 11
7737: PUSH
7738: LD_INT 12
7740: PUSH
7741: LD_INT 14
7743: PUSH
7744: LD_INT 15
7746: PUSH
7747: LD_INT 16
7749: PUSH
7750: LD_INT 17
7752: PUSH
7753: LD_INT 18
7755: PUSH
7756: LD_INT 19
7758: PUSH
7759: LD_INT 20
7761: PUSH
7762: LD_INT 21
7764: PUSH
7765: LD_INT 22
7767: PUSH
7768: LD_INT 23
7770: PUSH
7771: LD_INT 24
7773: PUSH
7774: LD_INT 25
7776: PUSH
7777: LD_INT 26
7779: PUSH
7780: LD_INT 27
7782: PUSH
7783: LD_INT 28
7785: PUSH
7786: LD_INT 30
7788: PUSH
7789: LD_INT 31
7791: PUSH
7792: LD_INT 32
7794: PUSH
7795: LD_INT 33
7797: PUSH
7798: LD_INT 34
7800: PUSH
7801: LD_INT 36
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: PUSH
7837: LD_INT 101
7839: PUSH
7840: LD_INT 102
7842: PUSH
7843: LD_INT 103
7845: PUSH
7846: LD_INT 104
7848: PUSH
7849: LD_INT 105
7851: PUSH
7852: LD_INT 106
7854: PUSH
7855: LD_INT 107
7857: PUSH
7858: LD_INT 108
7860: PUSH
7861: LD_INT 109
7863: PUSH
7864: LD_INT 110
7866: PUSH
7867: LD_INT 111
7869: PUSH
7870: LD_INT 112
7872: PUSH
7873: LD_INT 113
7875: PUSH
7876: LD_INT 114
7878: PUSH
7879: LD_INT 116
7881: PUSH
7882: LD_INT 117
7884: PUSH
7885: LD_INT 118
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: ST_TO_ADDR
7911: GO 9150
7913: LD_INT 14
7915: DOUBLE
7916: EQUAL
7917: IFTRUE 7921
7919: GO 8145
7921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7922: LD_ADDR_VAR 0 1
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: LD_INT 2
7932: PUSH
7933: LD_INT 3
7935: PUSH
7936: LD_INT 4
7938: PUSH
7939: LD_INT 5
7941: PUSH
7942: LD_INT 6
7944: PUSH
7945: LD_INT 7
7947: PUSH
7948: LD_INT 8
7950: PUSH
7951: LD_INT 9
7953: PUSH
7954: LD_INT 10
7956: PUSH
7957: LD_INT 11
7959: PUSH
7960: LD_INT 12
7962: PUSH
7963: LD_INT 13
7965: PUSH
7966: LD_INT 14
7968: PUSH
7969: LD_INT 15
7971: PUSH
7972: LD_INT 16
7974: PUSH
7975: LD_INT 17
7977: PUSH
7978: LD_INT 18
7980: PUSH
7981: LD_INT 19
7983: PUSH
7984: LD_INT 20
7986: PUSH
7987: LD_INT 21
7989: PUSH
7990: LD_INT 22
7992: PUSH
7993: LD_INT 23
7995: PUSH
7996: LD_INT 24
7998: PUSH
7999: LD_INT 25
8001: PUSH
8002: LD_INT 26
8004: PUSH
8005: LD_INT 27
8007: PUSH
8008: LD_INT 28
8010: PUSH
8011: LD_INT 29
8013: PUSH
8014: LD_INT 30
8016: PUSH
8017: LD_INT 31
8019: PUSH
8020: LD_INT 32
8022: PUSH
8023: LD_INT 33
8025: PUSH
8026: LD_INT 34
8028: PUSH
8029: LD_INT 36
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 101
8071: PUSH
8072: LD_INT 102
8074: PUSH
8075: LD_INT 103
8077: PUSH
8078: LD_INT 104
8080: PUSH
8081: LD_INT 105
8083: PUSH
8084: LD_INT 106
8086: PUSH
8087: LD_INT 107
8089: PUSH
8090: LD_INT 108
8092: PUSH
8093: LD_INT 109
8095: PUSH
8096: LD_INT 110
8098: PUSH
8099: LD_INT 111
8101: PUSH
8102: LD_INT 112
8104: PUSH
8105: LD_INT 113
8107: PUSH
8108: LD_INT 114
8110: PUSH
8111: LD_INT 116
8113: PUSH
8114: LD_INT 117
8116: PUSH
8117: LD_INT 118
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: ST_TO_ADDR
8143: GO 9150
8145: LD_INT 15
8147: DOUBLE
8148: EQUAL
8149: IFTRUE 8153
8151: GO 8377
8153: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8154: LD_ADDR_VAR 0 1
8158: PUSH
8159: LD_INT 1
8161: PUSH
8162: LD_INT 2
8164: PUSH
8165: LD_INT 3
8167: PUSH
8168: LD_INT 4
8170: PUSH
8171: LD_INT 5
8173: PUSH
8174: LD_INT 6
8176: PUSH
8177: LD_INT 7
8179: PUSH
8180: LD_INT 8
8182: PUSH
8183: LD_INT 9
8185: PUSH
8186: LD_INT 10
8188: PUSH
8189: LD_INT 11
8191: PUSH
8192: LD_INT 12
8194: PUSH
8195: LD_INT 13
8197: PUSH
8198: LD_INT 14
8200: PUSH
8201: LD_INT 15
8203: PUSH
8204: LD_INT 16
8206: PUSH
8207: LD_INT 17
8209: PUSH
8210: LD_INT 18
8212: PUSH
8213: LD_INT 19
8215: PUSH
8216: LD_INT 20
8218: PUSH
8219: LD_INT 21
8221: PUSH
8222: LD_INT 22
8224: PUSH
8225: LD_INT 23
8227: PUSH
8228: LD_INT 24
8230: PUSH
8231: LD_INT 25
8233: PUSH
8234: LD_INT 26
8236: PUSH
8237: LD_INT 27
8239: PUSH
8240: LD_INT 28
8242: PUSH
8243: LD_INT 29
8245: PUSH
8246: LD_INT 30
8248: PUSH
8249: LD_INT 31
8251: PUSH
8252: LD_INT 32
8254: PUSH
8255: LD_INT 33
8257: PUSH
8258: LD_INT 34
8260: PUSH
8261: LD_INT 36
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 101
8303: PUSH
8304: LD_INT 102
8306: PUSH
8307: LD_INT 103
8309: PUSH
8310: LD_INT 104
8312: PUSH
8313: LD_INT 105
8315: PUSH
8316: LD_INT 106
8318: PUSH
8319: LD_INT 107
8321: PUSH
8322: LD_INT 108
8324: PUSH
8325: LD_INT 109
8327: PUSH
8328: LD_INT 110
8330: PUSH
8331: LD_INT 111
8333: PUSH
8334: LD_INT 112
8336: PUSH
8337: LD_INT 113
8339: PUSH
8340: LD_INT 114
8342: PUSH
8343: LD_INT 116
8345: PUSH
8346: LD_INT 117
8348: PUSH
8349: LD_INT 118
8351: PUSH
8352: EMPTY
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: ST_TO_ADDR
8375: GO 9150
8377: LD_INT 16
8379: DOUBLE
8380: EQUAL
8381: IFTRUE 8385
8383: GO 8521
8385: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8386: LD_ADDR_VAR 0 1
8390: PUSH
8391: LD_INT 2
8393: PUSH
8394: LD_INT 4
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: LD_INT 7
8402: PUSH
8403: LD_INT 11
8405: PUSH
8406: LD_INT 12
8408: PUSH
8409: LD_INT 15
8411: PUSH
8412: LD_INT 16
8414: PUSH
8415: LD_INT 20
8417: PUSH
8418: LD_INT 21
8420: PUSH
8421: LD_INT 22
8423: PUSH
8424: LD_INT 23
8426: PUSH
8427: LD_INT 25
8429: PUSH
8430: LD_INT 26
8432: PUSH
8433: LD_INT 30
8435: PUSH
8436: LD_INT 31
8438: PUSH
8439: LD_INT 32
8441: PUSH
8442: LD_INT 33
8444: PUSH
8445: LD_INT 34
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 101
8471: PUSH
8472: LD_INT 102
8474: PUSH
8475: LD_INT 103
8477: PUSH
8478: LD_INT 106
8480: PUSH
8481: LD_INT 108
8483: PUSH
8484: LD_INT 112
8486: PUSH
8487: LD_INT 113
8489: PUSH
8490: LD_INT 114
8492: PUSH
8493: LD_INT 116
8495: PUSH
8496: LD_INT 117
8498: PUSH
8499: LD_INT 118
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: ST_TO_ADDR
8519: GO 9150
8521: LD_INT 17
8523: DOUBLE
8524: EQUAL
8525: IFTRUE 8529
8527: GO 8753
8529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8530: LD_ADDR_VAR 0 1
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 3
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: LD_INT 5
8549: PUSH
8550: LD_INT 6
8552: PUSH
8553: LD_INT 7
8555: PUSH
8556: LD_INT 8
8558: PUSH
8559: LD_INT 9
8561: PUSH
8562: LD_INT 10
8564: PUSH
8565: LD_INT 11
8567: PUSH
8568: LD_INT 12
8570: PUSH
8571: LD_INT 13
8573: PUSH
8574: LD_INT 14
8576: PUSH
8577: LD_INT 15
8579: PUSH
8580: LD_INT 16
8582: PUSH
8583: LD_INT 17
8585: PUSH
8586: LD_INT 18
8588: PUSH
8589: LD_INT 19
8591: PUSH
8592: LD_INT 20
8594: PUSH
8595: LD_INT 21
8597: PUSH
8598: LD_INT 22
8600: PUSH
8601: LD_INT 23
8603: PUSH
8604: LD_INT 24
8606: PUSH
8607: LD_INT 25
8609: PUSH
8610: LD_INT 26
8612: PUSH
8613: LD_INT 27
8615: PUSH
8616: LD_INT 28
8618: PUSH
8619: LD_INT 29
8621: PUSH
8622: LD_INT 30
8624: PUSH
8625: LD_INT 31
8627: PUSH
8628: LD_INT 32
8630: PUSH
8631: LD_INT 33
8633: PUSH
8634: LD_INT 34
8636: PUSH
8637: LD_INT 36
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 101
8679: PUSH
8680: LD_INT 102
8682: PUSH
8683: LD_INT 103
8685: PUSH
8686: LD_INT 104
8688: PUSH
8689: LD_INT 105
8691: PUSH
8692: LD_INT 106
8694: PUSH
8695: LD_INT 107
8697: PUSH
8698: LD_INT 108
8700: PUSH
8701: LD_INT 109
8703: PUSH
8704: LD_INT 110
8706: PUSH
8707: LD_INT 111
8709: PUSH
8710: LD_INT 112
8712: PUSH
8713: LD_INT 113
8715: PUSH
8716: LD_INT 114
8718: PUSH
8719: LD_INT 116
8721: PUSH
8722: LD_INT 117
8724: PUSH
8725: LD_INT 118
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: ST_TO_ADDR
8751: GO 9150
8753: LD_INT 18
8755: DOUBLE
8756: EQUAL
8757: IFTRUE 8761
8759: GO 8909
8761: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8762: LD_ADDR_VAR 0 1
8766: PUSH
8767: LD_INT 2
8769: PUSH
8770: LD_INT 4
8772: PUSH
8773: LD_INT 5
8775: PUSH
8776: LD_INT 7
8778: PUSH
8779: LD_INT 11
8781: PUSH
8782: LD_INT 12
8784: PUSH
8785: LD_INT 15
8787: PUSH
8788: LD_INT 16
8790: PUSH
8791: LD_INT 20
8793: PUSH
8794: LD_INT 21
8796: PUSH
8797: LD_INT 22
8799: PUSH
8800: LD_INT 23
8802: PUSH
8803: LD_INT 25
8805: PUSH
8806: LD_INT 26
8808: PUSH
8809: LD_INT 30
8811: PUSH
8812: LD_INT 31
8814: PUSH
8815: LD_INT 32
8817: PUSH
8818: LD_INT 33
8820: PUSH
8821: LD_INT 34
8823: PUSH
8824: LD_INT 35
8826: PUSH
8827: LD_INT 36
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 101
8855: PUSH
8856: LD_INT 102
8858: PUSH
8859: LD_INT 103
8861: PUSH
8862: LD_INT 106
8864: PUSH
8865: LD_INT 108
8867: PUSH
8868: LD_INT 112
8870: PUSH
8871: LD_INT 113
8873: PUSH
8874: LD_INT 114
8876: PUSH
8877: LD_INT 115
8879: PUSH
8880: LD_INT 116
8882: PUSH
8883: LD_INT 117
8885: PUSH
8886: LD_INT 118
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: ST_TO_ADDR
8907: GO 9150
8909: LD_INT 19
8911: DOUBLE
8912: EQUAL
8913: IFTRUE 8917
8915: GO 9149
8917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8918: LD_ADDR_VAR 0 1
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: LD_INT 2
8928: PUSH
8929: LD_INT 3
8931: PUSH
8932: LD_INT 4
8934: PUSH
8935: LD_INT 5
8937: PUSH
8938: LD_INT 6
8940: PUSH
8941: LD_INT 7
8943: PUSH
8944: LD_INT 8
8946: PUSH
8947: LD_INT 9
8949: PUSH
8950: LD_INT 10
8952: PUSH
8953: LD_INT 11
8955: PUSH
8956: LD_INT 12
8958: PUSH
8959: LD_INT 13
8961: PUSH
8962: LD_INT 14
8964: PUSH
8965: LD_INT 15
8967: PUSH
8968: LD_INT 16
8970: PUSH
8971: LD_INT 17
8973: PUSH
8974: LD_INT 18
8976: PUSH
8977: LD_INT 19
8979: PUSH
8980: LD_INT 20
8982: PUSH
8983: LD_INT 21
8985: PUSH
8986: LD_INT 22
8988: PUSH
8989: LD_INT 23
8991: PUSH
8992: LD_INT 24
8994: PUSH
8995: LD_INT 25
8997: PUSH
8998: LD_INT 26
9000: PUSH
9001: LD_INT 27
9003: PUSH
9004: LD_INT 28
9006: PUSH
9007: LD_INT 29
9009: PUSH
9010: LD_INT 30
9012: PUSH
9013: LD_INT 31
9015: PUSH
9016: LD_INT 32
9018: PUSH
9019: LD_INT 33
9021: PUSH
9022: LD_INT 34
9024: PUSH
9025: LD_INT 35
9027: PUSH
9028: LD_INT 36
9030: PUSH
9031: EMPTY
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 101
9071: PUSH
9072: LD_INT 102
9074: PUSH
9075: LD_INT 103
9077: PUSH
9078: LD_INT 104
9080: PUSH
9081: LD_INT 105
9083: PUSH
9084: LD_INT 106
9086: PUSH
9087: LD_INT 107
9089: PUSH
9090: LD_INT 108
9092: PUSH
9093: LD_INT 109
9095: PUSH
9096: LD_INT 110
9098: PUSH
9099: LD_INT 111
9101: PUSH
9102: LD_INT 112
9104: PUSH
9105: LD_INT 113
9107: PUSH
9108: LD_INT 114
9110: PUSH
9111: LD_INT 115
9113: PUSH
9114: LD_INT 116
9116: PUSH
9117: LD_INT 117
9119: PUSH
9120: LD_INT 118
9122: PUSH
9123: EMPTY
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: ST_TO_ADDR
9147: GO 9150
9149: POP
// end else
9150: GO 9381
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9152: LD_ADDR_VAR 0 1
9156: PUSH
9157: LD_INT 1
9159: PUSH
9160: LD_INT 2
9162: PUSH
9163: LD_INT 3
9165: PUSH
9166: LD_INT 4
9168: PUSH
9169: LD_INT 5
9171: PUSH
9172: LD_INT 6
9174: PUSH
9175: LD_INT 7
9177: PUSH
9178: LD_INT 8
9180: PUSH
9181: LD_INT 9
9183: PUSH
9184: LD_INT 10
9186: PUSH
9187: LD_INT 11
9189: PUSH
9190: LD_INT 12
9192: PUSH
9193: LD_INT 13
9195: PUSH
9196: LD_INT 14
9198: PUSH
9199: LD_INT 15
9201: PUSH
9202: LD_INT 16
9204: PUSH
9205: LD_INT 17
9207: PUSH
9208: LD_INT 18
9210: PUSH
9211: LD_INT 19
9213: PUSH
9214: LD_INT 20
9216: PUSH
9217: LD_INT 21
9219: PUSH
9220: LD_INT 22
9222: PUSH
9223: LD_INT 23
9225: PUSH
9226: LD_INT 24
9228: PUSH
9229: LD_INT 25
9231: PUSH
9232: LD_INT 26
9234: PUSH
9235: LD_INT 27
9237: PUSH
9238: LD_INT 28
9240: PUSH
9241: LD_INT 29
9243: PUSH
9244: LD_INT 30
9246: PUSH
9247: LD_INT 31
9249: PUSH
9250: LD_INT 32
9252: PUSH
9253: LD_INT 33
9255: PUSH
9256: LD_INT 34
9258: PUSH
9259: LD_INT 35
9261: PUSH
9262: LD_INT 36
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 101
9305: PUSH
9306: LD_INT 102
9308: PUSH
9309: LD_INT 103
9311: PUSH
9312: LD_INT 104
9314: PUSH
9315: LD_INT 105
9317: PUSH
9318: LD_INT 106
9320: PUSH
9321: LD_INT 107
9323: PUSH
9324: LD_INT 108
9326: PUSH
9327: LD_INT 109
9329: PUSH
9330: LD_INT 110
9332: PUSH
9333: LD_INT 111
9335: PUSH
9336: LD_INT 112
9338: PUSH
9339: LD_INT 113
9341: PUSH
9342: LD_INT 114
9344: PUSH
9345: LD_INT 115
9347: PUSH
9348: LD_INT 116
9350: PUSH
9351: LD_INT 117
9353: PUSH
9354: LD_INT 118
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: ST_TO_ADDR
// if result then
9381: LD_VAR 0 1
9385: IFFALSE 9674
// begin normal :=  ;
9387: LD_ADDR_VAR 0 3
9391: PUSH
9392: LD_STRING 
9394: ST_TO_ADDR
// hardcore :=  ;
9395: LD_ADDR_VAR 0 4
9399: PUSH
9400: LD_STRING 
9402: ST_TO_ADDR
// for i = 1 to normalCounter do
9403: LD_ADDR_VAR 0 5
9407: PUSH
9408: DOUBLE
9409: LD_INT 1
9411: DEC
9412: ST_TO_ADDR
9413: LD_EXP 24
9417: PUSH
9418: FOR_TO
9419: IFFALSE 9520
// begin tmp := 0 ;
9421: LD_ADDR_VAR 0 2
9425: PUSH
9426: LD_STRING 0
9428: ST_TO_ADDR
// if result [ 1 ] then
9429: LD_VAR 0 1
9433: PUSH
9434: LD_INT 1
9436: ARRAY
9437: IFFALSE 9502
// if result [ 1 ] [ 1 ] = i then
9439: LD_VAR 0 1
9443: PUSH
9444: LD_INT 1
9446: ARRAY
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PUSH
9452: LD_VAR 0 5
9456: EQUAL
9457: IFFALSE 9502
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9459: LD_ADDR_VAR 0 1
9463: PUSH
9464: LD_VAR 0 1
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: LD_VAR 0 1
9476: PUSH
9477: LD_INT 1
9479: ARRAY
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 3
9488: PPUSH
9489: CALL_OW 1
9493: ST_TO_ADDR
// tmp := 1 ;
9494: LD_ADDR_VAR 0 2
9498: PUSH
9499: LD_STRING 1
9501: ST_TO_ADDR
// end ; normal := normal & tmp ;
9502: LD_ADDR_VAR 0 3
9506: PUSH
9507: LD_VAR 0 3
9511: PUSH
9512: LD_VAR 0 2
9516: STR
9517: ST_TO_ADDR
// end ;
9518: GO 9418
9520: POP
9521: POP
// for i = 1 to hardcoreCounter do
9522: LD_ADDR_VAR 0 5
9526: PUSH
9527: DOUBLE
9528: LD_INT 1
9530: DEC
9531: ST_TO_ADDR
9532: LD_EXP 25
9536: PUSH
9537: FOR_TO
9538: IFFALSE 9643
// begin tmp := 0 ;
9540: LD_ADDR_VAR 0 2
9544: PUSH
9545: LD_STRING 0
9547: ST_TO_ADDR
// if result [ 2 ] then
9548: LD_VAR 0 1
9552: PUSH
9553: LD_INT 2
9555: ARRAY
9556: IFFALSE 9625
// if result [ 2 ] [ 1 ] = 100 + i then
9558: LD_VAR 0 1
9562: PUSH
9563: LD_INT 2
9565: ARRAY
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: PUSH
9571: LD_INT 100
9573: PUSH
9574: LD_VAR 0 5
9578: PLUS
9579: EQUAL
9580: IFFALSE 9625
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9582: LD_ADDR_VAR 0 1
9586: PUSH
9587: LD_VAR 0 1
9591: PPUSH
9592: LD_INT 2
9594: PPUSH
9595: LD_VAR 0 1
9599: PUSH
9600: LD_INT 2
9602: ARRAY
9603: PPUSH
9604: LD_INT 1
9606: PPUSH
9607: CALL_OW 3
9611: PPUSH
9612: CALL_OW 1
9616: ST_TO_ADDR
// tmp := 1 ;
9617: LD_ADDR_VAR 0 2
9621: PUSH
9622: LD_STRING 1
9624: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9625: LD_ADDR_VAR 0 4
9629: PUSH
9630: LD_VAR 0 4
9634: PUSH
9635: LD_VAR 0 2
9639: STR
9640: ST_TO_ADDR
// end ;
9641: GO 9537
9643: POP
9644: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9645: LD_STRING getStreamItemsFromMission("
9647: PUSH
9648: LD_VAR 0 3
9652: STR
9653: PUSH
9654: LD_STRING ","
9656: STR
9657: PUSH
9658: LD_VAR 0 4
9662: STR
9663: PUSH
9664: LD_STRING ")
9666: STR
9667: PPUSH
9668: CALL_OW 559
// end else
9672: GO 9681
// ToLua ( getStreamItemsFromMission("","") ) ;
9674: LD_STRING getStreamItemsFromMission("","")
9676: PPUSH
9677: CALL_OW 559
// end ;
9681: LD_VAR 0 1
9685: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9686: LD_EXP 23
9690: PUSH
9691: LD_EXP 28
9695: AND
9696: IFFALSE 9820
9698: GO 9700
9700: DISABLE
9701: LD_INT 0
9703: PPUSH
9704: PPUSH
// begin enable ;
9705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: LD_INT 22
9713: PUSH
9714: LD_OWVAR 2
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PUSH
9723: LD_INT 2
9725: PUSH
9726: LD_INT 34
9728: PUSH
9729: LD_INT 7
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: PUSH
9736: LD_INT 34
9738: PUSH
9739: LD_INT 45
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 34
9748: PUSH
9749: LD_INT 28
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 34
9758: PUSH
9759: LD_INT 47
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 69
9781: ST_TO_ADDR
// if not tmp then
9782: LD_VAR 0 2
9786: NOT
9787: IFFALSE 9791
// exit ;
9789: GO 9820
// for i in tmp do
9791: LD_ADDR_VAR 0 1
9795: PUSH
9796: LD_VAR 0 2
9800: PUSH
9801: FOR_IN
9802: IFFALSE 9818
// begin SetLives ( i , 0 ) ;
9804: LD_VAR 0 1
9808: PPUSH
9809: LD_INT 0
9811: PPUSH
9812: CALL_OW 234
// end ;
9816: GO 9801
9818: POP
9819: POP
// end ;
9820: PPOPN 2
9822: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9823: LD_EXP 23
9827: PUSH
9828: LD_EXP 29
9832: AND
9833: IFFALSE 9917
9835: GO 9837
9837: DISABLE
9838: LD_INT 0
9840: PPUSH
9841: PPUSH
// begin enable ;
9842: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9843: LD_ADDR_VAR 0 2
9847: PUSH
9848: LD_INT 22
9850: PUSH
9851: LD_OWVAR 2
9855: PUSH
9856: EMPTY
9857: LIST
9858: LIST
9859: PUSH
9860: LD_INT 32
9862: PUSH
9863: LD_INT 3
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PPUSH
9874: CALL_OW 69
9878: ST_TO_ADDR
// if not tmp then
9879: LD_VAR 0 2
9883: NOT
9884: IFFALSE 9888
// exit ;
9886: GO 9917
// for i in tmp do
9888: LD_ADDR_VAR 0 1
9892: PUSH
9893: LD_VAR 0 2
9897: PUSH
9898: FOR_IN
9899: IFFALSE 9915
// begin SetLives ( i , 0 ) ;
9901: LD_VAR 0 1
9905: PPUSH
9906: LD_INT 0
9908: PPUSH
9909: CALL_OW 234
// end ;
9913: GO 9898
9915: POP
9916: POP
// end ;
9917: PPOPN 2
9919: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9920: LD_EXP 23
9924: PUSH
9925: LD_EXP 26
9929: AND
9930: IFFALSE 10023
9932: GO 9934
9934: DISABLE
9935: LD_INT 0
9937: PPUSH
// begin enable ;
9938: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_OWVAR 2
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 2
9958: PUSH
9959: LD_INT 25
9961: PUSH
9962: LD_INT 5
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: LD_INT 25
9971: PUSH
9972: LD_INT 9
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 25
9981: PUSH
9982: LD_INT 8
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PPUSH
9999: CALL_OW 69
10003: PUSH
10004: FOR_IN
10005: IFFALSE 10021
// begin SetClass ( i , 1 ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: LD_INT 1
10014: PPUSH
10015: CALL_OW 336
// end ;
10019: GO 10004
10021: POP
10022: POP
// end ;
10023: PPOPN 1
10025: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10026: LD_EXP 23
10030: PUSH
10031: LD_EXP 27
10035: AND
10036: PUSH
10037: LD_OWVAR 65
10041: PUSH
10042: LD_INT 7
10044: LESS
10045: AND
10046: IFFALSE 10060
10048: GO 10050
10050: DISABLE
// begin enable ;
10051: ENABLE
// game_speed := 7 ;
10052: LD_ADDR_OWVAR 65
10056: PUSH
10057: LD_INT 7
10059: ST_TO_ADDR
// end ;
10060: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10061: LD_EXP 23
10065: PUSH
10066: LD_EXP 30
10070: AND
10071: IFFALSE 10273
10073: GO 10075
10075: DISABLE
10076: LD_INT 0
10078: PPUSH
10079: PPUSH
10080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10081: LD_ADDR_VAR 0 3
10085: PUSH
10086: LD_INT 81
10088: PUSH
10089: LD_OWVAR 2
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 21
10100: PUSH
10101: LD_INT 1
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 69
10116: ST_TO_ADDR
// if not tmp then
10117: LD_VAR 0 3
10121: NOT
10122: IFFALSE 10126
// exit ;
10124: GO 10273
// if tmp > 5 then
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 5
10133: GREATER
10134: IFFALSE 10146
// k := 5 else
10136: LD_ADDR_VAR 0 2
10140: PUSH
10141: LD_INT 5
10143: ST_TO_ADDR
10144: GO 10156
// k := tmp ;
10146: LD_ADDR_VAR 0 2
10150: PUSH
10151: LD_VAR 0 3
10155: ST_TO_ADDR
// for i := 1 to k do
10156: LD_ADDR_VAR 0 1
10160: PUSH
10161: DOUBLE
10162: LD_INT 1
10164: DEC
10165: ST_TO_ADDR
10166: LD_VAR 0 2
10170: PUSH
10171: FOR_TO
10172: IFFALSE 10271
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10174: LD_VAR 0 3
10178: PUSH
10179: LD_VAR 0 1
10183: ARRAY
10184: PPUSH
10185: LD_VAR 0 1
10189: PUSH
10190: LD_INT 4
10192: MOD
10193: PUSH
10194: LD_INT 1
10196: PLUS
10197: PPUSH
10198: CALL_OW 259
10202: PUSH
10203: LD_INT 10
10205: LESS
10206: IFFALSE 10269
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10208: LD_VAR 0 3
10212: PUSH
10213: LD_VAR 0 1
10217: ARRAY
10218: PPUSH
10219: LD_VAR 0 1
10223: PUSH
10224: LD_INT 4
10226: MOD
10227: PUSH
10228: LD_INT 1
10230: PLUS
10231: PPUSH
10232: LD_VAR 0 3
10236: PUSH
10237: LD_VAR 0 1
10241: ARRAY
10242: PPUSH
10243: LD_VAR 0 1
10247: PUSH
10248: LD_INT 4
10250: MOD
10251: PUSH
10252: LD_INT 1
10254: PLUS
10255: PPUSH
10256: CALL_OW 259
10260: PUSH
10261: LD_INT 1
10263: PLUS
10264: PPUSH
10265: CALL_OW 237
10269: GO 10171
10271: POP
10272: POP
// end ;
10273: PPOPN 3
10275: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10276: LD_EXP 23
10280: PUSH
10281: LD_EXP 31
10285: AND
10286: IFFALSE 10306
10288: GO 10290
10290: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10291: LD_INT 4
10293: PPUSH
10294: LD_OWVAR 2
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 324
10306: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10307: LD_EXP 23
10311: PUSH
10312: LD_EXP 60
10316: AND
10317: IFFALSE 10337
10319: GO 10321
10321: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10322: LD_INT 19
10324: PPUSH
10325: LD_OWVAR 2
10329: PPUSH
10330: LD_INT 0
10332: PPUSH
10333: CALL_OW 324
10337: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10338: LD_EXP 23
10342: PUSH
10343: LD_EXP 32
10347: AND
10348: IFFALSE 10450
10350: GO 10352
10352: DISABLE
10353: LD_INT 0
10355: PPUSH
10356: PPUSH
// begin enable ;
10357: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10358: LD_ADDR_VAR 0 2
10362: PUSH
10363: LD_INT 22
10365: PUSH
10366: LD_OWVAR 2
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: LD_INT 34
10380: PUSH
10381: LD_INT 11
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 34
10390: PUSH
10391: LD_INT 30
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PPUSH
10407: CALL_OW 69
10411: ST_TO_ADDR
// if not tmp then
10412: LD_VAR 0 2
10416: NOT
10417: IFFALSE 10421
// exit ;
10419: GO 10450
// for i in tmp do
10421: LD_ADDR_VAR 0 1
10425: PUSH
10426: LD_VAR 0 2
10430: PUSH
10431: FOR_IN
10432: IFFALSE 10448
// begin SetLives ( i , 0 ) ;
10434: LD_VAR 0 1
10438: PPUSH
10439: LD_INT 0
10441: PPUSH
10442: CALL_OW 234
// end ;
10446: GO 10431
10448: POP
10449: POP
// end ;
10450: PPOPN 2
10452: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10453: LD_EXP 23
10457: PUSH
10458: LD_EXP 33
10462: AND
10463: IFFALSE 10483
10465: GO 10467
10467: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10468: LD_INT 32
10470: PPUSH
10471: LD_OWVAR 2
10475: PPUSH
10476: LD_INT 0
10478: PPUSH
10479: CALL_OW 324
10483: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10484: LD_EXP 23
10488: PUSH
10489: LD_EXP 34
10493: AND
10494: IFFALSE 10675
10496: GO 10498
10498: DISABLE
10499: LD_INT 0
10501: PPUSH
10502: PPUSH
10503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10504: LD_ADDR_VAR 0 2
10508: PUSH
10509: LD_INT 22
10511: PUSH
10512: LD_OWVAR 2
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 33
10523: PUSH
10524: LD_INT 3
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PPUSH
10535: CALL_OW 69
10539: ST_TO_ADDR
// if not tmp then
10540: LD_VAR 0 2
10544: NOT
10545: IFFALSE 10549
// exit ;
10547: GO 10675
// side := 0 ;
10549: LD_ADDR_VAR 0 3
10553: PUSH
10554: LD_INT 0
10556: ST_TO_ADDR
// for i := 1 to 8 do
10557: LD_ADDR_VAR 0 1
10561: PUSH
10562: DOUBLE
10563: LD_INT 1
10565: DEC
10566: ST_TO_ADDR
10567: LD_INT 8
10569: PUSH
10570: FOR_TO
10571: IFFALSE 10619
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10573: LD_OWVAR 2
10577: PUSH
10578: LD_VAR 0 1
10582: NONEQUAL
10583: PUSH
10584: LD_OWVAR 2
10588: PPUSH
10589: LD_VAR 0 1
10593: PPUSH
10594: CALL_OW 81
10598: PUSH
10599: LD_INT 2
10601: EQUAL
10602: AND
10603: IFFALSE 10617
// begin side := i ;
10605: LD_ADDR_VAR 0 3
10609: PUSH
10610: LD_VAR 0 1
10614: ST_TO_ADDR
// break ;
10615: GO 10619
// end ;
10617: GO 10570
10619: POP
10620: POP
// if not side then
10621: LD_VAR 0 3
10625: NOT
10626: IFFALSE 10630
// exit ;
10628: GO 10675
// for i := 1 to tmp do
10630: LD_ADDR_VAR 0 1
10634: PUSH
10635: DOUBLE
10636: LD_INT 1
10638: DEC
10639: ST_TO_ADDR
10640: LD_VAR 0 2
10644: PUSH
10645: FOR_TO
10646: IFFALSE 10673
// if Prob ( 60 ) then
10648: LD_INT 60
10650: PPUSH
10651: CALL_OW 13
10655: IFFALSE 10671
// SetSide ( i , side ) ;
10657: LD_VAR 0 1
10661: PPUSH
10662: LD_VAR 0 3
10666: PPUSH
10667: CALL_OW 235
10671: GO 10645
10673: POP
10674: POP
// end ;
10675: PPOPN 3
10677: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10678: LD_EXP 23
10682: PUSH
10683: LD_EXP 36
10687: AND
10688: IFFALSE 10807
10690: GO 10692
10692: DISABLE
10693: LD_INT 0
10695: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10696: LD_ADDR_VAR 0 1
10700: PUSH
10701: LD_INT 22
10703: PUSH
10704: LD_OWVAR 2
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: PUSH
10713: LD_INT 21
10715: PUSH
10716: LD_INT 1
10718: PUSH
10719: EMPTY
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 3
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 0
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: PPUSH
10745: CALL_OW 69
10749: PUSH
10750: FOR_IN
10751: IFFALSE 10805
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10753: LD_VAR 0 1
10757: PPUSH
10758: CALL_OW 257
10762: PUSH
10763: LD_INT 1
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: LD_INT 4
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: IN
10781: IFFALSE 10803
// SetClass ( un , rand ( 1 , 4 ) ) ;
10783: LD_VAR 0 1
10787: PPUSH
10788: LD_INT 1
10790: PPUSH
10791: LD_INT 4
10793: PPUSH
10794: CALL_OW 12
10798: PPUSH
10799: CALL_OW 336
10803: GO 10750
10805: POP
10806: POP
// end ;
10807: PPOPN 1
10809: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10810: LD_EXP 23
10814: PUSH
10815: LD_EXP 35
10819: AND
10820: IFFALSE 10899
10822: GO 10824
10824: DISABLE
10825: LD_INT 0
10827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10828: LD_ADDR_VAR 0 1
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_OWVAR 2
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 21
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 69
10863: ST_TO_ADDR
// if not tmp then
10864: LD_VAR 0 1
10868: NOT
10869: IFFALSE 10873
// exit ;
10871: GO 10899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10873: LD_VAR 0 1
10877: PUSH
10878: LD_INT 1
10880: PPUSH
10881: LD_VAR 0 1
10885: PPUSH
10886: CALL_OW 12
10890: ARRAY
10891: PPUSH
10892: LD_INT 100
10894: PPUSH
10895: CALL_OW 234
// end ;
10899: PPOPN 1
10901: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10902: LD_EXP 23
10906: PUSH
10907: LD_EXP 37
10911: AND
10912: IFFALSE 11010
10914: GO 10916
10916: DISABLE
10917: LD_INT 0
10919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10920: LD_ADDR_VAR 0 1
10924: PUSH
10925: LD_INT 22
10927: PUSH
10928: LD_OWVAR 2
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 21
10939: PUSH
10940: LD_INT 1
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: PPUSH
10951: CALL_OW 69
10955: ST_TO_ADDR
// if not tmp then
10956: LD_VAR 0 1
10960: NOT
10961: IFFALSE 10965
// exit ;
10963: GO 11010
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10965: LD_VAR 0 1
10969: PUSH
10970: LD_INT 1
10972: PPUSH
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 12
10982: ARRAY
10983: PPUSH
10984: LD_INT 1
10986: PPUSH
10987: LD_INT 4
10989: PPUSH
10990: CALL_OW 12
10994: PPUSH
10995: LD_INT 3000
10997: PPUSH
10998: LD_INT 9000
11000: PPUSH
11001: CALL_OW 12
11005: PPUSH
11006: CALL_OW 492
// end ;
11010: PPOPN 1
11012: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11013: LD_EXP 23
11017: PUSH
11018: LD_EXP 38
11022: AND
11023: IFFALSE 11043
11025: GO 11027
11027: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11028: LD_INT 1
11030: PPUSH
11031: LD_OWVAR 2
11035: PPUSH
11036: LD_INT 0
11038: PPUSH
11039: CALL_OW 324
11043: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11044: LD_EXP 23
11048: PUSH
11049: LD_EXP 39
11053: AND
11054: IFFALSE 11137
11056: GO 11058
11058: DISABLE
11059: LD_INT 0
11061: PPUSH
11062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_INT 22
11070: PUSH
11071: LD_OWVAR 2
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PUSH
11080: LD_INT 21
11082: PUSH
11083: LD_INT 3
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PPUSH
11094: CALL_OW 69
11098: ST_TO_ADDR
// if not tmp then
11099: LD_VAR 0 2
11103: NOT
11104: IFFALSE 11108
// exit ;
11106: GO 11137
// for i in tmp do
11108: LD_ADDR_VAR 0 1
11112: PUSH
11113: LD_VAR 0 2
11117: PUSH
11118: FOR_IN
11119: IFFALSE 11135
// SetBLevel ( i , 10 ) ;
11121: LD_VAR 0 1
11125: PPUSH
11126: LD_INT 10
11128: PPUSH
11129: CALL_OW 241
11133: GO 11118
11135: POP
11136: POP
// end ;
11137: PPOPN 2
11139: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11140: LD_EXP 23
11144: PUSH
11145: LD_EXP 40
11149: AND
11150: IFFALSE 11261
11152: GO 11154
11154: DISABLE
11155: LD_INT 0
11157: PPUSH
11158: PPUSH
11159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11160: LD_ADDR_VAR 0 3
11164: PUSH
11165: LD_INT 22
11167: PUSH
11168: LD_OWVAR 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 25
11179: PUSH
11180: LD_INT 1
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PPUSH
11191: CALL_OW 69
11195: ST_TO_ADDR
// if not tmp then
11196: LD_VAR 0 3
11200: NOT
11201: IFFALSE 11205
// exit ;
11203: GO 11261
// un := tmp [ rand ( 1 , tmp ) ] ;
11205: LD_ADDR_VAR 0 2
11209: PUSH
11210: LD_VAR 0 3
11214: PUSH
11215: LD_INT 1
11217: PPUSH
11218: LD_VAR 0 3
11222: PPUSH
11223: CALL_OW 12
11227: ARRAY
11228: ST_TO_ADDR
// if Crawls ( un ) then
11229: LD_VAR 0 2
11233: PPUSH
11234: CALL_OW 318
11238: IFFALSE 11249
// ComWalk ( un ) ;
11240: LD_VAR 0 2
11244: PPUSH
11245: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11249: LD_VAR 0 2
11253: PPUSH
11254: LD_INT 5
11256: PPUSH
11257: CALL_OW 336
// end ;
11261: PPOPN 3
11263: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11264: LD_EXP 23
11268: PUSH
11269: LD_EXP 41
11273: AND
11274: PUSH
11275: LD_OWVAR 67
11279: PUSH
11280: LD_INT 4
11282: LESS
11283: AND
11284: IFFALSE 11303
11286: GO 11288
11288: DISABLE
// begin Difficulty := Difficulty + 1 ;
11289: LD_ADDR_OWVAR 67
11293: PUSH
11294: LD_OWVAR 67
11298: PUSH
11299: LD_INT 1
11301: PLUS
11302: ST_TO_ADDR
// end ;
11303: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11304: LD_EXP 23
11308: PUSH
11309: LD_EXP 42
11313: AND
11314: IFFALSE 11417
11316: GO 11318
11318: DISABLE
11319: LD_INT 0
11321: PPUSH
// begin for i := 1 to 5 do
11322: LD_ADDR_VAR 0 1
11326: PUSH
11327: DOUBLE
11328: LD_INT 1
11330: DEC
11331: ST_TO_ADDR
11332: LD_INT 5
11334: PUSH
11335: FOR_TO
11336: IFFALSE 11415
// begin uc_nation := nation_nature ;
11338: LD_ADDR_OWVAR 21
11342: PUSH
11343: LD_INT 0
11345: ST_TO_ADDR
// uc_side := 0 ;
11346: LD_ADDR_OWVAR 20
11350: PUSH
11351: LD_INT 0
11353: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11354: LD_ADDR_OWVAR 29
11358: PUSH
11359: LD_INT 12
11361: PUSH
11362: LD_INT 12
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: ST_TO_ADDR
// hc_agressivity := 20 ;
11369: LD_ADDR_OWVAR 35
11373: PUSH
11374: LD_INT 20
11376: ST_TO_ADDR
// hc_class := class_tiger ;
11377: LD_ADDR_OWVAR 28
11381: PUSH
11382: LD_INT 14
11384: ST_TO_ADDR
// hc_gallery :=  ;
11385: LD_ADDR_OWVAR 33
11389: PUSH
11390: LD_STRING 
11392: ST_TO_ADDR
// hc_name :=  ;
11393: LD_ADDR_OWVAR 26
11397: PUSH
11398: LD_STRING 
11400: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11401: CALL_OW 44
11405: PPUSH
11406: LD_INT 0
11408: PPUSH
11409: CALL_OW 51
// end ;
11413: GO 11335
11415: POP
11416: POP
// end ;
11417: PPOPN 1
11419: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11420: LD_EXP 23
11424: PUSH
11425: LD_EXP 43
11429: AND
11430: IFFALSE 11439
11432: GO 11434
11434: DISABLE
// StreamSibBomb ;
11435: CALL 11440 0 0
11439: END
// export function StreamSibBomb ; var i , x , y ; begin
11440: LD_INT 0
11442: PPUSH
11443: PPUSH
11444: PPUSH
11445: PPUSH
// result := false ;
11446: LD_ADDR_VAR 0 1
11450: PUSH
11451: LD_INT 0
11453: ST_TO_ADDR
// for i := 1 to 16 do
11454: LD_ADDR_VAR 0 2
11458: PUSH
11459: DOUBLE
11460: LD_INT 1
11462: DEC
11463: ST_TO_ADDR
11464: LD_INT 16
11466: PUSH
11467: FOR_TO
11468: IFFALSE 11667
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11470: LD_ADDR_VAR 0 3
11474: PUSH
11475: LD_INT 10
11477: PUSH
11478: LD_INT 20
11480: PUSH
11481: LD_INT 30
11483: PUSH
11484: LD_INT 40
11486: PUSH
11487: LD_INT 50
11489: PUSH
11490: LD_INT 60
11492: PUSH
11493: LD_INT 70
11495: PUSH
11496: LD_INT 80
11498: PUSH
11499: LD_INT 90
11501: PUSH
11502: LD_INT 100
11504: PUSH
11505: LD_INT 110
11507: PUSH
11508: LD_INT 120
11510: PUSH
11511: LD_INT 130
11513: PUSH
11514: LD_INT 140
11516: PUSH
11517: LD_INT 150
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 1
11539: PPUSH
11540: LD_INT 15
11542: PPUSH
11543: CALL_OW 12
11547: ARRAY
11548: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11549: LD_ADDR_VAR 0 4
11553: PUSH
11554: LD_INT 10
11556: PUSH
11557: LD_INT 20
11559: PUSH
11560: LD_INT 30
11562: PUSH
11563: LD_INT 40
11565: PUSH
11566: LD_INT 50
11568: PUSH
11569: LD_INT 60
11571: PUSH
11572: LD_INT 70
11574: PUSH
11575: LD_INT 80
11577: PUSH
11578: LD_INT 90
11580: PUSH
11581: LD_INT 100
11583: PUSH
11584: LD_INT 110
11586: PUSH
11587: LD_INT 120
11589: PUSH
11590: LD_INT 130
11592: PUSH
11593: LD_INT 140
11595: PUSH
11596: LD_INT 150
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 1
11618: PPUSH
11619: LD_INT 15
11621: PPUSH
11622: CALL_OW 12
11626: ARRAY
11627: ST_TO_ADDR
// if ValidHex ( x , y ) then
11628: LD_VAR 0 3
11632: PPUSH
11633: LD_VAR 0 4
11637: PPUSH
11638: CALL_OW 488
11642: IFFALSE 11665
// begin result := [ x , y ] ;
11644: LD_ADDR_VAR 0 1
11648: PUSH
11649: LD_VAR 0 3
11653: PUSH
11654: LD_VAR 0 4
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: ST_TO_ADDR
// break ;
11663: GO 11667
// end ; end ;
11665: GO 11467
11667: POP
11668: POP
// if result then
11669: LD_VAR 0 1
11673: IFFALSE 11733
// begin ToLua ( playSibBomb() ) ;
11675: LD_STRING playSibBomb()
11677: PPUSH
11678: CALL_OW 559
// wait ( 0 0$14 ) ;
11682: LD_INT 490
11684: PPUSH
11685: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11689: LD_VAR 0 1
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PPUSH
11698: LD_VAR 0 1
11702: PUSH
11703: LD_INT 2
11705: ARRAY
11706: PPUSH
11707: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11711: LD_VAR 0 1
11715: PUSH
11716: LD_INT 1
11718: ARRAY
11719: PPUSH
11720: LD_VAR 0 1
11724: PUSH
11725: LD_INT 2
11727: ARRAY
11728: PPUSH
11729: CALL_OW 429
// end ; end ;
11733: LD_VAR 0 1
11737: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11738: LD_EXP 23
11742: PUSH
11743: LD_EXP 45
11747: AND
11748: IFFALSE 11760
11750: GO 11752
11752: DISABLE
// YouLost (  ) ;
11753: LD_STRING 
11755: PPUSH
11756: CALL_OW 104
11760: END
// every 0 0$1 trigger StreamModeActive and sFog do
11761: LD_EXP 23
11765: PUSH
11766: LD_EXP 44
11770: AND
11771: IFFALSE 11785
11773: GO 11775
11775: DISABLE
// FogOff ( your_side ) ;
11776: LD_OWVAR 2
11780: PPUSH
11781: CALL_OW 344
11785: END
// every 0 0$1 trigger StreamModeActive and sSun do
11786: LD_EXP 23
11790: PUSH
11791: LD_EXP 46
11795: AND
11796: IFFALSE 11824
11798: GO 11800
11800: DISABLE
// begin solar_recharge_percent := 0 ;
11801: LD_ADDR_OWVAR 79
11805: PUSH
11806: LD_INT 0
11808: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11809: LD_INT 10500
11811: PPUSH
11812: CALL_OW 67
// solar_recharge_percent := 100 ;
11816: LD_ADDR_OWVAR 79
11820: PUSH
11821: LD_INT 100
11823: ST_TO_ADDR
// end ;
11824: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11825: LD_EXP 23
11829: PUSH
11830: LD_EXP 47
11834: AND
11835: IFFALSE 12074
11837: GO 11839
11839: DISABLE
11840: LD_INT 0
11842: PPUSH
11843: PPUSH
11844: PPUSH
// begin tmp := [ ] ;
11845: LD_ADDR_VAR 0 3
11849: PUSH
11850: EMPTY
11851: ST_TO_ADDR
// for i := 1 to 6 do
11852: LD_ADDR_VAR 0 1
11856: PUSH
11857: DOUBLE
11858: LD_INT 1
11860: DEC
11861: ST_TO_ADDR
11862: LD_INT 6
11864: PUSH
11865: FOR_TO
11866: IFFALSE 11971
// begin uc_nation := nation_nature ;
11868: LD_ADDR_OWVAR 21
11872: PUSH
11873: LD_INT 0
11875: ST_TO_ADDR
// uc_side := 0 ;
11876: LD_ADDR_OWVAR 20
11880: PUSH
11881: LD_INT 0
11883: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11884: LD_ADDR_OWVAR 29
11888: PUSH
11889: LD_INT 12
11891: PUSH
11892: LD_INT 12
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: ST_TO_ADDR
// hc_agressivity := 20 ;
11899: LD_ADDR_OWVAR 35
11903: PUSH
11904: LD_INT 20
11906: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11907: LD_ADDR_OWVAR 28
11911: PUSH
11912: LD_INT 17
11914: ST_TO_ADDR
// hc_gallery :=  ;
11915: LD_ADDR_OWVAR 33
11919: PUSH
11920: LD_STRING 
11922: ST_TO_ADDR
// hc_name :=  ;
11923: LD_ADDR_OWVAR 26
11927: PUSH
11928: LD_STRING 
11930: ST_TO_ADDR
// un := CreateHuman ;
11931: LD_ADDR_VAR 0 2
11935: PUSH
11936: CALL_OW 44
11940: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11941: LD_VAR 0 2
11945: PPUSH
11946: LD_INT 1
11948: PPUSH
11949: CALL_OW 51
// tmp := tmp ^ un ;
11953: LD_ADDR_VAR 0 3
11957: PUSH
11958: LD_VAR 0 3
11962: PUSH
11963: LD_VAR 0 2
11967: ADD
11968: ST_TO_ADDR
// end ;
11969: GO 11865
11971: POP
11972: POP
// repeat wait ( 0 0$1 ) ;
11973: LD_INT 35
11975: PPUSH
11976: CALL_OW 67
// for un in tmp do
11980: LD_ADDR_VAR 0 2
11984: PUSH
11985: LD_VAR 0 3
11989: PUSH
11990: FOR_IN
11991: IFFALSE 12065
// begin if IsDead ( un ) then
11993: LD_VAR 0 2
11997: PPUSH
11998: CALL_OW 301
12002: IFFALSE 12022
// begin tmp := tmp diff un ;
12004: LD_ADDR_VAR 0 3
12008: PUSH
12009: LD_VAR 0 3
12013: PUSH
12014: LD_VAR 0 2
12018: DIFF
12019: ST_TO_ADDR
// continue ;
12020: GO 11990
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12022: LD_VAR 0 2
12026: PPUSH
12027: LD_INT 3
12029: PUSH
12030: LD_INT 22
12032: PUSH
12033: LD_INT 0
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PPUSH
12044: CALL_OW 69
12048: PPUSH
12049: LD_VAR 0 2
12053: PPUSH
12054: CALL_OW 74
12058: PPUSH
12059: CALL_OW 115
// end ;
12063: GO 11990
12065: POP
12066: POP
// until not tmp ;
12067: LD_VAR 0 3
12071: NOT
12072: IFFALSE 11973
// end ;
12074: PPOPN 3
12076: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12077: LD_EXP 23
12081: PUSH
12082: LD_EXP 48
12086: AND
12087: IFFALSE 12141
12089: GO 12091
12091: DISABLE
// begin ToLua ( displayTroll(); ) ;
12092: LD_STRING displayTroll();
12094: PPUSH
12095: CALL_OW 559
// wait ( 3 3$00 ) ;
12099: LD_INT 6300
12101: PPUSH
12102: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12106: LD_STRING hideTroll();
12108: PPUSH
12109: CALL_OW 559
// wait ( 1 1$00 ) ;
12113: LD_INT 2100
12115: PPUSH
12116: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12120: LD_STRING displayTroll();
12122: PPUSH
12123: CALL_OW 559
// wait ( 1 1$00 ) ;
12127: LD_INT 2100
12129: PPUSH
12130: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12134: LD_STRING hideTroll();
12136: PPUSH
12137: CALL_OW 559
// end ;
12141: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12142: LD_EXP 23
12146: PUSH
12147: LD_EXP 49
12151: AND
12152: IFFALSE 12215
12154: GO 12156
12156: DISABLE
12157: LD_INT 0
12159: PPUSH
// begin p := 0 ;
12160: LD_ADDR_VAR 0 1
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// repeat game_speed := 1 ;
12168: LD_ADDR_OWVAR 65
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12176: LD_INT 35
12178: PPUSH
12179: CALL_OW 67
// p := p + 1 ;
12183: LD_ADDR_VAR 0 1
12187: PUSH
12188: LD_VAR 0 1
12192: PUSH
12193: LD_INT 1
12195: PLUS
12196: ST_TO_ADDR
// until p >= 60 ;
12197: LD_VAR 0 1
12201: PUSH
12202: LD_INT 60
12204: GREATEREQUAL
12205: IFFALSE 12168
// game_speed := 4 ;
12207: LD_ADDR_OWVAR 65
12211: PUSH
12212: LD_INT 4
12214: ST_TO_ADDR
// end ;
12215: PPOPN 1
12217: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12218: LD_EXP 23
12222: PUSH
12223: LD_EXP 50
12227: AND
12228: IFFALSE 12374
12230: GO 12232
12232: DISABLE
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12237: LD_ADDR_VAR 0 1
12241: PUSH
12242: LD_INT 22
12244: PUSH
12245: LD_OWVAR 2
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 2
12256: PUSH
12257: LD_INT 30
12259: PUSH
12260: LD_INT 0
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: PUSH
12267: LD_INT 30
12269: PUSH
12270: LD_INT 1
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: ST_TO_ADDR
// if not depot then
12291: LD_VAR 0 1
12295: NOT
12296: IFFALSE 12300
// exit ;
12298: GO 12374
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12300: LD_ADDR_VAR 0 2
12304: PUSH
12305: LD_VAR 0 1
12309: PUSH
12310: LD_INT 1
12312: PPUSH
12313: LD_VAR 0 1
12317: PPUSH
12318: CALL_OW 12
12322: ARRAY
12323: PPUSH
12324: CALL_OW 274
12328: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12329: LD_VAR 0 2
12333: PPUSH
12334: LD_INT 1
12336: PPUSH
12337: LD_INT 0
12339: PPUSH
12340: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12344: LD_VAR 0 2
12348: PPUSH
12349: LD_INT 2
12351: PPUSH
12352: LD_INT 0
12354: PPUSH
12355: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12359: LD_VAR 0 2
12363: PPUSH
12364: LD_INT 3
12366: PPUSH
12367: LD_INT 0
12369: PPUSH
12370: CALL_OW 277
// end ;
12374: PPOPN 2
12376: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12377: LD_EXP 23
12381: PUSH
12382: LD_EXP 51
12386: AND
12387: IFFALSE 12484
12389: GO 12391
12391: DISABLE
12392: LD_INT 0
12394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12395: LD_ADDR_VAR 0 1
12399: PUSH
12400: LD_INT 22
12402: PUSH
12403: LD_OWVAR 2
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 21
12414: PUSH
12415: LD_INT 1
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 3
12424: PUSH
12425: LD_INT 23
12427: PUSH
12428: LD_INT 0
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 69
12448: ST_TO_ADDR
// if not tmp then
12449: LD_VAR 0 1
12453: NOT
12454: IFFALSE 12458
// exit ;
12456: GO 12484
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12458: LD_VAR 0 1
12462: PUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_VAR 0 1
12470: PPUSH
12471: CALL_OW 12
12475: ARRAY
12476: PPUSH
12477: LD_INT 200
12479: PPUSH
12480: CALL_OW 234
// end ;
12484: PPOPN 1
12486: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12487: LD_EXP 23
12491: PUSH
12492: LD_EXP 52
12496: AND
12497: IFFALSE 12576
12499: GO 12501
12501: DISABLE
12502: LD_INT 0
12504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12505: LD_ADDR_VAR 0 1
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_OWVAR 2
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 2
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// if not tmp then
12541: LD_VAR 0 1
12545: NOT
12546: IFFALSE 12550
// exit ;
12548: GO 12576
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12550: LD_VAR 0 1
12554: PUSH
12555: LD_INT 1
12557: PPUSH
12558: LD_VAR 0 1
12562: PPUSH
12563: CALL_OW 12
12567: ARRAY
12568: PPUSH
12569: LD_INT 60
12571: PPUSH
12572: CALL_OW 234
// end ;
12576: PPOPN 1
12578: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12579: LD_EXP 23
12583: PUSH
12584: LD_EXP 53
12588: AND
12589: IFFALSE 12688
12591: GO 12593
12593: DISABLE
12594: LD_INT 0
12596: PPUSH
12597: PPUSH
// begin enable ;
12598: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12599: LD_ADDR_VAR 0 1
12603: PUSH
12604: LD_INT 22
12606: PUSH
12607: LD_OWVAR 2
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 61
12618: PUSH
12619: EMPTY
12620: LIST
12621: PUSH
12622: LD_INT 33
12624: PUSH
12625: LD_INT 2
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 69
12641: ST_TO_ADDR
// if not tmp then
12642: LD_VAR 0 1
12646: NOT
12647: IFFALSE 12651
// exit ;
12649: GO 12688
// for i in tmp do
12651: LD_ADDR_VAR 0 2
12655: PUSH
12656: LD_VAR 0 1
12660: PUSH
12661: FOR_IN
12662: IFFALSE 12686
// if IsControledBy ( i ) then
12664: LD_VAR 0 2
12668: PPUSH
12669: CALL_OW 312
12673: IFFALSE 12684
// ComUnlink ( i ) ;
12675: LD_VAR 0 2
12679: PPUSH
12680: CALL_OW 136
12684: GO 12661
12686: POP
12687: POP
// end ;
12688: PPOPN 2
12690: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12691: LD_EXP 23
12695: PUSH
12696: LD_EXP 54
12700: AND
12701: IFFALSE 12841
12703: GO 12705
12705: DISABLE
12706: LD_INT 0
12708: PPUSH
12709: PPUSH
// begin ToLua ( displayPowell(); ) ;
12710: LD_STRING displayPowell();
12712: PPUSH
12713: CALL_OW 559
// uc_side := 0 ;
12717: LD_ADDR_OWVAR 20
12721: PUSH
12722: LD_INT 0
12724: ST_TO_ADDR
// uc_nation := 2 ;
12725: LD_ADDR_OWVAR 21
12729: PUSH
12730: LD_INT 2
12732: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12733: LD_ADDR_OWVAR 37
12737: PUSH
12738: LD_INT 14
12740: ST_TO_ADDR
// vc_engine := engine_siberite ;
12741: LD_ADDR_OWVAR 39
12745: PUSH
12746: LD_INT 3
12748: ST_TO_ADDR
// vc_control := control_apeman ;
12749: LD_ADDR_OWVAR 38
12753: PUSH
12754: LD_INT 5
12756: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12757: LD_ADDR_OWVAR 40
12761: PUSH
12762: LD_INT 29
12764: ST_TO_ADDR
// un := CreateVehicle ;
12765: LD_ADDR_VAR 0 2
12769: PUSH
12770: CALL_OW 45
12774: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12775: LD_VAR 0 2
12779: PPUSH
12780: LD_INT 1
12782: PPUSH
12783: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12787: LD_INT 35
12789: PPUSH
12790: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12794: LD_VAR 0 2
12798: PPUSH
12799: LD_INT 22
12801: PUSH
12802: LD_OWVAR 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PPUSH
12811: CALL_OW 69
12815: PPUSH
12816: LD_VAR 0 2
12820: PPUSH
12821: CALL_OW 74
12825: PPUSH
12826: CALL_OW 115
// until IsDead ( un ) ;
12830: LD_VAR 0 2
12834: PPUSH
12835: CALL_OW 301
12839: IFFALSE 12787
// end ;
12841: PPOPN 2
12843: END
// every 0 0$1 trigger StreamModeActive and sStu do
12844: LD_EXP 23
12848: PUSH
12849: LD_EXP 62
12853: AND
12854: IFFALSE 12870
12856: GO 12858
12858: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12859: LD_STRING displayStucuk();
12861: PPUSH
12862: CALL_OW 559
// ResetFog ;
12866: CALL_OW 335
// end ;
12870: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12871: LD_EXP 23
12875: PUSH
12876: LD_EXP 55
12880: AND
12881: IFFALSE 13022
12883: GO 12885
12885: DISABLE
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12890: LD_ADDR_VAR 0 2
12894: PUSH
12895: LD_INT 22
12897: PUSH
12898: LD_OWVAR 2
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 21
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PPUSH
12921: CALL_OW 69
12925: ST_TO_ADDR
// if not tmp then
12926: LD_VAR 0 2
12930: NOT
12931: IFFALSE 12935
// exit ;
12933: GO 13022
// un := tmp [ rand ( 1 , tmp ) ] ;
12935: LD_ADDR_VAR 0 1
12939: PUSH
12940: LD_VAR 0 2
12944: PUSH
12945: LD_INT 1
12947: PPUSH
12948: LD_VAR 0 2
12952: PPUSH
12953: CALL_OW 12
12957: ARRAY
12958: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12959: LD_VAR 0 1
12963: PPUSH
12964: LD_INT 0
12966: PPUSH
12967: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12971: LD_VAR 0 1
12975: PPUSH
12976: LD_OWVAR 3
12980: PUSH
12981: LD_VAR 0 1
12985: DIFF
12986: PPUSH
12987: LD_VAR 0 1
12991: PPUSH
12992: CALL_OW 74
12996: PPUSH
12997: CALL_OW 115
// wait ( 0 0$20 ) ;
13001: LD_INT 700
13003: PPUSH
13004: CALL_OW 67
// SetSide ( un , your_side ) ;
13008: LD_VAR 0 1
13012: PPUSH
13013: LD_OWVAR 2
13017: PPUSH
13018: CALL_OW 235
// end ;
13022: PPOPN 2
13024: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13025: LD_EXP 23
13029: PUSH
13030: LD_EXP 56
13034: AND
13035: IFFALSE 13141
13037: GO 13039
13039: DISABLE
13040: LD_INT 0
13042: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13043: LD_ADDR_VAR 0 1
13047: PUSH
13048: LD_INT 22
13050: PUSH
13051: LD_OWVAR 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 2
13062: PUSH
13063: LD_INT 30
13065: PUSH
13066: LD_INT 0
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 30
13075: PUSH
13076: LD_INT 1
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 69
13096: ST_TO_ADDR
// if not depot then
13097: LD_VAR 0 1
13101: NOT
13102: IFFALSE 13106
// exit ;
13104: GO 13141
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13106: LD_VAR 0 1
13110: PUSH
13111: LD_INT 1
13113: ARRAY
13114: PPUSH
13115: CALL_OW 250
13119: PPUSH
13120: LD_VAR 0 1
13124: PUSH
13125: LD_INT 1
13127: ARRAY
13128: PPUSH
13129: CALL_OW 251
13133: PPUSH
13134: LD_INT 70
13136: PPUSH
13137: CALL_OW 495
// end ;
13141: PPOPN 1
13143: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13144: LD_EXP 23
13148: PUSH
13149: LD_EXP 57
13153: AND
13154: IFFALSE 13365
13156: GO 13158
13158: DISABLE
13159: LD_INT 0
13161: PPUSH
13162: PPUSH
13163: PPUSH
13164: PPUSH
13165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13166: LD_ADDR_VAR 0 5
13170: PUSH
13171: LD_INT 22
13173: PUSH
13174: LD_OWVAR 2
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: LD_INT 21
13185: PUSH
13186: LD_INT 1
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PPUSH
13197: CALL_OW 69
13201: ST_TO_ADDR
// if not tmp then
13202: LD_VAR 0 5
13206: NOT
13207: IFFALSE 13211
// exit ;
13209: GO 13365
// for i in tmp do
13211: LD_ADDR_VAR 0 1
13215: PUSH
13216: LD_VAR 0 5
13220: PUSH
13221: FOR_IN
13222: IFFALSE 13363
// begin d := rand ( 0 , 5 ) ;
13224: LD_ADDR_VAR 0 4
13228: PUSH
13229: LD_INT 0
13231: PPUSH
13232: LD_INT 5
13234: PPUSH
13235: CALL_OW 12
13239: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13240: LD_ADDR_VAR 0 2
13244: PUSH
13245: LD_VAR 0 1
13249: PPUSH
13250: CALL_OW 250
13254: PPUSH
13255: LD_VAR 0 4
13259: PPUSH
13260: LD_INT 3
13262: PPUSH
13263: LD_INT 12
13265: PPUSH
13266: CALL_OW 12
13270: PPUSH
13271: CALL_OW 272
13275: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13276: LD_ADDR_VAR 0 3
13280: PUSH
13281: LD_VAR 0 1
13285: PPUSH
13286: CALL_OW 251
13290: PPUSH
13291: LD_VAR 0 4
13295: PPUSH
13296: LD_INT 3
13298: PPUSH
13299: LD_INT 12
13301: PPUSH
13302: CALL_OW 12
13306: PPUSH
13307: CALL_OW 273
13311: ST_TO_ADDR
// if ValidHex ( x , y ) then
13312: LD_VAR 0 2
13316: PPUSH
13317: LD_VAR 0 3
13321: PPUSH
13322: CALL_OW 488
13326: IFFALSE 13361
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13328: LD_VAR 0 1
13332: PPUSH
13333: LD_VAR 0 2
13337: PPUSH
13338: LD_VAR 0 3
13342: PPUSH
13343: LD_INT 3
13345: PPUSH
13346: LD_INT 6
13348: PPUSH
13349: CALL_OW 12
13353: PPUSH
13354: LD_INT 1
13356: PPUSH
13357: CALL_OW 483
// end ;
13361: GO 13221
13363: POP
13364: POP
// end ;
13365: PPOPN 5
13367: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13368: LD_EXP 23
13372: PUSH
13373: LD_EXP 58
13377: AND
13378: IFFALSE 13472
13380: GO 13382
13382: DISABLE
13383: LD_INT 0
13385: PPUSH
13386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13387: LD_ADDR_VAR 0 2
13391: PUSH
13392: LD_INT 22
13394: PUSH
13395: LD_OWVAR 2
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 32
13406: PUSH
13407: LD_INT 1
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 21
13416: PUSH
13417: LD_INT 2
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 69
13433: ST_TO_ADDR
// if not tmp then
13434: LD_VAR 0 2
13438: NOT
13439: IFFALSE 13443
// exit ;
13441: GO 13472
// for i in tmp do
13443: LD_ADDR_VAR 0 1
13447: PUSH
13448: LD_VAR 0 2
13452: PUSH
13453: FOR_IN
13454: IFFALSE 13470
// SetFuel ( i , 0 ) ;
13456: LD_VAR 0 1
13460: PPUSH
13461: LD_INT 0
13463: PPUSH
13464: CALL_OW 240
13468: GO 13453
13470: POP
13471: POP
// end ;
13472: PPOPN 2
13474: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13475: LD_EXP 23
13479: PUSH
13480: LD_EXP 59
13484: AND
13485: IFFALSE 13551
13487: GO 13489
13489: DISABLE
13490: LD_INT 0
13492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13493: LD_ADDR_VAR 0 1
13497: PUSH
13498: LD_INT 22
13500: PUSH
13501: LD_OWVAR 2
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 30
13512: PUSH
13513: LD_INT 29
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 69
13528: ST_TO_ADDR
// if not tmp then
13529: LD_VAR 0 1
13533: NOT
13534: IFFALSE 13538
// exit ;
13536: GO 13551
// DestroyUnit ( tmp [ 1 ] ) ;
13538: LD_VAR 0 1
13542: PUSH
13543: LD_INT 1
13545: ARRAY
13546: PPUSH
13547: CALL_OW 65
// end ;
13551: PPOPN 1
13553: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13554: LD_EXP 23
13558: PUSH
13559: LD_EXP 61
13563: AND
13564: IFFALSE 13693
13566: GO 13568
13568: DISABLE
13569: LD_INT 0
13571: PPUSH
// begin uc_side := 0 ;
13572: LD_ADDR_OWVAR 20
13576: PUSH
13577: LD_INT 0
13579: ST_TO_ADDR
// uc_nation := nation_arabian ;
13580: LD_ADDR_OWVAR 21
13584: PUSH
13585: LD_INT 2
13587: ST_TO_ADDR
// hc_gallery :=  ;
13588: LD_ADDR_OWVAR 33
13592: PUSH
13593: LD_STRING 
13595: ST_TO_ADDR
// hc_name :=  ;
13596: LD_ADDR_OWVAR 26
13600: PUSH
13601: LD_STRING 
13603: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13604: LD_INT 1
13606: PPUSH
13607: LD_INT 11
13609: PPUSH
13610: LD_INT 10
13612: PPUSH
13613: CALL_OW 380
// un := CreateHuman ;
13617: LD_ADDR_VAR 0 1
13621: PUSH
13622: CALL_OW 44
13626: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13627: LD_VAR 0 1
13631: PPUSH
13632: LD_INT 1
13634: PPUSH
13635: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13639: LD_INT 35
13641: PPUSH
13642: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13646: LD_VAR 0 1
13650: PPUSH
13651: LD_INT 22
13653: PUSH
13654: LD_OWVAR 2
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: PPUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 74
13677: PPUSH
13678: CALL_OW 115
// until IsDead ( un ) ;
13682: LD_VAR 0 1
13686: PPUSH
13687: CALL_OW 301
13691: IFFALSE 13639
// end ;
13693: PPOPN 1
13695: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13696: LD_EXP 23
13700: PUSH
13701: LD_EXP 63
13705: AND
13706: IFFALSE 13718
13708: GO 13710
13710: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13711: LD_STRING earthquake(getX(game), 0, 32)
13713: PPUSH
13714: CALL_OW 559
13718: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13719: LD_EXP 23
13723: PUSH
13724: LD_EXP 64
13728: AND
13729: IFFALSE 13820
13731: GO 13733
13733: DISABLE
13734: LD_INT 0
13736: PPUSH
// begin enable ;
13737: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13738: LD_ADDR_VAR 0 1
13742: PUSH
13743: LD_INT 22
13745: PUSH
13746: LD_OWVAR 2
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 21
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 33
13767: PUSH
13768: LD_INT 3
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: PPUSH
13780: CALL_OW 69
13784: ST_TO_ADDR
// if not tmp then
13785: LD_VAR 0 1
13789: NOT
13790: IFFALSE 13794
// exit ;
13792: GO 13820
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13794: LD_VAR 0 1
13798: PUSH
13799: LD_INT 1
13801: PPUSH
13802: LD_VAR 0 1
13806: PPUSH
13807: CALL_OW 12
13811: ARRAY
13812: PPUSH
13813: LD_INT 1
13815: PPUSH
13816: CALL_OW 234
// end ;
13820: PPOPN 1
13822: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13823: LD_EXP 23
13827: PUSH
13828: LD_EXP 65
13832: AND
13833: IFFALSE 13974
13835: GO 13837
13837: DISABLE
13838: LD_INT 0
13840: PPUSH
13841: PPUSH
13842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13843: LD_ADDR_VAR 0 3
13847: PUSH
13848: LD_INT 22
13850: PUSH
13851: LD_OWVAR 2
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 25
13862: PUSH
13863: LD_INT 1
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PPUSH
13874: CALL_OW 69
13878: ST_TO_ADDR
// if not tmp then
13879: LD_VAR 0 3
13883: NOT
13884: IFFALSE 13888
// exit ;
13886: GO 13974
// un := tmp [ rand ( 1 , tmp ) ] ;
13888: LD_ADDR_VAR 0 2
13892: PUSH
13893: LD_VAR 0 3
13897: PUSH
13898: LD_INT 1
13900: PPUSH
13901: LD_VAR 0 3
13905: PPUSH
13906: CALL_OW 12
13910: ARRAY
13911: ST_TO_ADDR
// if Crawls ( un ) then
13912: LD_VAR 0 2
13916: PPUSH
13917: CALL_OW 318
13921: IFFALSE 13932
// ComWalk ( un ) ;
13923: LD_VAR 0 2
13927: PPUSH
13928: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13932: LD_VAR 0 2
13936: PPUSH
13937: LD_INT 9
13939: PPUSH
13940: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13944: LD_INT 28
13946: PPUSH
13947: LD_OWVAR 2
13951: PPUSH
13952: LD_INT 2
13954: PPUSH
13955: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13959: LD_INT 29
13961: PPUSH
13962: LD_OWVAR 2
13966: PPUSH
13967: LD_INT 2
13969: PPUSH
13970: CALL_OW 322
// end ;
13974: PPOPN 3
13976: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13977: LD_EXP 23
13981: PUSH
13982: LD_EXP 66
13986: AND
13987: IFFALSE 14098
13989: GO 13991
13991: DISABLE
13992: LD_INT 0
13994: PPUSH
13995: PPUSH
13996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13997: LD_ADDR_VAR 0 3
14001: PUSH
14002: LD_INT 22
14004: PUSH
14005: LD_OWVAR 2
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 25
14016: PUSH
14017: LD_INT 1
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PPUSH
14028: CALL_OW 69
14032: ST_TO_ADDR
// if not tmp then
14033: LD_VAR 0 3
14037: NOT
14038: IFFALSE 14042
// exit ;
14040: GO 14098
// un := tmp [ rand ( 1 , tmp ) ] ;
14042: LD_ADDR_VAR 0 2
14046: PUSH
14047: LD_VAR 0 3
14051: PUSH
14052: LD_INT 1
14054: PPUSH
14055: LD_VAR 0 3
14059: PPUSH
14060: CALL_OW 12
14064: ARRAY
14065: ST_TO_ADDR
// if Crawls ( un ) then
14066: LD_VAR 0 2
14070: PPUSH
14071: CALL_OW 318
14075: IFFALSE 14086
// ComWalk ( un ) ;
14077: LD_VAR 0 2
14081: PPUSH
14082: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14086: LD_VAR 0 2
14090: PPUSH
14091: LD_INT 8
14093: PPUSH
14094: CALL_OW 336
// end ;
14098: PPOPN 3
14100: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14101: LD_EXP 23
14105: PUSH
14106: LD_EXP 67
14110: AND
14111: IFFALSE 14255
14113: GO 14115
14115: DISABLE
14116: LD_INT 0
14118: PPUSH
14119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14120: LD_ADDR_VAR 0 2
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 2
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 34
14152: PUSH
14153: LD_INT 12
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 34
14162: PUSH
14163: LD_INT 51
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 34
14172: PUSH
14173: LD_INT 32
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: LIST
14190: PPUSH
14191: CALL_OW 69
14195: ST_TO_ADDR
// if not tmp then
14196: LD_VAR 0 2
14200: NOT
14201: IFFALSE 14205
// exit ;
14203: GO 14255
// for i in tmp do
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: LD_VAR 0 2
14214: PUSH
14215: FOR_IN
14216: IFFALSE 14253
// if GetCargo ( i , mat_artifact ) = 0 then
14218: LD_VAR 0 1
14222: PPUSH
14223: LD_INT 4
14225: PPUSH
14226: CALL_OW 289
14230: PUSH
14231: LD_INT 0
14233: EQUAL
14234: IFFALSE 14251
// SetCargo ( i , mat_siberit , 100 ) ;
14236: LD_VAR 0 1
14240: PPUSH
14241: LD_INT 3
14243: PPUSH
14244: LD_INT 100
14246: PPUSH
14247: CALL_OW 290
14251: GO 14215
14253: POP
14254: POP
// end ;
14255: PPOPN 2
14257: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14258: LD_EXP 23
14262: PUSH
14263: LD_EXP 68
14267: AND
14268: IFFALSE 14451
14270: GO 14272
14272: DISABLE
14273: LD_INT 0
14275: PPUSH
14276: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14277: LD_ADDR_VAR 0 2
14281: PUSH
14282: LD_INT 22
14284: PUSH
14285: LD_OWVAR 2
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 69
14298: ST_TO_ADDR
// if not tmp then
14299: LD_VAR 0 2
14303: NOT
14304: IFFALSE 14308
// exit ;
14306: GO 14451
// for i := 1 to 2 do
14308: LD_ADDR_VAR 0 1
14312: PUSH
14313: DOUBLE
14314: LD_INT 1
14316: DEC
14317: ST_TO_ADDR
14318: LD_INT 2
14320: PUSH
14321: FOR_TO
14322: IFFALSE 14449
// begin uc_side := your_side ;
14324: LD_ADDR_OWVAR 20
14328: PUSH
14329: LD_OWVAR 2
14333: ST_TO_ADDR
// uc_nation := nation_american ;
14334: LD_ADDR_OWVAR 21
14338: PUSH
14339: LD_INT 1
14341: ST_TO_ADDR
// vc_chassis := us_morphling ;
14342: LD_ADDR_OWVAR 37
14346: PUSH
14347: LD_INT 5
14349: ST_TO_ADDR
// vc_engine := engine_siberite ;
14350: LD_ADDR_OWVAR 39
14354: PUSH
14355: LD_INT 3
14357: ST_TO_ADDR
// vc_control := control_computer ;
14358: LD_ADDR_OWVAR 38
14362: PUSH
14363: LD_INT 3
14365: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14366: LD_ADDR_OWVAR 40
14370: PUSH
14371: LD_INT 10
14373: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14374: LD_VAR 0 2
14378: PUSH
14379: LD_INT 1
14381: ARRAY
14382: PPUSH
14383: CALL_OW 310
14387: NOT
14388: IFFALSE 14435
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14390: CALL_OW 45
14394: PPUSH
14395: LD_VAR 0 2
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PPUSH
14404: CALL_OW 250
14408: PPUSH
14409: LD_VAR 0 2
14413: PUSH
14414: LD_INT 1
14416: ARRAY
14417: PPUSH
14418: CALL_OW 251
14422: PPUSH
14423: LD_INT 12
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: CALL_OW 50
14433: GO 14447
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14435: CALL_OW 45
14439: PPUSH
14440: LD_INT 1
14442: PPUSH
14443: CALL_OW 51
// end ;
14447: GO 14321
14449: POP
14450: POP
// end ;
14451: PPOPN 2
14453: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14454: LD_EXP 23
14458: PUSH
14459: LD_EXP 69
14463: AND
14464: IFFALSE 14686
14466: GO 14468
14468: DISABLE
14469: LD_INT 0
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
14475: PPUSH
14476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14477: LD_ADDR_VAR 0 6
14481: PUSH
14482: LD_INT 22
14484: PUSH
14485: LD_OWVAR 2
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 21
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 3
14506: PUSH
14507: LD_INT 23
14509: PUSH
14510: LD_INT 0
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PPUSH
14526: CALL_OW 69
14530: ST_TO_ADDR
// if not tmp then
14531: LD_VAR 0 6
14535: NOT
14536: IFFALSE 14540
// exit ;
14538: GO 14686
// s1 := rand ( 1 , 4 ) ;
14540: LD_ADDR_VAR 0 2
14544: PUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_INT 4
14550: PPUSH
14551: CALL_OW 12
14555: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14556: LD_ADDR_VAR 0 4
14560: PUSH
14561: LD_VAR 0 6
14565: PUSH
14566: LD_INT 1
14568: ARRAY
14569: PPUSH
14570: LD_VAR 0 2
14574: PPUSH
14575: CALL_OW 259
14579: ST_TO_ADDR
// if s1 = 1 then
14580: LD_VAR 0 2
14584: PUSH
14585: LD_INT 1
14587: EQUAL
14588: IFFALSE 14608
// s2 := rand ( 2 , 4 ) else
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: LD_INT 2
14597: PPUSH
14598: LD_INT 4
14600: PPUSH
14601: CALL_OW 12
14605: ST_TO_ADDR
14606: GO 14616
// s2 := 1 ;
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_INT 1
14615: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14616: LD_ADDR_VAR 0 5
14620: PUSH
14621: LD_VAR 0 6
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PPUSH
14630: LD_VAR 0 3
14634: PPUSH
14635: CALL_OW 259
14639: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14640: LD_VAR 0 6
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: LD_VAR 0 2
14653: PPUSH
14654: LD_VAR 0 5
14658: PPUSH
14659: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14663: LD_VAR 0 6
14667: PUSH
14668: LD_INT 1
14670: ARRAY
14671: PPUSH
14672: LD_VAR 0 3
14676: PPUSH
14677: LD_VAR 0 4
14681: PPUSH
14682: CALL_OW 237
// end ;
14686: PPOPN 6
14688: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14689: LD_EXP 23
14693: PUSH
14694: LD_EXP 70
14698: AND
14699: IFFALSE 14778
14701: GO 14703
14703: DISABLE
14704: LD_INT 0
14706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14707: LD_ADDR_VAR 0 1
14711: PUSH
14712: LD_INT 22
14714: PUSH
14715: LD_OWVAR 2
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 30
14726: PUSH
14727: LD_INT 3
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 69
14742: ST_TO_ADDR
// if not tmp then
14743: LD_VAR 0 1
14747: NOT
14748: IFFALSE 14752
// exit ;
14750: GO 14778
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14752: LD_VAR 0 1
14756: PUSH
14757: LD_INT 1
14759: PPUSH
14760: LD_VAR 0 1
14764: PPUSH
14765: CALL_OW 12
14769: ARRAY
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: CALL_OW 234
// end ;
14778: PPOPN 1
14780: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14781: LD_EXP 23
14785: PUSH
14786: LD_EXP 71
14790: AND
14791: IFFALSE 14903
14793: GO 14795
14795: DISABLE
14796: LD_INT 0
14798: PPUSH
14799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14800: LD_ADDR_VAR 0 2
14804: PUSH
14805: LD_INT 22
14807: PUSH
14808: LD_OWVAR 2
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 2
14819: PUSH
14820: LD_INT 30
14822: PUSH
14823: LD_INT 27
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 30
14832: PUSH
14833: LD_INT 26
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PUSH
14840: LD_INT 30
14842: PUSH
14843: LD_INT 28
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PPUSH
14860: CALL_OW 69
14864: ST_TO_ADDR
// if not tmp then
14865: LD_VAR 0 2
14869: NOT
14870: IFFALSE 14874
// exit ;
14872: GO 14903
// for i in tmp do
14874: LD_ADDR_VAR 0 1
14878: PUSH
14879: LD_VAR 0 2
14883: PUSH
14884: FOR_IN
14885: IFFALSE 14901
// SetLives ( i , 1 ) ;
14887: LD_VAR 0 1
14891: PPUSH
14892: LD_INT 1
14894: PPUSH
14895: CALL_OW 234
14899: GO 14884
14901: POP
14902: POP
// end ;
14903: PPOPN 2
14905: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14906: LD_EXP 23
14910: PUSH
14911: LD_EXP 72
14915: AND
14916: IFFALSE 15203
14918: GO 14920
14920: DISABLE
14921: LD_INT 0
14923: PPUSH
14924: PPUSH
14925: PPUSH
// begin i := rand ( 1 , 7 ) ;
14926: LD_ADDR_VAR 0 1
14930: PUSH
14931: LD_INT 1
14933: PPUSH
14934: LD_INT 7
14936: PPUSH
14937: CALL_OW 12
14941: ST_TO_ADDR
// case i of 1 :
14942: LD_VAR 0 1
14946: PUSH
14947: LD_INT 1
14949: DOUBLE
14950: EQUAL
14951: IFTRUE 14955
14953: GO 14965
14955: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14956: LD_STRING earthquake(getX(game), 0, 32)
14958: PPUSH
14959: CALL_OW 559
14963: GO 15203
14965: LD_INT 2
14967: DOUBLE
14968: EQUAL
14969: IFTRUE 14973
14971: GO 14987
14973: POP
// begin ToLua ( displayStucuk(); ) ;
14974: LD_STRING displayStucuk();
14976: PPUSH
14977: CALL_OW 559
// ResetFog ;
14981: CALL_OW 335
// end ; 3 :
14985: GO 15203
14987: LD_INT 3
14989: DOUBLE
14990: EQUAL
14991: IFTRUE 14995
14993: GO 15099
14995: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_INT 22
15003: PUSH
15004: LD_OWVAR 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 25
15015: PUSH
15016: LD_INT 1
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PPUSH
15027: CALL_OW 69
15031: ST_TO_ADDR
// if not tmp then
15032: LD_VAR 0 2
15036: NOT
15037: IFFALSE 15041
// exit ;
15039: GO 15203
// un := tmp [ rand ( 1 , tmp ) ] ;
15041: LD_ADDR_VAR 0 3
15045: PUSH
15046: LD_VAR 0 2
15050: PUSH
15051: LD_INT 1
15053: PPUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: CALL_OW 12
15063: ARRAY
15064: ST_TO_ADDR
// if Crawls ( un ) then
15065: LD_VAR 0 3
15069: PPUSH
15070: CALL_OW 318
15074: IFFALSE 15085
// ComWalk ( un ) ;
15076: LD_VAR 0 3
15080: PPUSH
15081: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15085: LD_VAR 0 3
15089: PPUSH
15090: LD_INT 8
15092: PPUSH
15093: CALL_OW 336
// end ; 4 :
15097: GO 15203
15099: LD_INT 4
15101: DOUBLE
15102: EQUAL
15103: IFTRUE 15107
15105: GO 15181
15107: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15108: LD_ADDR_VAR 0 2
15112: PUSH
15113: LD_INT 22
15115: PUSH
15116: LD_OWVAR 2
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: LD_INT 30
15127: PUSH
15128: LD_INT 29
15130: PUSH
15131: EMPTY
15132: LIST
15133: LIST
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 69
15143: ST_TO_ADDR
// if not tmp then
15144: LD_VAR 0 2
15148: NOT
15149: IFFALSE 15153
// exit ;
15151: GO 15203
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15153: LD_VAR 0 2
15157: PUSH
15158: LD_INT 1
15160: ARRAY
15161: PPUSH
15162: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15166: LD_VAR 0 2
15170: PUSH
15171: LD_INT 1
15173: ARRAY
15174: PPUSH
15175: CALL_OW 65
// end ; 5 .. 7 :
15179: GO 15203
15181: LD_INT 5
15183: DOUBLE
15184: GREATEREQUAL
15185: IFFALSE 15193
15187: LD_INT 7
15189: DOUBLE
15190: LESSEQUAL
15191: IFTRUE 15195
15193: GO 15202
15195: POP
// StreamSibBomb ; end ;
15196: CALL 11440 0 0
15200: GO 15203
15202: POP
// end ;
15203: PPOPN 3
15205: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15206: LD_EXP 23
15210: PUSH
15211: LD_EXP 73
15215: AND
15216: IFFALSE 15372
15218: GO 15220
15220: DISABLE
15221: LD_INT 0
15223: PPUSH
15224: PPUSH
15225: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15226: LD_ADDR_VAR 0 2
15230: PUSH
15231: LD_INT 81
15233: PUSH
15234: LD_OWVAR 2
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 2
15245: PUSH
15246: LD_INT 21
15248: PUSH
15249: LD_INT 1
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 21
15258: PUSH
15259: LD_INT 2
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 69
15279: ST_TO_ADDR
// if not tmp then
15280: LD_VAR 0 2
15284: NOT
15285: IFFALSE 15289
// exit ;
15287: GO 15372
// p := 0 ;
15289: LD_ADDR_VAR 0 3
15293: PUSH
15294: LD_INT 0
15296: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15297: LD_INT 35
15299: PPUSH
15300: CALL_OW 67
// p := p + 1 ;
15304: LD_ADDR_VAR 0 3
15308: PUSH
15309: LD_VAR 0 3
15313: PUSH
15314: LD_INT 1
15316: PLUS
15317: ST_TO_ADDR
// for i in tmp do
15318: LD_ADDR_VAR 0 1
15322: PUSH
15323: LD_VAR 0 2
15327: PUSH
15328: FOR_IN
15329: IFFALSE 15360
// if GetLives ( i ) < 1000 then
15331: LD_VAR 0 1
15335: PPUSH
15336: CALL_OW 256
15340: PUSH
15341: LD_INT 1000
15343: LESS
15344: IFFALSE 15358
// SetLives ( i , 1000 ) ;
15346: LD_VAR 0 1
15350: PPUSH
15351: LD_INT 1000
15353: PPUSH
15354: CALL_OW 234
15358: GO 15328
15360: POP
15361: POP
// until p > 20 ;
15362: LD_VAR 0 3
15366: PUSH
15367: LD_INT 20
15369: GREATER
15370: IFFALSE 15297
// end ;
15372: PPOPN 3
15374: END
// every 0 0$1 trigger StreamModeActive and sTime do
15375: LD_EXP 23
15379: PUSH
15380: LD_EXP 74
15384: AND
15385: IFFALSE 15420
15387: GO 15389
15389: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15390: LD_INT 28
15392: PPUSH
15393: LD_OWVAR 2
15397: PPUSH
15398: LD_INT 2
15400: PPUSH
15401: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15405: LD_INT 30
15407: PPUSH
15408: LD_OWVAR 2
15412: PPUSH
15413: LD_INT 2
15415: PPUSH
15416: CALL_OW 322
// end ;
15420: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15421: LD_EXP 23
15425: PUSH
15426: LD_EXP 75
15430: AND
15431: IFFALSE 15552
15433: GO 15435
15435: DISABLE
15436: LD_INT 0
15438: PPUSH
15439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15440: LD_ADDR_VAR 0 2
15444: PUSH
15445: LD_INT 22
15447: PUSH
15448: LD_OWVAR 2
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: LD_INT 23
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: LIST
15488: PPUSH
15489: CALL_OW 69
15493: ST_TO_ADDR
// if not tmp then
15494: LD_VAR 0 2
15498: NOT
15499: IFFALSE 15503
// exit ;
15501: GO 15552
// for i in tmp do
15503: LD_ADDR_VAR 0 1
15507: PUSH
15508: LD_VAR 0 2
15512: PUSH
15513: FOR_IN
15514: IFFALSE 15550
// begin if Crawls ( i ) then
15516: LD_VAR 0 1
15520: PPUSH
15521: CALL_OW 318
15525: IFFALSE 15536
// ComWalk ( i ) ;
15527: LD_VAR 0 1
15531: PPUSH
15532: CALL_OW 138
// SetClass ( i , 2 ) ;
15536: LD_VAR 0 1
15540: PPUSH
15541: LD_INT 2
15543: PPUSH
15544: CALL_OW 336
// end ;
15548: GO 15513
15550: POP
15551: POP
// end ;
15552: PPOPN 2
15554: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15555: LD_EXP 23
15559: PUSH
15560: LD_EXP 76
15564: AND
15565: IFFALSE 15853
15567: GO 15569
15569: DISABLE
15570: LD_INT 0
15572: PPUSH
15573: PPUSH
15574: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15575: LD_OWVAR 2
15579: PPUSH
15580: LD_INT 9
15582: PPUSH
15583: LD_INT 1
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15593: LD_INT 9
15595: PPUSH
15596: LD_OWVAR 2
15600: PPUSH
15601: CALL_OW 343
// uc_side := 9 ;
15605: LD_ADDR_OWVAR 20
15609: PUSH
15610: LD_INT 9
15612: ST_TO_ADDR
// uc_nation := 2 ;
15613: LD_ADDR_OWVAR 21
15617: PUSH
15618: LD_INT 2
15620: ST_TO_ADDR
// hc_name := Dark Warrior ;
15621: LD_ADDR_OWVAR 26
15625: PUSH
15626: LD_STRING Dark Warrior
15628: ST_TO_ADDR
// hc_gallery :=  ;
15629: LD_ADDR_OWVAR 33
15633: PUSH
15634: LD_STRING 
15636: ST_TO_ADDR
// hc_noskilllimit := true ;
15637: LD_ADDR_OWVAR 76
15641: PUSH
15642: LD_INT 1
15644: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15645: LD_ADDR_OWVAR 31
15649: PUSH
15650: LD_INT 30
15652: PUSH
15653: LD_INT 30
15655: PUSH
15656: LD_INT 30
15658: PUSH
15659: LD_INT 30
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: LIST
15667: ST_TO_ADDR
// un := CreateHuman ;
15668: LD_ADDR_VAR 0 3
15672: PUSH
15673: CALL_OW 44
15677: ST_TO_ADDR
// hc_noskilllimit := false ;
15678: LD_ADDR_OWVAR 76
15682: PUSH
15683: LD_INT 0
15685: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15686: LD_VAR 0 3
15690: PPUSH
15691: LD_INT 1
15693: PPUSH
15694: CALL_OW 51
// ToLua ( playRanger() ) ;
15698: LD_STRING playRanger()
15700: PPUSH
15701: CALL_OW 559
// p := 0 ;
15705: LD_ADDR_VAR 0 2
15709: PUSH
15710: LD_INT 0
15712: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15713: LD_INT 35
15715: PPUSH
15716: CALL_OW 67
// p := p + 1 ;
15720: LD_ADDR_VAR 0 2
15724: PUSH
15725: LD_VAR 0 2
15729: PUSH
15730: LD_INT 1
15732: PLUS
15733: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15734: LD_VAR 0 3
15738: PPUSH
15739: CALL_OW 256
15743: PUSH
15744: LD_INT 1000
15746: LESS
15747: IFFALSE 15761
// SetLives ( un , 1000 ) ;
15749: LD_VAR 0 3
15753: PPUSH
15754: LD_INT 1000
15756: PPUSH
15757: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15761: LD_VAR 0 3
15765: PPUSH
15766: LD_INT 81
15768: PUSH
15769: LD_OWVAR 2
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 91
15780: PUSH
15781: LD_VAR 0 3
15785: PUSH
15786: LD_INT 30
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PPUSH
15798: CALL_OW 69
15802: PPUSH
15803: LD_VAR 0 3
15807: PPUSH
15808: CALL_OW 74
15812: PPUSH
15813: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
15817: LD_VAR 0 2
15821: PUSH
15822: LD_INT 80
15824: GREATER
15825: PUSH
15826: LD_VAR 0 3
15830: PPUSH
15831: CALL_OW 301
15835: OR
15836: IFFALSE 15713
// if un then
15838: LD_VAR 0 3
15842: IFFALSE 15853
// RemoveUnit ( un ) ;
15844: LD_VAR 0 3
15848: PPUSH
15849: CALL_OW 64
// end ;
15853: PPOPN 3
15855: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
15856: LD_EXP 77
15860: IFFALSE 15976
15862: GO 15864
15864: DISABLE
15865: LD_INT 0
15867: PPUSH
15868: PPUSH
15869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15870: LD_ADDR_VAR 0 2
15874: PUSH
15875: LD_INT 81
15877: PUSH
15878: LD_OWVAR 2
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 21
15889: PUSH
15890: LD_INT 1
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PPUSH
15901: CALL_OW 69
15905: ST_TO_ADDR
// ToLua ( playComputer() ) ;
15906: LD_STRING playComputer()
15908: PPUSH
15909: CALL_OW 559
// if not tmp then
15913: LD_VAR 0 2
15917: NOT
15918: IFFALSE 15922
// exit ;
15920: GO 15976
// for i in tmp do
15922: LD_ADDR_VAR 0 1
15926: PUSH
15927: LD_VAR 0 2
15931: PUSH
15932: FOR_IN
15933: IFFALSE 15974
// for j := 1 to 4 do
15935: LD_ADDR_VAR 0 3
15939: PUSH
15940: DOUBLE
15941: LD_INT 1
15943: DEC
15944: ST_TO_ADDR
15945: LD_INT 4
15947: PUSH
15948: FOR_TO
15949: IFFALSE 15970
// SetSkill ( i , j , 10 ) ;
15951: LD_VAR 0 1
15955: PPUSH
15956: LD_VAR 0 3
15960: PPUSH
15961: LD_INT 10
15963: PPUSH
15964: CALL_OW 237
15968: GO 15948
15970: POP
15971: POP
15972: GO 15932
15974: POP
15975: POP
// end ;
15976: PPOPN 3
15978: END
// every 0 0$1 trigger s30 do var i , tmp ;
15979: LD_EXP 78
15983: IFFALSE 16052
15985: GO 15987
15987: DISABLE
15988: LD_INT 0
15990: PPUSH
15991: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15992: LD_ADDR_VAR 0 2
15996: PUSH
15997: LD_INT 22
15999: PUSH
16000: LD_OWVAR 2
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PPUSH
16009: CALL_OW 69
16013: ST_TO_ADDR
// if not tmp then
16014: LD_VAR 0 2
16018: NOT
16019: IFFALSE 16023
// exit ;
16021: GO 16052
// for i in tmp do
16023: LD_ADDR_VAR 0 1
16027: PUSH
16028: LD_VAR 0 2
16032: PUSH
16033: FOR_IN
16034: IFFALSE 16050
// SetLives ( i , 300 ) ;
16036: LD_VAR 0 1
16040: PPUSH
16041: LD_INT 300
16043: PPUSH
16044: CALL_OW 234
16048: GO 16033
16050: POP
16051: POP
// end ;
16052: PPOPN 2
16054: END
// every 0 0$1 trigger s60 do var i , tmp ;
16055: LD_EXP 79
16059: IFFALSE 16128
16061: GO 16063
16063: DISABLE
16064: LD_INT 0
16066: PPUSH
16067: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16068: LD_ADDR_VAR 0 2
16072: PUSH
16073: LD_INT 22
16075: PUSH
16076: LD_OWVAR 2
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PPUSH
16085: CALL_OW 69
16089: ST_TO_ADDR
// if not tmp then
16090: LD_VAR 0 2
16094: NOT
16095: IFFALSE 16099
// exit ;
16097: GO 16128
// for i in tmp do
16099: LD_ADDR_VAR 0 1
16103: PUSH
16104: LD_VAR 0 2
16108: PUSH
16109: FOR_IN
16110: IFFALSE 16126
// SetLives ( i , 600 ) ;
16112: LD_VAR 0 1
16116: PPUSH
16117: LD_INT 600
16119: PPUSH
16120: CALL_OW 234
16124: GO 16109
16126: POP
16127: POP
// end ;
16128: PPOPN 2
16130: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16131: LD_INT 0
16133: PPUSH
// case cmd of 301 :
16134: LD_VAR 0 1
16138: PUSH
16139: LD_INT 301
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16179
16147: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16148: LD_VAR 0 6
16152: PPUSH
16153: LD_VAR 0 7
16157: PPUSH
16158: LD_VAR 0 8
16162: PPUSH
16163: LD_VAR 0 4
16167: PPUSH
16168: LD_VAR 0 5
16172: PPUSH
16173: CALL 17380 0 5
16177: GO 16300
16179: LD_INT 302
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16224
16187: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16188: LD_VAR 0 6
16192: PPUSH
16193: LD_VAR 0 7
16197: PPUSH
16198: LD_VAR 0 8
16202: PPUSH
16203: LD_VAR 0 9
16207: PPUSH
16208: LD_VAR 0 4
16212: PPUSH
16213: LD_VAR 0 5
16217: PPUSH
16218: CALL 17471 0 6
16222: GO 16300
16224: LD_INT 303
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16269
16232: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16233: LD_VAR 0 6
16237: PPUSH
16238: LD_VAR 0 7
16242: PPUSH
16243: LD_VAR 0 8
16247: PPUSH
16248: LD_VAR 0 9
16252: PPUSH
16253: LD_VAR 0 4
16257: PPUSH
16258: LD_VAR 0 5
16262: PPUSH
16263: CALL 16305 0 6
16267: GO 16300
16269: LD_INT 304
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16299
16277: POP
// hHackTeleport ( unit , x , y ) ; end ;
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_VAR 0 4
16287: PPUSH
16288: LD_VAR 0 5
16292: PPUSH
16293: CALL 18064 0 3
16297: GO 16300
16299: POP
// end ;
16300: LD_VAR 0 12
16304: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16305: LD_INT 0
16307: PPUSH
16308: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16309: LD_VAR 0 1
16313: PUSH
16314: LD_INT 1
16316: LESS
16317: PUSH
16318: LD_VAR 0 1
16322: PUSH
16323: LD_INT 3
16325: GREATER
16326: OR
16327: PUSH
16328: LD_VAR 0 5
16332: PPUSH
16333: LD_VAR 0 6
16337: PPUSH
16338: CALL_OW 428
16342: OR
16343: IFFALSE 16347
// exit ;
16345: GO 17067
// uc_side := your_side ;
16347: LD_ADDR_OWVAR 20
16351: PUSH
16352: LD_OWVAR 2
16356: ST_TO_ADDR
// uc_nation := nation ;
16357: LD_ADDR_OWVAR 21
16361: PUSH
16362: LD_VAR 0 1
16366: ST_TO_ADDR
// bc_level = 1 ;
16367: LD_ADDR_OWVAR 43
16371: PUSH
16372: LD_INT 1
16374: ST_TO_ADDR
// case btype of 1 :
16375: LD_VAR 0 2
16379: PUSH
16380: LD_INT 1
16382: DOUBLE
16383: EQUAL
16384: IFTRUE 16388
16386: GO 16399
16388: POP
// bc_type := b_depot ; 2 :
16389: LD_ADDR_OWVAR 42
16393: PUSH
16394: LD_INT 0
16396: ST_TO_ADDR
16397: GO 17011
16399: LD_INT 2
16401: DOUBLE
16402: EQUAL
16403: IFTRUE 16407
16405: GO 16418
16407: POP
// bc_type := b_warehouse ; 3 :
16408: LD_ADDR_OWVAR 42
16412: PUSH
16413: LD_INT 1
16415: ST_TO_ADDR
16416: GO 17011
16418: LD_INT 3
16420: DOUBLE
16421: EQUAL
16422: IFTRUE 16426
16424: GO 16437
16426: POP
// bc_type := b_lab ; 4 .. 9 :
16427: LD_ADDR_OWVAR 42
16431: PUSH
16432: LD_INT 6
16434: ST_TO_ADDR
16435: GO 17011
16437: LD_INT 4
16439: DOUBLE
16440: GREATEREQUAL
16441: IFFALSE 16449
16443: LD_INT 9
16445: DOUBLE
16446: LESSEQUAL
16447: IFTRUE 16451
16449: GO 16503
16451: POP
// begin bc_type := b_lab_half ;
16452: LD_ADDR_OWVAR 42
16456: PUSH
16457: LD_INT 7
16459: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16460: LD_ADDR_OWVAR 44
16464: PUSH
16465: LD_INT 10
16467: PUSH
16468: LD_INT 11
16470: PUSH
16471: LD_INT 12
16473: PUSH
16474: LD_INT 15
16476: PUSH
16477: LD_INT 14
16479: PUSH
16480: LD_INT 13
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: LD_INT 3
16498: MINUS
16499: ARRAY
16500: ST_TO_ADDR
// end ; 10 .. 13 :
16501: GO 17011
16503: LD_INT 10
16505: DOUBLE
16506: GREATEREQUAL
16507: IFFALSE 16515
16509: LD_INT 13
16511: DOUBLE
16512: LESSEQUAL
16513: IFTRUE 16517
16515: GO 16594
16517: POP
// begin bc_type := b_lab_full ;
16518: LD_ADDR_OWVAR 42
16522: PUSH
16523: LD_INT 8
16525: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16526: LD_ADDR_OWVAR 44
16530: PUSH
16531: LD_INT 10
16533: PUSH
16534: LD_INT 12
16536: PUSH
16537: LD_INT 14
16539: PUSH
16540: LD_INT 13
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: PUSH
16549: LD_VAR 0 2
16553: PUSH
16554: LD_INT 9
16556: MINUS
16557: ARRAY
16558: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16559: LD_ADDR_OWVAR 45
16563: PUSH
16564: LD_INT 11
16566: PUSH
16567: LD_INT 15
16569: PUSH
16570: LD_INT 12
16572: PUSH
16573: LD_INT 15
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: PUSH
16582: LD_VAR 0 2
16586: PUSH
16587: LD_INT 9
16589: MINUS
16590: ARRAY
16591: ST_TO_ADDR
// end ; 14 :
16592: GO 17011
16594: LD_INT 14
16596: DOUBLE
16597: EQUAL
16598: IFTRUE 16602
16600: GO 16613
16602: POP
// bc_type := b_workshop ; 15 :
16603: LD_ADDR_OWVAR 42
16607: PUSH
16608: LD_INT 2
16610: ST_TO_ADDR
16611: GO 17011
16613: LD_INT 15
16615: DOUBLE
16616: EQUAL
16617: IFTRUE 16621
16619: GO 16632
16621: POP
// bc_type := b_factory ; 16 :
16622: LD_ADDR_OWVAR 42
16626: PUSH
16627: LD_INT 3
16629: ST_TO_ADDR
16630: GO 17011
16632: LD_INT 16
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16651
16640: POP
// bc_type := b_ext_gun ; 17 :
16641: LD_ADDR_OWVAR 42
16645: PUSH
16646: LD_INT 17
16648: ST_TO_ADDR
16649: GO 17011
16651: LD_INT 17
16653: DOUBLE
16654: EQUAL
16655: IFTRUE 16659
16657: GO 16687
16659: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16660: LD_ADDR_OWVAR 42
16664: PUSH
16665: LD_INT 19
16667: PUSH
16668: LD_INT 23
16670: PUSH
16671: LD_INT 19
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_VAR 0 1
16683: ARRAY
16684: ST_TO_ADDR
16685: GO 17011
16687: LD_INT 18
16689: DOUBLE
16690: EQUAL
16691: IFTRUE 16695
16693: GO 16706
16695: POP
// bc_type := b_ext_radar ; 19 :
16696: LD_ADDR_OWVAR 42
16700: PUSH
16701: LD_INT 20
16703: ST_TO_ADDR
16704: GO 17011
16706: LD_INT 19
16708: DOUBLE
16709: EQUAL
16710: IFTRUE 16714
16712: GO 16725
16714: POP
// bc_type := b_ext_radio ; 20 :
16715: LD_ADDR_OWVAR 42
16719: PUSH
16720: LD_INT 22
16722: ST_TO_ADDR
16723: GO 17011
16725: LD_INT 20
16727: DOUBLE
16728: EQUAL
16729: IFTRUE 16733
16731: GO 16744
16733: POP
// bc_type := b_ext_siberium ; 21 :
16734: LD_ADDR_OWVAR 42
16738: PUSH
16739: LD_INT 21
16741: ST_TO_ADDR
16742: GO 17011
16744: LD_INT 21
16746: DOUBLE
16747: EQUAL
16748: IFTRUE 16752
16750: GO 16763
16752: POP
// bc_type := b_ext_computer ; 22 :
16753: LD_ADDR_OWVAR 42
16757: PUSH
16758: LD_INT 24
16760: ST_TO_ADDR
16761: GO 17011
16763: LD_INT 22
16765: DOUBLE
16766: EQUAL
16767: IFTRUE 16771
16769: GO 16782
16771: POP
// bc_type := b_ext_track ; 23 :
16772: LD_ADDR_OWVAR 42
16776: PUSH
16777: LD_INT 16
16779: ST_TO_ADDR
16780: GO 17011
16782: LD_INT 23
16784: DOUBLE
16785: EQUAL
16786: IFTRUE 16790
16788: GO 16801
16790: POP
// bc_type := b_ext_laser ; 24 :
16791: LD_ADDR_OWVAR 42
16795: PUSH
16796: LD_INT 25
16798: ST_TO_ADDR
16799: GO 17011
16801: LD_INT 24
16803: DOUBLE
16804: EQUAL
16805: IFTRUE 16809
16807: GO 16820
16809: POP
// bc_type := b_control_tower ; 25 :
16810: LD_ADDR_OWVAR 42
16814: PUSH
16815: LD_INT 36
16817: ST_TO_ADDR
16818: GO 17011
16820: LD_INT 25
16822: DOUBLE
16823: EQUAL
16824: IFTRUE 16828
16826: GO 16839
16828: POP
// bc_type := b_breastwork ; 26 :
16829: LD_ADDR_OWVAR 42
16833: PUSH
16834: LD_INT 31
16836: ST_TO_ADDR
16837: GO 17011
16839: LD_INT 26
16841: DOUBLE
16842: EQUAL
16843: IFTRUE 16847
16845: GO 16858
16847: POP
// bc_type := b_bunker ; 27 :
16848: LD_ADDR_OWVAR 42
16852: PUSH
16853: LD_INT 32
16855: ST_TO_ADDR
16856: GO 17011
16858: LD_INT 27
16860: DOUBLE
16861: EQUAL
16862: IFTRUE 16866
16864: GO 16877
16866: POP
// bc_type := b_turret ; 28 :
16867: LD_ADDR_OWVAR 42
16871: PUSH
16872: LD_INT 33
16874: ST_TO_ADDR
16875: GO 17011
16877: LD_INT 28
16879: DOUBLE
16880: EQUAL
16881: IFTRUE 16885
16883: GO 16896
16885: POP
// bc_type := b_armoury ; 29 :
16886: LD_ADDR_OWVAR 42
16890: PUSH
16891: LD_INT 4
16893: ST_TO_ADDR
16894: GO 17011
16896: LD_INT 29
16898: DOUBLE
16899: EQUAL
16900: IFTRUE 16904
16902: GO 16915
16904: POP
// bc_type := b_barracks ; 30 :
16905: LD_ADDR_OWVAR 42
16909: PUSH
16910: LD_INT 5
16912: ST_TO_ADDR
16913: GO 17011
16915: LD_INT 30
16917: DOUBLE
16918: EQUAL
16919: IFTRUE 16923
16921: GO 16934
16923: POP
// bc_type := b_solar_power ; 31 :
16924: LD_ADDR_OWVAR 42
16928: PUSH
16929: LD_INT 27
16931: ST_TO_ADDR
16932: GO 17011
16934: LD_INT 31
16936: DOUBLE
16937: EQUAL
16938: IFTRUE 16942
16940: GO 16953
16942: POP
// bc_type := b_oil_power ; 32 :
16943: LD_ADDR_OWVAR 42
16947: PUSH
16948: LD_INT 26
16950: ST_TO_ADDR
16951: GO 17011
16953: LD_INT 32
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 16972
16961: POP
// bc_type := b_siberite_power ; 33 :
16962: LD_ADDR_OWVAR 42
16966: PUSH
16967: LD_INT 28
16969: ST_TO_ADDR
16970: GO 17011
16972: LD_INT 33
16974: DOUBLE
16975: EQUAL
16976: IFTRUE 16980
16978: GO 16991
16980: POP
// bc_type := b_oil_mine ; 34 :
16981: LD_ADDR_OWVAR 42
16985: PUSH
16986: LD_INT 29
16988: ST_TO_ADDR
16989: GO 17011
16991: LD_INT 34
16993: DOUBLE
16994: EQUAL
16995: IFTRUE 16999
16997: GO 17010
16999: POP
// bc_type := b_siberite_mine ; end ;
17000: LD_ADDR_OWVAR 42
17004: PUSH
17005: LD_INT 30
17007: ST_TO_ADDR
17008: GO 17011
17010: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17011: LD_ADDR_VAR 0 8
17015: PUSH
17016: LD_VAR 0 5
17020: PPUSH
17021: LD_VAR 0 6
17025: PPUSH
17026: LD_VAR 0 3
17030: PPUSH
17031: CALL_OW 47
17035: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17036: LD_OWVAR 42
17040: PUSH
17041: LD_INT 32
17043: PUSH
17044: LD_INT 33
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: IN
17051: IFFALSE 17067
// PlaceWeaponTurret ( b , weapon ) ;
17053: LD_VAR 0 8
17057: PPUSH
17058: LD_VAR 0 4
17062: PPUSH
17063: CALL_OW 431
// end ;
17067: LD_VAR 0 7
17071: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17072: LD_INT 0
17074: PPUSH
17075: PPUSH
17076: PPUSH
17077: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17078: LD_ADDR_VAR 0 4
17082: PUSH
17083: LD_INT 22
17085: PUSH
17086: LD_OWVAR 2
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: LD_INT 30
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 30
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PPUSH
17127: CALL_OW 69
17131: ST_TO_ADDR
// if not tmp then
17132: LD_VAR 0 4
17136: NOT
17137: IFFALSE 17141
// exit ;
17139: GO 17200
// for i in tmp do
17141: LD_ADDR_VAR 0 2
17145: PUSH
17146: LD_VAR 0 4
17150: PUSH
17151: FOR_IN
17152: IFFALSE 17198
// for j = 1 to 3 do
17154: LD_ADDR_VAR 0 3
17158: PUSH
17159: DOUBLE
17160: LD_INT 1
17162: DEC
17163: ST_TO_ADDR
17164: LD_INT 3
17166: PUSH
17167: FOR_TO
17168: IFFALSE 17194
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17170: LD_VAR 0 2
17174: PPUSH
17175: CALL_OW 274
17179: PPUSH
17180: LD_VAR 0 3
17184: PPUSH
17185: LD_INT 99999
17187: PPUSH
17188: CALL_OW 277
17192: GO 17167
17194: POP
17195: POP
17196: GO 17151
17198: POP
17199: POP
// end ;
17200: LD_VAR 0 1
17204: RET
// export function hHackSetLevel10 ; var i , j ; begin
17205: LD_INT 0
17207: PPUSH
17208: PPUSH
17209: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_INT 21
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: PUSH
17230: FOR_IN
17231: IFFALSE 17283
// if IsSelected ( i ) then
17233: LD_VAR 0 2
17237: PPUSH
17238: CALL_OW 306
17242: IFFALSE 17281
// begin for j := 1 to 4 do
17244: LD_ADDR_VAR 0 3
17248: PUSH
17249: DOUBLE
17250: LD_INT 1
17252: DEC
17253: ST_TO_ADDR
17254: LD_INT 4
17256: PUSH
17257: FOR_TO
17258: IFFALSE 17279
// SetSkill ( i , j , 10 ) ;
17260: LD_VAR 0 2
17264: PPUSH
17265: LD_VAR 0 3
17269: PPUSH
17270: LD_INT 10
17272: PPUSH
17273: CALL_OW 237
17277: GO 17257
17279: POP
17280: POP
// end ;
17281: GO 17230
17283: POP
17284: POP
// end ;
17285: LD_VAR 0 1
17289: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17290: LD_INT 0
17292: PPUSH
17293: PPUSH
17294: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17295: LD_ADDR_VAR 0 2
17299: PUSH
17300: LD_INT 22
17302: PUSH
17303: LD_OWVAR 2
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: LD_INT 21
17314: PUSH
17315: LD_INT 1
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PPUSH
17326: CALL_OW 69
17330: PUSH
17331: FOR_IN
17332: IFFALSE 17373
// begin for j := 1 to 4 do
17334: LD_ADDR_VAR 0 3
17338: PUSH
17339: DOUBLE
17340: LD_INT 1
17342: DEC
17343: ST_TO_ADDR
17344: LD_INT 4
17346: PUSH
17347: FOR_TO
17348: IFFALSE 17369
// SetSkill ( i , j , 10 ) ;
17350: LD_VAR 0 2
17354: PPUSH
17355: LD_VAR 0 3
17359: PPUSH
17360: LD_INT 10
17362: PPUSH
17363: CALL_OW 237
17367: GO 17347
17369: POP
17370: POP
// end ;
17371: GO 17331
17373: POP
17374: POP
// end ;
17375: LD_VAR 0 1
17379: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17380: LD_INT 0
17382: PPUSH
// uc_side := your_side ;
17383: LD_ADDR_OWVAR 20
17387: PUSH
17388: LD_OWVAR 2
17392: ST_TO_ADDR
// uc_nation := nation ;
17393: LD_ADDR_OWVAR 21
17397: PUSH
17398: LD_VAR 0 1
17402: ST_TO_ADDR
// InitHc ;
17403: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17407: LD_INT 0
17409: PPUSH
17410: LD_VAR 0 2
17414: PPUSH
17415: LD_VAR 0 3
17419: PPUSH
17420: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17424: LD_VAR 0 4
17428: PPUSH
17429: LD_VAR 0 5
17433: PPUSH
17434: CALL_OW 428
17438: PUSH
17439: LD_INT 0
17441: EQUAL
17442: IFFALSE 17466
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17444: CALL_OW 44
17448: PPUSH
17449: LD_VAR 0 4
17453: PPUSH
17454: LD_VAR 0 5
17458: PPUSH
17459: LD_INT 1
17461: PPUSH
17462: CALL_OW 48
// end ;
17466: LD_VAR 0 6
17470: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17471: LD_INT 0
17473: PPUSH
17474: PPUSH
// uc_side := your_side ;
17475: LD_ADDR_OWVAR 20
17479: PUSH
17480: LD_OWVAR 2
17484: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17485: LD_VAR 0 1
17489: PUSH
17490: LD_INT 1
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: LD_INT 3
17498: PUSH
17499: LD_INT 4
17501: PUSH
17502: LD_INT 5
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: IN
17512: IFFALSE 17524
// uc_nation := nation_american else
17514: LD_ADDR_OWVAR 21
17518: PUSH
17519: LD_INT 1
17521: ST_TO_ADDR
17522: GO 17567
// if chassis in [ 11 , 12 , 13 , 14 ] then
17524: LD_VAR 0 1
17528: PUSH
17529: LD_INT 11
17531: PUSH
17532: LD_INT 12
17534: PUSH
17535: LD_INT 13
17537: PUSH
17538: LD_INT 14
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: IN
17547: IFFALSE 17559
// uc_nation := nation_arabian else
17549: LD_ADDR_OWVAR 21
17553: PUSH
17554: LD_INT 2
17556: ST_TO_ADDR
17557: GO 17567
// uc_nation := nation_russian ;
17559: LD_ADDR_OWVAR 21
17563: PUSH
17564: LD_INT 3
17566: ST_TO_ADDR
// vc_chassis := chassis ;
17567: LD_ADDR_OWVAR 37
17571: PUSH
17572: LD_VAR 0 1
17576: ST_TO_ADDR
// vc_engine := engine ;
17577: LD_ADDR_OWVAR 39
17581: PUSH
17582: LD_VAR 0 2
17586: ST_TO_ADDR
// vc_control := control ;
17587: LD_ADDR_OWVAR 38
17591: PUSH
17592: LD_VAR 0 3
17596: ST_TO_ADDR
// vc_weapon := weapon ;
17597: LD_ADDR_OWVAR 40
17601: PUSH
17602: LD_VAR 0 4
17606: ST_TO_ADDR
// un := CreateVehicle ;
17607: LD_ADDR_VAR 0 8
17611: PUSH
17612: CALL_OW 45
17616: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17617: LD_VAR 0 8
17621: PPUSH
17622: LD_INT 0
17624: PPUSH
17625: LD_INT 5
17627: PPUSH
17628: CALL_OW 12
17632: PPUSH
17633: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17637: LD_VAR 0 8
17641: PPUSH
17642: LD_VAR 0 5
17646: PPUSH
17647: LD_VAR 0 6
17651: PPUSH
17652: LD_INT 1
17654: PPUSH
17655: CALL_OW 48
// end ;
17659: LD_VAR 0 7
17663: RET
// export hInvincible ; every 1 do
17664: GO 17666
17666: DISABLE
// hInvincible := [ ] ;
17667: LD_ADDR_EXP 80
17671: PUSH
17672: EMPTY
17673: ST_TO_ADDR
17674: END
// every 10 do var i ;
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
// begin enable ;
17681: ENABLE
// if not hInvincible then
17682: LD_EXP 80
17686: NOT
17687: IFFALSE 17691
// exit ;
17689: GO 17735
// for i in hInvincible do
17691: LD_ADDR_VAR 0 1
17695: PUSH
17696: LD_EXP 80
17700: PUSH
17701: FOR_IN
17702: IFFALSE 17733
// if GetLives ( i ) < 1000 then
17704: LD_VAR 0 1
17708: PPUSH
17709: CALL_OW 256
17713: PUSH
17714: LD_INT 1000
17716: LESS
17717: IFFALSE 17731
// SetLives ( i , 1000 ) ;
17719: LD_VAR 0 1
17723: PPUSH
17724: LD_INT 1000
17726: PPUSH
17727: CALL_OW 234
17731: GO 17701
17733: POP
17734: POP
// end ;
17735: PPOPN 1
17737: END
// export function hHackInvincible ; var i ; begin
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17742: LD_ADDR_VAR 0 2
17746: PUSH
17747: LD_INT 2
17749: PUSH
17750: LD_INT 21
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 21
17762: PUSH
17763: LD_INT 2
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: LIST
17774: PPUSH
17775: CALL_OW 69
17779: PUSH
17780: FOR_IN
17781: IFFALSE 17842
// if IsSelected ( i ) then
17783: LD_VAR 0 2
17787: PPUSH
17788: CALL_OW 306
17792: IFFALSE 17840
// begin if i in hInvincible then
17794: LD_VAR 0 2
17798: PUSH
17799: LD_EXP 80
17803: IN
17804: IFFALSE 17824
// hInvincible := hInvincible diff i else
17806: LD_ADDR_EXP 80
17810: PUSH
17811: LD_EXP 80
17815: PUSH
17816: LD_VAR 0 2
17820: DIFF
17821: ST_TO_ADDR
17822: GO 17840
// hInvincible := hInvincible union i ;
17824: LD_ADDR_EXP 80
17828: PUSH
17829: LD_EXP 80
17833: PUSH
17834: LD_VAR 0 2
17838: UNION
17839: ST_TO_ADDR
// end ;
17840: GO 17780
17842: POP
17843: POP
// end ;
17844: LD_VAR 0 1
17848: RET
// export function hHackInvisible ; var i , j ; begin
17849: LD_INT 0
17851: PPUSH
17852: PPUSH
17853: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17854: LD_ADDR_VAR 0 2
17858: PUSH
17859: LD_INT 21
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PPUSH
17869: CALL_OW 69
17873: PUSH
17874: FOR_IN
17875: IFFALSE 17899
// if IsSelected ( i ) then
17877: LD_VAR 0 2
17881: PPUSH
17882: CALL_OW 306
17886: IFFALSE 17897
// ComForceInvisible ( i ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: CALL_OW 496
17897: GO 17874
17899: POP
17900: POP
// end ;
17901: LD_VAR 0 1
17905: RET
// export function hHackChangeYourSide ; begin
17906: LD_INT 0
17908: PPUSH
// if your_side = 8 then
17909: LD_OWVAR 2
17913: PUSH
17914: LD_INT 8
17916: EQUAL
17917: IFFALSE 17929
// your_side := 0 else
17919: LD_ADDR_OWVAR 2
17923: PUSH
17924: LD_INT 0
17926: ST_TO_ADDR
17927: GO 17943
// your_side := your_side + 1 ;
17929: LD_ADDR_OWVAR 2
17933: PUSH
17934: LD_OWVAR 2
17938: PUSH
17939: LD_INT 1
17941: PLUS
17942: ST_TO_ADDR
// end ;
17943: LD_VAR 0 1
17947: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17948: LD_INT 0
17950: PPUSH
17951: PPUSH
17952: PPUSH
// for i in all_units do
17953: LD_ADDR_VAR 0 2
17957: PUSH
17958: LD_OWVAR 3
17962: PUSH
17963: FOR_IN
17964: IFFALSE 18042
// if IsSelected ( i ) then
17966: LD_VAR 0 2
17970: PPUSH
17971: CALL_OW 306
17975: IFFALSE 18040
// begin j := GetSide ( i ) ;
17977: LD_ADDR_VAR 0 3
17981: PUSH
17982: LD_VAR 0 2
17986: PPUSH
17987: CALL_OW 255
17991: ST_TO_ADDR
// if j = 8 then
17992: LD_VAR 0 3
17996: PUSH
17997: LD_INT 8
17999: EQUAL
18000: IFFALSE 18012
// j := 0 else
18002: LD_ADDR_VAR 0 3
18006: PUSH
18007: LD_INT 0
18009: ST_TO_ADDR
18010: GO 18026
// j := j + 1 ;
18012: LD_ADDR_VAR 0 3
18016: PUSH
18017: LD_VAR 0 3
18021: PUSH
18022: LD_INT 1
18024: PLUS
18025: ST_TO_ADDR
// SetSide ( i , j ) ;
18026: LD_VAR 0 2
18030: PPUSH
18031: LD_VAR 0 3
18035: PPUSH
18036: CALL_OW 235
// end ;
18040: GO 17963
18042: POP
18043: POP
// end ;
18044: LD_VAR 0 1
18048: RET
// export function hHackFog ; begin
18049: LD_INT 0
18051: PPUSH
// FogOff ( true ) ;
18052: LD_INT 1
18054: PPUSH
18055: CALL_OW 344
// end ;
18059: LD_VAR 0 1
18063: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18064: LD_INT 0
18066: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18067: LD_VAR 0 1
18071: PPUSH
18072: LD_VAR 0 2
18076: PPUSH
18077: LD_VAR 0 3
18081: PPUSH
18082: LD_INT 1
18084: PPUSH
18085: LD_INT 1
18087: PPUSH
18088: CALL_OW 483
// CenterOnXY ( x , y ) ;
18092: LD_VAR 0 2
18096: PPUSH
18097: LD_VAR 0 3
18101: PPUSH
18102: CALL_OW 84
// end ; end_of_file
18106: LD_VAR 0 4
18110: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
18111: LD_VAR 0 1
18115: PUSH
18116: LD_INT 200
18118: DOUBLE
18119: GREATEREQUAL
18120: IFFALSE 18128
18122: LD_INT 299
18124: DOUBLE
18125: LESSEQUAL
18126: IFTRUE 18130
18128: GO 18162
18130: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
18131: LD_VAR 0 1
18135: PPUSH
18136: LD_VAR 0 2
18140: PPUSH
18141: LD_VAR 0 3
18145: PPUSH
18146: LD_VAR 0 4
18150: PPUSH
18151: LD_VAR 0 5
18155: PPUSH
18156: CALL 18396 0 5
18160: GO 18239
18162: LD_INT 300
18164: DOUBLE
18165: GREATEREQUAL
18166: IFFALSE 18174
18168: LD_INT 399
18170: DOUBLE
18171: LESSEQUAL
18172: IFTRUE 18176
18174: GO 18238
18176: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_VAR 0 2
18186: PPUSH
18187: LD_VAR 0 3
18191: PPUSH
18192: LD_VAR 0 4
18196: PPUSH
18197: LD_VAR 0 5
18201: PPUSH
18202: LD_VAR 0 6
18206: PPUSH
18207: LD_VAR 0 7
18211: PPUSH
18212: LD_VAR 0 8
18216: PPUSH
18217: LD_VAR 0 9
18221: PPUSH
18222: LD_VAR 0 10
18226: PPUSH
18227: LD_VAR 0 11
18231: PPUSH
18232: CALL 16131 0 11
18236: GO 18239
18238: POP
// end ;
18239: PPOPN 11
18241: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
18242: LD_VAR 0 1
18246: PPUSH
18247: LD_VAR 0 2
18251: PPUSH
18252: LD_VAR 0 3
18256: PPUSH
18257: LD_VAR 0 4
18261: PPUSH
18262: LD_VAR 0 5
18266: PPUSH
18267: CALL 18388 0 5
// end ; end_of_file
18271: PPOPN 5
18273: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18274: LD_INT 0
18276: PPUSH
18277: PPUSH
18278: PPUSH
18279: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 264
18289: PUSH
18290: LD_EXP 97
18294: EQUAL
18295: IFFALSE 18367
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18297: LD_INT 68
18299: PPUSH
18300: LD_VAR 0 1
18304: PPUSH
18305: CALL_OW 255
18309: PPUSH
18310: CALL_OW 321
18314: PUSH
18315: LD_INT 2
18317: EQUAL
18318: IFFALSE 18330
// eff := 70 else
18320: LD_ADDR_VAR 0 4
18324: PUSH
18325: LD_INT 70
18327: ST_TO_ADDR
18328: GO 18338
// eff := 30 ;
18330: LD_ADDR_VAR 0 4
18334: PUSH
18335: LD_INT 30
18337: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 250
18347: PPUSH
18348: LD_VAR 0 1
18352: PPUSH
18353: CALL_OW 251
18357: PPUSH
18358: LD_VAR 0 4
18362: PPUSH
18363: CALL_OW 495
// end ; end ;
18367: LD_VAR 0 2
18371: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18372: LD_INT 0
18374: PPUSH
// end ;
18375: LD_VAR 0 4
18379: RET
// export function SOS_Command ( cmd ) ; begin
18380: LD_INT 0
18382: PPUSH
// end ;
18383: LD_VAR 0 2
18387: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18388: LD_INT 0
18390: PPUSH
// end ;
18391: LD_VAR 0 6
18395: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18396: LD_INT 0
18398: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18399: LD_VAR 0 1
18403: PUSH
18404: LD_INT 250
18406: EQUAL
18407: PUSH
18408: LD_VAR 0 2
18412: PPUSH
18413: CALL_OW 264
18417: PUSH
18418: LD_EXP 100
18422: EQUAL
18423: AND
18424: IFFALSE 18445
// MinerPlaceMine ( unit , x , y ) ;
18426: LD_VAR 0 2
18430: PPUSH
18431: LD_VAR 0 4
18435: PPUSH
18436: LD_VAR 0 5
18440: PPUSH
18441: CALL 20794 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18445: LD_VAR 0 1
18449: PUSH
18450: LD_INT 251
18452: EQUAL
18453: PUSH
18454: LD_VAR 0 2
18458: PPUSH
18459: CALL_OW 264
18463: PUSH
18464: LD_EXP 100
18468: EQUAL
18469: AND
18470: IFFALSE 18491
// MinerDetonateMine ( unit , x , y ) ;
18472: LD_VAR 0 2
18476: PPUSH
18477: LD_VAR 0 4
18481: PPUSH
18482: LD_VAR 0 5
18486: PPUSH
18487: CALL 21071 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18491: LD_VAR 0 1
18495: PUSH
18496: LD_INT 252
18498: EQUAL
18499: PUSH
18500: LD_VAR 0 2
18504: PPUSH
18505: CALL_OW 264
18509: PUSH
18510: LD_EXP 100
18514: EQUAL
18515: AND
18516: IFFALSE 18537
// MinerCreateMinefield ( unit , x , y ) ;
18518: LD_VAR 0 2
18522: PPUSH
18523: LD_VAR 0 4
18527: PPUSH
18528: LD_VAR 0 5
18532: PPUSH
18533: CALL 21488 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18537: LD_VAR 0 1
18541: PUSH
18542: LD_INT 253
18544: EQUAL
18545: PUSH
18546: LD_VAR 0 2
18550: PPUSH
18551: CALL_OW 257
18555: PUSH
18556: LD_INT 5
18558: EQUAL
18559: AND
18560: IFFALSE 18581
// ComBinocular ( unit , x , y ) ;
18562: LD_VAR 0 2
18566: PPUSH
18567: LD_VAR 0 4
18571: PPUSH
18572: LD_VAR 0 5
18576: PPUSH
18577: CALL 21859 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18581: LD_VAR 0 1
18585: PUSH
18586: LD_INT 254
18588: EQUAL
18589: PUSH
18590: LD_VAR 0 2
18594: PPUSH
18595: CALL_OW 264
18599: PUSH
18600: LD_EXP 95
18604: EQUAL
18605: AND
18606: PUSH
18607: LD_VAR 0 3
18611: PPUSH
18612: CALL_OW 263
18616: PUSH
18617: LD_INT 3
18619: EQUAL
18620: AND
18621: IFFALSE 18637
// HackDestroyVehicle ( unit , selectedUnit ) ;
18623: LD_VAR 0 2
18627: PPUSH
18628: LD_VAR 0 3
18632: PPUSH
18633: CALL 20154 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18637: LD_VAR 0 1
18641: PUSH
18642: LD_INT 255
18644: EQUAL
18645: PUSH
18646: LD_VAR 0 2
18650: PPUSH
18651: CALL_OW 264
18655: PUSH
18656: LD_INT 14
18658: PUSH
18659: LD_INT 53
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: IN
18666: AND
18667: PUSH
18668: LD_VAR 0 4
18672: PPUSH
18673: LD_VAR 0 5
18677: PPUSH
18678: CALL_OW 488
18682: AND
18683: IFFALSE 18707
// CutTreeXYR ( unit , x , y , 12 ) ;
18685: LD_VAR 0 2
18689: PPUSH
18690: LD_VAR 0 4
18694: PPUSH
18695: LD_VAR 0 5
18699: PPUSH
18700: LD_INT 12
18702: PPUSH
18703: CALL 18720 0 4
// end ;
18707: LD_VAR 0 6
18711: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18712: LD_INT 0
18714: PPUSH
// end ;
18715: LD_VAR 0 4
18719: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18720: LD_INT 0
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
18727: PPUSH
18728: PPUSH
18729: PPUSH
18730: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18731: LD_VAR 0 1
18735: NOT
18736: PUSH
18737: LD_VAR 0 2
18741: PPUSH
18742: LD_VAR 0 3
18746: PPUSH
18747: CALL_OW 488
18751: NOT
18752: OR
18753: PUSH
18754: LD_VAR 0 4
18758: NOT
18759: OR
18760: IFFALSE 18764
// exit ;
18762: GO 19104
// list := [ ] ;
18764: LD_ADDR_VAR 0 13
18768: PUSH
18769: EMPTY
18770: ST_TO_ADDR
// if x - r < 0 then
18771: LD_VAR 0 2
18775: PUSH
18776: LD_VAR 0 4
18780: MINUS
18781: PUSH
18782: LD_INT 0
18784: LESS
18785: IFFALSE 18797
// min_x := 0 else
18787: LD_ADDR_VAR 0 7
18791: PUSH
18792: LD_INT 0
18794: ST_TO_ADDR
18795: GO 18813
// min_x := x - r ;
18797: LD_ADDR_VAR 0 7
18801: PUSH
18802: LD_VAR 0 2
18806: PUSH
18807: LD_VAR 0 4
18811: MINUS
18812: ST_TO_ADDR
// if y - r < 0 then
18813: LD_VAR 0 3
18817: PUSH
18818: LD_VAR 0 4
18822: MINUS
18823: PUSH
18824: LD_INT 0
18826: LESS
18827: IFFALSE 18839
// min_y := 0 else
18829: LD_ADDR_VAR 0 8
18833: PUSH
18834: LD_INT 0
18836: ST_TO_ADDR
18837: GO 18855
// min_y := y - r ;
18839: LD_ADDR_VAR 0 8
18843: PUSH
18844: LD_VAR 0 3
18848: PUSH
18849: LD_VAR 0 4
18853: MINUS
18854: ST_TO_ADDR
// max_x := x + r ;
18855: LD_ADDR_VAR 0 9
18859: PUSH
18860: LD_VAR 0 2
18864: PUSH
18865: LD_VAR 0 4
18869: PLUS
18870: ST_TO_ADDR
// max_y := y + r ;
18871: LD_ADDR_VAR 0 10
18875: PUSH
18876: LD_VAR 0 3
18880: PUSH
18881: LD_VAR 0 4
18885: PLUS
18886: ST_TO_ADDR
// for _x = min_x to max_x do
18887: LD_ADDR_VAR 0 11
18891: PUSH
18892: DOUBLE
18893: LD_VAR 0 7
18897: DEC
18898: ST_TO_ADDR
18899: LD_VAR 0 9
18903: PUSH
18904: FOR_TO
18905: IFFALSE 19022
// for _y = min_y to max_y do
18907: LD_ADDR_VAR 0 12
18911: PUSH
18912: DOUBLE
18913: LD_VAR 0 8
18917: DEC
18918: ST_TO_ADDR
18919: LD_VAR 0 10
18923: PUSH
18924: FOR_TO
18925: IFFALSE 19018
// begin if not ValidHex ( _x , _y ) then
18927: LD_VAR 0 11
18931: PPUSH
18932: LD_VAR 0 12
18936: PPUSH
18937: CALL_OW 488
18941: NOT
18942: IFFALSE 18946
// continue ;
18944: GO 18924
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18946: LD_VAR 0 11
18950: PPUSH
18951: LD_VAR 0 12
18955: PPUSH
18956: CALL_OW 351
18960: PUSH
18961: LD_VAR 0 11
18965: PPUSH
18966: LD_VAR 0 12
18970: PPUSH
18971: CALL_OW 554
18975: AND
18976: IFFALSE 19016
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18978: LD_ADDR_VAR 0 13
18982: PUSH
18983: LD_VAR 0 13
18987: PPUSH
18988: LD_VAR 0 13
18992: PUSH
18993: LD_INT 1
18995: PLUS
18996: PPUSH
18997: LD_VAR 0 11
19001: PUSH
19002: LD_VAR 0 12
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 2
19015: ST_TO_ADDR
// end ;
19016: GO 18924
19018: POP
19019: POP
19020: GO 18904
19022: POP
19023: POP
// if not list then
19024: LD_VAR 0 13
19028: NOT
19029: IFFALSE 19033
// exit ;
19031: GO 19104
// for i in list do
19033: LD_ADDR_VAR 0 6
19037: PUSH
19038: LD_VAR 0 13
19042: PUSH
19043: FOR_IN
19044: IFFALSE 19102
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19046: LD_VAR 0 1
19050: PPUSH
19051: LD_STRING M
19053: PUSH
19054: LD_VAR 0 6
19058: PUSH
19059: LD_INT 1
19061: ARRAY
19062: PUSH
19063: LD_VAR 0 6
19067: PUSH
19068: LD_INT 2
19070: ARRAY
19071: PUSH
19072: LD_INT 0
19074: PUSH
19075: LD_INT 0
19077: PUSH
19078: LD_INT 0
19080: PUSH
19081: LD_INT 0
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: PUSH
19093: EMPTY
19094: LIST
19095: PPUSH
19096: CALL_OW 447
19100: GO 19043
19102: POP
19103: POP
// end ;
19104: LD_VAR 0 5
19108: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19109: LD_EXP 83
19113: NOT
19114: IFFALSE 19164
19116: GO 19118
19118: DISABLE
// begin initHack := true ;
19119: LD_ADDR_EXP 83
19123: PUSH
19124: LD_INT 1
19126: ST_TO_ADDR
// hackTanks := [ ] ;
19127: LD_ADDR_EXP 84
19131: PUSH
19132: EMPTY
19133: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19134: LD_ADDR_EXP 85
19138: PUSH
19139: EMPTY
19140: ST_TO_ADDR
// hackLimit := 3 ;
19141: LD_ADDR_EXP 86
19145: PUSH
19146: LD_INT 3
19148: ST_TO_ADDR
// hackDist := 12 ;
19149: LD_ADDR_EXP 87
19153: PUSH
19154: LD_INT 12
19156: ST_TO_ADDR
// hackCounter := [ ] ;
19157: LD_ADDR_EXP 88
19161: PUSH
19162: EMPTY
19163: ST_TO_ADDR
// end ;
19164: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19165: LD_EXP 83
19169: PUSH
19170: LD_INT 34
19172: PUSH
19173: LD_EXP 95
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PPUSH
19182: CALL_OW 69
19186: AND
19187: IFFALSE 19442
19189: GO 19191
19191: DISABLE
19192: LD_INT 0
19194: PPUSH
19195: PPUSH
// begin enable ;
19196: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19197: LD_ADDR_VAR 0 1
19201: PUSH
19202: LD_INT 34
19204: PUSH
19205: LD_EXP 95
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: PPUSH
19214: CALL_OW 69
19218: PUSH
19219: FOR_IN
19220: IFFALSE 19440
// begin if not i in hackTanks then
19222: LD_VAR 0 1
19226: PUSH
19227: LD_EXP 84
19231: IN
19232: NOT
19233: IFFALSE 19316
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19235: LD_ADDR_EXP 84
19239: PUSH
19240: LD_EXP 84
19244: PPUSH
19245: LD_EXP 84
19249: PUSH
19250: LD_INT 1
19252: PLUS
19253: PPUSH
19254: LD_VAR 0 1
19258: PPUSH
19259: CALL_OW 1
19263: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19264: LD_ADDR_EXP 85
19268: PUSH
19269: LD_EXP 85
19273: PPUSH
19274: LD_EXP 85
19278: PUSH
19279: LD_INT 1
19281: PLUS
19282: PPUSH
19283: EMPTY
19284: PPUSH
19285: CALL_OW 1
19289: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19290: LD_ADDR_EXP 88
19294: PUSH
19295: LD_EXP 88
19299: PPUSH
19300: LD_EXP 88
19304: PUSH
19305: LD_INT 1
19307: PLUS
19308: PPUSH
19309: EMPTY
19310: PPUSH
19311: CALL_OW 1
19315: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19316: LD_VAR 0 1
19320: PPUSH
19321: CALL_OW 302
19325: NOT
19326: IFFALSE 19339
// begin HackUnlinkAll ( i ) ;
19328: LD_VAR 0 1
19332: PPUSH
19333: CALL 19445 0 1
// continue ;
19337: GO 19219
// end ; HackCheckCapturedStatus ( i ) ;
19339: LD_VAR 0 1
19343: PPUSH
19344: CALL 19888 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19348: LD_ADDR_VAR 0 2
19352: PUSH
19353: LD_INT 81
19355: PUSH
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 255
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 33
19372: PUSH
19373: LD_INT 3
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 91
19382: PUSH
19383: LD_VAR 0 1
19387: PUSH
19388: LD_EXP 87
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: LIST
19397: PUSH
19398: LD_INT 50
19400: PUSH
19401: EMPTY
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: PPUSH
19410: CALL_OW 69
19414: ST_TO_ADDR
// if not tmp then
19415: LD_VAR 0 2
19419: NOT
19420: IFFALSE 19424
// continue ;
19422: GO 19219
// HackLink ( i , tmp ) ;
19424: LD_VAR 0 1
19428: PPUSH
19429: LD_VAR 0 2
19433: PPUSH
19434: CALL 19581 0 2
// end ;
19438: GO 19219
19440: POP
19441: POP
// end ;
19442: PPOPN 2
19444: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19445: LD_INT 0
19447: PPUSH
19448: PPUSH
19449: PPUSH
// if not hack in hackTanks then
19450: LD_VAR 0 1
19454: PUSH
19455: LD_EXP 84
19459: IN
19460: NOT
19461: IFFALSE 19465
// exit ;
19463: GO 19576
// index := GetElementIndex ( hackTanks , hack ) ;
19465: LD_ADDR_VAR 0 4
19469: PUSH
19470: LD_EXP 84
19474: PPUSH
19475: LD_VAR 0 1
19479: PPUSH
19480: CALL 27218 0 2
19484: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19485: LD_EXP 85
19489: PUSH
19490: LD_VAR 0 4
19494: ARRAY
19495: IFFALSE 19576
// begin for i in hackTanksCaptured [ index ] do
19497: LD_ADDR_VAR 0 3
19501: PUSH
19502: LD_EXP 85
19506: PUSH
19507: LD_VAR 0 4
19511: ARRAY
19512: PUSH
19513: FOR_IN
19514: IFFALSE 19540
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19516: LD_VAR 0 3
19520: PUSH
19521: LD_INT 1
19523: ARRAY
19524: PPUSH
19525: LD_VAR 0 3
19529: PUSH
19530: LD_INT 2
19532: ARRAY
19533: PPUSH
19534: CALL_OW 235
19538: GO 19513
19540: POP
19541: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19542: LD_ADDR_EXP 85
19546: PUSH
19547: LD_EXP 85
19551: PPUSH
19552: LD_VAR 0 4
19556: PPUSH
19557: EMPTY
19558: PPUSH
19559: CALL_OW 1
19563: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19564: LD_VAR 0 1
19568: PPUSH
19569: LD_INT 0
19571: PPUSH
19572: CALL_OW 505
// end ; end ;
19576: LD_VAR 0 2
19580: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19581: LD_INT 0
19583: PPUSH
19584: PPUSH
19585: PPUSH
// if not hack in hackTanks or not vehicles then
19586: LD_VAR 0 1
19590: PUSH
19591: LD_EXP 84
19595: IN
19596: NOT
19597: PUSH
19598: LD_VAR 0 2
19602: NOT
19603: OR
19604: IFFALSE 19608
// exit ;
19606: GO 19883
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: LD_VAR 0 1
19617: PPUSH
19618: LD_VAR 0 2
19622: PPUSH
19623: LD_INT 1
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: CALL 27868 0 4
19633: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19634: LD_ADDR_VAR 0 5
19638: PUSH
19639: LD_EXP 84
19643: PPUSH
19644: LD_VAR 0 1
19648: PPUSH
19649: CALL 27218 0 2
19653: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19654: LD_EXP 85
19658: PUSH
19659: LD_VAR 0 5
19663: ARRAY
19664: PUSH
19665: LD_EXP 86
19669: LESS
19670: IFFALSE 19859
// begin for i := 1 to vehicles do
19672: LD_ADDR_VAR 0 4
19676: PUSH
19677: DOUBLE
19678: LD_INT 1
19680: DEC
19681: ST_TO_ADDR
19682: LD_VAR 0 2
19686: PUSH
19687: FOR_TO
19688: IFFALSE 19857
// begin if hackTanksCaptured [ index ] = hackLimit then
19690: LD_EXP 85
19694: PUSH
19695: LD_VAR 0 5
19699: ARRAY
19700: PUSH
19701: LD_EXP 86
19705: EQUAL
19706: IFFALSE 19710
// break ;
19708: GO 19857
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19710: LD_ADDR_EXP 88
19714: PUSH
19715: LD_EXP 88
19719: PPUSH
19720: LD_VAR 0 5
19724: PPUSH
19725: LD_EXP 88
19729: PUSH
19730: LD_VAR 0 5
19734: ARRAY
19735: PUSH
19736: LD_INT 1
19738: PLUS
19739: PPUSH
19740: CALL_OW 1
19744: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19745: LD_ADDR_EXP 85
19749: PUSH
19750: LD_EXP 85
19754: PPUSH
19755: LD_VAR 0 5
19759: PUSH
19760: LD_EXP 85
19764: PUSH
19765: LD_VAR 0 5
19769: ARRAY
19770: PUSH
19771: LD_INT 1
19773: PLUS
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PPUSH
19779: LD_VAR 0 2
19783: PUSH
19784: LD_VAR 0 4
19788: ARRAY
19789: PUSH
19790: LD_VAR 0 2
19794: PUSH
19795: LD_VAR 0 4
19799: ARRAY
19800: PPUSH
19801: CALL_OW 255
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL 27433 0 3
19814: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19815: LD_VAR 0 2
19819: PUSH
19820: LD_VAR 0 4
19824: ARRAY
19825: PPUSH
19826: LD_VAR 0 1
19830: PPUSH
19831: CALL_OW 255
19835: PPUSH
19836: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19840: LD_VAR 0 2
19844: PUSH
19845: LD_VAR 0 4
19849: ARRAY
19850: PPUSH
19851: CALL_OW 141
// end ;
19855: GO 19687
19857: POP
19858: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19859: LD_VAR 0 1
19863: PPUSH
19864: LD_EXP 85
19868: PUSH
19869: LD_VAR 0 5
19873: ARRAY
19874: PUSH
19875: LD_INT 0
19877: PLUS
19878: PPUSH
19879: CALL_OW 505
// end ;
19883: LD_VAR 0 3
19887: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19888: LD_INT 0
19890: PPUSH
19891: PPUSH
19892: PPUSH
19893: PPUSH
// if not hack in hackTanks then
19894: LD_VAR 0 1
19898: PUSH
19899: LD_EXP 84
19903: IN
19904: NOT
19905: IFFALSE 19909
// exit ;
19907: GO 20149
// index := GetElementIndex ( hackTanks , hack ) ;
19909: LD_ADDR_VAR 0 4
19913: PUSH
19914: LD_EXP 84
19918: PPUSH
19919: LD_VAR 0 1
19923: PPUSH
19924: CALL 27218 0 2
19928: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19929: LD_ADDR_VAR 0 3
19933: PUSH
19934: DOUBLE
19935: LD_EXP 85
19939: PUSH
19940: LD_VAR 0 4
19944: ARRAY
19945: INC
19946: ST_TO_ADDR
19947: LD_INT 1
19949: PUSH
19950: FOR_DOWNTO
19951: IFFALSE 20123
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19953: LD_ADDR_VAR 0 5
19957: PUSH
19958: LD_EXP 85
19962: PUSH
19963: LD_VAR 0 4
19967: ARRAY
19968: PUSH
19969: LD_VAR 0 3
19973: ARRAY
19974: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19975: LD_VAR 0 5
19979: PUSH
19980: LD_INT 1
19982: ARRAY
19983: PPUSH
19984: CALL_OW 302
19988: NOT
19989: PUSH
19990: LD_VAR 0 5
19994: PUSH
19995: LD_INT 1
19997: ARRAY
19998: PPUSH
19999: CALL_OW 255
20003: PUSH
20004: LD_VAR 0 1
20008: PPUSH
20009: CALL_OW 255
20013: NONEQUAL
20014: OR
20015: IFFALSE 20121
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20017: LD_VAR 0 5
20021: PUSH
20022: LD_INT 1
20024: ARRAY
20025: PPUSH
20026: CALL_OW 305
20030: PUSH
20031: LD_VAR 0 5
20035: PUSH
20036: LD_INT 1
20038: ARRAY
20039: PPUSH
20040: CALL_OW 255
20044: PUSH
20045: LD_VAR 0 1
20049: PPUSH
20050: CALL_OW 255
20054: EQUAL
20055: AND
20056: IFFALSE 20080
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20058: LD_VAR 0 5
20062: PUSH
20063: LD_INT 1
20065: ARRAY
20066: PPUSH
20067: LD_VAR 0 5
20071: PUSH
20072: LD_INT 2
20074: ARRAY
20075: PPUSH
20076: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20080: LD_ADDR_EXP 85
20084: PUSH
20085: LD_EXP 85
20089: PPUSH
20090: LD_VAR 0 4
20094: PPUSH
20095: LD_EXP 85
20099: PUSH
20100: LD_VAR 0 4
20104: ARRAY
20105: PPUSH
20106: LD_VAR 0 3
20110: PPUSH
20111: CALL_OW 3
20115: PPUSH
20116: CALL_OW 1
20120: ST_TO_ADDR
// end ; end ;
20121: GO 19950
20123: POP
20124: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20125: LD_VAR 0 1
20129: PPUSH
20130: LD_EXP 85
20134: PUSH
20135: LD_VAR 0 4
20139: ARRAY
20140: PUSH
20141: LD_INT 0
20143: PLUS
20144: PPUSH
20145: CALL_OW 505
// end ;
20149: LD_VAR 0 2
20153: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
20154: LD_INT 0
20156: PPUSH
20157: PPUSH
20158: PPUSH
20159: PPUSH
// if not hack in hackTanks then
20160: LD_VAR 0 1
20164: PUSH
20165: LD_EXP 84
20169: IN
20170: NOT
20171: IFFALSE 20175
// exit ;
20173: GO 20260
// index := GetElementIndex ( hackTanks , hack ) ;
20175: LD_ADDR_VAR 0 5
20179: PUSH
20180: LD_EXP 84
20184: PPUSH
20185: LD_VAR 0 1
20189: PPUSH
20190: CALL 27218 0 2
20194: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
20195: LD_ADDR_VAR 0 4
20199: PUSH
20200: DOUBLE
20201: LD_INT 1
20203: DEC
20204: ST_TO_ADDR
20205: LD_EXP 85
20209: PUSH
20210: LD_VAR 0 5
20214: ARRAY
20215: PUSH
20216: FOR_TO
20217: IFFALSE 20258
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
20219: LD_EXP 85
20223: PUSH
20224: LD_VAR 0 5
20228: ARRAY
20229: PUSH
20230: LD_VAR 0 4
20234: ARRAY
20235: PUSH
20236: LD_INT 1
20238: ARRAY
20239: PUSH
20240: LD_VAR 0 2
20244: EQUAL
20245: IFFALSE 20256
// KillUnit ( vehicle ) ;
20247: LD_VAR 0 2
20251: PPUSH
20252: CALL_OW 66
20256: GO 20216
20258: POP
20259: POP
// end ;
20260: LD_VAR 0 3
20264: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20265: LD_EXP 89
20269: NOT
20270: IFFALSE 20305
20272: GO 20274
20274: DISABLE
// begin initMiner := true ;
20275: LD_ADDR_EXP 89
20279: PUSH
20280: LD_INT 1
20282: ST_TO_ADDR
// minersList := [ ] ;
20283: LD_ADDR_EXP 90
20287: PUSH
20288: EMPTY
20289: ST_TO_ADDR
// minerMinesList := [ ] ;
20290: LD_ADDR_EXP 91
20294: PUSH
20295: EMPTY
20296: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20297: LD_ADDR_EXP 92
20301: PUSH
20302: LD_INT 5
20304: ST_TO_ADDR
// end ;
20305: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20306: LD_EXP 89
20310: PUSH
20311: LD_INT 34
20313: PUSH
20314: LD_EXP 100
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PPUSH
20323: CALL_OW 69
20327: AND
20328: IFFALSE 20791
20330: GO 20332
20332: DISABLE
20333: LD_INT 0
20335: PPUSH
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin enable ;
20339: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20340: LD_ADDR_VAR 0 1
20344: PUSH
20345: LD_INT 34
20347: PUSH
20348: LD_EXP 100
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PPUSH
20357: CALL_OW 69
20361: PUSH
20362: FOR_IN
20363: IFFALSE 20435
// begin if not i in minersList then
20365: LD_VAR 0 1
20369: PUSH
20370: LD_EXP 90
20374: IN
20375: NOT
20376: IFFALSE 20433
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20378: LD_ADDR_EXP 90
20382: PUSH
20383: LD_EXP 90
20387: PPUSH
20388: LD_EXP 90
20392: PUSH
20393: LD_INT 1
20395: PLUS
20396: PPUSH
20397: LD_VAR 0 1
20401: PPUSH
20402: CALL_OW 1
20406: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20407: LD_ADDR_EXP 91
20411: PUSH
20412: LD_EXP 91
20416: PPUSH
20417: LD_EXP 91
20421: PUSH
20422: LD_INT 1
20424: PLUS
20425: PPUSH
20426: EMPTY
20427: PPUSH
20428: CALL_OW 1
20432: ST_TO_ADDR
// end end ;
20433: GO 20362
20435: POP
20436: POP
// for i := minerMinesList downto 1 do
20437: LD_ADDR_VAR 0 1
20441: PUSH
20442: DOUBLE
20443: LD_EXP 91
20447: INC
20448: ST_TO_ADDR
20449: LD_INT 1
20451: PUSH
20452: FOR_DOWNTO
20453: IFFALSE 20789
// begin if IsLive ( minersList [ i ] ) then
20455: LD_EXP 90
20459: PUSH
20460: LD_VAR 0 1
20464: ARRAY
20465: PPUSH
20466: CALL_OW 300
20470: IFFALSE 20498
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20472: LD_EXP 90
20476: PUSH
20477: LD_VAR 0 1
20481: ARRAY
20482: PPUSH
20483: LD_EXP 91
20487: PUSH
20488: LD_VAR 0 1
20492: ARRAY
20493: PPUSH
20494: CALL_OW 505
// if not minerMinesList [ i ] then
20498: LD_EXP 91
20502: PUSH
20503: LD_VAR 0 1
20507: ARRAY
20508: NOT
20509: IFFALSE 20513
// continue ;
20511: GO 20452
// for j := minerMinesList [ i ] downto 1 do
20513: LD_ADDR_VAR 0 2
20517: PUSH
20518: DOUBLE
20519: LD_EXP 91
20523: PUSH
20524: LD_VAR 0 1
20528: ARRAY
20529: INC
20530: ST_TO_ADDR
20531: LD_INT 1
20533: PUSH
20534: FOR_DOWNTO
20535: IFFALSE 20785
// begin side := GetSide ( minersList [ i ] ) ;
20537: LD_ADDR_VAR 0 3
20541: PUSH
20542: LD_EXP 90
20546: PUSH
20547: LD_VAR 0 1
20551: ARRAY
20552: PPUSH
20553: CALL_OW 255
20557: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20558: LD_ADDR_VAR 0 4
20562: PUSH
20563: LD_EXP 91
20567: PUSH
20568: LD_VAR 0 1
20572: ARRAY
20573: PUSH
20574: LD_VAR 0 2
20578: ARRAY
20579: PUSH
20580: LD_INT 1
20582: ARRAY
20583: PPUSH
20584: LD_EXP 91
20588: PUSH
20589: LD_VAR 0 1
20593: ARRAY
20594: PUSH
20595: LD_VAR 0 2
20599: ARRAY
20600: PUSH
20601: LD_INT 2
20603: ARRAY
20604: PPUSH
20605: CALL_OW 428
20609: ST_TO_ADDR
// if not tmp then
20610: LD_VAR 0 4
20614: NOT
20615: IFFALSE 20619
// continue ;
20617: GO 20534
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20619: LD_VAR 0 4
20623: PUSH
20624: LD_INT 81
20626: PUSH
20627: LD_VAR 0 3
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: PPUSH
20636: CALL_OW 69
20640: IN
20641: PUSH
20642: LD_EXP 91
20646: PUSH
20647: LD_VAR 0 1
20651: ARRAY
20652: PUSH
20653: LD_VAR 0 2
20657: ARRAY
20658: PUSH
20659: LD_INT 1
20661: ARRAY
20662: PPUSH
20663: LD_EXP 91
20667: PUSH
20668: LD_VAR 0 1
20672: ARRAY
20673: PUSH
20674: LD_VAR 0 2
20678: ARRAY
20679: PUSH
20680: LD_INT 2
20682: ARRAY
20683: PPUSH
20684: CALL_OW 458
20688: AND
20689: IFFALSE 20783
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20691: LD_EXP 91
20695: PUSH
20696: LD_VAR 0 1
20700: ARRAY
20701: PUSH
20702: LD_VAR 0 2
20706: ARRAY
20707: PUSH
20708: LD_INT 1
20710: ARRAY
20711: PPUSH
20712: LD_EXP 91
20716: PUSH
20717: LD_VAR 0 1
20721: ARRAY
20722: PUSH
20723: LD_VAR 0 2
20727: ARRAY
20728: PUSH
20729: LD_INT 2
20731: ARRAY
20732: PPUSH
20733: LD_VAR 0 3
20737: PPUSH
20738: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20742: LD_ADDR_EXP 91
20746: PUSH
20747: LD_EXP 91
20751: PPUSH
20752: LD_VAR 0 1
20756: PPUSH
20757: LD_EXP 91
20761: PUSH
20762: LD_VAR 0 1
20766: ARRAY
20767: PPUSH
20768: LD_VAR 0 2
20772: PPUSH
20773: CALL_OW 3
20777: PPUSH
20778: CALL_OW 1
20782: ST_TO_ADDR
// end ; end ;
20783: GO 20534
20785: POP
20786: POP
// end ;
20787: GO 20452
20789: POP
20790: POP
// end ;
20791: PPOPN 4
20793: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20794: LD_INT 0
20796: PPUSH
20797: PPUSH
// result := false ;
20798: LD_ADDR_VAR 0 4
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL_OW 264
20815: PUSH
20816: LD_EXP 100
20820: EQUAL
20821: NOT
20822: IFFALSE 20826
// exit ;
20824: GO 21066
// index := GetElementIndex ( minersList , unit ) ;
20826: LD_ADDR_VAR 0 5
20830: PUSH
20831: LD_EXP 90
20835: PPUSH
20836: LD_VAR 0 1
20840: PPUSH
20841: CALL 27218 0 2
20845: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20846: LD_EXP 91
20850: PUSH
20851: LD_VAR 0 5
20855: ARRAY
20856: PUSH
20857: LD_EXP 92
20861: GREATEREQUAL
20862: IFFALSE 20866
// exit ;
20864: GO 21066
// ComMoveXY ( unit , x , y ) ;
20866: LD_VAR 0 1
20870: PPUSH
20871: LD_VAR 0 2
20875: PPUSH
20876: LD_VAR 0 3
20880: PPUSH
20881: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20885: LD_INT 35
20887: PPUSH
20888: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20892: LD_VAR 0 1
20896: PPUSH
20897: LD_VAR 0 2
20901: PPUSH
20902: LD_VAR 0 3
20906: PPUSH
20907: CALL 57990 0 3
20911: NOT
20912: PUSH
20913: LD_VAR 0 1
20917: PPUSH
20918: CALL_OW 314
20922: AND
20923: IFFALSE 20927
// exit ;
20925: GO 21066
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20927: LD_VAR 0 2
20931: PPUSH
20932: LD_VAR 0 3
20936: PPUSH
20937: CALL_OW 428
20941: PUSH
20942: LD_VAR 0 1
20946: EQUAL
20947: PUSH
20948: LD_VAR 0 1
20952: PPUSH
20953: CALL_OW 314
20957: NOT
20958: AND
20959: IFFALSE 20885
// PlaySoundXY ( x , y , PlantMine ) ;
20961: LD_VAR 0 2
20965: PPUSH
20966: LD_VAR 0 3
20970: PPUSH
20971: LD_STRING PlantMine
20973: PPUSH
20974: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20978: LD_VAR 0 2
20982: PPUSH
20983: LD_VAR 0 3
20987: PPUSH
20988: LD_VAR 0 1
20992: PPUSH
20993: CALL_OW 255
20997: PPUSH
20998: LD_INT 0
21000: PPUSH
21001: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
21005: LD_ADDR_EXP 91
21009: PUSH
21010: LD_EXP 91
21014: PPUSH
21015: LD_VAR 0 5
21019: PUSH
21020: LD_EXP 91
21024: PUSH
21025: LD_VAR 0 5
21029: ARRAY
21030: PUSH
21031: LD_INT 1
21033: PLUS
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PPUSH
21039: LD_VAR 0 2
21043: PUSH
21044: LD_VAR 0 3
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PPUSH
21053: CALL 27433 0 3
21057: ST_TO_ADDR
// result := true ;
21058: LD_ADDR_VAR 0 4
21062: PUSH
21063: LD_INT 1
21065: ST_TO_ADDR
// end ;
21066: LD_VAR 0 4
21070: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
21071: LD_INT 0
21073: PPUSH
21074: PPUSH
21075: PPUSH
// if not unit in minersList then
21076: LD_VAR 0 1
21080: PUSH
21081: LD_EXP 90
21085: IN
21086: NOT
21087: IFFALSE 21091
// exit ;
21089: GO 21483
// index := GetElementIndex ( minersList , unit ) ;
21091: LD_ADDR_VAR 0 6
21095: PUSH
21096: LD_EXP 90
21100: PPUSH
21101: LD_VAR 0 1
21105: PPUSH
21106: CALL 27218 0 2
21110: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
21111: LD_ADDR_VAR 0 5
21115: PUSH
21116: DOUBLE
21117: LD_EXP 91
21121: PUSH
21122: LD_VAR 0 6
21126: ARRAY
21127: INC
21128: ST_TO_ADDR
21129: LD_INT 1
21131: PUSH
21132: FOR_DOWNTO
21133: IFFALSE 21294
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
21135: LD_EXP 91
21139: PUSH
21140: LD_VAR 0 6
21144: ARRAY
21145: PUSH
21146: LD_VAR 0 5
21150: ARRAY
21151: PUSH
21152: LD_INT 1
21154: ARRAY
21155: PUSH
21156: LD_VAR 0 2
21160: EQUAL
21161: PUSH
21162: LD_EXP 91
21166: PUSH
21167: LD_VAR 0 6
21171: ARRAY
21172: PUSH
21173: LD_VAR 0 5
21177: ARRAY
21178: PUSH
21179: LD_INT 2
21181: ARRAY
21182: PUSH
21183: LD_VAR 0 3
21187: EQUAL
21188: AND
21189: IFFALSE 21292
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21191: LD_EXP 91
21195: PUSH
21196: LD_VAR 0 6
21200: ARRAY
21201: PUSH
21202: LD_VAR 0 5
21206: ARRAY
21207: PUSH
21208: LD_INT 1
21210: ARRAY
21211: PPUSH
21212: LD_EXP 91
21216: PUSH
21217: LD_VAR 0 6
21221: ARRAY
21222: PUSH
21223: LD_VAR 0 5
21227: ARRAY
21228: PUSH
21229: LD_INT 2
21231: ARRAY
21232: PPUSH
21233: LD_VAR 0 1
21237: PPUSH
21238: CALL_OW 255
21242: PPUSH
21243: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21247: LD_ADDR_EXP 91
21251: PUSH
21252: LD_EXP 91
21256: PPUSH
21257: LD_VAR 0 6
21261: PPUSH
21262: LD_EXP 91
21266: PUSH
21267: LD_VAR 0 6
21271: ARRAY
21272: PPUSH
21273: LD_VAR 0 5
21277: PPUSH
21278: CALL_OW 3
21282: PPUSH
21283: CALL_OW 1
21287: ST_TO_ADDR
// exit ;
21288: POP
21289: POP
21290: GO 21483
// end ; end ;
21292: GO 21132
21294: POP
21295: POP
// for i := minerMinesList [ index ] downto 1 do
21296: LD_ADDR_VAR 0 5
21300: PUSH
21301: DOUBLE
21302: LD_EXP 91
21306: PUSH
21307: LD_VAR 0 6
21311: ARRAY
21312: INC
21313: ST_TO_ADDR
21314: LD_INT 1
21316: PUSH
21317: FOR_DOWNTO
21318: IFFALSE 21481
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21320: LD_EXP 91
21324: PUSH
21325: LD_VAR 0 6
21329: ARRAY
21330: PUSH
21331: LD_VAR 0 5
21335: ARRAY
21336: PUSH
21337: LD_INT 1
21339: ARRAY
21340: PPUSH
21341: LD_EXP 91
21345: PUSH
21346: LD_VAR 0 6
21350: ARRAY
21351: PUSH
21352: LD_VAR 0 5
21356: ARRAY
21357: PUSH
21358: LD_INT 2
21360: ARRAY
21361: PPUSH
21362: LD_VAR 0 2
21366: PPUSH
21367: LD_VAR 0 3
21371: PPUSH
21372: CALL_OW 298
21376: PUSH
21377: LD_INT 6
21379: LESS
21380: IFFALSE 21479
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21382: LD_EXP 91
21386: PUSH
21387: LD_VAR 0 6
21391: ARRAY
21392: PUSH
21393: LD_VAR 0 5
21397: ARRAY
21398: PUSH
21399: LD_INT 1
21401: ARRAY
21402: PPUSH
21403: LD_EXP 91
21407: PUSH
21408: LD_VAR 0 6
21412: ARRAY
21413: PUSH
21414: LD_VAR 0 5
21418: ARRAY
21419: PUSH
21420: LD_INT 2
21422: ARRAY
21423: PPUSH
21424: LD_VAR 0 1
21428: PPUSH
21429: CALL_OW 255
21433: PPUSH
21434: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21438: LD_ADDR_EXP 91
21442: PUSH
21443: LD_EXP 91
21447: PPUSH
21448: LD_VAR 0 6
21452: PPUSH
21453: LD_EXP 91
21457: PUSH
21458: LD_VAR 0 6
21462: ARRAY
21463: PPUSH
21464: LD_VAR 0 5
21468: PPUSH
21469: CALL_OW 3
21473: PPUSH
21474: CALL_OW 1
21478: ST_TO_ADDR
// end ; end ;
21479: GO 21317
21481: POP
21482: POP
// end ;
21483: LD_VAR 0 4
21487: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21488: LD_INT 0
21490: PPUSH
21491: PPUSH
21492: PPUSH
21493: PPUSH
21494: PPUSH
21495: PPUSH
21496: PPUSH
21497: PPUSH
21498: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21499: LD_VAR 0 1
21503: PPUSH
21504: CALL_OW 264
21508: PUSH
21509: LD_EXP 100
21513: EQUAL
21514: NOT
21515: PUSH
21516: LD_VAR 0 1
21520: PUSH
21521: LD_EXP 90
21525: IN
21526: NOT
21527: OR
21528: IFFALSE 21532
// exit ;
21530: GO 21854
// index := GetElementIndex ( minersList , unit ) ;
21532: LD_ADDR_VAR 0 6
21536: PUSH
21537: LD_EXP 90
21541: PPUSH
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL 27218 0 2
21551: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21552: LD_ADDR_VAR 0 8
21556: PUSH
21557: LD_EXP 92
21561: PUSH
21562: LD_EXP 91
21566: PUSH
21567: LD_VAR 0 6
21571: ARRAY
21572: MINUS
21573: ST_TO_ADDR
// if not minesFreeAmount then
21574: LD_VAR 0 8
21578: NOT
21579: IFFALSE 21583
// exit ;
21581: GO 21854
// tmp := [ ] ;
21583: LD_ADDR_VAR 0 7
21587: PUSH
21588: EMPTY
21589: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21590: LD_ADDR_VAR 0 5
21594: PUSH
21595: DOUBLE
21596: LD_INT 1
21598: DEC
21599: ST_TO_ADDR
21600: LD_VAR 0 8
21604: PUSH
21605: FOR_TO
21606: IFFALSE 21801
// begin _d := rand ( 0 , 5 ) ;
21608: LD_ADDR_VAR 0 11
21612: PUSH
21613: LD_INT 0
21615: PPUSH
21616: LD_INT 5
21618: PPUSH
21619: CALL_OW 12
21623: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21624: LD_ADDR_VAR 0 12
21628: PUSH
21629: LD_INT 2
21631: PPUSH
21632: LD_INT 6
21634: PPUSH
21635: CALL_OW 12
21639: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21640: LD_ADDR_VAR 0 9
21644: PUSH
21645: LD_VAR 0 2
21649: PPUSH
21650: LD_VAR 0 11
21654: PPUSH
21655: LD_VAR 0 12
21659: PPUSH
21660: CALL_OW 272
21664: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21665: LD_ADDR_VAR 0 10
21669: PUSH
21670: LD_VAR 0 3
21674: PPUSH
21675: LD_VAR 0 11
21679: PPUSH
21680: LD_VAR 0 12
21684: PPUSH
21685: CALL_OW 273
21689: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21690: LD_VAR 0 9
21694: PPUSH
21695: LD_VAR 0 10
21699: PPUSH
21700: CALL_OW 488
21704: PUSH
21705: LD_VAR 0 9
21709: PUSH
21710: LD_VAR 0 10
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_VAR 0 7
21723: IN
21724: NOT
21725: AND
21726: PUSH
21727: LD_VAR 0 9
21731: PPUSH
21732: LD_VAR 0 10
21736: PPUSH
21737: CALL_OW 458
21741: NOT
21742: AND
21743: IFFALSE 21785
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21745: LD_ADDR_VAR 0 7
21749: PUSH
21750: LD_VAR 0 7
21754: PPUSH
21755: LD_VAR 0 7
21759: PUSH
21760: LD_INT 1
21762: PLUS
21763: PPUSH
21764: LD_VAR 0 9
21768: PUSH
21769: LD_VAR 0 10
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PPUSH
21778: CALL_OW 1
21782: ST_TO_ADDR
21783: GO 21799
// i := i - 1 ;
21785: LD_ADDR_VAR 0 5
21789: PUSH
21790: LD_VAR 0 5
21794: PUSH
21795: LD_INT 1
21797: MINUS
21798: ST_TO_ADDR
// end ;
21799: GO 21605
21801: POP
21802: POP
// for i in tmp do
21803: LD_ADDR_VAR 0 5
21807: PUSH
21808: LD_VAR 0 7
21812: PUSH
21813: FOR_IN
21814: IFFALSE 21852
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21816: LD_VAR 0 1
21820: PPUSH
21821: LD_VAR 0 5
21825: PUSH
21826: LD_INT 1
21828: ARRAY
21829: PPUSH
21830: LD_VAR 0 5
21834: PUSH
21835: LD_INT 2
21837: ARRAY
21838: PPUSH
21839: CALL 20794 0 3
21843: NOT
21844: IFFALSE 21850
// exit ;
21846: POP
21847: POP
21848: GO 21854
21850: GO 21813
21852: POP
21853: POP
// end ;
21854: LD_VAR 0 4
21858: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21859: LD_INT 0
21861: PPUSH
21862: PPUSH
21863: PPUSH
21864: PPUSH
21865: PPUSH
21866: PPUSH
21867: PPUSH
// if not GetClass ( unit ) = class_sniper then
21868: LD_VAR 0 1
21872: PPUSH
21873: CALL_OW 257
21877: PUSH
21878: LD_INT 5
21880: EQUAL
21881: NOT
21882: IFFALSE 21886
// exit ;
21884: GO 22274
// dist := 8 ;
21886: LD_ADDR_VAR 0 5
21890: PUSH
21891: LD_INT 8
21893: ST_TO_ADDR
// viewRange := 12 ;
21894: LD_ADDR_VAR 0 7
21898: PUSH
21899: LD_INT 12
21901: ST_TO_ADDR
// side := GetSide ( unit ) ;
21902: LD_ADDR_VAR 0 6
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 255
21916: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21917: LD_INT 61
21919: PPUSH
21920: LD_VAR 0 6
21924: PPUSH
21925: CALL_OW 321
21929: PUSH
21930: LD_INT 2
21932: EQUAL
21933: IFFALSE 21943
// viewRange := 16 ;
21935: LD_ADDR_VAR 0 7
21939: PUSH
21940: LD_INT 16
21942: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21943: LD_VAR 0 1
21947: PPUSH
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_VAR 0 3
21957: PPUSH
21958: CALL_OW 297
21962: PUSH
21963: LD_VAR 0 5
21967: GREATER
21968: IFFALSE 22047
// begin ComMoveXY ( unit , x , y ) ;
21970: LD_VAR 0 1
21974: PPUSH
21975: LD_VAR 0 2
21979: PPUSH
21980: LD_VAR 0 3
21984: PPUSH
21985: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21989: LD_INT 35
21991: PPUSH
21992: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21996: LD_VAR 0 1
22000: PPUSH
22001: LD_VAR 0 2
22005: PPUSH
22006: LD_VAR 0 3
22010: PPUSH
22011: CALL 57990 0 3
22015: NOT
22016: IFFALSE 22020
// exit ;
22018: GO 22274
// until GetDistUnitXY ( unit , x , y ) < dist ;
22020: LD_VAR 0 1
22024: PPUSH
22025: LD_VAR 0 2
22029: PPUSH
22030: LD_VAR 0 3
22034: PPUSH
22035: CALL_OW 297
22039: PUSH
22040: LD_VAR 0 5
22044: LESS
22045: IFFALSE 21989
// end ; ComTurnXY ( unit , x , y ) ;
22047: LD_VAR 0 1
22051: PPUSH
22052: LD_VAR 0 2
22056: PPUSH
22057: LD_VAR 0 3
22061: PPUSH
22062: CALL_OW 118
// wait ( 5 ) ;
22066: LD_INT 5
22068: PPUSH
22069: CALL_OW 67
// _d := GetDir ( unit ) ;
22073: LD_ADDR_VAR 0 10
22077: PUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 254
22087: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
22088: LD_ADDR_VAR 0 8
22092: PUSH
22093: LD_VAR 0 1
22097: PPUSH
22098: CALL_OW 250
22102: PPUSH
22103: LD_VAR 0 10
22107: PPUSH
22108: LD_VAR 0 5
22112: PPUSH
22113: CALL_OW 272
22117: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
22118: LD_ADDR_VAR 0 9
22122: PUSH
22123: LD_VAR 0 1
22127: PPUSH
22128: CALL_OW 251
22132: PPUSH
22133: LD_VAR 0 10
22137: PPUSH
22138: LD_VAR 0 5
22142: PPUSH
22143: CALL_OW 273
22147: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22148: LD_VAR 0 8
22152: PPUSH
22153: LD_VAR 0 9
22157: PPUSH
22158: CALL_OW 488
22162: NOT
22163: IFFALSE 22167
// exit ;
22165: GO 22274
// ComAnimCustom ( unit , 1 ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: LD_INT 1
22174: PPUSH
22175: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
22179: LD_VAR 0 8
22183: PPUSH
22184: LD_VAR 0 9
22188: PPUSH
22189: LD_VAR 0 6
22193: PPUSH
22194: LD_VAR 0 7
22198: PPUSH
22199: CALL_OW 330
// repeat wait ( 1 ) ;
22203: LD_INT 1
22205: PPUSH
22206: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: CALL_OW 316
22219: PUSH
22220: LD_VAR 0 1
22224: PPUSH
22225: CALL_OW 314
22229: OR
22230: PUSH
22231: LD_VAR 0 1
22235: PPUSH
22236: CALL_OW 302
22240: NOT
22241: OR
22242: PUSH
22243: LD_VAR 0 1
22247: PPUSH
22248: CALL_OW 301
22252: OR
22253: IFFALSE 22203
// RemoveSeeing ( _x , _y , side ) ;
22255: LD_VAR 0 8
22259: PPUSH
22260: LD_VAR 0 9
22264: PPUSH
22265: LD_VAR 0 6
22269: PPUSH
22270: CALL_OW 331
// end ; end_of_file
22274: LD_VAR 0 4
22278: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22279: LD_INT 0
22281: PPUSH
// ar_miner := 81 ;
22282: LD_ADDR_EXP 100
22286: PUSH
22287: LD_INT 81
22289: ST_TO_ADDR
// ar_crane := 88 ;
22290: LD_ADDR_EXP 99
22294: PUSH
22295: LD_INT 88
22297: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22298: LD_ADDR_EXP 94
22302: PUSH
22303: LD_INT 89
22305: ST_TO_ADDR
// us_hack := 99 ;
22306: LD_ADDR_EXP 95
22310: PUSH
22311: LD_INT 99
22313: ST_TO_ADDR
// us_artillery := 97 ;
22314: LD_ADDR_EXP 96
22318: PUSH
22319: LD_INT 97
22321: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22322: LD_ADDR_EXP 97
22326: PUSH
22327: LD_INT 91
22329: ST_TO_ADDR
// ar_mortar := 92 ;
22330: LD_ADDR_EXP 98
22334: PUSH
22335: LD_INT 92
22337: ST_TO_ADDR
// ru_radar := 98 ;
22338: LD_ADDR_EXP 93
22342: PUSH
22343: LD_INT 98
22345: ST_TO_ADDR
// tech_Artillery := 80 ;
22346: LD_ADDR_EXP 101
22350: PUSH
22351: LD_INT 80
22353: ST_TO_ADDR
// tech_RadMat := 81 ;
22354: LD_ADDR_EXP 102
22358: PUSH
22359: LD_INT 81
22361: ST_TO_ADDR
// tech_BasicTools := 82 ;
22362: LD_ADDR_EXP 103
22366: PUSH
22367: LD_INT 82
22369: ST_TO_ADDR
// tech_Cargo := 83 ;
22370: LD_ADDR_EXP 104
22374: PUSH
22375: LD_INT 83
22377: ST_TO_ADDR
// tech_Track := 84 ;
22378: LD_ADDR_EXP 105
22382: PUSH
22383: LD_INT 84
22385: ST_TO_ADDR
// tech_Crane := 85 ;
22386: LD_ADDR_EXP 106
22390: PUSH
22391: LD_INT 85
22393: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22394: LD_ADDR_EXP 107
22398: PUSH
22399: LD_INT 86
22401: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22402: LD_ADDR_EXP 108
22406: PUSH
22407: LD_INT 87
22409: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
22410: LD_ADDR_EXP 109
22414: PUSH
22415: LD_INT 88
22417: ST_TO_ADDR
// class_mastodont := 31 ;
22418: LD_ADDR_EXP 110
22422: PUSH
22423: LD_INT 31
22425: ST_TO_ADDR
// class_horse := 21 ;
22426: LD_ADDR_EXP 111
22430: PUSH
22431: LD_INT 21
22433: ST_TO_ADDR
// end ;
22434: LD_VAR 0 1
22438: RET
// every 1 do
22439: GO 22441
22441: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
22442: CALL 22279 0 0
22446: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22447: LD_INT 0
22449: PPUSH
22450: PPUSH
// if exist_mode then
22451: LD_VAR 0 2
22455: IFFALSE 22480
// unit := CreateCharacter ( prefix & ident ) else
22457: LD_ADDR_VAR 0 5
22461: PUSH
22462: LD_VAR 0 3
22466: PUSH
22467: LD_VAR 0 1
22471: STR
22472: PPUSH
22473: CALL_OW 34
22477: ST_TO_ADDR
22478: GO 22495
// unit := NewCharacter ( ident ) ;
22480: LD_ADDR_VAR 0 5
22484: PUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 25
22494: ST_TO_ADDR
// result := unit ;
22495: LD_ADDR_VAR 0 4
22499: PUSH
22500: LD_VAR 0 5
22504: ST_TO_ADDR
// end ;
22505: LD_VAR 0 4
22509: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22510: LD_INT 0
22512: PPUSH
22513: PPUSH
// if not side or not nation then
22514: LD_VAR 0 1
22518: NOT
22519: PUSH
22520: LD_VAR 0 2
22524: NOT
22525: OR
22526: IFFALSE 22530
// exit ;
22528: GO 23298
// case nation of nation_american :
22530: LD_VAR 0 2
22534: PUSH
22535: LD_INT 1
22537: DOUBLE
22538: EQUAL
22539: IFTRUE 22543
22541: GO 22757
22543: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22544: LD_ADDR_VAR 0 4
22548: PUSH
22549: LD_INT 35
22551: PUSH
22552: LD_INT 45
22554: PUSH
22555: LD_INT 46
22557: PUSH
22558: LD_INT 47
22560: PUSH
22561: LD_INT 82
22563: PUSH
22564: LD_INT 83
22566: PUSH
22567: LD_INT 84
22569: PUSH
22570: LD_INT 85
22572: PUSH
22573: LD_INT 86
22575: PUSH
22576: LD_INT 1
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 6
22584: PUSH
22585: LD_INT 15
22587: PUSH
22588: LD_INT 16
22590: PUSH
22591: LD_INT 7
22593: PUSH
22594: LD_INT 12
22596: PUSH
22597: LD_INT 13
22599: PUSH
22600: LD_INT 10
22602: PUSH
22603: LD_INT 14
22605: PUSH
22606: LD_INT 20
22608: PUSH
22609: LD_INT 21
22611: PUSH
22612: LD_INT 22
22614: PUSH
22615: LD_INT 25
22617: PUSH
22618: LD_INT 32
22620: PUSH
22621: LD_INT 27
22623: PUSH
22624: LD_INT 36
22626: PUSH
22627: LD_INT 69
22629: PUSH
22630: LD_INT 39
22632: PUSH
22633: LD_INT 34
22635: PUSH
22636: LD_INT 40
22638: PUSH
22639: LD_INT 48
22641: PUSH
22642: LD_INT 49
22644: PUSH
22645: LD_INT 50
22647: PUSH
22648: LD_INT 51
22650: PUSH
22651: LD_INT 52
22653: PUSH
22654: LD_INT 53
22656: PUSH
22657: LD_INT 54
22659: PUSH
22660: LD_INT 55
22662: PUSH
22663: LD_INT 56
22665: PUSH
22666: LD_INT 57
22668: PUSH
22669: LD_INT 58
22671: PUSH
22672: LD_INT 59
22674: PUSH
22675: LD_INT 60
22677: PUSH
22678: LD_INT 61
22680: PUSH
22681: LD_INT 62
22683: PUSH
22684: LD_INT 80
22686: PUSH
22687: LD_INT 82
22689: PUSH
22690: LD_INT 83
22692: PUSH
22693: LD_INT 84
22695: PUSH
22696: LD_INT 85
22698: PUSH
22699: LD_INT 86
22701: PUSH
22702: EMPTY
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: ST_TO_ADDR
22755: GO 23222
22757: LD_INT 2
22759: DOUBLE
22760: EQUAL
22761: IFTRUE 22765
22763: GO 22991
22765: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22766: LD_ADDR_VAR 0 4
22770: PUSH
22771: LD_INT 35
22773: PUSH
22774: LD_INT 45
22776: PUSH
22777: LD_INT 46
22779: PUSH
22780: LD_INT 47
22782: PUSH
22783: LD_INT 82
22785: PUSH
22786: LD_INT 83
22788: PUSH
22789: LD_INT 84
22791: PUSH
22792: LD_INT 85
22794: PUSH
22795: LD_INT 87
22797: PUSH
22798: LD_INT 70
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 11
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: LD_INT 6
22818: PUSH
22819: LD_INT 15
22821: PUSH
22822: LD_INT 18
22824: PUSH
22825: LD_INT 7
22827: PUSH
22828: LD_INT 17
22830: PUSH
22831: LD_INT 8
22833: PUSH
22834: LD_INT 20
22836: PUSH
22837: LD_INT 21
22839: PUSH
22840: LD_INT 22
22842: PUSH
22843: LD_INT 72
22845: PUSH
22846: LD_INT 26
22848: PUSH
22849: LD_INT 69
22851: PUSH
22852: LD_INT 39
22854: PUSH
22855: LD_INT 40
22857: PUSH
22858: LD_INT 41
22860: PUSH
22861: LD_INT 42
22863: PUSH
22864: LD_INT 43
22866: PUSH
22867: LD_INT 48
22869: PUSH
22870: LD_INT 49
22872: PUSH
22873: LD_INT 50
22875: PUSH
22876: LD_INT 51
22878: PUSH
22879: LD_INT 52
22881: PUSH
22882: LD_INT 53
22884: PUSH
22885: LD_INT 54
22887: PUSH
22888: LD_INT 55
22890: PUSH
22891: LD_INT 56
22893: PUSH
22894: LD_INT 60
22896: PUSH
22897: LD_INT 61
22899: PUSH
22900: LD_INT 62
22902: PUSH
22903: LD_INT 66
22905: PUSH
22906: LD_INT 67
22908: PUSH
22909: LD_INT 68
22911: PUSH
22912: LD_INT 81
22914: PUSH
22915: LD_INT 82
22917: PUSH
22918: LD_INT 83
22920: PUSH
22921: LD_INT 84
22923: PUSH
22924: LD_INT 85
22926: PUSH
22927: LD_INT 87
22929: PUSH
22930: LD_INT 88
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: ST_TO_ADDR
22989: GO 23222
22991: LD_INT 3
22993: DOUBLE
22994: EQUAL
22995: IFTRUE 22999
22997: GO 23221
22999: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23000: LD_ADDR_VAR 0 4
23004: PUSH
23005: LD_INT 46
23007: PUSH
23008: LD_INT 47
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 82
23019: PUSH
23020: LD_INT 83
23022: PUSH
23023: LD_INT 84
23025: PUSH
23026: LD_INT 85
23028: PUSH
23029: LD_INT 86
23031: PUSH
23032: LD_INT 11
23034: PUSH
23035: LD_INT 9
23037: PUSH
23038: LD_INT 20
23040: PUSH
23041: LD_INT 19
23043: PUSH
23044: LD_INT 21
23046: PUSH
23047: LD_INT 24
23049: PUSH
23050: LD_INT 22
23052: PUSH
23053: LD_INT 25
23055: PUSH
23056: LD_INT 28
23058: PUSH
23059: LD_INT 29
23061: PUSH
23062: LD_INT 30
23064: PUSH
23065: LD_INT 31
23067: PUSH
23068: LD_INT 37
23070: PUSH
23071: LD_INT 38
23073: PUSH
23074: LD_INT 32
23076: PUSH
23077: LD_INT 27
23079: PUSH
23080: LD_INT 33
23082: PUSH
23083: LD_INT 69
23085: PUSH
23086: LD_INT 39
23088: PUSH
23089: LD_INT 34
23091: PUSH
23092: LD_INT 40
23094: PUSH
23095: LD_INT 71
23097: PUSH
23098: LD_INT 23
23100: PUSH
23101: LD_INT 44
23103: PUSH
23104: LD_INT 48
23106: PUSH
23107: LD_INT 49
23109: PUSH
23110: LD_INT 50
23112: PUSH
23113: LD_INT 51
23115: PUSH
23116: LD_INT 52
23118: PUSH
23119: LD_INT 53
23121: PUSH
23122: LD_INT 54
23124: PUSH
23125: LD_INT 55
23127: PUSH
23128: LD_INT 56
23130: PUSH
23131: LD_INT 57
23133: PUSH
23134: LD_INT 58
23136: PUSH
23137: LD_INT 59
23139: PUSH
23140: LD_INT 63
23142: PUSH
23143: LD_INT 64
23145: PUSH
23146: LD_INT 65
23148: PUSH
23149: LD_INT 82
23151: PUSH
23152: LD_INT 83
23154: PUSH
23155: LD_INT 84
23157: PUSH
23158: LD_INT 85
23160: PUSH
23161: LD_INT 86
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: ST_TO_ADDR
23219: GO 23222
23221: POP
// if state > - 1 and state < 3 then
23222: LD_VAR 0 3
23226: PUSH
23227: LD_INT 1
23229: NEG
23230: GREATER
23231: PUSH
23232: LD_VAR 0 3
23236: PUSH
23237: LD_INT 3
23239: LESS
23240: AND
23241: IFFALSE 23298
// for i in result do
23243: LD_ADDR_VAR 0 5
23247: PUSH
23248: LD_VAR 0 4
23252: PUSH
23253: FOR_IN
23254: IFFALSE 23296
// if GetTech ( i , side ) <> state then
23256: LD_VAR 0 5
23260: PPUSH
23261: LD_VAR 0 1
23265: PPUSH
23266: CALL_OW 321
23270: PUSH
23271: LD_VAR 0 3
23275: NONEQUAL
23276: IFFALSE 23294
// result := result diff i ;
23278: LD_ADDR_VAR 0 4
23282: PUSH
23283: LD_VAR 0 4
23287: PUSH
23288: LD_VAR 0 5
23292: DIFF
23293: ST_TO_ADDR
23294: GO 23253
23296: POP
23297: POP
// end ;
23298: LD_VAR 0 4
23302: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23303: LD_INT 0
23305: PPUSH
23306: PPUSH
23307: PPUSH
// result := true ;
23308: LD_ADDR_VAR 0 3
23312: PUSH
23313: LD_INT 1
23315: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23316: LD_ADDR_VAR 0 5
23320: PUSH
23321: LD_VAR 0 2
23325: PPUSH
23326: CALL_OW 480
23330: ST_TO_ADDR
// if not tmp then
23331: LD_VAR 0 5
23335: NOT
23336: IFFALSE 23340
// exit ;
23338: GO 23389
// for i in tmp do
23340: LD_ADDR_VAR 0 4
23344: PUSH
23345: LD_VAR 0 5
23349: PUSH
23350: FOR_IN
23351: IFFALSE 23387
// if GetTech ( i , side ) <> state_researched then
23353: LD_VAR 0 4
23357: PPUSH
23358: LD_VAR 0 1
23362: PPUSH
23363: CALL_OW 321
23367: PUSH
23368: LD_INT 2
23370: NONEQUAL
23371: IFFALSE 23385
// begin result := false ;
23373: LD_ADDR_VAR 0 3
23377: PUSH
23378: LD_INT 0
23380: ST_TO_ADDR
// exit ;
23381: POP
23382: POP
23383: GO 23389
// end ;
23385: GO 23350
23387: POP
23388: POP
// end ;
23389: LD_VAR 0 3
23393: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23394: LD_INT 0
23396: PPUSH
23397: PPUSH
23398: PPUSH
23399: PPUSH
23400: PPUSH
23401: PPUSH
23402: PPUSH
23403: PPUSH
23404: PPUSH
23405: PPUSH
23406: PPUSH
23407: PPUSH
23408: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23409: LD_VAR 0 1
23413: NOT
23414: PUSH
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 257
23424: PUSH
23425: LD_INT 9
23427: NONEQUAL
23428: OR
23429: IFFALSE 23433
// exit ;
23431: GO 24006
// side := GetSide ( unit ) ;
23433: LD_ADDR_VAR 0 9
23437: PUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: CALL_OW 255
23447: ST_TO_ADDR
// tech_space := tech_spacanom ;
23448: LD_ADDR_VAR 0 12
23452: PUSH
23453: LD_INT 29
23455: ST_TO_ADDR
// tech_time := tech_taurad ;
23456: LD_ADDR_VAR 0 13
23460: PUSH
23461: LD_INT 28
23463: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23464: LD_ADDR_VAR 0 11
23468: PUSH
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 310
23478: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23479: LD_VAR 0 11
23483: PPUSH
23484: CALL_OW 247
23488: PUSH
23489: LD_INT 2
23491: EQUAL
23492: IFFALSE 23496
// exit ;
23494: GO 24006
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23496: LD_ADDR_VAR 0 8
23500: PUSH
23501: LD_INT 81
23503: PUSH
23504: LD_VAR 0 9
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 3
23515: PUSH
23516: LD_INT 21
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PPUSH
23534: CALL_OW 69
23538: ST_TO_ADDR
// if not tmp then
23539: LD_VAR 0 8
23543: NOT
23544: IFFALSE 23548
// exit ;
23546: GO 24006
// if in_unit then
23548: LD_VAR 0 11
23552: IFFALSE 23576
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23554: LD_ADDR_VAR 0 10
23558: PUSH
23559: LD_VAR 0 8
23563: PPUSH
23564: LD_VAR 0 11
23568: PPUSH
23569: CALL_OW 74
23573: ST_TO_ADDR
23574: GO 23596
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23576: LD_ADDR_VAR 0 10
23580: PUSH
23581: LD_VAR 0 8
23585: PPUSH
23586: LD_VAR 0 1
23590: PPUSH
23591: CALL_OW 74
23595: ST_TO_ADDR
// if not enemy then
23596: LD_VAR 0 10
23600: NOT
23601: IFFALSE 23605
// exit ;
23603: GO 24006
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23605: LD_VAR 0 11
23609: PUSH
23610: LD_VAR 0 11
23614: PPUSH
23615: LD_VAR 0 10
23619: PPUSH
23620: CALL_OW 296
23624: PUSH
23625: LD_INT 13
23627: GREATER
23628: AND
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: LD_VAR 0 10
23639: PPUSH
23640: CALL_OW 296
23644: PUSH
23645: LD_INT 12
23647: GREATER
23648: OR
23649: IFFALSE 23653
// exit ;
23651: GO 24006
// missile := [ 1 ] ;
23653: LD_ADDR_VAR 0 14
23657: PUSH
23658: LD_INT 1
23660: PUSH
23661: EMPTY
23662: LIST
23663: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23664: LD_VAR 0 9
23668: PPUSH
23669: LD_VAR 0 12
23673: PPUSH
23674: CALL_OW 325
23678: IFFALSE 23707
// missile := Insert ( missile , missile + 1 , 2 ) ;
23680: LD_ADDR_VAR 0 14
23684: PUSH
23685: LD_VAR 0 14
23689: PPUSH
23690: LD_VAR 0 14
23694: PUSH
23695: LD_INT 1
23697: PLUS
23698: PPUSH
23699: LD_INT 2
23701: PPUSH
23702: CALL_OW 2
23706: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23707: LD_VAR 0 9
23711: PPUSH
23712: LD_VAR 0 13
23716: PPUSH
23717: CALL_OW 325
23721: PUSH
23722: LD_VAR 0 10
23726: PPUSH
23727: CALL_OW 255
23731: PPUSH
23732: LD_VAR 0 13
23736: PPUSH
23737: CALL_OW 325
23741: NOT
23742: AND
23743: IFFALSE 23772
// missile := Insert ( missile , missile + 1 , 3 ) ;
23745: LD_ADDR_VAR 0 14
23749: PUSH
23750: LD_VAR 0 14
23754: PPUSH
23755: LD_VAR 0 14
23759: PUSH
23760: LD_INT 1
23762: PLUS
23763: PPUSH
23764: LD_INT 3
23766: PPUSH
23767: CALL_OW 2
23771: ST_TO_ADDR
// if missile < 2 then
23772: LD_VAR 0 14
23776: PUSH
23777: LD_INT 2
23779: LESS
23780: IFFALSE 23784
// exit ;
23782: GO 24006
// x := GetX ( enemy ) ;
23784: LD_ADDR_VAR 0 4
23788: PUSH
23789: LD_VAR 0 10
23793: PPUSH
23794: CALL_OW 250
23798: ST_TO_ADDR
// y := GetY ( enemy ) ;
23799: LD_ADDR_VAR 0 5
23803: PUSH
23804: LD_VAR 0 10
23808: PPUSH
23809: CALL_OW 251
23813: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_VAR 0 4
23823: PUSH
23824: LD_INT 1
23826: NEG
23827: PPUSH
23828: LD_INT 1
23830: PPUSH
23831: CALL_OW 12
23835: PLUS
23836: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23837: LD_ADDR_VAR 0 7
23841: PUSH
23842: LD_VAR 0 5
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PPUSH
23851: LD_INT 1
23853: PPUSH
23854: CALL_OW 12
23858: PLUS
23859: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23860: LD_VAR 0 6
23864: PPUSH
23865: LD_VAR 0 7
23869: PPUSH
23870: CALL_OW 488
23874: NOT
23875: IFFALSE 23897
// begin _x := x ;
23877: LD_ADDR_VAR 0 6
23881: PUSH
23882: LD_VAR 0 4
23886: ST_TO_ADDR
// _y := y ;
23887: LD_ADDR_VAR 0 7
23891: PUSH
23892: LD_VAR 0 5
23896: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23897: LD_ADDR_VAR 0 3
23901: PUSH
23902: LD_INT 1
23904: PPUSH
23905: LD_VAR 0 14
23909: PPUSH
23910: CALL_OW 12
23914: ST_TO_ADDR
// case i of 1 :
23915: LD_VAR 0 3
23919: PUSH
23920: LD_INT 1
23922: DOUBLE
23923: EQUAL
23924: IFTRUE 23928
23926: GO 23945
23928: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23929: LD_VAR 0 1
23933: PPUSH
23934: LD_VAR 0 10
23938: PPUSH
23939: CALL_OW 115
23943: GO 24006
23945: LD_INT 2
23947: DOUBLE
23948: EQUAL
23949: IFTRUE 23953
23951: GO 23975
23953: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23954: LD_VAR 0 1
23958: PPUSH
23959: LD_VAR 0 6
23963: PPUSH
23964: LD_VAR 0 7
23968: PPUSH
23969: CALL_OW 153
23973: GO 24006
23975: LD_INT 3
23977: DOUBLE
23978: EQUAL
23979: IFTRUE 23983
23981: GO 24005
23983: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23984: LD_VAR 0 1
23988: PPUSH
23989: LD_VAR 0 6
23993: PPUSH
23994: LD_VAR 0 7
23998: PPUSH
23999: CALL_OW 154
24003: GO 24006
24005: POP
// end ;
24006: LD_VAR 0 2
24010: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24011: LD_INT 0
24013: PPUSH
24014: PPUSH
24015: PPUSH
24016: PPUSH
24017: PPUSH
24018: PPUSH
// if not unit or not building then
24019: LD_VAR 0 1
24023: NOT
24024: PUSH
24025: LD_VAR 0 2
24029: NOT
24030: OR
24031: IFFALSE 24035
// exit ;
24033: GO 24193
// x := GetX ( building ) ;
24035: LD_ADDR_VAR 0 5
24039: PUSH
24040: LD_VAR 0 2
24044: PPUSH
24045: CALL_OW 250
24049: ST_TO_ADDR
// y := GetY ( building ) ;
24050: LD_ADDR_VAR 0 6
24054: PUSH
24055: LD_VAR 0 2
24059: PPUSH
24060: CALL_OW 251
24064: ST_TO_ADDR
// for i = 0 to 5 do
24065: LD_ADDR_VAR 0 4
24069: PUSH
24070: DOUBLE
24071: LD_INT 0
24073: DEC
24074: ST_TO_ADDR
24075: LD_INT 5
24077: PUSH
24078: FOR_TO
24079: IFFALSE 24191
// begin _x := ShiftX ( x , i , 3 ) ;
24081: LD_ADDR_VAR 0 7
24085: PUSH
24086: LD_VAR 0 5
24090: PPUSH
24091: LD_VAR 0 4
24095: PPUSH
24096: LD_INT 3
24098: PPUSH
24099: CALL_OW 272
24103: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24104: LD_ADDR_VAR 0 8
24108: PUSH
24109: LD_VAR 0 6
24113: PPUSH
24114: LD_VAR 0 4
24118: PPUSH
24119: LD_INT 3
24121: PPUSH
24122: CALL_OW 273
24126: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24127: LD_VAR 0 7
24131: PPUSH
24132: LD_VAR 0 8
24136: PPUSH
24137: CALL_OW 488
24141: NOT
24142: IFFALSE 24146
// continue ;
24144: GO 24078
// if HexInfo ( _x , _y ) = 0 then
24146: LD_VAR 0 7
24150: PPUSH
24151: LD_VAR 0 8
24155: PPUSH
24156: CALL_OW 428
24160: PUSH
24161: LD_INT 0
24163: EQUAL
24164: IFFALSE 24189
// begin ComMoveXY ( unit , _x , _y ) ;
24166: LD_VAR 0 1
24170: PPUSH
24171: LD_VAR 0 7
24175: PPUSH
24176: LD_VAR 0 8
24180: PPUSH
24181: CALL_OW 111
// exit ;
24185: POP
24186: POP
24187: GO 24193
// end ; end ;
24189: GO 24078
24191: POP
24192: POP
// end ;
24193: LD_VAR 0 3
24197: RET
// export function ScanBase ( side , base_area ) ; begin
24198: LD_INT 0
24200: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24201: LD_ADDR_VAR 0 3
24205: PUSH
24206: LD_VAR 0 2
24210: PPUSH
24211: LD_INT 81
24213: PUSH
24214: LD_VAR 0 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PPUSH
24223: CALL_OW 70
24227: ST_TO_ADDR
// end ;
24228: LD_VAR 0 3
24232: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24233: LD_INT 0
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
// result := false ;
24239: LD_ADDR_VAR 0 2
24243: PUSH
24244: LD_INT 0
24246: ST_TO_ADDR
// side := GetSide ( unit ) ;
24247: LD_ADDR_VAR 0 3
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 255
24261: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24262: LD_ADDR_VAR 0 4
24266: PUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: CALL_OW 248
24276: ST_TO_ADDR
// case nat of 1 :
24277: LD_VAR 0 4
24281: PUSH
24282: LD_INT 1
24284: DOUBLE
24285: EQUAL
24286: IFTRUE 24290
24288: GO 24301
24290: POP
// tech := tech_lassight ; 2 :
24291: LD_ADDR_VAR 0 5
24295: PUSH
24296: LD_INT 12
24298: ST_TO_ADDR
24299: GO 24340
24301: LD_INT 2
24303: DOUBLE
24304: EQUAL
24305: IFTRUE 24309
24307: GO 24320
24309: POP
// tech := tech_mortar ; 3 :
24310: LD_ADDR_VAR 0 5
24314: PUSH
24315: LD_INT 41
24317: ST_TO_ADDR
24318: GO 24340
24320: LD_INT 3
24322: DOUBLE
24323: EQUAL
24324: IFTRUE 24328
24326: GO 24339
24328: POP
// tech := tech_bazooka ; end ;
24329: LD_ADDR_VAR 0 5
24333: PUSH
24334: LD_INT 44
24336: ST_TO_ADDR
24337: GO 24340
24339: POP
// if Researched ( side , tech ) then
24340: LD_VAR 0 3
24344: PPUSH
24345: LD_VAR 0 5
24349: PPUSH
24350: CALL_OW 325
24354: IFFALSE 24381
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24356: LD_ADDR_VAR 0 2
24360: PUSH
24361: LD_INT 5
24363: PUSH
24364: LD_INT 8
24366: PUSH
24367: LD_INT 9
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: LIST
24374: PUSH
24375: LD_VAR 0 4
24379: ARRAY
24380: ST_TO_ADDR
// end ;
24381: LD_VAR 0 2
24385: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24386: LD_INT 0
24388: PPUSH
24389: PPUSH
24390: PPUSH
// if not mines then
24391: LD_VAR 0 2
24395: NOT
24396: IFFALSE 24400
// exit ;
24398: GO 24544
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24400: LD_ADDR_VAR 0 5
24404: PUSH
24405: LD_INT 81
24407: PUSH
24408: LD_VAR 0 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: PUSH
24420: LD_INT 21
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: PPUSH
24438: CALL_OW 69
24442: ST_TO_ADDR
// for i in mines do
24443: LD_ADDR_VAR 0 4
24447: PUSH
24448: LD_VAR 0 2
24452: PUSH
24453: FOR_IN
24454: IFFALSE 24542
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24456: LD_VAR 0 4
24460: PUSH
24461: LD_INT 1
24463: ARRAY
24464: PPUSH
24465: LD_VAR 0 4
24469: PUSH
24470: LD_INT 2
24472: ARRAY
24473: PPUSH
24474: CALL_OW 458
24478: NOT
24479: IFFALSE 24483
// continue ;
24481: GO 24453
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24483: LD_VAR 0 4
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PPUSH
24492: LD_VAR 0 4
24496: PUSH
24497: LD_INT 2
24499: ARRAY
24500: PPUSH
24501: CALL_OW 428
24505: PUSH
24506: LD_VAR 0 5
24510: IN
24511: IFFALSE 24540
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24513: LD_VAR 0 4
24517: PUSH
24518: LD_INT 1
24520: ARRAY
24521: PPUSH
24522: LD_VAR 0 4
24526: PUSH
24527: LD_INT 2
24529: ARRAY
24530: PPUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL_OW 456
// end ;
24540: GO 24453
24542: POP
24543: POP
// end ;
24544: LD_VAR 0 3
24548: RET
// export function Count ( array ) ; var i ; begin
24549: LD_INT 0
24551: PPUSH
24552: PPUSH
// result := 0 ;
24553: LD_ADDR_VAR 0 2
24557: PUSH
24558: LD_INT 0
24560: ST_TO_ADDR
// for i in array do
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: LD_VAR 0 1
24570: PUSH
24571: FOR_IN
24572: IFFALSE 24596
// if i then
24574: LD_VAR 0 3
24578: IFFALSE 24594
// result := result + 1 ;
24580: LD_ADDR_VAR 0 2
24584: PUSH
24585: LD_VAR 0 2
24589: PUSH
24590: LD_INT 1
24592: PLUS
24593: ST_TO_ADDR
24594: GO 24571
24596: POP
24597: POP
// end ;
24598: LD_VAR 0 2
24602: RET
// export function IsEmpty ( building ) ; begin
24603: LD_INT 0
24605: PPUSH
// if not building then
24606: LD_VAR 0 1
24610: NOT
24611: IFFALSE 24615
// exit ;
24613: GO 24658
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24615: LD_ADDR_VAR 0 2
24619: PUSH
24620: LD_VAR 0 1
24624: PUSH
24625: LD_INT 22
24627: PUSH
24628: LD_VAR 0 1
24632: PPUSH
24633: CALL_OW 255
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: PUSH
24642: LD_INT 58
24644: PUSH
24645: EMPTY
24646: LIST
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PPUSH
24652: CALL_OW 69
24656: IN
24657: ST_TO_ADDR
// end ;
24658: LD_VAR 0 2
24662: RET
// export function IsNotFull ( building ) ; begin
24663: LD_INT 0
24665: PPUSH
// if not building then
24666: LD_VAR 0 1
24670: NOT
24671: IFFALSE 24675
// exit ;
24673: GO 24694
// result := UnitsInside ( building ) < 6 ;
24675: LD_ADDR_VAR 0 2
24679: PUSH
24680: LD_VAR 0 1
24684: PPUSH
24685: CALL_OW 313
24689: PUSH
24690: LD_INT 6
24692: LESS
24693: ST_TO_ADDR
// end ;
24694: LD_VAR 0 2
24698: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24699: LD_INT 0
24701: PPUSH
24702: PPUSH
24703: PPUSH
24704: PPUSH
// tmp := [ ] ;
24705: LD_ADDR_VAR 0 3
24709: PUSH
24710: EMPTY
24711: ST_TO_ADDR
// list := [ ] ;
24712: LD_ADDR_VAR 0 5
24716: PUSH
24717: EMPTY
24718: ST_TO_ADDR
// for i = 16 to 25 do
24719: LD_ADDR_VAR 0 4
24723: PUSH
24724: DOUBLE
24725: LD_INT 16
24727: DEC
24728: ST_TO_ADDR
24729: LD_INT 25
24731: PUSH
24732: FOR_TO
24733: IFFALSE 24806
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24735: LD_ADDR_VAR 0 3
24739: PUSH
24740: LD_VAR 0 3
24744: PUSH
24745: LD_INT 22
24747: PUSH
24748: LD_VAR 0 1
24752: PPUSH
24753: CALL_OW 255
24757: PUSH
24758: EMPTY
24759: LIST
24760: LIST
24761: PUSH
24762: LD_INT 91
24764: PUSH
24765: LD_VAR 0 1
24769: PUSH
24770: LD_INT 6
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: LIST
24777: PUSH
24778: LD_INT 30
24780: PUSH
24781: LD_VAR 0 4
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: LIST
24794: PUSH
24795: EMPTY
24796: LIST
24797: PPUSH
24798: CALL_OW 69
24802: ADD
24803: ST_TO_ADDR
24804: GO 24732
24806: POP
24807: POP
// for i = 1 to tmp do
24808: LD_ADDR_VAR 0 4
24812: PUSH
24813: DOUBLE
24814: LD_INT 1
24816: DEC
24817: ST_TO_ADDR
24818: LD_VAR 0 3
24822: PUSH
24823: FOR_TO
24824: IFFALSE 24912
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24826: LD_ADDR_VAR 0 5
24830: PUSH
24831: LD_VAR 0 5
24835: PUSH
24836: LD_VAR 0 3
24840: PUSH
24841: LD_VAR 0 4
24845: ARRAY
24846: PPUSH
24847: CALL_OW 266
24851: PUSH
24852: LD_VAR 0 3
24856: PUSH
24857: LD_VAR 0 4
24861: ARRAY
24862: PPUSH
24863: CALL_OW 250
24867: PUSH
24868: LD_VAR 0 3
24872: PUSH
24873: LD_VAR 0 4
24877: ARRAY
24878: PPUSH
24879: CALL_OW 251
24883: PUSH
24884: LD_VAR 0 3
24888: PUSH
24889: LD_VAR 0 4
24893: ARRAY
24894: PPUSH
24895: CALL_OW 254
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: PUSH
24906: EMPTY
24907: LIST
24908: ADD
24909: ST_TO_ADDR
24910: GO 24823
24912: POP
24913: POP
// result := list ;
24914: LD_ADDR_VAR 0 2
24918: PUSH
24919: LD_VAR 0 5
24923: ST_TO_ADDR
// end ;
24924: LD_VAR 0 2
24928: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24929: LD_INT 0
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
24937: PPUSH
// if not factory then
24938: LD_VAR 0 1
24942: NOT
24943: IFFALSE 24947
// exit ;
24945: GO 25540
// if control = control_apeman then
24947: LD_VAR 0 4
24951: PUSH
24952: LD_INT 5
24954: EQUAL
24955: IFFALSE 25064
// begin tmp := UnitsInside ( factory ) ;
24957: LD_ADDR_VAR 0 8
24961: PUSH
24962: LD_VAR 0 1
24966: PPUSH
24967: CALL_OW 313
24971: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24972: LD_VAR 0 8
24976: PPUSH
24977: LD_INT 25
24979: PUSH
24980: LD_INT 12
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PPUSH
24987: CALL_OW 72
24991: NOT
24992: IFFALSE 25002
// control := control_manual ;
24994: LD_ADDR_VAR 0 4
24998: PUSH
24999: LD_INT 1
25001: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25002: LD_ADDR_VAR 0 8
25006: PUSH
25007: LD_VAR 0 1
25011: PPUSH
25012: CALL 24699 0 1
25016: ST_TO_ADDR
// if tmp then
25017: LD_VAR 0 8
25021: IFFALSE 25064
// begin for i in tmp do
25023: LD_ADDR_VAR 0 7
25027: PUSH
25028: LD_VAR 0 8
25032: PUSH
25033: FOR_IN
25034: IFFALSE 25062
// if i [ 1 ] = b_ext_radio then
25036: LD_VAR 0 7
25040: PUSH
25041: LD_INT 1
25043: ARRAY
25044: PUSH
25045: LD_INT 22
25047: EQUAL
25048: IFFALSE 25060
// begin control := control_remote ;
25050: LD_ADDR_VAR 0 4
25054: PUSH
25055: LD_INT 2
25057: ST_TO_ADDR
// break ;
25058: GO 25062
// end ;
25060: GO 25033
25062: POP
25063: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25064: LD_VAR 0 1
25068: PPUSH
25069: LD_VAR 0 2
25073: PPUSH
25074: LD_VAR 0 3
25078: PPUSH
25079: LD_VAR 0 4
25083: PPUSH
25084: LD_VAR 0 5
25088: PPUSH
25089: CALL_OW 448
25093: IFFALSE 25128
// begin result := [ chassis , engine , control , weapon ] ;
25095: LD_ADDR_VAR 0 6
25099: PUSH
25100: LD_VAR 0 2
25104: PUSH
25105: LD_VAR 0 3
25109: PUSH
25110: LD_VAR 0 4
25114: PUSH
25115: LD_VAR 0 5
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: ST_TO_ADDR
// exit ;
25126: GO 25540
// end ; _chassis := AvailableChassisList ( factory ) ;
25128: LD_ADDR_VAR 0 9
25132: PUSH
25133: LD_VAR 0 1
25137: PPUSH
25138: CALL_OW 475
25142: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25143: LD_ADDR_VAR 0 11
25147: PUSH
25148: LD_VAR 0 1
25152: PPUSH
25153: CALL_OW 476
25157: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25158: LD_ADDR_VAR 0 12
25162: PUSH
25163: LD_VAR 0 1
25167: PPUSH
25168: CALL_OW 477
25172: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25173: LD_ADDR_VAR 0 10
25177: PUSH
25178: LD_VAR 0 1
25182: PPUSH
25183: CALL_OW 478
25187: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25188: LD_VAR 0 9
25192: NOT
25193: PUSH
25194: LD_VAR 0 11
25198: NOT
25199: OR
25200: PUSH
25201: LD_VAR 0 12
25205: NOT
25206: OR
25207: PUSH
25208: LD_VAR 0 10
25212: NOT
25213: OR
25214: IFFALSE 25249
// begin result := [ chassis , engine , control , weapon ] ;
25216: LD_ADDR_VAR 0 6
25220: PUSH
25221: LD_VAR 0 2
25225: PUSH
25226: LD_VAR 0 3
25230: PUSH
25231: LD_VAR 0 4
25235: PUSH
25236: LD_VAR 0 5
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: ST_TO_ADDR
// exit ;
25247: GO 25540
// end ; if not chassis in _chassis then
25249: LD_VAR 0 2
25253: PUSH
25254: LD_VAR 0 9
25258: IN
25259: NOT
25260: IFFALSE 25286
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25262: LD_ADDR_VAR 0 2
25266: PUSH
25267: LD_VAR 0 9
25271: PUSH
25272: LD_INT 1
25274: PPUSH
25275: LD_VAR 0 9
25279: PPUSH
25280: CALL_OW 12
25284: ARRAY
25285: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25286: LD_VAR 0 2
25290: PPUSH
25291: LD_VAR 0 3
25295: PPUSH
25296: CALL 25545 0 2
25300: NOT
25301: IFFALSE 25360
// repeat engine := _engine [ 1 ] ;
25303: LD_ADDR_VAR 0 3
25307: PUSH
25308: LD_VAR 0 11
25312: PUSH
25313: LD_INT 1
25315: ARRAY
25316: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25317: LD_ADDR_VAR 0 11
25321: PUSH
25322: LD_VAR 0 11
25326: PPUSH
25327: LD_INT 1
25329: PPUSH
25330: CALL_OW 3
25334: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25335: LD_VAR 0 2
25339: PPUSH
25340: LD_VAR 0 3
25344: PPUSH
25345: CALL 25545 0 2
25349: PUSH
25350: LD_VAR 0 11
25354: PUSH
25355: EMPTY
25356: EQUAL
25357: OR
25358: IFFALSE 25303
// if not control in _control then
25360: LD_VAR 0 4
25364: PUSH
25365: LD_VAR 0 12
25369: IN
25370: NOT
25371: IFFALSE 25397
// control := _control [ rand ( 1 , _control ) ] ;
25373: LD_ADDR_VAR 0 4
25377: PUSH
25378: LD_VAR 0 12
25382: PUSH
25383: LD_INT 1
25385: PPUSH
25386: LD_VAR 0 12
25390: PPUSH
25391: CALL_OW 12
25395: ARRAY
25396: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25397: LD_VAR 0 2
25401: PPUSH
25402: LD_VAR 0 5
25406: PPUSH
25407: CALL 25765 0 2
25411: NOT
25412: IFFALSE 25471
// repeat weapon := _weapon [ 1 ] ;
25414: LD_ADDR_VAR 0 5
25418: PUSH
25419: LD_VAR 0 10
25423: PUSH
25424: LD_INT 1
25426: ARRAY
25427: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25428: LD_ADDR_VAR 0 10
25432: PUSH
25433: LD_VAR 0 10
25437: PPUSH
25438: LD_INT 1
25440: PPUSH
25441: CALL_OW 3
25445: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25446: LD_VAR 0 2
25450: PPUSH
25451: LD_VAR 0 5
25455: PPUSH
25456: CALL 25765 0 2
25460: PUSH
25461: LD_VAR 0 10
25465: PUSH
25466: EMPTY
25467: EQUAL
25468: OR
25469: IFFALSE 25414
// result := [ ] ;
25471: LD_ADDR_VAR 0 6
25475: PUSH
25476: EMPTY
25477: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25478: LD_VAR 0 1
25482: PPUSH
25483: LD_VAR 0 2
25487: PPUSH
25488: LD_VAR 0 3
25492: PPUSH
25493: LD_VAR 0 4
25497: PPUSH
25498: LD_VAR 0 5
25502: PPUSH
25503: CALL_OW 448
25507: IFFALSE 25540
// result := [ chassis , engine , control , weapon ] ;
25509: LD_ADDR_VAR 0 6
25513: PUSH
25514: LD_VAR 0 2
25518: PUSH
25519: LD_VAR 0 3
25523: PUSH
25524: LD_VAR 0 4
25528: PUSH
25529: LD_VAR 0 5
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: LIST
25538: LIST
25539: ST_TO_ADDR
// end ;
25540: LD_VAR 0 6
25544: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25545: LD_INT 0
25547: PPUSH
// if not chassis or not engine then
25548: LD_VAR 0 1
25552: NOT
25553: PUSH
25554: LD_VAR 0 2
25558: NOT
25559: OR
25560: IFFALSE 25564
// exit ;
25562: GO 25760
// case engine of engine_solar :
25564: LD_VAR 0 2
25568: PUSH
25569: LD_INT 2
25571: DOUBLE
25572: EQUAL
25573: IFTRUE 25577
25575: GO 25615
25577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25578: LD_ADDR_VAR 0 3
25582: PUSH
25583: LD_INT 11
25585: PUSH
25586: LD_INT 12
25588: PUSH
25589: LD_INT 13
25591: PUSH
25592: LD_INT 14
25594: PUSH
25595: LD_INT 1
25597: PUSH
25598: LD_INT 2
25600: PUSH
25601: LD_INT 3
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: ST_TO_ADDR
25613: GO 25744
25615: LD_INT 1
25617: DOUBLE
25618: EQUAL
25619: IFTRUE 25623
25621: GO 25685
25623: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25624: LD_ADDR_VAR 0 3
25628: PUSH
25629: LD_INT 11
25631: PUSH
25632: LD_INT 12
25634: PUSH
25635: LD_INT 13
25637: PUSH
25638: LD_INT 14
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 2
25646: PUSH
25647: LD_INT 3
25649: PUSH
25650: LD_INT 4
25652: PUSH
25653: LD_INT 5
25655: PUSH
25656: LD_INT 21
25658: PUSH
25659: LD_INT 23
25661: PUSH
25662: LD_INT 22
25664: PUSH
25665: LD_INT 24
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: ST_TO_ADDR
25683: GO 25744
25685: LD_INT 3
25687: DOUBLE
25688: EQUAL
25689: IFTRUE 25693
25691: GO 25743
25693: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25694: LD_ADDR_VAR 0 3
25698: PUSH
25699: LD_INT 13
25701: PUSH
25702: LD_INT 14
25704: PUSH
25705: LD_INT 2
25707: PUSH
25708: LD_INT 3
25710: PUSH
25711: LD_INT 4
25713: PUSH
25714: LD_INT 5
25716: PUSH
25717: LD_INT 21
25719: PUSH
25720: LD_INT 22
25722: PUSH
25723: LD_INT 23
25725: PUSH
25726: LD_INT 24
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: ST_TO_ADDR
25741: GO 25744
25743: POP
// result := ( chassis in result ) ;
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_VAR 0 1
25753: PUSH
25754: LD_VAR 0 3
25758: IN
25759: ST_TO_ADDR
// end ;
25760: LD_VAR 0 3
25764: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25765: LD_INT 0
25767: PPUSH
// if not chassis or not weapon then
25768: LD_VAR 0 1
25772: NOT
25773: PUSH
25774: LD_VAR 0 2
25778: NOT
25779: OR
25780: IFFALSE 25784
// exit ;
25782: GO 26846
// case weapon of us_machine_gun :
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 2
25791: DOUBLE
25792: EQUAL
25793: IFTRUE 25797
25795: GO 25827
25797: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25798: LD_ADDR_VAR 0 3
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: LD_INT 3
25811: PUSH
25812: LD_INT 4
25814: PUSH
25815: LD_INT 5
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: ST_TO_ADDR
25825: GO 26830
25827: LD_INT 3
25829: DOUBLE
25830: EQUAL
25831: IFTRUE 25835
25833: GO 25865
25835: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25836: LD_ADDR_VAR 0 3
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 2
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: LD_INT 4
25852: PUSH
25853: LD_INT 5
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: ST_TO_ADDR
25863: GO 26830
25865: LD_INT 11
25867: DOUBLE
25868: EQUAL
25869: IFTRUE 25873
25871: GO 25903
25873: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25874: LD_ADDR_VAR 0 3
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: LD_INT 2
25884: PUSH
25885: LD_INT 3
25887: PUSH
25888: LD_INT 4
25890: PUSH
25891: LD_INT 5
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: ST_TO_ADDR
25901: GO 26830
25903: LD_INT 4
25905: DOUBLE
25906: EQUAL
25907: IFTRUE 25911
25909: GO 25937
25911: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25912: LD_ADDR_VAR 0 3
25916: PUSH
25917: LD_INT 2
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 4
25925: PUSH
25926: LD_INT 5
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: ST_TO_ADDR
25935: GO 26830
25937: LD_INT 5
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25971
25945: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25946: LD_ADDR_VAR 0 3
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: LD_INT 3
25956: PUSH
25957: LD_INT 4
25959: PUSH
25960: LD_INT 5
25962: PUSH
25963: EMPTY
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: ST_TO_ADDR
25969: GO 26830
25971: LD_INT 9
25973: DOUBLE
25974: EQUAL
25975: IFTRUE 25979
25977: GO 26005
25979: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25980: LD_ADDR_VAR 0 3
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 3
25990: PUSH
25991: LD_INT 4
25993: PUSH
25994: LD_INT 5
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: ST_TO_ADDR
26003: GO 26830
26005: LD_INT 7
26007: DOUBLE
26008: EQUAL
26009: IFTRUE 26013
26011: GO 26039
26013: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26014: LD_ADDR_VAR 0 3
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 3
26024: PUSH
26025: LD_INT 4
26027: PUSH
26028: LD_INT 5
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: LIST
26035: LIST
26036: ST_TO_ADDR
26037: GO 26830
26039: LD_INT 12
26041: DOUBLE
26042: EQUAL
26043: IFTRUE 26047
26045: GO 26073
26047: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26048: LD_ADDR_VAR 0 3
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: LD_INT 4
26061: PUSH
26062: LD_INT 5
26064: PUSH
26065: EMPTY
26066: LIST
26067: LIST
26068: LIST
26069: LIST
26070: ST_TO_ADDR
26071: GO 26830
26073: LD_INT 13
26075: DOUBLE
26076: EQUAL
26077: IFTRUE 26081
26079: GO 26107
26081: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26082: LD_ADDR_VAR 0 3
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: LD_INT 4
26095: PUSH
26096: LD_INT 5
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: ST_TO_ADDR
26105: GO 26830
26107: LD_INT 14
26109: DOUBLE
26110: EQUAL
26111: IFTRUE 26115
26113: GO 26133
26115: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26116: LD_ADDR_VAR 0 3
26120: PUSH
26121: LD_INT 4
26123: PUSH
26124: LD_INT 5
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: ST_TO_ADDR
26131: GO 26830
26133: LD_INT 6
26135: DOUBLE
26136: EQUAL
26137: IFTRUE 26141
26139: GO 26159
26141: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26142: LD_ADDR_VAR 0 3
26146: PUSH
26147: LD_INT 4
26149: PUSH
26150: LD_INT 5
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: ST_TO_ADDR
26157: GO 26830
26159: LD_INT 10
26161: DOUBLE
26162: EQUAL
26163: IFTRUE 26167
26165: GO 26185
26167: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26168: LD_ADDR_VAR 0 3
26172: PUSH
26173: LD_INT 4
26175: PUSH
26176: LD_INT 5
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: ST_TO_ADDR
26183: GO 26830
26185: LD_INT 22
26187: DOUBLE
26188: EQUAL
26189: IFTRUE 26193
26191: GO 26219
26193: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26194: LD_ADDR_VAR 0 3
26198: PUSH
26199: LD_INT 11
26201: PUSH
26202: LD_INT 12
26204: PUSH
26205: LD_INT 13
26207: PUSH
26208: LD_INT 14
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: ST_TO_ADDR
26217: GO 26830
26219: LD_INT 23
26221: DOUBLE
26222: EQUAL
26223: IFTRUE 26227
26225: GO 26253
26227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26228: LD_ADDR_VAR 0 3
26232: PUSH
26233: LD_INT 11
26235: PUSH
26236: LD_INT 12
26238: PUSH
26239: LD_INT 13
26241: PUSH
26242: LD_INT 14
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: ST_TO_ADDR
26251: GO 26830
26253: LD_INT 24
26255: DOUBLE
26256: EQUAL
26257: IFTRUE 26261
26259: GO 26287
26261: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26262: LD_ADDR_VAR 0 3
26266: PUSH
26267: LD_INT 11
26269: PUSH
26270: LD_INT 12
26272: PUSH
26273: LD_INT 13
26275: PUSH
26276: LD_INT 14
26278: PUSH
26279: EMPTY
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
26285: GO 26830
26287: LD_INT 30
26289: DOUBLE
26290: EQUAL
26291: IFTRUE 26295
26293: GO 26321
26295: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26296: LD_ADDR_VAR 0 3
26300: PUSH
26301: LD_INT 11
26303: PUSH
26304: LD_INT 12
26306: PUSH
26307: LD_INT 13
26309: PUSH
26310: LD_INT 14
26312: PUSH
26313: EMPTY
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: ST_TO_ADDR
26319: GO 26830
26321: LD_INT 25
26323: DOUBLE
26324: EQUAL
26325: IFTRUE 26329
26327: GO 26347
26329: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26330: LD_ADDR_VAR 0 3
26334: PUSH
26335: LD_INT 13
26337: PUSH
26338: LD_INT 14
26340: PUSH
26341: EMPTY
26342: LIST
26343: LIST
26344: ST_TO_ADDR
26345: GO 26830
26347: LD_INT 27
26349: DOUBLE
26350: EQUAL
26351: IFTRUE 26355
26353: GO 26373
26355: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26356: LD_ADDR_VAR 0 3
26360: PUSH
26361: LD_INT 13
26363: PUSH
26364: LD_INT 14
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: ST_TO_ADDR
26371: GO 26830
26373: LD_EXP 98
26377: DOUBLE
26378: EQUAL
26379: IFTRUE 26383
26381: GO 26409
26383: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26384: LD_ADDR_VAR 0 3
26388: PUSH
26389: LD_INT 11
26391: PUSH
26392: LD_INT 12
26394: PUSH
26395: LD_INT 13
26397: PUSH
26398: LD_INT 14
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: ST_TO_ADDR
26407: GO 26830
26409: LD_INT 28
26411: DOUBLE
26412: EQUAL
26413: IFTRUE 26417
26415: GO 26435
26417: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26418: LD_ADDR_VAR 0 3
26422: PUSH
26423: LD_INT 13
26425: PUSH
26426: LD_INT 14
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: ST_TO_ADDR
26433: GO 26830
26435: LD_INT 29
26437: DOUBLE
26438: EQUAL
26439: IFTRUE 26443
26441: GO 26461
26443: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26444: LD_ADDR_VAR 0 3
26448: PUSH
26449: LD_INT 13
26451: PUSH
26452: LD_INT 14
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: ST_TO_ADDR
26459: GO 26830
26461: LD_INT 31
26463: DOUBLE
26464: EQUAL
26465: IFTRUE 26469
26467: GO 26487
26469: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26470: LD_ADDR_VAR 0 3
26474: PUSH
26475: LD_INT 13
26477: PUSH
26478: LD_INT 14
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: ST_TO_ADDR
26485: GO 26830
26487: LD_INT 26
26489: DOUBLE
26490: EQUAL
26491: IFTRUE 26495
26493: GO 26513
26495: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26496: LD_ADDR_VAR 0 3
26500: PUSH
26501: LD_INT 13
26503: PUSH
26504: LD_INT 14
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: ST_TO_ADDR
26511: GO 26830
26513: LD_INT 42
26515: DOUBLE
26516: EQUAL
26517: IFTRUE 26521
26519: GO 26547
26521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26522: LD_ADDR_VAR 0 3
26526: PUSH
26527: LD_INT 21
26529: PUSH
26530: LD_INT 22
26532: PUSH
26533: LD_INT 23
26535: PUSH
26536: LD_INT 24
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: ST_TO_ADDR
26545: GO 26830
26547: LD_INT 43
26549: DOUBLE
26550: EQUAL
26551: IFTRUE 26555
26553: GO 26581
26555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26556: LD_ADDR_VAR 0 3
26560: PUSH
26561: LD_INT 21
26563: PUSH
26564: LD_INT 22
26566: PUSH
26567: LD_INT 23
26569: PUSH
26570: LD_INT 24
26572: PUSH
26573: EMPTY
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: ST_TO_ADDR
26579: GO 26830
26581: LD_INT 44
26583: DOUBLE
26584: EQUAL
26585: IFTRUE 26589
26587: GO 26615
26589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26590: LD_ADDR_VAR 0 3
26594: PUSH
26595: LD_INT 21
26597: PUSH
26598: LD_INT 22
26600: PUSH
26601: LD_INT 23
26603: PUSH
26604: LD_INT 24
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: ST_TO_ADDR
26613: GO 26830
26615: LD_INT 45
26617: DOUBLE
26618: EQUAL
26619: IFTRUE 26623
26621: GO 26649
26623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 22
26634: PUSH
26635: LD_INT 23
26637: PUSH
26638: LD_INT 24
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: ST_TO_ADDR
26647: GO 26830
26649: LD_INT 49
26651: DOUBLE
26652: EQUAL
26653: IFTRUE 26657
26655: GO 26683
26657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26658: LD_ADDR_VAR 0 3
26662: PUSH
26663: LD_INT 21
26665: PUSH
26666: LD_INT 22
26668: PUSH
26669: LD_INT 23
26671: PUSH
26672: LD_INT 24
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
26681: GO 26830
26683: LD_INT 51
26685: DOUBLE
26686: EQUAL
26687: IFTRUE 26691
26689: GO 26717
26691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26692: LD_ADDR_VAR 0 3
26696: PUSH
26697: LD_INT 21
26699: PUSH
26700: LD_INT 22
26702: PUSH
26703: LD_INT 23
26705: PUSH
26706: LD_INT 24
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: ST_TO_ADDR
26715: GO 26830
26717: LD_INT 52
26719: DOUBLE
26720: EQUAL
26721: IFTRUE 26725
26723: GO 26751
26725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26726: LD_ADDR_VAR 0 3
26730: PUSH
26731: LD_INT 21
26733: PUSH
26734: LD_INT 22
26736: PUSH
26737: LD_INT 23
26739: PUSH
26740: LD_INT 24
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: ST_TO_ADDR
26749: GO 26830
26751: LD_INT 53
26753: DOUBLE
26754: EQUAL
26755: IFTRUE 26759
26757: GO 26777
26759: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26760: LD_ADDR_VAR 0 3
26764: PUSH
26765: LD_INT 23
26767: PUSH
26768: LD_INT 24
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: ST_TO_ADDR
26775: GO 26830
26777: LD_INT 46
26779: DOUBLE
26780: EQUAL
26781: IFTRUE 26785
26783: GO 26803
26785: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_INT 23
26793: PUSH
26794: LD_INT 24
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: ST_TO_ADDR
26801: GO 26830
26803: LD_INT 47
26805: DOUBLE
26806: EQUAL
26807: IFTRUE 26811
26809: GO 26829
26811: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26812: LD_ADDR_VAR 0 3
26816: PUSH
26817: LD_INT 23
26819: PUSH
26820: LD_INT 24
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: ST_TO_ADDR
26827: GO 26830
26829: POP
// result := ( chassis in result ) ;
26830: LD_ADDR_VAR 0 3
26834: PUSH
26835: LD_VAR 0 1
26839: PUSH
26840: LD_VAR 0 3
26844: IN
26845: ST_TO_ADDR
// end ;
26846: LD_VAR 0 3
26850: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26851: LD_INT 0
26853: PPUSH
26854: PPUSH
26855: PPUSH
26856: PPUSH
26857: PPUSH
26858: PPUSH
26859: PPUSH
// result := array ;
26860: LD_ADDR_VAR 0 5
26864: PUSH
26865: LD_VAR 0 1
26869: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26870: LD_VAR 0 1
26874: NOT
26875: PUSH
26876: LD_VAR 0 2
26880: NOT
26881: OR
26882: PUSH
26883: LD_VAR 0 3
26887: NOT
26888: OR
26889: PUSH
26890: LD_VAR 0 2
26894: PUSH
26895: LD_VAR 0 1
26899: GREATER
26900: OR
26901: PUSH
26902: LD_VAR 0 3
26906: PUSH
26907: LD_VAR 0 1
26911: GREATER
26912: OR
26913: IFFALSE 26917
// exit ;
26915: GO 27213
// if direction then
26917: LD_VAR 0 4
26921: IFFALSE 26985
// begin d := 1 ;
26923: LD_ADDR_VAR 0 9
26927: PUSH
26928: LD_INT 1
26930: ST_TO_ADDR
// if i_from > i_to then
26931: LD_VAR 0 2
26935: PUSH
26936: LD_VAR 0 3
26940: GREATER
26941: IFFALSE 26967
// length := ( array - i_from ) + i_to else
26943: LD_ADDR_VAR 0 11
26947: PUSH
26948: LD_VAR 0 1
26952: PUSH
26953: LD_VAR 0 2
26957: MINUS
26958: PUSH
26959: LD_VAR 0 3
26963: PLUS
26964: ST_TO_ADDR
26965: GO 26983
// length := i_to - i_from ;
26967: LD_ADDR_VAR 0 11
26971: PUSH
26972: LD_VAR 0 3
26976: PUSH
26977: LD_VAR 0 2
26981: MINUS
26982: ST_TO_ADDR
// end else
26983: GO 27046
// begin d := - 1 ;
26985: LD_ADDR_VAR 0 9
26989: PUSH
26990: LD_INT 1
26992: NEG
26993: ST_TO_ADDR
// if i_from > i_to then
26994: LD_VAR 0 2
26998: PUSH
26999: LD_VAR 0 3
27003: GREATER
27004: IFFALSE 27024
// length := i_from - i_to else
27006: LD_ADDR_VAR 0 11
27010: PUSH
27011: LD_VAR 0 2
27015: PUSH
27016: LD_VAR 0 3
27020: MINUS
27021: ST_TO_ADDR
27022: GO 27046
// length := ( array - i_to ) + i_from ;
27024: LD_ADDR_VAR 0 11
27028: PUSH
27029: LD_VAR 0 1
27033: PUSH
27034: LD_VAR 0 3
27038: MINUS
27039: PUSH
27040: LD_VAR 0 2
27044: PLUS
27045: ST_TO_ADDR
// end ; if not length then
27046: LD_VAR 0 11
27050: NOT
27051: IFFALSE 27055
// exit ;
27053: GO 27213
// tmp := array ;
27055: LD_ADDR_VAR 0 10
27059: PUSH
27060: LD_VAR 0 1
27064: ST_TO_ADDR
// for i = 1 to length do
27065: LD_ADDR_VAR 0 6
27069: PUSH
27070: DOUBLE
27071: LD_INT 1
27073: DEC
27074: ST_TO_ADDR
27075: LD_VAR 0 11
27079: PUSH
27080: FOR_TO
27081: IFFALSE 27201
// begin for j = 1 to array do
27083: LD_ADDR_VAR 0 7
27087: PUSH
27088: DOUBLE
27089: LD_INT 1
27091: DEC
27092: ST_TO_ADDR
27093: LD_VAR 0 1
27097: PUSH
27098: FOR_TO
27099: IFFALSE 27187
// begin k := j + d ;
27101: LD_ADDR_VAR 0 8
27105: PUSH
27106: LD_VAR 0 7
27110: PUSH
27111: LD_VAR 0 9
27115: PLUS
27116: ST_TO_ADDR
// if k > array then
27117: LD_VAR 0 8
27121: PUSH
27122: LD_VAR 0 1
27126: GREATER
27127: IFFALSE 27137
// k := 1 ;
27129: LD_ADDR_VAR 0 8
27133: PUSH
27134: LD_INT 1
27136: ST_TO_ADDR
// if not k then
27137: LD_VAR 0 8
27141: NOT
27142: IFFALSE 27154
// k := array ;
27144: LD_ADDR_VAR 0 8
27148: PUSH
27149: LD_VAR 0 1
27153: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27154: LD_ADDR_VAR 0 10
27158: PUSH
27159: LD_VAR 0 10
27163: PPUSH
27164: LD_VAR 0 8
27168: PPUSH
27169: LD_VAR 0 1
27173: PUSH
27174: LD_VAR 0 7
27178: ARRAY
27179: PPUSH
27180: CALL_OW 1
27184: ST_TO_ADDR
// end ;
27185: GO 27098
27187: POP
27188: POP
// array := tmp ;
27189: LD_ADDR_VAR 0 1
27193: PUSH
27194: LD_VAR 0 10
27198: ST_TO_ADDR
// end ;
27199: GO 27080
27201: POP
27202: POP
// result := array ;
27203: LD_ADDR_VAR 0 5
27207: PUSH
27208: LD_VAR 0 1
27212: ST_TO_ADDR
// end ;
27213: LD_VAR 0 5
27217: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27218: LD_INT 0
27220: PPUSH
27221: PPUSH
// result := 0 ;
27222: LD_ADDR_VAR 0 3
27226: PUSH
27227: LD_INT 0
27229: ST_TO_ADDR
// if not array or not value in array then
27230: LD_VAR 0 1
27234: NOT
27235: PUSH
27236: LD_VAR 0 2
27240: PUSH
27241: LD_VAR 0 1
27245: IN
27246: NOT
27247: OR
27248: IFFALSE 27252
// exit ;
27250: GO 27306
// for i = 1 to array do
27252: LD_ADDR_VAR 0 4
27256: PUSH
27257: DOUBLE
27258: LD_INT 1
27260: DEC
27261: ST_TO_ADDR
27262: LD_VAR 0 1
27266: PUSH
27267: FOR_TO
27268: IFFALSE 27304
// if value = array [ i ] then
27270: LD_VAR 0 2
27274: PUSH
27275: LD_VAR 0 1
27279: PUSH
27280: LD_VAR 0 4
27284: ARRAY
27285: EQUAL
27286: IFFALSE 27302
// begin result := i ;
27288: LD_ADDR_VAR 0 3
27292: PUSH
27293: LD_VAR 0 4
27297: ST_TO_ADDR
// exit ;
27298: POP
27299: POP
27300: GO 27306
// end ;
27302: GO 27267
27304: POP
27305: POP
// end ;
27306: LD_VAR 0 3
27310: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27311: LD_INT 0
27313: PPUSH
// vc_chassis := chassis ;
27314: LD_ADDR_OWVAR 37
27318: PUSH
27319: LD_VAR 0 1
27323: ST_TO_ADDR
// vc_engine := engine ;
27324: LD_ADDR_OWVAR 39
27328: PUSH
27329: LD_VAR 0 2
27333: ST_TO_ADDR
// vc_control := control ;
27334: LD_ADDR_OWVAR 38
27338: PUSH
27339: LD_VAR 0 3
27343: ST_TO_ADDR
// vc_weapon := weapon ;
27344: LD_ADDR_OWVAR 40
27348: PUSH
27349: LD_VAR 0 4
27353: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27354: LD_ADDR_OWVAR 41
27358: PUSH
27359: LD_VAR 0 5
27363: ST_TO_ADDR
// end ;
27364: LD_VAR 0 6
27368: RET
// export function WantPlant ( unit ) ; var task ; begin
27369: LD_INT 0
27371: PPUSH
27372: PPUSH
// result := false ;
27373: LD_ADDR_VAR 0 2
27377: PUSH
27378: LD_INT 0
27380: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27381: LD_ADDR_VAR 0 3
27385: PUSH
27386: LD_VAR 0 1
27390: PPUSH
27391: CALL_OW 437
27395: ST_TO_ADDR
// if task then
27396: LD_VAR 0 3
27400: IFFALSE 27428
// if task [ 1 ] [ 1 ] = p then
27402: LD_VAR 0 3
27406: PUSH
27407: LD_INT 1
27409: ARRAY
27410: PUSH
27411: LD_INT 1
27413: ARRAY
27414: PUSH
27415: LD_STRING p
27417: EQUAL
27418: IFFALSE 27428
// result := true ;
27420: LD_ADDR_VAR 0 2
27424: PUSH
27425: LD_INT 1
27427: ST_TO_ADDR
// end ;
27428: LD_VAR 0 2
27432: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27433: LD_INT 0
27435: PPUSH
27436: PPUSH
27437: PPUSH
27438: PPUSH
// if pos < 1 then
27439: LD_VAR 0 2
27443: PUSH
27444: LD_INT 1
27446: LESS
27447: IFFALSE 27451
// exit ;
27449: GO 27754
// if pos = 1 then
27451: LD_VAR 0 2
27455: PUSH
27456: LD_INT 1
27458: EQUAL
27459: IFFALSE 27492
// result := Replace ( arr , pos [ 1 ] , value ) else
27461: LD_ADDR_VAR 0 4
27465: PUSH
27466: LD_VAR 0 1
27470: PPUSH
27471: LD_VAR 0 2
27475: PUSH
27476: LD_INT 1
27478: ARRAY
27479: PPUSH
27480: LD_VAR 0 3
27484: PPUSH
27485: CALL_OW 1
27489: ST_TO_ADDR
27490: GO 27754
// begin tmp := arr ;
27492: LD_ADDR_VAR 0 6
27496: PUSH
27497: LD_VAR 0 1
27501: ST_TO_ADDR
// s_arr := [ tmp ] ;
27502: LD_ADDR_VAR 0 7
27506: PUSH
27507: LD_VAR 0 6
27511: PUSH
27512: EMPTY
27513: LIST
27514: ST_TO_ADDR
// for i = 1 to pos - 1 do
27515: LD_ADDR_VAR 0 5
27519: PUSH
27520: DOUBLE
27521: LD_INT 1
27523: DEC
27524: ST_TO_ADDR
27525: LD_VAR 0 2
27529: PUSH
27530: LD_INT 1
27532: MINUS
27533: PUSH
27534: FOR_TO
27535: IFFALSE 27580
// begin tmp := tmp [ pos [ i ] ] ;
27537: LD_ADDR_VAR 0 6
27541: PUSH
27542: LD_VAR 0 6
27546: PUSH
27547: LD_VAR 0 2
27551: PUSH
27552: LD_VAR 0 5
27556: ARRAY
27557: ARRAY
27558: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27559: LD_ADDR_VAR 0 7
27563: PUSH
27564: LD_VAR 0 7
27568: PUSH
27569: LD_VAR 0 6
27573: PUSH
27574: EMPTY
27575: LIST
27576: ADD
27577: ST_TO_ADDR
// end ;
27578: GO 27534
27580: POP
27581: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27582: LD_ADDR_VAR 0 6
27586: PUSH
27587: LD_VAR 0 6
27591: PPUSH
27592: LD_VAR 0 2
27596: PUSH
27597: LD_VAR 0 2
27601: ARRAY
27602: PPUSH
27603: LD_VAR 0 3
27607: PPUSH
27608: CALL_OW 1
27612: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27613: LD_ADDR_VAR 0 7
27617: PUSH
27618: LD_VAR 0 7
27622: PPUSH
27623: LD_VAR 0 7
27627: PPUSH
27628: LD_VAR 0 6
27632: PPUSH
27633: CALL_OW 1
27637: ST_TO_ADDR
// for i = s_arr downto 2 do
27638: LD_ADDR_VAR 0 5
27642: PUSH
27643: DOUBLE
27644: LD_VAR 0 7
27648: INC
27649: ST_TO_ADDR
27650: LD_INT 2
27652: PUSH
27653: FOR_DOWNTO
27654: IFFALSE 27738
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27656: LD_ADDR_VAR 0 6
27660: PUSH
27661: LD_VAR 0 7
27665: PUSH
27666: LD_VAR 0 5
27670: PUSH
27671: LD_INT 1
27673: MINUS
27674: ARRAY
27675: PPUSH
27676: LD_VAR 0 2
27680: PUSH
27681: LD_VAR 0 5
27685: PUSH
27686: LD_INT 1
27688: MINUS
27689: ARRAY
27690: PPUSH
27691: LD_VAR 0 7
27695: PUSH
27696: LD_VAR 0 5
27700: ARRAY
27701: PPUSH
27702: CALL_OW 1
27706: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27707: LD_ADDR_VAR 0 7
27711: PUSH
27712: LD_VAR 0 7
27716: PPUSH
27717: LD_VAR 0 5
27721: PUSH
27722: LD_INT 1
27724: MINUS
27725: PPUSH
27726: LD_VAR 0 6
27730: PPUSH
27731: CALL_OW 1
27735: ST_TO_ADDR
// end ;
27736: GO 27653
27738: POP
27739: POP
// result := s_arr [ 1 ] ;
27740: LD_ADDR_VAR 0 4
27744: PUSH
27745: LD_VAR 0 7
27749: PUSH
27750: LD_INT 1
27752: ARRAY
27753: ST_TO_ADDR
// end ; end ;
27754: LD_VAR 0 4
27758: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27759: LD_INT 0
27761: PPUSH
27762: PPUSH
// if not list then
27763: LD_VAR 0 1
27767: NOT
27768: IFFALSE 27772
// exit ;
27770: GO 27863
// i := list [ pos1 ] ;
27772: LD_ADDR_VAR 0 5
27776: PUSH
27777: LD_VAR 0 1
27781: PUSH
27782: LD_VAR 0 2
27786: ARRAY
27787: ST_TO_ADDR
// if not i then
27788: LD_VAR 0 5
27792: NOT
27793: IFFALSE 27797
// exit ;
27795: GO 27863
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27797: LD_ADDR_VAR 0 1
27801: PUSH
27802: LD_VAR 0 1
27806: PPUSH
27807: LD_VAR 0 2
27811: PPUSH
27812: LD_VAR 0 1
27816: PUSH
27817: LD_VAR 0 3
27821: ARRAY
27822: PPUSH
27823: CALL_OW 1
27827: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27828: LD_ADDR_VAR 0 1
27832: PUSH
27833: LD_VAR 0 1
27837: PPUSH
27838: LD_VAR 0 3
27842: PPUSH
27843: LD_VAR 0 5
27847: PPUSH
27848: CALL_OW 1
27852: ST_TO_ADDR
// result := list ;
27853: LD_ADDR_VAR 0 4
27857: PUSH
27858: LD_VAR 0 1
27862: ST_TO_ADDR
// end ;
27863: LD_VAR 0 4
27867: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27868: LD_INT 0
27870: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27871: LD_ADDR_VAR 0 5
27875: PUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 250
27885: PPUSH
27886: LD_VAR 0 1
27890: PPUSH
27891: CALL_OW 251
27895: PPUSH
27896: LD_VAR 0 2
27900: PPUSH
27901: LD_VAR 0 3
27905: PPUSH
27906: LD_VAR 0 4
27910: PPUSH
27911: CALL 27921 0 5
27915: ST_TO_ADDR
// end ;
27916: LD_VAR 0 5
27920: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27921: LD_INT 0
27923: PPUSH
27924: PPUSH
27925: PPUSH
27926: PPUSH
// if not list then
27927: LD_VAR 0 3
27931: NOT
27932: IFFALSE 27936
// exit ;
27934: GO 28324
// result := [ ] ;
27936: LD_ADDR_VAR 0 6
27940: PUSH
27941: EMPTY
27942: ST_TO_ADDR
// for i in list do
27943: LD_ADDR_VAR 0 7
27947: PUSH
27948: LD_VAR 0 3
27952: PUSH
27953: FOR_IN
27954: IFFALSE 28156
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27956: LD_ADDR_VAR 0 9
27960: PUSH
27961: LD_VAR 0 7
27965: PPUSH
27966: LD_VAR 0 1
27970: PPUSH
27971: LD_VAR 0 2
27975: PPUSH
27976: CALL_OW 297
27980: ST_TO_ADDR
// if not result then
27981: LD_VAR 0 6
27985: NOT
27986: IFFALSE 28012
// result := [ [ i , tmp ] ] else
27988: LD_ADDR_VAR 0 6
27992: PUSH
27993: LD_VAR 0 7
27997: PUSH
27998: LD_VAR 0 9
28002: PUSH
28003: EMPTY
28004: LIST
28005: LIST
28006: PUSH
28007: EMPTY
28008: LIST
28009: ST_TO_ADDR
28010: GO 28154
// begin if result [ result ] [ 2 ] < tmp then
28012: LD_VAR 0 6
28016: PUSH
28017: LD_VAR 0 6
28021: ARRAY
28022: PUSH
28023: LD_INT 2
28025: ARRAY
28026: PUSH
28027: LD_VAR 0 9
28031: LESS
28032: IFFALSE 28074
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28034: LD_ADDR_VAR 0 6
28038: PUSH
28039: LD_VAR 0 6
28043: PPUSH
28044: LD_VAR 0 6
28048: PUSH
28049: LD_INT 1
28051: PLUS
28052: PPUSH
28053: LD_VAR 0 7
28057: PUSH
28058: LD_VAR 0 9
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: PPUSH
28067: CALL_OW 2
28071: ST_TO_ADDR
28072: GO 28154
// for j = 1 to result do
28074: LD_ADDR_VAR 0 8
28078: PUSH
28079: DOUBLE
28080: LD_INT 1
28082: DEC
28083: ST_TO_ADDR
28084: LD_VAR 0 6
28088: PUSH
28089: FOR_TO
28090: IFFALSE 28152
// begin if tmp < result [ j ] [ 2 ] then
28092: LD_VAR 0 9
28096: PUSH
28097: LD_VAR 0 6
28101: PUSH
28102: LD_VAR 0 8
28106: ARRAY
28107: PUSH
28108: LD_INT 2
28110: ARRAY
28111: LESS
28112: IFFALSE 28150
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28114: LD_ADDR_VAR 0 6
28118: PUSH
28119: LD_VAR 0 6
28123: PPUSH
28124: LD_VAR 0 8
28128: PPUSH
28129: LD_VAR 0 7
28133: PUSH
28134: LD_VAR 0 9
28138: PUSH
28139: EMPTY
28140: LIST
28141: LIST
28142: PPUSH
28143: CALL_OW 2
28147: ST_TO_ADDR
// break ;
28148: GO 28152
// end ; end ;
28150: GO 28089
28152: POP
28153: POP
// end ; end ;
28154: GO 27953
28156: POP
28157: POP
// if result and not asc then
28158: LD_VAR 0 6
28162: PUSH
28163: LD_VAR 0 4
28167: NOT
28168: AND
28169: IFFALSE 28244
// begin tmp := result ;
28171: LD_ADDR_VAR 0 9
28175: PUSH
28176: LD_VAR 0 6
28180: ST_TO_ADDR
// for i = tmp downto 1 do
28181: LD_ADDR_VAR 0 7
28185: PUSH
28186: DOUBLE
28187: LD_VAR 0 9
28191: INC
28192: ST_TO_ADDR
28193: LD_INT 1
28195: PUSH
28196: FOR_DOWNTO
28197: IFFALSE 28242
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28199: LD_ADDR_VAR 0 6
28203: PUSH
28204: LD_VAR 0 6
28208: PPUSH
28209: LD_VAR 0 9
28213: PUSH
28214: LD_VAR 0 7
28218: MINUS
28219: PUSH
28220: LD_INT 1
28222: PLUS
28223: PPUSH
28224: LD_VAR 0 9
28228: PUSH
28229: LD_VAR 0 7
28233: ARRAY
28234: PPUSH
28235: CALL_OW 1
28239: ST_TO_ADDR
28240: GO 28196
28242: POP
28243: POP
// end ; tmp := [ ] ;
28244: LD_ADDR_VAR 0 9
28248: PUSH
28249: EMPTY
28250: ST_TO_ADDR
// if mode then
28251: LD_VAR 0 5
28255: IFFALSE 28324
// begin for i = 1 to result do
28257: LD_ADDR_VAR 0 7
28261: PUSH
28262: DOUBLE
28263: LD_INT 1
28265: DEC
28266: ST_TO_ADDR
28267: LD_VAR 0 6
28271: PUSH
28272: FOR_TO
28273: IFFALSE 28312
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28275: LD_ADDR_VAR 0 9
28279: PUSH
28280: LD_VAR 0 9
28284: PPUSH
28285: LD_VAR 0 7
28289: PPUSH
28290: LD_VAR 0 6
28294: PUSH
28295: LD_VAR 0 7
28299: ARRAY
28300: PUSH
28301: LD_INT 1
28303: ARRAY
28304: PPUSH
28305: CALL_OW 1
28309: ST_TO_ADDR
28310: GO 28272
28312: POP
28313: POP
// result := tmp ;
28314: LD_ADDR_VAR 0 6
28318: PUSH
28319: LD_VAR 0 9
28323: ST_TO_ADDR
// end ; end ;
28324: LD_VAR 0 6
28328: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28329: LD_INT 0
28331: PPUSH
28332: PPUSH
28333: PPUSH
28334: PPUSH
28335: PPUSH
28336: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28337: LD_ADDR_VAR 0 5
28341: PUSH
28342: LD_INT 0
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: EMPTY
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: ST_TO_ADDR
// if not x or not y then
28359: LD_VAR 0 2
28363: NOT
28364: PUSH
28365: LD_VAR 0 3
28369: NOT
28370: OR
28371: IFFALSE 28375
// exit ;
28373: GO 30027
// if not range then
28375: LD_VAR 0 4
28379: NOT
28380: IFFALSE 28390
// range := 10 ;
28382: LD_ADDR_VAR 0 4
28386: PUSH
28387: LD_INT 10
28389: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28390: LD_ADDR_VAR 0 8
28394: PUSH
28395: LD_INT 81
28397: PUSH
28398: LD_VAR 0 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 92
28409: PUSH
28410: LD_VAR 0 2
28414: PUSH
28415: LD_VAR 0 3
28419: PUSH
28420: LD_VAR 0 4
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 3
28433: PUSH
28434: LD_INT 21
28436: PUSH
28437: LD_INT 3
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: EMPTY
28445: LIST
28446: LIST
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: PPUSH
28453: CALL_OW 69
28457: ST_TO_ADDR
// if not tmp then
28458: LD_VAR 0 8
28462: NOT
28463: IFFALSE 28467
// exit ;
28465: GO 30027
// for i in tmp do
28467: LD_ADDR_VAR 0 6
28471: PUSH
28472: LD_VAR 0 8
28476: PUSH
28477: FOR_IN
28478: IFFALSE 30002
// begin points := [ 0 , 0 , 0 ] ;
28480: LD_ADDR_VAR 0 9
28484: PUSH
28485: LD_INT 0
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: LD_INT 0
28493: PUSH
28494: EMPTY
28495: LIST
28496: LIST
28497: LIST
28498: ST_TO_ADDR
// bpoints := 1 ;
28499: LD_ADDR_VAR 0 10
28503: PUSH
28504: LD_INT 1
28506: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28507: LD_VAR 0 6
28511: PPUSH
28512: CALL_OW 247
28516: PUSH
28517: LD_INT 1
28519: DOUBLE
28520: EQUAL
28521: IFTRUE 28525
28523: GO 29103
28525: POP
// begin if GetClass ( i ) = 1 then
28526: LD_VAR 0 6
28530: PPUSH
28531: CALL_OW 257
28535: PUSH
28536: LD_INT 1
28538: EQUAL
28539: IFFALSE 28560
// points := [ 10 , 5 , 3 ] ;
28541: LD_ADDR_VAR 0 9
28545: PUSH
28546: LD_INT 10
28548: PUSH
28549: LD_INT 5
28551: PUSH
28552: LD_INT 3
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28560: LD_VAR 0 6
28564: PPUSH
28565: CALL_OW 257
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 3
28575: PUSH
28576: LD_INT 4
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: IN
28584: IFFALSE 28605
// points := [ 3 , 2 , 1 ] ;
28586: LD_ADDR_VAR 0 9
28590: PUSH
28591: LD_INT 3
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28605: LD_VAR 0 6
28609: PPUSH
28610: CALL_OW 257
28614: PUSH
28615: LD_INT 5
28617: EQUAL
28618: IFFALSE 28639
// points := [ 130 , 5 , 2 ] ;
28620: LD_ADDR_VAR 0 9
28624: PUSH
28625: LD_INT 130
28627: PUSH
28628: LD_INT 5
28630: PUSH
28631: LD_INT 2
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: LIST
28638: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28639: LD_VAR 0 6
28643: PPUSH
28644: CALL_OW 257
28648: PUSH
28649: LD_INT 8
28651: EQUAL
28652: IFFALSE 28673
// points := [ 35 , 35 , 30 ] ;
28654: LD_ADDR_VAR 0 9
28658: PUSH
28659: LD_INT 35
28661: PUSH
28662: LD_INT 35
28664: PUSH
28665: LD_INT 30
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: LIST
28672: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28673: LD_VAR 0 6
28677: PPUSH
28678: CALL_OW 257
28682: PUSH
28683: LD_INT 9
28685: EQUAL
28686: IFFALSE 28707
// points := [ 20 , 55 , 40 ] ;
28688: LD_ADDR_VAR 0 9
28692: PUSH
28693: LD_INT 20
28695: PUSH
28696: LD_INT 55
28698: PUSH
28699: LD_INT 40
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: LIST
28706: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28707: LD_VAR 0 6
28711: PPUSH
28712: CALL_OW 257
28716: PUSH
28717: LD_INT 12
28719: PUSH
28720: LD_INT 16
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: IN
28727: IFFALSE 28748
// points := [ 5 , 3 , 2 ] ;
28729: LD_ADDR_VAR 0 9
28733: PUSH
28734: LD_INT 5
28736: PUSH
28737: LD_INT 3
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: LIST
28747: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28748: LD_VAR 0 6
28752: PPUSH
28753: CALL_OW 257
28757: PUSH
28758: LD_INT 17
28760: EQUAL
28761: IFFALSE 28782
// points := [ 100 , 50 , 75 ] ;
28763: LD_ADDR_VAR 0 9
28767: PUSH
28768: LD_INT 100
28770: PUSH
28771: LD_INT 50
28773: PUSH
28774: LD_INT 75
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28782: LD_VAR 0 6
28786: PPUSH
28787: CALL_OW 257
28791: PUSH
28792: LD_INT 15
28794: EQUAL
28795: IFFALSE 28816
// points := [ 10 , 5 , 3 ] ;
28797: LD_ADDR_VAR 0 9
28801: PUSH
28802: LD_INT 10
28804: PUSH
28805: LD_INT 5
28807: PUSH
28808: LD_INT 3
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28816: LD_VAR 0 6
28820: PPUSH
28821: CALL_OW 257
28825: PUSH
28826: LD_INT 14
28828: EQUAL
28829: IFFALSE 28850
// points := [ 10 , 0 , 0 ] ;
28831: LD_ADDR_VAR 0 9
28835: PUSH
28836: LD_INT 10
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: LD_INT 0
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: LIST
28849: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28850: LD_VAR 0 6
28854: PPUSH
28855: CALL_OW 257
28859: PUSH
28860: LD_INT 11
28862: EQUAL
28863: IFFALSE 28884
// points := [ 30 , 10 , 5 ] ;
28865: LD_ADDR_VAR 0 9
28869: PUSH
28870: LD_INT 30
28872: PUSH
28873: LD_INT 10
28875: PUSH
28876: LD_INT 5
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: LIST
28883: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28884: LD_VAR 0 1
28888: PPUSH
28889: LD_INT 5
28891: PPUSH
28892: CALL_OW 321
28896: PUSH
28897: LD_INT 2
28899: EQUAL
28900: IFFALSE 28917
// bpoints := bpoints * 1.8 ;
28902: LD_ADDR_VAR 0 10
28906: PUSH
28907: LD_VAR 0 10
28911: PUSH
28912: LD_REAL  1.80000000000000E+0000
28915: MUL
28916: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28917: LD_VAR 0 6
28921: PPUSH
28922: CALL_OW 257
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: LD_INT 3
28935: PUSH
28936: LD_INT 4
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: IN
28945: PUSH
28946: LD_VAR 0 1
28950: PPUSH
28951: LD_INT 51
28953: PPUSH
28954: CALL_OW 321
28958: PUSH
28959: LD_INT 2
28961: EQUAL
28962: AND
28963: IFFALSE 28980
// bpoints := bpoints * 1.2 ;
28965: LD_ADDR_VAR 0 10
28969: PUSH
28970: LD_VAR 0 10
28974: PUSH
28975: LD_REAL  1.20000000000000E+0000
28978: MUL
28979: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28980: LD_VAR 0 6
28984: PPUSH
28985: CALL_OW 257
28989: PUSH
28990: LD_INT 5
28992: PUSH
28993: LD_INT 7
28995: PUSH
28996: LD_INT 9
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: LIST
29003: IN
29004: PUSH
29005: LD_VAR 0 1
29009: PPUSH
29010: LD_INT 52
29012: PPUSH
29013: CALL_OW 321
29017: PUSH
29018: LD_INT 2
29020: EQUAL
29021: AND
29022: IFFALSE 29039
// bpoints := bpoints * 1.5 ;
29024: LD_ADDR_VAR 0 10
29028: PUSH
29029: LD_VAR 0 10
29033: PUSH
29034: LD_REAL  1.50000000000000E+0000
29037: MUL
29038: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29039: LD_VAR 0 1
29043: PPUSH
29044: LD_INT 66
29046: PPUSH
29047: CALL_OW 321
29051: PUSH
29052: LD_INT 2
29054: EQUAL
29055: IFFALSE 29072
// bpoints := bpoints * 1.1 ;
29057: LD_ADDR_VAR 0 10
29061: PUSH
29062: LD_VAR 0 10
29066: PUSH
29067: LD_REAL  1.10000000000000E+0000
29070: MUL
29071: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29072: LD_ADDR_VAR 0 10
29076: PUSH
29077: LD_VAR 0 10
29081: PUSH
29082: LD_VAR 0 6
29086: PPUSH
29087: LD_INT 1
29089: PPUSH
29090: CALL_OW 259
29094: PUSH
29095: LD_REAL  1.15000000000000E+0000
29098: MUL
29099: MUL
29100: ST_TO_ADDR
// end ; unit_vehicle :
29101: GO 29931
29103: LD_INT 2
29105: DOUBLE
29106: EQUAL
29107: IFTRUE 29111
29109: GO 29919
29111: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29112: LD_VAR 0 6
29116: PPUSH
29117: CALL_OW 264
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: LD_INT 42
29127: PUSH
29128: LD_INT 24
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: LIST
29135: IN
29136: IFFALSE 29157
// points := [ 25 , 5 , 3 ] ;
29138: LD_ADDR_VAR 0 9
29142: PUSH
29143: LD_INT 25
29145: PUSH
29146: LD_INT 5
29148: PUSH
29149: LD_INT 3
29151: PUSH
29152: EMPTY
29153: LIST
29154: LIST
29155: LIST
29156: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29157: LD_VAR 0 6
29161: PPUSH
29162: CALL_OW 264
29166: PUSH
29167: LD_INT 4
29169: PUSH
29170: LD_INT 43
29172: PUSH
29173: LD_INT 25
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: LIST
29180: IN
29181: IFFALSE 29202
// points := [ 40 , 15 , 5 ] ;
29183: LD_ADDR_VAR 0 9
29187: PUSH
29188: LD_INT 40
29190: PUSH
29191: LD_INT 15
29193: PUSH
29194: LD_INT 5
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: LIST
29201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29202: LD_VAR 0 6
29206: PPUSH
29207: CALL_OW 264
29211: PUSH
29212: LD_INT 3
29214: PUSH
29215: LD_INT 23
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: IN
29222: IFFALSE 29243
// points := [ 7 , 25 , 8 ] ;
29224: LD_ADDR_VAR 0 9
29228: PUSH
29229: LD_INT 7
29231: PUSH
29232: LD_INT 25
29234: PUSH
29235: LD_INT 8
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: LIST
29242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29243: LD_VAR 0 6
29247: PPUSH
29248: CALL_OW 264
29252: PUSH
29253: LD_INT 5
29255: PUSH
29256: LD_INT 27
29258: PUSH
29259: LD_INT 44
29261: PUSH
29262: EMPTY
29263: LIST
29264: LIST
29265: LIST
29266: IN
29267: IFFALSE 29288
// points := [ 14 , 50 , 16 ] ;
29269: LD_ADDR_VAR 0 9
29273: PUSH
29274: LD_INT 14
29276: PUSH
29277: LD_INT 50
29279: PUSH
29280: LD_INT 16
29282: PUSH
29283: EMPTY
29284: LIST
29285: LIST
29286: LIST
29287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29288: LD_VAR 0 6
29292: PPUSH
29293: CALL_OW 264
29297: PUSH
29298: LD_INT 6
29300: PUSH
29301: LD_INT 46
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: IN
29308: IFFALSE 29329
// points := [ 32 , 120 , 70 ] ;
29310: LD_ADDR_VAR 0 9
29314: PUSH
29315: LD_INT 32
29317: PUSH
29318: LD_INT 120
29320: PUSH
29321: LD_INT 70
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: LIST
29328: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29329: LD_VAR 0 6
29333: PPUSH
29334: CALL_OW 264
29338: PUSH
29339: LD_INT 7
29341: PUSH
29342: LD_INT 28
29344: PUSH
29345: LD_INT 45
29347: PUSH
29348: LD_EXP 98
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: IN
29359: IFFALSE 29380
// points := [ 35 , 20 , 45 ] ;
29361: LD_ADDR_VAR 0 9
29365: PUSH
29366: LD_INT 35
29368: PUSH
29369: LD_INT 20
29371: PUSH
29372: LD_INT 45
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: LIST
29379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29380: LD_VAR 0 6
29384: PPUSH
29385: CALL_OW 264
29389: PUSH
29390: LD_INT 47
29392: PUSH
29393: EMPTY
29394: LIST
29395: IN
29396: IFFALSE 29417
// points := [ 67 , 45 , 75 ] ;
29398: LD_ADDR_VAR 0 9
29402: PUSH
29403: LD_INT 67
29405: PUSH
29406: LD_INT 45
29408: PUSH
29409: LD_INT 75
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: LIST
29416: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29417: LD_VAR 0 6
29421: PPUSH
29422: CALL_OW 264
29426: PUSH
29427: LD_INT 26
29429: PUSH
29430: EMPTY
29431: LIST
29432: IN
29433: IFFALSE 29454
// points := [ 120 , 30 , 80 ] ;
29435: LD_ADDR_VAR 0 9
29439: PUSH
29440: LD_INT 120
29442: PUSH
29443: LD_INT 30
29445: PUSH
29446: LD_INT 80
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: LIST
29453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29454: LD_VAR 0 6
29458: PPUSH
29459: CALL_OW 264
29463: PUSH
29464: LD_INT 22
29466: PUSH
29467: EMPTY
29468: LIST
29469: IN
29470: IFFALSE 29491
// points := [ 40 , 1 , 1 ] ;
29472: LD_ADDR_VAR 0 9
29476: PUSH
29477: LD_INT 40
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29491: LD_VAR 0 6
29495: PPUSH
29496: CALL_OW 264
29500: PUSH
29501: LD_INT 29
29503: PUSH
29504: EMPTY
29505: LIST
29506: IN
29507: IFFALSE 29528
// points := [ 70 , 200 , 400 ] ;
29509: LD_ADDR_VAR 0 9
29513: PUSH
29514: LD_INT 70
29516: PUSH
29517: LD_INT 200
29519: PUSH
29520: LD_INT 400
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: LIST
29527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29528: LD_VAR 0 6
29532: PPUSH
29533: CALL_OW 264
29537: PUSH
29538: LD_INT 14
29540: PUSH
29541: LD_INT 53
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: IN
29548: IFFALSE 29569
// points := [ 40 , 10 , 20 ] ;
29550: LD_ADDR_VAR 0 9
29554: PUSH
29555: LD_INT 40
29557: PUSH
29558: LD_INT 10
29560: PUSH
29561: LD_INT 20
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: LIST
29568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29569: LD_VAR 0 6
29573: PPUSH
29574: CALL_OW 264
29578: PUSH
29579: LD_INT 9
29581: PUSH
29582: EMPTY
29583: LIST
29584: IN
29585: IFFALSE 29606
// points := [ 5 , 70 , 20 ] ;
29587: LD_ADDR_VAR 0 9
29591: PUSH
29592: LD_INT 5
29594: PUSH
29595: LD_INT 70
29597: PUSH
29598: LD_INT 20
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29606: LD_VAR 0 6
29610: PPUSH
29611: CALL_OW 264
29615: PUSH
29616: LD_INT 10
29618: PUSH
29619: EMPTY
29620: LIST
29621: IN
29622: IFFALSE 29643
// points := [ 35 , 110 , 70 ] ;
29624: LD_ADDR_VAR 0 9
29628: PUSH
29629: LD_INT 35
29631: PUSH
29632: LD_INT 110
29634: PUSH
29635: LD_INT 70
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: LIST
29642: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29643: LD_VAR 0 6
29647: PPUSH
29648: CALL_OW 265
29652: PUSH
29653: LD_INT 25
29655: EQUAL
29656: IFFALSE 29677
// points := [ 80 , 65 , 100 ] ;
29658: LD_ADDR_VAR 0 9
29662: PUSH
29663: LD_INT 80
29665: PUSH
29666: LD_INT 65
29668: PUSH
29669: LD_INT 100
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29677: LD_VAR 0 6
29681: PPUSH
29682: CALL_OW 263
29686: PUSH
29687: LD_INT 1
29689: EQUAL
29690: IFFALSE 29725
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29692: LD_ADDR_VAR 0 10
29696: PUSH
29697: LD_VAR 0 10
29701: PUSH
29702: LD_VAR 0 6
29706: PPUSH
29707: CALL_OW 311
29711: PPUSH
29712: LD_INT 3
29714: PPUSH
29715: CALL_OW 259
29719: PUSH
29720: LD_INT 4
29722: MUL
29723: MUL
29724: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29725: LD_VAR 0 6
29729: PPUSH
29730: CALL_OW 263
29734: PUSH
29735: LD_INT 2
29737: EQUAL
29738: IFFALSE 29789
// begin j := IsControledBy ( i ) ;
29740: LD_ADDR_VAR 0 7
29744: PUSH
29745: LD_VAR 0 6
29749: PPUSH
29750: CALL_OW 312
29754: ST_TO_ADDR
// if j then
29755: LD_VAR 0 7
29759: IFFALSE 29789
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29761: LD_ADDR_VAR 0 10
29765: PUSH
29766: LD_VAR 0 10
29770: PUSH
29771: LD_VAR 0 7
29775: PPUSH
29776: LD_INT 3
29778: PPUSH
29779: CALL_OW 259
29783: PUSH
29784: LD_INT 3
29786: MUL
29787: MUL
29788: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29789: LD_VAR 0 6
29793: PPUSH
29794: CALL_OW 264
29798: PUSH
29799: LD_INT 5
29801: PUSH
29802: LD_INT 6
29804: PUSH
29805: LD_INT 46
29807: PUSH
29808: LD_INT 44
29810: PUSH
29811: LD_INT 47
29813: PUSH
29814: LD_INT 45
29816: PUSH
29817: LD_INT 28
29819: PUSH
29820: LD_INT 7
29822: PUSH
29823: LD_INT 27
29825: PUSH
29826: LD_INT 29
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: IN
29841: PUSH
29842: LD_VAR 0 1
29846: PPUSH
29847: LD_INT 52
29849: PPUSH
29850: CALL_OW 321
29854: PUSH
29855: LD_INT 2
29857: EQUAL
29858: AND
29859: IFFALSE 29876
// bpoints := bpoints * 1.2 ;
29861: LD_ADDR_VAR 0 10
29865: PUSH
29866: LD_VAR 0 10
29870: PUSH
29871: LD_REAL  1.20000000000000E+0000
29874: MUL
29875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29876: LD_VAR 0 6
29880: PPUSH
29881: CALL_OW 264
29885: PUSH
29886: LD_INT 6
29888: PUSH
29889: LD_INT 46
29891: PUSH
29892: LD_INT 47
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: IN
29900: IFFALSE 29917
// bpoints := bpoints * 1.2 ;
29902: LD_ADDR_VAR 0 10
29906: PUSH
29907: LD_VAR 0 10
29911: PUSH
29912: LD_REAL  1.20000000000000E+0000
29915: MUL
29916: ST_TO_ADDR
// end ; unit_building :
29917: GO 29931
29919: LD_INT 3
29921: DOUBLE
29922: EQUAL
29923: IFTRUE 29927
29925: GO 29930
29927: POP
// ; end ;
29928: GO 29931
29930: POP
// for j = 1 to 3 do
29931: LD_ADDR_VAR 0 7
29935: PUSH
29936: DOUBLE
29937: LD_INT 1
29939: DEC
29940: ST_TO_ADDR
29941: LD_INT 3
29943: PUSH
29944: FOR_TO
29945: IFFALSE 29998
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29947: LD_ADDR_VAR 0 5
29951: PUSH
29952: LD_VAR 0 5
29956: PPUSH
29957: LD_VAR 0 7
29961: PPUSH
29962: LD_VAR 0 5
29966: PUSH
29967: LD_VAR 0 7
29971: ARRAY
29972: PUSH
29973: LD_VAR 0 9
29977: PUSH
29978: LD_VAR 0 7
29982: ARRAY
29983: PUSH
29984: LD_VAR 0 10
29988: MUL
29989: PLUS
29990: PPUSH
29991: CALL_OW 1
29995: ST_TO_ADDR
29996: GO 29944
29998: POP
29999: POP
// end ;
30000: GO 28477
30002: POP
30003: POP
// result := Replace ( result , 4 , tmp ) ;
30004: LD_ADDR_VAR 0 5
30008: PUSH
30009: LD_VAR 0 5
30013: PPUSH
30014: LD_INT 4
30016: PPUSH
30017: LD_VAR 0 8
30021: PPUSH
30022: CALL_OW 1
30026: ST_TO_ADDR
// end ;
30027: LD_VAR 0 5
30031: RET
// export function DangerAtRange ( unit , range ) ; begin
30032: LD_INT 0
30034: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 255
30049: PPUSH
30050: LD_VAR 0 1
30054: PPUSH
30055: CALL_OW 250
30059: PPUSH
30060: LD_VAR 0 1
30064: PPUSH
30065: CALL_OW 251
30069: PPUSH
30070: LD_VAR 0 2
30074: PPUSH
30075: CALL 28329 0 4
30079: ST_TO_ADDR
// end ;
30080: LD_VAR 0 3
30084: RET
// export function DangerInArea ( side , area ) ; begin
30085: LD_INT 0
30087: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30088: LD_ADDR_VAR 0 3
30092: PUSH
30093: LD_VAR 0 2
30097: PPUSH
30098: LD_INT 81
30100: PUSH
30101: LD_VAR 0 1
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PPUSH
30110: CALL_OW 70
30114: ST_TO_ADDR
// end ;
30115: LD_VAR 0 3
30119: RET
// export function IsExtension ( b ) ; begin
30120: LD_INT 0
30122: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30123: LD_ADDR_VAR 0 2
30127: PUSH
30128: LD_VAR 0 1
30132: PUSH
30133: LD_INT 23
30135: PUSH
30136: LD_INT 20
30138: PUSH
30139: LD_INT 22
30141: PUSH
30142: LD_INT 17
30144: PUSH
30145: LD_INT 24
30147: PUSH
30148: LD_INT 21
30150: PUSH
30151: LD_INT 19
30153: PUSH
30154: LD_INT 16
30156: PUSH
30157: LD_INT 25
30159: PUSH
30160: LD_INT 18
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: LIST
30173: LIST
30174: IN
30175: ST_TO_ADDR
// end ;
30176: LD_VAR 0 2
30180: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30181: LD_INT 0
30183: PPUSH
30184: PPUSH
30185: PPUSH
// result := [ ] ;
30186: LD_ADDR_VAR 0 4
30190: PUSH
30191: EMPTY
30192: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30193: LD_ADDR_VAR 0 5
30197: PUSH
30198: LD_VAR 0 2
30202: PPUSH
30203: LD_INT 21
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PPUSH
30213: CALL_OW 70
30217: ST_TO_ADDR
// if not tmp then
30218: LD_VAR 0 5
30222: NOT
30223: IFFALSE 30227
// exit ;
30225: GO 30291
// if checkLink then
30227: LD_VAR 0 3
30231: IFFALSE 30281
// begin for i in tmp do
30233: LD_ADDR_VAR 0 6
30237: PUSH
30238: LD_VAR 0 5
30242: PUSH
30243: FOR_IN
30244: IFFALSE 30279
// if GetBase ( i ) <> base then
30246: LD_VAR 0 6
30250: PPUSH
30251: CALL_OW 274
30255: PUSH
30256: LD_VAR 0 1
30260: NONEQUAL
30261: IFFALSE 30277
// ComLinkToBase ( base , i ) ;
30263: LD_VAR 0 1
30267: PPUSH
30268: LD_VAR 0 6
30272: PPUSH
30273: CALL_OW 169
30277: GO 30243
30279: POP
30280: POP
// end ; result := tmp ;
30281: LD_ADDR_VAR 0 4
30285: PUSH
30286: LD_VAR 0 5
30290: ST_TO_ADDR
// end ;
30291: LD_VAR 0 4
30295: RET
// export function ComComplete ( units , b ) ; var i ; begin
30296: LD_INT 0
30298: PPUSH
30299: PPUSH
// if not units then
30300: LD_VAR 0 1
30304: NOT
30305: IFFALSE 30309
// exit ;
30307: GO 30399
// for i in units do
30309: LD_ADDR_VAR 0 4
30313: PUSH
30314: LD_VAR 0 1
30318: PUSH
30319: FOR_IN
30320: IFFALSE 30397
// if BuildingStatus ( b ) = bs_build then
30322: LD_VAR 0 2
30326: PPUSH
30327: CALL_OW 461
30331: PUSH
30332: LD_INT 1
30334: EQUAL
30335: IFFALSE 30395
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30337: LD_VAR 0 4
30341: PPUSH
30342: LD_STRING h
30344: PUSH
30345: LD_VAR 0 2
30349: PPUSH
30350: CALL_OW 250
30354: PUSH
30355: LD_VAR 0 2
30359: PPUSH
30360: CALL_OW 251
30364: PUSH
30365: LD_VAR 0 2
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: LD_INT 0
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: PPUSH
30391: CALL_OW 446
30395: GO 30319
30397: POP
30398: POP
// end ;
30399: LD_VAR 0 3
30403: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30404: LD_INT 0
30406: PPUSH
30407: PPUSH
30408: PPUSH
30409: PPUSH
30410: PPUSH
30411: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30412: LD_VAR 0 1
30416: NOT
30417: PUSH
30418: LD_VAR 0 1
30422: PPUSH
30423: CALL_OW 263
30427: PUSH
30428: LD_INT 2
30430: NONEQUAL
30431: OR
30432: IFFALSE 30436
// exit ;
30434: GO 30752
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30436: LD_ADDR_VAR 0 6
30440: PUSH
30441: LD_INT 22
30443: PUSH
30444: LD_VAR 0 1
30448: PPUSH
30449: CALL_OW 255
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 2
30460: PUSH
30461: LD_INT 30
30463: PUSH
30464: LD_INT 36
30466: PUSH
30467: EMPTY
30468: LIST
30469: LIST
30470: PUSH
30471: LD_INT 34
30473: PUSH
30474: LD_INT 31
30476: PUSH
30477: EMPTY
30478: LIST
30479: LIST
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: LIST
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PPUSH
30490: CALL_OW 69
30494: ST_TO_ADDR
// if not tmp then
30495: LD_VAR 0 6
30499: NOT
30500: IFFALSE 30504
// exit ;
30502: GO 30752
// result := [ ] ;
30504: LD_ADDR_VAR 0 2
30508: PUSH
30509: EMPTY
30510: ST_TO_ADDR
// for i in tmp do
30511: LD_ADDR_VAR 0 3
30515: PUSH
30516: LD_VAR 0 6
30520: PUSH
30521: FOR_IN
30522: IFFALSE 30593
// begin t := UnitsInside ( i ) ;
30524: LD_ADDR_VAR 0 4
30528: PUSH
30529: LD_VAR 0 3
30533: PPUSH
30534: CALL_OW 313
30538: ST_TO_ADDR
// if t then
30539: LD_VAR 0 4
30543: IFFALSE 30591
// for j in t do
30545: LD_ADDR_VAR 0 7
30549: PUSH
30550: LD_VAR 0 4
30554: PUSH
30555: FOR_IN
30556: IFFALSE 30589
// result := Replace ( result , result + 1 , j ) ;
30558: LD_ADDR_VAR 0 2
30562: PUSH
30563: LD_VAR 0 2
30567: PPUSH
30568: LD_VAR 0 2
30572: PUSH
30573: LD_INT 1
30575: PLUS
30576: PPUSH
30577: LD_VAR 0 7
30581: PPUSH
30582: CALL_OW 1
30586: ST_TO_ADDR
30587: GO 30555
30589: POP
30590: POP
// end ;
30591: GO 30521
30593: POP
30594: POP
// if not result then
30595: LD_VAR 0 2
30599: NOT
30600: IFFALSE 30604
// exit ;
30602: GO 30752
// mech := result [ 1 ] ;
30604: LD_ADDR_VAR 0 5
30608: PUSH
30609: LD_VAR 0 2
30613: PUSH
30614: LD_INT 1
30616: ARRAY
30617: ST_TO_ADDR
// if result > 1 then
30618: LD_VAR 0 2
30622: PUSH
30623: LD_INT 1
30625: GREATER
30626: IFFALSE 30738
// begin for i = 2 to result do
30628: LD_ADDR_VAR 0 3
30632: PUSH
30633: DOUBLE
30634: LD_INT 2
30636: DEC
30637: ST_TO_ADDR
30638: LD_VAR 0 2
30642: PUSH
30643: FOR_TO
30644: IFFALSE 30736
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30646: LD_ADDR_VAR 0 4
30650: PUSH
30651: LD_VAR 0 2
30655: PUSH
30656: LD_VAR 0 3
30660: ARRAY
30661: PPUSH
30662: LD_INT 3
30664: PPUSH
30665: CALL_OW 259
30669: PUSH
30670: LD_VAR 0 2
30674: PUSH
30675: LD_VAR 0 3
30679: ARRAY
30680: PPUSH
30681: CALL_OW 432
30685: MINUS
30686: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30687: LD_VAR 0 4
30691: PUSH
30692: LD_VAR 0 5
30696: PPUSH
30697: LD_INT 3
30699: PPUSH
30700: CALL_OW 259
30704: PUSH
30705: LD_VAR 0 5
30709: PPUSH
30710: CALL_OW 432
30714: MINUS
30715: GREATEREQUAL
30716: IFFALSE 30734
// mech := result [ i ] ;
30718: LD_ADDR_VAR 0 5
30722: PUSH
30723: LD_VAR 0 2
30727: PUSH
30728: LD_VAR 0 3
30732: ARRAY
30733: ST_TO_ADDR
// end ;
30734: GO 30643
30736: POP
30737: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30738: LD_VAR 0 1
30742: PPUSH
30743: LD_VAR 0 5
30747: PPUSH
30748: CALL_OW 135
// end ;
30752: LD_VAR 0 2
30756: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30757: LD_INT 0
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
30765: PPUSH
30766: PPUSH
30767: PPUSH
30768: PPUSH
30769: PPUSH
30770: PPUSH
30771: PPUSH
// result := [ ] ;
30772: LD_ADDR_VAR 0 7
30776: PUSH
30777: EMPTY
30778: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30779: LD_VAR 0 1
30783: PPUSH
30784: CALL_OW 266
30788: PUSH
30789: LD_INT 0
30791: PUSH
30792: LD_INT 1
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: IN
30799: NOT
30800: IFFALSE 30804
// exit ;
30802: GO 32438
// if name then
30804: LD_VAR 0 3
30808: IFFALSE 30824
// SetBName ( base_dep , name ) ;
30810: LD_VAR 0 1
30814: PPUSH
30815: LD_VAR 0 3
30819: PPUSH
30820: CALL_OW 500
// base := GetBase ( base_dep ) ;
30824: LD_ADDR_VAR 0 15
30828: PUSH
30829: LD_VAR 0 1
30833: PPUSH
30834: CALL_OW 274
30838: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30839: LD_ADDR_VAR 0 16
30843: PUSH
30844: LD_VAR 0 1
30848: PPUSH
30849: CALL_OW 255
30853: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30854: LD_ADDR_VAR 0 17
30858: PUSH
30859: LD_VAR 0 1
30863: PPUSH
30864: CALL_OW 248
30868: ST_TO_ADDR
// if sources then
30869: LD_VAR 0 5
30873: IFFALSE 30920
// for i = 1 to 3 do
30875: LD_ADDR_VAR 0 8
30879: PUSH
30880: DOUBLE
30881: LD_INT 1
30883: DEC
30884: ST_TO_ADDR
30885: LD_INT 3
30887: PUSH
30888: FOR_TO
30889: IFFALSE 30918
// AddResourceType ( base , i , sources [ i ] ) ;
30891: LD_VAR 0 15
30895: PPUSH
30896: LD_VAR 0 8
30900: PPUSH
30901: LD_VAR 0 5
30905: PUSH
30906: LD_VAR 0 8
30910: ARRAY
30911: PPUSH
30912: CALL_OW 276
30916: GO 30888
30918: POP
30919: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30920: LD_ADDR_VAR 0 18
30924: PUSH
30925: LD_VAR 0 15
30929: PPUSH
30930: LD_VAR 0 2
30934: PPUSH
30935: LD_INT 1
30937: PPUSH
30938: CALL 30181 0 3
30942: ST_TO_ADDR
// InitHc ;
30943: CALL_OW 19
// InitUc ;
30947: CALL_OW 18
// uc_side := side ;
30951: LD_ADDR_OWVAR 20
30955: PUSH
30956: LD_VAR 0 16
30960: ST_TO_ADDR
// uc_nation := nation ;
30961: LD_ADDR_OWVAR 21
30965: PUSH
30966: LD_VAR 0 17
30970: ST_TO_ADDR
// if buildings then
30971: LD_VAR 0 18
30975: IFFALSE 32297
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30977: LD_ADDR_VAR 0 19
30981: PUSH
30982: LD_VAR 0 18
30986: PPUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 29
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 30
31002: PUSH
31003: LD_INT 30
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: PPUSH
31015: CALL_OW 72
31019: ST_TO_ADDR
// if tmp then
31020: LD_VAR 0 19
31024: IFFALSE 31072
// for i in tmp do
31026: LD_ADDR_VAR 0 8
31030: PUSH
31031: LD_VAR 0 19
31035: PUSH
31036: FOR_IN
31037: IFFALSE 31070
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31039: LD_VAR 0 8
31043: PPUSH
31044: CALL_OW 250
31048: PPUSH
31049: LD_VAR 0 8
31053: PPUSH
31054: CALL_OW 251
31058: PPUSH
31059: LD_VAR 0 16
31063: PPUSH
31064: CALL_OW 441
31068: GO 31036
31070: POP
31071: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31072: LD_VAR 0 18
31076: PPUSH
31077: LD_INT 2
31079: PUSH
31080: LD_INT 30
31082: PUSH
31083: LD_INT 32
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 30
31092: PUSH
31093: LD_INT 33
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: LIST
31104: PPUSH
31105: CALL_OW 72
31109: IFFALSE 31197
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31111: LD_ADDR_VAR 0 8
31115: PUSH
31116: LD_VAR 0 18
31120: PPUSH
31121: LD_INT 2
31123: PUSH
31124: LD_INT 30
31126: PUSH
31127: LD_INT 32
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 30
31136: PUSH
31137: LD_INT 33
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: LIST
31148: PPUSH
31149: CALL_OW 72
31153: PUSH
31154: FOR_IN
31155: IFFALSE 31195
// begin if not GetBWeapon ( i ) then
31157: LD_VAR 0 8
31161: PPUSH
31162: CALL_OW 269
31166: NOT
31167: IFFALSE 31193
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31169: LD_VAR 0 8
31173: PPUSH
31174: LD_VAR 0 8
31178: PPUSH
31179: LD_VAR 0 2
31183: PPUSH
31184: CALL 32443 0 2
31188: PPUSH
31189: CALL_OW 431
// end ;
31193: GO 31154
31195: POP
31196: POP
// end ; for i = 1 to personel do
31197: LD_ADDR_VAR 0 8
31201: PUSH
31202: DOUBLE
31203: LD_INT 1
31205: DEC
31206: ST_TO_ADDR
31207: LD_VAR 0 6
31211: PUSH
31212: FOR_TO
31213: IFFALSE 32277
// begin if i > 4 then
31215: LD_VAR 0 8
31219: PUSH
31220: LD_INT 4
31222: GREATER
31223: IFFALSE 31227
// break ;
31225: GO 32277
// case i of 1 :
31227: LD_VAR 0 8
31231: PUSH
31232: LD_INT 1
31234: DOUBLE
31235: EQUAL
31236: IFTRUE 31240
31238: GO 31320
31240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31241: LD_ADDR_VAR 0 12
31245: PUSH
31246: LD_VAR 0 18
31250: PPUSH
31251: LD_INT 22
31253: PUSH
31254: LD_VAR 0 16
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 58
31265: PUSH
31266: EMPTY
31267: LIST
31268: PUSH
31269: LD_INT 2
31271: PUSH
31272: LD_INT 30
31274: PUSH
31275: LD_INT 32
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 30
31284: PUSH
31285: LD_INT 4
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 30
31294: PUSH
31295: LD_INT 5
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: EMPTY
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: LIST
31312: PPUSH
31313: CALL_OW 72
31317: ST_TO_ADDR
31318: GO 31542
31320: LD_INT 2
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31390
31328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31329: LD_ADDR_VAR 0 12
31333: PUSH
31334: LD_VAR 0 18
31338: PPUSH
31339: LD_INT 22
31341: PUSH
31342: LD_VAR 0 16
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PUSH
31351: LD_INT 2
31353: PUSH
31354: LD_INT 30
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 30
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: LIST
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PPUSH
31383: CALL_OW 72
31387: ST_TO_ADDR
31388: GO 31542
31390: LD_INT 3
31392: DOUBLE
31393: EQUAL
31394: IFTRUE 31398
31396: GO 31460
31398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31399: LD_ADDR_VAR 0 12
31403: PUSH
31404: LD_VAR 0 18
31408: PPUSH
31409: LD_INT 22
31411: PUSH
31412: LD_VAR 0 16
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 2
31423: PUSH
31424: LD_INT 30
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 30
31436: PUSH
31437: LD_INT 3
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PPUSH
31453: CALL_OW 72
31457: ST_TO_ADDR
31458: GO 31542
31460: LD_INT 4
31462: DOUBLE
31463: EQUAL
31464: IFTRUE 31468
31466: GO 31541
31468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31469: LD_ADDR_VAR 0 12
31473: PUSH
31474: LD_VAR 0 18
31478: PPUSH
31479: LD_INT 22
31481: PUSH
31482: LD_VAR 0 16
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: LD_INT 30
31496: PUSH
31497: LD_INT 6
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 30
31506: PUSH
31507: LD_INT 7
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 30
31516: PUSH
31517: LD_INT 8
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PPUSH
31534: CALL_OW 72
31538: ST_TO_ADDR
31539: GO 31542
31541: POP
// if i = 1 then
31542: LD_VAR 0 8
31546: PUSH
31547: LD_INT 1
31549: EQUAL
31550: IFFALSE 31661
// begin tmp := [ ] ;
31552: LD_ADDR_VAR 0 19
31556: PUSH
31557: EMPTY
31558: ST_TO_ADDR
// for j in f do
31559: LD_ADDR_VAR 0 9
31563: PUSH
31564: LD_VAR 0 12
31568: PUSH
31569: FOR_IN
31570: IFFALSE 31643
// if GetBType ( j ) = b_bunker then
31572: LD_VAR 0 9
31576: PPUSH
31577: CALL_OW 266
31581: PUSH
31582: LD_INT 32
31584: EQUAL
31585: IFFALSE 31612
// tmp := Insert ( tmp , 1 , j ) else
31587: LD_ADDR_VAR 0 19
31591: PUSH
31592: LD_VAR 0 19
31596: PPUSH
31597: LD_INT 1
31599: PPUSH
31600: LD_VAR 0 9
31604: PPUSH
31605: CALL_OW 2
31609: ST_TO_ADDR
31610: GO 31641
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31612: LD_ADDR_VAR 0 19
31616: PUSH
31617: LD_VAR 0 19
31621: PPUSH
31622: LD_VAR 0 19
31626: PUSH
31627: LD_INT 1
31629: PLUS
31630: PPUSH
31631: LD_VAR 0 9
31635: PPUSH
31636: CALL_OW 2
31640: ST_TO_ADDR
31641: GO 31569
31643: POP
31644: POP
// if tmp then
31645: LD_VAR 0 19
31649: IFFALSE 31661
// f := tmp ;
31651: LD_ADDR_VAR 0 12
31655: PUSH
31656: LD_VAR 0 19
31660: ST_TO_ADDR
// end ; x := personel [ i ] ;
31661: LD_ADDR_VAR 0 13
31665: PUSH
31666: LD_VAR 0 6
31670: PUSH
31671: LD_VAR 0 8
31675: ARRAY
31676: ST_TO_ADDR
// if x = - 1 then
31677: LD_VAR 0 13
31681: PUSH
31682: LD_INT 1
31684: NEG
31685: EQUAL
31686: IFFALSE 31895
// begin for j in f do
31688: LD_ADDR_VAR 0 9
31692: PUSH
31693: LD_VAR 0 12
31697: PUSH
31698: FOR_IN
31699: IFFALSE 31891
// repeat InitHc ;
31701: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31705: LD_VAR 0 9
31709: PPUSH
31710: CALL_OW 266
31714: PUSH
31715: LD_INT 5
31717: EQUAL
31718: IFFALSE 31788
// begin if UnitsInside ( j ) < 3 then
31720: LD_VAR 0 9
31724: PPUSH
31725: CALL_OW 313
31729: PUSH
31730: LD_INT 3
31732: LESS
31733: IFFALSE 31769
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31735: LD_INT 0
31737: PPUSH
31738: LD_INT 5
31740: PUSH
31741: LD_INT 8
31743: PUSH
31744: LD_INT 9
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: PUSH
31752: LD_VAR 0 17
31756: ARRAY
31757: PPUSH
31758: LD_VAR 0 4
31762: PPUSH
31763: CALL_OW 380
31767: GO 31786
// PrepareHuman ( false , i , skill ) ;
31769: LD_INT 0
31771: PPUSH
31772: LD_VAR 0 8
31776: PPUSH
31777: LD_VAR 0 4
31781: PPUSH
31782: CALL_OW 380
// end else
31786: GO 31805
// PrepareHuman ( false , i , skill ) ;
31788: LD_INT 0
31790: PPUSH
31791: LD_VAR 0 8
31795: PPUSH
31796: LD_VAR 0 4
31800: PPUSH
31801: CALL_OW 380
// un := CreateHuman ;
31805: LD_ADDR_VAR 0 14
31809: PUSH
31810: CALL_OW 44
31814: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31815: LD_ADDR_VAR 0 7
31819: PUSH
31820: LD_VAR 0 7
31824: PPUSH
31825: LD_INT 1
31827: PPUSH
31828: LD_VAR 0 14
31832: PPUSH
31833: CALL_OW 2
31837: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31838: LD_VAR 0 14
31842: PPUSH
31843: LD_VAR 0 9
31847: PPUSH
31848: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31852: LD_VAR 0 9
31856: PPUSH
31857: CALL_OW 313
31861: PUSH
31862: LD_INT 6
31864: EQUAL
31865: PUSH
31866: LD_VAR 0 9
31870: PPUSH
31871: CALL_OW 266
31875: PUSH
31876: LD_INT 32
31878: PUSH
31879: LD_INT 31
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: IN
31886: OR
31887: IFFALSE 31701
31889: GO 31698
31891: POP
31892: POP
// end else
31893: GO 32275
// for j = 1 to x do
31895: LD_ADDR_VAR 0 9
31899: PUSH
31900: DOUBLE
31901: LD_INT 1
31903: DEC
31904: ST_TO_ADDR
31905: LD_VAR 0 13
31909: PUSH
31910: FOR_TO
31911: IFFALSE 32273
// begin InitHc ;
31913: CALL_OW 19
// if not f then
31917: LD_VAR 0 12
31921: NOT
31922: IFFALSE 32011
// begin PrepareHuman ( false , i , skill ) ;
31924: LD_INT 0
31926: PPUSH
31927: LD_VAR 0 8
31931: PPUSH
31932: LD_VAR 0 4
31936: PPUSH
31937: CALL_OW 380
// un := CreateHuman ;
31941: LD_ADDR_VAR 0 14
31945: PUSH
31946: CALL_OW 44
31950: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31951: LD_ADDR_VAR 0 7
31955: PUSH
31956: LD_VAR 0 7
31960: PPUSH
31961: LD_INT 1
31963: PPUSH
31964: LD_VAR 0 14
31968: PPUSH
31969: CALL_OW 2
31973: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31974: LD_VAR 0 14
31978: PPUSH
31979: LD_VAR 0 1
31983: PPUSH
31984: CALL_OW 250
31988: PPUSH
31989: LD_VAR 0 1
31993: PPUSH
31994: CALL_OW 251
31998: PPUSH
31999: LD_INT 10
32001: PPUSH
32002: LD_INT 0
32004: PPUSH
32005: CALL_OW 50
// continue ;
32009: GO 31910
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32011: LD_VAR 0 12
32015: PUSH
32016: LD_INT 1
32018: ARRAY
32019: PPUSH
32020: CALL_OW 313
32024: PUSH
32025: LD_VAR 0 12
32029: PUSH
32030: LD_INT 1
32032: ARRAY
32033: PPUSH
32034: CALL_OW 266
32038: PUSH
32039: LD_INT 32
32041: PUSH
32042: LD_INT 31
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: IN
32049: AND
32050: PUSH
32051: LD_VAR 0 12
32055: PUSH
32056: LD_INT 1
32058: ARRAY
32059: PPUSH
32060: CALL_OW 313
32064: PUSH
32065: LD_INT 6
32067: EQUAL
32068: OR
32069: IFFALSE 32089
// f := Delete ( f , 1 ) ;
32071: LD_ADDR_VAR 0 12
32075: PUSH
32076: LD_VAR 0 12
32080: PPUSH
32081: LD_INT 1
32083: PPUSH
32084: CALL_OW 3
32088: ST_TO_ADDR
// if not f then
32089: LD_VAR 0 12
32093: NOT
32094: IFFALSE 32112
// begin x := x + 2 ;
32096: LD_ADDR_VAR 0 13
32100: PUSH
32101: LD_VAR 0 13
32105: PUSH
32106: LD_INT 2
32108: PLUS
32109: ST_TO_ADDR
// continue ;
32110: GO 31910
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32112: LD_VAR 0 12
32116: PUSH
32117: LD_INT 1
32119: ARRAY
32120: PPUSH
32121: CALL_OW 266
32125: PUSH
32126: LD_INT 5
32128: EQUAL
32129: IFFALSE 32203
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32131: LD_VAR 0 12
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: PPUSH
32140: CALL_OW 313
32144: PUSH
32145: LD_INT 3
32147: LESS
32148: IFFALSE 32184
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32150: LD_INT 0
32152: PPUSH
32153: LD_INT 5
32155: PUSH
32156: LD_INT 8
32158: PUSH
32159: LD_INT 9
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: PUSH
32167: LD_VAR 0 17
32171: ARRAY
32172: PPUSH
32173: LD_VAR 0 4
32177: PPUSH
32178: CALL_OW 380
32182: GO 32201
// PrepareHuman ( false , i , skill ) ;
32184: LD_INT 0
32186: PPUSH
32187: LD_VAR 0 8
32191: PPUSH
32192: LD_VAR 0 4
32196: PPUSH
32197: CALL_OW 380
// end else
32201: GO 32220
// PrepareHuman ( false , i , skill ) ;
32203: LD_INT 0
32205: PPUSH
32206: LD_VAR 0 8
32210: PPUSH
32211: LD_VAR 0 4
32215: PPUSH
32216: CALL_OW 380
// un := CreateHuman ;
32220: LD_ADDR_VAR 0 14
32224: PUSH
32225: CALL_OW 44
32229: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32230: LD_ADDR_VAR 0 7
32234: PUSH
32235: LD_VAR 0 7
32239: PPUSH
32240: LD_INT 1
32242: PPUSH
32243: LD_VAR 0 14
32247: PPUSH
32248: CALL_OW 2
32252: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32253: LD_VAR 0 14
32257: PPUSH
32258: LD_VAR 0 12
32262: PUSH
32263: LD_INT 1
32265: ARRAY
32266: PPUSH
32267: CALL_OW 52
// end ;
32271: GO 31910
32273: POP
32274: POP
// end ;
32275: GO 31212
32277: POP
32278: POP
// result := result ^ buildings ;
32279: LD_ADDR_VAR 0 7
32283: PUSH
32284: LD_VAR 0 7
32288: PUSH
32289: LD_VAR 0 18
32293: ADD
32294: ST_TO_ADDR
// end else
32295: GO 32438
// begin for i = 1 to personel do
32297: LD_ADDR_VAR 0 8
32301: PUSH
32302: DOUBLE
32303: LD_INT 1
32305: DEC
32306: ST_TO_ADDR
32307: LD_VAR 0 6
32311: PUSH
32312: FOR_TO
32313: IFFALSE 32436
// begin if i > 4 then
32315: LD_VAR 0 8
32319: PUSH
32320: LD_INT 4
32322: GREATER
32323: IFFALSE 32327
// break ;
32325: GO 32436
// x := personel [ i ] ;
32327: LD_ADDR_VAR 0 13
32331: PUSH
32332: LD_VAR 0 6
32336: PUSH
32337: LD_VAR 0 8
32341: ARRAY
32342: ST_TO_ADDR
// if x = - 1 then
32343: LD_VAR 0 13
32347: PUSH
32348: LD_INT 1
32350: NEG
32351: EQUAL
32352: IFFALSE 32356
// continue ;
32354: GO 32312
// PrepareHuman ( false , i , skill ) ;
32356: LD_INT 0
32358: PPUSH
32359: LD_VAR 0 8
32363: PPUSH
32364: LD_VAR 0 4
32368: PPUSH
32369: CALL_OW 380
// un := CreateHuman ;
32373: LD_ADDR_VAR 0 14
32377: PUSH
32378: CALL_OW 44
32382: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32383: LD_VAR 0 14
32387: PPUSH
32388: LD_VAR 0 1
32392: PPUSH
32393: CALL_OW 250
32397: PPUSH
32398: LD_VAR 0 1
32402: PPUSH
32403: CALL_OW 251
32407: PPUSH
32408: LD_INT 10
32410: PPUSH
32411: LD_INT 0
32413: PPUSH
32414: CALL_OW 50
// result := result ^ un ;
32418: LD_ADDR_VAR 0 7
32422: PUSH
32423: LD_VAR 0 7
32427: PUSH
32428: LD_VAR 0 14
32432: ADD
32433: ST_TO_ADDR
// end ;
32434: GO 32312
32436: POP
32437: POP
// end ; end ;
32438: LD_VAR 0 7
32442: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32443: LD_INT 0
32445: PPUSH
32446: PPUSH
32447: PPUSH
32448: PPUSH
32449: PPUSH
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
32454: PPUSH
32455: PPUSH
32456: PPUSH
32457: PPUSH
32458: PPUSH
32459: PPUSH
32460: PPUSH
// result := false ;
32461: LD_ADDR_VAR 0 3
32465: PUSH
32466: LD_INT 0
32468: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32469: LD_VAR 0 1
32473: NOT
32474: PUSH
32475: LD_VAR 0 1
32479: PPUSH
32480: CALL_OW 266
32484: PUSH
32485: LD_INT 32
32487: PUSH
32488: LD_INT 33
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: IN
32495: NOT
32496: OR
32497: IFFALSE 32501
// exit ;
32499: GO 33610
// nat := GetNation ( tower ) ;
32501: LD_ADDR_VAR 0 12
32505: PUSH
32506: LD_VAR 0 1
32510: PPUSH
32511: CALL_OW 248
32515: ST_TO_ADDR
// side := GetSide ( tower ) ;
32516: LD_ADDR_VAR 0 16
32520: PUSH
32521: LD_VAR 0 1
32525: PPUSH
32526: CALL_OW 255
32530: ST_TO_ADDR
// x := GetX ( tower ) ;
32531: LD_ADDR_VAR 0 10
32535: PUSH
32536: LD_VAR 0 1
32540: PPUSH
32541: CALL_OW 250
32545: ST_TO_ADDR
// y := GetY ( tower ) ;
32546: LD_ADDR_VAR 0 11
32550: PUSH
32551: LD_VAR 0 1
32555: PPUSH
32556: CALL_OW 251
32560: ST_TO_ADDR
// if not x or not y then
32561: LD_VAR 0 10
32565: NOT
32566: PUSH
32567: LD_VAR 0 11
32571: NOT
32572: OR
32573: IFFALSE 32577
// exit ;
32575: GO 33610
// weapon := 0 ;
32577: LD_ADDR_VAR 0 18
32581: PUSH
32582: LD_INT 0
32584: ST_TO_ADDR
// fac_list := [ ] ;
32585: LD_ADDR_VAR 0 17
32589: PUSH
32590: EMPTY
32591: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32592: LD_ADDR_VAR 0 6
32596: PUSH
32597: LD_VAR 0 1
32601: PPUSH
32602: CALL_OW 274
32606: PPUSH
32607: LD_VAR 0 2
32611: PPUSH
32612: LD_INT 0
32614: PPUSH
32615: CALL 30181 0 3
32619: PPUSH
32620: LD_INT 30
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PPUSH
32630: CALL_OW 72
32634: ST_TO_ADDR
// if not factories then
32635: LD_VAR 0 6
32639: NOT
32640: IFFALSE 32644
// exit ;
32642: GO 33610
// for i in factories do
32644: LD_ADDR_VAR 0 8
32648: PUSH
32649: LD_VAR 0 6
32653: PUSH
32654: FOR_IN
32655: IFFALSE 32680
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32657: LD_ADDR_VAR 0 17
32661: PUSH
32662: LD_VAR 0 17
32666: PUSH
32667: LD_VAR 0 8
32671: PPUSH
32672: CALL_OW 478
32676: UNION
32677: ST_TO_ADDR
32678: GO 32654
32680: POP
32681: POP
// if not fac_list then
32682: LD_VAR 0 17
32686: NOT
32687: IFFALSE 32691
// exit ;
32689: GO 33610
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32691: LD_ADDR_VAR 0 5
32695: PUSH
32696: LD_INT 4
32698: PUSH
32699: LD_INT 5
32701: PUSH
32702: LD_INT 9
32704: PUSH
32705: LD_INT 10
32707: PUSH
32708: LD_INT 6
32710: PUSH
32711: LD_INT 7
32713: PUSH
32714: LD_INT 11
32716: PUSH
32717: EMPTY
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: PUSH
32726: LD_INT 27
32728: PUSH
32729: LD_INT 28
32731: PUSH
32732: LD_INT 26
32734: PUSH
32735: LD_INT 30
32737: PUSH
32738: EMPTY
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 43
32746: PUSH
32747: LD_INT 44
32749: PUSH
32750: LD_INT 46
32752: PUSH
32753: LD_INT 45
32755: PUSH
32756: LD_INT 47
32758: PUSH
32759: LD_INT 49
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: LIST
32774: PUSH
32775: LD_VAR 0 12
32779: ARRAY
32780: ST_TO_ADDR
// list := list isect fac_list ;
32781: LD_ADDR_VAR 0 5
32785: PUSH
32786: LD_VAR 0 5
32790: PUSH
32791: LD_VAR 0 17
32795: ISECT
32796: ST_TO_ADDR
// if not list then
32797: LD_VAR 0 5
32801: NOT
32802: IFFALSE 32806
// exit ;
32804: GO 33610
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32806: LD_VAR 0 12
32810: PUSH
32811: LD_INT 3
32813: EQUAL
32814: PUSH
32815: LD_INT 49
32817: PUSH
32818: LD_VAR 0 5
32822: IN
32823: AND
32824: PUSH
32825: LD_INT 31
32827: PPUSH
32828: LD_VAR 0 16
32832: PPUSH
32833: CALL_OW 321
32837: PUSH
32838: LD_INT 2
32840: EQUAL
32841: AND
32842: IFFALSE 32902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32844: LD_INT 22
32846: PUSH
32847: LD_VAR 0 16
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 35
32858: PUSH
32859: LD_INT 49
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 91
32868: PUSH
32869: LD_VAR 0 1
32873: PUSH
32874: LD_INT 10
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: LIST
32886: PPUSH
32887: CALL_OW 69
32891: NOT
32892: IFFALSE 32902
// weapon := ru_time_lapser ;
32894: LD_ADDR_VAR 0 18
32898: PUSH
32899: LD_INT 49
32901: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32902: LD_VAR 0 12
32906: PUSH
32907: LD_INT 1
32909: PUSH
32910: LD_INT 2
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: IN
32917: PUSH
32918: LD_INT 11
32920: PUSH
32921: LD_VAR 0 5
32925: IN
32926: PUSH
32927: LD_INT 30
32929: PUSH
32930: LD_VAR 0 5
32934: IN
32935: OR
32936: AND
32937: PUSH
32938: LD_INT 6
32940: PPUSH
32941: LD_VAR 0 16
32945: PPUSH
32946: CALL_OW 321
32950: PUSH
32951: LD_INT 2
32953: EQUAL
32954: AND
32955: IFFALSE 33120
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32957: LD_INT 22
32959: PUSH
32960: LD_VAR 0 16
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 35
32974: PUSH
32975: LD_INT 11
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 35
32984: PUSH
32985: LD_INT 30
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 91
32999: PUSH
33000: LD_VAR 0 1
33004: PUSH
33005: LD_INT 18
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: PPUSH
33018: CALL_OW 69
33022: NOT
33023: PUSH
33024: LD_INT 22
33026: PUSH
33027: LD_VAR 0 16
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 2
33038: PUSH
33039: LD_INT 30
33041: PUSH
33042: LD_INT 32
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 30
33051: PUSH
33052: LD_INT 33
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 91
33066: PUSH
33067: LD_VAR 0 1
33071: PUSH
33072: LD_INT 12
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: PPUSH
33088: CALL_OW 69
33092: PUSH
33093: LD_INT 2
33095: GREATER
33096: AND
33097: IFFALSE 33120
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33099: LD_ADDR_VAR 0 18
33103: PUSH
33104: LD_INT 11
33106: PUSH
33107: LD_INT 30
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_VAR 0 12
33118: ARRAY
33119: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33120: LD_VAR 0 18
33124: NOT
33125: PUSH
33126: LD_INT 40
33128: PPUSH
33129: LD_VAR 0 16
33133: PPUSH
33134: CALL_OW 321
33138: PUSH
33139: LD_INT 2
33141: EQUAL
33142: AND
33143: PUSH
33144: LD_INT 7
33146: PUSH
33147: LD_VAR 0 5
33151: IN
33152: PUSH
33153: LD_INT 28
33155: PUSH
33156: LD_VAR 0 5
33160: IN
33161: OR
33162: PUSH
33163: LD_INT 45
33165: PUSH
33166: LD_VAR 0 5
33170: IN
33171: OR
33172: AND
33173: IFFALSE 33427
// begin hex := GetHexInfo ( x , y ) ;
33175: LD_ADDR_VAR 0 4
33179: PUSH
33180: LD_VAR 0 10
33184: PPUSH
33185: LD_VAR 0 11
33189: PPUSH
33190: CALL_OW 546
33194: ST_TO_ADDR
// if hex [ 1 ] then
33195: LD_VAR 0 4
33199: PUSH
33200: LD_INT 1
33202: ARRAY
33203: IFFALSE 33207
// exit ;
33205: GO 33610
// height := hex [ 2 ] ;
33207: LD_ADDR_VAR 0 15
33211: PUSH
33212: LD_VAR 0 4
33216: PUSH
33217: LD_INT 2
33219: ARRAY
33220: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33221: LD_ADDR_VAR 0 14
33225: PUSH
33226: LD_INT 0
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 3
33234: PUSH
33235: LD_INT 5
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
// for i in tmp do
33244: LD_ADDR_VAR 0 8
33248: PUSH
33249: LD_VAR 0 14
33253: PUSH
33254: FOR_IN
33255: IFFALSE 33425
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33257: LD_ADDR_VAR 0 9
33261: PUSH
33262: LD_VAR 0 10
33266: PPUSH
33267: LD_VAR 0 8
33271: PPUSH
33272: LD_INT 5
33274: PPUSH
33275: CALL_OW 272
33279: PUSH
33280: LD_VAR 0 11
33284: PPUSH
33285: LD_VAR 0 8
33289: PPUSH
33290: LD_INT 5
33292: PPUSH
33293: CALL_OW 273
33297: PUSH
33298: EMPTY
33299: LIST
33300: LIST
33301: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33302: LD_VAR 0 9
33306: PUSH
33307: LD_INT 1
33309: ARRAY
33310: PPUSH
33311: LD_VAR 0 9
33315: PUSH
33316: LD_INT 2
33318: ARRAY
33319: PPUSH
33320: CALL_OW 488
33324: IFFALSE 33423
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33326: LD_ADDR_VAR 0 4
33330: PUSH
33331: LD_VAR 0 9
33335: PUSH
33336: LD_INT 1
33338: ARRAY
33339: PPUSH
33340: LD_VAR 0 9
33344: PUSH
33345: LD_INT 2
33347: ARRAY
33348: PPUSH
33349: CALL_OW 546
33353: ST_TO_ADDR
// if hex [ 1 ] then
33354: LD_VAR 0 4
33358: PUSH
33359: LD_INT 1
33361: ARRAY
33362: IFFALSE 33366
// continue ;
33364: GO 33254
// h := hex [ 2 ] ;
33366: LD_ADDR_VAR 0 13
33370: PUSH
33371: LD_VAR 0 4
33375: PUSH
33376: LD_INT 2
33378: ARRAY
33379: ST_TO_ADDR
// if h + 7 < height then
33380: LD_VAR 0 13
33384: PUSH
33385: LD_INT 7
33387: PLUS
33388: PUSH
33389: LD_VAR 0 15
33393: LESS
33394: IFFALSE 33423
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33396: LD_ADDR_VAR 0 18
33400: PUSH
33401: LD_INT 7
33403: PUSH
33404: LD_INT 28
33406: PUSH
33407: LD_INT 45
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: LIST
33414: PUSH
33415: LD_VAR 0 12
33419: ARRAY
33420: ST_TO_ADDR
// break ;
33421: GO 33425
// end ; end ; end ;
33423: GO 33254
33425: POP
33426: POP
// end ; if not weapon then
33427: LD_VAR 0 18
33431: NOT
33432: IFFALSE 33492
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33434: LD_ADDR_VAR 0 5
33438: PUSH
33439: LD_VAR 0 5
33443: PUSH
33444: LD_INT 11
33446: PUSH
33447: LD_INT 30
33449: PUSH
33450: LD_INT 49
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: LIST
33457: DIFF
33458: ST_TO_ADDR
// if not list then
33459: LD_VAR 0 5
33463: NOT
33464: IFFALSE 33468
// exit ;
33466: GO 33610
// weapon := list [ rand ( 1 , list ) ] ;
33468: LD_ADDR_VAR 0 18
33472: PUSH
33473: LD_VAR 0 5
33477: PUSH
33478: LD_INT 1
33480: PPUSH
33481: LD_VAR 0 5
33485: PPUSH
33486: CALL_OW 12
33490: ARRAY
33491: ST_TO_ADDR
// end ; if weapon then
33492: LD_VAR 0 18
33496: IFFALSE 33610
// begin tmp := CostOfWeapon ( weapon ) ;
33498: LD_ADDR_VAR 0 14
33502: PUSH
33503: LD_VAR 0 18
33507: PPUSH
33508: CALL_OW 451
33512: ST_TO_ADDR
// j := GetBase ( tower ) ;
33513: LD_ADDR_VAR 0 9
33517: PUSH
33518: LD_VAR 0 1
33522: PPUSH
33523: CALL_OW 274
33527: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33528: LD_VAR 0 9
33532: PPUSH
33533: LD_INT 1
33535: PPUSH
33536: CALL_OW 275
33540: PUSH
33541: LD_VAR 0 14
33545: PUSH
33546: LD_INT 1
33548: ARRAY
33549: GREATEREQUAL
33550: PUSH
33551: LD_VAR 0 9
33555: PPUSH
33556: LD_INT 2
33558: PPUSH
33559: CALL_OW 275
33563: PUSH
33564: LD_VAR 0 14
33568: PUSH
33569: LD_INT 2
33571: ARRAY
33572: GREATEREQUAL
33573: AND
33574: PUSH
33575: LD_VAR 0 9
33579: PPUSH
33580: LD_INT 3
33582: PPUSH
33583: CALL_OW 275
33587: PUSH
33588: LD_VAR 0 14
33592: PUSH
33593: LD_INT 3
33595: ARRAY
33596: GREATEREQUAL
33597: AND
33598: IFFALSE 33610
// result := weapon ;
33600: LD_ADDR_VAR 0 3
33604: PUSH
33605: LD_VAR 0 18
33609: ST_TO_ADDR
// end ; end ;
33610: LD_VAR 0 3
33614: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33615: LD_INT 0
33617: PPUSH
33618: PPUSH
// result := true ;
33619: LD_ADDR_VAR 0 3
33623: PUSH
33624: LD_INT 1
33626: ST_TO_ADDR
// if array1 = array2 then
33627: LD_VAR 0 1
33631: PUSH
33632: LD_VAR 0 2
33636: EQUAL
33637: IFFALSE 33697
// begin for i = 1 to array1 do
33639: LD_ADDR_VAR 0 4
33643: PUSH
33644: DOUBLE
33645: LD_INT 1
33647: DEC
33648: ST_TO_ADDR
33649: LD_VAR 0 1
33653: PUSH
33654: FOR_TO
33655: IFFALSE 33693
// if array1 [ i ] <> array2 [ i ] then
33657: LD_VAR 0 1
33661: PUSH
33662: LD_VAR 0 4
33666: ARRAY
33667: PUSH
33668: LD_VAR 0 2
33672: PUSH
33673: LD_VAR 0 4
33677: ARRAY
33678: NONEQUAL
33679: IFFALSE 33691
// begin result := false ;
33681: LD_ADDR_VAR 0 3
33685: PUSH
33686: LD_INT 0
33688: ST_TO_ADDR
// break ;
33689: GO 33693
// end ;
33691: GO 33654
33693: POP
33694: POP
// end else
33695: GO 33705
// result := false ;
33697: LD_ADDR_VAR 0 3
33701: PUSH
33702: LD_INT 0
33704: ST_TO_ADDR
// end ;
33705: LD_VAR 0 3
33709: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33710: LD_INT 0
33712: PPUSH
33713: PPUSH
// if not array1 or not array2 then
33714: LD_VAR 0 1
33718: NOT
33719: PUSH
33720: LD_VAR 0 2
33724: NOT
33725: OR
33726: IFFALSE 33730
// exit ;
33728: GO 33794
// result := true ;
33730: LD_ADDR_VAR 0 3
33734: PUSH
33735: LD_INT 1
33737: ST_TO_ADDR
// for i = 1 to array1 do
33738: LD_ADDR_VAR 0 4
33742: PUSH
33743: DOUBLE
33744: LD_INT 1
33746: DEC
33747: ST_TO_ADDR
33748: LD_VAR 0 1
33752: PUSH
33753: FOR_TO
33754: IFFALSE 33792
// if array1 [ i ] <> array2 [ i ] then
33756: LD_VAR 0 1
33760: PUSH
33761: LD_VAR 0 4
33765: ARRAY
33766: PUSH
33767: LD_VAR 0 2
33771: PUSH
33772: LD_VAR 0 4
33776: ARRAY
33777: NONEQUAL
33778: IFFALSE 33790
// begin result := false ;
33780: LD_ADDR_VAR 0 3
33784: PUSH
33785: LD_INT 0
33787: ST_TO_ADDR
// break ;
33788: GO 33792
// end ;
33790: GO 33753
33792: POP
33793: POP
// end ;
33794: LD_VAR 0 3
33798: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33799: LD_INT 0
33801: PPUSH
33802: PPUSH
33803: PPUSH
// pom := GetBase ( fac ) ;
33804: LD_ADDR_VAR 0 5
33808: PUSH
33809: LD_VAR 0 1
33813: PPUSH
33814: CALL_OW 274
33818: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33819: LD_ADDR_VAR 0 4
33823: PUSH
33824: LD_VAR 0 2
33828: PUSH
33829: LD_INT 1
33831: ARRAY
33832: PPUSH
33833: LD_VAR 0 2
33837: PUSH
33838: LD_INT 2
33840: ARRAY
33841: PPUSH
33842: LD_VAR 0 2
33846: PUSH
33847: LD_INT 3
33849: ARRAY
33850: PPUSH
33851: LD_VAR 0 2
33855: PUSH
33856: LD_INT 4
33858: ARRAY
33859: PPUSH
33860: CALL_OW 449
33864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33865: LD_ADDR_VAR 0 3
33869: PUSH
33870: LD_VAR 0 5
33874: PPUSH
33875: LD_INT 1
33877: PPUSH
33878: CALL_OW 275
33882: PUSH
33883: LD_VAR 0 4
33887: PUSH
33888: LD_INT 1
33890: ARRAY
33891: GREATEREQUAL
33892: PUSH
33893: LD_VAR 0 5
33897: PPUSH
33898: LD_INT 2
33900: PPUSH
33901: CALL_OW 275
33905: PUSH
33906: LD_VAR 0 4
33910: PUSH
33911: LD_INT 2
33913: ARRAY
33914: GREATEREQUAL
33915: AND
33916: PUSH
33917: LD_VAR 0 5
33921: PPUSH
33922: LD_INT 3
33924: PPUSH
33925: CALL_OW 275
33929: PUSH
33930: LD_VAR 0 4
33934: PUSH
33935: LD_INT 3
33937: ARRAY
33938: GREATEREQUAL
33939: AND
33940: ST_TO_ADDR
// end ;
33941: LD_VAR 0 3
33945: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33946: LD_INT 0
33948: PPUSH
33949: PPUSH
33950: PPUSH
33951: PPUSH
// pom := GetBase ( building ) ;
33952: LD_ADDR_VAR 0 3
33956: PUSH
33957: LD_VAR 0 1
33961: PPUSH
33962: CALL_OW 274
33966: ST_TO_ADDR
// if not pom then
33967: LD_VAR 0 3
33971: NOT
33972: IFFALSE 33976
// exit ;
33974: GO 34146
// btype := GetBType ( building ) ;
33976: LD_ADDR_VAR 0 5
33980: PUSH
33981: LD_VAR 0 1
33985: PPUSH
33986: CALL_OW 266
33990: ST_TO_ADDR
// if btype = b_armoury then
33991: LD_VAR 0 5
33995: PUSH
33996: LD_INT 4
33998: EQUAL
33999: IFFALSE 34009
// btype := b_barracks ;
34001: LD_ADDR_VAR 0 5
34005: PUSH
34006: LD_INT 5
34008: ST_TO_ADDR
// if btype = b_depot then
34009: LD_VAR 0 5
34013: PUSH
34014: LD_INT 0
34016: EQUAL
34017: IFFALSE 34027
// btype := b_warehouse ;
34019: LD_ADDR_VAR 0 5
34023: PUSH
34024: LD_INT 1
34026: ST_TO_ADDR
// if btype = b_workshop then
34027: LD_VAR 0 5
34031: PUSH
34032: LD_INT 2
34034: EQUAL
34035: IFFALSE 34045
// btype := b_factory ;
34037: LD_ADDR_VAR 0 5
34041: PUSH
34042: LD_INT 3
34044: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34045: LD_ADDR_VAR 0 4
34049: PUSH
34050: LD_VAR 0 5
34054: PPUSH
34055: LD_VAR 0 1
34059: PPUSH
34060: CALL_OW 248
34064: PPUSH
34065: CALL_OW 450
34069: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34070: LD_ADDR_VAR 0 2
34074: PUSH
34075: LD_VAR 0 3
34079: PPUSH
34080: LD_INT 1
34082: PPUSH
34083: CALL_OW 275
34087: PUSH
34088: LD_VAR 0 4
34092: PUSH
34093: LD_INT 1
34095: ARRAY
34096: GREATEREQUAL
34097: PUSH
34098: LD_VAR 0 3
34102: PPUSH
34103: LD_INT 2
34105: PPUSH
34106: CALL_OW 275
34110: PUSH
34111: LD_VAR 0 4
34115: PUSH
34116: LD_INT 2
34118: ARRAY
34119: GREATEREQUAL
34120: AND
34121: PUSH
34122: LD_VAR 0 3
34126: PPUSH
34127: LD_INT 3
34129: PPUSH
34130: CALL_OW 275
34134: PUSH
34135: LD_VAR 0 4
34139: PUSH
34140: LD_INT 3
34142: ARRAY
34143: GREATEREQUAL
34144: AND
34145: ST_TO_ADDR
// end ;
34146: LD_VAR 0 2
34150: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34151: LD_INT 0
34153: PPUSH
34154: PPUSH
34155: PPUSH
// pom := GetBase ( building ) ;
34156: LD_ADDR_VAR 0 4
34160: PUSH
34161: LD_VAR 0 1
34165: PPUSH
34166: CALL_OW 274
34170: ST_TO_ADDR
// if not pom then
34171: LD_VAR 0 4
34175: NOT
34176: IFFALSE 34180
// exit ;
34178: GO 34281
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34180: LD_ADDR_VAR 0 5
34184: PUSH
34185: LD_VAR 0 2
34189: PPUSH
34190: LD_VAR 0 1
34194: PPUSH
34195: CALL_OW 248
34199: PPUSH
34200: CALL_OW 450
34204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34205: LD_ADDR_VAR 0 3
34209: PUSH
34210: LD_VAR 0 4
34214: PPUSH
34215: LD_INT 1
34217: PPUSH
34218: CALL_OW 275
34222: PUSH
34223: LD_VAR 0 5
34227: PUSH
34228: LD_INT 1
34230: ARRAY
34231: GREATEREQUAL
34232: PUSH
34233: LD_VAR 0 4
34237: PPUSH
34238: LD_INT 2
34240: PPUSH
34241: CALL_OW 275
34245: PUSH
34246: LD_VAR 0 5
34250: PUSH
34251: LD_INT 2
34253: ARRAY
34254: GREATEREQUAL
34255: AND
34256: PUSH
34257: LD_VAR 0 4
34261: PPUSH
34262: LD_INT 3
34264: PPUSH
34265: CALL_OW 275
34269: PUSH
34270: LD_VAR 0 5
34274: PUSH
34275: LD_INT 3
34277: ARRAY
34278: GREATEREQUAL
34279: AND
34280: ST_TO_ADDR
// end ;
34281: LD_VAR 0 3
34285: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34286: LD_INT 0
34288: PPUSH
34289: PPUSH
34290: PPUSH
34291: PPUSH
34292: PPUSH
34293: PPUSH
34294: PPUSH
34295: PPUSH
34296: PPUSH
34297: PPUSH
34298: PPUSH
// result := false ;
34299: LD_ADDR_VAR 0 8
34303: PUSH
34304: LD_INT 0
34306: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34307: LD_VAR 0 5
34311: NOT
34312: PUSH
34313: LD_VAR 0 1
34317: NOT
34318: OR
34319: PUSH
34320: LD_VAR 0 2
34324: NOT
34325: OR
34326: PUSH
34327: LD_VAR 0 3
34331: NOT
34332: OR
34333: IFFALSE 34337
// exit ;
34335: GO 35151
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34337: LD_ADDR_VAR 0 14
34341: PUSH
34342: LD_VAR 0 1
34346: PPUSH
34347: LD_VAR 0 2
34351: PPUSH
34352: LD_VAR 0 3
34356: PPUSH
34357: LD_VAR 0 4
34361: PPUSH
34362: LD_VAR 0 5
34366: PUSH
34367: LD_INT 1
34369: ARRAY
34370: PPUSH
34371: CALL_OW 248
34375: PPUSH
34376: LD_INT 0
34378: PPUSH
34379: CALL 36388 0 6
34383: ST_TO_ADDR
// if not hexes then
34384: LD_VAR 0 14
34388: NOT
34389: IFFALSE 34393
// exit ;
34391: GO 35151
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34393: LD_ADDR_VAR 0 17
34397: PUSH
34398: LD_VAR 0 5
34402: PPUSH
34403: LD_INT 22
34405: PUSH
34406: LD_VAR 0 13
34410: PPUSH
34411: CALL_OW 255
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: PUSH
34420: LD_INT 2
34422: PUSH
34423: LD_INT 30
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 30
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PPUSH
34452: CALL_OW 72
34456: ST_TO_ADDR
// for i = 1 to hexes do
34457: LD_ADDR_VAR 0 9
34461: PUSH
34462: DOUBLE
34463: LD_INT 1
34465: DEC
34466: ST_TO_ADDR
34467: LD_VAR 0 14
34471: PUSH
34472: FOR_TO
34473: IFFALSE 35149
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34475: LD_ADDR_VAR 0 13
34479: PUSH
34480: LD_VAR 0 14
34484: PUSH
34485: LD_VAR 0 9
34489: ARRAY
34490: PUSH
34491: LD_INT 1
34493: ARRAY
34494: PPUSH
34495: LD_VAR 0 14
34499: PUSH
34500: LD_VAR 0 9
34504: ARRAY
34505: PUSH
34506: LD_INT 2
34508: ARRAY
34509: PPUSH
34510: CALL_OW 428
34514: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34515: LD_VAR 0 14
34519: PUSH
34520: LD_VAR 0 9
34524: ARRAY
34525: PUSH
34526: LD_INT 1
34528: ARRAY
34529: PPUSH
34530: LD_VAR 0 14
34534: PUSH
34535: LD_VAR 0 9
34539: ARRAY
34540: PUSH
34541: LD_INT 2
34543: ARRAY
34544: PPUSH
34545: CALL_OW 351
34549: PUSH
34550: LD_VAR 0 14
34554: PUSH
34555: LD_VAR 0 9
34559: ARRAY
34560: PUSH
34561: LD_INT 1
34563: ARRAY
34564: PPUSH
34565: LD_VAR 0 14
34569: PUSH
34570: LD_VAR 0 9
34574: ARRAY
34575: PUSH
34576: LD_INT 2
34578: ARRAY
34579: PPUSH
34580: CALL_OW 488
34584: NOT
34585: OR
34586: PUSH
34587: LD_VAR 0 13
34591: PPUSH
34592: CALL_OW 247
34596: PUSH
34597: LD_INT 3
34599: EQUAL
34600: OR
34601: IFFALSE 34607
// exit ;
34603: POP
34604: POP
34605: GO 35151
// if not tmp then
34607: LD_VAR 0 13
34611: NOT
34612: IFFALSE 34616
// continue ;
34614: GO 34472
// result := true ;
34616: LD_ADDR_VAR 0 8
34620: PUSH
34621: LD_INT 1
34623: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34624: LD_VAR 0 6
34628: PUSH
34629: LD_VAR 0 13
34633: PPUSH
34634: CALL_OW 247
34638: PUSH
34639: LD_INT 2
34641: EQUAL
34642: AND
34643: PUSH
34644: LD_VAR 0 13
34648: PPUSH
34649: CALL_OW 263
34653: PUSH
34654: LD_INT 1
34656: EQUAL
34657: AND
34658: IFFALSE 34822
// begin if IsDrivenBy ( tmp ) then
34660: LD_VAR 0 13
34664: PPUSH
34665: CALL_OW 311
34669: IFFALSE 34673
// continue ;
34671: GO 34472
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34673: LD_VAR 0 6
34677: PPUSH
34678: LD_INT 3
34680: PUSH
34681: LD_INT 60
34683: PUSH
34684: EMPTY
34685: LIST
34686: PUSH
34687: EMPTY
34688: LIST
34689: LIST
34690: PUSH
34691: LD_INT 3
34693: PUSH
34694: LD_INT 55
34696: PUSH
34697: EMPTY
34698: LIST
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PPUSH
34708: CALL_OW 72
34712: IFFALSE 34820
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34714: LD_ADDR_VAR 0 18
34718: PUSH
34719: LD_VAR 0 6
34723: PPUSH
34724: LD_INT 3
34726: PUSH
34727: LD_INT 60
34729: PUSH
34730: EMPTY
34731: LIST
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 3
34739: PUSH
34740: LD_INT 55
34742: PUSH
34743: EMPTY
34744: LIST
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PPUSH
34754: CALL_OW 72
34758: PUSH
34759: LD_INT 1
34761: ARRAY
34762: ST_TO_ADDR
// if IsInUnit ( driver ) then
34763: LD_VAR 0 18
34767: PPUSH
34768: CALL_OW 310
34772: IFFALSE 34783
// ComExit ( driver ) ;
34774: LD_VAR 0 18
34778: PPUSH
34779: CALL 59572 0 1
// AddComEnterUnit ( driver , tmp ) ;
34783: LD_VAR 0 18
34787: PPUSH
34788: LD_VAR 0 13
34792: PPUSH
34793: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34797: LD_VAR 0 18
34801: PPUSH
34802: LD_VAR 0 7
34806: PPUSH
34807: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34811: LD_VAR 0 18
34815: PPUSH
34816: CALL_OW 181
// end ; continue ;
34820: GO 34472
// end ; if not cleaners or not tmp in cleaners then
34822: LD_VAR 0 6
34826: NOT
34827: PUSH
34828: LD_VAR 0 13
34832: PUSH
34833: LD_VAR 0 6
34837: IN
34838: NOT
34839: OR
34840: IFFALSE 35147
// begin if dep then
34842: LD_VAR 0 17
34846: IFFALSE 34982
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34848: LD_ADDR_VAR 0 16
34852: PUSH
34853: LD_VAR 0 17
34857: PUSH
34858: LD_INT 1
34860: ARRAY
34861: PPUSH
34862: CALL_OW 250
34866: PPUSH
34867: LD_VAR 0 17
34871: PUSH
34872: LD_INT 1
34874: ARRAY
34875: PPUSH
34876: CALL_OW 254
34880: PPUSH
34881: LD_INT 5
34883: PPUSH
34884: CALL_OW 272
34888: PUSH
34889: LD_VAR 0 17
34893: PUSH
34894: LD_INT 1
34896: ARRAY
34897: PPUSH
34898: CALL_OW 251
34902: PPUSH
34903: LD_VAR 0 17
34907: PUSH
34908: LD_INT 1
34910: ARRAY
34911: PPUSH
34912: CALL_OW 254
34916: PPUSH
34917: LD_INT 5
34919: PPUSH
34920: CALL_OW 273
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34929: LD_VAR 0 16
34933: PUSH
34934: LD_INT 1
34936: ARRAY
34937: PPUSH
34938: LD_VAR 0 16
34942: PUSH
34943: LD_INT 2
34945: ARRAY
34946: PPUSH
34947: CALL_OW 488
34951: IFFALSE 34982
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34953: LD_VAR 0 13
34957: PPUSH
34958: LD_VAR 0 16
34962: PUSH
34963: LD_INT 1
34965: ARRAY
34966: PPUSH
34967: LD_VAR 0 16
34971: PUSH
34972: LD_INT 2
34974: ARRAY
34975: PPUSH
34976: CALL_OW 111
// continue ;
34980: GO 34472
// end ; end ; r := GetDir ( tmp ) ;
34982: LD_ADDR_VAR 0 15
34986: PUSH
34987: LD_VAR 0 13
34991: PPUSH
34992: CALL_OW 254
34996: ST_TO_ADDR
// if r = 5 then
34997: LD_VAR 0 15
35001: PUSH
35002: LD_INT 5
35004: EQUAL
35005: IFFALSE 35015
// r := 0 ;
35007: LD_ADDR_VAR 0 15
35011: PUSH
35012: LD_INT 0
35014: ST_TO_ADDR
// for j = r to 5 do
35015: LD_ADDR_VAR 0 10
35019: PUSH
35020: DOUBLE
35021: LD_VAR 0 15
35025: DEC
35026: ST_TO_ADDR
35027: LD_INT 5
35029: PUSH
35030: FOR_TO
35031: IFFALSE 35145
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35033: LD_ADDR_VAR 0 11
35037: PUSH
35038: LD_VAR 0 13
35042: PPUSH
35043: CALL_OW 250
35047: PPUSH
35048: LD_VAR 0 10
35052: PPUSH
35053: LD_INT 2
35055: PPUSH
35056: CALL_OW 272
35060: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35061: LD_ADDR_VAR 0 12
35065: PUSH
35066: LD_VAR 0 13
35070: PPUSH
35071: CALL_OW 251
35075: PPUSH
35076: LD_VAR 0 10
35080: PPUSH
35081: LD_INT 2
35083: PPUSH
35084: CALL_OW 273
35088: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35089: LD_VAR 0 11
35093: PPUSH
35094: LD_VAR 0 12
35098: PPUSH
35099: CALL_OW 488
35103: PUSH
35104: LD_VAR 0 11
35108: PPUSH
35109: LD_VAR 0 12
35113: PPUSH
35114: CALL_OW 428
35118: NOT
35119: AND
35120: IFFALSE 35143
// begin ComMoveXY ( tmp , _x , _y ) ;
35122: LD_VAR 0 13
35126: PPUSH
35127: LD_VAR 0 11
35131: PPUSH
35132: LD_VAR 0 12
35136: PPUSH
35137: CALL_OW 111
// break ;
35141: GO 35145
// end ; end ;
35143: GO 35030
35145: POP
35146: POP
// end ; end ;
35147: GO 34472
35149: POP
35150: POP
// end ;
35151: LD_VAR 0 8
35155: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35156: LD_INT 0
35158: PPUSH
// result := true ;
35159: LD_ADDR_VAR 0 3
35163: PUSH
35164: LD_INT 1
35166: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35167: LD_VAR 0 2
35171: PUSH
35172: LD_INT 24
35174: DOUBLE
35175: EQUAL
35176: IFTRUE 35186
35178: LD_INT 33
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35186
35184: GO 35211
35186: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35187: LD_ADDR_VAR 0 3
35191: PUSH
35192: LD_INT 32
35194: PPUSH
35195: LD_VAR 0 1
35199: PPUSH
35200: CALL_OW 321
35204: PUSH
35205: LD_INT 2
35207: EQUAL
35208: ST_TO_ADDR
35209: GO 35531
35211: LD_INT 20
35213: DOUBLE
35214: EQUAL
35215: IFTRUE 35219
35217: GO 35244
35219: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35220: LD_ADDR_VAR 0 3
35224: PUSH
35225: LD_INT 6
35227: PPUSH
35228: LD_VAR 0 1
35232: PPUSH
35233: CALL_OW 321
35237: PUSH
35238: LD_INT 2
35240: EQUAL
35241: ST_TO_ADDR
35242: GO 35531
35244: LD_INT 22
35246: DOUBLE
35247: EQUAL
35248: IFTRUE 35258
35250: LD_INT 36
35252: DOUBLE
35253: EQUAL
35254: IFTRUE 35258
35256: GO 35283
35258: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35259: LD_ADDR_VAR 0 3
35263: PUSH
35264: LD_INT 15
35266: PPUSH
35267: LD_VAR 0 1
35271: PPUSH
35272: CALL_OW 321
35276: PUSH
35277: LD_INT 2
35279: EQUAL
35280: ST_TO_ADDR
35281: GO 35531
35283: LD_INT 30
35285: DOUBLE
35286: EQUAL
35287: IFTRUE 35291
35289: GO 35316
35291: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35292: LD_ADDR_VAR 0 3
35296: PUSH
35297: LD_INT 20
35299: PPUSH
35300: LD_VAR 0 1
35304: PPUSH
35305: CALL_OW 321
35309: PUSH
35310: LD_INT 2
35312: EQUAL
35313: ST_TO_ADDR
35314: GO 35531
35316: LD_INT 28
35318: DOUBLE
35319: EQUAL
35320: IFTRUE 35330
35322: LD_INT 21
35324: DOUBLE
35325: EQUAL
35326: IFTRUE 35330
35328: GO 35355
35330: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35331: LD_ADDR_VAR 0 3
35335: PUSH
35336: LD_INT 21
35338: PPUSH
35339: LD_VAR 0 1
35343: PPUSH
35344: CALL_OW 321
35348: PUSH
35349: LD_INT 2
35351: EQUAL
35352: ST_TO_ADDR
35353: GO 35531
35355: LD_INT 16
35357: DOUBLE
35358: EQUAL
35359: IFTRUE 35363
35361: GO 35390
35363: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_EXP 105
35373: PPUSH
35374: LD_VAR 0 1
35378: PPUSH
35379: CALL_OW 321
35383: PUSH
35384: LD_INT 2
35386: EQUAL
35387: ST_TO_ADDR
35388: GO 35531
35390: LD_INT 19
35392: DOUBLE
35393: EQUAL
35394: IFTRUE 35404
35396: LD_INT 23
35398: DOUBLE
35399: EQUAL
35400: IFTRUE 35404
35402: GO 35431
35404: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35405: LD_ADDR_VAR 0 3
35409: PUSH
35410: LD_EXP 104
35414: PPUSH
35415: LD_VAR 0 1
35419: PPUSH
35420: CALL_OW 321
35424: PUSH
35425: LD_INT 2
35427: EQUAL
35428: ST_TO_ADDR
35429: GO 35531
35431: LD_INT 17
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35464
35439: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35440: LD_ADDR_VAR 0 3
35444: PUSH
35445: LD_INT 39
35447: PPUSH
35448: LD_VAR 0 1
35452: PPUSH
35453: CALL_OW 321
35457: PUSH
35458: LD_INT 2
35460: EQUAL
35461: ST_TO_ADDR
35462: GO 35531
35464: LD_INT 18
35466: DOUBLE
35467: EQUAL
35468: IFTRUE 35472
35470: GO 35497
35472: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35473: LD_ADDR_VAR 0 3
35477: PUSH
35478: LD_INT 40
35480: PPUSH
35481: LD_VAR 0 1
35485: PPUSH
35486: CALL_OW 321
35490: PUSH
35491: LD_INT 2
35493: EQUAL
35494: ST_TO_ADDR
35495: GO 35531
35497: LD_INT 27
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35505
35503: GO 35530
35505: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: LD_INT 35
35513: PPUSH
35514: LD_VAR 0 1
35518: PPUSH
35519: CALL_OW 321
35523: PUSH
35524: LD_INT 2
35526: EQUAL
35527: ST_TO_ADDR
35528: GO 35531
35530: POP
// end ;
35531: LD_VAR 0 3
35535: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35536: LD_INT 0
35538: PPUSH
35539: PPUSH
35540: PPUSH
35541: PPUSH
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
// result := false ;
35549: LD_ADDR_VAR 0 6
35553: PUSH
35554: LD_INT 0
35556: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35557: LD_VAR 0 1
35561: NOT
35562: PUSH
35563: LD_VAR 0 1
35567: PPUSH
35568: CALL_OW 266
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: LD_INT 1
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: IN
35583: NOT
35584: OR
35585: PUSH
35586: LD_VAR 0 2
35590: NOT
35591: OR
35592: PUSH
35593: LD_VAR 0 5
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 2
35606: PUSH
35607: LD_INT 3
35609: PUSH
35610: LD_INT 4
35612: PUSH
35613: LD_INT 5
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: IN
35624: NOT
35625: OR
35626: PUSH
35627: LD_VAR 0 3
35631: PPUSH
35632: LD_VAR 0 4
35636: PPUSH
35637: CALL_OW 488
35641: NOT
35642: OR
35643: IFFALSE 35647
// exit ;
35645: GO 36383
// side := GetSide ( depot ) ;
35647: LD_ADDR_VAR 0 9
35651: PUSH
35652: LD_VAR 0 1
35656: PPUSH
35657: CALL_OW 255
35661: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35662: LD_VAR 0 9
35666: PPUSH
35667: LD_VAR 0 2
35671: PPUSH
35672: CALL 35156 0 2
35676: NOT
35677: IFFALSE 35681
// exit ;
35679: GO 36383
// pom := GetBase ( depot ) ;
35681: LD_ADDR_VAR 0 10
35685: PUSH
35686: LD_VAR 0 1
35690: PPUSH
35691: CALL_OW 274
35695: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35696: LD_ADDR_VAR 0 11
35700: PUSH
35701: LD_VAR 0 2
35705: PPUSH
35706: LD_VAR 0 1
35710: PPUSH
35711: CALL_OW 248
35715: PPUSH
35716: CALL_OW 450
35720: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35721: LD_VAR 0 10
35725: PPUSH
35726: LD_INT 1
35728: PPUSH
35729: CALL_OW 275
35733: PUSH
35734: LD_VAR 0 11
35738: PUSH
35739: LD_INT 1
35741: ARRAY
35742: GREATEREQUAL
35743: PUSH
35744: LD_VAR 0 10
35748: PPUSH
35749: LD_INT 2
35751: PPUSH
35752: CALL_OW 275
35756: PUSH
35757: LD_VAR 0 11
35761: PUSH
35762: LD_INT 2
35764: ARRAY
35765: GREATEREQUAL
35766: AND
35767: PUSH
35768: LD_VAR 0 10
35772: PPUSH
35773: LD_INT 3
35775: PPUSH
35776: CALL_OW 275
35780: PUSH
35781: LD_VAR 0 11
35785: PUSH
35786: LD_INT 3
35788: ARRAY
35789: GREATEREQUAL
35790: AND
35791: NOT
35792: IFFALSE 35796
// exit ;
35794: GO 36383
// if GetBType ( depot ) = b_depot then
35796: LD_VAR 0 1
35800: PPUSH
35801: CALL_OW 266
35805: PUSH
35806: LD_INT 0
35808: EQUAL
35809: IFFALSE 35821
// dist := 28 else
35811: LD_ADDR_VAR 0 14
35815: PUSH
35816: LD_INT 28
35818: ST_TO_ADDR
35819: GO 35829
// dist := 36 ;
35821: LD_ADDR_VAR 0 14
35825: PUSH
35826: LD_INT 36
35828: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35829: LD_VAR 0 1
35833: PPUSH
35834: LD_VAR 0 3
35838: PPUSH
35839: LD_VAR 0 4
35843: PPUSH
35844: CALL_OW 297
35848: PUSH
35849: LD_VAR 0 14
35853: GREATER
35854: IFFALSE 35858
// exit ;
35856: GO 36383
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35858: LD_ADDR_VAR 0 12
35862: PUSH
35863: LD_VAR 0 2
35867: PPUSH
35868: LD_VAR 0 3
35872: PPUSH
35873: LD_VAR 0 4
35877: PPUSH
35878: LD_VAR 0 5
35882: PPUSH
35883: LD_VAR 0 1
35887: PPUSH
35888: CALL_OW 248
35892: PPUSH
35893: LD_INT 0
35895: PPUSH
35896: CALL 36388 0 6
35900: ST_TO_ADDR
// if not hexes then
35901: LD_VAR 0 12
35905: NOT
35906: IFFALSE 35910
// exit ;
35908: GO 36383
// hex := GetHexInfo ( x , y ) ;
35910: LD_ADDR_VAR 0 15
35914: PUSH
35915: LD_VAR 0 3
35919: PPUSH
35920: LD_VAR 0 4
35924: PPUSH
35925: CALL_OW 546
35929: ST_TO_ADDR
// if hex [ 1 ] then
35930: LD_VAR 0 15
35934: PUSH
35935: LD_INT 1
35937: ARRAY
35938: IFFALSE 35942
// exit ;
35940: GO 36383
// height := hex [ 2 ] ;
35942: LD_ADDR_VAR 0 13
35946: PUSH
35947: LD_VAR 0 15
35951: PUSH
35952: LD_INT 2
35954: ARRAY
35955: ST_TO_ADDR
// for i = 1 to hexes do
35956: LD_ADDR_VAR 0 7
35960: PUSH
35961: DOUBLE
35962: LD_INT 1
35964: DEC
35965: ST_TO_ADDR
35966: LD_VAR 0 12
35970: PUSH
35971: FOR_TO
35972: IFFALSE 36302
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35974: LD_VAR 0 12
35978: PUSH
35979: LD_VAR 0 7
35983: ARRAY
35984: PUSH
35985: LD_INT 1
35987: ARRAY
35988: PPUSH
35989: LD_VAR 0 12
35993: PUSH
35994: LD_VAR 0 7
35998: ARRAY
35999: PUSH
36000: LD_INT 2
36002: ARRAY
36003: PPUSH
36004: CALL_OW 488
36008: NOT
36009: PUSH
36010: LD_VAR 0 12
36014: PUSH
36015: LD_VAR 0 7
36019: ARRAY
36020: PUSH
36021: LD_INT 1
36023: ARRAY
36024: PPUSH
36025: LD_VAR 0 12
36029: PUSH
36030: LD_VAR 0 7
36034: ARRAY
36035: PUSH
36036: LD_INT 2
36038: ARRAY
36039: PPUSH
36040: CALL_OW 428
36044: PUSH
36045: LD_INT 0
36047: GREATER
36048: OR
36049: PUSH
36050: LD_VAR 0 12
36054: PUSH
36055: LD_VAR 0 7
36059: ARRAY
36060: PUSH
36061: LD_INT 1
36063: ARRAY
36064: PPUSH
36065: LD_VAR 0 12
36069: PUSH
36070: LD_VAR 0 7
36074: ARRAY
36075: PUSH
36076: LD_INT 2
36078: ARRAY
36079: PPUSH
36080: CALL_OW 351
36084: OR
36085: IFFALSE 36091
// exit ;
36087: POP
36088: POP
36089: GO 36383
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36091: LD_ADDR_VAR 0 8
36095: PUSH
36096: LD_VAR 0 12
36100: PUSH
36101: LD_VAR 0 7
36105: ARRAY
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: PPUSH
36111: LD_VAR 0 12
36115: PUSH
36116: LD_VAR 0 7
36120: ARRAY
36121: PUSH
36122: LD_INT 2
36124: ARRAY
36125: PPUSH
36126: CALL_OW 546
36130: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36131: LD_VAR 0 8
36135: PUSH
36136: LD_INT 1
36138: ARRAY
36139: PUSH
36140: LD_VAR 0 8
36144: PUSH
36145: LD_INT 2
36147: ARRAY
36148: PUSH
36149: LD_VAR 0 13
36153: PUSH
36154: LD_INT 2
36156: PLUS
36157: GREATER
36158: OR
36159: PUSH
36160: LD_VAR 0 8
36164: PUSH
36165: LD_INT 2
36167: ARRAY
36168: PUSH
36169: LD_VAR 0 13
36173: PUSH
36174: LD_INT 2
36176: MINUS
36177: LESS
36178: OR
36179: PUSH
36180: LD_VAR 0 8
36184: PUSH
36185: LD_INT 3
36187: ARRAY
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 8
36194: PUSH
36195: LD_INT 9
36197: PUSH
36198: LD_INT 10
36200: PUSH
36201: LD_INT 11
36203: PUSH
36204: LD_INT 12
36206: PUSH
36207: LD_INT 13
36209: PUSH
36210: LD_INT 16
36212: PUSH
36213: LD_INT 17
36215: PUSH
36216: LD_INT 18
36218: PUSH
36219: LD_INT 19
36221: PUSH
36222: LD_INT 20
36224: PUSH
36225: LD_INT 21
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: IN
36243: NOT
36244: OR
36245: PUSH
36246: LD_VAR 0 8
36250: PUSH
36251: LD_INT 5
36253: ARRAY
36254: NOT
36255: OR
36256: PUSH
36257: LD_VAR 0 8
36261: PUSH
36262: LD_INT 6
36264: ARRAY
36265: PUSH
36266: LD_INT 1
36268: PUSH
36269: LD_INT 2
36271: PUSH
36272: LD_INT 7
36274: PUSH
36275: LD_INT 9
36277: PUSH
36278: LD_INT 10
36280: PUSH
36281: LD_INT 11
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: IN
36292: NOT
36293: OR
36294: IFFALSE 36300
// exit ;
36296: POP
36297: POP
36298: GO 36383
// end ;
36300: GO 35971
36302: POP
36303: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36304: LD_VAR 0 9
36308: PPUSH
36309: LD_VAR 0 3
36313: PPUSH
36314: LD_VAR 0 4
36318: PPUSH
36319: LD_INT 20
36321: PPUSH
36322: CALL 28329 0 4
36326: PUSH
36327: LD_INT 4
36329: ARRAY
36330: IFFALSE 36334
// exit ;
36332: GO 36383
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36334: LD_VAR 0 2
36338: PUSH
36339: LD_INT 29
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: IN
36349: PUSH
36350: LD_VAR 0 3
36354: PPUSH
36355: LD_VAR 0 4
36359: PPUSH
36360: LD_VAR 0 9
36364: PPUSH
36365: CALL_OW 440
36369: NOT
36370: AND
36371: IFFALSE 36375
// exit ;
36373: GO 36383
// result := true ;
36375: LD_ADDR_VAR 0 6
36379: PUSH
36380: LD_INT 1
36382: ST_TO_ADDR
// end ;
36383: LD_VAR 0 6
36387: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36388: LD_INT 0
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
36394: PPUSH
36395: PPUSH
36396: PPUSH
36397: PPUSH
36398: PPUSH
36399: PPUSH
36400: PPUSH
36401: PPUSH
36402: PPUSH
36403: PPUSH
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
36425: PPUSH
36426: PPUSH
36427: PPUSH
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
36434: PPUSH
36435: PPUSH
36436: PPUSH
36437: PPUSH
36438: PPUSH
36439: PPUSH
36440: PPUSH
36441: PPUSH
36442: PPUSH
36443: PPUSH
36444: PPUSH
36445: PPUSH
36446: PPUSH
36447: PPUSH
// result = [ ] ;
36448: LD_ADDR_VAR 0 7
36452: PUSH
36453: EMPTY
36454: ST_TO_ADDR
// temp_list = [ ] ;
36455: LD_ADDR_VAR 0 9
36459: PUSH
36460: EMPTY
36461: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36462: LD_VAR 0 4
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: LD_INT 2
36475: PUSH
36476: LD_INT 3
36478: PUSH
36479: LD_INT 4
36481: PUSH
36482: LD_INT 5
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: IN
36493: NOT
36494: PUSH
36495: LD_VAR 0 1
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: IN
36510: PUSH
36511: LD_VAR 0 5
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 3
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: IN
36530: NOT
36531: AND
36532: OR
36533: IFFALSE 36537
// exit ;
36535: GO 54928
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36537: LD_VAR 0 1
36541: PUSH
36542: LD_INT 6
36544: PUSH
36545: LD_INT 7
36547: PUSH
36548: LD_INT 8
36550: PUSH
36551: LD_INT 13
36553: PUSH
36554: LD_INT 12
36556: PUSH
36557: LD_INT 15
36559: PUSH
36560: LD_INT 11
36562: PUSH
36563: LD_INT 14
36565: PUSH
36566: LD_INT 10
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: IN
36580: IFFALSE 36590
// btype = b_lab ;
36582: LD_ADDR_VAR 0 1
36586: PUSH
36587: LD_INT 6
36589: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36590: LD_VAR 0 6
36594: PUSH
36595: LD_INT 0
36597: PUSH
36598: LD_INT 1
36600: PUSH
36601: LD_INT 2
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: IN
36609: NOT
36610: PUSH
36611: LD_VAR 0 1
36615: PUSH
36616: LD_INT 0
36618: PUSH
36619: LD_INT 1
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 3
36627: PUSH
36628: LD_INT 6
36630: PUSH
36631: LD_INT 36
36633: PUSH
36634: LD_INT 4
36636: PUSH
36637: LD_INT 5
36639: PUSH
36640: LD_INT 31
36642: PUSH
36643: LD_INT 32
36645: PUSH
36646: LD_INT 33
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: IN
36662: NOT
36663: PUSH
36664: LD_VAR 0 6
36668: PUSH
36669: LD_INT 1
36671: EQUAL
36672: AND
36673: OR
36674: PUSH
36675: LD_VAR 0 1
36679: PUSH
36680: LD_INT 2
36682: PUSH
36683: LD_INT 3
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: IN
36690: NOT
36691: PUSH
36692: LD_VAR 0 6
36696: PUSH
36697: LD_INT 2
36699: EQUAL
36700: AND
36701: OR
36702: IFFALSE 36712
// mode = 0 ;
36704: LD_ADDR_VAR 0 6
36708: PUSH
36709: LD_INT 0
36711: ST_TO_ADDR
// case mode of 0 :
36712: LD_VAR 0 6
36716: PUSH
36717: LD_INT 0
36719: DOUBLE
36720: EQUAL
36721: IFTRUE 36725
36723: GO 48178
36725: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36726: LD_ADDR_VAR 0 11
36730: PUSH
36731: LD_INT 0
36733: PUSH
36734: LD_INT 0
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 0
36743: PUSH
36744: LD_INT 1
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: LD_INT 1
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 1
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: LD_INT 1
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 0
36819: PUSH
36820: LD_INT 2
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 3
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 3
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36919: LD_ADDR_VAR 0 12
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: LD_INT 0
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 1
36939: NEG
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 1
36947: PUSH
36948: LD_INT 0
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: LD_INT 1
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: NEG
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 1
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 2
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: LD_INT 1
37035: PUSH
37036: EMPTY
37037: LIST
37038: LIST
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 3
37076: NEG
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 3
37087: NEG
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: LIST
37114: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37115: LD_ADDR_VAR 0 13
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 0
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 1
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 1
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: LD_INT 0
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: NEG
37185: PUSH
37186: LD_INT 1
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: LD_INT 2
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 2
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: LD_INT 2
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 2
37238: NEG
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 2
37250: NEG
37251: PUSH
37252: LD_INT 2
37254: NEG
37255: PUSH
37256: EMPTY
37257: LIST
37258: LIST
37259: PUSH
37260: LD_INT 2
37262: NEG
37263: PUSH
37264: LD_INT 3
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 3
37274: NEG
37275: PUSH
37276: LD_INT 2
37278: NEG
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 3
37286: NEG
37287: PUSH
37288: LD_INT 3
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37314: LD_ADDR_VAR 0 14
37318: PUSH
37319: LD_INT 0
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 1
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 1
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 1
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 1
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: NEG
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 1
37383: NEG
37384: PUSH
37385: LD_INT 1
37387: NEG
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 1
37395: NEG
37396: PUSH
37397: LD_INT 2
37399: NEG
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 0
37407: PUSH
37408: LD_INT 2
37410: NEG
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 1
37421: NEG
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 1
37449: NEG
37450: PUSH
37451: LD_INT 1
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: LD_INT 3
37464: NEG
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 0
37472: PUSH
37473: LD_INT 3
37475: NEG
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37510: LD_ADDR_VAR 0 15
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 0
37527: PUSH
37528: LD_INT 1
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: LD_INT 1
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 1
37568: NEG
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: LD_INT 1
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 1
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 2
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 2
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 1
37622: NEG
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: NEG
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 2
37644: NEG
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: LD_INT 1
37659: NEG
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 3
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 3
37677: PUSH
37678: LD_INT 1
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37703: LD_ADDR_VAR 0 16
37707: PUSH
37708: LD_INT 0
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 1
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 1
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 1
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: NEG
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: PUSH
37770: LD_INT 1
37772: NEG
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: LD_INT 2
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 1
37816: PUSH
37817: LD_INT 2
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: NEG
37839: PUSH
37840: LD_INT 2
37842: NEG
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 3
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 3
37860: PUSH
37861: LD_INT 3
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37896: LD_ADDR_VAR 0 17
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 0
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 1
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 0
37944: PUSH
37945: LD_INT 1
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 1
37965: NEG
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: LD_INT 2
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 2
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 1
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 2
38083: NEG
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38126: LD_ADDR_VAR 0 18
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: NEG
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 1
38184: NEG
38185: PUSH
38186: LD_INT 0
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 2
38211: NEG
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: LD_INT 2
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 1
38233: NEG
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: PUSH
38252: LD_INT 1
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 1
38291: NEG
38292: PUSH
38293: LD_INT 1
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 2
38302: NEG
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: LD_INT 1
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: LD_INT 2
38329: NEG
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38356: LD_ADDR_VAR 0 19
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: NEG
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: NEG
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: NEG
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38586: LD_ADDR_VAR 0 20
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 0
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 0
38634: PUSH
38635: LD_INT 1
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: LD_INT 0
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: LD_INT 1
38659: NEG
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 1
38667: NEG
38668: PUSH
38669: LD_INT 2
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 2
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 1
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: LD_INT 0
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 2
38721: PUSH
38722: LD_INT 2
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: PUSH
38732: LD_INT 2
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 2
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: NEG
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: NEG
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: NEG
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: LD_INT 2
38789: NEG
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38816: LD_ADDR_VAR 0 21
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 2
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: LD_INT 1
38923: NEG
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 2
38931: PUSH
38932: LD_INT 0
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: LD_INT 2
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 1
38981: NEG
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: LD_INT 1
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 2
39015: NEG
39016: PUSH
39017: LD_INT 2
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39046: LD_ADDR_VAR 0 22
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 1
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 0
39139: PUSH
39140: LD_INT 2
39142: NEG
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 1
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 0
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: LD_INT 1
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 2
39222: NEG
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 1
39237: NEG
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: NEG
39246: PUSH
39247: LD_INT 2
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39276: LD_ADDR_VAR 0 23
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 0
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 1
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 0
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 0
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: NEG
39464: PUSH
39465: LD_INT 1
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: NEG
39476: PUSH
39477: LD_INT 2
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: NEG
39488: PUSH
39489: LD_INT 3
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 1
39499: NEG
39500: PUSH
39501: LD_INT 3
39503: NEG
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: LD_INT 2
39514: NEG
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39556: LD_ADDR_VAR 0 24
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 0
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: LD_INT 1
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: PUSH
39585: LD_INT 0
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: LD_INT 1
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 1
39614: NEG
39615: PUSH
39616: LD_INT 0
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: LD_INT 1
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: LD_INT 2
39641: NEG
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 0
39649: PUSH
39650: LD_INT 2
39652: NEG
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 2
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 2
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: LD_INT 1
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: NEG
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: LD_INT 1
39747: NEG
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: NEG
39756: PUSH
39757: LD_INT 2
39759: NEG
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 2
39770: NEG
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 3
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 3
39799: PUSH
39800: LD_INT 2
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39832: LD_ADDR_VAR 0 25
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 0
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: NEG
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 1
39913: NEG
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: EMPTY
39931: LIST
39932: LIST
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: PUSH
39978: LD_INT 2
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 2
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 1
39997: NEG
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 3
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 3
40053: PUSH
40054: LD_INT 2
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 3
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: LD_INT 3
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40106: LD_ADDR_VAR 0 26
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 1
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: NEG
40165: PUSH
40166: LD_INT 0
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: LD_INT 2
40191: NEG
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: LD_INT 2
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: LD_INT 1
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 2
40241: PUSH
40242: LD_INT 2
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 0
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: PUSH
40269: LD_INT 1
40271: NEG
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 2
40282: NEG
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: NEG
40306: PUSH
40307: LD_INT 2
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: LD_INT 3
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 2
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40382: LD_ADDR_VAR 0 27
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: LD_INT 0
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 0
40399: PUSH
40400: LD_INT 1
40402: NEG
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 2
40507: PUSH
40508: LD_INT 1
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: PUSH
40528: LD_INT 2
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 0
40537: PUSH
40538: LD_INT 2
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 1
40547: NEG
40548: PUSH
40549: LD_INT 1
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: NEG
40570: PUSH
40571: LD_INT 1
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: NEG
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 2
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 3
40615: NEG
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 3
40627: NEG
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40662: LD_ADDR_VAR 0 28
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 1
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 1
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 0
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 1
40720: NEG
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 2
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 2
40758: NEG
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 2
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: PUSH
40808: LD_INT 2
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 0
40817: PUSH
40818: LD_INT 2
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 1
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: NEG
40862: PUSH
40863: LD_INT 2
40865: NEG
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: NEG
40874: PUSH
40875: LD_INT 3
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: LD_INT 3
40889: NEG
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 3
40897: NEG
40898: PUSH
40899: LD_INT 1
40901: NEG
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 3
40909: NEG
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40944: LD_ADDR_VAR 0 29
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 0
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 1
40972: PUSH
40973: LD_INT 0
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: NEG
41003: PUSH
41004: LD_INT 0
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: PUSH
41011: LD_INT 1
41013: NEG
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: NEG
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 2
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: LD_INT 1
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: LD_INT 2
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 2
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 2
41110: NEG
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: NEG
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: LD_INT 3
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 3
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: LD_INT 3
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: LD_INT 2
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: PUSH
41186: LD_INT 3
41188: NEG
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41223: LD_ADDR_VAR 0 30
41227: PUSH
41228: LD_INT 0
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 1
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: NEG
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 2
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: EMPTY
41343: LIST
41344: LIST
41345: PUSH
41346: LD_INT 2
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 2
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 0
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 3
41435: PUSH
41436: LD_INT 2
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41501: LD_ADDR_VAR 0 31
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 2
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: EMPTY
41610: LIST
41611: LIST
41612: PUSH
41613: LD_INT 2
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: PUSH
41626: LD_INT 2
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 1
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 2
41678: NEG
41679: PUSH
41680: LD_INT 2
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: LD_INT 3
41694: NEG
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: LD_INT 3
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: LD_INT 2
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: PUSH
41742: LD_INT 3
41744: NEG
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41779: LD_ADDR_VAR 0 32
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: LD_INT 1
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 1
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 0
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: LD_INT 2
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 0
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 2
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: LD_INT 2
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 1
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 2
41945: NEG
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 3
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 1
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: LD_INT 2
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 3
42022: NEG
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42057: LD_ADDR_VAR 0 33
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 1
42085: PUSH
42086: LD_INT 0
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: PUSH
42096: LD_INT 1
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 1
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: LD_INT 1
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 2
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: NEG
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 3
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 3
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: NEG
42302: PUSH
42303: LD_INT 2
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: LIST
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42336: LD_ADDR_VAR 0 34
42340: PUSH
42341: LD_INT 0
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 1
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 1
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: NEG
42406: PUSH
42407: LD_INT 1
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 2
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 2
42451: PUSH
42452: LD_INT 1
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 2
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 1
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 1
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: NEG
42516: PUSH
42517: LD_INT 2
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: NEG
42528: PUSH
42529: LD_INT 3
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 2
42542: NEG
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 3
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: PUSH
42561: LD_INT 3
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 3
42581: NEG
42582: PUSH
42583: LD_INT 1
42585: NEG
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42616: LD_ADDR_VAR 0 35
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 1
42644: PUSH
42645: LD_INT 0
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: LD_INT 1
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 1
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: PUSH
42698: LD_INT 1
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42728: LD_ADDR_VAR 0 36
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 0
42745: PUSH
42746: LD_INT 1
42748: NEG
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: LD_INT 1
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: LD_INT 0
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 2
42813: NEG
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42840: LD_ADDR_VAR 0 37
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 1
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: NEG
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42952: LD_ADDR_VAR 0 38
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: LD_INT 0
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 1
42972: NEG
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 0
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 0
43000: PUSH
43001: LD_INT 1
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 1
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43064: LD_ADDR_VAR 0 39
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 0
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: LD_INT 0
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 1
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: LD_INT 2
43149: NEG
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: LD_INT 2
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43176: LD_ADDR_VAR 0 40
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 0
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 1
43214: PUSH
43215: LD_INT 1
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 1
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 1
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 1
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: LIST
43284: LIST
43285: LIST
43286: LIST
43287: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43288: LD_ADDR_VAR 0 41
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 1
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 2
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 1
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: PUSH
43403: LD_INT 1
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: PUSH
43410: LD_INT 2
43412: PUSH
43413: LD_INT 2
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 2
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: NEG
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: NEG
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 2
43478: NEG
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: PUSH
43491: LD_INT 1
43493: NEG
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 3
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 3
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 3
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 3
43531: PUSH
43532: LD_INT 3
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 3
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: LD_INT 2
43551: NEG
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 3
43562: NEG
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 3
43573: NEG
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 3
43585: NEG
43586: PUSH
43587: LD_INT 2
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 3
43597: NEG
43598: PUSH
43599: LD_INT 3
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: LIST
43633: LIST
43634: LIST
43635: LIST
43636: LIST
43637: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43638: LD_ADDR_VAR 0 42
43642: PUSH
43643: LD_INT 0
43645: PUSH
43646: LD_INT 0
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: LD_INT 1
43658: NEG
43659: PUSH
43660: EMPTY
43661: LIST
43662: LIST
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 1
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: NEG
43708: PUSH
43709: LD_INT 1
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: LD_INT 2
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: LD_INT 2
43734: NEG
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 1
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 2
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: LD_INT 1
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 2
43804: NEG
43805: PUSH
43806: LD_INT 1
43808: NEG
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: LD_INT 2
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 3
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 3
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 3
43855: NEG
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: LD_INT 2
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 3
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 3
43884: PUSH
43885: LD_INT 3
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 3
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 3
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 3
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 2
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: LD_INT 3
43935: NEG
43936: PUSH
43937: LD_INT 2
43939: NEG
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 3
43947: NEG
43948: PUSH
43949: LD_INT 3
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: LIST
43985: LIST
43986: LIST
43987: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43988: LD_ADDR_VAR 0 43
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 0
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: LD_INT 1
44008: NEG
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 1
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: NEG
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 2
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 2
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: LD_INT 1
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 2
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 2
44165: NEG
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 0
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 1
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 2
44211: PUSH
44212: LD_INT 1
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 3
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 3
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 3
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 2
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 3
44284: NEG
44285: PUSH
44286: LD_INT 0
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 3
44295: NEG
44296: PUSH
44297: LD_INT 1
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44336: LD_ADDR_VAR 0 44
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 0
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: LD_INT 3
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 2
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 3
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 3
44559: PUSH
44560: LD_INT 1
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 3
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 3
44579: PUSH
44580: LD_INT 3
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 2
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 3
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 3
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 3
44633: NEG
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 3
44645: NEG
44646: PUSH
44647: LD_INT 3
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: LIST
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44686: LD_ADDR_VAR 0 45
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: NEG
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 2
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 1
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 2
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: LD_INT 3
44880: NEG
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 1
44888: NEG
44889: PUSH
44890: LD_INT 3
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 0
44900: PUSH
44901: LD_INT 3
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: LD_INT 2
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 3
44922: PUSH
44923: LD_INT 2
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 3
44932: PUSH
44933: LD_INT 3
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: LD_INT 3
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: LD_INT 3
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 0
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 1
44972: NEG
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 3
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 3
44995: NEG
44996: PUSH
44997: LD_INT 3
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: LIST
45034: LIST
45035: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45036: LD_ADDR_VAR 0 46
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 1
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 3
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: LD_INT 3
45240: NEG
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: PUSH
45268: LD_INT 3
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 1
45290: PUSH
45291: LD_INT 3
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 0
45300: PUSH
45301: LD_INT 3
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: NEG
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 3
45332: NEG
45333: PUSH
45334: LD_INT 0
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 3
45343: NEG
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45384: LD_ADDR_VAR 0 47
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: NEG
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45535: LD_ADDR_VAR 0 48
45539: PUSH
45540: LD_INT 0
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 0
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 1
45563: PUSH
45564: LD_INT 0
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: PUSH
45574: LD_INT 1
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: NEG
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: NEG
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 2
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 2
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45682: LD_ADDR_VAR 0 49
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 0
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 2
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 2
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 2
45807: PUSH
45808: EMPTY
45809: LIST
45810: LIST
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45826: LD_ADDR_VAR 0 50
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 2
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45970: LD_ADDR_VAR 0 51
45974: PUSH
45975: LD_INT 0
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 0
45987: PUSH
45988: LD_INT 1
45990: NEG
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: LD_INT 1
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 0
46018: PUSH
46019: LD_INT 1
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 0
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 2
46082: NEG
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46117: LD_ADDR_VAR 0 52
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 1
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 0
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 1
46186: NEG
46187: PUSH
46188: LD_INT 1
46190: NEG
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: NEG
46211: PUSH
46212: LD_INT 1
46214: PUSH
46215: EMPTY
46216: LIST
46217: LIST
46218: PUSH
46219: LD_INT 2
46221: NEG
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 2
46232: NEG
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 2
46244: NEG
46245: PUSH
46246: LD_INT 2
46248: NEG
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46268: LD_ADDR_VAR 0 53
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 1
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: NEG
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: LD_INT 2
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 1
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: PUSH
46404: LD_INT 2
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 2
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46498: LD_ADDR_VAR 0 54
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 2
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: PUSH
46614: LD_INT 0
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 2
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 2
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 2
46674: NEG
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: NEG
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: NEG
46698: PUSH
46699: LD_INT 2
46701: NEG
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46728: LD_ADDR_VAR 0 55
46732: PUSH
46733: LD_INT 0
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 1
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 2
46853: PUSH
46854: LD_INT 1
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: LD_INT 2
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: LD_INT 2
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 1
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: NEG
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: NEG
46928: PUSH
46929: LD_INT 2
46931: NEG
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46958: LD_ADDR_VAR 0 56
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 0
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 2
47073: PUSH
47074: LD_INT 0
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: LD_INT 2
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 2
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 2
47134: NEG
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: LD_INT 2
47161: NEG
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47188: LD_ADDR_VAR 0 57
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 1
47216: PUSH
47217: LD_INT 0
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 2
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 2
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: PUSH
47334: LD_INT 2
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 0
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 2
47364: NEG
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 2
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47418: LD_ADDR_VAR 0 58
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 1
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 0
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 0
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: NEG
47618: PUSH
47619: LD_INT 2
47621: NEG
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47648: LD_ADDR_VAR 0 59
47652: PUSH
47653: LD_INT 0
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47736: LD_ADDR_VAR 0 60
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 1
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 1
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 1
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 0
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: LD_INT 1
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47824: LD_ADDR_VAR 0 61
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 1
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 0
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 1
47882: NEG
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47912: LD_ADDR_VAR 0 62
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: LD_INT 0
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48000: LD_ADDR_VAR 0 63
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 1
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48088: LD_ADDR_VAR 0 64
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: ST_TO_ADDR
// end ; 1 :
48176: GO 54073
48178: LD_INT 1
48180: DOUBLE
48181: EQUAL
48182: IFTRUE 48186
48184: GO 50809
48186: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48187: LD_ADDR_VAR 0 11
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 3
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 3
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48231: LD_ADDR_VAR 0 12
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 1
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 3
48249: PUSH
48250: LD_INT 0
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 3
48259: PUSH
48260: LD_INT 1
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: LIST
48271: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48272: LD_ADDR_VAR 0 13
48276: PUSH
48277: LD_INT 3
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 3
48289: PUSH
48290: LD_INT 3
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 2
48299: PUSH
48300: LD_INT 3
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48312: LD_ADDR_VAR 0 14
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 3
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: LIST
48352: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48353: LD_ADDR_VAR 0 15
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: NEG
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 3
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48397: LD_ADDR_VAR 0 16
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 3
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 3
48416: NEG
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 3
48428: NEG
48429: PUSH
48430: LD_INT 3
48432: NEG
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: LIST
48442: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48443: LD_ADDR_VAR 0 17
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: LD_INT 3
48454: NEG
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 3
48465: NEG
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48487: LD_ADDR_VAR 0 18
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48528: LD_ADDR_VAR 0 19
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 3
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: LIST
48567: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48568: LD_ADDR_VAR 0 20
48572: PUSH
48573: LD_INT 1
48575: PUSH
48576: LD_INT 3
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: LIST
48608: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48609: LD_ADDR_VAR 0 21
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 3
48627: NEG
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 3
48638: NEG
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48653: LD_ADDR_VAR 0 22
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 3
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 3
48672: NEG
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 3
48684: NEG
48685: PUSH
48686: LD_INT 3
48688: NEG
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: LIST
48698: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48699: LD_ADDR_VAR 0 23
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 3
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 4
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 3
48732: NEG
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48743: LD_ADDR_VAR 0 24
48747: PUSH
48748: LD_INT 3
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 3
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 4
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48784: LD_ADDR_VAR 0 25
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 4
48801: PUSH
48802: LD_INT 3
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 3
48811: PUSH
48812: LD_INT 4
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: LIST
48823: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48824: LD_ADDR_VAR 0 26
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 3
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 4
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: LIST
48864: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48865: LD_ADDR_VAR 0 27
48869: PUSH
48870: LD_INT 3
48872: NEG
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: EMPTY
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 3
48883: NEG
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 4
48894: NEG
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48909: LD_ADDR_VAR 0 28
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: LD_INT 4
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 4
48940: NEG
48941: PUSH
48942: LD_INT 3
48944: NEG
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: LIST
48954: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48955: LD_ADDR_VAR 0 29
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: LD_INT 3
48966: NEG
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: LD_INT 3
48977: NEG
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: LD_INT 2
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: LD_INT 4
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 0
49008: PUSH
49009: LD_INT 4
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 3
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: LD_INT 5
49034: NEG
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 5
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: LD_INT 4
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 6
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 0
49076: PUSH
49077: LD_INT 6
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 5
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49110: LD_ADDR_VAR 0 30
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 3
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 4
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 4
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 4
49179: PUSH
49180: LD_INT 1
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 5
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 5
49200: PUSH
49201: LD_INT 1
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 5
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 6
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 6
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49253: LD_ADDR_VAR 0 31
49257: PUSH
49258: LD_INT 3
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 3
49270: PUSH
49271: LD_INT 3
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 3
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 4
49290: PUSH
49291: LD_INT 3
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 4
49300: PUSH
49301: LD_INT 4
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 5
49320: PUSH
49321: LD_INT 4
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 5
49330: PUSH
49331: LD_INT 5
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 4
49340: PUSH
49341: LD_INT 5
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 6
49350: PUSH
49351: LD_INT 5
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 6
49360: PUSH
49361: LD_INT 6
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 5
49370: PUSH
49371: LD_INT 6
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49392: LD_ADDR_VAR 0 32
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 3
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 3
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 4
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 4
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: LD_INT 3
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 5
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 5
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 4
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 6
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 6
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 5
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49535: LD_ADDR_VAR 0 33
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 3
49553: NEG
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 4
49587: NEG
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 4
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 4
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 5
49621: NEG
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 5
49632: NEG
49633: PUSH
49634: LD_INT 1
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 5
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 6
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 6
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49690: LD_ADDR_VAR 0 34
49694: PUSH
49695: LD_INT 2
49697: NEG
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 3
49709: NEG
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: NEG
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: LD_INT 4
49737: NEG
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 4
49745: NEG
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 4
49757: NEG
49758: PUSH
49759: LD_INT 4
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 4
49769: NEG
49770: PUSH
49771: LD_INT 5
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 5
49781: NEG
49782: PUSH
49783: LD_INT 4
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 5
49793: NEG
49794: PUSH
49795: LD_INT 5
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 5
49805: NEG
49806: PUSH
49807: LD_INT 6
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 6
49817: NEG
49818: PUSH
49819: LD_INT 5
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 6
49829: NEG
49830: PUSH
49831: LD_INT 6
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49853: LD_ADDR_VAR 0 41
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 3
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49897: LD_ADDR_VAR 0 42
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 2
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: LIST
49937: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49938: LD_ADDR_VAR 0 43
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: LD_INT 2
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 3
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: LIST
49977: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49978: LD_ADDR_VAR 0 44
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 2
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 3
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50019: LD_ADDR_VAR 0 45
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 3
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50063: LD_ADDR_VAR 0 46
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 2
50082: NEG
50083: PUSH
50084: LD_INT 3
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 3
50094: NEG
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: LIST
50108: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50109: LD_ADDR_VAR 0 47
50113: PUSH
50114: LD_INT 2
50116: NEG
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50142: LD_ADDR_VAR 0 48
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: LD_INT 2
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 2
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50173: LD_ADDR_VAR 0 49
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50202: LD_ADDR_VAR 0 50
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: LD_INT 3
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 3
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50231: LD_ADDR_VAR 0 51
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50262: LD_ADDR_VAR 0 52
50266: PUSH
50267: LD_INT 3
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: LD_INT 2
50285: NEG
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50295: LD_ADDR_VAR 0 53
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 3
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 3
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50339: LD_ADDR_VAR 0 54
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 3
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50380: LD_ADDR_VAR 0 55
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 3
50397: PUSH
50398: LD_INT 3
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: LD_INT 3
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50420: LD_ADDR_VAR 0 56
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: LIST
50460: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50461: LD_ADDR_VAR 0 57
50465: PUSH
50466: LD_INT 2
50468: NEG
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 3
50479: NEG
50480: PUSH
50481: LD_INT 0
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 3
50490: NEG
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50505: LD_ADDR_VAR 0 58
50509: PUSH
50510: LD_INT 2
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 3
50536: NEG
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: LIST
50550: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50551: LD_ADDR_VAR 0 59
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50595: LD_ADDR_VAR 0 60
50599: PUSH
50600: LD_INT 1
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: LIST
50635: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50636: LD_ADDR_VAR 0 61
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 1
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 2
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: LIST
50675: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50676: LD_ADDR_VAR 0 62
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50717: LD_ADDR_VAR 0 63
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: LIST
50760: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50761: LD_ADDR_VAR 0 64
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: LD_INT 2
50772: NEG
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 2
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: LIST
50806: ST_TO_ADDR
// end ; 2 :
50807: GO 54073
50809: LD_INT 2
50811: DOUBLE
50812: EQUAL
50813: IFTRUE 50817
50815: GO 54072
50817: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50818: LD_ADDR_VAR 0 29
50822: PUSH
50823: LD_INT 4
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 4
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 5
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 5
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 4
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 3
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 5
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 3
50918: PUSH
50919: LD_INT 3
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 3
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 4
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 4
50948: PUSH
50949: LD_INT 4
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 3
50958: PUSH
50959: LD_INT 4
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: LD_INT 3
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 2
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 4
50988: PUSH
50989: LD_INT 2
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 4
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 4
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 3
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: LD_INT 4
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 5
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: LD_INT 5
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: NEG
51059: PUSH
51060: LD_INT 4
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: LD_INT 3
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 2
51080: PUSH
51081: LD_INT 5
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: LD_INT 1
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 3
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: NEG
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 4
51168: NEG
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 4
51180: NEG
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 4
51203: NEG
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 4
51215: NEG
51216: PUSH
51217: LD_INT 5
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: NEG
51228: PUSH
51229: LD_INT 4
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: LD_INT 3
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 4
51251: NEG
51252: PUSH
51253: LD_INT 3
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 5
51263: NEG
51264: PUSH
51265: LD_INT 4
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 5
51275: NEG
51276: PUSH
51277: LD_INT 5
51279: NEG
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: LD_INT 5
51291: NEG
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 5
51299: NEG
51300: PUSH
51301: LD_INT 3
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51356: LD_ADDR_VAR 0 30
51360: PUSH
51361: LD_INT 4
51363: PUSH
51364: LD_INT 4
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 4
51373: PUSH
51374: LD_INT 3
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 5
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 5
51393: PUSH
51394: LD_INT 5
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 4
51403: PUSH
51404: LD_INT 5
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 4
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 3
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 5
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: LD_INT 5
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 3
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 4
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 4
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 3
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: LD_INT 2
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: LD_INT 4
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: LD_INT 2
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 4
51546: NEG
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 4
51557: NEG
51558: PUSH
51559: LD_INT 1
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 3
51580: NEG
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 4
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 5
51602: NEG
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 5
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 5
51625: NEG
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 3
51660: NEG
51661: PUSH
51662: LD_INT 4
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 2
51684: NEG
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 4
51708: NEG
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 4
51720: NEG
51721: PUSH
51722: LD_INT 4
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: LD_INT 4
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 4
51744: NEG
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: LD_INT 5
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: LD_INT 4
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 3
51792: NEG
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 3
51803: NEG
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 4
51815: NEG
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 5
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: LD_INT 3
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: LD_INT 5
51850: NEG
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51903: LD_ADDR_VAR 0 31
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: LD_INT 4
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: LD_INT 4
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 1
51940: PUSH
51941: LD_INT 5
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 5
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 4
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 2
51982: PUSH
51983: LD_INT 5
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: LD_INT 0
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: LD_INT 1
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: NEG
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: NEG
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: NEG
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 4
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 4
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 4
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: LD_INT 2
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 4
52105: NEG
52106: PUSH
52107: LD_INT 4
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 4
52117: NEG
52118: PUSH
52119: LD_INT 5
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: LD_INT 4
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: LD_INT 3
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 4
52153: NEG
52154: PUSH
52155: LD_INT 3
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 5
52165: NEG
52166: PUSH
52167: LD_INT 4
52169: NEG
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 5
52177: NEG
52178: PUSH
52179: LD_INT 5
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 3
52189: NEG
52190: PUSH
52191: LD_INT 5
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 5
52201: NEG
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 3
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 4
52227: NEG
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 1
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: LD_INT 4
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 4
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 4
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 5
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 5
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 4
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 3
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 3
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 5
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52453: LD_ADDR_VAR 0 32
52457: PUSH
52458: LD_INT 4
52460: NEG
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 4
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 3
52494: NEG
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 5
52516: NEG
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 5
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 5
52539: NEG
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 3
52562: NEG
52563: PUSH
52564: LD_INT 3
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: LD_INT 4
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: NEG
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 2
52602: NEG
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 3
52610: NEG
52611: PUSH
52612: LD_INT 2
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 4
52622: NEG
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 4
52634: NEG
52635: PUSH
52636: LD_INT 4
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: LD_INT 4
52650: NEG
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 4
52658: NEG
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 5
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 4
52695: NEG
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 1
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: NEG
52726: PUSH
52727: LD_INT 4
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: LD_INT 5
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: PUSH
52750: LD_INT 3
52752: NEG
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 2
52760: NEG
52761: PUSH
52762: LD_INT 5
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 3
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 1
52785: NEG
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 4
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 4
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 4
52855: PUSH
52856: LD_INT 2
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 4
52865: PUSH
52866: LD_INT 4
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 4
52875: PUSH
52876: LD_INT 3
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 5
52885: PUSH
52886: LD_INT 4
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 5
52895: PUSH
52896: LD_INT 5
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 4
52905: PUSH
52906: LD_INT 5
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: LD_INT 4
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 5
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: LD_INT 5
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53000: LD_ADDR_VAR 0 33
53004: PUSH
53005: LD_INT 4
53007: NEG
53008: PUSH
53009: LD_INT 4
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 4
53019: NEG
53020: PUSH
53021: LD_INT 5
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: LD_INT 4
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 4
53055: NEG
53056: PUSH
53057: LD_INT 3
53059: NEG
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 5
53067: NEG
53068: PUSH
53069: LD_INT 4
53071: NEG
53072: PUSH
53073: EMPTY
53074: LIST
53075: LIST
53076: PUSH
53077: LD_INT 5
53079: NEG
53080: PUSH
53081: LD_INT 5
53083: NEG
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 3
53091: NEG
53092: PUSH
53093: LD_INT 5
53095: NEG
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 5
53103: NEG
53104: PUSH
53105: LD_INT 3
53107: NEG
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: LD_INT 3
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: LD_INT 4
53129: NEG
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 1
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 4
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: LD_INT 4
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 4
53217: PUSH
53218: LD_INT 0
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 4
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 5
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 5
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 4
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 3
53268: PUSH
53269: LD_INT 0
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 3
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 5
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 3
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 4
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 4
53340: PUSH
53341: LD_INT 4
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: PUSH
53351: LD_INT 4
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 3
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 4
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: PUSH
53391: LD_INT 4
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 4
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 4
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 5
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 0
53440: PUSH
53441: LD_INT 5
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 4
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 3
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: PUSH
53473: LD_INT 5
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53538: LD_ADDR_VAR 0 34
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 4
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: LD_INT 5
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: PUSH
53568: LD_INT 4
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 3
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 1
53600: NEG
53601: PUSH
53602: LD_INT 4
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: LD_INT 5
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 5
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 4
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 4
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 2
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 2
53708: PUSH
53709: LD_INT 1
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 2
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 4
53730: PUSH
53731: LD_INT 2
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 4
53740: PUSH
53741: LD_INT 4
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 4
53750: PUSH
53751: LD_INT 3
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 5
53760: PUSH
53761: LD_INT 4
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 5
53770: PUSH
53771: LD_INT 5
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 4
53780: PUSH
53781: LD_INT 5
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 3
53790: PUSH
53791: LD_INT 4
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 3
53800: PUSH
53801: LD_INT 3
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 5
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: LD_INT 5
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 3
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 1
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 4
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 0
53870: PUSH
53871: LD_INT 4
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: LD_INT 4
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 4
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 4
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 3
53946: NEG
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 3
53957: NEG
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 4
53968: NEG
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 5
53979: NEG
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 5
53990: NEG
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 5
54002: NEG
54003: PUSH
54004: LD_INT 2
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
// end ; end ;
54070: GO 54073
54072: POP
// case btype of b_depot , b_warehouse :
54073: LD_VAR 0 1
54077: PUSH
54078: LD_INT 0
54080: DOUBLE
54081: EQUAL
54082: IFTRUE 54092
54084: LD_INT 1
54086: DOUBLE
54087: EQUAL
54088: IFTRUE 54092
54090: GO 54293
54092: POP
// case nation of nation_american :
54093: LD_VAR 0 5
54097: PUSH
54098: LD_INT 1
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54106
54104: GO 54162
54106: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54107: LD_ADDR_VAR 0 9
54111: PUSH
54112: LD_VAR 0 11
54116: PUSH
54117: LD_VAR 0 12
54121: PUSH
54122: LD_VAR 0 13
54126: PUSH
54127: LD_VAR 0 14
54131: PUSH
54132: LD_VAR 0 15
54136: PUSH
54137: LD_VAR 0 16
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: PUSH
54150: LD_VAR 0 4
54154: PUSH
54155: LD_INT 1
54157: PLUS
54158: ARRAY
54159: ST_TO_ADDR
54160: GO 54291
54162: LD_INT 2
54164: DOUBLE
54165: EQUAL
54166: IFTRUE 54170
54168: GO 54226
54170: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54171: LD_ADDR_VAR 0 9
54175: PUSH
54176: LD_VAR 0 17
54180: PUSH
54181: LD_VAR 0 18
54185: PUSH
54186: LD_VAR 0 19
54190: PUSH
54191: LD_VAR 0 20
54195: PUSH
54196: LD_VAR 0 21
54200: PUSH
54201: LD_VAR 0 22
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: PUSH
54214: LD_VAR 0 4
54218: PUSH
54219: LD_INT 1
54221: PLUS
54222: ARRAY
54223: ST_TO_ADDR
54224: GO 54291
54226: LD_INT 3
54228: DOUBLE
54229: EQUAL
54230: IFTRUE 54234
54232: GO 54290
54234: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54235: LD_ADDR_VAR 0 9
54239: PUSH
54240: LD_VAR 0 23
54244: PUSH
54245: LD_VAR 0 24
54249: PUSH
54250: LD_VAR 0 25
54254: PUSH
54255: LD_VAR 0 26
54259: PUSH
54260: LD_VAR 0 27
54264: PUSH
54265: LD_VAR 0 28
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: PUSH
54278: LD_VAR 0 4
54282: PUSH
54283: LD_INT 1
54285: PLUS
54286: ARRAY
54287: ST_TO_ADDR
54288: GO 54291
54290: POP
54291: GO 54846
54293: LD_INT 2
54295: DOUBLE
54296: EQUAL
54297: IFTRUE 54307
54299: LD_INT 3
54301: DOUBLE
54302: EQUAL
54303: IFTRUE 54307
54305: GO 54363
54307: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54308: LD_ADDR_VAR 0 9
54312: PUSH
54313: LD_VAR 0 29
54317: PUSH
54318: LD_VAR 0 30
54322: PUSH
54323: LD_VAR 0 31
54327: PUSH
54328: LD_VAR 0 32
54332: PUSH
54333: LD_VAR 0 33
54337: PUSH
54338: LD_VAR 0 34
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: PUSH
54351: LD_VAR 0 4
54355: PUSH
54356: LD_INT 1
54358: PLUS
54359: ARRAY
54360: ST_TO_ADDR
54361: GO 54846
54363: LD_INT 16
54365: DOUBLE
54366: EQUAL
54367: IFTRUE 54425
54369: LD_INT 17
54371: DOUBLE
54372: EQUAL
54373: IFTRUE 54425
54375: LD_INT 18
54377: DOUBLE
54378: EQUAL
54379: IFTRUE 54425
54381: LD_INT 19
54383: DOUBLE
54384: EQUAL
54385: IFTRUE 54425
54387: LD_INT 22
54389: DOUBLE
54390: EQUAL
54391: IFTRUE 54425
54393: LD_INT 20
54395: DOUBLE
54396: EQUAL
54397: IFTRUE 54425
54399: LD_INT 21
54401: DOUBLE
54402: EQUAL
54403: IFTRUE 54425
54405: LD_INT 23
54407: DOUBLE
54408: EQUAL
54409: IFTRUE 54425
54411: LD_INT 24
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54425
54417: LD_INT 25
54419: DOUBLE
54420: EQUAL
54421: IFTRUE 54425
54423: GO 54481
54425: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54426: LD_ADDR_VAR 0 9
54430: PUSH
54431: LD_VAR 0 35
54435: PUSH
54436: LD_VAR 0 36
54440: PUSH
54441: LD_VAR 0 37
54445: PUSH
54446: LD_VAR 0 38
54450: PUSH
54451: LD_VAR 0 39
54455: PUSH
54456: LD_VAR 0 40
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: PUSH
54469: LD_VAR 0 4
54473: PUSH
54474: LD_INT 1
54476: PLUS
54477: ARRAY
54478: ST_TO_ADDR
54479: GO 54846
54481: LD_INT 6
54483: DOUBLE
54484: EQUAL
54485: IFTRUE 54537
54487: LD_INT 7
54489: DOUBLE
54490: EQUAL
54491: IFTRUE 54537
54493: LD_INT 8
54495: DOUBLE
54496: EQUAL
54497: IFTRUE 54537
54499: LD_INT 13
54501: DOUBLE
54502: EQUAL
54503: IFTRUE 54537
54505: LD_INT 12
54507: DOUBLE
54508: EQUAL
54509: IFTRUE 54537
54511: LD_INT 15
54513: DOUBLE
54514: EQUAL
54515: IFTRUE 54537
54517: LD_INT 11
54519: DOUBLE
54520: EQUAL
54521: IFTRUE 54537
54523: LD_INT 14
54525: DOUBLE
54526: EQUAL
54527: IFTRUE 54537
54529: LD_INT 10
54531: DOUBLE
54532: EQUAL
54533: IFTRUE 54537
54535: GO 54593
54537: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54538: LD_ADDR_VAR 0 9
54542: PUSH
54543: LD_VAR 0 41
54547: PUSH
54548: LD_VAR 0 42
54552: PUSH
54553: LD_VAR 0 43
54557: PUSH
54558: LD_VAR 0 44
54562: PUSH
54563: LD_VAR 0 45
54567: PUSH
54568: LD_VAR 0 46
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: PUSH
54581: LD_VAR 0 4
54585: PUSH
54586: LD_INT 1
54588: PLUS
54589: ARRAY
54590: ST_TO_ADDR
54591: GO 54846
54593: LD_INT 36
54595: DOUBLE
54596: EQUAL
54597: IFTRUE 54601
54599: GO 54657
54601: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54602: LD_ADDR_VAR 0 9
54606: PUSH
54607: LD_VAR 0 47
54611: PUSH
54612: LD_VAR 0 48
54616: PUSH
54617: LD_VAR 0 49
54621: PUSH
54622: LD_VAR 0 50
54626: PUSH
54627: LD_VAR 0 51
54631: PUSH
54632: LD_VAR 0 52
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: LD_VAR 0 4
54649: PUSH
54650: LD_INT 1
54652: PLUS
54653: ARRAY
54654: ST_TO_ADDR
54655: GO 54846
54657: LD_INT 4
54659: DOUBLE
54660: EQUAL
54661: IFTRUE 54683
54663: LD_INT 5
54665: DOUBLE
54666: EQUAL
54667: IFTRUE 54683
54669: LD_INT 34
54671: DOUBLE
54672: EQUAL
54673: IFTRUE 54683
54675: LD_INT 37
54677: DOUBLE
54678: EQUAL
54679: IFTRUE 54683
54681: GO 54739
54683: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54684: LD_ADDR_VAR 0 9
54688: PUSH
54689: LD_VAR 0 53
54693: PUSH
54694: LD_VAR 0 54
54698: PUSH
54699: LD_VAR 0 55
54703: PUSH
54704: LD_VAR 0 56
54708: PUSH
54709: LD_VAR 0 57
54713: PUSH
54714: LD_VAR 0 58
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: PUSH
54727: LD_VAR 0 4
54731: PUSH
54732: LD_INT 1
54734: PLUS
54735: ARRAY
54736: ST_TO_ADDR
54737: GO 54846
54739: LD_INT 31
54741: DOUBLE
54742: EQUAL
54743: IFTRUE 54789
54745: LD_INT 32
54747: DOUBLE
54748: EQUAL
54749: IFTRUE 54789
54751: LD_INT 33
54753: DOUBLE
54754: EQUAL
54755: IFTRUE 54789
54757: LD_INT 27
54759: DOUBLE
54760: EQUAL
54761: IFTRUE 54789
54763: LD_INT 26
54765: DOUBLE
54766: EQUAL
54767: IFTRUE 54789
54769: LD_INT 28
54771: DOUBLE
54772: EQUAL
54773: IFTRUE 54789
54775: LD_INT 29
54777: DOUBLE
54778: EQUAL
54779: IFTRUE 54789
54781: LD_INT 30
54783: DOUBLE
54784: EQUAL
54785: IFTRUE 54789
54787: GO 54845
54789: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54790: LD_ADDR_VAR 0 9
54794: PUSH
54795: LD_VAR 0 59
54799: PUSH
54800: LD_VAR 0 60
54804: PUSH
54805: LD_VAR 0 61
54809: PUSH
54810: LD_VAR 0 62
54814: PUSH
54815: LD_VAR 0 63
54819: PUSH
54820: LD_VAR 0 64
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: PUSH
54833: LD_VAR 0 4
54837: PUSH
54838: LD_INT 1
54840: PLUS
54841: ARRAY
54842: ST_TO_ADDR
54843: GO 54846
54845: POP
// temp_list2 = [ ] ;
54846: LD_ADDR_VAR 0 10
54850: PUSH
54851: EMPTY
54852: ST_TO_ADDR
// for i in temp_list do
54853: LD_ADDR_VAR 0 8
54857: PUSH
54858: LD_VAR 0 9
54862: PUSH
54863: FOR_IN
54864: IFFALSE 54916
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54866: LD_ADDR_VAR 0 10
54870: PUSH
54871: LD_VAR 0 10
54875: PUSH
54876: LD_VAR 0 8
54880: PUSH
54881: LD_INT 1
54883: ARRAY
54884: PUSH
54885: LD_VAR 0 2
54889: PLUS
54890: PUSH
54891: LD_VAR 0 8
54895: PUSH
54896: LD_INT 2
54898: ARRAY
54899: PUSH
54900: LD_VAR 0 3
54904: PLUS
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: EMPTY
54911: LIST
54912: ADD
54913: ST_TO_ADDR
54914: GO 54863
54916: POP
54917: POP
// result = temp_list2 ;
54918: LD_ADDR_VAR 0 7
54922: PUSH
54923: LD_VAR 0 10
54927: ST_TO_ADDR
// end ;
54928: LD_VAR 0 7
54932: RET
// export function EnemyInRange ( unit , dist ) ; begin
54933: LD_INT 0
54935: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54936: LD_ADDR_VAR 0 3
54940: PUSH
54941: LD_VAR 0 1
54945: PPUSH
54946: CALL_OW 255
54950: PPUSH
54951: LD_VAR 0 1
54955: PPUSH
54956: CALL_OW 250
54960: PPUSH
54961: LD_VAR 0 1
54965: PPUSH
54966: CALL_OW 251
54970: PPUSH
54971: LD_VAR 0 2
54975: PPUSH
54976: CALL 28329 0 4
54980: PUSH
54981: LD_INT 4
54983: ARRAY
54984: ST_TO_ADDR
// end ;
54985: LD_VAR 0 3
54989: RET
// export function PlayerSeeMe ( unit ) ; begin
54990: LD_INT 0
54992: PPUSH
// result := See ( your_side , unit ) ;
54993: LD_ADDR_VAR 0 2
54997: PUSH
54998: LD_OWVAR 2
55002: PPUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 292
55012: ST_TO_ADDR
// end ;
55013: LD_VAR 0 2
55017: RET
// export function ReverseDir ( unit ) ; begin
55018: LD_INT 0
55020: PPUSH
// if not unit then
55021: LD_VAR 0 1
55025: NOT
55026: IFFALSE 55030
// exit ;
55028: GO 55053
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55030: LD_ADDR_VAR 0 2
55034: PUSH
55035: LD_VAR 0 1
55039: PPUSH
55040: CALL_OW 254
55044: PUSH
55045: LD_INT 3
55047: PLUS
55048: PUSH
55049: LD_INT 6
55051: MOD
55052: ST_TO_ADDR
// end ;
55053: LD_VAR 0 2
55057: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55058: LD_INT 0
55060: PPUSH
55061: PPUSH
55062: PPUSH
55063: PPUSH
55064: PPUSH
// if not hexes then
55065: LD_VAR 0 2
55069: NOT
55070: IFFALSE 55074
// exit ;
55072: GO 55222
// dist := 9999 ;
55074: LD_ADDR_VAR 0 5
55078: PUSH
55079: LD_INT 9999
55081: ST_TO_ADDR
// for i = 1 to hexes do
55082: LD_ADDR_VAR 0 4
55086: PUSH
55087: DOUBLE
55088: LD_INT 1
55090: DEC
55091: ST_TO_ADDR
55092: LD_VAR 0 2
55096: PUSH
55097: FOR_TO
55098: IFFALSE 55210
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55100: LD_VAR 0 1
55104: PPUSH
55105: LD_VAR 0 2
55109: PUSH
55110: LD_VAR 0 4
55114: ARRAY
55115: PUSH
55116: LD_INT 1
55118: ARRAY
55119: PPUSH
55120: LD_VAR 0 2
55124: PUSH
55125: LD_VAR 0 4
55129: ARRAY
55130: PUSH
55131: LD_INT 2
55133: ARRAY
55134: PPUSH
55135: CALL_OW 297
55139: PUSH
55140: LD_VAR 0 5
55144: LESS
55145: IFFALSE 55208
// begin hex := hexes [ i ] ;
55147: LD_ADDR_VAR 0 7
55151: PUSH
55152: LD_VAR 0 2
55156: PUSH
55157: LD_VAR 0 4
55161: ARRAY
55162: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55163: LD_ADDR_VAR 0 5
55167: PUSH
55168: LD_VAR 0 1
55172: PPUSH
55173: LD_VAR 0 2
55177: PUSH
55178: LD_VAR 0 4
55182: ARRAY
55183: PUSH
55184: LD_INT 1
55186: ARRAY
55187: PPUSH
55188: LD_VAR 0 2
55192: PUSH
55193: LD_VAR 0 4
55197: ARRAY
55198: PUSH
55199: LD_INT 2
55201: ARRAY
55202: PPUSH
55203: CALL_OW 297
55207: ST_TO_ADDR
// end ; end ;
55208: GO 55097
55210: POP
55211: POP
// result := hex ;
55212: LD_ADDR_VAR 0 3
55216: PUSH
55217: LD_VAR 0 7
55221: ST_TO_ADDR
// end ;
55222: LD_VAR 0 3
55226: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55227: LD_INT 0
55229: PPUSH
55230: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55231: LD_VAR 0 1
55235: NOT
55236: PUSH
55237: LD_VAR 0 1
55241: PUSH
55242: LD_INT 21
55244: PUSH
55245: LD_INT 2
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 23
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PPUSH
55266: CALL_OW 69
55270: IN
55271: NOT
55272: OR
55273: IFFALSE 55277
// exit ;
55275: GO 55324
// for i = 1 to 3 do
55277: LD_ADDR_VAR 0 3
55281: PUSH
55282: DOUBLE
55283: LD_INT 1
55285: DEC
55286: ST_TO_ADDR
55287: LD_INT 3
55289: PUSH
55290: FOR_TO
55291: IFFALSE 55322
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55293: LD_VAR 0 1
55297: PPUSH
55298: CALL_OW 250
55302: PPUSH
55303: LD_VAR 0 1
55307: PPUSH
55308: CALL_OW 251
55312: PPUSH
55313: LD_INT 1
55315: PPUSH
55316: CALL_OW 453
55320: GO 55290
55322: POP
55323: POP
// end ;
55324: LD_VAR 0 2
55328: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55329: LD_INT 0
55331: PPUSH
55332: PPUSH
55333: PPUSH
55334: PPUSH
55335: PPUSH
55336: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55337: LD_VAR 0 1
55341: NOT
55342: PUSH
55343: LD_VAR 0 2
55347: NOT
55348: OR
55349: PUSH
55350: LD_VAR 0 1
55354: PPUSH
55355: CALL_OW 314
55359: OR
55360: IFFALSE 55364
// exit ;
55362: GO 55805
// x := GetX ( enemy_unit ) ;
55364: LD_ADDR_VAR 0 7
55368: PUSH
55369: LD_VAR 0 2
55373: PPUSH
55374: CALL_OW 250
55378: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55379: LD_ADDR_VAR 0 8
55383: PUSH
55384: LD_VAR 0 2
55388: PPUSH
55389: CALL_OW 251
55393: ST_TO_ADDR
// if not x or not y then
55394: LD_VAR 0 7
55398: NOT
55399: PUSH
55400: LD_VAR 0 8
55404: NOT
55405: OR
55406: IFFALSE 55410
// exit ;
55408: GO 55805
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55410: LD_ADDR_VAR 0 6
55414: PUSH
55415: LD_VAR 0 7
55419: PPUSH
55420: LD_INT 0
55422: PPUSH
55423: LD_INT 4
55425: PPUSH
55426: CALL_OW 272
55430: PUSH
55431: LD_VAR 0 8
55435: PPUSH
55436: LD_INT 0
55438: PPUSH
55439: LD_INT 4
55441: PPUSH
55442: CALL_OW 273
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_VAR 0 7
55455: PPUSH
55456: LD_INT 1
55458: PPUSH
55459: LD_INT 4
55461: PPUSH
55462: CALL_OW 272
55466: PUSH
55467: LD_VAR 0 8
55471: PPUSH
55472: LD_INT 1
55474: PPUSH
55475: LD_INT 4
55477: PPUSH
55478: CALL_OW 273
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_VAR 0 7
55491: PPUSH
55492: LD_INT 2
55494: PPUSH
55495: LD_INT 4
55497: PPUSH
55498: CALL_OW 272
55502: PUSH
55503: LD_VAR 0 8
55507: PPUSH
55508: LD_INT 2
55510: PPUSH
55511: LD_INT 4
55513: PPUSH
55514: CALL_OW 273
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_VAR 0 7
55527: PPUSH
55528: LD_INT 3
55530: PPUSH
55531: LD_INT 4
55533: PPUSH
55534: CALL_OW 272
55538: PUSH
55539: LD_VAR 0 8
55543: PPUSH
55544: LD_INT 3
55546: PPUSH
55547: LD_INT 4
55549: PPUSH
55550: CALL_OW 273
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_VAR 0 7
55563: PPUSH
55564: LD_INT 4
55566: PPUSH
55567: LD_INT 4
55569: PPUSH
55570: CALL_OW 272
55574: PUSH
55575: LD_VAR 0 8
55579: PPUSH
55580: LD_INT 4
55582: PPUSH
55583: LD_INT 4
55585: PPUSH
55586: CALL_OW 273
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_VAR 0 7
55599: PPUSH
55600: LD_INT 5
55602: PPUSH
55603: LD_INT 4
55605: PPUSH
55606: CALL_OW 272
55610: PUSH
55611: LD_VAR 0 8
55615: PPUSH
55616: LD_INT 5
55618: PPUSH
55619: LD_INT 4
55621: PPUSH
55622: CALL_OW 273
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: ST_TO_ADDR
// for i = tmp downto 1 do
55639: LD_ADDR_VAR 0 4
55643: PUSH
55644: DOUBLE
55645: LD_VAR 0 6
55649: INC
55650: ST_TO_ADDR
55651: LD_INT 1
55653: PUSH
55654: FOR_DOWNTO
55655: IFFALSE 55756
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55657: LD_VAR 0 6
55661: PUSH
55662: LD_VAR 0 4
55666: ARRAY
55667: PUSH
55668: LD_INT 1
55670: ARRAY
55671: PPUSH
55672: LD_VAR 0 6
55676: PUSH
55677: LD_VAR 0 4
55681: ARRAY
55682: PUSH
55683: LD_INT 2
55685: ARRAY
55686: PPUSH
55687: CALL_OW 488
55691: NOT
55692: PUSH
55693: LD_VAR 0 6
55697: PUSH
55698: LD_VAR 0 4
55702: ARRAY
55703: PUSH
55704: LD_INT 1
55706: ARRAY
55707: PPUSH
55708: LD_VAR 0 6
55712: PUSH
55713: LD_VAR 0 4
55717: ARRAY
55718: PUSH
55719: LD_INT 2
55721: ARRAY
55722: PPUSH
55723: CALL_OW 428
55727: PUSH
55728: LD_INT 0
55730: NONEQUAL
55731: OR
55732: IFFALSE 55754
// tmp := Delete ( tmp , i ) ;
55734: LD_ADDR_VAR 0 6
55738: PUSH
55739: LD_VAR 0 6
55743: PPUSH
55744: LD_VAR 0 4
55748: PPUSH
55749: CALL_OW 3
55753: ST_TO_ADDR
55754: GO 55654
55756: POP
55757: POP
// j := GetClosestHex ( unit , tmp ) ;
55758: LD_ADDR_VAR 0 5
55762: PUSH
55763: LD_VAR 0 1
55767: PPUSH
55768: LD_VAR 0 6
55772: PPUSH
55773: CALL 55058 0 2
55777: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55778: LD_VAR 0 1
55782: PPUSH
55783: LD_VAR 0 5
55787: PUSH
55788: LD_INT 1
55790: ARRAY
55791: PPUSH
55792: LD_VAR 0 5
55796: PUSH
55797: LD_INT 2
55799: ARRAY
55800: PPUSH
55801: CALL_OW 111
// end ;
55805: LD_VAR 0 3
55809: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55810: LD_INT 0
55812: PPUSH
55813: PPUSH
55814: PPUSH
// uc_side = 0 ;
55815: LD_ADDR_OWVAR 20
55819: PUSH
55820: LD_INT 0
55822: ST_TO_ADDR
// uc_nation = 0 ;
55823: LD_ADDR_OWVAR 21
55827: PUSH
55828: LD_INT 0
55830: ST_TO_ADDR
// InitHc_All ( ) ;
55831: CALL_OW 584
// InitVc ;
55835: CALL_OW 20
// if mastodonts then
55839: LD_VAR 0 6
55843: IFFALSE 55910
// for i = 1 to mastodonts do
55845: LD_ADDR_VAR 0 11
55849: PUSH
55850: DOUBLE
55851: LD_INT 1
55853: DEC
55854: ST_TO_ADDR
55855: LD_VAR 0 6
55859: PUSH
55860: FOR_TO
55861: IFFALSE 55908
// begin vc_chassis := 31 ;
55863: LD_ADDR_OWVAR 37
55867: PUSH
55868: LD_INT 31
55870: ST_TO_ADDR
// vc_control := control_rider ;
55871: LD_ADDR_OWVAR 38
55875: PUSH
55876: LD_INT 4
55878: ST_TO_ADDR
// animal := CreateVehicle ;
55879: LD_ADDR_VAR 0 12
55883: PUSH
55884: CALL_OW 45
55888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55889: LD_VAR 0 12
55893: PPUSH
55894: LD_VAR 0 8
55898: PPUSH
55899: LD_INT 0
55901: PPUSH
55902: CALL 58098 0 3
// end ;
55906: GO 55860
55908: POP
55909: POP
// if horses then
55910: LD_VAR 0 5
55914: IFFALSE 55981
// for i = 1 to horses do
55916: LD_ADDR_VAR 0 11
55920: PUSH
55921: DOUBLE
55922: LD_INT 1
55924: DEC
55925: ST_TO_ADDR
55926: LD_VAR 0 5
55930: PUSH
55931: FOR_TO
55932: IFFALSE 55979
// begin hc_class := 21 ;
55934: LD_ADDR_OWVAR 28
55938: PUSH
55939: LD_INT 21
55941: ST_TO_ADDR
// hc_gallery :=  ;
55942: LD_ADDR_OWVAR 33
55946: PUSH
55947: LD_STRING 
55949: ST_TO_ADDR
// animal := CreateHuman ;
55950: LD_ADDR_VAR 0 12
55954: PUSH
55955: CALL_OW 44
55959: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55960: LD_VAR 0 12
55964: PPUSH
55965: LD_VAR 0 8
55969: PPUSH
55970: LD_INT 0
55972: PPUSH
55973: CALL 58098 0 3
// end ;
55977: GO 55931
55979: POP
55980: POP
// if birds then
55981: LD_VAR 0 1
55985: IFFALSE 56052
// for i = 1 to birds do
55987: LD_ADDR_VAR 0 11
55991: PUSH
55992: DOUBLE
55993: LD_INT 1
55995: DEC
55996: ST_TO_ADDR
55997: LD_VAR 0 1
56001: PUSH
56002: FOR_TO
56003: IFFALSE 56050
// begin hc_class = 18 ;
56005: LD_ADDR_OWVAR 28
56009: PUSH
56010: LD_INT 18
56012: ST_TO_ADDR
// hc_gallery =  ;
56013: LD_ADDR_OWVAR 33
56017: PUSH
56018: LD_STRING 
56020: ST_TO_ADDR
// animal := CreateHuman ;
56021: LD_ADDR_VAR 0 12
56025: PUSH
56026: CALL_OW 44
56030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56031: LD_VAR 0 12
56035: PPUSH
56036: LD_VAR 0 8
56040: PPUSH
56041: LD_INT 0
56043: PPUSH
56044: CALL 58098 0 3
// end ;
56048: GO 56002
56050: POP
56051: POP
// if tigers then
56052: LD_VAR 0 2
56056: IFFALSE 56140
// for i = 1 to tigers do
56058: LD_ADDR_VAR 0 11
56062: PUSH
56063: DOUBLE
56064: LD_INT 1
56066: DEC
56067: ST_TO_ADDR
56068: LD_VAR 0 2
56072: PUSH
56073: FOR_TO
56074: IFFALSE 56138
// begin hc_class = class_tiger ;
56076: LD_ADDR_OWVAR 28
56080: PUSH
56081: LD_INT 14
56083: ST_TO_ADDR
// hc_gallery =  ;
56084: LD_ADDR_OWVAR 33
56088: PUSH
56089: LD_STRING 
56091: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56092: LD_ADDR_OWVAR 35
56096: PUSH
56097: LD_INT 7
56099: NEG
56100: PPUSH
56101: LD_INT 7
56103: PPUSH
56104: CALL_OW 12
56108: ST_TO_ADDR
// animal := CreateHuman ;
56109: LD_ADDR_VAR 0 12
56113: PUSH
56114: CALL_OW 44
56118: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56119: LD_VAR 0 12
56123: PPUSH
56124: LD_VAR 0 8
56128: PPUSH
56129: LD_INT 0
56131: PPUSH
56132: CALL 58098 0 3
// end ;
56136: GO 56073
56138: POP
56139: POP
// if apemans then
56140: LD_VAR 0 3
56144: IFFALSE 56267
// for i = 1 to apemans do
56146: LD_ADDR_VAR 0 11
56150: PUSH
56151: DOUBLE
56152: LD_INT 1
56154: DEC
56155: ST_TO_ADDR
56156: LD_VAR 0 3
56160: PUSH
56161: FOR_TO
56162: IFFALSE 56265
// begin hc_class = class_apeman ;
56164: LD_ADDR_OWVAR 28
56168: PUSH
56169: LD_INT 12
56171: ST_TO_ADDR
// hc_gallery =  ;
56172: LD_ADDR_OWVAR 33
56176: PUSH
56177: LD_STRING 
56179: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56180: LD_ADDR_OWVAR 35
56184: PUSH
56185: LD_INT 2
56187: NEG
56188: PPUSH
56189: LD_INT 2
56191: PPUSH
56192: CALL_OW 12
56196: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56197: LD_ADDR_OWVAR 31
56201: PUSH
56202: LD_INT 1
56204: PPUSH
56205: LD_INT 3
56207: PPUSH
56208: CALL_OW 12
56212: PUSH
56213: LD_INT 1
56215: PPUSH
56216: LD_INT 3
56218: PPUSH
56219: CALL_OW 12
56223: PUSH
56224: LD_INT 0
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: ST_TO_ADDR
// animal := CreateHuman ;
56236: LD_ADDR_VAR 0 12
56240: PUSH
56241: CALL_OW 44
56245: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56246: LD_VAR 0 12
56250: PPUSH
56251: LD_VAR 0 8
56255: PPUSH
56256: LD_INT 0
56258: PPUSH
56259: CALL 58098 0 3
// end ;
56263: GO 56161
56265: POP
56266: POP
// if enchidnas then
56267: LD_VAR 0 4
56271: IFFALSE 56338
// for i = 1 to enchidnas do
56273: LD_ADDR_VAR 0 11
56277: PUSH
56278: DOUBLE
56279: LD_INT 1
56281: DEC
56282: ST_TO_ADDR
56283: LD_VAR 0 4
56287: PUSH
56288: FOR_TO
56289: IFFALSE 56336
// begin hc_class = 13 ;
56291: LD_ADDR_OWVAR 28
56295: PUSH
56296: LD_INT 13
56298: ST_TO_ADDR
// hc_gallery =  ;
56299: LD_ADDR_OWVAR 33
56303: PUSH
56304: LD_STRING 
56306: ST_TO_ADDR
// animal := CreateHuman ;
56307: LD_ADDR_VAR 0 12
56311: PUSH
56312: CALL_OW 44
56316: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56317: LD_VAR 0 12
56321: PPUSH
56322: LD_VAR 0 8
56326: PPUSH
56327: LD_INT 0
56329: PPUSH
56330: CALL 58098 0 3
// end ;
56334: GO 56288
56336: POP
56337: POP
// if fishes then
56338: LD_VAR 0 7
56342: IFFALSE 56409
// for i = 1 to fishes do
56344: LD_ADDR_VAR 0 11
56348: PUSH
56349: DOUBLE
56350: LD_INT 1
56352: DEC
56353: ST_TO_ADDR
56354: LD_VAR 0 7
56358: PUSH
56359: FOR_TO
56360: IFFALSE 56407
// begin hc_class = 20 ;
56362: LD_ADDR_OWVAR 28
56366: PUSH
56367: LD_INT 20
56369: ST_TO_ADDR
// hc_gallery =  ;
56370: LD_ADDR_OWVAR 33
56374: PUSH
56375: LD_STRING 
56377: ST_TO_ADDR
// animal := CreateHuman ;
56378: LD_ADDR_VAR 0 12
56382: PUSH
56383: CALL_OW 44
56387: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56388: LD_VAR 0 12
56392: PPUSH
56393: LD_VAR 0 9
56397: PPUSH
56398: LD_INT 0
56400: PPUSH
56401: CALL 58098 0 3
// end ;
56405: GO 56359
56407: POP
56408: POP
// end ;
56409: LD_VAR 0 10
56413: RET
// export function WantHeal ( sci , unit ) ; begin
56414: LD_INT 0
56416: PPUSH
// if GetTaskList ( sci ) > 0 then
56417: LD_VAR 0 1
56421: PPUSH
56422: CALL_OW 437
56426: PUSH
56427: LD_INT 0
56429: GREATER
56430: IFFALSE 56500
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56432: LD_VAR 0 1
56436: PPUSH
56437: CALL_OW 437
56441: PUSH
56442: LD_INT 1
56444: ARRAY
56445: PUSH
56446: LD_INT 1
56448: ARRAY
56449: PUSH
56450: LD_STRING l
56452: EQUAL
56453: PUSH
56454: LD_VAR 0 1
56458: PPUSH
56459: CALL_OW 437
56463: PUSH
56464: LD_INT 1
56466: ARRAY
56467: PUSH
56468: LD_INT 4
56470: ARRAY
56471: PUSH
56472: LD_VAR 0 2
56476: EQUAL
56477: AND
56478: IFFALSE 56490
// result := true else
56480: LD_ADDR_VAR 0 3
56484: PUSH
56485: LD_INT 1
56487: ST_TO_ADDR
56488: GO 56498
// result := false ;
56490: LD_ADDR_VAR 0 3
56494: PUSH
56495: LD_INT 0
56497: ST_TO_ADDR
// end else
56498: GO 56508
// result := false ;
56500: LD_ADDR_VAR 0 3
56504: PUSH
56505: LD_INT 0
56507: ST_TO_ADDR
// end ;
56508: LD_VAR 0 3
56512: RET
// export function HealTarget ( sci ) ; begin
56513: LD_INT 0
56515: PPUSH
// if not sci then
56516: LD_VAR 0 1
56520: NOT
56521: IFFALSE 56525
// exit ;
56523: GO 56590
// result := 0 ;
56525: LD_ADDR_VAR 0 2
56529: PUSH
56530: LD_INT 0
56532: ST_TO_ADDR
// if GetTaskList ( sci ) then
56533: LD_VAR 0 1
56537: PPUSH
56538: CALL_OW 437
56542: IFFALSE 56590
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56544: LD_VAR 0 1
56548: PPUSH
56549: CALL_OW 437
56553: PUSH
56554: LD_INT 1
56556: ARRAY
56557: PUSH
56558: LD_INT 1
56560: ARRAY
56561: PUSH
56562: LD_STRING l
56564: EQUAL
56565: IFFALSE 56590
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56567: LD_ADDR_VAR 0 2
56571: PUSH
56572: LD_VAR 0 1
56576: PPUSH
56577: CALL_OW 437
56581: PUSH
56582: LD_INT 1
56584: ARRAY
56585: PUSH
56586: LD_INT 4
56588: ARRAY
56589: ST_TO_ADDR
// end ;
56590: LD_VAR 0 2
56594: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56595: LD_INT 0
56597: PPUSH
56598: PPUSH
56599: PPUSH
56600: PPUSH
// if not base_units then
56601: LD_VAR 0 1
56605: NOT
56606: IFFALSE 56610
// exit ;
56608: GO 56697
// result := false ;
56610: LD_ADDR_VAR 0 2
56614: PUSH
56615: LD_INT 0
56617: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56618: LD_ADDR_VAR 0 5
56622: PUSH
56623: LD_VAR 0 1
56627: PPUSH
56628: LD_INT 21
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PPUSH
56638: CALL_OW 72
56642: ST_TO_ADDR
// if not tmp then
56643: LD_VAR 0 5
56647: NOT
56648: IFFALSE 56652
// exit ;
56650: GO 56697
// for i in tmp do
56652: LD_ADDR_VAR 0 3
56656: PUSH
56657: LD_VAR 0 5
56661: PUSH
56662: FOR_IN
56663: IFFALSE 56695
// begin result := EnemyInRange ( i , 22 ) ;
56665: LD_ADDR_VAR 0 2
56669: PUSH
56670: LD_VAR 0 3
56674: PPUSH
56675: LD_INT 22
56677: PPUSH
56678: CALL 54933 0 2
56682: ST_TO_ADDR
// if result then
56683: LD_VAR 0 2
56687: IFFALSE 56693
// exit ;
56689: POP
56690: POP
56691: GO 56697
// end ;
56693: GO 56662
56695: POP
56696: POP
// end ;
56697: LD_VAR 0 2
56701: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56702: LD_INT 0
56704: PPUSH
56705: PPUSH
// if not units then
56706: LD_VAR 0 1
56710: NOT
56711: IFFALSE 56715
// exit ;
56713: GO 56785
// result := [ ] ;
56715: LD_ADDR_VAR 0 3
56719: PUSH
56720: EMPTY
56721: ST_TO_ADDR
// for i in units do
56722: LD_ADDR_VAR 0 4
56726: PUSH
56727: LD_VAR 0 1
56731: PUSH
56732: FOR_IN
56733: IFFALSE 56783
// if GetTag ( i ) = tag then
56735: LD_VAR 0 4
56739: PPUSH
56740: CALL_OW 110
56744: PUSH
56745: LD_VAR 0 2
56749: EQUAL
56750: IFFALSE 56781
// result := Replace ( result , result + 1 , i ) ;
56752: LD_ADDR_VAR 0 3
56756: PUSH
56757: LD_VAR 0 3
56761: PPUSH
56762: LD_VAR 0 3
56766: PUSH
56767: LD_INT 1
56769: PLUS
56770: PPUSH
56771: LD_VAR 0 4
56775: PPUSH
56776: CALL_OW 1
56780: ST_TO_ADDR
56781: GO 56732
56783: POP
56784: POP
// end ;
56785: LD_VAR 0 3
56789: RET
// export function IsDriver ( un ) ; begin
56790: LD_INT 0
56792: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56793: LD_ADDR_VAR 0 2
56797: PUSH
56798: LD_VAR 0 1
56802: PUSH
56803: LD_INT 55
56805: PUSH
56806: EMPTY
56807: LIST
56808: PPUSH
56809: CALL_OW 69
56813: IN
56814: ST_TO_ADDR
// end ;
56815: LD_VAR 0 2
56819: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56820: LD_INT 0
56822: PPUSH
56823: PPUSH
// list := [ ] ;
56824: LD_ADDR_VAR 0 5
56828: PUSH
56829: EMPTY
56830: ST_TO_ADDR
// case d of 0 :
56831: LD_VAR 0 3
56835: PUSH
56836: LD_INT 0
56838: DOUBLE
56839: EQUAL
56840: IFTRUE 56844
56842: GO 56977
56844: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56845: LD_ADDR_VAR 0 5
56849: PUSH
56850: LD_VAR 0 1
56854: PUSH
56855: LD_INT 4
56857: MINUS
56858: PUSH
56859: LD_VAR 0 2
56863: PUSH
56864: LD_INT 4
56866: MINUS
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_INT 3
56883: MINUS
56884: PUSH
56885: LD_VAR 0 2
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_VAR 0 1
56902: PUSH
56903: LD_INT 4
56905: PLUS
56906: PUSH
56907: LD_VAR 0 2
56911: PUSH
56912: LD_INT 4
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: PUSH
56920: LD_VAR 0 1
56924: PUSH
56925: LD_INT 3
56927: PLUS
56928: PUSH
56929: LD_VAR 0 2
56933: PUSH
56934: LD_INT 3
56936: PLUS
56937: PUSH
56938: LD_INT 5
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: PUSH
56946: LD_VAR 0 1
56950: PUSH
56951: LD_VAR 0 2
56955: PUSH
56956: LD_INT 4
56958: PLUS
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: LIST
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: ST_TO_ADDR
// end ; 1 :
56975: GO 57675
56977: LD_INT 1
56979: DOUBLE
56980: EQUAL
56981: IFTRUE 56985
56983: GO 57118
56985: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56986: LD_ADDR_VAR 0 5
56990: PUSH
56991: LD_VAR 0 1
56995: PUSH
56996: LD_VAR 0 2
57000: PUSH
57001: LD_INT 4
57003: MINUS
57004: PUSH
57005: LD_INT 3
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: LIST
57012: PUSH
57013: LD_VAR 0 1
57017: PUSH
57018: LD_INT 3
57020: MINUS
57021: PUSH
57022: LD_VAR 0 2
57026: PUSH
57027: LD_INT 3
57029: MINUS
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: PUSH
57039: LD_VAR 0 1
57043: PUSH
57044: LD_INT 4
57046: MINUS
57047: PUSH
57048: LD_VAR 0 2
57052: PUSH
57053: LD_INT 1
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: LD_VAR 0 1
57065: PUSH
57066: LD_VAR 0 2
57070: PUSH
57071: LD_INT 3
57073: PLUS
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: LIST
57082: PUSH
57083: LD_VAR 0 1
57087: PUSH
57088: LD_INT 4
57090: PLUS
57091: PUSH
57092: LD_VAR 0 2
57096: PUSH
57097: LD_INT 4
57099: PLUS
57100: PUSH
57101: LD_INT 5
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: ST_TO_ADDR
// end ; 2 :
57116: GO 57675
57118: LD_INT 2
57120: DOUBLE
57121: EQUAL
57122: IFTRUE 57126
57124: GO 57255
57126: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57127: LD_ADDR_VAR 0 5
57131: PUSH
57132: LD_VAR 0 1
57136: PUSH
57137: LD_VAR 0 2
57141: PUSH
57142: LD_INT 3
57144: MINUS
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: PUSH
57154: LD_VAR 0 1
57158: PUSH
57159: LD_INT 4
57161: PLUS
57162: PUSH
57163: LD_VAR 0 2
57167: PUSH
57168: LD_INT 4
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: LIST
57175: PUSH
57176: LD_VAR 0 1
57180: PUSH
57181: LD_VAR 0 2
57185: PUSH
57186: LD_INT 4
57188: PLUS
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: PUSH
57198: LD_VAR 0 1
57202: PUSH
57203: LD_INT 3
57205: MINUS
57206: PUSH
57207: LD_VAR 0 2
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: PUSH
57220: LD_VAR 0 1
57224: PUSH
57225: LD_INT 4
57227: MINUS
57228: PUSH
57229: LD_VAR 0 2
57233: PUSH
57234: LD_INT 4
57236: MINUS
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: ST_TO_ADDR
// end ; 3 :
57253: GO 57675
57255: LD_INT 3
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57263
57261: GO 57396
57263: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57264: LD_ADDR_VAR 0 5
57268: PUSH
57269: LD_VAR 0 1
57273: PUSH
57274: LD_INT 3
57276: PLUS
57277: PUSH
57278: LD_VAR 0 2
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: LIST
57290: PUSH
57291: LD_VAR 0 1
57295: PUSH
57296: LD_INT 4
57298: PLUS
57299: PUSH
57300: LD_VAR 0 2
57304: PUSH
57305: LD_INT 4
57307: PLUS
57308: PUSH
57309: LD_INT 5
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: PUSH
57317: LD_VAR 0 1
57321: PUSH
57322: LD_INT 4
57324: MINUS
57325: PUSH
57326: LD_VAR 0 2
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: PUSH
57339: LD_VAR 0 1
57343: PUSH
57344: LD_VAR 0 2
57348: PUSH
57349: LD_INT 4
57351: MINUS
57352: PUSH
57353: LD_INT 3
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: LIST
57360: PUSH
57361: LD_VAR 0 1
57365: PUSH
57366: LD_INT 3
57368: MINUS
57369: PUSH
57370: LD_VAR 0 2
57374: PUSH
57375: LD_INT 3
57377: MINUS
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: LIST
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// end ; 4 :
57394: GO 57675
57396: LD_INT 4
57398: DOUBLE
57399: EQUAL
57400: IFTRUE 57404
57402: GO 57537
57404: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57405: LD_ADDR_VAR 0 5
57409: PUSH
57410: LD_VAR 0 1
57414: PUSH
57415: LD_VAR 0 2
57419: PUSH
57420: LD_INT 4
57422: PLUS
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: LIST
57431: PUSH
57432: LD_VAR 0 1
57436: PUSH
57437: LD_INT 3
57439: PLUS
57440: PUSH
57441: LD_VAR 0 2
57445: PUSH
57446: LD_INT 3
57448: PLUS
57449: PUSH
57450: LD_INT 5
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: PUSH
57458: LD_VAR 0 1
57462: PUSH
57463: LD_INT 4
57465: PLUS
57466: PUSH
57467: LD_VAR 0 2
57471: PUSH
57472: LD_INT 4
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: PUSH
57480: LD_VAR 0 1
57484: PUSH
57485: LD_VAR 0 2
57489: PUSH
57490: LD_INT 3
57492: MINUS
57493: PUSH
57494: LD_INT 3
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: LIST
57501: PUSH
57502: LD_VAR 0 1
57506: PUSH
57507: LD_INT 4
57509: MINUS
57510: PUSH
57511: LD_VAR 0 2
57515: PUSH
57516: LD_INT 4
57518: MINUS
57519: PUSH
57520: LD_INT 2
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: ST_TO_ADDR
// end ; 5 :
57535: GO 57675
57537: LD_INT 5
57539: DOUBLE
57540: EQUAL
57541: IFTRUE 57545
57543: GO 57674
57545: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57546: LD_ADDR_VAR 0 5
57550: PUSH
57551: LD_VAR 0 1
57555: PUSH
57556: LD_INT 4
57558: MINUS
57559: PUSH
57560: LD_VAR 0 2
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: LIST
57572: PUSH
57573: LD_VAR 0 1
57577: PUSH
57578: LD_VAR 0 2
57582: PUSH
57583: LD_INT 4
57585: MINUS
57586: PUSH
57587: LD_INT 3
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: PUSH
57595: LD_VAR 0 1
57599: PUSH
57600: LD_INT 4
57602: PLUS
57603: PUSH
57604: LD_VAR 0 2
57608: PUSH
57609: LD_INT 4
57611: PLUS
57612: PUSH
57613: LD_INT 5
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: LIST
57620: PUSH
57621: LD_VAR 0 1
57625: PUSH
57626: LD_INT 3
57628: PLUS
57629: PUSH
57630: LD_VAR 0 2
57634: PUSH
57635: LD_INT 4
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: PUSH
57643: LD_VAR 0 1
57647: PUSH
57648: LD_VAR 0 2
57652: PUSH
57653: LD_INT 3
57655: PLUS
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: LIST
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: ST_TO_ADDR
// end ; end ;
57672: GO 57675
57674: POP
// result := list ;
57675: LD_ADDR_VAR 0 4
57679: PUSH
57680: LD_VAR 0 5
57684: ST_TO_ADDR
// end ;
57685: LD_VAR 0 4
57689: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57690: LD_INT 0
57692: PPUSH
57693: PPUSH
57694: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57695: LD_VAR 0 1
57699: NOT
57700: PUSH
57701: LD_VAR 0 2
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 2
57711: PUSH
57712: LD_INT 3
57714: PUSH
57715: LD_INT 4
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: IN
57724: NOT
57725: OR
57726: IFFALSE 57730
// exit ;
57728: GO 57822
// tmp := [ ] ;
57730: LD_ADDR_VAR 0 5
57734: PUSH
57735: EMPTY
57736: ST_TO_ADDR
// for i in units do
57737: LD_ADDR_VAR 0 4
57741: PUSH
57742: LD_VAR 0 1
57746: PUSH
57747: FOR_IN
57748: IFFALSE 57791
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57750: LD_ADDR_VAR 0 5
57754: PUSH
57755: LD_VAR 0 5
57759: PPUSH
57760: LD_VAR 0 5
57764: PUSH
57765: LD_INT 1
57767: PLUS
57768: PPUSH
57769: LD_VAR 0 4
57773: PPUSH
57774: LD_VAR 0 2
57778: PPUSH
57779: CALL_OW 259
57783: PPUSH
57784: CALL_OW 2
57788: ST_TO_ADDR
57789: GO 57747
57791: POP
57792: POP
// if not tmp then
57793: LD_VAR 0 5
57797: NOT
57798: IFFALSE 57802
// exit ;
57800: GO 57822
// result := SortListByListDesc ( units , tmp ) ;
57802: LD_ADDR_VAR 0 3
57806: PUSH
57807: LD_VAR 0 1
57811: PPUSH
57812: LD_VAR 0 5
57816: PPUSH
57817: CALL_OW 77
57821: ST_TO_ADDR
// end ;
57822: LD_VAR 0 3
57826: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57827: LD_INT 0
57829: PPUSH
57830: PPUSH
57831: PPUSH
// result := false ;
57832: LD_ADDR_VAR 0 3
57836: PUSH
57837: LD_INT 0
57839: ST_TO_ADDR
// x := GetX ( building ) ;
57840: LD_ADDR_VAR 0 4
57844: PUSH
57845: LD_VAR 0 2
57849: PPUSH
57850: CALL_OW 250
57854: ST_TO_ADDR
// y := GetY ( building ) ;
57855: LD_ADDR_VAR 0 5
57859: PUSH
57860: LD_VAR 0 2
57864: PPUSH
57865: CALL_OW 251
57869: ST_TO_ADDR
// if not building or not x or not y then
57870: LD_VAR 0 2
57874: NOT
57875: PUSH
57876: LD_VAR 0 4
57880: NOT
57881: OR
57882: PUSH
57883: LD_VAR 0 5
57887: NOT
57888: OR
57889: IFFALSE 57893
// exit ;
57891: GO 57985
// if GetTaskList ( unit ) then
57893: LD_VAR 0 1
57897: PPUSH
57898: CALL_OW 437
57902: IFFALSE 57985
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57904: LD_STRING e
57906: PUSH
57907: LD_VAR 0 1
57911: PPUSH
57912: CALL_OW 437
57916: PUSH
57917: LD_INT 1
57919: ARRAY
57920: PUSH
57921: LD_INT 1
57923: ARRAY
57924: EQUAL
57925: PUSH
57926: LD_VAR 0 4
57930: PUSH
57931: LD_VAR 0 1
57935: PPUSH
57936: CALL_OW 437
57940: PUSH
57941: LD_INT 1
57943: ARRAY
57944: PUSH
57945: LD_INT 2
57947: ARRAY
57948: EQUAL
57949: AND
57950: PUSH
57951: LD_VAR 0 5
57955: PUSH
57956: LD_VAR 0 1
57960: PPUSH
57961: CALL_OW 437
57965: PUSH
57966: LD_INT 1
57968: ARRAY
57969: PUSH
57970: LD_INT 3
57972: ARRAY
57973: EQUAL
57974: AND
57975: IFFALSE 57985
// result := true end ;
57977: LD_ADDR_VAR 0 3
57981: PUSH
57982: LD_INT 1
57984: ST_TO_ADDR
// end ;
57985: LD_VAR 0 3
57989: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57990: LD_INT 0
57992: PPUSH
// result := false ;
57993: LD_ADDR_VAR 0 4
57997: PUSH
57998: LD_INT 0
58000: ST_TO_ADDR
// if GetTaskList ( unit ) then
58001: LD_VAR 0 1
58005: PPUSH
58006: CALL_OW 437
58010: IFFALSE 58093
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58012: LD_STRING M
58014: PUSH
58015: LD_VAR 0 1
58019: PPUSH
58020: CALL_OW 437
58024: PUSH
58025: LD_INT 1
58027: ARRAY
58028: PUSH
58029: LD_INT 1
58031: ARRAY
58032: EQUAL
58033: PUSH
58034: LD_VAR 0 2
58038: PUSH
58039: LD_VAR 0 1
58043: PPUSH
58044: CALL_OW 437
58048: PUSH
58049: LD_INT 1
58051: ARRAY
58052: PUSH
58053: LD_INT 2
58055: ARRAY
58056: EQUAL
58057: AND
58058: PUSH
58059: LD_VAR 0 3
58063: PUSH
58064: LD_VAR 0 1
58068: PPUSH
58069: CALL_OW 437
58073: PUSH
58074: LD_INT 1
58076: ARRAY
58077: PUSH
58078: LD_INT 3
58080: ARRAY
58081: EQUAL
58082: AND
58083: IFFALSE 58093
// result := true ;
58085: LD_ADDR_VAR 0 4
58089: PUSH
58090: LD_INT 1
58092: ST_TO_ADDR
// end ; end ;
58093: LD_VAR 0 4
58097: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58098: LD_INT 0
58100: PPUSH
58101: PPUSH
58102: PPUSH
58103: PPUSH
// if not unit or not area then
58104: LD_VAR 0 1
58108: NOT
58109: PUSH
58110: LD_VAR 0 2
58114: NOT
58115: OR
58116: IFFALSE 58120
// exit ;
58118: GO 58284
// tmp := AreaToList ( area , i ) ;
58120: LD_ADDR_VAR 0 6
58124: PUSH
58125: LD_VAR 0 2
58129: PPUSH
58130: LD_VAR 0 5
58134: PPUSH
58135: CALL_OW 517
58139: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58140: LD_ADDR_VAR 0 5
58144: PUSH
58145: DOUBLE
58146: LD_INT 1
58148: DEC
58149: ST_TO_ADDR
58150: LD_VAR 0 6
58154: PUSH
58155: LD_INT 1
58157: ARRAY
58158: PUSH
58159: FOR_TO
58160: IFFALSE 58282
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58162: LD_ADDR_VAR 0 7
58166: PUSH
58167: LD_VAR 0 6
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: PUSH
58176: LD_VAR 0 5
58180: ARRAY
58181: PUSH
58182: LD_VAR 0 6
58186: PUSH
58187: LD_INT 2
58189: ARRAY
58190: PUSH
58191: LD_VAR 0 5
58195: ARRAY
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58201: LD_VAR 0 7
58205: PUSH
58206: LD_INT 1
58208: ARRAY
58209: PPUSH
58210: LD_VAR 0 7
58214: PUSH
58215: LD_INT 2
58217: ARRAY
58218: PPUSH
58219: CALL_OW 428
58223: PUSH
58224: LD_INT 0
58226: EQUAL
58227: IFFALSE 58280
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58229: LD_VAR 0 1
58233: PPUSH
58234: LD_VAR 0 7
58238: PUSH
58239: LD_INT 1
58241: ARRAY
58242: PPUSH
58243: LD_VAR 0 7
58247: PUSH
58248: LD_INT 2
58250: ARRAY
58251: PPUSH
58252: LD_VAR 0 3
58256: PPUSH
58257: CALL_OW 48
// result := IsPlaced ( unit ) ;
58261: LD_ADDR_VAR 0 4
58265: PUSH
58266: LD_VAR 0 1
58270: PPUSH
58271: CALL_OW 305
58275: ST_TO_ADDR
// exit ;
58276: POP
58277: POP
58278: GO 58284
// end ; end ;
58280: GO 58159
58282: POP
58283: POP
// end ;
58284: LD_VAR 0 4
58288: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58289: LD_INT 0
58291: PPUSH
58292: PPUSH
58293: PPUSH
// if not side or side > 8 then
58294: LD_VAR 0 1
58298: NOT
58299: PUSH
58300: LD_VAR 0 1
58304: PUSH
58305: LD_INT 8
58307: GREATER
58308: OR
58309: IFFALSE 58313
// exit ;
58311: GO 58500
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58313: LD_ADDR_VAR 0 4
58317: PUSH
58318: LD_INT 22
58320: PUSH
58321: LD_VAR 0 1
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 21
58332: PUSH
58333: LD_INT 3
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PPUSH
58344: CALL_OW 69
58348: ST_TO_ADDR
// if not tmp then
58349: LD_VAR 0 4
58353: NOT
58354: IFFALSE 58358
// exit ;
58356: GO 58500
// enable_addtolog := true ;
58358: LD_ADDR_OWVAR 81
58362: PUSH
58363: LD_INT 1
58365: ST_TO_ADDR
// AddToLog ( [ ) ;
58366: LD_STRING [
58368: PPUSH
58369: CALL_OW 561
// for i in tmp do
58373: LD_ADDR_VAR 0 3
58377: PUSH
58378: LD_VAR 0 4
58382: PUSH
58383: FOR_IN
58384: IFFALSE 58491
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58386: LD_STRING [
58388: PUSH
58389: LD_VAR 0 3
58393: PPUSH
58394: CALL_OW 266
58398: STR
58399: PUSH
58400: LD_STRING , 
58402: STR
58403: PUSH
58404: LD_VAR 0 3
58408: PPUSH
58409: CALL_OW 250
58413: STR
58414: PUSH
58415: LD_STRING , 
58417: STR
58418: PUSH
58419: LD_VAR 0 3
58423: PPUSH
58424: CALL_OW 251
58428: STR
58429: PUSH
58430: LD_STRING , 
58432: STR
58433: PUSH
58434: LD_VAR 0 3
58438: PPUSH
58439: CALL_OW 254
58443: STR
58444: PUSH
58445: LD_STRING , 
58447: STR
58448: PUSH
58449: LD_VAR 0 3
58453: PPUSH
58454: LD_INT 1
58456: PPUSH
58457: CALL_OW 268
58461: STR
58462: PUSH
58463: LD_STRING , 
58465: STR
58466: PUSH
58467: LD_VAR 0 3
58471: PPUSH
58472: LD_INT 2
58474: PPUSH
58475: CALL_OW 268
58479: STR
58480: PUSH
58481: LD_STRING ],
58483: STR
58484: PPUSH
58485: CALL_OW 561
// end ;
58489: GO 58383
58491: POP
58492: POP
// AddToLog ( ]; ) ;
58493: LD_STRING ];
58495: PPUSH
58496: CALL_OW 561
// end ;
58500: LD_VAR 0 2
58504: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58505: LD_INT 0
58507: PPUSH
58508: PPUSH
58509: PPUSH
58510: PPUSH
58511: PPUSH
// if not area or not rate or not max then
58512: LD_VAR 0 1
58516: NOT
58517: PUSH
58518: LD_VAR 0 2
58522: NOT
58523: OR
58524: PUSH
58525: LD_VAR 0 4
58529: NOT
58530: OR
58531: IFFALSE 58535
// exit ;
58533: GO 58727
// while 1 do
58535: LD_INT 1
58537: IFFALSE 58727
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58539: LD_ADDR_VAR 0 9
58543: PUSH
58544: LD_VAR 0 1
58548: PPUSH
58549: LD_INT 1
58551: PPUSH
58552: CALL_OW 287
58556: PUSH
58557: LD_INT 10
58559: MUL
58560: ST_TO_ADDR
// r := rate / 10 ;
58561: LD_ADDR_VAR 0 7
58565: PUSH
58566: LD_VAR 0 2
58570: PUSH
58571: LD_INT 10
58573: DIVREAL
58574: ST_TO_ADDR
// time := 1 1$00 ;
58575: LD_ADDR_VAR 0 8
58579: PUSH
58580: LD_INT 2100
58582: ST_TO_ADDR
// if amount < min then
58583: LD_VAR 0 9
58587: PUSH
58588: LD_VAR 0 3
58592: LESS
58593: IFFALSE 58611
// r := r * 2 else
58595: LD_ADDR_VAR 0 7
58599: PUSH
58600: LD_VAR 0 7
58604: PUSH
58605: LD_INT 2
58607: MUL
58608: ST_TO_ADDR
58609: GO 58637
// if amount > max then
58611: LD_VAR 0 9
58615: PUSH
58616: LD_VAR 0 4
58620: GREATER
58621: IFFALSE 58637
// r := r / 2 ;
58623: LD_ADDR_VAR 0 7
58627: PUSH
58628: LD_VAR 0 7
58632: PUSH
58633: LD_INT 2
58635: DIVREAL
58636: ST_TO_ADDR
// time := time / r ;
58637: LD_ADDR_VAR 0 8
58641: PUSH
58642: LD_VAR 0 8
58646: PUSH
58647: LD_VAR 0 7
58651: DIVREAL
58652: ST_TO_ADDR
// if time < 0 then
58653: LD_VAR 0 8
58657: PUSH
58658: LD_INT 0
58660: LESS
58661: IFFALSE 58678
// time := time * - 1 ;
58663: LD_ADDR_VAR 0 8
58667: PUSH
58668: LD_VAR 0 8
58672: PUSH
58673: LD_INT 1
58675: NEG
58676: MUL
58677: ST_TO_ADDR
// wait ( time ) ;
58678: LD_VAR 0 8
58682: PPUSH
58683: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58687: LD_INT 35
58689: PPUSH
58690: LD_INT 875
58692: PPUSH
58693: CALL_OW 12
58697: PPUSH
58698: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58702: LD_INT 1
58704: PPUSH
58705: LD_INT 5
58707: PPUSH
58708: CALL_OW 12
58712: PPUSH
58713: LD_VAR 0 1
58717: PPUSH
58718: LD_INT 1
58720: PPUSH
58721: CALL_OW 55
// end ;
58725: GO 58535
// end ;
58727: LD_VAR 0 5
58731: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58732: LD_INT 0
58734: PPUSH
58735: PPUSH
58736: PPUSH
58737: PPUSH
58738: PPUSH
58739: PPUSH
58740: PPUSH
58741: PPUSH
// if not turrets or not factories then
58742: LD_VAR 0 1
58746: NOT
58747: PUSH
58748: LD_VAR 0 2
58752: NOT
58753: OR
58754: IFFALSE 58758
// exit ;
58756: GO 59065
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58758: LD_ADDR_VAR 0 10
58762: PUSH
58763: LD_INT 5
58765: PUSH
58766: LD_INT 6
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 4
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 3
58785: PUSH
58786: LD_INT 5
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 24
58800: PUSH
58801: LD_INT 25
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 23
58810: PUSH
58811: LD_INT 27
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 42
58824: PUSH
58825: LD_INT 43
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 44
58834: PUSH
58835: LD_INT 46
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 45
58844: PUSH
58845: LD_INT 47
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: LIST
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: ST_TO_ADDR
// result := [ ] ;
58862: LD_ADDR_VAR 0 3
58866: PUSH
58867: EMPTY
58868: ST_TO_ADDR
// for i in turrets do
58869: LD_ADDR_VAR 0 4
58873: PUSH
58874: LD_VAR 0 1
58878: PUSH
58879: FOR_IN
58880: IFFALSE 59063
// begin nat := GetNation ( i ) ;
58882: LD_ADDR_VAR 0 7
58886: PUSH
58887: LD_VAR 0 4
58891: PPUSH
58892: CALL_OW 248
58896: ST_TO_ADDR
// weapon := 0 ;
58897: LD_ADDR_VAR 0 8
58901: PUSH
58902: LD_INT 0
58904: ST_TO_ADDR
// if not nat then
58905: LD_VAR 0 7
58909: NOT
58910: IFFALSE 58914
// continue ;
58912: GO 58879
// for j in list [ nat ] do
58914: LD_ADDR_VAR 0 5
58918: PUSH
58919: LD_VAR 0 10
58923: PUSH
58924: LD_VAR 0 7
58928: ARRAY
58929: PUSH
58930: FOR_IN
58931: IFFALSE 58972
// if GetBWeapon ( i ) = j [ 1 ] then
58933: LD_VAR 0 4
58937: PPUSH
58938: CALL_OW 269
58942: PUSH
58943: LD_VAR 0 5
58947: PUSH
58948: LD_INT 1
58950: ARRAY
58951: EQUAL
58952: IFFALSE 58970
// begin weapon := j [ 2 ] ;
58954: LD_ADDR_VAR 0 8
58958: PUSH
58959: LD_VAR 0 5
58963: PUSH
58964: LD_INT 2
58966: ARRAY
58967: ST_TO_ADDR
// break ;
58968: GO 58972
// end ;
58970: GO 58930
58972: POP
58973: POP
// if not weapon then
58974: LD_VAR 0 8
58978: NOT
58979: IFFALSE 58983
// continue ;
58981: GO 58879
// for k in factories do
58983: LD_ADDR_VAR 0 6
58987: PUSH
58988: LD_VAR 0 2
58992: PUSH
58993: FOR_IN
58994: IFFALSE 59059
// begin weapons := AvailableWeaponList ( k ) ;
58996: LD_ADDR_VAR 0 9
59000: PUSH
59001: LD_VAR 0 6
59005: PPUSH
59006: CALL_OW 478
59010: ST_TO_ADDR
// if not weapons then
59011: LD_VAR 0 9
59015: NOT
59016: IFFALSE 59020
// continue ;
59018: GO 58993
// if weapon in weapons then
59020: LD_VAR 0 8
59024: PUSH
59025: LD_VAR 0 9
59029: IN
59030: IFFALSE 59057
// begin result := [ i , weapon ] ;
59032: LD_ADDR_VAR 0 3
59036: PUSH
59037: LD_VAR 0 4
59041: PUSH
59042: LD_VAR 0 8
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: ST_TO_ADDR
// exit ;
59051: POP
59052: POP
59053: POP
59054: POP
59055: GO 59065
// end ; end ;
59057: GO 58993
59059: POP
59060: POP
// end ;
59061: GO 58879
59063: POP
59064: POP
// end ;
59065: LD_VAR 0 3
59069: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59070: LD_INT 0
59072: PPUSH
// if not side or side > 8 then
59073: LD_VAR 0 3
59077: NOT
59078: PUSH
59079: LD_VAR 0 3
59083: PUSH
59084: LD_INT 8
59086: GREATER
59087: OR
59088: IFFALSE 59092
// exit ;
59090: GO 59151
// if not range then
59092: LD_VAR 0 4
59096: NOT
59097: IFFALSE 59108
// range := - 12 ;
59099: LD_ADDR_VAR 0 4
59103: PUSH
59104: LD_INT 12
59106: NEG
59107: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59108: LD_VAR 0 1
59112: PPUSH
59113: LD_VAR 0 2
59117: PPUSH
59118: LD_VAR 0 3
59122: PPUSH
59123: LD_VAR 0 4
59127: PPUSH
59128: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59132: LD_VAR 0 1
59136: PPUSH
59137: LD_VAR 0 2
59141: PPUSH
59142: LD_VAR 0 3
59146: PPUSH
59147: CALL_OW 331
// end ;
59151: LD_VAR 0 5
59155: RET
// export function Video ( mode ) ; begin
59156: LD_INT 0
59158: PPUSH
// ingame_video = mode ;
59159: LD_ADDR_OWVAR 52
59163: PUSH
59164: LD_VAR 0 1
59168: ST_TO_ADDR
// interface_hidden = mode ;
59169: LD_ADDR_OWVAR 54
59173: PUSH
59174: LD_VAR 0 1
59178: ST_TO_ADDR
// end ;
59179: LD_VAR 0 2
59183: RET
// export function Join ( array , element ) ; begin
59184: LD_INT 0
59186: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59187: LD_ADDR_VAR 0 3
59191: PUSH
59192: LD_VAR 0 1
59196: PPUSH
59197: LD_VAR 0 1
59201: PUSH
59202: LD_INT 1
59204: PLUS
59205: PPUSH
59206: LD_VAR 0 2
59210: PPUSH
59211: CALL_OW 1
59215: ST_TO_ADDR
// end ;
59216: LD_VAR 0 3
59220: RET
// export function JoinUnion ( array , element ) ; begin
59221: LD_INT 0
59223: PPUSH
// result := array union element ;
59224: LD_ADDR_VAR 0 3
59228: PUSH
59229: LD_VAR 0 1
59233: PUSH
59234: LD_VAR 0 2
59238: UNION
59239: ST_TO_ADDR
// end ;
59240: LD_VAR 0 3
59244: RET
// export function GetBehemoths ( side ) ; begin
59245: LD_INT 0
59247: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59248: LD_ADDR_VAR 0 2
59252: PUSH
59253: LD_INT 22
59255: PUSH
59256: LD_VAR 0 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 31
59267: PUSH
59268: LD_INT 25
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PPUSH
59279: CALL_OW 69
59283: ST_TO_ADDR
// end ;
59284: LD_VAR 0 2
59288: RET
// export function Shuffle ( array ) ; var i , index ; begin
59289: LD_INT 0
59291: PPUSH
59292: PPUSH
59293: PPUSH
// result := [ ] ;
59294: LD_ADDR_VAR 0 2
59298: PUSH
59299: EMPTY
59300: ST_TO_ADDR
// if not array then
59301: LD_VAR 0 1
59305: NOT
59306: IFFALSE 59310
// exit ;
59308: GO 59409
// Randomize ;
59310: CALL_OW 10
// for i = array downto 1 do
59314: LD_ADDR_VAR 0 3
59318: PUSH
59319: DOUBLE
59320: LD_VAR 0 1
59324: INC
59325: ST_TO_ADDR
59326: LD_INT 1
59328: PUSH
59329: FOR_DOWNTO
59330: IFFALSE 59407
// begin index := rand ( 1 , array ) ;
59332: LD_ADDR_VAR 0 4
59336: PUSH
59337: LD_INT 1
59339: PPUSH
59340: LD_VAR 0 1
59344: PPUSH
59345: CALL_OW 12
59349: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59350: LD_ADDR_VAR 0 2
59354: PUSH
59355: LD_VAR 0 2
59359: PPUSH
59360: LD_VAR 0 2
59364: PUSH
59365: LD_INT 1
59367: PLUS
59368: PPUSH
59369: LD_VAR 0 1
59373: PUSH
59374: LD_VAR 0 4
59378: ARRAY
59379: PPUSH
59380: CALL_OW 2
59384: ST_TO_ADDR
// array := Delete ( array , index ) ;
59385: LD_ADDR_VAR 0 1
59389: PUSH
59390: LD_VAR 0 1
59394: PPUSH
59395: LD_VAR 0 4
59399: PPUSH
59400: CALL_OW 3
59404: ST_TO_ADDR
// end ;
59405: GO 59329
59407: POP
59408: POP
// end ;
59409: LD_VAR 0 2
59413: RET
// export function GetBaseMaterials ( base ) ; begin
59414: LD_INT 0
59416: PPUSH
// result := [ 0 , 0 , 0 ] ;
59417: LD_ADDR_VAR 0 2
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: LIST
59435: ST_TO_ADDR
// if not base then
59436: LD_VAR 0 1
59440: NOT
59441: IFFALSE 59445
// exit ;
59443: GO 59494
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59445: LD_ADDR_VAR 0 2
59449: PUSH
59450: LD_VAR 0 1
59454: PPUSH
59455: LD_INT 1
59457: PPUSH
59458: CALL_OW 275
59462: PUSH
59463: LD_VAR 0 1
59467: PPUSH
59468: LD_INT 2
59470: PPUSH
59471: CALL_OW 275
59475: PUSH
59476: LD_VAR 0 1
59480: PPUSH
59481: LD_INT 3
59483: PPUSH
59484: CALL_OW 275
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: ST_TO_ADDR
// end ;
59494: LD_VAR 0 2
59498: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59499: LD_INT 0
59501: PPUSH
59502: PPUSH
// result := array ;
59503: LD_ADDR_VAR 0 3
59507: PUSH
59508: LD_VAR 0 1
59512: ST_TO_ADDR
// if size > 0 then
59513: LD_VAR 0 2
59517: PUSH
59518: LD_INT 0
59520: GREATER
59521: IFFALSE 59567
// for i := array downto size do
59523: LD_ADDR_VAR 0 4
59527: PUSH
59528: DOUBLE
59529: LD_VAR 0 1
59533: INC
59534: ST_TO_ADDR
59535: LD_VAR 0 2
59539: PUSH
59540: FOR_DOWNTO
59541: IFFALSE 59565
// result := Delete ( result , result ) ;
59543: LD_ADDR_VAR 0 3
59547: PUSH
59548: LD_VAR 0 3
59552: PPUSH
59553: LD_VAR 0 3
59557: PPUSH
59558: CALL_OW 3
59562: ST_TO_ADDR
59563: GO 59540
59565: POP
59566: POP
// end ;
59567: LD_VAR 0 3
59571: RET
// export function ComExit ( unit ) ; var tmp ; begin
59572: LD_INT 0
59574: PPUSH
59575: PPUSH
// if not IsInUnit ( unit ) then
59576: LD_VAR 0 1
59580: PPUSH
59581: CALL_OW 310
59585: NOT
59586: IFFALSE 59590
// exit ;
59588: GO 59650
// tmp := IsInUnit ( unit ) ;
59590: LD_ADDR_VAR 0 3
59594: PUSH
59595: LD_VAR 0 1
59599: PPUSH
59600: CALL_OW 310
59604: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59605: LD_VAR 0 3
59609: PPUSH
59610: CALL_OW 247
59614: PUSH
59615: LD_INT 2
59617: EQUAL
59618: IFFALSE 59631
// ComExitVehicle ( unit ) else
59620: LD_VAR 0 1
59624: PPUSH
59625: CALL_OW 121
59629: GO 59640
// ComExitBuilding ( unit ) ;
59631: LD_VAR 0 1
59635: PPUSH
59636: CALL_OW 122
// result := tmp ;
59640: LD_ADDR_VAR 0 2
59644: PUSH
59645: LD_VAR 0 3
59649: ST_TO_ADDR
// end ;
59650: LD_VAR 0 2
59654: RET
// export function ComExitAll ( units ) ; var i ; begin
59655: LD_INT 0
59657: PPUSH
59658: PPUSH
// if not units then
59659: LD_VAR 0 1
59663: NOT
59664: IFFALSE 59668
// exit ;
59666: GO 59694
// for i in units do
59668: LD_ADDR_VAR 0 3
59672: PUSH
59673: LD_VAR 0 1
59677: PUSH
59678: FOR_IN
59679: IFFALSE 59692
// ComExit ( i ) ;
59681: LD_VAR 0 3
59685: PPUSH
59686: CALL 59572 0 1
59690: GO 59678
59692: POP
59693: POP
// end ;
59694: LD_VAR 0 2
59698: RET
// export function ResetHc ; begin
59699: LD_INT 0
59701: PPUSH
// InitHc ;
59702: CALL_OW 19
// hc_importance := 0 ;
59706: LD_ADDR_OWVAR 32
59710: PUSH
59711: LD_INT 0
59713: ST_TO_ADDR
// end ;
59714: LD_VAR 0 1
59718: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59719: LD_INT 0
59721: PPUSH
59722: PPUSH
59723: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59724: LD_ADDR_VAR 0 6
59728: PUSH
59729: LD_VAR 0 1
59733: PUSH
59734: LD_VAR 0 3
59738: PLUS
59739: PUSH
59740: LD_INT 2
59742: DIV
59743: ST_TO_ADDR
// if _x < 0 then
59744: LD_VAR 0 6
59748: PUSH
59749: LD_INT 0
59751: LESS
59752: IFFALSE 59769
// _x := _x * - 1 ;
59754: LD_ADDR_VAR 0 6
59758: PUSH
59759: LD_VAR 0 6
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: MUL
59768: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59769: LD_ADDR_VAR 0 7
59773: PUSH
59774: LD_VAR 0 2
59778: PUSH
59779: LD_VAR 0 4
59783: PLUS
59784: PUSH
59785: LD_INT 2
59787: DIV
59788: ST_TO_ADDR
// if _y < 0 then
59789: LD_VAR 0 7
59793: PUSH
59794: LD_INT 0
59796: LESS
59797: IFFALSE 59814
// _y := _y * - 1 ;
59799: LD_ADDR_VAR 0 7
59803: PUSH
59804: LD_VAR 0 7
59808: PUSH
59809: LD_INT 1
59811: NEG
59812: MUL
59813: ST_TO_ADDR
// result := [ _x , _y ] ;
59814: LD_ADDR_VAR 0 5
59818: PUSH
59819: LD_VAR 0 6
59823: PUSH
59824: LD_VAR 0 7
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: ST_TO_ADDR
// end ;
59833: LD_VAR 0 5
59837: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59838: LD_INT 0
59840: PPUSH
59841: PPUSH
59842: PPUSH
59843: PPUSH
// task := GetTaskList ( unit ) ;
59844: LD_ADDR_VAR 0 7
59848: PUSH
59849: LD_VAR 0 1
59853: PPUSH
59854: CALL_OW 437
59858: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59859: LD_VAR 0 7
59863: NOT
59864: PUSH
59865: LD_VAR 0 1
59869: PPUSH
59870: LD_VAR 0 2
59874: PPUSH
59875: CALL_OW 308
59879: NOT
59880: AND
59881: IFFALSE 59885
// exit ;
59883: GO 60003
// if IsInArea ( unit , area ) then
59885: LD_VAR 0 1
59889: PPUSH
59890: LD_VAR 0 2
59894: PPUSH
59895: CALL_OW 308
59899: IFFALSE 59917
// begin ComMoveToArea ( unit , goAway ) ;
59901: LD_VAR 0 1
59905: PPUSH
59906: LD_VAR 0 3
59910: PPUSH
59911: CALL_OW 113
// exit ;
59915: GO 60003
// end ; if task [ 1 ] [ 1 ] <> M then
59917: LD_VAR 0 7
59921: PUSH
59922: LD_INT 1
59924: ARRAY
59925: PUSH
59926: LD_INT 1
59928: ARRAY
59929: PUSH
59930: LD_STRING M
59932: NONEQUAL
59933: IFFALSE 59937
// exit ;
59935: GO 60003
// x := task [ 1 ] [ 2 ] ;
59937: LD_ADDR_VAR 0 5
59941: PUSH
59942: LD_VAR 0 7
59946: PUSH
59947: LD_INT 1
59949: ARRAY
59950: PUSH
59951: LD_INT 2
59953: ARRAY
59954: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59955: LD_ADDR_VAR 0 6
59959: PUSH
59960: LD_VAR 0 7
59964: PUSH
59965: LD_INT 1
59967: ARRAY
59968: PUSH
59969: LD_INT 3
59971: ARRAY
59972: ST_TO_ADDR
// if InArea ( x , y , area ) then
59973: LD_VAR 0 5
59977: PPUSH
59978: LD_VAR 0 6
59982: PPUSH
59983: LD_VAR 0 2
59987: PPUSH
59988: CALL_OW 309
59992: IFFALSE 60003
// ComStop ( unit ) ;
59994: LD_VAR 0 1
59998: PPUSH
59999: CALL_OW 141
// end ;
60003: LD_VAR 0 4
60007: RET
// export function Abs ( value ) ; begin
60008: LD_INT 0
60010: PPUSH
// result := value ;
60011: LD_ADDR_VAR 0 2
60015: PUSH
60016: LD_VAR 0 1
60020: ST_TO_ADDR
// if value < 0 then
60021: LD_VAR 0 1
60025: PUSH
60026: LD_INT 0
60028: LESS
60029: IFFALSE 60046
// result := value * - 1 ;
60031: LD_ADDR_VAR 0 2
60035: PUSH
60036: LD_VAR 0 1
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: MUL
60045: ST_TO_ADDR
// end ;
60046: LD_VAR 0 2
60050: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60051: LD_INT 0
60053: PPUSH
60054: PPUSH
60055: PPUSH
60056: PPUSH
60057: PPUSH
60058: PPUSH
60059: PPUSH
60060: PPUSH
// if not unit or not building then
60061: LD_VAR 0 1
60065: NOT
60066: PUSH
60067: LD_VAR 0 2
60071: NOT
60072: OR
60073: IFFALSE 60077
// exit ;
60075: GO 60303
// x := GetX ( building ) ;
60077: LD_ADDR_VAR 0 4
60081: PUSH
60082: LD_VAR 0 2
60086: PPUSH
60087: CALL_OW 250
60091: ST_TO_ADDR
// y := GetY ( building ) ;
60092: LD_ADDR_VAR 0 6
60096: PUSH
60097: LD_VAR 0 2
60101: PPUSH
60102: CALL_OW 251
60106: ST_TO_ADDR
// d := GetDir ( building ) ;
60107: LD_ADDR_VAR 0 8
60111: PUSH
60112: LD_VAR 0 2
60116: PPUSH
60117: CALL_OW 254
60121: ST_TO_ADDR
// r := 4 ;
60122: LD_ADDR_VAR 0 9
60126: PUSH
60127: LD_INT 4
60129: ST_TO_ADDR
// for i := 1 to 5 do
60130: LD_ADDR_VAR 0 10
60134: PUSH
60135: DOUBLE
60136: LD_INT 1
60138: DEC
60139: ST_TO_ADDR
60140: LD_INT 5
60142: PUSH
60143: FOR_TO
60144: IFFALSE 60301
// begin _x := ShiftX ( x , d , r + i ) ;
60146: LD_ADDR_VAR 0 5
60150: PUSH
60151: LD_VAR 0 4
60155: PPUSH
60156: LD_VAR 0 8
60160: PPUSH
60161: LD_VAR 0 9
60165: PUSH
60166: LD_VAR 0 10
60170: PLUS
60171: PPUSH
60172: CALL_OW 272
60176: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60177: LD_ADDR_VAR 0 7
60181: PUSH
60182: LD_VAR 0 6
60186: PPUSH
60187: LD_VAR 0 8
60191: PPUSH
60192: LD_VAR 0 9
60196: PUSH
60197: LD_VAR 0 10
60201: PLUS
60202: PPUSH
60203: CALL_OW 273
60207: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60208: LD_VAR 0 5
60212: PPUSH
60213: LD_VAR 0 7
60217: PPUSH
60218: CALL_OW 488
60222: PUSH
60223: LD_VAR 0 5
60227: PPUSH
60228: LD_VAR 0 7
60232: PPUSH
60233: CALL_OW 428
60237: PPUSH
60238: CALL_OW 247
60242: PUSH
60243: LD_INT 3
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: IN
60253: NOT
60254: AND
60255: IFFALSE 60299
// begin ComMoveXY ( unit , _x , _y ) ;
60257: LD_VAR 0 1
60261: PPUSH
60262: LD_VAR 0 5
60266: PPUSH
60267: LD_VAR 0 7
60271: PPUSH
60272: CALL_OW 111
// result := [ _x , _y ] ;
60276: LD_ADDR_VAR 0 3
60280: PUSH
60281: LD_VAR 0 5
60285: PUSH
60286: LD_VAR 0 7
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: ST_TO_ADDR
// exit ;
60295: POP
60296: POP
60297: GO 60303
// end ; end ;
60299: GO 60143
60301: POP
60302: POP
// end ;
60303: LD_VAR 0 3
60307: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60308: LD_INT 0
60310: PPUSH
60311: PPUSH
60312: PPUSH
// result := 0 ;
60313: LD_ADDR_VAR 0 3
60317: PUSH
60318: LD_INT 0
60320: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60321: LD_VAR 0 1
60325: PUSH
60326: LD_INT 0
60328: LESS
60329: PUSH
60330: LD_VAR 0 1
60334: PUSH
60335: LD_INT 8
60337: GREATER
60338: OR
60339: PUSH
60340: LD_VAR 0 2
60344: PUSH
60345: LD_INT 0
60347: LESS
60348: OR
60349: PUSH
60350: LD_VAR 0 2
60354: PUSH
60355: LD_INT 8
60357: GREATER
60358: OR
60359: IFFALSE 60363
// exit ;
60361: GO 60438
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60363: LD_ADDR_VAR 0 4
60367: PUSH
60368: LD_INT 22
60370: PUSH
60371: LD_VAR 0 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PPUSH
60380: CALL_OW 69
60384: PUSH
60385: FOR_IN
60386: IFFALSE 60436
// begin un := UnitShoot ( i ) ;
60388: LD_ADDR_VAR 0 5
60392: PUSH
60393: LD_VAR 0 4
60397: PPUSH
60398: CALL_OW 504
60402: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60403: LD_VAR 0 5
60407: PPUSH
60408: CALL_OW 255
60412: PUSH
60413: LD_VAR 0 1
60417: EQUAL
60418: IFFALSE 60434
// begin result := un ;
60420: LD_ADDR_VAR 0 3
60424: PUSH
60425: LD_VAR 0 5
60429: ST_TO_ADDR
// exit ;
60430: POP
60431: POP
60432: GO 60438
// end ; end ;
60434: GO 60385
60436: POP
60437: POP
// end ;
60438: LD_VAR 0 3
60442: RET
// export function GetCargoBay ( units ) ; begin
60443: LD_INT 0
60445: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60446: LD_ADDR_VAR 0 2
60450: PUSH
60451: LD_VAR 0 1
60455: PPUSH
60456: LD_INT 2
60458: PUSH
60459: LD_INT 34
60461: PUSH
60462: LD_INT 12
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 34
60471: PUSH
60472: LD_INT 51
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 34
60481: PUSH
60482: LD_INT 32
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 34
60491: PUSH
60492: LD_EXP 94
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: PPUSH
60508: CALL_OW 72
60512: ST_TO_ADDR
// end ;
60513: LD_VAR 0 2
60517: RET
// export function Negate ( value ) ; begin
60518: LD_INT 0
60520: PPUSH
// result := not value ;
60521: LD_ADDR_VAR 0 2
60525: PUSH
60526: LD_VAR 0 1
60530: NOT
60531: ST_TO_ADDR
// end ;
60532: LD_VAR 0 2
60536: RET
// export function Inc ( value ) ; begin
60537: LD_INT 0
60539: PPUSH
// result := value + 1 ;
60540: LD_ADDR_VAR 0 2
60544: PUSH
60545: LD_VAR 0 1
60549: PUSH
60550: LD_INT 1
60552: PLUS
60553: ST_TO_ADDR
// end ;
60554: LD_VAR 0 2
60558: RET
// export function Dec ( value ) ; begin
60559: LD_INT 0
60561: PPUSH
// result := value - 1 ;
60562: LD_ADDR_VAR 0 2
60566: PUSH
60567: LD_VAR 0 1
60571: PUSH
60572: LD_INT 1
60574: MINUS
60575: ST_TO_ADDR
// end ;
60576: LD_VAR 0 2
60580: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60581: LD_INT 0
60583: PPUSH
60584: PPUSH
60585: PPUSH
60586: PPUSH
60587: PPUSH
60588: PPUSH
60589: PPUSH
60590: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60591: LD_VAR 0 1
60595: PPUSH
60596: LD_VAR 0 2
60600: PPUSH
60601: CALL_OW 488
60605: NOT
60606: PUSH
60607: LD_VAR 0 3
60611: PPUSH
60612: LD_VAR 0 4
60616: PPUSH
60617: CALL_OW 488
60621: NOT
60622: OR
60623: IFFALSE 60636
// begin result := - 1 ;
60625: LD_ADDR_VAR 0 5
60629: PUSH
60630: LD_INT 1
60632: NEG
60633: ST_TO_ADDR
// exit ;
60634: GO 60871
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60636: LD_ADDR_VAR 0 12
60640: PUSH
60641: LD_VAR 0 1
60645: PPUSH
60646: LD_VAR 0 2
60650: PPUSH
60651: LD_VAR 0 3
60655: PPUSH
60656: LD_VAR 0 4
60660: PPUSH
60661: CALL 59719 0 4
60665: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60666: LD_ADDR_VAR 0 11
60670: PUSH
60671: LD_VAR 0 1
60675: PPUSH
60676: LD_VAR 0 2
60680: PPUSH
60681: LD_VAR 0 12
60685: PUSH
60686: LD_INT 1
60688: ARRAY
60689: PPUSH
60690: LD_VAR 0 12
60694: PUSH
60695: LD_INT 2
60697: ARRAY
60698: PPUSH
60699: CALL_OW 298
60703: ST_TO_ADDR
// distance := 9999 ;
60704: LD_ADDR_VAR 0 10
60708: PUSH
60709: LD_INT 9999
60711: ST_TO_ADDR
// for i := 0 to 5 do
60712: LD_ADDR_VAR 0 6
60716: PUSH
60717: DOUBLE
60718: LD_INT 0
60720: DEC
60721: ST_TO_ADDR
60722: LD_INT 5
60724: PUSH
60725: FOR_TO
60726: IFFALSE 60869
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60728: LD_ADDR_VAR 0 7
60732: PUSH
60733: LD_VAR 0 1
60737: PPUSH
60738: LD_VAR 0 6
60742: PPUSH
60743: LD_VAR 0 11
60747: PPUSH
60748: CALL_OW 272
60752: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60753: LD_ADDR_VAR 0 8
60757: PUSH
60758: LD_VAR 0 2
60762: PPUSH
60763: LD_VAR 0 6
60767: PPUSH
60768: LD_VAR 0 11
60772: PPUSH
60773: CALL_OW 273
60777: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60778: LD_VAR 0 7
60782: PPUSH
60783: LD_VAR 0 8
60787: PPUSH
60788: CALL_OW 488
60792: NOT
60793: IFFALSE 60797
// continue ;
60795: GO 60725
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60797: LD_ADDR_VAR 0 9
60801: PUSH
60802: LD_VAR 0 12
60806: PUSH
60807: LD_INT 1
60809: ARRAY
60810: PPUSH
60811: LD_VAR 0 12
60815: PUSH
60816: LD_INT 2
60818: ARRAY
60819: PPUSH
60820: LD_VAR 0 7
60824: PPUSH
60825: LD_VAR 0 8
60829: PPUSH
60830: CALL_OW 298
60834: ST_TO_ADDR
// if tmp < distance then
60835: LD_VAR 0 9
60839: PUSH
60840: LD_VAR 0 10
60844: LESS
60845: IFFALSE 60867
// begin result := i ;
60847: LD_ADDR_VAR 0 5
60851: PUSH
60852: LD_VAR 0 6
60856: ST_TO_ADDR
// distance := tmp ;
60857: LD_ADDR_VAR 0 10
60861: PUSH
60862: LD_VAR 0 9
60866: ST_TO_ADDR
// end ; end ;
60867: GO 60725
60869: POP
60870: POP
// end ;
60871: LD_VAR 0 5
60875: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60876: LD_INT 0
60878: PPUSH
60879: PPUSH
// if not driver or not IsInUnit ( driver ) then
60880: LD_VAR 0 1
60884: NOT
60885: PUSH
60886: LD_VAR 0 1
60890: PPUSH
60891: CALL_OW 310
60895: NOT
60896: OR
60897: IFFALSE 60901
// exit ;
60899: GO 60991
// vehicle := IsInUnit ( driver ) ;
60901: LD_ADDR_VAR 0 3
60905: PUSH
60906: LD_VAR 0 1
60910: PPUSH
60911: CALL_OW 310
60915: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60916: LD_VAR 0 1
60920: PPUSH
60921: LD_STRING \
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: LD_INT 0
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: PUSH
60951: LD_STRING E
60953: PUSH
60954: LD_INT 0
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: LD_VAR 0 3
60964: PUSH
60965: LD_INT 0
60967: PUSH
60968: LD_INT 0
60970: PUSH
60971: LD_INT 0
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PPUSH
60987: CALL_OW 446
// end ;
60991: LD_VAR 0 2
60995: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60996: LD_INT 0
60998: PPUSH
60999: PPUSH
// if not driver or not IsInUnit ( driver ) then
61000: LD_VAR 0 1
61004: NOT
61005: PUSH
61006: LD_VAR 0 1
61010: PPUSH
61011: CALL_OW 310
61015: NOT
61016: OR
61017: IFFALSE 61021
// exit ;
61019: GO 61111
// vehicle := IsInUnit ( driver ) ;
61021: LD_ADDR_VAR 0 3
61025: PUSH
61026: LD_VAR 0 1
61030: PPUSH
61031: CALL_OW 310
61035: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61036: LD_VAR 0 1
61040: PPUSH
61041: LD_STRING \
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: PUSH
61071: LD_STRING E
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: LD_VAR 0 3
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 0
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PPUSH
61107: CALL_OW 447
// end ;
61111: LD_VAR 0 2
61115: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61116: LD_INT 0
61118: PPUSH
61119: PPUSH
61120: PPUSH
// tmp := [ ] ;
61121: LD_ADDR_VAR 0 5
61125: PUSH
61126: EMPTY
61127: ST_TO_ADDR
// for i in units do
61128: LD_ADDR_VAR 0 4
61132: PUSH
61133: LD_VAR 0 1
61137: PUSH
61138: FOR_IN
61139: IFFALSE 61177
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61141: LD_ADDR_VAR 0 5
61145: PUSH
61146: LD_VAR 0 5
61150: PPUSH
61151: LD_VAR 0 5
61155: PUSH
61156: LD_INT 1
61158: PLUS
61159: PPUSH
61160: LD_VAR 0 4
61164: PPUSH
61165: CALL_OW 256
61169: PPUSH
61170: CALL_OW 2
61174: ST_TO_ADDR
61175: GO 61138
61177: POP
61178: POP
// if not tmp then
61179: LD_VAR 0 5
61183: NOT
61184: IFFALSE 61188
// exit ;
61186: GO 61236
// if asc then
61188: LD_VAR 0 2
61192: IFFALSE 61216
// result := SortListByListAsc ( units , tmp ) else
61194: LD_ADDR_VAR 0 3
61198: PUSH
61199: LD_VAR 0 1
61203: PPUSH
61204: LD_VAR 0 5
61208: PPUSH
61209: CALL_OW 76
61213: ST_TO_ADDR
61214: GO 61236
// result := SortListByListDesc ( units , tmp ) ;
61216: LD_ADDR_VAR 0 3
61220: PUSH
61221: LD_VAR 0 1
61225: PPUSH
61226: LD_VAR 0 5
61230: PPUSH
61231: CALL_OW 77
61235: ST_TO_ADDR
// end ;
61236: LD_VAR 0 3
61240: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61241: LD_INT 0
61243: PPUSH
61244: PPUSH
// task := GetTaskList ( mech ) ;
61245: LD_ADDR_VAR 0 4
61249: PUSH
61250: LD_VAR 0 1
61254: PPUSH
61255: CALL_OW 437
61259: ST_TO_ADDR
// if not task then
61260: LD_VAR 0 4
61264: NOT
61265: IFFALSE 61269
// exit ;
61267: GO 61311
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61269: LD_ADDR_VAR 0 3
61273: PUSH
61274: LD_VAR 0 4
61278: PUSH
61279: LD_INT 1
61281: ARRAY
61282: PUSH
61283: LD_INT 1
61285: ARRAY
61286: PUSH
61287: LD_STRING r
61289: EQUAL
61290: PUSH
61291: LD_VAR 0 4
61295: PUSH
61296: LD_INT 1
61298: ARRAY
61299: PUSH
61300: LD_INT 4
61302: ARRAY
61303: PUSH
61304: LD_VAR 0 2
61308: EQUAL
61309: AND
61310: ST_TO_ADDR
// end ;
61311: LD_VAR 0 3
61315: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61316: LD_INT 0
61318: PPUSH
// SetDir ( unit , d ) ;
61319: LD_VAR 0 1
61323: PPUSH
61324: LD_VAR 0 4
61328: PPUSH
61329: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61333: LD_VAR 0 1
61337: PPUSH
61338: LD_VAR 0 2
61342: PPUSH
61343: LD_VAR 0 3
61347: PPUSH
61348: LD_VAR 0 5
61352: PPUSH
61353: CALL_OW 48
// end ;
61357: LD_VAR 0 6
61361: RET
// export function ToNaturalNumber ( number ) ; begin
61362: LD_INT 0
61364: PPUSH
// result := number div 1 ;
61365: LD_ADDR_VAR 0 2
61369: PUSH
61370: LD_VAR 0 1
61374: PUSH
61375: LD_INT 1
61377: DIV
61378: ST_TO_ADDR
// if number < 0 then
61379: LD_VAR 0 1
61383: PUSH
61384: LD_INT 0
61386: LESS
61387: IFFALSE 61397
// result := 0 ;
61389: LD_ADDR_VAR 0 2
61393: PUSH
61394: LD_INT 0
61396: ST_TO_ADDR
// end ;
61397: LD_VAR 0 2
61401: RET
// export function SortByClass ( units , class ) ; var un ; begin
61402: LD_INT 0
61404: PPUSH
61405: PPUSH
// if not units or not class then
61406: LD_VAR 0 1
61410: NOT
61411: PUSH
61412: LD_VAR 0 2
61416: NOT
61417: OR
61418: IFFALSE 61422
// exit ;
61420: GO 61517
// result := [ ] ;
61422: LD_ADDR_VAR 0 3
61426: PUSH
61427: EMPTY
61428: ST_TO_ADDR
// for un in units do
61429: LD_ADDR_VAR 0 4
61433: PUSH
61434: LD_VAR 0 1
61438: PUSH
61439: FOR_IN
61440: IFFALSE 61515
// if GetClass ( un ) = class then
61442: LD_VAR 0 4
61446: PPUSH
61447: CALL_OW 257
61451: PUSH
61452: LD_VAR 0 2
61456: EQUAL
61457: IFFALSE 61484
// result := Insert ( result , 1 , un ) else
61459: LD_ADDR_VAR 0 3
61463: PUSH
61464: LD_VAR 0 3
61468: PPUSH
61469: LD_INT 1
61471: PPUSH
61472: LD_VAR 0 4
61476: PPUSH
61477: CALL_OW 2
61481: ST_TO_ADDR
61482: GO 61513
// result := Replace ( result , result + 1 , un ) ;
61484: LD_ADDR_VAR 0 3
61488: PUSH
61489: LD_VAR 0 3
61493: PPUSH
61494: LD_VAR 0 3
61498: PUSH
61499: LD_INT 1
61501: PLUS
61502: PPUSH
61503: LD_VAR 0 4
61507: PPUSH
61508: CALL_OW 1
61512: ST_TO_ADDR
61513: GO 61439
61515: POP
61516: POP
// end ;
61517: LD_VAR 0 3
61521: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61522: LD_INT 0
61524: PPUSH
61525: PPUSH
61526: PPUSH
61527: PPUSH
61528: PPUSH
61529: PPUSH
61530: PPUSH
// result := [ ] ;
61531: LD_ADDR_VAR 0 4
61535: PUSH
61536: EMPTY
61537: ST_TO_ADDR
// if x - r < 0 then
61538: LD_VAR 0 1
61542: PUSH
61543: LD_VAR 0 3
61547: MINUS
61548: PUSH
61549: LD_INT 0
61551: LESS
61552: IFFALSE 61564
// min_x := 0 else
61554: LD_ADDR_VAR 0 8
61558: PUSH
61559: LD_INT 0
61561: ST_TO_ADDR
61562: GO 61580
// min_x := x - r ;
61564: LD_ADDR_VAR 0 8
61568: PUSH
61569: LD_VAR 0 1
61573: PUSH
61574: LD_VAR 0 3
61578: MINUS
61579: ST_TO_ADDR
// if y - r < 0 then
61580: LD_VAR 0 2
61584: PUSH
61585: LD_VAR 0 3
61589: MINUS
61590: PUSH
61591: LD_INT 0
61593: LESS
61594: IFFALSE 61606
// min_y := 0 else
61596: LD_ADDR_VAR 0 7
61600: PUSH
61601: LD_INT 0
61603: ST_TO_ADDR
61604: GO 61622
// min_y := y - r ;
61606: LD_ADDR_VAR 0 7
61610: PUSH
61611: LD_VAR 0 2
61615: PUSH
61616: LD_VAR 0 3
61620: MINUS
61621: ST_TO_ADDR
// max_x := x + r ;
61622: LD_ADDR_VAR 0 9
61626: PUSH
61627: LD_VAR 0 1
61631: PUSH
61632: LD_VAR 0 3
61636: PLUS
61637: ST_TO_ADDR
// max_y := y + r ;
61638: LD_ADDR_VAR 0 10
61642: PUSH
61643: LD_VAR 0 2
61647: PUSH
61648: LD_VAR 0 3
61652: PLUS
61653: ST_TO_ADDR
// for _x = min_x to max_x do
61654: LD_ADDR_VAR 0 5
61658: PUSH
61659: DOUBLE
61660: LD_VAR 0 8
61664: DEC
61665: ST_TO_ADDR
61666: LD_VAR 0 9
61670: PUSH
61671: FOR_TO
61672: IFFALSE 61773
// for _y = min_y to max_y do
61674: LD_ADDR_VAR 0 6
61678: PUSH
61679: DOUBLE
61680: LD_VAR 0 7
61684: DEC
61685: ST_TO_ADDR
61686: LD_VAR 0 10
61690: PUSH
61691: FOR_TO
61692: IFFALSE 61769
// begin if not ValidHex ( _x , _y ) then
61694: LD_VAR 0 5
61698: PPUSH
61699: LD_VAR 0 6
61703: PPUSH
61704: CALL_OW 488
61708: NOT
61709: IFFALSE 61713
// continue ;
61711: GO 61691
// if GetResourceTypeXY ( _x , _y ) then
61713: LD_VAR 0 5
61717: PPUSH
61718: LD_VAR 0 6
61722: PPUSH
61723: CALL_OW 283
61727: IFFALSE 61767
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61729: LD_ADDR_VAR 0 4
61733: PUSH
61734: LD_VAR 0 4
61738: PPUSH
61739: LD_VAR 0 4
61743: PUSH
61744: LD_INT 1
61746: PLUS
61747: PPUSH
61748: LD_VAR 0 5
61752: PUSH
61753: LD_VAR 0 6
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PPUSH
61762: CALL_OW 1
61766: ST_TO_ADDR
// end ;
61767: GO 61691
61769: POP
61770: POP
61771: GO 61671
61773: POP
61774: POP
// end ;
61775: LD_VAR 0 4
61779: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61780: LD_INT 0
61782: PPUSH
61783: PPUSH
61784: PPUSH
61785: PPUSH
61786: PPUSH
61787: PPUSH
61788: PPUSH
61789: PPUSH
// if not units then
61790: LD_VAR 0 1
61794: NOT
61795: IFFALSE 61799
// exit ;
61797: GO 62224
// result := UnitFilter ( units , [ f_ok ] ) ;
61799: LD_ADDR_VAR 0 3
61803: PUSH
61804: LD_VAR 0 1
61808: PPUSH
61809: LD_INT 50
61811: PUSH
61812: EMPTY
61813: LIST
61814: PPUSH
61815: CALL_OW 72
61819: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61820: LD_ADDR_VAR 0 8
61824: PUSH
61825: LD_VAR 0 1
61829: PUSH
61830: LD_INT 1
61832: ARRAY
61833: PPUSH
61834: CALL_OW 255
61838: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
61839: LD_ADDR_VAR 0 10
61843: PUSH
61844: LD_INT 29
61846: PUSH
61847: LD_EXP 97
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: ST_TO_ADDR
// if not result then
61856: LD_VAR 0 3
61860: NOT
61861: IFFALSE 61865
// exit ;
61863: GO 62224
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61865: LD_ADDR_VAR 0 5
61869: PUSH
61870: LD_INT 81
61872: PUSH
61873: LD_VAR 0 8
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PPUSH
61882: CALL_OW 69
61886: ST_TO_ADDR
// for i in result do
61887: LD_ADDR_VAR 0 4
61891: PUSH
61892: LD_VAR 0 3
61896: PUSH
61897: FOR_IN
61898: IFFALSE 62222
// begin tag := GetTag ( i ) + 1 ;
61900: LD_ADDR_VAR 0 9
61904: PUSH
61905: LD_VAR 0 4
61909: PPUSH
61910: CALL_OW 110
61914: PUSH
61915: LD_INT 1
61917: PLUS
61918: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61919: LD_ADDR_VAR 0 7
61923: PUSH
61924: LD_VAR 0 4
61928: PPUSH
61929: CALL_OW 250
61933: PPUSH
61934: LD_VAR 0 4
61938: PPUSH
61939: CALL_OW 251
61943: PPUSH
61944: LD_INT 6
61946: PPUSH
61947: CALL 61522 0 3
61951: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61952: LD_VAR 0 7
61956: PUSH
61957: LD_VAR 0 4
61961: PPUSH
61962: CALL_OW 264
61966: PUSH
61967: LD_VAR 0 10
61971: IN
61972: NOT
61973: AND
61974: IFFALSE 62013
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61976: LD_VAR 0 4
61980: PPUSH
61981: LD_VAR 0 7
61985: PUSH
61986: LD_INT 1
61988: ARRAY
61989: PUSH
61990: LD_INT 1
61992: ARRAY
61993: PPUSH
61994: LD_VAR 0 7
61998: PUSH
61999: LD_INT 1
62001: ARRAY
62002: PUSH
62003: LD_INT 2
62005: ARRAY
62006: PPUSH
62007: CALL_OW 116
62011: GO 62220
// if path > tag then
62013: LD_VAR 0 2
62017: PUSH
62018: LD_VAR 0 9
62022: GREATER
62023: IFFALSE 62190
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
62025: LD_ADDR_VAR 0 6
62029: PUSH
62030: LD_VAR 0 5
62034: PPUSH
62035: LD_INT 91
62037: PUSH
62038: LD_VAR 0 4
62042: PUSH
62043: LD_INT 12
62045: PUSH
62046: EMPTY
62047: LIST
62048: LIST
62049: LIST
62050: PPUSH
62051: CALL_OW 72
62055: ST_TO_ADDR
// if nearEnemy then
62056: LD_VAR 0 6
62060: IFFALSE 62088
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62062: LD_VAR 0 4
62066: PPUSH
62067: LD_VAR 0 6
62071: PPUSH
62072: LD_VAR 0 4
62076: PPUSH
62077: CALL_OW 74
62081: PPUSH
62082: CALL_OW 115
62086: GO 62188
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62088: LD_VAR 0 4
62092: PPUSH
62093: LD_VAR 0 2
62097: PUSH
62098: LD_VAR 0 9
62102: ARRAY
62103: PUSH
62104: LD_INT 1
62106: ARRAY
62107: PPUSH
62108: LD_VAR 0 2
62112: PUSH
62113: LD_VAR 0 9
62117: ARRAY
62118: PUSH
62119: LD_INT 2
62121: ARRAY
62122: PPUSH
62123: CALL_OW 297
62127: PUSH
62128: LD_INT 6
62130: GREATER
62131: IFFALSE 62174
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62133: LD_VAR 0 4
62137: PPUSH
62138: LD_VAR 0 2
62142: PUSH
62143: LD_VAR 0 9
62147: ARRAY
62148: PUSH
62149: LD_INT 1
62151: ARRAY
62152: PPUSH
62153: LD_VAR 0 2
62157: PUSH
62158: LD_VAR 0 9
62162: ARRAY
62163: PUSH
62164: LD_INT 2
62166: ARRAY
62167: PPUSH
62168: CALL_OW 114
62172: GO 62188
// SetTag ( i , tag ) ;
62174: LD_VAR 0 4
62178: PPUSH
62179: LD_VAR 0 9
62183: PPUSH
62184: CALL_OW 109
// end else
62188: GO 62220
// if enemy then
62190: LD_VAR 0 5
62194: IFFALSE 62220
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62196: LD_VAR 0 4
62200: PPUSH
62201: LD_VAR 0 5
62205: PPUSH
62206: LD_VAR 0 4
62210: PPUSH
62211: CALL_OW 74
62215: PPUSH
62216: CALL_OW 115
// end ;
62220: GO 61897
62222: POP
62223: POP
// end ;
62224: LD_VAR 0 3
62228: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62229: LD_INT 0
62231: PPUSH
62232: PPUSH
62233: PPUSH
// if not unit or IsInUnit ( unit ) then
62234: LD_VAR 0 1
62238: NOT
62239: PUSH
62240: LD_VAR 0 1
62244: PPUSH
62245: CALL_OW 310
62249: OR
62250: IFFALSE 62254
// exit ;
62252: GO 62345
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62254: LD_ADDR_VAR 0 4
62258: PUSH
62259: LD_VAR 0 1
62263: PPUSH
62264: CALL_OW 250
62268: PPUSH
62269: LD_VAR 0 2
62273: PPUSH
62274: LD_INT 1
62276: PPUSH
62277: CALL_OW 272
62281: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62282: LD_ADDR_VAR 0 5
62286: PUSH
62287: LD_VAR 0 1
62291: PPUSH
62292: CALL_OW 251
62296: PPUSH
62297: LD_VAR 0 2
62301: PPUSH
62302: LD_INT 1
62304: PPUSH
62305: CALL_OW 273
62309: ST_TO_ADDR
// if ValidHex ( x , y ) then
62310: LD_VAR 0 4
62314: PPUSH
62315: LD_VAR 0 5
62319: PPUSH
62320: CALL_OW 488
62324: IFFALSE 62345
// ComTurnXY ( unit , x , y ) ;
62326: LD_VAR 0 1
62330: PPUSH
62331: LD_VAR 0 4
62335: PPUSH
62336: LD_VAR 0 5
62340: PPUSH
62341: CALL_OW 118
// end ;
62345: LD_VAR 0 3
62349: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62350: LD_INT 0
62352: PPUSH
62353: PPUSH
// result := false ;
62354: LD_ADDR_VAR 0 3
62358: PUSH
62359: LD_INT 0
62361: ST_TO_ADDR
// if not units then
62362: LD_VAR 0 2
62366: NOT
62367: IFFALSE 62371
// exit ;
62369: GO 62416
// for i in units do
62371: LD_ADDR_VAR 0 4
62375: PUSH
62376: LD_VAR 0 2
62380: PUSH
62381: FOR_IN
62382: IFFALSE 62414
// if See ( side , i ) then
62384: LD_VAR 0 1
62388: PPUSH
62389: LD_VAR 0 4
62393: PPUSH
62394: CALL_OW 292
62398: IFFALSE 62412
// begin result := true ;
62400: LD_ADDR_VAR 0 3
62404: PUSH
62405: LD_INT 1
62407: ST_TO_ADDR
// exit ;
62408: POP
62409: POP
62410: GO 62416
// end ;
62412: GO 62381
62414: POP
62415: POP
// end ;
62416: LD_VAR 0 3
62420: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62421: LD_INT 0
62423: PPUSH
62424: PPUSH
62425: PPUSH
62426: PPUSH
// if not unit or not points then
62427: LD_VAR 0 1
62431: NOT
62432: PUSH
62433: LD_VAR 0 2
62437: NOT
62438: OR
62439: IFFALSE 62443
// exit ;
62441: GO 62533
// dist := 99999 ;
62443: LD_ADDR_VAR 0 5
62447: PUSH
62448: LD_INT 99999
62450: ST_TO_ADDR
// for i in points do
62451: LD_ADDR_VAR 0 4
62455: PUSH
62456: LD_VAR 0 2
62460: PUSH
62461: FOR_IN
62462: IFFALSE 62531
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62464: LD_ADDR_VAR 0 6
62468: PUSH
62469: LD_VAR 0 1
62473: PPUSH
62474: LD_VAR 0 4
62478: PUSH
62479: LD_INT 1
62481: ARRAY
62482: PPUSH
62483: LD_VAR 0 4
62487: PUSH
62488: LD_INT 2
62490: ARRAY
62491: PPUSH
62492: CALL_OW 297
62496: ST_TO_ADDR
// if tmpDist < dist then
62497: LD_VAR 0 6
62501: PUSH
62502: LD_VAR 0 5
62506: LESS
62507: IFFALSE 62529
// begin result := i ;
62509: LD_ADDR_VAR 0 3
62513: PUSH
62514: LD_VAR 0 4
62518: ST_TO_ADDR
// dist := tmpDist ;
62519: LD_ADDR_VAR 0 5
62523: PUSH
62524: LD_VAR 0 6
62528: ST_TO_ADDR
// end ; end ;
62529: GO 62461
62531: POP
62532: POP
// end ; end_of_file
62533: LD_VAR 0 3
62537: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62538: LD_VAR 0 1
62542: PPUSH
62543: LD_VAR 0 2
62547: PPUSH
62548: LD_VAR 0 3
62552: PPUSH
62553: LD_VAR 0 4
62557: PPUSH
62558: LD_VAR 0 5
62562: PPUSH
62563: LD_VAR 0 6
62567: PPUSH
62568: CALL 4326 0 6
// end ;
62572: PPOPN 6
62574: END
