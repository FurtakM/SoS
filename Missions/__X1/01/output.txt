// starting begin ResetFog ;
   0: CALL_OW 335
// music_nat := 4 ;
   4: LD_ADDR_OWVAR 71
   8: PUSH
   9: LD_INT 4
  11: ST_TO_ADDR
// music_class := 3 ;
  12: LD_ADDR_OWVAR 72
  16: PUSH
  17: LD_INT 3
  19: ST_TO_ADDR
// AnimateTrees ( true ) ;
  20: LD_INT 1
  22: PPUSH
  23: CALL_OW 573
// InitVariables ;
  27: CALL 40 0 0
// PrepareAmericanBase ;
  31: CALL 3170 0 0
// Action ;
  35: CALL 109 0 0
// end ;
  39: END
// export Heike , Omar , Abdul , Olaf , Kaia , Shahrzad , Mahtab ; export Kurt , Hans , Saliba , Shariff , Gensher ; export scientists , eonGuards , firstGroup ; export foundPoints , goWithHeike , baseSpotted , heikeNearbyEon , meetingActive ; function InitVariables ; begin
  40: LD_INT 0
  42: PPUSH
// foundPoints := 0 ;
  43: LD_ADDR_EXP 16
  47: PUSH
  48: LD_INT 0
  50: ST_TO_ADDR
// goWithHeike := false ;
  51: LD_ADDR_EXP 17
  55: PUSH
  56: LD_INT 0
  58: ST_TO_ADDR
// baseSpotted := false ;
  59: LD_ADDR_EXP 18
  63: PUSH
  64: LD_INT 0
  66: ST_TO_ADDR
// heikeNearbyEon := false ;
  67: LD_ADDR_EXP 19
  71: PUSH
  72: LD_INT 0
  74: ST_TO_ADDR
// meetingActive := true ;
  75: LD_ADDR_EXP 20
  79: PUSH
  80: LD_INT 1
  82: ST_TO_ADDR
// scientists := [ ] ;
  83: LD_ADDR_EXP 13
  87: PUSH
  88: EMPTY
  89: ST_TO_ADDR
// eonGuards := [ ] ;
  90: LD_ADDR_EXP 14
  94: PUSH
  95: EMPTY
  96: ST_TO_ADDR
// firstGroup := [ ] ;
  97: LD_ADDR_EXP 15
 101: PUSH
 102: EMPTY
 103: ST_TO_ADDR
// end ; end_of_file
 104: LD_VAR 0 1
 108: RET
// export function Action ; begin
 109: LD_INT 0
 111: PPUSH
// InGameOn ;
 112: CALL_OW 8
// PrepareKurtGroup ;
 116: CALL 3017 0 0
// PrepareSheikGroup ;
 120: CALL 2655 0 0
// PrepareHeikeGroup ;
 124: CALL 2567 0 0
// CenterNowOnXY ( 51 , 85 ) ;
 128: LD_INT 51
 130: PPUSH
 131: LD_INT 85
 133: PPUSH
 134: CALL_OW 86
// PlaceSeeing ( 1 , 1 , 5 , - 32763 ) ;
 138: LD_INT 1
 140: PPUSH
 141: LD_INT 1
 143: PPUSH
 144: LD_INT 5
 146: PPUSH
 147: LD_INT 32763
 149: NEG
 150: PPUSH
 151: CALL_OW 330
// RemoveSeeing ( 1 , 1 , 5 ) ;
 155: LD_INT 1
 157: PPUSH
 158: LD_INT 1
 160: PPUSH
 161: LD_INT 5
 163: PPUSH
 164: CALL_OW 331
// ComMoveXY ( Heike , 50 , 86 ) ;
 168: LD_EXP 1
 172: PPUSH
 173: LD_INT 50
 175: PPUSH
 176: LD_INT 86
 178: PPUSH
 179: CALL_OW 111
// ComMoveXY ( Kaia , 51 , 90 ) ;
 183: LD_EXP 5
 187: PPUSH
 188: LD_INT 51
 190: PPUSH
 191: LD_INT 90
 193: PPUSH
 194: CALL_OW 111
// AddComTurnUnit ( Heike , Kaia ) ;
 198: LD_EXP 1
 202: PPUSH
 203: LD_EXP 5
 207: PPUSH
 208: CALL_OW 179
// AddComTurnUnit ( Kaia , Heike ) ;
 212: LD_EXP 5
 216: PPUSH
 217: LD_EXP 1
 221: PPUSH
 222: CALL_OW 179
// wait ( 0 0$3 ) ;
 226: LD_INT 105
 228: PPUSH
 229: CALL_OW 67
// Say ( Kaia , DK-1 ) ;
 233: LD_EXP 5
 237: PPUSH
 238: LD_STRING DK-1
 240: PPUSH
 241: CALL_OW 88
// Say ( Heike , DH-1 ) ;
 245: LD_EXP 1
 249: PPUSH
 250: LD_STRING DH-1
 252: PPUSH
 253: CALL_OW 88
// wait ( 0 0$2 ) ;
 257: LD_INT 70
 259: PPUSH
 260: CALL_OW 67
// PrepareArabian ;
 264: CALL 3418 0 0
// InGameOff ;
 268: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
 272: LD_STRING O1
 274: PPUSH
 275: CALL_OW 337
// goWithHeike := true ;
 279: LD_ADDR_EXP 17
 283: PUSH
 284: LD_INT 1
 286: ST_TO_ADDR
// SaveForQuickRestart ;
 287: CALL_OW 22
// end ;
 291: LD_VAR 0 1
 295: RET
// every 0 0$1 trigger GetAttitude ( 2 , 5 ) = att_enemy do var i ;
 296: LD_INT 2
 298: PPUSH
 299: LD_INT 5
 301: PPUSH
 302: CALL_OW 81
 306: PUSH
 307: LD_INT 2
 309: EQUAL
 310: IFFALSE 456
 312: GO 314
 314: DISABLE
 315: LD_INT 0
 317: PPUSH
// begin goWithHeike := false ;
 318: LD_ADDR_EXP 17
 322: PUSH
 323: LD_INT 0
 325: ST_TO_ADDR
// DialogueOn ;
 326: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
 330: LD_EXP 1
 334: PPUSH
 335: CALL_OW 87
// Say ( Kaia , DK-betray-1 ) ;
 339: LD_EXP 5
 343: PPUSH
 344: LD_STRING DK-betray-1
 346: PPUSH
 347: CALL_OW 88
// DialogueOff ;
 351: CALL_OW 7
// ComMoveXY ( Kaia , 90 , 46 ) ;
 355: LD_EXP 5
 359: PPUSH
 360: LD_INT 90
 362: PPUSH
 363: LD_INT 46
 365: PPUSH
 366: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
 370: LD_INT 35
 372: PPUSH
 373: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , 1 ] ] ) diff Kaia do
 377: LD_ADDR_VAR 0 1
 381: PUSH
 382: LD_INT 22
 384: PUSH
 385: LD_INT 5
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: LD_INT 25
 394: PUSH
 395: LD_INT 1
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PPUSH
 406: CALL_OW 69
 410: PUSH
 411: LD_EXP 5
 415: DIFF
 416: PUSH
 417: FOR_IN
 418: IFFALSE 436
// ComAttackUnit ( i , Heike ) ;
 420: LD_VAR 0 1
 424: PPUSH
 425: LD_EXP 1
 429: PPUSH
 430: CALL_OW 115
 434: GO 417
 436: POP
 437: POP
// until IsDead ( Heike ) ;
 438: LD_EXP 1
 442: PPUSH
 443: CALL_OW 301
 447: IFFALSE 370
// YouLost ( Betray ) ;
 449: LD_STRING Betray
 451: PPUSH
 452: CALL_OW 104
// end ;
 456: PPOPN 1
 458: END
// every 0 0$1 trigger goWithHeike do
 459: LD_EXP 17
 463: IFFALSE 518
 465: GO 467
 467: DISABLE
// begin enable ;
 468: ENABLE
// if GetDistUnits ( Heike , Kaia ) > 3 then
 469: LD_EXP 1
 473: PPUSH
 474: LD_EXP 5
 478: PPUSH
 479: CALL_OW 296
 483: PUSH
 484: LD_INT 3
 486: GREATER
 487: IFFALSE 518
// ComMoveXY ( Kaia , GetX ( Heike ) , GetY ( Heike ) ) ;
 489: LD_EXP 5
 493: PPUSH
 494: LD_EXP 1
 498: PPUSH
 499: CALL_OW 250
 503: PPUSH
 504: LD_EXP 1
 508: PPUSH
 509: CALL_OW 251
 513: PPUSH
 514: CALL_OW 111
// end ;
 518: END
// every 0 0$2 trigger SeeXY ( 2 , 47 , 68 ) and not baseSpotted do
 519: LD_INT 2
 521: PPUSH
 522: LD_INT 47
 524: PPUSH
 525: LD_INT 68
 527: PPUSH
 528: CALL_OW 293
 532: PUSH
 533: LD_EXP 18
 537: NOT
 538: AND
 539: IFFALSE 600
 541: GO 543
 543: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 544: LD_EXP 1
 548: PPUSH
 549: LD_STRING DH-spot-1
 551: PPUSH
 552: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 47 , 68 ) ) [ 1 ] , DRa-spot-1 ) ;
 556: LD_INT 47
 558: PPUSH
 559: LD_INT 68
 561: PPUSH
 562: CALL_OW 428
 566: PPUSH
 567: CALL_OW 313
 571: PUSH
 572: LD_INT 1
 574: ARRAY
 575: PPUSH
 576: LD_STRING DRa-spot-1
 578: PPUSH
 579: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 583: LD_INT 90
 585: PPUSH
 586: LD_INT 41
 588: PPUSH
 589: LD_INT 2
 591: PPUSH
 592: LD_INT 6
 594: NEG
 595: PPUSH
 596: CALL_OW 330
// end ;
 600: END
// every 0 0$2 trigger SeeXY ( 2 , 93 , 89 ) and not baseSpotted do
 601: LD_INT 2
 603: PPUSH
 604: LD_INT 93
 606: PPUSH
 607: LD_INT 89
 609: PPUSH
 610: CALL_OW 293
 614: PUSH
 615: LD_EXP 18
 619: NOT
 620: AND
 621: IFFALSE 682
 623: GO 625
 625: DISABLE
// begin Say ( Heike , DH-spot-1 ) ;
 626: LD_EXP 1
 630: PPUSH
 631: LD_STRING DH-spot-1
 633: PPUSH
 634: CALL_OW 88
// Say ( UnitsInside ( HexInfo ( 93 , 89 ) ) [ 1 ] , DRa-spot-2 ) ;
 638: LD_INT 93
 640: PPUSH
 641: LD_INT 89
 643: PPUSH
 644: CALL_OW 428
 648: PPUSH
 649: CALL_OW 313
 653: PUSH
 654: LD_INT 1
 656: ARRAY
 657: PPUSH
 658: LD_STRING DRa-spot-2
 660: PPUSH
 661: CALL_OW 88
// PlaceSeeing ( 90 , 41 , 2 , - 6 ) ;
 665: LD_INT 90
 667: PPUSH
 668: LD_INT 41
 670: PPUSH
 671: LD_INT 2
 673: PPUSH
 674: LD_INT 6
 676: NEG
 677: PPUSH
 678: CALL_OW 330
// end ;
 682: END
// every 0 0$3 trigger meetingActive and UnitFilter ( eonGuards , [ f_see , 2 ] ) do var tmp , i , points , dist , tdist ;
 683: LD_EXP 20
 687: PUSH
 688: LD_EXP 14
 692: PPUSH
 693: LD_INT 101
 695: PUSH
 696: LD_INT 2
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: PPUSH
 703: CALL_OW 72
 707: AND
 708: IFFALSE 1032
 710: GO 712
 712: DISABLE
 713: LD_INT 0
 715: PPUSH
 716: PPUSH
 717: PPUSH
 718: PPUSH
 719: PPUSH
// begin enable ;
 720: ENABLE
// tmp := UnitFilter ( eonGuards , [ f_see , 2 ] ) ;
 721: LD_ADDR_VAR 0 1
 725: PUSH
 726: LD_EXP 14
 730: PPUSH
 731: LD_INT 101
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 72
 745: ST_TO_ADDR
// if not tmp then
 746: LD_VAR 0 1
 750: NOT
 751: IFFALSE 755
// exit ;
 753: GO 1032
// InGameOn ;
 755: CALL_OW 8
// ComTurnUnit ( [ Heike , Kaia ] , tmp [ 1 ] ) ;
 759: LD_EXP 1
 763: PUSH
 764: LD_EXP 5
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PPUSH
 773: LD_VAR 0 1
 777: PUSH
 778: LD_INT 1
 780: ARRAY
 781: PPUSH
 782: CALL_OW 119
// ComTurnUnit ( tmp [ 1 ] , Heike ) ;
 786: LD_VAR 0 1
 790: PUSH
 791: LD_INT 1
 793: ARRAY
 794: PPUSH
 795: LD_EXP 1
 799: PPUSH
 800: CALL_OW 119
// Say ( tmp [ 1 ] , DG-meeting-1 ) ;
 804: LD_VAR 0 1
 808: PUSH
 809: LD_INT 1
 811: ARRAY
 812: PPUSH
 813: LD_STRING DG-meeting-1
 815: PPUSH
 816: CALL_OW 88
// points := [ [ 81 , 10 ] , [ 63 , 25 ] , [ 108 , 73 ] ] ;
 820: LD_ADDR_VAR 0 3
 824: PUSH
 825: LD_INT 81
 827: PUSH
 828: LD_INT 10
 830: PUSH
 831: EMPTY
 832: LIST
 833: LIST
 834: PUSH
 835: LD_INT 63
 837: PUSH
 838: LD_INT 25
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 108
 847: PUSH
 848: LD_INT 73
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: LIST
 859: ST_TO_ADDR
// dist := [ 9999 , [ ] ] ;
 860: LD_ADDR_VAR 0 4
 864: PUSH
 865: LD_INT 9999
 867: PUSH
 868: EMPTY
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: ST_TO_ADDR
// for i := 1 to 3 do
 874: LD_ADDR_VAR 0 2
 878: PUSH
 879: DOUBLE
 880: LD_INT 1
 882: DEC
 883: ST_TO_ADDR
 884: LD_INT 3
 886: PUSH
 887: FOR_TO
 888: IFFALSE 972
// begin tdist := GetDistUnitXY ( Heike , points [ i ] [ 1 ] , points [ i ] [ 2 ] ) ;
 890: LD_ADDR_VAR 0 5
 894: PUSH
 895: LD_EXP 1
 899: PPUSH
 900: LD_VAR 0 3
 904: PUSH
 905: LD_VAR 0 2
 909: ARRAY
 910: PUSH
 911: LD_INT 1
 913: ARRAY
 914: PPUSH
 915: LD_VAR 0 3
 919: PUSH
 920: LD_VAR 0 2
 924: ARRAY
 925: PUSH
 926: LD_INT 2
 928: ARRAY
 929: PPUSH
 930: CALL_OW 297
 934: ST_TO_ADDR
// if dist [ 1 ] > tdist then
 935: LD_VAR 0 4
 939: PUSH
 940: LD_INT 1
 942: ARRAY
 943: PUSH
 944: LD_VAR 0 5
 948: GREATER
 949: IFFALSE 970
// dist := [ tdist , i ] ;
 951: LD_ADDR_VAR 0 4
 955: PUSH
 956: LD_VAR 0 5
 960: PUSH
 961: LD_VAR 0 2
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: ST_TO_ADDR
// end ;
 970: GO 887
 972: POP
 973: POP
// ComMoveXY ( Heike , points [ dist [ 2 ] ] [ 1 ] , points [ dist [ 2 ] ] [ 2 ] ) ;
 974: LD_EXP 1
 978: PPUSH
 979: LD_VAR 0 3
 983: PUSH
 984: LD_VAR 0 4
 988: PUSH
 989: LD_INT 2
 991: ARRAY
 992: ARRAY
 993: PUSH
 994: LD_INT 1
 996: ARRAY
 997: PPUSH
 998: LD_VAR 0 3
1002: PUSH
1003: LD_VAR 0 4
1007: PUSH
1008: LD_INT 2
1010: ARRAY
1011: ARRAY
1012: PUSH
1013: LD_INT 2
1015: ARRAY
1016: PPUSH
1017: CALL_OW 111
// wait ( 0 0$3 ) ;
1021: LD_INT 105
1023: PPUSH
1024: CALL_OW 67
// InGameOff ;
1028: CALL_OW 9
// end ;
1032: PPOPN 5
1034: END
// every 0 0$20 trigger GetDistUnits ( Heike , eon ) > 40 and IsIdle ( Heike ) do
1035: LD_EXP 1
1039: PPUSH
1040: LD_INT 14
1042: PPUSH
1043: CALL_OW 296
1047: PUSH
1048: LD_INT 40
1050: GREATER
1051: PUSH
1052: LD_EXP 1
1056: PPUSH
1057: CALL_OW 316
1061: AND
1062: IFFALSE 1079
1064: GO 1066
1066: DISABLE
// begin Say ( Kaia , DK-idle-1 ) ;
1067: LD_EXP 5
1071: PPUSH
1072: LD_STRING DK-idle-1
1074: PPUSH
1075: CALL_OW 88
// end ;
1079: END
// every 0 0$2 trigger SeeXY ( 2 , 59 , 47 ) do
1080: LD_INT 2
1082: PPUSH
1083: LD_INT 59
1085: PPUSH
1086: LD_INT 47
1088: PPUSH
1089: CALL_OW 293
1093: IFFALSE 1250
1095: GO 1097
1097: DISABLE
// begin PlaceSeeing ( 59 , 47 , 2 , - 10 ) ;
1098: LD_INT 59
1100: PPUSH
1101: LD_INT 47
1103: PPUSH
1104: LD_INT 2
1106: PPUSH
1107: LD_INT 10
1109: NEG
1110: PPUSH
1111: CALL_OW 330
// CenterNowOnXY ( 59 , 47 ) ;
1115: LD_INT 59
1117: PPUSH
1118: LD_INT 47
1120: PPUSH
1121: CALL_OW 86
// goWithHeike := false ;
1125: LD_ADDR_EXP 17
1129: PUSH
1130: LD_INT 0
1132: ST_TO_ADDR
// baseSpotted := true ;
1133: LD_ADDR_EXP 18
1137: PUSH
1138: LD_INT 1
1140: ST_TO_ADDR
// InGameOn ;
1141: CALL_OW 8
// ComMoveXY ( [ Heike , Kaia ] , 54 , 45 ) ;
1145: LD_EXP 1
1149: PUSH
1150: LD_EXP 5
1154: PUSH
1155: EMPTY
1156: LIST
1157: LIST
1158: PPUSH
1159: LD_INT 54
1161: PPUSH
1162: LD_INT 45
1164: PPUSH
1165: CALL_OW 111
// wait ( 0 0$1 ) ;
1169: LD_INT 35
1171: PPUSH
1172: CALL_OW 67
// ComTurnXY ( [ Heike , Kaia ] , 59 , 47 ) ;
1176: LD_EXP 1
1180: PUSH
1181: LD_EXP 5
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: LD_INT 59
1192: PPUSH
1193: LD_INT 47
1195: PPUSH
1196: CALL_OW 118
// Say ( Heike , DH-base-1 ) ;
1200: LD_EXP 1
1204: PPUSH
1205: LD_STRING DH-base-1
1207: PPUSH
1208: CALL_OW 88
// Say ( Kaia , DK-base-1 ) ;
1212: LD_EXP 5
1216: PPUSH
1217: LD_STRING DK-base-1
1219: PPUSH
1220: CALL_OW 88
// InGameOff ;
1224: CALL_OW 9
// foundPoints := foundPoints + 1 ;
1228: LD_ADDR_EXP 16
1232: PUSH
1233: LD_EXP 16
1237: PUSH
1238: LD_INT 1
1240: PLUS
1241: ST_TO_ADDR
// goWithHeike := true ;
1242: LD_ADDR_EXP 17
1246: PUSH
1247: LD_INT 1
1249: ST_TO_ADDR
// end ;
1250: END
// every 0 0$2 trigger See ( 2 , Kurt ) do var i , tmp , tmp2 ;
1251: LD_INT 2
1253: PPUSH
1254: LD_EXP 8
1258: PPUSH
1259: CALL_OW 292
1263: IFFALSE 2564
1265: GO 1267
1267: DISABLE
1268: LD_INT 0
1270: PPUSH
1271: PPUSH
1272: PPUSH
// begin meetingActive := false ;
1273: LD_ADDR_EXP 20
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// goWithHeike := false ;
1281: LD_ADDR_EXP 17
1285: PUSH
1286: LD_INT 0
1288: ST_TO_ADDR
// tmp := AreaToList ( eonSpawn , 0 ) ;
1289: LD_ADDR_VAR 0 2
1293: PUSH
1294: LD_INT 6
1296: PPUSH
1297: LD_INT 0
1299: PPUSH
1300: CALL_OW 517
1304: ST_TO_ADDR
// for i := 1 to 4 do
1305: LD_ADDR_VAR 0 1
1309: PUSH
1310: DOUBLE
1311: LD_INT 1
1313: DEC
1314: ST_TO_ADDR
1315: LD_INT 4
1317: PUSH
1318: FOR_TO
1319: IFFALSE 1386
// begin ComMoveXY ( firstGroup [ i ] , tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) ;
1321: LD_EXP 15
1325: PUSH
1326: LD_VAR 0 1
1330: ARRAY
1331: PPUSH
1332: LD_VAR 0 2
1336: PUSH
1337: LD_INT 1
1339: ARRAY
1340: PUSH
1341: LD_VAR 0 1
1345: ARRAY
1346: PPUSH
1347: LD_VAR 0 2
1351: PUSH
1352: LD_INT 2
1354: ARRAY
1355: PUSH
1356: LD_VAR 0 1
1360: ARRAY
1361: PPUSH
1362: CALL_OW 111
// AddComTurnUnit ( firstGroup [ i ] , eon ) ;
1366: LD_EXP 15
1370: PUSH
1371: LD_VAR 0 1
1375: ARRAY
1376: PPUSH
1377: LD_INT 14
1379: PPUSH
1380: CALL_OW 179
// end ;
1384: GO 1318
1386: POP
1387: POP
// InGameOn ;
1388: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
1392: LD_EXP 8
1396: PPUSH
1397: CALL_OW 87
// ComMoveUnit ( Heike , Kurt ) ;
1401: LD_EXP 1
1405: PPUSH
1406: LD_EXP 8
1410: PPUSH
1411: CALL_OW 112
// ComMoveUnit ( Kaia , Heike ) ;
1415: LD_EXP 5
1419: PPUSH
1420: LD_EXP 1
1424: PPUSH
1425: CALL_OW 112
// repeat wait ( 0 0$0.3 ) ;
1429: LD_INT 10
1431: PPUSH
1432: CALL_OW 67
// ComMoveUnit ( Heike , Kurt ) ;
1436: LD_EXP 1
1440: PPUSH
1441: LD_EXP 8
1445: PPUSH
1446: CALL_OW 112
// ComMoveXY ( Kaia , ShiftX ( GetX ( Heike ) , 5 , 1 ) , ShiftY ( GetY ( Heike ) , 5 , 1 ) ) ;
1450: LD_EXP 5
1454: PPUSH
1455: LD_EXP 1
1459: PPUSH
1460: CALL_OW 250
1464: PPUSH
1465: LD_INT 5
1467: PPUSH
1468: LD_INT 1
1470: PPUSH
1471: CALL_OW 272
1475: PPUSH
1476: LD_EXP 1
1480: PPUSH
1481: CALL_OW 251
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: LD_INT 1
1491: PPUSH
1492: CALL_OW 273
1496: PPUSH
1497: CALL_OW 111
// until GetDistUnits ( Heike , Kurt ) < 5 and GetDistUnits ( Kaia , Kurt ) < 6 ;
1501: LD_EXP 1
1505: PPUSH
1506: LD_EXP 8
1510: PPUSH
1511: CALL_OW 296
1515: PUSH
1516: LD_INT 5
1518: LESS
1519: PUSH
1520: LD_EXP 5
1524: PPUSH
1525: LD_EXP 8
1529: PPUSH
1530: CALL_OW 296
1534: PUSH
1535: LD_INT 6
1537: LESS
1538: AND
1539: IFFALSE 1429
// ComTurnUnit ( [ Heike , Kaia ] , Kurt ) ;
1541: LD_EXP 1
1545: PUSH
1546: LD_EXP 5
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PPUSH
1555: LD_EXP 8
1559: PPUSH
1560: CALL_OW 119
// ComTurnUnit ( [ Kurt , Olaf , Hans ] , Heike ) ;
1564: LD_EXP 8
1568: PUSH
1569: LD_EXP 4
1573: PUSH
1574: LD_EXP 9
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: PPUSH
1584: LD_EXP 1
1588: PPUSH
1589: CALL_OW 119
// wait ( 0 0$0.2 ) ;
1593: LD_INT 7
1595: PPUSH
1596: CALL_OW 67
// Say ( Kurt , DKu-Kurt-1 ) ;
1600: LD_EXP 8
1604: PPUSH
1605: LD_STRING DKu-Kurt-1
1607: PPUSH
1608: CALL_OW 88
// Say ( Kaia , DK-Kurt-1 ) ;
1612: LD_EXP 5
1616: PPUSH
1617: LD_STRING DK-Kurt-1
1619: PPUSH
1620: CALL_OW 88
// Say ( Kurt , DKu-Kurt-2 ) ;
1624: LD_EXP 8
1628: PPUSH
1629: LD_STRING DKu-Kurt-2
1631: PPUSH
1632: CALL_OW 88
// wait ( 0 0$0.2 ) ;
1636: LD_INT 7
1638: PPUSH
1639: CALL_OW 67
// Say ( Heike , DH-Kurt-1 ) ;
1643: LD_EXP 1
1647: PPUSH
1648: LD_STRING DH-Kurt-1
1650: PPUSH
1651: CALL_OW 88
// Say ( Kurt , DKu-Kurt-3 ) ;
1655: LD_EXP 8
1659: PPUSH
1660: LD_STRING DKu-Kurt-3
1662: PPUSH
1663: CALL_OW 88
// Say ( Kaia , DK-Kurt-3 ) ;
1667: LD_EXP 5
1671: PPUSH
1672: LD_STRING DK-Kurt-3
1674: PPUSH
1675: CALL_OW 88
// Say ( Hans , DHa-Kurt-3 ) ;
1679: LD_EXP 9
1683: PPUSH
1684: LD_STRING DHa-Kurt-3
1686: PPUSH
1687: CALL_OW 88
// Say ( Olaf , DO-Kurt-3 ) ;
1691: LD_EXP 4
1695: PPUSH
1696: LD_STRING DO-Kurt-3
1698: PPUSH
1699: CALL_OW 88
// tmp2 := [ Kurt , Olaf , Hans , Kaia , Heike ] ;
1703: LD_ADDR_VAR 0 3
1707: PUSH
1708: LD_EXP 8
1712: PUSH
1713: LD_EXP 4
1717: PUSH
1718: LD_EXP 9
1722: PUSH
1723: LD_EXP 5
1727: PUSH
1728: LD_EXP 1
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: LIST
1737: LIST
1738: LIST
1739: ST_TO_ADDR
// for i = 1 to 5 do
1740: LD_ADDR_VAR 0 1
1744: PUSH
1745: DOUBLE
1746: LD_INT 1
1748: DEC
1749: ST_TO_ADDR
1750: LD_INT 5
1752: PUSH
1753: FOR_TO
1754: IFFALSE 1829
// begin ComMoveXY ( tmp2 [ i ] , tmp [ 1 ] [ i + 4 ] , tmp [ 2 ] [ i + 4 ] ) ;
1756: LD_VAR 0 3
1760: PUSH
1761: LD_VAR 0 1
1765: ARRAY
1766: PPUSH
1767: LD_VAR 0 2
1771: PUSH
1772: LD_INT 1
1774: ARRAY
1775: PUSH
1776: LD_VAR 0 1
1780: PUSH
1781: LD_INT 4
1783: PLUS
1784: ARRAY
1785: PPUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_INT 2
1793: ARRAY
1794: PUSH
1795: LD_VAR 0 1
1799: PUSH
1800: LD_INT 4
1802: PLUS
1803: ARRAY
1804: PPUSH
1805: CALL_OW 111
// AddComTurnUnit ( tmp2 [ i ] , eon ) ;
1809: LD_VAR 0 3
1813: PUSH
1814: LD_VAR 0 1
1818: ARRAY
1819: PPUSH
1820: LD_INT 14
1822: PPUSH
1823: CALL_OW 179
// end ;
1827: GO 1753
1829: POP
1830: POP
// wait ( 0 0$2 ) ;
1831: LD_INT 70
1833: PPUSH
1834: CALL_OW 67
// CenterOnUnits ( eon ) ;
1838: LD_INT 14
1840: PPUSH
1841: CALL_OW 85
// PlaceSeeing ( 90 , 43 , 2 , - 21 ) ;
1845: LD_INT 90
1847: PPUSH
1848: LD_INT 43
1850: PPUSH
1851: LD_INT 2
1853: PPUSH
1854: LD_INT 21
1856: NEG
1857: PPUSH
1858: CALL_OW 330
// ComMoveXY ( Omar , 84 , 36 ) ;
1862: LD_EXP 2
1866: PPUSH
1867: LD_INT 84
1869: PPUSH
1870: LD_INT 36
1872: PPUSH
1873: CALL_OW 111
// AddComTurnUnit ( Omar , eon ) ;
1877: LD_EXP 2
1881: PPUSH
1882: LD_INT 14
1884: PPUSH
1885: CALL_OW 179
// ComMoveXY ( Shariff , 85 , 36 ) ;
1889: LD_EXP 11
1893: PPUSH
1894: LD_INT 85
1896: PPUSH
1897: LD_INT 36
1899: PPUSH
1900: CALL_OW 111
// AddComTurnUnit ( Shariff , eon ) ;
1904: LD_EXP 11
1908: PPUSH
1909: LD_INT 14
1911: PPUSH
1912: CALL_OW 179
// ComMoveXY ( Saliba , 86 , 36 ) ;
1916: LD_EXP 10
1920: PPUSH
1921: LD_INT 86
1923: PPUSH
1924: LD_INT 36
1926: PPUSH
1927: CALL_OW 111
// AddComTurnUnit ( Saliba , eon ) ;
1931: LD_EXP 10
1935: PPUSH
1936: LD_INT 14
1938: PPUSH
1939: CALL_OW 179
// ComMoveXY ( Mahtab , 87 , 36 ) ;
1943: LD_EXP 7
1947: PPUSH
1948: LD_INT 87
1950: PPUSH
1951: LD_INT 36
1953: PPUSH
1954: CALL_OW 111
// AddComTurnUnit ( Mahtab , eon ) ;
1958: LD_EXP 7
1962: PPUSH
1963: LD_INT 14
1965: PPUSH
1966: CALL_OW 179
// wait ( 0 0$3 ) ;
1970: LD_INT 105
1972: PPUSH
1973: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
1977: LD_INT 35
1979: PPUSH
1980: CALL_OW 67
// until IsInArea ( Heike , eonSpawn ) ;
1984: LD_EXP 1
1988: PPUSH
1989: LD_INT 6
1991: PPUSH
1992: CALL_OW 308
1996: IFFALSE 1977
// heikeNearbyEon := true ;
1998: LD_ADDR_EXP 19
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// ComMoveXY ( Shahrzad , 88 , 37 ) ;
2006: LD_EXP 6
2010: PPUSH
2011: LD_INT 88
2013: PPUSH
2014: LD_INT 37
2016: PPUSH
2017: CALL_OW 111
// AddComTurnUnit ( Shahrzad , scientists [ 1 ] ) ;
2021: LD_EXP 6
2025: PPUSH
2026: LD_EXP 13
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: CALL_OW 179
// ComMoveXY ( scientists [ 1 ] , 89 , 37 ) ;
2039: LD_EXP 13
2043: PUSH
2044: LD_INT 1
2046: ARRAY
2047: PPUSH
2048: LD_INT 89
2050: PPUSH
2051: LD_INT 37
2053: PPUSH
2054: CALL_OW 111
// ComMoveXY ( scientists [ 2 ] , 91 , 39 ) ;
2058: LD_EXP 13
2062: PUSH
2063: LD_INT 2
2065: ARRAY
2066: PPUSH
2067: LD_INT 91
2069: PPUSH
2070: LD_INT 39
2072: PPUSH
2073: CALL_OW 111
// AddComTurnUnit ( scientists , Shariff ) ;
2077: LD_EXP 13
2081: PPUSH
2082: LD_EXP 11
2086: PPUSH
2087: CALL_OW 179
// wait ( 0 0$1 ) ;
2091: LD_INT 35
2093: PPUSH
2094: CALL_OW 67
// Say ( scientists [ 1 ] , DS-eon-1 ) ;
2098: LD_EXP 13
2102: PUSH
2103: LD_INT 1
2105: ARRAY
2106: PPUSH
2107: LD_STRING DS-eon-1
2109: PPUSH
2110: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1 ) ;
2114: LD_EXP 6
2118: PPUSH
2119: LD_STRING DSh-eon-1
2121: PPUSH
2122: CALL_OW 88
// Say ( scientists [ 1 ] , DS-eon-2 ) ;
2126: LD_EXP 13
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: PPUSH
2135: LD_STRING DS-eon-2
2137: PPUSH
2138: CALL_OW 88
// Say ( Shahrzad , DSh-eon-1a ) ;
2142: LD_EXP 6
2146: PPUSH
2147: LD_STRING DSh-eon-1a
2149: PPUSH
2150: CALL_OW 88
// ComMoveXY ( scientists [ 1 ] , 92 , 43 ) ;
2154: LD_EXP 13
2158: PUSH
2159: LD_INT 1
2161: ARRAY
2162: PPUSH
2163: LD_INT 92
2165: PPUSH
2166: LD_INT 43
2168: PPUSH
2169: CALL_OW 111
// AddComTurnUnit ( scientists [ 1 ] , eon ) ;
2173: LD_EXP 13
2177: PUSH
2178: LD_INT 1
2180: ARRAY
2181: PPUSH
2182: LD_INT 14
2184: PPUSH
2185: CALL_OW 179
// ComMoveXY ( scientists [ 2 ] , 93 , 41 ) ;
2189: LD_EXP 13
2193: PUSH
2194: LD_INT 2
2196: ARRAY
2197: PPUSH
2198: LD_INT 93
2200: PPUSH
2201: LD_INT 41
2203: PPUSH
2204: CALL_OW 111
// AddComTurnXY ( scientists [ 2 ] , 93 , 40 ) ;
2208: LD_EXP 13
2212: PUSH
2213: LD_INT 2
2215: ARRAY
2216: PPUSH
2217: LD_INT 93
2219: PPUSH
2220: LD_INT 40
2222: PPUSH
2223: CALL_OW 178
// ComMoveXY ( Shahrzad , 88 , 41 ) ;
2227: LD_EXP 6
2231: PPUSH
2232: LD_INT 88
2234: PPUSH
2235: LD_INT 41
2237: PPUSH
2238: CALL_OW 111
// AddComTurnXY ( Shahrzad , 87 , 41 ) ;
2242: LD_EXP 6
2246: PPUSH
2247: LD_INT 87
2249: PPUSH
2250: LD_INT 41
2252: PPUSH
2253: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2257: LD_INT 35
2259: PPUSH
2260: CALL_OW 67
// until IsAt ( Shahrzad , 88 , 41 ) ;
2264: LD_EXP 6
2268: PPUSH
2269: LD_INT 88
2271: PPUSH
2272: LD_INT 41
2274: PPUSH
2275: CALL_OW 307
2279: IFFALSE 2257
// wait ( 0 0$1 ) ;
2281: LD_INT 35
2283: PPUSH
2284: CALL_OW 67
// Say ( Shahrzad , DSh-eon-2 ) ;
2288: LD_EXP 6
2292: PPUSH
2293: LD_STRING DSh-eon-2
2295: PPUSH
2296: CALL_OW 88
// ComMoveXY ( Shariff , 87 , 40 ) ;
2300: LD_EXP 11
2304: PPUSH
2305: LD_INT 87
2307: PPUSH
2308: LD_INT 40
2310: PPUSH
2311: CALL_OW 111
// AddComTurnXY ( Shariff , 86 , 40 ) ;
2315: LD_EXP 11
2319: PPUSH
2320: LD_INT 86
2322: PPUSH
2323: LD_INT 40
2325: PPUSH
2326: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
2330: LD_INT 35
2332: PPUSH
2333: CALL_OW 67
// until IsAt ( Shariff , 87 , 40 ) ;
2337: LD_EXP 11
2341: PPUSH
2342: LD_INT 87
2344: PPUSH
2345: LD_INT 40
2347: PPUSH
2348: CALL_OW 307
2352: IFFALSE 2330
// Say ( Shariff , DShar-eon-3 ) ;
2354: LD_EXP 11
2358: PPUSH
2359: LD_STRING DShar-eon-3
2361: PPUSH
2362: CALL_OW 88
// wait ( 0 0$0.3 ) ;
2366: LD_INT 10
2368: PPUSH
2369: CALL_OW 67
// ComTurnUnit ( Kaia , Heike ) ;
2373: LD_EXP 5
2377: PPUSH
2378: LD_EXP 1
2382: PPUSH
2383: CALL_OW 119
// Say ( Shariff , DShar-eon-4 ) ;
2387: LD_EXP 11
2391: PPUSH
2392: LD_STRING DShar-eon-4
2394: PPUSH
2395: CALL_OW 88
// Say ( Kaia , DK-eon-4 ) ;
2399: LD_EXP 5
2403: PPUSH
2404: LD_STRING DK-eon-4
2406: PPUSH
2407: CALL_OW 88
// ComEnterUnit ( Kaia , eon ) ;
2411: LD_EXP 5
2415: PPUSH
2416: LD_INT 14
2418: PPUSH
2419: CALL_OW 120
// repeat wait ( 0 0$1 ) ;
2423: LD_INT 35
2425: PPUSH
2426: CALL_OW 67
// until not IsPlaced ( Kaia ) ;
2430: LD_EXP 5
2434: PPUSH
2435: CALL_OW 305
2439: NOT
2440: IFFALSE 2423
// ComTurnUnit ( Shariff , Heike ) ;
2442: LD_EXP 11
2446: PPUSH
2447: LD_EXP 1
2451: PPUSH
2452: CALL_OW 119
// Say ( Shariff , DShar-eon-5 ) ;
2456: LD_EXP 11
2460: PPUSH
2461: LD_STRING DShar-eon-5
2463: PPUSH
2464: CALL_OW 88
// ComMoveXY ( Heike , 91 , 44 ) ;
2468: LD_EXP 1
2472: PPUSH
2473: LD_INT 91
2475: PPUSH
2476: LD_INT 44
2478: PPUSH
2479: CALL_OW 111
// AddComTurnUnit ( Heike , eon ) ;
2483: LD_EXP 1
2487: PPUSH
2488: LD_INT 14
2490: PPUSH
2491: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
2495: LD_INT 35
2497: PPUSH
2498: CALL_OW 67
// until IsAt ( Heike , 91 , 44 ) ;
2502: LD_EXP 1
2506: PPUSH
2507: LD_INT 91
2509: PPUSH
2510: LD_INT 44
2512: PPUSH
2513: CALL_OW 307
2517: IFFALSE 2495
// Say ( Heike , DH-eon-5 ) ;
2519: LD_EXP 1
2523: PPUSH
2524: LD_STRING DH-eon-5
2526: PPUSH
2527: CALL_OW 88
// ComEnterUnit ( Heike , eon ) ;
2531: LD_EXP 1
2535: PPUSH
2536: LD_INT 14
2538: PPUSH
2539: CALL_OW 120
// wait ( 0 0$2 ) ;
2543: LD_INT 70
2545: PPUSH
2546: CALL_OW 67
// ChangeMap ( 1 , %_cont ) ;
2550: LD_INT 1
2552: PPUSH
2553: LD_STRING %_cont
2555: PPUSH
2556: CALL_OW 340
// InGameOff ;
2560: CALL_OW 9
// end ; end_of_file
2564: PPOPN 3
2566: END
// export function PrepareHeikeGroup ; begin
2567: LD_INT 0
2569: PPUSH
// uc_side := 2 ;
2570: LD_ADDR_OWVAR 20
2574: PUSH
2575: LD_INT 2
2577: ST_TO_ADDR
// uc_nation := 2 ;
2578: LD_ADDR_OWVAR 21
2582: PUSH
2583: LD_INT 2
2585: ST_TO_ADDR
// Heike := NewCharacter ( Heike ) ;
2586: LD_ADDR_EXP 1
2590: PUSH
2591: LD_STRING Heike
2593: PPUSH
2594: CALL_OW 25
2598: ST_TO_ADDR
// uc_side := 5 ;
2599: LD_ADDR_OWVAR 20
2603: PUSH
2604: LD_INT 5
2606: ST_TO_ADDR
// Kaia := NewCharacter ( Kaia ) ;
2607: LD_ADDR_EXP 5
2611: PUSH
2612: LD_STRING Kaia
2614: PPUSH
2615: CALL_OW 25
2619: ST_TO_ADDR
// PlaceUnitArea ( Heike , startArea , false ) ;
2620: LD_EXP 1
2624: PPUSH
2625: LD_INT 3
2627: PPUSH
2628: LD_INT 0
2630: PPUSH
2631: CALL_OW 49
// PlaceUnitArea ( Kaia , startArea , false ) ;
2635: LD_EXP 5
2639: PPUSH
2640: LD_INT 3
2642: PPUSH
2643: LD_INT 0
2645: PPUSH
2646: CALL_OW 49
// end ;
2650: LD_VAR 0 1
2654: RET
// export function PrepareSheikGroup ; var un , i ; begin
2655: LD_INT 0
2657: PPUSH
2658: PPUSH
2659: PPUSH
// uc_side := 5 ;
2660: LD_ADDR_OWVAR 20
2664: PUSH
2665: LD_INT 5
2667: ST_TO_ADDR
// uc_nation := 2 ;
2668: LD_ADDR_OWVAR 21
2672: PUSH
2673: LD_INT 2
2675: ST_TO_ADDR
// Saliba := NewCharacter ( Ali ) ;
2676: LD_ADDR_EXP 10
2680: PUSH
2681: LD_STRING Ali
2683: PPUSH
2684: CALL_OW 25
2688: ST_TO_ADDR
// Shariff := NewCharacter ( Abdul ) ;
2689: LD_ADDR_EXP 11
2693: PUSH
2694: LD_STRING Abdul
2696: PPUSH
2697: CALL_OW 25
2701: ST_TO_ADDR
// Omar := NewCharacter ( Omar ) ;
2702: LD_ADDR_EXP 2
2706: PUSH
2707: LD_STRING Omar
2709: PPUSH
2710: CALL_OW 25
2714: ST_TO_ADDR
// Mahtab := NewCharacter ( Mahtab ) ;
2715: LD_ADDR_EXP 7
2719: PUSH
2720: LD_STRING Mahtab
2722: PPUSH
2723: CALL_OW 25
2727: ST_TO_ADDR
// Shahrzad := NewCharacter ( Shahrzad ) ;
2728: LD_ADDR_EXP 6
2732: PUSH
2733: LD_STRING Shahrzad
2735: PPUSH
2736: CALL_OW 25
2740: ST_TO_ADDR
// PlaceUnitXY ( Saliba , 85 , 37 , false ) ;
2741: LD_EXP 10
2745: PPUSH
2746: LD_INT 85
2748: PPUSH
2749: LD_INT 37
2751: PPUSH
2752: LD_INT 0
2754: PPUSH
2755: CALL_OW 48
// PlaceUnitXY ( Shariff , 87 , 37 , false ) ;
2759: LD_EXP 11
2763: PPUSH
2764: LD_INT 87
2766: PPUSH
2767: LD_INT 37
2769: PPUSH
2770: LD_INT 0
2772: PPUSH
2773: CALL_OW 48
// PlaceUnitXY ( Omar , 85 , 35 , false ) ;
2777: LD_EXP 2
2781: PPUSH
2782: LD_INT 85
2784: PPUSH
2785: LD_INT 35
2787: PPUSH
2788: LD_INT 0
2790: PPUSH
2791: CALL_OW 48
// PlaceUnitXY ( Mahtab , 86 , 39 , false ) ;
2795: LD_EXP 7
2799: PPUSH
2800: LD_INT 86
2802: PPUSH
2803: LD_INT 39
2805: PPUSH
2806: LD_INT 0
2808: PPUSH
2809: CALL_OW 48
// PlaceUnitXY ( Shahrzad , 88 , 39 , false ) ;
2813: LD_EXP 6
2817: PPUSH
2818: LD_INT 88
2820: PPUSH
2821: LD_INT 39
2823: PPUSH
2824: LD_INT 0
2826: PPUSH
2827: CALL_OW 48
// ComTurnUnit ( Saliba , Shariff ) ;
2831: LD_EXP 10
2835: PPUSH
2836: LD_EXP 11
2840: PPUSH
2841: CALL_OW 119
// ComTurnUnit ( Shariff , Saliba ) ;
2845: LD_EXP 11
2849: PPUSH
2850: LD_EXP 10
2854: PPUSH
2855: CALL_OW 119
// ComTurnUnit ( Omar , Shariff ) ;
2859: LD_EXP 2
2863: PPUSH
2864: LD_EXP 11
2868: PPUSH
2869: CALL_OW 119
// ComTurnUnit ( [ Mahtab , Shahrzad ] , Shariff ) ;
2873: LD_EXP 7
2877: PUSH
2878: LD_EXP 6
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PPUSH
2887: LD_EXP 11
2891: PPUSH
2892: CALL_OW 119
// for i := 1 to 2 do
2896: LD_ADDR_VAR 0 3
2900: PUSH
2901: DOUBLE
2902: LD_INT 1
2904: DEC
2905: ST_TO_ADDR
2906: LD_INT 2
2908: PUSH
2909: FOR_TO
2910: IFFALSE 2996
// begin PrepareHuman ( sex_female , 4 , 6 ) ;
2912: LD_INT 2
2914: PPUSH
2915: LD_INT 4
2917: PPUSH
2918: LD_INT 6
2920: PPUSH
2921: CALL_OW 380
// un := CreateHuman ;
2925: LD_ADDR_VAR 0 2
2929: PUSH
2930: CALL_OW 44
2934: ST_TO_ADDR
// PlaceUnitXYR ( un , 90 , 44 , 3 , false ) ;
2935: LD_VAR 0 2
2939: PPUSH
2940: LD_INT 90
2942: PPUSH
2943: LD_INT 44
2945: PPUSH
2946: LD_INT 3
2948: PPUSH
2949: LD_INT 0
2951: PPUSH
2952: CALL_OW 50
// ComTurnXY ( un , 91 , 43 ) ;
2956: LD_VAR 0 2
2960: PPUSH
2961: LD_INT 91
2963: PPUSH
2964: LD_INT 43
2966: PPUSH
2967: CALL_OW 118
// scientists := Insert ( scientists , 1 , un ) ;
2971: LD_ADDR_EXP 13
2975: PUSH
2976: LD_EXP 13
2980: PPUSH
2981: LD_INT 1
2983: PPUSH
2984: LD_VAR 0 2
2988: PPUSH
2989: CALL_OW 2
2993: ST_TO_ADDR
// end ;
2994: GO 2909
2996: POP
2997: POP
// scientists := scientists diff 0 ;
2998: LD_ADDR_EXP 13
3002: PUSH
3003: LD_EXP 13
3007: PUSH
3008: LD_INT 0
3010: DIFF
3011: ST_TO_ADDR
// end ;
3012: LD_VAR 0 1
3016: RET
// export function PrepareKurtGroup ; var i ; begin
3017: LD_INT 0
3019: PPUSH
3020: PPUSH
// uc_side := 5 ;
3021: LD_ADDR_OWVAR 20
3025: PUSH
3026: LD_INT 5
3028: ST_TO_ADDR
// uc_nation := 2 ;
3029: LD_ADDR_OWVAR 21
3033: PUSH
3034: LD_INT 2
3036: ST_TO_ADDR
// Kurt := NewCharacter ( Kurt ) ;
3037: LD_ADDR_EXP 8
3041: PUSH
3042: LD_STRING Kurt
3044: PPUSH
3045: CALL_OW 25
3049: ST_TO_ADDR
// Olaf := NewCharacter ( Olaf ) ;
3050: LD_ADDR_EXP 4
3054: PUSH
3055: LD_STRING Olaf
3057: PPUSH
3058: CALL_OW 25
3062: ST_TO_ADDR
// Hans := NewCharacter ( Hans ) ;
3063: LD_ADDR_EXP 9
3067: PUSH
3068: LD_STRING Hans
3070: PPUSH
3071: CALL_OW 25
3075: ST_TO_ADDR
// for i in [ Kurt , Hans , Olaf ] do
3076: LD_ADDR_VAR 0 2
3080: PUSH
3081: LD_EXP 8
3085: PUSH
3086: LD_EXP 9
3090: PUSH
3091: LD_EXP 4
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: LIST
3100: PUSH
3101: FOR_IN
3102: IFFALSE 3121
// PlaceUnitArea ( i , kurtSpawnArea , false ) ;
3104: LD_VAR 0 2
3108: PPUSH
3109: LD_INT 10
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
3119: GO 3101
3121: POP
3122: POP
// ComTurnUnit ( Kurt , Hans ) ;
3123: LD_EXP 8
3127: PPUSH
3128: LD_EXP 9
3132: PPUSH
3133: CALL_OW 119
// ComTurnUnit ( Olaf , Hans ) ;
3137: LD_EXP 4
3141: PPUSH
3142: LD_EXP 9
3146: PPUSH
3147: CALL_OW 119
// ComTurnUnit ( Hans , Olaf ) ;
3151: LD_EXP 9
3155: PPUSH
3156: LD_EXP 4
3160: PPUSH
3161: CALL_OW 119
// end ;
3165: LD_VAR 0 1
3169: RET
// export function PrepareAmericanBase ; var i , un , tmp ; begin
3170: LD_INT 0
3172: PPUSH
3173: PPUSH
3174: PPUSH
3175: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_building ] ) diff eon do
3176: LD_ADDR_VAR 0 2
3180: PUSH
3181: LD_INT 21
3183: PUSH
3184: LD_INT 3
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PPUSH
3191: CALL_OW 69
3195: PUSH
3196: LD_INT 14
3198: DIFF
3199: PUSH
3200: FOR_IN
3201: IFFALSE 3281
// begin if GetBType ( i ) in [ b_lab , b_breastwork ] then
3203: LD_VAR 0 2
3207: PPUSH
3208: CALL_OW 266
3212: PUSH
3213: LD_INT 6
3215: PUSH
3216: LD_INT 31
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: IN
3223: IFFALSE 3247
// SetLives ( i , rand ( 500 , 600 ) ) else
3225: LD_VAR 0 2
3229: PPUSH
3230: LD_INT 500
3232: PPUSH
3233: LD_INT 600
3235: PPUSH
3236: CALL_OW 12
3240: PPUSH
3241: CALL_OW 234
3245: GO 3267
// SetLives ( i , rand ( 300 , 499 ) ) ;
3247: LD_VAR 0 2
3251: PPUSH
3252: LD_INT 300
3254: PPUSH
3255: LD_INT 499
3257: PPUSH
3258: CALL_OW 12
3262: PPUSH
3263: CALL_OW 234
// SetSide ( i , 5 ) ;
3267: LD_VAR 0 2
3271: PPUSH
3272: LD_INT 5
3274: PPUSH
3275: CALL_OW 235
// end ;
3279: GO 3200
3281: POP
3282: POP
// tmp := AreaToList ( spawnBaseCorpses , 0 ) ;
3283: LD_ADDR_VAR 0 4
3287: PUSH
3288: LD_INT 9
3290: PPUSH
3291: LD_INT 0
3293: PPUSH
3294: CALL_OW 517
3298: ST_TO_ADDR
// uc_side := 4 ;
3299: LD_ADDR_OWVAR 20
3303: PUSH
3304: LD_INT 4
3306: ST_TO_ADDR
// uc_nation := 1 ;
3307: LD_ADDR_OWVAR 21
3311: PUSH
3312: LD_INT 1
3314: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
3315: LD_ADDR_VAR 0 2
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 4
3329: PUSH
3330: LD_INT 1
3332: ARRAY
3333: PUSH
3334: FOR_TO
3335: IFFALSE 3411
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 0 ) ;
3337: LD_INT 0
3339: PPUSH
3340: LD_INT 1
3342: PUSH
3343: LD_INT 1
3345: PUSH
3346: LD_INT 4
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: LIST
3353: PUSH
3354: LD_VAR 0 2
3358: PUSH
3359: LD_INT 3
3361: MOD
3362: PUSH
3363: LD_INT 1
3365: PLUS
3366: ARRAY
3367: PPUSH
3368: LD_INT 0
3370: PPUSH
3371: CALL_OW 380
// un := CreateHuman ;
3375: LD_ADDR_VAR 0 3
3379: PUSH
3380: CALL_OW 44
3384: ST_TO_ADDR
// PlaceUnitArea ( un , spawnBaseCorpses , false ) ;
3385: LD_VAR 0 3
3389: PPUSH
3390: LD_INT 9
3392: PPUSH
3393: LD_INT 0
3395: PPUSH
3396: CALL_OW 49
// KillUnit ( un ) ;
3400: LD_VAR 0 3
3404: PPUSH
3405: CALL_OW 66
// end ;
3409: GO 3334
3411: POP
3412: POP
// end ;
3413: LD_VAR 0 1
3417: RET
// export function PrepareArabian ; var i , j , b , tmp , area , un ; begin
3418: LD_INT 0
3420: PPUSH
3421: PPUSH
3422: PPUSH
3423: PPUSH
3424: PPUSH
3425: PPUSH
3426: PPUSH
// uc_side := 5 ;
3427: LD_ADDR_OWVAR 20
3431: PUSH
3432: LD_INT 5
3434: ST_TO_ADDR
// uc_nation := 2 ;
3435: LD_ADDR_OWVAR 21
3439: PUSH
3440: LD_INT 2
3442: ST_TO_ADDR
// area := [ spawnBaseArea1 , spawnBaseArea2 , spawnBaseArea3 , spawnBaseArea4 ] ;
3443: LD_ADDR_VAR 0 6
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: LD_INT 4
3453: PUSH
3454: LD_INT 5
3456: PUSH
3457: LD_INT 14
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: ST_TO_ADDR
// InitHc ;
3466: CALL_OW 19
// for i in area do
3470: LD_ADDR_VAR 0 2
3474: PUSH
3475: LD_VAR 0 6
3479: PUSH
3480: FOR_IN
3481: IFFALSE 3645
// begin tmp := AreaToList ( i , 0 ) ;
3483: LD_ADDR_VAR 0 5
3487: PUSH
3488: LD_VAR 0 2
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: CALL_OW 517
3500: ST_TO_ADDR
// for j := 1 to tmp [ 1 ] do
3501: LD_ADDR_VAR 0 3
3505: PUSH
3506: DOUBLE
3507: LD_INT 1
3509: DEC
3510: ST_TO_ADDR
3511: LD_VAR 0 5
3515: PUSH
3516: LD_INT 1
3518: ARRAY
3519: PUSH
3520: FOR_TO
3521: IFFALSE 3641
// begin PrepareHuman ( sex_male , 1 , 3 ) ;
3523: LD_INT 1
3525: PPUSH
3526: LD_INT 1
3528: PPUSH
3529: LD_INT 3
3531: PPUSH
3532: CALL_OW 380
// un := CreateHuman ;
3536: LD_ADDR_VAR 0 7
3540: PUSH
3541: CALL_OW 44
3545: ST_TO_ADDR
// if i = spawnBaseArea3 then
3546: LD_VAR 0 2
3550: PUSH
3551: LD_INT 5
3553: EQUAL
3554: IFFALSE 3572
// eonGuards := eonGuards ^ un ;
3556: LD_ADDR_EXP 14
3560: PUSH
3561: LD_EXP 14
3565: PUSH
3566: LD_VAR 0 7
3570: ADD
3571: ST_TO_ADDR
// PlaceUnitArea ( un , i , false ) ;
3572: LD_VAR 0 7
3576: PPUSH
3577: LD_VAR 0 2
3581: PPUSH
3582: LD_INT 0
3584: PPUSH
3585: CALL_OW 49
// ComHold ( un ) ;
3589: LD_VAR 0 7
3593: PPUSH
3594: CALL_OW 140
// if i = spawnBaseArea4 then
3598: LD_VAR 0 2
3602: PUSH
3603: LD_INT 14
3605: EQUAL
3606: IFFALSE 3639
// begin firstGroup := firstGroup ^ un ;
3608: LD_ADDR_EXP 15
3612: PUSH
3613: LD_EXP 15
3617: PUSH
3618: LD_VAR 0 7
3622: ADD
3623: ST_TO_ADDR
// ComTurnXY ( un , 108 , 47 ) ;
3624: LD_VAR 0 7
3628: PPUSH
3629: LD_INT 108
3631: PPUSH
3632: LD_INT 47
3634: PPUSH
3635: CALL_OW 118
// end ; end ;
3639: GO 3520
3641: POP
3642: POP
// end ;
3643: GO 3480
3645: POP
3646: POP
// for i := 1 to FilterAllUnits ( [ f_btype , b_breastwork ] ) do
3647: LD_ADDR_VAR 0 2
3651: PUSH
3652: DOUBLE
3653: LD_INT 1
3655: DEC
3656: ST_TO_ADDR
3657: LD_INT 30
3659: PUSH
3660: LD_INT 31
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: PPUSH
3667: CALL_OW 69
3671: PUSH
3672: FOR_TO
3673: IFFALSE 3767
// begin b := FilterAllUnits ( [ f_btype , b_breastwork ] ) [ i ] ;
3675: LD_ADDR_VAR 0 4
3679: PUSH
3680: LD_INT 30
3682: PUSH
3683: LD_INT 31
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: PPUSH
3690: CALL_OW 69
3694: PUSH
3695: LD_VAR 0 2
3699: ARRAY
3700: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 3 ) ;
3701: LD_INT 1
3703: PPUSH
3704: LD_INT 1
3706: PPUSH
3707: LD_INT 3
3709: PPUSH
3710: CALL_OW 380
// un := CreateHuman ;
3714: LD_ADDR_VAR 0 7
3718: PUSH
3719: CALL_OW 44
3723: ST_TO_ADDR
// SetDir ( un , ( GetDir ( b ) + 3 ) mod 6 ) ;
3724: LD_VAR 0 7
3728: PPUSH
3729: LD_VAR 0 4
3733: PPUSH
3734: CALL_OW 254
3738: PUSH
3739: LD_INT 3
3741: PLUS
3742: PUSH
3743: LD_INT 6
3745: MOD
3746: PPUSH
3747: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3751: LD_VAR 0 7
3755: PPUSH
3756: LD_VAR 0 4
3760: PPUSH
3761: CALL_OW 52
// end ;
3765: GO 3672
3767: POP
3768: POP
// end ; end_of_file
3769: LD_VAR 0 1
3773: RET
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 = 5 then
3774: LD_VAR 0 1
3778: PUSH
3779: LD_INT 2
3781: EQUAL
3782: PUSH
3783: LD_VAR 0 2
3787: PUSH
3788: LD_INT 5
3790: EQUAL
3791: AND
3792: IFFALSE 3810
// SetAttitude ( 2 , 5 , att_enemy , true ) ;
3794: LD_INT 2
3796: PPUSH
3797: LD_INT 5
3799: PPUSH
3800: LD_INT 2
3802: PPUSH
3803: LD_INT 1
3805: PPUSH
3806: CALL_OW 80
// end ;
3810: PPOPN 2
3812: END
// every 0 0$1 trigger scientists do var i ;
3813: LD_EXP 13
3817: IFFALSE 4025
3819: GO 3821
3821: DISABLE
3822: LD_INT 0
3824: PPUSH
// begin repeat for i in scientists do
3825: LD_ADDR_VAR 0 1
3829: PUSH
3830: LD_EXP 13
3834: PUSH
3835: FOR_IN
3836: IFFALSE 4010
// begin wait ( 0 0$1 ) ;
3838: LD_INT 35
3840: PPUSH
3841: CALL_OW 67
// if not IsInArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) then
3845: LD_VAR 0 1
3849: PPUSH
3850: LD_INT 11
3852: PUSH
3853: LD_INT 13
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_VAR 0 1
3864: PUSH
3865: LD_INT 2
3867: MOD
3868: PUSH
3869: LD_INT 1
3871: PLUS
3872: ARRAY
3873: PPUSH
3874: CALL_OW 308
3878: NOT
3879: IFFALSE 3914
// ComMoveToArea ( i , [ eonArea , eonArea2 ] [ i mod 2 + 1 ] ) ;
3881: LD_VAR 0 1
3885: PPUSH
3886: LD_INT 11
3888: PUSH
3889: LD_INT 13
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: PUSH
3896: LD_VAR 0 1
3900: PUSH
3901: LD_INT 2
3903: MOD
3904: PUSH
3905: LD_INT 1
3907: PLUS
3908: ARRAY
3909: PPUSH
3910: CALL_OW 113
// AddComTurnUnit ( i , eon ) ;
3914: LD_VAR 0 1
3918: PPUSH
3919: LD_INT 14
3921: PPUSH
3922: CALL_OW 179
// AddComWait ( i , 0 0$2 ) ;
3926: LD_VAR 0 1
3930: PPUSH
3931: LD_INT 70
3933: PPUSH
3934: CALL_OW 202
// if rand ( 0 , 1 ) then
3938: LD_INT 0
3940: PPUSH
3941: LD_INT 1
3943: PPUSH
3944: CALL_OW 12
3948: IFFALSE 3962
// AddComAnim ( i , 15 ) ;
3950: LD_VAR 0 1
3954: PPUSH
3955: LD_INT 15
3957: PPUSH
3958: CALL_OW 209
// AddComWait ( i , 0 0$1 ) ;
3962: LD_VAR 0 1
3966: PPUSH
3967: LD_INT 35
3969: PPUSH
3970: CALL_OW 202
// AddComMoveToArea ( i , tableArea ) ;
3974: LD_VAR 0 1
3978: PPUSH
3979: LD_INT 12
3981: PPUSH
3982: CALL_OW 173
// AddComTurnXY ( i , 93 , 40 ) ;
3986: LD_VAR 0 1
3990: PPUSH
3991: LD_INT 93
3993: PPUSH
3994: LD_INT 40
3996: PPUSH
3997: CALL_OW 178
// wait ( 0 0$1 ) ;
4001: LD_INT 35
4003: PPUSH
4004: CALL_OW 67
// end ;
4008: GO 3835
4010: POP
4011: POP
// wait ( 0 0$10 ) ;
4012: LD_INT 350
4014: PPUSH
4015: CALL_OW 67
// until heikeNearbyEon ;
4019: LD_EXP 19
4023: IFFALSE 3825
// end ; end_of_file
4025: PPOPN 1
4027: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4028: GO 4030
4030: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4031: LD_STRING initStreamRollete();
4033: PPUSH
4034: CALL_OW 559
// InitStreamMode ;
4038: CALL 4047 0 0
// DefineStreamItems ( ) ;
4042: CALL 4487 0 0
// end ;
4046: END
// function InitStreamMode ; begin
4047: LD_INT 0
4049: PPUSH
// streamModeActive := false ;
4050: LD_ADDR_EXP 21
4054: PUSH
4055: LD_INT 0
4057: ST_TO_ADDR
// normalCounter := 36 ;
4058: LD_ADDR_EXP 22
4062: PUSH
4063: LD_INT 36
4065: ST_TO_ADDR
// hardcoreCounter := 16 ;
4066: LD_ADDR_EXP 23
4070: PUSH
4071: LD_INT 16
4073: ST_TO_ADDR
// sRocket := false ;
4074: LD_ADDR_EXP 26
4078: PUSH
4079: LD_INT 0
4081: ST_TO_ADDR
// sSpeed := false ;
4082: LD_ADDR_EXP 25
4086: PUSH
4087: LD_INT 0
4089: ST_TO_ADDR
// sEngine := false ;
4090: LD_ADDR_EXP 27
4094: PUSH
4095: LD_INT 0
4097: ST_TO_ADDR
// sSpec := false ;
4098: LD_ADDR_EXP 24
4102: PUSH
4103: LD_INT 0
4105: ST_TO_ADDR
// sLevel := false ;
4106: LD_ADDR_EXP 28
4110: PUSH
4111: LD_INT 0
4113: ST_TO_ADDR
// sArmoury := false ;
4114: LD_ADDR_EXP 29
4118: PUSH
4119: LD_INT 0
4121: ST_TO_ADDR
// sRadar := false ;
4122: LD_ADDR_EXP 30
4126: PUSH
4127: LD_INT 0
4129: ST_TO_ADDR
// sBunker := false ;
4130: LD_ADDR_EXP 31
4134: PUSH
4135: LD_INT 0
4137: ST_TO_ADDR
// sHack := false ;
4138: LD_ADDR_EXP 32
4142: PUSH
4143: LD_INT 0
4145: ST_TO_ADDR
// sFire := false ;
4146: LD_ADDR_EXP 33
4150: PUSH
4151: LD_INT 0
4153: ST_TO_ADDR
// sRefresh := false ;
4154: LD_ADDR_EXP 34
4158: PUSH
4159: LD_INT 0
4161: ST_TO_ADDR
// sExp := false ;
4162: LD_ADDR_EXP 35
4166: PUSH
4167: LD_INT 0
4169: ST_TO_ADDR
// sDepot := false ;
4170: LD_ADDR_EXP 36
4174: PUSH
4175: LD_INT 0
4177: ST_TO_ADDR
// sFlag := false ;
4178: LD_ADDR_EXP 37
4182: PUSH
4183: LD_INT 0
4185: ST_TO_ADDR
// sKamikadze := false ;
4186: LD_ADDR_EXP 45
4190: PUSH
4191: LD_INT 0
4193: ST_TO_ADDR
// sTroll := false ;
4194: LD_ADDR_EXP 46
4198: PUSH
4199: LD_INT 0
4201: ST_TO_ADDR
// sSlow := false ;
4202: LD_ADDR_EXP 47
4206: PUSH
4207: LD_INT 0
4209: ST_TO_ADDR
// sLack := false ;
4210: LD_ADDR_EXP 48
4214: PUSH
4215: LD_INT 0
4217: ST_TO_ADDR
// sTank := false ;
4218: LD_ADDR_EXP 50
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// sRemote := false ;
4226: LD_ADDR_EXP 51
4230: PUSH
4231: LD_INT 0
4233: ST_TO_ADDR
// sPowell := false ;
4234: LD_ADDR_EXP 52
4238: PUSH
4239: LD_INT 0
4241: ST_TO_ADDR
// sTeleport := false ;
4242: LD_ADDR_EXP 55
4246: PUSH
4247: LD_INT 0
4249: ST_TO_ADDR
// sOilTower := false ;
4250: LD_ADDR_EXP 57
4254: PUSH
4255: LD_INT 0
4257: ST_TO_ADDR
// sShovel := false ;
4258: LD_ADDR_EXP 58
4262: PUSH
4263: LD_INT 0
4265: ST_TO_ADDR
// sSheik := false ;
4266: LD_ADDR_EXP 59
4270: PUSH
4271: LD_INT 0
4273: ST_TO_ADDR
// sEarthquake := false ;
4274: LD_ADDR_EXP 61
4278: PUSH
4279: LD_INT 0
4281: ST_TO_ADDR
// sAI := false ;
4282: LD_ADDR_EXP 62
4286: PUSH
4287: LD_INT 0
4289: ST_TO_ADDR
// sCargo := false ;
4290: LD_ADDR_EXP 65
4294: PUSH
4295: LD_INT 0
4297: ST_TO_ADDR
// sDLaser := false ;
4298: LD_ADDR_EXP 66
4302: PUSH
4303: LD_INT 0
4305: ST_TO_ADDR
// sExchange := false ;
4306: LD_ADDR_EXP 67
4310: PUSH
4311: LD_INT 0
4313: ST_TO_ADDR
// sFac := false ;
4314: LD_ADDR_EXP 68
4318: PUSH
4319: LD_INT 0
4321: ST_TO_ADDR
// sPower := false ;
4322: LD_ADDR_EXP 69
4326: PUSH
4327: LD_INT 0
4329: ST_TO_ADDR
// sRandom := false ;
4330: LD_ADDR_EXP 70
4334: PUSH
4335: LD_INT 0
4337: ST_TO_ADDR
// sShield := false ;
4338: LD_ADDR_EXP 71
4342: PUSH
4343: LD_INT 0
4345: ST_TO_ADDR
// sTime := false ;
4346: LD_ADDR_EXP 72
4350: PUSH
4351: LD_INT 0
4353: ST_TO_ADDR
// sTools := false ;
4354: LD_ADDR_EXP 73
4358: PUSH
4359: LD_INT 0
4361: ST_TO_ADDR
// sSold := false ;
4362: LD_ADDR_EXP 38
4366: PUSH
4367: LD_INT 0
4369: ST_TO_ADDR
// sDiff := false ;
4370: LD_ADDR_EXP 39
4374: PUSH
4375: LD_INT 0
4377: ST_TO_ADDR
// sFog := false ;
4378: LD_ADDR_EXP 42
4382: PUSH
4383: LD_INT 0
4385: ST_TO_ADDR
// sReset := false ;
4386: LD_ADDR_EXP 43
4390: PUSH
4391: LD_INT 0
4393: ST_TO_ADDR
// sSun := false ;
4394: LD_ADDR_EXP 44
4398: PUSH
4399: LD_INT 0
4401: ST_TO_ADDR
// sTiger := false ;
4402: LD_ADDR_EXP 40
4406: PUSH
4407: LD_INT 0
4409: ST_TO_ADDR
// sBomb := false ;
4410: LD_ADDR_EXP 41
4414: PUSH
4415: LD_INT 0
4417: ST_TO_ADDR
// sWound := false ;
4418: LD_ADDR_EXP 49
4422: PUSH
4423: LD_INT 0
4425: ST_TO_ADDR
// sBetray := false ;
4426: LD_ADDR_EXP 53
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// sContamin := false ;
4434: LD_ADDR_EXP 54
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// sOil := false ;
4442: LD_ADDR_EXP 56
4446: PUSH
4447: LD_INT 0
4449: ST_TO_ADDR
// sStu := false ;
4450: LD_ADDR_EXP 60
4454: PUSH
4455: LD_INT 0
4457: ST_TO_ADDR
// sBazooka := false ;
4458: LD_ADDR_EXP 63
4462: PUSH
4463: LD_INT 0
4465: ST_TO_ADDR
// sMortar := false ;
4466: LD_ADDR_EXP 64
4470: PUSH
4471: LD_INT 0
4473: ST_TO_ADDR
// sRanger := false ;
4474: LD_ADDR_EXP 74
4478: PUSH
4479: LD_INT 0
4481: ST_TO_ADDR
// end ;
4482: LD_VAR 0 1
4486: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
4487: LD_INT 0
4489: PPUSH
4490: PPUSH
4491: PPUSH
4492: PPUSH
4493: PPUSH
// result := [ ] ;
4494: LD_ADDR_VAR 0 1
4498: PUSH
4499: EMPTY
4500: ST_TO_ADDR
// if campaign_id = 1 then
4501: LD_OWVAR 69
4505: PUSH
4506: LD_INT 1
4508: EQUAL
4509: IFFALSE 7447
// begin case mission_number of 1 :
4511: LD_OWVAR 70
4515: PUSH
4516: LD_INT 1
4518: DOUBLE
4519: EQUAL
4520: IFTRUE 4524
4522: GO 4588
4524: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
4525: LD_ADDR_VAR 0 1
4529: PUSH
4530: LD_INT 2
4532: PUSH
4533: LD_INT 4
4535: PUSH
4536: LD_INT 11
4538: PUSH
4539: LD_INT 12
4541: PUSH
4542: LD_INT 15
4544: PUSH
4545: LD_INT 16
4547: PUSH
4548: LD_INT 22
4550: PUSH
4551: LD_INT 23
4553: PUSH
4554: LD_INT 26
4556: PUSH
4557: EMPTY
4558: LIST
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: LIST
4566: LIST
4567: PUSH
4568: LD_INT 101
4570: PUSH
4571: LD_INT 102
4573: PUSH
4574: LD_INT 106
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: ST_TO_ADDR
4586: GO 7445
4588: LD_INT 2
4590: DOUBLE
4591: EQUAL
4592: IFTRUE 4596
4594: GO 4668
4596: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
4597: LD_ADDR_VAR 0 1
4601: PUSH
4602: LD_INT 2
4604: PUSH
4605: LD_INT 4
4607: PUSH
4608: LD_INT 11
4610: PUSH
4611: LD_INT 12
4613: PUSH
4614: LD_INT 15
4616: PUSH
4617: LD_INT 16
4619: PUSH
4620: LD_INT 22
4622: PUSH
4623: LD_INT 23
4625: PUSH
4626: LD_INT 26
4628: PUSH
4629: EMPTY
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 101
4642: PUSH
4643: LD_INT 102
4645: PUSH
4646: LD_INT 105
4648: PUSH
4649: LD_INT 106
4651: PUSH
4652: LD_INT 108
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: PUSH
4662: EMPTY
4663: LIST
4664: LIST
4665: ST_TO_ADDR
4666: GO 7445
4668: LD_INT 3
4670: DOUBLE
4671: EQUAL
4672: IFTRUE 4676
4674: GO 4752
4676: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
4677: LD_ADDR_VAR 0 1
4681: PUSH
4682: LD_INT 2
4684: PUSH
4685: LD_INT 4
4687: PUSH
4688: LD_INT 5
4690: PUSH
4691: LD_INT 11
4693: PUSH
4694: LD_INT 12
4696: PUSH
4697: LD_INT 15
4699: PUSH
4700: LD_INT 16
4702: PUSH
4703: LD_INT 22
4705: PUSH
4706: LD_INT 26
4708: PUSH
4709: LD_INT 36
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 101
4726: PUSH
4727: LD_INT 102
4729: PUSH
4730: LD_INT 105
4732: PUSH
4733: LD_INT 106
4735: PUSH
4736: LD_INT 108
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: ST_TO_ADDR
4750: GO 7445
4752: LD_INT 4
4754: DOUBLE
4755: EQUAL
4756: IFTRUE 4760
4758: GO 4844
4760: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
4761: LD_ADDR_VAR 0 1
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: LD_INT 4
4771: PUSH
4772: LD_INT 5
4774: PUSH
4775: LD_INT 8
4777: PUSH
4778: LD_INT 11
4780: PUSH
4781: LD_INT 12
4783: PUSH
4784: LD_INT 15
4786: PUSH
4787: LD_INT 16
4789: PUSH
4790: LD_INT 22
4792: PUSH
4793: LD_INT 23
4795: PUSH
4796: LD_INT 26
4798: PUSH
4799: LD_INT 36
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 101
4818: PUSH
4819: LD_INT 102
4821: PUSH
4822: LD_INT 105
4824: PUSH
4825: LD_INT 106
4827: PUSH
4828: LD_INT 108
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: ST_TO_ADDR
4842: GO 7445
4844: LD_INT 5
4846: DOUBLE
4847: EQUAL
4848: IFTRUE 4852
4850: GO 4952
4852: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
4853: LD_ADDR_VAR 0 1
4857: PUSH
4858: LD_INT 2
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: LD_INT 5
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: LD_INT 8
4872: PUSH
4873: LD_INT 11
4875: PUSH
4876: LD_INT 12
4878: PUSH
4879: LD_INT 15
4881: PUSH
4882: LD_INT 16
4884: PUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 23
4890: PUSH
4891: LD_INT 25
4893: PUSH
4894: LD_INT 26
4896: PUSH
4897: LD_INT 36
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 101
4918: PUSH
4919: LD_INT 102
4921: PUSH
4922: LD_INT 105
4924: PUSH
4925: LD_INT 106
4927: PUSH
4928: LD_INT 108
4930: PUSH
4931: LD_INT 109
4933: PUSH
4934: LD_INT 112
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: ST_TO_ADDR
4950: GO 7445
4952: LD_INT 6
4954: DOUBLE
4955: EQUAL
4956: IFTRUE 4960
4958: GO 5080
4960: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
4961: LD_ADDR_VAR 0 1
4965: PUSH
4966: LD_INT 2
4968: PUSH
4969: LD_INT 4
4971: PUSH
4972: LD_INT 5
4974: PUSH
4975: LD_INT 6
4977: PUSH
4978: LD_INT 8
4980: PUSH
4981: LD_INT 11
4983: PUSH
4984: LD_INT 12
4986: PUSH
4987: LD_INT 15
4989: PUSH
4990: LD_INT 16
4992: PUSH
4993: LD_INT 20
4995: PUSH
4996: LD_INT 21
4998: PUSH
4999: LD_INT 22
5001: PUSH
5002: LD_INT 23
5004: PUSH
5005: LD_INT 25
5007: PUSH
5008: LD_INT 26
5010: PUSH
5011: LD_INT 30
5013: PUSH
5014: LD_INT 31
5016: PUSH
5017: LD_INT 32
5019: PUSH
5020: LD_INT 36
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: LIST
5027: LIST
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: LIST
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 101
5046: PUSH
5047: LD_INT 102
5049: PUSH
5050: LD_INT 105
5052: PUSH
5053: LD_INT 106
5055: PUSH
5056: LD_INT 108
5058: PUSH
5059: LD_INT 109
5061: PUSH
5062: LD_INT 112
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: ST_TO_ADDR
5078: GO 7445
5080: LD_INT 7
5082: DOUBLE
5083: EQUAL
5084: IFTRUE 5088
5086: GO 5188
5088: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
5089: LD_ADDR_VAR 0 1
5093: PUSH
5094: LD_INT 2
5096: PUSH
5097: LD_INT 4
5099: PUSH
5100: LD_INT 5
5102: PUSH
5103: LD_INT 7
5105: PUSH
5106: LD_INT 11
5108: PUSH
5109: LD_INT 12
5111: PUSH
5112: LD_INT 15
5114: PUSH
5115: LD_INT 16
5117: PUSH
5118: LD_INT 20
5120: PUSH
5121: LD_INT 21
5123: PUSH
5124: LD_INT 22
5126: PUSH
5127: LD_INT 23
5129: PUSH
5130: LD_INT 25
5132: PUSH
5133: LD_INT 26
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 101
5154: PUSH
5155: LD_INT 102
5157: PUSH
5158: LD_INT 103
5160: PUSH
5161: LD_INT 105
5163: PUSH
5164: LD_INT 106
5166: PUSH
5167: LD_INT 108
5169: PUSH
5170: LD_INT 112
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: ST_TO_ADDR
5186: GO 7445
5188: LD_INT 8
5190: DOUBLE
5191: EQUAL
5192: IFTRUE 5196
5194: GO 5324
5196: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
5197: LD_ADDR_VAR 0 1
5201: PUSH
5202: LD_INT 2
5204: PUSH
5205: LD_INT 4
5207: PUSH
5208: LD_INT 5
5210: PUSH
5211: LD_INT 6
5213: PUSH
5214: LD_INT 7
5216: PUSH
5217: LD_INT 8
5219: PUSH
5220: LD_INT 11
5222: PUSH
5223: LD_INT 12
5225: PUSH
5226: LD_INT 15
5228: PUSH
5229: LD_INT 16
5231: PUSH
5232: LD_INT 20
5234: PUSH
5235: LD_INT 21
5237: PUSH
5238: LD_INT 22
5240: PUSH
5241: LD_INT 23
5243: PUSH
5244: LD_INT 25
5246: PUSH
5247: LD_INT 26
5249: PUSH
5250: LD_INT 30
5252: PUSH
5253: LD_INT 31
5255: PUSH
5256: LD_INT 32
5258: PUSH
5259: LD_INT 36
5261: PUSH
5262: EMPTY
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: LIST
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_INT 101
5286: PUSH
5287: LD_INT 102
5289: PUSH
5290: LD_INT 103
5292: PUSH
5293: LD_INT 105
5295: PUSH
5296: LD_INT 106
5298: PUSH
5299: LD_INT 108
5301: PUSH
5302: LD_INT 109
5304: PUSH
5305: LD_INT 112
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: PUSH
5318: EMPTY
5319: LIST
5320: LIST
5321: ST_TO_ADDR
5322: GO 7445
5324: LD_INT 9
5326: DOUBLE
5327: EQUAL
5328: IFTRUE 5332
5330: GO 5468
5332: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_INT 2
5340: PUSH
5341: LD_INT 4
5343: PUSH
5344: LD_INT 5
5346: PUSH
5347: LD_INT 6
5349: PUSH
5350: LD_INT 7
5352: PUSH
5353: LD_INT 8
5355: PUSH
5356: LD_INT 11
5358: PUSH
5359: LD_INT 12
5361: PUSH
5362: LD_INT 15
5364: PUSH
5365: LD_INT 16
5367: PUSH
5368: LD_INT 20
5370: PUSH
5371: LD_INT 21
5373: PUSH
5374: LD_INT 22
5376: PUSH
5377: LD_INT 23
5379: PUSH
5380: LD_INT 25
5382: PUSH
5383: LD_INT 26
5385: PUSH
5386: LD_INT 28
5388: PUSH
5389: LD_INT 30
5391: PUSH
5392: LD_INT 31
5394: PUSH
5395: LD_INT 32
5397: PUSH
5398: LD_INT 36
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: LIST
5405: LIST
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: PUSH
5424: LD_INT 101
5426: PUSH
5427: LD_INT 102
5429: PUSH
5430: LD_INT 103
5432: PUSH
5433: LD_INT 105
5435: PUSH
5436: LD_INT 106
5438: PUSH
5439: LD_INT 108
5441: PUSH
5442: LD_INT 109
5444: PUSH
5445: LD_INT 112
5447: PUSH
5448: LD_INT 114
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: ST_TO_ADDR
5466: GO 7445
5468: LD_INT 10
5470: DOUBLE
5471: EQUAL
5472: IFTRUE 5476
5474: GO 5660
5476: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
5477: LD_ADDR_VAR 0 1
5481: PUSH
5482: LD_INT 2
5484: PUSH
5485: LD_INT 4
5487: PUSH
5488: LD_INT 5
5490: PUSH
5491: LD_INT 6
5493: PUSH
5494: LD_INT 7
5496: PUSH
5497: LD_INT 8
5499: PUSH
5500: LD_INT 9
5502: PUSH
5503: LD_INT 10
5505: PUSH
5506: LD_INT 11
5508: PUSH
5509: LD_INT 12
5511: PUSH
5512: LD_INT 13
5514: PUSH
5515: LD_INT 14
5517: PUSH
5518: LD_INT 15
5520: PUSH
5521: LD_INT 16
5523: PUSH
5524: LD_INT 17
5526: PUSH
5527: LD_INT 18
5529: PUSH
5530: LD_INT 19
5532: PUSH
5533: LD_INT 20
5535: PUSH
5536: LD_INT 21
5538: PUSH
5539: LD_INT 22
5541: PUSH
5542: LD_INT 23
5544: PUSH
5545: LD_INT 24
5547: PUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 26
5553: PUSH
5554: LD_INT 28
5556: PUSH
5557: LD_INT 30
5559: PUSH
5560: LD_INT 31
5562: PUSH
5563: LD_INT 32
5565: PUSH
5566: LD_INT 36
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: LIST
5576: LIST
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 101
5602: PUSH
5603: LD_INT 102
5605: PUSH
5606: LD_INT 103
5608: PUSH
5609: LD_INT 104
5611: PUSH
5612: LD_INT 105
5614: PUSH
5615: LD_INT 106
5617: PUSH
5618: LD_INT 107
5620: PUSH
5621: LD_INT 108
5623: PUSH
5624: LD_INT 109
5626: PUSH
5627: LD_INT 110
5629: PUSH
5630: LD_INT 111
5632: PUSH
5633: LD_INT 112
5635: PUSH
5636: LD_INT 114
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: LIST
5650: LIST
5651: LIST
5652: LIST
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: ST_TO_ADDR
5658: GO 7445
5660: LD_INT 11
5662: DOUBLE
5663: EQUAL
5664: IFTRUE 5668
5666: GO 5860
5668: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
5669: LD_ADDR_VAR 0 1
5673: PUSH
5674: LD_INT 2
5676: PUSH
5677: LD_INT 3
5679: PUSH
5680: LD_INT 4
5682: PUSH
5683: LD_INT 5
5685: PUSH
5686: LD_INT 6
5688: PUSH
5689: LD_INT 7
5691: PUSH
5692: LD_INT 8
5694: PUSH
5695: LD_INT 9
5697: PUSH
5698: LD_INT 10
5700: PUSH
5701: LD_INT 11
5703: PUSH
5704: LD_INT 12
5706: PUSH
5707: LD_INT 13
5709: PUSH
5710: LD_INT 14
5712: PUSH
5713: LD_INT 15
5715: PUSH
5716: LD_INT 16
5718: PUSH
5719: LD_INT 17
5721: PUSH
5722: LD_INT 18
5724: PUSH
5725: LD_INT 19
5727: PUSH
5728: LD_INT 20
5730: PUSH
5731: LD_INT 21
5733: PUSH
5734: LD_INT 22
5736: PUSH
5737: LD_INT 23
5739: PUSH
5740: LD_INT 24
5742: PUSH
5743: LD_INT 25
5745: PUSH
5746: LD_INT 26
5748: PUSH
5749: LD_INT 28
5751: PUSH
5752: LD_INT 30
5754: PUSH
5755: LD_INT 31
5757: PUSH
5758: LD_INT 32
5760: PUSH
5761: LD_INT 34
5763: PUSH
5764: LD_INT 36
5766: PUSH
5767: EMPTY
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: LD_INT 101
5802: PUSH
5803: LD_INT 102
5805: PUSH
5806: LD_INT 103
5808: PUSH
5809: LD_INT 104
5811: PUSH
5812: LD_INT 105
5814: PUSH
5815: LD_INT 106
5817: PUSH
5818: LD_INT 107
5820: PUSH
5821: LD_INT 108
5823: PUSH
5824: LD_INT 109
5826: PUSH
5827: LD_INT 110
5829: PUSH
5830: LD_INT 111
5832: PUSH
5833: LD_INT 112
5835: PUSH
5836: LD_INT 114
5838: PUSH
5839: EMPTY
5840: LIST
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: LIST
5853: PUSH
5854: EMPTY
5855: LIST
5856: LIST
5857: ST_TO_ADDR
5858: GO 7445
5860: LD_INT 12
5862: DOUBLE
5863: EQUAL
5864: IFTRUE 5868
5866: GO 6076
5868: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
5869: LD_ADDR_VAR 0 1
5873: PUSH
5874: LD_INT 1
5876: PUSH
5877: LD_INT 2
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 6
5891: PUSH
5892: LD_INT 7
5894: PUSH
5895: LD_INT 8
5897: PUSH
5898: LD_INT 9
5900: PUSH
5901: LD_INT 10
5903: PUSH
5904: LD_INT 11
5906: PUSH
5907: LD_INT 12
5909: PUSH
5910: LD_INT 13
5912: PUSH
5913: LD_INT 14
5915: PUSH
5916: LD_INT 15
5918: PUSH
5919: LD_INT 16
5921: PUSH
5922: LD_INT 17
5924: PUSH
5925: LD_INT 18
5927: PUSH
5928: LD_INT 19
5930: PUSH
5931: LD_INT 20
5933: PUSH
5934: LD_INT 21
5936: PUSH
5937: LD_INT 22
5939: PUSH
5940: LD_INT 23
5942: PUSH
5943: LD_INT 24
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 26
5951: PUSH
5952: LD_INT 27
5954: PUSH
5955: LD_INT 28
5957: PUSH
5958: LD_INT 30
5960: PUSH
5961: LD_INT 31
5963: PUSH
5964: LD_INT 32
5966: PUSH
5967: LD_INT 33
5969: PUSH
5970: LD_INT 34
5972: PUSH
5973: LD_INT 36
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: LIST
6009: LIST
6010: LIST
6011: PUSH
6012: LD_INT 101
6014: PUSH
6015: LD_INT 102
6017: PUSH
6018: LD_INT 103
6020: PUSH
6021: LD_INT 104
6023: PUSH
6024: LD_INT 105
6026: PUSH
6027: LD_INT 106
6029: PUSH
6030: LD_INT 107
6032: PUSH
6033: LD_INT 108
6035: PUSH
6036: LD_INT 109
6038: PUSH
6039: LD_INT 110
6041: PUSH
6042: LD_INT 111
6044: PUSH
6045: LD_INT 112
6047: PUSH
6048: LD_INT 113
6050: PUSH
6051: LD_INT 114
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: ST_TO_ADDR
6074: GO 7445
6076: LD_INT 13
6078: DOUBLE
6079: EQUAL
6080: IFTRUE 6084
6082: GO 6280
6084: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
6085: LD_ADDR_VAR 0 1
6089: PUSH
6090: LD_INT 1
6092: PUSH
6093: LD_INT 2
6095: PUSH
6096: LD_INT 3
6098: PUSH
6099: LD_INT 4
6101: PUSH
6102: LD_INT 5
6104: PUSH
6105: LD_INT 8
6107: PUSH
6108: LD_INT 9
6110: PUSH
6111: LD_INT 10
6113: PUSH
6114: LD_INT 11
6116: PUSH
6117: LD_INT 12
6119: PUSH
6120: LD_INT 14
6122: PUSH
6123: LD_INT 15
6125: PUSH
6126: LD_INT 16
6128: PUSH
6129: LD_INT 17
6131: PUSH
6132: LD_INT 18
6134: PUSH
6135: LD_INT 19
6137: PUSH
6138: LD_INT 20
6140: PUSH
6141: LD_INT 21
6143: PUSH
6144: LD_INT 22
6146: PUSH
6147: LD_INT 23
6149: PUSH
6150: LD_INT 24
6152: PUSH
6153: LD_INT 25
6155: PUSH
6156: LD_INT 26
6158: PUSH
6159: LD_INT 27
6161: PUSH
6162: LD_INT 28
6164: PUSH
6165: LD_INT 30
6167: PUSH
6168: LD_INT 31
6170: PUSH
6171: LD_INT 32
6173: PUSH
6174: LD_INT 33
6176: PUSH
6177: LD_INT 34
6179: PUSH
6180: LD_INT 36
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_INT 101
6218: PUSH
6219: LD_INT 102
6221: PUSH
6222: LD_INT 103
6224: PUSH
6225: LD_INT 104
6227: PUSH
6228: LD_INT 105
6230: PUSH
6231: LD_INT 106
6233: PUSH
6234: LD_INT 107
6236: PUSH
6237: LD_INT 108
6239: PUSH
6240: LD_INT 109
6242: PUSH
6243: LD_INT 110
6245: PUSH
6246: LD_INT 111
6248: PUSH
6249: LD_INT 112
6251: PUSH
6252: LD_INT 113
6254: PUSH
6255: LD_INT 114
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: ST_TO_ADDR
6278: GO 7445
6280: LD_INT 14
6282: DOUBLE
6283: EQUAL
6284: IFTRUE 6288
6286: GO 6500
6288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
6289: LD_ADDR_VAR 0 1
6293: PUSH
6294: LD_INT 1
6296: PUSH
6297: LD_INT 2
6299: PUSH
6300: LD_INT 3
6302: PUSH
6303: LD_INT 4
6305: PUSH
6306: LD_INT 5
6308: PUSH
6309: LD_INT 6
6311: PUSH
6312: LD_INT 7
6314: PUSH
6315: LD_INT 8
6317: PUSH
6318: LD_INT 9
6320: PUSH
6321: LD_INT 10
6323: PUSH
6324: LD_INT 11
6326: PUSH
6327: LD_INT 12
6329: PUSH
6330: LD_INT 13
6332: PUSH
6333: LD_INT 14
6335: PUSH
6336: LD_INT 15
6338: PUSH
6339: LD_INT 16
6341: PUSH
6342: LD_INT 17
6344: PUSH
6345: LD_INT 18
6347: PUSH
6348: LD_INT 19
6350: PUSH
6351: LD_INT 20
6353: PUSH
6354: LD_INT 21
6356: PUSH
6357: LD_INT 22
6359: PUSH
6360: LD_INT 23
6362: PUSH
6363: LD_INT 24
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 26
6371: PUSH
6372: LD_INT 27
6374: PUSH
6375: LD_INT 28
6377: PUSH
6378: LD_INT 29
6380: PUSH
6381: LD_INT 30
6383: PUSH
6384: LD_INT 31
6386: PUSH
6387: LD_INT 32
6389: PUSH
6390: LD_INT 33
6392: PUSH
6393: LD_INT 34
6395: PUSH
6396: LD_INT 36
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: PUSH
6436: LD_INT 101
6438: PUSH
6439: LD_INT 102
6441: PUSH
6442: LD_INT 103
6444: PUSH
6445: LD_INT 104
6447: PUSH
6448: LD_INT 105
6450: PUSH
6451: LD_INT 106
6453: PUSH
6454: LD_INT 107
6456: PUSH
6457: LD_INT 108
6459: PUSH
6460: LD_INT 109
6462: PUSH
6463: LD_INT 110
6465: PUSH
6466: LD_INT 111
6468: PUSH
6469: LD_INT 112
6471: PUSH
6472: LD_INT 113
6474: PUSH
6475: LD_INT 114
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: PUSH
6494: EMPTY
6495: LIST
6496: LIST
6497: ST_TO_ADDR
6498: GO 7445
6500: LD_INT 15
6502: DOUBLE
6503: EQUAL
6504: IFTRUE 6508
6506: GO 6720
6508: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
6509: LD_ADDR_VAR 0 1
6513: PUSH
6514: LD_INT 1
6516: PUSH
6517: LD_INT 2
6519: PUSH
6520: LD_INT 3
6522: PUSH
6523: LD_INT 4
6525: PUSH
6526: LD_INT 5
6528: PUSH
6529: LD_INT 6
6531: PUSH
6532: LD_INT 7
6534: PUSH
6535: LD_INT 8
6537: PUSH
6538: LD_INT 9
6540: PUSH
6541: LD_INT 10
6543: PUSH
6544: LD_INT 11
6546: PUSH
6547: LD_INT 12
6549: PUSH
6550: LD_INT 13
6552: PUSH
6553: LD_INT 14
6555: PUSH
6556: LD_INT 15
6558: PUSH
6559: LD_INT 16
6561: PUSH
6562: LD_INT 17
6564: PUSH
6565: LD_INT 18
6567: PUSH
6568: LD_INT 19
6570: PUSH
6571: LD_INT 20
6573: PUSH
6574: LD_INT 21
6576: PUSH
6577: LD_INT 22
6579: PUSH
6580: LD_INT 23
6582: PUSH
6583: LD_INT 24
6585: PUSH
6586: LD_INT 25
6588: PUSH
6589: LD_INT 26
6591: PUSH
6592: LD_INT 27
6594: PUSH
6595: LD_INT 28
6597: PUSH
6598: LD_INT 29
6600: PUSH
6601: LD_INT 30
6603: PUSH
6604: LD_INT 31
6606: PUSH
6607: LD_INT 32
6609: PUSH
6610: LD_INT 33
6612: PUSH
6613: LD_INT 34
6615: PUSH
6616: LD_INT 36
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 101
6658: PUSH
6659: LD_INT 102
6661: PUSH
6662: LD_INT 103
6664: PUSH
6665: LD_INT 104
6667: PUSH
6668: LD_INT 105
6670: PUSH
6671: LD_INT 106
6673: PUSH
6674: LD_INT 107
6676: PUSH
6677: LD_INT 108
6679: PUSH
6680: LD_INT 109
6682: PUSH
6683: LD_INT 110
6685: PUSH
6686: LD_INT 111
6688: PUSH
6689: LD_INT 112
6691: PUSH
6692: LD_INT 113
6694: PUSH
6695: LD_INT 114
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: ST_TO_ADDR
6718: GO 7445
6720: LD_INT 16
6722: DOUBLE
6723: EQUAL
6724: IFTRUE 6728
6726: GO 6852
6728: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_INT 2
6736: PUSH
6737: LD_INT 4
6739: PUSH
6740: LD_INT 5
6742: PUSH
6743: LD_INT 7
6745: PUSH
6746: LD_INT 11
6748: PUSH
6749: LD_INT 12
6751: PUSH
6752: LD_INT 15
6754: PUSH
6755: LD_INT 16
6757: PUSH
6758: LD_INT 20
6760: PUSH
6761: LD_INT 21
6763: PUSH
6764: LD_INT 22
6766: PUSH
6767: LD_INT 23
6769: PUSH
6770: LD_INT 25
6772: PUSH
6773: LD_INT 26
6775: PUSH
6776: LD_INT 30
6778: PUSH
6779: LD_INT 31
6781: PUSH
6782: LD_INT 32
6784: PUSH
6785: LD_INT 33
6787: PUSH
6788: LD_INT 34
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 101
6814: PUSH
6815: LD_INT 102
6817: PUSH
6818: LD_INT 103
6820: PUSH
6821: LD_INT 106
6823: PUSH
6824: LD_INT 108
6826: PUSH
6827: LD_INT 112
6829: PUSH
6830: LD_INT 113
6832: PUSH
6833: LD_INT 114
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: ST_TO_ADDR
6850: GO 7445
6852: LD_INT 17
6854: DOUBLE
6855: EQUAL
6856: IFTRUE 6860
6858: GO 7072
6860: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
6861: LD_ADDR_VAR 0 1
6865: PUSH
6866: LD_INT 1
6868: PUSH
6869: LD_INT 2
6871: PUSH
6872: LD_INT 3
6874: PUSH
6875: LD_INT 4
6877: PUSH
6878: LD_INT 5
6880: PUSH
6881: LD_INT 6
6883: PUSH
6884: LD_INT 7
6886: PUSH
6887: LD_INT 8
6889: PUSH
6890: LD_INT 9
6892: PUSH
6893: LD_INT 10
6895: PUSH
6896: LD_INT 11
6898: PUSH
6899: LD_INT 12
6901: PUSH
6902: LD_INT 13
6904: PUSH
6905: LD_INT 14
6907: PUSH
6908: LD_INT 15
6910: PUSH
6911: LD_INT 16
6913: PUSH
6914: LD_INT 17
6916: PUSH
6917: LD_INT 18
6919: PUSH
6920: LD_INT 19
6922: PUSH
6923: LD_INT 20
6925: PUSH
6926: LD_INT 21
6928: PUSH
6929: LD_INT 22
6931: PUSH
6932: LD_INT 23
6934: PUSH
6935: LD_INT 24
6937: PUSH
6938: LD_INT 25
6940: PUSH
6941: LD_INT 26
6943: PUSH
6944: LD_INT 27
6946: PUSH
6947: LD_INT 28
6949: PUSH
6950: LD_INT 29
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 31
6958: PUSH
6959: LD_INT 32
6961: PUSH
6962: LD_INT 33
6964: PUSH
6965: LD_INT 34
6967: PUSH
6968: LD_INT 36
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: LIST
6996: LIST
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 101
7010: PUSH
7011: LD_INT 102
7013: PUSH
7014: LD_INT 103
7016: PUSH
7017: LD_INT 104
7019: PUSH
7020: LD_INT 105
7022: PUSH
7023: LD_INT 106
7025: PUSH
7026: LD_INT 107
7028: PUSH
7029: LD_INT 108
7031: PUSH
7032: LD_INT 109
7034: PUSH
7035: LD_INT 110
7037: PUSH
7038: LD_INT 111
7040: PUSH
7041: LD_INT 112
7043: PUSH
7044: LD_INT 113
7046: PUSH
7047: LD_INT 114
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: PUSH
7066: EMPTY
7067: LIST
7068: LIST
7069: ST_TO_ADDR
7070: GO 7445
7072: LD_INT 18
7074: DOUBLE
7075: EQUAL
7076: IFTRUE 7080
7078: GO 7216
7080: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
7081: LD_ADDR_VAR 0 1
7085: PUSH
7086: LD_INT 2
7088: PUSH
7089: LD_INT 4
7091: PUSH
7092: LD_INT 5
7094: PUSH
7095: LD_INT 7
7097: PUSH
7098: LD_INT 11
7100: PUSH
7101: LD_INT 12
7103: PUSH
7104: LD_INT 15
7106: PUSH
7107: LD_INT 16
7109: PUSH
7110: LD_INT 20
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 22
7118: PUSH
7119: LD_INT 23
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 26
7127: PUSH
7128: LD_INT 30
7130: PUSH
7131: LD_INT 31
7133: PUSH
7134: LD_INT 32
7136: PUSH
7137: LD_INT 33
7139: PUSH
7140: LD_INT 34
7142: PUSH
7143: LD_INT 35
7145: PUSH
7146: LD_INT 36
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 101
7174: PUSH
7175: LD_INT 102
7177: PUSH
7178: LD_INT 103
7180: PUSH
7181: LD_INT 106
7183: PUSH
7184: LD_INT 108
7186: PUSH
7187: LD_INT 112
7189: PUSH
7190: LD_INT 113
7192: PUSH
7193: LD_INT 114
7195: PUSH
7196: LD_INT 115
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: ST_TO_ADDR
7214: GO 7445
7216: LD_INT 19
7218: DOUBLE
7219: EQUAL
7220: IFTRUE 7224
7222: GO 7444
7224: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
7225: LD_ADDR_VAR 0 1
7229: PUSH
7230: LD_INT 1
7232: PUSH
7233: LD_INT 2
7235: PUSH
7236: LD_INT 3
7238: PUSH
7239: LD_INT 4
7241: PUSH
7242: LD_INT 5
7244: PUSH
7245: LD_INT 6
7247: PUSH
7248: LD_INT 7
7250: PUSH
7251: LD_INT 8
7253: PUSH
7254: LD_INT 9
7256: PUSH
7257: LD_INT 10
7259: PUSH
7260: LD_INT 11
7262: PUSH
7263: LD_INT 12
7265: PUSH
7266: LD_INT 13
7268: PUSH
7269: LD_INT 14
7271: PUSH
7272: LD_INT 15
7274: PUSH
7275: LD_INT 16
7277: PUSH
7278: LD_INT 17
7280: PUSH
7281: LD_INT 18
7283: PUSH
7284: LD_INT 19
7286: PUSH
7287: LD_INT 20
7289: PUSH
7290: LD_INT 21
7292: PUSH
7293: LD_INT 22
7295: PUSH
7296: LD_INT 23
7298: PUSH
7299: LD_INT 24
7301: PUSH
7302: LD_INT 25
7304: PUSH
7305: LD_INT 26
7307: PUSH
7308: LD_INT 27
7310: PUSH
7311: LD_INT 28
7313: PUSH
7314: LD_INT 29
7316: PUSH
7317: LD_INT 30
7319: PUSH
7320: LD_INT 31
7322: PUSH
7323: LD_INT 32
7325: PUSH
7326: LD_INT 33
7328: PUSH
7329: LD_INT 34
7331: PUSH
7332: LD_INT 35
7334: PUSH
7335: LD_INT 36
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: LIST
7342: LIST
7343: LIST
7344: LIST
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: LIST
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 101
7378: PUSH
7379: LD_INT 102
7381: PUSH
7382: LD_INT 103
7384: PUSH
7385: LD_INT 104
7387: PUSH
7388: LD_INT 105
7390: PUSH
7391: LD_INT 106
7393: PUSH
7394: LD_INT 107
7396: PUSH
7397: LD_INT 108
7399: PUSH
7400: LD_INT 109
7402: PUSH
7403: LD_INT 110
7405: PUSH
7406: LD_INT 111
7408: PUSH
7409: LD_INT 112
7411: PUSH
7412: LD_INT 113
7414: PUSH
7415: LD_INT 114
7417: PUSH
7418: LD_INT 115
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: ST_TO_ADDR
7442: GO 7445
7444: POP
// end else
7445: GO 7664
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
7447: LD_ADDR_VAR 0 1
7451: PUSH
7452: LD_INT 1
7454: PUSH
7455: LD_INT 2
7457: PUSH
7458: LD_INT 3
7460: PUSH
7461: LD_INT 4
7463: PUSH
7464: LD_INT 5
7466: PUSH
7467: LD_INT 6
7469: PUSH
7470: LD_INT 7
7472: PUSH
7473: LD_INT 8
7475: PUSH
7476: LD_INT 9
7478: PUSH
7479: LD_INT 10
7481: PUSH
7482: LD_INT 11
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: LD_INT 13
7490: PUSH
7491: LD_INT 14
7493: PUSH
7494: LD_INT 15
7496: PUSH
7497: LD_INT 16
7499: PUSH
7500: LD_INT 17
7502: PUSH
7503: LD_INT 18
7505: PUSH
7506: LD_INT 19
7508: PUSH
7509: LD_INT 20
7511: PUSH
7512: LD_INT 21
7514: PUSH
7515: LD_INT 22
7517: PUSH
7518: LD_INT 23
7520: PUSH
7521: LD_INT 24
7523: PUSH
7524: LD_INT 25
7526: PUSH
7527: LD_INT 26
7529: PUSH
7530: LD_INT 27
7532: PUSH
7533: LD_INT 28
7535: PUSH
7536: LD_INT 29
7538: PUSH
7539: LD_INT 30
7541: PUSH
7542: LD_INT 31
7544: PUSH
7545: LD_INT 32
7547: PUSH
7548: LD_INT 33
7550: PUSH
7551: LD_INT 34
7553: PUSH
7554: LD_INT 35
7556: PUSH
7557: LD_INT 36
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: LIST
7567: LIST
7568: LIST
7569: LIST
7570: LIST
7571: LIST
7572: LIST
7573: LIST
7574: LIST
7575: LIST
7576: LIST
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: PUSH
7598: LD_INT 101
7600: PUSH
7601: LD_INT 102
7603: PUSH
7604: LD_INT 103
7606: PUSH
7607: LD_INT 104
7609: PUSH
7610: LD_INT 105
7612: PUSH
7613: LD_INT 106
7615: PUSH
7616: LD_INT 107
7618: PUSH
7619: LD_INT 108
7621: PUSH
7622: LD_INT 109
7624: PUSH
7625: LD_INT 110
7627: PUSH
7628: LD_INT 111
7630: PUSH
7631: LD_INT 112
7633: PUSH
7634: LD_INT 113
7636: PUSH
7637: LD_INT 114
7639: PUSH
7640: LD_INT 115
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: LIST
7647: LIST
7648: LIST
7649: LIST
7650: LIST
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: LIST
7656: LIST
7657: LIST
7658: LIST
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: ST_TO_ADDR
// if result then
7664: LD_VAR 0 1
7668: IFFALSE 7957
// begin normal :=  ;
7670: LD_ADDR_VAR 0 3
7674: PUSH
7675: LD_STRING 
7677: ST_TO_ADDR
// hardcore :=  ;
7678: LD_ADDR_VAR 0 4
7682: PUSH
7683: LD_STRING 
7685: ST_TO_ADDR
// for i = 1 to normalCounter do
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: DOUBLE
7692: LD_INT 1
7694: DEC
7695: ST_TO_ADDR
7696: LD_EXP 22
7700: PUSH
7701: FOR_TO
7702: IFFALSE 7803
// begin tmp := 0 ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_STRING 0
7711: ST_TO_ADDR
// if result [ 1 ] then
7712: LD_VAR 0 1
7716: PUSH
7717: LD_INT 1
7719: ARRAY
7720: IFFALSE 7785
// if result [ 1 ] [ 1 ] = i then
7722: LD_VAR 0 1
7726: PUSH
7727: LD_INT 1
7729: ARRAY
7730: PUSH
7731: LD_INT 1
7733: ARRAY
7734: PUSH
7735: LD_VAR 0 5
7739: EQUAL
7740: IFFALSE 7785
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
7742: LD_ADDR_VAR 0 1
7746: PUSH
7747: LD_VAR 0 1
7751: PPUSH
7752: LD_INT 1
7754: PPUSH
7755: LD_VAR 0 1
7759: PUSH
7760: LD_INT 1
7762: ARRAY
7763: PPUSH
7764: LD_INT 1
7766: PPUSH
7767: CALL_OW 3
7771: PPUSH
7772: CALL_OW 1
7776: ST_TO_ADDR
// tmp := 1 ;
7777: LD_ADDR_VAR 0 2
7781: PUSH
7782: LD_STRING 1
7784: ST_TO_ADDR
// end ; normal := normal & tmp ;
7785: LD_ADDR_VAR 0 3
7789: PUSH
7790: LD_VAR 0 3
7794: PUSH
7795: LD_VAR 0 2
7799: STR
7800: ST_TO_ADDR
// end ;
7801: GO 7701
7803: POP
7804: POP
// for i = 1 to hardcoreCounter do
7805: LD_ADDR_VAR 0 5
7809: PUSH
7810: DOUBLE
7811: LD_INT 1
7813: DEC
7814: ST_TO_ADDR
7815: LD_EXP 23
7819: PUSH
7820: FOR_TO
7821: IFFALSE 7926
// begin tmp := 0 ;
7823: LD_ADDR_VAR 0 2
7827: PUSH
7828: LD_STRING 0
7830: ST_TO_ADDR
// if result [ 2 ] then
7831: LD_VAR 0 1
7835: PUSH
7836: LD_INT 2
7838: ARRAY
7839: IFFALSE 7908
// if result [ 2 ] [ 1 ] = 100 + i then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 2
7848: ARRAY
7849: PUSH
7850: LD_INT 1
7852: ARRAY
7853: PUSH
7854: LD_INT 100
7856: PUSH
7857: LD_VAR 0 5
7861: PLUS
7862: EQUAL
7863: IFFALSE 7908
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
7865: LD_ADDR_VAR 0 1
7869: PUSH
7870: LD_VAR 0 1
7874: PPUSH
7875: LD_INT 2
7877: PPUSH
7878: LD_VAR 0 1
7882: PUSH
7883: LD_INT 2
7885: ARRAY
7886: PPUSH
7887: LD_INT 1
7889: PPUSH
7890: CALL_OW 3
7894: PPUSH
7895: CALL_OW 1
7899: ST_TO_ADDR
// tmp := 1 ;
7900: LD_ADDR_VAR 0 2
7904: PUSH
7905: LD_STRING 1
7907: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
7908: LD_ADDR_VAR 0 4
7912: PUSH
7913: LD_VAR 0 4
7917: PUSH
7918: LD_VAR 0 2
7922: STR
7923: ST_TO_ADDR
// end ;
7924: GO 7820
7926: POP
7927: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
7928: LD_STRING getStreamItemsFromMission("
7930: PUSH
7931: LD_VAR 0 3
7935: STR
7936: PUSH
7937: LD_STRING ","
7939: STR
7940: PUSH
7941: LD_VAR 0 4
7945: STR
7946: PUSH
7947: LD_STRING ")
7949: STR
7950: PPUSH
7951: CALL_OW 559
// end else
7955: GO 7964
// ToLua ( getStreamItemsFromMission("","") ) ;
7957: LD_STRING getStreamItemsFromMission("","")
7959: PPUSH
7960: CALL_OW 559
// end ;
7964: LD_VAR 0 1
7968: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7969: LD_VAR 0 2
7973: PUSH
7974: LD_INT 100
7976: EQUAL
7977: IFFALSE 8926
// begin if not StreamModeActive then
7979: LD_EXP 21
7983: NOT
7984: IFFALSE 7994
// StreamModeActive := true ;
7986: LD_ADDR_EXP 21
7990: PUSH
7991: LD_INT 1
7993: ST_TO_ADDR
// if p3 = 0 then
7994: LD_VAR 0 3
7998: PUSH
7999: LD_INT 0
8001: EQUAL
8002: IFFALSE 8008
// InitStreamMode ;
8004: CALL 4047 0 0
// if p3 = 1 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 1
8015: EQUAL
8016: IFFALSE 8026
// sRocket := true ;
8018: LD_ADDR_EXP 26
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 2 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 2
8033: EQUAL
8034: IFFALSE 8044
// sSpeed := true ;
8036: LD_ADDR_EXP 25
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 3 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 3
8051: EQUAL
8052: IFFALSE 8062
// sEngine := true ;
8054: LD_ADDR_EXP 27
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 4 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 4
8069: EQUAL
8070: IFFALSE 8080
// sSpec := true ;
8072: LD_ADDR_EXP 24
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 5 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 5
8087: EQUAL
8088: IFFALSE 8098
// sLevel := true ;
8090: LD_ADDR_EXP 28
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 6 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 6
8105: EQUAL
8106: IFFALSE 8116
// sArmoury := true ;
8108: LD_ADDR_EXP 29
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 7 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 7
8123: EQUAL
8124: IFFALSE 8134
// sRadar := true ;
8126: LD_ADDR_EXP 30
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 8 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 8
8141: EQUAL
8142: IFFALSE 8152
// sBunker := true ;
8144: LD_ADDR_EXP 31
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 9 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 9
8159: EQUAL
8160: IFFALSE 8170
// sHack := true ;
8162: LD_ADDR_EXP 32
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 10 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 10
8177: EQUAL
8178: IFFALSE 8188
// sFire := true ;
8180: LD_ADDR_EXP 33
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 11 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 11
8195: EQUAL
8196: IFFALSE 8206
// sRefresh := true ;
8198: LD_ADDR_EXP 34
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 12 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 12
8213: EQUAL
8214: IFFALSE 8224
// sExp := true ;
8216: LD_ADDR_EXP 35
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 13 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 13
8231: EQUAL
8232: IFFALSE 8242
// sDepot := true ;
8234: LD_ADDR_EXP 36
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 14 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 14
8249: EQUAL
8250: IFFALSE 8260
// sFlag := true ;
8252: LD_ADDR_EXP 37
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 15 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 15
8267: EQUAL
8268: IFFALSE 8278
// sKamikadze := true ;
8270: LD_ADDR_EXP 45
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 16 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 16
8285: EQUAL
8286: IFFALSE 8296
// sTroll := true ;
8288: LD_ADDR_EXP 46
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// if p3 = 17 then
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 17
8303: EQUAL
8304: IFFALSE 8314
// sSlow := true ;
8306: LD_ADDR_EXP 47
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// if p3 = 18 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 18
8321: EQUAL
8322: IFFALSE 8332
// sLack := true ;
8324: LD_ADDR_EXP 48
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// if p3 = 19 then
8332: LD_VAR 0 3
8336: PUSH
8337: LD_INT 19
8339: EQUAL
8340: IFFALSE 8350
// sTank := true ;
8342: LD_ADDR_EXP 50
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if p3 = 20 then
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 20
8357: EQUAL
8358: IFFALSE 8368
// sRemote := true ;
8360: LD_ADDR_EXP 51
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if p3 = 21 then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 21
8375: EQUAL
8376: IFFALSE 8386
// sPowell := true ;
8378: LD_ADDR_EXP 52
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
// if p3 = 22 then
8386: LD_VAR 0 3
8390: PUSH
8391: LD_INT 22
8393: EQUAL
8394: IFFALSE 8404
// sTeleport := true ;
8396: LD_ADDR_EXP 55
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// if p3 = 23 then
8404: LD_VAR 0 3
8408: PUSH
8409: LD_INT 23
8411: EQUAL
8412: IFFALSE 8422
// sOilTower := true ;
8414: LD_ADDR_EXP 57
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// if p3 = 24 then
8422: LD_VAR 0 3
8426: PUSH
8427: LD_INT 24
8429: EQUAL
8430: IFFALSE 8440
// sShovel := true ;
8432: LD_ADDR_EXP 58
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 25 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 25
8447: EQUAL
8448: IFFALSE 8458
// sSheik := true ;
8450: LD_ADDR_EXP 59
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// if p3 = 26 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 26
8465: EQUAL
8466: IFFALSE 8476
// sEarthquake := true ;
8468: LD_ADDR_EXP 61
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if p3 = 27 then
8476: LD_VAR 0 3
8480: PUSH
8481: LD_INT 27
8483: EQUAL
8484: IFFALSE 8494
// sAI := true ;
8486: LD_ADDR_EXP 62
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// if p3 = 28 then
8494: LD_VAR 0 3
8498: PUSH
8499: LD_INT 28
8501: EQUAL
8502: IFFALSE 8512
// sCargo := true ;
8504: LD_ADDR_EXP 65
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// if p3 = 29 then
8512: LD_VAR 0 3
8516: PUSH
8517: LD_INT 29
8519: EQUAL
8520: IFFALSE 8530
// sDLaser := true ;
8522: LD_ADDR_EXP 66
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if p3 = 30 then
8530: LD_VAR 0 3
8534: PUSH
8535: LD_INT 30
8537: EQUAL
8538: IFFALSE 8548
// sExchange := true ;
8540: LD_ADDR_EXP 67
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// if p3 = 31 then
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 31
8555: EQUAL
8556: IFFALSE 8566
// sFac := true ;
8558: LD_ADDR_EXP 68
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// if p3 = 32 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 32
8573: EQUAL
8574: IFFALSE 8584
// sPower := true ;
8576: LD_ADDR_EXP 69
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// if p3 = 33 then
8584: LD_VAR 0 3
8588: PUSH
8589: LD_INT 33
8591: EQUAL
8592: IFFALSE 8602
// sRandom := true ;
8594: LD_ADDR_EXP 70
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 34 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 34
8609: EQUAL
8610: IFFALSE 8620
// sShield := true ;
8612: LD_ADDR_EXP 71
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// if p3 = 35 then
8620: LD_VAR 0 3
8624: PUSH
8625: LD_INT 35
8627: EQUAL
8628: IFFALSE 8638
// sTime := true ;
8630: LD_ADDR_EXP 72
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// if p3 = 36 then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 36
8645: EQUAL
8646: IFFALSE 8656
// sTools := true ;
8648: LD_ADDR_EXP 73
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// if p3 = 101 then
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 101
8663: EQUAL
8664: IFFALSE 8674
// sSold := true ;
8666: LD_ADDR_EXP 38
8670: PUSH
8671: LD_INT 1
8673: ST_TO_ADDR
// if p3 = 102 then
8674: LD_VAR 0 3
8678: PUSH
8679: LD_INT 102
8681: EQUAL
8682: IFFALSE 8692
// sDiff := true ;
8684: LD_ADDR_EXP 39
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// if p3 = 103 then
8692: LD_VAR 0 3
8696: PUSH
8697: LD_INT 103
8699: EQUAL
8700: IFFALSE 8710
// sFog := true ;
8702: LD_ADDR_EXP 42
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// if p3 = 104 then
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 104
8717: EQUAL
8718: IFFALSE 8728
// sReset := true ;
8720: LD_ADDR_EXP 43
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// if p3 = 105 then
8728: LD_VAR 0 3
8732: PUSH
8733: LD_INT 105
8735: EQUAL
8736: IFFALSE 8746
// sSun := true ;
8738: LD_ADDR_EXP 44
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// if p3 = 106 then
8746: LD_VAR 0 3
8750: PUSH
8751: LD_INT 106
8753: EQUAL
8754: IFFALSE 8764
// sTiger := true ;
8756: LD_ADDR_EXP 40
8760: PUSH
8761: LD_INT 1
8763: ST_TO_ADDR
// if p3 = 107 then
8764: LD_VAR 0 3
8768: PUSH
8769: LD_INT 107
8771: EQUAL
8772: IFFALSE 8782
// sBomb := true ;
8774: LD_ADDR_EXP 41
8778: PUSH
8779: LD_INT 1
8781: ST_TO_ADDR
// if p3 = 108 then
8782: LD_VAR 0 3
8786: PUSH
8787: LD_INT 108
8789: EQUAL
8790: IFFALSE 8800
// sWound := true ;
8792: LD_ADDR_EXP 49
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// if p3 = 109 then
8800: LD_VAR 0 3
8804: PUSH
8805: LD_INT 109
8807: EQUAL
8808: IFFALSE 8818
// sBetray := true ;
8810: LD_ADDR_EXP 53
8814: PUSH
8815: LD_INT 1
8817: ST_TO_ADDR
// if p3 = 110 then
8818: LD_VAR 0 3
8822: PUSH
8823: LD_INT 110
8825: EQUAL
8826: IFFALSE 8836
// sContamin := true ;
8828: LD_ADDR_EXP 54
8832: PUSH
8833: LD_INT 1
8835: ST_TO_ADDR
// if p3 = 111 then
8836: LD_VAR 0 3
8840: PUSH
8841: LD_INT 111
8843: EQUAL
8844: IFFALSE 8854
// sOil := true ;
8846: LD_ADDR_EXP 56
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// if p3 = 112 then
8854: LD_VAR 0 3
8858: PUSH
8859: LD_INT 112
8861: EQUAL
8862: IFFALSE 8872
// sStu := true ;
8864: LD_ADDR_EXP 60
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// if p3 = 113 then
8872: LD_VAR 0 3
8876: PUSH
8877: LD_INT 113
8879: EQUAL
8880: IFFALSE 8890
// sBazooka := true ;
8882: LD_ADDR_EXP 63
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// if p3 = 114 then
8890: LD_VAR 0 3
8894: PUSH
8895: LD_INT 114
8897: EQUAL
8898: IFFALSE 8908
// sMortar := true ;
8900: LD_ADDR_EXP 64
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// if p3 = 115 then
8908: LD_VAR 0 3
8912: PUSH
8913: LD_INT 115
8915: EQUAL
8916: IFFALSE 8926
// sRanger := true ;
8918: LD_ADDR_EXP 74
8922: PUSH
8923: LD_INT 1
8925: ST_TO_ADDR
// end ; end ;
8926: PPOPN 6
8928: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
8929: LD_EXP 21
8933: PUSH
8934: LD_EXP 26
8938: AND
8939: IFFALSE 9063
8941: GO 8943
8943: DISABLE
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
// begin enable ;
8948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
8949: LD_ADDR_VAR 0 2
8953: PUSH
8954: LD_INT 22
8956: PUSH
8957: LD_OWVAR 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 2
8968: PUSH
8969: LD_INT 34
8971: PUSH
8972: LD_INT 7
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: LD_INT 34
8981: PUSH
8982: LD_INT 45
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 34
8991: PUSH
8992: LD_INT 28
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 34
9001: PUSH
9002: LD_INT 47
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PPUSH
9020: CALL_OW 69
9024: ST_TO_ADDR
// if not tmp then
9025: LD_VAR 0 2
9029: NOT
9030: IFFALSE 9034
// exit ;
9032: GO 9063
// for i in tmp do
9034: LD_ADDR_VAR 0 1
9038: PUSH
9039: LD_VAR 0 2
9043: PUSH
9044: FOR_IN
9045: IFFALSE 9061
// begin SetLives ( i , 0 ) ;
9047: LD_VAR 0 1
9051: PPUSH
9052: LD_INT 0
9054: PPUSH
9055: CALL_OW 234
// end ;
9059: GO 9044
9061: POP
9062: POP
// end ;
9063: PPOPN 2
9065: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9066: LD_EXP 21
9070: PUSH
9071: LD_EXP 27
9075: AND
9076: IFFALSE 9160
9078: GO 9080
9080: DISABLE
9081: LD_INT 0
9083: PPUSH
9084: PPUSH
// begin enable ;
9085: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9086: LD_ADDR_VAR 0 2
9090: PUSH
9091: LD_INT 22
9093: PUSH
9094: LD_OWVAR 2
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: PUSH
9103: LD_INT 32
9105: PUSH
9106: LD_INT 3
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: PPUSH
9117: CALL_OW 69
9121: ST_TO_ADDR
// if not tmp then
9122: LD_VAR 0 2
9126: NOT
9127: IFFALSE 9131
// exit ;
9129: GO 9160
// for i in tmp do
9131: LD_ADDR_VAR 0 1
9135: PUSH
9136: LD_VAR 0 2
9140: PUSH
9141: FOR_IN
9142: IFFALSE 9158
// begin SetLives ( i , 0 ) ;
9144: LD_VAR 0 1
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 234
// end ;
9156: GO 9141
9158: POP
9159: POP
// end ;
9160: PPOPN 2
9162: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9163: LD_EXP 21
9167: PUSH
9168: LD_EXP 24
9172: AND
9173: IFFALSE 9266
9175: GO 9177
9177: DISABLE
9178: LD_INT 0
9180: PPUSH
// begin enable ;
9181: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9182: LD_ADDR_VAR 0 1
9186: PUSH
9187: LD_INT 22
9189: PUSH
9190: LD_OWVAR 2
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: PUSH
9199: LD_INT 2
9201: PUSH
9202: LD_INT 25
9204: PUSH
9205: LD_INT 5
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: LD_INT 25
9214: PUSH
9215: LD_INT 9
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 25
9224: PUSH
9225: LD_INT 8
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 69
9246: PUSH
9247: FOR_IN
9248: IFFALSE 9264
// begin SetClass ( i , 1 ) ;
9250: LD_VAR 0 1
9254: PPUSH
9255: LD_INT 1
9257: PPUSH
9258: CALL_OW 336
// end ;
9262: GO 9247
9264: POP
9265: POP
// end ;
9266: PPOPN 1
9268: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9269: LD_EXP 21
9273: PUSH
9274: LD_EXP 25
9278: AND
9279: PUSH
9280: LD_OWVAR 65
9284: PUSH
9285: LD_INT 7
9287: LESS
9288: AND
9289: IFFALSE 9303
9291: GO 9293
9293: DISABLE
// begin enable ;
9294: ENABLE
// game_speed := 7 ;
9295: LD_ADDR_OWVAR 65
9299: PUSH
9300: LD_INT 7
9302: ST_TO_ADDR
// end ;
9303: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9304: LD_EXP 21
9308: PUSH
9309: LD_EXP 28
9313: AND
9314: IFFALSE 9516
9316: GO 9318
9318: DISABLE
9319: LD_INT 0
9321: PPUSH
9322: PPUSH
9323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
9324: LD_ADDR_VAR 0 3
9328: PUSH
9329: LD_INT 81
9331: PUSH
9332: LD_OWVAR 2
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: PUSH
9341: LD_INT 21
9343: PUSH
9344: LD_INT 1
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PPUSH
9355: CALL_OW 69
9359: ST_TO_ADDR
// if not tmp then
9360: LD_VAR 0 3
9364: NOT
9365: IFFALSE 9369
// exit ;
9367: GO 9516
// if tmp > 5 then
9369: LD_VAR 0 3
9373: PUSH
9374: LD_INT 5
9376: GREATER
9377: IFFALSE 9389
// k := 5 else
9379: LD_ADDR_VAR 0 2
9383: PUSH
9384: LD_INT 5
9386: ST_TO_ADDR
9387: GO 9399
// k := tmp ;
9389: LD_ADDR_VAR 0 2
9393: PUSH
9394: LD_VAR 0 3
9398: ST_TO_ADDR
// for i := 1 to k do
9399: LD_ADDR_VAR 0 1
9403: PUSH
9404: DOUBLE
9405: LD_INT 1
9407: DEC
9408: ST_TO_ADDR
9409: LD_VAR 0 2
9413: PUSH
9414: FOR_TO
9415: IFFALSE 9514
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
9417: LD_VAR 0 3
9421: PUSH
9422: LD_VAR 0 1
9426: ARRAY
9427: PPUSH
9428: LD_VAR 0 1
9432: PUSH
9433: LD_INT 4
9435: MOD
9436: PUSH
9437: LD_INT 1
9439: PLUS
9440: PPUSH
9441: CALL_OW 259
9445: PUSH
9446: LD_INT 10
9448: LESS
9449: IFFALSE 9512
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
9451: LD_VAR 0 3
9455: PUSH
9456: LD_VAR 0 1
9460: ARRAY
9461: PPUSH
9462: LD_VAR 0 1
9466: PUSH
9467: LD_INT 4
9469: MOD
9470: PUSH
9471: LD_INT 1
9473: PLUS
9474: PPUSH
9475: LD_VAR 0 3
9479: PUSH
9480: LD_VAR 0 1
9484: ARRAY
9485: PPUSH
9486: LD_VAR 0 1
9490: PUSH
9491: LD_INT 4
9493: MOD
9494: PUSH
9495: LD_INT 1
9497: PLUS
9498: PPUSH
9499: CALL_OW 259
9503: PUSH
9504: LD_INT 1
9506: PLUS
9507: PPUSH
9508: CALL_OW 237
9512: GO 9414
9514: POP
9515: POP
// end ;
9516: PPOPN 3
9518: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
9519: LD_EXP 21
9523: PUSH
9524: LD_EXP 29
9528: AND
9529: IFFALSE 9549
9531: GO 9533
9533: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
9534: LD_INT 4
9536: PPUSH
9537: LD_OWVAR 2
9541: PPUSH
9542: LD_INT 0
9544: PPUSH
9545: CALL_OW 324
9549: END
// every 0 0$1 trigger StreamModeActive and sShovel do
9550: LD_EXP 21
9554: PUSH
9555: LD_EXP 58
9559: AND
9560: IFFALSE 9580
9562: GO 9564
9564: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
9565: LD_INT 19
9567: PPUSH
9568: LD_OWVAR 2
9572: PPUSH
9573: LD_INT 0
9575: PPUSH
9576: CALL_OW 324
9580: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
9581: LD_EXP 21
9585: PUSH
9586: LD_EXP 30
9590: AND
9591: IFFALSE 9693
9593: GO 9595
9595: DISABLE
9596: LD_INT 0
9598: PPUSH
9599: PPUSH
// begin enable ;
9600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
9601: LD_ADDR_VAR 0 2
9605: PUSH
9606: LD_INT 22
9608: PUSH
9609: LD_OWVAR 2
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 2
9620: PUSH
9621: LD_INT 34
9623: PUSH
9624: LD_INT 11
9626: PUSH
9627: EMPTY
9628: LIST
9629: LIST
9630: PUSH
9631: LD_INT 34
9633: PUSH
9634: LD_INT 30
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: PPUSH
9650: CALL_OW 69
9654: ST_TO_ADDR
// if not tmp then
9655: LD_VAR 0 2
9659: NOT
9660: IFFALSE 9664
// exit ;
9662: GO 9693
// for i in tmp do
9664: LD_ADDR_VAR 0 1
9668: PUSH
9669: LD_VAR 0 2
9673: PUSH
9674: FOR_IN
9675: IFFALSE 9691
// begin SetLives ( i , 0 ) ;
9677: LD_VAR 0 1
9681: PPUSH
9682: LD_INT 0
9684: PPUSH
9685: CALL_OW 234
// end ;
9689: GO 9674
9691: POP
9692: POP
// end ;
9693: PPOPN 2
9695: END
// every 0 0$1 trigger StreamModeActive and sBunker do
9696: LD_EXP 21
9700: PUSH
9701: LD_EXP 31
9705: AND
9706: IFFALSE 9726
9708: GO 9710
9710: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
9711: LD_INT 32
9713: PPUSH
9714: LD_OWVAR 2
9718: PPUSH
9719: LD_INT 0
9721: PPUSH
9722: CALL_OW 324
9726: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
9727: LD_EXP 21
9731: PUSH
9732: LD_EXP 32
9736: AND
9737: IFFALSE 9918
9739: GO 9741
9741: DISABLE
9742: LD_INT 0
9744: PPUSH
9745: PPUSH
9746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
9747: LD_ADDR_VAR 0 2
9751: PUSH
9752: LD_INT 22
9754: PUSH
9755: LD_OWVAR 2
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 33
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: PPUSH
9778: CALL_OW 69
9782: ST_TO_ADDR
// if not tmp then
9783: LD_VAR 0 2
9787: NOT
9788: IFFALSE 9792
// exit ;
9790: GO 9918
// side := 0 ;
9792: LD_ADDR_VAR 0 3
9796: PUSH
9797: LD_INT 0
9799: ST_TO_ADDR
// for i := 1 to 8 do
9800: LD_ADDR_VAR 0 1
9804: PUSH
9805: DOUBLE
9806: LD_INT 1
9808: DEC
9809: ST_TO_ADDR
9810: LD_INT 8
9812: PUSH
9813: FOR_TO
9814: IFFALSE 9862
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
9816: LD_OWVAR 2
9820: PUSH
9821: LD_VAR 0 1
9825: NONEQUAL
9826: PUSH
9827: LD_OWVAR 2
9831: PPUSH
9832: LD_VAR 0 1
9836: PPUSH
9837: CALL_OW 81
9841: PUSH
9842: LD_INT 2
9844: EQUAL
9845: AND
9846: IFFALSE 9860
// begin side := i ;
9848: LD_ADDR_VAR 0 3
9852: PUSH
9853: LD_VAR 0 1
9857: ST_TO_ADDR
// break ;
9858: GO 9862
// end ;
9860: GO 9813
9862: POP
9863: POP
// if not side then
9864: LD_VAR 0 3
9868: NOT
9869: IFFALSE 9873
// exit ;
9871: GO 9918
// for i := 1 to tmp do
9873: LD_ADDR_VAR 0 1
9877: PUSH
9878: DOUBLE
9879: LD_INT 1
9881: DEC
9882: ST_TO_ADDR
9883: LD_VAR 0 2
9887: PUSH
9888: FOR_TO
9889: IFFALSE 9916
// if Prob ( 60 ) then
9891: LD_INT 60
9893: PPUSH
9894: CALL_OW 13
9898: IFFALSE 9914
// SetSide ( i , side ) ;
9900: LD_VAR 0 1
9904: PPUSH
9905: LD_VAR 0 3
9909: PPUSH
9910: CALL_OW 235
9914: GO 9888
9916: POP
9917: POP
// end ;
9918: PPOPN 3
9920: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
9921: LD_EXP 21
9925: PUSH
9926: LD_EXP 34
9930: AND
9931: IFFALSE 10050
9933: GO 9935
9935: DISABLE
9936: LD_INT 0
9938: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_INT 22
9946: PUSH
9947: LD_OWVAR 2
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 21
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 3
9968: PUSH
9969: LD_INT 23
9971: PUSH
9972: LD_INT 0
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: PPUSH
9988: CALL_OW 69
9992: PUSH
9993: FOR_IN
9994: IFFALSE 10048
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
9996: LD_VAR 0 1
10000: PPUSH
10001: CALL_OW 257
10005: PUSH
10006: LD_INT 1
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 4
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: IN
10024: IFFALSE 10046
// SetClass ( un , rand ( 1 , 4 ) ) ;
10026: LD_VAR 0 1
10030: PPUSH
10031: LD_INT 1
10033: PPUSH
10034: LD_INT 4
10036: PPUSH
10037: CALL_OW 12
10041: PPUSH
10042: CALL_OW 336
10046: GO 9993
10048: POP
10049: POP
// end ;
10050: PPOPN 1
10052: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10053: LD_EXP 21
10057: PUSH
10058: LD_EXP 33
10062: AND
10063: IFFALSE 10142
10065: GO 10067
10067: DISABLE
10068: LD_INT 0
10070: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10071: LD_ADDR_VAR 0 1
10075: PUSH
10076: LD_INT 22
10078: PUSH
10079: LD_OWVAR 2
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 21
10090: PUSH
10091: LD_INT 3
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: ST_TO_ADDR
// if not tmp then
10107: LD_VAR 0 1
10111: NOT
10112: IFFALSE 10116
// exit ;
10114: GO 10142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10116: LD_VAR 0 1
10120: PUSH
10121: LD_INT 1
10123: PPUSH
10124: LD_VAR 0 1
10128: PPUSH
10129: CALL_OW 12
10133: ARRAY
10134: PPUSH
10135: LD_INT 100
10137: PPUSH
10138: CALL_OW 234
// end ;
10142: PPOPN 1
10144: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10145: LD_EXP 21
10149: PUSH
10150: LD_EXP 35
10154: AND
10155: IFFALSE 10253
10157: GO 10159
10159: DISABLE
10160: LD_INT 0
10162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10163: LD_ADDR_VAR 0 1
10167: PUSH
10168: LD_INT 22
10170: PUSH
10171: LD_OWVAR 2
10175: PUSH
10176: EMPTY
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 21
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PPUSH
10194: CALL_OW 69
10198: ST_TO_ADDR
// if not tmp then
10199: LD_VAR 0 1
10203: NOT
10204: IFFALSE 10208
// exit ;
10206: GO 10253
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10208: LD_VAR 0 1
10212: PUSH
10213: LD_INT 1
10215: PPUSH
10216: LD_VAR 0 1
10220: PPUSH
10221: CALL_OW 12
10225: ARRAY
10226: PPUSH
10227: LD_INT 1
10229: PPUSH
10230: LD_INT 4
10232: PPUSH
10233: CALL_OW 12
10237: PPUSH
10238: LD_INT 3000
10240: PPUSH
10241: LD_INT 9000
10243: PPUSH
10244: CALL_OW 12
10248: PPUSH
10249: CALL_OW 492
// end ;
10253: PPOPN 1
10255: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10256: LD_EXP 21
10260: PUSH
10261: LD_EXP 36
10265: AND
10266: IFFALSE 10286
10268: GO 10270
10270: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10271: LD_INT 1
10273: PPUSH
10274: LD_OWVAR 2
10278: PPUSH
10279: LD_INT 0
10281: PPUSH
10282: CALL_OW 324
10286: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10287: LD_EXP 21
10291: PUSH
10292: LD_EXP 37
10296: AND
10297: IFFALSE 10380
10299: GO 10301
10301: DISABLE
10302: LD_INT 0
10304: PPUSH
10305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10306: LD_ADDR_VAR 0 2
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_OWVAR 2
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 21
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PPUSH
10337: CALL_OW 69
10341: ST_TO_ADDR
// if not tmp then
10342: LD_VAR 0 2
10346: NOT
10347: IFFALSE 10351
// exit ;
10349: GO 10380
// for i in tmp do
10351: LD_ADDR_VAR 0 1
10355: PUSH
10356: LD_VAR 0 2
10360: PUSH
10361: FOR_IN
10362: IFFALSE 10378
// SetBLevel ( i , 10 ) ;
10364: LD_VAR 0 1
10368: PPUSH
10369: LD_INT 10
10371: PPUSH
10372: CALL_OW 241
10376: GO 10361
10378: POP
10379: POP
// end ;
10380: PPOPN 2
10382: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
10383: LD_EXP 21
10387: PUSH
10388: LD_EXP 38
10392: AND
10393: IFFALSE 10504
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
10402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
10403: LD_ADDR_VAR 0 3
10407: PUSH
10408: LD_INT 22
10410: PUSH
10411: LD_OWVAR 2
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PUSH
10420: LD_INT 25
10422: PUSH
10423: LD_INT 1
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PPUSH
10434: CALL_OW 69
10438: ST_TO_ADDR
// if not tmp then
10439: LD_VAR 0 3
10443: NOT
10444: IFFALSE 10448
// exit ;
10446: GO 10504
// un := tmp [ rand ( 1 , tmp ) ] ;
10448: LD_ADDR_VAR 0 2
10452: PUSH
10453: LD_VAR 0 3
10457: PUSH
10458: LD_INT 1
10460: PPUSH
10461: LD_VAR 0 3
10465: PPUSH
10466: CALL_OW 12
10470: ARRAY
10471: ST_TO_ADDR
// if Crawls ( un ) then
10472: LD_VAR 0 2
10476: PPUSH
10477: CALL_OW 318
10481: IFFALSE 10492
// ComWalk ( un ) ;
10483: LD_VAR 0 2
10487: PPUSH
10488: CALL_OW 138
// SetClass ( un , class_sniper ) ;
10492: LD_VAR 0 2
10496: PPUSH
10497: LD_INT 5
10499: PPUSH
10500: CALL_OW 336
// end ;
10504: PPOPN 3
10506: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
10507: LD_EXP 21
10511: PUSH
10512: LD_EXP 39
10516: AND
10517: PUSH
10518: LD_OWVAR 67
10522: PUSH
10523: LD_INT 3
10525: LESS
10526: AND
10527: IFFALSE 10546
10529: GO 10531
10531: DISABLE
// Difficulty := Difficulty + 1 ;
10532: LD_ADDR_OWVAR 67
10536: PUSH
10537: LD_OWVAR 67
10541: PUSH
10542: LD_INT 1
10544: PLUS
10545: ST_TO_ADDR
10546: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
10547: LD_EXP 21
10551: PUSH
10552: LD_EXP 40
10556: AND
10557: IFFALSE 10660
10559: GO 10561
10561: DISABLE
10562: LD_INT 0
10564: PPUSH
// begin for i := 1 to 5 do
10565: LD_ADDR_VAR 0 1
10569: PUSH
10570: DOUBLE
10571: LD_INT 1
10573: DEC
10574: ST_TO_ADDR
10575: LD_INT 5
10577: PUSH
10578: FOR_TO
10579: IFFALSE 10658
// begin uc_nation := nation_nature ;
10581: LD_ADDR_OWVAR 21
10585: PUSH
10586: LD_INT 0
10588: ST_TO_ADDR
// uc_side := 0 ;
10589: LD_ADDR_OWVAR 20
10593: PUSH
10594: LD_INT 0
10596: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
10597: LD_ADDR_OWVAR 29
10601: PUSH
10602: LD_INT 12
10604: PUSH
10605: LD_INT 12
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: ST_TO_ADDR
// hc_agressivity := 20 ;
10612: LD_ADDR_OWVAR 35
10616: PUSH
10617: LD_INT 20
10619: ST_TO_ADDR
// hc_class := class_tiger ;
10620: LD_ADDR_OWVAR 28
10624: PUSH
10625: LD_INT 14
10627: ST_TO_ADDR
// hc_gallery :=  ;
10628: LD_ADDR_OWVAR 33
10632: PUSH
10633: LD_STRING 
10635: ST_TO_ADDR
// hc_name :=  ;
10636: LD_ADDR_OWVAR 26
10640: PUSH
10641: LD_STRING 
10643: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
10644: CALL_OW 44
10648: PPUSH
10649: LD_INT 0
10651: PPUSH
10652: CALL_OW 51
// end ;
10656: GO 10578
10658: POP
10659: POP
// end ;
10660: PPOPN 1
10662: END
// every 0 0$1 trigger StreamModeActive and sBomb do
10663: LD_EXP 21
10667: PUSH
10668: LD_EXP 41
10672: AND
10673: IFFALSE 10682
10675: GO 10677
10677: DISABLE
// StreamSibBomb ;
10678: CALL 10683 0 0
10682: END
// export function StreamSibBomb ; var i , x , y ; begin
10683: LD_INT 0
10685: PPUSH
10686: PPUSH
10687: PPUSH
10688: PPUSH
// result := false ;
10689: LD_ADDR_VAR 0 1
10693: PUSH
10694: LD_INT 0
10696: ST_TO_ADDR
// for i := 1 to 16 do
10697: LD_ADDR_VAR 0 2
10701: PUSH
10702: DOUBLE
10703: LD_INT 1
10705: DEC
10706: ST_TO_ADDR
10707: LD_INT 16
10709: PUSH
10710: FOR_TO
10711: IFFALSE 10910
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10713: LD_ADDR_VAR 0 3
10717: PUSH
10718: LD_INT 10
10720: PUSH
10721: LD_INT 20
10723: PUSH
10724: LD_INT 30
10726: PUSH
10727: LD_INT 40
10729: PUSH
10730: LD_INT 50
10732: PUSH
10733: LD_INT 60
10735: PUSH
10736: LD_INT 70
10738: PUSH
10739: LD_INT 80
10741: PUSH
10742: LD_INT 90
10744: PUSH
10745: LD_INT 100
10747: PUSH
10748: LD_INT 110
10750: PUSH
10751: LD_INT 120
10753: PUSH
10754: LD_INT 130
10756: PUSH
10757: LD_INT 140
10759: PUSH
10760: LD_INT 150
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 1
10782: PPUSH
10783: LD_INT 15
10785: PPUSH
10786: CALL_OW 12
10790: ARRAY
10791: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
10792: LD_ADDR_VAR 0 4
10796: PUSH
10797: LD_INT 10
10799: PUSH
10800: LD_INT 20
10802: PUSH
10803: LD_INT 30
10805: PUSH
10806: LD_INT 40
10808: PUSH
10809: LD_INT 50
10811: PUSH
10812: LD_INT 60
10814: PUSH
10815: LD_INT 70
10817: PUSH
10818: LD_INT 80
10820: PUSH
10821: LD_INT 90
10823: PUSH
10824: LD_INT 100
10826: PUSH
10827: LD_INT 110
10829: PUSH
10830: LD_INT 120
10832: PUSH
10833: LD_INT 130
10835: PUSH
10836: LD_INT 140
10838: PUSH
10839: LD_INT 150
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 1
10861: PPUSH
10862: LD_INT 15
10864: PPUSH
10865: CALL_OW 12
10869: ARRAY
10870: ST_TO_ADDR
// if ValidHex ( x , y ) then
10871: LD_VAR 0 3
10875: PPUSH
10876: LD_VAR 0 4
10880: PPUSH
10881: CALL_OW 488
10885: IFFALSE 10908
// begin result := [ x , y ] ;
10887: LD_ADDR_VAR 0 1
10891: PUSH
10892: LD_VAR 0 3
10896: PUSH
10897: LD_VAR 0 4
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: ST_TO_ADDR
// break ;
10906: GO 10910
// end ; end ;
10908: GO 10710
10910: POP
10911: POP
// if result then
10912: LD_VAR 0 1
10916: IFFALSE 10976
// begin ToLua ( playSibBomb() ) ;
10918: LD_STRING playSibBomb()
10920: PPUSH
10921: CALL_OW 559
// wait ( 0 0$14 ) ;
10925: LD_INT 490
10927: PPUSH
10928: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
10932: LD_VAR 0 1
10936: PUSH
10937: LD_INT 1
10939: ARRAY
10940: PPUSH
10941: LD_VAR 0 1
10945: PUSH
10946: LD_INT 2
10948: ARRAY
10949: PPUSH
10950: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
10954: LD_VAR 0 1
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PPUSH
10963: LD_VAR 0 1
10967: PUSH
10968: LD_INT 2
10970: ARRAY
10971: PPUSH
10972: CALL_OW 429
// end ; end ;
10976: LD_VAR 0 1
10980: RET
// every 0 0$1 trigger StreamModeActive and sReset do
10981: LD_EXP 21
10985: PUSH
10986: LD_EXP 43
10990: AND
10991: IFFALSE 11003
10993: GO 10995
10995: DISABLE
// YouLost (  ) ;
10996: LD_STRING 
10998: PPUSH
10999: CALL_OW 104
11003: END
// every 0 0$1 trigger StreamModeActive and sFog do
11004: LD_EXP 21
11008: PUSH
11009: LD_EXP 42
11013: AND
11014: IFFALSE 11028
11016: GO 11018
11018: DISABLE
// FogOff ( your_side ) ;
11019: LD_OWVAR 2
11023: PPUSH
11024: CALL_OW 344
11028: END
// every 0 0$1 trigger StreamModeActive and sSun do
11029: LD_EXP 21
11033: PUSH
11034: LD_EXP 44
11038: AND
11039: IFFALSE 11067
11041: GO 11043
11043: DISABLE
// begin solar_recharge_percent := 0 ;
11044: LD_ADDR_OWVAR 79
11048: PUSH
11049: LD_INT 0
11051: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11052: LD_INT 10500
11054: PPUSH
11055: CALL_OW 67
// solar_recharge_percent := 100 ;
11059: LD_ADDR_OWVAR 79
11063: PUSH
11064: LD_INT 100
11066: ST_TO_ADDR
// end ;
11067: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11068: LD_EXP 21
11072: PUSH
11073: LD_EXP 45
11077: AND
11078: IFFALSE 11317
11080: GO 11082
11082: DISABLE
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
11087: PPUSH
// begin tmp := [ ] ;
11088: LD_ADDR_VAR 0 3
11092: PUSH
11093: EMPTY
11094: ST_TO_ADDR
// for i := 1 to 6 do
11095: LD_ADDR_VAR 0 1
11099: PUSH
11100: DOUBLE
11101: LD_INT 1
11103: DEC
11104: ST_TO_ADDR
11105: LD_INT 6
11107: PUSH
11108: FOR_TO
11109: IFFALSE 11214
// begin uc_nation := nation_nature ;
11111: LD_ADDR_OWVAR 21
11115: PUSH
11116: LD_INT 0
11118: ST_TO_ADDR
// uc_side := 0 ;
11119: LD_ADDR_OWVAR 20
11123: PUSH
11124: LD_INT 0
11126: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11127: LD_ADDR_OWVAR 29
11131: PUSH
11132: LD_INT 12
11134: PUSH
11135: LD_INT 12
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: ST_TO_ADDR
// hc_agressivity := 20 ;
11142: LD_ADDR_OWVAR 35
11146: PUSH
11147: LD_INT 20
11149: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11150: LD_ADDR_OWVAR 28
11154: PUSH
11155: LD_INT 17
11157: ST_TO_ADDR
// hc_gallery :=  ;
11158: LD_ADDR_OWVAR 33
11162: PUSH
11163: LD_STRING 
11165: ST_TO_ADDR
// hc_name :=  ;
11166: LD_ADDR_OWVAR 26
11170: PUSH
11171: LD_STRING 
11173: ST_TO_ADDR
// un := CreateHuman ;
11174: LD_ADDR_VAR 0 2
11178: PUSH
11179: CALL_OW 44
11183: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11184: LD_VAR 0 2
11188: PPUSH
11189: LD_INT 1
11191: PPUSH
11192: CALL_OW 51
// tmp := tmp ^ un ;
11196: LD_ADDR_VAR 0 3
11200: PUSH
11201: LD_VAR 0 3
11205: PUSH
11206: LD_VAR 0 2
11210: ADD
11211: ST_TO_ADDR
// end ;
11212: GO 11108
11214: POP
11215: POP
// repeat wait ( 0 0$1 ) ;
11216: LD_INT 35
11218: PPUSH
11219: CALL_OW 67
// for un in tmp do
11223: LD_ADDR_VAR 0 2
11227: PUSH
11228: LD_VAR 0 3
11232: PUSH
11233: FOR_IN
11234: IFFALSE 11308
// begin if IsDead ( un ) then
11236: LD_VAR 0 2
11240: PPUSH
11241: CALL_OW 301
11245: IFFALSE 11265
// begin tmp := tmp diff un ;
11247: LD_ADDR_VAR 0 3
11251: PUSH
11252: LD_VAR 0 3
11256: PUSH
11257: LD_VAR 0 2
11261: DIFF
11262: ST_TO_ADDR
// continue ;
11263: GO 11233
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11265: LD_VAR 0 2
11269: PPUSH
11270: LD_INT 3
11272: PUSH
11273: LD_INT 22
11275: PUSH
11276: LD_INT 0
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: EMPTY
11284: LIST
11285: LIST
11286: PPUSH
11287: CALL_OW 69
11291: PPUSH
11292: LD_VAR 0 2
11296: PPUSH
11297: CALL_OW 74
11301: PPUSH
11302: CALL_OW 115
// end ;
11306: GO 11233
11308: POP
11309: POP
// until not tmp ;
11310: LD_VAR 0 3
11314: NOT
11315: IFFALSE 11216
// end ;
11317: PPOPN 3
11319: END
// every 0 0$1 trigger StreamModeActive and sTroll do
11320: LD_EXP 21
11324: PUSH
11325: LD_EXP 46
11329: AND
11330: IFFALSE 11384
11332: GO 11334
11334: DISABLE
// begin ToLua ( displayTroll(); ) ;
11335: LD_STRING displayTroll();
11337: PPUSH
11338: CALL_OW 559
// wait ( 3 3$00 ) ;
11342: LD_INT 6300
11344: PPUSH
11345: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11349: LD_STRING hideTroll();
11351: PPUSH
11352: CALL_OW 559
// wait ( 1 1$00 ) ;
11356: LD_INT 2100
11358: PPUSH
11359: CALL_OW 67
// ToLua ( displayTroll(); ) ;
11363: LD_STRING displayTroll();
11365: PPUSH
11366: CALL_OW 559
// wait ( 1 1$00 ) ;
11370: LD_INT 2100
11372: PPUSH
11373: CALL_OW 67
// ToLua ( hideTroll(); ) ;
11377: LD_STRING hideTroll();
11379: PPUSH
11380: CALL_OW 559
// end ;
11384: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
11385: LD_EXP 21
11389: PUSH
11390: LD_EXP 47
11394: AND
11395: IFFALSE 11458
11397: GO 11399
11399: DISABLE
11400: LD_INT 0
11402: PPUSH
// begin p := 0 ;
11403: LD_ADDR_VAR 0 1
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// repeat game_speed := 1 ;
11411: LD_ADDR_OWVAR 65
11415: PUSH
11416: LD_INT 1
11418: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11419: LD_INT 35
11421: PPUSH
11422: CALL_OW 67
// p := p + 1 ;
11426: LD_ADDR_VAR 0 1
11430: PUSH
11431: LD_VAR 0 1
11435: PUSH
11436: LD_INT 1
11438: PLUS
11439: ST_TO_ADDR
// until p >= 60 ;
11440: LD_VAR 0 1
11444: PUSH
11445: LD_INT 60
11447: GREATEREQUAL
11448: IFFALSE 11411
// game_speed := 4 ;
11450: LD_ADDR_OWVAR 65
11454: PUSH
11455: LD_INT 4
11457: ST_TO_ADDR
// end ;
11458: PPOPN 1
11460: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
11461: LD_EXP 21
11465: PUSH
11466: LD_EXP 48
11470: AND
11471: IFFALSE 11617
11473: GO 11475
11475: DISABLE
11476: LD_INT 0
11478: PPUSH
11479: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11480: LD_ADDR_VAR 0 1
11484: PUSH
11485: LD_INT 22
11487: PUSH
11488: LD_OWVAR 2
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 2
11499: PUSH
11500: LD_INT 30
11502: PUSH
11503: LD_INT 0
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 30
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PPUSH
11529: CALL_OW 69
11533: ST_TO_ADDR
// if not depot then
11534: LD_VAR 0 1
11538: NOT
11539: IFFALSE 11543
// exit ;
11541: GO 11617
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
11543: LD_ADDR_VAR 0 2
11547: PUSH
11548: LD_VAR 0 1
11552: PUSH
11553: LD_INT 1
11555: PPUSH
11556: LD_VAR 0 1
11560: PPUSH
11561: CALL_OW 12
11565: ARRAY
11566: PPUSH
11567: CALL_OW 274
11571: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
11572: LD_VAR 0 2
11576: PPUSH
11577: LD_INT 1
11579: PPUSH
11580: LD_INT 0
11582: PPUSH
11583: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
11587: LD_VAR 0 2
11591: PPUSH
11592: LD_INT 2
11594: PPUSH
11595: LD_INT 0
11597: PPUSH
11598: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
11602: LD_VAR 0 2
11606: PPUSH
11607: LD_INT 3
11609: PPUSH
11610: LD_INT 0
11612: PPUSH
11613: CALL_OW 277
// end ;
11617: PPOPN 2
11619: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
11620: LD_EXP 21
11624: PUSH
11625: LD_EXP 49
11629: AND
11630: IFFALSE 11727
11632: GO 11634
11634: DISABLE
11635: LD_INT 0
11637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
11638: LD_ADDR_VAR 0 1
11642: PUSH
11643: LD_INT 22
11645: PUSH
11646: LD_OWVAR 2
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 21
11657: PUSH
11658: LD_INT 1
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 3
11667: PUSH
11668: LD_INT 23
11670: PUSH
11671: LD_INT 0
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: LIST
11686: PPUSH
11687: CALL_OW 69
11691: ST_TO_ADDR
// if not tmp then
11692: LD_VAR 0 1
11696: NOT
11697: IFFALSE 11701
// exit ;
11699: GO 11727
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
11701: LD_VAR 0 1
11705: PUSH
11706: LD_INT 1
11708: PPUSH
11709: LD_VAR 0 1
11713: PPUSH
11714: CALL_OW 12
11718: ARRAY
11719: PPUSH
11720: LD_INT 200
11722: PPUSH
11723: CALL_OW 234
// end ;
11727: PPOPN 1
11729: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
11730: LD_EXP 21
11734: PUSH
11735: LD_EXP 50
11739: AND
11740: IFFALSE 11819
11742: GO 11744
11744: DISABLE
11745: LD_INT 0
11747: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
11748: LD_ADDR_VAR 0 1
11752: PUSH
11753: LD_INT 22
11755: PUSH
11756: LD_OWVAR 2
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: PUSH
11765: LD_INT 21
11767: PUSH
11768: LD_INT 2
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 69
11783: ST_TO_ADDR
// if not tmp then
11784: LD_VAR 0 1
11788: NOT
11789: IFFALSE 11793
// exit ;
11791: GO 11819
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
11793: LD_VAR 0 1
11797: PUSH
11798: LD_INT 1
11800: PPUSH
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL_OW 12
11810: ARRAY
11811: PPUSH
11812: LD_INT 60
11814: PPUSH
11815: CALL_OW 234
// end ;
11819: PPOPN 1
11821: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
11822: LD_EXP 21
11826: PUSH
11827: LD_EXP 51
11831: AND
11832: IFFALSE 11931
11834: GO 11836
11836: DISABLE
11837: LD_INT 0
11839: PPUSH
11840: PPUSH
// begin enable ;
11841: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
11842: LD_ADDR_VAR 0 1
11846: PUSH
11847: LD_INT 22
11849: PUSH
11850: LD_OWVAR 2
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 61
11861: PUSH
11862: EMPTY
11863: LIST
11864: PUSH
11865: LD_INT 33
11867: PUSH
11868: LD_INT 2
11870: PUSH
11871: EMPTY
11872: LIST
11873: LIST
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 69
11884: ST_TO_ADDR
// if not tmp then
11885: LD_VAR 0 1
11889: NOT
11890: IFFALSE 11894
// exit ;
11892: GO 11931
// for i in tmp do
11894: LD_ADDR_VAR 0 2
11898: PUSH
11899: LD_VAR 0 1
11903: PUSH
11904: FOR_IN
11905: IFFALSE 11929
// if IsControledBy ( i ) then
11907: LD_VAR 0 2
11911: PPUSH
11912: CALL_OW 312
11916: IFFALSE 11927
// ComUnlink ( i ) ;
11918: LD_VAR 0 2
11922: PPUSH
11923: CALL_OW 136
11927: GO 11904
11929: POP
11930: POP
// end ;
11931: PPOPN 2
11933: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
11934: LD_EXP 21
11938: PUSH
11939: LD_EXP 52
11943: AND
11944: IFFALSE 12084
11946: GO 11948
11948: DISABLE
11949: LD_INT 0
11951: PPUSH
11952: PPUSH
// begin ToLua ( displayPowell(); ) ;
11953: LD_STRING displayPowell();
11955: PPUSH
11956: CALL_OW 559
// uc_side := 0 ;
11960: LD_ADDR_OWVAR 20
11964: PUSH
11965: LD_INT 0
11967: ST_TO_ADDR
// uc_nation := 2 ;
11968: LD_ADDR_OWVAR 21
11972: PUSH
11973: LD_INT 2
11975: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
11976: LD_ADDR_OWVAR 37
11980: PUSH
11981: LD_INT 14
11983: ST_TO_ADDR
// vc_engine := engine_siberite ;
11984: LD_ADDR_OWVAR 39
11988: PUSH
11989: LD_INT 3
11991: ST_TO_ADDR
// vc_control := control_apeman ;
11992: LD_ADDR_OWVAR 38
11996: PUSH
11997: LD_INT 5
11999: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12000: LD_ADDR_OWVAR 40
12004: PUSH
12005: LD_INT 29
12007: ST_TO_ADDR
// un := CreateVehicle ;
12008: LD_ADDR_VAR 0 2
12012: PUSH
12013: CALL_OW 45
12017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12018: LD_VAR 0 2
12022: PPUSH
12023: LD_INT 1
12025: PPUSH
12026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12030: LD_INT 35
12032: PPUSH
12033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12037: LD_VAR 0 2
12041: PPUSH
12042: LD_INT 22
12044: PUSH
12045: LD_OWVAR 2
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PPUSH
12054: CALL_OW 69
12058: PPUSH
12059: LD_VAR 0 2
12063: PPUSH
12064: CALL_OW 74
12068: PPUSH
12069: CALL_OW 115
// until IsDead ( un ) ;
12073: LD_VAR 0 2
12077: PPUSH
12078: CALL_OW 301
12082: IFFALSE 12030
// end ;
12084: PPOPN 2
12086: END
// every 0 0$1 trigger StreamModeActive and sStu do
12087: LD_EXP 21
12091: PUSH
12092: LD_EXP 60
12096: AND
12097: IFFALSE 12113
12099: GO 12101
12101: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12102: LD_STRING displayStucuk();
12104: PPUSH
12105: CALL_OW 559
// ResetFog ;
12109: CALL_OW 335
// end ;
12113: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12114: LD_EXP 21
12118: PUSH
12119: LD_EXP 53
12123: AND
12124: IFFALSE 12265
12126: GO 12128
12128: DISABLE
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12133: LD_ADDR_VAR 0 2
12137: PUSH
12138: LD_INT 22
12140: PUSH
12141: LD_OWVAR 2
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 21
12152: PUSH
12153: LD_INT 1
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PPUSH
12164: CALL_OW 69
12168: ST_TO_ADDR
// if not tmp then
12169: LD_VAR 0 2
12173: NOT
12174: IFFALSE 12178
// exit ;
12176: GO 12265
// un := tmp [ rand ( 1 , tmp ) ] ;
12178: LD_ADDR_VAR 0 1
12182: PUSH
12183: LD_VAR 0 2
12187: PUSH
12188: LD_INT 1
12190: PPUSH
12191: LD_VAR 0 2
12195: PPUSH
12196: CALL_OW 12
12200: ARRAY
12201: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12202: LD_VAR 0 1
12206: PPUSH
12207: LD_INT 0
12209: PPUSH
12210: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12214: LD_VAR 0 1
12218: PPUSH
12219: LD_OWVAR 3
12223: PUSH
12224: LD_VAR 0 1
12228: DIFF
12229: PPUSH
12230: LD_VAR 0 1
12234: PPUSH
12235: CALL_OW 74
12239: PPUSH
12240: CALL_OW 115
// wait ( 0 0$20 ) ;
12244: LD_INT 700
12246: PPUSH
12247: CALL_OW 67
// SetSide ( un , your_side ) ;
12251: LD_VAR 0 1
12255: PPUSH
12256: LD_OWVAR 2
12260: PPUSH
12261: CALL_OW 235
// end ;
12265: PPOPN 2
12267: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12268: LD_EXP 21
12272: PUSH
12273: LD_EXP 54
12277: AND
12278: IFFALSE 12384
12280: GO 12282
12282: DISABLE
12283: LD_INT 0
12285: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12286: LD_ADDR_VAR 0 1
12290: PUSH
12291: LD_INT 22
12293: PUSH
12294: LD_OWVAR 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: LD_INT 30
12308: PUSH
12309: LD_INT 0
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 30
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: PPUSH
12335: CALL_OW 69
12339: ST_TO_ADDR
// if not depot then
12340: LD_VAR 0 1
12344: NOT
12345: IFFALSE 12349
// exit ;
12347: GO 12384
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
12349: LD_VAR 0 1
12353: PUSH
12354: LD_INT 1
12356: ARRAY
12357: PPUSH
12358: CALL_OW 250
12362: PPUSH
12363: LD_VAR 0 1
12367: PUSH
12368: LD_INT 1
12370: ARRAY
12371: PPUSH
12372: CALL_OW 251
12376: PPUSH
12377: LD_INT 70
12379: PPUSH
12380: CALL_OW 495
// end ;
12384: PPOPN 1
12386: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
12387: LD_EXP 21
12391: PUSH
12392: LD_EXP 55
12396: AND
12397: IFFALSE 12608
12399: GO 12401
12401: DISABLE
12402: LD_INT 0
12404: PPUSH
12405: PPUSH
12406: PPUSH
12407: PPUSH
12408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12409: LD_ADDR_VAR 0 5
12413: PUSH
12414: LD_INT 22
12416: PUSH
12417: LD_OWVAR 2
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 21
12428: PUSH
12429: LD_INT 1
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 69
12444: ST_TO_ADDR
// if not tmp then
12445: LD_VAR 0 5
12449: NOT
12450: IFFALSE 12454
// exit ;
12452: GO 12608
// for i in tmp do
12454: LD_ADDR_VAR 0 1
12458: PUSH
12459: LD_VAR 0 5
12463: PUSH
12464: FOR_IN
12465: IFFALSE 12606
// begin d := rand ( 0 , 5 ) ;
12467: LD_ADDR_VAR 0 4
12471: PUSH
12472: LD_INT 0
12474: PPUSH
12475: LD_INT 5
12477: PPUSH
12478: CALL_OW 12
12482: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
12483: LD_ADDR_VAR 0 2
12487: PUSH
12488: LD_VAR 0 1
12492: PPUSH
12493: CALL_OW 250
12497: PPUSH
12498: LD_VAR 0 4
12502: PPUSH
12503: LD_INT 3
12505: PPUSH
12506: LD_INT 12
12508: PPUSH
12509: CALL_OW 12
12513: PPUSH
12514: CALL_OW 272
12518: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
12519: LD_ADDR_VAR 0 3
12523: PUSH
12524: LD_VAR 0 1
12528: PPUSH
12529: CALL_OW 251
12533: PPUSH
12534: LD_VAR 0 4
12538: PPUSH
12539: LD_INT 3
12541: PPUSH
12542: LD_INT 12
12544: PPUSH
12545: CALL_OW 12
12549: PPUSH
12550: CALL_OW 273
12554: ST_TO_ADDR
// if ValidHex ( x , y ) then
12555: LD_VAR 0 2
12559: PPUSH
12560: LD_VAR 0 3
12564: PPUSH
12565: CALL_OW 488
12569: IFFALSE 12604
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
12571: LD_VAR 0 1
12575: PPUSH
12576: LD_VAR 0 2
12580: PPUSH
12581: LD_VAR 0 3
12585: PPUSH
12586: LD_INT 3
12588: PPUSH
12589: LD_INT 6
12591: PPUSH
12592: CALL_OW 12
12596: PPUSH
12597: LD_INT 1
12599: PPUSH
12600: CALL_OW 483
// end ;
12604: GO 12464
12606: POP
12607: POP
// end ;
12608: PPOPN 5
12610: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
12611: LD_EXP 21
12615: PUSH
12616: LD_EXP 56
12620: AND
12621: IFFALSE 12715
12623: GO 12625
12625: DISABLE
12626: LD_INT 0
12628: PPUSH
12629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
12630: LD_ADDR_VAR 0 2
12634: PUSH
12635: LD_INT 22
12637: PUSH
12638: LD_OWVAR 2
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 32
12649: PUSH
12650: LD_INT 1
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 21
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: ST_TO_ADDR
// if not tmp then
12677: LD_VAR 0 2
12681: NOT
12682: IFFALSE 12686
// exit ;
12684: GO 12715
// for i in tmp do
12686: LD_ADDR_VAR 0 1
12690: PUSH
12691: LD_VAR 0 2
12695: PUSH
12696: FOR_IN
12697: IFFALSE 12713
// SetFuel ( i , 0 ) ;
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_INT 0
12706: PPUSH
12707: CALL_OW 240
12711: GO 12696
12713: POP
12714: POP
// end ;
12715: PPOPN 2
12717: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
12718: LD_EXP 21
12722: PUSH
12723: LD_EXP 57
12727: AND
12728: IFFALSE 12794
12730: GO 12732
12732: DISABLE
12733: LD_INT 0
12735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: LD_INT 22
12743: PUSH
12744: LD_OWVAR 2
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 30
12755: PUSH
12756: LD_INT 29
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: ST_TO_ADDR
// if not tmp then
12772: LD_VAR 0 1
12776: NOT
12777: IFFALSE 12781
// exit ;
12779: GO 12794
// DestroyUnit ( tmp [ 1 ] ) ;
12781: LD_VAR 0 1
12785: PUSH
12786: LD_INT 1
12788: ARRAY
12789: PPUSH
12790: CALL_OW 65
// end ;
12794: PPOPN 1
12796: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
12797: LD_EXP 21
12801: PUSH
12802: LD_EXP 59
12806: AND
12807: IFFALSE 12936
12809: GO 12811
12811: DISABLE
12812: LD_INT 0
12814: PPUSH
// begin uc_side := 0 ;
12815: LD_ADDR_OWVAR 20
12819: PUSH
12820: LD_INT 0
12822: ST_TO_ADDR
// uc_nation := nation_arabian ;
12823: LD_ADDR_OWVAR 21
12827: PUSH
12828: LD_INT 2
12830: ST_TO_ADDR
// hc_gallery :=  ;
12831: LD_ADDR_OWVAR 33
12835: PUSH
12836: LD_STRING 
12838: ST_TO_ADDR
// hc_name :=  ;
12839: LD_ADDR_OWVAR 26
12843: PUSH
12844: LD_STRING 
12846: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
12847: LD_INT 1
12849: PPUSH
12850: LD_INT 11
12852: PPUSH
12853: LD_INT 10
12855: PPUSH
12856: CALL_OW 380
// un := CreateHuman ;
12860: LD_ADDR_VAR 0 1
12864: PUSH
12865: CALL_OW 44
12869: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12870: LD_VAR 0 1
12874: PPUSH
12875: LD_INT 1
12877: PPUSH
12878: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12882: LD_INT 35
12884: PPUSH
12885: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12889: LD_VAR 0 1
12893: PPUSH
12894: LD_INT 22
12896: PUSH
12897: LD_OWVAR 2
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: PPUSH
12906: CALL_OW 69
12910: PPUSH
12911: LD_VAR 0 1
12915: PPUSH
12916: CALL_OW 74
12920: PPUSH
12921: CALL_OW 115
// until IsDead ( un ) ;
12925: LD_VAR 0 1
12929: PPUSH
12930: CALL_OW 301
12934: IFFALSE 12882
// end ;
12936: PPOPN 1
12938: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
12939: LD_EXP 21
12943: PUSH
12944: LD_EXP 61
12948: AND
12949: IFFALSE 12961
12951: GO 12953
12953: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
12954: LD_STRING earthquake(getX(game), 0, 32)
12956: PPUSH
12957: CALL_OW 559
12961: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
12962: LD_EXP 21
12966: PUSH
12967: LD_EXP 62
12971: AND
12972: IFFALSE 13063
12974: GO 12976
12976: DISABLE
12977: LD_INT 0
12979: PPUSH
// begin enable ;
12980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
12981: LD_ADDR_VAR 0 1
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_OWVAR 2
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 21
13000: PUSH
13001: LD_INT 2
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 33
13010: PUSH
13011: LD_INT 3
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: PPUSH
13023: CALL_OW 69
13027: ST_TO_ADDR
// if not tmp then
13028: LD_VAR 0 1
13032: NOT
13033: IFFALSE 13037
// exit ;
13035: GO 13063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13037: LD_VAR 0 1
13041: PUSH
13042: LD_INT 1
13044: PPUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 12
13054: ARRAY
13055: PPUSH
13056: LD_INT 1
13058: PPUSH
13059: CALL_OW 234
// end ;
13063: PPOPN 1
13065: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13066: LD_EXP 21
13070: PUSH
13071: LD_EXP 63
13075: AND
13076: IFFALSE 13217
13078: GO 13080
13080: DISABLE
13081: LD_INT 0
13083: PPUSH
13084: PPUSH
13085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13086: LD_ADDR_VAR 0 3
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_OWVAR 2
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 25
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 69
13121: ST_TO_ADDR
// if not tmp then
13122: LD_VAR 0 3
13126: NOT
13127: IFFALSE 13131
// exit ;
13129: GO 13217
// un := tmp [ rand ( 1 , tmp ) ] ;
13131: LD_ADDR_VAR 0 2
13135: PUSH
13136: LD_VAR 0 3
13140: PUSH
13141: LD_INT 1
13143: PPUSH
13144: LD_VAR 0 3
13148: PPUSH
13149: CALL_OW 12
13153: ARRAY
13154: ST_TO_ADDR
// if Crawls ( un ) then
13155: LD_VAR 0 2
13159: PPUSH
13160: CALL_OW 318
13164: IFFALSE 13175
// ComWalk ( un ) ;
13166: LD_VAR 0 2
13170: PPUSH
13171: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13175: LD_VAR 0 2
13179: PPUSH
13180: LD_INT 9
13182: PPUSH
13183: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13187: LD_INT 28
13189: PPUSH
13190: LD_OWVAR 2
13194: PPUSH
13195: LD_INT 2
13197: PPUSH
13198: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13202: LD_INT 29
13204: PPUSH
13205: LD_OWVAR 2
13209: PPUSH
13210: LD_INT 2
13212: PPUSH
13213: CALL_OW 322
// end ;
13217: PPOPN 3
13219: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13220: LD_EXP 21
13224: PUSH
13225: LD_EXP 64
13229: AND
13230: IFFALSE 13341
13232: GO 13234
13234: DISABLE
13235: LD_INT 0
13237: PPUSH
13238: PPUSH
13239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13240: LD_ADDR_VAR 0 3
13244: PUSH
13245: LD_INT 22
13247: PUSH
13248: LD_OWVAR 2
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: LD_INT 25
13259: PUSH
13260: LD_INT 1
13262: PUSH
13263: EMPTY
13264: LIST
13265: LIST
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 69
13275: ST_TO_ADDR
// if not tmp then
13276: LD_VAR 0 3
13280: NOT
13281: IFFALSE 13285
// exit ;
13283: GO 13341
// un := tmp [ rand ( 1 , tmp ) ] ;
13285: LD_ADDR_VAR 0 2
13289: PUSH
13290: LD_VAR 0 3
13294: PUSH
13295: LD_INT 1
13297: PPUSH
13298: LD_VAR 0 3
13302: PPUSH
13303: CALL_OW 12
13307: ARRAY
13308: ST_TO_ADDR
// if Crawls ( un ) then
13309: LD_VAR 0 2
13313: PPUSH
13314: CALL_OW 318
13318: IFFALSE 13329
// ComWalk ( un ) ;
13320: LD_VAR 0 2
13324: PPUSH
13325: CALL_OW 138
// SetClass ( un , class_mortar ) ;
13329: LD_VAR 0 2
13333: PPUSH
13334: LD_INT 8
13336: PPUSH
13337: CALL_OW 336
// end ;
13341: PPOPN 3
13343: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
13344: LD_EXP 21
13348: PUSH
13349: LD_EXP 65
13353: AND
13354: IFFALSE 13498
13356: GO 13358
13358: DISABLE
13359: LD_INT 0
13361: PPUSH
13362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
13363: LD_ADDR_VAR 0 2
13367: PUSH
13368: LD_INT 22
13370: PUSH
13371: LD_OWVAR 2
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 21
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 34
13395: PUSH
13396: LD_INT 12
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 34
13405: PUSH
13406: LD_INT 51
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 34
13415: PUSH
13416: LD_INT 32
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: PPUSH
13434: CALL_OW 69
13438: ST_TO_ADDR
// if not tmp then
13439: LD_VAR 0 2
13443: NOT
13444: IFFALSE 13448
// exit ;
13446: GO 13498
// for i in tmp do
13448: LD_ADDR_VAR 0 1
13452: PUSH
13453: LD_VAR 0 2
13457: PUSH
13458: FOR_IN
13459: IFFALSE 13496
// if GetCargo ( i , mat_artifact ) = 0 then
13461: LD_VAR 0 1
13465: PPUSH
13466: LD_INT 4
13468: PPUSH
13469: CALL_OW 289
13473: PUSH
13474: LD_INT 0
13476: EQUAL
13477: IFFALSE 13494
// SetCargo ( i , mat_siberit , 100 ) ;
13479: LD_VAR 0 1
13483: PPUSH
13484: LD_INT 3
13486: PPUSH
13487: LD_INT 100
13489: PPUSH
13490: CALL_OW 290
13494: GO 13458
13496: POP
13497: POP
// end ;
13498: PPOPN 2
13500: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
13501: LD_EXP 21
13505: PUSH
13506: LD_EXP 66
13510: AND
13511: IFFALSE 13694
13513: GO 13515
13515: DISABLE
13516: LD_INT 0
13518: PPUSH
13519: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: LD_INT 22
13527: PUSH
13528: LD_OWVAR 2
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PPUSH
13537: CALL_OW 69
13541: ST_TO_ADDR
// if not tmp then
13542: LD_VAR 0 2
13546: NOT
13547: IFFALSE 13551
// exit ;
13549: GO 13694
// for i := 1 to 2 do
13551: LD_ADDR_VAR 0 1
13555: PUSH
13556: DOUBLE
13557: LD_INT 1
13559: DEC
13560: ST_TO_ADDR
13561: LD_INT 2
13563: PUSH
13564: FOR_TO
13565: IFFALSE 13692
// begin uc_side := your_side ;
13567: LD_ADDR_OWVAR 20
13571: PUSH
13572: LD_OWVAR 2
13576: ST_TO_ADDR
// uc_nation := nation_american ;
13577: LD_ADDR_OWVAR 21
13581: PUSH
13582: LD_INT 1
13584: ST_TO_ADDR
// vc_chassis := us_morphling ;
13585: LD_ADDR_OWVAR 37
13589: PUSH
13590: LD_INT 5
13592: ST_TO_ADDR
// vc_engine := engine_siberite ;
13593: LD_ADDR_OWVAR 39
13597: PUSH
13598: LD_INT 3
13600: ST_TO_ADDR
// vc_control := control_computer ;
13601: LD_ADDR_OWVAR 38
13605: PUSH
13606: LD_INT 3
13608: ST_TO_ADDR
// vc_weapon := us_double_laser ;
13609: LD_ADDR_OWVAR 40
13613: PUSH
13614: LD_INT 10
13616: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
13617: LD_VAR 0 2
13621: PUSH
13622: LD_INT 1
13624: ARRAY
13625: PPUSH
13626: CALL_OW 310
13630: NOT
13631: IFFALSE 13678
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
13633: CALL_OW 45
13637: PPUSH
13638: LD_VAR 0 2
13642: PUSH
13643: LD_INT 1
13645: ARRAY
13646: PPUSH
13647: CALL_OW 250
13651: PPUSH
13652: LD_VAR 0 2
13656: PUSH
13657: LD_INT 1
13659: ARRAY
13660: PPUSH
13661: CALL_OW 251
13665: PPUSH
13666: LD_INT 12
13668: PPUSH
13669: LD_INT 1
13671: PPUSH
13672: CALL_OW 50
13676: GO 13690
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
13678: CALL_OW 45
13682: PPUSH
13683: LD_INT 1
13685: PPUSH
13686: CALL_OW 51
// end ;
13690: GO 13564
13692: POP
13693: POP
// end ;
13694: PPOPN 2
13696: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
13697: LD_EXP 21
13701: PUSH
13702: LD_EXP 67
13706: AND
13707: IFFALSE 13929
13709: GO 13711
13711: DISABLE
13712: LD_INT 0
13714: PPUSH
13715: PPUSH
13716: PPUSH
13717: PPUSH
13718: PPUSH
13719: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
13720: LD_ADDR_VAR 0 6
13724: PUSH
13725: LD_INT 22
13727: PUSH
13728: LD_OWVAR 2
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: LD_INT 21
13739: PUSH
13740: LD_INT 1
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 3
13749: PUSH
13750: LD_INT 23
13752: PUSH
13753: LD_INT 0
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: PPUSH
13769: CALL_OW 69
13773: ST_TO_ADDR
// if not tmp then
13774: LD_VAR 0 6
13778: NOT
13779: IFFALSE 13783
// exit ;
13781: GO 13929
// s1 := rand ( 1 , 4 ) ;
13783: LD_ADDR_VAR 0 2
13787: PUSH
13788: LD_INT 1
13790: PPUSH
13791: LD_INT 4
13793: PPUSH
13794: CALL_OW 12
13798: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
13799: LD_ADDR_VAR 0 4
13803: PUSH
13804: LD_VAR 0 6
13808: PUSH
13809: LD_INT 1
13811: ARRAY
13812: PPUSH
13813: LD_VAR 0 2
13817: PPUSH
13818: CALL_OW 259
13822: ST_TO_ADDR
// if s1 = 1 then
13823: LD_VAR 0 2
13827: PUSH
13828: LD_INT 1
13830: EQUAL
13831: IFFALSE 13851
// s2 := rand ( 2 , 4 ) else
13833: LD_ADDR_VAR 0 3
13837: PUSH
13838: LD_INT 2
13840: PPUSH
13841: LD_INT 4
13843: PPUSH
13844: CALL_OW 12
13848: ST_TO_ADDR
13849: GO 13859
// s2 := 1 ;
13851: LD_ADDR_VAR 0 3
13855: PUSH
13856: LD_INT 1
13858: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
13859: LD_ADDR_VAR 0 5
13863: PUSH
13864: LD_VAR 0 6
13868: PUSH
13869: LD_INT 1
13871: ARRAY
13872: PPUSH
13873: LD_VAR 0 3
13877: PPUSH
13878: CALL_OW 259
13882: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
13883: LD_VAR 0 6
13887: PUSH
13888: LD_INT 1
13890: ARRAY
13891: PPUSH
13892: LD_VAR 0 2
13896: PPUSH
13897: LD_VAR 0 5
13901: PPUSH
13902: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
13906: LD_VAR 0 6
13910: PUSH
13911: LD_INT 1
13913: ARRAY
13914: PPUSH
13915: LD_VAR 0 3
13919: PPUSH
13920: LD_VAR 0 4
13924: PPUSH
13925: CALL_OW 237
// end ;
13929: PPOPN 6
13931: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
13932: LD_EXP 21
13936: PUSH
13937: LD_EXP 68
13941: AND
13942: IFFALSE 14021
13944: GO 13946
13946: DISABLE
13947: LD_INT 0
13949: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: LD_INT 22
13957: PUSH
13958: LD_OWVAR 2
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 30
13969: PUSH
13970: LD_INT 3
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PPUSH
13981: CALL_OW 69
13985: ST_TO_ADDR
// if not tmp then
13986: LD_VAR 0 1
13990: NOT
13991: IFFALSE 13995
// exit ;
13993: GO 14021
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13995: LD_VAR 0 1
13999: PUSH
14000: LD_INT 1
14002: PPUSH
14003: LD_VAR 0 1
14007: PPUSH
14008: CALL_OW 12
14012: ARRAY
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: CALL_OW 234
// end ;
14021: PPOPN 1
14023: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14024: LD_EXP 21
14028: PUSH
14029: LD_EXP 69
14033: AND
14034: IFFALSE 14146
14036: GO 14038
14038: DISABLE
14039: LD_INT 0
14041: PPUSH
14042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14043: LD_ADDR_VAR 0 2
14047: PUSH
14048: LD_INT 22
14050: PUSH
14051: LD_OWVAR 2
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: LD_INT 2
14062: PUSH
14063: LD_INT 30
14065: PUSH
14066: LD_INT 27
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 30
14075: PUSH
14076: LD_INT 26
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 30
14085: PUSH
14086: LD_INT 28
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 69
14107: ST_TO_ADDR
// if not tmp then
14108: LD_VAR 0 2
14112: NOT
14113: IFFALSE 14117
// exit ;
14115: GO 14146
// for i in tmp do
14117: LD_ADDR_VAR 0 1
14121: PUSH
14122: LD_VAR 0 2
14126: PUSH
14127: FOR_IN
14128: IFFALSE 14144
// SetLives ( i , 1 ) ;
14130: LD_VAR 0 1
14134: PPUSH
14135: LD_INT 1
14137: PPUSH
14138: CALL_OW 234
14142: GO 14127
14144: POP
14145: POP
// end ;
14146: PPOPN 2
14148: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14149: LD_EXP 21
14153: PUSH
14154: LD_EXP 70
14158: AND
14159: IFFALSE 14433
14161: GO 14163
14163: DISABLE
14164: LD_INT 0
14166: PPUSH
14167: PPUSH
14168: PPUSH
// begin i := rand ( 1 , 7 ) ;
14169: LD_ADDR_VAR 0 1
14173: PUSH
14174: LD_INT 1
14176: PPUSH
14177: LD_INT 7
14179: PPUSH
14180: CALL_OW 12
14184: ST_TO_ADDR
// case i of 1 :
14185: LD_VAR 0 1
14189: PUSH
14190: LD_INT 1
14192: DOUBLE
14193: EQUAL
14194: IFTRUE 14198
14196: GO 14208
14198: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14199: LD_STRING earthquake(getX(game), 0, 32)
14201: PPUSH
14202: CALL_OW 559
14206: GO 14433
14208: LD_INT 2
14210: DOUBLE
14211: EQUAL
14212: IFTRUE 14216
14214: GO 14230
14216: POP
// begin ToLua ( displayStucuk(); ) ;
14217: LD_STRING displayStucuk();
14219: PPUSH
14220: CALL_OW 559
// ResetFog ;
14224: CALL_OW 335
// end ; 3 :
14228: GO 14433
14230: LD_INT 3
14232: DOUBLE
14233: EQUAL
14234: IFTRUE 14238
14236: GO 14342
14238: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14239: LD_ADDR_VAR 0 2
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_OWVAR 2
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 25
14258: PUSH
14259: LD_INT 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PPUSH
14270: CALL_OW 69
14274: ST_TO_ADDR
// if not tmp then
14275: LD_VAR 0 2
14279: NOT
14280: IFFALSE 14284
// exit ;
14282: GO 14433
// un := tmp [ rand ( 1 , tmp ) ] ;
14284: LD_ADDR_VAR 0 3
14288: PUSH
14289: LD_VAR 0 2
14293: PUSH
14294: LD_INT 1
14296: PPUSH
14297: LD_VAR 0 2
14301: PPUSH
14302: CALL_OW 12
14306: ARRAY
14307: ST_TO_ADDR
// if Crawls ( un ) then
14308: LD_VAR 0 3
14312: PPUSH
14313: CALL_OW 318
14317: IFFALSE 14328
// ComWalk ( un ) ;
14319: LD_VAR 0 3
14323: PPUSH
14324: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14328: LD_VAR 0 3
14332: PPUSH
14333: LD_INT 8
14335: PPUSH
14336: CALL_OW 336
// end ; 4 :
14340: GO 14433
14342: LD_INT 4
14344: DOUBLE
14345: EQUAL
14346: IFTRUE 14350
14348: GO 14411
14350: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14351: LD_ADDR_VAR 0 2
14355: PUSH
14356: LD_INT 22
14358: PUSH
14359: LD_OWVAR 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 30
14370: PUSH
14371: LD_INT 29
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: ST_TO_ADDR
// if not tmp then
14387: LD_VAR 0 2
14391: NOT
14392: IFFALSE 14396
// exit ;
14394: GO 14433
// DestroyUnit ( tmp [ 1 ] ) ;
14396: LD_VAR 0 2
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 65
// end ; 5 .. 7 :
14409: GO 14433
14411: LD_INT 5
14413: DOUBLE
14414: GREATEREQUAL
14415: IFFALSE 14423
14417: LD_INT 7
14419: DOUBLE
14420: LESSEQUAL
14421: IFTRUE 14425
14423: GO 14432
14425: POP
// StreamSibBomb ; end ;
14426: CALL 10683 0 0
14430: GO 14433
14432: POP
// end ;
14433: PPOPN 3
14435: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
14436: LD_EXP 21
14440: PUSH
14441: LD_EXP 71
14445: AND
14446: IFFALSE 14602
14448: GO 14450
14450: DISABLE
14451: LD_INT 0
14453: PPUSH
14454: PPUSH
14455: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
14456: LD_ADDR_VAR 0 2
14460: PUSH
14461: LD_INT 81
14463: PUSH
14464: LD_OWVAR 2
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 2
14475: PUSH
14476: LD_INT 21
14478: PUSH
14479: LD_INT 1
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 21
14488: PUSH
14489: LD_INT 2
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: LIST
14500: PUSH
14501: EMPTY
14502: LIST
14503: LIST
14504: PPUSH
14505: CALL_OW 69
14509: ST_TO_ADDR
// if not tmp then
14510: LD_VAR 0 2
14514: NOT
14515: IFFALSE 14519
// exit ;
14517: GO 14602
// p := 0 ;
14519: LD_ADDR_VAR 0 3
14523: PUSH
14524: LD_INT 0
14526: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14527: LD_INT 35
14529: PPUSH
14530: CALL_OW 67
// p := p + 1 ;
14534: LD_ADDR_VAR 0 3
14538: PUSH
14539: LD_VAR 0 3
14543: PUSH
14544: LD_INT 1
14546: PLUS
14547: ST_TO_ADDR
// for i in tmp do
14548: LD_ADDR_VAR 0 1
14552: PUSH
14553: LD_VAR 0 2
14557: PUSH
14558: FOR_IN
14559: IFFALSE 14590
// if GetLives ( i ) < 1000 then
14561: LD_VAR 0 1
14565: PPUSH
14566: CALL_OW 256
14570: PUSH
14571: LD_INT 1000
14573: LESS
14574: IFFALSE 14588
// SetLives ( i , 1000 ) ;
14576: LD_VAR 0 1
14580: PPUSH
14581: LD_INT 1000
14583: PPUSH
14584: CALL_OW 234
14588: GO 14558
14590: POP
14591: POP
// until p > 20 ;
14592: LD_VAR 0 3
14596: PUSH
14597: LD_INT 20
14599: GREATER
14600: IFFALSE 14527
// end ;
14602: PPOPN 3
14604: END
// every 0 0$1 trigger StreamModeActive and sTime do
14605: LD_EXP 21
14609: PUSH
14610: LD_EXP 72
14614: AND
14615: IFFALSE 14650
14617: GO 14619
14619: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
14620: LD_INT 28
14622: PPUSH
14623: LD_OWVAR 2
14627: PPUSH
14628: LD_INT 2
14630: PPUSH
14631: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
14635: LD_INT 30
14637: PPUSH
14638: LD_OWVAR 2
14642: PPUSH
14643: LD_INT 2
14645: PPUSH
14646: CALL_OW 322
// end ;
14650: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
14651: LD_EXP 21
14655: PUSH
14656: LD_EXP 73
14660: AND
14661: IFFALSE 14782
14663: GO 14665
14665: DISABLE
14666: LD_INT 0
14668: PPUSH
14669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14670: LD_ADDR_VAR 0 2
14674: PUSH
14675: LD_INT 22
14677: PUSH
14678: LD_OWVAR 2
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 21
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 23
14702: PUSH
14703: LD_INT 0
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 69
14723: ST_TO_ADDR
// if not tmp then
14724: LD_VAR 0 2
14728: NOT
14729: IFFALSE 14733
// exit ;
14731: GO 14782
// for i in tmp do
14733: LD_ADDR_VAR 0 1
14737: PUSH
14738: LD_VAR 0 2
14742: PUSH
14743: FOR_IN
14744: IFFALSE 14780
// begin if Crawls ( i ) then
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 318
14755: IFFALSE 14766
// ComWalk ( i ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 138
// SetClass ( i , 2 ) ;
14766: LD_VAR 0 1
14770: PPUSH
14771: LD_INT 2
14773: PPUSH
14774: CALL_OW 336
// end ;
14778: GO 14743
14780: POP
14781: POP
// end ;
14782: PPOPN 2
14784: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
14785: LD_EXP 21
14789: PUSH
14790: LD_EXP 74
14794: AND
14795: IFFALSE 15076
14797: GO 14799
14799: DISABLE
14800: LD_INT 0
14802: PPUSH
14803: PPUSH
14804: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
14805: LD_OWVAR 2
14809: PPUSH
14810: LD_INT 9
14812: PPUSH
14813: LD_INT 1
14815: PPUSH
14816: LD_INT 1
14818: PPUSH
14819: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
14823: LD_INT 9
14825: PPUSH
14826: LD_OWVAR 2
14830: PPUSH
14831: CALL_OW 343
// uc_side := 9 ;
14835: LD_ADDR_OWVAR 20
14839: PUSH
14840: LD_INT 9
14842: ST_TO_ADDR
// uc_nation := 2 ;
14843: LD_ADDR_OWVAR 21
14847: PUSH
14848: LD_INT 2
14850: ST_TO_ADDR
// hc_name := Dark Warrior ;
14851: LD_ADDR_OWVAR 26
14855: PUSH
14856: LD_STRING Dark Warrior
14858: ST_TO_ADDR
// hc_gallery :=  ;
14859: LD_ADDR_OWVAR 33
14863: PUSH
14864: LD_STRING 
14866: ST_TO_ADDR
// hc_noskilllimit := true ;
14867: LD_ADDR_OWVAR 76
14871: PUSH
14872: LD_INT 1
14874: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
14875: LD_ADDR_OWVAR 31
14879: PUSH
14880: LD_INT 30
14882: PUSH
14883: LD_INT 30
14885: PUSH
14886: LD_INT 30
14888: PUSH
14889: LD_INT 30
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: ST_TO_ADDR
// un := CreateHuman ;
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: CALL_OW 44
14907: ST_TO_ADDR
// hc_noskilllimit := false ;
14908: LD_ADDR_OWVAR 76
14912: PUSH
14913: LD_INT 0
14915: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14916: LD_VAR 0 3
14920: PPUSH
14921: LD_INT 1
14923: PPUSH
14924: CALL_OW 51
// p := 0 ;
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_INT 0
14935: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14936: LD_INT 35
14938: PPUSH
14939: CALL_OW 67
// p := p + 1 ;
14943: LD_ADDR_VAR 0 2
14947: PUSH
14948: LD_VAR 0 2
14952: PUSH
14953: LD_INT 1
14955: PLUS
14956: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
14957: LD_VAR 0 3
14961: PPUSH
14962: CALL_OW 256
14966: PUSH
14967: LD_INT 1000
14969: LESS
14970: IFFALSE 14984
// SetLives ( un , 1000 ) ;
14972: LD_VAR 0 3
14976: PPUSH
14977: LD_INT 1000
14979: PPUSH
14980: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
14984: LD_VAR 0 3
14988: PPUSH
14989: LD_INT 81
14991: PUSH
14992: LD_OWVAR 2
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 91
15003: PUSH
15004: LD_VAR 0 3
15008: PUSH
15009: LD_INT 30
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: PPUSH
15026: LD_VAR 0 3
15030: PPUSH
15031: CALL_OW 74
15035: PPUSH
15036: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
15040: LD_VAR 0 2
15044: PUSH
15045: LD_INT 60
15047: GREATER
15048: PUSH
15049: LD_VAR 0 3
15053: PPUSH
15054: CALL_OW 301
15058: OR
15059: IFFALSE 14936
// if un then
15061: LD_VAR 0 3
15065: IFFALSE 15076
// RemoveUnit ( un ) ;
15067: LD_VAR 0 3
15071: PPUSH
15072: CALL_OW 64
// end ;
15076: PPOPN 3
15078: END
